{"info": {"author": "Nicholas Teague", "author_email": "pitg888@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Automunge\n\n![image](https://user-images.githubusercontent.com/44011748/76485571-4855b280-63f3-11ea-9574-c39a66e45e4e.png)\n\n# \n\n## Table of Contents\n* [Introduction](https://github.com/Automunge/AutoMunge#introduction)\n* [Install, Initialize, and Basics](https://github.com/Automunge/AutoMunge#install-initialize-and-basics)\n ___ \n* [automunge(.)](https://github.com/Automunge/AutoMunge#automunge-1)\n* [automunge(.) returned sets](https://github.com/Automunge/AutoMunge#automunge-returned-sets)\n* [automunge(.) passed parameters](https://github.com/Automunge/AutoMunge#automunge-passed-parameters)\n ___ \n* [postmunge(.)](https://github.com/Automunge/AutoMunge#postmunge)\n* [postmunge(.) returned sets](https://github.com/Automunge/AutoMunge#postmunge-returned-sets)\n* [postmunge(.) passed parameters](https://github.com/Automunge/AutoMunge#postmunge-passed-parameters)\n ___ \n* [Default Transformations](https://github.com/Automunge/AutoMunge#default-transformations)\n* [Library of Transformations](https://github.com/Automunge/AutoMunge#library-of-transformations)\n* [Custom Transformation Functions](https://github.com/Automunge/AutoMunge#custom-transformation-functions)\n ___ \n* [Conclusion](https://github.com/Automunge/AutoMunge#conclusion)\n ___ \n\n## Introduction\nAutomunge is a platform for preparing tabular data for machine learning. A user\nhas options between automated inference of column properties for application of\nappropriate simple feature engineering methods, or may also assign to distinct \ncolumns custom feature engineering transformations, custom sets (e.g. \"family \ntrees\") of feature engineering transformations, and custom infill methods. The \nfeature engineering transformations may be accessed from the internal library \n(aka a \"feature store\"), or may also be externally user defined with minimal \nrequirements of simple data structures. The tool includes options for automated \nfeature importance evaluation, automated derivation of infill predictions using \nmachine learning models trained on the set in a fully automated fashion, \nautomated preparation for oversampling for class imbalance in labels, automated \ndimensionality reductions such as based on feature importance, principal \ncomponent analysis (PCA), or binary encoding, automated evaluation of data \nproperty drift between training data and subsequent data, and perhaps most \nimportantly the simplest means for consistent processing of additional data with \njust a single function call. \n\n> In other words, put simply:<br/>\n>  - **automunge(.)** prepares tabular data for machine learning.<br/>\n>  - **postmunge(.)** consistently prepares additional data very efficiently.<br/>\n>  \n> We make machine learning easy.\n\nThe automunge(.) function takes as input tabular training data intended to\ntrain a machine learning model with any corresponding labels if available \nincluded in the set, and also if available consistently formatted test data \nthat can then be used to generate predictions from that trained model. When \nfed pandas dataframes or numpy arrays for these sets the function returns a \nseries of transformed numpy arrays or pandas dataframes (per selection) which \nare numerically encoded and suitable for the direct application of machine \nlearning algorithms. A user has an option between default feature engineering \nbased on inferred properties of the data with feature transformations such as \nz-score normalization, binary encoding for categorical sets, time series \nagregation to sin and cos transforms (with bins for business hours, weekdays, \nand holidays), and more (full documentation below); assigning distinct column \nfeature engineering methods using a built-in library of feature engineering \ntransformations; or alternatively the passing of user-defined custom \ntransformation functions incorporating simple data structures such as to allow \ncustom methods to each column while still making use of all of the built-in \nfeatures of the tool (such as ML infill, feature importance, dimensionality \nreduction, and most importantly the simplest way for the consistent preparation \nof subsequently available data using just a single function call of the \npostmunge(.) function). Missing data points in the sets are also available to be \naddressed by either assigning distinct methods to each column or alternatively by \nthe automated \"ML infill\" method which predicts infill using machine learning \nmodels trained on the rest of the set in a fully generalized and automated \nfashion. automunge(.) returns a populated python dictionary which can be used as \ninput along with a subsequent test data set to the postmunge(.) function for \nconsistent preparation of data.\n\n## Install, Initialize, and Basics\n\nAutoMunge is now available for pip install for open source python data-wrangling:\n\n```\npip install Automunge\n```\n\n```\n#or to upgrade (we currently roll out upgrades pretty frequently)\npip install Automunge --upgrade\n```\n\nOnce installed, run this in a local session to initialize:\n\n```\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n```\n\nWhere eg for train set processing  with default parameters run:\n\n```\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\ntestlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict \\\n= am.automunge(df_train)\n```\n\nor for subsequent consistent processing of train or test data, using the\ndictionary returned from original application of automunge(.), run:\n\n```\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict \\\n= am.postmunge(postprocess_dict, df_test)\n```\n\nI find it helpful to pass these functions with the full range of arguments\nincluded for reference, thus a user may simply copy and past this form.\n\n```\n#for automunge(.) function on original train and test data\n\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\    \nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n```\n\nPlease remember to save the automunge(.) returned object postprocess_dict \nsuch as using pickle library, which can then be later passed to the postmunge(.) \nfunction to consistently prepare subsequently available data.\n\n```\n#Sample pickle code:\n\n#sample code to download postprocess_dict dictionary returned from automunge(.)\nimport pickle\nwith open('filename.pickle', 'wb') as handle:\n  pickle.dump(postprocess_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n#to upload for later use in postmunge(.) in another notebook\nimport pickle\nwith open('filename.pickle', 'rb') as handle:\n  postprocess_dict = pickle.load(handle)\n\n```\nWe can then apply the postprocess_dict saved from a prior application of automunge\nfor consistent processing of additional data.\n```\n#for postmunge(.) function on additional available train or test data\n#using the postprocess_dict object returned from original automunge(.) application\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n```\n\nThe functions depend on pandas dataframe formatted train and test data\nor numpy arrays with consistent order of columns between train and test data. \n(For numpy arrays any label column should be positioned as final column in set.)\nThe functions return numpy arrays or pandas dataframes numerically encoded \nand normalized such as to make them suitable for direct application to a \nmachine learning model in the framework of a user's choice, including sets for \nthe various activities of a generic machine learning project such as training, \nhyperparameter tuning validation (validation1), final  validation (validation2), \nor data intended for use in generation of predictions from the trained model \n(test set). The functions also return a few other sets such as labels, column \nheaders, ID sets, and etc if elected - a full list of returned arrays is below.\n\nWhen left to automation, the function works by inferring a category of \ndata based on properties of each column to select the type of processing \nfunction to apply, for example whether a column is a numerical, categorical,\nbinary, or time-series set. Alternately, a user can pass column header IDs to \nassign specific processing functions to distinct columns - which processing functions\nmay be pulled from the internal library of transformations or alternately user\ndefined. Normalization parameters from the initial automunge application are\nsaved to a returned dictionary for subsequent consistent processing of test data\nthat wasn't available at initial address with the postmunge(.) function. \n\nThe feature engineering transformations are recorded with a series of suffixes \nappended to the column header title in the returned sets, for one example the \napplication of z-score normalization returns a column with header origname + '\\_nmbr'. \nAs another example, for one-hot encoded sets the set of columns are returned with\nheader origname + '\\_category' where category is the category from the set indicated \nby a column. Each transformation category has a unique suffix appender.\n\nIn automation, for numerical data, the functions generate a series of derived\ntransformations resulting in multiple child columns. For numerical data, if the\npowertransform option is selected distribution properties are evaluated for \npotential application of z-score normalization, min-max scaling, power law transform \nvia box-cox method, or mean absolute deviation scaling. Otherwise numerical data \ndefaults to z-score, with z-score normalization options for standard\ndeviation bins for values in range <-2, -2-1, -10, 01, 12, >2 from the\nmean. For numerical sets with all positive values the functions also optionally\ncan return a power-law transformed set using the box-cox method, along with\na corresponding set with z-score normalization applied. For time-series\ndata the model segregates the data by time-scale (year, month, day, hour, minute, \nsecond) and returns year z-score normalized, a pair of sets for combined month/day \nand combined hour / minute / second with sin and cos transformations at period of \ntime-scale, and also returns binned sets identifying business hours, weekdays, and \nUS holidays. For binary categorical data the functions return a single column with \n1/0 designation. For multimodal categorical data the functions return one-hot \nencoded sets using the naming convention origname + _ + category. (I believe this \nautomation of the one-hot encoding method to be a particularly useful feature of \nthe tool.) For all cases the functions generate a supplemental column (NArw)\nwith a boolean identifier for cells that were subject to infill due to missing or \nimproperly formatted data. (Please note that I don't consider the current methods \nof numerical set distribution evaluation highly sophisticated and have some work to \ndo here). \n\nThe functions also include a method we call 'ML infill' which if elected\npredicts infill for missing values in both the train and test sets using\nmachine learning models trained on the rest of the set in a fully\ngeneralized and automated fashion. The ML infill works by initially\napplying infill using traditional methods such as mean for a numerical\nset, most common value for a binary set, and a boolean identifier for\ncategorical. The functions then generate a column specific set of\ntraining data, labels, and feature sets for the derivation of infill.\nThe column's trained model is included in the outputted dictionary for\napplication of the same model in the postmunge function. Alternately, a\nuser can pass column headers to assign different infill methods to distinct \ncolumns. The method currently makes use of Scikit Random Forest models by \ndefault. A user may defer to default hyperparameters or alternatively pass\nhyperparameters via the \"ML_cmnd\" object, and may also make use of grid \nor randomized CV hyperparameter tuning by passing the hyperparameters as\nlists, ranges, or distributions of candidate parameters instead of distinct \nvalues.\n\nThe automunge(.) function also includes a method for feature importance \nevaluation, in which metrics are derived to measure the impact to predictive \naccuracy of original source columns as well as relative importance of \nderived columns using a permutation importance method. Permutation importance \nmethod was inspired by a fast.ai lecture and more information can be found in \nthe paper \"Beware Default Random Forest Importances\" by Terrence Parr, Kerem \nTurgutlu, Christopher Csiszar, and Jeremy Howard. This method currently makes \nuse of Scikit-Learn's Random Forest predictors. I believe the metric we refer to\nas metric2 which evaluates relative importance between features derived from the \nsame source column is a unique approach.\n\nThe function also includes a method we call 'TrainLabelFreqLevel' which\nif elected applies multiples of the feature sets associated with each\nlabel category in the returned training data so as to enable\noversampling of those labels which may be underrepresented in the\ntraining data. This method is available for categorical labels or also\nfor numerical labels when the label processing includes binned aggregations\nsuch as standard deviation bins or powers of ten bins. This method is \nexpected to improve downstream model accuracy for training data with uneven \ndistribution of labels. For more on the class imbalance problem see \"A \nsystematic study of the class imbalance problem in convolutional neural \nnetworks\" - Buda, Maki, Mazurowski.\n\nThe function also can perform dimensionality reduction of the sets via \nprincipal component analysis (PCA). The function automatically performs a \ntransformation when the number of features is more than 50% of the number\nof observations in the train set (this is a somewhat arbitrary heuristic).\nAlternately, the user can pass a desired number of features and their \npreference of type and parameters between linear PCA, Sparse PCA, or Kernel \nPCA - all currently implemented in Scikit-Learn.\n\nThe function also can perform dimensionality reduction of the sets via\nthe Binary option which takes the set of columns with boolean {1/0} encodings\nand collectively applies a binary transform to reduce the number of columns.\n\n## automunge(.)\n\nThe application of the automunge and postmunge functions requires the\nassignment of the function to a series of named sets. We suggest using\nconsistent naming convention as follows:\n\n```\n#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then to run with default parameters\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\ \ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict \\\n= am.automunge(df_train)\n```\n\nThe full set of parameters available to be passed are given here, with\nexplanations provided below: \n\n```\n#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then if you want you can copy paste following to view all of parameter options\n#where df_train is the target training data set to be prepared\n\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\\nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n```\n\nOr for the postmunge function:\n\n```\n#for postmunge(.) function on additional or subsequently available test (or train) data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then to run with default parameters\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test)\n```\n\nWith the full set of arguments available to be passed as:\n\n```\n#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then if you want you can copy paste following to view all of parameter options\n#here postprocess_dict was returned from corresponding automunge(.) call\n#and df_test is the target data set to be prepared\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n```\n\nNote that the only required argument to the automunge function is the\ntrain set dataframe, the other arguments all have default values if\nnothing is passed. The postmunge function requires as minimum the\npostprocess_dict object (a python dictionary returned from the application of\nautomunge) and a dataframe test set consistently formatted as those sets\nthat were originally applied to automunge. \n\nNote that there is a potential source of error if the returned column header \ntitle strings, which will include suffix appenders based on transformations applied, \nmatch any of the original column header titles passed to automunge. This is an edge \ncase not expected to occur in common practice and will return error message at \nconclusion of printouts.\n\n\n...\n\nHere now are descriptions for the returned sets from automunge, which\nwill be followed by descriptions of the arguments which can be passed to\nthe function, followed by similar treatment for postmunge returned sets\nand arguments.\n\n...\n\n## automunge returned sets:\n\n* train: a numerically encoded set of data intended to be used to train a\ndownstream machine learning model in the framework of a user's choice\n\n* trainID: the set of ID values corresponding to the train set if a ID\ncolumn(s) was passed to the function. This set may be useful if the shuffle\noption was applied. Note that an ID column may serve multiple purposes such\nas row identifiers or for pairing tabular data rows with a corresponding\nimage file for instance. Also included in this set is a derived column\ntitled 'Automunge_index_#' (where # is a 12 digit number stamp specific to \neach function call), this column serves as an index identifier for order\nof rows as they were received in passed data, such as may be beneficial\nwhen data is shuffled.\n\n* labels: a set of numerically encoded labels corresponding to the\ntrain set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set. Note\nthat if the labels set is a single column a returned numpy array is \nflattened (e.g. [[1,2,3]] converted to [1,2,3] )\n\n* validation1: a set of training data carved out from the train set\nthat is intended for use in hyperparameter tuning of a downstream model.\n\n* validationID1: the set of ID values corresponding to the validation1\nset. Comparable to columns returned in trainID.\n\n* validationlabels1: the set of labels corresponding to the validation1\nset\n\n* validation2: the set of training data carved out from the train set\nthat is intended for the final validation of a downstream model (this\nset should not be applied extensively for hyperparameter tuning).\n\n* validationID2: the set of ID values corresponding to the validation2\nset. Comparable to columns returned in trainID.\n\n* validationlabels2: the set of labels corresponding to the validation2\nset\n\n* test: the set of features, consistently encoded and normalized as the\ntraining data, that can be used to generate predictions from a\ndownstream model trained with train. Note that if no test data is\navailable during initial address this processing will take place in the\npostmunge(.) function. \n\n* testID: the set of ID values corresponding to the test set. Comparable \nto columns returned in trainID.\n\n* testlabels: a set of numerically encoded labels corresponding to the\ntest set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set.\n\n* labelsencoding_dict: a dictionary that can be used to reverse encode\npredictions that were generated from a downstream model (such as to\nconvert a one-hot encoded set back to a single categorical set).\n```\n#Note that the labelsencoding_dict follows format:\nlabelsencoding_dict = \\\n{'(label root category)' : {'(label column header)' : {(normalization parameters)}}\n```\n\n* finalcolumns_train: a list of the column headers corresponding to the\ntraining data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn.\n\n* finalcolumns_test: a list of the column headers corresponding to the\ntest data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn. Note that this list will match the one preceding.\n\n* featureimportance: a dictionary containing summary of feature importance\nranking and metrics for each of the derived sets. Note that the metric\nvalue provides an indication of the importance of the original source\ncolumn such that larger value suggests greater importance, and the metric2 \nvalue provides an indication of the relative importance of columns derived\nfrom the original source column such that smaller metric2 value suggests \ngreater relative importance. Please note that in cases of multi-column \ncategorical encodings, metric2 has more validity for one-hot encoded sets\nthan binary encoded sets. One can print the values here such as with\nthis code:\n\n```\n#to inspect values returned in featureimportance object one could run\nfor keys,values in featureimportance.items():\n    print(keys)\n    print('metric = ', values['metric'])\n    print('metric2 = ', values['metric2'])\n    print()\n```\nNote that additional feature importance results are available in\npostprocess_dict['FS_sorted'].\n\n* postprocess_dict: a returned python dictionary that includes\nnormalization parameters and trained machine learning models used to\ngenerate consistent processing of additional train or test data such as \nmay not have been available at initial application of automunge. It is \nrecommended that this dictionary be externally saved on each application \nused to train a downstream model so that it may be passed to postmunge(.) \nto consistently process subsequently available test data, such as \ndemonstrated with the pickle library above.\n\n...\n\n## automunge(.) passed parameters\n\n```\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\\nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n```\n\n* df_train: a pandas dataframe or numpy array containing a structured \ndataset intended for use to subsequently train a machine learning model. \nThe set at a minimum should be 'tidy' meaning a single column per feature \nand a single row per observation. If desired the set may include one are more\n\"ID\" columns (intended to be carved out and consistently shuffled or partitioned\nsuch as an index column) and zero or one column intended to be used as labels \nfor a downstream training operation. The tool supports the inclusion of \nnon-index-range column as index or multicolumn index (requires named index \ncolumns). Such index types are added to the returned \"ID\" sets which are \nconsistently shuffled and partitioned as the train and test sets. For passed\nnumpy array any label column should be the final column.\n\n* df_test: a pandas dataframe or numpy array containing a structured \ndataset intended for use to generate predictions from a downstream machine \nlearning model trained from the automunge returned sets. The set must be \nconsistently formatted as the train set with consistent column labels and/or\norder of columns. (This set may optionally contain a labels column if one \nwas included in the train set although it's inclusion is not required). If \ndesired the set may include one or more ID column(s) or column(s) intended \nfor use as labels. A user may pass False if this set is not available. The tool \nsupports the inclusion of non-index-range column as index or multicolumn index \n(requires named index columns). Such index types are added to the returned \n\"ID\" sets which are consistently shuffled and partitioned as the train and \ntest sets.\n\n* labels_column: a string of the column title for the column from the\ndf_train set intended for use as labels in training a downstream machine\nlearning model. The function defaults to False for cases where the\ntrain set does not include a label column. An integer column index may \nalso be passed such as if the source dataset was a numpy array. A user can \nalso pass True in which case the label set will be taken from the final\ncolumn of the train set (including cases of single column in train set).\n\n* trainID_column: a string of the column title for the column from the\ndf_train set intended for use as a row identifier value (such as could\nbe sequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can \nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and \npartitioned. An integer column index or list of integer column indexes \nmay also be passed such as if the source dataset was a numpy array.\n\n* testID_column: a string of the column title for the column from the\ndf_test set intended for use as a row identifier value (such as could be\nsequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can \nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and \npartitioned. An integer column index or list of integer column indexes \nmay also be passed such as if the source dataset was a numpy array.\n\n* valpercent1: a float value between 0 and 1 which designates the percent\nof the training data which will be set aside for the first validation\nset (generally used for hyperparameter tuning of a downstream model).\nThis value defaults to 0. (Previously the default here was set at 0.20 but \nthat is fairly an arbitrary value and a user may wish to deviate for \ndifferent size sets.) Note that this value may be set to 0 if no validation \nset is needed (such as may be the case for k-means validation). Please see \nalso the notes below for the shuffletrain parameter.  Note that if \nshuffletrain parameter is set to False then any validation sets will be \npulled from the bottom x% sequential rows of the df_train dataframe. (Where \nx% is the sum of validation ratios.) Note that if this value is set to \nFalse although the validations will be pulled from sequential rows, the \nsplit between validaiton1 and validation2 sets will be randomized. Note \nthat if desire is instead to pull validation rows from the top x% sequential\nrows one can first reverse the order of the rows such as via \ndf_train = df_train[::-1]\n\n* valpercent2: a float value between 0 and 1 which designates the percent\nof the training data which will be set aside for the second validation\nset (generally used for final validation of a model prior to release).\nThis value defaults to 0. (Previously the default was set at 0.10 but that \nis fairly an arbitrary value and a user may wish to deviate for different \nsize sets.) Note that if shuffletrain is set to False although the validations \nwill be pulled from sequential rows, the split between validaiton1 and \nvalidation2 sets will be randomized.\n\n* floatprecision: an integer with acceptable values of _16/32/64_ designating\nthe memory precision for returned float values. (A tradeoff between memory\nusage and floating point precision, smaller for smaller footprint.) \nThis currently defaults to 32 for 32-bit precision of float values. Note\nthat there may be energy efficiency benefits at scale to basing this to 16.\nNote that integer data types are still retained with this option.\n\n* shuffletrain: can be passed as one of _{True, False, 'traintest'}_ which \nindicates if the rows in df_train will be shuffled prior to carving out the \nvalidation sets.  This value defaults to True. Note that if this value is set to \nFalse then any validation sets will be pulled from the bottom x% sequential \nrows of the df_train dataframe. (Where x% is the sum of validation ratios.) \nOtherwise validation rows will be randomly selected. The third option 'traintest'\nis comparable to True for the training set and shuffles the returned test sets\nas well. Note that all corresponding returned sets are consistently shuffled \n(such as between train/labels/trainID sets).\n\n* TrainLabelFreqLevel: a boolean identifier _(True/False)_ which indicates\nif the TrainLabelFreqLevel method will be applied to prepare for oversampling \ntraining data associated with underrepresented labels (aka class imbalance). \nThe method adds multiples of training data rows for those labels with lower \nfrequency resulting in an (approximately) levelized frequency. This defaults \nto False. Note that this feature may be applied to numerical label sets if \nthe processing applied to the set includes aggregated bins, such as for example\nby passing a label column to the 'exc3' category in assigncat for pass-through\nforce to numeric with inclusion of standard deviation bins or to 'exc4' for \ninclusion of powers of ten bins. For cases where labels are included in the \ntest set, this may also be passed as _'traintest'_ to apply levelizing to both \ntrain and test sets or be passed as _'test'_ to only apply levelizing to test set.\n\n* powertransform: _(False/True/'excl'/'exc2')_, defaults to False, when passed as \nTrue an evaluation will be performed of distribution properties to select between\nbox-cox, z-score, min-max scaling, or mean absolute deviation scaling normalization\nof numerical data. Note that after application of box-cox transform child columns \nare generated for a subsequent z-score normalization. Please note that\nI don't consider the current means of distribution property evaluation highly\nsophisticated and we will continue to refine this method with further research\ngoing forward. Additionally, powertransform may be passed as values 'excl' or \n'exc2', where for 'excl' columns not explicitly assigned to a root category in \nassigncat will be left untouched, or for 'exc2' columns not explicitly assigned \nto a root category in assigncat will be forced to numeric and subject to default \nmodeinfill. (These two excl arguments may be useful if a user wants to experiment \nwith specific transforms on a subset of the columns without incurring processing \ntime of an entire set.) Note that powertransform not applied to label columns by\ndefault, but can still be applied by passing label column to ptfm in assigncat.\n\n* binstransform: a boolean identifier _(True/False)_ which indicates if all\ndefault numerical sets will receive bin processing such as to generate child\ncolumns with boolean identifiers for number of standard deviations from\nthe mean, with groups for values <-2, -2-1, -10, 01, 12, and >2. This value \ndefaults to False.\n\n* MLinfill: a boolean identifier _(True/False)_ which indicates if the ML\ninfill method will be applied as a default to predict infill for missing \nor improperly formatted data using machine learning models trained on the\nrest of the set. This defaults to False. Note that ML infill may alternatively\nbe assigned to distinct columns in assigninfill. Note that even if sets passed\nto automunge(.) have no points needing infill, when MLinfill is activated \nmachine learning models will still be trained for potential use of predicting \ninfill to subsequent data passed through the postmunge(.) function.\n\n* infilliterate: an integer indicating how many applications of the ML\ninfill processing are to be performed for purposes of predicting infill.\nThe assumption is that for sets with high frequency of missing values\nthat multiple applications of ML infill may improve accuracy although\nnote this is not an extensively tested hypothesis. This defaults to 1.\nNote that due to the sequence of model training / application, a comparable\nset prepared in automunge and postmunge with this option may vary slightly in \noutput (as automunge(.) will train separate models on each iteration and\npostmunge will just apply the final model on each iteration).\n\n* randomseed: a positive integer used as a seed for randomness throughout \nsuch as for data set shuffling, ML infill, and feature importance  algorithms. \nThis defaults to 42, a nice round number.\n\n* LabelSmoothing_train / LabelSmoothing_test / LabelSmoothing_val: each of these\nparameters accept float values in range _0.0-1.0_ or the default value of _False_ to \nturn off. train is for the train set labels, test is for the test set labels, and\nval is for the validation set labels. Label Smoothing refers to the regularization\ntactic of transforming boolean encoded labels from 1/0 designations to some mix of\nreduced/increased threshold - for example passing the float 0.9 would result in the\nconversion from 1/0 to 0.9/#, where # is a function of the number of categories in \nthe label set - for example for a boolean label it would convert 1/0 to 0.9/0.1, or \nfor the one-hot encoding of a three label set it would convert 1/0 to 0.9/0.05.\nHat tip for the concept to \"Rethinking the Inception Architecture for Computer Vision\"\nby Szegedy et al. Note that I believe not all predictive library classifiers \nuniformly accept smoothed labels, but when available the method can at times be useful. \nNote that a user can pass _True_ to either of LabelSmoothing_test / LabelSmoothing_val \nwhich will consistently encode to LabelSmoothing_train. Please note that if multiple\none-hot encoded transformations originate from the same labels source column, the\napplication of Label Smoothing will be applied to each set individually.\n\n* LSfit: a _True/False_ indication for basis of label smoothing parameters. The default\nof False means the assumption will be for level distribution of labels, passing True\nmeans any label smoothing will evaluate distribution of label activations such as to fit\nthe smoothing factor to specific cells based on the activated column and target column.\nThe LSfit parameters of transformations will be based on properties derived from the\ntrain set labels, such as for consistent encoding to the other sets (test or validation).\n\n* numbercategoryheuristic: an integer used as a heuristic. When a \ncategorical set has more unique values than this heuristic, it defaults \nto categorical treatment via ordinal processing via 'ord3', otherwise \ncategorical sets default to binary encoding via '1010'. This defaults to 63.\n\n* pandasoutput: a selector for format of returned sets. Defaults to _False_\nfor returned Numpy arrays. If set to _True_ returns pandas dataframes\n(note that index is not always preserved, non-integer indexes are extracted to the ID sets,\nand automunge(.) generates an application specific range integer index in ID sets \ncorresponding to the order of rows as they were passed to function).\n\n* NArw_marker: a boolean identifier _(True/False)_ which indicates if the\nreturned sets will include columns with markers for rows subject to \ninfill (columns with suffix 'NArw'). This value defaults to False. Note \nthat the properties of cells qualifying as candidate for infill are based\non the 'NArowtype' of the root category of transformations associated with \nthe column, see Library of Transformations section below for catalog, the\nvarious NArowtype options are also further clarified below in discussion \naround the processdict parameter.\n\n* featureselection: a boolean identifier _(True/False)_ telling the function \nto perform a feature importance evaluation. If selected automunge will\nreturn a summary of feature importance findings in the featureimportance\nreturned dictionary. This also activates the trimming of derived sets\nthat did not meet the importance threshold if [featurepct < 1.0 and \nfeaturemethod = 'pct'] or if [fesaturemetric > 0.0 and featuremethod = \n'metric']. Note this defaults to False because it cannot operate without\na designated label column in the train set. (Note that any user-specified\nsize of validationratios if passed are used in this method, otherwise \ndefaults to 0.2.) Note that sorted feature importance results are returned\nin postprocess_dict['FS_sorted'], including columns sorted by metric and metric2.\n\n* featurepct: the percentage of derived sets that are kept in the output\nbased on the feature importance evaluation. Accepts float in the range 0-1.\nNote that NArw columns are only retained for those sets corresponding to \ncolumns that \"made the cut\". This item only used if featuremethod passed as \n'pct'.\n\n* featuremetric: the feature importance metric below which derived sets\nare trimmed from the output. Note that this item only used if\nfeaturemethod passed as 'metric'.\n\n* featuremethod: can be passed as one of _{'pct', 'metric', 'default',_ \n_'report'}_ where 'pct' or 'metric' to select which feature importance method \nis used for trimming the derived sets as a form of dimensionality reduction. \nOr can pass as 'default' for ignoring the featurepct/featuremetric parameters \nor can pass as 'report' to return the featureimportance results with no further\nprocessing (other returned sets are empty). Defaults to 'default'.\n\n* Binary: a dimensionality reduction technique whereby the set of columns\nwith binary encodings are collectively encoded with binary encoding such\nas may drastically reduce the column count. This has many benefits such as\nmemory bandwidth and energy cost for inference I suspect, however, there \nmay be tradeoffs associated with ability of the model to handle outliers,\nas for any new combination of boolean set in the test data the collection\nwill be subject to the infill. Pass _True_ to activate, defaults to _False_. \n(For now also requires passing parameter excl_suffix = True.) Note that\ncan also be passed as _'retain'_ to retain the boolean columns that served \nas basis for encoding.\n\n* PCAn_components: defaults to _None_ for no PCA dimensionality reduction performed\n(other than based on the automatic PCA application based on ratio of columns and \nrows - see ML_cmnd if you want to turn that off). A user can pass _an integer_ to \ndefine the number of PCA derived features for purposes of dimensionality \nreduction, such integer to be less than the otherwise returned number of sets. \nFunction will default to kernel PCA for all non-negative sets or otherwise Sparse PCA. \nAlso if this value is passed as a _float <1.0_ then linear PCA will be applied such \nthat the returned number of sets are the minimum number that can reproduce that \npercent of the variance. Note this can also be passed in conjunction with assigned \nPCA type or parameters in the ML_cmnd object.\n\n* PCAexcl: a _list_ of column headers for columns that are to be excluded from\nany application of PCA\n\n* excl_suffix: boolean selector _{True, False}_ for whether columns headers from 'excl' \ntransform are returned with suffix appender '\\_excl' included. Defaults to False for\nno suffix.\n\n* ML_cmnd: \n\n```\nML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n           'PCA_type':'default', \\\n           'PCA_cmnd':{}}, \\\n```\nThe ML_cmnd allows a user to pass parameters to the predictive algorithms\nused for ML infill / feature importance evaluation or PCA. Currently the only\noption for 'MLinfill_type' is default which uses Scikit-learn's Random \nForest implementation, the intent is to add other options in a future extension.\nFor example, a user who doesn't mind a little extra training time for ML infill \ncould increase the passed n_estimators beyond the scikit default of 100.\n\n```\nML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'n_estimators':1000}, \\\n                            'RandomForestRegressor':{'n_estimators':1000}}, \\\n           'PCA_type':'default', \\\n           'PCA_cmnd':{}}, \\\n\n```\nA user can also perform hyperparameter tuning of the parameters passed to the\npredictive algorithms by instead of passing distinct values passing lists or\nrange of values. The hyperparameter tuning defaults to grid search for cases \nwhere user passes parameters as lists or ranges, for example:\n```\nML_cmnd = {'MLinfill_type':'default', \\\n           'hyperparam_tuner':'gridCV', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'max_depth':range(4,6)}, \\\n                            'RandomForestRegressor' :{'max_depth':[3,6,12]}}}\n```\nA user can also perform randomized search via ML_cmnd, and pass parameters as \ndistributions via scipy stats module such as:\n```\nML_cmnd = {'MLinfill_type'    : 'default', \\\n           'hyperparam_tuner' : 'randomCV', \\\n           'randomCV_n_iter'  : 15, \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'max_depth':stats.randint(3,6)}, \\\n                            'RandomForestRegressor' :{'max_depth':[3,6,12]}}}\n```\n\nA user can also assign specific methods for PCA transforms. Current PCA_types\nsupported include 'PCA', 'SparsePCA', and 'KernelPCA', all via Scikit-Learn.\nNote that the n_components are passed separately with the PCAn_components \nargument noted above. A user can also pass parameters to the PCA functions\nthrough the PCA_cmnd, for example one could pass a kernel type for KernelPCA\nas:\n```\nML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{}, \\\n                            'RandomForestRegressor':{}}, \\\n           'PCA_type':'KernelPCA', \\\n           'PCA_cmnd':{'kernel':'sigmoid'}}, \\\n\n```\nNote that the PCA is currently defaulted to active for cases where the \ntrain set number of features is >0.50 the number of rows. A user can \nchange this ratio by passing 'PCA_cmnd':{'col_row_ratio':0.22}} for \ninstance. Also a user can simply turn off default PCA transforms by \npassing 'PCA_cmnd':{'PCA_type':'off'}. A user can also exclude returned\nboolean (0/1) columns from any PCA application by passing \n'PCA_cmnd':{'bool_PCA_excl':True}\nor exclude returned boolean and ordinal columns from PCA application by\n'PCA_cmnd':{'bool_ordl_PCAexcl':True}\nsuch as could potentially result in memory savings.\n\n* assigncat:\n\n```\n#Here are the current transformation options built into our library, which\n#we are continuing to build out. A user may also define their own.\n\nassigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n             'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n             'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n             'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n             'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n             'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n             'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n             'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n             'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n             'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n             'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n             'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n             'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n             'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n             'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n             'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n             'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n             'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n             'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n             'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n             'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n             'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n             'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n             'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n             'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n             'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n             'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}\n```         \n\nDescriptions of these transformations are provided in document below (in section\ntitled \"Library of Transformations\").\n\nA user may add column header identifier strings to each of these lists to assign \na distinct specific processing approach to any column (including labels). Note \nthat this processing category will serve as the \"root\" of the tree of transforms \nas defined in the transformdict. Note that additional categories may be passed if \ndefined in the passed transformdict and processdict. An example of usage here \ncould be if a user wanted to only process numerical columns 'nmbrcolumn1' and \n'nmbrcolumn2' with z-score normalization instead of the full range of numerical \nderivations when implementing the binstransform parameter they could pass \n```\nassigncat = {'nbr2':['nmbrcolumn1', 'nmbrcolumn2']}\n```\nNote that for single entry column assignments a user can just pass the string or integer \nof the column header without the list brackets.\n\n* assigninfill \n```\n#Here are the current infill options built into our library, which\n#we are continuing to build out.\nassigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                'modeinfill':[], 'lcinfill':[]}, \\\n```\nA user may add column identifier strings to each of these lists to designate the \ncolumn-specific infill approach for missing or improperly formatted values. The\nsource column identifier strings may be passed for assignment of common infill \napproach to all columns derived from same source column, or derived column identifier\nstrings (including the suffix appenders from transformations) may be passed to assign \ninfill approach to a specific derived column. Note that passed derived column headers \ntake precedence in case of overlap with passed source column headers. Note that infill\ndefaults to MLinfill if nothing assigned and the MLinfill argument to automunge is set \nto True. Note that for single entry column assignments a user can just pass the string \nor integer of the column header without the list brackets.\n```\n#  - stdrdinfill  : the default infill specified in the library of transformations for \n#                   each transform below. \n#  - MLinfill     : for MLinfill to distinct columns when MLinfill parameter not activated\n#  - zeroinfill   : inserting the integer 0 to missing cells. \n#  - oneinfill    : inserting the integer 1. \n#  - adjinfill    : passing the value from the preceding row to missing cells. \n#  - meaninfill   : inserting the mean derived from the train set to numeric columns. \n#  - medianinfill : inserting the median derived from the train set to numeric columns. \n#                   (Note currently boolean columns derived from numeric are not supported \n#                   for mean/median and for those cases default to those infill from stdrdinfill.) \n#  - modeinfill   : inserting the most common value for a set, note that modeinfill \n#                   supports multi-column boolean encodings, such as one-hot encoded sets or \n#                   binary encoded sets. \n#  - lcinfill     : comparable to modeinfill but with least common value instead of most. \n\n#an example of passing columns to assign infill via assigninfill:\n#for source column 'column1', which hypothetically is returned through automunge(.) as\n#'column1_nmbr', 'column1_mnmx', 'column1_bxcx_nmbr'\n#we can assign MLinfill to 'column1_bxcx_nmbr' and meaninfill to the other two by passing \n#to an automunge call: \n\nassigninfill = {'MLinfill':['column1_bxcx_nmbr'], 'meaninfill':['column1']}\n```\nPlease note that support of assigninfill to label columns is intended as a future extension.\n\n* assignparam\nA user may pass column-specific parameters to those transformation functions\nthat accept parameters. Any parameters passed to automunge(.) will be saved in\nthe postprocess_dict and consistently applied in postmunge(.). assignparam is \na dictionary that should be formatted per following example:\n```\n#template:\nassignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                        '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n\n#example:\nassignparam = {'category1' : {'column1' : {'param1' : 123}, 'column2' : {'param1' : 456}}, \\\n               'cateogry2' : {'column3' : {'param2' : 'abc', 'param3' : 'def'}}}\n\n#In other words:\n#The first layer keys are the transformation category for which parameters are intended\n#The second layer keys are string identifiers for the columns for which the parameters are intended\n#The third layer keys are the parameters whose values are to be passed.\n\n#As an example with actual parameters, consider the transformation category 'splt' intended for 'column1',\n#which accepts parameter 'minsplit' for minimum character length of detected overlaps. If we wanted to\n#pass 4 instead of the default of 5:\nassignparam = {'splt' : {'column1' : {'minsplit' : 4}}\n\n#Note that the category identifier should be the category entry to the family tree primitive associated\n#with the transform, which may be different than the root category of the family tree assigned in assigncat.\n#The set of family trees definitions for root categories are included below for reference.\n\n#Note that column string identifiers may just be the source column string or may include the\n#suffix appenders such as if multiple versions of transformations are applied within the same family tree\n#If more than one column identifier matches a column, the longest character length key which matches\n#will be applied (such as may include suffix appenders).\n\n#Note that if a user wishes to overwrite the default parameters for all columns without specifying\n#them individually they can pass a 'default_assignparam' entry as follows (this only overwrites those \n#parameters that are not otherwise specified in assignparam)\nassignparam = {'category1' : {'column1' : {'param1' : 123}, 'column2' : {'param1' : 456}}, \\\n               'cateogry2' : {'column3' : {'param2' : 'abc', 'param3' : 'def'}}, \\\n               'default_assignparam' : {'category3' : {'param4' : 789}}}\n\n```\nSee the Library of Transformations section below for those transformations that accept parameters.\n\n\n* transformdict: allows a user to pass a custom tree of transformations.\nNote that a user may define their own (traditionally 4 character) string \"root\"\nidentifiers for a series of processing steps using the categories of processing \nalready defined in our library and then assign columns in assigncat, or for \ncustom processing functions this method should be combined with processdict \nwhich is only slightly more complex. For example, a user wishing to define a \nnew set of transformations for numerical series 'newt' that combines NArows, \nmin-max, box-cox, z-score, and standard deviation bins could do so by passing a \ntrasnformdict as:\n```\ntransformdict =  {'newt' : {'parents' : ['bxc4'], \\\n                            'siblings': [], \\\n                            'auntsuncles' : ['mnmx'], \\\n                            'cousins' : ['NArw'], \\\n                            'children' : [], \\\n                            'niecesnephews' : [], \\\n                            'coworkers' : [], \\\n                            'friends' : []}}\n\n#Where since bxc4 is passed as a parent, this will result in pulling\n#offspring keys from the bxc4 family tree, which has a nbr2 key as children.\n\n#from automunge library:\n    transform_dict.update({'bxc4' : {'parents' : ['bxcx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : ['NArw'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n#note that 'nbr2' is passed as a coworker primitive meaning no downstream \n#primitives would be accessed from the nbr2 family tree. If we wanted nbr2 to\n#incorporate any offspring from the nbr2 tree we could instead assign as children\n#or niecesnephews.\n\n```\nBasically here 'newt' is the key and when passed to one of the family primitives\nthe corresponding process function is applied, and if it is passed to a family\nprimitive with downstream offspring then those offspring keys are pulled from\nthat key's family tree. For example, here mnmx is passed as an auntsuncles which\nmeans the mnmx processing function is applied with no downstream offspring. The\nbxcx key is passed as a parent which means the bxcx transform is applied coupled\nwith any downstream transforms from the bxcx key family tree, which we also show.\nNote the family primitives tree of transformations can be summarized as:\n```\n'parents' :           upstream / first generation / replaces column / with offspring\n'siblings':           upstream / first generation / supplements column / with offspring\n'auntsuncles' :       upstream / first generation / replaces column / no offspring\n'cousins' :           upstream / first generation / supplements column / no offspring\n'children' :          downstream parents / offspring generations / replaces column / with offspring\n'niecesnephews' :     downstream siblings / offspring generations / supplements column / with offspring\n'coworkers' :         downstream auntsuncles / offspring generations / replaces column / no offspring\n'friends' :           downstream cousins / offspring generations / supplements column / no offspring\n```\n\n![image](https://user-images.githubusercontent.com/44011748/76485331-a2a24380-63f2-11ea-8559-08bb1c3be395.png)\n\nNote that a user should avoid redundant entries across a set of upstream or downstream primitives.\nSince there is recursion involved a user should be careful of creating infinite loops from passing\ndownstream primitive entries with offspring whose own offspring coincide with an earlier generation.\n(The presence of infinite loops is tested for to a max depth of 111 offspring, an arbitrary figure.)\n\nNote that when we define a new transform such as 'newt' above, we also need \nto define a corresponding processdict entry for the new category, which we \ndemonstrate here:\n\n\n* processdict: allows a user to define their own processing functions \ncorresponding to new transformdict keys. We'll describe the entries here:\n```\n#for example \nprocessdict =  {'newt' : {'dualprocess' : None, \\\n                          'singleprocess' : None, \\\n                          'postprocess' : None, \\\n                          'NArowtype' : 'numeric', \\\n                          'MLinfilltype' : 'numeric', \\\n                          'labelctgy' : 'mnmx'}}\n\n#A user should pass either a pair of processing functions to both \n#dualprocess and postprocess, or alternatively just a single processing\n#function to singleprocess, and pass None to those not used.\n#For now, if just using the category as a root key and not as a family primitive, \n#can simply pass None to all the processing slots. We'll demonstrate their \n#composition and data structures for custom processing functions later in the\n#section of this document \"Custom Processing Functions\".\n\n#dualprocess: for passing a processing function in which normalization \n#             parameters are derived from properties of the training set\n#             and jointly process the train set and if available test set\n\n#singleprocess: for passing a processing function in which no normalization\n#               parameters are needed from the train set to process the\n#               test set, such that train and test sets processed separately\n\n#postprocess: for passing a processing function in which normalization \n#             parameters originally derived from the train set are applied\n#             to seperately process a test set\n\n#NArowtype: can be entries of {'numeric', 'integer', 'justNaN', 'exclude', \n#                              'positivenumeric', 'nonnegativenumeric', \n#                              'nonzeronumeric', 'parsenumeric', 'parsenumeric_commas', \n#                              'datetime'}\n# - 'numeric' for source columns with expected numeric entries\n# - 'integer' for source columns with expected integer entries\n# - 'justNaN' for source columns that may have expected entries other than numeric\n# - 'exclude' for source columns that aren't needing NArow columns derived\n# - 'positivenumeric' for source columns with expected positive numeric entries\n# - 'nonnegativenumeric' for source columns with expected non-negative numeric (zero allowed)\n# - 'nonzeronumeric' for source columns with allowed positive and negative but no zero\n# - 'parsenumeric' marks for infill strings that don't contain any numeric character entries\n# - 'parsenumeric_commas' marks for infill strings that don't contain any numeric character \n#                         entries, recognizes commas\n# - 'datetime' marks for infill cells that aren't recognized as datetime objects\n# ** Note that NArowtype also is used as basis for metrics evaluated in drift assessment of source columns\n# ** Note that by default any np.inf values are converted to NaN for infill\n\n#MLinfilltype: can be entries {'numeric', 'singlct', 'binary', 'multirt', 'multisp', '1010',\n#                              'exclude', 'boolexclude'}\n#              'numeric' refers to columns where predictive algorithms treat\n#                        as a regression for numeric sets\n#              'singlct' single column sets with ordinal entries (integers)\n#              'binary'  single column sets with boolean entries (0/1)\n#              'multirt' refers to category returning multiple columns where \n#                        predictive algorithms treat as a multi modal classifier\n#              'multisp' for bins multicolumn sets with boolean entries\n#                        (similar to multirt but treated differently in levelizer)\n#              '1010'   for multicolumn sets with binary encoding via 1010\n#                        will be converted to onehot for ML\n#              'exclude' for columns which will be excluded from ML infill\n#              'boolexclude' boolean set suitable for Binary transform but excluded from all infill (eg NArw entries)\n\n#labelctgy: should be a string entry of a single transform category found as an entry in the root category's family \n#tree. Used to determine a basis of feature selection for cases where labels are returned in multiple configurations.\n#Also used in label frequency levelizer.\n\n```\n\n* evalcat: modularizes the automated evaluation of column properties for assignment \nof root transformation categories, allowing user to pass custom functions for this \npurpose. Passed functions should follow format:\n\n```\ndef evalcat(df, column, numbercategoryheuristic, powertransform, labels = False):\n  \"\"\"\n  #user defined function that takes as input a dataframe df and column id string column\n  #evaluates the contents of cells and classifies the column for root category of \n  #transformation (e.g. comparable to categories otherwise assigned in assigncat)\n  #returns category id as a string\n  \"\"\"\n  ...\n  return category\n```\nAnd could then be passed to automunge function call such as:\n```\nevalcat = evalcat\n```\nI recommend using the evalcategory function defined in master file as starting point. \n(Minus the 'self' parameter since defining external to class.) Note that the \nparameters numbercategoryheuristic, powertransform, and labels are passed as user \nparameters in automunge(.) call and only used in evalcategory function, so if user wants \nto repurpose them totally can do so. (They default to 63, False, False.) Note evalcat \ndefaults to False to use built-in evalcategory function. Note evalcat will only be \napplied to columns not assigned in assigncat. (Note that columns assigned to 'eval' / 'ptfm'\nin assigncat will be passed to this function for evaluation with powertransform = False / True\nrespectively.)\n\n* printstatus: user can pass _True/False_ indicating whether the function will print \nstatus of processing during operation. Defaults to True.\n\nOk well we'll demonstrate further below how to build custom processing functions,\nfor now this just gives you sufficient tools to build sets of processing using\nthe built in sets in the library.\n\n...\n\n# postmunge(.)\n\nThe postmunge(.) function is intended to consistently prepare subsequently available\nand consistently formatted train or test data with just a single function call. It \nrequires passing the postprocess_dict object returned from the original application \nof automunge and that the passed test data have consistent column header labeling as \nthe original train set (or for Numpy arrays consistent order of columns). Processing\ndata with postmunge(.) is considerably more efficient than automunge(.) since it does \nnot require the overhead of the evaluation methods, the derivation of transformation \nnormalization parameters, and/or the training of models for ML infill.\n\n```\n\n#for postmunge(.) function to prepare subsequently available data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#Remember to initialize automunge\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n\n#Then we can run postmunge function as:\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n```\n\nOr to run postmunge(.) with default parameters we simply need the postprocess_dict\nobject returned from the corresponding automunge(.) call and a consistently formatted\nadditional data set.\n\n```\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict \\\n= am.postmunge(postprocess_dict, df_test)\n```          \n\n## postmunge(.) returned sets:\nHere now are descriptions for the returned sets from postmunge, which\nwill be followed by descriptions of the arguments which can be passed to\nthe function. \n\n* test: the set of features, consistently encoded and normalized as the\ntraining data, that can be used to generate predictions from a model\ntrained with the train set from automunge.\n\n* testID: the set of ID values corresponding to the test set. Also included \nin this set is a derived column titled 'Automunge_index_#' (where # is a \n12 digit number stamp specific to original automunge(.) function call), \nthis column serves as an index identifier for order of rows as they were \nreceived in passed data, such as may be beneficial when data is shuffled.\n\n* testlabels: a set of numerically encoded labels corresponding to the\ntest set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set. Note\nthat if the labels set is a single column a returned numpy array is \nflattened (e.g. [[1,2,3]] converted to [1,2,3] )\n\n* labelsencoding_dict: this is the same labelsencoding_dict returned from\nautomunge, it's used in case one wants to reverse encode predicted labels\n\n* finalcolumns_test: a list of the column headers corresponding to the\ntest data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn. Note that this list should match the one from automunge.\n\n* postreports_dict: a dictionary containing entries for following:\n  - postreports_dict['featureimportance']: results of optional feature \n  importance evaluation based on parameter featureeval. (See automunge(.) \n  notes above for feature importance printout methods.)\n  - postreports_dict['finalcolumns_test']: list of columns returned from \n  postmunge\n  - postreports_dict['driftreport']: results of optional drift report \n  evaluation tracking properties of postmunge data in comparison to the \n  original data from automunge call associated with the postprocess_dict \n  presumably used to train a model. Results aggregated by entries for the\n  original (pre-transform) list of columns, and include the normalization\n  parameters from the automunge call saved in postprocess_dict as well\n  as the corresponding parameters from the new data consistently derived \n  in postmunge\n  - postreports_dict['sourcecolumn_drift']: results of optional drift report\n  evaluation tracking properties of postmunge data derived from source \n  columns in comparison to the original data from automunge(.) call associated \n  with the postprocess_dict presumably used to train a model. \n\n```\n#the results of a postmunge driftreport assessment are returned in the postreports_dict \n#object returned from a postmunge call, as follows:\n\npostreports_dict = \\\n{'featureimportance':{(not shown here for brevity)},\n'finalcolumns_test':[(derivedcolumns)],\n'driftreport': {(sourcecolumn) : {'origreturnedcolumns_list':[(derivedcolumns)], \n                           'newreturnedcolumns_list':[(derivedcolumns)],\n                           'drift_category':(category),\n                           'orignotinnew': {(derivedcolumn):{'orignormparam':{(stats)}},\n                           'newnotinorig': {(derivedcolumn):{'newnormparam':{(stats)}},\n                           'newreturnedcolumn':{(derivedcolumn):{'orignormparam':{(stats)},\n                                                                 'newnormparam':{(stats)}}}},\n'sourcecolumn_drift': {'orig_driftstats': {(sourcecolumn) : (stats)}, \n                       'new_driftstats' : {(sourcecolumn) : (stats)}}}\n\n#the driftreport stats for derived columns are based on the normalization_dict entries from the\n#corresponding processing function associated with that column's derivation\n\n#here is an example of source column drift assessment statistics for a positive numeric root category:\npostreports_dict['sourcecolumn_drift']['new_driftstats'] = \\\n{(sourcecolumn) : {'max'         : (stat),\n                   'quantile_99' : (stat),\n                   'quantile_90' : (stat),\n                   'quantile_66' : (stat),\n                   'median'      : (stat),\n                   'quantile_33' : (stat),\n                   'quantile_10' : (stat),\n                   'quantile_01' : (stat),\n                   'min'         : (stat),\n                   'mean'        : (stat),\n                   'std'         : (stat),\n                   'MAD'         : (stat),\n                   'skew'        : (stat),\n                   'shapiro_W'   : (stat),\n                   'shapiro_p'   : (stat),\n                   'nonpositive_ratio' : (stat),\n                   'nan_ratio'   : (stat)}} \n```\n\n...\n\n\n## postmunge(.) passed parameters\n\n```\n\n#for postmunge(.) function on subsequently available test data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#Remember to initialize automunge\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n\n#Then we can run postmunge function as:\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_test = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n```\n\n* postprocess_dict: this is the dictionary returned from the initial\napplication of automunge(.) which included normalization parameters to\nfacilitate consistent processing of additional train or test data to the \noriginal processing of the train set. This requires a user to remember \nto download the dictionary at the original application of automunge, \notherwise if this dictionary is not available a user can feed this \nsubsequent test data to the automunge along with the original train data \nexactly as was used in the original automunge(.) call.\n\n* df_test: a pandas dataframe or numpy array containing a structured \ndataset intended for use to generate predictions from a machine learning \nmodel trained from the automunge returned sets. The set must be consistently \nformatted as the train set with consistent order of columns and if labels are\nincluded consistent labels. If desired the set may include an ID column. The \ntool supports the inclusion of non-index-range column as index or multicolumn \nindex (requires named index columns). Such index types are added to the \nreturned \"ID\" sets which are consistently shuffled and partitioned as the \ntrain and test sets.\n\n* testID_column: a string of the column title for the column from the\ndf_test set intended for use as a row identifier value (such as could be\nsequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can \nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and \npartitioned. An integer column index or list of integer column indexes \nmay also be passed such as if the source dataset was a numpy array.\n\n* labelscolumn: default to _False_ indicates that a labels column is not \nincluded in the test set passed to postmunge. A user can either pass\n_True_ or the string ID of the labels column, noting that it is a requirement\nthat the labels column header string must be consistent with that from\nthe original train set. An integer column index may also be passed such\nas if the source dataset was a numpy array. A user should take care to set \nthis parameter if they are passing data with labels. Note that True signals\npresence of consistent labels column header as was passed to automunge(.).\n\n* pandasoutput: a selector for format of returned sets. Defaults to _False_\nfor returned Numpy arrays. If set to _True_ returns pandas dataframes\n(note that index is not always preserved, non-integer indexes are extracted \nto the ID sets, and automunge(.) generates an application specific range \ninteger index in ID sets corresponding to the order of rows as they were \npassed to function).\n\n* printstatus: user can pass _True/False_ indicating whether the function \nwill print status of processing during operation. Defaults to True.\n\n* TrainLabelFreqLevel: a boolean identifier _(True/False)_ which indicates\nif the TrainLabelFreqLevel method will be applied to oversample test\ndata associated with underrepresented labels. The method adds multiples\nto test data rows for those labels with lower frequency resulting in\nan (approximately) levelized frequency. This defaults to False. Note that\nthis feature may be applied to numerical label sets if the assigncat processing\napplied to the set in automunge(.) had included standard deviation bins, such\nas for example 'exc3' for pass-through numeric with standard deviation bins,\nor 'exc4' for pass-through numeric with powers of ten bins. Note this \nmethod requires the inclusion of a designated label column.\n\n* featureeval: a boolean identifier _(True/False)_ to activate a feature\nimportance evaluation, comparable to one performed in automunge but based\non the test set passed to postmunge. The results are returned in the\npostreports_dict object returned from postmunge as postreports_dict['featureimportance']. \nThe results will also be printed out if printstatus is activated.  Note that sorted \nfeature importance results are returned in postreports_dict['FS_sorted'], including \ncolumns sorted by metric and metric2.\n\n* driftreport: activates a drift report evaluation, in which the normalization \nparameters are recalculated for the columns of the test data passed to postmunge \nfor comparison to the original normalization parameters derived from the corresponding \ncolumns of the automunge train data set. The results are returned in the\npostreports_dict object returned from postmunge as postreports_dict['driftreport']. \nThe results will also be printed out if printstatus is activated. Defaults to _False_, and:\n  - _False_ means no postmunge drift assessment is performed\n  - _True_ means an assessment is performed for both the source column and derived column \n  stats\n  - _'efficient'_ means that a postmunge drift assessment is only performed on the source \n  columns (less information but much more energy efficient)\n  - _'report_effic'_ means that the efficient assessment is performed and returned with \n  no processing of data\n  - _'report_full'_ means that the full assessment is performed and returned with no \n  processing of data\n\n* LabelSmoothing: accepts float values in range 0.0-1.0 or the default value of _False_\nto turn off Label Smoothing. Note that a user can pass _True_ to LabelSmoothing which \nwill consistently encode to LabelSmoothing_train from the corresponding automunge(.) \ncall, including any application of LSfit based on parameters of transformations \nderived from the train set labels.\n\n* LSfit: a _True/False_ indication for basis of label smoothing parameter K. The default\nof False means the assumption will be for level distribution of labels, passing True\nmeans any label smoothing will evaluate distribution of label activations such as to fit\nthe smoothing factor to specific cells based on the activated column and target column.\nNote that if LabelSmoothing passed as True the LSfit will be based on the basis from\nthe corresponding automunge(.) call (will override the one passed to postmunge).\n\n* returnedsets: Can be passed as one of _{True, False, 'test_ID', _\n_'test_labels', 'test_ID_labels'}_. Designates the composition of the sets returned\nfrom a postmunge(.) call. Defaults to True for the full composition of five returned sets.\nWith other options postmunge(.) only returns a single set, where for False that set consists \nof the test set, or for the other options returns the test set concatenated with the ID, \nlabels, or both. For example:\n\n```\n#in default of returnedsets=True, postmunge(.) returns five sets, such as this call:\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_test = \\\nam.postmunge(postprocess_dict, df_test, returnedsets = True)\n\n#for other returnedset options, postmunge(.) returns just a single set, the test set:\ntest = \\\nam.postmunge(postprocess_dict, df_test, returnedsets = False)\n\n#Note that if you want to access the column labels for an appended ID or labels set,\n#They can be accessed in the postprocess_dict under entries for \npostprocess_dict['finalcolumns_labels']\npostprocess_dict['finalcolumns_trainID']\n```\n\n* shuffletrain: can be passed as one of _{True, False}_ which indicates if the rows in \nthe returned sets will be (consistently) shuffled. This value defaults to False. \n\n\n## Default Transformations\n\nWhen root categories of transformations are not assigned for a given column in\nassigncat, automunge performs an evaluation of data properties to infer \nappropriate means of feature engineering and numerical encoding. The default\ncategories of transformations are as follows:\n- nmbr: for numerical data, columns are treated with z-score normalization. If \nbinstransform parameter was activated this will be supplemented by a collection\nof bins indicating number of standard deviations from the mean.\n- 1010: for categorical data, columns are subject to binary encoding. If the \nnumber of unique entries in the column exceeds the parameter 'numbercategoryheuristic'\n(which defaults to 63), the encoding will instead be by 'ord3' which is an ordinal\n(integer) encoding sorted by most common value. Note that numerical sets with 3\nunique values in train set default to categorical encoding via 'text'.\n- ord3: for categorical data, if the number of unique entries in the column exceeds \nthe parameter 'numbercategoryheuristic' (which defaults to 63), the encoding will \ninstead be by 'ord3' which is an ordinal (integer) encoding sorted by most common value.\n- text: for categorical data of 3 unique values excluding infill (eg NaN), the \ncolumn is encoded via one-hot encoding.\n- bnry: for categorical data of <=2 unique values excluding infill (eg NaN), the \ncolumn is encoded to 0/1. Note that numerical sets with <= 2 unique values in train\nset default to bnry.\n- dat6: for time-series data, a set of derivations are performed returning\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy' (these are defined \nin next section)\n- null: for columns without any valid values (e.g. all NaN) column is deleted\n\nFor label sets, we use a distinct set of root categories under automation. These are in\nsome cases comparable to those listed above for training data, but differ in others and\na commonality is that the label sets will not include a returned 'NArw' (infill marker)\neven when parameter NArw_marker passed as True.\n- lbnm: for numerical data, columns are treated with an 'exc2' pass-through transform.\n- lb10: for categorical data, columns are subject to one-hot encoding via the 'text'\ntransform. (lb10 and lbte have comparable family trees)\n- lbor: for categorical data, if the number of unique entries in the column exceeds \nthe parameter 'numbercategoryheuristic' (which defaults to 63), the encoding will \ninstead be by 'ord3' which is an ordinal (integer) encoding sorted by most common value.\n- lbte: for categorical data of 3 unique values excluding infill (eg NaN), the \ncolumn is encoded via one-hot encoding.\n- lbbn: for categorical data of <=2 unique values excluding infill (eg NaN), the \ncolumn is encoded to 0/1. Note that numerical sets with <= 2 unique values default to bnry.\n- lbda: for time-series data, a set of derivations are performed returning\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy' (these are defined \nin next section)\n\nNote that if a user wishes to avoid the automated assignment of default transformations,\nsuch as to leave those columns not specifically assigned to transformation categories in \nassigncat as unchanged, the powertransform parameter may be passed as values 'excl' or \n'exc2', where for 'excl' columns not explicitly assigned to a root category in assigncat \nwill be left untouched, or for 'exc2' columns not explicitly assigned to a root category \nin assigncat will be forced to numeric and subject to default modeinfill. (These two excl\narguments may be useful if a user wants to experiment with specific transforms on a \nsubset of the columns without incurring processing time of an entire set.)\n\nNote that for columns designated for label sets as a special case categorical data will\ndefault to 'text' (one-hot encoding) instead of '1010'. Also, numerical data will default\nto 'excl2' (pass-through) instead of 'nmbr'. Also, if label smoothing is applied, label \ncolumns evaluated as 'bnry' (two unique values) will default to 'text' instead of 'bnry'\nas label smoothing requires one-hot encoding.\n\n- PCA: if the number of features exceeds 0.5 times the number of rows (an arbitrary heuristic)\na default PCA transform is applied defaulting to kernel PCA if all positive or otherwise \nsparse PCA (using scikit library). Note that this heuristic ratio can be changed or PCA \nturned off in the ML_cmnd, reference the ML_cmnd section under automunge(.) passed parameters.\n\n- powertransform: if the powertransform parameter is activated, a statistical evaluation\nwill be performed on numerical sets to distinguish between columns to be subject to\nbxcx, nmbr, or mnmx. Please note that we intend to further refine the specifics of this\nprocess in future implementations. Additionally, powertransform may be passed as values 'excl' \nor 'exc2', where for 'excl' columns not explicitly assigned to a root category in assigncat \nwill be left untouched, or for 'exc2' columns not explicitly assigned to a root category in \nassigncat will be forced to numeric and subject to default modeinfill. (These two excl \narguments may be useful if a user wants to experiment with specific transforms on a subset of \nthe columns without incurring processing time of an entire set for instance.)\n\n- floatprecision: parameter indicates the precision of floats in returned sets (16/32/64)\nsuch as for memory considerations.\n\nIn all cases, if the parameter NArw_marker is activated returned sets will be\nsupplemented with a NArw column indicating rows that were subject to infill. Each \ntransformation category has a default infill approach detailed below.\n\nNote that default transformations can be overwritten within an automunge(.) call by way\nof passing custom transformdict family tree definitions which overwrite the family tree \nof the default root categories listed above. For instance, if a user wishes to process \nnumerical columns with a default mean scaling ('mean') instead of z-score \nnormalization ('nmbr'), the user may copy the transform_dict entries from the code-base \nfor 'mean' root category and assign as a definition of the 'nmbr' root category, and then \npass that defined transformdict in the automunge call. (Note that we don't need to \noverwrite the processdict for nmbr if we don't intend to overwrite it's use as an entry \nin other root category family trees. Also it's good practice to retain any downstream \nentries such as in case the default for nmbr is used as an entry in some other root \ncategory's family tree.) Here's a demonstration.\n\n```\n#create a transformdict that overwrites the root category definition of nmbr with mean:\n#(assumes that we want to include NArw indicating presence of infill)\ntransformdict = {'nmbr' : {'parents' : [], \\\n                           'siblings': [], \\\n                           'auntsuncles' : ['mean'], \\\n                           'cousins' : ['NArw'], \\\n                           'children' : [], \\\n                           'niecesnephews' : [], \\\n                           'coworkers' : [], \\\n                           'friends' : []}}\n\n#And then we can simply pass this transformdict to an automunge(.) call.\n\n(returned sets) = \\\nam.automunge(df_train, \\\n             transformdict = transformdict)\n\n```\n\nNote if any of default transformation automation categories (nmbr/1010/ord3/text/bnry/dat6/null)\nare overwritten in this fashion, a user can still assign original default categories to distinct\ncolumns in assigncat by using corresponding alternates of (nmbd/101d/ordd/texd/bnrd/datd/nuld).\n\n...\n\n## Library of Transformations\n\n### Library of Transformations Subheadings:\n* [Intro](https://github.com/Automunge/AutoMunge/blob/master/README.md#intro)\n* [Numerical Set Normalizations](https://github.com/Automunge/AutoMunge/blob/master/README.md#numerical-set-normalizations)\n* [Numerical Set Transformations](https://github.com/Automunge/AutoMunge/blob/master/README.md#numerical-set-transformations)\n* [Numercial Set Bins and Grainings](https://github.com/Automunge/AutoMunge/blob/master/README.md#numercial-set-bins-and-grainings)\n* [Sequential Numerical Set Transformations](https://github.com/Automunge/AutoMunge/blob/master/README.md#sequential-numerical-set-transformations)\n* [Categorical Set Encodings](https://github.com/Automunge/AutoMunge/blob/master/README.md#categorical-set-encodings)\n* [Date-Time Data Normalizations](https://github.com/Automunge/AutoMunge/blob/master/README.md#date-time-data-normalizations)\n* [Date-Time Data Bins](https://github.com/Automunge/AutoMunge/blob/master/README.md#date-time-data-bins)\n* [Misc. Functions](https://github.com/Automunge/AutoMunge/blob/master/README.md#misc-functions)\n* [String Parsing](https://github.com/Automunge/AutoMunge/blob/master/README.md#string-parsing)\n* [More Efficient String Parsing](https://github.com/Automunge/AutoMunge/blob/master/README.md#more-efficient-string-parsing)\n* [Multi-tier String Parsing](https://github.com/Automunge/AutoMunge/blob/master/README.md#multi-tier-string-parsing)\n* [List of Root Categories](https://github.com/Automunge/AutoMunge/blob/master/README.md#list-of-root-categories)\n* [List of Suffix Appenders](https://github.com/Automunge/AutoMunge/blob/master/README.md#list-of-suffix-appenders)\n* [Root Category Family Tree Definitions](https://github.com/Automunge/AutoMunge/blob/master/README.md#root-category-family-tree-definitions)\n ___ \n### Intro\nAutomunge has a built in library of transformations that can be passed for\nspecific columns with assigncat. (A column if left unassigned will defer to\nthe automated default methods to evaluate properties of the data to infer \nappropriate methods of numerical encoding.)  For example, a user can pass a \nmin-max scaling method to a list of specific columns with headers 'column1',\n'column2' with: \n```\nassigncat = {'mnmx':['column1', 'column2']}\n```\nWhen a user assigns a column to a specific category, that category is treated\nas the root category for the tree of transformations. Each key has an \nassociated transformation function (where the root category transformation function \nis only applied if the root key is also found in the tree of family primitives). \nThe tree of family primitives, as introduced earlier, applies first the keys found \nin upstream primitives i.e. parents/siblings/auntsuncles/cousins. If a transform \nis applied for a primitive that includes downstream offspring, such as parents/\nsiblings, then the family tree for that key with offspring is inspected to determine\ndownstream offspring categories, for example if we have a parents key of 'mnmx',\nthen any children/niecesnephews/coworkers/friends in the 'mnmx' family tree will\nbe applied as parents/siblings/auntsuncles/cousins, respectively. Note that the\ndesignation for supplements/replaces refers purely to the question of whether the\ncolumn to which the transform is being applied is kept in place or removed.\n\nNow we'll start here by listing again the family tree primitives for those root \ncategories built into the automunge library. After that we'll give a quick \nnarrative for each of the associated transformation functions. First here again\nare the family tree primitives.\n\n```\n'parents' :           \nupstream / first generation / replaces column / with offspring\n\n'siblings':           \nupstream / first generation / supplements column / with offspring\n\n'auntsuncles' :       \nupstream / first generation / replaces column / no offspring\n\n'cousins' :           \nupstream / first generation / supplements column / no offspring\n\n'children' :          \ndownstream parents / offspring generations / replaces column / with offspring\n\n'niecesnephews' :     \ndownstream siblings / offspring generations / supplements column / with offspring\n\n'coworkers' :         \ndownstream auntsuncles / offspring generations / replaces column / no offspring\n\n'friends' :           \ndownstream cousins / offspring generations / supplements column / no offspring\n```\n\nHere is a quick description of the transformation functions associated \nwith each key which can either be assigned to a family tree primitive (or used \nas a root key). We're continuing to build out this library of transformations.\n\nNote the design philosophy is that any transform can be applied to any type \nof data and if the data is not suited (such as applying a numeric transform\nto a categorical set) the transform will just return all zeros. Note the \ndefault infill refers to the infill applied under 'standardinfill'. Note the\ndefault NArowtype refers to the categories of data that won't be subject to \ninfill.\n\n### Numerical Set Normalizations\n* nmbr/nbr2/nbr3/nmdx/nmd2/nmd3: z-score normalization<br/>\n(x - mean) / (standard deviation)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_nmbr'\n  - assignparam parameters accepted:  \n    - 'cap' and 'floor', default to False for no floor or cap, \n      True means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling, \n      noting that if cap<max then max reset to cap and if floor>min then min reset to floor\n      cap and floor based on pre-transform values\n    - 'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\n      note that multiplier is applied prior to offset\n  - driftreport postmunge metrics: mean / std / max / min\n* mean/mea2/mea3: mean normalization (like z-score in the numerator and min-max in the denominator)<br/>\n(x - mean) / (max - min)\nMy intuition says z-score has some benefits but really up to the user which they prefer.\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_mean'\n  - assignparam parameters accepted:\n    - 'cap' and 'floor', default to False for no floor or cap, \n      True means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling, \n      noting that if cap<max then max reset to cap and if floor>min then min reset to floor\n      cap and floor based on pre-transform values\n    - 'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\n      note that multiplier is applied prior to offset\n  - driftreport postmunge metrics: minimum / maximum / mean / std\n* mnmx/mnm2/mnm5/mmdx/mmd2/mmd3: vanilla min-max scaling<br/>\n(x - min) / (max - min)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_mnmx'\n  - assignparam parameters accepted: 'cap' and 'floor', default to False for no floor or cap, \n  True means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling, \n  noting that if cap<max then max reset to cap and if floor>min then min reset to floor\n  cap and floor based on pre-transform values\n  - driftreport postmunge metrics: minimum / maximum / mean / std / cap / floor\n* mnm3/mnm4: min-max scaling with outliers capped at 0.01 and 0.99 quantiles\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_mnm3'\n  - assignparam parameters accepted: qmax or qmin to change the quantiles from 0.99/0.01\n  - driftreport postmunge metrics: quantilemin / quantilemax / mean / std\n* mnm6: min-max scaling with test floor set capped at min of train set (ensures\ntest set returned values >= 0, such as might be useful for kernel PCA for instance)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_mnm6'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: minimum / maximum / mean / std\n* retn: related to min/max scaling but retains +/- of values, based on conditions\nif max>=0 and min<=0, x=x/(max-min), elif max>=0 and min>=0 x=(x-min)/(max-min),\nelif max<=0 and min<=0 x=(x-max)/(max-min)\n![image](https://user-images.githubusercontent.com/44011748/80632143-cbbf7780-8a24-11ea-9bdb-2f7230328247.png)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_retn'\n  - assignparam parameters accepted:  \n    - 'cap' and 'floor', default to False for no floor or cap, \n      True means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling, \n      noting that if cap<max then max reset to cap and if floor>min then min reset to floor\n      cap and floor based on pre-transform values\n    - 'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\n      note that multiplier is applied prior to offset\n    - 'divisor' to select between default of 'minmax' or 'std', where minmax means scaling by divisor of max-min\n\tstd based on scaling by divisor of standard deviation\n  - driftreport postmunge metrics: minimum / maximum / mean / std\n* MADn/MAD2: mean absolute deviation normalization, subtract set mean <br/>\n(x - mean) / (mean absolute deviation)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_MADn'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mean / MAD / maximum / minimum\n* MAD3: mean absolute deviation normalization, subtract set maximum<br/>\n(x - maximum) / (mean absolute deviation)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_MAD3'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mean / MAD / datamax / maximum / minimum\n* lgnm: normalization intended for lognormal distributed numerical sets\nAchieved by performing a logn transform upstream of a nmbr normalization.\n  - suffix appender: '_logn_nmbr'\n### Numerical Set Transformations\n* bxcx/bxc2/bxc3/bxc4/bxc5: performs Box-Cox power law transformation. Applies infill to \nvalues <= 0. Note we currently have a test for overflow in returned results and if found \nset to 0. Please note that this method makes use of scipy.stats.boxcox.\n  - default infill: mean\n  - default NArowtype: positivenumeric\n  - suffix appender: '_bxcx'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: trnsfrm_mean / bxcx_lmbda / bxcxerrorcorrect / mean\n* log0/log1: performs logarithmic transform (base 10). Applies infill to values <= 0.\n  - default infill: meanlog\n  - default NArowtype: positivenumeric\n  - suffix appender: '_log0'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: meanlog\n* logn: performs natural logarithmic transform (base e). Applies infill to values <= 0.\n  - default infill: meanlog\n  - default NArowtype: positivenumeric\n  - suffix appender: '_logn'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: meanlog\n* sqrt: performs square root transform. Applies infill to values < 0.\n  - default infill: mean\n  - default NArowtype: nonnegativenumeric\n  - suffix appender: '_sqrt'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: meansqrt\n* addd: performs addition of an integer or float to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_addd'\n  - assignparam parameters accepted: 'add' for value added (default to 1)\n  - driftreport postmunge metrics: mean, add\n* sbtr: performs subtraction of an integer or float to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_sbtr'\n  - assignparam parameters accepted: 'subtract' for value subtracted (default to 1)\n  - driftreport postmunge metrics: mean, subtract\n* mltp: performs multiplication of an integer or float to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_mltp'\n  - assignparam parameters accepted: 'multiply' for value multiplied (default to 2)\n  - driftreport postmunge metrics: mean, multiply\n* divd: performs division of an integer or float to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_divd'\n  - assignparam parameters accepted: 'divide' for value subtracted (default to 2)\n  - driftreport postmunge metrics: mean, divide\n* rais: performs raising to a power of an integer or float to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_rais'\n  - assignparam parameters accepted: 'raiser' for value raised (default to 2)\n  - driftreport postmunge metrics: mean, raiser\n* absl: performs absolute value transform to a set\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_absl'\n  - assignparam parameters accepted: (none)\n  - driftreport postmunge metrics: mean\n### Numercial Set Bins and Grainings\n* pwrs: bins groupings by powers of 10\n  - default infill: mean (ie log(mean))\n  - default NArowtype: positivenumeric\n  - suffix appender: '_10^#' where # is integer indicating target powers of 10 for column\n  - driftreport postmunge metrics: powerlabelsdict / meanlog / maxlog / \n\t                           <column> + '_ratio' (column specific)\n* pwr2: bins groupings by powers of 10\n  - default infill: no activation\n  - default NArowtype: nonzeronumeric\n  - suffix appender: '_10^#' or '_-10^#' where # is integer indicating target powers of 10 for column\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: powerlabelsdict / labels_train / missing_cols / \n\t\t\t           <column> + '_ratio' (column specific)\n* pwor: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to powers of 10\n  - default infill: zero\n  - default NArowtype: positivenumeric\n  - suffix appender: '_pwor'\n  - driftreport postmunge metrics: meanlog / maxlog / ordl_activations_dict\n* por2: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to powers of 10\n  - default infill: zero (a distinct encoding)\n  - default NArowtype: nonzeronumeric\n  - suffix appender: '_por2'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: train_replace_dict / test_replace_dict / ordl_activations_dict\n* bins: for numerical sets, outputs a set of 6 columns indicating where a\nvalue fell with respect to number of standard deviations from the mean of the\nset (i.e. <-2, -2-1, -10, 01, 12, >2)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bins_####' where #### is one of set (s<-2, s-21, s-10, s+01, s+12, s>+2)\n  which indicate column target for number of standard deviations from the mean\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: binsmean / binsstd / <column> + '_ratio' (column specific)\n* bint: comparable to bins but assumes data has already been z-score normalized\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bint_####' where #### is one of set (t<-2, t-21, t-10, t+01, t+12, t>+2)\n  which indicate column target for number of standard deviations from the mean\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: binsmean / binsstd / <column> + '_ratio' (column specific)\n* bsor: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to number of standard deviations from the mean of the\nset (i.e. <-2:0, -2-1:1, -10:2, 01:3, 12:4, >2:5)\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bsor'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: ordinal_dict / ordl_activations_dict / binsmean / binsstd\n* bnwd/bnwK/bnwM: for numerical set graining to fixed width bins for one-hot encoded bins \n(columns without activations in train set excluded in train and test data). \nbins default to width of 1/1000/1000000 eg for bnwd/bnwK/bnwM\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bswd_#1_#2' where #1 is the width and #2 is the bin identifier (# from min)\n  - assignparam parameters accepted: 'width' to set bin width\n  - driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id / \n\t\t\t           bins_cuts / bn_width_bnwd (or bnwK/bnwM) / textcolumns / \n                                   <column> + '_ratio' (column specific)\n* bnwo/bnKo/bnMo: for numerical set graining to fixed width bins for ordinal encoded bins \n(integers without train set activations still included in test set). \nbins default to width of 1/1000/1000000 eg for bnwd/bnwK/bnwM\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bnwo' (or '_bnKo', '_bnMo')\n  - assignparam parameters accepted: 'width' to set bin width\n  - driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id / \n\t\t\t           bins_cuts / bn_width / ordl_activations_dict\n* bnep/bne7/bne9: for numerical set graining to equal population bins for one-hot encoded bins. \nbin count defaults to 5/7/9 eg for bnep/bne7/bne9\n  - default infill: no activation\n  - default NArowtype: numeric\n  - suffix appender: '_bnep_#1' where #1 is the bin identifier (# from min) (or bne7/bne9 instead of bnep)\n  - assignparam parameters accepted: 'bincount' to set number of bins\n  - driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id / \n                                   bins_cuts / bincount_bnep (or bne7/bne9) / textcolumns / \n                                   <column> + '_ratio' (column specific)\n* bneo/bn7o/bn9o: for numerical set graining to equal population bins for ordinal encoded bins. \nbin count defaults to 5/7/9 eg for bne0/bn7o/bn9o\n  - default infill: adjacent cell\n  - default NArowtype: numeric\n  - suffix appender: '_bnep_#1' where #1 is the bin identifier (# from min) (or bn7o/bn9o)\n  - assignparam parameters accepted: 'bincount' to set number of bins\n  - driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id / \n\t\t\t           bins_cuts / bincount / ordl_activations_dict\n* bkt1: for numerical set graining to user specified encoded bins. First and last bins unconstrained.\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bkt1_#1' where #1 is the bin identifier (# from min)\n  - assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries (leave out +/-'inf')\n\t\t\t\t\t   defaults to [0,1,2] (arbitrary plug values)\n  - driftreport postmunge metrics: binsmean / buckets_bkt1 / bins_cuts / bins_id / textcolumns / \n\t\t\t\t\t   <column> + '_ratio' (column specific)\n* bkt2: for numerical set graining to user specified encoded bins. First and last bins bounded.\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bkt2_#1' where #1 is the bin identifier (# from min)\n  - assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries\n\t\t\t\t\t   defaults to [0,1,2] (arbitrary plug values)\n  - driftreport postmunge metrics: binsmean / buckets_bkt2 / bins_cuts / bins_id / textcolumns / \n\t\t\t\t\t   <column> + '_ratio' (column specific)\n* bkt3: for numerical set graining to user specified ordinal encoded bins. First and last bins unconstrained.\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bkt3'\n  - assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries (leave out +/-'inf')\n\t\t\t\t\t   defaults to [0,1,2] (arbitrary plug values)\n  - driftreport postmunge metrics: binsmean / buckets / bins_cuts / bins_id / ordl_activations_dict\n* bkt4: for numerical set graining to user specified ordinal encoded bins. First and last bins bounded.\n  - default infill: mean\n  - default NArowtype: numeric\n  - suffix appender: '_bkt4'\n  - assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries\n\t\t\t\t\t   defaults to [0,1,2] (arbitrary plug values)\n  - driftreport postmunge metrics: binsmean / buckets / bins_cuts / bins_id / ordl_activations_dict\n* tlbn: returns equal population bins in separate columns with activations replaced by min-max scaled \nvalues within that segment's range (between 0-1) and other values subject to an infill of -1 \n(intended for use to evaluate feature importance of different segments of a numerical set's distribution\nwith metric2 results from a feature importance evaluation)\n  - default infill: no activation (this is the recommended infill for this transform)\n  - default NArowtype: numeric\n  - suffix appender: '_tlbn_#' where # is the bin identifier\n  - assignparam parameters accepted: 'bincount' to set number of bins\n  - driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id / \n\t\t\t           bins_cuts / bincount_tlbn / textcolumns / <column> + '_ratio' (column specific)\n### Sequential Numerical Set Transformations\n* dxdt/d2dt/d3dt/d4dt/d5dt/d6dt: rate of change (row value minus value in preceding row), high orders \nreturn lower orders (eg d2dt returns original set, dxdt, and d2dt), all returned sets include 'retn' \nnormalization which scales data with min/max while retaining +/- sign\n  - default infill: adjacent cells\n  - default NArowtype: numeric\n  - suffix appender: '_dxdt'\n  - assignparam parameters accepted: 'periods' sets number of time steps offset to evaluate\n  defaults to 1\n  - driftreport postmunge metrics: positiveratio / negativeratio / zeroratio / minimum / maximum / mean / std\n* dxd2/d2d2/d3d2/d4d2/d5d2/d6d2: denoised rate of change (average of last two rows minus average\nof preceding two rows), high orders return lower orders (eg d2d2 returns original set, dxd2, \nand d2d2), all returned sets include 'retn' normalization\n  - default infill: adjacent cells\n  - default NArowtype: numeric\n  - suffix appender: '_dxd2'\n  - assignparam parameters accepted: 'periods' sets number of time steps offset to evaluate\n  defaults to 2\n  - driftreport postmunge metrics: positiveratio / negativeratio / zeroratio / minimum / maximum / mean / std\n* nmdx/nmd2/nmd3/nmd4/nmd5/nmd6: comparable to dxdt but includes upstream of sequential transforms a \nnmrc numeric string parsing top extract numbers from string sets\n* mmdx/mmd2/mmd3/mmd4/mmd5/mmd6: comparable to dxdt but uses z-score normalizaitons via 'nbr2' instead of 'retn'\n* dddt/ddd2/ddd3/ddd4/ddd5/ddd6: comparable to dxdt but no normalizations applied\n* dedt/ded2/ded3/ded4/ded5/ded6: comparable to dxd2 but no normalizations applied\n### Categorical Set Encodings\n* bnry: converts sets with two values to boolean identifiers. Defaults to assigning\n1 to most common value and 0 to second most common, unless 1 or 0 is already included\nin most common of the set then defaults to maintaining those designations. If applied \nto set with >2 entries applies infill to those entries beyond two most common. \n  - default infill: most common value\n  - default NArowtype: justNaN\n  - suffix appender: '_bnry'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: missing / 1 / 0 / extravalues / oneratio / zeroratio\n* bnr2: converts sets with two values to boolean identifiers. Defaults to assigning\n1 to most common value and 0 to second most common, unless 1 or 0 is already included\nin most common of the set then defaults to maintaining those designations. If applied \nto set with >2 entries applies infill to those entries beyond two most common. (Same\nas bnry except for default infill.)\n  - default infill: least common value\n  - default NArowtype: justNaN\n  - suffix appender: '_bnry'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: missing / 1 / 0 / extravalues / oneratio / zeroratio\n* text/txt2: converts categorical sets to one-hot encoded set of boolean identifiers\n  - default infill: all entries zero\n  - default NArowtype: justNaN\n  - suffix appender: '_(category)' where category is the target of the column\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: textlabelsdict_text / <column> + '_ratio' (column specific)\n* ordl/ord2: converts categorical sets to ordinally encoded set of integer identifiers\n  - default infill: plug value 'zzzinfill'\n  - default NArowtype: justNaN\n  - suffix appender: '_ordl'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict\n* ord3/ord4: converts categorical sets to ordinally encoded set of integer identifiers\nsorted by frequency of category occurrence\n  - default infill: plug value 'zzzinfill'\n  - default NArowtype: justNaN\n  - suffix appender: '_ord3'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict\n* 1010: converts categorical sets of >2 unique values to binary encoding (more memory \nefficient than one-hot encoding)\n  - default infill: plug value 'zzzinfill'\n  - default NArowtype: justNaN\n  - suffix appender: '_1010_#' where # is integer indicating order of 1010 columns\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: _1010_binary_encoding_dict / _1010_overlap_replace / \n\t                           _1010_binary_column_count / _1010_activations_dict\n  (for example if 1010 encoded to three columns based on number of categories <8,\n  it would return three columns with suffix appenders 1010_1, 1010_2, 1010_3)\n* ucct: converts categorical sets to a normalized float of unique class count,\nfor example, a 10 row train set with two instances of 'circle' would replace 'circle' with 0.2\nand comparable to test set independent of test set row count\n  - default infill: ratio of infill in train set\n  - default NArowtype: justNaN\n  - suffix appender: '_ucct'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict\n* lngt, lnlg: returns string length of categoric entries (lngt followed by min/max, lnlg by log)\n  - default infill: plug value of 3 (based on len(str(np.nan)) )\n  - default NArowtype: justNaN\n  - suffix appender: '_lngt'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: maximum, minimum, mean, std\n* new processing functions Utxt / Utx2 / Utx3 / Uord / Uor2 / Uor3 / Uor6 / U101 / Ucct\n  - comparable to functions text / txt2 / txt3 / ordl / ord2 / ord3 / ors6 / 1010 / Ucct\n  - but upstream conversion of all strings to uppercase characters prior to encoding\n  - (e.g. 'USA' and 'usa' would be consistently encoded)\n  - default infill: in uppercase conversion NaN's are assigned distinct encoding 'NAN'\n  - and may be assigned other 9infill methods in assigninfill\n  - default NArowtype: 'justNaN'\n  - suffix appender: '_UPCS'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: comparable to functions text / txt2 / txt3 / ordl / ord2 / ord3 / ors6 / 1010\n### Date-Time Data Normalizations\n* date/dat2: for datetime formatted data, segregates data by time scale to multiple\ncolumns (year/month/day/hour/minute/second) and then performs z-score normalization\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for (_year, _mnth, _days, _hour, _mint, _scnd)\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: meanyear / stdyear / meanmonth / stdmonth / meanday / stdday / \n\t\t\t           meanhour / stdhour / meanmint / stdmint / meanscnd / stdscnd\n* year/mnth/days/hour/mint/scnd: segregated by time scale and z-score normalization\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for (_year, _mnth, _days, _hour, _mint, _scnd)\n  - driftreport postmunge metrics: meanyear / stdyear / meanmonth / stdmonth / meanday / stdday / \n\t\t\t           meanhour / stdhour / meanmint / stdmint / meanscnd / stdscnd\n* mnsn/mncs/dysn/dycs/hrsn/hrcs/misn/mics/scsn/sccs: segregated by time scale and \ndual columns with sin and cos transformations for time scale period (eg 12 months, 24 hrs, 7 days, etc)\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for (mnsn/mncs/dysn/dycs/hrsn/hrcs/misn/mics/scsn/sccs)\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mean_mnsn / mean_mncs / mean_dysn / mean_dycs / mean_hrsn / mean_hrcs\n\t\t\t           mean_misn / mean_mscs / mean_scsn / mean_sccs\n* mdsn/mdcs: similar sin/cos treatment, but for combined month/day, note that periodicity is based on \nnumber of days in specific months, including account for leap year, or if month not specified defaults to \naverage days in a month (30.42) periodicity\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for (mdsn/mdcs)\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mean_mdsn / mean_mdcs \n* hmss/hmsc: similar sin/cos treatment, but for combined hour/minute/second\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for (hmss/hmsc)\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mean_hmss / mean_hmsc\n* dat6: default transformation set for time series data, returns:\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'\n  - default infill: mean\n  - default NArowtype: datetime\n  - suffix appender: includes appenders for ('year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy')\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: meanyear / stdyear / mean_mdsn / mean_mdcs / mean_hmss / mean_hmsc\n### Date-Time Data Bins\n* wkdy: boolean identifier indicating whether a datetime object is a weekday\n  - default infill: none\n  - default NArowtype: datetime\n  - suffix appender: '_wkdy'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: activationratio\n* wkds/wkdo: encoded weekdays 0-6, 'wkds' for one-hot via 'text', 'wkdo' for ordinal via 'ord3'\n  - default infill: 7 (eg eight days a week)\n  - default NArowtype: datetime\n  - suffix appender: '_wkds'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: mon_ratio / tue_ratio / wed_ratio / thr_ratio / fri_ratio / sat_ratio / \n\t  sun_ratio / infill_ratio\n* mnts/mnto: encoded months 1-12, 'mnts' for one-hot via 'text', 'mnto' for ordinal via 'ord3'\n  - default infill: 0\n  - default NArowtype: datetime\n  - suffix appender: '_mnts'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: infill_ratio / jan_ratio / feb_ratio / mar_ratio / apr_ratio / may_ratio / \n\t  jun_ratio / jul_ratio / aug_ratio / sep_ratio / oct_ratio / nov_ratio / dec_ratio\n* bshr: boolean identifier indicating whether a datetime object falls within business\nhours (9-5, time zone unaware)\n  - default infill: datetime\n  - default NArowtype: justNaN\n  - assignparam parameters accepted: 'start' and 'end', which default to 9 and 17\n  - driftreport postmunge metrics: activationratio\n* hldy: boolean identifier indicating whether a datetime object is a US Federal\nholiday\n  - default infill: none\n  - default NArowtype: datetime\n  - suffix appender: '_hldy'\n  - assignparam parameters accepted: 'holiday_list', should be passed as a list of strings\n    of dates of additional holidays to be recognized e.g. ['2020/03/30']\n  - driftreport postmunge metrics: activationratio\n### Misc. Functions\n* null: deletes source column\n  - default infill: none\n  - default NArowtype: exclude\n  - no suffix appender, column deleted\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* excl: passes source column un-altered. (Note that returned data may not be numeric and predictive \nmethods like ML infill and feature selection may not work for that scenario.)\nNote that the excl transform is unique in that it is an in-place operation for efficiency purposes, and\nso may only be passed in a user defined transformdict as an entry to cousins primitive, although it's \napplication \"replaces\" the source column. (Note that for any other transform a cousins primitive entry \nonly supplements the source column, 'excl' is the exception to the rule). For comparable functionality \neligible for other primitive entries in a passed transformdict please use 'exc6' transform instead. \n  - default infill: none\n  - default NArowtype: exclude\n  - suffix appender: None or '_excl' (dependant on automunge(.) excl_suffix parameter)\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* exc2/exc3/exc4: passes source column unaltered other than force to numeric, mode infill applied\n  - default infill: mode\n  - default NArowtype: numeric\n  - suffix appender: '_exc2'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* exc5: passes source column unaltered other than force to numeric, mode infill applied for non-integers\n  - default infill: mode\n  - default NArowtype: integer\n  - suffix appender: '_exc5'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* exc6: passes source column un-altered. (Comparable to 'excl' but eligible for entry to full set of \nfamily tree primitives in a user-defined transformdict.)\n  - default infill: none\n  - default NArowtype: exclude\n  - suffix appender: '_exc6'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* eval: performs data property evaluation consistent with default automation to designated column\n  - default infill: based on evaluation\n  - default NArowtype: based on evaluation\n  - suffix appender: based on evaluation\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* ptfm: performs distribution property evaluation consistent with the automunge powertransform \nparameter activated to designated column\n  - default infill: based on evaluation\n  - default NArowtype: based on evaluation\n  - suffix appender: based on evlauation\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* copy: create new copy of column, useful when applying the same transform to same column more\nthan once with different parameters. Does not prepare column for ML on it's own.\n  - default infill: exclude\n  - default NArowtype: exclude\n  - suffix appender: '_copy'\n  - assignparam parameters accepted: 'suffix' for custom suffix appender\n  - driftreport postmunge metrics: none\n* shfl: shuffles the values of a column based on passed randomseed (Note that returned data may not \nbe numeric and predictive methods like ML infill and feature selection may not work for that scenario\nunless an additional transform is applied downstream.)\n  - default infill: exclude\n  - default NArowtype: justNAN\n  - suffix appender: '_shfl'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: none\n* NArw: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values. Note that when NArw\nis assigned in a family tree it bases NArowtype on the root category, \nwhen NArw is passed as the root category it bases NArowtype on default.\n  - default infill: not applicable\n  - default NArowtype: justNaN\n  - suffix appender: '_NArw'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: pct_NArw\n* NAr2: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n  - default infill: not applicable\n  - default NArowtype: numeric\n  - suffix appender: '_NArw'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: pct_NArw\n* NAr3: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n  - default infill: not applicable\n  - default NArowtype: positivenumeric\n  - suffix appender: '_NArw'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: pct_NArw\n* NAr4: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n  - default infill: not applicable\n  - default NArowtype: nonnegativenumeric\n  - suffix appender: '_NArw'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: pct_NArw\n* NAr5: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n  - default infill: not applicable\n  - default NArowtype: integer\n  - suffix appender: '_NArw'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: pct_NArw\n### String Parsing\nPlease note I recommend caution on using splt/spl2/spl5/spl6 transforms on categorical\nsets that may include scientific units for instance, as prefixes will not be noted\nfor overlaps, e.g. this wouldn't distinguish between kilometer and meter for instance.\nNote that overlap lengths below 5 characters are ignored unless that value is overridden\nby passing a parameter through assignparam.\n* splt: searches categorical sets for overlaps between strings and returns new boolean column\nfor identified overlap categories. Note this treats numeric values as strings eg 1.3 = '1.3'.\nNote that priority is given to overlaps of higher length, and by default overlap searches\nstart at 20 character length and go down to 5 character length.\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '_splt_##*##' where ##*## is target identified string overlap \n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n                                     'space_and_punctuation': True/False, defaults to True, when passed as\n                                     False character overlaps are not recorded which include space or punctuation\n                                     based on characters in excluded_characters parameter\n                                     'excluded_characters': a list of strings which are excluded from overlap \n                                     identification when space_and_punctuation set as False, defaults to\n                                     `[' ', ',', '.', '?', '!', '(', ')']`\n  - driftreport postmunge metrics: overlap_dict / splt_newcolumns_splt / minsplit\n* spl2/spl3/spl4/ors2/txt3: similar to splt, but instead of creating new column identifier it replaces categorical \nentries with the abbreviated string overlap\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '_spl2'\n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n                                     'space_and_punctuation': True/False, defaults to True, when passed as\n                                     False character overlaps are not recorded which include space or punctuation\n                                     based on characters in excluded_characters parameter\n                                     'excluded_characters': a list of strings which are excluded from overlap \n                                     identification when space_and_punctuation set as False, defaults to\n                                     `[' ', ',', '.', '?', '!', '(', ')']`\n  - driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict / \n                                   minsplit\n* spl5/spl6/ors5/ors6: similar to spl2, but those entries without identified string overlap are set to 0,\n(used in ors5 in conjunction with ord3)\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '_spl5'\n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n                                     'space_and_punctuation': True/False, defaults to True, when passed as\n                                     False character overlaps are not recorded which include space or punctuation\n                                     based on characters in excluded_characters parameter\n                                     'excluded_characters': a list of strings which are excluded from overlap \n                                     identification when space_and_punctuation set as False, defaults to\n                                     `[' ', ',', '.', '?', '!', '(', ')']`\n  - driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict / \n                                   spl5_zero_dict / minsplit\n* spl6: similar to spl5, but with a splt performed downstream for identification of overlaps\nwithin the overlaps\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '_spl5'\n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n                                     'space_and_punctuation': True/False, defaults to True, when passed as\n                                     False character overlaps are not recorded which include space or punctuation\n                                     based on characters in excluded_characters parameter\n                                     'excluded_characters': a list of strings which are excluded from overlap \n                                     identification when space_and_punctuation set as False, defaults to\n                                     `[' ', ',', '.', '?', '!', '(', ')']`\n  - driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict / \n                                   spl5_zero_dict / minsplit\n* spl7: similar to spl5, but recognizes string character overlaps down to minimum 2 instead of 5\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '_spl5'\n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n                                     'space_and_punctuation': True/False, defaults to True, when passed as\n                                     False character overlaps are not recorded which include space or punctuation\n                                     based on characters in excluded_characters parameter\n                                     'excluded_characters': a list of strings which are excluded from overlap \n                                     identification when space_and_punctuation set as False, defaults to\n                                     `[' ', ',', '.', '?', '!', '(', ')']`\n  - driftreport postmunge metrics: overlap_dict / srch_newcolumns_srch / search\n* srch: searches categorical sets for overlaps with user passed search string and returns new boolean column\nfor identified overlap entries. (There is also src3 variant which I suspect may be more efficient in esoteric scenarios).\n  - default infill: none\n  - default NArowtype: justNaN\n  - suffix appender: '\\_srch_##*##' where ##*## is target identified search string\n  - assignparam parameters accepted: 'search': a list of strings, defaults as empty set\n\t\t\t\t     'case': bool to indicate case sensitivity of search, defaults True\n\t\t\t\t     (note that 'case' not yet built into src2 variant)\n  - driftreport postmunge metrics: overlap_dict / splt_newcolumns_splt / minsplit\n* nmrc/nmr2/nmr3: parses strings and returns any number groupings, prioritized by longest length\n  - default infill: mean\n  - default NArowtype: parsenumeric\n  - suffix appender: '_nmrc'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: overlap_dict / mean / maximum / minimum\n* nmcm/nmc2/nmc3: similar to nmrc, but recognizes numbers with commas, returns numbers stripped of commas\n  - default infill: mean\n  - default NArowtype: parsenumeric_commas\n  - suffix appender: '_nmcm'\n  - assignparam parameters accepted: none\n  - driftreport postmunge metrics: overlap_dict / mean / maximum / minimum\n### More Efficient String Parsing\n* new processing functions nmr4/nmr5/nmr6/nmc4/nmc5/nmc6/spl8/spl9/sp10 (spelled sp\"ten\")/src2:\n  - comparable to functions nmrc/nmr2/nmr3/nmcm/nmc2/nmc3/splt/spl2/spl5/srch\n  - but make use of new assumption that set of unique values in test set is same or a subset of those values \n    from the train set, which allows for a more efficient application (no more string parsing of test sets)\n  - default infill: comparable\n  - default NArowtype: comparable\n  - suffix appender: same format, updated per the new category\n  - assignparam parameters accepted: comparable\n  - driftreport postmunge metrics: comparable\n* new processing functions nmr7/nmr8/nmr9/nmc7/nmc8/nmc9:\n  - comparable to functions nmrc/nmr2/nmr3/nmcm/nmc2/nmc3\n  - but implements string parsing only for unique test set entries not found in train set\n  - for more efficient test set processing in automunge and postmunge\n  - (less efficient than nmr4/nmc4 etc but captures outlier points as may not be unusual in continuous distributions)\n  - default infill: comparable\n  - default NArowtype: comparable\n  - suffix appender: same format, updated per the new category\n  - assignparam parameters accepted: comparable\n  - driftreport postmunge metrics: overlap_dict / mean / maximum / minimum / unique_list / maxlength\n### Multi-tier String Parsing\n* new processing root categories or11 / or12 / or13 / or14 / or15 / or16 / or17 / or18 / or19 / or20\n  - or11 / or13 intended for categorical sets that may include multiple tiers of overlaps \n  and include base binary encoding via 1010 supplemented by tiers of string parsing for \n  overlaps using spl2 and spl5, or11 has two tiers of overlap string parsing, or13 has three, \n  each parsing returned with an ordinal encoding sorted by frequency (ord3)\n  - or12 / or14 are comparable to or11 / or13 but include an additional supplemental \n  transform of string parsing for numerical entries with nmrc followed by a z-score normalization \n  of returned numbers via nmbr\n  - or15 / or16 / or17 / or18 comparable to or11 / or12 / or13 / or14 but incorporate an\n  UPCS transform upstream and make use of spl9/sp10 instead of spl2/spl5 for assumption that\n  set of unique values in test set is same or subset of train set for more efficient postmunge\n  - or19 / or20 comparable to or16 / or18 but replace the 'nmrc' string parsing for numeric entries\n  with nmc8 which allows comma characters in numbers and makes use of consistent assumption to\n  spl9/sp10 that set of unique values in test set is same or subset of train for efficient psotmunge\n  - assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps \n  (note that parameter has to be assigned to specific categories such as spl2/spl5 etc)\n  - driftreport postmunge metrics: comparable to constituent functions\n\n\n ___ \n### List of Root Categories\nHere are those root categories presented again in a concise sorted list, intended as reference so user can\navoid unintentional duplication.\n- '1010',\n- '101d',\n- 'MAD2',\n- 'MAD3',\n- 'MADn',\n- 'NAr2',\n- 'NAr3',\n- 'NAr4',\n- 'NAr5',\n- 'NArw',\n- 'U101',\n- 'Ucct',\n- 'UPCS',\n- 'Uor2',\n- 'Uor3',\n- 'Uor6',\n- 'Uord',\n- 'Utx2',\n- 'Utx3',\n- 'Utxt',\n- 'absl',\n- 'addd',\n- 'bins',\n- 'bint',\n- 'bkt1',\n- 'bkt2',\n- 'bkt3',\n- 'bkt4',\n- 'bn7o',\n- 'bn9o',\n- 'bnKo',\n- 'bnMo',\n- 'bne7',\n- 'bne9',\n- 'bneo',\n- 'bnep',\n- 'bnr2',\n- 'bnrd',\n- 'bnry',\n- 'bnwK',\n- 'bnwM',\n- 'bnwd',\n- 'bnwo',\n- 'bshr',\n- 'bsor',\n- 'bxc2',\n- 'bxc3',\n- 'bxc4',\n- 'bxc5',\n- 'bxcx',\n- 'copy',\n- 'd2d2',\n- 'd2dt',\n- 'd3d2',\n- 'd3dt',\n- 'd4d2',\n- 'd4dt',\n- 'd5d2',\n- 'd5dt',\n- 'd6d2',\n- 'd6dt',\n- 'dat2',\n- 'dat3',\n- 'dat4',\n- 'dat5',\n- 'dat6',\n- 'datd',\n- 'date',\n- 'day2',\n- 'day3',\n- 'day4',\n- 'day5',\n- 'days',\n- 'ddd2',\n- 'ddd3',\n- 'ddd4',\n- 'ddd5',\n- 'ddd6',\n- 'dddt',\n- 'ded2',\n- 'ded3',\n- 'ded4',\n- 'ded5',\n- 'ded6',\n- 'dedt',\n- 'dhmc',\n- 'dhms',\n- 'divd',\n- 'dxd2',\n- 'dxdt',\n- 'dycs',\n- 'dysn',\n- 'exc2',\n- 'exc3',\n- 'exc4',\n- 'exc5',\n- 'exc6',\n- 'excl',\n- 'hldy',\n- 'hmsc',\n- 'hmss',\n- 'hour',\n- 'hrcs',\n- 'hrs2',\n- 'hrs3',\n- 'hrs4',\n- 'hrsn',\n- 'lb10',\n- 'lbbn',\n- 'lbda',\n- 'lbnm',\n- 'lbor',\n- 'lbte',\n- 'lgnm',\n- 'lngt',\n- 'lnlg',\n- 'log0',\n- 'log1',\n- 'logn',\n- 'mdcs',\n- 'mdsn',\n- 'mea2',\n- 'mea3',\n- 'mean',\n- 'mics',\n- 'min2',\n- 'min3',\n- 'min4',\n- 'mint',\n- 'misn',\n- 'mltp',\n- 'mmd2',\n- 'mmd3',\n- 'mmd4',\n- 'mmd5',\n- 'mmd6',\n- 'mmdx',\n- 'mmor',\n- 'mncs',\n- 'mnm2',\n- 'mnm3',\n- 'mnm4',\n- 'mnm5',\n- 'mnm6',\n- 'mnm7',\n- 'mnmx',\n- 'mnsn',\n- 'mnt2',\n- 'mnt3',\n- 'mnt4',\n- 'mnt5',\n- 'mnt6',\n- 'mnth',\n- 'mnto',\n- 'mnts',\n- 'mscs',\n- 'mssn',\n- 'nbr2',\n- 'nbr3',\n- 'nmbd',\n- 'nmbr',\n- 'nmc2',\n- 'nmc3',\n- 'nmc4',\n- 'nmc5',\n- 'nmc6',\n- 'nmc7',\n- 'nmc8',\n- 'nmc9',\n- 'nmcm',\n- 'nmd2',\n- 'nmd3',\n- 'nmd4',\n- 'nmd5',\n- 'nmd6',\n- 'nmdx',\n- 'nmr2',\n- 'nmr3',\n- 'nmr4',\n- 'nmr5',\n- 'nmr6',\n- 'nmr7',\n- 'nmr8',\n- 'nmr9',\n- 'nmrc',\n- 'nuld',\n- 'null',\n- 'om10',\n- 'or10',\n- 'or11',\n- 'or12',\n- 'or13',\n- 'or14',\n- 'or15',\n- 'or16',\n- 'or17',\n- 'or18',\n- 'or19',\n- 'or20',\n- 'ord2',\n- 'ord3',\n- 'ord4',\n- 'ordd',\n- 'ordl',\n- 'ors2',\n- 'ors5',\n- 'ors6',\n- 'ors7',\n- 'por2',\n- 'pwor',\n- 'pwr2',\n- 'pwrs',\n- 'rais',\n- 'retn',\n- 'sbtr',\n- 'sccs',\n- 'scn2',\n- 'scnd',\n- 'scsn',\n- 'shfl',\n- 'sp10',\n- 'sp11',\n- 'sp12',\n- 'sp13',\n- 'sp14',\n- 'spl2',\n- 'spl3',\n- 'spl4',\n- 'spl5',\n- 'spl6',\n- 'spl7',\n- 'spl8',\n- 'spl9',\n- 'splt',\n- 'sqrt',\n- 'src2',\n- 'src3',\n- 'srch',\n- 'texd',\n- 'text',\n- 'tlbn',\n- 'txt2',\n- 'txt3',\n- 'ucct', \n- 'wkdo',\n- 'wkds',\n- 'wkdy',\n- 'yea2',\n- 'year'\n ___ \n### List of Suffix Appenders\nThe convention is that each transform returns a derived column or set of columns which are distinguished \nfrom the source column by suffix appenders to the header strings. Note that in cases of root categories \nwhose family trees include multiple generations, there may be multiple inclusions of different suffix \nappenders in a single returned column. Provided here is a concise sorted list of all suffix appenders so \nthat any user passing a custom defined transformation can avoid any unintentional duplication.\n\n- '_:;:_temp'\n- '\\_-10^' + i (where i is an integer corresponding to the source number power of ten)\n- '\\_10^' + i (where i is an integer corresponding to the source number power of ten)\n- '\\_1010_' + i (where i is an integer corresponding to the ith digit of the binary encoding)\n- '_absl'\n- '_addd'\n- '_bins_s-10'\n- '_bins_s-21'\n- '_bins_s+01'\n- '_bins_s+12'\n- '_bins_s<-2'\n- '_bins_s>+2'\n- '_bint_t-10'\n- '_bint_t-21'\n- '_bint_t+01'\n- '_bint_t+12'\n- '_bint_t<-2'\n- '_bint_t>+2'\n- '\\_bkt1_' + i (where i is identifier of bin)\n- '\\_bkt2_' + i (where i is identifier of bin)\n- '\\_bkt3_' + i (where i is identifier of bin)\n- '\\_bkt4_' + i (where i is identifier of bin)\n- '_bn7o'\n- '_bn9o'\n- '\\_bne7_' + i (where i is identifier of bin)\n- '\\_bne9_' + i (where i is identifier of bin)\n- '_bneo'\n- '\\_bnep_' + i (where i is identifier of bin)\n- '_bnKo'\n- '_bnMo'\n- '_bnr2'\n- '_bnry'\n- '\\_bnwd_' + i + '_' + j (where i is bin width and j is identifier of bin)\n- '\\_bnwK_' + i + '_' + j (where i is bin width and j is identifier of bin)\n- '\\_bnwM_' + i + '_' + j (where i is bin width and j is identifier of bin)\n- '_bnwo'\n- '_bshr'\n- '_bsor'\n- '_bxcx'\n- '_copy'\n- '_days'\n- '_dhmc'\n- '_dhms'\n- '_divd'\n- '_dxd2'\n- '_dxdt'\n- '_dycs'\n- '_dysn'\n- '_exc2'\n- '_exc5'\n- '_exc6'\n- '_excl'\n- '_hldy'\n- '_hmsc'\n- '_hmss'\n- '_hour'\n- '_hrcs'\n- '_hrsn'\n- '_lngt'\n- '_log0'\n- '_logn'\n- '_MAD3'\n- '_MADn'\n- '_mdcs'\n- '_mdsn'\n- '_mean'\n- '_mics'\n- '_mint'\n- '_misn'\n- '_mltp'\n- '_mncs'\n- '_mnm3'\n- '_mnm6'\n- '_mnmx'\n- '_mnsn'\n- '_mnth'\n- '_mnts'\n- '_mscs'\n- '_mssn'\n- '_NArw'\n- '_nmbr'\n- '_nmc4'\n- '_nmc7'\n- '_nmcm'\n- '_nmr4'\n- '_nmr7'\n- '_nmrc'\n- '_ord3'\n- '_ordl'\n- '_por2'\n- '_pwor'\n- '_rais'\n- '_retn'\n- '_sbtr'\n- '_sccs'\n- '_scnd'\n- '_scsn'\n- '_shfl'\n- '_sp10'\n- '_spl2'\n- '_spl5'\n- '_spl7'\n- '\\_spl8_' + string (where string is an identified overlap of characters between categorical entries)\n- '_spl9'\n- '\\_splt_' + string (where string is an identified overlap of characters between categorical entries)\n- '_sqrt'\n- '\\_src2_' + string (where string is an identified overlap of characters with user passed search string)\n- '\\_src3_' + string (where string is an identified overlap of characters with user passed search string)\n- '\\_srch_' + string (where string is an identified overlap of characters with user passed search string)\n- '\\_tlbn_' + i (where i is identifier of bin)\n- '\\_text_' + string (where string is a categorical entry in one-hot encoded set)\n- '_ucct'\n- '_UPCS'\n- '_wkds'\n- '_wkdy'\n- '_year'\n\n ___ \n### Root Category Family Tree Definitions\nAnd here are the family tree definitions for root categories currently built into the internal \nlibrary. Basically providing this as a reference, not really expecting anyone to read this line \nby line or anything. (Note that the NArw transformation without quotation marks (eg NArw \nvs 'NArw') will not be activated if user passes the automunge(.) parameter as NArw_marker=False.)\nIf you want to skip to the next section you can click here: [Custom Transformation Functions](https://github.com/Automunge/AutoMunge#custom-transformation-functions)\n\n```\n    transform_dict.update({'nmbr' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : [bint]}})\n\n    transform_dict.update({'dxdt' : {'parents' : ['dxdt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d2dt' : {'parents' : ['d2dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dxdt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d3dt' : {'parents' : ['d3dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d2dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d4dt' : {'parents' : ['d4dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d3dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d5dt' : {'parents' : ['d5dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d4dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d6dt' : {'parents' : ['d6dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d5dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dxd2' : {'parents' : ['dxd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d2d2' : {'parents' : ['d2d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dxd2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d3d2' : {'parents' : ['d3d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d2d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d4d2' : {'parents' : ['d4d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d3d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d5d2' : {'parents' : ['d5d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d4d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d6d2' : {'parents' : ['d6d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d5d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmdx' : {'parents' : ['nmdx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['dxdt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd2' : {'parents' : ['nmd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d2dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd3' : {'parents' : ['nmd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d3dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd4' : {'parents' : ['nmd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d4dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd5' : {'parents' : ['nmd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d5dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd6' : {'parents' : ['nmd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d6dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmdx' : {'parents' : ['mmdx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd2' : {'parents' : ['mmd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmdx'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd3' : {'parents' : ['mmd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd2'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd4' : {'parents' : ['mmd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd3'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd5' : {'parents' : ['mmd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd4'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd6' : {'parents' : ['mmd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd5'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dddt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dddt', 'exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd2' : {'parents' : ['ddd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dddt'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd3' : {'parents' : ['ddd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd2'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd4' : {'parents' : ['ddd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd3'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd5' : {'parents' : ['ddd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd4'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd6' : {'parents' : ['ddd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd5'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dedt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dedt', 'exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded2' : {'parents' : ['ded2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dedt'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded3' : {'parents' : ['ded3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded2'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded4' : {'parents' : ['ded4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded3'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded5' : {'parents' : ['ded5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded4'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded6' : {'parents' : ['ded6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded5'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnry' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'text' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'txt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw, 'splt'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'txt3' : {'parents' : ['txt3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lngt' : {'parents' : ['lngt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lnlg' : {'parents' : ['lnlg'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['log0'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'UPCS' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['UPCS'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Utxt' : {'parents' : ['Utxt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Utx2' : {'parents' : ['Utx2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : ['splt']}})\n\n    transform_dict.update({'Utx3' : {'parents' : ['Utx3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['txt3'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Ucct' : {'parents' : ['Ucct'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ucct', 'ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uord' : {'parents' : ['Uord'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor2' : {'parents' : ['Uor2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['ord2'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor3' : {'parents' : ['Uor3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor6' : {'parents' : ['Uor6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['spl6'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'U101' : {'parents' : ['U101'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'splt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['splt'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl2' : {'parents' : ['spl2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl3' : {'parents' : ['spl2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl4' : {'parents' : ['spl4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['spl3'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl5' : {'parents' : ['spl5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl6' : {'parents' : ['spl6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['splt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['ord3']}})\n\n    transform_dict.update({'spl7' : {'parents' : ['spl7'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl8' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['spl8'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl9' : {'parents' : ['spl9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp10' : {'parents' : ['sp10'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'srch' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['srch'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'src2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['src2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'src3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['src3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmrc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmrc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr2' : {'parents' : ['nmr2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr3' : {'parents' : ['nmr3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmr4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr5' : {'parents' : ['nmr5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr6' : {'parents' : ['nmr6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmr7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr8' : {'parents' : ['nmr8'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr9' : {'parents' : ['nmr9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmcm' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmcm'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc2' : {'parents' : ['nmc2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc3' : {'parents' : ['nmc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmc4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc5' : {'parents' : ['nmc5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc6' : {'parents' : ['nmc6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmc7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc8' : {'parents' : ['nmc8'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc9' : {'parents' : ['nmc9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors7' : {'parents' : ['spl6', 'nmr2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors5' : {'parents' : ['spl5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors6' : {'parents' : ['spl6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ordl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ordl'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord2' : {'parents' : ['ord2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ucct' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ucct'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord4' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors2' : {'parents' : ['spl3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or10' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or11' : {'parents' : ['sp11'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or12' : {'parents' : ['nmr2'], \\\n                                     'siblings': ['sp11'], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or13' : {'parents' : ['sp12'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or14' : {'parents' : ['nmr2'], \\\n                                     'siblings': ['sp12'], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or15' : {'parents' : ['or15'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['sp13'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or16' : {'parents' : ['or16'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmr2'], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or17' : {'parents' : ['or17'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['sp14'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or18' : {'parents' : ['or18'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmr2'], \\\n                                     'niecesnephews' : ['sp14'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp13' : {'parents' : ['sp13'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp10'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp14' : {'parents' : ['sp14'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or19' : {'parents' : ['or19'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmc8'], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or20' : {'parents' : ['or20'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmc8'], \\\n                                     'niecesnephews' : ['sp14'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp11' : {'parents' : ['sp11'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['spl5'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp12' : {'parents' : ['sp12'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp11'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'om10' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010', 'mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmor' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'1010' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'null' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['null'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NArw' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NArw'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr3'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr4'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr5'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nbr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmbr'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nbr3' : {'parents' : ['nbr3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['bint']}})\n\n    transform_dict.update({'MADn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['MADn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'MAD2' : {'parents' : ['MAD2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'MAD3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['MAD3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnmx' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm2' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm3' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : ['nmbr', NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm6'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx', 'bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'retn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mean' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mea2' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mea3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean', 'bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'date' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mnth', 'days', 'hour', 'mint', 'scnd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mnsn', 'mncs', 'dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'dysn', 'dycs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'year' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'yea2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnth' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnth'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn', 'mncs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn', 'mncs', 'dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs', 'dysn', 'dycs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mncs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mncs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mdsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mdcs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdcs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'days' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['days'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn', 'dycs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms', 'dhmc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms', 'dhmc', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dysn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dycs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dycs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dhms' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dhmc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhmc'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hour' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hour'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn', 'hrcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrcs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrcs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hmss' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmss'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hmsc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmsc'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mint' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mint'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn', 'mics'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mssn', 'mscs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'misn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mics' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mics'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mssn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mssn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mscs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mscs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scnd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scnd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scn2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sccs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sccs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxcx' : {'parents' : ['bxcx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nmbr'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc2' : {'parents' : ['bxc2'], \\\n                                     'siblings': ['nmbr'], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc3' : {'parents' : ['bxc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc4' : {'parents' : ['bxc4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc5' : {'parents' : ['bxc5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2', 'bins'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwrs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwrs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'log0' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['log0'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'log1' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['log0', 'pwr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'logn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['logn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lgnm' : {'parents' : ['lgnm'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nmbr'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sqrt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sqrt'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'addd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['addd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sbtr' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sbtr'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mltp' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mltp'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'divd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['divd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'rais' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['rais'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'absl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['absl'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt1' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt1'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkdy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['wkdy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bshr' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bshr'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hldy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hldy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkds' : {'parents' : ['wkds'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkdo' : {'parents' : ['wkdo'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnts' : {'parents' : ['mnts'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnto' : {'parents' : ['mnto'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bins' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bint' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bint'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bsor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bsor'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwK' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwK'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwM' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwM'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnKo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnKo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnMo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnMo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})    \n\n    transform_dict.update({'bnep' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnep'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bne7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bne7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bne9' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bne9'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bneo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bneo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bn7o' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bn7o'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'tlbn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['tlbn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bn9o' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bn9o'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwor'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'por2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['por2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'copy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['copy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'excl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : ['excl'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc3' : {'parents' : ['exc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['bins']}})\n\n    transform_dict.update({'exc4' : {'parents' : ['exc4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['pwr2']}})\n\n    transform_dict.update({'exc5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc5'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc6'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'shfl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['shfl'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmbd' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : [bint]}})\n\n    transform_dict.update({'101d' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ordd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'texd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnrd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'datd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nuld' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['null'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbnm' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lb10' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbte' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbbn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbda' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n```\n\n\n...\n\n## Custom Transformation Functions\n\nOk final item on the agenda, we're going to demonstrate methods to create custom\ntransformation functions, such that a user may customize the feature engineering\nwhile building on all of the extremely useful built in features of automunge such\nas infill methods including ML infill, feature importance, dimensionality reduction,\npreparation for class imbalance oversampling, and perhaps most importantly the \nsimplest possible way for consistent processing of additional data with just a single \nfunction call. The transformation functions will need to be channeled through pandas \nand incorporate a handful of simple data structures, which we'll demonstrate below.\n\nLet's say we want to recreate the mm3 category which caps outliers at 0.01 and 0.99\nquantiles, but instead make it the 0.001 and 0.999 quantiles. Well we'll call this \ncategory mnm8. So in order to pass a custom transformation function, first we'll need \nto define a new root category transformdict and a corresponding processdict.\n\n```\n#Let's create a really simple family tree for the new root category mnmn8 which\n#simply creates a column identifying any rows subject to infill (NArw), performs \n#a z-score normalization, and separately performs a version of the new transform\n#mnm8 which we'll define below.\n\ntransformdict = {'mnm8' : {'parents' : [], \\\n                           'siblings': [], \\\n                           'auntsuncles' : ['mnm8', 'nmbr'], \\\n                           'cousins' : ['NArw'], \\\n                           'children' : [], \\\n                           'niecesnephews' : [], \\\n                           'coworkers' : [], \\\n                           'friends' : []}, \\\n\n#Note that since this mnm8 requires passing normalization parameters derived\n#from the train set to process the test set, we'll need to create two seperate \n#transformation functions, the first a \"dualprocess\" function that processes\n#both the train and if available a test set simultaneously, and the second\n#a \"postprocess\" that only processes the test set on it's own.\n\n#So what's being demonstrated here is that we're passing the functions under\n#dualprocess and postprocess that we'll define below.\n\nprocessdict = {'mnm8' : {'dualprocess' : process_mnm8_class, \\\n                         'singleprocess' : None, \\\n                         'postprocess' : postprocess_mnm8_class, \\\n                         'NArowtype' : 'numeric', \\\n                         'MLinfilltype' : 'numeric', \\\n                         'labelctgy' : 'mnm8'}}\n\n#Now we have to define the custom processing functions which we are passing through\n#the processdict to automunge.\n\n#Here we'll define a \"dualprocess\" function intended to process both a train and\n#test set simultaneously. We'll also need to create a seperate \"postprocess\"\n#function intended to just process a subsequent test set.\n\n#define the function\ndef process_mnm8_class(mdf_train, mdf_test, column, category, \\\n                       postprocess_dict, params = {}):\n  #where\n  #mdf_train is the train data set (pandas dataframe)\n  #mdf_test is the consistently formatted test dataset (if no test data \n  #set is passed to automunge a small dummy set will be passed in it's place)\n  #column is the string identifying the column header\n  #category is the (traditionally 4 character) string category identifier, here is \n  #will be 'mnm8', \n  #postprocess_dict is an object we pass to share data between \n  #functions and later returned from automunge\n  #and params are any column specific parameters to be passed by user in assignparam\n\n  #first, if this function accepts any parameters (it doesn't but just to demonstrate)\n  #we'll access those parameters from params, otherwise assign default values\n  #if 'parameter1' in params:\n  #  mnm8_parameter = params['parameter1']\n  #else:\n  #  mnm8_parameter = (some default value)\n\n  #create the new column, using the category key as a suffix identifier\n\n  #copy source column into new column\n  mdf_train[column + '_mnm8'] = mdf_train[column].copy()\n  mdf_test[column + '_mnm8'] = mdf_test[column].copy()\n\n\n  #perform an initial infill method, here we use mean as a plug, automunge\n  #will separately perform a infill method per user specifications elsewhere\n  #convert all values to either numeric or NaN\n  mdf_train[column + '_mnm8'] = pd.to_numeric(mdf_train[column + '_mnm8'], errors='coerce')\n  mdf_test[column + '_mnm8'] = pd.to_numeric(mdf_test[column + '_mnm8'], errors='coerce')\n\n  #if we want to collect any statistics for the driftreport we could do so prior\n  #to transformations and save them in the normalization dictionary below with the\n  #other normalization parameters, e.g.\n  min = mdf_train[column + '_mnm8'].min()\n  max = mdf_train[column + '_mnm8'].max()\n\n  #Now we do the specifics of the processing function, here we're demonstrating\n  #the min-max scaling method capping values at 0.001 and 0.999 quantiles\n  #in some cases we would address infill first, here to preserve the quantile evaluation\n  #we'll do that first\n\n  #get high quantile of training column for min-max scaling\n  quantilemax = mdf_train[column + '_mnm8'].quantile(.999)\n\n  #outlier scenario for when data wasn't numeric (nan != nan)\n  if quantilemax != quantilemax:\n    quantilemax = 0\n\n  #get low quantile of training column for min-max scaling\n  quantilemin = mdf_train[column + '_mnm8'].quantile(.001)\n\n  if quantilemax != quantilemax:\n    quantilemax = 0\n\n  #replace values > quantilemax with quantilemax for both train and test data\n  mdf_train.loc[mdf_train[column + '_mnm8'] > quantilemax, (column + '_mnm8')] \\\n  = quantilemax\n  mdf_test.loc[mdf_train[column + '_mnm8'] > quantilemax, (column + '_mnm8')] \\\n  = quantilemax\n\n  #replace values < quantile10 with quantilemin for both train and test data\n  mdf_train.loc[mdf_train[column + '_mnm8'] < quantilemin, (column + '_mnm8')] \\\n  = quantilemin\n  mdf_test.loc[mdf_train[column + '_mnm8'] < quantilemin, (column + '_mnm8')] \\\n  = quantilemin\n\n\n  #note the infill method is now completed after the quantile evaluation / replacement\n  #get mean of training data for infill\n  mean = mdf_train[column + '_mnm8'].mean()\n\n  if mean != mean:\n    mean = 0\n\n  #replace missing data with training set mean\n  mdf_train[column + '_mnm8'] = mdf_train[column + '_mnm8'].fillna(mean)\n  mdf_test[column + '_mnm8'] = mdf_test[column + '_mnm8'].fillna(mean)\n\n  #this is to avoid outlier div by zero when max = min\n  maxminusmin = quantilemax - quantilemin\n  if maxminusmin == 0:\n    maxminusmin = 1\n\n  #perform min-max scaling to train and test sets using values derived from train\n  mdf_train[column + '_mnm8'] = (mdf_train[column + '_mnm8'] - quantilemin) / \\\n                                (maxminusmin)\n  mdf_test[column + '_mnm8'] = (mdf_test[column + '_mnm8'] - quantilemin) / \\\n                               (maxminusmin)\n\n\n  #ok here's where we populate the data structures\n\n  #create list of columns (here it will only be one column returned)\n  nmbrcolumns = [column + '_mnm8']\n\n  #The normalization dictionary is how we pass values between the \"dualprocess\"\n  #function and the \"postprocess\" function. This is also where we save any metrics\n  #we want to track such as to track drift in the postmunge driftreport.\n\n  #Here we populate the normalization dictionary with any values derived from\n  #the train set that we'll need to process the test set.\n  nmbrnormalization_dict = {column + '_mnm8' : {'quantilemin' : quantilemin, \\\n                                                'quantilemax' : quantilemax, \\\n                                                'mean' : mean, \\\n                                                'minimum' : min, \\\n                                                'maximum' : max}}\n\n  #the column_dict_list is returned from the function call and supports the \n  #automunge methods. We populate it as follows:\n\n  #initialize\n  column_dict_list = []\n\n  #where we're storing following\n  #{'category' : 'mnm8', \\ -> identifier of the category fo transform applied\n  # 'origcategory' : category, \\ -> category of original column in train set, passed in function call\n  # 'normalization_dict' : nmbrnormalization_dict, \\ -> normalization parameters of train set\n  # 'origcolumn' : column, \\ -> ID of original column in train set\n  # 'columnslist' : nmbrcolumns, \\ -> a list of columns created in this transform, \n  #                                  later fleshed out to include all columns derived from same source column\n  # 'categorylist' : [nc], \\ -> a list of columns created in this transform\n  # 'infillmodel' : False, \\ -> populated elsewhere, for now enter False\n  # 'infillcomplete' : False, \\ -> populated elsewhere, for now enter False\n  # 'deletecolumn' : False}} -> populated elsewhere, for now enter False\n\n  #for column in nmbrcolumns\n  for nc in nmbrcolumns:\n\n    column_dict = { nc : {'category' : 'mnm8', \\\n                          'origcategory' : category, \\\n                          'normalization_dict' : nmbrnormalization_dict, \\\n                          'origcolumn' : column, \\\n                          'inputcolumn' : column, \\\n                          'columnslist' : nmbrcolumns, \\\n                          'categorylist' : nmbrcolumns, \\\n                          'infillmodel' : False, \\\n                          'infillcomplete' : False, \\\n                          'deletecolumn' : False}}\n\n    column_dict_list.append(column_dict.copy())\n\n\n\n  return mdf_train, mdf_test, column_dict_list\n\n  #where mdf_train and mdf_test now have the new column incorporated\n  #and column_dict_list carries the data structures supporting the operation \n  #of automunge. (If the original column was intended for replacement it \n  #will be stricken elsewhere)\n\n\n#and then since this is a method that passes values between the train\n#and test sets, we'll need to define a corresponding \"postprocess\" function\n#intended for use on just the test set\n\ndef postprocess_mnm3_class(mdf_test, column, postprocess_dict, columnkey, params={}):\n  #where mdf_test is a dataframe of the test set\n  #column is the string of the column header\n  #postprocess_dict is how we carry packets of data between the \n  #functions in automunge and postmunge\n  #columnkey is a key used to access stuff in postprocess_dict if needed\n  #(columnkey is only valid for initial root categories, if you want to use function\n  #as a downstream category we have to recreate a columnkey such as follows for normkey)\n  #and params are any column specific parameters to be passed by user in assignparam\n\n  #retrieve normalization parameters from postprocess_dict\n  #normkey is the column returned from original transformation, a key used to access parameters\n  normkey = column + '_mnm8'\n\n  mean = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['mean']\n\n  quantilemin = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['quantilemin']\n\n  quantilemax = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['quantilemax']\n\n  #(note that for cases where you might not know the suffix that was appended in advance,\n  #I have a few methods to retrieve a normkey using properties of data structures, contact\n  #the author and I can point you to them.)\n\n  #copy original column for implementation\n  mdf_test[column + '_mnm8'] = mdf_test[column].copy()\n\n\n  #convert all values to either numeric or NaN\n  mdf_test[column + '_mnm8'] = pd.to_numeric(mdf_test[column + '_mnm8'], errors='coerce')\n\n  #get mean of training data\n  mean = mean  \n\n  #replace missing data with training set mean\n  mdf_test[column + '_mnm8'] = mdf_test[column + '_mnm8'].fillna(mean)\n\n  #this is to avoid outlier div by zero when max = min\n  maxminusmin = quantilemax - quantilemin\n  if maxminusmin == 0:\n    maxminusmin = 1\n\n  #perform min-max scaling to test set using values from train\n  mdf_test[column + '_mnm8'] = (mdf_test[column + '_mnm8'] - quantilemin) / \\\n                               (maxminusmin)\n\n\n  return mdf_test\n\n#Voila\n\n#One more demonstration, note that if we didn't need to pass any properties\n#between the train and test set, we could have just processed one at a time,\n#and in that case we wouldn't need to define separate functions for \n#dualprocess and postprocess, we could just define what we call a singleprocess \n#function incorporating similar data structures but passing only a single dataframe.\n\n#Such as:\ndef process_mnm8_class(df, column, category, postprocess_dict, params = {}):\n\n  #etc\n\n  return df, column_dict_list\n\n#For a full demonstration check out my essay \n\"Automunge 1.79: An Open Source Platform for Feature Engineering\"\n\n\n```\n\n## Conclusion\n\nAnd there you have it, you now have all you need to prepare data for \nmachine learning with the Automunge platform. Feedback is welcome.\n\n...\n\nAs a citation, please note that the Automunge package makes use of \nthe Pandas, Scikit-learn, SciPy stats, and NumPy libraries.\n\nWes McKinney. Data Structures for Statistical Computing in Python,\nProceedings of the 9th Python in Science Conference, 51-56 (2010)\n[publisher\nlink](http://conference.scipy.org/proceedings/scipy2010/mckinney.html)\n\nFabian Pedregosa, Ga\u00ebl Varoquaux, Alexandre Gramfort, Vincent Michel,\nBertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer,\nRon Weiss, Vincent Dubourg, Jake Vanderplas, Alexandre Passos, David\nCournapeau, Matthieu Brucher, Matthieu Perrot, \u00c9douard Duchesnay.\nScikit-learn: Machine Learning in Python, Journal of Machine Learning\nResearch, 12, 2825-2830 (2011) [publisher\nlink](http://jmlr.org/papers/v12/pedregosa11a.html)\n\nPauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler \nReddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren \nWeckesser, Jonathan Bright, St \u0301efan J. van der Walt, Matthew Brett, \nJoshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson, \nEric Jones, Robert Kern, Eric Larson, CJ Carey, Ilhan Polat, Yu Feng, \nEric W. Moore, Jake Vand erPlas, Denis Laxalde, Josef Perktold, Robert \nCim- rman, Ian Henriksen, E. A. Quintero, Charles R Harris, Anne M. \nArchibald, Ant\u02c6onio H. Ribeiro, Fabian Pedregosa, Paul van Mulbregt, and \nSciPy 1. 0 Contributors. SciPy 1.0: Fundamental Algorithms for Scientific \nComputing in Python. Nature Methods, 17:261\u2013 272, 2020. \ndoi: https://doi.org/10.1038/s41592-019-0686-2.\n\nS. van der Walt, S. Colbert, and G. Varoquaux. The numpy array: A \nstructure for efficient numerical computation. Computing in Science \n& Engineering, 13:22\u201330, 2011.\n\n...\n\nHave fun munging!!\n\n...\n\nYou can read more about the tool through the blog posts documenting the\ndevelopment on Medium [here](https://medium.com/automunge) or for more\nwriting I recently completed my first collection of essays titled \"From\nthe Diaries of John Henry\" which is also available on Medium\n[turingsquared.com](https://turingsquared.com).\n\nThe Automunge website is helpfully located at URL\n[automunge.com](https://automunge.com).\n\n...\n\nThis file is part of Automunge which is released under GNU General Public License v3.0.\nSee file LICENSE or go to https://github.com/Automunge/AutoMunge for full license details.\n\ncontact available via automunge.com\n\nCopyright (C) 2018, 2019, 2020 Nicholas Teague - All Rights Reserved\n\nPatent Pending, application 16552857\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Automunge/AutoMunge", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Automunge", "package_url": "https://pypi.org/project/Automunge/", "platform": "", "project_url": "https://pypi.org/project/Automunge/", "project_urls": {"Homepage": "https://github.com/Automunge/AutoMunge"}, "release_url": "https://pypi.org/project/Automunge/3.86/", "requires_dist": ["numpy", "pandas", "scikit-learn", "scipy"], "requires_python": "", "summary": "platform for preparing tabular data for machine learning", "version": "3.86", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Automunge</h1>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b978eb6e5e94079a7a8042f0374d83036e043d9/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34343031313734382f37363438353537312d34383535623238302d363366332d313165612d393537342d6333396136366534356534652e706e67\"></p>\n<h1></h1>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#install-initialize-and-basics\" rel=\"nofollow\">Install, Initialize, and Basics</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge#automunge-1\" rel=\"nofollow\">automunge(.)</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#automunge-returned-sets\" rel=\"nofollow\">automunge(.) returned sets</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#automunge-passed-parameters\" rel=\"nofollow\">automunge(.) passed parameters</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge#postmunge\" rel=\"nofollow\">postmunge(.)</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#postmunge-returned-sets\" rel=\"nofollow\">postmunge(.) returned sets</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#postmunge-passed-parameters\" rel=\"nofollow\">postmunge(.) passed parameters</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge#default-transformations\" rel=\"nofollow\">Default Transformations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#library-of-transformations\" rel=\"nofollow\">Library of Transformations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge#custom-transformation-functions\" rel=\"nofollow\">Custom Transformation Functions</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge#conclusion\" rel=\"nofollow\">Conclusion</a></li>\n</ul>\n<hr>\n<h2>Introduction</h2>\n<p>Automunge is a platform for preparing tabular data for machine learning. A user\nhas options between automated inference of column properties for application of\nappropriate simple feature engineering methods, or may also assign to distinct\ncolumns custom feature engineering transformations, custom sets (e.g. \"family\ntrees\") of feature engineering transformations, and custom infill methods. The\nfeature engineering transformations may be accessed from the internal library\n(aka a \"feature store\"), or may also be externally user defined with minimal\nrequirements of simple data structures. The tool includes options for automated\nfeature importance evaluation, automated derivation of infill predictions using\nmachine learning models trained on the set in a fully automated fashion,\nautomated preparation for oversampling for class imbalance in labels, automated\ndimensionality reductions such as based on feature importance, principal\ncomponent analysis (PCA), or binary encoding, automated evaluation of data\nproperty drift between training data and subsequent data, and perhaps most\nimportantly the simplest means for consistent processing of additional data with\njust a single function call.</p>\n<blockquote>\n<p>In other words, put simply:<br></p>\n<ul>\n<li><strong>automunge(.)</strong> prepares tabular data for machine learning.<br></li>\n<li><strong>postmunge(.)</strong> consistently prepares additional data very efficiently.<br></li>\n</ul>\n<p>We make machine learning easy.</p>\n</blockquote>\n<p>The automunge(.) function takes as input tabular training data intended to\ntrain a machine learning model with any corresponding labels if available\nincluded in the set, and also if available consistently formatted test data\nthat can then be used to generate predictions from that trained model. When\nfed pandas dataframes or numpy arrays for these sets the function returns a\nseries of transformed numpy arrays or pandas dataframes (per selection) which\nare numerically encoded and suitable for the direct application of machine\nlearning algorithms. A user has an option between default feature engineering\nbased on inferred properties of the data with feature transformations such as\nz-score normalization, binary encoding for categorical sets, time series\nagregation to sin and cos transforms (with bins for business hours, weekdays,\nand holidays), and more (full documentation below); assigning distinct column\nfeature engineering methods using a built-in library of feature engineering\ntransformations; or alternatively the passing of user-defined custom\ntransformation functions incorporating simple data structures such as to allow\ncustom methods to each column while still making use of all of the built-in\nfeatures of the tool (such as ML infill, feature importance, dimensionality\nreduction, and most importantly the simplest way for the consistent preparation\nof subsequently available data using just a single function call of the\npostmunge(.) function). Missing data points in the sets are also available to be\naddressed by either assigning distinct methods to each column or alternatively by\nthe automated \"ML infill\" method which predicts infill using machine learning\nmodels trained on the rest of the set in a fully generalized and automated\nfashion. automunge(.) returns a populated python dictionary which can be used as\ninput along with a subsequent test data set to the postmunge(.) function for\nconsistent preparation of data.</p>\n<h2>Install, Initialize, and Basics</h2>\n<p>AutoMunge is now available for pip install for open source python data-wrangling:</p>\n<pre><code>pip install Automunge\n</code></pre>\n<pre><code>#or to upgrade (we currently roll out upgrades pretty frequently)\npip install Automunge --upgrade\n</code></pre>\n<p>Once installed, run this in a local session to initialize:</p>\n<pre><code>from Automunge import Automunger\nam = Automunger.AutoMunge()\n</code></pre>\n<p>Where eg for train set processing  with default parameters run:</p>\n<pre><code>train, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\ntestlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict \\\n= am.automunge(df_train)\n</code></pre>\n<p>or for subsequent consistent processing of train or test data, using the\ndictionary returned from original application of automunge(.), run:</p>\n<pre><code>test, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict \\\n= am.postmunge(postprocess_dict, df_test)\n</code></pre>\n<p>I find it helpful to pass these functions with the full range of arguments\nincluded for reference, thus a user may simply copy and past this form.</p>\n<pre><code>#for automunge(.) function on original train and test data\n\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\    \nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n</code></pre>\n<p>Please remember to save the automunge(.) returned object postprocess_dict\nsuch as using pickle library, which can then be later passed to the postmunge(.)\nfunction to consistently prepare subsequently available data.</p>\n<pre><code>#Sample pickle code:\n\n#sample code to download postprocess_dict dictionary returned from automunge(.)\nimport pickle\nwith open('filename.pickle', 'wb') as handle:\n  pickle.dump(postprocess_dict, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\n#to upload for later use in postmunge(.) in another notebook\nimport pickle\nwith open('filename.pickle', 'rb') as handle:\n  postprocess_dict = pickle.load(handle)\n\n</code></pre>\n<p>We can then apply the postprocess_dict saved from a prior application of automunge\nfor consistent processing of additional data.</p>\n<pre><code>#for postmunge(.) function on additional available train or test data\n#using the postprocess_dict object returned from original automunge(.) application\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n</code></pre>\n<p>The functions depend on pandas dataframe formatted train and test data\nor numpy arrays with consistent order of columns between train and test data.\n(For numpy arrays any label column should be positioned as final column in set.)\nThe functions return numpy arrays or pandas dataframes numerically encoded\nand normalized such as to make them suitable for direct application to a\nmachine learning model in the framework of a user's choice, including sets for\nthe various activities of a generic machine learning project such as training,\nhyperparameter tuning validation (validation1), final  validation (validation2),\nor data intended for use in generation of predictions from the trained model\n(test set). The functions also return a few other sets such as labels, column\nheaders, ID sets, and etc if elected - a full list of returned arrays is below.</p>\n<p>When left to automation, the function works by inferring a category of\ndata based on properties of each column to select the type of processing\nfunction to apply, for example whether a column is a numerical, categorical,\nbinary, or time-series set. Alternately, a user can pass column header IDs to\nassign specific processing functions to distinct columns - which processing functions\nmay be pulled from the internal library of transformations or alternately user\ndefined. Normalization parameters from the initial automunge application are\nsaved to a returned dictionary for subsequent consistent processing of test data\nthat wasn't available at initial address with the postmunge(.) function.</p>\n<p>The feature engineering transformations are recorded with a series of suffixes\nappended to the column header title in the returned sets, for one example the\napplication of z-score normalization returns a column with header origname + '_nmbr'.\nAs another example, for one-hot encoded sets the set of columns are returned with\nheader origname + '_category' where category is the category from the set indicated\nby a column. Each transformation category has a unique suffix appender.</p>\n<p>In automation, for numerical data, the functions generate a series of derived\ntransformations resulting in multiple child columns. For numerical data, if the\npowertransform option is selected distribution properties are evaluated for\npotential application of z-score normalization, min-max scaling, power law transform\nvia box-cox method, or mean absolute deviation scaling. Otherwise numerical data\ndefaults to z-score, with z-score normalization options for standard\ndeviation bins for values in range &lt;-2, -2-1, -10, 01, 12, &gt;2 from the\nmean. For numerical sets with all positive values the functions also optionally\ncan return a power-law transformed set using the box-cox method, along with\na corresponding set with z-score normalization applied. For time-series\ndata the model segregates the data by time-scale (year, month, day, hour, minute,\nsecond) and returns year z-score normalized, a pair of sets for combined month/day\nand combined hour / minute / second with sin and cos transformations at period of\ntime-scale, and also returns binned sets identifying business hours, weekdays, and\nUS holidays. For binary categorical data the functions return a single column with\n1/0 designation. For multimodal categorical data the functions return one-hot\nencoded sets using the naming convention origname + _ + category. (I believe this\nautomation of the one-hot encoding method to be a particularly useful feature of\nthe tool.) For all cases the functions generate a supplemental column (NArw)\nwith a boolean identifier for cells that were subject to infill due to missing or\nimproperly formatted data. (Please note that I don't consider the current methods\nof numerical set distribution evaluation highly sophisticated and have some work to\ndo here).</p>\n<p>The functions also include a method we call 'ML infill' which if elected\npredicts infill for missing values in both the train and test sets using\nmachine learning models trained on the rest of the set in a fully\ngeneralized and automated fashion. The ML infill works by initially\napplying infill using traditional methods such as mean for a numerical\nset, most common value for a binary set, and a boolean identifier for\ncategorical. The functions then generate a column specific set of\ntraining data, labels, and feature sets for the derivation of infill.\nThe column's trained model is included in the outputted dictionary for\napplication of the same model in the postmunge function. Alternately, a\nuser can pass column headers to assign different infill methods to distinct\ncolumns. The method currently makes use of Scikit Random Forest models by\ndefault. A user may defer to default hyperparameters or alternatively pass\nhyperparameters via the \"ML_cmnd\" object, and may also make use of grid\nor randomized CV hyperparameter tuning by passing the hyperparameters as\nlists, ranges, or distributions of candidate parameters instead of distinct\nvalues.</p>\n<p>The automunge(.) function also includes a method for feature importance\nevaluation, in which metrics are derived to measure the impact to predictive\naccuracy of original source columns as well as relative importance of\nderived columns using a permutation importance method. Permutation importance\nmethod was inspired by a fast.ai lecture and more information can be found in\nthe paper \"Beware Default Random Forest Importances\" by Terrence Parr, Kerem\nTurgutlu, Christopher Csiszar, and Jeremy Howard. This method currently makes\nuse of Scikit-Learn's Random Forest predictors. I believe the metric we refer to\nas metric2 which evaluates relative importance between features derived from the\nsame source column is a unique approach.</p>\n<p>The function also includes a method we call 'TrainLabelFreqLevel' which\nif elected applies multiples of the feature sets associated with each\nlabel category in the returned training data so as to enable\noversampling of those labels which may be underrepresented in the\ntraining data. This method is available for categorical labels or also\nfor numerical labels when the label processing includes binned aggregations\nsuch as standard deviation bins or powers of ten bins. This method is\nexpected to improve downstream model accuracy for training data with uneven\ndistribution of labels. For more on the class imbalance problem see \"A\nsystematic study of the class imbalance problem in convolutional neural\nnetworks\" - Buda, Maki, Mazurowski.</p>\n<p>The function also can perform dimensionality reduction of the sets via\nprincipal component analysis (PCA). The function automatically performs a\ntransformation when the number of features is more than 50% of the number\nof observations in the train set (this is a somewhat arbitrary heuristic).\nAlternately, the user can pass a desired number of features and their\npreference of type and parameters between linear PCA, Sparse PCA, or Kernel\nPCA - all currently implemented in Scikit-Learn.</p>\n<p>The function also can perform dimensionality reduction of the sets via\nthe Binary option which takes the set of columns with boolean {1/0} encodings\nand collectively applies a binary transform to reduce the number of columns.</p>\n<h2>automunge(.)</h2>\n<p>The application of the automunge and postmunge functions requires the\nassignment of the function to a series of named sets. We suggest using\nconsistent naming convention as follows:</p>\n<pre><code>#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then to run with default parameters\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\ \ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict \\\n= am.automunge(df_train)\n</code></pre>\n<p>The full set of parameters available to be passed are given here, with\nexplanations provided below:</p>\n<pre><code>#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then if you want you can copy paste following to view all of parameter options\n#where df_train is the target training data set to be prepared\n\ntrain, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\\nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n</code></pre>\n<p>Or for the postmunge function:</p>\n<pre><code>#for postmunge(.) function on additional or subsequently available test (or train) data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then to run with default parameters\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test)\n</code></pre>\n<p>With the full set of arguments available to be passed as:</p>\n<pre><code>#first you'll need to initialize\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n#then if you want you can copy paste following to view all of parameter options\n#here postprocess_dict was returned from corresponding automunge(.) call\n#and df_test is the target data set to be prepared\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n</code></pre>\n<p>Note that the only required argument to the automunge function is the\ntrain set dataframe, the other arguments all have default values if\nnothing is passed. The postmunge function requires as minimum the\npostprocess_dict object (a python dictionary returned from the application of\nautomunge) and a dataframe test set consistently formatted as those sets\nthat were originally applied to automunge.</p>\n<p>Note that there is a potential source of error if the returned column header\ntitle strings, which will include suffix appenders based on transformations applied,\nmatch any of the original column header titles passed to automunge. This is an edge\ncase not expected to occur in common practice and will return error message at\nconclusion of printouts.</p>\n<p>...</p>\n<p>Here now are descriptions for the returned sets from automunge, which\nwill be followed by descriptions of the arguments which can be passed to\nthe function, followed by similar treatment for postmunge returned sets\nand arguments.</p>\n<p>...</p>\n<h2>automunge returned sets:</h2>\n<ul>\n<li>\n<p>train: a numerically encoded set of data intended to be used to train a\ndownstream machine learning model in the framework of a user's choice</p>\n</li>\n<li>\n<p>trainID: the set of ID values corresponding to the train set if a ID\ncolumn(s) was passed to the function. This set may be useful if the shuffle\noption was applied. Note that an ID column may serve multiple purposes such\nas row identifiers or for pairing tabular data rows with a corresponding\nimage file for instance. Also included in this set is a derived column\ntitled 'Automunge_index_#' (where # is a 12 digit number stamp specific to\neach function call), this column serves as an index identifier for order\nof rows as they were received in passed data, such as may be beneficial\nwhen data is shuffled.</p>\n</li>\n<li>\n<p>labels: a set of numerically encoded labels corresponding to the\ntrain set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set. Note\nthat if the labels set is a single column a returned numpy array is\nflattened (e.g. [[1,2,3]] converted to [1,2,3] )</p>\n</li>\n<li>\n<p>validation1: a set of training data carved out from the train set\nthat is intended for use in hyperparameter tuning of a downstream model.</p>\n</li>\n<li>\n<p>validationID1: the set of ID values corresponding to the validation1\nset. Comparable to columns returned in trainID.</p>\n</li>\n<li>\n<p>validationlabels1: the set of labels corresponding to the validation1\nset</p>\n</li>\n<li>\n<p>validation2: the set of training data carved out from the train set\nthat is intended for the final validation of a downstream model (this\nset should not be applied extensively for hyperparameter tuning).</p>\n</li>\n<li>\n<p>validationID2: the set of ID values corresponding to the validation2\nset. Comparable to columns returned in trainID.</p>\n</li>\n<li>\n<p>validationlabels2: the set of labels corresponding to the validation2\nset</p>\n</li>\n<li>\n<p>test: the set of features, consistently encoded and normalized as the\ntraining data, that can be used to generate predictions from a\ndownstream model trained with train. Note that if no test data is\navailable during initial address this processing will take place in the\npostmunge(.) function.</p>\n</li>\n<li>\n<p>testID: the set of ID values corresponding to the test set. Comparable\nto columns returned in trainID.</p>\n</li>\n<li>\n<p>testlabels: a set of numerically encoded labels corresponding to the\ntest set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set.</p>\n</li>\n<li>\n<p>labelsencoding_dict: a dictionary that can be used to reverse encode\npredictions that were generated from a downstream model (such as to\nconvert a one-hot encoded set back to a single categorical set).</p>\n</li>\n</ul>\n<pre><code>#Note that the labelsencoding_dict follows format:\nlabelsencoding_dict = \\\n{'(label root category)' : {'(label column header)' : {(normalization parameters)}}\n</code></pre>\n<ul>\n<li>\n<p>finalcolumns_train: a list of the column headers corresponding to the\ntraining data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn.</p>\n</li>\n<li>\n<p>finalcolumns_test: a list of the column headers corresponding to the\ntest data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn. Note that this list will match the one preceding.</p>\n</li>\n<li>\n<p>featureimportance: a dictionary containing summary of feature importance\nranking and metrics for each of the derived sets. Note that the metric\nvalue provides an indication of the importance of the original source\ncolumn such that larger value suggests greater importance, and the metric2\nvalue provides an indication of the relative importance of columns derived\nfrom the original source column such that smaller metric2 value suggests\ngreater relative importance. Please note that in cases of multi-column\ncategorical encodings, metric2 has more validity for one-hot encoded sets\nthan binary encoded sets. One can print the values here such as with\nthis code:</p>\n</li>\n</ul>\n<pre><code>#to inspect values returned in featureimportance object one could run\nfor keys,values in featureimportance.items():\n    print(keys)\n    print('metric = ', values['metric'])\n    print('metric2 = ', values['metric2'])\n    print()\n</code></pre>\n<p>Note that additional feature importance results are available in\npostprocess_dict['FS_sorted'].</p>\n<ul>\n<li>postprocess_dict: a returned python dictionary that includes\nnormalization parameters and trained machine learning models used to\ngenerate consistent processing of additional train or test data such as\nmay not have been available at initial application of automunge. It is\nrecommended that this dictionary be externally saved on each application\nused to train a downstream model so that it may be passed to postmunge(.)\nto consistently process subsequently available test data, such as\ndemonstrated with the pickle library above.</li>\n</ul>\n<p>...</p>\n<h2>automunge(.) passed parameters</h2>\n<pre><code>train, trainID, labels, \\\nvalidation1, validationID1, validationlabels1, \\\nvalidation2, validationID2, validationlabels2, \\\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_train, finalcolumns_test, \\\nfeatureimportance, postprocess_dict = \\\nam.automunge(df_train, df_test = False, \\\n             labels_column = False, trainID_column = False, testID_column = False, \\\n             valpercent1=0.0, valpercent2 = 0.0, floatprecision = 32, shuffletrain = True, \\\n             TrainLabelFreqLevel = False, powertransform = False, binstransform = False, \\\n             MLinfill = False, infilliterate=1, randomseed = 42, \\\n             LabelSmoothing_train = False, LabelSmoothing_test = False, LabelSmoothing_val = False, LSfit = False, \\\n             numbercategoryheuristic = 63, pandasoutput = False, NArw_marker = False, \\\n             featureselection = False, featurepct = 1.0, featuremetric = 0.0, featuremethod = 'default', \\\n             Binary = False, PCAn_components = None, PCAexcl = [], excl_suffix = False, \\\n             ML_cmnd = {'MLinfill_type':'default', \\\n                        'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n                        'PCA_type':'default', \\\n                        'PCA_cmnd':{}}, \\\n             assigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n                          'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n                          'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n                          'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n                          'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n                          'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n                          'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n                          'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n                          'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n                          'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n                          'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n                          'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n                          'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n                          'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n                          'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n                          'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n                          'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n                          'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n                          'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n                          'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n                          'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n                          'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n                          'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n                          'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n                          'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n                          'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n                          'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}, \\\n             assigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                             'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                             'modeinfill':[], 'lcinfill':[]}, \\\n             assignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                                     '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n             transformdict = {}, processdict = {}, evalcat = False, \\\n             printstatus = True)\n</code></pre>\n<ul>\n<li>\n<p>df_train: a pandas dataframe or numpy array containing a structured\ndataset intended for use to subsequently train a machine learning model.\nThe set at a minimum should be 'tidy' meaning a single column per feature\nand a single row per observation. If desired the set may include one are more\n\"ID\" columns (intended to be carved out and consistently shuffled or partitioned\nsuch as an index column) and zero or one column intended to be used as labels\nfor a downstream training operation. The tool supports the inclusion of\nnon-index-range column as index or multicolumn index (requires named index\ncolumns). Such index types are added to the returned \"ID\" sets which are\nconsistently shuffled and partitioned as the train and test sets. For passed\nnumpy array any label column should be the final column.</p>\n</li>\n<li>\n<p>df_test: a pandas dataframe or numpy array containing a structured\ndataset intended for use to generate predictions from a downstream machine\nlearning model trained from the automunge returned sets. The set must be\nconsistently formatted as the train set with consistent column labels and/or\norder of columns. (This set may optionally contain a labels column if one\nwas included in the train set although it's inclusion is not required). If\ndesired the set may include one or more ID column(s) or column(s) intended\nfor use as labels. A user may pass False if this set is not available. The tool\nsupports the inclusion of non-index-range column as index or multicolumn index\n(requires named index columns). Such index types are added to the returned\n\"ID\" sets which are consistently shuffled and partitioned as the train and\ntest sets.</p>\n</li>\n<li>\n<p>labels_column: a string of the column title for the column from the\ndf_train set intended for use as labels in training a downstream machine\nlearning model. The function defaults to False for cases where the\ntrain set does not include a label column. An integer column index may\nalso be passed such as if the source dataset was a numpy array. A user can\nalso pass True in which case the label set will be taken from the final\ncolumn of the train set (including cases of single column in train set).</p>\n</li>\n<li>\n<p>trainID_column: a string of the column title for the column from the\ndf_train set intended for use as a row identifier value (such as could\nbe sequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can\nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and\npartitioned. An integer column index or list of integer column indexes\nmay also be passed such as if the source dataset was a numpy array.</p>\n</li>\n<li>\n<p>testID_column: a string of the column title for the column from the\ndf_test set intended for use as a row identifier value (such as could be\nsequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can\nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and\npartitioned. An integer column index or list of integer column indexes\nmay also be passed such as if the source dataset was a numpy array.</p>\n</li>\n<li>\n<p>valpercent1: a float value between 0 and 1 which designates the percent\nof the training data which will be set aside for the first validation\nset (generally used for hyperparameter tuning of a downstream model).\nThis value defaults to 0. (Previously the default here was set at 0.20 but\nthat is fairly an arbitrary value and a user may wish to deviate for\ndifferent size sets.) Note that this value may be set to 0 if no validation\nset is needed (such as may be the case for k-means validation). Please see\nalso the notes below for the shuffletrain parameter.  Note that if\nshuffletrain parameter is set to False then any validation sets will be\npulled from the bottom x% sequential rows of the df_train dataframe. (Where\nx% is the sum of validation ratios.) Note that if this value is set to\nFalse although the validations will be pulled from sequential rows, the\nsplit between validaiton1 and validation2 sets will be randomized. Note\nthat if desire is instead to pull validation rows from the top x% sequential\nrows one can first reverse the order of the rows such as via\ndf_train = df_train[::-1]</p>\n</li>\n<li>\n<p>valpercent2: a float value between 0 and 1 which designates the percent\nof the training data which will be set aside for the second validation\nset (generally used for final validation of a model prior to release).\nThis value defaults to 0. (Previously the default was set at 0.10 but that\nis fairly an arbitrary value and a user may wish to deviate for different\nsize sets.) Note that if shuffletrain is set to False although the validations\nwill be pulled from sequential rows, the split between validaiton1 and\nvalidation2 sets will be randomized.</p>\n</li>\n<li>\n<p>floatprecision: an integer with acceptable values of <em>16/32/64</em> designating\nthe memory precision for returned float values. (A tradeoff between memory\nusage and floating point precision, smaller for smaller footprint.)\nThis currently defaults to 32 for 32-bit precision of float values. Note\nthat there may be energy efficiency benefits at scale to basing this to 16.\nNote that integer data types are still retained with this option.</p>\n</li>\n<li>\n<p>shuffletrain: can be passed as one of <em>{True, False, 'traintest'}</em> which\nindicates if the rows in df_train will be shuffled prior to carving out the\nvalidation sets.  This value defaults to True. Note that if this value is set to\nFalse then any validation sets will be pulled from the bottom x% sequential\nrows of the df_train dataframe. (Where x% is the sum of validation ratios.)\nOtherwise validation rows will be randomly selected. The third option 'traintest'\nis comparable to True for the training set and shuffles the returned test sets\nas well. Note that all corresponding returned sets are consistently shuffled\n(such as between train/labels/trainID sets).</p>\n</li>\n<li>\n<p>TrainLabelFreqLevel: a boolean identifier <em>(True/False)</em> which indicates\nif the TrainLabelFreqLevel method will be applied to prepare for oversampling\ntraining data associated with underrepresented labels (aka class imbalance).\nThe method adds multiples of training data rows for those labels with lower\nfrequency resulting in an (approximately) levelized frequency. This defaults\nto False. Note that this feature may be applied to numerical label sets if\nthe processing applied to the set includes aggregated bins, such as for example\nby passing a label column to the 'exc3' category in assigncat for pass-through\nforce to numeric with inclusion of standard deviation bins or to 'exc4' for\ninclusion of powers of ten bins. For cases where labels are included in the\ntest set, this may also be passed as <em>'traintest'</em> to apply levelizing to both\ntrain and test sets or be passed as <em>'test'</em> to only apply levelizing to test set.</p>\n</li>\n<li>\n<p>powertransform: <em>(False/True/'excl'/'exc2')</em>, defaults to False, when passed as\nTrue an evaluation will be performed of distribution properties to select between\nbox-cox, z-score, min-max scaling, or mean absolute deviation scaling normalization\nof numerical data. Note that after application of box-cox transform child columns\nare generated for a subsequent z-score normalization. Please note that\nI don't consider the current means of distribution property evaluation highly\nsophisticated and we will continue to refine this method with further research\ngoing forward. Additionally, powertransform may be passed as values 'excl' or\n'exc2', where for 'excl' columns not explicitly assigned to a root category in\nassigncat will be left untouched, or for 'exc2' columns not explicitly assigned\nto a root category in assigncat will be forced to numeric and subject to default\nmodeinfill. (These two excl arguments may be useful if a user wants to experiment\nwith specific transforms on a subset of the columns without incurring processing\ntime of an entire set.) Note that powertransform not applied to label columns by\ndefault, but can still be applied by passing label column to ptfm in assigncat.</p>\n</li>\n<li>\n<p>binstransform: a boolean identifier <em>(True/False)</em> which indicates if all\ndefault numerical sets will receive bin processing such as to generate child\ncolumns with boolean identifiers for number of standard deviations from\nthe mean, with groups for values &lt;-2, -2-1, -10, 01, 12, and &gt;2. This value\ndefaults to False.</p>\n</li>\n<li>\n<p>MLinfill: a boolean identifier <em>(True/False)</em> which indicates if the ML\ninfill method will be applied as a default to predict infill for missing\nor improperly formatted data using machine learning models trained on the\nrest of the set. This defaults to False. Note that ML infill may alternatively\nbe assigned to distinct columns in assigninfill. Note that even if sets passed\nto automunge(.) have no points needing infill, when MLinfill is activated\nmachine learning models will still be trained for potential use of predicting\ninfill to subsequent data passed through the postmunge(.) function.</p>\n</li>\n<li>\n<p>infilliterate: an integer indicating how many applications of the ML\ninfill processing are to be performed for purposes of predicting infill.\nThe assumption is that for sets with high frequency of missing values\nthat multiple applications of ML infill may improve accuracy although\nnote this is not an extensively tested hypothesis. This defaults to 1.\nNote that due to the sequence of model training / application, a comparable\nset prepared in automunge and postmunge with this option may vary slightly in\noutput (as automunge(.) will train separate models on each iteration and\npostmunge will just apply the final model on each iteration).</p>\n</li>\n<li>\n<p>randomseed: a positive integer used as a seed for randomness throughout\nsuch as for data set shuffling, ML infill, and feature importance  algorithms.\nThis defaults to 42, a nice round number.</p>\n</li>\n<li>\n<p>LabelSmoothing_train / LabelSmoothing_test / LabelSmoothing_val: each of these\nparameters accept float values in range <em>0.0-1.0</em> or the default value of <em>False</em> to\nturn off. train is for the train set labels, test is for the test set labels, and\nval is for the validation set labels. Label Smoothing refers to the regularization\ntactic of transforming boolean encoded labels from 1/0 designations to some mix of\nreduced/increased threshold - for example passing the float 0.9 would result in the\nconversion from 1/0 to 0.9/#, where # is a function of the number of categories in\nthe label set - for example for a boolean label it would convert 1/0 to 0.9/0.1, or\nfor the one-hot encoding of a three label set it would convert 1/0 to 0.9/0.05.\nHat tip for the concept to \"Rethinking the Inception Architecture for Computer Vision\"\nby Szegedy et al. Note that I believe not all predictive library classifiers\nuniformly accept smoothed labels, but when available the method can at times be useful.\nNote that a user can pass <em>True</em> to either of LabelSmoothing_test / LabelSmoothing_val\nwhich will consistently encode to LabelSmoothing_train. Please note that if multiple\none-hot encoded transformations originate from the same labels source column, the\napplication of Label Smoothing will be applied to each set individually.</p>\n</li>\n<li>\n<p>LSfit: a <em>True/False</em> indication for basis of label smoothing parameters. The default\nof False means the assumption will be for level distribution of labels, passing True\nmeans any label smoothing will evaluate distribution of label activations such as to fit\nthe smoothing factor to specific cells based on the activated column and target column.\nThe LSfit parameters of transformations will be based on properties derived from the\ntrain set labels, such as for consistent encoding to the other sets (test or validation).</p>\n</li>\n<li>\n<p>numbercategoryheuristic: an integer used as a heuristic. When a\ncategorical set has more unique values than this heuristic, it defaults\nto categorical treatment via ordinal processing via 'ord3', otherwise\ncategorical sets default to binary encoding via '1010'. This defaults to 63.</p>\n</li>\n<li>\n<p>pandasoutput: a selector for format of returned sets. Defaults to <em>False</em>\nfor returned Numpy arrays. If set to <em>True</em> returns pandas dataframes\n(note that index is not always preserved, non-integer indexes are extracted to the ID sets,\nand automunge(.) generates an application specific range integer index in ID sets\ncorresponding to the order of rows as they were passed to function).</p>\n</li>\n<li>\n<p>NArw_marker: a boolean identifier <em>(True/False)</em> which indicates if the\nreturned sets will include columns with markers for rows subject to\ninfill (columns with suffix 'NArw'). This value defaults to False. Note\nthat the properties of cells qualifying as candidate for infill are based\non the 'NArowtype' of the root category of transformations associated with\nthe column, see Library of Transformations section below for catalog, the\nvarious NArowtype options are also further clarified below in discussion\naround the processdict parameter.</p>\n</li>\n<li>\n<p>featureselection: a boolean identifier <em>(True/False)</em> telling the function\nto perform a feature importance evaluation. If selected automunge will\nreturn a summary of feature importance findings in the featureimportance\nreturned dictionary. This also activates the trimming of derived sets\nthat did not meet the importance threshold if [featurepct &lt; 1.0 and\nfeaturemethod = 'pct'] or if [fesaturemetric &gt; 0.0 and featuremethod =\n'metric']. Note this defaults to False because it cannot operate without\na designated label column in the train set. (Note that any user-specified\nsize of validationratios if passed are used in this method, otherwise\ndefaults to 0.2.) Note that sorted feature importance results are returned\nin postprocess_dict['FS_sorted'], including columns sorted by metric and metric2.</p>\n</li>\n<li>\n<p>featurepct: the percentage of derived sets that are kept in the output\nbased on the feature importance evaluation. Accepts float in the range 0-1.\nNote that NArw columns are only retained for those sets corresponding to\ncolumns that \"made the cut\". This item only used if featuremethod passed as\n'pct'.</p>\n</li>\n<li>\n<p>featuremetric: the feature importance metric below which derived sets\nare trimmed from the output. Note that this item only used if\nfeaturemethod passed as 'metric'.</p>\n</li>\n<li>\n<p>featuremethod: can be passed as one of <em>{'pct', 'metric', 'default',</em>\n<em>'report'}</em> where 'pct' or 'metric' to select which feature importance method\nis used for trimming the derived sets as a form of dimensionality reduction.\nOr can pass as 'default' for ignoring the featurepct/featuremetric parameters\nor can pass as 'report' to return the featureimportance results with no further\nprocessing (other returned sets are empty). Defaults to 'default'.</p>\n</li>\n<li>\n<p>Binary: a dimensionality reduction technique whereby the set of columns\nwith binary encodings are collectively encoded with binary encoding such\nas may drastically reduce the column count. This has many benefits such as\nmemory bandwidth and energy cost for inference I suspect, however, there\nmay be tradeoffs associated with ability of the model to handle outliers,\nas for any new combination of boolean set in the test data the collection\nwill be subject to the infill. Pass <em>True</em> to activate, defaults to <em>False</em>.\n(For now also requires passing parameter excl_suffix = True.) Note that\ncan also be passed as <em>'retain'</em> to retain the boolean columns that served\nas basis for encoding.</p>\n</li>\n<li>\n<p>PCAn_components: defaults to <em>None</em> for no PCA dimensionality reduction performed\n(other than based on the automatic PCA application based on ratio of columns and\nrows - see ML_cmnd if you want to turn that off). A user can pass <em>an integer</em> to\ndefine the number of PCA derived features for purposes of dimensionality\nreduction, such integer to be less than the otherwise returned number of sets.\nFunction will default to kernel PCA for all non-negative sets or otherwise Sparse PCA.\nAlso if this value is passed as a <em>float &lt;1.0</em> then linear PCA will be applied such\nthat the returned number of sets are the minimum number that can reproduce that\npercent of the variance. Note this can also be passed in conjunction with assigned\nPCA type or parameters in the ML_cmnd object.</p>\n</li>\n<li>\n<p>PCAexcl: a <em>list</em> of column headers for columns that are to be excluded from\nany application of PCA</p>\n</li>\n<li>\n<p>excl_suffix: boolean selector <em>{True, False}</em> for whether columns headers from 'excl'\ntransform are returned with suffix appender '_excl' included. Defaults to False for\nno suffix.</p>\n</li>\n<li>\n<p>ML_cmnd:</p>\n</li>\n</ul>\n<pre><code>ML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{}, 'RandomForestRegressor':{}}, \\\n           'PCA_type':'default', \\\n           'PCA_cmnd':{}}, \\\n</code></pre>\n<p>The ML_cmnd allows a user to pass parameters to the predictive algorithms\nused for ML infill / feature importance evaluation or PCA. Currently the only\noption for 'MLinfill_type' is default which uses Scikit-learn's Random\nForest implementation, the intent is to add other options in a future extension.\nFor example, a user who doesn't mind a little extra training time for ML infill\ncould increase the passed n_estimators beyond the scikit default of 100.</p>\n<pre><code>ML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'n_estimators':1000}, \\\n                            'RandomForestRegressor':{'n_estimators':1000}}, \\\n           'PCA_type':'default', \\\n           'PCA_cmnd':{}}, \\\n\n</code></pre>\n<p>A user can also perform hyperparameter tuning of the parameters passed to the\npredictive algorithms by instead of passing distinct values passing lists or\nrange of values. The hyperparameter tuning defaults to grid search for cases\nwhere user passes parameters as lists or ranges, for example:</p>\n<pre><code>ML_cmnd = {'MLinfill_type':'default', \\\n           'hyperparam_tuner':'gridCV', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'max_depth':range(4,6)}, \\\n                            'RandomForestRegressor' :{'max_depth':[3,6,12]}}}\n</code></pre>\n<p>A user can also perform randomized search via ML_cmnd, and pass parameters as\ndistributions via scipy stats module such as:</p>\n<pre><code>ML_cmnd = {'MLinfill_type'    : 'default', \\\n           'hyperparam_tuner' : 'randomCV', \\\n           'randomCV_n_iter'  : 15, \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{'max_depth':stats.randint(3,6)}, \\\n                            'RandomForestRegressor' :{'max_depth':[3,6,12]}}}\n</code></pre>\n<p>A user can also assign specific methods for PCA transforms. Current PCA_types\nsupported include 'PCA', 'SparsePCA', and 'KernelPCA', all via Scikit-Learn.\nNote that the n_components are passed separately with the PCAn_components\nargument noted above. A user can also pass parameters to the PCA functions\nthrough the PCA_cmnd, for example one could pass a kernel type for KernelPCA\nas:</p>\n<pre><code>ML_cmnd = {'MLinfill_type':'default', \\\n           'MLinfill_cmnd':{'RandomForestClassifier':{}, \\\n                            'RandomForestRegressor':{}}, \\\n           'PCA_type':'KernelPCA', \\\n           'PCA_cmnd':{'kernel':'sigmoid'}}, \\\n\n</code></pre>\n<p>Note that the PCA is currently defaulted to active for cases where the\ntrain set number of features is &gt;0.50 the number of rows. A user can\nchange this ratio by passing 'PCA_cmnd':{'col_row_ratio':0.22}} for\ninstance. Also a user can simply turn off default PCA transforms by\npassing 'PCA_cmnd':{'PCA_type':'off'}. A user can also exclude returned\nboolean (0/1) columns from any PCA application by passing\n'PCA_cmnd':{'bool_PCA_excl':True}\nor exclude returned boolean and ordinal columns from PCA application by\n'PCA_cmnd':{'bool_ordl_PCAexcl':True}\nsuch as could potentially result in memory savings.</p>\n<ul>\n<li>assigncat:</li>\n</ul>\n<pre><code>#Here are the current transformation options built into our library, which\n#we are continuing to build out. A user may also define their own.\n\nassigncat = {'nmbr':[], 'retn':[], 'mnmx':[], 'mean':[], 'MAD3':[], 'lgnm':[], \\\n             'bins':[], 'bsor':[], 'pwr2':[], 'por2':[], 'bxcx':[], \\\n             'addd':[], 'sbtr':[], 'mltp':[], 'divd':[], \\\n             'log0':[], 'log1':[], 'logn':[], 'sqrt':[], 'rais':[], 'absl':[], \\\n             'bnwd':[], 'bnwK':[], 'bnwM':[], 'bnwo':[], 'bnKo':[], 'bnMo':[], \\\n             'bnep':[], 'bne7':[], 'bne9':[], 'bneo':[], 'bn7o':[], 'bn9o':[], \\\n             'bkt1':[], 'bkt2':[], 'bkt3':[], 'bkt4':[], \\\n             'nbr2':[], 'nbr3':[], 'MADn':[], 'MAD2':[], 'tlbn':[], \\\n             'mnm2':[], 'mnm3':[], 'mnm4':[], 'mnm5':[], 'mnm6':[], \\\n             'mea2':[], 'mea3':[], 'bxc2':[], 'bxc3':[], 'bxc4':[], \\\n             'dxdt':[], 'd2dt':[], 'd3dt':[], 'dxd2':[], 'd2d2':[], 'd3d2':[], \\\n             'nmdx':[], 'nmd2':[], 'nmd3':[], 'mmdx':[], 'mmd2':[], 'mmd3':[], \\\n             'bnry':[], 'text':[], 'txt2':[], 'txt3':[], '1010':[], 'or10':[], \\\n             'ordl':[], 'ord2':[], 'ord3':[], 'ord4':[], 'om10':[], 'mmor':[], \\\n             'Utxt':[], 'Utx2':[], 'Utx3':[], 'Uor3':[], 'Uor6':[], 'U101':[], \\\n             'splt':[], 'spl2':[], 'spl3':[], 'spl4':[], 'spl5':[], 'lngt':[], \\\n             'spl7':[], 'spl8':[], 'spl9':[], 'sp10':[], 'srch':[], 'src2':[], \\\n             'nmrc':[], 'nmr2':[], 'nmr3':[], 'nmcm':[], 'nmc2':[], 'nmc3':[], \\\n             'nmr7':[], 'nmr8':[], 'nmr9':[], 'nmc7':[], 'nmc8':[], 'nmc9':[], \\\n             'ors2':[], 'ors5':[], 'ors6':[], 'ors7':[], 'ucct':[], 'Ucct':[], \\\n             'or11':[], 'or12':[], 'or15':[], 'or17':[], 'or19':[], 'or20':[], \\\n             'date':[], 'dat2':[], 'dat6':[], 'wkdy':[], 'bshr':[], 'hldy':[], \\\n             'wkds':[], 'wkdo':[], 'mnts':[], 'mnto':[], \\\n             'yea2':[], 'mnt2':[], 'mnt6':[], 'day2':[], 'day5':[], \\\n             'hrs2':[], 'hrs4':[], 'min2':[], 'min4':[], 'scn2':[], \\\n             'excl':[], 'exc2':[], 'exc3':[], 'exc4':[], 'exc5':[], 'exc6':[], \\\n             'null':[], 'copy':[], 'shfl':[], 'eval':[], 'ptfm':[]}\n</code></pre>\n<p>Descriptions of these transformations are provided in document below (in section\ntitled \"Library of Transformations\").</p>\n<p>A user may add column header identifier strings to each of these lists to assign\na distinct specific processing approach to any column (including labels). Note\nthat this processing category will serve as the \"root\" of the tree of transforms\nas defined in the transformdict. Note that additional categories may be passed if\ndefined in the passed transformdict and processdict. An example of usage here\ncould be if a user wanted to only process numerical columns 'nmbrcolumn1' and\n'nmbrcolumn2' with z-score normalization instead of the full range of numerical\nderivations when implementing the binstransform parameter they could pass</p>\n<pre><code>assigncat = {'nbr2':['nmbrcolumn1', 'nmbrcolumn2']}\n</code></pre>\n<p>Note that for single entry column assignments a user can just pass the string or integer\nof the column header without the list brackets.</p>\n<ul>\n<li>assigninfill</li>\n</ul>\n<pre><code>#Here are the current infill options built into our library, which\n#we are continuing to build out.\nassigninfill = {'stdrdinfill':[], 'MLinfill':[], 'zeroinfill':[], 'oneinfill':[], \\\n                'adjinfill':[], 'meaninfill':[], 'medianinfill':[], \\\n                'modeinfill':[], 'lcinfill':[]}, \\\n</code></pre>\n<p>A user may add column identifier strings to each of these lists to designate the\ncolumn-specific infill approach for missing or improperly formatted values. The\nsource column identifier strings may be passed for assignment of common infill\napproach to all columns derived from same source column, or derived column identifier\nstrings (including the suffix appenders from transformations) may be passed to assign\ninfill approach to a specific derived column. Note that passed derived column headers\ntake precedence in case of overlap with passed source column headers. Note that infill\ndefaults to MLinfill if nothing assigned and the MLinfill argument to automunge is set\nto True. Note that for single entry column assignments a user can just pass the string\nor integer of the column header without the list brackets.</p>\n<pre><code>#  - stdrdinfill  : the default infill specified in the library of transformations for \n#                   each transform below. \n#  - MLinfill     : for MLinfill to distinct columns when MLinfill parameter not activated\n#  - zeroinfill   : inserting the integer 0 to missing cells. \n#  - oneinfill    : inserting the integer 1. \n#  - adjinfill    : passing the value from the preceding row to missing cells. \n#  - meaninfill   : inserting the mean derived from the train set to numeric columns. \n#  - medianinfill : inserting the median derived from the train set to numeric columns. \n#                   (Note currently boolean columns derived from numeric are not supported \n#                   for mean/median and for those cases default to those infill from stdrdinfill.) \n#  - modeinfill   : inserting the most common value for a set, note that modeinfill \n#                   supports multi-column boolean encodings, such as one-hot encoded sets or \n#                   binary encoded sets. \n#  - lcinfill     : comparable to modeinfill but with least common value instead of most. \n\n#an example of passing columns to assign infill via assigninfill:\n#for source column 'column1', which hypothetically is returned through automunge(.) as\n#'column1_nmbr', 'column1_mnmx', 'column1_bxcx_nmbr'\n#we can assign MLinfill to 'column1_bxcx_nmbr' and meaninfill to the other two by passing \n#to an automunge call: \n\nassigninfill = {'MLinfill':['column1_bxcx_nmbr'], 'meaninfill':['column1']}\n</code></pre>\n<p>Please note that support of assigninfill to label columns is intended as a future extension.</p>\n<ul>\n<li>assignparam\nA user may pass column-specific parameters to those transformation functions\nthat accept parameters. Any parameters passed to automunge(.) will be saved in\nthe postprocess_dict and consistently applied in postmunge(.). assignparam is\na dictionary that should be formatted per following example:</li>\n</ul>\n<pre><code>#template:\nassignparam = {'default_assignparam' : {'(category)' : {'(parameter)' : 42}}, \\\n                        '(category)' : {'(column)'   : {'(parameter)' : 42}}}, \\\n\n#example:\nassignparam = {'category1' : {'column1' : {'param1' : 123}, 'column2' : {'param1' : 456}}, \\\n               'cateogry2' : {'column3' : {'param2' : 'abc', 'param3' : 'def'}}}\n\n#In other words:\n#The first layer keys are the transformation category for which parameters are intended\n#The second layer keys are string identifiers for the columns for which the parameters are intended\n#The third layer keys are the parameters whose values are to be passed.\n\n#As an example with actual parameters, consider the transformation category 'splt' intended for 'column1',\n#which accepts parameter 'minsplit' for minimum character length of detected overlaps. If we wanted to\n#pass 4 instead of the default of 5:\nassignparam = {'splt' : {'column1' : {'minsplit' : 4}}\n\n#Note that the category identifier should be the category entry to the family tree primitive associated\n#with the transform, which may be different than the root category of the family tree assigned in assigncat.\n#The set of family trees definitions for root categories are included below for reference.\n\n#Note that column string identifiers may just be the source column string or may include the\n#suffix appenders such as if multiple versions of transformations are applied within the same family tree\n#If more than one column identifier matches a column, the longest character length key which matches\n#will be applied (such as may include suffix appenders).\n\n#Note that if a user wishes to overwrite the default parameters for all columns without specifying\n#them individually they can pass a 'default_assignparam' entry as follows (this only overwrites those \n#parameters that are not otherwise specified in assignparam)\nassignparam = {'category1' : {'column1' : {'param1' : 123}, 'column2' : {'param1' : 456}}, \\\n               'cateogry2' : {'column3' : {'param2' : 'abc', 'param3' : 'def'}}, \\\n               'default_assignparam' : {'category3' : {'param4' : 789}}}\n\n</code></pre>\n<p>See the Library of Transformations section below for those transformations that accept parameters.</p>\n<ul>\n<li>transformdict: allows a user to pass a custom tree of transformations.\nNote that a user may define their own (traditionally 4 character) string \"root\"\nidentifiers for a series of processing steps using the categories of processing\nalready defined in our library and then assign columns in assigncat, or for\ncustom processing functions this method should be combined with processdict\nwhich is only slightly more complex. For example, a user wishing to define a\nnew set of transformations for numerical series 'newt' that combines NArows,\nmin-max, box-cox, z-score, and standard deviation bins could do so by passing a\ntrasnformdict as:</li>\n</ul>\n<pre><code>transformdict =  {'newt' : {'parents' : ['bxc4'], \\\n                            'siblings': [], \\\n                            'auntsuncles' : ['mnmx'], \\\n                            'cousins' : ['NArw'], \\\n                            'children' : [], \\\n                            'niecesnephews' : [], \\\n                            'coworkers' : [], \\\n                            'friends' : []}}\n\n#Where since bxc4 is passed as a parent, this will result in pulling\n#offspring keys from the bxc4 family tree, which has a nbr2 key as children.\n\n#from automunge library:\n    transform_dict.update({'bxc4' : {'parents' : ['bxcx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : ['NArw'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n#note that 'nbr2' is passed as a coworker primitive meaning no downstream \n#primitives would be accessed from the nbr2 family tree. If we wanted nbr2 to\n#incorporate any offspring from the nbr2 tree we could instead assign as children\n#or niecesnephews.\n\n</code></pre>\n<p>Basically here 'newt' is the key and when passed to one of the family primitives\nthe corresponding process function is applied, and if it is passed to a family\nprimitive with downstream offspring then those offspring keys are pulled from\nthat key's family tree. For example, here mnmx is passed as an auntsuncles which\nmeans the mnmx processing function is applied with no downstream offspring. The\nbxcx key is passed as a parent which means the bxcx transform is applied coupled\nwith any downstream transforms from the bxcx key family tree, which we also show.\nNote the family primitives tree of transformations can be summarized as:</p>\n<pre><code>'parents' :           upstream / first generation / replaces column / with offspring\n'siblings':           upstream / first generation / supplements column / with offspring\n'auntsuncles' :       upstream / first generation / replaces column / no offspring\n'cousins' :           upstream / first generation / supplements column / no offspring\n'children' :          downstream parents / offspring generations / replaces column / with offspring\n'niecesnephews' :     downstream siblings / offspring generations / supplements column / with offspring\n'coworkers' :         downstream auntsuncles / offspring generations / replaces column / no offspring\n'friends' :           downstream cousins / offspring generations / supplements column / no offspring\n</code></pre>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b80dbf9794aec42491b4a29be60ffba6c32bb1f/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34343031313734382f37363438353333312d61326132343338302d363366322d313165612d383535392d3038626231633362653339352e706e67\"></p>\n<p>Note that a user should avoid redundant entries across a set of upstream or downstream primitives.\nSince there is recursion involved a user should be careful of creating infinite loops from passing\ndownstream primitive entries with offspring whose own offspring coincide with an earlier generation.\n(The presence of infinite loops is tested for to a max depth of 111 offspring, an arbitrary figure.)</p>\n<p>Note that when we define a new transform such as 'newt' above, we also need\nto define a corresponding processdict entry for the new category, which we\ndemonstrate here:</p>\n<ul>\n<li>processdict: allows a user to define their own processing functions\ncorresponding to new transformdict keys. We'll describe the entries here:</li>\n</ul>\n<pre><code>#for example \nprocessdict =  {'newt' : {'dualprocess' : None, \\\n                          'singleprocess' : None, \\\n                          'postprocess' : None, \\\n                          'NArowtype' : 'numeric', \\\n                          'MLinfilltype' : 'numeric', \\\n                          'labelctgy' : 'mnmx'}}\n\n#A user should pass either a pair of processing functions to both \n#dualprocess and postprocess, or alternatively just a single processing\n#function to singleprocess, and pass None to those not used.\n#For now, if just using the category as a root key and not as a family primitive, \n#can simply pass None to all the processing slots. We'll demonstrate their \n#composition and data structures for custom processing functions later in the\n#section of this document \"Custom Processing Functions\".\n\n#dualprocess: for passing a processing function in which normalization \n#             parameters are derived from properties of the training set\n#             and jointly process the train set and if available test set\n\n#singleprocess: for passing a processing function in which no normalization\n#               parameters are needed from the train set to process the\n#               test set, such that train and test sets processed separately\n\n#postprocess: for passing a processing function in which normalization \n#             parameters originally derived from the train set are applied\n#             to seperately process a test set\n\n#NArowtype: can be entries of {'numeric', 'integer', 'justNaN', 'exclude', \n#                              'positivenumeric', 'nonnegativenumeric', \n#                              'nonzeronumeric', 'parsenumeric', 'parsenumeric_commas', \n#                              'datetime'}\n# - 'numeric' for source columns with expected numeric entries\n# - 'integer' for source columns with expected integer entries\n# - 'justNaN' for source columns that may have expected entries other than numeric\n# - 'exclude' for source columns that aren't needing NArow columns derived\n# - 'positivenumeric' for source columns with expected positive numeric entries\n# - 'nonnegativenumeric' for source columns with expected non-negative numeric (zero allowed)\n# - 'nonzeronumeric' for source columns with allowed positive and negative but no zero\n# - 'parsenumeric' marks for infill strings that don't contain any numeric character entries\n# - 'parsenumeric_commas' marks for infill strings that don't contain any numeric character \n#                         entries, recognizes commas\n# - 'datetime' marks for infill cells that aren't recognized as datetime objects\n# ** Note that NArowtype also is used as basis for metrics evaluated in drift assessment of source columns\n# ** Note that by default any np.inf values are converted to NaN for infill\n\n#MLinfilltype: can be entries {'numeric', 'singlct', 'binary', 'multirt', 'multisp', '1010',\n#                              'exclude', 'boolexclude'}\n#              'numeric' refers to columns where predictive algorithms treat\n#                        as a regression for numeric sets\n#              'singlct' single column sets with ordinal entries (integers)\n#              'binary'  single column sets with boolean entries (0/1)\n#              'multirt' refers to category returning multiple columns where \n#                        predictive algorithms treat as a multi modal classifier\n#              'multisp' for bins multicolumn sets with boolean entries\n#                        (similar to multirt but treated differently in levelizer)\n#              '1010'   for multicolumn sets with binary encoding via 1010\n#                        will be converted to onehot for ML\n#              'exclude' for columns which will be excluded from ML infill\n#              'boolexclude' boolean set suitable for Binary transform but excluded from all infill (eg NArw entries)\n\n#labelctgy: should be a string entry of a single transform category found as an entry in the root category's family \n#tree. Used to determine a basis of feature selection for cases where labels are returned in multiple configurations.\n#Also used in label frequency levelizer.\n\n</code></pre>\n<ul>\n<li>evalcat: modularizes the automated evaluation of column properties for assignment\nof root transformation categories, allowing user to pass custom functions for this\npurpose. Passed functions should follow format:</li>\n</ul>\n<pre><code>def evalcat(df, column, numbercategoryheuristic, powertransform, labels = False):\n  \"\"\"\n  #user defined function that takes as input a dataframe df and column id string column\n  #evaluates the contents of cells and classifies the column for root category of \n  #transformation (e.g. comparable to categories otherwise assigned in assigncat)\n  #returns category id as a string\n  \"\"\"\n  ...\n  return category\n</code></pre>\n<p>And could then be passed to automunge function call such as:</p>\n<pre><code>evalcat = evalcat\n</code></pre>\n<p>I recommend using the evalcategory function defined in master file as starting point.\n(Minus the 'self' parameter since defining external to class.) Note that the\nparameters numbercategoryheuristic, powertransform, and labels are passed as user\nparameters in automunge(.) call and only used in evalcategory function, so if user wants\nto repurpose them totally can do so. (They default to 63, False, False.) Note evalcat\ndefaults to False to use built-in evalcategory function. Note evalcat will only be\napplied to columns not assigned in assigncat. (Note that columns assigned to 'eval' / 'ptfm'\nin assigncat will be passed to this function for evaluation with powertransform = False / True\nrespectively.)</p>\n<ul>\n<li>printstatus: user can pass <em>True/False</em> indicating whether the function will print\nstatus of processing during operation. Defaults to True.</li>\n</ul>\n<p>Ok well we'll demonstrate further below how to build custom processing functions,\nfor now this just gives you sufficient tools to build sets of processing using\nthe built in sets in the library.</p>\n<p>...</p>\n<h1>postmunge(.)</h1>\n<p>The postmunge(.) function is intended to consistently prepare subsequently available\nand consistently formatted train or test data with just a single function call. It\nrequires passing the postprocess_dict object returned from the original application\nof automunge and that the passed test data have consistent column header labeling as\nthe original train set (or for Numpy arrays consistent order of columns). Processing\ndata with postmunge(.) is considerably more efficient than automunge(.) since it does\nnot require the overhead of the evaluation methods, the derivation of transformation\nnormalization parameters, and/or the training of models for ML infill.</p>\n<pre><code>\n#for postmunge(.) function to prepare subsequently available data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#Remember to initialize automunge\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n\n#Then we can run postmunge function as:\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n</code></pre>\n<p>Or to run postmunge(.) with default parameters we simply need the postprocess_dict\nobject returned from the corresponding automunge(.) call and a consistently formatted\nadditional data set.</p>\n<pre><code>test, testID, testlabels, \\\nlabelsencoding_dict, postreports_dict \\\n= am.postmunge(postprocess_dict, df_test)\n</code></pre>\n<h2>postmunge(.) returned sets:</h2>\n<p>Here now are descriptions for the returned sets from postmunge, which\nwill be followed by descriptions of the arguments which can be passed to\nthe function.</p>\n<ul>\n<li>\n<p>test: the set of features, consistently encoded and normalized as the\ntraining data, that can be used to generate predictions from a model\ntrained with the train set from automunge.</p>\n</li>\n<li>\n<p>testID: the set of ID values corresponding to the test set. Also included\nin this set is a derived column titled 'Automunge_index_#' (where # is a\n12 digit number stamp specific to original automunge(.) function call),\nthis column serves as an index identifier for order of rows as they were\nreceived in passed data, such as may be beneficial when data is shuffled.</p>\n</li>\n<li>\n<p>testlabels: a set of numerically encoded labels corresponding to the\ntest set if a label column was passed. Note that the function\nassumes the label column is originally included in the train set. Note\nthat if the labels set is a single column a returned numpy array is\nflattened (e.g. [[1,2,3]] converted to [1,2,3] )</p>\n</li>\n<li>\n<p>labelsencoding_dict: this is the same labelsencoding_dict returned from\nautomunge, it's used in case one wants to reverse encode predicted labels</p>\n</li>\n<li>\n<p>finalcolumns_test: a list of the column headers corresponding to the\ntest data. Note that the inclusion of suffix appenders is used to\nidentify which feature engineering transformations were applied to each\ncolumn. Note that this list should match the one from automunge.</p>\n</li>\n<li>\n<p>postreports_dict: a dictionary containing entries for following:</p>\n<ul>\n<li>postreports_dict['featureimportance']: results of optional feature\nimportance evaluation based on parameter featureeval. (See automunge(.)\nnotes above for feature importance printout methods.)</li>\n<li>postreports_dict['finalcolumns_test']: list of columns returned from\npostmunge</li>\n<li>postreports_dict['driftreport']: results of optional drift report\nevaluation tracking properties of postmunge data in comparison to the\noriginal data from automunge call associated with the postprocess_dict\npresumably used to train a model. Results aggregated by entries for the\noriginal (pre-transform) list of columns, and include the normalization\nparameters from the automunge call saved in postprocess_dict as well\nas the corresponding parameters from the new data consistently derived\nin postmunge</li>\n<li>postreports_dict['sourcecolumn_drift']: results of optional drift report\nevaluation tracking properties of postmunge data derived from source\ncolumns in comparison to the original data from automunge(.) call associated\nwith the postprocess_dict presumably used to train a model.</li>\n</ul>\n</li>\n</ul>\n<pre><code>#the results of a postmunge driftreport assessment are returned in the postreports_dict \n#object returned from a postmunge call, as follows:\n\npostreports_dict = \\\n{'featureimportance':{(not shown here for brevity)},\n'finalcolumns_test':[(derivedcolumns)],\n'driftreport': {(sourcecolumn) : {'origreturnedcolumns_list':[(derivedcolumns)], \n                           'newreturnedcolumns_list':[(derivedcolumns)],\n                           'drift_category':(category),\n                           'orignotinnew': {(derivedcolumn):{'orignormparam':{(stats)}},\n                           'newnotinorig': {(derivedcolumn):{'newnormparam':{(stats)}},\n                           'newreturnedcolumn':{(derivedcolumn):{'orignormparam':{(stats)},\n                                                                 'newnormparam':{(stats)}}}},\n'sourcecolumn_drift': {'orig_driftstats': {(sourcecolumn) : (stats)}, \n                       'new_driftstats' : {(sourcecolumn) : (stats)}}}\n\n#the driftreport stats for derived columns are based on the normalization_dict entries from the\n#corresponding processing function associated with that column's derivation\n\n#here is an example of source column drift assessment statistics for a positive numeric root category:\npostreports_dict['sourcecolumn_drift']['new_driftstats'] = \\\n{(sourcecolumn) : {'max'         : (stat),\n                   'quantile_99' : (stat),\n                   'quantile_90' : (stat),\n                   'quantile_66' : (stat),\n                   'median'      : (stat),\n                   'quantile_33' : (stat),\n                   'quantile_10' : (stat),\n                   'quantile_01' : (stat),\n                   'min'         : (stat),\n                   'mean'        : (stat),\n                   'std'         : (stat),\n                   'MAD'         : (stat),\n                   'skew'        : (stat),\n                   'shapiro_W'   : (stat),\n                   'shapiro_p'   : (stat),\n                   'nonpositive_ratio' : (stat),\n                   'nan_ratio'   : (stat)}} \n</code></pre>\n<p>...</p>\n<h2>postmunge(.) passed parameters</h2>\n<pre><code>\n#for postmunge(.) function on subsequently available test data\n#using the postprocess_dict object returned from original automunge(.) application\n\n#Remember to initialize automunge\nfrom Automunge import Automunger\nam = Automunger.AutoMunge()\n\n\n#Then we can run postmunge function as:\n\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_test = \\\nam.postmunge(postprocess_dict, df_test, \\\n             testID_column = False, labelscolumn = False, \\\n             pandasoutput = False, printstatus = True, \\\n             TrainLabelFreqLevel = False, featureeval = False, driftreport = False, \\\n             LabelSmoothing = False, LSfit = False, \\\n             returnedsets = True, shuffletrain = False)\n</code></pre>\n<ul>\n<li>\n<p>postprocess_dict: this is the dictionary returned from the initial\napplication of automunge(.) which included normalization parameters to\nfacilitate consistent processing of additional train or test data to the\noriginal processing of the train set. This requires a user to remember\nto download the dictionary at the original application of automunge,\notherwise if this dictionary is not available a user can feed this\nsubsequent test data to the automunge along with the original train data\nexactly as was used in the original automunge(.) call.</p>\n</li>\n<li>\n<p>df_test: a pandas dataframe or numpy array containing a structured\ndataset intended for use to generate predictions from a machine learning\nmodel trained from the automunge returned sets. The set must be consistently\nformatted as the train set with consistent order of columns and if labels are\nincluded consistent labels. If desired the set may include an ID column. The\ntool supports the inclusion of non-index-range column as index or multicolumn\nindex (requires named index columns). Such index types are added to the\nreturned \"ID\" sets which are consistently shuffled and partitioned as the\ntrain and test sets.</p>\n</li>\n<li>\n<p>testID_column: a string of the column title for the column from the\ndf_test set intended for use as a row identifier value (such as could be\nsequential numbers for instance). The function defaults to False for\ncases where the training set does not include an ID column. A user can\nalso pass a list of string columns titles such as to carve out multiple\ncolumns to be excluded from processing but consistently shuffled and\npartitioned. An integer column index or list of integer column indexes\nmay also be passed such as if the source dataset was a numpy array.</p>\n</li>\n<li>\n<p>labelscolumn: default to <em>False</em> indicates that a labels column is not\nincluded in the test set passed to postmunge. A user can either pass\n<em>True</em> or the string ID of the labels column, noting that it is a requirement\nthat the labels column header string must be consistent with that from\nthe original train set. An integer column index may also be passed such\nas if the source dataset was a numpy array. A user should take care to set\nthis parameter if they are passing data with labels. Note that True signals\npresence of consistent labels column header as was passed to automunge(.).</p>\n</li>\n<li>\n<p>pandasoutput: a selector for format of returned sets. Defaults to <em>False</em>\nfor returned Numpy arrays. If set to <em>True</em> returns pandas dataframes\n(note that index is not always preserved, non-integer indexes are extracted\nto the ID sets, and automunge(.) generates an application specific range\ninteger index in ID sets corresponding to the order of rows as they were\npassed to function).</p>\n</li>\n<li>\n<p>printstatus: user can pass <em>True/False</em> indicating whether the function\nwill print status of processing during operation. Defaults to True.</p>\n</li>\n<li>\n<p>TrainLabelFreqLevel: a boolean identifier <em>(True/False)</em> which indicates\nif the TrainLabelFreqLevel method will be applied to oversample test\ndata associated with underrepresented labels. The method adds multiples\nto test data rows for those labels with lower frequency resulting in\nan (approximately) levelized frequency. This defaults to False. Note that\nthis feature may be applied to numerical label sets if the assigncat processing\napplied to the set in automunge(.) had included standard deviation bins, such\nas for example 'exc3' for pass-through numeric with standard deviation bins,\nor 'exc4' for pass-through numeric with powers of ten bins. Note this\nmethod requires the inclusion of a designated label column.</p>\n</li>\n<li>\n<p>featureeval: a boolean identifier <em>(True/False)</em> to activate a feature\nimportance evaluation, comparable to one performed in automunge but based\non the test set passed to postmunge. The results are returned in the\npostreports_dict object returned from postmunge as postreports_dict['featureimportance'].\nThe results will also be printed out if printstatus is activated.  Note that sorted\nfeature importance results are returned in postreports_dict['FS_sorted'], including\ncolumns sorted by metric and metric2.</p>\n</li>\n<li>\n<p>driftreport: activates a drift report evaluation, in which the normalization\nparameters are recalculated for the columns of the test data passed to postmunge\nfor comparison to the original normalization parameters derived from the corresponding\ncolumns of the automunge train data set. The results are returned in the\npostreports_dict object returned from postmunge as postreports_dict['driftreport'].\nThe results will also be printed out if printstatus is activated. Defaults to <em>False</em>, and:</p>\n<ul>\n<li><em>False</em> means no postmunge drift assessment is performed</li>\n<li><em>True</em> means an assessment is performed for both the source column and derived column\nstats</li>\n<li><em>'efficient'</em> means that a postmunge drift assessment is only performed on the source\ncolumns (less information but much more energy efficient)</li>\n<li><em>'report_effic'</em> means that the efficient assessment is performed and returned with\nno processing of data</li>\n<li><em>'report_full'</em> means that the full assessment is performed and returned with no\nprocessing of data</li>\n</ul>\n</li>\n<li>\n<p>LabelSmoothing: accepts float values in range 0.0-1.0 or the default value of <em>False</em>\nto turn off Label Smoothing. Note that a user can pass <em>True</em> to LabelSmoothing which\nwill consistently encode to LabelSmoothing_train from the corresponding automunge(.)\ncall, including any application of LSfit based on parameters of transformations\nderived from the train set labels.</p>\n</li>\n<li>\n<p>LSfit: a <em>True/False</em> indication for basis of label smoothing parameter K. The default\nof False means the assumption will be for level distribution of labels, passing True\nmeans any label smoothing will evaluate distribution of label activations such as to fit\nthe smoothing factor to specific cells based on the activated column and target column.\nNote that if LabelSmoothing passed as True the LSfit will be based on the basis from\nthe corresponding automunge(.) call (will override the one passed to postmunge).</p>\n</li>\n<li>\n<p>returnedsets: Can be passed as one of _{True, False, 'test_ID', _\n<em>'test_labels', 'test_ID_labels'}</em>. Designates the composition of the sets returned\nfrom a postmunge(.) call. Defaults to True for the full composition of five returned sets.\nWith other options postmunge(.) only returns a single set, where for False that set consists\nof the test set, or for the other options returns the test set concatenated with the ID,\nlabels, or both. For example:</p>\n</li>\n</ul>\n<pre><code>#in default of returnedsets=True, postmunge(.) returns five sets, such as this call:\ntest, testID, testlabels, \\\nlabelsencoding_dict, finalcolumns_test = \\\nam.postmunge(postprocess_dict, df_test, returnedsets = True)\n\n#for other returnedset options, postmunge(.) returns just a single set, the test set:\ntest = \\\nam.postmunge(postprocess_dict, df_test, returnedsets = False)\n\n#Note that if you want to access the column labels for an appended ID or labels set,\n#They can be accessed in the postprocess_dict under entries for \npostprocess_dict['finalcolumns_labels']\npostprocess_dict['finalcolumns_trainID']\n</code></pre>\n<ul>\n<li>shuffletrain: can be passed as one of <em>{True, False}</em> which indicates if the rows in\nthe returned sets will be (consistently) shuffled. This value defaults to False.</li>\n</ul>\n<h2>Default Transformations</h2>\n<p>When root categories of transformations are not assigned for a given column in\nassigncat, automunge performs an evaluation of data properties to infer\nappropriate means of feature engineering and numerical encoding. The default\ncategories of transformations are as follows:</p>\n<ul>\n<li>nmbr: for numerical data, columns are treated with z-score normalization. If\nbinstransform parameter was activated this will be supplemented by a collection\nof bins indicating number of standard deviations from the mean.</li>\n<li>1010: for categorical data, columns are subject to binary encoding. If the\nnumber of unique entries in the column exceeds the parameter 'numbercategoryheuristic'\n(which defaults to 63), the encoding will instead be by 'ord3' which is an ordinal\n(integer) encoding sorted by most common value. Note that numerical sets with 3\nunique values in train set default to categorical encoding via 'text'.</li>\n<li>ord3: for categorical data, if the number of unique entries in the column exceeds\nthe parameter 'numbercategoryheuristic' (which defaults to 63), the encoding will\ninstead be by 'ord3' which is an ordinal (integer) encoding sorted by most common value.</li>\n<li>text: for categorical data of 3 unique values excluding infill (eg NaN), the\ncolumn is encoded via one-hot encoding.</li>\n<li>bnry: for categorical data of &lt;=2 unique values excluding infill (eg NaN), the\ncolumn is encoded to 0/1. Note that numerical sets with &lt;= 2 unique values in train\nset default to bnry.</li>\n<li>dat6: for time-series data, a set of derivations are performed returning\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy' (these are defined\nin next section)</li>\n<li>null: for columns without any valid values (e.g. all NaN) column is deleted</li>\n</ul>\n<p>For label sets, we use a distinct set of root categories under automation. These are in\nsome cases comparable to those listed above for training data, but differ in others and\na commonality is that the label sets will not include a returned 'NArw' (infill marker)\neven when parameter NArw_marker passed as True.</p>\n<ul>\n<li>lbnm: for numerical data, columns are treated with an 'exc2' pass-through transform.</li>\n<li>lb10: for categorical data, columns are subject to one-hot encoding via the 'text'\ntransform. (lb10 and lbte have comparable family trees)</li>\n<li>lbor: for categorical data, if the number of unique entries in the column exceeds\nthe parameter 'numbercategoryheuristic' (which defaults to 63), the encoding will\ninstead be by 'ord3' which is an ordinal (integer) encoding sorted by most common value.</li>\n<li>lbte: for categorical data of 3 unique values excluding infill (eg NaN), the\ncolumn is encoded via one-hot encoding.</li>\n<li>lbbn: for categorical data of &lt;=2 unique values excluding infill (eg NaN), the\ncolumn is encoded to 0/1. Note that numerical sets with &lt;= 2 unique values default to bnry.</li>\n<li>lbda: for time-series data, a set of derivations are performed returning\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy' (these are defined\nin next section)</li>\n</ul>\n<p>Note that if a user wishes to avoid the automated assignment of default transformations,\nsuch as to leave those columns not specifically assigned to transformation categories in\nassigncat as unchanged, the powertransform parameter may be passed as values 'excl' or\n'exc2', where for 'excl' columns not explicitly assigned to a root category in assigncat\nwill be left untouched, or for 'exc2' columns not explicitly assigned to a root category\nin assigncat will be forced to numeric and subject to default modeinfill. (These two excl\narguments may be useful if a user wants to experiment with specific transforms on a\nsubset of the columns without incurring processing time of an entire set.)</p>\n<p>Note that for columns designated for label sets as a special case categorical data will\ndefault to 'text' (one-hot encoding) instead of '1010'. Also, numerical data will default\nto 'excl2' (pass-through) instead of 'nmbr'. Also, if label smoothing is applied, label\ncolumns evaluated as 'bnry' (two unique values) will default to 'text' instead of 'bnry'\nas label smoothing requires one-hot encoding.</p>\n<ul>\n<li>\n<p>PCA: if the number of features exceeds 0.5 times the number of rows (an arbitrary heuristic)\na default PCA transform is applied defaulting to kernel PCA if all positive or otherwise\nsparse PCA (using scikit library). Note that this heuristic ratio can be changed or PCA\nturned off in the ML_cmnd, reference the ML_cmnd section under automunge(.) passed parameters.</p>\n</li>\n<li>\n<p>powertransform: if the powertransform parameter is activated, a statistical evaluation\nwill be performed on numerical sets to distinguish between columns to be subject to\nbxcx, nmbr, or mnmx. Please note that we intend to further refine the specifics of this\nprocess in future implementations. Additionally, powertransform may be passed as values 'excl'\nor 'exc2', where for 'excl' columns not explicitly assigned to a root category in assigncat\nwill be left untouched, or for 'exc2' columns not explicitly assigned to a root category in\nassigncat will be forced to numeric and subject to default modeinfill. (These two excl\narguments may be useful if a user wants to experiment with specific transforms on a subset of\nthe columns without incurring processing time of an entire set for instance.)</p>\n</li>\n<li>\n<p>floatprecision: parameter indicates the precision of floats in returned sets (16/32/64)\nsuch as for memory considerations.</p>\n</li>\n</ul>\n<p>In all cases, if the parameter NArw_marker is activated returned sets will be\nsupplemented with a NArw column indicating rows that were subject to infill. Each\ntransformation category has a default infill approach detailed below.</p>\n<p>Note that default transformations can be overwritten within an automunge(.) call by way\nof passing custom transformdict family tree definitions which overwrite the family tree\nof the default root categories listed above. For instance, if a user wishes to process\nnumerical columns with a default mean scaling ('mean') instead of z-score\nnormalization ('nmbr'), the user may copy the transform_dict entries from the code-base\nfor 'mean' root category and assign as a definition of the 'nmbr' root category, and then\npass that defined transformdict in the automunge call. (Note that we don't need to\noverwrite the processdict for nmbr if we don't intend to overwrite it's use as an entry\nin other root category family trees. Also it's good practice to retain any downstream\nentries such as in case the default for nmbr is used as an entry in some other root\ncategory's family tree.) Here's a demonstration.</p>\n<pre><code>#create a transformdict that overwrites the root category definition of nmbr with mean:\n#(assumes that we want to include NArw indicating presence of infill)\ntransformdict = {'nmbr' : {'parents' : [], \\\n                           'siblings': [], \\\n                           'auntsuncles' : ['mean'], \\\n                           'cousins' : ['NArw'], \\\n                           'children' : [], \\\n                           'niecesnephews' : [], \\\n                           'coworkers' : [], \\\n                           'friends' : []}}\n\n#And then we can simply pass this transformdict to an automunge(.) call.\n\n(returned sets) = \\\nam.automunge(df_train, \\\n             transformdict = transformdict)\n\n</code></pre>\n<p>Note if any of default transformation automation categories (nmbr/1010/ord3/text/bnry/dat6/null)\nare overwritten in this fashion, a user can still assign original default categories to distinct\ncolumns in assigncat by using corresponding alternates of (nmbd/101d/ordd/texd/bnrd/datd/nuld).</p>\n<p>...</p>\n<h2>Library of Transformations</h2>\n<h3>Library of Transformations Subheadings:</h3>\n<ul>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#intro\" rel=\"nofollow\">Intro</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#numerical-set-normalizations\" rel=\"nofollow\">Numerical Set Normalizations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#numerical-set-transformations\" rel=\"nofollow\">Numerical Set Transformations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#numercial-set-bins-and-grainings\" rel=\"nofollow\">Numercial Set Bins and Grainings</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#sequential-numerical-set-transformations\" rel=\"nofollow\">Sequential Numerical Set Transformations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#categorical-set-encodings\" rel=\"nofollow\">Categorical Set Encodings</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#date-time-data-normalizations\" rel=\"nofollow\">Date-Time Data Normalizations</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#date-time-data-bins\" rel=\"nofollow\">Date-Time Data Bins</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#misc-functions\" rel=\"nofollow\">Misc. Functions</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#string-parsing\" rel=\"nofollow\">String Parsing</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#more-efficient-string-parsing\" rel=\"nofollow\">More Efficient String Parsing</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#multi-tier-string-parsing\" rel=\"nofollow\">Multi-tier String Parsing</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#list-of-root-categories\" rel=\"nofollow\">List of Root Categories</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#list-of-suffix-appenders\" rel=\"nofollow\">List of Suffix Appenders</a></li>\n<li><a href=\"https://github.com/Automunge/AutoMunge/blob/master/README.md#root-category-family-tree-definitions\" rel=\"nofollow\">Root Category Family Tree Definitions</a></li>\n</ul>\n<hr>\n<h3>Intro</h3>\n<p>Automunge has a built in library of transformations that can be passed for\nspecific columns with assigncat. (A column if left unassigned will defer to\nthe automated default methods to evaluate properties of the data to infer\nappropriate methods of numerical encoding.)  For example, a user can pass a\nmin-max scaling method to a list of specific columns with headers 'column1',\n'column2' with:</p>\n<pre><code>assigncat = {'mnmx':['column1', 'column2']}\n</code></pre>\n<p>When a user assigns a column to a specific category, that category is treated\nas the root category for the tree of transformations. Each key has an\nassociated transformation function (where the root category transformation function\nis only applied if the root key is also found in the tree of family primitives).\nThe tree of family primitives, as introduced earlier, applies first the keys found\nin upstream primitives i.e. parents/siblings/auntsuncles/cousins. If a transform\nis applied for a primitive that includes downstream offspring, such as parents/\nsiblings, then the family tree for that key with offspring is inspected to determine\ndownstream offspring categories, for example if we have a parents key of 'mnmx',\nthen any children/niecesnephews/coworkers/friends in the 'mnmx' family tree will\nbe applied as parents/siblings/auntsuncles/cousins, respectively. Note that the\ndesignation for supplements/replaces refers purely to the question of whether the\ncolumn to which the transform is being applied is kept in place or removed.</p>\n<p>Now we'll start here by listing again the family tree primitives for those root\ncategories built into the automunge library. After that we'll give a quick\nnarrative for each of the associated transformation functions. First here again\nare the family tree primitives.</p>\n<pre><code>'parents' :           \nupstream / first generation / replaces column / with offspring\n\n'siblings':           \nupstream / first generation / supplements column / with offspring\n\n'auntsuncles' :       \nupstream / first generation / replaces column / no offspring\n\n'cousins' :           \nupstream / first generation / supplements column / no offspring\n\n'children' :          \ndownstream parents / offspring generations / replaces column / with offspring\n\n'niecesnephews' :     \ndownstream siblings / offspring generations / supplements column / with offspring\n\n'coworkers' :         \ndownstream auntsuncles / offspring generations / replaces column / no offspring\n\n'friends' :           \ndownstream cousins / offspring generations / supplements column / no offspring\n</code></pre>\n<p>Here is a quick description of the transformation functions associated\nwith each key which can either be assigned to a family tree primitive (or used\nas a root key). We're continuing to build out this library of transformations.</p>\n<p>Note the design philosophy is that any transform can be applied to any type\nof data and if the data is not suited (such as applying a numeric transform\nto a categorical set) the transform will just return all zeros. Note the\ndefault infill refers to the infill applied under 'standardinfill'. Note the\ndefault NArowtype refers to the categories of data that won't be subject to\ninfill.</p>\n<h3>Numerical Set Normalizations</h3>\n<ul>\n<li>nmbr/nbr2/nbr3/nmdx/nmd2/nmd3: z-score normalization<br>\n(x - mean) / (standard deviation)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_nmbr'</li>\n<li>assignparam parameters accepted:\n<ul>\n<li>'cap' and 'floor', default to False for no floor or cap,\nTrue means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling,\nnoting that if cap&lt;max then max reset to cap and if floor&gt;min then min reset to floor\ncap and floor based on pre-transform values</li>\n<li>'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\nnote that multiplier is applied prior to offset</li>\n</ul>\n</li>\n<li>driftreport postmunge metrics: mean / std / max / min</li>\n</ul>\n</li>\n<li>mean/mea2/mea3: mean normalization (like z-score in the numerator and min-max in the denominator)<br>\n(x - mean) / (max - min)\nMy intuition says z-score has some benefits but really up to the user which they prefer.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_mean'</li>\n<li>assignparam parameters accepted:\n<ul>\n<li>'cap' and 'floor', default to False for no floor or cap,\nTrue means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling,\nnoting that if cap&lt;max then max reset to cap and if floor&gt;min then min reset to floor\ncap and floor based on pre-transform values</li>\n<li>'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\nnote that multiplier is applied prior to offset</li>\n</ul>\n</li>\n<li>driftreport postmunge metrics: minimum / maximum / mean / std</li>\n</ul>\n</li>\n<li>mnmx/mnm2/mnm5/mmdx/mmd2/mmd3: vanilla min-max scaling<br>\n(x - min) / (max - min)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_mnmx'</li>\n<li>assignparam parameters accepted: 'cap' and 'floor', default to False for no floor or cap,\nTrue means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling,\nnoting that if cap&lt;max then max reset to cap and if floor&gt;min then min reset to floor\ncap and floor based on pre-transform values</li>\n<li>driftreport postmunge metrics: minimum / maximum / mean / std / cap / floor</li>\n</ul>\n</li>\n<li>mnm3/mnm4: min-max scaling with outliers capped at 0.01 and 0.99 quantiles\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_mnm3'</li>\n<li>assignparam parameters accepted: qmax or qmin to change the quantiles from 0.99/0.01</li>\n<li>driftreport postmunge metrics: quantilemin / quantilemax / mean / std</li>\n</ul>\n</li>\n<li>mnm6: min-max scaling with test floor set capped at min of train set (ensures\ntest set returned values &gt;= 0, such as might be useful for kernel PCA for instance)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_mnm6'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: minimum / maximum / mean / std</li>\n</ul>\n</li>\n<li>retn: related to min/max scaling but retains +/- of values, based on conditions\nif max&gt;=0 and min&lt;=0, x=x/(max-min), elif max&gt;=0 and min&gt;=0 x=(x-min)/(max-min),\nelif max&lt;=0 and min&lt;=0 x=(x-max)/(max-min)\n<img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7c982583a99c77d7a88994b881526e5c63075f3/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f34343031313734382f38303633323134332d63626266373738302d386132342d313165612d396264622d3266373233303332383234372e706e67\">\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_retn'</li>\n<li>assignparam parameters accepted:\n<ul>\n<li>'cap' and 'floor', default to False for no floor or cap,\nTrue means floor/cap based on training set min/max, otherwise passed values serve as floor/cap to scaling,\nnoting that if cap&lt;max then max reset to cap and if floor&gt;min then min reset to floor\ncap and floor based on pre-transform values</li>\n<li>'muilitplier' and 'offset' to apply multiplier and offset to posttransform values, default to 1,0,\nnote that multiplier is applied prior to offset</li>\n<li>'divisor' to select between default of 'minmax' or 'std', where minmax means scaling by divisor of max-min\nstd based on scaling by divisor of standard deviation</li>\n</ul>\n</li>\n<li>driftreport postmunge metrics: minimum / maximum / mean / std</li>\n</ul>\n</li>\n<li>MADn/MAD2: mean absolute deviation normalization, subtract set mean <br>\n(x - mean) / (mean absolute deviation)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_MADn'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mean / MAD / maximum / minimum</li>\n</ul>\n</li>\n<li>MAD3: mean absolute deviation normalization, subtract set maximum<br>\n(x - maximum) / (mean absolute deviation)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_MAD3'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mean / MAD / datamax / maximum / minimum</li>\n</ul>\n</li>\n<li>lgnm: normalization intended for lognormal distributed numerical sets\nAchieved by performing a logn transform upstream of a nmbr normalization.\n<ul>\n<li>suffix appender: '_logn_nmbr'</li>\n</ul>\n</li>\n</ul>\n<h3>Numerical Set Transformations</h3>\n<ul>\n<li>bxcx/bxc2/bxc3/bxc4/bxc5: performs Box-Cox power law transformation. Applies infill to\nvalues &lt;= 0. Note we currently have a test for overflow in returned results and if found\nset to 0. Please note that this method makes use of scipy.stats.boxcox.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_bxcx'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: trnsfrm_mean / bxcx_lmbda / bxcxerrorcorrect / mean</li>\n</ul>\n</li>\n<li>log0/log1: performs logarithmic transform (base 10). Applies infill to values &lt;= 0.\n<ul>\n<li>default infill: meanlog</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_log0'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: meanlog</li>\n</ul>\n</li>\n<li>logn: performs natural logarithmic transform (base e). Applies infill to values &lt;= 0.\n<ul>\n<li>default infill: meanlog</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_logn'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: meanlog</li>\n</ul>\n</li>\n<li>sqrt: performs square root transform. Applies infill to values &lt; 0.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: nonnegativenumeric</li>\n<li>suffix appender: '_sqrt'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: meansqrt</li>\n</ul>\n</li>\n<li>addd: performs addition of an integer or float to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_addd'</li>\n<li>assignparam parameters accepted: 'add' for value added (default to 1)</li>\n<li>driftreport postmunge metrics: mean, add</li>\n</ul>\n</li>\n<li>sbtr: performs subtraction of an integer or float to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_sbtr'</li>\n<li>assignparam parameters accepted: 'subtract' for value subtracted (default to 1)</li>\n<li>driftreport postmunge metrics: mean, subtract</li>\n</ul>\n</li>\n<li>mltp: performs multiplication of an integer or float to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_mltp'</li>\n<li>assignparam parameters accepted: 'multiply' for value multiplied (default to 2)</li>\n<li>driftreport postmunge metrics: mean, multiply</li>\n</ul>\n</li>\n<li>divd: performs division of an integer or float to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_divd'</li>\n<li>assignparam parameters accepted: 'divide' for value subtracted (default to 2)</li>\n<li>driftreport postmunge metrics: mean, divide</li>\n</ul>\n</li>\n<li>rais: performs raising to a power of an integer or float to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_rais'</li>\n<li>assignparam parameters accepted: 'raiser' for value raised (default to 2)</li>\n<li>driftreport postmunge metrics: mean, raiser</li>\n</ul>\n</li>\n<li>absl: performs absolute value transform to a set\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_absl'</li>\n<li>assignparam parameters accepted: (none)</li>\n<li>driftreport postmunge metrics: mean</li>\n</ul>\n</li>\n</ul>\n<h3>Numercial Set Bins and Grainings</h3>\n<ul>\n<li>pwrs: bins groupings by powers of 10\n<ul>\n<li>default infill: mean (ie log(mean))</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_10^#' where # is integer indicating target powers of 10 for column</li>\n<li>driftreport postmunge metrics: powerlabelsdict / meanlog / maxlog /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>pwr2: bins groupings by powers of 10\n<ul>\n<li>default infill: no activation</li>\n<li>default NArowtype: nonzeronumeric</li>\n<li>suffix appender: '<em>10^#' or '</em>-10^#' where # is integer indicating target powers of 10 for column</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: powerlabelsdict / labels_train / missing_cols /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>pwor: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to powers of 10\n<ul>\n<li>default infill: zero</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_pwor'</li>\n<li>driftreport postmunge metrics: meanlog / maxlog / ordl_activations_dict</li>\n</ul>\n</li>\n<li>por2: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to powers of 10\n<ul>\n<li>default infill: zero (a distinct encoding)</li>\n<li>default NArowtype: nonzeronumeric</li>\n<li>suffix appender: '_por2'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: train_replace_dict / test_replace_dict / ordl_activations_dict</li>\n</ul>\n</li>\n<li>bins: for numerical sets, outputs a set of 6 columns indicating where a\nvalue fell with respect to number of standard deviations from the mean of the\nset (i.e. &lt;-2, -2-1, -10, 01, 12, &gt;2)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bins</em>####' where #### is one of set (s&lt;-2, s-21, s-10, s+01, s+12, s&gt;+2)\nwhich indicate column target for number of standard deviations from the mean</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: binsmean / binsstd / &lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bint: comparable to bins but assumes data has already been z-score normalized\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bint</em>####' where #### is one of set (t&lt;-2, t-21, t-10, t+01, t+12, t&gt;+2)\nwhich indicate column target for number of standard deviations from the mean</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: binsmean / binsstd / &lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bsor: for numerical sets, outputs an ordinal encoding indicating where a\nvalue fell with respect to number of standard deviations from the mean of the\nset (i.e. &lt;-2:0, -2-1:1, -10:2, 01:3, 12:4, &gt;2:5)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_bsor'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: ordinal_dict / ordl_activations_dict / binsmean / binsstd</li>\n</ul>\n</li>\n<li>bnwd/bnwK/bnwM: for numerical set graining to fixed width bins for one-hot encoded bins\n(columns without activations in train set excluded in train and test data).\nbins default to width of 1/1000/1000000 eg for bnwd/bnwK/bnwM\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bswd</em>#1_#2' where #1 is the width and #2 is the bin identifier (# from min)</li>\n<li>assignparam parameters accepted: 'width' to set bin width</li>\n<li>driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id /\nbins_cuts / bn_width_bnwd (or bnwK/bnwM) / textcolumns /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bnwo/bnKo/bnMo: for numerical set graining to fixed width bins for ordinal encoded bins\n(integers without train set activations still included in test set).\nbins default to width of 1/1000/1000000 eg for bnwd/bnwK/bnwM\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_bnwo' (or '_bnKo', '_bnMo')</li>\n<li>assignparam parameters accepted: 'width' to set bin width</li>\n<li>driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id /\nbins_cuts / bn_width / ordl_activations_dict</li>\n</ul>\n</li>\n<li>bnep/bne7/bne9: for numerical set graining to equal population bins for one-hot encoded bins.\nbin count defaults to 5/7/9 eg for bnep/bne7/bne9\n<ul>\n<li>default infill: no activation</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bnep</em>#1' where #1 is the bin identifier (# from min) (or bne7/bne9 instead of bnep)</li>\n<li>assignparam parameters accepted: 'bincount' to set number of bins</li>\n<li>driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id /\nbins_cuts / bincount_bnep (or bne7/bne9) / textcolumns /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bneo/bn7o/bn9o: for numerical set graining to equal population bins for ordinal encoded bins.\nbin count defaults to 5/7/9 eg for bne0/bn7o/bn9o\n<ul>\n<li>default infill: adjacent cell</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bnep</em>#1' where #1 is the bin identifier (# from min) (or bn7o/bn9o)</li>\n<li>assignparam parameters accepted: 'bincount' to set number of bins</li>\n<li>driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id /\nbins_cuts / bincount / ordl_activations_dict</li>\n</ul>\n</li>\n<li>bkt1: for numerical set graining to user specified encoded bins. First and last bins unconstrained.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bkt1</em>#1' where #1 is the bin identifier (# from min)</li>\n<li>assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries (leave out +/-'inf')\ndefaults to [0,1,2] (arbitrary plug values)</li>\n<li>driftreport postmunge metrics: binsmean / buckets_bkt1 / bins_cuts / bins_id / textcolumns /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bkt2: for numerical set graining to user specified encoded bins. First and last bins bounded.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>bkt2</em>#1' where #1 is the bin identifier (# from min)</li>\n<li>assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries\ndefaults to [0,1,2] (arbitrary plug values)</li>\n<li>driftreport postmunge metrics: binsmean / buckets_bkt2 / bins_cuts / bins_id / textcolumns /\n&lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>bkt3: for numerical set graining to user specified ordinal encoded bins. First and last bins unconstrained.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_bkt3'</li>\n<li>assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries (leave out +/-'inf')\ndefaults to [0,1,2] (arbitrary plug values)</li>\n<li>driftreport postmunge metrics: binsmean / buckets / bins_cuts / bins_id / ordl_activations_dict</li>\n</ul>\n</li>\n<li>bkt4: for numerical set graining to user specified ordinal encoded bins. First and last bins bounded.\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_bkt4'</li>\n<li>assignparam parameters accepted: 'buckets', a list of numbers, to set bucket boundaries\ndefaults to [0,1,2] (arbitrary plug values)</li>\n<li>driftreport postmunge metrics: binsmean / buckets / bins_cuts / bins_id / ordl_activations_dict</li>\n</ul>\n</li>\n<li>tlbn: returns equal population bins in separate columns with activations replaced by min-max scaled\nvalues within that segment's range (between 0-1) and other values subject to an infill of -1\n(intended for use to evaluate feature importance of different segments of a numerical set's distribution\nwith metric2 results from a feature importance evaluation)\n<ul>\n<li>default infill: no activation (this is the recommended infill for this transform)</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '<em>tlbn</em>#' where # is the bin identifier</li>\n<li>assignparam parameters accepted: 'bincount' to set number of bins</li>\n<li>driftreport postmunge metrics: binsmean / bn_min / bn_max / bn_delta / bn_count / bins_id /\nbins_cuts / bincount_tlbn / textcolumns / &lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n</ul>\n<h3>Sequential Numerical Set Transformations</h3>\n<ul>\n<li>dxdt/d2dt/d3dt/d4dt/d5dt/d6dt: rate of change (row value minus value in preceding row), high orders\nreturn lower orders (eg d2dt returns original set, dxdt, and d2dt), all returned sets include 'retn'\nnormalization which scales data with min/max while retaining +/- sign\n<ul>\n<li>default infill: adjacent cells</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_dxdt'</li>\n<li>assignparam parameters accepted: 'periods' sets number of time steps offset to evaluate\ndefaults to 1</li>\n<li>driftreport postmunge metrics: positiveratio / negativeratio / zeroratio / minimum / maximum / mean / std</li>\n</ul>\n</li>\n<li>dxd2/d2d2/d3d2/d4d2/d5d2/d6d2: denoised rate of change (average of last two rows minus average\nof preceding two rows), high orders return lower orders (eg d2d2 returns original set, dxd2,\nand d2d2), all returned sets include 'retn' normalization\n<ul>\n<li>default infill: adjacent cells</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_dxd2'</li>\n<li>assignparam parameters accepted: 'periods' sets number of time steps offset to evaluate\ndefaults to 2</li>\n<li>driftreport postmunge metrics: positiveratio / negativeratio / zeroratio / minimum / maximum / mean / std</li>\n</ul>\n</li>\n<li>nmdx/nmd2/nmd3/nmd4/nmd5/nmd6: comparable to dxdt but includes upstream of sequential transforms a\nnmrc numeric string parsing top extract numbers from string sets</li>\n<li>mmdx/mmd2/mmd3/mmd4/mmd5/mmd6: comparable to dxdt but uses z-score normalizaitons via 'nbr2' instead of 'retn'</li>\n<li>dddt/ddd2/ddd3/ddd4/ddd5/ddd6: comparable to dxdt but no normalizations applied</li>\n<li>dedt/ded2/ded3/ded4/ded5/ded6: comparable to dxd2 but no normalizations applied</li>\n</ul>\n<h3>Categorical Set Encodings</h3>\n<ul>\n<li>bnry: converts sets with two values to boolean identifiers. Defaults to assigning\n1 to most common value and 0 to second most common, unless 1 or 0 is already included\nin most common of the set then defaults to maintaining those designations. If applied\nto set with &gt;2 entries applies infill to those entries beyond two most common.\n<ul>\n<li>default infill: most common value</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_bnry'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: missing / 1 / 0 / extravalues / oneratio / zeroratio</li>\n</ul>\n</li>\n<li>bnr2: converts sets with two values to boolean identifiers. Defaults to assigning\n1 to most common value and 0 to second most common, unless 1 or 0 is already included\nin most common of the set then defaults to maintaining those designations. If applied\nto set with &gt;2 entries applies infill to those entries beyond two most common. (Same\nas bnry except for default infill.)\n<ul>\n<li>default infill: least common value</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_bnry'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: missing / 1 / 0 / extravalues / oneratio / zeroratio</li>\n</ul>\n</li>\n<li>text/txt2: converts categorical sets to one-hot encoded set of boolean identifiers\n<ul>\n<li>default infill: all entries zero</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_(category)' where category is the target of the column</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: textlabelsdict_text / &lt;column&gt; + '_ratio' (column specific)</li>\n</ul>\n</li>\n<li>ordl/ord2: converts categorical sets to ordinally encoded set of integer identifiers\n<ul>\n<li>default infill: plug value 'zzzinfill'</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_ordl'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict</li>\n</ul>\n</li>\n<li>ord3/ord4: converts categorical sets to ordinally encoded set of integer identifiers\nsorted by frequency of category occurrence\n<ul>\n<li>default infill: plug value 'zzzinfill'</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_ord3'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict</li>\n</ul>\n</li>\n<li>1010: converts categorical sets of &gt;2 unique values to binary encoding (more memory\nefficient than one-hot encoding)\n<ul>\n<li>default infill: plug value 'zzzinfill'</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '<em>1010</em>#' where # is integer indicating order of 1010 columns</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: _1010_binary_encoding_dict / _1010_overlap_replace /\n_1010_binary_column_count / _1010_activations_dict\n(for example if 1010 encoded to three columns based on number of categories &lt;8,\nit would return three columns with suffix appenders 1010_1, 1010_2, 1010_3)</li>\n</ul>\n</li>\n<li>ucct: converts categorical sets to a normalized float of unique class count,\nfor example, a 10 row train set with two instances of 'circle' would replace 'circle' with 0.2\nand comparable to test set independent of test set row count\n<ul>\n<li>default infill: ratio of infill in train set</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_ucct'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: ordinal_dict / ordinal_overlap_replace / ordinal_activations_dict</li>\n</ul>\n</li>\n<li>lngt, lnlg: returns string length of categoric entries (lngt followed by min/max, lnlg by log)\n<ul>\n<li>default infill: plug value of 3 (based on len(str(np.nan)) )</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_lngt'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: maximum, minimum, mean, std</li>\n</ul>\n</li>\n<li>new processing functions Utxt / Utx2 / Utx3 / Uord / Uor2 / Uor3 / Uor6 / U101 / Ucct\n<ul>\n<li>comparable to functions text / txt2 / txt3 / ordl / ord2 / ord3 / ors6 / 1010 / Ucct</li>\n<li>but upstream conversion of all strings to uppercase characters prior to encoding</li>\n<li>(e.g. 'USA' and 'usa' would be consistently encoded)</li>\n<li>default infill: in uppercase conversion NaN's are assigned distinct encoding 'NAN'</li>\n<li>and may be assigned other 9infill methods in assigninfill</li>\n<li>default NArowtype: 'justNaN'</li>\n<li>suffix appender: '_UPCS'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: comparable to functions text / txt2 / txt3 / ordl / ord2 / ord3 / ors6 / 1010</li>\n</ul>\n</li>\n</ul>\n<h3>Date-Time Data Normalizations</h3>\n<ul>\n<li>date/dat2: for datetime formatted data, segregates data by time scale to multiple\ncolumns (year/month/day/hour/minute/second) and then performs z-score normalization\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for (_year, _mnth, _days, _hour, _mint, _scnd)</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: meanyear / stdyear / meanmonth / stdmonth / meanday / stdday /\nmeanhour / stdhour / meanmint / stdmint / meanscnd / stdscnd</li>\n</ul>\n</li>\n<li>year/mnth/days/hour/mint/scnd: segregated by time scale and z-score normalization\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for (_year, _mnth, _days, _hour, _mint, _scnd)</li>\n<li>driftreport postmunge metrics: meanyear / stdyear / meanmonth / stdmonth / meanday / stdday /\nmeanhour / stdhour / meanmint / stdmint / meanscnd / stdscnd</li>\n</ul>\n</li>\n<li>mnsn/mncs/dysn/dycs/hrsn/hrcs/misn/mics/scsn/sccs: segregated by time scale and\ndual columns with sin and cos transformations for time scale period (eg 12 months, 24 hrs, 7 days, etc)\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for (mnsn/mncs/dysn/dycs/hrsn/hrcs/misn/mics/scsn/sccs)</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mean_mnsn / mean_mncs / mean_dysn / mean_dycs / mean_hrsn / mean_hrcs\nmean_misn / mean_mscs / mean_scsn / mean_sccs</li>\n</ul>\n</li>\n<li>mdsn/mdcs: similar sin/cos treatment, but for combined month/day, note that periodicity is based on\nnumber of days in specific months, including account for leap year, or if month not specified defaults to\naverage days in a month (30.42) periodicity\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for (mdsn/mdcs)</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mean_mdsn / mean_mdcs</li>\n</ul>\n</li>\n<li>hmss/hmsc: similar sin/cos treatment, but for combined hour/minute/second\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for (hmss/hmsc)</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mean_hmss / mean_hmsc</li>\n</ul>\n</li>\n<li>dat6: default transformation set for time series data, returns:\n'year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: includes appenders for ('year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy')</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: meanyear / stdyear / mean_mdsn / mean_mdcs / mean_hmss / mean_hmsc</li>\n</ul>\n</li>\n</ul>\n<h3>Date-Time Data Bins</h3>\n<ul>\n<li>wkdy: boolean identifier indicating whether a datetime object is a weekday\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: '_wkdy'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: activationratio</li>\n</ul>\n</li>\n<li>wkds/wkdo: encoded weekdays 0-6, 'wkds' for one-hot via 'text', 'wkdo' for ordinal via 'ord3'\n<ul>\n<li>default infill: 7 (eg eight days a week)</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: '_wkds'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: mon_ratio / tue_ratio / wed_ratio / thr_ratio / fri_ratio / sat_ratio /\nsun_ratio / infill_ratio</li>\n</ul>\n</li>\n<li>mnts/mnto: encoded months 1-12, 'mnts' for one-hot via 'text', 'mnto' for ordinal via 'ord3'\n<ul>\n<li>default infill: 0</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: '_mnts'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: infill_ratio / jan_ratio / feb_ratio / mar_ratio / apr_ratio / may_ratio /\njun_ratio / jul_ratio / aug_ratio / sep_ratio / oct_ratio / nov_ratio / dec_ratio</li>\n</ul>\n</li>\n<li>bshr: boolean identifier indicating whether a datetime object falls within business\nhours (9-5, time zone unaware)\n<ul>\n<li>default infill: datetime</li>\n<li>default NArowtype: justNaN</li>\n<li>assignparam parameters accepted: 'start' and 'end', which default to 9 and 17</li>\n<li>driftreport postmunge metrics: activationratio</li>\n</ul>\n</li>\n<li>hldy: boolean identifier indicating whether a datetime object is a US Federal\nholiday\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: datetime</li>\n<li>suffix appender: '_hldy'</li>\n<li>assignparam parameters accepted: 'holiday_list', should be passed as a list of strings\nof dates of additional holidays to be recognized e.g. ['2020/03/30']</li>\n<li>driftreport postmunge metrics: activationratio</li>\n</ul>\n</li>\n</ul>\n<h3>Misc. Functions</h3>\n<ul>\n<li>null: deletes source column\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: exclude</li>\n<li>no suffix appender, column deleted</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>excl: passes source column un-altered. (Note that returned data may not be numeric and predictive\nmethods like ML infill and feature selection may not work for that scenario.)\nNote that the excl transform is unique in that it is an in-place operation for efficiency purposes, and\nso may only be passed in a user defined transformdict as an entry to cousins primitive, although it's\napplication \"replaces\" the source column. (Note that for any other transform a cousins primitive entry\nonly supplements the source column, 'excl' is the exception to the rule). For comparable functionality\neligible for other primitive entries in a passed transformdict please use 'exc6' transform instead.\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: exclude</li>\n<li>suffix appender: None or '_excl' (dependant on automunge(.) excl_suffix parameter)</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>exc2/exc3/exc4: passes source column unaltered other than force to numeric, mode infill applied\n<ul>\n<li>default infill: mode</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_exc2'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>exc5: passes source column unaltered other than force to numeric, mode infill applied for non-integers\n<ul>\n<li>default infill: mode</li>\n<li>default NArowtype: integer</li>\n<li>suffix appender: '_exc5'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>exc6: passes source column un-altered. (Comparable to 'excl' but eligible for entry to full set of\nfamily tree primitives in a user-defined transformdict.)\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: exclude</li>\n<li>suffix appender: '_exc6'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>eval: performs data property evaluation consistent with default automation to designated column\n<ul>\n<li>default infill: based on evaluation</li>\n<li>default NArowtype: based on evaluation</li>\n<li>suffix appender: based on evaluation</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>ptfm: performs distribution property evaluation consistent with the automunge powertransform\nparameter activated to designated column\n<ul>\n<li>default infill: based on evaluation</li>\n<li>default NArowtype: based on evaluation</li>\n<li>suffix appender: based on evlauation</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>copy: create new copy of column, useful when applying the same transform to same column more\nthan once with different parameters. Does not prepare column for ML on it's own.\n<ul>\n<li>default infill: exclude</li>\n<li>default NArowtype: exclude</li>\n<li>suffix appender: '_copy'</li>\n<li>assignparam parameters accepted: 'suffix' for custom suffix appender</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>shfl: shuffles the values of a column based on passed randomseed (Note that returned data may not\nbe numeric and predictive methods like ML infill and feature selection may not work for that scenario\nunless an additional transform is applied downstream.)\n<ul>\n<li>default infill: exclude</li>\n<li>default NArowtype: justNAN</li>\n<li>suffix appender: '_shfl'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: none</li>\n</ul>\n</li>\n<li>NArw: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values. Note that when NArw\nis assigned in a family tree it bases NArowtype on the root category,\nwhen NArw is passed as the root category it bases NArowtype on default.\n<ul>\n<li>default infill: not applicable</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_NArw'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: pct_NArw</li>\n</ul>\n</li>\n<li>NAr2: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n<ul>\n<li>default infill: not applicable</li>\n<li>default NArowtype: numeric</li>\n<li>suffix appender: '_NArw'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: pct_NArw</li>\n</ul>\n</li>\n<li>NAr3: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n<ul>\n<li>default infill: not applicable</li>\n<li>default NArowtype: positivenumeric</li>\n<li>suffix appender: '_NArw'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: pct_NArw</li>\n</ul>\n</li>\n<li>NAr4: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n<ul>\n<li>default infill: not applicable</li>\n<li>default NArowtype: nonnegativenumeric</li>\n<li>suffix appender: '_NArw'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: pct_NArw</li>\n</ul>\n</li>\n<li>NAr5: produces a column of boolean identifiers for rows in the source\ncolumn with missing or improperly formatted values.\n<ul>\n<li>default infill: not applicable</li>\n<li>default NArowtype: integer</li>\n<li>suffix appender: '_NArw'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: pct_NArw</li>\n</ul>\n</li>\n</ul>\n<h3>String Parsing</h3>\n<p>Please note I recommend caution on using splt/spl2/spl5/spl6 transforms on categorical\nsets that may include scientific units for instance, as prefixes will not be noted\nfor overlaps, e.g. this wouldn't distinguish between kilometer and meter for instance.\nNote that overlap lengths below 5 characters are ignored unless that value is overridden\nby passing a parameter through assignparam.</p>\n<ul>\n<li>splt: searches categorical sets for overlaps between strings and returns new boolean column\nfor identified overlap categories. Note this treats numeric values as strings eg 1.3 = '1.3'.\nNote that priority is given to overlaps of higher length, and by default overlap searches\nstart at 20 character length and go down to 5 character length.\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '<em>splt</em>##<em>##' where ##</em>## is target identified string overlap</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n'space_and_punctuation': True/False, defaults to True, when passed as\nFalse character overlaps are not recorded which include space or punctuation\nbased on characters in excluded_characters parameter\n'excluded_characters': a list of strings which are excluded from overlap\nidentification when space_and_punctuation set as False, defaults to\n<code>[' ', ',', '.', '?', '!', '(', ')']</code></li>\n<li>driftreport postmunge metrics: overlap_dict / splt_newcolumns_splt / minsplit</li>\n</ul>\n</li>\n<li>spl2/spl3/spl4/ors2/txt3: similar to splt, but instead of creating new column identifier it replaces categorical\nentries with the abbreviated string overlap\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_spl2'</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n'space_and_punctuation': True/False, defaults to True, when passed as\nFalse character overlaps are not recorded which include space or punctuation\nbased on characters in excluded_characters parameter\n'excluded_characters': a list of strings which are excluded from overlap\nidentification when space_and_punctuation set as False, defaults to\n<code>[' ', ',', '.', '?', '!', '(', ')']</code></li>\n<li>driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict /\nminsplit</li>\n</ul>\n</li>\n<li>spl5/spl6/ors5/ors6: similar to spl2, but those entries without identified string overlap are set to 0,\n(used in ors5 in conjunction with ord3)\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_spl5'</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n'space_and_punctuation': True/False, defaults to True, when passed as\nFalse character overlaps are not recorded which include space or punctuation\nbased on characters in excluded_characters parameter\n'excluded_characters': a list of strings which are excluded from overlap\nidentification when space_and_punctuation set as False, defaults to\n<code>[' ', ',', '.', '?', '!', '(', ')']</code></li>\n<li>driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict /\nspl5_zero_dict / minsplit</li>\n</ul>\n</li>\n<li>spl6: similar to spl5, but with a splt performed downstream for identification of overlaps\nwithin the overlaps\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_spl5'</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n'space_and_punctuation': True/False, defaults to True, when passed as\nFalse character overlaps are not recorded which include space or punctuation\nbased on characters in excluded_characters parameter\n'excluded_characters': a list of strings which are excluded from overlap\nidentification when space_and_punctuation set as False, defaults to\n<code>[' ', ',', '.', '?', '!', '(', ')']</code></li>\n<li>driftreport postmunge metrics: overlap_dict / spl2_newcolumns / spl2_overlap_dict / spl2_test_overlap_dict /\nspl5_zero_dict / minsplit</li>\n</ul>\n</li>\n<li>spl7: similar to spl5, but recognizes string character overlaps down to minimum 2 instead of 5\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_spl5'</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n'space_and_punctuation': True/False, defaults to True, when passed as\nFalse character overlaps are not recorded which include space or punctuation\nbased on characters in excluded_characters parameter\n'excluded_characters': a list of strings which are excluded from overlap\nidentification when space_and_punctuation set as False, defaults to\n<code>[' ', ',', '.', '?', '!', '(', ')']</code></li>\n<li>driftreport postmunge metrics: overlap_dict / srch_newcolumns_srch / search</li>\n</ul>\n</li>\n<li>srch: searches categorical sets for overlaps with user passed search string and returns new boolean column\nfor identified overlap entries. (There is also src3 variant which I suspect may be more efficient in esoteric scenarios).\n<ul>\n<li>default infill: none</li>\n<li>default NArowtype: justNaN</li>\n<li>suffix appender: '_srch_##<em>##' where ##</em>## is target identified search string</li>\n<li>assignparam parameters accepted: 'search': a list of strings, defaults as empty set\n'case': bool to indicate case sensitivity of search, defaults True\n(note that 'case' not yet built into src2 variant)</li>\n<li>driftreport postmunge metrics: overlap_dict / splt_newcolumns_splt / minsplit</li>\n</ul>\n</li>\n<li>nmrc/nmr2/nmr3: parses strings and returns any number groupings, prioritized by longest length\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: parsenumeric</li>\n<li>suffix appender: '_nmrc'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: overlap_dict / mean / maximum / minimum</li>\n</ul>\n</li>\n<li>nmcm/nmc2/nmc3: similar to nmrc, but recognizes numbers with commas, returns numbers stripped of commas\n<ul>\n<li>default infill: mean</li>\n<li>default NArowtype: parsenumeric_commas</li>\n<li>suffix appender: '_nmcm'</li>\n<li>assignparam parameters accepted: none</li>\n<li>driftreport postmunge metrics: overlap_dict / mean / maximum / minimum</li>\n</ul>\n</li>\n</ul>\n<h3>More Efficient String Parsing</h3>\n<ul>\n<li>new processing functions nmr4/nmr5/nmr6/nmc4/nmc5/nmc6/spl8/spl9/sp10 (spelled sp\"ten\")/src2:\n<ul>\n<li>comparable to functions nmrc/nmr2/nmr3/nmcm/nmc2/nmc3/splt/spl2/spl5/srch</li>\n<li>but make use of new assumption that set of unique values in test set is same or a subset of those values\nfrom the train set, which allows for a more efficient application (no more string parsing of test sets)</li>\n<li>default infill: comparable</li>\n<li>default NArowtype: comparable</li>\n<li>suffix appender: same format, updated per the new category</li>\n<li>assignparam parameters accepted: comparable</li>\n<li>driftreport postmunge metrics: comparable</li>\n</ul>\n</li>\n<li>new processing functions nmr7/nmr8/nmr9/nmc7/nmc8/nmc9:\n<ul>\n<li>comparable to functions nmrc/nmr2/nmr3/nmcm/nmc2/nmc3</li>\n<li>but implements string parsing only for unique test set entries not found in train set</li>\n<li>for more efficient test set processing in automunge and postmunge</li>\n<li>(less efficient than nmr4/nmc4 etc but captures outlier points as may not be unusual in continuous distributions)</li>\n<li>default infill: comparable</li>\n<li>default NArowtype: comparable</li>\n<li>suffix appender: same format, updated per the new category</li>\n<li>assignparam parameters accepted: comparable</li>\n<li>driftreport postmunge metrics: overlap_dict / mean / maximum / minimum / unique_list / maxlength</li>\n</ul>\n</li>\n</ul>\n<h3>Multi-tier String Parsing</h3>\n<ul>\n<li>new processing root categories or11 / or12 / or13 / or14 / or15 / or16 / or17 / or18 / or19 / or20\n<ul>\n<li>or11 / or13 intended for categorical sets that may include multiple tiers of overlaps\nand include base binary encoding via 1010 supplemented by tiers of string parsing for\noverlaps using spl2 and spl5, or11 has two tiers of overlap string parsing, or13 has three,\neach parsing returned with an ordinal encoding sorted by frequency (ord3)</li>\n<li>or12 / or14 are comparable to or11 / or13 but include an additional supplemental\ntransform of string parsing for numerical entries with nmrc followed by a z-score normalization\nof returned numbers via nmbr</li>\n<li>or15 / or16 / or17 / or18 comparable to or11 / or12 / or13 / or14 but incorporate an\nUPCS transform upstream and make use of spl9/sp10 instead of spl2/spl5 for assumption that\nset of unique values in test set is same or subset of train set for more efficient postmunge</li>\n<li>or19 / or20 comparable to or16 / or18 but replace the 'nmrc' string parsing for numeric entries\nwith nmc8 which allows comma characters in numbers and makes use of consistent assumption to\nspl9/sp10 that set of unique values in test set is same or subset of train for efficient psotmunge</li>\n<li>assignparam parameters accepted: 'minsplit': indicating lowest character length for recognized overlaps\n(note that parameter has to be assigned to specific categories such as spl2/spl5 etc)</li>\n<li>driftreport postmunge metrics: comparable to constituent functions</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>List of Root Categories</h3>\n<p>Here are those root categories presented again in a concise sorted list, intended as reference so user can\navoid unintentional duplication.</p>\n<ul>\n<li>'1010',</li>\n<li>'101d',</li>\n<li>'MAD2',</li>\n<li>'MAD3',</li>\n<li>'MADn',</li>\n<li>'NAr2',</li>\n<li>'NAr3',</li>\n<li>'NAr4',</li>\n<li>'NAr5',</li>\n<li>'NArw',</li>\n<li>'U101',</li>\n<li>'Ucct',</li>\n<li>'UPCS',</li>\n<li>'Uor2',</li>\n<li>'Uor3',</li>\n<li>'Uor6',</li>\n<li>'Uord',</li>\n<li>'Utx2',</li>\n<li>'Utx3',</li>\n<li>'Utxt',</li>\n<li>'absl',</li>\n<li>'addd',</li>\n<li>'bins',</li>\n<li>'bint',</li>\n<li>'bkt1',</li>\n<li>'bkt2',</li>\n<li>'bkt3',</li>\n<li>'bkt4',</li>\n<li>'bn7o',</li>\n<li>'bn9o',</li>\n<li>'bnKo',</li>\n<li>'bnMo',</li>\n<li>'bne7',</li>\n<li>'bne9',</li>\n<li>'bneo',</li>\n<li>'bnep',</li>\n<li>'bnr2',</li>\n<li>'bnrd',</li>\n<li>'bnry',</li>\n<li>'bnwK',</li>\n<li>'bnwM',</li>\n<li>'bnwd',</li>\n<li>'bnwo',</li>\n<li>'bshr',</li>\n<li>'bsor',</li>\n<li>'bxc2',</li>\n<li>'bxc3',</li>\n<li>'bxc4',</li>\n<li>'bxc5',</li>\n<li>'bxcx',</li>\n<li>'copy',</li>\n<li>'d2d2',</li>\n<li>'d2dt',</li>\n<li>'d3d2',</li>\n<li>'d3dt',</li>\n<li>'d4d2',</li>\n<li>'d4dt',</li>\n<li>'d5d2',</li>\n<li>'d5dt',</li>\n<li>'d6d2',</li>\n<li>'d6dt',</li>\n<li>'dat2',</li>\n<li>'dat3',</li>\n<li>'dat4',</li>\n<li>'dat5',</li>\n<li>'dat6',</li>\n<li>'datd',</li>\n<li>'date',</li>\n<li>'day2',</li>\n<li>'day3',</li>\n<li>'day4',</li>\n<li>'day5',</li>\n<li>'days',</li>\n<li>'ddd2',</li>\n<li>'ddd3',</li>\n<li>'ddd4',</li>\n<li>'ddd5',</li>\n<li>'ddd6',</li>\n<li>'dddt',</li>\n<li>'ded2',</li>\n<li>'ded3',</li>\n<li>'ded4',</li>\n<li>'ded5',</li>\n<li>'ded6',</li>\n<li>'dedt',</li>\n<li>'dhmc',</li>\n<li>'dhms',</li>\n<li>'divd',</li>\n<li>'dxd2',</li>\n<li>'dxdt',</li>\n<li>'dycs',</li>\n<li>'dysn',</li>\n<li>'exc2',</li>\n<li>'exc3',</li>\n<li>'exc4',</li>\n<li>'exc5',</li>\n<li>'exc6',</li>\n<li>'excl',</li>\n<li>'hldy',</li>\n<li>'hmsc',</li>\n<li>'hmss',</li>\n<li>'hour',</li>\n<li>'hrcs',</li>\n<li>'hrs2',</li>\n<li>'hrs3',</li>\n<li>'hrs4',</li>\n<li>'hrsn',</li>\n<li>'lb10',</li>\n<li>'lbbn',</li>\n<li>'lbda',</li>\n<li>'lbnm',</li>\n<li>'lbor',</li>\n<li>'lbte',</li>\n<li>'lgnm',</li>\n<li>'lngt',</li>\n<li>'lnlg',</li>\n<li>'log0',</li>\n<li>'log1',</li>\n<li>'logn',</li>\n<li>'mdcs',</li>\n<li>'mdsn',</li>\n<li>'mea2',</li>\n<li>'mea3',</li>\n<li>'mean',</li>\n<li>'mics',</li>\n<li>'min2',</li>\n<li>'min3',</li>\n<li>'min4',</li>\n<li>'mint',</li>\n<li>'misn',</li>\n<li>'mltp',</li>\n<li>'mmd2',</li>\n<li>'mmd3',</li>\n<li>'mmd4',</li>\n<li>'mmd5',</li>\n<li>'mmd6',</li>\n<li>'mmdx',</li>\n<li>'mmor',</li>\n<li>'mncs',</li>\n<li>'mnm2',</li>\n<li>'mnm3',</li>\n<li>'mnm4',</li>\n<li>'mnm5',</li>\n<li>'mnm6',</li>\n<li>'mnm7',</li>\n<li>'mnmx',</li>\n<li>'mnsn',</li>\n<li>'mnt2',</li>\n<li>'mnt3',</li>\n<li>'mnt4',</li>\n<li>'mnt5',</li>\n<li>'mnt6',</li>\n<li>'mnth',</li>\n<li>'mnto',</li>\n<li>'mnts',</li>\n<li>'mscs',</li>\n<li>'mssn',</li>\n<li>'nbr2',</li>\n<li>'nbr3',</li>\n<li>'nmbd',</li>\n<li>'nmbr',</li>\n<li>'nmc2',</li>\n<li>'nmc3',</li>\n<li>'nmc4',</li>\n<li>'nmc5',</li>\n<li>'nmc6',</li>\n<li>'nmc7',</li>\n<li>'nmc8',</li>\n<li>'nmc9',</li>\n<li>'nmcm',</li>\n<li>'nmd2',</li>\n<li>'nmd3',</li>\n<li>'nmd4',</li>\n<li>'nmd5',</li>\n<li>'nmd6',</li>\n<li>'nmdx',</li>\n<li>'nmr2',</li>\n<li>'nmr3',</li>\n<li>'nmr4',</li>\n<li>'nmr5',</li>\n<li>'nmr6',</li>\n<li>'nmr7',</li>\n<li>'nmr8',</li>\n<li>'nmr9',</li>\n<li>'nmrc',</li>\n<li>'nuld',</li>\n<li>'null',</li>\n<li>'om10',</li>\n<li>'or10',</li>\n<li>'or11',</li>\n<li>'or12',</li>\n<li>'or13',</li>\n<li>'or14',</li>\n<li>'or15',</li>\n<li>'or16',</li>\n<li>'or17',</li>\n<li>'or18',</li>\n<li>'or19',</li>\n<li>'or20',</li>\n<li>'ord2',</li>\n<li>'ord3',</li>\n<li>'ord4',</li>\n<li>'ordd',</li>\n<li>'ordl',</li>\n<li>'ors2',</li>\n<li>'ors5',</li>\n<li>'ors6',</li>\n<li>'ors7',</li>\n<li>'por2',</li>\n<li>'pwor',</li>\n<li>'pwr2',</li>\n<li>'pwrs',</li>\n<li>'rais',</li>\n<li>'retn',</li>\n<li>'sbtr',</li>\n<li>'sccs',</li>\n<li>'scn2',</li>\n<li>'scnd',</li>\n<li>'scsn',</li>\n<li>'shfl',</li>\n<li>'sp10',</li>\n<li>'sp11',</li>\n<li>'sp12',</li>\n<li>'sp13',</li>\n<li>'sp14',</li>\n<li>'spl2',</li>\n<li>'spl3',</li>\n<li>'spl4',</li>\n<li>'spl5',</li>\n<li>'spl6',</li>\n<li>'spl7',</li>\n<li>'spl8',</li>\n<li>'spl9',</li>\n<li>'splt',</li>\n<li>'sqrt',</li>\n<li>'src2',</li>\n<li>'src3',</li>\n<li>'srch',</li>\n<li>'texd',</li>\n<li>'text',</li>\n<li>'tlbn',</li>\n<li>'txt2',</li>\n<li>'txt3',</li>\n<li>'ucct',</li>\n<li>'wkdo',</li>\n<li>'wkds',</li>\n<li>'wkdy',</li>\n<li>'yea2',</li>\n<li>'year'</li>\n</ul>\n<hr>\n<h3>List of Suffix Appenders</h3>\n<p>The convention is that each transform returns a derived column or set of columns which are distinguished\nfrom the source column by suffix appenders to the header strings. Note that in cases of root categories\nwhose family trees include multiple generations, there may be multiple inclusions of different suffix\nappenders in a single returned column. Provided here is a concise sorted list of all suffix appenders so\nthat any user passing a custom defined transformation can avoid any unintentional duplication.</p>\n<ul>\n<li>'_:;:_temp'</li>\n<li>'_-10^' + i (where i is an integer corresponding to the source number power of ten)</li>\n<li>'_10^' + i (where i is an integer corresponding to the source number power of ten)</li>\n<li>'_1010_' + i (where i is an integer corresponding to the ith digit of the binary encoding)</li>\n<li>'_absl'</li>\n<li>'_addd'</li>\n<li>'_bins_s-10'</li>\n<li>'_bins_s-21'</li>\n<li>'_bins_s+01'</li>\n<li>'_bins_s+12'</li>\n<li>'_bins_s&lt;-2'</li>\n<li>'_bins_s&gt;+2'</li>\n<li>'_bint_t-10'</li>\n<li>'_bint_t-21'</li>\n<li>'_bint_t+01'</li>\n<li>'_bint_t+12'</li>\n<li>'_bint_t&lt;-2'</li>\n<li>'_bint_t&gt;+2'</li>\n<li>'_bkt1_' + i (where i is identifier of bin)</li>\n<li>'_bkt2_' + i (where i is identifier of bin)</li>\n<li>'_bkt3_' + i (where i is identifier of bin)</li>\n<li>'_bkt4_' + i (where i is identifier of bin)</li>\n<li>'_bn7o'</li>\n<li>'_bn9o'</li>\n<li>'_bne7_' + i (where i is identifier of bin)</li>\n<li>'_bne9_' + i (where i is identifier of bin)</li>\n<li>'_bneo'</li>\n<li>'_bnep_' + i (where i is identifier of bin)</li>\n<li>'_bnKo'</li>\n<li>'_bnMo'</li>\n<li>'_bnr2'</li>\n<li>'_bnry'</li>\n<li>'_bnwd_' + i + '_' + j (where i is bin width and j is identifier of bin)</li>\n<li>'_bnwK_' + i + '_' + j (where i is bin width and j is identifier of bin)</li>\n<li>'_bnwM_' + i + '_' + j (where i is bin width and j is identifier of bin)</li>\n<li>'_bnwo'</li>\n<li>'_bshr'</li>\n<li>'_bsor'</li>\n<li>'_bxcx'</li>\n<li>'_copy'</li>\n<li>'_days'</li>\n<li>'_dhmc'</li>\n<li>'_dhms'</li>\n<li>'_divd'</li>\n<li>'_dxd2'</li>\n<li>'_dxdt'</li>\n<li>'_dycs'</li>\n<li>'_dysn'</li>\n<li>'_exc2'</li>\n<li>'_exc5'</li>\n<li>'_exc6'</li>\n<li>'_excl'</li>\n<li>'_hldy'</li>\n<li>'_hmsc'</li>\n<li>'_hmss'</li>\n<li>'_hour'</li>\n<li>'_hrcs'</li>\n<li>'_hrsn'</li>\n<li>'_lngt'</li>\n<li>'_log0'</li>\n<li>'_logn'</li>\n<li>'_MAD3'</li>\n<li>'_MADn'</li>\n<li>'_mdcs'</li>\n<li>'_mdsn'</li>\n<li>'_mean'</li>\n<li>'_mics'</li>\n<li>'_mint'</li>\n<li>'_misn'</li>\n<li>'_mltp'</li>\n<li>'_mncs'</li>\n<li>'_mnm3'</li>\n<li>'_mnm6'</li>\n<li>'_mnmx'</li>\n<li>'_mnsn'</li>\n<li>'_mnth'</li>\n<li>'_mnts'</li>\n<li>'_mscs'</li>\n<li>'_mssn'</li>\n<li>'_NArw'</li>\n<li>'_nmbr'</li>\n<li>'_nmc4'</li>\n<li>'_nmc7'</li>\n<li>'_nmcm'</li>\n<li>'_nmr4'</li>\n<li>'_nmr7'</li>\n<li>'_nmrc'</li>\n<li>'_ord3'</li>\n<li>'_ordl'</li>\n<li>'_por2'</li>\n<li>'_pwor'</li>\n<li>'_rais'</li>\n<li>'_retn'</li>\n<li>'_sbtr'</li>\n<li>'_sccs'</li>\n<li>'_scnd'</li>\n<li>'_scsn'</li>\n<li>'_shfl'</li>\n<li>'_sp10'</li>\n<li>'_spl2'</li>\n<li>'_spl5'</li>\n<li>'_spl7'</li>\n<li>'_spl8_' + string (where string is an identified overlap of characters between categorical entries)</li>\n<li>'_spl9'</li>\n<li>'_splt_' + string (where string is an identified overlap of characters between categorical entries)</li>\n<li>'_sqrt'</li>\n<li>'_src2_' + string (where string is an identified overlap of characters with user passed search string)</li>\n<li>'_src3_' + string (where string is an identified overlap of characters with user passed search string)</li>\n<li>'_srch_' + string (where string is an identified overlap of characters with user passed search string)</li>\n<li>'_tlbn_' + i (where i is identifier of bin)</li>\n<li>'_text_' + string (where string is a categorical entry in one-hot encoded set)</li>\n<li>'_ucct'</li>\n<li>'_UPCS'</li>\n<li>'_wkds'</li>\n<li>'_wkdy'</li>\n<li>'_year'</li>\n</ul>\n<hr>\n<h3>Root Category Family Tree Definitions</h3>\n<p>And here are the family tree definitions for root categories currently built into the internal\nlibrary. Basically providing this as a reference, not really expecting anyone to read this line\nby line or anything. (Note that the NArw transformation without quotation marks (eg NArw\nvs 'NArw') will not be activated if user passes the automunge(.) parameter as NArw_marker=False.)\nIf you want to skip to the next section you can click here: <a href=\"https://github.com/Automunge/AutoMunge#custom-transformation-functions\" rel=\"nofollow\">Custom Transformation Functions</a></p>\n<pre><code>    transform_dict.update({'nmbr' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : [bint]}})\n\n    transform_dict.update({'dxdt' : {'parents' : ['dxdt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d2dt' : {'parents' : ['d2dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dxdt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d3dt' : {'parents' : ['d3dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d2dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d4dt' : {'parents' : ['d4dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d3dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d5dt' : {'parents' : ['d5dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d4dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d6dt' : {'parents' : ['d6dt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d5dt'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dxd2' : {'parents' : ['dxd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d2d2' : {'parents' : ['d2d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dxd2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d3d2' : {'parents' : ['d3d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d2d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d4d2' : {'parents' : ['d4d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d3d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d5d2' : {'parents' : ['d5d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d4d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'d6d2' : {'parents' : ['d6d2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['d5d2'], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmdx' : {'parents' : ['nmdx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['dxdt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd2' : {'parents' : ['nmd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d2dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd3' : {'parents' : ['nmd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d3dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd4' : {'parents' : ['nmd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d4dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd5' : {'parents' : ['nmd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d5dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmd6' : {'parents' : ['nmd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['d6dt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['retn'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmdx' : {'parents' : ['mmdx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd2' : {'parents' : ['mmd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmdx'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd3' : {'parents' : ['mmd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd2'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd4' : {'parents' : ['mmd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd3'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd5' : {'parents' : ['mmd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd4'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmd6' : {'parents' : ['mmd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nbr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['mmd5'], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dddt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dddt', 'exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd2' : {'parents' : ['ddd2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dddt'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd3' : {'parents' : ['ddd3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd2'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd4' : {'parents' : ['ddd4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd3'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd5' : {'parents' : ['ddd5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd4'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ddd6' : {'parents' : ['ddd6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ddd5'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dedt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dedt', 'exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded2' : {'parents' : ['ded2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['dedt'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded3' : {'parents' : ['ded3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded2'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded4' : {'parents' : ['ded4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded3'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded5' : {'parents' : ['ded5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded4'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ded6' : {'parents' : ['ded6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['ded5'], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnry' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'text' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'txt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw, 'splt'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'txt3' : {'parents' : ['txt3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lngt' : {'parents' : ['lngt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lnlg' : {'parents' : ['lnlg'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['log0'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'UPCS' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['UPCS'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Utxt' : {'parents' : ['Utxt'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Utx2' : {'parents' : ['Utx2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : ['splt']}})\n\n    transform_dict.update({'Utx3' : {'parents' : ['Utx3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['txt3'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Ucct' : {'parents' : ['Ucct'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ucct', 'ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uord' : {'parents' : ['Uord'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor2' : {'parents' : ['Uor2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['ord2'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor3' : {'parents' : ['Uor3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'Uor6' : {'parents' : ['Uor6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['spl6'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'U101' : {'parents' : ['U101'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'splt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['splt'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl2' : {'parents' : ['spl2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl3' : {'parents' : ['spl2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl4' : {'parents' : ['spl4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['spl3'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl5' : {'parents' : ['spl5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl6' : {'parents' : ['spl6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['splt'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['ord3']}})\n\n    transform_dict.update({'spl7' : {'parents' : ['spl7'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl8' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['spl8'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'spl9' : {'parents' : ['spl9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ordl'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp10' : {'parents' : ['sp10'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'srch' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['srch'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'src2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['src2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'src3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['src3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmrc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmrc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr2' : {'parents' : ['nmr2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr3' : {'parents' : ['nmr3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmr4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr5' : {'parents' : ['nmr5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr6' : {'parents' : ['nmr6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmr7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr8' : {'parents' : ['nmr8'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmr9' : {'parents' : ['nmr9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmcm' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmcm'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc2' : {'parents' : ['nmc2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc3' : {'parents' : ['nmc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmc4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc5' : {'parents' : ['nmc5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc6' : {'parents' : ['nmc6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmc7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc8' : {'parents' : ['nmc8'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmc9' : {'parents' : ['nmc9'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['mnmx'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors7' : {'parents' : ['spl6', 'nmr2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors5' : {'parents' : ['spl5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors6' : {'parents' : ['spl6'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ordl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ordl'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord2' : {'parents' : ['ord2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ucct' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ucct'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ord4' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ors2' : {'parents' : ['spl3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or10' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or11' : {'parents' : ['sp11'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or12' : {'parents' : ['nmr2'], \\\n                                     'siblings': ['sp11'], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or13' : {'parents' : ['sp12'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or14' : {'parents' : ['nmr2'], \\\n                                     'siblings': ['sp12'], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or15' : {'parents' : ['or15'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['sp13'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or16' : {'parents' : ['or16'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmr2'], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or17' : {'parents' : ['or17'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['sp14'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or18' : {'parents' : ['or18'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmr2'], \\\n                                     'niecesnephews' : ['sp14'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp13' : {'parents' : ['sp13'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp10'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp14' : {'parents' : ['sp14'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or19' : {'parents' : ['or19'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmc8'], \\\n                                     'niecesnephews' : ['sp13'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'or20' : {'parents' : ['or20'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmc8'], \\\n                                     'niecesnephews' : ['sp14'], \\\n                                     'coworkers' : ['1010'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp11' : {'parents' : ['sp11'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['spl5'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sp12' : {'parents' : ['sp12'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : ['sp11'], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'om10' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010', 'mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['mnmx'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mmor' : {'parents' : ['ord4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'1010' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'null' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['null'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NArw' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NArw'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr3'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr4'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'NAr5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['NAr5'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nbr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['nmbr'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nbr3' : {'parents' : ['nbr3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['bint']}})\n\n    transform_dict.update({'MADn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['MADn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'MAD2' : {'parents' : ['MAD2'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'MAD3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['MAD3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnmx' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm2' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm3' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : ['nmbr', NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnm6'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnm7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx', 'bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'retn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['retn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mean' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mea2' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mea3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mean', 'bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'date' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mnth', 'days', 'hour', 'mint', 'scnd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mnsn', 'mncs', 'dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'dysn', 'dycs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dat6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'year' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'yea2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnth' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnth'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn', 'mncs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn', 'mncs', 'dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnt6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn', 'mdcs', 'dysn', 'dycs', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mncs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mncs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mdsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mdcs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mdcs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'days' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['days'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn', 'dycs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn', 'dycs', 'hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms', 'dhmc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'day5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms', 'dhmc', 'hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dysn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dysn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dycs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dycs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dhms' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhms'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'dhmc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['dhmc'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hour' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hour'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn', 'hrcs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn', 'hrcs', 'misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrs4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmss', 'hmsc'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hrcs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hrcs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hmss' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmss'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hmsc' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hmsc'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mint' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mint'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn', 'mics'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn', 'mics', 'scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'min4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mssn', 'mscs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'misn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['misn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mics' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mics'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mssn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mssn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mscs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mscs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scnd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scnd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scn2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scsn', 'sccs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'scsn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['scsn'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sccs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sccs'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxcx' : {'parents' : ['bxcx'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nmbr'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc2' : {'parents' : ['bxc2'], \\\n                                     'siblings': ['nmbr'], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc3' : {'parents' : ['bxc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : ['nmbr'], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc4' : {'parents' : ['bxc4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bxc5' : {'parents' : ['bxc5'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mnmx'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nbr2', 'bins'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwrs' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwrs'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwr2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'log0' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['log0'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'log1' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['log0', 'pwr2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'logn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['logn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lgnm' : {'parents' : ['lgnm'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['nmbr'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sqrt' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sqrt'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'addd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['addd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'sbtr' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['sbtr'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mltp' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['mltp'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'divd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['divd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'rais' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['rais'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'absl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['absl'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt1' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt1'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt3' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bkt4' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bkt4'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkdy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['wkdy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bshr' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bshr'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'hldy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['hldy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkds' : {'parents' : ['wkds'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'wkdo' : {'parents' : ['wkdo'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnts' : {'parents' : ['mnts'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['text'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'mnto' : {'parents' : ['mnto'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : ['ord3'], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bins' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bins'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bint' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bint'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bsor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bsor'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwd'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwK' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwK'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwM' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwM'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnwo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnwo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnKo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnKo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnMo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnMo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})    \n\n    transform_dict.update({'bnep' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnep'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bne7' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bne7'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bne9' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bne9'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bneo' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bneo'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bn7o' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bn7o'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'tlbn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['tlbn'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bn9o' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bn9o'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'pwor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['pwor'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'por2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['por2'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'copy' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['copy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'excl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : ['excl'], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc2' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc3' : {'parents' : ['exc3'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['bins']}})\n\n    transform_dict.update({'exc4' : {'parents' : ['exc4'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : ['pwr2']}})\n\n    transform_dict.update({'exc5' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc5'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'exc6' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc6'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'shfl' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['shfl'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nmbd' : {'parents' : ['nmbr'], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : [], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : [bint]}})\n\n    transform_dict.update({'101d' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['1010'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'ordd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'texd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'bnrd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'datd' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [NArw], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'nuld' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['null'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbnm' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['exc2'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lb10' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbor' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['ord3'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbte' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['text'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbbn' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['bnry'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n\n    transform_dict.update({'lbda' : {'parents' : [], \\\n                                     'siblings': [], \\\n                                     'auntsuncles' : ['year', 'mdsn', 'mdcs', 'hmss', 'hmsc', 'bshr', 'wkdy', 'hldy'], \\\n                                     'cousins' : [], \\\n                                     'children' : [], \\\n                                     'niecesnephews' : [], \\\n                                     'coworkers' : [], \\\n                                     'friends' : []}})\n</code></pre>\n<p>...</p>\n<h2>Custom Transformation Functions</h2>\n<p>Ok final item on the agenda, we're going to demonstrate methods to create custom\ntransformation functions, such that a user may customize the feature engineering\nwhile building on all of the extremely useful built in features of automunge such\nas infill methods including ML infill, feature importance, dimensionality reduction,\npreparation for class imbalance oversampling, and perhaps most importantly the\nsimplest possible way for consistent processing of additional data with just a single\nfunction call. The transformation functions will need to be channeled through pandas\nand incorporate a handful of simple data structures, which we'll demonstrate below.</p>\n<p>Let's say we want to recreate the mm3 category which caps outliers at 0.01 and 0.99\nquantiles, but instead make it the 0.001 and 0.999 quantiles. Well we'll call this\ncategory mnm8. So in order to pass a custom transformation function, first we'll need\nto define a new root category transformdict and a corresponding processdict.</p>\n<pre><code>#Let's create a really simple family tree for the new root category mnmn8 which\n#simply creates a column identifying any rows subject to infill (NArw), performs \n#a z-score normalization, and separately performs a version of the new transform\n#mnm8 which we'll define below.\n\ntransformdict = {'mnm8' : {'parents' : [], \\\n                           'siblings': [], \\\n                           'auntsuncles' : ['mnm8', 'nmbr'], \\\n                           'cousins' : ['NArw'], \\\n                           'children' : [], \\\n                           'niecesnephews' : [], \\\n                           'coworkers' : [], \\\n                           'friends' : []}, \\\n\n#Note that since this mnm8 requires passing normalization parameters derived\n#from the train set to process the test set, we'll need to create two seperate \n#transformation functions, the first a \"dualprocess\" function that processes\n#both the train and if available a test set simultaneously, and the second\n#a \"postprocess\" that only processes the test set on it's own.\n\n#So what's being demonstrated here is that we're passing the functions under\n#dualprocess and postprocess that we'll define below.\n\nprocessdict = {'mnm8' : {'dualprocess' : process_mnm8_class, \\\n                         'singleprocess' : None, \\\n                         'postprocess' : postprocess_mnm8_class, \\\n                         'NArowtype' : 'numeric', \\\n                         'MLinfilltype' : 'numeric', \\\n                         'labelctgy' : 'mnm8'}}\n\n#Now we have to define the custom processing functions which we are passing through\n#the processdict to automunge.\n\n#Here we'll define a \"dualprocess\" function intended to process both a train and\n#test set simultaneously. We'll also need to create a seperate \"postprocess\"\n#function intended to just process a subsequent test set.\n\n#define the function\ndef process_mnm8_class(mdf_train, mdf_test, column, category, \\\n                       postprocess_dict, params = {}):\n  #where\n  #mdf_train is the train data set (pandas dataframe)\n  #mdf_test is the consistently formatted test dataset (if no test data \n  #set is passed to automunge a small dummy set will be passed in it's place)\n  #column is the string identifying the column header\n  #category is the (traditionally 4 character) string category identifier, here is \n  #will be 'mnm8', \n  #postprocess_dict is an object we pass to share data between \n  #functions and later returned from automunge\n  #and params are any column specific parameters to be passed by user in assignparam\n\n  #first, if this function accepts any parameters (it doesn't but just to demonstrate)\n  #we'll access those parameters from params, otherwise assign default values\n  #if 'parameter1' in params:\n  #  mnm8_parameter = params['parameter1']\n  #else:\n  #  mnm8_parameter = (some default value)\n\n  #create the new column, using the category key as a suffix identifier\n\n  #copy source column into new column\n  mdf_train[column + '_mnm8'] = mdf_train[column].copy()\n  mdf_test[column + '_mnm8'] = mdf_test[column].copy()\n\n\n  #perform an initial infill method, here we use mean as a plug, automunge\n  #will separately perform a infill method per user specifications elsewhere\n  #convert all values to either numeric or NaN\n  mdf_train[column + '_mnm8'] = pd.to_numeric(mdf_train[column + '_mnm8'], errors='coerce')\n  mdf_test[column + '_mnm8'] = pd.to_numeric(mdf_test[column + '_mnm8'], errors='coerce')\n\n  #if we want to collect any statistics for the driftreport we could do so prior\n  #to transformations and save them in the normalization dictionary below with the\n  #other normalization parameters, e.g.\n  min = mdf_train[column + '_mnm8'].min()\n  max = mdf_train[column + '_mnm8'].max()\n\n  #Now we do the specifics of the processing function, here we're demonstrating\n  #the min-max scaling method capping values at 0.001 and 0.999 quantiles\n  #in some cases we would address infill first, here to preserve the quantile evaluation\n  #we'll do that first\n\n  #get high quantile of training column for min-max scaling\n  quantilemax = mdf_train[column + '_mnm8'].quantile(.999)\n\n  #outlier scenario for when data wasn't numeric (nan != nan)\n  if quantilemax != quantilemax:\n    quantilemax = 0\n\n  #get low quantile of training column for min-max scaling\n  quantilemin = mdf_train[column + '_mnm8'].quantile(.001)\n\n  if quantilemax != quantilemax:\n    quantilemax = 0\n\n  #replace values &gt; quantilemax with quantilemax for both train and test data\n  mdf_train.loc[mdf_train[column + '_mnm8'] &gt; quantilemax, (column + '_mnm8')] \\\n  = quantilemax\n  mdf_test.loc[mdf_train[column + '_mnm8'] &gt; quantilemax, (column + '_mnm8')] \\\n  = quantilemax\n\n  #replace values &lt; quantile10 with quantilemin for both train and test data\n  mdf_train.loc[mdf_train[column + '_mnm8'] &lt; quantilemin, (column + '_mnm8')] \\\n  = quantilemin\n  mdf_test.loc[mdf_train[column + '_mnm8'] &lt; quantilemin, (column + '_mnm8')] \\\n  = quantilemin\n\n\n  #note the infill method is now completed after the quantile evaluation / replacement\n  #get mean of training data for infill\n  mean = mdf_train[column + '_mnm8'].mean()\n\n  if mean != mean:\n    mean = 0\n\n  #replace missing data with training set mean\n  mdf_train[column + '_mnm8'] = mdf_train[column + '_mnm8'].fillna(mean)\n  mdf_test[column + '_mnm8'] = mdf_test[column + '_mnm8'].fillna(mean)\n\n  #this is to avoid outlier div by zero when max = min\n  maxminusmin = quantilemax - quantilemin\n  if maxminusmin == 0:\n    maxminusmin = 1\n\n  #perform min-max scaling to train and test sets using values derived from train\n  mdf_train[column + '_mnm8'] = (mdf_train[column + '_mnm8'] - quantilemin) / \\\n                                (maxminusmin)\n  mdf_test[column + '_mnm8'] = (mdf_test[column + '_mnm8'] - quantilemin) / \\\n                               (maxminusmin)\n\n\n  #ok here's where we populate the data structures\n\n  #create list of columns (here it will only be one column returned)\n  nmbrcolumns = [column + '_mnm8']\n\n  #The normalization dictionary is how we pass values between the \"dualprocess\"\n  #function and the \"postprocess\" function. This is also where we save any metrics\n  #we want to track such as to track drift in the postmunge driftreport.\n\n  #Here we populate the normalization dictionary with any values derived from\n  #the train set that we'll need to process the test set.\n  nmbrnormalization_dict = {column + '_mnm8' : {'quantilemin' : quantilemin, \\\n                                                'quantilemax' : quantilemax, \\\n                                                'mean' : mean, \\\n                                                'minimum' : min, \\\n                                                'maximum' : max}}\n\n  #the column_dict_list is returned from the function call and supports the \n  #automunge methods. We populate it as follows:\n\n  #initialize\n  column_dict_list = []\n\n  #where we're storing following\n  #{'category' : 'mnm8', \\ -&gt; identifier of the category fo transform applied\n  # 'origcategory' : category, \\ -&gt; category of original column in train set, passed in function call\n  # 'normalization_dict' : nmbrnormalization_dict, \\ -&gt; normalization parameters of train set\n  # 'origcolumn' : column, \\ -&gt; ID of original column in train set\n  # 'columnslist' : nmbrcolumns, \\ -&gt; a list of columns created in this transform, \n  #                                  later fleshed out to include all columns derived from same source column\n  # 'categorylist' : [nc], \\ -&gt; a list of columns created in this transform\n  # 'infillmodel' : False, \\ -&gt; populated elsewhere, for now enter False\n  # 'infillcomplete' : False, \\ -&gt; populated elsewhere, for now enter False\n  # 'deletecolumn' : False}} -&gt; populated elsewhere, for now enter False\n\n  #for column in nmbrcolumns\n  for nc in nmbrcolumns:\n\n    column_dict = { nc : {'category' : 'mnm8', \\\n                          'origcategory' : category, \\\n                          'normalization_dict' : nmbrnormalization_dict, \\\n                          'origcolumn' : column, \\\n                          'inputcolumn' : column, \\\n                          'columnslist' : nmbrcolumns, \\\n                          'categorylist' : nmbrcolumns, \\\n                          'infillmodel' : False, \\\n                          'infillcomplete' : False, \\\n                          'deletecolumn' : False}}\n\n    column_dict_list.append(column_dict.copy())\n\n\n\n  return mdf_train, mdf_test, column_dict_list\n\n  #where mdf_train and mdf_test now have the new column incorporated\n  #and column_dict_list carries the data structures supporting the operation \n  #of automunge. (If the original column was intended for replacement it \n  #will be stricken elsewhere)\n\n\n#and then since this is a method that passes values between the train\n#and test sets, we'll need to define a corresponding \"postprocess\" function\n#intended for use on just the test set\n\ndef postprocess_mnm3_class(mdf_test, column, postprocess_dict, columnkey, params={}):\n  #where mdf_test is a dataframe of the test set\n  #column is the string of the column header\n  #postprocess_dict is how we carry packets of data between the \n  #functions in automunge and postmunge\n  #columnkey is a key used to access stuff in postprocess_dict if needed\n  #(columnkey is only valid for initial root categories, if you want to use function\n  #as a downstream category we have to recreate a columnkey such as follows for normkey)\n  #and params are any column specific parameters to be passed by user in assignparam\n\n  #retrieve normalization parameters from postprocess_dict\n  #normkey is the column returned from original transformation, a key used to access parameters\n  normkey = column + '_mnm8'\n\n  mean = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['mean']\n\n  quantilemin = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['quantilemin']\n\n  quantilemax = \\\n  postprocess_dict['column_dict'][normkey]['normalization_dict'][normkey]['quantilemax']\n\n  #(note that for cases where you might not know the suffix that was appended in advance,\n  #I have a few methods to retrieve a normkey using properties of data structures, contact\n  #the author and I can point you to them.)\n\n  #copy original column for implementation\n  mdf_test[column + '_mnm8'] = mdf_test[column].copy()\n\n\n  #convert all values to either numeric or NaN\n  mdf_test[column + '_mnm8'] = pd.to_numeric(mdf_test[column + '_mnm8'], errors='coerce')\n\n  #get mean of training data\n  mean = mean  \n\n  #replace missing data with training set mean\n  mdf_test[column + '_mnm8'] = mdf_test[column + '_mnm8'].fillna(mean)\n\n  #this is to avoid outlier div by zero when max = min\n  maxminusmin = quantilemax - quantilemin\n  if maxminusmin == 0:\n    maxminusmin = 1\n\n  #perform min-max scaling to test set using values from train\n  mdf_test[column + '_mnm8'] = (mdf_test[column + '_mnm8'] - quantilemin) / \\\n                               (maxminusmin)\n\n\n  return mdf_test\n\n#Voila\n\n#One more demonstration, note that if we didn't need to pass any properties\n#between the train and test set, we could have just processed one at a time,\n#and in that case we wouldn't need to define separate functions for \n#dualprocess and postprocess, we could just define what we call a singleprocess \n#function incorporating similar data structures but passing only a single dataframe.\n\n#Such as:\ndef process_mnm8_class(df, column, category, postprocess_dict, params = {}):\n\n  #etc\n\n  return df, column_dict_list\n\n#For a full demonstration check out my essay \n\"Automunge 1.79: An Open Source Platform for Feature Engineering\"\n\n\n</code></pre>\n<h2>Conclusion</h2>\n<p>And there you have it, you now have all you need to prepare data for\nmachine learning with the Automunge platform. Feedback is welcome.</p>\n<p>...</p>\n<p>As a citation, please note that the Automunge package makes use of\nthe Pandas, Scikit-learn, SciPy stats, and NumPy libraries.</p>\n<p>Wes McKinney. Data Structures for Statistical Computing in Python,\nProceedings of the 9th Python in Science Conference, 51-56 (2010)\n<a href=\"http://conference.scipy.org/proceedings/scipy2010/mckinney.html\" rel=\"nofollow\">publisher\nlink</a></p>\n<p>Fabian Pedregosa, Ga\u00ebl Varoquaux, Alexandre Gramfort, Vincent Michel,\nBertrand Thirion, Olivier Grisel, Mathieu Blondel, Peter Prettenhofer,\nRon Weiss, Vincent Dubourg, Jake Vanderplas, Alexandre Passos, David\nCournapeau, Matthieu Brucher, Matthieu Perrot, \u00c9douard Duchesnay.\nScikit-learn: Machine Learning in Python, Journal of Machine Learning\nResearch, 12, 2825-2830 (2011) <a href=\"http://jmlr.org/papers/v12/pedregosa11a.html\" rel=\"nofollow\">publisher\nlink</a></p>\n<p>Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler\nReddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren\nWeckesser, Jonathan Bright, St \u0301efan J. van der Walt, Matthew Brett,\nJoshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson,\nEric Jones, Robert Kern, Eric Larson, CJ Carey, Ilhan Polat, Yu Feng,\nEric W. Moore, Jake Vand erPlas, Denis Laxalde, Josef Perktold, Robert\nCim- rman, Ian Henriksen, E. A. Quintero, Charles R Harris, Anne M.\nArchibald, Ant\u02c6onio H. Ribeiro, Fabian Pedregosa, Paul van Mulbregt, and\nSciPy 1. 0 Contributors. SciPy 1.0: Fundamental Algorithms for Scientific\nComputing in Python. Nature Methods, 17:261\u2013 272, 2020.\ndoi: <a href=\"https://doi.org/10.1038/s41592-019-0686-2\" rel=\"nofollow\">https://doi.org/10.1038/s41592-019-0686-2</a>.</p>\n<p>S. van der Walt, S. Colbert, and G. Varoquaux. The numpy array: A\nstructure for efficient numerical computation. Computing in Science\n&amp; Engineering, 13:22\u201330, 2011.</p>\n<p>...</p>\n<p>Have fun munging!!</p>\n<p>...</p>\n<p>You can read more about the tool through the blog posts documenting the\ndevelopment on Medium <a href=\"https://medium.com/automunge\" rel=\"nofollow\">here</a> or for more\nwriting I recently completed my first collection of essays titled \"From\nthe Diaries of John Henry\" which is also available on Medium\n<a href=\"https://turingsquared.com\" rel=\"nofollow\">turingsquared.com</a>.</p>\n<p>The Automunge website is helpfully located at URL\n<a href=\"https://automunge.com\" rel=\"nofollow\">automunge.com</a>.</p>\n<p>...</p>\n<p>This file is part of Automunge which is released under GNU General Public License v3.0.\nSee file LICENSE or go to <a href=\"https://github.com/Automunge/AutoMunge\" rel=\"nofollow\">https://github.com/Automunge/AutoMunge</a> for full license details.</p>\n<p>contact available via automunge.com</p>\n<p>Copyright (C) 2018, 2019, 2020 Nicholas Teague - All Rights Reserved</p>\n<p>Patent Pending, application 16552857</p>\n\n          </div>"}, "last_serial": 7177425, "releases": {"2.55": [{"comment_text": "", "digests": {"md5": "6ccea8d80d34b5d26c5c4ff1d7264f7d", "sha256": "23f0cc5139622ad0cd23592d6c93b3f6b69fc9f40b0a96c18a9a6d536cd5d061"}, "downloads": -1, "filename": "Automunge-2.55-py3-none-any.whl", "has_sig": false, "md5_digest": "6ccea8d80d34b5d26c5c4ff1d7264f7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 120566, "upload_time": "2019-09-22T01:06:54", "upload_time_iso_8601": "2019-09-22T01:06:54.340202Z", "url": "https://files.pythonhosted.org/packages/81/12/483c92790370f47f9da3073b68f963b5515f9e02eea3aba9be0aff103f7d/Automunge-2.55-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58907cfe9c3d4dbec175e633dd1cdad2", "sha256": "dd50c1ecbd9c2721c09517672eaafb164fb898dea34a42cc108e20ebecb2bc75"}, "downloads": -1, "filename": "Automunge-2.55.tar.gz", "has_sig": false, "md5_digest": "58907cfe9c3d4dbec175e633dd1cdad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144519, "upload_time": "2019-09-22T01:06:57", "upload_time_iso_8601": "2019-09-22T01:06:57.665889Z", "url": "https://files.pythonhosted.org/packages/82/eb/7e322a25e33e59a770d33d28c56a8a1b7a730265df2e47ce715543f517d5/Automunge-2.55.tar.gz", "yanked": false}], "2.56": [{"comment_text": "", "digests": {"md5": "981a09496ad01766388dcab11fae9582", "sha256": "a7439e4fee8122d2da2ce4d673a18c7186cf340d69b86a99510cf222e636ae87"}, "downloads": -1, "filename": "Automunge-2.56-py3-none-any.whl", "has_sig": false, "md5_digest": "981a09496ad01766388dcab11fae9582", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 208920, "upload_time": "2019-09-22T01:33:25", "upload_time_iso_8601": "2019-09-22T01:33:25.865976Z", "url": "https://files.pythonhosted.org/packages/f8/d2/6539917655882b90ac312878ac574a9909e079d18f73bf04c31619a80e96/Automunge-2.56-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e4e80de421fb9e513fab02e5a812ce3c", "sha256": "213ddd911127c836224424bc81036c1de6ffcfd44599d4d8796cd99a2f94afcd"}, "downloads": -1, "filename": "Automunge-2.56.tar.gz", "has_sig": false, "md5_digest": "e4e80de421fb9e513fab02e5a812ce3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231289, "upload_time": "2019-09-22T01:33:28", "upload_time_iso_8601": "2019-09-22T01:33:28.010783Z", "url": "https://files.pythonhosted.org/packages/6a/98/41b72a7bab97cc09249254326cbed05b192f0cfde2fdb3b1723e08a32478/Automunge-2.56.tar.gz", "yanked": false}], "2.57": [{"comment_text": "", "digests": {"md5": "7e3480e31705e188e6c086de134ca78b", "sha256": "39a956862c8e624ace388c6f88d7f865be9239283d95058380694a5d30a978c7"}, "downloads": -1, "filename": "Automunge-2.57-py3-none-any.whl", "has_sig": false, "md5_digest": "7e3480e31705e188e6c086de134ca78b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 208924, "upload_time": "2019-09-22T01:53:24", "upload_time_iso_8601": "2019-09-22T01:53:24.180164Z", "url": "https://files.pythonhosted.org/packages/b9/ed/95565bd802a425f6b7a2e99c7e46230d0cdda953d40a61e4819ac06ec538/Automunge-2.57-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9876ed9401009161fc3c3a3a68b3732", "sha256": "b857bbe8a69717ea75d85d165036634d632cd6032bab63c144e71db154f96d8c"}, "downloads": -1, "filename": "Automunge-2.57.tar.gz", "has_sig": false, "md5_digest": "a9876ed9401009161fc3c3a3a68b3732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231289, "upload_time": "2019-09-22T01:53:26", "upload_time_iso_8601": "2019-09-22T01:53:26.130778Z", "url": "https://files.pythonhosted.org/packages/3b/a6/7c3bdec231114492dac2a7b2480cf47e557d9bcb4e7ce1cd0a99296031b7/Automunge-2.57.tar.gz", "yanked": false}], "2.58": [{"comment_text": "", "digests": {"md5": "695d469113fa01663f8f996cae611bc3", "sha256": "b609c04447922717ba760507755e3262417c0c39da571b599a33855da8fb61e1"}, "downloads": -1, "filename": "Automunge-2.58-py3-none-any.whl", "has_sig": false, "md5_digest": "695d469113fa01663f8f996cae611bc3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 208932, "upload_time": "2019-09-22T02:29:10", "upload_time_iso_8601": "2019-09-22T02:29:10.508089Z", "url": "https://files.pythonhosted.org/packages/60/99/d126fc4e3adf4ca3554acce00b94a4a5e49e4e7da4bda56cd9ec81c608f1/Automunge-2.58-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f659c8a0bcea79c7d5d3f4d964bbd60", "sha256": "6a09a42a7d43af596effcd9cf42b93d858cb25f55b48b241780af7dbeb20b0c3"}, "downloads": -1, "filename": "Automunge-2.58.tar.gz", "has_sig": false, "md5_digest": "1f659c8a0bcea79c7d5d3f4d964bbd60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231294, "upload_time": "2019-09-22T02:29:12", "upload_time_iso_8601": "2019-09-22T02:29:12.700219Z", "url": "https://files.pythonhosted.org/packages/b7/ae/13e3d50d1b6ecc04d2e2ac61389a2b43a3a1becf94c236d6e36a0a40610c/Automunge-2.58.tar.gz", "yanked": false}], "2.59": [{"comment_text": "", "digests": {"md5": "5ed65f2be5d98e2b1e1fe852a508e749", "sha256": "95d5d24159561a54cce2b96722e38ff3f26b5be976222d5161047b2cb14ae30b"}, "downloads": -1, "filename": "Automunge-2.59-py3-none-any.whl", "has_sig": false, "md5_digest": "5ed65f2be5d98e2b1e1fe852a508e749", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 210170, "upload_time": "2019-09-23T02:47:00", "upload_time_iso_8601": "2019-09-23T02:47:00.705655Z", "url": "https://files.pythonhosted.org/packages/8b/4d/d4ba69253ed53360e3630aae20510ad42998c262f44202116245874f22d0/Automunge-2.59-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5a89739ac6d0ac4d1f968292a0f1d6e", "sha256": "563ac1a2d0bd3626c53f555cdc4f8271ecbaa2ee4272a3f1368478d245f613a4"}, "downloads": -1, "filename": "Automunge-2.59.tar.gz", "has_sig": false, "md5_digest": "b5a89739ac6d0ac4d1f968292a0f1d6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232976, "upload_time": "2019-09-23T02:47:03", "upload_time_iso_8601": "2019-09-23T02:47:03.201237Z", "url": "https://files.pythonhosted.org/packages/5d/f7/af35bf82c7c55290754af16cfcf939796c416066270f4fd94acf7d1b2313/Automunge-2.59.tar.gz", "yanked": false}], "2.60": [{"comment_text": "", "digests": {"md5": "e86af004cf12145144a360302cf022a0", "sha256": "5c33d42f7241f719bf40f88eba29090a9f40a4f4910dcd41d929e878b43d61c3"}, "downloads": -1, "filename": "Automunge-2.60-py3-none-any.whl", "has_sig": false, "md5_digest": "e86af004cf12145144a360302cf022a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 121757, "upload_time": "2019-09-26T01:04:49", "upload_time_iso_8601": "2019-09-26T01:04:49.996885Z", "url": "https://files.pythonhosted.org/packages/c3/85/5478f363e08a304c471ccf7917a2f3ddab7a784a9d60af737bc579425744/Automunge-2.60-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4072ab14577927dcb6a824b0c62bb286", "sha256": "5b5bfe3b514b8680e65375f2cc90e8d80f052a2546a8231c92bc7aea2989949a"}, "downloads": -1, "filename": "Automunge-2.60.tar.gz", "has_sig": false, "md5_digest": "4072ab14577927dcb6a824b0c62bb286", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146084, "upload_time": "2019-09-26T01:04:52", "upload_time_iso_8601": "2019-09-26T01:04:52.699225Z", "url": "https://files.pythonhosted.org/packages/51/5a/740b77a18dc481f8d1fcb5b0b69e68e8e296b0fb6801693364f2ca5c073d/Automunge-2.60.tar.gz", "yanked": false}], "2.61": [{"comment_text": "", "digests": {"md5": "162909d678027f5ceda6f5cc2c082f56", "sha256": "347ca8aad3ded4421ab89892b962d31df6aba05bc628e2bc62485062a01b2a28"}, "downloads": -1, "filename": "Automunge-2.61-py3-none-any.whl", "has_sig": false, "md5_digest": "162909d678027f5ceda6f5cc2c082f56", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 121471, "upload_time": "2019-09-28T16:35:09", "upload_time_iso_8601": "2019-09-28T16:35:09.266698Z", "url": "https://files.pythonhosted.org/packages/0b/f2/c452f6706156eb7aa20c6d3e956e29fc2db75f29251bbbd248773a693632/Automunge-2.61-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31f0d1e3b0cc96ac98389c9b5dcb4b5f", "sha256": "acbc01bfd8d9a61e6366d9f8874266f66f2078fe1e5a685718e5c44e13f31f1c"}, "downloads": -1, "filename": "Automunge-2.61.tar.gz", "has_sig": false, "md5_digest": "31f0d1e3b0cc96ac98389c9b5dcb4b5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145802, "upload_time": "2019-09-28T16:35:12", "upload_time_iso_8601": "2019-09-28T16:35:12.242781Z", "url": "https://files.pythonhosted.org/packages/ab/81/20ed322f99e5b1c5cf29f52ca15180c45b82d9ba22fcacd3021c69fc3780/Automunge-2.61.tar.gz", "yanked": false}], "2.62": [{"comment_text": "", "digests": {"md5": "b1565f344db9b3aec396554b7a448bb6", "sha256": "86b5f10ebc720c1d8b0cc4f1fd35a80e6bda2950e6a5ee1fbd302532a7c1dab7"}, "downloads": -1, "filename": "Automunge-2.62-py3-none-any.whl", "has_sig": false, "md5_digest": "b1565f344db9b3aec396554b7a448bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122996, "upload_time": "2019-10-03T05:05:20", "upload_time_iso_8601": "2019-10-03T05:05:20.613431Z", "url": "https://files.pythonhosted.org/packages/02/5d/820d673a048edaaf01e554ab482d2f86eaccaa8bed7e2300c7c96697eaee/Automunge-2.62-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be8d39b1dc03114269842635654a88df", "sha256": "97300e6ad50a2d045fba441e0cffcce69eb8756d189f7ef2d98386c76cb4eed8"}, "downloads": -1, "filename": "Automunge-2.62.tar.gz", "has_sig": false, "md5_digest": "be8d39b1dc03114269842635654a88df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 147716, "upload_time": "2019-10-03T05:05:49", "upload_time_iso_8601": "2019-10-03T05:05:49.912005Z", "url": "https://files.pythonhosted.org/packages/40/48/05b64ef08816a487fb9d20de7771ef79153230ee8a3f107b8bb880842c6e/Automunge-2.62.tar.gz", "yanked": false}], "2.63": [{"comment_text": "", "digests": {"md5": "ef883a0da972905412d54d0e188a9700", "sha256": "5f1d6b51e940a4229882d0ac42324a7bfacfa9a5f592fc1da4c1ab34252fae8e"}, "downloads": -1, "filename": "Automunge-2.63-py3-none-any.whl", "has_sig": false, "md5_digest": "ef883a0da972905412d54d0e188a9700", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 123324, "upload_time": "2019-10-03T20:01:59", "upload_time_iso_8601": "2019-10-03T20:01:59.498784Z", "url": "https://files.pythonhosted.org/packages/a9/1c/2ebdb41398063492386f40411d84ccc932c29fb0b6e6fef80e405f66a1f7/Automunge-2.63-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "311fb19bb783688ba3ad4020186b9c6c", "sha256": "df902ef9a97d146bae85445b8d529300f26c73428da8354e871b36cf84a9c49c"}, "downloads": -1, "filename": "Automunge-2.63.tar.gz", "has_sig": false, "md5_digest": "311fb19bb783688ba3ad4020186b9c6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 148018, "upload_time": "2019-10-03T20:02:13", "upload_time_iso_8601": "2019-10-03T20:02:13.303872Z", "url": "https://files.pythonhosted.org/packages/2c/f0/3c8b998e58a7e12f21c2b05c1d8665a5ebd1459c1b8f8fd5111be0c51e10/Automunge-2.63.tar.gz", "yanked": false}], "2.64": [{"comment_text": "", "digests": {"md5": "0cb4686a0d5f3ba10d041c8b2cc2c03a", "sha256": "16aa31121fda65c6706390857e611b98a4aa80ca90dc4db882c6543468e447d8"}, "downloads": -1, "filename": "Automunge-2.64-py3-none-any.whl", "has_sig": false, "md5_digest": "0cb4686a0d5f3ba10d041c8b2cc2c03a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 125436, "upload_time": "2019-10-05T08:04:34", "upload_time_iso_8601": "2019-10-05T08:04:34.134010Z", "url": "https://files.pythonhosted.org/packages/cb/51/ca5534623c87fde97b0b4706e732b90b2074a77bd722fe132545c34c58de/Automunge-2.64-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2bf797db59fde6eeea7371658c437eb", "sha256": "b66f7eb1fe68747e390e315621109593d252b8302450e6102d76ed526be3c118"}, "downloads": -1, "filename": "Automunge-2.64.tar.gz", "has_sig": false, "md5_digest": "f2bf797db59fde6eeea7371658c437eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 150290, "upload_time": "2019-10-05T08:04:36", "upload_time_iso_8601": "2019-10-05T08:04:36.100105Z", "url": "https://files.pythonhosted.org/packages/a0/ef/d09ff253240dfbc253199c90ab659ffc2fc3997de3c7742fc4ba8166fbf8/Automunge-2.64.tar.gz", "yanked": false}], "2.65": [{"comment_text": "", "digests": {"md5": "603fad20b27595e2cefefdedc93a6291", "sha256": "30a001c2347993e644d9130741e2c51b4abaafca7aea6e9143b642d10495a4d8"}, "downloads": -1, "filename": "Automunge-2.65-py3-none-any.whl", "has_sig": false, "md5_digest": "603fad20b27595e2cefefdedc93a6291", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 126810, "upload_time": "2019-10-05T17:32:36", "upload_time_iso_8601": "2019-10-05T17:32:36.811687Z", "url": "https://files.pythonhosted.org/packages/46/f3/a29cadf32128fb17a2197fe5f3913f7ca28d0fc28b83860f0c2f8786c817/Automunge-2.65-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85c08c09e98ccaf0d05c5b4f106f363a", "sha256": "dcebdde6094cf4afc1fa00f40e3cbc41714501180f4269581e0b08bb7cb17d47"}, "downloads": -1, "filename": "Automunge-2.65.tar.gz", "has_sig": false, "md5_digest": "85c08c09e98ccaf0d05c5b4f106f363a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 151918, "upload_time": "2019-10-05T17:32:38", "upload_time_iso_8601": "2019-10-05T17:32:38.827317Z", "url": "https://files.pythonhosted.org/packages/5a/5a/0e3d218d3571b76c17454a90666a5bf4f3431f13dc100854bf07938ebc82/Automunge-2.65.tar.gz", "yanked": false}], "2.66": [{"comment_text": "", "digests": {"md5": "ff922b48ee3ca6caa46a2e1968f62a3d", "sha256": "c74216e76b1195781c314506bbda92003fbc28a2a18c84d8b12663041697d7e4"}, "downloads": -1, "filename": "Automunge-2.66-py3-none-any.whl", "has_sig": false, "md5_digest": "ff922b48ee3ca6caa46a2e1968f62a3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 127090, "upload_time": "2019-10-05T20:45:50", "upload_time_iso_8601": "2019-10-05T20:45:50.822785Z", "url": "https://files.pythonhosted.org/packages/d7/11/0cad09d26bf5c066901df6d98a2bea2d2d0729b73541c191ca2aafcef58f/Automunge-2.66-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "441b5143003a38c2c1a01e7df35b187b", "sha256": "287a2c04339b57d9ee1f7a8b8b13c7eb03795d46800a4d8fc2004e8ea354fedb"}, "downloads": -1, "filename": "Automunge-2.66.tar.gz", "has_sig": false, "md5_digest": "441b5143003a38c2c1a01e7df35b187b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 152678, "upload_time": "2019-10-05T20:45:53", "upload_time_iso_8601": "2019-10-05T20:45:53.139160Z", "url": "https://files.pythonhosted.org/packages/d6/b8/9f16d2541b8eda1ab65337d778743bcbfd712bdf92e6cd868a6b53ed6864/Automunge-2.66.tar.gz", "yanked": false}], "2.67": [{"comment_text": "", "digests": {"md5": "0e1f163744f52e73d0bc1f18cd854926", "sha256": "f418c5406de95325e000f20e3e4419a85ce4011fe39bc1d18aef1b4397099759"}, "downloads": -1, "filename": "Automunge-2.67-py3-none-any.whl", "has_sig": false, "md5_digest": "0e1f163744f52e73d0bc1f18cd854926", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 127959, "upload_time": "2019-10-09T23:51:36", "upload_time_iso_8601": "2019-10-09T23:51:36.882282Z", "url": "https://files.pythonhosted.org/packages/dc/00/565c0d88ddf066695a4ad2fc8333dea281b598d844cd518a760aebe0d393/Automunge-2.67-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1049a9f5cb1b085916d993518b6dec75", "sha256": "fcc28fa0144a0f16bd558513100c6e25e8b116b380d1db30626c37d3a5ba1e66"}, "downloads": -1, "filename": "Automunge-2.67.tar.gz", "has_sig": false, "md5_digest": "1049a9f5cb1b085916d993518b6dec75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154139, "upload_time": "2019-10-09T23:51:41", "upload_time_iso_8601": "2019-10-09T23:51:41.938780Z", "url": "https://files.pythonhosted.org/packages/42/56/2192514193426db8a5cc73cda0dbd0f849d24cbaabacf0413b5ef19b3aac/Automunge-2.67.tar.gz", "yanked": false}], "2.68": [{"comment_text": "", "digests": {"md5": "66dab5e6f944854afb477499eaafe26a", "sha256": "06b28ab409f01d4adae1a526c0d431cfd9d6db5bf43b228dcfe113fcabb96084"}, "downloads": -1, "filename": "Automunge-2.68-py3-none-any.whl", "has_sig": false, "md5_digest": "66dab5e6f944854afb477499eaafe26a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128706, "upload_time": "2019-10-11T21:20:49", "upload_time_iso_8601": "2019-10-11T21:20:49.454779Z", "url": "https://files.pythonhosted.org/packages/0b/b2/c776e9fbc58d7d15aba16527c86d6d8c4b34f2bf7f0c02f9091436fe3a7a/Automunge-2.68-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17e0d2cf9b4b814afbfa66992d38cc20", "sha256": "89faab686db29a777b3b204af764d51005a5fee7c3668fa4f25818904055318e"}, "downloads": -1, "filename": "Automunge-2.68.tar.gz", "has_sig": false, "md5_digest": "17e0d2cf9b4b814afbfa66992d38cc20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 155576, "upload_time": "2019-10-11T21:20:52", "upload_time_iso_8601": "2019-10-11T21:20:52.155671Z", "url": "https://files.pythonhosted.org/packages/d6/06/dff4267f85c853877dd9b8ab28d224ae786fcabc6f537d43a9a883d23850/Automunge-2.68.tar.gz", "yanked": false}], "2.69": [{"comment_text": "", "digests": {"md5": "5c4589a63ef47f7b6d95546e94261f2d", "sha256": "36023fe6dbee6c623c996c303f38b3ede0a423c0ecb02bde40c9ea04e0e979d5"}, "downloads": -1, "filename": "Automunge-2.69-py3-none-any.whl", "has_sig": false, "md5_digest": "5c4589a63ef47f7b6d95546e94261f2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128976, "upload_time": "2019-10-12T22:30:19", "upload_time_iso_8601": "2019-10-12T22:30:19.458952Z", "url": "https://files.pythonhosted.org/packages/9f/1f/c4ed310eab42d12b9c6bc7a3a74115d20b76d54d9cdb286be531b9819a39/Automunge-2.69-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f80f86052c561d0b9d23e11e95fe3dcf", "sha256": "e58c97ba7e889c3722ca35c393800204a846f1b813568f67d6feaa9c6ad09045"}, "downloads": -1, "filename": "Automunge-2.69.tar.gz", "has_sig": false, "md5_digest": "f80f86052c561d0b9d23e11e95fe3dcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 156045, "upload_time": "2019-10-12T22:30:24", "upload_time_iso_8601": "2019-10-12T22:30:24.239509Z", "url": "https://files.pythonhosted.org/packages/27/8f/751f55aeeaa340dfc9836c067c12bf5f1b32109955940d578b64c85518fa/Automunge-2.69.tar.gz", "yanked": false}], "2.70": [{"comment_text": "", "digests": {"md5": "b1febeee3b66e9f45e38b64b0562f6f7", "sha256": "94713fd92fd02a78b05a95a7baea605a8c3c8a0758477f1a3d34a7905361b1ec"}, "downloads": -1, "filename": "Automunge-2.70-py3-none-any.whl", "has_sig": false, "md5_digest": "b1febeee3b66e9f45e38b64b0562f6f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 133648, "upload_time": "2019-10-18T03:07:09", "upload_time_iso_8601": "2019-10-18T03:07:09.934781Z", "url": "https://files.pythonhosted.org/packages/52/b8/4e0bad35915bb7e79700dd63b2b8efe90f67d66e117609cd50ab502867d0/Automunge-2.70-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "904c187ea7fd5e5b9fd987aabe404170", "sha256": "faa5744eadb874bfe81fe33ef60f19809bb2a300c01349917749d32ab9725c8c"}, "downloads": -1, "filename": "Automunge-2.70.tar.gz", "has_sig": false, "md5_digest": "904c187ea7fd5e5b9fd987aabe404170", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165480, "upload_time": "2019-10-18T03:07:14", "upload_time_iso_8601": "2019-10-18T03:07:14.920342Z", "url": "https://files.pythonhosted.org/packages/30/98/878613cd7c9c99241b120aae017258604e8b911b514abce6d893165d7889/Automunge-2.70.tar.gz", "yanked": false}], "2.71": [{"comment_text": "", "digests": {"md5": "1e130f84452039733801a9352adf7719", "sha256": "6575624ef4bda6d732f0b833b5b621a3248e6f3f479a35ffc87bfb89b3fadf2c"}, "downloads": -1, "filename": "Automunge-2.71-py3-none-any.whl", "has_sig": false, "md5_digest": "1e130f84452039733801a9352adf7719", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 133304, "upload_time": "2019-10-21T18:28:14", "upload_time_iso_8601": "2019-10-21T18:28:14.042370Z", "url": "https://files.pythonhosted.org/packages/7a/a5/ece3cd765b76d3a860851fddedc429713c0bc9fea0ed5054649b8719a322/Automunge-2.71-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b86d5f43cfc68093390c6c5f6ccd588", "sha256": "6f2c7ebdc22e3717779154886ab1808c1ac00460dec6e1d5d44ce3537342e00b"}, "downloads": -1, "filename": "Automunge-2.71.tar.gz", "has_sig": false, "md5_digest": "2b86d5f43cfc68093390c6c5f6ccd588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166527, "upload_time": "2019-10-21T18:28:17", "upload_time_iso_8601": "2019-10-21T18:28:17.235660Z", "url": "https://files.pythonhosted.org/packages/cb/b4/250b3b0b2a18d7b11a7c2481a2b5ab4709f1a6843fe2b062a39687b9b3ac/Automunge-2.71.tar.gz", "yanked": false}], "2.72": [{"comment_text": "", "digests": {"md5": "b9dca97b4986f475beaac430630d9d8b", "sha256": "3d4c2907391b765c62e85437e08f4c02bfecb2a52848d8c0d480f0ecd5cd9273"}, "downloads": -1, "filename": "Automunge-2.72-py3-none-any.whl", "has_sig": false, "md5_digest": "b9dca97b4986f475beaac430630d9d8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 133257, "upload_time": "2019-10-25T00:11:06", "upload_time_iso_8601": "2019-10-25T00:11:06.237867Z", "url": "https://files.pythonhosted.org/packages/47/b2/96dbfc480e6f2181cd5bfabea8953dc1f102827ef956b011624b8663824a/Automunge-2.72-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fc9ce1ea0102d6e3516221fb6cb6124", "sha256": "b09b9e3c4e34b39145f21630549ac19938b7b277a7835936d9d686f9f3ab44ee"}, "downloads": -1, "filename": "Automunge-2.72.tar.gz", "has_sig": false, "md5_digest": "2fc9ce1ea0102d6e3516221fb6cb6124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166252, "upload_time": "2019-10-25T00:11:08", "upload_time_iso_8601": "2019-10-25T00:11:08.419483Z", "url": "https://files.pythonhosted.org/packages/5b/bb/269e1bb89b425a26bf729d7b96794eb0fd8e656743b3f89bce79def193bc/Automunge-2.72.tar.gz", "yanked": false}], "2.73": [{"comment_text": "", "digests": {"md5": "f3396967c42f6c58f4be9e60aabc4224", "sha256": "efe92257c80143b3785796fd83c31e0aa1c1b73cba3917fcc7841907a69e8512"}, "downloads": -1, "filename": "Automunge-2.73-py3-none-any.whl", "has_sig": false, "md5_digest": "f3396967c42f6c58f4be9e60aabc4224", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 133380, "upload_time": "2019-10-28T15:34:12", "upload_time_iso_8601": "2019-10-28T15:34:12.757376Z", "url": "https://files.pythonhosted.org/packages/b2/82/863dc2b81ebc183c4b552aacdf3f141d4d254fb0917dce0cb641f3e27a49/Automunge-2.73-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eec585ae4e7a547fe552548ac93b35eb", "sha256": "a59cb3466ef2e525bf691f71535bbdc5586e5d720fe44046732464ca0227da6c"}, "downloads": -1, "filename": "Automunge-2.73.tar.gz", "has_sig": false, "md5_digest": "eec585ae4e7a547fe552548ac93b35eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166485, "upload_time": "2019-10-28T15:34:15", "upload_time_iso_8601": "2019-10-28T15:34:15.150780Z", "url": "https://files.pythonhosted.org/packages/e4/2c/58f908a29862906519e076b2cb7c58438d87a0b9cffc18767d08709cc127/Automunge-2.73.tar.gz", "yanked": false}], "2.74": [{"comment_text": "", "digests": {"md5": "b7e4c3f64a70d0aafe5f0477f2b41cfb", "sha256": "fae4ce2aa9acf997df5aada1342710060eee1ded0be4a6fc009efd93e1d98b4e"}, "downloads": -1, "filename": "Automunge-2.74-py3-none-any.whl", "has_sig": false, "md5_digest": "b7e4c3f64a70d0aafe5f0477f2b41cfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 133562, "upload_time": "2019-10-29T16:25:02", "upload_time_iso_8601": "2019-10-29T16:25:02.588029Z", "url": "https://files.pythonhosted.org/packages/8e/f7/ae1a8353644378060f80ebe24012a4a12939e1c8859e17b8212a60ad6e08/Automunge-2.74-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50017a81ca2b61f78a8f36adf52c3225", "sha256": "7a1acece0ad3f33a96596825cf4044481f8a7ba858e65e5f94a6ebc260ef12f5"}, "downloads": -1, "filename": "Automunge-2.74.tar.gz", "has_sig": false, "md5_digest": "50017a81ca2b61f78a8f36adf52c3225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 166665, "upload_time": "2019-10-29T16:25:05", "upload_time_iso_8601": "2019-10-29T16:25:05.143850Z", "url": "https://files.pythonhosted.org/packages/e5/b3/8a3e71ad85d8541338cbdb1a64787dba3bcbf32b38601cb1e85a3a0bc0f0/Automunge-2.74.tar.gz", "yanked": false}], "2.75": [{"comment_text": "", "digests": {"md5": "0c5c117b00b7f3b6f8751098a4a25658", "sha256": "d3168d031fb3495e38ea707ad2d71141b9c1b720e2c7d4ffcb326523cea742d0"}, "downloads": -1, "filename": "Automunge-2.75-py3-none-any.whl", "has_sig": false, "md5_digest": "0c5c117b00b7f3b6f8751098a4a25658", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 134162, "upload_time": "2019-10-31T02:16:30", "upload_time_iso_8601": "2019-10-31T02:16:30.130292Z", "url": "https://files.pythonhosted.org/packages/b7/fc/6b5ee3566b3764b9072df1966d568c63742069eb19dfffb4fa6b6ad05e3e/Automunge-2.75-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7690ef90aa31ed5d4a9349e8a15ff18e", "sha256": "8876519a086c1833ac7544c8692d7b0d91c2e48eb4e597554c88f95a4648d5e5"}, "downloads": -1, "filename": "Automunge-2.75.tar.gz", "has_sig": false, "md5_digest": "7690ef90aa31ed5d4a9349e8a15ff18e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 167596, "upload_time": "2019-10-31T02:16:53", "upload_time_iso_8601": "2019-10-31T02:16:53.729285Z", "url": "https://files.pythonhosted.org/packages/68/e1/74280ad3c1fb18d0fc668fbbe9edfdb09093fa0de73b4a1ca97532b0d370/Automunge-2.75.tar.gz", "yanked": false}], "2.76": [{"comment_text": "", "digests": {"md5": "e174ef72f0d65970a49246e6ce8745be", "sha256": "47a027449d1e4dc0b47a3470b7e94b971a54bfdbeb8cadd3d813f84d96aeaaa9"}, "downloads": -1, "filename": "Automunge-2.76-py3-none-any.whl", "has_sig": false, "md5_digest": "e174ef72f0d65970a49246e6ce8745be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 134926, "upload_time": "2019-11-02T02:05:35", "upload_time_iso_8601": "2019-11-02T02:05:35.434357Z", "url": "https://files.pythonhosted.org/packages/20/82/7578ec5576632ea63e59950521e2db07b294628dc66a8bb250494afe0f06/Automunge-2.76-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e55ecd981290ea7a42c7ac6798493439", "sha256": "9c35edb0de123d2c1bb58a3d4c10eeaa10322de3455d5d549c30eb8ea1a5a266"}, "downloads": -1, "filename": "Automunge-2.76.tar.gz", "has_sig": false, "md5_digest": "e55ecd981290ea7a42c7ac6798493439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 168474, "upload_time": "2019-11-02T02:05:37", "upload_time_iso_8601": "2019-11-02T02:05:37.213113Z", "url": "https://files.pythonhosted.org/packages/97/02/6d20c4e39b4767b71f4689e63d8c7681f8052a322705a541ab96a0549661/Automunge-2.76.tar.gz", "yanked": false}], "2.77": [{"comment_text": "", "digests": {"md5": "342d9de748e644443f2bd6b2e3d7e813", "sha256": "486495c61d77c84b71adf2d0495a1e33ab42a25d8a20c5d72cd2414c3653986a"}, "downloads": -1, "filename": "Automunge-2.77-py3-none-any.whl", "has_sig": false, "md5_digest": "342d9de748e644443f2bd6b2e3d7e813", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 135052, "upload_time": "2019-11-02T14:43:21", "upload_time_iso_8601": "2019-11-02T14:43:21.645712Z", "url": "https://files.pythonhosted.org/packages/ed/1d/657fb370f48aec07a12af6c5969c787f645c2b7cc90ebbf4830c1311f01c/Automunge-2.77-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f57af2dc251420d153deb61f98c333c", "sha256": "c95727b4657f25503f9ffadd09e2356cd894b9b9a92060a9a94c8496216ec142"}, "downloads": -1, "filename": "Automunge-2.77.tar.gz", "has_sig": false, "md5_digest": "4f57af2dc251420d153deb61f98c333c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 168643, "upload_time": "2019-11-02T14:43:24", "upload_time_iso_8601": "2019-11-02T14:43:24.145189Z", "url": "https://files.pythonhosted.org/packages/94/e5/f5c00b6bc5a432ad2ab92d50d259f5fb8e626f68e520c6b1d703a0359dca/Automunge-2.77.tar.gz", "yanked": false}], "2.78": [{"comment_text": "", "digests": {"md5": "387ddabba8286e3269919bcbba6e0151", "sha256": "0eb366b1346ac4fc7935c2451d7bb14c6a80abafd7cfbb19a30a54e5cf747f25"}, "downloads": -1, "filename": "Automunge-2.78-py3-none-any.whl", "has_sig": false, "md5_digest": "387ddabba8286e3269919bcbba6e0151", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 135821, "upload_time": "2019-11-04T02:57:13", "upload_time_iso_8601": "2019-11-04T02:57:13.139792Z", "url": "https://files.pythonhosted.org/packages/b6/93/8cf2085e8807549780ea0479c02f10091af81560f82ce91b4c1ea5ff4e4e/Automunge-2.78-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b326bc74f220b503f5a9991dc43c3f8", "sha256": "f8f8ddb4cf6443ff72d5aca6ec2d447f762a436e4c9df717631a3b985322bc83"}, "downloads": -1, "filename": "Automunge-2.78.tar.gz", "has_sig": false, "md5_digest": "0b326bc74f220b503f5a9991dc43c3f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 169837, "upload_time": "2019-11-04T02:57:14", "upload_time_iso_8601": "2019-11-04T02:57:14.920751Z", "url": "https://files.pythonhosted.org/packages/4e/5d/c5c4c9f5a3b4c1230c1dbcf2b2a320f3708a128e0d4c3d24019e0a213115/Automunge-2.78.tar.gz", "yanked": false}], "2.79": [{"comment_text": "", "digests": {"md5": "4113a09d6d2be488dd18da0063169a92", "sha256": "fbee7ecdf9a109d6784e1cb9aa5b2015a95aedd1f05ecc532c892047b09e69e9"}, "downloads": -1, "filename": "Automunge-2.79-py3-none-any.whl", "has_sig": false, "md5_digest": "4113a09d6d2be488dd18da0063169a92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 138232, "upload_time": "2019-11-05T22:06:39", "upload_time_iso_8601": "2019-11-05T22:06:39.736950Z", "url": "https://files.pythonhosted.org/packages/1c/7f/9b694d5ee7806f5d1ae089da36d50ac9110cd43dc4846f59054212958bbe/Automunge-2.79-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5fb5e3e0ea9110d9cb0bb5d558de471", "sha256": "26f855b88f3be9eba2d7e02a985726df85af153be2a1a71744099921588a97e5"}, "downloads": -1, "filename": "Automunge-2.79.tar.gz", "has_sig": false, "md5_digest": "e5fb5e3e0ea9110d9cb0bb5d558de471", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 172309, "upload_time": "2019-11-05T22:06:41", "upload_time_iso_8601": "2019-11-05T22:06:41.770062Z", "url": "https://files.pythonhosted.org/packages/b1/62/590263da71eda8218502a21bcf10c0e13136d83da554cabac4dc9375ab9d/Automunge-2.79.tar.gz", "yanked": false}], "2.80": [{"comment_text": "", "digests": {"md5": "e0f1057880c41500d7db9e5f739c6695", "sha256": "66b00c7eeef3f798ce4e69ab42cfa513b85e92de5c3b4ae92f87b52655eb8b28"}, "downloads": -1, "filename": "Automunge-2.80-py3-none-any.whl", "has_sig": false, "md5_digest": "e0f1057880c41500d7db9e5f739c6695", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 141062, "upload_time": "2019-11-06T20:17:25", "upload_time_iso_8601": "2019-11-06T20:17:25.607917Z", "url": "https://files.pythonhosted.org/packages/e0/e4/435c843fab8923fa0d5b88bdb35eb91203c0fc628dabb5616a6c323db181/Automunge-2.80-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a25a0e36a38f3abc77f1cfd215a5f54b", "sha256": "c25542a93418dd5db643a69ec0f7b2c2ff4e280da0bdc43f3632fdfb880d45a4"}, "downloads": -1, "filename": "Automunge-2.80.tar.gz", "has_sig": false, "md5_digest": "a25a0e36a38f3abc77f1cfd215a5f54b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 175905, "upload_time": "2019-11-06T20:17:27", "upload_time_iso_8601": "2019-11-06T20:17:27.517902Z", "url": "https://files.pythonhosted.org/packages/d0/09/fb6a7bd758ac5e83d70274a8725f8dfdd0d4bbd3e483c6cf0e446a17c2f1/Automunge-2.80.tar.gz", "yanked": false}], "2.81": [{"comment_text": "", "digests": {"md5": "e09d1682208419cea2aafcc14c1a0623", "sha256": "f10225ae31b35d2b829aad46cf9dbad67bec76f2f26c456aed527097f3fce5a7"}, "downloads": -1, "filename": "Automunge-2.81-py3-none-any.whl", "has_sig": false, "md5_digest": "e09d1682208419cea2aafcc14c1a0623", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 144249, "upload_time": "2019-11-07T05:27:48", "upload_time_iso_8601": "2019-11-07T05:27:48.058013Z", "url": "https://files.pythonhosted.org/packages/09/71/18da677a95c85de2b792313943d68beefd38ab3a3cd4b6ea9c7bf0062afd/Automunge-2.81-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "076c58c9013a155de1a706e807ce792e", "sha256": "b2a4499a860f9047b0c3e99b63eb962bbaada703336ec380071efb4c940401c7"}, "downloads": -1, "filename": "Automunge-2.81.tar.gz", "has_sig": false, "md5_digest": "076c58c9013a155de1a706e807ce792e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 179451, "upload_time": "2019-11-07T05:27:50", "upload_time_iso_8601": "2019-11-07T05:27:50.109454Z", "url": "https://files.pythonhosted.org/packages/e0/7a/a85b2b80b1ba790a2197961ac18107741aca6ae4bd2ad332eec5613849fb/Automunge-2.81.tar.gz", "yanked": false}], "2.82": [{"comment_text": "", "digests": {"md5": "0f4008b7ea06db5666d3c7abc524d5b4", "sha256": "60be1995252b2341960e923e6003fe38b40107d4964345d2dcb425ed239530b6"}, "downloads": -1, "filename": "Automunge-2.82-py3-none-any.whl", "has_sig": false, "md5_digest": "0f4008b7ea06db5666d3c7abc524d5b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145633, "upload_time": "2019-11-08T01:40:09", "upload_time_iso_8601": "2019-11-08T01:40:09.696139Z", "url": "https://files.pythonhosted.org/packages/11/10/c147c155d48189ffa9bbab6bcd5ae802a029e36c619a2c104d3da9877dfe/Automunge-2.82-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b733ea96613ec44b11096768426b599b", "sha256": "4b63f200a54a9af3833f4fd61f29582ad34174d29912cbaff30fbac0e3153a84"}, "downloads": -1, "filename": "Automunge-2.82.tar.gz", "has_sig": false, "md5_digest": "b733ea96613ec44b11096768426b599b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 180962, "upload_time": "2019-11-08T01:40:15", "upload_time_iso_8601": "2019-11-08T01:40:15.692002Z", "url": "https://files.pythonhosted.org/packages/66/fb/2906fe4eaa639e8bf76723fd2a834ebdc287132edf451e5c32f9f471adfa/Automunge-2.82.tar.gz", "yanked": false}], "2.83": [{"comment_text": "", "digests": {"md5": "5491d97a21d2008a809eaa15c881ad39", "sha256": "c2192bd0321f65368469401b208735975aa6a4403b0acc2725fca6a937cbf940"}, "downloads": -1, "filename": "Automunge-2.83-py3-none-any.whl", "has_sig": false, "md5_digest": "5491d97a21d2008a809eaa15c881ad39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145956, "upload_time": "2019-11-10T04:52:38", "upload_time_iso_8601": "2019-11-10T04:52:38.118299Z", "url": "https://files.pythonhosted.org/packages/f5/af/5f7092c08c6ae2c2fe8376d6fdc783265e933972839656bdd71856237b7d/Automunge-2.83-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39aa704f565a1a02467bc0ed702c15d0", "sha256": "76c70d4c731d9232f59d230a7ea702a37847e6272d2b61b3e123e91bfab1b4f2"}, "downloads": -1, "filename": "Automunge-2.83.tar.gz", "has_sig": false, "md5_digest": "39aa704f565a1a02467bc0ed702c15d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 181717, "upload_time": "2019-11-10T04:52:40", "upload_time_iso_8601": "2019-11-10T04:52:40.290948Z", "url": "https://files.pythonhosted.org/packages/d0/ed/db945d3d7d0923ddee47bbff7109eb6e2a22ff89dcff7cdb240cb4d2c7b0/Automunge-2.83.tar.gz", "yanked": false}], "2.84": [{"comment_text": "", "digests": {"md5": "891812d2181b7bc52d210c0c3b0cc837", "sha256": "debfa662308ad5b3b04a2ed75887fc4ff3373089969d8c62a307c995c1913b0b"}, "downloads": -1, "filename": "Automunge-2.84-py3-none-any.whl", "has_sig": false, "md5_digest": "891812d2181b7bc52d210c0c3b0cc837", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 147341, "upload_time": "2019-11-14T19:46:35", "upload_time_iso_8601": "2019-11-14T19:46:35.537883Z", "url": "https://files.pythonhosted.org/packages/64/73/dd0a30fa705c3147cb97ed3fce0a7baa2d743e2133063a8c186ed15baa0b/Automunge-2.84-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62fe8ce1c5454adcd0e56d3b274d4984", "sha256": "e889b96e239a4e6c49f63780e0585af7e6b81c094f82b95de2030551e6219739"}, "downloads": -1, "filename": "Automunge-2.84.tar.gz", "has_sig": false, "md5_digest": "62fe8ce1c5454adcd0e56d3b274d4984", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 184636, "upload_time": "2019-11-14T19:46:37", "upload_time_iso_8601": "2019-11-14T19:46:37.831397Z", "url": "https://files.pythonhosted.org/packages/13/43/6245a3fd1ef4f5820b63172f33c8b6340f8ff64cd811cc7dc31f2a107db9/Automunge-2.84.tar.gz", "yanked": false}], "2.85": [{"comment_text": "", "digests": {"md5": "e1864730f8d7d9d04d0bd6ad53f28b2f", "sha256": "dc36f9ab7edb3e13fb03559b3467607e616a581d241c2468df26e32c4025d44b"}, "downloads": -1, "filename": "Automunge-2.85-py3-none-any.whl", "has_sig": false, "md5_digest": "e1864730f8d7d9d04d0bd6ad53f28b2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 147989, "upload_time": "2019-11-15T20:41:22", "upload_time_iso_8601": "2019-11-15T20:41:22.733732Z", "url": "https://files.pythonhosted.org/packages/0b/a8/6b9fec02abe599247a1edb99cd9653a45a0b6c98ea599a9eacb499c13205/Automunge-2.85-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf8cb4e766c26b43ef3c87c25ba8485c", "sha256": "3ad96c0b57e68101a8e378b0d296524d0a331fb30c0833f678f58dcd14fea1da"}, "downloads": -1, "filename": "Automunge-2.85.tar.gz", "has_sig": false, "md5_digest": "cf8cb4e766c26b43ef3c87c25ba8485c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186005, "upload_time": "2019-11-15T20:41:24", "upload_time_iso_8601": "2019-11-15T20:41:24.859567Z", "url": "https://files.pythonhosted.org/packages/04/ff/c0239988085ae0b7d26f0b37586dc59b8b57599b84dfe56514281d378cfc/Automunge-2.85.tar.gz", "yanked": false}], "2.86": [{"comment_text": "", "digests": {"md5": "01d5aff8bd5a0840c41d8efa8c4dc220", "sha256": "8bdab6a2926798bb0b5386d86a2943d6c3ddd2ee2c928ddc5febc16827a2854b"}, "downloads": -1, "filename": "Automunge-2.86-py3-none-any.whl", "has_sig": false, "md5_digest": "01d5aff8bd5a0840c41d8efa8c4dc220", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 148366, "upload_time": "2019-11-18T02:28:06", "upload_time_iso_8601": "2019-11-18T02:28:06.541633Z", "url": "https://files.pythonhosted.org/packages/1c/4d/0fbbd4ecc0156e5bd01294983288ef896edfaab53e7320d030415f263460/Automunge-2.86-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0d753f3305b3321e27790bda34bb2e5", "sha256": "a0b0877fb7d6c5af48aab0963fcdac3feb9feb5538dd448363c54b69afed2b65"}, "downloads": -1, "filename": "Automunge-2.86.tar.gz", "has_sig": false, "md5_digest": "b0d753f3305b3321e27790bda34bb2e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186737, "upload_time": "2019-11-18T02:28:08", "upload_time_iso_8601": "2019-11-18T02:28:08.633736Z", "url": "https://files.pythonhosted.org/packages/1e/04/bc55a7f11a0861b5c6d8d60ce44d16ce46ff31753e8498cf8d8e86c80980/Automunge-2.86.tar.gz", "yanked": false}], "2.87": [{"comment_text": "", "digests": {"md5": "8690f18d370510cc15598ffc91ae33b1", "sha256": "f31643b7657b49cc11dd12bf3404fec8639533e5095a783016a660dff3cfc2a2"}, "downloads": -1, "filename": "Automunge-2.87-py3-none-any.whl", "has_sig": false, "md5_digest": "8690f18d370510cc15598ffc91ae33b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 148783, "upload_time": "2019-11-18T19:32:51", "upload_time_iso_8601": "2019-11-18T19:32:51.639874Z", "url": "https://files.pythonhosted.org/packages/64/92/ccf7b36e34b30f56952b5e4b9752b5aadfabcfcc052597ec418b6d18f31f/Automunge-2.87-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c45020621971d7113ed49e2f224d4a9", "sha256": "72a212fabf25763a81fd6bb0f94a7045ca76b024b1d6c7013f877848171604e8"}, "downloads": -1, "filename": "Automunge-2.87.tar.gz", "has_sig": false, "md5_digest": "2c45020621971d7113ed49e2f224d4a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187700, "upload_time": "2019-11-18T19:32:54", "upload_time_iso_8601": "2019-11-18T19:32:54.129641Z", "url": "https://files.pythonhosted.org/packages/37/e3/fe6d74f108d07778f295a14de412e490c905e866594bdd529e4a4d4b39dd/Automunge-2.87.tar.gz", "yanked": false}], "2.88": [{"comment_text": "", "digests": {"md5": "107536222e7c980eb343aae0e316e53f", "sha256": "afd3ac35db932f2e1ee6ab8a3899cf14b7037cf91f94d691d4c579a031dff9ab"}, "downloads": -1, "filename": "Automunge-2.88-py3-none-any.whl", "has_sig": false, "md5_digest": "107536222e7c980eb343aae0e316e53f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 148945, "upload_time": "2019-11-18T21:06:13", "upload_time_iso_8601": "2019-11-18T21:06:13.438733Z", "url": "https://files.pythonhosted.org/packages/e7/c0/f0307cbf189dfc469bfb628f9976bd2e9445d339f04c751c22968d3aaa8b/Automunge-2.88-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c80fe45a8c088d081feb6b71a961bd8c", "sha256": "5cde69d00fce8d7a80351b74c09bd77daf32dbee53d37dfb584ab2d9458db6a8"}, "downloads": -1, "filename": "Automunge-2.88.tar.gz", "has_sig": false, "md5_digest": "c80fe45a8c088d081feb6b71a961bd8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 187971, "upload_time": "2019-11-18T21:06:15", "upload_time_iso_8601": "2019-11-18T21:06:15.631319Z", "url": "https://files.pythonhosted.org/packages/92/9d/6963d2d9a321cae6a80693f273f073edf45427591291ee0c43633e3312b0/Automunge-2.88.tar.gz", "yanked": false}], "2.89": [{"comment_text": "", "digests": {"md5": "3615d88592aa5256bdbd5bf0f51a9ee0", "sha256": "b72b52c84b5980e1b4ff60cefd6b92f3f42588cf265358127108f921cb6675b2"}, "downloads": -1, "filename": "Automunge-2.89-py3-none-any.whl", "has_sig": false, "md5_digest": "3615d88592aa5256bdbd5bf0f51a9ee0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 150084, "upload_time": "2019-11-20T03:04:00", "upload_time_iso_8601": "2019-11-20T03:04:00.233038Z", "url": "https://files.pythonhosted.org/packages/09/48/95825ac73bec3adf2b7f00664d797e0e0051b46bb9e97d843064a11078dd/Automunge-2.89-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "343d0f227a40c25aa905f34a5fcce52c", "sha256": "b4f36abfbc716784a2e725cc6eaba00b1d05e193e13176899f0628f8d1360a8d"}, "downloads": -1, "filename": "Automunge-2.89.tar.gz", "has_sig": false, "md5_digest": "343d0f227a40c25aa905f34a5fcce52c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189147, "upload_time": "2019-11-20T03:04:05", "upload_time_iso_8601": "2019-11-20T03:04:05.612137Z", "url": "https://files.pythonhosted.org/packages/8a/81/01b6849d1e247b6e0128fc2177227dcbe7783a1089cc895e69d8e5b8fac9/Automunge-2.89.tar.gz", "yanked": false}], "2.90": [{"comment_text": "", "digests": {"md5": "1bf85330a764329657cbae2ed1661331", "sha256": "473d358792ea51dd719166b50d497616e893f310375a40efee0cba4028a5764f"}, "downloads": -1, "filename": "Automunge-2.90-py3-none-any.whl", "has_sig": false, "md5_digest": "1bf85330a764329657cbae2ed1661331", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 150092, "upload_time": "2019-11-20T03:19:03", "upload_time_iso_8601": "2019-11-20T03:19:03.137288Z", "url": "https://files.pythonhosted.org/packages/43/c0/99738b50d59dcfa3ff2b73745f1ce223f596525094222444b0c346809715/Automunge-2.90-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35550844d9077e2ac4412314e2e95bfc", "sha256": "5a4a4d3ad47a096a89b57f30775331ba4e6bb51ddcbf41f633d6f27d0fb32f4c"}, "downloads": -1, "filename": "Automunge-2.90.tar.gz", "has_sig": false, "md5_digest": "35550844d9077e2ac4412314e2e95bfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189150, "upload_time": "2019-11-20T03:19:09", "upload_time_iso_8601": "2019-11-20T03:19:09.245975Z", "url": "https://files.pythonhosted.org/packages/25/db/441bb05350d7e557a871a4c80303576f5258864cba01c57cecce1e7cc2df/Automunge-2.90.tar.gz", "yanked": false}], "2.91": [{"comment_text": "", "digests": {"md5": "ef1ed7f299f8dd9d7ad585a7d33fbe95", "sha256": "5c1b480ed5ec2603da91ce5babdb8bb2ab1e1cef444d01ab7d88e37872791ae5"}, "downloads": -1, "filename": "Automunge-2.91-py3-none-any.whl", "has_sig": false, "md5_digest": "ef1ed7f299f8dd9d7ad585a7d33fbe95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 150427, "upload_time": "2019-11-21T03:39:33", "upload_time_iso_8601": "2019-11-21T03:39:33.132776Z", "url": "https://files.pythonhosted.org/packages/49/21/8ec40729508c0a47e855c89f0861d80cbe391d5eac6a2d6de1c88e250600/Automunge-2.91-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1999998ce55df5910701ef4964eeb4d", "sha256": "bb7543c3c3fafbeb6e379ddc1922a48ae766c81df7d15a16315847daf6b0c3d6"}, "downloads": -1, "filename": "Automunge-2.91.tar.gz", "has_sig": false, "md5_digest": "d1999998ce55df5910701ef4964eeb4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189458, "upload_time": "2019-11-21T03:39:35", "upload_time_iso_8601": "2019-11-21T03:39:35.540148Z", "url": "https://files.pythonhosted.org/packages/be/91/16dd94472bdf11d8405ae8faef93e55d6283567bb0a14245845a9543cff0/Automunge-2.91.tar.gz", "yanked": false}], "2.92": [{"comment_text": "", "digests": {"md5": "7222ed6c3ac10b23fd88034895fd8834", "sha256": "80ecb3cc994273aacf21598bc04d7726570094958e65908d5ed6e476db908195"}, "downloads": -1, "filename": "Automunge-2.92-py3-none-any.whl", "has_sig": false, "md5_digest": "7222ed6c3ac10b23fd88034895fd8834", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 150790, "upload_time": "2019-11-23T21:02:08", "upload_time_iso_8601": "2019-11-23T21:02:08.520592Z", "url": "https://files.pythonhosted.org/packages/fe/85/274873aef7cc2b9d7d4c263846173190cc7f5130aa051d67501b60df2284/Automunge-2.92-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc67048e74797f818d1b9324d1bd0771", "sha256": "4c2d283acd583810c5ec1266fbc55e813593e532e7b266c2847c3715bd45cfdf"}, "downloads": -1, "filename": "Automunge-2.92.tar.gz", "has_sig": false, "md5_digest": "fc67048e74797f818d1b9324d1bd0771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189827, "upload_time": "2019-11-23T21:02:10", "upload_time_iso_8601": "2019-11-23T21:02:10.733960Z", "url": "https://files.pythonhosted.org/packages/2c/bf/be321e62847f48ecafd81b7431d49df4e9cf5b75151d7172339f0a50696b/Automunge-2.92.tar.gz", "yanked": false}], "2.93": [{"comment_text": "", "digests": {"md5": "e90a6641908a5976424292a767140825", "sha256": "bb2305c4bd966485601384fe66cb72654857c9046bfd5744b47f1466d91d915a"}, "downloads": -1, "filename": "Automunge-2.93-py3-none-any.whl", "has_sig": false, "md5_digest": "e90a6641908a5976424292a767140825", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 150770, "upload_time": "2019-11-24T03:13:19", "upload_time_iso_8601": "2019-11-24T03:13:19.316405Z", "url": "https://files.pythonhosted.org/packages/61/97/2aad5d33304ff79dfd71006dd8634d5fa3d39d97b779f407ac32b0849d55/Automunge-2.93-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2183fc422e9063af99a42d4f1fafc789", "sha256": "0c577db62a3d8f32e4e9737a6b64e23c1ad8c6a0751f1c0056689d4c7e4ca1e4"}, "downloads": -1, "filename": "Automunge-2.93.tar.gz", "has_sig": false, "md5_digest": "2183fc422e9063af99a42d4f1fafc789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 189825, "upload_time": "2019-11-24T03:13:21", "upload_time_iso_8601": "2019-11-24T03:13:21.447947Z", "url": "https://files.pythonhosted.org/packages/da/65/ae351a3693953a37b85ef9357cb37e567e4b109f177016b88f84e2ca68c7/Automunge-2.93.tar.gz", "yanked": false}], "2.94": [{"comment_text": "", "digests": {"md5": "68d7bc89a8f342d660a713713906cc45", "sha256": "a8622a48966b613eed45c475af95122c2f8dd2260d9a73401ad5757f1d27b5a3"}, "downloads": -1, "filename": "Automunge-2.94-py3-none-any.whl", "has_sig": false, "md5_digest": "68d7bc89a8f342d660a713713906cc45", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 152577, "upload_time": "2019-11-27T04:42:24", "upload_time_iso_8601": "2019-11-27T04:42:24.732262Z", "url": "https://files.pythonhosted.org/packages/02/36/725848fdd392d56722e3b75102138bd7a759522fb69d09e1cfec5465c98e/Automunge-2.94-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d6fb51db855695e1894fa27edd6b147", "sha256": "91e86047c759189e1182f465c225f4c0a4e908576df7acf0796e65028c2ba6ba"}, "downloads": -1, "filename": "Automunge-2.94.tar.gz", "has_sig": false, "md5_digest": "0d6fb51db855695e1894fa27edd6b147", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193337, "upload_time": "2019-11-27T04:42:27", "upload_time_iso_8601": "2019-11-27T04:42:27.036632Z", "url": "https://files.pythonhosted.org/packages/19/20/3fd397ac10fa603354957ad7ca97511ff23f2757766af932d7151ebebbb9/Automunge-2.94.tar.gz", "yanked": false}], "2.95": [{"comment_text": "", "digests": {"md5": "d8af9104f93a25b383699a5999a00f96", "sha256": "f5909fd2e9c8389d7dfcf43975bd63b15532d1ba3d2765fdb61893a21fc8dcac"}, "downloads": -1, "filename": "Automunge-2.95-py3-none-any.whl", "has_sig": false, "md5_digest": "d8af9104f93a25b383699a5999a00f96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 153722, "upload_time": "2019-11-28T22:15:29", "upload_time_iso_8601": "2019-11-28T22:15:29.918067Z", "url": "https://files.pythonhosted.org/packages/4e/4e/f10c4c2e2c86e8eb205ba13f4ef76715d3632e2d6dc3dcd7b9f635a9a847/Automunge-2.95-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c9e3765a549ec798bee77659bcb880e", "sha256": "56e2936d11a7fe0c072341f1d4194ca5d55755108d82d9780ea72c8b4df6bb18"}, "downloads": -1, "filename": "Automunge-2.95.tar.gz", "has_sig": false, "md5_digest": "5c9e3765a549ec798bee77659bcb880e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194732, "upload_time": "2019-11-28T22:15:33", "upload_time_iso_8601": "2019-11-28T22:15:33.234789Z", "url": "https://files.pythonhosted.org/packages/87/86/48dd9f47f8b8e63138a152f1cae968948ead7f2297e53a1f8fca905c3731/Automunge-2.95.tar.gz", "yanked": false}], "2.96": [{"comment_text": "", "digests": {"md5": "de62fb74c81bf69db317c8a4d926293d", "sha256": "20356456726af32aeb5cba0a7259ea9537e7d66276065f7ec69cf1c93bee5412"}, "downloads": -1, "filename": "Automunge-2.96-py3-none-any.whl", "has_sig": false, "md5_digest": "de62fb74c81bf69db317c8a4d926293d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 153832, "upload_time": "2019-11-29T04:35:12", "upload_time_iso_8601": "2019-11-29T04:35:12.033149Z", "url": "https://files.pythonhosted.org/packages/75/13/fd4b97ac26a384dbfb98242c2029fe55c5027eb949a77eda52c6c60d4fdc/Automunge-2.96-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ba027299a4604d88e418c15417055ae", "sha256": "ca1b980c5e3a3ab20be856bfdc3f99369114b49b054c63db8ea018fa6bd3f95a"}, "downloads": -1, "filename": "Automunge-2.96.tar.gz", "has_sig": false, "md5_digest": "7ba027299a4604d88e418c15417055ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194822, "upload_time": "2019-11-29T04:35:14", "upload_time_iso_8601": "2019-11-29T04:35:14.420732Z", "url": "https://files.pythonhosted.org/packages/31/77/f9d94f5a981173aec5e214814706d132b5135a48471a0845cc1229a31870/Automunge-2.96.tar.gz", "yanked": false}], "2.97": [{"comment_text": "", "digests": {"md5": "1b35042db623ba59d4612a0f3fd662f6", "sha256": "5a62f750de9b104c0e8219ba2d928c9f7a3781b3fc678e19f338649a914b4134"}, "downloads": -1, "filename": "Automunge-2.97-py3-none-any.whl", "has_sig": false, "md5_digest": "1b35042db623ba59d4612a0f3fd662f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 155729, "upload_time": "2019-12-02T02:10:46", "upload_time_iso_8601": "2019-12-02T02:10:46.338796Z", "url": "https://files.pythonhosted.org/packages/e5/00/3c4c3356f0c20db6bd5df4b295844a520184f44076238d25d73c5331e0c8/Automunge-2.97-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdc42f28eb09e504004a2add1c1bb841", "sha256": "5c2cb9e4b6f5c93bb3c5d9a90f18fea44f85f6bc3460241ffb5724773b80d3e7"}, "downloads": -1, "filename": "Automunge-2.97.tar.gz", "has_sig": false, "md5_digest": "bdc42f28eb09e504004a2add1c1bb841", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 198632, "upload_time": "2019-12-02T02:10:59", "upload_time_iso_8601": "2019-12-02T02:10:59.020666Z", "url": "https://files.pythonhosted.org/packages/58/fe/acec73f00ec5ced309f34ee636188507b8e938cacfee38bb03381ee0f201/Automunge-2.97.tar.gz", "yanked": false}], "2.98": [{"comment_text": "", "digests": {"md5": "6d5688d67170f4bdbc80f38483d260db", "sha256": "a80be62b7e92a6e0ff3ae997709c316bbaef5cba128b544227a160a44ed3975c"}, "downloads": -1, "filename": "Automunge-2.98-py3-none-any.whl", "has_sig": false, "md5_digest": "6d5688d67170f4bdbc80f38483d260db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156032, "upload_time": "2019-12-03T00:35:45", "upload_time_iso_8601": "2019-12-03T00:35:45.331168Z", "url": "https://files.pythonhosted.org/packages/d7/04/12ae26c395c57063a3f7d7d20757d93de9c7aa5b0422d98aaf2cd991f6cf/Automunge-2.98-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "771be6dc7b2be83b2d09a7f34c63c616", "sha256": "457f24710887bcab94d69a1313be237ba0dbc1882896f02314ff6bcdb78c9740"}, "downloads": -1, "filename": "Automunge-2.98.tar.gz", "has_sig": false, "md5_digest": "771be6dc7b2be83b2d09a7f34c63c616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 199145, "upload_time": "2019-12-03T00:35:47", "upload_time_iso_8601": "2019-12-03T00:35:47.415172Z", "url": "https://files.pythonhosted.org/packages/83/21/c378ad86f08fe216b91280ec5610ed6016bb445a930905aa17ba8adb24ac/Automunge-2.98.tar.gz", "yanked": false}], "2.99": [{"comment_text": "", "digests": {"md5": "ec652515fd6e76e891a3c05a90a01bd0", "sha256": "89f1c1b5fd7a80f641158ad743e559858e4a8dc107886b97ec759594601147b1"}, "downloads": -1, "filename": "Automunge-2.99-py3-none-any.whl", "has_sig": false, "md5_digest": "ec652515fd6e76e891a3c05a90a01bd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156184, "upload_time": "2019-12-04T03:27:42", "upload_time_iso_8601": "2019-12-04T03:27:42.572732Z", "url": "https://files.pythonhosted.org/packages/e2/49/030a7856f44938d8616354bf41235fdfc098898e534a63f270cfcb05e2f9/Automunge-2.99-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "167790ede6a5293468ba54ef17560670", "sha256": "2833a29dc7441e9822fb5f9d34b934e4d0ab30b105ac9ccf4575a4bc47435e65"}, "downloads": -1, "filename": "Automunge-2.99.tar.gz", "has_sig": false, "md5_digest": "167790ede6a5293468ba54ef17560670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 199515, "upload_time": "2019-12-04T03:27:44", "upload_time_iso_8601": "2019-12-04T03:27:44.588836Z", "url": "https://files.pythonhosted.org/packages/b3/81/04d94d7011a513815533522295a0c5e883d0b2f5ac9f97e602902f1ae49a/Automunge-2.99.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "2c998746b09cfe5288119cba164c4e4e", "sha256": "361c67f0cf62a6ebc36936f027315a8776d541c9ad9fd439f9494ec43b82fc7d"}, "downloads": -1, "filename": "Automunge-3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c998746b09cfe5288119cba164c4e4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 157556, "upload_time": "2019-12-05T18:44:39", "upload_time_iso_8601": "2019-12-05T18:44:39.453901Z", "url": "https://files.pythonhosted.org/packages/08/d7/dd32a3fc079da94a98438eb8747a5beb39bc71947c80014048932e423e44/Automunge-3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e529d31bf648d3cefc5bdde41611695", "sha256": "2539370d79c58776c14e7bb56af463094a685cfc5fe50b4428ca22376264fa03"}, "downloads": -1, "filename": "Automunge-3.0.tar.gz", "has_sig": false, "md5_digest": "7e529d31bf648d3cefc5bdde41611695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 201534, "upload_time": "2019-12-05T18:44:41", "upload_time_iso_8601": "2019-12-05T18:44:41.694061Z", "url": "https://files.pythonhosted.org/packages/6a/40/9771296b31e1392870d844a809d270c517dbfe5a18e6740d12397184130a/Automunge-3.0.tar.gz", "yanked": false}], "3.1": [{"comment_text": "", "digests": {"md5": "f56fa165e51a1e906a4e4190f81a18b0", "sha256": "b7903ff9db3bf9159315441992ad4f0af85b011dddae4dcb85db89a6f7d677c2"}, "downloads": -1, "filename": "Automunge-3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f56fa165e51a1e906a4e4190f81a18b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159254, "upload_time": "2019-12-06T18:43:26", "upload_time_iso_8601": "2019-12-06T18:43:26.887248Z", "url": "https://files.pythonhosted.org/packages/21/85/98809c3906a2b9c01fea50bbcda80c0911980a7c1aa6cd007659765de8b0/Automunge-3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffbc87a46174343a809310c80915516d", "sha256": "ea5882e43bfc2bab993d83262886c498b8e8a81b01daa7e21eee91df2d8ce069"}, "downloads": -1, "filename": "Automunge-3.1.tar.gz", "has_sig": false, "md5_digest": "ffbc87a46174343a809310c80915516d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 202728, "upload_time": "2019-12-06T18:43:29", "upload_time_iso_8601": "2019-12-06T18:43:29.934528Z", "url": "https://files.pythonhosted.org/packages/c4/0f/2eecafdef7cee35e179a5fce96e51a8912972d1298c6a1670698ef717bb9/Automunge-3.1.tar.gz", "yanked": false}], "3.10": [{"comment_text": "", "digests": {"md5": "81ded1b72f8f3e519dbfd167a0c690b5", "sha256": "b60c0ef9cf6a16d7cd8ad61ef96ba8aa81728de762c04df8c1a6fff1d605c8a5"}, "downloads": -1, "filename": "Automunge-3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "81ded1b72f8f3e519dbfd167a0c690b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 164119, "upload_time": "2019-12-21T19:59:24", "upload_time_iso_8601": "2019-12-21T19:59:24.709989Z", "url": "https://files.pythonhosted.org/packages/43/67/8ca34692666bc7fcf3f6465c48c976466a79a8dfb79203d4acefb20ddfff/Automunge-3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c855426375bea4b488d9dc35b3c9bf5b", "sha256": "c7910b5528619930cf802c2eaf4042cb7a33c1ecdf71d33c2ee197f8f670b321"}, "downloads": -1, "filename": "Automunge-3.10.tar.gz", "has_sig": false, "md5_digest": "c855426375bea4b488d9dc35b3c9bf5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 209108, "upload_time": "2019-12-21T19:59:27", "upload_time_iso_8601": "2019-12-21T19:59:27.204381Z", "url": "https://files.pythonhosted.org/packages/61/5d/2c113a48e78f717e68db34b1eb3746983a5777e8cff49562c27fed597acb/Automunge-3.10.tar.gz", "yanked": false}], "3.11": [{"comment_text": "", "digests": {"md5": "464c28a81aa1b5f433c65053d845f4a1", "sha256": "cf2c44acb7a907f91973276102d117247e878492ff8df2b0f6ece10f2cfced9a"}, "downloads": -1, "filename": "Automunge-3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "464c28a81aa1b5f433c65053d845f4a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 166733, "upload_time": "2019-12-24T16:26:25", "upload_time_iso_8601": "2019-12-24T16:26:25.229650Z", "url": "https://files.pythonhosted.org/packages/b5/e3/eaf0a3e78356d3533985a88480dabe8757d73e789c8ec82d1d58fd685aa8/Automunge-3.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37a9e2d5ae84a2ae996d0ef577baf7db", "sha256": "3e54a5b22e131f9cb10379d5ba0dcd5348dbda111c8868f51aa43a067ad1c918"}, "downloads": -1, "filename": "Automunge-3.11.tar.gz", "has_sig": false, "md5_digest": "37a9e2d5ae84a2ae996d0ef577baf7db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212111, "upload_time": "2019-12-24T16:26:28", "upload_time_iso_8601": "2019-12-24T16:26:28.461782Z", "url": "https://files.pythonhosted.org/packages/bf/21/1f8b6c2b90de0d2abcb813b162aa73b92edc0dc0400bedcf784db028815e/Automunge-3.11.tar.gz", "yanked": false}], "3.12": [{"comment_text": "", "digests": {"md5": "8d1d7213c9b51d6f35aaf1930271f608", "sha256": "e2b507d80f0b2ae988dcfb3ebf4fda63a390ad7920ed96f7397f760b12e35847"}, "downloads": -1, "filename": "Automunge-3.12-py3-none-any.whl", "has_sig": false, "md5_digest": "8d1d7213c9b51d6f35aaf1930271f608", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 167014, "upload_time": "2019-12-25T04:41:20", "upload_time_iso_8601": "2019-12-25T04:41:20.201567Z", "url": "https://files.pythonhosted.org/packages/6c/d6/3aec962fd1248445fb8badf78dfc0beb0dade54b3fd89abcb0a95a9d28fc/Automunge-3.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "727e4b4bca95e5af3436e32eae70aad8", "sha256": "b667995f8e9dbec16c2e7955d7704770284cdef1e051d8a9460d4ea144b35074"}, "downloads": -1, "filename": "Automunge-3.12.tar.gz", "has_sig": false, "md5_digest": "727e4b4bca95e5af3436e32eae70aad8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 212470, "upload_time": "2019-12-25T04:41:22", "upload_time_iso_8601": "2019-12-25T04:41:22.594144Z", "url": "https://files.pythonhosted.org/packages/71/a6/b8293f3de02ee7752408114d38e7bf955bbf9f23dd588d2734fc5aaaeefc/Automunge-3.12.tar.gz", "yanked": false}], "3.13": [{"comment_text": "", "digests": {"md5": "543ab7b20667985a53705d3f76230a83", "sha256": "dff711ae425d89f3f3f5a21316993db841c0fa8f5b0b3b746f335a7593c9056b"}, "downloads": -1, "filename": "Automunge-3.13-py3-none-any.whl", "has_sig": false, "md5_digest": "543ab7b20667985a53705d3f76230a83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 169076, "upload_time": "2019-12-27T05:49:23", "upload_time_iso_8601": "2019-12-27T05:49:23.901894Z", "url": "https://files.pythonhosted.org/packages/03/0b/051a84c3fb1ea96d503eac2f259e04caa5e0b31966a4c999fffc41cda95c/Automunge-3.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ddf1c5ba9d2cc1c94ed3a7224a93305a", "sha256": "043b61f3f8dda483f0e67ee4185f61bdb3f3e1e61f320da70bbeb7ab4829b3d8"}, "downloads": -1, "filename": "Automunge-3.13.tar.gz", "has_sig": false, "md5_digest": "ddf1c5ba9d2cc1c94ed3a7224a93305a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216360, "upload_time": "2019-12-27T05:49:26", "upload_time_iso_8601": "2019-12-27T05:49:26.700803Z", "url": "https://files.pythonhosted.org/packages/f7/2b/8d1452bcd598fbb1406fb304624fd74d17af38100d9ea25173b383f54715/Automunge-3.13.tar.gz", "yanked": false}], "3.14": [{"comment_text": "", "digests": {"md5": "cecb13b89b280d1842453abe71b57ae3", "sha256": "426ae3f4deb76150bdeccbc06945cd4ab11b84f07f6c83768216b03c13e57f33"}, "downloads": -1, "filename": "Automunge-3.14-py3-none-any.whl", "has_sig": false, "md5_digest": "cecb13b89b280d1842453abe71b57ae3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 169357, "upload_time": "2019-12-30T04:31:05", "upload_time_iso_8601": "2019-12-30T04:31:05.794474Z", "url": "https://files.pythonhosted.org/packages/37/1e/f15c54ea84d2dfd6ad970254fff02bc3be82f115d675f3f45143425cf14a/Automunge-3.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e9013130889c1487e48690343f93e49", "sha256": "1664e02bf6efe374210c0981461f3bf0400dce395d49bfe2cccb0ffe5ceed3ce"}, "downloads": -1, "filename": "Automunge-3.14.tar.gz", "has_sig": false, "md5_digest": "5e9013130889c1487e48690343f93e49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216796, "upload_time": "2019-12-30T04:31:08", "upload_time_iso_8601": "2019-12-30T04:31:08.499475Z", "url": "https://files.pythonhosted.org/packages/6a/b6/25e30f4eeccb66bc770ed2994fee453cce1e4f4f409ddf42e8b3fd98a650/Automunge-3.14.tar.gz", "yanked": false}], "3.15": [{"comment_text": "", "digests": {"md5": "33bd89c43ecaa6f14f8f2e6eefd45aa6", "sha256": "3a1414d61167958478ac09f19abf90b0a46e21c6275c5dc036acddb179aa727a"}, "downloads": -1, "filename": "Automunge-3.15-py3-none-any.whl", "has_sig": false, "md5_digest": "33bd89c43ecaa6f14f8f2e6eefd45aa6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 169555, "upload_time": "2019-12-30T15:20:43", "upload_time_iso_8601": "2019-12-30T15:20:43.544502Z", "url": "https://files.pythonhosted.org/packages/8e/80/4aa71ec8742d0aa2c91b7b1f0e1862c3c6d6ca325b3cd00442d7a8d89fbb/Automunge-3.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "172d4bae65fa1e39b0eca7a1af6b23a6", "sha256": "1affa1dd98250585afd7bd82f3a5577ea0df553047926a8422d94f4fa80e2ad8"}, "downloads": -1, "filename": "Automunge-3.15.tar.gz", "has_sig": false, "md5_digest": "172d4bae65fa1e39b0eca7a1af6b23a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217014, "upload_time": "2019-12-30T15:20:45", "upload_time_iso_8601": "2019-12-30T15:20:45.640240Z", "url": "https://files.pythonhosted.org/packages/8a/f2/4d35fa188b0c3df07503bd157258a825dbb11ae3b4ac843d37d4f92b5c7f/Automunge-3.15.tar.gz", "yanked": false}], "3.16": [{"comment_text": "", "digests": {"md5": "d5986fc82c16e85f6d2adedc382e5e92", "sha256": "a08fcf00c157f0207dc7d3ad7fd799de673f8a27ab2846e2920a5af708025e64"}, "downloads": -1, "filename": "Automunge-3.16-py3-none-any.whl", "has_sig": false, "md5_digest": "d5986fc82c16e85f6d2adedc382e5e92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 169901, "upload_time": "2020-01-01T21:04:08", "upload_time_iso_8601": "2020-01-01T21:04:08.894786Z", "url": "https://files.pythonhosted.org/packages/00/0a/fa31fb25ca700983f8cf9bfeec09021235baea6169e671364300dd3c9dd9/Automunge-3.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69647c952cbf2cb5019ce51c3afc5899", "sha256": "5de2203ee6d2e5f5c7caa6772fe16f49138163488267f74faa50c7462fba4adf"}, "downloads": -1, "filename": "Automunge-3.16.tar.gz", "has_sig": false, "md5_digest": "69647c952cbf2cb5019ce51c3afc5899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 217926, "upload_time": "2020-01-01T21:04:11", "upload_time_iso_8601": "2020-01-01T21:04:11.518246Z", "url": "https://files.pythonhosted.org/packages/0a/00/d468dabcd991380369cab0c286072d75e61f7c16633bf4f6675c1e255ffd/Automunge-3.16.tar.gz", "yanked": false}], "3.17": [{"comment_text": "", "digests": {"md5": "81e17f990e7beac41cf6c45980be5b67", "sha256": "78e55d18ac0a0703eda15c4b16680e38b713eccaec70b212b6e7be72971223e4"}, "downloads": -1, "filename": "Automunge-3.17-py3-none-any.whl", "has_sig": false, "md5_digest": "81e17f990e7beac41cf6c45980be5b67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 173053, "upload_time": "2020-01-04T05:05:50", "upload_time_iso_8601": "2020-01-04T05:05:50.357624Z", "url": "https://files.pythonhosted.org/packages/ca/a1/04ef461832e88271f2b06ff83d6a7360a528bf1810ac90ee9929490304c7/Automunge-3.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "820d01a799e4d6b14edd843fd22c3ec5", "sha256": "78cd1e7175e6ff533230d33d17affbb4716004ffc788db334d32da8a7015069d"}, "downloads": -1, "filename": "Automunge-3.17.tar.gz", "has_sig": false, "md5_digest": "820d01a799e4d6b14edd843fd22c3ec5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 222117, "upload_time": "2020-01-04T05:05:52", "upload_time_iso_8601": "2020-01-04T05:05:52.695487Z", "url": "https://files.pythonhosted.org/packages/ee/f6/83a6087dd5d0ed80a755a56c76c9473d56804c3cd1dd968d6e6e0e1d0ad2/Automunge-3.17.tar.gz", "yanked": false}], "3.18": [{"comment_text": "", "digests": {"md5": "e73d895eb6aa995b2c6628e0e2652fe5", "sha256": "f6aed678d9869fb69974643b39cc8853107783ac4ab6a9f48b1285cff051217d"}, "downloads": -1, "filename": "Automunge-3.18-py3-none-any.whl", "has_sig": false, "md5_digest": "e73d895eb6aa995b2c6628e0e2652fe5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 173237, "upload_time": "2020-01-04T21:29:31", "upload_time_iso_8601": "2020-01-04T21:29:31.590823Z", "url": "https://files.pythonhosted.org/packages/b6/50/b2538851ac3a568e02377d775b068946323cedcb2b4f59c42de5e30a86e4/Automunge-3.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "faffcd5dd10b2f5555f0df1feadee82b", "sha256": "e65b9a50e1ae8588e051a5c3ba33a78a05296cd303c344d540bfafafc85a7ed1"}, "downloads": -1, "filename": "Automunge-3.18.tar.gz", "has_sig": false, "md5_digest": "faffcd5dd10b2f5555f0df1feadee82b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 222264, "upload_time": "2020-01-04T21:29:34", "upload_time_iso_8601": "2020-01-04T21:29:34.360947Z", "url": "https://files.pythonhosted.org/packages/58/f0/83175cd617021016e79d1e91f33991c957c27aa3de545ea08cf601cd5be6/Automunge-3.18.tar.gz", "yanked": false}], "3.19": [{"comment_text": "", "digests": {"md5": "e3857f58c43d76bf438600c40652666f", "sha256": "66c1b3e6a0da14383e74ade428695ac2bb0e6d69e6c807a8b88d9803107822e0"}, "downloads": -1, "filename": "Automunge-3.19-py3-none-any.whl", "has_sig": false, "md5_digest": "e3857f58c43d76bf438600c40652666f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 173911, "upload_time": "2020-01-09T01:32:43", "upload_time_iso_8601": "2020-01-09T01:32:43.408152Z", "url": "https://files.pythonhosted.org/packages/1c/85/9ff49b0f991827f2c0178d886b777bdb2c8fdc0e1700ff20ca88aba2b25f/Automunge-3.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1baa02da23fba5be3d73de829b1f79ae", "sha256": "e6798b9a093328ef51148e575e969a65bd0474dbcaa3e1e0a5ed0d3ee33dbfd1"}, "downloads": -1, "filename": "Automunge-3.19.tar.gz", "has_sig": false, "md5_digest": "1baa02da23fba5be3d73de829b1f79ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 224109, "upload_time": "2020-01-09T01:32:45", "upload_time_iso_8601": "2020-01-09T01:32:45.904898Z", "url": "https://files.pythonhosted.org/packages/38/11/8cfabb88446149e34d83d40780f1459d2063ae60dd625048da6ce3ef29bf/Automunge-3.19.tar.gz", "yanked": false}], "3.2": [{"comment_text": "", "digests": {"md5": "dac2bd394d01dc13dbeb36057600c6c6", "sha256": "728c7c1b49c983b09efa98557ea21ba6a9855778c3c468c0b73a9ca42d021196"}, "downloads": -1, "filename": "Automunge-3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dac2bd394d01dc13dbeb36057600c6c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159311, "upload_time": "2019-12-07T04:48:18", "upload_time_iso_8601": "2019-12-07T04:48:18.433435Z", "url": "https://files.pythonhosted.org/packages/9d/c2/e69c0f18607ae9f11d4a2fc8fbea657560cab55cc65f7ca394f577a6c0a1/Automunge-3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77699f66fd34e7f68078cda068c1aac1", "sha256": "db66e0ea45c33876cd5c2fba6fd17ba091de50c5fc36d0ec855bc9372543cfea"}, "downloads": -1, "filename": "Automunge-3.2.tar.gz", "has_sig": false, "md5_digest": "77699f66fd34e7f68078cda068c1aac1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 202907, "upload_time": "2019-12-07T04:48:20", "upload_time_iso_8601": "2019-12-07T04:48:20.556604Z", "url": "https://files.pythonhosted.org/packages/eb/9c/c9abc034e4b7ae2bc206ff9c77f2fb75d57a33a5ac60bec864370d451dbb/Automunge-3.2.tar.gz", "yanked": false}], "3.20": [{"comment_text": "", "digests": {"md5": "903c07b56a4b8c785b31648c7f36bb2d", "sha256": "50ca24e1b80523e00f6e4b3f05788ad32458fe8de5316321f8bab10fa7db3f0d"}, "downloads": -1, "filename": "Automunge-3.20-py3-none-any.whl", "has_sig": false, "md5_digest": "903c07b56a4b8c785b31648c7f36bb2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 178561, "upload_time": "2020-01-21T00:11:49", "upload_time_iso_8601": "2020-01-21T00:11:49.549089Z", "url": "https://files.pythonhosted.org/packages/b6/ba/2c2874096f61d153ddc11b4a2136ecd170dae7771901b944571fb5c4265d/Automunge-3.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81653f9579d60bb0d4ece84872be4116", "sha256": "e12fa586ed76868383d54c098cd5f990eef14fbf38d9a63bc6932fbf1f9fd713"}, "downloads": -1, "filename": "Automunge-3.20.tar.gz", "has_sig": false, "md5_digest": "81653f9579d60bb0d4ece84872be4116", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231564, "upload_time": "2020-01-21T00:11:52", "upload_time_iso_8601": "2020-01-21T00:11:52.042458Z", "url": "https://files.pythonhosted.org/packages/8e/a3/8da57490c64fabbf124634201df8e70d5794cee4d8fa163f730ed54f3267/Automunge-3.20.tar.gz", "yanked": false}], "3.21": [{"comment_text": "", "digests": {"md5": "7d83c5732e895a6dfb3ee71771ef3aef", "sha256": "523c0e380e4d398c8773991e6eb876f6371dfdf3cc3b46618a7b651fed0fb87f"}, "downloads": -1, "filename": "Automunge-3.21-py3-none-any.whl", "has_sig": false, "md5_digest": "7d83c5732e895a6dfb3ee71771ef3aef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 179026, "upload_time": "2020-01-31T02:39:29", "upload_time_iso_8601": "2020-01-31T02:39:29.439036Z", "url": "https://files.pythonhosted.org/packages/0b/85/24f0cde3a0568d5debfdb66d300a9ca3aebbc5d00726b7b670454931e9ef/Automunge-3.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5885da46b9a87c3c126538693116875c", "sha256": "5d75fa1c549f0f48a2c06f96364713bf80d64ee9e8627113fc4c8a31e88ff029"}, "downloads": -1, "filename": "Automunge-3.21.tar.gz", "has_sig": false, "md5_digest": "5885da46b9a87c3c126538693116875c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232924, "upload_time": "2020-01-31T02:39:31", "upload_time_iso_8601": "2020-01-31T02:39:31.609645Z", "url": "https://files.pythonhosted.org/packages/cb/3a/8486bf3b0c121c6f273e96d86ccdebb30158c7e5c8c08151a32ed60ff475/Automunge-3.21.tar.gz", "yanked": false}], "3.22": [{"comment_text": "", "digests": {"md5": "0602eff108ed661c69d8b963bd5c2766", "sha256": "c758f0870d44bd0b35631dc4f108aaa250b93073c8f20ac8c4cebb565634b6e6"}, "downloads": -1, "filename": "Automunge-3.22-py3-none-any.whl", "has_sig": false, "md5_digest": "0602eff108ed661c69d8b963bd5c2766", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 176948, "upload_time": "2020-02-06T21:22:29", "upload_time_iso_8601": "2020-02-06T21:22:29.206490Z", "url": "https://files.pythonhosted.org/packages/f4/9a/e31ec8e429c0ea4642cbe9cdf7e4e8ab625db8776bb33c1a96f4c86e262b/Automunge-3.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a979b2dd1710b10baf9030fa2d2f0616", "sha256": "7771275e7cb63429dcae82144e5e9ae3ac43408939c587c2ea314469f5453a6b"}, "downloads": -1, "filename": "Automunge-3.22.tar.gz", "has_sig": false, "md5_digest": "a979b2dd1710b10baf9030fa2d2f0616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 231554, "upload_time": "2020-02-06T21:22:32", "upload_time_iso_8601": "2020-02-06T21:22:32.054624Z", "url": "https://files.pythonhosted.org/packages/85/74/35d60923b493c5ac09a49bb233ac1e9e25569f91170e034abad757412d67/Automunge-3.22.tar.gz", "yanked": false}], "3.23": [{"comment_text": "", "digests": {"md5": "264e95a0be2a19fcfabbac8e1ba5b0e6", "sha256": "bc3d86102139158b6fe3f650ea79edb300975a88b38d63425d29040621b4fe28"}, "downloads": -1, "filename": "Automunge-3.23-py3-none-any.whl", "has_sig": false, "md5_digest": "264e95a0be2a19fcfabbac8e1ba5b0e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 177404, "upload_time": "2020-02-13T02:34:32", "upload_time_iso_8601": "2020-02-13T02:34:32.600942Z", "url": "https://files.pythonhosted.org/packages/55/58/d50799b9f2fbeb9f4697016198d7ae597250b728e28e4a09f5db04edcbc1/Automunge-3.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9086df8528998abbbf5b59edd5f1dc5d", "sha256": "091290f03c661a7fb24f41c9c4e8183de9a9e9fa8de74d6d82c6974afd0a2b10"}, "downloads": -1, "filename": "Automunge-3.23.tar.gz", "has_sig": false, "md5_digest": "9086df8528998abbbf5b59edd5f1dc5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232168, "upload_time": "2020-02-13T02:34:35", "upload_time_iso_8601": "2020-02-13T02:34:35.301740Z", "url": "https://files.pythonhosted.org/packages/21/7e/131a5b251b9e6f06420d0d315709feed84d9ecbadaffb89783ada9b71adf/Automunge-3.23.tar.gz", "yanked": false}], "3.24": [{"comment_text": "", "digests": {"md5": "b5cb0adf0a68d861f4af8455466802cb", "sha256": "96cf0d83600404c1d9939ef600829eaad9b0cd9c1ac60fc4b85d34cd88e41498"}, "downloads": -1, "filename": "Automunge-3.24-py3-none-any.whl", "has_sig": false, "md5_digest": "b5cb0adf0a68d861f4af8455466802cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 178020, "upload_time": "2020-02-16T01:13:33", "upload_time_iso_8601": "2020-02-16T01:13:33.422010Z", "url": "https://files.pythonhosted.org/packages/54/c9/b54aef42cfc5f64d1b849472f43c045bb754c6dfcb25cceb8decfc6a3932/Automunge-3.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bee5c29d09a49b1975e8103f1848014", "sha256": "41e0ca8d2f28f72d89a2d2ffde549a9691f3605a91705c8b2334e2315bfa641c"}, "downloads": -1, "filename": "Automunge-3.24.tar.gz", "has_sig": false, "md5_digest": "8bee5c29d09a49b1975e8103f1848014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232942, "upload_time": "2020-02-16T01:13:36", "upload_time_iso_8601": "2020-02-16T01:13:36.397339Z", "url": "https://files.pythonhosted.org/packages/2c/87/3f6a95bebbc0a1369fa836f6e269bbdadd7267367ea15337f44921b4de24/Automunge-3.24.tar.gz", "yanked": false}], "3.25": [{"comment_text": "", "digests": {"md5": "579159fdd2ed03899e0ffbc91a5db8a3", "sha256": "16815fb28815f4f816aedbeecb2e8f19bfb90d5ddcae85d0bca0a4f1bf1f82e0"}, "downloads": -1, "filename": "Automunge-3.25-py3-none-any.whl", "has_sig": false, "md5_digest": "579159fdd2ed03899e0ffbc91a5db8a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 177991, "upload_time": "2020-02-19T01:40:47", "upload_time_iso_8601": "2020-02-19T01:40:47.030868Z", "url": "https://files.pythonhosted.org/packages/81/ef/3a912677d8e87c064e8c42aa0a62ec0a99816905a184d02083497abc266e/Automunge-3.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f34d4189452cb5a14f3ed6d3b4e66db", "sha256": "d134c2ab7f9aa1e5f4c5bb7844041962b932953192922f77ae1782c1cc54e025"}, "downloads": -1, "filename": "Automunge-3.25.tar.gz", "has_sig": false, "md5_digest": "5f34d4189452cb5a14f3ed6d3b4e66db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232955, "upload_time": "2020-02-19T01:40:49", "upload_time_iso_8601": "2020-02-19T01:40:49.525647Z", "url": "https://files.pythonhosted.org/packages/59/01/38156de41bbc079c4b6d43f3665c6dd34a22fcdca5c6c888a80115bfa9f6/Automunge-3.25.tar.gz", "yanked": false}], "3.26": [{"comment_text": "", "digests": {"md5": "c9988f1759f72fbdedc0125d19b8d240", "sha256": "208ece8f0496426c601b8b04b2467f9f200f32b4dd438656ac2dd107506d881e"}, "downloads": -1, "filename": "Automunge-3.26-py3-none-any.whl", "has_sig": false, "md5_digest": "c9988f1759f72fbdedc0125d19b8d240", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 178334, "upload_time": "2020-02-20T22:54:04", "upload_time_iso_8601": "2020-02-20T22:54:04.916382Z", "url": "https://files.pythonhosted.org/packages/22/7a/48e4201cc86bfa06e75f08d6467f383e7ed6d59292be10bf6b6ba31eecce/Automunge-3.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59adac64c0abd273e42b0336e5ffe947", "sha256": "b37ceb942be37f94f4c577fbcb04d79b54c52979d3d26bc6b54c9ea79ec8e673"}, "downloads": -1, "filename": "Automunge-3.26.tar.gz", "has_sig": false, "md5_digest": "59adac64c0abd273e42b0336e5ffe947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 233556, "upload_time": "2020-02-20T22:54:07", "upload_time_iso_8601": "2020-02-20T22:54:07.202920Z", "url": "https://files.pythonhosted.org/packages/1e/a3/ef4b02d55e489e0b5b91161c590b921474a4e401d7051275096d6337eae4/Automunge-3.26.tar.gz", "yanked": false}], "3.27": [{"comment_text": "", "digests": {"md5": "ec765bd7533221e0785f6377e6a0a690", "sha256": "e6e3087fcd43113761ef7e4db3b293cbec62a119f2cc52dcdee52c01a7052ee4"}, "downloads": -1, "filename": "Automunge-3.27-py3-none-any.whl", "has_sig": false, "md5_digest": "ec765bd7533221e0785f6377e6a0a690", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 179674, "upload_time": "2020-02-22T06:07:27", "upload_time_iso_8601": "2020-02-22T06:07:27.412621Z", "url": "https://files.pythonhosted.org/packages/ff/5e/f44bf9a501252a03044c571a2c5f00764f3e867d3614c6278d55ebf73726/Automunge-3.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fdab0ce05f229e552ad8e655105a6df", "sha256": "d9e12bbab9870596285e54abb1bc2e8422637bb095cbffb417ffc5cb3de931cd"}, "downloads": -1, "filename": "Automunge-3.27.tar.gz", "has_sig": false, "md5_digest": "4fdab0ce05f229e552ad8e655105a6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 235861, "upload_time": "2020-02-22T06:07:29", "upload_time_iso_8601": "2020-02-22T06:07:29.443990Z", "url": "https://files.pythonhosted.org/packages/be/64/4249cd8b4efa4ed802ac39a27de3abe7f72a75a6def08729e0ef27295c63/Automunge-3.27.tar.gz", "yanked": false}], "3.28": [{"comment_text": "", "digests": {"md5": "2cc02f61456a7489233b229bc0653cba", "sha256": "e72cdcbfca6280a3ee19a5931d40c8e8abd855e5a0208cccf22d3e9911239e0d"}, "downloads": -1, "filename": "Automunge-3.28-py3-none-any.whl", "has_sig": false, "md5_digest": "2cc02f61456a7489233b229bc0653cba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 181511, "upload_time": "2020-02-26T05:50:09", "upload_time_iso_8601": "2020-02-26T05:50:09.114548Z", "url": "https://files.pythonhosted.org/packages/dc/b3/e05711c4a73fb5ce9e7e1107b5c29452e79052f970402db94307c813677a/Automunge-3.28-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6edc1c4986a9faa4bde9d6879d2f707", "sha256": "2097b6e5ce0b962ac3e87923219ea891465f5087c43a853b5e602b2c079d7883"}, "downloads": -1, "filename": "Automunge-3.28.tar.gz", "has_sig": false, "md5_digest": "e6edc1c4986a9faa4bde9d6879d2f707", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 238856, "upload_time": "2020-02-26T05:50:11", "upload_time_iso_8601": "2020-02-26T05:50:11.652414Z", "url": "https://files.pythonhosted.org/packages/af/a0/e9f3b296c49e33f4d580da2c9475ad3927e2f85f115afec503ea93a8148b/Automunge-3.28.tar.gz", "yanked": false}], "3.29": [{"comment_text": "", "digests": {"md5": "94b00928d211482d6137cb90ef507a6d", "sha256": "b95dfcc5f9577d6a12c16f4348f5c7ea6eab8d2cca5ba5f519ec1017983ca497"}, "downloads": -1, "filename": "Automunge-3.29-py3-none-any.whl", "has_sig": false, "md5_digest": "94b00928d211482d6137cb90ef507a6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 181304, "upload_time": "2020-02-29T20:52:43", "upload_time_iso_8601": "2020-02-29T20:52:43.770937Z", "url": "https://files.pythonhosted.org/packages/5b/b0/2da17f2703b32dca4ba495422c0e8f42a576128b7bdf20e03668ccf383b8/Automunge-3.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b49981acfd13db412ee745d810a766c0", "sha256": "5ff54cde67ab10a12e534b3361232e5a6035efaff8aaa57ad253c93d08c51bf4"}, "downloads": -1, "filename": "Automunge-3.29.tar.gz", "has_sig": false, "md5_digest": "b49981acfd13db412ee745d810a766c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 239262, "upload_time": "2020-02-29T20:52:46", "upload_time_iso_8601": "2020-02-29T20:52:46.277714Z", "url": "https://files.pythonhosted.org/packages/06/78/05ceab581335e55c57771885b01a5cb0edc8a727e24b22fb2e64308a7b33/Automunge-3.29.tar.gz", "yanked": false}], "3.3": [{"comment_text": "", "digests": {"md5": "a0ea7c51e45a89cca732289d9001f4a0", "sha256": "18dd4449c3c05213ddca442c463b52cb562eebfaf20f3735daab519b61f6de1d"}, "downloads": -1, "filename": "Automunge-3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a0ea7c51e45a89cca732289d9001f4a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159396, "upload_time": "2019-12-08T20:53:47", "upload_time_iso_8601": "2019-12-08T20:53:47.232792Z", "url": "https://files.pythonhosted.org/packages/ea/c5/eec27224ef41a2d381e2e80c9a616ac91f850d5636bd8ae9053b0a644833/Automunge-3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc365d5641cea6d34b10b0cf65d5d038", "sha256": "1997decab4f4b9ed4953a8a39c790d17b11a6e7bad54fd3357e48ca167687cd0"}, "downloads": -1, "filename": "Automunge-3.3.tar.gz", "has_sig": false, "md5_digest": "bc365d5641cea6d34b10b0cf65d5d038", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203025, "upload_time": "2019-12-08T20:53:49", "upload_time_iso_8601": "2019-12-08T20:53:49.546586Z", "url": "https://files.pythonhosted.org/packages/e2/5c/e1d9a3520d0b37fd831f7ab0857008150b7aae5d9a4ae57481bd265f98cb/Automunge-3.3.tar.gz", "yanked": false}], "3.30": [{"comment_text": "", "digests": {"md5": "74548834d8854cfe51f90ac3bdb56ea0", "sha256": "7507905fa904e062e54867341069f739c50b82d1051327567dd89bafd643505a"}, "downloads": -1, "filename": "Automunge-3.30-py3-none-any.whl", "has_sig": false, "md5_digest": "74548834d8854cfe51f90ac3bdb56ea0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 181726, "upload_time": "2020-03-02T05:07:53", "upload_time_iso_8601": "2020-03-02T05:07:53.975991Z", "url": "https://files.pythonhosted.org/packages/4f/91/ddcc756f9739304325240004c0d80f828eab74dffce099e61106700e2446/Automunge-3.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d609500479561857275e1dc660c4835", "sha256": "b0d9af0ea1d4e45b5b7942c3d07afae63a72b1689ce11c5905ad08be069d802e"}, "downloads": -1, "filename": "Automunge-3.30.tar.gz", "has_sig": false, "md5_digest": "1d609500479561857275e1dc660c4835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 240033, "upload_time": "2020-03-02T05:07:55", "upload_time_iso_8601": "2020-03-02T05:07:55.963965Z", "url": "https://files.pythonhosted.org/packages/c0/2f/bebd9535572932c6e2ba800982541f6cce1805980a9f31eae00d4684ae60/Automunge-3.30.tar.gz", "yanked": false}], "3.31": [{"comment_text": "", "digests": {"md5": "3bdb45c814173d4e2ce123d563774c73", "sha256": "60ac1d9e2721af2e1381668262c60dfcbecc6cbe568853cb91a441ae0eacc99e"}, "downloads": -1, "filename": "Automunge-3.31-py3-none-any.whl", "has_sig": false, "md5_digest": "3bdb45c814173d4e2ce123d563774c73", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 182539, "upload_time": "2020-03-03T03:51:30", "upload_time_iso_8601": "2020-03-03T03:51:30.598111Z", "url": "https://files.pythonhosted.org/packages/b2/ac/5668823f8c510620db9387686a37e99a16d7302f1400a72ab1cfa9ef2dfa/Automunge-3.31-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "075d4ad54e0363bae8012c05b8f38e57", "sha256": "0b7d4ee5a2dd8585cb906985926d29e53873d083734ffc87c76f093d3eda99d7"}, "downloads": -1, "filename": "Automunge-3.31.tar.gz", "has_sig": false, "md5_digest": "075d4ad54e0363bae8012c05b8f38e57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 241339, "upload_time": "2020-03-03T03:51:32", "upload_time_iso_8601": "2020-03-03T03:51:32.726940Z", "url": "https://files.pythonhosted.org/packages/60/c4/a43a58cfd8527aaca7cd0fb7cd321db2fd030ebdd9d19c690b32dd63bc23/Automunge-3.31.tar.gz", "yanked": false}], "3.32": [{"comment_text": "", "digests": {"md5": "a7e5d3d34e1be4efe78eeee6c3d28b02", "sha256": "82babfdf96c38d9dd1742f4a213d7d8db49acf6301318784d38aeb35ca488262"}, "downloads": -1, "filename": "Automunge-3.32-py3-none-any.whl", "has_sig": false, "md5_digest": "a7e5d3d34e1be4efe78eeee6c3d28b02", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 183035, "upload_time": "2020-03-04T03:47:15", "upload_time_iso_8601": "2020-03-04T03:47:15.274789Z", "url": "https://files.pythonhosted.org/packages/ab/62/dcff0177867f707b4c3489d608c5fc0a5fe00bb828866307a8fa9e3e4bd0/Automunge-3.32-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6557034ac2956be81fe48c5acef883cc", "sha256": "0b5049ed4d4ecd9a22686e0052b5d5c583e1c8af0b912ddeeafbdb12be0a708e"}, "downloads": -1, "filename": "Automunge-3.32.tar.gz", "has_sig": false, "md5_digest": "6557034ac2956be81fe48c5acef883cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 241896, "upload_time": "2020-03-04T03:47:17", "upload_time_iso_8601": "2020-03-04T03:47:17.702161Z", "url": "https://files.pythonhosted.org/packages/ea/74/ea7e37e332f81f60eeabbcb2edbcdb15114e21974f23cc3e0da0c636a398/Automunge-3.32.tar.gz", "yanked": false}], "3.33": [{"comment_text": "", "digests": {"md5": "24a7f175a7a4ef65f13f7ab28d1d8a64", "sha256": "bd82e82280e17ee833d4284db6cd53fddc720ccddc31987f24c5eb6c96178575"}, "downloads": -1, "filename": "Automunge-3.33-py3-none-any.whl", "has_sig": false, "md5_digest": "24a7f175a7a4ef65f13f7ab28d1d8a64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 183256, "upload_time": "2020-03-04T19:21:39", "upload_time_iso_8601": "2020-03-04T19:21:39.537492Z", "url": "https://files.pythonhosted.org/packages/de/8f/b0f93409bf8a9d3247118f58a1fab3f01abdaec64fd26dec3593247e2528/Automunge-3.33-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3932379e946e8d0614a8773ffd13917", "sha256": "abd102a42e95c794dbb5be7a5d8a599286f5180ac7c6a2b6df7bbb7389b3e6b4"}, "downloads": -1, "filename": "Automunge-3.33.tar.gz", "has_sig": false, "md5_digest": "a3932379e946e8d0614a8773ffd13917", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242152, "upload_time": "2020-03-04T19:21:42", "upload_time_iso_8601": "2020-03-04T19:21:42.150110Z", "url": "https://files.pythonhosted.org/packages/df/71/91b176c2eb29f98e0c4ef65501c38cacd2f19590232c8358fa2d4e63acb6/Automunge-3.33.tar.gz", "yanked": false}], "3.34": [{"comment_text": "", "digests": {"md5": "ff0fff8e7908779891b74888b86f9c13", "sha256": "9c9d8c8e79b58f8d0ce6e817f289030eb39325f8603144ffdaf235de61c968e9"}, "downloads": -1, "filename": "Automunge-3.34-py3-none-any.whl", "has_sig": false, "md5_digest": "ff0fff8e7908779891b74888b86f9c13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 183693, "upload_time": "2020-03-05T00:09:10", "upload_time_iso_8601": "2020-03-05T00:09:10.534598Z", "url": "https://files.pythonhosted.org/packages/4d/ba/42d8b35c92a8009eb7e3104f7855701b9542605bedd5b82d05d85f374950/Automunge-3.34-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6783fec6d1f9033696ac14aca373d327", "sha256": "ecdc256fc5476f3280a884cfd511d7207c05d942387e256c3358ca9e8344c9f0"}, "downloads": -1, "filename": "Automunge-3.34.tar.gz", "has_sig": false, "md5_digest": "6783fec6d1f9033696ac14aca373d327", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242711, "upload_time": "2020-03-05T00:09:12", "upload_time_iso_8601": "2020-03-05T00:09:12.957616Z", "url": "https://files.pythonhosted.org/packages/8c/f4/f45e774993864a81f789ca13d90636443ed34141f6fee7316688558c0d0d/Automunge-3.34.tar.gz", "yanked": false}], "3.35": [{"comment_text": "", "digests": {"md5": "3220d6bbef986ddc6d10457da47debdd", "sha256": "a578a240c5bf4622c6a9884f2269d37e2d70a5cd020a3aad52a9a1ac859cd763"}, "downloads": -1, "filename": "Automunge-3.35-py3-none-any.whl", "has_sig": false, "md5_digest": "3220d6bbef986ddc6d10457da47debdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 183523, "upload_time": "2020-03-05T04:56:12", "upload_time_iso_8601": "2020-03-05T04:56:12.768039Z", "url": "https://files.pythonhosted.org/packages/ea/71/44ac2cbd1ebfeaa047f30a68534e8c8858391728e2e05df648d0276e60ba/Automunge-3.35-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "851c04ac2db6e67226be358732d5897e", "sha256": "6d0d9508db3679378a575cd3582e99809ce51cf02c4fc8788e48fe2c2b8633f6"}, "downloads": -1, "filename": "Automunge-3.35.tar.gz", "has_sig": false, "md5_digest": "851c04ac2db6e67226be358732d5897e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 242341, "upload_time": "2020-03-05T04:56:14", "upload_time_iso_8601": "2020-03-05T04:56:14.975368Z", "url": "https://files.pythonhosted.org/packages/7d/b9/53615ba9351196c96548fcef0764327f69e2a64b6b252b25b78c539357e9/Automunge-3.35.tar.gz", "yanked": false}], "3.36": [{"comment_text": "", "digests": {"md5": "4b468b6f435a37d7700795d698caaddc", "sha256": "87096ab867c1625734f762acd505ea44768be0d919d08584d7813060ab837bcd"}, "downloads": -1, "filename": "Automunge-3.36-py3-none-any.whl", "has_sig": false, "md5_digest": "4b468b6f435a37d7700795d698caaddc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 184868, "upload_time": "2020-03-06T20:12:25", "upload_time_iso_8601": "2020-03-06T20:12:25.594787Z", "url": "https://files.pythonhosted.org/packages/c4/02/1e0c5b1a0d1d00e8f3fe4dd765ef384f58c61b2d182bf30db76f0a0ce897/Automunge-3.36-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91523b1c204da4b6252e00795616fd2d", "sha256": "640eeabe2e083d0821c593ae7f47f26e41c6b35a7a5da8e4006cc97252836beb"}, "downloads": -1, "filename": "Automunge-3.36.tar.gz", "has_sig": false, "md5_digest": "91523b1c204da4b6252e00795616fd2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 244021, "upload_time": "2020-03-06T20:12:28", "upload_time_iso_8601": "2020-03-06T20:12:28.061109Z", "url": "https://files.pythonhosted.org/packages/f1/b2/131c72b41f5774c2f16c16d87a19f33f827ac6e4dc52279a52c86f65cd93/Automunge-3.36.tar.gz", "yanked": false}], "3.37": [{"comment_text": "", "digests": {"md5": "fe15cceded96ece7fdc6aa5e1384526b", "sha256": "982ecae623335e18a065f6001d2cedebee245011bfd633b3a38d45fedb5e3a8f"}, "downloads": -1, "filename": "Automunge-3.37-py3-none-any.whl", "has_sig": false, "md5_digest": "fe15cceded96ece7fdc6aa5e1384526b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 185084, "upload_time": "2020-03-07T01:16:55", "upload_time_iso_8601": "2020-03-07T01:16:55.457689Z", "url": "https://files.pythonhosted.org/packages/5e/8b/96d3719c50bdd745eeae3e70ec74434aa12252d3f16a404dc94f760412a4/Automunge-3.37-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2690fe1d13f28de435f032df7489128", "sha256": "55b21c6fe0554a6f0fadc2b0f69787c869a1878b09d77ef7707591fd8339e67e"}, "downloads": -1, "filename": "Automunge-3.37.tar.gz", "has_sig": false, "md5_digest": "b2690fe1d13f28de435f032df7489128", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 244426, "upload_time": "2020-03-07T01:16:57", "upload_time_iso_8601": "2020-03-07T01:16:57.885059Z", "url": "https://files.pythonhosted.org/packages/30/1e/adf0d2906c261254baa427009379d4e5d12a37e25cf95656076e90978be6/Automunge-3.37.tar.gz", "yanked": false}], "3.38": [{"comment_text": "", "digests": {"md5": "7d6e47bc91b821687a6ed9dad5e90b8a", "sha256": "d77b75071829e65369398e18337ac97e1f04b49c5999356c0549825d9f9bfd72"}, "downloads": -1, "filename": "Automunge-3.38-py3-none-any.whl", "has_sig": false, "md5_digest": "7d6e47bc91b821687a6ed9dad5e90b8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 185941, "upload_time": "2020-03-10T18:16:26", "upload_time_iso_8601": "2020-03-10T18:16:26.145452Z", "url": "https://files.pythonhosted.org/packages/03/7c/b1d698e2ecf6af06656e95d9589a80a96462b06b00f1185f3152903584ce/Automunge-3.38-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b26b9b0e2a76c485911f895366290c", "sha256": "373ed5e535ee4879cda6492d5a5882f7a71b2730c14c21261ad128ae7261cfb9"}, "downloads": -1, "filename": "Automunge-3.38.tar.gz", "has_sig": false, "md5_digest": "68b26b9b0e2a76c485911f895366290c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245981, "upload_time": "2020-03-10T18:16:28", "upload_time_iso_8601": "2020-03-10T18:16:28.638784Z", "url": "https://files.pythonhosted.org/packages/1c/d1/631049603d145d569ab68b8bb3155d0fe703e3ce57407ec0cb1d6929a9dc/Automunge-3.38.tar.gz", "yanked": false}], "3.39": [{"comment_text": "", "digests": {"md5": "5f71e4fc492bbe33203329493c048fd5", "sha256": "7564922dd3d3cb2317e05a1e1bfe9476df6cf92d7ca6135a504f164c35e38628"}, "downloads": -1, "filename": "Automunge-3.39-py3-none-any.whl", "has_sig": false, "md5_digest": "5f71e4fc492bbe33203329493c048fd5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 185883, "upload_time": "2020-03-10T22:00:21", "upload_time_iso_8601": "2020-03-10T22:00:21.493438Z", "url": "https://files.pythonhosted.org/packages/ff/54/1a092f0a42a61fb11a5de78a7adc2c02fb6b0652b2f452c1a4298a7a6151/Automunge-3.39-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "243cdebdc0d43185053f91b72cd212a2", "sha256": "94991f963413df5fc15db3ea28876b6bd04c44c4ba7ea8b2b7d10567e8422704"}, "downloads": -1, "filename": "Automunge-3.39.tar.gz", "has_sig": false, "md5_digest": "243cdebdc0d43185053f91b72cd212a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 245899, "upload_time": "2020-03-10T22:00:23", "upload_time_iso_8601": "2020-03-10T22:00:23.476210Z", "url": "https://files.pythonhosted.org/packages/b0/5a/586d317dfd4971d6564761ed87e1f33897e46555e7daa531d4ab97d53800/Automunge-3.39.tar.gz", "yanked": false}], "3.4": [{"comment_text": "", "digests": {"md5": "2e295d147692ed1a464c0c4225a10d63", "sha256": "c4fdfd8cf57b8c8278be7d50d92c305f9389cc301e601179cc37b275f2f07989"}, "downloads": -1, "filename": "Automunge-3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2e295d147692ed1a464c0c4225a10d63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 159538, "upload_time": "2019-12-09T04:00:29", "upload_time_iso_8601": "2019-12-09T04:00:29.604396Z", "url": "https://files.pythonhosted.org/packages/b7/66/339a4b78ade05696704d288c49682c6fa043569b9376195126868535ae92/Automunge-3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e233bea51bdea0f107daa9085985d67f", "sha256": "37f80ed58db06c832c438f1b736a72091be820e2eee10b0fb74e4480be84d7c4"}, "downloads": -1, "filename": "Automunge-3.4.tar.gz", "has_sig": false, "md5_digest": "e233bea51bdea0f107daa9085985d67f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203178, "upload_time": "2019-12-09T04:00:31", "upload_time_iso_8601": "2019-12-09T04:00:31.717536Z", "url": "https://files.pythonhosted.org/packages/0d/0e/ed82b257440bd8d6373c63bfc2c4c9699c791342beb961e5ad5c5642eed4/Automunge-3.4.tar.gz", "yanked": false}], "3.40": [{"comment_text": "", "digests": {"md5": "f9e20648f5e82cfc3e11380128bacbcb", "sha256": "b9c3b2c85f2af389ef302e73d4856ddab16f1c6ae6181768ff0b432439f4c852"}, "downloads": -1, "filename": "Automunge-3.40-py3-none-any.whl", "has_sig": false, "md5_digest": "f9e20648f5e82cfc3e11380128bacbcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 186406, "upload_time": "2020-03-12T04:01:59", "upload_time_iso_8601": "2020-03-12T04:01:59.922779Z", "url": "https://files.pythonhosted.org/packages/fa/0a/5e7d3a9541ef8f14c045319cf9031cf8e652e0f702c42b5569d8fc367826/Automunge-3.40-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af1cc761e5cead095e9b5e9fc15668a", "sha256": "826cd6cc81dc2e28e456892c1de3e2e121c50e7be1614296d4e9c66bc53d6163"}, "downloads": -1, "filename": "Automunge-3.40.tar.gz", "has_sig": false, "md5_digest": "0af1cc761e5cead095e9b5e9fc15668a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 246755, "upload_time": "2020-03-12T04:02:02", "upload_time_iso_8601": "2020-03-12T04:02:02.176874Z", "url": "https://files.pythonhosted.org/packages/42/63/527e6fdf8c43df27603b172b416c1b68f8cbbc5d1233a0a05df654efb350/Automunge-3.40.tar.gz", "yanked": false}], "3.41": [{"comment_text": "", "digests": {"md5": "2ad5f7eb87517e349f67af7170f98d2d", "sha256": "4d335223132fea274bb319810782c5c21ff569e44be1d58b5f91cabd861e0feb"}, "downloads": -1, "filename": "Automunge-3.41-py3-none-any.whl", "has_sig": false, "md5_digest": "2ad5f7eb87517e349f67af7170f98d2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 189304, "upload_time": "2020-03-12T22:13:04", "upload_time_iso_8601": "2020-03-12T22:13:04.392661Z", "url": "https://files.pythonhosted.org/packages/19/bb/4825635875af4a249650594c770cd78628b485e64c7770ec4b48a7f983ad/Automunge-3.41-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d35f0961e14582d9ccafea15742a3e8", "sha256": "f6ca566e2de8fd575428b36c436e8ce97ee072779752090ec4eddc4eb0eeb6f5"}, "downloads": -1, "filename": "Automunge-3.41.tar.gz", "has_sig": false, "md5_digest": "4d35f0961e14582d9ccafea15742a3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 250038, "upload_time": "2020-03-12T22:13:07", "upload_time_iso_8601": "2020-03-12T22:13:07.140646Z", "url": "https://files.pythonhosted.org/packages/d0/d1/93191596287db0cf9a4a87ceb30ed3b6da5e951441078a6e5f1b722c80b3/Automunge-3.41.tar.gz", "yanked": false}], "3.42": [{"comment_text": "", "digests": {"md5": "cd3fb54306ee31238d8acc3b4af29115", "sha256": "ca39cd869fe6f0604ae7a4a571c07c003ca786675b4e1f207c83cff14e1123de"}, "downloads": -1, "filename": "Automunge-3.42-py3-none-any.whl", "has_sig": false, "md5_digest": "cd3fb54306ee31238d8acc3b4af29115", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 190261, "upload_time": "2020-03-13T22:43:36", "upload_time_iso_8601": "2020-03-13T22:43:36.436145Z", "url": "https://files.pythonhosted.org/packages/40/2e/6093439509b7ac263ff38d46fcb96b9de600f58bc98c15027667a1a8c5b7/Automunge-3.42-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8472c3fd3c331f651d27fc5f0f4d323a", "sha256": "99481ca31284783d07b8126bfb163a4f51a87f3c8d2d44d6d695e34556f298a4"}, "downloads": -1, "filename": "Automunge-3.42.tar.gz", "has_sig": false, "md5_digest": "8472c3fd3c331f651d27fc5f0f4d323a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251331, "upload_time": "2020-03-13T22:43:38", "upload_time_iso_8601": "2020-03-13T22:43:38.812784Z", "url": "https://files.pythonhosted.org/packages/94/43/d32cfc6734ea3386c115d7cc2d6a646b83cd50a8157befeaaf1029037dfc/Automunge-3.42.tar.gz", "yanked": false}], "3.43": [{"comment_text": "", "digests": {"md5": "910d75e0cd1dae463676f8382ec6fa6e", "sha256": "bd1764a05e0ab239ad163282631cf0dbfb8849180e220c5d2ff62ca738440eff"}, "downloads": -1, "filename": "Automunge-3.43-py3-none-any.whl", "has_sig": false, "md5_digest": "910d75e0cd1dae463676f8382ec6fa6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 190251, "upload_time": "2020-03-14T01:21:20", "upload_time_iso_8601": "2020-03-14T01:21:20.094409Z", "url": "https://files.pythonhosted.org/packages/76/0d/b83f074c195e227e3b89d9f69ff852d7a0245acc4b98f295b86ad33c25b0/Automunge-3.43-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b94c38a0c99d8e4067f241ee343a29f", "sha256": "0ed41dc188e48e135dd4bdb838558d8e448c5f6334e323fe593928959bfa4b04"}, "downloads": -1, "filename": "Automunge-3.43.tar.gz", "has_sig": false, "md5_digest": "5b94c38a0c99d8e4067f241ee343a29f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 251321, "upload_time": "2020-03-14T01:21:22", "upload_time_iso_8601": "2020-03-14T01:21:22.542778Z", "url": "https://files.pythonhosted.org/packages/ef/ff/914a11fa5ca9820fda97343cabac0c7cbcd962e8cef5c250ade883867eb5/Automunge-3.43.tar.gz", "yanked": false}], "3.44": [{"comment_text": "", "digests": {"md5": "8aabf5bb8aa713735e4f528c3b437f96", "sha256": "ed961775b780e1238aa5c4d0702eafd6dcbd99eb70960fe3b78f96f017bc214a"}, "downloads": -1, "filename": "Automunge-3.44-py3-none-any.whl", "has_sig": false, "md5_digest": "8aabf5bb8aa713735e4f528c3b437f96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 191088, "upload_time": "2020-03-14T18:55:19", "upload_time_iso_8601": "2020-03-14T18:55:19.661009Z", "url": "https://files.pythonhosted.org/packages/fd/13/a9cf2c7bdd692cbfcbf72c89da4576ee3f25b06b9e9ab4f563e7bd445734/Automunge-3.44-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c2ac76672b1f3b5ce68ececa2f38bac", "sha256": "c756c05ed13aaa82280ea9ae8b83f8417298eaa2f62a44f809373dc367579e8d"}, "downloads": -1, "filename": "Automunge-3.44.tar.gz", "has_sig": false, "md5_digest": "2c2ac76672b1f3b5ce68ececa2f38bac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 252432, "upload_time": "2020-03-14T18:55:21", "upload_time_iso_8601": "2020-03-14T18:55:21.868452Z", "url": "https://files.pythonhosted.org/packages/93/df/26f9f6dcc4596087e52f1c4f349796754bd86df6c3ec8946483b45ad08c9/Automunge-3.44.tar.gz", "yanked": false}], "3.45": [{"comment_text": "", "digests": {"md5": "5f604bd1438a580f63d07329ddc82f38", "sha256": "6fdd8d65736a339389991b12908b8caf443becd598413f85b7c3d90b4df897ef"}, "downloads": -1, "filename": "Automunge-3.45-py3-none-any.whl", "has_sig": false, "md5_digest": "5f604bd1438a580f63d07329ddc82f38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192061, "upload_time": "2020-03-15T17:51:47", "upload_time_iso_8601": "2020-03-15T17:51:47.520369Z", "url": "https://files.pythonhosted.org/packages/ab/c4/53b4775b8fead1442df91e82ff3cb60453b4c3bdc5805a47f2857b68f721/Automunge-3.45-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "568ca969f8f1acb79a94839788dff0c3", "sha256": "ca87bc13e320ee5615c4a688e5c6a168a55f8c6614284ca15ae79c9930861fcc"}, "downloads": -1, "filename": "Automunge-3.45.tar.gz", "has_sig": false, "md5_digest": "568ca969f8f1acb79a94839788dff0c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254872, "upload_time": "2020-03-15T17:51:50", "upload_time_iso_8601": "2020-03-15T17:51:50.125436Z", "url": "https://files.pythonhosted.org/packages/a1/38/7565c66ca52d0f0a598be45afa96035c51a63cf76ade79d85dc0e07b9a2e/Automunge-3.45.tar.gz", "yanked": false}], "3.46": [{"comment_text": "", "digests": {"md5": "2a776e5132613a0ef8714a97436926c4", "sha256": "0a36f836fb1ebe6f35030df6db769fe9095d0722997c0c5b966cd12f0ca52f76"}, "downloads": -1, "filename": "Automunge-3.46-py3-none-any.whl", "has_sig": false, "md5_digest": "2a776e5132613a0ef8714a97436926c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192976, "upload_time": "2020-03-15T21:18:50", "upload_time_iso_8601": "2020-03-15T21:18:50.708033Z", "url": "https://files.pythonhosted.org/packages/77/38/ce7e8ed0575fcdbca8bd26cbb68d58a7c8e7494ff0203f7a3ef287091167/Automunge-3.46-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c1a50e0065c515a823e7dc5f3ac4d70", "sha256": "c5ab2141b137212af4b7e013d0bc8043b8c43bd2167a62d7cd48ab388d83495d"}, "downloads": -1, "filename": "Automunge-3.46.tar.gz", "has_sig": false, "md5_digest": "0c1a50e0065c515a823e7dc5f3ac4d70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255972, "upload_time": "2020-03-15T21:18:52", "upload_time_iso_8601": "2020-03-15T21:18:52.878408Z", "url": "https://files.pythonhosted.org/packages/8d/5f/1b45024d64d997507c70d013b74085d14649a9edce0fd1f968d229e455d1/Automunge-3.46.tar.gz", "yanked": false}], "3.47": [{"comment_text": "", "digests": {"md5": "229b89564c6352dfce1e0e291c1d1675", "sha256": "e9f88028d34ae80f19ee9cf0d4e89187054b45f276495540f6b97656ce8734ae"}, "downloads": -1, "filename": "Automunge-3.47-py3-none-any.whl", "has_sig": false, "md5_digest": "229b89564c6352dfce1e0e291c1d1675", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 193328, "upload_time": "2020-03-16T01:20:54", "upload_time_iso_8601": "2020-03-16T01:20:54.617625Z", "url": "https://files.pythonhosted.org/packages/dc/aa/41f549a007d7299790a365fc242a727246f4ec7a4208628228cf0032cdae/Automunge-3.47-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98462613e24ddcb23e4287c6377a4be6", "sha256": "85406ca2cff5ac9a0f3ddece30eff094ed7af4cee7752d8d24b4186dde478f26"}, "downloads": -1, "filename": "Automunge-3.47.tar.gz", "has_sig": false, "md5_digest": "98462613e24ddcb23e4287c6377a4be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256560, "upload_time": "2020-03-16T01:20:57", "upload_time_iso_8601": "2020-03-16T01:20:57.035306Z", "url": "https://files.pythonhosted.org/packages/df/0b/0bcdff909281ce04785edb3f1370749d7d66d5187ea5b6d1e1cc00795561/Automunge-3.47.tar.gz", "yanked": false}], "3.48": [{"comment_text": "", "digests": {"md5": "304e10f78a5ede42d19d4e17defc8cc1", "sha256": "440b79775a38d6ab7202351c6c9f0fe80e6030aa9e6761b9ba56020114998453"}, "downloads": -1, "filename": "Automunge-3.48-py3-none-any.whl", "has_sig": false, "md5_digest": "304e10f78a5ede42d19d4e17defc8cc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 193775, "upload_time": "2020-03-17T02:33:30", "upload_time_iso_8601": "2020-03-17T02:33:30.515842Z", "url": "https://files.pythonhosted.org/packages/4d/09/c25c26d1b6c3b5b18712b0128d8d6f33302fde4786c35034ffcc14dccd20/Automunge-3.48-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8244c9c60d536f5bb5cd9599c528e3c8", "sha256": "aa72066c21940645d9c70fb3116a10ca1805ef664e00698967b58dae0fdc5f9e"}, "downloads": -1, "filename": "Automunge-3.48.tar.gz", "has_sig": false, "md5_digest": "8244c9c60d536f5bb5cd9599c528e3c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257028, "upload_time": "2020-03-17T02:33:33", "upload_time_iso_8601": "2020-03-17T02:33:33.688414Z", "url": "https://files.pythonhosted.org/packages/12/ae/99fc4c8a8f952c3f5d9b9e55b9bb66535d4b897724a8c32a3817dc46f086/Automunge-3.48.tar.gz", "yanked": false}], "3.49": [{"comment_text": "", "digests": {"md5": "81115389290c3cc37b2b8f3a4e21384c", "sha256": "74b8ffdd26787b5cccb46bee455407f5986822332f32e9832154b889aa157092"}, "downloads": -1, "filename": "Automunge-3.49-py3-none-any.whl", "has_sig": false, "md5_digest": "81115389290c3cc37b2b8f3a4e21384c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 194755, "upload_time": "2020-03-18T21:07:28", "upload_time_iso_8601": "2020-03-18T21:07:28.062904Z", "url": "https://files.pythonhosted.org/packages/ca/bb/30534efae22f866f0bbd8b393aaaeef9f3f92f049635989a5abb538b2dd1/Automunge-3.49-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab1f0c1be28ba56144cc9825a2daeaea", "sha256": "24203d8cc630599437aaa2a482220cd49d73e51d1cca99fe0860df3b3f7059fc"}, "downloads": -1, "filename": "Automunge-3.49.tar.gz", "has_sig": false, "md5_digest": "ab1f0c1be28ba56144cc9825a2daeaea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 259004, "upload_time": "2020-03-18T21:07:30", "upload_time_iso_8601": "2020-03-18T21:07:30.660254Z", "url": "https://files.pythonhosted.org/packages/ad/6a/95109b682c236cd0b5601588ae74e29575b072bfad3fa68d808e9784ccda/Automunge-3.49.tar.gz", "yanked": false}], "3.5": [{"comment_text": "", "digests": {"md5": "c2a5f9a7af2e343d16c3540dbd267bd3", "sha256": "afae6bf856236b0996491c319b9b96d815ba2c9c2cc4c0230290c443839ac6c9"}, "downloads": -1, "filename": "Automunge-3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c2a5f9a7af2e343d16c3540dbd267bd3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 160889, "upload_time": "2019-12-10T07:30:38", "upload_time_iso_8601": "2019-12-10T07:30:38.297116Z", "url": "https://files.pythonhosted.org/packages/b0/01/08ce66b81384810bea1e38a2b27845a3a395a82446d080811e18e568535d/Automunge-3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acca67df7f2db6e35664707d0fd1b5af", "sha256": "287cc5923c704f6f62cbab7854f8a2a66fc8a19b4525b2d3868fa91a4b0d2eee"}, "downloads": -1, "filename": "Automunge-3.5.tar.gz", "has_sig": false, "md5_digest": "acca67df7f2db6e35664707d0fd1b5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205016, "upload_time": "2019-12-10T07:30:41", "upload_time_iso_8601": "2019-12-10T07:30:41.398779Z", "url": "https://files.pythonhosted.org/packages/e7/2b/b9a5e7df14ba8a5e34488269ba21f1c263ed8bbab7761dd73738db38dcdf/Automunge-3.5.tar.gz", "yanked": false}], "3.50": [{"comment_text": "", "digests": {"md5": "c6cca38da0bab0cc93c814adcb401cc8", "sha256": "3dadd69352676969c96939f533890ef1b4d72f2ffe466a08164e0fca0c1fa641"}, "downloads": -1, "filename": "Automunge-3.50-py3-none-any.whl", "has_sig": false, "md5_digest": "c6cca38da0bab0cc93c814adcb401cc8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 194121, "upload_time": "2020-03-18T23:01:46", "upload_time_iso_8601": "2020-03-18T23:01:46.987990Z", "url": "https://files.pythonhosted.org/packages/67/93/10c317c81caf7116dc3f75022cfd3a7c930cc3a014316369e87616a82f22/Automunge-3.50-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "025a4a06ba07a62bf464691e69c8be84", "sha256": "b5cb5de1404767cb74faa709cb1885ef4ff372ba5a2ea2b633828bf1d77bd8e5"}, "downloads": -1, "filename": "Automunge-3.50.tar.gz", "has_sig": false, "md5_digest": "025a4a06ba07a62bf464691e69c8be84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257468, "upload_time": "2020-03-18T23:01:49", "upload_time_iso_8601": "2020-03-18T23:01:49.084809Z", "url": "https://files.pythonhosted.org/packages/cd/49/bce921894723540b0d37e86f360df67935629e9b3192c113405fc2079a61/Automunge-3.50.tar.gz", "yanked": false}], "3.51": [{"comment_text": "", "digests": {"md5": "c4b2b09266a9892fe10eb14a540e1708", "sha256": "6546e22d0e30c5ba5353555b7c626d84d4a2f5a9bfcb11e47d8f4bf2a5009eac"}, "downloads": -1, "filename": "Automunge-3.51-py3-none-any.whl", "has_sig": false, "md5_digest": "c4b2b09266a9892fe10eb14a540e1708", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 194895, "upload_time": "2020-03-19T21:48:28", "upload_time_iso_8601": "2020-03-19T21:48:28.010616Z", "url": "https://files.pythonhosted.org/packages/ce/5f/72bdb9a93fceb30dcc86c864fdeef7caf5eee91b09ca15ecd18e489421e4/Automunge-3.51-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2938fec15f53055ad55e1ed796a5791a", "sha256": "074781e6070eadc6606bb545ba451d5d635638ffaae9b30d95daf4852aa3b446"}, "downloads": -1, "filename": "Automunge-3.51.tar.gz", "has_sig": false, "md5_digest": "2938fec15f53055ad55e1ed796a5791a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258438, "upload_time": "2020-03-19T21:48:30", "upload_time_iso_8601": "2020-03-19T21:48:30.006443Z", "url": "https://files.pythonhosted.org/packages/56/c1/2ac6aa04d8988115ae7e0be767593db3dbe86faa7900ddb4a7263d0e0c49/Automunge-3.51.tar.gz", "yanked": false}], "3.52": [{"comment_text": "", "digests": {"md5": "537091f26ca1a27ad8c06e18c86aae34", "sha256": "3f45aa9d24539c2831d1bdd35e0399347fb6d8e71436c2da4f4d903305590d99"}, "downloads": -1, "filename": "Automunge-3.52-py3-none-any.whl", "has_sig": false, "md5_digest": "537091f26ca1a27ad8c06e18c86aae34", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 194985, "upload_time": "2020-03-20T02:28:00", "upload_time_iso_8601": "2020-03-20T02:28:00.960881Z", "url": "https://files.pythonhosted.org/packages/98/c2/87a9722a236dc58e31dee70d2e2d0c8da1ef4adf10a108a1f273055906db/Automunge-3.52-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "beef60026c6399aea346d9094bf1e039", "sha256": "4dd574b106d6c4f223413cd49e5e035283c631c129f2286a52e0136ba99230c9"}, "downloads": -1, "filename": "Automunge-3.52.tar.gz", "has_sig": false, "md5_digest": "beef60026c6399aea346d9094bf1e039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258473, "upload_time": "2020-03-20T02:28:03", "upload_time_iso_8601": "2020-03-20T02:28:03.260431Z", "url": "https://files.pythonhosted.org/packages/34/d9/8cad6afc9476392cd45d83104de1a33f83f5cba94255a37861dc1276b3ae/Automunge-3.52.tar.gz", "yanked": false}], "3.53": [{"comment_text": "", "digests": {"md5": "39c20305ebbed3c96ee495a4dd4c78a1", "sha256": "7ba866a6f09ede9218abc673cfdd3a19aae76aeccaf6dbfd32f60e7b8ce6e129"}, "downloads": -1, "filename": "Automunge-3.53-py3-none-any.whl", "has_sig": false, "md5_digest": "39c20305ebbed3c96ee495a4dd4c78a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 195888, "upload_time": "2020-03-21T02:01:24", "upload_time_iso_8601": "2020-03-21T02:01:24.383901Z", "url": "https://files.pythonhosted.org/packages/63/b1/fa70f22a3462a9bc0f62e46ed9843bff1344e43e89d4f364ec2a76caacf8/Automunge-3.53-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47143f1c1528656c5f150db18bc235e5", "sha256": "8eb777a9bd6fa1190f359221dfcc70886b48f7d2b0df1327b4ddfb717f85e4f8"}, "downloads": -1, "filename": "Automunge-3.53.tar.gz", "has_sig": false, "md5_digest": "47143f1c1528656c5f150db18bc235e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 259528, "upload_time": "2020-03-21T02:01:26", "upload_time_iso_8601": "2020-03-21T02:01:26.890219Z", "url": "https://files.pythonhosted.org/packages/3e/8b/685d3dfb8e90dcbcebcf560cbb19a9fefd4df703e623fce034c8430a802f/Automunge-3.53.tar.gz", "yanked": false}], "3.54": [{"comment_text": "", "digests": {"md5": "71f1dd6b4f27faad48dfbff5de826aff", "sha256": "c799b8b3a5173ed6aae8f0c2fafc3f73f163d2e25737ac3c7dc0af0001a21193"}, "downloads": -1, "filename": "Automunge-3.54-py3-none-any.whl", "has_sig": false, "md5_digest": "71f1dd6b4f27faad48dfbff5de826aff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197591, "upload_time": "2020-03-22T03:48:10", "upload_time_iso_8601": "2020-03-22T03:48:10.802776Z", "url": "https://files.pythonhosted.org/packages/02/0e/275b28e67fe48570089fe3d4b74b1ce14cd9d50f491ef3c46c22ce4606b4/Automunge-3.54-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6f0526715f9c89d06816bb481befec1", "sha256": "4092548a20ef07183b5a054960e0649cc4b83ddec26e5bd8db1f1acc32b00105"}, "downloads": -1, "filename": "Automunge-3.54.tar.gz", "has_sig": false, "md5_digest": "d6f0526715f9c89d06816bb481befec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 261501, "upload_time": "2020-03-22T03:48:13", "upload_time_iso_8601": "2020-03-22T03:48:13.434769Z", "url": "https://files.pythonhosted.org/packages/b0/b0/fb093d970b5dd6302befd6476ca6639728c1cfe13c710a9b824b99a1b0a3/Automunge-3.54.tar.gz", "yanked": false}], "3.55": [{"comment_text": "", "digests": {"md5": "7bca23b56886c167be3434ed2edf014e", "sha256": "523314b2f63ea54e6408c28e64ec4e2de5919d6fbe3b07f8bcbb34c8a447b5af"}, "downloads": -1, "filename": "Automunge-3.55-py3-none-any.whl", "has_sig": false, "md5_digest": "7bca23b56886c167be3434ed2edf014e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198252, "upload_time": "2020-03-22T23:21:35", "upload_time_iso_8601": "2020-03-22T23:21:35.531302Z", "url": "https://files.pythonhosted.org/packages/5c/bc/410bfb80e7667bf8029cf46cf2510ec7e39f6a936466df34f6fd6af35f0e/Automunge-3.55-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43345acdfbc387d5d1fe1761d6ec3be3", "sha256": "a6341d98e70e0420c45535bd20f490a8a94c4320fe565eeefe97e3d7f17b694f"}, "downloads": -1, "filename": "Automunge-3.55.tar.gz", "has_sig": false, "md5_digest": "43345acdfbc387d5d1fe1761d6ec3be3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262744, "upload_time": "2020-03-22T23:21:38", "upload_time_iso_8601": "2020-03-22T23:21:38.030473Z", "url": "https://files.pythonhosted.org/packages/21/fe/832e03a8d2b0c1167e32fbf231e620eb34f6225aa80c83116101e884b8ad/Automunge-3.55.tar.gz", "yanked": false}], "3.56": [{"comment_text": "", "digests": {"md5": "761143462447575c0e76df0dbc7bfdf0", "sha256": "896c490fd0dbdc118d18de8a5243dc61ec40f708ff164661ba06bd70d59ab3b1"}, "downloads": -1, "filename": "Automunge-3.56-py3-none-any.whl", "has_sig": false, "md5_digest": "761143462447575c0e76df0dbc7bfdf0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198256, "upload_time": "2020-03-26T03:40:29", "upload_time_iso_8601": "2020-03-26T03:40:29.044901Z", "url": "https://files.pythonhosted.org/packages/92/13/ff0611b26c45635f1d0053dd8ad44b7545208f9aef41813eaf7117596bb2/Automunge-3.56-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12d7285f87bd49d8a0d9a31045983a37", "sha256": "ea3f076b8491d92e9a1907e48f4a39c26914165e9afc1d93411bd8990092199b"}, "downloads": -1, "filename": "Automunge-3.56.tar.gz", "has_sig": false, "md5_digest": "12d7285f87bd49d8a0d9a31045983a37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262742, "upload_time": "2020-03-26T03:40:31", "upload_time_iso_8601": "2020-03-26T03:40:31.663538Z", "url": "https://files.pythonhosted.org/packages/20/11/956465781fbd75200017f169d655cffa43d7b326e37e6abbe20658049832/Automunge-3.56.tar.gz", "yanked": false}], "3.57": [{"comment_text": "", "digests": {"md5": "9e07223c1e92fa7bec7c96734b9deff6", "sha256": "4995a91ccd46f8dcf5e20cdd173727204a3de141cc430eb33dc6ec17087efd75"}, "downloads": -1, "filename": "Automunge-3.57-py3-none-any.whl", "has_sig": false, "md5_digest": "9e07223c1e92fa7bec7c96734b9deff6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198346, "upload_time": "2020-03-27T01:26:30", "upload_time_iso_8601": "2020-03-27T01:26:30.516552Z", "url": "https://files.pythonhosted.org/packages/21/36/d4115738cdd8fa72f8991e5b49054c52edae41aa3ddd71426e2657776ee3/Automunge-3.57-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c98bd2b2ad1e492f3cb9b713352e346", "sha256": "7e7caa8de32f4a557c76b9dc5ddea2010a07c72b7277ff0b3c76d758dbbdf1ed"}, "downloads": -1, "filename": "Automunge-3.57.tar.gz", "has_sig": false, "md5_digest": "7c98bd2b2ad1e492f3cb9b713352e346", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262864, "upload_time": "2020-03-27T01:26:33", "upload_time_iso_8601": "2020-03-27T01:26:33.158280Z", "url": "https://files.pythonhosted.org/packages/d9/ff/2e1a650ac864d38b0fb8de8fb845edbad8b7aa259d674c4495a7b02c8629/Automunge-3.57.tar.gz", "yanked": false}], "3.58": [{"comment_text": "", "digests": {"md5": "5f0381d5efb008bf26b09ecb8a8807dd", "sha256": "34c06f71322d80c053cf3188845968688e1dcf29aa385f2a6ea17cc5cf51f805"}, "downloads": -1, "filename": "Automunge-3.58-py3-none-any.whl", "has_sig": false, "md5_digest": "5f0381d5efb008bf26b09ecb8a8807dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198373, "upload_time": "2020-03-27T20:40:19", "upload_time_iso_8601": "2020-03-27T20:40:19.494139Z", "url": "https://files.pythonhosted.org/packages/d6/fa/522dd12e78d57ea5be09c5f3468df97f43ef56652e0cced1f0cb453559a1/Automunge-3.58-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1440411b9096a36199756fe3a0fc96b3", "sha256": "f2b0693e456ef3d89468377452c7a4e19b7be34a5b9ad13aab14a47b4f8a1534"}, "downloads": -1, "filename": "Automunge-3.58.tar.gz", "has_sig": false, "md5_digest": "1440411b9096a36199756fe3a0fc96b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262883, "upload_time": "2020-03-27T20:40:22", "upload_time_iso_8601": "2020-03-27T20:40:22.080467Z", "url": "https://files.pythonhosted.org/packages/2b/03/d4f44acf4385b8ae51517d3de2fba0c49de093b3f33bae0cf7bdbdacc1aa/Automunge-3.58.tar.gz", "yanked": false}], "3.59": [{"comment_text": "", "digests": {"md5": "be99e2b3b0fb0e0c093ef614db79fc1b", "sha256": "3689f35d4da023e3f5d88bd6d4793a248b12556cc2f49c8de55d54b58953be60"}, "downloads": -1, "filename": "Automunge-3.59-py3-none-any.whl", "has_sig": false, "md5_digest": "be99e2b3b0fb0e0c093ef614db79fc1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198352, "upload_time": "2020-03-28T01:22:44", "upload_time_iso_8601": "2020-03-28T01:22:44.680660Z", "url": "https://files.pythonhosted.org/packages/d9/bf/f167b6dcd216bbb633d55b0b16dbb7749ddbb6bbd5f6fbe3d1b3fedcc971/Automunge-3.59-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58d282d422e3e9350384b46c19db4ca7", "sha256": "e9efa57f762b0245386b357009868e48b48a2a206d269be0cd1c23e319bb70b2"}, "downloads": -1, "filename": "Automunge-3.59.tar.gz", "has_sig": false, "md5_digest": "58d282d422e3e9350384b46c19db4ca7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262840, "upload_time": "2020-03-28T01:22:46", "upload_time_iso_8601": "2020-03-28T01:22:46.832769Z", "url": "https://files.pythonhosted.org/packages/6a/1a/6038e7278857763dbecdafa995b2654098778acedadc4acc612dbeffa78d/Automunge-3.59.tar.gz", "yanked": false}], "3.6": [{"comment_text": "", "digests": {"md5": "1b29e71b7526cd6370785e22b5cf1350", "sha256": "ffde3a0034d782f775f1779a0d9461899e84652a1dde4d01156e40de122d5e96"}, "downloads": -1, "filename": "Automunge-3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1b29e71b7526cd6370785e22b5cf1350", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 161178, "upload_time": "2019-12-11T02:28:08", "upload_time_iso_8601": "2019-12-11T02:28:08.418832Z", "url": "https://files.pythonhosted.org/packages/87/99/cbbf617c326f77a241431b98a00fb8ab9718f0aae1e7237179ea3676ff3f/Automunge-3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb64d334b82be29f9e19e917fd7f2c47", "sha256": "7ae638c26681f9b43c6182fdffd3bfa58040cd8883b5040d16d3ce4f34615431"}, "downloads": -1, "filename": "Automunge-3.6.tar.gz", "has_sig": false, "md5_digest": "bb64d334b82be29f9e19e917fd7f2c47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205329, "upload_time": "2019-12-11T02:28:12", "upload_time_iso_8601": "2019-12-11T02:28:12.370340Z", "url": "https://files.pythonhosted.org/packages/74/80/49c83a2730d661a5aaf8d8e1aa280edfb85c0a476b353d984212abe2a7a5/Automunge-3.6.tar.gz", "yanked": false}], "3.60": [{"comment_text": "", "digests": {"md5": "459626d927913f5deb2293acbc466ca1", "sha256": "559c400543f63587653ff412aa2ec2c0c212504743dbe11fbffe69f7e7c35b46"}, "downloads": -1, "filename": "Automunge-3.60-py3-none-any.whl", "has_sig": false, "md5_digest": "459626d927913f5deb2293acbc466ca1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198085, "upload_time": "2020-03-28T02:38:19", "upload_time_iso_8601": "2020-03-28T02:38:19.428380Z", "url": "https://files.pythonhosted.org/packages/34/3d/d2ea909531f2ecf9640bac6ab88f6ef5e66de0255279819b50d40828d175/Automunge-3.60-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "161a5964bfc2359ca71b4ae743632444", "sha256": "899a0acc1b03904ed80f8e2564cf45dccac5748e536c7c3aa0aa648feb62f599"}, "downloads": -1, "filename": "Automunge-3.60.tar.gz", "has_sig": false, "md5_digest": "161a5964bfc2359ca71b4ae743632444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262793, "upload_time": "2020-03-28T02:38:22", "upload_time_iso_8601": "2020-03-28T02:38:22.106515Z", "url": "https://files.pythonhosted.org/packages/0a/94/45abb5b6da560fef57c0bdccf4a4e8f7038df29744092b6b4012d6ad802a/Automunge-3.60.tar.gz", "yanked": false}], "3.61": [{"comment_text": "", "digests": {"md5": "0d2a2ce7f3a6677b9a66b6df04c09c55", "sha256": "cdc2b867c74faa6394aed5b46cc033a4888f4054f2b09f0e994aa678734587a3"}, "downloads": -1, "filename": "Automunge-3.61-py3-none-any.whl", "has_sig": false, "md5_digest": "0d2a2ce7f3a6677b9a66b6df04c09c55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198507, "upload_time": "2020-03-29T00:41:21", "upload_time_iso_8601": "2020-03-29T00:41:21.436556Z", "url": "https://files.pythonhosted.org/packages/5b/31/238aca88b07ebca20a869ee4f7cbb21fe5c41f0a43c3db4eb3cb443be708/Automunge-3.61-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b26dfeff346c51f738ba2e890135c832", "sha256": "b00ce29afe82224566cb88a49c81d380d6777d8cebee32a4ffc78d0eea523ac6"}, "downloads": -1, "filename": "Automunge-3.61.tar.gz", "has_sig": false, "md5_digest": "b26dfeff346c51f738ba2e890135c832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 263686, "upload_time": "2020-03-29T00:41:23", "upload_time_iso_8601": "2020-03-29T00:41:23.890848Z", "url": "https://files.pythonhosted.org/packages/97/0a/b2917be40e928f8dd0036167c86c972cf82093fd07119b23955eb234ddaf/Automunge-3.61.tar.gz", "yanked": false}], "3.62": [{"comment_text": "", "digests": {"md5": "18d3262be1965b31364e23cb7afcb842", "sha256": "865cdac2b5c469ee8a6e5ca6a9d5c59a69381897ad0a8c7d88dc3b5cb1909a03"}, "downloads": -1, "filename": "Automunge-3.62-py3-none-any.whl", "has_sig": false, "md5_digest": "18d3262be1965b31364e23cb7afcb842", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198513, "upload_time": "2020-03-30T01:25:24", "upload_time_iso_8601": "2020-03-30T01:25:24.014221Z", "url": "https://files.pythonhosted.org/packages/59/8d/b2ef5bed1af6e6a658ca7c00ded822bad361f8ab26ea848d523105a5a67f/Automunge-3.62-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd17f050964d22e54c15c3a90bf96112", "sha256": "dafd7325ba9337419535df4fb7e803e4983219ac6a58f5bb99a7dd9072070f1a"}, "downloads": -1, "filename": "Automunge-3.62.tar.gz", "has_sig": false, "md5_digest": "cd17f050964d22e54c15c3a90bf96112", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 263724, "upload_time": "2020-03-30T01:25:26", "upload_time_iso_8601": "2020-03-30T01:25:26.753399Z", "url": "https://files.pythonhosted.org/packages/cf/3e/343c066076dcba2290038faabee121795ae17077052185af46bfc02f1012/Automunge-3.62.tar.gz", "yanked": false}], "3.63": [{"comment_text": "", "digests": {"md5": "cbf3ccd70697ed7d5db450eb0c22deee", "sha256": "bba8b916cea46f1dd021552f60995412f52c4dd9de6a3d43ebb39bb1f1989dce"}, "downloads": -1, "filename": "Automunge-3.63-py3-none-any.whl", "has_sig": false, "md5_digest": "cbf3ccd70697ed7d5db450eb0c22deee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 199214, "upload_time": "2020-04-01T23:02:47", "upload_time_iso_8601": "2020-04-01T23:02:47.791799Z", "url": "https://files.pythonhosted.org/packages/5e/f9/e49ff92da19300b79bc891e6cdf71cf0c9d1ab4dc8fef4209549a0a52577/Automunge-3.63-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "913bb4728443f7aacf17b9968ec1fddd", "sha256": "a6ccfa7fe539aedfd6338affd5793af0e1318aaf36551d21afcfd2994487de19"}, "downloads": -1, "filename": "Automunge-3.63.tar.gz", "has_sig": false, "md5_digest": "913bb4728443f7aacf17b9968ec1fddd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 264286, "upload_time": "2020-04-01T23:02:50", "upload_time_iso_8601": "2020-04-01T23:02:50.005591Z", "url": "https://files.pythonhosted.org/packages/45/23/537195de4c74c3de92ef38659f6caa30cc1e0dc2e448ab2b3871fd22a527/Automunge-3.63.tar.gz", "yanked": false}], "3.64": [{"comment_text": "", "digests": {"md5": "4f6d556287a519a109fa55217b3fbbab", "sha256": "bdee8fe21cfd2dbdbcd5cbdd23ebd0a6da49d2a84909bfeb42006236702fee61"}, "downloads": -1, "filename": "Automunge-3.64-py3-none-any.whl", "has_sig": false, "md5_digest": "4f6d556287a519a109fa55217b3fbbab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 200301, "upload_time": "2020-04-02T23:48:50", "upload_time_iso_8601": "2020-04-02T23:48:50.379937Z", "url": "https://files.pythonhosted.org/packages/9b/6f/ce2407eaead8b7d8690af5fa000df7f3058edf1b7f4baf41270d84b44278/Automunge-3.64-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "188483a94f5f797c0ee7aa2bc7721a21", "sha256": "233362ac00f858123c9d58b7c7bcf27ad4227a16c3cbe53fe8cedee433d10754"}, "downloads": -1, "filename": "Automunge-3.64.tar.gz", "has_sig": false, "md5_digest": "188483a94f5f797c0ee7aa2bc7721a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265780, "upload_time": "2020-04-02T23:48:52", "upload_time_iso_8601": "2020-04-02T23:48:52.761757Z", "url": "https://files.pythonhosted.org/packages/26/b3/d1226b239c2cad471b29bc94f8764e76b6e6e3ed36d5dfa55d825b69d9ea/Automunge-3.64.tar.gz", "yanked": false}], "3.65": [{"comment_text": "", "digests": {"md5": "20f70d590983651064689b11bdc41c0c", "sha256": "99637ac18b99865a88044d3d163983fa5a92b567ae2c89381eae5f40185352f4"}, "downloads": -1, "filename": "Automunge-3.65-py3-none-any.whl", "has_sig": false, "md5_digest": "20f70d590983651064689b11bdc41c0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 200889, "upload_time": "2020-04-03T17:29:15", "upload_time_iso_8601": "2020-04-03T17:29:15.699149Z", "url": "https://files.pythonhosted.org/packages/84/8e/24d8bdac4d8911e4b49bfbcdfaeb7ebb8c73ea922e1ac356e7b7f2fab9f4/Automunge-3.65-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2922bef3eeae6b78d2ce03ac94f0eb69", "sha256": "78c9cf07cd4a91367014415676f6d22ded05ea5ab6fdf6230f7376a4cab8e4c3"}, "downloads": -1, "filename": "Automunge-3.65.tar.gz", "has_sig": false, "md5_digest": "2922bef3eeae6b78d2ce03ac94f0eb69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266702, "upload_time": "2020-04-03T17:29:17", "upload_time_iso_8601": "2020-04-03T17:29:17.909400Z", "url": "https://files.pythonhosted.org/packages/61/fc/24bff0042fca62eb711994963a6cb4775b736f52c63fb938ceba5e69ec0d/Automunge-3.65.tar.gz", "yanked": false}], "3.66": [{"comment_text": "", "digests": {"md5": "1628bd9ff9b2aeae548e222947193a43", "sha256": "c0bc9a8369e4fec6a71b8bfceaabf403ff932d36d5f4bbb1b6812195202ad57f"}, "downloads": -1, "filename": "Automunge-3.66-py3-none-any.whl", "has_sig": false, "md5_digest": "1628bd9ff9b2aeae548e222947193a43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 201011, "upload_time": "2020-04-03T19:06:28", "upload_time_iso_8601": "2020-04-03T19:06:28.805333Z", "url": "https://files.pythonhosted.org/packages/34/70/d43d905d9ebb902bfd3b006dc0125b757e81158b840b2a4484605c28ac31/Automunge-3.66-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9260ea9b015c366ddc4c731e838377b1", "sha256": "5c67d2efb044e9c31b021e830efebb0e42ee0410d2e2e1092b86b89600e07157"}, "downloads": -1, "filename": "Automunge-3.66.tar.gz", "has_sig": false, "md5_digest": "9260ea9b015c366ddc4c731e838377b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266936, "upload_time": "2020-04-03T19:06:31", "upload_time_iso_8601": "2020-04-03T19:06:31.151184Z", "url": "https://files.pythonhosted.org/packages/65/3f/9c7696747dbc1a9059a00c3c405e89ef91ab460e74711d7076d9f8e5e260/Automunge-3.66.tar.gz", "yanked": false}], "3.67": [{"comment_text": "", "digests": {"md5": "0d1b2ea639acb0bb14dc3f50a601cb64", "sha256": "201bd5c1d38e422b1cbd40d848ea34dea6bf1919b83a60d02755adbcfc968427"}, "downloads": -1, "filename": "Automunge-3.67-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1b2ea639acb0bb14dc3f50a601cb64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 202258, "upload_time": "2020-04-04T00:13:24", "upload_time_iso_8601": "2020-04-04T00:13:24.010881Z", "url": "https://files.pythonhosted.org/packages/32/d5/4050715f2ba65fb3f19f7145da11aee9e3919d42a6e9ac79bd5848753d9e/Automunge-3.67-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60d06d6c92e110d5c575d087d50303ab", "sha256": "e002a275645c2e71236488dc2a85a4335f896570eebc6d15110d0b1b30245df1"}, "downloads": -1, "filename": "Automunge-3.67.tar.gz", "has_sig": false, "md5_digest": "60d06d6c92e110d5c575d087d50303ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268275, "upload_time": "2020-04-04T00:13:26", "upload_time_iso_8601": "2020-04-04T00:13:26.763400Z", "url": "https://files.pythonhosted.org/packages/bf/7f/5c716e567aace423534f0a0297a003630f96f3d6283a067e00918eb59427/Automunge-3.67.tar.gz", "yanked": false}], "3.68": [{"comment_text": "", "digests": {"md5": "f2e3a0e74c8f7812c574cfb6650afc40", "sha256": "ba420bdde75057c36684f92323805a512e53bc14ab2cfe0362c0d7a99ebf2e71"}, "downloads": -1, "filename": "Automunge-3.68-py3-none-any.whl", "has_sig": false, "md5_digest": "f2e3a0e74c8f7812c574cfb6650afc40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 202960, "upload_time": "2020-04-05T02:36:08", "upload_time_iso_8601": "2020-04-05T02:36:08.360553Z", "url": "https://files.pythonhosted.org/packages/82/4a/924b419046d1577dd3f9fb44c7d98f0e2167236e09ef45cc16b0fcf3c171/Automunge-3.68-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2069dec92992c873891376b08e564b3", "sha256": "42e53e95980a283ec4f9012a4b774b1d15b13f812f5be2892bb9577322861b93"}, "downloads": -1, "filename": "Automunge-3.68.tar.gz", "has_sig": false, "md5_digest": "f2069dec92992c873891376b08e564b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270560, "upload_time": "2020-04-05T02:36:10", "upload_time_iso_8601": "2020-04-05T02:36:10.708406Z", "url": "https://files.pythonhosted.org/packages/8f/79/9267825831df882defd78ed53ab1ba8d03a8b919729dbbdd933b6868683c/Automunge-3.68.tar.gz", "yanked": false}], "3.69": [{"comment_text": "", "digests": {"md5": "66d85f57fabda576cb4d2e5d607c244f", "sha256": "d0d99c053cafa5b5d31e9c13a8bde6053f4757644a1ed37d206ae6b5738094c3"}, "downloads": -1, "filename": "Automunge-3.69-py3-none-any.whl", "has_sig": false, "md5_digest": "66d85f57fabda576cb4d2e5d607c244f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 202942, "upload_time": "2020-04-06T00:08:55", "upload_time_iso_8601": "2020-04-06T00:08:55.585705Z", "url": "https://files.pythonhosted.org/packages/ac/3a/c9c6471eae002855fe1834e3577ee4ed5f7f9326bb70a0bb07b3845bc138/Automunge-3.69-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f0186d6f3fc97738038690249df008f", "sha256": "8be810ff63b12a4d7c683b79d5a3f27cae98468b616e63a6b9ee120e06b4b009"}, "downloads": -1, "filename": "Automunge-3.69.tar.gz", "has_sig": false, "md5_digest": "6f0186d6f3fc97738038690249df008f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270565, "upload_time": "2020-04-06T00:08:58", "upload_time_iso_8601": "2020-04-06T00:08:58.211258Z", "url": "https://files.pythonhosted.org/packages/1e/9c/fd81c353eeddc905c9ca3f7f68507d2ed76bccb461dd11633416a8e89fbb/Automunge-3.69.tar.gz", "yanked": false}], "3.7": [{"comment_text": "", "digests": {"md5": "c7327f53f91d43db92b802187313dd32", "sha256": "ba22d1691e21995bf60910414baf848bd21064f5ac730880192821aa4d4cc548"}, "downloads": -1, "filename": "Automunge-3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c7327f53f91d43db92b802187313dd32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 163508, "upload_time": "2019-12-12T07:06:28", "upload_time_iso_8601": "2019-12-12T07:06:28.340765Z", "url": "https://files.pythonhosted.org/packages/3f/23/fbc04e60d1e75a14b32815c319f3741239c6aa3944a4b462179e887249ab/Automunge-3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "447b311135f9cad867735d19b4fcfc63", "sha256": "03176fab7ea71c720c51efc49bb551d63aaf05c9a7e6a7cd9050d9925981a236"}, "downloads": -1, "filename": "Automunge-3.7.tar.gz", "has_sig": false, "md5_digest": "447b311135f9cad867735d19b4fcfc63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 207996, "upload_time": "2019-12-12T07:06:31", "upload_time_iso_8601": "2019-12-12T07:06:31.145535Z", "url": "https://files.pythonhosted.org/packages/6d/d9/4bd642d9b5b9b71155a30bae25ccacae8efc2aa63dac2734879d76628f65/Automunge-3.7.tar.gz", "yanked": false}], "3.70": [{"comment_text": "", "digests": {"md5": "fccc11fb64e8358984c94b35b107cf44", "sha256": "8f76053ed423cf6a8ad86b16a6cbc2fca95ab47a517e77338c1eb2da25ce5602"}, "downloads": -1, "filename": "Automunge-3.70-py3-none-any.whl", "has_sig": false, "md5_digest": "fccc11fb64e8358984c94b35b107cf44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198034, "upload_time": "2020-04-06T20:51:09", "upload_time_iso_8601": "2020-04-06T20:51:09.657034Z", "url": "https://files.pythonhosted.org/packages/30/81/2a89b612c62a079ec479be31be3fdc05cadda8bcdd8f5489e43e2fd4608d/Automunge-3.70-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f5b2e3715d30d17d3c63a138ef73138", "sha256": "82c66273606dae97b75ddcbd7ff0c44b8ba2360fe6838686d3232a03e2027206"}, "downloads": -1, "filename": "Automunge-3.70.tar.gz", "has_sig": false, "md5_digest": "3f5b2e3715d30d17d3c63a138ef73138", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 265636, "upload_time": "2020-04-06T20:51:12", "upload_time_iso_8601": "2020-04-06T20:51:12.223383Z", "url": "https://files.pythonhosted.org/packages/2b/32/90f887b696048b2175ab095face62190c10e6b82e8c2a475e04d0f31fa66/Automunge-3.70.tar.gz", "yanked": false}], "3.71": [{"comment_text": "", "digests": {"md5": "5b4d0e6a70a151621d090d87baa94be1", "sha256": "5b93b1536061eceb836d99ac5b6fcafb1ffe802579e98ef418e9eb9f0aae8613"}, "downloads": -1, "filename": "Automunge-3.71-py3-none-any.whl", "has_sig": false, "md5_digest": "5b4d0e6a70a151621d090d87baa94be1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197852, "upload_time": "2020-04-07T23:00:08", "upload_time_iso_8601": "2020-04-07T23:00:08.645745Z", "url": "https://files.pythonhosted.org/packages/99/b8/a760dc6d3bc2037b1f808d89177a052d8428541df85731e78c4e43f2f76a/Automunge-3.71-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd3aa9d9c9d8aaca173a0af9028331ff", "sha256": "d886041722de909d2871974db275032ad0102c761cb20ec8b2f9f06af937bd7b"}, "downloads": -1, "filename": "Automunge-3.71.tar.gz", "has_sig": false, "md5_digest": "bd3aa9d9c9d8aaca173a0af9028331ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266022, "upload_time": "2020-04-07T23:00:11", "upload_time_iso_8601": "2020-04-07T23:00:11.024061Z", "url": "https://files.pythonhosted.org/packages/12/a9/8bf37c9bca5b53da5d725cfc713c77ec21e971ecd8398e56318724e99374/Automunge-3.71.tar.gz", "yanked": false}], "3.72": [{"comment_text": "", "digests": {"md5": "ef466c97bc3ef919087fa7f5b40adfcc", "sha256": "ce0c1ba62e0a5a0e2552065f685e09257c687a54a4d1579bed176f6ac983ed4b"}, "downloads": -1, "filename": "Automunge-3.72-py3-none-any.whl", "has_sig": false, "md5_digest": "ef466c97bc3ef919087fa7f5b40adfcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197958, "upload_time": "2020-04-09T21:23:23", "upload_time_iso_8601": "2020-04-09T21:23:23.220570Z", "url": "https://files.pythonhosted.org/packages/62/f3/aa1265a02ab443443a878f6f00d005327f17b8b1d517174644e34c75673f/Automunge-3.72-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "14543b53f90a50666254a1b68a5c1d6f", "sha256": "b00e365a6d050294db14bde7036f5355cfa3fe3e0b4325fc4151d5823f97d877"}, "downloads": -1, "filename": "Automunge-3.72.tar.gz", "has_sig": false, "md5_digest": "14543b53f90a50666254a1b68a5c1d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266211, "upload_time": "2020-04-09T21:23:26", "upload_time_iso_8601": "2020-04-09T21:23:26.064318Z", "url": "https://files.pythonhosted.org/packages/b8/78/8505430f3593b5ffedbe2d636c6e10858cbfff0943e126501daa87a117e0/Automunge-3.72.tar.gz", "yanked": false}], "3.73": [{"comment_text": "", "digests": {"md5": "9ee279188db11d07cea06882585bd3d9", "sha256": "9fba896a2da16dc5744801d025b4118d68875233cc6a049073f100898ace8e13"}, "downloads": -1, "filename": "Automunge-3.73-py3-none-any.whl", "has_sig": false, "md5_digest": "9ee279188db11d07cea06882585bd3d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197791, "upload_time": "2020-04-11T01:55:14", "upload_time_iso_8601": "2020-04-11T01:55:14.182312Z", "url": "https://files.pythonhosted.org/packages/0d/b4/32454a454e4e30ce69b05c3cd8b0976c70e7f6cc82fa77dad59f43a41eaf/Automunge-3.73-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e03f25a97cee19f63aab5f2c49df005d", "sha256": "636b7a2445822c75f5f73c1fc6cb2c588a08ff93e03a1bd840884b44bbb614d7"}, "downloads": -1, "filename": "Automunge-3.73.tar.gz", "has_sig": false, "md5_digest": "e03f25a97cee19f63aab5f2c49df005d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266033, "upload_time": "2020-04-11T01:55:16", "upload_time_iso_8601": "2020-04-11T01:55:16.072946Z", "url": "https://files.pythonhosted.org/packages/5c/e1/ef4c1be576aba9f78b75498aafe3dce809d82ba3a2c41214ac13bb24b2f8/Automunge-3.73.tar.gz", "yanked": false}], "3.74": [{"comment_text": "", "digests": {"md5": "046ad6e87cc8efa6d2f3ca77fd4b655b", "sha256": "ca5b559ae485f410eeb7cdaeb8b994d7e089a7f44657f10c2fbee4857e0e5b62"}, "downloads": -1, "filename": "Automunge-3.74-py3-none-any.whl", "has_sig": false, "md5_digest": "046ad6e87cc8efa6d2f3ca77fd4b655b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197817, "upload_time": "2020-04-11T03:17:34", "upload_time_iso_8601": "2020-04-11T03:17:34.149230Z", "url": "https://files.pythonhosted.org/packages/44/54/29770578b059555c9f9522c843e0e3d6ce7054089750aae3af70a6818176/Automunge-3.74-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "461134bc4f1d538c986c326cedd2eb86", "sha256": "bee9c90c128fec9bba2027e4510a4f0fcadf476a6a5c115b11a12d2e81484e5a"}, "downloads": -1, "filename": "Automunge-3.74.tar.gz", "has_sig": false, "md5_digest": "461134bc4f1d538c986c326cedd2eb86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266355, "upload_time": "2020-04-11T03:17:36", "upload_time_iso_8601": "2020-04-11T03:17:36.620072Z", "url": "https://files.pythonhosted.org/packages/99/d1/39e75888d64d3ca7bd7e8ec022726bd430970556fbe01dc6542c9a03e7c7/Automunge-3.74.tar.gz", "yanked": false}], "3.75": [{"comment_text": "", "digests": {"md5": "fb29f10625dc4c6557cf44d145d5e75f", "sha256": "6d0a8bcae12a7665f9789f135d005cdec0257db4f9cd397d8bfa4f5fcb06be56"}, "downloads": -1, "filename": "Automunge-3.75-py3-none-any.whl", "has_sig": false, "md5_digest": "fb29f10625dc4c6557cf44d145d5e75f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197820, "upload_time": "2020-04-11T17:21:42", "upload_time_iso_8601": "2020-04-11T17:21:42.213315Z", "url": "https://files.pythonhosted.org/packages/2f/12/f239ba3995c3654713a1d392efb25c4581090637e1ac9d1f57a9e76339a9/Automunge-3.75-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d282c11a56259ae5b5c2232d23fb1405", "sha256": "d7191878889c23aff188b14064a44027b4345d9155b481908c2c1908d54fc7eb"}, "downloads": -1, "filename": "Automunge-3.75.tar.gz", "has_sig": false, "md5_digest": "d282c11a56259ae5b5c2232d23fb1405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266360, "upload_time": "2020-04-11T17:21:44", "upload_time_iso_8601": "2020-04-11T17:21:44.526278Z", "url": "https://files.pythonhosted.org/packages/93/8b/df23c7b5fae63dc6a67811288110454d5524b72c28fb8364a8e089dc3d9c/Automunge-3.75.tar.gz", "yanked": false}], "3.76": [{"comment_text": "", "digests": {"md5": "8a58626db8a09276e046f85182b1514e", "sha256": "35c00a90d2d1c80dbe4f791c0f819b7c18b1dbf39812558beeb7b473eb596aac"}, "downloads": -1, "filename": "Automunge-3.76-py3-none-any.whl", "has_sig": false, "md5_digest": "8a58626db8a09276e046f85182b1514e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197588, "upload_time": "2020-04-11T23:40:12", "upload_time_iso_8601": "2020-04-11T23:40:12.200493Z", "url": "https://files.pythonhosted.org/packages/0c/60/d39c2adb3ac6a20268a0b2b40802ad2c06d31459f927d14b40932a44c8e7/Automunge-3.76-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "085a6418209c78634235017494d6e5e7", "sha256": "312c0276da5ce11155b99731e89cff6cfa91b1348e8c9a798efe189c1ed1d2b5"}, "downloads": -1, "filename": "Automunge-3.76.tar.gz", "has_sig": false, "md5_digest": "085a6418209c78634235017494d6e5e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266186, "upload_time": "2020-04-11T23:40:14", "upload_time_iso_8601": "2020-04-11T23:40:14.936664Z", "url": "https://files.pythonhosted.org/packages/7c/1d/38ebf2191746de57259e5ab6ff5cf2fbc54a83ba12f218165da074e49be0/Automunge-3.76.tar.gz", "yanked": false}], "3.77": [{"comment_text": "", "digests": {"md5": "047c2a722843bad562c02f5c8a7e1433", "sha256": "3902a858468d470ed325def24b506e3e2e9c220319e923a37e0b7fdc6e75974c"}, "downloads": -1, "filename": "Automunge-3.77-py3-none-any.whl", "has_sig": false, "md5_digest": "047c2a722843bad562c02f5c8a7e1433", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198408, "upload_time": "2020-04-19T23:51:26", "upload_time_iso_8601": "2020-04-19T23:51:26.173619Z", "url": "https://files.pythonhosted.org/packages/27/8e/ff05b5e66f760de1f921e1cd7b1bf4fd722f02e2de1f10f344a2e1f0bc9f/Automunge-3.77-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "faf5f56b59d1ad0a0487a883ee61f4e0", "sha256": "d956106f525b14e8ea57b5a402084db4f6764bcbbc0a27ed65e161ff4858d256"}, "downloads": -1, "filename": "Automunge-3.77.tar.gz", "has_sig": false, "md5_digest": "faf5f56b59d1ad0a0487a883ee61f4e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268228, "upload_time": "2020-04-19T23:51:29", "upload_time_iso_8601": "2020-04-19T23:51:29.113751Z", "url": "https://files.pythonhosted.org/packages/31/c9/5b19072b502c229283b8f768cb6b893e3c3356058dac142e854dd064bad9/Automunge-3.77.tar.gz", "yanked": false}], "3.78": [{"comment_text": "", "digests": {"md5": "2b164d5a4eb170bbc3b6efa25ec51c7a", "sha256": "d1e0cb24078d72f29a95704a0a5106bc9e28042952d5527781d62f301df5f38a"}, "downloads": -1, "filename": "Automunge-3.78-py3-none-any.whl", "has_sig": false, "md5_digest": "2b164d5a4eb170bbc3b6efa25ec51c7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197286, "upload_time": "2020-04-21T01:25:14", "upload_time_iso_8601": "2020-04-21T01:25:14.741876Z", "url": "https://files.pythonhosted.org/packages/55/bc/571401b4ff09e3799e95daf856b3cc912b42259c18adc400b445b898df66/Automunge-3.78-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "388573422c50c1f42f978ca180d990ed", "sha256": "8e518a67291c817a240742b80d39e961a986b33bac427309fb6b53c9e826d687"}, "downloads": -1, "filename": "Automunge-3.78.tar.gz", "has_sig": false, "md5_digest": "388573422c50c1f42f978ca180d990ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266857, "upload_time": "2020-04-21T01:25:17", "upload_time_iso_8601": "2020-04-21T01:25:17.206308Z", "url": "https://files.pythonhosted.org/packages/58/13/1b41827388eb688b901ac1e1ae5f47f972a7fd8ef6d69e4b2b31d01bb333/Automunge-3.78.tar.gz", "yanked": false}], "3.79": [{"comment_text": "", "digests": {"md5": "9e72ca5adc090d4231bcbfaccf6876b0", "sha256": "2fd61480bf8a840b26034256131d2d714db539f69c28570f26051076b78429f1"}, "downloads": -1, "filename": "Automunge-3.79-py3-none-any.whl", "has_sig": false, "md5_digest": "9e72ca5adc090d4231bcbfaccf6876b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 196699, "upload_time": "2020-04-21T20:48:15", "upload_time_iso_8601": "2020-04-21T20:48:15.724948Z", "url": "https://files.pythonhosted.org/packages/b0/fb/ec0ecd19caf875a292a2b6642fe97ffaea57f8d0d26705e92b63a3470fca/Automunge-3.79-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "768fb28edc9307be5631c2c1a8b5bb21", "sha256": "bad385ac6c5baf3535bdd0ec3aed1b64afb50b09f620563770097f8fcbbb97d1"}, "downloads": -1, "filename": "Automunge-3.79.tar.gz", "has_sig": false, "md5_digest": "768fb28edc9307be5631c2c1a8b5bb21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266303, "upload_time": "2020-04-21T20:48:17", "upload_time_iso_8601": "2020-04-21T20:48:17.621712Z", "url": "https://files.pythonhosted.org/packages/32/a1/f58ce3897a7e232cb374aaf2c7403d68374ed45c497f6befd71bfe00804c/Automunge-3.79.tar.gz", "yanked": false}], "3.8": [{"comment_text": "", "digests": {"md5": "02c7919c749a17214f09dd2b77877c54", "sha256": "1f8f55120b6514c3cc958564bdaf7fb32b78080ec4a86c5e11981c435cc396ed"}, "downloads": -1, "filename": "Automunge-3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "02c7919c749a17214f09dd2b77877c54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 163519, "upload_time": "2019-12-13T22:30:04", "upload_time_iso_8601": "2019-12-13T22:30:04.260570Z", "url": "https://files.pythonhosted.org/packages/4e/55/295ee8760895b29991ed9bc95195c95f2f2f3677f30ec9bd91a6ea4ba479/Automunge-3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b85b07f6ed354d9da406aeb395b7641", "sha256": "f00d3d0b2cf8bc5893472f4528127a8372a80049a5c3da54ded451edae4c0fb4"}, "downloads": -1, "filename": "Automunge-3.8.tar.gz", "has_sig": false, "md5_digest": "8b85b07f6ed354d9da406aeb395b7641", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 208014, "upload_time": "2019-12-13T22:30:07", "upload_time_iso_8601": "2019-12-13T22:30:07.791684Z", "url": "https://files.pythonhosted.org/packages/2c/ae/3018dda2419828646ec40c7918642da151253e9292f6aee683568eb6ebfe/Automunge-3.8.tar.gz", "yanked": false}], "3.80": [{"comment_text": "", "digests": {"md5": "6f9205f447cc73e13e4cfbf80f2e8f54", "sha256": "1049e1977066a8c5ed5e4f3fa0f2ee0c4a0c6e793f187bbea259220135720770"}, "downloads": -1, "filename": "Automunge-3.80-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9205f447cc73e13e4cfbf80f2e8f54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 196994, "upload_time": "2020-04-22T21:05:24", "upload_time_iso_8601": "2020-04-22T21:05:24.265215Z", "url": "https://files.pythonhosted.org/packages/6e/02/c8c294e9904b6b1693e79a60fd85431b8e72842806c0a0b009bca3c87bf8/Automunge-3.80-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4742c94d2220b157a2e1d0bce5f80690", "sha256": "bd10064ef9d3b40957ac5cf6d608cb8dfa347580fdc9232c38b7aa25f11fb7c7"}, "downloads": -1, "filename": "Automunge-3.80.tar.gz", "has_sig": false, "md5_digest": "4742c94d2220b157a2e1d0bce5f80690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 266642, "upload_time": "2020-04-22T21:05:27", "upload_time_iso_8601": "2020-04-22T21:05:27.062272Z", "url": "https://files.pythonhosted.org/packages/10/d0/9740190c69bc0747700c31dd5fb66aa70ab467260ff92f9503776d908bdc/Automunge-3.80.tar.gz", "yanked": false}], "3.81": [{"comment_text": "", "digests": {"md5": "11c40303743a017eadb9eaac7ca07e23", "sha256": "a034d2736ee81bfd5fec6e6cf84d194d06bfbc0bf77108b5391c69ac8267b2ee"}, "downloads": -1, "filename": "Automunge-3.81-py3-none-any.whl", "has_sig": false, "md5_digest": "11c40303743a017eadb9eaac7ca07e23", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 197919, "upload_time": "2020-04-24T20:35:40", "upload_time_iso_8601": "2020-04-24T20:35:40.955848Z", "url": "https://files.pythonhosted.org/packages/fc/30/9543e24ee07cf7da33be3cf80fbc9d3ae0bbbcb3eb3f35ee83b723226631/Automunge-3.81-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b1fa6ae2d96a0fa2c2a87abbe98e2b3", "sha256": "2e8b831821ff443e5e801d77253b04ceab506387c7ac9d048a106bbfcd4e8296"}, "downloads": -1, "filename": "Automunge-3.81.tar.gz", "has_sig": false, "md5_digest": "7b1fa6ae2d96a0fa2c2a87abbe98e2b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268011, "upload_time": "2020-04-24T20:35:42", "upload_time_iso_8601": "2020-04-24T20:35:42.882392Z", "url": "https://files.pythonhosted.org/packages/31/f1/9eeaae89f313b89beef455722754f38a62d014fef9a4877e9f3c30469bba/Automunge-3.81.tar.gz", "yanked": false}], "3.82": [{"comment_text": "", "digests": {"md5": "32b13891cb394c124fa82c50ce5f2791", "sha256": "748f38d7cc48a51a6b4d22eac3540a9a4beffac6d6d47abccbb2a056dfa3f153"}, "downloads": -1, "filename": "Automunge-3.82-py3-none-any.whl", "has_sig": false, "md5_digest": "32b13891cb394c124fa82c50ce5f2791", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198366, "upload_time": "2020-04-28T01:59:39", "upload_time_iso_8601": "2020-04-28T01:59:39.830352Z", "url": "https://files.pythonhosted.org/packages/8a/ca/2f20974796a7f3b638453a6672a6c9d0a8cd171de9f7f21f6cdf47fc0b8e/Automunge-3.82-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3f0ce76f374801b3332ba6bdf308b8a", "sha256": "f09109f16c89e1b47ff80f0a149baca48a66885782c70c8858ce078572a9b83e"}, "downloads": -1, "filename": "Automunge-3.82.tar.gz", "has_sig": false, "md5_digest": "e3f0ce76f374801b3332ba6bdf308b8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268803, "upload_time": "2020-04-28T01:59:42", "upload_time_iso_8601": "2020-04-28T01:59:42.318255Z", "url": "https://files.pythonhosted.org/packages/5a/86/7a0530104c5bf0191e492f0ec8cb69607416d60b4a0af9f532c8fb6faa72/Automunge-3.82.tar.gz", "yanked": false}], "3.83": [{"comment_text": "", "digests": {"md5": "dd57322f2bf26ffcf6eb9f27893d4b99", "sha256": "91be9bd50552d793c94c0970d26e24fea2f9d564294b54c09f906288553ddc95"}, "downloads": -1, "filename": "Automunge-3.83-py3-none-any.whl", "has_sig": false, "md5_digest": "dd57322f2bf26ffcf6eb9f27893d4b99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198325, "upload_time": "2020-04-29T02:09:34", "upload_time_iso_8601": "2020-04-29T02:09:34.906013Z", "url": "https://files.pythonhosted.org/packages/b1/9c/9a7282f4027cfa6eeeec3777b0bab55ad9da1f8f1b83f133f5694b1d619d/Automunge-3.83-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2edde22a849d98d6a1395853e27bdd61", "sha256": "0efaeef6c117fe58fbc9f80a384309b0d6614a3a085c9ac516222ac97db701fb"}, "downloads": -1, "filename": "Automunge-3.83.tar.gz", "has_sig": false, "md5_digest": "2edde22a849d98d6a1395853e27bdd61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268737, "upload_time": "2020-04-29T02:09:36", "upload_time_iso_8601": "2020-04-29T02:09:36.914327Z", "url": "https://files.pythonhosted.org/packages/32/1a/e1f5829d2b93a5d0e582828ca9dcd13221db027a84e82c869a3db43587c9/Automunge-3.83.tar.gz", "yanked": false}], "3.84": [{"comment_text": "", "digests": {"md5": "5cc181a6ae429a7eb08d3609dea7e4cb", "sha256": "1397981c07f489ede81368f9d12933f4fc699a335fa87f911bb131405c71ee5d"}, "downloads": -1, "filename": "Automunge-3.84-py3-none-any.whl", "has_sig": false, "md5_digest": "5cc181a6ae429a7eb08d3609dea7e4cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198371, "upload_time": "2020-05-02T01:39:28", "upload_time_iso_8601": "2020-05-02T01:39:28.228598Z", "url": "https://files.pythonhosted.org/packages/92/32/090099716743be4499984d041fcb39a4accdba43903c61fca12b218ff2b4/Automunge-3.84-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "962f8f314ca3f4e5196aac34b10732d0", "sha256": "699dd84cdd3d396d841bd4023e2bbb36401d47e6a99ce71e6c2b39fc04714377"}, "downloads": -1, "filename": "Automunge-3.84.tar.gz", "has_sig": false, "md5_digest": "962f8f314ca3f4e5196aac34b10732d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 268962, "upload_time": "2020-05-02T01:39:30", "upload_time_iso_8601": "2020-05-02T01:39:30.300123Z", "url": "https://files.pythonhosted.org/packages/17/d6/b4abb91a5534ba5870874019cb50d44cbf9114cbdf1a6c94293d58e99ff3/Automunge-3.84.tar.gz", "yanked": false}], "3.85": [{"comment_text": "", "digests": {"md5": "6e658e869be52f180224b768cce2500f", "sha256": "a590ee0cf69825780ddea0b6031b1e5ca153948f0dc558786cd9d9ef480679cd"}, "downloads": -1, "filename": "Automunge-3.85-py3-none-any.whl", "has_sig": false, "md5_digest": "6e658e869be52f180224b768cce2500f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 198837, "upload_time": "2020-05-02T20:53:10", "upload_time_iso_8601": "2020-05-02T20:53:10.827724Z", "url": "https://files.pythonhosted.org/packages/ad/9d/540b67f891b93bdf72726ae303d1b51ff177947751578be04a4d8266486d/Automunge-3.85-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ee2a318d20b0fa0567dbf13317938a5", "sha256": "67c45187baf213448e9d0cccaeedd49960a591ce792d0535c49aec2b68602734"}, "downloads": -1, "filename": "Automunge-3.85.tar.gz", "has_sig": false, "md5_digest": "7ee2a318d20b0fa0567dbf13317938a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 269591, "upload_time": "2020-05-02T20:53:13", "upload_time_iso_8601": "2020-05-02T20:53:13.211166Z", "url": "https://files.pythonhosted.org/packages/9a/01/860e413e47a1dc4e7717662761bc5dbf984268da7bbd6cb8eb3b5d0220e4/Automunge-3.85.tar.gz", "yanked": false}], "3.86": [{"comment_text": "", "digests": {"md5": "7f90424143c9dadd09833cc557d25c88", "sha256": "a37c1a33567aa80860bd3992e407d83ed3415eec195a10e4d4b9be6ef88b82fc"}, "downloads": -1, "filename": "Automunge-3.86-py3-none-any.whl", "has_sig": false, "md5_digest": "7f90424143c9dadd09833cc557d25c88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 199717, "upload_time": "2020-05-06T04:21:44", "upload_time_iso_8601": "2020-05-06T04:21:44.810104Z", "url": "https://files.pythonhosted.org/packages/6b/98/b5093c13747af68b4a4d5371dc78ca943df487c0fd556881d798ff71b63e/Automunge-3.86-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f63b5288d4ba86d119c8f6612f008cc5", "sha256": "6f1e65bb2ec92346d8c0a4f799b9b5cdca2128db30004ab3147e98263e04a2d7"}, "downloads": -1, "filename": "Automunge-3.86.tar.gz", "has_sig": false, "md5_digest": "f63b5288d4ba86d119c8f6612f008cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270588, "upload_time": "2020-05-06T04:21:46", "upload_time_iso_8601": "2020-05-06T04:21:46.976763Z", "url": "https://files.pythonhosted.org/packages/74/f4/454cc2aae2d72de927ace7f057894df46afa0686522eab765f2f238f5a50/Automunge-3.86.tar.gz", "yanked": false}], "3.9": [{"comment_text": "", "digests": {"md5": "048cd5dcfec5540011c0f82e32398d82", "sha256": "9932317409a54bf1e0c1391bea19b94cc521c0cdc7f8d215c92bda6c7fe05027"}, "downloads": -1, "filename": "Automunge-3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "048cd5dcfec5540011c0f82e32398d82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 163811, "upload_time": "2019-12-15T06:18:29", "upload_time_iso_8601": "2019-12-15T06:18:29.761815Z", "url": "https://files.pythonhosted.org/packages/18/f3/fa656a605f56c96a045461760d9e0cd1578c8fc6500bcef5a987cfb07834/Automunge-3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d832e6abca0bfb362078e370989012d3", "sha256": "7dc9a35ebe1f1be83ceef7118fe1d663899d57e861900aa9cbc676273486558a"}, "downloads": -1, "filename": "Automunge-3.9.tar.gz", "has_sig": false, "md5_digest": "d832e6abca0bfb362078e370989012d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 208528, "upload_time": "2019-12-15T06:18:35", "upload_time_iso_8601": "2019-12-15T06:18:35.757523Z", "url": "https://files.pythonhosted.org/packages/85/0d/5edac5ba64c19f21e5ad294c22df515aa3de266a8803b457f1cc8fc492e4/Automunge-3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f90424143c9dadd09833cc557d25c88", "sha256": "a37c1a33567aa80860bd3992e407d83ed3415eec195a10e4d4b9be6ef88b82fc"}, "downloads": -1, "filename": "Automunge-3.86-py3-none-any.whl", "has_sig": false, "md5_digest": "7f90424143c9dadd09833cc557d25c88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 199717, "upload_time": "2020-05-06T04:21:44", "upload_time_iso_8601": "2020-05-06T04:21:44.810104Z", "url": "https://files.pythonhosted.org/packages/6b/98/b5093c13747af68b4a4d5371dc78ca943df487c0fd556881d798ff71b63e/Automunge-3.86-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f63b5288d4ba86d119c8f6612f008cc5", "sha256": "6f1e65bb2ec92346d8c0a4f799b9b5cdca2128db30004ab3147e98263e04a2d7"}, "downloads": -1, "filename": "Automunge-3.86.tar.gz", "has_sig": false, "md5_digest": "f63b5288d4ba86d119c8f6612f008cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 270588, "upload_time": "2020-05-06T04:21:46", "upload_time_iso_8601": "2020-05-06T04:21:46.976763Z", "url": "https://files.pythonhosted.org/packages/74/f4/454cc2aae2d72de927ace7f057894df46afa0686522eab765f2f238f5a50/Automunge-3.86.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:12 2020"}