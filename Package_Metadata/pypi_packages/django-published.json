{"info": {"author": "Luke Rogers", "author_email": "luke@dmptr.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Django Published [![PyPI](https://img.shields.io/pypi/v/django-published)](https://pypi.org/project/django-published/)\n\nPublished allows you to control the public visibility of model instances.\nUseful in situations like below!\n\n    You have a model where some number of instances of the model should\n    be \"live\". A good example of this would be an Article model, where\n    you've written some articles that are \"live\", some that might've\n    been taken down, some that are still \"in progress\", and others that\n    are ready to \"go live\", but have a \"go live\" date that's in the\n    future.\n\n\nThis project is based on [django-model-gatekeeper](https://github.com/WGBH/django-model-gatekeeper) by\n[WGBH](https://github.com/WGBH/).\n\n## Quick start\n\n1.  Add \"published\" to your `INSTALLED_APPS`:\n```python\nINSTALLED_APPS = [\n    ...\n    'published',\n]\n```\n\n## Gatekeeping Models\n\nThe main use for *django-published* is where you have a model with many\ninstances, but you only want some to be \"live\" on the site.\n\nA good example is a generic \"Article\" model:\n\n>   - Some articles are ready-to-go and you want them live to the\n>     public;\n>   - Other articles are still being worked on - you want to be able to\n>     preview them, but not take them live JUST yet;\n>   - Some articles might be pulled (and re-published later)\n>   - Some articles are ready to be published, but you want them to only\n>     go live at a later date.\n\nTo start using this, all you need to do is subclass the\n`PublishedModel` abstract model,\ne.g:\n\n```python\nfrom published.models import PublishedModel\n\nclass Article(PublishedModel):\n    ...\n```\n\nThe superclass creates two fields:\n\n1.  `publish_status` - this has 3 possible values:\n       - **NEVER_AVAILABLE** = \"permanently off\" - hard-wired to NEVER be available to\n         the public\n       - **AVAILABLE_AFTER** = \"use live_as_of\" date to determine if the object is\n         available to the public\n       - **AVAILABLE** = \"always on\" - hard-wired to be always available to the\n         public\n\n\n2.  `live_as_of` - this is the timestamp of when the object should go live, if publish_status\n    is **AVAILABLE_AFTER**\n\n\n\nYou set the `publish_status` and `live_as_of` values through the admin.\n\n### Generic Model Views\n\nSetting up _django-published_ for generic models views is easy!\n\nUsing the Article model as an example, here is the corresponding\nview code for  listing and detail views.\n\n```python\nfrom django.views.generic import DetailView, ListView\nfrom .models import Article\nfrom published.mixins import PublishedListMixin, PublishedDetailMixin\n\nclass ArticleListView(PublishedListMixin, ListView):\n    model = Article\n    template_name = 'article/article_list.html'\n    context_object_name = 'articles'\n\nclass ArticleDetailView(PublishedDetailMixin, DetailView):\n    model = Article\n    template_name = 'article/article_detail.html'\n    context_object_name = 'article'\n```\n\n\nWhat's happening behind the scenes:\n\n1.  In the ListView, *django-published* is filtering the model with the\n    following rules:\n\n     1.  If the current user has admin access, always include the model instance.\n     2.  If `publish_status = AVAILABLE`, include the model instance.\n     3.  If `publish_status = NEVER_AVAILABLE`, DO NOT the model instance.\n     4.  If `publish_status = AVAILABLE_AFTER`, *and* the current date/time is after\n         `live_as_of`, include the model instance.\n     4.  Return the filtered list of model instances.\n\n2.  In the DetailView, *django-published* follows the same rules but will\n    throw a 404 error if the model instance is not available.\n\n### Custom Code\n\nSay there's a section on your homepage that gives a list of the three\nmost recent articles. If you just create a queryset along the lines of:\n\n    most_recent_articles = Article.objects.order_by(-date_created)[:3]\n\nit will include articles regardless of what their gatekeeping situation\nis.\n\nSo there is a helper function to apply the gatekeeping rules to any\nqueryset you generate.\n\n#### queryset_filter\nThis takes a queryset, applies the rules and returns a filtered queryset.\n\n```python\nfrom published.utils import queryset_filter\n...\nrecent_articles = Article.objects.order_by('-date_created')\nrecent_articles = queryset_filter(recent_articles, is_auth)\n...\n```\n\n\nBy default, `queryset_filter` does not apply the same exceptions as the view\nmixins above. This means that unpublished model instances will be *not* displayed\nif the current user has admin access.\n\nThe optional `user` parameter allows you to enable this special case, as seen below.\n```python\nqueryset_filter(queryset, user=self.request.user)\n```\n\n#### available_to_public\n\n**Note**: This should only be used in templates\n\nIf you need to check if an object is considered \"available\" in a Django template, you can use the\n`available_to_public` model attribute, as below.\n\n```djangotemplate\n{% for article in article_list %}\n    {% if article.available_to_public %}\n        I'm published!\n    {% endif %}\n{% endfor %}\n```\n\n# The Admin Interface\n\n*django-published* has several helper functions to make adding admin controls easier.\nAll of them can be found in the  `django-published.admin` module.\n\n![alt test](https://raw.githubusercontent.com/dmptrluke/django-published/master/screenshots/admin.png)\n\n## PublishedAdmin\nAll of the below functions require the use of the `PublishedAdmin` abstract class instead\nof the default `ModelAdmin` class. You can see examples of this in all of the code below.\n\n## Readonly Fields\n\nTo use any of the below functions, one field needs to be added to the admin instance.\nThis can be done using `add_to_readonly_fields`\n\n\n1.  A `show_publish_status` that takes the `live_as_of` and `publish_status`\n fields and creates a human-friendly string from them\n\nExample code:\n\n```python\nfrom published.admin import PublishedAdmin, add_to_readonly_fields\n\nclass MyModelAdmin(PublishedAdmin):\n    readonly_fields = ['my_field_1', 'my_field_2'] + add_to_readonly_fields()\n ```\n\n## List Display\n\nTo show the status in an admin list view, `show_publish_status` needs to be added to\n`list_display`\n\nThis can be added automatically with the `add_to_list_display` method, e.g.:\n\n```python\nfrom published.admin import PublishedAdmin, add_to_list_display\n\nclass MyModelAdmin(PublishedAdmin):\n    list_display = ['pk', 'title', ] + add_to_list_display()\n```\n\n## Fieldsets\n\nThere are two ways to include the *django-published* fields using the\n`add_to_fieldsets` method:\n\n### As a separate section\n\nThere's a `section` attribute (default:\nTrue) that returns the entire section tuple with the gatekeeper fields.\nThere's also a `collapse` attribute\n(default: False) that uses the Django Admin \"collapse\" class.\n\n\n```python\nfrom published.admin import PublishedAdmin, add_to_fieldsets\n\nclass MyModelAdmin(PublishedAdmin):\n    fieldsets = (\n        (None, ...),\n        add_to_fieldsets(section=True, collapse=False)\n    )\n```\n\n### Included as part of a section\n\nOr you can include them as part of another section; in this case you'd\nset `section=False`\n\n```python\nfrom published.admin import PublishedAdmin, add_to_fieldsets\n\nclass MyModelAdmin(PublishedAdmin):\n    fieldsets = (\n        (None, {\n            'fields': (\n                (some set of fields),\n                add_to_fieldsets(section=False)\n            )\n        }),\n```\n\nAnd of course you can just do it all manually with the editable `live_as_of`, `publish_status` fields and the readonly\n`show_publish_status` field.\n\n## License\n\nThis software is released under the MIT license.\n```\nCopyright (c) 2019 WGBH Educational Foundation\nCopyright (c) 2019-2020 Luke Rogers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dmptrluke/django-published", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-published", "package_url": "https://pypi.org/project/django-published/", "platform": "", "project_url": "https://pypi.org/project/django-published/", "project_urls": {"Homepage": "https://github.com/dmptrluke/django-published"}, "release_url": "https://pypi.org/project/django-published/0.7.0/", "requires_dist": ["django>=2.2", "dataclasses; python_version == \"3.6\"", "flake8 ; extra == \"test\"", "coverage ; extra == \"test\"", "mock ; extra == \"test\""], "requires_python": ">=3.6", "summary": "Control public visibility of model instances.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Published <a href=\"https://pypi.org/project/django-published/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a702a1406ac55bbebf4fa690e427114d009f0e2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d7075626c6973686564\"></a></h1>\n<p>Published allows you to control the public visibility of model instances.\nUseful in situations like below!</p>\n<pre><code>You have a model where some number of instances of the model should\nbe \"live\". A good example of this would be an Article model, where\nyou've written some articles that are \"live\", some that might've\nbeen taken down, some that are still \"in progress\", and others that\nare ready to \"go live\", but have a \"go live\" date that's in the\nfuture.\n</code></pre>\n<p>This project is based on <a href=\"https://github.com/WGBH/django-model-gatekeeper\" rel=\"nofollow\">django-model-gatekeeper</a> by\n<a href=\"https://github.com/WGBH/\" rel=\"nofollow\">WGBH</a>.</p>\n<h2>Quick start</h2>\n<ol>\n<li>Add \"published\" to your <code>INSTALLED_APPS</code>:</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'published'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>Gatekeeping Models</h2>\n<p>The main use for <em>django-published</em> is where you have a model with many\ninstances, but you only want some to be \"live\" on the site.</p>\n<p>A good example is a generic \"Article\" model:</p>\n<blockquote>\n<ul>\n<li>Some articles are ready-to-go and you want them live to the\npublic;</li>\n<li>Other articles are still being worked on - you want to be able to\npreview them, but not take them live JUST yet;</li>\n<li>Some articles might be pulled (and re-published later)</li>\n<li>Some articles are ready to be published, but you want them to only\ngo live at a later date.</li>\n</ul>\n</blockquote>\n<p>To start using this, all you need to do is subclass the\n<code>PublishedModel</code> abstract model,\ne.g:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.models</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">PublishedModel</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The superclass creates two fields:</p>\n<ol>\n<li>\n<p><code>publish_status</code> - this has 3 possible values:</p>\n<ul>\n<li><strong>NEVER_AVAILABLE</strong> = \"permanently off\" - hard-wired to NEVER be available to\nthe public</li>\n<li><strong>AVAILABLE_AFTER</strong> = \"use live_as_of\" date to determine if the object is\navailable to the public</li>\n<li><strong>AVAILABLE</strong> = \"always on\" - hard-wired to be always available to the\npublic</li>\n</ul>\n</li>\n<li>\n<p><code>live_as_of</code> - this is the timestamp of when the object should go live, if publish_status\nis <strong>AVAILABLE_AFTER</strong></p>\n</li>\n</ol>\n<p>You set the <code>publish_status</code> and <code>live_as_of</code> values through the admin.</p>\n<h3>Generic Model Views</h3>\n<p>Setting up <em>django-published</em> for generic models views is easy!</p>\n<p>Using the Article model as an example, here is the corresponding\nview code for  listing and detail views.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span><span class=\"p\">,</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Article</span>\n<span class=\"kn\">from</span> <span class=\"nn\">published.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedListMixin</span><span class=\"p\">,</span> <span class=\"n\">PublishedDetailMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleListView</span><span class=\"p\">(</span><span class=\"n\">PublishedListMixin</span><span class=\"p\">,</span> <span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Article</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'article/article_list.html'</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s1\">'articles'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleDetailView</span><span class=\"p\">(</span><span class=\"n\">PublishedDetailMixin</span><span class=\"p\">,</span> <span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Article</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'article/article_detail.html'</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s1\">'article'</span>\n</pre>\n<p>What's happening behind the scenes:</p>\n<ol>\n<li>\n<p>In the ListView, <em>django-published</em> is filtering the model with the\nfollowing rules:</p>\n<ol>\n<li>If the current user has admin access, always include the model instance.</li>\n<li>If <code>publish_status = AVAILABLE</code>, include the model instance.</li>\n<li>If <code>publish_status = NEVER_AVAILABLE</code>, DO NOT the model instance.</li>\n<li>If <code>publish_status = AVAILABLE_AFTER</code>, <em>and</em> the current date/time is after\n<code>live_as_of</code>, include the model instance.</li>\n<li>Return the filtered list of model instances.</li>\n</ol>\n</li>\n<li>\n<p>In the DetailView, <em>django-published</em> follows the same rules but will\nthrow a 404 error if the model instance is not available.</p>\n</li>\n</ol>\n<h3>Custom Code</h3>\n<p>Say there's a section on your homepage that gives a list of the three\nmost recent articles. If you just create a queryset along the lines of:</p>\n<pre><code>most_recent_articles = Article.objects.order_by(-date_created)[:3]\n</code></pre>\n<p>it will include articles regardless of what their gatekeeping situation\nis.</p>\n<p>So there is a helper function to apply the gatekeeping rules to any\nqueryset you generate.</p>\n<h4>queryset_filter</h4>\n<p>This takes a queryset, applies the rules and returns a filtered queryset.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.utils</span> <span class=\"kn\">import</span> <span class=\"n\">queryset_filter</span>\n<span class=\"o\">...</span>\n<span class=\"n\">recent_articles</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-date_created'</span><span class=\"p\">)</span>\n<span class=\"n\">recent_articles</span> <span class=\"o\">=</span> <span class=\"n\">queryset_filter</span><span class=\"p\">(</span><span class=\"n\">recent_articles</span><span class=\"p\">,</span> <span class=\"n\">is_auth</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>By default, <code>queryset_filter</code> does not apply the same exceptions as the view\nmixins above. This means that unpublished model instances will be <em>not</em> displayed\nif the current user has admin access.</p>\n<p>The optional <code>user</code> parameter allows you to enable this special case, as seen below.</p>\n<pre><span class=\"n\">queryset_filter</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<h4>available_to_public</h4>\n<p><strong>Note</strong>: This should only be used in templates</p>\n<p>If you need to check if an object is considered \"available\" in a Django template, you can use the\n<code>available_to_public</code> model attribute, as below.</p>\n<pre>{% for article in article_list %}\n    {% if article.available_to_public %}\n        I'm published!\n    {% endif %}\n{% endfor %}\n</pre>\n<h1>The Admin Interface</h1>\n<p><em>django-published</em> has several helper functions to make adding admin controls easier.\nAll of them can be found in the  <code>django-published.admin</code> module.</p>\n<p><img alt=\"alt test\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67aa981650a6da82929fdaaf1b99e9a873cc7494/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f646d7074726c756b652f646a616e676f2d7075626c69736865642f6d61737465722f73637265656e73686f74732f61646d696e2e706e67\"></p>\n<h2>PublishedAdmin</h2>\n<p>All of the below functions require the use of the <code>PublishedAdmin</code> abstract class instead\nof the default <code>ModelAdmin</code> class. You can see examples of this in all of the code below.</p>\n<h2>Readonly Fields</h2>\n<p>To use any of the below functions, one field needs to be added to the admin instance.\nThis can be done using <code>add_to_readonly_fields</code></p>\n<ol>\n<li>A <code>show_publish_status</code> that takes the <code>live_as_of</code> and <code>publish_status</code>\nfields and creates a human-friendly string from them</li>\n</ol>\n<p>Example code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.admin</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedAdmin</span><span class=\"p\">,</span> <span class=\"n\">add_to_readonly_fields</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">PublishedAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">readonly_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'my_field_1'</span><span class=\"p\">,</span> <span class=\"s1\">'my_field_2'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">add_to_readonly_fields</span><span class=\"p\">()</span>\n</pre>\n<h2>List Display</h2>\n<p>To show the status in an admin list view, <code>show_publish_status</code> needs to be added to\n<code>list_display</code></p>\n<p>This can be added automatically with the <code>add_to_list_display</code> method, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.admin</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedAdmin</span><span class=\"p\">,</span> <span class=\"n\">add_to_list_display</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">PublishedAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'pk'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">add_to_list_display</span><span class=\"p\">()</span>\n</pre>\n<h2>Fieldsets</h2>\n<p>There are two ways to include the <em>django-published</em> fields using the\n<code>add_to_fieldsets</code> method:</p>\n<h3>As a separate section</h3>\n<p>There's a <code>section</code> attribute (default:\nTrue) that returns the entire section tuple with the gatekeeper fields.\nThere's also a <code>collapse</code> attribute\n(default: False) that uses the Django Admin \"collapse\" class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.admin</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedAdmin</span><span class=\"p\">,</span> <span class=\"n\">add_to_fieldsets</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">PublishedAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">),</span>\n        <span class=\"n\">add_to_fieldsets</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">collapse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Included as part of a section</h3>\n<p>Or you can include them as part of another section; in this case you'd\nset <code>section=False</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">published.admin</span> <span class=\"kn\">import</span> <span class=\"n\">PublishedAdmin</span><span class=\"p\">,</span> <span class=\"n\">add_to_fieldsets</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">PublishedAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                <span class=\"p\">(</span><span class=\"n\">some</span> <span class=\"nb\">set</span> <span class=\"n\">of</span> <span class=\"n\">fields</span><span class=\"p\">),</span>\n                <span class=\"n\">add_to_fieldsets</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}),</span>\n</pre>\n<p>And of course you can just do it all manually with the editable <code>live_as_of</code>, <code>publish_status</code> fields and the readonly\n<code>show_publish_status</code> field.</p>\n<h2>License</h2>\n<p>This software is released under the MIT license.</p>\n<pre><code>Copyright (c) 2019 WGBH Educational Foundation\nCopyright (c) 2019-2020 Luke Rogers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n</code></pre>\n\n          </div>"}, "last_serial": 6503556, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f6004914b43486b96837501f13b34d14", "sha256": "e90da02727ca6cbaab82f113284621fbfad1761109d6017f2319d4c255aee0cf"}, "downloads": -1, "filename": "django-published-0.1.0.tar.gz", "has_sig": true, "md5_digest": "f6004914b43486b96837501f13b34d14", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11743, "upload_time": "2019-12-30T04:44:55", "upload_time_iso_8601": "2019-12-30T04:44:55.537541Z", "url": "https://files.pythonhosted.org/packages/4d/48/38a954bcec12d5a25e9efaa5fc346877f2948ad58445f13441b002a73af3/django-published-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "fd3aaf8ed61fcf2ac4fda58a5391dbf1", "sha256": "d6244bc3d4fd26795958e63fe982ba10065dbdf797b3f9046c141de4550e0ad9"}, "downloads": -1, "filename": "django-published-0.2.0.tar.gz", "has_sig": true, "md5_digest": "fd3aaf8ed61fcf2ac4fda58a5391dbf1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11754, "upload_time": "2019-12-30T05:16:39", "upload_time_iso_8601": "2019-12-30T05:16:39.328364Z", "url": "https://files.pythonhosted.org/packages/2d/7b/f3aea4db21491254d62c27532fbc0d95aff831601719e16e219904551fb5/django-published-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c69873f5e864ff7289ff7b225e90e499", "sha256": "0afa7fc597d3cd5dc094390d468e2a6030a5d205c8bae25ee23bec4dd1577bb8"}, "downloads": -1, "filename": "django-published-0.2.1.tar.gz", "has_sig": true, "md5_digest": "c69873f5e864ff7289ff7b225e90e499", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11763, "upload_time": "2019-12-30T05:18:58", "upload_time_iso_8601": "2019-12-30T05:18:58.851496Z", "url": "https://files.pythonhosted.org/packages/3d/c3/e7f4354189b983c1855752a0e14e586b28fffa3fc251712924faa959295d/django-published-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cc3393b677586363e7d9229001c03fa6", "sha256": "bb08759c2ff75ec9cafb229947961e667fabbf7774a77b1337cc12226001f111"}, "downloads": -1, "filename": "django-published-0.3.0.tar.gz", "has_sig": true, "md5_digest": "cc3393b677586363e7d9229001c03fa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11699, "upload_time": "2019-12-30T07:26:51", "upload_time_iso_8601": "2019-12-30T07:26:51.406642Z", "url": "https://files.pythonhosted.org/packages/0e/34/11e2f518940d86873a0ac2fc7f2f5b7fa3b50cd807eb2ca3030b640f6bc6/django-published-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "81fb6d52f9b11ced36dabffe9d1a8863", "sha256": "2d5314f27a08b1d32840973aaf1933279f8d54c9f1c589fb27540ca6cb008f82"}, "downloads": -1, "filename": "django-published-0.4.0.tar.gz", "has_sig": true, "md5_digest": "81fb6d52f9b11ced36dabffe9d1a8863", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11691, "upload_time": "2019-12-30T07:53:43", "upload_time_iso_8601": "2019-12-30T07:53:43.582947Z", "url": "https://files.pythonhosted.org/packages/91/58/d53a012efd571a927273882650e0b04f7e2d82ccd53e4d5776619d79e2e2/django-published-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "eec88332ca536681760712cc921b66f6", "sha256": "4a859533fc4513bc24827edda639cf2c80913ded7b2c347017f76d136477dbda"}, "downloads": -1, "filename": "django-published-0.5.0.tar.gz", "has_sig": true, "md5_digest": "eec88332ca536681760712cc921b66f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11610, "upload_time": "2019-12-30T10:33:05", "upload_time_iso_8601": "2019-12-30T10:33:05.397472Z", "url": "https://files.pythonhosted.org/packages/25/4b/b2ddda0d51696f4a2efd94a653e41440a2b38f19de0e42a33a8032830132/django-published-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "584e6a31fb0f20c349eaf96d9ab13c49", "sha256": "729dc16cd67643f5b7e1271021fc20ce064d3618d88e7e30bb55e73abbcd9ce0"}, "downloads": -1, "filename": "django-published-0.5.1.tar.gz", "has_sig": true, "md5_digest": "584e6a31fb0f20c349eaf96d9ab13c49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11632, "upload_time": "2019-12-30T10:49:12", "upload_time_iso_8601": "2019-12-30T10:49:12.745280Z", "url": "https://files.pythonhosted.org/packages/ce/cb/152472696162894a2c6cc9659760750c2d38174ab36327287ae9647d88db/django-published-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a0bcbd6fdcf7690c9a421ef353dd1276", "sha256": "b130eccd78f9c034edf45e19e312f6d36df529255a65324c0c95a4615bc15c9f"}, "downloads": -1, "filename": "django_published-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a0bcbd6fdcf7690c9a421ef353dd1276", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13602, "upload_time": "2020-01-01T01:55:31", "upload_time_iso_8601": "2020-01-01T01:55:31.740897Z", "url": "https://files.pythonhosted.org/packages/44/90/916cfb5a84fdb92a148283f0a578ffa6a65e47f0dc6571d1d98bb85599a5/django_published-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16c348c05f73b0bf2d70ded7b36cacbf", "sha256": "78ffe39a20bf16b296a9b80d804cb2e6b68039dfc551e07efd7bb83f04f99392"}, "downloads": -1, "filename": "django-published-0.6.0.tar.gz", "has_sig": false, "md5_digest": "16c348c05f73b0bf2d70ded7b36cacbf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12256, "upload_time": "2020-01-01T01:55:34", "upload_time_iso_8601": "2020-01-01T01:55:34.261402Z", "url": "https://files.pythonhosted.org/packages/d1/c8/9f372b714986292f2a37955736cb6d746b907938c648d66f6aa4c2bb9bb3/django-published-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "fc5533734c94eb7d1042d885bc69a2e1", "sha256": "add33a8c546c3af33d1280bfbd3a8f924fdad46e35de32aad5722e5810248246"}, "downloads": -1, "filename": "django_published-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fc5533734c94eb7d1042d885bc69a2e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13658, "upload_time": "2020-01-03T00:04:48", "upload_time_iso_8601": "2020-01-03T00:04:48.498496Z", "url": "https://files.pythonhosted.org/packages/73/fb/f178c6580aa3fcdb8df7ea90b9f7184b93cdc838ee41d5c0cd4890ced700/django_published-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68c92450f62f8639dea7cd695b665492", "sha256": "7db439bb0fd51a6bba4f02444d9fe6c2cc6a9524b4035920a5394b80452a8b1e"}, "downloads": -1, "filename": "django-published-0.6.1.tar.gz", "has_sig": false, "md5_digest": "68c92450f62f8639dea7cd695b665492", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26702, "upload_time": "2020-01-03T00:04:51", "upload_time_iso_8601": "2020-01-03T00:04:51.010336Z", "url": "https://files.pythonhosted.org/packages/86/68/44708b6c7f2a74d3e8e3e3d2c05c257750de1744a42d470edc129cdeae3b/django-published-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "0f33e53246616a269d16048d7ae74d72", "sha256": "c7b1b23a0c6b60529e5dee0d507a85c1a22110d4e5b4a0ffda040cbe17d78bab"}, "downloads": -1, "filename": "django_published-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f33e53246616a269d16048d7ae74d72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13691, "upload_time": "2020-01-23T02:16:18", "upload_time_iso_8601": "2020-01-23T02:16:18.441635Z", "url": "https://files.pythonhosted.org/packages/07/d8/3caef56d43faf0c408d28bf3439851f4475aa89c32947f41639e03d65900/django_published-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e35621b6fadaece13e05d3ebdf105084", "sha256": "826379dc48ebb502387522fe2a3831283297955b14408e8a6f4d4b024819aefa"}, "downloads": -1, "filename": "django-published-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e35621b6fadaece13e05d3ebdf105084", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26848, "upload_time": "2020-01-23T02:16:20", "upload_time_iso_8601": "2020-01-23T02:16:20.894428Z", "url": "https://files.pythonhosted.org/packages/40/aa/382df86c0217feac46c4db4cebe591a5f52074a6eaa107ea4fd8f0f8b8fb/django-published-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f33e53246616a269d16048d7ae74d72", "sha256": "c7b1b23a0c6b60529e5dee0d507a85c1a22110d4e5b4a0ffda040cbe17d78bab"}, "downloads": -1, "filename": "django_published-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0f33e53246616a269d16048d7ae74d72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13691, "upload_time": "2020-01-23T02:16:18", "upload_time_iso_8601": "2020-01-23T02:16:18.441635Z", "url": "https://files.pythonhosted.org/packages/07/d8/3caef56d43faf0c408d28bf3439851f4475aa89c32947f41639e03d65900/django_published-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e35621b6fadaece13e05d3ebdf105084", "sha256": "826379dc48ebb502387522fe2a3831283297955b14408e8a6f4d4b024819aefa"}, "downloads": -1, "filename": "django-published-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e35621b6fadaece13e05d3ebdf105084", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26848, "upload_time": "2020-01-23T02:16:20", "upload_time_iso_8601": "2020-01-23T02:16:20.894428Z", "url": "https://files.pythonhosted.org/packages/40/aa/382df86c0217feac46c4db4cebe591a5f52074a6eaa107ea4fd8f0f8b8fb/django-published-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:37 2020"}