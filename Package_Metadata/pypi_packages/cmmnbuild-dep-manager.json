{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# CommonBuild Dependency Manager\n\n*A module to manage Java dependencies across multiple Python packages.*\n\n## Introduction\n\nWhen using multiple packages ([PyJapc], [PyTimber], etc) inside a single\nscript, they must share a single JVM instance. This means that the required\njars for *all* packages must be added to the class path of the JVM that is\nstarted by the first instantiated package.\n\n**cmmnbuild-dep-manager** provides a simple way to get a single list of jars\nfor all installed packages. As packages are added/removed it automatically\nresolves and downloads the required jar files using the [CBNG web service]\n(within the CERN network) or Gradle (in a public network).\n\n[PyJapc]:           https://gitlab.cern.ch/scripting-tools/pyjapc\n[PyTimber]:         https://github.com/rdemaria/pytimber\n[CBNG web service]: https://wikis.cern.ch/display/DVTLS/CBNG+Web+service\n\n## Usage\n\nPackages should implement the variable `__cmmnbuild_deps__` in their\n`__init__.py` containing a list of the required dependencies, for example:\n\n```python\n__cmmnbuild_deps__ = [\n    'japc',\n    'japc-value',\n    'japc-ext-cmwrda',\n    'japc-ext-cmwrda3',\n    'japc-ext-dirservice',\n    {'product': 'inca-client',   'version': 'PRO'},\n    {'product': 'slf4j-log4j12', 'local':   'true'},\n    {'product': 'slf4j-api',     'local':   'true'},\n    {'product': 'log4j',         'local':   'true'}\n]\n```\n\nEach item in the list can be either a string containing the product name,\nor a dictionary with keys matching the CBNG `product.xml` file\n([more info][DVTLS Configuration]).\n\n[DVTLS Configuration]: https://wikis.cern.ch/display/DVTLS/CBNG+-+product.xml\n\nWith the variable in place, packages can be registered with\n**cmmnbuild-dep-manager**. Registration is automatic if your package defines\nan entry_point of the form\n`\"cmmnbuild_dep_manager\": {package_name}={package_version}`.\nFor example, PyJapc might have an item in its setup.py such as:\n\n    entry_points={\n        # Register with cmmnbuild_dep_manager.\n        'cmmnbuild_dep_manager': ['pyjapc=2.3.1'],\n    },\n\nFinally, from your code, you can start a JVM with the complete list of jars\nusing:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> jpype = mgr.start_jpype_jvm()\n```\n\nAt this stage, JPype is ready to use.\n\n## Advanced usage\n\n### Re-downloading jars\n\nThe jars can be resolved and re-downloaded at any time by running the following\nshell command:\n\n```bash\n$ python -m cmmnbuild_dep_manager resolve\n```\n\n### Jar inspection helper functions\n\nHelper functions are provided to inspect the classes in the downloaded jars.\n\n#### class_list()\n\nProvides a listing of all classes contained within the jars:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> mgr.class_list()\n['cern.accsoft.cals.extr.client.commandline.CommandLineException',\n 'cern.accsoft.cals.extr.client.commandline.CommandLineServiceBuilder',\n 'cern.accsoft.cals.extr.client.commandline.CommandMethod',\n 'cern.accsoft.cals.extr.client.commandline.CommandOption',\n ...]\n```\n\n#### class_search()\n\nSearch for any class by name:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> mgr.class_search('ServiceBuilder')\n['cern.accsoft.cals.extr.client.commandline.CommandLineServiceBuilder',\n 'cern.accsoft.cals.extr.client.service.ServiceBuilder',\n 'cern.cmw.rda3.client.service.ClientServiceBuilder',\n 'cern.cmw.rda3.impl.client.service.ClientServiceBuilderImpl']\n```\n\n#### class_hints()\n\nProvide a pasteable example of how to use a specific class from Python:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> mgr.class_hints('cern.accsoft.cals.extr.client.service.ServiceBuilder')\ncern = jpype.JPackage('cern')\nServiceBuilder = cern.accsoft.cals.extr.client.service.ServiceBuilder\n\n>>> jpype = mgr.start_jpype_jvm()\n>>> cern = jpype.JPackage('cern')\n>>> ServiceBuilder = cern.accsoft.cals.extr.client.service.ServiceBuilder\n>>> ServiceBuilder\njpype._jclass.cern.accsoft.cals.extr.client.service.ServiceBuilder\n```\n\n### Command-line interface\n\n**cmmnbuild-dep-manager** has a basic command-line interface that allows access\nto any method of the class. It can be invoked with:\n\n```bash\n$ python -m cmmnbuild_dep_manager METHOD [ARG ...]\n```\n\nFor example, to register the packages `pytimber` and `pyjapc` you could run:\n\n```bash\n$ python -m cmmnbuild_dep_manager register pytimber pyjapc\npytimber\npyjapc\n```\n\nWhich is equivalent to the following Python code:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> mgr.register('pytimber', 'pyjapc')\n('pytimber', 'pyjapc')\n```\n\nYou can also see from this example that the return value is automatically\nsplit to one list item per line.\n\n### Manually installing a package\n\nIn certain circumstances during development it can be useful to manipulate the\ncmmnbuild_dep_manager manager directly. For example, manual installation of\na package can be achieved with:\n\n```python\n>>> mgr = cmmnbuild_dep_manager.Manager()\n>>> mgr.install('pyjapc')\n```\n\nThe `install()` function registers the package and resolves the dependencies\nautomatically. It was previously recommended that this be done as part of the\nsetup.py, but Python's move away from code execution at installation and\ntowards a non-executable binary wheel format means that the declarative\n`entry_points` solution is now strongly recommended.\n\n\n### Dealing with read-only Python installations\n\nFor a typical installation, **cmmnbuild-dep-manager** downloads jars into a\nsubdirectory of the global site-packages and this process happens when a\npackage is installed. However, in some situations, the global\nsite-packages is not writeable by the user (e.g. in a centrally managed\ndistribution, such as [SWAN]). In this case, jars can be downloaded to each\n[user's local site-packages][PEP 370] instead.\n\nTo facilitate this, a package can automatically install itself by setting an\noptional parameter of its `Manager()` instance. For example:\n\n```python\nclass PyJapc:\n    def __init__(self, ...):\n        ...\n        mgr = cmmnbuild_dep_manager.Manager('pyjapc')\n        mgr.start_jpype_jvm()\n        ...\n```\n\nThen the user executing:\n\n```python\n>>> import pyjapc\n>>> japc = pyjapc.PyJapc()\n```\n\nwill cause the jars to be downloaded if they aren't already existing on disk\nor if the version of PyJapc has changed.\n\n[SWAN]:    http://swan.web.cern.ch/\n[PEP 370]: https://www.python.org/dev/peps/pep-0370/\n\n## Usage outside of CERN\nFor deployments outside of the CERN network, packages should implement the variable\n```__gradle_deps__``` in their `__init__.py` containing a list of the required dependencies.\nIn this case, **cmmnbuild-dep-manager** will use Gradle to query public Java product repositories:\nMaven Central and JCenter.\n\nNote that ```__cmmnbuild_deps__``` (see above) will be used within CERN and ```__gradle_deps__```\noutside of CERN. Packages used in both scenarios must implement both variables, and ensure \nconsistency within the two.\n\n```python\n__cmmnbuild_deps__ = [\n    \"accmodel-jmad-core\",\n    \"accmodel-jmad-models-lhc\",\n    \"accmodel-jmad-models-gsi\",\n    \"accmodel-jmad-models-lhctransfer\",\n    \"accsoft-steering-commons\",\n    \"accmodel-jmad-gui\",\n    \"slf4j-log4j12\",\n    \"slf4j-api\",\n    \"log4j\"\n]\n\n__gradle_deps__ = [\n    \"jmad:jmad-core:+\",\n    \"org.slf4j:slf4j-api:+\",\n    \"org.slf4j:slf4j-log4j12:+\",\n    \"log4j:log4j:1.2.17\",\n]\n```\n\nFor ```__gradle_deps__```, the list should consist of strings in the Gradle syntax\n`groupId:artifactId:version`, or a dictionary with keys `groupId`, `product` and\n`version`.\n\n## More information\n\nFor more information or to report problems, please contact\n[P. Elson via the Acc-Py support mailing-list](mailto:acc-py-support@cern.ch).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.cern.ch/scripting-tools/cmmnbuild-dep-manager", "keywords": "", "license": "MIT", "maintainer": "CERN Accelerating Python", "maintainer_email": "acc-py-support@cern.ch", "name": "cmmnbuild-dep-manager", "package_url": "https://pypi.org/project/cmmnbuild-dep-manager/", "platform": "", "project_url": "https://pypi.org/project/cmmnbuild-dep-manager/", "project_urls": {"Homepage": "https://gitlab.cern.ch/scripting-tools/cmmnbuild-dep-manager"}, "release_url": "https://pypi.org/project/cmmnbuild-dep-manager/2.4.0/", "requires_dist": ["entrypoints", "JPype1 (>=0.6.1)", "requests", "six", "entrypoints ; extra == 'all'", "JPype1 (>=0.6.1) ; extra == 'all'", "requests ; extra == 'all'", "six ; extra == 'all'", "pytest ; extra == 'all'", "entrypoints ; extra == 'core'", "JPype1 (>=0.6.1) ; extra == 'core'", "requests ; extra == 'core'", "six ; extra == 'core'", "pytest ; extra == 'dev'", "pytest ; extra == 'test'"], "requires_python": ">=3.6, <4", "summary": "Manages CERN's Java dependencies across multiple Python packages", "version": "2.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CommonBuild Dependency Manager</h1>\n<p><em>A module to manage Java dependencies across multiple Python packages.</em></p>\n<h2>Introduction</h2>\n<p>When using multiple packages (<a href=\"https://gitlab.cern.ch/scripting-tools/pyjapc\" rel=\"nofollow\">PyJapc</a>, <a href=\"https://github.com/rdemaria/pytimber\" rel=\"nofollow\">PyTimber</a>, etc) inside a single\nscript, they must share a single JVM instance. This means that the required\njars for <em>all</em> packages must be added to the class path of the JVM that is\nstarted by the first instantiated package.</p>\n<p><strong>cmmnbuild-dep-manager</strong> provides a simple way to get a single list of jars\nfor all installed packages. As packages are added/removed it automatically\nresolves and downloads the required jar files using the <a href=\"https://wikis.cern.ch/display/DVTLS/CBNG+Web+service\" rel=\"nofollow\">CBNG web service</a>\n(within the CERN network) or Gradle (in a public network).</p>\n<h2>Usage</h2>\n<p>Packages should implement the variable <code>__cmmnbuild_deps__</code> in their\n<code>__init__.py</code> containing a list of the required dependencies, for example:</p>\n<pre><span class=\"n\">__cmmnbuild_deps__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'japc'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'japc-value'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'japc-ext-cmwrda'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'japc-ext-cmwrda3'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'japc-ext-dirservice'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'inca-client'</span><span class=\"p\">,</span>   <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'PRO'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'slf4j-log4j12'</span><span class=\"p\">,</span> <span class=\"s1\">'local'</span><span class=\"p\">:</span>   <span class=\"s1\">'true'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'slf4j-api'</span><span class=\"p\">,</span>     <span class=\"s1\">'local'</span><span class=\"p\">:</span>   <span class=\"s1\">'true'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'product'</span><span class=\"p\">:</span> <span class=\"s1\">'log4j'</span><span class=\"p\">,</span>         <span class=\"s1\">'local'</span><span class=\"p\">:</span>   <span class=\"s1\">'true'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Each item in the list can be either a string containing the product name,\nor a dictionary with keys matching the CBNG <code>product.xml</code> file\n(<a href=\"https://wikis.cern.ch/display/DVTLS/CBNG+-+product.xml\" rel=\"nofollow\">more info</a>).</p>\n<p>With the variable in place, packages can be registered with\n<strong>cmmnbuild-dep-manager</strong>. Registration is automatic if your package defines\nan entry_point of the form\n<code>\"cmmnbuild_dep_manager\": {package_name}={package_version}</code>.\nFor example, PyJapc might have an item in its setup.py such as:</p>\n<pre><code>entry_points={\n    # Register with cmmnbuild_dep_manager.\n    'cmmnbuild_dep_manager': ['pyjapc=2.3.1'],\n},\n</code></pre>\n<p>Finally, from your code, you can start a JVM with the complete list of jars\nusing:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jpype</span> <span class=\"o\">=</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">start_jpype_jvm</span><span class=\"p\">()</span>\n</pre>\n<p>At this stage, JPype is ready to use.</p>\n<h2>Advanced usage</h2>\n<h3>Re-downloading jars</h3>\n<p>The jars can be resolved and re-downloaded at any time by running the following\nshell command:</p>\n<pre>$ python -m cmmnbuild_dep_manager resolve\n</pre>\n<h3>Jar inspection helper functions</h3>\n<p>Helper functions are provided to inspect the classes in the downloaded jars.</p>\n<h4>class_list()</h4>\n<p>Provides a listing of all classes contained within the jars:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">class_list</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'cern.accsoft.cals.extr.client.commandline.CommandLineException'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.accsoft.cals.extr.client.commandline.CommandLineServiceBuilder'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.accsoft.cals.extr.client.commandline.CommandMethod'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.accsoft.cals.extr.client.commandline.CommandOption'</span><span class=\"p\">,</span>\n <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<h4>class_search()</h4>\n<p>Search for any class by name:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">class_search</span><span class=\"p\">(</span><span class=\"s1\">'ServiceBuilder'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'cern.accsoft.cals.extr.client.commandline.CommandLineServiceBuilder'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.accsoft.cals.extr.client.service.ServiceBuilder'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.cmw.rda3.client.service.ClientServiceBuilder'</span><span class=\"p\">,</span>\n <span class=\"s1\">'cern.cmw.rda3.impl.client.service.ClientServiceBuilderImpl'</span><span class=\"p\">]</span>\n</pre>\n<h4>class_hints()</h4>\n<p>Provide a pasteable example of how to use a specific class from Python:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">class_hints</span><span class=\"p\">(</span><span class=\"s1\">'cern.accsoft.cals.extr.client.service.ServiceBuilder'</span><span class=\"p\">)</span>\n<span class=\"n\">cern</span> <span class=\"o\">=</span> <span class=\"n\">jpype</span><span class=\"o\">.</span><span class=\"n\">JPackage</span><span class=\"p\">(</span><span class=\"s1\">'cern'</span><span class=\"p\">)</span>\n<span class=\"n\">ServiceBuilder</span> <span class=\"o\">=</span> <span class=\"n\">cern</span><span class=\"o\">.</span><span class=\"n\">accsoft</span><span class=\"o\">.</span><span class=\"n\">cals</span><span class=\"o\">.</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">ServiceBuilder</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jpype</span> <span class=\"o\">=</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">start_jpype_jvm</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cern</span> <span class=\"o\">=</span> <span class=\"n\">jpype</span><span class=\"o\">.</span><span class=\"n\">JPackage</span><span class=\"p\">(</span><span class=\"s1\">'cern'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ServiceBuilder</span> <span class=\"o\">=</span> <span class=\"n\">cern</span><span class=\"o\">.</span><span class=\"n\">accsoft</span><span class=\"o\">.</span><span class=\"n\">cals</span><span class=\"o\">.</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">ServiceBuilder</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ServiceBuilder</span>\n<span class=\"n\">jpype</span><span class=\"o\">.</span><span class=\"n\">_jclass</span><span class=\"o\">.</span><span class=\"n\">cern</span><span class=\"o\">.</span><span class=\"n\">accsoft</span><span class=\"o\">.</span><span class=\"n\">cals</span><span class=\"o\">.</span><span class=\"n\">extr</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">ServiceBuilder</span>\n</pre>\n<h3>Command-line interface</h3>\n<p><strong>cmmnbuild-dep-manager</strong> has a basic command-line interface that allows access\nto any method of the class. It can be invoked with:</p>\n<pre>$ python -m cmmnbuild_dep_manager METHOD <span class=\"o\">[</span>ARG ...<span class=\"o\">]</span>\n</pre>\n<p>For example, to register the packages <code>pytimber</code> and <code>pyjapc</code> you could run:</p>\n<pre>$ python -m cmmnbuild_dep_manager register pytimber pyjapc\npytimber\npyjapc\n</pre>\n<p>Which is equivalent to the following Python code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'pytimber'</span><span class=\"p\">,</span> <span class=\"s1\">'pyjapc'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'pytimber'</span><span class=\"p\">,</span> <span class=\"s1\">'pyjapc'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also see from this example that the return value is automatically\nsplit to one list item per line.</p>\n<h3>Manually installing a package</h3>\n<p>In certain circumstances during development it can be useful to manipulate the\ncmmnbuild_dep_manager manager directly. For example, manual installation of\na package can be achieved with:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'pyjapc'</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>install()</code> function registers the package and resolves the dependencies\nautomatically. It was previously recommended that this be done as part of the\nsetup.py, but Python's move away from code execution at installation and\ntowards a non-executable binary wheel format means that the declarative\n<code>entry_points</code> solution is now strongly recommended.</p>\n<h3>Dealing with read-only Python installations</h3>\n<p>For a typical installation, <strong>cmmnbuild-dep-manager</strong> downloads jars into a\nsubdirectory of the global site-packages and this process happens when a\npackage is installed. However, in some situations, the global\nsite-packages is not writeable by the user (e.g. in a centrally managed\ndistribution, such as <a href=\"http://swan.web.cern.ch/\" rel=\"nofollow\">SWAN</a>). In this case, jars can be downloaded to each\n<a href=\"https://www.python.org/dev/peps/pep-0370/\" rel=\"nofollow\">user's local site-packages</a> instead.</p>\n<p>To facilitate this, a package can automatically install itself by setting an\noptional parameter of its <code>Manager()</code> instance. For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PyJapc</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">mgr</span> <span class=\"o\">=</span> <span class=\"n\">cmmnbuild_dep_manager</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">(</span><span class=\"s1\">'pyjapc'</span><span class=\"p\">)</span>\n        <span class=\"n\">mgr</span><span class=\"o\">.</span><span class=\"n\">start_jpype_jvm</span><span class=\"p\">()</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>Then the user executing:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyjapc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">japc</span> <span class=\"o\">=</span> <span class=\"n\">pyjapc</span><span class=\"o\">.</span><span class=\"n\">PyJapc</span><span class=\"p\">()</span>\n</pre>\n<p>will cause the jars to be downloaded if they aren't already existing on disk\nor if the version of PyJapc has changed.</p>\n<h2>Usage outside of CERN</h2>\n<p>For deployments outside of the CERN network, packages should implement the variable\n<code>__gradle_deps__</code> in their <code>__init__.py</code> containing a list of the required dependencies.\nIn this case, <strong>cmmnbuild-dep-manager</strong> will use Gradle to query public Java product repositories:\nMaven Central and JCenter.</p>\n<p>Note that <code>__cmmnbuild_deps__</code> (see above) will be used within CERN and <code>__gradle_deps__</code>\noutside of CERN. Packages used in both scenarios must implement both variables, and ensure\nconsistency within the two.</p>\n<pre><span class=\"n\">__cmmnbuild_deps__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"accmodel-jmad-core\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"accmodel-jmad-models-lhc\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"accmodel-jmad-models-gsi\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"accmodel-jmad-models-lhctransfer\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"accsoft-steering-commons\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"accmodel-jmad-gui\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"slf4j-log4j12\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"slf4j-api\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"log4j\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">__gradle_deps__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">\"jmad:jmad-core:+\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"org.slf4j:slf4j-api:+\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"org.slf4j:slf4j-log4j12:+\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"log4j:log4j:1.2.17\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>For <code>__gradle_deps__</code>, the list should consist of strings in the Gradle syntax\n<code>groupId:artifactId:version</code>, or a dictionary with keys <code>groupId</code>, <code>product</code> and\n<code>version</code>.</p>\n<h2>More information</h2>\n<p>For more information or to report problems, please contact\n<a href=\"mailto:acc-py-support@cern.ch\">P. Elson via the Acc-Py support mailing-list</a>.</p>\n\n          </div>"}, "last_serial": 6756204, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "543073bfea233ee6b829b6ec55d01319", "sha256": "1779e54a5f1d90ab3579655436ec0002fa6fb7a97a352593b3d1439da11598f7"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "543073bfea233ee6b829b6ec55d01319", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7393, "upload_time": "2017-02-18T09:56:27", "upload_time_iso_8601": "2017-02-18T09:56:27.212785Z", "url": "https://files.pythonhosted.org/packages/85/1c/8ffc6f827280dcf81a300d3993b2f2c83525fc0aadad74b0eefdd6cea6a5/cmmnbuild_dep_manager-2.0.0-py2.py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "8f9918015d5661000afd9a939e7911e2", "sha256": "17d31174eaacae473a41141af70eac2426ce4de425addaf9be09b286a028d9a3"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8f9918015d5661000afd9a939e7911e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7803, "upload_time": "2017-02-18T15:02:49", "upload_time_iso_8601": "2017-02-18T15:02:49.870964Z", "url": "https://files.pythonhosted.org/packages/d3/06/be824c6e3e9ac900eaa9b5ed6dfdf8d7a3e9b87e1dcf411f77558634fd3b/cmmnbuild_dep_manager-2.0.1-py2.py3-none-any.whl", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "a572f85814e037f4c7958c53cb069679", "sha256": "3af84424f86f0add22d84267ca142030b6cb4d2615f417e2f232c99e9e0d4f06"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a572f85814e037f4c7958c53cb069679", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7808, "upload_time": "2017-02-18T15:12:24", "upload_time_iso_8601": "2017-02-18T15:12:24.017620Z", "url": "https://files.pythonhosted.org/packages/12/1d/ed0764f067ba7aa9eedda07ba940ff263d4d42d00ab5bdae8a9b10b8817d/cmmnbuild_dep_manager-2.0.2-py2.py3-none-any.whl", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "af18f4bfd53efcc6b460fbc080950ac3", "sha256": "b163ec19ff29c27a9090c6a7ac5316eece946ff379795a4e40df040d9c01a27e"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "af18f4bfd53efcc6b460fbc080950ac3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7874, "upload_time": "2017-02-18T16:59:10", "upload_time_iso_8601": "2017-02-18T16:59:10.023878Z", "url": "https://files.pythonhosted.org/packages/0e/b0/02cc8166e54a60cac9e0cf609a1124b1e38a5bea4b9fea17d7a55e3c520f/cmmnbuild_dep_manager-2.0.3-py2.py3-none-any.whl", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "b046f21ccd88c89c1b4f918643fd98a3", "sha256": "eb4f85faad394f0aa34e3e0c3b409bc1775655f3cf939d86cdb300c5465dc934"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b046f21ccd88c89c1b4f918643fd98a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7880, "upload_time": "2017-03-13T18:11:05", "upload_time_iso_8601": "2017-03-13T18:11:05.682832Z", "url": "https://files.pythonhosted.org/packages/ba/cd/2a2b3795874be85213b2d690ad3ff4b4e0c6bcddb49a12e2cb067f6ced33/cmmnbuild_dep_manager-2.0.4-py2.py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "1147e6621b645fd3a6ff333e5bff9786", "sha256": "101e32b96f3c673d93ba6e60005d9c8e0d38a445e1ca4f77c915e9a5e6959395"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1147e6621b645fd3a6ff333e5bff9786", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7986, "upload_time": "2017-03-23T13:38:02", "upload_time_iso_8601": "2017-03-23T13:38:02.657771Z", "url": "https://files.pythonhosted.org/packages/ca/44/00f01b683704071487b5ea22fdd02dae8891747daf3ec2c1a585d35e93b9/cmmnbuild_dep_manager-2.1.0-py2.py3-none-any.whl", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "f96cc898b9e83a0cf3027148d150b6b3", "sha256": "3fc8d11d6336875a9542241ccba08face423b7076ced7dd301b3ab4b4847ddcb"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f96cc898b9e83a0cf3027148d150b6b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8320, "upload_time": "2017-03-26T08:30:49", "upload_time_iso_8601": "2017-03-26T08:30:49.322475Z", "url": "https://files.pythonhosted.org/packages/cb/d6/5d4c0bccdb4311816f0668b35e4d73c913d7313e381516a115514ecba6b9/cmmnbuild_dep_manager-2.1.1-py2.py3-none-any.whl", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "1c3d6f631c98e1968c6564fa61afbd66", "sha256": "4509d4ca0676e38d01bf00e43692bf1decbcc3d6e4e712787717d80c83099bc7"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c3d6f631c98e1968c6564fa61afbd66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8372, "upload_time": "2017-07-05T15:16:23", "upload_time_iso_8601": "2017-07-05T15:16:23.702077Z", "url": "https://files.pythonhosted.org/packages/4f/37/a7d5e9209dee06bcea765122de5901e8a2d9c52b0b6eb5f2b1682ef7ca48/cmmnbuild_dep_manager-2.1.2-py2.py3-none-any.whl", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "2dbaab80cb43376500ccfd38d121f612", "sha256": "a27acb9feb79cdb25bd69851529e0af9b5d80db73844e6a472989e65955a34e4"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dbaab80cb43376500ccfd38d121f612", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8971, "upload_time": "2017-12-08T10:29:28", "upload_time_iso_8601": "2017-12-08T10:29:28.245401Z", "url": "https://files.pythonhosted.org/packages/04/fa/d171d30c7c96ac626a76c5750a30bf0a05150644c6e24d02f38e877b4e11/cmmnbuild_dep_manager-2.1.3-py2.py3-none-any.whl", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "576718e139bf0a1b7ca51d003572f54d", "sha256": "97bb1a1dabb27e312b517d6579d8f88e02560a5a828751b451504101e58c3808"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "576718e139bf0a1b7ca51d003572f54d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65107, "upload_time": "2018-07-02T09:08:06", "upload_time_iso_8601": "2018-07-02T09:08:06.398830Z", "url": "https://files.pythonhosted.org/packages/b4/5a/90406f360665c4230c9ff7de665852c793234ced694e0ec46c88af163ac2/cmmnbuild_dep_manager-2.2.2-py2.py3-none-any.whl", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "eecf0f593b64b2b0b13bd8f30cc98db0", "sha256": "738599ee74d763d909022a2378b70995d7f4df37d99088a9885b54bd6138ecf6"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eecf0f593b64b2b0b13bd8f30cc98db0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 65613, "upload_time": "2019-04-24T14:14:02", "upload_time_iso_8601": "2019-04-24T14:14:02.606773Z", "url": "https://files.pythonhosted.org/packages/a4/fb/5ae96df042607b1d47a928021d669931e0953158fc90fc6326f091f2f485/cmmnbuild_dep_manager-2.2.4-py2.py3-none-any.whl", "yanked": false}], "2.2.5": [{"comment_text": "", "digests": {"md5": "4f317e7c3f275d8b0303b874049218a8", "sha256": "c92f6c84b861843a3edd6c3b386e7200589345cf61e9f47cc151e3872c54b7af"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4f317e7c3f275d8b0303b874049218a8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64885, "upload_time": "2019-10-21T15:53:19", "upload_time_iso_8601": "2019-10-21T15:53:19.664764Z", "url": "https://files.pythonhosted.org/packages/6c/35/0cf10f7b86a71e6555468aff32c5dd75cbf6736889f0c5c16959d250b34a/cmmnbuild_dep_manager-2.2.5-py2.py3-none-any.whl", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "b54e2c72b3ad94a2ad24d7d5f5a21e2c", "sha256": "bac251790f31c98760f6b2e7a69e80d5b985c9573b7aa822dfe028b4c57bac4b"}, "downloads": -1, "filename": "cmmnbuild-dep-manager-2.3.1.tar.gz", "has_sig": false, "md5_digest": "b54e2c72b3ad94a2ad24d7d5f5a21e2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11669, "upload_time": "2020-01-20T13:37:38", "upload_time_iso_8601": "2020-01-20T13:37:38.894809Z", "url": "https://files.pythonhosted.org/packages/39/9a/4a5049a716626b5ded4a6733c6f88470547d7ed5cd5d05a82d20cb3104a9/cmmnbuild-dep-manager-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "105342b90b8675398c181ca34558ca80", "sha256": "209c4afe27b191383b9b47aa47c1a8d8700de1fe8bb3fd8d1e4304f31e48e252"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "105342b90b8675398c181ca34558ca80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 72938, "upload_time": "2020-03-05T16:45:38", "upload_time_iso_8601": "2020-03-05T16:45:38.354131Z", "url": "https://files.pythonhosted.org/packages/a0/06/a003cdc75e13824903b8a31142921bbee972d5fad9c2ec63ed5810125426/cmmnbuild_dep_manager-2.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "105342b90b8675398c181ca34558ca80", "sha256": "209c4afe27b191383b9b47aa47c1a8d8700de1fe8bb3fd8d1e4304f31e48e252"}, "downloads": -1, "filename": "cmmnbuild_dep_manager-2.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "105342b90b8675398c181ca34558ca80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 72938, "upload_time": "2020-03-05T16:45:38", "upload_time_iso_8601": "2020-03-05T16:45:38.354131Z", "url": "https://files.pythonhosted.org/packages/a0/06/a003cdc75e13824903b8a31142921bbee972d5fad9c2ec63ed5810125426/cmmnbuild_dep_manager-2.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:18:33 2020"}