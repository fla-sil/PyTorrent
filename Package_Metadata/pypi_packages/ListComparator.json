{"info": {"author": "Nicolas Laurance", "author_email": "nlaurance at zindep dot com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Filters", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": ".. contents::\n\nDetailed Documentation\n**********************\n\nXML and CSV comparisons\n=======================\n\nTwo scripts are provided xml_cmp and csv_cmp\nThey both compares 2 files and outputs delta as file_suppr,\nfile_addon and file_changes\n\nthe extension is forced to xml or csv respectively\n\nList comparison\n===============\n\nlistcomparator provides a Comparator object that allows to find the differences\nbetween two lists **provided the elements of the lists appear in the same order**\n\n>>> old = [1, 2, 3, 4, 5, 6]\n>>> new = [1, 3, 4, 7, 6]\n\n>>> from listcomparator.comparator import Comparator\n\nLet's create a Comparator object\n\n>>> comp = Comparator(old,new)\n\nThe check method gives values to additions and deletions attributes\n\n>>> comp.check()\n>>> comp.additions\n[7]\n>>> comp.deletions\n[2, 5]\n\nWe can also use lists of  lists\n\n>>> old_list = [['62145', 'azerty'], ['1234', 'qwerty'], ['9876', 'ipsum']]\n>>> new_list = [['62145', 'azerty'], ['1234', 'qwertw'], ['4865', 'lorem']]\n>>> comp = Comparator(old_list, new_list)\n>>> comp.check()\n>>> comp.additions\n[['1234', 'qwertw'], ['4865', 'lorem']]\n>>> comp.deletions\n[['1234', 'qwerty'], ['9876', 'ipsum']]\n\nWe can have an issue when a modification, in our case \"qwerty\" became \"qwertz\",\nappears in both outputs, comp.additions and comp.deletions.\nYou  might want to consider this a change.\nComparator can handle this and filter out such cases if you provide a function\nthat tells Comparator how to recognize such cases\nIn our example, we consider 2 elements to be the same if the first element of the\nlist is the same, a kind of id.\n\n>>> def my_key(x):\n...     return x[0]\n...\n\nThe getChanges methods then provides a new attribute : changes\n\n>>> comp.getChanges(my_key)\n>>> comp.changes\n[['1234', 'qwertw']]\n\nof course, additions and deletions stay unchanged\n\n>>> comp.additions\n[['1234', 'qwertw'], ['4865', 'lorem']]\n>>> comp.deletions\n[['1234', 'qwerty'], ['9876', 'ipsum']]\n\nYou might want to consider only 'pure' additions and deletions\ngetChanges allows for a keyword argument 'purge' that does just that\n\n>>> comp.getChanges(my_key, purge=True)\n>>> comp.changes\n[['1234', 'qwertw']]\n>>> comp.additions\n[['4865', 'lorem']]\n>>> comp.deletions\n[['9876', 'ipsum']]\n\nThe old and new attributes store the lists to be compared\nyou might want to reset those, Comparator provides a purgeOldNew method\nto clear up memory\n\n>>> comp.old\n[['62145', 'azerty'], ['1234', 'qwerty'], ['9876', 'ipsum']]\n>>> comp.new\n[['62145', 'azerty'], ['1234', 'qwertw'], ['4865', 'lorem']]\n>>> comp.purgeOldNew()\n>>> comp.old\n>>> comp.new\n\n\ncompare XML files\n=================\n\nComparator can be used to compare xml files\nlet's make two xml files describing books\n\n>>> old='''<?xml version=\"1.0\" ?>\n... <infos>\n... <book><title>White pages 1995</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Paris</title>\n... <para>ABEL Antoine 82 23 44 12</para>\n... <para>ABEL Pierre 82 67 23 12</para>\n... </chapter>\n... </book>\n... <book><title>Yellow pages 2007</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Bretagne</title>\n... <para>Zindep 82 23 44 12</para>\n... <para>ZYM 82 67 23 12</para>\n... </chapter>\n... </book>\n... <book><title>Dark pages 2007</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Greves</title>\n... <para>SNCF 82 23 44 12</para>\n... </chapter>\n... </book>\n... </infos>\n... '''\n\n>>> new='''<?xml version=\"1.0\"?>\n... <infos>\n... <book><title>White pages 1995</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Paris</title>\n... <para>ABIL Antoine 82 23 44 12</para>\n... <para>ABEL Pierre 82 67 23 12</para>\n... </chapter>\n... </book>\n... <book><title>Yellow pages 2007</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Bretagne</title>\n... <para>Zindep 82 23 44 12</para>\n... <para>ZYM 82 67 23 12</para>\n... </chapter>\n... </book>\n... <book><title>Blue pages 2007</title>\n... <author>\n... <surname>La Poste</surname>\n... </author>\n... <chapter><title>Bretagne</title>\n... <para>Mer 82 23 44 12</para>\n... <para>Ciel 82 67 23 12</para>\n... </chapter>\n... </book>\n... </infos>\n... '''\n\nelementtree is required to parse xml\n\n>>> from elementtree import ElementTree as ET\n\nfor this test we'll use cStringIO rather than a file\n\n>>> import cStringIO\n>>> ex_old = cStringIO.StringIO(old)\n>>> ex_new = cStringIO.StringIO(new)\n\nwe parse contents\n\n>>> root_old = ET.parse(ex_old).getroot()\n>>> root_new = ET.parse(ex_new).getroot()\n\nthe \"book\" tag identifies objects we want\n>>> objects_old = root_old.findall('book')\n>>> objects_new = root_new.findall('book')\n\nas we can't compare 2 objects, we stringify them\n\n>>> objects_old = [ET.tostring(o) for o in objects_old]\n>>> objects_new = [ET.tostring(o) for o in objects_new]\n\nfrom there, Comparator is usefull\n\n>>> my_comp = Comparator(objects_old, objects_new)\n>>> my_comp.check()\n\n>>> for e in my_comp.additions:\n...     print e\n...\n<book><title>White pages 1995</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Paris</title>\n<para>ABIL Antoine 82 23 44 12</para>\n<para>ABEL Pierre 82 67 23 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n<book><title>Blue pages 2007</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Bretagne</title>\n<para>Mer 82 23 44 12</para>\n<para>Ciel 82 67 23 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n\n>>> for e in my_comp.deletions:\n...     print e\n...\n<book><title>White pages 1995</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Paris</title>\n<para>ABEL Antoine 82 23 44 12</para>\n<para>ABEL Pierre 82 67 23 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n<book><title>Dark pages 2007</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Greves</title>\n<para>SNCF 82 23 44 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n\nwe need to know wich tag is used to uniquely define an object\nhere we choose to use the \"title\" tag\n\n>>> def item_signature(xml_element):\n...     title = xml_element.find('title')\n...     return title.text\n...\n\nwe build our custom function for use by the Comparator\n\n>>> def my_key(str):\n...     file_like = cStringIO.StringIO(str)\n...     root = ET.parse(file_like)\n...     return item_signature(root)\n...\n\nthen the getChanges method of the Comparator becomes available\n\n>>> my_comp.getChanges(my_key, purge=True)\n\nWhat books have been exclusively added ?\n\n>>> for e in my_comp.additions:\n...     print e\n...\n<book><title>Blue pages 2007</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Bretagne</title>\n<para>Mer 82 23 44 12</para>\n<para>Ciel 82 67 23 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n\nwhat books have been exclusively removed ?\n\n>>> for e in my_comp.deletions:\n...     print e\n...\n<book><title>Dark pages 2007</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Greves</title>\n<para>SNCF 82 23 44 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n\nwhat books have changed ? that is have same title, but different other values\n\n>>> for e in my_comp.changes:\n...     print e\n...\n<book><title>White pages 1995</title>\n<author>\n<surname>La Poste</surname>\n</author>\n<chapter><title>Paris</title>\n<para>ABIL Antoine 82 23 44 12</para>\n<para>ABEL Pierre 82 67 23 12</para>\n</chapter>\n</book>\n<BLANKLINE>\n\n\nthen we can put those results back in xml file\n\n* This code conforms to PEP8\n* It is fully tested, 100% coverage\n* A Buildbot runs tests at each commit\n\nContributors\n************\n\n\nMain developpers\n================\n\n* Nicolas Laurance <nlaurance at zindep dot com>\n\nwith contributions of\n---------------------\n\n* Yves Mahe <ymahe at zindep dot com>\n\n\nChange history\n**************\n\nNew in 0.1\n==========\n\nFirst Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/listcomparator/", "keywords": "xml csv list compare diff difference", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "ListComparator", "package_url": "https://pypi.org/project/ListComparator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ListComparator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/listcomparator/"}, "release_url": "https://pypi.org/project/ListComparator/0.1/", "requires_dist": null, "requires_python": null, "summary": "Compares ordered lists, xml and csv application", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#detailed-documentation\" id=\"id1\" rel=\"nofollow\">Detailed Documentation</a><ul>\n<li><a href=\"#xml-and-csv-comparisons\" id=\"id2\" rel=\"nofollow\">XML and CSV comparisons</a></li>\n<li><a href=\"#list-comparison\" id=\"id3\" rel=\"nofollow\">List comparison</a></li>\n<li><a href=\"#compare-xml-files\" id=\"id4\" rel=\"nofollow\">compare XML files</a></li>\n</ul>\n</li>\n<li><a href=\"#contributors\" id=\"id5\" rel=\"nofollow\">Contributors</a><ul>\n<li><a href=\"#with-contributions-of\" id=\"id6\" rel=\"nofollow\">with contributions of</a></li>\n</ul>\n</li>\n<li><a href=\"#change-history\" id=\"id7\" rel=\"nofollow\">Change history</a></li>\n</ul>\n</div>\n<div id=\"detailed-documentation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Detailed Documentation</a></h2>\n<div id=\"xml-and-csv-comparisons\">\n<h3><a href=\"#id2\" rel=\"nofollow\">XML and CSV comparisons</a></h3>\n<p>Two scripts are provided xml_cmp and csv_cmp\nThey both compares 2 files and outputs delta as file_suppr,\nfile_addon and file_changes</p>\n<p>the extension is forced to xml or csv respectively</p>\n</div>\n<div id=\"list-comparison\">\n<h3><a href=\"#id3\" rel=\"nofollow\">List comparison</a></h3>\n<p>listcomparator provides a Comparator object that allows to find the differences\nbetween two lists <strong>provided the elements of the lists appear in the same order</strong></p>\n<pre>&gt;&gt;&gt; old = [1, 2, 3, 4, 5, 6]\n&gt;&gt;&gt; new = [1, 3, 4, 7, 6]\n</pre>\n<pre>&gt;&gt;&gt; from listcomparator.comparator import Comparator\n</pre>\n<p>Let\u2019s create a Comparator object</p>\n<pre>&gt;&gt;&gt; comp = Comparator(old,new)\n</pre>\n<p>The check method gives values to additions and deletions attributes</p>\n<pre>&gt;&gt;&gt; comp.check()\n&gt;&gt;&gt; comp.additions\n[7]\n&gt;&gt;&gt; comp.deletions\n[2, 5]\n</pre>\n<p>We can also use lists of  lists</p>\n<pre>&gt;&gt;&gt; old_list = [['62145', 'azerty'], ['1234', 'qwerty'], ['9876', 'ipsum']]\n&gt;&gt;&gt; new_list = [['62145', 'azerty'], ['1234', 'qwertw'], ['4865', 'lorem']]\n&gt;&gt;&gt; comp = Comparator(old_list, new_list)\n&gt;&gt;&gt; comp.check()\n&gt;&gt;&gt; comp.additions\n[['1234', 'qwertw'], ['4865', 'lorem']]\n&gt;&gt;&gt; comp.deletions\n[['1234', 'qwerty'], ['9876', 'ipsum']]\n</pre>\n<p>We can have an issue when a modification, in our case \u201cqwerty\u201d became \u201cqwertz\u201d,\nappears in both outputs, comp.additions and comp.deletions.\nYou  might want to consider this a change.\nComparator can handle this and filter out such cases if you provide a function\nthat tells Comparator how to recognize such cases\nIn our example, we consider 2 elements to be the same if the first element of the\nlist is the same, a kind of id.</p>\n<pre>&gt;&gt;&gt; def my_key(x):\n...     return x[0]\n...\n</pre>\n<p>The getChanges methods then provides a new attribute : changes</p>\n<pre>&gt;&gt;&gt; comp.getChanges(my_key)\n&gt;&gt;&gt; comp.changes\n[['1234', 'qwertw']]\n</pre>\n<p>of course, additions and deletions stay unchanged</p>\n<pre>&gt;&gt;&gt; comp.additions\n[['1234', 'qwertw'], ['4865', 'lorem']]\n&gt;&gt;&gt; comp.deletions\n[['1234', 'qwerty'], ['9876', 'ipsum']]\n</pre>\n<p>You might want to consider only \u2018pure\u2019 additions and deletions\ngetChanges allows for a keyword argument \u2018purge\u2019 that does just that</p>\n<pre>&gt;&gt;&gt; comp.getChanges(my_key, purge=True)\n&gt;&gt;&gt; comp.changes\n[['1234', 'qwertw']]\n&gt;&gt;&gt; comp.additions\n[['4865', 'lorem']]\n&gt;&gt;&gt; comp.deletions\n[['9876', 'ipsum']]\n</pre>\n<p>The old and new attributes store the lists to be compared\nyou might want to reset those, Comparator provides a purgeOldNew method\nto clear up memory</p>\n<pre>&gt;&gt;&gt; comp.old\n[['62145', 'azerty'], ['1234', 'qwerty'], ['9876', 'ipsum']]\n&gt;&gt;&gt; comp.new\n[['62145', 'azerty'], ['1234', 'qwertw'], ['4865', 'lorem']]\n&gt;&gt;&gt; comp.purgeOldNew()\n&gt;&gt;&gt; comp.old\n&gt;&gt;&gt; comp.new\n</pre>\n</div>\n<div id=\"compare-xml-files\">\n<h3><a href=\"#id4\" rel=\"nofollow\">compare XML files</a></h3>\n<p>Comparator can be used to compare xml files\nlet\u2019s make two xml files describing books</p>\n<pre>&gt;&gt;&gt; old='''&lt;?xml version=\"1.0\" ?&gt;\n... &lt;infos&gt;\n... &lt;book&gt;&lt;title&gt;White pages 1995&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Paris&lt;/title&gt;\n... &lt;para&gt;ABEL Antoine 82 23 44 12&lt;/para&gt;\n... &lt;para&gt;ABEL Pierre 82 67 23 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;book&gt;&lt;title&gt;Yellow pages 2007&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Bretagne&lt;/title&gt;\n... &lt;para&gt;Zindep 82 23 44 12&lt;/para&gt;\n... &lt;para&gt;ZYM 82 67 23 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;book&gt;&lt;title&gt;Dark pages 2007&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Greves&lt;/title&gt;\n... &lt;para&gt;SNCF 82 23 44 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;/infos&gt;\n... '''\n</pre>\n<pre>&gt;&gt;&gt; new='''&lt;?xml version=\"1.0\"?&gt;\n... &lt;infos&gt;\n... &lt;book&gt;&lt;title&gt;White pages 1995&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Paris&lt;/title&gt;\n... &lt;para&gt;ABIL Antoine 82 23 44 12&lt;/para&gt;\n... &lt;para&gt;ABEL Pierre 82 67 23 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;book&gt;&lt;title&gt;Yellow pages 2007&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Bretagne&lt;/title&gt;\n... &lt;para&gt;Zindep 82 23 44 12&lt;/para&gt;\n... &lt;para&gt;ZYM 82 67 23 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;book&gt;&lt;title&gt;Blue pages 2007&lt;/title&gt;\n... &lt;author&gt;\n... &lt;surname&gt;La Poste&lt;/surname&gt;\n... &lt;/author&gt;\n... &lt;chapter&gt;&lt;title&gt;Bretagne&lt;/title&gt;\n... &lt;para&gt;Mer 82 23 44 12&lt;/para&gt;\n... &lt;para&gt;Ciel 82 67 23 12&lt;/para&gt;\n... &lt;/chapter&gt;\n... &lt;/book&gt;\n... &lt;/infos&gt;\n... '''\n</pre>\n<p>elementtree is required to parse xml</p>\n<pre>&gt;&gt;&gt; from elementtree import ElementTree as ET\n</pre>\n<p>for this test we\u2019ll use cStringIO rather than a file</p>\n<pre>&gt;&gt;&gt; import cStringIO\n&gt;&gt;&gt; ex_old = cStringIO.StringIO(old)\n&gt;&gt;&gt; ex_new = cStringIO.StringIO(new)\n</pre>\n<p>we parse contents</p>\n<pre>&gt;&gt;&gt; root_old = ET.parse(ex_old).getroot()\n&gt;&gt;&gt; root_new = ET.parse(ex_new).getroot()\n</pre>\n<p>the \u201cbook\u201d tag identifies objects we want\n&gt;&gt;&gt; objects_old = root_old.findall(\u2018book\u2019)\n&gt;&gt;&gt; objects_new = root_new.findall(\u2018book\u2019)</p>\n<p>as we can\u2019t compare 2 objects, we stringify them</p>\n<pre>&gt;&gt;&gt; objects_old = [ET.tostring(o) for o in objects_old]\n&gt;&gt;&gt; objects_new = [ET.tostring(o) for o in objects_new]\n</pre>\n<p>from there, Comparator is usefull</p>\n<pre>&gt;&gt;&gt; my_comp = Comparator(objects_old, objects_new)\n&gt;&gt;&gt; my_comp.check()\n</pre>\n<pre>&gt;&gt;&gt; for e in my_comp.additions:\n...     print e\n...\n&lt;book&gt;&lt;title&gt;White pages 1995&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Paris&lt;/title&gt;\n&lt;para&gt;ABIL Antoine 82 23 44 12&lt;/para&gt;\n&lt;para&gt;ABEL Pierre 82 67 23 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n&lt;book&gt;&lt;title&gt;Blue pages 2007&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Bretagne&lt;/title&gt;\n&lt;para&gt;Mer 82 23 44 12&lt;/para&gt;\n&lt;para&gt;Ciel 82 67 23 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<pre>&gt;&gt;&gt; for e in my_comp.deletions:\n...     print e\n...\n&lt;book&gt;&lt;title&gt;White pages 1995&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Paris&lt;/title&gt;\n&lt;para&gt;ABEL Antoine 82 23 44 12&lt;/para&gt;\n&lt;para&gt;ABEL Pierre 82 67 23 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n&lt;book&gt;&lt;title&gt;Dark pages 2007&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Greves&lt;/title&gt;\n&lt;para&gt;SNCF 82 23 44 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>we need to know wich tag is used to uniquely define an object\nhere we choose to use the \u201ctitle\u201d tag</p>\n<pre>&gt;&gt;&gt; def item_signature(xml_element):\n...     title = xml_element.find('title')\n...     return title.text\n...\n</pre>\n<p>we build our custom function for use by the Comparator</p>\n<pre>&gt;&gt;&gt; def my_key(str):\n...     file_like = cStringIO.StringIO(str)\n...     root = ET.parse(file_like)\n...     return item_signature(root)\n...\n</pre>\n<p>then the getChanges method of the Comparator becomes available</p>\n<pre>&gt;&gt;&gt; my_comp.getChanges(my_key, purge=True)\n</pre>\n<p>What books have been exclusively added ?</p>\n<pre>&gt;&gt;&gt; for e in my_comp.additions:\n...     print e\n...\n&lt;book&gt;&lt;title&gt;Blue pages 2007&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Bretagne&lt;/title&gt;\n&lt;para&gt;Mer 82 23 44 12&lt;/para&gt;\n&lt;para&gt;Ciel 82 67 23 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>what books have been exclusively removed ?</p>\n<pre>&gt;&gt;&gt; for e in my_comp.deletions:\n...     print e\n...\n&lt;book&gt;&lt;title&gt;Dark pages 2007&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Greves&lt;/title&gt;\n&lt;para&gt;SNCF 82 23 44 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>what books have changed ? that is have same title, but different other values</p>\n<pre>&gt;&gt;&gt; for e in my_comp.changes:\n...     print e\n...\n&lt;book&gt;&lt;title&gt;White pages 1995&lt;/title&gt;\n&lt;author&gt;\n&lt;surname&gt;La Poste&lt;/surname&gt;\n&lt;/author&gt;\n&lt;chapter&gt;&lt;title&gt;Paris&lt;/title&gt;\n&lt;para&gt;ABIL Antoine 82 23 44 12&lt;/para&gt;\n&lt;para&gt;ABEL Pierre 82 67 23 12&lt;/para&gt;\n&lt;/chapter&gt;\n&lt;/book&gt;\n&lt;BLANKLINE&gt;\n</pre>\n<p>then we can put those results back in xml file</p>\n<ul>\n<li>This code conforms to PEP8</li>\n<li>It is fully tested, 100% coverage</li>\n<li>A Buildbot runs tests at each commit</li>\n</ul>\n</div>\n</div>\n<div id=\"contributors\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Contributors</a></h2>\n<h2 id=\"main-developpers\"><span class=\"section-subtitle\">Main developpers</span></h2>\n<ul>\n<li>Nicolas Laurance &lt;nlaurance at zindep dot com&gt;</li>\n</ul>\n<div id=\"with-contributions-of\">\n<h3><a href=\"#id6\" rel=\"nofollow\">with contributions of</a></h3>\n<ul>\n<li>Yves Mahe &lt;ymahe at zindep dot com&gt;</li>\n</ul>\n</div>\n</div>\n<div id=\"change-history\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Change history</a></h2>\n<h2 id=\"new-in-0-1\"><span class=\"section-subtitle\">New in 0.1</span></h2>\n<p>First Release</p>\n</div>\n\n          </div>"}, "last_serial": 784630, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e8b3b57781101ab6eeeda7e9fb807e27", "sha256": "1b17dad959d0963261a8e8e08c06018329d413461d0f0facd77fb206b66074fb"}, "downloads": -1, "filename": "ListComparator-0.1.tar.gz", "has_sig": false, "md5_digest": "e8b3b57781101ab6eeeda7e9fb807e27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10897, "upload_time": "2009-12-13T19:26:59", "upload_time_iso_8601": "2009-12-13T19:26:59.228849Z", "url": "https://files.pythonhosted.org/packages/6e/c6/29c3bbc181c6b24dcfb8b46a76d66bf2c83f3802f727de727bbb41841688/ListComparator-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8b3b57781101ab6eeeda7e9fb807e27", "sha256": "1b17dad959d0963261a8e8e08c06018329d413461d0f0facd77fb206b66074fb"}, "downloads": -1, "filename": "ListComparator-0.1.tar.gz", "has_sig": false, "md5_digest": "e8b3b57781101ab6eeeda7e9fb807e27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10897, "upload_time": "2009-12-13T19:26:59", "upload_time_iso_8601": "2009-12-13T19:26:59.228849Z", "url": "https://files.pythonhosted.org/packages/6e/c6/29c3bbc181c6b24dcfb8b46a76d66bf2c83f3802f727de727bbb41841688/ListComparator-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:18 2020"}