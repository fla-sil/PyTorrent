{"info": {"author": "Alexander Oblovatniy", "author_email": "oblovatniy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "verboselib\n==========\n\n|Build Status| |Coverage Status| |PyPi package| |PyPi downloads|\n\nA little L10N framework for Python libraries and applications.\n\n**Table of contents**\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n\nKey points\n----------\n\n``verboselib`` can help you to add verbosity to stand-alone libraries or\napplications. This includes:\n\n- support of usual and lazy translatable messages;\n- support of setting and disabling current active language at runtime for\n  current thread globally;\n- tools to help you to update and compile catalogs of translations.\n\nIn short, all this looks like `translation in Django`_, but without Django.\n\n    A samurai without a sword is like a samurai with one, but only without one.\n\n\nInstallation\n------------\n\nInstall from `PyPI <https://pypi.python.org/pypi/verboselib>`_:\n\n.. code-block:: bash\n\n  $ pip install verboselib\n\n\nAPI overview\n------------\n\nHere's a quick usage example:\n\n.. code-block:: python\n\n  >>> from verboselib import use_language\n  >>> from verboselib.factory import TranslationsFactory\n\n  >>> translations = TranslationsFactory(domain=\"example\", locale_dir=\"locale\")\n  >>> _ = translations.ugettext_lazy\n\n  >>> message = _(\"Hi there!\")\n  >>> use_language('en')\n  >>> print(message)\n  'Hi there!'\n  >>> use_language('sv')\n  >>> print(message)\n  'Hej d\u00e4r!'\n\n\nTranslationsFactory\n^^^^^^^^^^^^^^^^^^^\n\nThe key point here is usage of an instance of a ``TranslationsFactory`` class\ncalled ``translations``. You need to use its methods to make translatable\nmessages. This is done to make sure your translations are really initialized,\nthat they are initialized only once and stored in a single place only.\n\n    **TIP**: instantiate ``TranslationsFactory`` at some convenient place\n    (e.g. top-level ``__init__.py``, ``utils.py``, ``translations.py`` or any\n    other place you like). Then you will be able to import that instance from\n    any other module, e.g.:\n\n    .. code-block:: python\n\n        from .utils import translations\n\nTo create an instance of a ``TranslationsFactory`` class you need to tell a\n``domain`` name and path to directory, where your translation catalogs are\nstored (``locale_dir``).\n\n    **TIP**: to keep things simple you can\n\n    1. set domain name same as the name of your library, application or just\n       a package;\n    2. place ``locale_dir`` at the top level of your package;\n\n..\n\n    **STRONG RECOMMENDATION**: tell the absolute path of your ``locale_dir``\n    while instantiating your translations. This is especially vital if you are\n    going to distribute a public library. Example:\n\n    .. code-block:: python\n\n      # Example '__init__.py'\n\n      import os\n      from verboselib.factory import TranslationsFactory\n\n\n      here = os.path.abspath(os.path.dirname(__file__))\n      locale_dir = os.path.join(here, \"locale\")\n      translations = TranslationsFactory(\"example\", locale_dir)\n\nSo, you want to get your translated messages. There some way to do that. List\nof currently supported methods includes:\n\n- ``gettext`` - get a localized translation of message, based on the global\n  language in current thread;\n- ``ugettext`` - same as ``gettext``, but returns translated message as a\n  Unicode string (equal to ``gettext`` for Python 3);\n- ``gettext_lazy`` - get a lazy translation of message, will be evaluated in\n  future accordingly to the global language in current thread;\n- ``ugettext_lazy`` same as ``gettext_lazy``, but returns evaluated message as a\n  Unicode string (equal to ``gettext_lazy`` for Python 3);\n\n..\n\n    **TIP**: Don't be afraid to use different aliases for different translation\n    methods, e.g.:\n\n    .. code-block:: python\n\n      from .utils import translations\n\n      _, U_ = translations.gettext, translations.ugettext\n      L_, UL_ = translations.gettext_lazy, translations.ugettext_lazy\n\n\nSetting and getting default language\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you are developing some application, it makes sence to specify a **global**\ndefault language. This language will be used if current language is not\nspecified. Example:\n\n.. code-block:: python\n\n  from verboselib import set_default_language, get_default_language\n\n  get_default_language()  # ==> 'None'\n  set_default_language('en')\n  get_default_language()  # ==> 'en'\n\n..\n\n    **TIP**: set default language somewhere near the place you instantiate the\n    ``TranslationsFactory`` class at.\n\nIf both current and default languages are not set, original messages will be\nreturned instead of their translations.\n\n\nSetting up current language\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can set up current **global** language for current thread from any place:\n\n.. code-block:: python\n\n  from verboselib import use_language\n\n  use_language('fr')\n\n\nQuerying current language\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can get the value of currently used language:\n\n.. code-block:: python\n\n  from verboselib import get_language\n\n  get_language()\n\nIf current value is ``None``, this means that neither current nor default\nlanguage is set and original messages will be returned.\n\n\nClearing current language\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can clear the value of current **global** language, so next translations\nwill use default language:\n\n.. code-block:: python\n\n  from verboselib import drop_language\n\n  drop_language()\n\n..\n\n    **TIP**: sometimes it makes sence to restore previous language instead of\n    dropping it, e.g.:\n\n    .. code-block:: python\n\n      from verboselib import get_language, use_language\n      from .utils import translations\n\n      _ = translations.ugettext\n\n\n      def send_greeting_email(user):\n        saved = get_language()\n        use_language(user.language)\n\n        subject = _(\"Welcome to our service\")\n        message = _(\"Hello, {:}! Glad to see you among our users!\").format(user.first_name)\n\n        use_language(saved)\n        send_email(subject, message, user.email)\n\n\nDisabling translations\n^^^^^^^^^^^^^^^^^^^^^^\n\nIf you wish, you can totally disable translations, so original messages will be\nused:\n\n.. code-block:: python\n\n  from verboselib import use_language_bypass\n\n  use_language_bypass()\n\nAfter this ``get_language`` function will return ``None``.\n\nUse ``use_language`` to enable translations again.\n\n\nLocale-to-language conversions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``verboselib`` comes up with a couple of hepler function for converting language\nto locale:\n\n.. code-block:: python\n\n  >>> from verboselib.heplers import to_locale\n  >>> to_locale('en-us')\n  'en_US'\n  >>> to_locale('en-us', to_lower=True)\n  'en_us'\n\nand vice versa, for converting locale to language:\n\n.. code-block:: python\n\n  >>> from verboselib.heplers import to_language\n  >>> to_language('en_US')\n  'en-us'\n\n\nManaging catalogs of translations\n---------------------------------\n\n``verboselib`` comes up with management script called ``verboselib-manage``.\nIts purpose is to help you to extract translatable messages from your sources\nand to compile catalogs of translations.\n\n.. code-block::\n\n  $ verboselib-manage\n  Execute management commands for verboselib.\n  Available commands:\n\n      - compile (compile '*.po' files into '*.mo' binaries).\n      - extract (extract 'gettext' strings from sources).\n      - help (list available commands or show help for a particular command).\n      - version (show current version of verboselib).\n\n..\n\n    **TIP**: You can use management script even if you are not going to use\n    ``verboselib`` itself. It can make your life a bit easier anyway.\n\nAs you can see, there are 4 currently available commands.\n\n\nGetting help\n^^^^^^^^^^^^\n\nUse ``help`` to get commands list or to show help for some command, e.g.:\n\n.. code-block::\n\n  $ verboselib-manage help help\n  usage: help [COMMAND]\n\n  List available commands or show help for a particular command.\n\n\nExtracting messages\n^^^^^^^^^^^^^^^^^^^\n\n``extract`` command will help you to extract or update your messages:\n\n.. code-block::\n\n  $ verboselib-manage help extract\n  usage: extract [-d DOMAIN] [-l LOCALE] [-a] [-o OUTPUT_DIR] [-k KEYWORD]\n                 [-e EXTENSIONS] [-s] [-i PATTERN] [--no-default-ignore]\n                 [--no-wrap] [--no-location] [--no-obsolete] [--keep-pot] [-v]\n\n  Extract 'gettext' strings from sources.\n\n  optional arguments:\n    -d DOMAIN, --domain DOMAIN\n                          The domain of the message files (default: \"messages\").\n    -l LOCALE, --locale LOCALE\n                          Create or update the message files for the given\n                          locale(s) (e.g. en_US). Can be used multiple times.\n    -a, --all             Update the message files for all existing locales\n                          (default: false).\n    -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                          Path to the directory where locales will be stored,\n                          a.k.a. 'locale dir' (default: \"locale\").\n    -k KEYWORD, --keyword KEYWORD\n                          Look for KEYWORD as an additional keyword (e.g., L_).\n                          Can be used multiple times.\n    -e EXTENSIONS, --extension EXTENSIONS\n                          The file extension(s) to examine. Separate multiple\n                          extensions with commas, or use multiple times.\n    -s, --symlinks        Follows symlinks to directories when examining sources\n                          for translation strings (default: false).\n    -i PATTERN, --ignore PATTERN\n                          Ignore files or directories matching this glob-style\n                          pattern. Use multiple times to ignore more.\n    --no-default-ignore   Don't ignore the common glob-style patterns 'CVS',\n                          '.*', '*~', '*.pyc' (default: false).\n    --no-wrap             Don't break long message lines into several lines.\n                          (default: false).\n    --no-location         Don't write '#: filename:line' lines (default: false).\n    --no-obsolete         Remove obsolete message strings (default: false).\n    --keep-pot            Keep .pot file after making messages. Useful when\n                          debugging (default: false).\n    -v, --verbose         Use verbose output (default: false).\n\nHelp output is quite comprehensive. First 5 options are considered to be used\nmost often.\n\nIf you had no translations before, you will need to specify target ``locale``\n(or their list) to create translation files for:\n\n.. code-block:: bash\n\n  $ verboselib-manage extract --locale 'uk' -l 'en' -l 'it'\n\nIf you want just to update all existing files, you may use ``--all`` argument.\n\nDefault keywords to look for are: ``gettext``, ``gettext_lazy``, ``ugettext``,\n``ugettext_lazy`` and ``_``. Use ``--keyword`` (``-k``) argument to add extra\nkeyword, e.g.:\n\n.. code-block:: bash\n\n  $ verboselib-manage extract --keyword 'L_' -k 'U_' -k 'UL_'\n\n\nCompiling translation catalogs\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUse ``compile`` command to compile all translation files inside a single\n``locale dir``:\n\n.. code-block::\n\n  $ verboselib-manage help compile\n  usage: compile [-l LOCALE] [-d LOCALE_DIR]\n\n  Compile '*.po' files into '*.mo' binaries.\n\n  optional arguments:\n    -l LOCALE, --locale LOCALE\n                          Locale(s) to process (e.g. en_US). Default is to\n                          process all. Can be used multiple times.\n    -d LOCALE_DIR, --locale-dir LOCALE_DIR\n                          Path to the directory where locales are stored\n                          (default: \"locale\").\n\n..\n\n    **Just for information**:\n    `locale <https://github.com/oblalex/verboselib/tree/master/tests/locale>`_\n    directory for tests was built using management script.\n\n\nChangelog\n---------\n\n* `0.2.1`_ (Jul 16, 2017)\n\n  * Fix ``version`` command.\n  * Rename ``verboselib-manage.py`` executable to simply ``verboselib-manage``.\n\n* `0.2.0`_ (Dec 31, 2014)\n\n  * Add ``get_default_language()`` method.\n  * Use default translation classes from ``gettext`` module.\n\n* `0.1.0`_ (Jul 17, 2014)\n\n  Initial version\n\n\nCredits\n-------\n\nCreation of this library was inspired by ``translations`` package from `Django`_\nand ``locale`` module from `Sphinx`_.\n\nSome blocks of code were taken from Django and adopted for general-purpose\nusage. Links to original sources are included into docstrings.\n\nI would like to thank `3noch`_ for accepting my proposed changes for\n`stringlike`_ library which provides support of lazy strings for ``verboselib``.\n\n\nFuture plans and thoughts\n-------------------------\n\n- This library is in alpha state currently, because ``lgettext``, ``ngettext``,\n  ``lngettext``, ``ungettext``, ``dgettext`` and other nice methods are not\n  implemented now. This is a nice point to start work on the next version from.\n- Currently ``verboselib`` supports global language for current thread only.\n  Seems, it would be good if support of global language for the whole process\n  will be implemented.\n- Though support for merging translation catalogs is already implemented,\n  ``TranslationsFactory`` accepts only one domain now. Maybe multiple domains is\n  a nice feature to implement too. Same thing about ``locale_dir``.\n\n.. |Build Status| image:: http://img.shields.io/travis/oblalex/verboselib.svg?style=flat&branch=master\n   :target: https://travis-ci.org/oblalex/verboselib\n.. |Coverage Status| image:: http://img.shields.io/coveralls/oblalex/verboselib.svg?style=flat&branch=master\n   :target: https://coveralls.io/r/oblalex/verboselib?branch=master\n.. |PyPi package| image:: http://img.shields.io/pypi/v/verboselib.svg?style=flat\n   :target: http://badge.fury.io/py/verboselib/\n.. |PyPi downloads| image::  http://img.shields.io/pypi/dm/verboselib.svg?style=flat\n   :target: https://crate.io/packages/verboselib/\n\n.. _translation in Django: https://docs.djangoproject.com/en/1.7/topics/i18n/translation/\n\n.. _0.2.1: https://github.com/oblalex/verboselib/releases/tag/v0.2.0...v0.2.1\n.. _0.2.0: https://github.com/oblalex/verboselib/releases/tag/v0.1.0...v0.2.0\n.. _0.1.0: https://github.com/oblalex/verboselib/releases/tag/v0.1.0\n\n.. _Django: https://www.djangoproject.com/\n.. _Sphinx: http://sphinx-doc.org/\n\n.. _3noch: https://github.com/3noch\n.. _stringlike: https://pypi.python.org/pypi/stringlike\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oblalex/verboselib", "keywords": "library", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "verboselib", "package_url": "https://pypi.org/project/verboselib/", "platform": "any", "project_url": "https://pypi.org/project/verboselib/", "project_urls": {"Homepage": "https://github.com/oblalex/verboselib"}, "release_url": "https://pypi.org/project/verboselib/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "A little L10N framework for libraries and applications", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/oblalex/verboselib\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ad0cd73f405c8baa8d1dd70b66cd4d08a6bddd5/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6f626c616c65782f766572626f73656c69622e7376673f7374796c653d666c6174266272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/oblalex/verboselib?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d2607648fd2f6a1c5dda146f9245d5a9a3075b3/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6f626c616c65782f766572626f73656c69622e7376673f7374796c653d666c6174266272616e63683d6d6173746572\"></a> <a href=\"http://badge.fury.io/py/verboselib/\" rel=\"nofollow\"><img alt=\"PyPi package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29b677b3253731f318262ccb5fab560c90d1802f/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f766572626f73656c69622e7376673f7374796c653d666c6174\"></a> <a href=\"https://crate.io/packages/verboselib/\" rel=\"nofollow\"><img alt=\"PyPi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6fd84f8722fa1d2c6f056d22c38104c87294255/687474703a2f2f696d672e736869656c64732e696f2f707970692f646d2f766572626f73656c69622e7376673f7374796c653d666c6174\"></a></p>\n<p>A little L10N framework for Python libraries and applications.</p>\n<p><strong>Table of contents</strong></p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#key-points\" id=\"id4\" rel=\"nofollow\">Key points</a></li>\n<li><a href=\"#installation\" id=\"id5\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#api-overview\" id=\"id6\" rel=\"nofollow\">API overview</a></li>\n<li><a href=\"#managing-catalogs-of-translations\" id=\"id7\" rel=\"nofollow\">Managing catalogs of translations</a></li>\n<li><a href=\"#changelog\" id=\"id8\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#credits\" id=\"id9\" rel=\"nofollow\">Credits</a></li>\n<li><a href=\"#future-plans-and-thoughts\" id=\"id10\" rel=\"nofollow\">Future plans and thoughts</a></li>\n</ul>\n</div>\n<div id=\"key-points\">\n<h2>Key points</h2>\n<p><tt>verboselib</tt> can help you to add verbosity to stand-alone libraries or\napplications. This includes:</p>\n<ul>\n<li>support of usual and lazy translatable messages;</li>\n<li>support of setting and disabling current active language at runtime for\ncurrent thread globally;</li>\n<li>tools to help you to update and compile catalogs of translations.</li>\n</ul>\n<p>In short, all this looks like <a href=\"https://docs.djangoproject.com/en/1.7/topics/i18n/translation/\" rel=\"nofollow\">translation in Django</a>, but without Django.</p>\n<blockquote>\nA samurai without a sword is like a samurai with one, but only without one.</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.python.org/pypi/verboselib\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install verboselib\n</pre>\n</div>\n<div id=\"api-overview\">\n<h2>API overview</h2>\n<p>Here\u2019s a quick usage example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">use_language</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">verboselib.factory</span> <span class=\"kn\">import</span> <span class=\"n\">TranslationsFactory</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">translations</span> <span class=\"o\">=</span> <span class=\"n\">TranslationsFactory</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"n\">locale_dir</span><span class=\"o\">=</span><span class=\"s2\">\"locale\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">ugettext_lazy</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Hi there!\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">use_language</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hi there!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">use_language</span><span class=\"p\">(</span><span class=\"s1\">'sv'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"s1\">'Hej d\u00e4r!'</span>\n</pre>\n<div id=\"translationsfactory\">\n<h3>TranslationsFactory</h3>\n<p>The key point here is usage of an instance of a <tt>TranslationsFactory</tt> class\ncalled <tt>translations</tt>. You need to use its methods to make translatable\nmessages. This is done to make sure your translations are really initialized,\nthat they are initialized only once and stored in a single place only.</p>\n<blockquote>\n<p><strong>TIP</strong>: instantiate <tt>TranslationsFactory</tt> at some convenient place\n(e.g. top-level <tt>__init__.py</tt>, <tt>utils.py</tt>, <tt>translations.py</tt> or any\nother place you like). Then you will be able to import that instance from\nany other module, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translations</span>\n</pre>\n</blockquote>\n<p>To create an instance of a <tt>TranslationsFactory</tt> class you need to tell a\n<tt>domain</tt> name and path to directory, where your translation catalogs are\nstored (<tt>locale_dir</tt>).</p>\n<blockquote>\n<p><strong>TIP</strong>: to keep things simple you can</p>\n<ol>\n<li>set domain name same as the name of your library, application or just\na package;</li>\n<li>place <tt>locale_dir</tt> at the top level of your package;</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>STRONG RECOMMENDATION</strong>: tell the absolute path of your <tt>locale_dir</tt>\nwhile instantiating your translations. This is especially vital if you are\ngoing to distribute a public library. Example:</p>\n<pre><span class=\"c1\"># Example '__init__.py'</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">verboselib.factory</span> <span class=\"kn\">import</span> <span class=\"n\">TranslationsFactory</span>\n\n\n<span class=\"n\">here</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n<span class=\"n\">locale_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">here</span><span class=\"p\">,</span> <span class=\"s2\">\"locale\"</span><span class=\"p\">)</span>\n<span class=\"n\">translations</span> <span class=\"o\">=</span> <span class=\"n\">TranslationsFactory</span><span class=\"p\">(</span><span class=\"s2\">\"example\"</span><span class=\"p\">,</span> <span class=\"n\">locale_dir</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n<p>So, you want to get your translated messages. There some way to do that. List\nof currently supported methods includes:</p>\n<ul>\n<li><tt>gettext</tt> - get a localized translation of message, based on the global\nlanguage in current thread;</li>\n<li><tt>ugettext</tt> - same as <tt>gettext</tt>, but returns translated message as a\nUnicode string (equal to <tt>gettext</tt> for Python 3);</li>\n<li><tt>gettext_lazy</tt> - get a lazy translation of message, will be evaluated in\nfuture accordingly to the global language in current thread;</li>\n<li><tt>ugettext_lazy</tt> same as <tt>gettext_lazy</tt>, but returns evaluated message as a\nUnicode string (equal to <tt>gettext_lazy</tt> for Python 3);</li>\n</ul>\n<blockquote>\n<p><strong>TIP</strong>: Don\u2019t be afraid to use different aliases for different translation\nmethods, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translations</span>\n\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">U_</span> <span class=\"o\">=</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">gettext</span><span class=\"p\">,</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">ugettext</span>\n<span class=\"n\">L_</span><span class=\"p\">,</span> <span class=\"n\">UL_</span> <span class=\"o\">=</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">gettext_lazy</span><span class=\"p\">,</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">ugettext_lazy</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"setting-and-getting-default-language\">\n<h3>Setting and getting default language</h3>\n<p>If you are developing some application, it makes sence to specify a <strong>global</strong>\ndefault language. This language will be used if current language is not\nspecified. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">set_default_language</span><span class=\"p\">,</span> <span class=\"n\">get_default_language</span>\n\n<span class=\"n\">get_default_language</span><span class=\"p\">()</span>  <span class=\"c1\"># ==&gt; 'None'</span>\n<span class=\"n\">set_default_language</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span>\n<span class=\"n\">get_default_language</span><span class=\"p\">()</span>  <span class=\"c1\"># ==&gt; 'en'</span>\n</pre>\n<blockquote>\n<strong>TIP</strong>: set default language somewhere near the place you instantiate the\n<tt>TranslationsFactory</tt> class at.</blockquote>\n<p>If both current and default languages are not set, original messages will be\nreturned instead of their translations.</p>\n</div>\n<div id=\"setting-up-current-language\">\n<h3>Setting up current language</h3>\n<p>You can set up current <strong>global</strong> language for current thread from any place:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">use_language</span>\n\n<span class=\"n\">use_language</span><span class=\"p\">(</span><span class=\"s1\">'fr'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"querying-current-language\">\n<h3>Querying current language</h3>\n<p>You can get the value of currently used language:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">get_language</span>\n\n<span class=\"n\">get_language</span><span class=\"p\">()</span>\n</pre>\n<p>If current value is <tt>None</tt>, this means that neither current nor default\nlanguage is set and original messages will be returned.</p>\n</div>\n<div id=\"clearing-current-language\">\n<h3>Clearing current language</h3>\n<p>You can clear the value of current <strong>global</strong> language, so next translations\nwill use default language:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">drop_language</span>\n\n<span class=\"n\">drop_language</span><span class=\"p\">()</span>\n</pre>\n<blockquote>\n<p><strong>TIP</strong>: sometimes it makes sence to restore previous language instead of\ndropping it, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">get_language</span><span class=\"p\">,</span> <span class=\"n\">use_language</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translations</span>\n\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">translations</span><span class=\"o\">.</span><span class=\"n\">ugettext</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">send_greeting_email</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n  <span class=\"n\">saved</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n  <span class=\"n\">use_language</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">)</span>\n\n  <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Welcome to our service\"</span><span class=\"p\">)</span>\n  <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{:}</span><span class=\"s2\">! Glad to see you among our users!\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>\n\n  <span class=\"n\">use_language</span><span class=\"p\">(</span><span class=\"n\">saved</span><span class=\"p\">)</span>\n  <span class=\"n\">send_email</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"disabling-translations\">\n<h3>Disabling translations</h3>\n<p>If you wish, you can totally disable translations, so original messages will be\nused:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">verboselib</span> <span class=\"kn\">import</span> <span class=\"n\">use_language_bypass</span>\n\n<span class=\"n\">use_language_bypass</span><span class=\"p\">()</span>\n</pre>\n<p>After this <tt>get_language</tt> function will return <tt>None</tt>.</p>\n<p>Use <tt>use_language</tt> to enable translations again.</p>\n</div>\n<div id=\"locale-to-language-conversions\">\n<h3>Locale-to-language conversions</h3>\n<p><tt>verboselib</tt> comes up with a couple of hepler function for converting language\nto locale:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">verboselib.heplers</span> <span class=\"kn\">import</span> <span class=\"n\">to_locale</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_locale</span><span class=\"p\">(</span><span class=\"s1\">'en-us'</span><span class=\"p\">)</span>\n<span class=\"s1\">'en_US'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_locale</span><span class=\"p\">(</span><span class=\"s1\">'en-us'</span><span class=\"p\">,</span> <span class=\"n\">to_lower</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">'en_us'</span>\n</pre>\n<p>and vice versa, for converting locale to language:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">verboselib.heplers</span> <span class=\"kn\">import</span> <span class=\"n\">to_language</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_language</span><span class=\"p\">(</span><span class=\"s1\">'en_US'</span><span class=\"p\">)</span>\n<span class=\"s1\">'en-us'</span>\n</pre>\n</div>\n</div>\n<div id=\"managing-catalogs-of-translations\">\n<h2>Managing catalogs of translations</h2>\n<p><tt>verboselib</tt> comes up with management script called <tt><span class=\"pre\">verboselib-manage</span></tt>.\nIts purpose is to help you to extract translatable messages from your sources\nand to compile catalogs of translations.</p>\n<pre>$ verboselib-manage\nExecute management commands for verboselib.\nAvailable commands:\n\n    - compile (compile '*.po' files into '*.mo' binaries).\n    - extract (extract 'gettext' strings from sources).\n    - help (list available commands or show help for a particular command).\n    - version (show current version of verboselib).\n</pre>\n<blockquote>\n<strong>TIP</strong>: You can use management script even if you are not going to use\n<tt>verboselib</tt> itself. It can make your life a bit easier anyway.</blockquote>\n<p>As you can see, there are 4 currently available commands.</p>\n<div id=\"getting-help\">\n<h3>Getting help</h3>\n<p>Use <tt>help</tt> to get commands list or to show help for some command, e.g.:</p>\n<pre>$ verboselib-manage help help\nusage: help [COMMAND]\n\nList available commands or show help for a particular command.\n</pre>\n</div>\n<div id=\"extracting-messages\">\n<h3>Extracting messages</h3>\n<p><tt>extract</tt> command will help you to extract or update your messages:</p>\n<pre>$ verboselib-manage help extract\nusage: extract [-d DOMAIN] [-l LOCALE] [-a] [-o OUTPUT_DIR] [-k KEYWORD]\n               [-e EXTENSIONS] [-s] [-i PATTERN] [--no-default-ignore]\n               [--no-wrap] [--no-location] [--no-obsolete] [--keep-pot] [-v]\n\nExtract 'gettext' strings from sources.\n\noptional arguments:\n  -d DOMAIN, --domain DOMAIN\n                        The domain of the message files (default: \"messages\").\n  -l LOCALE, --locale LOCALE\n                        Create or update the message files for the given\n                        locale(s) (e.g. en_US). Can be used multiple times.\n  -a, --all             Update the message files for all existing locales\n                        (default: false).\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        Path to the directory where locales will be stored,\n                        a.k.a. 'locale dir' (default: \"locale\").\n  -k KEYWORD, --keyword KEYWORD\n                        Look for KEYWORD as an additional keyword (e.g., L_).\n                        Can be used multiple times.\n  -e EXTENSIONS, --extension EXTENSIONS\n                        The file extension(s) to examine. Separate multiple\n                        extensions with commas, or use multiple times.\n  -s, --symlinks        Follows symlinks to directories when examining sources\n                        for translation strings (default: false).\n  -i PATTERN, --ignore PATTERN\n                        Ignore files or directories matching this glob-style\n                        pattern. Use multiple times to ignore more.\n  --no-default-ignore   Don't ignore the common glob-style patterns 'CVS',\n                        '.*', '*~', '*.pyc' (default: false).\n  --no-wrap             Don't break long message lines into several lines.\n                        (default: false).\n  --no-location         Don't write '#: filename:line' lines (default: false).\n  --no-obsolete         Remove obsolete message strings (default: false).\n  --keep-pot            Keep .pot file after making messages. Useful when\n                        debugging (default: false).\n  -v, --verbose         Use verbose output (default: false).\n</pre>\n<p>Help output is quite comprehensive. First 5 options are considered to be used\nmost often.</p>\n<p>If you had no translations before, you will need to specify target <tt>locale</tt>\n(or their list) to create translation files for:</p>\n<pre>$ verboselib-manage extract --locale <span class=\"s1\">'uk'</span> -l <span class=\"s1\">'en'</span> -l <span class=\"s1\">'it'</span>\n</pre>\n<p>If you want just to update all existing files, you may use <tt><span class=\"pre\">--all</span></tt> argument.</p>\n<p>Default keywords to look for are: <tt>gettext</tt>, <tt>gettext_lazy</tt>, <tt>ugettext</tt>,\n<tt>ugettext_lazy</tt> and <tt>_</tt>. Use <tt><span class=\"pre\">--keyword</span></tt> (<tt><span class=\"pre\">-k</span></tt>) argument to add extra\nkeyword, e.g.:</p>\n<pre>$ verboselib-manage extract --keyword <span class=\"s1\">'L_'</span> -k <span class=\"s1\">'U_'</span> -k <span class=\"s1\">'UL_'</span>\n</pre>\n</div>\n<div id=\"compiling-translation-catalogs\">\n<h3>Compiling translation catalogs</h3>\n<p>Use <tt>compile</tt> command to compile all translation files inside a single\n<tt>locale dir</tt>:</p>\n<pre>$ verboselib-manage help compile\nusage: compile [-l LOCALE] [-d LOCALE_DIR]\n\nCompile '*.po' files into '*.mo' binaries.\n\noptional arguments:\n  -l LOCALE, --locale LOCALE\n                        Locale(s) to process (e.g. en_US). Default is to\n                        process all. Can be used multiple times.\n  -d LOCALE_DIR, --locale-dir LOCALE_DIR\n                        Path to the directory where locales are stored\n                        (default: \"locale\").\n</pre>\n<blockquote>\n<strong>Just for information</strong>:\n<a href=\"https://github.com/oblalex/verboselib/tree/master/tests/locale\" rel=\"nofollow\">locale</a>\ndirectory for tests was built using management script.</blockquote>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li><p><a href=\"https://github.com/oblalex/verboselib/releases/tag/v0.2.0...v0.2.1\" rel=\"nofollow\">0.2.1</a> (Jul 16, 2017)</p>\n<ul>\n<li>Fix <tt>version</tt> command.</li>\n<li>Rename <tt><span class=\"pre\">verboselib-manage.py</span></tt> executable to simply <tt><span class=\"pre\">verboselib-manage</span></tt>.</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/verboselib/releases/tag/v0.1.0...v0.2.0\" rel=\"nofollow\">0.2.0</a> (Dec 31, 2014)</p>\n<ul>\n<li>Add <tt>get_default_language()</tt> method.</li>\n<li>Use default translation classes from <tt>gettext</tt> module.</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/oblalex/verboselib/releases/tag/v0.1.0\" rel=\"nofollow\">0.1.0</a> (Jul 17, 2014)</p>\n<p>Initial version</p>\n</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Creation of this library was inspired by <tt>translations</tt> package from <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a>\nand <tt>locale</tt> module from <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>.</p>\n<p>Some blocks of code were taken from Django and adopted for general-purpose\nusage. Links to original sources are included into docstrings.</p>\n<p>I would like to thank <a href=\"https://github.com/3noch\" rel=\"nofollow\">3noch</a> for accepting my proposed changes for\n<a href=\"https://pypi.python.org/pypi/stringlike\" rel=\"nofollow\">stringlike</a> library which provides support of lazy strings for <tt>verboselib</tt>.</p>\n</div>\n<div id=\"future-plans-and-thoughts\">\n<h2>Future plans and thoughts</h2>\n<ul>\n<li>This library is in alpha state currently, because <tt>lgettext</tt>, <tt>ngettext</tt>,\n<tt>lngettext</tt>, <tt>ungettext</tt>, <tt>dgettext</tt> and other nice methods are not\nimplemented now. This is a nice point to start work on the next version from.</li>\n<li>Currently <tt>verboselib</tt> supports global language for current thread only.\nSeems, it would be good if support of global language for the whole process\nwill be implemented.</li>\n<li>Though support for merging translation catalogs is already implemented,\n<tt>TranslationsFactory</tt> accepts only one domain now. Maybe multiple domains is\na nice feature to implement too. Same thing about <tt>locale_dir</tt>.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3026970, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "980621aa1841a0e9a0d27279f91ae2b2", "sha256": "21ac2ad35ad910a789ae9ad6a202f66e4f73af0b5b1088907c72ca6f84413325"}, "downloads": -1, "filename": "verboselib-0.1.0.tar.gz", "has_sig": false, "md5_digest": "980621aa1841a0e9a0d27279f91ae2b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18009, "upload_time": "2014-07-17T07:40:23", "upload_time_iso_8601": "2014-07-17T07:40:23.514255Z", "url": "https://files.pythonhosted.org/packages/3e/4d/48c100383b5230274906538265d9ab36d32f9253d838a89bbd51a801daae/verboselib-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d24361d1414ff00eafdbcc38b1b0384f", "sha256": "cac16dca9ac01c2d1b4107a9b56e6ab4828b99eca8d87fb003a165524659dbb1"}, "downloads": -1, "filename": "verboselib-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d24361d1414ff00eafdbcc38b1b0384f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18165, "upload_time": "2014-12-31T21:05:38", "upload_time_iso_8601": "2014-12-31T21:05:38.162120Z", "url": "https://files.pythonhosted.org/packages/4c/16/578858c06746a5aab6f6b71ad77f7ac776032bb6ae97ac585e6bac55aa32/verboselib-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b3666b86f96f76376bc421437a79bb1d", "sha256": "fd3f752064c17703a232a22674d4d989e8ebde817d817de881474f0d52fff41f"}, "downloads": -1, "filename": "verboselib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b3666b86f96f76376bc421437a79bb1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22356, "upload_time": "2017-07-16T18:07:00", "upload_time_iso_8601": "2017-07-16T18:07:00.664756Z", "url": "https://files.pythonhosted.org/packages/8c/12/1e70412325eb564e24af5c0717be4cd95d7499c051777e7facf2b3c57fd8/verboselib-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3666b86f96f76376bc421437a79bb1d", "sha256": "fd3f752064c17703a232a22674d4d989e8ebde817d817de881474f0d52fff41f"}, "downloads": -1, "filename": "verboselib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b3666b86f96f76376bc421437a79bb1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22356, "upload_time": "2017-07-16T18:07:00", "upload_time_iso_8601": "2017-07-16T18:07:00.664756Z", "url": "https://files.pythonhosted.org/packages/8c/12/1e70412325eb564e24af5c0717be4cd95d7499c051777e7facf2b3c57fd8/verboselib-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:55 2020"}