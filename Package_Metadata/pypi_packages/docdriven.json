{"info": {"author": "Jon Crowell", "author_email": "docdriven@JonCrowell.org", "bugtrack_url": null, "classifiers": [], "description": "% docdriven - A Python package to support documentation-driven development\n% Jon Crowell\n% May 16, 2013\n\n# Introduction\n\nDocumentation-driven development is an approach to software development in which the documentation of how the software works is the conceptual starting point.  You begin by writing the documentation, then from this documentation tests are automatically-generated (which will initially all fail since there is no code yet), and then code is written to cause the tests to pass.  Each time the testing process is run it concludes by updating the documentation from which the tests were derived -- each step in the documentation is given a time-stamped status report indicating whether the system actually behaved as documented or not.\n\nOne of the insights of documentation-driven development is that it does not make sense to document the behavior of a system separately from testing that behavior.  Test results are considered to be the \"actual documentation\" of how the system really behaves, so documentation-driven development seeks to unify the \"actual documentation\" with the published documentation.  This has the happy consequence that the published documentation can never be out of sync with the code it is documenting without \"red alerts\" being immediately inserted directly into the published documentation.  It is similar to test-driven development, but uses an approach to writing tests that relies on a literate programming technique in which the tests are extracted from legitimate examples provided in the documentation.\n\n### From Markdown to Documentation-driven down\n\nIn order to unify the publication of documentation with testing the documented code, the docdriven Python package relies on a variety of Markdown called Drivendown (or Documentation-driven down).  These are plain text files that have a *.dd extension and which conform to the Pandoc Markdown implementation, which means they can be easily transformed into PDF or HTML files, among other formats.  (In fact, this document itself was written as a Drivendown file.)\n\nDrivendown and Markdown are related in the following ways:\n\n* A line that begins with '# ' is considered a level-one header in Markdown and a chapter title in Driven down.\n\n* A line that begins with '## ' is considered a level-two header in Markdown and an incident title in Drivendown.  (The terms 'method', 'incident' and 'route' have the same meaning in the docdriven context -- I use 'method' when speaking about testing a module, 'route' when speaking about testing an API over HTTP (in which case the route is the URL), and 'incident' when speaking generically)\n\n* A line that begins with '#### ' is considered a level-four header in Markdown and a code label in Drivendown.  Only five code labels are presently permitted in Drivendown: config, predict, response, runtime, and status.  Any other label following '#### ' will cause Drivendown to throw an error\n\n* A line that begins with an exclamation point is completely ignored in Drivendown and should not be passed along to the Markdown interpreter (this is not implemented yet -- currently these lines will show up in the Pandoc-generated output, but are ignored by Drivendown) [TODO: think more about commenting]\n\n* A line that begins with four spaces is considered a code block in Markdown and is given no special treatment in Drivendown, where it is just considered part of the natural text of the document.\n\n### Docdriven's theory of testing and documentation\n\nThe docdriven package expects the documentation of a project (or system/module/API/whatever) to consist of a set of related Drivendown documents, each of which has the following attributes:\n\n1. A title, which must be the first line and must start with '% ' and cannot be left blank.\n\n2. Optional author/organization information, which must be the second line of the document and must start with '% '.  If you wish not to include this information then the second line should be left blank following the '%'.\n\n3. A date and time stamp, which must be the third line, must start with '% ', and cannot be blank.\n\n4. An optional introduction chapter, which must have the title 'Introduction' (not case sensitive).\n\n5. Zero or more chapters, each of which begins with a level-one Markdown header, which will become the chapter title.\n\n6. An optional conclusion, which must have the title 'Conclusion'.\n\nThe shortest possible valid Drivendown file would consist of three lines for the title, authors, and timestamp and would have no other content.\n\nWhen docdriven \"drives\" a Drivendown file, it processes the introduction (i.e., this section) for global configuration and setup information, then processes each chapter (in random order), and then processes the conclusion for cleanup and teardown.  This corresponds to standard unit testing frameworks, which usually have 'set up' and 'tear down' sections that are run before and after the tests are run.\n\nThe entire Drivendown file can be thought of as a story with an introduction, several self-contained chapters which may be read in any order, and then a conclusion.\n\n##### What is a chapter and what is an incident?\n\nA chapter in the docdriven approach is both an individual unit test and a readable story about a sequence of related \"incidents\".  (Imagine a person telling a story of the form: \"first this happened, then that happened, then the first thing happened again, then yet another thing happened\" and so on.)  The sequence of incidents is meaningful and is preserved.  An incident may be an individual method invocation, a call to a certain API route, or any other distinct unit that, in broad terms, accepts input, does something, and produces output.\n\nSo a chapter is an individual unit to be tested and the incidents describe the behavior that is supposed to occur.\n\nOne may ask why each incident should not be considered an individual unit test.  In fact if one one wishes to write a chapter that consists of only a single incident, that is legitimate.  Often, however, there is a close relationship between several methods in a system.  For example, suppose you are documenting an API which provides an add_user(username) method which returns a user_id, and a delete_user(user_id) method.  Until a user has been added a user cannot be deleted, so it would be impossible to write a test of the delete_user method without first adding a user.  For this reason chapters expect a list of incidents of arbitrary length which will be executed in order.\n\nWhen docdriven processes a chapter it will first merge the chapter's specific configuration information with the global configuration information that was provided in the introduction, then it will process each incident in order.  Processing an incident consists of merging the incident's configuration information with the general configuration information for the chapter, then invoking the method, then comparing the response returned from the method with what the documentation predicted the response would be, and finally producing a status report.\n\nNote that it is not necessary for chapters and incidents to provide individual configuration information -- if no specific configuration information is provided, then the general configuration information from the introduction is inherited and used.\n\n### What is a Status Report?\n\nA status report is a snippet of JSON that roughly looks like the following:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JSON\n{\n    \"code\": \"8CharMax\",\n    \"level\": 2,\n    \"timestamp\": \"2013-05-16 08:23:41\",\n    \"speed\": 2.3,\n    \"note\": \"a short string of arbitrary length\"\n}\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStatus reports are produced by the testing framework.  The code word can be any string of up to 8 characters that summarizes the result.  Examples would be words like \"BLANK\", \"FAIL\", \"WARNING\", \"SUCCESS\", \"OKAY\", \"HTTP-500\", \"HTTP-200\", \"UNKNOWN\", \"WORKS\", \"CRASHED\", \"HALFWAY\", \"BEGUN\", or whatever you would like.  Of course they don't have to be all upper case.  The level must be a number between 0 and 4 -- corresponding to increasing levels of success and corresponding to the colors blue, red, orange, yellow, and green respectively.\n\nIn general terms I think of the status reports as 0=BLANK=blue, 1=FAIL=red, 2=STARTED=orange, 3=PROGRESS=yellow, 4=SUCCESS=green, although I change the code words frequently to provide more specific information.\n\nIf you wish to extend docdriven to accept more levels or different colors, then that is your perogative -- the code is open source, so fork me on github and go paint the town a couple dozen shades of pink, mauve and lavender if you so desire.\n\nThe timestamp is simply a string representing the date and time at which the status report was produced, in ISO format.\n\nThe speed is the amount of time, in seconds, that it took for the incident to transpire.\n\nThe note is a free-form string field that you can use as you'd like.  Be aware, however, that including notes with hundreds of lines of text in them will present a formatting challenge to the system.\n\n### How does docdriven know how to configure the testing environment just from reading this introduction?\n\nIn this particular case we are documenting, and therefore testing, the docdriven package itself.  In order to set up our environment we will need to tell docdriven where to find this docdriven.dd file, then we will", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/docdriven/", "keywords": null, "license": "MIT_LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "docdriven", "package_url": "https://pypi.org/project/docdriven/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/docdriven/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/docdriven/"}, "release_url": "https://pypi.org/project/docdriven/0.1.20/", "requires_dist": null, "requires_python": null, "summary": "Support for documentation-driven development of JSON APIs.", "version": "0.1.20", "yanked": false, "html_description": "<div class=\"project-description\">\n            % docdriven - A Python package to support documentation-driven development<br>% Jon Crowell<br>% May 16, 2013<br><br># Introduction<br><br>Documentation-driven development is an approach to software development in which the documentation of how the software works is the conceptual starting point.  You begin by writing the documentation, then from this documentation tests are automatically-generated (which will initially all fail since there is no code yet), and then code is written to cause the tests to pass.  Each time the testing process is run it concludes by updating the documentation from which the tests were derived -- each step in the documentation is given a time-stamped status report indicating whether the system actually behaved as documented or not.<br><br>One of the insights of documentation-driven development is that it does not make sense to document the behavior of a system separately from testing that behavior.  Test results are considered to be the \"actual documentation\" of how the system really behaves, so documentation-driven development seeks to unify the \"actual documentation\" with the published documentation.  This has the happy consequence that the published documentation can never be out of sync with the code it is documenting without \"red alerts\" being immediately inserted directly into the published documentation.  It is similar to test-driven development, but uses an approach to writing tests that relies on a literate programming technique in which the tests are extracted from legitimate examples provided in the documentation.<br><br>### From Markdown to Documentation-driven down<br><br>In order to unify the publication of documentation with testing the documented code, the docdriven Python package relies on a variety of Markdown called Drivendown (or Documentation-driven down).  These are plain text files that have a *.dd extension and which conform to the Pandoc Markdown implementation, which means they can be easily transformed into PDF or HTML files, among other formats.  (In fact, this document itself was written as a Drivendown file.)<br><br>Drivendown and Markdown are related in the following ways:<br><br>* A line that begins with '# ' is considered a level-one header in Markdown and a chapter title in Driven down.<br><br>* A line that begins with '## ' is considered a level-two header in Markdown and an incident title in Drivendown.  (The terms 'method', 'incident' and 'route' have the same meaning in the docdriven context -- I use 'method' when speaking about testing a module, 'route' when speaking about testing an API over HTTP (in which case the route is the URL), and 'incident' when speaking generically)<br><br>* A line that begins with '#### ' is considered a level-four header in Markdown and a code label in Drivendown.  Only five code labels are presently permitted in Drivendown: config, predict, response, runtime, and status.  Any other label following '#### ' will cause Drivendown to throw an error<br><br>* A line that begins with an exclamation point is completely ignored in Drivendown and should not be passed along to the Markdown interpreter (this is not implemented yet -- currently these lines will show up in the Pandoc-generated output, but are ignored by Drivendown) [TODO: think more about commenting]<br><br>* A line that begins with four spaces is considered a code block in Markdown and is given no special treatment in Drivendown, where it is just considered part of the natural text of the document.<br><br>### Docdriven's theory of testing and documentation<br><br>The docdriven package expects the documentation of a project (or system/module/API/whatever) to consist of a set of related Drivendown documents, each of which has the following attributes:<br><br>1. A title, which must be the first line and must start with '% ' and cannot be left blank.<br><br>2. Optional author/organization information, which must be the second line of the document and must start with '% '.  If you wish not to include this information then the second line should be left blank following the '%'.<br><br>3. A date and time stamp, which must be the third line, must start with '% ', and cannot be blank.<br><br>4. An optional introduction chapter, which must have the title 'Introduction' (not case sensitive).<br><br>5. Zero or more chapters, each of which begins with a level-one Markdown header, which will become the chapter title.<br><br>6. An optional conclusion, which must have the title 'Conclusion'.<br><br>The shortest possible valid Drivendown file would consist of three lines for the title, authors, and timestamp and would have no other content.<br><br>When docdriven \"drives\" a Drivendown file, it processes the introduction (i.e., this section) for global configuration and setup information, then processes each chapter (in random order), and then processes the conclusion for cleanup and teardown.  This corresponds to standard unit testing frameworks, which usually have 'set up' and 'tear down' sections that are run before and after the tests are run.<br><br>The entire Drivendown file can be thought of as a story with an introduction, several self-contained chapters which may be read in any order, and then a conclusion.<br><br>##### What is a chapter and what is an incident?<br><br>A chapter in the docdriven approach is both an individual unit test and a readable story about a sequence of related \"incidents\".  (Imagine a person telling a story of the form: \"first this happened, then that happened, then the first thing happened again, then yet another thing happened\" and so on.)  The sequence of incidents is meaningful and is preserved.  An incident may be an individual method invocation, a call to a certain API route, or any other distinct unit that, in broad terms, accepts input, does something, and produces output.<br><br>So a chapter is an individual unit to be tested and the incidents describe the behavior that is supposed to occur.<br><br>One may ask why each incident should not be considered an individual unit test.  In fact if one one wishes to write a chapter that consists of only a single incident, that is legitimate.  Often, however, there is a close relationship between several methods in a system.  For example, suppose you are documenting an API which provides an add_user(username) method which returns a user_id, and a delete_user(user_id) method.  Until a user has been added a user cannot be deleted, so it would be impossible to write a test of the delete_user method without first adding a user.  For this reason chapters expect a list of incidents of arbitrary length which will be executed in order.<br><br>When docdriven processes a chapter it will first merge the chapter's specific configuration information with the global configuration information that was provided in the introduction, then it will process each incident in order.  Processing an incident consists of merging the incident's configuration information with the general configuration information for the chapter, then invoking the method, then comparing the response returned from the method with what the documentation predicted the response would be, and finally producing a status report.<br><br>Note that it is not necessary for chapters and incidents to provide individual configuration information -- if no specific configuration information is provided, then the general configuration information from the introduction is inherited and used.<br><br>### What is a Status Report?<br><br>A status report is a snippet of JSON that roughly looks like the following:<br><br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JSON<br>{<br>    \"code\": \"8CharMax\",<br>    \"level\": 2,<br>    \"timestamp\": \"2013-05-16 08:23:41\",<br>    \"speed\": 2.3,<br>    \"note\": \"a short string of arbitrary length\"<br>}<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Status reports are produced by the testing framework.  The code word can be any string of up to 8 characters that summarizes the result.  Examples would be words like \"BLANK\", \"FAIL\", \"WARNING\", \"SUCCESS\", \"OKAY\", \"HTTP-500\", \"HTTP-200\", \"UNKNOWN\", \"WORKS\", \"CRASHED\", \"HALFWAY\", \"BEGUN\", or whatever you would like.  Of course they don't have to be all upper case.  The level must be a number between 0 and 4 -- corresponding to increasing levels of success and corresponding to the colors blue, red, orange, yellow, and green respectively.<br><br>In general terms I think of the status reports as 0=BLANK=blue, 1=FAIL=red, 2=STARTED=orange, 3=PROGRESS=yellow, 4=SUCCESS=green, although I change the code words frequently to provide more specific information.<br><br>If you wish to extend docdriven to accept more levels or different colors, then that is your perogative -- the code is open source, so fork me on github and go paint the town a couple dozen shades of pink, mauve and lavender if you so desire.<br><br>The timestamp is simply a string representing the date and time at which the status report was produced, in ISO format.<br><br>The speed is the amount of time, in seconds, that it took for the incident to transpire.<br><br>The note is a free-form string field that you can use as you'd like.  Be aware, however, that including notes with hundreds of lines of text in them will present a formatting challenge to the system.<br><br>### How does docdriven know how to configure the testing environment just from reading this introduction?<br><br>In this particular case we are documenting, and therefore testing, the docdriven package itself.  In order to set up our environment we will need to tell docdriven where to find this docdriven.dd file, then we will\n          </div>"}, "last_serial": 807337, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "6cbbcd1618099148ff640828adca054f", "sha256": "2bfa3a514fb9573d55f55f23329253936eaaabadecff19b09004d18c345d0225"}, "downloads": -1, "filename": "docdriven-0.1.10.tar.gz", "has_sig": false, "md5_digest": "6cbbcd1618099148ff640828adca054f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10859, "upload_time": "2013-05-14T04:20:28", "upload_time_iso_8601": "2013-05-14T04:20:28.537031Z", "url": "https://files.pythonhosted.org/packages/bb/bc/2ac37b2ba2caec640d2bb2f83338a68250db4ca07d1b801a2f86a4dae6f6/docdriven-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "7bf7c5d7e99a53807e1470ee424b2c55", "sha256": "a7573c1fe107f515dd8144087092f0f17c36d327eaaa1ee2940e6ce476fe3c73"}, "downloads": -1, "filename": "docdriven-0.1.11.tar.gz", "has_sig": false, "md5_digest": "7bf7c5d7e99a53807e1470ee424b2c55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10858, "upload_time": "2013-05-14T04:33:40", "upload_time_iso_8601": "2013-05-14T04:33:40.805377Z", "url": "https://files.pythonhosted.org/packages/2b/46/b23849cac8c60ad1a1a28f085484c664a3ea758f0965d611cc86016e9336/docdriven-0.1.11.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "8080525e8054231aa8241a6eecb70fc4", "sha256": "78f3aac8fa226241649ea9e4e1cc2b5f73f0828e32537fba93fe92b13c523a7d"}, "downloads": -1, "filename": "docdriven-0.1.13.tar.gz", "has_sig": false, "md5_digest": "8080525e8054231aa8241a6eecb70fc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6718, "upload_time": "2013-05-22T18:38:59", "upload_time_iso_8601": "2013-05-22T18:38:59.729492Z", "url": "https://files.pythonhosted.org/packages/8e/27/27f360ffa7823a2105c4e0a239b0e5e7ad2f2ca69045baba16b7f94f0699/docdriven-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "1e97b5de4f135882c846376e9955ae53", "sha256": "831496951bddef8655d836c2d60536f65f6564a3a3f0bb9166196537018a876a"}, "downloads": -1, "filename": "docdriven-0.1.14.tar.gz", "has_sig": false, "md5_digest": "1e97b5de4f135882c846376e9955ae53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6717, "upload_time": "2013-05-22T18:50:37", "upload_time_iso_8601": "2013-05-22T18:50:37.440014Z", "url": "https://files.pythonhosted.org/packages/34/cc/ccb72bc8404a4e174e4df4afaba7cff3ff904acf9b883c3d8c90e3a838c5/docdriven-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "3839bd366b355825ee2a07fc4b5decc3", "sha256": "343488d40af5fbc9803ad420068d636279cc1546625612614ac9c2959a1542da"}, "downloads": -1, "filename": "docdriven-0.1.15.tar.gz", "has_sig": false, "md5_digest": "3839bd366b355825ee2a07fc4b5decc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6725, "upload_time": "2013-05-22T18:56:04", "upload_time_iso_8601": "2013-05-22T18:56:04.014066Z", "url": "https://files.pythonhosted.org/packages/18/e6/278e29b3fdaf3f13632d0843aa4bd815ae72dba2cd3be9a966705d866991/docdriven-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "b39d562eaab8915fe9f98341fc3f7cc9", "sha256": "20f77d24db6669d755e38cd1e1388a8168a1dff0bbc5d66f4bb77f70c38a79b9"}, "downloads": -1, "filename": "docdriven-0.1.16.tar.gz", "has_sig": false, "md5_digest": "b39d562eaab8915fe9f98341fc3f7cc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16053, "upload_time": "2013-05-22T19:02:28", "upload_time_iso_8601": "2013-05-22T19:02:28.334288Z", "url": "https://files.pythonhosted.org/packages/1e/ae/25c542434a1b18f3f5ea8c69092724ac1e34425dc303a880b423f6bf53e4/docdriven-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "6904e5b056a5708a15e6874e58fe9a78", "sha256": "8bb1691a3ae014f4783bfe5e974df6912f037e5179b990552405c048768ead03"}, "downloads": -1, "filename": "docdriven-0.1.17.tar.gz", "has_sig": false, "md5_digest": "6904e5b056a5708a15e6874e58fe9a78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16027, "upload_time": "2013-05-22T19:11:30", "upload_time_iso_8601": "2013-05-22T19:11:30.399568Z", "url": "https://files.pythonhosted.org/packages/7b/86/041414fe6811d7ddc04e85e151a2b355afe35647a3bc6cb36156dcdd44b6/docdriven-0.1.17.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "d4af183e1a81f6d154aa9902267b942f", "sha256": "49afffdc050c09b7c1058d6d4bfe08a48bbff5f927bdcdbbd6d4fdbad667d727"}, "downloads": -1, "filename": "docdriven-0.1.18.tar.gz", "has_sig": false, "md5_digest": "d4af183e1a81f6d154aa9902267b942f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16025, "upload_time": "2013-05-22T19:43:08", "upload_time_iso_8601": "2013-05-22T19:43:08.623536Z", "url": "https://files.pythonhosted.org/packages/0d/ec/58043f2780fd9d9a8d0a1a2ac23625d6be50ddb2b6e466a2e7d1c9504cd2/docdriven-0.1.18.tar.gz", "yanked": false}], "0.1.19": [{"comment_text": "", "digests": {"md5": "f70fc8afe9acef99ae4e86335952b72c", "sha256": "0aa13ab75f822dffcaf8a39cc7fb43dc7dbc98b32f9e546cc73f684e5dbdaa77"}, "downloads": -1, "filename": "docdriven-0.1.19.tar.gz", "has_sig": false, "md5_digest": "f70fc8afe9acef99ae4e86335952b72c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16106, "upload_time": "2013-05-22T20:41:56", "upload_time_iso_8601": "2013-05-22T20:41:56.062135Z", "url": "https://files.pythonhosted.org/packages/db/d7/fcdf115fb59fde755d7f6b07a50d707461242580a58fc3d154785d84e156/docdriven-0.1.19.tar.gz", "yanked": false}], "0.1.20": [{"comment_text": "", "digests": {"md5": "9dda3b0e725c6d90e09cf6f0ff8ad3d5", "sha256": "a747b410d436c5575e1b7cbc4c61e0312f6091aefa8d3a08372ba991f9efc3f3"}, "downloads": -1, "filename": "docdriven-0.1.20.tar.gz", "has_sig": false, "md5_digest": "9dda3b0e725c6d90e09cf6f0ff8ad3d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16867, "upload_time": "2013-07-03T17:22:13", "upload_time_iso_8601": "2013-07-03T17:22:13.279034Z", "url": "https://files.pythonhosted.org/packages/6f/3e/274c800d626d59b5f7418dca9831f67c8f31b84dbd6ae00dfd796818fb3d/docdriven-0.1.20.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bc8e9a89687cf7a147bafa3aa8d4bba6", "sha256": "95912d96566f03ee761077ae8d6a9c7d3251145184dc076ac2c0a63b71751d05"}, "downloads": -1, "filename": "docdriven-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bc8e9a89687cf7a147bafa3aa8d4bba6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10650, "upload_time": "2013-05-13T22:12:30", "upload_time_iso_8601": "2013-05-13T22:12:30.037289Z", "url": "https://files.pythonhosted.org/packages/56/7d/9a368f26516b6f4bcdd179a076a245e0b0a878596e00a04ce1512460a7ad/docdriven-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "9c6c91014dc558c0e560b34f67a0c5d0", "sha256": "bc47ffade5df18eae651a98c1bb76b04ee11aadd92a8e67464ba0db050774f11"}, "downloads": -1, "filename": "docdriven-0.1.4.tar.gz", "has_sig": false, "md5_digest": "9c6c91014dc558c0e560b34f67a0c5d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10856, "upload_time": "2013-05-14T01:13:22", "upload_time_iso_8601": "2013-05-14T01:13:22.702496Z", "url": "https://files.pythonhosted.org/packages/5a/2f/ec17aadbf2bd565a8f1ff4c8c0d34068013e14e8e0acbc04540e0ecb2089/docdriven-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "562186459087df347d2492add02f1c09", "sha256": "70b5f9321414ba823f575c54734913ad2351262a8349ac5b35cdd11477cb8415"}, "downloads": -1, "filename": "docdriven-0.1.5.tar.gz", "has_sig": false, "md5_digest": "562186459087df347d2492add02f1c09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10851, "upload_time": "2013-05-14T02:05:34", "upload_time_iso_8601": "2013-05-14T02:05:34.428874Z", "url": "https://files.pythonhosted.org/packages/cb/fd/f54eba2998ef45d6d2ab1d0d0f3a128f9ea038b6c72981f99ab00bc0c388/docdriven-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "147a700ea7098cb027fe558fc4ee7a76", "sha256": "f3302e0ce39b507f07cefa061e77d4d3ba229ed5147565f3fe7f14f9b607bb55"}, "downloads": -1, "filename": "docdriven-0.1.6.tar.gz", "has_sig": false, "md5_digest": "147a700ea7098cb027fe558fc4ee7a76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10839, "upload_time": "2013-05-14T02:17:30", "upload_time_iso_8601": "2013-05-14T02:17:30.684334Z", "url": "https://files.pythonhosted.org/packages/55/66/3d85b5b012b079ff8364856dee12e8d2829afdf415a827f0de0358ef00f7/docdriven-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "7785a12b2d9774ea68ffaf98f770cdd6", "sha256": "482dd352256caec51852d56dc16e63fda4ce4c926439a2853a11aa1763cbe405"}, "downloads": -1, "filename": "docdriven-0.1.7.tar.gz", "has_sig": false, "md5_digest": "7785a12b2d9774ea68ffaf98f770cdd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10853, "upload_time": "2013-05-14T04:07:59", "upload_time_iso_8601": "2013-05-14T04:07:59.912792Z", "url": "https://files.pythonhosted.org/packages/1f/da/b48ee6a7194a9d53414c80263ccb9c7f23b5a67e4d95073bff4eeaa6bf10/docdriven-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "691ed18b9c0dc61c76aac9e57a549682", "sha256": "ef4d5320331a6d80e022ff692b98a10e107f1acda245607d9a790fc46f4ce17f"}, "downloads": -1, "filename": "docdriven-0.1.8.tar.gz", "has_sig": false, "md5_digest": "691ed18b9c0dc61c76aac9e57a549682", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10858, "upload_time": "2013-05-14T04:13:19", "upload_time_iso_8601": "2013-05-14T04:13:19.365541Z", "url": "https://files.pythonhosted.org/packages/3e/34/035b5859b2fd92ce9e994afe17bb4fe1ab470d687ad4a3f4056528f81d8d/docdriven-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "1eb46947caad12493a2a124f2a792289", "sha256": "96b6d28c6616a78d327f63549fffa0e52f5b91931aa78e3f5a74bf39cc22f6d6"}, "downloads": -1, "filename": "docdriven-0.1.9.tar.gz", "has_sig": false, "md5_digest": "1eb46947caad12493a2a124f2a792289", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10854, "upload_time": "2013-05-14T04:16:57", "upload_time_iso_8601": "2013-05-14T04:16:57.738067Z", "url": "https://files.pythonhosted.org/packages/ca/55/afda1ab29ed1f3c8f01a563d6bb55b755bd8403fc4069c320388bb9a45d6/docdriven-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9dda3b0e725c6d90e09cf6f0ff8ad3d5", "sha256": "a747b410d436c5575e1b7cbc4c61e0312f6091aefa8d3a08372ba991f9efc3f3"}, "downloads": -1, "filename": "docdriven-0.1.20.tar.gz", "has_sig": false, "md5_digest": "9dda3b0e725c6d90e09cf6f0ff8ad3d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16867, "upload_time": "2013-07-03T17:22:13", "upload_time_iso_8601": "2013-07-03T17:22:13.279034Z", "url": "https://files.pythonhosted.org/packages/6f/3e/274c800d626d59b5f7418dca9831f67c8f31b84dbd6ae00dfd796818fb3d/docdriven-0.1.20.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:57 2020"}