{"info": {"author": "Crutcher Dunnavant", "author_email": "crutcher@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: User Interfaces"], "description": "Base class for writing simple interactive command loop environments.\n\nCommandLoop provides a base class for writing simple interactive user\nenvironments.  It is designed around sub-classing, has a simple command\nparser, and is trivial to initialize.\n\nHere is a trivial little environment written using CommandLoop:\n\n    import cmdloop\n\n    class Hello(cmdloop.CommandLoop):\n        PS1='hello>'\n\n        @cmdloop.aliases('hello', 'hi', 'hola')\n        @cmdloop.shorthelp('say hello')\n        @cmdloop.usage('hello TARGET')\n        def helloCmd(self, flags, args):\n            '''\n            Say hello to TARGET, which defaults to 'world'\n            '''\n            if flags or len(args) > 1:\n                raise InvalidArguments\n            if args:\n                target = args[0]\n            else:\n                target = self.default_target\n            print >> self.OUT, 'Hello %s!' % target\n\n        @cmdloop.aliases('quit')\n        def quitCmd(self, flags, args):\n            '''\n            Quit the environment.\n            '''\n            raise cmdloop.HaltLoop\n\n    Hello().runLoop()\n\nHere's a more complex example:\n\n    import cmdloop\n\n    class HelloGoodbye(cmdloop.CommandLoop):\n        PS1='hello>'\n\n        def __init__(self, default_target = 'world'):\n            self.default_target = default_target\n            self.target_list = []\n\n        @cmdloop.aliases('hello', 'hi', 'hola')\n        @cmdloop.shorthelp('say hello')\n        @cmdloop.usage('hello [TARGET]')\n        def helloCmd(self, flags, args):\n            '''\n            Say hello to TARGET, which defaults to 'world'\n            '''\n            if flags or len(args) > 1:\n                raise cmdloop.InvalidArguments\n            if args:\n                target = args[0]\n            else:\n                target = self.default_target\n            if target not in self.target_list:\n                self.target_list.append(target)\n            print >> self.OUT, 'Hello %s!' % target\n\n        @cmdloop.aliases('goodbye')\n        @cmdloop.shorthelp('say goodbye')\n        @cmdloop.usage('goodbye TARGET')\n        def goodbyeCmd(self, flags, args):\n            '''\n            Say goodbye to TARGET.\n            '''\n            if flags or len(args) != 1:\n                raise cmdloop.InvalidArguments\n            target = args[0]\n            if target in self.target_list:\n                print >> self.OUT, 'Goodbye %s!' % target\n                self.target_list.remove(target)\n            else:\n                print >> self.OUT, \"I haven't said hello to %s.\" % target\n\n        @cmdloop.aliases('quit')\n        def quitCmd(self, flags, args):\n            '''\n            Quit the environment.\n            '''\n            raise cmdloop.HaltLoop\n\n        def _onLoopExit(self):\n            if len(self.target_list):\n                self.pushCommands(('quit',))\n                for target in self.target_list:\n                    self.pushCommands(('goodbye', target))\n            else:\n                raise cmdloop.HaltLoop\n\n    HelloGoodbye().runLoop()", "description_content_type": null, "docs_url": null, "download_url": "http://py-cmdloop.googlecode.com/svn/trunk/cmdloop.py", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/py-cmdloop/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "CmdLoop", "package_url": "https://pypi.org/project/CmdLoop/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/CmdLoop/", "project_urls": {"Download": "http://py-cmdloop.googlecode.com/svn/trunk/cmdloop.py", "Homepage": "http://code.google.com/p/py-cmdloop/"}, "release_url": "https://pypi.org/project/CmdLoop/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "Command Loop Implementation Environment", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Base class for writing simple interactive command loop environments.<br><br>CommandLoop provides a base class for writing simple interactive user<br>environments.  It is designed around sub-classing, has a simple command<br>parser, and is trivial to initialize.<br><br>Here is a trivial little environment written using CommandLoop:<br><br>    import cmdloop<br><br>    class Hello(cmdloop.CommandLoop):<br>        PS1='hello&gt;'<br><br>        @cmdloop.aliases('hello', 'hi', 'hola')<br>        @cmdloop.shorthelp('say hello')<br>        @cmdloop.usage('hello TARGET')<br>        def helloCmd(self, flags, args):<br>            '''<br>            Say hello to TARGET, which defaults to 'world'<br>            '''<br>            if flags or len(args) &gt; 1:<br>                raise InvalidArguments<br>            if args:<br>                target = args[0]<br>            else:<br>                target = self.default_target<br>            print &gt;&gt; self.OUT, 'Hello %s!' % target<br><br>        @cmdloop.aliases('quit')<br>        def quitCmd(self, flags, args):<br>            '''<br>            Quit the environment.<br>            '''<br>            raise cmdloop.HaltLoop<br><br>    Hello().runLoop()<br><br>Here's a more complex example:<br><br>    import cmdloop<br><br>    class HelloGoodbye(cmdloop.CommandLoop):<br>        PS1='hello&gt;'<br><br>        def __init__(self, default_target = 'world'):<br>            self.default_target = default_target<br>            self.target_list = []<br><br>        @cmdloop.aliases('hello', 'hi', 'hola')<br>        @cmdloop.shorthelp('say hello')<br>        @cmdloop.usage('hello [TARGET]')<br>        def helloCmd(self, flags, args):<br>            '''<br>            Say hello to TARGET, which defaults to 'world'<br>            '''<br>            if flags or len(args) &gt; 1:<br>                raise cmdloop.InvalidArguments<br>            if args:<br>                target = args[0]<br>            else:<br>                target = self.default_target<br>            if target not in self.target_list:<br>                self.target_list.append(target)<br>            print &gt;&gt; self.OUT, 'Hello %s!' % target<br><br>        @cmdloop.aliases('goodbye')<br>        @cmdloop.shorthelp('say goodbye')<br>        @cmdloop.usage('goodbye TARGET')<br>        def goodbyeCmd(self, flags, args):<br>            '''<br>            Say goodbye to TARGET.<br>            '''<br>            if flags or len(args) != 1:<br>                raise cmdloop.InvalidArguments<br>            target = args[0]<br>            if target in self.target_list:<br>                print &gt;&gt; self.OUT, 'Goodbye %s!' % target<br>                self.target_list.remove(target)<br>            else:<br>                print &gt;&gt; self.OUT, \"I haven't said hello to %s.\" % target<br><br>        @cmdloop.aliases('quit')<br>        def quitCmd(self, flags, args):<br>            '''<br>            Quit the environment.<br>            '''<br>            raise cmdloop.HaltLoop<br><br>        def _onLoopExit(self):<br>            if len(self.target_list):<br>                self.pushCommands(('quit',))<br>                for target in self.target_list:<br>                    self.pushCommands(('goodbye', target))<br>            else:<br>                raise cmdloop.HaltLoop<br><br>    HelloGoodbye().runLoop()\n          </div>"}, "last_serial": 13584, "releases": {"0.1.0": [], "0.1.1": [], "0.1.2": []}, "urls": [], "timestamp": "Thu May  7 22:18:35 2020"}