{"info": {"author": "Nikita Kuzin", "author_email": "getsense@yandex.ru", "bugtrack_url": null, "classifiers": [], "description": "# useful python things<br/>\n<br/>\nadd class<br/>\n<br/>\nclass _type_sign(Enum):<br/>\n    SIGN=1<br/>\n    UNSIGN=2<br/>\n<br/>\nenv<br/>\n<br/>\nfrom pyeco import *<br/>\nfrom pyeco import _type_sign<br/>\n<br/>\n<br/>\n<br/>\nfunction: dec2hex(_dec,_nbits)<br/>\n<br/>\n_dec -> input decimal:<br/> \n8 bits[-128,127],<br/> \n16 bits[-32768,32767],<br/> \n32 bits[-2147483648,2147483647] <br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\noutput -> dec to hex format<br/>\n<br/>\nexample: <br/>\nprint(dec2hex(-127,8))<br/>\n <br/>\n<br/>\nfunction: hex2dec(_hex,_nbits,_s)<br/>\n_hex -> input hex:<br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\n_s -> _type_sign.UNSIGN/_type_sign.SIGN output decimal<br/>\noutput -> hex to decimal format<br/>\n<br/>\n example:<br/>\n print(hex2dec(0x81010181,32,_type_sign.UNSIGN))<br/>\n<br/> \n<br/>\nfunction: dec2bin(_dec,_nbits)<br/>\n_dec -> input decimal<br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\noutput -> dec to binary format<br/>\n<br/>\nexample:<br/>\nprint(dec2bin(-128,16))<br/>\n<br/>\n<br/>\nfunction: bin2dec(_bin,_nbits,_s)<br/>\n_bin -> input binary:<br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\n_s -> _type_sign.UNSIGN/_type_sign.SIGN output decimal<br/>\noutput -> bin to decimal format<br/>\n<br/>\nexample:<br/>\nprint(bin2dec(\"11111111111111111111111110000000\",32,_type_sign.UNSIGN))<br/>\n<br/>\n<br/>\nfunction: hex2bin(_hex,_nbits)<br/>\n_hex -> input hex:<br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\noutput -> hex to binary format<br/>\n<br/>\nexample:<br/>\nprint(hex2bin(0x81010181,32))<br/>\n<br/>\nfunction: bin2hex(_bin,_nbits)<br/>\n_bin -> input hex:<br/>\n_nbits -> _dec's number bits: 8,16,32<br/>\noutput -> binary to hex format<br/>\n<br/>\nexample:<br/>\nprint(bin2hex(\"1100000000000011\",16))<br/>\n<br/>\nenv<br/>\n<br/>\nfrom pyeco import *<br/>\nfrom pyeco import _adr_size<br/>\n<br/>\nbindiff(_file1,_file2,_nbits,_size,_flag,_base_adr)<br/>\n_file1 - first file,<br/>\n_file2 - second file,<br/>\n_nbits - word's number bits: 8,16,32,<br/>\n_size - how much words to compare<br/>\n_flag - screen adress by _nbits words or bytes <br/> \n_base_adr - base adress, need for real dats location<br/>\noutput -> binary difference between _file1 and _file2<br/>\n<br/>\nexample:<br/>\nbindiff(\"e:/spil.bin\",\"e:/u-boot.bin\",32,int(0xce0/4),_adr_size.BYTE,0xe6300000)<br/>\nenv<br/>\n<br/>\nfrom pyeco import *<br/>\n<br/>\nfunction: max_array(in_array)<br/>\nin_array - \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432<br/>\noutput -> \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 MAX \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 in_array \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c<br/>\n<br/>\nexample:<br/>\nimport numpy as np<br/>\n\nin_array = np.array([-176,3,148,-10,36,238,-76])<br/>\n\nmax_array(in_array)<br/>\n<br/>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyeco", "package_url": "https://pypi.org/project/pyeco/", "platform": "", "project_url": "https://pypi.org/project/pyeco/", "project_urls": null, "release_url": "https://pypi.org/project/pyeco/0.5/", "requires_dist": null, "requires_python": "", "summary": "useful python things", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>useful python things<br></h1>\n<br>\nadd class<br>\n<br>\nclass _type_sign(Enum):<br>\n    SIGN=1<br>\n    UNSIGN=2<br>\n<br>\nenv<br>\n<br>\nfrom pyeco import *<br>\nfrom pyeco import _type_sign<br>\n<br>\n<br>\n<br>\nfunction: dec2hex(_dec,_nbits)<br>\n<br>\n_dec -&gt; input decimal:<br> \n8 bits[-128,127],<br> \n16 bits[-32768,32767],<br> \n32 bits[-2147483648,2147483647] <br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\noutput -&gt; dec to hex format<br>\n<br>\nexample: <br>\nprint(dec2hex(-127,8))<br>\n <br>\n<br>\nfunction: hex2dec(_hex,_nbits,_s)<br>\n_hex -&gt; input hex:<br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\n_s -&gt; _type_sign.UNSIGN/_type_sign.SIGN output decimal<br>\noutput -&gt; hex to decimal format<br>\n<br>\n example:<br>\n print(hex2dec(0x81010181,32,_type_sign.UNSIGN))<br>\n<br> \n<br>\nfunction: dec2bin(_dec,_nbits)<br>\n_dec -&gt; input decimal<br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\noutput -&gt; dec to binary format<br>\n<br>\nexample:<br>\nprint(dec2bin(-128,16))<br>\n<br>\n<br>\nfunction: bin2dec(_bin,_nbits,_s)<br>\n_bin -&gt; input binary:<br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\n_s -&gt; _type_sign.UNSIGN/_type_sign.SIGN output decimal<br>\noutput -&gt; bin to decimal format<br>\n<br>\nexample:<br>\nprint(bin2dec(\"11111111111111111111111110000000\",32,_type_sign.UNSIGN))<br>\n<br>\n<br>\nfunction: hex2bin(_hex,_nbits)<br>\n_hex -&gt; input hex:<br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\noutput -&gt; hex to binary format<br>\n<br>\nexample:<br>\nprint(hex2bin(0x81010181,32))<br>\n<br>\nfunction: bin2hex(_bin,_nbits)<br>\n_bin -&gt; input hex:<br>\n_nbits -&gt; _dec's number bits: 8,16,32<br>\noutput -&gt; binary to hex format<br>\n<br>\nexample:<br>\nprint(bin2hex(\"1100000000000011\",16))<br>\n<br>\nenv<br>\n<br>\nfrom pyeco import *<br>\nfrom pyeco import _adr_size<br>\n<br>\nbindiff(_file1,_file2,_nbits,_size,_flag,_base_adr)<br>\n_file1 - first file,<br>\n_file2 - second file,<br>\n_nbits - word's number bits: 8,16,32,<br>\n_size - how much words to compare<br>\n_flag - screen adress by _nbits words or bytes <br> \n_base_adr - base adress, need for real dats location<br>\noutput -&gt; binary difference between _file1 and _file2<br>\n<br>\nexample:<br>\nbindiff(\"e:/spil.bin\",\"e:/u-boot.bin\",32,int(0xce0/4),_adr_size.BYTE,0xe6300000)<br>\nenv<br>\n<br>\nfrom pyeco import *<br>\n<br>\nfunction: max_array(in_array)<br>\nin_array - \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432<br>\noutput -&gt; \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 MAX \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 in_array \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u043a\u043e\u043d\u0441\u043e\u043b\u044c<br>\n<br>\nexample:<br>\nimport numpy as np<br>\n<p>in_array = np.array([-176,3,148,-10,36,238,-76])<br></p>\n<p>max_array(in_array)<br>\n<br></p>\n\n          </div>"}, "last_serial": 4962235, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "1545fe2393d1fe79816a820bc2b5aea2", "sha256": "762d1197b2db77ef2f3ca126dd4f8c95968d4da5ec687dfd7b4a13bd6d1f0764"}, "downloads": -1, "filename": "pyeco-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1545fe2393d1fe79816a820bc2b5aea2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4315, "upload_time": "2019-03-20T06:27:52", "upload_time_iso_8601": "2019-03-20T06:27:52.893814Z", "url": "https://files.pythonhosted.org/packages/db/07/86202c32a6f40e75fe3fb6452cd0f586646555c4acb467a3642650a6f8ce/pyeco-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abe45489fa07c060b48d35dd87cc643c", "sha256": "c4860879ef5949ad2112b3cd1f69a5f65a7c2314ef6c570c76e0e5156a325c66"}, "downloads": -1, "filename": "pyeco-0.5.tar.gz", "has_sig": false, "md5_digest": "abe45489fa07c060b48d35dd87cc643c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3301, "upload_time": "2019-03-20T06:27:54", "upload_time_iso_8601": "2019-03-20T06:27:54.200676Z", "url": "https://files.pythonhosted.org/packages/9e/c6/8a9a2b6e3052137b870630e5de32a37f946af55e87991d05782263a3a7e3/pyeco-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1545fe2393d1fe79816a820bc2b5aea2", "sha256": "762d1197b2db77ef2f3ca126dd4f8c95968d4da5ec687dfd7b4a13bd6d1f0764"}, "downloads": -1, "filename": "pyeco-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1545fe2393d1fe79816a820bc2b5aea2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4315, "upload_time": "2019-03-20T06:27:52", "upload_time_iso_8601": "2019-03-20T06:27:52.893814Z", "url": "https://files.pythonhosted.org/packages/db/07/86202c32a6f40e75fe3fb6452cd0f586646555c4acb467a3642650a6f8ce/pyeco-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abe45489fa07c060b48d35dd87cc643c", "sha256": "c4860879ef5949ad2112b3cd1f69a5f65a7c2314ef6c570c76e0e5156a325c66"}, "downloads": -1, "filename": "pyeco-0.5.tar.gz", "has_sig": false, "md5_digest": "abe45489fa07c060b48d35dd87cc643c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3301, "upload_time": "2019-03-20T06:27:54", "upload_time_iso_8601": "2019-03-20T06:27:54.200676Z", "url": "https://files.pythonhosted.org/packages/9e/c6/8a9a2b6e3052137b870630e5de32a37f946af55e87991d05782263a3a7e3/pyeco-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:35 2020"}