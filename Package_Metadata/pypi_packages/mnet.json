{"info": {"author": "Michael Laforest", "author_email": "mjlaforest@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "# mnet\n\nmnet Suite - Tools for network professionals.  \nMichael Laforest `<mjlaforest` *at* `gmail` *dot* `com>`\n  \nAutomated discovery and diagram tools using SNMP, CDP, and LLDP.\n\n ```# ./mnet.py diagram -r 10.75.0.1 -o .\\network.svg```<br><br><br>*The above command will generate the diagram to the right.* | ![MNet-Diagram Example1][diag1]\n:--- | --- \n \n# Support\n\nIf you use any of these tools or find them useful please consider donating.  \n\nDonation Method | Address | QR Code\n--- | --- | ---\nBitcoin (BTC) | 1HY3jPYVfE6YZbuYTYfMpazvSKRXjZDMbS  | ![1HY3jPYVfE6YZbuYTYfMpazvSKRXjZDMbS](https://github.com/MJL85/mnet/blob/master/docs/donate/BTC.png \"Bitcoin (BTC)\")\nBitcoin Cash (BCH) | 1HSycjR3LAZxuLG34aEBbQdUSayPkh8XsH | ![1HSycjR3LAZxuLG34aEBbQdUSayPkh8XsH](https://github.com/MJL85/mnet/blob/master/docs/donate/BCH.png \"Bitcoin Cash (BCH)\")\n\n# Tools\n| Module | Description |\n| --- | --- |\n| Diagram | Discovers a network and generates a diagram based on CDP and LLDP neighbor information. |\n| TraceMAC | Attempts to locate a specific MAC address by recursively looking it up in switch CAM tables. |\n| GetMACS | Collect a list of all MAC addresses on the discovered network and generate a report. |\n\n# Network Discovery  \n  \nThe discovery process uses SNMP, CDP, and LLDP to discover the network topology and details about each node.  Each discovered node will be evaluated against the `discover` ACL (defined in the config file) to determine how to proceed; the ACL may allow discovery, stop discovery here, or include it as a leaf in the diagram.\n\n<table>\n\t<tr>\n\t<td valign=top rowspan=2>\n\t\tThe <i>discover</i> ACL is defined as\n\t<pre><code>\"discover\" : [\n\tACE1,\n\tACE2,\n\t...\n\tACEn,\n]</code></pre>\n\t</td>\n\t<td valign=top>\n\t\tAn <i>ACE</i> is defined as  \n\t<pre><code>&lt;permit|deny|leaf|include|;&gt; &lt; [host REGEX] | [ip CIDR] &gt;</code></pre>\n\t</td>\n\t</tr>\n\t<tr>\n\t<td>\nExample\n\t<pre><code>\"discover\" : [\n\t\"deny ip 10.50.12.55\",\n\t\"deny host ^SEP.*\",\n\t\"permit ip 10.50.12.0/24\",\n\t\"leaf host ^Switch2$\",\n\t\"permit ip any\"\n]</code>\t</td>\n\t</tr>\n</table>\n\n---\n\n| ACE Match Type| Include Node | Collect Node Information | Allow Discovery of Adjacencies |\n| --- |:---:|:---:|:---:|\n| **permit** | yes | yes | yes |\n| **leaf** | yes | yes |  |\n| **include** | yes |  |  |\n| **deny** |  |  |  |\n\n  ---\n \n| ACE Parameter | Description | Example |\n| --- | --- | --- |\n| host REGEX | The host can be matched against any regular expression string.  The host string is what is reported from CDP or LLDP. | `host Router-.*` |\n| ip CIDR | The ip can be matched against and CIDR. | `ip 10.50.31.0/24` |\n\n# Command Reference\n\n### Diagram\n```\n# mnet.py diagram -r <root IP>\n                -o <output file>\n               [-d <max depth>]\n               [-c <config file>]\n               [-t <diagram title>]\n               [-C <catalog file>]\n```\n| Option | Description |\n| --- | --- |\n| `-r <root IP>` | IP address of the network node to start on. |\n| `-o <output file>` | The file that the output will be written to.<br />Common file extensions: `.png`, `.pdf`, `.svg` |\n| `-c <config file>` | The JSON configuration file to use. |\n| `-d <max depth>` | The maximum hop depth to discover, starting at the root node specified by `-r` |\n| `-t <diagram title>` | The title to give your generated network diagram. |\n| `-C <catalog file>` | If specified, mnet will generate a comma separated (CSV) catalog file with a list of all devices discovered. |\n\n### TraceMAC\n```\n# mnet.py tracemac -r <root IP>\n                 -m <MAC Address>\n                 [-c <config file>]\n```\n| Option | Description |\n| --- | --- |\n| `-r <root IP>` | IP address of the network node to start on. |\n| `-m <MAC Address>` | The MAC address to locate.  Can be in any form.  Ex: `11:22:33:44:55:66` or `112233445566` or `1122.3344.5566` |\n| `-c <config file>` | The JSON configuration file to use. |\n\n### GetMACS\n```\n# mnet.py getmacs -r <root IP>\n                 -o <output CSV file>\n                 [-d <mac depth>]\n                 [-c <config file>]\n```\n| Option | Description |\n| --- | --- |\n| `-r <root IP>` | IP address of the network node to start on. |\n| `-o <output CSV file>` | The comma separated value (.csv) file that the output will be written to. |\n| `-d <max depth>` | The maximum hop depth to discover, starting at the root node specified by `-r` |\n| `-c <config file>` | The JSON configuration file to use. |\n\n\n### Config\n```\n# mnet.py config\n```\n# Configuration File\nThe configuration file defines common parameters in a JSON format.\n```\n{\n\t\"snmp\" : [\n\t\t{ \"community\":\"private\",\t\"ver\":2 },\n\t\t{ \"community\":\"public\",\t\t\"ver\":2 }\n\t],\n\t\"domains\" : [\n\t\t\".company.net\",\n\t\t\".company.com\"\n\t],\n\t\"discover\" : [\n\t\t\"permit ip 10.0.0.0/8\",\n\t\t\"permit host Router[1,2]\",\n\t\t\"deny ip any\",\n\t],\n \t\"diagram\" : {\n\t\t\"node_text_size\" : 10,\n\t\t\"link_text_size\" : 9,\n\t\t\"title_text_size\" : 15,\n\t\t\"get_stack_members\" : 0,\n\t\t\"get_vss_members\" : 0,\n\t\t\"expand_stackwise\" : 0,\n\t\t\"expand_vss\" : 0,\n\t\t\"expand_lag\" : 1,\n\t\t\"group_vpc\" : 0\n    }\n\t\n}\n```\n\n| Block / Variable | Description |\n| --- | --- |\n| `snmp` | Defines a list of SNMP credentials.  When connecting to a node, each of these credentials is tried in order until one is successful. |\n| `discover` | Defines a Cisco-style ACL. See the `Network Discovery` section. |\n| `diagram` | Defines values used by the diagram module.  Detailed below in the *Diagram block* table. |\n\n### Diagram block\n| Variable | Type | Default Value | Description |\n| --- | --- | --- | --- |\n| `node_text_size` | integer | `10` | Node text size. |\n| `link_text_size` | integer | `9` | Link text size. |\n| `title_text_size` | integer | `15` |  Diagram title text size. |\n| `get_stack_members` | bool | `0` | If set to `1`, nodes will include details about stackwise members. |\n| `get_vss_members` | bool | `0` | If set to `1`, nodes will include details about VSS members. |\n| `expand_stackwise` | bool | `0` | If set to `1`, nodes belonging to stackwise groups will be expanded to show each member as a node. |\n| `expand_vss` | bool | `0` | If set to `1`, nodes belonging to VSS groups will be expanded to show each member as a node. |\n| `expand_lag` | bool | `1` | If set to `1`, each link between nodes will be shown.  If set to `0`, links of the same logical link channel will be grouped and only the channel link will be shown. |\n| `group_vpc` | bool | `0` | If set to `1`, VPC peers will be grouped together on the diagram, otherwise they will not be clustered. |\n\n# Diagram\nmnet will attempt to collect the following information and include it in the generated diagram:\n+ All devices (via CDP and LLDP)\n+ Interface names\n+ IP addresses\n+ VLAN memberships\n+ Etherchannel memberships (LACP only)\n+ Identify trunk links\n+ Identify switched links\n+ Identify routed links\n+ BGP Local AS\n+ OSPF Router ID\n+ HSRP Virtual IP\n+ HSRP Priority\n+ VSS Domain\n+ Stackwise membership\n+ VPC peerlink information\n\n#### Diagram Formatting\n+ Nodes\n  + Circle nodes represent layer 2 switches.\n  + Diamond nodes represent layer 3 switches or routers.\n  + If a node has multiple borders then either VSS or StackWise is enabled.\n    + VSS - Will always have a double border.\n    + StackWise - The number of borders denotes the number of switches in the stack.\n  + If the configuration specifies, VSS/VPC/Stackwise nodes will be grouped in larger squares.\n+ Links\n  + Links are shown with arrowed lines.  The end with no arrow is the *parent* and the end with the arrow is the *child*, such that the arrangement is *parent*->*child*.\n  + If a link says *P:gi0/1* , *C:gi1/4* then the parent node's connection is on port gi0/1 and the child node's connection is on port gi1/4.\n  + If the link is part of an Etherchannel the etherchannel's interface name will also be shown.  Since an etherchannel interface is locally significiant, a *P:* and *C:* will also be shown if available.\n\n#### Examples\n\nExample 1\n![MNet-Diagram Ex1](http://i.imgur.com/Mny7PLl.png \"MNet-Graph Ex1\")\n\nExample 2\n![MNet-Diagram Ex2](http://i.imgur.com/BuXnzWG.png \"MNet-Graph Ex2\")\n\nExample 3\n![MNet-Diagram Ex3](http://i.imgur.com/i1dqM09.png \"MNet-Graph Ex3\")\n\n# TraceMAC\n\n#### Examples\n\nThe below example shows a trace for MAC address `00:23:68:63:75:70` starting\nat node `10.10.0.3`.  The MAC address is found on switch `IDF3_D` on port\n`Gi0/11`.\n\n```\n# mnet.py tracemac -r 10.10.0.3 -m 0023.6863.7570\nMNet Suite v0.7\nWritten by Michael Laforest <mjlaforest@gmail.com>\n\n     Config file: ./mnet.conf\n       Root node: 10.10.0.3\n     MAC address: 0023.6863.7570\n\nStart trace.\n------------\nIDF1_A (10.10.0.3)\n          VLAN: 1\n          Port: Gi1/3\n     Next Node: IDF1_B\n  Next Node IP: 10.10.0.2\n------------\nIDF1_B (10.10.0.2)\n          VLAN: 1\n          Port: Gi0/24\n     Next Node: IDF3_D\n  Next Node IP: 10.10.0.6\n------------\nIDF3_D (10.10.0.6)\n          VLAN: 1\n          Port: Gi0/11\n------------\nTrace complete.\n```\n# FAQ\n\n#### Q1 - My diagram is too large.  I only want to diagram part of my network.\nTry changing the config `discover` ACL to narrow down the scope of your discovery.  You can explicitly deny CIDR's or host name regex patterns if you do not want them included in your diagram.  \n  \n#### Q2 - Where is the config file?\nCreate a new one with\n`# mnet.py config > mnet.conf`\n\n#### Q3 - I need a diagram with less proprietary information. Can I get one without IPs or serial numbers?\nYou can change the text inside each node by editing the config option `diagram\\node_text`. Below is an example that would produce a minimal information diagram:\n\n```\n\"diagram\" : {\n\tnode_text = '<font point-size=\"10\"><b>{node.name}</b></font><br />{node.ios}<br />{node.plat}'\n}\t\n``` \n#### Q4 - How can I remove Cisco VoIP phones from my diagram?\n```\n\"discover\" : [\n\t\"deny host ^SEP.*$\"\n]\n``` \n\n[diag1]: https://github.com/MJL85/mnet/blob/master/docs/images/mnet_example.PNG \"Diagram 1\"", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/MJL85/mnet/", "keywords": "python network cisco diagram snmp cdp", "license": "LICENSE", "maintainer": "", "maintainer_email": "", "name": "mnet", "package_url": "https://pypi.org/project/mnet/", "platform": "", "project_url": "https://pypi.org/project/mnet/", "project_urls": {"Homepage": "http://github.com/MJL85/mnet/"}, "release_url": "https://pypi.org/project/mnet/0.10/", "requires_dist": null, "requires_python": "", "summary": "MNet Suite is a collection of Python tools for network professionals.", "version": "0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            # mnet<br><br>mnet Suite - Tools for network professionals.  <br>Michael Laforest `&lt;mjlaforest` *at* `gmail` *dot* `com&gt;`<br>  <br>Automated discovery and diagram tools using SNMP, CDP, and LLDP.<br><br> ```# ./mnet.py diagram -r 10.75.0.1 -o .\\network.svg```&lt;br&gt;&lt;br&gt;&lt;br&gt;*The above command will generate the diagram to the right.* | ![MNet-Diagram Example1][diag1]<br>:--- | --- <br> <br># Support<br><br>If you use any of these tools or find them useful please consider donating.  <br><br>Donation Method | Address | QR Code<br>--- | --- | ---<br>Bitcoin (BTC) | 1HY3jPYVfE6YZbuYTYfMpazvSKRXjZDMbS  | ![1HY3jPYVfE6YZbuYTYfMpazvSKRXjZDMbS](https://github.com/MJL85/mnet/blob/master/docs/donate/BTC.png \"Bitcoin (BTC)\")<br>Bitcoin Cash (BCH) | 1HSycjR3LAZxuLG34aEBbQdUSayPkh8XsH | ![1HSycjR3LAZxuLG34aEBbQdUSayPkh8XsH](https://github.com/MJL85/mnet/blob/master/docs/donate/BCH.png \"Bitcoin Cash (BCH)\")<br><br># Tools<br>| Module | Description |<br>| --- | --- |<br>| Diagram | Discovers a network and generates a diagram based on CDP and LLDP neighbor information. |<br>| TraceMAC | Attempts to locate a specific MAC address by recursively looking it up in switch CAM tables. |<br>| GetMACS | Collect a list of all MAC addresses on the discovered network and generate a report. |<br><br># Network Discovery  <br>  <br>The discovery process uses SNMP, CDP, and LLDP to discover the network topology and details about each node.  Each discovered node will be evaluated against the `discover` ACL (defined in the config file) to determine how to proceed; the ACL may allow discovery, stop discovery here, or include it as a leaf in the diagram.<br><br>&lt;table&gt;<br>\t&lt;tr&gt;<br>\t&lt;td valign=top rowspan=2&gt;<br>\t\tThe &lt;i&gt;discover&lt;/i&gt; ACL is defined as<br>\t&lt;pre&gt;&lt;code&gt;\"discover\" : [<br>\tACE1,<br>\tACE2,<br>\t...<br>\tACEn,<br>]&lt;/code&gt;&lt;/pre&gt;<br>\t&lt;/td&gt;<br>\t&lt;td valign=top&gt;<br>\t\tAn &lt;i&gt;ACE&lt;/i&gt; is defined as  <br>\t&lt;pre&gt;&lt;code&gt;&amp;lt;permit|deny|leaf|include|;&amp;gt; &amp;lt; [host REGEX] | [ip CIDR] &amp;gt;&lt;/code&gt;&lt;/pre&gt;<br>\t&lt;/td&gt;<br>\t&lt;/tr&gt;<br>\t&lt;tr&gt;<br>\t&lt;td&gt;<br>Example<br>\t&lt;pre&gt;&lt;code&gt;\"discover\" : [<br>\t\"deny ip 10.50.12.55\",<br>\t\"deny host ^SEP.*\",<br>\t\"permit ip 10.50.12.0/24\",<br>\t\"leaf host ^Switch2$\",<br>\t\"permit ip any\"<br>]&lt;/code&gt;\t&lt;/td&gt;<br>\t&lt;/tr&gt;<br>&lt;/table&gt;<br><br>---<br><br>| ACE Match Type| Include Node | Collect Node Information | Allow Discovery of Adjacencies |<br>| --- |:---:|:---:|:---:|<br>| **permit** | yes | yes | yes |<br>| **leaf** | yes | yes |  |<br>| **include** | yes |  |  |<br>| **deny** |  |  |  |<br><br>  ---<br> <br>| ACE Parameter | Description | Example |<br>| --- | --- | --- |<br>| host REGEX | The host can be matched against any regular expression string.  The host string is what is reported from CDP or LLDP. | `host Router-.*` |<br>| ip CIDR | The ip can be matched against and CIDR. | `ip 10.50.31.0/24` |<br><br># Command Reference<br><br>### Diagram<br>```<br># mnet.py diagram -r &lt;root IP&gt;<br>                -o &lt;output file&gt;<br>               [-d &lt;max depth&gt;]<br>               [-c &lt;config file&gt;]<br>               [-t &lt;diagram title&gt;]<br>               [-C &lt;catalog file&gt;]<br>```<br>| Option | Description |<br>| --- | --- |<br>| `-r &lt;root IP&gt;` | IP address of the network node to start on. |<br>| `-o &lt;output file&gt;` | The file that the output will be written to.&lt;br /&gt;Common file extensions: `.png`, `.pdf`, `.svg` |<br>| `-c &lt;config file&gt;` | The JSON configuration file to use. |<br>| `-d &lt;max depth&gt;` | The maximum hop depth to discover, starting at the root node specified by `-r` |<br>| `-t &lt;diagram title&gt;` | The title to give your generated network diagram. |<br>| `-C &lt;catalog file&gt;` | If specified, mnet will generate a comma separated (CSV) catalog file with a list of all devices discovered. |<br><br>### TraceMAC<br>```<br># mnet.py tracemac -r &lt;root IP&gt;<br>                 -m &lt;MAC Address&gt;<br>                 [-c &lt;config file&gt;]<br>```<br>| Option | Description |<br>| --- | --- |<br>| `-r &lt;root IP&gt;` | IP address of the network node to start on. |<br>| `-m &lt;MAC Address&gt;` | The MAC address to locate.  Can be in any form.  Ex: `11:22:33:44:55:66` or `112233445566` or `1122.3344.5566` |<br>| `-c &lt;config file&gt;` | The JSON configuration file to use. |<br><br>### GetMACS<br>```<br># mnet.py getmacs -r &lt;root IP&gt;<br>                 -o &lt;output CSV file&gt;<br>                 [-d &lt;mac depth&gt;]<br>                 [-c &lt;config file&gt;]<br>```<br>| Option | Description |<br>| --- | --- |<br>| `-r &lt;root IP&gt;` | IP address of the network node to start on. |<br>| `-o &lt;output CSV file&gt;` | The comma separated value (.csv) file that the output will be written to. |<br>| `-d &lt;max depth&gt;` | The maximum hop depth to discover, starting at the root node specified by `-r` |<br>| `-c &lt;config file&gt;` | The JSON configuration file to use. |<br><br><br>### Config<br>```<br># mnet.py config<br>```<br># Configuration File<br>The configuration file defines common parameters in a JSON format.<br>```<br>{<br>\t\"snmp\" : [<br>\t\t{ \"community\":\"private\",\t\"ver\":2 },<br>\t\t{ \"community\":\"public\",\t\t\"ver\":2 }<br>\t],<br>\t\"domains\" : [<br>\t\t\".company.net\",<br>\t\t\".company.com\"<br>\t],<br>\t\"discover\" : [<br>\t\t\"permit ip 10.0.0.0/8\",<br>\t\t\"permit host Router[1,2]\",<br>\t\t\"deny ip any\",<br>\t],<br> \t\"diagram\" : {<br>\t\t\"node_text_size\" : 10,<br>\t\t\"link_text_size\" : 9,<br>\t\t\"title_text_size\" : 15,<br>\t\t\"get_stack_members\" : 0,<br>\t\t\"get_vss_members\" : 0,<br>\t\t\"expand_stackwise\" : 0,<br>\t\t\"expand_vss\" : 0,<br>\t\t\"expand_lag\" : 1,<br>\t\t\"group_vpc\" : 0<br>    }<br>\t<br>}<br>```<br><br>| Block / Variable | Description |<br>| --- | --- |<br>| `snmp` | Defines a list of SNMP credentials.  When connecting to a node, each of these credentials is tried in order until one is successful. |<br>| `discover` | Defines a Cisco-style ACL. See the `Network Discovery` section. |<br>| `diagram` | Defines values used by the diagram module.  Detailed below in the *Diagram block* table. |<br><br>### Diagram block<br>| Variable | Type | Default Value | Description |<br>| --- | --- | --- | --- |<br>| `node_text_size` | integer | `10` | Node text size. |<br>| `link_text_size` | integer | `9` | Link text size. |<br>| `title_text_size` | integer | `15` |  Diagram title text size. |<br>| `get_stack_members` | bool | `0` | If set to `1`, nodes will include details about stackwise members. |<br>| `get_vss_members` | bool | `0` | If set to `1`, nodes will include details about VSS members. |<br>| `expand_stackwise` | bool | `0` | If set to `1`, nodes belonging to stackwise groups will be expanded to show each member as a node. |<br>| `expand_vss` | bool | `0` | If set to `1`, nodes belonging to VSS groups will be expanded to show each member as a node. |<br>| `expand_lag` | bool | `1` | If set to `1`, each link between nodes will be shown.  If set to `0`, links of the same logical link channel will be grouped and only the channel link will be shown. |<br>| `group_vpc` | bool | `0` | If set to `1`, VPC peers will be grouped together on the diagram, otherwise they will not be clustered. |<br><br># Diagram<br>mnet will attempt to collect the following information and include it in the generated diagram:<br>+ All devices (via CDP and LLDP)<br>+ Interface names<br>+ IP addresses<br>+ VLAN memberships<br>+ Etherchannel memberships (LACP only)<br>+ Identify trunk links<br>+ Identify switched links<br>+ Identify routed links<br>+ BGP Local AS<br>+ OSPF Router ID<br>+ HSRP Virtual IP<br>+ HSRP Priority<br>+ VSS Domain<br>+ Stackwise membership<br>+ VPC peerlink information<br><br>#### Diagram Formatting<br>+ Nodes<br>  + Circle nodes represent layer 2 switches.<br>  + Diamond nodes represent layer 3 switches or routers.<br>  + If a node has multiple borders then either VSS or StackWise is enabled.<br>    + VSS - Will always have a double border.<br>    + StackWise - The number of borders denotes the number of switches in the stack.<br>  + If the configuration specifies, VSS/VPC/Stackwise nodes will be grouped in larger squares.<br>+ Links<br>  + Links are shown with arrowed lines.  The end with no arrow is the *parent* and the end with the arrow is the *child*, such that the arrangement is *parent*-&gt;*child*.<br>  + If a link says *P:gi0/1* , *C:gi1/4* then the parent node's connection is on port gi0/1 and the child node's connection is on port gi1/4.<br>  + If the link is part of an Etherchannel the etherchannel's interface name will also be shown.  Since an etherchannel interface is locally significiant, a *P:* and *C:* will also be shown if available.<br><br>#### Examples<br><br>Example 1<br>![MNet-Diagram Ex1](http://i.imgur.com/Mny7PLl.png \"MNet-Graph Ex1\")<br><br>Example 2<br>![MNet-Diagram Ex2](http://i.imgur.com/BuXnzWG.png \"MNet-Graph Ex2\")<br><br>Example 3<br>![MNet-Diagram Ex3](http://i.imgur.com/i1dqM09.png \"MNet-Graph Ex3\")<br><br># TraceMAC<br><br>#### Examples<br><br>The below example shows a trace for MAC address `00:23:68:63:75:70` starting<br>at node `10.10.0.3`.  The MAC address is found on switch `IDF3_D` on port<br>`Gi0/11`.<br><br>```<br># mnet.py tracemac -r 10.10.0.3 -m 0023.6863.7570<br>MNet Suite v0.7<br>Written by Michael Laforest &lt;mjlaforest@gmail.com&gt;<br><br>     Config file: ./mnet.conf<br>       Root node: 10.10.0.3<br>     MAC address: 0023.6863.7570<br><br>Start trace.<br>------------<br>IDF1_A (10.10.0.3)<br>          VLAN: 1<br>          Port: Gi1/3<br>     Next Node: IDF1_B<br>  Next Node IP: 10.10.0.2<br>------------<br>IDF1_B (10.10.0.2)<br>          VLAN: 1<br>          Port: Gi0/24<br>     Next Node: IDF3_D<br>  Next Node IP: 10.10.0.6<br>------------<br>IDF3_D (10.10.0.6)<br>          VLAN: 1<br>          Port: Gi0/11<br>------------<br>Trace complete.<br>```<br># FAQ<br><br>#### Q1 - My diagram is too large.  I only want to diagram part of my network.<br>Try changing the config `discover` ACL to narrow down the scope of your discovery.  You can explicitly deny CIDR's or host name regex patterns if you do not want them included in your diagram.  <br>  <br>#### Q2 - Where is the config file?<br>Create a new one with<br>`# mnet.py config &gt; mnet.conf`<br><br>#### Q3 - I need a diagram with less proprietary information. Can I get one without IPs or serial numbers?<br>You can change the text inside each node by editing the config option `diagram\\node_text`. Below is an example that would produce a minimal information diagram:<br><br>```<br>\"diagram\" : {<br>\tnode_text = '&lt;font point-size=\"10\"&gt;&lt;b&gt;{node.name}&lt;/b&gt;&lt;/font&gt;&lt;br /&gt;{node.ios}&lt;br /&gt;{node.plat}'<br>}\t<br>``` <br>#### Q4 - How can I remove Cisco VoIP phones from my diagram?<br>```<br>\"discover\" : [<br>\t\"deny host ^SEP.*$\"<br>]<br>``` <br><br>[diag1]: https://github.com/MJL85/mnet/blob/master/docs/images/mnet_example.PNG \"Diagram 1\"\n          </div>"}, "last_serial": 3841254, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "c727f056794cdd2f71fa749c1dc5dd55", "sha256": "79f097708dcbc91b4667687824c45d2c81353fef8d8b34bfff62c9a0173d4aee"}, "downloads": -1, "filename": "mnet-0.10.tar.gz", "has_sig": false, "md5_digest": "c727f056794cdd2f71fa749c1dc5dd55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40429, "upload_time": "2018-05-07T15:01:08", "upload_time_iso_8601": "2018-05-07T15:01:08.672896Z", "url": "https://files.pythonhosted.org/packages/e8/dd/8df072034314cc5d0dbbaf44231bee6d57a64e5e7b6ede10c67c397ba130/mnet-0.10.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "53520178ca90d9053f4d4eed83f48292", "sha256": "a95cb1481575c68c116b8a5d4492d333c802bff4b1ce8ea1241dae5a04ef815e"}, "downloads": -1, "filename": "mnet-0.5.tar.gz", "has_sig": false, "md5_digest": "53520178ca90d9053f4d4eed83f48292", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22060, "upload_time": "2015-07-16T00:02:51", "upload_time_iso_8601": "2015-07-16T00:02:51.018446Z", "url": "https://files.pythonhosted.org/packages/bc/71/c6d4447910c4bb08f3bb7732488467cc1341d2f813b30ac892cf5dfcbef1/mnet-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "e868069667c511b925af9e7c4231b708", "sha256": "77fbabfba6f2e5ff6fc1d08dee141de45a66a134ade56ab6fb0b3c6d836ee7f4"}, "downloads": -1, "filename": "mnet-0.6.tar.gz", "has_sig": false, "md5_digest": "e868069667c511b925af9e7c4231b708", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23433, "upload_time": "2015-07-19T15:43:58", "upload_time_iso_8601": "2015-07-19T15:43:58.208961Z", "url": "https://files.pythonhosted.org/packages/21/cc/7ae1434bd3d329aa0c71f4d0de35081a9363a868d43836d7cc26e648409e/mnet-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "58c5197b95a83c6d570c0921880f682f", "sha256": "ffdcf4e8f8436d5e607d19f24c3657387d5ee474805dc2ddf564df77a16e70c7"}, "downloads": -1, "filename": "mnet-0.7.tar.gz", "has_sig": false, "md5_digest": "58c5197b95a83c6d570c0921880f682f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29606, "upload_time": "2015-07-25T19:48:35", "upload_time_iso_8601": "2015-07-25T19:48:35.664980Z", "url": "https://files.pythonhosted.org/packages/8b/c1/75231f1f71b0234b22d2109eaf1821eba8d4b14b2009f207156a5f0e9fb5/mnet-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "b7b3c525a169dee691cdab02ae71e3ef", "sha256": "ae2e01ddbef0237392fe9408dfa88ee2fd663aae5f918cf6a20cba4d104f9811"}, "downloads": -1, "filename": "mnet-0.8.tar.gz", "has_sig": false, "md5_digest": "b7b3c525a169dee691cdab02ae71e3ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32853, "upload_time": "2015-09-21T19:09:49", "upload_time_iso_8601": "2015-09-21T19:09:49.888489Z", "url": "https://files.pythonhosted.org/packages/d4/0a/5eab2e7a4082bd8d1ca7a4970917aeac7006f2588a25de8c14adc83cb65e/mnet-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c727f056794cdd2f71fa749c1dc5dd55", "sha256": "79f097708dcbc91b4667687824c45d2c81353fef8d8b34bfff62c9a0173d4aee"}, "downloads": -1, "filename": "mnet-0.10.tar.gz", "has_sig": false, "md5_digest": "c727f056794cdd2f71fa749c1dc5dd55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40429, "upload_time": "2018-05-07T15:01:08", "upload_time_iso_8601": "2018-05-07T15:01:08.672896Z", "url": "https://files.pythonhosted.org/packages/e8/dd/8df072034314cc5d0dbbaf44231bee6d57a64e5e7b6ede10c67c397ba130/mnet-0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:10 2020"}