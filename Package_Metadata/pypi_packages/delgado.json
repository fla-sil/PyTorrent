{"info": {"author": "Alfredo Deza", "author_email": "alfredodeza [at] gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Topic :: Software Development :: Build Tools", "Topic :: Utilities"], "description": "delgado\n=======\nListen for commands over a unix socket and execute them in the terminal.\n\nIt solves the problem of text editors not wanting to bundle a real terminal\nemulator.\n\n``delgado`` requires valid JSON objects to be fired over a predetermined UDS\n(Unix Domain Socket). Delgado has to know about what commands is authorized to\nexecute before running them, preventing arbitrary commands to be run).\n\nA very simple listener allowed to run ``ls`` only would look like this::\n\n    $ delgado run --allowed ls\n\nOn a different terminal, sending the JSON to that socket could be something\nlike::\n\n    $ echo '{\"ls\": [\"/tmp/foo\"]}' | nc -U  /tmp/delgado.sock\n\nThe echo pipes over to ``nc`` (BSD Netcat) that in turn sends the information\nto the socket. With the default logging levels, the output would then look like\nthis::\n\n    $ delgado run --allowed ls\n    --> Running command: [u'ls']\n\n.. note::\n    If you are planning on using ``netcat`` make sure it is the BSD version\n    that has support for UDS (using the ``-U`` flag). The GNU version will not\n    work. You can use *any* tool that can communicate over UDS.\n\n\nplugins\n-------\n``delgado`` was built with some modularity in mind, by default you get the\n``py.test`` plugin which will run the server and listen for ``py.test`` commands\nonly.\n\nThe plugins use ``setuptools`` entry points. If you want a new plugin to be\navailable, this is what it should have on its ``setup.py`` file::\n\n    setup(\n        ...\n        entry_points = dict(\n            delgado_handlers = [\n                'my_command = my_package.my_module:MyClass',\n            ],\n        ),\n\nThe ``MyClass`` should be a class that accepts ``sys.argv`` as its argument,\n``delgado`` will pass that in at instantiation and call a ``parse_args``\nmethod.\n\nThis is how the ``py.test`` plugin looks like for example::\n\n\n    class Pytest(object):\n\n        help_menu = 'A handler for running py.test commands'\n        _help = \"\"\"\n    Run a base socket listener that allows py.test commands.\n\n    --socket-location   The location for the socket (defaults\n                        to /tmp/pytest.sock)\n        \"\"\"\n\n        def __init__(self, argv):\n            self.argv = argv\n\n        def parse_args(self):\n            ...", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/alfredodeza/delgado", "keywords": "commands,unix,socket,execute,terminal", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "delgado", "package_url": "https://pypi.org/project/delgado/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/delgado/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/alfredodeza/delgado"}, "release_url": "https://pypi.org/project/delgado/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Command executor", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Listen for commands over a unix socket and execute them in the terminal.</p>\n<p>It solves the problem of text editors not wanting to bundle a real terminal\nemulator.</p>\n<p><tt>delgado</tt> requires valid JSON objects to be fired over a predetermined UDS\n(Unix Domain Socket). Delgado has to know about what commands is authorized to\nexecute before running them, preventing arbitrary commands to be run).</p>\n<p>A very simple listener allowed to run <tt>ls</tt> only would look like this:</p>\n<pre>$ delgado run --allowed ls\n</pre>\n<p>On a different terminal, sending the JSON to that socket could be something\nlike:</p>\n<pre>$ echo '{\"ls\": [\"/tmp/foo\"]}' | nc -U  /tmp/delgado.sock\n</pre>\n<p>The echo pipes over to <tt>nc</tt> (BSD Netcat) that in turn sends the information\nto the socket. With the default logging levels, the output would then look like\nthis:</p>\n<pre>$ delgado run --allowed ls\n--&gt; Running command: [u'ls']\n</pre>\n<div>\n<p>Note</p>\n<p>If you are planning on using <tt>netcat</tt> make sure it is the BSD version\nthat has support for UDS (using the <tt><span class=\"pre\">-U</span></tt> flag). The GNU version will not\nwork. You can use <em>any</em> tool that can communicate over UDS.</p>\n</div>\n<div id=\"plugins\">\n<h2>plugins</h2>\n<p><tt>delgado</tt> was built with some modularity in mind, by default you get the\n<tt>py.test</tt> plugin which will run the server and listen for <tt>py.test</tt> commands\nonly.</p>\n<p>The plugins use <tt>setuptools</tt> entry points. If you want a new plugin to be\navailable, this is what it should have on its <tt>setup.py</tt> file:</p>\n<pre>setup(\n    ...\n    entry_points = dict(\n        delgado_handlers = [\n            'my_command = my_package.my_module:MyClass',\n        ],\n    ),\n</pre>\n<p>The <tt>MyClass</tt> should be a class that accepts <tt>sys.argv</tt> as its argument,\n<tt>delgado</tt> will pass that in at instantiation and call a <tt>parse_args</tt>\nmethod.</p>\n<p>This is how the <tt>py.test</tt> plugin looks like for example:</p>\n<pre>class Pytest(object):\n\n    help_menu = 'A handler for running py.test commands'\n    _help = \"\"\"\nRun a base socket listener that allows py.test commands.\n\n--socket-location   The location for the socket (defaults\n                    to /tmp/pytest.sock)\n    \"\"\"\n\n    def __init__(self, argv):\n        self.argv = argv\n\n    def parse_args(self):\n        ...\n</pre>\n</div>\n\n          </div>"}, "last_serial": 788894, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0c89e4d94f9f5b00e30bc01fa09c8c8a", "sha256": "41076c075cf55e398b7d83c603975b1bd41ef4ad77b5c9e0a13a3c280c3d5ce1"}, "downloads": -1, "filename": "delgado-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0c89e4d94f9f5b00e30bc01fa09c8c8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14103, "upload_time": "2013-04-30T12:27:38", "upload_time_iso_8601": "2013-04-30T12:27:38.540736Z", "url": "https://files.pythonhosted.org/packages/9b/13/384976b922791294b1c683b8b47cfe6f1206b9f97668287b16f24a0dce71/delgado-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0c89e4d94f9f5b00e30bc01fa09c8c8a", "sha256": "41076c075cf55e398b7d83c603975b1bd41ef4ad77b5c9e0a13a3c280c3d5ce1"}, "downloads": -1, "filename": "delgado-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0c89e4d94f9f5b00e30bc01fa09c8c8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14103, "upload_time": "2013-04-30T12:27:38", "upload_time_iso_8601": "2013-04-30T12:27:38.540736Z", "url": "https://files.pythonhosted.org/packages/9b/13/384976b922791294b1c683b8b47cfe6f1206b9f97668287b16f24a0dce71/delgado-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:12 2020"}