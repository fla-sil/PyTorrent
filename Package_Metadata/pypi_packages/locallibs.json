{"info": {"author": "Md. Sabuj Sarker", "author_email": "md.sabuj.sarker@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Local/Under Development Library Management Tool for Python Developers\n=====================================================================\n\nOften it happens that pip and requirements.txt is not enough for Python developers to automate importing and deployment tasks. The problem is more severe when you yourself is a library/framework developer. And here is a tool for you that will help you mitigate the pains.\n\nWhen you are a Python library/framework/module developer.\n---------------------------------------------------------\n\nBeing a Python library/framework developer myself - some of which are public and some of which are private - I never feel it good to deploy it to PyPi and reinstall that using pip for using in other projects I am working on that need that library. Also, I cannot just add that to external-library-list in my IDEs in every single project or in different IDEs I use.\n\nSo, I needed a system that would help me import (and/or deploy with respective project) all the local modules under development, in private projects or modules that I did not put on version control or on PyPi. I was planning a simple solution.\n\nWhen you just need to add modules from local file system\n--------------------------------------------------------\n\nIt is not the case that only those library/framework/module developers need such system. Many other type of Python developers also need this. For example, you colleague has sent you a module that you won't add into version control and that might be updated later - so you will copy-paste that module in a folder. Or, you are using an old library or a library that does not exist in PyPi or you are using your own module that you use personally. There are a lot of other possibilities.\n\nDesign/Planning of the system.\n------------------------------\n\n1. A plain text file named ``.locallibs`` will be placed in the project root or under ``src`` directory.\n2. ``.locallibs`` would contain absolute and relative paths to the module root dir. For example, let's say, you have a library called ``awesome`` and you put project codes under ``src`` directory. So, you have a directory called ``awesome`` under ``src``. Now, you will add it like this on a line in ``.locallibs`` file: ``/absolute-path-to-project-root/awesome-project/src``.\n3. At the beginning of your project code execution you will import locallibs module and execute function ``add_locallibs(BASE_DIR)`` where ``BASE_DIR`` is the directory where ``.locallibs`` file lives. This base dir can be relative path, absolute path, a path inside the project or anywhere else.\n4. In ``.locallibs`` file empty lines will be ignored, lines starting with ``#`` will be considered comments. Lines starting with ``:an_identifier`` and before any path is added will be considered as options.\n5. When you need to ship those modules/code with your project but do not want that to be checked into the version control you just run a command ``locallibs collect`` and it will copy everything from those base paths to ``_locallibs`` directory inside the directory where ``.locallibs`` lives.\n6. When using ``locallibs`` you should add ``.locallibs`` and ``_locallibs`` to your version control ignore configs, e.g. ``.gitignore``\n\nAbout the developer\n-------------------\n\nMd. Sabuj Sarker md.sabuj.sarker@gmail.com +8801868363600 A Software Engineer, Project Manager, Trainer, Author.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SabujXi/locallibs", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "locallibs", "package_url": "https://pypi.org/project/locallibs/", "platform": "", "project_url": "https://pypi.org/project/locallibs/", "project_urls": {"Homepage": "https://github.com/SabujXi/locallibs"}, "release_url": "https://pypi.org/project/locallibs/0.1.1.dev1/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Local Library Management Tool", "version": "0.1.1.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Often it happens that pip and requirements.txt is not enough for Python developers to automate importing and deployment tasks. The problem is more severe when you yourself is a library/framework developer. And here is a tool for you that will help you mitigate the pains.</p>\n<div id=\"when-you-are-a-python-library-framework-module-developer\">\n<h2>When you are a Python library/framework/module developer.</h2>\n<p>Being a Python library/framework developer myself - some of which are public and some of which are private - I never feel it good to deploy it to PyPi and reinstall that using pip for using in other projects I am working on that need that library. Also, I cannot just add that to external-library-list in my IDEs in every single project or in different IDEs I use.</p>\n<p>So, I needed a system that would help me import (and/or deploy with respective project) all the local modules under development, in private projects or modules that I did not put on version control or on PyPi. I was planning a simple solution.</p>\n</div>\n<div id=\"when-you-just-need-to-add-modules-from-local-file-system\">\n<h2>When you just need to add modules from local file system</h2>\n<p>It is not the case that only those library/framework/module developers need such system. Many other type of Python developers also need this. For example, you colleague has sent you a module that you won\u2019t add into version control and that might be updated later - so you will copy-paste that module in a folder. Or, you are using an old library or a library that does not exist in PyPi or you are using your own module that you use personally. There are a lot of other possibilities.</p>\n</div>\n<div id=\"design-planning-of-the-system\">\n<h2>Design/Planning of the system.</h2>\n<ol>\n<li>A plain text file named <tt>.locallibs</tt> will be placed in the project root or under <tt>src</tt> directory.</li>\n<li><tt>.locallibs</tt> would contain absolute and relative paths to the module root dir. For example, let\u2019s say, you have a library called <tt>awesome</tt> and you put project codes under <tt>src</tt> directory. So, you have a directory called <tt>awesome</tt> under <tt>src</tt>. Now, you will add it like this on a line in <tt>.locallibs</tt> file: <tt><span class=\"pre\">/absolute-path-to-project-root/awesome-project/src</span></tt>.</li>\n<li>At the beginning of your project code execution you will import locallibs module and execute function <tt>add_locallibs(BASE_DIR)</tt> where <tt>BASE_DIR</tt> is the directory where <tt>.locallibs</tt> file lives. This base dir can be relative path, absolute path, a path inside the project or anywhere else.</li>\n<li>In <tt>.locallibs</tt> file empty lines will be ignored, lines starting with <tt>#</tt> will be considered comments. Lines starting with <tt>:an_identifier</tt> and before any path is added will be considered as options.</li>\n<li>When you need to ship those modules/code with your project but do not want that to be checked into the version control you just run a command <tt>locallibs collect</tt> and it will copy everything from those base paths to <tt>_locallibs</tt> directory inside the directory where <tt>.locallibs</tt> lives.</li>\n<li>When using <tt>locallibs</tt> you should add <tt>.locallibs</tt> and <tt>_locallibs</tt> to your version control ignore configs, e.g. <tt>.gitignore</tt></li>\n</ol>\n</div>\n<div id=\"about-the-developer\">\n<h2>About the developer</h2>\n<p>Md. Sabuj Sarker <a href=\"mailto:md.sabuj.sarker%40gmail.com\">md<span>.</span>sabuj<span>.</span>sarker<span>@</span>gmail<span>.</span>com</a> +8801868363600 A Software Engineer, Project Manager, Trainer, Author.</p>\n</div>\n\n          </div>"}, "last_serial": 6076345, "releases": {"0.1.0.dev1": [{"comment_text": "", "digests": {"md5": "7b21b0ddb040ec49281559385f46f0f3", "sha256": "390e6f7edb9991c589c94da038582fe12cb462c450351ff9e97c41dba420c47b"}, "downloads": -1, "filename": "locallibs-0.1.0.dev1.tar.gz", "has_sig": false, "md5_digest": "7b21b0ddb040ec49281559385f46f0f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3502, "upload_time": "2019-11-04T14:56:26", "upload_time_iso_8601": "2019-11-04T14:56:26.265485Z", "url": "https://files.pythonhosted.org/packages/96/02/f8c25a87bdaca970d6c80ba49fc225eb3e1e135e1897af426b8e214c48d4/locallibs-0.1.0.dev1.tar.gz", "yanked": false}], "0.1.0.dev2": [{"comment_text": "", "digests": {"md5": "e9076c96f145a0c5fe7e1d41ba4628f4", "sha256": "9325c6fc9c922a2aee976e836c8acccc0edd6a3fb178fc4565a0719f49aff8ad"}, "downloads": -1, "filename": "locallibs-0.1.0.dev2.tar.gz", "has_sig": false, "md5_digest": "e9076c96f145a0c5fe7e1d41ba4628f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3585, "upload_time": "2019-11-04T15:09:09", "upload_time_iso_8601": "2019-11-04T15:09:09.563973Z", "url": "https://files.pythonhosted.org/packages/c5/45/9fd6c1cb4dea32a432f0babd3fc8081f03f448ece2f58cbbb5bc005ba7ca/locallibs-0.1.0.dev2.tar.gz", "yanked": false}], "0.1.0.dev3": [{"comment_text": "", "digests": {"md5": "c15ac176f8772e4f722290b98a8038f7", "sha256": "6a59e7e12b9ad96016eca344b22ab9292766e712f1ac97f02373ce71f636d138"}, "downloads": -1, "filename": "locallibs-0.1.0.dev3.tar.gz", "has_sig": false, "md5_digest": "c15ac176f8772e4f722290b98a8038f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3709, "upload_time": "2019-11-04T15:49:44", "upload_time_iso_8601": "2019-11-04T15:49:44.008514Z", "url": "https://files.pythonhosted.org/packages/05/02/32a284323c2362a24bc8d7ad48b01dc9c5d5fddbd5d13fc0efc1943ea173/locallibs-0.1.0.dev3.tar.gz", "yanked": false}], "0.1.1.dev1": [{"comment_text": "", "digests": {"md5": "77857e427faa92dec9f0aa6ca36a9d7a", "sha256": "7edaee921f3bfcf9228f28a45a6b5169213fa4c7d9a6d24bc40032ee1394cf99"}, "downloads": -1, "filename": "locallibs-0.1.1.dev1.tar.gz", "has_sig": false, "md5_digest": "77857e427faa92dec9f0aa6ca36a9d7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3723, "upload_time": "2019-11-04T16:03:04", "upload_time_iso_8601": "2019-11-04T16:03:04.542788Z", "url": "https://files.pythonhosted.org/packages/0a/f7/c938fcdada0ec92d41c63f5caf6ae230207b71dcbeb2d47f38bdb15a3c40/locallibs-0.1.1.dev1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77857e427faa92dec9f0aa6ca36a9d7a", "sha256": "7edaee921f3bfcf9228f28a45a6b5169213fa4c7d9a6d24bc40032ee1394cf99"}, "downloads": -1, "filename": "locallibs-0.1.1.dev1.tar.gz", "has_sig": false, "md5_digest": "77857e427faa92dec9f0aa6ca36a9d7a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3723, "upload_time": "2019-11-04T16:03:04", "upload_time_iso_8601": "2019-11-04T16:03:04.542788Z", "url": "https://files.pythonhosted.org/packages/0a/f7/c938fcdada0ec92d41c63f5caf6ae230207b71dcbeb2d47f38bdb15a3c40/locallibs-0.1.1.dev1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:37 2020"}