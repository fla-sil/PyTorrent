{"info": {"author": "Paul Dyson", "author_email": "pwdyson@yahoo.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Linguistic"], "description": ".. image:: https://img.shields.io/pypi/v/inflect.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/inflect.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/inflect\n\n.. image:: https://img.shields.io/travis/jazzband/inflect/master.svg\n   :target: https://travis-ci.org/jazzband/inflect\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. .. image:: https://img.shields.io/appveyor/ci/jaraco/skeleton/master.svg\n..    :target: https://ci.appveyor.com/project/jaraco/skeleton/branch/master\n\n.. .. image:: https://readthedocs.org/projects/skeleton/badge/?version=latest\n..    :target: https://skeleton.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://coveralls.io/repos/github/jazzband/inflect/badge.svg?branch=master\n    :target: https://coveralls.io/github/jazzband/inflect?branch=master\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\n.. image:: https://tidelift.com/badges/package/pypi/inflect\n   :target: https://tidelift.com/subscription/pkg/pypi-inflect?utm_source=pypi-inflect&utm_medium=readme\n\nThis is a `Jazzband <https://jazzband.co>`_ project. By contributing you agree to abide by the `Contributor Code of Conduct <https://jazzband.co/about/conduct>`_ and follow the `guidelines <https://jazzband.co/about/guidelines>`_.\n\nNAME\n====\n\ninflect.py - Correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.\n\nSYNOPSIS\n========\n\n.. code-block:: python\n\n    import inflect\n\n    p = inflect.engine()\n\n    # METHODS:\n\n    # plural plural_noun plural_verb plural_adj singular_noun no num\n    # compare compare_nouns compare_nouns compare_adjs\n    # a an\n    # present_participle\n    # ordinal number_to_words\n    # join\n    # inflect classical gender\n    # defnoun defverb defadj defa defan\n\n\n    # UNCONDITIONALLY FORM THE PLURAL\n\n    print(\"The plural of \", word, \" is \", p.plural(word))\n\n\n    # CONDITIONALLY FORM THE PLURAL\n\n    print(\"I saw\", cat_count, p.plural(\"cat\", cat_count))\n\n\n    # FORM PLURALS FOR SPECIFIC PARTS OF SPEECH\n\n    print(\n        p.plural_noun(\"I\", N1),\n        p.plural_verb(\"saw\", N1),\n        p.plural_adj(\"my\", N2),\n        p.plural_noun(\"saw\", N2),\n    )\n\n\n    # FORM THE SINGULAR OF PLURAL NOUNS\n\n    print(\"The singular of \", word, \" is \", p.singular_noun(word))\n\n    # SELECT THE GENDER OF SINGULAR PRONOUNS\n\n    print(p.singular_noun(\"they\"))  # 'it'\n    p.gender(\"f\")\n    print(p.singular_noun(\"they\"))  # 'she'\n\n\n    # DEAL WITH \"0/1/N\" -> \"no/1/N\" TRANSLATION:\n\n    print(\"There \", p.plural_verb(\"was\", errors), p.no(\" error\", errors))\n\n\n    # USE DEFAULT COUNTS:\n\n    print(\n        p.num(N1, \"\"),\n        p.plural(\"I\"),\n        p.plural_verb(\" saw\"),\n        p.num(N2),\n        p.plural_noun(\" saw\"),\n    )\n    print(\"There \", p.num(errors, \"\"), p.plural_verb(\"was\"), p.no(\" error\"))\n\n\n    # COMPARE TWO WORDS \"NUMBER-INSENSITIVELY\":\n\n    if p.compare(word1, word2):\n        print(\"same\")\n    if p.compare_nouns(word1, word2):\n        print(\"same noun\")\n    if p.compare_verbs(word1, word2):\n        print(\"same verb\")\n    if p.compare_adjs(word1, word2):\n        print(\"same adj.\")\n\n\n    # ADD CORRECT \"a\" OR \"an\" FOR A GIVEN WORD:\n\n    print(\"Did you want \", p.a(thing), \" or \", p.an(idea))\n\n\n    # CONVERT NUMERALS INTO ORDINALS (i.e. 1->1st, 2->2nd, 3->3rd, etc.)\n\n    print(\"It was\", p.ordinal(position), \" from the left\\n\")\n\n    # CONVERT NUMERALS TO WORDS (i.e. 1->\"one\", 101->\"one hundred and one\", etc.)\n    # RETURNS A SINGLE STRING...\n\n    words = p.number_to_words(1234)\n    # \"one thousand, two hundred and thirty-four\"\n    words = p.number_to_words(p.ordinal(1234))\n    # \"one thousand, two hundred and thirty-fourth\"\n\n\n    # GET BACK A LIST OF STRINGS, ONE FOR EACH \"CHUNK\"...\n\n    words = p.number_to_words(1234, wantlist=True)\n    # (\"one thousand\",\"two hundred and thirty-four\")\n\n\n    # OPTIONAL PARAMETERS CHANGE TRANSLATION:\n\n    words = p.number_to_words(12345, group=1)\n    # \"one, two, three, four, five\"\n\n    words = p.number_to_words(12345, group=2)\n    # \"twelve, thirty-four, five\"\n\n    words = p.number_to_words(12345, group=3)\n    # \"one twenty-three, forty-five\"\n\n    words = p.number_to_words(1234, andword=\"\")\n    # \"one thousand, two hundred thirty-four\"\n\n    words = p.number_to_words(1234, andword=\", plus\")\n    # \"one thousand, two hundred, plus thirty-four\"\n    # TODO: I get no comma before plus: check perl\n\n    words = p.number_to_words(555_1202, group=1, zero=\"oh\")\n    # \"five, five, five, one, two, oh, two\"\n\n    words = p.number_to_words(555_1202, group=1, one=\"unity\")\n    # \"five, five, five, unity, two, oh, two\"\n\n    words = p.number_to_words(123.456, group=1, decimal=\"mark\")\n    # \"one two three mark four five six\"\n    # TODO: DOCBUG: perl gives commas here as do I\n\n    # LITERAL STYLE ONLY NAMES NUMBERS LESS THAN A CERTAIN THRESHOLD...\n\n    words = p.number_to_words(9, threshold=10)  # \"nine\"\n    words = p.number_to_words(10, threshold=10)  # \"ten\"\n    words = p.number_to_words(11, threshold=10)  # \"11\"\n    words = p.number_to_words(1000, threshold=10)  # \"1,000\"\n\n    # JOIN WORDS INTO A LIST:\n\n    mylist = join((\"apple\", \"banana\", \"carrot\"))\n    # \"apple, banana, and carrot\"\n\n    mylist = join((\"apple\", \"banana\"))\n    # \"apple and banana\"\n\n    mylist = join((\"apple\", \"banana\", \"carrot\"), final_sep=\"\")\n    # \"apple, banana and carrot\"\n\n\n    # REQUIRE \"CLASSICAL\" PLURALS (EG: \"focus\"->\"foci\", \"cherub\"->\"cherubim\")\n\n    p.classical()  # USE ALL CLASSICAL PLURALS\n\n    p.classical(all=True)  # USE ALL CLASSICAL PLURALS\n    p.classical(all=False)  # SWITCH OFF CLASSICAL MODE\n\n    p.classical(zero=True)  #  \"no error\" INSTEAD OF \"no errors\"\n    p.classical(zero=False)  #  \"no errors\" INSTEAD OF \"no error\"\n\n    p.classical(herd=True)  #  \"2 buffalo\" INSTEAD OF \"2 buffalos\"\n    p.classical(herd=False)  #  \"2 buffalos\" INSTEAD OF \"2 buffalo\"\n\n    p.classical(persons=True)  # \"2 chairpersons\" INSTEAD OF \"2 chairpeople\"\n    p.classical(persons=False)  # \"2 chairpeople\" INSTEAD OF \"2 chairpersons\"\n\n    p.classical(ancient=True)  # \"2 formulae\" INSTEAD OF \"2 formulas\"\n    p.classical(ancient=False)  # \"2 formulas\" INSTEAD OF \"2 formulae\"\n\n\n    # INTERPOLATE \"plural()\", \"plural_noun()\", \"plural_verb()\", \"plural_adj()\", \"singular_noun()\",\n    # a()\", \"an()\", \"num()\" AND \"ordinal()\" WITHIN STRINGS:\n\n    print(p.inflect(\"The plural of {0} is plural('{0}')\".format(word)))\n    print(p.inflect(\"The singular of {0} is singular_noun('{0}')\".format(word)))\n    print(p.inflect(\"I saw {0} plural('cat',{0})\".format(cat_count)))\n    print(\n        p.inflect(\n            \"plural('I',{0}) \"\n            \"plural_verb('saw',{0}) \"\n            \"plural('a',{1}) \"\n            \"plural_noun('saw',{1})\".format(N1, N2)\n        )\n    )\n    print(\n        p.inflect(\n            \"num({0}, False)plural('I') \"\n            \"plural_verb('saw') \"\n            \"num({1}, False)plural('a') \"\n            \"plural_noun('saw')\".format(N1, N2)\n        )\n    )\n    print(p.inflect(\"I saw num({0}) plural('cat')\\nnum()\".format(cat_count)))\n    print(p.inflect(\"There plural_verb('was',{0}) no('error',{0})\".format(errors)))\n    print(p.inflect(\"There num({0}, False)plural_verb('was') no('error')\".format(errors)))\n    print(p.inflect(\"Did you want a('{0}') or an('{1}')\".format(thing, idea)))\n    print(p.inflect(\"It was ordinal('{0}') from the left\".format(position)))\n\n\n    # ADD USER-DEFINED INFLECTIONS (OVERRIDING INBUILT RULES):\n\n    p.defnoun(\"VAX\", \"VAXen\")  # SINGULAR => PLURAL\n\n    p.defverb(\n        \"will\",  # 1ST PERSON SINGULAR\n        \"shall\",  # 1ST PERSON PLURAL\n        \"will\",  # 2ND PERSON SINGULAR\n        \"will\",  # 2ND PERSON PLURAL\n        \"will\",  # 3RD PERSON SINGULAR\n        \"will\",  # 3RD PERSON PLURAL\n    )\n\n    p.defadj(\"hir\", \"their\")  # SINGULAR => PLURAL\n\n    p.defa(\"h\")  # \"AY HALWAYS SEZ 'HAITCH'!\"\n\n    p.defan(\"horrendous.*\")  # \"AN HORRENDOUS AFFECTATION\"\n\n\nDESCRIPTION\n===========\n\nThe methods of the class ``engine`` in module ``inflect.py`` provide plural\ninflections, singular noun inflections, \"a\"/\"an\" selection for English words,\nand manipulation of numbers as words.\n\nPlural forms of all nouns, most verbs, and some adjectives are\nprovided. Where appropriate, \"classical\" variants (for example: \"brother\" ->\n\"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n\nSingle forms of nouns are also provided. The gender of singular pronouns\ncan be chosen (for example \"they\" -> \"it\" or \"she\" or \"he\" or \"they\").\n\nPronunciation-based \"a\"/\"an\" selection is provided for all English\nwords, and most initialisms.\n\nIt is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd)\nand to English words (\"one\", \"two\", \"three\").\n\nIn generating these inflections, ``inflect.py`` follows the Oxford\nEnglish Dictionary and the guidelines in Fowler's Modern English\nUsage, preferring the former where the two disagree.\n\nThe module is built around standard British spelling, but is designed\nto cope with common American variants as well. Slang, jargon, and\nother English dialects are *not* explicitly catered for.\n\nWhere two or more inflected forms exist for a single word (typically a\n\"classical\" form and a \"modern\" form), ``inflect.py`` prefers the\nmore common form (typically the \"modern\" one), unless \"classical\"\nprocessing has been specified\n(see `MODERN VS CLASSICAL INFLECTIONS`).\n\nFORMING PLURALS AND SINGULARS\n=============================\n\nInflecting Plurals and Singulars\n--------------------------------\n\nAll of the ``plural...`` plural inflection methods take the word to be\ninflected as their first argument and return the corresponding inflection.\nNote that all such methods expect the *singular* form of the word. The\nresults of passing a plural form are undefined (and unlikely to be correct).\nSimilarly, the ``si...`` singular inflection method expects the *plural*\nform of the word.\n\nThe ``plural...`` methods also take an optional second argument,\nwhich indicates the grammatical \"number\" of the word (or of another word\nwith which the word being inflected must agree). If the \"number\" argument is\nsupplied and is not ``1`` (or ``\"one\"`` or ``\"a\"``, or some other adjective that\nimplies the singular), the plural form of the word is returned. If the\n\"number\" argument *does* indicate singularity, the (uninflected) word\nitself is returned. If the number argument is omitted, the plural form\nis returned unconditionally.\n\nThe ``si...`` method takes a second argument in a similar fashion. If it is\nsome form of the number ``1``, or is omitted, the singular form is returned.\nOtherwise the plural is returned unaltered.\n\n\nThe various methods of ``inflect.engine`` are:\n\n\n\n``plural_noun(word, count=None)``\n\n The method ``plural_noun()`` takes a *singular* English noun or\n pronoun and returns its plural. Pronouns in the nominative (\"I\" ->\n \"we\") and accusative (\"me\" -> \"us\") cases are handled, as are\n possessive pronouns (\"mine\" -> \"ours\").\n\n\n``plural_verb(word, count=None)``\n\n The method ``plural_verb()`` takes the *singular* form of a\n conjugated verb (that is, one which is already in the correct \"person\"\n and \"mood\") and returns the corresponding plural conjugation.\n\n\n``plural_adj(word, count=None)``\n\n The method ``plural_adj()`` takes the *singular* form of\n certain types of adjectives and returns the corresponding plural form.\n Adjectives that are correctly handled include: \"numerical\" adjectives\n (\"a\" -> \"some\"), demonstrative adjectives (\"this\" -> \"these\", \"that\" ->\n \"those\"), and possessives (\"my\" -> \"our\", \"cat's\" -> \"cats'\", \"child's\"\n -> \"childrens'\", etc.)\n\n\n``plural(word, count=None)``\n\n The method ``plural()`` takes a *singular* English noun,\n pronoun, verb, or adjective and returns its plural form. Where a word\n has more than one inflection depending on its part of speech (for\n example, the noun \"thought\" inflects to \"thoughts\", the verb \"thought\"\n to \"thought\"), the (singular) noun sense is preferred to the (singular)\n verb sense.\n\n Hence ``plural(\"knife\")`` will return \"knives\" (\"knife\" having been treated\n as a singular noun), whereas ``plural(\"knifes\")`` will return \"knife\"\n (\"knifes\" having been treated as a 3rd person singular verb).\n\n The inherent ambiguity of such cases suggests that,\n where the part of speech is known, ``plural_noun``, ``plural_verb``, and\n ``plural_adj`` should be used in preference to ``plural``.\n\n\n``singular_noun(word, count=None)``\n\n The method ``singular_noun()`` takes a *plural* English noun or\n pronoun and returns its singular. Pronouns in the nominative (\"we\" ->\n \"I\") and accusative (\"us\" -> \"me\") cases are handled, as are\n possessive pronouns (\"ours\" -> \"mine\"). When third person\n singular pronouns are returned they take the neuter gender by default\n (\"they\" -> \"it\"), not (\"they\"-> \"she\") nor (\"they\" -> \"he\"). This can be\n changed with ``gender()``.\n\nNote that all these methods ignore any whitespace surrounding the\nword being inflected, but preserve that whitespace when the result is\nreturned. For example, ``plural(\" cat  \")`` returns \" cats  \".\n\n\n``gender(genderletter)``\n\n The third person plural pronoun takes the same form for the female, male and\n neuter (e.g. \"they\"). The singular however, depends upon gender (e.g. \"she\",\n \"he\", \"it\" and \"they\" -- \"they\" being the gender neutral form.) By default\n ``singular_noun`` returns the neuter form, however, the gender can be selected with\n the ``gender`` method. Pass the first letter of the gender to\n ``gender`` to return the f(eminine), m(asculine), n(euter) or t(hey)\n form of the singular. e.g.\n gender('f') followed by singular_noun('themselves') returns 'herself'.\n\nNumbered plurals\n----------------\n\nThe ``plural...`` methods return only the inflected word, not the count that\nwas used to inflect it. Thus, in order to produce \"I saw 3 ducks\", it\nis necessary to use:\n\n.. code-block:: python\n\n    print(\"I saw\", N, p.plural_noun(animal, N))\n\nSince the usual purpose of producing a plural is to make it agree with\na preceding count, inflect.py provides a method\n(``no(word, count)``) which, given a word and a(n optional) count, returns the\ncount followed by the correctly inflected word. Hence the previous\nexample can be rewritten:\n\n.. code-block:: python\n\n    print(\"I saw \", p.no(animal, N))\n\nIn addition, if the count is zero (or some other term which implies\nzero, such as ``\"zero\"``, ``\"nil\"``, etc.) the count is replaced by the\nword \"no\". Hence, if ``N`` had the value zero, the previous example\nwould print (the somewhat more elegant)::\n\n    I saw no animals\n\nrather than::\n\n    I saw 0 animals\n\nNote that the name of the method is a pun: the method\nreturns either a number (a *No.*) or a ``\"no\"``, in front of the\ninflected word.\n\n\nReducing the number of counts required\n--------------------------------------\n\nIn some contexts, the need to supply an explicit count to the various\n``plural...`` methods makes for tiresome repetition. For example:\n\n.. code-block:: python\n\n    print(\n        plural_adj(\"This\", errors),\n        plural_noun(\" error\", errors),\n        plural_verb(\" was\", errors),\n        \" fatal.\",\n    )\n\ninflect.py therefore provides a method\n(``num(count=None, show=None)``) which may be used to set a persistent \"default number\"\nvalue. If such a value is set, it is subsequently used whenever an\noptional second \"number\" argument is omitted. The default value thus set\ncan subsequently be removed by calling ``num()`` with no arguments.\nHence we could rewrite the previous example:\n\n.. code-block:: python\n\n    p.num(errors)\n    print(p.plural_adj(\"This\"), p.plural_noun(\" error\"), p.plural_verb(\" was\"), \"fatal.\")\n    p.num()\n\nNormally, ``num()`` returns its first argument, so that it may also\nbe \"inlined\" in contexts like:\n\n.. code-block:: python\n\n    print(p.num(errors), p.plural_noun(\" error\"), p.plural_verb(\" was\"), \" detected.\")\n    if severity > 1:\n        print(\n            p.plural_adj(\"This\"), p.plural_noun(\" error\"), p.plural_verb(\" was\"), \"fatal.\"\n        )\n\nHowever, in certain contexts (see `INTERPOLATING INFLECTIONS IN STRINGS`)\nit is preferable that ``num()`` return an empty string. Hence ``num()``\nprovides an optional second argument. If that argument is supplied (that is, if\nit is defined) and evaluates to false, ``num`` returns an empty string\ninstead of its first argument. For example:\n\n.. code-block:: python\n\n    print(p.num(errors, 0), p.no(\"error\"), p.plural_verb(\" was\"), \" detected.\")\n    if severity > 1:\n        print(\n            p.plural_adj(\"This\"), p.plural_noun(\" error\"), p.plural_verb(\" was\"), \"fatal.\"\n        )\n\n\n\nNumber-insensitive equality\n---------------------------\n\ninflect.py also provides a solution to the problem\nof comparing words of differing plurality through the methods\n``compare(word1, word2)``, ``compare_nouns(word1, word2)``,\n``compare_verbs(word1, word2)``, and ``compare_adjs(word1, word2)``.\nEach  of these methods takes two strings, and  compares them\nusing the corresponding plural-inflection method (``plural()``, ``plural_noun()``,\n``plural_verb()``, and ``plural_adj()`` respectively).\n\nThe comparison returns true if:\n\n- the strings are equal, or\n- one string is equal to a plural form of the other, or\n- the strings are two different plural forms of the one word.\n\n\nHence all of the following return true:\n\n.. code-block:: python\n\n    p.compare(\"index\", \"index\")  # RETURNS \"eq\"\n    p.compare(\"index\", \"indexes\")  # RETURNS \"s:p\"\n    p.compare(\"index\", \"indices\")  # RETURNS \"s:p\"\n    p.compare(\"indexes\", \"index\")  # RETURNS \"p:s\"\n    p.compare(\"indices\", \"index\")  # RETURNS \"p:s\"\n    p.compare(\"indices\", \"indexes\")  # RETURNS \"p:p\"\n    p.compare(\"indexes\", \"indices\")  # RETURNS \"p:p\"\n    p.compare(\"indices\", \"indices\")  # RETURNS \"eq\"\n\nAs indicated by the comments in the previous example, the actual value\nreturned by the various ``compare`` methods encodes which of the\nthree equality rules succeeded: \"eq\" is returned if the strings were\nidentical, \"s:p\" if the strings were singular and plural respectively,\n\"p:s\" for plural and singular, and \"p:p\" for two distinct plurals.\nInequality is indicated by returning an empty string.\n\nIt should be noted that two distinct singular words which happen to take\nthe same plural form are *not* considered equal, nor are cases where\none (singular) word's plural is the other (plural) word's singular.\nHence all of the following return false:\n\n.. code-block:: python\n\n    p.compare(\"base\", \"basis\")  # ALTHOUGH BOTH -> \"bases\"\n    p.compare(\"syrinx\", \"syringe\")  # ALTHOUGH BOTH -> \"syringes\"\n    p.compare(\"she\", \"he\")  # ALTHOUGH BOTH -> \"they\"\n\n    p.compare(\"opus\", \"operas\")  # ALTHOUGH \"opus\" -> \"opera\" -> \"operas\"\n    p.compare(\"taxi\", \"taxes\")  # ALTHOUGH \"taxi\" -> \"taxis\" -> \"taxes\"\n\nNote too that, although the comparison is \"number-insensitive\" it is *not*\ncase-insensitive (that is, ``plural(\"time\",\"Times\")`` returns false. To obtain\nboth number and case insensitivity, use the ``lower()`` method on both strings\n(that is, ``plural(\"time\".lower(), \"Times\".lower())`` returns true).\n\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jazzband/inflect", "keywords": "", "license": "", "maintainer": "Jason R. Coombs", "maintainer_email": "jaraco@jaraco.com", "name": "inflect", "package_url": "https://pypi.org/project/inflect/", "platform": "", "project_url": "https://pypi.org/project/inflect/", "project_urls": {"Homepage": "https://github.com/jazzband/inflect"}, "release_url": "https://pypi.org/project/inflect/4.1.0/", "requires_dist": ["importlib-metadata ; python_version < \"3.8\"", "sphinx ; extra == 'docs'", "jaraco.packaging (>=3.2) ; extra == 'docs'", "rst.linker (>=1.9) ; extra == 'docs'", "pytest (!=3.7.3,>=3.5) ; extra == 'testing'", "pytest-checkdocs (>=1.2.3) ; extra == 'testing'", "pytest-flake8 ; extra == 'testing'", "pytest-black-multipy ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "pygments ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words", "version": "4.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/inflect\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/inflect.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3e565685e2470a4c5e29370214420569f539f7e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f696e666c6563742e737667\"></a>\n<a href=\"https://pypi.org/project/inflect\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/inflect.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c886fa34ae6455bbab25cf4e3bac19339f09877/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f696e666c6563742e737667\"></a>\n<a href=\"https://travis-ci.org/jazzband/inflect\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/jazzband/inflect/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c28e6225e8730aac66a3bd40b0f336043ac154f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6a617a7a62616e642f696e666c6563742f6d61737465722e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: Black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://coveralls.io/github/jazzband/inflect?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/jazzband/inflect/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5fa8b64088e29d3c9a47da500abb840c68e1b48/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a617a7a62616e642f696e666c6563742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://jazzband.co/\" rel=\"nofollow\"><img alt=\"Jazzband\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a66f16648c79cb7518df5c15cbffb437af23debc/68747470733a2f2f6a617a7a62616e642e636f2f7374617469632f696d672f62616467652e737667\"></a>\n<a href=\"https://tidelift.com/subscription/pkg/pypi-inflect?utm_source=pypi-inflect&amp;utm_medium=readme\" rel=\"nofollow\"><img alt=\"https://tidelift.com/badges/package/pypi/inflect\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70b18ad5e96199067790fd77130b34e87925357a/68747470733a2f2f746964656c6966742e636f6d2f6261646765732f7061636b6167652f707970692f696e666c656374\"></a>\n<p>This is a <a href=\"https://jazzband.co\" rel=\"nofollow\">Jazzband</a> project. By contributing you agree to abide by the <a href=\"https://jazzband.co/about/conduct\" rel=\"nofollow\">Contributor Code of Conduct</a> and follow the <a href=\"https://jazzband.co/about/guidelines\" rel=\"nofollow\">guidelines</a>.</p>\n<div id=\"name\">\n<h2>NAME</h2>\n<p>inflect.py - Correctly generate plurals, singular nouns, ordinals, indefinite articles; convert numbers to words.</p>\n</div>\n<div id=\"synopsis\">\n<h2>SYNOPSIS</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">inflect</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">inflect</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># METHODS:</span>\n\n<span class=\"c1\"># plural plural_noun plural_verb plural_adj singular_noun no num</span>\n<span class=\"c1\"># compare compare_nouns compare_nouns compare_adjs</span>\n<span class=\"c1\"># a an</span>\n<span class=\"c1\"># present_participle</span>\n<span class=\"c1\"># ordinal number_to_words</span>\n<span class=\"c1\"># join</span>\n<span class=\"c1\"># inflect classical gender</span>\n<span class=\"c1\"># defnoun defverb defadj defa defan</span>\n\n\n<span class=\"c1\"># UNCONDITIONALLY FORM THE PLURAL</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The plural of \"</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"s2\">\" is \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># CONDITIONALLY FORM THE PLURAL</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw\"</span><span class=\"p\">,</span> <span class=\"n\">cat_count</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural</span><span class=\"p\">(</span><span class=\"s2\">\"cat\"</span><span class=\"p\">,</span> <span class=\"n\">cat_count</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># FORM PLURALS FOR SPECIFIC PARTS OF SPEECH</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">,</span> <span class=\"n\">N1</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\"saw\"</span><span class=\"p\">,</span> <span class=\"n\">N1</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_adj</span><span class=\"p\">(</span><span class=\"s2\">\"my\"</span><span class=\"p\">,</span> <span class=\"n\">N2</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\"saw\"</span><span class=\"p\">,</span> <span class=\"n\">N2</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"c1\"># FORM THE SINGULAR OF PLURAL NOUNS</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The singular of \"</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"s2\">\" is \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">singular_noun</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># SELECT THE GENDER OF SINGULAR PRONOUNS</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">singular_noun</span><span class=\"p\">(</span><span class=\"s2\">\"they\"</span><span class=\"p\">))</span>  <span class=\"c1\"># 'it'</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">gender</span><span class=\"p\">(</span><span class=\"s2\">\"f\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">singular_noun</span><span class=\"p\">(</span><span class=\"s2\">\"they\"</span><span class=\"p\">))</span>  <span class=\"c1\"># 'she'</span>\n\n\n<span class=\"c1\"># DEAL WITH \"0/1/N\" -&gt; \"no/1/N\" TRANSLATION:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"There \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\"was\"</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># USE DEFAULT COUNTS:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">N1</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" saw\"</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">N2</span><span class=\"p\">),</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" saw\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"There \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\"was\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># COMPARE TWO WORDS \"NUMBER-INSENSITIVELY\":</span>\n\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"same\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare_nouns</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"same noun\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare_verbs</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"same verb\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare_adjs</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"same adj.\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># ADD CORRECT \"a\" OR \"an\" FOR A GIVEN WORD:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Did you want \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">),</span> <span class=\"s2\">\" or \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">an</span><span class=\"p\">(</span><span class=\"n\">idea</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># CONVERT NUMERALS INTO ORDINALS (i.e. 1-&gt;1st, 2-&gt;2nd, 3-&gt;3rd, etc.)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"It was\"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">ordinal</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">),</span> <span class=\"s2\">\" from the left</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># CONVERT NUMERALS TO WORDS (i.e. 1-&gt;\"one\", 101-&gt;\"one hundred and one\", etc.)</span>\n<span class=\"c1\"># RETURNS A SINGLE STRING...</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one thousand, two hundred and thirty-four\"</span>\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">ordinal</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">))</span>\n<span class=\"c1\"># \"one thousand, two hundred and thirty-fourth\"</span>\n\n\n<span class=\"c1\"># GET BACK A LIST OF STRINGS, ONE FOR EACH \"CHUNK\"...</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">wantlist</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># (\"one thousand\",\"two hundred and thirty-four\")</span>\n\n\n<span class=\"c1\"># OPTIONAL PARAMETERS CHANGE TRANSLATION:</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one, two, three, four, five\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"twelve, thirty-four, five\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one twenty-three, forty-five\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">andword</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one thousand, two hundred thirty-four\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span> <span class=\"n\">andword</span><span class=\"o\">=</span><span class=\"s2\">\", plus\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one thousand, two hundred, plus thirty-four\"</span>\n<span class=\"c1\"># TODO: I get no comma before plus: check perl</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">555_1202</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">zero</span><span class=\"o\">=</span><span class=\"s2\">\"oh\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"five, five, five, one, two, oh, two\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">555_1202</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">one</span><span class=\"o\">=</span><span class=\"s2\">\"unity\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"five, five, five, unity, two, oh, two\"</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mf\">123.456</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">decimal</span><span class=\"o\">=</span><span class=\"s2\">\"mark\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"one two three mark four five six\"</span>\n<span class=\"c1\"># TODO: DOCBUG: perl gives commas here as do I</span>\n\n<span class=\"c1\"># LITERAL STYLE ONLY NAMES NUMBERS LESS THAN A CERTAIN THRESHOLD...</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># \"nine\"</span>\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># \"ten\"</span>\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># \"11\"</span>\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">number_to_words</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># \"1,000\"</span>\n\n<span class=\"c1\"># JOIN WORDS INTO A LIST:</span>\n\n<span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s2\">\"carrot\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># \"apple, banana, and carrot\"</span>\n\n<span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># \"apple and banana\"</span>\n\n<span class=\"n\">mylist</span> <span class=\"o\">=</span> <span class=\"n\">join</span><span class=\"p\">((</span><span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s2\">\"carrot\"</span><span class=\"p\">),</span> <span class=\"n\">final_sep</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># \"apple, banana and carrot\"</span>\n\n\n<span class=\"c1\"># REQUIRE \"CLASSICAL\" PLURALS (EG: \"focus\"-&gt;\"foci\", \"cherub\"-&gt;\"cherubim\")</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">()</span>  <span class=\"c1\"># USE ALL CLASSICAL PLURALS</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># USE ALL CLASSICAL PLURALS</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># SWITCH OFF CLASSICAL MODE</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\">#  \"no error\" INSTEAD OF \"no errors\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">zero</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\">#  \"no errors\" INSTEAD OF \"no error\"</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">herd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\">#  \"2 buffalo\" INSTEAD OF \"2 buffalos\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">herd</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\">#  \"2 buffalos\" INSTEAD OF \"2 buffalo\"</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># \"2 chairpersons\" INSTEAD OF \"2 chairpeople\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">persons</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># \"2 chairpeople\" INSTEAD OF \"2 chairpersons\"</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">ancient</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># \"2 formulae\" INSTEAD OF \"2 formulas\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">classical</span><span class=\"p\">(</span><span class=\"n\">ancient</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>  <span class=\"c1\"># \"2 formulas\" INSTEAD OF \"2 formulae\"</span>\n\n\n<span class=\"c1\"># INTERPOLATE \"plural()\", \"plural_noun()\", \"plural_verb()\", \"plural_adj()\", \"singular_noun()\",</span>\n<span class=\"c1\"># a()\", \"an()\", \"num()\" AND \"ordinal()\" WITHIN STRINGS:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"The plural of </span><span class=\"si\">{0}</span><span class=\"s2\"> is plural('</span><span class=\"si\">{0}</span><span class=\"s2\">')\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"The singular of </span><span class=\"si\">{0}</span><span class=\"s2\"> is singular_noun('</span><span class=\"si\">{0}</span><span class=\"s2\">')\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"I saw </span><span class=\"si\">{0}</span><span class=\"s2\"> plural('cat',</span><span class=\"si\">{0}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cat_count</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"plural('I',</span><span class=\"si\">{0}</span><span class=\"s2\">) \"</span>\n        <span class=\"s2\">\"plural_verb('saw',</span><span class=\"si\">{0}</span><span class=\"s2\">) \"</span>\n        <span class=\"s2\">\"plural('a',</span><span class=\"si\">{1}</span><span class=\"s2\">) \"</span>\n        <span class=\"s2\">\"plural_noun('saw',</span><span class=\"si\">{1}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">N1</span><span class=\"p\">,</span> <span class=\"n\">N2</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"num(</span><span class=\"si\">{0}</span><span class=\"s2\">, False)plural('I') \"</span>\n        <span class=\"s2\">\"plural_verb('saw') \"</span>\n        <span class=\"s2\">\"num(</span><span class=\"si\">{1}</span><span class=\"s2\">, False)plural('a') \"</span>\n        <span class=\"s2\">\"plural_noun('saw')\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">N1</span><span class=\"p\">,</span> <span class=\"n\">N2</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"I saw num(</span><span class=\"si\">{0}</span><span class=\"s2\">) plural('cat')</span><span class=\"se\">\\n</span><span class=\"s2\">num()\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cat_count</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"There plural_verb('was',</span><span class=\"si\">{0}</span><span class=\"s2\">) no('error',</span><span class=\"si\">{0}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"There num(</span><span class=\"si\">{0}</span><span class=\"s2\">, False)plural_verb('was') no('error')\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"Did you want a('</span><span class=\"si\">{0}</span><span class=\"s2\">') or an('</span><span class=\"si\">{1}</span><span class=\"s2\">')\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">thing</span><span class=\"p\">,</span> <span class=\"n\">idea</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">inflect</span><span class=\"p\">(</span><span class=\"s2\">\"It was ordinal('</span><span class=\"si\">{0}</span><span class=\"s2\">') from the left\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)))</span>\n\n\n<span class=\"c1\"># ADD USER-DEFINED INFLECTIONS (OVERRIDING INBUILT RULES):</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">defnoun</span><span class=\"p\">(</span><span class=\"s2\">\"VAX\"</span><span class=\"p\">,</span> <span class=\"s2\">\"VAXen\"</span><span class=\"p\">)</span>  <span class=\"c1\"># SINGULAR =&gt; PLURAL</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">defverb</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"will\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 1ST PERSON SINGULAR</span>\n    <span class=\"s2\">\"shall\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 1ST PERSON PLURAL</span>\n    <span class=\"s2\">\"will\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 2ND PERSON SINGULAR</span>\n    <span class=\"s2\">\"will\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 2ND PERSON PLURAL</span>\n    <span class=\"s2\">\"will\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 3RD PERSON SINGULAR</span>\n    <span class=\"s2\">\"will\"</span><span class=\"p\">,</span>  <span class=\"c1\"># 3RD PERSON PLURAL</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">defadj</span><span class=\"p\">(</span><span class=\"s2\">\"hir\"</span><span class=\"p\">,</span> <span class=\"s2\">\"their\"</span><span class=\"p\">)</span>  <span class=\"c1\"># SINGULAR =&gt; PLURAL</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">defa</span><span class=\"p\">(</span><span class=\"s2\">\"h\"</span><span class=\"p\">)</span>  <span class=\"c1\"># \"AY HALWAYS SEZ 'HAITCH'!\"</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">defan</span><span class=\"p\">(</span><span class=\"s2\">\"horrendous.*\"</span><span class=\"p\">)</span>  <span class=\"c1\"># \"AN HORRENDOUS AFFECTATION\"</span>\n</pre>\n</div>\n<div id=\"description\">\n<h2>DESCRIPTION</h2>\n<p>The methods of the class <tt>engine</tt> in module <tt>inflect.py</tt> provide plural\ninflections, singular noun inflections, \u201ca\u201d/\u201dan\u201d selection for English words,\nand manipulation of numbers as words.</p>\n<p>Plural forms of all nouns, most verbs, and some adjectives are\nprovided. Where appropriate, \u201cclassical\u201d variants (for example: \u201cbrother\u201d -&gt;\n\u201cbrethren\u201d, \u201cdogma\u201d -&gt; \u201cdogmata\u201d, etc.) are also provided.</p>\n<p>Single forms of nouns are also provided. The gender of singular pronouns\ncan be chosen (for example \u201cthey\u201d -&gt; \u201cit\u201d or \u201cshe\u201d or \u201che\u201d or \u201cthey\u201d).</p>\n<p>Pronunciation-based \u201ca\u201d/\u201dan\u201d selection is provided for all English\nwords, and most initialisms.</p>\n<p>It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd)\nand to English words (\u201cone\u201d, \u201ctwo\u201d, \u201cthree\u201d).</p>\n<p>In generating these inflections, <tt>inflect.py</tt> follows the Oxford\nEnglish Dictionary and the guidelines in Fowler\u2019s Modern English\nUsage, preferring the former where the two disagree.</p>\n<p>The module is built around standard British spelling, but is designed\nto cope with common American variants as well. Slang, jargon, and\nother English dialects are <em>not</em> explicitly catered for.</p>\n<p>Where two or more inflected forms exist for a single word (typically a\n\u201cclassical\u201d form and a \u201cmodern\u201d form), <tt>inflect.py</tt> prefers the\nmore common form (typically the \u201cmodern\u201d one), unless \u201cclassical\u201d\nprocessing has been specified\n(see <cite>MODERN VS CLASSICAL INFLECTIONS</cite>).</p>\n</div>\n<div id=\"forming-plurals-and-singulars\">\n<h2>FORMING PLURALS AND SINGULARS</h2>\n<div id=\"inflecting-plurals-and-singulars\">\n<h3>Inflecting Plurals and Singulars</h3>\n<p>All of the <tt><span class=\"pre\">plural...</span></tt> plural inflection methods take the word to be\ninflected as their first argument and return the corresponding inflection.\nNote that all such methods expect the <em>singular</em> form of the word. The\nresults of passing a plural form are undefined (and unlikely to be correct).\nSimilarly, the <tt><span class=\"pre\">si...</span></tt> singular inflection method expects the <em>plural</em>\nform of the word.</p>\n<p>The <tt><span class=\"pre\">plural...</span></tt> methods also take an optional second argument,\nwhich indicates the grammatical \u201cnumber\u201d of the word (or of another word\nwith which the word being inflected must agree). If the \u201cnumber\u201d argument is\nsupplied and is not <tt>1</tt> (or <tt>\"one\"</tt> or <tt>\"a\"</tt>, or some other adjective that\nimplies the singular), the plural form of the word is returned. If the\n\u201cnumber\u201d argument <em>does</em> indicate singularity, the (uninflected) word\nitself is returned. If the number argument is omitted, the plural form\nis returned unconditionally.</p>\n<p>The <tt><span class=\"pre\">si...</span></tt> method takes a second argument in a similar fashion. If it is\nsome form of the number <tt>1</tt>, or is omitted, the singular form is returned.\nOtherwise the plural is returned unaltered.</p>\n<p>The various methods of <tt>inflect.engine</tt> are:</p>\n<p><tt>plural_noun(word, count=None)</tt></p>\n<blockquote>\nThe method <tt>plural_noun()</tt> takes a <em>singular</em> English noun or\npronoun and returns its plural. Pronouns in the nominative (\u201cI\u201d -&gt;\n\u201cwe\u201d) and accusative (\u201cme\u201d -&gt; \u201cus\u201d) cases are handled, as are\npossessive pronouns (\u201cmine\u201d -&gt; \u201cours\u201d).</blockquote>\n<p><tt>plural_verb(word, count=None)</tt></p>\n<blockquote>\nThe method <tt>plural_verb()</tt> takes the <em>singular</em> form of a\nconjugated verb (that is, one which is already in the correct \u201cperson\u201d\nand \u201cmood\u201d) and returns the corresponding plural conjugation.</blockquote>\n<p><tt>plural_adj(word, count=None)</tt></p>\n<blockquote>\nThe method <tt>plural_adj()</tt> takes the <em>singular</em> form of\ncertain types of adjectives and returns the corresponding plural form.\nAdjectives that are correctly handled include: \u201cnumerical\u201d adjectives\n(\u201ca\u201d -&gt; \u201csome\u201d), demonstrative adjectives (\u201cthis\u201d -&gt; \u201cthese\u201d, \u201cthat\u201d -&gt;\n\u201cthose\u201d), and possessives (\u201cmy\u201d -&gt; \u201cour\u201d, \u201ccat\u2019s\u201d -&gt; \u201ccats\u2019\u201d, \u201cchild\u2019s\u201d\n-&gt; \u201cchildrens\u2019\u201d, etc.)</blockquote>\n<p><tt>plural(word, count=None)</tt></p>\n<blockquote>\n<p>The method <tt>plural()</tt> takes a <em>singular</em> English noun,\npronoun, verb, or adjective and returns its plural form. Where a word\nhas more than one inflection depending on its part of speech (for\nexample, the noun \u201cthought\u201d inflects to \u201cthoughts\u201d, the verb \u201cthought\u201d\nto \u201cthought\u201d), the (singular) noun sense is preferred to the (singular)\nverb sense.</p>\n<p>Hence <tt><span class=\"pre\">plural(\"knife\")</span></tt> will return \u201cknives\u201d (\u201cknife\u201d having been treated\nas a singular noun), whereas <tt><span class=\"pre\">plural(\"knifes\")</span></tt> will return \u201cknife\u201d\n(\u201cknifes\u201d having been treated as a 3rd person singular verb).</p>\n<p>The inherent ambiguity of such cases suggests that,\nwhere the part of speech is known, <tt>plural_noun</tt>, <tt>plural_verb</tt>, and\n<tt>plural_adj</tt> should be used in preference to <tt>plural</tt>.</p>\n</blockquote>\n<p><tt>singular_noun(word, count=None)</tt></p>\n<blockquote>\nThe method <tt>singular_noun()</tt> takes a <em>plural</em> English noun or\npronoun and returns its singular. Pronouns in the nominative (\u201cwe\u201d -&gt;\n\u201cI\u201d) and accusative (\u201cus\u201d -&gt; \u201cme\u201d) cases are handled, as are\npossessive pronouns (\u201cours\u201d -&gt; \u201cmine\u201d). When third person\nsingular pronouns are returned they take the neuter gender by default\n(\u201cthey\u201d -&gt; \u201cit\u201d), not (\u201cthey\u201d-&gt; \u201cshe\u201d) nor (\u201cthey\u201d -&gt; \u201che\u201d). This can be\nchanged with <tt>gender()</tt>.</blockquote>\n<p>Note that all these methods ignore any whitespace surrounding the\nword being inflected, but preserve that whitespace when the result is\nreturned. For example, <tt>plural(\" cat\u00a0 \")</tt> returns \u201d cats  \u201c.</p>\n<p><tt>gender(genderletter)</tt></p>\n<blockquote>\nThe third person plural pronoun takes the same form for the female, male and\nneuter (e.g. \u201cthey\u201d). The singular however, depends upon gender (e.g. \u201cshe\u201d,\n\u201che\u201d, \u201cit\u201d and \u201cthey\u201d \u2013 \u201cthey\u201d being the gender neutral form.) By default\n<tt>singular_noun</tt> returns the neuter form, however, the gender can be selected with\nthe <tt>gender</tt> method. Pass the first letter of the gender to\n<tt>gender</tt> to return the f(eminine), m(asculine), n(euter) or t(hey)\nform of the singular. e.g.\ngender(\u2018f\u2019) followed by singular_noun(\u2018themselves\u2019) returns \u2018herself\u2019.</blockquote>\n</div>\n<div id=\"numbered-plurals\">\n<h3>Numbered plurals</h3>\n<p>The <tt><span class=\"pre\">plural...</span></tt> methods return only the inflected word, not the count that\nwas used to inflect it. Thus, in order to produce \u201cI saw 3 ducks\u201d, it\nis necessary to use:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw\"</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"n\">animal</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">))</span>\n</pre>\n<p>Since the usual purpose of producing a plural is to make it agree with\na preceding count, inflect.py provides a method\n(<tt>no(word, count)</tt>) which, given a word and a(n optional) count, returns the\ncount followed by the correctly inflected word. Hence the previous\nexample can be rewritten:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"I saw \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"n\">animal</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">))</span>\n</pre>\n<p>In addition, if the count is zero (or some other term which implies\nzero, such as <tt>\"zero\"</tt>, <tt>\"nil\"</tt>, etc.) the count is replaced by the\nword \u201cno\u201d. Hence, if <tt>N</tt> had the value zero, the previous example\nwould print (the somewhat more elegant):</p>\n<pre>I saw no animals\n</pre>\n<p>rather than:</p>\n<pre>I saw 0 animals\n</pre>\n<p>Note that the name of the method is a pun: the method\nreturns either a number (a <em>No.</em>) or a <tt>\"no\"</tt>, in front of the\ninflected word.</p>\n</div>\n<div id=\"reducing-the-number-of-counts-required\">\n<h3>Reducing the number of counts required</h3>\n<p>In some contexts, the need to supply an explicit count to the various\n<tt><span class=\"pre\">plural...</span></tt> methods makes for tiresome repetition. For example:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">plural_adj</span><span class=\"p\">(</span><span class=\"s2\">\"This\"</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">),</span>\n    <span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">),</span>\n    <span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">),</span>\n    <span class=\"s2\">\" fatal.\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>inflect.py therefore provides a method\n(<tt>num(count=None, show=None)</tt>) which may be used to set a persistent \u201cdefault number\u201d\nvalue. If such a value is set, it is subsequently used whenever an\noptional second \u201cnumber\u201d argument is omitted. The default value thus set\ncan subsequently be removed by calling <tt>num()</tt> with no arguments.\nHence we could rewrite the previous example:</p>\n<pre><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_adj</span><span class=\"p\">(</span><span class=\"s2\">\"This\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">),</span> <span class=\"s2\">\"fatal.\"</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">()</span>\n</pre>\n<p>Normally, <tt>num()</tt> returns its first argument, so that it may also\nbe \u201cinlined\u201d in contexts like:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">),</span> <span class=\"s2\">\" detected.\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">severity</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_adj</span><span class=\"p\">(</span><span class=\"s2\">\"This\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">),</span> <span class=\"s2\">\"fatal.\"</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>However, in certain contexts (see <cite>INTERPOLATING INFLECTIONS IN STRINGS</cite>)\nit is preferable that <tt>num()</tt> return an empty string. Hence <tt>num()</tt>\nprovides an optional second argument. If that argument is supplied (that is, if\nit is defined) and evaluates to false, <tt>num</tt> returns an empty string\ninstead of its first argument. For example:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"s2\">\"error\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">),</span> <span class=\"s2\">\" detected.\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">severity</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_adj</span><span class=\"p\">(</span><span class=\"s2\">\"This\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_noun</span><span class=\"p\">(</span><span class=\"s2\">\" error\"</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">plural_verb</span><span class=\"p\">(</span><span class=\"s2\">\" was\"</span><span class=\"p\">),</span> <span class=\"s2\">\"fatal.\"</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"number-insensitive-equality\">\n<h3>Number-insensitive equality</h3>\n<p>inflect.py also provides a solution to the problem\nof comparing words of differing plurality through the methods\n<tt>compare(word1, word2)</tt>, <tt>compare_nouns(word1, word2)</tt>,\n<tt>compare_verbs(word1, word2)</tt>, and <tt>compare_adjs(word1, word2)</tt>.\nEach  of these methods takes two strings, and  compares them\nusing the corresponding plural-inflection method (<tt>plural()</tt>, <tt>plural_noun()</tt>,\n<tt>plural_verb()</tt>, and <tt>plural_adj()</tt> respectively).</p>\n<p>The comparison returns true if:</p>\n<ul>\n<li>the strings are equal, or</li>\n<li>one string is equal to a plural form of the other, or</li>\n<li>the strings are two different plural forms of the one word.</li>\n</ul>\n<p>Hence all of the following return true:</p>\n<pre><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"index\"</span><span class=\"p\">,</span> <span class=\"s2\">\"index\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"eq\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"index\"</span><span class=\"p\">,</span> <span class=\"s2\">\"indexes\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"s:p\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"index\"</span><span class=\"p\">,</span> <span class=\"s2\">\"indices\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"s:p\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"indexes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"index\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"p:s\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"indices\"</span><span class=\"p\">,</span> <span class=\"s2\">\"index\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"p:s\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"indices\"</span><span class=\"p\">,</span> <span class=\"s2\">\"indexes\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"p:p\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"indexes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"indices\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"p:p\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"indices\"</span><span class=\"p\">,</span> <span class=\"s2\">\"indices\"</span><span class=\"p\">)</span>  <span class=\"c1\"># RETURNS \"eq\"</span>\n</pre>\n<p>As indicated by the comments in the previous example, the actual value\nreturned by the various <tt>compare</tt> methods encodes which of the\nthree equality rules succeeded: \u201ceq\u201d is returned if the strings were\nidentical, \u201cs:p\u201d if the strings were singular and plural respectively,\n\u201cp:s\u201d for plural and singular, and \u201cp:p\u201d for two distinct plurals.\nInequality is indicated by returning an empty string.</p>\n<p>It should be noted that two distinct singular words which happen to take\nthe same plural form are <em>not</em> considered equal, nor are cases where\none (singular) word\u2019s plural is the other (plural) word\u2019s singular.\nHence all of the following return false:</p>\n<pre><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"base\"</span><span class=\"p\">,</span> <span class=\"s2\">\"basis\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ALTHOUGH BOTH -&gt; \"bases\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"syrinx\"</span><span class=\"p\">,</span> <span class=\"s2\">\"syringe\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ALTHOUGH BOTH -&gt; \"syringes\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"she\"</span><span class=\"p\">,</span> <span class=\"s2\">\"he\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ALTHOUGH BOTH -&gt; \"they\"</span>\n\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"opus\"</span><span class=\"p\">,</span> <span class=\"s2\">\"operas\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ALTHOUGH \"opus\" -&gt; \"opera\" -&gt; \"operas\"</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">(</span><span class=\"s2\">\"taxi\"</span><span class=\"p\">,</span> <span class=\"s2\">\"taxes\"</span><span class=\"p\">)</span>  <span class=\"c1\"># ALTHOUGH \"taxi\" -&gt; \"taxis\" -&gt; \"taxes\"</span>\n</pre>\n<p>Note too that, although the comparison is \u201cnumber-insensitive\u201d it is <em>not</em>\ncase-insensitive (that is, <tt><span class=\"pre\">plural(\"time\",\"Times\")</span></tt> returns false. To obtain\nboth number and case insensitivity, use the <tt>lower()</tt> method on both strings\n(that is, <tt><span class=\"pre\">plural(\"time\".lower(),</span> <span class=\"pre\">\"Times\".lower())</span></tt> returns true).</p>\n</div>\n</div>\n<div id=\"security-contact\">\n<h2>Security Contact</h2>\n<p>To report a security vulnerability, please use the\n<a href=\"https://tidelift.com/security\" rel=\"nofollow\">Tidelift security contact</a>.\nTidelift will coordinate the fix and disclosure.</p>\n</div>\n\n          </div>"}, "last_serial": 6566044, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8bcd0300b26c155fb6b6c9557b8676d1", "sha256": "7d10357c072ece635e88ec6b493269fa0727821be3d34577159efb4037c20876"}, "downloads": -1, "filename": "inflect-0.1.tar.gz", "has_sig": false, "md5_digest": "8bcd0300b26c155fb6b6c9557b8676d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48744, "upload_time": "2010-06-14T02:25:09", "upload_time_iso_8601": "2010-06-14T02:25:09.954329Z", "url": "https://files.pythonhosted.org/packages/3b/d2/a660a731626cdac2fafed3b8f131e05dc65a2a96bca9d17720479cf2c958/inflect-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d5c743b31be1ed0572d6686e2249e38e", "sha256": "d953575117744d90c5836620e7fa885a5702d935f231f4b7680cc3a59ad95c38"}, "downloads": -1, "filename": "inflect-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d5c743b31be1ed0572d6686e2249e38e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80451, "upload_time": "2010-06-17T05:47:34", "upload_time_iso_8601": "2010-06-17T05:47:34.869528Z", "url": "https://files.pythonhosted.org/packages/b6/6b/4a48f8525bb88a49588c98f6b223866ab62a769346cda81a530d121b2d81/inflect-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "710786f019fb487bb3a3748eda589e90", "sha256": "d4e4351b56b940aef7c069333126f2aa14a68a161de0466419076d3be062ce26"}, "downloads": -1, "filename": "inflect-0.1.2.tar.gz", "has_sig": false, "md5_digest": "710786f019fb487bb3a3748eda589e90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66533, "upload_time": "2010-06-21T03:10:24", "upload_time_iso_8601": "2010-06-21T03:10:24.480857Z", "url": "https://files.pythonhosted.org/packages/e2/f0/106e6d942efa5980a8c0062caa20788df3909f20dffe23d6bc30b1d2db8c/inflect-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8d41a2e53026f4c343511523b4d60c58", "sha256": "8728816d477078b088e23cd74f9ca97bccebdc8ba0ed4c4262f1f567f7bf7220"}, "downloads": -1, "filename": "inflect-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8d41a2e53026f4c343511523b4d60c58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66863, "upload_time": "2010-06-21T14:45:52", "upload_time_iso_8601": "2010-06-21T14:45:52.665756Z", "url": "https://files.pythonhosted.org/packages/44/f5/a8d8cc197c38bf21fd0761ca6a48509ab7961622fcbc42f4885356070f45/inflect-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "418389cc59eb1352fbce29f0711be4a9", "sha256": "d1bd918fbd58b2fac5e09ed2004237cb403b5b7366d7ca3b067933ad30b83e0a"}, "downloads": -1, "filename": "inflect-0.1.4.tar.gz", "has_sig": false, "md5_digest": "418389cc59eb1352fbce29f0711be4a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68131, "upload_time": "2010-06-24T14:17:43", "upload_time_iso_8601": "2010-06-24T14:17:43.955756Z", "url": "https://files.pythonhosted.org/packages/01/6b/2f1fbaf1d7f729d407a77bcf12bbc895ef4a77725b9d2027ff02821b29b1/inflect-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "75c8082b202d6a751d0f815e8c6b20c6", "sha256": "79bff53163dd8658d3fb2e1798967c69afb07d45fc5bdbbe9b6ab41cb8429637"}, "downloads": -1, "filename": "inflect-0.1.5.tar.gz", "has_sig": false, "md5_digest": "75c8082b202d6a751d0f815e8c6b20c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68041, "upload_time": "2010-06-26T14:14:05", "upload_time_iso_8601": "2010-06-26T14:14:05.547751Z", "url": "https://files.pythonhosted.org/packages/a1/1e/f0220686fb36e4dfd84b0871add4855a480c64f156c3d2d569cc049c0211/inflect-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6058d8ce3438537be9a58f46d0e04e73", "sha256": "289b93f2dafda339c10a253e86f66c02f45843e8292e995ac843bec6f85cb03a"}, "downloads": -1, "filename": "inflect-0.1.6.tar.gz", "has_sig": false, "md5_digest": "6058d8ce3438537be9a58f46d0e04e73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83825, "upload_time": "2010-07-03T15:48:50", "upload_time_iso_8601": "2010-07-03T15:48:50.866908Z", "url": "https://files.pythonhosted.org/packages/d6/80/fec06e115acff422f898854a99607771a604753d2489db8a1000b35e7a76/inflect-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "e8616667f478e5bf9f2094a62210f5d4", "sha256": "d2e73f94e7093f402ee0663ea789dfa3de6c17dff818b179248168c690cb6398"}, "downloads": -1, "filename": "inflect-0.1.7.tar.gz", "has_sig": false, "md5_digest": "e8616667f478e5bf9f2094a62210f5d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85761, "upload_time": "2010-07-09T12:55:24", "upload_time_iso_8601": "2010-07-09T12:55:24.015565Z", "url": "https://files.pythonhosted.org/packages/c8/f3/044e692504986564feb4307edcb18bbe93c7ddecd73a34a136acb80d8147/inflect-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "12c7738d595b716a8527e34e4b93188d", "sha256": "d4e0ca18b7191a311710ad7c0706201a718caa5ad3d57aed9642b8cd87d603b0"}, "downloads": -1, "filename": "inflect-0.1.8.tar.gz", "has_sig": false, "md5_digest": "12c7738d595b716a8527e34e4b93188d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89323, "upload_time": "2010-07-10T15:13:06", "upload_time_iso_8601": "2010-07-10T15:13:06.344406Z", "url": "https://files.pythonhosted.org/packages/e9/4a/c297ef4043fe2fc662450e96530103d70b512ceb58421714e95b2df02d2b/inflect-0.1.8.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b148f2a74282a960676d16ea896b0034", "sha256": "1da998ebdf09b3ef3be1f288bb8b3d598ea217888abf64fa6d1773176f026b56"}, "downloads": -1, "filename": "inflect-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b148f2a74282a960676d16ea896b0034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90693, "upload_time": "2010-08-07T01:27:39", "upload_time_iso_8601": "2010-08-07T01:27:39.036342Z", "url": "https://files.pythonhosted.org/packages/86/18/d9e2b200ba98263bddf1c30e5650935c1e72df77f312af405033e999ffa6/inflect-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b34bec6cec8d976844b5d295acf0aa3d", "sha256": "8290bb78a02a11854619f342b6d8308a75068382b6e97fdb55ca337cc90b5223"}, "downloads": -1, "filename": "inflect-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b34bec6cec8d976844b5d295acf0aa3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90697, "upload_time": "2010-08-31T13:09:40", "upload_time_iso_8601": "2010-08-31T13:09:40.246425Z", "url": "https://files.pythonhosted.org/packages/aa/7b/1fbc94a1ada7c192cc71d133c6eb78d132b8a69afc0f7694fd6ebc5643ab/inflect-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "83dcb28aa4d8e6bae52e506a0f3c4ddc", "sha256": "c0dba116c6c0a8b80f9d10f3adf029e673d8be1b1b32a56a0d49fc70b94e1de0"}, "downloads": -1, "filename": "inflect-0.2.3.zip", "has_sig": false, "md5_digest": "83dcb28aa4d8e6bae52e506a0f3c4ddc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97640, "upload_time": "2012-06-10T23:14:28", "upload_time_iso_8601": "2012-06-10T23:14:28.362881Z", "url": "https://files.pythonhosted.org/packages/60/be/d5c29660b0575b16b553c68f1935b0943ea42680efcb01b63e7ae68bf3ed/inflect-0.2.3.zip", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "fc2d807b600c4e959e993690ffa573bc", "sha256": "be63ed78f8da783be74cb02ae261e1f9cf4ea2c60cbf2f91862e1429c7011c89"}, "downloads": -1, "filename": "inflect-0.2.4.tar.gz", "has_sig": false, "md5_digest": "fc2d807b600c4e959e993690ffa573bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 91344, "upload_time": "2013-06-09T07:11:37", "upload_time_iso_8601": "2013-06-09T07:11:37.508259Z", "url": "https://files.pythonhosted.org/packages/46/da/33ee1aec598d8202bd0b6c77565e776be9db0782545b3a64f3cc272e6135/inflect-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "453c5662f13ca3d192d79385d3c07486", "sha256": "0e2358f4f46a54cca3d77b983fa3708b02dc83acd8d28466a67e88b72e5c1b34"}, "downloads": -1, "filename": "inflect-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "453c5662f13ca3d192d79385d3c07486", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 58988, "upload_time": "2015-01-09T21:01:53", "upload_time_iso_8601": "2015-01-09T21:01:53.251118Z", "url": "https://files.pythonhosted.org/packages/66/15/2d176749884cbeda0c92e0d09e1303ff53a973eb3c6bb2136803b9d962c9/inflect-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca9ecb838687253eedc6c81f59c656a7", "sha256": "2014c8dcb2114ebae2941ba3f0fbd98a02c846792a7b72f2da31eb9aa431a818"}, "downloads": -1, "filename": "inflect-0.2.5.tar.gz", "has_sig": false, "md5_digest": "ca9ecb838687253eedc6c81f59c656a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109756, "upload_time": "2015-01-09T21:02:02", "upload_time_iso_8601": "2015-01-09T21:02:02.001405Z", "url": "https://files.pythonhosted.org/packages/e1/5d/478a8e9d8b7cc004a36b75369f9caf1c23cd7ba0b97af146b516c49923d9/inflect-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "77efdf5b5607233393e49ee6b1750ed4", "sha256": "186bfeb3696fc66f634651723c64a372b28d956f41c6effe5a174568d8683bef"}, "downloads": -1, "filename": "inflect-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "77efdf5b5607233393e49ee6b1750ed4", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 59383, "upload_time": "2018-05-08T20:23:53", "upload_time_iso_8601": "2018-05-08T20:23:53.959917Z", "url": "https://files.pythonhosted.org/packages/d9/9d/077582a4c6d771e3b742631e6c1d3688f48210626de488e032776242b3f2/inflect-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1079bd474ba0a945241a9959b0e3db0", "sha256": "96084fbb2131c14350c2d7a68761dfc044a25a9ed73f3bcbaf163e60a9ab8630"}, "downloads": -1, "filename": "inflect-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c1079bd474ba0a945241a9959b0e3db0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109387, "upload_time": "2018-05-08T20:23:57", "upload_time_iso_8601": "2018-05-08T20:23:57.499326Z", "url": "https://files.pythonhosted.org/packages/95/b6/b047947259ec63887ddf0040906c6b555adf9e230b2a0109103625ab2a1c/inflect-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f5c97d7d7ec451cb56ec3d1cd2d766b2", "sha256": "7a71eed8a666c0c2b0463bb850a9a5c51603699836bf251521374ceffeb9c322"}, "downloads": -1, "filename": "inflect-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5c97d7d7ec451cb56ec3d1cd2d766b2", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 59426, "upload_time": "2018-05-08T20:29:01", "upload_time_iso_8601": "2018-05-08T20:29:01.272781Z", "url": "https://files.pythonhosted.org/packages/e0/3e/9f62aeee7e0963fa63e2373423e4235045db0712b2bf56d39cffa89c0734/inflect-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a14b34064bff0ae76e316626162d354b", "sha256": "51d3d0fe0db77fa9315c45ce5933a64d9043a36d42e8b1a082d3379dc39754cf"}, "downloads": -1, "filename": "inflect-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a14b34064bff0ae76e316626162d354b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109456, "upload_time": "2018-05-08T20:29:04", "upload_time_iso_8601": "2018-05-08T20:29:04.388574Z", "url": "https://files.pythonhosted.org/packages/de/2e/2c9667ee54032d1fa1895642772f106dc47817b64c331ed2247f7cce7be3/inflect-0.3.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "3d5b11941af7067b706d9a284d2dbc5b", "sha256": "12136d8c62ed987847d7773686dd8c079c15ccece4b7a12ad2ccd9b0caf0ec54"}, "downloads": -1, "filename": "inflect-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3d5b11941af7067b706d9a284d2dbc5b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 59422, "upload_time": "2018-07-26T16:11:44", "upload_time_iso_8601": "2018-07-26T16:11:44.112898Z", "url": "https://files.pythonhosted.org/packages/82/12/af36f5420b495ad6e75f4532eaad64ee7301d0ef568a4eb87ded9bfcacb3/inflect-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "759ab874f02d1653c094b1ab260f8dcc", "sha256": "7d8e075740de6e16fead120af6ddb9b97f6d708573431113674b73b10a258352"}, "downloads": -1, "filename": "inflect-1.0.0.tar.gz", "has_sig": false, "md5_digest": "759ab874f02d1653c094b1ab260f8dcc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 110186, "upload_time": "2018-07-26T16:11:45", "upload_time_iso_8601": "2018-07-26T16:11:45.445108Z", "url": "https://files.pythonhosted.org/packages/e4/4b/6b19b1a5cbc31502630f539f6f2cc1f63e6dc443060c1ddcf2063becb6dc/inflect-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "707047e9ea155ea918f0ceb4fef978cf", "sha256": "b8cb61f83a71c2aff4fe7f6b5b8967416e85c449bcad55693ebeceb8d97e5a21"}, "downloads": -1, "filename": "inflect-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "707047e9ea155ea918f0ceb4fef978cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 59425, "upload_time": "2018-09-23T15:29:30", "upload_time_iso_8601": "2018-09-23T15:29:30.353276Z", "url": "https://files.pythonhosted.org/packages/6e/1b/6b9b48323b714b5f66dbea2bd5d4166c4f99d908bc31d5307d14083aa9a2/inflect-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7e46b49ba481dbbf03a582e6a950418", "sha256": "ec42f5d5d2baa54ba6e3fa23698554c09362dd478cc66b3c28c5d0b76d7d0581"}, "downloads": -1, "filename": "inflect-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b7e46b49ba481dbbf03a582e6a950418", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 110413, "upload_time": "2018-09-23T15:29:31", "upload_time_iso_8601": "2018-09-23T15:29:31.979527Z", "url": "https://files.pythonhosted.org/packages/a3/77/e8e1b24bdc1da7fd72f6ac25db7bd09fd94116fda515bb60b05c1f1927dd/inflect-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "db1435749ab211bd8126d10c90f6056f", "sha256": "bead2274d4db33220aa0d9fe0d2b8808882cb04dbe424074b97c39af4f6ae3d5"}, "downloads": -1, "filename": "inflect-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db1435749ab211bd8126d10c90f6056f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 53978, "upload_time": "2018-11-12T18:01:02", "upload_time_iso_8601": "2018-11-12T18:01:02.066514Z", "url": "https://files.pythonhosted.org/packages/8b/92/b7c942ea377a7be54f01e043ecf4c37be3cef2939bd6216994af553ce9ff/inflect-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f51f8754a1e36a72561406a64e34a876", "sha256": "98cf5d82952ed8bf1cf9236c6058e9a21bc66172ecb907969d907741f91388b5"}, "downloads": -1, "filename": "inflect-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f51f8754a1e36a72561406a64e34a876", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 111485, "upload_time": "2018-11-12T18:01:09", "upload_time_iso_8601": "2018-11-12T18:01:09.626341Z", "url": "https://files.pythonhosted.org/packages/fa/07/f6876b927f876317f526b69a44a51d69cbd26f2842c4b50a8b418fe79feb/inflect-1.0.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "4b835893ae4fdcd60f9d542ee3ad7aa1", "sha256": "15caedcc4b41dcaadd4452b613e8255ab906581c0135ce27e9996742b6498adb"}, "downloads": -1, "filename": "inflect-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4b835893ae4fdcd60f9d542ee3ad7aa1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 54245, "upload_time": "2018-11-12T18:01:04", "upload_time_iso_8601": "2018-11-12T18:01:04.094080Z", "url": "https://files.pythonhosted.org/packages/7e/00/2d23e70798ac27f07ad43271dfb1b628d905f015cceeb1788f7bbe9e8b7f/inflect-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b22d5f0584c2f078aae2424e2f6a1700", "sha256": "9b0b833130ee3788aa61e0732b2b149681d092d2b44b36906b443a00bd9b672f"}, "downloads": -1, "filename": "inflect-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b22d5f0584c2f078aae2424e2f6a1700", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 112337, "upload_time": "2018-11-12T18:01:11", "upload_time_iso_8601": "2018-11-12T18:01:11.437656Z", "url": "https://files.pythonhosted.org/packages/6a/d4/11b4e624e60794dda73ef3e1190057daa9723b64d1989c660174ffee7aa1/inflect-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "b5e83b2a189813335b8bbe45b21661ba", "sha256": "c586bf1a7ff02fe068224422361144ad3f53acc78e0b8be9b9327b0e36e07c07"}, "downloads": -1, "filename": "inflect-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b5e83b2a189813335b8bbe45b21661ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 53029, "upload_time": "2018-11-12T18:01:06", "upload_time_iso_8601": "2018-11-12T18:01:06.170924Z", "url": "https://files.pythonhosted.org/packages/53/b9/26a3e250a915a62babc44d131bddb6bf9cd0e07ec93174d1bd879e9b5396/inflect-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d04e1ee5b7110aa64e0ccc3b6920027", "sha256": "194b549a2939aafcf06c1469d139bba9ff99d347a4221ffdf228c18b86013302"}, "downloads": -1, "filename": "inflect-2.0.1.tar.gz", "has_sig": false, "md5_digest": "6d04e1ee5b7110aa64e0ccc3b6920027", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 111150, "upload_time": "2018-11-12T18:01:13", "upload_time_iso_8601": "2018-11-12T18:01:13.063191Z", "url": "https://files.pythonhosted.org/packages/7e/c3/4de580a274138d45140712bd53e957df9ee34ad1758d4b871bf644dba33b/inflect-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "78a892556636042d6a70b9e39f8193fc", "sha256": "a82b671b043ddba98ea8b2cf000b31e8b41e9197b3151567239f3bbe215dab7e"}, "downloads": -1, "filename": "inflect-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "78a892556636042d6a70b9e39f8193fc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 40965, "upload_time": "2018-11-12T18:01:08", "upload_time_iso_8601": "2018-11-12T18:01:08.088416Z", "url": "https://files.pythonhosted.org/packages/86/02/e6b11020a9c37d25b4767a1d0af5835629f6e75d6f51553ad07a4c73dc31/inflect-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d26ae869518c4e98e59c1eaeee98cc31", "sha256": "4ded1b2a6fcf0fc0397419c7727f131a93b67b80d899f2973be7758628e12b73"}, "downloads": -1, "filename": "inflect-2.1.0.tar.gz", "has_sig": false, "md5_digest": "d26ae869518c4e98e59c1eaeee98cc31", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 98767, "upload_time": "2018-11-12T18:01:14", "upload_time_iso_8601": "2018-11-12T18:01:14.694592Z", "url": "https://files.pythonhosted.org/packages/5e/79/fc91ef0768c6ac564c2d820ff2658b6a82686aeb71145980b71c50d0a122/inflect-2.1.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "dca143521de2613687d26853bbdf05c3", "sha256": "750691d56f663cef75993a63029d67b6ef772aeaa6e318a46b3d832cbd902760"}, "downloads": -1, "filename": "inflect-3.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dca143521de2613687d26853bbdf05c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 68573, "upload_time": "2019-10-27T17:52:27", "upload_time_iso_8601": "2019-10-27T17:52:27.644507Z", "url": "https://files.pythonhosted.org/packages/57/0c/595fbe302f09b963107157fe426432b0c231fb8e0fb9f3d9db737e84c294/inflect-3.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bb513933bd99fe2e8825891f863160d", "sha256": "86da0500226d67531feb1f4f539a24129f187dac8b5965445ea77f345e15a2a0"}, "downloads": -1, "filename": "inflect-3.0.1.tar.gz", "has_sig": false, "md5_digest": "5bb513933bd99fe2e8825891f863160d", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 106473, "upload_time": "2019-10-27T17:52:29", "upload_time_iso_8601": "2019-10-27T17:52:29.585126Z", "url": "https://files.pythonhosted.org/packages/39/45/79b5cb5df448775ade7329e8b2d7aa45c70e96d00dc34025ea317c15d1c9/inflect-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "f18a67cc4b79e1e644e95ab3a342f480", "sha256": "48a35748cd695881722699d074a61166a2b591cc8c65d5c95d00e59c847b01c2"}, "downloads": -1, "filename": "inflect-3.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f18a67cc4b79e1e644e95ab3a342f480", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 31322, "upload_time": "2019-11-07T14:50:26", "upload_time_iso_8601": "2019-11-07T14:50:26.229722Z", "url": "https://files.pythonhosted.org/packages/2a/14/49a8afaaa66fb49cda8e60512f0fc07594232fb10ea6aa8995c069172cf6/inflect-3.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29c60edf9917762e24c3b9aef63701c5", "sha256": "ee7c9b7c3376d06828b205460afb3c447b5d25dd653171db249a238f3fc2c18a"}, "downloads": -1, "filename": "inflect-3.0.2.tar.gz", "has_sig": false, "md5_digest": "29c60edf9917762e24c3b9aef63701c5", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 71546, "upload_time": "2019-11-07T14:50:33", "upload_time_iso_8601": "2019-11-07T14:50:33.321490Z", "url": "https://files.pythonhosted.org/packages/36/04/54ceea2eeaa2e20a4a127eb29b297115b57cc4ca0cb721b9189206442073/inflect-3.0.2.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "23eb1fa1f13611ced8e2781c8a623615", "sha256": "b7043603072911713f0c82ca0942078d5d53d8ac249ca2e1c25586d9cfb866d4"}, "downloads": -1, "filename": "inflect-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "23eb1fa1f13611ced8e2781c8a623615", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31322, "upload_time": "2019-12-21T05:04:28", "upload_time_iso_8601": "2019-12-21T05:04:28.411450Z", "url": "https://files.pythonhosted.org/packages/b7/e8/2f9027de74f8ca73efa712b01586c90890d45356a4a138badac69d76eb79/inflect-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "693cc073949add15cbc2abf655b1b637", "sha256": "4bafdc6bcfd83ee1e5874607577f7388cd3492cbdb06fc875979c6398ad41ab0"}, "downloads": -1, "filename": "inflect-4.0.0.tar.gz", "has_sig": false, "md5_digest": "693cc073949add15cbc2abf655b1b637", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 71091, "upload_time": "2019-12-21T05:04:30", "upload_time_iso_8601": "2019-12-21T05:04:30.766776Z", "url": "https://files.pythonhosted.org/packages/ed/65/47c537f18d7086935de1708f414d92ef3dbe2c99f2e19a99461c34db4af7/inflect-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "bedd4f7b580a35d42e20ec461b04290b", "sha256": "053dabafaebc41375361cea2cbaea52f91c7d5bd30e079847ee4e4e49739d41b"}, "downloads": -1, "filename": "inflect-4.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bedd4f7b580a35d42e20ec461b04290b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31379, "upload_time": "2020-02-04T02:25:25", "upload_time_iso_8601": "2020-02-04T02:25:25.198410Z", "url": "https://files.pythonhosted.org/packages/b3/27/15edd6e1519f4e489ff50def9367a62d138baa9c000a053c67ac38156519/inflect-4.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "473fa245f6663f0fce3d80a9d78d0459", "sha256": "def6f3791be9181f0c01e0bf5949304007ec6e04c6674fbef7cc49c657b8a9a5"}, "downloads": -1, "filename": "inflect-4.1.0.tar.gz", "has_sig": false, "md5_digest": "473fa245f6663f0fce3d80a9d78d0459", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72200, "upload_time": "2020-02-04T02:25:27", "upload_time_iso_8601": "2020-02-04T02:25:27.192256Z", "url": "https://files.pythonhosted.org/packages/18/29/2a0292362ea78760f95584ffd41e75b3d001d501c4627ba321d180a4fc0c/inflect-4.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bedd4f7b580a35d42e20ec461b04290b", "sha256": "053dabafaebc41375361cea2cbaea52f91c7d5bd30e079847ee4e4e49739d41b"}, "downloads": -1, "filename": "inflect-4.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bedd4f7b580a35d42e20ec461b04290b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 31379, "upload_time": "2020-02-04T02:25:25", "upload_time_iso_8601": "2020-02-04T02:25:25.198410Z", "url": "https://files.pythonhosted.org/packages/b3/27/15edd6e1519f4e489ff50def9367a62d138baa9c000a053c67ac38156519/inflect-4.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "473fa245f6663f0fce3d80a9d78d0459", "sha256": "def6f3791be9181f0c01e0bf5949304007ec6e04c6674fbef7cc49c657b8a9a5"}, "downloads": -1, "filename": "inflect-4.1.0.tar.gz", "has_sig": false, "md5_digest": "473fa245f6663f0fce3d80a9d78d0459", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72200, "upload_time": "2020-02-04T02:25:27", "upload_time_iso_8601": "2020-02-04T02:25:27.192256Z", "url": "https://files.pythonhosted.org/packages/18/29/2a0292362ea78760f95584ffd41e75b3d001d501c4627ba321d180a4fc0c/inflect-4.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:06 2020"}