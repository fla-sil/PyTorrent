{"info": {"author": "Gg Math", "author_email": "code@gmath.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Plogchain\n\n[![Tests Status](https://github.com/gg-math/plogchain/workflows/unittests/badge.svg)](https://github.com/gg-math/plogchain/actions)\n![Dependencies](https://img.shields.io/badge/dependencies-0-blue.svg)\n[![license](https://img.shields.io/badge/license-ISC-blue.svg)](https://github.com/gg-math/plogchain/blob/master/LICENSE)\n\n[![Web page](https://img.shields.io/badge/website-github.io/plogchain-blue.svg)](https://gg-math.github.io/plogchain)\n[![Package](https://img.shields.io/badge/PIP-plogchain-blue.svg)](https://pypi.org/project/plogchain)\n\nPython Logging based on blockchain \ud83d\udcdc \u26d3\ufe0f.\n\n## Logs get chained\nThe current log line contains the signature of the previous line with your secret.\n* detect lines deleted / lost\n* detect logs tampering\n\n## Philosophy\nThe package is intended to be a **lightweight** util for generating **incorruptible** logs.\n\nFor this pupose we rely as much as possible on standard packages: few dependencies, high quality.\n\nThe formatters are easy **extensible** by simply deriving from `Basic`.\n\n\n# Usage\n\n## Install\n``` bash\npip install plogchain\n```\n\n## Choose your log type\n\nMany types of logs are supported out-of-the-box:\n- `Basic` raw text, relying on the standard formatter\n- `Json` structured log lines with static & dynamic fields\n- `CSV` work in progress\n\nYou can write a custom formatter in 20-ish lines.\n\n## Init once in main\n``` python\nfrom plogchain import LogChainer\n\n# Initialize a default chainer.\ntheLogger = LogChainer()\n\n# Register the formatter to the logger.\ntheLogger.initLogging()\n```\n\nHave a look at [the comprehensive guide of constructor parameters](#constructor-parameters).\n\n## Use everywhere with python logging module\n``` python\nimport logging\n\nlogging.debug(\"My message\")\nlogging.info(\"Some information\")\n```\n\n## Check your logs integrity afterwards\n``` python\nfrom plogchain import LogChainer\n\naLogChain = [\n\t\"2020-03-30 13:38:00.782|0ec90b9839fdd964|TestChaining.py:20 test_logging_happy_case hello gg\",\n\t\"2020-03-30 13:38:00.782|2e3f1b4a7b946fb1|TestChaining.py:21 test_logging_happy_case voila1\",\n\t\"2020-03-30 13:38:00.782|10d1ab606618492a|TestChaining.py:22 test_logging_happy_case voila2\",\n\t\"2020-03-30 13:38:00.782|805757e144f4e385|TestChaining.py:23 test_logging_happy_case voila5\",\n\t\"2020-03-30 13:38:00.782|3bda90b5af77d3fe|TestChaining.py:24 test_logging_happy_case voila4\"\n]\nresult = LogChainer.verify(aLogChain)\n\nif not result:\n\tprint(\"Last good line\", result.prevLine)\n\tprint(\"First bad line\", result.line)\nelse:\n\tprint(\"All right\")\n```\n\n## Constructor parameters\n\nThey are passed as a dict and/or named arguments.\n``` python\nfrom plogchain import LogChainer\n\ntheLogger = LogChainer(verbosity = 3, secret = \"mySignatureKey\")\n\nparams = {\"verbosity\": 3, \"secret\": \"mySignatureKey\"}\ntheLogger = LogChainer(params, timestampFmt = \"iso\")\n```\n\n| Param | Default value | Description |\n| ----- | ------------- | ----------- |\n| formatterCls | formatters.Basic | Type of logging to perform, raw text, json, custom |\n| format | see below | Placeholder string used by raw-text loggers |\n| secret | secrets.token_urlsafe(128) | Signature key to compute the line signature |\n| seed | secrets.token_urlsafe() | Random string to sign into the first log line |\n| timestampFmt | \"iso\" | iso for 8601 or `strftime` compatible placeholders |\n| timestampPrecision | \"milliseconds\" | `timespec` element used by [the datetime library](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat) |\n| timestampUtc | False | Transform the timestamp to its value in UTC |\n| stream | cout | Where the logs are sent, file/console/custom stream |\n| verbosity | 0 | Number [0..5] mapped to a logging.level |\n\nThe default format is `%(timestamp)s %(levelLetters)s %(fileLine)-15s %(funcName)-15s %(message)-60s |%(signature)s`. It relies on some extra fields like the signature at its end.\n\n\n## Plogchain extra logging fields\nWe enrich the standard logging record with some handy fields:\n\n| Name | Description |\n| ---- | ----------- |\n| fileLine | Widespread `filename:lineno` |\n| levelLetters | 4 first letters of logging level names: short and unambiguous |\n| signature | The digital signature of the previous line. Include it in all your lines to benefit from the chaining |\n| timestamp | Improved version of `asctime`, see below |\n\n\nThe `timestamp` field offers more flexibility than `asctime` in regards to:\n- the precision; can go up to the micro seconds (`msecs` cannot)\n- the decimal separator; you choose, '.' by default\n- utc or local timezone\n- customize the format only in one place: `timestampFmt`\n\n## Dynamic logging fields (WIP)\nThe package is suitable for server logging which context changes from one transaction to another.\nHere is an example of setting contextual information throughout the lifecycle of a server:\n\n``` python\n\n\tdef startServer(containerName)\n\t\t# Static formatting at program startup...\n\t\ttheLogger = LogChainer(formatterCls = formatters.Json)\n\t\ttheLogger.initLogging()\n\t\ttheLogger.setField(containerName = containerName)\n\n\tdef handleTransaction(transactionId, userId):\n\t\t# More contextual data later on\n\t\ttheLogger.setField(uId = userId, trxId = transactionId)\n\n```\n\n----\n\n# Contributing\n\n## Install\nSimply clone and submit pull requests.\n\n## Testing\nThe unit tests are located in the [test folder](https://github.com/gg-math/plogchain/tree/master/test)\nwhich contains the `__main__.py` entrypoint.\n\n``` bash\n# Run all\npython test\n\n# Get additional options\npython test --help\n```\n\n## Delivery\nUse to the awesome [Poetry tool](https://python-poetry.org) for this purpose:\n\n``` bash\npoetry build\npoetry publish\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gg-math.github.io/plogchain", "keywords": "logging,security,secure,blockchain,signature", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "plogchain", "package_url": "https://pypi.org/project/plogchain/", "platform": "", "project_url": "https://pypi.org/project/plogchain/", "project_urls": {"Homepage": "https://gg-math.github.io/plogchain", "Repository": "https://github.com/gg-math/plogchain"}, "release_url": "https://pypi.org/project/plogchain/0.1.1/", "requires_dist": ["toml (>=0.9,<0.10)"], "requires_python": ">=3.2,<4.0", "summary": "Python Logging based on blockchain", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Plogchain</h1>\n<p><a href=\"https://github.com/gg-math/plogchain/actions\" rel=\"nofollow\"><img alt=\"Tests Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29d124cb5701783be117a614434f6eaa7d7d69e8/68747470733a2f2f6769746875622e636f6d2f67672d6d6174682f706c6f67636861696e2f776f726b666c6f77732f756e697474657374732f62616467652e737667\"></a>\n<img alt=\"Dependencies\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd01792f7ccb307520513be39df6f331c7bf43db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d302d626c75652e737667\">\n<a href=\"https://github.com/gg-math/plogchain/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c5a692eb4c50a166f706bbdea40805bdc8d694e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4953432d626c75652e737667\"></a></p>\n<p><a href=\"https://gg-math.github.io/plogchain\" rel=\"nofollow\"><img alt=\"Web page\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9efb7dde881343b16e50b2042b6c49ac016dfdb0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f776562736974652d6769746875622e696f2f706c6f67636861696e2d626c75652e737667\"></a>\n<a href=\"https://pypi.org/project/plogchain\" rel=\"nofollow\"><img alt=\"Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49f269f3b788f09df34a479d598c73987aee6565/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5049502d706c6f67636861696e2d626c75652e737667\"></a></p>\n<p>Python Logging based on blockchain \ud83d\udcdc \u26d3\ufe0f.</p>\n<h2>Logs get chained</h2>\n<p>The current log line contains the signature of the previous line with your secret.</p>\n<ul>\n<li>detect lines deleted / lost</li>\n<li>detect logs tampering</li>\n</ul>\n<h2>Philosophy</h2>\n<p>The package is intended to be a <strong>lightweight</strong> util for generating <strong>incorruptible</strong> logs.</p>\n<p>For this pupose we rely as much as possible on standard packages: few dependencies, high quality.</p>\n<p>The formatters are easy <strong>extensible</strong> by simply deriving from <code>Basic</code>.</p>\n<h1>Usage</h1>\n<h2>Install</h2>\n<pre>pip install plogchain\n</pre>\n<h2>Choose your log type</h2>\n<p>Many types of logs are supported out-of-the-box:</p>\n<ul>\n<li><code>Basic</code> raw text, relying on the standard formatter</li>\n<li><code>Json</code> structured log lines with static &amp; dynamic fields</li>\n<li><code>CSV</code> work in progress</li>\n</ul>\n<p>You can write a custom formatter in 20-ish lines.</p>\n<h2>Init once in main</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plogchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"c1\"># Initialize a default chainer.</span>\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Register the formatter to the logger.</span>\n<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">initLogging</span><span class=\"p\">()</span>\n</pre>\n<p>Have a look at <a href=\"#constructor-parameters\" rel=\"nofollow\">the comprehensive guide of constructor parameters</a>.</p>\n<h2>Use everywhere with python logging module</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"My message\"</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Some information\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Check your logs integrity afterwards</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plogchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"n\">aLogChain</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|0ec90b9839fdd964|TestChaining.py:20 test_logging_happy_case hello gg\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|2e3f1b4a7b946fb1|TestChaining.py:21 test_logging_happy_case voila1\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|10d1ab606618492a|TestChaining.py:22 test_logging_happy_case voila2\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|805757e144f4e385|TestChaining.py:23 test_logging_happy_case voila5\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|3bda90b5af77d3fe|TestChaining.py:24 test_logging_happy_case voila4\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">aLogChain</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Last good line\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">prevLine</span><span class=\"p\">)</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"First bad line\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"All right\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Constructor parameters</h2>\n<p>They are passed as a dict and/or named arguments.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">plogchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"n\">verbosity</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s2\">\"mySignatureKey\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"verbosity\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mySignatureKey\"</span><span class=\"p\">}</span>\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">timestampFmt</span> <span class=\"o\">=</span> <span class=\"s2\">\"iso\"</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>formatterCls</td>\n<td>formatters.Basic</td>\n<td>Type of logging to perform, raw text, json, custom</td>\n</tr>\n<tr>\n<td>format</td>\n<td>see below</td>\n<td>Placeholder string used by raw-text loggers</td>\n</tr>\n<tr>\n<td>secret</td>\n<td>secrets.token_urlsafe(128)</td>\n<td>Signature key to compute the line signature</td>\n</tr>\n<tr>\n<td>seed</td>\n<td>secrets.token_urlsafe()</td>\n<td>Random string to sign into the first log line</td>\n</tr>\n<tr>\n<td>timestampFmt</td>\n<td>\"iso\"</td>\n<td>iso for 8601 or <code>strftime</code> compatible placeholders</td>\n</tr>\n<tr>\n<td>timestampPrecision</td>\n<td>\"milliseconds\"</td>\n<td><code>timespec</code> element used by <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat\" rel=\"nofollow\">the datetime library</a></td>\n</tr>\n<tr>\n<td>timestampUtc</td>\n<td>False</td>\n<td>Transform the timestamp to its value in UTC</td>\n</tr>\n<tr>\n<td>stream</td>\n<td>cout</td>\n<td>Where the logs are sent, file/console/custom stream</td>\n</tr>\n<tr>\n<td>verbosity</td>\n<td>0</td>\n<td>Number [0..5] mapped to a logging.level</td>\n</tr></tbody></table>\n<p>The default format is <code>%(timestamp)s %(levelLetters)s %(fileLine)-15s %(funcName)-15s %(message)-60s |%(signature)s</code>. It relies on some extra fields like the signature at its end.</p>\n<h2>Plogchain extra logging fields</h2>\n<p>We enrich the standard logging record with some handy fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fileLine</td>\n<td>Widespread <code>filename:lineno</code></td>\n</tr>\n<tr>\n<td>levelLetters</td>\n<td>4 first letters of logging level names: short and unambiguous</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>The digital signature of the previous line. Include it in all your lines to benefit from the chaining</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>Improved version of <code>asctime</code>, see below</td>\n</tr></tbody></table>\n<p>The <code>timestamp</code> field offers more flexibility than <code>asctime</code> in regards to:</p>\n<ul>\n<li>the precision; can go up to the micro seconds (<code>msecs</code> cannot)</li>\n<li>the decimal separator; you choose, '.' by default</li>\n<li>utc or local timezone</li>\n<li>customize the format only in one place: <code>timestampFmt</code></li>\n</ul>\n<h2>Dynamic logging fields (WIP)</h2>\n<p>The package is suitable for server logging which context changes from one transaction to another.\nHere is an example of setting contextual information throughout the lifecycle of a server:</p>\n<pre>\t<span class=\"k\">def</span> <span class=\"nf\">startServer</span><span class=\"p\">(</span><span class=\"n\">containerName</span><span class=\"p\">)</span>\n\t\t<span class=\"c1\"># Static formatting at program startup...</span>\n\t\t<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"n\">formatterCls</span> <span class=\"o\">=</span> <span class=\"n\">formatters</span><span class=\"o\">.</span><span class=\"n\">Json</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">initLogging</span><span class=\"p\">()</span>\n\t\t<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">setField</span><span class=\"p\">(</span><span class=\"n\">containerName</span> <span class=\"o\">=</span> <span class=\"n\">containerName</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">handleTransaction</span><span class=\"p\">(</span><span class=\"n\">transactionId</span><span class=\"p\">,</span> <span class=\"n\">userId</span><span class=\"p\">):</span>\n\t\t<span class=\"c1\"># More contextual data later on</span>\n\t\t<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">setField</span><span class=\"p\">(</span><span class=\"n\">uId</span> <span class=\"o\">=</span> <span class=\"n\">userId</span><span class=\"p\">,</span> <span class=\"n\">trxId</span> <span class=\"o\">=</span> <span class=\"n\">transactionId</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h1>Contributing</h1>\n<h2>Install</h2>\n<p>Simply clone and submit pull requests.</p>\n<h2>Testing</h2>\n<p>The unit tests are located in the <a href=\"https://github.com/gg-math/plogchain/tree/master/test\" rel=\"nofollow\">test folder</a>\nwhich contains the <code>__main__.py</code> entrypoint.</p>\n<pre><span class=\"c1\"># Run all</span>\npython <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Get additional options</span>\npython <span class=\"nb\">test</span> --help\n</pre>\n<h2>Delivery</h2>\n<p>Use to the awesome <a href=\"https://python-poetry.org\" rel=\"nofollow\">Poetry tool</a> for this purpose:</p>\n<pre>poetry build\npoetry publish\n</pre>\n\n          </div>"}, "last_serial": 7105687, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bad5a35a7120643e3900d34be307c229", "sha256": "833e3c91c73a57d11ab6a4cdd79b6b48fbecb6d3e32d20b79fa144f93f7d9d3c"}, "downloads": -1, "filename": "plogchain-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bad5a35a7120643e3900d34be307c229", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 3640, "upload_time": "2020-04-23T20:38:55", "upload_time_iso_8601": "2020-04-23T20:38:55.017451Z", "url": "https://files.pythonhosted.org/packages/55/34/11b43ea9e8f2a32c9c82b70e76408935554fa418fe9fd1cca182c6f420c8/plogchain-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19c0f476e2402b20f351b96ce8e71c2e", "sha256": "0ff96d8d3614a7c2605803b939d3e0b28800586d107a8ec32b0c9ac287156fb3"}, "downloads": -1, "filename": "plogchain-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19c0f476e2402b20f351b96ce8e71c2e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 3368, "upload_time": "2020-04-23T20:38:56", "upload_time_iso_8601": "2020-04-23T20:38:56.903041Z", "url": "https://files.pythonhosted.org/packages/03/d4/24a2fb45877769df8bd5d6195ea7a940b5fe97147f3cd277dfbbbd47300f/plogchain-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3cb2c8e65417083e1d680d2a39c78e2b", "sha256": "d50d195861af8b7c6d00c1aa1775ab480e0925ce371d25500d71cb3822c7246b"}, "downloads": -1, "filename": "plogchain-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3cb2c8e65417083e1d680d2a39c78e2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 6139, "upload_time": "2020-04-26T09:07:54", "upload_time_iso_8601": "2020-04-26T09:07:54.130645Z", "url": "https://files.pythonhosted.org/packages/a4/4b/eb407154f5abf44185d2d7d96c5baf69f3036fcc1a805c914862c0615193/plogchain-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d29dadba47853bc04050ed34067e3646", "sha256": "5de13b870e9d8c1f34307423190fd1aef82b4bb3bf595568f1c909280d3439e5"}, "downloads": -1, "filename": "plogchain-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d29dadba47853bc04050ed34067e3646", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 5172, "upload_time": "2020-04-26T09:07:55", "upload_time_iso_8601": "2020-04-26T09:07:55.331475Z", "url": "https://files.pythonhosted.org/packages/10/97/ecc210a237583c27da86832a9861996ac186c52eefc3b1e770def91b6b06/plogchain-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "39bbb5ffd001656586265cfa490b132d", "sha256": "7fcc6d5055faeec82024d3896cd8fef82da4b544ed5ea9c7e8cefa650c6f68b1"}, "downloads": -1, "filename": "plogchain-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "39bbb5ffd001656586265cfa490b132d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 7578, "upload_time": "2020-04-26T15:46:15", "upload_time_iso_8601": "2020-04-26T15:46:15.403570Z", "url": "https://files.pythonhosted.org/packages/30/52/0c214116e9fbb0641bf2340f8371230f07f9e9ccfa4e266a64f10292f798/plogchain-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf523574aeeac4a9b5defb8b0c3d6c23", "sha256": "58b730a17ffa0e4ee8e2a00450baf6c94c6e20035d2ff9e282a2cfd9013aff53"}, "downloads": -1, "filename": "plogchain-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf523574aeeac4a9b5defb8b0c3d6c23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 7358, "upload_time": "2020-04-26T15:46:17", "upload_time_iso_8601": "2020-04-26T15:46:17.016930Z", "url": "https://files.pythonhosted.org/packages/0b/ec/c5d160c0d46e11523d91db6ef792019d196378f43dc7c2d6cb2120d0e38d/plogchain-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d302726610780d9a290539b4cf6d0b0e", "sha256": "8259550ad999d8e172f76c9f1275ed3338f673650815e4dfd37b2f8331d7ac8d"}, "downloads": -1, "filename": "plogchain-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d302726610780d9a290539b4cf6d0b0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 7629, "upload_time": "2020-04-26T16:13:45", "upload_time_iso_8601": "2020-04-26T16:13:45.574778Z", "url": "https://files.pythonhosted.org/packages/57/b2/9f266eaa694489e764e472615fe3c7bb472e076291ce49dc8e62937e5e77/plogchain-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de6abd7540db3090fe84d1d0440fcdb9", "sha256": "8ca208b8cb7f7d95f6cc2e83d58367ede39104682dd97bd4cbed84fb9f487a5d"}, "downloads": -1, "filename": "plogchain-0.1.1.tar.gz", "has_sig": false, "md5_digest": "de6abd7540db3090fe84d1d0440fcdb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 7447, "upload_time": "2020-04-26T16:13:46", "upload_time_iso_8601": "2020-04-26T16:13:46.655672Z", "url": "https://files.pythonhosted.org/packages/10/44/a3e39bba824e1017b692f46b15006461a918675a3f0020b63ec09bce0fbe/plogchain-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d302726610780d9a290539b4cf6d0b0e", "sha256": "8259550ad999d8e172f76c9f1275ed3338f673650815e4dfd37b2f8331d7ac8d"}, "downloads": -1, "filename": "plogchain-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d302726610780d9a290539b4cf6d0b0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 7629, "upload_time": "2020-04-26T16:13:45", "upload_time_iso_8601": "2020-04-26T16:13:45.574778Z", "url": "https://files.pythonhosted.org/packages/57/b2/9f266eaa694489e764e472615fe3c7bb472e076291ce49dc8e62937e5e77/plogchain-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de6abd7540db3090fe84d1d0440fcdb9", "sha256": "8ca208b8cb7f7d95f6cc2e83d58367ede39104682dd97bd4cbed84fb9f487a5d"}, "downloads": -1, "filename": "plogchain-0.1.1.tar.gz", "has_sig": false, "md5_digest": "de6abd7540db3090fe84d1d0440fcdb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 7447, "upload_time": "2020-04-26T16:13:46", "upload_time_iso_8601": "2020-04-26T16:13:46.655672Z", "url": "https://files.pythonhosted.org/packages/10/44/a3e39bba824e1017b692f46b15006461a918675a3f0020b63ec09bce0fbe/plogchain-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:24 2020"}