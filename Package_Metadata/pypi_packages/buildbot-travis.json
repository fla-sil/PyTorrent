{"info": {"author": "Buildbot community", "author_email": "buildbot-devel@lists.sourceforge.net", "bugtrack_url": null, "classifiers": [], "description": "============================\nTravis CI Compatibility Shim\n============================\n\nThis is a setup of Buildbot steps, factories and configuration helpers that\ngive you the best of buildbot and the best of Travis CI:\n\n * Builder configuration that lives with the source code\n * Private builds\n * non-github SCM support (gerrit, gitlab, github, github enterpris)\n * unlimitted build parallelization on your own infra\n\n\nBasically we provide a compatibility shim in buildbot that allows it to consume a ``.travis.yml`` file.\n\nbuildbot_travis does however not support the full .travis.yml format.\n\n|travis-badge|_ |codecov-badge|_\n\n\n.. |travis-badge| image:: https://travis-ci.org/buildbot/buildbot_travis.svg?branch=master\n.. _travis-badge: https://travis-ci.org/buildbot/buildbot_travis\n.. |codecov-badge| image:: http://codecov.io/github/buildbot/buildbot_travis/coverage.svg?branch=master\n.. _codecov-badge: http://codecov.io/github/buildbot/buildbot_travis?branch=master\n\n\nQuickStart\n==========\n\nFirst you need to make sure you have the proper python 2.7 environment. On ubuntu 16.04, that would mean::\n\n    sudo apt-get install build-essential python-dev libffi-dev libssl-dev python-pip\n    pip install virtualenv\n\nThen you create a virtualenv and install buildbot_travis via pip::\n\n    mkdir bbtravis\n    cd bbtravis\n    virtualenv sandbox\n    . ./sandbox/bin/activate\n    pip install buildbot_travis\n\nNow you can create a new master::\n\n    bbtravis create-master master\n\nNow you can start that new master::\n\n    buildbot start master\n\nAnd then go to the UI: http://localhost:8010  which has an administration panel where to configure the projects.\n\n\nQuickStart With Docker\n======================\n\n::\n\n    docker run -p 8010:8010 -p 9989:9989 buildbot/buildbot-travis\n\n\nQuickStart With Hyper\n=====================\n\n::\n\n    IP=<yourFIPaddress>\n    container=`hyper run -d -e buildbotURL=http://$IP/ -p 9989:9989 -p 80:8010 buildbot/buildbot-travis`\n    hyper fip attach $IP $container\n    echo go to http://$IP/#/bbtravis/config/auth  to configure admin access\n    echo go to http://$IP/#/bbtravis/config/workers to configure\n\n\nBuildbot Nine UI Plugin\n=======================\n\nbuildbot_travis is configurable via the web UI.\n\nYou can edit the project list, environment variables, not_important files, deployment environments, all through the web UI.\n\nhigh level configuration is either stored in a yaml file or directly in the configured database.\n\nThe per project config file\n===========================\n\nThis is a ``.travis.yml`` for a typical buildout project::\n\n    language: python\n\n    before_install: python bootstrap.py\n    install:./bin/buildout\n    script: ./bin/test\n\nYou can read more about this file format on the travis-ci website::\n\n    http://about.travis-ci.org/docs/user/build-configuration/\n\nBut features not also mentioned on this page might not currently be supported.\n\n\nSupported languages\n-------------------\n\nThe list of supported language is depending on your build worker configuration.\n\nWith the help of docker, you can create as many images as you need worker configuration.\n\n\nActually the language parameter of the defacto travis format does not fully leverage the full possibilities of what you can do with buildbot.\n\nYou could think of selecting a different docker image according to the version of software you want to check.\nThis can avoid the time to setup the worker environment at the beginning of your travis.yml (as you would do in travis saas)\n\n\nBuild Steps\n-----------\n\nTravis provides 6 hook points for your builds:\n\n * before_install\n * install\n * after_install\n * before_script\n * script\n * after_script\n\nWe really don't care what you run from these hooks as long as exit code 0 means\nsuccess and anything else means fail.\n\nYou can provide a single command like this::\n\n    install: ./bin/buildout\n\nOr multiple commands like this::\n\n    install:\n      - ./configure\n      - ./bin/buildout\n\nEach element of the list in the yaml will create a single step, which is named with the first characters of your command line.\n\nIf you want to create a custom name, buildbot_travis supports following syntax::\n\n    script:\n      - |\n          # build\n          ./configure\n          make\n      - |\n          # tests\n          make tests\n\n\nBuildbot specific features\n--------------------------\n\nSteps as dictionary\n~~~~~~~~~~~~~~~~~~~\n\nOriginal Travis just create a simple shell script to run the whole CI script.\nBuildbot is a little bit more powerful, and buildbot_travis can make use of it.\nFor this you need to go out of the travis \"de-facto\" standard. e.g::\n\n    script:\n      - |\n          # build\n          ./configure\n          make\n\n      - title: tests\n        shell: dash\n        condition: TESTS=='tests'\n        cmd: make tests\n\nIf yaml parser encounters a dictionary, then it will use the following keys:\n\n\n* ``title``: the title of the step in the UI\n\n* ``shell``: run the cmd inside the given shell (default is bash)\n\n* ``condition``: a condition to run the step.\n   It is evaluated as a python expression, with variables beiing the environment variable generated by your matrix.\n   The condition is evaluated at the time of the parsing of the yaml file.\n   If the condition is not met, then the step is just not inserted in the step list.\n\n* ``cmd``: The command to run.\n\n* ``step``: The buildbot step create.\n    See below for detailled description.\n    if defined, ``shell``, ``title`` and ``cmd`` keys are ignored.\n\n.bbtravis.yml\n~~~~~~~~~~~~~\n\n\nIn order to keep working with buildbot_travis and travis.org at the same time, buildbot travis will look for a .bbtravis.yml before .travis.yml.\nWith this, you can keep your .travis.yml without any buildbot specific feature.\n\nShallow Clone\n~~~~~~~~~~~~~\n\n* Original travis supports clone depth configuration inside the yml file (aka shallow clone).\n  As the git clone is made before buildbot has a chance to parse the yaml, this configuration is done in the per project config in buildbot travis.\n  Two options are available in the cfg.yml (shallow and retryFetch) e.g::\n\n    projects:\n    -   branches:\n        - master\n        name: buildbot\n        repository: https://github.com/buildbot/buildbot\n        shallow: 200\n        mode: \"full\"\n        method: \"clobber\"\n        stages: []\n        tags: []\n        vcs_type: github\n\nInterpolate\n~~~~~~~~~~~\n\nBuildbot has a very useful `Interpolate <http://docs.buildbot.net/latest/manual/cfg-properties.html#interpolate>`_ utility.\nIf you prepend your scripts by ```!i`` or ``!interpolate``, then buildbot_travis will automatically create an Interpolate object::\n\n      - title: make dist\n        cmd: !i make REVISION=%(prop:got_revision:-%(src::revision:-unknown)s)s dist\n\nCommands without shell\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf cmd is a list, it will run without use of shell (this can avoid to have to shell quote variables):\n\n.. code-block:: yaml\n\n    script:\n      - title: make dist\n        cmd: [ \"make\", !i \"REVISION=%(prop:got_revision:-%(src::revision:-unknown)s)s\", \"dist\" ]\n\nBuildbot Steps Batteries\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nBuildbot comes with battery included. It has a `tons of steps <http://docs.buildbot.net/latest/manual/cfg-buildsteps.html>`_ in it that you could use.\nWhat if you could contruct those steps in the bbtravis.yml?\nGuess what? You can.\n\n.. code-block:: yaml\n\n    script:\n      - condition: TESTS=='trial'\n        step: !Trial\n            name: trial\n            tests: buildbot.test\n\nEvery Buildbot steps from the buildbot.plugins.steps module is available by default.\nIf you want to use your own customs steps, you can do it with 2 methods.\n\n- Create a buildbot `plugin <http://docs.buildbot.net/latest/manual/plugins.html#plugin-infrastructure-in-buildbot>`_.\n  If it is installed in your master virtual environment and recognised inside buildbot.plugins.steps, it will be available in buildbot_travis yaml parser.\n\n- If you want to define your custom step in your master.cfg directly, you will need to register your step directly in the yaml parser.\n\n.. code-block:: python\n\n    from buildbot_travis.travisyml import registerStepClass\n\n    class FancyStep(steps.ShellSequence):\n        ...\n\n    registerStepClass(\"FancyStep\", FancyStep)\n\nthen in your yaml:\n\n.. code-block:: yaml\n\n    script:\n      - step: !FancyStep\n\n.. note::\n\n   You can construct your steps either with arg list or keyword args, but not both e.g following are equivalent\n\n.. code-block:: yaml\n\n    script:\n      - step: !ShellCommand \"true\"\n\n      - step: !ShellCommand\n            - \"true\"\n\n      - step: !ShellCommand\n            command: \"true\"\n\n.. note::\n\n   Due to the way steps are initialized, ``title`` key cannot be used to override the default step name.\n   You have to use the standard ``name`` step argument to specify it:\n\n    .. code-block:: yaml\n\n        script:\n          - step: !ShellCommand\n                command: \"true\"\n                name: \"always succeed\"\n\n.. note::\n\n   You can also contruct your step list without passing through the dictionary structure\n\n    .. code-block:: yaml\n\n        script:\n          - !ShellCommand\n                command: \"true\"\n                name: \"always succeed\"\n\nStatus context\n~~~~~~~~~~~~~~\n\nIf github_token is specified, bbtravis will create a github status for each of the builds of the matrix, with direct link to the sub build.\nThe name of the status (aka context) is calculated using ``reporter_context`` of the project configuration.\nThe default is ``\"bb%(prop:matrix_label:+/)s%(prop:matrix_label)s\"``.\n\n``matrix_label`` is computed by the Trigger step, and is the concatenation of key and values of the matrix.\nbecause matrix can be large, and github context is limited in size, bbtravis implements a way for projects to define abbreviations for the labels.\ne.g .bbtravis.yml such as:\n\n.. code-block:: yaml\n\n    language: python\n\n    label_mapping:\n      TWISTED: tw\n      SQLALCHEMY: sqla\n      SQLALCHEMY_MIGRATE: sqlam\n      latest: l\n      python: py\n\nWill generate context like:  ``bb/py:2.6/sqla:l/sqlam:0.7.1/tw:11.1.0``\n\n.. note::\n\n    context reporter is for now only implemented from github, but it should be easy to adapt to Gitlab, Gerrit, etc\n\nInstalling dependencies\n-----------------------\n\nThe docker image that is used is throw away, and will start from clean state for each build.\n\nYou can create a docker image with passwordless sudo, as travis does, so that you can use apt-get::\n\n    before_install:\n      - sudo apt-get update\n      - sudo apt-get install -y -q mydependency\n\nIt is however a better practice and more optimized to just provide a prebuilt docker image which contain what you need.\n\n\nEnvironments\n------------\n\nYou might want to perform multiple builds of the same piece of software. Travis\ndelivers::\n\n    env:\n     - FLAVOUR=blue\n     - FLAVOUR=green\n     - FLAVOUR=red\n\n    install:\n      - ./configure -f $FLAVOUR\n      - ./bin/buildout\n\nCommits to this code base will cause builds for blue, green and red flavours.\nThe environment variables can be used like ordinary environment variables\ninside the scripts you run from your ``.travis.yml`` and can be used in the\n``.travis.yml`` itself.\n\n``env`` is a list of environment variables. You can specify multiple variables\non a single line like this::\n\n    env:\n     - PROP1=foo PROP2=bar\n\n\nBuild Matrix\n------------\n\nYour options for ``language`` and ``env`` create an implicit build matrix. A\nbuild matrix is a collection of all the possible combinations of the ``env``\noptions and language versions. You can fine tine this matrix by excluding\ncertain combinations, or inserting additional ones.\n\nHere is an example of excluding a combination and inserting an additional\nbuild::\n\n      python:\n        - 2.6\n        - 2.7\n\n      env:\n        - FLAVOUR=apple\n        - FLAVOUR=orange\n\n      matrix:\n        exclude:\n          - python: 2.7\n            env: FLAVOUR=orange\n        include:\n          - python: 2.7\n            env: FLAVOUR=banana\n\nThis will do an additional build of the ``banana`` build but only for python\n2.7. And it will turn off the build for the ``orange`` flavour, again only\nfor python 2.7.\n\n\nDeployment\n----------\n\nA ``Deploy`` section is available in the left side menu. In this section, a Deployment dashboard will be\navailable once configured.\n\nThis dashboard enables a streamlined, fully automated delivery process, from Commit to Production environment.\nLatest version of your project is just one click away from users.\n\nSee the dashboard's template below\n\n    ==============   =========    =========    =========    =========\n     DELIVERABLES                         STAGES\n    --------------   ------------------------------------------------\n     (projects)        COMMIT        DEV          QA           PROD\n    ==============   =========    =========    =========    =========\n     Deliverable A    GIT rev      1.2.3        GIT tag      GIT tag\n    ==============   =========    =========    =========    =========\n\nFor example, the version 1.2.3 (specified thanks to a GIT tag) of deliverable A is deployed in DEV stage.\n\nHere are the 5 steps to setup a Deployment dashboard in Buildbot Travis.\n\n1) A ``Deployment`` section is available in the ``Settings`` section.\n   In this section, the ``Deployment Environment(s)`` is the list of target environments (or Stages)\n   where deliverables are going to be deployed.\n   These environments should be sorted following your development process definition.\n   Example::\n\n       COMMIT (merged dev), DEV, QA, PROD\n       BEWARE!The first column is reserved for COMMIT stage so you do not need to define it in the Stages list.\n\n2) Go to the ``Deploy`` section in the left side menu. You should see a Deployment dashboard like the above example.\n   The Stages should be the same as the ones defined in 1).\n\n3) Go to the ``Settings/Projects`` section. Add corresponding Stages to the different projects in the Stages field.\n   Stages can be a subset of the Stages defined in 2).\n\n4) You should see a fully configured Deployment dashboard with all the deliverables, Stages, GIT revisions and GIT\n   tags. GIT revisions and GIT tags are available in dropdown lists. When you select a specific version, a pop_up\n   window appears to launch the deployment procedure in the specific stage.\n\n5) To enable push button deployments, you need to define the deployment procedures.\n   Create deployment scripts and update the script and/or after_script sections of the ``.travis.yml`` file\n   of each deliverable.\n\n   Example::\n\n    after_script:\n       - |\n         # Deployment\n           python ./deploy.py --repo \"${repository}\" --stage \"${stage}\" --version \"${version}\";\n\n           ${repository} is the URL of the project's (or deliverable's) repo.\n           ${stage} is the retrieved from the Deployment dashboard.\n           ${version} is retrieved from the Deployment dashboard.\n\nHow it works\n============\n\nThe basic behaviour is:\n\n * Commit is picked up (polling by default, with additional triggers via\n   ``/change_hook/poller?poller=pollername`` web hook\n\n * Build is scheduled on a 'spawner' builder - this is a builder configured to\n   use an ordinary slave\n\n * Checkout occurs - for the purposes of acquiring the ``.travis.yml`` rather\n   than for actually performing a build\n\n * 'spawner' triggers a build on a 'job' builder for each environment in the\n   build matrix defined in ``.travis.yml``\n\n * 'job' builder does a single build in a clean latent buildslave (VM or docker)\n\n * ``setup-steps`` step dynamically appends ShellCommand steps based on\n   contents of ``.travis.yml``\n\n * when job is over VM orcontainer is thrown away.\n\n * The 'spawner' build acts as a way of aggregating the build results in a\n   single pass/fail status.\n\n * MailNotifier subclass uses ``.travis.yml`` found in build history so that\n   recipients list and whether or not to mail can be adapted accordingly.\n   XXX: this needs to be adapted for nine\n\n\nCommandLine\n===========\n``buildbot_travis`` package comes with a ``bbtravis`` command line utility.\n\nThis utility is useful to test travis.yml locally without pushing it to the CI.\nIt allows to test either the travis.yml and the docker image used to run the workers.\nIt allows to run only the part of the matrix that you are working on\n\nExample::\n\n    bbtravis run -d tardyp/metabbotcfg  -j8 TESTS=trial TWISTED=latest\n\nThis will run the resulting tests in parallel using docker image tagged tardyp/metabbotcfg and will filter only the matrix environment with TESTS=='trial' and TWISTED=='latest'\n\nUI is using urwid console UI framework, and will split the terminal into several terminal showing each matrix run.\nYou can scroll using mouse wheel, and click to zoom and get more details.\n\n.. Note::\n\n    For now ``bbtravis`` command line utility to note support Buildbot step battery nor Interpolate contructs\n\nTODO\n====\n\nThis special branch is the nine port of buildbot_travis.\nCompared to previous version following features are not yet available\n\n* Custom MailNotifier needs to be adapted for nine data api, in order to get the .travis.yml configuration\n* mergerequest should be adapted to the new collapseRequest api\n* SVN shall be validated (only git has been tested so far)\n* metrics facility is not really specific to travis, and should be available in buildbot master directly\n* nextBuild feature shall be reimplemented: allowed to avoid running a spawner when no '-job' slave is available\n\nCompared to original Travis format, here is a non-exaustive list of features known not to be supported\n\n* after_success, after_failure. Not implemented, but easy to add.\n* deploy. Deployment step would have to happen after all the matrix subbuilds are succeed\n\n\nAnd configure your hyper keys in the default hyper worker\nYou should also configure an authentication plugin in order to protect those keys.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/buildbot/buildbot_travis", "keywords": "buildbot travis ci", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "buildbot-travis", "package_url": "https://pypi.org/project/buildbot-travis/", "platform": "", "project_url": "https://pypi.org/project/buildbot-travis/", "project_urls": {"Homepage": "http://github.com/buildbot/buildbot_travis"}, "release_url": "https://pypi.org/project/buildbot-travis/0.6.4/", "requires_dist": ["setuptools", "buildbot (>=0.9.6)", "buildbot-www", "buildbot-console-view", "buildbot-waterfall-view", "buildbot-worker", "klein", "urwid", "PyYAML", "txrequests", "pyjade", "txgithub", "ldap3", "hyper-sh", "future"], "requires_python": "", "summary": "Travis CI implemented in Buildbot", "version": "0.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a setup of Buildbot steps, factories and configuration helpers that\ngive you the best of buildbot and the best of Travis CI:</p>\n<blockquote>\n<ul>\n<li>Builder configuration that lives with the source code</li>\n<li>Private builds</li>\n<li>non-github SCM support (gerrit, gitlab, github, github enterpris)</li>\n<li>unlimitted build parallelization on your own infra</li>\n</ul>\n</blockquote>\n<p>Basically we provide a compatibility shim in buildbot that allows it to consume a <tt>.travis.yml</tt> file.</p>\n<p>buildbot_travis does however not support the full .travis.yml format.</p>\n<p><a href=\"https://travis-ci.org/buildbot/buildbot_travis\" rel=\"nofollow\"><img alt=\"travis-badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0bb904108d317a758c6ac5684cb84041fee789ea/68747470733a2f2f7472617669732d63692e6f72672f6275696c64626f742f6275696c64626f745f7472617669732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://codecov.io/github/buildbot/buildbot_travis?branch=master\" rel=\"nofollow\"><img alt=\"codecov-badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a61ab89189fdffd95e43ebee935b1229e65f162/687474703a2f2f636f6465636f762e696f2f6769746875622f6275696c64626f742f6275696c64626f745f7472617669732f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<p>First you need to make sure you have the proper python 2.7 environment. On ubuntu 16.04, that would mean:</p>\n<pre>sudo apt-get install build-essential python-dev libffi-dev libssl-dev python-pip\npip install virtualenv\n</pre>\n<p>Then you create a virtualenv and install buildbot_travis via pip:</p>\n<pre>mkdir bbtravis\ncd bbtravis\nvirtualenv sandbox\n. ./sandbox/bin/activate\npip install buildbot_travis\n</pre>\n<p>Now you can create a new master:</p>\n<pre>bbtravis create-master master\n</pre>\n<p>Now you can start that new master:</p>\n<pre>buildbot start master\n</pre>\n<p>And then go to the UI: <a href=\"http://localhost:8010\" rel=\"nofollow\">http://localhost:8010</a>  which has an administration panel where to configure the projects.</p>\n</div>\n<div id=\"quickstart-with-docker\">\n<h2>QuickStart With Docker</h2>\n<pre>docker run -p 8010:8010 -p 9989:9989 buildbot/buildbot-travis\n</pre>\n</div>\n<div id=\"quickstart-with-hyper\">\n<h2>QuickStart With Hyper</h2>\n<pre>IP=&lt;yourFIPaddress&gt;\ncontainer=`hyper run -d -e buildbotURL=http://$IP/ -p 9989:9989 -p 80:8010 buildbot/buildbot-travis`\nhyper fip attach $IP $container\necho go to http://$IP/#/bbtravis/config/auth  to configure admin access\necho go to http://$IP/#/bbtravis/config/workers to configure\n</pre>\n</div>\n<div id=\"buildbot-nine-ui-plugin\">\n<h2>Buildbot Nine UI Plugin</h2>\n<p>buildbot_travis is configurable via the web UI.</p>\n<p>You can edit the project list, environment variables, not_important files, deployment environments, all through the web UI.</p>\n<p>high level configuration is either stored in a yaml file or directly in the configured database.</p>\n</div>\n<div id=\"the-per-project-config-file\">\n<h2>The per project config file</h2>\n<p>This is a <tt>.travis.yml</tt> for a typical buildout project:</p>\n<pre>language: python\n\nbefore_install: python bootstrap.py\ninstall:./bin/buildout\nscript: ./bin/test\n</pre>\n<p>You can read more about this file format on the travis-ci website:</p>\n<pre>http://about.travis-ci.org/docs/user/build-configuration/\n</pre>\n<p>But features not also mentioned on this page might not currently be supported.</p>\n<div id=\"supported-languages\">\n<h3>Supported languages</h3>\n<p>The list of supported language is depending on your build worker configuration.</p>\n<p>With the help of docker, you can create as many images as you need worker configuration.</p>\n<p>Actually the language parameter of the defacto travis format does not fully leverage the full possibilities of what you can do with buildbot.</p>\n<p>You could think of selecting a different docker image according to the version of software you want to check.\nThis can avoid the time to setup the worker environment at the beginning of your travis.yml (as you would do in travis saas)</p>\n</div>\n<div id=\"build-steps\">\n<h3>Build Steps</h3>\n<p>Travis provides 6 hook points for your builds:</p>\n<blockquote>\n<ul>\n<li>before_install</li>\n<li>install</li>\n<li>after_install</li>\n<li>before_script</li>\n<li>script</li>\n<li>after_script</li>\n</ul>\n</blockquote>\n<p>We really don\u2019t care what you run from these hooks as long as exit code 0 means\nsuccess and anything else means fail.</p>\n<p>You can provide a single command like this:</p>\n<pre>install: ./bin/buildout\n</pre>\n<p>Or multiple commands like this:</p>\n<pre>install:\n  - ./configure\n  - ./bin/buildout\n</pre>\n<p>Each element of the list in the yaml will create a single step, which is named with the first characters of your command line.</p>\n<p>If you want to create a custom name, buildbot_travis supports following syntax:</p>\n<pre>script:\n  - |\n      # build\n      ./configure\n      make\n  - |\n      # tests\n      make tests\n</pre>\n</div>\n<div id=\"buildbot-specific-features\">\n<h3>Buildbot specific features</h3>\n<div id=\"steps-as-dictionary\">\n<h4>Steps as dictionary</h4>\n<p>Original Travis just create a simple shell script to run the whole CI script.\nBuildbot is a little bit more powerful, and buildbot_travis can make use of it.\nFor this you need to go out of the travis \u201cde-facto\u201d standard. e.g:</p>\n<pre>script:\n  - |\n      # build\n      ./configure\n      make\n\n  - title: tests\n    shell: dash\n    condition: TESTS=='tests'\n    cmd: make tests\n</pre>\n<p>If yaml parser encounters a dictionary, then it will use the following keys:</p>\n<ul>\n<li><tt>title</tt>: the title of the step in the UI</li>\n<li><tt>shell</tt>: run the cmd inside the given shell (default is bash)</li>\n<li><dl>\n<dt><tt>condition</tt>: a condition to run the step.</dt>\n<dd>It is evaluated as a python expression, with variables beiing the environment variable generated by your matrix.\nThe condition is evaluated at the time of the parsing of the yaml file.\nIf the condition is not met, then the step is just not inserted in the step list.</dd>\n</dl>\n</li>\n<li><tt>cmd</tt>: The command to run.</li>\n<li><dl>\n<dt><tt>step</tt>: The buildbot step create.</dt>\n<dd>See below for detailled description.\nif defined, <tt>shell</tt>, <tt>title</tt> and <tt>cmd</tt> keys are ignored.</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"bbtravis-yml\">\n<h4>.bbtravis.yml</h4>\n<p>In order to keep working with buildbot_travis and travis.org at the same time, buildbot travis will look for a .bbtravis.yml before .travis.yml.\nWith this, you can keep your .travis.yml without any buildbot specific feature.</p>\n</div>\n<div id=\"shallow-clone\">\n<h4>Shallow Clone</h4>\n<ul>\n<li><p>Original travis supports clone depth configuration inside the yml file (aka shallow clone).\nAs the git clone is made before buildbot has a chance to parse the yaml, this configuration is done in the per project config in buildbot travis.\nTwo options are available in the cfg.yml (shallow and retryFetch) e.g:</p>\n<pre>projects:\n-   branches:\n    - master\n    name: buildbot\n    repository: https://github.com/buildbot/buildbot\n    shallow: 200\n    mode: \"full\"\n    method: \"clobber\"\n    stages: []\n    tags: []\n    vcs_type: github\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"interpolate\">\n<h4>Interpolate</h4>\n<p>Buildbot has a very useful <a href=\"http://docs.buildbot.net/latest/manual/cfg-properties.html#interpolate\" rel=\"nofollow\">Interpolate</a> utility.\nIf you prepend your scripts by <tt>`!i</tt> or <tt>!interpolate</tt>, then buildbot_travis will automatically create an Interpolate object:</p>\n<pre>- title: make dist\n  cmd: !i make REVISION=%(prop:got_revision:-%(src::revision:-unknown)s)s dist\n</pre>\n</div>\n<div id=\"commands-without-shell\">\n<h4>Commands without shell</h4>\n<p>If cmd is a list, it will run without use of shell (this can avoid to have to shell quote variables):</p>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">title</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">make dist</span>\n    <span class=\"nt\">cmd</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span> <span class=\"s\">\"make\"</span><span class=\"p-Indicator\">,</span> <span class=\"kt\">!i</span> <span class=\"s\">\"REVISION=%(prop:got_revision:-%(src::revision:-unknown)s)s\"</span><span class=\"p-Indicator\">,</span> <span class=\"s\">\"dist\"</span> <span class=\"p-Indicator\">]</span>\n</pre>\n</div>\n<div id=\"buildbot-steps-batteries\">\n<h4>Buildbot Steps Batteries</h4>\n<p>Buildbot comes with battery included. It has a <a href=\"http://docs.buildbot.net/latest/manual/cfg-buildsteps.html\" rel=\"nofollow\">tons of steps</a> in it that you could use.\nWhat if you could contruct those steps in the bbtravis.yml?\nGuess what? You can.</p>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">condition</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">TESTS=='trial'</span>\n    <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!Trial</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">trial</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">buildbot.test</span>\n</pre>\n<p>Every Buildbot steps from the buildbot.plugins.steps module is available by default.\nIf you want to use your own customs steps, you can do it with 2 methods.</p>\n<ul>\n<li>Create a buildbot <a href=\"http://docs.buildbot.net/latest/manual/plugins.html#plugin-infrastructure-in-buildbot\" rel=\"nofollow\">plugin</a>.\nIf it is installed in your master virtual environment and recognised inside buildbot.plugins.steps, it will be available in buildbot_travis yaml parser.</li>\n<li>If you want to define your custom step in your master.cfg directly, you will need to register your step directly in the yaml parser.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">buildbot_travis.travisyml</span> <span class=\"kn\">import</span> <span class=\"n\">registerStepClass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FancyStep</span><span class=\"p\">(</span><span class=\"n\">steps</span><span class=\"o\">.</span><span class=\"n\">ShellSequence</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">registerStepClass</span><span class=\"p\">(</span><span class=\"s2\">\"FancyStep\"</span><span class=\"p\">,</span> <span class=\"n\">FancyStep</span><span class=\"p\">)</span>\n</pre>\n<p>then in your yaml:</p>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!FancyStep</span>\n</pre>\n<div>\n<p>Note</p>\n<p>You can construct your steps either with arg list or keyword args, but not both e.g following are equivalent</p>\n</div>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!ShellCommand</span> <span class=\"s\">\"true\"</span>\n\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!ShellCommand</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"s\">\"true\"</span>\n\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!ShellCommand</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"true\"</span>\n</pre>\n<div>\n<p>Note</p>\n<p>Due to the way steps are initialized, <tt>title</tt> key cannot be used to override the default step name.\nYou have to use the standard <tt>name</tt> step argument to specify it:</p>\n<blockquote>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">step</span><span class=\"p\">:</span> <span class=\"kt\">!ShellCommand</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"true\"</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">\"always</span><span class=\"nv\"> </span><span class=\"s\">succeed\"</span>\n</pre>\n</blockquote>\n</div>\n<div>\n<p>Note</p>\n<p>You can also contruct your step list without passing through the dictionary structure</p>\n<blockquote>\n<pre><span class=\"nt\">script</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"kt\">!ShellCommand</span>\n        <span class=\"nt\">command</span><span class=\"p\">:</span> <span class=\"s\">\"true\"</span>\n        <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"s\">\"always</span><span class=\"nv\"> </span><span class=\"s\">succeed\"</span>\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"status-context\">\n<h4>Status context</h4>\n<p>If github_token is specified, bbtravis will create a github status for each of the builds of the matrix, with direct link to the sub build.\nThe name of the status (aka context) is calculated using <tt>reporter_context</tt> of the project configuration.\nThe default is <tt><span class=\"pre\">\"bb%(prop:matrix_label:+/)s%(prop:matrix_label)s\"</span></tt>.</p>\n<p><tt>matrix_label</tt> is computed by the Trigger step, and is the concatenation of key and values of the matrix.\nbecause matrix can be large, and github context is limited in size, bbtravis implements a way for projects to define abbreviations for the labels.\ne.g .bbtravis.yml such as:</p>\n<pre><span class=\"nt\">language</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">python</span>\n\n<span class=\"nt\">label_mapping</span><span class=\"p\">:</span>\n  <span class=\"nt\">TWISTED</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">tw</span>\n  <span class=\"nt\">SQLALCHEMY</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">sqla</span>\n  <span class=\"nt\">SQLALCHEMY_MIGRATE</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">sqlam</span>\n  <span class=\"nt\">latest</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">l</span>\n  <span class=\"nt\">python</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">py</span>\n</pre>\n<p>Will generate context like:  <tt>bb/py:2.6/sqla:l/sqlam:0.7.1/tw:11.1.0</tt></p>\n<div>\n<p>Note</p>\n<p>context reporter is for now only implemented from github, but it should be easy to adapt to Gitlab, Gerrit, etc</p>\n</div>\n</div>\n</div>\n<div id=\"installing-dependencies\">\n<h3>Installing dependencies</h3>\n<p>The docker image that is used is throw away, and will start from clean state for each build.</p>\n<p>You can create a docker image with passwordless sudo, as travis does, so that you can use apt-get:</p>\n<pre>before_install:\n  - sudo apt-get update\n  - sudo apt-get install -y -q mydependency\n</pre>\n<p>It is however a better practice and more optimized to just provide a prebuilt docker image which contain what you need.</p>\n</div>\n<div id=\"environments\">\n<h3>Environments</h3>\n<p>You might want to perform multiple builds of the same piece of software. Travis\ndelivers:</p>\n<pre>env:\n - FLAVOUR=blue\n - FLAVOUR=green\n - FLAVOUR=red\n\ninstall:\n  - ./configure -f $FLAVOUR\n  - ./bin/buildout\n</pre>\n<p>Commits to this code base will cause builds for blue, green and red flavours.\nThe environment variables can be used like ordinary environment variables\ninside the scripts you run from your <tt>.travis.yml</tt> and can be used in the\n<tt>.travis.yml</tt> itself.</p>\n<p><tt>env</tt> is a list of environment variables. You can specify multiple variables\non a single line like this:</p>\n<pre>env:\n - PROP1=foo PROP2=bar\n</pre>\n</div>\n<div id=\"build-matrix\">\n<h3>Build Matrix</h3>\n<p>Your options for <tt>language</tt> and <tt>env</tt> create an implicit build matrix. A\nbuild matrix is a collection of all the possible combinations of the <tt>env</tt>\noptions and language versions. You can fine tine this matrix by excluding\ncertain combinations, or inserting additional ones.</p>\n<p>Here is an example of excluding a combination and inserting an additional\nbuild:</p>\n<pre>python:\n  - 2.6\n  - 2.7\n\nenv:\n  - FLAVOUR=apple\n  - FLAVOUR=orange\n\nmatrix:\n  exclude:\n    - python: 2.7\n      env: FLAVOUR=orange\n  include:\n    - python: 2.7\n      env: FLAVOUR=banana\n</pre>\n<p>This will do an additional build of the <tt>banana</tt> build but only for python\n2.7. And it will turn off the build for the <tt>orange</tt> flavour, again only\nfor python 2.7.</p>\n</div>\n<div id=\"deployment\">\n<h3>Deployment</h3>\n<p>A <tt>Deploy</tt> section is available in the left side menu. In this section, a Deployment dashboard will be\navailable once configured.</p>\n<p>This dashboard enables a streamlined, fully automated delivery process, from Commit to Production environment.\nLatest version of your project is just one click away from users.</p>\n<p>See the dashboard\u2019s template below</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>DELIVERABLES</th>\n<th>STAGES</th>\n</tr>\n<tr><th>(projects)</th>\n<th>COMMIT</th>\n<th>DEV</th>\n<th>QA</th>\n<th>PROD</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Deliverable A</td>\n<td>GIT rev</td>\n<td>1.2.3</td>\n<td>GIT tag</td>\n<td>GIT tag</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>For example, the version 1.2.3 (specified thanks to a GIT tag) of deliverable A is deployed in DEV stage.</p>\n<p>Here are the 5 steps to setup a Deployment dashboard in Buildbot Travis.</p>\n<ol>\n<li><p>A <tt>Deployment</tt> section is available in the <tt>Settings</tt> section.\nIn this section, the <tt>Deployment Environment(s)</tt> is the list of target environments (or Stages)\nwhere deliverables are going to be deployed.\nThese environments should be sorted following your development process definition.\nExample:</p>\n<pre>COMMIT (merged dev), DEV, QA, PROD\nBEWARE!The first column is reserved for COMMIT stage so you do not need to define it in the Stages list.\n</pre>\n</li>\n<li><p>Go to the <tt>Deploy</tt> section in the left side menu. You should see a Deployment dashboard like the above example.\nThe Stages should be the same as the ones defined in 1).</p>\n</li>\n<li><p>Go to the <tt>Settings/Projects</tt> section. Add corresponding Stages to the different projects in the Stages field.\nStages can be a subset of the Stages defined in 2).</p>\n</li>\n<li><p>You should see a fully configured Deployment dashboard with all the deliverables, Stages, GIT revisions and GIT\ntags. GIT revisions and GIT tags are available in dropdown lists. When you select a specific version, a pop_up\nwindow appears to launch the deployment procedure in the specific stage.</p>\n</li>\n<li><p>To enable push button deployments, you need to define the deployment procedures.\nCreate deployment scripts and update the script and/or after_script sections of the <tt>.travis.yml</tt> file\nof each deliverable.</p>\n<p>Example:</p>\n<pre>after_script:\n   - |\n     # Deployment\n       python ./deploy.py --repo \"${repository}\" --stage \"${stage}\" --version \"${version}\";\n\n       ${repository} is the URL of the project's (or deliverable's) repo.\n       ${stage} is the retrieved from the Deployment dashboard.\n       ${version} is retrieved from the Deployment dashboard.\n</pre>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>The basic behaviour is:</p>\n<blockquote>\n<ul>\n<li>Commit is picked up (polling by default, with additional triggers via\n<tt><span class=\"pre\">/change_hook/poller?poller=pollername</span></tt> web hook</li>\n<li>Build is scheduled on a \u2018spawner\u2019 builder - this is a builder configured to\nuse an ordinary slave</li>\n<li>Checkout occurs - for the purposes of acquiring the <tt>.travis.yml</tt> rather\nthan for actually performing a build</li>\n<li>\u2018spawner\u2019 triggers a build on a \u2018job\u2019 builder for each environment in the\nbuild matrix defined in <tt>.travis.yml</tt></li>\n<li>\u2018job\u2019 builder does a single build in a clean latent buildslave (VM or docker)</li>\n<li><tt><span class=\"pre\">setup-steps</span></tt> step dynamically appends ShellCommand steps based on\ncontents of <tt>.travis.yml</tt></li>\n<li>when job is over VM orcontainer is thrown away.</li>\n<li>The \u2018spawner\u2019 build acts as a way of aggregating the build results in a\nsingle pass/fail status.</li>\n<li>MailNotifier subclass uses <tt>.travis.yml</tt> found in build history so that\nrecipients list and whether or not to mail can be adapted accordingly.\nXXX: this needs to be adapted for nine</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"commandline\">\n<h2>CommandLine</h2>\n<p><tt>buildbot_travis</tt> package comes with a <tt>bbtravis</tt> command line utility.</p>\n<p>This utility is useful to test travis.yml locally without pushing it to the CI.\nIt allows to test either the travis.yml and the docker image used to run the workers.\nIt allows to run only the part of the matrix that you are working on</p>\n<p>Example:</p>\n<pre>bbtravis run -d tardyp/metabbotcfg  -j8 TESTS=trial TWISTED=latest\n</pre>\n<p>This will run the resulting tests in parallel using docker image tagged tardyp/metabbotcfg and will filter only the matrix environment with TESTS==\u2019trial\u2019 and TWISTED==\u2019latest\u2019</p>\n<p>UI is using urwid console UI framework, and will split the terminal into several terminal showing each matrix run.\nYou can scroll using mouse wheel, and click to zoom and get more details.</p>\n<div>\n<p>Note</p>\n<p>For now <tt>bbtravis</tt> command line utility to note support Buildbot step battery nor Interpolate contructs</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>This special branch is the nine port of buildbot_travis.\nCompared to previous version following features are not yet available</p>\n<ul>\n<li>Custom MailNotifier needs to be adapted for nine data api, in order to get the .travis.yml configuration</li>\n<li>mergerequest should be adapted to the new collapseRequest api</li>\n<li>SVN shall be validated (only git has been tested so far)</li>\n<li>metrics facility is not really specific to travis, and should be available in buildbot master directly</li>\n<li>nextBuild feature shall be reimplemented: allowed to avoid running a spawner when no \u2018-job\u2019 slave is available</li>\n</ul>\n<p>Compared to original Travis format, here is a non-exaustive list of features known not to be supported</p>\n<ul>\n<li>after_success, after_failure. Not implemented, but easy to add.</li>\n<li>deploy. Deployment step would have to happen after all the matrix subbuilds are succeed</li>\n</ul>\n<p>And configure your hyper keys in the default hyper worker\nYou should also configure an authentication plugin in order to protect those keys.</p>\n</div>\n\n          </div>"}, "last_serial": 5231828, "releases": {"0.0.18": [{"comment_text": "", "digests": {"md5": "eeaefdf7b2ff92518f74feee07381166", "sha256": "fc1b180c39313f637c19ca9b69334dfc5c17e09e34e7ac00bcda671004088365"}, "downloads": -1, "filename": "buildbot_travis-0.0.18-py2-none-any.whl", "has_sig": false, "md5_digest": "eeaefdf7b2ff92518f74feee07381166", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 328147, "upload_time": "2015-02-04T19:41:45", "upload_time_iso_8601": "2015-02-04T19:41:45.891223Z", "url": "https://files.pythonhosted.org/packages/dd/8c/d5f2fb23ec029ae31fa488c039d2634114d3a77cfb8592a7bdba6dfd0875/buildbot_travis-0.0.18-py2-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6acb4d922ecfd3f15cb24c8f01272874", "sha256": "c6448631e5acab06052a2b843377ef45d6885dc1990eea65a7d3fecf32f643a2"}, "downloads": -1, "filename": "buildbot_travis-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "6acb4d922ecfd3f15cb24c8f01272874", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 329928, "upload_time": "2015-07-28T13:21:02", "upload_time_iso_8601": "2015-07-28T13:21:02.384116Z", "url": "https://files.pythonhosted.org/packages/67/6e/530ec60afd02ee4b08035571d42eb165973e104913367ca78d4d3cc1ad9f/buildbot_travis-0.1.1-py2-none-any.whl", "yanked": false}], "0.2.0": [], "0.2.1": [{"comment_text": "", "digests": {"md5": "45b7fd748dda8adf52f0e0dd0e6e929c", "sha256": "9646bedb4bed05095b76cfd1c692913f2234e84f59a2f402a1404f6111bfb944"}, "downloads": -1, "filename": "buildbot_travis-0.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "45b7fd748dda8adf52f0e0dd0e6e929c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 38921, "upload_time": "2016-05-11T20:59:45", "upload_time_iso_8601": "2016-05-11T20:59:45.976143Z", "url": "https://files.pythonhosted.org/packages/4d/33/56f74b341f9db9701bc69b603867548d568dfddc5f704d3929ddbecb0e09/buildbot_travis-0.2.1-py2-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2ca6508aa0c3b7852e1c76ffa909908a", "sha256": "7cb7fec7202122f83a2de62bfe00d1761f2d8f4337b9ccb093f644d1587a122e"}, "downloads": -1, "filename": "buildbot_travis-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "2ca6508aa0c3b7852e1c76ffa909908a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 347074, "upload_time": "2016-05-12T09:09:39", "upload_time_iso_8601": "2016-05-12T09:09:39.298008Z", "url": "https://files.pythonhosted.org/packages/db/ad/a4658f2bdfcd68bfa360c258ab4a217777cb875501201403221df594a353/buildbot_travis-0.2.2-py2-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fae12224e0672682f11bea7d14f4cea8", "sha256": "3fd9e5fdaf6c08b4c3ab7f08e984aef4b7b7bf360ca58c451cce9d1f5b3d4a32"}, "downloads": -1, "filename": "buildbot_travis-0.3.0-py2-none-any.whl", "has_sig": true, "md5_digest": "fae12224e0672682f11bea7d14f4cea8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 358123, "upload_time": "2016-07-07T16:57:35", "upload_time_iso_8601": "2016-07-07T16:57:35.951959Z", "url": "https://files.pythonhosted.org/packages/60/6c/925a8f7d01eb9bd6ec2ea5a4c1af2048eaa515d238abaa974336ea36fb66/buildbot_travis-0.3.0-py2-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f8acb1ca7905d83be3ccb2bfa35b8ff6", "sha256": "5ddb5dd02b43aa31970a6fda1cdecea450be682bf72df87fcafb676e96031cf6"}, "downloads": -1, "filename": "buildbot_travis-0.4.0-py2-none-any.whl", "has_sig": true, "md5_digest": "f8acb1ca7905d83be3ccb2bfa35b8ff6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 397521, "upload_time": "2016-09-30T15:47:33", "upload_time_iso_8601": "2016-09-30T15:47:33.049722Z", "url": "https://files.pythonhosted.org/packages/12/2a/49423a1066c1b2321fe94d4ae883db75d72fbb41114fc205ba47eab79a07/buildbot_travis-0.4.0-py2-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "3a8dbf672c6cad2eb6b68f1031ba7430", "sha256": "1169ebd0a162e2d74c536880846796b641fe7e7b298bb2ef9b3b723d4259cf67"}, "downloads": -1, "filename": "buildbot_travis-0.4.1-py2-none-any.whl", "has_sig": true, "md5_digest": "3a8dbf672c6cad2eb6b68f1031ba7430", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 369694, "upload_time": "2016-10-05T12:40:18", "upload_time_iso_8601": "2016-10-05T12:40:18.630208Z", "url": "https://files.pythonhosted.org/packages/31/ed/9230cf599af6fe63a4d7a5a345c23bb0d11d251a2d9c4e2fe30aa29e75ce/buildbot_travis-0.4.1-py2-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "d40c183852fca75fafa1ff8a15b786d6", "sha256": "fc6c08463c1ee7c07f5b1501677677b457677abf03494a5c39ed9db7668a40bc"}, "downloads": -1, "filename": "buildbot_travis-0.4.2-py2-none-any.whl", "has_sig": true, "md5_digest": "d40c183852fca75fafa1ff8a15b786d6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 369695, "upload_time": "2016-10-06T09:46:21", "upload_time_iso_8601": "2016-10-06T09:46:21.110708Z", "url": "https://files.pythonhosted.org/packages/c5/60/3ecc5f53ebd42c3fbc4f6ca106b1c0046ce59821e5a22b1e1b07afdf9195/buildbot_travis-0.4.2-py2-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "9676273b3405ab7a00a1329e44a8e65e", "sha256": "06e5e7f9d41e75d10eb10823c98ba9dda38d2b2cb840a73e855030f82f9aa23a"}, "downloads": -1, "filename": "buildbot_travis-0.4.3-py2-none-any.whl", "has_sig": true, "md5_digest": "9676273b3405ab7a00a1329e44a8e65e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 370306, "upload_time": "2016-11-21T08:49:10", "upload_time_iso_8601": "2016-11-21T08:49:10.420419Z", "url": "https://files.pythonhosted.org/packages/bd/ca/20e4faaf044bc852f5978b2cf539b5710f4cdb492fcf4078ab0b8ee07ad0/buildbot_travis-0.4.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a424a7ca9d4125e533795ed65ea50056", "sha256": "78858c96487e5c90e13a061531729929e1c9ae81e712ec1c48e529fd5509aee7"}, "downloads": -1, "filename": "buildbot_travis-0.4.3.tar.gz", "has_sig": true, "md5_digest": "a424a7ca9d4125e533795ed65ea50056", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 348334, "upload_time": "2016-11-21T08:49:13", "upload_time_iso_8601": "2016-11-21T08:49:13.628735Z", "url": "https://files.pythonhosted.org/packages/c9/86/c499ad5ede6cf8ba13733e8a75b4a3b0b271b2fd192a9c55c48a5dcae8e4/buildbot_travis-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f568972bb066c8b12dc34c8abf2968a0", "sha256": "33df58c432c95abda5513094a142e7c9504a0740e0cc5fef949b2a22b4047cc7"}, "downloads": -1, "filename": "buildbot_travis-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "f568972bb066c8b12dc34c8abf2968a0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 374976, "upload_time": "2017-02-27T12:42:22", "upload_time_iso_8601": "2017-02-27T12:42:22.096548Z", "url": "https://files.pythonhosted.org/packages/c9/5c/bacf82d96b3dfb743fdf3d4698fcab7a1cbc803bd774d9b42098aef1cc98/buildbot_travis-0.5.0-py2-none-any.whl", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "6ae373049129c552e4a6c6954e65e225", "sha256": "ed4c043a28bc800b987b6ce9e5ea21f85877f7d805720b2fb28d8a35013cc045"}, "downloads": -1, "filename": "buildbot_travis-0.6.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6ae373049129c552e4a6c6954e65e225", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 378075, "upload_time": "2017-09-04T15:07:47", "upload_time_iso_8601": "2017-09-04T15:07:47.958949Z", "url": "https://files.pythonhosted.org/packages/c8/9e/5ca686f307d3064197d1e92bbaee6998967dce2ff5085e36ad182150f3e8/buildbot_travis-0.6.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3299d45ee3507f6dd7e083f973d31c4", "sha256": "5cda15d604927ccd963c805714d02f0df13c404e451f8a7fb88bd6d1844b9ae3"}, "downloads": -1, "filename": "buildbot_travis-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e3299d45ee3507f6dd7e083f973d31c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 352217, "upload_time": "2017-09-04T15:07:52", "upload_time_iso_8601": "2017-09-04T15:07:52.421668Z", "url": "https://files.pythonhosted.org/packages/01/9e/eba9e0e6dba7c896fb2161d84f5754cdaca2b7d9759a3722faef13a89b46/buildbot_travis-0.6.0.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "f49ef0a657c35a08be0f9924cf23122f", "sha256": "66ce183dc085388ec4003009c132f58dfc9f6dd14b9da978d03324645a16121f"}, "downloads": -1, "filename": "buildbot_travis-0.6.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "f49ef0a657c35a08be0f9924cf23122f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 378314, "upload_time": "2018-01-03T09:39:06", "upload_time_iso_8601": "2018-01-03T09:39:06.269769Z", "url": "https://files.pythonhosted.org/packages/b8/ec/8adb1292e0c1672ea083de21111c44e484bdf06c286d4eacad27c0a2e2a8/buildbot_travis-0.6.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0289687b894a67f89f1a43513ac85529", "sha256": "76e38b62c0949eff61a72e199c4573b272b1de32ff73c531bda6badfde638f01"}, "downloads": -1, "filename": "buildbot_travis-0.6.2.tar.gz", "has_sig": true, "md5_digest": "0289687b894a67f89f1a43513ac85529", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 361614, "upload_time": "2018-01-03T09:39:09", "upload_time_iso_8601": "2018-01-03T09:39:09.048974Z", "url": "https://files.pythonhosted.org/packages/2c/45/b0db59dc68208b0b6297dd52a88734f7bbfd7799fc055050f4cd83ce2212/buildbot_travis-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "0eeba0adc2538b808be1cf5aee3a7d8a", "sha256": "60c2a3103182ac7b9c9feb850ec6ed2070afa37345d75f4cf17852a8f1ad84e0"}, "downloads": -1, "filename": "buildbot_travis-0.6.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "0eeba0adc2538b808be1cf5aee3a7d8a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 378317, "upload_time": "2018-01-05T16:18:33", "upload_time_iso_8601": "2018-01-05T16:18:33.236251Z", "url": "https://files.pythonhosted.org/packages/75/7d/1264284bf564a00ba8c616dbf309f73b797c43672c9e93385f1f80e6fdc5/buildbot_travis-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c7a673b67f7265c2de1787c31b152da", "sha256": "0fd480946fe176577781d29d54f82fa9d4a3199ee19f1e21f96d9906a9a87784"}, "downloads": -1, "filename": "buildbot_travis-0.6.3.tar.gz", "has_sig": true, "md5_digest": "8c7a673b67f7265c2de1787c31b152da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 361632, "upload_time": "2018-01-05T16:18:36", "upload_time_iso_8601": "2018-01-05T16:18:36.449194Z", "url": "https://files.pythonhosted.org/packages/29/94/8d2a9c0778fb192e9d39892edc8ed968267dac3ca749b6b5c5d4ec9b3626/buildbot_travis-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "ffe11ace1780bc67ee6f0ff0ccc42ca8", "sha256": "d29fad92c7d429bfa9141c2c7706770cb3768b7a40cd507db2ba61dfc0f3a8c2"}, "downloads": -1, "filename": "buildbot_travis-0.6.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "ffe11ace1780bc67ee6f0ff0ccc42ca8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 371864, "upload_time": "2018-12-17T21:11:32", "upload_time_iso_8601": "2018-12-17T21:11:32.597477Z", "url": "https://files.pythonhosted.org/packages/25/ec/cd0c3d36acb9a3dda47c45efdb30ee1f4c9ad681bda7c2c5d65eaa2e8c68/buildbot_travis-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9be7c65b23434edcb8d1575a56cff48f", "sha256": "2cccfce29845d72284a0aa60fc20777ec88ac07eedfbecc7bab1062b7e3b62ae"}, "downloads": -1, "filename": "buildbot_travis-0.6.4.tar.gz", "has_sig": true, "md5_digest": "9be7c65b23434edcb8d1575a56cff48f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 352805, "upload_time": "2018-12-17T21:11:35", "upload_time_iso_8601": "2018-12-17T21:11:35.329750Z", "url": "https://files.pythonhosted.org/packages/e8/72/579decddf1cdbd830fa9cfe615ac2f987d79178397ab83a60f02b5f2e829/buildbot_travis-0.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ffe11ace1780bc67ee6f0ff0ccc42ca8", "sha256": "d29fad92c7d429bfa9141c2c7706770cb3768b7a40cd507db2ba61dfc0f3a8c2"}, "downloads": -1, "filename": "buildbot_travis-0.6.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "ffe11ace1780bc67ee6f0ff0ccc42ca8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 371864, "upload_time": "2018-12-17T21:11:32", "upload_time_iso_8601": "2018-12-17T21:11:32.597477Z", "url": "https://files.pythonhosted.org/packages/25/ec/cd0c3d36acb9a3dda47c45efdb30ee1f4c9ad681bda7c2c5d65eaa2e8c68/buildbot_travis-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9be7c65b23434edcb8d1575a56cff48f", "sha256": "2cccfce29845d72284a0aa60fc20777ec88ac07eedfbecc7bab1062b7e3b62ae"}, "downloads": -1, "filename": "buildbot_travis-0.6.4.tar.gz", "has_sig": true, "md5_digest": "9be7c65b23434edcb8d1575a56cff48f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 352805, "upload_time": "2018-12-17T21:11:35", "upload_time_iso_8601": "2018-12-17T21:11:35.329750Z", "url": "https://files.pythonhosted.org/packages/e8/72/579decddf1cdbd830fa9cfe615ac2f987d79178397ab83a60f02b5f2e829/buildbot_travis-0.6.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:04 2020"}