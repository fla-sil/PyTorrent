{"info": {"author": "Sophie Laturnus, Adam von Daranyi, Ziwei Huang and Philipp Berens", "author_email": "adam.von-daranyi@uni-tuebingen.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Morphopy\n(c) 2020 by Sophie Laturnus, Adam von Daranyi, Ziwei Huang and Philipp Berens.\n********\n\n## <a name=\"content\">Content</a> \n- [Overview](#overview)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Uninstallation](#uninstallation)\n- [Usage](#usage)\n- [Module description](#module)\n\n## <a name=\"overview\">Overview</a> \n\nMorphoPy is a Python3 package that uses networkX to compute and show information about neurites.\nThe input can be passed with single swc-files or it can handle whole directories with multiple files at once.\nYou can use MorphoPy imported in Python or from command line as batch-tool as well.\n\nThe current working build:\n\n **version 0.6**\n\nAll builds are tested on Linux (Debian and CentOS) and Windows 10.\n\nYou can find all working builds at [pypi.org](https://pypi.org/project/morphopy/).\n\n[back to start](#content)\n\n## <a name=\"requirements\">Software Requirements</a>\n\nIn the following, all commands written in boxes need to be entered into your terminal.\n\n### Mac:\n\n - homebrew (to install latest version of python3)\n - python >3.4: without homebrew you can find python [here](https://www.python.org/downloads/mac-osx/)\n - pip\n\n**1)** If you want the latest python3 version you need to install homebrew,\n       for that just run this command in your terminal:\n\n    ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n**2)** Then you can easily install the newest version of python3:\n\n\tbrew install python\n\n**3)** Now you should have python3 and pip3 installed. You can check the version like this:\n\n\tpython3 --version\n\tpip3 -V\n\nIf both are enough you can continue with installing MorphoPy, see below.\n\n### Linux:\n\n - python >3.4\n - pip 3 \n\nInstall Python3 on **Debian/Ubuntu** systems:\n\n\tapt-get install python3 python3-pip\n\nInstall Python3 on **RedHat/CentOS/Fedora systems** (perhaps python version differs):\n\n\tyum install python36 python3-pip\n\nThat's it. All requirements are met and you can continue with the MorphoPy installation. See below. \n\n### Windows:\n\n - python >3.5 (x64): download from [here](https://www.python.org/downloads/windows/)\n - pip : be sure you selected it during installation with the base python package\n - Microsoft Build Tools >14.0 you can download them [here](https://visualstudio.microsoft.com/visual-cpp-build-tools/) \n\n**1)** Install python with pip by executing the downloaded installation file and\n       be sure to check the option to add python paths to enviroment variable at the first step!\n\n**2)** Install Microsoft Build Tools with the automatic installation tool from the website above.\n       Select C/C++ Compiler Tools at the selection page\n\nAll requirements are met now, see below for continue with MorphoPy installation.\n\n[back to start](#content)\n\n## <a name=\"installation\">Installation:</a>\n\n###  Install the MorphoPy package (all platforms):\n\nInstall the python package with pip3 and get the latest build:\n\n\tpip3 install morphopy\n\n## <a name=\"uninstallation\">Uninstallation:</a>\n\nYou can simply uninstall the package with pip3:\n\n\tpip3 uninstall morphopy\n\n\n[back to start](#content)\n\n## <a name=\"usage\">Usage</a> \nJust call everywhere on the command line:\n\n\tMorphoPy.py <options>\nHelp:\n\n\tUsage: MorphoPy.py -c <compute_feature> [--wide | --func <persistence_function> | --conf <config_file>]\n\t                   [-f <swc_file> | -d <directory>] [-o <output directory>]\n\n\tOptions:\n\t-c, --compute               parameter for selecting the computing feature:\n\t                            persistence: compute persistence data\n                                stats      : compute morphometric statistics\n                                density    : create density maps\n       statistics options:\n       --long                   you can change your output format, in long\n                                format you get all values in a separate row.\n                                (default: all values in one row)   \n       persistence options:\n       --func                   if persistence is selected as feature, you can\n                                specify with this option a method function you\n                                want to use at computing the persistence.\n                                (default: radial distance function)\n       density map options:\n       --conf                   if density map is selected, you can pass a\n                                config file with more parameters for creating\n                                the density maps. (optional)\n    -f, --file                   specifies a swc-file as input for Morphopy,\n                                if no file is selected, directory is used\n    -d, --directory              specifies a directory as input for swc-files.\n                                (default: working directory)\n    -o, --output                 specifies the output directory for saving the\n                                results in. (default: same as source)\n\n\nAvailable functions for persistence at the moment are:\n - radial_distance (default function)\n - height\n - path_length\n - branch_order\n\nA sample config file for density maps looks like this (stored in a text file):\n\n\t[global]\n\t# specific distance for resampling nodes:\n    distance: 1\n    # width of each bin in microns across all dimensions\n    #bin_size: 20\n    # number of bins for each dimension (only if you don't use bin_size)\n    n_bins_x: 20\n    n_bins_y: 20\n    n_bins_z: 20\n    # if true: probabilty density is returned, count histogram otherwise\n    density: True\n    # smoothing the density data\n    smooth: True\n    # sigma used at smoothing\n    sigma: 2\n    # normalization bounds for density map:\n    [norm_bound]\n    r_max_x: 238.85\n    r_max_y: 140.95\n    r_max_z: 285.97\n    r_min_x: -236.17\n    r_min_y: -24.2\n    r_min_z: -173.72\n\n[back to start](#content)\n\n## <a name=\"contributing\">Contributing to MorphoPy </a>\n\nWe tested MorphoPy to the best of our knowledge and abilities in the scope of several projects. If you still find a bug\nor you are missing a feature, please do not hesitate to contact us via [GitHub issues](https://github.com/berenslab/MorphoPy/issues).\nPlease try to provide a minimal example that reproduces the bug you want to be fixed.\nIf you want to develop the code base further, you can work with git pull requests. Please make sure that you document\nthe code and add tests and examples of how to use your code.\n\n\n## <a name=\"citation\"> Citing MorphoPy </a>\n\nIf you are using MorphoPy for your research or your work project please make sure to cite us and this repository.\n\n## <a name=\"module\">Module description</a> \n\n**Important:** MorphoPy requires the soma to be one single point. If several soma points are present in the\nreconstruction file they will be automatically collapsed to the centroid of their convex hull on file loading (also see utils.get_standardized_swc).\nMorphoPy currently only supports neurites that connect back to the soma. This means, axons that emerge from dendritic\nstructures can not be handled.\n\nAll data is stored in the [tidy data format](http://vita.had.co.nz/papers/tidy-data.pdf).\n\nPlease also refer to our [tutorial](https://github.com/berenslab/MorphoPy/blob/master/notebooks/MORPHOPY%20Tutorial.ipynb).\n\n### Density maps\nDensity maps are marginal histograms over the neural mass. MorphoPy allows you to create density maps of different projections through the function compute_denisty_maps(). Per default it computes x, y, z, xy, xz and yz density maps from the point cloud of the original reconstruction. The point cloud is constructed through resampling along all neurites with a default distance of 1 micron. The resulting point clous is then binned into bins of 20 microns and smoothed using Gaussian smoothing with std of 1.\n\nHowever, you can customize all these parameters by passing a config file to the function (see LINK).\n\n\n### Morphometric statistics\nAvailable morphometric statistics are:\n- branch orders\n- Strahler order\n- branch angles\n- path angles\n- root angles\n- thickness\n- segment lengths\n- path length to soma\n- radial distance\n\n\nChanging the Code\n\n### Morphometric distributions\nThese features are not (yet) available via the command line tool.\nFrequency histograms or Gaussian kernel density estimates can be queried for all single value statistics using the\nmethods `get_histogram(key)` or `get_kde_distribution(key)`. If you provide a distance measure (e.g. branch order,\npath distance from soma or radial distance) the returned distribution will be two-dimensional and allows to investigate\na features' development across space.\n\n### Persistence\nchanging distance function. Adding a distance function\n\n\n### Not enough? ###\n\nYou want to compute your own features? Go for it! We recommend you to check out `networkx` and `shapely` for more options.\n\n\n[back to start](#content)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/berenslab/MorphoPy/archive/v0.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/berenslab/MorphoPy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "morphopy", "package_url": "https://pypi.org/project/morphopy/", "platform": "", "project_url": "https://pypi.org/project/morphopy/", "project_urls": {"Download": "https://github.com/berenslab/MorphoPy/archive/v0.6.tar.gz", "Homepage": "https://github.com/berenslab/MorphoPy"}, "release_url": "https://pypi.org/project/morphopy/0.6/", "requires_dist": ["matplotlib", "matplotlib-scalebar", "scipy", "numpy", "pandas", "networkx", "seaborn", "sklearn", "shapely"], "requires_python": "", "summary": "Python package to display morphologies of neurons and compute statistical measures and representations", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Morphopy</h1>\n<p>(c) 2020 by Sophie Laturnus, Adam von Daranyi, Ziwei Huang and Philipp Berens.</p>\n<hr>\n<h2><a>Content</a></h2>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#uninstallation\" rel=\"nofollow\">Uninstallation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#module\" rel=\"nofollow\">Module description</a></li>\n</ul>\n<h2><a>Overview</a></h2>\n<p>MorphoPy is a Python3 package that uses networkX to compute and show information about neurites.\nThe input can be passed with single swc-files or it can handle whole directories with multiple files at once.\nYou can use MorphoPy imported in Python or from command line as batch-tool as well.</p>\n<p>The current working build:</p>\n<p><strong>version 0.6</strong></p>\n<p>All builds are tested on Linux (Debian and CentOS) and Windows 10.</p>\n<p>You can find all working builds at <a href=\"https://pypi.org/project/morphopy/\" rel=\"nofollow\">pypi.org</a>.</p>\n<p><a href=\"#content\" rel=\"nofollow\">back to start</a></p>\n<h2><a>Software Requirements</a></h2>\n<p>In the following, all commands written in boxes need to be entered into your terminal.</p>\n<h3>Mac:</h3>\n<ul>\n<li>homebrew (to install latest version of python3)</li>\n<li>python &gt;3.4: without homebrew you can find python <a href=\"https://www.python.org/downloads/mac-osx/\" rel=\"nofollow\">here</a></li>\n<li>pip</li>\n</ul>\n<p><strong>1)</strong> If you want the latest python3 version you need to install homebrew,\nfor that just run this command in your terminal:</p>\n<pre><code>ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre>\n<p><strong>2)</strong> Then you can easily install the newest version of python3:</p>\n<pre><code>brew install python\n</code></pre>\n<p><strong>3)</strong> Now you should have python3 and pip3 installed. You can check the version like this:</p>\n<pre><code>python3 --version\npip3 -V\n</code></pre>\n<p>If both are enough you can continue with installing MorphoPy, see below.</p>\n<h3>Linux:</h3>\n<ul>\n<li>python &gt;3.4</li>\n<li>pip 3</li>\n</ul>\n<p>Install Python3 on <strong>Debian/Ubuntu</strong> systems:</p>\n<pre><code>apt-get install python3 python3-pip\n</code></pre>\n<p>Install Python3 on <strong>RedHat/CentOS/Fedora systems</strong> (perhaps python version differs):</p>\n<pre><code>yum install python36 python3-pip\n</code></pre>\n<p>That's it. All requirements are met and you can continue with the MorphoPy installation. See below.</p>\n<h3>Windows:</h3>\n<ul>\n<li>python &gt;3.5 (x64): download from <a href=\"https://www.python.org/downloads/windows/\" rel=\"nofollow\">here</a></li>\n<li>pip : be sure you selected it during installation with the base python package</li>\n<li>Microsoft Build Tools &gt;14.0 you can download them <a href=\"https://visualstudio.microsoft.com/visual-cpp-build-tools/\" rel=\"nofollow\">here</a></li>\n</ul>\n<p><strong>1)</strong> Install python with pip by executing the downloaded installation file and\nbe sure to check the option to add python paths to enviroment variable at the first step!</p>\n<p><strong>2)</strong> Install Microsoft Build Tools with the automatic installation tool from the website above.\nSelect C/C++ Compiler Tools at the selection page</p>\n<p>All requirements are met now, see below for continue with MorphoPy installation.</p>\n<p><a href=\"#content\" rel=\"nofollow\">back to start</a></p>\n<h2><a>Installation:</a></h2>\n<h3>Install the MorphoPy package (all platforms):</h3>\n<p>Install the python package with pip3 and get the latest build:</p>\n<pre><code>pip3 install morphopy\n</code></pre>\n<h2><a>Uninstallation:</a></h2>\n<p>You can simply uninstall the package with pip3:</p>\n<pre><code>pip3 uninstall morphopy\n</code></pre>\n<p><a href=\"#content\" rel=\"nofollow\">back to start</a></p>\n<h2><a>Usage</a></h2>\n<p>Just call everywhere on the command line:</p>\n<pre><code>MorphoPy.py &lt;options&gt;\n</code></pre>\n<p>Help:</p>\n<pre><code>Usage: MorphoPy.py -c &lt;compute_feature&gt; [--wide | --func &lt;persistence_function&gt; | --conf &lt;config_file&gt;]\n                   [-f &lt;swc_file&gt; | -d &lt;directory&gt;] [-o &lt;output directory&gt;]\n\nOptions:\n-c, --compute               parameter for selecting the computing feature:\n                            persistence: compute persistence data\n                            stats      : compute morphometric statistics\n                            density    : create density maps\n   statistics options:\n   --long                   you can change your output format, in long\n                            format you get all values in a separate row.\n                            (default: all values in one row)   \n   persistence options:\n   --func                   if persistence is selected as feature, you can\n                            specify with this option a method function you\n                            want to use at computing the persistence.\n                            (default: radial distance function)\n   density map options:\n   --conf                   if density map is selected, you can pass a\n                            config file with more parameters for creating\n                            the density maps. (optional)\n-f, --file                   specifies a swc-file as input for Morphopy,\n                            if no file is selected, directory is used\n-d, --directory              specifies a directory as input for swc-files.\n                            (default: working directory)\n-o, --output                 specifies the output directory for saving the\n                            results in. (default: same as source)\n</code></pre>\n<p>Available functions for persistence at the moment are:</p>\n<ul>\n<li>radial_distance (default function)</li>\n<li>height</li>\n<li>path_length</li>\n<li>branch_order</li>\n</ul>\n<p>A sample config file for density maps looks like this (stored in a text file):</p>\n<pre><code>[global]\n# specific distance for resampling nodes:\ndistance: 1\n# width of each bin in microns across all dimensions\n#bin_size: 20\n# number of bins for each dimension (only if you don't use bin_size)\nn_bins_x: 20\nn_bins_y: 20\nn_bins_z: 20\n# if true: probabilty density is returned, count histogram otherwise\ndensity: True\n# smoothing the density data\nsmooth: True\n# sigma used at smoothing\nsigma: 2\n# normalization bounds for density map:\n[norm_bound]\nr_max_x: 238.85\nr_max_y: 140.95\nr_max_z: 285.97\nr_min_x: -236.17\nr_min_y: -24.2\nr_min_z: -173.72\n</code></pre>\n<p><a href=\"#content\" rel=\"nofollow\">back to start</a></p>\n<h2><a>Contributing to MorphoPy </a></h2>\n<p>We tested MorphoPy to the best of our knowledge and abilities in the scope of several projects. If you still find a bug\nor you are missing a feature, please do not hesitate to contact us via <a href=\"https://github.com/berenslab/MorphoPy/issues\" rel=\"nofollow\">GitHub issues</a>.\nPlease try to provide a minimal example that reproduces the bug you want to be fixed.\nIf you want to develop the code base further, you can work with git pull requests. Please make sure that you document\nthe code and add tests and examples of how to use your code.</p>\n<h2><a> Citing MorphoPy </a></h2>\n<p>If you are using MorphoPy for your research or your work project please make sure to cite us and this repository.</p>\n<h2><a>Module description</a></h2>\n<p><strong>Important:</strong> MorphoPy requires the soma to be one single point. If several soma points are present in the\nreconstruction file they will be automatically collapsed to the centroid of their convex hull on file loading (also see utils.get_standardized_swc).\nMorphoPy currently only supports neurites that connect back to the soma. This means, axons that emerge from dendritic\nstructures can not be handled.</p>\n<p>All data is stored in the <a href=\"http://vita.had.co.nz/papers/tidy-data.pdf\" rel=\"nofollow\">tidy data format</a>.</p>\n<p>Please also refer to our <a href=\"https://github.com/berenslab/MorphoPy/blob/master/notebooks/MORPHOPY%20Tutorial.ipynb\" rel=\"nofollow\">tutorial</a>.</p>\n<h3>Density maps</h3>\n<p>Density maps are marginal histograms over the neural mass. MorphoPy allows you to create density maps of different projections through the function compute_denisty_maps(). Per default it computes x, y, z, xy, xz and yz density maps from the point cloud of the original reconstruction. The point cloud is constructed through resampling along all neurites with a default distance of 1 micron. The resulting point clous is then binned into bins of 20 microns and smoothed using Gaussian smoothing with std of 1.</p>\n<p>However, you can customize all these parameters by passing a config file to the function (see LINK).</p>\n<h3>Morphometric statistics</h3>\n<p>Available morphometric statistics are:</p>\n<ul>\n<li>branch orders</li>\n<li>Strahler order</li>\n<li>branch angles</li>\n<li>path angles</li>\n<li>root angles</li>\n<li>thickness</li>\n<li>segment lengths</li>\n<li>path length to soma</li>\n<li>radial distance</li>\n</ul>\n<p>Changing the Code</p>\n<h3>Morphometric distributions</h3>\n<p>These features are not (yet) available via the command line tool.\nFrequency histograms or Gaussian kernel density estimates can be queried for all single value statistics using the\nmethods <code>get_histogram(key)</code> or <code>get_kde_distribution(key)</code>. If you provide a distance measure (e.g. branch order,\npath distance from soma or radial distance) the returned distribution will be two-dimensional and allows to investigate\na features' development across space.</p>\n<h3>Persistence</h3>\n<p>changing distance function. Adding a distance function</p>\n<h3>Not enough?</h3>\n<p>You want to compute your own features? Go for it! We recommend you to check out <code>networkx</code> and <code>shapely</code> for more options.</p>\n<p><a href=\"#content\" rel=\"nofollow\">back to start</a></p>\n\n          </div>"}, "last_serial": 7118633, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "7cee52b0bfba52e0e9204df13ac06a80", "sha256": "e01d2ffaecf4742e46cd6628ccb5ca3f0ca91f652d77fb3f7622e10fb934ec3f"}, "downloads": -1, "filename": "morphopy-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7cee52b0bfba52e0e9204df13ac06a80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48468, "upload_time": "2020-04-17T08:14:38", "upload_time_iso_8601": "2020-04-17T08:14:38.357067Z", "url": "https://files.pythonhosted.org/packages/66/00/12946a176f509a973ff8ea5431765b6fc9c64294d596344caae78273870b/morphopy-0.3-py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "84f08967ba987eb6f7d3bea64b28bd1d", "sha256": "5e75709b2b3e25effa3cd058c00d9586f24ddc585701337218ba1acf19f951df"}, "downloads": -1, "filename": "morphopy-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "84f08967ba987eb6f7d3bea64b28bd1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49029, "upload_time": "2020-04-20T14:07:32", "upload_time_iso_8601": "2020-04-20T14:07:32.848409Z", "url": "https://files.pythonhosted.org/packages/ae/b9/783740e9315032feee30bf328e0b02256e0a9389ba6b8a7162cb329e9c4a/morphopy-0.5-py3-none-any.whl", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "cb0d6a128136dd029b6f1f369563df5b", "sha256": "a73325a0fc257a9798b9ea5e4dc06c8cca4f759bb3db89de921bccb56b6a17cf"}, "downloads": -1, "filename": "morphopy-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0d6a128136dd029b6f1f369563df5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50282, "upload_time": "2020-04-28T09:28:45", "upload_time_iso_8601": "2020-04-28T09:28:45.294735Z", "url": "https://files.pythonhosted.org/packages/a8/a9/70c8b6d1fecfc4458ceffee4b17c2b293160364b57977d5c7a89f141b351/morphopy-0.6-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb0d6a128136dd029b6f1f369563df5b", "sha256": "a73325a0fc257a9798b9ea5e4dc06c8cca4f759bb3db89de921bccb56b6a17cf"}, "downloads": -1, "filename": "morphopy-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0d6a128136dd029b6f1f369563df5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 50282, "upload_time": "2020-04-28T09:28:45", "upload_time_iso_8601": "2020-04-28T09:28:45.294735Z", "url": "https://files.pythonhosted.org/packages/a8/a9/70c8b6d1fecfc4458ceffee4b17c2b293160364b57977d5c7a89f141b351/morphopy-0.6-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:45 2020"}