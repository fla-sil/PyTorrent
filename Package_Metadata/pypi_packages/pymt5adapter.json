{"info": {"author": "nicholishen", "author_email": "nicholishen@tutanota.com", "bugtrack_url": null, "classifiers": [], "description": "# Introduction\n\n`pymt5adapter` is a drop-in replacement (wrapper) for the `MetaTrader5` python package by MetaQuotes. \nThe API functions simply pass through values from the `MetaTrader5` functions, but adds the following functionality\nin addition to a more pythonic interface:\n\n - Typing hinting has been added to all functions and return objects for linting and IDE integration. \n Now intellisense will work no matter how nested objects are. ![alt text][intellisence_screen]\n - Docstrings have been added to each function \n (see MQL [documentation](https://www.mql5.com/en/docs/integration/python_metatrader5)). \n Docs can now be accessed on the fly in the IDE. For example: `Ctrl+Q` in pycharm. ![alt text][docs_screen]\n - All params can now be called by keyword. No more positional only args.\n - Testing included compliments of `pytest`\n - A new context manager has been added to provide a more pythonic interface to the setup and tear-down \n of the terminal connection. The use of this context-manager can do the following: \n \n   - Ensures that `mt5.shutdown()` is always called, even if the user code throws an uncaught exception.\n   - Can modify the entire behavior of the API with some simple settings:\n      - Ensure the terminal has enabled auto-trading.\n      - Prevents running on real account by default\n      - Can automatically enable global debugging using your logger of choice\n      - Can raise the custom `MT5Error `exception whenever `last_error()[0] != RES_S_OK` (off by default)\n\n\n# Installation\n\n```\npip install -U pymt5adapter\n```\n \nThe `MetaTrader5` dependency sometimes has issues installing with the `pip` version that automatically gets \npackaged inside of the `virualenv` environment. If cannot install `MetaTrader5` then you need to update `pip` \ninside of the virtualenv. From the command line within the virual environment use:\n\n```\n(inside virtualenv):easy_install -U pip\n```\n\n# Import  \nThis should work with any existing `MetaTrader5` script by simply changing the `import` statement from:  \n```python\nimport MetaTrader5 as mt5 \n```\nto:  \n```python\nimport pymt5adapter as mt5 \n``` \n     \n# Context Manager\n\nThe `connected` function returns a context manager which performs all API setup and tear-down and ensures \nthat `mt5.shutdown()` is always called. \n\n### Hello world\n\nUsing the context manager can be easy as...\n\n```python\nimport pymt5adapter as mt5\n\nwith mt5.connected():\n    print(mt5.version())\n\n```\n\nand can be customized to modify the entire API\n\n```python\nimport pymt5adapter as mt5\n\nmt5_connected = mt5.connected(\n    path=r'C:\\Users\\user\\Desktop\\MT5\\terminal64.exe',\n    portable=True,\n    server='MetaQuotes-Demo',\n    login=1234567,\n    password='password1',\n    timeout=5000,\n    ensure_trade_enabled=True, # default is False\n    enable_real_trading=False, # default is False\n    raise_on_errors=True,      # default is False\n    debug_logging=True,        # default is False\n    logger=print,              # default is print\n)\nwith mt5_connected as conn:\n    try:\n        num_orders = mt5.history_orders_total(\"invalid\", \"arguments\")\n    except mt5.MT5Error as e:\n        print(\"We modified the API to throw exceptions for all functions.\")\n        print(f\"Error = {e}\")\n    # change error handling behavior at runtime\n    conn.raise_on_errors = False\n    try:\n        num_orders = mt5.history_orders_total(\"invalid\", \"arguments\")\n    except mt5.MT5Error:\n        pass\n    else:\n        print('We modified the API to silence Exceptions at runtime')\n\n```\n\nOutput:\n\n```\nMT5 connection has been initialized.\n[history_orders_total(invalid, arguments)][(-2, 'Invalid arguments')][None]\nWe modified the API to throw exceptions for all functions.\nError = (<ERROR_CODE.INVALID_PARAMS: -2>, \"Invalid arguments('invalid', 'arguments'){}\")\n[history_orders_total(invalid, arguments)][(-2, 'Invalid arguments')][None]\nWe modified the API to silence Exceptions at runtime\n[shutdown()][(1, 'Success')][True]\nMT5 connection has been shutdown.\n\n```\n\n## Exception handling\n\nThe `MetaTrader5` package does not raise exceptions and all errors fail silently\nby default. This behavior forces the developer to check each object for \n`None` or `empty` state and then call `last_error()` to resolve any possible errors.\nOne of the primary features of the context manager is extend the ability\nto toggle exceptions on/off globally. All raised exceptions are of type `MT5Error`. The\n`MT5Error` exception has two properties which are `error_code` and `description`. \n\n```python\nwith mt5.connected(raise_on_errors=True) as conn:\n    try:\n        invalid_args = mt5.history_deals_get('sdf', 'asdfa')\n        print(invalid_args)\n    except mt5.MT5Error as e:\n        print(e.error_code, e.description)\n        if e.error_code is mt5.ERROR_CODE.INVALID_PARAMS:\n            print('You can use \"is\" to check identity since we use enums')\n    conn.raise_on_errors = False\n    print('Errors will not raise exceptions and default behavior has bene restored at runtime')\n    invalid_args = mt5.history_deals_get('sdf', 'asdfa')\n    if not invalid_args:\n        print(mt5.last_error())\n```\nOUTPUT\n```\nERROR_CODE.INVALID_PARAMS Invalid arguments('sdf', 'asdfa'){}\nYou can use \"is\" to check identity since we use enums\nErrors will not raise exceptions and default behavior has bene restored at runtime\n(-2, 'Invalid arguments')\n```\n\n# Additional features not included in the `MetaTrader5` package\n\n### Filter function callbacks\n\nThe following API functions can now except an optional callback for filtering using the named parameter, `function`:\n* `symbols_get`\n* `orders_get`\n* `positions_get`\n* `history_deals_get`\n* `history_orders_get`\n\nExample:\n\n```python\nvisible_symbols = mt5.symbols_get(function=lambda s: s.visible)\n\ndef out_deal(deal: mt5.TradeDeal):\n    return deal.entry == mt5.DEAL_ENTRY_OUT\n\nout_deals = mt5.history_deals_get(function=out_deal)\n```\n\n### Calendar Events\nGet economic calendar events from mql5.com using the `calendar_events` function. The function is memoized so\nrepeated calls pulls event data from cache instead of repeated calls to the server. \n\nExample:\n```python\nfrom pymt5adapter.calendar import calendar_events\nfrom pymt5adapter.calendar import Currency\nfrom pymt5adapter.calendar import Importance\n\nsymbol = mt5.symbols_get(function=forex_symbol)[0]\none_week = timedelta(weeks=1)\nnow = datetime.now()\ndefault_one_week_ahead_all_events = calendar_events()\nfiltered_by_callback = calendar_events(function=lambda e: 'fed' in e['event_name'].lower())\nfiltered_by_flags = calendar_events(importance=Importance.MEDIUM | Importance.HIGH,\n                                    currencies=Currency.USD | Currency.JPY)\nfiltered_by_strings = calendar_events(importance='medium high',\n                                      currencies='usdjpy')\nfiltered_by_iterables = calendar_events(importance=('medium', ' high'),\n                                        currencies=('usd', 'jpy'))\nfiltered_by_specific_times = calendar_events(time_from=now, time_to=now + one_week)\nfiltered_by_timedeltas = calendar_events(time_from=(-one_week), time_to=one_week)\nfiltered_by_timedelta_lookback = calendar_events(-one_week)\ncalendar_events_in_russian = calendar_events(language='ru')\n```\n\n[intellisence_screen]: https://github.com/nicholishen/pymt5adapter/raw/master/images/intellisense_screen.jpg \"intellisence example\"\n[docs_screen]: https://github.com/nicholishen/pymt5adapter/raw/master/images/docs_screen.jpg \"quick docs example\"", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nicholishen/pymt5adapter", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymt5adapter", "package_url": "https://pypi.org/project/pymt5adapter/", "platform": "", "project_url": "https://pypi.org/project/pymt5adapter/", "project_urls": {"Homepage": "https://github.com/nicholishen/pymt5adapter"}, "release_url": "https://pypi.org/project/pymt5adapter/0.3.9/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A drop in replacement wrapper for the MetaTrader5 package", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Introduction</h1>\n<p><code>pymt5adapter</code> is a drop-in replacement (wrapper) for the <code>MetaTrader5</code> python package by MetaQuotes.\nThe API functions simply pass through values from the <code>MetaTrader5</code> functions, but adds the following functionality\nin addition to a more pythonic interface:</p>\n<ul>\n<li>\n<p>Typing hinting has been added to all functions and return objects for linting and IDE integration.\nNow intellisense will work no matter how nested objects are. <img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b23b9c21acd4131a5c6cfb12a546a484c23a3c0/68747470733a2f2f6769746875622e636f6d2f6e6963686f6c697368656e2f70796d7435616461707465722f7261772f6d61737465722f696d616765732f696e74656c6c6973656e73655f73637265656e2e6a7067\"></p>\n</li>\n<li>\n<p>Docstrings have been added to each function\n(see MQL <a href=\"https://www.mql5.com/en/docs/integration/python_metatrader5\" rel=\"nofollow\">documentation</a>).\nDocs can now be accessed on the fly in the IDE. For example: <code>Ctrl+Q</code> in pycharm. <img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f22746f74e3cef2389fc8f62ed4b6f41ea5b89ab/68747470733a2f2f6769746875622e636f6d2f6e6963686f6c697368656e2f70796d7435616461707465722f7261772f6d61737465722f696d616765732f646f63735f73637265656e2e6a7067\"></p>\n</li>\n<li>\n<p>All params can now be called by keyword. No more positional only args.</p>\n</li>\n<li>\n<p>Testing included compliments of <code>pytest</code></p>\n</li>\n<li>\n<p>A new context manager has been added to provide a more pythonic interface to the setup and tear-down\nof the terminal connection. The use of this context-manager can do the following:</p>\n<ul>\n<li>Ensures that <code>mt5.shutdown()</code> is always called, even if the user code throws an uncaught exception.</li>\n<li>Can modify the entire behavior of the API with some simple settings:\n<ul>\n<li>Ensure the terminal has enabled auto-trading.</li>\n<li>Prevents running on real account by default</li>\n<li>Can automatically enable global debugging using your logger of choice</li>\n<li>Can raise the custom <code>MT5Error</code>exception whenever <code>last_error()[0] != RES_S_OK</code> (off by default)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Installation</h1>\n<pre><code>pip install -U pymt5adapter\n</code></pre>\n<p>The <code>MetaTrader5</code> dependency sometimes has issues installing with the <code>pip</code> version that automatically gets\npackaged inside of the <code>virualenv</code> environment. If cannot install <code>MetaTrader5</code> then you need to update <code>pip</code>\ninside of the virtualenv. From the command line within the virual environment use:</p>\n<pre><code>(inside virtualenv):easy_install -U pip\n</code></pre>\n<h1>Import</h1>\n<p>This should work with any existing <code>MetaTrader5</code> script by simply changing the <code>import</code> statement from:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">MetaTrader5</span> <span class=\"k\">as</span> <span class=\"nn\">mt5</span> \n</pre>\n<p>to:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymt5adapter</span> <span class=\"k\">as</span> <span class=\"nn\">mt5</span> \n</pre>\n<h1>Context Manager</h1>\n<p>The <code>connected</code> function returns a context manager which performs all API setup and tear-down and ensures\nthat <code>mt5.shutdown()</code> is always called.</p>\n<h3>Hello world</h3>\n<p>Using the context manager can be easy as...</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymt5adapter</span> <span class=\"k\">as</span> <span class=\"nn\">mt5</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">())</span>\n</pre>\n<p>and can be customized to modify the entire API</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymt5adapter</span> <span class=\"k\">as</span> <span class=\"nn\">mt5</span>\n\n<span class=\"n\">mt5_connected</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">(</span>\n    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'C:\\Users\\user\\Desktop\\MT5\\terminal64.exe'</span><span class=\"p\">,</span>\n    <span class=\"n\">portable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'MetaQuotes-Demo'</span><span class=\"p\">,</span>\n    <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"mi\">1234567</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password1'</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span>\n    <span class=\"n\">ensure_trade_enabled</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># default is False</span>\n    <span class=\"n\">enable_real_trading</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"c1\"># default is False</span>\n    <span class=\"n\">raise_on_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>      <span class=\"c1\"># default is False</span>\n    <span class=\"n\">debug_logging</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>        <span class=\"c1\"># default is False</span>\n    <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"nb\">print</span><span class=\"p\">,</span>              <span class=\"c1\"># default is print</span>\n<span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">mt5_connected</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">num_orders</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">history_orders_total</span><span class=\"p\">(</span><span class=\"s2\">\"invalid\"</span><span class=\"p\">,</span> <span class=\"s2\">\"arguments\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">MT5Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"We modified the API to throw exceptions for all functions.\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Error = </span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># change error handling behavior at runtime</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">raise_on_errors</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">num_orders</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">history_orders_total</span><span class=\"p\">(</span><span class=\"s2\">\"invalid\"</span><span class=\"p\">,</span> <span class=\"s2\">\"arguments\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">MT5Error</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We modified the API to silence Exceptions at runtime'</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>MT5 connection has been initialized.\n[history_orders_total(invalid, arguments)][(-2, 'Invalid arguments')][None]\nWe modified the API to throw exceptions for all functions.\nError = (&lt;ERROR_CODE.INVALID_PARAMS: -2&gt;, \"Invalid arguments('invalid', 'arguments'){}\")\n[history_orders_total(invalid, arguments)][(-2, 'Invalid arguments')][None]\nWe modified the API to silence Exceptions at runtime\n[shutdown()][(1, 'Success')][True]\nMT5 connection has been shutdown.\n\n</code></pre>\n<h2>Exception handling</h2>\n<p>The <code>MetaTrader5</code> package does not raise exceptions and all errors fail silently\nby default. This behavior forces the developer to check each object for\n<code>None</code> or <code>empty</code> state and then call <code>last_error()</code> to resolve any possible errors.\nOne of the primary features of the context manager is extend the ability\nto toggle exceptions on/off globally. All raised exceptions are of type <code>MT5Error</code>. The\n<code>MT5Error</code> exception has two properties which are <code>error_code</code> and <code>description</code>.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">(</span><span class=\"n\">raise_on_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">invalid_args</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">history_deals_get</span><span class=\"p\">(</span><span class=\"s1\">'sdf'</span><span class=\"p\">,</span> <span class=\"s1\">'asdfa'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">invalid_args</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">MT5Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">error_code</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">error_code</span> <span class=\"ow\">is</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">ERROR_CODE</span><span class=\"o\">.</span><span class=\"n\">INVALID_PARAMS</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'You can use \"is\" to check identity since we use enums'</span><span class=\"p\">)</span>\n    <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">raise_on_errors</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Errors will not raise exceptions and default behavior has bene restored at runtime'</span><span class=\"p\">)</span>\n    <span class=\"n\">invalid_args</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">history_deals_get</span><span class=\"p\">(</span><span class=\"s1\">'sdf'</span><span class=\"p\">,</span> <span class=\"s1\">'asdfa'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">invalid_args</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">last_error</span><span class=\"p\">())</span>\n</pre>\n<p>OUTPUT</p>\n<pre><code>ERROR_CODE.INVALID_PARAMS Invalid arguments('sdf', 'asdfa'){}\nYou can use \"is\" to check identity since we use enums\nErrors will not raise exceptions and default behavior has bene restored at runtime\n(-2, 'Invalid arguments')\n</code></pre>\n<h1>Additional features not included in the <code>MetaTrader5</code> package</h1>\n<h3>Filter function callbacks</h3>\n<p>The following API functions can now except an optional callback for filtering using the named parameter, <code>function</code>:</p>\n<ul>\n<li><code>symbols_get</code></li>\n<li><code>orders_get</code></li>\n<li><code>positions_get</code></li>\n<li><code>history_deals_get</code></li>\n<li><code>history_orders_get</code></li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"n\">visible_symbols</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">symbols_get</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">out_deal</span><span class=\"p\">(</span><span class=\"n\">deal</span><span class=\"p\">:</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">TradeDeal</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">deal</span><span class=\"o\">.</span><span class=\"n\">entry</span> <span class=\"o\">==</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">DEAL_ENTRY_OUT</span>\n\n<span class=\"n\">out_deals</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">history_deals_get</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"n\">out_deal</span><span class=\"p\">)</span>\n</pre>\n<h3>Calendar Events</h3>\n<p>Get economic calendar events from mql5.com using the <code>calendar_events</code> function. The function is memoized so\nrepeated calls pulls event data from cache instead of repeated calls to the server.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymt5adapter.calendar</span> <span class=\"kn\">import</span> <span class=\"n\">calendar_events</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymt5adapter.calendar</span> <span class=\"kn\">import</span> <span class=\"n\">Currency</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymt5adapter.calendar</span> <span class=\"kn\">import</span> <span class=\"n\">Importance</span>\n\n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"n\">mt5</span><span class=\"o\">.</span><span class=\"n\">symbols_get</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"n\">forex_symbol</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">one_week</span> <span class=\"o\">=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">weeks</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"n\">default_one_week_ahead_all_events</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">()</span>\n<span class=\"n\">filtered_by_callback</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"s1\">'fed'</span> <span class=\"ow\">in</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"s1\">'event_name'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n<span class=\"n\">filtered_by_flags</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"o\">=</span><span class=\"n\">Importance</span><span class=\"o\">.</span><span class=\"n\">MEDIUM</span> <span class=\"o\">|</span> <span class=\"n\">Importance</span><span class=\"o\">.</span><span class=\"n\">HIGH</span><span class=\"p\">,</span>\n                                    <span class=\"n\">currencies</span><span class=\"o\">=</span><span class=\"n\">Currency</span><span class=\"o\">.</span><span class=\"n\">USD</span> <span class=\"o\">|</span> <span class=\"n\">Currency</span><span class=\"o\">.</span><span class=\"n\">JPY</span><span class=\"p\">)</span>\n<span class=\"n\">filtered_by_strings</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"o\">=</span><span class=\"s1\">'medium high'</span><span class=\"p\">,</span>\n                                      <span class=\"n\">currencies</span><span class=\"o\">=</span><span class=\"s1\">'usdjpy'</span><span class=\"p\">)</span>\n<span class=\"n\">filtered_by_iterables</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'medium'</span><span class=\"p\">,</span> <span class=\"s1\">' high'</span><span class=\"p\">),</span>\n                                        <span class=\"n\">currencies</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'usd'</span><span class=\"p\">,</span> <span class=\"s1\">'jpy'</span><span class=\"p\">))</span>\n<span class=\"n\">filtered_by_specific_times</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">time_from</span><span class=\"o\">=</span><span class=\"n\">now</span><span class=\"p\">,</span> <span class=\"n\">time_to</span><span class=\"o\">=</span><span class=\"n\">now</span> <span class=\"o\">+</span> <span class=\"n\">one_week</span><span class=\"p\">)</span>\n<span class=\"n\">filtered_by_timedeltas</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">time_from</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">one_week</span><span class=\"p\">),</span> <span class=\"n\">time_to</span><span class=\"o\">=</span><span class=\"n\">one_week</span><span class=\"p\">)</span>\n<span class=\"n\">filtered_by_timedelta_lookback</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">one_week</span><span class=\"p\">)</span>\n<span class=\"n\">calendar_events_in_russian</span> <span class=\"o\">=</span> <span class=\"n\">calendar_events</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">'ru'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7190128, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "af65186fddf52abe9ba0d1a98f6fd195", "sha256": "0bec52200e61052c6ec65ff1796ac9b23f2d4634f7fdb75ea3f02f55acc7aa6e"}, "downloads": -1, "filename": "pymt5adapter-0.1.10.tar.gz", "has_sig": false, "md5_digest": "af65186fddf52abe9ba0d1a98f6fd195", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 20585, "upload_time": "2020-04-06T15:50:01", "upload_time_iso_8601": "2020-04-06T15:50:01.538807Z", "url": "https://files.pythonhosted.org/packages/a1/b3/8c80a7ae45ba847fe6c8c2a725fa78bd952c76ce06e07ac8bb506fb93a97/pymt5adapter-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "664bd935dd66df960dfd5315061a6447", "sha256": "f8072216ca5153c0e902e37c1657611ac2c70372547583267312785ba709e0de"}, "downloads": -1, "filename": "pymt5adapter-0.1.11.tar.gz", "has_sig": false, "md5_digest": "664bd935dd66df960dfd5315061a6447", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 21398, "upload_time": "2020-04-08T17:27:45", "upload_time_iso_8601": "2020-04-08T17:27:45.317908Z", "url": "https://files.pythonhosted.org/packages/46/79/c9ae034500bbcfcbcb2343d93b0711cf016ba0398554194c67999f39239c/pymt5adapter-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "bb8c3a024dea549b190831d3210e7460", "sha256": "f4d55f403d16ce51e847034f06ed66fef3b7078929f745bad8e1253beba88655"}, "downloads": -1, "filename": "pymt5adapter-0.1.12.tar.gz", "has_sig": false, "md5_digest": "bb8c3a024dea549b190831d3210e7460", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22836, "upload_time": "2020-04-09T09:45:41", "upload_time_iso_8601": "2020-04-09T09:45:41.132624Z", "url": "https://files.pythonhosted.org/packages/1e/4e/0f65542d58150ecd04e4606d581b9426c88d0060c58c4cc1e84aaf6d951c/pymt5adapter-0.1.12.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4f9bafb7acdec4119274d767badeef8a", "sha256": "0e947a35ff6acbce618b46d525661a417d2a0806b88f06f544e713c9a075ebf9"}, "downloads": -1, "filename": "pymt5adapter-0.1.7.tar.gz", "has_sig": false, "md5_digest": "4f9bafb7acdec4119274d767badeef8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 17238, "upload_time": "2020-04-02T20:28:39", "upload_time_iso_8601": "2020-04-02T20:28:39.768384Z", "url": "https://files.pythonhosted.org/packages/26/a4/ac071d559e001a67f496025ce6c310ccb0007b165f4b9a6c05d40ad58179/pymt5adapter-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "b44f7248136aa712af2dac4b3e806745", "sha256": "4cd2d44002d95558c93411dfc65c993d34c7c7cd70a1413077588735964a229b"}, "downloads": -1, "filename": "pymt5adapter-0.1.8.tar.gz", "has_sig": false, "md5_digest": "b44f7248136aa712af2dac4b3e806745", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 20225, "upload_time": "2020-04-05T18:04:03", "upload_time_iso_8601": "2020-04-05T18:04:03.815135Z", "url": "https://files.pythonhosted.org/packages/9f/b2/4e63735975081160023502f33587d2a7142942098a0d462413ea3e0d8637/pymt5adapter-0.1.8.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f97d9d09d428ed98becce45e87d3e69b", "sha256": "238434e2a395c49f65e234cd407fa226c7ad82efea881f8c68c639ba0891d862"}, "downloads": -1, "filename": "pymt5adapter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f97d9d09d428ed98becce45e87d3e69b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25058, "upload_time": "2020-04-10T07:06:14", "upload_time_iso_8601": "2020-04-10T07:06:14.152107Z", "url": "https://files.pythonhosted.org/packages/c8/5f/0df427c2eb34cd95541b5ae6a1aa5b649fdd56ef3f284d09f0960fbaeeb5/pymt5adapter-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7ad7e4e5066376adad172da4f3078feb", "sha256": "f53fe61ef1c94a742fb208c36f2ab2c2db0e12487ce17505262510ff559e9ad6"}, "downloads": -1, "filename": "pymt5adapter-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ad7e4e5066376adad172da4f3078feb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 28916, "upload_time": "2020-04-17T14:24:37", "upload_time_iso_8601": "2020-04-17T14:24:37.681882Z", "url": "https://files.pythonhosted.org/packages/2c/60/d6c6956fae6404cea0b510008478470bc1448c003880b4c00f842c112bce/pymt5adapter-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd97dbadb2463a1b83950fdc59d26df7", "sha256": "2f3aaa60f8ede7a80921f29b063fe205f8bc14c5e77ab38f020682d0affdd00b"}, "downloads": -1, "filename": "pymt5adapter-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bd97dbadb2463a1b83950fdc59d26df7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28403, "upload_time": "2020-04-17T14:24:39", "upload_time_iso_8601": "2020-04-17T14:24:39.072266Z", "url": "https://files.pythonhosted.org/packages/a0/5f/c59638ca8b4ba930b995300116c6d9ba6ad0ce7fedbd0c4b71080367aba5/pymt5adapter-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5269ac4ac96b79bbde577c9a65dd8beb", "sha256": "b616a76ce1d141fdeb41397c161b9d91fc13e48c2cef715be8ea28d9aef86c22"}, "downloads": -1, "filename": "pymt5adapter-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5269ac4ac96b79bbde577c9a65dd8beb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29356, "upload_time": "2020-04-17T17:04:19", "upload_time_iso_8601": "2020-04-17T17:04:19.991517Z", "url": "https://files.pythonhosted.org/packages/70/09/20e9a5d47e2d2b6176fdfb4f383524c56526f8394eb04e2fc84f0d95dc4c/pymt5adapter-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b897955fed9d395a23f5b87ea358f72", "sha256": "a492c5459a75f77b3da0b64175774bedacf17936c09be9895046cf24e4679d2d"}, "downloads": -1, "filename": "pymt5adapter-0.3.1.tar.gz", "has_sig": false, "md5_digest": "3b897955fed9d395a23f5b87ea358f72", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29310, "upload_time": "2020-04-17T17:04:21", "upload_time_iso_8601": "2020-04-17T17:04:21.189846Z", "url": "https://files.pythonhosted.org/packages/8b/33/34bdbfa622e8a6ac1bc813a37e87e87f53a5220779c2fdb031a71a203607/pymt5adapter-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "4647c5b5ada08feb8b5f7969dffde452", "sha256": "2b0551f00af9cd803d3d416722127d0910aeb3d5461ab3f6aaa53ddda2a5a836"}, "downloads": -1, "filename": "pymt5adapter-0.3.2.tar.gz", "has_sig": false, "md5_digest": "4647c5b5ada08feb8b5f7969dffde452", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29320, "upload_time": "2020-04-17T17:19:51", "upload_time_iso_8601": "2020-04-17T17:19:51.603636Z", "url": "https://files.pythonhosted.org/packages/57/07/29a1d618b77a9406912027c7123115a90d103117bfc67efb00e08f94ccd4/pymt5adapter-0.3.2.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "86eb0e1d601c424d7229c611ea75f84c", "sha256": "aea4d34f7454d32a97d7e13cbbc2f90caa3a39123e626c413e5cb89c96d884c5"}, "downloads": -1, "filename": "pymt5adapter-0.3.4.tar.gz", "has_sig": false, "md5_digest": "86eb0e1d601c424d7229c611ea75f84c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29473, "upload_time": "2020-04-17T21:32:22", "upload_time_iso_8601": "2020-04-17T21:32:22.653416Z", "url": "https://files.pythonhosted.org/packages/00/dc/23b23cc2823458e4c72a1f8185d5a37c34b0efb571d25d2a3dfe2ecc10c3/pymt5adapter-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "7d786b6efcfc72d8f91b5138cd1725f3", "sha256": "228f17fafd8ac7b1471936edf2a0a0264cccc7adadf529399c45cf4b065b1e74"}, "downloads": -1, "filename": "pymt5adapter-0.3.5.tar.gz", "has_sig": false, "md5_digest": "7d786b6efcfc72d8f91b5138cd1725f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29792, "upload_time": "2020-04-30T16:35:51", "upload_time_iso_8601": "2020-04-30T16:35:51.399395Z", "url": "https://files.pythonhosted.org/packages/60/8b/853b089226c785c3359936eb41a198ee7dddcf2a8a2116a87ffbaa74ea7b/pymt5adapter-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "83f574fad144c8164f06def45117251e", "sha256": "4d31cbfd482ea383d13a5ed526c22546c4948c4087cc2823cdfc2df2ae958e24"}, "downloads": -1, "filename": "pymt5adapter-0.3.6.tar.gz", "has_sig": false, "md5_digest": "83f574fad144c8164f06def45117251e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29825, "upload_time": "2020-04-30T16:52:37", "upload_time_iso_8601": "2020-04-30T16:52:37.680020Z", "url": "https://files.pythonhosted.org/packages/95/b9/47426f54ce7a924e2c783b921d0c74d0bda7204a006a0995e7be859b416b/pymt5adapter-0.3.6.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "b23b199d7298a67f6bef53e51a905052", "sha256": "43ca5b41a0e62df33b6a1073b876871899c49d0036d8206c4378e54e9404bd25"}, "downloads": -1, "filename": "pymt5adapter-0.3.8.tar.gz", "has_sig": false, "md5_digest": "b23b199d7298a67f6bef53e51a905052", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30492, "upload_time": "2020-05-07T07:31:45", "upload_time_iso_8601": "2020-05-07T07:31:45.911564Z", "url": "https://files.pythonhosted.org/packages/f1/20/d0e7d6554c189ae45de1b274fdc16f3b7d666179e8f3eceec6f01bfcd00d/pymt5adapter-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "85cc08975b4550a61de22bb7738cde38", "sha256": "81c70834a93922d39f85b5958ccd1ce660bbdf71059883a54b19ac206430f32c"}, "downloads": -1, "filename": "pymt5adapter-0.3.9.tar.gz", "has_sig": false, "md5_digest": "85cc08975b4550a61de22bb7738cde38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30850, "upload_time": "2020-05-07T16:53:37", "upload_time_iso_8601": "2020-05-07T16:53:37.834953Z", "url": "https://files.pythonhosted.org/packages/8e/ab/9451a3e6d1d73d79bd33781325d609176a2928ad4a6c1709e758e3ed53ce/pymt5adapter-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85cc08975b4550a61de22bb7738cde38", "sha256": "81c70834a93922d39f85b5958ccd1ce660bbdf71059883a54b19ac206430f32c"}, "downloads": -1, "filename": "pymt5adapter-0.3.9.tar.gz", "has_sig": false, "md5_digest": "85cc08975b4550a61de22bb7738cde38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30850, "upload_time": "2020-05-07T16:53:37", "upload_time_iso_8601": "2020-05-07T16:53:37.834953Z", "url": "https://files.pythonhosted.org/packages/8e/ab/9451a3e6d1d73d79bd33781325d609176a2928ad4a6c1709e758e3ed53ce/pymt5adapter-0.3.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:34 2020"}