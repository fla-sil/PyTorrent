{"info": {"author": "d.muth", "author_email": "nicetry@bitch.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Home Automation"], "description": "# Pull 'n' Push\n\n[![Python](https://img.shields.io/badge/Python-3.5%20%7C%203.6%20%7C%203.7-green.svg)](https://www.python.org/)\n[![PyPI version](https://badge.fury.io/py/pnp.svg)](https://badge.fury.io/py/pnp)\n[![Build Status](https://travis-ci.org/HazardDede/pnp.svg?branch=master)](https://travis-ci.org/HazardDede/pnp)\n[![Coverage Status](https://coveralls.io/repos/github/HazardDede/pnp/badge.svg?branch=master)](https://coveralls.io/github/HazardDede/pnp?branch=master)\n[![Docker: hub](https://img.shields.io/badge/docker-hub-brightgreen.svg)](https://cloud.docker.com/u/hazard/repository/docker/hazard/pnp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\n> Pulls data from sources and pushes it to sinks.\n\n1\\.  [Installation](#installation)  \n2\\.  [Getting started](#gettingstarted)  \n3\\.  [Runner](#runner)  \n4\\.  [Building Blocks](#buildingblocks)  \n4.1\\.  [Pull](#pull)  \n4.2\\.  [Push](#push)  \n4.3\\.  [Selector](#selector)  \n4.4\\.  [Dependencies](#dependencies)  \n4.5\\.  [Envelope (0.7.1+)](#envelope0.7.1+)  \n4.6\\.  [Payload unwrapping](#payloadunwrapping)  \n4.7\\.  [Engines (0.10.0+)](#engines0.10.0+)  \n5\\.  [Useful hints](#usefulhints)  \n5.1\\.  [Configuration checking](#configurationchecking)  \n5.2\\.  [Logging (0.11.0+)](#logging0.11.0+)  \n5.3\\.  [dictmentor (0.11.0+)](#dictmentor0.11.0+)  \n5.4\\.  [Advanced selector expressions (0.12.0+)](#advancedselectorexpressions0.12.0+)  \n5.5\\.  [UDF Throttle (0.15.0+)](#udfthrottle0.15.0+)  \n5.6\\.  [Docker images](#dockerimages)  \n6\\.  [Plugins](#plugins)  \n7\\.  [Changelog](#changelog)  \n\n<a name=\"installation\"></a>\n\n## 1\\. Installation\n\n    pip install pnp\n\nOptional extras\n\n* dht: Enables `pnp.plugins.pull.sensor.DHT` (temperature and humidity sensor). Only works on ARM-based systems (like raspberry, arduino)\n* fswatcher: Enables `pnp.plugins.pull.fs.FileSystemWatcher` (Watch file system for created, modified, \ndeleted, moved files)\n* faceR: Enables `pnp.plugins.push.ml.FaceR` (Screen image files for known faces)\n\nInstallation with extras:\n    \n    pip install pnp[fswatcher,faceR]\n    # In case of extra 'dht' you have to enable the option --process-dependency-links ...\n    # ... cause the required adafruit package is not on pypi.\n    pip install --process-dependency-links pnp[dht]\n\n\n<a name=\"gettingstarted\"></a>\n\n## 2\\. Getting started\n\nDefine `pulls` to suck/pull data from source systems.\nDefine one `push` or multiple `pushes` per pull to transfer the pulled data anywhere else (you only need a plugin that \nknows how to handle the target). You can define your configurations in `yaml` or `json`. \nIt is up to you. I prefer yaml...\n\n```yaml\n- name: hello-world\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      interval: 1s\n      repeat: \"Hello World\"\n  push:\n    - plugin: pnp.plugins.push.simple.Echo\n\n```\n        \nCopy this configuration and create the file `helloworld.yaml`. Run it:\n\n    pnp helloworld.yaml\n\nThis example yields the string 'Hello World' every second.\n\nTip: You can validate your config without actually executing it with\n\n```yaml\n   pnp --check helloworld.yaml\n```\n\n<a name=\"runner\"></a>\n\n## 3\\. Runner\n\n```\n> pnp --help\nPull 'n' Push\n\nUsage:\n  pnp [(-c | --check)] [(-v | --verbose)] [--log=<log_conf>] <configuration>\n  pnp (-h | --help)\n  pnp --version\n\nOptions:\n  -c --check        Only check configuration and do not run it.\n  -v --verbose      Switches log level to debug.\n  --log=<log_conf>  Specify logging configuration to load.\n  -h --help         Show this screen.\n  --version         Show version.\n```\n\n<a name=\"buildingblocks\"></a>\n\n## 4\\. Building Blocks\n\nBelow the basic building blocks of pull 'n' push are explained in more detail\n\n\n<a name=\"pull\"></a>\n\n### 4.1\\. Pull\n\nAs stated before pulls fetch data from various source systems and/or apis. Please see the section plugins for already\nimplemented pulls. To instantiate a pull by configuration file you only have to provide it's fully qualified name\nand the argument that should be passed.\n\n```yaml\n- name: example\n  pull:\n    plugin: pnp.plugins.pull.mqtt.Subscribe\n    args:\n      host: localhost\n      port: 1883\n      topic: test/#\n\n```\n        \nThe above snippet will create a pull that listens on the topic test/# on a mqtt broker. The output of the pull\nis a dictionary that contains the topic, levels and the actual payload.\n\n    # When the message 'Here i am' arrives on the topic 'test/foo/bar' then the output will look like that:\n    {'topic': 'test/foo/bar', 'levels': ['test', 'foo', 'bar'], 'payload': 'Here i am'}\n\n\n<a name=\"push\"></a>\n\n### 4.2\\. Push\n\nA pull passes its data to multiple pushes to transfer/transform the data. For example a push might save sensor data\nto influx or dump a file to the file system.\n\n```yaml\n- name: example\n  pull:\n    plugin: pnp.plugins.pull.mqtt.Subscribe\n    args:\n      host: localhost\n      port: 1883\n      topic: test/#\n  push:\n    - plugin: pnp.plugins.push.fs.FileDump\n      args:\n        directory: \"/tmp\"\n        binary_mode: false\n    - plugin: pnp.plugins.push.simple.Echo\n\n```\n      \nThe above snippet adds two pushes to the already known pull. The first push takes the incoming data and dumps it into\nthe specified directory as a textfile. The second push just prints out the incoming data.\n\n\n<a name=\"selector\"></a>\n\n### 4.3\\. Selector\n\nSometimes the output of a pull needs to be transformed before the specified push can handle it. `Selectors` to the \nrescue. Given our input we decide to just dump the payload and print out the first level of the topic.\n\n```yaml\n- name: example\n  pull:\n    plugin: pnp.plugins.pull.mqtt.Subscribe\n    args:\n      host: localhost\n      port: 1883\n      topic: test/#\n  push:\n    - plugin: pnp.plugins.push.fs.FileDump\n      selector: data.payload\n      args:\n        directory: \"/tmp\"\n        binary_mode: false\n    - plugin: pnp.plugins.push.simple.Echo\n      selector: data.levels[0]\n\n```\n\nEasy as that. We can reference our incoming data via `data` or `payload`.\n\n\n<a name=\"dependencies\"></a>\n\n### 4.4\\. Dependencies\n\nBy default any pushes will execute in parallel (not completly true) when new incoming data is available.\nBut now it would be nice if we could chain pushes together. So that the output if one push becomes the \ninput of the next push. The good thing is: Yes we can.\n\nBack to our example let's assume we want to print out the path to the created file dump after the dump is created.\n\n```yaml\n- name: example\n  pull:\n    plugin: pnp.plugins.pull.mqtt.Subscribe\n    args:\n      host: localhost\n      port: 1883\n      topic: test/#\n  push:\n    - plugin: pnp.plugins.push.fs.FileDump\n      selector: data.payload\n      args:\n        directory: \"/tmp\"\n        binary_mode: false\n      deps:\n        - plugin: pnp.plugins.push.simple.Echo\n    - plugin: pnp.plugins.push.simple.Echo\n      selector: data.levels[0]\n\n```\n        \nAs you can see we just add a dependant push to the previous one.\n\n\n<a name=\"envelope0.7.1+\"></a>\n\n### 4.5\\. Envelope (0.7.1+)\n\nUsing envelopes it is possible to change the behaviour of `pushes` during runtime.\nBest examples are the `pnp.plugins.push.fs.FileDump` and `pnp.plugins.push.mqtt.MQTTPush` plugins, where\nyou can override / set the actual `file_name` and `extension` of the file to dump \nresp. the `topic` where the message should be published.\n\nGiven the example ...\n\n```yaml\n- name: envelope\n  pull:\n    plugin: pnp.plugins.pull.simple.Count\n    args:\n      interval: 1s\n  push:\n    plugin: pnp.plugins.push.fs.FileDump\n    selector:\n      file_name: \"lambda data: str(data)\"\n      extension: \".cnt\"\n      data: \"lambda data: data\"\n    args:\n      directory: \"/tmp/counter\"\n      file_name: \"counter\"  # Overridden by envelope\n      extension: \".txt\"  #  Overridden by envelope\n      binary_mode: false  # text mode\n\n```\n          \n... this push dumps multiple files (0.cnt, 1.cnt, 2.cnt, ...) for each pulled counter value,\ninstead of dumping one file 'couter.txt' which is overridden each time a new counter is emitted.\n\nHow does this work: If the emitted or transformed payload (via selector) contains the key `data` or\n`payload` it is assumed that the actual payload is the data stored in this key and all other keys\nrepresent the so called `envelope`.\n\nRemark: This feature might actually break your existing configurations if you use the plugin\n`pnp.plugins.pull.mqtt.MQTTPull` which will now emit an enveloped payload.\n\nThis snippet echoed a dictionary with the keys 'topic', 'levels' and 'payload' previously to version 0.7.2.\nIt will now differentiate between the actual 'payload' (key 'payload' resp. 'data') and the envelope (other keys).\n\n    - name: subscriber\n      pull:\n        plugin: pnp.plugins.pull.mqtt.MQTTPull\n        args:\n          host: localhost\n          topic: test/counter\n      push:\n        plugin: pnp.plugins.push.simple.Echo\n        \nIf you want to \"restore\" the previous behaviour, you only have to wrap the whole payload\ninto a dictionary inside the 'payload' or 'data' key via selector.\n\n    - name: subscriber\n      pull:\n        plugin: pnp.plugins.pull.mqtt.MQTTPull\n        args:\n          host: localhost\n          topic: test/counter\n      push:\n        plugin: pnp.plugins.push.simple.Echo\n        selector:\n          data: \"lambda data: data\"\n\n<a name=\"payloadunwrapping\"></a>\n\n### 4.6\\. Payload unwrapping\n\nBy default any payload that is provided to a push will be \"as-is\". If the payload is an iterable, it is possible\nto `unwrap` each individual item of the iterable and providing that item to the push instead of the whole list. Yes, now\nyou can perform for each loops for pushes.\n\n```yaml\n- name: unwrapping\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      interval: 1s\n      repeat:\n        - 1\n        - 2\n        - 3\n  push:\n    - plugin: pnp.plugins.push.simple.Echo\n      unwrap: true\n\n```\n\nHint: Selector expressions are applied after unwrapping. So the selector is applied to each individual item.\nIf you need the selector to augment your list, use a `push.simple.Nop` with `unwrap = False` and a dependent push.\n\n\n```yaml\n- name: unwrapping\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      interval: 1s\n      repeat:\n        - 1\n        - 2\n        - 3\n  push:\n    - plugin: pnp.plugins.push.simple.Nop\n      selector: \"data + [4, 5, 6]\"\n      unwrap: false  # Which is the default\n      deps:\n        - plugin: pnp.plugins.push.simple.Echo\n          unwrap: true\n\n```\n\n\n<a name=\"engines0.10.0+\"></a>\n\n### 4.7\\. Engines (0.10.0+)\n\nAn engine is the actual code that executes the workflow of pnp (`pull` -> `selector` -> `push`).\nThere are different engines for different use cases.\n\nClick [here](https://github.com/HazardDede/pnp/blob/master/docs/engines/README.md) to get a complete overview of all available engines\n\n<a name=\"usefulhints\"></a>\n\n## 5\\. Useful hints\n\n<a name=\"configurationchecking\"></a>\n\n### 5.1\\. Configuration checking\n\nYou can check your pnp configuration file by starting pnp with the `-c | --check` flag set. This will only run\nthe initializer but not execute the configuration.\n\n```bash\npnp --check <pnp_configuration>\n```\n\n<a name=\"logging0.11.0+\"></a>\n\n### 5.2\\. Logging (0.11.0+)\n\nYou can use different logging configurations in two ways:\n\n```bash\n# Specify when starting pnp\npnp --log=<logging_configuration> <pnp_configuration>\n# Specify by environment variable\nexport PNP_LOG_CONF=<logging_configuration>\npnp <pnp_configuration>\n```\n\nA simple logging configuration that will log severe errors to a separate rotating log file looks like this:\n\n```yaml\nversion: 1\ndisable_existing_loggers: False\n\nformatters:\n    simple:\n        format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\nhandlers:\n    console:\n        class: logging.StreamHandler\n        level: DEBUG\n        formatter: simple\n        stream: ext://sys.stdout\n\n    error_file_handler:\n        class: logging.handlers.RotatingFileHandler\n        level: ERROR\n        formatter: simple\n        filename: errors.log\n        maxBytes: 10485760 # 10MB\n        backupCount: 20\n        encoding: utf8\n\nroot:\n    level: INFO\n    handlers: [console, error_file_handler]\n```\n\nA simple slack logging confiuration that will log warnings and errors to a slack channel looks like this;\n\n```yaml\nversion: 1\ndisable_existing_loggers: False\n\nformatters:\n    simple:\n        format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n\nhandlers:\n    console:\n        class: logging.StreamHandler\n        formatter: simple\n        stream: ext://sys.stdout\n\n    slack:\n        level: WARNING  # Do not use DEBUG - This will result in a recursion (cause slacker is using urllib which uses logging)\n        api_key: '<your_api_key>'  # Retrieve from api.slack.com\n        class: pnp.logging.SlackHandler  # Do not change\n        channel: '#alerts'  # The channel to use\n        ping_level: ERROR  # Ping users when the message has this severity\n        ping_users:  # Ping these users (can be real name, display name, internal name, ...)\n          - dede\n\nroot:\n    level: INFO\n    handlers:\n        - slack\n        - console\n```\n\n\n<a name=\"dictmentor0.11.0+\"></a>\n\n### 5.3\\. dictmentor (0.11.0+)\n\nYou can augment the configuration by extensions from the `dictmentor` package.\nPlease see [DictMentor](https://github.com/HazardDede/dictmentor) for further reference.\n\nThe `DictMentor` instance will be instantiated with the following code and thus the following extensions:\n\n```yaml\nfrom dictmentor import DictMentor, ext\nreturn DictMentor(\n    ext.Environment(fail_on_unset=True),\n    ext.ExternalResource(base_path=os.path.dirname(config_path)),\n    ext.ExternalYamlResource(base_path=os.path.dirname(config_path))\n)\n```\n\nExample:\n\n```yaml\n---\n# Uses the dictmentor package to augment the configuration by dictmentor extensions.\n# Make sure to export the environment variable to echo:\n# export MESSAGE=\"Hello World\"\n\n- name: dictmentor\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      wait: 1\n      repeat: \"{{env::MESSAGE}}\"\n  push:\n    - external: echo.pull\n    - external: nop.pull\n\n```\n\n```yaml\n# Contents of echo.pull\nplugin: pnp.plugins.push.simple.Echo\n```\n\n```yaml\n# Contents of nop.pull\nplugin: pnp.plugins.push.simple.Nop\n```\n\n<a name=\"advancedselectorexpressions0.12.0+\"></a>\n\n### 5.4\\. Advanced selector expressions (0.12.0+)\n\nInstead of string-only selector expressions, you may now use complex dictionary and/or list constructs in your yaml\nto define a selector expression. If you use a dictionary or a list make sure to provide \"real\" selectors as a\nlambda expression, so the evaluator can decide if this is a string literal or an expression to evaluate.\n\nThe configuration below will repeat `{'hello': 'Hello', 'words': ['World', 'Moon', 'Mars']}`.\n\n```yaml\n- name: selector\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      wait: 1\n      repeat: \"Hello World Moon Mars\"\n  push:\n    - plugin: pnp.plugins.push.simple.Echo\n      selector:\n        hello: \"lambda payload: payload.split(' ')[0]\"\n        words:\n          - \"lambda payload: payload.split(' ')[1]\"\n          - \"lambda payload: payload.split(' ')[2]\"\n          - \"lambda payload: payload.split(' ')[3]\"\n```\n\nBefore the advanced selector feature your epxressions would have probably looked similiar to this:\n`dict(hello=payload.split(' ')[0], words=[payload.split(' ')[1], payload.split(' ')[2], payload.split(' ')[3]])`.\nThe first one is more readable, isn't it?\n\nAdditional example:\n\n```yaml\n---\n- name: selector\n  pull:\n    plugin: pnp.plugins.pull.simple.Repeat\n    args:\n      interval: 1s\n      repeat: \"Hello World\"\n  push:\n    - plugin: pnp.plugins.push.simple.Echo\n      # Returns: 'World'\n      selector: \"str(payload.split(' ')[0])\"  # no complex structure. Evaluator assumes that this is an expression -> you do not need a lambda\n    - plugin: pnp.plugins.push.simple.Echo\n      selector:  # Returns {'header': 'this is a header', 'data': 'World', 'Hello': 'World'}\n        header: this is a header  # Just string literals\n        data: \"lambda data: data.split(' ')[1]\"  # Value is lambda and therefore evaluated\n        \"lambda data: str(data.split(' ')[0])\": \"lambda data: data.split(' ')[1]\"  # Both are lambdas and therefore evaluated\n    - plugin: pnp.plugins.push.simple.Echo\n      selector:  # Returns ['foo', 'bar', 'Hello', 'World']\n        - foo  # String literal\n        - bar  # String literal\n        - \"lambda d: d.split(' ')[0]\"  # Lambda -> evaluate the expression\n        - \"lambda d: d.split(' ')[1]\"  # Lambda -> evaluate the expression\n\n```\n\n<a name=\"udfthrottle0.15.0+\"></a>\n\n### 5.5\\. UDF Throttle (0.15.0+)\n\nConsider the following situation: You have a selector that uses a udf to fetch a state from an external system.\nThe state won't change so often, but your selector will fetch the state every time a pull transports a payload to\nthe push. You want to decrease the load on the external system and you want to increase throughput. `Throttle` to the\nrescue. Specifying `throttle` when instantiating your `udf` will manage that your `udf` will only call the external\nsystem once and cache the result. Subsequent calls will either return the cached result or call the external system again\nwhen a specified time has passed since the last call that actually fetched a result from the external system.\n\nExample:\n\n```yaml\nudfs:\n  - name: count  # Instantiate a Counter user defined function\n    plugin: pnp.plugins.udf.simple.Counter\n    args:  # The presence of args tells pnp to instantiate a Counter - important because it has a state (the actual count)\n      init: 1\n      # Will only call the counter if 10 seconds passed between current call and last call.\n      # In the meantime a cached result will be returned.\n      throttle: 5s\ntasks:\n  - name: hello-world\n    pull:\n      plugin: pnp.plugins.pull.simple.Repeat\n      args:\n        interval: 1s\n        repeat: \"Hello World\"\n    push:\n      - plugin: pnp.plugins.push.simple.Echo\n        selector:\n          counter: \"lambda d: count()\"\n\n```\n\n\n<a name=\"dockerimages\"></a>\n\n### 5.6\\. Docker images\n\n```bash\n# Mount the task and logging configuration when starting up the container\ndocker run --rm \\\n    -v /path/to/pnp/config/01_hello_world.yaml:/config/config.yaml \\\n    -v /path/to/logging/config/file.logging:/config/logging.yaml \\\n    hazard/pnp:latest\n```\n\n<a name=\"plugins\"></a>\n\n## 6\\. Plugins\n\nA complete list of plugins is available [here](https://github.com/HazardDede/pnp/blob/master/docs/plugins/README.md)\n\n\n<a name=\"changelog\"></a>\n\n## 7\\. Changelog\n\nWe cannot ensure not to introduce any breaking changes to interfaces / behaviour. This might occur every commit whether it is\nintended or by accident. Nevertheless we try to list breaking changes in the changelog that we are aware of.\nYou are encouraged to specify explicitly the version in your dependency tools, e.g.:\n\n    pip install pnp==0.10.0\n\n**0.22.0**\n* Updates docker base image to `python 3.7`\n* Adds `pull.presence.FritzBoxTracker` to track known devices on a Fritz!Box\n* Adds `json_attributes_topic` support to `push.mqtt.Discovery`\n* Adds `pull.net.SSLVerify` to check ssl certificates\n\n**0.21.1**\n* Feature: Enables arm emulator for arm dockerfile to use docker hub autmated build\n* Bugfix: Removes timeout from component `push.storage.Dropbox`\n\n**0.21.0**\n* Adds `push.fs.Zipper` to zip dirs and files in the process chain\n\n**0.20.2**\n* Bugfix: Fixes udf throttling to take arguments into account for result caching\n* Refactors udf throttling / caching code to be more pythonic\n* Adjusts `pull.simple` components to act like polling components\n\n**0.20.1**\n* Bugfix: Socket shutdown of `pull.net.PortProbe` sometimes fails in rare occasions. Is now handled properly\n\n**0.20.0**\n* Adds `push.notify.Slack` to push a message to a specified slack channel\n* Adds `pull.trigger.Web` to externally trigger poll actions\n* Breaking: Slightly changes the behaviour of `udf.simple.Memory`. See [docs](https://github.com/HazardDede/pnp/blob/master/docs/plugins/udf/simple.Memory/index.md)\n\n**0.19.1**\n* Bugfix: Adds bug workaround in `schiene` package used by `pull.traffic.DeutscheBahn`\n* Bugfix: Adds exception message truncation for `logging.SlackHandler` to ensure starting and ending backticks (code-view)\n\n**0.19.0**\n* Adds `pull.traffic.DeutscheBahn` to poll the `Deutsche Bahn` website using the `schiene` package to find the next scheduled trains\n* Adds `push.simple.Wait` to interrupt the execution for some specified amount of time\n* Breaking: Component `pull.sensor.Sound` can now check multiple sound files for similarity. The configurational arguments changed. Have a look at the docs\n* Breaking: Fixes `ignore_overflow` of `pull.sensor.Sound` plugin (which actually has the opposite effect)\n* Breaking: `pull.sensor.Sound` can optionally trigger a cooldown event after the cooldown period expired. This is useful for a binary sensor to turn it off after the cooldown\n* Adds slack logging handler to log messages to a slack channel and optionally ping users\n* Adds `pull.net.PortProbe` plugin to probe a specific port if it's being used\n\n**0.18.0**\n* Integrates an asyncio featured/powered engine. I think this will be the default in the future. Stay tuned!\n\n**0.17.1**\n* Fixes missing typing-extensions dependency\n* Fixes urllib3 versions due to requests incompatibilities\n\n**0.17.0**\n* Adjusts inline documentation - refers to github documentation\n* Refactors a majority of codebase to comply to pylint linter\n* Integrates yamllint as linter\n* Refactores RetryDirective (namedtuple to attr class)\n* Adds decorators for parsing the envelope in a push context\n* Breaking: Removes `push.simple.Execute` and replace it by `push.simple.TemplatedExecute`\n* Adjusts method `logger` in plugin classes to automatically prepend plugin name\n* Integrates coveralls\n* Adds `pull.ftp.Server` plugin\n* Adds lazy configuration property to `push.ml.FaceR` (basically to test initialization of FaceR without installing face-recognition and dlib)\n* Adds `pull.fs.Size` plugin\n* Adds typing for most of the core codebase and adds mypy as linter\n\n**0.16.0**\n* Adds `ignore_overflow` argument to `pull.sensor.Sound` to ignore buffer overflows errors on slow devices\n* Possible breaking: Adds raspberrypi specific stats (under voltage, throttle, ...) to `pull.monitor.stats`\n* Professionalizes docker image build process / Testing the container\n* Documentation cosmetics\n* Adds cron-like pull `pull.simple.Cron`\n* Adds `pull.camera.MotionEyeWatcher` to watch a MotionEye directory to emit events\n* Adds `push.hass.Service` to call home assistant services by rest-api\n* Breaking: New default value of `cwd` argument of `push.simple.Execute` is now the folder where the invoked pnp-configuration is located and not the current working directory anymore\n* Adds `push.simple.TemplatedExecute` as a replacement for `push.simple.Execute`\n* Adds cron-expressions to polling base class\n* Adds `pull.sensor.MiFlora` plugin to periodically poll xiaomi miflora devices\n\n**0.15.0**\n* Adds `push.mail.GMail` to send e-mails via the gmail api\n* Adds `throttle`-feature to user defined functions via base class\n* Adds `pull.sensor.Sound` to listen to the microphone's sound stream for occurrence of a specified sound\n\n**0.14.0**\n* Adds UDF (user defined functions)\n* Adds UDF `udf.hass.State` to request the current state of an entity (or one of it's attributes) from home assistant\n* Makes selector expressions in complex structures (dicts / lists) more explicit using lambda expressions with mandatory payload argument.\n  This will probably break configs that use complex expressions containing lists and/or dictionaries\n* Adds `pull.hass.State` to listen to state changes in home assistant\n* Fixes bug in `pull.fitbit.Goal` when fetching weekly goals (so far daily goals were fetched too)\n* Adds UDF `udf.simple.Memory` to memorize values to access them later\n\n**0.13.0**\n* Adds `pull.fitbit.Current`, `pull.fitbit.Devices`, `pull.fitbit.Goal` plugins to request data from fitbit api\n* Adds `push.mqtt.Discovery` to create mqtt discovery enabled devices for home assistant. [Reference](https://www.home-assistant.io/docs/mqtt/discovery/)\n* Adds `unwrapping`-feature to pushes\n\n**0.12.0**\n* Adds additional argument `multi` (default False) to `push.mqtt.MQTTPush` to send multiple messages to the broker if\nthe payload is a dictionary (see plugin docs for reference)\n* Adds plugin `pull.monitor.Stats` to periodically emit stats about the host system\n* Adds plugin `push.notify.Pushbullet` to send message via the `pushbullet` service\n* Adds plugin `push.storage.Dropbox` to upload files to a `dropbox` account/app\n* Adds feature to use complex lists and/or dictionary constructs in selector expressions\n* Adds plugin `pull.gpio.Watcher` (extra `gpio`) to watch gpio pins for state changes. Only works on raspberry\n* Adds plugin `push.simple.Execute` to run commands in a shell\n* Adds extra `http-server` to optionally install `flask` and `gevent` when needed\n* Adds utility method to check for installed extras\n* Adds `-v | --verbose` flag to pnp runner to switch logging level to `DEBUG`. No matter what...\n\n**0.11.3** \n* Adds auto-mapping magic to the `pull.zway.ZwayReceiver`.\n* Adds humidity and temperature offset to dht\n\n**0.11.2** \n* Fixes error catching of `run_pending` in `Polling` base class\n\n**0.11.1** \n* Fixes resolution of logging configuration on startup\n\n**0.11.0** \n* Introduces the pull.zway.ZwayReceiver and pull.sensor.OpenWeather component\n* Introduces logging configurations. Integrates dictmentor package to augment configuration\n\n**0.10.0** \n* Introduces engines. You are not enforced to explicitly use one and backward compatibility with\nlegacy configs is given (actually the example configs work as they did before the change). \nSo there shouldn't be any breaking change.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/HazardDede/pnp", "keywords": "push pull data pipeline", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pnp", "package_url": "https://pypi.org/project/pnp/", "platform": "", "project_url": "https://pypi.org/project/pnp/", "project_urls": {"Documentation": "https://github.com/HazardDede/pnp/blob/master/index.md", "Homepage": "https://github.com/HazardDede/pnp", "Source": "https://github.com/HazardDede/pnp/", "Tracker": "https://github.com/HazardDede/pnp/issues"}, "release_url": "https://pypi.org/project/pnp/0.22.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Pull 'n' Push", "version": "0.22.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pull 'n' Push</h1>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18f56eb889cb22498a871a1706055eb74c23a666/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332e35253230253743253230332e36253230253743253230332e372d677265656e2e737667\"></a>\n<a href=\"https://badge.fury.io/py/pnp\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/97a4ff257578107641674dfded372879c8d4113c/68747470733a2f2f62616467652e667572792e696f2f70792f706e702e737667\"></a>\n<a href=\"https://travis-ci.org/HazardDede/pnp\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc7561a0d34b6fcc7356faf13cac1a6d9efa1dcc/68747470733a2f2f7472617669732d63692e6f72672f48617a617264446564652f706e702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/HazardDede/pnp?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d90cf7b50fd018780161032033a645d356abde8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f48617a617264446564652f706e702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://cloud.docker.com/u/hazard/repository/docker/hazard/pnp\" rel=\"nofollow\"><img alt=\"Docker: hub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ded28a7d29be3fea66310c09c0b6e218b4ff01d0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f636b65722d6875622d627269676874677265656e2e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<blockquote>\n<p>Pulls data from sources and pushes it to sinks.</p>\n</blockquote>\n<p>1.  <a href=\"#installation\" rel=\"nofollow\">Installation</a><br>\n2.  <a href=\"#gettingstarted\" rel=\"nofollow\">Getting started</a><br>\n3.  <a href=\"#runner\" rel=\"nofollow\">Runner</a><br>\n4.  <a href=\"#buildingblocks\" rel=\"nofollow\">Building Blocks</a><br>\n4.1.  <a href=\"#pull\" rel=\"nofollow\">Pull</a><br>\n4.2.  <a href=\"#push\" rel=\"nofollow\">Push</a><br>\n4.3.  <a href=\"#selector\" rel=\"nofollow\">Selector</a><br>\n4.4.  <a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a><br>\n4.5.  <a href=\"#envelope0.7.1+\" rel=\"nofollow\">Envelope (0.7.1+)</a><br>\n4.6.  <a href=\"#payloadunwrapping\" rel=\"nofollow\">Payload unwrapping</a><br>\n4.7.  <a href=\"#engines0.10.0+\" rel=\"nofollow\">Engines (0.10.0+)</a><br>\n5.  <a href=\"#usefulhints\" rel=\"nofollow\">Useful hints</a><br>\n5.1.  <a href=\"#configurationchecking\" rel=\"nofollow\">Configuration checking</a><br>\n5.2.  <a href=\"#logging0.11.0+\" rel=\"nofollow\">Logging (0.11.0+)</a><br>\n5.3.  <a href=\"#dictmentor0.11.0+\" rel=\"nofollow\">dictmentor (0.11.0+)</a><br>\n5.4.  <a href=\"#advancedselectorexpressions0.12.0+\" rel=\"nofollow\">Advanced selector expressions (0.12.0+)</a><br>\n5.5.  <a href=\"#udfthrottle0.15.0+\" rel=\"nofollow\">UDF Throttle (0.15.0+)</a><br>\n5.6.  <a href=\"#dockerimages\" rel=\"nofollow\">Docker images</a><br>\n6.  <a href=\"#plugins\" rel=\"nofollow\">Plugins</a><br>\n7.  <a href=\"#changelog\" rel=\"nofollow\">Changelog</a></p>\n<p><a></a></p>\n<h2>1. Installation</h2>\n<pre><code>pip install pnp\n</code></pre>\n<p>Optional extras</p>\n<ul>\n<li>dht: Enables <code>pnp.plugins.pull.sensor.DHT</code> (temperature and humidity sensor). Only works on ARM-based systems (like raspberry, arduino)</li>\n<li>fswatcher: Enables <code>pnp.plugins.pull.fs.FileSystemWatcher</code> (Watch file system for created, modified,\ndeleted, moved files)</li>\n<li>faceR: Enables <code>pnp.plugins.push.ml.FaceR</code> (Screen image files for known faces)</li>\n</ul>\n<p>Installation with extras:</p>\n<pre><code>pip install pnp[fswatcher,faceR]\n# In case of extra 'dht' you have to enable the option --process-dependency-links ...\n# ... cause the required adafruit package is not on pypi.\npip install --process-dependency-links pnp[dht]\n</code></pre>\n<p><a></a></p>\n<h2>2. Getting started</h2>\n<p>Define <code>pulls</code> to suck/pull data from source systems.\nDefine one <code>push</code> or multiple <code>pushes</code> per pull to transfer the pulled data anywhere else (you only need a plugin that\nknows how to handle the target). You can define your configurations in <code>yaml</code> or <code>json</code>.\nIt is up to you. I prefer yaml...</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hello-world</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span> <span class=\"s\">\"Hello</span><span class=\"nv\"> </span><span class=\"s\">World\"</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n</pre>\n<p>Copy this configuration and create the file <code>helloworld.yaml</code>. Run it:</p>\n<pre><code>pnp helloworld.yaml\n</code></pre>\n<p>This example yields the string 'Hello World' every second.</p>\n<p>Tip: You can validate your config without actually executing it with</p>\n<pre>   <span class=\"l l-Scalar l-Scalar-Plain\">pnp --check helloworld.yaml</span>\n</pre>\n<p><a></a></p>\n<h2>3. Runner</h2>\n<pre><code>&gt; pnp --help\nPull 'n' Push\n\nUsage:\n  pnp [(-c | --check)] [(-v | --verbose)] [--log=&lt;log_conf&gt;] &lt;configuration&gt;\n  pnp (-h | --help)\n  pnp --version\n\nOptions:\n  -c --check        Only check configuration and do not run it.\n  -v --verbose      Switches log level to debug.\n  --log=&lt;log_conf&gt;  Specify logging configuration to load.\n  -h --help         Show this screen.\n  --version         Show version.\n</code></pre>\n<p><a></a></p>\n<h2>4. Building Blocks</h2>\n<p>Below the basic building blocks of pull 'n' push are explained in more detail</p>\n<p><a></a></p>\n<h3>4.1. Pull</h3>\n<p>As stated before pulls fetch data from various source systems and/or apis. Please see the section plugins for already\nimplemented pulls. To instantiate a pull by configuration file you only have to provide it's fully qualified name\nand the argument that should be passed.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.mqtt.Subscribe</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span>\n      <span class=\"nt\">topic</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test/#</span>\n</pre>\n<p>The above snippet will create a pull that listens on the topic test/# on a mqtt broker. The output of the pull\nis a dictionary that contains the topic, levels and the actual payload.</p>\n<pre><code># When the message 'Here i am' arrives on the topic 'test/foo/bar' then the output will look like that:\n{'topic': 'test/foo/bar', 'levels': ['test', 'foo', 'bar'], 'payload': 'Here i am'}\n</code></pre>\n<p><a></a></p>\n<h3>4.2. Push</h3>\n<p>A pull passes its data to multiple pushes to transfer/transform the data. For example a push might save sensor data\nto influx or dump a file to the file system.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.mqtt.Subscribe</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span>\n      <span class=\"nt\">topic</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test/#</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.fs.FileDump</span>\n      <span class=\"nt\">args</span><span class=\"p\">:</span>\n        <span class=\"nt\">directory</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp\"</span>\n        <span class=\"nt\">binary_mode</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n</pre>\n<p>The above snippet adds two pushes to the already known pull. The first push takes the incoming data and dumps it into\nthe specified directory as a textfile. The second push just prints out the incoming data.</p>\n<p><a></a></p>\n<h3>4.3. Selector</h3>\n<p>Sometimes the output of a pull needs to be transformed before the specified push can handle it. <code>Selectors</code> to the\nrescue. Given our input we decide to just dump the payload and print out the first level of the topic.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.mqtt.Subscribe</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span>\n      <span class=\"nt\">topic</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test/#</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.fs.FileDump</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">data.payload</span>\n      <span class=\"nt\">args</span><span class=\"p\">:</span>\n        <span class=\"nt\">directory</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp\"</span>\n        <span class=\"nt\">binary_mode</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">data.levels[0]</span>\n</pre>\n<p>Easy as that. We can reference our incoming data via <code>data</code> or <code>payload</code>.</p>\n<p><a></a></p>\n<h3>4.4. Dependencies</h3>\n<p>By default any pushes will execute in parallel (not completly true) when new incoming data is available.\nBut now it would be nice if we could chain pushes together. So that the output if one push becomes the\ninput of the next push. The good thing is: Yes we can.</p>\n<p>Back to our example let's assume we want to print out the path to the created file dump after the dump is created.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.mqtt.Subscribe</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">localhost</span>\n      <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span>\n      <span class=\"nt\">topic</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test/#</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.fs.FileDump</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">data.payload</span>\n      <span class=\"nt\">args</span><span class=\"p\">:</span>\n        <span class=\"nt\">directory</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp\"</span>\n        <span class=\"nt\">binary_mode</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>\n      <span class=\"nt\">deps</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">data.levels[0]</span>\n</pre>\n<p>As you can see we just add a dependant push to the previous one.</p>\n<p><a></a></p>\n<h3>4.5. Envelope (0.7.1+)</h3>\n<p>Using envelopes it is possible to change the behaviour of <code>pushes</code> during runtime.\nBest examples are the <code>pnp.plugins.push.fs.FileDump</code> and <code>pnp.plugins.push.mqtt.MQTTPush</code> plugins, where\nyou can override / set the actual <code>file_name</code> and <code>extension</code> of the file to dump\nresp. the <code>topic</code> where the message should be published.</p>\n<p>Given the example ...</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">envelope</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Count</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.fs.FileDump</span>\n    <span class=\"nt\">selector</span><span class=\"p\">:</span>\n      <span class=\"nt\">file_name</span><span class=\"p\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">data:</span><span class=\"nv\"> </span><span class=\"s\">str(data)\"</span>\n      <span class=\"nt\">extension</span><span class=\"p\">:</span> <span class=\"s\">\".cnt\"</span>\n      <span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">data:</span><span class=\"nv\"> </span><span class=\"s\">data\"</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">directory</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp/counter\"</span>\n      <span class=\"nt\">file_name</span><span class=\"p\">:</span> <span class=\"s\">\"counter\"</span>  <span class=\"c1\"># Overridden by envelope</span>\n      <span class=\"nt\">extension</span><span class=\"p\">:</span> <span class=\"s\">\".txt\"</span>  <span class=\"c1\">#  Overridden by envelope</span>\n      <span class=\"nt\">binary_mode</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>  <span class=\"c1\"># text mode</span>\n</pre>\n<p>... this push dumps multiple files (0.cnt, 1.cnt, 2.cnt, ...) for each pulled counter value,\ninstead of dumping one file 'couter.txt' which is overridden each time a new counter is emitted.</p>\n<p>How does this work: If the emitted or transformed payload (via selector) contains the key <code>data</code> or\n<code>payload</code> it is assumed that the actual payload is the data stored in this key and all other keys\nrepresent the so called <code>envelope</code>.</p>\n<p>Remark: This feature might actually break your existing configurations if you use the plugin\n<code>pnp.plugins.pull.mqtt.MQTTPull</code> which will now emit an enveloped payload.</p>\n<p>This snippet echoed a dictionary with the keys 'topic', 'levels' and 'payload' previously to version 0.7.2.\nIt will now differentiate between the actual 'payload' (key 'payload' resp. 'data') and the envelope (other keys).</p>\n<pre><code>- name: subscriber\n  pull:\n    plugin: pnp.plugins.pull.mqtt.MQTTPull\n    args:\n      host: localhost\n      topic: test/counter\n  push:\n    plugin: pnp.plugins.push.simple.Echo\n</code></pre>\n<p>If you want to \"restore\" the previous behaviour, you only have to wrap the whole payload\ninto a dictionary inside the 'payload' or 'data' key via selector.</p>\n<pre><code>- name: subscriber\n  pull:\n    plugin: pnp.plugins.pull.mqtt.MQTTPull\n    args:\n      host: localhost\n      topic: test/counter\n  push:\n    plugin: pnp.plugins.push.simple.Echo\n    selector:\n      data: \"lambda data: data\"\n</code></pre>\n<p><a></a></p>\n<h3>4.6. Payload unwrapping</h3>\n<p>By default any payload that is provided to a push will be \"as-is\". If the payload is an iterable, it is possible\nto <code>unwrap</code> each individual item of the iterable and providing that item to the push instead of the whole list. Yes, now\nyou can perform for each loops for pushes.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">unwrapping</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">unwrap</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<p>Hint: Selector expressions are applied after unwrapping. So the selector is applied to each individual item.\nIf you need the selector to augment your list, use a <code>push.simple.Nop</code> with <code>unwrap = False</code> and a dependent push.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">unwrapping</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">3</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Nop</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"s\">\"data</span><span class=\"nv\"> </span><span class=\"s\">+</span><span class=\"nv\"> </span><span class=\"s\">[4,</span><span class=\"nv\"> </span><span class=\"s\">5,</span><span class=\"nv\"> </span><span class=\"s\">6]\"</span>\n      <span class=\"nt\">unwrap</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span>  <span class=\"c1\"># Which is the default</span>\n      <span class=\"nt\">deps</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n          <span class=\"nt\">unwrap</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<p><a></a></p>\n<h3>4.7. Engines (0.10.0+)</h3>\n<p>An engine is the actual code that executes the workflow of pnp (<code>pull</code> -&gt; <code>selector</code> -&gt; <code>push</code>).\nThere are different engines for different use cases.</p>\n<p>Click <a href=\"https://github.com/HazardDede/pnp/blob/master/docs/engines/README.md\" rel=\"nofollow\">here</a> to get a complete overview of all available engines</p>\n<p><a></a></p>\n<h2>5. Useful hints</h2>\n<p><a></a></p>\n<h3>5.1. Configuration checking</h3>\n<p>You can check your pnp configuration file by starting pnp with the <code>-c | --check</code> flag set. This will only run\nthe initializer but not execute the configuration.</p>\n<pre>pnp --check &lt;pnp_configuration&gt;\n</pre>\n<p><a></a></p>\n<h3>5.2. Logging (0.11.0+)</h3>\n<p>You can use different logging configurations in two ways:</p>\n<pre><span class=\"c1\"># Specify when starting pnp</span>\npnp --log<span class=\"o\">=</span>&lt;logging_configuration&gt; &lt;pnp_configuration&gt;\n<span class=\"c1\"># Specify by environment variable</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PNP_LOG_CONF</span><span class=\"o\">=</span>&lt;logging_configuration&gt;\npnp &lt;pnp_configuration&gt;\n</pre>\n<p>A simple logging configuration that will log severe errors to a separate rotating log file looks like this:</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"nt\">disable_existing_loggers</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n\n<span class=\"nt\">formatters</span><span class=\"p\">:</span>\n    <span class=\"nt\">simple</span><span class=\"p\">:</span>\n        <span class=\"nt\">format</span><span class=\"p\">:</span> <span class=\"s\">\"%(asctime)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(name)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(levelname)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(message)s\"</span>\n\n<span class=\"nt\">handlers</span><span class=\"p\">:</span>\n    <span class=\"nt\">console</span><span class=\"p\">:</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">logging.StreamHandler</span>\n        <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">DEBUG</span>\n        <span class=\"nt\">formatter</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">simple</span>\n        <span class=\"nt\">stream</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ext://sys.stdout</span>\n\n    <span class=\"nt\">error_file_handler</span><span class=\"p\">:</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">logging.handlers.RotatingFileHandler</span>\n        <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>\n        <span class=\"nt\">formatter</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">simple</span>\n        <span class=\"nt\">filename</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">errors.log</span>\n        <span class=\"nt\">maxBytes</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10485760</span> <span class=\"c1\"># 10MB</span>\n        <span class=\"nt\">backupCount</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">20</span>\n        <span class=\"nt\">encoding</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">utf8</span>\n\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">INFO</span>\n    <span class=\"nt\">handlers</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">console</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">error_file_handler</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<p>A simple slack logging confiuration that will log warnings and errors to a slack channel looks like this;</p>\n<pre><span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n<span class=\"nt\">disable_existing_loggers</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n\n<span class=\"nt\">formatters</span><span class=\"p\">:</span>\n    <span class=\"nt\">simple</span><span class=\"p\">:</span>\n        <span class=\"nt\">format</span><span class=\"p\">:</span> <span class=\"s\">\"%(asctime)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(name)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(levelname)s</span><span class=\"nv\"> </span><span class=\"s\">-</span><span class=\"nv\"> </span><span class=\"s\">%(message)s\"</span>\n\n<span class=\"nt\">handlers</span><span class=\"p\">:</span>\n    <span class=\"nt\">console</span><span class=\"p\">:</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">logging.StreamHandler</span>\n        <span class=\"nt\">formatter</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">simple</span>\n        <span class=\"nt\">stream</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ext://sys.stdout</span>\n\n    <span class=\"nt\">slack</span><span class=\"p\">:</span>\n        <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">WARNING</span>  <span class=\"c1\"># Do not use DEBUG - This will result in a recursion (cause slacker is using urllib which uses logging)</span>\n        <span class=\"nt\">api_key</span><span class=\"p\">:</span> <span class=\"s\">'&lt;your_api_key&gt;'</span>  <span class=\"c1\"># Retrieve from api.slack.com</span>\n        <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.logging.SlackHandler</span>  <span class=\"c1\"># Do not change</span>\n        <span class=\"nt\">channel</span><span class=\"p\">:</span> <span class=\"s\">'#alerts'</span>  <span class=\"c1\"># The channel to use</span>\n        <span class=\"nt\">ping_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>  <span class=\"c1\"># Ping users when the message has this severity</span>\n        <span class=\"nt\">ping_users</span><span class=\"p\">:</span>  <span class=\"c1\"># Ping these users (can be real name, display name, internal name, ...)</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">dede</span>\n\n<span class=\"nt\">root</span><span class=\"p\">:</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">INFO</span>\n    <span class=\"nt\">handlers</span><span class=\"p\">:</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">slack</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">console</span>\n</pre>\n<p><a></a></p>\n<h3>5.3. dictmentor (0.11.0+)</h3>\n<p>You can augment the configuration by extensions from the <code>dictmentor</code> package.\nPlease see <a href=\"https://github.com/HazardDede/dictmentor\" rel=\"nofollow\">DictMentor</a> for further reference.</p>\n<p>The <code>DictMentor</code> instance will be instantiated with the following code and thus the following extensions:</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">from dictmentor import DictMentor, ext</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">return DictMentor(</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">ext.Environment(fail_on_unset=True),</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">ext.ExternalResource(base_path=os.path.dirname(config_path)),</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">ext.ExternalYamlResource(base_path=os.path.dirname(config_path))</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">)</span>\n</pre>\n<p>Example:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"c1\"># Uses the dictmentor package to augment the configuration by dictmentor extensions.</span>\n<span class=\"c1\"># Make sure to export the environment variable to echo:</span>\n<span class=\"c1\"># export MESSAGE=\"Hello World\"</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dictmentor</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">wait</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span> <span class=\"s\">\"{{env::MESSAGE}}\"</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">external</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">echo.pull</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">external</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">nop.pull</span>\n</pre>\n<pre><span class=\"c1\"># Contents of echo.pull</span>\n<span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n</pre>\n<pre><span class=\"c1\"># Contents of nop.pull</span>\n<span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Nop</span>\n</pre>\n<p><a></a></p>\n<h3>5.4. Advanced selector expressions (0.12.0+)</h3>\n<p>Instead of string-only selector expressions, you may now use complex dictionary and/or list constructs in your yaml\nto define a selector expression. If you use a dictionary or a list make sure to provide \"real\" selectors as a\nlambda expression, so the evaluator can decide if this is a string literal or an expression to evaluate.</p>\n<p>The configuration below will repeat <code>{'hello': 'Hello', 'words': ['World', 'Moon', 'Mars']}</code>.</p>\n<pre><span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">selector</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">wait</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span> <span class=\"s\">\"Hello</span><span class=\"nv\"> </span><span class=\"s\">World</span><span class=\"nv\"> </span><span class=\"s\">Moon</span><span class=\"nv\"> </span><span class=\"s\">Mars\"</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span>\n        <span class=\"nt\">hello</span><span class=\"p\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">payload:</span><span class=\"nv\"> </span><span class=\"s\">payload.split('</span><span class=\"nv\"> </span><span class=\"s\">')[0]\"</span>\n        <span class=\"nt\">words</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">payload:</span><span class=\"nv\"> </span><span class=\"s\">payload.split('</span><span class=\"nv\"> </span><span class=\"s\">')[1]\"</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">payload:</span><span class=\"nv\"> </span><span class=\"s\">payload.split('</span><span class=\"nv\"> </span><span class=\"s\">')[2]\"</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">payload:</span><span class=\"nv\"> </span><span class=\"s\">payload.split('</span><span class=\"nv\"> </span><span class=\"s\">')[3]\"</span>\n</pre>\n<p>Before the advanced selector feature your epxressions would have probably looked similiar to this:\n<code>dict(hello=payload.split(' ')[0], words=[payload.split(' ')[1], payload.split(' ')[2], payload.split(' ')[3]])</code>.\nThe first one is more readable, isn't it?</p>\n<p>Additional example:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">selector</span>\n  <span class=\"nt\">pull</span><span class=\"p\">:</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>\n      <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n      <span class=\"nt\">repeat</span><span class=\"p\">:</span> <span class=\"s\">\"Hello</span><span class=\"nv\"> </span><span class=\"s\">World\"</span>\n  <span class=\"nt\">push</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"c1\"># Returns: 'World'</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span> <span class=\"s\">\"str(payload.split('</span><span class=\"nv\"> </span><span class=\"s\">')[0])\"</span>  <span class=\"c1\"># no complex structure. Evaluator assumes that this is an expression -&gt; you do not need a lambda</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span>  <span class=\"c1\"># Returns {'header': 'this is a header', 'data': 'World', 'Hello': 'World'}</span>\n        <span class=\"nt\">header</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">this is a header</span>  <span class=\"c1\"># Just string literals</span>\n        <span class=\"nt\">data</span><span class=\"p\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">data:</span><span class=\"nv\"> </span><span class=\"s\">data.split('</span><span class=\"nv\"> </span><span class=\"s\">')[1]\"</span>  <span class=\"c1\"># Value is lambda and therefore evaluated</span>\n        <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">data:</span><span class=\"nv\"> </span><span class=\"s\">str(data.split('</span><span class=\"nv\"> </span><span class=\"s\">')[0])\"</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">data:</span><span class=\"nv\"> </span><span class=\"s\">data.split('</span><span class=\"nv\"> </span><span class=\"s\">')[1]\"</span>  <span class=\"c1\"># Both are lambdas and therefore evaluated</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n      <span class=\"nt\">selector</span><span class=\"p\">:</span>  <span class=\"c1\"># Returns ['foo', 'bar', 'Hello', 'World']</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo</span>  <span class=\"c1\"># String literal</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">bar</span>  <span class=\"c1\"># String literal</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">d:</span><span class=\"nv\"> </span><span class=\"s\">d.split('</span><span class=\"nv\"> </span><span class=\"s\">')[0]\"</span>  <span class=\"c1\"># Lambda -&gt; evaluate the expression</span>\n        <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">d:</span><span class=\"nv\"> </span><span class=\"s\">d.split('</span><span class=\"nv\"> </span><span class=\"s\">')[1]\"</span>  <span class=\"c1\"># Lambda -&gt; evaluate the expression</span>\n</pre>\n<p><a></a></p>\n<h3>5.5. UDF Throttle (0.15.0+)</h3>\n<p>Consider the following situation: You have a selector that uses a udf to fetch a state from an external system.\nThe state won't change so often, but your selector will fetch the state every time a pull transports a payload to\nthe push. You want to decrease the load on the external system and you want to increase throughput. <code>Throttle</code> to the\nrescue. Specifying <code>throttle</code> when instantiating your <code>udf</code> will manage that your <code>udf</code> will only call the external\nsystem once and cache the result. Subsequent calls will either return the cached result or call the external system again\nwhen a specified time has passed since the last call that actually fetched a result from the external system.</p>\n<p>Example:</p>\n<pre><span class=\"nt\">udfs</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">count</span>  <span class=\"c1\"># Instantiate a Counter user defined function</span>\n    <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.udf.simple.Counter</span>\n    <span class=\"nt\">args</span><span class=\"p\">:</span>  <span class=\"c1\"># The presence of args tells pnp to instantiate a Counter - important because it has a state (the actual count)</span>\n      <span class=\"nt\">init</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n      <span class=\"c1\"># Will only call the counter if 10 seconds passed between current call and last call.</span>\n      <span class=\"c1\"># In the meantime a cached result will be returned.</span>\n      <span class=\"nt\">throttle</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">5s</span>\n<span class=\"nt\">tasks</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hello-world</span>\n    <span class=\"nt\">pull</span><span class=\"p\">:</span>\n      <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.pull.simple.Repeat</span>\n      <span class=\"nt\">args</span><span class=\"p\">:</span>\n        <span class=\"nt\">interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1s</span>\n        <span class=\"nt\">repeat</span><span class=\"p\">:</span> <span class=\"s\">\"Hello</span><span class=\"nv\"> </span><span class=\"s\">World\"</span>\n    <span class=\"nt\">push</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">plugin</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">pnp.plugins.push.simple.Echo</span>\n        <span class=\"nt\">selector</span><span class=\"p\">:</span>\n          <span class=\"nt\">counter</span><span class=\"p\">:</span> <span class=\"s\">\"lambda</span><span class=\"nv\"> </span><span class=\"s\">d:</span><span class=\"nv\"> </span><span class=\"s\">count()\"</span>\n</pre>\n<p><a></a></p>\n<h3>5.6. Docker images</h3>\n<pre><span class=\"c1\"># Mount the task and logging configuration when starting up the container</span>\ndocker run --rm <span class=\"se\">\\</span>\n    -v /path/to/pnp/config/01_hello_world.yaml:/config/config.yaml <span class=\"se\">\\</span>\n    -v /path/to/logging/config/file.logging:/config/logging.yaml <span class=\"se\">\\</span>\n    hazard/pnp:latest\n</pre>\n<p><a></a></p>\n<h2>6. Plugins</h2>\n<p>A complete list of plugins is available <a href=\"https://github.com/HazardDede/pnp/blob/master/docs/plugins/README.md\" rel=\"nofollow\">here</a></p>\n<p><a></a></p>\n<h2>7. Changelog</h2>\n<p>We cannot ensure not to introduce any breaking changes to interfaces / behaviour. This might occur every commit whether it is\nintended or by accident. Nevertheless we try to list breaking changes in the changelog that we are aware of.\nYou are encouraged to specify explicitly the version in your dependency tools, e.g.:</p>\n<pre><code>pip install pnp==0.10.0\n</code></pre>\n<p><strong>0.22.0</strong></p>\n<ul>\n<li>Updates docker base image to <code>python 3.7</code></li>\n<li>Adds <code>pull.presence.FritzBoxTracker</code> to track known devices on a Fritz!Box</li>\n<li>Adds <code>json_attributes_topic</code> support to <code>push.mqtt.Discovery</code></li>\n<li>Adds <code>pull.net.SSLVerify</code> to check ssl certificates</li>\n</ul>\n<p><strong>0.21.1</strong></p>\n<ul>\n<li>Feature: Enables arm emulator for arm dockerfile to use docker hub autmated build</li>\n<li>Bugfix: Removes timeout from component <code>push.storage.Dropbox</code></li>\n</ul>\n<p><strong>0.21.0</strong></p>\n<ul>\n<li>Adds <code>push.fs.Zipper</code> to zip dirs and files in the process chain</li>\n</ul>\n<p><strong>0.20.2</strong></p>\n<ul>\n<li>Bugfix: Fixes udf throttling to take arguments into account for result caching</li>\n<li>Refactors udf throttling / caching code to be more pythonic</li>\n<li>Adjusts <code>pull.simple</code> components to act like polling components</li>\n</ul>\n<p><strong>0.20.1</strong></p>\n<ul>\n<li>Bugfix: Socket shutdown of <code>pull.net.PortProbe</code> sometimes fails in rare occasions. Is now handled properly</li>\n</ul>\n<p><strong>0.20.0</strong></p>\n<ul>\n<li>Adds <code>push.notify.Slack</code> to push a message to a specified slack channel</li>\n<li>Adds <code>pull.trigger.Web</code> to externally trigger poll actions</li>\n<li>Breaking: Slightly changes the behaviour of <code>udf.simple.Memory</code>. See <a href=\"https://github.com/HazardDede/pnp/blob/master/docs/plugins/udf/simple.Memory/index.md\" rel=\"nofollow\">docs</a></li>\n</ul>\n<p><strong>0.19.1</strong></p>\n<ul>\n<li>Bugfix: Adds bug workaround in <code>schiene</code> package used by <code>pull.traffic.DeutscheBahn</code></li>\n<li>Bugfix: Adds exception message truncation for <code>logging.SlackHandler</code> to ensure starting and ending backticks (code-view)</li>\n</ul>\n<p><strong>0.19.0</strong></p>\n<ul>\n<li>Adds <code>pull.traffic.DeutscheBahn</code> to poll the <code>Deutsche Bahn</code> website using the <code>schiene</code> package to find the next scheduled trains</li>\n<li>Adds <code>push.simple.Wait</code> to interrupt the execution for some specified amount of time</li>\n<li>Breaking: Component <code>pull.sensor.Sound</code> can now check multiple sound files for similarity. The configurational arguments changed. Have a look at the docs</li>\n<li>Breaking: Fixes <code>ignore_overflow</code> of <code>pull.sensor.Sound</code> plugin (which actually has the opposite effect)</li>\n<li>Breaking: <code>pull.sensor.Sound</code> can optionally trigger a cooldown event after the cooldown period expired. This is useful for a binary sensor to turn it off after the cooldown</li>\n<li>Adds slack logging handler to log messages to a slack channel and optionally ping users</li>\n<li>Adds <code>pull.net.PortProbe</code> plugin to probe a specific port if it's being used</li>\n</ul>\n<p><strong>0.18.0</strong></p>\n<ul>\n<li>Integrates an asyncio featured/powered engine. I think this will be the default in the future. Stay tuned!</li>\n</ul>\n<p><strong>0.17.1</strong></p>\n<ul>\n<li>Fixes missing typing-extensions dependency</li>\n<li>Fixes urllib3 versions due to requests incompatibilities</li>\n</ul>\n<p><strong>0.17.0</strong></p>\n<ul>\n<li>Adjusts inline documentation - refers to github documentation</li>\n<li>Refactors a majority of codebase to comply to pylint linter</li>\n<li>Integrates yamllint as linter</li>\n<li>Refactores RetryDirective (namedtuple to attr class)</li>\n<li>Adds decorators for parsing the envelope in a push context</li>\n<li>Breaking: Removes <code>push.simple.Execute</code> and replace it by <code>push.simple.TemplatedExecute</code></li>\n<li>Adjusts method <code>logger</code> in plugin classes to automatically prepend plugin name</li>\n<li>Integrates coveralls</li>\n<li>Adds <code>pull.ftp.Server</code> plugin</li>\n<li>Adds lazy configuration property to <code>push.ml.FaceR</code> (basically to test initialization of FaceR without installing face-recognition and dlib)</li>\n<li>Adds <code>pull.fs.Size</code> plugin</li>\n<li>Adds typing for most of the core codebase and adds mypy as linter</li>\n</ul>\n<p><strong>0.16.0</strong></p>\n<ul>\n<li>Adds <code>ignore_overflow</code> argument to <code>pull.sensor.Sound</code> to ignore buffer overflows errors on slow devices</li>\n<li>Possible breaking: Adds raspberrypi specific stats (under voltage, throttle, ...) to <code>pull.monitor.stats</code></li>\n<li>Professionalizes docker image build process / Testing the container</li>\n<li>Documentation cosmetics</li>\n<li>Adds cron-like pull <code>pull.simple.Cron</code></li>\n<li>Adds <code>pull.camera.MotionEyeWatcher</code> to watch a MotionEye directory to emit events</li>\n<li>Adds <code>push.hass.Service</code> to call home assistant services by rest-api</li>\n<li>Breaking: New default value of <code>cwd</code> argument of <code>push.simple.Execute</code> is now the folder where the invoked pnp-configuration is located and not the current working directory anymore</li>\n<li>Adds <code>push.simple.TemplatedExecute</code> as a replacement for <code>push.simple.Execute</code></li>\n<li>Adds cron-expressions to polling base class</li>\n<li>Adds <code>pull.sensor.MiFlora</code> plugin to periodically poll xiaomi miflora devices</li>\n</ul>\n<p><strong>0.15.0</strong></p>\n<ul>\n<li>Adds <code>push.mail.GMail</code> to send e-mails via the gmail api</li>\n<li>Adds <code>throttle</code>-feature to user defined functions via base class</li>\n<li>Adds <code>pull.sensor.Sound</code> to listen to the microphone's sound stream for occurrence of a specified sound</li>\n</ul>\n<p><strong>0.14.0</strong></p>\n<ul>\n<li>Adds UDF (user defined functions)</li>\n<li>Adds UDF <code>udf.hass.State</code> to request the current state of an entity (or one of it's attributes) from home assistant</li>\n<li>Makes selector expressions in complex structures (dicts / lists) more explicit using lambda expressions with mandatory payload argument.\nThis will probably break configs that use complex expressions containing lists and/or dictionaries</li>\n<li>Adds <code>pull.hass.State</code> to listen to state changes in home assistant</li>\n<li>Fixes bug in <code>pull.fitbit.Goal</code> when fetching weekly goals (so far daily goals were fetched too)</li>\n<li>Adds UDF <code>udf.simple.Memory</code> to memorize values to access them later</li>\n</ul>\n<p><strong>0.13.0</strong></p>\n<ul>\n<li>Adds <code>pull.fitbit.Current</code>, <code>pull.fitbit.Devices</code>, <code>pull.fitbit.Goal</code> plugins to request data from fitbit api</li>\n<li>Adds <code>push.mqtt.Discovery</code> to create mqtt discovery enabled devices for home assistant. <a href=\"https://www.home-assistant.io/docs/mqtt/discovery/\" rel=\"nofollow\">Reference</a></li>\n<li>Adds <code>unwrapping</code>-feature to pushes</li>\n</ul>\n<p><strong>0.12.0</strong></p>\n<ul>\n<li>Adds additional argument <code>multi</code> (default False) to <code>push.mqtt.MQTTPush</code> to send multiple messages to the broker if\nthe payload is a dictionary (see plugin docs for reference)</li>\n<li>Adds plugin <code>pull.monitor.Stats</code> to periodically emit stats about the host system</li>\n<li>Adds plugin <code>push.notify.Pushbullet</code> to send message via the <code>pushbullet</code> service</li>\n<li>Adds plugin <code>push.storage.Dropbox</code> to upload files to a <code>dropbox</code> account/app</li>\n<li>Adds feature to use complex lists and/or dictionary constructs in selector expressions</li>\n<li>Adds plugin <code>pull.gpio.Watcher</code> (extra <code>gpio</code>) to watch gpio pins for state changes. Only works on raspberry</li>\n<li>Adds plugin <code>push.simple.Execute</code> to run commands in a shell</li>\n<li>Adds extra <code>http-server</code> to optionally install <code>flask</code> and <code>gevent</code> when needed</li>\n<li>Adds utility method to check for installed extras</li>\n<li>Adds <code>-v | --verbose</code> flag to pnp runner to switch logging level to <code>DEBUG</code>. No matter what...</li>\n</ul>\n<p><strong>0.11.3</strong></p>\n<ul>\n<li>Adds auto-mapping magic to the <code>pull.zway.ZwayReceiver</code>.</li>\n<li>Adds humidity and temperature offset to dht</li>\n</ul>\n<p><strong>0.11.2</strong></p>\n<ul>\n<li>Fixes error catching of <code>run_pending</code> in <code>Polling</code> base class</li>\n</ul>\n<p><strong>0.11.1</strong></p>\n<ul>\n<li>Fixes resolution of logging configuration on startup</li>\n</ul>\n<p><strong>0.11.0</strong></p>\n<ul>\n<li>Introduces the pull.zway.ZwayReceiver and pull.sensor.OpenWeather component</li>\n<li>Introduces logging configurations. Integrates dictmentor package to augment configuration</li>\n</ul>\n<p><strong>0.10.0</strong></p>\n<ul>\n<li>Introduces engines. You are not enforced to explicitly use one and backward compatibility with\nlegacy configs is given (actually the example configs work as they did before the change).\nSo there shouldn't be any breaking change.</li>\n</ul>\n\n          </div>"}, "last_serial": 7011173, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "6ef7c52dc6177518c0791dd951a795ee", "sha256": "3d3b52b1fdcacb35a64534d9ba4b9b8760755b8935f34738b1b0436b47dbec83"}, "downloads": -1, "filename": "pnp-0.10.0.tar.gz", "has_sig": false, "md5_digest": "6ef7c52dc6177518c0791dd951a795ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 79049, "upload_time": "2018-09-12T17:16:36", "upload_time_iso_8601": "2018-09-12T17:16:36.981125Z", "url": "https://files.pythonhosted.org/packages/8f/fd/7e6047cfcc6581b4c7d7f617fc2611f410c0ed3796f39b1f0dd7e8eeb01a/pnp-0.10.0.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "ddd301fbb97a21d6b64d484ba880ade2", "sha256": "2255f46e340f251e1b016623a2c5e6e4217a282523281dae0c6b1c6e04007983"}, "downloads": -1, "filename": "pnp-0.11.1.tar.gz", "has_sig": false, "md5_digest": "ddd301fbb97a21d6b64d484ba880ade2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 94864, "upload_time": "2018-10-16T19:25:39", "upload_time_iso_8601": "2018-10-16T19:25:39.636481Z", "url": "https://files.pythonhosted.org/packages/03/0a/ab844182fe2145ccba7b3139e50ad078799544161e2f04d9c16c3f75131a/pnp-0.11.1.tar.gz", "yanked": false}], "0.11.2": [{"comment_text": "", "digests": {"md5": "7fcfe0c56b3d59a34a043aafca8bf988", "sha256": "fe4ddc32121ba0930a96125bef3a4f74b206d53514175f8429d214543cc7a1b0"}, "downloads": -1, "filename": "pnp-0.11.2.tar.gz", "has_sig": false, "md5_digest": "7fcfe0c56b3d59a34a043aafca8bf988", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 94868, "upload_time": "2018-10-31T10:17:23", "upload_time_iso_8601": "2018-10-31T10:17:23.399875Z", "url": "https://files.pythonhosted.org/packages/e8/75/af666fde974adeddccde1fcdea04e020fb1e0476095642baa9ef17d82847/pnp-0.11.2.tar.gz", "yanked": false}], "0.11.3": [{"comment_text": "", "digests": {"md5": "244cec52e3af5bed85f65ea8671545f4", "sha256": "67748fd928038e9f71314358770b291705467bc6b78b4cdc2fe8b525dc986290"}, "downloads": -1, "filename": "pnp-0.11.3.tar.gz", "has_sig": false, "md5_digest": "244cec52e3af5bed85f65ea8671545f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 98134, "upload_time": "2018-11-08T19:13:29", "upload_time_iso_8601": "2018-11-08T19:13:29.450491Z", "url": "https://files.pythonhosted.org/packages/ee/a4/ef9046d6181f094cfdbed999935955b056f22da03045e806013a03cbe361/pnp-0.11.3.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "e10a89f84ccac09d9c0e74edf8ff615a", "sha256": "8c193ec164ec2cc48f2d172837902bc18cfad226287c5e085f9417a9c415c0d3"}, "downloads": -1, "filename": "pnp-0.12.0.tar.gz", "has_sig": false, "md5_digest": "e10a89f84ccac09d9c0e74edf8ff615a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 116215, "upload_time": "2018-12-30T15:37:46", "upload_time_iso_8601": "2018-12-30T15:37:46.093971Z", "url": "https://files.pythonhosted.org/packages/a0/c2/1e9abc92b97a17fc6f3ba94008402279befc49a60a8cd7f9baa89ffb7949/pnp-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "b919e95575d0fa8da7ce68c188f1c093", "sha256": "06478d694fdeb14d07d30cd04b4a76f7b24ec73433feecfa443413743be5ad21"}, "downloads": -1, "filename": "pnp-0.13.0.tar.gz", "has_sig": false, "md5_digest": "b919e95575d0fa8da7ce68c188f1c093", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 136043, "upload_time": "2019-01-08T07:00:14", "upload_time_iso_8601": "2019-01-08T07:00:14.487536Z", "url": "https://files.pythonhosted.org/packages/07/bd/3458e95805095bd4d180fe9ff8035f49d8c5ddf98a67adcbaa4ceb681074/pnp-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "35c310fd784009fcde296c1ac13ea846", "sha256": "6ab213eeb7247b2464a39fe6c731eba6a6a244a671ffc69bb16d9ccc10f55748"}, "downloads": -1, "filename": "pnp-0.14.0.tar.gz", "has_sig": false, "md5_digest": "35c310fd784009fcde296c1ac13ea846", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 149106, "upload_time": "2019-01-17T20:02:39", "upload_time_iso_8601": "2019-01-17T20:02:39.079905Z", "url": "https://files.pythonhosted.org/packages/65/34/c909e81a364ba0d884942e67f4fcedb8eebc80d0c2d4ef273c7fa3695dd0/pnp-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "c6d57c44c2835684afab4195fa028809", "sha256": "7892a280a35db4f04d713a452893452baa145c0b866fbbe55d9479fd10f1bdeb"}, "downloads": -1, "filename": "pnp-0.15.0.tar.gz", "has_sig": false, "md5_digest": "c6d57c44c2835684afab4195fa028809", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 164747, "upload_time": "2019-02-16T14:00:06", "upload_time_iso_8601": "2019-02-16T14:00:06.901628Z", "url": "https://files.pythonhosted.org/packages/19/ec/12ee2ff0dc803b23752162f08aa980a0879c48f9a83243badb252474170d/pnp-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "e29cae72ca2cdddd2031a6ea44ec5806", "sha256": "92b7b0fb09fa9e3d600f91fcb23a147963fa6c87468b5ec192721b8909410647"}, "downloads": -1, "filename": "pnp-0.16.0.tar.gz", "has_sig": false, "md5_digest": "e29cae72ca2cdddd2031a6ea44ec5806", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 182838, "upload_time": "2019-03-21T13:38:00", "upload_time_iso_8601": "2019-03-21T13:38:00.427770Z", "url": "https://files.pythonhosted.org/packages/92/ad/c0e326ba4f052ab83116319cf8b0fbf8695ecd3c48f4218357ff934e5d7d/pnp-0.16.0.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "dfa96daa4e28d665a86bac07a13f57be", "sha256": "1e643d421700fe1d6d0b518dfd7567a91f7b2629dc678a98486e24f649c5259f"}, "downloads": -1, "filename": "pnp-0.17.0.tar.gz", "has_sig": false, "md5_digest": "dfa96daa4e28d665a86bac07a13f57be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 197519, "upload_time": "2019-04-16T08:21:29", "upload_time_iso_8601": "2019-04-16T08:21:29.646802Z", "url": "https://files.pythonhosted.org/packages/a5/e6/abd7647e34f562183ab231f19e107ab0e7ed80c80f6b81d9b617e969ca01/pnp-0.17.0.tar.gz", "yanked": false}], "0.17.1": [{"comment_text": "", "digests": {"md5": "f83aad1f04a27db338e3dce6168fbfde", "sha256": "a86c7d8e60dcd13e33f620e124455f1d14e373f8d504d1b9e1a3a1b92c81a053"}, "downloads": -1, "filename": "pnp-0.17.1.tar.gz", "has_sig": false, "md5_digest": "f83aad1f04a27db338e3dce6168fbfde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 196586, "upload_time": "2019-05-04T19:14:46", "upload_time_iso_8601": "2019-05-04T19:14:46.065946Z", "url": "https://files.pythonhosted.org/packages/e4/58/6c15bbdeae4798b2beba2bb31ae9939364496d4863a6fb4b0f08883fc335/pnp-0.17.1.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "3f526a8aae5f970158f9b3042eb09141", "sha256": "43a858527443e52dd2bad6af93f626e65b04b886445f6ea29e38d8ffca8c0c90"}, "downloads": -1, "filename": "pnp-0.18.0.tar.gz", "has_sig": false, "md5_digest": "3f526a8aae5f970158f9b3042eb09141", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 200636, "upload_time": "2019-09-22T15:40:36", "upload_time_iso_8601": "2019-09-22T15:40:36.010815Z", "url": "https://files.pythonhosted.org/packages/09/15/1fc78285d1257478dc6d2fc1c5e2005a832ae0467759f08e3fb5c073129e/pnp-0.18.0.tar.gz", "yanked": false}], "0.19.0": [{"comment_text": "", "digests": {"md5": "31e744a80c03d908f60011401c8b064c", "sha256": "ff6e5754e8ca671cf1108b2ca8f78cc58ad35ff7e52bce44ed8f5d893f7beb14"}, "downloads": -1, "filename": "pnp-0.19.0.tar.gz", "has_sig": false, "md5_digest": "31e744a80c03d908f60011401c8b064c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 161203, "upload_time": "2019-10-19T10:42:33", "upload_time_iso_8601": "2019-10-19T10:42:33.954864Z", "url": "https://files.pythonhosted.org/packages/a1/94/e47f235a0d61f4d004b735c0d457c56a5f6ebe27553911b2fd16dd49de87/pnp-0.19.0.tar.gz", "yanked": false}], "0.19.1": [{"comment_text": "", "digests": {"md5": "ef8a6de91612a7fc9f5fcfc9d8dc329a", "sha256": "913f7a4dfbcd919106041a4d74ecedd285c1178a00f9ba02e345b3cde764bb91"}, "downloads": -1, "filename": "pnp-0.19.1.tar.gz", "has_sig": false, "md5_digest": "ef8a6de91612a7fc9f5fcfc9d8dc329a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 161775, "upload_time": "2019-10-23T18:08:38", "upload_time_iso_8601": "2019-10-23T18:08:38.753871Z", "url": "https://files.pythonhosted.org/packages/e5/e7/017a91a362a5967f46c69290174cd520be2bef1dace3035cd8c7b526dea9/pnp-0.19.1.tar.gz", "yanked": false}], "0.20.0": [{"comment_text": "", "digests": {"md5": "5bec65af550f3fc817dd352d2363ff4d", "sha256": "703cd32764d5786acb861eac7bb12f2d9b39ec1416c53db40194ca09b65cb7cb"}, "downloads": -1, "filename": "pnp-0.20.0.tar.gz", "has_sig": false, "md5_digest": "5bec65af550f3fc817dd352d2363ff4d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 167746, "upload_time": "2019-11-09T18:20:39", "upload_time_iso_8601": "2019-11-09T18:20:39.396163Z", "url": "https://files.pythonhosted.org/packages/a9/85/1110e99b47c7aaf6923abff259a0c82b6e90609e586df52958496badbd99/pnp-0.20.0.tar.gz", "yanked": false}], "0.20.1": [{"comment_text": "", "digests": {"md5": "dcb03f2456d7a2b697e54f96c593d2cf", "sha256": "c5197eba778285492db180dc6529cb5dc64a5ee5eeb405136ec31d130c4d2306"}, "downloads": -1, "filename": "pnp-0.20.1.tar.gz", "has_sig": false, "md5_digest": "dcb03f2456d7a2b697e54f96c593d2cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 167940, "upload_time": "2019-11-10T11:40:34", "upload_time_iso_8601": "2019-11-10T11:40:34.897935Z", "url": "https://files.pythonhosted.org/packages/44/86/966859e3fb15dcb1dd1ac599391cb50e45e58a99af0dbbb72e8c54efb0d5/pnp-0.20.1.tar.gz", "yanked": false}], "0.20.2": [{"comment_text": "", "digests": {"md5": "81cc6e39e82474402dc9221853bf5d9c", "sha256": "654d9060c89219ffb51edd3f93de856952ddb4577c59620105d98cd9db762910"}, "downloads": -1, "filename": "pnp-0.20.2.tar.gz", "has_sig": false, "md5_digest": "81cc6e39e82474402dc9221853bf5d9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 169196, "upload_time": "2019-11-19T19:10:22", "upload_time_iso_8601": "2019-11-19T19:10:22.387333Z", "url": "https://files.pythonhosted.org/packages/a1/42/a4564e958b0d2511a576023c4e919fe074167a243a16c786482e82185df9/pnp-0.20.2.tar.gz", "yanked": false}], "0.21.0": [{"comment_text": "", "digests": {"md5": "994ce150a30bae7693b25cf307707494", "sha256": "3eb7f5dd4efa1fcacf1a4533e9194ea5d0ce2d07c8fa84baa08e5f74ad0f4108"}, "downloads": -1, "filename": "pnp-0.21.0.tar.gz", "has_sig": false, "md5_digest": "994ce150a30bae7693b25cf307707494", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 173160, "upload_time": "2020-01-01T07:31:19", "upload_time_iso_8601": "2020-01-01T07:31:19.957808Z", "url": "https://files.pythonhosted.org/packages/97/92/540201f10f0f17803e2f4fee1b2a7405a743fe5911f919de33412de88bc9/pnp-0.21.0.tar.gz", "yanked": false}], "0.22.0": [{"comment_text": "", "digests": {"md5": "120c0d2dd1fd4d2e928dc650864f7bc9", "sha256": "1d8cbc57d5b950705177eaf9e567e0ec205291fa6753a1101d342941a3024173"}, "downloads": -1, "filename": "pnp-0.22.0.tar.gz", "has_sig": false, "md5_digest": "120c0d2dd1fd4d2e928dc650864f7bc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 179211, "upload_time": "2020-04-13T16:43:29", "upload_time_iso_8601": "2020-04-13T16:43:29.502374Z", "url": "https://files.pythonhosted.org/packages/fb/fc/120a9a19b1d276ef1afff84c9197c5d2f911f78499e03660eee7b8a35de8/pnp-0.22.0.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "705fac2cbb770049a6ef030ad385f1c1", "sha256": "5f9f57cb8f897960d7ef75ddf36642b5b4f3a3fb0df925c26be49b150b462377"}, "downloads": -1, "filename": "pnp-0.6.3.tar.gz", "has_sig": false, "md5_digest": "705fac2cbb770049a6ef030ad385f1c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34378, "upload_time": "2018-06-14T19:29:50", "upload_time_iso_8601": "2018-06-14T19:29:50.043571Z", "url": "https://files.pythonhosted.org/packages/51/20/4f447a5e55b224ed169ab26bc83d7be58ea9886b4a6a0c24978dac86df76/pnp-0.6.3.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "5a62cec200d76fada337391393f636b3", "sha256": "63624218583f2c9c98eb739bf16fe878647af9c4606b850409008245f6702b94"}, "downloads": -1, "filename": "pnp-0.7.0.tar.gz", "has_sig": false, "md5_digest": "5a62cec200d76fada337391393f636b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 38930, "upload_time": "2018-06-28T20:04:06", "upload_time_iso_8601": "2018-06-28T20:04:06.923179Z", "url": "https://files.pythonhosted.org/packages/3a/22/5fad32caef0f7a88a262e898ba8608960c1fc1064b23efcda56ed6c24676/pnp-0.7.0.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "b5cc09d013bc62138f74fc32077db44d", "sha256": "419e3b9eae68ee9ea74af337a7268e555ab94ca6f1cd9ad121cad02ffa1d96b8"}, "downloads": -1, "filename": "pnp-0.7.2.tar.gz", "has_sig": false, "md5_digest": "b5cc09d013bc62138f74fc32077db44d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42110, "upload_time": "2018-07-03T05:36:41", "upload_time_iso_8601": "2018-07-03T05:36:41.727189Z", "url": "https://files.pythonhosted.org/packages/f7/ae/008b3cb67cb6265f776954e06baba055b6aa3bf230c98e0231d974ee4fdb/pnp-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "14be0a457949a87d2243989a96c8d5f3", "sha256": "50b4cfd8deed3b8cfd320966d05020d22c117c621425d2c841b210a9672c81e0"}, "downloads": -1, "filename": "pnp-0.8.0.tar.gz", "has_sig": false, "md5_digest": "14be0a457949a87d2243989a96c8d5f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58777, "upload_time": "2018-07-05T18:41:34", "upload_time_iso_8601": "2018-07-05T18:41:34.466719Z", "url": "https://files.pythonhosted.org/packages/03/bb/3829909771233f5896f21d416e2d775a8b4ac0b2f1321a65b7bdd0d87641/pnp-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "a9716c5c87b545abfcfb60fb11bbe44b", "sha256": "e1e859be3a10ff6a6710f54f2828c1368fc7e834fcce5d9571de237290221541"}, "downloads": -1, "filename": "pnp-0.8.1.tar.gz", "has_sig": false, "md5_digest": "a9716c5c87b545abfcfb60fb11bbe44b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 70625, "upload_time": "2018-07-15T19:31:55", "upload_time_iso_8601": "2018-07-15T19:31:55.157692Z", "url": "https://files.pythonhosted.org/packages/38/73/72837452a61fa7cbca1d70351bc62c3f9769ce705dc10881e6b9525e73b4/pnp-0.8.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "abc2bbd52d284c76d28c4c66a9144312", "sha256": "a3a5c762f52fc70d912a82c74fb7e6b5d2fc6f6df2a91de95bfe4e63b3e0ea25"}, "downloads": -1, "filename": "pnp-0.9.0.tar.gz", "has_sig": false, "md5_digest": "abc2bbd52d284c76d28c4c66a9144312", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 73891, "upload_time": "2018-09-10T08:40:43", "upload_time_iso_8601": "2018-09-10T08:40:43.018154Z", "url": "https://files.pythonhosted.org/packages/7e/23/5d6b9013633eff6821166eb1da412f7c71a89079e7b8790406c7b0c897fa/pnp-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "120c0d2dd1fd4d2e928dc650864f7bc9", "sha256": "1d8cbc57d5b950705177eaf9e567e0ec205291fa6753a1101d342941a3024173"}, "downloads": -1, "filename": "pnp-0.22.0.tar.gz", "has_sig": false, "md5_digest": "120c0d2dd1fd4d2e928dc650864f7bc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 179211, "upload_time": "2020-04-13T16:43:29", "upload_time_iso_8601": "2020-04-13T16:43:29.502374Z", "url": "https://files.pythonhosted.org/packages/fb/fc/120a9a19b1d276ef1afff84c9197c5d2f911f78499e03660eee7b8a35de8/pnp-0.22.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:12 2020"}