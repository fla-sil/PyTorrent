{"info": {"author": "Justin Poliey", "author_email": "justin.d.poliey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Internet", "Topic :: Utilities"], "description": "====\njarg\n====\n\n.. image:: https://travis-ci.org/jdp/jarg.svg?branch=master\n    :target: https://travis-ci.org/jdp/jarg\n\n**jarg** is an encoding shorthand for your shell.\nIt is a command-line utility that makes generating data in formats like JSON, YAML, and form encoding easier in the shell.\n\nInstallation\n------------\n\nInstall from PyPI_::\n\n    $ pip install jarg\n\nUsage\n-----\n\nEach argument to **jarg** should be in the format of `name=value`.\nValues are interpreted as their closest native encoding value, and the default dialect is JSON.\nThe most common case is probably string names and values::\n\n    $ jarg foo=bar baz=quux\n    {\"foo\": \"bar\", \"baz\": \"quux\"}\n\nFloats and integers will work too::\n\n    $ jarg foo=10 bar=4.2\n    {\"foo\": 10, \"bar\": 4.2}\n\nThe value is optional.\nIf you leave it out, it is interpreted as ``null``::\n\n    $ jarg foo\n    {\"foo\": null}\n\nThe `name` portions have the same syntax and semantics as `HTML JSON`_ names::\n\n    $ jarg foo[]=bar foo[]=baz bar[baz]=quux\n    {\"foo\": [\"bar\", \"baz\"], \"bar\": {\"baz\": \"quux\"}}\n\nYou can also write literal values directly, using the `name:=value` syntax.\nThat lets you write things like booleans, lists, and explicit strings::\n\n    $ jarg foo:=true bar:=\\\"123\\\"\n    {\"foo\": true, \"bar\": \"123\"}\n    $ jarg foo:=[1,2,3]\n    {\"foo\": [1, 2, 3]}\n\n\nDialects\n--------\n\nThe default dialect is JSON, and includes support for YAML and form encoding.\n\nTo use the YAML dialect, use the ``-y``/``--yaml`` switch::\n\n    $ jarg -y name=jarg type=\"cli tool\" traits[]=dope traits[]=rad\n    ---\n    name: jarg\n    traits: [dope, rad]\n    type: cli tool\n\nYou can switch to the form encoding dialect with the ``-f``/``--form`` switch::\n\n    $ jarg -f foo=bar baz=\"jarg is dope\"\n    foo=bar&baz=jarg+is+dope\n\n.. _PyPI: http://pypi.python.org/\n.. _`HTML JSON`: http://www.w3.org/TR/html-json-forms/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jdp/jarg", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "jarg", "package_url": "https://pypi.org/project/jarg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jarg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/jdp/jarg"}, "release_url": "https://pypi.org/project/jarg/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "A shorthand data serialization/encoding tool", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jdp/jarg\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jdp/jarg.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f36a330cc62dab9af84ee1a22f71de2c8330e037/68747470733a2f2f7472617669732d63692e6f72672f6a64702f6a6172672e7376673f6272616e63683d6d6173746572\"></a>\n<p><strong>jarg</strong> is an encoding shorthand for your shell.\nIt is a command-line utility that makes generating data in formats like JSON, YAML, and form encoding easier in the shell.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from <a href=\"http://pypi.python.org/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install jarg\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Each argument to <strong>jarg</strong> should be in the format of <cite>name=value</cite>.\nValues are interpreted as their closest native encoding value, and the default dialect is JSON.\nThe most common case is probably string names and values:</p>\n<pre>$ jarg foo=bar baz=quux\n{\"foo\": \"bar\", \"baz\": \"quux\"}\n</pre>\n<p>Floats and integers will work too:</p>\n<pre>$ jarg foo=10 bar=4.2\n{\"foo\": 10, \"bar\": 4.2}\n</pre>\n<p>The value is optional.\nIf you leave it out, it is interpreted as <tt>null</tt>:</p>\n<pre>$ jarg foo\n{\"foo\": null}\n</pre>\n<p>The <cite>name</cite> portions have the same syntax and semantics as <a href=\"http://www.w3.org/TR/html-json-forms/\" rel=\"nofollow\">HTML JSON</a> names:</p>\n<pre>$ jarg foo[]=bar foo[]=baz bar[baz]=quux\n{\"foo\": [\"bar\", \"baz\"], \"bar\": {\"baz\": \"quux\"}}\n</pre>\n<p>You can also write literal values directly, using the <cite>name:=value</cite> syntax.\nThat lets you write things like booleans, lists, and explicit strings:</p>\n<pre>$ jarg foo:=true bar:=\\\"123\\\"\n{\"foo\": true, \"bar\": \"123\"}\n$ jarg foo:=[1,2,3]\n{\"foo\": [1, 2, 3]}\n</pre>\n</div>\n<div id=\"dialects\">\n<h2>Dialects</h2>\n<p>The default dialect is JSON, and includes support for YAML and form encoding.</p>\n<p>To use the YAML dialect, use the <tt><span class=\"pre\">-y</span></tt>/<tt><span class=\"pre\">--yaml</span></tt> switch:</p>\n<pre>$ jarg -y name=jarg type=\"cli tool\" traits[]=dope traits[]=rad\n---\nname: jarg\ntraits: [dope, rad]\ntype: cli tool\n</pre>\n<p>You can switch to the form encoding dialect with the <tt><span class=\"pre\">-f</span></tt>/<tt><span class=\"pre\">--form</span></tt> switch:</p>\n<pre>$ jarg -f foo=bar baz=\"jarg is dope\"\nfoo=bar&amp;baz=jarg+is+dope\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1333030, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "dfaeebae342d33ed478a0d0b49293351", "sha256": "52edbcd4bd08a5eb96f1681e06738b3bb9f5acf2ba70917597ac016c16c761fe"}, "downloads": -1, "filename": "jarg-0.1.2.tar.gz", "has_sig": false, "md5_digest": "dfaeebae342d33ed478a0d0b49293351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3192, "upload_time": "2014-11-19T05:46:01", "upload_time_iso_8601": "2014-11-19T05:46:01.589298Z", "url": "https://files.pythonhosted.org/packages/94/02/3ad93ce8c891d19e55afaf72a18fef1449fb584e9f2118ffe52329f07d13/jarg-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "74e56c9a00acc48d996af54433e15a66", "sha256": "cb7b6d39ab18074906bd64264b4e4f43eacb8180e69a58cda51d0979ab025ba6"}, "downloads": -1, "filename": "jarg-0.2.0.tar.gz", "has_sig": false, "md5_digest": "74e56c9a00acc48d996af54433e15a66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3311, "upload_time": "2014-11-19T17:54:29", "upload_time_iso_8601": "2014-11-19T17:54:29.485514Z", "url": "https://files.pythonhosted.org/packages/f7/54/bec2602cece83e9228ed032849e531914407b9c0c21a9defb5f78012bf82/jarg-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bfa789ec12af5f24c1910fb5cdb59060", "sha256": "3383fc95d737f476ab3f931343692c435dd8aef178a800bcb2b4abe309009210"}, "downloads": -1, "filename": "jarg-0.2.1.tar.gz", "has_sig": false, "md5_digest": "bfa789ec12af5f24c1910fb5cdb59060", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3265, "upload_time": "2014-11-19T19:22:19", "upload_time_iso_8601": "2014-11-19T19:22:19.128869Z", "url": "https://files.pythonhosted.org/packages/89/da/52d8d9bb96f3b68dafcdf14a7a366aa226e724e43637b8d7838566a27a96/jarg-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "50ecd8dbbc65c5c66dee6f7bf27f59d6", "sha256": "e51ad6b8ccaaf16e56454a42471d88e0dd8fbf07105157ad3f03b4c5aafbc59b"}, "downloads": -1, "filename": "jarg-0.3.0.tar.gz", "has_sig": false, "md5_digest": "50ecd8dbbc65c5c66dee6f7bf27f59d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4245, "upload_time": "2014-11-27T09:31:27", "upload_time_iso_8601": "2014-11-27T09:31:27.522966Z", "url": "https://files.pythonhosted.org/packages/9d/13/492020c9bf893fda36c53de145462166a84d0e5406dfa4016cd1af5ec6c6/jarg-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3ae2b8fe8beb986281cce4fa45ba5ef0", "sha256": "533567c6fdc6b0aeae1abba228313d7db13fe57a2bcd38af4f4b34e4a84c3db1"}, "downloads": -1, "filename": "jarg-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3ae2b8fe8beb986281cce4fa45ba5ef0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4806, "upload_time": "2014-12-06T05:45:10", "upload_time_iso_8601": "2014-12-06T05:45:10.419212Z", "url": "https://files.pythonhosted.org/packages/9b/ea/d23dcb21a9ab6341c858504d2ff031a93dadc2872cf2d289c0ed59161cbb/jarg-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c5ee1706d4abb98a4cb3a18614fec7f0", "sha256": "053c9999897b0e2c22d89b65d7c670294b4125f1f1750de376bb13e9e856dcf1"}, "downloads": -1, "filename": "jarg-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c5ee1706d4abb98a4cb3a18614fec7f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4783, "upload_time": "2014-12-06T05:51:16", "upload_time_iso_8601": "2014-12-06T05:51:16.258572Z", "url": "https://files.pythonhosted.org/packages/5e/47/9fc5a51cb7fd48fa0fd34b853368560b427bfe1e7985e29df067cf459940/jarg-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c5ee1706d4abb98a4cb3a18614fec7f0", "sha256": "053c9999897b0e2c22d89b65d7c670294b4125f1f1750de376bb13e9e856dcf1"}, "downloads": -1, "filename": "jarg-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c5ee1706d4abb98a4cb3a18614fec7f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4783, "upload_time": "2014-12-06T05:51:16", "upload_time_iso_8601": "2014-12-06T05:51:16.258572Z", "url": "https://files.pythonhosted.org/packages/5e/47/9fc5a51cb7fd48fa0fd34b853368560b427bfe1e7985e29df067cf459940/jarg-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:08 2020"}