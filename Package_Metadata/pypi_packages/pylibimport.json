{"info": {"author": "Justin Engel", "author_email": "jtengel08@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "===========\npylibimport\n===========\nPython utility for importing packages with the same name, but different version.\n\nVersionImporter Attributes:\n  * import_dir - Directory to find import names and files\n  * target_dir - Directory to save/install modules by names and version\n  * install_dependencies - If True .whl files will install dependencies to the target_dir\n  * reset_modules - Reset sys.modules after every import (Will still add custom_0_0_0).\n\n   * This helps prevent dependencies from being saved to sys.modules\n\n  * modules - dictionary of name and version modules that have been imported.\n\n\nImport options:\n  * Module import - import normal .py files.\n  * Zip import - import .zip files or .tar.gz sdist files.\n  * Wheel import - import .whl files. This really installs them to a target dir then imports it.\n\n\nExample\n=======\n\nSimple import example.\n\n.. code-block:: python\n\n    import pylibimport\n\n    importer = pylibimport.VersionImporter(target_dir='./sub/target_dir')\n\n    custom = importer.import_module('./sub/custom.py')\n    print(custom.run_custom())\n    # 'hello custom1'\n\n    # Remove the saved module from the target_dir\n    importer.delete_module(custom)\n\n    # Give a version number to the module\n    custom = importer.import_module('./sub/custom.py', '1.0.0')\n    print(custom.run_custom())\n    # 'hello custom1'\n\n    # pylibimport always adds an import_name to sys.modules (custom 1.0.0 becomes custom_1_0_0)\n    import custom_1_0_0\n    print(custom_1_0_0.run_custom())\n\n\nMultiple Files\n~~~~~~~~~~~~~~\n\nThis library also works across multiple files.\n\n.. code-block:: python\n\n    # prep_modules.py\n    import pylibimport\n\n    importer = pylibimport.VersionImporter(target_dir='./sub/target_dir')\n    importer.import_module('./sub/custom.py', '1.0.0')  # Give a version number to the module\n    importer.import_module('./sub/import_dir/custom.py', '0.0.0')\n\n\nThe prep_modules.py uses pylibimport to import modules with version into sys.modules\nallowing imports from other files.\n\n.. code-block:: python\n\n    # multi_modules.py\n    import prep_modules  # Uses pylibimport for custom_1_0_0 and custom_0_0_0\n\n    import custom_1_0_0\n    print(custom_1_0_0.run_custom())\n\n    import custom_0_0_0\n    print(custom_0_0_0.run_custom())\n\n    # This actually works! ... code completion is not going to happen.\n    # Python has a bunch of import hooks (ZipImporter) which could make this better?\n\n\nProblems\n========\n\nMost importing works without any help. You just add the path to sys.path and import.\nYou can also easily import a zip file by adding the zip file to the path and importing it.\nA .whl file could just be renamed .zip and import like the zip file.\n\nThe biggest problem is C extensions. C extensions require you to extract the .pyd from the .zip before importing.\nOriginally I was going to automate only extracting the .pyd files. It is much easier to extract the entire zip file or\ninstall the .whl file. This also lets you extract/install once and leave it on your system, making imports easier later.\n\nThis approach also lets you separate things by version number which may be useful.\n\nNumpy\n~~~~~\n\nDon't try this with Numpy or .whl files that want to install Numpy. Numpy is compiled against other libraries\nand the pathing gets messed up. I have not had any success importing numpy without a regular install.\nI tried a lot of different ways on Windows 10 with Python 3.8 - 64 Bit.\nI think I even tried Numpy found at https://www.lfd.uci.edu/~gohlke/pythonlibs/.\n\n\nFuture\n======\n\nI would like to learn more about python's import system. I would like to research how zipimport\nworks with the finder and loader. Unfortunately, I know myself, and it's probably not going to happen.\nIn the end Python will eventually add version import support anyway. Future Python syntax will probably be\nlike qml :code:`import custom 1.0.0`.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/justengel/pylibimport/archive/v0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justengel/pylibimport", "keywords": "python version import libimport library version_import", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylibimport", "package_url": "https://pypi.org/project/pylibimport/", "platform": "any", "project_url": "https://pypi.org/project/pylibimport/", "project_urls": {"Download": "https://github.com/justengel/pylibimport/archive/v0.0.1.tar.gz", "Homepage": "https://github.com/justengel/pylibimport"}, "release_url": "https://pypi.org/project/pylibimport/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Python utility for importing packages with the same name, but different version.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python utility for importing packages with the same name, but different version.</p>\n<dl>\n<dt>VersionImporter Attributes:</dt>\n<dd><ul>\n<li>import_dir - Directory to find import names and files</li>\n<li>target_dir - Directory to save/install modules by names and version</li>\n<li>install_dependencies - If True .whl files will install dependencies to the target_dir</li>\n<li>reset_modules - Reset sys.modules after every import (Will still add custom_0_0_0).</li>\n</ul>\n<blockquote>\n<ul>\n<li>This helps prevent dependencies from being saved to sys.modules</li>\n</ul>\n</blockquote>\n<ul>\n<li>modules - dictionary of name and version modules that have been imported.</li>\n</ul>\n</dd>\n<dt>Import options:</dt>\n<dd><ul>\n<li>Module import - import normal .py files.</li>\n<li>Zip import - import .zip files or .tar.gz sdist files.</li>\n<li>Wheel import - import .whl files. This really installs them to a target dir then imports it.</li>\n</ul>\n</dd>\n</dl>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Simple import example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pylibimport</span>\n\n<span class=\"n\">importer</span> <span class=\"o\">=</span> <span class=\"n\">pylibimport</span><span class=\"o\">.</span><span class=\"n\">VersionImporter</span><span class=\"p\">(</span><span class=\"n\">target_dir</span><span class=\"o\">=</span><span class=\"s1\">'./sub/target_dir'</span><span class=\"p\">)</span>\n\n<span class=\"n\">custom</span> <span class=\"o\">=</span> <span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s1\">'./sub/custom.py'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">run_custom</span><span class=\"p\">())</span>\n<span class=\"c1\"># 'hello custom1'</span>\n\n<span class=\"c1\"># Remove the saved module from the target_dir</span>\n<span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">delete_module</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Give a version number to the module</span>\n<span class=\"n\">custom</span> <span class=\"o\">=</span> <span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s1\">'./sub/custom.py'</span><span class=\"p\">,</span> <span class=\"s1\">'1.0.0'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"o\">.</span><span class=\"n\">run_custom</span><span class=\"p\">())</span>\n<span class=\"c1\"># 'hello custom1'</span>\n\n<span class=\"c1\"># pylibimport always adds an import_name to sys.modules (custom 1.0.0 becomes custom_1_0_0)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">custom_1_0_0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">custom_1_0_0</span><span class=\"o\">.</span><span class=\"n\">run_custom</span><span class=\"p\">())</span>\n</pre>\n<div id=\"multiple-files\">\n<h3>Multiple Files</h3>\n<p>This library also works across multiple files.</p>\n<pre><span class=\"c1\"># prep_modules.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pylibimport</span>\n\n<span class=\"n\">importer</span> <span class=\"o\">=</span> <span class=\"n\">pylibimport</span><span class=\"o\">.</span><span class=\"n\">VersionImporter</span><span class=\"p\">(</span><span class=\"n\">target_dir</span><span class=\"o\">=</span><span class=\"s1\">'./sub/target_dir'</span><span class=\"p\">)</span>\n<span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s1\">'./sub/custom.py'</span><span class=\"p\">,</span> <span class=\"s1\">'1.0.0'</span><span class=\"p\">)</span>  <span class=\"c1\"># Give a version number to the module</span>\n<span class=\"n\">importer</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s1\">'./sub/import_dir/custom.py'</span><span class=\"p\">,</span> <span class=\"s1\">'0.0.0'</span><span class=\"p\">)</span>\n</pre>\n<p>The prep_modules.py uses pylibimport to import modules with version into sys.modules\nallowing imports from other files.</p>\n<pre><span class=\"c1\"># multi_modules.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">prep_modules</span>  <span class=\"c1\"># Uses pylibimport for custom_1_0_0 and custom_0_0_0</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">custom_1_0_0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">custom_1_0_0</span><span class=\"o\">.</span><span class=\"n\">run_custom</span><span class=\"p\">())</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">custom_0_0_0</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">custom_0_0_0</span><span class=\"o\">.</span><span class=\"n\">run_custom</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># This actually works! ... code completion is not going to happen.</span>\n<span class=\"c1\"># Python has a bunch of import hooks (ZipImporter) which could make this better?</span>\n</pre>\n</div>\n</div>\n<div id=\"problems\">\n<h2>Problems</h2>\n<p>Most importing works without any help. You just add the path to sys.path and import.\nYou can also easily import a zip file by adding the zip file to the path and importing it.\nA .whl file could just be renamed .zip and import like the zip file.</p>\n<p>The biggest problem is C extensions. C extensions require you to extract the .pyd from the .zip before importing.\nOriginally I was going to automate only extracting the .pyd files. It is much easier to extract the entire zip file or\ninstall the .whl file. This also lets you extract/install once and leave it on your system, making imports easier later.</p>\n<p>This approach also lets you separate things by version number which may be useful.</p>\n<div id=\"numpy\">\n<h3>Numpy</h3>\n<p>Don\u2019t try this with Numpy or .whl files that want to install Numpy. Numpy is compiled against other libraries\nand the pathing gets messed up. I have not had any success importing numpy without a regular install.\nI tried a lot of different ways on Windows 10 with Python 3.8 - 64 Bit.\nI think I even tried Numpy found at <a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"nofollow\">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>.</p>\n</div>\n</div>\n<div id=\"future\">\n<h2>Future</h2>\n<p>I would like to learn more about python\u2019s import system. I would like to research how zipimport\nworks with the finder and loader. Unfortunately, I know myself, and it\u2019s probably not going to happen.\nIn the end Python will eventually add version import support anyway. Future Python syntax will probably be\nlike qml <code>import custom 1.0.0</code>.</p>\n</div>\n\n          </div>"}, "last_serial": 7161616, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ef2c959a040a9c6a7d591fe351c9f2f9", "sha256": "8cde72cf651ff8926095717594d742cd9aed33f69d925e0ff36dcd56e9e09433"}, "downloads": -1, "filename": "pylibimport-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef2c959a040a9c6a7d591fe351c9f2f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16623, "upload_time": "2020-05-04T06:09:30", "upload_time_iso_8601": "2020-05-04T06:09:30.408068Z", "url": "https://files.pythonhosted.org/packages/bc/1e/9f10f9459367b86286622a750d245f021e1ca18818bbbcbc5bd79e7d5a86/pylibimport-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "166ba04cf30e4f80b494ba9e77578b8d", "sha256": "73cc576d0598dae48ed99c42219d532675bd496dfe42e8b27d40548456a304f5"}, "downloads": -1, "filename": "pylibimport-0.0.1.tar.gz", "has_sig": false, "md5_digest": "166ba04cf30e4f80b494ba9e77578b8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10792, "upload_time": "2020-05-04T06:08:31", "upload_time_iso_8601": "2020-05-04T06:08:31.566216Z", "url": "https://files.pythonhosted.org/packages/b9/14/7b815b83709dcfa5ce0f32f1f77cdf7ba0b44b095710e9d99842820ec6ed/pylibimport-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef2c959a040a9c6a7d591fe351c9f2f9", "sha256": "8cde72cf651ff8926095717594d742cd9aed33f69d925e0ff36dcd56e9e09433"}, "downloads": -1, "filename": "pylibimport-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ef2c959a040a9c6a7d591fe351c9f2f9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16623, "upload_time": "2020-05-04T06:09:30", "upload_time_iso_8601": "2020-05-04T06:09:30.408068Z", "url": "https://files.pythonhosted.org/packages/bc/1e/9f10f9459367b86286622a750d245f021e1ca18818bbbcbc5bd79e7d5a86/pylibimport-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "166ba04cf30e4f80b494ba9e77578b8d", "sha256": "73cc576d0598dae48ed99c42219d532675bd496dfe42e8b27d40548456a304f5"}, "downloads": -1, "filename": "pylibimport-0.0.1.tar.gz", "has_sig": false, "md5_digest": "166ba04cf30e4f80b494ba9e77578b8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10792, "upload_time": "2020-05-04T06:08:31", "upload_time_iso_8601": "2020-05-04T06:08:31.566216Z", "url": "https://files.pythonhosted.org/packages/b9/14/7b815b83709dcfa5ce0f32f1f77cdf7ba0b44b095710e9d99842820ec6ed/pylibimport-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:10 2020"}