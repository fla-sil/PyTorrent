{"info": {"author": "Esther Vendrell", "author_email": "esvemira@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Projest\n\nMade by [Esther Vendrell]\n\nLast updated: July 2019\n\n## Introduction\nProjest is my first program. Consist in introduce the name of a protein and obtain information about that as the most similar protein, the differents models it has or the atoms. All the information you can obtain comes from: https://www.rcsb.org/\n\n## Description\nThe main file is protein.py. In spite of main functions are in extract_atoms_information.py - load protein pdb or load protein fasta - the rest of functions are in protein. \nIn this way we will have functions directly linked to protein like:\nProtein(\"2ki5\").get_similar_protein() -> We will obtain fasta file, pdb file, all the information of protein in mongodb (in the init) and the similar protein of each chain. \n\n## Functions\nThere are 7 functions:\n  - get_sequence_aminoacids: in Protein. Returns a list with chain and the sequence of aminoacids (1 letter). From fasta file.\n  - get_chain_list: in Protein. Return a list with the differents chains there are.\n  - get_aminoacid_list: in Protein. Return a list with the differents aminoacids (3 letters) with the differents sequence numbers classified in chains\n  - get_similar_protein: in Protein. Return a dictionary with differents chains and the most similar protein of that chain of the protein.\n  - general_dictionary: in Protein. Any return. It inserts in mongodb all the information classified. It is not callable.\n  - load_protein_pdb: in extract_atoms_information. Returns the pdb file of the protein. Download the pdb file of the protein in the same directory of the files. \n  - load_protein_fasta: in extract_atoms_information. Returns the fasta file of the protein.Download the fasta file of the protein in the same directory of the files. \n\n## MongoDB\nI could have used an other structure to upload all the information to MongoDB:\nProtein - Model - residue_sequence_number - atom_number - information atom. \n\nClass Model:\n    def __init__(self, model_identifier, model_dict):\n        self.model_identifier = model_identifier\n        self.chain_list = []\n        for chain_identifier, value in model_dict:\n            self.chain_list.append(Chain(chain_identifier))\n\nIn this way we obtain information from mongodb. This would be easier but I haven't had enough time since I have realized.\n\nThe structure of my project is:\nPortein - Model - residue_name - residue_sequence_number - element_name - atom_name - information atom. \n\nThis is more easy to understand the information we are getting and classified it. This is why I have used this structure. Visually is better but for obtaining this information internally it is worse.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sthhher/projest", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "projest", "package_url": "https://pypi.org/project/projest/", "platform": "", "project_url": "https://pypi.org/project/projest/", "project_urls": {"Homepage": "https://github.com/sthhher/projest"}, "release_url": "https://pypi.org/project/projest/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "A small example package", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Projest</h1>\n<p>Made by [Esther Vendrell]</p>\n<p>Last updated: July 2019</p>\n<h2>Introduction</h2>\n<p>Projest is my first program. Consist in introduce the name of a protein and obtain information about that as the most similar protein, the differents models it has or the atoms. All the information you can obtain comes from: <a href=\"https://www.rcsb.org/\" rel=\"nofollow\">https://www.rcsb.org/</a></p>\n<h2>Description</h2>\n<p>The main file is protein.py. In spite of main functions are in extract_atoms_information.py - load protein pdb or load protein fasta - the rest of functions are in protein.\nIn this way we will have functions directly linked to protein like:\nProtein(\"2ki5\").get_similar_protein() -&gt; We will obtain fasta file, pdb file, all the information of protein in mongodb (in the init) and the similar protein of each chain.</p>\n<h2>Functions</h2>\n<p>There are 7 functions:</p>\n<ul>\n<li>get_sequence_aminoacids: in Protein. Returns a list with chain and the sequence of aminoacids (1 letter). From fasta file.</li>\n<li>get_chain_list: in Protein. Return a list with the differents chains there are.</li>\n<li>get_aminoacid_list: in Protein. Return a list with the differents aminoacids (3 letters) with the differents sequence numbers classified in chains</li>\n<li>get_similar_protein: in Protein. Return a dictionary with differents chains and the most similar protein of that chain of the protein.</li>\n<li>general_dictionary: in Protein. Any return. It inserts in mongodb all the information classified. It is not callable.</li>\n<li>load_protein_pdb: in extract_atoms_information. Returns the pdb file of the protein. Download the pdb file of the protein in the same directory of the files.</li>\n<li>load_protein_fasta: in extract_atoms_information. Returns the fasta file of the protein.Download the fasta file of the protein in the same directory of the files.</li>\n</ul>\n<h2>MongoDB</h2>\n<p>I could have used an other structure to upload all the information to MongoDB:\nProtein - Model - residue_sequence_number - atom_number - information atom.</p>\n<p>Class Model:\ndef <strong>init</strong>(self, model_identifier, model_dict):\nself.model_identifier = model_identifier\nself.chain_list = []\nfor chain_identifier, value in model_dict:\nself.chain_list.append(Chain(chain_identifier))</p>\n<p>In this way we obtain information from mongodb. This would be easier but I haven't had enough time since I have realized.</p>\n<p>The structure of my project is:\nPortein - Model - residue_name - residue_sequence_number - element_name - atom_name - information atom.</p>\n<p>This is more easy to understand the information we are getting and classified it. This is why I have used this structure. Visually is better but for obtaining this information internally it is worse.</p>\n\n          </div>"}, "last_serial": 5567568, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "de131e7729ae9d9e13d187a998dd4c1b", "sha256": "5440cd942b6ee20220fae5d3715259f7bdc73d5907e11ef167d4f48a2aebd411"}, "downloads": -1, "filename": "projest-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "de131e7729ae9d9e13d187a998dd4c1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9062, "upload_time": "2019-07-22T13:38:47", "upload_time_iso_8601": "2019-07-22T13:38:47.158653Z", "url": "https://files.pythonhosted.org/packages/c4/f5/2bb2ab4a66cab169d3d7f694fd30859c3d5fd68d1bda0ecdc1073fd0286e/projest-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45cc3734657eaab43d3a691951b6a908", "sha256": "093ddb2bc6ccadc88bfb535b159f702b30091c58968a5a3ce87836b5f190de7f"}, "downloads": -1, "filename": "projest-0.0.5.tar.gz", "has_sig": false, "md5_digest": "45cc3734657eaab43d3a691951b6a908", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7182, "upload_time": "2019-07-22T13:38:49", "upload_time_iso_8601": "2019-07-22T13:38:49.784848Z", "url": "https://files.pythonhosted.org/packages/74/a6/7b0b818cd609d3a43fd2b070b236c2e5f057784371d916755c94623345d9/projest-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ca662967ce1b6cc656156fe2aee070ff", "sha256": "5c6b3e245524c79c0bf745f2a770435f141c0e1ecb52cd23eb32c835af2d2c56"}, "downloads": -1, "filename": "projest-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ca662967ce1b6cc656156fe2aee070ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9066, "upload_time": "2019-07-22T13:45:32", "upload_time_iso_8601": "2019-07-22T13:45:32.002151Z", "url": "https://files.pythonhosted.org/packages/87/fe/5131d3748a8f46f7e460a34012e27ae268228a162106faf4a32de227a791/projest-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bf27f4f1dd06451dfb21a45e66e7bb1", "sha256": "319192b75dbe49b195f0f2c5830c6c9f42e92e1662219f2d822331275d3e2b25"}, "downloads": -1, "filename": "projest-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4bf27f4f1dd06451dfb21a45e66e7bb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7179, "upload_time": "2019-07-22T13:45:33", "upload_time_iso_8601": "2019-07-22T13:45:33.482786Z", "url": "https://files.pythonhosted.org/packages/1b/6a/ec9edda6ef4d496b54e35a0409e1090f4c9e5b358b92c1cac510356f0e57/projest-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "6ca12135c4dfde639cf6ed433af50376", "sha256": "45afdb3e3f26c70d3ed2283f38105447c82930ef74a6443b918c13489a2ad4ff"}, "downloads": -1, "filename": "projest-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6ca12135c4dfde639cf6ed433af50376", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9064, "upload_time": "2019-07-22T13:51:45", "upload_time_iso_8601": "2019-07-22T13:51:45.087830Z", "url": "https://files.pythonhosted.org/packages/3c/aa/29c9ac9cab04066a90121fa4532835b924d17c8db1786e9ae863a9960698/projest-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c419d5b6bb587e70ed2408ff38a593c", "sha256": "94679168e3543348e07c84f9c534e64ff367909497e3b46d5e9a77119d0b559f"}, "downloads": -1, "filename": "projest-0.0.7.tar.gz", "has_sig": false, "md5_digest": "0c419d5b6bb587e70ed2408ff38a593c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7185, "upload_time": "2019-07-22T13:51:46", "upload_time_iso_8601": "2019-07-22T13:51:46.667773Z", "url": "https://files.pythonhosted.org/packages/33/a7/fe258f6ca3a9f6e4e425b5f2d67fb8d530e0d0c9fd6293f0dbe4193381e6/projest-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ca12135c4dfde639cf6ed433af50376", "sha256": "45afdb3e3f26c70d3ed2283f38105447c82930ef74a6443b918c13489a2ad4ff"}, "downloads": -1, "filename": "projest-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6ca12135c4dfde639cf6ed433af50376", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9064, "upload_time": "2019-07-22T13:51:45", "upload_time_iso_8601": "2019-07-22T13:51:45.087830Z", "url": "https://files.pythonhosted.org/packages/3c/aa/29c9ac9cab04066a90121fa4532835b924d17c8db1786e9ae863a9960698/projest-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c419d5b6bb587e70ed2408ff38a593c", "sha256": "94679168e3543348e07c84f9c534e64ff367909497e3b46d5e9a77119d0b559f"}, "downloads": -1, "filename": "projest-0.0.7.tar.gz", "has_sig": false, "md5_digest": "0c419d5b6bb587e70ed2408ff38a593c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7185, "upload_time": "2019-07-22T13:51:46", "upload_time_iso_8601": "2019-07-22T13:51:46.667773Z", "url": "https://files.pythonhosted.org/packages/33/a7/fe258f6ca3a9f6e4e425b5f2d67fb8d530e0d0c9fd6293f0dbe4193381e6/projest-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:15 2020"}