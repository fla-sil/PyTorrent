{"info": {"author": "Jordan Milne", "author_email": "advocate@saynotolinux.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Security"], "description": ".. role:: python(code)\n   :language: python\n\nAdvocate\n========\n\n.. image:: https://travis-ci.org/JordanMilne/Advocate.svg?branch=master\n    :target: https://travis-ci.org/JordanMilne/Advocate/\n.. image:: https://codecov.io/github/JordanMilne/Advocate/coverage.svg?branch=master\n    :target: https://codecov.io/github/JordanMilne/Advocate\n.. image:: https://img.shields.io/pypi/pyversions/advocate.svg\n.. image:: https://img.shields.io/pypi/v/advocate.svg\n    :target: https://pypi.python.org/pypi/advocate\n\n\nAdvocate is a set of tools based around the `requests library <https://github.com/kennethreitz/requests>`_ for safely making\nHTTP requests on behalf of a third party. Specifically, it aims to prevent \ncommon techniques that enable `SSRF attacks <https://cwe.mitre.org/data/definitions/918.html>`_. \n\nAdvocate was inspired by `fin1te's SafeCurl project <https://github.com/fin1te/safecurl>`_.\n\nInstallation\n============\n\n.. code-block:: bash\n\n    pip install advocate\n\nAdvocate is officially supported on CPython 2.7+, CPython 3.4+ and PyPy 2. PyPy 3 may work as well, but \nyou'll need a copy of the ipaddress module from elsewhere.\n\nSee it in action\n================\n\nIf you want to try out Advocate to see what kind of things it catches, there's a `test site up on advocate.saynotolinux.com <http://advocate.saynotolinux.com/>`_.\n\nExamples\n========\n\nAdvocate is more-or-less a drop-in replacement for requests. In most cases you can just replace \"requests\" with\n\"advocate\" where necessary and be good to go:\n\n.. code-block:: python\n\n    >>> import advocate\n    >>> print advocate.get(\"http://google.com/\")\n    <Response [200]>\n\nAdvocate also provides a subclassed :python:`requests.Session` with sane defaults for\nvalidation already set up:\n\n.. code-block:: python\n\n    >>> import advocate\n    >>> sess = advocate.Session()\n    >>> print sess.get(\"http://google.com/\")\n    <Response [200]>\n    >>> print sess.get(\"http://localhost/\")\n    advocate.exceptions.UnacceptableAddressException: ('localhost', 80)\n\nAll of the wrapped request functions accept a :python:`validator` kwarg where you\ncan set additional rules:\n\n.. code-block:: python\n\n    >>> import advocate\n    >>> validator = advocate.AddrValidator(hostname_blacklist={\"*.museum\",})\n    >>> print advocate.get(\"http://educational.MUSEUM/\", validator=validator)\n    advocate.exceptions.UnacceptableAddressException: educational.MUSEUM\n\nIf you require more advanced rules than the defaults, but don't want to have to pass\nthe validator kwarg everywhere, there's :python:`RequestsAPIWrapper` . You can\ndefine a wrapper in a common file and import it instead of advocate:\n\n.. code-block:: python\n\n    >>> from advocate import AddrValidator, RequestsAPIWrapper\n    >>> from advocate.packages import ipaddress\n    >>> dougs_advocate = RequestsAPIWrapper(AddrValidator(ip_blacklist={\n    ...     # Contains data incomprehensible to mere mortals\n    ...     ipaddress.ip_network(\"42.42.42.42/32\")\n    ... }))\n    >>> print dougs_advocate.get(\"http://42.42.42.42/\")\n    advocate.exceptions.UnacceptableAddressException: ('42.42.42.42', 80)\n\n\nOther than that, you can do just about everything with Advocate that you can\nwith an unwrapped requests. Advocate passes requests' test suite with the\nexception of tests that require :python:`Session.mount()`.\n\nConditionally bypassing protection\n==================================\n\nIf you want to allow certain users to bypass Advocate's restrictions, just\nuse plain 'ol requests by doing something like:\n\n.. code-block:: python\n\n    if user == \"mr_skeltal\":\n        requests_module = requests\n    else:\n        requests_module = advocate\n    resp = requests_module.get(\"http://example.com/doot_doot\")\n\n\nrequests-futures support\n========================\n\nA thin wrapper around `requests-futures <https://github.com/ross/requests-futures>`_ is provided to ease writing async-friendly code:\n\n.. code-block:: python\n\n    >>> from advocate.futures import FuturesSession\n    >>> sess = FuturesSession()\n    >>> fut = sess.get(\"http://example.com/\")\n    >>> fut\n    <Future at 0x10c717f28 state=finished returned Response>\n    >>> fut.result()\n    <Response [200]>\n\nYou can do basically everything you can do with regular :python:`FuturesSession` s and :python:`advocate.Session` s:\n\n.. code-block:: python\n\n    >>> from advocate import AddrValidator\n    >>> from advocate.futures import FuturesSession\n    >>> sess = FuturesSession(max_workers=20, validator=AddrValidator(hostname_blacklist={\"*.museum\"}))\n    >>> fut = sess.get(\"http://anice.museum/\")\n    >>> fut\n    <Future at 0x10c696668 state=running>\n    >>> fut.result()\n    Traceback (most recent call last):\n    # [...]\n    advocate.exceptions.UnacceptableAddressException: anice.museum\n\n\nWhen should I use Advocate?\n===========================\n\nAny time you're fetching resources over HTTP for / from someone you don't trust!\n\nWhen should I not use Advocate?\n===============================\n\nThat's a tough one. There are a few cases I can think of where I wouldn't:\n\n* When good, safe support for IPv6 is important\n* When internal hosts use globally routable addresses and you can't guess their prefix to blacklist it ahead of time\n* You already have a good handle on network security within your network\n\nActually, if you're comfortable enough with Squid and network security, you should set up a secured Squid instance on a segregated subnet\nand proxy through that instead. Advocate attempts to guess whether an address references an internal host\nand block access, but it's definitely preferable to proxy through a host can't access anything internal in the first place!\n\nOf course, if you're writing an app / library that's meant to be usable OOTB on other people's networks, Advocate + a user-configurable\nblacklist is probably the safer bet.\n\n\nThis seems like it's been done before\n=====================================\n\nThere've been a few similar projects, but in my opinion Advocate's approach is the best because:\n\nIt sees URLs the same as the underlying HTTP library\n----------------------------------------------------\n\nParsing URLs is hard, and no two URL parsers seem to behave exactly the same. The tiniest\ndifferences in parsing between your validator and the underlying HTTP library can lead\nto vulnerabilities. For example, differences between PHP's :python:`parse_url` and cURL's\nURL parser `allowed a blacklist bypass in SafeCurl <https://github.com/fin1te/safecurl/issues/5>`_.\n\nAdvocate doesn't do URL parsing at all, and lets requests handle it. Advocate only looks at the\naddress requests actually tries to open a socket to.\n\nIt deals with DNS rebinding\n---------------------------\n\nTwo consecutive calls to :python:`socket.getaddrinfo` aren't guaranteed to return the same\ninfo, depending on the system configuration. If the \"safe\" looking record TTLs between\nthe verification lookup and the lookup for actually opening the socket, we may end\nup connecting to a very different server than the one we OK'd!\n\nAdvocate gets around this by only using one :python:`getaddrinfo` call for both verification\nand connecting the socket. In pseudocode:\n\n.. code-block:: python\n\n    def connect_socket(host, port):\n        for res in socket.getaddrinfo(host, port):\n            # where `res` will be a tuple containing the IP for the host\n            if not is_blacklisted(res):\n                # ... connect the socket using `res`\n\nSee `Wikipedia's article on DNS rebinding attacks <https://en.wikipedia.org/wiki/DNS_rebinding>`_ for more info.\n\nIt handles redirects sanely\n---------------------------\n\nMost of the other SSRF-prevention libs cover this, but I've seen a lot\nof sample code online that doesn't. Advocate will catch it since it inspects\n*every* connection attempt the underlying HTTP lib makes. \n\n\nTODO\n====\n\nProper IPv6 Support?\n--------------------\n\nAdvocate's IPv6 support is still a work-in-progress, since I'm not\nthat familiar with the spec, and there are so many ways to tunnel IPv4 over IPv6,\nas well as other non-obvious gotchas. IPv6 records are ignored by default\nfor now, but you can enable by using an :python:`AddrValidator` with :python:`allow_ipv6=True`.\n\nIt should mostly work as expected, but Advocate's approach might not even make sense with\nmost IPv6 deployments, see `Issue #3 <https://github.com/JordanMilne/Advocate/issues/3>`_ for\nmore info.\n\nIf you can think of any improvements to the IPv6 handling, please submit an issue or PR!\n\n\nCaveats\n=======\n\n* This is beta-quality software, the API might change without warning!\n* :python:`mount()` ing other adapters is disallowed to prevent Advocate's validating adapters from being clobbered.\n* Advocate does not, and might never support the use of HTTP proxies.\n* Proper IPv6 support is still a WIP as noted above.\n\nAcknowledgements\n================\n\n* https://github.com/fin1te/safecurl for inspiration\n* https://github.com/kennethreitz/requests for the lovely requests module\n* https://bitbucket.org/kwi/py2-ipaddress for the backport of ipaddress\n* https://github.com/hakobe/paranoidhttp a similar project targeting golang\n* https://github.com/uber-common/paranoid-request a similar project targeting Node\n* http://search.cpan.org/~tsibley/LWP-UserAgent-Paranoid/ a similar project targeting Perl 5", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JordanMilne/Advocate", "keywords": "http requests security ssrf proxy rebinding advocate", "license": "Apache 2", "maintainer": null, "maintainer_email": null, "name": "advocate", "package_url": "https://pypi.org/project/advocate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/advocate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/JordanMilne/Advocate"}, "release_url": "https://pypi.org/project/advocate/0.6.2/", "requires_dist": null, "requires_python": null, "summary": "A wrapper around the requests library for safely making HTTP requests on behalf of a third party", "version": "0.6.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"advocate\">\n<h2>Advocate</h2>\n<a href=\"https://travis-ci.org/JordanMilne/Advocate/\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/JordanMilne/Advocate.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4384d46b4717b6c4cf3fe3378be30806d1a19dda/68747470733a2f2f7472617669732d63692e6f72672f4a6f7264616e4d696c6e652f4164766f636174652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/JordanMilne/Advocate\" rel=\"nofollow\"><img alt=\"https://codecov.io/github/JordanMilne/Advocate/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbf15c16acdd63d04bd33163a9462dd7a77984ce/68747470733a2f2f636f6465636f762e696f2f6769746875622f4a6f7264616e4d696c6e652f4164766f636174652f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"https://img.shields.io/pypi/pyversions/advocate.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edc15f516f18da2b7a1cb043fe2e3d18188edba5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6164766f636174652e737667\">\n<a href=\"https://pypi.python.org/pypi/advocate\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/advocate.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e4273757294ec76426540b0b1afb267fe5d1447/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6164766f636174652e737667\"></a>\n<p>Advocate is a set of tools based around the <a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">requests library</a> for safely making\nHTTP requests on behalf of a third party. Specifically, it aims to prevent\ncommon techniques that enable <a href=\"https://cwe.mitre.org/data/definitions/918.html\" rel=\"nofollow\">SSRF attacks</a>.</p>\n<p>Advocate was inspired by <a href=\"https://github.com/fin1te/safecurl\" rel=\"nofollow\">fin1te\u2019s SafeCurl project</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install advocate\n</pre>\n<p>Advocate is officially supported on CPython 2.7+, CPython 3.4+ and PyPy 2. PyPy 3 may work as well, but\nyou\u2019ll need a copy of the ipaddress module from elsewhere.</p>\n</div>\n<div id=\"see-it-in-action\">\n<h2>See it in action</h2>\n<p>If you want to try out Advocate to see what kind of things it catches, there\u2019s a <a href=\"http://advocate.saynotolinux.com/\" rel=\"nofollow\">test site up on advocate.saynotolinux.com</a>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Advocate is more-or-less a drop-in replacement for requests. In most cases you can just replace \u201crequests\u201d with\n\u201cadvocate\u201d where necessary and be good to go:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">advocate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://google.com/\"</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Response</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Advocate also provides a subclassed <code class=\"python\"><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span></code> with sane defaults for\nvalidation already set up:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">advocate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://google.com/\"</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Response</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost/\"</span><span class=\"p\">)</span>\n<span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">UnacceptableAddressException</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n</pre>\n<p>All of the wrapped request functions accept a <code class=\"python\"><span class=\"n\">validator</span></code> kwarg where you\ncan set additional rules:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">advocate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">validator</span> <span class=\"o\">=</span> <span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">AddrValidator</span><span class=\"p\">(</span><span class=\"n\">hostname_blacklist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"*.museum\"</span><span class=\"p\">,})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://educational.MUSEUM/\"</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">validator</span><span class=\"p\">)</span>\n<span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">UnacceptableAddressException</span><span class=\"p\">:</span> <span class=\"n\">educational</span><span class=\"o\">.</span><span class=\"n\">MUSEUM</span>\n</pre>\n<p>If you require more advanced rules than the defaults, but don\u2019t want to have to pass\nthe validator kwarg everywhere, there\u2019s <code class=\"python\"><span class=\"n\">RequestsAPIWrapper</span></code> . You can\ndefine a wrapper in a common file and import it instead of advocate:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">advocate</span> <span class=\"kn\">import</span> <span class=\"n\">AddrValidator</span><span class=\"p\">,</span> <span class=\"n\">RequestsAPIWrapper</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">advocate.packages</span> <span class=\"kn\">import</span> <span class=\"n\">ipaddress</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dougs_advocate</span> <span class=\"o\">=</span> <span class=\"n\">RequestsAPIWrapper</span><span class=\"p\">(</span><span class=\"n\">AddrValidator</span><span class=\"p\">(</span><span class=\"n\">ip_blacklist</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># Contains data incomprehensible to mere mortals</span>\n<span class=\"o\">...</span>     <span class=\"n\">ipaddress</span><span class=\"o\">.</span><span class=\"n\">ip_network</span><span class=\"p\">(</span><span class=\"s2\">\"42.42.42.42/32\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">dougs_advocate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://42.42.42.42/\"</span><span class=\"p\">)</span>\n<span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">UnacceptableAddressException</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'42.42.42.42'</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">)</span>\n</pre>\n<p>Other than that, you can do just about everything with Advocate that you can\nwith an unwrapped requests. Advocate passes requests\u2019 test suite with the\nexception of tests that require <code class=\"python\"><span class=\"n\">Session</span><span class=\"o\">.</span><span class=\"n\">mount</span><span class=\"p\">()</span></code>.</p>\n</div>\n<div id=\"conditionally-bypassing-protection\">\n<h2>Conditionally bypassing protection</h2>\n<p>If you want to allow certain users to bypass Advocate\u2019s restrictions, just\nuse plain \u2018ol requests by doing something like:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"o\">==</span> <span class=\"s2\">\"mr_skeltal\"</span><span class=\"p\">:</span>\n    <span class=\"n\">requests_module</span> <span class=\"o\">=</span> <span class=\"n\">requests</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">requests_module</span> <span class=\"o\">=</span> <span class=\"n\">advocate</span>\n<span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">requests_module</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com/doot_doot\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"requests-futures-support\">\n<h2>requests-futures support</h2>\n<p>A thin wrapper around <a href=\"https://github.com/ross/requests-futures\" rel=\"nofollow\">requests-futures</a> is provided to ease writing async-friendly code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">advocate.futures</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span> <span class=\"o\">=</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://example.com/\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Future</span> <span class=\"n\">at</span> <span class=\"mh\">0x10c717f28</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">finished</span> <span class=\"n\">returned</span> <span class=\"n\">Response</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Response</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<p>You can do basically everything you can do with regular <code class=\"python\"><span class=\"n\">FuturesSession</span></code> s and <code class=\"python\"><span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">Session</span></code> s:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">advocate</span> <span class=\"kn\">import</span> <span class=\"n\">AddrValidator</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">advocate.futures</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">AddrValidator</span><span class=\"p\">(</span><span class=\"n\">hostname_blacklist</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"*.museum\"</span><span class=\"p\">}))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span> <span class=\"o\">=</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://anice.museum/\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Future</span> <span class=\"n\">at</span> <span class=\"mh\">0x10c696668</span> <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">running</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fut</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"c1\"># [...]</span>\n<span class=\"n\">advocate</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">UnacceptableAddressException</span><span class=\"p\">:</span> <span class=\"n\">anice</span><span class=\"o\">.</span><span class=\"n\">museum</span>\n</pre>\n</div>\n<div id=\"when-should-i-use-advocate\">\n<h2>When should I use Advocate?</h2>\n<p>Any time you\u2019re fetching resources over HTTP for / from someone you don\u2019t trust!</p>\n</div>\n<div id=\"when-should-i-not-use-advocate\">\n<h2>When should I not use Advocate?</h2>\n<p>That\u2019s a tough one. There are a few cases I can think of where I wouldn\u2019t:</p>\n<ul>\n<li>When good, safe support for IPv6 is important</li>\n<li>When internal hosts use globally routable addresses and you can\u2019t guess their prefix to blacklist it ahead of time</li>\n<li>You already have a good handle on network security within your network</li>\n</ul>\n<p>Actually, if you\u2019re comfortable enough with Squid and network security, you should set up a secured Squid instance on a segregated subnet\nand proxy through that instead. Advocate attempts to guess whether an address references an internal host\nand block access, but it\u2019s definitely preferable to proxy through a host can\u2019t access anything internal in the first place!</p>\n<p>Of course, if you\u2019re writing an app / library that\u2019s meant to be usable OOTB on other people\u2019s networks, Advocate + a user-configurable\nblacklist is probably the safer bet.</p>\n</div>\n<div id=\"this-seems-like-it-s-been-done-before\">\n<h2>This seems like it\u2019s been done before</h2>\n<p>There\u2019ve been a few similar projects, but in my opinion Advocate\u2019s approach is the best because:</p>\n<div id=\"it-sees-urls-the-same-as-the-underlying-http-library\">\n<h3>It sees URLs the same as the underlying HTTP library</h3>\n<p>Parsing URLs is hard, and no two URL parsers seem to behave exactly the same. The tiniest\ndifferences in parsing between your validator and the underlying HTTP library can lead\nto vulnerabilities. For example, differences between PHP\u2019s <code class=\"python\"><span class=\"n\">parse_url</span></code> and cURL\u2019s\nURL parser <a href=\"https://github.com/fin1te/safecurl/issues/5\" rel=\"nofollow\">allowed a blacklist bypass in SafeCurl</a>.</p>\n<p>Advocate doesn\u2019t do URL parsing at all, and lets requests handle it. Advocate only looks at the\naddress requests actually tries to open a socket to.</p>\n</div>\n<div id=\"it-deals-with-dns-rebinding\">\n<h3>It deals with DNS rebinding</h3>\n<p>Two consecutive calls to <code class=\"python\"><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">getaddrinfo</span></code> aren\u2019t guaranteed to return the same\ninfo, depending on the system configuration. If the \u201csafe\u201d looking record TTLs between\nthe verification lookup and the lookup for actually opening the socket, we may end\nup connecting to a very different server than the one we OK\u2019d!</p>\n<p>Advocate gets around this by only using one <code class=\"python\"><span class=\"n\">getaddrinfo</span></code> call for both verification\nand connecting the socket. In pseudocode:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">connect_socket</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">getaddrinfo</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n        <span class=\"c1\"># where `res` will be a tuple containing the IP for the host</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_blacklisted</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n            <span class=\"c1\"># ... connect the socket using `res`</span>\n</pre>\n<p>See <a href=\"https://en.wikipedia.org/wiki/DNS_rebinding\" rel=\"nofollow\">Wikipedia\u2019s article on DNS rebinding attacks</a> for more info.</p>\n</div>\n<div id=\"it-handles-redirects-sanely\">\n<h3>It handles redirects sanely</h3>\n<p>Most of the other SSRF-prevention libs cover this, but I\u2019ve seen a lot\nof sample code online that doesn\u2019t. Advocate will catch it since it inspects\n<em>every</em> connection attempt the underlying HTTP lib makes.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<h2 id=\"proper-ipv6-support\"><span class=\"section-subtitle\">Proper IPv6 Support?</span></h2>\n<p>Advocate\u2019s IPv6 support is still a work-in-progress, since I\u2019m not\nthat familiar with the spec, and there are so many ways to tunnel IPv4 over IPv6,\nas well as other non-obvious gotchas. IPv6 records are ignored by default\nfor now, but you can enable by using an <code class=\"python\"><span class=\"n\">AddrValidator</span></code> with <code class=\"python\"><span class=\"n\">allow_ipv6</span><span class=\"o\">=</span><span class=\"kc\">True</span></code>.</p>\n<p>It should mostly work as expected, but Advocate\u2019s approach might not even make sense with\nmost IPv6 deployments, see <a href=\"https://github.com/JordanMilne/Advocate/issues/3\" rel=\"nofollow\">Issue #3</a> for\nmore info.</p>\n<p>If you can think of any improvements to the IPv6 handling, please submit an issue or PR!</p>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<ul>\n<li>This is beta-quality software, the API might change without warning!</li>\n<li><code class=\"python\"><span class=\"n\">mount</span><span class=\"p\">()</span></code> ing other adapters is disallowed to prevent Advocate\u2019s validating adapters from being clobbered.</li>\n<li>Advocate does not, and might never support the use of HTTP proxies.</li>\n<li>Proper IPv6 support is still a WIP as noted above.</li>\n</ul>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<ul>\n<li><a href=\"https://github.com/fin1te/safecurl\" rel=\"nofollow\">https://github.com/fin1te/safecurl</a> for inspiration</li>\n<li><a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">https://github.com/kennethreitz/requests</a> for the lovely requests module</li>\n<li><a href=\"https://bitbucket.org/kwi/py2-ipaddress\" rel=\"nofollow\">https://bitbucket.org/kwi/py2-ipaddress</a> for the backport of ipaddress</li>\n<li><a href=\"https://github.com/hakobe/paranoidhttp\" rel=\"nofollow\">https://github.com/hakobe/paranoidhttp</a> a similar project targeting golang</li>\n<li><a href=\"https://github.com/uber-common/paranoid-request\" rel=\"nofollow\">https://github.com/uber-common/paranoid-request</a> a similar project targeting Node</li>\n<li><a href=\"http://search.cpan.org/~tsibley/LWP-UserAgent-Paranoid/\" rel=\"nofollow\">http://search.cpan.org/~tsibley/LWP-UserAgent-Paranoid/</a> a similar project targeting Perl 5</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2387423, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "a9d64a08a297cd7b9351f220dc545daf", "sha256": "2b02e45b11dce4c1381eb5282343a910732c3967ac281cdd8fcd86890c6c6e20"}, "downloads": -1, "filename": "advocate-0.2.tar.gz", "has_sig": false, "md5_digest": "a9d64a08a297cd7b9351f220dc545daf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24874, "upload_time": "2015-10-24T10:27:10", "upload_time_iso_8601": "2015-10-24T10:27:10.021198Z", "url": "https://files.pythonhosted.org/packages/09/bd/3cfa17b92388c5d18b3bfbb59511ff7d7f97bab144d5269ab9be71e93496/advocate-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "86fbc0a5a76b1ce52bc88f0142071834", "sha256": "8195602f2d9ae1f40fc38c7315113f62816c164e172f973a5720614ededce824"}, "downloads": -1, "filename": "advocate-0.2.1.tar.gz", "has_sig": false, "md5_digest": "86fbc0a5a76b1ce52bc88f0142071834", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27703, "upload_time": "2015-10-25T07:51:21", "upload_time_iso_8601": "2015-10-25T07:51:21.324790Z", "url": "https://files.pythonhosted.org/packages/ec/55/a702fa5895accb27a8cad4106a64217e33c9658d3961a894d0bb2f7b5f59/advocate-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0f3bbd8a2a76cdfc7ecc1693dd5ece4d", "sha256": "29719c514925a6518440f8791228386f233887194516c8600522d77948c7f57e"}, "downloads": -1, "filename": "advocate-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0f3bbd8a2a76cdfc7ecc1693dd5ece4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27683, "upload_time": "2015-10-25T07:58:13", "upload_time_iso_8601": "2015-10-25T07:58:13.231732Z", "url": "https://files.pythonhosted.org/packages/91/52/8d6165e8290290d6cb8118086575b456639129929f530050adc9bb5996d2/advocate-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "27b16318b251712e58ff35dc54628dd9", "sha256": "c83160fb56322125c8ca048ee00b60722e47ed972503fa6d1a8c0234c8a9f152"}, "downloads": -1, "filename": "advocate-0.2.3.tar.gz", "has_sig": false, "md5_digest": "27b16318b251712e58ff35dc54628dd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27758, "upload_time": "2015-10-25T16:46:07", "upload_time_iso_8601": "2015-10-25T16:46:07.359272Z", "url": "https://files.pythonhosted.org/packages/66/83/153f02c378f0bda997f1a4634c562df39384563070f9cfa12232955e8be8/advocate-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4bbe5ebf311ca9516b6d160173002770", "sha256": "1b45d6cb9ae0e095b6cd785143032d1988385507f165130c42b704248c675144"}, "downloads": -1, "filename": "advocate-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4bbe5ebf311ca9516b6d160173002770", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28109, "upload_time": "2015-10-28T04:24:28", "upload_time_iso_8601": "2015-10-28T04:24:28.570298Z", "url": "https://files.pythonhosted.org/packages/a8/c6/a578b96e94164f49b96bba298033b652d3b7f2bd63733976f8b6a006eb21/advocate-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "59341fe3aeb236c26899c06cb3c551f8", "sha256": "edcdd27028c3379919743d6e3f8e071618cd98a5a2e4624c40d3fd826a56e6a0"}, "downloads": -1, "filename": "advocate-0.3.1.tar.gz", "has_sig": false, "md5_digest": "59341fe3aeb236c26899c06cb3c551f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28400, "upload_time": "2015-10-31T13:53:39", "upload_time_iso_8601": "2015-10-31T13:53:39.893769Z", "url": "https://files.pythonhosted.org/packages/94/4c/39ccc6fba5655dba7d52598acc5b0409c272bf11be88bca17237c575451a/advocate-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "357b2ad023e53c09ffb88333a6a9eb35", "sha256": "00ff0b93b131da6bbdb534e8dd76c9ee6821ec2b8852301bdf31776307ec8849"}, "downloads": -1, "filename": "advocate-0.3.2.tar.gz", "has_sig": false, "md5_digest": "357b2ad023e53c09ffb88333a6a9eb35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29170, "upload_time": "2015-11-03T01:18:33", "upload_time_iso_8601": "2015-11-03T01:18:33.624995Z", "url": "https://files.pythonhosted.org/packages/d2/8c/a3dd7fd1f9a69c905bf74dd68c7f0214d9c548c3a38f7c9551479151b020/advocate-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e6d197f17fbffc4c43142db1d5a6b355", "sha256": "b147373af116e34e803347356e40f22cc302e815fb3da2eef261daefe82812c5"}, "downloads": -1, "filename": "advocate-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e6d197f17fbffc4c43142db1d5a6b355", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29835, "upload_time": "2015-11-11T07:12:11", "upload_time_iso_8601": "2015-11-11T07:12:11.142566Z", "url": "https://files.pythonhosted.org/packages/66/36/d5dd402de1303f37ec5c77f1c0a55d19d55a1986e10f31ecf51f87757798/advocate-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7e31ee6be070b91d4efa47d314eb12d0", "sha256": "8325d18e4810450c074c931a415f4d743cf95d5ff7f09e7e404974999de59646"}, "downloads": -1, "filename": "advocate-0.5.0.tar.gz", "has_sig": false, "md5_digest": "7e31ee6be070b91d4efa47d314eb12d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30175, "upload_time": "2015-12-02T07:50:06", "upload_time_iso_8601": "2015-12-02T07:50:06.375748Z", "url": "https://files.pythonhosted.org/packages/dd/7e/451512191a682d42986296590bce7e5abcf4ebd78020ee28ce7b8189d87a/advocate-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "670aed77716079d4e305e731ba60673d", "sha256": "b694f1658dfffc6b66f1d4f8174a9305bd852ca332e5fd2848d700ce068c9fbf"}, "downloads": -1, "filename": "advocate-0.6.0.tar.gz", "has_sig": false, "md5_digest": "670aed77716079d4e305e731ba60673d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31172, "upload_time": "2016-02-16T02:20:08", "upload_time_iso_8601": "2016-02-16T02:20:08.957813Z", "url": "https://files.pythonhosted.org/packages/cb/68/3f9ef795e7a81263660dfb96a3986b3d692a4ea2465ef211f1e5948f4eb2/advocate-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "e153095b00253630b82d385c1bedce19", "sha256": "3b06e79824e39541140dc731fff592c0bb8889624b5e8af4915b34b7f4970f61"}, "downloads": -1, "filename": "advocate-0.6.1.tar.gz", "has_sig": false, "md5_digest": "e153095b00253630b82d385c1bedce19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31358, "upload_time": "2016-03-20T08:25:58", "upload_time_iso_8601": "2016-03-20T08:25:58.472369Z", "url": "https://files.pythonhosted.org/packages/ab/eb/60d8782b7d19100c02fb9764f39456e78f1bb12af34cef0624645be8ac43/advocate-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "c32c35450c7e7be91551951fea2b3665", "sha256": "89cdda7e3f6eeef19bc3aa3e9ca0d8e3e6fb3ef85b79ab16b37329b84b129c99"}, "downloads": -1, "filename": "advocate-0.6.2.tar.gz", "has_sig": false, "md5_digest": "c32c35450c7e7be91551951fea2b3665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31470, "upload_time": "2016-10-07T22:26:19", "upload_time_iso_8601": "2016-10-07T22:26:19.309696Z", "url": "https://files.pythonhosted.org/packages/3f/e4/7d91f73c38e02893a16d57f05c69996a777af4a70aa0a2278a1eb156ce41/advocate-0.6.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c32c35450c7e7be91551951fea2b3665", "sha256": "89cdda7e3f6eeef19bc3aa3e9ca0d8e3e6fb3ef85b79ab16b37329b84b129c99"}, "downloads": -1, "filename": "advocate-0.6.2.tar.gz", "has_sig": false, "md5_digest": "c32c35450c7e7be91551951fea2b3665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31470, "upload_time": "2016-10-07T22:26:19", "upload_time_iso_8601": "2016-10-07T22:26:19.309696Z", "url": "https://files.pythonhosted.org/packages/3f/e4/7d91f73c38e02893a16d57f05c69996a777af4a70aa0a2278a1eb156ce41/advocate-0.6.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:03 2020"}