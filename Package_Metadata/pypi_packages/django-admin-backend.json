{"info": {"author": "David Danier", "author_email": "david.danier@team23.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.6", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "==============\ndjango-backend\n==============\n\n|pypi-badge| |build-status|\n\n.. note::\n\n    This module can be imported in python with the name ``django_backend``. The\n    PyPI package is called `django-admin-backend`_ though. We had to use a\n    different name as ``django-backend`` was already registered on PyPI. It's a\n    little unfortunate this way, but a necessary workaround for now.\n\n.. _django-admin-backend: https://pypi.python.org/pypi/django-admin-backend\n\nInstallation\n============\n\nAdd the following apps to your ``INSTALLED_APPS`` settings:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django.contrib.auth',\n        'django.contrib.sites',\n        'django.contrib.staticfiles',\n        ...\n        'django_backend',\n        'floppyforms',\n    )\n\nMake sure ``SITE_ID`` is set:\n\n.. code:: python\n\n    SITE_ID = 1\n\nMake sure ``LANGUAGE_CODE`` is valid:\n\n.. code:: python\n\n    LANGUAGE_CODE = 'en'\n\n**Warning:** Django's default language code is *not* valid, as \"en-us\" is not included in settings.LANGUAGES.\n\nAdd the following line to your ``urls.py``:\n\n.. code:: python\n\n    url(r'^backend/', include(django_backend.site.get_urls(), namespace='django_backend')),\n\nTODO: continue, propably not complete yet\n\nDevelopment\n===========\n\nRun tests\n---------\n\n.. code:: bash\n\n    # Set everything up. You want to do this in a virtualenv.\n    pip install -r tests/requirements.txt\n    python setup.py develop\n\n    # Run the tests. Should be executed in the root of the project.\n    py.test\n\n.. |build-status| image:: https://travis-ci.org/team23/django_backend.svg\n    :target: https://travis-ci.org/team23/django_backend\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/django-admin-backend.svg\n    :target: https://pypi.python.org/pypi/django-admin-backend\n\nBuild static assets\n-------------------\n\n.. code:: bash\n\n    npm install\n    gulp build\n\n    # Use gulp watch to continuously build on source file changes.\n    gulp watch\n\nOr to create a development build that includes source maps, execute the ``dev`` task first, like:\n\n.. code:: bash\n\n    gulp dev build\n\n\n0.6.0\n-----\n\n- Disable form buttons after submit so that user cannot double click a form\n  submit button. That should prevent (most) doubled submits. Server side\n  validation still needs to be in place though.\n- Call the ``attachEventHandlers`` after ``prepareContent`` method in\n  ``PartialContentLoader``. That makes extending it easier.\n- Previously we found ourselve in confusing situation when multiple modals\n  where open and in the top one you clicked the delete button. This opened the\n  delete confirmation. If the user then clicked \"dismiss\" in the confirmation,\n  the modal was closed. This was confusing as it was not clear that the top\n  modal was closed but the now displaying underlying modal has different data\n  in it. In this case a re-displaying the update view would make more sense.\n\n  So we added a way for a modal to go the previous URL (like the browsers go\n  back button). If the users triggers now a dismiss action, the modal will go\n  one view back in most cases. If there is no previous URL recorded, the modal\n  will close. This happens for example if you deep link to the delete view with\n  a modal.\n- Relation list items now will also have a drag handle and remove icon if the\n  relation object cannot be displayed (for example if the content type id is\n  not valid). We need to have the remove icon visible, otherwise an object with\n  ian nvalid content type cannot be deleted by the user which makes it\n  impossible for the user to save the object with the invalid relation.\n\n0.5.0\n-----\n\n- The widgets ``GenericRelationListWidget`` and ``M2MListWidget`` feature a\n  drop down to add new elements. The list used to link to the relation's\n  ``create`` view. We found this to be not useful for all cases, since you\n  might want to select existing items.\n\n  We changed the view to be now the ``select`` by default. In general you can\n  add new items from the select view then as well with the add button. If you\n  don't want to allow selecting new items for one specific backend, you can\n  always overwrite the ``select`` view and replace it with for example a\n  create view instance.\n- Close dropdown when clicking link in *add new* menu in relation list\n  widgets.\n\n0.4.3\n-----\n\n- Improve styling of bootstrap row template. We integrated a ?-icon for the\n  help text and removed whitespace between the label and the \":\" after the\n  field name.\n\n0.4.2\n-----\n\n- Validate selected elements in ``GenericRelationListField`` against the\n  allowed content types. That makes sure no unwanted objects end up in the\n  list.\n- Allow name of generic foreign key field to be set explicitly in\n  ``GenericRelationListField``. You can use the ``generic_fk_name`` argument\n  for this.\n- Adding or changing a new item in a ``GenericRelationListField`` will also\n  update the edit link based on the update url in the JSON response.\n- JavaScript: The PageContext got the capability to watch the element that\n  represents the page context in the DOM. That allows us to close obsolete\n  tooltips even if their original trigger got already removed from the page.\n- JavaScript: The pagecontext element gets the data-pagecontext attribute to\n  make it queryable.\n- JavaScript: Bootstrap tooltips are now attached to pagecontext elements\n  instead of the body. That will better capsulate them into the pagecontext.\n\n0.4.1\n-----\n\n- Make ``GenericRelationListField`` determine the names of the ``object_id``\n  and ``content_type`` fields by inspecting the used ``GenericForeignKey``.\n  That will raise errors about wrong usage earlier.\n\n- Fix JS for ``GenericRelationListField`` if used nested multiple levels deep.\n  A click handler was called in every instance in the modal stack, so the\n  behaviour was different depending on the number of modals.\n\n0.4.0\n-----\n\n- Fix ``GenericRelationListField``. It's internal API was not used correctly\n  and therfore just threw errors.\n\n- Allow ``SelectRelatedField`` to pick up inline backends, searching from\n  currently active backend. That makes it easier to use customized nested\n  inline backends.\n\n0.3.0\n-----\n\n* Adjusted multiple imports:\n\n  - Forms, formfields and widgets should be now always imported from\n    ``django_backend.forms``. Example::\n\n    # OLD import, will no longer work\n    from django_backend.backend.base.formfields import SelectRelatedField\n\n    # NEW import\n    from django_backend.forms import SelectRelatedField\n\n* Add ``ManageRelatedField`` that can inline a list page of a related model\n  in the change view.\n\n* Add ``GenericRelationListField`` that can show a reorderable list related\n  by a intermediary model with a generic foreign key.\n\n* Use Django's app config to make autoloading of backends predictable.\n\n* Ensuring support for Django 1.6 and 1.8.\n\n* Integrating bootstrap styles for floppyforms widgets.\n\n* Disable caching for backend views.\n\n* Allow subclasses of ``FilterForm`` to define ``filter_queryset_{field_name}``\n  methods for easy extendability.\n\n0.1.0\n-----\n\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/team23/django-backend", "keywords": "", "license": "BSD licence, see LICENSE file", "maintainer": "", "maintainer_email": "", "name": "django-admin-backend", "package_url": "https://pypi.org/project/django-admin-backend/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-admin-backend/", "project_urls": {"Homepage": "https://github.com/team23/django-backend"}, "release_url": "https://pypi.org/project/django-admin-backend/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "A replacement of django.contrib.admin", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============<br>django-backend<br>==============<br><br>|pypi-badge| |build-status|<br><br>.. note::<br><br>    This module can be imported in python with the name ``django_backend``. The<br>    PyPI package is called `django-admin-backend`_ though. We had to use a<br>    different name as ``django-backend`` was already registered on PyPI. It's a<br>    little unfortunate this way, but a necessary workaround for now.<br><br>.. _django-admin-backend: https://pypi.python.org/pypi/django-admin-backend<br><br>Installation<br>============<br><br>Add the following apps to your ``INSTALLED_APPS`` settings:<br><br>.. code:: python<br><br>    INSTALLED_APPS = (<br>        ...<br>        'django.contrib.auth',<br>        'django.contrib.sites',<br>        'django.contrib.staticfiles',<br>        ...<br>        'django_backend',<br>        'floppyforms',<br>    )<br><br>Make sure ``SITE_ID`` is set:<br><br>.. code:: python<br><br>    SITE_ID = 1<br><br>Make sure ``LANGUAGE_CODE`` is valid:<br><br>.. code:: python<br><br>    LANGUAGE_CODE = 'en'<br><br>**Warning:** Django's default language code is *not* valid, as \"en-us\" is not included in settings.LANGUAGES.<br><br>Add the following line to your ``urls.py``:<br><br>.. code:: python<br><br>    url(r'^backend/', include(django_backend.site.get_urls(), namespace='django_backend')),<br><br>TODO: continue, propably not complete yet<br><br>Development<br>===========<br><br>Run tests<br>---------<br><br>.. code:: bash<br><br>    # Set everything up. You want to do this in a virtualenv.<br>    pip install -r tests/requirements.txt<br>    python setup.py develop<br><br>    # Run the tests. Should be executed in the root of the project.<br>    py.test<br><br>.. |build-status| image:: https://travis-ci.org/team23/django_backend.svg<br>    :target: https://travis-ci.org/team23/django_backend<br><br>.. |pypi-badge| image:: https://img.shields.io/pypi/v/django-admin-backend.svg<br>    :target: https://pypi.python.org/pypi/django-admin-backend<br><br>Build static assets<br>-------------------<br><br>.. code:: bash<br><br>    npm install<br>    gulp build<br><br>    # Use gulp watch to continuously build on source file changes.<br>    gulp watch<br><br>Or to create a development build that includes source maps, execute the ``dev`` task first, like:<br><br>.. code:: bash<br><br>    gulp dev build<br><br><br>0.6.0<br>-----<br><br>- Disable form buttons after submit so that user cannot double click a form<br>  submit button. That should prevent (most) doubled submits. Server side<br>  validation still needs to be in place though.<br>- Call the ``attachEventHandlers`` after ``prepareContent`` method in<br>  ``PartialContentLoader``. That makes extending it easier.<br>- Previously we found ourselve in confusing situation when multiple modals<br>  where open and in the top one you clicked the delete button. This opened the<br>  delete confirmation. If the user then clicked \"dismiss\" in the confirmation,<br>  the modal was closed. This was confusing as it was not clear that the top<br>  modal was closed but the now displaying underlying modal has different data<br>  in it. In this case a re-displaying the update view would make more sense.<br><br>  So we added a way for a modal to go the previous URL (like the browsers go<br>  back button). If the users triggers now a dismiss action, the modal will go<br>  one view back in most cases. If there is no previous URL recorded, the modal<br>  will close. This happens for example if you deep link to the delete view with<br>  a modal.<br>- Relation list items now will also have a drag handle and remove icon if the<br>  relation object cannot be displayed (for example if the content type id is<br>  not valid). We need to have the remove icon visible, otherwise an object with<br>  ian nvalid content type cannot be deleted by the user which makes it<br>  impossible for the user to save the object with the invalid relation.<br><br>0.5.0<br>-----<br><br>- The widgets ``GenericRelationListWidget`` and ``M2MListWidget`` feature a<br>  drop down to add new elements. The list used to link to the relation's<br>  ``create`` view. We found this to be not useful for all cases, since you<br>  might want to select existing items.<br><br>  We changed the view to be now the ``select`` by default. In general you can<br>  add new items from the select view then as well with the add button. If you<br>  don't want to allow selecting new items for one specific backend, you can<br>  always overwrite the ``select`` view and replace it with for example a<br>  create view instance.<br>- Close dropdown when clicking link in *add new* menu in relation list<br>  widgets.<br><br>0.4.3<br>-----<br><br>- Improve styling of bootstrap row template. We integrated a ?-icon for the<br>  help text and removed whitespace between the label and the \":\" after the<br>  field name.<br><br>0.4.2<br>-----<br><br>- Validate selected elements in ``GenericRelationListField`` against the<br>  allowed content types. That makes sure no unwanted objects end up in the<br>  list.<br>- Allow name of generic foreign key field to be set explicitly in<br>  ``GenericRelationListField``. You can use the ``generic_fk_name`` argument<br>  for this.<br>- Adding or changing a new item in a ``GenericRelationListField`` will also<br>  update the edit link based on the update url in the JSON response.<br>- JavaScript: The PageContext got the capability to watch the element that<br>  represents the page context in the DOM. That allows us to close obsolete<br>  tooltips even if their original trigger got already removed from the page.<br>- JavaScript: The pagecontext element gets the data-pagecontext attribute to<br>  make it queryable.<br>- JavaScript: Bootstrap tooltips are now attached to pagecontext elements<br>  instead of the body. That will better capsulate them into the pagecontext.<br><br>0.4.1<br>-----<br><br>- Make ``GenericRelationListField`` determine the names of the ``object_id``<br>  and ``content_type`` fields by inspecting the used ``GenericForeignKey``.<br>  That will raise errors about wrong usage earlier.<br><br>- Fix JS for ``GenericRelationListField`` if used nested multiple levels deep.<br>  A click handler was called in every instance in the modal stack, so the<br>  behaviour was different depending on the number of modals.<br><br>0.4.0<br>-----<br><br>- Fix ``GenericRelationListField``. It's internal API was not used correctly<br>  and therfore just threw errors.<br><br>- Allow ``SelectRelatedField`` to pick up inline backends, searching from<br>  currently active backend. That makes it easier to use customized nested<br>  inline backends.<br><br>0.3.0<br>-----<br><br>* Adjusted multiple imports:<br><br>  - Forms, formfields and widgets should be now always imported from<br>    ``django_backend.forms``. Example::<br><br>    # OLD import, will no longer work<br>    from django_backend.backend.base.formfields import SelectRelatedField<br><br>    # NEW import<br>    from django_backend.forms import SelectRelatedField<br><br>* Add ``ManageRelatedField`` that can inline a list page of a related model<br>  in the change view.<br><br>* Add ``GenericRelationListField`` that can show a reorderable list related<br>  by a intermediary model with a generic foreign key.<br><br>* Use Django's app config to make autoloading of backends predictable.<br><br>* Ensuring support for Django 1.6 and 1.8.<br><br>* Integrating bootstrap styles for floppyforms widgets.<br><br>* Disable caching for backend views.<br><br>* Allow subclasses of ``FilterForm`` to define ``filter_queryset_{field_name}``<br>  methods for easy extendability.<br><br>0.1.0<br>-----<br><br>* Initial release.\n          </div>"}, "last_serial": 4304484, "releases": {"0.2.0.dev4": [{"comment_text": "", "digests": {"md5": "5fd19c9469619c83224cf26b6630d315", "sha256": "c2edc30184d2c2651097243063fafa5ce6109083ef38b5cd4cbf5f39a0405a07"}, "downloads": -1, "filename": "django-admin-backend-0.2.0.dev4.tar.gz", "has_sig": false, "md5_digest": "5fd19c9469619c83224cf26b6630d315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3224183, "upload_time": "2015-12-03T19:39:25", "upload_time_iso_8601": "2015-12-03T19:39:25.432968Z", "url": "https://files.pythonhosted.org/packages/df/31/92accc1e4c67e1659a4fbb0e36a4028ffa3223da64f7d4cbc6f86580b148/django-admin-backend-0.2.0.dev4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a63df804eced325484da0c111dceac8b", "sha256": "41934b72cf57572f220ef5ac5e806efd6a39e6212817fb51b24f4b0141be3050"}, "downloads": -1, "filename": "django-admin-backend-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a63df804eced325484da0c111dceac8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3220299, "upload_time": "2016-02-02T10:04:49", "upload_time_iso_8601": "2016-02-02T10:04:49.123958Z", "url": "https://files.pythonhosted.org/packages/94/e5/b542f93b93c1755302b21a3d6393b17c7be969128bf70acb9c8f951b12a9/django-admin-backend-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "61deb24ce779d6142fbed017143b5047", "sha256": "808b1324f886d06fa28fda7e6c9a09fe259bbcd928d736abe482793e14d1ad7c"}, "downloads": -1, "filename": "django-admin-backend-0.4.0.tar.gz", "has_sig": false, "md5_digest": "61deb24ce779d6142fbed017143b5047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221026, "upload_time": "2016-02-12T14:14:34", "upload_time_iso_8601": "2016-02-12T14:14:34.801251Z", "url": "https://files.pythonhosted.org/packages/91/41/28c1537e68dbf449cda31e9ea8dc47277d3cdf0feef287c0f29d1543fc49/django-admin-backend-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "cd758279704e2899142e3c70c6c6c848", "sha256": "ed323c437fb09f3dd57ffd4050fd549044fd4edd4c04421262a0bdfbf82a5b92"}, "downloads": -1, "filename": "django-admin-backend-0.4.1.tar.gz", "has_sig": false, "md5_digest": "cd758279704e2899142e3c70c6c6c848", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221179, "upload_time": "2016-02-19T11:08:32", "upload_time_iso_8601": "2016-02-19T11:08:32.593203Z", "url": "https://files.pythonhosted.org/packages/a7/3d/51c9375fa37673419c192086f6da2542e35080b621e7fb19dbff5f6c13d3/django-admin-backend-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "cd05b11cf8b0d8e8dbb12cbe36936907", "sha256": "e162e668ce108c8c1ac99703fa1cb447bd806641415f6cc1809ea576292b8b9a"}, "downloads": -1, "filename": "django-admin-backend-0.4.2.tar.gz", "has_sig": false, "md5_digest": "cd05b11cf8b0d8e8dbb12cbe36936907", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221504, "upload_time": "2016-03-02T12:46:19", "upload_time_iso_8601": "2016-03-02T12:46:19.115464Z", "url": "https://files.pythonhosted.org/packages/ca/30/5b757956dccead7280a45b1cc78d6ef44d825b11cfb331342ddf815a9936/django-admin-backend-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "69e06fb973838ffe29903c4a38fc7b94", "sha256": "a2619c485356205006d2a8c4ac1b56fb4eed3acda238f492f68b2da01025691a"}, "downloads": -1, "filename": "django-admin-backend-0.4.3.tar.gz", "has_sig": false, "md5_digest": "69e06fb973838ffe29903c4a38fc7b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221633, "upload_time": "2016-03-03T15:56:02", "upload_time_iso_8601": "2016-03-03T15:56:02.210192Z", "url": "https://files.pythonhosted.org/packages/84/d9/548bc76cb83f4528e85560415ffe10aeaf1f45969a66585237bf877c2794/django-admin-backend-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "a6df4911eb99b0d19eb361467051b57e", "sha256": "1276681fea5130a976e42c831da18e553eb91e20436195d931442e7fce6be3c9"}, "downloads": -1, "filename": "django-admin-backend-0.5.0.tar.gz", "has_sig": false, "md5_digest": "a6df4911eb99b0d19eb361467051b57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221944, "upload_time": "2016-03-09T17:12:45", "upload_time_iso_8601": "2016-03-09T17:12:45.349982Z", "url": "https://files.pythonhosted.org/packages/41/96/44d6c7c376ff3629f93927e547918b2dbbcab1dbdabd552516e7b03d43ce/django-admin-backend-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "7103e664c968dbb2e97cd074f935daf4", "sha256": "113cf9bc79518b69118d65df40c1ea3eafeb1ae474d3febed609759957cc7f4d"}, "downloads": -1, "filename": "django-admin-backend-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7103e664c968dbb2e97cd074f935daf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3223878, "upload_time": "2016-04-04T16:02:30", "upload_time_iso_8601": "2016-04-04T16:02:30.788979Z", "url": "https://files.pythonhosted.org/packages/f0/3e/2f4eae0d18b3bf30ca2d7c799d404954782a46e35da7a46a529475eeb231/django-admin-backend-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7103e664c968dbb2e97cd074f935daf4", "sha256": "113cf9bc79518b69118d65df40c1ea3eafeb1ae474d3febed609759957cc7f4d"}, "downloads": -1, "filename": "django-admin-backend-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7103e664c968dbb2e97cd074f935daf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3223878, "upload_time": "2016-04-04T16:02:30", "upload_time_iso_8601": "2016-04-04T16:02:30.788979Z", "url": "https://files.pythonhosted.org/packages/f0/3e/2f4eae0d18b3bf30ca2d7c799d404954782a46e35da7a46a529475eeb231/django-admin-backend-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:51 2020"}