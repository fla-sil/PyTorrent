{"info": {"author": "merry-bits", "author_email": "merry-bits@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: System :: Monitoring"], "description": "Owl\n===\n\n.. image:: https://api.travis-ci.org/merry-bits/Owl.svg?branch=master\n    :target: https://travis-ci.org/merry-bits/Owl?branch=master\n\nMeasure how long your `Falcon <http://falconframework.org/>`_ requests take and\nsend each measurement as an event to `Riemann <http://riemann.io/>`_.\n\n\nExample\n-------\n\nOwl is designed to be a mix-in class for API. To use Owl you create your own\nAPI class providing configuration parameters for Owl.\n\nIn Python 3 this could look something like this:\n\n.. code-block:: python\n\n    from falcon.api import API\n    from riemann_client.client import QueuedClient\n    from owl import Owl\n\n    class MonitoredAPI(Owl, API):\n\n        def __init__(self, *args, **kwds):\n            kwds[\"get_riemann_client\"] = lambda: QueuedClient()\n            kwds[\"owl_service\"] = \"MyAPI\"  # service name for Riemann\n            super().__init__(*args, **kwds)\n\n    api = MonitoredAPI()\n    # api.add_route(...)\n    # ...\n\nIn Riemann you get the end point and the request result status code as tags. To\nconvert them into their own `InfluxDB <https://influxdata.com/>`_ tags (\n``endpoint` and ``status-code``) for later use (for example in\n`Grafana <http://grafana.org/>`_) you could do something like this in your\nRiemann InfluxDB configuration:\n\n.. code-block:: clojure\n\n    (defn- parse-api-event\n     [event]\n     (if (contains? event :tags)\n       (let [[endpoint status-code & other] (:tags event)]\n         (assoc event\n           :endpoint endpoint\n           :status-code status-code))\n       event))\n\n    (let [index (index)]\n     (streams index\n       ; Write API monitoring to database\n       (where (service \"MyAPI\")\n         #(info (parse-api-event %))\n         (comp api-db parse-api-event))))\n\nCheck out the ``event_builder`` parameter if you want to customize the event\nparameters (change what service means or add a description for example).\n\n\nInstallation\n============\n\n.. code-block:: bash\n\n    $ pip install owl\n\n\nChangelog\n=========\n\n0.2.0\n-----\n\n - generate a message with status 500 when a request throws an exception", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/merry-bits/Owl", "keywords": "flacon riemann monitoring measure request time end-point duration", "license": "GPLv2", "maintainer": "", "maintainer_email": "", "name": "Owl", "package_url": "https://pypi.org/project/Owl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Owl/", "project_urls": {"Homepage": "https://github.com/merry-bits/Owl"}, "release_url": "https://pypi.org/project/Owl/0.2.1/", "requires_dist": ["pytz", "falcon (==1.0.0); extra == 'test'", "mock (==1.3.0); extra == 'test'", "nose (==1.3.7); extra == 'test'", "riemann-client (==6.3.0); extra == 'test'"], "requires_python": "", "summary": "Monitor Falcon with Riemann", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"owl\">\n<h2>Owl</h2>\n<a href=\"https://travis-ci.org/merry-bits/Owl?branch=master\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/merry-bits/Owl.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3ebb4194f5959527504c9055b301cabc5c1770ae/68747470733a2f2f6170692e7472617669732d63692e6f72672f6d657272792d626974732f4f776c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Measure how long your <a href=\"http://falconframework.org/\" rel=\"nofollow\">Falcon</a> requests take and\nsend each measurement as an event to <a href=\"http://riemann.io/\" rel=\"nofollow\">Riemann</a>.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Owl is designed to be a mix-in class for API. To use Owl you create your own\nAPI class providing configuration parameters for Owl.</p>\n<p>In Python 3 this could look something like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">falcon.api</span> <span class=\"kn\">import</span> <span class=\"n\">API</span>\n<span class=\"kn\">from</span> <span class=\"nn\">riemann_client.client</span> <span class=\"kn\">import</span> <span class=\"n\">QueuedClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">owl</span> <span class=\"kn\">import</span> <span class=\"n\">Owl</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MonitoredAPI</span><span class=\"p\">(</span><span class=\"n\">Owl</span><span class=\"p\">,</span> <span class=\"n\">API</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">):</span>\n        <span class=\"n\">kwds</span><span class=\"p\">[</span><span class=\"s2\">\"get_riemann_client\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">QueuedClient</span><span class=\"p\">()</span>\n        <span class=\"n\">kwds</span><span class=\"p\">[</span><span class=\"s2\">\"owl_service\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"MyAPI\"</span>  <span class=\"c1\"># service name for Riemann</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwds</span><span class=\"p\">)</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">MonitoredAPI</span><span class=\"p\">()</span>\n<span class=\"c1\"># api.add_route(...)</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p>In Riemann you get the end point and the request result status code as tags. To\nconvert them into their own <a href=\"https://influxdata.com/\" rel=\"nofollow\">InfluxDB</a> tags (\n<tt>endpoint` and <span class=\"pre\">``status-code</span></tt>) for later use (for example in\n<a href=\"http://grafana.org/\" rel=\"nofollow\">Grafana</a>) you could do something like this in your\nRiemann InfluxDB configuration:</p>\n<pre><span class=\"p\">(</span><span class=\"kd\">defn- </span><span class=\"nv\">parse-api-event</span>\n <span class=\"p\">[</span><span class=\"nv\">event</span><span class=\"p\">]</span>\n <span class=\"p\">(</span><span class=\"k\">if </span><span class=\"p\">(</span><span class=\"nb\">contains? </span><span class=\"nv\">event</span> <span class=\"ss\">:tags</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[[</span><span class=\"nv\">endpoint</span> <span class=\"nv\">status-code</span> <span class=\"o\">&amp;</span> <span class=\"nv\">other</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"ss\">:tags</span> <span class=\"nv\">event</span><span class=\"p\">)]</span>\n     <span class=\"p\">(</span><span class=\"nb\">assoc </span><span class=\"nv\">event</span>\n       <span class=\"ss\">:endpoint</span> <span class=\"nv\">endpoint</span>\n       <span class=\"ss\">:status-code</span> <span class=\"nv\">status-code</span><span class=\"p\">))</span>\n   <span class=\"nv\">event</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">let </span><span class=\"p\">[</span><span class=\"nb\">index </span><span class=\"p\">(</span><span class=\"nf\">index</span><span class=\"p\">)]</span>\n <span class=\"p\">(</span><span class=\"nf\">streams</span> <span class=\"nv\">index</span>\n   <span class=\"c1\">; Write API monitoring to database</span>\n   <span class=\"p\">(</span><span class=\"nf\">where</span> <span class=\"p\">(</span><span class=\"nf\">service</span> <span class=\"s\">\"MyAPI\"</span><span class=\"p\">)</span>\n     <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"nf\">info</span> <span class=\"p\">(</span><span class=\"nf\">parse-api-event</span> <span class=\"nv\">%</span><span class=\"p\">))</span>\n     <span class=\"p\">(</span><span class=\"nb\">comp </span><span class=\"nv\">api-db</span> <span class=\"nv\">parse-api-event</span><span class=\"p\">))))</span>\n</pre>\n<p>Check out the <tt>event_builder</tt> parameter if you want to customize the event\nparameters (change what service means or add a description for example).</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install owl\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.2.0</span></h2>\n<blockquote>\n<ul>\n<li>generate a message with status 500 when a request throws an exception</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2131183, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5a791108037cbec66391d09f66770ab6", "sha256": "17ed5b3907ef0b4e4bc6bd2c3e0752f305a94c3d6a87e4fbac3a3032e6501103"}, "downloads": -1, "filename": "Owl-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5a791108037cbec66391d09f66770ab6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7968, "upload_time": "2016-02-10T11:22:58", "upload_time_iso_8601": "2016-02-10T11:22:58.820605Z", "url": "https://files.pythonhosted.org/packages/ca/ea/86434a7db75a632f6819636dec2badbf2c4a29ef769b226ff0d0d9b5dea4/Owl-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "90802186f5d24ae8dfc49d1efec889e1", "sha256": "be255f780f3d8cffceb0cbea874ee6caf5c89628cabb3720c84dc67fa8f29ebd"}, "downloads": -1, "filename": "Owl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "90802186f5d24ae8dfc49d1efec889e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5735, "upload_time": "2016-02-10T11:23:04", "upload_time_iso_8601": "2016-02-10T11:23:04.469530Z", "url": "https://files.pythonhosted.org/packages/14/9e/c7a9f1c81efa48324b32a62493306d6fb4fcd6ff7e092e10931cad2ed867/Owl-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "296bb1e40c02ea0d3adb95373caca8f4", "sha256": "f519e3bc977e430fbd0fa9e7e529420ac804ec3108c9d84d82339b22284bd88d"}, "downloads": -1, "filename": "Owl-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "296bb1e40c02ea0d3adb95373caca8f4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8134, "upload_time": "2016-03-07T19:26:38", "upload_time_iso_8601": "2016-03-07T19:26:38.473570Z", "url": "https://files.pythonhosted.org/packages/62/10/110f2e2f9c2b8e41f01eb009e6be34a89e64ae67f73ecec1b7524679447d/Owl-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7dd24df82b4289311e2a5701a33b9fe", "sha256": "eedb26a2e9d6e83d0ce8bc887ed263346db1d705073c3e24843a3c57b072e052"}, "downloads": -1, "filename": "Owl-0.1.0.tar.gz", "has_sig": true, "md5_digest": "e7dd24df82b4289311e2a5701a33b9fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5819, "upload_time": "2016-03-07T19:27:06", "upload_time_iso_8601": "2016-03-07T19:27:06.828930Z", "url": "https://files.pythonhosted.org/packages/c8/70/14a10288703550746a8181a86d44ff488edaef4a159577a5d493897ecd14/Owl-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "03235e3695cc8a3b585084e03db7b584", "sha256": "ad6b2d6a0375c12c4f0b9ebd943c2c4bf3a14dfcfa53de28b179f2bf8b8d9ef1"}, "downloads": -1, "filename": "Owl-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03235e3695cc8a3b585084e03db7b584", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8332, "upload_time": "2016-05-24T14:25:03", "upload_time_iso_8601": "2016-05-24T14:25:03.365594Z", "url": "https://files.pythonhosted.org/packages/ac/bb/c9a09395add793fe4841ef40b1ee5cd64421bbed1657f7d046f496351ddb/Owl-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "838ca07b336ae5843e7534da0a1446cb", "sha256": "5153396456dbb39562c095552448f5e49f5aaaa5cb3ddafb9bf6bd3ed30b00ad"}, "downloads": -1, "filename": "Owl-0.2.1.tar.gz", "has_sig": false, "md5_digest": "838ca07b336ae5843e7534da0a1446cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5980, "upload_time": "2016-05-24T14:25:35", "upload_time_iso_8601": "2016-05-24T14:25:35.204668Z", "url": "https://files.pythonhosted.org/packages/3f/04/dc007de1e3129e54d1a79fadf198eb07848c1d902321c0b6ca40461518bb/Owl-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03235e3695cc8a3b585084e03db7b584", "sha256": "ad6b2d6a0375c12c4f0b9ebd943c2c4bf3a14dfcfa53de28b179f2bf8b8d9ef1"}, "downloads": -1, "filename": "Owl-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03235e3695cc8a3b585084e03db7b584", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8332, "upload_time": "2016-05-24T14:25:03", "upload_time_iso_8601": "2016-05-24T14:25:03.365594Z", "url": "https://files.pythonhosted.org/packages/ac/bb/c9a09395add793fe4841ef40b1ee5cd64421bbed1657f7d046f496351ddb/Owl-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "838ca07b336ae5843e7534da0a1446cb", "sha256": "5153396456dbb39562c095552448f5e49f5aaaa5cb3ddafb9bf6bd3ed30b00ad"}, "downloads": -1, "filename": "Owl-0.2.1.tar.gz", "has_sig": false, "md5_digest": "838ca07b336ae5843e7534da0a1446cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5980, "upload_time": "2016-05-24T14:25:35", "upload_time_iso_8601": "2016-05-24T14:25:35.204668Z", "url": "https://files.pythonhosted.org/packages/3f/04/dc007de1e3129e54d1a79fadf198eb07848c1d902321c0b6ca40461518bb/Owl-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:30 2020"}