{"info": {"author": "Stark Bank", "author_email": "developers@starkbank.com", "bugtrack_url": null, "classifiers": [], "description": "# Stark Bank Python SDK Beta\n\nWelcome to the Stark Bank Python SDK! This tool is made for Python \ndevelopers who want to easily integrate with our API.\nThis SDK version is compatible with the Stark Bank API v2.\n\nIf you have no idea what Stark Bank is, check out our [website](https://www.starkbank.com/) \nand discover a world where receiving or making payments \nis as easy as sending a text message to your client!\n\n## Supported Python Versions\n\nThis library supports the following Python versions:\n\n* Python 2.7\n* Python 3.5+\n\n## Stark Bank API documentation\n\nFeel free to take a look at our [API docs](https://www.starkbank.com/docs/api).\n\n## Versioning\n\nThis project adheres to the following versioning pattern:\n\nGiven a version number MAJOR.MINOR.PATCH, increment:\n\n- MAJOR version when the **API** version is incremented. This may include backwards incompatible changes;\n- MINOR version when **breaking changes** are introduced OR **new functionalities** are added in a backwards compatible manner;\n- PATCH version when backwards compatible bug **fixes** are implemented.\n\n## Setup\n\n### 1. Install our SDK\n\n1.1 To install the package with pip, run:\n\n```sh\npip install starkbank\n```\n\n1.2 To install from source, clone the repo and run:\n\n```sh\npython setup.py install\n```\n\n### 2. Create your Private and Public Keys\n\nWe use ECDSA. That means you need to generate a secp256k1 private\nkey to sign your requests to our API, and register your public key\nwith us so we can validate those requests.\n\nYou can use one of following methods:\n\n2.1. Check out the options in our [tutorial](https://starkbank.com/faq/how-to-create-ecdsa-keys).\n\n2.2. Use our SDK:\n\n```python\nimport starkbank\n\nprivateKey, publicKey = starkbank.key.create()\n\n# or, to also save .pem files in a specific path\nprivateKey, publicKey = starkbank.key.create(\"file/keys/\")\n```\n\n**NOTE**: When you are creating a new Project, it is recommended that you create the\nkeys inside the infrastructure that will use it, in order to avoid risky internet\ntransmissions of your **private-key**. Then you can export the **public-key** alone to the\ncomputer where it will be used in the new Project creation.\n\n### 3. Create a Project\n\nYou need a project for direct API integrations. To create one in Sandbox:\n\n3.1. Log into [Starkbank Sandbox](https://sandbox.web.starkbank.com)\n\n3.2. Go to Menu > Usu\u00e1rios (Users) > Projetos (Projects)\n\n3.3. Create a Project: Give it a name and upload the public key you created in section 2.\n\n3.4. After creating the Project, get its Project ID\n\n3.5. Use the Project ID and private key to create the object below:\n\n```python\nimport starkbank\n\n# Get your private key from an environment variable or an encrypted database.\n# This is only an example of a private key content. You should use your own key.\nprivate_key_content = \"\"\"\n-----BEGIN EC PARAMETERS-----\nBgUrgQQACg==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAK\noUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1\nIF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==\n-----END EC PRIVATE KEY-----\n\"\"\"\n\nproject = starkbank.Project(\n    environment=\"sandbox\",\n    id=\"5656565656565656\",\n    private_key=private_key_content\n)\n```\n\nNOTE 1: Never hard-code your private key. Get it from an environment variable or an encrypted database.\n\nNOTE 2: We support `\"sandbox\"` and `\"production\"` as environments.\n\nNOTE 3: The project you created in `sandbox` does not exist in `production` and vice versa.\n\n\n### 4. Setting up the user\n\nThere are two kinds of users that can access our API: **Project** and **Member**.\n\n- `Member` is the one you use when you log into our webpage with your e-mail.\n- `Project` is designed for integrations and is the one meant for our SDK.\n\nThere are two ways to inform the user to the SDK:\n \n4.1 Passing the user as argument in all functions:\n\n```python\nimport starkbank\n\nbalance = starkbank.balance.get(user=project)\n```\n\n4.2 Set it as a default user in the SDK:\n\n```python\nimport starkbank\n\nstarkbank.user = project\n\nbalance = starkbank.balance.get()\n```\n\nJust select the way of passing the project user that is more convenient to you.\nOn all following examples we will assume a default user has been set.\n\n## Testing in Sandbox\n\nYour initial balance is zero. For many operations in Stark Bank, you'll need funds\nin your account, which can be added to your balance by creating a Boleto. \n\nIn the Sandbox environment, 90% of the created Boletos will be automatically paid,\nso there's nothing else you need to do to add funds to your account. Just create\na few and wait around a bit.\n\nIn Production, you (or one of your clients) will need to actually pay this Boleto\nfor the value to be credited to your account.\n\n\n## Usage\n\nHere are a few examples on how to use the SDK. If you have any doubts, use the built-in\n`help()` function to get more info on the desired functionality\n(for example: `help(starkbank.boleto.create)`)\n\n### Get balance\n\nTo know how much money you have in your workspace, run:\n\n```python\nimport starkbank\n\nbalance = starkbank.balance.get()\n\nprint(balance)\n```\n\n### Create boletos\n\nYou can create boletos to charge customers or to receive money from accounts\nyou have in other banks.\n\n```python\n# coding: utf-8\nimport starkbank\nfrom datetime import datetime\n\n\nboletos = starkbank.boleto.create([\n    starkbank.Boleto(\n        amount=23571,  # R$ 235,71 \n        name=\"Buzz Aldrin\",\n        tax_id=\"012.345.678-90\", \n        street_line_1=\"Av. Paulista, 200\", \n        street_line_2=\"10 andar\",\n        district=\"Bela Vista\", \n        city=\"S\u00e3o Paulo\",\n        state_code=\"SP\",\n        zip_code=\"01310-000\",\n        due=datetime(2020, 3, 20),\n        fine=5,  # 5%\n        interest=2.5,  # 2.5% per month\n    ),\n])\n\nfor boleto in boletos:\n    print(boleto)\n```\n\n**Note**: Instead of using Boleto objects, you can also pass each boleto element in dictionary format\n\n### Get boleto\n\nAfter its creation, information on a boleto may be retrieved by passing its id. \nIts status indicates whether it's been paid.\n\n```python\nimport starkbank\n\nboleto = starkbank.boleto.get(\"5155165527080960\")\n\nprint(boleto)\n```\n\n### Get boleto PDF\n\nAfter its creation, a boleto PDF may be retrieved by passing its id. \n\n```python\nimport starkbank\n\npdf = starkbank.boleto.pdf(\"5155165527080960\")\n\nwith open(\"boleto.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n### Delete boleto\n\nYou can also cancel a boleto by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\nboleto = starkbank.boleto.delete(\"5155165527080960\")\n\nprint(boleto)\n```\n\n### Query boletos\n\nYou can get a list of created boletos given some filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\nboletos = starkbank.boleto.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 3, 1)\n)\n\nfor boleto in boletos:\n    print(boleto)\n```\n\n### Query boleto logs\n\nLogs are pretty important to understand the life cycle of a boleto.\n\n```python\nimport starkbank\n\nlogs = starkbank.boleto.log.query(limit=150)\n\nfor log in logs:\n    print(log)\n```\n\n### Get a boleto log\n\nYou can get a single log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.boleto.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n### Create transfers\n\nYou can also create transfers in the SDK (TED/DOC).\n\n```python\nimport starkbank\n\ntransfers = starkbank.transfer.create([\n    starkbank.Transfer(\n        amount=100,\n        bank_code=\"033\",\n        branch_code=\"0001\",\n        account_number=\"10000-0\",\n        tax_id=\"012.345.678-90\",\n        name=\"Tony Stark\",\n        tags=[\"iron\", \"suit\"]\n    ),\n    starkbank.Transfer(\n        amount=200,\n        bank_code=\"341\",\n        branch_code=\"1234\",\n        account_number=\"123456-7\",\n        tax_id=\"012.345.678-90\",\n        name=\"Jon Snow\",\n        tags=[]\n    )\n])\n\nfor transfer in transfers:\n    print(transfer)\n```\n\n**Note**: Instead of using Transfer objects, you can also pass each transfer element in dictionary format\n\n### Query transfers\n\nYou can query multiple transfers according to filters.\n\n```python\nimport starkbank\nfrom datetime import datetime\n\ntransfers = starkbank.transfer.query(\n    after=datetime(2020, 1, 1),\n    before=datetime(2020, 4, 1)\n)\n\nfor transfer in transfers:\n    print(transfer.name)\n```\n\n### Get transfer\n\nTo get a single transfer by its id, run:\n\n```python\nimport starkbank\n\ntransfer = starkbank.transfer.get(\"5155165527080960\")\n\nprint(transfer)\n```\n\n### Get transfer PDF\n\nA transfer PDF may also be retrieved by passing its id.\nThis operation is only valid if the transfer status is \"processing\" or \"success\". \n\n```python\nimport starkbank\n\npdf = starkbank.transfer.pdf(\"5155165527080960\")\n\nwith open(\"transfer.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n### Query transfer logs\n\nYou can query transfer logs to better understand transfer life cycles.\n\n```python\nimport starkbank\n\nlogs = starkbank.transfer.log.query(limit=50)\n\nfor log in logs:\n    print(log.id)\n```\n\n### Get a transfer log\n\nYou can also get a specific log by its id.\n\n```python\nimport starkbank\n\nlog = starkbank.transfer.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n### Pay a boleto\n\nPaying a boleto is also simple.\n\n```python\nimport starkbank\n\npayments = starkbank.boletopayment.create([\n    starkbank.BoletoPayment(\n        line=\"34191.09008 61207.727308 71444.640008 5 81310001234321\",\n        tax_id=\"012.345.678-90\",\n        scheduled=\"2020-03-13\",\n        description=\"take my money\",\n        tags=[\"take\", \"my\", \"money\"],\n    ),\n    starkbank.BoletoPayment(\n        bar_code=\"34197819200000000011090063609567307144464000\",\n        tax_id=\"012.345.678-90\",\n        scheduled=\"2020-03-14\",\n        description=\"take my money one more time\",\n        tags=[\"again\"],\n    ),\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using BoletoPayment objects, you can also pass each payment element in dictionary format\n\n### Get boleto payment\n\nTo get a single boleto payment by its id, run:\n\n```python\nimport starkbank\n\npayment = starkbank.boletopayment.get(\"19278361897236187236\")\n\nprint(payment)\n```\n\n### Get boleto payment PDF\n\nAfter its creation, a boleto payment PDF may be retrieved by passing its id. \n\n```python\nimport starkbank\n\npdf = starkbank.boletopayment.pdf(\"5155165527080960\")\n\nwith open(\"boleto-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n### Delete boleto payment\n\nYou can also cancel a boleto payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.boletopayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n### Query boleto payments\n\nYou can search for boleto payments using filters. \n\n```python\nimport starkbank\n\npayments = starkbank.boletopayment.query(\n    tags=[\"company_1\", \"company_2\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n### Query boleto payment logs\n\nSearches are also possible with boleto payment logs:\n\n```python\nimport starkbank\n\nlogs = starkbank.boletopayment.log.query(\n    payment_ids=[\"5155165527080960\", \"76551659167801921\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n\n### Get boleto payment log\n\nYou can also get a boleto payment log by specifying its id.\n\n```python\nimport starkbank\n\nlog = starkbank.boletopayment.log.get(\"5155165527080960\")\n\nprint(log)\n```\n\n### Create utility payment\n\nIts also simple to pay utility bills (such as electricity and water bills) in the SDK.\n\n```python\nimport starkbank\n\npayments = starkbank.utilitypayment.create([\n    starkbank.UtilityPayment(\n        line=\"34197819200000000011090063609567307144464000\",\n        scheduled=\"2020-03-13\",\n        description=\"take my money\",\n        tags=[\"take\", \"my\", \"money\"],\n    ),\n    starkbank.UtilityPayment(\n        bar_code=\"34191.09008 61207.727308 71444.640008 5 81310001234321\",\n        scheduled=\"2020-03-14\",\n        description=\"take my money one more time\",\n        tags=[\"again\"],\n    ),\n])\n\nfor payment in payments:\n    print(payment)\n```\n\n**Note**: Instead of using UtilityPayment objects, you can also pass each payment element in dictionary format\n\n### Query utility payments\n\nTo search for utility payments using filters, run:\n\n```python\nimport starkbank\n\npayments = starkbank.utilitypayment.query(\n    tags=[\"electricity\", \"gas\"]\n)\n\nfor payment in payments:\n    print(payment)\n```\n\n### Get utility payment\n\nYou can get a specific bill by its id:\n\n```python\nimport starkbank\n\npayment = starkbank.utilitypayment.get(\"5155165527080960\")\n\nprint(payment)\n```\n\n### Get utility payment PDF\n\nAfter its creation, a utility payment PDF may also be retrieved by passing its id. \n\n```python\nimport starkbank\n\npdf = starkbank.utilitypayment.pdf(\"5155165527080960\")\n\nwith open(\"electricity-payment.pdf\", \"wb\") as file:\n    file.write(pdf)\n```\n\nBe careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.\n\n### Delete utility payment\n\nYou can also cancel a utility payment by its id.\nNote that this is not possible if it has been processed already.\n\n```python\nimport starkbank\n\npayment = starkbank.utilitypayment.delete(\"5155165527080960\")\n\nprint(payment)\n```\n\n### Query utility bill payment logs\n\nYou can search for payments by specifying filters. Use this to understand the\nbills life cycles.\n\n```python\nimport starkbank\n\nlogs = starkbank.utilitypayment.log.query(\n    payment_ids=[\"102893710982379182\", \"92837912873981273\"],\n)\n\nfor log in logs:\n    print(log)\n```\n\n### Get utility bill payment log\n\nIf you want to get a specific payment log by its id, just run:\n\n```python\nimport starkbank\n\nlog = starkbank.utilitypayment.log.get(\"1902837198237992\")\n\nprint(log)\n```\n\n### Create transactions\n\nTo send money between Stark Bank accounts, you can create transactions:\n\n```python\nimport starkbank\n\ntransactions = starkbank.transaction.create([\n    starkbank.Transaction(\n        amount=100,  # (R$ 1.00)\n        receiver_id=\"1029378109327810\",\n        description=\"Transaction to dear provider\",\n        external_id=\"12345\",  # so we can block anything you send twice by mistake\n        tags=[\"provider\"]\n    ),\n    starkbank.Transaction(\n        amount=234,  # (R$ 2.34)\n        receiver_id=\"2093029347820947\",\n        description=\"Transaction to the other provider\",\n        external_id=\"12346\",  # so we can block anything you send twice by mistake\n        tags=[\"provider\"]\n    ),\n])\n\nfor transaction in transactions:\n    print(transaction)\n```\n\n**Note**: Instead of using Transaction objects, you can also pass each transaction element in dictionary format\n\n### Query transactions\n\nTo understand your balance changes (bank statement), you can query\ntransactions. Note that our system creates transactions for you when\nyou receive boleto payments, pay a bill or make transfers, for example.\n\n```python\nimport starkbank\n\ntransactions = starkbank.transaction.query(\n    after=\"2020-01-01\",\n    before=\"2020-03-01\"\n)\n\nfor transaction in transactions:\n    print(transaction)\n```\n\n### Get transaction\n\nYou can get a specific transaction by its id:\n\n```python\nimport starkbank\n\ntransaction = starkbank.transaction.get(\"5155165527080960\")\n\nprint(transaction)\n```\n\n### Create webhook subscription\n\nTo create a webhook subscription and be notified whenever an event occurs, run:\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.create(\n    url=\"https://webhook.site/dd784f26-1d6a-4ca6-81cb-fda0267761ec\",\n    subscriptions=[\"transfer\", \"boleto\", \"boleto-payment\", \"utility-payment\"],\n)\n\nprint(webhook)\n```\n\n### Query webhooks\n\nTo search for registered webhooks, run:\n\n```python\nimport starkbank\n\nwebhooks = starkbank.webhook.query()\n\nfor webhook in webhooks:\n    print(webhook)\n```\n\n### Get webhook\n\nYou can get a specific webhook by its id.\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.get(\"10827361982368179\")\n\nprint(webhook)\n```\n\n### Delete webhook\n\nYou can also delete a specific webhook by its id.\n\n```python\nimport starkbank\n\nwebhook = starkbank.webhook.delete(\"10827361982368179\")\n\nprint(webhook)\n```\n\n### Process webhook events\n\nIts easy to process events that arrived in your webhook. Remember to pass the\nsignature header so the SDK can make sure its really StarkBank that sent you\nthe event.\n\n```python\nimport starkbank\n\nresponse = listen()  # this is the method you made to get the events posted to your webhook\n\nevent = starkbank.event.parse(content=response.content, signature=response.headers[\"Digital-Signature\"])\n\nif event.subscription == \"transfer\":\n    print(event.log.transfer)\n    \nelif event.subscription == \"boleto\":\n    print(event.log.boleto)\n    \nelif event.subscription == \"boleto-payment\":\n    print(event.log.payment)\n```\n\n### Query webhook events\n\nTo search for webhooks events, run:\n\n```python\nimport starkbank\n\nevents = starkbank.event.query(after=\"2020-03-20\", is_delivered=False)\n\nfor event in events:\n    print(event)\n```\n\n### Get webhook event\n\nYou can get a specific webhook event by its id.\n\n```python\nimport starkbank\n\nevent = starkbank.event.get(\"10827361982368179\")\n\nprint(event)\n```\n\n### Delete webhook event\n\nYou can also delete a specific webhook event by its id.\n\n```python\nimport starkbank\n\nevent = starkbank.event.delete(\"10827361982368179\")\n\nprint(event)\n```\n\n### Set webhook events as delivered\n\nThis can be used in case you've lost events.\nWith this function, you can manually set events retrieved from the API as\n\"delivered\" to help future event queries with `is_delivered=False`.\n\n```python\nimport starkbank\n\nevent = starkbank.event.update(id=\"129837198237192\", is_delivered=True)\n\nprint(event)\n```\n\n## Handling errors\n\nThe SDK may raise one of four types of errors: __InputErrors__, __InternalServerError__, __UnknownError__, __InvalidSignatureError__\n\n__InputErrors__ will be raised whenever the API detects an error in your request (status code 400).\nIf you catch such an error, you can get its elements to verify each of the\nindividual errors that were detected in your request by the API.\nFor example:\n\n```python\nimport starkbank\n\ntry:\n    transactions = starkbank.transaction.create([\n        starkbank.Transaction(\n            amount=99999999999999,  # (R$ 999,999,999,999.99)\n            receiver_id=\"1029378109327810\",\n            description=\".\",\n            external_id=\"12345\",  # so we can block anything you send twice by mistake\n            tags=[\"provider\"]\n        ),\n    ])\nexcept starkbank.error.InputErrors as exception:\n    for error in exception.errors:\n        print(error.code)\n        print(error.message)\n```\n\n__InternalServerError__ will be raised if the API runs into an internal error.\nIf you ever stumble upon this one, rest assured that the development team\nis already rushing in to fix the mistake and get you back up to speed.\n\n__UnknownError__ will be raised if a request encounters an error that is\nneither __InputErrors__ nor an __InternalServerError__, such as connectivity problems.\n\n__InvalidSignatureError__ will be raised specifically by starkbank.event.parse()\nwhen the provided content and signature do not check out with the Stark Bank public\nkey.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/starkbank/sdk-python", "keywords": "stark bank,starkbank,sdk,open banking,openbanking,banking,open,stark", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "starkbank", "package_url": "https://pypi.org/project/starkbank/", "platform": "", "project_url": "https://pypi.org/project/starkbank/", "project_urls": {"Homepage": "https://github.com/starkbank/sdk-python"}, "release_url": "https://pypi.org/project/starkbank/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "SDK to facilitate Python integrations with Stark Bank", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Stark Bank Python SDK Beta</h1>\n<p>Welcome to the Stark Bank Python SDK! This tool is made for Python\ndevelopers who want to easily integrate with our API.\nThis SDK version is compatible with the Stark Bank API v2.</p>\n<p>If you have no idea what Stark Bank is, check out our <a href=\"https://www.starkbank.com/\" rel=\"nofollow\">website</a>\nand discover a world where receiving or making payments\nis as easy as sending a text message to your client!</p>\n<h2>Supported Python Versions</h2>\n<p>This library supports the following Python versions:</p>\n<ul>\n<li>Python 2.7</li>\n<li>Python 3.5+</li>\n</ul>\n<h2>Stark Bank API documentation</h2>\n<p>Feel free to take a look at our <a href=\"https://www.starkbank.com/docs/api\" rel=\"nofollow\">API docs</a>.</p>\n<h2>Versioning</h2>\n<p>This project adheres to the following versioning pattern:</p>\n<p>Given a version number MAJOR.MINOR.PATCH, increment:</p>\n<ul>\n<li>MAJOR version when the <strong>API</strong> version is incremented. This may include backwards incompatible changes;</li>\n<li>MINOR version when <strong>breaking changes</strong> are introduced OR <strong>new functionalities</strong> are added in a backwards compatible manner;</li>\n<li>PATCH version when backwards compatible bug <strong>fixes</strong> are implemented.</li>\n</ul>\n<h2>Setup</h2>\n<h3>1. Install our SDK</h3>\n<p>1.1 To install the package with pip, run:</p>\n<pre>pip install starkbank\n</pre>\n<p>1.2 To install from source, clone the repo and run:</p>\n<pre>python setup.py install\n</pre>\n<h3>2. Create your Private and Public Keys</h3>\n<p>We use ECDSA. That means you need to generate a secp256k1 private\nkey to sign your requests to our API, and register your public key\nwith us so we can validate those requests.</p>\n<p>You can use one of following methods:</p>\n<p>2.1. Check out the options in our <a href=\"https://starkbank.com/faq/how-to-create-ecdsa-keys\" rel=\"nofollow\">tutorial</a>.</p>\n<p>2.2. Use our SDK:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">privateKey</span><span class=\"p\">,</span> <span class=\"n\">publicKey</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or, to also save .pem files in a specific path</span>\n<span class=\"n\">privateKey</span><span class=\"p\">,</span> <span class=\"n\">publicKey</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">\"file/keys/\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>NOTE</strong>: When you are creating a new Project, it is recommended that you create the\nkeys inside the infrastructure that will use it, in order to avoid risky internet\ntransmissions of your <strong>private-key</strong>. Then you can export the <strong>public-key</strong> alone to the\ncomputer where it will be used in the new Project creation.</p>\n<h3>3. Create a Project</h3>\n<p>You need a project for direct API integrations. To create one in Sandbox:</p>\n<p>3.1. Log into <a href=\"https://sandbox.web.starkbank.com\" rel=\"nofollow\">Starkbank Sandbox</a></p>\n<p>3.2. Go to Menu &gt; Usu\u00e1rios (Users) &gt; Projetos (Projects)</p>\n<p>3.3. Create a Project: Give it a name and upload the public key you created in section 2.</p>\n<p>3.4. After creating the Project, get its Project ID</p>\n<p>3.5. Use the Project ID and private key to create the object below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"c1\"># Get your private key from an environment variable or an encrypted database.</span>\n<span class=\"c1\"># This is only an example of a private key content. You should use your own key.</span>\n<span class=\"n\">private_key_content</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">-----BEGIN EC PARAMETERS-----</span>\n<span class=\"s2\">BgUrgQQACg==</span>\n<span class=\"s2\">-----END EC PARAMETERS-----</span>\n<span class=\"s2\">-----BEGIN EC PRIVATE KEY-----</span>\n<span class=\"s2\">MHQCAQEEIMCwW74H6egQkTiz87WDvLNm7fK/cA+ctA2vg/bbHx3woAcGBSuBBAAK</span>\n<span class=\"s2\">oUQDQgAE0iaeEHEgr3oTbCfh8U2L+r7zoaeOX964xaAnND5jATGpD/tHec6Oe9U1</span>\n<span class=\"s2\">IF16ZoTVt1FzZ8WkYQ3XomRD4HS13A==</span>\n<span class=\"s2\">-----END EC PRIVATE KEY-----</span>\n<span class=\"s2\">\"\"\"</span>\n\n<span class=\"n\">project</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Project</span><span class=\"p\">(</span>\n    <span class=\"n\">environment</span><span class=\"o\">=</span><span class=\"s2\">\"sandbox\"</span><span class=\"p\">,</span>\n    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"5656565656565656\"</span><span class=\"p\">,</span>\n    <span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"n\">private_key_content</span>\n<span class=\"p\">)</span>\n</pre>\n<p>NOTE 1: Never hard-code your private key. Get it from an environment variable or an encrypted database.</p>\n<p>NOTE 2: We support <code>\"sandbox\"</code> and <code>\"production\"</code> as environments.</p>\n<p>NOTE 3: The project you created in <code>sandbox</code> does not exist in <code>production</code> and vice versa.</p>\n<h3>4. Setting up the user</h3>\n<p>There are two kinds of users that can access our API: <strong>Project</strong> and <strong>Member</strong>.</p>\n<ul>\n<li><code>Member</code> is the one you use when you log into our webpage with your e-mail.</li>\n<li><code>Project</code> is designed for integrations and is the one meant for our SDK.</li>\n</ul>\n<p>There are two ways to inform the user to the SDK:</p>\n<p>4.1 Passing the user as argument in all functions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">project</span><span class=\"p\">)</span>\n</pre>\n<p>4.2 Set it as a default user in the SDK:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">project</span>\n\n<span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre>\n<p>Just select the way of passing the project user that is more convenient to you.\nOn all following examples we will assume a default user has been set.</p>\n<h2>Testing in Sandbox</h2>\n<p>Your initial balance is zero. For many operations in Stark Bank, you'll need funds\nin your account, which can be added to your balance by creating a Boleto.</p>\n<p>In the Sandbox environment, 90% of the created Boletos will be automatically paid,\nso there's nothing else you need to do to add funds to your account. Just create\na few and wait around a bit.</p>\n<p>In Production, you (or one of your clients) will need to actually pay this Boleto\nfor the value to be credited to your account.</p>\n<h2>Usage</h2>\n<p>Here are a few examples on how to use the SDK. If you have any doubts, use the built-in\n<code>help()</code> function to get more info on the desired functionality\n(for example: <code>help(starkbank.boleto.create)</code>)</p>\n<h3>Get balance</h3>\n<p>To know how much money you have in your workspace, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">balance</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">balance</span><span class=\"p\">)</span>\n</pre>\n<h3>Create boletos</h3>\n<p>You can create boletos to charge customers or to receive money from accounts\nyou have in other banks.</p>\n<pre><span class=\"c1\"># coding: utf-8</span>\n<span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n\n<span class=\"n\">boletos</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Boleto</span><span class=\"p\">(</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">23571</span><span class=\"p\">,</span>  <span class=\"c1\"># R$ 235,71 </span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Buzz Aldrin\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tax_id</span><span class=\"o\">=</span><span class=\"s2\">\"012.345.678-90\"</span><span class=\"p\">,</span> \n        <span class=\"n\">street_line_1</span><span class=\"o\">=</span><span class=\"s2\">\"Av. Paulista, 200\"</span><span class=\"p\">,</span> \n        <span class=\"n\">street_line_2</span><span class=\"o\">=</span><span class=\"s2\">\"10 andar\"</span><span class=\"p\">,</span>\n        <span class=\"n\">district</span><span class=\"o\">=</span><span class=\"s2\">\"Bela Vista\"</span><span class=\"p\">,</span> \n        <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"s2\">\"S\u00e3o Paulo\"</span><span class=\"p\">,</span>\n        <span class=\"n\">state_code</span><span class=\"o\">=</span><span class=\"s2\">\"SP\"</span><span class=\"p\">,</span>\n        <span class=\"n\">zip_code</span><span class=\"o\">=</span><span class=\"s2\">\"01310-000\"</span><span class=\"p\">,</span>\n        <span class=\"n\">due</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n        <span class=\"n\">fine</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>  <span class=\"c1\"># 5%</span>\n        <span class=\"n\">interest</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">,</span>  <span class=\"c1\"># 2.5% per month</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">boleto</span> <span class=\"ow\">in</span> <span class=\"n\">boletos</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">boleto</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: Instead of using Boleto objects, you can also pass each boleto element in dictionary format</p>\n<h3>Get boleto</h3>\n<p>After its creation, information on a boleto may be retrieved by passing its id.\nIts status indicates whether it's been paid.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">boleto</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">boleto</span><span class=\"p\">)</span>\n</pre>\n<h3>Get boleto PDF</h3>\n<p>After its creation, a boleto PDF may be retrieved by passing its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"boleto.pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.</p>\n<h3>Delete boleto</h3>\n<p>You can also cancel a boleto by its id.\nNote that this is not possible if it has been processed already.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">boleto</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">boleto</span><span class=\"p\">)</span>\n</pre>\n<h3>Query boletos</h3>\n<p>You can get a list of created boletos given some filters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">boletos</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">boleto</span> <span class=\"ow\">in</span> <span class=\"n\">boletos</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">boleto</span><span class=\"p\">)</span>\n</pre>\n<h3>Query boleto logs</h3>\n<p>Logs are pretty important to understand the life cycle of a boleto.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Get a boleto log</h3>\n<p>You can get a single log by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Create transfers</h3>\n<p>You can also create transfers in the SDK (TED/DOC).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">transfers</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"p\">(</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n        <span class=\"n\">bank_code</span><span class=\"o\">=</span><span class=\"s2\">\"033\"</span><span class=\"p\">,</span>\n        <span class=\"n\">branch_code</span><span class=\"o\">=</span><span class=\"s2\">\"0001\"</span><span class=\"p\">,</span>\n        <span class=\"n\">account_number</span><span class=\"o\">=</span><span class=\"s2\">\"10000-0\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tax_id</span><span class=\"o\">=</span><span class=\"s2\">\"012.345.678-90\"</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Tony Stark\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"iron\"</span><span class=\"p\">,</span> <span class=\"s2\">\"suit\"</span><span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Transfer</span><span class=\"p\">(</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"n\">bank_code</span><span class=\"o\">=</span><span class=\"s2\">\"341\"</span><span class=\"p\">,</span>\n        <span class=\"n\">branch_code</span><span class=\"o\">=</span><span class=\"s2\">\"1234\"</span><span class=\"p\">,</span>\n        <span class=\"n\">account_number</span><span class=\"o\">=</span><span class=\"s2\">\"123456-7\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tax_id</span><span class=\"o\">=</span><span class=\"s2\">\"012.345.678-90\"</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Jon Snow\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">transfer</span> <span class=\"ow\">in</span> <span class=\"n\">transfers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transfer</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: Instead of using Transfer objects, you can also pass each transfer element in dictionary format</p>\n<h3>Query transfers</h3>\n<p>You can query multiple transfers according to filters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">transfers</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">transfer</span> <span class=\"ow\">in</span> <span class=\"n\">transfers</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<h3>Get transfer</h3>\n<p>To get a single transfer by its id, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">transfer</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transfer</span><span class=\"p\">)</span>\n</pre>\n<h3>Get transfer PDF</h3>\n<p>A transfer PDF may also be retrieved by passing its id.\nThis operation is only valid if the transfer status is \"processing\" or \"success\".</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"transfer.pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.</p>\n<h3>Query transfer logs</h3>\n<p>You can query transfer logs to better understand transfer life cycles.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n</pre>\n<h3>Get a transfer log</h3>\n<p>You can also get a specific log by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Pay a boleto</h3>\n<p>Paying a boleto is also simple.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payments</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">BoletoPayment</span><span class=\"p\">(</span>\n        <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"34191.09008 61207.727308 71444.640008 5 81310001234321\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tax_id</span><span class=\"o\">=</span><span class=\"s2\">\"012.345.678-90\"</span><span class=\"p\">,</span>\n        <span class=\"n\">scheduled</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-13\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"take my money\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"take\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my\"</span><span class=\"p\">,</span> <span class=\"s2\">\"money\"</span><span class=\"p\">],</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">BoletoPayment</span><span class=\"p\">(</span>\n        <span class=\"n\">bar_code</span><span class=\"o\">=</span><span class=\"s2\">\"34197819200000000011090063609567307144464000\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tax_id</span><span class=\"o\">=</span><span class=\"s2\">\"012.345.678-90\"</span><span class=\"p\">,</span>\n        <span class=\"n\">scheduled</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-14\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"take my money one more time\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"again\"</span><span class=\"p\">],</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">payment</span> <span class=\"ow\">in</span> <span class=\"n\">payments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: Instead of using BoletoPayment objects, you can also pass each payment element in dictionary format</p>\n<h3>Get boleto payment</h3>\n<p>To get a single boleto payment by its id, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"19278361897236187236\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Get boleto payment PDF</h3>\n<p>After its creation, a boleto payment PDF may be retrieved by passing its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"boleto-payment.pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.</p>\n<h3>Delete boleto payment</h3>\n<p>You can also cancel a boleto payment by its id.\nNote that this is not possible if it has been processed already.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Query boleto payments</h3>\n<p>You can search for boleto payments using filters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payments</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"company_1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"company_2\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">payment</span> <span class=\"ow\">in</span> <span class=\"n\">payments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Query boleto payment logs</h3>\n<p>Searches are also possible with boleto payment logs:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">payment_ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">,</span> <span class=\"s2\">\"76551659167801921\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Get boleto payment log</h3>\n<p>You can also get a boleto payment log by specifying its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">boletopayment</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Create utility payment</h3>\n<p>Its also simple to pay utility bills (such as electricity and water bills) in the SDK.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payments</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">UtilityPayment</span><span class=\"p\">(</span>\n        <span class=\"n\">line</span><span class=\"o\">=</span><span class=\"s2\">\"34197819200000000011090063609567307144464000\"</span><span class=\"p\">,</span>\n        <span class=\"n\">scheduled</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-13\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"take my money\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"take\"</span><span class=\"p\">,</span> <span class=\"s2\">\"my\"</span><span class=\"p\">,</span> <span class=\"s2\">\"money\"</span><span class=\"p\">],</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">UtilityPayment</span><span class=\"p\">(</span>\n        <span class=\"n\">bar_code</span><span class=\"o\">=</span><span class=\"s2\">\"34191.09008 61207.727308 71444.640008 5 81310001234321\"</span><span class=\"p\">,</span>\n        <span class=\"n\">scheduled</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-14\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"take my money one more time\"</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"again\"</span><span class=\"p\">],</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">payment</span> <span class=\"ow\">in</span> <span class=\"n\">payments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: Instead of using UtilityPayment objects, you can also pass each payment element in dictionary format</p>\n<h3>Query utility payments</h3>\n<p>To search for utility payments using filters, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payments</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"electricity\"</span><span class=\"p\">,</span> <span class=\"s2\">\"gas\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">payment</span> <span class=\"ow\">in</span> <span class=\"n\">payments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Get utility payment</h3>\n<p>You can get a specific bill by its id:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Get utility payment PDF</h3>\n<p>After its creation, a utility payment PDF may also be retrieved by passing its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"electricity-payment.pdf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pdf</span><span class=\"p\">)</span>\n</pre>\n<p>Be careful not to accidentally enforce any encoding on the raw pdf content,\nas it may yield abnormal results in the final file, such as missing images\nand strange characters.</p>\n<h3>Delete utility payment</h3>\n<p>You can also cancel a utility payment by its id.\nNote that this is not possible if it has been processed already.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">payment</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Query utility bill payment logs</h3>\n<p>You can search for payments by specifying filters. Use this to understand the\nbills life cycles.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">payment_ids</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"102893710982379182\"</span><span class=\"p\">,</span> <span class=\"s2\">\"92837912873981273\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">logs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Get utility bill payment log</h3>\n<p>If you want to get a specific payment log by its id, just run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">utilitypayment</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"1902837198237992\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n</pre>\n<h3>Create transactions</h3>\n<p>To send money between Stark Bank accounts, you can create transactions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Transaction</span><span class=\"p\">(</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>  <span class=\"c1\"># (R$ 1.00)</span>\n        <span class=\"n\">receiver_id</span><span class=\"o\">=</span><span class=\"s2\">\"1029378109327810\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Transaction to dear provider\"</span><span class=\"p\">,</span>\n        <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"s2\">\"12345\"</span><span class=\"p\">,</span>  <span class=\"c1\"># so we can block anything you send twice by mistake</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"provider\"</span><span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Transaction</span><span class=\"p\">(</span>\n        <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">234</span><span class=\"p\">,</span>  <span class=\"c1\"># (R$ 2.34)</span>\n        <span class=\"n\">receiver_id</span><span class=\"o\">=</span><span class=\"s2\">\"2093029347820947\"</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Transaction to the other provider\"</span><span class=\"p\">,</span>\n        <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"s2\">\"12346\"</span><span class=\"p\">,</span>  <span class=\"c1\"># so we can block anything you send twice by mistake</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"provider\"</span><span class=\"p\">]</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">transaction</span> <span class=\"ow\">in</span> <span class=\"n\">transactions</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transaction</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong>: Instead of using Transaction objects, you can also pass each transaction element in dictionary format</p>\n<h3>Query transactions</h3>\n<p>To understand your balance changes (bank statement), you can query\ntransactions. Note that our system creates transactions for you when\nyou receive boleto payments, pay a bill or make transfers, for example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n    <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s2\">\"2020-01-01\"</span><span class=\"p\">,</span>\n    <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-01\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">transaction</span> <span class=\"ow\">in</span> <span class=\"n\">transactions</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transaction</span><span class=\"p\">)</span>\n</pre>\n<h3>Get transaction</h3>\n<p>You can get a specific transaction by its id:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">transaction</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"5155165527080960\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transaction</span><span class=\"p\">)</span>\n</pre>\n<h3>Create webhook subscription</h3>\n<p>To create a webhook subscription and be notified whenever an event occurs, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">webhook</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">webhook</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://webhook.site/dd784f26-1d6a-4ca6-81cb-fda0267761ec\"</span><span class=\"p\">,</span>\n    <span class=\"n\">subscriptions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"transfer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"boleto\"</span><span class=\"p\">,</span> <span class=\"s2\">\"boleto-payment\"</span><span class=\"p\">,</span> <span class=\"s2\">\"utility-payment\"</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"p\">)</span>\n</pre>\n<h3>Query webhooks</h3>\n<p>To search for registered webhooks, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">webhooks</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">webhook</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">webhook</span> <span class=\"ow\">in</span> <span class=\"n\">webhooks</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"p\">)</span>\n</pre>\n<h3>Get webhook</h3>\n<p>You can get a specific webhook by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">webhook</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">webhook</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"10827361982368179\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"p\">)</span>\n</pre>\n<h3>Delete webhook</h3>\n<p>You can also delete a specific webhook by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">webhook</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">webhook</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"10827361982368179\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">webhook</span><span class=\"p\">)</span>\n</pre>\n<h3>Process webhook events</h3>\n<p>Its easy to process events that arrived in your webhook. Remember to pass the\nsignature header so the SDK can make sure its really StarkBank that sent you\nthe event.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">listen</span><span class=\"p\">()</span>  <span class=\"c1\"># this is the method you made to get the events posted to your webhook</span>\n\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"Digital-Signature\"</span><span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">subscription</span> <span class=\"o\">==</span> <span class=\"s2\">\"transfer\"</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">transfer</span><span class=\"p\">)</span>\n    \n<span class=\"k\">elif</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">subscription</span> <span class=\"o\">==</span> <span class=\"s2\">\"boleto\"</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">boleto</span><span class=\"p\">)</span>\n    \n<span class=\"k\">elif</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">subscription</span> <span class=\"o\">==</span> <span class=\"s2\">\"boleto-payment\"</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">payment</span><span class=\"p\">)</span>\n</pre>\n<h3>Query webhook events</h3>\n<p>To search for webhooks events, run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s2\">\"2020-03-20\"</span><span class=\"p\">,</span> <span class=\"n\">is_delivered</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n</pre>\n<h3>Get webhook event</h3>\n<p>You can get a specific webhook event by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"10827361982368179\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n</pre>\n<h3>Delete webhook event</h3>\n<p>You can also delete a specific webhook event by its id.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"10827361982368179\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n</pre>\n<h3>Set webhook events as delivered</h3>\n<p>This can be used in case you've lost events.\nWith this function, you can manually set events retrieved from the API as\n\"delivered\" to help future event queries with <code>is_delivered=False</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"129837198237192\"</span><span class=\"p\">,</span> <span class=\"n\">is_delivered</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n</pre>\n<h2>Handling errors</h2>\n<p>The SDK may raise one of four types of errors: <strong>InputErrors</strong>, <strong>InternalServerError</strong>, <strong>UnknownError</strong>, <strong>InvalidSignatureError</strong></p>\n<p><strong>InputErrors</strong> will be raised whenever the API detects an error in your request (status code 400).\nIf you catch such an error, you can get its elements to verify each of the\nindividual errors that were detected in your request by the API.\nFor example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">starkbank</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">transactions</span> <span class=\"o\">=</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">([</span>\n        <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">Transaction</span><span class=\"p\">(</span>\n            <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">99999999999999</span><span class=\"p\">,</span>  <span class=\"c1\"># (R$ 999,999,999,999.99)</span>\n            <span class=\"n\">receiver_id</span><span class=\"o\">=</span><span class=\"s2\">\"1029378109327810\"</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\".\"</span><span class=\"p\">,</span>\n            <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"s2\">\"12345\"</span><span class=\"p\">,</span>  <span class=\"c1\"># so we can block anything you send twice by mistake</span>\n            <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"provider\"</span><span class=\"p\">]</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n<span class=\"k\">except</span> <span class=\"n\">starkbank</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">InputErrors</span> <span class=\"k\">as</span> <span class=\"n\">exception</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">error</span> <span class=\"ow\">in</span> <span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p><strong>InternalServerError</strong> will be raised if the API runs into an internal error.\nIf you ever stumble upon this one, rest assured that the development team\nis already rushing in to fix the mistake and get you back up to speed.</p>\n<p><strong>UnknownError</strong> will be raised if a request encounters an error that is\nneither <strong>InputErrors</strong> nor an <strong>InternalServerError</strong>, such as connectivity problems.</p>\n<p><strong>InvalidSignatureError</strong> will be raised specifically by starkbank.event.parse()\nwhen the provided content and signature do not check out with the Stark Bank public\nkey.</p>\n\n          </div>"}, "last_serial": 7165593, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d6d5f0c93d564f864f81cab8f01d3bdd", "sha256": "7d5647233257e6143af365c2c12d93a6532ec5e120484ab675194000cc4c8ea4"}, "downloads": -1, "filename": "starkbank-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d6d5f0c93d564f864f81cab8f01d3bdd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29868, "upload_time": "2020-04-15T01:13:32", "upload_time_iso_8601": "2020-04-15T01:13:32.438818Z", "url": "https://files.pythonhosted.org/packages/56/72/4e688fcdd64f9cdad9dea12967dafb55015e0f73cb7ecd000d98f974ed3f/starkbank-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "db20dbcf4e3ab11c85d7b44ce3c8f3e8", "sha256": "d38885b949d2e5737e135d721e51caeb0de289be14971a986d95ca8450603478"}, "downloads": -1, "filename": "starkbank-0.0.2.tar.gz", "has_sig": false, "md5_digest": "db20dbcf4e3ab11c85d7b44ce3c8f3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30500, "upload_time": "2020-04-16T15:30:18", "upload_time_iso_8601": "2020-04-16T15:30:18.814505Z", "url": "https://files.pythonhosted.org/packages/ee/52/7c3fe3f6637c9581b9609e38b665dc4d17826d15197bd3126664288f20c9/starkbank-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c3e2d84d2cc4d7668991eac4bd55b278", "sha256": "3b21b7aa911ca7f78adf9d7e0c2b59c2a2ab7f44a70bb62643df15197df5bc0d"}, "downloads": -1, "filename": "starkbank-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c3e2d84d2cc4d7668991eac4bd55b278", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28018, "upload_time": "2020-04-16T23:34:19", "upload_time_iso_8601": "2020-04-16T23:34:19.478970Z", "url": "https://files.pythonhosted.org/packages/54/79/8926f2019de64d6ffdf6db3d3bfab628a109f8b38208014b21d5868d58de/starkbank-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b15a5dadcc4661ed56f12dd227aadb25", "sha256": "d60096f5f109286c87b4ef97665fd412a41ff9e25a429bc9ea099ebaf4df589a"}, "downloads": -1, "filename": "starkbank-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b15a5dadcc4661ed56f12dd227aadb25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28884, "upload_time": "2020-04-18T00:43:50", "upload_time_iso_8601": "2020-04-18T00:43:50.455447Z", "url": "https://files.pythonhosted.org/packages/90/27/f4eb75b561943a52dc2bc2a36758034affe9a5325678d5e3ad3d3d90da69/starkbank-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a600f86fd3f72ada15f03f292a0aaeae", "sha256": "a112814c68e204f826ad5ca859656c3235a7a619635e6039d6657238e96de3e1"}, "downloads": -1, "filename": "starkbank-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a600f86fd3f72ada15f03f292a0aaeae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28889, "upload_time": "2020-04-18T01:03:24", "upload_time_iso_8601": "2020-04-18T01:03:24.825801Z", "url": "https://files.pythonhosted.org/packages/b7/c8/1f6ea0f5520cd6e4fd60263fab57502076d3720419588ec5c39a7a148701/starkbank-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ea47028300c0f28143ca5fdee405ea3b", "sha256": "6aa34856bd3be12b0345bac0b995c66f091742f6596ed019b5fad5e9cd4c0b7c"}, "downloads": -1, "filename": "starkbank-0.0.6.tar.gz", "has_sig": false, "md5_digest": "ea47028300c0f28143ca5fdee405ea3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28899, "upload_time": "2020-04-18T18:57:18", "upload_time_iso_8601": "2020-04-18T18:57:18.705000Z", "url": "https://files.pythonhosted.org/packages/7e/03/cf37fb60019b7f3ad50544d2049354c0667162173972959f9241139a7d4b/starkbank-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1829a45d9832947cecbe2b007ab5c1f5", "sha256": "2adc7cd888198ab4ca5b0df9578fc5358e7161cb3da6d8acb55f733653d82abc"}, "downloads": -1, "filename": "starkbank-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "1829a45d9832947cecbe2b007ab5c1f5", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 52569, "upload_time": "2020-04-19T02:17:53", "upload_time_iso_8601": "2020-04-19T02:17:53.356170Z", "url": "https://files.pythonhosted.org/packages/01/b5/639d024022de7c881b4f79624f49bfaabb209deb09961e1b0e54c6dd2628/starkbank-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d81ce0862bc57c122a0126cf17902bf", "sha256": "5a26581d98f3261cc110e39a4a048ee0989b7122ee1ba477e8099f1bf566e850"}, "downloads": -1, "filename": "starkbank-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9d81ce0862bc57c122a0126cf17902bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52569, "upload_time": "2020-04-19T02:17:55", "upload_time_iso_8601": "2020-04-19T02:17:55.945117Z", "url": "https://files.pythonhosted.org/packages/bc/e2/c514ec99671812b6b6919d0e1f7349bb920f8f9cf8700f55f6bbdcac301c/starkbank-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3cd0d80368bbf208899d62b515795cb", "sha256": "4dcc79f3e9e3eed65e2052be14c33943e07762ba66f1db4d5c4292160c4a109b"}, "downloads": -1, "filename": "starkbank-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3cd0d80368bbf208899d62b515795cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28896, "upload_time": "2020-04-18T19:05:11", "upload_time_iso_8601": "2020-04-18T19:05:11.001374Z", "url": "https://files.pythonhosted.org/packages/54/65/d27a1506915ad658999ec64f992b4da26a6b056d343f98d25cf863d86822/starkbank-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "18f1e36f8876691f968f6b9a745dad60", "sha256": "f2df105aba478e6c1b4ce1f6322c6f659700dfef717eb72bfe5edf5ad1eb4047"}, "downloads": -1, "filename": "starkbank-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18f1e36f8876691f968f6b9a745dad60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28575, "upload_time": "2020-05-04T16:22:11", "upload_time_iso_8601": "2020-05-04T16:22:11.540902Z", "url": "https://files.pythonhosted.org/packages/ef/02/a0ef8325ea34f91775fc6926a2a7112d6b6d130c2856470ec7a4315fbf84/starkbank-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18f1e36f8876691f968f6b9a745dad60", "sha256": "f2df105aba478e6c1b4ce1f6322c6f659700dfef717eb72bfe5edf5ad1eb4047"}, "downloads": -1, "filename": "starkbank-0.2.0.tar.gz", "has_sig": false, "md5_digest": "18f1e36f8876691f968f6b9a745dad60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28575, "upload_time": "2020-05-04T16:22:11", "upload_time_iso_8601": "2020-05-04T16:22:11.540902Z", "url": "https://files.pythonhosted.org/packages/ef/02/a0ef8325ea34f91775fc6926a2a7112d6b6d130c2856470ec7a4315fbf84/starkbank-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:38 2020"}