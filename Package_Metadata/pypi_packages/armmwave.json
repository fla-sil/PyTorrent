{"info": {"author": "Andrew Nadolski", "author_email": "andrew.nadolski@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "[![Build \nStatus](https://travis-ci.org/anadolski/armmwave.svg?branch=master)](https://travis-ci.org/anadolski/armmwave)\n[![codecov](https://codecov.io/gh/anadolski/armmwave/branch/master/graph/badge.svg)](https://codecov.io/gh/anadolski/armmwave)\n![PyPI](https://img.shields.io/pypi/v/armmwave.svg)\n![PyPI - License](https://img.shields.io/pypi/l/armmwave.svg)\n# armmwave\nCode that calculates transmittace and reflectance of materials at millimeter \nwavelengths.\n\nThis software was developed to aid in development of anti-reflection coatings \nfor millimeter-wave optics---specifically, for optics used in Cosmic Microwave \nBackground (CMB) experiments. CMB experiments have begun to adopt \nhigh-refractive index materials for their lenses. While there are many perks to \nthis optical design, there are also a few drawbacks. One of these is reflection.  \nHigh-refractive index materials---such as aluminum oxide and silicon, both of \nwhich are used in CMB experiments---reflect a significant fraction of the light \nthat fall on them. To reduce that fraction we create anti-reflection coatings to \ncover the lenses.\n\nOne way to make a coating that operates over a wide range of frequencies \n(wavelengths) is to stack layers of different dielectric materials. Working out \nthe transmittance and reflectance of a multilayer dielectric structure is a \nproblem that can be handled using the characteristic matrix method. Enter \n`armmwave`.\n\nPlease note: This code is under active development. While it has been verified \nagainst experimental spectroscopic data (~25 to 500 GHz; examples will be \nuploaded soon), make sure you understand the intricacies of your specific data \nor model.\n\n# Examples\n`armmwave` provides a means to set up and evaluate models of multilayer \ndielectric media. To do this, create one or more `Layer`'s (with associated \nrefractive index and thickness---and an optional loss term), create a `Source` \nlayer and `Terminator` layer (which are required for bookkeeping), and a \n`Model`. By default, reflectance and transmittance is calculated between 500 MHz \nand 500 GHz, but you can change this if you want. Here's an example model of a \nsheet of ceramic material (in this case aluminum oxide) in a vacuum:\n\n```python\nimport armmwave.layer as awl\nimport armmwave.model as awm\n\n# First create a list of layers (dielectrics) in the order\n# they should be evaluated\nlayers = [awl.Source(),\n          awl.Layer(rind=3.1, thick=2e-3), # thickness in meters\n          awl.Terminator()]\n# Now create the model framework, feed it the layers, and run!\nmodel = awm.Model()\nmodel.set_up(layers)\nresults = model.run()\n```\n\n`model.run()` returns a dictionary with three keys: `frequency`, \n`transmittance`, and `reflectance`.\n\n# Contribution guidelines\nThis code is under active development. If you have an idea for a feature or use \ncase, please open an issue ticket. Let's talk! If you have an idea and you've \nalready written the code---that's great! Create a pull request and we can go \nfrom there.\n\n## Bugs\nLet's face it: there are probably bugs. If you find one, please open an issue \nticket. Include a description of the issue and, if possible, a minimal working \nexample. I appreciate your patience (and your help).\n\n# TODO\n * Figure out how to make TravisCI make wheels for me\n * Better docs\n * Examples", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anadolski/armmwave", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "armmwave", "package_url": "https://pypi.org/project/armmwave/", "platform": "Linux", "project_url": "https://pypi.org/project/armmwave/", "project_urls": {"Homepage": "https://github.com/anadolski/armmwave"}, "release_url": "https://pypi.org/project/armmwave/0.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Calculate mm-wave transmittance and reflectance of materials", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/anadolski/armmwave\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc762b20b7b372c18c971026f6a5d20bbf340f54/68747470733a2f2f7472617669732d63692e6f72672f616e61646f6c736b692f61726d6d776176652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/anadolski/armmwave\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee46b9f8f38b57c4b8c489834b7132da47b7fcdc/68747470733a2f2f636f6465636f762e696f2f67682f616e61646f6c736b692f61726d6d776176652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d37ac7cfdec116b1257c4537f08a364a7ee5febc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61726d6d776176652e737667\">\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b980e4add1be05acaee17fe77f12627b25bf4731/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f61726d6d776176652e737667\"></p>\n<h1>armmwave</h1>\n<p>Code that calculates transmittace and reflectance of materials at millimeter\nwavelengths.</p>\n<p>This software was developed to aid in development of anti-reflection coatings\nfor millimeter-wave optics---specifically, for optics used in Cosmic Microwave\nBackground (CMB) experiments. CMB experiments have begun to adopt\nhigh-refractive index materials for their lenses. While there are many perks to\nthis optical design, there are also a few drawbacks. One of these is reflection.<br>\nHigh-refractive index materials---such as aluminum oxide and silicon, both of\nwhich are used in CMB experiments---reflect a significant fraction of the light\nthat fall on them. To reduce that fraction we create anti-reflection coatings to\ncover the lenses.</p>\n<p>One way to make a coating that operates over a wide range of frequencies\n(wavelengths) is to stack layers of different dielectric materials. Working out\nthe transmittance and reflectance of a multilayer dielectric structure is a\nproblem that can be handled using the characteristic matrix method. Enter\n<code>armmwave</code>.</p>\n<p>Please note: This code is under active development. While it has been verified\nagainst experimental spectroscopic data (~25 to 500 GHz; examples will be\nuploaded soon), make sure you understand the intricacies of your specific data\nor model.</p>\n<h1>Examples</h1>\n<p><code>armmwave</code> provides a means to set up and evaluate models of multilayer\ndielectric media. To do this, create one or more <code>Layer</code>'s (with associated\nrefractive index and thickness---and an optional loss term), create a <code>Source</code>\nlayer and <code>Terminator</code> layer (which are required for bookkeeping), and a\n<code>Model</code>. By default, reflectance and transmittance is calculated between 500 MHz\nand 500 GHz, but you can change this if you want. Here's an example model of a\nsheet of ceramic material (in this case aluminum oxide) in a vacuum:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">armmwave.layer</span> <span class=\"k\">as</span> <span class=\"nn\">awl</span>\n<span class=\"kn\">import</span> <span class=\"nn\">armmwave.model</span> <span class=\"k\">as</span> <span class=\"nn\">awm</span>\n\n<span class=\"c1\"># First create a list of layers (dielectrics) in the order</span>\n<span class=\"c1\"># they should be evaluated</span>\n<span class=\"n\">layers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">awl</span><span class=\"o\">.</span><span class=\"n\">Source</span><span class=\"p\">(),</span>\n          <span class=\"n\">awl</span><span class=\"o\">.</span><span class=\"n\">Layer</span><span class=\"p\">(</span><span class=\"n\">rind</span><span class=\"o\">=</span><span class=\"mf\">3.1</span><span class=\"p\">,</span> <span class=\"n\">thick</span><span class=\"o\">=</span><span class=\"mf\">2e-3</span><span class=\"p\">),</span> <span class=\"c1\"># thickness in meters</span>\n          <span class=\"n\">awl</span><span class=\"o\">.</span><span class=\"n\">Terminator</span><span class=\"p\">()]</span>\n<span class=\"c1\"># Now create the model framework, feed it the layers, and run!</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">awm</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">set_up</span><span class=\"p\">(</span><span class=\"n\">layers</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p><code>model.run()</code> returns a dictionary with three keys: <code>frequency</code>,\n<code>transmittance</code>, and <code>reflectance</code>.</p>\n<h1>Contribution guidelines</h1>\n<p>This code is under active development. If you have an idea for a feature or use\ncase, please open an issue ticket. Let's talk! If you have an idea and you've\nalready written the code---that's great! Create a pull request and we can go\nfrom there.</p>\n<h2>Bugs</h2>\n<p>Let's face it: there are probably bugs. If you find one, please open an issue\nticket. Include a description of the issue and, if possible, a minimal working\nexample. I appreciate your patience (and your help).</p>\n<h1>TODO</h1>\n<ul>\n<li>Figure out how to make TravisCI make wheels for me</li>\n<li>Better docs</li>\n<li>Examples</li>\n</ul>\n\n          </div>"}, "last_serial": 6144937, "releases": {"0.0a1": [{"comment_text": "", "digests": {"md5": "e8722fb21f3f138af70fa48d6229477b", "sha256": "90308a7c59bc4c02d19e494dc4f54ec60c74cd23e34da253fa8bed1c94788823"}, "downloads": -1, "filename": "armmwave-0.0a1.tar.gz", "has_sig": false, "md5_digest": "e8722fb21f3f138af70fa48d6229477b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12283, "upload_time": "2019-06-15T16:36:00", "upload_time_iso_8601": "2019-06-15T16:36:00.819003Z", "url": "https://files.pythonhosted.org/packages/8b/60/71abea046132acfbce44b2fe2479b870baa7c3f6445c7991a39cdbd57569/armmwave-0.0a1.tar.gz", "yanked": false}], "0.0a2": [{"comment_text": "", "digests": {"md5": "69daffde2ad80ddc8af357b1759b3ed7", "sha256": "a8d91d7e1efbbb1cff5e03bd611a1a515ddeb6d180dcaf4a77cdbcf08dca1fea"}, "downloads": -1, "filename": "armmwave-0.0a2.tar.gz", "has_sig": false, "md5_digest": "69daffde2ad80ddc8af357b1759b3ed7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12316, "upload_time": "2019-06-15T17:22:37", "upload_time_iso_8601": "2019-06-15T17:22:37.419002Z", "url": "https://files.pythonhosted.org/packages/f8/ab/f1b5d250c74c400f26ad1eefd93d98f42688ec2869aa306d01a907fdb280/armmwave-0.0a2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2f49e5ece56be7edcc14fd23372dca05", "sha256": "c4380bc6448c81bfc88f6b87139a34fe43c5fe15577eb259a1428f43cdc8adb7"}, "downloads": -1, "filename": "armmwave-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "2f49e5ece56be7edcc14fd23372dca05", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 23390, "upload_time": "2019-11-15T20:53:56", "upload_time_iso_8601": "2019-11-15T20:53:56.570871Z", "url": "https://files.pythonhosted.org/packages/c3/01/35b70e853a6725656591c0268203f3a7fa263f2b27f567f80cb5d9f71a55/armmwave-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3671cf6ef5764023b18cbfbfe8bbb5d3", "sha256": "0ba143e04dd3f51193711fc15e162d924428553792494052328b60c762cef973"}, "downloads": -1, "filename": "armmwave-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3671cf6ef5764023b18cbfbfe8bbb5d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16992, "upload_time": "2019-11-15T20:54:04", "upload_time_iso_8601": "2019-11-15T20:54:04.966875Z", "url": "https://files.pythonhosted.org/packages/f3/fa/a0feeb24ba4618d6024e7f7ed5dc9f8d519fc2184b3fbffefd610c3c931d/armmwave-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f49e5ece56be7edcc14fd23372dca05", "sha256": "c4380bc6448c81bfc88f6b87139a34fe43c5fe15577eb259a1428f43cdc8adb7"}, "downloads": -1, "filename": "armmwave-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "2f49e5ece56be7edcc14fd23372dca05", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 23390, "upload_time": "2019-11-15T20:53:56", "upload_time_iso_8601": "2019-11-15T20:53:56.570871Z", "url": "https://files.pythonhosted.org/packages/c3/01/35b70e853a6725656591c0268203f3a7fa263f2b27f567f80cb5d9f71a55/armmwave-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3671cf6ef5764023b18cbfbfe8bbb5d3", "sha256": "0ba143e04dd3f51193711fc15e162d924428553792494052328b60c762cef973"}, "downloads": -1, "filename": "armmwave-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3671cf6ef5764023b18cbfbfe8bbb5d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16992, "upload_time": "2019-11-15T20:54:04", "upload_time_iso_8601": "2019-11-15T20:54:04.966875Z", "url": "https://files.pythonhosted.org/packages/f3/fa/a0feeb24ba4618d6024e7f7ed5dc9f8d519fc2184b3fbffefd610c3c931d/armmwave-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:13 2020"}