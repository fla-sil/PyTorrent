{"info": {"author": "OWASP SecureTea", "author_email": "rejah.rehim@owasp.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Testing :: Unit", "Topic :: Software Development :: Version Control :: Git"], "description": "# OWASP SecureTea Tool Project\n\n# User Guide\n\nRead developer guide [here](https://github.com/OWASP/SecureTea-Project/blob/master/doc/en-US/dev_guide.md).\n\n## Introduction\nThe OWASP SecureTea Project provides a one-stop security solution for various devices (personal computers / servers / IoT devices).\n\n## Installation\n**Contents:**\n-  Pre-requisites\n-  Procedure for installing\n-  After installation\n\n### Pre-requisites\n\n#### Supported Platforms\nOWASP SecureTea Tool project runs on Linux, Windows and macOS operating systems. It is compatible with both Python 2 and Python 3.\n\n#### Hardware\n-  Linux OS / Raspberry Pi - have `sudo` access on the terminal/console\n-  Mouse / Wireless Mouse / Touchpad congenital laptop\n\n#### Software\n-  Python 2.x or 3.x\n-  Angular\n-  Twitter account (optional)\n-  Telegram account (optional)\n-  Slack account (optional)\n-  Twilio SMS account (optional)\n-  Amazon Web Services account (optional)\n-  Libnetfilter\n\n#### Installing pre-requisites\nPython:<br>\nhttps://www.python.org/\n\nAngular:<br>\nhttps://angular.io/\n\nLibnetfilter:<br>\nhttps://www.netfilter.org/projects/libnetfilter_queue/\n```shell\n$ sudo apt-get update\n$ sudo apt-get install build-essential python-dev libnetfilter-queue-dev\n```\n\nYara:<br>\nhttps://yara.readthedocs.io/en/v3.7.0/gettingstarted.html\n1. Download the latest Yara release at: https://github.com/VirusTotal/yara/releases\n2. Execute the following instructions in the order:\n```shell\n$ tar -zxf yara-3.10.0.tar.gz\n$ cd yara-3.10.0\n$ ./bootstrap.sh\n$ sudo apt-get install automake libtool make gcc\n$ sudo apt-get install flex bison\n$ ./configure\n$ make\n$ sudo make install\n$ make check\n```\n\nClam AV:<br>\nhttps://www.clamav.net/\n1. Execute the following instructions in the order:\n```shell\n$ sudo apt-get install clamav\n$ sudo freshclam\n```\n\n### Procedure for installing\nYou can install OWASP SecureTea Tool using the following methods:\n-  PyPi\n-  GitHub\n-  Zip\n\n#### Setting up a virtual environment\n1.  Install virtualenv: \n`$ pip install virtualenv`\n\n2.  Create a virtual environment named `venv1`:\n`$ virtualenv venv1`\n\n3.  Activate virtual environment `venv1`:\n`$ source venv1/bin/activate`\n\n#### PyPi\nYou can install SecureTea from PyPi package manager using the following command:\n\n`$ sudo python3 -m pip install securetea`\n\nPlease make sure all dependencies are installed if this fails.\n\n#### GitHub\nInstalling from GitHub involves the following steps:\n\n1.  Clone the repository:\n`$ git clone https://github.com/OWASP/SecureTea-Project.git`\n\n2.  Navigate into the project directory:\n`$ cd SecureTea-Project`\n\n3.  Install Python dependencies:\n`$ sudo python3 -m pip install -r requirements.txt`\n\n4.  Install SecureTea package:\n`$ sudo python3 setup.py install`\n\nIf done, proceed to After installation.\n\n#### Zip\nInstalling from Zip involves the following steps:\n\n1.  Download the [zip](https://github.com/OWASP/SecureTea-Project/archive/master.zip).\n\n2.  Unzip using: `$ unzip master.zip`\n\n3.  Navigate into the project directory:\n`$ cd SecureTea-Project`\n\n4.  Install python dependencies:\n`$ sudo python3 -m pip install -r requirements.txt`\n\n5.  Install SecureTea package:\n`$ sudo python3 setup.py install`\n\nTip: Incase of any error during installation related to NetfilterQueue, try using `$ sudo apt-get install build-essential python-dev libnetfilter-queue-dev` to resolve the error.\n\nIf done, proceed to After installation.\n\n### After installation\n\n#### Configuring SecureTea\n\n##### Editing the configurations using a text-editor\n\nDefault configuration:\n\n```json\n{\n\t\"twitter\": {\n\t\t\"api_key\": \"XXXX\",\n\t\t\"api_secret_key\": \"XXXX\",\n\t\t\"access_token\": \"XXXX\",\n\t\t\"access_token_secret\": \"XXXX\"\n\t},\n\t\"telegram\": {\n\t\t\"token\": \"XXXX\",\n\t\t\"user_id\": \"XXXX\"\n\t},\n\t\"twilio\": {\n\t\t\"twilio_sid\": \"XXXX\",\n\t\t\"twilio_token\": \"XXXX\",\n\t\t\"twilio_from\": \"XXXX\",\n\t\t\"twilio_to\": \"XXXX\"\n\t},\n\t\"slack\": {\n\t\t\"token\": \"XXXX\",\n\t\t\"user_id\": \"XXXX\"\n\t},\n\t\"aws_ses\": {\n\t\t\"aws_email\": \"XXXX\",\n\t\t\"aws_access_key\": \"XXXX\",\n\t\t\"aws_secret_key\": \"XXXX\"\n\t},\n\t\"gmail\": {\n\t\t\"sender_email\": \"XXXX\",\n\t\t\"to_email\": \"XXXX\",\n\t\t\"password\": \"XXXX\"\n\t},\n\t\"firewall\": {\n\t\t\"interface\": \"\",\n\t\t\"inbound_IPRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"ip_inbound\": \"\"\n\t\t},\n\t\t\"outbound_IPRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"ip_outbound\": \"\"\n\t\t},\n\t\t\"protocolRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"protocols\": \"ICMP\"\n\t\t},\n\t\t\"scanLoad\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"extensions\": \".exe\"\n\t\t},\n\t\t\"source_portRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"sports\": \"\"\n\t\t},\n\t\t\"dest_portRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"dports\": \"\"\n\t\t},\n\t\t\"HTTPRequest\": {\n\t\t\t\"action\": \"0\"\n\t\t},\n\t\t\"HTTPResponse\": {\n\t\t\t\"action\": \"0\"\n\t\t},\n\t\t\"DNSRule\": {\n\t\t\t\"action\": \"0\",\n\t\t\t\"dns\": \"\"\n\t\t},\n\t\t\"time\": {\n\t\t\t\"time_lb\": \"00:00\",\n\t\t\t\"time_ub\": \"23:59\"\n\t\t}\n\t},\n\t\"insecure_headers\": {\n\t\t\t\"url\": \"\"\n\t},\n\t\"ids\": {\n\t\t\"threshold\": 10,\n\t\t\"interface\": \"XXXX\"\n\t},\n\t\"server_log\": {\n\t\t\"log_type\": \"\",\n\t\t\"log_file\": \"\",\n\t\t\"window\": \"30\",\n\t\t\"ip_list\": \"\",\n\t\t\"status_code\": \"\"\n\t},\n\t\"auto-server-patcher\": {\n\t\t\"url\": \"XXXX\",\n\t\t\"apache\": \"1\",\n\t\t\"sysctl\": \"1\",\n\t\t\"login\": \"1\",\n\t\t\"ssh\": \"1\"\n\t},\n\t\"antivirus\": {\n\t\t\"update\": \"1\",\n\t\t\"custom-scan\": \"\",\n\t\t\"auto-delete\": \"0\",\n\t\t\"monitor-usb\": \"1\",\n\t\t\"monitor-file-changes\": \"1\",\n\t\t\"virustotal-api-key\": \"XXXX\"\n\t},\n\t\"web-deface\": {\n\t\t\"path\": \"\",\n\t\t\"server-name\": \"\"\n\t},\t\n\t\"iot-check\": {\n\t\t\"shodan-api-key\": \"XXXX\",\n\t\t\"ip\": \"\"\n\t},\n\t\"debug\": false\n}\t\n```\n\n###### Using gedit<br>\n`gedit securetea.conf`\n\n###### Using vim<br>\n`vi securetea.conf`\n\n##### Configuring using interactive setup mode\n\n##### Setup all the features\n1.  Start SecureTea without any parameters:<br>\n`sudo SecureTea.py`<br>\nThis will start an interactive setup mode, to skip a particular setup, enter s or S.<br><br>\n![](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/setup_all.gif)<br>\n\n##### Setup a particular feature\nArguments list\n\n```argument\n--telegram     Start Telegram interactive setup\n--twitter      Start Twitter interactive setup\n--twilio_sms   Start Twilio SMS interactive setup\n--firewall     Start Firewall interactive setup\n--aws_ses      Start Amazon Web Services(AWS-Simple Email Services) interactive setup\n--gmail        Start G-Mail interactive setup\n```\n\nExamples:<br>\n-  Starting SecureTea-Firewall interactive setup: `sudo SecureTea.py --firewall`<br><br>\n![Firewall](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/setup_firewall.gif)<br>\n\n-  Starting Telegram & Twitter interactive setup: `sudo SecureTea.py --telegram --twitter`<br><br>\n![TelegramTwitter](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/tele_twi.gif)<br>\n\n##### Configuring using Web UI\n\n- [Using local web server over HTTPS](https://github.com/OWASP/SecureTea-Project/blob/master/doc/en-US/web_https.md)\n\n###### Previews\n![Network graph](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh1.png \"Secure Tea Dashboard\")\n<br><br>\n![Disk usage](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh2.png \"Secure Tea Disk Dashboard\")\n![Process](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh3.png \"Process\")\n<br><br>\n![Last Login](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh4.png \"Last Login\")\n<br><br>\n![Network](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh5.png \"Networks\")\n![Security](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/dsh7.png \"Security\")\n\n##### Configuring using CLI arguments\n```argument\nusage: SecureTea.py [-h] [--conf CONF] [--debug] [--twitter] [--twilio_sms]\n                    [--telegram] [--gmail] [--slack] [--aws_ses]\n                    [--twitter_api_key TWITTER_API_KEY]\n                    [--twitter_api_secret_key TWITTER_API_SECRET_KEY]\n                    [--twitter_access_token TWITTER_ACCESS_TOKEN]\n                    [--twitter_access_token_secret TWITTER_ACCESS_TOKEN_SECRET]\n                    [--telegram_bot_token TELEGRAM_BOT_TOKEN]\n                    [--telegram_user_id TELEGRAM_USER_ID]\n                    [--twilio_sid TWILIO_SID] [--twilio_token TWILIO_TOKEN]\n                    [--twilio_from TWILIO_FROM] [--twilio_to TWILIO_TO]\n                    [--slack_token SLACK_TOKEN]\n                    [--slack_user_id SLACK_USER_ID]\n                    [--sender_email SENDER_EMAIL] [--to_email TO_EMAIL]\n                    [--password PASSWORD] [--aws_email AWS_EMAIL]\n                    [--aws_secret_key AWS_SECRET_KEY]\n                    [--aws_access_key AWS_ACCESS_KEY] [--firewall]\n                    [--interface INTERFACE]\n                    [--inbound_IP_action INBOUND_IP_ACTION]\n                    [--inbound_IP_list INBOUND_IP_LIST]\n                    [--outbound_IP_action OUTBOUND_IP_ACTION]\n                    [--outbound_IP_list OUTBOUND_IP_LIST]\n                    [--protocol_action PROTOCOL_ACTION]\n                    [--protocol_list PROTOCOL_LIST]\n                    [--scan_action SCAN_ACTION] [--scan_list SCAN_LIST]\n                    [--dest_port_action DEST_PORT_ACTION]\n                    [--dest_port_list DEST_PORT_LIST]\n                    [--source_port_action SOURCE_PORT_ACTION]\n                    [--source_port_list SOURCE_PORT_LIST]\n                    [--HTTP_request_action HTTP_REQUEST_ACTION]\n                    [--HTTP_response_action HTTP_RESPONSE_ACTION]\n                    [--dns_action DNS_ACTION] [--dns_list DNS_LIST]\n                    [--time_lb TIME_LB] [--time_ub TIME_UB]\n                    [--insecure_headers] [--url URL] [--ids]\n                    [--threshold THRESHOLD] [--system_log] [--server_log]\n                    [--log_file LOG_FILE] [--log_type LOG_TYPE]\n                    [--window WINDOW] [--ip_list IP_LIST]\n                    [--status-code STATUS_CODE] [--auto-server-patcher]\n                    [--ssh] [--sysctl] [--login] [--apache] [--ssl]\t\n\t\t    [--antivirus] [--update UPDATE]\n                    [--custom-scan CUSTOM_SCAN] [--auto-delete]\n                    [--monitor-usb] [--monitor-file-changes]\n                    [--virustotal-api-key]\n                    [--web-deface] [--path PATH] [--server-name SERVER_NAME]\t\n\t\t    [--iot-checker][--shodan-api-key SHODAN_API_KEY] [--ip IP]\t\t    \n```\n\nExample usage:\n-  Configuring Slack: `sudo SecureTea.py --slack_user_id <your data> --slack_token <your data>`<br><br>\n![Slack](https://raw.githubusercontent.com/OWASP/SecureTea-Project/master/img/slack_cli.gif)<br>\n\n#### Setting up Web UI\nFollow the following steps to setup Web UI\n1.  `cd gui`\n2.  `npm install`\n3.  `ng serve`\n4.  `sudo python monitor.py`\n5.  Visit http://localhost:4200 to view your project, END-POINT is http://localhost:5000.\n\n#### Getting tokens\nIn order to use the various communication medium you need to get yourself a verified token from the respective provider.\n\n##### Getting Twitter tokens\n-  Visit https://apps.twitter.com.\n-  Create new app to obtain authentication and token codes.\n\n##### Getting Slack tokens\n-  Visit https://api.slack.com/apps/new and create a new bot app.\n-  In the bot app settings, setup event subscriptions by Enabling Events.\n-  Install the bot app in the workspace required.\n-  Get the \"Bot User OAuth Access Token\", it starts with `xoxb-`\n-  Get your user id for the particular workspace.\n\n##### Getting Telegram tokens\n -  Visit https://core.telegram.org/bots#botfather & follow the steps to obtain Telegram token & user id.\n\n##### Getting Twilio SMS tokens\n -  Visit https://www.twilio.com and click on \"Get a free API key\".\n\n##### Getting AWS-SES tokens\n -  Sign up for AWS https://aws.amazon.com/ (For new users)\n -  Search for Simple Email Service in search bar of AWS\n -  Select your AWS region accordingly( e.g, US East)\n -  Click on email address and verify your email\n -  Click on \"My security credentials\"\n -  Click \"Get started with IAM users\" and add a new user(You can use root user's access code too ,but that would be insecure.)\n -  Click on the username of just created user\n -  Click \"Security Credentials\" and note down your \"Access Key ID(aws_access_key)\" and \"Secret Access Key(aws_secret_kay)\".\n Warning: Do not share this keys for security reasons.\n -  Put those keys and email into 'SecureTea.conf' file.\n\n ##### Getting Gmail tokens\n  - Sign up for a Gmail account https://mail.google.com (for new users)\n  - Go to \"Accounts\" and proceed to \"Security\" dashboard\n  - Turn on \"Less secure app access\" to allow SecureTea be able to send emails\n  - Proceed to https://accounts.google.com/DisplayUnlockCaptcha and click on Continue, and then allow\n  - Put your sender email ID, password and destination email ID in the `securetea.conf` file.\n\n## Usage\nThe following argument options are currently available:\n```argument\n   -h, --help           show this help message and exit\n  --conf CONF           Path of config file. default:-\n                        \"~/.securetea/securetea.conf\"\n  --debug               Degug true or false\n  --twitter             Setup twitter credentials\n  --twilio_sms          Setup twilio SMS credentials\n  --telegram            Setup telegram SMS credentials\n  --gmail               Setup Gmail credentials\n  --slack               Setup Slack credentials\n  --aws_ses             Setup AWS SES credentials\n  --twitter_api_key TWITTER_API_KEY, -tak TWITTER_API_KEY\n                        Twitter api key\n  --twitter_api_secret_key TWITTER_API_SECRET_KEY, -tas TWITTER_API_SECRET_KEY\n                        Twitter api secret\n  --twitter_access_token TWITTER_ACCESS_TOKEN, -tat TWITTER_ACCESS_TOKEN\n                        Twitter access token\n  --twitter_access_token_secret TWITTER_ACCESS_TOKEN_SECRET, -tats TWITTER_ACCESS_TOKEN_SECRET\n                        Twitter access token secret\n  --telegram_bot_token TELEGRAM_BOT_TOKEN, -tbt TELEGRAM_BOT_TOKEN\n                        Telegram Bot Token\n  --telegram_user_id TELEGRAM_USER_ID, -tui TELEGRAM_USER_ID\n                        Telegram user id\n  --twilio_sid TWILIO_SID, -tws TWILIO_SID\n                        Twilio SID\n  --twilio_token TWILIO_TOKEN, -twt TWILIO_TOKEN\n                        Twilio authorization token\n  --twilio_from TWILIO_FROM, -twf TWILIO_FROM\n                        Twilio (From) phone number\n  --twilio_to TWILIO_TO, -twto TWILIO_TO\n                        Twilio (To) phone number\n  --slack_token SLACK_TOKEN, -st SLACK_TOKEN\n                        Slack token\n  --slack_user_id SLACK_USER_ID, -suid SLACK_USER_ID\n                        Slack user id\n  --sender_email SENDER_EMAIL\n                        Gmail sender e-mail id\n  --to_email TO_EMAIL   Destination of e-mail\n  --password PASSWORD   Password for Gmail sender account\n  --aws_email AWS_EMAIL, -awse AWS_EMAIL\n                        AWS email id\n  --aws_secret_key AWS_SECRET_KEY, -awss AWS_SECRET_KEY\n                        AWS secret key\n  --aws_access_key AWS_ACCESS_KEY, -awsa AWS_ACCESS_KEY\n                        AWS access key\n  --firewall, -f        Start firewall\n  --interface INTERFACE\n                        Name of the interface\n  --inbound_IP_action INBOUND_IP_ACTION\n                        Inbound IP rule action\n  --inbound_IP_list INBOUND_IP_LIST\n                        List of inbound IPs to look for\n  --outbound_IP_action OUTBOUND_IP_ACTION\n                        Outbound IP rule action (0: BLOCK, 1: ALLOW)\n  --outbound_IP_list OUTBOUND_IP_LIST\n                        List of outbound IPs to look for\n  --protocol_action PROTOCOL_ACTION\n                        Protocol action (0: BLOCK, 1: ALLOW)\n  --protocol_list PROTOCOL_LIST\n                        List of protocols to look for\n  --scan_action SCAN_ACTION\n                        Scan load action (0: BLOCK, 1: ALLOW)\n  --scan_list SCAN_LIST\n                        List of extensions to scan for\n  --dest_port_action DEST_PORT_ACTION\n                        Destination port action (0: BLOCK, 1: ALLOW)\n  --dest_port_list DEST_PORT_LIST\n                        List of destination ports to look for\n  --source_port_action SOURCE_PORT_ACTION\n                        Source port action (0: BLOCK, 1: ALLOW)\n  --source_port_list SOURCE_PORT_LIST\n                        List of source ports to look for\n  --HTTP_request_action HTTP_REQUEST_ACTION\n                        HTTP request action (0: BLOCK, 1: ALLOW)\n  --HTTP_response_action HTTP_RESPONSE_ACTION\n                        HTTP response action (0: BLOCK, 1: ALLOW)\n  --dns_action DNS_ACTION\n                        DNS action (0: BLOCK, 1: ALLOW)\n  --dns_list DNS_LIST   List of DNS to look for\n  --time_lb TIME_LB     Time lower bound\n  --time_ub TIME_UB     Time upper bound\n  --insecure_headers, -ih\n                        Test URL for insecure headers\n  --url URL, -u URL     URL on which operations are to be performed\n  --ids                 Start Intrusion Detection System (IDS)\n  --threshold THRESHOLD, -th THRESHOLD\n                        Intrusion Detection System (IDS) threshold\n  --system_log, -sys_log\n                        Start system log monitoring process\n  --server_log          Start server log monitoring process\n  --log_file LOG_FILE   Path of the log file\n  --log_type LOG_TYPE   Type of the log file (Apache/Nginx)\n  --window WINDOW       Days old log to process\n  --ip_list IP_LIST     List of IPs to grab from log file\n  --status_code STATUS_CODE\n                        List of status code to grab from log file\n  --auto-server-patcher, -asp\n                        Start auto server patcher\n  --ssh                 Patch SSH config\n  --sysctl              Patch system configuration\n  --login               Patch login configuration\n  --apache              Patch apache configuration\n  --ssl                 Scan for SSL vulnerability\n  --antivirus           Start AntiVirus\n  --update UPDATE       Auto-update AntiVirus or not (1: yes, 0: no)\n  --custom-scan CUSTOM_SCAN\n\t\t\tPath to custom scan\n  --auto-delete         Auto delete malicious files or manually (1: auto, 0:\n\t\t\tmanual)\n  --monitor-usb         Monitor USB devices or not (1: yes, 0: no)\n  --monitor-file-changes\n\t\t\tMonitor file changes or not (1:yes, 0:no)\n  --virustotal-api-key  Virus Total API key  \n  --web-deface          Start Web Deface Detection\n  --path PATH           Path of the directory\n  --server-name SERVER_NAME\n                        Name of the server (apache/nginx/etc.)\n  --iot-checker, -ic    Start IoT Anonymity Checker\n  --shodan-api-key SHODAN_API_KEY, -sak SHODAN_API_KEY\n                        Shodan API Key\n  --ip IP               IP address on which to perform operation\n ```\n\n### Example usages\n#### Starting Twitter notifier\nUsage:<br>\n```argument\nsudo SecureTea.py --twitter_api_key <data> --twitter_api_secret_key <data> --twitter_access_token <data> --twitter_access_token_secret <data>\n```\n\n#### Starting Slack notifier\nUsage:<br>\n```argument\nsudo SecureTea.py --slack_token <data> --slack_user_id <data>\n```\n\n#### Starting Telegram notifier\nUsage:<br>\n```argument\nsudo SecureTea.py --telegram_bot_token <data> --telegram_user_id <data>\n```\n\n#### Starting Twilio notifier\nUsage:<br>\n```argument\nsudo SecureTea.py --twilio_sid <data> --twilio_token <data> --twilio_from <data> --twilio_to <data>\n```\n\n#### Starting Firewall\nUsage:<br>\n```argument\nsudo SecureTea.py --interface <data> --inbound_IP_action <data> --inbound_IP_list <data> --outbound_IP_action <data> --outbound_IP_list <data> --protocol_action <data> --protocol_list <data> --scan_action <data> --scan_list <data> --dest_port_action <data> --dest_port_list <data> --source_port_action <data> --source_port_list <data> --HTTP_request_action <data> --HTTP_response_action <data> --dns_action <data> --dns_list <data> --time_lb <data> --time_ub <data> \n```\n\n#### Starting AWS-SES\nUsage:<br>\n```argument\nsudo SecureTea.py --aws_ses <data> --aws_email <data> --aws_access_key <data> --aws_secret_key <data>\n```\n\n### Setting up notifiers\n\n#### Setting up Twitter\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --twitter\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--twitter_api_key` | XXXX | Twitter API key |\n| `--twitter_api_secret_key` | XXXX | Twitter API Secret Key |\n| `--twitter_access_token` | XXXX | Twitter Access Token |\n| `--twitter_access_token_secret` | XXXX | Twitter Access Token Secret |\n\n#### Setting up Slack\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --slack\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--slack_token` | XXXX | Slack Token |\n| `--slack_user_id` | XXXX | Slack User ID |\n\n#### Setting up Amazon SES\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --aws_ses\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--aws_email` | XXXX | AWS SES Email |\n| `--aws_secret_key` | XXXX | AWS SES Secret Key |\n| `--aws_access_key` | XXXX | AWS SES Access Key |\n\n#### Setting up Gmail\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --gmail\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--to_email` | XXXX | G-mail To E-mail |\n| `--sender_email` | XXXX | G-mail From E-mail|\n| `--password` | XXXX | G-mail App Password |\n\n#### Setting up Telegram\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --telegram\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--telegram_bot_token` | XXXX | Telegram Bot Token |\n| `--telegram_user_id` | XXXX | Telegram User ID |\n\n#### Setting up SMS\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --twilio_sms\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--twilio_sid` | XXXX | Twilio SID |\n| `--twilio_token` | XXXX | Twilio Token |\n| `--twilio_from` | XXXX | Twilio From Phone No.|\n| `--twilio_to` | XXXX | Twilio To Phone No.|\n\n### Setting up Firewall\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --firewall\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--interface` | None | Name of the [interface](https://www.computerhope.com/unix/uifconfi.htm) |\n| `--inbound_IP_action` | 0 |Inbound IP rule action (0: BLOCK, 1: ALLOW)||\n| `--inbound_IP_list` | None | List of inbound IPs to look for|\n| `--outbound_IP_action` | 0 |Outbound IP rule action (0: BLOCK, 1: ALLOW)|\n| `--outbound_IP_list` | None | List of outbound IPs to look for.|\n| `--protocol_action` | 0 |Protocol action (0: BLOCK, 1: ALLOW)|\n| `--protocol_list` | None | List of protocols to look for|\n| `--scan_action` | 0 |Scan load action (0: BLOCK, 1: ALLOW)|\n| `--scan_list` | None |List of extensions to scan for|\n| `--dest_port_action` | 0 |Destination port action (0: BLOCK, 1: ALLOW)|\n| `--dest_port_list` | None |List of destination ports to look for|\n| `--source_port_action` | 0 |Source port action (0: BLOCK, 1: ALLOW)|\n| `--source_port_list` | None |List of source ports to look for|\n| `--HTTP_request_action` | 0 |HTTP request action (0: BLOCK, 1: ALLOW)|\n| `--HTTP_response_action` | None |HTTP response action (0: BLOCK, 1: ALLOW)|\n| `--dns_action` | 0 |DNS action (0: BLOCK, 1: ALLOW)|\n| `--dns_list` | None |List of DNS to look for|\n| `--time_lb` | 00:00 |Time lower bound|\n| `--time_ub` | 23:59 |Time upper bound|\n\n#### Setting up Intrusion Detection System\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --ids\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--threshold` | 10 | Intrusion Detection System (IDS) threshold |\n| `--interface` | None |Name of the [interface](https://www.computerhope.com/unix/uifconfi.htm) |\n\nWhat are **thresholds**?\n<br>\nIt simply represents the number of times you want to ignore the possibility of an attack. In other words, it is the extent to which IDS will not bother to inform you about the attack, once it crosses the limit (here threshold), it will start notifying you about the possible attack. Lower the number is, the more sensitive IDS is, and may also give rise to false alarms. Higher the number is, the less sensitive IDS is, it may give rise to less false positives but at the same time choosing a very high number is not suggested either. Choose a mid range number within (10-100) to be on the safer side while keeping alarms of false positives to the minimal.\n\n#### Setting up Insecure Headers\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --insecure_headers\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--url` | None | URL on which operations are to be performed |\n\n#### Setting up Server Log Monitor\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --server-log\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--log-file` | XXXX |Path of the log file|\n| `--log-type` | XXXX |Type of the log file (Apache/Nginx)|\n| `--window` | XXXX |Days old log to process|\n| `--ip-list` | XXXX | List of IPs to grab from log file|\n| `--status-code` | XXXX |List of status code to grab from log file|\n\n#### Setting up System Log Monitor\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --system_log\n```\n#### 2. Argument list\nNo optional arguments.\n\n#### Setting up Auto Server Patcher\nExample usage:<br>\n#### 1. Using interactive setup\n```argumnent\nsudo SecureTea.py --auto-server-patcher\n```\n**or:**\n```argumnent\nsudo SecureTea.py -asp\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--url` | XXXX |URL for SSL scanning|\n| `--apache` | 1 |Patch apache configuration or not (0:no, 1:yes)|\n| `--sysctl` | 1 |Patch system configuration or not (0:no, 1:yes)|\n| `--login` | 1 |Patch login configuration or not (0:no, 1:yes)|\n| `--ssh` | 1 |Patch SSH configuration or not (0:no, 1:yes)|\n| `--ssl` | 1 |Scan for SSL vulnerability|\n\n#### Setting up AntiVirus\nExample usage:<br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --antivirus\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--update` | 1 |Auto update ON (1) or OFF (0)|\n| `--custom-scan` | None |Path of the directory to custom scan|\n| `--auto-delete` | 0 |Auto clean the found malicious files (1) or manually (0)|\n| `--monitor-usb` | 1 |Monitor USB devices or not (1:yes, 0:no)|\n| `--monitor-file-changes` | 1 |Monitor files changes or addition (1:yes, 0:no)|\n| `--virustotal-api-key` | XXXX |VirusTotal API key|\n\n#### Setting up Web Deface Detection\nExample usage: <br>\n##### 1. Using interactive setup\n```argument\nsudo SecureTea.py --web-deface\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--path` | None |Path of the directory|\n| `--server-name` | None |Name of the server (apache/nginx/etc.)|\n\n#### Setting up IoT Anonymity Checker\nExample usage: <br>\n#### 1. Using interactive setup\n```argument\nsudo SecureTea.py --iot-checker\n```\n```argument\nsudo SecureTea.py -ic\n```\n#### 2. Argument list\n| Argument      | Default value | Description |\n| ------------- | ------------- |--------------\n| `--shodan-api-key` | XXXX |Shodan API Key|\n| `--ip` | None |IP address on which to perform operation|\n\n#### Starting up modes\n##### Starting up in server mode\n###### Integrations (features) of server mode\n- Firewall\n- Server Log Monitor\n- AntiVirus\n- System Log Monitor\n- Intrusion Detection System (IDS)\n- Auto Server Patcher\n- Web Deface Detection\n\nExample usage: <br>\n###### 1. Non-debug mode\n```argument\nsudo SecureTea.py --server-mode\n```\n###### 1. Debug mode\n```argument\nsudo SecureTea.py --server-mode --debug\n```\nUpon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 7 modules.\n\nIt makes a lot easier to configure SecureTea, with server mode they can easily secure their servers. You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 7, it is not necessary to configure them all.\n\n##### Starting up in system mode\n###### Integrations (features) of system mode\n- Firewall\n- AntiVirus\n- System Log Monitor\n- Intrusion Detection System (IDS)\n\nExample usgae: <br>\n###### 1. Non-debug mode\n```argument\nsudo SecureTea.py --system-mode\n```\n###### 1. Debug mode\n```argument\nsudo SecureTea.py --system-mode --debug\n```\nUpon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 4 modules.\n\nIt makes a lot easier to configure SecureTea, with system mode they can easily secure their systems (PC / laptops). You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 4, it is not necessary to configure them all.\n\n##### Starting up in IoT mode\n###### Integrations (features) of IoT mode\n- Firewall\n- Intrusion Detection System (IDS)\n- IoT Anonymity Checker\n\nExample usgae: <br>\n###### 1. Non-debug mode\n```argument\nsudo SecureTea.py --iot-mode\n```\n###### 1. Debug mode\n```argument\nsudo SecureTea.py --iot-mode --debug\n```\nUpon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 3 modules.\n\nIt makes a lot easier to configure SecureTea, with IoT mode they can easily secure their IoT devices. You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 3, it is not necessary to configure them all.\n\n## Firewall\nSecureTea Firewall currently uses the following rules to filter the incoming traffic:\n<br><br>\n**Process 1 (Firewall Engine):**\n- Filter packets based on:\n    - Inbound IP rules\n    - Outbound IP rules\n    - Source port rules\n    - Destination port rules\n    - Protocols\n    - Scan for downloads in HTTP websites\n    - DNS filter rules\n    - Filter HTTP request & response\n    - IP packet first fragment\n    - IP packet fragment boundary\n    - IP packet fragment small offset\n    - Unknown IP version\n    - Invalid IP source\n    - Invalid IP header length\n    - Network congestion detection\n    - Ending FIN-ACK handshakes\n    - TCP Packet with None flag\n    - SYN fragmentation\n    - ICMP fragmentation attack\n    - Large ICMP packets\n\n Apart from that, the background process deals with the following functions:\n <br><br>\n**Process 2 (Firewall Monitor):**\n- Monitor open ports\n- Monitor active services\n- Monitor network usage\n- Monitor active CPU process\n\n**Generate report about the malicious IP address using OSINT tools**\nThe report will contain the following fields:\n1. Reverse DNS\n2. Geo lookup\n3. WHOIS lookup\n4. Other important details \n\n## Intrusion Detection System\nSecureTea Intrusion Detection System (IDS) deals with the following attack vectors and logs any abnormalities:\n\n**Detect probe (reconnaissance) attacks (performed for information gathering)**\n\n- General scans: TCP ACK & TCP Window, UDP, ICMP scans\n- Stealth scans: FIN, XMAS, NULL scans\n- OS fingerprinting scans\n\n**Detect Denial of Service (DoS) & Remote to Local (R2L) attacks**\n- DoS attacks\n- CAM Table Exhaustion\n- DHCP Exhaustion\n- Man in The Middle (MiTM) / ARP cache poisoning\n- SYN flood attack\n- Ping of death\n- Land attack\n- Wireless\n     - Deauthentication attack\n    - Hidden node attack\n    - SSID spoofing\n    - Fake access point\n\n**Generate report about the malicious IP address using OSINT tools**\nThe report will contain the following fields:\n1. Reverse DNS\n2. Geo lookup\n3. WHOIS lookup\n4. Other important details \n\n## Insecure Headers\nCheck/monitor the website for the followings:\n  - X-XSS-Protection\n  - X-Content-Type\n  - Strict Transport Security\n  - Content Security Policy\n  - X-Frame\n  - HTTP methods\n       - Test all methods - 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE', 'TEST'\n       - Cross Site Tracing vulnerability\n- Check for cookie details\n\n## System Log Monitor\nSystem log aggregator to disparate log files, organize the useful data and apply intelligence to detect intrusion activities.\n\n**a. Log file :** `/etc/passwd` & `/etc/shadow`\n  - Detect backdoors\n  - Detect user existing without a password that may lead to privilege escalation\n  - Check integrity of system's password storing\n  - Detect non-standard hashing algorithm used in passwords to guess system manipulation\n\n**b. Log file**: `/var/log/auth.log` & `/var/log/faillog`\n  - Detect system login attempts\n  - Detect password brute-force\n  - Detect harmful commands executed as root\n  - Detect port scans\n  - Detect SSH login attempts & brute-force\n\n**c. Log file:** `/var/log/syslog`\n  - Detect malicious sniffer by extracting PROMISC mode\n\n## Server Log Monitor\nSystem log aggregator to disparate server log files, organize the useful data and apply intelligence to detect intrusion activities.\n\nCurrently, the server log monitor supports the following log file types:\n1. Apache\n2. Nginx\n\nThe following suspicious activities/attacks can be detected:\n- Attacks\n   - Denial of Service (DoS) attacks\n   - Cross site scripting (XSS) injection\n   - SQL injection (SQLi)\n   - Local file inclusion (LFI)\n   - Web shell injection\n\n - Reconnaissance attacks\n   - Web crawlers / spiders / bots\n   - URL Fuzzing\n   - Port scans\n   - Bad user agents\n\n- Log bad/suspicious IP (later on picked up by Firewall to block incoming request from that IP)\n\n- User defined rules:\n   - Filter based on selected IPs\n   - Filter based on response code\n\n**Generate report about the malicious IP address using OSINT tools**\nThe report will contain the following fields:\n1. Reverse DNS\n2. Geo lookup\n3. WHOIS lookup\n4. Other important details \n\n## Auto Server Patcher\nSecureTea Auto Server Patcher will patch the server configurations for highest security & help overcome common security deployment mistakes.\n\nThe following features are currently supported:\n\n- Auto update packages\n\n- Set password expiration & password strength rules\n\n- Check for rootkits\n\n- Auto remove discarded package\n\n- Enhance **IP TABLE** rules:\n  - Force SYN packets check\n  - Drop XMAS packets\n  - Drop null packets\n  - Drop incoming packets with fragments\n\n- Configure **`/etc/sysctl.conf`**\n  - Disable IP forwarding & IP source routing\n  - Disable sent packets redirects\n  - Disable ICMP redirect acceptance\n  - Enable IP spoofing protection\n  - Enable bad error message protection\n\n- Patch **Apache** server configurations\n  - Prevent server from broadcasting version number\n  - Turn off TRACE method to prevent Cross-Site Scripting\n  -  X-powered by headers\n\n- Configure **SSH**\n  -  Disallow root access via SSH\n  -  Disallow SSH from trusting a host based only on its IP\n  -  Prevent users from logging into SSH with an empty password\n  -  Sop the possibility of the server sending commands back to the client\n  -  Drop the SSH connection after 5 failed authorization attempts\n  -  Disable weak ciphers\n  -  Disables password authentication and defers authorization to the key-based PAM\n  -  Log out idle users after 15 minutes\n  - Configure server checks whether the session is active before dropping\n\n- List all the possible **SSL** vulnerabilities in the server using SSL Labs API\n  - Beast attack\n  -  Poodle\n  - Poodle TLS\n  - RC4\n  - Heartbeat\n  - Heartbleed\n  - Ticketbleed\n  - OpenSSL CCS\n  - OpenSSL padding\n  - Robot attack\n  - Freak\n  - Logjam\n  - Drown attack\n\n## AntiVirus\nSecureTea real-time signature & heuristic based antivirus.\n\nThe following features are currently supported:\n\n1. **Auto fetch updates**: Smart update mechanism, that keeps track of the last update and resumes update from the last downloaded file. User can configure to **switch off** and **switch on** the auto-update feature.\n\n2. **Real-Time monitoring**: Scan as soon as a file is modified or a new file is added.\n\n3. **Scanner engine**: Scanner engine runs on **3 process**, they are as follows:\n   - **Hash** Signature scanner\n   - **Yara** Heuristic scanner\n   - **Clam AV** Scanner\n\n4. **YARA** rules can detect: \n   - Viruses\n   - Worms\n   - Ransomware\n   - Adware\n   - Spyware\n   - Rootkits\n   - RATs\n\n5. Leveraging the power of **VirusTotal API**: Optional for users, provides an easy option for them to test for specific files against multiple anti-viruses & in a safe sandbox environment, i.e. after a file is detected malicious, the file will be put under VirusTotal test for a final confirmation.\n\n6. Monitor **orphaned files**: Use SUID, SGID and read capabilities in Linux to separate orphaned files and check if any file is granted more capabilities than it should be.\n\n7. Keeps an eye on **USB devices**: Start scanning the USB device as soon as it is plugged in & report for any virus/malware found.\n\n8. Cleaning the found files: Opt for either **auto-delete** or **manual** delete option, in auto-delete the file found malicious is automatically deleted, whereas in manual it requires the confirmation of the user.\n\n9. **Custom** and **Full** scan options\n\n## Web Deface Detection\nMonitor server files to detect any changes, roll back to default in case of defacement.\n\n**Features:**\n1. Auto locate the server files based on the user choice of server (i.e. Apache, Nginx, etc.) and the operating system detected.\n\n2. Allow user to overwrite the above default auto-located file path and use their custom file path.\n\n3. Scan the directory for files and generate a cache / backup of the files.\n\n4. Generate SHA 256 hashes of each file and use them for comparison.\n\nSecureTea Web Defacement Detection would detect file addition, deletion and modification and roll back to the original file immediately. It would not allow addition of any new files, deletion of files or any type of modification to the current existing files.\n\n## IoT Anonymity Checker\n\n\u201cShodan is a search engine which collects the information about all IPv4 and IPv6 devices connected to the internet and gives us the ability to search devices using filters that can be very sophisticated.\u201d (source: https://resources.infosecinstitute.com/shodan-iot-problem/#gref)\n\nIn short, Shodan is a search engine for IoT devices, that can index thousands of IoT devices connected to the internet. At times, this can be great for hackers trying to gain access to the device. As a security feature, it would be good to stay out of Shodan search radar. It will good to check whether the IoT device is under the Shodan grid or not, if\nyes, immediate action needs to be taken or else we are all fine!\n\n**Features:**\n\n1. Use public IP address of the device to check (if provided) else auto-collect the public IP address of the device and perform the check.\n\n## License\n**MIT License**\n\nCopyright (c) 2019 OWASP SecureTea-Project Team - http://owasp.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OWASP/SecureTea-Project", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "securetea", "package_url": "https://pypi.org/project/securetea/", "platform": "", "project_url": "https://pypi.org/project/securetea/", "project_urls": {"Homepage": "https://github.com/OWASP/SecureTea-Project"}, "release_url": "https://pypi.org/project/securetea/2.1/", "requires_dist": ["requests", "requests-oauthlib", "py-cpuinfo", "psutil", "flask", "flask-cors", "pynput", "python-telegram-bot", "twilio", "boto3", "geocoder", "pyudev", "ipwhois", "future", "scapy", "NetfilterQueue", "shodan ; extra == 'iot'", "pathlib ; extra == 'server'", "wget ; extra == 'server'", "yara-python ; extra == 'server'", "clamd ; extra == 'server'", "beautifulsoup4 ; extra == 'server'", "lxml ; extra == 'server'", "pathlib ; extra == 'system'", "wget ; extra == 'system'", "yara-python ; extra == 'system'", "clamd ; extra == 'system'", "beautifulsoup4 ; extra == 'system'", "lxml ; extra == 'system'"], "requires_python": ">=2.7", "summary": "SecureTea", "version": "2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>OWASP SecureTea Tool Project</h1>\n<h1>User Guide</h1>\n<p>Read developer guide <a href=\"https://github.com/OWASP/SecureTea-Project/blob/master/doc/en-US/dev_guide.md\" rel=\"nofollow\">here</a>.</p>\n<h2>Introduction</h2>\n<p>The OWASP SecureTea Project provides a one-stop security solution for various devices (personal computers / servers / IoT devices).</p>\n<h2>Installation</h2>\n<p><strong>Contents:</strong></p>\n<ul>\n<li>Pre-requisites</li>\n<li>Procedure for installing</li>\n<li>After installation</li>\n</ul>\n<h3>Pre-requisites</h3>\n<h4>Supported Platforms</h4>\n<p>OWASP SecureTea Tool project runs on Linux, Windows and macOS operating systems. It is compatible with both Python 2 and Python 3.</p>\n<h4>Hardware</h4>\n<ul>\n<li>Linux OS / Raspberry Pi - have <code>sudo</code> access on the terminal/console</li>\n<li>Mouse / Wireless Mouse / Touchpad congenital laptop</li>\n</ul>\n<h4>Software</h4>\n<ul>\n<li>Python 2.x or 3.x</li>\n<li>Angular</li>\n<li>Twitter account (optional)</li>\n<li>Telegram account (optional)</li>\n<li>Slack account (optional)</li>\n<li>Twilio SMS account (optional)</li>\n<li>Amazon Web Services account (optional)</li>\n<li>Libnetfilter</li>\n</ul>\n<h4>Installing pre-requisites</h4>\n<p>Python:<br>\n<a href=\"https://www.python.org/\" rel=\"nofollow\">https://www.python.org/</a></p>\n<p>Angular:<br>\n<a href=\"https://angular.io/\" rel=\"nofollow\">https://angular.io/</a></p>\n<p>Libnetfilter:<br>\n<a href=\"https://www.netfilter.org/projects/libnetfilter_queue/\" rel=\"nofollow\">https://www.netfilter.org/projects/libnetfilter_queue/</a></p>\n<pre>$ sudo apt-get update\n$ sudo apt-get install build-essential python-dev libnetfilter-queue-dev\n</pre>\n<p>Yara:<br>\n<a href=\"https://yara.readthedocs.io/en/v3.7.0/gettingstarted.html\" rel=\"nofollow\">https://yara.readthedocs.io/en/v3.7.0/gettingstarted.html</a></p>\n<ol>\n<li>Download the latest Yara release at: <a href=\"https://github.com/VirusTotal/yara/releases\" rel=\"nofollow\">https://github.com/VirusTotal/yara/releases</a></li>\n<li>Execute the following instructions in the order:</li>\n</ol>\n<pre>$ tar -zxf yara-3.10.0.tar.gz\n$ <span class=\"nb\">cd</span> yara-3.10.0\n$ ./bootstrap.sh\n$ sudo apt-get install automake libtool make gcc\n$ sudo apt-get install flex bison\n$ ./configure\n$ make\n$ sudo make install\n$ make check\n</pre>\n<p>Clam AV:<br>\n<a href=\"https://www.clamav.net/\" rel=\"nofollow\">https://www.clamav.net/</a></p>\n<ol>\n<li>Execute the following instructions in the order:</li>\n</ol>\n<pre>$ sudo apt-get install clamav\n$ sudo freshclam\n</pre>\n<h3>Procedure for installing</h3>\n<p>You can install OWASP SecureTea Tool using the following methods:</p>\n<ul>\n<li>PyPi</li>\n<li>GitHub</li>\n<li>Zip</li>\n</ul>\n<h4>Setting up a virtual environment</h4>\n<ol>\n<li>\n<p>Install virtualenv:\n<code>$ pip install virtualenv</code></p>\n</li>\n<li>\n<p>Create a virtual environment named <code>venv1</code>:\n<code>$ virtualenv venv1</code></p>\n</li>\n<li>\n<p>Activate virtual environment <code>venv1</code>:\n<code>$ source venv1/bin/activate</code></p>\n</li>\n</ol>\n<h4>PyPi</h4>\n<p>You can install SecureTea from PyPi package manager using the following command:</p>\n<p><code>$ sudo python3 -m pip install securetea</code></p>\n<p>Please make sure all dependencies are installed if this fails.</p>\n<h4>GitHub</h4>\n<p>Installing from GitHub involves the following steps:</p>\n<ol>\n<li>\n<p>Clone the repository:\n<code>$ git clone https://github.com/OWASP/SecureTea-Project.git</code></p>\n</li>\n<li>\n<p>Navigate into the project directory:\n<code>$ cd SecureTea-Project</code></p>\n</li>\n<li>\n<p>Install Python dependencies:\n<code>$ sudo python3 -m pip install -r requirements.txt</code></p>\n</li>\n<li>\n<p>Install SecureTea package:\n<code>$ sudo python3 setup.py install</code></p>\n</li>\n</ol>\n<p>If done, proceed to After installation.</p>\n<h4>Zip</h4>\n<p>Installing from Zip involves the following steps:</p>\n<ol>\n<li>\n<p>Download the <a href=\"https://github.com/OWASP/SecureTea-Project/archive/master.zip\" rel=\"nofollow\">zip</a>.</p>\n</li>\n<li>\n<p>Unzip using: <code>$ unzip master.zip</code></p>\n</li>\n<li>\n<p>Navigate into the project directory:\n<code>$ cd SecureTea-Project</code></p>\n</li>\n<li>\n<p>Install python dependencies:\n<code>$ sudo python3 -m pip install -r requirements.txt</code></p>\n</li>\n<li>\n<p>Install SecureTea package:\n<code>$ sudo python3 setup.py install</code></p>\n</li>\n</ol>\n<p>Tip: Incase of any error during installation related to NetfilterQueue, try using <code>$ sudo apt-get install build-essential python-dev libnetfilter-queue-dev</code> to resolve the error.</p>\n<p>If done, proceed to After installation.</p>\n<h3>After installation</h3>\n<h4>Configuring SecureTea</h4>\n<h5>Editing the configurations using a text-editor</h5>\n<p>Default configuration:</p>\n<pre><span class=\"p\">{</span>\n\t<span class=\"nt\">\"twitter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"api_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"api_secret_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"access_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"access_token_secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"telegram\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"user_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"twilio\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"twilio_sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"twilio_token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"twilio_from\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"twilio_to\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"slack\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"token\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"user_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"aws_ses\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"aws_email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"aws_access_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"aws_secret_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"gmail\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"sender_email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"to_email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"firewall\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"interface\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"inbound_IPRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"ip_inbound\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"outbound_IPRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"ip_outbound\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"protocolRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"protocols\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ICMP\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"scanLoad\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"extensions\"</span><span class=\"p\">:</span> <span class=\"s2\">\".exe\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"source_portRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"sports\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"dest_portRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"dports\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"HTTPRequest\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"HTTPResponse\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"DNSRule\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"dns\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t\t<span class=\"p\">},</span>\n\t\t<span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"time_lb\"</span><span class=\"p\">:</span> <span class=\"s2\">\"00:00\"</span><span class=\"p\">,</span>\n\t\t\t<span class=\"nt\">\"time_ub\"</span><span class=\"p\">:</span> <span class=\"s2\">\"23:59\"</span>\n\t\t<span class=\"p\">}</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"insecure_headers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"ids\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"threshold\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"interface\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"server_log\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"log_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"log_file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"window\"</span><span class=\"p\">:</span> <span class=\"s2\">\"30\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"ip_list\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"status_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"auto-server-patcher\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"apache\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"sysctl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"login\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"ssh\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"antivirus\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"update\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"custom-scan\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"auto-delete\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"monitor-usb\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"monitor-file-changes\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"virustotal-api-key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"web-deface\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"server-name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t<span class=\"p\">},</span>\t\n\t<span class=\"nt\">\"iot-check\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"nt\">\"shodan-api-key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XXXX\"</span><span class=\"p\">,</span>\n\t\t<span class=\"nt\">\"ip\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n\t<span class=\"p\">},</span>\n\t<span class=\"nt\">\"debug\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span>\t\n</pre>\n<h6>Using gedit<br></h6>\n<p><code>gedit securetea.conf</code></p>\n<h6>Using vim<br></h6>\n<p><code>vi securetea.conf</code></p>\n<h5>Configuring using interactive setup mode</h5>\n<h5>Setup all the features</h5>\n<ol>\n<li>Start SecureTea without any parameters:<br>\n<code>sudo SecureTea.py</code><br>\nThis will start an interactive setup mode, to skip a particular setup, enter s or S.<br><br>\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd636274db59ab04ae2fccf486404b98d5ff2c01/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f73657475705f616c6c2e676966\"><br></li>\n</ol>\n<h5>Setup a particular feature</h5>\n<p>Arguments list</p>\n<pre>--telegram     Start Telegram interactive setup\n--twitter      Start Twitter interactive setup\n--twilio_sms   Start Twilio SMS interactive setup\n--firewall     Start Firewall interactive setup\n--aws_ses      Start Amazon Web Services(AWS-Simple Email Services) interactive setup\n--gmail        Start G-Mail interactive setup\n</pre>\n<p>Examples:<br></p>\n<ul>\n<li>\n<p>Starting SecureTea-Firewall interactive setup: <code>sudo SecureTea.py --firewall</code><br><br>\n<img alt=\"Firewall\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d11ccfecd6c9ccd314371ddd6edb0ff0a8b2b99d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f73657475705f6669726577616c6c2e676966\"><br></p>\n</li>\n<li>\n<p>Starting Telegram &amp; Twitter interactive setup: <code>sudo SecureTea.py --telegram --twitter</code><br><br>\n<img alt=\"TelegramTwitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5db705dc6c895777efba9ad14717be2bf8e7d3ee/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f74656c655f7477692e676966\"><br></p>\n</li>\n</ul>\n<h5>Configuring using Web UI</h5>\n<ul>\n<li><a href=\"https://github.com/OWASP/SecureTea-Project/blob/master/doc/en-US/web_https.md\" rel=\"nofollow\">Using local web server over HTTPS</a></li>\n</ul>\n<h6>Previews</h6>\n<p><img alt=\"Network graph\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4fbc44333e4ea0419597582d62751bf2cb19fd2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368312e706e67\">\n<br><br>\n<img alt=\"Disk usage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/272c22b99a20aa35d87fd8a60c0302f3e81d9154/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368322e706e67\">\n<img alt=\"Process\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86b8f0575cb350f81929997ce27d861fcacfa379/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368332e706e67\">\n<br><br>\n<img alt=\"Last Login\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d97192f97c24632289144c975b2045619d7a967/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368342e706e67\">\n<br><br>\n<img alt=\"Network\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3be3be86240924daddbb31ee60f56626faa8ed98/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368352e706e67\">\n<img alt=\"Security\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aadd3fc3936ffed34a6d93a64f1fc524445ac38d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f647368372e706e67\"></p>\n<h5>Configuring using CLI arguments</h5>\n<pre>usage: SecureTea.py [-h] [--conf CONF] [--debug] [--twitter] [--twilio_sms]\n                    [--telegram] [--gmail] [--slack] [--aws_ses]\n                    [--twitter_api_key TWITTER_API_KEY]\n                    [--twitter_api_secret_key TWITTER_API_SECRET_KEY]\n                    [--twitter_access_token TWITTER_ACCESS_TOKEN]\n                    [--twitter_access_token_secret TWITTER_ACCESS_TOKEN_SECRET]\n                    [--telegram_bot_token TELEGRAM_BOT_TOKEN]\n                    [--telegram_user_id TELEGRAM_USER_ID]\n                    [--twilio_sid TWILIO_SID] [--twilio_token TWILIO_TOKEN]\n                    [--twilio_from TWILIO_FROM] [--twilio_to TWILIO_TO]\n                    [--slack_token SLACK_TOKEN]\n                    [--slack_user_id SLACK_USER_ID]\n                    [--sender_email SENDER_EMAIL] [--to_email TO_EMAIL]\n                    [--password PASSWORD] [--aws_email AWS_EMAIL]\n                    [--aws_secret_key AWS_SECRET_KEY]\n                    [--aws_access_key AWS_ACCESS_KEY] [--firewall]\n                    [--interface INTERFACE]\n                    [--inbound_IP_action INBOUND_IP_ACTION]\n                    [--inbound_IP_list INBOUND_IP_LIST]\n                    [--outbound_IP_action OUTBOUND_IP_ACTION]\n                    [--outbound_IP_list OUTBOUND_IP_LIST]\n                    [--protocol_action PROTOCOL_ACTION]\n                    [--protocol_list PROTOCOL_LIST]\n                    [--scan_action SCAN_ACTION] [--scan_list SCAN_LIST]\n                    [--dest_port_action DEST_PORT_ACTION]\n                    [--dest_port_list DEST_PORT_LIST]\n                    [--source_port_action SOURCE_PORT_ACTION]\n                    [--source_port_list SOURCE_PORT_LIST]\n                    [--HTTP_request_action HTTP_REQUEST_ACTION]\n                    [--HTTP_response_action HTTP_RESPONSE_ACTION]\n                    [--dns_action DNS_ACTION] [--dns_list DNS_LIST]\n                    [--time_lb TIME_LB] [--time_ub TIME_UB]\n                    [--insecure_headers] [--url URL] [--ids]\n                    [--threshold THRESHOLD] [--system_log] [--server_log]\n                    [--log_file LOG_FILE] [--log_type LOG_TYPE]\n                    [--window WINDOW] [--ip_list IP_LIST]\n                    [--status-code STATUS_CODE] [--auto-server-patcher]\n                    [--ssh] [--sysctl] [--login] [--apache] [--ssl]\t\n\t\t    [--antivirus] [--update UPDATE]\n                    [--custom-scan CUSTOM_SCAN] [--auto-delete]\n                    [--monitor-usb] [--monitor-file-changes]\n                    [--virustotal-api-key]\n                    [--web-deface] [--path PATH] [--server-name SERVER_NAME]\t\n\t\t    [--iot-checker][--shodan-api-key SHODAN_API_KEY] [--ip IP]\t\t    \n</pre>\n<p>Example usage:</p>\n<ul>\n<li>Configuring Slack: <code>sudo SecureTea.py --slack_user_id &lt;your data&gt; --slack_token &lt;your data&gt;</code><br><br>\n<img alt=\"Slack\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c12cda010f3ce639804815133c7a46fe0e36e74/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4f574153502f5365637572655465612d50726f6a6563742f6d61737465722f696d672f736c61636b5f636c692e676966\"><br></li>\n</ul>\n<h4>Setting up Web UI</h4>\n<p>Follow the following steps to setup Web UI</p>\n<ol>\n<li><code>cd gui</code></li>\n<li><code>npm install</code></li>\n<li><code>ng serve</code></li>\n<li><code>sudo python monitor.py</code></li>\n<li>Visit <a href=\"http://localhost:4200\" rel=\"nofollow\">http://localhost:4200</a> to view your project, END-POINT is <a href=\"http://localhost:5000\" rel=\"nofollow\">http://localhost:5000</a>.</li>\n</ol>\n<h4>Getting tokens</h4>\n<p>In order to use the various communication medium you need to get yourself a verified token from the respective provider.</p>\n<h5>Getting Twitter tokens</h5>\n<ul>\n<li>Visit <a href=\"https://apps.twitter.com\" rel=\"nofollow\">https://apps.twitter.com</a>.</li>\n<li>Create new app to obtain authentication and token codes.</li>\n</ul>\n<h5>Getting Slack tokens</h5>\n<ul>\n<li>Visit <a href=\"https://api.slack.com/apps/new\" rel=\"nofollow\">https://api.slack.com/apps/new</a> and create a new bot app.</li>\n<li>In the bot app settings, setup event subscriptions by Enabling Events.</li>\n<li>Install the bot app in the workspace required.</li>\n<li>Get the \"Bot User OAuth Access Token\", it starts with <code>xoxb-</code></li>\n<li>Get your user id for the particular workspace.</li>\n</ul>\n<h5>Getting Telegram tokens</h5>\n<ul>\n<li>Visit <a href=\"https://core.telegram.org/bots#botfather\" rel=\"nofollow\">https://core.telegram.org/bots#botfather</a> &amp; follow the steps to obtain Telegram token &amp; user id.</li>\n</ul>\n<h5>Getting Twilio SMS tokens</h5>\n<ul>\n<li>Visit <a href=\"https://www.twilio.com\" rel=\"nofollow\">https://www.twilio.com</a> and click on \"Get a free API key\".</li>\n</ul>\n<h5>Getting AWS-SES tokens</h5>\n<ul>\n<li>Sign up for AWS <a href=\"https://aws.amazon.com/\" rel=\"nofollow\">https://aws.amazon.com/</a> (For new users)</li>\n<li>Search for Simple Email Service in search bar of AWS</li>\n<li>Select your AWS region accordingly( e.g, US East)</li>\n<li>Click on email address and verify your email</li>\n<li>Click on \"My security credentials\"</li>\n<li>Click \"Get started with IAM users\" and add a new user(You can use root user's access code too ,but that would be insecure.)</li>\n<li>Click on the username of just created user</li>\n<li>Click \"Security Credentials\" and note down your \"Access Key ID(aws_access_key)\" and \"Secret Access Key(aws_secret_kay)\".\nWarning: Do not share this keys for security reasons.</li>\n<li>Put those keys and email into 'SecureTea.conf' file.</li>\n</ul>\n<h5>Getting Gmail tokens</h5>\n<ul>\n<li>Sign up for a Gmail account <a href=\"https://mail.google.com\" rel=\"nofollow\">https://mail.google.com</a> (for new users)</li>\n<li>Go to \"Accounts\" and proceed to \"Security\" dashboard</li>\n<li>Turn on \"Less secure app access\" to allow SecureTea be able to send emails</li>\n<li>Proceed to <a href=\"https://accounts.google.com/DisplayUnlockCaptcha\" rel=\"nofollow\">https://accounts.google.com/DisplayUnlockCaptcha</a> and click on Continue, and then allow</li>\n<li>Put your sender email ID, password and destination email ID in the <code>securetea.conf</code> file.</li>\n</ul>\n<h2>Usage</h2>\n<p>The following argument options are currently available:</p>\n<pre>   -h, --help           show this help message and exit\n  --conf CONF           Path of config file. default:-\n                        \"~/.securetea/securetea.conf\"\n  --debug               Degug true or false\n  --twitter             Setup twitter credentials\n  --twilio_sms          Setup twilio SMS credentials\n  --telegram            Setup telegram SMS credentials\n  --gmail               Setup Gmail credentials\n  --slack               Setup Slack credentials\n  --aws_ses             Setup AWS SES credentials\n  --twitter_api_key TWITTER_API_KEY, -tak TWITTER_API_KEY\n                        Twitter api key\n  --twitter_api_secret_key TWITTER_API_SECRET_KEY, -tas TWITTER_API_SECRET_KEY\n                        Twitter api secret\n  --twitter_access_token TWITTER_ACCESS_TOKEN, -tat TWITTER_ACCESS_TOKEN\n                        Twitter access token\n  --twitter_access_token_secret TWITTER_ACCESS_TOKEN_SECRET, -tats TWITTER_ACCESS_TOKEN_SECRET\n                        Twitter access token secret\n  --telegram_bot_token TELEGRAM_BOT_TOKEN, -tbt TELEGRAM_BOT_TOKEN\n                        Telegram Bot Token\n  --telegram_user_id TELEGRAM_USER_ID, -tui TELEGRAM_USER_ID\n                        Telegram user id\n  --twilio_sid TWILIO_SID, -tws TWILIO_SID\n                        Twilio SID\n  --twilio_token TWILIO_TOKEN, -twt TWILIO_TOKEN\n                        Twilio authorization token\n  --twilio_from TWILIO_FROM, -twf TWILIO_FROM\n                        Twilio (From) phone number\n  --twilio_to TWILIO_TO, -twto TWILIO_TO\n                        Twilio (To) phone number\n  --slack_token SLACK_TOKEN, -st SLACK_TOKEN\n                        Slack token\n  --slack_user_id SLACK_USER_ID, -suid SLACK_USER_ID\n                        Slack user id\n  --sender_email SENDER_EMAIL\n                        Gmail sender e-mail id\n  --to_email TO_EMAIL   Destination of e-mail\n  --password PASSWORD   Password for Gmail sender account\n  --aws_email AWS_EMAIL, -awse AWS_EMAIL\n                        AWS email id\n  --aws_secret_key AWS_SECRET_KEY, -awss AWS_SECRET_KEY\n                        AWS secret key\n  --aws_access_key AWS_ACCESS_KEY, -awsa AWS_ACCESS_KEY\n                        AWS access key\n  --firewall, -f        Start firewall\n  --interface INTERFACE\n                        Name of the interface\n  --inbound_IP_action INBOUND_IP_ACTION\n                        Inbound IP rule action\n  --inbound_IP_list INBOUND_IP_LIST\n                        List of inbound IPs to look for\n  --outbound_IP_action OUTBOUND_IP_ACTION\n                        Outbound IP rule action (0: BLOCK, 1: ALLOW)\n  --outbound_IP_list OUTBOUND_IP_LIST\n                        List of outbound IPs to look for\n  --protocol_action PROTOCOL_ACTION\n                        Protocol action (0: BLOCK, 1: ALLOW)\n  --protocol_list PROTOCOL_LIST\n                        List of protocols to look for\n  --scan_action SCAN_ACTION\n                        Scan load action (0: BLOCK, 1: ALLOW)\n  --scan_list SCAN_LIST\n                        List of extensions to scan for\n  --dest_port_action DEST_PORT_ACTION\n                        Destination port action (0: BLOCK, 1: ALLOW)\n  --dest_port_list DEST_PORT_LIST\n                        List of destination ports to look for\n  --source_port_action SOURCE_PORT_ACTION\n                        Source port action (0: BLOCK, 1: ALLOW)\n  --source_port_list SOURCE_PORT_LIST\n                        List of source ports to look for\n  --HTTP_request_action HTTP_REQUEST_ACTION\n                        HTTP request action (0: BLOCK, 1: ALLOW)\n  --HTTP_response_action HTTP_RESPONSE_ACTION\n                        HTTP response action (0: BLOCK, 1: ALLOW)\n  --dns_action DNS_ACTION\n                        DNS action (0: BLOCK, 1: ALLOW)\n  --dns_list DNS_LIST   List of DNS to look for\n  --time_lb TIME_LB     Time lower bound\n  --time_ub TIME_UB     Time upper bound\n  --insecure_headers, -ih\n                        Test URL for insecure headers\n  --url URL, -u URL     URL on which operations are to be performed\n  --ids                 Start Intrusion Detection System (IDS)\n  --threshold THRESHOLD, -th THRESHOLD\n                        Intrusion Detection System (IDS) threshold\n  --system_log, -sys_log\n                        Start system log monitoring process\n  --server_log          Start server log monitoring process\n  --log_file LOG_FILE   Path of the log file\n  --log_type LOG_TYPE   Type of the log file (Apache/Nginx)\n  --window WINDOW       Days old log to process\n  --ip_list IP_LIST     List of IPs to grab from log file\n  --status_code STATUS_CODE\n                        List of status code to grab from log file\n  --auto-server-patcher, -asp\n                        Start auto server patcher\n  --ssh                 Patch SSH config\n  --sysctl              Patch system configuration\n  --login               Patch login configuration\n  --apache              Patch apache configuration\n  --ssl                 Scan for SSL vulnerability\n  --antivirus           Start AntiVirus\n  --update UPDATE       Auto-update AntiVirus or not (1: yes, 0: no)\n  --custom-scan CUSTOM_SCAN\n\t\t\tPath to custom scan\n  --auto-delete         Auto delete malicious files or manually (1: auto, 0:\n\t\t\tmanual)\n  --monitor-usb         Monitor USB devices or not (1: yes, 0: no)\n  --monitor-file-changes\n\t\t\tMonitor file changes or not (1:yes, 0:no)\n  --virustotal-api-key  Virus Total API key  \n  --web-deface          Start Web Deface Detection\n  --path PATH           Path of the directory\n  --server-name SERVER_NAME\n                        Name of the server (apache/nginx/etc.)\n  --iot-checker, -ic    Start IoT Anonymity Checker\n  --shodan-api-key SHODAN_API_KEY, -sak SHODAN_API_KEY\n                        Shodan API Key\n  --ip IP               IP address on which to perform operation\n</pre>\n<h3>Example usages</h3>\n<h4>Starting Twitter notifier</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --twitter_api_key &lt;data&gt; --twitter_api_secret_key &lt;data&gt; --twitter_access_token &lt;data&gt; --twitter_access_token_secret &lt;data&gt;\n</pre>\n<h4>Starting Slack notifier</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --slack_token &lt;data&gt; --slack_user_id &lt;data&gt;\n</pre>\n<h4>Starting Telegram notifier</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --telegram_bot_token &lt;data&gt; --telegram_user_id &lt;data&gt;\n</pre>\n<h4>Starting Twilio notifier</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --twilio_sid &lt;data&gt; --twilio_token &lt;data&gt; --twilio_from &lt;data&gt; --twilio_to &lt;data&gt;\n</pre>\n<h4>Starting Firewall</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --interface &lt;data&gt; --inbound_IP_action &lt;data&gt; --inbound_IP_list &lt;data&gt; --outbound_IP_action &lt;data&gt; --outbound_IP_list &lt;data&gt; --protocol_action &lt;data&gt; --protocol_list &lt;data&gt; --scan_action &lt;data&gt; --scan_list &lt;data&gt; --dest_port_action &lt;data&gt; --dest_port_list &lt;data&gt; --source_port_action &lt;data&gt; --source_port_list &lt;data&gt; --HTTP_request_action &lt;data&gt; --HTTP_response_action &lt;data&gt; --dns_action &lt;data&gt; --dns_list &lt;data&gt; --time_lb &lt;data&gt; --time_ub &lt;data&gt; \n</pre>\n<h4>Starting AWS-SES</h4>\n<p>Usage:<br></p>\n<pre>sudo SecureTea.py --aws_ses &lt;data&gt; --aws_email &lt;data&gt; --aws_access_key &lt;data&gt; --aws_secret_key &lt;data&gt;\n</pre>\n<h3>Setting up notifiers</h3>\n<h4>Setting up Twitter</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --twitter\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--twitter_api_key</code></td>\n<td>XXXX</td>\n<td>Twitter API key</td>\n</tr>\n<tr>\n<td><code>--twitter_api_secret_key</code></td>\n<td>XXXX</td>\n<td>Twitter API Secret Key</td>\n</tr>\n<tr>\n<td><code>--twitter_access_token</code></td>\n<td>XXXX</td>\n<td>Twitter Access Token</td>\n</tr>\n<tr>\n<td><code>--twitter_access_token_secret</code></td>\n<td>XXXX</td>\n<td>Twitter Access Token Secret</td>\n</tr></tbody></table>\n<h4>Setting up Slack</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --slack\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--slack_token</code></td>\n<td>XXXX</td>\n<td>Slack Token</td>\n</tr>\n<tr>\n<td><code>--slack_user_id</code></td>\n<td>XXXX</td>\n<td>Slack User ID</td>\n</tr></tbody></table>\n<h4>Setting up Amazon SES</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --aws_ses\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--aws_email</code></td>\n<td>XXXX</td>\n<td>AWS SES Email</td>\n</tr>\n<tr>\n<td><code>--aws_secret_key</code></td>\n<td>XXXX</td>\n<td>AWS SES Secret Key</td>\n</tr>\n<tr>\n<td><code>--aws_access_key</code></td>\n<td>XXXX</td>\n<td>AWS SES Access Key</td>\n</tr></tbody></table>\n<h4>Setting up Gmail</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --gmail\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--to_email</code></td>\n<td>XXXX</td>\n<td>G-mail To E-mail</td>\n</tr>\n<tr>\n<td><code>--sender_email</code></td>\n<td>XXXX</td>\n<td>G-mail From E-mail</td>\n</tr>\n<tr>\n<td><code>--password</code></td>\n<td>XXXX</td>\n<td>G-mail App Password</td>\n</tr></tbody></table>\n<h4>Setting up Telegram</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --telegram\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--telegram_bot_token</code></td>\n<td>XXXX</td>\n<td>Telegram Bot Token</td>\n</tr>\n<tr>\n<td><code>--telegram_user_id</code></td>\n<td>XXXX</td>\n<td>Telegram User ID</td>\n</tr></tbody></table>\n<h4>Setting up SMS</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --twilio_sms\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--twilio_sid</code></td>\n<td>XXXX</td>\n<td>Twilio SID</td>\n</tr>\n<tr>\n<td><code>--twilio_token</code></td>\n<td>XXXX</td>\n<td>Twilio Token</td>\n</tr>\n<tr>\n<td><code>--twilio_from</code></td>\n<td>XXXX</td>\n<td>Twilio From Phone No.</td>\n</tr>\n<tr>\n<td><code>--twilio_to</code></td>\n<td>XXXX</td>\n<td>Twilio To Phone No.</td>\n</tr></tbody></table>\n<h3>Setting up Firewall</h3>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --firewall\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--interface</code></td>\n<td>None</td>\n<td>Name of the <a href=\"https://www.computerhope.com/unix/uifconfi.htm\" rel=\"nofollow\">interface</a></td>\n</tr>\n<tr>\n<td><code>--inbound_IP_action</code></td>\n<td>0</td>\n<td>Inbound IP rule action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--inbound_IP_list</code></td>\n<td>None</td>\n<td>List of inbound IPs to look for</td>\n</tr>\n<tr>\n<td><code>--outbound_IP_action</code></td>\n<td>0</td>\n<td>Outbound IP rule action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--outbound_IP_list</code></td>\n<td>None</td>\n<td>List of outbound IPs to look for.</td>\n</tr>\n<tr>\n<td><code>--protocol_action</code></td>\n<td>0</td>\n<td>Protocol action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--protocol_list</code></td>\n<td>None</td>\n<td>List of protocols to look for</td>\n</tr>\n<tr>\n<td><code>--scan_action</code></td>\n<td>0</td>\n<td>Scan load action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--scan_list</code></td>\n<td>None</td>\n<td>List of extensions to scan for</td>\n</tr>\n<tr>\n<td><code>--dest_port_action</code></td>\n<td>0</td>\n<td>Destination port action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--dest_port_list</code></td>\n<td>None</td>\n<td>List of destination ports to look for</td>\n</tr>\n<tr>\n<td><code>--source_port_action</code></td>\n<td>0</td>\n<td>Source port action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--source_port_list</code></td>\n<td>None</td>\n<td>List of source ports to look for</td>\n</tr>\n<tr>\n<td><code>--HTTP_request_action</code></td>\n<td>0</td>\n<td>HTTP request action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--HTTP_response_action</code></td>\n<td>None</td>\n<td>HTTP response action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--dns_action</code></td>\n<td>0</td>\n<td>DNS action (0: BLOCK, 1: ALLOW)</td>\n</tr>\n<tr>\n<td><code>--dns_list</code></td>\n<td>None</td>\n<td>List of DNS to look for</td>\n</tr>\n<tr>\n<td><code>--time_lb</code></td>\n<td>00:00</td>\n<td>Time lower bound</td>\n</tr>\n<tr>\n<td><code>--time_ub</code></td>\n<td>23:59</td>\n<td>Time upper bound</td>\n</tr></tbody></table>\n<h4>Setting up Intrusion Detection System</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --ids\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--threshold</code></td>\n<td>10</td>\n<td>Intrusion Detection System (IDS) threshold</td>\n</tr>\n<tr>\n<td><code>--interface</code></td>\n<td>None</td>\n<td>Name of the <a href=\"https://www.computerhope.com/unix/uifconfi.htm\" rel=\"nofollow\">interface</a></td>\n</tr></tbody></table>\n<p>What are <strong>thresholds</strong>?\n<br>\nIt simply represents the number of times you want to ignore the possibility of an attack. In other words, it is the extent to which IDS will not bother to inform you about the attack, once it crosses the limit (here threshold), it will start notifying you about the possible attack. Lower the number is, the more sensitive IDS is, and may also give rise to false alarms. Higher the number is, the less sensitive IDS is, it may give rise to less false positives but at the same time choosing a very high number is not suggested either. Choose a mid range number within (10-100) to be on the safer side while keeping alarms of false positives to the minimal.</p>\n<h4>Setting up Insecure Headers</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --insecure_headers\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--url</code></td>\n<td>None</td>\n<td>URL on which operations are to be performed</td>\n</tr></tbody></table>\n<h4>Setting up Server Log Monitor</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --server-log\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--log-file</code></td>\n<td>XXXX</td>\n<td>Path of the log file</td>\n</tr>\n<tr>\n<td><code>--log-type</code></td>\n<td>XXXX</td>\n<td>Type of the log file (Apache/Nginx)</td>\n</tr>\n<tr>\n<td><code>--window</code></td>\n<td>XXXX</td>\n<td>Days old log to process</td>\n</tr>\n<tr>\n<td><code>--ip-list</code></td>\n<td>XXXX</td>\n<td>List of IPs to grab from log file</td>\n</tr>\n<tr>\n<td><code>--status-code</code></td>\n<td>XXXX</td>\n<td>List of status code to grab from log file</td>\n</tr></tbody></table>\n<h4>Setting up System Log Monitor</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --system_log\n</pre>\n<h4>2. Argument list</h4>\n<p>No optional arguments.</p>\n<h4>Setting up Auto Server Patcher</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --auto-server-patcher\n</pre>\n<p><strong>or:</strong></p>\n<pre>sudo SecureTea.py -asp\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--url</code></td>\n<td>XXXX</td>\n<td>URL for SSL scanning</td>\n</tr>\n<tr>\n<td><code>--apache</code></td>\n<td>1</td>\n<td>Patch apache configuration or not (0:no, 1:yes)</td>\n</tr>\n<tr>\n<td><code>--sysctl</code></td>\n<td>1</td>\n<td>Patch system configuration or not (0:no, 1:yes)</td>\n</tr>\n<tr>\n<td><code>--login</code></td>\n<td>1</td>\n<td>Patch login configuration or not (0:no, 1:yes)</td>\n</tr>\n<tr>\n<td><code>--ssh</code></td>\n<td>1</td>\n<td>Patch SSH configuration or not (0:no, 1:yes)</td>\n</tr>\n<tr>\n<td><code>--ssl</code></td>\n<td>1</td>\n<td>Scan for SSL vulnerability</td>\n</tr></tbody></table>\n<h4>Setting up AntiVirus</h4>\n<p>Example usage:<br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --antivirus\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--update</code></td>\n<td>1</td>\n<td>Auto update ON (1) or OFF (0)</td>\n</tr>\n<tr>\n<td><code>--custom-scan</code></td>\n<td>None</td>\n<td>Path of the directory to custom scan</td>\n</tr>\n<tr>\n<td><code>--auto-delete</code></td>\n<td>0</td>\n<td>Auto clean the found malicious files (1) or manually (0)</td>\n</tr>\n<tr>\n<td><code>--monitor-usb</code></td>\n<td>1</td>\n<td>Monitor USB devices or not (1:yes, 0:no)</td>\n</tr>\n<tr>\n<td><code>--monitor-file-changes</code></td>\n<td>1</td>\n<td>Monitor files changes or addition (1:yes, 0:no)</td>\n</tr>\n<tr>\n<td><code>--virustotal-api-key</code></td>\n<td>XXXX</td>\n<td>VirusTotal API key</td>\n</tr></tbody></table>\n<h4>Setting up Web Deface Detection</h4>\n<p>Example usage: <br></p>\n<h5>1. Using interactive setup</h5>\n<pre>sudo SecureTea.py --web-deface\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--path</code></td>\n<td>None</td>\n<td>Path of the directory</td>\n</tr>\n<tr>\n<td><code>--server-name</code></td>\n<td>None</td>\n<td>Name of the server (apache/nginx/etc.)</td>\n</tr></tbody></table>\n<h4>Setting up IoT Anonymity Checker</h4>\n<p>Example usage: <br></p>\n<h4>1. Using interactive setup</h4>\n<pre>sudo SecureTea.py --iot-checker\n</pre>\n<pre>sudo SecureTea.py -ic\n</pre>\n<h4>2. Argument list</h4>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>--shodan-api-key</code></td>\n<td>XXXX</td>\n<td>Shodan API Key</td>\n</tr>\n<tr>\n<td><code>--ip</code></td>\n<td>None</td>\n<td>IP address on which to perform operation</td>\n</tr></tbody></table>\n<h4>Starting up modes</h4>\n<h5>Starting up in server mode</h5>\n<h6>Integrations (features) of server mode</h6>\n<ul>\n<li>Firewall</li>\n<li>Server Log Monitor</li>\n<li>AntiVirus</li>\n<li>System Log Monitor</li>\n<li>Intrusion Detection System (IDS)</li>\n<li>Auto Server Patcher</li>\n<li>Web Deface Detection</li>\n</ul>\n<p>Example usage: <br></p>\n<h6>1. Non-debug mode</h6>\n<pre>sudo SecureTea.py --server-mode\n</pre>\n<h6>1. Debug mode</h6>\n<pre>sudo SecureTea.py --server-mode --debug\n</pre>\n<p>Upon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 7 modules.</p>\n<p>It makes a lot easier to configure SecureTea, with server mode they can easily secure their servers. You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 7, it is not necessary to configure them all.</p>\n<h5>Starting up in system mode</h5>\n<h6>Integrations (features) of system mode</h6>\n<ul>\n<li>Firewall</li>\n<li>AntiVirus</li>\n<li>System Log Monitor</li>\n<li>Intrusion Detection System (IDS)</li>\n</ul>\n<p>Example usgae: <br></p>\n<h6>1. Non-debug mode</h6>\n<pre>sudo SecureTea.py --system-mode\n</pre>\n<h6>1. Debug mode</h6>\n<pre>sudo SecureTea.py --system-mode --debug\n</pre>\n<p>Upon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 4 modules.</p>\n<p>It makes a lot easier to configure SecureTea, with system mode they can easily secure their systems (PC / laptops). You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 4, it is not necessary to configure them all.</p>\n<h5>Starting up in IoT mode</h5>\n<h6>Integrations (features) of IoT mode</h6>\n<ul>\n<li>Firewall</li>\n<li>Intrusion Detection System (IDS)</li>\n<li>IoT Anonymity Checker</li>\n</ul>\n<p>Example usgae: <br></p>\n<h6>1. Non-debug mode</h6>\n<pre>sudo SecureTea.py --iot-mode\n</pre>\n<h6>1. Debug mode</h6>\n<pre>sudo SecureTea.py --iot-mode --debug\n</pre>\n<p>Upon this, it will ask whether to load the previously saved configurations or enter a new one. Choosing to go with a new configuration will start an interactive setup of the respected modules. Also, user can skip any module among the above 3 modules.</p>\n<p>It makes a lot easier to configure SecureTea, with IoT mode they can easily secure their IoT devices. You need to bother about the various arguments or the toughness of setting up SecureTea individual modules. Also, since you can skip any module among the above 3, it is not necessary to configure them all.</p>\n<h2>Firewall</h2>\n<p>SecureTea Firewall currently uses the following rules to filter the incoming traffic:\n<br><br>\n<strong>Process 1 (Firewall Engine):</strong></p>\n<ul>\n<li>Filter packets based on:\n<ul>\n<li>Inbound IP rules</li>\n<li>Outbound IP rules</li>\n<li>Source port rules</li>\n<li>Destination port rules</li>\n<li>Protocols</li>\n<li>Scan for downloads in HTTP websites</li>\n<li>DNS filter rules</li>\n<li>Filter HTTP request &amp; response</li>\n<li>IP packet first fragment</li>\n<li>IP packet fragment boundary</li>\n<li>IP packet fragment small offset</li>\n<li>Unknown IP version</li>\n<li>Invalid IP source</li>\n<li>Invalid IP header length</li>\n<li>Network congestion detection</li>\n<li>Ending FIN-ACK handshakes</li>\n<li>TCP Packet with None flag</li>\n<li>SYN fragmentation</li>\n<li>ICMP fragmentation attack</li>\n<li>Large ICMP packets</li>\n</ul>\n</li>\n</ul>\n<p>Apart from that, the background process deals with the following functions:\n<br><br>\n<strong>Process 2 (Firewall Monitor):</strong></p>\n<ul>\n<li>Monitor open ports</li>\n<li>Monitor active services</li>\n<li>Monitor network usage</li>\n<li>Monitor active CPU process</li>\n</ul>\n<p><strong>Generate report about the malicious IP address using OSINT tools</strong>\nThe report will contain the following fields:</p>\n<ol>\n<li>Reverse DNS</li>\n<li>Geo lookup</li>\n<li>WHOIS lookup</li>\n<li>Other important details</li>\n</ol>\n<h2>Intrusion Detection System</h2>\n<p>SecureTea Intrusion Detection System (IDS) deals with the following attack vectors and logs any abnormalities:</p>\n<p><strong>Detect probe (reconnaissance) attacks (performed for information gathering)</strong></p>\n<ul>\n<li>General scans: TCP ACK &amp; TCP Window, UDP, ICMP scans</li>\n<li>Stealth scans: FIN, XMAS, NULL scans</li>\n<li>OS fingerprinting scans</li>\n</ul>\n<p><strong>Detect Denial of Service (DoS) &amp; Remote to Local (R2L) attacks</strong></p>\n<ul>\n<li>DoS attacks</li>\n<li>CAM Table Exhaustion</li>\n<li>DHCP Exhaustion</li>\n<li>Man in The Middle (MiTM) / ARP cache poisoning</li>\n<li>SYN flood attack</li>\n<li>Ping of death</li>\n<li>Land attack</li>\n<li>Wireless\n<ul>\n<li>Deauthentication attack</li>\n<li>Hidden node attack</li>\n<li>SSID spoofing</li>\n<li>Fake access point</li>\n</ul>\n</li>\n</ul>\n<p><strong>Generate report about the malicious IP address using OSINT tools</strong>\nThe report will contain the following fields:</p>\n<ol>\n<li>Reverse DNS</li>\n<li>Geo lookup</li>\n<li>WHOIS lookup</li>\n<li>Other important details</li>\n</ol>\n<h2>Insecure Headers</h2>\n<p>Check/monitor the website for the followings:</p>\n<ul>\n<li>X-XSS-Protection</li>\n<li>X-Content-Type</li>\n<li>Strict Transport Security</li>\n<li>Content Security Policy</li>\n<li>X-Frame</li>\n<li>HTTP methods\n<ul>\n<li>Test all methods - 'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'TRACE', 'TEST'</li>\n<li>Cross Site Tracing vulnerability</li>\n</ul>\n</li>\n<li>Check for cookie details</li>\n</ul>\n<h2>System Log Monitor</h2>\n<p>System log aggregator to disparate log files, organize the useful data and apply intelligence to detect intrusion activities.</p>\n<p><strong>a. Log file :</strong> <code>/etc/passwd</code> &amp; <code>/etc/shadow</code></p>\n<ul>\n<li>Detect backdoors</li>\n<li>Detect user existing without a password that may lead to privilege escalation</li>\n<li>Check integrity of system's password storing</li>\n<li>Detect non-standard hashing algorithm used in passwords to guess system manipulation</li>\n</ul>\n<p><strong>b. Log file</strong>: <code>/var/log/auth.log</code> &amp; <code>/var/log/faillog</code></p>\n<ul>\n<li>Detect system login attempts</li>\n<li>Detect password brute-force</li>\n<li>Detect harmful commands executed as root</li>\n<li>Detect port scans</li>\n<li>Detect SSH login attempts &amp; brute-force</li>\n</ul>\n<p><strong>c. Log file:</strong> <code>/var/log/syslog</code></p>\n<ul>\n<li>Detect malicious sniffer by extracting PROMISC mode</li>\n</ul>\n<h2>Server Log Monitor</h2>\n<p>System log aggregator to disparate server log files, organize the useful data and apply intelligence to detect intrusion activities.</p>\n<p>Currently, the server log monitor supports the following log file types:</p>\n<ol>\n<li>Apache</li>\n<li>Nginx</li>\n</ol>\n<p>The following suspicious activities/attacks can be detected:</p>\n<ul>\n<li>\n<p>Attacks</p>\n<ul>\n<li>Denial of Service (DoS) attacks</li>\n<li>Cross site scripting (XSS) injection</li>\n<li>SQL injection (SQLi)</li>\n<li>Local file inclusion (LFI)</li>\n<li>Web shell injection</li>\n</ul>\n</li>\n<li>\n<p>Reconnaissance attacks</p>\n<ul>\n<li>Web crawlers / spiders / bots</li>\n<li>URL Fuzzing</li>\n<li>Port scans</li>\n<li>Bad user agents</li>\n</ul>\n</li>\n<li>\n<p>Log bad/suspicious IP (later on picked up by Firewall to block incoming request from that IP)</p>\n</li>\n<li>\n<p>User defined rules:</p>\n<ul>\n<li>Filter based on selected IPs</li>\n<li>Filter based on response code</li>\n</ul>\n</li>\n</ul>\n<p><strong>Generate report about the malicious IP address using OSINT tools</strong>\nThe report will contain the following fields:</p>\n<ol>\n<li>Reverse DNS</li>\n<li>Geo lookup</li>\n<li>WHOIS lookup</li>\n<li>Other important details</li>\n</ol>\n<h2>Auto Server Patcher</h2>\n<p>SecureTea Auto Server Patcher will patch the server configurations for highest security &amp; help overcome common security deployment mistakes.</p>\n<p>The following features are currently supported:</p>\n<ul>\n<li>\n<p>Auto update packages</p>\n</li>\n<li>\n<p>Set password expiration &amp; password strength rules</p>\n</li>\n<li>\n<p>Check for rootkits</p>\n</li>\n<li>\n<p>Auto remove discarded package</p>\n</li>\n<li>\n<p>Enhance <strong>IP TABLE</strong> rules:</p>\n<ul>\n<li>Force SYN packets check</li>\n<li>Drop XMAS packets</li>\n<li>Drop null packets</li>\n<li>Drop incoming packets with fragments</li>\n</ul>\n</li>\n<li>\n<p>Configure <strong><code>/etc/sysctl.conf</code></strong></p>\n<ul>\n<li>Disable IP forwarding &amp; IP source routing</li>\n<li>Disable sent packets redirects</li>\n<li>Disable ICMP redirect acceptance</li>\n<li>Enable IP spoofing protection</li>\n<li>Enable bad error message protection</li>\n</ul>\n</li>\n<li>\n<p>Patch <strong>Apache</strong> server configurations</p>\n<ul>\n<li>Prevent server from broadcasting version number</li>\n<li>Turn off TRACE method to prevent Cross-Site Scripting</li>\n<li>X-powered by headers</li>\n</ul>\n</li>\n<li>\n<p>Configure <strong>SSH</strong></p>\n<ul>\n<li>Disallow root access via SSH</li>\n<li>Disallow SSH from trusting a host based only on its IP</li>\n<li>Prevent users from logging into SSH with an empty password</li>\n<li>Sop the possibility of the server sending commands back to the client</li>\n<li>Drop the SSH connection after 5 failed authorization attempts</li>\n<li>Disable weak ciphers</li>\n<li>Disables password authentication and defers authorization to the key-based PAM</li>\n<li>Log out idle users after 15 minutes</li>\n<li>Configure server checks whether the session is active before dropping</li>\n</ul>\n</li>\n<li>\n<p>List all the possible <strong>SSL</strong> vulnerabilities in the server using SSL Labs API</p>\n<ul>\n<li>Beast attack</li>\n<li>Poodle</li>\n<li>Poodle TLS</li>\n<li>RC4</li>\n<li>Heartbeat</li>\n<li>Heartbleed</li>\n<li>Ticketbleed</li>\n<li>OpenSSL CCS</li>\n<li>OpenSSL padding</li>\n<li>Robot attack</li>\n<li>Freak</li>\n<li>Logjam</li>\n<li>Drown attack</li>\n</ul>\n</li>\n</ul>\n<h2>AntiVirus</h2>\n<p>SecureTea real-time signature &amp; heuristic based antivirus.</p>\n<p>The following features are currently supported:</p>\n<ol>\n<li>\n<p><strong>Auto fetch updates</strong>: Smart update mechanism, that keeps track of the last update and resumes update from the last downloaded file. User can configure to <strong>switch off</strong> and <strong>switch on</strong> the auto-update feature.</p>\n</li>\n<li>\n<p><strong>Real-Time monitoring</strong>: Scan as soon as a file is modified or a new file is added.</p>\n</li>\n<li>\n<p><strong>Scanner engine</strong>: Scanner engine runs on <strong>3 process</strong>, they are as follows:</p>\n<ul>\n<li><strong>Hash</strong> Signature scanner</li>\n<li><strong>Yara</strong> Heuristic scanner</li>\n<li><strong>Clam AV</strong> Scanner</li>\n</ul>\n</li>\n<li>\n<p><strong>YARA</strong> rules can detect:</p>\n<ul>\n<li>Viruses</li>\n<li>Worms</li>\n<li>Ransomware</li>\n<li>Adware</li>\n<li>Spyware</li>\n<li>Rootkits</li>\n<li>RATs</li>\n</ul>\n</li>\n<li>\n<p>Leveraging the power of <strong>VirusTotal API</strong>: Optional for users, provides an easy option for them to test for specific files against multiple anti-viruses &amp; in a safe sandbox environment, i.e. after a file is detected malicious, the file will be put under VirusTotal test for a final confirmation.</p>\n</li>\n<li>\n<p>Monitor <strong>orphaned files</strong>: Use SUID, SGID and read capabilities in Linux to separate orphaned files and check if any file is granted more capabilities than it should be.</p>\n</li>\n<li>\n<p>Keeps an eye on <strong>USB devices</strong>: Start scanning the USB device as soon as it is plugged in &amp; report for any virus/malware found.</p>\n</li>\n<li>\n<p>Cleaning the found files: Opt for either <strong>auto-delete</strong> or <strong>manual</strong> delete option, in auto-delete the file found malicious is automatically deleted, whereas in manual it requires the confirmation of the user.</p>\n</li>\n<li>\n<p><strong>Custom</strong> and <strong>Full</strong> scan options</p>\n</li>\n</ol>\n<h2>Web Deface Detection</h2>\n<p>Monitor server files to detect any changes, roll back to default in case of defacement.</p>\n<p><strong>Features:</strong></p>\n<ol>\n<li>\n<p>Auto locate the server files based on the user choice of server (i.e. Apache, Nginx, etc.) and the operating system detected.</p>\n</li>\n<li>\n<p>Allow user to overwrite the above default auto-located file path and use their custom file path.</p>\n</li>\n<li>\n<p>Scan the directory for files and generate a cache / backup of the files.</p>\n</li>\n<li>\n<p>Generate SHA 256 hashes of each file and use them for comparison.</p>\n</li>\n</ol>\n<p>SecureTea Web Defacement Detection would detect file addition, deletion and modification and roll back to the original file immediately. It would not allow addition of any new files, deletion of files or any type of modification to the current existing files.</p>\n<h2>IoT Anonymity Checker</h2>\n<p>\u201cShodan is a search engine which collects the information about all IPv4 and IPv6 devices connected to the internet and gives us the ability to search devices using filters that can be very sophisticated.\u201d (source: <a href=\"https://resources.infosecinstitute.com/shodan-iot-problem/#gref\" rel=\"nofollow\">https://resources.infosecinstitute.com/shodan-iot-problem/#gref</a>)</p>\n<p>In short, Shodan is a search engine for IoT devices, that can index thousands of IoT devices connected to the internet. At times, this can be great for hackers trying to gain access to the device. As a security feature, it would be good to stay out of Shodan search radar. It will good to check whether the IoT device is under the Shodan grid or not, if\nyes, immediate action needs to be taken or else we are all fine!</p>\n<p><strong>Features:</strong></p>\n<ol>\n<li>Use public IP address of the device to check (if provided) else auto-collect the public IP address of the device and perform the check.</li>\n</ol>\n<h2>License</h2>\n<p><strong>MIT License</strong></p>\n<p>Copyright (c) 2019 OWASP SecureTea-Project Team - <a href=\"http://owasp.org\" rel=\"nofollow\">http://owasp.org</a></p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 5774439, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "c30cfcc866e16045e7538137de849eac", "sha256": "04f3c12ababb72d23f78f19756816cb467ff669717bea7395e54bc095cdf5b44"}, "downloads": -1, "filename": "securetea-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c30cfcc866e16045e7538137de849eac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 69627, "upload_time": "2019-05-30T12:39:44", "upload_time_iso_8601": "2019-05-30T12:39:44.704538Z", "url": "https://files.pythonhosted.org/packages/45/4a/acd87050e6c58b544c2cbaefa1c3361f70ca3953e724df1bb6e204ab0294/securetea-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "092ee19f15e92409c9f3ab88ab528c6b", "sha256": "3e031803db00ba1f75e85abca54061417991a1df85431c6733213b2f49eaab3f"}, "downloads": -1, "filename": "securetea-1.2.tar.gz", "has_sig": false, "md5_digest": "092ee19f15e92409c9f3ab88ab528c6b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 65248, "upload_time": "2019-05-30T12:39:47", "upload_time_iso_8601": "2019-05-30T12:39:47.586140Z", "url": "https://files.pythonhosted.org/packages/95/ea/0eeef1d896965575b1b229311d6b927faa13ee401e294841e68ede225df8/securetea-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "c7aa243a394c1a403b616deb7a4cfd37", "sha256": "abde788af0a4dba7394d4249ab0b8093700ab892b292f43fc9e59ae3bb02efcc"}, "downloads": -1, "filename": "securetea-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c7aa243a394c1a403b616deb7a4cfd37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 69627, "upload_time": "2019-05-31T12:17:38", "upload_time_iso_8601": "2019-05-31T12:17:38.866335Z", "url": "https://files.pythonhosted.org/packages/29/cf/08b843a45480e693725e17fb7570d8898eeea4342899c1385f03c48348f5/securetea-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c5b24176018955b4b82db54615a3c51", "sha256": "367c12f564c3df50838f6b6028dc460828eade29e121f0969b463a4818ef64b6"}, "downloads": -1, "filename": "securetea-1.3.tar.gz", "has_sig": false, "md5_digest": "5c5b24176018955b4b82db54615a3c51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 66219, "upload_time": "2019-05-31T12:17:41", "upload_time_iso_8601": "2019-05-31T12:17:41.080259Z", "url": "https://files.pythonhosted.org/packages/01/54/6e9393e209cf71bb07e1aebafdf776e1f5a6437f7115e53ce453770fcb49/securetea-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "303207275db8668318bfe5feb5a9158d", "sha256": "0afaaca28281c13761ee3d8a0f6c6fe7f0e8436cab6a1cba46f74a56db5fbf15"}, "downloads": -1, "filename": "securetea-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "303207275db8668318bfe5feb5a9158d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 112752, "upload_time": "2019-06-18T09:20:57", "upload_time_iso_8601": "2019-06-18T09:20:57.900812Z", "url": "https://files.pythonhosted.org/packages/83/ec/ee53a5d99c43979eb71bc1e733f9a105739d51e6395c04d810602f0f670e/securetea-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6cd040bf261267f9bb9d48d6989465ce", "sha256": "9e27598ef3afc450395712be5faf8cdd400c6dacb08eb35176dc56fac3e2eed5"}, "downloads": -1, "filename": "securetea-1.4.tar.gz", "has_sig": false, "md5_digest": "6cd040bf261267f9bb9d48d6989465ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 89569, "upload_time": "2019-06-18T09:20:59", "upload_time_iso_8601": "2019-06-18T09:20:59.611514Z", "url": "https://files.pythonhosted.org/packages/3e/64/d9089671d2f5c46276dc49d5144b762f2d92d45f3751a8ac77d7a1477abd/securetea-1.4.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "82da24f30c1639e99b5f969d913283bd", "sha256": "71e9a86312fe40261dbcdcf65a1247e862b4a29fbf24ae1f3eaad22e19e5c2dd"}, "downloads": -1, "filename": "securetea-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "82da24f30c1639e99b5f969d913283bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 170107, "upload_time": "2019-07-21T09:54:17", "upload_time_iso_8601": "2019-07-21T09:54:17.901496Z", "url": "https://files.pythonhosted.org/packages/c5/97/e919de964c8b7a1c5518104521523f4cef843f250a03dd75c6805643144c/securetea-1.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c19c8f0c296874d192d3ddd6d1e5e80f", "sha256": "604d75bacde61a4bd279133d1666e29903d40ff6ec001cdb0bb591d44e0ec25e"}, "downloads": -1, "filename": "securetea-1.5.1.tar.gz", "has_sig": false, "md5_digest": "c19c8f0c296874d192d3ddd6d1e5e80f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 132294, "upload_time": "2019-07-21T09:54:19", "upload_time_iso_8601": "2019-07-21T09:54:19.876153Z", "url": "https://files.pythonhosted.org/packages/26/41/d2d0c019a86107ae9c9971df5cd9ecd1b7b03329da5bfcca0d0088b46453/securetea-1.5.1.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "afbf0c2a6efecf29861a40808f6e84c9", "sha256": "7b28bd56f156542e84d372eb117ba8d74e8e8545a1b9f168371d4cefe581ce01"}, "downloads": -1, "filename": "securetea-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "afbf0c2a6efecf29861a40808f6e84c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 251329, "upload_time": "2019-09-03T07:47:05", "upload_time_iso_8601": "2019-09-03T07:47:05.590783Z", "url": "https://files.pythonhosted.org/packages/a0/85/7abc9ab07c39f6282ae8ee372f10cc7c9a01079a3e0754bd1c2c8f38b14e/securetea-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09b7259759314e17847ae310ef35555b", "sha256": "c07b18e60ba12f443bc9441cb960a63e7d7f03f259ecf53960ecb9266e3cb4fb"}, "downloads": -1, "filename": "securetea-2.1.tar.gz", "has_sig": false, "md5_digest": "09b7259759314e17847ae310ef35555b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 253442, "upload_time": "2019-09-03T07:47:08", "upload_time_iso_8601": "2019-09-03T07:47:08.365399Z", "url": "https://files.pythonhosted.org/packages/10/4d/7e198fcba46bfafae03aaa6907bb8664c65d98b8ce01899f07fa4eb68920/securetea-2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "afbf0c2a6efecf29861a40808f6e84c9", "sha256": "7b28bd56f156542e84d372eb117ba8d74e8e8545a1b9f168371d4cefe581ce01"}, "downloads": -1, "filename": "securetea-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "afbf0c2a6efecf29861a40808f6e84c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 251329, "upload_time": "2019-09-03T07:47:05", "upload_time_iso_8601": "2019-09-03T07:47:05.590783Z", "url": "https://files.pythonhosted.org/packages/a0/85/7abc9ab07c39f6282ae8ee372f10cc7c9a01079a3e0754bd1c2c8f38b14e/securetea-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09b7259759314e17847ae310ef35555b", "sha256": "c07b18e60ba12f443bc9441cb960a63e7d7f03f259ecf53960ecb9266e3cb4fb"}, "downloads": -1, "filename": "securetea-2.1.tar.gz", "has_sig": false, "md5_digest": "09b7259759314e17847ae310ef35555b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 253442, "upload_time": "2019-09-03T07:47:08", "upload_time_iso_8601": "2019-09-03T07:47:08.365399Z", "url": "https://files.pythonhosted.org/packages/10/4d/7e198fcba46bfafae03aaa6907bb8664c65d98b8ce01899f07fa4eb68920/securetea-2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:54 2020"}