{"info": {"author": "AZCaptcha by Joel H\u00f6ner (athre0z)", "author_email": "mail@azcaptcha.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<<<<<<< HEAD\n# AZCaptcha.com Python API\n\nThis library implements a simple to use wrapper around the AZCaptcha.com API.\n\n### Installation\nFrom PyPi\n```\npip install azcaptchaapi\n```\n\nFrom source\n```\ngit clone https://github.com/azcaptcha/azcaptchaapi.git\ncd azcaptchaapi\npython setup.py install\n```\n\n### Examples\n\n#### Initializing the API\n```python\nfrom azcaptchaapi import AZCaptchaApi\napi = AZCaptchaApi('<API KEY>')\n```\n\n#### Solving a captcha blocking\n```python\nwith open('/my/captcha/path.png', 'rb') as captcha_file:\n    captcha = api.solve(captcha_file)\n\nprint(captcha.await_result())\n```\nWaits until the captcha is either solved or an error occurred (indicated through an exception).\n\n#### Solve captcha \"non-blocking\"\n```python\ncaptcha = api.solve(captcha_file)\nprint(captcha.try_get_result())\n```\nIf already available, prints the captcha text, else `None`. Please note that while this code doesn't repeatedly ask the API if the captcha was solved, the HTTP request is still sent synchronously, so this method isn't *really* non-blocking.\n\n#### Reporting a bad captcha\n```python\nresult = captcha.await_result()\nif use_captcha_code(result) == 'failed':\n    captcha.report_bad()\n```\n\n#### Query account balance\n```python\nprint(api.get_balance())\n```\n\n### Compatibilty\nThis library was successfully tested on Python 2.7 and 3.5. Python versions < 2.7 are *not* officially supported.\n\n### License\nThis code is released under MIT license. Dependencies are under their respective licenses.\n\n*This project is _not_ affiliated with, maintained, authorized, endorsed or sponsored by AZCaptcha.com or any of its affiliates.*\n=======\n# azcaptchaapi\npython api upload image captcha to azcaptcha.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/azcaptcha/azcaptchaapi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "azcaptchaapi", "package_url": "https://pypi.org/project/azcaptchaapi/", "platform": "", "project_url": "https://pypi.org/project/azcaptchaapi/", "project_urls": {"Homepage": "https://github.com/azcaptcha/azcaptchaapi"}, "release_url": "https://pypi.org/project/azcaptchaapi/0.3.1/", "requires_dist": null, "requires_python": "", "summary": "Python API implementation for AZCaptcha.com", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h1>AZCaptcha.com Python API</h1>\n<p>This library implements a simple to use wrapper around the AZCaptcha.com API.</p>\n<h3>Installation</h3>\n<p>From PyPi</p>\n<pre><code>pip install azcaptchaapi\n</code></pre>\n<p>From source</p>\n<pre><code>git clone https://github.com/azcaptcha/azcaptchaapi.git\ncd azcaptchaapi\npython setup.py install\n</code></pre>\n<h3>Examples</h3>\n<h4>Initializing the API</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">azcaptchaapi</span> <span class=\"kn\">import</span> <span class=\"n\">AZCaptchaApi</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">AZCaptchaApi</span><span class=\"p\">(</span><span class=\"s1\">'&lt;API KEY&gt;'</span><span class=\"p\">)</span>\n</pre>\n<h4>Solving a captcha blocking</h4>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/my/captcha/path.png'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">captcha_file</span><span class=\"p\">:</span>\n    <span class=\"n\">captcha</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">captcha_file</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">captcha</span><span class=\"o\">.</span><span class=\"n\">await_result</span><span class=\"p\">())</span>\n</pre>\n<p>Waits until the captcha is either solved or an error occurred (indicated through an exception).</p>\n<h4>Solve captcha \"non-blocking\"</h4>\n<pre><span class=\"n\">captcha</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">captcha_file</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">captcha</span><span class=\"o\">.</span><span class=\"n\">try_get_result</span><span class=\"p\">())</span>\n</pre>\n<p>If already available, prints the captcha text, else <code>None</code>. Please note that while this code doesn't repeatedly ask the API if the captcha was solved, the HTTP request is still sent synchronously, so this method isn't <em>really</em> non-blocking.</p>\n<h4>Reporting a bad captcha</h4>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">captcha</span><span class=\"o\">.</span><span class=\"n\">await_result</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">use_captcha_code</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'failed'</span><span class=\"p\">:</span>\n    <span class=\"n\">captcha</span><span class=\"o\">.</span><span class=\"n\">report_bad</span><span class=\"p\">()</span>\n</pre>\n<h4>Query account balance</h4>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_balance</span><span class=\"p\">())</span>\n</pre>\n<h3>Compatibilty</h3>\n<p>This library was successfully tested on Python 2.7 and 3.5. Python versions &lt; 2.7 are <em>not</em> officially supported.</p>\n<h3>License</h3>\n<p>This code is released under MIT license. Dependencies are under their respective licenses.</p>\n<h1><em>This project is <em>not</em> affiliated with, maintained, authorized, endorsed or sponsored by AZCaptcha.com or any of its affiliates.</em></h1>\n<h1>azcaptchaapi</h1>\n<p>python api upload image captcha to azcaptcha.com</p>\n\n          </div>"}, "last_serial": 6987489, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "8cd45406345637c82e05f268038607d4", "sha256": "18f33540b27a357b08fa4b49e80f6ebb2c72a14d975c17b548a041a99eb2233c"}, "downloads": -1, "filename": "azcaptchaapi-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8cd45406345637c82e05f268038607d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5259, "upload_time": "2020-04-09T16:07:34", "upload_time_iso_8601": "2020-04-09T16:07:34.062262Z", "url": "https://files.pythonhosted.org/packages/b1/e5/b5fd7b759adbd2082306f3c7020798815fcf075e4ce102e6a561847a8f37/azcaptchaapi-0.3.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cd45406345637c82e05f268038607d4", "sha256": "18f33540b27a357b08fa4b49e80f6ebb2c72a14d975c17b548a041a99eb2233c"}, "downloads": -1, "filename": "azcaptchaapi-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8cd45406345637c82e05f268038607d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5259, "upload_time": "2020-04-09T16:07:34", "upload_time_iso_8601": "2020-04-09T16:07:34.062262Z", "url": "https://files.pythonhosted.org/packages/b1/e5/b5fd7b759adbd2082306f3c7020798815fcf075e4ce102e6a561847a8f37/azcaptchaapi-0.3.1-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:15:28 2020"}