{"info": {"author": "James Murty", "author_email": "james@murty.co", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Text Processing :: Markup :: XML"], "description": "===============================\nxml4h: XML for Humans in Python\n===============================\n\n*xml4h* is an MIT licensed library for Python to make it easier to work with XML.\n\nThis library exists because Python is awesome, XML is everywhere, and combining\nthe two should be a pleasure but often is not. With *xml4h*, it can be easy.\n\nAs of version 1.0 *xml4h* supports Python versions 2.7 and 3.5+.\n\n\nFeatures\n--------\n\n*xml4h* is a simplification layer over existing Python XML processing libraries\nsuch as *lxml*, *ElementTree* and the *minidom*. It provides:\n\n- a rich pythonic API to traverse and manipulate the XML DOM.\n- a document builder to simply and safely construct complex documents with\n  minimal code.\n- a writer that serialises XML documents with the structure and format that you\n  expect, unlike the machine- but not human-friendly output you tend to get\n  from other libraries.\n\nThe *xml4h* abstraction layer also offers some other benefits, beyond a nice\nAPI and tool set:\n\n- A common interface to different underlying XML libraries, so code written\n  against *xml4h* need not be rewritten if you switch implementations.\n- You can easily move between *xml4h* and the underlying implementation: parse\n  your document using the fastest implementation, manipulate the DOM with\n  human-friendly code using *xml4h*, then get back to the underlying\n  implementation if you need to.\n\n\nInstallation\n------------\n\nInstall *xml4h* with pip::\n\n    $ pip install xml4h\n\nOr install the tarball manually with::\n\n    $ python setup.py install\n\n\nLinks\n-----\n\n- GitHub for source code and issues: https://github.com/jmurty/xml4h\n- ReadTheDocs for documentation: https://xml4h.readthedocs.org\n- Install from the Python Package Index: https://pypi.python.org/pypi/xml4h\n\n\nIntroduction\n------------\n\nWith *xml4h* you can easily parse XML files and access their data.\n\nLet's start with an example XML document::\n\n    $ cat tests/data/monty_python_films.xml\n    <MontyPythonFilms source=\"http://en.wikipedia.org/wiki/Monty_Python\">\n        <Film year=\"1971\">\n            <Title>And Now for Something Completely Different</Title>\n            <Description>\n                A collection of sketches from the first and second TV series of\n                Monty Python's Flying Circus purposely re-enacted and shot for film.\n            </Description>\n        </Film>\n        <Film year=\"1974\">\n            <Title>Monty Python and the Holy Grail</Title>\n            <Description>\n                King Arthur and his knights embark on a low-budget search for\n                the Holy Grail, encountering humorous obstacles along the way.\n                Some of these turned into standalone sketches.\n            </Description>\n        </Film>\n        <Film year=\"1979\">\n            <Title>Monty Python's Life of Brian</Title>\n            <Description>\n                Brian is born on the first Christmas, in the stable next to\n                Jesus'. He spends his life being mistaken for a messiah.\n            </Description>\n        </Film>\n        <... more Film elements here ...>\n    </MontyPythonFilms>\n\nWith *xml4h* you can parse the XML file and use \"magical\" element and attribute\nlookups to read data::\n\n    >>> import xml4h\n    >>> doc = xml4h.parse('tests/data/monty_python_films.xml')\n\n    >>> for film in doc.MontyPythonFilms.Film[:3]:\n    ...     print(film['year'] + ' : ' + film.Title.text)\n    1971 : And Now for Something Completely Different\n    1974 : Monty Python and the Holy Grail\n    1979 : Monty Python's Life of Brian\n\nYou can also use more explicit (non-magical) methods to traverse the DOM::\n\n    >>> for film in doc.child('MontyPythonFilms').children('Film')[:3]:\n    ...     print(film.attributes['year'] + ' : ' + film.children.first.text)\n    1971 : And Now for Something Completely Different\n    1974 : Monty Python and the Holy Grail\n    1979 : Monty Python's Life of Brian\n\nThe *xml4h* builder makes programmatic document creation simple, with a\nmethod-chaining feature that allows for expressive but sparse code that mirrors\nthe document itself. Here is the code to build part of the above XML document::\n\n    >>> b = (xml4h.build('MontyPythonFilms')\n    ...     .attributes({'source': 'http://en.wikipedia.org/wiki/Monty_Python'})\n    ...     .element('Film')\n    ...         .attributes({'year': 1971})\n    ...         .element('Title')\n    ...             .text('And Now for Something Completely Different')\n    ...             .up()\n    ...         .elem('Description').t(\n    ...             \"A collection of sketches from the first and second TV\"\n    ...             \" series of Monty Python's Flying Circus purposely\"\n    ...             \" re-enacted and shot for film.\"\n    ...             ).up()\n    ...         .up()\n    ...     )\n\n    >>> # A builder object can be re-used, and has short method aliases\n    >>> b = (b.e('Film')\n    ...     .attrs(year=1974)\n    ...     .e('Title').t('Monty Python and the Holy Grail').up()\n    ...     .e('Description').t(\n    ...         \"King Arthur and his knights embark on a low-budget search\"\n    ...         \" for the Holy Grail, encountering humorous obstacles along\"\n    ...         \" the way. Some of these turned into standalone sketches.\"\n    ...         ).up()\n    ...     .up()\n    ... )\n\nPretty-print your XML document with *xml4h*'s writer implementation with\nmethods to write content to a stream or get the content as text with flexible\nformatting options::\n\n    >>> print(b.xml_doc(indent=4, newline=True)) # doctest: +ELLIPSIS\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <MontyPythonFilms source=\"http://en.wikipedia.org/wiki/Monty_Python\">\n        <Film year=\"1971\">\n            <Title>And Now for Something Completely Different</Title>\n            <Description>A collection of sketches from ...</Description>\n        </Film>\n        <Film year=\"1974\">\n            <Title>Monty Python and the Holy Grail</Title>\n            <Description>King Arthur and his knights embark ...</Description>\n        </Film>\n    </MontyPythonFilms>\n    <BLANKLINE>\n\n\nWhy use *xml4h*?\n----------------\n\nPython has three popular libraries for working with XML, none of which are\nparticularly easy to use:\n\n- `xml.dom.minidom <https://docs.python.org/3/library/xml.dom.minidom.html>`_\n  is a light-weight, moderately-featured implementation of the W3C DOM\n  that is included in the standard library. Unfortunately the W3C DOM API is\n  verbose, clumsy, and not very pythonic, and the *minidom* does not support\n  XPath expressions.\n- `xml.etree.ElementTree <http://docs.python.org/3/library/xml.etree.elementtree.html>`_\n  is a fast hierarchical data container that is included in the standard\n  library and can be used to represent XML, mostly. The API is fairly pythonic\n  and supports some basic XPath features, but it lacks some DOM traversal\n  niceties you might expect (e.g. to get an element's parent) and when using it\n  you often feel like your working with something subtly different from XML,\n  because you are.\n- `lxml <http://lxml.de/>`_ is a fast, full-featured XML library with an API\n  based on ElementTree but extended. It is your best choice for doing serious\n  work with XML in Python but it is not included in the standard library, it\n  can be difficult to install, and it gives you the same it's-XML-but-not-quite\n  feeling as its ElementTree forebear.\n\nGiven these three options it can be difficult to choose which library to use,\nespecially if you're new to XML processing in Python and haven't already\nused (struggled with) any of them.\n\nIn the past your best bet would have been to go with *lxml* for the most\nflexibility, even though it might be overkill, because at least then you\nwouldn't have to rewrite your code if you later find you need XPath support or\npowerful DOM traversal methods.\n\nThis is where *xml4h* comes in. It provides an abstraction layer over\nthe existing XML libraries, taking advantage of their power while offering an\nimproved API and tool set.\n\n\nDevelopment Status: beta\n------------------------\n\nCurrently *xml4h* includes adapter implementations for three of the main XML\nprocessing Python libraries.\n\nIf you have *lxml* available (highly recommended) it will use that, otherwise\nit will fall back to use the *(c)ElementTree* then the *minidom* libraries.\n\n\n\nHistory\n-------\n\n1.0\n...\n\n- Add support for Python 3 (3.5+)\n- Dropped support for Python versions before 2.7.\n- Fix node namespace prefix values for lxml adapter.\n- Improve builder's ``up()`` method to accept and distinguish between a count\n  of parents to step up, or the name of a target ancestor node.\n- Add ``xml()`` and ``xml_doc()`` methods to document builder to more easily\n  get string content from it, without resorting to the write methods.\n- The ``write()`` and ``write_doc()`` methods no longer send output to\n  ``sys.stdout`` by default. The user must explicitly provide a target writer\n  object, and hopefully be more mindful of the need to set up encoding correctly\n  when providing a text stream object.\n- Handling of redundant Element namespace prefixes is now more consistent: we\n  always strip the prefix when the element has an `xmlns` attribute defining\n  the same namespace URI.\n\n0.2.0\n.....\n\n- Add adapter for the *(c)ElementTree* library versions included as standard\n  with Python 2.7+.\n- Improved \"magical\" node traversal to work with lowercase tag names without\n  always needing a trailing underscore. See also improved docs.\n- Fixes for: potential errors ASCII-encoding nodes as strings; default XPath\n  namespace from document node; lookup precedence of xmlns attributes.\n\n\n0.1.0\n.....\n\n- Initial alpha release with support for *lxml* and *minidom* libraries.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jmurty/xml4h", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "xml4h", "package_url": "https://pypi.org/project/xml4h/", "platform": "", "project_url": "https://pypi.org/project/xml4h/", "project_urls": {"Homepage": "https://github.com/jmurty/xml4h"}, "release_url": "https://pypi.org/project/xml4h/1.0/", "requires_dist": ["six"], "requires_python": "", "summary": "XML for Humans in Python", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>xml4h</em> is an MIT licensed library for Python to make it easier to work with XML.</p>\n<p>This library exists because Python is awesome, XML is everywhere, and combining\nthe two should be a pleasure but often is not. With <em>xml4h</em>, it can be easy.</p>\n<p>As of version 1.0 <em>xml4h</em> supports Python versions 2.7 and 3.5+.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p><em>xml4h</em> is a simplification layer over existing Python XML processing libraries\nsuch as <em>lxml</em>, <em>ElementTree</em> and the <em>minidom</em>. It provides:</p>\n<ul>\n<li>a rich pythonic API to traverse and manipulate the XML DOM.</li>\n<li>a document builder to simply and safely construct complex documents with\nminimal code.</li>\n<li>a writer that serialises XML documents with the structure and format that you\nexpect, unlike the machine- but not human-friendly output you tend to get\nfrom other libraries.</li>\n</ul>\n<p>The <em>xml4h</em> abstraction layer also offers some other benefits, beyond a nice\nAPI and tool set:</p>\n<ul>\n<li>A common interface to different underlying XML libraries, so code written\nagainst <em>xml4h</em> need not be rewritten if you switch implementations.</li>\n<li>You can easily move between <em>xml4h</em> and the underlying implementation: parse\nyour document using the fastest implementation, manipulate the DOM with\nhuman-friendly code using <em>xml4h</em>, then get back to the underlying\nimplementation if you need to.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install <em>xml4h</em> with pip:</p>\n<pre>$ pip install xml4h\n</pre>\n<p>Or install the tarball manually with:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>GitHub for source code and issues: <a href=\"https://github.com/jmurty/xml4h\" rel=\"nofollow\">https://github.com/jmurty/xml4h</a></li>\n<li>ReadTheDocs for documentation: <a href=\"https://xml4h.readthedocs.org\" rel=\"nofollow\">https://xml4h.readthedocs.org</a></li>\n<li>Install from the Python Package Index: <a href=\"https://pypi.python.org/pypi/xml4h\" rel=\"nofollow\">https://pypi.python.org/pypi/xml4h</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>With <em>xml4h</em> you can easily parse XML files and access their data.</p>\n<p>Let\u2019s start with an example XML document:</p>\n<pre>$ cat tests/data/monty_python_films.xml\n&lt;MontyPythonFilms source=\"http://en.wikipedia.org/wiki/Monty_Python\"&gt;\n    &lt;Film year=\"1971\"&gt;\n        &lt;Title&gt;And Now for Something Completely Different&lt;/Title&gt;\n        &lt;Description&gt;\n            A collection of sketches from the first and second TV series of\n            Monty Python's Flying Circus purposely re-enacted and shot for film.\n        &lt;/Description&gt;\n    &lt;/Film&gt;\n    &lt;Film year=\"1974\"&gt;\n        &lt;Title&gt;Monty Python and the Holy Grail&lt;/Title&gt;\n        &lt;Description&gt;\n            King Arthur and his knights embark on a low-budget search for\n            the Holy Grail, encountering humorous obstacles along the way.\n            Some of these turned into standalone sketches.\n        &lt;/Description&gt;\n    &lt;/Film&gt;\n    &lt;Film year=\"1979\"&gt;\n        &lt;Title&gt;Monty Python's Life of Brian&lt;/Title&gt;\n        &lt;Description&gt;\n            Brian is born on the first Christmas, in the stable next to\n            Jesus'. He spends his life being mistaken for a messiah.\n        &lt;/Description&gt;\n    &lt;/Film&gt;\n    &lt;... more Film elements here ...&gt;\n&lt;/MontyPythonFilms&gt;\n</pre>\n<p>With <em>xml4h</em> you can parse the XML file and use \u201cmagical\u201d element and attribute\nlookups to read data:</p>\n<pre>&gt;&gt;&gt; import xml4h\n&gt;&gt;&gt; doc = xml4h.parse('tests/data/monty_python_films.xml')\n\n&gt;&gt;&gt; for film in doc.MontyPythonFilms.Film[:3]:\n...     print(film['year'] + ' : ' + film.Title.text)\n1971 : And Now for Something Completely Different\n1974 : Monty Python and the Holy Grail\n1979 : Monty Python's Life of Brian\n</pre>\n<p>You can also use more explicit (non-magical) methods to traverse the DOM:</p>\n<pre>&gt;&gt;&gt; for film in doc.child('MontyPythonFilms').children('Film')[:3]:\n...     print(film.attributes['year'] + ' : ' + film.children.first.text)\n1971 : And Now for Something Completely Different\n1974 : Monty Python and the Holy Grail\n1979 : Monty Python's Life of Brian\n</pre>\n<p>The <em>xml4h</em> builder makes programmatic document creation simple, with a\nmethod-chaining feature that allows for expressive but sparse code that mirrors\nthe document itself. Here is the code to build part of the above XML document:</p>\n<pre>&gt;&gt;&gt; b = (xml4h.build('MontyPythonFilms')\n...     .attributes({'source': 'http://en.wikipedia.org/wiki/Monty_Python'})\n...     .element('Film')\n...         .attributes({'year': 1971})\n...         .element('Title')\n...             .text('And Now for Something Completely Different')\n...             .up()\n...         .elem('Description').t(\n...             \"A collection of sketches from the first and second TV\"\n...             \" series of Monty Python's Flying Circus purposely\"\n...             \" re-enacted and shot for film.\"\n...             ).up()\n...         .up()\n...     )\n\n&gt;&gt;&gt; # A builder object can be re-used, and has short method aliases\n&gt;&gt;&gt; b = (b.e('Film')\n...     .attrs(year=1974)\n...     .e('Title').t('Monty Python and the Holy Grail').up()\n...     .e('Description').t(\n...         \"King Arthur and his knights embark on a low-budget search\"\n...         \" for the Holy Grail, encountering humorous obstacles along\"\n...         \" the way. Some of these turned into standalone sketches.\"\n...         ).up()\n...     .up()\n... )\n</pre>\n<p>Pretty-print your XML document with <em>xml4h</em>\u2019s writer implementation with\nmethods to write content to a stream or get the content as text with flexible\nformatting options:</p>\n<pre>&gt;&gt;&gt; print(b.xml_doc(indent=4, newline=True)) # doctest: +ELLIPSIS\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;MontyPythonFilms source=\"http://en.wikipedia.org/wiki/Monty_Python\"&gt;\n    &lt;Film year=\"1971\"&gt;\n        &lt;Title&gt;And Now for Something Completely Different&lt;/Title&gt;\n        &lt;Description&gt;A collection of sketches from ...&lt;/Description&gt;\n    &lt;/Film&gt;\n    &lt;Film year=\"1974\"&gt;\n        &lt;Title&gt;Monty Python and the Holy Grail&lt;/Title&gt;\n        &lt;Description&gt;King Arthur and his knights embark ...&lt;/Description&gt;\n    &lt;/Film&gt;\n&lt;/MontyPythonFilms&gt;\n&lt;BLANKLINE&gt;\n</pre>\n</div>\n<div id=\"why-use-xml4h\">\n<h2>Why use <em>xml4h</em>?</h2>\n<p>Python has three popular libraries for working with XML, none of which are\nparticularly easy to use:</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/xml.dom.minidom.html\" rel=\"nofollow\">xml.dom.minidom</a>\nis a light-weight, moderately-featured implementation of the W3C DOM\nthat is included in the standard library. Unfortunately the W3C DOM API is\nverbose, clumsy, and not very pythonic, and the <em>minidom</em> does not support\nXPath expressions.</li>\n<li><a href=\"http://docs.python.org/3/library/xml.etree.elementtree.html\" rel=\"nofollow\">xml.etree.ElementTree</a>\nis a fast hierarchical data container that is included in the standard\nlibrary and can be used to represent XML, mostly. The API is fairly pythonic\nand supports some basic XPath features, but it lacks some DOM traversal\nniceties you might expect (e.g. to get an element\u2019s parent) and when using it\nyou often feel like your working with something subtly different from XML,\nbecause you are.</li>\n<li><a href=\"http://lxml.de/\" rel=\"nofollow\">lxml</a> is a fast, full-featured XML library with an API\nbased on ElementTree but extended. It is your best choice for doing serious\nwork with XML in Python but it is not included in the standard library, it\ncan be difficult to install, and it gives you the same it\u2019s-XML-but-not-quite\nfeeling as its ElementTree forebear.</li>\n</ul>\n<p>Given these three options it can be difficult to choose which library to use,\nespecially if you\u2019re new to XML processing in Python and haven\u2019t already\nused (struggled with) any of them.</p>\n<p>In the past your best bet would have been to go with <em>lxml</em> for the most\nflexibility, even though it might be overkill, because at least then you\nwouldn\u2019t have to rewrite your code if you later find you need XPath support or\npowerful DOM traversal methods.</p>\n<p>This is where <em>xml4h</em> comes in. It provides an abstraction layer over\nthe existing XML libraries, taking advantage of their power while offering an\nimproved API and tool set.</p>\n</div>\n<div id=\"development-status-beta\">\n<h2>Development Status: beta</h2>\n<p>Currently <em>xml4h</em> includes adapter implementations for three of the main XML\nprocessing Python libraries.</p>\n<p>If you have <em>lxml</em> available (highly recommended) it will use that, otherwise\nit will fall back to use the <em>(c)ElementTree</em> then the <em>minidom</em> libraries.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.0</h3>\n<ul>\n<li>Add support for Python 3 (3.5+)</li>\n<li>Dropped support for Python versions before 2.7.</li>\n<li>Fix node namespace prefix values for lxml adapter.</li>\n<li>Improve builder\u2019s <tt>up()</tt> method to accept and distinguish between a count\nof parents to step up, or the name of a target ancestor node.</li>\n<li>Add <tt>xml()</tt> and <tt>xml_doc()</tt> methods to document builder to more easily\nget string content from it, without resorting to the write methods.</li>\n<li>The <tt>write()</tt> and <tt>write_doc()</tt> methods no longer send output to\n<tt>sys.stdout</tt> by default. The user must explicitly provide a target writer\nobject, and hopefully be more mindful of the need to set up encoding correctly\nwhen providing a text stream object.</li>\n<li>Handling of redundant Element namespace prefixes is now more consistent: we\nalways strip the prefix when the element has an <cite>xmlns</cite> attribute defining\nthe same namespace URI.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.0</h3>\n<ul>\n<li>Add adapter for the <em>(c)ElementTree</em> library versions included as standard\nwith Python 2.7+.</li>\n<li>Improved \u201cmagical\u201d node traversal to work with lowercase tag names without\nalways needing a trailing underscore. See also improved docs.</li>\n<li>Fixes for: potential errors ASCII-encoding nodes as strings; default XPath\nnamespace from document node; lookup precedence of xmlns attributes.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0</h3>\n<ul>\n<li>Initial alpha release with support for <em>lxml</em> and <em>minidom</em> libraries.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6776606, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cd85f5f2e5e5379f33055a64840d51a0", "sha256": "f34d1c448fa0670352bcb3ff2126f8d2216fb6d1c8b916d34e9dcbb1ef66e371"}, "downloads": -1, "filename": "xml4h-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cd85f5f2e5e5379f33055a64840d51a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57938, "upload_time": "2012-11-08T12:53:05", "upload_time_iso_8601": "2012-11-08T12:53:05.927190Z", "url": "https://files.pythonhosted.org/packages/4c/01/2251d74f9552bf98b79f8cfc9e6e98940fc716091eb58ff20f4523cc07e0/xml4h-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5571978a59dcbadfb478f6d8f22b4ca7", "sha256": "1de7d57f0fee36381193f99b1afe61cb04e896b25c9f992c737bccfe90578be3"}, "downloads": -1, "filename": "xml4h-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5571978a59dcbadfb478f6d8f22b4ca7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64310, "upload_time": "2013-06-05T22:25:31", "upload_time_iso_8601": "2013-06-05T22:25:31.042194Z", "url": "https://files.pythonhosted.org/packages/fa/6d/93f97f218fdae68b8890a62aafc8e6e5e44a4d69bd87430217e0d1b229b9/xml4h-0.2.0.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "00bf4a776f6c53fb6c806d93ad0c2ffb", "sha256": "011a46106b8d8fd0378bf8acb48ddd1c8f1a36de31aa7ce902dfc6897abaaa5b"}, "downloads": -1, "filename": "xml4h-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "00bf4a776f6c53fb6c806d93ad0c2ffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37753, "upload_time": "2020-03-09T12:11:03", "upload_time_iso_8601": "2020-03-09T12:11:03.602619Z", "url": "https://files.pythonhosted.org/packages/81/00/c8eae5f8bf96f1ec8d67ecaa02d0dbacaad8303859273c22ac1a15f34a91/xml4h-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0236b9f732afd9383f10951def63da17", "sha256": "a5e7dc18e288e6bf0b73925b5e3aa751a1508ba63a3be57f116843ecc459a691"}, "downloads": -1, "filename": "xml4h-1.0.tar.gz", "has_sig": false, "md5_digest": "0236b9f732afd9383f10951def63da17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66903, "upload_time": "2020-03-09T12:11:05", "upload_time_iso_8601": "2020-03-09T12:11:05.207331Z", "url": "https://files.pythonhosted.org/packages/9a/cb/8f79ed1119290f72d3b1c9d920e898f5c93a2d0ef6c7109f8eafafe241a9/xml4h-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00bf4a776f6c53fb6c806d93ad0c2ffb", "sha256": "011a46106b8d8fd0378bf8acb48ddd1c8f1a36de31aa7ce902dfc6897abaaa5b"}, "downloads": -1, "filename": "xml4h-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "00bf4a776f6c53fb6c806d93ad0c2ffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37753, "upload_time": "2020-03-09T12:11:03", "upload_time_iso_8601": "2020-03-09T12:11:03.602619Z", "url": "https://files.pythonhosted.org/packages/81/00/c8eae5f8bf96f1ec8d67ecaa02d0dbacaad8303859273c22ac1a15f34a91/xml4h-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0236b9f732afd9383f10951def63da17", "sha256": "a5e7dc18e288e6bf0b73925b5e3aa751a1508ba63a3be57f116843ecc459a691"}, "downloads": -1, "filename": "xml4h-1.0.tar.gz", "has_sig": false, "md5_digest": "0236b9f732afd9383f10951def63da17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66903, "upload_time": "2020-03-09T12:11:05", "upload_time_iso_8601": "2020-03-09T12:11:05.207331Z", "url": "https://files.pythonhosted.org/packages/9a/cb/8f79ed1119290f72d3b1c9d920e898f5c93a2d0ef6c7109f8eafafe241a9/xml4h-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:07 2020"}