{"info": {"author": "Colin Panisset", "author_email": "github@clabber.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Home Automation"], "description": "PyRAVEn\n=======\n\n|travis-badge| |pypi-badge|\n\n.. |travis-badge| image:: https://img.shields.io/travis/nonspecialist/pyraven.svg\n   :target: https://travis-ci.org/nonspecialist/pyraven\n   :alt: Travis build badge for pyraven\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/pyraven.svg\n   :target: https://pipy.python.org/pypi/pyraven\n   :alt: PyPI version badge\n\nSome code to talk to the Rainforest Automation \"Radio Adapter for Viewing\nEnergy\" (RAVEn).\n\nInstallation\n------------\n\nThe easiest way would be ``pip install pyraven``\n\nYou could also install direct from this repository:\n\n#. Clone this repo\n#. In the top-level directory (where this ``README.rst`` is) run\n   ``pip install --upgrade .``\n\nSetup\n-----\n\nPrerequisites\n~~~~~~~~~~~~~\n\nYou should have already bound (paired) your USB stick to your smart meter.\n\nBinding/pairing your smart meter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUnlike many other devices, the RAVEn doesn't require a specific \"bind\nto the meter\" command to be issued to it. Instead, your energy\nwholesaler or retailer will have to configure your smart meter to bind\nwith the RAVEn stick. Once the meter has been told to bind to the\ndevice, there will usually be a 10-minute window during which you\nsimply have to have the USB stick plugged in and close enough to the\nmeter. The LED will stop flashing, and will turn on solidly once the\nstick is bound.\n\nDifferent retailers and wholesalers will have different methods of\nsetting up a binding. Some I know of are:\n\n* Powercor/Citipower (Melbourne):\n    * They have a \"My Energy\" portal that you can sign up for at\n      https://customermeterdata.portal.powercor.com.au/customermeterdata/\n      (correct as of Jan 2017). Once you've signed up, there's a\n      pulldown from your name that allows you to \"Manage my HAN\n      devices\", wherein you can bind your RAVEn to the meter.\n* Jemena (Melbourne):\n    * Use their portal at https://electricityoutlook.jemena.com.au/ to\n      bind your USB device\n* AusNet Services:\n    * Use the portal at https://connect.ausnetservices.com.au/webui/\n      to bind your device\n* United Energy:\n    * they have a *startlingly similar* portal to Jemena, located at\n      https://energyeasy.ue.com.au/ that you can use to set up a\n      binding\n\nUsage\n-----\n\nThere's a simple CLI, used to assist in the development of the library\nitself. Once your USB stick is set up and bound to your meter, you\ncan use the CLI to monitor the current instantaneous demand reported\nby your meter:\n\n.. code:: shell\n\n    localhost$ raven\n    {'status': 'Connected', 'shortaddr': '0xd131', 'link_strength': 100, 'extpanid': 1234567890123456L, 'is_connected': True, 'channel': 11, 'description': 'Successfully Joined'}\n    {'divisor': 1000, 'summation_delivered': 2220.575, 'raw_summation_received': 0, 'timstamp': '2018-03-27T02:45:45Z', 'raw_summation_delivered': 2220575, 'multiplier': 1, 'summation_received': 0.0}\n    {'divisor': 1000, 'summation_delivered': 2220.575, 'raw_summation_received': 0, 'timstamp': '2018-03-27T02:45:45Z', 'raw_summation_delivered': 2220575, 'multiplier': 1, 'summation_received': 0.0}\n    {'timestamp': '2018-03-27T02:47:56Z', 'raw_demand': 142, 'multiplier': 1, 'divisor': 1000, 'demand': 0.142}\n    ...\n\nand so on.\n\nInstantaneous readings show the current demand, and the summation\nincludes power delivered to the grid (eg from a PV array).\n\nThe frequency of different types of data delivery are set\nby the schedule in the USB stick. By default, they are:\n\n- Instantaneous demand: 8 seconds\n- Summation: 240 seconds\n- Profile data: disabled\n- Scheduled prices: 90 seconds\n- Price: 90 seconds\n- Messages: 120 seconds\n- Time: 900 seconds (reports the current time known to the meter)\n\nHowever, the meter I have has no pricing data (this seems to be common\nin Australia, because wholesalers and retailers are different\nentities, and the retailer applies the pricing based on their own\npeculiar calculations from the raw consumption data) and so the price\nelements are never emitted.\n\nSimilarly, if there are no messages to be consumed, the RAVEn will not\nemit a message element.\n\nIn practice, this means that you'll usually only get the instantaneous\ndemand and summation outputs.\n\nDocumentation\n-------------\n\nThe XML protocol specification can be `downloaded from\nRainforest Automation <http://www.rainforestautomation.com/sites/default/files/download/rfa-z106/raven_xml_api_r127.pdf>`__\n\nOther works\n-----------\n\nThere are other open-source projects which cover some of the same\nground. My intents in re-inventing this wheel were to provide a more\ncomplete and standardised Python implementation that could be used as a\nlibrary by others, instead of the fairly implementation-specific versions\nalready out there.\n\n* `Entropy <https://github.com/phubbard/entropy>`__\n    * Python\n    * streams data to plot.ly\n* `python-raven <https://github.com/frankp/python-raven>`__\n    * Python\n    * publishes data to a Mosquitto server (MQTT)\n* `node-raven <https://github.com/stormboy/node-raven>`__\n    * NodeJS\n    * publishes to an MQTT server", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nonspecialist/pyraven", "keywords": "usb energy raven smart meter", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyraven", "package_url": "https://pypi.org/project/pyraven/", "platform": "", "project_url": "https://pypi.org/project/pyraven/", "project_urls": {"Homepage": "https://github.com/nonspecialist/pyraven"}, "release_url": "https://pypi.org/project/pyraven/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "Interface with the Rainforest Automation RAVEn USB stick", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/nonspecialist/pyraven\" rel=\"nofollow\"><img alt=\"Travis build badge for pyraven\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41ec706b78ccfacf49eec938230b263651e0720b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6e6f6e7370656369616c6973742f7079726176656e2e737667\"></a> <a href=\"https://pipy.python.org/pypi/pyraven\" rel=\"nofollow\"><img alt=\"PyPI version badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc66504c2ef65b3fb15a7994e0e3a5b26ba899be/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079726176656e2e737667\"></a></p>\n<p>Some code to talk to the Rainforest Automation \u201cRadio Adapter for Viewing\nEnergy\u201d (RAVEn).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way would be <tt>pip install pyraven</tt></p>\n<p>You could also install direct from this repository:</p>\n<ol>\n<li>Clone this repo</li>\n<li>In the top-level directory (where this <tt>README.rst</tt> is) run\n<tt>pip install <span class=\"pre\">--upgrade</span> .</tt></li>\n</ol>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<p>You should have already bound (paired) your USB stick to your smart meter.</p>\n</div>\n<div id=\"binding-pairing-your-smart-meter\">\n<h3>Binding/pairing your smart meter</h3>\n<p>Unlike many other devices, the RAVEn doesn\u2019t require a specific \u201cbind\nto the meter\u201d command to be issued to it. Instead, your energy\nwholesaler or retailer will have to configure your smart meter to bind\nwith the RAVEn stick. Once the meter has been told to bind to the\ndevice, there will usually be a 10-minute window during which you\nsimply have to have the USB stick plugged in and close enough to the\nmeter. The LED will stop flashing, and will turn on solidly once the\nstick is bound.</p>\n<p>Different retailers and wholesalers will have different methods of\nsetting up a binding. Some I know of are:</p>\n<ul>\n<li><dl>\n<dt>Powercor/Citipower (Melbourne):</dt>\n<dd><ul>\n<li>They have a \u201cMy Energy\u201d portal that you can sign up for at\n<a href=\"https://customermeterdata.portal.powercor.com.au/customermeterdata/\" rel=\"nofollow\">https://customermeterdata.portal.powercor.com.au/customermeterdata/</a>\n(correct as of Jan 2017). Once you\u2019ve signed up, there\u2019s a\npulldown from your name that allows you to \u201cManage my HAN\ndevices\u201d, wherein you can bind your RAVEn to the meter.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Jemena (Melbourne):</dt>\n<dd><ul>\n<li>Use their portal at <a href=\"https://electricityoutlook.jemena.com.au/\" rel=\"nofollow\">https://electricityoutlook.jemena.com.au/</a> to\nbind your USB device</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>AusNet Services:</dt>\n<dd><ul>\n<li>Use the portal at <a href=\"https://connect.ausnetservices.com.au/webui/\" rel=\"nofollow\">https://connect.ausnetservices.com.au/webui/</a>\nto bind your device</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>United Energy:</dt>\n<dd><ul>\n<li>they have a <em>startlingly similar</em> portal to Jemena, located at\n<a href=\"https://energyeasy.ue.com.au/\" rel=\"nofollow\">https://energyeasy.ue.com.au/</a> that you can use to set up a\nbinding</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There\u2019s a simple CLI, used to assist in the development of the library\nitself. Once your USB stick is set up and bound to your meter, you\ncan use the CLI to monitor the current instantaneous demand reported\nby your meter:</p>\n<pre>localhost$ raven\n<span class=\"o\">{</span><span class=\"s1\">'status'</span>: <span class=\"s1\">'Connected'</span>, <span class=\"s1\">'shortaddr'</span>: <span class=\"s1\">'0xd131'</span>, <span class=\"s1\">'link_strength'</span>: <span class=\"m\">100</span>, <span class=\"s1\">'extpanid'</span>: 1234567890123456L, <span class=\"s1\">'is_connected'</span>: True, <span class=\"s1\">'channel'</span>: <span class=\"m\">11</span>, <span class=\"s1\">'description'</span>: <span class=\"s1\">'Successfully Joined'</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"s1\">'divisor'</span>: <span class=\"m\">1000</span>, <span class=\"s1\">'summation_delivered'</span>: <span class=\"m\">2220</span>.575, <span class=\"s1\">'raw_summation_received'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'timstamp'</span>: <span class=\"s1\">'2018-03-27T02:45:45Z'</span>, <span class=\"s1\">'raw_summation_delivered'</span>: <span class=\"m\">2220575</span>, <span class=\"s1\">'multiplier'</span>: <span class=\"m\">1</span>, <span class=\"s1\">'summation_received'</span>: <span class=\"m\">0</span>.0<span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"s1\">'divisor'</span>: <span class=\"m\">1000</span>, <span class=\"s1\">'summation_delivered'</span>: <span class=\"m\">2220</span>.575, <span class=\"s1\">'raw_summation_received'</span>: <span class=\"m\">0</span>, <span class=\"s1\">'timstamp'</span>: <span class=\"s1\">'2018-03-27T02:45:45Z'</span>, <span class=\"s1\">'raw_summation_delivered'</span>: <span class=\"m\">2220575</span>, <span class=\"s1\">'multiplier'</span>: <span class=\"m\">1</span>, <span class=\"s1\">'summation_received'</span>: <span class=\"m\">0</span>.0<span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"s1\">'timestamp'</span>: <span class=\"s1\">'2018-03-27T02:47:56Z'</span>, <span class=\"s1\">'raw_demand'</span>: <span class=\"m\">142</span>, <span class=\"s1\">'multiplier'</span>: <span class=\"m\">1</span>, <span class=\"s1\">'divisor'</span>: <span class=\"m\">1000</span>, <span class=\"s1\">'demand'</span>: <span class=\"m\">0</span>.142<span class=\"o\">}</span>\n...\n</pre>\n<p>and so on.</p>\n<p>Instantaneous readings show the current demand, and the summation\nincludes power delivered to the grid (eg from a PV array).</p>\n<p>The frequency of different types of data delivery are set\nby the schedule in the USB stick. By default, they are:</p>\n<ul>\n<li>Instantaneous demand: 8 seconds</li>\n<li>Summation: 240 seconds</li>\n<li>Profile data: disabled</li>\n<li>Scheduled prices: 90 seconds</li>\n<li>Price: 90 seconds</li>\n<li>Messages: 120 seconds</li>\n<li>Time: 900 seconds (reports the current time known to the meter)</li>\n</ul>\n<p>However, the meter I have has no pricing data (this seems to be common\nin Australia, because wholesalers and retailers are different\nentities, and the retailer applies the pricing based on their own\npeculiar calculations from the raw consumption data) and so the price\nelements are never emitted.</p>\n<p>Similarly, if there are no messages to be consumed, the RAVEn will not\nemit a message element.</p>\n<p>In practice, this means that you\u2019ll usually only get the instantaneous\ndemand and summation outputs.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The XML protocol specification can be <a href=\"http://www.rainforestautomation.com/sites/default/files/download/rfa-z106/raven_xml_api_r127.pdf\" rel=\"nofollow\">downloaded from\nRainforest Automation</a></p>\n</div>\n<div id=\"other-works\">\n<h2>Other works</h2>\n<p>There are other open-source projects which cover some of the same\nground. My intents in re-inventing this wheel were to provide a more\ncomplete and standardised Python implementation that could be used as a\nlibrary by others, instead of the fairly implementation-specific versions\nalready out there.</p>\n<ul>\n<li><dl>\n<dt><a href=\"https://github.com/phubbard/entropy\" rel=\"nofollow\">Entropy</a></dt>\n<dd><ul>\n<li>Python</li>\n<li>streams data to plot.ly</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><a href=\"https://github.com/frankp/python-raven\" rel=\"nofollow\">python-raven</a></dt>\n<dd><ul>\n<li>Python</li>\n<li>publishes data to a Mosquitto server (MQTT)</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><a href=\"https://github.com/stormboy/node-raven\" rel=\"nofollow\">node-raven</a></dt>\n<dd><ul>\n<li>NodeJS</li>\n<li>publishes to an MQTT server</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5944188, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "6cb134e84f4ca7798bf3db8451fe9939", "sha256": "db5fa399cac40f70e0ed8e11acebfdf54834c614014397de765f910a96a24aaa"}, "downloads": -1, "filename": "pyraven-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6cb134e84f4ca7798bf3db8451fe9939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7910, "upload_time": "2018-03-27T02:29:18", "upload_time_iso_8601": "2018-03-27T02:29:18.901268Z", "url": "https://files.pythonhosted.org/packages/c9/70/cd256e12ac1140183e304865544b2472c435d894dce9ce3d8e73568256f2/pyraven-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "23cdec78ab0f4b4d8fb15f3ec48098dd", "sha256": "e9d030d1f5c406dc24ce9bc712c9f4a971527cb74489f1aad788a3d8091a3e3d"}, "downloads": -1, "filename": "pyraven-0.1.4.tar.gz", "has_sig": false, "md5_digest": "23cdec78ab0f4b4d8fb15f3ec48098dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8411, "upload_time": "2018-03-27T03:12:56", "upload_time_iso_8601": "2018-03-27T03:12:56.065278Z", "url": "https://files.pythonhosted.org/packages/9e/a5/109a9fff88c0d28fba469caed215f1c781063ab8b486138ccaac88a90416/pyraven-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0073cf2ff2faaebe6a1e190db2611d43", "sha256": "597599648d7a0eb322c24af603286cbb7f5854f552c8e7fee8509cc4a182e9a7"}, "downloads": -1, "filename": "pyraven-0.1.5.tar.gz", "has_sig": false, "md5_digest": "0073cf2ff2faaebe6a1e190db2611d43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8457, "upload_time": "2018-03-27T04:57:15", "upload_time_iso_8601": "2018-03-27T04:57:15.587358Z", "url": "https://files.pythonhosted.org/packages/c9/51/25d1ae23835da23ac2677268a39013eb13f8be8be297f4033ab44de418e5/pyraven-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "8b72503dc7341f5ce42d1c8db018421f", "sha256": "a2d5f4414770ae209d79feb98a55c485a390f290fb6178185d38a8ca6e326ddd"}, "downloads": -1, "filename": "pyraven-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8b72503dc7341f5ce42d1c8db018421f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8544, "upload_time": "2019-10-08T10:38:08", "upload_time_iso_8601": "2019-10-08T10:38:08.450004Z", "url": "https://files.pythonhosted.org/packages/9f/2b/aa4da6827ac20b2caf045efa36c45bf6d073b96e55ae36fa74ad321b1631/pyraven-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b72503dc7341f5ce42d1c8db018421f", "sha256": "a2d5f4414770ae209d79feb98a55c485a390f290fb6178185d38a8ca6e326ddd"}, "downloads": -1, "filename": "pyraven-0.1.6.tar.gz", "has_sig": false, "md5_digest": "8b72503dc7341f5ce42d1c8db018421f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8544, "upload_time": "2019-10-08T10:38:08", "upload_time_iso_8601": "2019-10-08T10:38:08.450004Z", "url": "https://files.pythonhosted.org/packages/9f/2b/aa4da6827ac20b2caf045efa36c45bf6d073b96e55ae36fa74ad321b1631/pyraven-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:05 2020"}