{"info": {"author": "Tim Lauv", "author_email": "bluekvirus@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "django-express\n==============\n\n|PyPI-v| |PyPI-pyv| |PypI-djangov|\n\nEasy Restful APIs with the Django web framework.\n\nInstall\n-------\n\nDownload through ``pip`` (virtualenv -p python3 .venv)\n\n::\n\n    pip install django-express\n\nAdd it to your ``INSTALLED_APPS`` in ``settings.py``\n\n::\n\n    INSTALLED_APPS = [\n      # ...\n      'django.contrib.staticfiles',\n      'express',\n    ]\n\nSetup\n-----\n\nMount the auto-discovered services to any entry point (url) you want in\n``urlpatterns``\n\n::\n\n    # proj/proj/urls.py\n\n    from django.conf.urls import url, include\n    from express import services\n\n    urlpatterns = [\n        url(r'^api/v1/', include(services.urls)) # mount everything\n        url(r'^app-name/api/v1/', include(services.url('app-name', ...))) # mount only those from specific app(s)\n    ]\n\nPlease **double check** if your ``url()`` call here has the path\nargument **ending with a trailing slash** (e.g ``foo/bar/``). This is\nrequired by the Django framework. You do not need to have this in your\n``@url()`` decorator paths though.\n\nStart serving apis\n------------------\n\nYou can just start Django like normal, your apis will be automatically\ndiscovered and mounted.\n\n::\n\n    ./manage.py runserver 0.0.0.0:8000\n\nNote that for other developers to use your apis, you need to bind on\nwildcard or public WAN/LAN accessable IP address specifically after\n``runserver`` instead of leaving the param out to use the default\n``127.0.0.1`` localhost IP. If you are developing inside a VM (e.g\nthrough our *Vagrant* web dev vm) it is very important that you specify\nthe VM's IP or the wildcard IP after ``runserver`` so that you can use\nyour host machine's browser for accessing the apis through vm to host\nforwarded ports.\n\nAlso, use ``runserver`` with ``DEBUG=true`` in ``settings.py`` will\nautomatically serve all the ``static/`` sub-folders (and those added by\n``STATICFILES_DIRS``) from your apps. They are served like they were\nmerged under the same uri set by ``STATIC_URL`` in your ``settings.py``,\nso if you do not want files from different apps to override each other,\nput all your static assets (e.g \\*.js/html/css/png) in a sub-folder with\nthe same name as your app inside each ``static/``. Though ``STATIC_URL``\ndoesn't have a default value, after running\n``django-admin startproject`` your ``settings.py`` will set a default\nvalue ``/static/`` to it so you could access files from the ``static/``\nsub-folders under ``http://domain:8000/static/<file path>`` with zero\nsetup time.\n\nIf you are not using the ``runserver`` command for serving static assets\nand service apis during development, make sure you call\n``./manage.py collectstatics`` and serve folder ``STATIC_ROOT`` on\n``STATIC_URL``, so that ``{% load static %}`` then\n``{% static \"images/hi.jpg\" %}`` can work properly in your templates.\n\nAdding RESTful services\n-----------------------\n\nCreate apps in your Django project **normally**, this is to sub-divide\nyour services by app name for better maintainability. Optional though.\n\n::\n\n    ./manage.py startapp app_example\n    ./manage.py startapp another_app_with_services\n\nFunction as service api\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd a ``services.py`` file in each app folder containing the service\nfunctions ``fn(req, res, *args, **kwargs)`` decorated with ``@service``\n\n::\n\n    # proj/app_example/services.py\n    from express.decorators import service, methods, url\n\n\n    # /api/v1/absolute/url\n    # /api/v1/app_example/relative/abcd\n\n    @methods('GET', 'POST')\n    @url('/absolute/url')\n    @url('relative/abcd')\n    @service\n    def abc(req, res, *args, **kwargs):\n        res.json({'json': req.json, 'link:': reverse('express:testa.abc')})\n\n\n    # /api/v1/app_example/efg\n\n    @service\n    def efg(req, res, *args, **kwargs):\n        res.json({\n            'params': dict(req.params.lists()), # use {**req.params} in python 3.5+\n            'form': dict(req.form.lists()), # use {**req.form} in python 3.5+\n            'json': req.json, \n            'mime': req['CONTENT_TYPE'],\n            })\n\n\n    # /api/v1/app_example/hij\n\n    @service\n    def hij(req, res, *args, **kwargs):\n        res.file('db.sqlite3')\n\n\n    # /api/v1/app_example/x\n\n    @service\n    def x(req, res, *args, **kwargs):\n        #res.text('Nothing but a test from {}'.format(__name__))\n        res.text('<p>Agent: {}</p>'.format(req['HTTP_USER_AGENT']))\n        res.html('<p>IP: {}</p>'.format(req['REMOTE_ADDR']))\n        res.text('<p>Method: {}</p>'.format(req['REQUEST_METHOD']))\n\n\n    # /api/v1/app_example/relative/url/y-service/articles/2017/01/\n\n    @url('relative/url/y-service/articles/([0-9]{4})/([0-9]{2})/')\n    @service\n    def y1(req, res, y, m, *args, **kwargs):\n        res.json({\n            'data': 'Nothing but a test from {}.{}'.format(__name__, 'y1 - positional capture'),\n            'text': 123,\n            'year': y,\n            'month': m,\n        })\n        res.header('Hello~', 'World!') # header\n        res.status(201) # status\n\n\n    # /api/v1/app_example/z\n\n    @service\n    def z(req, res, *args, **kwargs):\n        res.download('db.sqlite3')\n\nAs you can see, you can still use regex captures in ``@url('..path..')``\nif prefered. The captured group/named group will be passed normally to\nyour service function as positional args and keyword args. However,\n**You can NOT use both positioned and namged group captures in the same\nurl!! Due to django implementation.**\n\nImportant Note\n^^^^^^^^^^^^^^\n\nPut ``@service`` as the inner-most decorator, other decorators don't\nhave this hard requirement on ordering here. You can still use all the\ndecorators from the Django web framework like ``@permission_required``\nor ``@login_required`` but make sure they are all above ``@service``.\n\nArgument APIs\n^^^^^^^^^^^^^\n\nThe most important arguments to your service function would be the first\ntwo, namely ``req`` for request and ``res`` for response. Here are the\navailable methods on these two objects.\n\nreq (ExpressRequest)\n''''''''''''''''''''\n\n-  req.params['key']\n-  req.json\n-  req.form\n-  req.files['name']\n-  req.cookies['name']\n-  req['HTTP-HEADER']/req.header('key')\n\nres (ExpressResponse)\n'''''''''''''''''''''\n\n-  res.redirect('url')\n-  res.render(req, 'template', context={})\n-  res.html('str')/text('str')\n-  res.json(dict)\n-  res.file('path')\n-  res.attach('path')/download('path')\n-  res.status(int)\n-  res['HTTP\\_HEADER']/res.header('key', val)\n\n**Caveat:** ``res.status()`` and ``res['HTTP_HEADER']/res.header()``\nmust be called after\n``.render()/html()/text()/json()/file()/attach()/download()`` in your\nservice function for new headers and status to be applied to the\nresponse.\n\nModel generated service apis\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWithin the ``models.py`` file, you can decorate any of your Model class\ndirectly for it to generate the apis around its CRUD database\noperations.\n\n::\n\n    # proj/app_example/models.py\n\n    @url('/absolute/db/device')\n    @url('db/device')\n    @serve_unprotected\n    class Device(models.Model):\n        \"\"\"docstring for Device\"\"\"\n        sn = models.CharField(max_length=32)\n\nThis will mount 5 default service functions bound to different HTTP\nmethods (POST/GET/PUT,PATCH/DELETE/HEAD) to url\n``app_example/models/Device`` for its CRUD database operations and one\nmore metadata operations.\n\nDecorators\n----------\n\nFor a function\n~~~~~~~~~~~~~~\n\n@service\n^^^^^^^^\n\nTurn your ``fn(req, res, *args, **kwargs)`` function into a Restful\nservice routine. Automatically detected if present in ``services.py`` in\nany **installed** app.\n\n-  Default path with ``services.urls``: ``/<app>/<fn>``\n-  Default path with ``services.url(app, noprefix=True)``: ``/<fn>``\n\nYou can change the mounting path by using the ``@url()`` decorator. You\ncan also use ``django.urls.reverse()`` to get the mount point by name\n``<namespace>:<app>.services.<fn>`` **if you mount the\n``services.url(s)`` with namespaced ``include()`` calls in\n``urls.py``**.\n\nStill, **do not forget** to mount everthing collected inside\n``services.urls`` to a root url in the django ``urls.py``. See the\n**Setup** section above.\n\n@methods(m1, m2, ...)\n^^^^^^^^^^^^^^^^^^^^^\n\nAllowed HTTP request methods to the service. You can also use ``@safe``\nto allow only ``GET`` and ``HEAD`` requests. You can use different\n``@methods()`` on each service function with the same ``@url()`` path to\nreuse the same url.\n\n@url(path)\n^^^^^^^^^^\n\nOverride basic service auto-path (``/<app>/<fn>``). No need to use\n``r'..path..'`` here, what you put in ``path`` will be treated as raw\nstring automatically. Feel free to put regex group captures. **Just\ndon't mix named and annonymous capture groups in the url path, they\nwon't work together in django.**\n\nYou can use multiple ``@url()`` on the same service function.\n\n@csrf\n^^^^^\n\nSetting CSRF token cookie on ``GET/HEAD`` requests to the service.\nChecks and rejects ``POST/PUT/PATCH/DELETE`` requests according to their\ncsrf token + cookie pairs.\n\nIf you want an Ajax request to be guarded by django CSRF\n(django.middleware.csrf.CsrfViewMiddleware) you need to ``GET/HEAD`` the\n``@csrf`` decorated service first to have your CSRF cookie (named\n``csrftoken``) set, then ``POST/PUT/PATCH/DELETE`` to it with real\nrequests including either ``X-CSRFToken`` in header or\n``csrfmiddlewaretoken`` in a hidden form ``<input>`` field. The header\nor hidden field value should match the value given by the cookie.\n\nYou can change the cookie and header names but **NOT** the hidden field\nname in the django ``settings.py``.\n\nFor a Model\n~~~~~~~~~~~\n\n@serve\n^^^^^^\n\nGive a Model default RESTful apis to its CRUD operations.\n\n-  Default path with ``services.urls``: ``/<app>/<Model>``\n-  Default path wiht ``services.url(app, noprefix=True)``: ``/<Model>``\n\nYou can change the mounting path by using the ``@url()`` decorator. You\ncan also use ``django.urls.reverse()`` to get the mount point by name\n``<namespace>:<app>.models.<fn>``.\n\n-  POST -- create -- {\"payload\": {...data...}}\n-  GET -- read -- ?pk= for single record, omit for all\n-  PUT/PATCH -- update -- {\"payload\": {\"id\": \"...\", ...data...}}\n-  DELETE -- delete -- ?pk= for target record, required\n-  HEAD -- meta -- model name ``X-Django-App-Model`` and table count\n   ``X-DB-Table-Count`` in reply headers\n\nWhen using **GET** http request on a ``@serve``\\ (-ed) model, you can\nalso specify params for filtering (by columns and Django ORM filter\noperations), sorting (by columns) and paging the returned result.\n\n::\n\n    ?filter=foo1:op_and_val1&filter=foo2:op_and_val2\n    ?sort=foo, -bar\n\n    ?size=number\n    ?offset=number\n    ?page=number\n\nWhen using **Any** http requests on a ``@serve``\\ (-ed) model, you can\nalways use ``?db=...`` to switch onto the specific database for served\nmodel apis to query and modify. The database names come from your\n``DATABASES`` configure in ``settings.py``.\n\nStill, **do not forget** to mount everthing collected inside\n``services.urls`` to a root url in the django ``urls.py``. See the\n**Setup** section above.\n\n@serve\\_unprotected\n^^^^^^^^^^^^^^^^^^^\n\nSame as @serve but without csrf protection.\n\n@methods(m1, m2, ...)\n^^^^^^^^^^^^^^^^^^^^^\n\nSame as @methods for a service function.\n\n@url(path)\n^^^^^^^^^^\n\nSame as @url for a service function.\n\nDatabase Backends\n-----------------\n\nbackends.mongodb\n~~~~~~~~~~~~~~~~\n\nThis is a dummy backend engine to use with MongoDB connections without\nthe involvement of Django ORM. The purpose is to have your MongoDB\nsettings in the ``settings.py`` and use\n``django.db.connections['<your mongodb name>']`` to start using MongoDB\nin your Django apps.\n\n::\n\n    # settings.py\n\n    DATABASES = {\n        ...,\n        'mongo': {\n            'ENGINE': 'express.db.backends.mongodb',\n            'HOST': 'mongo.server.com',\n            'PORT': 27017,\n            'NAME': 'testdb',\n            'USER': '...',\n            'PASSWORD': '...',\n            'OPTIONS': {\n                ...pymongo.MongoClient options...\n            }\n        },\n        ...\n    }\n\nNow you will have,\n\n-  django.db.connections['testdb'].db - a ``pymongo`` db object;\n-  django.db.connections['testdb'].collection('collection'=None) - a\n   ``pymongo`` collection or all available collection names;\n-  django.db.connections['testdb'].cursor('collection', \\*\\*kwargs) - a\n   .find(kwargs) ``pymongo`` cursor;\n\nAfter getting the above, you will have, \\*\ndjango.db.connections['testdb'].connection - a ``pymongo`` client;\n\nUse ``.cursor()`` for search (``GET``) apis and ``.collection()`` for\nmodify (``POST/PUT/PATCH/DELETE``) apis.\n\nLimitation\n^^^^^^^^^^\n\nThis engine works up to the point of creating the db connection and\ncollection cursor, taking in DATABASES options from your settings.py;\nThe ORM layer (migration, schema, transactions, save/delete()) will not\nwork on database that has settings using this Engine.\n\nLicence\n-------\n\nCopyright 2017 Tim Lauv. Under the\n`MIT <http://opensource.org/licenses/MIT>`__ License.\n\n.. |PyPI-v| image:: https://img.shields.io/pypi/v/django-express.svg\n   :target: https://pypi.python.org/pypi/django-express\n.. |PyPI-pyv| image:: https://img.shields.io/pypi/pyversions/django-express.svg\n   :target: https://pypi.python.org/pypi/django-express\n.. |PypI-djangov| image:: https://img.shields.io/badge/Django-1.8%2C%201.9%2C%201.10-44B78B.svg\n   :target: https://www.djangoproject.com/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bluekvirus/django-express", "keywords": "django,restful api,express,services", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-express", "package_url": "https://pypi.org/project/django-express/", "platform": "", "project_url": "https://pypi.org/project/django-express/", "project_urls": {"Homepage": "https://github.com/bluekvirus/django-express"}, "release_url": "https://pypi.org/project/django-express/0.4.0/", "requires_dist": ["Django (>=1.11)", "pymongo (>=3.4); extra == 'pymongo'"], "requires_python": "", "summary": "Easy Restful APIs with the Django web framework.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/django-express\" rel=\"nofollow\"><img alt=\"PyPI-v\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b8774dde9b90825d46ff60a50a3b9ca86011644/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d657870726573732e737667\"></a> <a href=\"https://pypi.python.org/pypi/django-express\" rel=\"nofollow\"><img alt=\"PyPI-pyv\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbd601daca2ea67c052ab5de7f4e6cc713c4bd72/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d657870726573732e737667\"></a> <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\"><img alt=\"PypI-djangov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1eda767d9bab34e3865bf1cafaf6deda1fa31d93/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446a616e676f2d312e38253243253230312e39253243253230312e31302d3434423738422e737667\"></a></p>\n<p>Easy Restful APIs with the Django web framework.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Download through <tt>pip</tt> (virtualenv -p python3 .venv)</p>\n<pre>pip install django-express\n</pre>\n<p>Add it to your <tt>INSTALLED_APPS</tt> in <tt>settings.py</tt></p>\n<pre>INSTALLED_APPS = [\n  # ...\n  'django.contrib.staticfiles',\n  'express',\n]\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Mount the auto-discovered services to any entry point (url) you want in\n<tt>urlpatterns</tt></p>\n<pre># proj/proj/urls.py\n\nfrom django.conf.urls import url, include\nfrom express import services\n\nurlpatterns = [\n    url(r'^api/v1/', include(services.urls)) # mount everything\n    url(r'^app-name/api/v1/', include(services.url('app-name', ...))) # mount only those from specific app(s)\n]\n</pre>\n<p>Please <strong>double check</strong> if your <tt>url()</tt> call here has the path\nargument <strong>ending with a trailing slash</strong> (e.g <tt>foo/bar/</tt>). This is\nrequired by the Django framework. You do not need to have this in your\n<tt>@url()</tt> decorator paths though.</p>\n</div>\n<div id=\"start-serving-apis\">\n<h2>Start serving apis</h2>\n<p>You can just start Django like normal, your apis will be automatically\ndiscovered and mounted.</p>\n<pre>./manage.py runserver 0.0.0.0:8000\n</pre>\n<p>Note that for other developers to use your apis, you need to bind on\nwildcard or public WAN/LAN accessable IP address specifically after\n<tt>runserver</tt> instead of leaving the param out to use the default\n<tt>127.0.0.1</tt> localhost IP. If you are developing inside a VM (e.g\nthrough our <em>Vagrant</em> web dev vm) it is very important that you specify\nthe VM\u2019s IP or the wildcard IP after <tt>runserver</tt> so that you can use\nyour host machine\u2019s browser for accessing the apis through vm to host\nforwarded ports.</p>\n<p>Also, use <tt>runserver</tt> with <tt>DEBUG=true</tt> in <tt>settings.py</tt> will\nautomatically serve all the <tt>static/</tt> sub-folders (and those added by\n<tt>STATICFILES_DIRS</tt>) from your apps. They are served like they were\nmerged under the same uri set by <tt>STATIC_URL</tt> in your <tt>settings.py</tt>,\nso if you do not want files from different apps to override each other,\nput all your static assets (e.g *.js/html/css/png) in a sub-folder with\nthe same name as your app inside each <tt>static/</tt>. Though <tt>STATIC_URL</tt>\ndoesn\u2019t have a default value, after running\n<tt><span class=\"pre\">django-admin</span> startproject</tt> your <tt>settings.py</tt> will set a default\nvalue <tt>/static/</tt> to it so you could access files from the <tt>static/</tt>\nsub-folders under <tt><span class=\"pre\">http://domain:8000/static/&lt;file</span> path&gt;</tt> with zero\nsetup time.</p>\n<p>If you are not using the <tt>runserver</tt> command for serving static assets\nand service apis during development, make sure you call\n<tt>./manage.py collectstatics</tt> and serve folder <tt>STATIC_ROOT</tt> on\n<tt>STATIC_URL</tt>, so that <tt>{% load static %}</tt> then\n<tt>{% static \"images/hi.jpg\" %}</tt> can work properly in your templates.</p>\n</div>\n<div id=\"adding-restful-services\">\n<h2>Adding RESTful services</h2>\n<p>Create apps in your Django project <strong>normally</strong>, this is to sub-divide\nyour services by app name for better maintainability. Optional though.</p>\n<pre>./manage.py startapp app_example\n./manage.py startapp another_app_with_services\n</pre>\n<div id=\"function-as-service-api\">\n<h3>Function as service api</h3>\n<p>Add a <tt>services.py</tt> file in each app folder containing the service\nfunctions <tt>fn(req, res, *args, **kwargs)</tt> decorated with <tt>@service</tt></p>\n<pre># proj/app_example/services.py\nfrom express.decorators import service, methods, url\n\n\n# /api/v1/absolute/url\n# /api/v1/app_example/relative/abcd\n\n@methods('GET', 'POST')\n@url('/absolute/url')\n@url('relative/abcd')\n@service\ndef abc(req, res, *args, **kwargs):\n    res.json({'json': req.json, 'link:': reverse('express:testa.abc')})\n\n\n# /api/v1/app_example/efg\n\n@service\ndef efg(req, res, *args, **kwargs):\n    res.json({\n        'params': dict(req.params.lists()), # use {**req.params} in python 3.5+\n        'form': dict(req.form.lists()), # use {**req.form} in python 3.5+\n        'json': req.json,\n        'mime': req['CONTENT_TYPE'],\n        })\n\n\n# /api/v1/app_example/hij\n\n@service\ndef hij(req, res, *args, **kwargs):\n    res.file('db.sqlite3')\n\n\n# /api/v1/app_example/x\n\n@service\ndef x(req, res, *args, **kwargs):\n    #res.text('Nothing but a test from {}'.format(__name__))\n    res.text('&lt;p&gt;Agent: {}&lt;/p&gt;'.format(req['HTTP_USER_AGENT']))\n    res.html('&lt;p&gt;IP: {}&lt;/p&gt;'.format(req['REMOTE_ADDR']))\n    res.text('&lt;p&gt;Method: {}&lt;/p&gt;'.format(req['REQUEST_METHOD']))\n\n\n# /api/v1/app_example/relative/url/y-service/articles/2017/01/\n\n@url('relative/url/y-service/articles/([0-9]{4})/([0-9]{2})/')\n@service\ndef y1(req, res, y, m, *args, **kwargs):\n    res.json({\n        'data': 'Nothing but a test from {}.{}'.format(__name__, 'y1 - positional capture'),\n        'text': 123,\n        'year': y,\n        'month': m,\n    })\n    res.header('Hello~', 'World!') # header\n    res.status(201) # status\n\n\n# /api/v1/app_example/z\n\n@service\ndef z(req, res, *args, **kwargs):\n    res.download('db.sqlite3')\n</pre>\n<p>As you can see, you can still use regex captures in <tt><span class=\"pre\">@url('..path..')</span></tt>\nif prefered. The captured group/named group will be passed normally to\nyour service function as positional args and keyword args. However,\n<strong>You can NOT use both positioned and namged group captures in the same\nurl!! Due to django implementation.</strong></p>\n<div id=\"important-note\">\n<h4>Important Note</h4>\n<p>Put <tt>@service</tt> as the inner-most decorator, other decorators don\u2019t\nhave this hard requirement on ordering here. You can still use all the\ndecorators from the Django web framework like <tt>@permission_required</tt>\nor <tt>@login_required</tt> but make sure they are all above <tt>@service</tt>.</p>\n</div>\n<div id=\"argument-apis\">\n<h4>Argument APIs</h4>\n<p>The most important arguments to your service function would be the first\ntwo, namely <tt>req</tt> for request and <tt>res</tt> for response. Here are the\navailable methods on these two objects.</p>\n<div id=\"req-expressrequest\">\n<h5>req (ExpressRequest)</h5>\n<ul>\n<li>req.params[\u2018key\u2019]</li>\n<li>req.json</li>\n<li>req.form</li>\n<li>req.files[\u2018name\u2019]</li>\n<li>req.cookies[\u2018name\u2019]</li>\n<li>req[\u2018HTTP-HEADER\u2019]/req.header(\u2018key\u2019)</li>\n</ul>\n</div>\n<div id=\"res-expressresponse\">\n<h5>res (ExpressResponse)</h5>\n<ul>\n<li>res.redirect(\u2018url\u2019)</li>\n<li>res.render(req, \u2018template\u2019, context={})</li>\n<li>res.html(\u2018str\u2019)/text(\u2018str\u2019)</li>\n<li>res.json(dict)</li>\n<li>res.file(\u2018path\u2019)</li>\n<li>res.attach(\u2018path\u2019)/download(\u2018path\u2019)</li>\n<li>res.status(int)</li>\n<li>res[\u2018HTTP_HEADER\u2019]/res.header(\u2018key\u2019, val)</li>\n</ul>\n<p><strong>Caveat:</strong> <tt>res.status()</tt> and <tt><span class=\"pre\">res['HTTP_HEADER']/res.header()</span></tt>\nmust be called after\n<tt><span class=\"pre\">.render()/html()/text()/json()/file()/attach()/download()</span></tt> in your\nservice function for new headers and status to be applied to the\nresponse.</p>\n</div>\n</div>\n</div>\n<div id=\"model-generated-service-apis\">\n<h3>Model generated service apis</h3>\n<p>Within the <tt>models.py</tt> file, you can decorate any of your Model class\ndirectly for it to generate the apis around its CRUD database\noperations.</p>\n<pre># proj/app_example/models.py\n\n@url('/absolute/db/device')\n@url('db/device')\n@serve_unprotected\nclass Device(models.Model):\n    \"\"\"docstring for Device\"\"\"\n    sn = models.CharField(max_length=32)\n</pre>\n<p>This will mount 5 default service functions bound to different HTTP\nmethods (POST/GET/PUT,PATCH/DELETE/HEAD) to url\n<tt>app_example/models/Device</tt> for its CRUD database operations and one\nmore metadata operations.</p>\n</div>\n</div>\n<div id=\"decorators\">\n<h2>Decorators</h2>\n<div id=\"for-a-function\">\n<h3>For a function</h3>\n<div id=\"service\">\n<h4>@service</h4>\n<p>Turn your <tt>fn(req, res, *args, **kwargs)</tt> function into a Restful\nservice routine. Automatically detected if present in <tt>services.py</tt> in\nany <strong>installed</strong> app.</p>\n<ul>\n<li>Default path with <tt>services.urls</tt>: <tt><span class=\"pre\">/&lt;app&gt;/&lt;fn&gt;</span></tt></li>\n<li>Default path with <tt>services.url(app, noprefix=True)</tt>: <tt>/&lt;fn&gt;</tt></li>\n</ul>\n<p>You can change the mounting path by using the <tt>@url()</tt> decorator. You\ncan also use <tt>django.urls.reverse()</tt> to get the mount point by name\n<tt><span class=\"pre\">&lt;namespace&gt;:&lt;app&gt;.services.&lt;fn&gt;</span></tt> <strong>if you mount the\n``services.url(s)`` with namespaced ``include()`` calls in\n``urls.py``</strong>.</p>\n<p>Still, <strong>do not forget</strong> to mount everthing collected inside\n<tt>services.urls</tt> to a root url in the django <tt>urls.py</tt>. See the\n<strong>Setup</strong> section above.</p>\n</div>\n<div id=\"methods-m1-m2\">\n<h4>@methods(m1, m2, \u2026)</h4>\n<p>Allowed HTTP request methods to the service. You can also use <tt>@safe</tt>\nto allow only <tt>GET</tt> and <tt>HEAD</tt> requests. You can use different\n<tt>@methods()</tt> on each service function with the same <tt>@url()</tt> path to\nreuse the same url.</p>\n</div>\n<div id=\"url-path\">\n<h4>@url(path)</h4>\n<p>Override basic service auto-path (<tt><span class=\"pre\">/&lt;app&gt;/&lt;fn&gt;</span></tt>). No need to use\n<tt><span class=\"pre\">r'..path..'</span></tt> here, what you put in <tt>path</tt> will be treated as raw\nstring automatically. Feel free to put regex group captures. <strong>Just\ndon\u2019t mix named and annonymous capture groups in the url path, they\nwon\u2019t work together in django.</strong></p>\n<p>You can use multiple <tt>@url()</tt> on the same service function.</p>\n</div>\n<div id=\"csrf\">\n<h4>@csrf</h4>\n<p>Setting CSRF token cookie on <tt>GET/HEAD</tt> requests to the service.\nChecks and rejects <tt>POST/PUT/PATCH/DELETE</tt> requests according to their\ncsrf token + cookie pairs.</p>\n<p>If you want an Ajax request to be guarded by django CSRF\n(django.middleware.csrf.CsrfViewMiddleware) you need to <tt>GET/HEAD</tt> the\n<tt>@csrf</tt> decorated service first to have your CSRF cookie (named\n<tt>csrftoken</tt>) set, then <tt>POST/PUT/PATCH/DELETE</tt> to it with real\nrequests including either <tt><span class=\"pre\">X-CSRFToken</span></tt> in header or\n<tt>csrfmiddlewaretoken</tt> in a hidden form <tt>&lt;input&gt;</tt> field. The header\nor hidden field value should match the value given by the cookie.</p>\n<p>You can change the cookie and header names but <strong>NOT</strong> the hidden field\nname in the django <tt>settings.py</tt>.</p>\n</div>\n</div>\n<div id=\"for-a-model\">\n<h3>For a Model</h3>\n<div id=\"serve\">\n<h4>@serve</h4>\n<p>Give a Model default RESTful apis to its CRUD operations.</p>\n<ul>\n<li>Default path with <tt>services.urls</tt>: <tt><span class=\"pre\">/&lt;app&gt;/&lt;Model&gt;</span></tt></li>\n<li>Default path wiht <tt>services.url(app, noprefix=True)</tt>: <tt>/&lt;Model&gt;</tt></li>\n</ul>\n<p>You can change the mounting path by using the <tt>@url()</tt> decorator. You\ncan also use <tt>django.urls.reverse()</tt> to get the mount point by name\n<tt><span class=\"pre\">&lt;namespace&gt;:&lt;app&gt;.models.&lt;fn&gt;</span></tt>.</p>\n<ul>\n<li>POST \u2013 create \u2013 {\u201cpayload\u201d: {\u2026data\u2026}}</li>\n<li>GET \u2013 read \u2013 ?pk= for single record, omit for all</li>\n<li>PUT/PATCH \u2013 update \u2013 {\u201cpayload\u201d: {\u201cid\u201d: \u201c\u2026\u201d, \u2026data\u2026}}</li>\n<li>DELETE \u2013 delete \u2013 ?pk= for target record, required</li>\n<li>HEAD \u2013 meta \u2013 model name <tt><span class=\"pre\">X-Django-App-Model</span></tt> and table count\n<tt><span class=\"pre\">X-DB-Table-Count</span></tt> in reply headers</li>\n</ul>\n<p>When using <strong>GET</strong> http request on a <tt>@serve</tt>(-ed) model, you can\nalso specify params for filtering (by columns and Django ORM filter\noperations), sorting (by columns) and paging the returned result.</p>\n<pre>?filter=foo1:op_and_val1&amp;filter=foo2:op_and_val2\n?sort=foo, -bar\n\n?size=number\n?offset=number\n?page=number\n</pre>\n<p>When using <strong>Any</strong> http requests on a <tt>@serve</tt>(-ed) model, you can\nalways use <tt><span class=\"pre\">?db=...</span></tt> to switch onto the specific database for served\nmodel apis to query and modify. The database names come from your\n<tt>DATABASES</tt> configure in <tt>settings.py</tt>.</p>\n<p>Still, <strong>do not forget</strong> to mount everthing collected inside\n<tt>services.urls</tt> to a root url in the django <tt>urls.py</tt>. See the\n<strong>Setup</strong> section above.</p>\n</div>\n<div id=\"serve-unprotected\">\n<h4>@serve_unprotected</h4>\n<p>Same as @serve but without csrf protection.</p>\n</div>\n<div id=\"id1\">\n<h4>@methods(m1, m2, \u2026)</h4>\n<p>Same as @methods for a service function.</p>\n</div>\n<div id=\"id2\">\n<h4>@url(path)</h4>\n<p>Same as @url for a service function.</p>\n</div>\n</div>\n</div>\n<div id=\"database-backends\">\n<h2>Database Backends</h2>\n<h2 id=\"backends-mongodb\"><span class=\"section-subtitle\">backends.mongodb</span></h2>\n<p>This is a dummy backend engine to use with MongoDB connections without\nthe involvement of Django ORM. The purpose is to have your MongoDB\nsettings in the <tt>settings.py</tt> and use\n<tt><span class=\"pre\">django.db.connections['&lt;your</span> mongodb <span class=\"pre\">name&gt;']</span></tt> to start using MongoDB\nin your Django apps.</p>\n<pre># settings.py\n\nDATABASES = {\n    ...,\n    'mongo': {\n        'ENGINE': 'express.db.backends.mongodb',\n        'HOST': 'mongo.server.com',\n        'PORT': 27017,\n        'NAME': 'testdb',\n        'USER': '...',\n        'PASSWORD': '...',\n        'OPTIONS': {\n            ...pymongo.MongoClient options...\n        }\n    },\n    ...\n}\n</pre>\n<p>Now you will have,</p>\n<ul>\n<li>django.db.connections[\u2018testdb\u2019].db - a <tt>pymongo</tt> db object;</li>\n<li>django.db.connections[\u2018testdb\u2019].collection(\u2018collection\u2019=None) - a\n<tt>pymongo</tt> collection or all available collection names;</li>\n<li>django.db.connections[\u2018testdb\u2019].cursor(\u2018collection\u2019, **kwargs) - a\n.find(kwargs) <tt>pymongo</tt> cursor;</li>\n</ul>\n<p>After getting the above, you will have, *\ndjango.db.connections[\u2018testdb\u2019].connection - a <tt>pymongo</tt> client;</p>\n<p>Use <tt>.cursor()</tt> for search (<tt>GET</tt>) apis and <tt>.collection()</tt> for\nmodify (<tt>POST/PUT/PATCH/DELETE</tt>) apis.</p>\n<div id=\"limitation\">\n<h3>Limitation</h3>\n<p>This engine works up to the point of creating the db connection and\ncollection cursor, taking in DATABASES options from your settings.py;\nThe ORM layer (migration, schema, transactions, save/delete()) will not\nwork on database that has settings using this Engine.</p>\n</div>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>Copyright 2017 Tim Lauv. Under the\n<a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> License.</p>\n</div>\n\n          </div>"}, "last_serial": 3712205, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "f162758bf1024907d8cf2c8292a20d89", "sha256": "22999504676557a765b7adf40514a8f96bf1fe0da83846a0c4b4e864b6653e9f"}, "downloads": -1, "filename": "django_express-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f162758bf1024907d8cf2c8292a20d89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11041, "upload_time": "2017-01-22T06:22:25", "upload_time_iso_8601": "2017-01-22T06:22:25.847803Z", "url": "https://files.pythonhosted.org/packages/7c/65/5641cfc7b5461b7f58f5303f503c93c04ece81f18c54e9c9c6e7b5145117/django_express-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "143e86e526dd1bd53640ea19f16cb607", "sha256": "b3d23c49581c772151aaa8e8cfb1e78dc0ba256ebb418e458a3e6a0bb3e4ec68"}, "downloads": -1, "filename": "django-express-0.2.2.tar.gz", "has_sig": false, "md5_digest": "143e86e526dd1bd53640ea19f16cb607", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8889, "upload_time": "2017-01-22T06:22:26", "upload_time_iso_8601": "2017-01-22T06:22:26.839546Z", "url": "https://files.pythonhosted.org/packages/63/2a/986bbf13cadc719212da46a854f6ed0ca4c9ccb98a2afa73463efe2fb6b9/django-express-0.2.2.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "21a1c8356d319c21711a70ae13655685", "sha256": "7ff9a06bb1e86cfab331365a7e3ce2c5df322307f9f7f55014a308307e117249"}, "downloads": -1, "filename": "django_express-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "21a1c8356d319c21711a70ae13655685", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12084, "upload_time": "2017-01-30T07:23:35", "upload_time_iso_8601": "2017-01-30T07:23:35.441528Z", "url": "https://files.pythonhosted.org/packages/02/a5/92425761f28ea30070e499a33ea32226d36dbac1b41d92789de9b9f1f41c/django_express-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0a4ba5a889978cdb63419b6080a109c", "sha256": "2f8abdb2456ff56e605e0614fcecb6f958e02850bf1b818554446947270a39f3"}, "downloads": -1, "filename": "django-express-0.2.5.tar.gz", "has_sig": false, "md5_digest": "a0a4ba5a889978cdb63419b6080a109c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9509, "upload_time": "2017-01-30T07:23:36", "upload_time_iso_8601": "2017-01-30T07:23:36.854258Z", "url": "https://files.pythonhosted.org/packages/47/e4/b7f2b01f41e9d89294dcc041df576a297d080552b2750598190039388883/django-express-0.2.5.tar.gz", "yanked": false}], "0.3.1.dev6": [{"comment_text": "", "digests": {"md5": "fb9f9baa2f2d8c4832ca289ad594bf0c", "sha256": "519e6235c63c3300c50b7f031aa1b67b4dbf4fb42e95accfda51092a8603e1ac"}, "downloads": -1, "filename": "django_express-0.3.1.dev6-py3-none-any.whl", "has_sig": false, "md5_digest": "fb9f9baa2f2d8c4832ca289ad594bf0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26094, "upload_time": "2017-03-14T21:13:43", "upload_time_iso_8601": "2017-03-14T21:13:43.583282Z", "url": "https://files.pythonhosted.org/packages/b1/57/338fe426c2a81b884437e2127fc32a2aadae25f7cccaa582df3baf476635/django_express-0.3.1.dev6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "faca28081d963fda742c97e4e28d10cc", "sha256": "e157d9f918cb6e2ae0382e1024aa21f274188bff0e5b577802b76d67efb59ebe"}, "downloads": -1, "filename": "django-express-0.3.1.dev6.tar.gz", "has_sig": false, "md5_digest": "faca28081d963fda742c97e4e28d10cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20679, "upload_time": "2017-03-14T21:13:45", "upload_time_iso_8601": "2017-03-14T21:13:45.059990Z", "url": "https://files.pythonhosted.org/packages/ee/a1/b14933b968d9a9ee68993647ea8745946c622aca6a4fd03e8dbe741edca0/django-express-0.3.1.dev6.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "b1808f9114a36c0a987fda0eb69b080b", "sha256": "15a6c150d4eac45982ec9506760a0b0eafa6df30c3cec7abc5fc9e73d6d94688"}, "downloads": -1, "filename": "django_express-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b1808f9114a36c0a987fda0eb69b080b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28139, "upload_time": "2017-03-25T03:43:40", "upload_time_iso_8601": "2017-03-25T03:43:40.536584Z", "url": "https://files.pythonhosted.org/packages/be/13/3ee8128d1c5fb5932e17738a73c1207a8e4f1928081b8addde51c0b19f4a/django_express-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb60b0fbdd940768c3abd67eb8280ca4", "sha256": "066c16e332ccb3bdc9c179b3a2f1bb84c385f94d08826a8017e0660b7e012d86"}, "downloads": -1, "filename": "django-express-0.3.2.tar.gz", "has_sig": false, "md5_digest": "cb60b0fbdd940768c3abd67eb8280ca4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21809, "upload_time": "2017-03-25T03:43:41", "upload_time_iso_8601": "2017-03-25T03:43:41.697867Z", "url": "https://files.pythonhosted.org/packages/2f/1f/a844d6bc085c135383816e179d8b7cc057da67e4a1ffd73336805450c064/django-express-0.3.2.tar.gz", "yanked": false}], "0.3.3.dev1": [{"comment_text": "", "digests": {"md5": "4663587b8ab4b97e3aa20c847f02ece9", "sha256": "a505260bd96e700105096dd6af4a26eeedca161cd423f35319d504cbbaafc7ff"}, "downloads": -1, "filename": "django_express-0.3.3.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "4663587b8ab4b97e3aa20c847f02ece9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29575, "upload_time": "2017-04-30T08:04:31", "upload_time_iso_8601": "2017-04-30T08:04:31.630653Z", "url": "https://files.pythonhosted.org/packages/6d/7f/46d49f6769cea8158c1264eefda626919f4b55f01315151dea694cb7ec29/django_express-0.3.3.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0edeb4a926e05318d1604cc90e464af", "sha256": "bcabce847d73c7f97525c48704dc5f991acadf832087b5e80e042c666ca4555b"}, "downloads": -1, "filename": "django-express-0.3.3.dev1.tar.gz", "has_sig": false, "md5_digest": "f0edeb4a926e05318d1604cc90e464af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22359, "upload_time": "2017-04-30T08:04:32", "upload_time_iso_8601": "2017-04-30T08:04:32.846493Z", "url": "https://files.pythonhosted.org/packages/a4/f6/54983ec5b62321cf3725358adf4ec59f9a014ce00ab0858f4c08fb5bb312/django-express-0.3.3.dev1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "8247aa8044a00b595131f414b41b8337", "sha256": "efb9804bb60a8cb8c0902b14e365f03cd22defbeff7394687c668fdaf5dfc6bb"}, "downloads": -1, "filename": "django_express-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8247aa8044a00b595131f414b41b8337", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29525, "upload_time": "2018-03-27T23:52:41", "upload_time_iso_8601": "2018-03-27T23:52:41.770871Z", "url": "https://files.pythonhosted.org/packages/ff/a1/b4f629cb175782ed7f0dd16f46a483f44f4f567748839db01baf12e89e43/django_express-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4316a4c19f5515d08bef17ccabc094c3", "sha256": "b947b09da39661cd055248965c4ebfea8f3b3d21750fa9cb4c14cfca6b12cf9d"}, "downloads": -1, "filename": "django-express-0.4.0.tar.gz", "has_sig": false, "md5_digest": "4316a4c19f5515d08bef17ccabc094c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19514, "upload_time": "2018-03-27T23:52:43", "upload_time_iso_8601": "2018-03-27T23:52:43.381941Z", "url": "https://files.pythonhosted.org/packages/0f/89/45bf9ff2e366571caf1b3ada90a853ac086e5b741861228f22a8b6a29d96/django-express-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8247aa8044a00b595131f414b41b8337", "sha256": "efb9804bb60a8cb8c0902b14e365f03cd22defbeff7394687c668fdaf5dfc6bb"}, "downloads": -1, "filename": "django_express-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8247aa8044a00b595131f414b41b8337", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29525, "upload_time": "2018-03-27T23:52:41", "upload_time_iso_8601": "2018-03-27T23:52:41.770871Z", "url": "https://files.pythonhosted.org/packages/ff/a1/b4f629cb175782ed7f0dd16f46a483f44f4f567748839db01baf12e89e43/django_express-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4316a4c19f5515d08bef17ccabc094c3", "sha256": "b947b09da39661cd055248965c4ebfea8f3b3d21750fa9cb4c14cfca6b12cf9d"}, "downloads": -1, "filename": "django-express-0.4.0.tar.gz", "has_sig": false, "md5_digest": "4316a4c19f5515d08bef17ccabc094c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19514, "upload_time": "2018-03-27T23:52:43", "upload_time_iso_8601": "2018-03-27T23:52:43.381941Z", "url": "https://files.pythonhosted.org/packages/0f/89/45bf9ff2e366571caf1b3ada90a853ac086e5b741861228f22a8b6a29d96/django-express-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:16 2020"}