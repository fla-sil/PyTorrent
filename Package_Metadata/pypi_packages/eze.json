{"info": {"author": "agamm", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# eze\nA super simple library for common tasks in python 3. \n- **No extra dependencies** required, you can go use `eze.py`and that's it!\n- Great for scripting something fast.\n- You are free to copy implementations for specific functions (see `get_eze`).\n\n## TODO:\n- add examples for each function, and a link to the implementation for usage outside of the lib.\n\n## Usage\n`pip install eze`  \n\n`import eze as e`\n\n### Strings / JSON & CSV\n- `b64` - base 64 encodes to a string (no bytes needed!)\n- `b64d` - base 64 decodes a string/byte\n- `s` - to string\n- `b` - to bytes\n- `regex` - match\n```Example\nmatch = e.regex(r'hello (.*?)', 'hello world') # (' world', (' world'))\n```\n- `json` - json encode \n- `jsond` - json decode\n- `csv` - dict/list to csv\n- `csvd` - decode a csv file/string into a dict.\n\n### IO\n- `write` - write something to a file\n- `read` - read something from a file\n\n### Runtime\n- `eq` - checks if two vars/objects/classes are the same in-memory (might be used for something else)\n- `stack` - gets the stack up to here in a human-readable fashion.\n- `dir` - shows all of the inherited functions of an object (no need to see `__init_subclass__`)\n- `break` - poor man's breakpoint - will exit and print the current variables in a human-readable fashion.\n- `@timeit` decorator - prints the seconds it took to run a function.\n- `get_time` - returns the seconds it took to run a function.\n\n### Printing things\n- `pp`/`pretty_print` - pretty print objects/classes/functions.\n- `nl`/`new_line` - create a new line string for terminal usage\n- `tbl`/`table` - create an ascii table and print it out of lists/generators.\n- `diff` - show the difference between vars/functions/classes/objects can also be colored.\n\n### Imports\n- `import_all` - imports the whole directory - good for `__init__.py`\n- `import` - imports a python file during runtime\n```Example\nmodule = input('What module do you want?')\ne.import(module)\n# Use `module` functions\n```\n- `show_loaded` - shows the currently loaded modules.\n\n### Web\n- `get` - GET request to a URL.\n\n### Concurrency \n- `together` - run a function concurrently.\n```Example\ndef fetch_that(url):\n  print(requests.get(url).text)\n \n# together executes \ne.together(fetch_that, ['https://google.com', 'https://facebook.com'], {\n  'tasks': 4,\n  'done': done_callback\n})\n```\n\n### Misc\n- `get_eze` - prints out the implementation of a function here for production usage (without extra eze code).\n- `disable` - disables all of velocity's functions - for production usage.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/agamm/eze", "keywords": "", "license": "MIT", "maintainer": "Agam More", "maintainer_email": "", "name": "eze", "package_url": "https://pypi.org/project/eze/", "platform": "", "project_url": "https://pypi.org/project/eze/", "project_urls": {"Homepage": "https://github.com/agamm/eze"}, "release_url": "https://pypi.org/project/eze/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Modern minimalist python 3+ pocket knife.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eze</h1>\n<p>A super simple library for common tasks in python 3.</p>\n<ul>\n<li><strong>No extra dependencies</strong> required, you can go use <code>eze.py</code>and that's it!</li>\n<li>Great for scripting something fast.</li>\n<li>You are free to copy implementations for specific functions (see <code>get_eze</code>).</li>\n</ul>\n<h2>TODO:</h2>\n<ul>\n<li>add examples for each function, and a link to the implementation for usage outside of the lib.</li>\n</ul>\n<h2>Usage</h2>\n<p><code>pip install eze</code></p>\n<p><code>import eze as e</code></p>\n<h3>Strings / JSON &amp; CSV</h3>\n<ul>\n<li><code>b64</code> - base 64 encodes to a string (no bytes needed!)</li>\n<li><code>b64d</code> - base 64 decodes a string/byte</li>\n<li><code>s</code> - to string</li>\n<li><code>b</code> - to bytes</li>\n<li><code>regex</code> - match</li>\n</ul>\n<pre>match = e.regex(r'hello (.*?)', 'hello world') # (' world', (' world'))\n</pre>\n<ul>\n<li><code>json</code> - json encode</li>\n<li><code>jsond</code> - json decode</li>\n<li><code>csv</code> - dict/list to csv</li>\n<li><code>csvd</code> - decode a csv file/string into a dict.</li>\n</ul>\n<h3>IO</h3>\n<ul>\n<li><code>write</code> - write something to a file</li>\n<li><code>read</code> - read something from a file</li>\n</ul>\n<h3>Runtime</h3>\n<ul>\n<li><code>eq</code> - checks if two vars/objects/classes are the same in-memory (might be used for something else)</li>\n<li><code>stack</code> - gets the stack up to here in a human-readable fashion.</li>\n<li><code>dir</code> - shows all of the inherited functions of an object (no need to see <code>__init_subclass__</code>)</li>\n<li><code>break</code> - poor man's breakpoint - will exit and print the current variables in a human-readable fashion.</li>\n<li><code>@timeit</code> decorator - prints the seconds it took to run a function.</li>\n<li><code>get_time</code> - returns the seconds it took to run a function.</li>\n</ul>\n<h3>Printing things</h3>\n<ul>\n<li><code>pp</code>/<code>pretty_print</code> - pretty print objects/classes/functions.</li>\n<li><code>nl</code>/<code>new_line</code> - create a new line string for terminal usage</li>\n<li><code>tbl</code>/<code>table</code> - create an ascii table and print it out of lists/generators.</li>\n<li><code>diff</code> - show the difference between vars/functions/classes/objects can also be colored.</li>\n</ul>\n<h3>Imports</h3>\n<ul>\n<li><code>import_all</code> - imports the whole directory - good for <code>__init__.py</code></li>\n<li><code>import</code> - imports a python file during runtime</li>\n</ul>\n<pre>module = input('What module do you want?')\ne.import(module)\n# Use `module` functions\n</pre>\n<ul>\n<li><code>show_loaded</code> - shows the currently loaded modules.</li>\n</ul>\n<h3>Web</h3>\n<ul>\n<li><code>get</code> - GET request to a URL.</li>\n</ul>\n<h3>Concurrency</h3>\n<ul>\n<li><code>together</code> - run a function concurrently.</li>\n</ul>\n<pre>def fetch_that(url):\n  print(requests.get(url).text)\n \n# together executes \ne.together(fetch_that, ['https://google.com', 'https://facebook.com'], {\n  'tasks': 4,\n  'done': done_callback\n})\n</pre>\n<h3>Misc</h3>\n<ul>\n<li><code>get_eze</code> - prints out the implementation of a function here for production usage (without extra eze code).</li>\n<li><code>disable</code> - disables all of velocity's functions - for production usage.</li>\n</ul>\n\n          </div>"}, "last_serial": 5827652, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "511e88f023a139c752c404ca032d7abd", "sha256": "9b8b820d9b3fefb8cac3bd153d259e6093074446e842604a21f32c4fdbe501b1"}, "downloads": -1, "filename": "eze-0.0.1.tar.gz", "has_sig": false, "md5_digest": "511e88f023a139c752c404ca032d7abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2663, "upload_time": "2019-09-13T20:21:55", "upload_time_iso_8601": "2019-09-13T20:21:55.386902Z", "url": "https://files.pythonhosted.org/packages/6b/60/828b3ef36f4c9d0933401577d181364943285e0a36361f92973e23209dc8/eze-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1ab0da7eadca593db88a04c5336c45f7", "sha256": "4736a116031e0e91c2ae7adc60229fa1428cf0d88725dbf3a15b1f2d23c98bfe"}, "downloads": -1, "filename": "eze-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1ab0da7eadca593db88a04c5336c45f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2649, "upload_time": "2019-09-13T20:32:01", "upload_time_iso_8601": "2019-09-13T20:32:01.414798Z", "url": "https://files.pythonhosted.org/packages/6a/e1/82a31324f3cc424e7b3bcc691053ba5ea5a0180b86fdb2c474121e101cef/eze-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ab0da7eadca593db88a04c5336c45f7", "sha256": "4736a116031e0e91c2ae7adc60229fa1428cf0d88725dbf3a15b1f2d23c98bfe"}, "downloads": -1, "filename": "eze-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1ab0da7eadca593db88a04c5336c45f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2649, "upload_time": "2019-09-13T20:32:01", "upload_time_iso_8601": "2019-09-13T20:32:01.414798Z", "url": "https://files.pythonhosted.org/packages/6a/e1/82a31324f3cc424e7b3bcc691053ba5ea5a0180b86fdb2c474121e101cef/eze-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:23 2020"}