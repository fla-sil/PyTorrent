{"info": {"author": "Dave Hein", "author_email": "dhein@acm.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Security"], "description": "Authenticator\n=============\n\n``authenticator`` is a CLI analog to the Google Authenticator phone app, or the LastPass Authenticator phone app. It is a TOTP/HOTP client that can generate the numeric codes needed for authentication with sites that support Two-Factor Authentication (TFA) or Multi-Factor Authentication (MFA).\n\n* `Benefit`_\n* `Authentication secret (READ THIS)`_\n* `System Requirements`_\n* `Installation`_\n* `Usage`_\n* `Implementation details`_\n* `Development`_\n* `License`_\n\nBenefit\n-------\n\nThe benefit of using ``authenticator`` over a phone app is that this CLI utility can run anywhere Python 3.5 can run from a command line interface (e.g., a terminal window), and the database of accounts and secrets is a platform-independent passphrase-protected encrypted file that can be backed up and can be copied to multiple systems without fear of bad actors gaining access to the second factor authentication.\n\nAnother benefit is that ``authenticator`` can act as a backup in case you loose your phone or tablet (running Google Authenticator) or Google breaks the app or withdraws it.\n\nPersonally, I use both Google Authenticator on my iPhone and iPad, and run ``authenticator`` on several different computer systems. I keep a copy of the accounts file in a variety of places. If my phone bricks, is lost or stolen, I can still get access to my TFA-protected accounts if I can access any of those other computers, or any other computer on which I can install and run ``authenticator`` and access a copy of my accounts file.\n\nAuthentication secret (READ THIS)\n---------------------------------\n\nTFA/MFA clients that produce a 'one time' numeric code require a secret that they share with the server validating the authentication. Typically this secret is generated by the server and captured by the client in the form of a QR code that can be scanned by the client app on your phone.\n\nBut this CLI utility doesn't have the ability to capture or process QR images. It needs the secret in the form of a text string. If the server cannot provide a text string equivalent of the shared secret then you cannot use ``authenticator`` to generate one-time codes for that account.\n\nEach account will use a different secret, a different text string. If you are already using a phone app to generate one-time TFA codes for some accounts then you'll need to generate new secrets for those accounts (and update the info in the phone app) so that you can capture the secret as a text string.\n\nGMail TFA example\n~~~~~~~~~~~~~~~~~\n\nIf you enable Two-Factor Authentication for GMail, you'll go through a setup process that first configures your account to send your phone a code by text or voice. At the end of the setup you'll have an opportunity to add Google Authenticator as an alternative code generator. Select that and scan the QR code with your phone's Authenticator app (Google Authenticator, LastPass Authenticator, et cetera). Then click the link labeled \"CAN'T SCAN IT\" under the QR code ... that will give you a 32-character secret string that you'll use to add configure this account in ``authenticator``.\n\nIt is important that you capture the QR code and *then* click the link for the secret string secret code. If you capture the secret and click \"back\" to get the QR code then a new secret will be generated and the new QR won't match the previously captured secret string. (With Google Authenticator you actually don't need the QR code; you can also provide the secret as a text string using the 'manual entry' option when adding an account to the app. LastPass Authenticator doesn't have that option.)\n\nYou add the account and secret to ``authenticator`` like so::\n\n\t$ authenticator add Google:example@gmail.com\n\tEnter passphrase:\n\tEnter shared secret: xj6p kokw ipvk usc6 bveu sz3b csir xhbu\n\tOK\n\nYou then generate codes like so (use Ctrl-C to stop the generation)::\n\n\t$ authenticator generate\n\tEnter passphrase:\n\tGoogle:example@gmail.com 162534 (expires in 12 seconds)\n\n\tGoogle:example@gmail.com 162534 (expires in 7 seconds)\n\n\tGoogle:example@gmail.com 162534 (expires in 2 seconds)\n\n\tGoogle:example@gmail.com 996752 (expires in 27 seconds)\n\n\tGoogle:example@gmail.com 996752 (expires in 22 seconds)\n\t^C\n\nSystem Requirements\n-------------------\n\nThis requires Python 3.5 or later.\n\nIt has been tested on OS X 11.9.5, Windows 10, and Ubuntu 14.04. As none of those systems come with Python 3.5 out of the box, you'll need to install that yourself.\n\nAnd I recommend setting up a Python 3.5 virtual environment in which to install ``authenticator``.\n\nInstallation\n------------\n\nInstallation is simple::\n\n\tpip install authenticator\n\n\tauthenticator --help\n\nUsage\n-----\n\nAdd an account\n~~~~~~~~~~~~~~\n\nTo add a new account, do something like::\n\n\tauthenticator add Google:example@gmail.com\n\nYou can use any string there as the name. I recommend the format 'vendor:userid', where *vendor* is some string indicating the organization or server that will check your TFA credentials, and *userid* is the user account id that is being authenticated.\n\nYou'll get prompted for the passphrase to unlock the file in which all the account secrets are stored. And then you'll get prompted for a secret string.\n\nGenerate current codes\n~~~~~~~~~~~~~~~~~~~~~~\n\nTo get the current code for all the accounts, do::\n\n\tauthenticator generate\n\nYou'll get prompted for the passphrase, and then the program will start generating the current passcode for all the accounts. It will continue to generate current codes every 5 seconds until you stop it with ctrl-C.\n\nOther commands and options\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere's a lot more, just enter ``authenticator --help`` for a list of all the commands and something like ``authenticator add --help`` for detailed help on a specific command.\n\n::\n\n\t$ authenticator --help\n\tusage: authenticator [-h] [--version] [--data ALTDATAFILE]\n\t                     {add,delete,del,generate,gen,info,list,set} ...\n\n\tRun or manage HOTP/TOTP calculations\n\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  --version             show the software version\n\t  --data ALTDATAFILE    Specify the path to an alternate data file\n\n\tSub-commands:\n\t  Valid Sub-Commands\n\n\t  {add,delete,del,generate,gen,info,list,set}\n\t                        Sub-command Help\n\t    add                 add a HOTP/TOTP configuration\n\t    delete (del)        delete a HOTP/TOTP configuration\n\t    generate (gen)      generate passwords for one or more HOTP/TOTP\n\t                        configurations\n\t    info                show information about this software and your data\n\t    list                list HOTP/TOTP configurations\n\t    set                 set HOPT configuration values\n\n::\n\n\t$ authenticator add --help\n\tusage: authenticator add [-h] [--counter COUNTER] [--length PASSWORDLENGTH]\n\t                         [--period PERIOD]\n\t                         clientIdToAdd\n\n\tAdd a new HOTP/TOTP configuration to the data file.\n\n\tpositional arguments:\n\t  clientIdToAdd         a unique identifier for the HOTP/TOTP configuration\n\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  --counter COUNTER     initial counter value for a counter-based HOTP\n\t                        calculation (no default)\n\t  --length PASSWORDLENGTH\n\t                        length of the generated password (default: 6)\n\t  --period PERIOD       length of the time period in seconds for a time-based\n\t                        HOTP calculation (default: 30)\n\nImplementation details\n----------------------\n\nThis is a simple attempt to implement the \"Pseudocode for Time OTP\"and \"Pseudocode for Event/Counter OTP\" given in the `Wikipedia article on Google Authenticator`_. That pseudocode is reproduced here ...\n\n.. _`Wikipedia article on Google Authenticator`: https://en.wikipedia.org/wiki/Google_Authenticator\n\nPseudocode for Time OTP\n~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n\tfunction GoogleAuthenticatorCode(string secret)\n\t    key := base32decode(secret)\n\t    message := current Unix time \u00f7 30\n\t    hash := HMAC-SHA1(key, message)\n\t    offset := last nibble of hash\n\t    //4 bytes starting at the offset\n\t    truncatedHash := hash[offset..offset+3]\n\t    //remove the most significant bit\n\t    Set the first bit of truncatedHash to zero\n\t    code := truncatedHash mod 1000000\n\t    pad code with 0 until length of code is 6\n\t    return code\n\nPseudocode for Event/Counter OTP\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n\tfunction GoogleAuthenticatorCode(string secret)\n\t    key := base32decode(secret)\n\t    message := counter encoded on 8 bytes\n\t    hash := HMAC-SHA1(key, message)\n\t    offset := last nibble of hash\n\t    //4 bytes starting at the offset\n\t    truncatedHash := hash[offset..offset+3]\n\t    //remove the most significant bit\n\t    Set the first bit of truncatedHash to zero\n\t    code := truncatedHash mod 1000000\n\t    pad code with 0 until length of code is 6\n\t    return code\n\nI've validated the pseudocode and this implementation against RFC6238_ (TOTP), RFC4226_ (HOTP) and RFC4648_ (Base32 encoding).\n\n.. _RFC6238: http://tools.ietf.org/html/rfc6238\n.. _RFC4226: http://tools.ietf.org/html/rfc4226\n.. _RFC4648: http://tools.ietf.org/html/rfc4648\n\nDependencies\n~~~~~~~~~~~~\n\nThis implementation requires:\n\n* Python 3.5 or later\n* `cryptography 1.4`_\n* `iso8601 0.1.11`_\n\n.. _`cryptography 1.4`: https://pypi.python.org/pypi/cryptography/1.4\n.. _`iso8601 0.1.11`: https://pypi.python.org/pypi/iso8601/0.1.11\n\nDevelopment\n-----------\n\nTo setup the development environment on OS X, clone the repo from GitHub, and then ``cd`` in Terminal to the root of the cloned repository and do:\n\n1. ``dev/venv/make-venv.sh``\n2. ``. dev/venv/activate-project.src``\n3. ``dev/venv/provision-venv.sh``\n4. ``dev/lint.sh``\n5. ``dev/runtests.sh``\n\nTo setup the development environment on OS X, clone the repo from GitHub, and then ``cd`` in Terminal to the root of the cloned repository and do:\n\n1. ``dev/venv/make-venv.ps1``\n2. ``dev/venv/activate-project.ps1``\n3. ``dev/venv/provision-venv.ps1``\n4. ``dev/lint.ps1``\n5. ``dev/runtests.ps1``\n\nYou can find out more about why the virtual environment is setup and managed that way by looking at these blog posts:\n\n* `Using Virtual Environments - Python I`_\n* `Using Virtual Environments - Python II`_\n\n.. _`Using Virtual Environments - Python I`: https://www.develves.net/blogs/asd/2016-02-11-using-virtual-environments-python-1/\n.. _`Using Virtual Environments - Python II`: https://www.develves.net/blogs/asd/2016-02-25-using-virtual-environments-python-2/\n\nI build the distribution using ``dev/build/make-package.sh``.\n\nLicense\n-------\n\nThis project uses the MIT license.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JeNeSuisPasDave/authenticator", "keywords": "tfa mfa authenticator hotp totp", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "authenticator", "package_url": "https://pypi.org/project/authenticator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/authenticator/", "project_urls": {"Homepage": "https://github.com/JeNeSuisPasDave/authenticator"}, "release_url": "https://pypi.org/project/authenticator/1.1.3/", "requires_dist": ["cryptography (>=1.4)", "iso8601 (>=0.1.11)"], "requires_python": "", "summary": "A HOTP/TOTP code generator for the command line.", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>authenticator</tt> is a CLI analog to the Google Authenticator phone app, or the LastPass Authenticator phone app. It is a TOTP/HOTP client that can generate the numeric codes needed for authentication with sites that support Two-Factor Authentication (TFA) or Multi-Factor Authentication (MFA).</p>\n<ul>\n<li><a href=\"#benefit\" rel=\"nofollow\">Benefit</a></li>\n<li><a href=\"#authentication-secret-read-this\" rel=\"nofollow\">Authentication secret (READ THIS)</a></li>\n<li><a href=\"#system-requirements\" rel=\"nofollow\">System Requirements</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#implementation-details\" rel=\"nofollow\">Implementation details</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<div id=\"benefit\">\n<h2>Benefit</h2>\n<p>The benefit of using <tt>authenticator</tt> over a phone app is that this CLI utility can run anywhere Python 3.5 can run from a command line interface (e.g., a terminal window), and the database of accounts and secrets is a platform-independent passphrase-protected encrypted file that can be backed up and can be copied to multiple systems without fear of bad actors gaining access to the second factor authentication.</p>\n<p>Another benefit is that <tt>authenticator</tt> can act as a backup in case you loose your phone or tablet (running Google Authenticator) or Google breaks the app or withdraws it.</p>\n<p>Personally, I use both Google Authenticator on my iPhone and iPad, and run <tt>authenticator</tt> on several different computer systems. I keep a copy of the accounts file in a variety of places. If my phone bricks, is lost or stolen, I can still get access to my TFA-protected accounts if I can access any of those other computers, or any other computer on which I can install and run <tt>authenticator</tt> and access a copy of my accounts file.</p>\n</div>\n<div id=\"authentication-secret-read-this\">\n<h2>Authentication secret (READ THIS)</h2>\n<p>TFA/MFA clients that produce a \u2018one time\u2019 numeric code require a secret that they share with the server validating the authentication. Typically this secret is generated by the server and captured by the client in the form of a QR code that can be scanned by the client app on your phone.</p>\n<p>But this CLI utility doesn\u2019t have the ability to capture or process QR images. It needs the secret in the form of a text string. If the server cannot provide a text string equivalent of the shared secret then you cannot use <tt>authenticator</tt> to generate one-time codes for that account.</p>\n<p>Each account will use a different secret, a different text string. If you are already using a phone app to generate one-time TFA codes for some accounts then you\u2019ll need to generate new secrets for those accounts (and update the info in the phone app) so that you can capture the secret as a text string.</p>\n<div id=\"gmail-tfa-example\">\n<h3>GMail TFA example</h3>\n<p>If you enable Two-Factor Authentication for GMail, you\u2019ll go through a setup process that first configures your account to send your phone a code by text or voice. At the end of the setup you\u2019ll have an opportunity to add Google Authenticator as an alternative code generator. Select that and scan the QR code with your phone\u2019s Authenticator app (Google Authenticator, LastPass Authenticator, et cetera). Then click the link labeled \u201cCAN\u2019T SCAN IT\u201d under the QR code \u2026 that will give you a 32-character secret string that you\u2019ll use to add configure this account in <tt>authenticator</tt>.</p>\n<p>It is important that you capture the QR code and <em>then</em> click the link for the secret string secret code. If you capture the secret and click \u201cback\u201d to get the QR code then a new secret will be generated and the new QR won\u2019t match the previously captured secret string. (With Google Authenticator you actually don\u2019t need the QR code; you can also provide the secret as a text string using the \u2018manual entry\u2019 option when adding an account to the app. LastPass Authenticator doesn\u2019t have that option.)</p>\n<p>You add the account and secret to <tt>authenticator</tt> like so:</p>\n<pre>$ authenticator add Google:example@gmail.com\nEnter passphrase:\nEnter shared secret: xj6p kokw ipvk usc6 bveu sz3b csir xhbu\nOK\n</pre>\n<p>You then generate codes like so (use Ctrl-C to stop the generation):</p>\n<pre>$ authenticator generate\nEnter passphrase:\nGoogle:example@gmail.com 162534 (expires in 12 seconds)\n\nGoogle:example@gmail.com 162534 (expires in 7 seconds)\n\nGoogle:example@gmail.com 162534 (expires in 2 seconds)\n\nGoogle:example@gmail.com 996752 (expires in 27 seconds)\n\nGoogle:example@gmail.com 996752 (expires in 22 seconds)\n^C\n</pre>\n</div>\n</div>\n<div id=\"system-requirements\">\n<h2>System Requirements</h2>\n<p>This requires Python 3.5 or later.</p>\n<p>It has been tested on OS X 11.9.5, Windows 10, and Ubuntu 14.04. As none of those systems come with Python 3.5 out of the box, you\u2019ll need to install that yourself.</p>\n<p>And I recommend setting up a Python 3.5 virtual environment in which to install <tt>authenticator</tt>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installation is simple:</p>\n<pre>pip install authenticator\n\nauthenticator --help\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"add-an-account\">\n<h3>Add an account</h3>\n<p>To add a new account, do something like:</p>\n<pre>authenticator add Google:example@gmail.com\n</pre>\n<p>You can use any string there as the name. I recommend the format \u2018vendor:userid\u2019, where <em>vendor</em> is some string indicating the organization or server that will check your TFA credentials, and <em>userid</em> is the user account id that is being authenticated.</p>\n<p>You\u2019ll get prompted for the passphrase to unlock the file in which all the account secrets are stored. And then you\u2019ll get prompted for a secret string.</p>\n</div>\n<div id=\"generate-current-codes\">\n<h3>Generate current codes</h3>\n<p>To get the current code for all the accounts, do:</p>\n<pre>authenticator generate\n</pre>\n<p>You\u2019ll get prompted for the passphrase, and then the program will start generating the current passcode for all the accounts. It will continue to generate current codes every 5 seconds until you stop it with ctrl-C.</p>\n</div>\n<div id=\"other-commands-and-options\">\n<h3>Other commands and options</h3>\n<p>There\u2019s a lot more, just enter <tt>authenticator <span class=\"pre\">--help</span></tt> for a list of all the commands and something like <tt>authenticator add <span class=\"pre\">--help</span></tt> for detailed help on a specific command.</p>\n<pre>$ authenticator --help\nusage: authenticator [-h] [--version] [--data ALTDATAFILE]\n                     {add,delete,del,generate,gen,info,list,set} ...\n\nRun or manage HOTP/TOTP calculations\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show the software version\n  --data ALTDATAFILE    Specify the path to an alternate data file\n\nSub-commands:\n  Valid Sub-Commands\n\n  {add,delete,del,generate,gen,info,list,set}\n                        Sub-command Help\n    add                 add a HOTP/TOTP configuration\n    delete (del)        delete a HOTP/TOTP configuration\n    generate (gen)      generate passwords for one or more HOTP/TOTP\n                        configurations\n    info                show information about this software and your data\n    list                list HOTP/TOTP configurations\n    set                 set HOPT configuration values\n</pre>\n<pre>$ authenticator add --help\nusage: authenticator add [-h] [--counter COUNTER] [--length PASSWORDLENGTH]\n                         [--period PERIOD]\n                         clientIdToAdd\n\nAdd a new HOTP/TOTP configuration to the data file.\n\npositional arguments:\n  clientIdToAdd         a unique identifier for the HOTP/TOTP configuration\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --counter COUNTER     initial counter value for a counter-based HOTP\n                        calculation (no default)\n  --length PASSWORDLENGTH\n                        length of the generated password (default: 6)\n  --period PERIOD       length of the time period in seconds for a time-based\n                        HOTP calculation (default: 30)\n</pre>\n</div>\n</div>\n<div id=\"implementation-details\">\n<h2>Implementation details</h2>\n<p>This is a simple attempt to implement the \u201cPseudocode for Time OTP\u201dand \u201cPseudocode for Event/Counter OTP\u201d given in the <a href=\"https://en.wikipedia.org/wiki/Google_Authenticator\" rel=\"nofollow\">Wikipedia article on Google Authenticator</a>. That pseudocode is reproduced here \u2026</p>\n<div id=\"pseudocode-for-time-otp\">\n<h3>Pseudocode for Time OTP</h3>\n<pre>function GoogleAuthenticatorCode(string secret)\n    key := base32decode(secret)\n    message := current Unix time \u00f7 30\n    hash := HMAC-SHA1(key, message)\n    offset := last nibble of hash\n    //4 bytes starting at the offset\n    truncatedHash := hash[offset..offset+3]\n    //remove the most significant bit\n    Set the first bit of truncatedHash to zero\n    code := truncatedHash mod 1000000\n    pad code with 0 until length of code is 6\n    return code\n</pre>\n</div>\n<div id=\"pseudocode-for-event-counter-otp\">\n<h3>Pseudocode for Event/Counter OTP</h3>\n<pre>function GoogleAuthenticatorCode(string secret)\n    key := base32decode(secret)\n    message := counter encoded on 8 bytes\n    hash := HMAC-SHA1(key, message)\n    offset := last nibble of hash\n    //4 bytes starting at the offset\n    truncatedHash := hash[offset..offset+3]\n    //remove the most significant bit\n    Set the first bit of truncatedHash to zero\n    code := truncatedHash mod 1000000\n    pad code with 0 until length of code is 6\n    return code\n</pre>\n<p>I\u2019ve validated the pseudocode and this implementation against <a href=\"http://tools.ietf.org/html/rfc6238\" rel=\"nofollow\">RFC6238</a> (TOTP), <a href=\"http://tools.ietf.org/html/rfc4226\" rel=\"nofollow\">RFC4226</a> (HOTP) and <a href=\"http://tools.ietf.org/html/rfc4648\" rel=\"nofollow\">RFC4648</a> (Base32 encoding).</p>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>This implementation requires:</p>\n<ul>\n<li>Python 3.5 or later</li>\n<li><a href=\"https://pypi.python.org/pypi/cryptography/1.4\" rel=\"nofollow\">cryptography 1.4</a></li>\n<li><a href=\"https://pypi.python.org/pypi/iso8601/0.1.11\" rel=\"nofollow\">iso8601 0.1.11</a></li>\n</ul>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To setup the development environment on OS X, clone the repo from GitHub, and then <tt>cd</tt> in Terminal to the root of the cloned repository and do:</p>\n<ol>\n<li><tt><span class=\"pre\">dev/venv/make-venv.sh</span></tt></li>\n<li><tt>. <span class=\"pre\">dev/venv/activate-project.src</span></tt></li>\n<li><tt><span class=\"pre\">dev/venv/provision-venv.sh</span></tt></li>\n<li><tt>dev/lint.sh</tt></li>\n<li><tt>dev/runtests.sh</tt></li>\n</ol>\n<p>To setup the development environment on OS X, clone the repo from GitHub, and then <tt>cd</tt> in Terminal to the root of the cloned repository and do:</p>\n<ol>\n<li><tt><span class=\"pre\">dev/venv/make-venv.ps1</span></tt></li>\n<li><tt><span class=\"pre\">dev/venv/activate-project.ps1</span></tt></li>\n<li><tt><span class=\"pre\">dev/venv/provision-venv.ps1</span></tt></li>\n<li><tt>dev/lint.ps1</tt></li>\n<li><tt>dev/runtests.ps1</tt></li>\n</ol>\n<p>You can find out more about why the virtual environment is setup and managed that way by looking at these blog posts:</p>\n<ul>\n<li><a href=\"https://www.develves.net/blogs/asd/2016-02-11-using-virtual-environments-python-1/\" rel=\"nofollow\">Using Virtual Environments - Python I</a></li>\n<li><a href=\"https://www.develves.net/blogs/asd/2016-02-25-using-virtual-environments-python-2/\" rel=\"nofollow\">Using Virtual Environments - Python II</a></li>\n</ul>\n<p>I build the distribution using <tt><span class=\"pre\">dev/build/make-package.sh</span></tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project uses the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 2699145, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "bd65f25b4917950b57532e2a687aeead", "sha256": "c559ac59f96abb6b8578f0a6017092b4e69e7becfa13cc7f1a9aaa7fafec950d"}, "downloads": -1, "filename": "authenticator-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bd65f25b4917950b57532e2a687aeead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31097, "upload_time": "2016-06-08T03:06:06", "upload_time_iso_8601": "2016-06-08T03:06:06.545485Z", "url": "https://files.pythonhosted.org/packages/60/d5/f944047277f281f54c066fa4a10fea1d9bc2bffee646188d7e3ec4938123/authenticator-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e52f6c4884e11f17f782dbb4d0a647a", "sha256": "3f9caef62ff168402fcfa9e2005112f79fe2b648aff61e35a213450d4af033cd"}, "downloads": -1, "filename": "authenticator-1.1.1.tar.gz", "has_sig": false, "md5_digest": "5e52f6c4884e11f17f782dbb4d0a647a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26507, "upload_time": "2016-06-08T03:06:10", "upload_time_iso_8601": "2016-06-08T03:06:10.657176Z", "url": "https://files.pythonhosted.org/packages/9f/f2/107453b85942f3db57cc68cd967c33fca2b554c1a89dfda78d8b8c7a3b27/authenticator-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "d596d3763576c21c318c0b7ac505c8df", "sha256": "da7d8286dad590ff46c263374a0d6fdae62257d291f79886ad25cfb419849130"}, "downloads": -1, "filename": "authenticator-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d596d3763576c21c318c0b7ac505c8df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31260, "upload_time": "2016-06-09T03:20:41", "upload_time_iso_8601": "2016-06-09T03:20:41.478885Z", "url": "https://files.pythonhosted.org/packages/a0/cb/512e3951d3a4417f8ce913b5038b64bff4a1fbce70df2d01f3925b38766f/authenticator-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "72107756bc10f182e8b8cbff632475e1", "sha256": "3cbc4063133e9c093db1ec4b7bb16add6d58b4e58d4f9501d1ce91532320b236"}, "downloads": -1, "filename": "authenticator-1.1.2.tar.gz", "has_sig": false, "md5_digest": "72107756bc10f182e8b8cbff632475e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26675, "upload_time": "2016-06-09T03:20:46", "upload_time_iso_8601": "2016-06-09T03:20:46.009217Z", "url": "https://files.pythonhosted.org/packages/ee/de/4de6dc05894e46e29399da3bf1e91410841c97f590182af851eaef97887b/authenticator-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "6e9b290736c9730d819bb15a0071bafa", "sha256": "9157175b6e104ee861df9c577d4f00953c37ead3f5ae145746ce4e470100aa3f"}, "downloads": -1, "filename": "authenticator-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6e9b290736c9730d819bb15a0071bafa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31329, "upload_time": "2017-03-11T14:50:39", "upload_time_iso_8601": "2017-03-11T14:50:39.278091Z", "url": "https://files.pythonhosted.org/packages/b5/68/f486848654b38021d6264291afcb3a97b23c41b9f5b7822bb3e7beb7f784/authenticator-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd44760add52b46a3e83d19dfa3d3df", "sha256": "30b7a84a6983fd9f4b7f91df835ae853e901d301a33a38958f69d9da3c0eba33"}, "downloads": -1, "filename": "authenticator-1.1.3.tar.gz", "has_sig": false, "md5_digest": "ebd44760add52b46a3e83d19dfa3d3df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26747, "upload_time": "2017-03-11T14:50:41", "upload_time_iso_8601": "2017-03-11T14:50:41.519828Z", "url": "https://files.pythonhosted.org/packages/1d/8f/35b612ab82a5a409898b05479b5bcc085790bcf9da9001c502ba7e718117/authenticator-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6e9b290736c9730d819bb15a0071bafa", "sha256": "9157175b6e104ee861df9c577d4f00953c37ead3f5ae145746ce4e470100aa3f"}, "downloads": -1, "filename": "authenticator-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6e9b290736c9730d819bb15a0071bafa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31329, "upload_time": "2017-03-11T14:50:39", "upload_time_iso_8601": "2017-03-11T14:50:39.278091Z", "url": "https://files.pythonhosted.org/packages/b5/68/f486848654b38021d6264291afcb3a97b23c41b9f5b7822bb3e7beb7f784/authenticator-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd44760add52b46a3e83d19dfa3d3df", "sha256": "30b7a84a6983fd9f4b7f91df835ae853e901d301a33a38958f69d9da3c0eba33"}, "downloads": -1, "filename": "authenticator-1.1.3.tar.gz", "has_sig": false, "md5_digest": "ebd44760add52b46a3e83d19dfa3d3df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26747, "upload_time": "2017-03-11T14:50:41", "upload_time_iso_8601": "2017-03-11T14:50:41.519828Z", "url": "https://files.pythonhosted.org/packages/1d/8f/35b612ab82a5a409898b05479b5bcc085790bcf9da9001c502ba7e718117/authenticator-1.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:23 2020"}