{"info": {"author": "Kenneth M. \"Elf\" Sternberg", "author_email": "elf.sternberg@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nGit Lint: README\n===============================\n\nA git command that automatically runs identifiable linters against\nchanged files in your current git repository or staging area.\n\n* Free software: MIT license\n\n**Git Lint** runs a configurable set of syntax, style, and complexity\ncheckers against changed files in your current working directory or\nstaging area.  It can be configured to work with any `lint`-like\ncommand.  Some commands may require shell wrappers.\n\nWhile it may be possible to create a custom lint command in your npm,\ngrunt, Make, CMake, or whatever, the fact is we all use a VCS, and most\nof us use git.  Having a centralized repository for what we want checked\nand how we want it checked, associated with git (and by extension, as a\npre-commit hook), that can be run at any time for any reason.\n\nUsage\n-----\n\nTo lint only what's changed recently in your current working directory:\n    `git lint`\n\nTo lint everything, changed or otherwise, from the current directory down:\n    `git lint -a`\n\nTo lint what's changed from the repo's base:\n    `git lint -b`\n\nTo lint what's in your staging directory:\n    `git lint -s`\n\n\nDocumentation\n-------------\n\nComplete documentation for the project is available in the docs directory, or at `Git\nLinter Docs <https://elfsternberg.github.io/git-linter/index.html>`_.\n\n\n\n    \nInstall\n-------\n\nThis *ought* to work:\n\n    `pip install git-linter`\n\nYou will need to copy the .git-lint configuration file to either your\nhome directory or the repo`s base directory.  Edit the configuration\nfile as needed.  You will also need any linters that you plan on\nrunning.\n\nAs git-linter is still mostly alpha code, it might be better to install\nfrom source:\n\n    ``\n    git clone https://github.com/elfsternberg/git-linter\n    python setup.py install\n    ``\n    \n\n\nFeatures\n--------\n\n* Highly configurable - configuration files, both for git-lint and\n  individual linters, can be global or per-project.\n\n* Only checks files that have been changed, but this can be overriden\n  from the command line.\n\n* Can be used directly as a pre-commit hook, to ensure you personally\n  don't check in anything broken.\n\n  * Used this way, it checks the *staging* area, not your workspace.\n\n  * When using the staging area, it stashes your current work. Upon\n    restoration of your workspace, it ensures the timestamps are the\n    same, so as not to confuse your build system or IDE.\n\n\nAcknowledgements\n----------------\n\n`Git lint` started life as a simple pre-commit hook.  Most of the changes since were\ninspired by Steve Pulec's `Why You Need a Git Pre-Commit Hook and Why Most Are Wrong <https://dzone.com/articles/why-your-need-git-pre-commit>`_, as well as just my own needs\nas a software developer.\n\n\nDisclaimer\n----------\n\nThis software, including provided configuration and documentation\nmaterials, is provided \"as is\" without any warranties, including any\nimplied warranties of merchantability, fitness, performance, or\nquality.  In no event shall the author or sponsor be liable for any\nspecial, direct, indirect, or consequential damages or any damages\nwhatsoever resulting from loss of use, data or profits, whether in an\naction of contract, negligence or other tortious action, arising out\nof or in connection with the use or performance of this software.\nEach user of the program will agree and understand, and be deemed to\nhave agreed and understood, that there is no warranty whatsoever for\nthe program and, accordingly, the entire risk arising from or\notherwise connected with the program is assumed by the user.\n\n\n=======\nHistory\n=======\n\n0.0.2 (2015-05-22)\n------------------\n\nPre-commit version\n\n0.0.04 (2016-09-26)\n-------------------\n\nMoved to \"git lint\" and optioned the hell out of it.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elfsternberg/git_linter", "keywords": "git lint style syntaxt development", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "git_linter", "package_url": "https://pypi.org/project/git_linter/", "platform": "", "project_url": "https://pypi.org/project/git_linter/", "project_urls": {"Homepage": "https://github.com/elfsternberg/git_linter"}, "release_url": "https://pypi.org/project/git_linter/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "A git command to lint everything in your workspace (or stage) that was changed since the last commit.", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"git-lint-readme\">\n<h2>Git Lint: README</h2>\n<p>A git command that automatically runs identifiable linters against\nchanged files in your current git repository or staging area.</p>\n<ul>\n<li>Free software: MIT license</li>\n</ul>\n<p><strong>Git Lint</strong> runs a configurable set of syntax, style, and complexity\ncheckers against changed files in your current working directory or\nstaging area.  It can be configured to work with any <cite>lint</cite>-like\ncommand.  Some commands may require shell wrappers.</p>\n<p>While it may be possible to create a custom lint command in your npm,\ngrunt, Make, CMake, or whatever, the fact is we all use a VCS, and most\nof us use git.  Having a centralized repository for what we want checked\nand how we want it checked, associated with git (and by extension, as a\npre-commit hook), that can be run at any time for any reason.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<dl>\n<dt>To lint only what\u2019s changed recently in your current working directory:</dt>\n<dd><cite>git lint</cite></dd>\n<dt>To lint everything, changed or otherwise, from the current directory down:</dt>\n<dd><cite>git lint -a</cite></dd>\n<dt>To lint what\u2019s changed from the repo\u2019s base:</dt>\n<dd><cite>git lint -b</cite></dd>\n<dt>To lint what\u2019s in your staging directory:</dt>\n<dd><cite>git lint -s</cite></dd>\n</dl>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>Complete documentation for the project is available in the docs directory, or at <a href=\"https://elfsternberg.github.io/git-linter/index.html\" rel=\"nofollow\">Git\nLinter Docs</a>.</p>\n</div>\n<div id=\"install\">\n<h3>Install</h3>\n<p>This <em>ought</em> to work:</p>\n<blockquote>\n<cite>pip install git-linter</cite></blockquote>\n<p>You will need to copy the .git-lint configuration file to either your\nhome directory or the repo`s base directory.  Edit the configuration\nfile as needed.  You will also need any linters that you plan on\nrunning.</p>\n<p>As git-linter is still mostly alpha code, it might be better to install\nfrom source:</p>\n<blockquote>\n``\ngit clone <a href=\"https://github.com/elfsternberg/git-linter\" rel=\"nofollow\">https://github.com/elfsternberg/git-linter</a>\npython setup.py install\n``</blockquote>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Highly configurable - configuration files, both for git-lint and\nindividual linters, can be global or per-project.</li>\n<li>Only checks files that have been changed, but this can be overriden\nfrom the command line.</li>\n<li>Can be used directly as a pre-commit hook, to ensure you personally\ndon\u2019t check in anything broken.<ul>\n<li>Used this way, it checks the <em>staging</em> area, not your workspace.</li>\n<li>When using the staging area, it stashes your current work. Upon\nrestoration of your workspace, it ensures the timestamps are the\nsame, so as not to confuse your build system or IDE.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<p><cite>Git lint</cite> started life as a simple pre-commit hook.  Most of the changes since were\ninspired by Steve Pulec\u2019s <a href=\"https://dzone.com/articles/why-your-need-git-pre-commit\" rel=\"nofollow\">Why You Need a Git Pre-Commit Hook and Why Most Are Wrong</a>, as well as just my own needs\nas a software developer.</p>\n</div>\n<div id=\"disclaimer\">\n<h3>Disclaimer</h3>\n<p>This software, including provided configuration and documentation\nmaterials, is provided \u201cas is\u201d without any warranties, including any\nimplied warranties of merchantability, fitness, performance, or\nquality.  In no event shall the author or sponsor be liable for any\nspecial, direct, indirect, or consequential damages or any damages\nwhatsoever resulting from loss of use, data or profits, whether in an\naction of contract, negligence or other tortious action, arising out\nof or in connection with the use or performance of this software.\nEach user of the program will agree and understand, and be deemed to\nhave agreed and understood, that there is no warranty whatsoever for\nthe program and, accordingly, the entire risk arising from or\notherwise connected with the program is assumed by the user.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.0.2 (2015-05-22)</h3>\n<p>Pre-commit version</p>\n</div>\n<div id=\"id2\">\n<h3>0.0.04 (2016-09-26)</h3>\n<p>Moved to \u201cgit lint\u201d and optioned the hell out of it.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2384648, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "51a3810d3af59d733baefa25f61e17af", "sha256": "0a36a685758b3945fa143ea94f0e194a7ae831be297130b6ecf7a715a6c77a2f"}, "downloads": -1, "filename": "git_linter-0.0.4.tar.gz", "has_sig": false, "md5_digest": "51a3810d3af59d733baefa25f61e17af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24599, "upload_time": "2016-10-05T16:26:55", "upload_time_iso_8601": "2016-10-05T16:26:55.051955Z", "url": "https://files.pythonhosted.org/packages/d6/c8/f7a765454192410993e10860e36980228a8d042a9a45f4b22e0011439596/git_linter-0.0.4.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "738b8e9f7a53408d06d263c6c512a99c", "sha256": "1b3669beb0c498694b1d81e3636a02e401b050e84bcea9433f46bd3a71202b1a"}, "downloads": -1, "filename": "git_linter-0.0.6.tar.gz", "has_sig": false, "md5_digest": "738b8e9f7a53408d06d263c6c512a99c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34111, "upload_time": "2016-10-05T18:10:21", "upload_time_iso_8601": "2016-10-05T18:10:21.448730Z", "url": "https://files.pythonhosted.org/packages/35/b1/2dd3fbf15f616a3820e1bd09dd5cb949d3b4b23eed2fbfa3a391df6a4906/git_linter-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "a1853f335792a4c0a9ffea3e84e0946f", "sha256": "358892ec4636e926998686e44151c8b87212456576b1b885697cadd3c7fc9bfd"}, "downloads": -1, "filename": "git_linter-0.0.7.tar.gz", "has_sig": false, "md5_digest": "a1853f335792a4c0a9ffea3e84e0946f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34361, "upload_time": "2016-10-06T16:10:44", "upload_time_iso_8601": "2016-10-06T16:10:44.115079Z", "url": "https://files.pythonhosted.org/packages/5b/c4/d2d0ec84bcc3c77a20f7739d0b30fb857f52cc87754794f414792776e0e0/git_linter-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a1853f335792a4c0a9ffea3e84e0946f", "sha256": "358892ec4636e926998686e44151c8b87212456576b1b885697cadd3c7fc9bfd"}, "downloads": -1, "filename": "git_linter-0.0.7.tar.gz", "has_sig": false, "md5_digest": "a1853f335792a4c0a9ffea3e84e0946f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34361, "upload_time": "2016-10-06T16:10:44", "upload_time_iso_8601": "2016-10-06T16:10:44.115079Z", "url": "https://files.pythonhosted.org/packages/5b/c4/d2d0ec84bcc3c77a20f7739d0b30fb857f52cc87754794f414792776e0e0/git_linter-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:53 2020"}