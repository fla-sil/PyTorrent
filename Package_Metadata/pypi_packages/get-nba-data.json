{"info": {"author": "Jun Kim", "author_email": "jkim65537@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "        \r\r\n        # Introduction\r\r\n        Easy way to webscrape and gather data from NBA statistics website (url: http://stats.nba.com/stats/)\r\r\n        It is by no means complete yet. Still building methods on top of the main API.\r\r\n        Only works in Python 3.\r\r\n        \r\r\n        # API Details\r\r\n        \r\r\n        ## Installation\r\r\n        \r\r\n        This project is available on [PyPi](https://pypi.python.org/pypi/get_nba_data).\r\r\n        \r\r\n        To install\r\r\n        ```\r\r\n        pip install get_nba_data\r\r\n        ```\r\r\n        \r\r\n        ## API Methods\r\r\n        \r\r\n        * `advanced_stats.get_data()` #without parameters\r\r\n                                        fetches advanced_stats for all players\r\r\n        * `advanced_stats.get_data(college=\"washington\", position=\"forward\")` #with parameters,\r\r\n                                    fetches advanced_stats for University of Washington forwards\r\r\n        \r\r\n        * `category_leaders.get_data()` #without parameters,\r\r\n                                    fetches advanced_stats for all players\r\r\n        * `category_leaders.get_data(stat_cat = \"assists\")` #with parameters,\r\r\n                                    fetches data sorted by counts of assists for all players\r\r\n        \r\r\n        \r\r\n        ## API Method Parameters for advanced_stats\r\r\n        Parameters for advanced stats SHOULD match what's being shown here: http://stats.nba.com/players/advanced/#!?sort=PIE&dir=-1.\r\r\n        \r\r\n        \r\r\n        Parameter inputs are NOT case-sensitive.\r\r\n        \r\r\n        \r\r\n        You will see a shit ton of parameters right below. You do not HAVE to specify all of them.\r\r\n        \r\r\n        \r\r\n        Not setting the parameter defaults it to include ALL data for the given parameter.\r\r\n        \r\r\n        * `season_type`: Str season_type.  Represents the type of season. e.g. \"regular season\".\r\r\n        * `season`: Str season.  Represents the season. e.g. \"2016-17\".\r\r\n        * `season_segment`: Str season_segment.  Represents the type of season segment. e.g. \"entire season\".\r\r\n        * `position`: Str position.  Represents the type of position e.g. \"guard\".\r\r\n        * `starter_bench`: Str starter_bench.  Starters or bench players? . e.g. \"bench\".\r\r\n        * `experience`: Str experience.  Represents the experience. e.g. \"veteran\", \"rookie\", \"sophomore\".\r\r\n        * `draft_year`: Str or int draft_year.  Represents the year players were drafted. e.g. \"2016\", 2016.\r\r\n        * `draft_pick`: Str draft_pick.  Represents the rounds players were drafted in. e.g. \"1st round\".\r\r\n        * `college`: Str college.  Represents the name of the college. e.g. \"washington\".\r\r\n        * `country`: Str country.  Represents the name of the country. e.g. \"latvia\".\r\r\n        * `weight`: Str weight.  Represents the thresholds for weight. e.g. \">300\".\r\r\n        * `height`: Str height.  Represents the type of season. e.g. \"regular season\".\r\r\n        * `team`: Str team.  Represents the team name excluding the location name. e.g. \"timberwolves\".\r\r\n        * `opponent`: Str opponent.  Represents the team name excluding the location name. e.g. \"warriors\".\r\r\n        * `division`: Str division.  Represents the name of the division. e.g. \"pacific\".\r\r\n        * `vs_division`: Str vs_divsion.  Represents the name of the opponent division. e.g. \"atlantic\".\r\r\n        * `conference`: Str conference.  Represents the name of the conference. e.g. \"west\".\r\r\n        * `vs_conference`: Str vs_conference.  Represents the name of the opponent conference. e.g. \"east\".\r\r\n        * `outcome`: Str outcome.  Represents the outcome of the games. e.g. \"wins\".\r\r\n        * `location`: Str location.  Represents the type of Home/Away games. e.g. \"home\", \"away\".\r\r\n        * `shot_clock_range`: Str shot_clock_range.  Represents the range of the shot clock. e.g. \"24-22\".\r\r\n        * `quarter`: Str or int quarter.  Represents the type of the quarter. e.g. \"1st quarter\", \"OT1\".\r\r\n        * `by_half`: Str by_half.  Represents the type of half. e.g. \"first half\", \"overtime\".\r\r\n        * `playoff_round`: Str playoff_round.  Represents the type of the playoff round. e.g. \"conference quarter finals\", \"finals\".\r\r\n        * `n_games`: Str or int n_games.  Represents the number of games. e.g. \"15\", 15. #not sure what the range on this is.\r\r\n        \r\r\n        ## API Method Parameters for category_leaders\r\r\n        Parameters for category_leaders SHOULD match what's being shown here: http://stats.nba.com/leaders.\r\r\n        \r\r\n        \r\r\n        Parameter inputs are NOT case-sensitive.\r\r\n        You will see a shit ton of parameters right below. You do not HAVE to specify all of them.\r\r\n        \r\r\n        \r\r\n        Not setting the parameter defaults it to include ALL data for the given parameter.\r\r\n        \r\r\n        * `season_type`: Str season_type.  Represents the type of season. e.g. \"regular season\".\r\r\n        * `season`: Str season.  Represents the season. e.g. \"2016-17\".\r\r\n        * `per_mode`: Str per_mode.  Represents the per mode. e.g. \"per 48 minutes\".\r\r\n        * `stat_cat`: Str stat_cat.  Represents the statistical category. e.g. \"steals\".\r\r\n        \r\r\n        ## Example Usage\r\r\n        \r\r\n        ### Get advanced stats data tables for heavy and light former Duke players\r\r\n        \r\r\n        ```python\r\r\n        from get_nba_data import advanced_stats\r\r\n        \r\r\n        \r\r\n        def get_fat_duke_players():\r\r\n            advanced = advanced_stats()\r\r\n            fatties = advanced.get_data(college=\"duke\", weight=\">250\")\r\r\n            return fatties\r\r\n        \r\r\n        \r\r\n        def get_skinny_duke_players():\r\r\n            advanced = advanced_stats()\r\r\n            sticks = advanced.get_data(college=\"duke\", weight=\"<200\")\r\r\n            return sticks\r\r\n        \r\r\n        #Or... simply\r\r\n        advanced = advanced_stats()\r\r\n        fatties = advanced.get_data(college=\"duke\", weight=\">250\")\r\r\n        sticks = advanced.get_data(college=\"duke\", weight=\"<200\")\r\r\n        \r\r\n        ```\r\r\n        \r\r\n        ### Get category leaders data tables sorted by assists and points per 48 minutes\r\r\n        \r\r\n        ```python\r\r\n        from get_nba_data import category_leaders\r\r\n        \r\r\n        \r\r\n        def get_leaders_assists():\r\r\n            leaders = category_leaders()\r\r\n            assist_leaders = leaders(stat_cat=\"assists\", per_mode=\"per 48 minutes\")\r\r\n            return assist_leaders\r\r\n        \r\r\n        \r\r\n        def get_leaders_points():\r\r\n            leaders = category_leaders()\r\r\n            points_leaders = leaders(stat_cat=\"points\", per_mode=\"per 48 minutes\")\r\r\n            return points_leaders\r\r\n        \r\r\n        #Or... simply\r\r\n        leaders = category_leaders()\r\r\n        assist_leaders = leaders(stat_cat=\"assists\", per_mode=\"per 48 minutes\")\r\r\n        points_leaders = leaders(stat_cat=\"points\", per_mode=\"per 48 minutes\")\r\r\n        \r\r\n        ```\r\r\n        \r\nPlatform: UNKNOWN\r\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/jkim65537/get_nba_data/dist/get_nba_data-1.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jkim65537/get_nba_data", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "get-nba-data", "package_url": "https://pypi.org/project/get-nba-data/", "platform": "", "project_url": "https://pypi.org/project/get-nba-data/", "project_urls": {"Download": "https://github.com/jkim65537/get_nba_data/dist/get_nba_data-1.0.0.tar.gz", "Homepage": "http://github.com/jkim65537/get_nba_data"}, "release_url": "https://pypi.org/project/get-nba-data/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "easy tool to load nba data with", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <br>        # Introduction\n\n<br>        Easy way to webscrape and gather data from NBA statistics website (url: http://stats.nba.com/stats/)\n\n<br>        It is by no means complete yet. Still building methods on top of the main API.\n\n<br>        Only works in Python 3.\n\n<br>        \n\n<br>        # API Details\n\n<br>        \n\n<br>        ## Installation\n\n<br>        \n\n<br>        This project is available on [PyPi](https://pypi.python.org/pypi/get_nba_data).\n\n<br>        \n\n<br>        To install\n\n<br>        ```\n\n<br>        pip install get_nba_data\n\n<br>        ```\n\n<br>        \n\n<br>        ## API Methods\n\n<br>        \n\n<br>        * `advanced_stats.get_data()` #without parameters\n\n<br>                                        fetches advanced_stats for all players\n\n<br>        * `advanced_stats.get_data(college=\"washington\", position=\"forward\")` #with parameters,\n\n<br>                                    fetches advanced_stats for University of Washington forwards\n\n<br>        \n\n<br>        * `category_leaders.get_data()` #without parameters,\n\n<br>                                    fetches advanced_stats for all players\n\n<br>        * `category_leaders.get_data(stat_cat = \"assists\")` #with parameters,\n\n<br>                                    fetches data sorted by counts of assists for all players\n\n<br>        \n\n<br>        \n\n<br>        ## API Method Parameters for advanced_stats\n\n<br>        Parameters for advanced stats SHOULD match what's being shown here: http://stats.nba.com/players/advanced/#!?sort=PIE&amp;dir=-1.\n\n<br>        \n\n<br>        \n\n<br>        Parameter inputs are NOT case-sensitive.\n\n<br>        \n\n<br>        \n\n<br>        You will see a shit ton of parameters right below. You do not HAVE to specify all of them.\n\n<br>        \n\n<br>        \n\n<br>        Not setting the parameter defaults it to include ALL data for the given parameter.\n\n<br>        \n\n<br>        * `season_type`: Str season_type.  Represents the type of season. e.g. \"regular season\".\n\n<br>        * `season`: Str season.  Represents the season. e.g. \"2016-17\".\n\n<br>        * `season_segment`: Str season_segment.  Represents the type of season segment. e.g. \"entire season\".\n\n<br>        * `position`: Str position.  Represents the type of position e.g. \"guard\".\n\n<br>        * `starter_bench`: Str starter_bench.  Starters or bench players? . e.g. \"bench\".\n\n<br>        * `experience`: Str experience.  Represents the experience. e.g. \"veteran\", \"rookie\", \"sophomore\".\n\n<br>        * `draft_year`: Str or int draft_year.  Represents the year players were drafted. e.g. \"2016\", 2016.\n\n<br>        * `draft_pick`: Str draft_pick.  Represents the rounds players were drafted in. e.g. \"1st round\".\n\n<br>        * `college`: Str college.  Represents the name of the college. e.g. \"washington\".\n\n<br>        * `country`: Str country.  Represents the name of the country. e.g. \"latvia\".\n\n<br>        * `weight`: Str weight.  Represents the thresholds for weight. e.g. \"&gt;300\".\n\n<br>        * `height`: Str height.  Represents the type of season. e.g. \"regular season\".\n\n<br>        * `team`: Str team.  Represents the team name excluding the location name. e.g. \"timberwolves\".\n\n<br>        * `opponent`: Str opponent.  Represents the team name excluding the location name. e.g. \"warriors\".\n\n<br>        * `division`: Str division.  Represents the name of the division. e.g. \"pacific\".\n\n<br>        * `vs_division`: Str vs_divsion.  Represents the name of the opponent division. e.g. \"atlantic\".\n\n<br>        * `conference`: Str conference.  Represents the name of the conference. e.g. \"west\".\n\n<br>        * `vs_conference`: Str vs_conference.  Represents the name of the opponent conference. e.g. \"east\".\n\n<br>        * `outcome`: Str outcome.  Represents the outcome of the games. e.g. \"wins\".\n\n<br>        * `location`: Str location.  Represents the type of Home/Away games. e.g. \"home\", \"away\".\n\n<br>        * `shot_clock_range`: Str shot_clock_range.  Represents the range of the shot clock. e.g. \"24-22\".\n\n<br>        * `quarter`: Str or int quarter.  Represents the type of the quarter. e.g. \"1st quarter\", \"OT1\".\n\n<br>        * `by_half`: Str by_half.  Represents the type of half. e.g. \"first half\", \"overtime\".\n\n<br>        * `playoff_round`: Str playoff_round.  Represents the type of the playoff round. e.g. \"conference quarter finals\", \"finals\".\n\n<br>        * `n_games`: Str or int n_games.  Represents the number of games. e.g. \"15\", 15. #not sure what the range on this is.\n\n<br>        \n\n<br>        ## API Method Parameters for category_leaders\n\n<br>        Parameters for category_leaders SHOULD match what's being shown here: http://stats.nba.com/leaders.\n\n<br>        \n\n<br>        \n\n<br>        Parameter inputs are NOT case-sensitive.\n\n<br>        You will see a shit ton of parameters right below. You do not HAVE to specify all of them.\n\n<br>        \n\n<br>        \n\n<br>        Not setting the parameter defaults it to include ALL data for the given parameter.\n\n<br>        \n\n<br>        * `season_type`: Str season_type.  Represents the type of season. e.g. \"regular season\".\n\n<br>        * `season`: Str season.  Represents the season. e.g. \"2016-17\".\n\n<br>        * `per_mode`: Str per_mode.  Represents the per mode. e.g. \"per 48 minutes\".\n\n<br>        * `stat_cat`: Str stat_cat.  Represents the statistical category. e.g. \"steals\".\n\n<br>        \n\n<br>        ## Example Usage\n\n<br>        \n\n<br>        ### Get advanced stats data tables for heavy and light former Duke players\n\n<br>        \n\n<br>        ```python\n\n<br>        from get_nba_data import advanced_stats\n\n<br>        \n\n<br>        \n\n<br>        def get_fat_duke_players():\n\n<br>            advanced = advanced_stats()\n\n<br>            fatties = advanced.get_data(college=\"duke\", weight=\"&gt;250\")\n\n<br>            return fatties\n\n<br>        \n\n<br>        \n\n<br>        def get_skinny_duke_players():\n\n<br>            advanced = advanced_stats()\n\n<br>            sticks = advanced.get_data(college=\"duke\", weight=\"&lt;200\")\n\n<br>            return sticks\n\n<br>        \n\n<br>        #Or... simply\n\n<br>        advanced = advanced_stats()\n\n<br>        fatties = advanced.get_data(college=\"duke\", weight=\"&gt;250\")\n\n<br>        sticks = advanced.get_data(college=\"duke\", weight=\"&lt;200\")\n\n<br>        \n\n<br>        ```\n\n<br>        \n\n<br>        ### Get category leaders data tables sorted by assists and points per 48 minutes\n\n<br>        \n\n<br>        ```python\n\n<br>        from get_nba_data import category_leaders\n\n<br>        \n\n<br>        \n\n<br>        def get_leaders_assists():\n\n<br>            leaders = category_leaders()\n\n<br>            assist_leaders = leaders(stat_cat=\"assists\", per_mode=\"per 48 minutes\")\n\n<br>            return assist_leaders\n\n<br>        \n\n<br>        \n\n<br>        def get_leaders_points():\n\n<br>            leaders = category_leaders()\n\n<br>            points_leaders = leaders(stat_cat=\"points\", per_mode=\"per 48 minutes\")\n\n<br>            return points_leaders\n\n<br>        \n\n<br>        #Or... simply\n\n<br>        leaders = category_leaders()\n\n<br>        assist_leaders = leaders(stat_cat=\"assists\", per_mode=\"per 48 minutes\")\n\n<br>        points_leaders = leaders(stat_cat=\"points\", per_mode=\"per 48 minutes\")\n\n<br>        \n\n<br>        ```\n\n<br>        \n<br>Platform: UNKNOWN\n<br>\n          </div>"}, "last_serial": 4345171, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2101fe6e0e4b94a1df3c2977361c206a", "sha256": "ef40f8f6354c035f345eefb7fa5bcd48c5954a5d9b9a4fe902022b8e20d05803"}, "downloads": -1, "filename": "get_nba_data-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2101fe6e0e4b94a1df3c2977361c206a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6166, "upload_time": "2017-07-15T20:42:07", "upload_time_iso_8601": "2017-07-15T20:42:07.199007Z", "url": "https://files.pythonhosted.org/packages/b1/cd/a92763046f4d9e57e2032c89161e57b5b7352664060e5d34f8a3e99a98dc/get_nba_data-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cb5fd728e410675495e29d6f56df4b28", "sha256": "480b5fa5f413762dabf28fdc968cd805efe132d54f1ee34abc38debe12679ab3"}, "downloads": -1, "filename": "get_nba_data-1.0.1.tar.gz", "has_sig": false, "md5_digest": "cb5fd728e410675495e29d6f56df4b28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6128, "upload_time": "2017-07-16T02:20:46", "upload_time_iso_8601": "2017-07-16T02:20:46.970927Z", "url": "https://files.pythonhosted.org/packages/c8/60/a9facf989dc65bfe22e0e293fdc2b0af1000d6499b8cb8fd25eb4050a7ed/get_nba_data-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "64fa2288343b9fc543adbe768e948b21", "sha256": "5ab8bd510ac89ff99be7945a8614828dce827b191a13a2b257844386c16c8155"}, "downloads": -1, "filename": "get_nba_data-1.0.2.tar.gz", "has_sig": false, "md5_digest": "64fa2288343b9fc543adbe768e948b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4359, "upload_time": "2017-07-16T03:20:47", "upload_time_iso_8601": "2017-07-16T03:20:47.491765Z", "url": "https://files.pythonhosted.org/packages/06/d8/0d68d96651dd53d416a3cb3ae00453678c4b5cc5f2ab47581b1a3adfcfbb/get_nba_data-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "fa750c25d5868234b0f51726ea77aaa7", "sha256": "924d5d8607ef0bf2a54c78137542e46527002614b00178e3285a165c4be6154f"}, "downloads": -1, "filename": "get_nba_data-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fa750c25d5868234b0f51726ea77aaa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6133, "upload_time": "2017-07-16T03:28:13", "upload_time_iso_8601": "2017-07-16T03:28:13.397180Z", "url": "https://files.pythonhosted.org/packages/e9/f4/6c68c36947c23239be3e3f84ed43c315a9dfe41f6dfaa6a19fa618a9fd16/get_nba_data-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "d08758632b7850400f38ba5df85780a1", "sha256": "e8e5a43174b0186e4c92b16693899725ac17771482e570d757ccb9f9a5f7cff9"}, "downloads": -1, "filename": "get_nba_data-1.0.4.tar.gz", "has_sig": false, "md5_digest": "d08758632b7850400f38ba5df85780a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4409, "upload_time": "2017-07-16T03:48:57", "upload_time_iso_8601": "2017-07-16T03:48:57.157346Z", "url": "https://files.pythonhosted.org/packages/fd/30/aac4495b13a04a958f6d2225333d8058bd61f181f4c9ec6352a2e2966487/get_nba_data-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "d1767f6d169186a0c7f765e6908f240a", "sha256": "bbc22a542d554993c795e245ad736fcdafab00f94664b605a2a6123260289d7e"}, "downloads": -1, "filename": "get_nba_data-1.0.5.tar.gz", "has_sig": false, "md5_digest": "d1767f6d169186a0c7f765e6908f240a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4414, "upload_time": "2017-07-22T03:54:01", "upload_time_iso_8601": "2017-07-22T03:54:01.208736Z", "url": "https://files.pythonhosted.org/packages/51/45/3738a88cb1745d21063f8a7d51024ce09f29ad900fbb91715daa0c0544c3/get_nba_data-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "3b47333c6ddf75b7f790a788e648c080", "sha256": "5a2485ebf8b0c06b7897f9f2b2e5025ee79f5a5a5ab1ff1d02ce3ff0aa06de91"}, "downloads": -1, "filename": "get_nba_data-1.0.6.tar.gz", "has_sig": false, "md5_digest": "3b47333c6ddf75b7f790a788e648c080", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4471, "upload_time": "2017-07-22T03:58:41", "upload_time_iso_8601": "2017-07-22T03:58:41.303257Z", "url": "https://files.pythonhosted.org/packages/62/95/07daac287c448facd47dc470f23d403e5591e30f0f4006cd2261d3cdf62d/get_nba_data-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "459947404f65851a33e82c8c4544793f", "sha256": "ccf737e558b35db169c59712343d1e20c9995eb68acd614adf153aacd2b4126f"}, "downloads": -1, "filename": "get_nba_data-1.0.7.tar.gz", "has_sig": false, "md5_digest": "459947404f65851a33e82c8c4544793f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4465, "upload_time": "2017-07-22T04:08:09", "upload_time_iso_8601": "2017-07-22T04:08:09.403064Z", "url": "https://files.pythonhosted.org/packages/5e/eb/663b4274c01eb6b002a47c5dc3b3f35bea24385caa93c522ec9faa78f4be/get_nba_data-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "f0bed5e5410fe3e38f1243cbf3ddb1fd", "sha256": "15b2c38e8256498de8bb0e71ab6d50807251e460ee4505fa476b6e9ff33b072e"}, "downloads": -1, "filename": "get_nba_data-1.0.8.tar.gz", "has_sig": false, "md5_digest": "f0bed5e5410fe3e38f1243cbf3ddb1fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4450, "upload_time": "2017-07-22T05:03:14", "upload_time_iso_8601": "2017-07-22T05:03:14.476537Z", "url": "https://files.pythonhosted.org/packages/78/5b/a6c7d4e0a63e070ada1d41c617df1047ef437829e12bba9c3abfbab17e85/get_nba_data-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "20d82df0a5e832b40f076e3690a86cc3", "sha256": "3aee875cdd45bbbd2d7719b9bbefe544e8a8f9dec546bea6266baa9d56db6d0d"}, "downloads": -1, "filename": "get_nba_data-1.0.9.tar.gz", "has_sig": false, "md5_digest": "20d82df0a5e832b40f076e3690a86cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4437, "upload_time": "2017-07-25T04:38:39", "upload_time_iso_8601": "2017-07-25T04:38:39.336221Z", "url": "https://files.pythonhosted.org/packages/2b/53/c24e723f7fd74d1a6cb378da3fea63d6093ea2b989ec0f8b072bd668cd4d/get_nba_data-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "865372e7b8ee8144a0ee990beb84e484", "sha256": "f6c0761553c6bb61459cebd50a3a0f60207440bb9dbb866abeabc2747942d2b1"}, "downloads": -1, "filename": "get_nba_data-1.1.0.tar.gz", "has_sig": false, "md5_digest": "865372e7b8ee8144a0ee990beb84e484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6534, "upload_time": "2018-10-05T17:16:31", "upload_time_iso_8601": "2018-10-05T17:16:31.465767Z", "url": "https://files.pythonhosted.org/packages/82/8f/3ed17070ba33a6ff2716f4b0c3cdc4c1dfab54c34139959e2a7db8944c2b/get_nba_data-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "865372e7b8ee8144a0ee990beb84e484", "sha256": "f6c0761553c6bb61459cebd50a3a0f60207440bb9dbb866abeabc2747942d2b1"}, "downloads": -1, "filename": "get_nba_data-1.1.0.tar.gz", "has_sig": false, "md5_digest": "865372e7b8ee8144a0ee990beb84e484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6534, "upload_time": "2018-10-05T17:16:31", "upload_time_iso_8601": "2018-10-05T17:16:31.465767Z", "url": "https://files.pythonhosted.org/packages/82/8f/3ed17070ba33a6ff2716f4b0c3cdc4c1dfab54c34139959e2a7db8944c2b/get_nba_data-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:46 2020"}