{"info": {"author": "Justin Engel", "author_email": "jtengel08@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "=================\nQt Thread Updater\n=================\n\nPython Qt thread updater to update GUI items using a separate thread.\n\nThis library allows you to efficiently update Qt GUI elements from a separate thread. Qt GUI elements are not thread\nsafe. Method calls like `Label.setText` do not work in a separate thread. This library solves that problem.\n\n\nUtilities\n=========\n\nThe ThreadUpdater offers several utilities to help with updating a widget's value.\n\n  * call_latest - Call the given function with the most recent value in the main thread using the timer.\n\n    * It is safe to call this many times with the same function.\n    * If the given function is called multiple times it is only called once with the most recent value.\n\n  * call_in_main - Call the given function in the main thread using the timer.\n\n    * Every time you call this function the given function will be called in the main thread\n    * If the given function is called multiple times it will be called every time in the main thread.\n    * If this function is called too many times it could slow down the main event loop.\n\n  * register_continuous - Register a function to be called every time the `ThreadUpdater.update` method is called.\n\n    * The `timeout` variable (in seconds) indicates how often the registered functions will be called.\n\n  * delay - Call a function after the given number of seconds has passed.\n\n    * This will not be accurate. Accuracy can be improved by lowering the timeout to increase how often the timer runs.\n\nThreadUpdater Examples\n======================\n\nBelow are some examples of how the ThreadUpdater would normally be used.\n\nSimple Thread Example\n~~~~~~~~~~~~~~~~~~~~~\n\nThe example below tells the update to run lbl.setText in the main thread with the latest value.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater import get_updater\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    lbl = QtWidgets.QLabel(\"Latest Count: 0\")\n    lbl.resize(300, 300)\n    lbl.show()\n\n    data = {'counter': 0}\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            text = 'Latest Count: {}'.format(data['counter'])\n            get_updater().call_latest(lbl.setText, text)\n            data['counter'] += 1\n            time.sleep(0.001)  # Not needed (still good to have some delay to release the thread)\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()\n\n\nContinuous Update Example\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe example below continuously runs the update function every time `ThreadUpdater.update()` is called from the timer.\nThis may be inefficient if there is no new data to update the label with.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater import get_updater\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    lbl = QtWidgets.QLabel(\"Continuous Count: 0\")\n    lbl.resize(300, 300)\n    lbl.show()\n\n    data = {'counter': 0}\n\n    def update():\n        \"\"\"Update the label with the current value.\"\"\"\n        lbl.setText('Continuous Count: {}'.format(data['counter']))\n\n    get_updater().register_continuous(update)\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            data['counter'] += 1\n            # time.sleep(0.001)  # Not needed (still good to have some delay to release the thread)\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()\n\n\nCall In Main Example\n~~~~~~~~~~~~~~~~~~~~\n\nThe example below calls the append function every time. It may not be efficient.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater import get_updater\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    text_edit = QtWidgets.QTextEdit()\n    text_edit.resize(300, 300)\n    text_edit.setReadOnly(True)\n    text_edit.show()\n\n    data = {'counter': 0}\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            text = 'Main Count: {}'.format(data['counter'])\n            get_updater().call_in_main(text_edit.append, text)\n            data['counter'] += 1\n            time.sleep(0.01)  # Some delay/waiting is required\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()\n\n\nDelay Example\n~~~~~~~~~~~~~\n\nThe example below calls the append function after X number of seconds has passed. The delay function will not be\naccurate, but guarantees that the function is called after X number of seconds. To increase accuracy give the\n`ThreadUpdater` a smaller timeout for it to run at a faster rate.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater import get_updater\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    text_edit = QtWidgets.QTextEdit()\n    text_edit.resize(300, 300)\n    text_edit.setReadOnly(True)\n    text_edit.show()\n\n    now = time.time()\n\n    def update_text(set_time):\n        text_edit.append('Requested {:.04f} Updated {:.04f}'.format(set_time, time.time() - now))\n\n    # Lower the timeout so it runs at a faster rate.\n    get_updater().timeout = 0  # 0.0001  # Qt runs in milliseconds\n\n    get_updater().delay(0.5, update_text, 0.5)\n    get_updater().delay(1, update_text, 1)\n    get_updater().delay(1.5, update_text, 1.5)\n    get_updater().delay(2, update_text, 2)\n    get_updater().delay(2.5, update_text, 2.5)\n    get_updater().delay(3, update_text, 3)\n\n    app.exec_()\n\n\nWidgets\n=======\n\nI've decdied to include a couple of useful Qt Widgets with this library.\n\n  * QuickPlainTextEdit - Used to display fast streams of data\n  * QuickTextEdit - Display fast streams of data with color.\n\n\nQuickPlainTextEdit\n~~~~~~~~~~~~~~~~~~\n\nQuickly display data from a separate thread.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater.widgets.quick_text_edit import QuickPlainTextEdit\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    text_edit = QuickPlainTextEdit()\n    text_edit.resize(300, 300)\n    text_edit.show()\n\n    data = {'counter': 0}\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            text = 'Main Count: {}\\n'.format(data['counter'])\n            text_edit.write(text)\n            data['counter'] += 1\n            time.sleep(0.0001)  # Some delay is usually required to let the Qt event loop run (not needed if IO used)\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()\n\n\nQuickTextEdit\n~~~~~~~~~~~~~\n\nQuickly display data from a separate thread using color.\n\n.. code-block:: python\n\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater.widgets.quick_text_edit import QuickTextEdit\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    text_edit = QuickTextEdit()\n    text_edit.resize(300, 300)\n    text_edit.show()\n\n    data = {'counter': 0}\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            text = 'Main Count: {}\\n'.format(data['counter'])\n            text_edit.write(text, 'blue')\n            data['counter'] += 1\n            time.sleep(0.0001)  # Some delay is usually required to let the Qt event loop run (not needed if IO used)\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()\n\nQuickTextEdit Redirect\n~~~~~~~~~~~~~~~~~~~~~~\n\nDisplay print (stdout and stderr) in a QTextEdit with color.\n\n.. code-block:: python\n\n    import sys\n    import time\n    import threading\n    from qtpy import QtWidgets\n    from qt_thread_updater.widgets.quick_text_edit import QuickTextEdit\n\n    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])\n\n    text_edit = QuickTextEdit()\n    text_edit.resize(300, 300)\n    text_edit.show()\n\n    sys.stdout = text_edit.redirect(color='blue', iostream=sys.__stdout__)\n    sys.stderr = text_edit.redirect(color='red', iostream=sys.__stderr__)\n\n    data = {'counter': 0}\n\n    def run(is_alive):\n        is_alive.set()\n        while is_alive.is_set():\n            stdout_text = 'Main Count: {}'.format(data['counter'])  # Print gives \\n automatically\n            error_text = 'Error Count: {}'.format(data['counter'])  # Print gives \\n automatically\n\n            # Print automatically give '\\n' with the \"end\" keyword argument.\n            print(stdout_text)  # Print will write to sys.stdout where the rediect will write to text_edit and stdout\n            print(error_text, file=sys.stderr)  # Print to sys.stderr. Rediect will write to text_edit and stderr\n\n            data['counter'] += 1\n\n            # Some delay is usually desired. print/sys.__stdout__ uses IO which gives time for Qt's event loop.\n            # time.sleep(0.0001)\n\n    alive = threading.Event()\n    th = threading.Thread(target=run, args=(alive,))\n    th.start()\n\n    app.exec_()\n    alive.clear()", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/justengel/qt_thread_updater/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justengel/qt_thread_updater", "keywords": "PyQt PyQt4 PyQt5 PySide PySide2 QtPy Thread Update GUI", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "qt-thread-updater", "package_url": "https://pypi.org/project/qt-thread-updater/", "platform": "any", "project_url": "https://pypi.org/project/qt-thread-updater/", "project_urls": {"Download": "https://github.com/justengel/qt_thread_updater/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/justengel/qt_thread_updater"}, "release_url": "https://pypi.org/project/qt-thread-updater/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python Qt thread updater to update GUI items using a separate thread.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python Qt thread updater to update GUI items using a separate thread.</p>\n<p>This library allows you to efficiently update Qt GUI elements from a separate thread. Qt GUI elements are not thread\nsafe. Method calls like <cite>Label.setText</cite> do not work in a separate thread. This library solves that problem.</p>\n<div id=\"utilities\">\n<h2>Utilities</h2>\n<p>The ThreadUpdater offers several utilities to help with updating a widget\u2019s value.</p>\n<blockquote>\n<ul>\n<li>call_latest - Call the given function with the most recent value in the main thread using the timer.<ul>\n<li>It is safe to call this many times with the same function.</li>\n<li>If the given function is called multiple times it is only called once with the most recent value.</li>\n</ul>\n</li>\n<li>call_in_main - Call the given function in the main thread using the timer.<ul>\n<li>Every time you call this function the given function will be called in the main thread</li>\n<li>If the given function is called multiple times it will be called every time in the main thread.</li>\n<li>If this function is called too many times it could slow down the main event loop.</li>\n</ul>\n</li>\n<li>register_continuous - Register a function to be called every time the <cite>ThreadUpdater.update</cite> method is called.<ul>\n<li>The <cite>timeout</cite> variable (in seconds) indicates how often the registered functions will be called.</li>\n</ul>\n</li>\n<li>delay - Call a function after the given number of seconds has passed.<ul>\n<li>This will not be accurate. Accuracy can be improved by lowering the timeout to increase how often the timer runs.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"threadupdater-examples\">\n<h2>ThreadUpdater Examples</h2>\n<p>Below are some examples of how the ThreadUpdater would normally be used.</p>\n<div id=\"simple-thread-example\">\n<h3>Simple Thread Example</h3>\n<p>The example below tells the update to run lbl.setText in the main thread with the latest value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater</span> <span class=\"kn\">import</span> <span class=\"n\">get_updater</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QLabel</span><span class=\"p\">(</span><span class=\"s2\">\"Latest Count: 0\"</span><span class=\"p\">)</span>\n<span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Latest Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>\n        <span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">call_latest</span><span class=\"p\">(</span><span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>  <span class=\"c1\"># Not needed (still good to have some delay to release the thread)</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"continuous-update-example\">\n<h3>Continuous Update Example</h3>\n<p>The example below continuously runs the update function every time <cite>ThreadUpdater.update()</cite> is called from the timer.\nThis may be inefficient if there is no new data to update the label with.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater</span> <span class=\"kn\">import</span> <span class=\"n\">get_updater</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">lbl</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QLabel</span><span class=\"p\">(</span><span class=\"s2\">\"Continuous Count: 0\"</span><span class=\"p\">)</span>\n<span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Update the label with the current value.\"\"\"</span>\n    <span class=\"n\">lbl</span><span class=\"o\">.</span><span class=\"n\">setText</span><span class=\"p\">(</span><span class=\"s1\">'Continuous Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]))</span>\n\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">register_continuous</span><span class=\"p\">(</span><span class=\"n\">update</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># time.sleep(0.001)  # Not needed (still good to have some delay to release the thread)</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"call-in-main-example\">\n<h3>Call In Main Example</h3>\n<p>The example below calls the append function every time. It may not be efficient.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater</span> <span class=\"kn\">import</span> <span class=\"n\">get_updater</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">text_edit</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QTextEdit</span><span class=\"p\">()</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">setReadOnly</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Main Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>\n        <span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">call_in_main</span><span class=\"p\">(</span><span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>  <span class=\"c1\"># Some delay/waiting is required</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"delay-example\">\n<h3>Delay Example</h3>\n<p>The example below calls the append function after X number of seconds has passed. The delay function will not be\naccurate, but guarantees that the function is called after X number of seconds. To increase accuracy give the\n<cite>ThreadUpdater</cite> a smaller timeout for it to run at a faster rate.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater</span> <span class=\"kn\">import</span> <span class=\"n\">get_updater</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">text_edit</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QTextEdit</span><span class=\"p\">()</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">setReadOnly</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">update_text</span><span class=\"p\">(</span><span class=\"n\">set_time</span><span class=\"p\">):</span>\n    <span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'Requested </span><span class=\"si\">{:.04f}</span><span class=\"s1\"> Updated </span><span class=\"si\">{:.04f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">set_time</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">now</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Lower the timeout so it runs at a faster rate.</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># 0.0001  # Qt runs in milliseconds</span>\n\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span>\n<span class=\"n\">get_updater</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">update_text</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"widgets\">\n<h2>Widgets</h2>\n<p>I\u2019ve decdied to include a couple of useful Qt Widgets with this library.</p>\n<blockquote>\n<ul>\n<li>QuickPlainTextEdit - Used to display fast streams of data</li>\n<li>QuickTextEdit - Display fast streams of data with color.</li>\n</ul>\n</blockquote>\n<div id=\"quickplaintextedit\">\n<h3>QuickPlainTextEdit</h3>\n<p>Quickly display data from a separate thread.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater.widgets.quick_text_edit</span> <span class=\"kn\">import</span> <span class=\"n\">QuickPlainTextEdit</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">text_edit</span> <span class=\"o\">=</span> <span class=\"n\">QuickPlainTextEdit</span><span class=\"p\">()</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Main Count: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>\n        <span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>  <span class=\"c1\"># Some delay is usually required to let the Qt event loop run (not needed if IO used)</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"quicktextedit\">\n<h3>QuickTextEdit</h3>\n<p>Quickly display data from a separate thread using color.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater.widgets.quick_text_edit</span> <span class=\"kn\">import</span> <span class=\"n\">QuickTextEdit</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">text_edit</span> <span class=\"o\">=</span> <span class=\"n\">QuickTextEdit</span><span class=\"p\">()</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Main Count: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>\n        <span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s1\">'blue'</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.0001</span><span class=\"p\">)</span>  <span class=\"c1\"># Some delay is usually required to let the Qt event loop run (not needed if IO used)</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"quicktextedit-redirect\">\n<h3>QuickTextEdit Redirect</h3>\n<p>Display print (stdout and stderr) in a QTextEdit with color.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qtpy</span> <span class=\"kn\">import</span> <span class=\"n\">QtWidgets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">qt_thread_updater.widgets.quick_text_edit</span> <span class=\"kn\">import</span> <span class=\"n\">QuickTextEdit</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">QtWidgets</span><span class=\"o\">.</span><span class=\"n\">QApplication</span><span class=\"p\">([])</span>\n\n<span class=\"n\">text_edit</span> <span class=\"o\">=</span> <span class=\"n\">QuickTextEdit</span><span class=\"p\">()</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">resize</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n<span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"n\">iostream</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">__stdout__</span><span class=\"p\">)</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">text_edit</span><span class=\"o\">.</span><span class=\"n\">redirect</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'red'</span><span class=\"p\">,</span> <span class=\"n\">iostream</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">__stderr__</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'counter'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">is_alive</span><span class=\"p\">):</span>\n    <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">while</span> <span class=\"n\">is_alive</span><span class=\"o\">.</span><span class=\"n\">is_set</span><span class=\"p\">():</span>\n        <span class=\"n\">stdout_text</span> <span class=\"o\">=</span> <span class=\"s1\">'Main Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>  <span class=\"c1\"># Print gives \\n automatically</span>\n        <span class=\"n\">error_text</span> <span class=\"o\">=</span> <span class=\"s1\">'Error Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">])</span>  <span class=\"c1\"># Print gives \\n automatically</span>\n\n        <span class=\"c1\"># Print automatically give '\\n' with the \"end\" keyword argument.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stdout_text</span><span class=\"p\">)</span>  <span class=\"c1\"># Print will write to sys.stdout where the rediect will write to text_edit and stdout</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error_text</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>  <span class=\"c1\"># Print to sys.stderr. Rediect will write to text_edit and stderr</span>\n\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'counter'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"c1\"># Some delay is usually desired. print/sys.__stdout__ uses IO which gives time for Qt's event loop.</span>\n        <span class=\"c1\"># time.sleep(0.0001)</span>\n\n<span class=\"n\">alive</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">()</span>\n<span class=\"n\">th</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">alive</span><span class=\"p\">,))</span>\n<span class=\"n\">th</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">exec_</span><span class=\"p\">()</span>\n<span class=\"n\">alive</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6990747, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "38a007dab1ce2ce8301a31bd1fb7b7ae", "sha256": "ac138c89f9639cc3af256a53e989d5a4e2b249b11d375ebe1ece342c83e93887"}, "downloads": -1, "filename": "qt_thread_updater-0.0.1.tar.gz", "has_sig": false, "md5_digest": "38a007dab1ce2ce8301a31bd1fb7b7ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6691, "upload_time": "2020-04-08T02:34:45", "upload_time_iso_8601": "2020-04-08T02:34:45.252678Z", "url": "https://files.pythonhosted.org/packages/c4/26/3c4b976963249977c879613be4f687e1f0a2375cab9a268a048e7adb7da0/qt_thread_updater-0.0.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "26a56e7f9fb58f7dd2899932e3f815ce", "sha256": "f6186174dbc202b132fb365860106a9c4e450a8053e71ec73eff8c26120cc3f6"}, "downloads": -1, "filename": "qt_thread_updater-1.0.0.tar.gz", "has_sig": false, "md5_digest": "26a56e7f9fb58f7dd2899932e3f815ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8605, "upload_time": "2020-04-09T20:26:46", "upload_time_iso_8601": "2020-04-09T20:26:46.309953Z", "url": "https://files.pythonhosted.org/packages/1f/46/2fe76da6bf06b60da6a585f28abb8ce73053b56e83075fe706036ccc9b71/qt_thread_updater-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "51e0e6393158f818211be42cc7ec9a00", "sha256": "440a68f215a1b0f02bc335093899dcc45acf6853ac57eae7f8ed31b11c0490ff"}, "downloads": -1, "filename": "qt_thread_updater-1.1.0.tar.gz", "has_sig": false, "md5_digest": "51e0e6393158f818211be42cc7ec9a00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13489, "upload_time": "2020-04-10T04:26:46", "upload_time_iso_8601": "2020-04-10T04:26:46.320319Z", "url": "https://files.pythonhosted.org/packages/03/a5/201dd987ae2ecaaf6fca9b479553c2fa07dca8dc86edc61f9fb69ce7b8a0/qt_thread_updater-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51e0e6393158f818211be42cc7ec9a00", "sha256": "440a68f215a1b0f02bc335093899dcc45acf6853ac57eae7f8ed31b11c0490ff"}, "downloads": -1, "filename": "qt_thread_updater-1.1.0.tar.gz", "has_sig": false, "md5_digest": "51e0e6393158f818211be42cc7ec9a00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13489, "upload_time": "2020-04-10T04:26:46", "upload_time_iso_8601": "2020-04-10T04:26:46.320319Z", "url": "https://files.pythonhosted.org/packages/03/a5/201dd987ae2ecaaf6fca9b479553c2fa07dca8dc86edc61f9fb69ce7b8a0/qt_thread_updater-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:05 2020"}