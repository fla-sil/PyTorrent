{"info": {"author": "DMTF, https://www.dmtf.org/standards/feedback", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Copyright 2016-2018 DMTF. All rights reserved.\n\n# redfishtool\n\n## About\n\n***redfishtool*** is a commandline tool that implements the client side of the Redfish RESTful API for Data Center Hardware Management.\n\n**Redfish** is the new RESTful API for hardware management defined by the DMTF Scalable Platform Management Forum (SPMF).  It provides a modern, secure, multi-node, extendable interface for doing hardware management.  The initial release included hardware inventory, server power-on/off/reset, reading power draw, setting power limits, reading sensors such as fans, read/write of ID LEDs, asset tags, and went beyond IPMI in functionality to include inventory of processors, storage, Ethernet controllers, and total memory.  New Redfish extensions have now been added to the spec and include firmware update, BIOS config, memory inventory, direct attached storage control, and the list grows.\n\n***redfishtool*** makes it simple to use the Redfish API from a BASH script or interactively from a client command shell.\n\nWhile other generic HTTP clients such as Linux curl can send and receive Redfish requests, ***redfishtool*** goes well beyond these generic HTTP clients by automatically handling many of the hypermedia and Redfish-specific protocol aspects of the Redfish API that require a client to often execute multiple queries to a redfish service to walk the hypermedia links from the redfish root down to the detailed URI of a specific resource (eg Processor-2 of Blade-4 in a computer blade system).  Specifically, redfishtool provides the following functions over curl:\n\n* implements Redfish Session Authentication as well as HTTP Basic Auth\n* walks the Redfish schema following strict interoperpbility processors...] to find find the targeted instance based on Id, UUID, URL or other attributes\n* handles GETs for collections that are returned in multiple pieces--requiring client to read in a loop until the full collection is returned\n* handles ETag and If-Match headers when PATCHing a resource to write properties\n* implements many common set or action operations with simple commandline syntax (eg server reset, setting LEDs, assetTag, powerLimits, etc)\n* negotiates the latest redfish protocol version between client and service (demonstrating the proper way to do this)\n* can read specific properties of a resource, or expand collections to include all members of the collection expanded\n* supports adding and deleting users, and common Redfish account service operations\n* For debug, provides multiple levels of verbose output to add descriptive headers, and show what HTTP requests are being executed\n* For debug, includes multiple levels of status display showing HTTP status codes and headers returned and sent \n* For easy parsing, outputs all responses in JSON format unless verbose or status debug options were specified \n\n\n## Why redfishtool?\n\n1. ***redfishtool*** was originally written during the development of the Redfish specification to help find ambiguities in the spec.\n1. ***redfishtool*** is now also being used to test inter-operability between redfish service implementations.\n1. In addition, ***redfishtool*** provides an example implementation for how a client can execute common server management functions like inventory; power-on/off/reset; setting power limits, indicator LEDs, and AssetTags, and searching a multi-node redfish service to find a specific node (with specific UUID, redfish Id, etc).  redfishtool follows strict rules of interoperability.  To support this goal, liberal comments are added throughout code to explain why each step is being executed.\n1. As described above, it makes it easy to use the Redfish API from a BASH script, or as an easy-to-use interactive CLI -- but WITHOUIT creating a 'new API'.   All (rather most) of the responses from ***redfishtool*** are Redfish-defined responses.  The properties and resources are defined in the redfish spec.   ***redfishtool*** is just a tool to access the Redfish API-not a new interface itself.\n    * The execption is that a 'list' operation was added for all collections to display the key properties for each of the members--rather than just the URIs to the members.\n\n\n## Installation\n`redfishtool` can be installed via [pip](https://pip.pypa.io/en/stable/).\n\n```\npip install redfishtool\n```\n\n\n## Requirements\n\n***redfishtool*** is based on Python 3 and the client system is required to have the Python framework installed before the tool can be installed and executed on the system.\n\nIf cloning the tool from Github, as opposed to performing the installation via pip, the following packages are required to be installed and accessible from the python environment:\n\n* requests - [https://github.com/psf/requests]()\n* python-dateutil - [https://github.com/dateutil/dateutil]()\n\nYou may install the required packages by running:\n\n    pip install -r requirements.txt\n\n\n## Usage\n\n***python***  ***redfishtool*** [ ***Options*** ] [ ***SubCommands*** ] [ ***Operation*** ] [ ***OtherArgs*** ]\n\n* ***redfishtool*** is a python3.4+ program.  It uses the python3 \"requests\" lib for sending HTTP requests, and a host of other standard libs in python3.4+\n* The ***redfishtool*** option/optarg parsing strictly follows the well established linux/GNU getopt syntax where arguments and options can be specified in any order, and both short (eg -r <host>) or long (--rhost=<host>) syntax is supported.\n* ***options*** are used to pass usernames, passwords, Host:port, authentication options, verbose/status flags, and also to specify how to search to find specific collection members (-I <Id>, -a (all), -M <prop>:<val> ).\n* ***subCommands*** indicate the general area of the API (following ipmitool convention), and align with Redfish navigation property names like \"Chassis\", \"Systems\", \"AccountService\", etc.\n* ***Operations*** are specify an action or operation you want to perform like S`ystems setBootOverride` ..., or `Systems reset`.\n* ***OtherArgs*** are any other arguments after the Operation that are sometimes required--like:  `Systems <setBootOverride> <enableValue>` <targetValue>`\n\n### Common OPTIONS:\n\n    -V,          --version           -- show redfishtool version, and exit\n    -h,          --help              -- show Usage, Options, and list of subCommands, and exit\n    -v,          --verbose           -- verbose level, can repeat up to 5 times for more verbose output\n                               -v(header), -vv(+addl info), -vvv(Request trace), -vvvv(+subCmd dbg), -vvvvv(max dbg)\n    -s,          --status            -- status level, can repeat up to 5 times for more status output\n                                -s(http_status), \n                                -ss(+r.url, +r.elapsed executionTime ), \n                                -sss(+request hdrs,data,authType, +response status_code, +response executionTime, \n                                     +login auth token/sessId/sessUri)\n                                -ssss(+response headers), -sssss(+response data\n    -u <user>,   --user=<usernm>     -- username used for remote redfish authentication\n    -p <passwd>, --password=<passwd> -- password used for remote redfish authentication\n    -r <rhost>,  --rhost=<rhost>     -- remote redfish service hostname or IP:port\n    -t <token>,  --token=<token>     -- redfish auth session token-for sessions across multiple calls\n    -q,          --quiet             -- quiet mode--suppress error, warning, and diagnostic messages\n    -c <cfgFile>,--config=<cfgFile>  -- read options (including credentials) from file <cfgFile>\n    -T <timeout>,--Timeout=<timeout> -- timeout in seconds for each http request.  Default=10\n\n    -P <property>, --Prop=<property> -- return only the specified property. Applies only to all \"get\" operations\n    -E, --Entries                    -- Fetch the Logs entries. Applies to Logs sub-command of Systems, Chassis and Managers\n\n\n###### Options used by \"raw\" subcommand:\n\n    -d <data>    --data=<data>       -- the http request \"data\" to send on PATCH,POST,or PUT requests\n\n\n###### Options to specify top-level collection members: eg: `Systems -I <sysId>`\nFor `Systems`, `Managers`, and `Chassis` commands that require specifying a top-level collection member, if no option is specified the default is `--One`.\n\n    -I <Id>, --Id=<Id>               -- Use <Id> to specify the collection member\n    -M <prop>:<val> --Match=<prop>:<val>-- Use <prop>=<val> search to find the collection member\n    -F,  --First                     -- Use the 1st link returned in the collection or 1st \"matching\" link if used with -M\n    -1,  --One                       -- Use the single link returned in the collection. Return error if more than one member exists\n    -a,  --all                       -- Returns all members if the operation is a Get on a top-level collection like Systems\n    -L <Link>,  --Link=<Link>        -- Use <Link> (eg /redfish/v1/Systems/1) to reference the collection member. \n                                     --   If <Link> is not one of the links in the collection, and error is returned.\n\n\n###### Options to specify 2nd-level collection members: eg: `Systems -I<sysId> Processors -i<procId>`\n\n    -i <id>, --id=<id>               -- use <id> to specify the 2nd-level collection member\n    -m <prop>:<val> --match=<prop>:val>--use <prop>=<val> search of 2nd-level collection to specify member\n    -l <link>  --link=<link>         -- Use <link> (eg /redfish/v1/SYstems/1/Processors/1) to reference a 2nd level resource\n                                     --   A -I|M|F|1|L option is still required to specify the link to the top-lvl collection\n    -a,  --all                       -- Returns all members of the 2nd level collection if the operation is a Get on the \n                                     --   2nd level collection (eg Processors). -I|M|F|1|L still specifies the top-lvl collection.\n\n\n###### Additional OPTIONS:\n\n    -W <num>:<connTimeout>,          -- Send up to <num> {GET /redfish} requests with <connTimeout> TCP connection timeout\n          --Wait=<num>:<ConnTimeout> --   before sending subcommand to rhost.  Default is -W 1:3\n    -A <Authn>,   --Auth <Authn>     -- Authentication type to use:  Authn={None|Basic|Session}  Default is Basic\n    -S <Secure>,  --Secure=<Secure>  -- When to use https: (Note: doesn't stop rhost from redirect http to https)\n                                        <Secure>={Always | IfSendingCredentials | IfLoginOrAuthenticatedApi(default) }\n    -R <ver>,  --RedfishVersion=<ver>-- The Major Redfish Protocol version to use: ver={v1(dflt), v<n>, Latest}\n    -C         --CheckRedfishVersion -- tells Redfishtool to execute GET /redfish to verify that the rhost supports\n                                        the specified redfish protocol version before executing a sub-command. \n                                        The -C flag is auto-set if the -R Latest or -W ... options are selected\n    -N,        --NonBlocking         -- Do not wait for asynchronous requests to complete.\n    -H <hdrs>, --Headers=<hdrs>      -- Specify the request header list--overrides defaults. Format \"{ A:B, C:D...}\" \n    -D <flag>,  --Debug=<flag>       -- Flag for dev debug. <flag> is a 32-bit uint: 0x<hex> or <dec> format\n\n\n### Subcommands:\n\n    hello                 -- redfishtool hello world subcommand for dev testing\n    about                 -- display version and other information about this version of redfishtool\n    versions              -- get redfishProtocol versions supported by rhost: GET ^/redfish\n    root   |  serviceRoot -- get serviceRoot resouce: GET ^/redfish/v1/\n    Systems               -- operations on Computer Systems in the /Systems collection \n    Chassis               -- operations on Chassis in the /Chassis collection\n    Managers              -- operations on Managers in the /Managers collection\n    AccountService        -- operations on AccountService including user administration\n    SessionService        -- operations on SessionService including Session login/logout\n    odata                 -- get the Odata Service document: GET ^/redfish/v1/odata\n    metadata              -- get the CSDL metadata document: GET ^/redfish/v1/$metadata\n    raw                   -- subcommand to execute raw http methods(GET,PATCH,POST...) and URIs\n\nFor Subcommand usage, including subcommand Operations and OtherArgs, execute:\n\n    redfishtool <SubCommand> -h  -- usage and options for specific subCommand\n\n### Subcommand Operations and Addl Args\n\n###### Systems Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> Systems -h\n    Usage:\n     redfishtool [OPTNS]  Systems  <operation> [<args>]  -- perform <operation> on the system specified\n    <operations>:\n       [collection]              -- get the main Systems collection. (Default operation if no member specified)\n       [get]                     -- get the computerSystem object. (Default operation if collection member specified)\n       list                      -- list information about the Systems collection members(\"Id\", URI, and AssetTag)\n       patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n       reset <resetType>         -- reset a system.  <resetType>= On,  GracefulShutdown, GracefulRestart, \n                                     ForceRestart, ForceOff, ForceOn, Nmi, PushPowerButton\n       setAssetTag <assetTag>    -- set the system's asset tag \n       setIndicatorLed  <state>  -- set the indicator LED.  <state>=redfish defined values: Off, Lit, Blinking\n       setBootOverride <enabledVal> <targetVal> -- set Boot Override properties. <enabledVal>=Disabled|Once|Continuous\n                                 -- <targetVal> =None|Pxe|Floppy|Cd|Usb|Hdd|BiosSetup|Utilities|Diags|UefiTarget|\n       Processors [list]         -- get the \"Processors\" collection, or list \"id\" and URI of members.\n        Processors [IDOPTN]        --  get the  member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n       Inventory [list]          -- get the \"Inventory\" collection, or list \"id\" and URI of members.\n\n       EthernetInterfaces [list] -- get the \"EthernetInterfaces\" collection, or list \"id\" and URI of members.\n        EthernetInterfaces [IDOPTN]--  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n\n       SimpleStorage [list]      -- get the ComputerSystem \"SimpleStorage\" collection, or list \"id\" and URI of members.\n        SimpleStorage [IDOPTN]     --  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n\n       Logs [list]               -- get the ComputerSystem \"LogServices\" collection , or list \"id\" and URI of members.\n        Logs [IDOPTN]              --  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n       clearLog   <id>           -- clears the log defined by <id>\n       examples                  -- example commands with syntax\n       hello                     -- Systems hello -- debug command\n\n\n###### Chassis Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> Chassis -h\n    Usage:\n     redfishtool [OPTNS]  Chassis  <operation> [<args>]  -- perform <operation> on the Chassis specified \n    <operations>:\n       [collection]              -- get the main Chassis collection. (Default operation if no member specified)\n       [get]                     -- get the Chassis object. (Default operation if collection member specified)\n       list                      -- list information about the Chassis collection members(\"Id\", URI, and AssetTag)\n       patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n       setAssetTag <assetTag>    -- set the Chassis's asset tag \n       setIndicatorLed  <state>  -- set the indicator LED.  <state>=redfish defined values: Off, Lit, Blinking\n       Power                     -- get the full Power resource under a specified Chassis instance.\n       Thermal                   -- get the full Thermal resource under a specified Chassis instance.\n       Sensors                   -- get all sensors\n\n       getPowerReading [-i<indx>] [consumed]-- get powerControl resource w/ power capacity, PowerConsumed, and power limits\n                                    if \"consumed\" keyword is added, then only current usage of powerControl[indx] is returned\n                                    <indx> is the powerControl array index. default is 0.  normally, 0 is the only entry\n       setPowerLimit [-i<indx>] <limit> [<exception> [<correctionTime>]] -- set powerLimit control properties\n                                 <limit>=null disables power limiting. <indx> is the powerControl array indx (dflt=0)\n\n       Logs [list]               -- get the Chassis \"LogServices\" collection , or list \"id\" and URI of members.\n        Logs [IDOPTN]              --  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n       clearLog   <id>           -- clears the log defined by <id>\n       examples                  -- example commands with syntax\n       hello                     -- Chassis hello -- debug command\n\n\n###### Managers Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> Managers -h\n    Usage:\n     redfishtool [OPTNS]  Managers  <operation> [<args>]  -- perform <operation> on the Managers specified \n    <operations>:\n       [collection]              -- get the main Managers collection. (Default operation if no member specified)\n       [get]                     -- get the specified Manager object. (Default operation if collection member specified)\n       list                      -- list information about the Managers collection members(\"Id\", URI, and UUID)\n       patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n       reset <resetType>         -- reset a Manager.  <resetType>= On,  GracefulShutdown, GracefulRestart, \n                                     ForceRestart, ForceOff, ForceOn, Nmi, PushPowerButton\n       setDateTime <dateTimeString>--set the date and time\n       setTimeOffset offset=<offsetString>  --set the time offset w/o changing time setting\n                                              <offsetString> is of form \"[+/-]mm:ss\". Ex: \"-10:01\" \n       NetworkProtocol           -- get the \"NetworkProtocol\" resource under the specified manager.\n       setIpAddress [-i<indx>]... -- set the Manager IP address -NOT IMPLEMENTED YET\n\n       EthernetInterfaces [list] -- get the managers \"EthernetInterfaces\" collection, or list \"id\",URI, Name of members.\n        EthernetInterfaces [IDOPTN]--  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -a #all\n\n       SerialInterfaces [list]   -- get the managers \"SerialInterfaces\" collection, or list \"id\",URI, Name of members.\n        SerialInterfaces [IDOPTN]  --  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n\n       Logs [list]               -- get the Managers \"LogServices\" collection , or list \"id\",URI, Name of members.\n        Logs [IDOPTN]              --  get the member specified by IDOPTN: -i<id>, -m<prop>:<val>, -l<link>, -a #all\n       clearLog   <id>           -- clears the log defined by <id>\n       examples                  -- example commands with syntax\n       hello                     -- Systems hello -- debug command\n\n\n###### AccountService Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> AccountService -h\n    Usage:\n     redfishtool [OPTNS]  AccountService  <operation> [<args>]  -- perform <operation> on the AccountService  \n    <operations>:\n       [get]                     -- get the AccountService object. \n       patch {A: B,C: D,...}     -- patch the AccountService w/ json-formatted {prop: value...} \n       Accounts [list]           -- get the \"Accounts\" collection, or list \"Id\", username, and Url \n         Accounts [IDOPTN]       --   get the member specified by IDOPTN: -i<Id>, -m<prop>:<val>, -l<link>, -a #all\n       Roles [list]              -- get the \"Roles\" collection, or list \"Id\", IsPredefined, and Url \n         Roles [IDOPTN]          --   get the member specified by IDOPTN: -i<Id>, -m<prop>:<val>, -l<link>, -a #all\n       adduser <usernm> <passwd> [<roleId>] -- add a new user to the Accounts collection\n                                 -- <roleId>:{Administrator | Operator | ReadOnlyUser | <a custom roleId}, dflt=Operator\n       deleteuser <usernm>       -- delete an existing user from Accouts collection\n       setpassword  <usernm> <passwd>  -- set (change) the password of an existing user account\n       useradmin <userName> [enable|disable|unlock|[setRoleId <roleId>]] -- enable|disable|unlock.. a user account\n       setusername <id> <userName> -- set UserName for account with given Id\n       examples                  -- example commands with syntax\n       hello                     -- AccountService hello -- debug command\n\n\n###### SessionService Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> SessionService -h\n    Usage:\n     redfishtool [OPTNS]  SessionService  <operation> [<args>]  -- perform <operation> on the SessionService  \n    <operations>:\n       [get]                     -- get the sessionService object. \n       patch {A: B,C: D,...}     -- patch the sessionService w/ json-formatted {prop: value...} \n       setSessionTimeout <timeout> -- patches the SessionTimeout property w/ etag support \n       Sessions [list]           -- get the \"Sessions\" collection, or list \"Id\", username, and Url \n         Sessions [IDOPTN]       --   get the member specified by IDOPTN: -i<Id>, -m<prop>:<val>, -l<link>, -a #all\n       login                     -- sessionLogin.  post to Sessions collection to create a session\n                                     the user is -u<user>, password is -p<password>\n       logout                    -- logout or delete the session by identified by -i<SessionId> or -l<link>\n                                     where <link> is the session path returned in Location from login\n       examples                  -- example commands with syntax\n       hello                     -- Systems hello -- debug command\n\n\n###### raw Operations\n\n    python redfishtool.py -r <rhost> -u <username> -p <password> raw -h\n    Usage:\n     redfishtool [OPTNS] raw <method> <path> \n\n     redfishtool raw -h        # for help\n     redfishtool raw examples  #for example commands\n\n    <method> is one of:  GET, PATCH, POST, DELETE, HEAD, PUT\n    <path> is full URI path to a redfish resource--the full path following <ipaddr:port>, starting with forward slash /\n\n     Common OPTNS:\n     -u <user>,   --user=<usernm>     -- username used for remote redfish authentication\n     -p <passwd>, --password=<passwd> -- password used for remote redfish authentication\n     -t <token>,  --token=<token>    - redfish auth session token-for sessions across multiple calls\n\n     -r <rhost>,  --rhost=<rhost>     -- remote redfish service hostname or IP:port\n     -X <method>  --request=<method>  -- the http method to use. <method>={GET,PATCH,POST,DELETE,HEAD,PUT}. Default=GET\n     -d <data>    --data=<data>       -- the http request \"data\" to send on PATCH,POST,or PUT requests\n     -H <hdrs>, --Headers=<hdrs>      -- Specify the request header list--overrides defaults. Format \"{ A:B, C:D...}\" \n     -S <Secure>,  --Secure=<Secure>  -- When to use https: (Note: doesn't stop rhost from redirect http to https)\n    <operations / methods>:\n       GET             -- HTTP GET method\n       PATCH           -- HTTP PATCH method\n       POST            -- HTTP POST method\n       DELETE          -- HTTP DELETE method\n       HEAD            -- HTTP HEAD method\n       PUT             -- HTTP PUT method\n     examples        -- example raw commands with syntax\n     hello           -- raw hello -- debug command\n\n\n# Example Usage\n\n### System subcommand Examples\n\n    $ python redfishtool.py -r <ip> -u <username> -p <password> Systems examples\n     # Shows the Systems Collection\n     redfishtool -r <ip> -u <username> -p <password> Systems\n\n     # Lists Id, Uri, AssetTag for all systems\n     redfishtool -r <ip> -u <username> -p <password> Systems list\n\n     # Gets the system with Id=<d>\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id>\n\n     # Gets the system with AssetTag=12345\n     redfishtool -r <ip> -u <username> -p <password> Systems -M AssetTag:12345\n\n     # Gets the system at URI=<systemUrl>\n     redfishtool -r <ip> -u <username> -p <password> Systems -L <systemUrl>\n\n     # Gets the first system returned (for debug)\n     redfishtool -r <ip> -u <username> -p <password> Systems -F\n\n     # Gets the first system and verify that there is only one system\n     redfishtool -r <ip> -u <username> -p <password> Systems -1\n\n     # Patches the json-formated {prop: value...} data to the specified system\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id> patch {A: B,C: D,...}\n\n     # Patches the json-formated {prop: value...} data to all systems\n     redfishtool -r <ip> -u <username> -p <password> Systems --all patch {A: B,C: D,...}\n\n     # Resets a system.  <resetType>=the redfish-defined values: On, Off, gracefulOff...\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id> reset <resetType>\n\n     # Resets all systems.  <resetType>=the redfish-defined values: On, Off, gracefulOff...\n     redfishtool -r <ip> -u <username> -p <password> Systems --all reset <resetType>\n\n     # Sets the system's asset tag to <assetTag>\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id> setAssetTag <assetTag>\n\n     # Sets all system's asset tags to <assetTag>\n     redfishtool -r <ip> -u <username> -p <password> Systems --all setAssetTag <assetTag>\n\n     # Sets the indicator LED.  <state>=redfish defined values: Off, Lit, Blinking\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id> setIndicatorLed <state>\n\n     # Sets the indicator LED on all systems. <state>=redfish defined values: Off, Lit, Blinking\n     redfishtool -r <ip> -u <username> -p <password> Systems --all setIndicatorLed <state>\n\n     # Sets Boot Override properties.  <enabledVal>=Disabled|Once|Continuous\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <id> setBootOverride <enabledVal> <targetVal>\n\n     # Sets Boot Override properties on all systems.  <enabledVal>=Disabled|Once|Continuous\n     redfishtool -r <ip> -u <username> -p <password> Systems --all setBootOverride <enabledVal> <targetVal>\n\n     # Gets the Processor Collection\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <Id> Processors\n\n     # Lists Id, Uri, & Socket for all processors in system w/ Id=<Id>\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <Id> Processors list\n\n     # Gets the processor with id=1 in system with Id=<Id>\n     redfishtool -r <ip> -u <username> -p <password> Systems -I <Id> Processors -i 1\n\n     # Gets processor with property Socket=CPU_1, on system at url <sysUrl>\n     redfishtool -r <ip> -u <username> -p <password> Systems -L <sysUrl> Processors -m Socket:CPU_1\n\n     # Gets log member with Id=SEL from the first System\n     redfishtool -r <ip> -u <username> -p <password> Systems -1 Logs -i SEL\n\n     # Gets log entries with Id=SEL from the first System\n     redfishtool -r <ip> -u <username> -p <password> Systems -1 Logs -E -i SEL\n\n     # Gets System inventory\n     redfishtool -r <ip> -u <username> -p <password> Systems Inventory\n\n\n### Chassis subcommand Examples\n\n    $ python redfishtool.py -r <ip> -u <username> -p <password> Chassis examples\n     # Shows the Chassis Collection\n     redfishtool -r <ip> -u <username> -p <password> Chassis\n\n     # Lists Id, Uri, AssetTag for all Chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis list\n\n     # Gets the Chassis with Id=<d>\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <id>\n\n     # Gets the Chassis with AssetTag=12345\n     redfishtool -r <ip> -u <username> -p <password> Chassis -M AssetTag:12345\n\n     # Gets the Chassis at URI=<chassisUrl>\n     redfishtool -r <ip> -u <username> -p <password> Chassis -L <chassisUrl>\n\n     # Gets the first Chassis returned (for debug)\n     redfishtool -r <ip> -u <username> -p <password> Chassis -F\n\n     # Gets the first Chassis and verify that there is only one system\n     redfishtool -r <ip> -u <username> -p <password> Chassis -1\n\n     # Patches the json-formated {prop: value...} data to the specified chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <id> patch {A: B,C: D,...}\n\n     # Patches the json-formated {prop: value...} data to all chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis --all patch {A: B,C: D,...}\n\n     # Sets the chassis's asset tag\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <id> setAssetTag <assetTag>\n\n     # Sets all chassis's asset tags\n     redfishtool -r <ip> -u <username> -p <password> Chassis --all setAssetTag <assetTag>\n\n     # Sets the indicator LED.  <state>=redfish defined values: Off, Lit, Blinking\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <id> setIndicatorLed <state>\n\n     # Sets the indicator LED on all chassis.  <state>=redfish defined values: Off, Lit, Blinking\n     redfishtool -r <ip> -u <username> -p <password> Chassis --all setIndicatorLed <state>\n\n     # Gets the full chassis Power resource\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <Id> Power\n\n     # Gets the full chassis Thermal resource\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <Id> Thermal\n\n     # Gets chassis/Power powerControl[<indx>] resource if optional \"consumed\" arg, then return only the PowerConsumedWatts prop\n     redfishtool -r <ip> -u <username> -p <password> Chassis -I <Id> getPowerReading[-i<indx> [consumed]\n\n     # Sets the power limit\n     redfishtool -r <ip> -u <username> -p <password> Chassis -L<Url> setPowerLimit [-i<indx>] <limit> [<exception> [<correctionTime>]]\n\n     # Sets the power limit on all chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis --all setPowerLimit [-i<indx>] <limit> [<exception> [<correctionTime>]]\n\n     # Gets log member with Id=SEL from the first Chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis -1 Logs -i SEL\n\n     # Gets log entries with Id=SEL from the first Chassis\n     redfishtool -r <ip> -u <username> -p <password> Chassis -1 Logs -E -i SEL\n\n     # Gets all Sensors\n     redfishtool -r <ip> -u <username> -p <password> Chassis Sensors\n\n\n### Managers subcommand Examples\n\n    $ python redfishtool.py -r <ip> -u <username> -p <password> Managers examples\n     # Shows the Managers Collection\n     redfishtool -r <ip> -u <username> -p <password>\n\n     # Lists Id, Uri, AssetTag for all Managers\n     redfishtool -r <ip> -u <username> -p <password> Managers list\n\n     # Gets the Manager with Id=<d>\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <id>\n\n     # Gets the Manager with AssetTag=12345\n     redfishtool -r <ip> -u <username> -p <password> Managers -M AssetTag:12345\n\n     # Gets the Manager at URI=<mgrUrl>\n     redfishtool -r <ip> -u <username> -p <password> Managers -L <mgrUrl>\n\n     # Gets the first Manager returned (for debug)\n     redfishtool -r <ip> -u <username> -p <password> Managers -F\n\n     # Gets the first Manager and verify that there is only one Manager\n     redfishtool -r <ip> -u <username> -p <password> Managers -1\n\n     # Patches the json-formated {prop: value...} data to the object\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <id> patch {A: B,C: D,...}\n\n     # Resets a Manager.  <resetType>=the redfish-defined values: On, Off, gracefulOff...\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <id> reset <resetType>\n\n     # Gets the NetworkProtocol resource under the specified manager\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <Id> NetworkProtocol\n\n     # Lists Id, Uri, and Name for all of the NICs for Manager w/ Id=<Id>\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <Id> EthernetInterfaces list\n\n     # Gets the NIC with id=1 in manager with Id=<Id>\n     redfishtool -r <ip> -u <username> -p <password> Managers -I <Id> EthernetInterfaces -i 1\n\n     # Gets the NIC with MAC AA:BB:CC:DD:EE:FF for manager at url <Url>\n     redfishtool -r <ip> -u <username> -p <password> Managers -L <Url> EthernetInterfaces -m MACAddress:AA:BB:CC:DD:EE:FF\n\n     # Gets log member with Id=SEL from the first Manager\n     redfishtool -r <ip> -u <username> -p <password> Managers -1 Logs -i SEL\n\n     # Gets log entries with Id=SEL from the first Manager\n     redfishtool -r <ip> -u <username> -p <password> Managers -1 Logs -E -i SEL\n\n\n### AccountService subcommand Examples\n\n    $ python redfishtool.py -r <ip> -u <username> -p <password> AccountService examples\n     # Gets the AccountService\n     redfishtool -r <ip> -u <username> -p <password> AccountService\n\n     # Sets the failed login lockout threshold\n     redfishtool -r <ip> -u <username> -p <password> AccountService patch { \"AccountLockoutThreshold\": 5 } ]\n\n     # Gets the Accounts collection\n     redfishtool -r <ip> -u <username> -p <password> AccountService Accounts\n\n     # List Accounts to get Id, username, url for each account\n     redfishtool -r <ip> -u <username> -p <password> AccountService Accounts list\n\n     # Gets the Accounts member with username: john\n     redfishtool -r <ip> -u <username> -p <password> AccountService Accounts -m UserName:john\n\n     # Lists the Roles collection to get RoleId, IsPredefined, & url for each role\n     redfishtool -r <ip> -u <username> -p <password> AccountService Roles list\n\n     # Gets the Roles member with RoleId=Admin\n     redfishtool -r <ip> -u <username> -p <password> AccountService Roles -i Admin\n\n     # Adds the new user (john) w/ passwd \"12345\" and role: Admin\n     redfishtool -r <ip> -u <username> -p <password> AccountService adduser john 12345 Admin\n\n     # Deletes the account with the username \"john\"\n     redfishtool -r <ip> -u <username> -p <password> AccountService deleteuser john\n\n     # Disables the account with the username \"john\"\n     redfishtool -r <ip> -u <username> -p <password> AccountService useradmin john disable\n\n     # Unlocks the account with the username \"john\"\n     redfishtool -r <ip> -u <username> -p <password> AccountService useradmin john unlock\n\n     # Sets the username for account with id=3 to \"alice\"\n     redfishtool -r <ip> -u <username> -p <password> AccountService setusername 3 alice\n\n\n### SessionService subcommand Examples\n\n    $ python redfishtool.py -r <ip> -u <username> -p <password> SessionService examples\n     # Gets the sessionService\n     redfishtool -r <ip> -u <username> -p <password> SessionService\n\n     # Sets the session timeout property\n     redfishtool -r <ip> -u <username> -p <password> SessionService setSessionTimeout <timeout>\n\n     # Gets Sessions collection\n     redfishtool -r <ip> -u <username> -p <password> SessionService Sessions\n\n     # Gets the session at URI=<sessUrl>\n     redfishtool -r <ip> -u <username> -p <password> SessionService Sessions -l <sessUrl>\n\n     # Gets the session with session Id <sessId>\n     redfishtool -r <ip> -u <username> -p <password> SessionService Sessions -i <sessId>\n\n     # Patches the json-formated {prop: value...} data to the sessionService object\n     redfishtool -r <ip> -u <username> -p <password> SessionService patch {A: B,C: D,...}\n\n     # Login (create session)\n     redfishtool -r <ip> -u <username> -p <password> SessionService login -u <user> -p <password>\n\n     # Logout (delete session <sessId>)\n     redfishtool -r <ip> -u <username> -p <password> SessionService logout -i <sessionId>\n\n\n## Running in Windows\n\nIn order for executables to resolve if using Windows, ensure both the \"Python\" and \"Scripts\" folder are included in the PATH environment variable.  For example, if Python is installed to \"C:\\Python\", the PATH environment variable should include \"C:\\Python\" and \"C:\\Python\\scripts\".\n\n\n## Known Issues, and ToDo Enhancements\n\n1. modifications to make PATCH commands work better with Windows cmd shell quoting \n2. support clearlog\n3. add additional APIs that have been added to Redfish after 1.0---this version supports only 1.0 APIs\n4. add custom role create and delete\n\n\n## Release Process\n\n1. Update `CHANGELOG.md` with the list of changes since the last release\n2. Update the `self.version` and `self.releaseDate` variables in `redfishtool/redfishtoolTransport.py` to reflect the new tool version\n3. Update setup.py to reflect the new tool version\n4. Push changes to Github\n5. Create a new release in Github\n6. Push the new tool version to pypi.org\n    * `python setup.py sdist`\n    * `twine upload dist/*`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/DMTF/Redfishtool/archive/1.0.5.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DMTF/Redfishtool", "keywords": "Redfish", "license": "BSD 3-clause \"New\" or \"Revised License\"", "maintainer": "", "maintainer_email": "", "name": "redfishtool", "package_url": "https://pypi.org/project/redfishtool/", "platform": "", "project_url": "https://pypi.org/project/redfishtool/", "project_urls": {"Download": "https://github.com/DMTF/Redfishtool/archive/1.0.5.tar.gz", "Homepage": "https://github.com/DMTF/Redfishtool"}, "release_url": "https://pypi.org/project/redfishtool/1.1.3/", "requires_dist": null, "requires_python": "", "summary": "Redfishtool package and command-line client", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Copyright 2016-2018 DMTF. All rights reserved.</p>\n<h1>redfishtool</h1>\n<h2>About</h2>\n<p><em><strong>redfishtool</strong></em> is a commandline tool that implements the client side of the Redfish RESTful API for Data Center Hardware Management.</p>\n<p><strong>Redfish</strong> is the new RESTful API for hardware management defined by the DMTF Scalable Platform Management Forum (SPMF).  It provides a modern, secure, multi-node, extendable interface for doing hardware management.  The initial release included hardware inventory, server power-on/off/reset, reading power draw, setting power limits, reading sensors such as fans, read/write of ID LEDs, asset tags, and went beyond IPMI in functionality to include inventory of processors, storage, Ethernet controllers, and total memory.  New Redfish extensions have now been added to the spec and include firmware update, BIOS config, memory inventory, direct attached storage control, and the list grows.</p>\n<p><em><strong>redfishtool</strong></em> makes it simple to use the Redfish API from a BASH script or interactively from a client command shell.</p>\n<p>While other generic HTTP clients such as Linux curl can send and receive Redfish requests, <em><strong>redfishtool</strong></em> goes well beyond these generic HTTP clients by automatically handling many of the hypermedia and Redfish-specific protocol aspects of the Redfish API that require a client to often execute multiple queries to a redfish service to walk the hypermedia links from the redfish root down to the detailed URI of a specific resource (eg Processor-2 of Blade-4 in a computer blade system).  Specifically, redfishtool provides the following functions over curl:</p>\n<ul>\n<li>implements Redfish Session Authentication as well as HTTP Basic Auth</li>\n<li>walks the Redfish schema following strict interoperpbility processors...] to find find the targeted instance based on Id, UUID, URL or other attributes</li>\n<li>handles GETs for collections that are returned in multiple pieces--requiring client to read in a loop until the full collection is returned</li>\n<li>handles ETag and If-Match headers when PATCHing a resource to write properties</li>\n<li>implements many common set or action operations with simple commandline syntax (eg server reset, setting LEDs, assetTag, powerLimits, etc)</li>\n<li>negotiates the latest redfish protocol version between client and service (demonstrating the proper way to do this)</li>\n<li>can read specific properties of a resource, or expand collections to include all members of the collection expanded</li>\n<li>supports adding and deleting users, and common Redfish account service operations</li>\n<li>For debug, provides multiple levels of verbose output to add descriptive headers, and show what HTTP requests are being executed</li>\n<li>For debug, includes multiple levels of status display showing HTTP status codes and headers returned and sent</li>\n<li>For easy parsing, outputs all responses in JSON format unless verbose or status debug options were specified</li>\n</ul>\n<h2>Why redfishtool?</h2>\n<ol>\n<li><em><strong>redfishtool</strong></em> was originally written during the development of the Redfish specification to help find ambiguities in the spec.</li>\n<li><em><strong>redfishtool</strong></em> is now also being used to test inter-operability between redfish service implementations.</li>\n<li>In addition, <em><strong>redfishtool</strong></em> provides an example implementation for how a client can execute common server management functions like inventory; power-on/off/reset; setting power limits, indicator LEDs, and AssetTags, and searching a multi-node redfish service to find a specific node (with specific UUID, redfish Id, etc).  redfishtool follows strict rules of interoperability.  To support this goal, liberal comments are added throughout code to explain why each step is being executed.</li>\n<li>As described above, it makes it easy to use the Redfish API from a BASH script, or as an easy-to-use interactive CLI -- but WITHOUIT creating a 'new API'.   All (rather most) of the responses from <em><strong>redfishtool</strong></em> are Redfish-defined responses.  The properties and resources are defined in the redfish spec.   <em><strong>redfishtool</strong></em> is just a tool to access the Redfish API-not a new interface itself.\n<ul>\n<li>The execption is that a 'list' operation was added for all collections to display the key properties for each of the members--rather than just the URIs to the members.</li>\n</ul>\n</li>\n</ol>\n<h2>Installation</h2>\n<p><code>redfishtool</code> can be installed via <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>.</p>\n<pre><code>pip install redfishtool\n</code></pre>\n<h2>Requirements</h2>\n<p><em><strong>redfishtool</strong></em> is based on Python 3 and the client system is required to have the Python framework installed before the tool can be installed and executed on the system.</p>\n<p>If cloning the tool from Github, as opposed to performing the installation via pip, the following packages are required to be installed and accessible from the python environment:</p>\n<ul>\n<li>requests - <a href=\"\" rel=\"nofollow\">https://github.com/psf/requests</a></li>\n<li>python-dateutil - <a href=\"\" rel=\"nofollow\">https://github.com/dateutil/dateutil</a></li>\n</ul>\n<p>You may install the required packages by running:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<h2>Usage</h2>\n<p><em><strong>python</strong></em>  <em><strong>redfishtool</strong></em> [ <em><strong>Options</strong></em> ] [ <em><strong>SubCommands</strong></em> ] [ <em><strong>Operation</strong></em> ] [ <em><strong>OtherArgs</strong></em> ]</p>\n<ul>\n<li><em><strong>redfishtool</strong></em> is a python3.4+ program.  It uses the python3 \"requests\" lib for sending HTTP requests, and a host of other standard libs in python3.4+</li>\n<li>The <em><strong>redfishtool</strong></em> option/optarg parsing strictly follows the well established linux/GNU getopt syntax where arguments and options can be specified in any order, and both short (eg -r &lt;host&gt;) or long (--rhost=&lt;host&gt;) syntax is supported.</li>\n<li><em><strong>options</strong></em> are used to pass usernames, passwords, Host:port, authentication options, verbose/status flags, and also to specify how to search to find specific collection members (-I &lt;Id&gt;, -a (all), -M &lt;prop&gt;:&lt;val&gt; ).</li>\n<li><em><strong>subCommands</strong></em> indicate the general area of the API (following ipmitool convention), and align with Redfish navigation property names like \"Chassis\", \"Systems\", \"AccountService\", etc.</li>\n<li><em><strong>Operations</strong></em> are specify an action or operation you want to perform like S<code>ystems setBootOverride</code> ..., or <code>Systems reset</code>.</li>\n<li><em><strong>OtherArgs</strong></em> are any other arguments after the Operation that are sometimes required--like:  <code>Systems &lt;setBootOverride&gt; &lt;enableValue&gt;</code> &lt;targetValue&gt;`</li>\n</ul>\n<h3>Common OPTIONS:</h3>\n<pre><code>-V,          --version           -- show redfishtool version, and exit\n-h,          --help              -- show Usage, Options, and list of subCommands, and exit\n-v,          --verbose           -- verbose level, can repeat up to 5 times for more verbose output\n                           -v(header), -vv(+addl info), -vvv(Request trace), -vvvv(+subCmd dbg), -vvvvv(max dbg)\n-s,          --status            -- status level, can repeat up to 5 times for more status output\n                            -s(http_status), \n                            -ss(+r.url, +r.elapsed executionTime ), \n                            -sss(+request hdrs,data,authType, +response status_code, +response executionTime, \n                                 +login auth token/sessId/sessUri)\n                            -ssss(+response headers), -sssss(+response data\n-u &lt;user&gt;,   --user=&lt;usernm&gt;     -- username used for remote redfish authentication\n-p &lt;passwd&gt;, --password=&lt;passwd&gt; -- password used for remote redfish authentication\n-r &lt;rhost&gt;,  --rhost=&lt;rhost&gt;     -- remote redfish service hostname or IP:port\n-t &lt;token&gt;,  --token=&lt;token&gt;     -- redfish auth session token-for sessions across multiple calls\n-q,          --quiet             -- quiet mode--suppress error, warning, and diagnostic messages\n-c &lt;cfgFile&gt;,--config=&lt;cfgFile&gt;  -- read options (including credentials) from file &lt;cfgFile&gt;\n-T &lt;timeout&gt;,--Timeout=&lt;timeout&gt; -- timeout in seconds for each http request.  Default=10\n\n-P &lt;property&gt;, --Prop=&lt;property&gt; -- return only the specified property. Applies only to all \"get\" operations\n-E, --Entries                    -- Fetch the Logs entries. Applies to Logs sub-command of Systems, Chassis and Managers\n</code></pre>\n<h6>Options used by \"raw\" subcommand:</h6>\n<pre><code>-d &lt;data&gt;    --data=&lt;data&gt;       -- the http request \"data\" to send on PATCH,POST,or PUT requests\n</code></pre>\n<h6>Options to specify top-level collection members: eg: <code>Systems -I &lt;sysId&gt;</code></h6>\n<p>For <code>Systems</code>, <code>Managers</code>, and <code>Chassis</code> commands that require specifying a top-level collection member, if no option is specified the default is <code>--One</code>.</p>\n<pre><code>-I &lt;Id&gt;, --Id=&lt;Id&gt;               -- Use &lt;Id&gt; to specify the collection member\n-M &lt;prop&gt;:&lt;val&gt; --Match=&lt;prop&gt;:&lt;val&gt;-- Use &lt;prop&gt;=&lt;val&gt; search to find the collection member\n-F,  --First                     -- Use the 1st link returned in the collection or 1st \"matching\" link if used with -M\n-1,  --One                       -- Use the single link returned in the collection. Return error if more than one member exists\n-a,  --all                       -- Returns all members if the operation is a Get on a top-level collection like Systems\n-L &lt;Link&gt;,  --Link=&lt;Link&gt;        -- Use &lt;Link&gt; (eg /redfish/v1/Systems/1) to reference the collection member. \n                                 --   If &lt;Link&gt; is not one of the links in the collection, and error is returned.\n</code></pre>\n<h6>Options to specify 2nd-level collection members: eg: <code>Systems -I&lt;sysId&gt; Processors -i&lt;procId&gt;</code></h6>\n<pre><code>-i &lt;id&gt;, --id=&lt;id&gt;               -- use &lt;id&gt; to specify the 2nd-level collection member\n-m &lt;prop&gt;:&lt;val&gt; --match=&lt;prop&gt;:val&gt;--use &lt;prop&gt;=&lt;val&gt; search of 2nd-level collection to specify member\n-l &lt;link&gt;  --link=&lt;link&gt;         -- Use &lt;link&gt; (eg /redfish/v1/SYstems/1/Processors/1) to reference a 2nd level resource\n                                 --   A -I|M|F|1|L option is still required to specify the link to the top-lvl collection\n-a,  --all                       -- Returns all members of the 2nd level collection if the operation is a Get on the \n                                 --   2nd level collection (eg Processors). -I|M|F|1|L still specifies the top-lvl collection.\n</code></pre>\n<h6>Additional OPTIONS:</h6>\n<pre><code>-W &lt;num&gt;:&lt;connTimeout&gt;,          -- Send up to &lt;num&gt; {GET /redfish} requests with &lt;connTimeout&gt; TCP connection timeout\n      --Wait=&lt;num&gt;:&lt;ConnTimeout&gt; --   before sending subcommand to rhost.  Default is -W 1:3\n-A &lt;Authn&gt;,   --Auth &lt;Authn&gt;     -- Authentication type to use:  Authn={None|Basic|Session}  Default is Basic\n-S &lt;Secure&gt;,  --Secure=&lt;Secure&gt;  -- When to use https: (Note: doesn't stop rhost from redirect http to https)\n                                    &lt;Secure&gt;={Always | IfSendingCredentials | IfLoginOrAuthenticatedApi(default) }\n-R &lt;ver&gt;,  --RedfishVersion=&lt;ver&gt;-- The Major Redfish Protocol version to use: ver={v1(dflt), v&lt;n&gt;, Latest}\n-C         --CheckRedfishVersion -- tells Redfishtool to execute GET /redfish to verify that the rhost supports\n                                    the specified redfish protocol version before executing a sub-command. \n                                    The -C flag is auto-set if the -R Latest or -W ... options are selected\n-N,        --NonBlocking         -- Do not wait for asynchronous requests to complete.\n-H &lt;hdrs&gt;, --Headers=&lt;hdrs&gt;      -- Specify the request header list--overrides defaults. Format \"{ A:B, C:D...}\" \n-D &lt;flag&gt;,  --Debug=&lt;flag&gt;       -- Flag for dev debug. &lt;flag&gt; is a 32-bit uint: 0x&lt;hex&gt; or &lt;dec&gt; format\n</code></pre>\n<h3>Subcommands:</h3>\n<pre><code>hello                 -- redfishtool hello world subcommand for dev testing\nabout                 -- display version and other information about this version of redfishtool\nversions              -- get redfishProtocol versions supported by rhost: GET ^/redfish\nroot   |  serviceRoot -- get serviceRoot resouce: GET ^/redfish/v1/\nSystems               -- operations on Computer Systems in the /Systems collection \nChassis               -- operations on Chassis in the /Chassis collection\nManagers              -- operations on Managers in the /Managers collection\nAccountService        -- operations on AccountService including user administration\nSessionService        -- operations on SessionService including Session login/logout\nodata                 -- get the Odata Service document: GET ^/redfish/v1/odata\nmetadata              -- get the CSDL metadata document: GET ^/redfish/v1/$metadata\nraw                   -- subcommand to execute raw http methods(GET,PATCH,POST...) and URIs\n</code></pre>\n<p>For Subcommand usage, including subcommand Operations and OtherArgs, execute:</p>\n<pre><code>redfishtool &lt;SubCommand&gt; -h  -- usage and options for specific subCommand\n</code></pre>\n<h3>Subcommand Operations and Addl Args</h3>\n<h6>Systems Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -h\nUsage:\n redfishtool [OPTNS]  Systems  &lt;operation&gt; [&lt;args&gt;]  -- perform &lt;operation&gt; on the system specified\n&lt;operations&gt;:\n   [collection]              -- get the main Systems collection. (Default operation if no member specified)\n   [get]                     -- get the computerSystem object. (Default operation if collection member specified)\n   list                      -- list information about the Systems collection members(\"Id\", URI, and AssetTag)\n   patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n   reset &lt;resetType&gt;         -- reset a system.  &lt;resetType&gt;= On,  GracefulShutdown, GracefulRestart, \n                                 ForceRestart, ForceOff, ForceOn, Nmi, PushPowerButton\n   setAssetTag &lt;assetTag&gt;    -- set the system's asset tag \n   setIndicatorLed  &lt;state&gt;  -- set the indicator LED.  &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n   setBootOverride &lt;enabledVal&gt; &lt;targetVal&gt; -- set Boot Override properties. &lt;enabledVal&gt;=Disabled|Once|Continuous\n                             -- &lt;targetVal&gt; =None|Pxe|Floppy|Cd|Usb|Hdd|BiosSetup|Utilities|Diags|UefiTarget|\n   Processors [list]         -- get the \"Processors\" collection, or list \"id\" and URI of members.\n    Processors [IDOPTN]        --  get the  member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   Inventory [list]          -- get the \"Inventory\" collection, or list \"id\" and URI of members.\n\n   EthernetInterfaces [list] -- get the \"EthernetInterfaces\" collection, or list \"id\" and URI of members.\n    EthernetInterfaces [IDOPTN]--  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n\n   SimpleStorage [list]      -- get the ComputerSystem \"SimpleStorage\" collection, or list \"id\" and URI of members.\n    SimpleStorage [IDOPTN]     --  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n\n   Logs [list]               -- get the ComputerSystem \"LogServices\" collection , or list \"id\" and URI of members.\n    Logs [IDOPTN]              --  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   clearLog   &lt;id&gt;           -- clears the log defined by &lt;id&gt;\n   examples                  -- example commands with syntax\n   hello                     -- Systems hello -- debug command\n</code></pre>\n<h6>Chassis Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -h\nUsage:\n redfishtool [OPTNS]  Chassis  &lt;operation&gt; [&lt;args&gt;]  -- perform &lt;operation&gt; on the Chassis specified \n&lt;operations&gt;:\n   [collection]              -- get the main Chassis collection. (Default operation if no member specified)\n   [get]                     -- get the Chassis object. (Default operation if collection member specified)\n   list                      -- list information about the Chassis collection members(\"Id\", URI, and AssetTag)\n   patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n   setAssetTag &lt;assetTag&gt;    -- set the Chassis's asset tag \n   setIndicatorLed  &lt;state&gt;  -- set the indicator LED.  &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n   Power                     -- get the full Power resource under a specified Chassis instance.\n   Thermal                   -- get the full Thermal resource under a specified Chassis instance.\n   Sensors                   -- get all sensors\n\n   getPowerReading [-i&lt;indx&gt;] [consumed]-- get powerControl resource w/ power capacity, PowerConsumed, and power limits\n                                if \"consumed\" keyword is added, then only current usage of powerControl[indx] is returned\n                                &lt;indx&gt; is the powerControl array index. default is 0.  normally, 0 is the only entry\n   setPowerLimit [-i&lt;indx&gt;] &lt;limit&gt; [&lt;exception&gt; [&lt;correctionTime&gt;]] -- set powerLimit control properties\n                             &lt;limit&gt;=null disables power limiting. &lt;indx&gt; is the powerControl array indx (dflt=0)\n\n   Logs [list]               -- get the Chassis \"LogServices\" collection , or list \"id\" and URI of members.\n    Logs [IDOPTN]              --  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   clearLog   &lt;id&gt;           -- clears the log defined by &lt;id&gt;\n   examples                  -- example commands with syntax\n   hello                     -- Chassis hello -- debug command\n</code></pre>\n<h6>Managers Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -h\nUsage:\n redfishtool [OPTNS]  Managers  &lt;operation&gt; [&lt;args&gt;]  -- perform &lt;operation&gt; on the Managers specified \n&lt;operations&gt;:\n   [collection]              -- get the main Managers collection. (Default operation if no member specified)\n   [get]                     -- get the specified Manager object. (Default operation if collection member specified)\n   list                      -- list information about the Managers collection members(\"Id\", URI, and UUID)\n   patch {A: B,C: D,...}     -- patch the json-formatted {prop: value...} data to the object\n   reset &lt;resetType&gt;         -- reset a Manager.  &lt;resetType&gt;= On,  GracefulShutdown, GracefulRestart, \n                                 ForceRestart, ForceOff, ForceOn, Nmi, PushPowerButton\n   setDateTime &lt;dateTimeString&gt;--set the date and time\n   setTimeOffset offset=&lt;offsetString&gt;  --set the time offset w/o changing time setting\n                                          &lt;offsetString&gt; is of form \"[+/-]mm:ss\". Ex: \"-10:01\" \n   NetworkProtocol           -- get the \"NetworkProtocol\" resource under the specified manager.\n   setIpAddress [-i&lt;indx&gt;]... -- set the Manager IP address -NOT IMPLEMENTED YET\n\n   EthernetInterfaces [list] -- get the managers \"EthernetInterfaces\" collection, or list \"id\",URI, Name of members.\n    EthernetInterfaces [IDOPTN]--  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -a #all\n\n   SerialInterfaces [list]   -- get the managers \"SerialInterfaces\" collection, or list \"id\",URI, Name of members.\n    SerialInterfaces [IDOPTN]  --  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n\n   Logs [list]               -- get the Managers \"LogServices\" collection , or list \"id\",URI, Name of members.\n    Logs [IDOPTN]              --  get the member specified by IDOPTN: -i&lt;id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   clearLog   &lt;id&gt;           -- clears the log defined by &lt;id&gt;\n   examples                  -- example commands with syntax\n   hello                     -- Systems hello -- debug command\n</code></pre>\n<h6>AccountService Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService -h\nUsage:\n redfishtool [OPTNS]  AccountService  &lt;operation&gt; [&lt;args&gt;]  -- perform &lt;operation&gt; on the AccountService  \n&lt;operations&gt;:\n   [get]                     -- get the AccountService object. \n   patch {A: B,C: D,...}     -- patch the AccountService w/ json-formatted {prop: value...} \n   Accounts [list]           -- get the \"Accounts\" collection, or list \"Id\", username, and Url \n     Accounts [IDOPTN]       --   get the member specified by IDOPTN: -i&lt;Id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   Roles [list]              -- get the \"Roles\" collection, or list \"Id\", IsPredefined, and Url \n     Roles [IDOPTN]          --   get the member specified by IDOPTN: -i&lt;Id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   adduser &lt;usernm&gt; &lt;passwd&gt; [&lt;roleId&gt;] -- add a new user to the Accounts collection\n                             -- &lt;roleId&gt;:{Administrator | Operator | ReadOnlyUser | &lt;a custom roleId}, dflt=Operator\n   deleteuser &lt;usernm&gt;       -- delete an existing user from Accouts collection\n   setpassword  &lt;usernm&gt; &lt;passwd&gt;  -- set (change) the password of an existing user account\n   useradmin &lt;userName&gt; [enable|disable|unlock|[setRoleId &lt;roleId&gt;]] -- enable|disable|unlock.. a user account\n   setusername &lt;id&gt; &lt;userName&gt; -- set UserName for account with given Id\n   examples                  -- example commands with syntax\n   hello                     -- AccountService hello -- debug command\n</code></pre>\n<h6>SessionService Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService -h\nUsage:\n redfishtool [OPTNS]  SessionService  &lt;operation&gt; [&lt;args&gt;]  -- perform &lt;operation&gt; on the SessionService  \n&lt;operations&gt;:\n   [get]                     -- get the sessionService object. \n   patch {A: B,C: D,...}     -- patch the sessionService w/ json-formatted {prop: value...} \n   setSessionTimeout &lt;timeout&gt; -- patches the SessionTimeout property w/ etag support \n   Sessions [list]           -- get the \"Sessions\" collection, or list \"Id\", username, and Url \n     Sessions [IDOPTN]       --   get the member specified by IDOPTN: -i&lt;Id&gt;, -m&lt;prop&gt;:&lt;val&gt;, -l&lt;link&gt;, -a #all\n   login                     -- sessionLogin.  post to Sessions collection to create a session\n                                 the user is -u&lt;user&gt;, password is -p&lt;password&gt;\n   logout                    -- logout or delete the session by identified by -i&lt;SessionId&gt; or -l&lt;link&gt;\n                                 where &lt;link&gt; is the session path returned in Location from login\n   examples                  -- example commands with syntax\n   hello                     -- Systems hello -- debug command\n</code></pre>\n<h6>raw Operations</h6>\n<pre><code>python redfishtool.py -r &lt;rhost&gt; -u &lt;username&gt; -p &lt;password&gt; raw -h\nUsage:\n redfishtool [OPTNS] raw &lt;method&gt; &lt;path&gt; \n\n redfishtool raw -h        # for help\n redfishtool raw examples  #for example commands\n\n&lt;method&gt; is one of:  GET, PATCH, POST, DELETE, HEAD, PUT\n&lt;path&gt; is full URI path to a redfish resource--the full path following &lt;ipaddr:port&gt;, starting with forward slash /\n\n Common OPTNS:\n -u &lt;user&gt;,   --user=&lt;usernm&gt;     -- username used for remote redfish authentication\n -p &lt;passwd&gt;, --password=&lt;passwd&gt; -- password used for remote redfish authentication\n -t &lt;token&gt;,  --token=&lt;token&gt;    - redfish auth session token-for sessions across multiple calls\n\n -r &lt;rhost&gt;,  --rhost=&lt;rhost&gt;     -- remote redfish service hostname or IP:port\n -X &lt;method&gt;  --request=&lt;method&gt;  -- the http method to use. &lt;method&gt;={GET,PATCH,POST,DELETE,HEAD,PUT}. Default=GET\n -d &lt;data&gt;    --data=&lt;data&gt;       -- the http request \"data\" to send on PATCH,POST,or PUT requests\n -H &lt;hdrs&gt;, --Headers=&lt;hdrs&gt;      -- Specify the request header list--overrides defaults. Format \"{ A:B, C:D...}\" \n -S &lt;Secure&gt;,  --Secure=&lt;Secure&gt;  -- When to use https: (Note: doesn't stop rhost from redirect http to https)\n&lt;operations / methods&gt;:\n   GET             -- HTTP GET method\n   PATCH           -- HTTP PATCH method\n   POST            -- HTTP POST method\n   DELETE          -- HTTP DELETE method\n   HEAD            -- HTTP HEAD method\n   PUT             -- HTTP PUT method\n examples        -- example raw commands with syntax\n hello           -- raw hello -- debug command\n</code></pre>\n<h1>Example Usage</h1>\n<h3>System subcommand Examples</h3>\n<pre><code>$ python redfishtool.py -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems examples\n # Shows the Systems Collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems\n\n # Lists Id, Uri, AssetTag for all systems\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems list\n\n # Gets the system with Id=&lt;d&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt;\n\n # Gets the system with AssetTag=12345\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -M AssetTag:12345\n\n # Gets the system at URI=&lt;systemUrl&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -L &lt;systemUrl&gt;\n\n # Gets the first system returned (for debug)\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -F\n\n # Gets the first system and verify that there is only one system\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -1\n\n # Patches the json-formated {prop: value...} data to the specified system\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt; patch {A: B,C: D,...}\n\n # Patches the json-formated {prop: value...} data to all systems\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems --all patch {A: B,C: D,...}\n\n # Resets a system.  &lt;resetType&gt;=the redfish-defined values: On, Off, gracefulOff...\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt; reset &lt;resetType&gt;\n\n # Resets all systems.  &lt;resetType&gt;=the redfish-defined values: On, Off, gracefulOff...\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems --all reset &lt;resetType&gt;\n\n # Sets the system's asset tag to &lt;assetTag&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt; setAssetTag &lt;assetTag&gt;\n\n # Sets all system's asset tags to &lt;assetTag&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems --all setAssetTag &lt;assetTag&gt;\n\n # Sets the indicator LED.  &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt; setIndicatorLed &lt;state&gt;\n\n # Sets the indicator LED on all systems. &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems --all setIndicatorLed &lt;state&gt;\n\n # Sets Boot Override properties.  &lt;enabledVal&gt;=Disabled|Once|Continuous\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;id&gt; setBootOverride &lt;enabledVal&gt; &lt;targetVal&gt;\n\n # Sets Boot Override properties on all systems.  &lt;enabledVal&gt;=Disabled|Once|Continuous\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems --all setBootOverride &lt;enabledVal&gt; &lt;targetVal&gt;\n\n # Gets the Processor Collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;Id&gt; Processors\n\n # Lists Id, Uri, &amp; Socket for all processors in system w/ Id=&lt;Id&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;Id&gt; Processors list\n\n # Gets the processor with id=1 in system with Id=&lt;Id&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -I &lt;Id&gt; Processors -i 1\n\n # Gets processor with property Socket=CPU_1, on system at url &lt;sysUrl&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -L &lt;sysUrl&gt; Processors -m Socket:CPU_1\n\n # Gets log member with Id=SEL from the first System\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -1 Logs -i SEL\n\n # Gets log entries with Id=SEL from the first System\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems -1 Logs -E -i SEL\n\n # Gets System inventory\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Systems Inventory\n</code></pre>\n<h3>Chassis subcommand Examples</h3>\n<pre><code>$ python redfishtool.py -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis examples\n # Shows the Chassis Collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis\n\n # Lists Id, Uri, AssetTag for all Chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis list\n\n # Gets the Chassis with Id=&lt;d&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;id&gt;\n\n # Gets the Chassis with AssetTag=12345\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -M AssetTag:12345\n\n # Gets the Chassis at URI=&lt;chassisUrl&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -L &lt;chassisUrl&gt;\n\n # Gets the first Chassis returned (for debug)\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -F\n\n # Gets the first Chassis and verify that there is only one system\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -1\n\n # Patches the json-formated {prop: value...} data to the specified chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;id&gt; patch {A: B,C: D,...}\n\n # Patches the json-formated {prop: value...} data to all chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis --all patch {A: B,C: D,...}\n\n # Sets the chassis's asset tag\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;id&gt; setAssetTag &lt;assetTag&gt;\n\n # Sets all chassis's asset tags\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis --all setAssetTag &lt;assetTag&gt;\n\n # Sets the indicator LED.  &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;id&gt; setIndicatorLed &lt;state&gt;\n\n # Sets the indicator LED on all chassis.  &lt;state&gt;=redfish defined values: Off, Lit, Blinking\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis --all setIndicatorLed &lt;state&gt;\n\n # Gets the full chassis Power resource\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;Id&gt; Power\n\n # Gets the full chassis Thermal resource\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;Id&gt; Thermal\n\n # Gets chassis/Power powerControl[&lt;indx&gt;] resource if optional \"consumed\" arg, then return only the PowerConsumedWatts prop\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -I &lt;Id&gt; getPowerReading[-i&lt;indx&gt; [consumed]\n\n # Sets the power limit\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -L&lt;Url&gt; setPowerLimit [-i&lt;indx&gt;] &lt;limit&gt; [&lt;exception&gt; [&lt;correctionTime&gt;]]\n\n # Sets the power limit on all chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis --all setPowerLimit [-i&lt;indx&gt;] &lt;limit&gt; [&lt;exception&gt; [&lt;correctionTime&gt;]]\n\n # Gets log member with Id=SEL from the first Chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -1 Logs -i SEL\n\n # Gets log entries with Id=SEL from the first Chassis\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis -1 Logs -E -i SEL\n\n # Gets all Sensors\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Chassis Sensors\n</code></pre>\n<h3>Managers subcommand Examples</h3>\n<pre><code>$ python redfishtool.py -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers examples\n # Shows the Managers Collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt;\n\n # Lists Id, Uri, AssetTag for all Managers\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers list\n\n # Gets the Manager with Id=&lt;d&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;id&gt;\n\n # Gets the Manager with AssetTag=12345\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -M AssetTag:12345\n\n # Gets the Manager at URI=&lt;mgrUrl&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -L &lt;mgrUrl&gt;\n\n # Gets the first Manager returned (for debug)\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -F\n\n # Gets the first Manager and verify that there is only one Manager\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -1\n\n # Patches the json-formated {prop: value...} data to the object\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;id&gt; patch {A: B,C: D,...}\n\n # Resets a Manager.  &lt;resetType&gt;=the redfish-defined values: On, Off, gracefulOff...\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;id&gt; reset &lt;resetType&gt;\n\n # Gets the NetworkProtocol resource under the specified manager\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;Id&gt; NetworkProtocol\n\n # Lists Id, Uri, and Name for all of the NICs for Manager w/ Id=&lt;Id&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;Id&gt; EthernetInterfaces list\n\n # Gets the NIC with id=1 in manager with Id=&lt;Id&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -I &lt;Id&gt; EthernetInterfaces -i 1\n\n # Gets the NIC with MAC AA:BB:CC:DD:EE:FF for manager at url &lt;Url&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -L &lt;Url&gt; EthernetInterfaces -m MACAddress:AA:BB:CC:DD:EE:FF\n\n # Gets log member with Id=SEL from the first Manager\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -1 Logs -i SEL\n\n # Gets log entries with Id=SEL from the first Manager\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; Managers -1 Logs -E -i SEL\n</code></pre>\n<h3>AccountService subcommand Examples</h3>\n<pre><code>$ python redfishtool.py -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService examples\n # Gets the AccountService\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService\n\n # Sets the failed login lockout threshold\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService patch { \"AccountLockoutThreshold\": 5 } ]\n\n # Gets the Accounts collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService Accounts\n\n # List Accounts to get Id, username, url for each account\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService Accounts list\n\n # Gets the Accounts member with username: john\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService Accounts -m UserName:john\n\n # Lists the Roles collection to get RoleId, IsPredefined, &amp; url for each role\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService Roles list\n\n # Gets the Roles member with RoleId=Admin\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService Roles -i Admin\n\n # Adds the new user (john) w/ passwd \"12345\" and role: Admin\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService adduser john 12345 Admin\n\n # Deletes the account with the username \"john\"\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService deleteuser john\n\n # Disables the account with the username \"john\"\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService useradmin john disable\n\n # Unlocks the account with the username \"john\"\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService useradmin john unlock\n\n # Sets the username for account with id=3 to \"alice\"\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; AccountService setusername 3 alice\n</code></pre>\n<h3>SessionService subcommand Examples</h3>\n<pre><code>$ python redfishtool.py -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService examples\n # Gets the sessionService\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService\n\n # Sets the session timeout property\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService setSessionTimeout &lt;timeout&gt;\n\n # Gets Sessions collection\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService Sessions\n\n # Gets the session at URI=&lt;sessUrl&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService Sessions -l &lt;sessUrl&gt;\n\n # Gets the session with session Id &lt;sessId&gt;\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService Sessions -i &lt;sessId&gt;\n\n # Patches the json-formated {prop: value...} data to the sessionService object\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService patch {A: B,C: D,...}\n\n # Login (create session)\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService login -u &lt;user&gt; -p &lt;password&gt;\n\n # Logout (delete session &lt;sessId&gt;)\n redfishtool -r &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; SessionService logout -i &lt;sessionId&gt;\n</code></pre>\n<h2>Running in Windows</h2>\n<p>In order for executables to resolve if using Windows, ensure both the \"Python\" and \"Scripts\" folder are included in the PATH environment variable.  For example, if Python is installed to \"C:\\Python\", the PATH environment variable should include \"C:\\Python\" and \"C:\\Python\\scripts\".</p>\n<h2>Known Issues, and ToDo Enhancements</h2>\n<ol>\n<li>modifications to make PATCH commands work better with Windows cmd shell quoting</li>\n<li>support clearlog</li>\n<li>add additional APIs that have been added to Redfish after 1.0---this version supports only 1.0 APIs</li>\n<li>add custom role create and delete</li>\n</ol>\n<h2>Release Process</h2>\n<ol>\n<li>Update <code>CHANGELOG.md</code> with the list of changes since the last release</li>\n<li>Update the <code>self.version</code> and <code>self.releaseDate</code> variables in <code>redfishtool/redfishtoolTransport.py</code> to reflect the new tool version</li>\n<li>Update setup.py to reflect the new tool version</li>\n<li>Push changes to Github</li>\n<li>Create a new release in Github</li>\n<li>Push the new tool version to pypi.org\n<ul>\n<li><code>python setup.py sdist</code></li>\n<li><code>twine upload dist/*</code></li>\n</ul>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7145064, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1900e9a7f528c74d465442658b627e7e", "sha256": "4c1a4de67db47c2f259edfe197c40df6ec7cb0d41fe7312d03039c44a2e85e49"}, "downloads": -1, "filename": "redfishtool-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1900e9a7f528c74d465442658b627e7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51007, "upload_time": "2017-06-09T19:13:01", "upload_time_iso_8601": "2017-06-09T19:13:01.857362Z", "url": "https://files.pythonhosted.org/packages/12/5c/74f720d35e2a3825a2f8241fc6cb3bc0cb2e68a3b3e223196cde8efab3d6/redfishtool-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "efb0d725434fce273e8135d3135e1106", "sha256": "5fa8a40fc730e5d37c34b6e62d31fb758ea06619bc1708a9356936c8f432f937"}, "downloads": -1, "filename": "redfishtool-1.0.1.tar.gz", "has_sig": false, "md5_digest": "efb0d725434fce273e8135d3135e1106", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52250, "upload_time": "2017-06-19T18:25:08", "upload_time_iso_8601": "2017-06-19T18:25:08.335421Z", "url": "https://files.pythonhosted.org/packages/2c/f6/747fc3c2b9b25a9e3a4eb0c2f63f457ceb99dc94c8835dad971de009e22b/redfishtool-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6c253599eaf11748d2c55a646decd175", "sha256": "aa8ebee02bf33ab3a0fc39de381e688a08ce2edb02123f61a9b40ac6aa694a7b"}, "downloads": -1, "filename": "redfishtool-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6c253599eaf11748d2c55a646decd175", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54476, "upload_time": "2017-10-27T12:57:13", "upload_time_iso_8601": "2017-10-27T12:57:13.142746Z", "url": "https://files.pythonhosted.org/packages/14/6d/1aa00918380394bd481d2bef4d38f420aaa85a7fe84a5ef6b0a1f85b5a63/redfishtool-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ad1be1c416119d9cb34a55a6662dea0c", "sha256": "f14eb37763ac15ed7e01d67e253d3fca73006ddcbe87f8224f7f2e7e76ccebde"}, "downloads": -1, "filename": "redfishtool-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ad1be1c416119d9cb34a55a6662dea0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55682, "upload_time": "2018-01-02T15:28:28", "upload_time_iso_8601": "2018-01-02T15:28:28.648662Z", "url": "https://files.pythonhosted.org/packages/68/92/5913ff04cf15a4be2e0cc13280690121d611a6783c1ca0afc6cb24311110/redfishtool-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "832c57b274c98a90330d313dc2d104d5", "sha256": "88312575444bd7bdf500abed5ecd05e71977387e26ae3881a60ff9f582cd0826"}, "downloads": -1, "filename": "redfishtool-1.0.4.tar.gz", "has_sig": false, "md5_digest": "832c57b274c98a90330d313dc2d104d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55680, "upload_time": "2018-02-02T14:55:11", "upload_time_iso_8601": "2018-02-02T14:55:11.897394Z", "url": "https://files.pythonhosted.org/packages/92/de/78d3842363f794ff3ac35b49dd4032e9136f722506ec8709ba7cc85cae27/redfishtool-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "bc4ddb80faba70fbea79b7f04e5edfa3", "sha256": "aac658291a77123404154053e339984413ba043b6d213ffaba088475cc20c74d"}, "downloads": -1, "filename": "redfishtool-1.0.5.tar.gz", "has_sig": false, "md5_digest": "bc4ddb80faba70fbea79b7f04e5edfa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79746, "upload_time": "2018-09-21T13:26:43", "upload_time_iso_8601": "2018-09-21T13:26:43.279077Z", "url": "https://files.pythonhosted.org/packages/0d/ae/1a0283f288b13c0225fe77f90ce9733bddaa79c12610d57efe1b9f51d24f/redfishtool-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "1032737fced7d3c76320c4cc89f9e3c5", "sha256": "00a12a25c08daec81971a8e7fe64b9b25b2875be9ebf917e410b08258fc0ca5c"}, "downloads": -1, "filename": "redfishtool-1.0.6.tar.gz", "has_sig": false, "md5_digest": "1032737fced7d3c76320c4cc89f9e3c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80314, "upload_time": "2018-10-12T12:32:43", "upload_time_iso_8601": "2018-10-12T12:32:43.867144Z", "url": "https://files.pythonhosted.org/packages/bc/4f/7ae9c347255a8e9550abe67ccdac31760c490cd4a356654524323d70e9ba/redfishtool-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "389f88c1e770694bb854e5f9de42e0dc", "sha256": "62d8a031aec039a39036c0d116bef5586d3414a7153a9824c82770d0dbd7f686"}, "downloads": -1, "filename": "redfishtool-1.0.7.tar.gz", "has_sig": false, "md5_digest": "389f88c1e770694bb854e5f9de42e0dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80418, "upload_time": "2018-10-19T12:55:20", "upload_time_iso_8601": "2018-10-19T12:55:20.217216Z", "url": "https://files.pythonhosted.org/packages/c9/26/e86633f626d428add49d193b8ffb559eedaf6fe3b1f8f92e1cb4a7c7d0fe/redfishtool-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "03a14e180a33d2848737efb00a296501", "sha256": "97629eac6ae2c7173e1d00bd0aecfe8a16e7a96230833bbf27673ae32a6b3be4"}, "downloads": -1, "filename": "redfishtool-1.0.8.tar.gz", "has_sig": false, "md5_digest": "03a14e180a33d2848737efb00a296501", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80549, "upload_time": "2018-11-30T18:04:16", "upload_time_iso_8601": "2018-11-30T18:04:16.984654Z", "url": "https://files.pythonhosted.org/packages/c8/73/e9f3ec5db4e70f3acfa1edc010336129517c8787cf2f78b7eb1ec1878175/redfishtool-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "69874f29e91e8d5e3e152939d7d1e718", "sha256": "22d8781dfc58d20f842c8419bf3e5fad0381209732b9b16e98ee58c4699adde0"}, "downloads": -1, "filename": "redfishtool-1.0.9.tar.gz", "has_sig": false, "md5_digest": "69874f29e91e8d5e3e152939d7d1e718", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80730, "upload_time": "2019-07-12T12:59:04", "upload_time_iso_8601": "2019-07-12T12:59:04.671819Z", "url": "https://files.pythonhosted.org/packages/01/34/3f35f21127aea507717bc5dd831529531b3f5acdff25847061a5994b4bcb/redfishtool-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "9bb9d46f728e7c6621355c4e64fb613b", "sha256": "df541ae968357fc44b89279cc9d24d3abaef2fc264c9bbe49e6fd4a837dc964d"}, "downloads": -1, "filename": "redfishtool-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9bb9d46f728e7c6621355c4e64fb613b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80787, "upload_time": "2019-08-09T17:53:43", "upload_time_iso_8601": "2019-08-09T17:53:43.201672Z", "url": "https://files.pythonhosted.org/packages/3d/34/4efa69a62aafdef1aa33a9503d1913247effc8666a2a9f301218c66c462f/redfishtool-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "9b65499a4b7896442ed7c2f610732be0", "sha256": "4588783b121c2d085b88e9ed35d2a27d0162158bad3ee8d0d4866c6caf883e0c"}, "downloads": -1, "filename": "redfishtool-1.1.1.tar.gz", "has_sig": false, "md5_digest": "9b65499a4b7896442ed7c2f610732be0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80856, "upload_time": "2020-01-10T14:13:03", "upload_time_iso_8601": "2020-01-10T14:13:03.088955Z", "url": "https://files.pythonhosted.org/packages/5f/2b/d865a4eaf24689985286bf3659f5802e50179e5a4b44e463f91b2dbce271/redfishtool-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "e8926a2904fc98b8618ce816c2e4b9bb", "sha256": "45e455c6b0b2dd04715b19d6988d08ac4716e20649f6f1e20834bdc3a927478d"}, "downloads": -1, "filename": "redfishtool-1.1.2.tar.gz", "has_sig": false, "md5_digest": "e8926a2904fc98b8618ce816c2e4b9bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80873, "upload_time": "2020-04-10T17:13:27", "upload_time_iso_8601": "2020-04-10T17:13:27.451762Z", "url": "https://files.pythonhosted.org/packages/cd/1e/f803c7cb9f72fd4499fe34297f98c28910ac73e154f7ce450cd587965ad1/redfishtool-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "70441ab2c19133dbd3122ba9e64cf297", "sha256": "91f3d0dad8e5ce2d2642096b3e83d6d04adedf4a6a324fc272762ada579f61ed"}, "downloads": -1, "filename": "redfishtool-1.1.3.tar.gz", "has_sig": false, "md5_digest": "70441ab2c19133dbd3122ba9e64cf297", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83341, "upload_time": "2020-05-01T13:47:58", "upload_time_iso_8601": "2020-05-01T13:47:58.262945Z", "url": "https://files.pythonhosted.org/packages/59/4f/d8d5b63c31117e13316a71548beb059a24925f6e4237680186aaeeb2063a/redfishtool-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70441ab2c19133dbd3122ba9e64cf297", "sha256": "91f3d0dad8e5ce2d2642096b3e83d6d04adedf4a6a324fc272762ada579f61ed"}, "downloads": -1, "filename": "redfishtool-1.1.3.tar.gz", "has_sig": false, "md5_digest": "70441ab2c19133dbd3122ba9e64cf297", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83341, "upload_time": "2020-05-01T13:47:58", "upload_time_iso_8601": "2020-05-01T13:47:58.262945Z", "url": "https://files.pythonhosted.org/packages/59/4f/d8d5b63c31117e13316a71548beb059a24925f6e4237680186aaeeb2063a/redfishtool-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:56 2020"}