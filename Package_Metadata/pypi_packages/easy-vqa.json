{"info": {"author": "Victor Zhou", "author_email": "vzhou842@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# easy-vqa\n\n[![Build Status](https://travis-ci.com/vzhou842/easy-vqa.svg?branch=master)](https://travis-ci.com/vzhou842/easy-vqa)\n![PyPI](https://img.shields.io/pypi/v/easy-vqa)\n\nThe official repository for the Easy Visual Question Answering (easy-VQA) dataset. Contains:\n- the official [Python package](https://pypi.org/project/easy-vqa/) for the dataset\n- the source code for generating the dataset\n\nRead [the easy-VQA blog post](https://victorzhou.com/blog/easy-vqa/) for more.\n\n## About the Dataset\n\neasy-VQA contains\n\n- 4,000 train images and 38,575 train questions.\n- 1,000 test images and 9,673 test questions.\n- 13 total possible answers.\n- 28,407 training questions that are yes/no.\n- 7,136 testing questions that are yes/no.\n\nAll images are 64x64 color images. See a [live demo](https://easy-vqa-demo.victorzhou.com/) of a model trained on the dataset.\n\n### Example Images\n\n![](./easy_vqa/data/train/images/0.png)\n![](./easy_vqa/data/train/images/1.png)\n![](./easy_vqa/data/train/images/2.png)\n![](./easy_vqa/data/train/images/3.png)\n![](./easy_vqa/data/train/images/5.png)\n![](./easy_vqa/data/train/images/6.png)\n![](./easy_vqa/data/train/images/7.png)\n![](./easy_vqa/data/train/images/8.png)\n\n_(these image links above only work on [Github](https://github.com/vzhou842/easy-VQA))_\n\n### Example Questions\n\n- _What color is the rectangle?_\n- _Does the image contain a triangle?_\n- _Is no blue shape present?_\n- _What shape does the image contain?_\n\n## Installing the Package\n\n`pip install easy-vqa`\n\n## Using the Package\n\n### Questions\n\nEach question has 3 parts:\n- the **question text**\n- the **answer**\n- the **image ID**\n\nThe question getters return corresponding **arrays** for each of the 3 parts:\n\n```python\nfrom easy_vqa import get_train_questions, get_test_questions\n\ntrain_questions, train_answers, train_image_ids = get_train_questions()\ntest_questions, test_answers, test_image_ids = get_test_questions()\n\n# Question 0 is at index 0 for all 3 arrays:\nprint(train_questions[0]) # what shape does the image contain?\nprint(train_answers[0])   # circle\nprint(train_image_ids[0]) # 0\n```\n\n### Images\n\nThe image path getters return dicts that map **image ID** to **absolute paths** that can be used to load the image.\n\n```python\nfrom easy_vqa import get_train_image_paths, get_test_image_paths\n\ntrain_image_paths = get_train_image_paths()\ntest_image_paths = get_test_image_paths()\n\nprint(train_image_paths[0]) # ends in easy_vqa/data/train/images/0.png\n```\n\n### Answers\n\nThe answers getter returns an **array** of all possible answers.\n\n```python\nfrom easy_vqa import get_answers\n\nanswers = get_answers()\n\nprint(answers) # ['teal', 'brown', 'black', 'gray', 'yes', 'blue', 'rectangle', 'yellow', 'triangle', 'red', 'circle', 'no', 'green']\n```\n\n## Generating the Dataset\n\nThe easy-VQA dataset was generated by running\n\n```shell\npython gen_data/generate_data.py\n```\n\nwhich writes to the `easy_vqa/data/` directory. Be sure to install the dependencies for dataset generation running `generate_data.py`:\n\n```shell\npip install -r gen_data/requirements.txt\n```\n\nIf you want to generate a larger easy-VQA dataset, simply modify the `NUM_TRAIN` and `NUM_TEST` constants in `generate_data.py`. Otherwise, if you want to modify the dataset itself, the files and code in the `gen_data/` directory should be pretty self-explanatory.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/vzhou842/easy-VQA", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "easy-vqa", "package_url": "https://pypi.org/project/easy-vqa/", "platform": "", "project_url": "https://pypi.org/project/easy-vqa/", "project_urls": {"Demo": "https://easy-vqa-demo.victorzhou.com", "Homepage": "http://github.com/vzhou842/easy-VQA"}, "release_url": "https://pypi.org/project/easy-vqa/1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "The official package for the easy-VQA dataset.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>easy-vqa</h1>\n<p><a href=\"https://travis-ci.com/vzhou842/easy-vqa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6182cbac972f4a5f0bf10d1c315e4a29b8d1d3bb/68747470733a2f2f7472617669732d63692e636f6d2f767a686f753834322f656173792d7671612e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4cf3f6b14ff1629d6863c0ba6366ce90197318cf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656173792d767161\"></p>\n<p>The official repository for the Easy Visual Question Answering (easy-VQA) dataset. Contains:</p>\n<ul>\n<li>the official <a href=\"https://pypi.org/project/easy-vqa/\" rel=\"nofollow\">Python package</a> for the dataset</li>\n<li>the source code for generating the dataset</li>\n</ul>\n<p>Read <a href=\"https://victorzhou.com/blog/easy-vqa/\" rel=\"nofollow\">the easy-VQA blog post</a> for more.</p>\n<h2>About the Dataset</h2>\n<p>easy-VQA contains</p>\n<ul>\n<li>4,000 train images and 38,575 train questions.</li>\n<li>1,000 test images and 9,673 test questions.</li>\n<li>13 total possible answers.</li>\n<li>28,407 training questions that are yes/no.</li>\n<li>7,136 testing questions that are yes/no.</li>\n</ul>\n<p>All images are 64x64 color images. See a <a href=\"https://easy-vqa-demo.victorzhou.com/\" rel=\"nofollow\">live demo</a> of a model trained on the dataset.</p>\n<h3>Example Images</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9c1c7fa57709110defdbf669e2cd4762f265aa0/2e2f656173795f7671612f646174612f747261696e2f696d616765732f302e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ee8f0f4140f1987375d8e04fdfb93a67ce9994d/2e2f656173795f7671612f646174612f747261696e2f696d616765732f312e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d2d01e9e0a6265d4d42df18216b376fdcc04350/2e2f656173795f7671612f646174612f747261696e2f696d616765732f322e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96a0e3eddee70eb97bacb9da8353d856ad14fac4/2e2f656173795f7671612f646174612f747261696e2f696d616765732f332e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6525ebd84219a897920513c48b197523f48a75bb/2e2f656173795f7671612f646174612f747261696e2f696d616765732f352e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bd69a339766d541ccd79827ffd230f85883e7de/2e2f656173795f7671612f646174612f747261696e2f696d616765732f362e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/054093d81bea86b3010d27d842d5b7f6cfc4304c/2e2f656173795f7671612f646174612f747261696e2f696d616765732f372e706e67\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d7b673932c10520423ed3e0172cf34e16b03cd4/2e2f656173795f7671612f646174612f747261696e2f696d616765732f382e706e67\"></p>\n<p><em>(these image links above only work on <a href=\"https://github.com/vzhou842/easy-VQA\" rel=\"nofollow\">Github</a>)</em></p>\n<h3>Example Questions</h3>\n<ul>\n<li><em>What color is the rectangle?</em></li>\n<li><em>Does the image contain a triangle?</em></li>\n<li><em>Is no blue shape present?</em></li>\n<li><em>What shape does the image contain?</em></li>\n</ul>\n<h2>Installing the Package</h2>\n<p><code>pip install easy-vqa</code></p>\n<h2>Using the Package</h2>\n<h3>Questions</h3>\n<p>Each question has 3 parts:</p>\n<ul>\n<li>the <strong>question text</strong></li>\n<li>the <strong>answer</strong></li>\n<li>the <strong>image ID</strong></li>\n</ul>\n<p>The question getters return corresponding <strong>arrays</strong> for each of the 3 parts:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_vqa</span> <span class=\"kn\">import</span> <span class=\"n\">get_train_questions</span><span class=\"p\">,</span> <span class=\"n\">get_test_questions</span>\n\n<span class=\"n\">train_questions</span><span class=\"p\">,</span> <span class=\"n\">train_answers</span><span class=\"p\">,</span> <span class=\"n\">train_image_ids</span> <span class=\"o\">=</span> <span class=\"n\">get_train_questions</span><span class=\"p\">()</span>\n<span class=\"n\">test_questions</span><span class=\"p\">,</span> <span class=\"n\">test_answers</span><span class=\"p\">,</span> <span class=\"n\">test_image_ids</span> <span class=\"o\">=</span> <span class=\"n\">get_test_questions</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Question 0 is at index 0 for all 3 arrays:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">train_questions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># what shape does the image contain?</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">train_answers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>   <span class=\"c1\"># circle</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">train_image_ids</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># 0</span>\n</pre>\n<h3>Images</h3>\n<p>The image path getters return dicts that map <strong>image ID</strong> to <strong>absolute paths</strong> that can be used to load the image.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_vqa</span> <span class=\"kn\">import</span> <span class=\"n\">get_train_image_paths</span><span class=\"p\">,</span> <span class=\"n\">get_test_image_paths</span>\n\n<span class=\"n\">train_image_paths</span> <span class=\"o\">=</span> <span class=\"n\">get_train_image_paths</span><span class=\"p\">()</span>\n<span class=\"n\">test_image_paths</span> <span class=\"o\">=</span> <span class=\"n\">get_test_image_paths</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">train_image_paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># ends in easy_vqa/data/train/images/0.png</span>\n</pre>\n<h3>Answers</h3>\n<p>The answers getter returns an <strong>array</strong> of all possible answers.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_vqa</span> <span class=\"kn\">import</span> <span class=\"n\">get_answers</span>\n\n<span class=\"n\">answers</span> <span class=\"o\">=</span> <span class=\"n\">get_answers</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">answers</span><span class=\"p\">)</span> <span class=\"c1\"># ['teal', 'brown', 'black', 'gray', 'yes', 'blue', 'rectangle', 'yellow', 'triangle', 'red', 'circle', 'no', 'green']</span>\n</pre>\n<h2>Generating the Dataset</h2>\n<p>The easy-VQA dataset was generated by running</p>\n<pre>python gen_data/generate_data.py\n</pre>\n<p>which writes to the <code>easy_vqa/data/</code> directory. Be sure to install the dependencies for dataset generation running <code>generate_data.py</code>:</p>\n<pre>pip install -r gen_data/requirements.txt\n</pre>\n<p>If you want to generate a larger easy-VQA dataset, simply modify the <code>NUM_TRAIN</code> and <code>NUM_TEST</code> constants in <code>generate_data.py</code>. Otherwise, if you want to modify the dataset itself, the files and code in the <code>gen_data/</code> directory should be pretty self-explanatory.</p>\n\n          </div>"}, "last_serial": 6427673, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "60a86a72d3c78a558b07a29842449b52", "sha256": "fcb51b309b78c7b00f97b64cdbcbcf5c105f94da1b39c0796cee5a787c4f650f"}, "downloads": -1, "filename": "easy_vqa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60a86a72d3c78a558b07a29842449b52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3215672, "upload_time": "2020-01-10T06:35:31", "upload_time_iso_8601": "2020-01-10T06:35:31.065000Z", "url": "https://files.pythonhosted.org/packages/32/e7/dbdd733ea110ff04c8b0b7ce7d49acce06f1dd18ed304d9f8f9b3f26c1a3/easy_vqa-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7692c72229588038d84c89278bbfd684", "sha256": "f49e98f314ef1ed1606f1b9d8ec33200bc9b6f6e45a0a6503b1c171a087daaee"}, "downloads": -1, "filename": "easy-vqa-1.0.tar.gz", "has_sig": false, "md5_digest": "7692c72229588038d84c89278bbfd684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2028722, "upload_time": "2020-01-10T06:35:33", "upload_time_iso_8601": "2020-01-10T06:35:33.815777Z", "url": "https://files.pythonhosted.org/packages/51/47/b26fe69575594d45801cb368a43da7d0a720165177dd12caef69e5446e12/easy-vqa-1.0.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "f14dfd30068f05816bb0f642b839105e", "sha256": "d6691d82f656801e7a95964837a3146d22fb0a6b425a56875776b8e4f55737ce"}, "downloads": -1, "filename": "easy_vqa-1.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "f14dfd30068f05816bb0f642b839105e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3215569, "upload_time": "2019-12-31T12:12:17", "upload_time_iso_8601": "2019-12-31T12:12:17.280173Z", "url": "https://files.pythonhosted.org/packages/79/63/7f5df7ab9092e326e6c46d13daeb55bc361d998449cfea9e137b616d02b8/easy_vqa-1.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96b96f96ab0829dfe2232d0c80e854a6", "sha256": "ec7b955c9b6837c9a512eba12d19e309f0347c3636f53484aff45f72a4ad1acd"}, "downloads": -1, "filename": "easy-vqa-1.0b1.tar.gz", "has_sig": false, "md5_digest": "96b96f96ab0829dfe2232d0c80e854a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2041733, "upload_time": "2019-12-31T12:12:22", "upload_time_iso_8601": "2019-12-31T12:12:22.464161Z", "url": "https://files.pythonhosted.org/packages/4c/0f/6d2c7898e9b682733a139d479eaa9fdf7bd7b91f6239aa4ef10a480472e4/easy-vqa-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60a86a72d3c78a558b07a29842449b52", "sha256": "fcb51b309b78c7b00f97b64cdbcbcf5c105f94da1b39c0796cee5a787c4f650f"}, "downloads": -1, "filename": "easy_vqa-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60a86a72d3c78a558b07a29842449b52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3215672, "upload_time": "2020-01-10T06:35:31", "upload_time_iso_8601": "2020-01-10T06:35:31.065000Z", "url": "https://files.pythonhosted.org/packages/32/e7/dbdd733ea110ff04c8b0b7ce7d49acce06f1dd18ed304d9f8f9b3f26c1a3/easy_vqa-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7692c72229588038d84c89278bbfd684", "sha256": "f49e98f314ef1ed1606f1b9d8ec33200bc9b6f6e45a0a6503b1c171a087daaee"}, "downloads": -1, "filename": "easy-vqa-1.0.tar.gz", "has_sig": false, "md5_digest": "7692c72229588038d84c89278bbfd684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2028722, "upload_time": "2020-01-10T06:35:33", "upload_time_iso_8601": "2020-01-10T06:35:33.815777Z", "url": "https://files.pythonhosted.org/packages/51/47/b26fe69575594d45801cb368a43da7d0a720165177dd12caef69e5446e12/easy-vqa-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:12 2020"}