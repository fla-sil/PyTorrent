{"info": {"author": "Bart Thate", "author_email": "bthate@dds.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Utilities"], "description": "\n| email: bthate@dds.nl | irc: botfather on irc.freenode.net | pypi: https://pypi.org/project/objr | source: http://bitbucket.org/bthate/objr \n\nOBJR is a objecter objecting to objects.\n\nif you need the objecter to have access to your local directory use this: \n\n::\n\n export PYTHONPATH=\".\"\n\nthis will add your current directory to the pythonpath so the packages in it can be found by the objecter.\n\nthe objecter includes one program in the repository, the objr program:\n\n::\n\n Usage: objr [options]\n\n Options:\n   --version      show program's version number and exit\n   -h, --help     show this help message and exit\n   -d WORKDIR     set working directory.\n   -l LEVEL       loglevel.\n   -m MODULES     modules to load.\n   -o OPTIONS     parseable options to use.\n   --owner=OWNER  userhost of the bot's owner\n\nthe basic OBJR shell has the following commands:\n\n::\n\n ed                            - edit objects.\n find                          - find objects.\n load                          - load module.\n log                           - log some text.\n meet                          - add a new user.\n rm                            - set _deleted flag.\n show                          - show internals.\n unload                        - unload module.\n\nthe show command can be used to check status:\n\n::\n\n cfg                           - show main config\n cmds                          - show available commands\n license                       - show license\n mods                          - show loaded modules\n tasks                         - show running tasks\n uptime                        - show uptime\n version                       - show version\n\nprogramming your own commands is easy, your can load modules with the -m option.\na command is a function with one argument, the event that was generated on the bot\n\n::\n\n def mycommand(event):\n\n     <<< your code here >>>\n\nYou can use event.reply() to send response back to the user.\n\nOBJR has a \"no-clause MIT license\".\n    \n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/bthate/objr", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "objr", "package_url": "https://pypi.org/project/objr/", "platform": "", "project_url": "https://pypi.org/project/objr/", "project_urls": {"Homepage": "https://bitbucket.org/bthate/objr"}, "release_url": "https://pypi.org/project/objr/2/", "requires_dist": null, "requires_python": "", "summary": "the objecter", "version": "2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div>email: <a href=\"mailto:bthate%40dds.nl\">bthate<span>@</span>dds<span>.</span>nl</a> | irc: botfather on irc.freenode.net | pypi: <a href=\"https://pypi.org/project/objr\" rel=\"nofollow\">https://pypi.org/project/objr</a> | source: <a href=\"http://bitbucket.org/bthate/objr\" rel=\"nofollow\">http://bitbucket.org/bthate/objr</a></div>\n</div>\n<p>OBJR is a objecter objecting to objects.</p>\n<p>if you need the objecter to have access to your local directory use this:</p>\n<pre>export PYTHONPATH=\".\"\n</pre>\n<p>this will add your current directory to the pythonpath so the packages in it can be found by the objecter.</p>\n<p>the objecter includes one program in the repository, the objr program:</p>\n<pre>Usage: objr [options]\n\nOptions:\n  --version      show program's version number and exit\n  -h, --help     show this help message and exit\n  -d WORKDIR     set working directory.\n  -l LEVEL       loglevel.\n  -m MODULES     modules to load.\n  -o OPTIONS     parseable options to use.\n  --owner=OWNER  userhost of the bot's owner\n</pre>\n<p>the basic OBJR shell has the following commands:</p>\n<pre>ed                            - edit objects.\nfind                          - find objects.\nload                          - load module.\nlog                           - log some text.\nmeet                          - add a new user.\nrm                            - set _deleted flag.\nshow                          - show internals.\nunload                        - unload module.\n</pre>\n<p>the show command can be used to check status:</p>\n<pre>cfg                           - show main config\ncmds                          - show available commands\nlicense                       - show license\nmods                          - show loaded modules\ntasks                         - show running tasks\nuptime                        - show uptime\nversion                       - show version\n</pre>\n<p>programming your own commands is easy, your can load modules with the -m option.\na command is a function with one argument, the event that was generated on the bot</p>\n<pre>def mycommand(event):\n\n    &lt;&lt;&lt; your code here &gt;&gt;&gt;\n</pre>\n<p>You can use event.reply() to send response back to the user.</p>\n<p>OBJR has a \u201cno-clause MIT license\u201d.</p>\n\n          </div>"}, "last_serial": 4712085, "releases": {"1": [{"comment_text": "", "digests": {"md5": "f5ad4660033185760cb7865dbb221fb1", "sha256": "09a3133a68a2a1c3782aa41b9ea0196252d603e7ca5e583cd2575f7554e529d7"}, "downloads": -1, "filename": "objr-1.tar.gz", "has_sig": false, "md5_digest": "f5ad4660033185760cb7865dbb221fb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3865, "upload_time": "2019-01-07T15:41:10", "upload_time_iso_8601": "2019-01-07T15:41:10.177156Z", "url": "https://files.pythonhosted.org/packages/c4/99/c4ecec368d51190ec662de889a17a0222012f3eab4fcaeba433b538386af/objr-1.tar.gz", "yanked": false}], "2": [{"comment_text": "", "digests": {"md5": "493c2a67d350257964084fb2c58e1d52", "sha256": "07fa86b5b0d28b32f4d8fa087912aeb150202488660238e6f1487de0e590dd0e"}, "downloads": -1, "filename": "objr-2.tar.gz", "has_sig": false, "md5_digest": "493c2a67d350257964084fb2c58e1d52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4379, "upload_time": "2019-01-18T12:44:23", "upload_time_iso_8601": "2019-01-18T12:44:23.336757Z", "url": "https://files.pythonhosted.org/packages/d0/c0/a771d3764fe806a5a2f87f30eb22041110d1078829e6106af8f045bc6848/objr-2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "493c2a67d350257964084fb2c58e1d52", "sha256": "07fa86b5b0d28b32f4d8fa087912aeb150202488660238e6f1487de0e590dd0e"}, "downloads": -1, "filename": "objr-2.tar.gz", "has_sig": false, "md5_digest": "493c2a67d350257964084fb2c58e1d52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4379, "upload_time": "2019-01-18T12:44:23", "upload_time_iso_8601": "2019-01-18T12:44:23.336757Z", "url": "https://files.pythonhosted.org/packages/d0/c0/a771d3764fe806a5a2f87f30eb22041110d1078829e6106af8f045bc6848/objr-2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:47 2020"}