{"info": {"author": "saaj", "author_email": "mail@saaj.me", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": ".. image:: https://bitbucket-badges.atlassian.io/badge/saaj/looppool.svg?ref=default\r\n  :target: https://bitbucket.org/saaj/looppool/addon/pipelines/home\r\n.. image:: https://codecov.io/bitbucket/saaj/looppool/branch/default/graph/badge.svg\r\n    :target: https://codecov.io/bitbucket/saaj/looppool/branch/default \r\n.. image:: https://badge.fury.io/py/Looppool.png\r\n    :target: https://pypi.python.org/pypi/Looppool\r\n\r\n********\r\nLooppool\r\n********\r\nLooppool is a Python 3 package for running worker process pool of Tornado IO loops. It's useful\r\nfor a heavy asynchronous application which doesn't fit into single process due to increasing\r\nCPU usage and suffers from IO loop blocking (see ``set_blocking_log_threshold`` [1]_).\r\n\r\nIt was developed as a part of performance optimisation of a Tornado data extraction application.\r\nThe application mixed IO-bound and CPU-bound tasks. Moreover, the CPU-bound tasks were highly\r\ncoupled with IO loop. Because of such coupling much simpler approach of ``concurrent.futures`` \r\n[3]_ wouldn't have helped.\r\n\r\nDesign\r\n======\r\nA picture worth a thousand words.\r\n\r\n.. image:: https://bytebucket.org/saaj/looppool/raw/default/manual/overview.png\r\n    :target: https://bbcdn.githack.com/saaj/looppool/raw/default/manual/overview.seq.violet.html\r\n\r\nA few observations and notes:\r\n\r\n1. Messages are off-loaded to IO loops immediately but task and result queues are\r\n   protected by semaphores to not off-load more tasks on IO loops than the queue size. \r\n2. In fact there are ``n`` task queue, a queue per worker. Task messages are distributed\r\n   evenly between workers.  \r\n3. ``add_callback`` [2]_ is safe (and only safe) method to pass control from other\r\n   thread to IO loop's thread.\r\n4. Because queue message handlers (``fn1`` and ``fn2``) are called from IO loop\r\n   they can be coroutines.\r\n5. ``Pool`` stops its workers by sending ``PoisonPill`` task message per worker.\r\n\r\nWorker\r\n======\r\nThere is a base class for  a ``Worker``. It represents a process worker that runs its own\r\nTornado IO loop. It processes task messages and puts them in result queue (or just puts without \r\nreceiving anything). It requires override of ``_process_message(self, task)`` in a subclass \r\nand mandates that once the task is done, ``self._task_done()`` is called (directly in \r\n``try-finally`` or with ``@task_done``), like::\r\n\r\n    def _process_message(self, task):\r\n        try:\r\n            result = 'some processing'\r\n            self._put_nowait(result)\r\n        finally:\r\n            self._task_done()\r\n\r\n``WorkerSubclass._process_message`` may be plain function or coroutine. More details are \r\navailable in the package's unit test module [5]_.\r\n\r\n.. note::\r\n    For ``Pool.process_message`` there is also requirement to call ``result_done`` argument\r\n    once message is done. You can also wrap  it with ``@task_done`` in simple case when\r\n    result is considered ingested on return of ``process_message``.\r\n    \r\n    Both requirements are bound to semaphores that limit running tasks and pending results. \r\n    It also affects how pool is stopped as it waits for running tasks to complete. \r\n\r\nStateful worker\r\n---------------\r\nIf you want to run stateful workers, for instance, use some periodically calculated lookup table,\r\nbut don't want to calculate it in every workers (e.g. burden of maintaining database connection),\r\nyou can send ``n`` tasks and each of ``n`` workers is guaranteed to receive it.\r\n\r\nYou can also send messages to workers individually. ``Pool.put_nowait`` has optional argument\r\n``worker_num``.\r\n\r\n.. note::\r\n    If your process start method [4]_ is *fork* (default on \\*nix platforms), you can share\r\n    some static data from parent process.\r\n\r\nInstallation\r\n============\r\n.. sourcecode:: bash\r\n\r\n    pip install Looppool\r\n    \r\nUsage\r\n=====\r\n.. note::\r\n    Note that the following example has 1-to-1 correspondence of input to output messages.\r\n    Because worker has IO loop at its disposal, it can, for example, subscribe to something \r\n    by input message and put results later without task message.\r\n\r\n.. sourcecode:: python\r\n\r\n    #!/usr/bin/env python3\r\n    \r\n    \r\n    import looppool\r\n    from tornado import gen, ioloop, httpclient\r\n    \r\n    \r\n    class FetchWorker(looppool.Worker):\r\n        \r\n        _http_client = None\r\n        '''Tornado asynchronous HTTP client'''\r\n      \r\n        \r\n        def _initialise(self):\r\n            self._http_client = httpclient.AsyncHTTPClient()\r\n        \r\n        @looppool.task_done\r\n        @gen.coroutine\r\n        def _process_message(self, url):\r\n            response = yield self._http_client.fetch(url)\r\n            self._put_nowait((url, response.headers.get('server')))\r\n    \r\n    \r\n    @looppool.task_done\r\n    def process_message(result, result_done):\r\n        print(result)\r\n    \r\n    \r\n    @gen.coroutine\r\n    def main():\r\n        loop = ioloop.IOLoop.instance()\r\n        pool = looppool.Pool(loop, pool_size = 4, worker_class = FetchWorker)\r\n        pool.process_message = process_message\r\n        pool.start()\r\n        \r\n        urls = [\r\n            'https://python.org/',\r\n            'http://tornadoweb.org/',\r\n            'https://google.com/',\r\n            'https://stackoverflow.com/',\r\n        ]\r\n        list(map(pool.put_nowait, urls))\r\n        \r\n        pool.stop()\r\n    \r\n    \r\n    if __name__ == '__main__':\r\n        ioloop.IOLoop.instance().run_sync(main)\r\n\r\nMaintenance\r\n===========\r\nMaintaining a process group instead of one process is more tricky thing to do. \r\nInitially, you may want to see if your pool instance has actually spawned any\r\nprocesses. Here's what you can do visualise your process tree, which has main process,\r\none or two (depending on start method) ``multiprocessing`` helper processes, and processes\r\nof your ``looppool`` pools (you can use different pools for different purposes):: \r\n\r\n    htop -p $(pgrep -d\",\" -g $(pgrep -f \"main-process-name-or-its-start-args\"))\r\n    \r\n``top`` will also work but is limited to 20 PIDs. Enforcing the process tree stop is also\r\ndifferent. If something goes wrong process tree should be killed like::\r\n\r\n    kill -9 -- -$(pgrep -f \"main-process-name-or-its-start-args\")\r\n\r\nKilling only main process will leave helper and worker processes running.\r\n\r\n.. note::\r\n    Pool workers intentionally ignore ``SIGINT`` and ``SIGTERM`` because these signals\r\n    propagate to children from parent process and break normal, message-based shutdown.\r\n    \r\nYou can improve the names of your worker processes by setting them in worker's \r\ninitialiser with ``setproctitle`` [6]_ (see example below).\r\n\r\nMonitoring\r\n----------\r\nGenerally it's very important to know how well your application behaves. Even more \r\nimportant it is for single-threaded (asynchronous) and multi-process applications.\r\nFor the former is critical to know that the process doesn't use 100% CPU except for rare peaks,\r\nwhich would otherwise impair IO loop's ability to schedule tasks. For the latter CPU usage \r\nshows how well current number of workers handle the load. This is being said about application\r\nmetrics.\r\n\r\n``looppool`` comes with build-in ``loopppol.utility.ResourceReporter`` which periodically \r\n(10 seconds by default) sends metrics as CPU usage, memory usage (RSS) and length of IO \r\nloop backlogs (``ioloop._handlers``, ``ioloop._callbacks`` and ``ioloop._timeouts``) to \r\nstatsd-compatible server [8]_.  \r\n\r\n\r\nLogging\r\n-------\r\nMulti-process logging is complicated. Most important part of logging is error reporting.\r\nSentry [7]_ goes a great solution to error reporting problem. It seamlessly integrates\r\nwith ``logging`` and is suggested tool to know what errors occur in your workers.\r\n\r\nInstrumentated worker\r\n---------------------\r\nFor the following code you will need to run ``pip install raven statsd setproctitle``.\r\n\r\n.. sourcecode:: python\r\n\r\n    #!/usr/bin/env python3\r\n    \r\n    \r\n    import logging\r\n    \r\n    import looppool\r\n    from looppool.utility import ResourceReporter \r\n    from statsd import StatsClient\r\n    from raven import Client\r\n    from raven.exceptions import InvalidDsn\r\n    from raven.handlers.logging import SentryHandler\r\n    from setproctitle import setproctitle\r\n    \r\n    \r\n    class InstrumentatedWorker(looppool.Worker):\r\n    \r\n        _resource_reporter = None\r\n        '''CPU, RSS and IO loop stats reporter'''\r\n        \r\n        \r\n        def _initialise(self):\r\n            setproctitle('python APP_NAME POOL_NAME pool worker')\r\n            \r\n            statsd = StatsClient('localhost', 8125, 'APP_PREFIX')\r\n            self._resource_reporter = ResourceReporter(self._ioloop, statsd,\r\n                'worker.instrumentated.process.{}'.format(self._number))\r\n            \r\n            try:\r\n                handler = SentryHandler(Client('SENTRY_DSN'))\r\n                handler.setLevel(logging.WARNING)\r\n            except InvalidDsn:\r\n                logging.exception('Cannot configure Sentry handler')\r\n            else:\r\n                logging.basicConfig(handlers=[handler], level=logging.WARNING)\r\n        \r\n        @looppool.task_done\r\n        def _process_message(self, message):\r\n            self._put_nowait((message, self._number))\r\n            \r\n        def start(self):\r\n            super().start()\r\n            \r\n            self._resource_reporter.start()\r\n            \r\n        def join(self):\r\n            self._resource_reporter.stop()\r\n            \r\n            super().join()\r\n\r\n\r\n.. [1] http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.set_blocking_log_threshold\r\n.. [2] http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.add_callback\r\n.. [3] https://docs.python.org/3/library/concurrent.futures.html\r\n.. [4] https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method\r\n.. [5] https://bitbucket.org/saaj/looppool/src/default/looppool/test.py\r\n.. [6] https://pypi.python.org/pypi/setproctitle\r\n.. [7] https://pypi.python.org/pypi/sentry\r\n.. [8] https://github.com/etsy/statsd/wiki#server-implementations", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/saaj/looppool", "keywords": "python tornado multiprocessing process-pool io-loop", "license": "LGPL-2.1+", "maintainer": "", "maintainer_email": "", "name": "Looppool", "package_url": "https://pypi.org/project/Looppool/", "platform": "Any", "project_url": "https://pypi.org/project/Looppool/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/saaj/looppool"}, "release_url": "https://pypi.org/project/Looppool/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Tornado IO loop process pool with message passing", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://bitbucket.org/saaj/looppool/addon/pipelines/home\" rel=\"nofollow\"><img alt=\"https://bitbucket-badges.atlassian.io/badge/saaj/looppool.svg?ref=default\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3edb55546f8520bf86a501d4bd93e2e0591e1ab5/68747470733a2f2f6269746275636b65742d6261646765732e61746c61737369616e2e696f2f62616467652f7361616a2f6c6f6f70706f6f6c2e7376673f7265663d64656661756c74\"></a>\n<a href=\"https://codecov.io/bitbucket/saaj/looppool/branch/default\" rel=\"nofollow\"><img alt=\"https://codecov.io/bitbucket/saaj/looppool/branch/default/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95860aedd192e7aa7a4aa477378189643d786a2d/68747470733a2f2f636f6465636f762e696f2f6269746275636b65742f7361616a2f6c6f6f70706f6f6c2f6272616e63682f64656661756c742f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/Looppool\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/Looppool.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32c826a90bd8fc065d23202cf439b86cac8e1514/68747470733a2f2f62616467652e667572792e696f2f70792f4c6f6f70706f6f6c2e706e67\"></a>\n<div id=\"looppool\">\n<h2>Looppool</h2>\n<p>Looppool is a Python 3 package for running worker process pool of Tornado IO loops. It\u2019s useful\nfor a heavy asynchronous application which doesn\u2019t fit into single process due to increasing\nCPU usage and suffers from IO loop blocking (see <tt>set_blocking_log_threshold</tt> <a href=\"#id9\" id=\"id1\" rel=\"nofollow\">[1]</a>).</p>\n<p>It was developed as a part of performance optimisation of a Tornado data extraction application.\nThe application mixed IO-bound and CPU-bound tasks. Moreover, the CPU-bound tasks were highly\ncoupled with IO loop. Because of such coupling much simpler approach of <tt>concurrent.futures</tt>\n<a href=\"#id11\" id=\"id2\" rel=\"nofollow\">[3]</a> wouldn\u2019t have helped.</p>\n<div id=\"design\">\n<h3>Design</h3>\n<p>A picture worth a thousand words.</p>\n<a href=\"https://bbcdn.githack.com/saaj/looppool/raw/default/manual/overview.seq.violet.html\" rel=\"nofollow\"><img alt=\"https://bytebucket.org/saaj/looppool/raw/default/manual/overview.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/034bcdfbd143c30cac4a176d8f812f84db3f37e8/68747470733a2f2f627974656275636b65742e6f72672f7361616a2f6c6f6f70706f6f6c2f7261772f64656661756c742f6d616e75616c2f6f766572766965772e706e67\"></a>\n<p>A few observations and notes:</p>\n<ol>\n<li>Messages are off-loaded to IO loops immediately but task and result queues are\nprotected by semaphores to not off-load more tasks on IO loops than the queue size.</li>\n<li>In fact there are <tt>n</tt> task queue, a queue per worker. Task messages are distributed\nevenly between workers.</li>\n<li><tt>add_callback</tt> <a href=\"#id10\" id=\"id3\" rel=\"nofollow\">[2]</a> is safe (and only safe) method to pass control from other\nthread to IO loop\u2019s thread.</li>\n<li>Because queue message handlers (<tt>fn1</tt> and <tt>fn2</tt>) are called from IO loop\nthey can be coroutines.</li>\n<li><tt>Pool</tt> stops its workers by sending <tt>PoisonPill</tt> task message per worker.</li>\n</ol>\n</div>\n<div id=\"worker\">\n<h3>Worker</h3>\n<p>There is a base class for  a <tt>Worker</tt>. It represents a process worker that runs its own\nTornado IO loop. It processes task messages and puts them in result queue (or just puts without\nreceiving anything). It requires override of <tt>_process_message(self, task)</tt> in a subclass\nand mandates that once the task is done, <tt>self._task_done()</tt> is called (directly in\n<tt><span class=\"pre\">try-finally</span></tt> or with <tt>@task_done</tt>), like:</p>\n<pre>def _process_message(self, task):\n    try:\n        result = 'some processing'\n        self._put_nowait(result)\n    finally:\n        self._task_done()\n</pre>\n<p><tt>WorkerSubclass._process_message</tt> may be plain function or coroutine. More details are\navailable in the package\u2019s unit test module <a href=\"#id13\" id=\"id4\" rel=\"nofollow\">[5]</a>.</p>\n<div>\n<p>Note</p>\n<p>For <tt>Pool.process_message</tt> there is also requirement to call <tt>result_done</tt> argument\nonce message is done. You can also wrap  it with <tt>@task_done</tt> in simple case when\nresult is considered ingested on return of <tt>process_message</tt>.</p>\n<p>Both requirements are bound to semaphores that limit running tasks and pending results.\nIt also affects how pool is stopped as it waits for running tasks to complete.</p>\n</div>\n<div id=\"stateful-worker\">\n<h4>Stateful worker</h4>\n<p>If you want to run stateful workers, for instance, use some periodically calculated lookup table,\nbut don\u2019t want to calculate it in every workers (e.g. burden of maintaining database connection),\nyou can send <tt>n</tt> tasks and each of <tt>n</tt> workers is guaranteed to receive it.</p>\n<p>You can also send messages to workers individually. <tt>Pool.put_nowait</tt> has optional argument\n<tt>worker_num</tt>.</p>\n<div>\n<p>Note</p>\n<p>If your process start method <a href=\"#id12\" id=\"id5\" rel=\"nofollow\">[4]</a> is <em>fork</em> (default on *nix platforms), you can share\nsome static data from parent process.</p>\n</div>\n</div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install Looppool\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div>\n<p>Note</p>\n<p>Note that the following example has 1-to-1 correspondence of input to output messages.\nBecause worker has IO loop at its disposal, it can, for example, subscribe to something\nby input message and put results later without task message.</p>\n</div>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">looppool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tornado</span> <span class=\"kn\">import</span> <span class=\"n\">gen</span><span class=\"p\">,</span> <span class=\"n\">ioloop</span><span class=\"p\">,</span> <span class=\"n\">httpclient</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FetchWorker</span><span class=\"p\">(</span><span class=\"n\">looppool</span><span class=\"o\">.</span><span class=\"n\">Worker</span><span class=\"p\">):</span>\n\n    <span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"sd\">'''Tornado asynchronous HTTP client'''</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialise</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span> <span class=\"o\">=</span> <span class=\"n\">httpclient</span><span class=\"o\">.</span><span class=\"n\">AsyncHTTPClient</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@looppool</span><span class=\"o\">.</span><span class=\"n\">task_done</span>\n    <span class=\"nd\">@gen</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_process_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_http_client</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_put_nowait</span><span class=\"p\">((</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'server'</span><span class=\"p\">)))</span>\n\n\n<span class=\"nd\">@looppool</span><span class=\"o\">.</span><span class=\"n\">task_done</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_message</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">result_done</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@gen</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">looppool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">pool_size</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">worker_class</span> <span class=\"o\">=</span> <span class=\"n\">FetchWorker</span><span class=\"p\">)</span>\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">process_message</span> <span class=\"o\">=</span> <span class=\"n\">process_message</span>\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'https://python.org/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'http://tornadoweb.org/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'https://google.com/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'https://stackoverflow.com/'</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">put_nowait</span><span class=\"p\">,</span> <span class=\"n\">urls</span><span class=\"p\">))</span>\n\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_sync</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"maintenance\">\n<h3>Maintenance</h3>\n<p>Maintaining a process group instead of one process is more tricky thing to do.\nInitially, you may want to see if your pool instance has actually spawned any\nprocesses. Here\u2019s what you can do visualise your process tree, which has main process,\none or two (depending on start method) <tt>multiprocessing</tt> helper processes, and processes\nof your <tt>looppool</tt> pools (you can use different pools for different purposes):</p>\n<pre>htop -p $(pgrep -d\",\" -g $(pgrep -f \"main-process-name-or-its-start-args\"))\n</pre>\n<p><tt>top</tt> will also work but is limited to 20 PIDs. Enforcing the process tree stop is also\ndifferent. If something goes wrong process tree should be killed like:</p>\n<pre>kill -9 -- -$(pgrep -f \"main-process-name-or-its-start-args\")\n</pre>\n<p>Killing only main process will leave helper and worker processes running.</p>\n<div>\n<p>Note</p>\n<p>Pool workers intentionally ignore <tt>SIGINT</tt> and <tt>SIGTERM</tt> because these signals\npropagate to children from parent process and break normal, message-based shutdown.</p>\n</div>\n<p>You can improve the names of your worker processes by setting them in worker\u2019s\ninitialiser with <tt>setproctitle</tt> <a href=\"#id14\" id=\"id6\" rel=\"nofollow\">[6]</a> (see example below).</p>\n<div id=\"monitoring\">\n<h4>Monitoring</h4>\n<p>Generally it\u2019s very important to know how well your application behaves. Even more\nimportant it is for single-threaded (asynchronous) and multi-process applications.\nFor the former is critical to know that the process doesn\u2019t use 100% CPU except for rare peaks,\nwhich would otherwise impair IO loop\u2019s ability to schedule tasks. For the latter CPU usage\nshows how well current number of workers handle the load. This is being said about application\nmetrics.</p>\n<p><tt>looppool</tt> comes with build-in <tt>loopppol.utility.ResourceReporter</tt> which periodically\n(10 seconds by default) sends metrics as CPU usage, memory usage (RSS) and length of IO\nloop backlogs (<tt>ioloop._handlers</tt>, <tt>ioloop._callbacks</tt> and <tt>ioloop._timeouts</tt>) to\nstatsd-compatible server <a href=\"#id16\" id=\"id7\" rel=\"nofollow\">[8]</a>.</p>\n</div>\n<div id=\"logging\">\n<h4>Logging</h4>\n<p>Multi-process logging is complicated. Most important part of logging is error reporting.\nSentry <a href=\"#id15\" id=\"id8\" rel=\"nofollow\">[7]</a> goes a great solution to error reporting problem. It seamlessly integrates\nwith <tt>logging</tt> and is suggested tool to know what errors occur in your workers.</p>\n</div>\n<div id=\"instrumentated-worker\">\n<h4>Instrumentated worker</h4>\n<p>For the following code you will need to run <tt>pip install raven statsd setproctitle</tt>.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">looppool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">looppool.utility</span> <span class=\"kn\">import</span> <span class=\"n\">ResourceReporter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statsd</span> <span class=\"kn\">import</span> <span class=\"n\">StatsClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">raven</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">raven.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">InvalidDsn</span>\n<span class=\"kn\">from</span> <span class=\"nn\">raven.handlers.logging</span> <span class=\"kn\">import</span> <span class=\"n\">SentryHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">setproctitle</span> <span class=\"kn\">import</span> <span class=\"n\">setproctitle</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InstrumentatedWorker</span><span class=\"p\">(</span><span class=\"n\">looppool</span><span class=\"o\">.</span><span class=\"n\">Worker</span><span class=\"p\">):</span>\n\n    <span class=\"n\">_resource_reporter</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"sd\">'''CPU, RSS and IO loop stats reporter'''</span>\n\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialise</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">setproctitle</span><span class=\"p\">(</span><span class=\"s1\">'python APP_NAME POOL_NAME pool worker'</span><span class=\"p\">)</span>\n\n        <span class=\"n\">statsd</span> <span class=\"o\">=</span> <span class=\"n\">StatsClient</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8125</span><span class=\"p\">,</span> <span class=\"s1\">'APP_PREFIX'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_reporter</span> <span class=\"o\">=</span> <span class=\"n\">ResourceReporter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_ioloop</span><span class=\"p\">,</span> <span class=\"n\">statsd</span><span class=\"p\">,</span>\n            <span class=\"s1\">'worker.instrumentated.process.</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_number</span><span class=\"p\">))</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">SentryHandler</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"s1\">'SENTRY_DSN'</span><span class=\"p\">))</span>\n            <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">InvalidDsn</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"s1\">'Cannot configure Sentry handler'</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">handler</span><span class=\"p\">],</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@looppool</span><span class=\"o\">.</span><span class=\"n\">task_done</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_process_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_put_nowait</span><span class=\"p\">((</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_number</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_reporter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_reporter</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n</pre>\n<table id=\"id9\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td><a href=\"http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.set_blocking_log_threshold\" rel=\"nofollow\">http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.set_blocking_log_threshold</a></td></tr>\n</tbody>\n</table>\n<table id=\"id10\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[2]</a></td><td><a href=\"http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.add_callback\" rel=\"nofollow\">http://www.tornadoweb.org/en/stable/ioloop.html#tornado.ioloop.IOLoop.add_callback</a></td></tr>\n</tbody>\n</table>\n<table id=\"id11\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[3]</a></td><td><a href=\"https://docs.python.org/3/library/concurrent.futures.html\" rel=\"nofollow\">https://docs.python.org/3/library/concurrent.futures.html</a></td></tr>\n</tbody>\n</table>\n<table id=\"id12\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id5\" rel=\"nofollow\">[4]</a></td><td><a href=\"https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method\" rel=\"nofollow\">https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method</a></td></tr>\n</tbody>\n</table>\n<table id=\"id13\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id4\" rel=\"nofollow\">[5]</a></td><td><a href=\"https://bitbucket.org/saaj/looppool/src/default/looppool/test.py\" rel=\"nofollow\">https://bitbucket.org/saaj/looppool/src/default/looppool/test.py</a></td></tr>\n</tbody>\n</table>\n<table id=\"id14\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id6\" rel=\"nofollow\">[6]</a></td><td><a href=\"https://pypi.python.org/pypi/setproctitle\" rel=\"nofollow\">https://pypi.python.org/pypi/setproctitle</a></td></tr>\n</tbody>\n</table>\n<table id=\"id15\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id8\" rel=\"nofollow\">[7]</a></td><td><a href=\"https://pypi.python.org/pypi/sentry\" rel=\"nofollow\">https://pypi.python.org/pypi/sentry</a></td></tr>\n</tbody>\n</table>\n<table id=\"id16\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id7\" rel=\"nofollow\">[8]</a></td><td><a href=\"https://github.com/etsy/statsd/wiki#server-implementations\" rel=\"nofollow\">https://github.com/etsy/statsd/wiki#server-implementations</a></td></tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2903379, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ab9f81fc0d63b7f76cdd9fed8941636a", "sha256": "e038731628f84bc821f6557dd976efc990c52774878dc976ea8fe3fb999eb555"}, "downloads": -1, "filename": "Looppool-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ab9f81fc0d63b7f76cdd9fed8941636a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5256, "upload_time": "2016-10-12T21:13:09", "upload_time_iso_8601": "2016-10-12T21:13:09.799407Z", "url": "https://files.pythonhosted.org/packages/7a/49/59118f8d7ac3fb7f38a0711318b49df103b73259105e5e34bb4d2ac46c7c/Looppool-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "df463007d7166c04261a1e33e8acdcca", "sha256": "0eb761d1f08f8d0aa8c5150f90220ea831daf7d67757fb9fda3cbd488b1279f7"}, "downloads": -1, "filename": "Looppool-0.2.0.tar.gz", "has_sig": false, "md5_digest": "df463007d7166c04261a1e33e8acdcca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12998, "upload_time": "2016-10-16T11:31:55", "upload_time_iso_8601": "2016-10-16T11:31:55.002905Z", "url": "https://files.pythonhosted.org/packages/a4/3f/1c7962f9869c0baa3ac9a81457fd8f43fc0b922c34e4ef60b14aaca31ac2/Looppool-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ed05edb9d5ab4d049e1bd6e04735cca1", "sha256": "99d13c3089cd0fb28195e42417aabbdea4b51b7a0cb6d22d3b8d3dcbe6052bcc"}, "downloads": -1, "filename": "Looppool-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ed05edb9d5ab4d049e1bd6e04735cca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13644, "upload_time": "2016-10-26T14:17:09", "upload_time_iso_8601": "2016-10-26T14:17:09.947540Z", "url": "https://files.pythonhosted.org/packages/c3/eb/afb4bb0ea6e75259dd526f2848311e87ee6696fe3471704b35f031164423/Looppool-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0b634f87ad2ab20c97c1015fe2a56afc", "sha256": "f71785f1a8c32d347750930f52864e03974933cbaa3e8b06a79d625f745b9cd6"}, "downloads": -1, "filename": "Looppool-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0b634f87ad2ab20c97c1015fe2a56afc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14054, "upload_time": "2017-01-13T10:04:51", "upload_time_iso_8601": "2017-01-13T10:04:51.629912Z", "url": "https://files.pythonhosted.org/packages/f7/b8/ea84e0dd3d494fd718985ef1f0a0ed7137f75f39a5a3e7c8f0236f6f41ed/Looppool-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b634f87ad2ab20c97c1015fe2a56afc", "sha256": "f71785f1a8c32d347750930f52864e03974933cbaa3e8b06a79d625f745b9cd6"}, "downloads": -1, "filename": "Looppool-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0b634f87ad2ab20c97c1015fe2a56afc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14054, "upload_time": "2017-01-13T10:04:51", "upload_time_iso_8601": "2017-01-13T10:04:51.629912Z", "url": "https://files.pythonhosted.org/packages/f7/b8/ea84e0dd3d494fd718985ef1f0a0ed7137f75f39a5a3e7c8f0236f6f41ed/Looppool-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}