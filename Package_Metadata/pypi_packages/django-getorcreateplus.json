{"info": {"author": "Vimal Aravindashan", "author_email": "vimal.aravindashan@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "======================\nDjango GetOrCreatePlus\n======================\n\nDjango GetOrCreatePlus is a set of queryset mixins to create custom querysets that can:\n\n* Cache results of get_or_create() or update_or_create()\n\n* Always use get_or_create() when get() calls are made\n\n* Allow non-atomic get_or_create() to avoid nested transaction points\n\nQuick start\n-----------\n\n.. code:: python\n\n    # models.py\n    \n    from django.db import models\n    from django.core.cache import caches\n    from getorcreateplus import CachedGetOrCreateMixin, AlwaysGetOrCreateMixin, NonAtomicGetOrCreateMixin\n    \n    \n    # sample for CachedGetOrCreateMixin (see below for changes to be made in settings.py)\n    class CachedQuerySet(CachedGetOrCreateMixin, models.QuerySet):\n        pass\n    \n    class CachedManager(models.manager.BaseManager.from_queryset(CachedQuerySet)):\n        use_for_related_fields = True\n    \n    class CachedImmutableModel(models.Model):\n        foo = models.CharField(max_length=8)\n        bar = models.IntegerField(null=True)\n        \n        objects = CachedManager()\n    \n    \n    obj1, _ = CachedImmutableModel.objects.get_or_create(foo='FooBar') # fetches from db\n    obj2, _ = CachedImmutableModel.objects.get_or_create(foo='FooBar') # hits cache\n    \n    \n    class CachedMutableObject(models.Model):\n        foo = models.CharField(max_length=8)\n        bar = models.IntegerField(null=True)\n        \n        objects = CachedManager()\n        \n        def save(self, **kwargs):\n            cache = caches[self._meta.model_name]\n            cache.delete(self.pk)\n            return super(CachedMutableObject, self).save(**kwargs)\n    \n    \n    obj1, _ = CachedMutableModel.objects.get_or_create(foo='FooBar') # fetches from db\n    obj1.bar = 1\n    obj1.save() # invalidate object cache\n    obj2, _ = CachedMutableModel.objects.get_or_create(foo='FooBar') # fetches from db\n    obj3, _ = CachedMutableModel.objects.get_or_create(foo='FooBar') # hits cache\n    \n    \n    # sample for NonAtomicGetOrCreateMixin\n    class NonAtomicQuerySet(NonAtomicGetOrCreateMixin, models.QuerySet):\n        pass\n    \n    class NonAtomicManager(models.manager.BaseManager.from_queryset(NonAtomicQuerySet)):\n        use_for_related_fields = True\n    \n    class ParentQuerySet(NonAtomicQuerySet):\n        def create(self, **kwargs):\n           children = kwargs.pop('children', [])\n           parent = super(ParentQuerySet, self).create(**kwargs)\n           for child in children:\n               parent.children.get_or_create(**child)\n           return parent\n    \n    class ParentManager(models.manager.BaseManager.from_queryset(ParentQuerySet)):\n        use_for_related_fields = True\n    \n    class ParentModel(models.Model):\n        foo = models.CharField(max_length=8)\n        \n        objects = ParentManager()\n    \n    class ChildModel(models.Model):\n        parent = models.ForeignKey(Parent, related_name='children')\n        bar = models.CharField(max_length=8)\n        \n        objects = NonAtomicManager()\n    \n    \n    from django.db import transaction\n    \n    with transaction.atomic():\n        parent, _ = ParentModel.objects.get_or_create(foo='Foo', defaults={children: [{bar: 'Bar'}, {bar: 'Baz'}]})\n    \n    \n    # samples for combining mixins CachedGetOrCreateMixin, AlwaysGetOrCreateMixin, NonAtomicGetOrCreateMixin\n    class NonAtomicAlwaysQuerySet(NonAtomicGetOrCreateMixin, AlwaysGetOrCreateMixin, models.QuerySet):\n        pass\n    \n    class AlwaysCachedQuerySet(AlwaysGetOrCreateMixin, CachedGetOrCreateMixin, models.QuerySet):\n        pass\n    \n    class PlusQuerySet(CachedGetOrCreateMixin, AlwaysGetOrCreateMixin, NonAtomicGetOrCreateMixin, models.QuerySet):\n        pass\n\n`CachedGetOrCreateMixin` uses Django caches. The keys are cached to the\n`default` cache, and the objects are cached using alias\n`model._meta.model_name`.\n\n**NOTE:** If you have models by the same name in different apps both using\nCachedGetOrCreateMixin, this will fail.\n\n.. code:: python\n\n    # settings.py\n    # assuming use of django-connection-url (shameless self-plug)\n    \n    import connection_url\n    \n    CACHES = {\n        'default': connection_url.config('locmem:///'),\n        'cachedimmutablemodel': connection_url.config('REDIS_URL'),\n        'cachedmutablemodel': connection_url.config('MEMCACHED_URL'),\n    }", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/f0r4y312/django-getorcreateplus", "keywords": "django get_or_create update_or_create get create update cache atomic non-atomic", "license": "Apache-2.0", "maintainer": null, "maintainer_email": null, "name": "django-getorcreateplus", "package_url": "https://pypi.org/project/django-getorcreateplus/", "platform": "any", "project_url": "https://pypi.org/project/django-getorcreateplus/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/f0r4y312/django-getorcreateplus"}, "release_url": "https://pypi.org/project/django-getorcreateplus/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Mixins to cache, force and/or use non-atomic Model.objects.get_or_create() calls.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django GetOrCreatePlus is a set of queryset mixins to create custom querysets that can:</p>\n<ul>\n<li>Cache results of get_or_create() or update_or_create()</li>\n<li>Always use get_or_create() when get() calls are made</li>\n<li>Allow non-atomic get_or_create() to avoid nested transaction points</li>\n</ul>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<pre><span class=\"c1\"># models.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">caches</span>\n<span class=\"kn\">from</span> <span class=\"nn\">getorcreateplus</span> <span class=\"kn\">import</span> <span class=\"n\">CachedGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">AlwaysGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">NonAtomicGetOrCreateMixin</span>\n\n\n<span class=\"c1\"># sample for CachedGetOrCreateMixin (see below for changes to be made in settings.py)</span>\n<span class=\"k\">class</span> <span class=\"nc\">CachedQuerySet</span><span class=\"p\">(</span><span class=\"n\">CachedGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CachedManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">BaseManager</span><span class=\"o\">.</span><span class=\"n\">from_queryset</span><span class=\"p\">(</span><span class=\"n\">CachedQuerySet</span><span class=\"p\">)):</span>\n    <span class=\"n\">use_for_related_fields</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CachedImmutableModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">CachedManager</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">obj1</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">CachedImmutableModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'FooBar'</span><span class=\"p\">)</span> <span class=\"c1\"># fetches from db</span>\n<span class=\"n\">obj2</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">CachedImmutableModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'FooBar'</span><span class=\"p\">)</span> <span class=\"c1\"># hits cache</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CachedMutableObject</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">CachedManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">model_name</span><span class=\"p\">]</span>\n        <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CachedMutableObject</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">obj1</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">CachedMutableModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'FooBar'</span><span class=\"p\">)</span> <span class=\"c1\"># fetches from db</span>\n<span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span> <span class=\"c1\"># invalidate object cache</span>\n<span class=\"n\">obj2</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">CachedMutableModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'FooBar'</span><span class=\"p\">)</span> <span class=\"c1\"># fetches from db</span>\n<span class=\"n\">obj3</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">CachedMutableModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'FooBar'</span><span class=\"p\">)</span> <span class=\"c1\"># hits cache</span>\n\n\n<span class=\"c1\"># sample for NonAtomicGetOrCreateMixin</span>\n<span class=\"k\">class</span> <span class=\"nc\">NonAtomicQuerySet</span><span class=\"p\">(</span><span class=\"n\">NonAtomicGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NonAtomicManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">BaseManager</span><span class=\"o\">.</span><span class=\"n\">from_queryset</span><span class=\"p\">(</span><span class=\"n\">NonAtomicQuerySet</span><span class=\"p\">)):</span>\n    <span class=\"n\">use_for_related_fields</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ParentQuerySet</span><span class=\"p\">(</span><span class=\"n\">NonAtomicQuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n       <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s1\">'children'</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n       <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ParentQuerySet</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n       <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">children</span><span class=\"p\">:</span>\n           <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">child</span><span class=\"p\">)</span>\n       <span class=\"k\">return</span> <span class=\"n\">parent</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ParentManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">BaseManager</span><span class=\"o\">.</span><span class=\"n\">from_queryset</span><span class=\"p\">(</span><span class=\"n\">ParentQuerySet</span><span class=\"p\">)):</span>\n    <span class=\"n\">use_for_related_fields</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ParentModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">ParentManager</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Parent</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'children'</span><span class=\"p\">)</span>\n    <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">NonAtomicManager</span><span class=\"p\">()</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">ParentModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'Foo'</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">children</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"s1\">'Bar'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"s1\">'Baz'</span><span class=\"p\">}]})</span>\n\n\n<span class=\"c1\"># samples for combining mixins CachedGetOrCreateMixin, AlwaysGetOrCreateMixin, NonAtomicGetOrCreateMixin</span>\n<span class=\"k\">class</span> <span class=\"nc\">NonAtomicAlwaysQuerySet</span><span class=\"p\">(</span><span class=\"n\">NonAtomicGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">AlwaysGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AlwaysCachedQuerySet</span><span class=\"p\">(</span><span class=\"n\">AlwaysGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">CachedGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PlusQuerySet</span><span class=\"p\">(</span><span class=\"n\">CachedGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">AlwaysGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">NonAtomicGetOrCreateMixin</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p><cite>CachedGetOrCreateMixin</cite> uses Django caches. The keys are cached to the\n<cite>default</cite> cache, and the objects are cached using alias\n<cite>model._meta.model_name</cite>.</p>\n<p><strong>NOTE:</strong> If you have models by the same name in different apps both using\nCachedGetOrCreateMixin, this will fail.</p>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"c1\"># assuming use of django-connection-url (shameless self-plug)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">connection_url</span>\n\n<span class=\"n\">CACHES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">connection_url</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'locmem:///'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'cachedimmutablemodel'</span><span class=\"p\">:</span> <span class=\"n\">connection_url</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'REDIS_URL'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'cachedmutablemodel'</span><span class=\"p\">:</span> <span class=\"n\">connection_url</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"s1\">'MEMCACHED_URL'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2475582, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9f50e3d2366cdde89af35fbca9562c8e", "sha256": "c6514fc3e88b6585ad3eec0fac2252a3a956216610e3b08a3cb2f4a4f3695a45"}, "downloads": -1, "filename": "django_getorcreateplus-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "9f50e3d2366cdde89af35fbca9562c8e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5930, "upload_time": "2016-11-22T06:46:58", "upload_time_iso_8601": "2016-11-22T06:46:58.307013Z", "url": "https://files.pythonhosted.org/packages/d9/da/6d19644d51f488321f28f4433a443fa4bddfaa42e9887622b4707fe51837/django_getorcreateplus-0.1.0-py2-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f50e3d2366cdde89af35fbca9562c8e", "sha256": "c6514fc3e88b6585ad3eec0fac2252a3a956216610e3b08a3cb2f4a4f3695a45"}, "downloads": -1, "filename": "django_getorcreateplus-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "9f50e3d2366cdde89af35fbca9562c8e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5930, "upload_time": "2016-11-22T06:46:58", "upload_time_iso_8601": "2016-11-22T06:46:58.307013Z", "url": "https://files.pythonhosted.org/packages/d9/da/6d19644d51f488321f28f4433a443fa4bddfaa42e9887622b4707fe51837/django_getorcreateplus-0.1.0-py2-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:35:52 2020"}