{"info": {"author": "Oscar LASM", "author_email": "lasm.landry@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Natural Language :: French", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Object Brokering", "Topic :: System :: Distributed Computing"], "description": "rpcviaredis\n==========\n*Using redis server to build RPC environment - by Oscar LASM*\n\n----------\nrpcviaredis intended to provide a simple tool for establishing a pattern RPC over an installation Redis.\nImplement python, it is composed of:\n\n - **Server** which serve remote commands\n - **Client** Use to connect and call commands hosted on server\n - **Transport protocol** Use to pack and unpack request and response during communication process\n\n**Examples**:\n\nServer implementation:\n\n    from rpcviaredis import *\n\n\tclass DummyServer(ServerRPC):\n\n\t\tdef sum(self, x, y):\n\t        return Response(response=x+y, exception=None, reason=None, return_code=200)\n\n\t    def naive_div(self, x, y):\n\t        return Response(response=x/y, exception=None, reason=None, return_code=200)\n\n\t    def multiplication(self, x, y):\n\t        return Response(response=x*y, exception=None, reason=None, return_code=200)\n\n\tif __name__ == \"__main__\":\n\t    import redis\n\n\t    r = redis.StrictRedis(db=2)\n\t    s = DummyServer(r, 'test-rpc', transport_klass=JSONTransport)\n\t    try:\n\t        s.start()\n\t    except KeyboardInterrupt:\n\t        pass\n\t    finally:\n\t        s.stop()\n\nClient Implementation\n\n    import redis\n    from rpcviaredis import Client\n\n    r = redis.StrictRedis(db=2)\n    c = Client(r, 'test-rpc', transport_klass=JsonTransport)\n    retval = c.sum(1,2)\n    print(retval.response) # print 3", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moas/rpcviaredis", "keywords": "Redis,RPC", "license": "GNU V2.0", "maintainer": null, "maintainer_email": null, "name": "rpcviaredis", "package_url": "https://pypi.org/project/rpcviaredis/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rpcviaredis/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/moas/rpcviaredis"}, "release_url": "https://pypi.org/project/rpcviaredis/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Build RPC pattern via redis connection", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            rpcviaredis<br>==========<br>*Using redis server to build RPC environment - by Oscar LASM*<br><br>----------<br>rpcviaredis intended to provide a simple tool for establishing a pattern RPC over an installation Redis.<br>Implement python, it is composed of:<br><br> - **Server** which serve remote commands<br> - **Client** Use to connect and call commands hosted on server<br> - **Transport protocol** Use to pack and unpack request and response during communication process<br><br>**Examples**:<br><br>Server implementation:<br><br>    from rpcviaredis import *<br><br>\tclass DummyServer(ServerRPC):<br><br>\t\tdef sum(self, x, y):<br>\t        return Response(response=x+y, exception=None, reason=None, return_code=200)<br><br>\t    def naive_div(self, x, y):<br>\t        return Response(response=x/y, exception=None, reason=None, return_code=200)<br><br>\t    def multiplication(self, x, y):<br>\t        return Response(response=x*y, exception=None, reason=None, return_code=200)<br><br>\tif __name__ == \"__main__\":<br>\t    import redis<br><br>\t    r = redis.StrictRedis(db=2)<br>\t    s = DummyServer(r, 'test-rpc', transport_klass=JSONTransport)<br>\t    try:<br>\t        s.start()<br>\t    except KeyboardInterrupt:<br>\t        pass<br>\t    finally:<br>\t        s.stop()<br><br>Client Implementation<br><br>    import redis<br>    from rpcviaredis import Client<br><br>    r = redis.StrictRedis(db=2)<br>    c = Client(r, 'test-rpc', transport_klass=JsonTransport)<br>    retval = c.sum(1,2)<br>    print(retval.response) # print 3\n          </div>"}, "last_serial": 1699322, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "87cc8fa0b4619346a3faa25f39ed9052", "sha256": "dd21f6cf58b9c43110f9554fa3f932ed5bca9ce1773c6ec9abfbf6ce45721903"}, "downloads": -1, "filename": "rpcviaredis-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87cc8fa0b4619346a3faa25f39ed9052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5342, "upload_time": "2015-08-29T11:31:41", "upload_time_iso_8601": "2015-08-29T11:31:41.698072Z", "url": "https://files.pythonhosted.org/packages/da/23/f58c71d7e35b6ff9e7811d569c4faa34b49cef349714c75fff3b47c03442/rpcviaredis-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87cc8fa0b4619346a3faa25f39ed9052", "sha256": "dd21f6cf58b9c43110f9554fa3f932ed5bca9ce1773c6ec9abfbf6ce45721903"}, "downloads": -1, "filename": "rpcviaredis-0.1.1.tar.gz", "has_sig": false, "md5_digest": "87cc8fa0b4619346a3faa25f39ed9052", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5342, "upload_time": "2015-08-29T11:31:41", "upload_time_iso_8601": "2015-08-29T11:31:41.698072Z", "url": "https://files.pythonhosted.org/packages/da/23/f58c71d7e35b6ff9e7811d569c4faa34b49cef349714c75fff3b47c03442/rpcviaredis-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:59 2020"}