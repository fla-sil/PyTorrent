{"info": {"author": "felix021", "author_email": "felix021@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "pyshmht\r\n=======\r\n\r\n**Sharing memory based** Hash Table extension for Python\r\n\r\nFor examples, see test cases in python files (pyshmht/Cacher.py, pyshmht/HashTable.py), where you can find performance tests as well.\r\n\r\nPerformance\r\n===========\r\n\r\ncapacity=200M, 64 bytes key/value tests, tested on (Xeon E5-2670 0 @ 2.60GHz, 128GB ram)\r\n\r\n* hashtable.c (raw hash table in c, tested on `malloc`ed memory)\r\n> set: 0.93 Million iops;  \r\n> get: 2.35 Million iops;\r\n\r\n* performance\\_test.py (raw python binding)\r\n> set: 451k iops;  \r\n> get: 272k iops;\r\n\r\n* HashTable.py (simple wrapper, no serialization)\r\n> set: 354k iops;  \r\n> get: 202k iops;\r\n\r\n* Cacher.py (cached wrapper, with serialization)\r\n> set: 501k iops (cached), 228k iops (after write\\_back);  \r\n> get: 560k iops (cached), 238k iops (no cache);\r\n\r\n* python native dict\r\n> set: 741k iops;  \r\n> get: 390k iops;\r\n\r\nNotice\r\n======\r\n\r\nIn hashtable.c, default max key length is `256 - 4`, max value length is `1024 - 4`; you can change `bucket_size` and `max_key_size` manually, but bear in mind that increasing these two arguments will result in larger memory consumption.\r\n\r\nIf you find any bugs, please submit an issue or send me a pull request, I'll see to it ASAP :)\r\n\r\np.s. `hashtable.c` is independent (i.e. has nothing to do with python), you can use it in other projects if needed. :P", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/felix021/pyshmht", "keywords": "python extension sharing memory based hash table", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyshmht", "package_url": "https://pypi.org/project/pyshmht/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyshmht/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/felix021/pyshmht"}, "release_url": "https://pypi.org/project/pyshmht/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "provide shared memory based hash table for python", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            pyshmht\n<br>=======\n<br>\n<br>**Sharing memory based** Hash Table extension for Python\n<br>\n<br>For examples, see test cases in python files (pyshmht/Cacher.py, pyshmht/HashTable.py), where you can find performance tests as well.\n<br>\n<br>Performance\n<br>===========\n<br>\n<br>capacity=200M, 64 bytes key/value tests, tested on (Xeon E5-2670 0 @ 2.60GHz, 128GB ram)\n<br>\n<br>* hashtable.c (raw hash table in c, tested on `malloc`ed memory)\n<br>&gt; set: 0.93 Million iops;  \n<br>&gt; get: 2.35 Million iops;\n<br>\n<br>* performance\\_test.py (raw python binding)\n<br>&gt; set: 451k iops;  \n<br>&gt; get: 272k iops;\n<br>\n<br>* HashTable.py (simple wrapper, no serialization)\n<br>&gt; set: 354k iops;  \n<br>&gt; get: 202k iops;\n<br>\n<br>* Cacher.py (cached wrapper, with serialization)\n<br>&gt; set: 501k iops (cached), 228k iops (after write\\_back);  \n<br>&gt; get: 560k iops (cached), 238k iops (no cache);\n<br>\n<br>* python native dict\n<br>&gt; set: 741k iops;  \n<br>&gt; get: 390k iops;\n<br>\n<br>Notice\n<br>======\n<br>\n<br>In hashtable.c, default max key length is `256 - 4`, max value length is `1024 - 4`; you can change `bucket_size` and `max_key_size` manually, but bear in mind that increasing these two arguments will result in larger memory consumption.\n<br>\n<br>If you find any bugs, please submit an issue or send me a pull request, I'll see to it ASAP :)\n<br>\n<br>p.s. `hashtable.c` is independent (i.e. has nothing to do with python), you can use it in other projects if needed. :P\n          </div>"}, "last_serial": 1074236, "releases": {"0.0.1": [], "0.0.2": [{"comment_text": "Tested on python 2.7.3, ubuntu 12.04.4 x86_64.\t", "digests": {"md5": "f9e4ecd232d7b403621005468a1c6440", "sha256": "dde01c386c92722230b63e3df2fda6395182c4411b493dead40f730cfa23c194"}, "downloads": -1, "filename": "pyshmht-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f9e4ecd232d7b403621005468a1c6440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9360, "upload_time": "2014-04-25T03:29:37", "upload_time_iso_8601": "2014-04-25T03:29:37.122994Z", "url": "https://files.pythonhosted.org/packages/58/4d/ed2c4c58679c66eb260fa2ea61199c9c57aa302e2a3c64ba84293402af42/pyshmht-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "Tested on python 2.7.3, ubuntu 12.04.4 x86_64.\t", "digests": {"md5": "f9e4ecd232d7b403621005468a1c6440", "sha256": "dde01c386c92722230b63e3df2fda6395182c4411b493dead40f730cfa23c194"}, "downloads": -1, "filename": "pyshmht-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f9e4ecd232d7b403621005468a1c6440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9360, "upload_time": "2014-04-25T03:29:37", "upload_time_iso_8601": "2014-04-25T03:29:37.122994Z", "url": "https://files.pythonhosted.org/packages/58/4d/ed2c4c58679c66eb260fa2ea61199c9c57aa302e2a3c64ba84293402af42/pyshmht-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:58 2020"}