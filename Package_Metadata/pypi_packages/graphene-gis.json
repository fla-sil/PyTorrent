{"info": {"author": "Rishabh Mehta", "author_email": "eternal.blizzard23@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "### graphene-gis\n\n[![CircleCI](https://circleci.com/gh/EverWinter23/rover.svg?style=shield&circle-token=2b8acc12b6bfec4ef9b68c560e61e7f389f70be3)](https://circleci.com/gh/EverWinter23/rover)\n\n### INSTALLATION\n\n`django==2.2` is supported. Install the `graphene-gis` with pip:\n\n```bash\n$ pip install graphene-gis\n```\n\nAdd it to your `INSTALLED_APPS` in `settings.py`:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'graphene_gis',\n]\n```\n\n### USAGE\n\nThis extension can works out of the box with `WKT`, but if you want to use\n`GeoJSON` for input while mutations, install `rest_framework_gis` alongside\nit.\n\n#### QUERY\n\n**models.py**\n\n```python\nfrom django.contrib.gis.db import models\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=255)\n    location = models.PointField()\n\n```\n\n**schema.py**\n\n```python\nfrom graphene_django import DjangoObjectType\nfrom graphene_gis.converter import gis_converter  # noqa\n\nclass PlaceType(DjangoObjectType):\n    class Meta:\n        model = Place\n\nclass Query(graphene.ObjectType):\n    place = graphene.Field(Place)\n\n    def resolve_place(self, info):\n        return Place(name=\"San Andreas\", location=\"POINT(34.2 54.3)\")\n\nschema = graphene.Schema(query=Query)\n```\n\n**Query**\n\n```\nquery {\n    place {\n        name\n        location\n    }\n}\n```\n\n**Query Output**\n\n```json\n\"place\": {\n    \"name\": \"San Andreas\",\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [34.2, 54.3]\n    }\n}\n```\n\n#### MUTATION\n\n**schema.py**\n\n```python\nclass PointModelType(graphene.ObjectType):\n    location = graphene.Field(graphene.String, to=scalars.PointScalar())\n\nclass CreatePointModelType(graphene.Mutation):\n    point = graphene.Field(PointModelType)\n\n    class Arguments:\n        location = graphene.Argument(scalars.PointScalar)\n\n    def mutate(root, info, location):\n        point = PointModelType(location=location)\n        return CreatePointModelType(point=point)\n```\n\n**Mutation**\n\n```\nmutation {\n    createPoint (location: \"POINT(3 5)\") {\n        point {\n            location\n        }\n    }\n}\n```\n\n**Mutation Output**\n\n```json\n\"createPoint\": {\n    \"point\": {\n        \"location\": \"{'type': 'Point', 'coordinates': [3.0, 5.0]}\"\n    }\n}\n```\n\n#### EXTRA STUFF\n\nA JSON Converter, so if you're familiar with `graphene`, you know that\nit sends `JSONField` as stringified JSON, but with a lot of data, you\ndont want to parse it in the frontend, I know it goes against having a\nstatic type, but if you're not modifying the data on the frontend, plus\nyou're using `typescript` which enforces types anyway, it works like a\ncharm.\n\nAnd geojson contains `JSONField` like properties section, and parsing\nevery node in the frontend is cumbersome if you have ~9000 entries, also\ntime consuming.\n\nOutput without using `json_converter`\n\n```json\n{\n  \"data\": {\n    \"vectors\": [\n      {\n        \"type\": \"Feature\",\n        \"properties\": \"{\\\"Name\\\": \\\"Blues\\\", \\\"area\\\": 0.0006971253332413299, \\\"bbox\\\": [74.59639001261124, 24.7077612714826, 74.61615129922414, 24.755648349214077], \\\"perimeter\\\": 0.15862406542812008}\",\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [...]\n        }\n      }\n    ]\n  }\n}\n```\n\nNow if you're working with GeoJSON, you're not working with just one vector,\nyou're probably working with thousands. Voila `json_converter`!!! Now you can\nplot it directly, if you store it in such a way! I want go into how to structure\nthe model.\n\n```json\n{\n  \"data\": {\n    \"allVectors\": [\n      {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"Name\": \"Blues\",\n          \"area\": 0.0006971253332413299,\n          \"bbox\": [\n            74.59639001261124,\n            24.7077612714826,\n            74.61615129922414,\n            24.755648349214077\n          ],\n          \"perimeter\": 0.15862406542812008\n        },\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [...]\n        }\n      }\n    ]\n  }\n}\n```\n\n### AUTHOR\n\nRishabh Mehta <eternal.blizzard23@gmail.com>\n\nIf you have any issues or queries regarding acadbot, please don't\nhesitate to email the **@author**. I have a lot of free time.\n\nI forget stuff, this section is for anyone who wants to build the package.\n\n```bash\n$ python setup.py sdist\n$ twine upload dist/*\n```\n\n### LICENSE [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis code falls under the MIT license which permits the reuse of the proprietary software provided that all copies of the licensed software include a copy of the MIT License terms and the copyright notice. Go crazy!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EverWinter23/graphene-gis", "keywords": "api graphql graphene geos gis", "license": "", "maintainer": "", "maintainer_email": "", "name": "graphene-gis", "package_url": "https://pypi.org/project/graphene-gis/", "platform": "any", "project_url": "https://pypi.org/project/graphene-gis/", "project_urls": {"Homepage": "https://github.com/EverWinter23/graphene-gis"}, "release_url": "https://pypi.org/project/graphene-gis/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "GIS support for graphene-django", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>graphene-gis</h3>\n<p><a href=\"https://circleci.com/gh/EverWinter23/rover\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7789464e589b86884744cd548d4cd63dfad20015/68747470733a2f2f636972636c6563692e636f6d2f67682f4576657257696e74657232332f726f7665722e7376673f7374796c653d736869656c6426636972636c652d746f6b656e3d32623861636331326236626665633465663962363863353630653631653766333839663730626533\"></a></p>\n<h3>INSTALLATION</h3>\n<p><code>django==2.2</code> is supported. Install the <code>graphene-gis</code> with pip:</p>\n<pre>$ pip install graphene-gis\n</pre>\n<p>Add it to your <code>INSTALLED_APPS</code> in <code>settings.py</code>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'graphene_gis'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>USAGE</h3>\n<p>This extension can works out of the box with <code>WKT</code>, but if you want to use\n<code>GeoJSON</code> for input while mutations, install <code>rest_framework_gis</code> alongside\nit.</p>\n<h4>QUERY</h4>\n<p><strong>models.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.gis.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Place</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PointField</span><span class=\"p\">()</span>\n</pre>\n<p><strong>schema.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">graphene_django</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoObjectType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_gis.converter</span> <span class=\"kn\">import</span> <span class=\"n\">gis_converter</span>  <span class=\"c1\"># noqa</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PlaceType</span><span class=\"p\">(</span><span class=\"n\">DjangoObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Place</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">place</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_place</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Place</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"San Andreas\"</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">\"POINT(34.2 54.3)\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Query</strong></p>\n<pre><code>query {\n    place {\n        name\n        location\n    }\n}\n</code></pre>\n<p><strong>Query Output</strong></p>\n<pre><span class=\"s2\">\"place\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"San Andreas\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"location\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Point\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">34.2</span><span class=\"p\">,</span> <span class=\"mf\">54.3</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>MUTATION</h4>\n<p><strong>schema.py</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PointModelType</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"n\">scalars</span><span class=\"o\">.</span><span class=\"n\">PointScalar</span><span class=\"p\">())</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CreatePointModelType</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Mutation</span><span class=\"p\">):</span>\n    <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">PointModelType</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Arguments</span><span class=\"p\">:</span>\n        <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">(</span><span class=\"n\">scalars</span><span class=\"o\">.</span><span class=\"n\">PointScalar</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">mutate</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"p\">):</span>\n        <span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"n\">PointModelType</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"n\">location</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">CreatePointModelType</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"o\">=</span><span class=\"n\">point</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Mutation</strong></p>\n<pre><code>mutation {\n    createPoint (location: \"POINT(3 5)\") {\n        point {\n            location\n        }\n    }\n}\n</code></pre>\n<p><strong>Mutation Output</strong></p>\n<pre><span class=\"s2\">\"createPoint\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"point\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"location\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{'type': 'Point', 'coordinates': [3.0, 5.0]}\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>EXTRA STUFF</h4>\n<p>A JSON Converter, so if you're familiar with <code>graphene</code>, you know that\nit sends <code>JSONField</code> as stringified JSON, but with a lot of data, you\ndont want to parse it in the frontend, I know it goes against having a\nstatic type, but if you're not modifying the data on the frontend, plus\nyou're using <code>typescript</code> which enforces types anyway, it works like a\ncharm.</p>\n<p>And geojson contains <code>JSONField</code> like properties section, and parsing\nevery node in the frontend is cumbersome if you have ~9000 entries, also\ntime consuming.</p>\n<p>Output without using <code>json_converter</code></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"vectors\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Feature\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{\\\"Name\\\": \\\"Blues\\\", \\\"area\\\": 0.0006971253332413299, \\\"bbox\\\": [74.59639001261124, 24.7077612714826, 74.61615129922414, 24.755648349214077], \\\"perimeter\\\": 0.15862406542812008}\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"geometry\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"err\">...</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now if you're working with GeoJSON, you're not working with just one vector,\nyou're probably working with thousands. Voila <code>json_converter</code>!!! Now you can\nplot it directly, if you store it in such a way! I want go into how to structure\nthe model.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"allVectors\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Feature\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Blues\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"area\"</span><span class=\"p\">:</span> <span class=\"mf\">0.0006971253332413299</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"bbox\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"mf\">74.59639001261124</span><span class=\"p\">,</span>\n            <span class=\"mf\">24.7077612714826</span><span class=\"p\">,</span>\n            <span class=\"mf\">74.61615129922414</span><span class=\"p\">,</span>\n            <span class=\"mf\">24.755648349214077</span>\n          <span class=\"p\">],</span>\n          <span class=\"nt\">\"perimeter\"</span><span class=\"p\">:</span> <span class=\"mf\">0.15862406542812008</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"geometry\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"err\">...</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>AUTHOR</h3>\n<p>Rishabh Mehta <a href=\"mailto:eternal.blizzard23@gmail.com\">eternal.blizzard23@gmail.com</a></p>\n<p>If you have any issues or queries regarding acadbot, please don't\nhesitate to email the <strong>@author</strong>. I have a lot of free time.</p>\n<p>I forget stuff, this section is for anyone who wants to build the package.</p>\n<pre>$ python setup.py sdist\n$ twine upload dist/*\n</pre>\n<h3>LICENSE <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></h3>\n<p>This code falls under the MIT license which permits the reuse of the proprietary software provided that all copies of the licensed software include a copy of the MIT License terms and the copyright notice. Go crazy!</p>\n\n          </div>"}, "last_serial": 6801064, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9b7509afa392eeb1e7d47f86a58b8c26", "sha256": "5b0d4badd46be9db76787a21c3d4758e88809d3ea0aacd4984af8800948c1d3e"}, "downloads": -1, "filename": "graphene_gis-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b7509afa392eeb1e7d47f86a58b8c26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2677, "upload_time": "2019-10-09T11:35:44", "upload_time_iso_8601": "2019-10-09T11:35:44.017747Z", "url": "https://files.pythonhosted.org/packages/42/2a/57d32677da984cc50fbce0342932a6c0f0864a56b6bb7ce42e0366603eed/graphene_gis-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cc482c67773dd40f9b165b7776e14c5d", "sha256": "75ea657851bd6da164503343c82823b9cc6dd2344e4de8ce3e6cddab6651e5c3"}, "downloads": -1, "filename": "graphene_gis-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc482c67773dd40f9b165b7776e14c5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2798, "upload_time": "2019-10-09T11:35:46", "upload_time_iso_8601": "2019-10-09T11:35:46.758040Z", "url": "https://files.pythonhosted.org/packages/32/97/40135c06eba176c5fc5dbdd684ac49aed019c66fdaba1911696e35be7553/graphene_gis-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d1839c1a330793cf07dab2cb1c02bad", "sha256": "217648048904ad3c59a1bb76fa0336f4cd5015cc52816ec2dee0c2726f55bd37"}, "downloads": -1, "filename": "graphene-gis-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6d1839c1a330793cf07dab2cb1c02bad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2107, "upload_time": "2019-10-09T11:35:48", "upload_time_iso_8601": "2019-10-09T11:35:48.623329Z", "url": "https://files.pythonhosted.org/packages/bc/d4/59189d1dac4af8677af4c65fabd5cb61fdc7d85f5f24d940724bb2542376/graphene-gis-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ea3ccbf6365b42ebcb7b31b4bb35405e", "sha256": "472a39f4cda02a08526e747a75e144aabd81ced1a0910b1ef704a5b830f476bb"}, "downloads": -1, "filename": "graphene-gis-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ea3ccbf6365b42ebcb7b31b4bb35405e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4623, "upload_time": "2020-03-12T18:25:15", "upload_time_iso_8601": "2020-03-12T18:25:15.455505Z", "url": "https://files.pythonhosted.org/packages/6e/50/8478edb7c20795d8e29b6255b1951c38eab77f3d61189f2c3274835aa58d/graphene-gis-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "07e5f326a5184973f8edf33bdc08827b", "sha256": "8f8413fed173187bd4655b360e9670b777b4ca03cedc90bf5073c71e043c4f34"}, "downloads": -1, "filename": "graphene-gis-0.0.4.tar.gz", "has_sig": false, "md5_digest": "07e5f326a5184973f8edf33bdc08827b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4624, "upload_time": "2020-03-12T18:38:21", "upload_time_iso_8601": "2020-03-12T18:38:21.806422Z", "url": "https://files.pythonhosted.org/packages/c4/34/00b4d66507c1b647558ada62a595fbb1eff942a80204f285ab08a3ef08b6/graphene-gis-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07e5f326a5184973f8edf33bdc08827b", "sha256": "8f8413fed173187bd4655b360e9670b777b4ca03cedc90bf5073c71e043c4f34"}, "downloads": -1, "filename": "graphene-gis-0.0.4.tar.gz", "has_sig": false, "md5_digest": "07e5f326a5184973f8edf33bdc08827b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4624, "upload_time": "2020-03-12T18:38:21", "upload_time_iso_8601": "2020-03-12T18:38:21.806422Z", "url": "https://files.pythonhosted.org/packages/c4/34/00b4d66507c1b647558ada62a595fbb1eff942a80204f285ab08a3ef08b6/graphene-gis-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:44 2020"}