{"info": {"author": "Alex Plugaru", "author_email": "alex@plugaru.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# kuku\n\n[![Build Status](https://travis-ci.org/xarg/kuku.svg?branch=master)](https://travis-ci.org/xarg/kuku)\n\nkuku renders kubernetes yaml manifests using python templates. It is similar to [helm](https://helm.sh/) in usage (templates dir, value files, etc..).\n\n\n## Installation:\n\n```bash\npip3 install kuku\n```\n\nor using the docker image:\n\n```bash\ndocker pull xarg/kuku\n\n# Example usage (see more below):\ndocker run -v $(pwd)/:/tmp/ --rm xarg/kuku render -f /tmp/your-values.yaml /tmp/your-templates/ | kubectl apply -\n```\n\n## Usage\n\nSuppose you want to create a k8s service using a template where you define the service `name`, `internalPort` and `externalPort`.\n\nGiven the following `service.py` template:\n```python\nfrom kubernetes import client\n\n\ndef template(context):\n    return client.V1Service(\n        api_version=\"v1\",\n        kind=\"Service\",\n        metadata=client.V1ObjectMeta(name=context[\"name\"]),\n        spec=client.V1ServiceSpec(\n            type=\"NodePort\",\n            ports=[\n                {\"port\": context[\"externalPort\"], \"targetPort\": context[\"internalPort\"]}\n            ],\n            selector={\"app\": context[\"name\"]},\n        ),\n    )\n```\n\nYou can now generate a yaml output from the above template using `kuku` by running: \n```bash\n$ ls .\nservice.py \n$ kuku render -s name=kuku-web,internalPort=80,externalPort=80 .\n```\nthe above produces:\n```yaml\n# Source: service.py\napiVersion: v1\nkind: Service\nmetadata:\n  name: kuku-web\nspec:\n  ports:\n  - port: 80\n    targetPort: 80\n  selector:\n    app: kuku-web\n  type: NodePort\n```\n\n\nYou can also combine the above with `kubectl apply -f -` to actually create your service on k8s:\n```bash\nkuku render -s name=kuku-web,internalPort=80,externalPort=80 . | kubectl apply -f -\n```\n\nSame as above, but let's make it shorter:\n```bash\nkuku apply -s name=kuku-web,internalPort=80,externalPort=80 .\n```\n\n\nFinally to delete it: \n```bash\nkuku delete -s name=kuku-web,internalPort=80,externalPort=80 .\n# same as above\nkuku render -s name=kuku-web,internalPort=80,externalPort=80 . | kubectl delete -f - \n```\n\n## Templates      \n\nTemplates are python files that are defining a function called `template` that accepts a dict argument `context` and \nreturns a k8s object or a list of k8s objects:\n\n```python\ndef template(context):\n    return V1Namespace(name=context['namespace'])  # example k8s object \n```\n\nYou can create multiple template files each defining their own `template` function.\n`kuku` uses the k8s objects (aka models) from [official kubernetes python client package](https://github.com/kubernetes-client/python).\nYou can find them all [here](https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#documentation-for-models)\n\n\n## CLI\n\nSimilar to [helm](https://helm.sh/) `kuku` accepts defining it's context variables from the CLI:\n\n```bash\nkuku -s namespace=kuku .\n```\n\n`-s namespace=kuku` will be passed to the `context` argument in your `template` function. Run `kuku -h` to find out more.\n\n## Goals\n\n#### Write python code to generate k8s manifests.\nPython is a very popular language with a huge ecosystem of devops packages. Most importantly it's easier to debug than \nsome templating languages used today to generate k8s manifests.\n\n#### No k8s server side dependencies (i.e. tiller).\nk8s already has a database for it's current state (using etcd). We can connect directly to it from the client to \ndo our operations instead of relying on an extra server side dependency.\n\n#### Local validation of manifests before running `kubectl apply`. \nWhere possible do the validation locally using the [official k8s python client](https://github.com/kubernetes-client/python).\n\n#### Use standard tools\nWhere possible use `kubectl` to apply changes to the k8s cluster instead of implementing a specific protocol.\nAgain, this will make debugging easier for the end user.\n\n## Why not helm?\n\nAt [Gorgias](https://gorgias.io) we use [helm](https://helm.sh/) to manage our infrastructure, but there are a few \nthings that we found problematic with it:\n\n- Poor templating language: requires constant referral to the docs, whitespace issues, yaml formatting is hard.\n- Server side dependency: if you upgrade the server -> every user needs to update their client - waste of valuable time.\n- Lack of local validation: `helm lint` does not really ensure the validity (i.e. required keys for a k8s object) of the manifest.\n\nChart names, releases and other helm specific features do not really fit with our current workflow.\n\n\n# Contributing\n\nContributions (code, issues, docs, etc..) are welcome!\n\nOnce you have your python environment setup:\n\n```bash\npip install -e .[dev] # will install dev dependencies\npre-commit install # will install pre-commit hooks for code quality checking \n```\n\nPublish a new version to pypi:\n```bash\npython setup.py upload\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xarg/kuku", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "kuku", "package_url": "https://pypi.org/project/kuku/", "platform": "", "project_url": "https://pypi.org/project/kuku/", "project_urls": {"Homepage": "https://github.com/xarg/kuku"}, "release_url": "https://pypi.org/project/kuku/0.1.1/", "requires_dist": ["docopt", "PyYAML", "requests", "kubernetes", "twine; extra == 'dev'", "wheel; extra == 'dev'", "pytest; extra == 'dev'", "pytest-cov; extra == 'dev'", "black; extra == 'dev'", "mypy; extra == 'dev'", "pre-commit; extra == 'dev'"], "requires_python": ">=3.5.0", "summary": "Kubernetes templating tool.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kuku</h1>\n<p><a href=\"https://travis-ci.org/xarg/kuku\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6f8526591d34295f7fc6e8fc8ffc1fa3b881420/68747470733a2f2f7472617669732d63692e6f72672f786172672f6b756b752e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>kuku renders kubernetes yaml manifests using python templates. It is similar to <a href=\"https://helm.sh/\" rel=\"nofollow\">helm</a> in usage (templates dir, value files, etc..).</p>\n<h2>Installation:</h2>\n<pre>pip3 install kuku\n</pre>\n<p>or using the docker image:</p>\n<pre>docker pull xarg/kuku\n\n<span class=\"c1\"># Example usage (see more below):</span>\ndocker run -v <span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>/:/tmp/ --rm xarg/kuku render -f /tmp/your-values.yaml /tmp/your-templates/ <span class=\"p\">|</span> kubectl apply -\n</pre>\n<h2>Usage</h2>\n<p>Suppose you want to create a k8s service using a template where you define the service <code>name</code>, <code>internalPort</code> and <code>externalPort</code>.</p>\n<p>Given the following <code>service.py</code> template:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">kubernetes</span> <span class=\"kn\">import</span> <span class=\"n\">client</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">template</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">V1Service</span><span class=\"p\">(</span>\n        <span class=\"n\">api_version</span><span class=\"o\">=</span><span class=\"s2\">\"v1\"</span><span class=\"p\">,</span>\n        <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">\"Service\"</span><span class=\"p\">,</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">V1ObjectMeta</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]),</span>\n        <span class=\"n\">spec</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">V1ServiceSpec</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"NodePort\"</span><span class=\"p\">,</span>\n            <span class=\"n\">ports</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"externalPort\"</span><span class=\"p\">],</span> <span class=\"s2\">\"targetPort\"</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"internalPort\"</span><span class=\"p\">]}</span>\n            <span class=\"p\">],</span>\n            <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"app\"</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>You can now generate a yaml output from the above template using <code>kuku</code> by running:</p>\n<pre>$ ls .\nservice.py \n$ kuku render -s <span class=\"nv\">name</span><span class=\"o\">=</span>kuku-web,internalPort<span class=\"o\">=</span><span class=\"m\">80</span>,externalPort<span class=\"o\">=</span><span class=\"m\">80</span> .\n</pre>\n<p>the above produces:</p>\n<pre><span class=\"c1\"># Source: service.py</span>\n<span class=\"nt\">apiVersion</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">v1</span>\n<span class=\"nt\">kind</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Service</span>\n<span class=\"nt\">metadata</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">kuku-web</span>\n<span class=\"nt\">spec</span><span class=\"p\">:</span>\n  <span class=\"nt\">ports</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">80</span>\n    <span class=\"nt\">targetPort</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">80</span>\n  <span class=\"nt\">selector</span><span class=\"p\">:</span>\n    <span class=\"nt\">app</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">kuku-web</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">NodePort</span>\n</pre>\n<p>You can also combine the above with <code>kubectl apply -f -</code> to actually create your service on k8s:</p>\n<pre>kuku render -s <span class=\"nv\">name</span><span class=\"o\">=</span>kuku-web,internalPort<span class=\"o\">=</span><span class=\"m\">80</span>,externalPort<span class=\"o\">=</span><span class=\"m\">80</span> . <span class=\"p\">|</span> kubectl apply -f -\n</pre>\n<p>Same as above, but let's make it shorter:</p>\n<pre>kuku apply -s <span class=\"nv\">name</span><span class=\"o\">=</span>kuku-web,internalPort<span class=\"o\">=</span><span class=\"m\">80</span>,externalPort<span class=\"o\">=</span><span class=\"m\">80</span> .\n</pre>\n<p>Finally to delete it:</p>\n<pre>kuku delete -s <span class=\"nv\">name</span><span class=\"o\">=</span>kuku-web,internalPort<span class=\"o\">=</span><span class=\"m\">80</span>,externalPort<span class=\"o\">=</span><span class=\"m\">80</span> .\n<span class=\"c1\"># same as above</span>\nkuku render -s <span class=\"nv\">name</span><span class=\"o\">=</span>kuku-web,internalPort<span class=\"o\">=</span><span class=\"m\">80</span>,externalPort<span class=\"o\">=</span><span class=\"m\">80</span> . <span class=\"p\">|</span> kubectl delete -f - \n</pre>\n<h2>Templates</h2>\n<p>Templates are python files that are defining a function called <code>template</code> that accepts a dict argument <code>context</code> and\nreturns a k8s object or a list of k8s objects:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">template</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">V1Namespace</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s1\">'namespace'</span><span class=\"p\">])</span>  <span class=\"c1\"># example k8s object </span>\n</pre>\n<p>You can create multiple template files each defining their own <code>template</code> function.\n<code>kuku</code> uses the k8s objects (aka models) from <a href=\"https://github.com/kubernetes-client/python\" rel=\"nofollow\">official kubernetes python client package</a>.\nYou can find them all <a href=\"https://github.com/kubernetes-client/python/blob/master/kubernetes/README.md#documentation-for-models\" rel=\"nofollow\">here</a></p>\n<h2>CLI</h2>\n<p>Similar to <a href=\"https://helm.sh/\" rel=\"nofollow\">helm</a> <code>kuku</code> accepts defining it's context variables from the CLI:</p>\n<pre>kuku -s <span class=\"nv\">namespace</span><span class=\"o\">=</span>kuku .\n</pre>\n<p><code>-s namespace=kuku</code> will be passed to the <code>context</code> argument in your <code>template</code> function. Run <code>kuku -h</code> to find out more.</p>\n<h2>Goals</h2>\n<h4>Write python code to generate k8s manifests.</h4>\n<p>Python is a very popular language with a huge ecosystem of devops packages. Most importantly it's easier to debug than\nsome templating languages used today to generate k8s manifests.</p>\n<h4>No k8s server side dependencies (i.e. tiller).</h4>\n<p>k8s already has a database for it's current state (using etcd). We can connect directly to it from the client to\ndo our operations instead of relying on an extra server side dependency.</p>\n<h4>Local validation of manifests before running <code>kubectl apply</code>.</h4>\n<p>Where possible do the validation locally using the <a href=\"https://github.com/kubernetes-client/python\" rel=\"nofollow\">official k8s python client</a>.</p>\n<h4>Use standard tools</h4>\n<p>Where possible use <code>kubectl</code> to apply changes to the k8s cluster instead of implementing a specific protocol.\nAgain, this will make debugging easier for the end user.</p>\n<h2>Why not helm?</h2>\n<p>At <a href=\"https://gorgias.io\" rel=\"nofollow\">Gorgias</a> we use <a href=\"https://helm.sh/\" rel=\"nofollow\">helm</a> to manage our infrastructure, but there are a few\nthings that we found problematic with it:</p>\n<ul>\n<li>Poor templating language: requires constant referral to the docs, whitespace issues, yaml formatting is hard.</li>\n<li>Server side dependency: if you upgrade the server -&gt; every user needs to update their client - waste of valuable time.</li>\n<li>Lack of local validation: <code>helm lint</code> does not really ensure the validity (i.e. required keys for a k8s object) of the manifest.</li>\n</ul>\n<p>Chart names, releases and other helm specific features do not really fit with our current workflow.</p>\n<h1>Contributing</h1>\n<p>Contributions (code, issues, docs, etc..) are welcome!</p>\n<p>Once you have your python environment setup:</p>\n<pre>pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span> <span class=\"c1\"># will install dev dependencies</span>\npre-commit install <span class=\"c1\"># will install pre-commit hooks for code quality checking </span>\n</pre>\n<p>Publish a new version to pypi:</p>\n<pre>python setup.py upload\n</pre>\n\n          </div>"}, "last_serial": 5744771, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "8b0184008ffb038f8d5a8c6d9de0508f", "sha256": "168aba3e04b7d068e47b07d4979d08fa8a57497442cdda60ae3bd574ba3098b1"}, "downloads": -1, "filename": "kuku-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b0184008ffb038f8d5a8c6d9de0508f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11941, "upload_time": "2018-09-27T18:04:40", "upload_time_iso_8601": "2018-09-27T18:04:40.453367Z", "url": "https://files.pythonhosted.org/packages/e9/ac/d0244097c6b1efbd10ea5b89471902c58aadfcfd7f4720e68b6fd55e4368/kuku-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda034a7ea2c1f2544d71b66d99e7abc", "sha256": "f7fa2abed75f10ac5d585e4b8ceaef61c4ec6c227f4d4acbca275ff1dfb7699d"}, "downloads": -1, "filename": "kuku-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dda034a7ea2c1f2544d71b66d99e7abc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 10863, "upload_time": "2018-09-27T18:04:41", "upload_time_iso_8601": "2018-09-27T18:04:41.758311Z", "url": "https://files.pythonhosted.org/packages/1a/7f/44b8024600ab3d39233a56f56aaecdb96f76db20080ecee9e88be3742574/kuku-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9b5cfbe1a719f19e115edccaed0e3e94", "sha256": "fbb44e23a85184fbcba07614edad9c450aef505ca3c2058aff41c8c21a3fdca2"}, "downloads": -1, "filename": "kuku-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b5cfbe1a719f19e115edccaed0e3e94", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 12307, "upload_time": "2018-09-27T20:54:48", "upload_time_iso_8601": "2018-09-27T20:54:48.140134Z", "url": "https://files.pythonhosted.org/packages/a0/21/9c343a7f735c23fb7c21128b908d1a18417b0bb57a23ce7b02103974e576/kuku-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28bd4e8452d9ede68a0a0904561ba084", "sha256": "783c5e0d777bcd3a72aa5cf274f082496ec91a4ce1fdcee1e55270df3a2a258e"}, "downloads": -1, "filename": "kuku-0.0.3.tar.gz", "has_sig": false, "md5_digest": "28bd4e8452d9ede68a0a0904561ba084", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 11078, "upload_time": "2018-09-27T20:54:49", "upload_time_iso_8601": "2018-09-27T20:54:49.397006Z", "url": "https://files.pythonhosted.org/packages/c6/32/7c5bc84dd857b225f87883959430272c60490d979dbd2f6ab082a1d4d6c4/kuku-0.0.3.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "3e2ccaa2aa63ed713d70640bf594ff30", "sha256": "5df3104b5cd6b5e38a7c9d1ae0764459901633fce1006058cfeb4a0169630c7d"}, "downloads": -1, "filename": "kuku-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e2ccaa2aa63ed713d70640bf594ff30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 16418, "upload_time": "2018-11-19T23:00:07", "upload_time_iso_8601": "2018-11-19T23:00:07.411598Z", "url": "https://files.pythonhosted.org/packages/f2/20/78b76ebeeaf970a1fe6bfdf5853125caaf67497246f177461022b3c75b8c/kuku-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b1ddbf8be31d795e29f24e171f7f1b6", "sha256": "22956a28dd46a7a6c7837d6674d3b5c8e84329ac4b0ec1592dd5092f6b396233"}, "downloads": -1, "filename": "kuku-0.0.5.tar.gz", "has_sig": false, "md5_digest": "1b1ddbf8be31d795e29f24e171f7f1b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 10926, "upload_time": "2018-11-19T23:00:09", "upload_time_iso_8601": "2018-11-19T23:00:09.013641Z", "url": "https://files.pythonhosted.org/packages/18/28/0077ec7183a21ae0985312a6cb5d92f06084f22ea52738420b1469dfb49c/kuku-0.0.5.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3b75dc788d2a04b7dfa3e4adabe47dfc", "sha256": "827149db0b36e03b1bf5838149fcc218b9f0ccc443829f2b601ef6fa4a94814d"}, "downloads": -1, "filename": "kuku-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b75dc788d2a04b7dfa3e4adabe47dfc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 16775, "upload_time": "2019-08-28T19:06:30", "upload_time_iso_8601": "2019-08-28T19:06:30.702967Z", "url": "https://files.pythonhosted.org/packages/46/b9/80c2994edb8fe3369a03a351471f07ec054684ddaee92af0339061123d62/kuku-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f5741edb25b6d5be882123df910b7a9", "sha256": "75ee598c55ed3fff017aaa0699549ce45b04296ec30d0ff82fe5ff7f7ca2dafa"}, "downloads": -1, "filename": "kuku-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8f5741edb25b6d5be882123df910b7a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 11332, "upload_time": "2019-08-28T19:06:32", "upload_time_iso_8601": "2019-08-28T19:06:32.337337Z", "url": "https://files.pythonhosted.org/packages/21/b9/9dfd0d977628cb59cc5bb9d6bfa712df06a9f99bc4239c446320416b5f14/kuku-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3b75dc788d2a04b7dfa3e4adabe47dfc", "sha256": "827149db0b36e03b1bf5838149fcc218b9f0ccc443829f2b601ef6fa4a94814d"}, "downloads": -1, "filename": "kuku-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b75dc788d2a04b7dfa3e4adabe47dfc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 16775, "upload_time": "2019-08-28T19:06:30", "upload_time_iso_8601": "2019-08-28T19:06:30.702967Z", "url": "https://files.pythonhosted.org/packages/46/b9/80c2994edb8fe3369a03a351471f07ec054684ddaee92af0339061123d62/kuku-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f5741edb25b6d5be882123df910b7a9", "sha256": "75ee598c55ed3fff017aaa0699549ce45b04296ec30d0ff82fe5ff7f7ca2dafa"}, "downloads": -1, "filename": "kuku-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8f5741edb25b6d5be882123df910b7a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 11332, "upload_time": "2019-08-28T19:06:32", "upload_time_iso_8601": "2019-08-28T19:06:32.337337Z", "url": "https://files.pythonhosted.org/packages/21/b9/9dfd0d977628cb59cc5bb9d6bfa712df06a9f99bc4239c446320416b5f14/kuku-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:35 2020"}