{"info": {"author": "Alice Girard Guittard", "author_email": "alice.girardguittard@dailymotion.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "# tartiflette-plugin-scalars\n\nTartiflette plugin providing common scalars, for data validation and strongly typed API schemas.\n\n## Requirements\n\nPython >= 3.6\nTartiflette >= 1.0.0\n\n## Installation\n\nSimply install it with pip:\n\n```\npip install tartiflette-plugin-scalars\n```\n\nThen start coding, by importing adding it to the modules list of tartiflette's create engine:\n\n```python\nimport asyncio\nimport datetime\n\nfrom tartiflette import Resolver, create_engine\n\nasync def main():\n    sdl = \"\"\"\n    type Query {\n      dateTime: DateTime\n    }\n    \"\"\"\n\n    @Resolver(\"Query.dateTime\", schema_name=\"scalars\")\n    async def resolve_date_time(*_args, **_kwargs):\n        return datetime.datetime(2019, 10, 29, 20, 23, 00, 00)\n\n    engine = await create_engine(\n        sdl=sdl,\n        modules=[\n            {\n                \"name\": \"tartiflette_plugin_scalars\",\n                \"config\": {\"datetime\": {\"enabled\": True}}\n            }\n        ],\n        schema_name=\"scalars\",\n    )\n\n    print(await engine.execute(\"query date { dateTime }\"))\n\n\nasyncio.run(main())\n```\n\n## Configuration\n\nYou can configure the plugin by passing a configuration dict during create_engine.\nThis configuration can be used to disable or rename some scalars, as shown below:\n\n```\nengine = await create_engine(\n    sdl=sdl,\n    modules=[\n        {\n            \"name\": \"tartiflette_plugin_scalars\",\n            \"config\": {\n                \"datetime\": {\"name\": \"MyDatetime\"},\n                \"postal_code\": {\"enabled\": False},\n            },\n        }\n    ],\n    schema_name=\"scalars\",\n)\n```\n\nSome plugins also accept more specific configuration values, that can be\nspecified in a sub-dict called `options`. The options will be\npassed to the scalar at instanciation time as `**kwargs` to the `init()` method.\n\n```\nengine = await create_engine(\n    sdl=sdl,\n    modules=[\n        {\n            \"name\": \"tartiflette_plugin_scalars\",\n            \"config\": {\n                \"datetime\": {\"name\": \"MyDatetime\"},\n                \"postal_code\": {\"enabled\": False, \"options\": {\"key\": \"value\"}},\n            },\n        }\n    ],\n    schema_name=\"scalars\",\n)\n```\n\n## Implemented scalars:\n\n| Name                                   | Configuration key  | Description                                       |\n|----------------------------------------|--------------------|---------------------------------------------------|\n| EmailAddress                           | email_address      | Represents an email addresses                     |\n| DateTime                               | datetime           | Represents a non naive datetime object            |\n| NaiveDateTime                          | naive_datetime     | Represents an optionally naive datetime object    |\n| Duration                               | duration           | Represents a timedelta object                     |\n| NegativeFloat                          | negative_float     | Represents a negative floating point number       |\n| NegativeInt                            | negative_int       | Represents a negative integer                     |\n| NonNegativeFloat                       | non_negative_float | Represents a positive or 0 floating point number  |\n| NonNegativeInt                         | non_negative_int   | Represents a positive or 0 integer                |\n| PositiveFloat                          | positive_float     | Represents a positive floating point number       |\n| PositiveInt                            | positive_int       | Represents a positive integer                     |\n| NonPositiveFloat                       | non_positive_float | Represents a negative or 0 floating point number  |\n| NonPositiveInt                         | non_positive_int   | Represents a negative or 0 integer                |\n| Long                                   | long               | Represents integers between 0 and 2^63            |\n| BigInt                                 | big_int            | Represents arbitrary length integers              |\n| UnsignedInt                            | unsigned_int       | Represents integers between 0 and 2^32            |\n| PhoneNumber                            | phone_number       | Represents a phone number                         |\n| PostalCode                             | postal_code        | Represents a postal code                          |\n| URL                                    | url                | Represents an Uniform Resource Locator            |\n| GUID                                   | guid               | Represents a Globally Unique IDentifier           |\n| UUID                                   | uuid               | Represents a Universally Unique IDentifier        |\n| HexColorCode                           | hex_color_code     | Hexadecimal representation of a color             |\n| HSL                                    | hsl                | Hue, Saturation and Lightness of a color          |\n| HSLA                                   | hsla               | Hue, Saturation, Lightness and Alpha of a color   |\n| RGB                                    | rgb                | Red, Green, Blue of a color                       |\n| RGBA                                   | rgba               | Red, Green, Blue and Alpha of a color             |\n| IPv4                                   | ipv4               | Represents an Internet Protocol version 4 address |\n| IPv6                                   | ipv6               | Represents an Internet Protocol version 6 address |\n| MAC                                    | mac                | Represents a Media Access Control address         |\n| ISBN                                   | isbn               | Represents an International Standard Book Number  |\n| Port                                   | port               | Represents a TCP / UDP port                       |\n| USCurrency                             | us_currency        | Represents an amount of USD                       |\n| JSON                                   | json               | Represents a JSON value                           |\n| JSONObject                             | json_object        | Represents a JSON object                          |\n| [GeoJSON](./docs/geo_json.md)          | geo_json           | Represents a GeoJSON value                        |", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dailymotion/tartiflette-plugin-scalars", "keywords": "api graphql protocol tartiflette", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tartiflette-plugin-scalars", "package_url": "https://pypi.org/project/tartiflette-plugin-scalars/", "platform": "", "project_url": "https://pypi.org/project/tartiflette-plugin-scalars/", "project_urls": {"Homepage": "https://github.com/dailymotion/tartiflette-plugin-scalars"}, "release_url": "https://pypi.org/project/tartiflette-plugin-scalars/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Tartiflette plugin providing common scalars", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tartiflette-plugin-scalars</h1>\n<p>Tartiflette plugin providing common scalars, for data validation and strongly typed API schemas.</p>\n<h2>Requirements</h2>\n<p>Python &gt;= 3.6\nTartiflette &gt;= 1.0.0</p>\n<h2>Installation</h2>\n<p>Simply install it with pip:</p>\n<pre><code>pip install tartiflette-plugin-scalars\n</code></pre>\n<p>Then start coding, by importing adding it to the modules list of tartiflette's create engine:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tartiflette</span> <span class=\"kn\">import</span> <span class=\"n\">Resolver</span><span class=\"p\">,</span> <span class=\"n\">create_engine</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">sdl</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    type Query {</span>\n<span class=\"s2\">      dateTime: DateTime</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">    \"\"\"</span>\n\n    <span class=\"nd\">@Resolver</span><span class=\"p\">(</span><span class=\"s2\">\"Query.dateTime\"</span><span class=\"p\">,</span> <span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s2\">\"scalars\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">resolve_date_time</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">)</span>\n\n    <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span>\n        <span class=\"n\">sdl</span><span class=\"o\">=</span><span class=\"n\">sdl</span><span class=\"p\">,</span>\n        <span class=\"n\">modules</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tartiflette_plugin_scalars\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"datetime\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"enabled\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s2\">\"scalars\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"query date { dateTime }\"</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h2>Configuration</h2>\n<p>You can configure the plugin by passing a configuration dict during create_engine.\nThis configuration can be used to disable or rename some scalars, as shown below:</p>\n<pre><code>engine = await create_engine(\n    sdl=sdl,\n    modules=[\n        {\n            \"name\": \"tartiflette_plugin_scalars\",\n            \"config\": {\n                \"datetime\": {\"name\": \"MyDatetime\"},\n                \"postal_code\": {\"enabled\": False},\n            },\n        }\n    ],\n    schema_name=\"scalars\",\n)\n</code></pre>\n<p>Some plugins also accept more specific configuration values, that can be\nspecified in a sub-dict called <code>options</code>. The options will be\npassed to the scalar at instanciation time as <code>**kwargs</code> to the <code>init()</code> method.</p>\n<pre><code>engine = await create_engine(\n    sdl=sdl,\n    modules=[\n        {\n            \"name\": \"tartiflette_plugin_scalars\",\n            \"config\": {\n                \"datetime\": {\"name\": \"MyDatetime\"},\n                \"postal_code\": {\"enabled\": False, \"options\": {\"key\": \"value\"}},\n            },\n        }\n    ],\n    schema_name=\"scalars\",\n)\n</code></pre>\n<h2>Implemented scalars:</h2>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Configuration key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>EmailAddress</td>\n<td>email_address</td>\n<td>Represents an email addresses</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>datetime</td>\n<td>Represents a non naive datetime object</td>\n</tr>\n<tr>\n<td>NaiveDateTime</td>\n<td>naive_datetime</td>\n<td>Represents an optionally naive datetime object</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>duration</td>\n<td>Represents a timedelta object</td>\n</tr>\n<tr>\n<td>NegativeFloat</td>\n<td>negative_float</td>\n<td>Represents a negative floating point number</td>\n</tr>\n<tr>\n<td>NegativeInt</td>\n<td>negative_int</td>\n<td>Represents a negative integer</td>\n</tr>\n<tr>\n<td>NonNegativeFloat</td>\n<td>non_negative_float</td>\n<td>Represents a positive or 0 floating point number</td>\n</tr>\n<tr>\n<td>NonNegativeInt</td>\n<td>non_negative_int</td>\n<td>Represents a positive or 0 integer</td>\n</tr>\n<tr>\n<td>PositiveFloat</td>\n<td>positive_float</td>\n<td>Represents a positive floating point number</td>\n</tr>\n<tr>\n<td>PositiveInt</td>\n<td>positive_int</td>\n<td>Represents a positive integer</td>\n</tr>\n<tr>\n<td>NonPositiveFloat</td>\n<td>non_positive_float</td>\n<td>Represents a negative or 0 floating point number</td>\n</tr>\n<tr>\n<td>NonPositiveInt</td>\n<td>non_positive_int</td>\n<td>Represents a negative or 0 integer</td>\n</tr>\n<tr>\n<td>Long</td>\n<td>long</td>\n<td>Represents integers between 0 and 2^63</td>\n</tr>\n<tr>\n<td>BigInt</td>\n<td>big_int</td>\n<td>Represents arbitrary length integers</td>\n</tr>\n<tr>\n<td>UnsignedInt</td>\n<td>unsigned_int</td>\n<td>Represents integers between 0 and 2^32</td>\n</tr>\n<tr>\n<td>PhoneNumber</td>\n<td>phone_number</td>\n<td>Represents a phone number</td>\n</tr>\n<tr>\n<td>PostalCode</td>\n<td>postal_code</td>\n<td>Represents a postal code</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>url</td>\n<td>Represents an Uniform Resource Locator</td>\n</tr>\n<tr>\n<td>GUID</td>\n<td>guid</td>\n<td>Represents a Globally Unique IDentifier</td>\n</tr>\n<tr>\n<td>UUID</td>\n<td>uuid</td>\n<td>Represents a Universally Unique IDentifier</td>\n</tr>\n<tr>\n<td>HexColorCode</td>\n<td>hex_color_code</td>\n<td>Hexadecimal representation of a color</td>\n</tr>\n<tr>\n<td>HSL</td>\n<td>hsl</td>\n<td>Hue, Saturation and Lightness of a color</td>\n</tr>\n<tr>\n<td>HSLA</td>\n<td>hsla</td>\n<td>Hue, Saturation, Lightness and Alpha of a color</td>\n</tr>\n<tr>\n<td>RGB</td>\n<td>rgb</td>\n<td>Red, Green, Blue of a color</td>\n</tr>\n<tr>\n<td>RGBA</td>\n<td>rgba</td>\n<td>Red, Green, Blue and Alpha of a color</td>\n</tr>\n<tr>\n<td>IPv4</td>\n<td>ipv4</td>\n<td>Represents an Internet Protocol version 4 address</td>\n</tr>\n<tr>\n<td>IPv6</td>\n<td>ipv6</td>\n<td>Represents an Internet Protocol version 6 address</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>mac</td>\n<td>Represents a Media Access Control address</td>\n</tr>\n<tr>\n<td>ISBN</td>\n<td>isbn</td>\n<td>Represents an International Standard Book Number</td>\n</tr>\n<tr>\n<td>Port</td>\n<td>port</td>\n<td>Represents a TCP / UDP port</td>\n</tr>\n<tr>\n<td>USCurrency</td>\n<td>us_currency</td>\n<td>Represents an amount of USD</td>\n</tr>\n<tr>\n<td>JSON</td>\n<td>json</td>\n<td>Represents a JSON value</td>\n</tr>\n<tr>\n<td>JSONObject</td>\n<td>json_object</td>\n<td>Represents a JSON object</td>\n</tr>\n<tr>\n<td><a href=\"./docs/geo_json.md\" rel=\"nofollow\">GeoJSON</a></td>\n<td>geo_json</td>\n<td>Represents a GeoJSON value</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7162362, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fca73d0131f24bfdfd518adb91b9f4e0", "sha256": "4d29ad2cafed1d63d51e333131ddc62541c294d7c2352ccf138de1b7dc2846b8"}, "downloads": -1, "filename": "tartiflette-plugin-scalars-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fca73d0131f24bfdfd518adb91b9f4e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10768, "upload_time": "2019-10-08T10:24:37", "upload_time_iso_8601": "2019-10-08T10:24:37.827316Z", "url": "https://files.pythonhosted.org/packages/65/cc/0044b16b2cb4a01503e3860b5f39e9dc44c221b3cd9bcb710cdcbffd245b/tartiflette-plugin-scalars-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a64e4b7690d9ffcc20324d00f3ed716c", "sha256": "5baca61c488d7e82991f23061eab38c70671b514a9b1d626e9387709900b9071"}, "downloads": -1, "filename": "tartiflette-plugin-scalars-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a64e4b7690d9ffcc20324d00f3ed716c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13623, "upload_time": "2019-11-18T12:48:09", "upload_time_iso_8601": "2019-11-18T12:48:09.801053Z", "url": "https://files.pythonhosted.org/packages/fd/1d/899b7ced27de7bef2f892b288fe89842e538cb55331182e96a7b8d01a693/tartiflette-plugin-scalars-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2f95d10a73126a96d106c26f8c8041e2", "sha256": "4e3a448ad6362a0d47b769c4ed0b9e3582f64215df19e403a32d390b3dda920b"}, "downloads": -1, "filename": "tartiflette-plugin-scalars-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2f95d10a73126a96d106c26f8c8041e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13908, "upload_time": "2020-05-04T09:03:19", "upload_time_iso_8601": "2020-05-04T09:03:19.145795Z", "url": "https://files.pythonhosted.org/packages/1c/ab/da645faa039275dd4a8f9ac2a18269a21e52e6d43f95417cee40b53f1b2d/tartiflette-plugin-scalars-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f95d10a73126a96d106c26f8c8041e2", "sha256": "4e3a448ad6362a0d47b769c4ed0b9e3582f64215df19e403a32d390b3dda920b"}, "downloads": -1, "filename": "tartiflette-plugin-scalars-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2f95d10a73126a96d106c26f8c8041e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13908, "upload_time": "2020-05-04T09:03:19", "upload_time_iso_8601": "2020-05-04T09:03:19.145795Z", "url": "https://files.pythonhosted.org/packages/1c/ab/da645faa039275dd4a8f9ac2a18269a21e52e6d43f95417cee40b53f1b2d/tartiflette-plugin-scalars-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:52 2020"}