{"info": {"author": "Federico Bond", "author_email": "federicobond@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "PyMercadoPago\n=============\n\n.. image:: https://img.shields.io/pypi/v/pymercadopago.svg\n   :target: https://pypi.python.org/pypi/pymercadopago\n   :alt: Latest Version\n\n.. image:: https://travis-ci.org/federicobond/pymercadopago.svg?branch=master\n   :target: https://travis-ci.org/federicobond/pymercadopago\n\n\nPyMercadoPago is user-friendly library to interact with the MercadoPago API. Python 3 only.\n\nTo install it from PyPI, simply run::\n\n    pip install pymercadopago\n\nIf you haven't done so already, obtain your ``CLIENT_ID`` and ``CLIENT_SECRET`` `here\n<https://www.mercadopago.com/mla/account/credentials?type=basic>`_.\n\nQuickstart\n----------\n\nCreate a new ``mercadopago.Client`` instance and pass it your credentials:\n\n.. code-block:: python\n\n    import mercadopago\n\n    CLIENT_ID = 'XXX'\n    CLIENT_SECRET = 'XXX'\n\n    mp = mercadopago.Client(CLIENT_ID, CLIENT_SECRET)\n\n\nYou can navigate the full API from the client methods. Try running the above\ncode in a Python shell and explore them.\n\n.. code-block:: python\n\n    # Get the invoice with ID 1234\n    mp.invoices.get('1234')\n\n\n.. code-block:: python\n\n    # Get the current user account balance\n    mp.users.account_balance()\n\n\n.. code-block:: python\n\n    # Create a new customer instance\n    mp.customers.create(\n      first_name='Federico'\n      last_name='Bond',\n      # ...\n    )\n\n\nIn general, assuming ``mp`` is a ``mercadopago.Client`` instance and there is\nan endpoint documented at (for example) ``/customers`` or ``/v1/customers``,\nyou can do:\n\n``mp.customers.list()``\n    List all customers. Pass pagination parameters via keyword arguments.\n\n``mp.customers.create(**data)``\n    Create a new Customer.\n\n``mp.customers.delete(id)``\n    Delete a Customer.\n\n``mp.customers.update(**data)``\n    Update a Customer, include ``\u00ecd`` in your keyword arguments.\n\n``mp.customers.search(**params)``\n    Search for customers matching params.\n\nNot all methods are available for all resources, and some additional\nconvenience methods have been added to some. To learn more, check out the\nofficial docs and/or the code from the ``mercadopago.api`` module.\n\nNested resources like are usually accessed by following the corresponding\nresource paths. For example:\n\n.. code-block:: python\n\n  # GET /v1/customers/:id/cards\n  # ----\n  mp.customers.cards(id).list()\n\n\nAll methods return a ``Response`` object if successful (HTTP status code in the\n2XX range) or raise an instance of ``mercadopago.Error`` otherwise.\n\nResponse\n--------\n\nEvery API call you make will return a ``Response`` instance with the following\nattributes:\n\n===============  ==============================================\nAttribute        Description\n===============  ==============================================\n``status_code``  The HTTP status_code returned by the API.\n``data``         The decoded JSON response returned by the API.\n``url``          The requested URL.\n===============  ==============================================\n\nIf MercadoPago returns a response with pagination information, a\n``PaginatedResponse`` will be returned instead. Paginated responses have the\nfollowing additional methods:\n\n``response.total``\n    Total amount of records in this collection.\n\n``response.limit``\n    Maximum number of records for this page.\n\n``response.offset``\n    Number of records skipped to reach this page.\n\n``response.results``\n    List of records in this request. This is different from ``.data`` which\n    contains the full body of the response, with the pagination info.\n\n``response.has_prev()``\n    Whether there are any preceding pages.\n\n``response.has_next()``\n    Whether there are any following pages.\n\n``response.prev()``\n    Requests the previous page and returns a ``PaginatedResponse``.\n\n``response.next()``\n    Requests the next page and returns a ``PaginatedResponse``.\n\n``response.auto_paging_iter()``\n    Returns a generator of records that will automatically request new pages\n    when necessary.\n\n\nError\n-----\n\nIf there is a connection error or the HTTP response contains a non-2XX status\ncode, the method will raise an instance of ``mercadopago.Error``. The error\nobject contains the following attributes:\n\n===============  ==========================================================\nAttribute        Description\n===============  ==========================================================\n``http_status``  The HTTP status_code returned by the API, if applicable.\n``code``         The error code returned by the API, if applicable.\n``json_data``    The full JSON response returned by the API, if applicable.\n===============  ==========================================================\n\nThe specific subclass raised depends on the HTTP status code.\n\n====== ==================================\nStatus Class\n====== ==================================\n400    ``mercadopago.BadRequestError``\n401    ``mercadopago.AuthorizationError``\n404    ``mercadopago.NotFoundError``\n\\*     ``mercadopago.Error``\n====== ==================================\n\n\nRunning the tests\n-----------------\n\nMake sure tests pass before contributing a bugfix or a new feature.\nTo run the test suite, execute this in your terminal::\n\n    python setup.py test\n\n\nThis will execute the tests with your default Python interpreter.\nUse ``tox`` to run the tests in all supported Python versions.\n\n\nTo Do\n-----\n\n* Implement idempotency headers in POST/PUT requests.\n* Implement retry request from error.\n\n\n----------\n\nFor more information about the API, refer to the `official docs \n<https://www.mercadopago.com.ar/developers/en/reference/>`_.\n\n\nAuthor\n------\n\nFederico Bond\n\nLicense\n-------\n\nApache-2.0", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/federicobond/pymercadopago", "keywords": "mercadopago api", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pymercadopago", "package_url": "https://pypi.org/project/pymercadopago/", "platform": "", "project_url": "https://pypi.org/project/pymercadopago/", "project_urls": {"Homepage": "https://github.com/federicobond/pymercadopago"}, "release_url": "https://pypi.org/project/pymercadopago/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "An API wrapper for MercadoPago", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/pymercadopago\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6d997ad1da8af7dae1bff7d33eb5ea481c403a3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796d65726361646f7061676f2e737667\"></a>\n<a href=\"https://travis-ci.org/federicobond/pymercadopago\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/federicobond/pymercadopago.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/289531ea6b0a59131ca45913031a878a438e3a93/68747470733a2f2f7472617669732d63692e6f72672f666564657269636f626f6e642f70796d65726361646f7061676f2e7376673f6272616e63683d6d6173746572\"></a>\n<p>PyMercadoPago is user-friendly library to interact with the MercadoPago API. Python 3 only.</p>\n<p>To install it from PyPI, simply run:</p>\n<pre>pip install pymercadopago\n</pre>\n<p>If you haven\u2019t done so already, obtain your <tt>CLIENT_ID</tt> and <tt>CLIENT_SECRET</tt> <a href=\"https://www.mercadopago.com/mla/account/credentials?type=basic\" rel=\"nofollow\">here</a>.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Create a new <tt>mercadopago.Client</tt> instance and pass it your credentials:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">mercadopago</span>\n\n<span class=\"n\">CLIENT_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'XXX'</span>\n<span class=\"n\">CLIENT_SECRET</span> <span class=\"o\">=</span> <span class=\"s1\">'XXX'</span>\n\n<span class=\"n\">mp</span> <span class=\"o\">=</span> <span class=\"n\">mercadopago</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">CLIENT_ID</span><span class=\"p\">,</span> <span class=\"n\">CLIENT_SECRET</span><span class=\"p\">)</span>\n</pre>\n<p>You can navigate the full API from the client methods. Try running the above\ncode in a Python shell and explore them.</p>\n<pre><span class=\"c1\"># Get the invoice with ID 1234</span>\n<span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">invoices</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'1234'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># Get the current user account balance</span>\n<span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">account_balance</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"c1\"># Create a new customer instance</span>\n<span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">customers</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n  <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Federico'</span>\n  <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Bond'</span><span class=\"p\">,</span>\n  <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In general, assuming <tt>mp</tt> is a <tt>mercadopago.Client</tt> instance and there is\nan endpoint documented at (for example) <tt>/customers</tt> or <tt>/v1/customers</tt>,\nyou can do:</p>\n<dl>\n<dt><tt>mp.customers.list()</tt></dt>\n<dd>List all customers. Pass pagination parameters via keyword arguments.</dd>\n<dt><tt><span class=\"pre\">mp.customers.create(**data)</span></tt></dt>\n<dd>Create a new Customer.</dd>\n<dt><tt>mp.customers.delete(id)</tt></dt>\n<dd>Delete a Customer.</dd>\n<dt><tt><span class=\"pre\">mp.customers.update(**data)</span></tt></dt>\n<dd>Update a Customer, include <tt>\u00ecd</tt> in your keyword arguments.</dd>\n<dt><tt><span class=\"pre\">mp.customers.search(**params)</span></tt></dt>\n<dd>Search for customers matching params.</dd>\n</dl>\n<p>Not all methods are available for all resources, and some additional\nconvenience methods have been added to some. To learn more, check out the\nofficial docs and/or the code from the <tt>mercadopago.api</tt> module.</p>\n<p>Nested resources like are usually accessed by following the corresponding\nresource paths. For example:</p>\n<pre><span class=\"c1\"># GET /v1/customers/:id/cards</span>\n<span class=\"c1\"># ----</span>\n<span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">customers</span><span class=\"o\">.</span><span class=\"n\">cards</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n</pre>\n<p>All methods return a <tt>Response</tt> object if successful (HTTP status code in the\n2XX range) or raise an instance of <tt>mercadopago.Error</tt> otherwise.</p>\n</div>\n<div id=\"response\">\n<h2>Response</h2>\n<p>Every API call you make will return a <tt>Response</tt> instance with the following\nattributes:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>status_code</tt></td>\n<td>The HTTP status_code returned by the API.</td>\n</tr>\n<tr><td><tt>data</tt></td>\n<td>The decoded JSON response returned by the API.</td>\n</tr>\n<tr><td><tt>url</tt></td>\n<td>The requested URL.</td>\n</tr>\n</tbody>\n</table>\n<p>If MercadoPago returns a response with pagination information, a\n<tt>PaginatedResponse</tt> will be returned instead. Paginated responses have the\nfollowing additional methods:</p>\n<dl>\n<dt><tt>response.total</tt></dt>\n<dd>Total amount of records in this collection.</dd>\n<dt><tt>response.limit</tt></dt>\n<dd>Maximum number of records for this page.</dd>\n<dt><tt>response.offset</tt></dt>\n<dd>Number of records skipped to reach this page.</dd>\n<dt><tt>response.results</tt></dt>\n<dd>List of records in this request. This is different from <tt>.data</tt> which\ncontains the full body of the response, with the pagination info.</dd>\n<dt><tt>response.has_prev()</tt></dt>\n<dd>Whether there are any preceding pages.</dd>\n<dt><tt>response.has_next()</tt></dt>\n<dd>Whether there are any following pages.</dd>\n<dt><tt>response.prev()</tt></dt>\n<dd>Requests the previous page and returns a <tt>PaginatedResponse</tt>.</dd>\n<dt><tt>response.next()</tt></dt>\n<dd>Requests the next page and returns a <tt>PaginatedResponse</tt>.</dd>\n<dt><tt>response.auto_paging_iter()</tt></dt>\n<dd>Returns a generator of records that will automatically request new pages\nwhen necessary.</dd>\n</dl>\n</div>\n<div id=\"error\">\n<h2>Error</h2>\n<p>If there is a connection error or the HTTP response contains a non-2XX status\ncode, the method will raise an instance of <tt>mercadopago.Error</tt>. The error\nobject contains the following attributes:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Attribute</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>http_status</tt></td>\n<td>The HTTP status_code returned by the API, if applicable.</td>\n</tr>\n<tr><td><tt>code</tt></td>\n<td>The error code returned by the API, if applicable.</td>\n</tr>\n<tr><td><tt>json_data</tt></td>\n<td>The full JSON response returned by the API, if applicable.</td>\n</tr>\n</tbody>\n</table>\n<p>The specific subclass raised depends on the HTTP status code.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Status</th>\n<th>Class</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>400</td>\n<td><tt>mercadopago.BadRequestError</tt></td>\n</tr>\n<tr><td>401</td>\n<td><tt>mercadopago.AuthorizationError</tt></td>\n</tr>\n<tr><td>404</td>\n<td><tt>mercadopago.NotFoundError</tt></td>\n</tr>\n<tr><td>*</td>\n<td><tt>mercadopago.Error</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"running-the-tests\">\n<h2>Running the tests</h2>\n<p>Make sure tests pass before contributing a bugfix or a new feature.\nTo run the test suite, execute this in your terminal:</p>\n<pre>python setup.py test\n</pre>\n<p>This will execute the tests with your default Python interpreter.\nUse <tt>tox</tt> to run the tests in all supported Python versions.</p>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<ul>\n<li>Implement idempotency headers in POST/PUT requests.</li>\n<li>Implement retry request from error.</li>\n</ul>\n<hr class=\"docutils\">\n<p>For more information about the API, refer to the <a href=\"https://www.mercadopago.com.ar/developers/en/reference/\" rel=\"nofollow\">official docs</a>.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Federico Bond</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache-2.0</p>\n</div>\n\n          </div>"}, "last_serial": 6067075, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "381a6fa835aa38ef484f548196e4c645", "sha256": "9123022d2f6b918590fbbc890ac1a636e6020998f8bb1cfeb63e66b000adc926"}, "downloads": -1, "filename": "pymercadopago-0.1.0.tar.gz", "has_sig": false, "md5_digest": "381a6fa835aa38ef484f548196e4c645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9594, "upload_time": "2018-06-30T10:19:25", "upload_time_iso_8601": "2018-06-30T10:19:25.160545Z", "url": "https://files.pythonhosted.org/packages/ba/a5/9ae33aaac968abb67ecc40d7ff83e56be31ead61fbddc0dde8d8cebd9894/pymercadopago-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9fe673d68cbbe6b321c1e14592e419a8", "sha256": "72d6ecd4c5271e389ceb4bc41962d25b6649001e36c89b8fa02d69c279129f38"}, "downloads": -1, "filename": "pymercadopago-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9fe673d68cbbe6b321c1e14592e419a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9739, "upload_time": "2018-06-30T10:44:29", "upload_time_iso_8601": "2018-06-30T10:44:29.951594Z", "url": "https://files.pythonhosted.org/packages/35/0e/f555e39e75b2e65e6a22cd674c31e769f3217474be80db7b5cffc3537661/pymercadopago-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "88f93c1176352ec36d3ac0d53954479e", "sha256": "f220c5d72d1a0ccd2c243ab614b40c7343eec9b0b3b56adcef5a06cabb9fb058"}, "downloads": -1, "filename": "pymercadopago-0.1.2.tar.gz", "has_sig": false, "md5_digest": "88f93c1176352ec36d3ac0d53954479e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9790, "upload_time": "2018-06-30T10:50:57", "upload_time_iso_8601": "2018-06-30T10:50:57.563418Z", "url": "https://files.pythonhosted.org/packages/b5/e1/bf908d83656bbbaf0169ab52cd4b2572fb3c3ef8b5c54b7e5955f1bced41/pymercadopago-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "49d198fe307031c5404ef538ba668015", "sha256": "a790ddd6387bbb1336a9005f2231c904275c303078206231d76e9a2de5a1e515"}, "downloads": -1, "filename": "pymercadopago-0.1.3.tar.gz", "has_sig": false, "md5_digest": "49d198fe307031c5404ef538ba668015", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10189, "upload_time": "2018-06-30T11:50:01", "upload_time_iso_8601": "2018-06-30T11:50:01.081112Z", "url": "https://files.pythonhosted.org/packages/32/e7/596a716ab7a403830cf0cbb9f194a07799314c57a28b9a2d7c47f7de1e95/pymercadopago-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0502b695abeb1b8f973c7c5281ecdb59", "sha256": "db3db537013e127baad830da677700da1644e1ed181a8a3e4676e1a050495d24"}, "downloads": -1, "filename": "pymercadopago-0.1.4.tar.gz", "has_sig": false, "md5_digest": "0502b695abeb1b8f973c7c5281ecdb59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11702, "upload_time": "2018-07-02T23:27:05", "upload_time_iso_8601": "2018-07-02T23:27:05.425308Z", "url": "https://files.pythonhosted.org/packages/6f/62/50de6c6ca2526d4ce09a88a638b6d7e2ae40c8e5b4a5e032b9c516bc177e/pymercadopago-0.1.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8b4dff95464fc108b6bc6b83c32580be", "sha256": "3f917465b86e65d0b042a51d466968bc30bc8e59a20e83337837892ac7d60438"}, "downloads": -1, "filename": "pymercadopago-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8b4dff95464fc108b6bc6b83c32580be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8956, "upload_time": "2019-11-02T04:18:18", "upload_time_iso_8601": "2019-11-02T04:18:18.471889Z", "url": "https://files.pythonhosted.org/packages/e1/8f/785f3532bc10a5699658d4c51d344d43ca61c798235c8e5b228663f582bf/pymercadopago-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8b4dff95464fc108b6bc6b83c32580be", "sha256": "3f917465b86e65d0b042a51d466968bc30bc8e59a20e83337837892ac7d60438"}, "downloads": -1, "filename": "pymercadopago-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8b4dff95464fc108b6bc6b83c32580be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8956, "upload_time": "2019-11-02T04:18:18", "upload_time_iso_8601": "2019-11-02T04:18:18.471889Z", "url": "https://files.pythonhosted.org/packages/e1/8f/785f3532bc10a5699658d4c51d344d43ca61c798235c8e5b228663f582bf/pymercadopago-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:14 2020"}