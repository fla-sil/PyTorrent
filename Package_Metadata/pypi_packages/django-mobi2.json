{"info": {"author": "Hackathon", "author_email": "kimi.huang@brightcells.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: Office/Business :: Financial :: Spreadsheet", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Author: Ken Cochrane\nFork of: http://minidetector.googlecode.com\nFork Description: I reorganized the code, added caching, and made a few tweaks here and there.\nDescription: Django middleware and view decorator to detect phones and small-screen devices\nVersion: 0.1.7\nLast Update: 11/17/2013\n\nRequirements:\n-------------\nDjango 1.1 or newer\nDjango caching to be enabled if you want to cache the objects\n\nHow to use:\n-----------\nUsing django-mobi is very simple. Simply place the mobi package into your project's path, and then do one of the following:\n\n\nUsing the mobi.middleware.MobileDetectionMiddleware Middleware\n---------------------------------------------------\nThis middleware will scan all incoming requests to see if it is a mobile device. If it is it will set the request.mobile property to True.\n\nTo use all you have to do is `add mobi.middleware.MobileDetectionMiddleware` to your `MIDDLEWARE_CLASSES` tuple in your `settings.py`\n\nThen in your view you can check request.mobile - if it's True then treat it like a small screen device. If it's False then it's probably a desktop browser, or a spider or something else.\n\nIf you want to have some items not triggered by the middleware (for example iPad) then add a settings called MOBI_USER_AGENT_IGNORE_LIST and add the item to the list.\n\nMOBI_USER_AGENT_IGNORE_LIST = ['ipad',]\n\nIf you want to distinguish tablet devices from phones, then set MOBI_DETECT_TABLET = True and use request.tablet attribute\n\n{% if not request.mobile or request.tablet %}\n\t<p>This section enabled only for descktop and tablets</p>\n{% endif %}\n\n\n\n\nUsing the mobi.middleware.MobileRedirectMiddleware Middleware\n---------------------------------------------------\nThis middleware will scan all incoming requests to see if it is a mobile device, if so it will redirect the request to a different URL. This is good if you want to force all mobile traffic to a mobile only version of your site.\n\nTo use all you have to do is add `mobi.middleware.MobileRedirectMiddleware` to your `MIDDLEWARE_CLASSES` tuple in your `settings.py`, and also add MOBI_REDIRECT_URL = \"http://example.mobi\" where http://example.mobi is the website you want to redirect all mobile traffic.\n\n\nNot using the Middleware\n------------------------\nIf you only have certain views that need the distinction, you can choose not to search every request you receive. All you need to do is wrap the relevant views like this:\n\nfrom mobi.decorators import detect_mobile\n\n@detect_mobile\ndef my_mobile_view(request):\n    if request.mobile:\n        #do something with mobile\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/django-xxx/django-mobi2.git", "keywords": "Django UserAgent", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-mobi2", "package_url": "https://pypi.org/project/django-mobi2/", "platform": "", "project_url": "https://pypi.org/project/django-mobi2/", "project_urls": {"Homepage": "https://github.com/django-xxx/django-mobi2.git"}, "release_url": "https://pypi.org/project/django-mobi2/1.0.2/", "requires_dist": ["django-six"], "requires_python": "", "summary": "Django middleware and view decorator to detect phones and small-screen devices", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Author: Ken Cochrane<br>Fork of: http://minidetector.googlecode.com<br>Fork Description: I reorganized the code, added caching, and made a few tweaks here and there.<br>Description: Django middleware and view decorator to detect phones and small-screen devices<br>Version: 0.1.7<br>Last Update: 11/17/2013<br><br>Requirements:<br>-------------<br>Django 1.1 or newer<br>Django caching to be enabled if you want to cache the objects<br><br>How to use:<br>-----------<br>Using django-mobi is very simple. Simply place the mobi package into your project's path, and then do one of the following:<br><br><br>Using the mobi.middleware.MobileDetectionMiddleware Middleware<br>---------------------------------------------------<br>This middleware will scan all incoming requests to see if it is a mobile device. If it is it will set the request.mobile property to True.<br><br>To use all you have to do is `add mobi.middleware.MobileDetectionMiddleware` to your `MIDDLEWARE_CLASSES` tuple in your `settings.py`<br><br>Then in your view you can check request.mobile - if it's True then treat it like a small screen device. If it's False then it's probably a desktop browser, or a spider or something else.<br><br>If you want to have some items not triggered by the middleware (for example iPad) then add a settings called MOBI_USER_AGENT_IGNORE_LIST and add the item to the list.<br><br>MOBI_USER_AGENT_IGNORE_LIST = ['ipad',]<br><br>If you want to distinguish tablet devices from phones, then set MOBI_DETECT_TABLET = True and use request.tablet attribute<br><br>{% if not request.mobile or request.tablet %}<br>\t&lt;p&gt;This section enabled only for descktop and tablets&lt;/p&gt;<br>{% endif %}<br><br><br><br><br>Using the mobi.middleware.MobileRedirectMiddleware Middleware<br>---------------------------------------------------<br>This middleware will scan all incoming requests to see if it is a mobile device, if so it will redirect the request to a different URL. This is good if you want to force all mobile traffic to a mobile only version of your site.<br><br>To use all you have to do is add `mobi.middleware.MobileRedirectMiddleware` to your `MIDDLEWARE_CLASSES` tuple in your `settings.py`, and also add MOBI_REDIRECT_URL = \"http://example.mobi\" where http://example.mobi is the website you want to redirect all mobile traffic.<br><br><br>Not using the Middleware<br>------------------------<br>If you only have certain views that need the distinction, you can choose not to search every request you receive. All you need to do is wrap the relevant views like this:<br><br>from mobi.decorators import detect_mobile<br><br>@detect_mobile<br>def my_mobile_view(request):<br>    if request.mobile:<br>        #do something with mobile<br><br><br><br>\n          </div>"}, "last_serial": 4006809, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "9702a002e091245eef299095d2a60ca1", "sha256": "ce8cd53c197a0068dc30e4fc660834f58c3254bb1afe724d90210781f219fac2"}, "downloads": -1, "filename": "django_mobi2-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9702a002e091245eef299095d2a60ca1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6566, "upload_time": "2018-06-27T10:21:13", "upload_time_iso_8601": "2018-06-27T10:21:13.639499Z", "url": "https://files.pythonhosted.org/packages/55/58/856a2bcb732850491fbcdb6ba3d823a27e1c514a69301f988f37901cbaff/django_mobi2-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ee18bf78f444254b0cedd1ff421aac6", "sha256": "3bca5ed675f029f85f36574cc7befda4b7380e8a88ddee165099328e3eca7e07"}, "downloads": -1, "filename": "django-mobi2-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4ee18bf78f444254b0cedd1ff421aac6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6236, "upload_time": "2018-06-27T10:21:14", "upload_time_iso_8601": "2018-06-27T10:21:14.905633Z", "url": "https://files.pythonhosted.org/packages/29/5a/cf05ee72529c4a73b6d649ea146d973e23185b94480a1ea5b17d724e2999/django-mobi2-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9702a002e091245eef299095d2a60ca1", "sha256": "ce8cd53c197a0068dc30e4fc660834f58c3254bb1afe724d90210781f219fac2"}, "downloads": -1, "filename": "django_mobi2-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9702a002e091245eef299095d2a60ca1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6566, "upload_time": "2018-06-27T10:21:13", "upload_time_iso_8601": "2018-06-27T10:21:13.639499Z", "url": "https://files.pythonhosted.org/packages/55/58/856a2bcb732850491fbcdb6ba3d823a27e1c514a69301f988f37901cbaff/django_mobi2-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ee18bf78f444254b0cedd1ff421aac6", "sha256": "3bca5ed675f029f85f36574cc7befda4b7380e8a88ddee165099328e3eca7e07"}, "downloads": -1, "filename": "django-mobi2-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4ee18bf78f444254b0cedd1ff421aac6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6236, "upload_time": "2018-06-27T10:21:14", "upload_time_iso_8601": "2018-06-27T10:21:14.905633Z", "url": "https://files.pythonhosted.org/packages/29/5a/cf05ee72529c4a73b6d649ea146d973e23185b94480a1ea5b17d724e2999/django-mobi2-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:03 2020"}