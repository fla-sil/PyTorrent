{"info": {"author": "nevimov", "author_email": "nevimov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "========================\ndjango-facebook-insights\n========================\n\nCollect and store `Facebook Insights`_ metrics using Django models.\n\nThis app provides a flexible abstract model with method `fetch()`. It gets all\nrequired metrics with a single `batch request`_ to Graph API and puts them into\nyour child model's fields.\n\n**Requirements**:\n\n* Django 1.7 to 1.10 on Python 2.7\n* Django 1.8 to 1.10 on Python 3.4 and 3.5\n* facebook-sdk 1.0.0+\n\n.. contents::\n   :depth: 1\n   :backlinks: top\n\n\nInstallation\n------------\n\nInstall the app with pip::\n\n    $ pip install django-facebook-insights\n\nAdd `'facebook_insights'` to your `INSTALLED_APPS` setting::\n\n    INSTALLED_APPS = [\n        ...\n        'facebook_insights',\n    ]\n\nFinally, provide a valid access token with the 'read_insights' permission using\nsetting `FACEBOOK_INSIGHTS_ACCESS_TOKEN`.\n\n\nUsage example\n-------------\n\nIn the simplest case, all you need to do is to write code similar to the\none below::\n\n    from django.db import models\n    from facebook_insights.models import Insights\n\n\n    # Inherit from the abstract 'Insights' model\n    class PostInsights(Insights):\n        # List metrics you're intrested in\n        METRICS = [\n            'post_impressions',\n            'post_impressions_unique',\n            'post_stories',\n            'post_stories_by_action_type',\n        ]\n        # Define field 'graph_id' to hold the Facebook ids of objects\n        graph_id = models.CharField(max_length=100)\n        # Define fields to store the metrics\n        impressions = models.PositiveIntegerField()\n        impressions_unique = models.PositiveIntegerField()\n        stories = models.PositiveIntegerField()\n        stories_by_action_type = models.CharField(max_length=100)\n\n.. note::\n    If you want to use a different name for the graph id field, change\n    attribute GRAPH_ID_FIELD to the desired value.\n\nNow, you can instantiate the model and call fetch() to get the metrics from\nFacebook's servers::\n\n    >>> post_insights = PostInsights(graph_id=your_post_id)\n    >>> post_insights.fetch()\n    >>> post_insights.impressions\n    1000\n    >>> post_insights.impressions_unique\n    200\n    >>> post_insights.stories\n    100\n    >>> post_insights.stories_by_action_type\n    '{\"like\": 40, \"share\": 30, \"comment\": 30}'\n\n\nMapping metrics to fields\n-------------------------\n\nTo figure out which metrics belong to which fields, the app uses the following\nsimple algorithm:\n\n* Take the metric name as the base name.\n\n* Remove the object type prefix (``'post_', 'page_' or 'domain_'``),\n  if attribute REMOVE_PREFIX is set to True (the default).\n  The prefix is removed, so we can, for instance, access the\n  'post_impressions' metric as `post_insights.impressions` instead of\n  `post_insights.post_impressions`.\n\n.. note::\n\n    The full list of *metrics* with their *periods* can be found in Graph API\n    Reference on `Object Insights`_.\n\nIf you want to use a more complex algorithm, you need to override the\n`get_field_name()` method.\n\n\nExtracting field values\n-----------------------\n\nValues associated with page metrics are quite complex. They are available for\nseveral periods (e.g. day, week, 28 days) and include data for 3 consecutive\ndays. By contrast, values of most of post metrics are available only for one\nperiod (lifetime) and represent the current state of things.\n\nThe extraction of metric values is the responsibility of the\n`get_field_value()` method. The default implementation works as follows:\n\n* If a metric has several periods, return the dictionary of mappings between\n  the periods and the last available values for these periods serialized into\n  JSON, for example, `'{\"day\": 10, \"week\": 70, \"days_28\": 300\"}'`. The data\n  for previous days are discarded.\n* If a metric is provided only for a single period, then simply return the\n  value (serialize, if it's not a number).\n\nFeel free to override the method, if you want something else.\n\n\nGetting object_id from a related object\n---------------------------------------\n\nIn case you already have a model representing a Facebook page or post, you will\nlikely want to get the graph ids from instances of this model. To do this,\nall you need is to set attribute RELATED_OBJECT_FIELD to the name of the field\nreferencing the related object::\n\n    class Page(models.Model):\n        graph_id = models.CharField(\n            max_length=100,\n            primary_key=True,\n            help_text=\"The page's ID on Facebook\",\n        )\n\n\n    class PageInsights(Insights):\n        RELATED_OBJECT_FIELD = 'page'\n        METRICS = [ ... ]\n        page = models.OneToOneField(\n            Page,\n            primary_key=True,\n            related_name='insights',\n        )\n        ...\n\n\nReporting bugs\n--------------\n\nIf you've found a bug:\n\n* Check to see if there's an existing issue/pull request for the bug.\n\n  | PR:     https://github.com/nevimov/django-facebook-insights/pulls\n  | Issues: https://github.com/nevimov/django-facebook-insights/issues\n\n* If there isn't one, file an issue. A bug report should include:\n\n  * a description of the problem\n  * instructions on how to recreate the bug\n  * versions of your Python interpreter and Django\n\n\nContributing code\n-----------------\n\n* Fork the project on GitHub to your account.\n\n* Clone the repository::\n\n    $ git clone https://github.com/nevimov/django-facebook-insights\n\n* Setup a virtual environment::\n\n    $ virtualenv venv\n    $ source venv/bin/activate\n    $ pip install -U pip\n    $ pip install django\n    $ pip install -r requirements.txt\n\n* In directory 'tests' create a file named 'secret.py'. In this file, set\n   the `FACEBOOK_INSIGHTS_ACCESS_TOKEN` setting'.  Alternatively, define an\n   environment variable with the same name.\n\n* Run tests to ensure everything is OK::\n\n    $ python runtests.py\n\n  You can use *-h* or *--help* to see options available to the script.\n\n* Create a topic branch and commit your changes there.\n\n* Push the branch up to GitHub.\n\n* Create a new pull request.\n\n\n.. _Object Insights:\n.. _Facebook Insights: https://developers.facebook.com/docs/graph-api/reference/v2.8/insights\n.. _batch request: https://developers.facebook.com/docs/graph-api/making-multiple-requests", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nevimov/django-facebook-insights", "keywords": "django facebook insights metrics stats statistics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-facebook-insights", "package_url": "https://pypi.org/project/django-facebook-insights/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-facebook-insights/", "project_urls": {"Homepage": "https://github.com/nevimov/django-facebook-insights"}, "release_url": "https://pypi.org/project/django-facebook-insights/0.1.0/", "requires_dist": ["facebook-sdk (>=1,<3)"], "requires_python": "", "summary": "Collect and store Facebook Insights metrics using Django models.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Collect and store <a href=\"https://developers.facebook.com/docs/graph-api/reference/v2.8/insights\" rel=\"nofollow\">Facebook Insights</a> metrics using Django models.</p>\n<p>This app provides a flexible abstract model with method <cite>fetch()</cite>. It gets all\nrequired metrics with a single <a href=\"https://developers.facebook.com/docs/graph-api/making-multiple-requests\" rel=\"nofollow\">batch request</a> to Graph API and puts them into\nyour child model\u2019s fields.</p>\n<p><strong>Requirements</strong>:</p>\n<ul>\n<li>Django 1.7 to 1.10 on Python 2.7</li>\n<li>Django 1.8 to 1.10 on Python 3.4 and 3.5</li>\n<li>facebook-sdk 1.0.0+</li>\n</ul>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage-example\" id=\"id2\" rel=\"nofollow\">Usage example</a></li>\n<li><a href=\"#mapping-metrics-to-fields\" id=\"id3\" rel=\"nofollow\">Mapping metrics to fields</a></li>\n<li><a href=\"#extracting-field-values\" id=\"id4\" rel=\"nofollow\">Extracting field values</a></li>\n<li><a href=\"#getting-object-id-from-a-related-object\" id=\"id5\" rel=\"nofollow\">Getting object_id from a related object</a></li>\n<li><a href=\"#reporting-bugs\" id=\"id6\" rel=\"nofollow\">Reporting bugs</a></li>\n<li><a href=\"#contributing-code\" id=\"id7\" rel=\"nofollow\">Contributing code</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Installation</a></h2>\n<p>Install the app with pip:</p>\n<pre>$ pip install django-facebook-insights\n</pre>\n<p>Add <cite>\u2018facebook_insights\u2019</cite> to your <cite>INSTALLED_APPS</cite> setting:</p>\n<pre>INSTALLED_APPS = [\n    ...\n    'facebook_insights',\n]\n</pre>\n<p>Finally, provide a valid access token with the \u2018read_insights\u2019 permission using\nsetting <cite>FACEBOOK_INSIGHTS_ACCESS_TOKEN</cite>.</p>\n</div>\n<div id=\"usage-example\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Usage example</a></h2>\n<p>In the simplest case, all you need to do is to write code similar to the\none below:</p>\n<pre>from django.db import models\nfrom facebook_insights.models import Insights\n\n\n# Inherit from the abstract 'Insights' model\nclass PostInsights(Insights):\n    # List metrics you're intrested in\n    METRICS = [\n        'post_impressions',\n        'post_impressions_unique',\n        'post_stories',\n        'post_stories_by_action_type',\n    ]\n    # Define field 'graph_id' to hold the Facebook ids of objects\n    graph_id = models.CharField(max_length=100)\n    # Define fields to store the metrics\n    impressions = models.PositiveIntegerField()\n    impressions_unique = models.PositiveIntegerField()\n    stories = models.PositiveIntegerField()\n    stories_by_action_type = models.CharField(max_length=100)\n</pre>\n<div>\n<p>Note</p>\n<p>If you want to use a different name for the graph id field, change\nattribute GRAPH_ID_FIELD to the desired value.</p>\n</div>\n<p>Now, you can instantiate the model and call fetch() to get the metrics from\nFacebook\u2019s servers:</p>\n<pre>&gt;&gt;&gt; post_insights = PostInsights(graph_id=your_post_id)\n&gt;&gt;&gt; post_insights.fetch()\n&gt;&gt;&gt; post_insights.impressions\n1000\n&gt;&gt;&gt; post_insights.impressions_unique\n200\n&gt;&gt;&gt; post_insights.stories\n100\n&gt;&gt;&gt; post_insights.stories_by_action_type\n'{\"like\": 40, \"share\": 30, \"comment\": 30}'\n</pre>\n</div>\n<div id=\"mapping-metrics-to-fields\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Mapping metrics to fields</a></h2>\n<p>To figure out which metrics belong to which fields, the app uses the following\nsimple algorithm:</p>\n<ul>\n<li>Take the metric name as the base name.</li>\n<li>Remove the object type prefix (<tt>'post_', 'page_' or 'domain_'</tt>),\nif attribute REMOVE_PREFIX is set to True (the default).\nThe prefix is removed, so we can, for instance, access the\n\u2018post_impressions\u2019 metric as <cite>post_insights.impressions</cite> instead of\n<cite>post_insights.post_impressions</cite>.</li>\n</ul>\n<div>\n<p>Note</p>\n<p>The full list of <em>metrics</em> with their <em>periods</em> can be found in Graph API\nReference on <a href=\"https://developers.facebook.com/docs/graph-api/reference/v2.8/insights\" rel=\"nofollow\">Object Insights</a>.</p>\n</div>\n<p>If you want to use a more complex algorithm, you need to override the\n<cite>get_field_name()</cite> method.</p>\n</div>\n<div id=\"extracting-field-values\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Extracting field values</a></h2>\n<p>Values associated with page metrics are quite complex. They are available for\nseveral periods (e.g. day, week, 28 days) and include data for 3 consecutive\ndays. By contrast, values of most of post metrics are available only for one\nperiod (lifetime) and represent the current state of things.</p>\n<p>The extraction of metric values is the responsibility of the\n<cite>get_field_value()</cite> method. The default implementation works as follows:</p>\n<ul>\n<li>If a metric has several periods, return the dictionary of mappings between\nthe periods and the last available values for these periods serialized into\nJSON, for example, <cite>\u2018{\u201cday\u201d: 10, \u201cweek\u201d: 70, \u201cdays_28\u201d: 300\u201d}\u2019</cite>. The data\nfor previous days are discarded.</li>\n<li>If a metric is provided only for a single period, then simply return the\nvalue (serialize, if it\u2019s not a number).</li>\n</ul>\n<p>Feel free to override the method, if you want something else.</p>\n</div>\n<div id=\"getting-object-id-from-a-related-object\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Getting object_id from a related object</a></h2>\n<p>In case you already have a model representing a Facebook page or post, you will\nlikely want to get the graph ids from instances of this model. To do this,\nall you need is to set attribute RELATED_OBJECT_FIELD to the name of the field\nreferencing the related object:</p>\n<pre>class Page(models.Model):\n    graph_id = models.CharField(\n        max_length=100,\n        primary_key=True,\n        help_text=\"The page's ID on Facebook\",\n    )\n\n\nclass PageInsights(Insights):\n    RELATED_OBJECT_FIELD = 'page'\n    METRICS = [ ... ]\n    page = models.OneToOneField(\n        Page,\n        primary_key=True,\n        related_name='insights',\n    )\n    ...\n</pre>\n</div>\n<div id=\"reporting-bugs\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Reporting bugs</a></h2>\n<p>If you\u2019ve found a bug:</p>\n<ul>\n<li><p>Check to see if there\u2019s an existing issue/pull request for the bug.</p>\n<div>\n<div>PR:     <a href=\"https://github.com/nevimov/django-facebook-insights/pulls\" rel=\"nofollow\">https://github.com/nevimov/django-facebook-insights/pulls</a></div>\n<div>Issues: <a href=\"https://github.com/nevimov/django-facebook-insights/issues\" rel=\"nofollow\">https://github.com/nevimov/django-facebook-insights/issues</a></div>\n</div>\n</li>\n<li><p>If there isn\u2019t one, file an issue. A bug report should include:</p>\n<ul>\n<li>a description of the problem</li>\n<li>instructions on how to recreate the bug</li>\n<li>versions of your Python interpreter and Django</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"contributing-code\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Contributing code</a></h2>\n<ul>\n<li><p>Fork the project on GitHub to your account.</p>\n</li>\n<li><p>Clone the repository:</p>\n<pre>$ git clone https://github.com/nevimov/django-facebook-insights\n</pre>\n</li>\n<li><p>Setup a virtual environment:</p>\n<pre>$ virtualenv venv\n$ source venv/bin/activate\n$ pip install -U pip\n$ pip install django\n$ pip install -r requirements.txt\n</pre>\n</li>\n<li><dl>\n<dt>In directory \u2018tests\u2019 create a file named \u2018secret.py\u2019. In this file, set</dt>\n<dd><p>the <cite>FACEBOOK_INSIGHTS_ACCESS_TOKEN</cite> setting\u2019.  Alternatively, define an\nenvironment variable with the same name.</p>\n</dd>\n</dl>\n</li>\n<li><p>Run tests to ensure everything is OK:</p>\n<pre>$ python runtests.py\n</pre>\n<p>You can use <em>-h</em> or <em>\u2013help</em> to see options available to the script.</p>\n</li>\n<li><p>Create a topic branch and commit your changes there.</p>\n</li>\n<li><p>Push the branch up to GitHub.</p>\n</li>\n<li><p>Create a new pull request.</p>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2473916, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "268cf4aab3b02bac6d50946cd9c0f7ee", "sha256": "d2b665a05f6ba211c44d7e27e506aea48a160acc13316f73530064761cfc4a2d"}, "downloads": -1, "filename": "django_facebook_insights-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "268cf4aab3b02bac6d50946cd9c0f7ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12469, "upload_time": "2016-11-21T12:09:14", "upload_time_iso_8601": "2016-11-21T12:09:14.496594Z", "url": "https://files.pythonhosted.org/packages/7c/b9/5484c539fdb4fe6ecd5bfc53958bb3c0f365da8790005e862f8cc882a40a/django_facebook_insights-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "189463e9a3f5a29ab40f6ce81e6e9497", "sha256": "0bd9b6dd037e89cda6fd6c2141c5357903b3f0889a62937316f138577a7b5552"}, "downloads": -1, "filename": "django-facebook-insights-0.1.0.tar.gz", "has_sig": false, "md5_digest": "189463e9a3f5a29ab40f6ce81e6e9497", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8937, "upload_time": "2016-11-21T12:09:17", "upload_time_iso_8601": "2016-11-21T12:09:17.563208Z", "url": "https://files.pythonhosted.org/packages/13/98/a28745e0c364c1405727de6278f582ed153f420795d81219091e39fba685/django-facebook-insights-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "268cf4aab3b02bac6d50946cd9c0f7ee", "sha256": "d2b665a05f6ba211c44d7e27e506aea48a160acc13316f73530064761cfc4a2d"}, "downloads": -1, "filename": "django_facebook_insights-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "268cf4aab3b02bac6d50946cd9c0f7ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12469, "upload_time": "2016-11-21T12:09:14", "upload_time_iso_8601": "2016-11-21T12:09:14.496594Z", "url": "https://files.pythonhosted.org/packages/7c/b9/5484c539fdb4fe6ecd5bfc53958bb3c0f365da8790005e862f8cc882a40a/django_facebook_insights-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "189463e9a3f5a29ab40f6ce81e6e9497", "sha256": "0bd9b6dd037e89cda6fd6c2141c5357903b3f0889a62937316f138577a7b5552"}, "downloads": -1, "filename": "django-facebook-insights-0.1.0.tar.gz", "has_sig": false, "md5_digest": "189463e9a3f5a29ab40f6ce81e6e9497", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8937, "upload_time": "2016-11-21T12:09:17", "upload_time_iso_8601": "2016-11-21T12:09:17.563208Z", "url": "https://files.pythonhosted.org/packages/13/98/a28745e0c364c1405727de6278f582ed153f420795d81219091e39fba685/django-facebook-insights-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:14 2020"}