{"info": {"author": "Akgnah", "author_email": "1024@setq.me", "bugtrack_url": null, "classifiers": [], "description": "fanfou-py: a python oauth client for fanfou\n===========================================\n\n.. image:: https://img.shields.io/travis/akgnah/fanfou-py/master.svg\n    :target: https://travis-ci.org/akgnah/fanfou-py\n\n.. image:: https://img.shields.io/pypi/v/fanfou.svg\n    :target: https://pypi.python.org/pypi/fanfou\n\n.. image:: https://img.shields.io/pypi/l/fanfou.svg\n    :target: https://pypi.python.org/pypi/fanfou\n\n.. image:: https://img.shields.io/badge/code_style-pep8-orange.svg\n    :target: https://www.python.org/dev/peps/pep-0008\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ sudo pip install fanfou\n\nUsage\n-----\n\n.. code-block:: python\n\n   >>> import fanfou\n\n\nStep 1:  Authorize\n^^^^^^^^^^^^^^^^^^\n\nThe module provides several ways to authorize, see more details on `Fanfou API OAuth <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/Oauth>`_.\n\nWay 1:\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> consumer = {'key': 'your key', 'secret': 'your secret'}\n   >>> client = fanfou.OAuth(consumer)    # (1)(2)\n   >>> request_token = client.request_token()\n   >>> print(client.authorize_url)    # browse the url to authorize\n   >>> access_token = client.access_token()    # done\n\n(1). The default callback is '`http://localhost:8080`'.\n\n(2). The default authorize_url is '`m.fanfou.com/`...', you can pass auth_host='fanfou.com' to change it.\n\nMaybe you handling the callback elsewhere, create a new client and get access_token, like that:\n\n.. code-block:: python\n\n   >>> client = fanfou.OAuth(consumer, request_token)\n   >>> access_token = client.access_token()    # done\n   >>> # or\n   >>> client = fanfou.OAuth(consumer)\n   >>> access_token = client.access_token(request_token)    # done\n\nWay 2:\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> consumer = {'key': 'your key', 'secret': 'your secret'}\n   >>> client = fanfou.OAuth(consumer, callback='oob')\n   >>> request_token = client.request_token()\n   >>> print(client.authorize_url)    # browse the url and copy verifier_code\n   >>> verifier_code = 'your verifier_code'\n   >>> access_token = client.access_token(oauth_verifier=verifier_code)    # done\n\nYou can also create a new client and get access_token, like the way 1 above.\n\nWay 3:\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> consumer = {'key': 'your key', 'secret': 'your secret'}\n   >>> access_token =  {'key': 'your key', 'secret': 'your secret'}    # access_token is what you saved before\n   >>> client = fanfou.OAuth(consumer, access_token)    # done\n\nWay 4:\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> consumer = {'key': 'your key', 'secret': 'your secret'}\n   >>> client = fanfou.XAuth(consumer, 'username', 'password')    # done\n   >>> access_token = client.access_token()    # optional, if you want to save access_token\n\n\nUsing https:\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nIn the lastest edition, you can using https like that:\n\n.. code-block:: python\n\n   >>> consumer = {'key': 'your key', 'secret': 'your secret'}\n   >>> client = fanfou.XAuth(consumer, 'username', 'password', fake_https=True)\n\nThe fake_https is available in all authorize ways.\n\n\nStep 2: Access API\n^^^^^^^^^^^^^^^^^^\n\nWe assume that you've got client on Step 1, now you have two styles to access API.\n\nStyle 1:\n\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> import json\n   >>> \n   >>> resp = client.request('/statuses/home_timeline', 'GET')  # resp is a HTTPResponse instance\n   >>> print(resp.code)\n   >>> data = json.loads(resp.read())    # Python 3: data = json.loads(resp.read().decode('utf8'))\n   >>> for item in data:\n   >>>     print(item['text'])\n   >>> \n   >>> body = {'status': 'update status test 1'}\n   >>> resp = client.request('/statuses/update', 'POST', body)\n   >>> print(resp.code)\n\n\nStyle 2:\n\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> import json\n   >>>  \n   >>> fanfou.bound(client)    # note the line\n   >>> \n   >>> body = {'page': 2, 'count': 20, 'mode': 'lite'}\n   >>> resp = client.statuses.home_timeline()\n   >>> data = json.loads(resp.read())    # Python 3: data = json.loads(resp.read().decode('utf8'))\n   >>> for item in data:\n   >>>     print(item['text'])\n   >>> \n   >>> body = {'status': 'update status test 2'}\n   >>> resp = client.statuses.update(body)\n   >>> print(resp.code)\n\nIf you want to use style 2, you must **fanfou.bound(client)** before use. They have the same effect, just two different styles.\n\nJust put all you want to request args to a dict (above is body), and then access a API. If you want to upload a photo, please see **pack_image**.\nMore API details on `Fanfou API Apicategory <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/Apicategory>`_.\n\n**What's new in 0.2.x**\n\n.. code-block:: python\n\n   >>> fanfou.bound(client)\n   >>> \n   >>> resp = client.users.show()\n   >>> data = resp.json()    # equal: data = json.loads(resp.read().decode('utf8')) \n\nIn this update, you can get a Python object directly by using resp.json().\n\n\nMore details\n^^^^^^^^^^^^\n\npack_image(args, binary=None)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nOn `/account/update_profile_image <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/account.update-profile-image>`_\nand `/photos/upload <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/photos.upload>`_ you need to upload a image, **pack_image** can help you work easily.\n\n.. code-block:: python\n\n   >>> # update profile image\n   >>> args = {'image': 'test.jpg', 'mode': 'lite'}\n   >>> body, headers = fanfou.pack_image(args)\n   >>> resp = client.account.update_profile_image(body, headers)\n   >>> # or, resp = client.request('/account/update_profile_image', 'POST', body, headers)\n   >>> print(resp.code)\n   >>> \n   >>> # upload photo\n   >>> args = {'photo': 'http://static.fanfou.com/img/fanfou.png', 'status': 'upload online photo'}\n   >>> body, headers = fanfou.pack_image(args)\n   >>> resp = client.photos.upload(body, headers)\n   >>> print(resp.code)\n\nJust put the filename in the args, then pack_image it, and then you can access API. The image file can be local or network file, pack_image will auto read it.\n\nSometimes you want to provide binary bytes instead of filename when you're writing a webapp, because the data you get from the form is binary. (like `m.setq.me <http://m.setq.me>`_)\n\n.. code-block:: python\n\n   >>> f = open('test.jpg')\n   >>> args = {'photo': 'test.jpg', 'status': 'upload local photo'}\n   >>> body, headers = fanfou.pack_image(args, binary=f.read())  # note the line\n   >>> f.close()\n   >>> resp = client.photos.upload(body, headers)\n   >>> print(resp.code)\n\n\nprint_api('plain')\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe following code print all api_access_url that be allowed pass to client.request:\n\n.. code-block:: python\n\n   >>> fanfou.print_api('plain')\n\nIf you type the line and watch the results carefully, you will find two api_access_url have *'/:id'*, they are:\n\n* `POST /favorites/destroy <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/favorites.destroy>`_\n* `POST /favorites/create <https://github.com/FanfouAPI/FanFouAPIDoc/wiki/favorites.create>`_\n\nBecause these API need *id* on it's access_url, so we get id from body and replace :id, like that:\n\n.. code-block:: python\n\n   >>> body = {'id': 'zFbiu4CsJrw'}\n   >>> resp = client.request('/favorites/create/:id', 'POST', body)\n   >>> print(resp.url)\n\nYou will see resp.url is http://api.fanfou.com/favorites/create/zFbiu4CsJrw.json (Forget to mention that '.json' will add to the access_url).\n\n\nprint_api('bound')\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   >>> fanfou.print_api('bound')\n\nThe line like *fanfou.print_api('plain')* but it will print all available methods that like client.statuses.home_timeline.\n\nYour IDE (or editor) can autocomplete them after **fanfou.bound(client)**.\n\nauth classes\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe __init__ method for auth classes is as follows:\n\nclass **OAuth** (oauth_consumer, oauth_token=None, callback=None, auth_host=None, https=False, fake_https=False)\n\nclass **XAuth** (oauth_consumer, username, password, https=False, fake_https=False)\n\nThanks\n------\n\nThank `Fanfou <http://fanfou.com>`_ and thank you for tolerating  my poor English.\n\nIf you have any questions, I am here `@home2 <http://fanfou.com/home2>`_.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/akgnah/fanfou-py", "keywords": "fanfou oauth", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fanfou", "package_url": "https://pypi.org/project/fanfou/", "platform": "any", "project_url": "https://pypi.org/project/fanfou/", "project_urls": {"Homepage": "http://github.com/akgnah/fanfou-py"}, "release_url": "https://pypi.org/project/fanfou/0.2.6/", "requires_dist": ["six"], "requires_python": "", "summary": "OAuth of Fanfou", "version": "0.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/akgnah/fanfou-py\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/akgnah/fanfou-py/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/481aedfc5d6a86cd0716ce4a22c7b28d9d96dd58/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f616b676e61682f66616e666f752d70792f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/fanfou\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/fanfou.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e30a5899d5d32fe5f2214e3adf96df90fe97ab65/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66616e666f752e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/fanfou\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/fanfou.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0b007e11c2bf39c6fc1a8d87b631eab7694fd50/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f66616e666f752e737667\"></a>\n<a href=\"https://www.python.org/dev/peps/pep-0008\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code_style-pep8-orange.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a961f273ed4cb0e9ae50b4cb74a5a5ee39a7c3a6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d706570382d6f72616e67652e737667\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ sudo pip install fanfou\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">fanfou</span>\n</pre>\n<div id=\"step-1-authorize\">\n<h3>Step 1:  Authorize</h3>\n<p>The module provides several ways to authorize, see more details on <a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/Oauth\" rel=\"nofollow\">Fanfou API OAuth</a>.</p>\n<div id=\"way-1\">\n<h4>Way 1:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">OAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">)</span>    <span class=\"c1\"># (1)(2)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request_token</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">authorize_url</span><span class=\"p\">)</span>    <span class=\"c1\"># browse the url to authorize</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">()</span>    <span class=\"c1\"># done</span>\n</pre>\n<p>(1). The default callback is \u2018<cite>http://localhost:8080</cite>\u2019.</p>\n<p>(2). The default authorize_url is \u2018<cite>m.fanfou.com/</cite>\u2026\u2019, you can pass auth_host=\u2019fanfou.com\u2019 to change it.</p>\n<p>Maybe you handling the callback elsewhere, create a new client and get access_token, like that:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">OAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"n\">request_token</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">()</span>    <span class=\"c1\"># done</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># or</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">OAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">(</span><span class=\"n\">request_token</span><span class=\"p\">)</span>    <span class=\"c1\"># done</span>\n</pre>\n</div>\n<div id=\"way-2\">\n<h4>Way 2:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">OAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"s1\">'oob'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">request_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request_token</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">authorize_url</span><span class=\"p\">)</span>    <span class=\"c1\"># browse the url and copy verifier_code</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">verifier_code</span> <span class=\"o\">=</span> <span class=\"s1\">'your verifier_code'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">(</span><span class=\"n\">oauth_verifier</span><span class=\"o\">=</span><span class=\"n\">verifier_code</span><span class=\"p\">)</span>    <span class=\"c1\"># done</span>\n</pre>\n<p>You can also create a new client and get access_token, like the way 1 above.</p>\n</div>\n<div id=\"way-3\">\n<h4>Way 3:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span>  <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>    <span class=\"c1\"># access_token is what you saved before</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">OAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"p\">)</span>    <span class=\"c1\"># done</span>\n</pre>\n</div>\n<div id=\"way-4\">\n<h4>Way 4:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">XAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>    <span class=\"c1\"># done</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">access_token</span><span class=\"p\">()</span>    <span class=\"c1\"># optional, if you want to save access_token</span>\n</pre>\n</div>\n<div id=\"using-https\">\n<h4>Using https:</h4>\n<p>In the lastest edition, you can using https like that:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'your key'</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">:</span> <span class=\"s1\">'your secret'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">XAuth</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">,</span> <span class=\"n\">fake_https</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>The fake_https is available in all authorize ways.</p>\n</div>\n</div>\n<div id=\"step-2-access-api\">\n<h3>Step 2: Access API</h3>\n<p>We assume that you\u2019ve got client on Step 1, now you have two styles to access API.</p>\n<div id=\"style-1\">\n<h4>Style 1:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'/statuses/home_timeline'</span><span class=\"p\">,</span> <span class=\"s1\">'GET'</span><span class=\"p\">)</span>  <span class=\"c1\"># resp is a HTTPResponse instance</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>    <span class=\"c1\"># Python 3: data = json.loads(resp.read().decode('utf8'))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'update status test 1'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'/statuses/update'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"style-2\">\n<h4>Style 2:</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">bound</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>    <span class=\"c1\"># note the line</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'count'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s1\">'mode'</span><span class=\"p\">:</span> <span class=\"s1\">'lite'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">statuses</span><span class=\"o\">.</span><span class=\"n\">home_timeline</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>    <span class=\"c1\"># Python 3: data = json.loads(resp.read().decode('utf8'))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'update status test 2'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">statuses</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to use style 2, you must <strong>fanfou.bound(client)</strong> before use. They have the same effect, just two different styles.</p>\n<p>Just put all you want to request args to a dict (above is body), and then access a API. If you want to upload a photo, please see <strong>pack_image</strong>.\nMore API details on <a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/Apicategory\" rel=\"nofollow\">Fanfou API Apicategory</a>.</p>\n<p><strong>What\u2019s new in 0.2.x</strong></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">bound</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">users</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>    <span class=\"c1\"># equal: data = json.loads(resp.read().decode('utf8'))</span>\n</pre>\n<p>In this update, you can get a Python object directly by using resp.json().</p>\n</div>\n</div>\n<div id=\"more-details\">\n<h3>More details</h3>\n<div id=\"pack-image-args-binary-none\">\n<h4>pack_image(args, binary=None)</h4>\n<p>On <a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/account.update-profile-image\" rel=\"nofollow\">/account/update_profile_image</a>\nand <a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/photos.upload\" rel=\"nofollow\">/photos/upload</a> you need to upload a image, <strong>pack_image</strong> can help you work easily.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># update profile image</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'image'</span><span class=\"p\">:</span> <span class=\"s1\">'test.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'mode'</span><span class=\"p\">:</span> <span class=\"s1\">'lite'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">pack_image</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">update_profile_image</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># or, resp = client.request('/account/update_profile_image', 'POST', body, headers)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># upload photo</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'photo'</span><span class=\"p\">:</span> <span class=\"s1\">'http://static.fanfou.com/img/fanfou.png'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'upload online photo'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">pack_image</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n</pre>\n<p>Just put the filename in the args, then pack_image it, and then you can access API. The image file can be local or network file, pack_image will auto read it.</p>\n<p>Sometimes you want to provide binary bytes instead of filename when you\u2019re writing a webapp, because the data you get from the form is binary. (like <a href=\"http://m.setq.me\" rel=\"nofollow\">m.setq.me</a>)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'test.jpg'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'photo'</span><span class=\"p\">:</span> <span class=\"s1\">'test.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'upload local photo'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">pack_image</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>  <span class=\"c1\"># note the line</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">photos</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"print-api-plain\">\n<h4>print_api(\u2018plain\u2019)</h4>\n<p>The following code print all api_access_url that be allowed pass to client.request:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">print_api</span><span class=\"p\">(</span><span class=\"s1\">'plain'</span><span class=\"p\">)</span>\n</pre>\n<p>If you type the line and watch the results carefully, you will find two api_access_url have <em>\u2018/:id\u2019</em>, they are:</p>\n<ul>\n<li><a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/favorites.destroy\" rel=\"nofollow\">POST /favorites/destroy</a></li>\n<li><a href=\"https://github.com/FanfouAPI/FanFouAPIDoc/wiki/favorites.create\" rel=\"nofollow\">POST /favorites/create</a></li>\n</ul>\n<p>Because these API need <em>id</em> on it\u2019s access_url, so we get id from body and replace :id, like that:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'zFbiu4CsJrw'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'/favorites/create/:id'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>You will see resp.url is <a href=\"http://api.fanfou.com/favorites/create/zFbiu4CsJrw.json\" rel=\"nofollow\">http://api.fanfou.com/favorites/create/zFbiu4CsJrw.json</a> (Forget to mention that \u2018.json\u2019 will add to the access_url).</p>\n</div>\n<div id=\"print-api-bound\">\n<h4>print_api(\u2018bound\u2019)</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanfou</span><span class=\"o\">.</span><span class=\"n\">print_api</span><span class=\"p\">(</span><span class=\"s1\">'bound'</span><span class=\"p\">)</span>\n</pre>\n<p>The line like <em>fanfou.print_api(\u2018plain\u2019)</em> but it will print all available methods that like client.statuses.home_timeline.</p>\n<p>Your IDE (or editor) can autocomplete them after <strong>fanfou.bound(client)</strong>.</p>\n</div>\n<div id=\"auth-classes\">\n<h4>auth classes</h4>\n<p>The __init__ method for auth classes is as follows:</p>\n<p>class <strong>OAuth</strong> (oauth_consumer, oauth_token=None, callback=None, auth_host=None, https=False, fake_https=False)</p>\n<p>class <strong>XAuth</strong> (oauth_consumer, username, password, https=False, fake_https=False)</p>\n</div>\n</div>\n</div>\n<div id=\"thanks\">\n<h2>Thanks</h2>\n<p>Thank <a href=\"http://fanfou.com\" rel=\"nofollow\">Fanfou</a> and thank you for tolerating  my poor English.</p>\n<p>If you have any questions, I am here <a href=\"http://fanfou.com/home2\" rel=\"nofollow\">@home2</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3345407, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5f9ed7cab8a8e576708cdb658f18e158", "sha256": "789ff124539d50276e8e1b2c6d747bda4f4ba4cf6711ce2a9c09cab08a2205cc"}, "downloads": -1, "filename": "fanfou-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "5f9ed7cab8a8e576708cdb658f18e158", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 6386, "upload_time": "2016-09-04T06:48:06", "upload_time_iso_8601": "2016-09-04T06:48:06.947101Z", "url": "https://files.pythonhosted.org/packages/13/91/5bab3c317be49bc1bed3fa4a8d17d0c7c6154988ee83bb8d6371d54dd615/fanfou-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1db9cc26fd5f528634c24ab4b7a933e", "sha256": "3c6f1809fa79f642aabca3a9a41ee2512fd009a5f8b991489b1350555c4e1325"}, "downloads": -1, "filename": "fanfou-0.1.0-py2-none-any.zip", "has_sig": false, "md5_digest": "f1db9cc26fd5f528634c24ab4b7a933e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6337, "upload_time": "2016-09-04T06:48:42", "upload_time_iso_8601": "2016-09-04T06:48:42.550212Z", "url": "https://files.pythonhosted.org/packages/07/20/687bf4f9e496f1e9e162517db8df15fd20a9d4afc9a9913696879821d72c/fanfou-0.1.0-py2-none-any.zip", "yanked": false}, {"comment_text": "", "digests": {"md5": "41b2aa11064dc61c3dada597add8fd87", "sha256": "79ae673df1bc46b6b00198e3e1761185c72b8f5667660fecc3681a072b41e8ad"}, "downloads": -1, "filename": "fanfou-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41b2aa11064dc61c3dada597add8fd87", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 6356, "upload_time": "2016-09-04T06:49:10", "upload_time_iso_8601": "2016-09-04T06:49:10.331699Z", "url": "https://files.pythonhosted.org/packages/7f/aa/c2e6408ba8852c983a48523e8f3b71026ec14bc5ed037a3d2ed06350f42c/fanfou-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3af605107e53513fc8cadf82ef1ec94", "sha256": "37648130f370de3c0ce6c7197ccdd8036b238146e0d3b9d7cd2ecbda9ffc7549"}, "downloads": -1, "filename": "fanfou-0.1.0-py3-none-any.zip", "has_sig": false, "md5_digest": "e3af605107e53513fc8cadf82ef1ec94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6314, "upload_time": "2016-09-04T06:49:19", "upload_time_iso_8601": "2016-09-04T06:49:19.107693Z", "url": "https://files.pythonhosted.org/packages/73/c5/9a345ed1336eec519c308d62927142a9efe1e856e171483ef65f426a9a34/fanfou-0.1.0-py3-none-any.zip", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "2e3b9abf458c36e6cf8e4507144d6c26", "sha256": "1bf9a4a9abdbb891240bea02dd4388b25b1ced1ccca2d5fc3cee8eec193f9883"}, "downloads": -1, "filename": "fanfou-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e3b9abf458c36e6cf8e4507144d6c26", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10669, "upload_time": "2017-10-13T14:27:58", "upload_time_iso_8601": "2017-10-13T14:27:58.239947Z", "url": "https://files.pythonhosted.org/packages/e5/ac/49b54dff384f98aafd41d43b1f01c2a1e28d32c080dd279ac6730aa9a155/fanfou-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ab1703429d8affb313df1846d2ee63c", "sha256": "b0867c6502856f58e03c6b1cc19d494ecd83d6d45d64c3f7c813fbfaef0b1f6b"}, "downloads": -1, "filename": "fanfou-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5ab1703429d8affb313df1846d2ee63c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7124, "upload_time": "2017-10-13T14:28:00", "upload_time_iso_8601": "2017-10-13T14:28:00.093184Z", "url": "https://files.pythonhosted.org/packages/7a/d9/343ffd105c41a9a887c39e44a8d9ad5794cd080014734db1fc707a7d5b51/fanfou-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "a95ae509fa69b53b9afef81258901cb0", "sha256": "035bb28d919b20c190562583cb5b89f81f7f9cca6873b6ff55e83d9f83805890"}, "downloads": -1, "filename": "fanfou-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a95ae509fa69b53b9afef81258901cb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10927, "upload_time": "2017-11-19T08:18:30", "upload_time_iso_8601": "2017-11-19T08:18:30.425284Z", "url": "https://files.pythonhosted.org/packages/ea/fb/91f1aa616596aecc96fd871aadf643ebbedba6eed402acd0a4d7a031b8de/fanfou-0.2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f83dcbe8c062efa84935903b5fb35b84", "sha256": "6e79ccaf6c4d283bfb6234f9f748f36f862339ec7208726966f5bca5a643a0e1"}, "downloads": -1, "filename": "fanfou-0.2.6.tar.gz", "has_sig": false, "md5_digest": "f83dcbe8c062efa84935903b5fb35b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7343, "upload_time": "2017-11-19T08:18:32", "upload_time_iso_8601": "2017-11-19T08:18:32.835129Z", "url": "https://files.pythonhosted.org/packages/4d/1f/34bd89d34d324129986f8ce42bf8bbddba8b0cd4249b213f9dcfb5656446/fanfou-0.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a95ae509fa69b53b9afef81258901cb0", "sha256": "035bb28d919b20c190562583cb5b89f81f7f9cca6873b6ff55e83d9f83805890"}, "downloads": -1, "filename": "fanfou-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a95ae509fa69b53b9afef81258901cb0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10927, "upload_time": "2017-11-19T08:18:30", "upload_time_iso_8601": "2017-11-19T08:18:30.425284Z", "url": "https://files.pythonhosted.org/packages/ea/fb/91f1aa616596aecc96fd871aadf643ebbedba6eed402acd0a4d7a031b8de/fanfou-0.2.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f83dcbe8c062efa84935903b5fb35b84", "sha256": "6e79ccaf6c4d283bfb6234f9f748f36f862339ec7208726966f5bca5a643a0e1"}, "downloads": -1, "filename": "fanfou-0.2.6.tar.gz", "has_sig": false, "md5_digest": "f83dcbe8c062efa84935903b5fb35b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7343, "upload_time": "2017-11-19T08:18:32", "upload_time_iso_8601": "2017-11-19T08:18:32.835129Z", "url": "https://files.pythonhosted.org/packages/4d/1f/34bd89d34d324129986f8ce42bf8bbddba8b0cd4249b213f9dcfb5656446/fanfou-0.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:46 2020"}