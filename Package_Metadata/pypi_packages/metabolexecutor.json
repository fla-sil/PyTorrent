{"info": {"author": "Peter Odding", "author_email": "peter@peterodding.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Networking", "Topic :: System :: Shells", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "executor: Programmer friendly subprocess wrapper\n================================================\n\n.. image:: https://travis-ci.org/xolox/python-executor.svg?branch=master\n   :target: https://travis-ci.org/xolox/python-executor\n\n.. image:: https://coveralls.io/repos/xolox/python-executor/badge.png?branch=master\n   :target: https://coveralls.io/r/xolox/python-executor?branch=master\n\nThe `executor` package is a simple wrapper for Python's subprocess_ module\nthat makes it very easy to handle subprocesses on UNIX systems with proper\nescaping of arguments and error checking:\n\n- An object oriented interface is used to execute commands using sane but\n  customizable (and well documented) defaults.\n\n- Remote commands (executed over SSH_) are supported using the same object\n  oriented interface, as are commands inside chroots_ (executed using\n  schroot_).\n\n- There's also support for executing a group of commands concurrently in\n  what's called a \"command pool\". The concurrency level can be customized and\n  of course both local and remote commands are supported.\n\nThe package is currently tested on Python 2.6, 2.7, 3.4, 3.5, 3.6 and PyPy. For\nusage instructions please refer to following sections and the documentation_.\n\n.. contents::\n   :local:\n   :depth: 2\n\nInstallation\n------------\n\nThe `executor` package is available on PyPI_ which means installation should be\nas simple as:\n\n.. code-block:: sh\n\n   $ pip install executor\n\nThere's actually a multitude of ways to install Python packages (e.g. the `per\nuser site-packages directory`_, `virtual environments`_ or just installing\nsystem wide) and I have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).\n\nUsage\n-----\n\nThere are two ways to use the `executor` package: As the command line program\n``executor`` and as a Python API. The command line interface is described below\nand there are also some examples of simple use cases of the Python API.\n\n.. contents::\n   :local:\n   :depth: 1\n\nCommand line\n~~~~~~~~~~~~\n\n.. A DRY solution to avoid duplication of the `executor --help' text:\n..\n.. [[[cog\n.. from humanfriendly.usage import inject_usage\n.. inject_usage('executor.cli')\n.. ]]]\n\n**Usage:** `executor [OPTIONS] COMMAND ...`\n\nEasy subprocess management on the command line based on the Python package with\nthe same name. The \"executor\" program runs external commands with support for\ntimeouts, dynamic startup delay (fudge factor) and exclusive locking.\n\nYou can think of \"executor\" as a combination of the \"flock\" and \"timelimit\"\nprograms with some additional niceties (namely the dynamic startup delay and\nintegrated system logging on UNIX platforms).\n\n**Supported options:**\n\n.. csv-table::\n   :header: Option, Description\n   :widths: 30, 70\n\n\n   \"``-t``, ``--timeout=LIMIT``\",\"Set the time after which the given command will be aborted. By default\n   ``LIMIT`` is counted in seconds. You can also use one of the suffixes \"\"s\"\"\n   (seconds), \"\"m\"\" (minutes), \"\"h\"\" (hours) or \"\"d\"\" (days).\"\n   \"``-f``, ``--fudge-factor=LIMIT``\",\"This option controls the dynamic startup delay (fudge factor) which is\n   useful when you want a periodic task to run once per given interval but the\n   exact time is not important. Refer to the ``--timeout`` option for acceptable\n   values of ``LIMIT``, this number specifies the maximum amount of time to sleep\n   before running the command (the minimum is zero, otherwise you could just\n   include the command \"\"sleep N && ...\"\" in your command line :-).\"\n   \"``-e``, ``--exclusive``\",\"Use an interprocess lock file to guarantee that executor will never run\n   the external command concurrently. Refer to the ``--lock-timeout`` option\n   to customize blocking / non-blocking behavior. To customize the name\n   of the lock file you can use the ``--lock-file`` option.\"\n   \"``-T``, ``--lock-timeout=LIMIT``\",\"By default executor tries to claim the lock and if it fails it will exit\n   with a nonzero exit code. This option can be used to enable blocking\n   behavior. Refer to the ``--timeout`` option for acceptable values of ``LIMIT``.\"\n   \"``-l``, ``--lock-file=NAME``\",\"Customize the name of the lock file. By default this is the base name of\n   the external command, so if you're running something generic like \"\"bash\"\"\n   or \"\"python\"\" you might want to change this :-).\"\n   \"``-v``, ``--verbose``\",Increase logging verbosity (can be repeated).\n   \"``-q``, ``--quiet``\",Decrease logging verbosity (can be repeated).\n   \"``-h``, ``--help``\",Show this message and exit.\n\n.. [[[end]]]\n\nPython API\n~~~~~~~~~~\n\nBelow are some examples of how versatile the `execute()`_ function is. Refer to\nthe API documentation on `Read the Docs`_ for (a lot of) other use cases.\n\n.. contents::\n   :local:\n\nChecking status codes\n+++++++++++++++++++++\n\nBy default the status code of the external command is returned as a boolean:\n\n>>> from executor import execute\n>>> execute('true')\nTrue\n\nIf an external command exits with a nonzero status code an exception is raised,\nthis makes it easy to do the right thing (never forget to check the status code\nof an external command without having to write a lot of repetitive code):\n\n>>> execute('false')\nTraceback (most recent call last):\n  File \"executor/__init__.py\", line 124, in execute\n    cmd.start()\n  File \"executor/__init__.py\", line 516, in start\n    self.wait()\n  File \"executor/__init__.py\", line 541, in wait\n    self.check_errors()\n  File \"executor/__init__.py\", line 568, in check_errors\n    raise ExternalCommandFailed(self)\nexecutor.ExternalCommandFailed: External command failed with exit code 1! (command: bash -c false)\n\nThe ExternalCommandFailed_ exception exposes ``command`` and ``returncode``\nattributes. If you know a command is likely to exit with a nonzero status code\nand you want `execute()`_ to simply return a boolean you can do this instead:\n\n>>> execute('false', check=False)\nFalse\n\nProviding input\n+++++++++++++++\n\nHere's how you can provide input to an external command:\n\n>>> execute('tr a-z A-Z', input='Hello world from Python!\\n')\nHELLO WORLD FROM PYTHON!\nTrue\n\nGetting output\n++++++++++++++\n\nGetting the output of external commands is really easy as well:\n\n>>> execute('hostname', capture=True)\n'peter-macbook'\n\nRunning commands as root\n++++++++++++++++++++++++\n\nIt's also very easy to execute commands with super user privileges:\n\n>>> execute('echo test > /etc/hostname', sudo=True)\n[sudo] password for peter: **********\nTrue\n>>> execute('hostname', capture=True)\n'test'\n\nEnabling logging\n++++++++++++++++\n\nIf you're wondering how prefixing the above command with ``sudo`` would\nend up being helpful, here's how it works:\n\n>>> import logging\n>>> logging.basicConfig()\n>>> logging.getLogger().setLevel(logging.DEBUG)\n>>> execute('echo peter-macbook > /etc/hostname', sudo=True)\nDEBUG:executor:Executing external command: sudo bash -c 'echo peter-macbook > /etc/hostname'\n\nRunning remote commands\n+++++++++++++++++++++++\n\nTo run a command on a remote system using SSH_ you can use the RemoteCommand_\nclass, it works as follows:\n\n>>> from executor.ssh.client import RemoteCommand\n>>> cmd = RemoteCommand('localhost', 'echo $SSH_CONNECTION', capture=True)\n>>> cmd.start()\n>>> cmd.output\n'127.0.0.1 57255 127.0.0.1 22'\n\nRunning remote commands concurrently\n++++++++++++++++++++++++++++++++++++\n\nThe `foreach()`_ function wraps the RemoteCommand_ and CommandPool_ classes to\nmake it very easy to run a remote command concurrently on a group of hosts:\n\n>>> from executor.ssh.client import foreach\n>>> from pprint import pprint\n>>> hosts = ['127.0.0.1', '127.0.0.2', '127.0.0.3', '127.0.0.4']\n>>> commands = foreach(hosts, 'echo $SSH_CONNECTION')\n>>> pprint([cmd.output for cmd in commands])\n['127.0.0.1 57278 127.0.0.1 22',\n '127.0.0.1 52385 127.0.0.2 22',\n '127.0.0.1 49228 127.0.0.3 22',\n '127.0.0.1 40628 127.0.0.4 22']\n\nContact\n-------\n\nThe latest version of `executor` is available on PyPI_ and GitHub_. The\ndocumentation is hosted on `Read the Docs`_ and includes a changelog_. For bug\nreports please create an issue on GitHub_. If you have questions, suggestions,\netc. feel free to send me an e-mail at `peter@peterodding.com`_.\n\nLicense\n-------\n\nThis software is licensed under the `MIT license`_.\n\n\u00a9 2018 Peter Odding.\n\n.. External references:\n.. _changelog: https://executor.readthedocs.io/en/latest/changelog.html\n.. _chroots: http://en.wikipedia.org/wiki/Chroot\n.. _CommandPool: https://executor.readthedocs.io/en/latest/api.html#executor.concurrent.CommandPool\n.. _documentation: https://executor.readthedocs.io\n.. _execute(): http://executor.readthedocs.io/en/latest/api.html#executor.execute\n.. _ExternalCommandFailed: http://executor.readthedocs.io/en/latest/api.html#executor.ExternalCommandFailed\n.. _foreach(): https://executor.readthedocs.io/en/latest/api.html#executor.ssh.client.foreach\n.. _GitHub: https://github.com/xolox/python-executor\n.. _MIT license: http://en.wikipedia.org/wiki/MIT_License\n.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/\n.. _peter@peterodding.com: peter@peterodding.com\n.. _PyPI: https://pypi.python.org/pypi/executor\n.. _Read the Docs: https://executor.readthedocs.io/en/latest/api.html#api-documentation\n.. _RemoteCommand: https://executor.readthedocs.io/en/latest/api.html#executor.ssh.client.RemoteCommand\n.. _schroot: https://wiki.debian.org/Schroot\n.. _SSH: https://en.wikipedia.org/wiki/Secure_Shell\n.. _subprocess: https://docs.python.org/2/library/subprocess.html\n.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://executor.readthedocs.io", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "metabolexecutor", "package_url": "https://pypi.org/project/metabolexecutor/", "platform": "", "project_url": "https://pypi.org/project/metabolexecutor/", "project_urls": {"Homepage": "https://executor.readthedocs.io"}, "release_url": "https://pypi.org/project/metabolexecutor/20.0.post1/", "requires_dist": null, "requires_python": "", "summary": "Programmer friendly subprocess wrapper", "version": "20.0.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/xolox/python-executor\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/xolox/python-executor.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08a81c0144af3c704ae41ff891b096d29fea7d64/68747470733a2f2f7472617669732d63692e6f72672f786f6c6f782f707974686f6e2d6578656375746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/xolox/python-executor?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/xolox/python-executor/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/702e71d7a72b3563b9dcb6bc19974e4f00cf85fe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f786f6c6f782f707974686f6e2d6578656375746f722f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<p>The <cite>executor</cite> package is a simple wrapper for Python\u2019s <a href=\"https://docs.python.org/2/library/subprocess.html\" rel=\"nofollow\">subprocess</a> module\nthat makes it very easy to handle subprocesses on UNIX systems with proper\nescaping of arguments and error checking:</p>\n<ul>\n<li>An object oriented interface is used to execute commands using sane but\ncustomizable (and well documented) defaults.</li>\n<li>Remote commands (executed over <a href=\"https://en.wikipedia.org/wiki/Secure_Shell\" rel=\"nofollow\">SSH</a>) are supported using the same object\noriented interface, as are commands inside <a href=\"http://en.wikipedia.org/wiki/Chroot\" rel=\"nofollow\">chroots</a> (executed using\n<a href=\"https://wiki.debian.org/Schroot\" rel=\"nofollow\">schroot</a>).</li>\n<li>There\u2019s also support for executing a group of commands concurrently in\nwhat\u2019s called a \u201ccommand pool\u201d. The concurrency level can be customized and\nof course both local and remote commands are supported.</li>\n</ul>\n<p>The package is currently tested on Python 2.6, 2.7, 3.4, 3.5, 3.6 and PyPy. For\nusage instructions please refer to following sections and the <a href=\"https://executor.readthedocs.io\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#command-line\" id=\"id5\" rel=\"nofollow\">Command line</a></li>\n<li><a href=\"#python-api\" id=\"id6\" rel=\"nofollow\">Python API</a></li>\n</ul>\n</li>\n<li><a href=\"#contact\" id=\"id7\" rel=\"nofollow\">Contact</a></li>\n<li><a href=\"#license\" id=\"id8\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p>The <cite>executor</cite> package is available on <a href=\"https://pypi.python.org/pypi/executor\" rel=\"nofollow\">PyPI</a> which means installation should be\nas simple as:</p>\n<pre>$ pip install executor\n</pre>\n<p>There\u2019s actually a multitude of ways to install Python packages (e.g. the <a href=\"https://www.python.org/dev/peps/pep-0370/\" rel=\"nofollow\">per\nuser site-packages directory</a>, <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">virtual environments</a> or just installing\nsystem wide) and I have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Usage</a></h2>\n<p>There are two ways to use the <cite>executor</cite> package: As the command line program\n<tt>executor</tt> and as a Python API. The command line interface is described below\nand there are also some examples of simple use cases of the Python API.</p>\n<div id=\"id1\">\n<ul>\n<li><a href=\"#command-line\" id=\"id9\" rel=\"nofollow\">Command line</a></li>\n<li><a href=\"#python-api\" id=\"id10\" rel=\"nofollow\">Python API</a></li>\n</ul>\n</div>\n<div id=\"command-line\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Command line</a></h3>\n<p><strong>Usage:</strong> <cite>executor [OPTIONS] COMMAND \u2026</cite></p>\n<p>Easy subprocess management on the command line based on the Python package with\nthe same name. The \u201cexecutor\u201d program runs external commands with support for\ntimeouts, dynamic startup delay (fudge factor) and exclusive locking.</p>\n<p>You can think of \u201cexecutor\u201d as a combination of the \u201cflock\u201d and \u201ctimelimit\u201d\nprograms with some additional niceties (namely the dynamic startup delay and\nintegrated system logging on UNIX platforms).</p>\n<p><strong>Supported options:</strong></p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">-t</span></tt>, <tt><span class=\"pre\">--timeout=LIMIT</span></tt></td>\n<td>Set the time after which the given command will be aborted. By default\n<tt>LIMIT</tt> is counted in seconds. You can also use one of the suffixes \u201cs\u201d\n(seconds), \u201cm\u201d (minutes), \u201ch\u201d (hours) or \u201cd\u201d (days).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-f</span></tt>, <tt><span class=\"pre\">--fudge-factor=LIMIT</span></tt></td>\n<td>This option controls the dynamic startup delay (fudge factor) which is\nuseful when you want a periodic task to run once per given interval but the\nexact time is not important. Refer to the <tt><span class=\"pre\">--timeout</span></tt> option for acceptable\nvalues of <tt>LIMIT</tt>, this number specifies the maximum amount of time to sleep\nbefore running the command (the minimum is zero, otherwise you could just\ninclude the command \u201csleep N &amp;&amp; \u2026\u201d in your command line :-).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-e</span></tt>, <tt><span class=\"pre\">--exclusive</span></tt></td>\n<td>Use an interprocess lock file to guarantee that executor will never run\nthe external command concurrently. Refer to the <tt><span class=\"pre\">--lock-timeout</span></tt> option\nto customize blocking / non-blocking behavior. To customize the name\nof the lock file you can use the <tt><span class=\"pre\">--lock-file</span></tt> option.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-T</span></tt>, <tt><span class=\"pre\">--lock-timeout=LIMIT</span></tt></td>\n<td>By default executor tries to claim the lock and if it fails it will exit\nwith a nonzero exit code. This option can be used to enable blocking\nbehavior. Refer to the <tt><span class=\"pre\">--timeout</span></tt> option for acceptable values of <tt>LIMIT</tt>.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-l</span></tt>, <tt><span class=\"pre\">--lock-file=NAME</span></tt></td>\n<td>Customize the name of the lock file. By default this is the base name of\nthe external command, so if you\u2019re running something generic like \u201cbash\u201d\nor \u201cpython\u201d you might want to change this :-).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-v</span></tt>, <tt><span class=\"pre\">--verbose</span></tt></td>\n<td>Increase logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-q</span></tt>, <tt><span class=\"pre\">--quiet</span></tt></td>\n<td>Decrease logging verbosity (can be repeated).</td>\n</tr>\n<tr><td><tt><span class=\"pre\">-h</span></tt>, <tt><span class=\"pre\">--help</span></tt></td>\n<td>Show this message and exit.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"python-api\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Python API</a></h3>\n<p>Below are some examples of how versatile the <a href=\"http://executor.readthedocs.io/en/latest/api.html#executor.execute\" rel=\"nofollow\">execute()</a> function is. Refer to\nthe API documentation on <a href=\"https://executor.readthedocs.io/en/latest/api.html#api-documentation\" rel=\"nofollow\">Read the Docs</a> for (a lot of) other use cases.</p>\n<div id=\"id2\">\n<ul>\n<li><a href=\"#checking-status-codes\" id=\"id11\" rel=\"nofollow\">Checking status codes</a></li>\n<li><a href=\"#providing-input\" id=\"id12\" rel=\"nofollow\">Providing input</a></li>\n<li><a href=\"#getting-output\" id=\"id13\" rel=\"nofollow\">Getting output</a></li>\n<li><a href=\"#running-commands-as-root\" id=\"id14\" rel=\"nofollow\">Running commands as root</a></li>\n<li><a href=\"#enabling-logging\" id=\"id15\" rel=\"nofollow\">Enabling logging</a></li>\n<li><a href=\"#running-remote-commands\" id=\"id16\" rel=\"nofollow\">Running remote commands</a></li>\n<li><a href=\"#running-remote-commands-concurrently\" id=\"id17\" rel=\"nofollow\">Running remote commands concurrently</a></li>\n</ul>\n</div>\n<div id=\"checking-status-codes\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Checking status codes</a></h4>\n<p>By default the status code of the external command is returned as a boolean:</p>\n<pre>&gt;&gt;&gt; from executor import execute\n&gt;&gt;&gt; execute('true')\nTrue\n</pre>\n<p>If an external command exits with a nonzero status code an exception is raised,\nthis makes it easy to do the right thing (never forget to check the status code\nof an external command without having to write a lot of repetitive code):</p>\n<pre>&gt;&gt;&gt; execute('false')\nTraceback (most recent call last):\n  File \"executor/__init__.py\", line 124, in execute\n    cmd.start()\n  File \"executor/__init__.py\", line 516, in start\n    self.wait()\n  File \"executor/__init__.py\", line 541, in wait\n    self.check_errors()\n  File \"executor/__init__.py\", line 568, in check_errors\n    raise ExternalCommandFailed(self)\nexecutor.ExternalCommandFailed: External command failed with exit code 1! (command: bash -c false)\n</pre>\n<p>The <a href=\"http://executor.readthedocs.io/en/latest/api.html#executor.ExternalCommandFailed\" rel=\"nofollow\">ExternalCommandFailed</a> exception exposes <tt>command</tt> and <tt>returncode</tt>\nattributes. If you know a command is likely to exit with a nonzero status code\nand you want <a href=\"http://executor.readthedocs.io/en/latest/api.html#executor.execute\" rel=\"nofollow\">execute()</a> to simply return a boolean you can do this instead:</p>\n<pre>&gt;&gt;&gt; execute('false', check=False)\nFalse\n</pre>\n</div>\n<div id=\"providing-input\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Providing input</a></h4>\n<p>Here\u2019s how you can provide input to an external command:</p>\n<pre>&gt;&gt;&gt; execute('tr a-z A-Z', input='Hello world from Python!\\n')\nHELLO WORLD FROM PYTHON!\nTrue\n</pre>\n</div>\n<div id=\"getting-output\">\n<h4><a href=\"#id13\" rel=\"nofollow\">Getting output</a></h4>\n<p>Getting the output of external commands is really easy as well:</p>\n<pre>&gt;&gt;&gt; execute('hostname', capture=True)\n'peter-macbook'\n</pre>\n</div>\n<div id=\"running-commands-as-root\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Running commands as root</a></h4>\n<p>It\u2019s also very easy to execute commands with super user privileges:</p>\n<pre>&gt;&gt;&gt; execute('echo test &gt; /etc/hostname', sudo=True)\n[sudo] password for peter: **********\nTrue\n&gt;&gt;&gt; execute('hostname', capture=True)\n'test'\n</pre>\n</div>\n<div id=\"enabling-logging\">\n<h4><a href=\"#id15\" rel=\"nofollow\">Enabling logging</a></h4>\n<p>If you\u2019re wondering how prefixing the above command with <tt>sudo</tt> would\nend up being helpful, here\u2019s how it works:</p>\n<pre>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; logging.basicConfig()\n&gt;&gt;&gt; logging.getLogger().setLevel(logging.DEBUG)\n&gt;&gt;&gt; execute('echo peter-macbook &gt; /etc/hostname', sudo=True)\nDEBUG:executor:Executing external command: sudo bash -c 'echo peter-macbook &gt; /etc/hostname'\n</pre>\n</div>\n<div id=\"running-remote-commands\">\n<h4><a href=\"#id16\" rel=\"nofollow\">Running remote commands</a></h4>\n<p>To run a command on a remote system using <a href=\"https://en.wikipedia.org/wiki/Secure_Shell\" rel=\"nofollow\">SSH</a> you can use the <a href=\"https://executor.readthedocs.io/en/latest/api.html#executor.ssh.client.RemoteCommand\" rel=\"nofollow\">RemoteCommand</a>\nclass, it works as follows:</p>\n<pre>&gt;&gt;&gt; from executor.ssh.client import RemoteCommand\n&gt;&gt;&gt; cmd = RemoteCommand('localhost', 'echo $SSH_CONNECTION', capture=True)\n&gt;&gt;&gt; cmd.start()\n&gt;&gt;&gt; cmd.output\n'127.0.0.1 57255 127.0.0.1 22'\n</pre>\n</div>\n<div id=\"running-remote-commands-concurrently\">\n<h4><a href=\"#id17\" rel=\"nofollow\">Running remote commands concurrently</a></h4>\n<p>The <a href=\"https://executor.readthedocs.io/en/latest/api.html#executor.ssh.client.foreach\" rel=\"nofollow\">foreach()</a> function wraps the <a href=\"https://executor.readthedocs.io/en/latest/api.html#executor.ssh.client.RemoteCommand\" rel=\"nofollow\">RemoteCommand</a> and <a href=\"https://executor.readthedocs.io/en/latest/api.html#executor.concurrent.CommandPool\" rel=\"nofollow\">CommandPool</a> classes to\nmake it very easy to run a remote command concurrently on a group of hosts:</p>\n<pre>&gt;&gt;&gt; from executor.ssh.client import foreach\n&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; hosts = ['127.0.0.1', '127.0.0.2', '127.0.0.3', '127.0.0.4']\n&gt;&gt;&gt; commands = foreach(hosts, 'echo $SSH_CONNECTION')\n&gt;&gt;&gt; pprint([cmd.output for cmd in commands])\n['127.0.0.1 57278 127.0.0.1 22',\n '127.0.0.1 52385 127.0.0.2 22',\n '127.0.0.1 49228 127.0.0.3 22',\n '127.0.0.1 40628 127.0.0.4 22']\n</pre>\n</div>\n</div>\n</div>\n<div id=\"contact\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Contact</a></h2>\n<p>The latest version of <cite>executor</cite> is available on <a href=\"https://pypi.python.org/pypi/executor\" rel=\"nofollow\">PyPI</a> and <a href=\"https://github.com/xolox/python-executor\" rel=\"nofollow\">GitHub</a>. The\ndocumentation is hosted on <a href=\"https://executor.readthedocs.io/en/latest/api.html#api-documentation\" rel=\"nofollow\">Read the Docs</a> and includes a <a href=\"https://executor.readthedocs.io/en/latest/changelog.html\" rel=\"nofollow\">changelog</a>. For bug\nreports please create an issue on <a href=\"https://github.com/xolox/python-executor\" rel=\"nofollow\">GitHub</a>. If you have questions, suggestions,\netc. feel free to send me an e-mail at <a href=\"mailto:peter%40peterodding.com\">peter<span>@</span>peterodding<span>.</span>com</a>.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id8\" rel=\"nofollow\">License</a></h2>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a>.</p>\n<p>\u00a9 2018 Peter Odding.</p>\n</div>\n\n          </div>"}, "last_serial": 4259177, "releases": {"20.0.post1": [{"comment_text": "", "digests": {"md5": "a637143a40847007eae94a4fe6160a89", "sha256": "95caceae4a64703b4dce97ed9f2e8cc499ed78a094a9629443ea64e56a0a4e7e"}, "downloads": -1, "filename": "metabolexecutor-20.0.post1.tar.gz", "has_sig": false, "md5_digest": "a637143a40847007eae94a4fe6160a89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88499, "upload_time": "2018-09-10T21:34:09", "upload_time_iso_8601": "2018-09-10T21:34:09.785418Z", "url": "https://files.pythonhosted.org/packages/f9/66/97e7aa113efa1ff2bf89365709ca71c2a18ee13c306f2a0168573a75a9cb/metabolexecutor-20.0.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a637143a40847007eae94a4fe6160a89", "sha256": "95caceae4a64703b4dce97ed9f2e8cc499ed78a094a9629443ea64e56a0a4e7e"}, "downloads": -1, "filename": "metabolexecutor-20.0.post1.tar.gz", "has_sig": false, "md5_digest": "a637143a40847007eae94a4fe6160a89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88499, "upload_time": "2018-09-10T21:34:09", "upload_time_iso_8601": "2018-09-10T21:34:09.785418Z", "url": "https://files.pythonhosted.org/packages/f9/66/97e7aa113efa1ff2bf89365709ca71c2a18ee13c306f2a0168573a75a9cb/metabolexecutor-20.0.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:59 2020"}