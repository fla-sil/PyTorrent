{"info": {"author": "Julian Nash", "author_email": "julianjamesnash@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# respond\n\n![Python package](https://github.com/Julian-Nash/respond/workflows/Python%20package/badge.svg?branch=master)\n\n`respond` is a small, lightweight wrapper around Flask's `make_response` and `jsonify`, providing a fast and convenient\nway to return JSON data with the right HTTP status code.\n\n`respond` utilizes HTTP status code descriptions as methods, you simply call a static method\nsuch as `ok`, `not_found` or `internal_server_error` and optionally pass in the data you wish to return as JSON.\n\n\ud83d\udc0d Python v3.6 +\n\n## Installation\n\n```shell script\npip install respond\n```\n\n## Usage\n\nImport the `JSONResponse` class\n\n```py3\nfrom respond import JSONResponse\n```\n\nYou can now call one of many staticmethods of the class\n\nReturn a `200 OK` status code and a list\n\n```py3\n@app.route(\"/\")\ndef example():\n    \"\"\" Returns a list with an HTTP 200 OK status code \"\"\"\n    return JSONResponse.ok([1, 2, 3])\n```\n\nReturn a `400 BAD REQUEST` status code and a dict\n\n```py3\n@app.route(\"/\")\ndef example():\n    \"\"\" Returns a dict with an HTTP 400 BAD REQUEST status code \"\"\"\n    return JSONResponse.bad_request({\"message\": \"You did something wrong\"})\n```\n\nReturn a `500 INTERNAL SERVER ERROR` status code\n\n```py3\n@app.route(\"/\")\ndef example():\n    \"\"\" Returns an empty string with an HTTP 500 INTERNAL SERVER ERROR status code \"\"\"\n    return JSONResponse.bad_request()\n```\n\nPassing no data to the method returns an empty string\n\n```py3\n@app.route(\"/\")\ndef ok():\n    \"\"\" Return an empty HTTP 200 OK response \"\"\"\n    return JSONResponse.ok()\n```\n\nYou can optionally pass in a headers dict if required\n\n```py3\n@app.route(\"/\")\ndef example():\n    \"\"\" Return a dict with custom headers \"\"\"\n    return JSONResponse.ok(data={\"message\": \"ok\"}, headers={\"X-Custom-Header\": \"hello!\"})\n```\n\nTaking a look in the Chrome developer tools, we can see our custom header:\n\n```shell script\nContent-Length: 17\nDate: Sun, 03 May 2020 16:49:41 GMT\nContent-Type: application/json\nServer: Werkzeug/1.0.1 Python/3.8.2\nX-Custom-Header: hello!\n```\n\n`respond` has methods for all HTTP status codes defined by the ietf - https://tools.ietf.org/html/rfc7231\n\nCommon status codes include, `404 NOT FOUND`, here being used in a Flask error handler\n\n```py3\ndef handle_not_found_error(e):\n    \"\"\" Handler for not found errors \"\"\"\n    app.logger.warning(e)\n    return JSONResponse.not_found(data={\"message\": \"Not found\"})\n\napp.register_error_handler(404, handle_not_found_error)\n```\n\nAnd `500 INTERNAL SERVER ERROR`\n\n```py3\n@app.route(\"/internal-server-error\")\ndef internal_server_error():\n    msg = {\"message\": \"Whoops, we did something wrong\"}\n    return JSONResponse.internal_server_error(msg)\n```\n\nVisiting this URL in the browser returns\n\n```shell script\n{\"message\":\"Whoops, we did something wrong\"}\n```\n\n## Flask example\n\nHere's a trivial example, showing `respond` in action\n\n```py3\nfrom flask import Flask\n\nfrom respond import JSONResponse\n\n\ndef create_app():\n\n    app = Flask(__name__)\n\n    @app.route(\"/\")\n    def ok():\n        \"\"\" Return an empty HTTP 200 OK response \"\"\"\n        return JSONResponse.ok()\n\n    @app.route(\"/dict\")\n    def d():\n        \"\"\" Return a dict \"\"\"\n        return JSONResponse.ok({\"message\": \"ok\"})\n\n    @app.route(\"/with-headers\")\n    def with_headers():\n        \"\"\" Return a dict with custom headers \"\"\"\n        return JSONResponse.ok(\n            data={\"message\": \"ok\"},\n            headers={\"X-Custom-Header\": \"hello!\"}\n        )\n\n    @app.route(\"/bad-request\")\n    def bad_request():\n        \"\"\" Return a 400 response with a dict \"\"\"\n        data = {\"message\": \"You did something wrong\"}\n        return JSONResponse.bad_request(data=data)\n\n    @app.route(\"/unauthorized\")\n    def unauthorized():\n        return JSONResponse.unauthorized()\n\n    @app.route(\"/internal-server-error\")\n    def internal_server_error():\n        msg = {\"message\": \"Whoops, we did something wrong\"}\n        return JSONResponse.internal_server_error(msg)\n\n    @app.route(\"/empty-list\")\n    def ok_empty_list():\n        \"\"\" Return an empty list \"\"\"\n        return JSONResponse.ok(data=[])\n\n    @app.route(\"/empty-dict\")\n    def ok_empty_dict():\n        \"\"\" Return an empty dict \"\"\"\n        return JSONResponse.ok(data={})\n\n    def handle_not_found_error(e):\n        \"\"\" Handler for not found errors \"\"\"\n        app.logger.warning(e)\n        return JSONResponse.not_found(data={\"message\": \"Not found\"})\n\n    def handle_internal_server_error(e):\n        \"\"\" Handler for internal server errors \"\"\"\n        app.logger.error(e)\n        return JSONResponse.internal_server_error()\n\n    app.register_error_handler(404, handle_not_found_error)\n    app.register_error_handler(500, handle_internal_server_error)\n\n    return app\n\n\nif __name__ == \"__main__\":\n    app = create_app()\n    app.run()\n\n```\n\n## Methods available\n\n**100 range (informational)**\n\n| method | HTTP Status code |\n| ------ | ---------------- |\n| `continue` | `100 `|\n| `switching_protocol` | `101 `|\n| `processing` | `102 `|\n| `early_hints` | `103 `|\n\n**200 range (success)**\n\n| method | HTTP Status code |\n| ------ | ---------------- |\n| `ok` | `200 `|\n| `created` | `201 `|\n| `accepted` | `202 `|\n| `non_authoritative_information` | `203 `|\n| `no_content` | `204 `|\n| `reset_content` | `205 `|\n| `partial_content` | `206 `|\n| `multi_status` | `207 `|\n| `already_reported` | `208 `|\n| `im_used` | `226 `|\n\n**300 range (redirection)**\n\n| method | HTTP Status code |\n| ------ | ---------------- |\n| `multiple_choice` | `300 `|\n| `moved_permanently` | `301 `|\n| `found` | `302 `|\n| `see_other` | `303 `|\n| `not_modified` | `304 `|\n| `use_proxy` | `305 `|\n| `unused` | `306 `|\n| `temporary_redirect` | `307 `|\n| `permanent_redirect` | `308 `|\n\n**400 range (client error)**\n\n| method | HTTP Status code |\n| ------ | ---------------- |\n| `bad_request` | `400 `|\n| `unauthorized` | `401 `|\n| `payment_required` | `402 `|\n| `forbidden` | `403 `|\n| `not_found` | `404 `|\n| `method_not_allowed` | `405 `|\n| `not_acceptable` | `406 `|\n| `proxy_authentication_required` | `407 `|\n| `request_timeout` | `408 `|\n| `conflict` | `409 `|\n| `gone` | `410 `|\n| `length_required` | `411 `|\n| `precondition_failed` | `412 `|\n| `payload_too_large` | `413 `|\n| `uri_too_long` | `414 `|\n| `unsupported_media_type` | `415 `|\n| `requested_range_not_satisfiable` | `416 `|\n| `expectation_failed` | `417 `|\n| `im_a_teapot` | `418 `|\n| `misdirected_request` | `421 `|\n| `unprocessable_entity` | `422 `|\n| `locked` | `423 `|\n| `failed_dependency` | `424 `|\n| `too_early` | `425 `|\n| `upgrade_required` | `426 `|\n| `precondition_required` | `428 `|\n| `too_many_requests` | `429 `|\n| `request_header_fields_too_large` | `431 `|\n| `unavailable_for_legal_reasons` | `451 `|\n\n**500 range (server error)**\n\n| method | HTTP Status code |\n| ------ | ---------------- |\n| `internal_server_error` | `500 `|\n| `not_implemented` | `501 `|\n| `bad_gateway` | `502 `|\n| `service_unavailable` | `503 `|\n| `gateway_timeout` | `504 `|\n| `http_version_not_supported` | `505 `|\n| `variant_also_negotiates` | `506 `|\n| `insufficient_storage` | `507 `|\n| `loop_detected` | `508 `|\n| `not_extended` | `510 `|\n| `network_authentication_required` | `511 `|\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Julian-Nash/respond", "keywords": "flask http request parser json rest", "license": "", "maintainer": "", "maintainer_email": "", "name": "respond", "package_url": "https://pypi.org/project/respond/", "platform": "", "project_url": "https://pypi.org/project/respond/", "project_urls": {"Bug Tracker": "https://github.com/Julian-Nash/respond", "Documentation": "https://github.com/Julian-Nash/respond", "Homepage": "https://github.com/Julian-Nash/respond", "Source Code": "https://github.com/Julian-Nash/respond"}, "release_url": "https://pypi.org/project/respond/0.3/", "requires_dist": ["flask", "httpz"], "requires_python": "", "summary": "A lightweight and useful wrapper around Flask's make_response and jsonify", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>respond</h1>\n<p><img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/716d1305f2f11064362fc6766553dd25df1486e5/68747470733a2f2f6769746875622e636f6d2f4a756c69616e2d4e6173682f726573706f6e642f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<p><code>respond</code> is a small, lightweight wrapper around Flask's <code>make_response</code> and <code>jsonify</code>, providing a fast and convenient\nway to return JSON data with the right HTTP status code.</p>\n<p><code>respond</code> utilizes HTTP status code descriptions as methods, you simply call a static method\nsuch as <code>ok</code>, <code>not_found</code> or <code>internal_server_error</code> and optionally pass in the data you wish to return as JSON.</p>\n<p>\ud83d\udc0d Python v3.6 +</p>\n<h2>Installation</h2>\n<pre>pip install respond\n</pre>\n<h2>Usage</h2>\n<p>Import the <code>JSONResponse</code> class</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">respond</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n</pre>\n<p>You can now call one of many staticmethods of the class</p>\n<p>Return a <code>200 OK</code> status code and a list</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Returns a list with an HTTP 200 OK status code \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n</pre>\n<p>Return a <code>400 BAD REQUEST</code> status code and a dict</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Returns a dict with an HTTP 400 BAD REQUEST status code \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">bad_request</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"You did something wrong\"</span><span class=\"p\">})</span>\n</pre>\n<p>Return a <code>500 INTERNAL SERVER ERROR</code> status code</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Returns an empty string with an HTTP 500 INTERNAL SERVER ERROR status code \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">bad_request</span><span class=\"p\">()</span>\n</pre>\n<p>Passing no data to the method returns an empty string</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ok</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Return an empty HTTP 200 OK response \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span>\n</pre>\n<p>You can optionally pass in a headers dict if required</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\" Return a dict with custom headers \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">},</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"X-Custom-Header\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello!\"</span><span class=\"p\">})</span>\n</pre>\n<p>Taking a look in the Chrome developer tools, we can see our custom header:</p>\n<pre>Content-Length: <span class=\"m\">17</span>\nDate: Sun, <span class=\"m\">03</span> May <span class=\"m\">2020</span> <span class=\"m\">16</span>:49:41 GMT\nContent-Type: application/json\nServer: Werkzeug/1.0.1 Python/3.8.2\nX-Custom-Header: hello!\n</pre>\n<p><code>respond</code> has methods for all HTTP status codes defined by the ietf - <a href=\"https://tools.ietf.org/html/rfc7231\" rel=\"nofollow\">https://tools.ietf.org/html/rfc7231</a></p>\n<p>Common status codes include, <code>404 NOT FOUND</code>, here being used in a Flask error handler</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_not_found_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Handler for not found errors \"\"\"</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">not_found</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Not found\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_error_handler</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">handle_not_found_error</span><span class=\"p\">)</span>\n</pre>\n<p>And <code>500 INTERNAL SERVER ERROR</code></p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/internal-server-error\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">internal_server_error</span><span class=\"p\">():</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Whoops, we did something wrong\"</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">internal_server_error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre>\n<p>Visiting this URL in the browser returns</p>\n<pre><span class=\"o\">{</span><span class=\"s2\">\"message\"</span>:<span class=\"s2\">\"Whoops, we did something wrong\"</span><span class=\"o\">}</span>\n</pre>\n<h2>Flask example</h2>\n<p>Here's a trivial example, showing <code>respond</code> in action</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">respond</span> <span class=\"kn\">import</span> <span class=\"n\">JSONResponse</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ok</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return an empty HTTP 200 OK response \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/dict\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">d</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return a dict \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">({</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">})</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/with-headers\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">with_headers</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return a dict with custom headers \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ok\"</span><span class=\"p\">},</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"X-Custom-Header\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hello!\"</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/bad-request\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bad_request</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return a 400 response with a dict \"\"\"</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"You did something wrong\"</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">bad_request</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/unauthorized\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">unauthorized</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">unauthorized</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/internal-server-error\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">internal_server_error</span><span class=\"p\">():</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Whoops, we did something wrong\"</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">internal_server_error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/empty-list\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ok_empty_list</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return an empty list \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/empty-dict\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ok_empty_dict</span><span class=\"p\">():</span>\n        <span class=\"sd\">\"\"\" Return an empty dict \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_not_found_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Handler for not found errors \"\"\"</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">not_found</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Not found\"</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_internal_server_error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" Handler for internal server errors \"\"\"</span>\n        <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">JSONResponse</span><span class=\"o\">.</span><span class=\"n\">internal_server_error</span><span class=\"p\">()</span>\n\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_error_handler</span><span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"n\">handle_not_found_error</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_error_handler</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">handle_internal_server_error</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>Methods available</h2>\n<p><strong>100 range (informational)</strong></p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>HTTP Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>continue</code></td>\n<td><code>100</code></td>\n</tr>\n<tr>\n<td><code>switching_protocol</code></td>\n<td><code>101</code></td>\n</tr>\n<tr>\n<td><code>processing</code></td>\n<td><code>102</code></td>\n</tr>\n<tr>\n<td><code>early_hints</code></td>\n<td><code>103</code></td>\n</tr></tbody></table>\n<p><strong>200 range (success)</strong></p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>HTTP Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ok</code></td>\n<td><code>200</code></td>\n</tr>\n<tr>\n<td><code>created</code></td>\n<td><code>201</code></td>\n</tr>\n<tr>\n<td><code>accepted</code></td>\n<td><code>202</code></td>\n</tr>\n<tr>\n<td><code>non_authoritative_information</code></td>\n<td><code>203</code></td>\n</tr>\n<tr>\n<td><code>no_content</code></td>\n<td><code>204</code></td>\n</tr>\n<tr>\n<td><code>reset_content</code></td>\n<td><code>205</code></td>\n</tr>\n<tr>\n<td><code>partial_content</code></td>\n<td><code>206</code></td>\n</tr>\n<tr>\n<td><code>multi_status</code></td>\n<td><code>207</code></td>\n</tr>\n<tr>\n<td><code>already_reported</code></td>\n<td><code>208</code></td>\n</tr>\n<tr>\n<td><code>im_used</code></td>\n<td><code>226</code></td>\n</tr></tbody></table>\n<p><strong>300 range (redirection)</strong></p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>HTTP Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>multiple_choice</code></td>\n<td><code>300</code></td>\n</tr>\n<tr>\n<td><code>moved_permanently</code></td>\n<td><code>301</code></td>\n</tr>\n<tr>\n<td><code>found</code></td>\n<td><code>302</code></td>\n</tr>\n<tr>\n<td><code>see_other</code></td>\n<td><code>303</code></td>\n</tr>\n<tr>\n<td><code>not_modified</code></td>\n<td><code>304</code></td>\n</tr>\n<tr>\n<td><code>use_proxy</code></td>\n<td><code>305</code></td>\n</tr>\n<tr>\n<td><code>unused</code></td>\n<td><code>306</code></td>\n</tr>\n<tr>\n<td><code>temporary_redirect</code></td>\n<td><code>307</code></td>\n</tr>\n<tr>\n<td><code>permanent_redirect</code></td>\n<td><code>308</code></td>\n</tr></tbody></table>\n<p><strong>400 range (client error)</strong></p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>HTTP Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bad_request</code></td>\n<td><code>400</code></td>\n</tr>\n<tr>\n<td><code>unauthorized</code></td>\n<td><code>401</code></td>\n</tr>\n<tr>\n<td><code>payment_required</code></td>\n<td><code>402</code></td>\n</tr>\n<tr>\n<td><code>forbidden</code></td>\n<td><code>403</code></td>\n</tr>\n<tr>\n<td><code>not_found</code></td>\n<td><code>404</code></td>\n</tr>\n<tr>\n<td><code>method_not_allowed</code></td>\n<td><code>405</code></td>\n</tr>\n<tr>\n<td><code>not_acceptable</code></td>\n<td><code>406</code></td>\n</tr>\n<tr>\n<td><code>proxy_authentication_required</code></td>\n<td><code>407</code></td>\n</tr>\n<tr>\n<td><code>request_timeout</code></td>\n<td><code>408</code></td>\n</tr>\n<tr>\n<td><code>conflict</code></td>\n<td><code>409</code></td>\n</tr>\n<tr>\n<td><code>gone</code></td>\n<td><code>410</code></td>\n</tr>\n<tr>\n<td><code>length_required</code></td>\n<td><code>411</code></td>\n</tr>\n<tr>\n<td><code>precondition_failed</code></td>\n<td><code>412</code></td>\n</tr>\n<tr>\n<td><code>payload_too_large</code></td>\n<td><code>413</code></td>\n</tr>\n<tr>\n<td><code>uri_too_long</code></td>\n<td><code>414</code></td>\n</tr>\n<tr>\n<td><code>unsupported_media_type</code></td>\n<td><code>415</code></td>\n</tr>\n<tr>\n<td><code>requested_range_not_satisfiable</code></td>\n<td><code>416</code></td>\n</tr>\n<tr>\n<td><code>expectation_failed</code></td>\n<td><code>417</code></td>\n</tr>\n<tr>\n<td><code>im_a_teapot</code></td>\n<td><code>418</code></td>\n</tr>\n<tr>\n<td><code>misdirected_request</code></td>\n<td><code>421</code></td>\n</tr>\n<tr>\n<td><code>unprocessable_entity</code></td>\n<td><code>422</code></td>\n</tr>\n<tr>\n<td><code>locked</code></td>\n<td><code>423</code></td>\n</tr>\n<tr>\n<td><code>failed_dependency</code></td>\n<td><code>424</code></td>\n</tr>\n<tr>\n<td><code>too_early</code></td>\n<td><code>425</code></td>\n</tr>\n<tr>\n<td><code>upgrade_required</code></td>\n<td><code>426</code></td>\n</tr>\n<tr>\n<td><code>precondition_required</code></td>\n<td><code>428</code></td>\n</tr>\n<tr>\n<td><code>too_many_requests</code></td>\n<td><code>429</code></td>\n</tr>\n<tr>\n<td><code>request_header_fields_too_large</code></td>\n<td><code>431</code></td>\n</tr>\n<tr>\n<td><code>unavailable_for_legal_reasons</code></td>\n<td><code>451</code></td>\n</tr></tbody></table>\n<p><strong>500 range (server error)</strong></p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>HTTP Status code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>internal_server_error</code></td>\n<td><code>500</code></td>\n</tr>\n<tr>\n<td><code>not_implemented</code></td>\n<td><code>501</code></td>\n</tr>\n<tr>\n<td><code>bad_gateway</code></td>\n<td><code>502</code></td>\n</tr>\n<tr>\n<td><code>service_unavailable</code></td>\n<td><code>503</code></td>\n</tr>\n<tr>\n<td><code>gateway_timeout</code></td>\n<td><code>504</code></td>\n</tr>\n<tr>\n<td><code>http_version_not_supported</code></td>\n<td><code>505</code></td>\n</tr>\n<tr>\n<td><code>variant_also_negotiates</code></td>\n<td><code>506</code></td>\n</tr>\n<tr>\n<td><code>insufficient_storage</code></td>\n<td><code>507</code></td>\n</tr>\n<tr>\n<td><code>loop_detected</code></td>\n<td><code>508</code></td>\n</tr>\n<tr>\n<td><code>not_extended</code></td>\n<td><code>510</code></td>\n</tr>\n<tr>\n<td><code>network_authentication_required</code></td>\n<td><code>511</code></td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 7175761, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9b4036afce76f3ec6b08487299d1c9af", "sha256": "924d584b34507a5277dcec90beb97e7b907cda11e9d18855c4ea52af72349efc"}, "downloads": -1, "filename": "respond-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9b4036afce76f3ec6b08487299d1c9af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9256, "upload_time": "2020-05-05T20:44:54", "upload_time_iso_8601": "2020-05-05T20:44:54.359472Z", "url": "https://files.pythonhosted.org/packages/92/fe/7733ee5fafa2e06b4f365f41b4d3830fd87ad1fe0e0cf4a14675fab44790/respond-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37379639af969e6a6205a25cdc01eb74", "sha256": "0f0fb1d2fcb156dd99f72a548fc8bd0b3c50aa8a96cbc27fa6f3eb7916627dd8"}, "downloads": -1, "filename": "respond-0.1.tar.gz", "has_sig": false, "md5_digest": "37379639af969e6a6205a25cdc01eb74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10620, "upload_time": "2020-05-05T20:44:56", "upload_time_iso_8601": "2020-05-05T20:44:56.543119Z", "url": "https://files.pythonhosted.org/packages/d2/b5/9de84e6f724081deff7fa6a3a5a2d66f8cbddc8fb63f47771da4955e3e72/respond-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d5f907d1da8eb2a52f2e0e4b71c271bb", "sha256": "d569de46b482e976246788cbfdcb3dc438c2622c35307a507734bdcfef764f62"}, "downloads": -1, "filename": "respond-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d5f907d1da8eb2a52f2e0e4b71c271bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8980, "upload_time": "2020-05-05T20:46:38", "upload_time_iso_8601": "2020-05-05T20:46:38.345275Z", "url": "https://files.pythonhosted.org/packages/4e/c3/53a47a5e1820e7756cc827c7bce1d4e3cd1ddd356441931f17cddad2bec5/respond-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "472e73cff2000bd25e453dba393320f2", "sha256": "ffed704db61a56127756183426ae626a5ad1e970e094ba8d5675e0223ed04ba8"}, "downloads": -1, "filename": "respond-0.2.tar.gz", "has_sig": false, "md5_digest": "472e73cff2000bd25e453dba393320f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8307, "upload_time": "2020-05-05T20:46:39", "upload_time_iso_8601": "2020-05-05T20:46:39.322336Z", "url": "https://files.pythonhosted.org/packages/14/a8/55ea2404b89918518fa5e44e3c8e1023a086b71080164eda59d73638c0b2/respond-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4feac16040a0091f53a5f6496f862c74", "sha256": "42904740bd36bf931c8f5f18b3bb01190c16d35df82a39f2fec7458526bac0ea"}, "downloads": -1, "filename": "respond-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4feac16040a0091f53a5f6496f862c74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11156, "upload_time": "2020-05-05T20:50:52", "upload_time_iso_8601": "2020-05-05T20:50:52.954382Z", "url": "https://files.pythonhosted.org/packages/56/0f/bb639b6256243d17035d447997e07ce7aac2af15ed99992ff016f34247f1/respond-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2a4e2fa44108a5898aba41c5595b45", "sha256": "05f8c59ce25b10ddbc07d699d19bf04a5e738831faad8b162471c96c8312812c"}, "downloads": -1, "filename": "respond-0.3.tar.gz", "has_sig": false, "md5_digest": "1f2a4e2fa44108a5898aba41c5595b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12985, "upload_time": "2020-05-05T20:50:54", "upload_time_iso_8601": "2020-05-05T20:50:54.297327Z", "url": "https://files.pythonhosted.org/packages/35/07/c6066e55f59216efa627e885558a9395ce6d7445f5afd4f4b037fb62ea75/respond-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4feac16040a0091f53a5f6496f862c74", "sha256": "42904740bd36bf931c8f5f18b3bb01190c16d35df82a39f2fec7458526bac0ea"}, "downloads": -1, "filename": "respond-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4feac16040a0091f53a5f6496f862c74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11156, "upload_time": "2020-05-05T20:50:52", "upload_time_iso_8601": "2020-05-05T20:50:52.954382Z", "url": "https://files.pythonhosted.org/packages/56/0f/bb639b6256243d17035d447997e07ce7aac2af15ed99992ff016f34247f1/respond-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2a4e2fa44108a5898aba41c5595b45", "sha256": "05f8c59ce25b10ddbc07d699d19bf04a5e738831faad8b162471c96c8312812c"}, "downloads": -1, "filename": "respond-0.3.tar.gz", "has_sig": false, "md5_digest": "1f2a4e2fa44108a5898aba41c5595b45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12985, "upload_time": "2020-05-05T20:50:54", "upload_time_iso_8601": "2020-05-05T20:50:54.297327Z", "url": "https://files.pythonhosted.org/packages/35/07/c6066e55f59216efa627e885558a9395ce6d7445f5afd4f4b037fb62ea75/respond-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:46 2020"}