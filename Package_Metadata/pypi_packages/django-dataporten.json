{"info": {"author": "Jakob Gerhard Martinussen", "author_email": "jakobgm@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "=================\nDjango-dataporten\n=================\n\nDjango-dataporten is a simple Django app which fetches data from dataporten and\nattaches it to your Django user objects. It implements the dataporten groups\nAPI, allowing you to easily access group memberships through a pythonic API, without\nworrying about parsing raw JSON content.\n\nSetup\n=====\n\n1. Add \"dataporten\" to your :code:`INSTALLED_APPS` setting like this\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'dataporten',\n        ...\n    ]\n\n\n2. Run `python manage.py migrate` to create the dataporten proxy models.\n\n3. In your `settings.py` file, add the variable :code:`DATAPORTEN_TOKEN_FUNCTION`,\nwhich should be a dotted path to the function that will retrieve user tokens.\nDataporten uses this \"importable string\" in order to retrieve the OAuth2\nauthentication token for a given user. For instance,\n\n.. code:: python\n\n    DATAPORTEN_TOKEN_FUNCTION = 'myapp.oauth.allauth_token'\n\nThe function should accept a :code:`User` and return a :code:`str`, if the\ntoken exists, else :code:`None`.\nHere is a python3.6/3.7 example that will work if you use `django-allauth`_:\n\n.. code:: python\n\n    def allauth_token(user: User) -> Optional[str]:\n        try:\n            return SocialToken.objects.get(\n                account__user=user,\n                account__provider='dataporten',\n            ).token\n        except SocialToken.DoesNotExist:\n            return None\n\n4. Add the dataporten middleware. This middleware adds a :code:`dataporten`\nattribute to :code:`request.user` for users with an associated\ndataporten token. Take care to place it after\n:code:`django.contrib.auth.middleware.AuthenticationMiddleware`.\n\n.. code:: python\n\n    MIDDLEWARE = (\n        ...\n        'django.contrib.auth.middleware.AuthenticationMiddleware',\n        ...\n        'dataporten.middleware.DataportenGroupsMiddleware',\n        ...\n    )\n\n5. Optionally, enable caching for API queries. Take care to create the directory\nset in :code:`DATAPORTEN_CACHE_PATH` before starting the Django server.\n\n.. code:: python\n\n    # Cache requests to the dataporten API\n    DATAPORTEN_CACHE_REQUESTS = True\n\n    # Where to save the sqlite3 cache backend\n    DATAPORTEN_CACHE_PATH = 'tmp/'\n\n.. _django-allauth: https://github.com/pennersr/django-allauth:\n\n\nUsage\n=====\n\nThe :code:`DataportenGroupsMiddleware` adds an instance of\n:code:`DataportenGroupsManager` assigned to :code:`request.user.dataporten` for\nevery valid dataporten user making a request. This object contains attributes\nfor accessing different types of group memberships, such as courses, organization\nunits, study programmes, main profiles, generic groups, and *all* groups.\n\n\nGroups\n------\n\n*All* groups are accessible through :code:`request.user.dataporten.groups`.\nThis is a dictionary keyed by group ids, with :code:`Group` objects as values.\nLet's use the Applied Physics and Mathematics master degree at NTNU as an example\nfor common attributes available for all group types\n\n.. code:: python\n\n    uid = 'fc:fs:fs:prg:ntnu.no:MTFYMA'\n    group = request.user.dataporten.groups[uid]\n    assert group.uid == uid\n    assert group.name == 'Fysikk og matematikk - masterstudium (5-\\u00e5rig)'\n    assert group.url == 'http://www.ntnu.no/studier/mtfyma'\n    assert group.group_type == 'fc:fs:prg'\n\nMembership objects\n------------------\n\nAll groups have an associated :code:`Membership` object which can be used for\nfurther querying of membership properties for that particular group.\nThe original membership JSON can be accessed from the :code:`Membership.json`\nattribute:\n\n.. code:: python\n\n    group = request.user.dataporten.groups[uid]\n    membership = group.membership\n\n    print(membership.json)\n    >>> {\n    >>>     'title': ['fast ansatt'],\n    >>>     'affiliation': ['employee', 'member', 'affiliate', 'student'],\n    >>>     'primaryAffiliation': 'employee',\n    >>>     'basic': 'admin',\n    >>>     'displayName': 'Ansatt',\n    >>> }\n\n\nSome additional, common properties are available:\n\n.. code:: python\n\n    # Membership objects are \"truthy\" if they are considered active\n    assert membership\n\n    # Not all group memberships have a set end time\n    assert isinstance(membership.end_time, [datetime.datetime, None])\n\n    # The displayName value is used as the membership string representation\n    assert str(membership) == 'Ansatt'\n\n    # Primary affiliation to the group\n    assert membership.primary_affiliation == 'employee'\n\n    # And all affiliations to the group\n    assert membership.affiliations == [\n        'employee',\n        'member',\n        'affiliate',\n        'student',\n    ]\n\n\nGroup membership checks\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also check if a user is an **active** member of a specific dataporten group\nby providing the group :code:`id` to the :code:`DataportenGroupsManager.is_member_of`\nmethod. This is offered as a more ergonomic alternative to\n:code:`bool(request.user.dataporten.groups[uid].membership)`. For instance,\n\n.. code:: python\n\n    assert request.user.dataporten.is_member_of(\n        uid='fc:org:ntnu.no:unit:167500',\n        active=True,\n    )\n\nIf :code:`active` is set to :code:`False`, the method only checks if the user\nhas been a member of the group at any time, not necessarily if the user is\nan **active** member.\n\nSemester objects\n----------------\n\nMembership objects also have an associated :code:`Semester` object which\ncan be used to determine the year and season of the membership.\n\n.. code:: python\n\n    from dataporten.parsers import Semester\n\n    semester = request.user.groups[uid].membership.semester\n    assert semester.year == 2019\n    assert semester.season in (Semester.SPRING, Semester.AUTUMN)\n\nThe :code:`Semester` class also implements :code:`__sub__`, which\nreturns \"semester delta\" between two semesters. For instance,\nthe spring semester of 2019 minus the autumn semester of 2017 would\nreturn :code:`3`.\n\nCourses\n-------\n\nCourse enrollment can be queryed from the :code:`CourseManager` object, attributed to\n:code:`request.user.dataporten.course`.\n\nYou can check if a user has an affiliation to a course, only given\nits course code, and not its dataporten ID,\n\n.. code:: python\n\n    # Already finished the course\n    assert 'TMA4150' in request.user.dataporten.courses.finished\n\n    # Currently enrolled in the course\n    assert 'TMA4150' in request.user.dataporten.courses.active\n\n    # Either\n    assert 'TMA4150' in request.user.dataporten.courses.all\n\n\nMore\n----\n\nThere is still lots of more undocumented (but well tested!) attributes of\n:code:`DataportenGroupsManager`. Take a look at :code:`dataporten/parsers.py`.\nEach parser has a class variable :code:`NAME`, and they are attached to\nthe user as :code:`request.user.dataporten.NAME`.\n\nIf you have a specific usecase, please open a GitHub issue, and I will\ndocument and/or implement it for you.\n\nRun tests\n=========\n\n.. code:: bash\n\n    export DJANGO_SETTINGS_MODULE=dataporten.settings\n    pytest\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JakobGM/django-dataporten", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "django-dataporten", "package_url": "https://pypi.org/project/django-dataporten/", "platform": "", "project_url": "https://pypi.org/project/django-dataporten/", "project_urls": {"Homepage": "https://github.com/JakobGM/django-dataporten"}, "release_url": "https://pypi.org/project/django-dataporten/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "A simple Django app to fetch and parse data from Dataporten.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-dataporten is a simple Django app which fetches data from dataporten and\nattaches it to your Django user objects. It implements the dataporten groups\nAPI, allowing you to easily access group memberships through a pythonic API, without\nworrying about parsing raw JSON content.</p>\n<div id=\"setup\">\n<h2>Setup</h2>\n<ol>\n<li>Add \u201cdataporten\u201d to your <code>INSTALLED_APPS</code> setting like this</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'dataporten'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<ol>\n<li>Run <cite>python manage.py migrate</cite> to create the dataporten proxy models.</li>\n</ol>\n<p>3. In your <cite>settings.py</cite> file, add the variable <code>DATAPORTEN_TOKEN_FUNCTION</code>,\nwhich should be a dotted path to the function that will retrieve user tokens.\nDataporten uses this \u201cimportable string\u201d in order to retrieve the OAuth2\nauthentication token for a given user. For instance,</p>\n<pre><span class=\"n\">DATAPORTEN_TOKEN_FUNCTION</span> <span class=\"o\">=</span> <span class=\"s1\">'myapp.oauth.allauth_token'</span>\n</pre>\n<p>The function should accept a <code>User</code> and return a <code>str</code>, if the\ntoken exists, else <code>None</code>.\nHere is a python3.6/3.7 example that will work if you use <a href=\"https://github.com/pennersr/django-allauth:\" rel=\"nofollow\">django-allauth</a>:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">allauth_token</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">SocialToken</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"n\">account__user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"n\">account__provider</span><span class=\"o\">=</span><span class=\"s1\">'dataporten'</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">token</span>\n    <span class=\"k\">except</span> <span class=\"n\">SocialToken</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>\n<p>4. Add the dataporten middleware. This middleware adds a <code>dataporten</code>\nattribute to <code>request.user</code> for users with an associated\ndataporten token. Take care to place it after\n<code>django.contrib.auth.middleware.AuthenticationMiddleware</code>.</p>\n<pre><span class=\"n\">MIDDLEWARE</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django.contrib.auth.middleware.AuthenticationMiddleware'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'dataporten.middleware.DataportenGroupsMiddleware'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>5. Optionally, enable caching for API queries. Take care to create the directory\nset in <code>DATAPORTEN_CACHE_PATH</code> before starting the Django server.</p>\n<pre><span class=\"c1\"># Cache requests to the dataporten API</span>\n<span class=\"n\">DATAPORTEN_CACHE_REQUESTS</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Where to save the sqlite3 cache backend</span>\n<span class=\"n\">DATAPORTEN_CACHE_PATH</span> <span class=\"o\">=</span> <span class=\"s1\">'tmp/'</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The <code>DataportenGroupsMiddleware</code> adds an instance of\n<code>DataportenGroupsManager</code> assigned to <code>request.user.dataporten</code> for\nevery valid dataporten user making a request. This object contains attributes\nfor accessing different types of group memberships, such as courses, organization\nunits, study programmes, main profiles, generic groups, and <em>all</em> groups.</p>\n<div id=\"groups\">\n<h3>Groups</h3>\n<p><em>All</em> groups are accessible through <code>request.user.dataporten.groups</code>.\nThis is a dictionary keyed by group ids, with <code>Group</code> objects as values.\nLet\u2019s use the Applied Physics and Mathematics master degree at NTNU as an example\nfor common attributes available for all group types</p>\n<pre><span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"s1\">'fc:fs:fs:prg:ntnu.no:MTFYMA'</span>\n<span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"n\">uid</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">uid</span> <span class=\"o\">==</span> <span class=\"n\">uid</span>\n<span class=\"k\">assert</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s1\">'Fysikk og matematikk - masterstudium (5-</span><span class=\"se\">\\u00e5</span><span class=\"s1\">rig)'</span>\n<span class=\"k\">assert</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">==</span> <span class=\"s1\">'http://www.ntnu.no/studier/mtfyma'</span>\n<span class=\"k\">assert</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">group_type</span> <span class=\"o\">==</span> <span class=\"s1\">'fc:fs:prg'</span>\n</pre>\n</div>\n<div id=\"membership-objects\">\n<h3>Membership objects</h3>\n<p>All groups have an associated <code>Membership</code> object which can be used for\nfurther querying of membership properties for that particular group.\nThe original membership JSON can be accessed from the <code>Membership.json</code>\nattribute:</p>\n<pre><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"n\">uid</span><span class=\"p\">]</span>\n<span class=\"n\">membership</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">membership</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'fast ansatt'</span><span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'affiliation'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'employee'</span><span class=\"p\">,</span> <span class=\"s1\">'member'</span><span class=\"p\">,</span> <span class=\"s1\">'affiliate'</span><span class=\"p\">,</span> <span class=\"s1\">'student'</span><span class=\"p\">],</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'primaryAffiliation'</span><span class=\"p\">:</span> <span class=\"s1\">'employee'</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'basic'</span><span class=\"p\">:</span> <span class=\"s1\">'admin'</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span>     <span class=\"s1\">'displayName'</span><span class=\"p\">:</span> <span class=\"s1\">'Ansatt'</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">}</span>\n</pre>\n<p>Some additional, common properties are available:</p>\n<pre><span class=\"c1\"># Membership objects are \"truthy\" if they are considered active</span>\n<span class=\"k\">assert</span> <span class=\"n\">membership</span>\n\n<span class=\"c1\"># Not all group memberships have a set end time</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">end_time</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># The displayName value is used as the membership string representation</span>\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">membership</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Ansatt'</span>\n\n<span class=\"c1\"># Primary affiliation to the group</span>\n<span class=\"k\">assert</span> <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">primary_affiliation</span> <span class=\"o\">==</span> <span class=\"s1\">'employee'</span>\n\n<span class=\"c1\"># And all affiliations to the group</span>\n<span class=\"k\">assert</span> <span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">affiliations</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'employee'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'member'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'affiliate'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'student'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<div id=\"group-membership-checks\">\n<h4>Group membership checks</h4>\n<p>You can also check if a user is an <strong>active</strong> member of a specific dataporten group\nby providing the group <code>id</code> to the <code>DataportenGroupsManager.is_member_of</code>\nmethod. This is offered as a more ergonomic alternative to\n<code>bool(request.user.dataporten.groups[uid].membership)</code>. For instance,</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">is_member_of</span><span class=\"p\">(</span>\n    <span class=\"n\">uid</span><span class=\"o\">=</span><span class=\"s1\">'fc:org:ntnu.no:unit:167500'</span><span class=\"p\">,</span>\n    <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If <code>active</code> is set to <code>False</code>, the method only checks if the user\nhas been a member of the group at any time, not necessarily if the user is\nan <strong>active</strong> member.</p>\n</div>\n</div>\n<div id=\"semester-objects\">\n<h3>Semester objects</h3>\n<p>Membership objects also have an associated <code>Semester</code> object which\ncan be used to determine the year and season of the membership.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataporten.parsers</span> <span class=\"kn\">import</span> <span class=\"n\">Semester</span>\n\n<span class=\"n\">semester</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"n\">uid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">membership</span><span class=\"o\">.</span><span class=\"n\">semester</span>\n<span class=\"k\">assert</span> <span class=\"n\">semester</span><span class=\"o\">.</span><span class=\"n\">year</span> <span class=\"o\">==</span> <span class=\"mi\">2019</span>\n<span class=\"k\">assert</span> <span class=\"n\">semester</span><span class=\"o\">.</span><span class=\"n\">season</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">Semester</span><span class=\"o\">.</span><span class=\"n\">SPRING</span><span class=\"p\">,</span> <span class=\"n\">Semester</span><span class=\"o\">.</span><span class=\"n\">AUTUMN</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>Semester</code> class also implements <code>__sub__</code>, which\nreturns \u201csemester delta\u201d between two semesters. For instance,\nthe spring semester of 2019 minus the autumn semester of 2017 would\nreturn <code>3</code>.</p>\n</div>\n<div id=\"courses\">\n<h3>Courses</h3>\n<p>Course enrollment can be queryed from the <code>CourseManager</code> object, attributed to\n<code>request.user.dataporten.course</code>.</p>\n<p>You can check if a user has an affiliation to a course, only given\nits course code, and not its dataporten ID,</p>\n<pre><span class=\"c1\"># Already finished the course</span>\n<span class=\"k\">assert</span> <span class=\"s1\">'TMA4150'</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"n\">finished</span>\n\n<span class=\"c1\"># Currently enrolled in the course</span>\n<span class=\"k\">assert</span> <span class=\"s1\">'TMA4150'</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"n\">active</span>\n\n<span class=\"c1\"># Either</span>\n<span class=\"k\">assert</span> <span class=\"s1\">'TMA4150'</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">dataporten</span><span class=\"o\">.</span><span class=\"n\">courses</span><span class=\"o\">.</span><span class=\"n\">all</span>\n</pre>\n</div>\n<div id=\"more\">\n<h3>More</h3>\n<p>There is still lots of more undocumented (but well tested!) attributes of\n<code>DataportenGroupsManager</code>. Take a look at <code>dataporten/parsers.py</code>.\nEach parser has a class variable <code>NAME</code>, and they are attached to\nthe user as <code>request.user.dataporten.NAME</code>.</p>\n<p>If you have a specific usecase, please open a GitHub issue, and I will\ndocument and/or implement it for you.</p>\n</div>\n</div>\n<div id=\"run-tests\">\n<h2>Run tests</h2>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"o\">=</span>dataporten.settings\npytest\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5109599, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f0a31c1688d903b91eb799955ad19705", "sha256": "31123e704b00938edf9d2aefc8d59d92a79e193f0a59c224dc8dbac868e389e5"}, "downloads": -1, "filename": "django-dataporten-0.1.tar.gz", "has_sig": true, "md5_digest": "f0a31c1688d903b91eb799955ad19705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12331, "upload_time": "2017-10-20T15:14:50", "upload_time_iso_8601": "2017-10-20T15:14:50.891293Z", "url": "https://files.pythonhosted.org/packages/75/19/72abcaf2dc91bb4c2e21a0e2644194a9922791f6d48fa80351b46963944c/django-dataporten-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9205a0d2ca889956245fc1e2ec6500fb", "sha256": "316f2ee03f57be1b24c051333e640d460f194c781d64008aed4f5a1e24cc7837"}, "downloads": -1, "filename": "django-dataporten-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9205a0d2ca889956245fc1e2ec6500fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12363, "upload_time": "2017-10-25T16:02:21", "upload_time_iso_8601": "2017-10-25T16:02:21.258918Z", "url": "https://files.pythonhosted.org/packages/3b/d2/0eb101c25ffc6e1345a046426a37c4820ebab51d99da5ac1b1a6a93a5cec/django-dataporten-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f5cc86b5d8111e9f67adbebea14039a6", "sha256": "13754c4155aaf684fa27512415aaa0630fabd1f4388312df0cbe2689b1748a69"}, "downloads": -1, "filename": "django-dataporten-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f5cc86b5d8111e9f67adbebea14039a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12419, "upload_time": "2018-01-23T09:49:54", "upload_time_iso_8601": "2018-01-23T09:49:54.628946Z", "url": "https://files.pythonhosted.org/packages/de/ab/ed124ae03e203b40085a053cf0ab1ea83125b009bfaff5102d36eb0e1282/django-dataporten-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0a638e18933183f03332b3647c56edab", "sha256": "2db76dda51989512009aa9a4e0bea00f05343d331918b9db4fd6b3f062015892"}, "downloads": -1, "filename": "django_dataporten-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0a638e18933183f03332b3647c56edab", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16704, "upload_time": "2019-01-06T15:57:21", "upload_time_iso_8601": "2019-01-06T15:57:21.377093Z", "url": "https://files.pythonhosted.org/packages/56/d7/af8c58ae6cce97a55480f86b0b9d9eb43b9861d5d8245ba2801240d2a76a/django_dataporten-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70481426a1a4a0dbeb189bb1ae1de645", "sha256": "2d0b2653038e47c1bb484b68642d76273a962a6152caf23ac5f6dad59a95d1e6"}, "downloads": -1, "filename": "django-dataporten-0.2.0.tar.gz", "has_sig": false, "md5_digest": "70481426a1a4a0dbeb189bb1ae1de645", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12836, "upload_time": "2019-01-06T15:57:19", "upload_time_iso_8601": "2019-01-06T15:57:19.293998Z", "url": "https://files.pythonhosted.org/packages/74/e3/9568534c2e933b4d04ed288eb791cb1e7f2abb80df57269545ce710d62fa/django-dataporten-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "576763176c8badf487a77366ff6c74b0", "sha256": "048fd358b46332416e7356ba06a366fcc4223bd3c9971c6456238f84ba5832fc"}, "downloads": -1, "filename": "django_dataporten-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "576763176c8badf487a77366ff6c74b0", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16700, "upload_time": "2019-01-06T16:08:59", "upload_time_iso_8601": "2019-01-06T16:08:59.704038Z", "url": "https://files.pythonhosted.org/packages/eb/02/414c2c4e43e145daf73122b2a79a02690fcaf5f47ab5dd1ce92dc6802ee0/django_dataporten-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4e0d75d3a8b1409d06392a3de60949f", "sha256": "e64bb1a34835931af2d2f9612810dc66d69cff2db3cee343fe07bc0baab1f807"}, "downloads": -1, "filename": "django-dataporten-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d4e0d75d3a8b1409d06392a3de60949f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12843, "upload_time": "2019-01-06T16:08:57", "upload_time_iso_8601": "2019-01-06T16:08:57.785175Z", "url": "https://files.pythonhosted.org/packages/51/5f/45b9bfd789f593ed9bb5ff360106e90350ba51f0729169bccb05e922c415/django-dataporten-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "c24e137debbe018d0bb568b58b3ffe14", "sha256": "e58991d5ae9fc8f12b9e6fdfb21b6308a070de34a97ab4a30c1a37a65c690e0b"}, "downloads": -1, "filename": "django_dataporten-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c24e137debbe018d0bb568b58b3ffe14", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 17080, "upload_time": "2019-01-06T16:33:46", "upload_time_iso_8601": "2019-01-06T16:33:46.544892Z", "url": "https://files.pythonhosted.org/packages/3b/67/19de120cafaf59e041f1bec5a0869a2a021fde39446b22845b64c3688727/django_dataporten-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0046c609368b65804f83ca27dc3419ac", "sha256": "55b0fc8a17d9d952ebcd1b1a7368af233307a20e4fa9ee268064cb3d9610636c"}, "downloads": -1, "filename": "django-dataporten-0.2.2.tar.gz", "has_sig": false, "md5_digest": "0046c609368b65804f83ca27dc3419ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13467, "upload_time": "2019-01-06T16:33:44", "upload_time_iso_8601": "2019-01-06T16:33:44.614074Z", "url": "https://files.pythonhosted.org/packages/ce/13/11ff3aabd2da08a2ec48f47bd409a1a0a816588a52ababdfda274a02c44f/django-dataporten-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e3445fc01191d479e3db961b45c8ff68", "sha256": "242ab5a10d035c049591a313e0fa7761bdc3b8395b6c465ebfb7ac1876864ab8"}, "downloads": -1, "filename": "django_dataporten-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e3445fc01191d479e3db961b45c8ff68", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 18062, "upload_time": "2019-01-06T17:51:32", "upload_time_iso_8601": "2019-01-06T17:51:32.698121Z", "url": "https://files.pythonhosted.org/packages/ef/e2/f81f01e055b2f0d775427f76004d0685d8e952ef844087c573bb40336323/django_dataporten-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b6fc17bda2851c4ed0a906d0bfe13d9", "sha256": "356992c15a1def40e35a30de43c302fdfed7b274050f7d972de1111c4f9c657b"}, "downloads": -1, "filename": "django-dataporten-0.3.0.tar.gz", "has_sig": false, "md5_digest": "9b6fc17bda2851c4ed0a906d0bfe13d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14853, "upload_time": "2019-01-06T17:51:30", "upload_time_iso_8601": "2019-01-06T17:51:30.555978Z", "url": "https://files.pythonhosted.org/packages/a8/31/95858f080b4ef7d51ac0171869fe6a653337635a72dddf54731d18de0077/django-dataporten-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "15d82832ae8f9681867573694bac28c2", "sha256": "8cb9f8658e6263a97ed857e7b528d3c3b070e23c16b707ab8dd1ad65fa76c776"}, "downloads": -1, "filename": "django_dataporten-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "15d82832ae8f9681867573694bac28c2", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 19017, "upload_time": "2019-01-09T17:15:20", "upload_time_iso_8601": "2019-01-09T17:15:20.474115Z", "url": "https://files.pythonhosted.org/packages/e8/ef/6d6e774b19b19b28ac5ed9ce369beeea9e4d63f03a9015f6a29bf7b7dd9d/django_dataporten-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99f9143df387b0f507a3fd88b322299c", "sha256": "97e1a00e80c6052503c1e42e3bb049b42186cd816297abba8c240ce63371c331"}, "downloads": -1, "filename": "django-dataporten-0.3.1.tar.gz", "has_sig": false, "md5_digest": "99f9143df387b0f507a3fd88b322299c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16602, "upload_time": "2019-01-09T17:15:17", "upload_time_iso_8601": "2019-01-09T17:15:17.384664Z", "url": "https://files.pythonhosted.org/packages/f9/6d/82447ff06c1305e8e68964f1b4e7c949cec375be0e92325552b2d4a15787/django-dataporten-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "998041b8c9ec69bb360a48e1674bf681", "sha256": "0b774591c5d689c5e9493756ebab6ad70d843361c33fbb31f767c4993ada9326"}, "downloads": -1, "filename": "django_dataporten-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "998041b8c9ec69bb360a48e1674bf681", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 20052, "upload_time": "2019-04-07T10:42:32", "upload_time_iso_8601": "2019-04-07T10:42:32.454363Z", "url": "https://files.pythonhosted.org/packages/6d/d6/594db6b1dc455a99958b3ebdbb9b9c01a133f8347d43879550f9eee47e99/django_dataporten-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b84ee00a43144764e9f232e8c49b5ff9", "sha256": "c0aa75951885eff38876c8f3697bb052022e299a8a4372ac06b954c6983ba8f1"}, "downloads": -1, "filename": "django-dataporten-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b84ee00a43144764e9f232e8c49b5ff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17806, "upload_time": "2019-04-07T10:42:29", "upload_time_iso_8601": "2019-04-07T10:42:29.633133Z", "url": "https://files.pythonhosted.org/packages/69/5d/48f8265890504e7a41622bf5213a9f9a27cc388f4551eefbb6ad166ec774/django-dataporten-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "998041b8c9ec69bb360a48e1674bf681", "sha256": "0b774591c5d689c5e9493756ebab6ad70d843361c33fbb31f767c4993ada9326"}, "downloads": -1, "filename": "django_dataporten-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "998041b8c9ec69bb360a48e1674bf681", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 20052, "upload_time": "2019-04-07T10:42:32", "upload_time_iso_8601": "2019-04-07T10:42:32.454363Z", "url": "https://files.pythonhosted.org/packages/6d/d6/594db6b1dc455a99958b3ebdbb9b9c01a133f8347d43879550f9eee47e99/django_dataporten-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b84ee00a43144764e9f232e8c49b5ff9", "sha256": "c0aa75951885eff38876c8f3697bb052022e299a8a4372ac06b954c6983ba8f1"}, "downloads": -1, "filename": "django-dataporten-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b84ee00a43144764e9f232e8c49b5ff9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17806, "upload_time": "2019-04-07T10:42:29", "upload_time_iso_8601": "2019-04-07T10:42:29.633133Z", "url": "https://files.pythonhosted.org/packages/69/5d/48f8265890504e7a41622bf5213a9f9a27cc388f4551eefbb6ad166ec774/django-dataporten-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:42 2020"}