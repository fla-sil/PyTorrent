{"info": {"author": "James Saryerwinnie", "author_email": "js@jamesls.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.7"], "description": "JMESLog - Changelog Management\n==============================\n\nJMESLog is a script for managing changelogs.  It helps you associate changelog\nentries for new features and bug fixes and also helps you generate a CHANGELOG\nfile or any other type of release notes page.  It enforces semver by\nautomatically determining the next version number based on the pending\nchanges for your next release.\n\n\nQuickstart\n==========\n\nInitialize a repo to use JMESLog::\n\n    $ jmeslog init\n\nBefore you send a PR, create a changelog entry for your change::\n\n    $ jmeslog new-change\n\n    A change file was created at .changes/next-release/foo-bar.json\n\nCommit that file::\n\n    $ git add .changes/next-release/foo-bar.json\n    $ git commit -m \"Add changelog entry\"\n\nThat's it.\nWhen it comes time to release, you run these commands::\n\n    $ jmeslog new-release\n    $ jmeslog render > CHANGELOG.rst\n\nThe ``new-release`` command consolidates all the files in\n``.changes/next-release`` into a single JSON file representing\nthe new release.  The ``render`` command regenerates your CHANGELOG\nfile.\n\nThe rest of this doc explains this workflow in more detail.\n\n\nConcepts\n========\n\nAll changes for a repo are stored as structured data in a\n``.changes/`` directory.\n\nThe changes for the next release are stored in ``.changes/next-release/``.\nAll of the changes from previous releases are stored in\n``.changes/X.Y.Z.json`` where ``X.Y.Z`` represent the version associated\na given release.  These files are generated by running the\n``jmeslog new-change`` command.\n\nWhen you're ready to release a new version, all of the change files from\n``.changes/next-release/`` are gathered and a new ``.changes/X.Y.Z.json``\nfile is created that contain those changes.  The content from\n``.changes/next-release/`` is then removed.  This is done with the\n``jmeslog new-release`` command.\n\nYou can then generate a CHANGELOG (or any other file) using the data\nfrom ``.changes/``.  To do this you run the ``jmeslog generate`` command.\n\n\nUsage\n=====\n\nThe typical workflow when using ``jmeslog``:\n\n* Use the ``jmeslog new-change`` command to generate a new changelog\n  file when you're working on a new feature.  This file is included\n  as part of the PR you send.\n* When you're ready to release, you can run the ``jmespath generate``\n  command to generate the CHANGELOG file based on all your change files.\n  You also run the ``jmeslog new-release`` command to consolidate files\n  from the next ``.changes/next-release/`` directory into a new single\n  ``.changes/X.Y.Z.json`` file.\n\nBackwards Compatibility\n=======================\n\nThe API for JMESLog, including the CLI commands and parameters, the\nfiles generated and the functionality provided by JMESLog may\nchange in a backwards incompatible manner until its 1.0.0 GA release.\n\n\nFAQ\n===\n\n**What problem is this trying to solve?**\n\nJMESLog helps you automate releases.  It's the result of iterating on an\nautomated release process that started from a completely manual process to\neventually releasing every single day.  When you think about what's involved\nin releasing a new version of your library/tool, you have to:\n\n* Figure out the next version number you want for your release.  If you're\n  following semver, this will depend on what types of changes will be in\n  the next release.  New features should require a minor version bump,\n  and bug fixes should result in a new patch version.\n* Update your CHANGELOG with all the new changes that will be part of\n  this next release under a new section corresponding to the next version\n  number.\n\nThis tool helps with manage both of these problems so you can completely\nautomate your release process.  It also solves several other problems\nthat come up:\n\n* You can have changelog entries tracked with each pull request, and\n  you don't have to worry about merge conflicts to your CHANGELOG file.\n* You can generate more than just a CHANGELOG file if needed.  For example,\n  you can create a \"History\" page in your docs that's rendered differently\n  than your CHANGELOG.\n* You can programatically query for a projects changes.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamesls/jmeslog", "keywords": "changelog jmeslog changes", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "jmeslog", "package_url": "https://pypi.org/project/jmeslog/", "platform": "", "project_url": "https://pypi.org/project/jmeslog/", "project_urls": {"Homepage": "https://github.com/jamesls/jmeslog"}, "release_url": "https://pypi.org/project/jmeslog/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Tool for managing changelogs.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"jmeslog-changelog-management\">\n<h2>JMESLog - Changelog Management</h2>\n<p>JMESLog is a script for managing changelogs.  It helps you associate changelog\nentries for new features and bug fixes and also helps you generate a CHANGELOG\nfile or any other type of release notes page.  It enforces semver by\nautomatically determining the next version number based on the pending\nchanges for your next release.</p>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Initialize a repo to use JMESLog:</p>\n<pre>$ jmeslog init\n</pre>\n<p>Before you send a PR, create a changelog entry for your change:</p>\n<pre>$ jmeslog new-change\n\nA change file was created at .changes/next-release/foo-bar.json\n</pre>\n<p>Commit that file:</p>\n<pre>$ git add .changes/next-release/foo-bar.json\n$ git commit -m \"Add changelog entry\"\n</pre>\n<p>That\u2019s it.\nWhen it comes time to release, you run these commands:</p>\n<pre>$ jmeslog new-release\n$ jmeslog render &gt; CHANGELOG.rst\n</pre>\n<p>The <tt><span class=\"pre\">new-release</span></tt> command consolidates all the files in\n<tt><span class=\"pre\">.changes/next-release</span></tt> into a single JSON file representing\nthe new release.  The <tt>render</tt> command regenerates your CHANGELOG\nfile.</p>\n<p>The rest of this doc explains this workflow in more detail.</p>\n</div>\n<div id=\"concepts\">\n<h2>Concepts</h2>\n<p>All changes for a repo are stored as structured data in a\n<tt>.changes/</tt> directory.</p>\n<p>The changes for the next release are stored in <tt><span class=\"pre\">.changes/next-release/</span></tt>.\nAll of the changes from previous releases are stored in\n<tt>.changes/X.Y.Z.json</tt> where <tt>X.Y.Z</tt> represent the version associated\na given release.  These files are generated by running the\n<tt>jmeslog <span class=\"pre\">new-change</span></tt> command.</p>\n<p>When you\u2019re ready to release a new version, all of the change files from\n<tt><span class=\"pre\">.changes/next-release/</span></tt> are gathered and a new <tt>.changes/X.Y.Z.json</tt>\nfile is created that contain those changes.  The content from\n<tt><span class=\"pre\">.changes/next-release/</span></tt> is then removed.  This is done with the\n<tt>jmeslog <span class=\"pre\">new-release</span></tt> command.</p>\n<p>You can then generate a CHANGELOG (or any other file) using the data\nfrom <tt>.changes/</tt>.  To do this you run the <tt>jmeslog generate</tt> command.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The typical workflow when using <tt>jmeslog</tt>:</p>\n<ul>\n<li>Use the <tt>jmeslog <span class=\"pre\">new-change</span></tt> command to generate a new changelog\nfile when you\u2019re working on a new feature.  This file is included\nas part of the PR you send.</li>\n<li>When you\u2019re ready to release, you can run the <tt>jmespath generate</tt>\ncommand to generate the CHANGELOG file based on all your change files.\nYou also run the <tt>jmeslog <span class=\"pre\">new-release</span></tt> command to consolidate files\nfrom the next <tt><span class=\"pre\">.changes/next-release/</span></tt> directory into a new single\n<tt>.changes/X.Y.Z.json</tt> file.</li>\n</ul>\n</div>\n<div id=\"backwards-compatibility\">\n<h2>Backwards Compatibility</h2>\n<p>The API for JMESLog, including the CLI commands and parameters, the\nfiles generated and the functionality provided by JMESLog may\nchange in a backwards incompatible manner until its 1.0.0 GA release.</p>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<p><strong>What problem is this trying to solve?</strong></p>\n<p>JMESLog helps you automate releases.  It\u2019s the result of iterating on an\nautomated release process that started from a completely manual process to\neventually releasing every single day.  When you think about what\u2019s involved\nin releasing a new version of your library/tool, you have to:</p>\n<ul>\n<li>Figure out the next version number you want for your release.  If you\u2019re\nfollowing semver, this will depend on what types of changes will be in\nthe next release.  New features should require a minor version bump,\nand bug fixes should result in a new patch version.</li>\n<li>Update your CHANGELOG with all the new changes that will be part of\nthis next release under a new section corresponding to the next version\nnumber.</li>\n</ul>\n<p>This tool helps with manage both of these problems so you can completely\nautomate your release process.  It also solves several other problems\nthat come up:</p>\n<ul>\n<li>You can have changelog entries tracked with each pull request, and\nyou don\u2019t have to worry about merge conflicts to your CHANGELOG file.</li>\n<li>You can generate more than just a CHANGELOG file if needed.  For example,\nyou can create a \u201cHistory\u201d page in your docs that\u2019s rendered differently\nthan your CHANGELOG.</li>\n<li>You can programatically query for a projects changes.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6868972, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e9f47c852bbebda831865575464ca2ea", "sha256": "fa4cb634bdc14b6321d4e986574f226d8bb71176f65e24cc0444391e5543e16e"}, "downloads": -1, "filename": "jmeslog-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9f47c852bbebda831865575464ca2ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12739, "upload_time": "2020-03-19T16:41:03", "upload_time_iso_8601": "2020-03-19T16:41:03.170845Z", "url": "https://files.pythonhosted.org/packages/28/cb/d0a85f87fc7bdf9beb995e8d1e884de055bdff438492248a5095d63866d1/jmeslog-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5ccc1484c29df7a4935cb8061eedd4b", "sha256": "dc75b32ed12ef331dbbe2f33cd43e4a0196e14187535b03b42e518322fb4afec"}, "downloads": -1, "filename": "jmeslog-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a5ccc1484c29df7a4935cb8061eedd4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8113, "upload_time": "2020-03-19T16:41:05", "upload_time_iso_8601": "2020-03-19T16:41:05.087761Z", "url": "https://files.pythonhosted.org/packages/82/6d/af3c402338091582ec45c727d75b5505b50807b068ea8958f4758a8e78e4/jmeslog-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6185fc634d4f266b2babc72c8c859e42", "sha256": "8e5c395316d5fbef8f5f60762d6bc367f365e6a787fb6e10a35a3178d85c745b"}, "downloads": -1, "filename": "jmeslog-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6185fc634d4f266b2babc72c8c859e42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12828, "upload_time": "2020-03-23T21:43:52", "upload_time_iso_8601": "2020-03-23T21:43:52.987446Z", "url": "https://files.pythonhosted.org/packages/10/59/5aaf122d0c8e76f206c8bc59e066c547bff0b49639b4b3154a0cfeab2a1f/jmeslog-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b598e55c49dd6023e23d821a00b1f91", "sha256": "bfffef8a815f69229488ccbe71571c749a6626521de155bd90980159099b4369"}, "downloads": -1, "filename": "jmeslog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3b598e55c49dd6023e23d821a00b1f91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8199, "upload_time": "2020-03-23T21:43:54", "upload_time_iso_8601": "2020-03-23T21:43:54.688932Z", "url": "https://files.pythonhosted.org/packages/0e/37/095d4b23d8b0b81cd348f32ce6b6d518a96e23d3086c8dbe5030b90cf8cf/jmeslog-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6185fc634d4f266b2babc72c8c859e42", "sha256": "8e5c395316d5fbef8f5f60762d6bc367f365e6a787fb6e10a35a3178d85c745b"}, "downloads": -1, "filename": "jmeslog-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6185fc634d4f266b2babc72c8c859e42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12828, "upload_time": "2020-03-23T21:43:52", "upload_time_iso_8601": "2020-03-23T21:43:52.987446Z", "url": "https://files.pythonhosted.org/packages/10/59/5aaf122d0c8e76f206c8bc59e066c547bff0b49639b4b3154a0cfeab2a1f/jmeslog-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3b598e55c49dd6023e23d821a00b1f91", "sha256": "bfffef8a815f69229488ccbe71571c749a6626521de155bd90980159099b4369"}, "downloads": -1, "filename": "jmeslog-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3b598e55c49dd6023e23d821a00b1f91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8199, "upload_time": "2020-03-23T21:43:54", "upload_time_iso_8601": "2020-03-23T21:43:54.688932Z", "url": "https://files.pythonhosted.org/packages/0e/37/095d4b23d8b0b81cd348f32ce6b6d518a96e23d3086c8dbe5030b90cf8cf/jmeslog-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:22 2020"}