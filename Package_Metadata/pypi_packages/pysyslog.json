{"info": {"author": "Clifford Bressette", "author_email": "cliffbressette@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "========\npysyslog\n========\n\n\n.. image:: https://img.shields.io/pypi/v/pysyslog.svg\n        :target: https://pypi.python.org/pypi/pysyslog\n\n.. image:: https://img.shields.io/travis/ilovetux/pysyslog.svg\n        :target: https://travis-ci.org/ilovetux/pysyslog\n\n.. image:: https://readthedocs.org/projects/pysyslog/badge/?version=latest\n        :target: https://pysyslog.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nFast, efficient and useful syslog collector using TCP and optional TLS\n\n\n* Free software: GNU General Public License v3\n* Documentation: https://pysyslog.readthedocs.io.\n\nFeatures\n--------\n\n* TLS support\n* Persistent TCP connections\n* Flexible logging configuration (powered by Python's logging module)\n* Fast\n\n\nAbout\n-----\n\npysyslog is a fast and flexible Syslog-over-TCP collector written in Python\nwith TLS support.\n\nIn order to achieve the speed required, we have made some compromises the most\nnotable one is that we do not attempt to be compliant with any RFCs. We do not\nparse any of the messages nor do we offer any syslog-specific functionality. That\nbeing said, since syslog is just plain-text over a transport we should be\ninteroperable with most (if not all) syslog clients.\n\nInstallation\n------------\n\nyou can install with::\n\n  $ pip install pysyslog\n\nUsage\n-----\n\nTo start a local syslog collector (listening on TCP 127.0.0.1:514) you can\nissue the following command::\n\n  $ pysyslog\n\nIf you want to customize the listening host and port they can be passed as\npositional arguments respectively. For instance, if you want to listen on\nall available interfaces at port 8000 you can issue the following command::\n\n  $ pysyslog 0.0.0.0 8000\n\nIf you want to enable TLS, you must provide the path to the key and cert\n(must be in PEM format) you can issue the following command::\n\n  $ pysyslog --cert /path/to/cert.pem --key /path/to/key.pem\n\nIf the key and cert are contained within the same file, you must pass that file\npath to both the `--key` and `--cert`::\n\n  $ pysyslog --cert /path/to/key-and-cert.pem --key /path/to/key-and-cert.pem\n\nAll log messages will be sent to stdout. If you want to customize the\ndestination, you must provide a logging configuration in json format::\n\n  $ pysyslog --logging-config /path/to/logging.json\n\nAnd in `logging.json`, something like this would send everything to stdout\nand also send everything from 127.0.0.1 to a file `./localhost.log`::\n\n  {\n    \"version\": 1,\n    \"root\": {\n        \"level\": \"DEBUG\",\n        \"propagate\": true,\n        \"handlers\": [\"stdout\"]\n    },\n    \"formatters\": {\n        \"brief\": {\n            \"format\": \"%(asctime)s %(message)s\"\n        }\n    },\n    \"handlers\": {\n        \"stdout\": {\n          \"class\": \"logging.StreamHandler\",\n          \"formatter\": \"brief\",\n          \"level\": \"DEBUG\",\n          \"stream\": \"ext://sys.stdout\"\n        },\n        \"localhost-file\": {\n            \"class\": \"logging.FileHandler\",\n            \"formatter\": \"brief\",\n            \"level\": \"DEBUG\",\n            \"filename\": \"./localhost.log\",\n            \"delay\": true\n        }\n    },\n    \"loggers\": {\n        \"127.0.0.1\": {\n            \"handlers\": [\"localhost-file\"],\n            \"level\": \"DEBUG\",\n            \"propagate\": true\n      }\n    }\n  }\n\nfor more information on the logging configuration format please see\nhttps://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema\n\nArchitecture\n------------\n\nThe Python's socketserver module provides the TCP server functionality. When\na client connects, a thread is spawned and the socket will be polled for data.\nThese connections are not closed after receiving one message, rather we utilize\nthe streaming capabilities of TCP to keep these connections open so we do not\nneed to perform our three-way-handshake more than once unless the client closes\nthe connection.\n\nOnce a connection is established each line received will be placed on a queue. The\nqueue is read by a seperate writer process. Which then submits the message to\nthe Python logging system through a logger named after the IP Address of the\nremote peer. This allows a fine-grained configuration where the output can be\nsent to many destinations such as a file, stdout or even another syslog\ncollector.\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2018-07-20)\n------------------\n\n* First release on PyPI.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilovetux/pysyslog", "keywords": "pysyslog", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "pysyslog", "package_url": "https://pypi.org/project/pysyslog/", "platform": "", "project_url": "https://pypi.org/project/pysyslog/", "project_urls": {"Homepage": "https://github.com/ilovetux/pysyslog"}, "release_url": "https://pypi.org/project/pysyslog/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Fast, efficient and useful syslog collector using TCP and optional TLS", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pysyslog\">\n<h2>pysyslog</h2>\n<a href=\"https://pypi.python.org/pypi/pysyslog\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pysyslog.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89d4d90a6303fd117319de60bbb11ed7ca62883c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70797379736c6f672e737667\"></a>\n<a href=\"https://travis-ci.org/ilovetux/pysyslog\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/ilovetux/pysyslog.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9aba5224b538fe1b8536a009e0f0741ffce1062/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f696c6f76657475782f70797379736c6f672e737667\"></a>\n<a href=\"https://pysyslog.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44ad6352ff3d2723f2c36fff0de4ae6b0c16841b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70797379736c6f672f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Fast, efficient and useful syslog collector using TCP and optional TLS</p>\n<ul>\n<li>Free software: GNU General Public License v3</li>\n<li>Documentation: <a href=\"https://pysyslog.readthedocs.io\" rel=\"nofollow\">https://pysyslog.readthedocs.io</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>TLS support</li>\n<li>Persistent TCP connections</li>\n<li>Flexible logging configuration (powered by Python\u2019s logging module)</li>\n<li>Fast</li>\n</ul>\n</div>\n<div id=\"about\">\n<h3>About</h3>\n<p>pysyslog is a fast and flexible Syslog-over-TCP collector written in Python\nwith TLS support.</p>\n<p>In order to achieve the speed required, we have made some compromises the most\nnotable one is that we do not attempt to be compliant with any RFCs. We do not\nparse any of the messages nor do we offer any syslog-specific functionality. That\nbeing said, since syslog is just plain-text over a transport we should be\ninteroperable with most (if not all) syslog clients.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>you can install with:</p>\n<pre>$ pip install pysyslog\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To start a local syslog collector (listening on TCP 127.0.0.1:514) you can\nissue the following command:</p>\n<pre>$ pysyslog\n</pre>\n<p>If you want to customize the listening host and port they can be passed as\npositional arguments respectively. For instance, if you want to listen on\nall available interfaces at port 8000 you can issue the following command:</p>\n<pre>$ pysyslog 0.0.0.0 8000\n</pre>\n<p>If you want to enable TLS, you must provide the path to the key and cert\n(must be in PEM format) you can issue the following command:</p>\n<pre>$ pysyslog --cert /path/to/cert.pem --key /path/to/key.pem\n</pre>\n<p>If the key and cert are contained within the same file, you must pass that file\npath to both the <cite>\u2013key</cite> and <cite>\u2013cert</cite>:</p>\n<pre>$ pysyslog --cert /path/to/key-and-cert.pem --key /path/to/key-and-cert.pem\n</pre>\n<p>All log messages will be sent to stdout. If you want to customize the\ndestination, you must provide a logging configuration in json format:</p>\n<pre>$ pysyslog --logging-config /path/to/logging.json\n</pre>\n<p>And in <cite>logging.json</cite>, something like this would send everything to stdout\nand also send everything from 127.0.0.1 to a file <cite>./localhost.log</cite>:</p>\n<pre>{\n  \"version\": 1,\n  \"root\": {\n      \"level\": \"DEBUG\",\n      \"propagate\": true,\n      \"handlers\": [\"stdout\"]\n  },\n  \"formatters\": {\n      \"brief\": {\n          \"format\": \"%(asctime)s %(message)s\"\n      }\n  },\n  \"handlers\": {\n      \"stdout\": {\n        \"class\": \"logging.StreamHandler\",\n        \"formatter\": \"brief\",\n        \"level\": \"DEBUG\",\n        \"stream\": \"ext://sys.stdout\"\n      },\n      \"localhost-file\": {\n          \"class\": \"logging.FileHandler\",\n          \"formatter\": \"brief\",\n          \"level\": \"DEBUG\",\n          \"filename\": \"./localhost.log\",\n          \"delay\": true\n      }\n  },\n  \"loggers\": {\n      \"127.0.0.1\": {\n          \"handlers\": [\"localhost-file\"],\n          \"level\": \"DEBUG\",\n          \"propagate\": true\n    }\n  }\n}\n</pre>\n<p>for more information on the logging configuration format please see\n<a href=\"https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema\" rel=\"nofollow\">https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema</a></p>\n</div>\n<div id=\"architecture\">\n<h3>Architecture</h3>\n<p>The Python\u2019s socketserver module provides the TCP server functionality. When\na client connects, a thread is spawned and the socket will be polled for data.\nThese connections are not closed after receiving one message, rather we utilize\nthe streaming capabilities of TCP to keep these connections open so we do not\nneed to perform our three-way-handshake more than once unless the client closes\nthe connection.</p>\n<p>Once a connection is established each line received will be placed on a queue. The\nqueue is read by a seperate writer process. Which then submits the message to\nthe Python logging system through a logger named after the IP Address of the\nremote peer. This allows a fine-grained configuration where the output can be\nsent to many destinations such as a file, stdout or even another syslog\ncollector.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2018-07-20)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4104450, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "44ca04e8ce5ec39d3756ab8d80926375", "sha256": "a36698fcb8646c3df9b1837258d18e5f0c1083329abc24aa99cf9f38170a93d0"}, "downloads": -1, "filename": "pysyslog-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "44ca04e8ce5ec39d3756ab8d80926375", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 5489, "upload_time": "2018-07-26T13:18:04", "upload_time_iso_8601": "2018-07-26T13:18:04.379553Z", "url": "https://files.pythonhosted.org/packages/41/c7/643022399b208f2dc6626b3adc8b36a9fb7ee72434be08d8d910557ec7ef/pysyslog-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82f07640d71216b8c7855daddcd824db", "sha256": "0ddac17771b4b9eaceb6aeaa6e400ffffa7c3e7ac00a746c06b25ccd25eb75ff"}, "downloads": -1, "filename": "pysyslog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82f07640d71216b8c7855daddcd824db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11329, "upload_time": "2018-07-26T13:18:03", "upload_time_iso_8601": "2018-07-26T13:18:03.156020Z", "url": "https://files.pythonhosted.org/packages/bb/61/db11c55464b65325b9ce5fcdffce67968a524ad3a8c149c8482e64efe894/pysyslog-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "44ca04e8ce5ec39d3756ab8d80926375", "sha256": "a36698fcb8646c3df9b1837258d18e5f0c1083329abc24aa99cf9f38170a93d0"}, "downloads": -1, "filename": "pysyslog-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "44ca04e8ce5ec39d3756ab8d80926375", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 5489, "upload_time": "2018-07-26T13:18:04", "upload_time_iso_8601": "2018-07-26T13:18:04.379553Z", "url": "https://files.pythonhosted.org/packages/41/c7/643022399b208f2dc6626b3adc8b36a9fb7ee72434be08d8d910557ec7ef/pysyslog-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82f07640d71216b8c7855daddcd824db", "sha256": "0ddac17771b4b9eaceb6aeaa6e400ffffa7c3e7ac00a746c06b25ccd25eb75ff"}, "downloads": -1, "filename": "pysyslog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "82f07640d71216b8c7855daddcd824db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11329, "upload_time": "2018-07-26T13:18:03", "upload_time_iso_8601": "2018-07-26T13:18:03.156020Z", "url": "https://files.pythonhosted.org/packages/bb/61/db11c55464b65325b9ce5fcdffce67968a524ad3a8c149c8482e64efe894/pysyslog-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}