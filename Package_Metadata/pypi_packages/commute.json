{"info": {"author": "Dhruv Baldawa", "author_email": "dhruvbaldawa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "commute.py\n==========\n\nThis is a helper script for multi-modal commute planning based on the\ninformation that you specify.\n\n| commute.py helps users who travel across multiple modes of transport\n| and multiple waypoints to make data-based decisions about which route\n| to use and prefer at a given time or at a given time in future.\n\nTable of contents\n-----------------\n\n-  `Sample Usage <#sample-usage>`__\n-  `Installation <#installation>`__\n-  `Configuration <#configuration>`__\n\n   -  `Get the Google API key <#get-the-google-api-key>`__\n   -  `Create the configuration file <#create-the-configuration-file>`__\n\n      -  `Sample configuration <#sample-configuration>`__\n      -  `Parts of the configuration\n         file <#parts-of-the-configuration-file>`__\n\n         -  `api\\_key <#apikey>`__\n         -  `places <#places>`__\n         -  `map <#map>`__\n\n-  `Usage <#usage>`__\n-  `Status <#status>`__\n\nSample Usage\n------------\n\n.. code:: shell\n\n    $ commute -c config.yml -s HOME -d WORK\n    Total time: 26min.\n    Home (time: 26m. w/traffic drive)\n    Work\n    -----\n    Total time: 43min.\n    Home (time: 41m. waiting: 02min. bus)\n    Work\n    -----\n    Total time: 45min.\n    Home (time: 25m. w/traffic drive)\n    Kwik-e-Mart (time: 20m. w/traffic drive)\n    Work\n    -----\n      ....\n\nInstallation\n------------\n\nYou can easily install this script using either ``pip`` or\n``easy_install``\n\n.. code:: shell\n\n    $ pip install commute\n\nor\n\n.. code:: shell\n\n    $ easy_install commute\n\nConfiguration\n-------------\n\nGet the Google API key\n~~~~~~~~~~~~~~~~~~~~~~\n\nThis information is borrowed from `Google Maps Python client\nrepo <https://github.com/googlemaps/google-maps-services-python>`__\n\n| Each Google Maps Web Service requires an API key or Client ID. API\n  keys are\n| freely available with a Google Account at\n  https://developers.google.com/console.\n| To generate a server key for your project:\n\n#. Visit https://developers.google.com/console and log in with\n   a Google Account.\n#. Select an existing project, or create a new project.\n#. Click **Enable an API**.\n#. Browse for the API, and set its status to \"On\". The Python Client for\n   Google Maps Services\n   accesses the following APIs:\n\n   -  Directions API\n   -  Distance Matrix API\n   -  Elevation API\n   -  Geocoding API\n   -  Time Zone API\n   -  Roads API\n\n#. Once you've enabled the APIs, click **Credentials** from the left\n   navigation of the Developer\n   Console.\n#. In the \"Public API access\", click **Create new Key**.\n#. Choose **Server Key**.\n#. If you'd like to restrict requests to a specific IP address, do so\n   now.\n#. Click **Create**.\n\nYour API key should be 40 characters long, and begin with ``AIza``.\n\nCreate the configuration file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThen you will need to create a ``config.yml`` file, or just any ``yaml``\nfile with the following key fields\n\n.. code:: yaml\n\n    api_key:    # your Google API key over here\n    places:     # all the places which need to be tracked\n    map:        # the map, or essentially how you commute between any two places\n\nSample configuration\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: yaml\n\n    api_key: AIzaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n    places:\n        HOME:\n            location: 742, Evergreen Terrace, Springfield\n            alias: Home\n        WORK:\n            location: Springfield Nuclear Power Plant, Springfield\n            alias: Work\n        KWIK_E_MART:\n            location: Kwik-e-Mart, Springfield\n            alias: Apu's\n        MOES_TAVERN:\n            location: Moe's Tavern, Springfield\n            alias: Moe's\n\n    map:\n        HOME:\n            KWIK_E_MART:\n                - mode: driving\n            MOES_TAVERN:\n                - mode: driving\n                - mode: walking\n            WORK:\n                - mode: driving\n                - mode: transit\n                  transit_mode: bus\n        KWIK_E_MART:\n            HOME:\n                - mode: driving\n            MOES_TAVERN:\n                - mode: driving\n                - mode: walking\n            WORK:\n                - mode: driving\n        MOES_TAVERN:\n            HOME:\n                - mode: driving  # drinking and driving is not encouraged\n                - mode: walking\n            # You don't go to Kwik-e-mart or to work from Moe's\n        WORK:\n            MOES_TAVERN:\n                - mode: driving\n\nParts of the configuration file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\napi\\_key\n''''''''\n\n``api_key`` will hold the information about the Google Developer's API\nkey.\n\nplaces\n''''''\n\n| ``places`` holds information about all the places to be taken under\n| consideration, and a small description about their physical address\n| add how to refer to them in the output\n\n| Each place has two attributes\n|  - location: the physical location of the place (the thing you type\n  into Google Maps).\n|  - alias: an alias to refer by and to use while printing the output.\n\nmap\n'''\n\n| ``map`` key contains all the connections between the places, possible\n| ways to travel between the places and multiple ways, if any\n| It can also contain other detailed information about the specific way\n  of travel.\n\nThe first nesting under map contains the source, use the identifier from\nthe places key above.\n\n.. code:: yaml\n\n    map:\n        PLACE1:\n            PLACE2:\n                ....\n            ....\n        ....\n\nThe next nesting contains a map of possible destinations from the\nsource, which contains the possible ways to travel from the source to\nthe destination\n\n.. code:: yaml\n\n    map:\n        PLACE1:\n            PLACE2:\n                - mode: driving\n                - mode: transit\n                ....\n            ....\n        ....\n\nThe routing information supports all the arguments that the Google Maps\npython client takes. For more information refer to `Google Maps Python\nAPI\ndocumentation <https://googlemaps.github.io/google-maps-services-python/docs/2.4.3/#module-googlemaps>`__\n\nUsage\n-----\n\n.. code:: shell\n\n    $ commute -c config.yml -s HOME -d WORK\n    $ commute -c config.yml -s HOME -d WORK -w now\n    $ commute -c config.yml -s HOME -d WORK -w 'in an hour'\n    $ commute -c config.yml -s HOME -d WORK -w 'friday evening @ 7'\n\n| The date/time parsing is done with the help of\n  `parsedatetime <https://github.com/bear/parsedatetime>`__ library, so\n  look at the\n|  documentation to find more about the formats supported.\n\nFor using it as a library,\n\n.. code:: python\n\n    import time\n    from commute import get_all_paths, format_path\n\n    config_file = \"/path/to/config/file\"\n    src = \"HOME\"\n    dst = \"WORK\"\n    when = time.time()\n\n    for rank, path in get_all_paths(config, src, dst, when):\n        print(format_path(rank, path))\n        print(\"-\" * 5)\n\nStatus\n------\n\nThis project is at a very early stage right now. Please try it out and\nreport any issues.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dhruvbaldawa/commute.py", "keywords": "commute googlemaps directions", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "commute", "package_url": "https://pypi.org/project/commute/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/commute/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/dhruvbaldawa/commute.py"}, "release_url": "https://pypi.org/project/commute/0.2/", "requires_dist": null, "requires_python": null, "summary": "commute.py helps users who travel across multiple modes of transport\nand multiple waypoints to make data-based decisions about which route\nto use and prefer at a given time or at a given time in future.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a helper script for multi-modal commute planning based on the\ninformation that you specify.</p>\n<div>\n<div>commute.py helps users who travel across multiple modes of transport</div>\n<div>and multiple waypoints to make data-based decisions about which route</div>\n<div>to use and prefer at a given time or at a given time in future.</div>\n</div>\n<div id=\"table-of-contents\">\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#sample-usage\" rel=\"nofollow\">Sample Usage</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a><ul>\n<li><a href=\"#get-the-google-api-key\" rel=\"nofollow\">Get the Google API key</a></li>\n<li><a href=\"#create-the-configuration-file\" rel=\"nofollow\">Create the configuration file</a><ul>\n<li><a href=\"#sample-configuration\" rel=\"nofollow\">Sample configuration</a></li>\n<li><a href=\"#parts-of-the-configuration-file\" rel=\"nofollow\">Parts of the configuration\nfile</a><ul>\n<li><a href=\"#apikey\" rel=\"nofollow\">api_key</a></li>\n<li><a href=\"#places\" rel=\"nofollow\">places</a></li>\n<li><a href=\"#map\" rel=\"nofollow\">map</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#status\" rel=\"nofollow\">Status</a></li>\n</ul>\n</div>\n<div id=\"sample-usage\">\n<h2>Sample Usage</h2>\n<pre>$ commute -c config.yml -s HOME -d WORK\nTotal time: 26min.\nHome <span class=\"o\">(</span>time: 26m. w/traffic drive<span class=\"o\">)</span>\nWork\n-----\nTotal time: 43min.\nHome <span class=\"o\">(</span>time: 41m. waiting: 02min. bus<span class=\"o\">)</span>\nWork\n-----\nTotal time: 45min.\nHome <span class=\"o\">(</span>time: 25m. w/traffic drive<span class=\"o\">)</span>\nKwik-e-Mart <span class=\"o\">(</span>time: 20m. w/traffic drive<span class=\"o\">)</span>\nWork\n-----\n  ....\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can easily install this script using either <tt>pip</tt> or\n<tt>easy_install</tt></p>\n<pre>$ pip install commute\n</pre>\n<p>or</p>\n<pre>$ easy_install commute\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"get-the-google-api-key\">\n<h3>Get the Google API key</h3>\n<p>This information is borrowed from <a href=\"https://github.com/googlemaps/google-maps-services-python\" rel=\"nofollow\">Google Maps Python client\nrepo</a></p>\n<div>\n<div>Each Google Maps Web Service requires an API key or Client ID. API\nkeys are</div>\n<div>freely available with a Google Account at\n<a href=\"https://developers.google.com/console\" rel=\"nofollow\">https://developers.google.com/console</a>.</div>\n<div>To generate a server key for your project:</div>\n</div>\n<ol>\n<li>Visit <a href=\"https://developers.google.com/console\" rel=\"nofollow\">https://developers.google.com/console</a> and log in with\na Google Account.</li>\n<li>Select an existing project, or create a new project.</li>\n<li>Click <strong>Enable an API</strong>.</li>\n<li>Browse for the API, and set its status to \u201cOn\u201d. The Python Client for\nGoogle Maps Services\naccesses the following APIs:<ul>\n<li>Directions API</li>\n<li>Distance Matrix API</li>\n<li>Elevation API</li>\n<li>Geocoding API</li>\n<li>Time Zone API</li>\n<li>Roads API</li>\n</ul>\n</li>\n<li>Once you\u2019ve enabled the APIs, click <strong>Credentials</strong> from the left\nnavigation of the Developer\nConsole.</li>\n<li>In the \u201cPublic API access\u201d, click <strong>Create new Key</strong>.</li>\n<li>Choose <strong>Server Key</strong>.</li>\n<li>If you\u2019d like to restrict requests to a specific IP address, do so\nnow.</li>\n<li>Click <strong>Create</strong>.</li>\n</ol>\n<p>Your API key should be 40 characters long, and begin with <tt>AIza</tt>.</p>\n</div>\n<div id=\"create-the-configuration-file\">\n<h3>Create the configuration file</h3>\n<p>Then you will need to create a <tt>config.yml</tt> file, or just any <tt>yaml</tt>\nfile with the following key fields</p>\n<pre><span class=\"nt\">api_key</span><span class=\"p\">:</span>    <span class=\"c1\"># your Google API key over here</span>\n<span class=\"nt\">places</span><span class=\"p\">:</span>     <span class=\"c1\"># all the places which need to be tracked</span>\n<span class=\"nt\">map</span><span class=\"p\">:</span>        <span class=\"c1\"># the map, or essentially how you commute between any two places</span>\n</pre>\n<div id=\"sample-configuration\">\n<h4>Sample configuration</h4>\n<pre><span class=\"nt\">api_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">AIzaaaaaaaaaaaaaaaaaaaaaaaaaaa</span>\n\n<span class=\"nt\">places</span><span class=\"p\">:</span>\n    <span class=\"nt\">HOME</span><span class=\"p\">:</span>\n        <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">742, Evergreen Terrace, Springfield</span>\n        <span class=\"nt\">alias</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Home</span>\n    <span class=\"nt\">WORK</span><span class=\"p\">:</span>\n        <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Springfield Nuclear Power Plant, Springfield</span>\n        <span class=\"nt\">alias</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Work</span>\n    <span class=\"nt\">KWIK_E_MART</span><span class=\"p\">:</span>\n        <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Kwik-e-Mart, Springfield</span>\n        <span class=\"nt\">alias</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Apu's</span>\n    <span class=\"nt\">MOES_TAVERN</span><span class=\"p\">:</span>\n        <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Moe's Tavern, Springfield</span>\n        <span class=\"nt\">alias</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Moe's</span>\n\n<span class=\"nt\">map</span><span class=\"p\">:</span>\n    <span class=\"nt\">HOME</span><span class=\"p\">:</span>\n        <span class=\"nt\">KWIK_E_MART</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n        <span class=\"nt\">MOES_TAVERN</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">walking</span>\n        <span class=\"nt\">WORK</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">transit</span>\n              <span class=\"nt\">transit_mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">bus</span>\n    <span class=\"nt\">KWIK_E_MART</span><span class=\"p\">:</span>\n        <span class=\"nt\">HOME</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n        <span class=\"nt\">MOES_TAVERN</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">walking</span>\n        <span class=\"nt\">WORK</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n    <span class=\"nt\">MOES_TAVERN</span><span class=\"p\">:</span>\n        <span class=\"nt\">HOME</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>  <span class=\"c1\"># drinking and driving is not encouraged</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">walking</span>\n        <span class=\"c1\"># You don't go to Kwik-e-mart or to work from Moe's</span>\n    <span class=\"nt\">WORK</span><span class=\"p\">:</span>\n        <span class=\"nt\">MOES_TAVERN</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n</pre>\n</div>\n<div id=\"parts-of-the-configuration-file\">\n<h4>Parts of the configuration file</h4>\n<div id=\"api-key\">\n<h5>api_key</h5>\n<p><tt>api_key</tt> will hold the information about the Google Developer\u2019s API\nkey.</p>\n</div>\n<div id=\"places\">\n<h5>places</h5>\n<div>\n<div><tt>places</tt> holds information about all the places to be taken under</div>\n<div>consideration, and a small description about their physical address</div>\n<div>add how to refer to them in the output</div>\n</div>\n<div>\n<div>Each place has two attributes</div>\n<div>\n<div>- location: the physical location of the place (the thing you type\ninto Google Maps).</div>\n<div>- alias: an alias to refer by and to use while printing the output.</div>\n</div>\n</div>\n</div>\n<div id=\"map\">\n<h5>map</h5>\n<div>\n<div><tt>map</tt> key contains all the connections between the places, possible</div>\n<div>ways to travel between the places and multiple ways, if any</div>\n<div>It can also contain other detailed information about the specific way\nof travel.</div>\n</div>\n<p>The first nesting under map contains the source, use the identifier from\nthe places key above.</p>\n<pre><span class=\"nt\">map</span><span class=\"p\">:</span>\n    <span class=\"nt\">PLACE1</span><span class=\"p\">:</span>\n        <span class=\"nt\">PLACE2</span><span class=\"p\">:</span>\n            <span class=\"l-Scalar-Plain\">....</span>\n        <span class=\"l-Scalar-Plain\">....</span>\n    <span class=\"l-Scalar-Plain\">....</span>\n</pre>\n<p>The next nesting contains a map of possible destinations from the\nsource, which contains the possible ways to travel from the source to\nthe destination</p>\n<pre><span class=\"nt\">map</span><span class=\"p\">:</span>\n    <span class=\"nt\">PLACE1</span><span class=\"p\">:</span>\n        <span class=\"nt\">PLACE2</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">driving</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">mode</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">transit</span>\n            <span class=\"l-Scalar-Plain\">....</span>\n        <span class=\"l-Scalar-Plain\">....</span>\n    <span class=\"l-Scalar-Plain\">....</span>\n</pre>\n<p>The routing information supports all the arguments that the Google Maps\npython client takes. For more information refer to <a href=\"https://googlemaps.github.io/google-maps-services-python/docs/2.4.3/#module-googlemaps\" rel=\"nofollow\">Google Maps Python\nAPI\ndocumentation</a></p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>$ commute -c config.yml -s HOME -d WORK\n$ commute -c config.yml -s HOME -d WORK -w now\n$ commute -c config.yml -s HOME -d WORK -w <span class=\"s1\">'in an hour'</span>\n$ commute -c config.yml -s HOME -d WORK -w <span class=\"s1\">'friday evening @ 7'</span>\n</pre>\n<div>\n<div>The date/time parsing is done with the help of\n<a href=\"https://github.com/bear/parsedatetime\" rel=\"nofollow\">parsedatetime</a> library, so\nlook at the</div>\n<div>\n<div>documentation to find more about the formats supported.</div>\n</div>\n</div>\n<p>For using it as a library,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">commute</span> <span class=\"kn\">import</span> <span class=\"n\">get_all_paths</span><span class=\"p\">,</span> <span class=\"n\">format_path</span>\n\n<span class=\"n\">config_file</span> <span class=\"o\">=</span> <span class=\"s2\">\"/path/to/config/file\"</span>\n<span class=\"n\">src</span> <span class=\"o\">=</span> <span class=\"s2\">\"HOME\"</span>\n<span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"s2\">\"WORK\"</span>\n<span class=\"n\">when</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">rank</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">get_all_paths</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">when</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">format_path</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p>This project is at a very early stage right now. Please try it out and\nreport any issues.</p>\n</div>\n\n          </div>"}, "last_serial": 2138769, "releases": {"0.1": [], "0.2": []}, "urls": [], "timestamp": "Fri May  8 00:44:19 2020"}