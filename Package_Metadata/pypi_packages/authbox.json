{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Software\n\nFor the basic walkthrough of how this code works, see https://google.github.io/makerspace-auth/client/Walkthrough.html\n\nPrerequisites:\n\n1. Python 2.7 or 3.6+\n1. `evdev` (python-evdev on Debian)\n1. `RPi` module (or `pip install fake-rpi` for testing)\n1. Make sure you're in the 'input' group to use evdev\n1. Make sure you're in the gpio group if you're on a Pi\n\nDeveloping:\n\n1. The easiest way is to run `make setup` and then `. .venv/bin/activate`.\n1. You can also run the tests with tox, using `tox -p all`\n1. The code is formatted with isort+black, run `make lint` and/or `make format`\n   before sending pull requests.\n\n\n## Protocol\n\nWhile using a server is optional (you can do everything with shell scripts), we\nuse a simple HTTP-based protocol that's intended to be easy to adapt to existing\nsystems. See https://google.github.io/makerspace-auth/server/Protocol.html\n\n\n## QA example\n\nThis simply flashes a light when its button is pressed.  We use this to run QA\non authboards once assembled, and is a very simple example of how the event loop\nworks.\n\n\n## Two-button example\n\nWe determined two buttons (\"on\" and \"off\", basically) to be the minimum viable\ncontrols, and this is the version that we use at Google.  If you're looking for\na good jumping-off point, start here.\n\nThe basic workflow is:\n\n1. Scan badge\n1. Press \"on\".  Tool will power up.\n1. Warning timer commences beeps.  If you press \"on\" again, you get more time.\n1. Otherwise, tool powers off.\n\nYou should copy (or symlink) this file to ~/.authboxrc and make edits to conform\nto your pin numbers.  The defaults are for an RDR-6081AKU (keystroking) and\npi-hat-1 v1.0 hardware triggering both onbarod relays to enable devices.\n\nThis example out of the box stores authorized users in a local file\n(See `sample_auth_check.sh`) but you likely want it to query your existing\nuser/training database.  If you'd like to use the same protocol, that's\ndocumented at\nhttps://google.github.io/makerspace-auth/server/Protocol.html and if you use\ncurl, remember the '-f'.\n\n## Starting on boot\n\nThe simplest way that works on all distros is a cron job:\n\n    # Visually\n    pi$ crontab -e\n    (add the following line at the end, save, and apply)\n    @reboot cd /path/to/software; python two_button.py\n\n    # Through script\n    pi$ (crontab -l; echo \"@reboot cd /path/to/software; python two_button.py\") | crontab -\n\nIf your distro uses systemd, you can also make a systemd unit that runs it.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/google/makerspace-auth", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "authbox", "package_url": "https://pypi.org/project/authbox/", "platform": "linux", "project_url": "https://pypi.org/project/authbox/", "project_urls": {"Homepage": "https://github.com/google/makerspace-auth"}, "release_url": "https://pypi.org/project/authbox/1.0.0/", "requires_dist": null, "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5", "summary": "A framework for makerspace tool/door authz/authn", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Software</h1>\n<p>For the basic walkthrough of how this code works, see <a href=\"https://google.github.io/makerspace-auth/client/Walkthrough.html\" rel=\"nofollow\">https://google.github.io/makerspace-auth/client/Walkthrough.html</a></p>\n<p>Prerequisites:</p>\n<ol>\n<li>Python 2.7 or 3.6+</li>\n<li><code>evdev</code> (python-evdev on Debian)</li>\n<li><code>RPi</code> module (or <code>pip install fake-rpi</code> for testing)</li>\n<li>Make sure you're in the 'input' group to use evdev</li>\n<li>Make sure you're in the gpio group if you're on a Pi</li>\n</ol>\n<p>Developing:</p>\n<ol>\n<li>The easiest way is to run <code>make setup</code> and then <code>. .venv/bin/activate</code>.</li>\n<li>You can also run the tests with tox, using <code>tox -p all</code></li>\n<li>The code is formatted with isort+black, run <code>make lint</code> and/or <code>make format</code>\nbefore sending pull requests.</li>\n</ol>\n<h2>Protocol</h2>\n<p>While using a server is optional (you can do everything with shell scripts), we\nuse a simple HTTP-based protocol that's intended to be easy to adapt to existing\nsystems. See <a href=\"https://google.github.io/makerspace-auth/server/Protocol.html\" rel=\"nofollow\">https://google.github.io/makerspace-auth/server/Protocol.html</a></p>\n<h2>QA example</h2>\n<p>This simply flashes a light when its button is pressed.  We use this to run QA\non authboards once assembled, and is a very simple example of how the event loop\nworks.</p>\n<h2>Two-button example</h2>\n<p>We determined two buttons (\"on\" and \"off\", basically) to be the minimum viable\ncontrols, and this is the version that we use at Google.  If you're looking for\na good jumping-off point, start here.</p>\n<p>The basic workflow is:</p>\n<ol>\n<li>Scan badge</li>\n<li>Press \"on\".  Tool will power up.</li>\n<li>Warning timer commences beeps.  If you press \"on\" again, you get more time.</li>\n<li>Otherwise, tool powers off.</li>\n</ol>\n<p>You should copy (or symlink) this file to ~/.authboxrc and make edits to conform\nto your pin numbers.  The defaults are for an RDR-6081AKU (keystroking) and\npi-hat-1 v1.0 hardware triggering both onbarod relays to enable devices.</p>\n<p>This example out of the box stores authorized users in a local file\n(See <code>sample_auth_check.sh</code>) but you likely want it to query your existing\nuser/training database.  If you'd like to use the same protocol, that's\ndocumented at\n<a href=\"https://google.github.io/makerspace-auth/server/Protocol.html\" rel=\"nofollow\">https://google.github.io/makerspace-auth/server/Protocol.html</a> and if you use\ncurl, remember the '-f'.</p>\n<h2>Starting on boot</h2>\n<p>The simplest way that works on all distros is a cron job:</p>\n<pre><code># Visually\npi$ crontab -e\n(add the following line at the end, save, and apply)\n@reboot cd /path/to/software; python two_button.py\n\n# Through script\npi$ (crontab -l; echo \"@reboot cd /path/to/software; python two_button.py\") | crontab -\n</code></pre>\n<p>If your distro uses systemd, you can also make a systemd unit that runs it.</p>\n\n          </div>"}, "last_serial": 6178873, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3c14269d802bce2b4c1147551e32655f", "sha256": "7f4bece15f09e46e725862981fe7a14c2d31bbfa17690eee04d19a162c59f9b4"}, "downloads": -1, "filename": "authbox-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c14269d802bce2b4c1147551e32655f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5", "size": 24835, "upload_time": "2019-11-22T02:10:10", "upload_time_iso_8601": "2019-11-22T02:10:10.455011Z", "url": "https://files.pythonhosted.org/packages/29/72/26853ea106a65f8b2e10b39444bffa872a04b770f4aaafccf0def12e67f2/authbox-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9efb18426329ef0424b4977ee9be54b9", "sha256": "53cea7f39c2f28440e6d132ec98056b35424f496b6d5ba98b05f65118555e10a"}, "downloads": -1, "filename": "authbox-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9efb18426329ef0424b4977ee9be54b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5", "size": 28486, "upload_time": "2019-11-22T02:10:12", "upload_time_iso_8601": "2019-11-22T02:10:12.827499Z", "url": "https://files.pythonhosted.org/packages/5d/89/38fcd09b8659aec1fdaefe45cc12aa95170c67f38bd05670f6662438eada/authbox-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c14269d802bce2b4c1147551e32655f", "sha256": "7f4bece15f09e46e725862981fe7a14c2d31bbfa17690eee04d19a162c59f9b4"}, "downloads": -1, "filename": "authbox-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c14269d802bce2b4c1147551e32655f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5", "size": 24835, "upload_time": "2019-11-22T02:10:10", "upload_time_iso_8601": "2019-11-22T02:10:10.455011Z", "url": "https://files.pythonhosted.org/packages/29/72/26853ea106a65f8b2e10b39444bffa872a04b770f4aaafccf0def12e67f2/authbox-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9efb18426329ef0424b4977ee9be54b9", "sha256": "53cea7f39c2f28440e6d132ec98056b35424f496b6d5ba98b05f65118555e10a"}, "downloads": -1, "filename": "authbox-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9efb18426329ef0424b4977ee9be54b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,!=3.4,!=3.5", "size": 28486, "upload_time": "2019-11-22T02:10:12", "upload_time_iso_8601": "2019-11-22T02:10:12.827499Z", "url": "https://files.pythonhosted.org/packages/5d/89/38fcd09b8659aec1fdaefe45cc12aa95170c67f38bd05670f6662438eada/authbox-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:23 2020"}