{"info": {"author": "Peter Kruczkiewicz", "author_email": "peter.kruczkiewicz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=====================\nVCF Consensus Builder\n=====================\n\n\n.. image:: https://img.shields.io/pypi/v/vcf_consensus_builder.svg\n        :target: https://pypi.python.org/pypi/vcf_consensus_builder\n\n.. image:: https://img.shields.io/travis/peterk87/vcf_consensus_builder.svg\n        :target: https://travis-ci.org/peterk87/vcf_consensus_builder\n\n.. image:: https://readthedocs.org/projects/vcf-consensus-builder/badge/?version=latest\n        :target: https://vcf-consensus-builder.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nBuild a consensus sequence from a VCF and reference sequence masking low and no coverage positions.\n\nYou *could* use ``bcftools consensus`` but then you would need to apply the low and no coverage position masking *after* ``bcftools`` has generated the consensus, which may be tricky.\n\n\n* Free software: MIT license\n* Documentation: https://vcf-consensus-builder.readthedocs.io.\n\n\nFeatures\n--------\n\n* Masks low and no coverage positions in the reference (default: 0X and <5X) with ``N`` and ``-`` by default\n* No need to ``bgzip`` the VCF file or index it like ``bcftools consensus`` requires.\n*\n\nUsage\n-----\n\n\nInstall\n~~~~~~~\n\nInstall with ``pip`` from PyPI with\n\n.. code-block::\n\n    pip install vcf_consensus_builder\n\n\nShow Help\n~~~~~~~~~\n\nHelp message:\n\n.. code-block::\n\n    $ vcf_consensus_builder --help\n    Usage: vcf_consensus_builder [OPTIONS]\n\n      Build a consensus sequence from a VCF and ref sequence masking low and no\n      coverage positions.\n\n    Options:\n      -v, --vcf-file PATH      VCF file path (v4)  [required]\n      -d, --depths-file PATH   samtools depth output file (no headers)  [required]\n      -r, --ref-fasta PATH     Reference sequence FASTA file (single sequence\n                               entry only!)  [required]\n      -o, --output-fasta TEXT  Output consensus sequence FASTA file path (default\n                               write to stdout)\n      --low-coverage INTEGER   Low coverage threshold; replace positions with less\n                               than this depth with \"N\" by default\n      --no-coverage INTEGER    No coverage threshold; replace positions with less\n                               than or equal this depth with \"-\" by default\n      --low-cov-char TEXT      Low coverage character (\"N\" by default)\n      --no-cov-char TEXT       No coverage character (\"-\" by default)\n      --sample-name TEXT       Optional sample name for output fasta header ID\n      --help                   Show this message and exit.\n\n\nBasic usage\n~~~~~~~~~~~\n\nRun on the test data including in the repo\n\n.. code-block::\n\n    # Clone this repo and enter it\n    $ git clone https://github.com/peterk87/vcf_consensus_builder.git --depth=1\n    $ cd vcf_consensus_builder/\n    # run vcf_consensus_builder on test data\n    $ vcf_consensus_builder -v tests/data/test.vcf \\\n        -d tests/data/test-depths.tsv \\\n        -r tests/data/ref.fa\n    # produces the following to stdout\n    >sample1 ref=\"ref ref\"\n    NACCGTANACAATAN--\n\n\nMasking of no and low coverage positions in reference sequence\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``vcf_consensus_builder`` first masks no and low coverage positions in the reference sequence file and then applies the ``ALT`` variants in the VCF.\n\n**NOTE:** ``vcf_consensus_builder`` does not perform any VCF variant filtering. It is assumed that the VCF input file contains only variants you wish to see in your consensus sequence. Please use ``bcftools filter`` with appropriate filtering/exclusion expressions to get the variants you wish to see represented in your consensus (see https://samtools.github.io/bcftools/howtos/filtering.html for more info about how to filter your VCF file)\n\nGiven this reference sequence\n\n.. code-block::\n\n    >ref\n    NGCCAAGTCTNCGACATN-\n\nAnd this  ``samtools depth`` output\n\n.. code-block::\n\n    sample1\tref\t1\t4\n    sample1\tref\t2\t9\n    sample1\tref\t3\t9\n    sample1\tref\t4\t9\n    sample1\tref\t5\t9\n    sample1\tref\t6\t9\n    sample1\tref\t7\t10\n    sample1\tref\t8\t10\n    sample1\tref\t9\t10\n    sample1\tref\t10\t10\n    sample1\tref\t11\t3\n    sample1\tref\t12\t9\n    sample1\tref\t13\t9\n    sample1\tref\t14\t9\n    sample1\tref\t15\t9\n    sample1\tref\t16\t9\n    sample1\tref\t17\t5\n    sample1\tref\t18\t4\n    sample1\tref\t19\t0\n    sample1\tref\t20\t0\n\nThe low (below 5X) and no (0X) coverage positions in the reference sequence will be replaced with ``N`` and ``-``, respectively.\n\nThe masked reference sequence will be:\n\n.. code-block::\n\n    >ref\n    NGCCAAGTCTNCGACATN-\n\nThis masked sequence will be used for generating the consensus sequence.\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-12-24)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peterk87/vcf_consensus_builder", "keywords": "vcf_consensus_builder", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "vcf-consensus-builder", "package_url": "https://pypi.org/project/vcf-consensus-builder/", "platform": "", "project_url": "https://pypi.org/project/vcf-consensus-builder/", "project_urls": {"Homepage": "https://github.com/peterk87/vcf_consensus_builder"}, "release_url": "https://pypi.org/project/vcf-consensus-builder/0.1.0/", "requires_dist": ["Click (>=7.0)", "attrs", "pandas (>=0.25.0)", "biopython (>=1.73)", "numpy"], "requires_python": ">=3.5", "summary": "Build a consensus sequence from a VCF and ref sequence masking low and no coverage positions.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"vcf-consensus-builder\">\n<h2>VCF Consensus Builder</h2>\n<a href=\"https://pypi.python.org/pypi/vcf_consensus_builder\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/vcf_consensus_builder.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f136f5abd47edc6060a0d81f5c3ecaa3a1ba5dde/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7663665f636f6e73656e7375735f6275696c6465722e737667\"></a>\n<a href=\"https://travis-ci.org/peterk87/vcf_consensus_builder\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/peterk87/vcf_consensus_builder.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5d7d58a967bec1ecc51bbd0c7eeb2c9bcf54bfa/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f70657465726b38372f7663665f636f6e73656e7375735f6275696c6465722e737667\"></a>\n<a href=\"https://vcf-consensus-builder.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6e982537fc9f5600300bceb59fdf92d27d824bc/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7663662d636f6e73656e7375732d6275696c6465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Build a consensus sequence from a VCF and reference sequence masking low and no coverage positions.</p>\n<p>You <em>could</em> use <tt>bcftools consensus</tt> but then you would need to apply the low and no coverage position masking <em>after</em> <tt>bcftools</tt> has generated the consensus, which may be tricky.</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://vcf-consensus-builder.readthedocs.io\" rel=\"nofollow\">https://vcf-consensus-builder.readthedocs.io</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Masks low and no coverage positions in the reference (default: 0X and &lt;5X) with <tt>N</tt> and <tt>-</tt> by default</li>\n<li>No need to <tt>bgzip</tt> the VCF file or index it like <tt>bcftools consensus</tt> requires.</li>\n<li>\n</ul>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"install\">\n<h4>Install</h4>\n<p>Install with <tt>pip</tt> from PyPI with</p>\n<pre>pip install vcf_consensus_builder\n</pre>\n</div>\n<div id=\"show-help\">\n<h4>Show Help</h4>\n<p>Help message:</p>\n<pre>$ vcf_consensus_builder --help\nUsage: vcf_consensus_builder [OPTIONS]\n\n  Build a consensus sequence from a VCF and ref sequence masking low and no\n  coverage positions.\n\nOptions:\n  -v, --vcf-file PATH      VCF file path (v4)  [required]\n  -d, --depths-file PATH   samtools depth output file (no headers)  [required]\n  -r, --ref-fasta PATH     Reference sequence FASTA file (single sequence\n                           entry only!)  [required]\n  -o, --output-fasta TEXT  Output consensus sequence FASTA file path (default\n                           write to stdout)\n  --low-coverage INTEGER   Low coverage threshold; replace positions with less\n                           than this depth with \"N\" by default\n  --no-coverage INTEGER    No coverage threshold; replace positions with less\n                           than or equal this depth with \"-\" by default\n  --low-cov-char TEXT      Low coverage character (\"N\" by default)\n  --no-cov-char TEXT       No coverage character (\"-\" by default)\n  --sample-name TEXT       Optional sample name for output fasta header ID\n  --help                   Show this message and exit.\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h4>Basic usage</h4>\n<p>Run on the test data including in the repo</p>\n<pre># Clone this repo and enter it\n$ git clone https://github.com/peterk87/vcf_consensus_builder.git --depth=1\n$ cd vcf_consensus_builder/\n# run vcf_consensus_builder on test data\n$ vcf_consensus_builder -v tests/data/test.vcf \\\n    -d tests/data/test-depths.tsv \\\n    -r tests/data/ref.fa\n# produces the following to stdout\n&gt;sample1 ref=\"ref ref\"\nNACCGTANACAATAN--\n</pre>\n</div>\n<div id=\"masking-of-no-and-low-coverage-positions-in-reference-sequence\">\n<h4>Masking of no and low coverage positions in reference sequence</h4>\n<p><tt>vcf_consensus_builder</tt> first masks no and low coverage positions in the reference sequence file and then applies the <tt>ALT</tt> variants in the VCF.</p>\n<p><strong>NOTE:</strong> <tt>vcf_consensus_builder</tt> does not perform any VCF variant filtering. It is assumed that the VCF input file contains only variants you wish to see in your consensus sequence. Please use <tt>bcftools filter</tt> with appropriate filtering/exclusion expressions to get the variants you wish to see represented in your consensus (see <a href=\"https://samtools.github.io/bcftools/howtos/filtering.html\" rel=\"nofollow\">https://samtools.github.io/bcftools/howtos/filtering.html</a> for more info about how to filter your VCF file)</p>\n<p>Given this reference sequence</p>\n<pre>&gt;ref\nNGCCAAGTCTNCGACATN-\n</pre>\n<p>And this  <tt>samtools depth</tt> output</p>\n<pre>sample1     ref     1       4\nsample1     ref     2       9\nsample1     ref     3       9\nsample1     ref     4       9\nsample1     ref     5       9\nsample1     ref     6       9\nsample1     ref     7       10\nsample1     ref     8       10\nsample1     ref     9       10\nsample1     ref     10      10\nsample1     ref     11      3\nsample1     ref     12      9\nsample1     ref     13      9\nsample1     ref     14      9\nsample1     ref     15      9\nsample1     ref     16      9\nsample1     ref     17      5\nsample1     ref     18      4\nsample1     ref     19      0\nsample1     ref     20      0\n</pre>\n<p>The low (below 5X) and no (0X) coverage positions in the reference sequence will be replaced with <tt>N</tt> and <tt>-</tt>, respectively.</p>\n<p>The masked reference sequence will be:</p>\n<pre>&gt;ref\nNGCCAAGTCTNCGACATN-\n</pre>\n<p>This masked sequence will be used for generating the consensus sequence.</p>\n</div>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2019-12-24)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6392608, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b1d31213b89ba505f6cee0c4ce0155f1", "sha256": "b08a6c8a3fbf06c86c90d2d1d02f0b3d0796ead05246d59af85189901e592889"}, "downloads": -1, "filename": "vcf_consensus_builder-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1d31213b89ba505f6cee0c4ce0155f1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8796, "upload_time": "2020-01-03T20:38:07", "upload_time_iso_8601": "2020-01-03T20:38:07.034780Z", "url": "https://files.pythonhosted.org/packages/bc/48/4839aa0c82e978fa808f68c65ebe519e8185e52b7ac7083a6cf465908839/vcf_consensus_builder-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "651c3fec0d2af91358a3dacb447a7a97", "sha256": "fab9f8d97991737e6d72242c0f3960f0cd9ed0f704bcdd1ec1ca75fc447d917f"}, "downloads": -1, "filename": "vcf_consensus_builder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "651c3fec0d2af91358a3dacb447a7a97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17278, "upload_time": "2020-01-03T20:38:09", "upload_time_iso_8601": "2020-01-03T20:38:09.567138Z", "url": "https://files.pythonhosted.org/packages/3f/d1/30a4e0609731024ab0863cf94161702fc898c8267f36947d3662dcce557e/vcf_consensus_builder-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1d31213b89ba505f6cee0c4ce0155f1", "sha256": "b08a6c8a3fbf06c86c90d2d1d02f0b3d0796ead05246d59af85189901e592889"}, "downloads": -1, "filename": "vcf_consensus_builder-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1d31213b89ba505f6cee0c4ce0155f1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8796, "upload_time": "2020-01-03T20:38:07", "upload_time_iso_8601": "2020-01-03T20:38:07.034780Z", "url": "https://files.pythonhosted.org/packages/bc/48/4839aa0c82e978fa808f68c65ebe519e8185e52b7ac7083a6cf465908839/vcf_consensus_builder-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "651c3fec0d2af91358a3dacb447a7a97", "sha256": "fab9f8d97991737e6d72242c0f3960f0cd9ed0f704bcdd1ec1ca75fc447d917f"}, "downloads": -1, "filename": "vcf_consensus_builder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "651c3fec0d2af91358a3dacb447a7a97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17278, "upload_time": "2020-01-03T20:38:09", "upload_time_iso_8601": "2020-01-03T20:38:09.567138Z", "url": "https://files.pythonhosted.org/packages/3f/d1/30a4e0609731024ab0863cf94161702fc898c8267f36947d3662dcce557e/vcf_consensus_builder-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:30 2020"}