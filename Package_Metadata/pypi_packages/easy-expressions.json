{"info": {"author": "Rich Jones", "author_email": "rich@openwatch.net", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": ".. figure:: http://i.imgur.com/N7uilEZ.png\n   :alt: Easy does it!\n\n   Easy does it!\n\neasy-expressions |Build Status|\n===============================\n\nThe world's most gangsta regular expressions library.\n\nIt turns this..\n\n.. code:: python\n\n\n    regex = re.compile(r'(?:(?:\\$){1,1})(?:(?:(?:\\d)){1,})(?:(?:\\.){1,1})(?:\\d)(?:\\d)')\n\ninto this!\n\n.. code:: python\n\n    from easy_expressions import Easy\n\n    easy = Easy() / \n      .find(\"$\") /\n      .min(1).digits() /\n      .then(\".\") /\n      .digit() /\n      .digit()\n\n    regex = easy.getRegex()\n    regex.findall(\"$10.00\");\n\nAbout\n-----\n\n*easy-expressions* is a python regular expressions library with a\n`Python for\nHumans <https://speakerdeck.com/kennethreitz/python-for-humans>`__\nphilosophy. Rather than having to remember the complex regular\nexpressions syntax, *easy-expressions* allows you to write complicated\nregular expressions in natural English, so you'll get your pattern\nmatches right the first time without any headache.\n\nInstallation\n------------\n\n::\n\n    pip install easy-expressions\n\nExamples\n--------\n\nSearching for dollar amounts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from easy_expressions import Easy\n\n    easy = Easy() / \n      .find(\"$\") /\n      .min(1).digits() /\n      .then(\".\") /\n      .digit() /\n      .digit()\n\n    regex.test(\"$10.00\"); # True\n    regex.test(\"$XX.YZ\"); # False\n\nSearching for Credit Cards\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\n    easy = Easy() \\\n            .startOfLine() \\\n            .exactly(4).digits() \\\n            .then('-') \\\n            .exactly(4).digits() \\\n            .then('-') \\\n            .exactly(4).digits() \\\n            .then('-') \\\n            .exactly(4).digits()\n\n    input_s = \"Hey Joe! The credit card number for the invoice is 4444-5555-6666-7777. Thanks!\"\n    easy.test(input_s) # True\n\n    input_s = \"Hey Joe! The credit card number for the invoice is 1-2-3-4. Thanks!\"\n    easy.test(input_s) # False\n\nInspiration\n-----------\n\nRegexes are hard when they should be easy.\n\nI had this idea while watching Straight Outta Compton. Turns out\n[@thebinarysearchtree](https://github.com/thebinarysearchtree/) had\nalready `implemented it in\nJS <https://github.com/thebinarysearchtree/regexpbuilderjs>`__, so this\nis essentially a port of that.\n\nContributing\n------------\n\nThis software is still quite young and I'm certain there are still bugs\nin it. If you find bugs or want new features included, please create a\nnew Issue and send a pull request, along with an accompanying test.\nThanks!\n\nOther Easy Projects\n-------------------\n\nIf you like easy things, you may also enjoy:\n\n-  `django-easy-api <https://github.com/Miserlou/django-easy-api>`__\n-  `django-easy-split <https://github.com/Miserlou/django-easy-split>`__\n-  `django-easy-timezones <https://github.com/Miserlou/django-easy-timezones>`__\n-  `django-knockout-modeler <https://github.com/Miserlou/django-knockout-modeler>`__\n-  `simpleaws <https://github.com/Miserlou/simpleaws>`__\n\nLicense\n-------\n\nMIT, 2015.\n\n.. |Build Status| image:: https://travis-ci.org/Miserlou/easy-expressions.svg\n   :target: https://travis-ci.org/Miserlou/easy-expressions", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Miserlou/easy-expressions", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "easy-expressions", "package_url": "https://pypi.org/project/easy-expressions/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/easy-expressions/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Miserlou/easy-expressions"}, "release_url": "https://pypi.org/project/easy-expressions/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Really, really easy regular expressions for python.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"Easy does it!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/730acb8201d5ca7ce1871f0a56b85de5dbd4429b/687474703a2f2f692e696d6775722e636f6d2f4e3775696c455a2e706e67\">\n<p>Easy does it!</p>\n</div>\n<div id=\"easy-expressions-build-status\">\n<h2>easy-expressions <a href=\"https://travis-ci.org/Miserlou/easy-expressions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d633583f4114d7cd75f718da14a4b0b49cd16048/68747470733a2f2f7472617669732d63692e6f72672f4d697365726c6f752f656173792d65787072657373696f6e732e737667\"></a></h2>\n<p>The world\u2019s most gangsta regular expressions library.</p>\n<p>It turns this..</p>\n<pre><span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(?:(?:\\$){1,1})(?:(?:(?:\\d)){1,})(?:(?:\\.){1,1})(?:\\d)(?:\\d)'</span><span class=\"p\">)</span>\n</pre>\n<p>into this!</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Easy</span>\n\n<span class=\"n\">easy</span> <span class=\"o\">=</span> <span class=\"n\">Easy</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"$\"</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">digit</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">digit</span><span class=\"p\">()</span>\n\n<span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">easy</span><span class=\"o\">.</span><span class=\"n\">getRegex</span><span class=\"p\">()</span>\n<span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"s2\">\"$10.00\"</span><span class=\"p\">);</span>\n</pre>\n<div id=\"about\">\n<h3>About</h3>\n<p><em>easy-expressions</em> is a python regular expressions library with a\n<a href=\"https://speakerdeck.com/kennethreitz/python-for-humans\" rel=\"nofollow\">Python for\nHumans</a>\nphilosophy. Rather than having to remember the complex regular\nexpressions syntax, <em>easy-expressions</em> allows you to write complicated\nregular expressions in natural English, so you\u2019ll get your pattern\nmatches right the first time without any headache.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install easy-expressions\n</pre>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"searching-for-dollar-amounts\">\n<h4>Searching for dollar amounts</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easy_expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Easy</span>\n\n<span class=\"n\">easy</span> <span class=\"o\">=</span> <span class=\"n\">Easy</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">\"$\"</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"s2\">\".\"</span><span class=\"p\">)</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">digit</span><span class=\"p\">()</span> <span class=\"o\">/</span>\n  <span class=\"o\">.</span><span class=\"n\">digit</span><span class=\"p\">()</span>\n\n<span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s2\">\"$10.00\"</span><span class=\"p\">);</span> <span class=\"c1\"># True</span>\n<span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s2\">\"$XX.YZ\"</span><span class=\"p\">);</span> <span class=\"c1\"># False</span>\n</pre>\n</div>\n<div id=\"searching-for-credit-cards\">\n<h4>Searching for Credit Cards</h4>\n<pre><span class=\"n\">easy</span> <span class=\"o\">=</span> <span class=\"n\">Easy</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">startOfLine</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">exactly</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">exactly</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">exactly</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">then</span><span class=\"p\">(</span><span class=\"s1\">'-'</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">exactly</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digits</span><span class=\"p\">()</span>\n\n<span class=\"n\">input_s</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hey Joe! The credit card number for the invoice is 4444-5555-6666-7777. Thanks!\"</span>\n<span class=\"n\">easy</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">input_s</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n\n<span class=\"n\">input_s</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hey Joe! The credit card number for the invoice is 1-2-3-4. Thanks!\"</span>\n<span class=\"n\">easy</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">input_s</span><span class=\"p\">)</span> <span class=\"c1\"># False</span>\n</pre>\n</div>\n</div>\n<div id=\"inspiration\">\n<h3>Inspiration</h3>\n<p>Regexes are hard when they should be easy.</p>\n<p>I had this idea while watching Straight Outta Compton. Turns out\n[@thebinarysearchtree](<a href=\"https://github.com/thebinarysearchtree/\" rel=\"nofollow\">https://github.com/thebinarysearchtree/</a>) had\nalready <a href=\"https://github.com/thebinarysearchtree/regexpbuilderjs\" rel=\"nofollow\">implemented it in\nJS</a>, so this\nis essentially a port of that.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>This software is still quite young and I\u2019m certain there are still bugs\nin it. If you find bugs or want new features included, please create a\nnew Issue and send a pull request, along with an accompanying test.\nThanks!</p>\n</div>\n<div id=\"other-easy-projects\">\n<h3>Other Easy Projects</h3>\n<p>If you like easy things, you may also enjoy:</p>\n<ul>\n<li><a href=\"https://github.com/Miserlou/django-easy-api\" rel=\"nofollow\">django-easy-api</a></li>\n<li><a href=\"https://github.com/Miserlou/django-easy-split\" rel=\"nofollow\">django-easy-split</a></li>\n<li><a href=\"https://github.com/Miserlou/django-easy-timezones\" rel=\"nofollow\">django-easy-timezones</a></li>\n<li><a href=\"https://github.com/Miserlou/django-knockout-modeler\" rel=\"nofollow\">django-knockout-modeler</a></li>\n<li><a href=\"https://github.com/Miserlou/simpleaws\" rel=\"nofollow\">simpleaws</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>MIT, 2015.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1791552, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3a05d08fdd813494899fcae12d20d390", "sha256": "76e761609374f6453f89d857fba5f04a0d9c60fae197edaf02d6802e297758a1"}, "downloads": -1, "filename": "easy-expressions-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3a05d08fdd813494899fcae12d20d390", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4116, "upload_time": "2015-08-25T04:56:28", "upload_time_iso_8601": "2015-08-25T04:56:28.318749Z", "url": "https://files.pythonhosted.org/packages/67/7b/492a6889539d075914eae0052c7af713fd2f699445bacb629e29037c33a5/easy-expressions-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "694ff75b897d1a168470a637b87bda67", "sha256": "daec75889a1a86314f7bd2d1f76a62ed075acc5692236a37c818d2df985c9913"}, "downloads": -1, "filename": "easy-expressions-0.1.1.tar.gz", "has_sig": false, "md5_digest": "694ff75b897d1a168470a637b87bda67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4919, "upload_time": "2015-10-29T09:05:32", "upload_time_iso_8601": "2015-10-29T09:05:32.991843Z", "url": "https://files.pythonhosted.org/packages/dc/4f/2c676b98841ad01c66c122b2d6048f5ff21354edeed6b94a6fbe9a9891d7/easy-expressions-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "694ff75b897d1a168470a637b87bda67", "sha256": "daec75889a1a86314f7bd2d1f76a62ed075acc5692236a37c818d2df985c9913"}, "downloads": -1, "filename": "easy-expressions-0.1.1.tar.gz", "has_sig": false, "md5_digest": "694ff75b897d1a168470a637b87bda67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4919, "upload_time": "2015-10-29T09:05:32", "upload_time_iso_8601": "2015-10-29T09:05:32.991843Z", "url": "https://files.pythonhosted.org/packages/dc/4f/2c676b98841ad01c66c122b2d6048f5ff21354edeed6b94a6fbe9a9891d7/easy-expressions-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:23 2020"}