{"info": {"author": "Matthew Westcott", "author_email": "matthew.westcott@torchbox.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Wagtail", "Framework :: Wagtail :: 1", "Framework :: Wagtail :: 2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: wagtail-experiments.png\n\nWagtail Experiments\n===================\n\n.. image:: https://api.travis-ci.org/torchbox/wagtail-experiments.svg?branch=master\n    :target: https://travis-ci.org/torchbox/wagtail-experiments\n\n**A/B testing for Wagtail**\n\nThis module supports the creation of A/B testing experiments within a Wagtail site. Several alternative versions of a page are set up, and on visiting a designated control page, a user is presented with one of those variations, selected at random (using a simplified version of the `PlanOut algorithm <https://facebook.github.io/planout/>`_). The number of visitors receiving each variation is logged, along with the number that subsequently go on to complete the experiment by visiting a designated goal page.\n\n\nInstallation\n------------\n\nwagtail-experiments is compatible with Wagtail 1.7 to 2.3, and Django 1.8 to 2.1. To install::\n\n    pip install wagtail-experiments\n\nand ensure that the apps ``wagtail.contrib.modeladmin`` and ``experiments`` are included in your project's ``INSTALLED_APPS``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'wagtail.contrib.modeladmin',\n        'experiments',\n        # ...\n    ]\n\n\nUsage\n-----\n\nAfter installation, a new 'Experiments' item is added to the Wagtail admin menu under Settings. This is available to superusers and any other users with add/edit permissions on experiments. An experiment is created by specifying a control page and any number of alternative versions of that page, along with an optional goal page. Initially the experiment is in the 'draft' status and does not take effect on the site front-end; to begin the experiment, change the status to 'live'.\n\nWhen the experiment is live, a user visiting the URL of the control page will be randomly assigned to a test group, to be served either the control page or one of the alternative variations. This assignment persists for the user's session (according to `Django's session configuration <https://docs.djangoproject.com/en/1.10/topics/http/sessions/#browser-length-sessions-vs-persistent-sessions>`_) so that each user receives the same variation each time. When a user subsequently visits the goal page, they are considered to have completed the experiment and a completion is logged against that user's test group. The completion rate over time for each test group can then be viewed through the admin interface, under 'View report'.\n\n.. image:: https://i.imgur.com/tG7JH13.png\n   :width: 728 px\n\n>From the report page, an administrator can select a winning variation; the experiment status is then changed to 'completed', and all visitors to the control page are served the chosen variation.\n\nTypically, the alternative versions of the page will be left unpublished, as this prevents them from appearing as duplicate copies of the control page in the site navigation. If an unpublished page is selected as an alternative, the page revision shown to users on the front-end will be the draft revision that existed at the moment the experiment status was set to 'live'. When displaying an alternative variation, the title and tree location are overridden to appear as the control page's title and location; this means that the title of the alternative page can be set to something descriptive, such as \"Signup page (blue text)\", without this text 'leaking' to site visitors.\n\n\nDirect URLs for goal completion\n-------------------------------\n\nIf you want goal completion to be linked to some action other than visiting a designated Wagtail page - for example, clicking a 'follow us on Twitter' link - you can set up a Javascript action that sends a request to a URL such as ``/experiments/complete/twitter-follow/`` , where ``twitter-follow`` is the experiment slug. To set this URL route up, add the following to your URLconf:\n\n.. code-block:: python\n\n    from experiments import views as experiment_views\n\n    urlpatterns = [\n        # ...\n\n        url(r'^experiments/complete/([^\\/]+)/$', experiment_views.record_completion),\n\n        # ...\n    ]\n\n\nAlternative backends\n--------------------\n\nwagtail-experiments supports pluggable backends for tracking participants and completions. The default backend, ``experiments.backends.db``, records these in a database table, aggregated by day. Alternative backends can be specified through the ``WAGTAIL_EXPERIMENTS_BACKEND`` setting:\n\n.. code-block:: python\n\n    WAGTAIL_EXPERIMENTS_BACKEND = 'mypackage.backends.thecloud'\n\nA backend is a Python module that provides the following functions:\n\n**record_participant(experiment, user_id, variation, request):**\n\nCalled when a user visits the control page for ``experiment``. ``user_id`` is the persistent user ID assigned to that visitor; ``variation`` is the Page object for the variation to be served; and ``request`` is the user's current request.\n\n**record_completion(experiment, user_id, variation, request):**\n\nCalled when a visitor completes the ``experiment``, either by visiting the goal page or triggering the ``record_completion``. ``user_id`` is the persistent user ID assigned to that visitor; ``variation`` is the Page object for the variation that was originally served to that user; and ``request`` is the user's current request.\n\n**get_report(experiment):**\n\nReturns report data for ``experiment``, consisting of a dict containing:\n\n``variations``\n  A list of records, one for each variation (including the control page). Each record is a dict containing:\n\n  ``variation_pk``\n    The primary key of the Page object\n\n  ``is_control``\n    A boolean indicating whether this is the control page\n\n  ``is_winner``\n    A boolean indicating whether this variation has been chosen as the winner\n\n  ``total_participant_count``\n    The number of visitors who have been assigned this variation\n\n  ``total_completion_count``\n    The number of visitors assigned this variation who have gone on to complete the experiment\n\n  ``history``\n    A list of dicts showing the breakdown of participants and completions over time; each dict contains ``date``, ``participant_count`` and ``completion_count``.\n\n\nTest data\n---------\n\nwagtail-experiments provides a management command ``experiment-data``, to allow populating an experiment with dummy data for testing or demonstration purposes, and purging existing data. This command is called with the experiment's slug::\n\n    # Populate the experiment 'homepage-banner' with 5 days of test data,\n    # with 100-200 views per variation. All parameters other than experiment slug\n    # are optional\n    ./manage.py experiment-data homepage-banner --days 5 --min=100 --max=200\n\n    # Purge data for the experiment 'homepage-banner'\n    ./manage.py experiment-data homepage-banner --purge\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/torchbox/wagtail-experiments", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "wagtail-experiments", "package_url": "https://pypi.org/project/wagtail-experiments/", "platform": "", "project_url": "https://pypi.org/project/wagtail-experiments/", "project_urls": {"Homepage": "https://github.com/torchbox/wagtail-experiments"}, "release_url": "https://pypi.org/project/wagtail-experiments/0.2/", "requires_dist": null, "requires_python": "", "summary": "A/B testing for Wagtail", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"wagtail-experiments.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfbb2158fe17eb465f68e4d0b38e6d380e5c4558/7761677461696c2d6578706572696d656e74732e706e67\">\n<div id=\"wagtail-experiments\">\n<h2>Wagtail Experiments</h2>\n<a href=\"https://travis-ci.org/torchbox/wagtail-experiments\" rel=\"nofollow\"><img alt=\"https://api.travis-ci.org/torchbox/wagtail-experiments.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2fa60f93ea6cd800def111a21bccad175e9ac28/68747470733a2f2f6170692e7472617669732d63692e6f72672f746f726368626f782f7761677461696c2d6578706572696d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<p><strong>A/B testing for Wagtail</strong></p>\n<p>This module supports the creation of A/B testing experiments within a Wagtail site. Several alternative versions of a page are set up, and on visiting a designated control page, a user is presented with one of those variations, selected at random (using a simplified version of the <a href=\"https://facebook.github.io/planout/\" rel=\"nofollow\">PlanOut algorithm</a>). The number of visitors receiving each variation is logged, along with the number that subsequently go on to complete the experiment by visiting a designated goal page.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>wagtail-experiments is compatible with Wagtail 1.7 to 2.3, and Django 1.8 to 2.1. To install:</p>\n<pre>pip install wagtail-experiments\n</pre>\n<p>and ensure that the apps <tt>wagtail.contrib.modeladmin</tt> and <tt>experiments</tt> are included in your project\u2019s <tt>INSTALLED_APPS</tt>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s1\">'wagtail.contrib.modeladmin'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'experiments'</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>After installation, a new \u2018Experiments\u2019 item is added to the Wagtail admin menu under Settings. This is available to superusers and any other users with add/edit permissions on experiments. An experiment is created by specifying a control page and any number of alternative versions of that page, along with an optional goal page. Initially the experiment is in the \u2018draft\u2019 status and does not take effect on the site front-end; to begin the experiment, change the status to \u2018live\u2019.</p>\n<p>When the experiment is live, a user visiting the URL of the control page will be randomly assigned to a test group, to be served either the control page or one of the alternative variations. This assignment persists for the user\u2019s session (according to <a href=\"https://docs.djangoproject.com/en/1.10/topics/http/sessions/#browser-length-sessions-vs-persistent-sessions\" rel=\"nofollow\">Django\u2019s session configuration</a>) so that each user receives the same variation each time. When a user subsequently visits the goal page, they are considered to have completed the experiment and a completion is logged against that user\u2019s test group. The completion rate over time for each test group can then be viewed through the admin interface, under \u2018View report\u2019.</p>\n<img alt=\"https://i.imgur.com/tG7JH13.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23f050d098ddb1806e628ee2c7f03603be44d467/68747470733a2f2f692e696d6775722e636f6d2f7447374a4831332e706e67\" width=\"728px\">\n<p>&gt;From the report page, an administrator can select a winning variation; the experiment status is then changed to \u2018completed\u2019, and all visitors to the control page are served the chosen variation.</p>\n<p>Typically, the alternative versions of the page will be left unpublished, as this prevents them from appearing as duplicate copies of the control page in the site navigation. If an unpublished page is selected as an alternative, the page revision shown to users on the front-end will be the draft revision that existed at the moment the experiment status was set to \u2018live\u2019. When displaying an alternative variation, the title and tree location are overridden to appear as the control page\u2019s title and location; this means that the title of the alternative page can be set to something descriptive, such as \u201cSignup page (blue text)\u201d, without this text \u2018leaking\u2019 to site visitors.</p>\n</div>\n<div id=\"direct-urls-for-goal-completion\">\n<h3>Direct URLs for goal completion</h3>\n<p>If you want goal completion to be linked to some action other than visiting a designated Wagtail page - for example, clicking a \u2018follow us on Twitter\u2019 link - you can set up a Javascript action that sends a request to a URL such as <tt><span class=\"pre\">/experiments/complete/twitter-follow/</span></tt> , where <tt><span class=\"pre\">twitter-follow</span></tt> is the experiment slug. To set this URL route up, add the following to your URLconf:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">experiments</span> <span class=\"kn\">import</span> <span class=\"n\">views</span> <span class=\"k\">as</span> <span class=\"n\">experiment_views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^experiments/complete/([^\\/]+)/$'</span><span class=\"p\">,</span> <span class=\"n\">experiment_views</span><span class=\"o\">.</span><span class=\"n\">record_completion</span><span class=\"p\">),</span>\n\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"alternative-backends\">\n<h3>Alternative backends</h3>\n<p>wagtail-experiments supports pluggable backends for tracking participants and completions. The default backend, <tt>experiments.backends.db</tt>, records these in a database table, aggregated by day. Alternative backends can be specified through the <tt>WAGTAIL_EXPERIMENTS_BACKEND</tt> setting:</p>\n<pre><span class=\"n\">WAGTAIL_EXPERIMENTS_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'mypackage.backends.thecloud'</span>\n</pre>\n<p>A backend is a Python module that provides the following functions:</p>\n<p><strong>record_participant(experiment, user_id, variation, request):</strong></p>\n<p>Called when a user visits the control page for <tt>experiment</tt>. <tt>user_id</tt> is the persistent user ID assigned to that visitor; <tt>variation</tt> is the Page object for the variation to be served; and <tt>request</tt> is the user\u2019s current request.</p>\n<p><strong>record_completion(experiment, user_id, variation, request):</strong></p>\n<p>Called when a visitor completes the <tt>experiment</tt>, either by visiting the goal page or triggering the <tt>record_completion</tt>. <tt>user_id</tt> is the persistent user ID assigned to that visitor; <tt>variation</tt> is the Page object for the variation that was originally served to that user; and <tt>request</tt> is the user\u2019s current request.</p>\n<p><strong>get_report(experiment):</strong></p>\n<p>Returns report data for <tt>experiment</tt>, consisting of a dict containing:</p>\n<dl>\n<dt><tt>variations</tt></dt>\n<dd><p>A list of records, one for each variation (including the control page). Each record is a dict containing:</p>\n<dl>\n<dt><tt>variation_pk</tt></dt>\n<dd>The primary key of the Page object</dd>\n<dt><tt>is_control</tt></dt>\n<dd>A boolean indicating whether this is the control page</dd>\n<dt><tt>is_winner</tt></dt>\n<dd>A boolean indicating whether this variation has been chosen as the winner</dd>\n<dt><tt>total_participant_count</tt></dt>\n<dd>The number of visitors who have been assigned this variation</dd>\n<dt><tt>total_completion_count</tt></dt>\n<dd>The number of visitors assigned this variation who have gone on to complete the experiment</dd>\n<dt><tt>history</tt></dt>\n<dd>A list of dicts showing the breakdown of participants and completions over time; each dict contains <tt>date</tt>, <tt>participant_count</tt> and <tt>completion_count</tt>.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div id=\"test-data\">\n<h3>Test data</h3>\n<p>wagtail-experiments provides a management command <tt><span class=\"pre\">experiment-data</span></tt>, to allow populating an experiment with dummy data for testing or demonstration purposes, and purging existing data. This command is called with the experiment\u2019s slug:</p>\n<pre># Populate the experiment 'homepage-banner' with 5 days of test data,\n# with 100-200 views per variation. All parameters other than experiment slug\n# are optional\n./manage.py experiment-data homepage-banner --days 5 --min=100 --max=200\n\n# Purge data for the experiment 'homepage-banner'\n./manage.py experiment-data homepage-banner --purge\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4538849, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "67c8bec9334ec436a33cbbe14ce532e2", "sha256": "0ff69b1fbd1d31d8b6d0f5e8db981651617daf9921e879fcf5cf04cc0d08cc3c"}, "downloads": -1, "filename": "wagtail-experiments-0.1.tar.gz", "has_sig": false, "md5_digest": "67c8bec9334ec436a33cbbe14ce532e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15415, "upload_time": "2016-10-31T22:21:05", "upload_time_iso_8601": "2016-10-31T22:21:05.840165Z", "url": "https://files.pythonhosted.org/packages/52/59/30ff19f58bb0153b8d6c91d719bef86d0b11e9b1ff496819f875eedfa1e1/wagtail-experiments-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f9c4fff87f086671b5a6f5cfc7aa3aae", "sha256": "846c6175f91bae5a9f502177618d3374fe6a658acdb22a96b27725f382b2957b"}, "downloads": -1, "filename": "wagtail-experiments-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f9c4fff87f086671b5a6f5cfc7aa3aae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113961, "upload_time": "2016-11-01T16:08:09", "upload_time_iso_8601": "2016-11-01T16:08:09.094908Z", "url": "https://files.pythonhosted.org/packages/fc/da/1845aadefcbbd8a24b8b0a7ccfbdacb9634cd4f491457e78cd44e5af6570/wagtail-experiments-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "efc1bbea8b74ba9a969c0d23711442bb", "sha256": "a4f212109d977d5835f0e905ee7e222640a9cdff1f3488054381ddc36f018a4a"}, "downloads": -1, "filename": "wagtail-experiments-0.1.2.tar.gz", "has_sig": false, "md5_digest": "efc1bbea8b74ba9a969c0d23711442bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114279, "upload_time": "2016-11-10T15:51:01", "upload_time_iso_8601": "2016-11-10T15:51:01.980538Z", "url": "https://files.pythonhosted.org/packages/0f/34/5ac340fb74260978c2c728dc731c587d4ae98aed6a0e5b96ee5f9902392b/wagtail-experiments-0.1.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f6913a2d9476e48b0b21e55516844dc6", "sha256": "7f24a2f976fafa78d4c3baf1cf41a1e8ef8b34413c9e662c7fd63428c3c8afdc"}, "downloads": -1, "filename": "wagtail_experiments-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f6913a2d9476e48b0b21e55516844dc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 123685, "upload_time": "2018-11-28T14:17:11", "upload_time_iso_8601": "2018-11-28T14:17:11.552359Z", "url": "https://files.pythonhosted.org/packages/1b/86/f376e64752fd7dc9f40d8a09d3c9d82ee662d215fbc7afb54c8518a17cda/wagtail_experiments-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e35ed8ad6680f0fce112545e9a7a36", "sha256": "a3e268510b4d7732c4cc9f9cd51bb01fefc511eee14b35df7608a59a9732cffa"}, "downloads": -1, "filename": "wagtail-experiments-0.2.tar.gz", "has_sig": false, "md5_digest": "22e35ed8ad6680f0fce112545e9a7a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116474, "upload_time": "2018-11-28T14:17:13", "upload_time_iso_8601": "2018-11-28T14:17:13.777096Z", "url": "https://files.pythonhosted.org/packages/b6/bb/c183fdc272e8780932c0b738f35f744120ea0b285d8d37f7826ee90d9893/wagtail-experiments-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6913a2d9476e48b0b21e55516844dc6", "sha256": "7f24a2f976fafa78d4c3baf1cf41a1e8ef8b34413c9e662c7fd63428c3c8afdc"}, "downloads": -1, "filename": "wagtail_experiments-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f6913a2d9476e48b0b21e55516844dc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 123685, "upload_time": "2018-11-28T14:17:11", "upload_time_iso_8601": "2018-11-28T14:17:11.552359Z", "url": "https://files.pythonhosted.org/packages/1b/86/f376e64752fd7dc9f40d8a09d3c9d82ee662d215fbc7afb54c8518a17cda/wagtail_experiments-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e35ed8ad6680f0fce112545e9a7a36", "sha256": "a3e268510b4d7732c4cc9f9cd51bb01fefc511eee14b35df7608a59a9732cffa"}, "downloads": -1, "filename": "wagtail-experiments-0.2.tar.gz", "has_sig": false, "md5_digest": "22e35ed8ad6680f0fce112545e9a7a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116474, "upload_time": "2018-11-28T14:17:13", "upload_time_iso_8601": "2018-11-28T14:17:13.777096Z", "url": "https://files.pythonhosted.org/packages/b6/bb/c183fdc272e8780932c0b738f35f744120ea0b285d8d37f7826ee90d9893/wagtail-experiments-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:33:05 2020"}