{"info": {"author": "Oliver Schnabel", "author_email": "zwenson@rocketmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Mathematics"], "description": "ADPY\n====\n\n##Description\n\n\nADPY is a Python library for algorithmic differentiation (http://en.wikipedia.org/wiki/Automatic_differentiation).\nIt aims to provide an easy way to extract partial derivatives of vector valued function (Jacobian matrix). In addition it allows to created callable function for obtaining function values using computational graphs.  \n\nFeatures:\n\n* optimize numerical evaluation by using computational graph\n* create callable function from Sympy expressions (calls lambdify once and creates a computational graph) \n* extract partial derivatives using forward or reverse algorithmic differentiation\n* bonus: a small nonlinear solver using all advantages mentioned above\n\n\n\n##How to use\n\nDue the small amount of features the handling is quite easy.         \n        \nFor the easiest use you need a callable function which takes a list of float numbers and returns a list.\n\n        def f(x):\n        \treturn [x[0]**2,2*x[1]]\n\nYou need a valid values for x which cause no singularities while evaluating the function.\n\n\t\tx1 = [1.,2.]\n\nInitialize the ADFUN object.\n\n\t\tfrom ADPY import adfun\n\t\tadpy_test  = adfun(f,x1)\n\nNow you have a callable function with computational graph optimization.\n\n\t\t\ty1 = adpy_test(x1)\n\nIf you want to use derivatives just do\n\t\n\t\tadpy_test.init_reverse_jac()\n\nor\n\n\t\tadpy_test.init_forward_jac()\n\nNow you can evaluate them using\n\n\t\tJ_forward = adpy_test.jac_reverse(x1)\n\nor\n\n\t\tJ_forward = adpy_test.jac_forward(x1)\n\n\nFor more information see the attached examples.\n\n##Install\n\nclone git\n\n        git clone https://github.com/zwenson/ADPY\nand run setup.py\n\n        python setup.py install\n\nor use easy_install\n\n        easy_install ADPY\n\n##How it works\n\nWithout going in to detail. It uses an overloaded class \"adfloat\" to record a list of the mathematical operations required to obtain the result. This list is then translated in to python expressions and made executable. The list is also used to perform automatic differentiation.\n\n\n##To do\n* more testing\n* add more operations\n* maybe add Hessian matrix? \n* add Taylor arithmetic?", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zwenson/ADPY", "keywords": "python algorithmic differentiation scientific numpy", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "ADPY", "package_url": "https://pypi.org/project/ADPY/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ADPY/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/zwenson/ADPY"}, "release_url": "https://pypi.org/project/ADPY/0.12.alpha/", "requires_dist": null, "requires_python": null, "summary": "ADPY is a Python library for algorithmic differentiation", "version": "0.12.alpha", "yanked": false, "html_description": "<div class=\"project-description\">\n            ADPY<br>====<br><br>##Description<br><br><br>ADPY is a Python library for algorithmic differentiation (http://en.wikipedia.org/wiki/Automatic_differentiation).<br>It aims to provide an easy way to extract partial derivatives of vector valued function (Jacobian matrix). In addition it allows to created callable function for obtaining function values using computational graphs.  <br><br>Features:<br><br>* optimize numerical evaluation by using computational graph<br>* create callable function from Sympy expressions (calls lambdify once and creates a computational graph) <br>* extract partial derivatives using forward or reverse algorithmic differentiation<br>* bonus: a small nonlinear solver using all advantages mentioned above<br><br><br><br>##How to use<br><br>Due the small amount of features the handling is quite easy.         <br>        <br>For the easiest use you need a callable function which takes a list of float numbers and returns a list.<br><br>        def f(x):<br>        \treturn [x[0]**2,2*x[1]]<br><br>You need a valid values for x which cause no singularities while evaluating the function.<br><br>\t\tx1 = [1.,2.]<br><br>Initialize the ADFUN object.<br><br>\t\tfrom ADPY import adfun<br>\t\tadpy_test  = adfun(f,x1)<br><br>Now you have a callable function with computational graph optimization.<br><br>\t\t\ty1 = adpy_test(x1)<br><br>If you want to use derivatives just do<br>\t<br>\t\tadpy_test.init_reverse_jac()<br><br>or<br><br>\t\tadpy_test.init_forward_jac()<br><br>Now you can evaluate them using<br><br>\t\tJ_forward = adpy_test.jac_reverse(x1)<br><br>or<br><br>\t\tJ_forward = adpy_test.jac_forward(x1)<br><br><br>For more information see the attached examples.<br><br>##Install<br><br>clone git<br><br>        git clone https://github.com/zwenson/ADPY<br>and run setup.py<br><br>        python setup.py install<br><br>or use easy_install<br><br>        easy_install ADPY<br><br>##How it works<br><br>Without going in to detail. It uses an overloaded class \"adfloat\" to record a list of the mathematical operations required to obtain the result. This list is then translated in to python expressions and made executable. The list is also used to perform automatic differentiation.<br><br><br>##To do<br>* more testing<br>* add more operations<br>* maybe add Hessian matrix? <br>* add Taylor arithmetic?\n          </div>"}, "last_serial": 929655, "releases": {"0.11.alpha": [{"comment_text": "", "digests": {"md5": "b00778d4ce62922f713622e59f6c0222", "sha256": "0789fbbb4773c3bf88e0fcfbac2c929292883b30a86c684162eb108fba326999"}, "downloads": -1, "filename": "ADPY-0.11.alpha-py2.6.egg", "has_sig": false, "md5_digest": "b00778d4ce62922f713622e59f6c0222", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 23099, "upload_time": "2013-08-26T14:08:09", "upload_time_iso_8601": "2013-08-26T14:08:09.318493Z", "url": "https://files.pythonhosted.org/packages/7f/02/5e1894c534ee156fb55c7eb617c58b99db4cf99c03a1bc212d40b2e30af2/ADPY-0.11.alpha-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d00a4cf569ebbe850357acd023330317", "sha256": "0c985a56598e2003bd1019806164f93b9a2d9a6bcd230c9b3171298496f06978"}, "downloads": -1, "filename": "ADPY-0.11.alpha.tar.gz", "has_sig": false, "md5_digest": "d00a4cf569ebbe850357acd023330317", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9008, "upload_time": "2013-08-26T14:08:07", "upload_time_iso_8601": "2013-08-26T14:08:07.722142Z", "url": "https://files.pythonhosted.org/packages/a8/24/d23fce4bec3ad52d0271d3ff6f69872a4a54271ef6606a2fa56acb281297/ADPY-0.11.alpha.tar.gz", "yanked": false}], "0.12.alpha": [{"comment_text": "", "digests": {"md5": "97e27cc4b101ea0cf4ecffb60b49fecc", "sha256": "dcc120f17de4f8e31c66aa18f4c4175f17d6abfd0dce103b412561d6ac1ee110"}, "downloads": -1, "filename": "ADPY-0.12.alpha-py2.7.egg", "has_sig": false, "md5_digest": "97e27cc4b101ea0cf4ecffb60b49fecc", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 23171, "upload_time": "2013-11-26T15:39:26", "upload_time_iso_8601": "2013-11-26T15:39:26.450285Z", "url": "https://files.pythonhosted.org/packages/a5/b6/a7101ead8ce7748e77c6998eb6c29d423563e7cdb0564e2661dba60e19ee/ADPY-0.12.alpha-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "75734f44907def64ad75093711c8ac02", "sha256": "a27d0a2eaeb2fe7ed555c1e38327b3472374a963ca2b9c023089989ed54589c6"}, "downloads": -1, "filename": "ADPY-0.12.alpha.tar.gz", "has_sig": false, "md5_digest": "75734f44907def64ad75093711c8ac02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8208, "upload_time": "2013-11-26T15:39:31", "upload_time_iso_8601": "2013-11-26T15:39:31.993144Z", "url": "https://files.pythonhosted.org/packages/9b/5a/90d0a5a2260de3f3174c069c3ae84bf2102518ebb4d4293d3d6951a83a26/ADPY-0.12.alpha.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97e27cc4b101ea0cf4ecffb60b49fecc", "sha256": "dcc120f17de4f8e31c66aa18f4c4175f17d6abfd0dce103b412561d6ac1ee110"}, "downloads": -1, "filename": "ADPY-0.12.alpha-py2.7.egg", "has_sig": false, "md5_digest": "97e27cc4b101ea0cf4ecffb60b49fecc", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 23171, "upload_time": "2013-11-26T15:39:26", "upload_time_iso_8601": "2013-11-26T15:39:26.450285Z", "url": "https://files.pythonhosted.org/packages/a5/b6/a7101ead8ce7748e77c6998eb6c29d423563e7cdb0564e2661dba60e19ee/ADPY-0.12.alpha-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "75734f44907def64ad75093711c8ac02", "sha256": "a27d0a2eaeb2fe7ed555c1e38327b3472374a963ca2b9c023089989ed54589c6"}, "downloads": -1, "filename": "ADPY-0.12.alpha.tar.gz", "has_sig": false, "md5_digest": "75734f44907def64ad75093711c8ac02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8208, "upload_time": "2013-11-26T15:39:31", "upload_time_iso_8601": "2013-11-26T15:39:31.993144Z", "url": "https://files.pythonhosted.org/packages/9b/5a/90d0a5a2260de3f3174c069c3ae84bf2102518ebb4d4293d3d6951a83a26/ADPY-0.12.alpha.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:17 2020"}