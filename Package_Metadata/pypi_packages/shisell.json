{"info": {"author": "Soluto", "author_email": "it@soluto.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Shisell is a service agnostic abstraction for analytic dispatchers.\n\nIt helps you dispatch analytic events which are scoped to a component or module. It allows providing extra data (properties), identities, and metadata to the dispatched events. Shisell's analytic dispatchers are immutable and can be composed by passing a dispatcher object to a child module. Shisell can be used as an abstraction for sending analytic events so you can easily switch or add analytic services without rewriting the event dispatching code.\n\n## Install\n\n```sh\n$ pip install shisell\n```\n\n## Usage\n\nAt the initialization code of your app, you should create a root dispatcher object. This root dispatcher is the \"parent\" of all dispatchers, and it is where you would set up common properties which needs to be attached to all the dispatched events.  \nIn order to create the root dispatcher, shisell needs to receive a writer function. The writer function is just a function that accepts an object of type [AnalyticsEventModel](https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_event_model.py), and usually writes it to an analytics service (e.g. Mixpanel, Google Analytics etc.). \nOut of the box Shisell comes with a writer function which outputs the event to the logger.\n\nUse the following code to use the built in dispatcher:  \n\n```python\nfrom shisell import create_root_dispatcher\nfrom shisell.writers import log_writer\n\nroot_dispatcher = create_root_dispatcher(log_writer)\n```\n\nOnce the root dispatcher is created you can compose dispatchers by extending with one of the extender methods. Finally, call dispatch on one of the dispatchers with an event name.\n\n```python\nfrom shisell.extenders import create_scoped, with_extra, with_identity\n# Composing dispatchers\nlogin_view_dispatcher = root_dispatcher.extend(create_scoped('LoginView'))\nregistration_box_dispatcher = login_view_dispatcher.extend(with_extra('type', 'registration'))\n# ...\nregistration_box_dispatcher.extend(with_identity('email', user_email), with_extra('btn','register')).dispatch('click')\n\n# logger output:\n# {  \n#    \"Scope\":\"LoginView\",\n#    \"Name\":\"click\",\n#    \"MetaData\":{},\n#    \"ExtraData\":{  \n#       \"type\":\"registration\",\n#       \"btn\":\"register\"\n#    },\n#    \"Identities\":{  \n#       \"email\":\"shisell@soluto.com\"\n#    }\n# }\n```\n\n#### Using Filters\n\nFilters are functions which are executed by the root dispatcher when dispatching events. Filters can be used to add dynamic values to the dispatched event.  \nHere's an example adding a Timestamp propery:\n\n```python\ndef add_timestamp(model):\n    model.ExtraData[\"timestamp\"] = time.time()\n\nroot_dispatcher = create_root_dispatcher(log_writer).extend(with_filter(add_timestamp))\n\nhome_page_dispatcher = root_dispatcher.extend(create_scoped('HomePage'))\n# ...\nhome_page_dispatcher.dispatch('PageView')\n\n# console output:\n# {  \n#    \"Scope\":\"HomePage\",\n#    \"Name\":\"PageView\",\n#    \"MetaData\":{  \n#\n#    },\n#    \"ExtraData\":{  \n#       \"timestamp\":1537108727.4074192\n#    },\n#    \"Identities\":{  \n#\n#    }\n# }\n```\n\n#### Extending the Dispatcher\nWe use several different extension methods for composing dispatchers, and you can easily add a custom one. For example, let's say that we frequently create dispatchers with several extra data properties that are part of our user model. So we have this sort of code often:\n\n```python\nhome_view_dispatcher = root_dispatcher.extend(\n  with_extra('firstName', user.first_name),\n  with_extra('lastName', user.last_name),\n  with_extra('email', user.email),\n  with_extra('age', user.age),\n);\n```\n\nInstead of writing this code every time you can add a method that does this for you:\n\n```python\ndef with_user(user):\n  new_context = AnalyticsContext()\n  new_context.ExtraData['firstName'] = user.first_name\n  new_context.ExtraData['lastName'] = user.last_name\n  new_context.ExtraData['email'] = user.email\n  new_context.ExtraData['age'] = user.age\n  \n  return with_context(new_context)\n\n# Usage\nhome_view_dispatcher = root_dispatcher.extend(with_user(user))\n```\n\n#### Creating a Custom Root Dispatcher\nWhen you call 'dispatch' on a dispatcher, it creates a union of the [AnalyticsContext](https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_context.py) of each dispatcher along the way until reaching the root dispatcher. The default root dispatcher that is generated by calling `create_root_dispatcher` simply converts the unified context to an AnalyticsEventModel and passes it on to the writer function.\n\nIf you would like to use a different model than the AnalyticsEventModel you can create your own custom dispatcher by creating a new [AnalyticsDispatcher](https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_dispatcher.py) and passing it a function that receives two parameters - the eventName and the context.\n\nNote: it is the root dispatcher's responsibility to run the filters.\n\n## Contributing\nThanks for thinking about contributing! We are looking for contributions of any sort and size - features, bug fixes, documentation or anything else that you think will make shisell better.\n* Fork and clone locally\n* Create a topic specific branch\n* Add a cool feature or fix a bug\n* Add tests\n* Send a Pull Request\n\n#### Running Tests\n```sh\n$ python3 -m unittest\n```\n\nRunning with coverage:\n```sh\n$ coverage run --source=shisell -m unittest\n$ coverage report -m\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Soluto/shisell-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "shisell", "package_url": "https://pypi.org/project/shisell/", "platform": "", "project_url": "https://pypi.org/project/shisell/", "project_urls": {"Homepage": "https://github.com/Soluto/shisell-python"}, "release_url": "https://pypi.org/project/shisell/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Shisell is a service agnostic abstraction for analytic dispatchers.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Shisell is a service agnostic abstraction for analytic dispatchers.</p>\n<p>It helps you dispatch analytic events which are scoped to a component or module. It allows providing extra data (properties), identities, and metadata to the dispatched events. Shisell's analytic dispatchers are immutable and can be composed by passing a dispatcher object to a child module. Shisell can be used as an abstraction for sending analytic events so you can easily switch or add analytic services without rewriting the event dispatching code.</p>\n<h2>Install</h2>\n<pre>$ pip install shisell\n</pre>\n<h2>Usage</h2>\n<p>At the initialization code of your app, you should create a root dispatcher object. This root dispatcher is the \"parent\" of all dispatchers, and it is where you would set up common properties which needs to be attached to all the dispatched events.<br>\nIn order to create the root dispatcher, shisell needs to receive a writer function. The writer function is just a function that accepts an object of type <a href=\"https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_event_model.py\" rel=\"nofollow\">AnalyticsEventModel</a>, and usually writes it to an analytics service (e.g. Mixpanel, Google Analytics etc.).\nOut of the box Shisell comes with a writer function which outputs the event to the logger.</p>\n<p>Use the following code to use the built in dispatcher:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shisell</span> <span class=\"kn\">import</span> <span class=\"n\">create_root_dispatcher</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shisell.writers</span> <span class=\"kn\">import</span> <span class=\"n\">log_writer</span>\n\n<span class=\"n\">root_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">create_root_dispatcher</span><span class=\"p\">(</span><span class=\"n\">log_writer</span><span class=\"p\">)</span>\n</pre>\n<p>Once the root dispatcher is created you can compose dispatchers by extending with one of the extender methods. Finally, call dispatch on one of the dispatchers with an event name.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shisell.extenders</span> <span class=\"kn\">import</span> <span class=\"n\">create_scoped</span><span class=\"p\">,</span> <span class=\"n\">with_extra</span><span class=\"p\">,</span> <span class=\"n\">with_identity</span>\n<span class=\"c1\"># Composing dispatchers</span>\n<span class=\"n\">login_view_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">root_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">create_scoped</span><span class=\"p\">(</span><span class=\"s1\">'LoginView'</span><span class=\"p\">))</span>\n<span class=\"n\">registration_box_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">login_view_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">,</span> <span class=\"s1\">'registration'</span><span class=\"p\">))</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">registration_box_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">with_identity</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"n\">user_email</span><span class=\"p\">),</span> <span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'btn'</span><span class=\"p\">,</span><span class=\"s1\">'register'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"s1\">'click'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># logger output:</span>\n<span class=\"c1\"># {  </span>\n<span class=\"c1\">#    \"Scope\":\"LoginView\",</span>\n<span class=\"c1\">#    \"Name\":\"click\",</span>\n<span class=\"c1\">#    \"MetaData\":{},</span>\n<span class=\"c1\">#    \"ExtraData\":{  </span>\n<span class=\"c1\">#       \"type\":\"registration\",</span>\n<span class=\"c1\">#       \"btn\":\"register\"</span>\n<span class=\"c1\">#    },</span>\n<span class=\"c1\">#    \"Identities\":{  </span>\n<span class=\"c1\">#       \"email\":\"shisell@soluto.com\"</span>\n<span class=\"c1\">#    }</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h4>Using Filters</h4>\n<p>Filters are functions which are executed by the root dispatcher when dispatching events. Filters can be used to add dynamic values to the dispatched event.<br>\nHere's an example adding a Timestamp propery:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">add_timestamp</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">ExtraData</span><span class=\"p\">[</span><span class=\"s2\">\"timestamp\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">root_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">create_root_dispatcher</span><span class=\"p\">(</span><span class=\"n\">log_writer</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">with_filter</span><span class=\"p\">(</span><span class=\"n\">add_timestamp</span><span class=\"p\">))</span>\n\n<span class=\"n\">home_page_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">root_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">create_scoped</span><span class=\"p\">(</span><span class=\"s1\">'HomePage'</span><span class=\"p\">))</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">home_page_dispatcher</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"s1\">'PageView'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># console output:</span>\n<span class=\"c1\"># {  </span>\n<span class=\"c1\">#    \"Scope\":\"HomePage\",</span>\n<span class=\"c1\">#    \"Name\":\"PageView\",</span>\n<span class=\"c1\">#    \"MetaData\":{  </span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#    },</span>\n<span class=\"c1\">#    \"ExtraData\":{  </span>\n<span class=\"c1\">#       \"timestamp\":1537108727.4074192</span>\n<span class=\"c1\">#    },</span>\n<span class=\"c1\">#    \"Identities\":{  </span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#    }</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h4>Extending the Dispatcher</h4>\n<p>We use several different extension methods for composing dispatchers, and you can easily add a custom one. For example, let's say that we frequently create dispatchers with several extra data properties that are part of our user model. So we have this sort of code often:</p>\n<pre><span class=\"n\">home_view_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">root_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n  <span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'firstName'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">),</span>\n  <span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'lastName'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">),</span>\n  <span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">),</span>\n  <span class=\"n\">with_extra</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">),</span>\n<span class=\"p\">);</span>\n</pre>\n<p>Instead of writing this code every time you can add a method that does this for you:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">with_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n  <span class=\"n\">new_context</span> <span class=\"o\">=</span> <span class=\"n\">AnalyticsContext</span><span class=\"p\">()</span>\n  <span class=\"n\">new_context</span><span class=\"o\">.</span><span class=\"n\">ExtraData</span><span class=\"p\">[</span><span class=\"s1\">'firstName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span>\n  <span class=\"n\">new_context</span><span class=\"o\">.</span><span class=\"n\">ExtraData</span><span class=\"p\">[</span><span class=\"s1\">'lastName'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">last_name</span>\n  <span class=\"n\">new_context</span><span class=\"o\">.</span><span class=\"n\">ExtraData</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span>\n  <span class=\"n\">new_context</span><span class=\"o\">.</span><span class=\"n\">ExtraData</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span>\n  \n  <span class=\"k\">return</span> <span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"n\">new_context</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Usage</span>\n<span class=\"n\">home_view_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">root_dispatcher</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">with_user</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">))</span>\n</pre>\n<h4>Creating a Custom Root Dispatcher</h4>\n<p>When you call 'dispatch' on a dispatcher, it creates a union of the <a href=\"https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_context.py\" rel=\"nofollow\">AnalyticsContext</a> of each dispatcher along the way until reaching the root dispatcher. The default root dispatcher that is generated by calling <code>create_root_dispatcher</code> simply converts the unified context to an AnalyticsEventModel and passes it on to the writer function.</p>\n<p>If you would like to use a different model than the AnalyticsEventModel you can create your own custom dispatcher by creating a new <a href=\"https://github.com/soluto-private/shisell-python/blob/master/shisell/analytics_dispatcher.py\" rel=\"nofollow\">AnalyticsDispatcher</a> and passing it a function that receives two parameters - the eventName and the context.</p>\n<p>Note: it is the root dispatcher's responsibility to run the filters.</p>\n<h2>Contributing</h2>\n<p>Thanks for thinking about contributing! We are looking for contributions of any sort and size - features, bug fixes, documentation or anything else that you think will make shisell better.</p>\n<ul>\n<li>Fork and clone locally</li>\n<li>Create a topic specific branch</li>\n<li>Add a cool feature or fix a bug</li>\n<li>Add tests</li>\n<li>Send a Pull Request</li>\n</ul>\n<h4>Running Tests</h4>\n<pre>$ python3 -m unittest\n</pre>\n<p>Running with coverage:</p>\n<pre>$ coverage run --source<span class=\"o\">=</span>shisell -m unittest\n$ coverage report -m\n</pre>\n\n          </div>"}, "last_serial": 4315857, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "781687ed498bd2b8e1fa8c31d33fdb4c", "sha256": "8a94d8c9063dd0acdf8eccb7fd6ac6dab0e41bbf7a10490c310622166f4bb938"}, "downloads": -1, "filename": "shisell-1.0.0.tar.gz", "has_sig": false, "md5_digest": "781687ed498bd2b8e1fa8c31d33fdb4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5108, "upload_time": "2018-09-27T11:15:01", "upload_time_iso_8601": "2018-09-27T11:15:01.639678Z", "url": "https://files.pythonhosted.org/packages/d8/b7/b1816a7eb38f479e87a08b94ca0438754824b8855bc32bc9974ce54c9daa/shisell-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "781687ed498bd2b8e1fa8c31d33fdb4c", "sha256": "8a94d8c9063dd0acdf8eccb7fd6ac6dab0e41bbf7a10490c310622166f4bb938"}, "downloads": -1, "filename": "shisell-1.0.0.tar.gz", "has_sig": false, "md5_digest": "781687ed498bd2b8e1fa8c31d33fdb4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5108, "upload_time": "2018-09-27T11:15:01", "upload_time_iso_8601": "2018-09-27T11:15:01.639678Z", "url": "https://files.pythonhosted.org/packages/d8/b7/b1816a7eb38f479e87a08b94ca0438754824b8855bc32bc9974ce54c9daa/shisell-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:55 2020"}