{"info": {"author": "Team Mayes", "author_email": "hmayes@hmayes.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Chemistry"], "description": "============\nMD Utilities\n============\n\n.. image:: https://img.shields.io/travis/cmayes/md_utils.svg\n        :target: https://travis-ci.org/cmayes/md_utils\n\n.. image:: https://img.shields.io/pypi/v/md_utils.svg\n        :target: https://pypi.python.org/pypi/md_utils\n\n.. image:: https://coveralls.io/repos/cmayes/md_utils/badge.svg?branch=master&service=github\n        :target: https://coveralls.io/github/cmayes/md_utils?branch=master\n\nUtility scripts for MD data\n\n* Free software: BSD license\n* Documentation: https://md_utils.readthedocs.org.\n\n\nPackage organization\n--------------------\n\nThis packaging process is based on https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/\n\nScripts added to the package aim have at least 90% test coverage.\n\n\nInstallation\n------------\n\n1. Make sure python is installed. Python 2.7 is recommended. The package is meant to be python 3 compatible,\n   but primarily tested with Python 2.7. There are many ways to install python.\n   For example, see http://conda.pydata.org/miniconda.html\n\n2. From the base folder where you would like the set of files (a new folder will be created, by default called md_utils):\n   ::\n      git clone https://github.com/team-mayes/md_utils.git\n\n3. From the git repository folder\n\n   a. see https://pip.pypa.io/en/stable/installing/ to install if you don't have pip installed\n   b. run:\n      ::\n         pip install md_utils --user\n   c. alternately (the * below will change based on current version; this is created in the first step):\n      ::\n         python setup.py sdist\n         pip install dist/md_utils-*.tar.gz --user\n4. To allow the scripts to be found anywhere on your computer using your terminal screen,\n   making sure the following path is in your .bashrc or .bash_profile path, and remember to source that file\n   after an update:\n   ::\n      $HOME/.local/bin\n\nUpgrade\n-------\n\nFrom the location of your cloned git repository, make sure you have the latest files, then use pip to update:\n::\n   git pull\n   pip install --upgrade  md_utils --user\n\nExample\n-------\n\n1. Update a configuration file like one found in the folder\n   https://github.com/team-mayes/md_utils/tree/master/tests/test_data/data_edit\n   (FYI, config files end with \"ini\" and there are a variety here, meant\n   to work or fail, to test functionality).\n2. To see if the installation worked, try running with the help option. All scripts in\n   this package have such an option, which will briefly tell you about the code::\n       data_edit -h\n\n3. To only have the program print interactions \"owned\" by atom numbers 1\n   and 2 in a data file called \"my_file.data\", make a file called (for example)\n   \"print_owned_atoms.ini\", with\n   the following text::\n       [main]\n       data_file = my_file.data\n       print_interactions_owned_by_atoms = 1,2\n\n   This assumes that my_file.data is in the same file as the\n   configuration file. You can have as many atom numbers as you wish;\n   just separate them by commas.\n\n4. Give it a try!\n   Run::\n       data_edit -c print_owned_atoms.ini\n\n\nWhen the whole git repository is cloned, there will many example input files in the tests/test_data folder.\n\n\n-------\nScripts\n-------\n\nFor combining/processing output:\n--------------------------------\n\nalign_on_col\n  For combining data from multiple files based on a common timestep. All other data will be ignored or, if in logging\n  mode, printed to a log file.\n\nfes_combo\n  Combines multiple FES output files into a single file so that the first\n  column's value is sequential.  Files with higher starting index numbers\n  are favored.\n\nfilter_col\n  Produces a file in which only rows are reproduced that pass filtering criteria set in the configuration file. The\n  config file allows specifying max and/or min values for any column heading (with a \"max_vals\" and/or \"max_vals\"\n  section in the config file). Additionally, a \"bin\" section\n  allows the user to specify a column name on which to bin data. The user should provide a list of integers:\n  initial_bin_value, final_bin_value, num_bins, and (optionally) a max number of rows per bin.\n\npath_bin\n  Creates a summary VMD XYZ file (and separate log file) that averages a\n  set of coordinates (one set of XYZ coordinates per line) from an input file.\n\nper_col_stats\n  Given a file with columns of data, returns the min, max, avg, and std dev per column. Optionally, it can return\n  the maximum value from each column plus a \"buffer\" length (useful for preparing CP2K input for FitEVB).\n\npress_dups\n  Compresses lines in a given CSV based on duplicate values in a specified\n  column (RMSD by default)  Compressed lines have their values averaged.\n\n\nFor PMF calculations:\n---------------------\n\nmd_init\n  Initializes a location for running md utilities. Specifically, it makes template files for creating wham input.\n\nwham_split\n  Breaks wham input into increasingly smaller blocks (divide initial data set\n  by 2, then 3, 4...) and creates wham input (meta) files and submit scripts.\n\nwham_rad\n  Calculates the radially-corrected free energy values from WHAM output.\n\ncalc_pka\n  From the wham_rad output, calculates the pKa.\n\n\nFor processing LAMMPS output:\n-----------------------------\n\ndata_edit\n  offers a range of options to:\n\n  * produce a new, edited data file (such as renumbering interactions types)\n\n      see example scripts in tests/test_data/data_edit: data_reorder.ini, data_retype.ini, data_sort.ini\n\n  * output selected data (i.e. interactions involving or owned by a particular atom number)\n\n      see example scripts in tests/test_data/data_edit: data_print_impt_atoms.ini, data_print_own_atoms.ini\n\n  * compare two data files and output only \"meaningful\" differences (ignore formatting differences,\n    order of bonds, angles, dihedrals, atom XYZ coords, notes...)\n\n      see example script tests/test_data/data_edit/data_compare.ini\n\ndata2pdb\n  * produces a pdb file with the coordinates from a data file, and everything else as in the pdb file\n\n      see example scripts in tests/test_data/data2odb: data2pdb.ini, data2pdb_glu_dict.ini ...\n\n  * specify a pdb template file with 'pdb_tpl_file'\n  * specify a single data file with 'data_file'\n  * specify a file that lists any number of data file names with 'data_list_file'\n  * specify an output directory with 'output_directory'\n  * make a dictionary by lining up the rows of the data and pdb files with 'make_dictionary_flag = True'\n  * use a dictionary to check alignment (proper ordering) of data file with 'use_atom_dict_flag = True'\n\ndump_edit\n  available options include renumbering atoms or molecules and producing a new file with a subset of timesteps\n\nlammps_dist\n  Calculates the distances between a given set of atom pairs for each\n  time step in a given LAMMPS dump file\n\nlammps_proc_data\n  From lammps dump file(s), finds key distance, such as the hydroxyl OH distance on the protonatable residue\n  (when protonated). This script assumes we care about one protonatable residue in a simulation with a PBC.\n\npdb_edit\n  Creates a new version of a pdb file applying options such as renumbering molecules.\n  * use the option \"add_element_types = true\" to fill in the column of element types (VMD dropped them for the protein section; CP2K wants them)\n      * by default, it will check all atoms. You can specify a range on which to perform this action with 'first_atom_add_element' and 'last_atom_add_element'\n      * it will only add the element type if it is in the internal atom_type/element dictionary (a warning will show if a type is not in the dictionary). Otherwise, it will leave those columns as they originally were.\n      * by default, it loads a dictionary I made based on charmm atom types (charmm_atom_type,element; one per line). The user can specify a different dictionary file with \"atom_type_element_dict_file\"\n  * if the user specifies a 'first_wat_atom' and 'last_wat_atom', the program will check that the atoms are printed in the order OH2, H1, H2\n      * when using this option, if the first protein atom is not 1 (numbering begins at 1, like in a PDB, not 0, like VMD index), use the option \"last_prot_atom = \" to indicate the first protein atom num\n      * this options requires inputting the last protein atom id (add \"last_prot_atom = X\" to the configuration file, where X is the integer (decimal) atom number)\n  * by default, the output pdb name of a pdb file called 'struct.pdb' will be 'struct_new.pdb'. You can specify a new name with the keyword 'new_pdb_name'\n  * by default, the output directory will be the same as that for the input pdb. This can be changed with the 'output_directory' keyword\n  * the program will renumber atoms starting from 1 (using hex for atom numbers greater than 99999), using a dictionary to change order if a csv dictionary of \"old,new\" indexes is specified with 'atom_reorder_old_new_file'\n  * the program will renumber molecules starting from 1 if 'mol_renum_flag = True' is included in the configuration file. Molecules may also be renumbered with by specifying a csv dictionary of \"old,new\" indexes with 'mol_renum_old_new_file'\n\npsf_edit\n  Currently only has limited functionality:\n  * Can be used to renumber residues/molecules starting from 1 using \"mol_renum_flag = True\" (no reordering of atoms)\n  * can map old molecule numbers to new ones by specifying a mapping dictionary with \"mol_renum_old_new_file\" (no reordering of atoms)\n  * Mapping of old atom numbers to new ones is not fully implemented.\n  * there is no option to reorder the psf\n  * the current most useful part of psf_edit is to help prepare files for CP2K, by specifying residue IDs that will be included in a qm region, i.e. \"resids_qmmm_ca_cb_link = 1,5\"\n    * note: to do so, it uses a default dictionary that can map between CHARMM atom types and elements, and between CHARMM atom types and MM_KIND radii (radii for water and hydronium from http://pubs.acs.org/doi/abs/10.1021/ct6001169; all other radii from http://xlink.rsc.org/?DOI=b801115j). If a mapping is needed that is not in the default dictionaries, the program will print a warning and exit. Users may supply their own dictionaries with the \"atom_type_element_dict_file\" and \"atom_type_radius_dict_file\"\n    * it assumes that all residues will be broken between the CA and CB atoms (if they exist), with all backbone atoms outside the QM region (types [CA, C, O, NT, HNT, CAT, HT1, HT2, HT3, HA, CAY, HY1, HY2, HY3, CY, OY, N, HN]); a different exclude list can be specified with 'exclude_atom_types_from_QM'\n    * it will output an \"amino_id.dat\" file that lists the atom ids (numbering from 1) for each element in the QM region from the non-excluded residue/molecule atoms. It will also print a link section noting the break between teh CA and CB atoms, and capping with H\n    * it will output an \"mm_kinds.dat\" file that notes the radius for each atom type found in the psf (see above to specify the dictionary to use)\n    * it will print a \"vmd_protein_atoms.dat\" file that lists the indices (atom_num - 1) of each atom in the QM region (useful for a VMD script that is part of converting RAPTOR output to VMD input)\n\n\nFor RAPTOR or EVBFit/RMDFit:\n----------------------------\n\nconvert_cp2k_forces\n  cp2k force output files\n\nevb_get_info\n  collects selected data form evb output files such as the number of states, the maximum ci^2 value for a protonated\n  state, and the max ci^2 value for a deprotonated state\n\nfitevb_setup\n  provided a allowable ranges of parameters and results of a previous fitting step, creates a new fitevb input file\n\nprocess_cv_file\n  converts plumed cv output to evb cv output style\n\n\n\n\n\nHistory\n-------\n\n0.9.2 (2016-09-07)\n------------------\n\n* Added functions to help select configurations based on a criteria (such as CV value) by adding a \"bin_settings\" option to filter_col\n* added a \"comb_col\" script to combine two column values with optional \"prefix\", \"suffix\", and \"middle\"\n\n0.9.1 (2016-07-20)\n------------------\n\n* Updated pdb_edit to fill in the element column of a pdb file (sometime VMD removes it). The program uses\na dictionary of atom_type,element based on CHARMM36. Users can specify a different mapping of PDB atom types to\nelement types.\n\n0.9.0 (2016-07-17)\n------------------\n\n* Now uses the csv.QUOTE_NONNUMERIC option for writing and reading, to automatically convert to floats\n\n0.8.2 (2016-06-22)\n------------------\n\n* Updated data_edit so that output is formatted into columns. Additionally, when comparing data files, lines that\ndiffer only by more a specified tolerance (~1e-5) are now ignored.\n\n0.8.1 (2016-06-14)\n------------------\n\n* Now correctly sorts differences between data files, ignoring comments, unimportant ordering...\n\n0.8.0\n------------------\n\n* Added capabilty to data_edit: now will show differences between data files, ignoring comments, unimportant ordering...\n\n\n0.7.3 (2016-04-20)\n------------------\n\n* Changed data_reorder to data_edit, reflecting its additional capabilities.\n\n0.7.2 (2016-04-14)\n------------------\n\n* Added data2data, data_reorder to distribution\n\n0.7.1 (2016-03-31)\n------------------\n\n* Added dump_edit, pdb_edit, evbdump2data to distribution; these allow changes to, for example, the atom numbers\n\n\n0.7.0 (2016-02-20)\n------------------\n\n* Added lammps_proc_data.py to calculate g(r) from a lammps dump file\n\n0.6.0 (2015-11-22)\n------------------\n\n* Added lammps_dist to calculate atom pair distances as found in a LAMMPS dump file.\n\n\n0.5.0 (2015-11-21)\n------------------\n\n* Added press_dups to compress CSV rows that have duplicate values for a given column.\n\n0.4.2 (2015-10-24)\n------------------\n\n* Added path_bin for creating an averaged VMD file from a larger set of coordinates.\n\n0.4.1 (2015-10-10)\n------------------\n\n* Added max_loc and max_val columns to calc_pka output.\n* Fixed problem with 0-start files in fes_combo.\n\n0.4.0 (2015-10-01)\n------------------\n\n* Changed `wham_rad` to set the zero point at the the largest CV free E, rather than the max CV\n\n0.3.0 (2015-09-07)\n------------------\n\n* Added `wham_block.py`\n* Added `wham_split.py`\n* Refactored common code to `common` and `wham` modules.\n\n0.2.0 (2015-09-03)\n------------------\n\n* Added `wham_rad.py`\n\n0.1.0 (2015-09-01)\n------------------\n\n* Renamed to `md_utils`\n* Added `fes_combo.py`", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmayes/md_utils", "keywords": "md_utils", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "md_utils", "package_url": "https://pypi.org/project/md_utils/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/md_utils/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cmayes/md_utils"}, "release_url": "https://pypi.org/project/md_utils/0.10.0/", "requires_dist": null, "requires_python": null, "summary": "Utility scripts for MD data", "version": "0.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ============<br>MD Utilities<br>============<br><br>.. image:: https://img.shields.io/travis/cmayes/md_utils.svg<br>        :target: https://travis-ci.org/cmayes/md_utils<br><br>.. image:: https://img.shields.io/pypi/v/md_utils.svg<br>        :target: https://pypi.python.org/pypi/md_utils<br><br>.. image:: https://coveralls.io/repos/cmayes/md_utils/badge.svg?branch=master&amp;service=github<br>        :target: https://coveralls.io/github/cmayes/md_utils?branch=master<br><br>Utility scripts for MD data<br><br>* Free software: BSD license<br>* Documentation: https://md_utils.readthedocs.org.<br><br><br>Package organization<br>--------------------<br><br>This packaging process is based on https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/<br><br>Scripts added to the package aim have at least 90% test coverage.<br><br><br>Installation<br>------------<br><br>1. Make sure python is installed. Python 2.7 is recommended. The package is meant to be python 3 compatible,<br>   but primarily tested with Python 2.7. There are many ways to install python.<br>   For example, see http://conda.pydata.org/miniconda.html<br><br>2. From the base folder where you would like the set of files (a new folder will be created, by default called md_utils):<br>   ::<br>      git clone https://github.com/team-mayes/md_utils.git<br><br>3. From the git repository folder<br><br>   a. see https://pip.pypa.io/en/stable/installing/ to install if you don't have pip installed<br>   b. run:<br>      ::<br>         pip install md_utils --user<br>   c. alternately (the * below will change based on current version; this is created in the first step):<br>      ::<br>         python setup.py sdist<br>         pip install dist/md_utils-*.tar.gz --user<br>4. To allow the scripts to be found anywhere on your computer using your terminal screen,<br>   making sure the following path is in your .bashrc or .bash_profile path, and remember to source that file<br>   after an update:<br>   ::<br>      $HOME/.local/bin<br><br>Upgrade<br>-------<br><br>From the location of your cloned git repository, make sure you have the latest files, then use pip to update:<br>::<br>   git pull<br>   pip install --upgrade  md_utils --user<br><br>Example<br>-------<br><br>1. Update a configuration file like one found in the folder<br>   https://github.com/team-mayes/md_utils/tree/master/tests/test_data/data_edit<br>   (FYI, config files end with \"ini\" and there are a variety here, meant<br>   to work or fail, to test functionality).<br>2. To see if the installation worked, try running with the help option. All scripts in<br>   this package have such an option, which will briefly tell you about the code::<br>       data_edit -h<br><br>3. To only have the program print interactions \"owned\" by atom numbers 1<br>   and 2 in a data file called \"my_file.data\", make a file called (for example)<br>   \"print_owned_atoms.ini\", with<br>   the following text::<br>       [main]<br>       data_file = my_file.data<br>       print_interactions_owned_by_atoms = 1,2<br><br>   This assumes that my_file.data is in the same file as the<br>   configuration file. You can have as many atom numbers as you wish;<br>   just separate them by commas.<br><br>4. Give it a try!<br>   Run::<br>       data_edit -c print_owned_atoms.ini<br><br><br>When the whole git repository is cloned, there will many example input files in the tests/test_data folder.<br><br><br>-------<br>Scripts<br>-------<br><br>For combining/processing output:<br>--------------------------------<br><br>align_on_col<br>  For combining data from multiple files based on a common timestep. All other data will be ignored or, if in logging<br>  mode, printed to a log file.<br><br>fes_combo<br>  Combines multiple FES output files into a single file so that the first<br>  column's value is sequential.  Files with higher starting index numbers<br>  are favored.<br><br>filter_col<br>  Produces a file in which only rows are reproduced that pass filtering criteria set in the configuration file. The<br>  config file allows specifying max and/or min values for any column heading (with a \"max_vals\" and/or \"max_vals\"<br>  section in the config file). Additionally, a \"bin\" section<br>  allows the user to specify a column name on which to bin data. The user should provide a list of integers:<br>  initial_bin_value, final_bin_value, num_bins, and (optionally) a max number of rows per bin.<br><br>path_bin<br>  Creates a summary VMD XYZ file (and separate log file) that averages a<br>  set of coordinates (one set of XYZ coordinates per line) from an input file.<br><br>per_col_stats<br>  Given a file with columns of data, returns the min, max, avg, and std dev per column. Optionally, it can return<br>  the maximum value from each column plus a \"buffer\" length (useful for preparing CP2K input for FitEVB).<br><br>press_dups<br>  Compresses lines in a given CSV based on duplicate values in a specified<br>  column (RMSD by default)  Compressed lines have their values averaged.<br><br><br>For PMF calculations:<br>---------------------<br><br>md_init<br>  Initializes a location for running md utilities. Specifically, it makes template files for creating wham input.<br><br>wham_split<br>  Breaks wham input into increasingly smaller blocks (divide initial data set<br>  by 2, then 3, 4...) and creates wham input (meta) files and submit scripts.<br><br>wham_rad<br>  Calculates the radially-corrected free energy values from WHAM output.<br><br>calc_pka<br>  From the wham_rad output, calculates the pKa.<br><br><br>For processing LAMMPS output:<br>-----------------------------<br><br>data_edit<br>  offers a range of options to:<br><br>  * produce a new, edited data file (such as renumbering interactions types)<br><br>      see example scripts in tests/test_data/data_edit: data_reorder.ini, data_retype.ini, data_sort.ini<br><br>  * output selected data (i.e. interactions involving or owned by a particular atom number)<br><br>      see example scripts in tests/test_data/data_edit: data_print_impt_atoms.ini, data_print_own_atoms.ini<br><br>  * compare two data files and output only \"meaningful\" differences (ignore formatting differences,<br>    order of bonds, angles, dihedrals, atom XYZ coords, notes...)<br><br>      see example script tests/test_data/data_edit/data_compare.ini<br><br>data2pdb<br>  * produces a pdb file with the coordinates from a data file, and everything else as in the pdb file<br><br>      see example scripts in tests/test_data/data2odb: data2pdb.ini, data2pdb_glu_dict.ini ...<br><br>  * specify a pdb template file with 'pdb_tpl_file'<br>  * specify a single data file with 'data_file'<br>  * specify a file that lists any number of data file names with 'data_list_file'<br>  * specify an output directory with 'output_directory'<br>  * make a dictionary by lining up the rows of the data and pdb files with 'make_dictionary_flag = True'<br>  * use a dictionary to check alignment (proper ordering) of data file with 'use_atom_dict_flag = True'<br><br>dump_edit<br>  available options include renumbering atoms or molecules and producing a new file with a subset of timesteps<br><br>lammps_dist<br>  Calculates the distances between a given set of atom pairs for each<br>  time step in a given LAMMPS dump file<br><br>lammps_proc_data<br>  From lammps dump file(s), finds key distance, such as the hydroxyl OH distance on the protonatable residue<br>  (when protonated). This script assumes we care about one protonatable residue in a simulation with a PBC.<br><br>pdb_edit<br>  Creates a new version of a pdb file applying options such as renumbering molecules.<br>  * use the option \"add_element_types = true\" to fill in the column of element types (VMD dropped them for the protein section; CP2K wants them)<br>      * by default, it will check all atoms. You can specify a range on which to perform this action with 'first_atom_add_element' and 'last_atom_add_element'<br>      * it will only add the element type if it is in the internal atom_type/element dictionary (a warning will show if a type is not in the dictionary). Otherwise, it will leave those columns as they originally were.<br>      * by default, it loads a dictionary I made based on charmm atom types (charmm_atom_type,element; one per line). The user can specify a different dictionary file with \"atom_type_element_dict_file\"<br>  * if the user specifies a 'first_wat_atom' and 'last_wat_atom', the program will check that the atoms are printed in the order OH2, H1, H2<br>      * when using this option, if the first protein atom is not 1 (numbering begins at 1, like in a PDB, not 0, like VMD index), use the option \"last_prot_atom = \" to indicate the first protein atom num<br>      * this options requires inputting the last protein atom id (add \"last_prot_atom = X\" to the configuration file, where X is the integer (decimal) atom number)<br>  * by default, the output pdb name of a pdb file called 'struct.pdb' will be 'struct_new.pdb'. You can specify a new name with the keyword 'new_pdb_name'<br>  * by default, the output directory will be the same as that for the input pdb. This can be changed with the 'output_directory' keyword<br>  * the program will renumber atoms starting from 1 (using hex for atom numbers greater than 99999), using a dictionary to change order if a csv dictionary of \"old,new\" indexes is specified with 'atom_reorder_old_new_file'<br>  * the program will renumber molecules starting from 1 if 'mol_renum_flag = True' is included in the configuration file. Molecules may also be renumbered with by specifying a csv dictionary of \"old,new\" indexes with 'mol_renum_old_new_file'<br><br>psf_edit<br>  Currently only has limited functionality:<br>  * Can be used to renumber residues/molecules starting from 1 using \"mol_renum_flag = True\" (no reordering of atoms)<br>  * can map old molecule numbers to new ones by specifying a mapping dictionary with \"mol_renum_old_new_file\" (no reordering of atoms)<br>  * Mapping of old atom numbers to new ones is not fully implemented.<br>  * there is no option to reorder the psf<br>  * the current most useful part of psf_edit is to help prepare files for CP2K, by specifying residue IDs that will be included in a qm region, i.e. \"resids_qmmm_ca_cb_link = 1,5\"<br>    * note: to do so, it uses a default dictionary that can map between CHARMM atom types and elements, and between CHARMM atom types and MM_KIND radii (radii for water and hydronium from http://pubs.acs.org/doi/abs/10.1021/ct6001169; all other radii from http://xlink.rsc.org/?DOI=b801115j). If a mapping is needed that is not in the default dictionaries, the program will print a warning and exit. Users may supply their own dictionaries with the \"atom_type_element_dict_file\" and \"atom_type_radius_dict_file\"<br>    * it assumes that all residues will be broken between the CA and CB atoms (if they exist), with all backbone atoms outside the QM region (types [CA, C, O, NT, HNT, CAT, HT1, HT2, HT3, HA, CAY, HY1, HY2, HY3, CY, OY, N, HN]); a different exclude list can be specified with 'exclude_atom_types_from_QM'<br>    * it will output an \"amino_id.dat\" file that lists the atom ids (numbering from 1) for each element in the QM region from the non-excluded residue/molecule atoms. It will also print a link section noting the break between teh CA and CB atoms, and capping with H<br>    * it will output an \"mm_kinds.dat\" file that notes the radius for each atom type found in the psf (see above to specify the dictionary to use)<br>    * it will print a \"vmd_protein_atoms.dat\" file that lists the indices (atom_num - 1) of each atom in the QM region (useful for a VMD script that is part of converting RAPTOR output to VMD input)<br><br><br>For RAPTOR or EVBFit/RMDFit:<br>----------------------------<br><br>convert_cp2k_forces<br>  cp2k force output files<br><br>evb_get_info<br>  collects selected data form evb output files such as the number of states, the maximum ci^2 value for a protonated<br>  state, and the max ci^2 value for a deprotonated state<br><br>fitevb_setup<br>  provided a allowable ranges of parameters and results of a previous fitting step, creates a new fitevb input file<br><br>process_cv_file<br>  converts plumed cv output to evb cv output style<br><br><br><br><br><br>History<br>-------<br><br>0.9.2 (2016-09-07)<br>------------------<br><br>* Added functions to help select configurations based on a criteria (such as CV value) by adding a \"bin_settings\" option to filter_col<br>* added a \"comb_col\" script to combine two column values with optional \"prefix\", \"suffix\", and \"middle\"<br><br>0.9.1 (2016-07-20)<br>------------------<br><br>* Updated pdb_edit to fill in the element column of a pdb file (sometime VMD removes it). The program uses<br>a dictionary of atom_type,element based on CHARMM36. Users can specify a different mapping of PDB atom types to<br>element types.<br><br>0.9.0 (2016-07-17)<br>------------------<br><br>* Now uses the csv.QUOTE_NONNUMERIC option for writing and reading, to automatically convert to floats<br><br>0.8.2 (2016-06-22)<br>------------------<br><br>* Updated data_edit so that output is formatted into columns. Additionally, when comparing data files, lines that<br>differ only by more a specified tolerance (~1e-5) are now ignored.<br><br>0.8.1 (2016-06-14)<br>------------------<br><br>* Now correctly sorts differences between data files, ignoring comments, unimportant ordering...<br><br>0.8.0<br>------------------<br><br>* Added capabilty to data_edit: now will show differences between data files, ignoring comments, unimportant ordering...<br><br><br>0.7.3 (2016-04-20)<br>------------------<br><br>* Changed data_reorder to data_edit, reflecting its additional capabilities.<br><br>0.7.2 (2016-04-14)<br>------------------<br><br>* Added data2data, data_reorder to distribution<br><br>0.7.1 (2016-03-31)<br>------------------<br><br>* Added dump_edit, pdb_edit, evbdump2data to distribution; these allow changes to, for example, the atom numbers<br><br><br>0.7.0 (2016-02-20)<br>------------------<br><br>* Added lammps_proc_data.py to calculate g(r) from a lammps dump file<br><br>0.6.0 (2015-11-22)<br>------------------<br><br>* Added lammps_dist to calculate atom pair distances as found in a LAMMPS dump file.<br><br><br>0.5.0 (2015-11-21)<br>------------------<br><br>* Added press_dups to compress CSV rows that have duplicate values for a given column.<br><br>0.4.2 (2015-10-24)<br>------------------<br><br>* Added path_bin for creating an averaged VMD file from a larger set of coordinates.<br><br>0.4.1 (2015-10-10)<br>------------------<br><br>* Added max_loc and max_val columns to calc_pka output.<br>* Fixed problem with 0-start files in fes_combo.<br><br>0.4.0 (2015-10-01)<br>------------------<br><br>* Changed `wham_rad` to set the zero point at the the largest CV free E, rather than the max CV<br><br>0.3.0 (2015-09-07)<br>------------------<br><br>* Added `wham_block.py`<br>* Added `wham_split.py`<br>* Refactored common code to `common` and `wham` modules.<br><br>0.2.0 (2015-09-03)<br>------------------<br><br>* Added `wham_rad.py`<br><br>0.1.0 (2015-09-01)<br>------------------<br><br>* Renamed to `md_utils`<br>* Added `fes_combo.py`\n          </div>"}, "last_serial": 2330155, "releases": {"0.10.0": [{"comment_text": "", "digests": {"md5": "5a3389a3da21ca67418112908f5b133c", "sha256": "9ab1db9051706e1811470ef0558aa4cc7747eb2dc3f17bc3bfef4a9637645f20"}, "downloads": -1, "filename": "md_utils-0.10.0.tar.gz", "has_sig": false, "md5_digest": "5a3389a3da21ca67418112908f5b133c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116640, "upload_time": "2016-09-07T20:31:30", "upload_time_iso_8601": "2016-09-07T20:31:30.557525Z", "url": "https://files.pythonhosted.org/packages/0e/6f/63b2d41b98a994dcb67c541e172e0972774949dc3193c598a4cee971d8d9/md_utils-0.10.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "088f4829662c5739738bbaa9169a9aea", "sha256": "bd30287dcdbb7507526e4468ac371d40c6a10196a9a8a0877a0f033db904e169"}, "downloads": -1, "filename": "md_utils-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "088f4829662c5739738bbaa9169a9aea", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 24890, "upload_time": "2015-09-13T23:47:15", "upload_time_iso_8601": "2015-09-13T23:47:15.482634Z", "url": "https://files.pythonhosted.org/packages/37/5b/3969ad1f91f7653a3892c78cb9c7228deffa84aa42c5f13beef175088b94/md_utils-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db73c69928702a4550b077c831375a64", "sha256": "c4745fc698089ab7e4f981e0f3ed3e520b9eba45c33b827fb80e1b931dd50d01"}, "downloads": -1, "filename": "md_utils-0.3.0.tar.gz", "has_sig": false, "md5_digest": "db73c69928702a4550b077c831375a64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 715326, "upload_time": "2015-09-13T23:47:28", "upload_time_iso_8601": "2015-09-13T23:47:28.072468Z", "url": "https://files.pythonhosted.org/packages/14/e8/b385cb3a0659c2f8d4d084973fdb6e975c2fac917b18ba2dc0c54b9fcc59/md_utils-0.3.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "266338521834ebccb705f834c845b46d", "sha256": "f6e5488ac3e00b4242e0b7b9661a18d56bb954e207b9a0479d80b7bf8e4c76c7"}, "downloads": -1, "filename": "md_utils-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "266338521834ebccb705f834c845b46d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 25411, "upload_time": "2015-10-11T00:16:02", "upload_time_iso_8601": "2015-10-11T00:16:02.946502Z", "url": "https://files.pythonhosted.org/packages/04/64/bbc442f4ef792e05f9b15336bc298b8b66b2c415f7938c87b84c80827ead/md_utils-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e6725201a61df190ae26613cab5e207", "sha256": "4522c044c525c820d154a520fb1863a2283f8fa2dd0ea8650d1fd10c5bd2dd6d"}, "downloads": -1, "filename": "md_utils-0.4.1.tar.gz", "has_sig": false, "md5_digest": "8e6725201a61df190ae26613cab5e207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20529273, "upload_time": "2015-10-11T00:15:55", "upload_time_iso_8601": "2015-10-11T00:15:55.822735Z", "url": "https://files.pythonhosted.org/packages/f8/70/f685e7f7c1f4c9c75ff7e40178b8427217340ade35cbb54e2cc8942e41b7/md_utils-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "a81445d130c954299bffa5ebee5cd5e3", "sha256": "1aef5dbdb0de594bd0e3045d48f1fc72a75de37206745ccd3152c8e4f341d682"}, "downloads": -1, "filename": "md_utils-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a81445d130c954299bffa5ebee5cd5e3", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 28311, "upload_time": "2015-10-25T00:38:17", "upload_time_iso_8601": "2015-10-25T00:38:17.899633Z", "url": "https://files.pythonhosted.org/packages/9f/09/75e164a61e96cf117c90868b5bd7a1a1fdb786318afb9e4416b1523cb635/md_utils-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9baca1cbc4870aeda3911a875ac28894", "sha256": "b13a2e6a9a5243b40b8497bf8c0720c2386c95fadf51f6d94f9f6c7ff2fd4ae9"}, "downloads": -1, "filename": "md_utils-0.4.2.tar.gz", "has_sig": false, "md5_digest": "9baca1cbc4870aeda3911a875ac28894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25754, "upload_time": "2015-10-25T00:38:13", "upload_time_iso_8601": "2015-10-25T00:38:13.945371Z", "url": "https://files.pythonhosted.org/packages/0a/59/f2bb28b3416aeec10e2f47973ecb8e6fe8906825f97792810f71906a7a34/md_utils-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f97b50aa3a4de615b7c411941e72929a", "sha256": "b493145ac30e3b594bb9e523cb3695e59def305c7b0c6afa82b0475b161174b4"}, "downloads": -1, "filename": "md_utils-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f97b50aa3a4de615b7c411941e72929a", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 32558, "upload_time": "2015-11-22T03:57:10", "upload_time_iso_8601": "2015-11-22T03:57:10.505989Z", "url": "https://files.pythonhosted.org/packages/85/b1/ceec80e6da1af1e08df761276faa6646349d560ce71a28dba4974344f73f/md_utils-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b23cea1bc4088b06f35ec74c6bd85401", "sha256": "498b269c7a679d697b1c306b1ed7f7b84e20bdeb801a94b2df9b946ea4f92007"}, "downloads": -1, "filename": "md_utils-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b23cea1bc4088b06f35ec74c6bd85401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27645, "upload_time": "2015-11-22T03:57:06", "upload_time_iso_8601": "2015-11-22T03:57:06.067745Z", "url": "https://files.pythonhosted.org/packages/5f/8e/7fec3cff3e32612a4dda48113cf7fdd37f4e7d4208bb3a973a59dbef85fd/md_utils-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "ff5215f5f9aae524ca1acdc42439f995", "sha256": "262e57bb1eb56c4e46715b9ff8deb466035662b9c12d102b2ad27cedc403e235"}, "downloads": -1, "filename": "md_utils-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff5215f5f9aae524ca1acdc42439f995", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 36533, "upload_time": "2015-11-22T23:01:51", "upload_time_iso_8601": "2015-11-22T23:01:51.639492Z", "url": "https://files.pythonhosted.org/packages/50/8f/62b66a62ccfc420fda365a56a7ac02635572388e3c0a6bc8adb69d8e3d39/md_utils-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c752d07143b50f1688f02e2665f427a7", "sha256": "0007c9f7a6f1d52aef900efe67445338fbc6ea27cc887ed25c78bda324c03f7c"}, "downloads": -1, "filename": "md_utils-0.6.0.tar.gz", "has_sig": false, "md5_digest": "c752d07143b50f1688f02e2665f427a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30515, "upload_time": "2015-11-22T23:01:34", "upload_time_iso_8601": "2015-11-22T23:01:34.153972Z", "url": "https://files.pythonhosted.org/packages/53/b1/582d1acf159e04a55dc2313c9a46370a582a71b2e2e809dd06af6b03aa0e/md_utils-0.6.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "a17282283265f0a276480b44374f3670", "sha256": "c63a70027cc66baaa7b9ba08176d6cafa35749270448842879d1f0be8a16cf80"}, "downloads": -1, "filename": "md_utils-0.9.0.tar.gz", "has_sig": false, "md5_digest": "a17282283265f0a276480b44374f3670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102102, "upload_time": "2016-07-20T01:18:14", "upload_time_iso_8601": "2016-07-20T01:18:14.967428Z", "url": "https://files.pythonhosted.org/packages/ae/46/41a20efb9465e886a5ae9f6c3f3ec19ad3d12bdf5e39de149e11518f9eec/md_utils-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "b691ac34411cb547a24851aae507a370", "sha256": "553cf9785ed19f11c2959a58b8b7eb7ebbea288bfb74388ba8ec90700b40a723"}, "downloads": -1, "filename": "md_utils-0.9.1.tar.gz", "has_sig": false, "md5_digest": "b691ac34411cb547a24851aae507a370", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101932, "upload_time": "2016-07-21T00:56:31", "upload_time_iso_8601": "2016-07-21T00:56:31.805267Z", "url": "https://files.pythonhosted.org/packages/65/b6/ecb76528c0166190ebfe56e8f9c09236a47482d2facd0bd06b6f1d544828/md_utils-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a3389a3da21ca67418112908f5b133c", "sha256": "9ab1db9051706e1811470ef0558aa4cc7747eb2dc3f17bc3bfef4a9637645f20"}, "downloads": -1, "filename": "md_utils-0.10.0.tar.gz", "has_sig": false, "md5_digest": "5a3389a3da21ca67418112908f5b133c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116640, "upload_time": "2016-09-07T20:31:30", "upload_time_iso_8601": "2016-09-07T20:31:30.557525Z", "url": "https://files.pythonhosted.org/packages/0e/6f/63b2d41b98a994dcb67c541e172e0972774949dc3193c598a4cee971d8d9/md_utils-0.10.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:45 2020"}