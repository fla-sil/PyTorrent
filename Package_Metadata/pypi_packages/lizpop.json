{"info": {"author": "Tetsu Takaishi", "author_email": "te2fm.t@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Lisp", "Programming Language :: Python :: 2", "Programming Language :: Scheme", "Topic :: Software Development :: Interpreters"], "description": "======\nLizpop \n======\n\nLizpop is Scheme interpreter in Python.\n    \nInstallation\n============\n\nRequirements:\n\n  Lizpop requires Python 2.5 or later, but does not work in Python3.\n\nTo install:\n\n  Simply run ``python setup.py install``. \n\n  e.g. ::\n\n  $ tar zxvf lizpop-0.4.0.tar.gz \n  $ cd lizpop-0.4.0\n  $ sudo python setup.py install\n\nUsage\n=====\nTo run interactively::\n\n  $ python -O -m lizpop.run\n\nTo run a Scheme script in a file::\n\n  $ python -O -m lizpop.run yourfile.scm\n\nFor more info about command-line options::\n\n  $ python -O -m lizpop.run -h\n\nFeatures\n========\n\nSubset of Scheme R5RS\n\n  See the `Restrictions`_ section for more details.\n\nHas interfaces to Python\n\n  e.g. ::\n\n    $ cat helloworld.py \n    def hello(s=\"world\"):\n      return u\"Hello %s!\" % s.capitalize()\n\n    $ python -O -m lizpop.run\n    > (define *helloworld* (import \"helloworld\"))\n    > (define hello (attr *helloworld* 'hello))\n    > (hello \"friends\")\n    \"Hello Friends!\"\n\n\n  For more details, See the **IFPY.rst** file in this package.\n\nRegular Expression literal.\n\n  The following literal is a Regular Expression Object. ::\n\n    #/PATTERN/FLAGS\n      PATTERN:   Regular expression pattern\n      FLAGS:     Regular expression flags.\n        i-- ignore case  m-- multi-line  s-- dot matches all\n        u-- Unicode dependent  L-- locale dependent  x-- verbose\n\n  Examples ::\n\n    ;; A simple matching\n    > (re-search #/(\\d+):(\\d+)/ \"Aug 14\")  ;; not match\n    #f \n    > (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") ;; match\n    <_sre.SRE_Match object at ...>\n\n    ;; Get subgroup\n    > (re-group (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") 1 2)\n    (\"08\" \"30\")\n\n    ;; Replace string\n    > (re-gsub #/<(\\/?)h\\d>/i \"<\\\\1H3>\" \"<h1>Features:</h1>\")\n    \"<H3>Features:</H3>\"\n    > \n\n  For more info, run ``help`` procedure. ::\n \n    e.g.   \n    > (help-list #/(^re-)|(regex)/)\n    > (help re-match re-search re-group re-gsub)\n\nSupports multi-byte characters\n\n  Only utf-8 encoding now.\n\nEML(EMbedded Lizpop)\n\n  EML is a template language for embedding Lizpop code in text file.\n\n  EML has the following simple specifications.\n\n  * ``%>STRING<%`` is a new string literal, but escape sequences \n    in STRING (such as \\\\n and \\\\u3055)  are not decoded.\n\n  * Implicitly, ``%>`` is added to the beginning of the input-port.\n\n  * Implicitly, ``<%`` is added to the end of the input-port.\n\n    Note: These ideas are inspired by BRL ( http://brl.sourceforge.net/ ).\n\n  To run EML, use ``-eml`` as command line option. ::\n\n    e.g. \n    python -m lizpop.run -eml yourfile.eml\n\n  A simple example ::\n\n    $ cat gcdlcm.eml\n    <% (define numlist (map string->number *args*)) %>\n    GCD of <% numlist %> is <%(apply gcd numlist)%>.\n    LCM of <% numlist %> is <%(apply lcm numlist)%>.\n\n    $ python -m lizpop.run -eml gcdlcm.eml -- 1533 37303 4307\n    GCD of (1533 37303 4307) is 73.\n    LCM of (1533 37303 4307) is 6602631.\n\n  For more examples: \n\n    please run ``(help load-eml)`` to see its help message.\n\n  Note: ```lizpop + apache2 + mod_wsgi```\n\n    See the ``wsgi_sample/application.wsgi`` file included in this package.\n\nHelp function\n\n  Lizpop has a help-function, it displays documentation for the given\n  procedures or macros.\n\n  Usage: \n\n    (help var ...)\n\n    (help-list regex-pattern)\n\n    e.g. ::\n\n      > (help invoke)\n      Procedure: (invoke OBJ MESSAGE ARGS ... )\n        Invokes the OBJ's method named MESSAGE with ARGS ...\n        .........................................................\n\n  However, for now, the help documentation is provided only for the\n  Python-Interface related functions.\n\n  For more info, run ``(help)`` and ``(help help-list)``.\n\n  **Note**:\n    I'm not good at English. So help messages may include some\n    errors or unnatural expressions in English.\n\nRestrictions\n============\n\nHygienic macros are not supported.\n\n  ``define-syntax`` ``syntax-rules``, and ``let-syntax`` are not implemented.\n\n  Instead, traditional(non-hygienic) macros can be used.\n    => run ``(help define-macro)``\n\nStrings are not mutable.\n\n  Lizpop strings are implemented as Python unicode-string objects\n  which are immutable. so, ``string-set!`` and ``string-fill!`` don't work.\n\n``call/cc`` and ``dynamic-wind`` are only partially implemented.\n\n  Lizpop does not support full continuation.\n\n  Lizpop's ``call-with-current-continuation`` is upward-only and\n  non-reentrant. So, it can be used for non-local-exit, but cannot\n  be used for co-routines or backtracking.\n\nComplex numbers and Fractional numbers are not supported.\n\n``null-environment`` and ``scheme-report-environment`` are not implemented.\n\n    For more info, run (help eval).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/lizpop/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "lizpop", "package_url": "https://pypi.org/project/lizpop/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lizpop/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/lizpop/"}, "release_url": "https://pypi.org/project/lizpop/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "Scheme interpreter in Python", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Lizpop is Scheme interpreter in Python.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Requirements:</p>\n<blockquote>\nLizpop requires Python 2.5 or later, but does not work in Python3.</blockquote>\n<p>To install:</p>\n<blockquote>\n<p>Simply run <tt>python setup.py install</tt>.</p>\n<p>e.g.</p>\n<pre>$ tar zxvf lizpop-0.4.0.tar.gz\n$ cd lizpop-0.4.0\n$ sudo python setup.py install\n</pre>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To run interactively:</p>\n<pre>$ python -O -m lizpop.run\n</pre>\n<p>To run a Scheme script in a file:</p>\n<pre>$ python -O -m lizpop.run yourfile.scm\n</pre>\n<p>For more info about command-line options:</p>\n<pre>$ python -O -m lizpop.run -h\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Subset of Scheme R5RS</p>\n<blockquote>\nSee the <a href=\"#restrictions\" rel=\"nofollow\">Restrictions</a> section for more details.</blockquote>\n<p>Has interfaces to Python</p>\n<blockquote>\n<p>e.g.</p>\n<pre>$ cat helloworld.py\ndef hello(s=\"world\"):\n  return u\"Hello %s!\" % s.capitalize()\n\n$ python -O -m lizpop.run\n&gt; (define *helloworld* (import \"helloworld\"))\n&gt; (define hello (attr *helloworld* 'hello))\n&gt; (hello \"friends\")\n\"Hello Friends!\"\n</pre>\n<p>For more details, See the <strong>IFPY.rst</strong> file in this package.</p>\n</blockquote>\n<p>Regular Expression literal.</p>\n<blockquote>\n<p>The following literal is a Regular Expression Object.</p>\n<pre>#/PATTERN/FLAGS\n  PATTERN:   Regular expression pattern\n  FLAGS:     Regular expression flags.\n    i-- ignore case  m-- multi-line  s-- dot matches all\n    u-- Unicode dependent  L-- locale dependent  x-- verbose\n</pre>\n<p>Examples</p>\n<pre>;; A simple matching\n&gt; (re-search #/(\\d+):(\\d+)/ \"Aug 14\")  ;; not match\n#f\n&gt; (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") ;; match\n&lt;_sre.SRE_Match object at ...&gt;\n\n;; Get subgroup\n&gt; (re-group (re-search #/(\\d+):(\\d+)/ \"Aug 14 08:30\") 1 2)\n(\"08\" \"30\")\n\n;; Replace string\n&gt; (re-gsub #/&lt;(\\/?)h\\d&gt;/i \"&lt;\\\\1H3&gt;\" \"&lt;h1&gt;Features:&lt;/h1&gt;\")\n\"&lt;H3&gt;Features:&lt;/H3&gt;\"\n&gt;\n</pre>\n<p>For more info, run <tt>help</tt> procedure.</p>\n<pre>e.g.\n&gt; (help-list #/(^re-)|(regex)/)\n&gt; (help re-match re-search re-group re-gsub)\n</pre>\n</blockquote>\n<p>Supports multi-byte characters</p>\n<blockquote>\nOnly utf-8 encoding now.</blockquote>\n<p>EML(EMbedded Lizpop)</p>\n<blockquote>\n<p>EML is a template language for embedding Lizpop code in text file.</p>\n<p>EML has the following simple specifications.</p>\n<ul>\n<li><p><tt>%&gt;STRING&lt;%</tt> is a new string literal, but escape sequences\nin STRING (such as \\n and \\u3055)  are not decoded.</p>\n</li>\n<li><p>Implicitly, <tt>%&gt;</tt> is added to the beginning of the input-port.</p>\n</li>\n<li><p>Implicitly, <tt>&lt;%</tt> is added to the end of the input-port.</p>\n<p>Note: These ideas are inspired by BRL ( <a href=\"http://brl.sourceforge.net/\" rel=\"nofollow\">http://brl.sourceforge.net/</a> ).</p>\n</li>\n</ul>\n<p>To run EML, use <tt><span class=\"pre\">-eml</span></tt> as command line option.</p>\n<pre>e.g.\npython -m lizpop.run -eml yourfile.eml\n</pre>\n<p>A simple example</p>\n<pre>$ cat gcdlcm.eml\n&lt;% (define numlist (map string-&gt;number *args*)) %&gt;\nGCD of &lt;% numlist %&gt; is &lt;%(apply gcd numlist)%&gt;.\nLCM of &lt;% numlist %&gt; is &lt;%(apply lcm numlist)%&gt;.\n\n$ python -m lizpop.run -eml gcdlcm.eml -- 1533 37303 4307\nGCD of (1533 37303 4307) is 73.\nLCM of (1533 37303 4307) is 6602631.\n</pre>\n<p>For more examples:</p>\n<blockquote>\nplease run <tt>(help <span class=\"pre\">load-eml)</span></tt> to see its help message.</blockquote>\n<p>Note: <tt>`lizpop + apache2 + mod_wsgi`</tt></p>\n<blockquote>\nSee the <tt>wsgi_sample/application.wsgi</tt> file included in this package.</blockquote>\n</blockquote>\n<p>Help function</p>\n<blockquote>\n<p>Lizpop has a help-function, it displays documentation for the given\nprocedures or macros.</p>\n<p>Usage:</p>\n<blockquote>\n<p>(help var \u2026)</p>\n<p>(help-list regex-pattern)</p>\n<p>e.g.</p>\n<pre>&gt; (help invoke)\nProcedure: (invoke OBJ MESSAGE ARGS ... )\n  Invokes the OBJ's method named MESSAGE with ARGS ...\n  .........................................................\n</pre>\n</blockquote>\n<p>However, for now, the help documentation is provided only for the\nPython-Interface related functions.</p>\n<p>For more info, run <tt>(help)</tt> and <tt>(help <span class=\"pre\">help-list)</span></tt>.</p>\n<dl>\n<dt><strong>Note</strong>:</dt>\n<dd>I\u2019m not good at English. So help messages may include some\nerrors or unnatural expressions in English.</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"restrictions\">\n<h2>Restrictions</h2>\n<p>Hygienic macros are not supported.</p>\n<blockquote>\n<p><tt><span class=\"pre\">define-syntax</span></tt> <tt><span class=\"pre\">syntax-rules</span></tt>, and <tt><span class=\"pre\">let-syntax</span></tt> are not implemented.</p>\n<dl>\n<dt>Instead, traditional(non-hygienic) macros can be used.</dt>\n<dd>=&gt; run <tt>(help <span class=\"pre\">define-macro)</span></tt></dd>\n</dl>\n</blockquote>\n<p>Strings are not mutable.</p>\n<blockquote>\nLizpop strings are implemented as Python unicode-string objects\nwhich are immutable. so, <tt><span class=\"pre\">string-set!</span></tt> and <tt><span class=\"pre\">string-fill!</span></tt> don\u2019t work.</blockquote>\n<p><tt>call/cc</tt> and <tt><span class=\"pre\">dynamic-wind</span></tt> are only partially implemented.</p>\n<blockquote>\n<p>Lizpop does not support full continuation.</p>\n<p>Lizpop\u2019s <tt><span class=\"pre\">call-with-current-continuation</span></tt> is upward-only and\nnon-reentrant. So, it can be used for non-local-exit, but cannot\nbe used for co-routines or backtracking.</p>\n</blockquote>\n<p>Complex numbers and Fractional numbers are not supported.</p>\n<p><tt><span class=\"pre\">null-environment</span></tt> and <tt><span class=\"pre\">scheme-report-environment</span></tt> are not implemented.</p>\n<blockquote>\nFor more info, run (help eval).</blockquote>\n</div>\n\n          </div>"}, "last_serial": 751595, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "99108d2a04cefdf67ab6ad5603810c8d", "sha256": "66cfed98d5b4bbc204e2fda20b3e988f002699355152542e9613a7fd8d8baf82"}, "downloads": -1, "filename": "lizpop-0.4.0.tar.gz", "has_sig": false, "md5_digest": "99108d2a04cefdf67ab6ad5603810c8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66983, "upload_time": "2012-04-04T08:40:55", "upload_time_iso_8601": "2012-04-04T08:40:55.928057Z", "url": "https://files.pythonhosted.org/packages/13/c4/ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7/lizpop-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "99108d2a04cefdf67ab6ad5603810c8d", "sha256": "66cfed98d5b4bbc204e2fda20b3e988f002699355152542e9613a7fd8d8baf82"}, "downloads": -1, "filename": "lizpop-0.4.0.tar.gz", "has_sig": false, "md5_digest": "99108d2a04cefdf67ab6ad5603810c8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66983, "upload_time": "2012-04-04T08:40:55", "upload_time_iso_8601": "2012-04-04T08:40:55.928057Z", "url": "https://files.pythonhosted.org/packages/13/c4/ab509b1052d3e50b31b1ca64d565cc2cc34464bb776313d176ef0bf66ae7/lizpop-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:59 2020"}