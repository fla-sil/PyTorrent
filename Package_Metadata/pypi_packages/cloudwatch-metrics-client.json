{"info": {"author": "Nikita Makeev", "author_email": "whale2.box@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Software Development :: Libraries"], "description": "# cloudwatch-metrics-client\nPython CloudWatch metrics Client library utilising asyncio (along with sync variant)\n\nThis is yet another Python CloudWatch client. While there are alternatives, they are\neither not supporting asyncio or not actively maintained.\n\nhttps://github.com/awslabs/cloudwatch-fluent-metrics\n\nhttps://github.com/peterdemin/awsme\n\nThe client collects whatever metrics you feed it with and reports to CloudWatch regularly, though\nyou can use it for ad-hoc reporting as well\n\nNOTE: aioboto3 is not in the requirements, in case you only need sync version. If running under Python 3.6, you'll\nneed async_generator>=1.10 as well\n\nUsage:\n\n```python\nimport asyncio\nfrom cloudwatch_metrics_client.aiocloudwatch import CloudWatchAsyncMetrics, CloudWatchAsyncMetricReporter\n\nasync def setup():\n\n  reporter = CloudWatchAsyncMetricReporter(report_interval=REPORT INTERVAL)        # seconds\n  CloudWatchAsyncMetrics.with_namespace('<YOUR NAMESPACE').with_reporter(reporter)\n  # .with_client(aioboto3_cloudwatch_client) is you're not happy with default client\n  await reporter.run()\n\n\n@CloudWatchAsyncMetrics.monitored_task\nasync def process_request(request):\n\n  # processing logic...\n  #\n  # request_type = ... \n  # request_specific_data = \n\n  # Set details on monitored call\n  CloudWatchAsyncMetrics\\\n    .with_monitored_dimension('TypeOfRequest', request_type)\\\n    .with_monitored_dimension('SpecificAttribute', request_specific_data)\n\n  # Put particular metric\n  await CloudWatchAsyncMetrics.put_metric(\n        MetricName='particular-metric-name',\n        Unit='Count',\n        Dimensions={'Kind': 'metric-kind', 'Sort': 'metric-sort'},\n        Value=value\n  )\n\n  # Record statistical value\n  await CloudWatchAsyncMetrics.put_statistic(\n        MetricName='particular-metric-name',\n        Unit='Count',\n        Dimensions={'Kind': 'metric-kind', 'Sort': 'metric-sort'},\n        Value=value\n\n  # Elapsed time will be recorded  \n```\n\nElapsed time of each call of `process_request` coroutine will be recorded in internal data structure and aggregated \nstatistics will be regularly sent to CloudWatch.\nIndividual metrics could be collected with `put_metric` call - they too would be stored for a while and then sent\nto CloudWatch. `put_metric` keeps each unique value and sends list of them along with number of occurrencies of each\nvalue, `put_statistics` only sends aggregated data over a bunch of metrics - Sum, SampleCount, Min and Max\n(See https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.put_metric_data for details)\n\nReporter has async `flush` method for flushing metric data still not sent to CloudWatch. If regular reporting is not \nneeded, just don't call `run` coro and instead call `flush` when it is time to report metrics.\n\nSync version works in the very same way, it utilises separate thread for reporting.\n\n```python\n\nfrom cloudwatch_metrics_client.cloudwatch import CloudWatchSyncMetrics, CloudWatchSyncMetricReporter\n\ndef setup():\n\n  reporter = CloudWatchSyncMetricReporter(report_interval=REPORT INTERVAL)        # seconds\n  CloudWatchSyncMetrics.with_namespace('<YOUR NAMESPACE').with_reporter(reporter)\n  reporter.run()\n\n@CloudWatchSyncMetrics.monitored_task  \ndef process_request(request):\n\n# Same here, but with CloudWatchSync*\n\n\n```  \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/whale2/cloudwatch-metrics-client", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloudwatch-metrics-client", "package_url": "https://pypi.org/project/cloudwatch-metrics-client/", "platform": "", "project_url": "https://pypi.org/project/cloudwatch-metrics-client/", "project_urls": {"Homepage": "https://github.com/whale2/cloudwatch-metrics-client"}, "release_url": "https://pypi.org/project/cloudwatch-metrics-client/0.0.6/", "requires_dist": ["multidict (>=4.5.2)"], "requires_python": "", "summary": "Asynchronous (and synchronous) Python client for AWS CloudWatch metrics", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cloudwatch-metrics-client</h1>\n<p>Python CloudWatch metrics Client library utilising asyncio (along with sync variant)</p>\n<p>This is yet another Python CloudWatch client. While there are alternatives, they are\neither not supporting asyncio or not actively maintained.</p>\n<p><a href=\"https://github.com/awslabs/cloudwatch-fluent-metrics\" rel=\"nofollow\">https://github.com/awslabs/cloudwatch-fluent-metrics</a></p>\n<p><a href=\"https://github.com/peterdemin/awsme\" rel=\"nofollow\">https://github.com/peterdemin/awsme</a></p>\n<p>The client collects whatever metrics you feed it with and reports to CloudWatch regularly, though\nyou can use it for ad-hoc reporting as well</p>\n<p>NOTE: aioboto3 is not in the requirements, in case you only need sync version. If running under Python 3.6, you'll\nneed async_generator&gt;=1.10 as well</p>\n<p>Usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cloudwatch_metrics_client.aiocloudwatch</span> <span class=\"kn\">import</span> <span class=\"n\">CloudWatchAsyncMetrics</span><span class=\"p\">,</span> <span class=\"n\">CloudWatchAsyncMetricReporter</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">():</span>\n\n  <span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">CloudWatchAsyncMetricReporter</span><span class=\"p\">(</span><span class=\"n\">report_interval</span><span class=\"o\">=</span><span class=\"n\">REPORT</span> <span class=\"n\">INTERVAL</span><span class=\"p\">)</span>        <span class=\"c1\"># seconds</span>\n  <span class=\"n\">CloudWatchAsyncMetrics</span><span class=\"o\">.</span><span class=\"n\">with_namespace</span><span class=\"p\">(</span><span class=\"s1\">'&lt;YOUR NAMESPACE'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_reporter</span><span class=\"p\">(</span><span class=\"n\">reporter</span><span class=\"p\">)</span>\n  <span class=\"c1\"># .with_client(aioboto3_cloudwatch_client) is you're not happy with default client</span>\n  <span class=\"k\">await</span> <span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@CloudWatchAsyncMetrics</span><span class=\"o\">.</span><span class=\"n\">monitored_task</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n  <span class=\"c1\"># processing logic...</span>\n  <span class=\"c1\">#</span>\n  <span class=\"c1\"># request_type = ... </span>\n  <span class=\"c1\"># request_specific_data = </span>\n\n  <span class=\"c1\"># Set details on monitored call</span>\n  <span class=\"n\">CloudWatchAsyncMetrics</span>\\\n    <span class=\"o\">.</span><span class=\"n\">with_monitored_dimension</span><span class=\"p\">(</span><span class=\"s1\">'TypeOfRequest'</span><span class=\"p\">,</span> <span class=\"n\">request_type</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">with_monitored_dimension</span><span class=\"p\">(</span><span class=\"s1\">'SpecificAttribute'</span><span class=\"p\">,</span> <span class=\"n\">request_specific_data</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Put particular metric</span>\n  <span class=\"k\">await</span> <span class=\"n\">CloudWatchAsyncMetrics</span><span class=\"o\">.</span><span class=\"n\">put_metric</span><span class=\"p\">(</span>\n        <span class=\"n\">MetricName</span><span class=\"o\">=</span><span class=\"s1\">'particular-metric-name'</span><span class=\"p\">,</span>\n        <span class=\"n\">Unit</span><span class=\"o\">=</span><span class=\"s1\">'Count'</span><span class=\"p\">,</span>\n        <span class=\"n\">Dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Kind'</span><span class=\"p\">:</span> <span class=\"s1\">'metric-kind'</span><span class=\"p\">,</span> <span class=\"s1\">'Sort'</span><span class=\"p\">:</span> <span class=\"s1\">'metric-sort'</span><span class=\"p\">},</span>\n        <span class=\"n\">Value</span><span class=\"o\">=</span><span class=\"n\">value</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"c1\"># Record statistical value</span>\n  <span class=\"k\">await</span> <span class=\"n\">CloudWatchAsyncMetrics</span><span class=\"o\">.</span><span class=\"n\">put_statistic</span><span class=\"p\">(</span>\n        <span class=\"n\">MetricName</span><span class=\"o\">=</span><span class=\"s1\">'particular-metric-name'</span><span class=\"p\">,</span>\n        <span class=\"n\">Unit</span><span class=\"o\">=</span><span class=\"s1\">'Count'</span><span class=\"p\">,</span>\n        <span class=\"n\">Dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'Kind'</span><span class=\"p\">:</span> <span class=\"s1\">'metric-kind'</span><span class=\"p\">,</span> <span class=\"s1\">'Sort'</span><span class=\"p\">:</span> <span class=\"s1\">'metric-sort'</span><span class=\"p\">},</span>\n        <span class=\"n\">Value</span><span class=\"o\">=</span><span class=\"n\">value</span>\n\n  <span class=\"c1\"># Elapsed time will be recorded  </span>\n</pre>\n<p>Elapsed time of each call of <code>process_request</code> coroutine will be recorded in internal data structure and aggregated\nstatistics will be regularly sent to CloudWatch.\nIndividual metrics could be collected with <code>put_metric</code> call - they too would be stored for a while and then sent\nto CloudWatch. <code>put_metric</code> keeps each unique value and sends list of them along with number of occurrencies of each\nvalue, <code>put_statistics</code> only sends aggregated data over a bunch of metrics - Sum, SampleCount, Min and Max\n(See <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.put_metric_data\" rel=\"nofollow\">https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudwatch.html#CloudWatch.Client.put_metric_data</a> for details)</p>\n<p>Reporter has async <code>flush</code> method for flushing metric data still not sent to CloudWatch. If regular reporting is not\nneeded, just don't call <code>run</code> coro and instead call <code>flush</code> when it is time to report metrics.</p>\n<p>Sync version works in the very same way, it utilises separate thread for reporting.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cloudwatch_metrics_client.cloudwatch</span> <span class=\"kn\">import</span> <span class=\"n\">CloudWatchSyncMetrics</span><span class=\"p\">,</span> <span class=\"n\">CloudWatchSyncMetricReporter</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">():</span>\n\n  <span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">CloudWatchSyncMetricReporter</span><span class=\"p\">(</span><span class=\"n\">report_interval</span><span class=\"o\">=</span><span class=\"n\">REPORT</span> <span class=\"n\">INTERVAL</span><span class=\"p\">)</span>        <span class=\"c1\"># seconds</span>\n  <span class=\"n\">CloudWatchSyncMetrics</span><span class=\"o\">.</span><span class=\"n\">with_namespace</span><span class=\"p\">(</span><span class=\"s1\">'&lt;YOUR NAMESPACE'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_reporter</span><span class=\"p\">(</span><span class=\"n\">reporter</span><span class=\"p\">)</span>\n  <span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@CloudWatchSyncMetrics</span><span class=\"o\">.</span><span class=\"n\">monitored_task</span>  \n<span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n\n<span class=\"c1\"># Same here, but with CloudWatchSync*</span>\n</pre>\n\n          </div>"}, "last_serial": 5425801, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b0a53740a8bf8862dbda6b925a3c2fc1", "sha256": "472a783937f7c5edc80bcf208686bd5ccc3152a3b85f12b475a25a738855890a"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b0a53740a8bf8862dbda6b925a3c2fc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3465, "upload_time": "2019-06-17T14:55:57", "upload_time_iso_8601": "2019-06-17T14:55:57.096765Z", "url": "https://files.pythonhosted.org/packages/96/dd/1c127e7ab55242499ef65fe9504c790ef71c4531be12f0845f2986c5add5/cloudwatch_metrics_client-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "625b1cb1e352df0f0f4062484ecc7fc6", "sha256": "9530e0bae41583fbe4f0f3d8314422dc8e1e684736932e84c3667f4e5f6ccfd1"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.1.tar.gz", "has_sig": false, "md5_digest": "625b1cb1e352df0f0f4062484ecc7fc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2799, "upload_time": "2019-06-17T14:55:59", "upload_time_iso_8601": "2019-06-17T14:55:59.283098Z", "url": "https://files.pythonhosted.org/packages/8f/5f/c6e61283f5ed2efacf9231e784a97b54be50a7359e6ed1b76cf250100b73/cloudwatch-metrics-client-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "29814963bc12a84b3f9140e06251066d", "sha256": "20e8321fa1d1b50907827af13353fd99dbc7b0ed1735eafe8c036f1782899a03"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "29814963bc12a84b3f9140e06251066d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7919, "upload_time": "2019-06-17T15:13:18", "upload_time_iso_8601": "2019-06-17T15:13:18.614170Z", "url": "https://files.pythonhosted.org/packages/0a/a0/d5db6b933a6ada5dab7256cfb1dc7ea11b73160f5ae6bd61c8be3168c1f5/cloudwatch_metrics_client-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e2834140915fce34eb499a6071ab0cd", "sha256": "3a77af7ef4ef7c16fd53a3a1e29c3f4c8a41890f1f63f883d39041d97f264bb4"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6e2834140915fce34eb499a6071ab0cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5854, "upload_time": "2019-06-17T15:13:20", "upload_time_iso_8601": "2019-06-17T15:13:20.299042Z", "url": "https://files.pythonhosted.org/packages/2b/80/cf80707f8dec116d2f08eebe184013584783ab2bc6a1a11d6ea8d3e044d3/cloudwatch-metrics-client-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "91f8d2e36c9b58cef92889378bca06e5", "sha256": "af90f2fc3eb961a12c580139e653f901817ed3b24d081b9a7fe2975047a6f1ac"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "91f8d2e36c9b58cef92889378bca06e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7900, "upload_time": "2019-06-17T15:29:18", "upload_time_iso_8601": "2019-06-17T15:29:18.905760Z", "url": "https://files.pythonhosted.org/packages/62/e7/92a0396244d8fbd10eee0a678237540014a85873f0e340f60ef15423ef54/cloudwatch_metrics_client-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e0461e98cfc0394ca627172405edb18", "sha256": "dfe175804745de67b581cf3a0533eebdc2bff205050f7d1a0b15a17ffac23b59"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2e0461e98cfc0394ca627172405edb18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5862, "upload_time": "2019-06-17T15:29:20", "upload_time_iso_8601": "2019-06-17T15:29:20.390212Z", "url": "https://files.pythonhosted.org/packages/e0/23/6a21a60c7f752550e9557c77781e3e219a9d9a1f90f7f2905b7e295d7eba/cloudwatch-metrics-client-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f7b401e6f522b5833ad067e1e3050707", "sha256": "6a799ec2ff57c34904d80eda5537f063e51c0ef806367426a079a7888557c05f"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f7b401e6f522b5833ad067e1e3050707", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7997, "upload_time": "2019-06-17T17:33:45", "upload_time_iso_8601": "2019-06-17T17:33:45.612706Z", "url": "https://files.pythonhosted.org/packages/84/67/79607ea536eeab79f063cfedad8b0fb1c2540980a2a3a00756310dda3ba5/cloudwatch_metrics_client-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a8d6d73cc9045661b3572179570aa52", "sha256": "b537ec1a4421f97d29acbaf673f1e603dd9b232ecaf7be9a84de4fa1d4f41a1e"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6a8d6d73cc9045661b3572179570aa52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5946, "upload_time": "2019-06-17T17:33:46", "upload_time_iso_8601": "2019-06-17T17:33:46.816066Z", "url": "https://files.pythonhosted.org/packages/30/41/ac45c1120e6d14b5781455e6d349bbeb9269c93234d5f427858c965bce44/cloudwatch-metrics-client-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "212f8a609857a028a8a45e98ee1f4239", "sha256": "ccdf2bb086f04ac4cc01a63e3af2f841e0b185cfc6a3a0b925bd6160a4c45755"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "212f8a609857a028a8a45e98ee1f4239", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8000, "upload_time": "2019-06-17T17:37:00", "upload_time_iso_8601": "2019-06-17T17:37:00.453809Z", "url": "https://files.pythonhosted.org/packages/c6/8f/7a4710254cde1689b1d4263d780b52163a8504f961241c6ca60c78fb58c7/cloudwatch_metrics_client-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f163e61c8f65b1999ea4cbf0cdecb61c", "sha256": "50050936be3f48eb0db0b78cf0370afcbde4abab23601ae7b61e03d9c179c16e"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.5.tar.gz", "has_sig": false, "md5_digest": "f163e61c8f65b1999ea4cbf0cdecb61c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5951, "upload_time": "2019-06-17T17:37:01", "upload_time_iso_8601": "2019-06-17T17:37:01.999519Z", "url": "https://files.pythonhosted.org/packages/c1/94/847061b382476e01114b989a495eb13972f3d234ef8fb64e92c76b69b2d7/cloudwatch-metrics-client-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "6d873678bf3cc9bd32686e148c2dcfda", "sha256": "9fce839280dbf1d5a59900a33d29172f919ad38d41eda538fdfa5b0dfe842133"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6d873678bf3cc9bd32686e148c2dcfda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8150, "upload_time": "2019-06-20T12:48:36", "upload_time_iso_8601": "2019-06-20T12:48:36.127114Z", "url": "https://files.pythonhosted.org/packages/cb/57/fa317bacacefc5e56c6ce6e1e576ce8812d6389c80042347987082900bca/cloudwatch_metrics_client-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a6b6d5f5b93abdd75f23815b177306", "sha256": "1f2c0eb7faea6b6e5171da6ebc23e5507ac66632dc280f7e74b01aaea078fa3b"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.6.tar.gz", "has_sig": false, "md5_digest": "41a6b6d5f5b93abdd75f23815b177306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6075, "upload_time": "2019-06-20T12:48:37", "upload_time_iso_8601": "2019-06-20T12:48:37.604939Z", "url": "https://files.pythonhosted.org/packages/c8/4a/72c04cc6fde364e101fdf7f947c95686fda5000b9822bf3b335c55ffe1b6/cloudwatch-metrics-client-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d873678bf3cc9bd32686e148c2dcfda", "sha256": "9fce839280dbf1d5a59900a33d29172f919ad38d41eda538fdfa5b0dfe842133"}, "downloads": -1, "filename": "cloudwatch_metrics_client-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6d873678bf3cc9bd32686e148c2dcfda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8150, "upload_time": "2019-06-20T12:48:36", "upload_time_iso_8601": "2019-06-20T12:48:36.127114Z", "url": "https://files.pythonhosted.org/packages/cb/57/fa317bacacefc5e56c6ce6e1e576ce8812d6389c80042347987082900bca/cloudwatch_metrics_client-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a6b6d5f5b93abdd75f23815b177306", "sha256": "1f2c0eb7faea6b6e5171da6ebc23e5507ac66632dc280f7e74b01aaea078fa3b"}, "downloads": -1, "filename": "cloudwatch-metrics-client-0.0.6.tar.gz", "has_sig": false, "md5_digest": "41a6b6d5f5b93abdd75f23815b177306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6075, "upload_time": "2019-06-20T12:48:37", "upload_time_iso_8601": "2019-06-20T12:48:37.604939Z", "url": "https://files.pythonhosted.org/packages/c8/4a/72c04cc6fde364e101fdf7f947c95686fda5000b9822bf3b335c55ffe1b6/cloudwatch-metrics-client-0.0.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:42 2020"}