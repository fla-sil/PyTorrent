{"info": {"author": "Selim Naji, Adam Radomski and Marko Ristin", "author_email": "selim.naji@parquery.com, adam.radomski@parquery.com, marko.ristin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "pylddwrap\n=========\n.. image:: https://travis-ci.com/Parquery/pylddwrap.svg?branch=master\n    :target: https://travis-ci.com/Parquery/pylddwrap.svg?branch=master\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/Parquery/pylddwrap/badge.svg?branch=master\n    :target: https://coveralls.io/github/Parquery/pylddwrap?branch=master\n    :alt: Coverage\n\n.. image:: https://badges.frapsoft.com/os/mit/mit.png?v=103\n    :target: https://opensource.org/licenses/mit-license.php\n    :alt: MIT License\n\n.. image:: https://badge.fury.io/py/pylddwrap.svg\n    :target: https://badge.fury.io/py/pylddwrap\n    :alt: PyPI - version\n\n.. image:: https://img.shields.io/pypi/pyversions/pylddwrap.svg\n    :alt: PyPI - Python Version\n\n.. image:: https://readthedocs.org/projects/pylddwrap/badge/?version=latest\n    :target: https://pylddwrap.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nPylddwrap wraps ldd \\*nix utility to determine shared libraries required by a program.\n\nWe need to dynamically package subset of our system at deployment time. Consequently, we have to determine the\ndependencies on shared libraries of our binaries programmatically.\n\nThe output of ldd Linux command, while informative, is not structured enough to be easily integrated into a program.\nAt the time of this writing, we only found two alternative ldd wrappers on Internet\n`python-ldd <https://github.com/relip/python-ldd>`_ and `ldd.py <https://gist.github.com/masami256/1588876>`_, but their\noutput was either too basic for our use case or the project was still incipient.\n\nPylddwrap, in contrast, returns a well-structured list of the dependencies. The command-line tool outputs the\ndependencies either as a table (for visual inspection) or as a JSON-formatted string (for use with other tools).\nThe included Python module lddwrap returns a Python object with type annotations so that it can be used readily by the\ndeployment scripts and other modules.\n\nFor more information on the ldd tool, please see `ldd manual <http://man7.org/linux/man-pages/man1/ldd.1.html>`_.\n\nUsage\n=====\n\nCommand-Line Tool pylddwrap\n---------------------------\n\n* Assume we need the dependencies of the /bin/ls. The following command gives them as a table:\n\n.. code-block:: bash\n\n    pylddwrap /bin/ls\n\n* The output of the command looks like this:\n\n.. code-block:: text\n\n    soname          | path                                  | found | mem_address          | unused\n    ----------------+---------------------------------------+-------+----------------------+-------\n    linux-vdso.so.1 | None                                  | True  | (0x00007ffd8750f000) | False\n    libselinux.so.1 | /lib/x86_64-linux-gnu/libselinux.so.1 | True  | (0x00007f4e73dc3000) | True\n    libc.so.6       | /lib/x86_64-linux-gnu/libc.so.6       | True  | (0x00007f4e739f9000) | False\n    libpcre.so.3    | /lib/x86_64-linux-gnu/libpcre.so.3    | True  | (0x00007f4e73789000) | False\n    libdl.so.2      | /lib/x86_64-linux-gnu/libdl.so.2      | True  | (0x00007f4e73585000) | False\n    None            | /lib64/ld-linux-x86-64.so.2           | True  | (0x00007f4e73fe5000) | False\n    libpthread.so.0 | /lib/x86_64-linux-gnu/libpthread.so.0 | True  | (0x00007f4e73368000) | False\n\n\n* To obtain the dependencies as JSON, invoke:\n\n.. code-block:: bash\n\n    pylddwrap --format json /bin/ls\n\n* The JSON output is structured like this:\n\n.. code-block:: text\n\n  [\n    {\n      \"soname\": \"linux-vdso.so.1\",\n      \"path\": \"None\",\n      \"found\": true,\n      \"mem_address\": \"(0x00007ffed857f000)\",\n      \"unused\": false\n    },\n    ...\n  ]\n\n\n\nldwrap Python Module\n--------------------\n\nWe provide lddwrap Python module which you can integrate into your deployment scripts and other modules.\n\n* The following example shows how to list the dependencies of /bin/ls:\n\n.. code-block:: python\n\n    import pathlib\n    import lddwrap\n\n    path = pathlib.Path(\"/bin/ls\")\n    deps = lddwrap.list_dependencies(path=path)\n    for dep in deps:\n        print(dep)\n\n    \"\"\"\n    soname: linux-vdso.so.1, path: None, found: True, mem_address: (0x00007ffe8e2fb000), unused: None\n    soname: libselinux.so.1, path: /lib/x86_64-linux-gnu/libselinux.so.1, found: True, mem_address: (0x00007f7759ccc000), unused: None\n    soname: libc.so.6, path: /lib/x86_64-linux-gnu/libc.so.6, found: True, mem_address: (0x00007f7759902000), unused: None\n    ...\n    \"\"\"\n\n* List all dependencies of the /bin/ls utility and check if the direct dependencies are used.\n  If unused for list_dependencies is set to False then the unused variable of the dependencies will not be determined\n  and are therefore unknown and set to None. Otherwise information about direct usage will be retrieved and added to the\n  dependencies.\n\n.. code-block:: python\n\n    import pathlib\n    import lddwrap\n\n    path = pathlib.Path(\"/bin/ls\")\n    deps = lddwrap.list_dependencies(path=path, unused=True)\n    print(deps[1])\n    # soname: libselinux.so.1,\n    # path: /lib/x86_64-linux-gnu/libselinux.so.1,\n    # found: True,\n    # mem_address: (0x00007f5a6064a000),\n    # unused: True\n\n* Lddwrap operates normally with the environment variables of the caller. In cases where your dependencies are\n  determined differently than the current environment, you pass a separate environment (in form of a dictionary) as an argument:\n\n.. code-block:: python\n\n    import os\n    import pathlib\n    import lddwrap\n\n    env = os.environ.copy()\n    env['LD_LIBRARY_PATH'] = \"some/important/path\"\n    path = pathlib.Path(\"/bin/ls\")\n    deps = lddwrap.list_dependencies(path=path, env=env)\n\nInstallation\n============\n\n* Install pylddwrap with pip:\n\n.. code-block:: bash\n\n    pip3 install pylddwrap\n\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\nWe use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and the\ndevelopment dependencies have been installed, run:\n\n.. code-block:: bash\n\n    tox\n\n\nPre-commit Checks\n-----------------\n\nWe provide a set of pre-commit checks that lint and check code for formatting.\n\nNamely, we use:\n\n* `yapf <https://github.com/google/yapf>`_ to check the formatting.\n* The style of the docstrings is checked with `pydocstyle <https://github.com/PyCQA/pydocstyle>`_.\n* Static type analysis is performed with `mypy <http://mypy-lang.org/>`_.\n* Various linter checks are done with `pylint <https://www.pylint.org/>`_.\n\nRun the pre-commit checks locally from an activated virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Parquery/lddwrap", "keywords": "ldd dependency dependencies lddwrap pylddwrap", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "pylddwrap", "package_url": "https://pypi.org/project/pylddwrap/", "platform": "", "project_url": "https://pypi.org/project/pylddwrap/", "project_urls": {"Homepage": "http://github.com/Parquery/lddwrap"}, "release_url": "https://pypi.org/project/pylddwrap/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Wrap ldd *nix utility to determine shared libraries required by a program.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pylddwrap\">\n<h2>pylddwrap</h2>\n<a href=\"https://travis-ci.com/Parquery/pylddwrap.svg?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2c64131dcef21e362291739a9ce1c26d1625e00/68747470733a2f2f7472617669732d63692e636f6d2f50617271756572792f70796c6464777261702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Parquery/pylddwrap?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16ed7cdb2e0ca2c83dec9c2f25eb946881a83ec3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50617271756572792f70796c6464777261702f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/mit-license.php\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1de628a4413ee120c403f0a159b54394911499c1/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f6f732f6d69742f6d69742e706e673f763d313033\"></a>\n<a href=\"https://badge.fury.io/py/pylddwrap\" rel=\"nofollow\"><img alt=\"PyPI - version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce0b3f029a19f062852abc22a0a366b48686a37c/68747470733a2f2f62616467652e667572792e696f2f70792f70796c6464777261702e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aba60279c51e7fc7c795e0b15d3a49f01f5f618f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796c6464777261702e737667\">\n<a href=\"https://pylddwrap.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85509470a9c13b0c5c61b46c17115258efc190ed/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796c6464777261702f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Pylddwrap wraps ldd *nix utility to determine shared libraries required by a program.</p>\n<p>We need to dynamically package subset of our system at deployment time. Consequently, we have to determine the\ndependencies on shared libraries of our binaries programmatically.</p>\n<p>The output of ldd Linux command, while informative, is not structured enough to be easily integrated into a program.\nAt the time of this writing, we only found two alternative ldd wrappers on Internet\n<a href=\"https://github.com/relip/python-ldd\" rel=\"nofollow\">python-ldd</a> and <a href=\"https://gist.github.com/masami256/1588876\" rel=\"nofollow\">ldd.py</a>, but their\noutput was either too basic for our use case or the project was still incipient.</p>\n<p>Pylddwrap, in contrast, returns a well-structured list of the dependencies. The command-line tool outputs the\ndependencies either as a table (for visual inspection) or as a JSON-formatted string (for use with other tools).\nThe included Python module lddwrap returns a Python object with type annotations so that it can be used readily by the\ndeployment scripts and other modules.</p>\n<p>For more information on the ldd tool, please see <a href=\"http://man7.org/linux/man-pages/man1/ldd.1.html\" rel=\"nofollow\">ldd manual</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"command-line-tool-pylddwrap\">\n<h3>Command-Line Tool pylddwrap</h3>\n<ul>\n<li>Assume we need the dependencies of the /bin/ls. The following command gives them as a table:</li>\n</ul>\n<pre>pylddwrap /bin/ls\n</pre>\n<ul>\n<li>The output of the command looks like this:</li>\n</ul>\n<pre>soname          | path                                  | found | mem_address          | unused\n----------------+---------------------------------------+-------+----------------------+-------\nlinux-vdso.so.1 | None                                  | True  | (0x00007ffd8750f000) | False\nlibselinux.so.1 | /lib/x86_64-linux-gnu/libselinux.so.1 | True  | (0x00007f4e73dc3000) | True\nlibc.so.6       | /lib/x86_64-linux-gnu/libc.so.6       | True  | (0x00007f4e739f9000) | False\nlibpcre.so.3    | /lib/x86_64-linux-gnu/libpcre.so.3    | True  | (0x00007f4e73789000) | False\nlibdl.so.2      | /lib/x86_64-linux-gnu/libdl.so.2      | True  | (0x00007f4e73585000) | False\nNone            | /lib64/ld-linux-x86-64.so.2           | True  | (0x00007f4e73fe5000) | False\nlibpthread.so.0 | /lib/x86_64-linux-gnu/libpthread.so.0 | True  | (0x00007f4e73368000) | False\n</pre>\n<ul>\n<li>To obtain the dependencies as JSON, invoke:</li>\n</ul>\n<pre>pylddwrap --format json /bin/ls\n</pre>\n<ul>\n<li>The JSON output is structured like this:</li>\n</ul>\n<pre>[\n  {\n    \"soname\": \"linux-vdso.so.1\",\n    \"path\": \"None\",\n    \"found\": true,\n    \"mem_address\": \"(0x00007ffed857f000)\",\n    \"unused\": false\n  },\n  ...\n]\n</pre>\n</div>\n<div id=\"ldwrap-python-module\">\n<h3>ldwrap Python Module</h3>\n<p>We provide lddwrap Python module which you can integrate into your deployment scripts and other modules.</p>\n<ul>\n<li>The following example shows how to list the dependencies of /bin/ls:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lddwrap</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/bin/ls\"</span><span class=\"p\">)</span>\n<span class=\"n\">deps</span> <span class=\"o\">=</span> <span class=\"n\">lddwrap</span><span class=\"o\">.</span><span class=\"n\">list_dependencies</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">dep</span> <span class=\"ow\">in</span> <span class=\"n\">deps</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"\nsoname: linux-vdso.so.1, path: None, found: True, mem_address: (0x00007ffe8e2fb000), unused: None\nsoname: libselinux.so.1, path: /lib/x86_64-linux-gnu/libselinux.so.1, found: True, mem_address: (0x00007f7759ccc000), unused: None\nsoname: libc.so.6, path: /lib/x86_64-linux-gnu/libc.so.6, found: True, mem_address: (0x00007f7759902000), unused: None\n...\n\"\"\"</span>\n</pre>\n<ul>\n<li>List all dependencies of the /bin/ls utility and check if the direct dependencies are used.\nIf unused for list_dependencies is set to False then the unused variable of the dependencies will not be determined\nand are therefore unknown and set to None. Otherwise information about direct usage will be retrieved and added to the\ndependencies.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lddwrap</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/bin/ls\"</span><span class=\"p\">)</span>\n<span class=\"n\">deps</span> <span class=\"o\">=</span> <span class=\"n\">lddwrap</span><span class=\"o\">.</span><span class=\"n\">list_dependencies</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">unused</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">deps</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># soname: libselinux.so.1,</span>\n<span class=\"c1\"># path: /lib/x86_64-linux-gnu/libselinux.so.1,</span>\n<span class=\"c1\"># found: True,</span>\n<span class=\"c1\"># mem_address: (0x00007f5a6064a000),</span>\n<span class=\"c1\"># unused: True</span>\n</pre>\n<ul>\n<li>Lddwrap operates normally with the environment variables of the caller. In cases where your dependencies are\ndetermined differently than the current environment, you pass a separate environment (in form of a dictionary) as an argument:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">lddwrap</span>\n\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">env</span><span class=\"p\">[</span><span class=\"s1\">'LD_LIBRARY_PATH'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"some/important/path\"</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"/bin/ls\"</span><span class=\"p\">)</span>\n<span class=\"n\">deps</span> <span class=\"o\">=</span> <span class=\"n\">lddwrap</span><span class=\"o\">.</span><span class=\"n\">list_dependencies</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"n\">env</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Install pylddwrap with pip:</li>\n</ul>\n<pre>pip3 install pylddwrap\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>We use tox for testing and packaging the distribution. Assuming that the virtual environment has been activated and the\ndevelopment dependencies have been installed, run:</p>\n<pre>tox\n</pre>\n<div id=\"pre-commit-checks\">\n<h3>Pre-commit Checks</h3>\n<p>We provide a set of pre-commit checks that lint and check code for formatting.</p>\n<p>Namely, we use:</p>\n<ul>\n<li><a href=\"https://github.com/google/yapf\" rel=\"nofollow\">yapf</a> to check the formatting.</li>\n<li>The style of the docstrings is checked with <a href=\"https://github.com/PyCQA/pydocstyle\" rel=\"nofollow\">pydocstyle</a>.</li>\n<li>Static type analysis is performed with <a href=\"http://mypy-lang.org/\" rel=\"nofollow\">mypy</a>.</li>\n<li>Various linter checks are done with <a href=\"https://www.pylint.org/\" rel=\"nofollow\">pylint</a>.</li>\n</ul>\n<p>Run the pre-commit checks locally from an activated virtual environment with development dependencies:</p>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6548183, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1afbab449cd32b3ce96e5c93930b8b03", "sha256": "d4cc62822604cd958be3c9cbf19238807f7f74b498e0eeaa65b243edcdf22455"}, "downloads": -1, "filename": "pylddwrap-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1afbab449cd32b3ce96e5c93930b8b03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9287, "upload_time": "2018-10-29T07:05:52", "upload_time_iso_8601": "2018-10-29T07:05:52.500308Z", "url": "https://files.pythonhosted.org/packages/76/80/6bd47c710f8abca02815edaacca0afb1c5fce84fcb448262de1b2873edfd/pylddwrap-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e86461f9d3bffc7b82687052303ce84a", "sha256": "171a39fc7feb33e607706c57c08373ceb2f6fd4362af9241ccc65e80c948ccdf"}, "downloads": -1, "filename": "pylddwrap-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e86461f9d3bffc7b82687052303ce84a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2018-10-29T08:16:15", "upload_time_iso_8601": "2018-10-29T08:16:15.954410Z", "url": "https://files.pythonhosted.org/packages/e7/e1/5ff0cbb7f06a7b1bdde316d0437c9c34600db64e07e46db5e70fec1a2f6a/pylddwrap-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e86461f9d3bffc7b82687052303ce84a", "sha256": "171a39fc7feb33e607706c57c08373ceb2f6fd4362af9241ccc65e80c948ccdf"}, "downloads": -1, "filename": "pylddwrap-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e86461f9d3bffc7b82687052303ce84a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2018-10-29T08:16:15", "upload_time_iso_8601": "2018-10-29T08:16:15.954410Z", "url": "https://files.pythonhosted.org/packages/e7/e1/5ff0cbb7f06a7b1bdde316d0437c9c34600db64e07e46db5e70fec1a2f6a/pylddwrap-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:16 2020"}