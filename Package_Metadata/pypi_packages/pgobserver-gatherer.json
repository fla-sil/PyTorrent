{"info": {"author": "kmoppel", "author_email": "kaarel.moppel@zalando.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Database"], "description": "==============\npgobserver_gatherer\n==============\n\nA postgres metrics collection daemon, successor of the original [PGObserver](https://github.com/zalando/PGObserver) Java gathering daemon\n\nNB! BETA\n\n\nInstallation\n-----------------\n\n- Bootstrap the database (datastore) that will keep the configuration and metrics data for Postgres databases you want to monitor\n- pip3 install --upgrade pgobserver_gatherer\n- python3 -m pgobserver_gatherer --init  # to create a config file with connect details to your datastore\n- python3 -m pgobserver_gatherer -v  # to run the daemon in verbose mode\n\nImprovements compared to old gatherer\n-----------------\n\n- automatic detection of gatherer configuration changes (hosts.host_settings column)\n- connection pooling to datastore\n- generalized data storing, less boilerplate for gatherers\n- single transaction bulk inserts (copy protocol)\n- connectivity check to all DBs under monitoring on startup\n- single host/single gatherer test mode\n- \"delta engine\" diffing engine for getting real changes\n- custom output plugins. separate processes that get incoming datapoints via queues\n\n\nOperating principles\n-----------------\n\n1. gather data\n2. store to postgres as currently - optional\n3. feed the analytics framework (delta engine) that calculates the diffs for cumulative columns\n4. feed the data coming from delta engine to plugins (simplest one being the \"console\" outputting plugin)\n - config files describing handlers and their formats and wanted datasets. they can have extra config files for output\n - loading of modules and feeding them when data comes in", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zalando/PGObserver", "keywords": "postgres postgresql pg database monitoring", "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "pgobserver-gatherer", "package_url": "https://pypi.org/project/pgobserver-gatherer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pgobserver-gatherer/", "project_urls": {"Homepage": "https://github.com/zalando/PGObserver"}, "release_url": "https://pypi.org/project/pgobserver-gatherer/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "PostgreSQL metrics gathering daemon", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==============<br>pgobserver_gatherer<br>==============<br><br>A postgres metrics collection daemon, successor of the original [PGObserver](https://github.com/zalando/PGObserver) Java gathering daemon<br><br>NB! BETA<br><br><br>Installation<br>-----------------<br><br>- Bootstrap the database (datastore) that will keep the configuration and metrics data for Postgres databases you want to monitor<br>- pip3 install --upgrade pgobserver_gatherer<br>- python3 -m pgobserver_gatherer --init  # to create a config file with connect details to your datastore<br>- python3 -m pgobserver_gatherer -v  # to run the daemon in verbose mode<br><br>Improvements compared to old gatherer<br>-----------------<br><br>- automatic detection of gatherer configuration changes (hosts.host_settings column)<br>- connection pooling to datastore<br>- generalized data storing, less boilerplate for gatherers<br>- single transaction bulk inserts (copy protocol)<br>- connectivity check to all DBs under monitoring on startup<br>- single host/single gatherer test mode<br>- \"delta engine\" diffing engine for getting real changes<br>- custom output plugins. separate processes that get incoming datapoints via queues<br><br><br>Operating principles<br>-----------------<br><br>1. gather data<br>2. store to postgres as currently - optional<br>3. feed the analytics framework (delta engine) that calculates the diffs for cumulative columns<br>4. feed the data coming from delta engine to plugins (simplest one being the \"console\" outputting plugin)<br> - config files describing handlers and their formats and wanted datasets. they can have extra config files for output<br> - loading of modules and feeding them when data comes in\n          </div>"}, "last_serial": 2091077, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "6a1f5c6b5c4da39821119c94c07f6d54", "sha256": "360640002f88751689f3410f6b395c5a9b7ad2974e189871466b6c51d1bc9f51"}, "downloads": -1, "filename": "pgobserver_gatherer-0.1.1-py3.4.egg", "has_sig": false, "md5_digest": "6a1f5c6b5c4da39821119c94c07f6d54", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 92954, "upload_time": "2016-04-29T14:57:15", "upload_time_iso_8601": "2016-04-29T14:57:15.994309Z", "url": "https://files.pythonhosted.org/packages/5d/0c/75d64499dc0a39d27b7ff1571323451b1844901ddd65d5a1d329bb13f732/pgobserver_gatherer-0.1.1-py3.4.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a1f5c6b5c4da39821119c94c07f6d54", "sha256": "360640002f88751689f3410f6b395c5a9b7ad2974e189871466b6c51d1bc9f51"}, "downloads": -1, "filename": "pgobserver_gatherer-0.1.1-py3.4.egg", "has_sig": false, "md5_digest": "6a1f5c6b5c4da39821119c94c07f6d54", "packagetype": "bdist_egg", "python_version": "3.4", "requires_python": null, "size": 92954, "upload_time": "2016-04-29T14:57:15", "upload_time_iso_8601": "2016-04-29T14:57:15.994309Z", "url": "https://files.pythonhosted.org/packages/5d/0c/75d64499dc0a39d27b7ff1571323451b1844901ddd65d5a1d329bb13f732/pgobserver_gatherer-0.1.1-py3.4.egg", "yanked": false}], "timestamp": "Fri May  8 02:55:45 2020"}