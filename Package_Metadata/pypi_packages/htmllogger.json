{"info": {"author": "Prashant Pawar", "author_email": "prashantpawar7090@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "htmllogger\n=====================\n\nPython library provides customized Test Report for selenium or any other automation framework\n\nIntroduction.\n============\n\n* A htmllogger is designed inorder to provide customized logs for autumated tests.\n* So user can able to write step log and test case details.\n\n  \n\nMain Features:\n=============\n\n* Create an interactive html report for automation suite.\n* It can be easily integrated with unit testing frameworks eg. unittest,pytest\n* It provides three methods inorder to generate report for tests.\n* It combines execution result of all tests which are executed in batch.\n\nInstallation\n=============\npip install:\n\n```shell\n> pip install htmllogger\n```\nPre-Requisite\n=============\n1) You will have to initialise htmllogger object to start use of reporting functions.\n2) At the start of each test you have to use 'assert_testcase_log(\"Test_Case_name\")',\n3) Inorder to detailing of testcase steps you will have to use 'assert_step_log('Test_step_details')'\n4) To handle failures you will write your test in 'Try Except' block and in except block call \n   'assert_step_fail_log(driver, str(e))' pass First argument as driver object to capture screenshot of failure.\n    second argument is except object converted in string format.\n\t\nFollow below examples for more understanding...\t\n\t\nExamples\n=============\n1. Python - Unittest\n\n```python\nimport unittest\nfrom selenium import webdriver\nfrom htmllogger.Htmllogger import HTMlLogger\nfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n\nclass InputFormsCheck2(unittest.TestCase):\n\n    # Opening browser.\n    def setUp(self):\n        self.logger = HTMlLogger('Path of folder where we need to create report')\n        binary = FirefoxBinary('Binary Path for your browser')\n        self.driver = webdriver.Firefox(firefox_binary=binary,\n                                                executable_path=r\"/geckodriver.exe\")\n\n    # Testing Single Input Field.\n    def test_singleInputField(self):\n        self.logger.assert_testcase_log(\"Test Single Input Field\")   # ****Writting Test case Name\n        try:\n            pageUrl = \"http://www.seleniumeasy.com/test/basic-first-form-demo.html\"\n            driver = self.driver\n            driver.maximize_window()\n            driver.get(pageUrl)\n\n            # Finding \"Single input form\" input text field by id. And sending keys(entering data) in it.\n            eleUserMessage = driver.find_element_by_id(\"user-message\")\n            eleUserMessage.clear()\n            eleUserMessage.send_keys(\"Test Python\")\n            self.logger.assert_step_log(\"Entered text [Test Python] in [user-message] EditBox.\")         # ****Writting step log\n            # Finding \"Show Your Message\" button element by css selector using both id and class name. And clicking it.\n            eleShowMsgBtn = driver.find_element_by_css_selector('#get-input > .btn')\n            eleShowMsgBtn.click()\n            self.logger.assert_step_log(\"Clicked on [Show Message] Button.\")                         # ****Writting step log\n            # Checking whether the input text and output text are same using assertion.\n            eleYourMsg = driver.find_element_by_id(\"display\")\n            assert \"Test Python\" in eleYourMsg.text\n        except Exception as e:\n            self.logger.assert_step_fail_log(driver, str(e))        # Capturing failure\n\n    # Closing the browser.\n    def tearDown(self):\n        self.driver.close()\n\n\n# This line sets the variable \u201c__name__\u201d to have a value \u201c__main__\u201d.\n# If this file is being imported from another module then \u201c__name__\u201d will be set to the other module's name.\nif __name__ == \"__main__\":\n    unittest.main()\n```\n2. Python - Pytest\n\nInside test_Login.py\n```python\nimport pytest\nfrom selenium import webdriver\nfrom htmllogger.Htmllogger import HTMlLogger\nfrom selenium.webdriver.firefox.firefox_binary import FirefoxBinary\n\n@pytest.fixture()\ndef setup(request):\n    print(\"initiating driver\")\n    logger = HTMlLogger('Path of folder where we need to create report')\n    binary = FirefoxBinary('C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe')\n    driver = webdriver.Firefox(firefox_binary=binary,executable_path=r\"D:/SeleniumTest/SeleniumTest/MainResources/drivers/geckodriver.exe\")\n    request.instance.driver = driver\n    request.instance.logger = logger\n    driver.get(\"http://seleniumeasy.com/test\")\n    driver.maximize_window()\n\n    yield driver\n    driver.close()\n\n@pytest.mark.usefixtures(\"setup\")\nclass TestExample:\n    def test_title(self):\n        try:\n            self.logger.assert_testcase_log(\"Testcase :Testing Title\")            # ****Writting Test case Name\n            print(\"Verify title...\")\n            assert \"Selenium Easy\" in self.driver.title\n            self.logger.assert_step_log(\"Successfully verified title\")            # ****Writting step log\n        except Exception as e:\n            self.logger.assert_step_fail_log(self.driver, str(e))\n    def test_content_text(self):\n        self.logger.assert_testcase_log(\"Testcase : Testing Content\")\n        try:\n            print(\"Verify content on the page...\")\n            centerText = self.driver.find_element_by_css_selector('.tab-content .text-center').text\n            self.logger.assert_step_log(\"Verify content on page\")\n            assert \"WELCOME TO SELENIUM EASY DEMO\" == centerText\n        except Exception as e:\n            self.logger.assert_step_fail_log(self.driver, str(e))      #****Capturing failure\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PrashantP9070/htmllogger", "keywords": "selenium,page object model,pom,pages,page factory,htmllogger,html report", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "htmllogger", "package_url": "https://pypi.org/project/htmllogger/", "platform": "", "project_url": "https://pypi.org/project/htmllogger/", "project_urls": {"Homepage": "https://github.com/PrashantP9070/htmllogger"}, "release_url": "https://pypi.org/project/htmllogger/1.2/", "requires_dist": null, "requires_python": "", "summary": "Python library provides interactive test report for selenium", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>htmllogger</h1>\n<p>Python library provides customized Test Report for selenium or any other automation framework</p>\n<h1>Introduction.</h1>\n<ul>\n<li>A htmllogger is designed inorder to provide customized logs for autumated tests.</li>\n<li>So user can able to write step log and test case details.</li>\n</ul>\n<h1>Main Features:</h1>\n<ul>\n<li>Create an interactive html report for automation suite.</li>\n<li>It can be easily integrated with unit testing frameworks eg. unittest,pytest</li>\n<li>It provides three methods inorder to generate report for tests.</li>\n<li>It combines execution result of all tests which are executed in batch.</li>\n</ul>\n<h1>Installation</h1>\n<p>pip install:</p>\n<pre>&gt; pip install htmllogger\n</pre>\n<h1>Pre-Requisite</h1>\n<ol>\n<li>You will have to initialise htmllogger object to start use of reporting functions.</li>\n<li>At the start of each test you have to use 'assert_testcase_log(\"Test_Case_name\")',</li>\n<li>Inorder to detailing of testcase steps you will have to use 'assert_step_log('Test_step_details')'</li>\n<li>To handle failures you will write your test in 'Try Except' block and in except block call\n'assert_step_fail_log(driver, str(e))' pass First argument as driver object to capture screenshot of failure.\nsecond argument is except object converted in string format.</li>\n</ol>\n<p>Follow below examples for more understanding...</p>\n<h1>Examples</h1>\n<ol>\n<li>Python - Unittest</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htmllogger.Htmllogger</span> <span class=\"kn\">import</span> <span class=\"n\">HTMlLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.firefox.firefox_binary</span> <span class=\"kn\">import</span> <span class=\"n\">FirefoxBinary</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">InputFormsCheck2</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Opening browser.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">HTMlLogger</span><span class=\"p\">(</span><span class=\"s1\">'Path of folder where we need to create report'</span><span class=\"p\">)</span>\n        <span class=\"n\">binary</span> <span class=\"o\">=</span> <span class=\"n\">FirefoxBinary</span><span class=\"p\">(</span><span class=\"s1\">'Binary Path for your browser'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">firefox_binary</span><span class=\"o\">=</span><span class=\"n\">binary</span><span class=\"p\">,</span>\n                                                <span class=\"n\">executable_path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"/geckodriver.exe\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Testing Single Input Field.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_singleInputField</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_testcase_log</span><span class=\"p\">(</span><span class=\"s2\">\"Test Single Input Field\"</span><span class=\"p\">)</span>   <span class=\"c1\"># ****Writting Test case Name</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">pageUrl</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://www.seleniumeasy.com/test/basic-first-form-demo.html\"</span>\n            <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span>\n            <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">maximize_window</span><span class=\"p\">()</span>\n            <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pageUrl</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Finding \"Single input form\" input text field by id. And sending keys(entering data) in it.</span>\n            <span class=\"n\">eleUserMessage</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_id</span><span class=\"p\">(</span><span class=\"s2\">\"user-message\"</span><span class=\"p\">)</span>\n            <span class=\"n\">eleUserMessage</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n            <span class=\"n\">eleUserMessage</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s2\">\"Test Python\"</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_log</span><span class=\"p\">(</span><span class=\"s2\">\"Entered text [Test Python] in [user-message] EditBox.\"</span><span class=\"p\">)</span>         <span class=\"c1\"># ****Writting step log</span>\n            <span class=\"c1\"># Finding \"Show Your Message\" button element by css selector using both id and class name. And clicking it.</span>\n            <span class=\"n\">eleShowMsgBtn</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_css_selector</span><span class=\"p\">(</span><span class=\"s1\">'#get-input &gt; .btn'</span><span class=\"p\">)</span>\n            <span class=\"n\">eleShowMsgBtn</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_log</span><span class=\"p\">(</span><span class=\"s2\">\"Clicked on [Show Message] Button.\"</span><span class=\"p\">)</span>                         <span class=\"c1\"># ****Writting step log</span>\n            <span class=\"c1\"># Checking whether the input text and output text are same using assertion.</span>\n            <span class=\"n\">eleYourMsg</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_id</span><span class=\"p\">(</span><span class=\"s2\">\"display\"</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"s2\">\"Test Python\"</span> <span class=\"ow\">in</span> <span class=\"n\">eleYourMsg</span><span class=\"o\">.</span><span class=\"n\">text</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_fail_log</span><span class=\"p\">(</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>        <span class=\"c1\"># Capturing failure</span>\n\n    <span class=\"c1\"># Closing the browser.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># This line sets the variable \u201c__name__\u201d to have a value \u201c__main__\u201d.</span>\n<span class=\"c1\"># If this file is being imported from another module then \u201c__name__\u201d will be set to the other module's name.</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>Python - Pytest</li>\n</ol>\n<p>Inside test_Login.py</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium</span> <span class=\"kn\">import</span> <span class=\"n\">webdriver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">htmllogger.Htmllogger</span> <span class=\"kn\">import</span> <span class=\"n\">HTMlLogger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.firefox.firefox_binary</span> <span class=\"kn\">import</span> <span class=\"n\">FirefoxBinary</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">setup</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"initiating driver\"</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">HTMlLogger</span><span class=\"p\">(</span><span class=\"s1\">'Path of folder where we need to create report'</span><span class=\"p\">)</span>\n    <span class=\"n\">binary</span> <span class=\"o\">=</span> <span class=\"n\">FirefoxBinary</span><span class=\"p\">(</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Program Files</span><span class=\"se\">\\\\</span><span class=\"s1\">Mozilla Firefox</span><span class=\"se\">\\\\</span><span class=\"s1\">firefox.exe'</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">Firefox</span><span class=\"p\">(</span><span class=\"n\">firefox_binary</span><span class=\"o\">=</span><span class=\"n\">binary</span><span class=\"p\">,</span><span class=\"n\">executable_path</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"D:/SeleniumTest/SeleniumTest/MainResources/drivers/geckodriver.exe\"</span><span class=\"p\">)</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">driver</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://seleniumeasy.com/test\"</span><span class=\"p\">)</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">maximize_window</span><span class=\"p\">()</span>\n\n    <span class=\"k\">yield</span> <span class=\"n\">driver</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">usefixtures</span><span class=\"p\">(</span><span class=\"s2\">\"setup\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestExample</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_testcase_log</span><span class=\"p\">(</span><span class=\"s2\">\"Testcase :Testing Title\"</span><span class=\"p\">)</span>            <span class=\"c1\"># ****Writting Test case Name</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Verify title...\"</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"s2\">\"Selenium Easy\"</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">title</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_log</span><span class=\"p\">(</span><span class=\"s2\">\"Successfully verified title\"</span><span class=\"p\">)</span>            <span class=\"c1\"># ****Writting step log</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_fail_log</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_content_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_testcase_log</span><span class=\"p\">(</span><span class=\"s2\">\"Testcase : Testing Content\"</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Verify content on the page...\"</span><span class=\"p\">)</span>\n            <span class=\"n\">centerText</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_css_selector</span><span class=\"p\">(</span><span class=\"s1\">'.tab-content .text-center'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_log</span><span class=\"p\">(</span><span class=\"s2\">\"Verify content on page\"</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"s2\">\"WELCOME TO SELENIUM EASY DEMO\"</span> <span class=\"o\">==</span> <span class=\"n\">centerText</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">assert_step_fail_log</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">driver</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>      <span class=\"c1\">#****Capturing failure</span>\n</pre>\n\n          </div>"}, "last_serial": 6262263, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5e11c7f2eaaaf1e3680d307fc403c972", "sha256": "a47ac5178daf0710788e4f8a2c932f906c90880faaadbc41932036cd2f9390cd"}, "downloads": -1, "filename": "htmllogger-0.1.tar.gz", "has_sig": false, "md5_digest": "5e11c7f2eaaaf1e3680d307fc403c972", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61088, "upload_time": "2019-10-08T14:36:12", "upload_time_iso_8601": "2019-10-08T14:36:12.414782Z", "url": "https://files.pythonhosted.org/packages/77/5e/de04e698d3c52582dcfdb88af8ed2b14dff7c9d81237f5c1da9414c5decc/htmllogger-0.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "ad96655d874544e54bd3218a5af795ae", "sha256": "488fc674c73fba5e330c1008c56f6b91d24d28972db03fc63d4cdceba67a754e"}, "downloads": -1, "filename": "htmllogger-1.2.tar.gz", "has_sig": false, "md5_digest": "ad96655d874544e54bd3218a5af795ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61119, "upload_time": "2019-12-08T14:27:58", "upload_time_iso_8601": "2019-12-08T14:27:58.092169Z", "url": "https://files.pythonhosted.org/packages/23/bc/f7cd004e51aaa3df6429203e061ac324c4da7715a11ed15da211577c815c/htmllogger-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad96655d874544e54bd3218a5af795ae", "sha256": "488fc674c73fba5e330c1008c56f6b91d24d28972db03fc63d4cdceba67a754e"}, "downloads": -1, "filename": "htmllogger-1.2.tar.gz", "has_sig": false, "md5_digest": "ad96655d874544e54bd3218a5af795ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61119, "upload_time": "2019-12-08T14:27:58", "upload_time_iso_8601": "2019-12-08T14:27:58.092169Z", "url": "https://files.pythonhosted.org/packages/23/bc/f7cd004e51aaa3df6429203e061ac324c4da7715a11ed15da211577c815c/htmllogger-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:15 2020"}