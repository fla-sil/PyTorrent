{"info": {"author": "Brent Spector", "author_email": "brent.spector@yahoo.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "Urban Rivals Collection Management API (urcollectionmanager)\n============================================================\n\nA module to support reading player purchase history data and\nstoring it in a database.\n\nBasic Use:\n    #) Import `api` from `urcollectionmanager`\n    #) Create a request.Session and pass it, along with\n       your credentials to `session_connect_to_ur`\n    #) Pass that same session (now authenticated) to\n       `get_purchase_history` along with the number of\n       pages to scrape.\n    #) Pass the result to `convert_purchase_history`\n\n        Optionally: Pass result to your own HTML parser.\n\n    #) You now have a list of Purchase objects that contain\n       all relevant information available from the purchase\n       history page.\n\nDatabase Use:\n    #) Run `connect_and_initialize_database` if you have a\n       particular database location you want to connect to.\n       By default this will connect to `data/collection.sqlite`\n    #) Pass a list of Purchase objects to `write_history_to_database`\n\n        If using `convert_purchase_history`, you will need to flatten\n        the list of lists\n\n    #) Once the database has Purchase objects in it, you can\n       run `get_history_from_database` to retrieve them.\n\nDev\n---\nHow To Use Tools:\n    Poetry_\n        - To run the project (preferably configure venv first)\n\n        >>> poetry install\n\n        - To configure your venv\n\n        >>> python -m venv /path/to/new/virtual/environment\n        >>> poetry env info\n\n            - If `env info` does not match your path, try manually running \\\n              `Scripts/activate` inside that environment\n\n        - To add a dependency (add a -D if it's only for development)\n\n        >>> poetry add <dependency>\n\n    Commitizen_\n        >>> git add\n        >>> cz c\n\n    - More options can be found under options under Commitizen_\n\n    PreCommit_\n        Update .pre-commit-config.yaml, then run\n\n    >>> pre-commit install\n    >>> pre-commit run --all-files\n\n    - More hook plugins can be found at PreCommitHooks_\n\nTODO:\n\n- Use UR-API_ to collect player data. UR-API-Example_\n- Default to file output (excel or some form of that)\n- Testing (pytest, Coverage-py_)\n- Documentation (Sphinx_)\n\nNot Required at this Time:\n\n- Black_\n- iSort_\n\n.. _UR-API: https://www.urban-rivals.com/api/developer/\n.. _UR-API-Example: https://github.com/Buscatrufas/UrbanRivals/blob/master/index.php\n.. _Coverage-py: https://coverage.readthedocs.io/en/latest/config.html\n.. _Sphinx: https://www.sphinx-doc.org/en/master/\n.. _AutoPEP8: https://github.com/hhatto/autopep8#usage\n.. _Black: https://github.com/psf/black#version-control-integration\n.. _iSort: https://github.com/pre-commit/mirrors-isort\n.. _Commitizen: https://woile.github.io/commitizen/\n.. _PreCommit: https://pre-commit.com/\n.. _PreCommitHooks: https://pre-commit.com/hooks.html\n.. _Poetry: https://python-poetry.org/docs/cli/\n.. _PypiToken: https://pypi.org/help/#apitoken", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brentspector/urcollectionmanager", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "urcollectionmanager", "package_url": "https://pypi.org/project/urcollectionmanager/", "platform": "", "project_url": "https://pypi.org/project/urcollectionmanager/", "project_urls": {"Homepage": "https://github.com/brentspector/urcollectionmanager", "Repository": "https://github.com/brentspector/urcollectionmanager"}, "release_url": "https://pypi.org/project/urcollectionmanager/1.0.1/", "requires_dist": ["requests (>=2.23.0,<3.0.0)", "bs4 (>=0.0.1,<0.0.2)", "sqlalchemy (>=1.3.15,<2.0.0)"], "requires_python": ">=3.8.0,<4.0.0", "summary": "API for Urban Rivals collection management", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A module to support reading player purchase history data and\nstoring it in a database.</p>\n<dl>\n<dt>Basic Use:</dt>\n<dd><ol>\n<li><p>Import <cite>api</cite> from <cite>urcollectionmanager</cite></p>\n</li>\n<li><p>Create a request.Session and pass it, along with\nyour credentials to <cite>session_connect_to_ur</cite></p>\n</li>\n<li><p>Pass that same session (now authenticated) to\n<cite>get_purchase_history</cite> along with the number of\npages to scrape.</p>\n</li>\n<li><p>Pass the result to <cite>convert_purchase_history</cite></p>\n<blockquote>\n<p>Optionally: Pass result to your own HTML parser.</p>\n</blockquote>\n</li>\n<li><p>You now have a list of Purchase objects that contain\nall relevant information available from the purchase\nhistory page.</p>\n</li>\n</ol>\n</dd>\n<dt>Database Use:</dt>\n<dd><ol>\n<li><p>Run <cite>connect_and_initialize_database</cite> if you have a\nparticular database location you want to connect to.\nBy default this will connect to <cite>data/collection.sqlite</cite></p>\n</li>\n<li><p>Pass a list of Purchase objects to <cite>write_history_to_database</cite></p>\n<blockquote>\n<p>If using <cite>convert_purchase_history</cite>, you will need to flatten\nthe list of lists</p>\n</blockquote>\n</li>\n<li><p>Once the database has Purchase objects in it, you can\nrun <cite>get_history_from_database</cite> to retrieve them.</p>\n</li>\n</ol>\n</dd>\n</dl>\n<div id=\"dev\">\n<h2>Dev</h2>\n<dl>\n<dt>How To Use Tools:</dt>\n<dd><dl>\n<dt><a href=\"https://python-poetry.org/docs/cli/\" rel=\"nofollow\">Poetry</a></dt>\n<dd><ul>\n<li>To run the project (preferably configure venv first)</li>\n</ul>\n<pre>&gt;&gt;&gt; poetry install\n</pre>\n<ul>\n<li>To configure your venv</li>\n</ul>\n<pre>&gt;&gt;&gt; python -m venv /path/to/new/virtual/environment\n&gt;&gt;&gt; poetry env info\n</pre>\n<blockquote>\n<ul>\n<li>If <cite>env info</cite> does not match your path, try manually running <cite>Scripts/activate</cite> inside that environment</li>\n</ul>\n</blockquote>\n<ul>\n<li>To add a dependency (add a -D if it\u2019s only for development)</li>\n</ul>\n<pre>&gt;&gt;&gt; poetry add &lt;dependency&gt;\n</pre>\n</dd>\n<dt><a href=\"https://woile.github.io/commitizen/\" rel=\"nofollow\">Commitizen</a></dt>\n<dd><pre>&gt;&gt;&gt; git add\n&gt;&gt;&gt; cz c\n</pre>\n</dd>\n</dl>\n<ul>\n<li>More options can be found under options under <a href=\"https://woile.github.io/commitizen/\" rel=\"nofollow\">Commitizen</a></li>\n</ul>\n<dl>\n<dt><a href=\"https://pre-commit.com/\" rel=\"nofollow\">PreCommit</a></dt>\n<dd>Update .pre-commit-config.yaml, then run</dd>\n</dl>\n<pre>&gt;&gt;&gt; pre-commit install\n&gt;&gt;&gt; pre-commit run --all-files\n</pre>\n<ul>\n<li>More hook plugins can be found at <a href=\"https://pre-commit.com/hooks.html\" rel=\"nofollow\">PreCommitHooks</a></li>\n</ul>\n</dd>\n</dl>\n<p>TODO:</p>\n<ul>\n<li>Use <a href=\"https://www.urban-rivals.com/api/developer/\" rel=\"nofollow\">UR-API</a> to collect player data. <a href=\"https://github.com/Buscatrufas/UrbanRivals/blob/master/index.php\" rel=\"nofollow\">UR-API-Example</a></li>\n<li>Default to file output (excel or some form of that)</li>\n<li>Testing (pytest, <a href=\"https://coverage.readthedocs.io/en/latest/config.html\" rel=\"nofollow\">Coverage-py</a>)</li>\n<li>Documentation (<a href=\"https://www.sphinx-doc.org/en/master/\" rel=\"nofollow\">Sphinx</a>)</li>\n</ul>\n<p>Not Required at this Time:</p>\n<ul>\n<li><a href=\"https://github.com/psf/black#version-control-integration\" rel=\"nofollow\">Black</a></li>\n<li><a href=\"https://github.com/pre-commit/mirrors-isort\" rel=\"nofollow\">iSort</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6839148, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "27d3b58031bc89459f28079917c2c4d3", "sha256": "b1ee326acedcc6bdf148724197beb22dafc5d17bcb958b1b84f964066ba76e67"}, "downloads": -1, "filename": "urcollectionmanager-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "27d3b58031bc89459f28079917c2c4d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0,<4.0.0", "size": 8653, "upload_time": "2020-03-18T17:11:40", "upload_time_iso_8601": "2020-03-18T17:11:40.812183Z", "url": "https://files.pythonhosted.org/packages/8b/59/26a16731d64a58057855d6325eaaaca878ab294eeae4a8aea224d0357309/urcollectionmanager-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55ca766f8f49efd270ec2e73828a36b5", "sha256": "898a8464ebb77dfce43ee949ee54be45380e65c834b2ddc873bd74d4ddee0d1f"}, "downloads": -1, "filename": "urcollectionmanager-1.0.0.tar.gz", "has_sig": false, "md5_digest": "55ca766f8f49efd270ec2e73828a36b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0,<4.0.0", "size": 7741, "upload_time": "2020-03-18T17:11:42", "upload_time_iso_8601": "2020-03-18T17:11:42.678874Z", "url": "https://files.pythonhosted.org/packages/e0/2d/23b23a9e0a8391ea16b0359e2eb5d188e43c7a64e95a2d947b14aa82ff2f/urcollectionmanager-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e0d287702c2244812fd896b8295eb45c", "sha256": "20cac812327f33823e106b929feab37a0ce151c87da108eceee6675055a41c1f"}, "downloads": -1, "filename": "urcollectionmanager-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0d287702c2244812fd896b8295eb45c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0,<4.0.0", "size": 8875, "upload_time": "2020-03-18T20:12:20", "upload_time_iso_8601": "2020-03-18T20:12:20.830545Z", "url": "https://files.pythonhosted.org/packages/36/be/e1e301d9eafb38acd69a2a513ea81685122c1215532f93fabfd3b6e4b131/urcollectionmanager-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47d03b28e80f7271a2ab04fcf0d33f3a", "sha256": "91e10e7e25ca210fa0ceca08d38473fb3209cbf40174ef8d3f20aeaac8d59e9f"}, "downloads": -1, "filename": "urcollectionmanager-1.0.1.tar.gz", "has_sig": false, "md5_digest": "47d03b28e80f7271a2ab04fcf0d33f3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0,<4.0.0", "size": 8030, "upload_time": "2020-03-18T20:12:22", "upload_time_iso_8601": "2020-03-18T20:12:22.306709Z", "url": "https://files.pythonhosted.org/packages/e5/9b/e29763e65e62d1c55fe1985fd0ec88cb29dc2c4b015a70a58cf51356fc7c/urcollectionmanager-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e0d287702c2244812fd896b8295eb45c", "sha256": "20cac812327f33823e106b929feab37a0ce151c87da108eceee6675055a41c1f"}, "downloads": -1, "filename": "urcollectionmanager-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0d287702c2244812fd896b8295eb45c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8.0,<4.0.0", "size": 8875, "upload_time": "2020-03-18T20:12:20", "upload_time_iso_8601": "2020-03-18T20:12:20.830545Z", "url": "https://files.pythonhosted.org/packages/36/be/e1e301d9eafb38acd69a2a513ea81685122c1215532f93fabfd3b6e4b131/urcollectionmanager-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47d03b28e80f7271a2ab04fcf0d33f3a", "sha256": "91e10e7e25ca210fa0ceca08d38473fb3209cbf40174ef8d3f20aeaac8d59e9f"}, "downloads": -1, "filename": "urcollectionmanager-1.0.1.tar.gz", "has_sig": false, "md5_digest": "47d03b28e80f7271a2ab04fcf0d33f3a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8.0,<4.0.0", "size": 8030, "upload_time": "2020-03-18T20:12:22", "upload_time_iso_8601": "2020-03-18T20:12:22.306709Z", "url": "https://files.pythonhosted.org/packages/e5/9b/e29763e65e62d1c55fe1985fd0ec88cb29dc2c4b015a70a58cf51356fc7c/urcollectionmanager-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:33 2020"}