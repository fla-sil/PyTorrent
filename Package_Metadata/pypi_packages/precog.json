{"info": {"author": "Isotoma Limited", "author_email": "support@isotoma.com", "bugtrack_url": null, "classifiers": [], "description": "# precog\nFor preventing your crimes, before you can commit them.\n\nInstallation\n============\n\nTo install from PyPI, run `pip install precog`. To install the\ngithook, run `precog`. This will try to write to your pre-commit file\n(`.git/hooks/pre-commit`), and will abort if it already exists, so\nmove or remove it if you want to use precog.\n\nUsage\n=====\n\nOnce you have precog installed, your commits will be checked that they\nconform. By default it will abort a commit if any of `flake8`, `isort`\nor `eslint` do not exit cleanly, but will make no effort to fix any\nproblems. The pre-commit file contains the default values for the\noptions, but you can override the behaviour with environment variables\nwhen committing, or if you can edit the defaults in the pre-commit file.\n\nExamples:\n---------\n\nTo skip all checking altogether, eg for a work-in-progress commit:\n```\nSTRICT=\"\" git commit -m \"wip\"\n```\nthis will still print issues, but will let the commit complete.\n\nTo skip just isort:\n```\nISORT_STRICT=\"\" git commit -m \"wip - todo: fix imports\"\n```\n\nThe `ISORT_FORCE` option\n========================\n\nThis one is a bit mad. Because `isort` knows how to fix the problems\nit finds (while `flake8` and `eslint` do not), rather than complaining\nat you, this option tells `precog` to tweak your changed files to\nconform to the `isort` checking. Though this is a bit scary, so is\ndisabled by default.\n\nIn the case where all of a file is staged for commit, this is fairly\nstraight-forward: `precog` will just run `isort` on the file and then\nre-add it to include those changes in the commit. But if only part of\nfile is staged, then we don't want to add the whole file. So we make\nuse of the `-k` option to `git stash` to stash only the unstaged\nchanges. We then run `isort`, add the file, then pop the stash.\n\nThere are almost certainly edge-cases in this, and if it mucks up your\ncommit, then I am sorry. Out of your sadness, a PR/issue can rise to\nmake it not happen again.\n\nIntegration with `eslint`\n=========================\n\nTo lint your JavaScript, precog will invoke eslint on any changed\n`.js` files. Because it is not a Python dependency, installing precog\nmakes no attempt to install eslint, but will try to find it at\n`node_modules/.bin/eslint`. If it doesn't find it, it will assume it\nis installed globally. You can set the `ESLINT_PATH` environment\nvariable if this doesn't find it - if so you may want to set it as a\ndefault in your pre-commit file.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isotoma/precog", "keywords": "", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "precog", "package_url": "https://pypi.org/project/precog/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/precog/", "project_urls": {"Homepage": "https://github.com/isotoma/precog"}, "release_url": "https://pypi.org/project/precog/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Git-hooks for flake8, isort and eslint", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># precog\nFor preventing your crimes, before you can commit them.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install from PyPI, run <cite>pip install precog</cite>. To install the\ngithook, run <cite>precog</cite>. This will try to write to your pre-commit file\n(<cite>.git/hooks/pre-commit</cite>), and will abort if it already exists, so\nmove or remove it if you want to use precog.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Once you have precog installed, your commits will be checked that they\nconform. By default it will abort a commit if any of <cite>flake8</cite>, <cite>isort</cite>\nor <cite>eslint</cite> do not exit cleanly, but will make no effort to fix any\nproblems. The pre-commit file contains the default values for the\noptions, but you can override the behaviour with environment variables\nwhen committing, or if you can edit the defaults in the pre-commit file.</p>\n<div id=\"examples\">\n<h3>Examples:</h3>\n<p>To skip all checking altogether, eg for a work-in-progress commit:\n<tt>`\n<span class=\"pre\">STRICT=\"\"</span> git commit <span class=\"pre\">-m</span> \"wip\"\n`</tt>\nthis will still print issues, but will let the commit complete.</p>\n<p>To skip just isort:\n<tt>`\n<span class=\"pre\">ISORT_STRICT=\"\"</span> git commit <span class=\"pre\">-m</span> \"wip - todo: fix imports\"\n`</tt></p>\n</div>\n</div>\n<div id=\"the-isort-force-option\">\n<h2>The <cite>ISORT_FORCE</cite> option</h2>\n<p>This one is a bit mad. Because <cite>isort</cite> knows how to fix the problems\nit finds (while <cite>flake8</cite> and <cite>eslint</cite> do not), rather than complaining\nat you, this option tells <cite>precog</cite> to tweak your changed files to\nconform to the <cite>isort</cite> checking. Though this is a bit scary, so is\ndisabled by default.</p>\n<p>In the case where all of a file is staged for commit, this is fairly\nstraight-forward: <cite>precog</cite> will just run <cite>isort</cite> on the file and then\nre-add it to include those changes in the commit. But if only part of\nfile is staged, then we don\u2019t want to add the whole file. So we make\nuse of the <cite>-k</cite> option to <cite>git stash</cite> to stash only the unstaged\nchanges. We then run <cite>isort</cite>, add the file, then pop the stash.</p>\n<p>There are almost certainly edge-cases in this, and if it mucks up your\ncommit, then I am sorry. Out of your sadness, a PR/issue can rise to\nmake it not happen again.</p>\n</div>\n<div id=\"integration-with-eslint\">\n<h2>Integration with <cite>eslint</cite></h2>\n<p>To lint your JavaScript, precog will invoke eslint on any changed\n<cite>.js</cite> files. Because it is not a Python dependency, installing precog\nmakes no attempt to install eslint, but will try to find it at\n<cite>node_modules/.bin/eslint</cite>. If it doesn\u2019t find it, it will assume it\nis installed globally. You can set the <cite>ESLINT_PATH</cite> environment\nvariable if this doesn\u2019t find it - if so you may want to set it as a\ndefault in your pre-commit file.</p>\n</div>\n\n          </div>"}, "last_serial": 2327062, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1eb8a4e8f62d6c6970a4038d9b25c73a", "sha256": "34c20383cfc0a3dd3ab3f384ed59dd4d7fb74e58ad12c50c94a3f3bd7a56714f"}, "downloads": -1, "filename": "precog-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1eb8a4e8f62d6c6970a4038d9b25c73a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3823, "upload_time": "2016-06-16T10:09:24", "upload_time_iso_8601": "2016-06-16T10:09:24.220021Z", "url": "https://files.pythonhosted.org/packages/97/03/9e5585059b45d3e187475f016d639cd6bdfab5c4ba45ec81cd9fa1eee8b8/precog-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6ba375e3a0e0bf97ecd77a7919d7b667", "sha256": "6393f62ce3a6c6f3358918be814151c2ac36133fab9884bcc159334103167536"}, "downloads": -1, "filename": "precog-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6ba375e3a0e0bf97ecd77a7919d7b667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10700, "upload_time": "2016-06-16T16:05:51", "upload_time_iso_8601": "2016-06-16T16:05:51.198355Z", "url": "https://files.pythonhosted.org/packages/37/44/6280e7fa4b801399afe2ba183b758429e748e9cbcfaed4a9a404c89b50ba/precog-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ba375e3a0e0bf97ecd77a7919d7b667", "sha256": "6393f62ce3a6c6f3358918be814151c2ac36133fab9884bcc159334103167536"}, "downloads": -1, "filename": "precog-0.0.2.tar.gz", "has_sig": false, "md5_digest": "6ba375e3a0e0bf97ecd77a7919d7b667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10700, "upload_time": "2016-06-16T16:05:51", "upload_time_iso_8601": "2016-06-16T16:05:51.198355Z", "url": "https://files.pythonhosted.org/packages/37/44/6280e7fa4b801399afe2ba183b758429e748e9cbcfaed4a9a404c89b50ba/precog-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:05 2020"}