{"info": {"author": "Daniel Petti", "author_email": "djpetti@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyUnits\n*Use Units in your Python Code*\n\n> **WARNING**: This code is still under development. Unless you are invigorated\n> by the thought of an extended correspondence with me, I would recommend\n> **against** its use for any serious *(read: paid)* project.\n\nHere's something we've all done before:\n```python\nlength1 = 42 # Meters\n \n# ... 500 lines later\n\nlength2 = 12 # Inches\nresult = length1 + length2 # Oops\n```\n\n## Installation\n\n```bash\npip install python-pyunits\n```\n\n## Units are a pain.\n\nAnd any time we're computing with some sort of physical quantities, we almost\ncertainly have to take them into account. Whenever I read (or write) this kind\nof code, I am amazed at how many subtle bugs crop up due to missing or\nincorrect unit conversions.\n\n## WolframAlpha can do it, so why can't Python?\n\nWhy indeed? We're used to scientific software and even search engines auto-magically\nhandling unit conversions and dimensional analysis for us. Python is used for a\nlot of scientific applications, but sadly, this feature isn't built-in to the\nlanguage.\n\nLadies and gentlemen, I give you PyUnits:\n\n```python\nfrom examples import example_units as eu\n\nlength1 = eu.Meters(42)\nlength2 = eu.Inches(12)\n\nprint(length1 + length2) # Prints \"42.3048 m\"\n```\n\nOkay. So maybe you're not turned on by unit conversions. I can understand that.\nBut guess what? PyUnits also understands dimensional analysis. In fact, it\nunderstands it at least as well as [Randall Munroe](https://en.wikipedia.org/wiki/Randall_Munroe)\ndoes:\n\n![Dimensional Analysis](https://imgs.xkcd.com/comics/dimensional_analysis.png)\n\n```python\nfrom examples import example_units as eu\nfrom pyunits.compound_units import Mul, Div\n\nCubicMeters = Mul(eu.Meters, Mul(eu.Meters, eu.Meters))\nCubicIn = Mul(eu.Inches, Mul(eu.Inches, eu.Inches))\nPascals = Div(eu.Joules, CubicMeters)\nMilesPerIn3 = Div(eu.Miles, CubicIn)\n\nplank_energy = eu.Joules(1.956E9)\ncore_pressure = Pascals(3.6E11)\n# Technically, this is the Prius C gas mileage. It seems that Priuses\n# (Priui?) have improved somewhat since the comic was published...\n# Note also that we don't really have the ability to do mpg directly yet,\n# so we do mi / in^3 and divide by 231. (1 gal = 231 in^3)\nprius_mileage = MilesPerIn3(46 / 231)\nchannel_width = eu.Kilometers(33.8)\n\npi = plank_energy / core_pressure * prius_mileage / channel_width\n\nprint(pi) # Prints 3.14\n```\n\n\"But wait\", I hear you cry. \"That's a totally contrived example!\" And it may\nwell be. So let's try something a little more... practical:\n\n![Fermirotica](https://imgs.xkcd.com/comics/fermirotica.png)\n\n```python\nimport math\n\nfrom examples import example_units as eu\nfrom pyunits.compound_units import Mul\n\nSquareMiles = Mul(eu.Miles, eu.Miles)\nSquareMeters = Mul(eu.Meters, eu.Meters)\n\npopulation_density = 18600 / SquareMiles(1.0)\nsex_frequency = 80 / eu.Years(1.0)\nsex_duration = eu.Minutes(30)\n\ndenom_value = math.pi * population_density * sex_frequency * sex_duration\nfraction = 2.0 / denom_value\n\n# Ensure result is in square meters.\nfraction = SquareMeters(fraction)\n\n# Square root has to be done outside of PyUnits, since we don't support that\n# (yet).\nsex_radius = math.sqrt(fraction.raw)\nprint(sex_radius) # Prints \"139.33\", the correct result for these parameters.\n```\n\nAs you can see, PyUnits is suitable for Serious Scientific Work.\n\n# Cookbook\n\nI have a colleague who likes nothing better than copying and pasting code from\nREADME files. He refers to this type of file as a \"cookbook\". Therefore, I will\nbe providing a similar facility in this section.\n\n## Building a Unit Library\n\nSo far, all the examples in this document have used the example unit library\nprovided in this repository under `examples/example_units.py`. That's all well\nand good, but if you're using PyUnits for real, the first thing you're probably\ngoing to want to do is create your own unit library:\n\n```python\nfrom pyunits.unit import StandardUnit, Unit\nfrom pyunits.unit_type import UnitType\n\n\nclass Length(UnitType):\n    \"\"\"\n    Type for length units.\n    \"\"\"\n\n@Length.decorate\nclass Meters(StandardUnit):\n    \"\"\"\n    A meters unit.\n    \"\"\"\n\n    @property\n    def name(self) -> str:\n        \"\"\"\n        See superclass for documentation.\n        \"\"\"\n        return \"m\"\n\n\n@Length.decorate\nclass Centimeters(Unit):\n    \"\"\"\n    A centimeters unit.\n    \"\"\"\n\n    def _from_standard(self, standard_value: StandardUnit) -> None:\n        \"\"\"\n        See superclass for documentation.\n        \"\"\"\n        # Convert from meters.\n        self._set_raw(standard_value.raw * 100)\n\n    def to_standard(self) -> Meters:\n        \"\"\"\n        See superclass for documentation.\n        \"\"\"\n        # Convert to meters.\n        return Meters(self.raw / 100)\n\n    @property\n    def name(self) -> str:\n        \"\"\"\n        See superclass for documentation.\n        \"\"\"\n        return \"cm\"\n```\n\nFundamentally, PyUnits has two types of objects that the user needs to be aware\nof: `Unit` and `UnitType`. The former is easy: a `Unit` instance simply\nrepresents a value with a specific unit. The second is a little harder to\nexplain.\n\nIntuitively, some units can be trivially converted to each-other, eg. Meters\nand Inches, and some can't be, eg. Meters and Seconds. The `UnitType` class\nexists in order to allow PyUnits to understand these relationships. When using\nPyUnits, every `Unit` subclass must be decorated with an appropriate `UnitType`\nsubclass. Two units that are marked with the same `UnitType` can be trivially\nconverted to each-other. Two units that aren't can't easily be converted, and\nPyUnits with raise an error if you try to do so.\n\n### Standard Units\n\nFor all the units of a particular `UnitType`, PyUnits expects the user to choose\na \"standard unit\". In practice, which unit you use as the standard one doesn't\nreally matter, as long as you can tell PyUnits how to convert from every other\nunit to the standard one and vice-versa.\n\nIn practice, this is done by overriding two methods:\n - The `_from_standard()` method takes an instance of the standard unit and\n   initializes this `Unit` instance appropriately with its converted value.\n - The `to_standard()` method returns an instance of the standard unit with\n   an equivalent value to this one.\n   \nOnce we have that set up, PyUnits can convert implicitly between all the units\nof this `UnitType`:\n\n```python\nmeters = Meters(10)\ncentimeters = Centimeters(meters)\n\nprint(centimeters)  # prints \"1000 cm\"\n```\n\nWhich unit is considered to be the standard one is defined by which one\ninherits from the `StandardUnit` class. (This is `Meters` in the above example.)\n\n### Pretty-Printing\n\nPyUnits has (currently limited) support for pretty-printing unit values. This\nis utilized by overriding the `name` property, as seen in the example above.\nThis property should return a suffix that will be appended to the unit value\nwhen printing.\n\n### Numpy Integration\n\nPyUnits can essentially be thought of as a wrapper around Numpy. That is\nbecause `Unit` subclasses actually store and manipulate Numpy arrays internally:\n\n```python\nimport numpy as np\n\nfrom examples import example_units as eu\n\nsecs = eu.Seconds(np.array([1, 2, 3]))\nprint(secs)  # prints \"[1 2 3] s\"\n```\n\nYou can access the raw Numpy value of a unit using the `raw` property:\n\n```python\nprint(secs.raw)  # print \"[1 2 3]\"\n```\n\n## Dimensional Analysis\n\nPyUnits is generally clever about unit operations:\n\n```python\nfrom examples import example_units as eu\n\nmeters = eu.Meters(2)\nseconds = eu.Seconds(4)\n\nprint(meters / seconds)  # prints 0.5 m\\n-\\ns\n```\n\nAs can be seen in the earlier examples, it will even go so far as to\nauto-simplify the results of multiplication and division operations.\n\nAlso, compound unit types can be created manually:\n\n```python\nfrom examples import example_units as eu\nfrom pyunits.compound_units import Mul, Div\n\nWatts = Div(eu.Joules, eu.Seconds)\nSquareMeters = Mul(eu.Meters, eu.Meters)\n\n# These can then be used like normal units.\nwatts = Watts(10)\nsquare_meters = SquareMeters(50)\n```\n\n### Unitless Values\n\nPyUnits has the special concept of \"Unitless\" values, which, paradoxically,\ncan be used like a `Unit` in many cases. These crop up most often when doing\ndivision.\n\n```python\nfrom examples import example_units as eu\n\nmeters1 = eu.Meters(10)\nmeters2 = eu.Meters(5)\n\nprint(meters1 / meters2)  # prints \"2\"\n```\n\nThe result of this division is an instance of the class `Unitless`. This class\ncan also be used directly in order to represent concepts such as \"inverse meters\".\n\n```python\nfrom examples import example_units as eu\nfrom pyunits.compound_units import Div\nfrom pyunits.unitless import Unitless\n\ninverse_meters = Div(Unitless, eu.Meters)\n```\n\nPyUnits will refuse to implicitly convert `Unitless` instances, however. If\nyou want to use this as a value of a unit, you have to explicitly take the raw\nvalue:\n\n\n```python\nfrom examples import example_units as eu\nfrom pyunits.unitless import Unitless\n\nunitless = Unitless(5)\nmeters = eu.Meters(unitless)  # Error!\n\n# The correct way...\nmeters = eu.Meters(unitless.raw)\n```\n\nThis is an explicit design choice that was made to avoid cases where values\nthat did not have units could \"magically\" acquire them.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/djpetti/pyunits", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-pyunits", "package_url": "https://pypi.org/project/python-pyunits/", "platform": "", "project_url": "https://pypi.org/project/python-pyunits/", "project_urls": {"Homepage": "https://github.com/djpetti/pyunits"}, "release_url": "https://pypi.org/project/python-pyunits/0.1rc4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package for making Python unit-aware.", "version": "0.1rc4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyUnits</h1>\n<p><em>Use Units in your Python Code</em></p>\n<blockquote>\n<p><strong>WARNING</strong>: This code is still under development. Unless you are invigorated\nby the thought of an extended correspondence with me, I would recommend\n<strong>against</strong> its use for any serious <em>(read: paid)</em> project.</p>\n</blockquote>\n<p>Here's something we've all done before:</p>\n<pre><span class=\"n\">length1</span> <span class=\"o\">=</span> <span class=\"mi\">42</span> <span class=\"c1\"># Meters</span>\n \n<span class=\"c1\"># ... 500 lines later</span>\n\n<span class=\"n\">length2</span> <span class=\"o\">=</span> <span class=\"mi\">12</span> <span class=\"c1\"># Inches</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">length1</span> <span class=\"o\">+</span> <span class=\"n\">length2</span> <span class=\"c1\"># Oops</span>\n</pre>\n<h2>Installation</h2>\n<pre>pip install python-pyunits\n</pre>\n<h2>Units are a pain.</h2>\n<p>And any time we're computing with some sort of physical quantities, we almost\ncertainly have to take them into account. Whenever I read (or write) this kind\nof code, I am amazed at how many subtle bugs crop up due to missing or\nincorrect unit conversions.</p>\n<h2>WolframAlpha can do it, so why can't Python?</h2>\n<p>Why indeed? We're used to scientific software and even search engines auto-magically\nhandling unit conversions and dimensional analysis for us. Python is used for a\nlot of scientific applications, but sadly, this feature isn't built-in to the\nlanguage.</p>\n<p>Ladies and gentlemen, I give you PyUnits:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n\n<span class=\"n\">length1</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"n\">length2</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Inches</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">length1</span> <span class=\"o\">+</span> <span class=\"n\">length2</span><span class=\"p\">)</span> <span class=\"c1\"># Prints \"42.3048 m\"</span>\n</pre>\n<p>Okay. So maybe you're not turned on by unit conversions. I can understand that.\nBut guess what? PyUnits also understands dimensional analysis. In fact, it\nunderstands it at least as well as <a href=\"https://en.wikipedia.org/wiki/Randall_Munroe\" rel=\"nofollow\">Randall Munroe</a>\ndoes:</p>\n<p><img alt=\"Dimensional Analysis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fa6e9d01926dd347930272461d5dc858569d664/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f64696d656e73696f6e616c5f616e616c797369732e706e67\"></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.compound_units</span> <span class=\"kn\">import</span> <span class=\"n\">Mul</span><span class=\"p\">,</span> <span class=\"n\">Div</span>\n\n<span class=\"n\">CubicMeters</span> <span class=\"o\">=</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">,</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">))</span>\n<span class=\"n\">CubicIn</span> <span class=\"o\">=</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Inches</span><span class=\"p\">,</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Inches</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Inches</span><span class=\"p\">))</span>\n<span class=\"n\">Pascals</span> <span class=\"o\">=</span> <span class=\"n\">Div</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Joules</span><span class=\"p\">,</span> <span class=\"n\">CubicMeters</span><span class=\"p\">)</span>\n<span class=\"n\">MilesPerIn3</span> <span class=\"o\">=</span> <span class=\"n\">Div</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Miles</span><span class=\"p\">,</span> <span class=\"n\">CubicIn</span><span class=\"p\">)</span>\n\n<span class=\"n\">plank_energy</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Joules</span><span class=\"p\">(</span><span class=\"mf\">1.956E9</span><span class=\"p\">)</span>\n<span class=\"n\">core_pressure</span> <span class=\"o\">=</span> <span class=\"n\">Pascals</span><span class=\"p\">(</span><span class=\"mf\">3.6E11</span><span class=\"p\">)</span>\n<span class=\"c1\"># Technically, this is the Prius C gas mileage. It seems that Priuses</span>\n<span class=\"c1\"># (Priui?) have improved somewhat since the comic was published...</span>\n<span class=\"c1\"># Note also that we don't really have the ability to do mpg directly yet,</span>\n<span class=\"c1\"># so we do mi / in^3 and divide by 231. (1 gal = 231 in^3)</span>\n<span class=\"n\">prius_mileage</span> <span class=\"o\">=</span> <span class=\"n\">MilesPerIn3</span><span class=\"p\">(</span><span class=\"mi\">46</span> <span class=\"o\">/</span> <span class=\"mi\">231</span><span class=\"p\">)</span>\n<span class=\"n\">channel_width</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Kilometers</span><span class=\"p\">(</span><span class=\"mf\">33.8</span><span class=\"p\">)</span>\n\n<span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"n\">plank_energy</span> <span class=\"o\">/</span> <span class=\"n\">core_pressure</span> <span class=\"o\">*</span> <span class=\"n\">prius_mileage</span> <span class=\"o\">/</span> <span class=\"n\">channel_width</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 3.14</span>\n</pre>\n<p>\"But wait\", I hear you cry. \"That's a totally contrived example!\" And it may\nwell be. So let's try something a little more... practical:</p>\n<p><img alt=\"Fermirotica\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d563a3145cd737e017f43ef035c0496f96bc50f6/68747470733a2f2f696d67732e786b63642e636f6d2f636f6d6963732f6665726d69726f746963612e706e67\"></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.compound_units</span> <span class=\"kn\">import</span> <span class=\"n\">Mul</span>\n\n<span class=\"n\">SquareMiles</span> <span class=\"o\">=</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Miles</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Miles</span><span class=\"p\">)</span>\n<span class=\"n\">SquareMeters</span> <span class=\"o\">=</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">)</span>\n\n<span class=\"n\">population_density</span> <span class=\"o\">=</span> <span class=\"mi\">18600</span> <span class=\"o\">/</span> <span class=\"n\">SquareMiles</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">sex_frequency</span> <span class=\"o\">=</span> <span class=\"mi\">80</span> <span class=\"o\">/</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Years</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">sex_duration</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Minutes</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"n\">denom_value</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">population_density</span> <span class=\"o\">*</span> <span class=\"n\">sex_frequency</span> <span class=\"o\">*</span> <span class=\"n\">sex_duration</span>\n<span class=\"n\">fraction</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span> <span class=\"o\">/</span> <span class=\"n\">denom_value</span>\n\n<span class=\"c1\"># Ensure result is in square meters.</span>\n<span class=\"n\">fraction</span> <span class=\"o\">=</span> <span class=\"n\">SquareMeters</span><span class=\"p\">(</span><span class=\"n\">fraction</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Square root has to be done outside of PyUnits, since we don't support that</span>\n<span class=\"c1\"># (yet).</span>\n<span class=\"n\">sex_radius</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">fraction</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sex_radius</span><span class=\"p\">)</span> <span class=\"c1\"># Prints \"139.33\", the correct result for these parameters.</span>\n</pre>\n<p>As you can see, PyUnits is suitable for Serious Scientific Work.</p>\n<h1>Cookbook</h1>\n<p>I have a colleague who likes nothing better than copying and pasting code from\nREADME files. He refers to this type of file as a \"cookbook\". Therefore, I will\nbe providing a similar facility in this section.</p>\n<h2>Building a Unit Library</h2>\n<p>So far, all the examples in this document have used the example unit library\nprovided in this repository under <code>examples/example_units.py</code>. That's all well\nand good, but if you're using PyUnits for real, the first thing you're probably\ngoing to want to do is create your own unit library:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyunits.unit</span> <span class=\"kn\">import</span> <span class=\"n\">StandardUnit</span><span class=\"p\">,</span> <span class=\"n\">Unit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.unit_type</span> <span class=\"kn\">import</span> <span class=\"n\">UnitType</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Length</span><span class=\"p\">(</span><span class=\"n\">UnitType</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Type for length units.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n<span class=\"nd\">@Length</span><span class=\"o\">.</span><span class=\"n\">decorate</span>\n<span class=\"k\">class</span> <span class=\"nc\">Meters</span><span class=\"p\">(</span><span class=\"n\">StandardUnit</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A meters unit.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        See superclass for documentation.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"m\"</span>\n\n\n<span class=\"nd\">@Length</span><span class=\"o\">.</span><span class=\"n\">decorate</span>\n<span class=\"k\">class</span> <span class=\"nc\">Centimeters</span><span class=\"p\">(</span><span class=\"n\">Unit</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A centimeters unit.</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_from_standard</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">standard_value</span><span class=\"p\">:</span> <span class=\"n\">StandardUnit</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        See superclass for documentation.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Convert from meters.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_raw</span><span class=\"p\">(</span><span class=\"n\">standard_value</span><span class=\"o\">.</span><span class=\"n\">raw</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_standard</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Meters</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        See superclass for documentation.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Convert to meters.</span>\n        <span class=\"k\">return</span> <span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">raw</span> <span class=\"o\">/</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        See superclass for documentation.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"cm\"</span>\n</pre>\n<p>Fundamentally, PyUnits has two types of objects that the user needs to be aware\nof: <code>Unit</code> and <code>UnitType</code>. The former is easy: a <code>Unit</code> instance simply\nrepresents a value with a specific unit. The second is a little harder to\nexplain.</p>\n<p>Intuitively, some units can be trivially converted to each-other, eg. Meters\nand Inches, and some can't be, eg. Meters and Seconds. The <code>UnitType</code> class\nexists in order to allow PyUnits to understand these relationships. When using\nPyUnits, every <code>Unit</code> subclass must be decorated with an appropriate <code>UnitType</code>\nsubclass. Two units that are marked with the same <code>UnitType</code> can be trivially\nconverted to each-other. Two units that aren't can't easily be converted, and\nPyUnits with raise an error if you try to do so.</p>\n<h3>Standard Units</h3>\n<p>For all the units of a particular <code>UnitType</code>, PyUnits expects the user to choose\na \"standard unit\". In practice, which unit you use as the standard one doesn't\nreally matter, as long as you can tell PyUnits how to convert from every other\nunit to the standard one and vice-versa.</p>\n<p>In practice, this is done by overriding two methods:</p>\n<ul>\n<li>The <code>_from_standard()</code> method takes an instance of the standard unit and\ninitializes this <code>Unit</code> instance appropriately with its converted value.</li>\n<li>The <code>to_standard()</code> method returns an instance of the standard unit with\nan equivalent value to this one.</li>\n</ul>\n<p>Once we have that set up, PyUnits can convert implicitly between all the units\nof this <code>UnitType</code>:</p>\n<pre><span class=\"n\">meters</span> <span class=\"o\">=</span> <span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">centimeters</span> <span class=\"o\">=</span> <span class=\"n\">Centimeters</span><span class=\"p\">(</span><span class=\"n\">meters</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">centimeters</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"1000 cm\"</span>\n</pre>\n<p>Which unit is considered to be the standard one is defined by which one\ninherits from the <code>StandardUnit</code> class. (This is <code>Meters</code> in the above example.)</p>\n<h3>Pretty-Printing</h3>\n<p>PyUnits has (currently limited) support for pretty-printing unit values. This\nis utilized by overriding the <code>name</code> property, as seen in the example above.\nThis property should return a suffix that will be appended to the unit value\nwhen printing.</p>\n<h3>Numpy Integration</h3>\n<p>PyUnits can essentially be thought of as a wrapper around Numpy. That is\nbecause <code>Unit</code> subclasses actually store and manipulate Numpy arrays internally:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n\n<span class=\"n\">secs</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Seconds</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">secs</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"[1 2 3] s\"</span>\n</pre>\n<p>You can access the raw Numpy value of a unit using the <code>raw</code> property:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">secs</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>  <span class=\"c1\"># print \"[1 2 3]\"</span>\n</pre>\n<h2>Dimensional Analysis</h2>\n<p>PyUnits is generally clever about unit operations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n\n<span class=\"n\">meters</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">seconds</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Seconds</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">meters</span> <span class=\"o\">/</span> <span class=\"n\">seconds</span><span class=\"p\">)</span>  <span class=\"c1\"># prints 0.5 m\\n-\\ns</span>\n</pre>\n<p>As can be seen in the earlier examples, it will even go so far as to\nauto-simplify the results of multiplication and division operations.</p>\n<p>Also, compound unit types can be created manually:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.compound_units</span> <span class=\"kn\">import</span> <span class=\"n\">Mul</span><span class=\"p\">,</span> <span class=\"n\">Div</span>\n\n<span class=\"n\">Watts</span> <span class=\"o\">=</span> <span class=\"n\">Div</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Joules</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Seconds</span><span class=\"p\">)</span>\n<span class=\"n\">SquareMeters</span> <span class=\"o\">=</span> <span class=\"n\">Mul</span><span class=\"p\">(</span><span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># These can then be used like normal units.</span>\n<span class=\"n\">watts</span> <span class=\"o\">=</span> <span class=\"n\">Watts</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">square_meters</span> <span class=\"o\">=</span> <span class=\"n\">SquareMeters</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<h3>Unitless Values</h3>\n<p>PyUnits has the special concept of \"Unitless\" values, which, paradoxically,\ncan be used like a <code>Unit</code> in many cases. These crop up most often when doing\ndivision.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n\n<span class=\"n\">meters1</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">meters2</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">meters1</span> <span class=\"o\">/</span> <span class=\"n\">meters2</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"2\"</span>\n</pre>\n<p>The result of this division is an instance of the class <code>Unitless</code>. This class\ncan also be used directly in order to represent concepts such as \"inverse meters\".</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.compound_units</span> <span class=\"kn\">import</span> <span class=\"n\">Div</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.unitless</span> <span class=\"kn\">import</span> <span class=\"n\">Unitless</span>\n\n<span class=\"n\">inverse_meters</span> <span class=\"o\">=</span> <span class=\"n\">Div</span><span class=\"p\">(</span><span class=\"n\">Unitless</span><span class=\"p\">,</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">)</span>\n</pre>\n<p>PyUnits will refuse to implicitly convert <code>Unitless</code> instances, however. If\nyou want to use this as a value of a unit, you have to explicitly take the raw\nvalue:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples</span> <span class=\"kn\">import</span> <span class=\"n\">example_units</span> <span class=\"k\">as</span> <span class=\"n\">eu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyunits.unitless</span> <span class=\"kn\">import</span> <span class=\"n\">Unitless</span>\n\n<span class=\"n\">unitless</span> <span class=\"o\">=</span> <span class=\"n\">Unitless</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">meters</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"n\">unitless</span><span class=\"p\">)</span>  <span class=\"c1\"># Error!</span>\n\n<span class=\"c1\"># The correct way...</span>\n<span class=\"n\">meters</span> <span class=\"o\">=</span> <span class=\"n\">eu</span><span class=\"o\">.</span><span class=\"n\">Meters</span><span class=\"p\">(</span><span class=\"n\">unitless</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n</pre>\n<p>This is an explicit design choice that was made to avoid cases where values\nthat did not have units could \"magically\" acquire them.</p>\n\n          </div>"}, "last_serial": 6188456, "releases": {"0.1rc1": [{"comment_text": "", "digests": {"md5": "b9dbe4b6f748ef47a1461a0e53e34b1b", "sha256": "028a450ab7b443d8ffd9d33e9cbdd9c9329eca27aa00cd1deabec9d328a91b35"}, "downloads": -1, "filename": "python-pyunits-0.1rc1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "b9dbe4b6f748ef47a1461a0e53e34b1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41779, "upload_time": "2019-11-12T02:19:43", "upload_time_iso_8601": "2019-11-12T02:19:43.272738Z", "url": "https://files.pythonhosted.org/packages/89/d2/9c5a6fbf42a9841861be748e70c3207fad6c818599945e119a8ec9a66984/python-pyunits-0.1rc1.linux-x86_64.tar.gz", "yanked": false}], "0.1rc2": [{"comment_text": "", "digests": {"md5": "b844bca4acb18ba49f7ba487c2a2e4d4", "sha256": "4424936336df5c8724e4d55636dc7d7abfe625a71cdd21c2b3ae6eab8e322b4c"}, "downloads": -1, "filename": "python-pyunits-0.1rc2.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "b844bca4acb18ba49f7ba487c2a2e4d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41597, "upload_time": "2019-11-16T22:23:02", "upload_time_iso_8601": "2019-11-16T22:23:02.886459Z", "url": "https://files.pythonhosted.org/packages/22/44/7622a2e4c72467f6813bcb16a73baac5a9748f10e4e216bf4e7a467075ec/python-pyunits-0.1rc2.linux-x86_64.tar.gz", "yanked": false}], "0.1rc3": [{"comment_text": "", "digests": {"md5": "3abce24199f2cde26de5875e78026f3e", "sha256": "9e5c037c4aca5d7e84dc7f6b02ede71401df51fb8f692fbcd3f256e91aa0c478"}, "downloads": -1, "filename": "python-pyunits-0.1rc3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "3abce24199f2cde26de5875e78026f3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41718, "upload_time": "2019-11-24T00:05:42", "upload_time_iso_8601": "2019-11-24T00:05:42.337976Z", "url": "https://files.pythonhosted.org/packages/3a/f8/d871624e892af24160bcc488b61362b7b6c23c8e5a9ee72446edfb073d37/python-pyunits-0.1rc3.linux-x86_64.tar.gz", "yanked": false}], "0.1rc4": [{"comment_text": "", "digests": {"md5": "331e7ae3af2a4d79110ed8d8417cc847", "sha256": "724ae48a697124b5e00c6bc214581141a811be404f61c04c8da5e46c72f0d3cb"}, "downloads": -1, "filename": "python-pyunits-0.1rc4.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "331e7ae3af2a4d79110ed8d8417cc847", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44034, "upload_time": "2019-11-24T00:40:32", "upload_time_iso_8601": "2019-11-24T00:40:32.374228Z", "url": "https://files.pythonhosted.org/packages/57/36/8df6b7ad0c18d6c9d713661d4761c3907625e9d80eb10665a68728321097/python-pyunits-0.1rc4.linux-x86_64.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "331e7ae3af2a4d79110ed8d8417cc847", "sha256": "724ae48a697124b5e00c6bc214581141a811be404f61c04c8da5e46c72f0d3cb"}, "downloads": -1, "filename": "python-pyunits-0.1rc4.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "331e7ae3af2a4d79110ed8d8417cc847", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44034, "upload_time": "2019-11-24T00:40:32", "upload_time_iso_8601": "2019-11-24T00:40:32.374228Z", "url": "https://files.pythonhosted.org/packages/57/36/8df6b7ad0c18d6c9d713661d4761c3907625e9d80eb10665a68728321097/python-pyunits-0.1rc4.linux-x86_64.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:50 2020"}