{"info": {"author": "Mattijn van Hoek", "author_email": "mattijn@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License"], "description": "# topojson\n\n[![PyPI version](https://img.shields.io/pypi/v/topojson.svg)](https://pypi.org/project/topojson)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n[![build status](http://img.shields.io/travis/mattijn/topojson/master.svg?style=flat)](https://travis-ci.org/mattijn/topojson)\n\n_Its not yet version 1.0, but that's merely because of missing documentation. With other words: you should be safe to use it!_\n\n_The docs will slowly move to/emerge at: https://mattijn.github.io/topojson_\n\n#\n\n_Topojson_ encodes geographic data structures into a shared topology. This repository describes the development of a **Python** implementation of the TopoJSON format.\n\n## Usage\n\nThe package can be used in multiple different ways, with the main purpose to create a TopoJSON topology:\n\n```python\nimport topojson\n\ndata = [\n    {\"type\": \"Polygon\", \"coordinates\": [[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]]},\n    {\"type\": \"Polygon\", \"coordinates\": [[[1, 0], [2, 0], [2, 1], [1, 1], [1, 0]]]}\n]\n\ntj = topojson.Topology(data, prequantize=False, topology=True)\ntj.to_json()\n```\n\nWhat results in the following TopoJSON object:\n\n```python\n'{\"type\": \"Topology\", \"objects\": {\"data\": {\"geometries\": [{\"type\": \"Polygon\", \"arcs\": [[-2, 0]]}, {\"type\": \"Polygon\", \"arcs\": [[1, 2]]}], \"type\": \"GeometryCollection\"}}, \"bbox\": [0.0, 0.0, 2.0, 1.0], \"arcs\": [[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 1.0]], [[1.0, 0.0], [1.0, 1.0]], [[1.0, 1.0], [2.0, 1.0], [2.0, 0.0], [1.0, 0.0]]]}'\n```\n\nMore or less all Python objects containing geographical data are supported through the `__geo_interface__` attribute. This includes at least the Python packages `geojson`, `shapely`, `geopandas`, `pyshp`.\n\nMoreover a `dict` of objects that provide a valid `__geo_interface__`, a `list` of objects that provide a valid `__geo_interface__` and `str` objects with TopoJSON or GeoJSON geographic structures are supported too.\n\nIn the example above the output is parsed to a JSON string (`.to_json()`), but this is not the only thing we can do. Multiple functions are available to serialize the Topology object.\n\n| Functions                       | Required Packages                                                       |\n| ------------------------------- | ----------------------------------------------------------------------- |\n| topojson.Topology().to_json()   | Shapely, NumPy                                                          |\n| topojson.Topology().to_dict()   | Shapely, NumPy                                                          |\n| topojson.Topology().to_svg()    | Shapely, NumPy                                                          |\n| topojson.Topology().to_alt()    | Shapely, NumPy, Altair\\*                                                |\n| topojson.Topology().to_gdf()    | Shapely, NumPy, GeoPandas\\*                                             |\n| topojson.Topology().to_widget() | Shapely, NumPy, Altair*, Simplification*, ipywidgets\\* (+ labextension) |\n\n\\* optional dependencies\n\nThe TopoJSON format is merely designed to create smaller files than its GeoJSON counterpart. It is capable of doing so through a few options of which the following are currently available: compute topology, quantize the input and/or output, simplify the input and/or output.\n\nThe following parameters can be used to control these options for generating the `Topology()` object. Detailed information can be found in the docstring of the [`topojson.Topology()`](https://github.com/mattijn/topojson/blob/master/topojson/core/topology.py#L18:L79) class.\n\n- topology\n- prequantize\n- topoquantize\n- presimplify\n- toposimplify\n- simplify_with\n- simplify_algorithm\n- winding_order\n\nWhere the `toposimplify` and `topoquantize` are supported by chaining as well. Meaning you could first compute the Topology (which can be cost-intensive) and afterwards apply the simplify and quantize settings on the computed Topology and visualize till pleased.\n\n```python\ntj = topojson.Topology(data, prequantize=False, topology=True)\ntj.toposimplify(1).topoquantize(1e6).to_svg()\n```\n\nOr use the ipywidget approach described more below for an interactive approach.\n\n## Installation\n\nInstallation can be done by:\n\n```\npython3 -m pip install topojson\n```\n\nTopojson depends on the following packages:\n\n- numpy\n- shapely\n\nWindows users: download the dependencies from https://www.lfd.uci.edu/~gohlke/pythonlibs/.\nOS X or Linux users: use `pip` as usual\n\nFurther, optional dependencies are:\n\n- altair (enlarge the experience by visualizing your TopoJSON output)\n- simplification (more and quicker simplification options)\n- geojson (parse string input with GeoJSON data)\n- geopandas (with `fiona` version >=1.8.6!, parse your TopoJSON output directly into a GeoDataFrame - converting it to GeoJSON)\n- ipywidgets + (lab)extension (make your life complete with the interactive experience)\n\n## Get in touch\n\nFor now, just use the Github issues. That can be:\n\n- usage questions\n- bug reports\n- feature suggestions\n- or anything related\n\n## Examples and tutorial notebooks\n\nThe followig examples present different input types parsed to different output types. The input types are not dependent on the used output type and vice versa, they are just possible examples.\n\n### Input Type: `list`\n\nThe list should contain items that supports the `__geo_interface__`\n\n```python\nimport topojson\n\nlist_geoms = [\n    {\"type\": \"Polygon\", \"coordinates\": [[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]]},\n    {\"type\": \"Polygon\", \"coordinates\": [[[1, 0], [2, 0], [2, 1], [1, 1], [1, 0]]]}\n]\n```\n\n#\n\n#### apply Topology and present the output as dict\n\n```python\ntj = topojson.Topology(data, prequantize=False, topology=True)\ntj.to_dict()\n```\n\n```python\n{'type': 'Topology',\n  [[1.0, 0.0], [1.0, 1.0]],\n  [[1.0, 1.0], [2.0, 1.0], [2.0, 0.0], [1.0, 0.0]]],\n 'objects': {'data': {'geometries': [{'type': 'Polygon', 'arcs': [[-2, 0]]},\n    {'type': 'Polygon', 'arcs': [[1, 2]]}],\n   'type': 'GeometryCollection'}},\n 'options': TopoOptions(\n   {'prequantize': False,\n  'presimplify': False,\n  'simplify_with': 'shapely',\n  'topology': True,\n  'topoquantize': False,\n  'toposimplify': 0.0001,\n  'winding_order': 'CW_CCW'}\n ),\n 'bbox': (0.0, 0.0, 2.0, 1.0),\n 'arcs': [[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 1.0]],\n  [[1.0, 0.0], [1.0, 1.0]],\n  [[1.0, 1.0], [2.0, 1.0], [2.0, 0.0], [1.0, 0.0]]]}\n```\n\n#\n\n### Input Type: `dict`\n\nThe dictionary should be structured like {`key1`: `obj1`, `key2`: `obj2`}.\n\n```python\nimport topojson\n\ndictionary = {\n    0: {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]],\n    },\n    1: {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[[1, 0], [2, 0], [2, 1], [1, 1], [1, 0]]],\n    }\n}\n```\n\n#\n\n#### apply Topology and present the output as scalable vector graphic\n\n```python\ntj = topojson.Topology(dictionary, prequantize=False, topology=True)\ntj.to_svg()\n```\n\n<img src=\"docs/images/svg_repr.png\" alt=\"svg\">\n\n#\n\n### Input Type: `GeoDataFrame` from package `geopandas` (if installed)\n\n```python\nimport geopandas\nimport topojson\nfrom shapely import geometry\n%matplotlib inline\n\ngdf = geopandas.GeoDataFrame({\n    \"name\": [\"abc\", \"def\"],\n    \"geometry\": [\n        geometry.Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]),\n        geometry.Polygon([[1, 0], [2, 0], [2, 1], [1, 1], [1, 0]])\n    ]\n})\ngdf.plot(column=\"name\")\ngdf.head()\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abc</td>\n      <td>POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>def</td>\n      <td>POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<img src=\"images/geodataframe_plot.png\" alt=\"geodataframe\">\n\n#\n\n#### apply Topology and present output as `altair` chart (if installed)\n\n```python\ntj = topojson.Topology(gdf, prequantize=False, topology=True)\ntj.to_alt(color='properties.name:N')\n```\n\n<img src=\"docs/images/altair_chart.png\" alt=\"altair\">\n\n#\n\n### Input Type: `FeatureCollection` from package `geojson` (if installed)\n\n```python\nfrom geojson import Feature, Polygon, FeatureCollection\n\nfeature_1 = Feature(\n    geometry=Polygon([[[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]]),\n    properties={\"name\":\"abc\"}\n)\nfeature_2 = Feature(\n    geometry=Polygon([[[1, 0], [2, 0], [2, 1], [1, 1], [1, 0]]]),\n    properties={\"name\":\"def\"}\n)\nfeature_collection = FeatureCollection([feature_1, feature_2])\n```\n\n#\n\n#### apply Topology and present output as `geodataframe` (if `geopandas` is installed)\n\n```python\ntj = topojson.Topology(feature_collection, prequantize=False, topology=True)\ntj.to_gdf()\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>geometry</th>\n      <th>id</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLYGON ((1 1, 1 0, 0 0, 0 1, 1 1))</td>\n      <td>None</td>\n      <td>abc</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>POLYGON ((1 0, 1 1, 2 1, 2 0, 1 0))</td>\n      <td>None</td>\n      <td>def</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n#\n\nCurrently parsing TopoJSON as string input requires `geopandas` (`fiona` version >=1.8.6) and parsing GeoJSON as string requires the package `geojson`.\n\nThe package `simplification` can be used if you want to adopt the Visvalingam-Whyatt algorithm for simplifying or for having a speedup on the Douglas-Peucker algorithm (compared to the `shapely`-integrated version).\n\nThe `.to_widget()` function depends on `ipywidgets` and can be a bit tricky to get it installed and properly working. But if you do, something like the following will show up:\n\n<img src=\"docs/images/ipywidgets.gif\" alt=\"ipywidgets\">\n\nTo install, use the ipywidgets website for installation.  \nInitially I ran very often in errors like the following after I thought I'd install everything correctly:\n\n```\n[IPKernelApp] WARNING | No such comm: xxxyyyzzz123etc.\n```\n\nTo solve this error I found out that I'd first had to pip uninstall JupyterLab, then install the lab extension of ipywidgets and then install JupyterLab again. Then when starting JupyterLab for the first time it asks to rebuild to include the ipywidgets lab extension. Click Yes or OK and wait till JupyterLab refresh, afterwards these errors did not appear for me anymore (both Windows and macOS). If you got all installed I suggest starting from `In [5]` in the following [notebook](https://nbviewer.jupyter.org/github/mattijn/topojson/blob/master/notebooks/ipywidgets_interaction.ipynb) to test if all works.\n\nFuther, the many [tests][l1] as part of this package also can be used as example material.\n\n[l1]: https://github.com/mattijn/topojson/tree/master/tests\n\n## Changelog\n\nVersion `1.0rc8`:\n\n- complex shared paths are registered correctly #63\n- new insterted junctions are inserted in right order #64\n\nVersion `1.0rc7`:\n\n- major refactoring to include quantization of points\n- and to hash combinations of polygons/linestrings with points #61\n\nVersion `1.0rc6`:\n\n- fix linemerging of non-duplicate arcs #50\n- include `__geo_interface__` attributed as input #53\n- include travis testing on GitHub (thanks @Casyfill!)\n- migrate from unittests to pytest (thanks @Casyfill!)\n\nVersion `1.0rc5`:\n\n- change `TopoOptions` in `to_dict` to be serializable #46\n- changed all `int` to `np.int64`, since it is platform specific #49, #45\n\nVersion `1.0rc4`:\n\n- no `linestring` key in topojson\n- serialize `str` of TopoJSON or GeoJSON data\n- add `vw` as algoritm type and update widget\n\nVersion `1.0rc3`:\n\n- changed class object to inherit sequence\n- removed the `topojson.topology` function\n- introducted the `topojson.Topology` class\n- speedups and bug fixes, see PR#15-#36\n- introduced multiple options see #8\n\nVersion `1.0rc2`:\n\n- apply linemerge on non-duplicate arcs\n- fix computing topology without shared boundaries ([#1][i1], [#3][i3])\n- use `geopandas` and `geojson` solely for tests, but recognize them as type ([#2][i2], [#4][i4])\n- use [`simplification`](https://github.com/urschrei/simplification) as option to simplify linestrings\n- include option to snap vertices to grid\n- removed `rdtree` as dependency, use `SRTtree` from `shapely` instead\n\nVersion `1.0rc1`:\n\n- initial release\n\n[i1]: https://github.com/mattijn/topojson/issues/1\n[i2]: https://github.com/mattijn/topojson/issues/2\n[i3]: https://github.com/mattijn/topojson/issues/3\n[i4]: https://github.com/mattijn/topojson/issues/4\n\n## Tests\n\nThere are many tests writen to make sure all type of corner-cases are covered. To make sure all tests will pass, you must have version >=0.5.0 of `geopandas` in combination with `fiona` version >=1.8.6.\nShapely version 1.7a2 is recommended (because of https://github.com/Toblerity/Shapely/pull/733), but all tests pass from version >=1.6.3.\n\n## Development Notes\n\nDevelopment of this packages started by reading:\n\n- https://bost.ocks.org/mike/topology/ and https://github.com/topojson by Mike Bostocks and\n- https://github.com/calvinmetcalf/topojson.py by Calvin Metcalf.\n\nThe reason for development of this package was the willingness:\n\n- To adopt `shapely` (GEOS) and `numpy` for the core-functionalities in deriving the Topology.\n- To provide integration with other geographical packages within the Python ecosystem (eg. `geopandas` and `altair`).\n- Also the possibility of including the many tests available in the JavaScript implementation was hoped-for.\n\nTo create a certain synergy between the JavaScript and Python implementation the same naming conventions was adopted for the processing steps (`extract`, `join`, `cut`, `dedup`, `hashmap`). Even though the actual code differs significant.\n\nSome subtile differences are existing between the JavaScript implementation and the current Python implementation for deriving the Topology. Some of these deviations are briefly mentioned here:\n\n1. The extraction class stores all the different geometrical objects as Shapely LineStrings in `linestrings` and keeps a record of these linestrings available under the key `bookkeeping_geoms`. In the JavaScript implementation there is a differentiation of the geometries between `lines`, `rings` and a seperate object containing all `coordinates`. Since the current approach adopts `shapely` for much of the heavy lifting this extraction is working against us (in the cut-process).\n\n2. In the join class only the geometries that have shared paths are considered to have junctions. This means that the intersection of two crossing lines at a single coordinate is not considered as a junction. This also means that the two ends of a LineString are not automatically considered as being a junction. So if a segment starts or finish on another segment, with that coordinate being the only coordinate in common, it is not considered as a junction.\n\n3. In the computation of a shared path, a junction can be created on an existing coordinate in one of the geometries. Where in the JavaScript implementation this only can be considered when both geometries contain the coordinate.\n\n4. In the process of cutting lines; the rings are rotated in the JavaScript implementation to make sure they start at a junction. This reduces the number of cuts. This rotation is done before cutting. In the current Python implementation this is done differently. First the linestrings are cut using the junction coordinates and afterwards there is tried to apply a linemerge on the non-duplicate arcs of a geometry containing at least one shared arc.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattijn/topojson", "keywords": "topojson python github topology geojson", "license": "", "maintainer": "", "maintainer_email": "", "name": "topojson", "package_url": "https://pypi.org/project/topojson/", "platform": "", "project_url": "https://pypi.org/project/topojson/", "project_urls": {"Homepage": "https://github.com/mattijn/topojson"}, "release_url": "https://pypi.org/project/topojson/1.0rc9/", "requires_dist": ["numpy", "shapely", "shapely >=1.7a2; extra == \"dev\"", "geojson; extra == \"dev\"", "simplification; extra == \"dev\"", "pyshp; extra == \"dev\"", "fiona >=1.8.6; extra == \"dev\"", "geopandas; extra == \"dev\"", "altair; extra == \"dev\"", "ipywidgets; extra == \"dev\""], "requires_python": "", "summary": "topojson - a powerful library to encode geographic data as topology in Python!\ud83c\udf0d", "version": "1.0rc9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>topojson</h1>\n<p><a href=\"https://pypi.org/project/topojson\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa0941949264b120a208aa966d7b813a6cb8a861/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f746f706f6a736f6e2e737667\"></a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>\n<a href=\"https://travis-ci.org/mattijn/topojson\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e4426aa0065c0ad0c556af6ae4aa9bce8b14f71/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d617474696a6e2f746f706f6a736f6e2f6d61737465722e7376673f7374796c653d666c6174\"></a></p>\n<p><em>Its not yet version 1.0, but that's merely because of missing documentation. With other words: you should be safe to use it!</em></p>\n<p><em>The docs will slowly move to/emerge at: <a href=\"https://mattijn.github.io/topojson\" rel=\"nofollow\">https://mattijn.github.io/topojson</a></em></p>\n<h1></h1>\n<p><em>Topojson</em> encodes geographic data structures into a shared topology. This repository describes the development of a <strong>Python</strong> implementation of the TopoJSON format.</p>\n<h2>Usage</h2>\n<p>The package can be used in multiple different ways, with the main purpose to create a TopoJSON topology:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">topojson</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]},</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</pre>\n<p>What results in the following TopoJSON object:</p>\n<pre><span class=\"s1\">'{\"type\": \"Topology\", \"objects\": {\"data\": {\"geometries\": [{\"type\": \"Polygon\", \"arcs\": [[-2, 0]]}, {\"type\": \"Polygon\", \"arcs\": [[1, 2]]}], \"type\": \"GeometryCollection\"}}, \"bbox\": [0.0, 0.0, 2.0, 1.0], \"arcs\": [[[1.0, 0.0], [0.0, 0.0], [0.0, 1.0], [1.0, 1.0]], [[1.0, 0.0], [1.0, 1.0]], [[1.0, 1.0], [2.0, 1.0], [2.0, 0.0], [1.0, 0.0]]]}'</span>\n</pre>\n<p>More or less all Python objects containing geographical data are supported through the <code>__geo_interface__</code> attribute. This includes at least the Python packages <code>geojson</code>, <code>shapely</code>, <code>geopandas</code>, <code>pyshp</code>.</p>\n<p>Moreover a <code>dict</code> of objects that provide a valid <code>__geo_interface__</code>, a <code>list</code> of objects that provide a valid <code>__geo_interface__</code> and <code>str</code> objects with TopoJSON or GeoJSON geographic structures are supported too.</p>\n<p>In the example above the output is parsed to a JSON string (<code>.to_json()</code>), but this is not the only thing we can do. Multiple functions are available to serialize the Topology object.</p>\n<table>\n<thead>\n<tr>\n<th>Functions</th>\n<th>Required Packages</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>topojson.Topology().to_json()</td>\n<td>Shapely, NumPy</td>\n</tr>\n<tr>\n<td>topojson.Topology().to_dict()</td>\n<td>Shapely, NumPy</td>\n</tr>\n<tr>\n<td>topojson.Topology().to_svg()</td>\n<td>Shapely, NumPy</td>\n</tr>\n<tr>\n<td>topojson.Topology().to_alt()</td>\n<td>Shapely, NumPy, Altair*</td>\n</tr>\n<tr>\n<td>topojson.Topology().to_gdf()</td>\n<td>Shapely, NumPy, GeoPandas*</td>\n</tr>\n<tr>\n<td>topojson.Topology().to_widget()</td>\n<td>Shapely, NumPy, Altair*, Simplification*, ipywidgets* (+ labextension)</td>\n</tr></tbody></table>\n<p>* optional dependencies</p>\n<p>The TopoJSON format is merely designed to create smaller files than its GeoJSON counterpart. It is capable of doing so through a few options of which the following are currently available: compute topology, quantize the input and/or output, simplify the input and/or output.</p>\n<p>The following parameters can be used to control these options for generating the <code>Topology()</code> object. Detailed information can be found in the docstring of the <a href=\"https://github.com/mattijn/topojson/blob/master/topojson/core/topology.py#L18:L79\" rel=\"nofollow\"><code>topojson.Topology()</code></a> class.</p>\n<ul>\n<li>topology</li>\n<li>prequantize</li>\n<li>topoquantize</li>\n<li>presimplify</li>\n<li>toposimplify</li>\n<li>simplify_with</li>\n<li>simplify_algorithm</li>\n<li>winding_order</li>\n</ul>\n<p>Where the <code>toposimplify</code> and <code>topoquantize</code> are supported by chaining as well. Meaning you could first compute the Topology (which can be cost-intensive) and afterwards apply the simplify and quantize settings on the computed Topology and visualize till pleased.</p>\n<pre><span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">toposimplify</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">topoquantize</span><span class=\"p\">(</span><span class=\"mf\">1e6</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_svg</span><span class=\"p\">()</span>\n</pre>\n<p>Or use the ipywidget approach described more below for an interactive approach.</p>\n<h2>Installation</h2>\n<p>Installation can be done by:</p>\n<pre><code>python3 -m pip install topojson\n</code></pre>\n<p>Topojson depends on the following packages:</p>\n<ul>\n<li>numpy</li>\n<li>shapely</li>\n</ul>\n<p>Windows users: download the dependencies from <a href=\"https://www.lfd.uci.edu/%7Egohlke/pythonlibs/\" rel=\"nofollow\">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a>.\nOS X or Linux users: use <code>pip</code> as usual</p>\n<p>Further, optional dependencies are:</p>\n<ul>\n<li>altair (enlarge the experience by visualizing your TopoJSON output)</li>\n<li>simplification (more and quicker simplification options)</li>\n<li>geojson (parse string input with GeoJSON data)</li>\n<li>geopandas (with <code>fiona</code> version &gt;=1.8.6!, parse your TopoJSON output directly into a GeoDataFrame - converting it to GeoJSON)</li>\n<li>ipywidgets + (lab)extension (make your life complete with the interactive experience)</li>\n</ul>\n<h2>Get in touch</h2>\n<p>For now, just use the Github issues. That can be:</p>\n<ul>\n<li>usage questions</li>\n<li>bug reports</li>\n<li>feature suggestions</li>\n<li>or anything related</li>\n</ul>\n<h2>Examples and tutorial notebooks</h2>\n<p>The followig examples present different input types parsed to different output types. The input types are not dependent on the used output type and vice versa, they are just possible examples.</p>\n<h3>Input Type: <code>list</code></h3>\n<p>The list should contain items that supports the <code>__geo_interface__</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">topojson</span>\n\n<span class=\"n\">list_geoms</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]},</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span> <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]}</span>\n<span class=\"p\">]</span>\n</pre>\n<h1></h1>\n<h4>apply Topology and present the output as dict</h4>\n<pre><span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Topology'</span><span class=\"p\">,</span>\n  <span class=\"p\">[[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]],</span>\n  <span class=\"p\">[[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]]],</span>\n <span class=\"s1\">'objects'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'geometries'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Polygon'</span><span class=\"p\">,</span> <span class=\"s1\">'arcs'</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Polygon'</span><span class=\"p\">,</span> <span class=\"s1\">'arcs'</span><span class=\"p\">:</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]}],</span>\n   <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'GeometryCollection'</span><span class=\"p\">}},</span>\n <span class=\"s1\">'options'</span><span class=\"p\">:</span> <span class=\"n\">TopoOptions</span><span class=\"p\">(</span>\n   <span class=\"p\">{</span><span class=\"s1\">'prequantize'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"s1\">'presimplify'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"s1\">'simplify_with'</span><span class=\"p\">:</span> <span class=\"s1\">'shapely'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'topology'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n  <span class=\"s1\">'topoquantize'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"s1\">'toposimplify'</span><span class=\"p\">:</span> <span class=\"mf\">0.0001</span><span class=\"p\">,</span>\n  <span class=\"s1\">'winding_order'</span><span class=\"p\">:</span> <span class=\"s1\">'CW_CCW'</span><span class=\"p\">}</span>\n <span class=\"p\">),</span>\n <span class=\"s1\">'bbox'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span>\n <span class=\"s1\">'arcs'</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]],</span>\n  <span class=\"p\">[[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]],</span>\n  <span class=\"p\">[[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]]]}</span>\n</pre>\n<h1></h1>\n<h3>Input Type: <code>dict</code></h3>\n<p>The dictionary should be structured like {<code>key1</code>: <code>obj1</code>, <code>key2</code>: <code>obj2</code>}.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">topojson</span>\n\n<span class=\"n\">dictionary</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]],</span>\n    <span class=\"p\">},</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Polygon\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"coordinates\"</span><span class=\"p\">:</span> <span class=\"p\">[[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h1></h1>\n<h4>apply Topology and present the output as scalable vector graphic</h4>\n<pre><span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">dictionary</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">to_svg</span><span class=\"p\">()</span>\n</pre>\n<img alt=\"svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce6bc0a5436b2b6b19043d86447989e7c4f35805/646f63732f696d616765732f7376675f726570722e706e67\">\n<h1></h1>\n<h3>Input Type: <code>GeoDataFrame</code> from package <code>geopandas</code> (if installed)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">geopandas</span>\n<span class=\"kn\">import</span> <span class=\"nn\">topojson</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shapely</span> <span class=\"kn\">import</span> <span class=\"n\">geometry</span>\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n\n<span class=\"n\">gdf</span> <span class=\"o\">=</span> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"def\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"geometry\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]),</span>\n        <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">Polygon</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"n\">gdf</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n<span class=\"n\">gdf</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<div>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>name</th>\n      <th>geometry</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abc</td>\n      <td>POLYGON ((0 0, 1 0, 1 1, 0 1, 0 0))</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>def</td>\n      <td>POLYGON ((1 0, 2 0, 2 1, 1 1, 1 0))</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n<img alt=\"geodataframe\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2c76f727eb2398476d577d3b25791078663861e/696d616765732f67656f646174616672616d655f706c6f742e706e67\">\n<h1></h1>\n<h4>apply Topology and present output as <code>altair</code> chart (if installed)</h4>\n<pre><span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">gdf</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">to_alt</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'properties.name:N'</span><span class=\"p\">)</span>\n</pre>\n<img alt=\"altair\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f256ab7e5a774d183156cb2b9d798792967c6cdb/646f63732f696d616765732f616c746169725f63686172742e706e67\">\n<h1></h1>\n<h3>Input Type: <code>FeatureCollection</code> from package <code>geojson</code> (if installed)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">geojson</span> <span class=\"kn\">import</span> <span class=\"n\">Feature</span><span class=\"p\">,</span> <span class=\"n\">Polygon</span><span class=\"p\">,</span> <span class=\"n\">FeatureCollection</span>\n\n<span class=\"n\">feature_1</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span>\n    <span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Polygon</span><span class=\"p\">([[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]),</span>\n    <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"abc\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">feature_2</span> <span class=\"o\">=</span> <span class=\"n\">Feature</span><span class=\"p\">(</span>\n    <span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">Polygon</span><span class=\"p\">([[[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]]),</span>\n    <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"def\"</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"n\">feature_collection</span> <span class=\"o\">=</span> <span class=\"n\">FeatureCollection</span><span class=\"p\">([</span><span class=\"n\">feature_1</span><span class=\"p\">,</span> <span class=\"n\">feature_2</span><span class=\"p\">])</span>\n</pre>\n<h1></h1>\n<h4>apply Topology and present output as <code>geodataframe</code> (if <code>geopandas</code> is installed)</h4>\n<pre><span class=\"n\">tj</span> <span class=\"o\">=</span> <span class=\"n\">topojson</span><span class=\"o\">.</span><span class=\"n\">Topology</span><span class=\"p\">(</span><span class=\"n\">feature_collection</span><span class=\"p\">,</span> <span class=\"n\">prequantize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">topology</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">tj</span><span class=\"o\">.</span><span class=\"n\">to_gdf</span><span class=\"p\">()</span>\n</pre>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>geometry</th>\n      <th>id</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>POLYGON ((1 1, 1 0, 0 0, 0 1, 1 1))</td>\n      <td>None</td>\n      <td>abc</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>POLYGON ((1 0, 1 1, 2 1, 2 0, 1 0))</td>\n      <td>None</td>\n      <td>def</td>\n    </tr>\n  </tbody>\n</table>\n\n<h1></h1>\n<p>Currently parsing TopoJSON as string input requires <code>geopandas</code> (<code>fiona</code> version &gt;=1.8.6) and parsing GeoJSON as string requires the package <code>geojson</code>.</p>\n<p>The package <code>simplification</code> can be used if you want to adopt the Visvalingam-Whyatt algorithm for simplifying or for having a speedup on the Douglas-Peucker algorithm (compared to the <code>shapely</code>-integrated version).</p>\n<p>The <code>.to_widget()</code> function depends on <code>ipywidgets</code> and can be a bit tricky to get it installed and properly working. But if you do, something like the following will show up:</p>\n<img alt=\"ipywidgets\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5ad84c1ae259992da04e7f48d2423ec50ffb655/646f63732f696d616765732f697079776964676574732e676966\">\n<p>To install, use the ipywidgets website for installation.<br>\nInitially I ran very often in errors like the following after I thought I'd install everything correctly:</p>\n<pre><code>[IPKernelApp] WARNING | No such comm: xxxyyyzzz123etc.\n</code></pre>\n<p>To solve this error I found out that I'd first had to pip uninstall JupyterLab, then install the lab extension of ipywidgets and then install JupyterLab again. Then when starting JupyterLab for the first time it asks to rebuild to include the ipywidgets lab extension. Click Yes or OK and wait till JupyterLab refresh, afterwards these errors did not appear for me anymore (both Windows and macOS). If you got all installed I suggest starting from <code>In [5]</code> in the following <a href=\"https://nbviewer.jupyter.org/github/mattijn/topojson/blob/master/notebooks/ipywidgets_interaction.ipynb\" rel=\"nofollow\">notebook</a> to test if all works.</p>\n<p>Futher, the many <a href=\"https://github.com/mattijn/topojson/tree/master/tests\" rel=\"nofollow\">tests</a> as part of this package also can be used as example material.</p>\n<h2>Changelog</h2>\n<p>Version <code>1.0rc8</code>:</p>\n<ul>\n<li>complex shared paths are registered correctly #63</li>\n<li>new insterted junctions are inserted in right order #64</li>\n</ul>\n<p>Version <code>1.0rc7</code>:</p>\n<ul>\n<li>major refactoring to include quantization of points</li>\n<li>and to hash combinations of polygons/linestrings with points #61</li>\n</ul>\n<p>Version <code>1.0rc6</code>:</p>\n<ul>\n<li>fix linemerging of non-duplicate arcs #50</li>\n<li>include <code>__geo_interface__</code> attributed as input #53</li>\n<li>include travis testing on GitHub (thanks @Casyfill!)</li>\n<li>migrate from unittests to pytest (thanks @Casyfill!)</li>\n</ul>\n<p>Version <code>1.0rc5</code>:</p>\n<ul>\n<li>change <code>TopoOptions</code> in <code>to_dict</code> to be serializable #46</li>\n<li>changed all <code>int</code> to <code>np.int64</code>, since it is platform specific #49, #45</li>\n</ul>\n<p>Version <code>1.0rc4</code>:</p>\n<ul>\n<li>no <code>linestring</code> key in topojson</li>\n<li>serialize <code>str</code> of TopoJSON or GeoJSON data</li>\n<li>add <code>vw</code> as algoritm type and update widget</li>\n</ul>\n<p>Version <code>1.0rc3</code>:</p>\n<ul>\n<li>changed class object to inherit sequence</li>\n<li>removed the <code>topojson.topology</code> function</li>\n<li>introducted the <code>topojson.Topology</code> class</li>\n<li>speedups and bug fixes, see PR#15-#36</li>\n<li>introduced multiple options see #8</li>\n</ul>\n<p>Version <code>1.0rc2</code>:</p>\n<ul>\n<li>apply linemerge on non-duplicate arcs</li>\n<li>fix computing topology without shared boundaries (<a href=\"https://github.com/mattijn/topojson/issues/1\" rel=\"nofollow\">#1</a>, <a href=\"https://github.com/mattijn/topojson/issues/3\" rel=\"nofollow\">#3</a>)</li>\n<li>use <code>geopandas</code> and <code>geojson</code> solely for tests, but recognize them as type (<a href=\"https://github.com/mattijn/topojson/issues/2\" rel=\"nofollow\">#2</a>, <a href=\"https://github.com/mattijn/topojson/issues/4\" rel=\"nofollow\">#4</a>)</li>\n<li>use <a href=\"https://github.com/urschrei/simplification\" rel=\"nofollow\"><code>simplification</code></a> as option to simplify linestrings</li>\n<li>include option to snap vertices to grid</li>\n<li>removed <code>rdtree</code> as dependency, use <code>SRTtree</code> from <code>shapely</code> instead</li>\n</ul>\n<p>Version <code>1.0rc1</code>:</p>\n<ul>\n<li>initial release</li>\n</ul>\n<h2>Tests</h2>\n<p>There are many tests writen to make sure all type of corner-cases are covered. To make sure all tests will pass, you must have version &gt;=0.5.0 of <code>geopandas</code> in combination with <code>fiona</code> version &gt;=1.8.6.\nShapely version 1.7a2 is recommended (because of <a href=\"https://github.com/Toblerity/Shapely/pull/733\" rel=\"nofollow\">https://github.com/Toblerity/Shapely/pull/733</a>), but all tests pass from version &gt;=1.6.3.</p>\n<h2>Development Notes</h2>\n<p>Development of this packages started by reading:</p>\n<ul>\n<li><a href=\"https://bost.ocks.org/mike/topology/\" rel=\"nofollow\">https://bost.ocks.org/mike/topology/</a> and <a href=\"https://github.com/topojson\" rel=\"nofollow\">https://github.com/topojson</a> by Mike Bostocks and</li>\n<li><a href=\"https://github.com/calvinmetcalf/topojson.py\" rel=\"nofollow\">https://github.com/calvinmetcalf/topojson.py</a> by Calvin Metcalf.</li>\n</ul>\n<p>The reason for development of this package was the willingness:</p>\n<ul>\n<li>To adopt <code>shapely</code> (GEOS) and <code>numpy</code> for the core-functionalities in deriving the Topology.</li>\n<li>To provide integration with other geographical packages within the Python ecosystem (eg. <code>geopandas</code> and <code>altair</code>).</li>\n<li>Also the possibility of including the many tests available in the JavaScript implementation was hoped-for.</li>\n</ul>\n<p>To create a certain synergy between the JavaScript and Python implementation the same naming conventions was adopted for the processing steps (<code>extract</code>, <code>join</code>, <code>cut</code>, <code>dedup</code>, <code>hashmap</code>). Even though the actual code differs significant.</p>\n<p>Some subtile differences are existing between the JavaScript implementation and the current Python implementation for deriving the Topology. Some of these deviations are briefly mentioned here:</p>\n<ol>\n<li>\n<p>The extraction class stores all the different geometrical objects as Shapely LineStrings in <code>linestrings</code> and keeps a record of these linestrings available under the key <code>bookkeeping_geoms</code>. In the JavaScript implementation there is a differentiation of the geometries between <code>lines</code>, <code>rings</code> and a seperate object containing all <code>coordinates</code>. Since the current approach adopts <code>shapely</code> for much of the heavy lifting this extraction is working against us (in the cut-process).</p>\n</li>\n<li>\n<p>In the join class only the geometries that have shared paths are considered to have junctions. This means that the intersection of two crossing lines at a single coordinate is not considered as a junction. This also means that the two ends of a LineString are not automatically considered as being a junction. So if a segment starts or finish on another segment, with that coordinate being the only coordinate in common, it is not considered as a junction.</p>\n</li>\n<li>\n<p>In the computation of a shared path, a junction can be created on an existing coordinate in one of the geometries. Where in the JavaScript implementation this only can be considered when both geometries contain the coordinate.</p>\n</li>\n<li>\n<p>In the process of cutting lines; the rings are rotated in the JavaScript implementation to make sure they start at a junction. This reduces the number of cuts. This rotation is done before cutting. In the current Python implementation this is done differently. First the linestrings are cut using the junction coordinates and afterwards there is tried to apply a linemerge on the non-duplicate arcs of a geometry containing at least one shared arc.</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 7107257, "releases": {"1.0rc1": [{"comment_text": "", "digests": {"md5": "82e392751820155185ceb2bd55a32fcb", "sha256": "14507e07c3a55ba92afced31a534032a26f0dfe1a735d7fe2bb7abd0bcde7f52"}, "downloads": -1, "filename": "topojson-1.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "82e392751820155185ceb2bd55a32fcb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 51732, "upload_time": "2019-01-16T20:53:07", "upload_time_iso_8601": "2019-01-16T20:53:07.534026Z", "url": "https://files.pythonhosted.org/packages/d7/ca/bcbf553264c3f73231b3fc00e2f3feb544bc0f7b940a62fa9f43162c0888/topojson-1.0rc1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33ce0b6e9219c969ded8372135315d0b", "sha256": "bff2892f58a0d2114497d6f80b76a96298138a7356b0a86fff33e79d205315eb"}, "downloads": -1, "filename": "topojson-1.0rc1.tar.gz", "has_sig": false, "md5_digest": "33ce0b6e9219c969ded8372135315d0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3385975, "upload_time": "2019-01-16T20:53:15", "upload_time_iso_8601": "2019-01-16T20:53:15.535075Z", "url": "https://files.pythonhosted.org/packages/22/ea/e6a19dfe6a69c701e7e8363000cbf812b5695ae0f37dc302f0b6df09e77a/topojson-1.0rc1.tar.gz", "yanked": false}], "1.0rc2": [{"comment_text": "", "digests": {"md5": "f76c79c17d8f80686a1206ec581fc125", "sha256": "515ca476a5d89c32cde85552130c637080054b59eb95f3d0d9eea33984fa9681"}, "downloads": -1, "filename": "topojson-1.0rc2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f76c79c17d8f80686a1206ec581fc125", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62087, "upload_time": "2019-03-24T17:34:44", "upload_time_iso_8601": "2019-03-24T17:34:44.192186Z", "url": "https://files.pythonhosted.org/packages/2c/68/bb8eca89060527c8704b62204e130c009f2fe69dd0019bd7e6ec73349ae2/topojson-1.0rc2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "add607f0f7b4dc2884c89c08fbf7db88", "sha256": "2b774ebdaf164cc7b5474c114e3b82e047378401e316f3538a7095c9d40c5c00"}, "downloads": -1, "filename": "topojson-1.0rc2.tar.gz", "has_sig": false, "md5_digest": "add607f0f7b4dc2884c89c08fbf7db88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3509719, "upload_time": "2019-03-24T17:34:52", "upload_time_iso_8601": "2019-03-24T17:34:52.445716Z", "url": "https://files.pythonhosted.org/packages/2f/9f/a5bcc5bc6fbf68ef23a76bb3b327e01e6366ee36b88a429aaafefb636abf/topojson-1.0rc2.tar.gz", "yanked": false}], "1.0rc3": [{"comment_text": "", "digests": {"md5": "de1db7ff19e77f95d78d4867b854d63b", "sha256": "1cf64bc4bd15b5d6d331c561798cc82ab6632188ed04831a90c93d9e86be849c"}, "downloads": -1, "filename": "topojson-1.0rc3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "de1db7ff19e77f95d78d4867b854d63b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 98711, "upload_time": "2019-08-10T22:49:21", "upload_time_iso_8601": "2019-08-10T22:49:21.729143Z", "url": "https://files.pythonhosted.org/packages/ab/7f/1f39e6b03108073cb27fe936662eeb79d2d974ad4dcf09da74617ae9f44b/topojson-1.0rc3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bac4f40873e52129fb1a29ad688dfed0", "sha256": "ded7f43a752df330d684c346c9f3baa7f36874ad4c74e8d338c62882743f5576"}, "downloads": -1, "filename": "topojson-1.0rc3.tar.gz", "has_sig": false, "md5_digest": "bac4f40873e52129fb1a29ad688dfed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4213815, "upload_time": "2019-08-10T22:49:46", "upload_time_iso_8601": "2019-08-10T22:49:46.131113Z", "url": "https://files.pythonhosted.org/packages/62/eb/c9ad62ba46f0385ff0990c483935c105b1db5dd81b7c795290deff0e4ba0/topojson-1.0rc3.tar.gz", "yanked": false}], "1.0rc4": [{"comment_text": "", "digests": {"md5": "d813b5ca6bd69c917490d6616440dd36", "sha256": "2c07da901515db4176aafbd82b5ece783eb9de482f7b6b3e3cdbe2fa2c86ff3b"}, "downloads": -1, "filename": "topojson-1.0rc4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d813b5ca6bd69c917490d6616440dd36", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 101384, "upload_time": "2019-08-11T20:02:53", "upload_time_iso_8601": "2019-08-11T20:02:53.528781Z", "url": "https://files.pythonhosted.org/packages/ea/2f/36575294e5957e5dac06f14fd968450c3fb0b63320ca9f89c90fdbba47cc/topojson-1.0rc4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35f4f685bd39830a3d5c176ca1485f66", "sha256": "c65a733140c5d01bbc7784f67a668acb5fd4b255b56efbf1a114df0d166343e4"}, "downloads": -1, "filename": "topojson-1.0rc4.tar.gz", "has_sig": false, "md5_digest": "35f4f685bd39830a3d5c176ca1485f66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4269646, "upload_time": "2019-08-11T20:03:00", "upload_time_iso_8601": "2019-08-11T20:03:00.411238Z", "url": "https://files.pythonhosted.org/packages/96/1d/60e1ab41b9acf6aff1f6cbc7992490ce027cffa1abd4fcd7afe4d6c497a8/topojson-1.0rc4.tar.gz", "yanked": false}], "1.0rc5": [{"comment_text": "", "digests": {"md5": "5d4e6262ba86996b1ddabcdf35433e6b", "sha256": "52f2e11484101ea18fa49ecde8be21e1a0315a7769b0d6161f8d76f07ad7847a"}, "downloads": -1, "filename": "topojson-1.0rc5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d4e6262ba86996b1ddabcdf35433e6b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 103490, "upload_time": "2019-08-19T20:40:11", "upload_time_iso_8601": "2019-08-19T20:40:11.253330Z", "url": "https://files.pythonhosted.org/packages/15/89/906fbe94ed44ee22df5f56298248c5a2f2d1b7ed2e5d86c12316c5cb3361/topojson-1.0rc5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66da6ae54d507758188f7de8f85bf995", "sha256": "ad302c80d35abe126084ceb854c5e0bcdd3d25bb3e4d80797432ee48cce58fad"}, "downloads": -1, "filename": "topojson-1.0rc5.tar.gz", "has_sig": false, "md5_digest": "66da6ae54d507758188f7de8f85bf995", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4660593, "upload_time": "2019-08-19T20:40:20", "upload_time_iso_8601": "2019-08-19T20:40:20.079266Z", "url": "https://files.pythonhosted.org/packages/e9/25/fe45fd339bb3895f841b743d88fc875b628438e3bafb906e0f93087dbc90/topojson-1.0rc5.tar.gz", "yanked": false}], "1.0rc6": [{"comment_text": "", "digests": {"md5": "4a3091a77aa43c484f0ed52fcd403b10", "sha256": "1dea708289c689d679686cff7d8e7f25f4b56b8d7ab417a669e995e090b945b3"}, "downloads": -1, "filename": "topojson-1.0rc6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4a3091a77aa43c484f0ed52fcd403b10", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 104479, "upload_time": "2019-09-02T20:47:21", "upload_time_iso_8601": "2019-09-02T20:47:21.933705Z", "url": "https://files.pythonhosted.org/packages/7e/03/b1e7b45cf5068344fe82e354bc30906eb448fbfc2074d34ba2fd186f88a0/topojson-1.0rc6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2db5602f7183a9ff9a8dccb385ff31dd", "sha256": "d4af3424b0aac1c0a33adf157b5dbc9dc49175939c76e68a5d03d1b423a009d2"}, "downloads": -1, "filename": "topojson-1.0rc6.tar.gz", "has_sig": false, "md5_digest": "2db5602f7183a9ff9a8dccb385ff31dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4674073, "upload_time": "2019-09-02T20:47:29", "upload_time_iso_8601": "2019-09-02T20:47:29.052072Z", "url": "https://files.pythonhosted.org/packages/bb/53/41edb848c1a1947be01b45c026d3a323cb1537b82243d16e7a02b710cc47/topojson-1.0rc6.tar.gz", "yanked": false}], "1.0rc7": [{"comment_text": "", "digests": {"md5": "3ecd7650151e4e3bd0f405482df5afe3", "sha256": "f738326cacc6edec677bdbb8da4bb8b3f4be6048a0d70855523e1023b9db5b70"}, "downloads": -1, "filename": "topojson-1.0rc7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3ecd7650151e4e3bd0f405482df5afe3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 108983, "upload_time": "2019-11-14T21:50:44", "upload_time_iso_8601": "2019-11-14T21:50:44.029588Z", "url": "https://files.pythonhosted.org/packages/6f/6c/c5f1febca18922c3339e1d09890ca765864d4e4280e3e854744251b248ba/topojson-1.0rc7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bad31c992a9e4643b7f50ac4ae4da66", "sha256": "30553b3d3912e0ab2598ed8abbb8321ea1c6fb5d2df46b6c3eaad916ec5a8e98"}, "downloads": -1, "filename": "topojson-1.0rc7.tar.gz", "has_sig": false, "md5_digest": "5bad31c992a9e4643b7f50ac4ae4da66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4675311, "upload_time": "2019-11-14T21:50:52", "upload_time_iso_8601": "2019-11-14T21:50:52.122074Z", "url": "https://files.pythonhosted.org/packages/b6/c3/c5f5c648cb400c093e2f225c01ebc464936041a192a0bcd8512862ad08ac/topojson-1.0rc7.tar.gz", "yanked": false}], "1.0rc8": [{"comment_text": "", "digests": {"md5": "91de42852f43513d9fbac226c51e8e61", "sha256": "b5d3e482047832ad46b61881be7314c38f7bb3260e505e248929f5235ba2cce1"}, "downloads": -1, "filename": "topojson-1.0rc8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "91de42852f43513d9fbac226c51e8e61", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 110188, "upload_time": "2019-12-06T22:12:24", "upload_time_iso_8601": "2019-12-06T22:12:24.491976Z", "url": "https://files.pythonhosted.org/packages/a4/81/3298c6daf8391ecdae045cf8624342ae9a6efe8270e02fc50c39c92a4edc/topojson-1.0rc8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c43e8efe96304f3bd599682f2ef64ca1", "sha256": "9cb15c4d33305fdc7b8aeeed40bda51d886006af1a63b1727baf0a462aba0fb7"}, "downloads": -1, "filename": "topojson-1.0rc8.tar.gz", "has_sig": false, "md5_digest": "c43e8efe96304f3bd599682f2ef64ca1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4696758, "upload_time": "2019-12-06T22:12:32", "upload_time_iso_8601": "2019-12-06T22:12:32.378178Z", "url": "https://files.pythonhosted.org/packages/8d/ad/873b20173ca73e45dcc0fcbfff5da695673bfcbc21024290d51dfb3ea316/topojson-1.0rc8.tar.gz", "yanked": false}], "1.0rc9": [{"comment_text": "", "digests": {"md5": "6ffa8a4eb0e9bd84d84daff42e4d9ffe", "sha256": "10e967879a042eb13c93b6b743cbb6a33741b7395ab0d00bf3792fd041389f2f"}, "downloads": -1, "filename": "topojson-1.0rc9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ffa8a4eb0e9bd84d84daff42e4d9ffe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 122405, "upload_time": "2020-04-26T22:05:20", "upload_time_iso_8601": "2020-04-26T22:05:20.466418Z", "url": "https://files.pythonhosted.org/packages/04/f0/22fe7a206fd9e5e4adaaa5a4b3b32ff9478a57afca0b98e9c0fb7a7f0737/topojson-1.0rc9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bac1da931e66e3c570f13b5a06d6a0af", "sha256": "b78d4278e2c76e1fde986bdb347ee0488b8e157fd718dfbcabc849ee7fc48b24"}, "downloads": -1, "filename": "topojson-1.0rc9.tar.gz", "has_sig": false, "md5_digest": "bac1da931e66e3c570f13b5a06d6a0af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4698583, "upload_time": "2020-04-26T22:05:28", "upload_time_iso_8601": "2020-04-26T22:05:28.607174Z", "url": "https://files.pythonhosted.org/packages/0f/da/413ff2b59e682087f43c530eaf1987c7ae7a9476af0e7ac6ddb6cbe7531e/topojson-1.0rc9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ffa8a4eb0e9bd84d84daff42e4d9ffe", "sha256": "10e967879a042eb13c93b6b743cbb6a33741b7395ab0d00bf3792fd041389f2f"}, "downloads": -1, "filename": "topojson-1.0rc9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6ffa8a4eb0e9bd84d84daff42e4d9ffe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 122405, "upload_time": "2020-04-26T22:05:20", "upload_time_iso_8601": "2020-04-26T22:05:20.466418Z", "url": "https://files.pythonhosted.org/packages/04/f0/22fe7a206fd9e5e4adaaa5a4b3b32ff9478a57afca0b98e9c0fb7a7f0737/topojson-1.0rc9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bac1da931e66e3c570f13b5a06d6a0af", "sha256": "b78d4278e2c76e1fde986bdb347ee0488b8e157fd718dfbcabc849ee7fc48b24"}, "downloads": -1, "filename": "topojson-1.0rc9.tar.gz", "has_sig": false, "md5_digest": "bac1da931e66e3c570f13b5a06d6a0af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4698583, "upload_time": "2020-04-26T22:05:28", "upload_time_iso_8601": "2020-04-26T22:05:28.607174Z", "url": "https://files.pythonhosted.org/packages/0f/da/413ff2b59e682087f43c530eaf1987c7ae7a9476af0e7ac6ddb6cbe7531e/topojson-1.0rc9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:49 2020"}