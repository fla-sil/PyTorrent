{"info": {"author": "Jonathon Waterhouse", "author_email": "jonathon.waterhouse@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# happybase-sql #\n\nA (mostly) drop-in replacement for (happybase)[https://happybase.readthedocs.io/en/latest/] that uses an SQL backend instead of HBase.\n\n** Why would I want to use this? **\n\nThis project came about when I was working on a legacy project that used a HBase datastore. The HBase cluster became problematic, suffering from performance issues and was expensive to run. After wrestling with HBase for too long, I decided to migrate the data to SQL and wrote this replacement for the happybase library. It's mostly API compatible, so only needed a few minor changes to the code base to swap it in for happybase and thus avoid a lot of time-consuming refactoring. Depending how capital-B *Big Data* your requirements are, you might find (like I did) that the scale of HBase actually wasn't required, and an SQL DB was plenty big enough, much simpler to administer and a lot cheaper.\n\n## Getting started ##\n\nYou'll need to create a table in your SQL database for each of your HBase tables.\n\n*Note: currently only Postgres is supported*\n\nHere's an example table definition, just replace `my_table_name` with the name of your table. Note the two indices, one for key uniqueness (which is the equivalent of the HBase row key), and the `varchar_pattern_ops` index. This is required to allow efficient prefix queries, a feature of HBase key lookups and scans. The data is stored in a JSONB column, where the keys of that JSON data are the HBase column names (e.g. 'cf:col').\n\n```sql\nCREATE TABLE public.\"my_table_name\" (\n\t\"key\" varchar NOT NULL,\n\t\"data\" jsonb NOT NULL\n);\nCREATE UNIQUE INDEX my_table_name_key_idx ON public.my_table_name USING btree (key);\nCREATE INDEX my_table_name_key_ops_idx ON public.my_table_name USING btree (key varchar_pattern_ops);\n```\n\nInstall the happybase-sql package into your project:\n\n```bash\npip install happybase-sql\n```\n\nCreate a `Connection` or `ConnectionPool`. Note that the `host` argument is slightly different to `happybase`, it now refers to the *full* SQL database URL (including port). The port argument is ignored.\n\n```python\nfrom happybase_sql import ConnectionPool\n\n\nconnection_pool = ConnectionPool(size=3, host='postgresql://localhost:5432/hbase')\n\nwith connection_pool.connection() as connection:\n    table = connection.table('my_table_name')\n    table.put(\n        row='abcd',\n        data={\n            'cf:col1': 'some data',\n            'cf:col2': 'some more data',\n        },\n    )\n    row = table.row('abcd')\n    print(row)\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwaterhouse/happybase-sql", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "happybase-sql", "package_url": "https://pypi.org/project/happybase-sql/", "platform": "", "project_url": "https://pypi.org/project/happybase-sql/", "project_urls": {"Homepage": "https://github.com/jwaterhouse/happybase-sql", "Repository": "https://github.com/jwaterhouse/happybase-sql"}, "release_url": "https://pypi.org/project/happybase-sql/0.1.0/", "requires_dist": ["sqlalchemy (>=1.3,<2.0)", "psycopg2 (>=2.8,<3.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A drop-in replacement for happybase that uses an SQL backend instead of HBase.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>happybase-sql</h1>\n<p>A (mostly) drop-in replacement for (happybase)[https://happybase.readthedocs.io/en/latest/] that uses an SQL backend instead of HBase.</p>\n<p>** Why would I want to use this? **</p>\n<p>This project came about when I was working on a legacy project that used a HBase datastore. The HBase cluster became problematic, suffering from performance issues and was expensive to run. After wrestling with HBase for too long, I decided to migrate the data to SQL and wrote this replacement for the happybase library. It's mostly API compatible, so only needed a few minor changes to the code base to swap it in for happybase and thus avoid a lot of time-consuming refactoring. Depending how capital-B <em>Big Data</em> your requirements are, you might find (like I did) that the scale of HBase actually wasn't required, and an SQL DB was plenty big enough, much simpler to administer and a lot cheaper.</p>\n<h2>Getting started</h2>\n<p>You'll need to create a table in your SQL database for each of your HBase tables.</p>\n<p><em>Note: currently only Postgres is supported</em></p>\n<p>Here's an example table definition, just replace <code>my_table_name</code> with the name of your table. Note the two indices, one for key uniqueness (which is the equivalent of the HBase row key), and the <code>varchar_pattern_ops</code> index. This is required to allow efficient prefix queries, a feature of HBase key lookups and scans. The data is stored in a JSONB column, where the keys of that JSON data are the HBase column names (e.g. 'cf:col').</p>\n<pre><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"k\">public</span><span class=\"p\">.</span><span class=\"ss\">\"my_table_name\"</span> <span class=\"p\">(</span>\n\t<span class=\"ss\">\"key\"</span> <span class=\"nb\">varchar</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span>\n\t<span class=\"ss\">\"data\"</span> <span class=\"n\">jsonb</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span>\n<span class=\"p\">);</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">UNIQUE</span> <span class=\"k\">INDEX</span> <span class=\"n\">my_table_name_key_idx</span> <span class=\"k\">ON</span> <span class=\"k\">public</span><span class=\"p\">.</span><span class=\"n\">my_table_name</span> <span class=\"k\">USING</span> <span class=\"n\">btree</span> <span class=\"p\">(</span><span class=\"k\">key</span><span class=\"p\">);</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">INDEX</span> <span class=\"n\">my_table_name_key_ops_idx</span> <span class=\"k\">ON</span> <span class=\"k\">public</span><span class=\"p\">.</span><span class=\"n\">my_table_name</span> <span class=\"k\">USING</span> <span class=\"n\">btree</span> <span class=\"p\">(</span><span class=\"k\">key</span> <span class=\"n\">varchar_pattern_ops</span><span class=\"p\">);</span>\n</pre>\n<p>Install the happybase-sql package into your project:</p>\n<pre>pip install happybase-sql\n</pre>\n<p>Create a <code>Connection</code> or <code>ConnectionPool</code>. Note that the <code>host</code> argument is slightly different to <code>happybase</code>, it now refers to the <em>full</em> SQL database URL (including port). The port argument is ignored.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">happybase_sql</span> <span class=\"kn\">import</span> <span class=\"n\">ConnectionPool</span>\n\n\n<span class=\"n\">connection_pool</span> <span class=\"o\">=</span> <span class=\"n\">ConnectionPool</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'postgresql://localhost:5432/hbase'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">connection_pool</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'my_table_name'</span><span class=\"p\">)</span>\n    <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span>\n        <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s1\">'abcd'</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'cf:col1'</span><span class=\"p\">:</span> <span class=\"s1\">'some data'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'cf:col2'</span><span class=\"p\">:</span> <span class=\"s1\">'some more data'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">(</span><span class=\"s1\">'abcd'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7134326, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f3e98e7aaa46c122fad89d5f70f24868", "sha256": "be234d9780a844cedf1855b3c211098f3657fbd5aec10371318a1b858627b063"}, "downloads": -1, "filename": "happybase_sql-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3e98e7aaa46c122fad89d5f70f24868", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6894, "upload_time": "2020-04-30T02:00:20", "upload_time_iso_8601": "2020-04-30T02:00:20.207267Z", "url": "https://files.pythonhosted.org/packages/f4/e6/23b266633e54d29e8de86c0726d3ff70feb8c74267e1b0ba9bb371e37d4d/happybase_sql-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "741e8570e48ef1425a85d52615c71cb2", "sha256": "5b91cd7ba9b06d7d33298b80af57bffe009f5e8e2a3bc52608ec4a77bf25af21"}, "downloads": -1, "filename": "happybase-sql-0.1.0.tar.gz", "has_sig": false, "md5_digest": "741e8570e48ef1425a85d52615c71cb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6637, "upload_time": "2020-04-30T02:00:17", "upload_time_iso_8601": "2020-04-30T02:00:17.548744Z", "url": "https://files.pythonhosted.org/packages/e9/e8/e9e016cc282f5b6d48fcbeea5c824a9486fb36fcecfacdf1382fd3ecfc0b/happybase-sql-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3e98e7aaa46c122fad89d5f70f24868", "sha256": "be234d9780a844cedf1855b3c211098f3657fbd5aec10371318a1b858627b063"}, "downloads": -1, "filename": "happybase_sql-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3e98e7aaa46c122fad89d5f70f24868", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6894, "upload_time": "2020-04-30T02:00:20", "upload_time_iso_8601": "2020-04-30T02:00:20.207267Z", "url": "https://files.pythonhosted.org/packages/f4/e6/23b266633e54d29e8de86c0726d3ff70feb8c74267e1b0ba9bb371e37d4d/happybase_sql-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "741e8570e48ef1425a85d52615c71cb2", "sha256": "5b91cd7ba9b06d7d33298b80af57bffe009f5e8e2a3bc52608ec4a77bf25af21"}, "downloads": -1, "filename": "happybase-sql-0.1.0.tar.gz", "has_sig": false, "md5_digest": "741e8570e48ef1425a85d52615c71cb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 6637, "upload_time": "2020-04-30T02:00:17", "upload_time_iso_8601": "2020-04-30T02:00:17.548744Z", "url": "https://files.pythonhosted.org/packages/e9/e8/e9e016cc282f5b6d48fcbeea5c824a9486fb36fcecfacdf1382fd3ecfc0b/happybase-sql-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:30 2020"}