{"info": {"author": "Makina Corpus", "author_email": "terralego-pypi@makina-corpus.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "[![Build Status](https://travis-ci.org/Terralego/django-geosource.svg?branch=master)](https://travis-ci.org/Terralego/django-geosource)\n[![codecov](https://codecov.io/gh/Terralego/django-geosource/branch/master/graph/badge.svg)](https://codecov.io/gh/Terralego/django-geosource)\n[![PyPi version](https://pypip.in/v/django-geosource/badge.png)](https://pypi.org/project/django-geosource/)\n\n# Django GeoSource\n\nThis django application provide a Rest Framework API that allow to manage many geo data\nsources and integrate that data wherever you need, like a Django model or any output\npipeline. Its provided with necessary celery jobs that do the job.\n\n## Settings\n\nYou can define the setting `GEOSOURCE_MAX_TASK_RUNTIME` that allow to define the max run time of a task before it can be launched one more\ntime. It allow to prevent when a task is stuck and disallow launching one more.\n\n## Configure and run Celery\n\nYou must define in your project settings the variables CELERY_BROKER_URL and CELERY_RESULT_BACKEND as specified in Celery documentation.\nYou also need to create the celery app following this [documentation](https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html#django-first-steps).\n\nThen to run the celery worker:\n`$ celery worker -A django_geosource -l info`\n\nTo run the celery beat worker that allow to synchronize periodically sources, launch this command:\n`$ celery beat --scheduler django_geosource.celery.schedulers.GeosourceScheduler -A django_geosource -l info`\n\n## Configure data destination\n\nNow, you must set the callback methods that are used to insert data in your destination database.\n\nIf you use django-geostore, we provide a set of callback in the `geostore_callbacks` module, else you can define your\nown callbacks.\n\n### GEOSOURCE_LAYER_CALLBACK\n\nThe callback signature receive as first argument the SourceModel object, and must return your Layer object.\nExample:\n\n```python\ndef layer_callback(geosource):\n    return Layer.objects.get_or_create(name=geosource.name)[0]\n```\n\n### GEOSOURCE_FEATURE_CALLBACK\n\nThis one, define a feature creation callback method.\nExample:\n\n```python\ndef feature_callback(geosource, layer, identifier, geometry, attributes):\n    return Feature.objects.get_or_create(layer=layer, identifier=identifier, geom=geometry, properties=attributes)[0]\n```\n\n### GEOSOURCE_CLEAN_FEATURE_CALLBACK\n\nThis callback is called when the refresh is done, to clear old features that are not anymore present in the database.\nIt receives as parametter the geosource, layer and begin update date, so you can advise what to do depending of your\nmodels.\nExample:\n\n```python\ndef clear_features(geosource, layer, begin_date):\n    return layer.features.filter(updated_at__lt=begin_date).delete()\n```\n\n### GEOSOURCE_DELETE_LAYER_CALLBACK\n\nThis is called when a Source is deleted, so you are able to do what you want with the loaded content in database, when\nthe source doesn't exist anymore. It's executed before real deletion.\nExample:\n\n```python\ndef delete_layer(geosource, layer):\n    if layer.features.count() > 0:\n        layer.features.delete()\n    return layer.delete()\n```\n\n## To start a dev instance\n\nDefine settings you wants in `test_geosource` django project.\n\n```sh\ndocker-compose build\ndocker-compose up\n```\n\nFirst start should failed as the database need to be initialized. Just launch the same command twice.\n\nThen initialize the database:\n\n```sh\ndocker-compose run web ./manage.py migrate\n```\n\nYou can now edit your code. A django runserver is launched internally so the\nthis is an autoreload server.\n\nYou can access to the api on http://localhost:8000/api/\n\n## Test and coverage\n\nTo run test suite, just launch:\n\n```sh\ndocker-compose run --rm web ./manage.py test\n```\n\nTo run test suite with coverage, execute this commande:\n\n```sh\ndocker-compose run web /code/src/coverage.sh\n```\n\n\n\n0.4.2 / 2020-05-07\n==================\n\n  * Add CSVSource source\n\n0.4.1 / 2020-03-24\n==================\n\n  * Fix wmts geom_type mandatory\n\n0.4.0 / 2020-03-19\n==================\n\n  * BREAKING CHANGE : change way celery is working to allow using celery in another app\n\n0.3.7 / 2020-03-17\n==================\n\n  * Enhance tests to valide search and filter\n  * Add option to sync sources to have more control\n  * Add zipfile shapefilesource\n\n0.3.6 / 2019-12-19\n==================\n\n  * Fix bug with FileSourceSerializer\n\n0.3.5 / 2019-12-18\n==================\n\n  * Add ordering and filtering for sources\n  * Add flake8 linting to CI\n\n0.3.4 / 2019-12-16\n==================\n\n### Improves\n\n  * Improve documentation\n  * Fix python3.8, django 3.0 and DRF 3.11 compatibility\n\n0.3.3 / 2019-11-06\n==================\n\n### Improves\n\n  * Define MANIFEST.in\n\n0.3.1 / 2019-11-06\n==================\n\n### Improves\n\n  * Improve error message when identifier field is not found in the source\n  * Improve error message when geojson features has bad geometries\n  * Use black for linting in pipelines\n\n0.3.0 / 2019-10-18\n==================\n\n### Release\n\n  * First release", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Terralego/django-geosource.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-geosource", "package_url": "https://pypi.org/project/django-geosource/", "platform": "", "project_url": "https://pypi.org/project/django-geosource/", "project_urls": {"Homepage": "https://github.com/Terralego/django-geosource.git"}, "release_url": "https://pypi.org/project/django-geosource/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "Django geographic asynchrone data sources loading", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/Terralego/django-geosource\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f65676a7428f1d70c1ccf9a95e4ebd77c591a78/68747470733a2f2f7472617669732d63692e6f72672f54657272616c65676f2f646a616e676f2d67656f736f757263652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Terralego/django-geosource\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fd264cfa7c607a7f5d007812da0932630722b8a/68747470733a2f2f636f6465636f762e696f2f67682f54657272616c65676f2f646a616e676f2d67656f736f757263652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/django-geosource/\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00b007e49c28905b5e1940992d5b3d6f4068c8e4/68747470733a2f2f70797069702e696e2f762f646a616e676f2d67656f736f757263652f62616467652e706e67\"></a></p>\n<h1>Django GeoSource</h1>\n<p>This django application provide a Rest Framework API that allow to manage many geo data\nsources and integrate that data wherever you need, like a Django model or any output\npipeline. Its provided with necessary celery jobs that do the job.</p>\n<h2>Settings</h2>\n<p>You can define the setting <code>GEOSOURCE_MAX_TASK_RUNTIME</code> that allow to define the max run time of a task before it can be launched one more\ntime. It allow to prevent when a task is stuck and disallow launching one more.</p>\n<h2>Configure and run Celery</h2>\n<p>You must define in your project settings the variables CELERY_BROKER_URL and CELERY_RESULT_BACKEND as specified in Celery documentation.\nYou also need to create the celery app following this <a href=\"https://docs.celeryproject.org/en/stable/django/first-steps-with-django.html#django-first-steps\" rel=\"nofollow\">documentation</a>.</p>\n<p>Then to run the celery worker:\n<code>$ celery worker -A django_geosource -l info</code></p>\n<p>To run the celery beat worker that allow to synchronize periodically sources, launch this command:\n<code>$ celery beat --scheduler django_geosource.celery.schedulers.GeosourceScheduler -A django_geosource -l info</code></p>\n<h2>Configure data destination</h2>\n<p>Now, you must set the callback methods that are used to insert data in your destination database.</p>\n<p>If you use django-geostore, we provide a set of callback in the <code>geostore_callbacks</code> module, else you can define your\nown callbacks.</p>\n<h3>GEOSOURCE_LAYER_CALLBACK</h3>\n<p>The callback signature receive as first argument the SourceModel object, and must return your Layer object.\nExample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">layer_callback</span><span class=\"p\">(</span><span class=\"n\">geosource</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Layer</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">geosource</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<h3>GEOSOURCE_FEATURE_CALLBACK</h3>\n<p>This one, define a feature creation callback method.\nExample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">feature_callback</span><span class=\"p\">(</span><span class=\"n\">geosource</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">attributes</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Feature</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"n\">identifier</span><span class=\"p\">,</span> <span class=\"n\">geom</span><span class=\"o\">=</span><span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"o\">=</span><span class=\"n\">attributes</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<h3>GEOSOURCE_CLEAN_FEATURE_CALLBACK</h3>\n<p>This callback is called when the refresh is done, to clear old features that are not anymore present in the database.\nIt receives as parametter the geosource, layer and begin update date, so you can advise what to do depending of your\nmodels.\nExample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">clear_features</span><span class=\"p\">(</span><span class=\"n\">geosource</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">begin_date</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">updated_at__lt</span><span class=\"o\">=</span><span class=\"n\">begin_date</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<h3>GEOSOURCE_DELETE_LAYER_CALLBACK</h3>\n<p>This is called when a Source is deleted, so you are able to do what you want with the loaded content in database, when\nthe source doesn't exist anymore. It's executed before real deletion.\nExample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">delete_layer</span><span class=\"p\">(</span><span class=\"n\">geosource</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<h2>To start a dev instance</h2>\n<p>Define settings you wants in <code>test_geosource</code> django project.</p>\n<pre>docker-compose build\ndocker-compose up\n</pre>\n<p>First start should failed as the database need to be initialized. Just launch the same command twice.</p>\n<p>Then initialize the database:</p>\n<pre>docker-compose run web ./manage.py migrate\n</pre>\n<p>You can now edit your code. A django runserver is launched internally so the\nthis is an autoreload server.</p>\n<p>You can access to the api on <a href=\"http://localhost:8000/api/\" rel=\"nofollow\">http://localhost:8000/api/</a></p>\n<h2>Test and coverage</h2>\n<p>To run test suite, just launch:</p>\n<pre>docker-compose run --rm web ./manage.py <span class=\"nb\">test</span>\n</pre>\n<p>To run test suite with coverage, execute this commande:</p>\n<pre>docker-compose run web /code/src/coverage.sh\n</pre>\n<h1>0.4.2 / 2020-05-07</h1>\n<ul>\n<li>Add CSVSource source</li>\n</ul>\n<h1>0.4.1 / 2020-03-24</h1>\n<ul>\n<li>Fix wmts geom_type mandatory</li>\n</ul>\n<h1>0.4.0 / 2020-03-19</h1>\n<ul>\n<li>BREAKING CHANGE : change way celery is working to allow using celery in another app</li>\n</ul>\n<h1>0.3.7 / 2020-03-17</h1>\n<ul>\n<li>Enhance tests to valide search and filter</li>\n<li>Add option to sync sources to have more control</li>\n<li>Add zipfile shapefilesource</li>\n</ul>\n<h1>0.3.6 / 2019-12-19</h1>\n<ul>\n<li>Fix bug with FileSourceSerializer</li>\n</ul>\n<h1>0.3.5 / 2019-12-18</h1>\n<ul>\n<li>Add ordering and filtering for sources</li>\n<li>Add flake8 linting to CI</li>\n</ul>\n<h1>0.3.4 / 2019-12-16</h1>\n<h3>Improves</h3>\n<ul>\n<li>Improve documentation</li>\n<li>Fix python3.8, django 3.0 and DRF 3.11 compatibility</li>\n</ul>\n<h1>0.3.3 / 2019-11-06</h1>\n<h3>Improves</h3>\n<ul>\n<li>Define MANIFEST.in</li>\n</ul>\n<h1>0.3.1 / 2019-11-06</h1>\n<h3>Improves</h3>\n<ul>\n<li>Improve error message when identifier field is not found in the source</li>\n<li>Improve error message when geojson features has bad geometries</li>\n<li>Use black for linting in pipelines</li>\n</ul>\n<h1>0.3.0 / 2019-10-18</h1>\n<h3>Release</h3>\n<ul>\n<li>First release</li>\n</ul>\n\n          </div>"}, "last_serial": 7187004, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "973c2320613887c302a3fb7711a36314", "sha256": "40cb6bcece17867532d38133ccc10489b2c332d7c968c5a0ecb5c08a3d1c2f97"}, "downloads": -1, "filename": "django_geosource-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "973c2320613887c302a3fb7711a36314", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30447, "upload_time": "2019-10-18T13:00:26", "upload_time_iso_8601": "2019-10-18T13:00:26.056836Z", "url": "https://files.pythonhosted.org/packages/c6/ed/01bcbbfc531472f8202dca8c8684e847dee6022ab642fa2f21025864edb2/django_geosource-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df55baaaeded6bce799dc84e597262a2", "sha256": "4897fd7c45722bae86edf721d4fda42dfff8e6d154e5e9408e52af472a21cf5b"}, "downloads": -1, "filename": "django-geosource-0.3.0.tar.gz", "has_sig": false, "md5_digest": "df55baaaeded6bce799dc84e597262a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18187, "upload_time": "2019-10-18T13:00:28", "upload_time_iso_8601": "2019-10-18T13:00:28.554987Z", "url": "https://files.pythonhosted.org/packages/48/6c/074543eaaff693ea3f111c733411f1e74be52c14b023c3131db707d67e52/django-geosource-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "09013a899466981fde8bbed09b22f8b6", "sha256": "5c1a4c626ec3887e503f80758e4053bdefcb5adc150b0a173542037d5042579d"}, "downloads": -1, "filename": "django_geosource-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "09013a899466981fde8bbed09b22f8b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30843, "upload_time": "2019-11-06T15:44:39", "upload_time_iso_8601": "2019-11-06T15:44:39.917103Z", "url": "https://files.pythonhosted.org/packages/5d/02/b8f19c8bc40123648c9fe1fdafd1217ba0ff4d9b117eb9985b64515b13ed/django_geosource-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a5b2fb76000ba3ba3781279e3f55f49", "sha256": "0001308b911785d9177d9d88c897439434c05ddc99806b37c698c7a2842b0c3c"}, "downloads": -1, "filename": "django-geosource-0.3.1.tar.gz", "has_sig": false, "md5_digest": "1a5b2fb76000ba3ba3781279e3f55f49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18649, "upload_time": "2019-11-06T15:44:42", "upload_time_iso_8601": "2019-11-06T15:44:42.877482Z", "url": "https://files.pythonhosted.org/packages/88/02/8d2ef2667cd01d33afa0c4660552cc385b43051c14eda8db60693326ef3d/django-geosource-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "c655eccc7fd78e2ade42ef958e3686f6", "sha256": "c0849e6bc29a7eed74e6139caea911d3c038afd7c1864a40ab9259f3270da3d1"}, "downloads": -1, "filename": "django-geosource-0.3.2.tar.gz", "has_sig": false, "md5_digest": "c655eccc7fd78e2ade42ef958e3686f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18648, "upload_time": "2019-11-06T16:06:22", "upload_time_iso_8601": "2019-11-06T16:06:22.260051Z", "url": "https://files.pythonhosted.org/packages/25/6c/fcdb3327f31f2ea8759612075ffb9700ef8090ec3fb2a3fb59c903bae2b8/django-geosource-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "2f885fd34109a2f97e8c850628ac49d0", "sha256": "55b92a4789facfd4a79f82dc77e6d75c72f72f776fcdc1811a6cf2f451d5f03b"}, "downloads": -1, "filename": "django-geosource-0.3.3.tar.gz", "has_sig": false, "md5_digest": "2f885fd34109a2f97e8c850628ac49d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16703, "upload_time": "2019-11-06T16:54:39", "upload_time_iso_8601": "2019-11-06T16:54:39.677757Z", "url": "https://files.pythonhosted.org/packages/1c/4d/552e688f131ef6632ebd2e7439d5ae6658947f72cb99454d40593517078e/django-geosource-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "c759e89eb07d76ad6000033b2b3adc2d", "sha256": "4cde94cff229451e760dbddc7ef874a910f8d7c53d3ebd97e9632ac2d9cc528b"}, "downloads": -1, "filename": "django-geosource-0.3.4.tar.gz", "has_sig": false, "md5_digest": "c759e89eb07d76ad6000033b2b3adc2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18691, "upload_time": "2019-12-16T13:38:59", "upload_time_iso_8601": "2019-12-16T13:38:59.755430Z", "url": "https://files.pythonhosted.org/packages/e3/06/4173e3855dd887f1e3a0051d3015c1c98756bafe7dd1a6690343f5626be1/django-geosource-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "c563f698d2de505d6d4bc55bbcf3cb62", "sha256": "3e5bfe149a645067e4365cd04f4f4fbec49f4e84507326b77383b75ff57fad98"}, "downloads": -1, "filename": "django-geosource-0.3.5.tar.gz", "has_sig": false, "md5_digest": "c563f698d2de505d6d4bc55bbcf3cb62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18288, "upload_time": "2019-12-18T15:57:10", "upload_time_iso_8601": "2019-12-18T15:57:10.784454Z", "url": "https://files.pythonhosted.org/packages/09/d7/3ffb0d692994b523318a0f20dd80d31733beafda222df0ce1e2e0be4c955/django-geosource-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "643ad4cd4665288f6d0324068d0d2747", "sha256": "038018ae56a7e70135f3d81d482e5bd92283c2da652b2b8219ce12ff429d9dea"}, "downloads": -1, "filename": "django-geosource-0.3.6.tar.gz", "has_sig": false, "md5_digest": "643ad4cd4665288f6d0324068d0d2747", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18320, "upload_time": "2020-01-02T09:40:43", "upload_time_iso_8601": "2020-01-02T09:40:43.921786Z", "url": "https://files.pythonhosted.org/packages/7e/2f/9c64f1b8cb75f40c00102334d303614e6a4cd59da8dfc813348ae4f3cc8f/django-geosource-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "4c53d238deb9b3599033ba22b3cdb0fa", "sha256": "5069c359c3748f389172706b8c10422a8b24834bc39b0b3f20f6b4f6269b3bc6"}, "downloads": -1, "filename": "django-geosource-0.3.7.tar.gz", "has_sig": false, "md5_digest": "4c53d238deb9b3599033ba22b3cdb0fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19397, "upload_time": "2020-03-17T20:24:51", "upload_time_iso_8601": "2020-03-17T20:24:51.584439Z", "url": "https://files.pythonhosted.org/packages/e0/a4/53acc534dc2f6aa5bf780f423b48ac9332ca6b5d0e9b2f0c4ac7f51ee856/django-geosource-0.3.7.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ace0f18319262c1917532d2b8441d98e", "sha256": "68086195fc958b0f403a5d8a2fff6e59b91c910828909d01151da20a36a6897b"}, "downloads": -1, "filename": "django-geosource-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ace0f18319262c1917532d2b8441d98e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19408, "upload_time": "2020-03-19T14:06:24", "upload_time_iso_8601": "2020-03-19T14:06:24.528592Z", "url": "https://files.pythonhosted.org/packages/1d/50/b41fdb7e248062a7b96ad789d5564d50b498e816b757134741347cca6ba4/django-geosource-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "a2b2be6e8240d8ca4423ff48a3c5fae7", "sha256": "46923e0ebd76c5903d44e312bdb61264cbfcf098be77433c428c934f49746b87"}, "downloads": -1, "filename": "django-geosource-0.4.1.tar.gz", "has_sig": false, "md5_digest": "a2b2be6e8240d8ca4423ff48a3c5fae7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19496, "upload_time": "2020-03-24T13:31:34", "upload_time_iso_8601": "2020-03-24T13:31:34.008763Z", "url": "https://files.pythonhosted.org/packages/84/ca/be5d5b656e7a7d483673a82885e88d66b3fa1d7cfba1ff79074130689a66/django-geosource-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "42be6dd9eedd7e878c0156742bc3c226", "sha256": "c6546e03ac49c661d8b43ebd7bc42f69ff659060c28c64b8708b1c883a68f2e1"}, "downloads": -1, "filename": "django-geosource-0.4.2.tar.gz", "has_sig": false, "md5_digest": "42be6dd9eedd7e878c0156742bc3c226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21487, "upload_time": "2020-05-07T09:47:21", "upload_time_iso_8601": "2020-05-07T09:47:21.447182Z", "url": "https://files.pythonhosted.org/packages/49/11/46938582e1dd90c449aa500f828acca4045477fdeb701de3377b3512f7a6/django-geosource-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42be6dd9eedd7e878c0156742bc3c226", "sha256": "c6546e03ac49c661d8b43ebd7bc42f69ff659060c28c64b8708b1c883a68f2e1"}, "downloads": -1, "filename": "django-geosource-0.4.2.tar.gz", "has_sig": false, "md5_digest": "42be6dd9eedd7e878c0156742bc3c226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21487, "upload_time": "2020-05-07T09:47:21", "upload_time_iso_8601": "2020-05-07T09:47:21.447182Z", "url": "https://files.pythonhosted.org/packages/49/11/46938582e1dd90c449aa500f828acca4045477fdeb701de3377b3512f7a6/django-geosource-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:52 2020"}