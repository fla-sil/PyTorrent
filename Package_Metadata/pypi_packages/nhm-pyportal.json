{"info": {"author": "Natural History Museum", "author_email": "data@nhm.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# pyportal\n\nA Python wrapper around the API for the Natural History Museum's [Data Portal](https://data.nhm.ac.uk).\n\nThis module is new and under development, so does not include all actions available through the API; it prioritises the record search functionality. It is liable to change dramatically between versions.\n\nWe have more generic (and comprehensive) API documentation available [here](https://naturalhistorymuseum.github.io/dataportal-docs).\n\n\n## Requirements\n\n- Python 3.7+\n\n\n## Installation\n\n```sh\npip install -e git+git://github.com/NaturalHistoryMuseum/nhm-pyportal.git#egg=pyportal\n```\n\n\n## Quickstart Usage\n\nStart by creating an `API` object:\n\n```python\nimport pyportal\n\napi = pyportal.API()\n```\n\n### Searching\n\nYou can either search for all records, or specifically for assets/media. The syntax is very similar for both.\n\n```python\nfrom pyportal import constants\n\n# specify any resource you want, but the IDs for the specimens and index lots resources are built in\nresource_id = constants.resources.specimens\n\n# find all records in the specimens resource\nsearch = api.records(resource_id)\n\n# OR find all assets (images) in the specimens resource\nsearch = api.assets(resource_id)\n```\n\nThe search above is equivalent to [this search](https://data.nhm.ac.uk/dataset/56e711e6-c847-4f99-915a-6894bb5c5dea/resource/05ff2255-c38a-40c9-b657-4ccb55ab2feb) on the Data Portal website.\n\nThere is a helper method to transform a data portal URL into a `dict` that can be passed into the search constructor.\n\n```python\nurl = 'https://data.nhm.ac.uk/dataset/56e711e6-c847-4f99-915a-6894bb5c5dea/resource/05ff2255-c38a-40c9-b657-4ccb55ab2feb?filters=collectionCode%3Abot'\n\n# these two searches are equivalent\n\nprint(api.records(constants.resources.specimens, collectionCode='bot').count())  # 775440\n\nprint(api.records(**api.from_url(url)).count())  # 775440\n```\n\nYou can specify the following parameters (all are optional):\n\n- `query`: a free-text search, e.g. `query='bugs'`\n- `sort`: a list of fields and sort directions, e.g. `sort=['country asc', 'family desc']`\n- `fields`: a list of fields to return for each record (leave blank to return all), e.g. `fields=['country', 'family', 'genus']`\n- `offset`: skip the first _n_ results, e.g. `offset=50`\n- `limit`: return only _n_ results _per page_ (defaults to 100), e.g. `limit=10`\n\nAny other keyword arguments will be considered `filters`.\n\n```python\nsearch = api.records(constants.resources.specimens, query='bugs', sort=['country asc', 'family desc'], fields=['country', 'family', 'genus'], offset=50, limit=10)\n```\n\n### Viewing results\n\nIterate through all results using `.all()` (this ignores `limit`):\n\n```python\nfor record in search.all():\n    print(record)\n```\n\nOr just view the first one with `.first()`:\n\n```python\nprint(search.first())\n```\n\nYou could also view a page (blocks of records in the size set by `limit`) at a time using `.next()`:\n\n```python\ntry:\n    page = search.next()\n    for record in page:\n        print(record)\nexcept StopIteration:  # raised by search.next() if there's no next page\n    print('No more results.')\n```\n\nIf you just want the total number of records, use `.count()`:\n\n```python\nprint(search.count())\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NaturalHistoryMuseum/nhm-pyportal", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nhm-pyportal", "package_url": "https://pypi.org/project/nhm-pyportal/", "platform": "", "project_url": "https://pypi.org/project/nhm-pyportal/", "project_urls": {"Homepage": "https://github.com/NaturalHistoryMuseum/nhm-pyportal"}, "release_url": "https://pypi.org/project/nhm-pyportal/0.1/", "requires_dist": ["requests"], "requires_python": "", "summary": "", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyportal</h1>\n<p>A Python wrapper around the API for the Natural History Museum's <a href=\"https://data.nhm.ac.uk\" rel=\"nofollow\">Data Portal</a>.</p>\n<p>This module is new and under development, so does not include all actions available through the API; it prioritises the record search functionality. It is liable to change dramatically between versions.</p>\n<p>We have more generic (and comprehensive) API documentation available <a href=\"https://naturalhistorymuseum.github.io/dataportal-docs\" rel=\"nofollow\">here</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.7+</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install -e git+git://github.com/NaturalHistoryMuseum/nhm-pyportal.git#egg<span class=\"o\">=</span>pyportal\n</pre>\n<h2>Quickstart Usage</h2>\n<p>Start by creating an <code>API</code> object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyportal</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">pyportal</span><span class=\"o\">.</span><span class=\"n\">API</span><span class=\"p\">()</span>\n</pre>\n<h3>Searching</h3>\n<p>You can either search for all records, or specifically for assets/media. The syntax is very similar for both.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyportal</span> <span class=\"kn\">import</span> <span class=\"n\">constants</span>\n\n<span class=\"c1\"># specify any resource you want, but the IDs for the specimens and index lots resources are built in</span>\n<span class=\"n\">resource_id</span> <span class=\"o\">=</span> <span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">specimens</span>\n\n<span class=\"c1\"># find all records in the specimens resource</span>\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(</span><span class=\"n\">resource_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OR find all assets (images) in the specimens resource</span>\n<span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"p\">(</span><span class=\"n\">resource_id</span><span class=\"p\">)</span>\n</pre>\n<p>The search above is equivalent to <a href=\"https://data.nhm.ac.uk/dataset/56e711e6-c847-4f99-915a-6894bb5c5dea/resource/05ff2255-c38a-40c9-b657-4ccb55ab2feb\" rel=\"nofollow\">this search</a> on the Data Portal website.</p>\n<p>There is a helper method to transform a data portal URL into a <code>dict</code> that can be passed into the search constructor.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://data.nhm.ac.uk/dataset/56e711e6-c847-4f99-915a-6894bb5c5dea/resource/05ff2255-c38a-40c9-b657-4ccb55ab2feb?filters=collectionCode%3Abot'</span>\n\n<span class=\"c1\"># these two searches are equivalent</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">specimens</span><span class=\"p\">,</span> <span class=\"n\">collectionCode</span><span class=\"o\">=</span><span class=\"s1\">'bot'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>  <span class=\"c1\"># 775440</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">from_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>  <span class=\"c1\"># 775440</span>\n</pre>\n<p>You can specify the following parameters (all are optional):</p>\n<ul>\n<li><code>query</code>: a free-text search, e.g. <code>query='bugs'</code></li>\n<li><code>sort</code>: a list of fields and sort directions, e.g. <code>sort=['country asc', 'family desc']</code></li>\n<li><code>fields</code>: a list of fields to return for each record (leave blank to return all), e.g. <code>fields=['country', 'family', 'genus']</code></li>\n<li><code>offset</code>: skip the first <em>n</em> results, e.g. <code>offset=50</code></li>\n<li><code>limit</code>: return only <em>n</em> results <em>per page</em> (defaults to 100), e.g. <code>limit=10</code></li>\n</ul>\n<p>Any other keyword arguments will be considered <code>filters</code>.</p>\n<pre><span class=\"n\">search</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">(</span><span class=\"n\">constants</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">specimens</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'bugs'</span><span class=\"p\">,</span> <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'country asc'</span><span class=\"p\">,</span> <span class=\"s1\">'family desc'</span><span class=\"p\">],</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'country'</span><span class=\"p\">,</span> <span class=\"s1\">'family'</span><span class=\"p\">,</span> <span class=\"s1\">'genus'</span><span class=\"p\">],</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<h3>Viewing results</h3>\n<p>Iterate through all results using <code>.all()</code> (this ignores <code>limit</code>):</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">)</span>\n</pre>\n<p>Or just view the first one with <code>.first()</code>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">())</span>\n</pre>\n<p>You could also view a page (blocks of records in the size set by <code>limit</code>) at a time using <code>.next()</code>:</p>\n<pre><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">page</span> <span class=\"o\">=</span> <span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">page</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>  <span class=\"c1\"># raised by search.next() if there's no next page</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'No more results.'</span><span class=\"p\">)</span>\n</pre>\n<p>If you just want the total number of records, use <code>.count()</code>:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 5995918, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b6335ae6b6d314b23cddbaa9757f761b", "sha256": "c37ec0c5e0b0199eaeba8d22314696efdf2259d352ec27890d982d2793bf18a2"}, "downloads": -1, "filename": "nhm_pyportal-0.1-py3.7.egg", "has_sig": false, "md5_digest": "b6335ae6b6d314b23cddbaa9757f761b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 7205, "upload_time": "2019-10-18T14:27:44", "upload_time_iso_8601": "2019-10-18T14:27:44.486977Z", "url": "https://files.pythonhosted.org/packages/17/23/66cfa2bc1bcbee6dfbee0cabe6b40c56de91436134edd8680713a2515dca/nhm_pyportal-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c35d283be8d95eb94ea163f959d1f1e2", "sha256": "b583336bc87ddd7bf3ceb49d845e80c4b1798a5d5217d29b5d347cb8fe6ff356"}, "downloads": -1, "filename": "nhm_pyportal-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c35d283be8d95eb94ea163f959d1f1e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7515, "upload_time": "2019-10-18T14:27:39", "upload_time_iso_8601": "2019-10-18T14:27:39.700914Z", "url": "https://files.pythonhosted.org/packages/03/13/eb76bc8c33a1c9264fc016ed92784add3dc61fa8679b348006c627adad21/nhm_pyportal-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a3f4964485a826c0389483a2ff7db5e", "sha256": "ceac4f5584564aab139b8e3fd3fdfb679add2a8a9d24c68b15ffda324b1c25d0"}, "downloads": -1, "filename": "nhm-pyportal-0.1.tar.gz", "has_sig": false, "md5_digest": "8a3f4964485a826c0389483a2ff7db5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6170, "upload_time": "2019-10-18T14:27:43", "upload_time_iso_8601": "2019-10-18T14:27:43.012440Z", "url": "https://files.pythonhosted.org/packages/e1/8c/4712e310a70f51af3af38c4d9c7e2946525673fd5b584e276f928d186b97/nhm-pyportal-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6335ae6b6d314b23cddbaa9757f761b", "sha256": "c37ec0c5e0b0199eaeba8d22314696efdf2259d352ec27890d982d2793bf18a2"}, "downloads": -1, "filename": "nhm_pyportal-0.1-py3.7.egg", "has_sig": false, "md5_digest": "b6335ae6b6d314b23cddbaa9757f761b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 7205, "upload_time": "2019-10-18T14:27:44", "upload_time_iso_8601": "2019-10-18T14:27:44.486977Z", "url": "https://files.pythonhosted.org/packages/17/23/66cfa2bc1bcbee6dfbee0cabe6b40c56de91436134edd8680713a2515dca/nhm_pyportal-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c35d283be8d95eb94ea163f959d1f1e2", "sha256": "b583336bc87ddd7bf3ceb49d845e80c4b1798a5d5217d29b5d347cb8fe6ff356"}, "downloads": -1, "filename": "nhm_pyportal-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c35d283be8d95eb94ea163f959d1f1e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7515, "upload_time": "2019-10-18T14:27:39", "upload_time_iso_8601": "2019-10-18T14:27:39.700914Z", "url": "https://files.pythonhosted.org/packages/03/13/eb76bc8c33a1c9264fc016ed92784add3dc61fa8679b348006c627adad21/nhm_pyportal-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a3f4964485a826c0389483a2ff7db5e", "sha256": "ceac4f5584564aab139b8e3fd3fdfb679add2a8a9d24c68b15ffda324b1c25d0"}, "downloads": -1, "filename": "nhm-pyportal-0.1.tar.gz", "has_sig": false, "md5_digest": "8a3f4964485a826c0389483a2ff7db5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6170, "upload_time": "2019-10-18T14:27:43", "upload_time_iso_8601": "2019-10-18T14:27:43.012440Z", "url": "https://files.pythonhosted.org/packages/e1/8c/4712e310a70f51af3af38c4d9c7e2946525673fd5b584e276f928d186b97/nhm-pyportal-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:27 2020"}