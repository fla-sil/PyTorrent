{"info": {"author": "Perch Security", "author_email": "hello@perchsecurity.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Security"], "description": "<h1 align=\"center\">\n  <!-- a bug prevents PyPI from aligning header tags: https://github.com/pypa/readme_renderer/issues/126 -->\n  <p align=\"center\">\n    <img alt=\"dendrol\" src=\"https://user-images.githubusercontent.com/33840/49189283-aadc8980-f33b-11e8-9505-77f074448474.png\">\n  </p>\n</h1>\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/dendrol/\">\n    <img alt=\"dendrol PyPI version\" src=\"https://camo.githubusercontent.com/be46feea7129311b3dafeef4ac272061f21293de/68747470733a2f2f62616467652e667572792e696f2f70792f64656e64726f6c2e737667\">\n  </a> \n  <a href=\"https://pypi.python.org/pypi/dendrol/\">\n    <img alt=\"PyPI pyversions\" src=\"https://camo.githubusercontent.com/9b638ffc22ef0b3bd395012d65984ed2c6e1de8e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f64656e64726f6c2e737667\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/dendrol/\">\n    <img alt=\"PyPI license\" src=\"https://camo.githubusercontent.com/7ec6b5aecd3c32e4f25d596c8045bf5ffbe7a9af/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f64656e64726f6c2e737667\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <b>dendrol</b> parses STIX2 pattern expressions into basic Python structures\n</p>\n\n<p align=\"center\">\n  <a href=\"http://docs.oasis-open.org/cti/stix/v2.0/cs01/part5-stix-patterning/stix-v2.0-cs01-part5-stix-patterning.html#_t7hu3hrkvmff\">\n    <img alt=\"Iconic STIX2 Pattern visualization\" src=\"https://user-images.githubusercontent.com/33840/47131128-027ed400-d26b-11e8-950b-4c494c9cf4c5.png\">\n  </a>\n</p>\n\nThis iconic [STIX2 Pattern](http://docs.oasis-open.org/cti/stix/v2.0/cs01/part5-stix-patterning/stix-v2.0-cs01-part5-stix-patterning.html#_t7hu3hrkvmff) visualization is based upon this example expression:\n```\n(\n  [ipv4-addr:value = '198.51.100.1/32' OR\n   ipv4-addr:value = '203.0.113.33/32' OR\n   ipv6-addr:value = '2001:0db8:dead:beef:dead:beef:dead:0001/128']\n\n  FOLLOWEDBY [\n    domain-name:value = 'example.com']\n\n) WITHIN 600 SECONDS\n```\n\nUsing the formal STIX2 Pattern grammar, that expression is converted into this parse tree:\n\n![example expression parse tree](https://user-images.githubusercontent.com/33840/47131306-eaf41b00-d26b-11e8-83ab-82a6932b95cf.png)\n\ndendrol will convert that expression (by way of that parse tree) into this more human-readable and machine-actionable form:\n```yaml\npattern:\n  expression:\n    join: FOLLOWEDBY\n    qualifiers:\n      - within:\n          value: 600\n          unit: SECONDS\n    expressions:\n      - observation:\n          objects:\n            ? ipv4-addr\n            ? ipv6-addr\n          join: OR\n          qualifiers:\n          expressions:\n            - comparison:\n                object: ipv4-addr\n                path: [value]\n                negated:\n                operator: '='\n                value: 198.51.100.1/32\n            - comparison:\n                object: ipv4-addr\n                path: [value]\n                negated:\n                operator: '='\n                value: 203.0.113.33/32\n            - comparison:\n                object: ipv6-addr\n                path: [value]\n                negated:\n                operator: '='\n                value: 2001:0db8:dead:beef:dead:beef:dead:0001/128\n      - observation:\n          objects: {domain-name}\n          join:\n          qualifiers:\n          expressions:\n            - comparison:\n                object: domain-name\n                path: [value]\n                negated:\n                operator: '='\n                value: example.com\n```\n\n\n# How do I use it?\n\ndendrol provides an interface for parsing STIX2 Pattern Expressions much like [cti-pattern-validator](https://github.com/oasis-open/cti-pattern-validator), with the `dendrol.Pattern` class. This class has a method, `to_dict_tree()`, which converts the ANTLR parse tree to a dict-based tree structure, PatternTree.\n\n```py\nfrom dendrol import Pattern\n\npattern = Pattern(\"[domain-name:value = 'http://xyz.com/download']\")\n\nassert pattern.to_dict_tree() == {\n    'pattern': {\n        'observation': {\n            'objects': {'domain-name'},\n            'join': None,\n            'qualifiers': None,\n            'expressions': [\n                {'comparison': {\n                    'object': 'domain-name',\n                    'path': ['value'],\n                    'negated': None,\n                    'operator': '=',\n                    'value': 'http://xyz.com/download',\n                }}\n            ]\n        }\n    }\n}\n```\n\nA specialized YAML representation is also proposed, to make visualization of this data a little less cumbersome:\n\n```py\nfrom dendrol import Pattern\n\npattern = Pattern(\"[domain-name:value = 'http://xyz.com/download']\")\n\nassert str(pattern.to_dict_tree()) == '''\\\npattern:\n  observation:\n    objects: {domain-name}\n    join:\n    qualifiers:\n    expressions:\n      - comparison:\n          object: domain-name\n          path: [value]\n          negated:\n          operator: '='\n          value: http://xyz.com/download\n'''\n```\n\nFor more info, read [The Spec](#the-spec) below, or check out the tests.\n\n\n# Development\nTo develop dendrol and run its tests, first clone the repo. Then install the dev and testing dependencies:\n```bash\npip install .[dev] .[test]\n```\n\npytest is used for testing:\n```bash\npy.test\n```\n\nReported issues and pull requests welcomed! From new features and suggestions to typo fixes and poor naming choices, fresh eyes bolster software eternally in development.\n\nIf submitting a pull request, please add yourself to the CONTRIBUTORS file for a piece of that sweet, sweet street cred!\n\n\n# <a name=\"the-spec\" href=\"#the-spec\">The Spec</a>\n## Brief\nA PatternTree begins with a `'pattern'` key. Below it is an observation expression, with an `'observation'` or `'expression'` key (which may contain more observation expressions joined by AND/OR/FOLLOWEDBY). Below `'observation'` keys are comparison expressions, marked by a `'comparison'` or `'expression'` key (which may contain more comparison expressions joined by AND/OR). `'comparison'` keys denote a single comparison between an object property and a literal value.\n\n## <a name=\"spec-pattern\" href=\"#spec-pattern\">Pattern</a>\n```py\n{'pattern': {...}}\n```\n```yaml\npattern:\n  ...\n```\nA PatternTree is a dict with one top-level key, `'pattern'`. This paradigm of a dict with a single key identifying its contents is seen throughout this spec.\n\nThe value of this `'pattern'` key is an [observation expression](#spec-observation-expressions).\n\n\n## <a name=\"spec-observation-expressions\" href=\"#spec-observation-expressions\">Observation Expressions</a>\n\nAn Observation Expression is a dict with a single key of either `'expression'` or `'observation'`. An [`'expression'`](#spec-observation-expressions-expression) SHALL contain two or more observation expressions joined by AND/OR/FOLLOWEDBY, whereas an [`'observation'`](#spec-observation-expressions-observation) SHALL contain only comparison expressions.\n\n\n### <a name=\"spec-observation-expressions-expression\" href=\"#spec-observation-expressions-expression\">Expression</a>\n```py\n{'expression': {\n    'join': oneOf('AND', 'OR', 'FOLLOWEDBY'),\n    'qualifiers': [...],\n    'expressions': [...],\n}}\n```\n```yaml\nexpression:\n  join: AND | OR | FOLLOWEDBY\n  qualifiers:\n  expressions:\n    - a\n    - b\n    - ...\n```\nAn `'expression'` is a container for other observation expressions, joined by an observation operator in `'join'`. It MAY have a list of qualifiers in the `'qualifiers'` key, or `None` if there are none.\n\nIts children are in `'expressions'`, whose values SHALL be dicts with single keys (of either `'observation'` or `'expression'`).\n\n\n### <a name=\"spec-observation-expressions-observation\" href=\"#spec-observation-expressions-observation\">Observation</a>\n```py\n{'observation': {\n    'objects': {'ipv4-addr', 'ipv6-addr', ...},\n    'join': oneOf('AND', 'OR'),\n    'qualifiers': [...],\n    'expressions': [...],\n}}\n```\n```yaml\nobservation:\n  objects:\n    ? ipv4-addr\n    ? ipv6-addr\n    ? ...\n  join: AND | OR\n  qualifiers:\n  expressions:\n    - a\n    - ...\n```\nAn `'observation'` is analogous to square brackets in STIX2 Pattern Expressions, e.g.: `[ipv4-addr:value = '1.2.3.4']`. Children of an observation (in the `'expressions'` key) SHALL only be comparisons or comparison expressions.\n\nAn `'observation'` MAY have qualifiers, but its children MUST NOT.\n\nAn `'observation'` MAY have a join method, which denotes how its child [comparison expressions](#spec-comparison-expressions) are to be joined. This method MAY be AND or OR, but MUST NOT be FOLLOWEDBY, because the join method applies to comparison expressions, not observation expressions. If there is only a single child comparison expression, `'join'` MAY be `None`.\n\nAn `'observation'` SHALL contain a set of all the object types of its child comparison expressions. This is mainly for human consumption. A STIX2 observation is allowed to contain comparisons on disparate object types, provided they're joined by OR\u2014 this is why `'objects'` is a set, not a single string.\n\nIf `'objects'` contains only a single object type, it MAY be compacted into set literal form:\n```yaml\nobservation:\n  objects: {ipv4-addr}\n  join: AND | OR\n  qualifiers:\n  expressions:\n    - a\n    - ...\n```\n\n\n### <a name=\"spec-observation-expressions-qualifiers\" href=\"#spec-observation-expressions-qualifiers\">Qualifiers</a>\nA Qualifier is a dict having a single key identifying its Qualifier type. Currently, this SHALL be one of:\n - [`'start_stop'`](#spec-observation-expressions-qualifiers-start-stop)\n - [`'within'`](#spec-observation-expressions-qualifiers-within)\n - [`'repeats'`](#spec-observation-expressions-qualifiers-repeats)\n\n\n#### <a name=\"spec-observation-expressions-qualifiers-start-stop\" href=\"#spec-observation-expressions-qualifiers-start-stop\">Start/Stop Qualifier</a>\n```py\n{'start_stop': {\n    'start': datetime(2018, 10, 7, 0, 0, tzinfo=tzutc()),\n    'stop': datetime(2018, 10, 7, 23, 59, tzinfo=tzutc()),\n}}\n```\n```yaml\nstart_stop:\n  start: 2018-10-07T00:00:00Z\n  stop: 2018-10-08T23:59:00Z\n```\nThe `'start_stop'` qualifier constrains the timeframe in which its associated observation expressions MUST occur within to evaluate true. Unlike `WITHIN`, `START ... STOP ...` denotes absolute points in time, using datetime literals.\n\nExample STIX2 expression:\n```\n[a:b = 12] START t'2018-10-07T00:00:00Z' STOP t'2018-10-08T23:59:00Z'\n```\nIn STIX2 Pattern Expressions, all datetimes MUST be in [RFC3339](https://tools.ietf.org/html/rfc3339) format, and MUST be in UTC timezone. datetime literals resemble Python strings with `t` as their modifying char (like an f-string, or a bytestring). Because they must be in UTC timezone, datetime literals MUST end with the `Z` char.\n\nWhen parsed into Python, they SHALL have a `tzinfo` object with a `dstoffset` of 0.\n\n\n#### <a name=\"spec-observation-expressions-qualifiers-within\" href=\"#spec-observation-expressions-qualifiers-within\">Within Qualifier</a>\n```py\n{'within': {\n    'value': 600,\n    'unit': 'SECONDS',\n}}\n```\n```yaml\nwithin:\n  value: 600\n  unit: SECONDS\n```\nThe `'within'` qualifier constrains the timeframe in which its associated observation expressions MUST occur within to evaluate true. Unlike `START ... STOP ...`, `WITHIN` denotes relative timeframes, where the latest observation expression MUST occur within the specified number of seconds from the earliest observation expression.\n\nExample STIX2 expression:\n```\n[a:b = 12] WITHIN 600 SECONDS\n```\n\n`SECONDS` is hard-coded into the STIX2 Pattern Expression grammar, and MUST be included in pattern expressions. However, to avoid ambiguity for the reader, and to allow for future STIX2 spec changes, the unit is also included in the Pattern Tree.\n\n\n#### <a name=\"spec-observation-expressions-qualifiers-repeats\" href=\"#spec-observation-expressions-qualifiers-repeats\">Repeated Qualifier</a>\n```py\n{'repeats': {\n    'value': 9000,\n}}\n```\n```yaml\nrepeats:\n  value: 9000\n```\nThe `'repeats'` qualifier REQUIRES that its associated observation expressions evaluate true at different occasions, for a specified number of times.\n\nExample STIX2 expression:\n```\n[a:b = 12] REPEATS 9000 TIMES\n```\n\n`TIMES` is hard-coded into the STIX2 Pattern Expression grammar, and MUST be included in pattern expressions. However, since there aren't any other obvious units of multiplicity, other than \"X times\", it has been omitted from the Pattern Tree output \u2014\u00a0unlike `SECONDS` of `WITHIN`.\n\n\n## <a name=\"spec-comparison-expressions\" href=\"#spec-comparison-expressions\">Comparison Expressions</a>\nA Comparison Expression is a dict with a single key of either `'expression'` or `'comparison'`. An [`'expression'`](#spec-comparison-expressions-expression) SHALL contain two or more comparison expressions joined by AND/OR, whereas a [`'comparison'`](#spec-comparison-expressions-comparison) contains no children, and only marks a comparison of one variable to one literal value.\n\n\n### <a name=\"spec-comparison-expressions-expression\" href=\"#spec-comparison-expressions-expression\">Expression</a>\n```py\n{'expression': {\n    'join': oneOf('AND', 'OR'),\n    'expressions': [a, b, ...],\n}}\n```\n```yaml\nexpression:\n  join: AND | OR\n  expressions:\n    - a\n    - b\n    - ...\n```\nAn `'expression'` is a container for other comparison expressions, joined by either AND or OR in `'join'` \u2014 comparison expressions do not have FOLLOWEDBY, as they are intended to reference a single object at a single point in time.\n\nAn `'expression'` MUST NOT have qualifiers.\n\nIts children are in `'expressions'`, whose values SHALL be dicts with single keys (of either `'comparison'` or `'expression'`).\n\n\n### <a name=\"spec-comparison-expressions-comparison\" href=\"#spec-comparison-expressions-comparison\">Comparison</a>\n```py\n{'comparison': {\n    'object': 'email-message',\n    'path': ['from_ref', 'value'],\n    'negated': None,\n    'operator': 'MATCHES',\n    'value': '.+@malicio\\\\.us',\n}}\n```\n```yaml\ncomparison:\n  object: email-message\n  path:\n    - from_ref\n    - value\n  negated:\n  operator: MATCHES\n  value: .+@malicio\\.us\n```\nA `'comparison'` represents a single comparison between a STIX2 object property and a literal value. A single string object type SHALL be placed in the `'object'` key.\n\n`'path'` SHALL be a list beginning with a top-level property of the object type denoted in `'object'`, as a string. Following this MAY be any number of child properties, as strings, or list index components/dereferences, denoted as Python `slice()` objects, where `[1]` is equivalent to `slice(start=None, stop=1, step=None)`. The special _match any_ list index from STIX2 (e.g. `file:sections[*]`) is equivalent to `slice(start=None, stop='*', step=None)`.\n\n`'negated'` SHALL be a bool denoting whether the operator SHALL be negated during evaluation. STIX2 allows a `NOT` keyword before the operator: `file:name NOT MATCHES 'james.*'`. If the operator is not negated, `'negated'` MAY be `None`. (This allows for a more compact YAML representation \u2014 where the value may simply be omitted.)\n\n`'operator'` SHALL be a string representing the operator, e.g. `'>'`, `'LIKE'`, or `'='`.\n\n`'value'` MAY be any static Python value. Currently, only strings, bools, ints, floats, datetimes, and bytes are outputted, but this could change in the future (e.g. if compiled regular expressions are deemed useful).\n\nIf `'path'` contains only a single property, it MAY be compacted into list literal form:\n```yaml\ncomparison:\n  object: domain-name\n  path: [value]\n  negated:\n  operator: =\n  value: cnn.com\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/usePF/dendrol", "keywords": "", "license": "MIT", "maintainer": "Zach \"theY4Kman\" Kanzler", "maintainer_email": "z@perchsecurity.com", "name": "dendrol", "package_url": "https://pypi.org/project/dendrol/", "platform": "", "project_url": "https://pypi.org/project/dendrol/", "project_urls": {"Homepage": "https://github.com/usePF/dendrol"}, "release_url": "https://pypi.org/project/dendrol/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "The STIX2 Pattern expression library for humans", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\n  \n  </h1><p align=\"center\">\n    <img alt=\"dendrol\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca49d0650401710b0f07eb6a8dd0f98c84c85da3/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33333834302f34393138393238332d61616463383938302d663333622d313165382d393530352d3737663037343434383437342e706e67\">\n  </p>\n\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/dendrol/\" rel=\"nofollow\">\n    <img alt=\"dendrol PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10f87014cbaf9c9988d1f7fc6fe3e71b37fac4e3/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f626534366665656137313239333131623364616665656634616332373230363166323132393364652f363837343734373037333361326632663632363136343637363532653636373537323739326536393666326637303739326636343635366536343732366636633265373337363637\">\n  </a> \n  <a href=\"https://pypi.python.org/pypi/dendrol/\" rel=\"nofollow\">\n    <img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e08e527a1ba33b401bf09888762d4d3959c6442/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f396236333866666332326566306233626433393530313264363539383465643263366531646538652f36383734373437303733336132663266363936643637326537333638363936353663363437333265363936663266373037393730363932663730373937363635373237333639366636653733326636343635366536343732366636633265373337363637\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/dendrol/\" rel=\"nofollow\">\n    <img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d2d6faffd779d5b93fcf967b598adb454182666/68747470733a2f2f63616d6f2e67697468756275736572636f6e74656e742e636f6d2f376563366235616563643363333265346632356435393663383034356266356666626537613961662f36383734373437303733336132663266363936643637326537333638363936353663363437333265363936663266373037393730363932663663326636343635366536343732366636633265373337363637\">\n  </a>\n</p>\n<p align=\"center\">\n  <b>dendrol</b> parses STIX2 pattern expressions into basic Python structures\n</p>\n<p align=\"center\">\n  <a href=\"http://docs.oasis-open.org/cti/stix/v2.0/cs01/part5-stix-patterning/stix-v2.0-cs01-part5-stix-patterning.html#_t7hu3hrkvmff\" rel=\"nofollow\">\n    <img alt=\"Iconic STIX2 Pattern visualization\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c90431715828533e8ac3287ef0faf684043ae794/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33333834302f34373133313132382d30323765643430302d643236622d313165382d393530622d3463343934633963663463352e706e67\">\n  </a>\n</p>\n<p>This iconic <a href=\"http://docs.oasis-open.org/cti/stix/v2.0/cs01/part5-stix-patterning/stix-v2.0-cs01-part5-stix-patterning.html#_t7hu3hrkvmff\" rel=\"nofollow\">STIX2 Pattern</a> visualization is based upon this example expression:</p>\n<pre><code>(\n  [ipv4-addr:value = '198.51.100.1/32' OR\n   ipv4-addr:value = '203.0.113.33/32' OR\n   ipv6-addr:value = '2001:0db8:dead:beef:dead:beef:dead:0001/128']\n\n  FOLLOWEDBY [\n    domain-name:value = 'example.com']\n\n) WITHIN 600 SECONDS\n</code></pre>\n<p>Using the formal STIX2 Pattern grammar, that expression is converted into this parse tree:</p>\n<p><img alt=\"example expression parse tree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26b2bd44a6ddc5d689b489d91350e521e7734964/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f33333834302f34373133313330362d65616634316230302d643236622d313165382d383361622d3832613639333262393563662e706e67\"></p>\n<p>dendrol will convert that expression (by way of that parse tree) into this more human-readable and machine-actionable form:</p>\n<pre><span class=\"nt\">pattern</span><span class=\"p\">:</span>\n  <span class=\"nt\">expression</span><span class=\"p\">:</span>\n    <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">FOLLOWEDBY</span>\n    <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">within</span><span class=\"p\">:</span>\n          <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">600</span>\n          <span class=\"nt\">unit</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">SECONDS</span>\n    <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">observation</span><span class=\"p\">:</span>\n          <span class=\"nt\">objects</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">?</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv4-addr</span>\n            <span class=\"p p-Indicator\">?</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv6-addr</span>\n          <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">OR</span>\n          <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n          <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">comparison</span><span class=\"p\">:</span>\n                <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv4-addr</span>\n                <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">negated</span><span class=\"p\">:</span>\n                <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"s\">'='</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">198.51.100.1/32</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">comparison</span><span class=\"p\">:</span>\n                <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv4-addr</span>\n                <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">negated</span><span class=\"p\">:</span>\n                <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"s\">'='</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">203.0.113.33/32</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">comparison</span><span class=\"p\">:</span>\n                <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv6-addr</span>\n                <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">negated</span><span class=\"p\">:</span>\n                <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"s\">'='</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2001:0db8:dead:beef:dead:beef:dead:0001/128</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">observation</span><span class=\"p\">:</span>\n          <span class=\"nt\">objects</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nv\">domain-name</span><span class=\"p p-Indicator\">}</span>\n          <span class=\"nt\">join</span><span class=\"p\">:</span>\n          <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n          <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n            <span class=\"p p-Indicator\">-</span> <span class=\"nt\">comparison</span><span class=\"p\">:</span>\n                <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">domain-name</span>\n                <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n                <span class=\"nt\">negated</span><span class=\"p\">:</span>\n                <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"s\">'='</span>\n                <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">example.com</span>\n</pre>\n<h1>How do I use it?</h1>\n<p>dendrol provides an interface for parsing STIX2 Pattern Expressions much like <a href=\"https://github.com/oasis-open/cti-pattern-validator\" rel=\"nofollow\">cti-pattern-validator</a>, with the <code>dendrol.Pattern</code> class. This class has a method, <code>to_dict_tree()</code>, which converts the ANTLR parse tree to a dict-based tree structure, PatternTree.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dendrol</span> <span class=\"kn\">import</span> <span class=\"n\">Pattern</span>\n\n<span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">Pattern</span><span class=\"p\">(</span><span class=\"s2\">\"[domain-name:value = 'http://xyz.com/download']\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">to_dict_tree</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'pattern'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'observation'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'objects'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'domain-name'</span><span class=\"p\">},</span>\n            <span class=\"s1\">'join'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">'qualifiers'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"s1\">'expressions'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">'comparison'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'object'</span><span class=\"p\">:</span> <span class=\"s1\">'domain-name'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'negated'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'operator'</span><span class=\"p\">:</span> <span class=\"s1\">'='</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'http://xyz.com/download'</span><span class=\"p\">,</span>\n                <span class=\"p\">}}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A specialized YAML representation is also proposed, to make visualization of this data a little less cumbersome:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dendrol</span> <span class=\"kn\">import</span> <span class=\"n\">Pattern</span>\n\n<span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">Pattern</span><span class=\"p\">(</span><span class=\"s2\">\"[domain-name:value = 'http://xyz.com/download']\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">to_dict_tree</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"s1\">'''</span><span class=\"se\">\\</span>\n<span class=\"s1\">pattern:</span>\n<span class=\"s1\">  observation:</span>\n<span class=\"s1\">    objects: {domain-name}</span>\n<span class=\"s1\">    join:</span>\n<span class=\"s1\">    qualifiers:</span>\n<span class=\"s1\">    expressions:</span>\n<span class=\"s1\">      - comparison:</span>\n<span class=\"s1\">          object: domain-name</span>\n<span class=\"s1\">          path: [value]</span>\n<span class=\"s1\">          negated:</span>\n<span class=\"s1\">          operator: '='</span>\n<span class=\"s1\">          value: http://xyz.com/download</span>\n<span class=\"s1\">'''</span>\n</pre>\n<p>For more info, read <a href=\"#the-spec\" rel=\"nofollow\">The Spec</a> below, or check out the tests.</p>\n<h1>Development</h1>\n<p>To develop dendrol and run its tests, first clone the repo. Then install the dev and testing dependencies:</p>\n<pre>pip install .<span class=\"o\">[</span>dev<span class=\"o\">]</span> .<span class=\"o\">[</span>test<span class=\"o\">]</span>\n</pre>\n<p>pytest is used for testing:</p>\n<pre>py.test\n</pre>\n<p>Reported issues and pull requests welcomed! From new features and suggestions to typo fixes and poor naming choices, fresh eyes bolster software eternally in development.</p>\n<p>If submitting a pull request, please add yourself to the CONTRIBUTORS file for a piece of that sweet, sweet street cred!</p>\n<h1><a href=\"#the-spec\" rel=\"nofollow\">The Spec</a></h1>\n<h2>Brief</h2>\n<p>A PatternTree begins with a <code>'pattern'</code> key. Below it is an observation expression, with an <code>'observation'</code> or <code>'expression'</code> key (which may contain more observation expressions joined by AND/OR/FOLLOWEDBY). Below <code>'observation'</code> keys are comparison expressions, marked by a <code>'comparison'</code> or <code>'expression'</code> key (which may contain more comparison expressions joined by AND/OR). <code>'comparison'</code> keys denote a single comparison between an object property and a literal value.</p>\n<h2><a href=\"#spec-pattern\" rel=\"nofollow\">Pattern</a></h2>\n<pre><span class=\"p\">{</span><span class=\"s1\">'pattern'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">pattern</span><span class=\"p\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>A PatternTree is a dict with one top-level key, <code>'pattern'</code>. This paradigm of a dict with a single key identifying its contents is seen throughout this spec.</p>\n<p>The value of this <code>'pattern'</code> key is an <a href=\"#spec-observation-expressions\" rel=\"nofollow\">observation expression</a>.</p>\n<h2><a href=\"#spec-observation-expressions\" rel=\"nofollow\">Observation Expressions</a></h2>\n<p>An Observation Expression is a dict with a single key of either <code>'expression'</code> or <code>'observation'</code>. An <a href=\"#spec-observation-expressions-expression\" rel=\"nofollow\"><code>'expression'</code></a> SHALL contain two or more observation expressions joined by AND/OR/FOLLOWEDBY, whereas an <a href=\"#spec-observation-expressions-observation\" rel=\"nofollow\"><code>'observation'</code></a> SHALL contain only comparison expressions.</p>\n<h3><a href=\"#spec-observation-expressions-expression\" rel=\"nofollow\">Expression</a></h3>\n<pre><span class=\"p\">{</span><span class=\"s1\">'expression'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'join'</span><span class=\"p\">:</span> <span class=\"n\">oneOf</span><span class=\"p\">(</span><span class=\"s1\">'AND'</span><span class=\"p\">,</span> <span class=\"s1\">'OR'</span><span class=\"p\">,</span> <span class=\"s1\">'FOLLOWEDBY'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'qualifiers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'expressions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">expression</span><span class=\"p\">:</span>\n  <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AND | OR | FOLLOWEDBY</span>\n  <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n  <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">b</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>An <code>'expression'</code> is a container for other observation expressions, joined by an observation operator in <code>'join'</code>. It MAY have a list of qualifiers in the <code>'qualifiers'</code> key, or <code>None</code> if there are none.</p>\n<p>Its children are in <code>'expressions'</code>, whose values SHALL be dicts with single keys (of either <code>'observation'</code> or <code>'expression'</code>).</p>\n<h3><a href=\"#spec-observation-expressions-observation\" rel=\"nofollow\">Observation</a></h3>\n<pre><span class=\"p\">{</span><span class=\"s1\">'observation'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'objects'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'ipv4-addr'</span><span class=\"p\">,</span> <span class=\"s1\">'ipv6-addr'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">},</span>\n    <span class=\"s1\">'join'</span><span class=\"p\">:</span> <span class=\"n\">oneOf</span><span class=\"p\">(</span><span class=\"s1\">'AND'</span><span class=\"p\">,</span> <span class=\"s1\">'OR'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'qualifiers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n    <span class=\"s1\">'expressions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">],</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">observation</span><span class=\"p\">:</span>\n  <span class=\"nt\">objects</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">?</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv4-addr</span>\n    <span class=\"p p-Indicator\">?</span> <span class=\"l l-Scalar l-Scalar-Plain\">ipv6-addr</span>\n    <span class=\"p p-Indicator\">?</span> <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n  <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AND | OR</span>\n  <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n  <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>An <code>'observation'</code> is analogous to square brackets in STIX2 Pattern Expressions, e.g.: <code>[ipv4-addr:value = '1.2.3.4']</code>. Children of an observation (in the <code>'expressions'</code> key) SHALL only be comparisons or comparison expressions.</p>\n<p>An <code>'observation'</code> MAY have qualifiers, but its children MUST NOT.</p>\n<p>An <code>'observation'</code> MAY have a join method, which denotes how its child <a href=\"#spec-comparison-expressions\" rel=\"nofollow\">comparison expressions</a> are to be joined. This method MAY be AND or OR, but MUST NOT be FOLLOWEDBY, because the join method applies to comparison expressions, not observation expressions. If there is only a single child comparison expression, <code>'join'</code> MAY be <code>None</code>.</p>\n<p>An <code>'observation'</code> SHALL contain a set of all the object types of its child comparison expressions. This is mainly for human consumption. A STIX2 observation is allowed to contain comparisons on disparate object types, provided they're joined by OR\u2014 this is why <code>'objects'</code> is a set, not a single string.</p>\n<p>If <code>'objects'</code> contains only a single object type, it MAY be compacted into set literal form:</p>\n<pre><span class=\"nt\">observation</span><span class=\"p\">:</span>\n  <span class=\"nt\">objects</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">{</span><span class=\"nv\">ipv4-addr</span><span class=\"p p-Indicator\">}</span>\n  <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AND | OR</span>\n  <span class=\"nt\">qualifiers</span><span class=\"p\">:</span>\n  <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<h3><a href=\"#spec-observation-expressions-qualifiers\" rel=\"nofollow\">Qualifiers</a></h3>\n<p>A Qualifier is a dict having a single key identifying its Qualifier type. Currently, this SHALL be one of:</p>\n<ul>\n<li><a href=\"#spec-observation-expressions-qualifiers-start-stop\" rel=\"nofollow\"><code>'start_stop'</code></a></li>\n<li><a href=\"#spec-observation-expressions-qualifiers-within\" rel=\"nofollow\"><code>'within'</code></a></li>\n<li><a href=\"#spec-observation-expressions-qualifiers-repeats\" rel=\"nofollow\"><code>'repeats'</code></a></li>\n</ul>\n<h4><a href=\"#spec-observation-expressions-qualifiers-start-stop\" rel=\"nofollow\">Start/Stop Qualifier</a></h4>\n<pre><span class=\"p\">{</span><span class=\"s1\">'start_stop'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">tzutc</span><span class=\"p\">()),</span>\n    <span class=\"s1\">'stop'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">tzutc</span><span class=\"p\">()),</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">start_stop</span><span class=\"p\">:</span>\n  <span class=\"nt\">start</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2018-10-07T00:00:00Z</span>\n  <span class=\"nt\">stop</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2018-10-08T23:59:00Z</span>\n</pre>\n<p>The <code>'start_stop'</code> qualifier constrains the timeframe in which its associated observation expressions MUST occur within to evaluate true. Unlike <code>WITHIN</code>, <code>START ... STOP ...</code> denotes absolute points in time, using datetime literals.</p>\n<p>Example STIX2 expression:</p>\n<pre><code>[a:b = 12] START t'2018-10-07T00:00:00Z' STOP t'2018-10-08T23:59:00Z'\n</code></pre>\n<p>In STIX2 Pattern Expressions, all datetimes MUST be in <a href=\"https://tools.ietf.org/html/rfc3339\" rel=\"nofollow\">RFC3339</a> format, and MUST be in UTC timezone. datetime literals resemble Python strings with <code>t</code> as their modifying char (like an f-string, or a bytestring). Because they must be in UTC timezone, datetime literals MUST end with the <code>Z</code> char.</p>\n<p>When parsed into Python, they SHALL have a <code>tzinfo</code> object with a <code>dstoffset</code> of 0.</p>\n<h4><a href=\"#spec-observation-expressions-qualifiers-within\" rel=\"nofollow\">Within Qualifier</a></h4>\n<pre><span class=\"p\">{</span><span class=\"s1\">'within'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">600</span><span class=\"p\">,</span>\n    <span class=\"s1\">'unit'</span><span class=\"p\">:</span> <span class=\"s1\">'SECONDS'</span><span class=\"p\">,</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">within</span><span class=\"p\">:</span>\n  <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">600</span>\n  <span class=\"nt\">unit</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">SECONDS</span>\n</pre>\n<p>The <code>'within'</code> qualifier constrains the timeframe in which its associated observation expressions MUST occur within to evaluate true. Unlike <code>START ... STOP ...</code>, <code>WITHIN</code> denotes relative timeframes, where the latest observation expression MUST occur within the specified number of seconds from the earliest observation expression.</p>\n<p>Example STIX2 expression:</p>\n<pre><code>[a:b = 12] WITHIN 600 SECONDS\n</code></pre>\n<p><code>SECONDS</code> is hard-coded into the STIX2 Pattern Expression grammar, and MUST be included in pattern expressions. However, to avoid ambiguity for the reader, and to allow for future STIX2 spec changes, the unit is also included in the Pattern Tree.</p>\n<h4><a href=\"#spec-observation-expressions-qualifiers-repeats\" rel=\"nofollow\">Repeated Qualifier</a></h4>\n<pre><span class=\"p\">{</span><span class=\"s1\">'repeats'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">9000</span><span class=\"p\">,</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">repeats</span><span class=\"p\">:</span>\n  <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">9000</span>\n</pre>\n<p>The <code>'repeats'</code> qualifier REQUIRES that its associated observation expressions evaluate true at different occasions, for a specified number of times.</p>\n<p>Example STIX2 expression:</p>\n<pre><code>[a:b = 12] REPEATS 9000 TIMES\n</code></pre>\n<p><code>TIMES</code> is hard-coded into the STIX2 Pattern Expression grammar, and MUST be included in pattern expressions. However, since there aren't any other obvious units of multiplicity, other than \"X times\", it has been omitted from the Pattern Tree output \u2014\u00a0unlike <code>SECONDS</code> of <code>WITHIN</code>.</p>\n<h2><a href=\"#spec-comparison-expressions\" rel=\"nofollow\">Comparison Expressions</a></h2>\n<p>A Comparison Expression is a dict with a single key of either <code>'expression'</code> or <code>'comparison'</code>. An <a href=\"#spec-comparison-expressions-expression\" rel=\"nofollow\"><code>'expression'</code></a> SHALL contain two or more comparison expressions joined by AND/OR, whereas a <a href=\"#spec-comparison-expressions-comparison\" rel=\"nofollow\"><code>'comparison'</code></a> contains no children, and only marks a comparison of one variable to one literal value.</p>\n<h3><a href=\"#spec-comparison-expressions-expression\" rel=\"nofollow\">Expression</a></h3>\n<pre><span class=\"p\">{</span><span class=\"s1\">'expression'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'join'</span><span class=\"p\">:</span> <span class=\"n\">oneOf</span><span class=\"p\">(</span><span class=\"s1\">'AND'</span><span class=\"p\">,</span> <span class=\"s1\">'OR'</span><span class=\"p\">),</span>\n    <span class=\"s1\">'expressions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">expression</span><span class=\"p\">:</span>\n  <span class=\"nt\">join</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AND | OR</span>\n  <span class=\"nt\">expressions</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">a</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">b</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">...</span>\n</pre>\n<p>An <code>'expression'</code> is a container for other comparison expressions, joined by either AND or OR in <code>'join'</code> \u2014 comparison expressions do not have FOLLOWEDBY, as they are intended to reference a single object at a single point in time.</p>\n<p>An <code>'expression'</code> MUST NOT have qualifiers.</p>\n<p>Its children are in <code>'expressions'</code>, whose values SHALL be dicts with single keys (of either <code>'comparison'</code> or <code>'expression'</code>).</p>\n<h3><a href=\"#spec-comparison-expressions-comparison\" rel=\"nofollow\">Comparison</a></h3>\n<pre><span class=\"p\">{</span><span class=\"s1\">'comparison'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'object'</span><span class=\"p\">:</span> <span class=\"s1\">'email-message'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'from_ref'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'negated'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'operator'</span><span class=\"p\">:</span> <span class=\"s1\">'MATCHES'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"s1\">'.+@malicio</span><span class=\"se\">\\\\</span><span class=\"s1\">.us'</span><span class=\"p\">,</span>\n<span class=\"p\">}}</span>\n</pre>\n<pre><span class=\"nt\">comparison</span><span class=\"p\">:</span>\n  <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">email-message</span>\n  <span class=\"nt\">path</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">from_ref</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">value</span>\n  <span class=\"nt\">negated</span><span class=\"p\">:</span>\n  <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">MATCHES</span>\n  <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">.+@malicio\\.us</span>\n</pre>\n<p>A <code>'comparison'</code> represents a single comparison between a STIX2 object property and a literal value. A single string object type SHALL be placed in the <code>'object'</code> key.</p>\n<p><code>'path'</code> SHALL be a list beginning with a top-level property of the object type denoted in <code>'object'</code>, as a string. Following this MAY be any number of child properties, as strings, or list index components/dereferences, denoted as Python <code>slice()</code> objects, where <code>[1]</code> is equivalent to <code>slice(start=None, stop=1, step=None)</code>. The special <em>match any</em> list index from STIX2 (e.g. <code>file:sections[*]</code>) is equivalent to <code>slice(start=None, stop='*', step=None)</code>.</p>\n<p><code>'negated'</code> SHALL be a bool denoting whether the operator SHALL be negated during evaluation. STIX2 allows a <code>NOT</code> keyword before the operator: <code>file:name NOT MATCHES 'james.*'</code>. If the operator is not negated, <code>'negated'</code> MAY be <code>None</code>. (This allows for a more compact YAML representation \u2014 where the value may simply be omitted.)</p>\n<p><code>'operator'</code> SHALL be a string representing the operator, e.g. <code>'&gt;'</code>, <code>'LIKE'</code>, or <code>'='</code>.</p>\n<p><code>'value'</code> MAY be any static Python value. Currently, only strings, bools, ints, floats, datetimes, and bytes are outputted, but this could change in the future (e.g. if compiled regular expressions are deemed useful).</p>\n<p>If <code>'path'</code> contains only a single property, it MAY be compacted into list literal form:</p>\n<pre><span class=\"nt\">comparison</span><span class=\"p\">:</span>\n  <span class=\"nt\">object</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">domain-name</span>\n  <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">value</span><span class=\"p p-Indicator\">]</span>\n  <span class=\"nt\">negated</span><span class=\"p\">:</span>\n  <span class=\"nt\">operator</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">=</span>\n  <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cnn.com</span>\n</pre>\n\n          </div>"}, "last_serial": 5464232, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "aba445509c2e7dee7a6f8cb784c9166f", "sha256": "9bec614d3fad493fcd84f76248e0c00089f0e98f7d98d559cd6de174dd12a2ef"}, "downloads": -1, "filename": "dendrol-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aba445509c2e7dee7a6f8cb784c9166f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40596, "upload_time": "2018-11-25T17:56:35", "upload_time_iso_8601": "2018-11-25T17:56:35.385566Z", "url": "https://files.pythonhosted.org/packages/22/ce/296a7e5299580e3a2d9ed68768b6822265769cd9c15c35224c03c99a7c4e/dendrol-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "804ed2534179d837e3ce93ba0fdd94ce", "sha256": "73512081dd59bbc66521167707af04f7fdbb104df0fab1023a0a2a8f98020934"}, "downloads": -1, "filename": "dendrol-0.0.2.tar.gz", "has_sig": false, "md5_digest": "804ed2534179d837e3ce93ba0fdd94ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41561, "upload_time": "2018-11-26T15:55:07", "upload_time_iso_8601": "2018-11-26T15:55:07.560310Z", "url": "https://files.pythonhosted.org/packages/b1/66/2ab7df4a873fee43e636408194ac9661c848065b602aec27780205657739/dendrol-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6ad598f333736f6afe76cd51518fd9be", "sha256": "6614166d95bacf05f285b9c6daf651dd443aef250fbec3b03fee5e782ec9a581"}, "downloads": -1, "filename": "dendrol-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6ad598f333736f6afe76cd51518fd9be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41927, "upload_time": "2018-11-30T15:21:40", "upload_time_iso_8601": "2018-11-30T15:21:40.084281Z", "url": "https://files.pythonhosted.org/packages/a7/dc/fe7a63236d3fc8ef75a5152ec8c44364de77d6d59c42d9b84dde4bfd0e25/dendrol-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "946065dc206e92bbb170ea4571939533", "sha256": "af7ddbfa07ba0f6d6fbe3a0054a9bb21e0b7cf4cc0949f293b6108596cdf901a"}, "downloads": -1, "filename": "dendrol-0.0.4.tar.gz", "has_sig": false, "md5_digest": "946065dc206e92bbb170ea4571939533", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42057, "upload_time": "2018-11-30T16:22:42", "upload_time_iso_8601": "2018-11-30T16:22:42.965041Z", "url": "https://files.pythonhosted.org/packages/c2/59/9312fdc82d99662407eb5ddcb00e8cb2ada3c7b07c255c5489f83e5ceb81/dendrol-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a60eb8835799e15e5fb3f2cc2dbc9fec", "sha256": "ca085589b12636a56e0f0d148d993224f005257e0a99397243b2187433fa2902"}, "downloads": -1, "filename": "dendrol-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a60eb8835799e15e5fb3f2cc2dbc9fec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38121, "upload_time": "2019-03-06T22:56:29", "upload_time_iso_8601": "2019-03-06T22:56:29.275724Z", "url": "https://files.pythonhosted.org/packages/4d/a1/a73be4cc261d412b7976db18d8e5f54c62cb74fe870f39bd2c0ef190b6c7/dendrol-0.0.5.tar.gz", "yanked": false}], "0.0.5.dev2": [{"comment_text": "", "digests": {"md5": "d21e9118fa6d8ee368fdbe7371d65e14", "sha256": "5d77d632b0be71c4186ae5c14d419097fce409b621d44943ac405927f9157bca"}, "downloads": -1, "filename": "dendrol-0.0.5.dev2.tar.gz", "has_sig": false, "md5_digest": "d21e9118fa6d8ee368fdbe7371d65e14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37518, "upload_time": "2019-06-27T05:24:22", "upload_time_iso_8601": "2019-06-27T05:24:22.313972Z", "url": "https://files.pythonhosted.org/packages/26/d1/8477184295bea4e69a4d1d49ac45eed880f32eacfc9020a9fffa2d9fc7c0/dendrol-0.0.5.dev2.tar.gz", "yanked": false}], "0.0.5.dev35": [{"comment_text": "", "digests": {"md5": "f057207ee9719902430132ab25c4fb5f", "sha256": "82bdd055f72daff6fe74e05dc55dceb9537049748e834c5c09d189c36fbe5c59"}, "downloads": -1, "filename": "dendrol-0.0.5.dev35.tar.gz", "has_sig": false, "md5_digest": "f057207ee9719902430132ab25c4fb5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37657, "upload_time": "2019-06-29T02:23:01", "upload_time_iso_8601": "2019-06-29T02:23:01.471424Z", "url": "https://files.pythonhosted.org/packages/9b/52/a1b7e9c3cf0388e6c2b68fda523384deee1b147c31cf1c4cb2b0fc39f7de/dendrol-0.0.5.dev35.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a60eb8835799e15e5fb3f2cc2dbc9fec", "sha256": "ca085589b12636a56e0f0d148d993224f005257e0a99397243b2187433fa2902"}, "downloads": -1, "filename": "dendrol-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a60eb8835799e15e5fb3f2cc2dbc9fec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38121, "upload_time": "2019-03-06T22:56:29", "upload_time_iso_8601": "2019-03-06T22:56:29.275724Z", "url": "https://files.pythonhosted.org/packages/4d/a1/a73be4cc261d412b7976db18d8e5f54c62cb74fe870f39bd2c0ef190b6c7/dendrol-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:07 2020"}