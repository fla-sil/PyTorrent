{"info": {"author": "Joseph T. Iosue", "author_email": "joe.iosue@yahoo.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "qubovert\n========\n\nThe one-stop package for formulating, simulating, and solving problems in boolean and spin form.\n\n\n*master branch*\n\n.. image:: https://github.com/jiosue/qubovert/workflows/build/badge.svg?branch=master\n    :target: https://github.com/jiosue/qubovert/actions/\n    :alt: GitHub Actions CI\n.. image:: https://readthedocs.org/projects/qubovert/badge/?version=latest\n    :target: https://qubovert.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. image:: https://codecov.io/gh/jiosue/qubovert/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jiosue/qubovert\n    :alt: Code Coverage\n.. image:: https://img.shields.io/lgtm/grade/python/g/jiosue/qubovert.svg?logo=lgtm&logoWidth=18\n    :target: https://lgtm.com/projects/g/jiosue/qubovert/context:python\n    :alt: Code Quality\n\n*dev branch*\n\n.. image:: https://github.com/jiosue/qubovert/workflows/build/badge.svg?branch=dev\n    :target: https://github.com/jiosue/qubovert/actions/\n    :alt: GitHub Actions CI\n.. image:: https://readthedocs.org/projects/qubovert/badge/?version=dev\n    :target: https://qubovert.readthedocs.io/en/latest/?badge=dev\n    :alt: Documentation Status\n.. image:: https://codecov.io/gh/jiosue/qubovert/branch/dev/graph/badge.svg\n    :target: https://codecov.io/gh/jiosue/qubovert\n    :alt: Code Coverage\n\n*pypi distribution*\n\n.. image:: https://badge.fury.io/py/qubovert.svg\n    :target: https://badge.fury.io/py/qubovert\n    :alt: pypi dist\n.. image:: https://pepy.tech/badge/qubovert\n    :target: https://pepy.tech/project/qubovert\n    :alt: pypi dist downloads\n\n\nPlease see the `Repository <https://github.com/jiosue/qubovert>`_ and `Docs <https://qubovert.readthedocs.io>`_. For examples/tutorials, see the `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_.\n\n\n.. contents::\n    :local:\n    :backlinks: top\n\n\nInstallation\n------------\n\nFor the stable release (same version as the *master* branch):\n\n.. code:: shell\n\n  pip install qubovert\n\n\nOr to install from source:\n\n.. code:: shell\n\n  git clone https://github.com/jiosue/qubovert.git\n  cd qubovert\n  pip install -e .\n\n\nThen you can use it in Python **versions 3.6 and above** with\n\n.. code:: python\n\n    import qubovert as qv\n\n\nNote that to install from source on Windows you will need `Microsoft Visual C++ Build Tools 14 <https://visualstudio.microsoft.com/visual-cpp-build-tools/>`_ installed.\n\n\nExample of the typical workflow\n-------------------------------\n\nHere we show an example of formulating a pseudo-boolean objective function. We can also make spin objective functions (Hamiltonians) in a very similar manner. See the `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_ for examples.\n\n\nCreate the boolean objective function to minimize\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from qubovert import boolean_var\n\n    N = 10\n\n    # create the variables\n    x = {i: boolean_var('x(%d)' % i) for i in range(N)}\n\n    # minimize \\sum_{i=0}^{N-1} (1-2x_{i}) x_{i+1}\n    model = 0\n    for i in range(N-1):\n        model += (1 - 2 * x[i]) * x[i+1]\n\n    # subject to the constraint that x_1 equals the XOR of x_3 and x_5\n    # enforce with a penalty factor of 3\n    model.add_constraint_eq_XOR(x[1], x[3], x[5], lam=3)\n\n    # subject to the constraints that the sum of all variables is less than 4\n    # enforce with a penalty factor of 5\n    model.add_constraint_lt_zero(sum(x.values()) - 4, lam=5)\n\n\nNext we will show multiple ways to solve the model.\n\n\nSolving the model with bruteforce\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBefore using the bruteforce solver, always check that ``model.num_binary_variables`` is relatively small!\n\n\n.. code:: python\n\n    model_solution = model.solve_bruteforce()\n    print(\"Variable assignment:\", model_solution)\n    print(\"Model value:\", model.value(model_solution))\n    print(\"Constraints satisfied?\", model.is_solution_valid(model_solution))\n\n\nSolving the model with *qubovert*'s simulated annealing\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease see the definition of PUBO in the next section. We will anneal the PUBO.\n\n.. code:: python\n\n    from qubovert.sim import anneal_pubo\n\n    res = anneal_pubo(model, num_anneals=10)\n    model_solution = res.best.state\n\n    print(\"Variable assignment:\", model_solution)\n    print(\"Model value:\", res.best.value)\n    print(\"Constraints satisfied?\", model.is_solution_valid(model_solution))\n\n\nSolving the model with D-Wave's simulated annealer\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`D-Wave's simulated annealer <https://github.com/dwavesystems/dwave-neal>`_ cannot anneal PUBOs as we did above. Instead the model must be reduced to a QUBO. See the next section for definitions of QUBO and PUBO.\n\n.. code:: python\n\n    from neal import SimulatedAnnealingSampler\n\n    # Get the QUBO form of the model\n    qubo = model.to_qubo()\n\n    # D-Wave accept QUBOs in a different format than qubovert's format\n    # to get the qubo in this form, use the .Q property\n    dwave_qubo = qubo.Q\n\n    # solve with D-Wave\n    res = SimulatedAnnealingSampler().sample_qubo(dwave_qubo, num_runs=10)\n    qubo_solution = res.first.sample\n\n    # convert the qubo solution back to the solution to the model\n    model_solution = model.convert_solution(qubo_solution)\n\n    print(\"Variable assignment:\", model_solution)\n    print(\"Model value:\", model.value(model_solution))\n    print(\"Constraints satisfied?\", model.is_solution_valid(model_solution))\n\n\nManaging QUBO, QUSO, PUBO, PUSO, PCBO, and PCSO formulations\n------------------------------------------------------------\n\n*qubovert* defines, among many others, the following objects.\n\n- QUBO: Quadratic Unconstrained Boolean Optimization (``qubovert.QUBO``)\n- QUSO: Quadratic Unconstrained Spin Optimization (``qubovert.QUSO``)\n- PUBO: Polynomial Unconstrained Boolean Optimization (``qubovert.PUBO``)\n- PUSO: Polynomial Unconstrained Spin Optimization (``qubovert.PUSO``)\n- PCBO: Polynomial Constrained Boolean Optimization (``qubovert.PCBO``)\n- PCSO: Polynomial Constrained Spin Optimization (``qubovert.PCSO``)\n\nEach of the objects has many methods and arbitary arithmetic defined; see the docstrings of each object and the `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_ for more info. A boolean optimization model is one whose variables can be assigned to be either 0 or 1, while a spin optimization model is one whose variables can be assigned to be either 1 or -1. The ``qubovert.boolean_var(name)`` function will create a PCBO representing the boolean variable with name ``name``. Similarly, the ``qubovert.spin_var(name)`` function will create a PCSO representing the spin variable with name ``name``.\n\n\nThere are many utilities in the *utils* library that can be helpful. Some examples of utility functions are listed here.\n\n- ``qubovert.utils.solve_pubo_bruteforce``, solve a PUBO by iterating through all possible solutions.\n- ``qubovert.utils.solve_puso_bruteforce``, solve a PUSO by iterating through all possible solutions.\n- ``qubovert.utils.pubo_to_puso``, convert a PUBO to a PUSO.\n- ``qubovert.utils.puso_to_pubo``, convert a PUSO to a PUBO.\n- ``qubovert.utils.pubo_value``, determine the value that a PUBO takes with a particular solution mapping.\n- ``qubovert.utils.puso_value``, determine the value that a PUSO takes with a particular solution mapping.\n- ``qubovert.utils.approximate_pubo_extrema``, approximate the minimum and maximum values that a PUBO can take; the true extrema will lie within these bounds.\n- ``qubovert.utils.approximate_puso_extrema``, approximate the minimum and maximum values that a PUSO can take; the true extrema will lie within these bounds.\n- ``qubovert.utils.subgraph``, create the subgraph of a model that only contains certain given variables.\n- ``qubovert.utils.subvalue``, create the submodel of a model with certain values of the model replaced with values.\n- ``qubovert.utils.normalize``, normalize a model such that its coefficients have a maximum absolute magnitude.\n\nSee ``qubovert.utils.__all__`` for more. Please note that all conversions between boolean and spin map {0, 1} to/from {1, -1} in that order! This is the convention that *qubovert* uses everywhere.\n\n\nThe PCBO and PCSO objects have constraint methods; for example, the ``.add_constraint_le_zero`` method will enforce that an expression is less than or equal to zero by adding a penalty to the model whenever it does not. The PCBO object also has constraint methods for satisfiability expressions; for example, the ``.add_constraint_OR`` will enforce that the OR of the given boolean expression evaluates to True by adding a penalty to the model whenever it does not. See the docstrings and `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_ for more info.\n\n\nFor more utilities on satisfiability expressions, *qubovert* also has a *sat* library; see ``qubovert.sat.__all__``. Consider the following 3-SAT example. We have variables ``x0, x1, x2, x3``, labeled by ``0, 1, 2, 3``. We can create an expression ``C`` that evaluates to 1 whenever the 3-SAT conditions are satisfied.\n\n.. code:: python\n\n    from qubovert.sat import AND, NOT, OR\n\n    C = AND(OR(0, 1, 2), OR(NOT(0), 2, NOT(3)), OR(NOT(1), NOT(2), 3))\n\n    # C = 1 for a satisfying assignment, C = 0 otherwise\n    # So minimizing -C will solve it.\n    P = -C\n    solution = P.solve_bruteforce()\n\n\n\nBasic examples of common functionality\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSee the `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_ for many fully worked out examples. Here we will just show some basic and brief examples.\n\n\nThe basic building block of a binary optimization model is a Python dictionary. The keys of the dictionary are tuples of variable names, and the values are their corresponding coefficients. For example, in the below code block, ``model1``, ``model2``, and ``model3`` are equivalent.\n\n.. code:: python\n\n    from qubovert import boolean_var, PUBO\n\n    x0, x1, x2 = boolean_var('x0'), boolean_var('x1'), boolean_var('x2')\n\n    model1 = -1 + x0 + 2 * x0 * x1 - 3 * x0 * x2 + x0 * x1 * x2\n    model2 = {(): -1, ('x0',): 1, ('x0', 'x1'): 2, ('x0', 'x2'): -3, ('x0', 'x1', 'x2'): 1}\n    model3 = PUBO(model2)\n\n\nSimilarly, in the below code block, ``model1``, ``model2``, and ``model3`` are equivalent.\n\n.. code:: python\n\n    from qubovert import spin_var, PUSO\n\n    z0, z1, z2 = spin_var('z0'), spin_var('z1'), spin_var('z2')\n\n    model1 = -1 + z0 + 2 * z0 * z1 - 3 * z0 * z2 + z0 * z1 * z2\n    model2 = {(): -1, ('z0',): 1, ('z0', 'z1'): 2, ('z0', 'z2'): -3, ('z0', 'z1', 'z2'): 1}\n    model3 = PUSO(model2)\n\n\n\nLet's take the same model from above (ie define :code:`model = model1.copy()`). Suppose we want to find the ground state of the model subject to the constraints that the sum of the variables is negative and that the product of ``z0`` and ``z1`` is 1. We have to enforce these constraints with a penalty called ``lam``. For now, let's set it as a Symbol that we can adjust later.\n\n.. code:: python\n\n    from sympy import Symbol\n\n    lam = Symbol('lam')\n    model.add_constraint_lt_zero(z0 + z1 + z2, lam=lam)\n    model.add_constraint_eq_zero(z0 * z1 - 1, lam=lam)\n\n\nNote that constraint methods can also be strung together if you want. So we could have written this as\n\n.. code:: python\n\n    model.add_constraint_lt_zero(\n        z0 + z1 + z2, lam=lam\n    ).add_constraint_eq_zero(\n        z0 * z1 - 1, lam=lam\n    )\n\n\nThe first thing you notice if you :code:`print(model.variables)` is that there are now new variables in the model called ``'__a0'`` and ``'__a1'``. These are auxillary or *ancilla* variables that are needed to enforce the constraints. The next thing to notice if you :code:`print(model.degree)` is that the model is a polynomial of degree 3. Many solvers (for example D-Wave's solvers) only solve degree 2 models. To get a QUBO or QUSO (which are degree two modes) from ``model``, simply call the ``.to_qubo`` or ``.to_quso`` methods, which will reduce the degree to 2 by introducing more variables.\n\n.. code:: python\n\n    qubo = model.to_qubo()\n    quso = model.to_quso()\n\n\nNext let's solve the QUBO and/or QUSO formulations. First we have to substitute a value in for our placeholder symbol ``lam`` that is used to enforce the constraints. We'll just use ``lam=3`` for now.\n\n.. code:: python\n\n    qubo = qubo.subs({lam: 3})\n    quso = quso.subs({lam: 3})\n\n\nHere we will use `D-Wave's simulated annealer <https://github.com/dwavesystems/dwave-neal>`_.\n\n.. code:: python\n\n    from neal import SimulatedAnnealingSampler\n\n    # D-Wave represents QUBOs a little differently than qubovert does.\n    # to get D-Wave's form, use the .Q property\n    dwave_qubo = qubo.Q\n\n    # D-Wave represents QUSOs a little differently than qubovert does.\n    # to get D-Wave's form, use the .h property the linear terms and the\n    # .J property for the quadratic terms\n    dwave_linear, dwave_quadratic = quso.h, quso.J\n\n    # call dwave\n    qubo_res = SimulatedAnnealingSampler().sample_qubo(dwave_qubo)\n    quso_res = SimulatedAnnealingSampler().sample_ising(dwave_linear, dwave_quadratic)\n\n    qubo_solution = qubo_res.first.sample\n    quso_solution = quso_res.first.sample\n\n\nNow we have to convert the solution in terms of the QUBO/QUSO variables back to a solution in terms of the original variables. We can then check if the proposed solution satisfies all of the constraints!\n\n.. code:: python\n\n    converted_qubo_solution = model.convert_solution(qubo_solution)\n    print(model.is_solution_valid(converted_qubo_solution))\n\n    converted_quso_solution = model.convert_solution(quso_solution)\n    print(model.is_solution_valid(converted_quso_solution))\n\n\nSimulating spin and boolean systems\n-----------------------------------\n\nWe use a Metropolis algorithm to simulate spin and boolean system. Below we show an example for simulating a spin system (specifically, a 1D ferromagnetic chain). Similar functionality exists for QUBO, PUBO, and PUSO simulation with ``qubovert.sim.QUBOSimulation``, ``qubovert.sim.PUBOSimulation``, ``qubovert.sim.PUSOSimulation``. Please note that `QUSOSimulation`` and ``QUBOSimulation`` are much faster than ``PUSOSimulation`` and ``PUBOSimulation`` because the former are implemented in C. If you have a degree 2 or less model, use the QUBO and QUSO simulations!\n\n.. code:: python\n\n    import qubovert as qv\n\n    length = 50\n    spin_system = sum(\n        -qv.spin_var(i) * qv.spin_var(i+1) for i in range(length)\n    )\n\n    # initial state is all spin down\n    initial_state = {i: -1 for i in range(length)}\n    sim = qv.sim.QUSOSimulation(spin_system, initial_state)\n\n    # define a schedule. here we simulate at temperature 4 for 25 time\n    # steps, then temperature 2 for 25 time steps, then temperature 1 for\n    # 10 time steps.\n    schedule = (4, 25), (2, 25), (1, 10)\n    sim.schedule_update(schedule)\n\n    print(\"final state\", sim.state)\n\n\nConvert common problems to quadratic form (the *problems* library)\n------------------------------------------------------------------\n\nOne of the goals of *qubovert* is to become a large collection of problems mapped to QUBO and QUSO forms in order to aid the recent increase in study of these problems due to quantum optimization algorithms. Use Python's ``help`` function! I have very descriptive doc strings on all the functions and classes. Please see the `notebooks <https://github.com/jiosue/qubovert/tree/master/notebook_examples>`_ for a few more examples as well.\n\n\nSee the following Set Cover example.\n\n.. code:: python\n\n    from qubovert.problems import SetCover\n    from any_module import qubo_solver\n    # or you can use my bruteforce solver...\n    # from qubovert.utils import solve_qubo_bruteforce as qubo_solver\n\n    U = {\"a\", \"b\", \"c\", \"d\"}\n    V = [{\"a\", \"b\"}, {\"a\", \"c\"}, {\"c\", \"d\"}]\n\n    problem = SetCover(U, V)\n    Q = problem.to_qubo()\n\n    obj, sol = qubo_solver(Q)\n\n    solution = problem.convert_solution(sol)\n\n    print(solution)\n    # {0, 2}\n    print(problem.is_solution_valid(solution))\n    # will print True, since V[0] + V[2] covers all of U\n    print(obj == len(solution))\n    # will print True\n\nTo use the QUSO formulation instead:\n\n.. code:: python\n\n    from qubovert.problems import SetCover\n    from any_module import quso_solver\n    # or you can use my bruteforce solver...\n    # from qubovert.utils import solve_quso_bruteforce as quso_solver\n\n    U = {\"a\", \"b\", \"c\", \"d\"}\n    V = [{\"a\", \"b\"}, {\"a\", \"c\"}, {\"c\", \"d\"}]\n\n    problem = SetCover(U, V)\n    L = problem.to_quso()\n\n    obj, sol = quso_solver(L)\n\n    solution = problem.convert_solution(sol)\n\n    print(solution)\n    # {0, 2}\n    print(problem.is_solution_valid(solution))\n    # will print True, since V[0] + V[2] covers all of U\n    print(obj == len(solution))\n    # will print True\n\n\nTo see problem specifics, run\n\n.. code:: python\n\n    help(qubovert.problems.SetCover)\n    help(qubovert.problems.VertexCover)\n    # etc\n\n\n====\n\n.. image:: https://emoji.slack-edge.com/T24940PQV/qvfire/8fdd5c5b7e9b5f15.png", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jiosue/qubovert", "keywords": "", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "qubovert", "package_url": "https://pypi.org/project/qubovert/", "platform": "", "project_url": "https://pypi.org/project/qubovert/", "project_urls": {"Docs": "https://qubovert.readthedocs.io", "Homepage": "https://github.com/jiosue/qubovert", "Source": "https://github.com/jiosue/qubovert"}, "release_url": "https://pypi.org/project/qubovert/1.1.6/", "requires_dist": null, "requires_python": "", "summary": "A package for formulating, simulating, and solving problems in boolean and spin form", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The one-stop package for formulating, simulating, and solving problems in boolean and spin form.</p>\n<p><em>master branch</em></p>\n<a href=\"https://github.com/jiosue/qubovert/actions/\" rel=\"nofollow\"><img alt=\"GitHub Actions CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/894427da5711c6f906c97eb709e5e5b4fe3a8fb4/68747470733a2f2f6769746875622e636f6d2f6a696f7375652f7175626f766572742f776f726b666c6f77732f6275696c642f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://qubovert.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34361d812b894d9db982fd3aafbc2265896719de/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7175626f766572742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://codecov.io/gh/jiosue/qubovert\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/929e83963e356e435cbb24e1a6fcea180bba3c39/68747470733a2f2f636f6465636f762e696f2f67682f6a696f7375652f7175626f766572742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://lgtm.com/projects/g/jiosue/qubovert/context:python\" rel=\"nofollow\"><img alt=\"Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6320c50705b1f51b733abd9ca21c9cac24172e24/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6a696f7375652f7175626f766572742e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<p><em>dev branch</em></p>\n<a href=\"https://github.com/jiosue/qubovert/actions/\" rel=\"nofollow\"><img alt=\"GitHub Actions CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01968b9af7faf093dffbb48e235f01ebd35c9eb9/68747470733a2f2f6769746875622e636f6d2f6a696f7375652f7175626f766572742f776f726b666c6f77732f6275696c642f62616467652e7376673f6272616e63683d646576\"></a>\n<a href=\"https://qubovert.readthedocs.io/en/latest/?badge=dev\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11df13d2a8c81b054fcb4a0670efd66126392ceb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7175626f766572742f62616467652f3f76657273696f6e3d646576\"></a>\n<a href=\"https://codecov.io/gh/jiosue/qubovert\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0b7c21984b5ab29ef35759f11f0e983356d6bda/68747470733a2f2f636f6465636f762e696f2f67682f6a696f7375652f7175626f766572742f6272616e63682f6465762f67726170682f62616467652e737667\"></a>\n<p><em>pypi distribution</em></p>\n<a href=\"https://badge.fury.io/py/qubovert\" rel=\"nofollow\"><img alt=\"pypi dist\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2af9c91706d2770da49b22ebfb8a4bf641e3e79f/68747470733a2f2f62616467652e667572792e696f2f70792f7175626f766572742e737667\"></a>\n<a href=\"https://pepy.tech/project/qubovert\" rel=\"nofollow\"><img alt=\"pypi dist downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17fe29beaf12bb2091818a6767c26a2e00f7c013/68747470733a2f2f706570792e746563682f62616467652f7175626f76657274\"></a>\n<p>Please see the <a href=\"https://github.com/jiosue/qubovert\" rel=\"nofollow\">Repository</a> and <a href=\"https://qubovert.readthedocs.io\" rel=\"nofollow\">Docs</a>. For examples/tutorials, see the <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a>.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#installation\" id=\"id7\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#example-of-the-typical-workflow\" id=\"id8\" rel=\"nofollow\">Example of the typical workflow</a><ul>\n<li><a href=\"#create-the-boolean-objective-function-to-minimize\" id=\"id9\" rel=\"nofollow\">Create the boolean objective function to minimize</a></li>\n<li><a href=\"#solving-the-model-with-bruteforce\" id=\"id10\" rel=\"nofollow\">Solving the model with bruteforce</a></li>\n<li><a href=\"#solving-the-model-with-qubovert-s-simulated-annealing\" id=\"id11\" rel=\"nofollow\">Solving the model with <em>qubovert</em>\u2019s simulated annealing</a></li>\n<li><a href=\"#solving-the-model-with-d-wave-s-simulated-annealer\" id=\"id12\" rel=\"nofollow\">Solving the model with D-Wave\u2019s simulated annealer</a></li>\n</ul>\n</li>\n<li><a href=\"#managing-qubo-quso-pubo-puso-pcbo-and-pcso-formulations\" id=\"id13\" rel=\"nofollow\">Managing QUBO, QUSO, PUBO, PUSO, PCBO, and PCSO formulations</a><ul>\n<li><a href=\"#basic-examples-of-common-functionality\" id=\"id14\" rel=\"nofollow\">Basic examples of common functionality</a></li>\n</ul>\n</li>\n<li><a href=\"#simulating-spin-and-boolean-systems\" id=\"id15\" rel=\"nofollow\">Simulating spin and boolean systems</a></li>\n<li><a href=\"#convert-common-problems-to-quadratic-form-the-problems-library\" id=\"id16\" rel=\"nofollow\">Convert common problems to quadratic form (the <em>problems</em> library)</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Installation</a></h2>\n<p>For the stable release (same version as the <em>master</em> branch):</p>\n<pre>pip install qubovert\n</pre>\n<p>Or to install from source:</p>\n<pre>git clone https://github.com/jiosue/qubovert.git\n<span class=\"nb\">cd</span> qubovert\npip install -e .\n</pre>\n<p>Then you can use it in Python <strong>versions 3.6 and above</strong> with</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qubovert</span> <span class=\"k\">as</span> <span class=\"nn\">qv</span>\n</pre>\n<p>Note that to install from source on Windows you will need <a href=\"https://visualstudio.microsoft.com/visual-cpp-build-tools/\" rel=\"nofollow\">Microsoft Visual C++ Build Tools 14</a> installed.</p>\n</div>\n<div id=\"example-of-the-typical-workflow\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Example of the typical workflow</a></h2>\n<p>Here we show an example of formulating a pseudo-boolean objective function. We can also make spin objective functions (Hamiltonians) in a very similar manner. See the <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a> for examples.</p>\n<div id=\"create-the-boolean-objective-function-to-minimize\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Create the boolean objective function to minimize</a></h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert</span> <span class=\"kn\">import</span> <span class=\"n\">boolean_var</span>\n\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># create the variables</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">boolean_var</span><span class=\"p\">(</span><span class=\"s1\">'x(</span><span class=\"si\">%d</span><span class=\"s1\">)'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)}</span>\n\n<span class=\"c1\"># minimize \\sum_{i=0}^{N-1} (1-2x_{i}) x_{i+1}</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># subject to the constraint that x_1 equals the XOR of x_3 and x_5</span>\n<span class=\"c1\"># enforce with a penalty factor of 3</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_constraint_eq_XOR</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># subject to the constraints that the sum of all variables is less than 4</span>\n<span class=\"c1\"># enforce with a penalty factor of 5</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_constraint_lt_zero</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>Next we will show multiple ways to solve the model.</p>\n</div>\n<div id=\"solving-the-model-with-bruteforce\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Solving the model with bruteforce</a></h3>\n<p>Before using the bruteforce solver, always check that <tt>model.num_binary_variables</tt> is relatively small!</p>\n<pre><span class=\"n\">model_solution</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">solve_bruteforce</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Variable assignment:\"</span><span class=\"p\">,</span> <span class=\"n\">model_solution</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Model value:\"</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">model_solution</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Constraints satisfied?\"</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">model_solution</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"solving-the-model-with-qubovert-s-simulated-annealing\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Solving the model with <em>qubovert</em>\u2019s simulated annealing</a></h3>\n<p>Please see the definition of PUBO in the next section. We will anneal the PUBO.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert.sim</span> <span class=\"kn\">import</span> <span class=\"n\">anneal_pubo</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">anneal_pubo</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">num_anneals</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">model_solution</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">state</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Variable assignment:\"</span><span class=\"p\">,</span> <span class=\"n\">model_solution</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Model value:\"</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">best</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Constraints satisfied?\"</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">model_solution</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"solving-the-model-with-d-wave-s-simulated-annealer\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Solving the model with D-Wave\u2019s simulated annealer</a></h3>\n<p><a href=\"https://github.com/dwavesystems/dwave-neal\" rel=\"nofollow\">D-Wave\u2019s simulated annealer</a> cannot anneal PUBOs as we did above. Instead the model must be reduced to a QUBO. See the next section for definitions of QUBO and PUBO.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neal</span> <span class=\"kn\">import</span> <span class=\"n\">SimulatedAnnealingSampler</span>\n\n<span class=\"c1\"># Get the QUBO form of the model</span>\n<span class=\"n\">qubo</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to_qubo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># D-Wave accept QUBOs in a different format than qubovert's format</span>\n<span class=\"c1\"># to get the qubo in this form, use the .Q property</span>\n<span class=\"n\">dwave_qubo</span> <span class=\"o\">=</span> <span class=\"n\">qubo</span><span class=\"o\">.</span><span class=\"n\">Q</span>\n\n<span class=\"c1\"># solve with D-Wave</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">SimulatedAnnealingSampler</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sample_qubo</span><span class=\"p\">(</span><span class=\"n\">dwave_qubo</span><span class=\"p\">,</span> <span class=\"n\">num_runs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">qubo_solution</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">sample</span>\n\n<span class=\"c1\"># convert the qubo solution back to the solution to the model</span>\n<span class=\"n\">model_solution</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">convert_solution</span><span class=\"p\">(</span><span class=\"n\">qubo_solution</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Variable assignment:\"</span><span class=\"p\">,</span> <span class=\"n\">model_solution</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Model value:\"</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">model_solution</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Constraints satisfied?\"</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">model_solution</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"managing-qubo-quso-pubo-puso-pcbo-and-pcso-formulations\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Managing QUBO, QUSO, PUBO, PUSO, PCBO, and PCSO formulations</a></h2>\n<p><em>qubovert</em> defines, among many others, the following objects.</p>\n<ul>\n<li>QUBO: Quadratic Unconstrained Boolean Optimization (<tt>qubovert.QUBO</tt>)</li>\n<li>QUSO: Quadratic Unconstrained Spin Optimization (<tt>qubovert.QUSO</tt>)</li>\n<li>PUBO: Polynomial Unconstrained Boolean Optimization (<tt>qubovert.PUBO</tt>)</li>\n<li>PUSO: Polynomial Unconstrained Spin Optimization (<tt>qubovert.PUSO</tt>)</li>\n<li>PCBO: Polynomial Constrained Boolean Optimization (<tt>qubovert.PCBO</tt>)</li>\n<li>PCSO: Polynomial Constrained Spin Optimization (<tt>qubovert.PCSO</tt>)</li>\n</ul>\n<p>Each of the objects has many methods and arbitary arithmetic defined; see the docstrings of each object and the <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a> for more info. A boolean optimization model is one whose variables can be assigned to be either 0 or 1, while a spin optimization model is one whose variables can be assigned to be either 1 or -1. The <tt>qubovert.boolean_var(name)</tt> function will create a PCBO representing the boolean variable with name <tt>name</tt>. Similarly, the <tt>qubovert.spin_var(name)</tt> function will create a PCSO representing the spin variable with name <tt>name</tt>.</p>\n<p>There are many utilities in the <em>utils</em> library that can be helpful. Some examples of utility functions are listed here.</p>\n<ul>\n<li><tt>qubovert.utils.solve_pubo_bruteforce</tt>, solve a PUBO by iterating through all possible solutions.</li>\n<li><tt>qubovert.utils.solve_puso_bruteforce</tt>, solve a PUSO by iterating through all possible solutions.</li>\n<li><tt>qubovert.utils.pubo_to_puso</tt>, convert a PUBO to a PUSO.</li>\n<li><tt>qubovert.utils.puso_to_pubo</tt>, convert a PUSO to a PUBO.</li>\n<li><tt>qubovert.utils.pubo_value</tt>, determine the value that a PUBO takes with a particular solution mapping.</li>\n<li><tt>qubovert.utils.puso_value</tt>, determine the value that a PUSO takes with a particular solution mapping.</li>\n<li><tt>qubovert.utils.approximate_pubo_extrema</tt>, approximate the minimum and maximum values that a PUBO can take; the true extrema will lie within these bounds.</li>\n<li><tt>qubovert.utils.approximate_puso_extrema</tt>, approximate the minimum and maximum values that a PUSO can take; the true extrema will lie within these bounds.</li>\n<li><tt>qubovert.utils.subgraph</tt>, create the subgraph of a model that only contains certain given variables.</li>\n<li><tt>qubovert.utils.subvalue</tt>, create the submodel of a model with certain values of the model replaced with values.</li>\n<li><tt>qubovert.utils.normalize</tt>, normalize a model such that its coefficients have a maximum absolute magnitude.</li>\n</ul>\n<p>See <tt>qubovert.utils.__all__</tt> for more. Please note that all conversions between boolean and spin map {0, 1} to/from {1, -1} in that order! This is the convention that <em>qubovert</em> uses everywhere.</p>\n<p>The PCBO and PCSO objects have constraint methods; for example, the <tt>.add_constraint_le_zero</tt> method will enforce that an expression is less than or equal to zero by adding a penalty to the model whenever it does not. The PCBO object also has constraint methods for satisfiability expressions; for example, the <tt>.add_constraint_OR</tt> will enforce that the OR of the given boolean expression evaluates to True by adding a penalty to the model whenever it does not. See the docstrings and <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a> for more info.</p>\n<p>For more utilities on satisfiability expressions, <em>qubovert</em> also has a <em>sat</em> library; see <tt>qubovert.sat.__all__</tt>. Consider the following 3-SAT example. We have variables <tt>x0, x1, x2, x3</tt>, labeled by <tt>0, 1, 2, 3</tt>. We can create an expression <tt>C</tt> that evaluates to 1 whenever the 3-SAT conditions are satisfied.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert.sat</span> <span class=\"kn\">import</span> <span class=\"n\">AND</span><span class=\"p\">,</span> <span class=\"n\">NOT</span><span class=\"p\">,</span> <span class=\"n\">OR</span>\n\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">AND</span><span class=\"p\">(</span><span class=\"n\">OR</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">OR</span><span class=\"p\">(</span><span class=\"n\">NOT</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">NOT</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)),</span> <span class=\"n\">OR</span><span class=\"p\">(</span><span class=\"n\">NOT</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">NOT</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># C = 1 for a satisfying assignment, C = 0 otherwise</span>\n<span class=\"c1\"># So minimizing -C will solve it.</span>\n<span class=\"n\">P</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">C</span>\n<span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"o\">.</span><span class=\"n\">solve_bruteforce</span><span class=\"p\">()</span>\n</pre>\n<div id=\"basic-examples-of-common-functionality\">\n<h3><a href=\"#contents\" rel=\"nofollow\">Basic examples of common functionality</a></h3>\n<p>See the <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a> for many fully worked out examples. Here we will just show some basic and brief examples.</p>\n<p>The basic building block of a binary optimization model is a Python dictionary. The keys of the dictionary are tuples of variable names, and the values are their corresponding coefficients. For example, in the below code block, <tt>model1</tt>, <tt>model2</tt>, and <tt>model3</tt> are equivalent.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert</span> <span class=\"kn\">import</span> <span class=\"n\">boolean_var</span><span class=\"p\">,</span> <span class=\"n\">PUBO</span>\n\n<span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">boolean_var</span><span class=\"p\">(</span><span class=\"s1\">'x0'</span><span class=\"p\">),</span> <span class=\"n\">boolean_var</span><span class=\"p\">(</span><span class=\"s1\">'x1'</span><span class=\"p\">),</span> <span class=\"n\">boolean_var</span><span class=\"p\">(</span><span class=\"s1\">'x2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">x0</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x0</span> <span class=\"o\">*</span> <span class=\"n\">x1</span> <span class=\"o\">-</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">x0</span> <span class=\"o\">*</span> <span class=\"n\">x2</span> <span class=\"o\">+</span> <span class=\"n\">x0</span> <span class=\"o\">*</span> <span class=\"n\">x1</span> <span class=\"o\">*</span> <span class=\"n\">x2</span>\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"p\">{():</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'x0'</span><span class=\"p\">,):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'x0'</span><span class=\"p\">,</span> <span class=\"s1\">'x1'</span><span class=\"p\">):</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'x0'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">):</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'x0'</span><span class=\"p\">,</span> <span class=\"s1\">'x1'</span><span class=\"p\">,</span> <span class=\"s1\">'x2'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">model3</span> <span class=\"o\">=</span> <span class=\"n\">PUBO</span><span class=\"p\">(</span><span class=\"n\">model2</span><span class=\"p\">)</span>\n</pre>\n<p>Similarly, in the below code block, <tt>model1</tt>, <tt>model2</tt>, and <tt>model3</tt> are equivalent.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert</span> <span class=\"kn\">import</span> <span class=\"n\">spin_var</span><span class=\"p\">,</span> <span class=\"n\">PUSO</span>\n\n<span class=\"n\">z0</span><span class=\"p\">,</span> <span class=\"n\">z1</span><span class=\"p\">,</span> <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"n\">spin_var</span><span class=\"p\">(</span><span class=\"s1\">'z0'</span><span class=\"p\">),</span> <span class=\"n\">spin_var</span><span class=\"p\">(</span><span class=\"s1\">'z1'</span><span class=\"p\">),</span> <span class=\"n\">spin_var</span><span class=\"p\">(</span><span class=\"s1\">'z2'</span><span class=\"p\">)</span>\n\n<span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">z0</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">z0</span> <span class=\"o\">*</span> <span class=\"n\">z1</span> <span class=\"o\">-</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"n\">z0</span> <span class=\"o\">*</span> <span class=\"n\">z2</span> <span class=\"o\">+</span> <span class=\"n\">z0</span> <span class=\"o\">*</span> <span class=\"n\">z1</span> <span class=\"o\">*</span> <span class=\"n\">z2</span>\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"p\">{():</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'z0'</span><span class=\"p\">,):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'z0'</span><span class=\"p\">,</span> <span class=\"s1\">'z1'</span><span class=\"p\">):</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'z0'</span><span class=\"p\">,</span> <span class=\"s1\">'z2'</span><span class=\"p\">):</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'z0'</span><span class=\"p\">,</span> <span class=\"s1\">'z1'</span><span class=\"p\">,</span> <span class=\"s1\">'z2'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">model3</span> <span class=\"o\">=</span> <span class=\"n\">PUSO</span><span class=\"p\">(</span><span class=\"n\">model2</span><span class=\"p\">)</span>\n</pre>\n<p>Let\u2019s take the same model from above (ie define <code>model = model1.copy()</code>). Suppose we want to find the ground state of the model subject to the constraints that the sum of the variables is negative and that the product of <tt>z0</tt> and <tt>z1</tt> is 1. We have to enforce these constraints with a penalty called <tt>lam</tt>. For now, let\u2019s set it as a Symbol that we can adjust later.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n\n<span class=\"n\">lam</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">'lam'</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_constraint_lt_zero</span><span class=\"p\">(</span><span class=\"n\">z0</span> <span class=\"o\">+</span> <span class=\"n\">z1</span> <span class=\"o\">+</span> <span class=\"n\">z2</span><span class=\"p\">,</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"n\">lam</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_constraint_eq_zero</span><span class=\"p\">(</span><span class=\"n\">z0</span> <span class=\"o\">*</span> <span class=\"n\">z1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"n\">lam</span><span class=\"p\">)</span>\n</pre>\n<p>Note that constraint methods can also be strung together if you want. So we could have written this as</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">add_constraint_lt_zero</span><span class=\"p\">(</span>\n    <span class=\"n\">z0</span> <span class=\"o\">+</span> <span class=\"n\">z1</span> <span class=\"o\">+</span> <span class=\"n\">z2</span><span class=\"p\">,</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"n\">lam</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_constraint_eq_zero</span><span class=\"p\">(</span>\n    <span class=\"n\">z0</span> <span class=\"o\">*</span> <span class=\"n\">z1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"n\">lam</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The first thing you notice if you <code>print(model.variables)</code> is that there are now new variables in the model called <tt>'__a0'</tt> and <tt>'__a1'</tt>. These are auxillary or <em>ancilla</em> variables that are needed to enforce the constraints. The next thing to notice if you <code>print(model.degree)</code> is that the model is a polynomial of degree 3. Many solvers (for example D-Wave\u2019s solvers) only solve degree 2 models. To get a QUBO or QUSO (which are degree two modes) from <tt>model</tt>, simply call the <tt>.to_qubo</tt> or <tt>.to_quso</tt> methods, which will reduce the degree to 2 by introducing more variables.</p>\n<pre><span class=\"n\">qubo</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to_qubo</span><span class=\"p\">()</span>\n<span class=\"n\">quso</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to_quso</span><span class=\"p\">()</span>\n</pre>\n<p>Next let\u2019s solve the QUBO and/or QUSO formulations. First we have to substitute a value in for our placeholder symbol <tt>lam</tt> that is used to enforce the constraints. We\u2019ll just use <tt>lam=3</tt> for now.</p>\n<pre><span class=\"n\">qubo</span> <span class=\"o\">=</span> <span class=\"n\">qubo</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">lam</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"n\">quso</span> <span class=\"o\">=</span> <span class=\"n\">quso</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">lam</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n</pre>\n<p>Here we will use <a href=\"https://github.com/dwavesystems/dwave-neal\" rel=\"nofollow\">D-Wave\u2019s simulated annealer</a>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neal</span> <span class=\"kn\">import</span> <span class=\"n\">SimulatedAnnealingSampler</span>\n\n<span class=\"c1\"># D-Wave represents QUBOs a little differently than qubovert does.</span>\n<span class=\"c1\"># to get D-Wave's form, use the .Q property</span>\n<span class=\"n\">dwave_qubo</span> <span class=\"o\">=</span> <span class=\"n\">qubo</span><span class=\"o\">.</span><span class=\"n\">Q</span>\n\n<span class=\"c1\"># D-Wave represents QUSOs a little differently than qubovert does.</span>\n<span class=\"c1\"># to get D-Wave's form, use the .h property the linear terms and the</span>\n<span class=\"c1\"># .J property for the quadratic terms</span>\n<span class=\"n\">dwave_linear</span><span class=\"p\">,</span> <span class=\"n\">dwave_quadratic</span> <span class=\"o\">=</span> <span class=\"n\">quso</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">quso</span><span class=\"o\">.</span><span class=\"n\">J</span>\n\n<span class=\"c1\"># call dwave</span>\n<span class=\"n\">qubo_res</span> <span class=\"o\">=</span> <span class=\"n\">SimulatedAnnealingSampler</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sample_qubo</span><span class=\"p\">(</span><span class=\"n\">dwave_qubo</span><span class=\"p\">)</span>\n<span class=\"n\">quso_res</span> <span class=\"o\">=</span> <span class=\"n\">SimulatedAnnealingSampler</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sample_ising</span><span class=\"p\">(</span><span class=\"n\">dwave_linear</span><span class=\"p\">,</span> <span class=\"n\">dwave_quadratic</span><span class=\"p\">)</span>\n\n<span class=\"n\">qubo_solution</span> <span class=\"o\">=</span> <span class=\"n\">qubo_res</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">sample</span>\n<span class=\"n\">quso_solution</span> <span class=\"o\">=</span> <span class=\"n\">quso_res</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">.</span><span class=\"n\">sample</span>\n</pre>\n<p>Now we have to convert the solution in terms of the QUBO/QUSO variables back to a solution in terms of the original variables. We can then check if the proposed solution satisfies all of the constraints!</p>\n<pre><span class=\"n\">converted_qubo_solution</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">convert_solution</span><span class=\"p\">(</span><span class=\"n\">qubo_solution</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">converted_qubo_solution</span><span class=\"p\">))</span>\n\n<span class=\"n\">converted_quso_solution</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">convert_solution</span><span class=\"p\">(</span><span class=\"n\">quso_solution</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">converted_quso_solution</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"simulating-spin-and-boolean-systems\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Simulating spin and boolean systems</a></h2>\n<p>We use a Metropolis algorithm to simulate spin and boolean system. Below we show an example for simulating a spin system (specifically, a 1D ferromagnetic chain). Similar functionality exists for QUBO, PUBO, and PUSO simulation with <tt>qubovert.sim.QUBOSimulation</tt>, <tt>qubovert.sim.PUBOSimulation</tt>, <tt>qubovert.sim.PUSOSimulation</tt>. Please note that <cite>QUSOSimulation`</cite> and <tt>QUBOSimulation</tt> are much faster than <tt>PUSOSimulation</tt> and <tt>PUBOSimulation</tt> because the former are implemented in C. If you have a degree 2 or less model, use the QUBO and QUSO simulations!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">qubovert</span> <span class=\"k\">as</span> <span class=\"nn\">qv</span>\n\n<span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">spin_system</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span>\n    <span class=\"o\">-</span><span class=\"n\">qv</span><span class=\"o\">.</span><span class=\"n\">spin_var</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">qv</span><span class=\"o\">.</span><span class=\"n\">spin_var</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># initial state is all spin down</span>\n<span class=\"n\">initial_state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)}</span>\n<span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">qv</span><span class=\"o\">.</span><span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">QUSOSimulation</span><span class=\"p\">(</span><span class=\"n\">spin_system</span><span class=\"p\">,</span> <span class=\"n\">initial_state</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># define a schedule. here we simulate at temperature 4 for 25 time</span>\n<span class=\"c1\"># steps, then temperature 2 for 25 time steps, then temperature 1 for</span>\n<span class=\"c1\"># 10 time steps.</span>\n<span class=\"n\">schedule</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">schedule_update</span><span class=\"p\">(</span><span class=\"n\">schedule</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"final state\"</span><span class=\"p\">,</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"convert-common-problems-to-quadratic-form-the-problems-library\">\n<h2><a href=\"#contents\" rel=\"nofollow\">Convert common problems to quadratic form (the <em>problems</em> library)</a></h2>\n<p>One of the goals of <em>qubovert</em> is to become a large collection of problems mapped to QUBO and QUSO forms in order to aid the recent increase in study of these problems due to quantum optimization algorithms. Use Python\u2019s <tt>help</tt> function! I have very descriptive doc strings on all the functions and classes. Please see the <a href=\"https://github.com/jiosue/qubovert/tree/master/notebook_examples\" rel=\"nofollow\">notebooks</a> for a few more examples as well.</p>\n<p>See the following Set Cover example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert.problems</span> <span class=\"kn\">import</span> <span class=\"n\">SetCover</span>\n<span class=\"kn\">from</span> <span class=\"nn\">any_module</span> <span class=\"kn\">import</span> <span class=\"n\">qubo_solver</span>\n<span class=\"c1\"># or you can use my bruteforce solver...</span>\n<span class=\"c1\"># from qubovert.utils import solve_qubo_bruteforce as qubo_solver</span>\n\n<span class=\"n\">U</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">}</span>\n<span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">}]</span>\n\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">SetCover</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">)</span>\n<span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">to_qubo</span><span class=\"p\">()</span>\n\n<span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">qubo_solver</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">)</span>\n\n<span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">convert_solution</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">)</span>\n<span class=\"c1\"># {0, 2}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">))</span>\n<span class=\"c1\"># will print True, since V[0] + V[2] covers all of U</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">))</span>\n<span class=\"c1\"># will print True</span>\n</pre>\n<p>To use the QUSO formulation instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">qubovert.problems</span> <span class=\"kn\">import</span> <span class=\"n\">SetCover</span>\n<span class=\"kn\">from</span> <span class=\"nn\">any_module</span> <span class=\"kn\">import</span> <span class=\"n\">quso_solver</span>\n<span class=\"c1\"># or you can use my bruteforce solver...</span>\n<span class=\"c1\"># from qubovert.utils import solve_quso_bruteforce as quso_solver</span>\n\n<span class=\"n\">U</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">}</span>\n<span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"c\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span> <span class=\"s2\">\"d\"</span><span class=\"p\">}]</span>\n\n<span class=\"n\">problem</span> <span class=\"o\">=</span> <span class=\"n\">SetCover</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">)</span>\n<span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">to_quso</span><span class=\"p\">()</span>\n\n<span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">quso_solver</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span>\n\n<span class=\"n\">solution</span> <span class=\"o\">=</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">convert_solution</span><span class=\"p\">(</span><span class=\"n\">sol</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">)</span>\n<span class=\"c1\"># {0, 2}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">is_solution_valid</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">))</span>\n<span class=\"c1\"># will print True, since V[0] + V[2] covers all of U</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">solution</span><span class=\"p\">))</span>\n<span class=\"c1\"># will print True</span>\n</pre>\n<p>To see problem specifics, run</p>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">qubovert</span><span class=\"o\">.</span><span class=\"n\">problems</span><span class=\"o\">.</span><span class=\"n\">SetCover</span><span class=\"p\">)</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">qubovert</span><span class=\"o\">.</span><span class=\"n\">problems</span><span class=\"o\">.</span><span class=\"n\">VertexCover</span><span class=\"p\">)</span>\n<span class=\"c1\"># etc</span>\n</pre>\n<hr class=\"docutils\">\n<img alt=\"https://emoji.slack-edge.com/T24940PQV/qvfire/8fdd5c5b7e9b5f15.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbd0f98b4127d97e86c631f9166ead289d0f184d/68747470733a2f2f656d6f6a692e736c61636b2d656467652e636f6d2f5432343934305051562f7176666972652f386664643563356237653962356631352e706e67\">\n</div>\n\n          </div>"}, "last_serial": 6809388, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3d8721f6c00237069c1c4d28a5c987f6", "sha256": "8252ad692c4bb11b6b0f925093a26d6d263afc458fee0ff2fd002b3b8ec46fce"}, "downloads": -1, "filename": "qubovert-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d8721f6c00237069c1c4d28a5c987f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52665, "upload_time": "2019-08-02T19:21:33", "upload_time_iso_8601": "2019-08-02T19:21:33.646769Z", "url": "https://files.pythonhosted.org/packages/9f/31/b4fd89a94ab67625ed13871bfa85e62d15fa0469e0bbca53dc8170a6a9e7/qubovert-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5dbb71fde86c55c6be8b52633a3132fb", "sha256": "7ce026e62e8b309f166796aecd3bd1f81003f6f80d21f5900e9002dc79e7f413"}, "downloads": -1, "filename": "qubovert-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5dbb71fde86c55c6be8b52633a3132fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27153, "upload_time": "2019-08-02T19:21:36", "upload_time_iso_8601": "2019-08-02T19:21:36.191788Z", "url": "https://files.pythonhosted.org/packages/31/f2/2ee503f8fdf4a16b18c1c33a92d30289436a05c0b901de9af69b2b96caf1/qubovert-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b898e5a3a92f642cc4b062bae5871fb7", "sha256": "e409fcce43170c31a00a3a2036e5750d77dfa9d49e2a25c5530e1c256d353bdf"}, "downloads": -1, "filename": "qubovert-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b898e5a3a92f642cc4b062bae5871fb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 109656, "upload_time": "2019-09-09T19:47:14", "upload_time_iso_8601": "2019-09-09T19:47:14.770141Z", "url": "https://files.pythonhosted.org/packages/f5/6e/6682488ddbfaa1b9d103632420e7b23667243b27c9e124634d920b3b8092/qubovert-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b309a510596fee2bf870ae91b06b7ac8", "sha256": "92f0df32132293a7d11be75bfed1671407858e01ef574c0978248e9df26b1881"}, "downloads": -1, "filename": "qubovert-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b309a510596fee2bf870ae91b06b7ac8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65036, "upload_time": "2019-09-09T19:47:16", "upload_time_iso_8601": "2019-09-09T19:47:16.670212Z", "url": "https://files.pythonhosted.org/packages/28/4b/2a698fc9eadf7686498451c45ccd2eccfc8f064a0dfec0e82dbef1bf21f6/qubovert-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c09cc892b47a2c62646ef203c4259fe2", "sha256": "2993d95a65d7660a9b0be10e9d46a0acde879b1d9835a71804e7b5276c36c8b0"}, "downloads": -1, "filename": "qubovert-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c09cc892b47a2c62646ef203c4259fe2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 110439, "upload_time": "2019-09-18T07:02:49", "upload_time_iso_8601": "2019-09-18T07:02:49.322251Z", "url": "https://files.pythonhosted.org/packages/3f/41/af0b0e968cd855d007953a3686c5b007df4d745d317945d64df84ccab1b8/qubovert-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd9c847d9703b00f98aa4f0dc44c8648", "sha256": "c9c4235bfe1f05526733d50f47c0e22a66e873309aa7ed63f7e1205d414233ea"}, "downloads": -1, "filename": "qubovert-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cd9c847d9703b00f98aa4f0dc44c8648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65736, "upload_time": "2019-09-18T07:02:52", "upload_time_iso_8601": "2019-09-18T07:02:52.068293Z", "url": "https://files.pythonhosted.org/packages/59/9e/d4e22bb5809125c4447f13e8e61034b93784e97e0e46247ee1244c6e243a/qubovert-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4e28f8c47cfff4e539635b7f3e765634", "sha256": "e70ef1e084f477516b5801d5ff3483e9f46c9a1aee8bd76adaf0c2e7218ca787"}, "downloads": -1, "filename": "qubovert-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4e28f8c47cfff4e539635b7f3e765634", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 110472, "upload_time": "2019-09-18T07:33:34", "upload_time_iso_8601": "2019-09-18T07:33:34.851473Z", "url": "https://files.pythonhosted.org/packages/c6/76/4d50cc639864a67c5a7b7c4950a64aac4e8902832a261f7a72e9cd9b0357/qubovert-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a460cb597a725f82b53c1c412b0dd977", "sha256": "01f0c1f3c78387fc6e0944496cd87b983230fb3e5aa9ae2738d02e78002fe6fb"}, "downloads": -1, "filename": "qubovert-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a460cb597a725f82b53c1c412b0dd977", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65717, "upload_time": "2019-09-18T07:33:38", "upload_time_iso_8601": "2019-09-18T07:33:38.060853Z", "url": "https://files.pythonhosted.org/packages/84/14/142cb8762af48fb1482e16f77d32106c459c7a3a2165015218400341caab/qubovert-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "66f50d2c6400960b7a9628a3ab4b0adc", "sha256": "b3d6afdbffc0bef846300ac83535f2123c29ade3cb4db984be83e9592adbcd7f"}, "downloads": -1, "filename": "qubovert-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "66f50d2c6400960b7a9628a3ab4b0adc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 110773, "upload_time": "2019-09-18T18:41:37", "upload_time_iso_8601": "2019-09-18T18:41:37.462963Z", "url": "https://files.pythonhosted.org/packages/5a/0c/554043bfa56190e474ea24ac029a9452529cd7fffa9c0ff421d49dec4861/qubovert-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c56c4d502989ecbfadd4bf6ee1acaf", "sha256": "50d62024be717e5cfa8abe8c0111cd5efff3660f6c5707d60f196a52238a2cba"}, "downloads": -1, "filename": "qubovert-0.0.5.tar.gz", "has_sig": false, "md5_digest": "04c56c4d502989ecbfadd4bf6ee1acaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66023, "upload_time": "2019-09-18T18:41:39", "upload_time_iso_8601": "2019-09-18T18:41:39.450780Z", "url": "https://files.pythonhosted.org/packages/7e/f9/6d7f07d9327ec08d864815d6edbeb22a0530a49b19a8745f280854a3ce03/qubovert-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "3adb7ef16c17b37528167e56da075745", "sha256": "95526b70905d87bf6766c1283fce1f984a0700670a0fdaca18c2d7d5fdfc655b"}, "downloads": -1, "filename": "qubovert-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "3adb7ef16c17b37528167e56da075745", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 110736, "upload_time": "2019-09-25T23:34:25", "upload_time_iso_8601": "2019-09-25T23:34:25.217613Z", "url": "https://files.pythonhosted.org/packages/d9/ff/719a6d9682c3d5e5681b65543ccc1f7791701807d034db40be1b9a51c95e/qubovert-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51a423470b9e800cc05b0f33776ad4a9", "sha256": "d6ae28b0f98b93aed4232a9e217f0d81f320ec8703395780a41193dc8d78b575"}, "downloads": -1, "filename": "qubovert-0.0.6.tar.gz", "has_sig": false, "md5_digest": "51a423470b9e800cc05b0f33776ad4a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66394, "upload_time": "2019-09-25T23:34:27", "upload_time_iso_8601": "2019-09-25T23:34:27.524727Z", "url": "https://files.pythonhosted.org/packages/b1/9f/135676623f8b66f3ebeef37a7d65edb03509314d259e2d7f0f27015ddb3b/qubovert-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "4de1aa7a029e5292ffc7b9e69042b85a", "sha256": "e67db65bc3811aa185dc050c3ca64e6e9823ef52b656fc4234880ccc73dfa21f"}, "downloads": -1, "filename": "qubovert-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4de1aa7a029e5292ffc7b9e69042b85a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 111264, "upload_time": "2019-10-04T23:36:17", "upload_time_iso_8601": "2019-10-04T23:36:17.432981Z", "url": "https://files.pythonhosted.org/packages/1a/a0/b720e83e9ba6f7d9d4cdae072baa02b71bf14ac42c0178bfa8a23eecb8ba/qubovert-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f6ba17063feb3a8801e0fc21524e625", "sha256": "fb3198610c21b95c3d0744d0ac1144e24b77929c21e32e8a02e13c9e3bd2b505"}, "downloads": -1, "filename": "qubovert-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0f6ba17063feb3a8801e0fc21524e625", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66985, "upload_time": "2019-10-04T23:36:19", "upload_time_iso_8601": "2019-10-04T23:36:19.590123Z", "url": "https://files.pythonhosted.org/packages/e1/79/85084cf61da98e5c6aa735eaf7e14efede7c34114a8209edb3540f19fbec/qubovert-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b93116576c69c06e08cbca64b403f383", "sha256": "93f8cec4dc44c083e8228360242280f1f88f5bfb918366a80d37d0203f8b076e"}, "downloads": -1, "filename": "qubovert-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b93116576c69c06e08cbca64b403f383", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117077, "upload_time": "2020-01-15T05:54:21", "upload_time_iso_8601": "2020-01-15T05:54:21.277643Z", "url": "https://files.pythonhosted.org/packages/99/7a/ae410e398b164425ce36b5a1e55ab4cab4b897c6bc664c2d185b8f210ef2/qubovert-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a0d60b02f6e98319f884f2320e5455d", "sha256": "c65d0a9d201a08a41acd82ffc14b46c5abd8d8435aaad0f3bddb2f9e7a7bc026"}, "downloads": -1, "filename": "qubovert-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0a0d60b02f6e98319f884f2320e5455d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70380, "upload_time": "2020-01-15T05:54:23", "upload_time_iso_8601": "2020-01-15T05:54:23.481369Z", "url": "https://files.pythonhosted.org/packages/8d/04/11babf79e4ffcffc82e05547351a0977f9fcae57bfd6aa8c7fa76b640f12/qubovert-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fab1ee7c3d2b1a39d0cac68dddaa4f7c", "sha256": "13ef9fe2df0f3252e3ca10c447a0347a32dbb1f1a0e804367039ddb1c20bf62b"}, "downloads": -1, "filename": "qubovert-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fab1ee7c3d2b1a39d0cac68dddaa4f7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 120887, "upload_time": "2020-02-07T00:08:36", "upload_time_iso_8601": "2020-02-07T00:08:36.194802Z", "url": "https://files.pythonhosted.org/packages/a4/a8/a1fddf62b13b9ea2b403b1a66b41b0dedcc5e8e4f34fac1c32a9e11a91fa/qubovert-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d325a9672d01bb934ac16fca46675ee8", "sha256": "452b7827501fe689057128581293becd00eefec9796450b76b01f71cfbe0b358"}, "downloads": -1, "filename": "qubovert-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d325a9672d01bb934ac16fca46675ee8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71588, "upload_time": "2020-02-07T00:08:38", "upload_time_iso_8601": "2020-02-07T00:08:38.300668Z", "url": "https://files.pythonhosted.org/packages/d8/e1/c7d9059ebc3722d75b0d6d835e937006aed6cac181bb2e72b7a0af018b48/qubovert-0.1.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "b8b70c7b36075816abea0e072e10047b", "sha256": "33a0945067936e83448dba2fba01e745a1e2901d17d31804321a271235964567"}, "downloads": -1, "filename": "qubovert-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8b70c7b36075816abea0e072e10047b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122742, "upload_time": "2020-02-12T23:51:15", "upload_time_iso_8601": "2020-02-12T23:51:15.575225Z", "url": "https://files.pythonhosted.org/packages/60/dc/fab182a513bc31073de87fad5eb6d5af3516979380e62ede6eb1dee74d92/qubovert-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9992c024bc75a7ba1cff7ef3f2f42fdf", "sha256": "294b9d8f09d939f2a92e4a8bd2b6c81747052ea5a34b7b1505f7dca23755b936"}, "downloads": -1, "filename": "qubovert-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9992c024bc75a7ba1cff7ef3f2f42fdf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71404, "upload_time": "2020-02-12T23:51:17", "upload_time_iso_8601": "2020-02-12T23:51:17.696624Z", "url": "https://files.pythonhosted.org/packages/7d/d1/773cff5c0ade18cc0bba51f03e7aef544d91cc505fb34f1faa1d8f85adc1/qubovert-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "db2a409fe8383fd60900545c92380894", "sha256": "0c5804f4f1f22130d9e82ad4e1304e66df4a49c8b06d10c7e358be61aad55696"}, "downloads": -1, "filename": "qubovert-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db2a409fe8383fd60900545c92380894", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 137266, "upload_time": "2020-02-21T01:41:27", "upload_time_iso_8601": "2020-02-21T01:41:27.972167Z", "url": "https://files.pythonhosted.org/packages/c4/0c/cae0da5f7a524840afb97ff8eb157c185e446fcbb124027e00286851b58c/qubovert-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f522cb21c38ec04146fa0f0bf10f586a", "sha256": "c21b9522530eb77fb5958d6db3fbde9d2c66b6cd8b5d21377c1f1da6f1cdfaf1"}, "downloads": -1, "filename": "qubovert-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f522cb21c38ec04146fa0f0bf10f586a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82183, "upload_time": "2020-02-21T01:41:29", "upload_time_iso_8601": "2020-02-21T01:41:29.748173Z", "url": "https://files.pythonhosted.org/packages/36/18/053d0c1b564e176a5ffa1b476549f8cf31fe5897bc91a1a26b3ad3e661c7/qubovert-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "6fddc1558400ce8199e46f597685fb6d", "sha256": "e5b8603b8ef8a90b27b5fcae51fe42ff9cb7c7d5b4a9a3a5d5d35987cf945656"}, "downloads": -1, "filename": "qubovert-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6fddc1558400ce8199e46f597685fb6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 137751, "upload_time": "2020-02-24T06:11:07", "upload_time_iso_8601": "2020-02-24T06:11:07.953909Z", "url": "https://files.pythonhosted.org/packages/58/7f/b7bec0cd5eb58d1b224bd272c359976d3dcaadd2515751809aa35e0a2c82/qubovert-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f8fc2d82b35ab071e3defeefb1574b", "sha256": "2ea0437da3204cb7e67a2ba6a3fea953c02f88b3e8f8bc1f5a8c30ca70caa823"}, "downloads": -1, "filename": "qubovert-1.1.1.tar.gz", "has_sig": false, "md5_digest": "d3f8fc2d82b35ab071e3defeefb1574b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82507, "upload_time": "2020-02-24T06:11:10", "upload_time_iso_8601": "2020-02-24T06:11:10.432683Z", "url": "https://files.pythonhosted.org/packages/3e/22/10725a28306cfdf165cb8ec088c3978c274beeda573c848df3f3d61301e6/qubovert-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c27bcad5f4ddc341eae28982e91a75a4", "sha256": "680da23e1dca4abfb0b861fbb5640547459630b3b8bd6aea570daaf1b2b39352"}, "downloads": -1, "filename": "qubovert-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c27bcad5f4ddc341eae28982e91a75a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 138938, "upload_time": "2020-02-26T03:45:15", "upload_time_iso_8601": "2020-02-26T03:45:15.381942Z", "url": "https://files.pythonhosted.org/packages/98/91/9e0fa415c114fed358913a2ffb0501a9685ecddb024d26232ef251879244/qubovert-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "750e2ddc105aebebbae803be7f29dddf", "sha256": "dc0e794227e3a3d1a15400da86a3d68a816ce73b8872c2de12bbfe397d39286d"}, "downloads": -1, "filename": "qubovert-1.1.2.tar.gz", "has_sig": false, "md5_digest": "750e2ddc105aebebbae803be7f29dddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83592, "upload_time": "2020-02-26T03:45:17", "upload_time_iso_8601": "2020-02-26T03:45:17.595196Z", "url": "https://files.pythonhosted.org/packages/ff/7f/a07c426a5b030272b5d396c3df075c15ace90e6b9cab973c294d957ff0d4/qubovert-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "11ed80ff7373f6ad478d5fc36852bd6d", "sha256": "783f21f2ec3a5dd8c389c000e9b08d5106c07e1de71e485b01b86fb0340fda4b"}, "downloads": -1, "filename": "qubovert-1.1.3-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "11ed80ff7373f6ad478d5fc36852bd6d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 203995, "upload_time": "2020-03-06T17:46:42", "upload_time_iso_8601": "2020-03-06T17:46:42.212951Z", "url": "https://files.pythonhosted.org/packages/0b/e7/6d03437ecbe48620894782c0ffeeda92b12b64af90a5bd8e8aaa82217ed8/qubovert-1.1.3-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da48b39ec606be9e27c8e0c1183e4e55", "sha256": "51ff5d877248354843e9b291a292159627d55e32f046d2626c4c5c56a75a0bd2"}, "downloads": -1, "filename": "qubovert-1.1.3.tar.gz", "has_sig": false, "md5_digest": "da48b39ec606be9e27c8e0c1183e4e55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122251, "upload_time": "2020-03-06T17:46:44", "upload_time_iso_8601": "2020-03-06T17:46:44.403076Z", "url": "https://files.pythonhosted.org/packages/99/33/b8307f1c1bd95b530bfc68a343b47dae5394cb85454613220e84735d6930/qubovert-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "b7e6f1e9824d8ed5f65175948f53d83b", "sha256": "18999f6c1328991cbb502acb991bd968841d5736c49416cefd61d5bb435aed42"}, "downloads": -1, "filename": "qubovert-1.1.4-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "b7e6f1e9824d8ed5f65175948f53d83b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 203994, "upload_time": "2020-03-06T23:32:57", "upload_time_iso_8601": "2020-03-06T23:32:57.415652Z", "url": "https://files.pythonhosted.org/packages/e2/d3/95fb717a0e222d76343653767caeb201f856b0b4c209cfc119873430f6b5/qubovert-1.1.4-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b1a0d85b61fad6acbfde2beba575b4", "sha256": "c547f8de880c41e8e3db526f4fd3f48f18a4049cb00dd7430299626c23a536f0"}, "downloads": -1, "filename": "qubovert-1.1.4.tar.gz", "has_sig": false, "md5_digest": "68b1a0d85b61fad6acbfde2beba575b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122191, "upload_time": "2020-03-06T23:32:59", "upload_time_iso_8601": "2020-03-06T23:32:59.698439Z", "url": "https://files.pythonhosted.org/packages/83/32/2187a89efccbabc1df2e41c8cedba6f20c0c3e1c1fc0815ed0fa5f79f281/qubovert-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "aee5c6a26c0c7854b9aa3a7e0cd60751", "sha256": "db680a3e0f730e17368d2bbaa265752239ca8b7e888c4f7d3c60df1880ca8f66"}, "downloads": -1, "filename": "qubovert-1.1.5-cp37-cp37m-win32.whl", "has_sig": false, "md5_digest": "aee5c6a26c0c7854b9aa3a7e0cd60751", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 203994, "upload_time": "2020-03-07T04:10:51", "upload_time_iso_8601": "2020-03-07T04:10:51.488712Z", "url": "https://files.pythonhosted.org/packages/23/8c/afb776b1676cb0a9fa13730507e8aa793527db0e8a5aa92816c7f0e89345/qubovert-1.1.5-cp37-cp37m-win32.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f64ba757ee14b271aaf1336e1bf0b17f", "sha256": "abd2ca7d69f6b3484bec1e2230b95c9593587fa58fa4b1205723d3d2d17e0813"}, "downloads": -1, "filename": "qubovert-1.1.5.tar.gz", "has_sig": false, "md5_digest": "f64ba757ee14b271aaf1336e1bf0b17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122262, "upload_time": "2020-03-07T04:10:54", "upload_time_iso_8601": "2020-03-07T04:10:54.183630Z", "url": "https://files.pythonhosted.org/packages/88/0a/20cd761301bfc9cecfabd83866a976c1aa6d343982c02190503a0c3fbc7c/qubovert-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "39a5497c03f23044da68f55f02c61670", "sha256": "9316af7a0718e1016eb1f4aa0d60d92089fab972b443360f292d05340ab40e9f"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "39a5497c03f23044da68f55f02c61670", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 205219, "upload_time": "2020-03-13T23:25:40", "upload_time_iso_8601": "2020-03-13T23:25:40.091587Z", "url": "https://files.pythonhosted.org/packages/0b/35/f863c1a03e54f55c079b84b9d0a0d81bcff647025720b8a24778786049a9/qubovert-1.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcaaf7e5b6aa859c47f6c61f289f577f", "sha256": "23746ec8c8ea3e83d74210d572b1a80b69ce05f40ee90c5caf56a9364f56eb32"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bcaaf7e5b6aa859c47f6c61f289f577f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 269255, "upload_time": "2020-03-13T23:26:14", "upload_time_iso_8601": "2020-03-13T23:26:14.333254Z", "url": "https://files.pythonhosted.org/packages/89/ab/0b2bba722e7819abf22ceaeca903f5175b4793eb636d79ac1da9c075d17f/qubovert-1.1.6-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cb7509f6e9f67bd6d8d107aac6ba687", "sha256": "c1d5a2233269dba57aa456d13f7d1fd09a45ae462fa8dc5389a60c3c31be8f96"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "3cb7509f6e9f67bd6d8d107aac6ba687", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 269258, "upload_time": "2020-03-13T23:26:16", "upload_time_iso_8601": "2020-03-13T23:26:16.135956Z", "url": "https://files.pythonhosted.org/packages/cb/25/e49d7f05946de96983dba5adc0602219a1340f91926b978289d5e97e29d1/qubovert-1.1.6-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3339c31eeace3606ea413a9ae8a6cd95", "sha256": "0fbb51ac80cac7750916a6b57e077ee7fa7fb74767b08a1044fc31d367d94673"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "3339c31eeace3606ea413a9ae8a6cd95", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 208731, "upload_time": "2020-03-13T23:26:34", "upload_time_iso_8601": "2020-03-13T23:26:34.465195Z", "url": "https://files.pythonhosted.org/packages/a0/fa/ac9706225ab6c5b1007a86eeee6175e0f95c240277c53949feaaa30b293d/qubovert-1.1.6-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "429fb600ec686d22873f81673ec7d491", "sha256": "fed5a18c64bb93dbd7205ae5f1c92d7b7acb949958a0ede7fc009f18d398018d"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "429fb600ec686d22873f81673ec7d491", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 205273, "upload_time": "2020-03-13T23:26:19", "upload_time_iso_8601": "2020-03-13T23:26:19.325320Z", "url": "https://files.pythonhosted.org/packages/5e/69/99bf7621610b8e856abc38257bd7c3e2da34b82ded9abc5d9b544bf1a72e/qubovert-1.1.6-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04bf615c87f9bb4be235f400183f7618", "sha256": "4713ffa002a775486a74bb31f2c9db7bf32c0893c49e4e420e19683ff5a09213"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "04bf615c87f9bb4be235f400183f7618", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 270608, "upload_time": "2020-03-13T23:26:17", "upload_time_iso_8601": "2020-03-13T23:26:17.819021Z", "url": "https://files.pythonhosted.org/packages/31/15/4a2d72b3a19a266699d9d61036c2b9134c9c00501fb6dfc18c9681f28b85/qubovert-1.1.6-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44e953e3651867f4da5426048c04a7fa", "sha256": "1b945fb850f67f3f3d449567dc68611eef4246573d6baf2b0679554e6761308b"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "44e953e3651867f4da5426048c04a7fa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 270609, "upload_time": "2020-03-13T23:26:19", "upload_time_iso_8601": "2020-03-13T23:26:19.384369Z", "url": "https://files.pythonhosted.org/packages/b7/36/0e06bb4212a69cd60ee05ef718c2abdbae79483fd91c2f9b1c5f6750fe58/qubovert-1.1.6-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac04d6bc7022ad446f672913a7ea17f9", "sha256": "07c348a718163045c3266c2541e6838c04290730b7bc92f309138270b19f7e2c"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "ac04d6bc7022ad446f672913a7ea17f9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 208828, "upload_time": "2020-03-13T23:26:31", "upload_time_iso_8601": "2020-03-13T23:26:31.609245Z", "url": "https://files.pythonhosted.org/packages/bc/07/aae9bc390ade49b741c1d598ede02e576b15c41d46467efd1a66520e4b72/qubovert-1.1.6-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c8827b1392c55f2febeff255f60e7ea", "sha256": "9422fd82a3e60f2922c3dd95a9f27c345429648f1809399631e33df710853340"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "9c8827b1392c55f2febeff255f60e7ea", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 205434, "upload_time": "2020-03-13T23:27:29", "upload_time_iso_8601": "2020-03-13T23:27:29.754496Z", "url": "https://files.pythonhosted.org/packages/10/66/be9ca2e02a45996bd9e38913c09a5d41b8b47d55e5e1546de271bf6faf1f/qubovert-1.1.6-cp38-cp38-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f59c0611f32057d6c0d95b87e9554b9", "sha256": "77bb74db0b8509388dcb255b68195450016d565a55edc1b02ef21d8d48a9f1b3"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5f59c0611f32057d6c0d95b87e9554b9", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 266227, "upload_time": "2020-03-13T23:26:20", "upload_time_iso_8601": "2020-03-13T23:26:20.965619Z", "url": "https://files.pythonhosted.org/packages/65/7f/a984abe18b7932ca2afc7058a72367390938242a0e59a689259c9f68e3ac/qubovert-1.1.6-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "694125e04e835bc5542b97b1bbabfdba", "sha256": "0e6d6dfc6770f86b8256c7b4893ce9479d7790757e615126a7ff46b23b4729e4"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "694125e04e835bc5542b97b1bbabfdba", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 266230, "upload_time": "2020-03-13T23:26:23", "upload_time_iso_8601": "2020-03-13T23:26:23.698500Z", "url": "https://files.pythonhosted.org/packages/c5/f3/ed70a407d80fee0d720c444c1f4efcbe6d554459dfde005460b05e9d0ad0/qubovert-1.1.6-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c591de571935f4b6575f12eb6dff828d", "sha256": "fe67d913862442bab1af09d565407a108488d7b376459838be5eeff94d087d4b"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "c591de571935f4b6575f12eb6dff828d", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 208975, "upload_time": "2020-03-13T23:26:44", "upload_time_iso_8601": "2020-03-13T23:26:44.272348Z", "url": "https://files.pythonhosted.org/packages/1d/eb/e225b38f1ac788aced431caf56bb1d22a540514b5053bb5c08189d3bc8b1/qubovert-1.1.6-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8805637d95da3a54030f309d176fe9", "sha256": "057af498bf9a39a1d6d515c0aed214db772f7a4a0896425a59275e72c152a619"}, "downloads": -1, "filename": "qubovert-1.1.6.tar.gz", "has_sig": false, "md5_digest": "0e8805637d95da3a54030f309d176fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125863, "upload_time": "2020-03-13T23:25:11", "upload_time_iso_8601": "2020-03-13T23:25:11.535262Z", "url": "https://files.pythonhosted.org/packages/80/e5/bc641c4c029141b7872246bdd202f0d2b25ae5b1a8f2970a53dce1778f4c/qubovert-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39a5497c03f23044da68f55f02c61670", "sha256": "9316af7a0718e1016eb1f4aa0d60d92089fab972b443360f292d05340ab40e9f"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "39a5497c03f23044da68f55f02c61670", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 205219, "upload_time": "2020-03-13T23:25:40", "upload_time_iso_8601": "2020-03-13T23:25:40.091587Z", "url": "https://files.pythonhosted.org/packages/0b/35/f863c1a03e54f55c079b84b9d0a0d81bcff647025720b8a24778786049a9/qubovert-1.1.6-cp36-cp36m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcaaf7e5b6aa859c47f6c61f289f577f", "sha256": "23746ec8c8ea3e83d74210d572b1a80b69ce05f40ee90c5caf56a9364f56eb32"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bcaaf7e5b6aa859c47f6c61f289f577f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 269255, "upload_time": "2020-03-13T23:26:14", "upload_time_iso_8601": "2020-03-13T23:26:14.333254Z", "url": "https://files.pythonhosted.org/packages/89/ab/0b2bba722e7819abf22ceaeca903f5175b4793eb636d79ac1da9c075d17f/qubovert-1.1.6-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cb7509f6e9f67bd6d8d107aac6ba687", "sha256": "c1d5a2233269dba57aa456d13f7d1fd09a45ae462fa8dc5389a60c3c31be8f96"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "3cb7509f6e9f67bd6d8d107aac6ba687", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 269258, "upload_time": "2020-03-13T23:26:16", "upload_time_iso_8601": "2020-03-13T23:26:16.135956Z", "url": "https://files.pythonhosted.org/packages/cb/25/e49d7f05946de96983dba5adc0602219a1340f91926b978289d5e97e29d1/qubovert-1.1.6-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3339c31eeace3606ea413a9ae8a6cd95", "sha256": "0fbb51ac80cac7750916a6b57e077ee7fa7fb74767b08a1044fc31d367d94673"}, "downloads": -1, "filename": "qubovert-1.1.6-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "3339c31eeace3606ea413a9ae8a6cd95", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 208731, "upload_time": "2020-03-13T23:26:34", "upload_time_iso_8601": "2020-03-13T23:26:34.465195Z", "url": "https://files.pythonhosted.org/packages/a0/fa/ac9706225ab6c5b1007a86eeee6175e0f95c240277c53949feaaa30b293d/qubovert-1.1.6-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "429fb600ec686d22873f81673ec7d491", "sha256": "fed5a18c64bb93dbd7205ae5f1c92d7b7acb949958a0ede7fc009f18d398018d"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "429fb600ec686d22873f81673ec7d491", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 205273, "upload_time": "2020-03-13T23:26:19", "upload_time_iso_8601": "2020-03-13T23:26:19.325320Z", "url": "https://files.pythonhosted.org/packages/5e/69/99bf7621610b8e856abc38257bd7c3e2da34b82ded9abc5d9b544bf1a72e/qubovert-1.1.6-cp37-cp37m-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04bf615c87f9bb4be235f400183f7618", "sha256": "4713ffa002a775486a74bb31f2c9db7bf32c0893c49e4e420e19683ff5a09213"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "04bf615c87f9bb4be235f400183f7618", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 270608, "upload_time": "2020-03-13T23:26:17", "upload_time_iso_8601": "2020-03-13T23:26:17.819021Z", "url": "https://files.pythonhosted.org/packages/31/15/4a2d72b3a19a266699d9d61036c2b9134c9c00501fb6dfc18c9681f28b85/qubovert-1.1.6-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44e953e3651867f4da5426048c04a7fa", "sha256": "1b945fb850f67f3f3d449567dc68611eef4246573d6baf2b0679554e6761308b"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "44e953e3651867f4da5426048c04a7fa", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 270609, "upload_time": "2020-03-13T23:26:19", "upload_time_iso_8601": "2020-03-13T23:26:19.384369Z", "url": "https://files.pythonhosted.org/packages/b7/36/0e06bb4212a69cd60ee05ef718c2abdbae79483fd91c2f9b1c5f6750fe58/qubovert-1.1.6-cp37-cp37m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac04d6bc7022ad446f672913a7ea17f9", "sha256": "07c348a718163045c3266c2541e6838c04290730b7bc92f309138270b19f7e2c"}, "downloads": -1, "filename": "qubovert-1.1.6-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "ac04d6bc7022ad446f672913a7ea17f9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 208828, "upload_time": "2020-03-13T23:26:31", "upload_time_iso_8601": "2020-03-13T23:26:31.609245Z", "url": "https://files.pythonhosted.org/packages/bc/07/aae9bc390ade49b741c1d598ede02e576b15c41d46467efd1a66520e4b72/qubovert-1.1.6-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c8827b1392c55f2febeff255f60e7ea", "sha256": "9422fd82a3e60f2922c3dd95a9f27c345429648f1809399631e33df710853340"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-macosx_10_13_x86_64.whl", "has_sig": false, "md5_digest": "9c8827b1392c55f2febeff255f60e7ea", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 205434, "upload_time": "2020-03-13T23:27:29", "upload_time_iso_8601": "2020-03-13T23:27:29.754496Z", "url": "https://files.pythonhosted.org/packages/10/66/be9ca2e02a45996bd9e38913c09a5d41b8b47d55e5e1546de271bf6faf1f/qubovert-1.1.6-cp38-cp38-macosx_10_13_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f59c0611f32057d6c0d95b87e9554b9", "sha256": "77bb74db0b8509388dcb255b68195450016d565a55edc1b02ef21d8d48a9f1b3"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5f59c0611f32057d6c0d95b87e9554b9", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 266227, "upload_time": "2020-03-13T23:26:20", "upload_time_iso_8601": "2020-03-13T23:26:20.965619Z", "url": "https://files.pythonhosted.org/packages/65/7f/a984abe18b7932ca2afc7058a72367390938242a0e59a689259c9f68e3ac/qubovert-1.1.6-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "694125e04e835bc5542b97b1bbabfdba", "sha256": "0e6d6dfc6770f86b8256c7b4893ce9479d7790757e615126a7ff46b23b4729e4"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "694125e04e835bc5542b97b1bbabfdba", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 266230, "upload_time": "2020-03-13T23:26:23", "upload_time_iso_8601": "2020-03-13T23:26:23.698500Z", "url": "https://files.pythonhosted.org/packages/c5/f3/ed70a407d80fee0d720c444c1f4efcbe6d554459dfde005460b05e9d0ad0/qubovert-1.1.6-cp38-cp38-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c591de571935f4b6575f12eb6dff828d", "sha256": "fe67d913862442bab1af09d565407a108488d7b376459838be5eeff94d087d4b"}, "downloads": -1, "filename": "qubovert-1.1.6-cp38-cp38-win_amd64.whl", "has_sig": false, "md5_digest": "c591de571935f4b6575f12eb6dff828d", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 208975, "upload_time": "2020-03-13T23:26:44", "upload_time_iso_8601": "2020-03-13T23:26:44.272348Z", "url": "https://files.pythonhosted.org/packages/1d/eb/e225b38f1ac788aced431caf56bb1d22a540514b5053bb5c08189d3bc8b1/qubovert-1.1.6-cp38-cp38-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e8805637d95da3a54030f309d176fe9", "sha256": "057af498bf9a39a1d6d515c0aed214db772f7a4a0896425a59275e72c152a619"}, "downloads": -1, "filename": "qubovert-1.1.6.tar.gz", "has_sig": false, "md5_digest": "0e8805637d95da3a54030f309d176fe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125863, "upload_time": "2020-03-13T23:25:11", "upload_time_iso_8601": "2020-03-13T23:25:11.535262Z", "url": "https://files.pythonhosted.org/packages/80/e5/bc641c4c029141b7872246bdd202f0d2b25ae5b1a8f2970a53dce1778f4c/qubovert-1.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:41 2020"}