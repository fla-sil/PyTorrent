{"info": {"author": "Elie ROUDNINSKI", "author_email": "xademax@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Code Generators"], "description": "========\ncalligra\n========\n\n:Author: `Elie ROUDNINSKI <mailto:xademax@gmail.com>`_\n\n**calligra** is a pure Python package that tries to modelize a subset of the C langage syntax in order to reason about C types, from Python scripts.\nIts main goals are to do metaprogrammation and code generation. It does **not parse** C code itself at all.\n\n**calligra** was first designed to (un)serialize complex (but not too complex ...) C structures from JSON.\n\n.. contents::\n    :backlinks: none\n\n.. sectnum::\n\nInstallation\n==============\n\nRequirements\n----------------\n\n**calligra** requires Python 3. It has been tested on Python 3.6 on Linux but it should work on 3.4 and 3.6 and on Windows also.\nAt the moment, it does not require any external Python modules/packages, but this might change in the future.\n\nAs **calligra** is intended to generate code, some external dependencies might be needed to compile the generated code.\n\nFrom github\n---------------\n\nYou can clone this repository and install it with setuptools directly::\n\n    $ python3 setup.py install --user\n\nFrom pip\n------------\n\nAs every pip available package, you can install it easily with the pip package::\n\n    $ python3 -m pip install --user calligra\n\nTests\n-----\n\nTests are available in the source distribution (either from github or from pip) and are located in the |tests/|_ directory.\nYou can run them with setuptools::\n\n    $ python3 setup.py test\n\n.. |tests/| replace:: ``tests/``\n.. _tests/: tests/\n\nHowto\n=====\n\nIntroduction\n------------\n\nAs specified before, **calligra** is intended to reason about C types at a Python level.\n\nCurrently, you can modelize the following types:\n\n- primary types like char, int, float, double etc.\n- C strings (char*)\n- enum\n- struct, named and anonymous\n- union, named and anonymous\n\nand the following declaration modifiers:\n\n- pointers\n- array\n\nNested array of pointers or pointers to array are not supported.\n\nAt the moment, you have two choices:\n\n- define everything from Python\n- parse C code with the cparser importer module\n\nIn the future, you will be able to import definitions from:\n\n- JSON Schema\n\nExamples\n--------\n\nLets start with a basic example.\nIn the following code snippets we will be defining a C structure called `person` with 2 members:\n\n- a string `name`\n- an unsigned integer `age`\n\nAnd then we will generate the associated C code.\n\nFirst import the main modules:\n\n.. code-block:: Python\n\n    import calligra\n    import calligra.stdlib\n\n`calligra` module is where the C type/declaration syntax is modelized.\n`calligra.stdlib` is where standard C types are defined.\n\nThen define the structure:\n\n.. code-block:: Python\n\n    namespace = calligra.stdlib.namespace\n    person = calligra.struct(namespace, 'person')\n    person.add(\n        calligra.declaration(\n            namespace, namespace.get('char'), 'name', pointer = True\n        )\n    )\n    person.add(\n        calligra.declaration(\n            namespace, namespace.get('uint8_t'), 'age'\n        )\n    )\n\nFinally, generate the C code:\n\n.. code-block:: Python\n\n    print(person.define())\n\nThis should generate something similar to:\n\n.. code-block:: C\n\n    struct person {\n        char *name;\n        uint8_t age;\n    };\n\nMore advanced examples are located in the |examples/|_ directory.\n\n.. |examples/| replace:: ``examples/``\n.. _examples/: examples/\n\nModules\n=======\n\nConversion\n----------\n\nConversion modules are located in the |calligra/convert/|_ directory and are meant to (un)serialize C types to and from another format (like JSON).\n\n.. |calligra/convert/| replace:: ``calligra/convert/``\n.. _calligra/convert/: calligra/convert/\n\nCurrently available conversion modules are:\n\n- `calligra.convert.jansson`: to convert C types to and from JSON using the `Jansson <https://github.com/akheron/jansson/>`_ library.\n\nJansson\n~~~~~~~\n\nIn order to use the jansson conversion module, just import the `calligra.convert.jansson` module:\n\n.. code-block:: Python\n\n    import calligra.convert.jansson\n\nAfter that, every type should now have a `to_json` and a `from_json` method.\nThose are actually `calligra.functions` object which you can `define` to generate the corresponding C code:\n\n.. code-block:: Python\n\n    print(person.to_json.define())\n\nWhich should generate something similar to:\n\n.. code-block:: C\n\n    json_t *person_to_json(struct person const *person);\n\nAnd for the function body:\n\n.. code-block:: Python\n\n    print(person.to_json.code(body = True))\n\nWhich should generate something similar to (non-contractual code):\n\n.. code-block:: C\n\n    json_t *person_to_json(struct person const *person) {\n        json_t *json = json_object(), *child;\n        if(!json) {\n            return NULL;\n        }\n        /*name*/\n        if((person != NULL) && ((*person).name != NULL) && (*(*person).name != 0)) {\n            child = json_string((*person).name);\n            if(!child || json_object_set_new_nocheck(json, \"name\", child) != 0) {\n                if(child) {\n                    json_decref(child);\n                }\n                json_decref(json);\n                return NULL;\n            }\n        }\n        /*age*/\n        if(person != NULL) {\n            child = json_integer((*person).age);\n            if(!child || json_object_set_new_nocheck(json, \"age\", child) != 0) {\n                if(child) {\n                    json_decref(child);\n                }\n                json_decref(json);\n                return NULL;\n            }\n        }\n        return json;\n    }\n\nImporter\n--------\n\nImporter modules are located in the |calligra/importer/|_ directory and are meant to import C types from another format (like C).\n\n.. |calligra/importer/| replace:: ``calligra/importer/``\n.. _calligra/importer/: calligra/importer/\n\nCurrently available importer modules are:\n\n- `calligra.importer.cparser`: to import C types directly from C code using the `pycparser <https://github.com/eliben/pycparser/>`_ package.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/marmeladema/calligra/archive/0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marmeladema/calligra", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "calligra", "package_url": "https://pypi.org/project/calligra/", "platform": "", "project_url": "https://pypi.org/project/calligra/", "project_urls": {"Download": "https://github.com/marmeladema/calligra/archive/0.3.tar.gz", "Homepage": "https://github.com/marmeladema/calligra"}, "release_url": "https://pypi.org/project/calligra/0.3/", "requires_dist": null, "requires_python": ">=3", "summary": "C language metaprogramming and code generation from Python", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td><a href=\"mailto:xademax%40gmail.com\">Elie ROUDNINSKI</a></td></tr>\n</tbody>\n</table>\n<p><strong>calligra</strong> is a pure Python package that tries to modelize a subset of the C langage syntax in order to reason about C types, from Python scripts.\nIts main goals are to do metaprogrammation and code generation. It does <strong>not parse</strong> C code itself at all.</p>\n<p><strong>calligra</strong> was first designed to (un)serialize complex (but not too complex \u2026) C structures from JSON.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#installation\" id=\"id4\" rel=\"nofollow\">1\u00a0\u00a0\u00a0Installation</a><ul>\n<li><a href=\"#requirements\" id=\"id5\" rel=\"nofollow\">1.1\u00a0\u00a0\u00a0Requirements</a></li>\n<li><a href=\"#from-github\" id=\"id6\" rel=\"nofollow\">1.2\u00a0\u00a0\u00a0From github</a></li>\n<li><a href=\"#from-pip\" id=\"id7\" rel=\"nofollow\">1.3\u00a0\u00a0\u00a0From pip</a></li>\n<li><a href=\"#tests\" id=\"id8\" rel=\"nofollow\">1.4\u00a0\u00a0\u00a0Tests</a></li>\n</ul>\n</li>\n<li><a href=\"#howto\" id=\"id9\" rel=\"nofollow\">2\u00a0\u00a0\u00a0Howto</a><ul>\n<li><a href=\"#introduction\" id=\"id10\" rel=\"nofollow\">2.1\u00a0\u00a0\u00a0Introduction</a></li>\n<li><a href=\"#examples\" id=\"id11\" rel=\"nofollow\">2.2\u00a0\u00a0\u00a0Examples</a></li>\n</ul>\n</li>\n<li><a href=\"#modules\" id=\"id12\" rel=\"nofollow\">3\u00a0\u00a0\u00a0Modules</a><ul>\n<li><a href=\"#conversion\" id=\"id13\" rel=\"nofollow\">3.1\u00a0\u00a0\u00a0Conversion</a><ul>\n<li><a href=\"#id3\" id=\"id14\" rel=\"nofollow\">3.1.1\u00a0\u00a0\u00a0Jansson</a></li>\n</ul>\n</li>\n<li><a href=\"#importer\" id=\"id15\" rel=\"nofollow\">3.2\u00a0\u00a0\u00a0Importer</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>1\u00a0\u00a0\u00a0Installation</h2>\n<div id=\"requirements\">\n<h3>1.1\u00a0\u00a0\u00a0Requirements</h3>\n<p><strong>calligra</strong> requires Python 3. It has been tested on Python 3.6 on Linux but it should work on 3.4 and 3.6 and on Windows also.\nAt the moment, it does not require any external Python modules/packages, but this might change in the future.</p>\n<p>As <strong>calligra</strong> is intended to generate code, some external dependencies might be needed to compile the generated code.</p>\n</div>\n<div id=\"from-github\">\n<h3>1.2\u00a0\u00a0\u00a0From github</h3>\n<p>You can clone this repository and install it with setuptools directly:</p>\n<pre>$ python3 setup.py install --user\n</pre>\n</div>\n<div id=\"from-pip\">\n<h3>1.3\u00a0\u00a0\u00a0From pip</h3>\n<p>As every pip available package, you can install it easily with the pip package:</p>\n<pre>$ python3 -m pip install --user calligra\n</pre>\n</div>\n<div id=\"tests\">\n<h3>1.4\u00a0\u00a0\u00a0Tests</h3>\n<p>Tests are available in the source distribution (either from github or from pip) and are located in the <a href=\"tests/\" rel=\"nofollow\"><tt>tests/</tt></a> directory.\nYou can run them with setuptools:</p>\n<pre>$ python3 setup.py test\n</pre>\n</div>\n</div>\n<div id=\"howto\">\n<h2>2\u00a0\u00a0\u00a0Howto</h2>\n<div id=\"introduction\">\n<h3>2.1\u00a0\u00a0\u00a0Introduction</h3>\n<p>As specified before, <strong>calligra</strong> is intended to reason about C types at a Python level.</p>\n<p>Currently, you can modelize the following types:</p>\n<ul>\n<li>primary types like char, int, float, double etc.</li>\n<li>C strings (char*)</li>\n<li>enum</li>\n<li>struct, named and anonymous</li>\n<li>union, named and anonymous</li>\n</ul>\n<p>and the following declaration modifiers:</p>\n<ul>\n<li>pointers</li>\n<li>array</li>\n</ul>\n<p>Nested array of pointers or pointers to array are not supported.</p>\n<p>At the moment, you have two choices:</p>\n<ul>\n<li>define everything from Python</li>\n<li>parse C code with the cparser importer module</li>\n</ul>\n<p>In the future, you will be able to import definitions from:</p>\n<ul>\n<li>JSON Schema</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h3>2.2\u00a0\u00a0\u00a0Examples</h3>\n<p>Lets start with a basic example.\nIn the following code snippets we will be defining a C structure called <cite>person</cite> with 2 members:</p>\n<ul>\n<li>a string <cite>name</cite></li>\n<li>an unsigned integer <cite>age</cite></li>\n</ul>\n<p>And then we will generate the associated C code.</p>\n<p>First import the main modules:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">calligra</span>\n<span class=\"kn\">import</span> <span class=\"nn\">calligra.stdlib</span>\n</pre>\n<p><cite>calligra</cite> module is where the C type/declaration syntax is modelized.\n<cite>calligra.stdlib</cite> is where standard C types are defined.</p>\n<p>Then define the structure:</p>\n<pre><span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"n\">calligra</span><span class=\"o\">.</span><span class=\"n\">stdlib</span><span class=\"o\">.</span><span class=\"n\">namespace</span>\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">calligra</span><span class=\"o\">.</span><span class=\"n\">struct</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"s1\">'person'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">calligra</span><span class=\"o\">.</span><span class=\"n\">declaration</span><span class=\"p\">(</span>\n        <span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'char'</span><span class=\"p\">),</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">pointer</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">calligra</span><span class=\"o\">.</span><span class=\"n\">declaration</span><span class=\"p\">(</span>\n        <span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'uint8_t'</span><span class=\"p\">),</span> <span class=\"s1\">'age'</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, generate the C code:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">())</span>\n</pre>\n<p>This should generate something similar to:</p>\n<pre><span class=\"k\">struct</span> <span class=\"n\">person</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">age</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>\n<p>More advanced examples are located in the <a href=\"examples/\" rel=\"nofollow\"><tt>examples/</tt></a> directory.</p>\n</div>\n</div>\n<div id=\"modules\">\n<h2>3\u00a0\u00a0\u00a0Modules</h2>\n<div id=\"conversion\">\n<h3>3.1\u00a0\u00a0\u00a0Conversion</h3>\n<p>Conversion modules are located in the <a href=\"calligra/convert/\" rel=\"nofollow\"><tt>calligra/convert/</tt></a> directory and are meant to (un)serialize C types to and from another format (like JSON).</p>\n<p>Currently available conversion modules are:</p>\n<ul>\n<li><cite>calligra.convert.jansson</cite>: to convert C types to and from JSON using the <a href=\"https://github.com/akheron/jansson/\" rel=\"nofollow\">Jansson</a> library.</li>\n</ul>\n<div id=\"id3\">\n<h4>3.1.1\u00a0\u00a0\u00a0Jansson</h4>\n<p>In order to use the jansson conversion module, just import the <cite>calligra.convert.jansson</cite> module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">calligra.convert.jansson</span>\n</pre>\n<p>After that, every type should now have a <cite>to_json</cite> and a <cite>from_json</cite> method.\nThose are actually <cite>calligra.functions</cite> object which you can <cite>define</cite> to generate the corresponding C code:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"o\">.</span><span class=\"n\">define</span><span class=\"p\">())</span>\n</pre>\n<p>Which should generate something similar to:</p>\n<pre><span class=\"n\">json_t</span> <span class=\"o\">*</span><span class=\"nf\">person_to_json</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">person</span> <span class=\"k\">const</span> <span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">);</span>\n</pre>\n<p>And for the function body:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"p\">(</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<p>Which should generate something similar to (non-contractual code):</p>\n<pre><span class=\"n\">json_t</span> <span class=\"o\">*</span><span class=\"nf\">person_to_json</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">person</span> <span class=\"k\">const</span> <span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">json_t</span> <span class=\"o\">*</span><span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">json_object</span><span class=\"p\">(),</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">json</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/*name*/</span>\n    <span class=\"k\">if</span><span class=\"p\">((</span><span class=\"n\">person</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">).</span><span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">json_string</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">).</span><span class=\"n\">name</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">child</span> <span class=\"o\">||</span> <span class=\"n\">json_object_set_new_nocheck</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"s\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">json_decref</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">json_decref</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/*age*/</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">person</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">json_integer</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">person</span><span class=\"p\">).</span><span class=\"n\">age</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">child</span> <span class=\"o\">||</span> <span class=\"n\">json_object_set_new_nocheck</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"s\">\"age\"</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">json_decref</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">json_decref</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"importer\">\n<h3>3.2\u00a0\u00a0\u00a0Importer</h3>\n<p>Importer modules are located in the <a href=\"calligra/importer/\" rel=\"nofollow\"><tt>calligra/importer/</tt></a> directory and are meant to import C types from another format (like C).</p>\n<p>Currently available importer modules are:</p>\n<ul>\n<li><cite>calligra.importer.cparser</cite>: to import C types directly from C code using the <a href=\"https://github.com/eliben/pycparser/\" rel=\"nofollow\">pycparser</a> package.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3890383, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f65d9b7b90f316b0e1068ec1a828685c", "sha256": "eead14a1284a346649e27985e869bec3a59cd2439c1ebbeb034d8450fc5b3725"}, "downloads": -1, "filename": "calligra-0.1.tar.gz", "has_sig": false, "md5_digest": "f65d9b7b90f316b0e1068ec1a828685c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14096, "upload_time": "2018-05-12T17:48:12", "upload_time_iso_8601": "2018-05-12T17:48:12.780481Z", "url": "https://files.pythonhosted.org/packages/ab/ce/63519e5bf3b774d68ffce4a9e5c0098729168321b3d67960b33855545667/calligra-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "01cf264f9c12be6d15006f916a297fb2", "sha256": "9adaec46c9617fa4a3fddb994adec5c4c5b3a8012f6cb0f952329a6762f71ced"}, "downloads": -1, "filename": "calligra-0.2.tar.gz", "has_sig": false, "md5_digest": "01cf264f9c12be6d15006f916a297fb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16862, "upload_time": "2018-05-22T22:55:55", "upload_time_iso_8601": "2018-05-22T22:55:55.440703Z", "url": "https://files.pythonhosted.org/packages/d5/0c/d96b86d7752c0412e5a7d4b2e878fcbb352e4ac96d3f43b03fb9233a6007/calligra-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "d8d700f33402ac7679dc7363fd572598", "sha256": "691ee91430c54a11dc5edf9ee696be813041739c929675488ebb9da45d81df7e"}, "downloads": -1, "filename": "calligra-0.3.tar.gz", "has_sig": false, "md5_digest": "d8d700f33402ac7679dc7363fd572598", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16919, "upload_time": "2018-05-23T07:40:10", "upload_time_iso_8601": "2018-05-23T07:40:10.673413Z", "url": "https://files.pythonhosted.org/packages/5a/4b/62794f4c5f460def18ceb35f212939d7508496cdbe28641a2113080d61dc/calligra-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d8d700f33402ac7679dc7363fd572598", "sha256": "691ee91430c54a11dc5edf9ee696be813041739c929675488ebb9da45d81df7e"}, "downloads": -1, "filename": "calligra-0.3.tar.gz", "has_sig": false, "md5_digest": "d8d700f33402ac7679dc7363fd572598", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 16919, "upload_time": "2018-05-23T07:40:10", "upload_time_iso_8601": "2018-05-23T07:40:10.673413Z", "url": "https://files.pythonhosted.org/packages/5a/4b/62794f4c5f460def18ceb35f212939d7508496cdbe28641a2113080d61dc/calligra-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:37 2020"}