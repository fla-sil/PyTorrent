{"info": {"author": "Zachary Voase", "author_email": "z@zacharyvoase.com", "bugtrack_url": null, "classifiers": [], "description": "rkQuery\n=======\n\nrkQuery is a library for programmatically building Riak search queries.\nIt aims to be easy to use, powerful, and protect from injection attacks\nthat would be possible with simple string interpolation.\n\nExample\n-------\n\nJust start playing around with the ``q`` object:\n\n::\n\n    >>> from rkquery import q\n    >>> q(\"some literal\")\n    <q: \"some literal\">\n    >>> q(field=\"literal value\")\n    <q: field:\"literal value\">\n    >>> q.not_(blocked=\"yes\")\n    <q: NOT blocked:\"yes\">\n\nYou can provide multiple arguments, too. The default query combinator is\n``AND``:\n\n::\n\n    >>> q(\"word1\", \"word2\")\n    <q: \"word1\" AND \"word2\">\n    >>> q(username='foo', password='s3cr3t')\n    <q: username:\"foo\" AND password:\"s3cr3t\">\n\nThis is just a synonym for ``q.all()``:\n\n::\n\n    >>> q.all(\"word1\", \"word2\")\n    <q: \"word1\" AND \"word2\">\n    >>> q.all(username='foo', password='s3cr3t')\n    <q: username:\"foo\" AND password:\"s3cr3t\">\n\nOf course you can construct ``OR`` queries, using ``q.any()``:\n\n::\n\n    >>> q.any(\"word1\", \"word2\")\n    <q: \"word1\" OR \"word2\">\n    >>> q.any(username='foo', email='foo@example.com')\n    <q: username:\"foo\" OR email:\"foo@example.com\">\n    >>> q(field=q.any(\"string1\", \"string2\"))\n    <q: field:(\"string1\" OR \"string2\")>\n\nOr by combining existing ``q`` objects:\n\n::\n\n    >>> q.any(\"word1\", \"word2\") & q(\"word3\")\n    <q: (\"word1\" OR \"word2\") AND \"word3\">\n    >>> q.any(email=\"foo@example.com\", username=\"foo\") & q(password=\"s3cr3t\")\n    <q: (email:\"foo@example.com\" OR username:\"foo\") AND password:\"s3cr3t\">\n\nThere are helpers for negation as well (note that 'none' means 'not\nany'):\n\n::\n\n    >>> q.none(blocked=\"yes\", cheque_bounced=\"yes\")\n    <q: NOT (blocked:\"yes\" OR cheque_bounced:\"yes\")>\n    >>> ~q.any(blocked=\"yes\", cheque_bounced=\"yes\")\n    <q: NOT (blocked:\"yes\" OR cheque_bounced:\"yes\")>\n\nYou can do range queries with ``q.range()``:\n\n::\n\n    >>> q.range(\"red\", \"rum\")\n    <q: [\"red\" TO \"rum\"]>\n    >>> q(field=q.range(\"red\", \"rum\"))\n    <q: field:[\"red\" TO \"rum\"]>\n\nNote that the default is an *inclusive* range (square brackets). The\nfull set of range queries:\n\n::\n\n    >>> q.range_inclusive(\"red\", \"rum\")\n    <q: [\"red\" TO \"rum\"]>\n    >>> q.range_exclusive(\"red\", \"rum\")\n    <q: {\"red\" TO \"rum\"}>\n    >>> q.between(\"red\", \"rum\")\n    <q: {\"red\" TO \"rum\"}>\n\nTerm boosting is a simple unary operation:\n\n::\n\n    >>> q(\"red\").boost(5)\n    <q: \"red\"^5>\n\nAs is proximity:\n\n::\n\n    >>> q(\"See spot run\").proximity(20)\n    <q: \"See spot run\"~20>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zacharyvoase/rkquery", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "rkquery", "package_url": "https://pypi.org/project/rkquery/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rkquery/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/zacharyvoase/rkquery"}, "release_url": "https://pypi.org/project/rkquery/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Build Riak search queries safely and easily.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>rkQuery is a library for programmatically building Riak search queries.\nIt aims to be easy to use, powerful, and protect from injection attacks\nthat would be possible with simple string interpolation.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Just start playing around with the <tt>q</tt> object:</p>\n<pre>&gt;&gt;&gt; from rkquery import q\n&gt;&gt;&gt; q(\"some literal\")\n&lt;q: \"some literal\"&gt;\n&gt;&gt;&gt; q(field=\"literal value\")\n&lt;q: field:\"literal value\"&gt;\n&gt;&gt;&gt; q.not_(blocked=\"yes\")\n&lt;q: NOT blocked:\"yes\"&gt;\n</pre>\n<p>You can provide multiple arguments, too. The default query combinator is\n<tt>AND</tt>:</p>\n<pre>&gt;&gt;&gt; q(\"word1\", \"word2\")\n&lt;q: \"word1\" AND \"word2\"&gt;\n&gt;&gt;&gt; q(username='foo', password='s3cr3t')\n&lt;q: username:\"foo\" AND password:\"s3cr3t\"&gt;\n</pre>\n<p>This is just a synonym for <tt>q.all()</tt>:</p>\n<pre>&gt;&gt;&gt; q.all(\"word1\", \"word2\")\n&lt;q: \"word1\" AND \"word2\"&gt;\n&gt;&gt;&gt; q.all(username='foo', password='s3cr3t')\n&lt;q: username:\"foo\" AND password:\"s3cr3t\"&gt;\n</pre>\n<p>Of course you can construct <tt>OR</tt> queries, using <tt>q.any()</tt>:</p>\n<pre>&gt;&gt;&gt; q.any(\"word1\", \"word2\")\n&lt;q: \"word1\" OR \"word2\"&gt;\n&gt;&gt;&gt; q.any(username='foo', email='foo@example.com')\n&lt;q: username:\"foo\" OR email:\"foo@example.com\"&gt;\n&gt;&gt;&gt; q(field=q.any(\"string1\", \"string2\"))\n&lt;q: field:(\"string1\" OR \"string2\")&gt;\n</pre>\n<p>Or by combining existing <tt>q</tt> objects:</p>\n<pre>&gt;&gt;&gt; q.any(\"word1\", \"word2\") &amp; q(\"word3\")\n&lt;q: (\"word1\" OR \"word2\") AND \"word3\"&gt;\n&gt;&gt;&gt; q.any(email=\"foo@example.com\", username=\"foo\") &amp; q(password=\"s3cr3t\")\n&lt;q: (email:\"foo@example.com\" OR username:\"foo\") AND password:\"s3cr3t\"&gt;\n</pre>\n<p>There are helpers for negation as well (note that \u2018none\u2019 means \u2018not\nany\u2019):</p>\n<pre>&gt;&gt;&gt; q.none(blocked=\"yes\", cheque_bounced=\"yes\")\n&lt;q: NOT (blocked:\"yes\" OR cheque_bounced:\"yes\")&gt;\n&gt;&gt;&gt; ~q.any(blocked=\"yes\", cheque_bounced=\"yes\")\n&lt;q: NOT (blocked:\"yes\" OR cheque_bounced:\"yes\")&gt;\n</pre>\n<p>You can do range queries with <tt>q.range()</tt>:</p>\n<pre>&gt;&gt;&gt; q.range(\"red\", \"rum\")\n&lt;q: [\"red\" TO \"rum\"]&gt;\n&gt;&gt;&gt; q(field=q.range(\"red\", \"rum\"))\n&lt;q: field:[\"red\" TO \"rum\"]&gt;\n</pre>\n<p>Note that the default is an <em>inclusive</em> range (square brackets). The\nfull set of range queries:</p>\n<pre>&gt;&gt;&gt; q.range_inclusive(\"red\", \"rum\")\n&lt;q: [\"red\" TO \"rum\"]&gt;\n&gt;&gt;&gt; q.range_exclusive(\"red\", \"rum\")\n&lt;q: {\"red\" TO \"rum\"}&gt;\n&gt;&gt;&gt; q.between(\"red\", \"rum\")\n&lt;q: {\"red\" TO \"rum\"}&gt;\n</pre>\n<p>Term boosting is a simple unary operation:</p>\n<pre>&gt;&gt;&gt; q(\"red\").boost(5)\n&lt;q: \"red\"^5&gt;\n</pre>\n<p>As is proximity:</p>\n<pre>&gt;&gt;&gt; q(\"See spot run\").proximity(20)\n&lt;q: \"See spot run\"~20&gt;\n</pre>\n</div>\n\n          </div>"}, "last_serial": 798982, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "19fc18b13ec8e9eb562d3c5e04859367", "sha256": "7df25bda02c8c32f483b16e1474f712a0b59919eae442a98ded32e1904a07740"}, "downloads": -1, "filename": "rkquery-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19fc18b13ec8e9eb562d3c5e04859367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5234, "upload_time": "2012-06-21T05:36:19", "upload_time_iso_8601": "2012-06-21T05:36:19.145054Z", "url": "https://files.pythonhosted.org/packages/54/8f/6781c7985e147ded4fc729669e36951d0b269f2fb31595bac9fdd3a80f82/rkquery-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19fc18b13ec8e9eb562d3c5e04859367", "sha256": "7df25bda02c8c32f483b16e1474f712a0b59919eae442a98ded32e1904a07740"}, "downloads": -1, "filename": "rkquery-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19fc18b13ec8e9eb562d3c5e04859367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5234, "upload_time": "2012-06-21T05:36:19", "upload_time_iso_8601": "2012-06-21T05:36:19.145054Z", "url": "https://files.pythonhosted.org/packages/54/8f/6781c7985e147ded4fc729669e36951d0b269f2fb31595bac9fdd3a80f82/rkquery-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:20 2020"}