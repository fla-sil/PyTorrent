{"info": {"author": "slashplus", "author_email": "info@slashplus.de", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: System :: Systems Administration"], "description": "# comlipy by slashplus - lint commit messages with python\n\n<div align=\"center\">\n\n  <img width=\"800\" src=\"https://gitlab.com/slashplus-build/comlipy/raw/master/docs/assets/comlipy.svg\">\n</div>\n\nDemo generated with [svg-term-cli](https://github.com/marionebl/svg-term-cli) \n\n**comlipy** is a helper that makes it incredibly easy to check whether\nyour commit messages follow predefined or custom commit message \nstandards or not. \n\nThis means that after setting up `comlipy` in combination with \na custom git `commit-msg` hook ([further information](https://git-scm.com/book/uz/v2/Customizing-Git-Git-Hooks)),\n`comlipy` takes care of the provided commit msg and warns you\nwhenever a message does not fit your style. \n\nBy default `comlipy` follows the [conventional commit standards](https://conventionalcommits.org),\nbut you can easily change the configuration in order to fit your needs.\n\n## Requirements\n\n- python 3.7\n- pip (pip3) & pipenv\n\n## Installation\n\n### Installation with brew (recommended)\n\n```bash\n# Add the source\nbrew tap slashplus/comlipy git@gitlab.com:slashplus-build/comlipy.git\n\n# Install comlipy\nbrew install comlipy\n```\n\n### Installation with pip\n\n```bash\npip3 install comlipy\n```\n\n### Development installation\n\nInstall the repository by git cloning it and by setting up a \nvirtual environment using pipenv:\n\n```bash\ngit clone git@gitlab.com:slashplus-build/comlipy.git\ncd comlipy/\npipenv install\n\n# OR optional: install the current version globally\n# pip3 install .\n```\n\nRun comlipy:\n```bash\npipenv shell\n```\n\n## Usage\n\nMake sure you have initialized `git` in your project. \n\nSet up a commit-msg hook that checks the commit message before the \nactual commit. <br>\nAn example `commit-msg` hook can be found [here](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/commit-msg.sample) \n\nTip:\n<br>\nIt is recommended to set up a custom git hooks path, instead of \noverriding the commit-msg hook directly. <br>\nLearn more about it [here](https://git-scm.com/docs/githooks).\n\n\\[Optional:\\] Configure `comlipy` by setting up a custom configuration yml file\n\nSee [docs](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/) for further details.\n\n## Documentation\n\nDocumentation is currently not finished. Following a list of available \nreferences:\n\n- [docs](/docs): ALL documents \n- [rules](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-rules.md): Reference of all available validation rules with\n configuration values\n- [ignores](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-ignores.md): Reference of default validation ignores and how \nto add custom ignores \n- [commit-msg sample hook](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/commit-msg.sample): Example git `commit-msg` hook\n- [cli](https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-cli.md): List of available cli flags\n\n## Configuration\n\nIt is possible to change the configuration values. This way you are able \nto change rule behaviour of all rules by providing values \nfor `applicable`, `value`, `level` or you can change global settings\ni.e. the help message. \n\nTherefore you must define a custom YAML file with the rules to override \nand pass the custom config file path via parameter:\n\nIf a config rule is not set, the default value will be used instead.\n\nExample `config-comlipy.yml\n\n```yaml\n## global definitions\nglobal:\n  help: 'get help here: foo-bar-baz.abc'\n\nrules:\n  header-min-length:\n    applicable: 'always'\n    value: 0\n    level: 1\n  header-max-length: \n    applicable: 'always'\n    value: 123\n    level: 2\n  scope-case:\n    value: 'upper-case'\n  scope-empty:\n    applicable: 'never'\n    level: 2\nignores:\n    - '^SKIPME' #skip validations where header starts with \"SKIPME\"\n```\n\n## Tests\n\nYou can run unit.tests by following the python 3 unittest documentation.\nFor example:\n\n```bash\npython -m unittest comlipy.tests.lib.test_ensure\npython -m unittest comlipy.tests.lib.test_rule_checker\n```\n\nor run all tests in batch:\n```bash\n# optionally run it in verbose mode (-v)\npython -m unittest -v comlipy.tests.suite\n```\n\n### Credits & inspiration\n\n- [commitlint](https://github.com/conventional-changelog/commitlint)\n- [conventional commit standards](https://conventionalcommits.org)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/slashplus-build/comlipy/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "comlipy", "package_url": "https://pypi.org/project/comlipy/", "platform": "", "project_url": "https://pypi.org/project/comlipy/", "project_urls": {"Homepage": "https://gitlab.com/slashplus-build/comlipy/"}, "release_url": "https://pypi.org/project/comlipy/1.1.2/", "requires_dist": ["Click", "pyyaml"], "requires_python": "", "summary": "comlipy by slashplus - lint commit messages with python", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>comlipy by slashplus - lint commit messages with python</h1>\n<div>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a41bde66a915629b7a1a823c98222c19d8dca65e/68747470733a2f2f6769746c61622e636f6d2f736c617368706c75732d6275696c642f636f6d6c6970792f7261772f6d61737465722f646f63732f6173736574732f636f6d6c6970792e737667\" width=\"800\">\n</div>\n<p>Demo generated with <a href=\"https://github.com/marionebl/svg-term-cli\" rel=\"nofollow\">svg-term-cli</a></p>\n<p><strong>comlipy</strong> is a helper that makes it incredibly easy to check whether\nyour commit messages follow predefined or custom commit message\nstandards or not.</p>\n<p>This means that after setting up <code>comlipy</code> in combination with\na custom git <code>commit-msg</code> hook (<a href=\"https://git-scm.com/book/uz/v2/Customizing-Git-Git-Hooks\" rel=\"nofollow\">further information</a>),\n<code>comlipy</code> takes care of the provided commit msg and warns you\nwhenever a message does not fit your style.</p>\n<p>By default <code>comlipy</code> follows the <a href=\"https://conventionalcommits.org\" rel=\"nofollow\">conventional commit standards</a>,\nbut you can easily change the configuration in order to fit your needs.</p>\n<h2>Requirements</h2>\n<ul>\n<li>python 3.7</li>\n<li>pip (pip3) &amp; pipenv</li>\n</ul>\n<h2>Installation</h2>\n<h3>Installation with brew (recommended)</h3>\n<pre><span class=\"c1\"># Add the source</span>\nbrew tap slashplus/comlipy git@gitlab.com:slashplus-build/comlipy.git\n\n<span class=\"c1\"># Install comlipy</span>\nbrew install comlipy\n</pre>\n<h3>Installation with pip</h3>\n<pre>pip3 install comlipy\n</pre>\n<h3>Development installation</h3>\n<p>Install the repository by git cloning it and by setting up a\nvirtual environment using pipenv:</p>\n<pre>git clone git@gitlab.com:slashplus-build/comlipy.git\n<span class=\"nb\">cd</span> comlipy/\npipenv install\n\n<span class=\"c1\"># OR optional: install the current version globally</span>\n<span class=\"c1\"># pip3 install .</span>\n</pre>\n<p>Run comlipy:</p>\n<pre>pipenv shell\n</pre>\n<h2>Usage</h2>\n<p>Make sure you have initialized <code>git</code> in your project.</p>\n<p>Set up a commit-msg hook that checks the commit message before the\nactual commit. <br>\nAn example <code>commit-msg</code> hook can be found <a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/commit-msg.sample\" rel=\"nofollow\">here</a></p>\n<p>Tip:\n<br>\nIt is recommended to set up a custom git hooks path, instead of\noverriding the commit-msg hook directly. <br>\nLearn more about it <a href=\"https://git-scm.com/docs/githooks\" rel=\"nofollow\">here</a>.</p>\n<p>[Optional:] Configure <code>comlipy</code> by setting up a custom configuration yml file</p>\n<p>See <a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/\" rel=\"nofollow\">docs</a> for further details.</p>\n<h2>Documentation</h2>\n<p>Documentation is currently not finished. Following a list of available\nreferences:</p>\n<ul>\n<li><a href=\"/docs\" rel=\"nofollow\">docs</a>: ALL documents</li>\n<li><a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-rules.md\" rel=\"nofollow\">rules</a>: Reference of all available validation rules with\nconfiguration values</li>\n<li><a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-ignores.md\" rel=\"nofollow\">ignores</a>: Reference of default validation ignores and how\nto add custom ignores</li>\n<li><a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/commit-msg.sample\" rel=\"nofollow\">commit-msg sample hook</a>: Example git <code>commit-msg</code> hook</li>\n<li><a href=\"https://gitlab.com/slashplus-build/comlipy/blob/master//docs/reference-cli.md\" rel=\"nofollow\">cli</a>: List of available cli flags</li>\n</ul>\n<h2>Configuration</h2>\n<p>It is possible to change the configuration values. This way you are able\nto change rule behaviour of all rules by providing values\nfor <code>applicable</code>, <code>value</code>, <code>level</code> or you can change global settings\ni.e. the help message.</p>\n<p>Therefore you must define a custom YAML file with the rules to override\nand pass the custom config file path via parameter:</p>\n<p>If a config rule is not set, the default value will be used instead.</p>\n<p>Example `config-comlipy.yml</p>\n<pre><span class=\"c1\">## global definitions</span>\n<span class=\"nt\">global</span><span class=\"p\">:</span>\n  <span class=\"nt\">help</span><span class=\"p\">:</span> <span class=\"s\">'get</span><span class=\"nv\"> </span><span class=\"s\">help</span><span class=\"nv\"> </span><span class=\"s\">here:</span><span class=\"nv\"> </span><span class=\"s\">foo-bar-baz.abc'</span>\n\n<span class=\"nt\">rules</span><span class=\"p\">:</span>\n  <span class=\"nt\">header-min-length</span><span class=\"p\">:</span>\n    <span class=\"nt\">applicable</span><span class=\"p\">:</span> <span class=\"s\">'always'</span>\n    <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n  <span class=\"nt\">header-max-length</span><span class=\"p\">:</span> \n    <span class=\"nt\">applicable</span><span class=\"p\">:</span> <span class=\"s\">'always'</span>\n    <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">123</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n  <span class=\"nt\">scope-case</span><span class=\"p\">:</span>\n    <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">'upper-case'</span>\n  <span class=\"nt\">scope-empty</span><span class=\"p\">:</span>\n    <span class=\"nt\">applicable</span><span class=\"p\">:</span> <span class=\"s\">'never'</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n<span class=\"nt\">ignores</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"s\">'^SKIPME'</span> <span class=\"c1\">#skip validations where header starts with \"SKIPME\"</span>\n</pre>\n<h2>Tests</h2>\n<p>You can run unit.tests by following the python 3 unittest documentation.\nFor example:</p>\n<pre>python -m unittest comlipy.tests.lib.test_ensure\npython -m unittest comlipy.tests.lib.test_rule_checker\n</pre>\n<p>or run all tests in batch:</p>\n<pre><span class=\"c1\"># optionally run it in verbose mode (-v)</span>\npython -m unittest -v comlipy.tests.suite\n</pre>\n<h3>Credits &amp; inspiration</h3>\n<ul>\n<li><a href=\"https://github.com/conventional-changelog/commitlint\" rel=\"nofollow\">commitlint</a></li>\n<li><a href=\"https://conventionalcommits.org\" rel=\"nofollow\">conventional commit standards</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6632506, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2610ec2e650850e5df25e422548cf1ee", "sha256": "ec5962b215c82569555c9d272f8695ea4599a8275ae3edb94c9baf3a29318221"}, "downloads": -1, "filename": "comlipy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2610ec2e650850e5df25e422548cf1ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31719, "upload_time": "2020-01-26T11:39:18", "upload_time_iso_8601": "2020-01-26T11:39:18.050590Z", "url": "https://files.pythonhosted.org/packages/cd/e2/ab3b9039f4ccf1580dd6ba801604dadac83225227c668b62cb1760864c38/comlipy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3e981844ad5b4b708b544c79becfe42", "sha256": "c403eeaf6a71ae083b4c1a35a6f49ade7b6db16eda80bb9522081b6b8ba04840"}, "downloads": -1, "filename": "comlipy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f3e981844ad5b4b708b544c79becfe42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17754, "upload_time": "2020-01-26T11:39:20", "upload_time_iso_8601": "2020-01-26T11:39:20.254488Z", "url": "https://files.pythonhosted.org/packages/98/86/218b04e16173ba8bae1cc0ba76c52549d5310e66aa275843e925fe04eccc/comlipy-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dd0f50e7bf0110ca3243b83daaa13fef", "sha256": "9c21d4fdef300b969f2acee2414c7b72cbfc1cd3c93d22a0dba344f6fb67ffbb"}, "downloads": -1, "filename": "comlipy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd0f50e7bf0110ca3243b83daaa13fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32088, "upload_time": "2020-02-04T21:02:07", "upload_time_iso_8601": "2020-02-04T21:02:07.363791Z", "url": "https://files.pythonhosted.org/packages/0a/1a/090ecdcf9ae3d2d206497512f2f0ffba43081292a2b5f69176c73eec6994/comlipy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26f447f640d74b31150f02380f1c81d7", "sha256": "0ee92e51bcc5f90f851505a57531a7abd0be195cffd283319e43c0c51684fff2"}, "downloads": -1, "filename": "comlipy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "26f447f640d74b31150f02380f1c81d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18082, "upload_time": "2020-02-04T21:02:08", "upload_time_iso_8601": "2020-02-04T21:02:08.344323Z", "url": "https://files.pythonhosted.org/packages/3f/c4/f26348df56c3dd975ddaf5ef313bae66752942e186c8be7e118336081f39/comlipy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "6712d9f702497d500f2c6fc9d39c85c3", "sha256": "f29c0042c49ff19310988f8adeb44b7b637ebbc275f3a4841ec59f09faf8405d"}, "downloads": -1, "filename": "comlipy-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6712d9f702497d500f2c6fc9d39c85c3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32090, "upload_time": "2020-02-14T12:40:49", "upload_time_iso_8601": "2020-02-14T12:40:49.231566Z", "url": "https://files.pythonhosted.org/packages/a1/20/5c6bba875dc40a5ca86969e16939fea1576370ec42341931f370d220f3d1/comlipy-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b06e106ed8c7fc7a66bcb455ffa0e027", "sha256": "23efe735368048a5dd0db917d75e64a0c6c0dcb24882d4d099408ab085ff64ea"}, "downloads": -1, "filename": "comlipy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "b06e106ed8c7fc7a66bcb455ffa0e027", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18082, "upload_time": "2020-02-14T12:40:50", "upload_time_iso_8601": "2020-02-14T12:40:50.443035Z", "url": "https://files.pythonhosted.org/packages/79/b8/ca1c1b12e6ed344a102093604e3fd6e484519013e8f3d3beada8cb66a313/comlipy-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "9f9618c9761ad6ca19134decd2670cfb", "sha256": "133e471db1787493f5c72e3404a2d5104a3176bd22e73faadbd559fe028033d6"}, "downloads": -1, "filename": "comlipy-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f9618c9761ad6ca19134decd2670cfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32422, "upload_time": "2020-02-14T17:07:08", "upload_time_iso_8601": "2020-02-14T17:07:08.885778Z", "url": "https://files.pythonhosted.org/packages/6d/2b/34ea90fa473243357bc7e9c49909f0984b6295478e0f11b0992311c003eb/comlipy-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "889665cdff79b12f77b2a45c325025c9", "sha256": "b05f7ecb447f626478fe3cd4d9f99861c4161b8ca01caf576db9f6c546523634"}, "downloads": -1, "filename": "comlipy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "889665cdff79b12f77b2a45c325025c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18349, "upload_time": "2020-02-14T17:07:10", "upload_time_iso_8601": "2020-02-14T17:07:10.037904Z", "url": "https://files.pythonhosted.org/packages/62/58/24f20ea47cea397f0d91827be181a001bdeba863256defd92aafd29bde59/comlipy-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f9618c9761ad6ca19134decd2670cfb", "sha256": "133e471db1787493f5c72e3404a2d5104a3176bd22e73faadbd559fe028033d6"}, "downloads": -1, "filename": "comlipy-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9f9618c9761ad6ca19134decd2670cfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32422, "upload_time": "2020-02-14T17:07:08", "upload_time_iso_8601": "2020-02-14T17:07:08.885778Z", "url": "https://files.pythonhosted.org/packages/6d/2b/34ea90fa473243357bc7e9c49909f0984b6295478e0f11b0992311c003eb/comlipy-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "889665cdff79b12f77b2a45c325025c9", "sha256": "b05f7ecb447f626478fe3cd4d9f99861c4161b8ca01caf576db9f6c546523634"}, "downloads": -1, "filename": "comlipy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "889665cdff79b12f77b2a45c325025c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18349, "upload_time": "2020-02-14T17:07:10", "upload_time_iso_8601": "2020-02-14T17:07:10.037904Z", "url": "https://files.pythonhosted.org/packages/62/58/24f20ea47cea397f0d91827be181a001bdeba863256defd92aafd29bde59/comlipy-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:25 2020"}