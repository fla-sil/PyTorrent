{"info": {"author": "Hai Vu", "author_email": "haivu2004@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "files_finder -- Find files recursively\r\n========================================\r\n\r\n\r\nIntroduction\r\n------------\r\n\r\nThis package implements the `FilesFinder` class to simplify finding files\r\nrecursively from a specified directory. This class is easier to use, yet more\r\npowerful than `os.walk`.\r\n\r\nExamples\r\n--------\r\n\r\nBelow is a few examples, for more ways to use `FilesFinder`, see the\r\nsamples directory.\r\n\r\nFind all files:\r\n\r\n    from files_finder import FilesFinder\r\n    for filename in FilesFinder('.'):\r\n        print(filename)\r\n\r\nExclude a single pattern:\r\n\r\n    from files_finder import FilesFinder, wildcard\r\n    for filename in FilesFinder('.', exclude=wildcard('*.bak')):\r\n        print(filename)\r\n\r\nExclude more than one patterns:\r\n\r\n    from files_finder import FilesFinder, wildcard\r\n    for filename in FilesFinder('.', exclude=wildcard('*.bak', '*~')):\r\n        print(filename)\r\n\r\nOnly include files that match some patterns:\r\n\r\n    from files_finder import FilesFinder, wildcard\r\n    for filename in FilesFinder('.', include=wildcard('*.csv', '*.xml')):\r\n        print(filename)\r\n\r\n\r\nFilesFinder Object\r\n------------------\r\n\r\n    FilesFinder(root, exclude=None, include=None, recurse=True)\r\n\r\nCreates a new `FilesFinder` object. The caller can loop\r\nthrough the object to gain access to all the files found in the\r\n`root` directory.  See the Examples section.\r\n\r\n`root` is a string representing the directory to search for files.\r\n\r\n`exclude` is a function which takes in a path and returns a boolean\r\nindicating if that path should be excluded from the results. The\r\ndefault is None which means do not exclude any file. Note that the\r\n`exclude` parameter has precedence over the `include` parameter.\r\n\r\n`include` is a function which takes in a path and returns a boolean\r\nindicating if that path should be included in the results.\r\n\r\n`recurse` is a boolean indicating if `FilesFinder` should\r\nsearch recursively. The default is True.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "OSI Approved\r\nBSD License", "maintainer": "Hai Vu", "maintainer_email": "haivu2004@gmail.com", "name": "files_finder", "package_url": "https://pypi.org/project/files_finder/", "platform": "", "project_url": "https://pypi.org/project/files_finder/", "project_urls": null, "release_url": "https://pypi.org/project/files_finder/1.0/", "requires_dist": null, "requires_python": null, "summary": "", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            files_finder -- Find files recursively\n<br>========================================\n<br>\n<br>\n<br>Introduction\n<br>------------\n<br>\n<br>This package implements the `FilesFinder` class to simplify finding files\n<br>recursively from a specified directory. This class is easier to use, yet more\n<br>powerful than `os.walk`.\n<br>\n<br>Examples\n<br>--------\n<br>\n<br>Below is a few examples, for more ways to use `FilesFinder`, see the\n<br>samples directory.\n<br>\n<br>Find all files:\n<br>\n<br>    from files_finder import FilesFinder\n<br>    for filename in FilesFinder('.'):\n<br>        print(filename)\n<br>\n<br>Exclude a single pattern:\n<br>\n<br>    from files_finder import FilesFinder, wildcard\n<br>    for filename in FilesFinder('.', exclude=wildcard('*.bak')):\n<br>        print(filename)\n<br>\n<br>Exclude more than one patterns:\n<br>\n<br>    from files_finder import FilesFinder, wildcard\n<br>    for filename in FilesFinder('.', exclude=wildcard('*.bak', '*~')):\n<br>        print(filename)\n<br>\n<br>Only include files that match some patterns:\n<br>\n<br>    from files_finder import FilesFinder, wildcard\n<br>    for filename in FilesFinder('.', include=wildcard('*.csv', '*.xml')):\n<br>        print(filename)\n<br>\n<br>\n<br>FilesFinder Object\n<br>------------------\n<br>\n<br>    FilesFinder(root, exclude=None, include=None, recurse=True)\n<br>\n<br>Creates a new `FilesFinder` object. The caller can loop\n<br>through the object to gain access to all the files found in the\n<br>`root` directory.  See the Examples section.\n<br>\n<br>`root` is a string representing the directory to search for files.\n<br>\n<br>`exclude` is a function which takes in a path and returns a boolean\n<br>indicating if that path should be excluded from the results. The\n<br>default is None which means do not exclude any file. Note that the\n<br>`exclude` parameter has precedence over the `include` parameter.\n<br>\n<br>`include` is a function which takes in a path and returns a boolean\n<br>indicating if that path should be included in the results.\n<br>\n<br>`recurse` is a boolean indicating if `FilesFinder` should\n<br>search recursively. The default is True.\n          </div>"}, "last_serial": 1522047, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 00:42:32 2020"}