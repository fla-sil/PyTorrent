{"info": {"author": "Benoit Da Mota", "author_email": "damota.benoit@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. -*- mode: rst -*-\n        \n        MEmPaMaL\n        ========\n        \n        Means for EMbarrassingly PArallel MAchine Learning.  \n        \n        *M\u00eame pas mal!* is a french exclamation standing for *Did not hurt!*.\n        So, if your computer cannot manage your machine learning load, just\n        respond MEmPaMaL and give it a try.\n        \n        MEmPaMaL is a Python module for some machine learning workflows built on top of\n        Scikit-learn and distributed under the 3-Clause BSD license.\n        \n        Purpose\n        -------\n        \n        MEmPaMaL is a set of python helpers to produce and run some \n        embarrassingly parallel machine learning workflows. The goal of\n        MEmPaMaL is to produce a list of commands and dependencies. We state\n        that today, commands and files are a very portable and effective\n        approach for quick and dirty data exploration or new algorithms\n        development. *If your workflow runs on your personal computer but takes\n        too many times, MEmPaMal can help you to scale out!*\n        \n        For the machine learning description it relies on the Scikit-learn [1]\n        design (pipelines, estimators with fit/predict, transformers with\n        fit/transform, etc.) and can accept estimators that respect the\n        Scikit-learn conventions. One possible back-end to execute the list of\n        commands and dependencies is Soma-Workflow [2]. This approach was\n        successfully applied to personal multicore computers, clusters (with\n        more than 2,000 cores) and cloud. To see more on the origins and\n        motivations of this project, you can read [3].\n        \n        So, what is this set of machine learning workflows and the restrictions?\n        \n        Restrictions \n        ------------ \n        \n        - **Suited for supervised learning**. For a given set of samples we\n          measure features, an array denoted X of shape (n_samples,\n          n_features), and targets, an array y of shape (n_samples,\n          n_targets). The goal is to construct a predictive model and to\n          measure its goodness of fit on unseen data (see examples for more\n          insight).\n        \n        - **Did you say Big Data?** MEmPaMaL don't care about this marketing\n          term, it just some scripts to help you distribute your computation\n          as seamlessly as possible. If your code and computing infrastructure\n          is able to perform *Big Data* analysis with simple files and\n          commands, it should work but it is NOT the purpose of MEmPaMaL.\n        \n        - **Need your knowledge**. You need do understand what you do. For\n          instance, most of the times multi-targets are inappropriate for a\n          given estimator. Knowing about your data is probably more important\n          than being able to compute many models.\n        \n        - **It's not magic!** You need the computing resources corresponding\n          to your load then MEmPaMaL can help you to scale out.\n        \n        - **It's really not magic!** If your algorithm is not efficient or\n          consume too many memory, MEmPaMaL will just help you to run it many\n          times in parallel. So, be careful of the snowball effect and if not\n          sure, try it at small scale first.\n        \n        - **It's definitely not magic!** Some codes are already parallel\n          (multiprocessing, OpenMP, etc.) and you need to understand the\n          implications and make choices. For instance, you can limit OpenMP to\n          one thread: ``export OMP_NUM_THREADS=1``. In some cases, you would\n          like to play with the limits of your system and for that you must\n          deeply understand the underlying technologies and the possibilities\n          of the execution back-end.\n        \n        Examples\n        --------\n        \n        A simple example:\n        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_first_example.ipynb\n        \n        An example with model selection:\n        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_second_example.ipynb\n        \n        An example with ParsimonY (another Python machine learing library):\n        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_third_example.ipynb\n        \n        An example with nested parallelism:\n        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_fourth_example.ipynb\n        \n        References\n        ----------\n        \n        [1] Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR\n        12, pp. 2825-2830, 2011. (http://scikit-learn.org)\n        \n        [2] Soma-workflow: a unified and simple interface to parallel\n        computing resources, S. Laguitton et al., in MICCAI Workshop on High\n        Performance and Distributed Computing for Medical Imaging,\n        2011. (http://neurospin.github.io/soma-workflow/)\n        \n        [3] Machine learning patterns for neuroimaging-genetic studies in the cloud,\n        B. Da Mota et al., in Frontiers in neuroinformatics, 2014.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BenoitDamota/mempamal", "keywords": null, "license": "BSD 3-clause", "maintainer": null, "maintainer_email": null, "name": "mempamal", "package_url": "https://pypi.org/project/mempamal/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mempamal/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/BenoitDamota/mempamal"}, "release_url": "https://pypi.org/project/mempamal/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "MEMPAMAL: Means for EMbarrassingly PArallel MAchine Learning", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. -*- mode: rst -*-<br>        <br>        MEmPaMaL<br>        ========<br>        <br>        Means for EMbarrassingly PArallel MAchine Learning.  <br>        <br>        *M\u00eame pas mal!* is a french exclamation standing for *Did not hurt!*.<br>        So, if your computer cannot manage your machine learning load, just<br>        respond MEmPaMaL and give it a try.<br>        <br>        MEmPaMaL is a Python module for some machine learning workflows built on top of<br>        Scikit-learn and distributed under the 3-Clause BSD license.<br>        <br>        Purpose<br>        -------<br>        <br>        MEmPaMaL is a set of python helpers to produce and run some <br>        embarrassingly parallel machine learning workflows. The goal of<br>        MEmPaMaL is to produce a list of commands and dependencies. We state<br>        that today, commands and files are a very portable and effective<br>        approach for quick and dirty data exploration or new algorithms<br>        development. *If your workflow runs on your personal computer but takes<br>        too many times, MEmPaMal can help you to scale out!*<br>        <br>        For the machine learning description it relies on the Scikit-learn [1]<br>        design (pipelines, estimators with fit/predict, transformers with<br>        fit/transform, etc.) and can accept estimators that respect the<br>        Scikit-learn conventions. One possible back-end to execute the list of<br>        commands and dependencies is Soma-Workflow [2]. This approach was<br>        successfully applied to personal multicore computers, clusters (with<br>        more than 2,000 cores) and cloud. To see more on the origins and<br>        motivations of this project, you can read [3].<br>        <br>        So, what is this set of machine learning workflows and the restrictions?<br>        <br>        Restrictions <br>        ------------ <br>        <br>        - **Suited for supervised learning**. For a given set of samples we<br>          measure features, an array denoted X of shape (n_samples,<br>          n_features), and targets, an array y of shape (n_samples,<br>          n_targets). The goal is to construct a predictive model and to<br>          measure its goodness of fit on unseen data (see examples for more<br>          insight).<br>        <br>        - **Did you say Big Data?** MEmPaMaL don't care about this marketing<br>          term, it just some scripts to help you distribute your computation<br>          as seamlessly as possible. If your code and computing infrastructure<br>          is able to perform *Big Data* analysis with simple files and<br>          commands, it should work but it is NOT the purpose of MEmPaMaL.<br>        <br>        - **Need your knowledge**. You need do understand what you do. For<br>          instance, most of the times multi-targets are inappropriate for a<br>          given estimator. Knowing about your data is probably more important<br>          than being able to compute many models.<br>        <br>        - **It's not magic!** You need the computing resources corresponding<br>          to your load then MEmPaMaL can help you to scale out.<br>        <br>        - **It's really not magic!** If your algorithm is not efficient or<br>          consume too many memory, MEmPaMaL will just help you to run it many<br>          times in parallel. So, be careful of the snowball effect and if not<br>          sure, try it at small scale first.<br>        <br>        - **It's definitely not magic!** Some codes are already parallel<br>          (multiprocessing, OpenMP, etc.) and you need to understand the<br>          implications and make choices. For instance, you can limit OpenMP to<br>          one thread: ``export OMP_NUM_THREADS=1``. In some cases, you would<br>          like to play with the limits of your system and for that you must<br>          deeply understand the underlying technologies and the possibilities<br>          of the execution back-end.<br>        <br>        Examples<br>        --------<br>        <br>        A simple example:<br>        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_first_example.ipynb<br>        <br>        An example with model selection:<br>        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_second_example.ipynb<br>        <br>        An example with ParsimonY (another Python machine learing library):<br>        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_third_example.ipynb<br>        <br>        An example with nested parallelism:<br>        http://nbviewer.ipython.org/github/BenoitDamota/mempamal/blob/master/mempamal/examples/MEmPaMaL_fourth_example.ipynb<br>        <br>        References<br>        ----------<br>        <br>        [1] Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR<br>        12, pp. 2825-2830, 2011. (http://scikit-learn.org)<br>        <br>        [2] Soma-workflow: a unified and simple interface to parallel<br>        computing resources, S. Laguitton et al., in MICCAI Workshop on High<br>        Performance and Distributed Computing for Medical Imaging,<br>        2011. (http://neurospin.github.io/soma-workflow/)<br>        <br>        [3] Machine learning patterns for neuroimaging-genetic studies in the cloud,<br>        B. Da Mota et al., in Frontiers in neuroinformatics, 2014.\n          </div>"}, "last_serial": 1183909, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e7d8beac2f6e16d91e48bc04b8151a1f", "sha256": "1f33902cd02bc8c2b187c1d21ea8eff5f3f639f2f1a55fa134f19d421cdb1b43"}, "downloads": -1, "filename": "mempamal-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e7d8beac2f6e16d91e48bc04b8151a1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9217, "upload_time": "2014-08-01T09:08:52", "upload_time_iso_8601": "2014-08-01T09:08:52.418203Z", "url": "https://files.pythonhosted.org/packages/1c/e9/71adbe89a1a8280ba5197cc97132f61a009220174119414facb53a26be89/mempamal-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8029f04e16c2f87851716fc4761f3fdb", "sha256": "c97d50b2ea1c24f23c2455a9f37d5eade460ef28bc5eba8f0d1122b97c54b335"}, "downloads": -1, "filename": "mempamal-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8029f04e16c2f87851716fc4761f3fdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15043, "upload_time": "2014-08-04T09:31:56", "upload_time_iso_8601": "2014-08-04T09:31:56.125563Z", "url": "https://files.pythonhosted.org/packages/a2/b2/b9bd684e9bc9139f7380827285c51c386e557b6c4a2e397c4d28e9e51985/mempamal-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "408a46f877ad769698eae21d18d3ca3f", "sha256": "6ce09e66891e60adba9df95c41fcb396dda9298c612a08165e01b1734becd1a7"}, "downloads": -1, "filename": "mempamal-0.1.2.tar.gz", "has_sig": false, "md5_digest": "408a46f877ad769698eae21d18d3ca3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15532, "upload_time": "2014-08-04T15:22:19", "upload_time_iso_8601": "2014-08-04T15:22:19.185901Z", "url": "https://files.pythonhosted.org/packages/65/e7/6fb57bee830e977193b45c581c524cf0f82220499891c5ca0c41760022ff/mempamal-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e53ba1951e3d969002db21a998f81e09", "sha256": "60c1b3b28bf2db77a10d0685cf5551c05114c95cc8a0714064e4c50d7590b3a6"}, "downloads": -1, "filename": "mempamal-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e53ba1951e3d969002db21a998f81e09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17654, "upload_time": "2014-08-04T15:39:07", "upload_time_iso_8601": "2014-08-04T15:39:07.030581Z", "url": "https://files.pythonhosted.org/packages/cc/87/fe145430ce14e52ad19055224fe5f5f6470b505985772f5bb3bfa79389f5/mempamal-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "79f01ec3dd52ed78c553e618c90b6008", "sha256": "3ce94f07728a51ca87139c65caa7b0717a2b58818d00b98825d85d4112c884d9"}, "downloads": -1, "filename": "mempamal-0.1.4.tar.gz", "has_sig": false, "md5_digest": "79f01ec3dd52ed78c553e618c90b6008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18905, "upload_time": "2014-08-06T15:18:06", "upload_time_iso_8601": "2014-08-06T15:18:06.985577Z", "url": "https://files.pythonhosted.org/packages/18/6e/88cd10666509729d8f7c5a864dac60bcfbc8bbc2fc673f6e17ce27ab482e/mempamal-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d65110d84665c89938f8f89e8e3550b4", "sha256": "bea098a8eaa3eff50e40c704d5c10c5d75578340ac8187cfe7ed48f8f4f22c53"}, "downloads": -1, "filename": "mempamal-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d65110d84665c89938f8f89e8e3550b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20233, "upload_time": "2014-08-08T11:58:47", "upload_time_iso_8601": "2014-08-08T11:58:47.751630Z", "url": "https://files.pythonhosted.org/packages/a3/6e/fcd1a4975ffcbfb56497c46dfc16a325878dc18b4a472425328fd5aeebc3/mempamal-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d65110d84665c89938f8f89e8e3550b4", "sha256": "bea098a8eaa3eff50e40c704d5c10c5d75578340ac8187cfe7ed48f8f4f22c53"}, "downloads": -1, "filename": "mempamal-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d65110d84665c89938f8f89e8e3550b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20233, "upload_time": "2014-08-08T11:58:47", "upload_time_iso_8601": "2014-08-08T11:58:47.751630Z", "url": "https://files.pythonhosted.org/packages/a3/6e/fcd1a4975ffcbfb56497c46dfc16a325878dc18b4a472425328fd5aeebc3/mempamal-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:18 2020"}