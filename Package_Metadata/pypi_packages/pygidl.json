{"info": {"author": "Cameron Carpenter", "author_email": "parameter.concern@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Python Google Images Downloader\n\nThis tool lets you download results from Google Images pretty fast. It uses\n[aiohttp](https://docs.aiohttp.org/en/stable/) under the hood. It is essentially\na Python 3.7 rewrite of\n[google-images-downloader](https://github.com/hardikvasa/google-images-download)\nwithout the restriction of not using external dependencies.\n\n## Installation\n\nThe following should work to install the utility and check that it will run:\n\n```bash\npip install pygidl\npygidl -h\n```\n\n## Basic Usage\n\nFrom the command line:\n\nbasic usage is something like `pygidl \"cats and dogs\"`. This will create an\noutput directory in your current working directory named for the timestamp that\nthe command was run. Underneath that directory will be another directory with\nthe slugified version of your query string. Underneath that directory will be\nthe downloaded images, named by their sha256 hashes and file type extensions:\n\n```bash\npygidl \"cats and dogs\"\ntree .\n.\n\u2514\u2500\u2500 2020-01-21-17-57-34\n    \u2514\u2500\u2500 cats-and-dogs\n        \u251c\u2500\u2500 01d2dde343a45e3a1fcc5e7cd3cace33398c9b06a97e494d4329f264e57d5f57.jpg\n        \u251c\u2500\u2500 026cef34db26cbd5fa246bc720c1234b39ffa07737e43523b160390c13d5d3e6.jpeg\n        \u251c\u2500\u2500 03a0f2ebeed5d91acaed73ad303bd724767e101688e33d1a5557cca9139972d7.webp\n        \u251c\u2500\u2500 0affcf3198b40063e9302c4515380d6796946098c7c1c3c043072815e29e2770.jpeg\n        ...\n```\n\n\n## Advanced Usage\n\nThe command can be configured to support several more complex query scenarios:\n\n### Verbose Output\n\nUse the `-v/--verbose` flag to change the log level to show more messages. The\nlog level is \"WARNING\" by default. Supplying `-v` once sets it to \"INFO\", and\ntwo or more times sets it to \"DEBUG\".\n\n### Prefixes and Suffixes\n\nThe `-p/--prefix` and `-s/--suffix` flags can be used to run multiple copies of\nthe same Google Images query with extra prefix or suffix strings. For example:\n\n```bash\npygidl -p Andorra -p Angola -s \"on a ship\" -s \"on a plane\" flag\ntree -d .\n.\n\u2514\u2500\u2500 2020-01-21-18-15-59\n    \u251c\u2500\u2500 andorra-flag-on-a-plane\n    \u251c\u2500\u2500 andorra-flag-on-a-ship\n    \u251c\u2500\u2500 angola-flag-on-a-plane\n    \u2514\u2500\u2500 angola-flag-on-a-ship\n\n5 directories\n```\n\n### Output Groups\n\nYou can override the name of the directory that contains the results of each\nquery with the `-g/--group` flag. For example:\n\n\n```bash\npygidl -g \"Cute Animals\" -p fluffy -p adorable -s dog -s cat \"\" -v\ntree . -d\n.\n\u2514\u2500\u2500 cute-animals\n    \u251c\u2500\u2500 adorable-cat\n    \u251c\u2500\u2500 adorable-dog\n    \u251c\u2500\u2500 fluffy-cat\n    \u2514\u2500\u2500 fluffy-dog\n\n5 directories\n```\n\n### Face Search\n\nYou can tell Google Images to find faces with the `-f/--face` flag. For example:\n\n```bash\npygidl -g \"Tom Hanks\" -p \"\" -p young \"Tom Hanks\" -s \"\" -s \"Oscars\" -f -v\ntree -d .\n.\n\u2514\u2500\u2500 tom-hanks\n    \u251c\u2500\u2500 tom-hanks\n    \u251c\u2500\u2500 tom-hanks-oscars\n    \u251c\u2500\u2500 young-tom-hanks\n    \u2514\u2500\u2500 young-tom-hanks-oscars\n\n5 directories\n```\n\n## Programmatic Usage\n\nSomething like the following should work (assuming you have `opencv-python`\ninstalled in your environment):\n\n```python\nimport asyncio\nimport os\n\nimport cv2\n\nfrom pygidl import scrape_google_images\n\n\ndownloaded_image_paths = asyncio.run(\n    scrape_google_images(\n        base_query=\"cats and dogs\",\n        prefixes=[\"cute\", \"adorable\"],\n        suffixes=[\"playing\", \"running\"],\n        group=\"cute-animals\",\n        output_dir=os.getcwd(),\n        face=False,\n    )\n)\nfor path in downloaded_image_paths:\n    image = cv2.imread(path)\n    if image is None:\n        print(f\"could not load image {path}\")\n        continue\n    height, width = image.shape[:2]\n    print(f\"image {path} has size {width}x{height}\")\n```\n\n## Known Issues and Limitations\n\n- Only returns max of 100 results per query\n- Doesn't support full range of advanced search options\n- No tests\n- No retries\n- No report on results/metadata output option\n- Sometimes Google returns results from a different template without\n  easily-parseable metadata\n\n\n## Contributing\n\nI don't think anyone will ever get this far, but if you want to open a pull\nrequest (or even better, take over ownership of the project for me!), go for it.\nAt a minimum, new code should have type hints, docstrings, and be auto-formatted\nwith `black` with an 80-character max line length. Even better would be some\ntests and Sphinx documentation!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/parameter-concern/pygidl/releases/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/parameter-concern/pygidl", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pygidl", "package_url": "https://pypi.org/project/pygidl/", "platform": "", "project_url": "https://pypi.org/project/pygidl/", "project_urls": {"Bug Tracker": "https://github.com/parameter-concern/pygidl/issues/", "Download": "https://github.com/parameter-concern/pygidl/releases/", "Homepage": "https://github.com/parameter-concern/pygidl", "Source Code": "https://github.com/parameter-concern/pygidl/"}, "release_url": "https://pypi.org/project/pygidl/0.0.2/", "requires_dist": ["aiohttp[speedups]", "beautifulsoup4", "python-slugify[unidecode]", "tqdm"], "requires_python": ">=3.7", "summary": "Asynchronously download Google Images search results", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Google Images Downloader</h1>\n<p>This tool lets you download results from Google Images pretty fast. It uses\n<a href=\"https://docs.aiohttp.org/en/stable/\" rel=\"nofollow\">aiohttp</a> under the hood. It is essentially\na Python 3.7 rewrite of\n<a href=\"https://github.com/hardikvasa/google-images-download\" rel=\"nofollow\">google-images-downloader</a>\nwithout the restriction of not using external dependencies.</p>\n<h2>Installation</h2>\n<p>The following should work to install the utility and check that it will run:</p>\n<pre>pip install pygidl\npygidl -h\n</pre>\n<h2>Basic Usage</h2>\n<p>From the command line:</p>\n<p>basic usage is something like <code>pygidl \"cats and dogs\"</code>. This will create an\noutput directory in your current working directory named for the timestamp that\nthe command was run. Underneath that directory will be another directory with\nthe slugified version of your query string. Underneath that directory will be\nthe downloaded images, named by their sha256 hashes and file type extensions:</p>\n<pre>pygidl <span class=\"s2\">\"cats and dogs\"</span>\ntree .\n.\n\u2514\u2500\u2500 <span class=\"m\">2020</span>-01-21-17-57-34\n    \u2514\u2500\u2500 cats-and-dogs\n        \u251c\u2500\u2500 01d2dde343a45e3a1fcc5e7cd3cace33398c9b06a97e494d4329f264e57d5f57.jpg\n        \u251c\u2500\u2500 026cef34db26cbd5fa246bc720c1234b39ffa07737e43523b160390c13d5d3e6.jpeg\n        \u251c\u2500\u2500 03a0f2ebeed5d91acaed73ad303bd724767e101688e33d1a5557cca9139972d7.webp\n        \u251c\u2500\u2500 0affcf3198b40063e9302c4515380d6796946098c7c1c3c043072815e29e2770.jpeg\n        ...\n</pre>\n<h2>Advanced Usage</h2>\n<p>The command can be configured to support several more complex query scenarios:</p>\n<h3>Verbose Output</h3>\n<p>Use the <code>-v/--verbose</code> flag to change the log level to show more messages. The\nlog level is \"WARNING\" by default. Supplying <code>-v</code> once sets it to \"INFO\", and\ntwo or more times sets it to \"DEBUG\".</p>\n<h3>Prefixes and Suffixes</h3>\n<p>The <code>-p/--prefix</code> and <code>-s/--suffix</code> flags can be used to run multiple copies of\nthe same Google Images query with extra prefix or suffix strings. For example:</p>\n<pre>pygidl -p Andorra -p Angola -s <span class=\"s2\">\"on a ship\"</span> -s <span class=\"s2\">\"on a plane\"</span> flag\ntree -d .\n.\n\u2514\u2500\u2500 <span class=\"m\">2020</span>-01-21-18-15-59\n    \u251c\u2500\u2500 andorra-flag-on-a-plane\n    \u251c\u2500\u2500 andorra-flag-on-a-ship\n    \u251c\u2500\u2500 angola-flag-on-a-plane\n    \u2514\u2500\u2500 angola-flag-on-a-ship\n\n<span class=\"m\">5</span> directories\n</pre>\n<h3>Output Groups</h3>\n<p>You can override the name of the directory that contains the results of each\nquery with the <code>-g/--group</code> flag. For example:</p>\n<pre>pygidl -g <span class=\"s2\">\"Cute Animals\"</span> -p fluffy -p adorable -s dog -s cat <span class=\"s2\">\"\"</span> -v\ntree . -d\n.\n\u2514\u2500\u2500 cute-animals\n    \u251c\u2500\u2500 adorable-cat\n    \u251c\u2500\u2500 adorable-dog\n    \u251c\u2500\u2500 fluffy-cat\n    \u2514\u2500\u2500 fluffy-dog\n\n<span class=\"m\">5</span> directories\n</pre>\n<h3>Face Search</h3>\n<p>You can tell Google Images to find faces with the <code>-f/--face</code> flag. For example:</p>\n<pre>pygidl -g <span class=\"s2\">\"Tom Hanks\"</span> -p <span class=\"s2\">\"\"</span> -p young <span class=\"s2\">\"Tom Hanks\"</span> -s <span class=\"s2\">\"\"</span> -s <span class=\"s2\">\"Oscars\"</span> -f -v\ntree -d .\n.\n\u2514\u2500\u2500 tom-hanks\n    \u251c\u2500\u2500 tom-hanks\n    \u251c\u2500\u2500 tom-hanks-oscars\n    \u251c\u2500\u2500 young-tom-hanks\n    \u2514\u2500\u2500 young-tom-hanks-oscars\n\n<span class=\"m\">5</span> directories\n</pre>\n<h2>Programmatic Usage</h2>\n<p>Something like the following should work (assuming you have <code>opencv-python</code>\ninstalled in your environment):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pygidl</span> <span class=\"kn\">import</span> <span class=\"n\">scrape_google_images</span>\n\n\n<span class=\"n\">downloaded_image_paths</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">scrape_google_images</span><span class=\"p\">(</span>\n        <span class=\"n\">base_query</span><span class=\"o\">=</span><span class=\"s2\">\"cats and dogs\"</span><span class=\"p\">,</span>\n        <span class=\"n\">prefixes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"cute\"</span><span class=\"p\">,</span> <span class=\"s2\">\"adorable\"</span><span class=\"p\">],</span>\n        <span class=\"n\">suffixes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"playing\"</span><span class=\"p\">,</span> <span class=\"s2\">\"running\"</span><span class=\"p\">],</span>\n        <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"s2\">\"cute-animals\"</span><span class=\"p\">,</span>\n        <span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">(),</span>\n        <span class=\"n\">face</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">downloaded_image_paths</span><span class=\"p\">:</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">image</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"could not load image </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"k\">continue</span>\n    <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"image </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> has size </span><span class=\"si\">{</span><span class=\"n\">width</span><span class=\"si\">}</span><span class=\"s2\">x</span><span class=\"si\">{</span><span class=\"n\">height</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Known Issues and Limitations</h2>\n<ul>\n<li>Only returns max of 100 results per query</li>\n<li>Doesn't support full range of advanced search options</li>\n<li>No tests</li>\n<li>No retries</li>\n<li>No report on results/metadata output option</li>\n<li>Sometimes Google returns results from a different template without\neasily-parseable metadata</li>\n</ul>\n<h2>Contributing</h2>\n<p>I don't think anyone will ever get this far, but if you want to open a pull\nrequest (or even better, take over ownership of the project for me!), go for it.\nAt a minimum, new code should have type hints, docstrings, and be auto-formatted\nwith <code>black</code> with an 80-character max line length. Even better would be some\ntests and Sphinx documentation!</p>\n\n          </div>"}, "last_serial": 6595945, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a87629bc163c6d4e06271d9d309237b6", "sha256": "69d65db5c635d2322060a810dcb54bb1f74fd20d3c909dff8afee01eff9465c1"}, "downloads": -1, "filename": "pygidl-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a87629bc163c6d4e06271d9d309237b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11008, "upload_time": "2020-01-22T23:16:46", "upload_time_iso_8601": "2020-01-22T23:16:46.196382Z", "url": "https://files.pythonhosted.org/packages/5e/8b/40ad4840eae981dd1aea5eb6eea258f7bee0fc29077edf40150910f1cfa1/pygidl-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4efd4342ecce4872ae779cac730fb2df", "sha256": "ce78ef929a6b49ce03e1c3616efada94a96fa35952e3aa1dba48027c34590190"}, "downloads": -1, "filename": "pygidl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4efd4342ecce4872ae779cac730fb2df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10622, "upload_time": "2020-01-22T23:16:48", "upload_time_iso_8601": "2020-01-22T23:16:48.556743Z", "url": "https://files.pythonhosted.org/packages/08/ba/53f0e92edd4cc921a269a591f40599447b041bb9d5204f2745d36e33132f/pygidl-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4f333def053aabb8420f65f03f8e6b3c", "sha256": "ccec6f1eeea507994a795e4d7528ca09d50777effb51f39ab145a4f7b080fc19"}, "downloads": -1, "filename": "pygidl-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4f333def053aabb8420f65f03f8e6b3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11418, "upload_time": "2020-02-09T00:48:13", "upload_time_iso_8601": "2020-02-09T00:48:13.254709Z", "url": "https://files.pythonhosted.org/packages/26/99/02a6251af4657231dbd8c68c0d2d9e5a41dfb9301c8396e7dfe9af88e066/pygidl-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3591e470d7b11a410f1fee9b9ee2d715", "sha256": "189f381812afecdefdcf80d2681f6ed6537b4d7ec573f6a135cacb8405e186b2"}, "downloads": -1, "filename": "pygidl-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3591e470d7b11a410f1fee9b9ee2d715", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11898, "upload_time": "2020-02-09T00:48:15", "upload_time_iso_8601": "2020-02-09T00:48:15.318001Z", "url": "https://files.pythonhosted.org/packages/9e/5b/cb570af29d4164a3f07f3d168afac1aefc6d15f8fb3af7983e104feb16ef/pygidl-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f333def053aabb8420f65f03f8e6b3c", "sha256": "ccec6f1eeea507994a795e4d7528ca09d50777effb51f39ab145a4f7b080fc19"}, "downloads": -1, "filename": "pygidl-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4f333def053aabb8420f65f03f8e6b3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11418, "upload_time": "2020-02-09T00:48:13", "upload_time_iso_8601": "2020-02-09T00:48:13.254709Z", "url": "https://files.pythonhosted.org/packages/26/99/02a6251af4657231dbd8c68c0d2d9e5a41dfb9301c8396e7dfe9af88e066/pygidl-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3591e470d7b11a410f1fee9b9ee2d715", "sha256": "189f381812afecdefdcf80d2681f6ed6537b4d7ec573f6a135cacb8405e186b2"}, "downloads": -1, "filename": "pygidl-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3591e470d7b11a410f1fee9b9ee2d715", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 11898, "upload_time": "2020-02-09T00:48:15", "upload_time_iso_8601": "2020-02-09T00:48:15.318001Z", "url": "https://files.pythonhosted.org/packages/9e/5b/cb570af29d4164a3f07f3d168afac1aefc6d15f8fb3af7983e104feb16ef/pygidl-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:01 2020"}