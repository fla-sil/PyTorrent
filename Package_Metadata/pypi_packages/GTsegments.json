{"info": {"author": "Philippe Bordron", "author_email": "philippe.bordron+GTsegments@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Genomic & Transcriptomic segments (GTsegments)\n==============================================\n\nThis program is designed to work with\n``python 2.7``, ``python 3.2+`` and ``pypy``. It will install the following libraries:\n\n- `Biopython <https://pypi.python.org/pypi/biopython/>`_\n- `NetworkX <https://pypi.python.org/pypi/networkx/>`_\n- `numpy <https://pypi.python.org/pypi/numpy>`_ (``pypy`` users, please follow the `numpypy install process <http://pypy.org/download.html#installing-numpy>`_)\n- `UFx <https://pypi.python.org/pypi/UFx>`_\n\nIn addition, you can install the following library in order to display a nice progress bar and a computation time estimation:\n\n- `progressbar2 <https://pypi.python.org/pypi/progressbar2>`_\n\n\nQuick install\n-------------\n.. code-block::\n\n    pip install GTsegments\n\nParameters\n----------\n.. code-block::\n\n    usage: gts.py [-h] [--genome_type {gbk,tsv,seq}] [--graph_type {gexf,list}]\n                  [-min INT] [-max INT] [-d THRESHOLD] [--no_filter] [-o FILE]\n                  [-no_dom] [-m | --no_gene_list | --sgs_like_headers] [-q]\n                  COEXP_GRAPH [GENOME [GENOME ...]]\n\n    Compute the list of GTsegments from a genome and a coexpression network.\n\n    example:\n    gts.py -min 2 -max 50 -d 0.6 coexp_graph.gexf genome.gbk\n\n    positional arguments:\n      COEXP_GRAPH           Coexpression graph\n      GENOME                genome file(s) containing genomic organization of\n                            chromosomes\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -q, --quiet           Quiet mode: display only critical errors\n\n    File type:\n      --genome_type {gbk,tsv,seq}\n                            Type of the genome file(s) (default: gbk)\n      --graph_type {gexf,list}\n                            Type of the coexpression graph file (default: gexf)\n\n    GTsegments size:\n      -min INT, --min_size INT\n                            Minimum length of a GTsegment (default: 2)\n      -max INT, --max_size INT\n                            Maximum length of a GTsegment (default: maximum\n                            possible)\n\n    Density option:\n      -d THRESHOLD, --density THRESHOLD\n                            Select GTsegments with a genomic density \u2265 THRESHOLD\n                            in ]0,1] (default: 0.6)\n      --no_filter           Do not apply density filtering\n\n    Output options:\n      -o FILE, --output FILE\n                            Output file name\n      -no_dom, --no_domination\n                            Keep all the GTsegments instead of the dominant ones\n      -m, --matrix          Output the density matrix instead of the listing of\n                            GTsegments\n      --no_gene_list        Do not add the gene list column in the listing of\n                            GTsegments\n      --sgs_like_headers    Produce a listing of GTsegments with headers from\n                            listing of SGS\n\nInputs\n------\n\nThe program ``gty.py`` asks two types of data: an unweighted coexpression network and some genome files describing the genomic organisation of one or many oragnisms. Missing genes and unmatched genes in the coexpression graph are allowed.\n\n\nCoexpression graph\n++++++++++++++++++\n\nThe program ``gty.py`` accepts coexpression files under the ``.gexf`` file format or text file containing a listing of nodes and vertices.\n\nThe ``.gexf`` format\n::::::::::::::::::::\n\nWhen using the ``.gexf`` format (option ``graph_type gexf``), the string in the  field `label` of each node is considered as the id of the gene associated to its node.\n\nThe listing format\n::::::::::::::::::\n\nThe listing format (option ``graph_type list``) is quite simple. It is a list of nodes (optional) and edges describing the coexpression network. Only one node or edge is allowed per line. Nodes are gene ids and edges are couple of nodes separated by a blank character (tabulation, space, etc.)\n\nComments are allowed by using # at the begining of a line. Using # elsewhere won't be a considered as a comment.\n\nExample\n,,,,,,,\n\nThe following file ``graph.txt`` is a list of nodes and edges. It will be used as support later in this documentation.\n\n.. code-block::\n\n    # a line that begins with # is a comment (but # elsewhere won't be a considered as a comment)\n    0\n    1\n    # nodes are not mandatory but can exist in the graph file\n    2       4\n    4       5\n    7       8\n    6       9\n    6       10\n    9       10\n    12      16\n    14      15\n    14      16\n    14      18\n    11      17\n    17      23\n    25      1\n    # The node 26 does not exist in the genome (commented) and will ignored\n    25      26\n\n\nGenome\n++++++\n\nThe program ``gty.py`` accepts genome files under the GenBank file format (``--genome_type gbk``), files listing the genomic informations (``--genome_type tsv``) or simply text files giving each the sequence of genes of a chromome (``--genome_type seq``).\n\nThe GenBank format\n::::::::::::::::::::\n\nThe program ``gty.py`` can use `GenBank <http://www.insdc.org/documents/feature_table.html>`_ files as input under the following restriction:\n\n(1) considered genes are only ``CDS`` features, and\n(2) each ``CDS`` must have a field ``locus_tag`` which will be the gene id.\n\nThe ``.tsv`` format\n::::::::::::::::::::\n\nAs an alternative of Genbank files that are not always easy to manipulate, ``gty.py`` can use a ``.tsv`` file as a description of one or many genome. The ``.tsv`` file must be formatted such that the first line contains the names of the columns (i.e. the header) and the next lines must describe a gene each.\n\nThe header must contains the at least the following columns names:\n\n.. code-block::\n\n    chromosome_id       gene_id left_end_position       right_end_position\n\nwhere:\n\n- ``chromosome_id`` is the id of the chromosome in wich the gene exists,\n- ``gene_id`` is the id of the gene,\n- ``left_end_position`` is the left end position of the gene (in number of nucleotides) when reading the main strand,\n- ``right_end_position`` is the right end position of the gene (in number of nucleotides) when reading the main strand.\n\n\n\n\nThe sequence format\n::::::::::::::::::::\n\nThe sequence format is simply a text file with a gene id per line such as the genes are sorted by their ascending position in the chromosome. if multiple chromosomes exist a file per chromosome is required.\n\n\nExample\n,,,,,,,\n\nIn the following documentation, we will use the following ``seq.txt`` file as genome example data.\n\n.. code-block::\n\n    # a line that begins with # is a comment (but # elsewhere won't be a considered as a comment)\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n    11\n    12\n    13\n    14\n    15\n    16\n    17\n    18\n    19\n    20\n    21\n    22\n    23\n    24\n    25\n    #26 <- this gene will be ignored because of the comment\n\n\n\n\nOutputs\n-------\n\nDefault output\n++++++++++++++\n\nBy default, ``gts.py`` outputs a ``.tsv`` formated text. It can be write into by using the ``> output_file`` redirection or the the ``-o``/``--output`` option.\n\nThe first line of the output of ``gts.py`` contains the name of each columns and is called header. Following lines are the data where each line is a GTsegments. Each gtsegment is unique and appears once in the listing.\n\nThe names of the columns in header are the following:\n\n.. code-block::\n\n    chromosome  start   end     length  active_genes    density list_of_active_genes\n\n- ``chromosome`` contains the id of the chromosome in which the GTsegment appears. When the inputed gemone files are sequence files (i.e. ``--genome_type seq``), the chromosome id is then the filename.\n- ``start`` contains the position of the first gene (i.e. the starting gene) of the GTsegment. The position of a gene is the index of this gene (i.e. the i:sup:`th` gene has the index i)\n- ``end`` contains the position of the last gene (i.e. the ending gene) of a GTsegment.\n- ``length`` contains the length of the GTsegment which the number of genes that are in the GTsegment (``end`` - ``start`` + 1 modulo the number of genes into the chromosome).\n- ``active_genes`` column contains the number of genes of the GTsegment that are coexpressed with the starting and ending genes.\n- ``density`` column contains the the genomic density of a GTsegment which is the ratio between ``active_genes`` and ``length``.\n- ``list_of_active_genes`` column contains the listing of active genes of the GTsegment (i.e. genes in the GTsegment that are coexpressed with the starting and ending genes). This column can be disabled with the ``--no_gene_list`` option, which can be usefull when querying large GTsegments (see the parameter ``-max``/``--max_size``)\n\nExample\n:::::::\n\nThe following command ...\n\n.. code-block::\n\n    gts.py graph.txt seq.txt --graph_type list --genome_type seq\n\nwill produce the following output:\n\n.. code-block::\n\n    chromosome  start   end     length  active_genes    density list_of_active_genes\n    seq.txt     2       5       4       3       0.75    2 4 5\n    seq.txt     4       5       2       2       1.0     4 5\n    seq.txt     6       10      5       3       0.6     6 9 10\n    seq.txt     7       8       2       2       1.0     7 8\n    seq.txt     9       10      2       2       1.0     9 10\n    seq.txt     12      16      5       4       0.8     12 14 15 16\n    seq.txt     12      18      7       5       0.714285714286  12 14 15 16 18\n    seq.txt     14      16      3       3       1.0     14 15 16\n    seq.txt     14      18      5       4       0.8     14 15 16 18\n    seq.txt     25      1       2       2       1.0     25 1\n\n\nSGS like output\n+++++++++++++++\n\nThe option ``--sgs_like_headers`` allows to produce listing of GTsegments that is compatible the outputs produced by `sgs-utils <https://pypi.python.org/pypi/sgs-utils/>`_.\n\nMatrix output\n+++++++++++++\n\nWhen the option matrix is choosen, the output won't be the previous listing, but a concatenation of density matrices in `.csv` format where cells are separated by `;`. The indexes of lines and columns are the position of the genes on the chromosomes (i.e. the i:sup:`th` gene of a chromosome has the index i in the line and the column of the corresponding matrix). As density matrices are square matrices that appear in the same order than the chromosomes given as inputs, separate distinct matrices is possible.\n\n\nExample\n:::::::\n\nThe example with the matrix option...\n\n.. code-block::\n\n    gts.py graph.txt seq.txt --graph_type list --genome_type seq --matrix\n\nwill produce the following output:\n\n.. code-block::\n\n    1.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.750000;0.000000;0.000000;0.000000\n    0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.000000;1.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.666667;0.000000;0.000000;1.000000;0.000000;1.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;1.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000\n    0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000\n\n\n\nAcknowledgement\n---------------\n\nThis work was supported by grants Fondap 15090007, Basal program PFB-03 CMM, IntegrativeBioChile INRIA Assoc. Team and CIRIC-INRIA Chile (line Natural Resources).", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "bioinformatics Genome Genomic Transcriptome Trancriptomic GTsegments", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "GTsegments", "package_url": "https://pypi.org/project/GTsegments/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/GTsegments/", "project_urls": {"Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/GTsegments/0.22/", "requires_dist": null, "requires_python": null, "summary": "Compute Genomic & Transcriptomic segments", "version": "0.22", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This program is designed to work with\n<tt>python 2.7</tt>, <tt>python 3.2+</tt> and <tt>pypy</tt>. It will install the following libraries:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/biopython/\" rel=\"nofollow\">Biopython</a></li>\n<li><a href=\"https://pypi.python.org/pypi/networkx/\" rel=\"nofollow\">NetworkX</a></li>\n<li><a href=\"https://pypi.python.org/pypi/numpy\" rel=\"nofollow\">numpy</a> (<tt>pypy</tt> users, please follow the <a href=\"http://pypy.org/download.html#installing-numpy\" rel=\"nofollow\">numpypy install process</a>)</li>\n<li><a href=\"https://pypi.python.org/pypi/UFx\" rel=\"nofollow\">UFx</a></li>\n</ul>\n<p>In addition, you can install the following library in order to display a nice progress bar and a computation time estimation:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/progressbar2\" rel=\"nofollow\">progressbar2</a></li>\n</ul>\n<div id=\"quick-install\">\n<h2>Quick install</h2>\n<pre>pip install GTsegments\n</pre>\n</div>\n<div id=\"parameters\">\n<h2>Parameters</h2>\n<pre>usage: gts.py [-h] [--genome_type {gbk,tsv,seq}] [--graph_type {gexf,list}]\n              [-min INT] [-max INT] [-d THRESHOLD] [--no_filter] [-o FILE]\n              [-no_dom] [-m | --no_gene_list | --sgs_like_headers] [-q]\n              COEXP_GRAPH [GENOME [GENOME ...]]\n\nCompute the list of GTsegments from a genome and a coexpression network.\n\nexample:\ngts.py -min 2 -max 50 -d 0.6 coexp_graph.gexf genome.gbk\n\npositional arguments:\n  COEXP_GRAPH           Coexpression graph\n  GENOME                genome file(s) containing genomic organization of\n                        chromosomes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -q, --quiet           Quiet mode: display only critical errors\n\nFile type:\n  --genome_type {gbk,tsv,seq}\n                        Type of the genome file(s) (default: gbk)\n  --graph_type {gexf,list}\n                        Type of the coexpression graph file (default: gexf)\n\nGTsegments size:\n  -min INT, --min_size INT\n                        Minimum length of a GTsegment (default: 2)\n  -max INT, --max_size INT\n                        Maximum length of a GTsegment (default: maximum\n                        possible)\n\nDensity option:\n  -d THRESHOLD, --density THRESHOLD\n                        Select GTsegments with a genomic density \u2265 THRESHOLD\n                        in ]0,1] (default: 0.6)\n  --no_filter           Do not apply density filtering\n\nOutput options:\n  -o FILE, --output FILE\n                        Output file name\n  -no_dom, --no_domination\n                        Keep all the GTsegments instead of the dominant ones\n  -m, --matrix          Output the density matrix instead of the listing of\n                        GTsegments\n  --no_gene_list        Do not add the gene list column in the listing of\n                        GTsegments\n  --sgs_like_headers    Produce a listing of GTsegments with headers from\n                        listing of SGS\n</pre>\n</div>\n<div id=\"inputs\">\n<h2>Inputs</h2>\n<p>The program <tt>gty.py</tt> asks two types of data: an unweighted coexpression network and some genome files describing the genomic organisation of one or many oragnisms. Missing genes and unmatched genes in the coexpression graph are allowed.</p>\n<div id=\"coexpression-graph\">\n<h3>Coexpression graph</h3>\n<p>The program <tt>gty.py</tt> accepts coexpression files under the <tt>.gexf</tt> file format or text file containing a listing of nodes and vertices.</p>\n<div id=\"the-gexf-format\">\n<h4>The <tt>.gexf</tt> format</h4>\n<p>When using the <tt>.gexf</tt> format (option <tt>graph_type gexf</tt>), the string in the  field <cite>label</cite> of each node is considered as the id of the gene associated to its node.</p>\n</div>\n<div id=\"the-listing-format\">\n<h4>The listing format</h4>\n<p>The listing format (option <tt>graph_type list</tt>) is quite simple. It is a list of nodes (optional) and edges describing the coexpression network. Only one node or edge is allowed per line. Nodes are gene ids and edges are couple of nodes separated by a blank character (tabulation, space, etc.)</p>\n<p>Comments are allowed by using # at the begining of a line. Using # elsewhere won\u2019t be a considered as a comment.</p>\n<div id=\"example\">\n<h5>Example</h5>\n<p>The following file <tt>graph.txt</tt> is a list of nodes and edges. It will be used as support later in this documentation.</p>\n<pre># a line that begins with # is a comment (but # elsewhere won't be a considered as a comment)\n0\n1\n# nodes are not mandatory but can exist in the graph file\n2       4\n4       5\n7       8\n6       9\n6       10\n9       10\n12      16\n14      15\n14      16\n14      18\n11      17\n17      23\n25      1\n# The node 26 does not exist in the genome (commented) and will ignored\n25      26\n</pre>\n</div>\n</div>\n</div>\n<div id=\"genome\">\n<h3>Genome</h3>\n<p>The program <tt>gty.py</tt> accepts genome files under the GenBank file format (<tt><span class=\"pre\">--genome_type</span> gbk</tt>), files listing the genomic informations (<tt><span class=\"pre\">--genome_type</span> tsv</tt>) or simply text files giving each the sequence of genes of a chromome (<tt><span class=\"pre\">--genome_type</span> seq</tt>).</p>\n<div id=\"the-genbank-format\">\n<h4>The GenBank format</h4>\n<p>The program <tt>gty.py</tt> can use <a href=\"http://www.insdc.org/documents/feature_table.html\" rel=\"nofollow\">GenBank</a> files as input under the following restriction:</p>\n<ol>\n<li>considered genes are only <tt>CDS</tt> features, and</li>\n<li>each <tt>CDS</tt> must have a field <tt>locus_tag</tt> which will be the gene id.</li>\n</ol>\n</div>\n<div id=\"the-tsv-format\">\n<h4>The <tt>.tsv</tt> format</h4>\n<p>As an alternative of Genbank files that are not always easy to manipulate, <tt>gty.py</tt> can use a <tt>.tsv</tt> file as a description of one or many genome. The <tt>.tsv</tt> file must be formatted such that the first line contains the names of the columns (i.e. the header) and the next lines must describe a gene each.</p>\n<p>The header must contains the at least the following columns names:</p>\n<pre>chromosome_id       gene_id left_end_position       right_end_position\n</pre>\n<p>where:</p>\n<ul>\n<li><tt>chromosome_id</tt> is the id of the chromosome in wich the gene exists,</li>\n<li><tt>gene_id</tt> is the id of the gene,</li>\n<li><tt>left_end_position</tt> is the left end position of the gene (in number of nucleotides) when reading the main strand,</li>\n<li><tt>right_end_position</tt> is the right end position of the gene (in number of nucleotides) when reading the main strand.</li>\n</ul>\n</div>\n<div id=\"the-sequence-format\">\n<h4>The sequence format</h4>\n<p>The sequence format is simply a text file with a gene id per line such as the genes are sorted by their ascending position in the chromosome. if multiple chromosomes exist a file per chromosome is required.</p>\n<div id=\"id1\">\n<h5>Example</h5>\n<p>In the following documentation, we will use the following <tt>seq.txt</tt> file as genome example data.</p>\n<pre># a line that begins with # is a comment (but # elsewhere won't be a considered as a comment)\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n#26 &lt;- this gene will be ignored because of the comment\n</pre>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outputs\">\n<h2>Outputs</h2>\n<div id=\"default-output\">\n<h3>Default output</h3>\n<p>By default, <tt>gts.py</tt> outputs a <tt>.tsv</tt> formated text. It can be write into by using the <tt>&gt; output_file</tt> redirection or the the <tt><span class=\"pre\">-o</span></tt>/<tt><span class=\"pre\">--output</span></tt> option.</p>\n<p>The first line of the output of <tt>gts.py</tt> contains the name of each columns and is called header. Following lines are the data where each line is a GTsegments. Each gtsegment is unique and appears once in the listing.</p>\n<p>The names of the columns in header are the following:</p>\n<pre>chromosome  start   end     length  active_genes    density list_of_active_genes\n</pre>\n<ul>\n<li><tt>chromosome</tt> contains the id of the chromosome in which the GTsegment appears. When the inputed gemone files are sequence files (i.e. <tt><span class=\"pre\">--genome_type</span> seq</tt>), the chromosome id is then the filename.</li>\n<li><tt>start</tt> contains the position of the first gene (i.e. the starting gene) of the GTsegment. The position of a gene is the index of this gene (i.e. the i:sup:<cite>th</cite> gene has the index i)</li>\n<li><tt>end</tt> contains the position of the last gene (i.e. the ending gene) of a GTsegment.</li>\n<li><tt>length</tt> contains the length of the GTsegment which the number of genes that are in the GTsegment (<tt>end</tt> - <tt>start</tt> + 1 modulo the number of genes into the chromosome).</li>\n<li><tt>active_genes</tt> column contains the number of genes of the GTsegment that are coexpressed with the starting and ending genes.</li>\n<li><tt>density</tt> column contains the the genomic density of a GTsegment which is the ratio between <tt>active_genes</tt> and <tt>length</tt>.</li>\n<li><tt>list_of_active_genes</tt> column contains the listing of active genes of the GTsegment (i.e. genes in the GTsegment that are coexpressed with the starting and ending genes). This column can be disabled with the <tt><span class=\"pre\">--no_gene_list</span></tt> option, which can be usefull when querying large GTsegments (see the parameter <tt><span class=\"pre\">-max</span></tt>/<tt><span class=\"pre\">--max_size</span></tt>)</li>\n</ul>\n<div id=\"id2\">\n<h4>Example</h4>\n<p>The following command \u2026</p>\n<pre>gts.py graph.txt seq.txt --graph_type list --genome_type seq\n</pre>\n<p>will produce the following output:</p>\n<pre>chromosome  start   end     length  active_genes    density list_of_active_genes\nseq.txt     2       5       4       3       0.75    2 4 5\nseq.txt     4       5       2       2       1.0     4 5\nseq.txt     6       10      5       3       0.6     6 9 10\nseq.txt     7       8       2       2       1.0     7 8\nseq.txt     9       10      2       2       1.0     9 10\nseq.txt     12      16      5       4       0.8     12 14 15 16\nseq.txt     12      18      7       5       0.714285714286  12 14 15 16 18\nseq.txt     14      16      3       3       1.0     14 15 16\nseq.txt     14      18      5       4       0.8     14 15 16 18\nseq.txt     25      1       2       2       1.0     25 1\n</pre>\n</div>\n</div>\n<div id=\"sgs-like-output\">\n<h3>SGS like output</h3>\n<p>The option <tt><span class=\"pre\">--sgs_like_headers</span></tt> allows to produce listing of GTsegments that is compatible the outputs produced by <a href=\"https://pypi.python.org/pypi/sgs-utils/\" rel=\"nofollow\">sgs-utils</a>.</p>\n</div>\n<div id=\"matrix-output\">\n<h3>Matrix output</h3>\n<p>When the option matrix is choosen, the output won\u2019t be the previous listing, but a concatenation of density matrices in <cite>.csv</cite> format where cells are separated by <cite>;</cite>. The indexes of lines and columns are the position of the genes on the chromosomes (i.e. the i:sup:<cite>th</cite> gene of a chromosome has the index i in the line and the column of the corresponding matrix). As density matrices are square matrices that appear in the same order than the chromosomes given as inputs, separate distinct matrices is possible.</p>\n<div id=\"id3\">\n<h4>Example</h4>\n<p>The example with the matrix option\u2026</p>\n<pre>gts.py graph.txt seq.txt --graph_type list --genome_type seq --matrix\n</pre>\n<p>will produce the following output:</p>\n<pre>1.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.750000;0.000000;0.000000;0.000000\n0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.000000;1.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.666667;0.000000;0.000000;1.000000;0.000000;1.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000;0.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;1.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000;0.000000\n0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;0.000000;1.000000\n</pre>\n</div>\n</div>\n</div>\n<div id=\"acknowledgement\">\n<h2>Acknowledgement</h2>\n<p>This work was supported by grants Fondap 15090007, Basal program PFB-03 CMM, IntegrativeBioChile INRIA Assoc. Team and CIRIC-INRIA Chile (line Natural Resources).</p>\n</div>\n\n          </div>"}, "last_serial": 2476957, "releases": {"0.21": [{"comment_text": "", "digests": {"md5": "0280ee283f859bb6f8ec4f4503a8a485", "sha256": "0a45e22b1c528c06d317433d1ec44e3a83bb4536910761e84f95a711bb7bbd79"}, "downloads": -1, "filename": "GTsegments-0.21.tar.gz", "has_sig": false, "md5_digest": "0280ee283f859bb6f8ec4f4503a8a485", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14598, "upload_time": "2016-07-08T10:52:36", "upload_time_iso_8601": "2016-07-08T10:52:36.924560Z", "url": "https://files.pythonhosted.org/packages/db/0d/884688328b7b0b0e04fee085531dbf8012ce981a5b25f7a2a5ac6f733672/GTsegments-0.21.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "49013992967241c97bfbcb26aa491778", "sha256": "dfedd1616dd8573d400f069cb73f32bc05882a894e2247445cb4ff77ef468d06"}, "downloads": -1, "filename": "GTsegments-0.22.tar.gz", "has_sig": false, "md5_digest": "49013992967241c97bfbcb26aa491778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18363, "upload_time": "2016-08-15T14:25:25", "upload_time_iso_8601": "2016-08-15T14:25:25.580142Z", "url": "https://files.pythonhosted.org/packages/d1/e7/63730757062df325c5cee237ed32d2060ecd010a839678d8147e9533eacb/GTsegments-0.22.tar.gz", "yanked": false}], "0.22": []}, "urls": [], "timestamp": "Fri May  8 00:53:29 2020"}