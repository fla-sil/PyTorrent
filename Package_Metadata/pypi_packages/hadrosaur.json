{"info": {"author": "Jay R Bolton", "author_email": "jayrbolton@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# hadrosaur \u2014 computed resource management\n\n![logo](docs/logo.jpg)\n\nHadrosaur makes it easy to track the completion status, errors, and logs of large amounts of resources (files, metadata, analytics, database imports, etc.).\n\nYou simply define your resource as a decorated Python function that can create files and save metadata using an identifier in a certain namespace. Later on, you can quickly fetch the status and results of previously computed resources.\n\nThis library uses a combination of LevelDB and the file system to track the state of your tasks.\n\n## Quick usage tutorial\n\n### Install\n\n```sh\npip install hadrosaur\n```\n\n### Define a resource collection\n\nImport the lib and initialize a project using a base directory. Files, metadata, and logs will all get stored under this directory.\n\n```py\nfrom hadrosaur import Project\n\nproj = Project('./base_directory')\n```\n\nDefine a collection using a decorator around a function. This function's job is to generate a single resource for the collection given a unique ID and some arguments.\n\nThe collection should have a unique name, and its function must take these params:\n\n* `ident` \u2014 an identifier (unique across the collection) for each computed resource\n* `args` \u2014 a dictionary of optional arguments\n* `ctx` \u2014 a Context object which holds some extra data you may find useful during computation:\n  * `ctx.subdir` - the path of a directory in which you can store files for this resource\n  * `ctx.logger` - a special Python logging instance that will write to a rotating log file stored in the resource directory, with some nice default formatting\n\n```py\n@proj.resource('collection_name')\ndef compute_resource(ident, args, ctx):\n  ctx.logger.info(\"Starting up\")\n  # Run some things...\n  # Maybe save stuff into ctx.subdir...\n  time.sleep(1)\n  # Return any JSON-serializable data for the resource, such as metadata, run results, filepaths, etc.\n  return {'ts': time.time()}\n```\n\n### Fetch a resource\n\nUse the `proj.fetch(collection_name, ident)` method to compute and cache resources in a collection.\n\nKeyword arguments:\n\n* `args` -- an optional dict of extra arguments for the resource compute function\n* `recompute` -- force the resource to be re-computed, even if it has already been computed\n\nWhat happens when you fetch a resource:\n\n* If the resource has not yet been computed, the collection's compute function will be run.\n* If the resource was already computed in the past, then the saved results will get returned instantly (unless `recompute=True` has been set in the keyword arguments).\n* If an error is thrown in the function, logs will be saved and the status will be updated\n\n```py\n>> proj.fetch('collection_name', 'uniq_ident123', optional_args)\n<Resource>\n```\n\nThe resource object has the following properties:\n\n* `resource.result`: any JSON-serializable data returned by the resource's compute function\n* `resource.start_time`: The unix epoch (in milliseconds) of when the resource started being computed\n* `eresource.end_time`: the unix epoch (in ms) of when the resource finished computing (or failed)\n* `resource.status`: whether the resource has been computed already (\"completed\"), is currently being computed (\"pending\"), has not yet been fetched at all (\"unavailable\"), or threw a Python error while running the function (\"error\")\n* `resource.paths`: A dictionary of all the filesystem paths associated with your resource, with the following keys:\n  * `'base'`: The base directory that holds all data for the resource\n  * `'error'`: A Python stacktrace of any error that occured while running the resource's function\n  * `'log`': A line-by-line log file produced by the resource's logger (`ctx.logger`)\n  * `'status'`: Path to the current status (\"unavailable\", \"completed\", \"pending\", \"error\")\n  * `'result'`: Path to a JSON file of serializable data returned by the resource's function\n  * `'storage'`: Directory path of additional files written by the resource's function (`ctx.subdir`)\n\n### Fetch status and information \n\n#### Fetch stats for a collection\n\nTo see status counts for a whole collection, use `proj.stats('collection_name')`:\n\n```py\n> proj.stats('collection_name')\n{\n  'counts': {\n      'total': 100,\n      'pending': 75,\n      'completed': 20,\n      'error': 5,\n      'unavailable': 0\n  }\n}\n```\n\nUse `proj.stats()` without an argument to fetch the stats for all collections.\n\nTo get a list of resource IDs for a given status, use `proj.fetch_by_status`:\n\n```py\n> proj.fetch_by_status('collection_name', 'pending')\n['1', '2', '3'..]\n```\n\n### Fetch info about a single resource\n\nUse `proj.status('collection_name', 'resource_id')` to see the status of a particular resource.\n\n```py\n> proj.status('collection_name', 'resource_id')\n\"complete\"\n```\n\nIf an exception was raised during the execution of the function used to compute\na resource, then use `proj.fetch_error` to see the error.\n\n```py\n> proj.fetch_error('collection_name', 'resource_id')\n\"\"\"Traceback (most recent call last):\n  File \"/home/j/code/hadrosaur/hadrosaur/main.py\", line 211, in fetch\n    result = func(ident, args, ctx)\n  File \"/home/j/code/hadrosaur/test/test_general.py\", line 26, in throw_something\n    raise RuntimeError('This is an error!')\nRuntimeError: This is an error!\"\"\"\n```\n\nTo see the run log (produced by `ctx.logger` during function execution), then use `proj.fetch_log`\n\n```py\n> proj.fetch_log('collection_name', 'resource_id')\n\"\"\"\n2020-02-05 16:15:35 INFO     output here (test_general.py:25)\n2020-02-05 16:15:35 INFO     more output here (test_general.py:25)\n\"\"\"\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jayrbolton/hadrosaur", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hadrosaur", "package_url": "https://pypi.org/project/hadrosaur/", "platform": "", "project_url": "https://pypi.org/project/hadrosaur/", "project_urls": {"Documentation": "https://github.com/jayrbolton/hadrosaur", "Homepage": "https://github.com/jayrbolton/hadrosaur", "Repository": "https://github.com/jayrbolton/hadrosaur"}, "release_url": "https://pypi.org/project/hadrosaur/0.4.1/", "requires_dist": ["plyvel (>=1.2.0)"], "requires_python": ">=3.6", "summary": "Manage statuses for a large amount of data analysis resources, such as files, imports, etc.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>hadrosaur \u2014 computed resource management</h1>\n<p><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f923509a3eee9e488c477dd26c54dab9f43baa41/646f63732f6c6f676f2e6a7067\"></p>\n<p>Hadrosaur makes it easy to track the completion status, errors, and logs of large amounts of resources (files, metadata, analytics, database imports, etc.).</p>\n<p>You simply define your resource as a decorated Python function that can create files and save metadata using an identifier in a certain namespace. Later on, you can quickly fetch the status and results of previously computed resources.</p>\n<p>This library uses a combination of LevelDB and the file system to track the state of your tasks.</p>\n<h2>Quick usage tutorial</h2>\n<h3>Install</h3>\n<pre>pip install hadrosaur\n</pre>\n<h3>Define a resource collection</h3>\n<p>Import the lib and initialize a project using a base directory. Files, metadata, and logs will all get stored under this directory.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hadrosaur</span> <span class=\"kn\">import</span> <span class=\"n\">Project</span>\n\n<span class=\"n\">proj</span> <span class=\"o\">=</span> <span class=\"n\">Project</span><span class=\"p\">(</span><span class=\"s1\">'./base_directory'</span><span class=\"p\">)</span>\n</pre>\n<p>Define a collection using a decorator around a function. This function's job is to generate a single resource for the collection given a unique ID and some arguments.</p>\n<p>The collection should have a unique name, and its function must take these params:</p>\n<ul>\n<li><code>ident</code> \u2014 an identifier (unique across the collection) for each computed resource</li>\n<li><code>args</code> \u2014 a dictionary of optional arguments</li>\n<li><code>ctx</code> \u2014 a Context object which holds some extra data you may find useful during computation:\n<ul>\n<li><code>ctx.subdir</code> - the path of a directory in which you can store files for this resource</li>\n<li><code>ctx.logger</code> - a special Python logging instance that will write to a rotating log file stored in the resource directory, with some nice default formatting</li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"nd\">@proj</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">compute_resource</span><span class=\"p\">(</span><span class=\"n\">ident</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">):</span>\n  <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Starting up\"</span><span class=\"p\">)</span>\n  <span class=\"c1\"># Run some things...</span>\n  <span class=\"c1\"># Maybe save stuff into ctx.subdir...</span>\n  <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"c1\"># Return any JSON-serializable data for the resource, such as metadata, run results, filepaths, etc.</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'ts'</span><span class=\"p\">:</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()}</span>\n</pre>\n<h3>Fetch a resource</h3>\n<p>Use the <code>proj.fetch(collection_name, ident)</code> method to compute and cache resources in a collection.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li><code>args</code> -- an optional dict of extra arguments for the resource compute function</li>\n<li><code>recompute</code> -- force the resource to be re-computed, even if it has already been computed</li>\n</ul>\n<p>What happens when you fetch a resource:</p>\n<ul>\n<li>If the resource has not yet been computed, the collection's compute function will be run.</li>\n<li>If the resource was already computed in the past, then the saved results will get returned instantly (unless <code>recompute=True</code> has been set in the keyword arguments).</li>\n<li>If an error is thrown in the function, logs will be saved and the status will be updated</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">,</span> <span class=\"s1\">'uniq_ident123'</span><span class=\"p\">,</span> <span class=\"n\">optional_args</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&gt;</span>\n</pre>\n<p>The resource object has the following properties:</p>\n<ul>\n<li><code>resource.result</code>: any JSON-serializable data returned by the resource's compute function</li>\n<li><code>resource.start_time</code>: The unix epoch (in milliseconds) of when the resource started being computed</li>\n<li><code>eresource.end_time</code>: the unix epoch (in ms) of when the resource finished computing (or failed)</li>\n<li><code>resource.status</code>: whether the resource has been computed already (\"completed\"), is currently being computed (\"pending\"), has not yet been fetched at all (\"unavailable\"), or threw a Python error while running the function (\"error\")</li>\n<li><code>resource.paths</code>: A dictionary of all the filesystem paths associated with your resource, with the following keys:\n<ul>\n<li><code>'base'</code>: The base directory that holds all data for the resource</li>\n<li><code>'error'</code>: A Python stacktrace of any error that occured while running the resource's function</li>\n<li><code>'log</code>': A line-by-line log file produced by the resource's logger (<code>ctx.logger</code>)</li>\n<li><code>'status'</code>: Path to the current status (\"unavailable\", \"completed\", \"pending\", \"error\")</li>\n<li><code>'result'</code>: Path to a JSON file of serializable data returned by the resource's function</li>\n<li><code>'storage'</code>: Directory path of additional files written by the resource's function (<code>ctx.subdir</code>)</li>\n</ul>\n</li>\n</ul>\n<h3>Fetch status and information</h3>\n<h4>Fetch stats for a collection</h4>\n<p>To see status counts for a whole collection, use <code>proj.stats('collection_name')</code>:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'counts'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n      <span class=\"s1\">'pending'</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">,</span>\n      <span class=\"s1\">'completed'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n      <span class=\"s1\">'error'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n      <span class=\"s1\">'unavailable'</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Use <code>proj.stats()</code> without an argument to fetch the stats for all collections.</p>\n<p>To get a list of resource IDs for a given status, use <code>proj.fetch_by_status</code>:</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">fetch_by_status</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">,</span> <span class=\"s1\">'pending'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"o\">..</span><span class=\"p\">]</span>\n</pre>\n<h3>Fetch info about a single resource</h3>\n<p>Use <code>proj.status('collection_name', 'resource_id')</code> to see the status of a particular resource.</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">,</span> <span class=\"s1\">'resource_id'</span><span class=\"p\">)</span>\n<span class=\"s2\">\"complete\"</span>\n</pre>\n<p>If an exception was raised during the execution of the function used to compute\na resource, then use <code>proj.fetch_error</code> to see the error.</p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">fetch_error</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">,</span> <span class=\"s1\">'resource_id'</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"Traceback (most recent call last):</span>\n<span class=\"sd\">  File \"/home/j/code/hadrosaur/hadrosaur/main.py\", line 211, in fetch</span>\n<span class=\"sd\">    result = func(ident, args, ctx)</span>\n<span class=\"sd\">  File \"/home/j/code/hadrosaur/test/test_general.py\", line 26, in throw_something</span>\n<span class=\"sd\">    raise RuntimeError('This is an error!')</span>\n<span class=\"sd\">RuntimeError: This is an error!\"\"\"</span>\n</pre>\n<p>To see the run log (produced by <code>ctx.logger</code> during function execution), then use <code>proj.fetch_log</code></p>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">proj</span><span class=\"o\">.</span><span class=\"n\">fetch_log</span><span class=\"p\">(</span><span class=\"s1\">'collection_name'</span><span class=\"p\">,</span> <span class=\"s1\">'resource_id'</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">2020-02-05 16:15:35 INFO     output here (test_general.py:25)</span>\n<span class=\"sd\">2020-02-05 16:15:35 INFO     more output here (test_general.py:25)</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n\n          </div>"}, "last_serial": 6801097, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "dd41c49f3340042be8ddf91baf7fc4c6", "sha256": "8a161a43acfaa951002da40a19f17ac92e991fee35338229ce77c602542d6286"}, "downloads": -1, "filename": "hadrosaur-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "dd41c49f3340042be8ddf91baf7fc4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2476, "upload_time": "2020-01-31T20:33:04", "upload_time_iso_8601": "2020-01-31T20:33:04.787323Z", "url": "https://files.pythonhosted.org/packages/73/8b/3d0c0d66f4983cc8e028425afdbc071a9d6394948af59beaa49bbd8ad3cc/hadrosaur-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0837725eaac3558eeef4fba8750bb58", "sha256": "d5e4137eba4db1b5e80db30fb2130803cc79c2140457715dc3bde96744032d4e"}, "downloads": -1, "filename": "hadrosaur-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e0837725eaac3558eeef4fba8750bb58", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2116, "upload_time": "2020-01-31T20:33:07", "upload_time_iso_8601": "2020-01-31T20:33:07.021356Z", "url": "https://files.pythonhosted.org/packages/57/00/fa45c5233652c95b0c7c56e369eb78ceff7a21388f13124fed26be4c7b71/hadrosaur-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3a020307757ac677332df2c09f2228cd", "sha256": "7edceaffcafd3491de99f659e3e7162fe2c41d46faa49070d25697887cd3beac"}, "downloads": -1, "filename": "hadrosaur-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3a020307757ac677332df2c09f2228cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3964, "upload_time": "2020-01-31T20:39:38", "upload_time_iso_8601": "2020-01-31T20:39:38.210902Z", "url": "https://files.pythonhosted.org/packages/63/8f/8889a5be0f55602cabff54417feefbb01116aca14ccec4fe2b0584381c0a/hadrosaur-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea3524bfe364d1ffd02c26997234e9c4", "sha256": "3fac095847a601e18937e8f58f7d234e0dcc6c354f720eff3af8c05e3a23cfe2"}, "downloads": -1, "filename": "hadrosaur-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ea3524bfe364d1ffd02c26997234e9c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4114, "upload_time": "2020-01-31T20:39:39", "upload_time_iso_8601": "2020-01-31T20:39:39.763205Z", "url": "https://files.pythonhosted.org/packages/c2/a1/6ad2b532b5646afb3948cc15e2200680f0443ffdb9fec0725f3240af5785/hadrosaur-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "237f26ca9bd07119e5ab9447292414ed", "sha256": "02ac8aa91969519e99a94b319ad3bc10de37e079c17f912b5b4d2550a4d41e56"}, "downloads": -1, "filename": "hadrosaur-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "237f26ca9bd07119e5ab9447292414ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3987, "upload_time": "2020-01-31T22:32:03", "upload_time_iso_8601": "2020-01-31T22:32:03.949549Z", "url": "https://files.pythonhosted.org/packages/03/8b/bc2752a1c1056f473711ff28c58c0867bf25c52c77f4685649a5ab56f664/hadrosaur-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88afe8d0efceda843021a46a96db237b", "sha256": "3f863bad9c3761956ec36027b95052b874b0662eedf326c4804e86f01c67b165"}, "downloads": -1, "filename": "hadrosaur-0.0.3.tar.gz", "has_sig": false, "md5_digest": "88afe8d0efceda843021a46a96db237b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4131, "upload_time": "2020-01-31T22:32:05", "upload_time_iso_8601": "2020-01-31T22:32:05.172650Z", "url": "https://files.pythonhosted.org/packages/8f/45/6391c224a2cfe2a5bcee20b9c463961f5bb133eface97eea5af3ad109444/hadrosaur-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "62ac400ec55049faad80781352cb5c67", "sha256": "d847fa02e6d8ba3aefde0e7e08243b0f14f163c307413f94a329fc52f3fc2ce7"}, "downloads": -1, "filename": "hadrosaur-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "62ac400ec55049faad80781352cb5c67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4249, "upload_time": "2020-02-01T00:41:37", "upload_time_iso_8601": "2020-02-01T00:41:37.971282Z", "url": "https://files.pythonhosted.org/packages/d4/16/68018950f51eb72f64fa85575edc23e9d72035b95f62b90860739935b4b7/hadrosaur-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de0e84b356519f0965aa6176c7564a99", "sha256": "15571f96971b91e519ed2c38f22075b63bc9b2b5aca082059e440732c806239f"}, "downloads": -1, "filename": "hadrosaur-0.1.0.tar.gz", "has_sig": false, "md5_digest": "de0e84b356519f0965aa6176c7564a99", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4386, "upload_time": "2020-02-01T00:41:39", "upload_time_iso_8601": "2020-02-01T00:41:39.206935Z", "url": "https://files.pythonhosted.org/packages/50/eb/d143f2ba3db2b6a44cd902dd119866cef4170b8adfa233282d63a5f9b79d/hadrosaur-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f1fd6d4e28fdbb6af39f4aef85b72ead", "sha256": "10e3bbdfa268e0adc3c99cbfd46c95151e94c4d2db1f3ecf30977cf504cb0de7"}, "downloads": -1, "filename": "hadrosaur-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f1fd6d4e28fdbb6af39f4aef85b72ead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5889, "upload_time": "2020-02-06T00:54:24", "upload_time_iso_8601": "2020-02-06T00:54:24.050516Z", "url": "https://files.pythonhosted.org/packages/4d/47/566d3f76c16bf65404308a0c6d997931d921510ba49aaa5f378b1faf9238/hadrosaur-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a863912c8a401dfbf9667163a0d8ec8e", "sha256": "577628d52a615a40bbc505bb08df3dc9bc108cfca01458cd2323792834f5dcb9"}, "downloads": -1, "filename": "hadrosaur-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a863912c8a401dfbf9667163a0d8ec8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6247, "upload_time": "2020-02-06T00:54:25", "upload_time_iso_8601": "2020-02-06T00:54:25.571692Z", "url": "https://files.pythonhosted.org/packages/b5/6b/c88b6780faf7ffcead0b4da7e85d43e6c6503dc8aac2921876d90abc0d81/hadrosaur-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2997c15ffcd02a9f941d273d0d91d181", "sha256": "22d0abdc6929757dd000c5863bb94fad00c63f313a5e6f5bafba0a99904f9201"}, "downloads": -1, "filename": "hadrosaur-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2997c15ffcd02a9f941d273d0d91d181", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6124, "upload_time": "2020-02-06T03:29:42", "upload_time_iso_8601": "2020-02-06T03:29:42.269048Z", "url": "https://files.pythonhosted.org/packages/27/3c/5788645811ea99802ca5f2183e412c7828e185c4d039a7e97def957f118b/hadrosaur-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfc133574423b894ec188b90577a2e2f", "sha256": "905164926c6ecec2cae9e250d5855070cde4ed1df3743f637c958104b0fd4f93"}, "downloads": -1, "filename": "hadrosaur-0.3.0.tar.gz", "has_sig": false, "md5_digest": "cfc133574423b894ec188b90577a2e2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7083, "upload_time": "2020-02-06T03:29:43", "upload_time_iso_8601": "2020-02-06T03:29:43.927704Z", "url": "https://files.pythonhosted.org/packages/ef/f1/065732a3589600978fdf4f485a1f5a4bc5e8f2d4d7dd620479ae589f434c/hadrosaur-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "aac6fc7f1668848e0e75606ce2f73f1b", "sha256": "b1731e340f20f910fe1a2fd1b98f7408637f436feca9dc447ab7694921100004"}, "downloads": -1, "filename": "hadrosaur-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aac6fc7f1668848e0e75606ce2f73f1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5966, "upload_time": "2020-02-07T18:16:15", "upload_time_iso_8601": "2020-02-07T18:16:15.425399Z", "url": "https://files.pythonhosted.org/packages/40/80/ebeadee5e16b57f8cbf31e4dd33254190f9715a37748617ad49e4f208f21/hadrosaur-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82b1a3884a0ab92eb655d613fb725024", "sha256": "ae6282f72cfda98b0f4467397a93c85af7902aeb2629ee601ec1e138423a4607"}, "downloads": -1, "filename": "hadrosaur-0.3.1.tar.gz", "has_sig": false, "md5_digest": "82b1a3884a0ab92eb655d613fb725024", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6326, "upload_time": "2020-02-07T18:16:16", "upload_time_iso_8601": "2020-02-07T18:16:16.857058Z", "url": "https://files.pythonhosted.org/packages/96/d3/e738afefbee2b02e1b0ff2d4dff1e631dbe0c2f3e94fa46e2b99cb55efe0/hadrosaur-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "db7001ae9f70f37db2fb50b2d8ce02d5", "sha256": "8d9ad1d56eac1d3f18f2a95d0d3e3a3ec948f22c033c87c74f240c174c10f6ec"}, "downloads": -1, "filename": "hadrosaur-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "db7001ae9f70f37db2fb50b2d8ce02d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6021, "upload_time": "2020-02-07T18:59:43", "upload_time_iso_8601": "2020-02-07T18:59:43.862779Z", "url": "https://files.pythonhosted.org/packages/59/a8/3010050498bf0cd1fbe49a02298dff4f1033c27253cc06fd95528a130e62/hadrosaur-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a10c927be54c3454a7d5af3180737442", "sha256": "21e47e84c750eeb0ae05fb5ad542425c667da5b9d1199a8b25f8d4031962d69e"}, "downloads": -1, "filename": "hadrosaur-0.3.2.tar.gz", "has_sig": false, "md5_digest": "a10c927be54c3454a7d5af3180737442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6991, "upload_time": "2020-02-07T18:59:45", "upload_time_iso_8601": "2020-02-07T18:59:45.422247Z", "url": "https://files.pythonhosted.org/packages/9d/d3/18fb34bbe91edf538f4f885b2c75cc4492aa7c57c25f0d66c0c9c405479a/hadrosaur-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f12b0917c70ef54da7954d218f4b8feb", "sha256": "d336cf11d54384640e55971937e180d14fa99ef5eb5826778e9331f3aeeae8e3"}, "downloads": -1, "filename": "hadrosaur-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f12b0917c70ef54da7954d218f4b8feb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6493, "upload_time": "2020-02-19T23:39:37", "upload_time_iso_8601": "2020-02-19T23:39:37.255737Z", "url": "https://files.pythonhosted.org/packages/8e/ff/3d572010af06de63e20ff090670c0eb159e814c64c354c4545513ddcd8e6/hadrosaur-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bb7d815b67b47b255d23fc8db8f7f6e", "sha256": "5b152514919e74c352217abc3864caa35a1a0afa4ce8c492d8ea51f0ba9e5e99"}, "downloads": -1, "filename": "hadrosaur-0.4.0.tar.gz", "has_sig": false, "md5_digest": "6bb7d815b67b47b255d23fc8db8f7f6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7227, "upload_time": "2020-02-19T23:39:38", "upload_time_iso_8601": "2020-02-19T23:39:38.799456Z", "url": "https://files.pythonhosted.org/packages/67/ad/18c2de75588636c9d6f805784548378b85a847525e1dc2671abbc650f8cd/hadrosaur-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e9cf94a704d387350f37dc31dae9334a", "sha256": "75c2abb563d1ca574fa59768212b0ede20833586c47089ba04807173cffcafc3"}, "downloads": -1, "filename": "hadrosaur-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9cf94a704d387350f37dc31dae9334a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6516, "upload_time": "2020-03-12T18:43:58", "upload_time_iso_8601": "2020-03-12T18:43:58.308456Z", "url": "https://files.pythonhosted.org/packages/ed/d5/6495c7806e892b1d8c9f9a4ca5a786093f1b2ea5ef7af90253f550968905/hadrosaur-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ebcb66b4a0bd011e95540720f884264", "sha256": "81b3d52b5dd9e938bfc0fd87aef86873d7d7e3db12d91501df417da105aaf1c5"}, "downloads": -1, "filename": "hadrosaur-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0ebcb66b4a0bd011e95540720f884264", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7274, "upload_time": "2020-03-12T18:44:00", "upload_time_iso_8601": "2020-03-12T18:44:00.080375Z", "url": "https://files.pythonhosted.org/packages/d9/0e/1105ecf0215fe6b9f273ef84bc87305dc586f36d0da0a423864cef678ea3/hadrosaur-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9cf94a704d387350f37dc31dae9334a", "sha256": "75c2abb563d1ca574fa59768212b0ede20833586c47089ba04807173cffcafc3"}, "downloads": -1, "filename": "hadrosaur-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9cf94a704d387350f37dc31dae9334a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6516, "upload_time": "2020-03-12T18:43:58", "upload_time_iso_8601": "2020-03-12T18:43:58.308456Z", "url": "https://files.pythonhosted.org/packages/ed/d5/6495c7806e892b1d8c9f9a4ca5a786093f1b2ea5ef7af90253f550968905/hadrosaur-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ebcb66b4a0bd011e95540720f884264", "sha256": "81b3d52b5dd9e938bfc0fd87aef86873d7d7e3db12d91501df417da105aaf1c5"}, "downloads": -1, "filename": "hadrosaur-0.4.1.tar.gz", "has_sig": false, "md5_digest": "0ebcb66b4a0bd011e95540720f884264", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7274, "upload_time": "2020-03-12T18:44:00", "upload_time_iso_8601": "2020-03-12T18:44:00.080375Z", "url": "https://files.pythonhosted.org/packages/d9/0e/1105ecf0215fe6b9f273ef84bc87305dc586f36d0da0a423864cef678ea3/hadrosaur-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:45 2020"}