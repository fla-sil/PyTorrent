{"info": {"author": "Nicol\u00e1s Pernas Maradei", "author_email": "nicolas.pernas.maradei@emutex.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": "Wiring-x86\n==========\n\nWiring-x86 is a Python module that lets you use Arduino like functionality on\nIntel\u00ae Arduino capable boards such as:\n\n* `Intel\u00ae Edison <http://www.intel.com/content/www/us/en/do-it-yourself/edison.html>`_\n* `Intel\u00ae Galileo Gen2 <http://www.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html>`_ \n* `Intel\u00ae Galileo <http://www.intel.ie/content/www/ie/en/do-it-yourself/galileo-maker-quark-board.html>`_\n\nIt provides a simple and unified API (similar to the WiringPi module) to talk\nto the GPIO pins on the board.\n\n.. image:: https://raw.githubusercontent.com/emutex/wiring-x86/master/docs/source/_images/galileo1.jpg\n\nAt the moment the Wiring-x86 library provides support to:\n\n-  Writing to a GPIO pin configured as output.\n-  Reading from a GPIO pin configured as high impedance input.\n-  Reading from a GPIO pin configured as pullup input.\n-  Reading from a GPIO pin configured as pulldown input.\n-  Reading from a GPIO pin configured as analog input (ADC).\n-  Writing to a GPIO pin configured as analog output (PWM).\n\nHere is a simple example:\n\n.. code-block:: python\n\n    # Import the time module enable sleeps between turning the led on and off.\n    import time\n\n    # Import the GPIOEdison class from the wiringx86 module.\n    # In case you want to use a different board, simply the import right class\n    # below. The API is unified for all supported boards.\n    from wiringx86 import GPIOEdison as GPIO\n\n    # Create a new instance of the GPIOEdison class.\n    # Setting debug=True gives information about the interaction with sysfs.\n    gpio = GPIO(debug=False)\n    pin = 13\n    state = gpio.HIGH\n\n    # Set pin 13 to be used as an output GPIO pin.\n    print 'Setting up pin %d' % pin\n    gpio.pinMode(pin, gpio.OUTPUT)\n\n\n    print 'Blinking pin %d now...' % pin\n    try:\n        while(True):\n            # Write a state to the pin. ON or OFF.\n            gpio.digitalWrite(pin, state)\n\n            # Toggle the state.\n            state = gpio.LOW if state == gpio.HIGH else gpio.HIGH\n\n            # Sleep for a while.\n            time.sleep(0.5)\n\n    # When you get tired of seeing the led blinking kill the loop with Ctrl-C.\n    except KeyboardInterrupt:\n        # Leave the led turned off.\n        print '\\nCleaning up...'\n        gpio.digitalWrite(pin, gpio.LOW)\n\n        # Do a general cleanup. Calling this function is not mandatory.\n        gpio.cleanup()\n\nFull documentation can be found at\n`wiring-x86 site <http://wiring-x86.readthedocs.org>`_ on Read the Docs.\n\nThe original YOCTO Linux OS provided by Intel\u00ae must be used. For more\ninformation on how to get this software go to `Intel\u00ae Makers site\n<https://communities.intel.com/community/makers>`_. This module will only work\nwith that combination of boards and OS since it uses specific Intel\u00ae GPIO\ndriver sysfs interface.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/emutex/wiring-x86", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "Wiring-x86", "package_url": "https://pypi.org/project/Wiring-x86/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Wiring-x86/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/emutex/wiring-x86"}, "release_url": "https://pypi.org/project/Wiring-x86/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "A Python module to use most Arduino wiring functions on Intel\u00ae Arduino capable boards.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wiring-x86 is a Python module that lets you use Arduino like functionality on\nIntel\u00ae Arduino capable boards such as:</p>\n<ul>\n<li><a href=\"http://www.intel.com/content/www/us/en/do-it-yourself/edison.html\" rel=\"nofollow\">Intel\u00ae Edison</a></li>\n<li><a href=\"http://www.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html\" rel=\"nofollow\">Intel\u00ae Galileo Gen2</a></li>\n<li><a href=\"http://www.intel.ie/content/www/ie/en/do-it-yourself/galileo-maker-quark-board.html\" rel=\"nofollow\">Intel\u00ae Galileo</a></li>\n</ul>\n<p>It provides a simple and unified API (similar to the WiringPi module) to talk\nto the GPIO pins on the board.</p>\n<img alt=\"https://raw.githubusercontent.com/emutex/wiring-x86/master/docs/source/_images/galileo1.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48e222a312b12b6abb70b837c7a5e4eb7a582833/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f656d757465782f776972696e672d7838362f6d61737465722f646f63732f736f757263652f5f696d616765732f67616c696c656f312e6a7067\">\n<p>At the moment the Wiring-x86 library provides support to:</p>\n<ul>\n<li>Writing to a GPIO pin configured as output.</li>\n<li>Reading from a GPIO pin configured as high impedance input.</li>\n<li>Reading from a GPIO pin configured as pullup input.</li>\n<li>Reading from a GPIO pin configured as pulldown input.</li>\n<li>Reading from a GPIO pin configured as analog input (ADC).</li>\n<li>Writing to a GPIO pin configured as analog output (PWM).</li>\n</ul>\n<p>Here is a simple example:</p>\n<pre><span class=\"c1\"># Import the time module enable sleeps between turning the led on and off.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"c1\"># Import the GPIOEdison class from the wiringx86 module.</span>\n<span class=\"c1\"># In case you want to use a different board, simply the import right class</span>\n<span class=\"c1\"># below. The API is unified for all supported boards.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wiringx86</span> <span class=\"kn\">import</span> <span class=\"n\">GPIOEdison</span> <span class=\"k\">as</span> <span class=\"n\">GPIO</span>\n\n<span class=\"c1\"># Create a new instance of the GPIOEdison class.</span>\n<span class=\"c1\"># Setting debug=True gives information about the interaction with sysfs.</span>\n<span class=\"n\">gpio</span> <span class=\"o\">=</span> <span class=\"n\">GPIO</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">pin</span> <span class=\"o\">=</span> <span class=\"mi\">13</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">HIGH</span>\n\n<span class=\"c1\"># Set pin 13 to be used as an output GPIO pin.</span>\n<span class=\"nb\">print</span> <span class=\"s1\">'Setting up pin </span><span class=\"si\">%d</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">pin</span>\n<span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">OUTPUT</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">print</span> <span class=\"s1\">'Blinking pin </span><span class=\"si\">%d</span><span class=\"s1\"> now...'</span> <span class=\"o\">%</span> <span class=\"n\">pin</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Write a state to the pin. ON or OFF.</span>\n        <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Toggle the state.</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">LOW</span> <span class=\"k\">if</span> <span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">HIGH</span> <span class=\"k\">else</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">HIGH</span>\n\n        <span class=\"c1\"># Sleep for a while.</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># When you get tired of seeing the led blinking kill the loop with Ctrl-C.</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Leave the led turned off.</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">Cleaning up...'</span>\n    <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">pin</span><span class=\"p\">,</span> <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">LOW</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Do a general cleanup. Calling this function is not mandatory.</span>\n    <span class=\"n\">gpio</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n</pre>\n<p>Full documentation can be found at\n<a href=\"http://wiring-x86.readthedocs.org\" rel=\"nofollow\">wiring-x86 site</a> on Read the Docs.</p>\n<p>The original YOCTO Linux OS provided by Intel\u00ae must be used. For more\ninformation on how to get this software go to <a href=\"https://communities.intel.com/community/makers\" rel=\"nofollow\">Intel\u00ae Makers site</a>. This module will only work\nwith that combination of boards and OS since it uses specific Intel\u00ae GPIO\ndriver sysfs interface.</p>\n\n          </div>"}, "last_serial": 1270168, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b800595e3af974058f52591aa9117712", "sha256": "7dc7b66fbe7451ce47063d9d304361cf40de081e4646aaf9aa1ea4205734eda6"}, "downloads": -1, "filename": "Wiring-x86-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b800595e3af974058f52591aa9117712", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7194, "upload_time": "2014-07-21T16:26:02", "upload_time_iso_8601": "2014-07-21T16:26:02.063195Z", "url": "https://files.pythonhosted.org/packages/44/a3/9b3cf5cfc98002c3efcf67f61540fd3ef63951c116f39c30ba260cc78b9b/Wiring-x86-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b1469a90ce0af76c8b20ff25b5de8a2a", "sha256": "6711891fed42e1c4e0627741a17ead19d0de270829e54bc51a08c1d506de23d9"}, "downloads": -1, "filename": "Wiring-x86-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b1469a90ce0af76c8b20ff25b5de8a2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8342, "upload_time": "2014-08-01T10:42:07", "upload_time_iso_8601": "2014-08-01T10:42:07.513386Z", "url": "https://files.pythonhosted.org/packages/95/fa/afce976dd01fd1f0eeeb9fe7159e7bb72a7c17ac1c1f843c9eac33462a60/Wiring-x86-0.0.2.tar.gz", "yanked": false}], "0.1": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "c0972a18ffda5e62559265015b4dfcdc", "sha256": "6e4df802cd9b3e35c9d18ef52f832c8729948d46a4044d437bdfb4fa9cf7f4b2"}, "downloads": -1, "filename": "Wiring-x86-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c0972a18ffda5e62559265015b4dfcdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9890, "upload_time": "2014-10-14T16:03:36", "upload_time_iso_8601": "2014-10-14T16:03:36.400301Z", "url": "https://files.pythonhosted.org/packages/54/68/849eb1b2afafb090112a0df009f2bb1f196a617e0ed12e259a4f31cee88b/Wiring-x86-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0972a18ffda5e62559265015b4dfcdc", "sha256": "6e4df802cd9b3e35c9d18ef52f832c8729948d46a4044d437bdfb4fa9cf7f4b2"}, "downloads": -1, "filename": "Wiring-x86-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c0972a18ffda5e62559265015b4dfcdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9890, "upload_time": "2014-10-14T16:03:36", "upload_time_iso_8601": "2014-10-14T16:03:36.400301Z", "url": "https://files.pythonhosted.org/packages/54/68/849eb1b2afafb090112a0df009f2bb1f196a617e0ed12e259a4f31cee88b/Wiring-x86-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:40 2020"}