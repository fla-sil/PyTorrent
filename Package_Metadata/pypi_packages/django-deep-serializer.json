{"info": {"author": "Pablo Martin", "author_email": "goinnn@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)"], "description": ".. contents::\n\n======================\ndjango-deep-serializer\n======================\n\n.. image:: https://travis-ci.org/goinnn/django-deep-serializer.png?branch=master\n    :target: https://travis-ci.org/goinnn/django-deep-serializer\n\n.. image:: https://coveralls.io/repos/goinnn/django-deep-serializer/badge.png?branch=master\n    :target: https://coveralls.io/r/goinnn/django-deep-serializer\n\n.. image:: https://badge.fury.io/py/django-deep-serializer.png\n    :target: https://badge.fury.io/py/django-deep-serializer\n\n.. image:: https://pypip.in/d/django-deep-serializer/badge.png\n    :target: https://pypi.python.org/pypi/django-deep-serializer\n\nWith django-deep-serializer you can serialize/deserialize an object and its relations through class definitions\n\nRequeriments\n============\n\n* `django <http://pypi.python.org/pypi/django/>`_ (>=1.4, it's possible that works with previous versions)\n* `PyYAML <https://pypi.python.org/pypi/PyYAML>`_ (>=3.10, optional only if you want use this serializer)\n* `django-form-admin <https://pypi.python.org/pypi/django-form-admin>`_ (>=0.4.2, optional only to the example project)\n\n\nInstallation\n============\n\nIf you want use natural keys, you have use the `internal serializers <https://github.com/goinnn/django-deep-serializer/commit/35190702bbd00324a1bb526a2aa842405e241bd3>`_ These are got from django git repository. These are not in the any stable branch or release. You have to write in your settings:\n\n::\n\n    SERIALIZATION_MODULES = {\n        \"xml\"    : \"deep_serializer.serializers.xml_serializer\",\n        \"python\" : \"deep_serializer.serializers.python\",\n        \"json\"   : \"deep_serializer.serializers.json\",\n        #\"yaml\"   : \"deep_serializer.serializers.pyyaml\",\n    }\n\nUse cases\n=========\n\n* Serialize (using primary keys or natural keys) an object and its relations. Sometimes django can not serialize an app. E.g. if you try to serialize the \"example.app\" application in the example project you will get the next error: \"CommandError: Unable to serialize database: Can't resolve dependencies for app.Page, app.WebSite in serialized app list.\"\n* Deserialize (using primary keys or natural keys) some objects\n* Clone (using natural keys) an object. To do you can serialize, update the natural key to the main object and after deserialize these objects\n* Restore an object with its relations, (using primary keys or natural keys)\n\nHow to use\n==========\n\nThe idea is get to have a serializer or/and a deserializer implemented with very few lines. These have to be able to define some \"rules\".\nThere are five examples (five distinct use case) in the `example project <https://github.com/goinnn/django-deep-serializer/blob/master/example/example/app/serializer.py>`_. E.g.:\n\n::\n\n    class WebSiteClone(MyMetaWalkClass):\n\n        @classmethod\n        def pre_serialize(cls, initial_obj, obj, request, serialize_options=None):\n            obj = super(WebSiteClone, cls).pre_serialize(initial_obj, obj,\n                                                        request,\n                                                        serialize_options=serialize_options)\n            new_title = '%s-%s' % (obj.title, time.time())\n            obj.title = new_title[:200]\n            obj.slug = get_hash()\n            obj.original_website_id = obj.pk\n            obj.initial_page = None\n            return obj\n\n        @classmethod\n        def walking_into_class(cls, initial_obj, obj, field_name, model, request=None):\n            if field_name in ('initial_page', 'websites_created_of'):\n                return WALKING_STOP\n            elif field_name in ('original_website', 'owners'):\n                return ONLY_REFERENCE\n            elif field_name == 'page':\n                return WALKING_INTO_CLASS\n            update_the_serializer(obj, field_name)\n\n\n    class PageClone(MyMetaWalkClass):\n\n        @classmethod\n        def pre_serialize(cls, initial_obj, obj, request, serialize_options=None):\n            obj = super(PageClone, cls).pre_serialize(initial_obj,\n                                                    obj, request,\n                                                    serialize_options=serialize_options)\n            obj.website = initial_obj\n            obj.created_from_id = obj.pk\n            return obj\n\n        @classmethod\n        def walking_into_class(cls, initial_obj, obj, field_name, model, request=None):\n            if field_name in ('pages_created_of', 'website', 'website_initial_page'):\n                return WALKING_STOP\n            elif field_name in ('created_from', 'last_editor'):\n                return ONLY_REFERENCE\n            update_the_serializer(obj, field_name)\n\n        @classmethod\n        def post_save(cls, initial_obj, obj, request=None):\n            super(PageClone, cls).post_save(initial_obj, obj, request=request)\n            initial_page = obj.created_from.website.initial_page\n            if initial_page and obj.slug == initial_page.slug:\n                obj.website.initial_page = obj\n                obj.website.save()\n\n\n    def clone_website(website, format='python'):\n        walking_classes = {WebSite: WebSiteClone,\n                           Page: PageClone,\n                           User: BaseMetaWalkClass}\n        natural_keys = True\n        fixtures = serializer(format, website,\n                              walking_classes=walking_classes,\n                              natural_keys=natural_keys)\n        return deserializer(format, fixtures,\n                            initial_obj=website,\n                            walking_classes=walking_classes,\n                            natural_keys=natural_keys)\n\nYou can see a real example in `moocng project <https://github.com/OpenMOOC/moocng/blob/feature-clone-course/moocng/courses/serializer.py>`_\n\nDevelopment\n===========\n\nYou can get the last bleeding edge version of django-deep-serializer by doing a clone\nof its git repository::\n\n  git clone https://github.com/goinnn/django-deep-serializer\n\n\nTest project\n============\n\nIn the source tree, you will find a directory called 'example'. It contains\na readily setup project that uses django-deep-serializer. You can run it as usual:\n\n::\n\n    python manage.py syncdb --noinput\n    python manage.py loaddata app_data.json\n    python manage.py runserver\n\n\nReleases\n========\n\n0.1.3 (2014-10-13)\n-------------------\n* Support to Django 1.7\n\n0.1.2 (2013-11-14)\n------------------\n\n* Little details\n\n0.1.1 (2013-11-13)\n------------------\n\n* Add tests to django 1.6\n* Update the django 1.5 version, from 1.5.4 to 1.5.5\n\n0.1.0 (2013-11-05)\n------------------\n\n* Fix a bug when you deserializer and the format to the fixtures was XML\n* Add message when raise exceptions\n* Improvements in the serialization form in the example project\n* Fix a little error when you serialized and the format was python\n* Reorder and refactor the code. **There are backward incompatible changes** like reorder of the params of the methods\n* Improvements in the tests\n\n\n\n0.0.1 (2013-10-29)\n------------------\n\n* Initial version", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goinnn/django-deep-serializer", "keywords": "django,serializer,deep,deep serializer,deserialize,deep deserialize", "license": "LGPL 3", "maintainer": null, "maintainer_email": null, "name": "django-deep-serializer", "package_url": "https://pypi.org/project/django-deep-serializer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-deep-serializer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/goinnn/django-deep-serializer"}, "release_url": "https://pypi.org/project/django-deep-serializer/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Serialize/Deserialize an object and its relations through class definitions", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#django-deep-serializer\" id=\"id6\" rel=\"nofollow\">django-deep-serializer</a><ul>\n<li><a href=\"#requeriments\" id=\"id7\" rel=\"nofollow\">Requeriments</a></li>\n<li><a href=\"#installation\" id=\"id8\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#use-cases\" id=\"id9\" rel=\"nofollow\">Use cases</a></li>\n<li><a href=\"#how-to-use\" id=\"id10\" rel=\"nofollow\">How to use</a></li>\n<li><a href=\"#development\" id=\"id11\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"#test-project\" id=\"id12\" rel=\"nofollow\">Test project</a></li>\n<li><a href=\"#releases\" id=\"id13\" rel=\"nofollow\">Releases</a><ul>\n<li><a href=\"#id1\" id=\"id14\" rel=\"nofollow\">0.1.3 (2014-10-13)</a></li>\n<li><a href=\"#id2\" id=\"id15\" rel=\"nofollow\">0.1.2 (2013-11-14)</a></li>\n<li><a href=\"#id3\" id=\"id16\" rel=\"nofollow\">0.1.1 (2013-11-13)</a></li>\n<li><a href=\"#id4\" id=\"id17\" rel=\"nofollow\">0.1.0 (2013-11-05)</a></li>\n<li><a href=\"#id5\" id=\"id18\" rel=\"nofollow\">0.0.1 (2013-10-29)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"django-deep-serializer\">\n<h2><a href=\"#id6\" rel=\"nofollow\">django-deep-serializer</a></h2>\n<a href=\"https://travis-ci.org/goinnn/django-deep-serializer\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/goinnn/django-deep-serializer.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d68fa6f80ba0ef3184da623e9b6d182f392132fc/68747470733a2f2f7472617669732d63692e6f72672f676f696e6e6e2f646a616e676f2d646565702d73657269616c697a65722e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/goinnn/django-deep-serializer\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/goinnn/django-deep-serializer/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15e844f8b82bb7e67356041d36cffa7ecfa02cac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f676f696e6e6e2f646a616e676f2d646565702d73657269616c697a65722f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/django-deep-serializer\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-deep-serializer.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbef48eee34d6e49369a9d71f7d9fd91bf4d3ab9/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d646565702d73657269616c697a65722e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/django-deep-serializer\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/django-deep-serializer/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/094a74c70306f76fa0bfaaf433d0827d6f3788aa/68747470733a2f2f70797069702e696e2f642f646a616e676f2d646565702d73657269616c697a65722f62616467652e706e67\"></a>\n<p>With django-deep-serializer you can serialize/deserialize an object and its relations through class definitions</p>\n<div id=\"requeriments\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Requeriments</a></h3>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/django/\" rel=\"nofollow\">django</a> (&gt;=1.4, it\u2019s possible that works with previous versions)</li>\n<li><a href=\"https://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">PyYAML</a> (&gt;=3.10, optional only if you want use this serializer)</li>\n<li><a href=\"https://pypi.python.org/pypi/django-form-admin\" rel=\"nofollow\">django-form-admin</a> (&gt;=0.4.2, optional only to the example project)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Installation</a></h3>\n<p>If you want use natural keys, you have use the <a href=\"https://github.com/goinnn/django-deep-serializer/commit/35190702bbd00324a1bb526a2aa842405e241bd3\" rel=\"nofollow\">internal serializers</a> These are got from django git repository. These are not in the any stable branch or release. You have to write in your settings:</p>\n<pre>SERIALIZATION_MODULES = {\n    \"xml\"    : \"deep_serializer.serializers.xml_serializer\",\n    \"python\" : \"deep_serializer.serializers.python\",\n    \"json\"   : \"deep_serializer.serializers.json\",\n    #\"yaml\"   : \"deep_serializer.serializers.pyyaml\",\n}\n</pre>\n</div>\n<div id=\"use-cases\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Use cases</a></h3>\n<ul>\n<li>Serialize (using primary keys or natural keys) an object and its relations. Sometimes django can not serialize an app. E.g. if you try to serialize the \u201cexample.app\u201d application in the example project you will get the next error: \u201cCommandError: Unable to serialize database: Can\u2019t resolve dependencies for app.Page, app.WebSite in serialized app list.\u201d</li>\n<li>Deserialize (using primary keys or natural keys) some objects</li>\n<li>Clone (using natural keys) an object. To do you can serialize, update the natural key to the main object and after deserialize these objects</li>\n<li>Restore an object with its relations, (using primary keys or natural keys)</li>\n</ul>\n</div>\n<div id=\"how-to-use\">\n<h3><a href=\"#id10\" rel=\"nofollow\">How to use</a></h3>\n<p>The idea is get to have a serializer or/and a deserializer implemented with very few lines. These have to be able to define some \u201crules\u201d.\nThere are five examples (five distinct use case) in the <a href=\"https://github.com/goinnn/django-deep-serializer/blob/master/example/example/app/serializer.py\" rel=\"nofollow\">example project</a>. E.g.:</p>\n<pre>class WebSiteClone(MyMetaWalkClass):\n\n    @classmethod\n    def pre_serialize(cls, initial_obj, obj, request, serialize_options=None):\n        obj = super(WebSiteClone, cls).pre_serialize(initial_obj, obj,\n                                                    request,\n                                                    serialize_options=serialize_options)\n        new_title = '%s-%s' % (obj.title, time.time())\n        obj.title = new_title[:200]\n        obj.slug = get_hash()\n        obj.original_website_id = obj.pk\n        obj.initial_page = None\n        return obj\n\n    @classmethod\n    def walking_into_class(cls, initial_obj, obj, field_name, model, request=None):\n        if field_name in ('initial_page', 'websites_created_of'):\n            return WALKING_STOP\n        elif field_name in ('original_website', 'owners'):\n            return ONLY_REFERENCE\n        elif field_name == 'page':\n            return WALKING_INTO_CLASS\n        update_the_serializer(obj, field_name)\n\n\nclass PageClone(MyMetaWalkClass):\n\n    @classmethod\n    def pre_serialize(cls, initial_obj, obj, request, serialize_options=None):\n        obj = super(PageClone, cls).pre_serialize(initial_obj,\n                                                obj, request,\n                                                serialize_options=serialize_options)\n        obj.website = initial_obj\n        obj.created_from_id = obj.pk\n        return obj\n\n    @classmethod\n    def walking_into_class(cls, initial_obj, obj, field_name, model, request=None):\n        if field_name in ('pages_created_of', 'website', 'website_initial_page'):\n            return WALKING_STOP\n        elif field_name in ('created_from', 'last_editor'):\n            return ONLY_REFERENCE\n        update_the_serializer(obj, field_name)\n\n    @classmethod\n    def post_save(cls, initial_obj, obj, request=None):\n        super(PageClone, cls).post_save(initial_obj, obj, request=request)\n        initial_page = obj.created_from.website.initial_page\n        if initial_page and obj.slug == initial_page.slug:\n            obj.website.initial_page = obj\n            obj.website.save()\n\n\ndef clone_website(website, format='python'):\n    walking_classes = {WebSite: WebSiteClone,\n                       Page: PageClone,\n                       User: BaseMetaWalkClass}\n    natural_keys = True\n    fixtures = serializer(format, website,\n                          walking_classes=walking_classes,\n                          natural_keys=natural_keys)\n    return deserializer(format, fixtures,\n                        initial_obj=website,\n                        walking_classes=walking_classes,\n                        natural_keys=natural_keys)\n</pre>\n<p>You can see a real example in <a href=\"https://github.com/OpenMOOC/moocng/blob/feature-clone-course/moocng/courses/serializer.py\" rel=\"nofollow\">moocng project</a></p>\n</div>\n<div id=\"development\">\n<h3><a href=\"#id11\" rel=\"nofollow\">Development</a></h3>\n<p>You can get the last bleeding edge version of django-deep-serializer by doing a clone\nof its git repository:</p>\n<pre>git clone https://github.com/goinnn/django-deep-serializer\n</pre>\n</div>\n<div id=\"test-project\">\n<h3><a href=\"#id12\" rel=\"nofollow\">Test project</a></h3>\n<p>In the source tree, you will find a directory called \u2018example\u2019. It contains\na readily setup project that uses django-deep-serializer. You can run it as usual:</p>\n<pre>python manage.py syncdb --noinput\npython manage.py loaddata app_data.json\npython manage.py runserver\n</pre>\n</div>\n<div id=\"releases\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Releases</a></h3>\n<div id=\"id1\">\n<h4><a href=\"#id14\" rel=\"nofollow\">0.1.3 (2014-10-13)</a></h4>\n<ul>\n<li>Support to Django 1.7</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h4><a href=\"#id15\" rel=\"nofollow\">0.1.2 (2013-11-14)</a></h4>\n<ul>\n<li>Little details</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4><a href=\"#id16\" rel=\"nofollow\">0.1.1 (2013-11-13)</a></h4>\n<ul>\n<li>Add tests to django 1.6</li>\n<li>Update the django 1.5 version, from 1.5.4 to 1.5.5</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h4><a href=\"#id17\" rel=\"nofollow\">0.1.0 (2013-11-05)</a></h4>\n<ul>\n<li>Fix a bug when you deserializer and the format to the fixtures was XML</li>\n<li>Add message when raise exceptions</li>\n<li>Improvements in the serialization form in the example project</li>\n<li>Fix a little error when you serialized and the format was python</li>\n<li>Reorder and refactor the code. <strong>There are backward incompatible changes</strong> like reorder of the params of the methods</li>\n<li>Improvements in the tests</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4><a href=\"#id18\" rel=\"nofollow\">0.0.1 (2013-10-29)</a></h4>\n<ul>\n<li>Initial version</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1268862, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d2204edfbfef2038251a4cb21ca0d705", "sha256": "c57eb01265e1a75833fa6d60011e79cab7f8d86fd0f1ddc75007ee2372cb24c2"}, "downloads": -1, "filename": "django-deep-serializer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d2204edfbfef2038251a4cb21ca0d705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21649, "upload_time": "2013-10-29T10:50:24", "upload_time_iso_8601": "2013-10-29T10:50:24.788946Z", "url": "https://files.pythonhosted.org/packages/61/45/e054d5a4eccda518b7eb0f5a39bfe1518b8ce499469416d9de92752a7a47/django-deep-serializer-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "fbae5ef8fd557db507e32d22b8cd746e", "sha256": "e6164332ce8161538bd99692e7296aa007222b06d192917d085ac7d3d0cd7bf0"}, "downloads": -1, "filename": "django-deep-serializer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fbae5ef8fd557db507e32d22b8cd746e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22502, "upload_time": "2013-11-05T11:07:55", "upload_time_iso_8601": "2013-11-05T11:07:55.001112Z", "url": "https://files.pythonhosted.org/packages/d5/19/280fbb4ede471c17cb266c381b12791f2b0c67d3dd83c2d531157d5c2e24/django-deep-serializer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f33473b5956ac7dbdca3570670ad7846", "sha256": "03474eb0148a459610b8754f27e25261c8909d20823911aa8304e8566a54bce0"}, "downloads": -1, "filename": "django-deep-serializer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f33473b5956ac7dbdca3570670ad7846", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22686, "upload_time": "2013-11-13T16:08:48", "upload_time_iso_8601": "2013-11-13T16:08:48.409140Z", "url": "https://files.pythonhosted.org/packages/d7/87/65b40109f31c0bcc13dbca4e1df611b10a8191d40ed46db5b25e43387a3f/django-deep-serializer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "1058c875e116fd596f258d6ca6a2cb7e", "sha256": "0600d8519786a1c2e1562c1ac8cfc2f0d548127faeb6618740978c999b088e31"}, "downloads": -1, "filename": "django-deep-serializer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1058c875e116fd596f258d6ca6a2cb7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22721, "upload_time": "2013-11-14T19:22:16", "upload_time_iso_8601": "2013-11-14T19:22:16.803576Z", "url": "https://files.pythonhosted.org/packages/ee/ae/5e32ec415e26c04e9d5537f1c77c1ed50598916d5905273c1ab1306d8f40/django-deep-serializer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "532d138549bff2e4b73a1ce25a08d690", "sha256": "7054f4d51f345748a52d2b867431040657421de74c6d2c8623082fdfb7d418d0"}, "downloads": -1, "filename": "django-deep-serializer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "532d138549bff2e4b73a1ce25a08d690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22796, "upload_time": "2014-10-13T16:17:23", "upload_time_iso_8601": "2014-10-13T16:17:23.429931Z", "url": "https://files.pythonhosted.org/packages/37/9a/5a2221c42bdc42ccf5b7621b72b6fd48023e0fee224f1ff725c2157c12f9/django-deep-serializer-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "532d138549bff2e4b73a1ce25a08d690", "sha256": "7054f4d51f345748a52d2b867431040657421de74c6d2c8623082fdfb7d418d0"}, "downloads": -1, "filename": "django-deep-serializer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "532d138549bff2e4b73a1ce25a08d690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22796, "upload_time": "2014-10-13T16:17:23", "upload_time_iso_8601": "2014-10-13T16:17:23.429931Z", "url": "https://files.pythonhosted.org/packages/37/9a/5a2221c42bdc42ccf5b7621b72b6fd48023e0fee224f1ff725c2157c12f9/django-deep-serializer-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:36 2020"}