{"info": {"author": "Simon Ekstr\u00f6m", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# deform\n\ndeform is an implementation of an efficient graph-cut based method for dense deformable image registration. If you find this useful, please cite https://arxiv.org/abs/1810.08427.\n\nThe method can be used either as a module through Python (recommended) or a standalone executable. Currently no pre-built binaries for the standalone executable are provided, but the Python module (excluding GPU support) can be installed through pip.\n\n## Install\n\nTo download and install the pre-compiled Python module from pip:\n\n```\npip install pydeform\n```\n\nNote: to enable GPU-supported registration you're required to compile the software yourself. See the section below. \n\n## Building\n\n### Prerequisites\n* CMake : https://cmake.org/\n\nOptional\n* ISPC : https://ispc.github.io/\n\n### Download\n\nRetrieve the repository and associated dependencies by running\n\n```\n$ git clone https://github.com/simeks/deform.git\n$ cd deform\n$ git submodule update --init --recursive\n```\n\n### Python\n```\n# python setup.py install\n```\n\nFlags accepted by `setup.py`:\n* `--use-cuda`: build with CUDA support\n* `--use-ispc`: build with ISPC support\n* `--use-itk`: build with ITK support\n* `--debug`: build with debug symbols\n\nAdditional flags starting with `-D` are also recognised and forwarded to CMake. See [C++ section](#build_options) for available build options.\n\n### C++\n\nUse CMake (>=3.8) to generate build options of your own choosing.\n\nIf CMake cannot find the ISPC executable on your installation, it is possible\nto hint the installation directory with `-DISPC_DIR_HINTS`, or to specify the\nfull path to the executable with `-DISPC_EXECUTABLE`.\n\n#### <a name=\"build_options\"></a>Build options\n\nThe build can be configured with the following CMake boolean options:\n\n+ `DF_BUILD_TESTS`: Build unit tests (default: `OFF`)\n+ `DF_BUILD_DOCS`: Build Sphinx docs (default: `OFF`)\n+ `DF_BUILD_EXECUTABLE`: Build registration executable (default: `ON`)\n+ `DF_BUILD_PYTHON_WRAPPER`: Build Python wrapper (default: `OFF`)\n+ `DF_USE_CUDA`: Enable CUDA support (default: `OFF`)\n+ `DF_USE_ISPC`: Enable ISPC support (default: `OFF`)\n+ `DF_WARNINGS_ARE_ERRORS`: Warnings are treated as errors (default: `OFF`)\n+ `DF_BUILD_WITH_DEBUG_INFO`: Include debug info in release builds (default: `OFF`)\n+ `DF_ENABLE_FAST_MATH`: Enable fast math (default: `OFF`)\n+ `DF_ITK_BRIDGE`: Add support to interoperate with ITK (default: `OFF`)\n+ `DF_STACK_TRACE`: Print a stack trace on errors (default: `OFF`)\n+ `DF_ENABLE_MICROPROFILE`: Enable `microprofile` profiler (default: `OFF`)\n+ `DF_ENABLE_NVTOOLSEXT`: Enable `nvtoolsext` profiler (default: `OFF`)\n\n# Run\n\n## Examples\n\nExamples on how to run the registration can be found in the [examples](https://github.com/simeks/deform/tree/development/examples) subfolder.\n\n## Python\n\nEverything needed for a simple registration setup is located in the `pydeform` package. The package provides two APIs; first uses `pydeform.Volume` for handling images and the second uses `SimpleITK`.\n\n### pydeform API\n\nThis API uses `pydeform.Volume` which is a direct wrapper around the internal `Volume` class used within deform.\n\n```python\nimport pydeform\n\nfixed = pydeform.read_volume('fixed_file.nrrd')\nmoving = pydeform.read_volume('moving_file.nrrd')\naffine_transform = pydeform.read_affine_transform('affine.txt')\n\nsettings = {\n  'pyramid_levels': 4\n}\n\ndf = pydeform.register(\n  fixed,\n  moving,\n  settings=settings,\n  affine_transform=affine_transform\n)\npydeform.write_volume('result.nrrd', df)\n```\n\n### SimpleITK API\n\n[SimpleITK](http://www.simpleitk.org/) is a simplified layer built on top of [ITK](https://itk.org/) that provides a wide array of different filters and supports a larger variety of image formats compared to the `pydeform` API.\n\nThe API itself is similar to the `pydeform` API with the exception that it takes `SimpleITK.Image` as input for images and `SimpleITK.AffineTransform` as input for affine transforms. To use this API simply use `import pydeform.sitk_api as pydeform`.\n\n```python\nimport SimpleITK as sitk\nimport pydeform.sitk_api as pydeform\n\nfixed = sitk.ReadImage('fixed_file.nrrd')\nmoving = sitk.ReadImage('moving_file.nrrd')\naffine_transform = sitk.ReadTransform('affine.txt')\n\nsettings = {\n  'pyramid_levels': 4\n}\n\ndf = pydeform.register(\n  fixed,\n  moving,\n  settings=settings,\n  affine_transform=sitk.AffineTransform(affine_transform)\n)\nsitk.WriteImage(df, 'result.nrrd')\n```\n\n### Settings\n\nThe Python API provides the same [parameters](#registration_settings) as the command-line interface. However, rather the specifying the parameters in a YAML-document, the parameters are set by passing a `dict` object to the registration.\n\n```python\nsettings = {\n  'pyramid_levels': 4,\n\n  'levels': {\n    '0': {'max_iteration_count': 20}\n  }\n\n  'image_slots': [\n    {'cost_function': 'ncc'}\n  ]\n}\npydeform.register(fixed, moving, settings=settings)\n```\n\n\n## Command-line\n\nTo perform a registration using the standalone executable\n\n`deform registration -p <param file> -f0 <fixed_0> ... -f<i> <fixed_i> -m0 <moving_0> ... -m<i> <moving_i>`\n\n| Argument                    |                                             |\n| --------------------------- | ------------------------------------------- |\n| `-f<i> <file>`              | Filename of the i:th fixed image.\u2020          |\n| `-m<i> <file>`              | Filename of the i:th moving image.\u2020         |\n| `-fm <file>`                | Filename of the fixed mask.\u2021                |\n| `-mm <file>`                | Filename of the moving mask.\u2021               |\n| `-fp <file>`                | Filename for the fixed landmarks.           |\n| `-mp <file>`                | Filename for the moving landmarks.          |\n| `-d0 <file>`                | Filename for initial deformation field.     |\n| `-a <file>`                 | Filename for initial affine transformation  |\n| `-constraint_mask <file>`   | Filename for constraint mask.               |\n| `-constraint_values <file>` | Filename for constraint values.             |\n| `-rm <file>`                | Filename for regularization weight map      |\n| `-p <file>`                 | Filename of the parameter file.             |\n| `-o <file>`                 | Filename of the resulting deformation field |\n| `-j <file>`                 | Filename of the resulting jacobian map      |\n| `-t <file>`                 | Filename of the transformed moving volume   |\n| `--gpu`                     | Enables GPU assisted registration.          |\n\n\n\u2020 Requires a matching number of fixed and moving images.\n\n\u2021 Fuzzy masks in floating point format, whose values denote the confidence on\n  the image intensity at each point.\n\n### <a name=\"registration_settings\"></a>Parameter file example\n\n```yaml\npyramid_levels: 6\npyramid_stop_level: 0\nsolver: gco\nupdate_rule: additive\nconstraints_weight: 1000.0\nlandmarks_weight: 1.0\nlandmarks_decay: 2.0\nlandmarks_stop_level: 0\nblock_size: [16, 16, 16]\nblock_energy_epsilon: 1e-7\nmax_iteration_count: -1\nstep_size: 0.5\nregularization_weight: 0.1\nregularization_scale: 1.0\nregularization_exponent: 2.0\n\nlevels:\n  0:\n    regularization_weight: 0.1\n  1:\n    regularization_weight: 0.2\n    step_size: 0.01\n\nimage_slots:\n\n  # water\n  - resampler: gaussian\n    normalize: true\n    cost_function:\n      - function: ssd\n        weight: 0.3\n      - function: ncc\n        weight: 0.4\n        radius: 2\n        window: cube\n      - function: mi\n        weight: 0.6\n        sigma: 4.5\n        bins: 256\n        update_interval: 1\n        interpolator: nearest\n      - function: gradient_ssd\n        weight: 0.7\n        sigma: 1.0\n\n  # sfcm\n  - resampler: gaussian\n    normalize: true\n    cost_function: ssd\n```\n\nFirst two parameters, `pyramid_levels` and `pyramid_stop_level`, defines the\nsize of the pyramid and at which level to stop the registration. Each level\nhalves the resolution of the input volumes. Setting `pyramid_stop_level` to > 0\nspecifies that the registration should not be run on the original resolution\n(level 0).\n\n`solver` selects which solver to use for the energy minimization. Available\nsolvers are `gco`, `gridcut`, and `icm`. Note: deform needs to be compiled with\n`DF_ENABLE_GCO` and `DF_ENABLE_GRIDCUT` for `gco` and `gridcut` to be enabled.\n\n`update_rule` specifies the update rule for updating the displacement field.\nThis can be either `additive` or `compositive`. The first option updates the\ndisplacement field according to `u(x) = u(x) + delta`, while the second uses\ncomposition, i.e., `u(x) = u(x+delta) + delta`. Compositive updates should\nproduce a more diffeomorphic transformation. Note: compositive updates are\nstill considered an experimental feature.\n\n`constraints_weight` sets the weight that is applied for constrained voxels. A\nreally high value means hard constraints while a lower value may allow\nconstraints to move a certain amount. Cost for constrained voxels are applied\nas constraint_weight * squared_distance, where squared_distance is the distance\nfrom the constraint target. See cost function for more info.\n\n`landmarks_weight` sets the weight for the landmark cost term when performing\nlandmark-based registration.  In order to perform landmark-based registration,\na set of fixed and moving landmarks must be supplied.  The implementation of\nthe landmark-based unary energy term is inspired to [[2]](#2), but the cost in\neach term of the sum is also proportional to the distance between the current\ndisplacement and the landmark displacement. It is possible to limit the usage\nof the landmarks up to a certain height of the resolution pyramid by assigning\nto `landmarks_stop_level` a value greater than zero. `landmarks_decay` controls\nthe exponential decay of the landmarks effect with respect to distance in image\nspace: higher values correspond to faster decay.\n\n`block_size` size of the block (in voxels) for the block-wise solver. A block\nsize of (0,0,0) will result in a single block for the whole volume.\n\n`block_energy_epsilon`, minimum percentage decrease of the block energy\nrequired to accept a solution. Higher epsilon will result in lower run time but\nalso lower quality.\n\n`max_iteration_count`, maximum number of iterations run on each registration\nlevel. Setting this to -1 (default) allows an unlimited number of iterations.\n\n`step_size`, this is the step size in `mm` that the solver will use. Can be a\nsingle `float` value, in that case the same step size will be used in all\ndirections, or a sequence `[sx, sy, sz]` of three `float` specifying the size\nfor each direction.\n\n`regularization_weight`, `regularization_scale`, and `regularization_exponent`\ncontrol the importance of the regularization term. The cost function is\nspecified as `cost = D + a*((b*R)^c)`, where `D = \u03a3w_i*C_i` is the data term\ngiven by the cost functions `C_i` with weights `w_i`, `R` is the regularization\nterm, `a` is the regularization weight, `b` the regularization scale, and `c`\nthe regularization exponent.\n\n`levels`, specifies parameters on a per-level basis. The key indicates which\nlevel the parameters apply to, where 0 is the bottom of the resolution pyramid\n(last level). The level identifier can not exceed `pyramid_levels`. Parameters\navailable on a per-level basis are: `constraints_weight`, `landmarks_weight`,\n`block_size`, `block_energy_epsilon`, `max_iteration_count`, `step_size`, and\n`regularization_weight`.\n\n`image_slots`, specifies how to use the input images. `resampler` only supports\n`gaussian` for now, `normalize` specifies whether the volumes should be\nnormalized before the registration, and `cost_function` allows to provide one\nor more cost functions to use. Its value can be the name of a single function\n(`ssd` for squared distance, `ncc` for normalized cross correlation, `mi` for\nmutual information, `gradient_ssd` for squared distance of the gradients), in\nwhich case its weight is assumed to be `1.0`, otherwise one or multiple\nweighted components can be specified by listing each function and its weight.\nEach function can accept a set of parameters.\n\nThe parameters available for each function are:\n+ `ssd`: no parameters available\n+ `ncc`:\n  + `window` (`string`): shape of the correlation window, either `sphere` or\n      `cube` (default: `spere`). Note that `cube` is available only if the\n      program is built with ISPC support. For a given number of samples, the\n      sphere has a better spatial distribution of the samples, yielding a\n      slightly superior quality. When running on the CPU, for the same number\n      of samples (e.g., roughly, a sphere of radius `2` and a cube of radius\n      `1`) the cube can be significantly faster to compute.\n  + `radius` (`int`): radius of the cross-correlation kernel (default: `2`).\n      For `window=sphere`, given a point where NCC is evaluated, samples are\n      taken in all the voxels such that the Euclidean distance of each sample\n      from the point is lesser or equal to `radius`.  For `window=cube`,\n      samples are taken on all voxels within a cube centred on the point and\n      with side `2\u00d7radius + 1`.\n+ `mi`:\n  + `bins` (`int`): number of histogram bins used in the approximation of\n      probability densities (default: `255`)\n  + `sigma` (`float`): standard deviation of the Gaussian kernel used to\n      approximate probability densities (default: `4.5`)\n  + `update_interval` (`int`): interval (in iterations) between updates of the\n      entropy estimates (default: `1`). If `0`, updates are disabled.\n  + `interpolator` (`'linear'` or `'nearest'`): interpolator used in the update\n      the entropy estimates (default: `'nearest'`)\n+ `gradient_ssd`:\n  + `sigma` (`float`): Gaussian smoothing applied to the images before\n      computing the Sobel operator (default: `0.0`)\n\n### GPU\n\nGPU assisted registration is supported on newer CUDA supported hardware. First\nstep to enable GPU registration is to compile with the `DF_USE_CUDA=1` flag,\nthis is set when generating the project with CMake. When both these\nprerequisites are met, you simply add the `--gpu` flag to the command-line.\n\nAs for now the GPU implementation is considered a pre-release and not all cost\nfunctions and features from the original registration implementation are\nsupported. Currently the only two supported cost functions are `ssd` and `ncc`.\n\n### Logging\n\nThe file name for the log file can be specified through the environment\nvariable `DF_LOG_FILE`. The minimum level for log messages to be reported can\nbe set through the environment variable `DF_LOG_LEVEL`, and the possible values\nare `Verbose`, `Info`, `Warning`, `Error`, and `Fatal`.\n\n### Masks\n\nIt is possible to optionally specify fuzzy masks for the fixed and moving image\nspace. The two masks can be set independently, and it is possible to use no\nmask, only one of the two (either fixed or moving) or both. The masks should be\ngiven in floating point format, and they denote the level of confidence on\nimage intensity at each voxel. If the mask value `m(x, y, z)` at a certain\nlocation `(x, y, z)` is lesser than or equal to zero, then samples taken at\nthat location will not contribute to the matching cost. If `m(x, y, z)` is\ngreater than zero, then the sample will contribute and its cost given at that\nlocation by the image metric will by multiplied by `m(x, y, z)`.\n\nThe fixed mask allows to denote a ROI in reference space, formed by all voxels\nwith strictly positive mask values; for all samples outside such ROI the cost\nfunction will not be computed at all, having the side effect of making the\nregistration process faster. If a sample belongs to a valid region, then its\nmapping through the displacement will be computed and, if a mask for the moving\nimage is specified, the sample will contribute only if it falls within a valid\nROI in the moving image space, otherwise it will be discarded. The\nregularisation term is not weighted by the masks, and it will be always\ncomputed over all the volume, regardless of the mask values.\n\nThe moving mask should be used carefully because it can affect the quality of\nthe result, since there is no penalty for mapping from valid samples in\nreference space to regions outside of the moving image mask.\n\n### Regularization weight maps\n\nIt is possible to impose voxel-wise regularization weights in the registration \nby providing a regularization weight map. This is a map of scalar values the\nsame size as the fixed image. In the standard case the binary term is computed\na `a|u(v)-u(w)|`, where `a` is the regularization weight. Using a regularization\nweight map, the weight `a` is computed as `a = 0.5*(W(v) - W(w))`, where `W` is\nthe weight map.\n\n## References\n\n+ <a id=\"1\"></a>[1] Junhwan Kim, Vladimir Kolmogorov, Ramin Zabih:\n  *Visual correspondence using energy minimization and mutual information.*\n  Proceedings of the Ninth IEEE International Conference on Computer Vision,\n  1033-1040, 2003.\n\n+ <a id=\"2\"></a>[2] Herve Lombaert, Yiyong Sun, Farida Cheriet:\n  *Landmark-based non-rigid registration via graph cuts*,\n  International Conference Image Analysis and Recognition, 166\u2013175, 2007", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pydeform", "package_url": "https://pypi.org/project/pydeform/", "platform": "", "project_url": "https://pypi.org/project/pydeform/", "project_urls": null, "release_url": "https://pypi.org/project/pydeform/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>deform</h1>\n<p>deform is an implementation of an efficient graph-cut based method for dense deformable image registration. If you find this useful, please cite <a href=\"https://arxiv.org/abs/1810.08427\" rel=\"nofollow\">https://arxiv.org/abs/1810.08427</a>.</p>\n<p>The method can be used either as a module through Python (recommended) or a standalone executable. Currently no pre-built binaries for the standalone executable are provided, but the Python module (excluding GPU support) can be installed through pip.</p>\n<h2>Install</h2>\n<p>To download and install the pre-compiled Python module from pip:</p>\n<pre><code>pip install pydeform\n</code></pre>\n<p>Note: to enable GPU-supported registration you're required to compile the software yourself. See the section below.</p>\n<h2>Building</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>CMake : <a href=\"https://cmake.org/\" rel=\"nofollow\">https://cmake.org/</a></li>\n</ul>\n<p>Optional</p>\n<ul>\n<li>ISPC : <a href=\"https://ispc.github.io/\" rel=\"nofollow\">https://ispc.github.io/</a></li>\n</ul>\n<h3>Download</h3>\n<p>Retrieve the repository and associated dependencies by running</p>\n<pre><code>$ git clone https://github.com/simeks/deform.git\n$ cd deform\n$ git submodule update --init --recursive\n</code></pre>\n<h3>Python</h3>\n<pre><code># python setup.py install\n</code></pre>\n<p>Flags accepted by <code>setup.py</code>:</p>\n<ul>\n<li><code>--use-cuda</code>: build with CUDA support</li>\n<li><code>--use-ispc</code>: build with ISPC support</li>\n<li><code>--use-itk</code>: build with ITK support</li>\n<li><code>--debug</code>: build with debug symbols</li>\n</ul>\n<p>Additional flags starting with <code>-D</code> are also recognised and forwarded to CMake. See <a href=\"#build_options\" rel=\"nofollow\">C++ section</a> for available build options.</p>\n<h3>C++</h3>\n<p>Use CMake (&gt;=3.8) to generate build options of your own choosing.</p>\n<p>If CMake cannot find the ISPC executable on your installation, it is possible\nto hint the installation directory with <code>-DISPC_DIR_HINTS</code>, or to specify the\nfull path to the executable with <code>-DISPC_EXECUTABLE</code>.</p>\n<h4><a></a>Build options</h4>\n<p>The build can be configured with the following CMake boolean options:</p>\n<ul>\n<li><code>DF_BUILD_TESTS</code>: Build unit tests (default: <code>OFF</code>)</li>\n<li><code>DF_BUILD_DOCS</code>: Build Sphinx docs (default: <code>OFF</code>)</li>\n<li><code>DF_BUILD_EXECUTABLE</code>: Build registration executable (default: <code>ON</code>)</li>\n<li><code>DF_BUILD_PYTHON_WRAPPER</code>: Build Python wrapper (default: <code>OFF</code>)</li>\n<li><code>DF_USE_CUDA</code>: Enable CUDA support (default: <code>OFF</code>)</li>\n<li><code>DF_USE_ISPC</code>: Enable ISPC support (default: <code>OFF</code>)</li>\n<li><code>DF_WARNINGS_ARE_ERRORS</code>: Warnings are treated as errors (default: <code>OFF</code>)</li>\n<li><code>DF_BUILD_WITH_DEBUG_INFO</code>: Include debug info in release builds (default: <code>OFF</code>)</li>\n<li><code>DF_ENABLE_FAST_MATH</code>: Enable fast math (default: <code>OFF</code>)</li>\n<li><code>DF_ITK_BRIDGE</code>: Add support to interoperate with ITK (default: <code>OFF</code>)</li>\n<li><code>DF_STACK_TRACE</code>: Print a stack trace on errors (default: <code>OFF</code>)</li>\n<li><code>DF_ENABLE_MICROPROFILE</code>: Enable <code>microprofile</code> profiler (default: <code>OFF</code>)</li>\n<li><code>DF_ENABLE_NVTOOLSEXT</code>: Enable <code>nvtoolsext</code> profiler (default: <code>OFF</code>)</li>\n</ul>\n<h1>Run</h1>\n<h2>Examples</h2>\n<p>Examples on how to run the registration can be found in the <a href=\"https://github.com/simeks/deform/tree/development/examples\" rel=\"nofollow\">examples</a> subfolder.</p>\n<h2>Python</h2>\n<p>Everything needed for a simple registration setup is located in the <code>pydeform</code> package. The package provides two APIs; first uses <code>pydeform.Volume</code> for handling images and the second uses <code>SimpleITK</code>.</p>\n<h3>pydeform API</h3>\n<p>This API uses <code>pydeform.Volume</code> which is a direct wrapper around the internal <code>Volume</code> class used within deform.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydeform</span>\n\n<span class=\"n\">fixed</span> <span class=\"o\">=</span> <span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">read_volume</span><span class=\"p\">(</span><span class=\"s1\">'fixed_file.nrrd'</span><span class=\"p\">)</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">read_volume</span><span class=\"p\">(</span><span class=\"s1\">'moving_file.nrrd'</span><span class=\"p\">)</span>\n<span class=\"n\">affine_transform</span> <span class=\"o\">=</span> <span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">read_affine_transform</span><span class=\"p\">(</span><span class=\"s1\">'affine.txt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'pyramid_levels'</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n  <span class=\"n\">fixed</span><span class=\"p\">,</span>\n  <span class=\"n\">moving</span><span class=\"p\">,</span>\n  <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"p\">,</span>\n  <span class=\"n\">affine_transform</span><span class=\"o\">=</span><span class=\"n\">affine_transform</span>\n<span class=\"p\">)</span>\n<span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">write_volume</span><span class=\"p\">(</span><span class=\"s1\">'result.nrrd'</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<h3>SimpleITK API</h3>\n<p><a href=\"http://www.simpleitk.org/\" rel=\"nofollow\">SimpleITK</a> is a simplified layer built on top of <a href=\"https://itk.org/\" rel=\"nofollow\">ITK</a> that provides a wide array of different filters and supports a larger variety of image formats compared to the <code>pydeform</code> API.</p>\n<p>The API itself is similar to the <code>pydeform</code> API with the exception that it takes <code>SimpleITK.Image</code> as input for images and <code>SimpleITK.AffineTransform</code> as input for affine transforms. To use this API simply use <code>import pydeform.sitk_api as pydeform</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">SimpleITK</span> <span class=\"k\">as</span> <span class=\"nn\">sitk</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pydeform.sitk_api</span> <span class=\"k\">as</span> <span class=\"nn\">pydeform</span>\n\n<span class=\"n\">fixed</span> <span class=\"o\">=</span> <span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">ReadImage</span><span class=\"p\">(</span><span class=\"s1\">'fixed_file.nrrd'</span><span class=\"p\">)</span>\n<span class=\"n\">moving</span> <span class=\"o\">=</span> <span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">ReadImage</span><span class=\"p\">(</span><span class=\"s1\">'moving_file.nrrd'</span><span class=\"p\">)</span>\n<span class=\"n\">affine_transform</span> <span class=\"o\">=</span> <span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">ReadTransform</span><span class=\"p\">(</span><span class=\"s1\">'affine.txt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'pyramid_levels'</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span>\n  <span class=\"n\">fixed</span><span class=\"p\">,</span>\n  <span class=\"n\">moving</span><span class=\"p\">,</span>\n  <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"p\">,</span>\n  <span class=\"n\">affine_transform</span><span class=\"o\">=</span><span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">AffineTransform</span><span class=\"p\">(</span><span class=\"n\">affine_transform</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">WriteImage</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">'result.nrrd'</span><span class=\"p\">)</span>\n</pre>\n<h3>Settings</h3>\n<p>The Python API provides the same <a href=\"#registration_settings\" rel=\"nofollow\">parameters</a> as the command-line interface. However, rather the specifying the parameters in a YAML-document, the parameters are set by passing a <code>dict</code> object to the registration.</p>\n<pre><span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'pyramid_levels'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n\n  <span class=\"s1\">'levels'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'0'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'max_iteration_count'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"s1\">'image_slots'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'cost_function'</span><span class=\"p\">:</span> <span class=\"s1\">'ncc'</span><span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"n\">pydeform</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">fixed</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n</pre>\n<h2>Command-line</h2>\n<p>To perform a registration using the standalone executable</p>\n<p><code>deform registration -p &lt;param file&gt; -f0 &lt;fixed_0&gt; ... -f&lt;i&gt; &lt;fixed_i&gt; -m0 &lt;moving_0&gt; ... -m&lt;i&gt; &lt;moving_i&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-f&lt;i&gt; &lt;file&gt;</code></td>\n<td>Filename of the i:th fixed image.\u2020</td>\n</tr>\n<tr>\n<td><code>-m&lt;i&gt; &lt;file&gt;</code></td>\n<td>Filename of the i:th moving image.\u2020</td>\n</tr>\n<tr>\n<td><code>-fm &lt;file&gt;</code></td>\n<td>Filename of the fixed mask.\u2021</td>\n</tr>\n<tr>\n<td><code>-mm &lt;file&gt;</code></td>\n<td>Filename of the moving mask.\u2021</td>\n</tr>\n<tr>\n<td><code>-fp &lt;file&gt;</code></td>\n<td>Filename for the fixed landmarks.</td>\n</tr>\n<tr>\n<td><code>-mp &lt;file&gt;</code></td>\n<td>Filename for the moving landmarks.</td>\n</tr>\n<tr>\n<td><code>-d0 &lt;file&gt;</code></td>\n<td>Filename for initial deformation field.</td>\n</tr>\n<tr>\n<td><code>-a &lt;file&gt;</code></td>\n<td>Filename for initial affine transformation</td>\n</tr>\n<tr>\n<td><code>-constraint_mask &lt;file&gt;</code></td>\n<td>Filename for constraint mask.</td>\n</tr>\n<tr>\n<td><code>-constraint_values &lt;file&gt;</code></td>\n<td>Filename for constraint values.</td>\n</tr>\n<tr>\n<td><code>-rm &lt;file&gt;</code></td>\n<td>Filename for regularization weight map</td>\n</tr>\n<tr>\n<td><code>-p &lt;file&gt;</code></td>\n<td>Filename of the parameter file.</td>\n</tr>\n<tr>\n<td><code>-o &lt;file&gt;</code></td>\n<td>Filename of the resulting deformation field</td>\n</tr>\n<tr>\n<td><code>-j &lt;file&gt;</code></td>\n<td>Filename of the resulting jacobian map</td>\n</tr>\n<tr>\n<td><code>-t &lt;file&gt;</code></td>\n<td>Filename of the transformed moving volume</td>\n</tr>\n<tr>\n<td><code>--gpu</code></td>\n<td>Enables GPU assisted registration.</td>\n</tr></tbody></table>\n<p>\u2020 Requires a matching number of fixed and moving images.</p>\n<p>\u2021 Fuzzy masks in floating point format, whose values denote the confidence on\nthe image intensity at each point.</p>\n<h3><a></a>Parameter file example</h3>\n<pre><span class=\"nt\">pyramid_levels</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">6</span>\n<span class=\"nt\">pyramid_stop_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"nt\">solver</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">gco</span>\n<span class=\"nt\">update_rule</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">additive</span>\n<span class=\"nt\">constraints_weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1000.0</span>\n<span class=\"nt\">landmarks_weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0</span>\n<span class=\"nt\">landmarks_decay</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2.0</span>\n<span class=\"nt\">landmarks_stop_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0</span>\n<span class=\"nt\">block_size</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">16</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">16</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">16</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">block_energy_epsilon</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1e-7</span>\n<span class=\"nt\">max_iteration_count</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">-1</span>\n<span class=\"nt\">step_size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.5</span>\n<span class=\"nt\">regularization_weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.1</span>\n<span class=\"nt\">regularization_scale</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0</span>\n<span class=\"nt\">regularization_exponent</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2.0</span>\n\n<span class=\"nt\">levels</span><span class=\"p\">:</span>\n  <span class=\"nt\">0</span><span class=\"p\">:</span>\n    <span class=\"nt\">regularization_weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.1</span>\n  <span class=\"nt\">1</span><span class=\"p\">:</span>\n    <span class=\"nt\">regularization_weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.2</span>\n    <span class=\"nt\">step_size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.01</span>\n\n<span class=\"nt\">image_slots</span><span class=\"p\">:</span>\n\n  <span class=\"c1\"># water</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">resampler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">gaussian</span>\n    <span class=\"nt\">normalize</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">cost_function</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">function</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ssd</span>\n        <span class=\"nt\">weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.3</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">function</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ncc</span>\n        <span class=\"nt\">weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.4</span>\n        <span class=\"nt\">radius</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n        <span class=\"nt\">window</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">cube</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">function</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mi</span>\n        <span class=\"nt\">weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.6</span>\n        <span class=\"nt\">sigma</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">4.5</span>\n        <span class=\"nt\">bins</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">256</span>\n        <span class=\"nt\">update_interval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n        <span class=\"nt\">interpolator</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">nearest</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">function</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">gradient_ssd</span>\n        <span class=\"nt\">weight</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.7</span>\n        <span class=\"nt\">sigma</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0</span>\n\n  <span class=\"c1\"># sfcm</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">resampler</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">gaussian</span>\n    <span class=\"nt\">normalize</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n    <span class=\"nt\">cost_function</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ssd</span>\n</pre>\n<p>First two parameters, <code>pyramid_levels</code> and <code>pyramid_stop_level</code>, defines the\nsize of the pyramid and at which level to stop the registration. Each level\nhalves the resolution of the input volumes. Setting <code>pyramid_stop_level</code> to &gt; 0\nspecifies that the registration should not be run on the original resolution\n(level 0).</p>\n<p><code>solver</code> selects which solver to use for the energy minimization. Available\nsolvers are <code>gco</code>, <code>gridcut</code>, and <code>icm</code>. Note: deform needs to be compiled with\n<code>DF_ENABLE_GCO</code> and <code>DF_ENABLE_GRIDCUT</code> for <code>gco</code> and <code>gridcut</code> to be enabled.</p>\n<p><code>update_rule</code> specifies the update rule for updating the displacement field.\nThis can be either <code>additive</code> or <code>compositive</code>. The first option updates the\ndisplacement field according to <code>u(x) = u(x) + delta</code>, while the second uses\ncomposition, i.e., <code>u(x) = u(x+delta) + delta</code>. Compositive updates should\nproduce a more diffeomorphic transformation. Note: compositive updates are\nstill considered an experimental feature.</p>\n<p><code>constraints_weight</code> sets the weight that is applied for constrained voxels. A\nreally high value means hard constraints while a lower value may allow\nconstraints to move a certain amount. Cost for constrained voxels are applied\nas constraint_weight * squared_distance, where squared_distance is the distance\nfrom the constraint target. See cost function for more info.</p>\n<p><code>landmarks_weight</code> sets the weight for the landmark cost term when performing\nlandmark-based registration.  In order to perform landmark-based registration,\na set of fixed and moving landmarks must be supplied.  The implementation of\nthe landmark-based unary energy term is inspired to <a href=\"#2\" rel=\"nofollow\">[2]</a>, but the cost in\neach term of the sum is also proportional to the distance between the current\ndisplacement and the landmark displacement. It is possible to limit the usage\nof the landmarks up to a certain height of the resolution pyramid by assigning\nto <code>landmarks_stop_level</code> a value greater than zero. <code>landmarks_decay</code> controls\nthe exponential decay of the landmarks effect with respect to distance in image\nspace: higher values correspond to faster decay.</p>\n<p><code>block_size</code> size of the block (in voxels) for the block-wise solver. A block\nsize of (0,0,0) will result in a single block for the whole volume.</p>\n<p><code>block_energy_epsilon</code>, minimum percentage decrease of the block energy\nrequired to accept a solution. Higher epsilon will result in lower run time but\nalso lower quality.</p>\n<p><code>max_iteration_count</code>, maximum number of iterations run on each registration\nlevel. Setting this to -1 (default) allows an unlimited number of iterations.</p>\n<p><code>step_size</code>, this is the step size in <code>mm</code> that the solver will use. Can be a\nsingle <code>float</code> value, in that case the same step size will be used in all\ndirections, or a sequence <code>[sx, sy, sz]</code> of three <code>float</code> specifying the size\nfor each direction.</p>\n<p><code>regularization_weight</code>, <code>regularization_scale</code>, and <code>regularization_exponent</code>\ncontrol the importance of the regularization term. The cost function is\nspecified as <code>cost = D + a*((b*R)^c)</code>, where <code>D = \u03a3w_i*C_i</code> is the data term\ngiven by the cost functions <code>C_i</code> with weights <code>w_i</code>, <code>R</code> is the regularization\nterm, <code>a</code> is the regularization weight, <code>b</code> the regularization scale, and <code>c</code>\nthe regularization exponent.</p>\n<p><code>levels</code>, specifies parameters on a per-level basis. The key indicates which\nlevel the parameters apply to, where 0 is the bottom of the resolution pyramid\n(last level). The level identifier can not exceed <code>pyramid_levels</code>. Parameters\navailable on a per-level basis are: <code>constraints_weight</code>, <code>landmarks_weight</code>,\n<code>block_size</code>, <code>block_energy_epsilon</code>, <code>max_iteration_count</code>, <code>step_size</code>, and\n<code>regularization_weight</code>.</p>\n<p><code>image_slots</code>, specifies how to use the input images. <code>resampler</code> only supports\n<code>gaussian</code> for now, <code>normalize</code> specifies whether the volumes should be\nnormalized before the registration, and <code>cost_function</code> allows to provide one\nor more cost functions to use. Its value can be the name of a single function\n(<code>ssd</code> for squared distance, <code>ncc</code> for normalized cross correlation, <code>mi</code> for\nmutual information, <code>gradient_ssd</code> for squared distance of the gradients), in\nwhich case its weight is assumed to be <code>1.0</code>, otherwise one or multiple\nweighted components can be specified by listing each function and its weight.\nEach function can accept a set of parameters.</p>\n<p>The parameters available for each function are:</p>\n<ul>\n<li><code>ssd</code>: no parameters available</li>\n<li><code>ncc</code>:\n<ul>\n<li><code>window</code> (<code>string</code>): shape of the correlation window, either <code>sphere</code> or\n<code>cube</code> (default: <code>spere</code>). Note that <code>cube</code> is available only if the\nprogram is built with ISPC support. For a given number of samples, the\nsphere has a better spatial distribution of the samples, yielding a\nslightly superior quality. When running on the CPU, for the same number\nof samples (e.g., roughly, a sphere of radius <code>2</code> and a cube of radius\n<code>1</code>) the cube can be significantly faster to compute.</li>\n<li><code>radius</code> (<code>int</code>): radius of the cross-correlation kernel (default: <code>2</code>).\nFor <code>window=sphere</code>, given a point where NCC is evaluated, samples are\ntaken in all the voxels such that the Euclidean distance of each sample\nfrom the point is lesser or equal to <code>radius</code>.  For <code>window=cube</code>,\nsamples are taken on all voxels within a cube centred on the point and\nwith side <code>2\u00d7radius + 1</code>.</li>\n</ul>\n</li>\n<li><code>mi</code>:\n<ul>\n<li><code>bins</code> (<code>int</code>): number of histogram bins used in the approximation of\nprobability densities (default: <code>255</code>)</li>\n<li><code>sigma</code> (<code>float</code>): standard deviation of the Gaussian kernel used to\napproximate probability densities (default: <code>4.5</code>)</li>\n<li><code>update_interval</code> (<code>int</code>): interval (in iterations) between updates of the\nentropy estimates (default: <code>1</code>). If <code>0</code>, updates are disabled.</li>\n<li><code>interpolator</code> (<code>'linear'</code> or <code>'nearest'</code>): interpolator used in the update\nthe entropy estimates (default: <code>'nearest'</code>)</li>\n</ul>\n</li>\n<li><code>gradient_ssd</code>:\n<ul>\n<li><code>sigma</code> (<code>float</code>): Gaussian smoothing applied to the images before\ncomputing the Sobel operator (default: <code>0.0</code>)</li>\n</ul>\n</li>\n</ul>\n<h3>GPU</h3>\n<p>GPU assisted registration is supported on newer CUDA supported hardware. First\nstep to enable GPU registration is to compile with the <code>DF_USE_CUDA=1</code> flag,\nthis is set when generating the project with CMake. When both these\nprerequisites are met, you simply add the <code>--gpu</code> flag to the command-line.</p>\n<p>As for now the GPU implementation is considered a pre-release and not all cost\nfunctions and features from the original registration implementation are\nsupported. Currently the only two supported cost functions are <code>ssd</code> and <code>ncc</code>.</p>\n<h3>Logging</h3>\n<p>The file name for the log file can be specified through the environment\nvariable <code>DF_LOG_FILE</code>. The minimum level for log messages to be reported can\nbe set through the environment variable <code>DF_LOG_LEVEL</code>, and the possible values\nare <code>Verbose</code>, <code>Info</code>, <code>Warning</code>, <code>Error</code>, and <code>Fatal</code>.</p>\n<h3>Masks</h3>\n<p>It is possible to optionally specify fuzzy masks for the fixed and moving image\nspace. The two masks can be set independently, and it is possible to use no\nmask, only one of the two (either fixed or moving) or both. The masks should be\ngiven in floating point format, and they denote the level of confidence on\nimage intensity at each voxel. If the mask value <code>m(x, y, z)</code> at a certain\nlocation <code>(x, y, z)</code> is lesser than or equal to zero, then samples taken at\nthat location will not contribute to the matching cost. If <code>m(x, y, z)</code> is\ngreater than zero, then the sample will contribute and its cost given at that\nlocation by the image metric will by multiplied by <code>m(x, y, z)</code>.</p>\n<p>The fixed mask allows to denote a ROI in reference space, formed by all voxels\nwith strictly positive mask values; for all samples outside such ROI the cost\nfunction will not be computed at all, having the side effect of making the\nregistration process faster. If a sample belongs to a valid region, then its\nmapping through the displacement will be computed and, if a mask for the moving\nimage is specified, the sample will contribute only if it falls within a valid\nROI in the moving image space, otherwise it will be discarded. The\nregularisation term is not weighted by the masks, and it will be always\ncomputed over all the volume, regardless of the mask values.</p>\n<p>The moving mask should be used carefully because it can affect the quality of\nthe result, since there is no penalty for mapping from valid samples in\nreference space to regions outside of the moving image mask.</p>\n<h3>Regularization weight maps</h3>\n<p>It is possible to impose voxel-wise regularization weights in the registration\nby providing a regularization weight map. This is a map of scalar values the\nsame size as the fixed image. In the standard case the binary term is computed\na <code>a|u(v)-u(w)|</code>, where <code>a</code> is the regularization weight. Using a regularization\nweight map, the weight <code>a</code> is computed as <code>a = 0.5*(W(v) - W(w))</code>, where <code>W</code> is\nthe weight map.</p>\n<h2>References</h2>\n<ul>\n<li>\n<p><a id=\"1\"></a>[1] Junhwan Kim, Vladimir Kolmogorov, Ramin Zabih:\n<em>Visual correspondence using energy minimization and mutual information.</em>\nProceedings of the Ninth IEEE International Conference on Computer Vision,\n1033-1040, 2003.</p>\n</li>\n<li>\n<p><a id=\"2\"></a>[2] Herve Lombaert, Yiyong Sun, Farida Cheriet:\n<em>Landmark-based non-rigid registration via graph cuts</em>,\nInternational Conference Image Analysis and Recognition, 166\u2013175, 2007</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6293504, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9d16201fbb437d9997460ec85fa30432", "sha256": "0759fe55bf6ab6b4d869a7d8e731136315e9701f9ba5062574a03bc6ae871763"}, "downloads": -1, "filename": "pydeform-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9d16201fbb437d9997460ec85fa30432", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3426292, "upload_time": "2019-08-09T14:19:43", "upload_time_iso_8601": "2019-08-09T14:19:43.663175Z", "url": "https://files.pythonhosted.org/packages/30/3b/b3d95cec0bf30c72858e73a49f6a2f8c0a307c420650adc59c96d2a378ec/pydeform-0.0.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "86f92f4b4a0820132707d2d62f074468", "sha256": "8a3a35ed4d90f13af5d1869f9c1a1682aeb3ccda082aa6c8913f2f45d6727dc5"}, "downloads": -1, "filename": "pydeform-0.3-cp36-cp36m-manylinux2010_x86_64.whl", "has_sig": false, "md5_digest": "86f92f4b4a0820132707d2d62f074468", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 773762, "upload_time": "2019-08-12T15:19:35", "upload_time_iso_8601": "2019-08-12T15:19:35.701428Z", "url": "https://files.pythonhosted.org/packages/08/e8/19efe7bc4d9ef647be47cd106b0e30a9ff4175c450733da0919b009814b6/pydeform-0.3-cp36-cp36m-manylinux2010_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "883d4a9949fe697c7a0be815feabbbf1", "sha256": "237d49a30e9b1def56c1c9f46dc02ac3efeb0d5cff59f1b2c6cd8411d6f0685d"}, "downloads": -1, "filename": "pydeform-0.3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "883d4a9949fe697c7a0be815feabbbf1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 308916, "upload_time": "2019-06-15T23:36:48", "upload_time_iso_8601": "2019-06-15T23:36:48.219722Z", "url": "https://files.pythonhosted.org/packages/60/51/16f3b9e96b83d5ade03560beb197c61ddd27e33c13a39aab2b62aa94bba0/pydeform-0.3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f567449cc25bd140756b0f093209ede8", "sha256": "090c1ef543932c7dc7fe11dc34ecd2e635fc2cde37ad4afff7691ad5ff134b51"}, "downloads": -1, "filename": "pydeform-0.3.tar.gz", "has_sig": false, "md5_digest": "f567449cc25bd140756b0f093209ede8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3459206, "upload_time": "2019-06-15T23:36:53", "upload_time_iso_8601": "2019-06-15T23:36:53.054560Z", "url": "https://files.pythonhosted.org/packages/3d/f2/d180ede15cdce561d5418e59dc7b24b31a9b34bd0c5133b8771ff57915f6/pydeform-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "4652bd68e4412735a746a649d9eb3fcf", "sha256": "fd7bc424439d87f8cdce278256f46e23605f6e9af823f40e361628f9087d9d38"}, "downloads": -1, "filename": "pydeform-0.4-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4652bd68e4412735a746a649d9eb3fcf", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 668448, "upload_time": "2019-08-20T16:10:13", "upload_time_iso_8601": "2019-08-20T16:10:13.703934Z", "url": "https://files.pythonhosted.org/packages/b1/cd/7310d5dfdfe6ce54681d1a7a130ad4f1bb4371477c11e57bad86eff64417/pydeform-0.4-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fe0bdb0c5ed9d784e3e732c9b678e61", "sha256": "bc741b8d6f1e199cb60a869bf9cfac9c812b184086eebd5cbd926640b7eae137"}, "downloads": -1, "filename": "pydeform-0.4-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "1fe0bdb0c5ed9d784e3e732c9b678e61", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 668312, "upload_time": "2019-08-20T16:00:09", "upload_time_iso_8601": "2019-08-20T16:00:09.399219Z", "url": "https://files.pythonhosted.org/packages/51/15/5f798ff2ba60cdd8776f554d91a9cfcbec9f4af70546b40e485ac6645c20/pydeform-0.4-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "082a82dbef99fddbfd65eac2393ac89f", "sha256": "cc66e5ec089d9ced034b4030344a2a6a55af0ce65abe18472b606c657413c198"}, "downloads": -1, "filename": "pydeform-0.4-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "082a82dbef99fddbfd65eac2393ac89f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 668312, "upload_time": "2019-08-20T15:57:44", "upload_time_iso_8601": "2019-08-20T15:57:44.956470Z", "url": "https://files.pythonhosted.org/packages/db/a0/863cf31d9ba1c985ff684e388094e158749ec99b3af2d7067cced66cf0f7/pydeform-0.4-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdef6ffb4fb9adfe290ed63b515cb5e7", "sha256": "b01634070d54e1bb8e4715afd9ee4a46d9d2b4c2545f404ef4e36d959bf1677b"}, "downloads": -1, "filename": "pydeform-0.4-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bdef6ffb4fb9adfe290ed63b515cb5e7", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 668574, "upload_time": "2019-08-20T16:10:19", "upload_time_iso_8601": "2019-08-20T16:10:19.285956Z", "url": "https://files.pythonhosted.org/packages/b7/4c/2a5cc8a835dabacc1811e983d1dc3100044afd3838d2e63ca90c0a304967/pydeform-0.4-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3966ded05870c5454aca6996f5c63b85", "sha256": "8d53d8b914284bc8cacdb62d0d429147864a6c0e3bb8e92c4fd22f1e671b880a"}, "downloads": -1, "filename": "pydeform-0.4.tar.gz", "has_sig": false, "md5_digest": "3966ded05870c5454aca6996f5c63b85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3434466, "upload_time": "2019-08-21T09:30:56", "upload_time_iso_8601": "2019-08-21T09:30:56.996039Z", "url": "https://files.pythonhosted.org/packages/0e/e6/8019cd77790ef103932fba1ee73796e9395c4413b08d1c408c6600b15473/pydeform-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "30975768210d3b5f3c39b1b3ec37404f", "sha256": "26e2a2b30a81e7c5cc19c67bbef088cbf6ded50afd5eafe753cb56d6384ac353"}, "downloads": -1, "filename": "pydeform-0.4.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "30975768210d3b5f3c39b1b3ec37404f", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 660049, "upload_time": "2019-08-22T07:13:19", "upload_time_iso_8601": "2019-08-22T07:13:19.503096Z", "url": "https://files.pythonhosted.org/packages/ae/72/3445b6cef95cc7453105a5be32eb7bfdcc8448f2cba6b5f83d148428d711/pydeform-0.4.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "407049e8961c0810e2fc453042fdbbb5", "sha256": "2383dbaa5fbf53080847088a89e2179a2ef71d0233772729ac62a3c0567e6490"}, "downloads": -1, "filename": "pydeform-0.4.1-cp34-cp34m-win_amd64.whl", "has_sig": false, "md5_digest": "407049e8961c0810e2fc453042fdbbb5", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 301181, "upload_time": "2019-08-21T10:52:20", "upload_time_iso_8601": "2019-08-21T10:52:20.252948Z", "url": "https://files.pythonhosted.org/packages/5b/99/8e28660d70ad9613bd6087f86d2f574dfec464cd5ace9f8fcef5fba1a175/pydeform-0.4.1-cp34-cp34m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7897251fe3cf7d3b8cdcfaef56cb8dc9", "sha256": "578c39a47b75bb0a8dfb666d92ea105faf22321c657a55f55457bf8b2503952a"}, "downloads": -1, "filename": "pydeform-0.4.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "7897251fe3cf7d3b8cdcfaef56cb8dc9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 639406, "upload_time": "2019-08-28T14:37:10", "upload_time_iso_8601": "2019-08-28T14:37:10.157231Z", "url": "https://files.pythonhosted.org/packages/7a/5f/31883ce26ba0b94dfc3feadbed9c443bc240f7887402af0b99a01cb8c810/pydeform-0.4.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "722239699965440f6f5e972900acaab5", "sha256": "c072b4a578279baee04ce61108b309bb9346bd501c9484fb8a568a387ac6c695"}, "downloads": -1, "filename": "pydeform-0.4.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "722239699965440f6f5e972900acaab5", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 659918, "upload_time": "2019-08-22T07:13:21", "upload_time_iso_8601": "2019-08-22T07:13:21.540812Z", "url": "https://files.pythonhosted.org/packages/48/62/9f9dfdc70caae3117680a46b0f87e63a3b4b0e2640be85e3741ba0de88be/pydeform-0.4.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a33143447199791c5df730c267ea88b5", "sha256": "abf503a838f94ff918b49a462f07d2a8e885c219ce6336580c5a61327cc96768"}, "downloads": -1, "filename": "pydeform-0.4.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "a33143447199791c5df730c267ea88b5", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 301169, "upload_time": "2019-08-21T10:52:21", "upload_time_iso_8601": "2019-08-21T10:52:21.931501Z", "url": "https://files.pythonhosted.org/packages/41/14/5abbb2236f868540999bfff03b44cbfb3e9a92c8686280e8ddc577710b49/pydeform-0.4.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05f95c2f97fa95bcee10773f73c23757", "sha256": "5e530025a4c5748b02ed0182e636cf9f166b98832fd4176d94882fa899d6d869"}, "downloads": -1, "filename": "pydeform-0.4.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "05f95c2f97fa95bcee10773f73c23757", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 639407, "upload_time": "2019-08-28T14:37:30", "upload_time_iso_8601": "2019-08-28T14:37:30.746837Z", "url": "https://files.pythonhosted.org/packages/4d/d2/839b18ca98d04160f219e37c305b74c5484e3a4263793e20e5f7a2781427/pydeform-0.4.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42d5be7a789ddbb08af3223bcf0b294b", "sha256": "2f204213810af8811e7d07144a25ba9710aaa643fa7aad57dfc26294b317869c"}, "downloads": -1, "filename": "pydeform-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "42d5be7a789ddbb08af3223bcf0b294b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 659918, "upload_time": "2019-08-22T07:13:23", "upload_time_iso_8601": "2019-08-22T07:13:23.735934Z", "url": "https://files.pythonhosted.org/packages/87/d7/4d663dbe3e724b93f6ab6342aa7ac37cb448c562ccbca889cd5d9bfd8a7d/pydeform-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37879db75d1cd0e45d62b43e1b87e125", "sha256": "494cb10f1abb65c205cc0affbe9564ecd76a3571f02782a7f2576ee5fb4a0d1c"}, "downloads": -1, "filename": "pydeform-0.4.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "37879db75d1cd0e45d62b43e1b87e125", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 301169, "upload_time": "2019-08-21T10:52:23", "upload_time_iso_8601": "2019-08-21T10:52:23.316950Z", "url": "https://files.pythonhosted.org/packages/20/ce/29372e05e8733ebfe78fbf3c472c896335dba6fbd91146ac1d5d9aec2c79/pydeform-0.4.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43a1c84b32eb9bd2d9966b52651cf3c6", "sha256": "80a0bd5c1552c474908ad53ca0cebb74c50babd8669b26e314f18e17b1f9a28b"}, "downloads": -1, "filename": "pydeform-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "43a1c84b32eb9bd2d9966b52651cf3c6", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 332848, "upload_time": "2019-08-28T14:37:42", "upload_time_iso_8601": "2019-08-28T14:37:42.499350Z", "url": "https://files.pythonhosted.org/packages/3a/4a/14c7ba39234ea21010d4594f680cc4ea2e1afc11283391c64f01c54d68b4/pydeform-0.4.1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b6dd7566af7b547e5b54315ac665e07", "sha256": "9a227f20901ff85b8e12fca862e69448050d46c4eeb74aa9b9e454d3bb27ee30"}, "downloads": -1, "filename": "pydeform-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7b6dd7566af7b547e5b54315ac665e07", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 660178, "upload_time": "2019-08-22T07:13:25", "upload_time_iso_8601": "2019-08-22T07:13:25.905884Z", "url": "https://files.pythonhosted.org/packages/4a/eb/6e527af65db5ca26fe40780ee7b257edb46d17bb564a83a4b161b5567e64/pydeform-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caabba3b5f7bc444df7ce0a93a5f7732", "sha256": "d39da6d3d3626c7b97d615f3ed6100ae41f253ef144e70a89918b85a6ef929c8"}, "downloads": -1, "filename": "pydeform-0.4.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "caabba3b5f7bc444df7ce0a93a5f7732", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 301116, "upload_time": "2019-08-21T10:52:24", "upload_time_iso_8601": "2019-08-21T10:52:24.650956Z", "url": "https://files.pythonhosted.org/packages/43/de/59fafeae6dc36955e7fcf7c88fb1b47d9f58340f7376e789a3c11aaf264e/pydeform-0.4.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e049a4d5a61fc9c37726f6e69fde1c4", "sha256": "310e56e3a48e82b6e17012f8d7b9457b2171f7dc9697aef356e5f62ce41ff238"}, "downloads": -1, "filename": "pydeform-0.4.1.tar.gz", "has_sig": false, "md5_digest": "9e049a4d5a61fc9c37726f6e69fde1c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 263580, "upload_time": "2019-08-21T11:07:30", "upload_time_iso_8601": "2019-08-21T11:07:30.338624Z", "url": "https://files.pythonhosted.org/packages/75/81/98b7186db319540ae1c8eaf86a8c752ea920414351299536f9205d189e01/pydeform-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "efc043d7ad5cab15346b954f4468ac2d", "sha256": "763486b9cf56a00915b614ea6c9d838e82f708bb89f0376c67ecc1c7c7221475"}, "downloads": -1, "filename": "pydeform-0.5-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "efc043d7ad5cab15346b954f4468ac2d", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1050044, "upload_time": "2019-11-18T13:25:42", "upload_time_iso_8601": "2019-11-18T13:25:42.144700Z", "url": "https://files.pythonhosted.org/packages/b7/53/5c3098e13b1fffe7d5f22b176f0c9cf07113c9f503dbd670a2fd5638add1/pydeform-0.5-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47be2d1475d7904076527813d823fb0e", "sha256": "315143f2ce51aabc9cdd202965cd2b0f6523ecb7fdf05fbf8fb803ebbd2d481c"}, "downloads": -1, "filename": "pydeform-0.5-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "47be2d1475d7904076527813d823fb0e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1219671, "upload_time": "2019-11-18T13:25:45", "upload_time_iso_8601": "2019-11-18T13:25:45.049206Z", "url": "https://files.pythonhosted.org/packages/75/b9/c957953ccaed4831be9dec9cbba66d996deaab9edd60f0c9b7d079828bfd/pydeform-0.5-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e43e9f7188bb018587c0b085861a920c", "sha256": "4ae9757001cdd18a7188f3740a944659794c61fa977e0874b43fb63138feea9e"}, "downloads": -1, "filename": "pydeform-0.5-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e43e9f7188bb018587c0b085861a920c", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1050270, "upload_time": "2019-11-18T13:25:47", "upload_time_iso_8601": "2019-11-18T13:25:47.844265Z", "url": "https://files.pythonhosted.org/packages/76/fb/6e3c8fbb800679edff1ecbf1c6f5f3d1f2b2d54ac7fc28167478ad9d0e46/pydeform-0.5-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a81602c65ecbb29b1d35fa369b9dddd2", "sha256": "51b9fb287971d336b07e8b644792f17c2ac8fd9dc61c034bbf76b48f441a49a1"}, "downloads": -1, "filename": "pydeform-0.5-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "a81602c65ecbb29b1d35fa369b9dddd2", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 543677, "upload_time": "2019-11-18T23:17:11", "upload_time_iso_8601": "2019-11-18T23:17:11.990610Z", "url": "https://files.pythonhosted.org/packages/17/25/2f9c7fcee8945d3013a816556450cc8b7fc45dd12bdb007ca117b58fe417/pydeform-0.5-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0ff6757c012a6f0f4db703de81b6d2d", "sha256": "b69c52a22325adad5ccb5b222a199b89a07dc5a03fb77b1989d3001d026d9974"}, "downloads": -1, "filename": "pydeform-0.5-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "a0ff6757c012a6f0f4db703de81b6d2d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1219669, "upload_time": "2019-11-18T14:08:46", "upload_time_iso_8601": "2019-11-18T14:08:46.148411Z", "url": "https://files.pythonhosted.org/packages/d0/e1/2129b870ac4e57123e8829c972fa55dbcd75c08c3f344f8bafa26b786cab/pydeform-0.5-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07d8a4f4bb7407a83ee29824cc2f0d17", "sha256": "d4de7e9aef2b1900b49d75c40a42090a2180ac885f6945322d7c76909d8b46e1"}, "downloads": -1, "filename": "pydeform-0.5-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "07d8a4f4bb7407a83ee29824cc2f0d17", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1050273, "upload_time": "2019-11-18T14:08:48", "upload_time_iso_8601": "2019-11-18T14:08:48.940346Z", "url": "https://files.pythonhosted.org/packages/21/75/abc2bd5cb0035dfe32f5ba0f0772072c1eb5b0db81871526227de305769e/pydeform-0.5-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d8b98db3ce5ed04fd618d0d11475fcc", "sha256": "c679a8c2a99cbba1bb6cad904e0c0d91c6ce1176391097ed1492ac12ca92c1d1"}, "downloads": -1, "filename": "pydeform-0.5-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "4d8b98db3ce5ed04fd618d0d11475fcc", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 543668, "upload_time": "2019-11-18T14:08:51", "upload_time_iso_8601": "2019-11-18T14:08:51.428349Z", "url": "https://files.pythonhosted.org/packages/43/c0/5e53b4fa5a2c20dd406a665f9567491337dd621e66521329833e7abd5e30/pydeform-0.5-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf3b75e77140b9369219a91b88f99efd", "sha256": "d2d758ef6e55a801a5517adab2bc5ed238e015c40f436c6bc80b137702d0b478"}, "downloads": -1, "filename": "pydeform-0.5-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "bf3b75e77140b9369219a91b88f99efd", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 626064, "upload_time": "2019-11-18T14:08:53", "upload_time_iso_8601": "2019-11-18T14:08:53.870779Z", "url": "https://files.pythonhosted.org/packages/74/dc/d0edc8e72709b897eafc7f6903ec72af4a5aab23c581c4fde54ea3330ea1/pydeform-0.5-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45d7dc1a5d70b9dc9104d2db3f8d6112", "sha256": "2b50e9dcf42bc79879aa02a5641a6d1e3e58cbb7d1dea1f63839494e58444182"}, "downloads": -1, "filename": "pydeform-0.5-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "45d7dc1a5d70b9dc9104d2db3f8d6112", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1050062, "upload_time": "2019-11-18T14:08:56", "upload_time_iso_8601": "2019-11-18T14:08:56.435311Z", "url": "https://files.pythonhosted.org/packages/9c/3c/76d6fbaa27986af8e6b144899bf1bade45ae0cd3a4940854358026db82c6/pydeform-0.5-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18a00f068a49bcca4c58b47306860ee6", "sha256": "1c2f8e3c1e24ec40675c31dc29212cad255d4c080c82d84d33bc1a9fa04d218b"}, "downloads": -1, "filename": "pydeform-0.5-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "18a00f068a49bcca4c58b47306860ee6", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 543696, "upload_time": "2019-11-18T14:08:58", "upload_time_iso_8601": "2019-11-18T14:08:58.842784Z", "url": "https://files.pythonhosted.org/packages/54/98/b099d59d1aa21855159667edf45083778f22c79b6b359f67cb8a8e31744c/pydeform-0.5-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d06d7de879656fda32749c34a08fe0d7", "sha256": "02ed9861ec9181fcb8db28abe8d43d2390965c8facdee7b3b9ddfb23700bc6e8"}, "downloads": -1, "filename": "pydeform-0.5.tar.gz", "has_sig": false, "md5_digest": "d06d7de879656fda32749c34a08fe0d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7969712, "upload_time": "2019-11-18T13:23:07", "upload_time_iso_8601": "2019-11-18T13:23:07.406777Z", "url": "https://files.pythonhosted.org/packages/5a/61/a268b5b2742cfb0e11e8b75535087900022263011eebb7bfcf970d73507c/pydeform-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bc2eea2fd5745abfe0bdab18cb34a1fb", "sha256": "a1a604aa73df5218f33369908e48b42fac85c5ff8ba36da22b4deae367d3c1c4"}, "downloads": -1, "filename": "pydeform-0.5.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bc2eea2fd5745abfe0bdab18cb34a1fb", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1050261, "upload_time": "2019-12-13T14:37:58", "upload_time_iso_8601": "2019-12-13T14:37:58.535362Z", "url": "https://files.pythonhosted.org/packages/7d/ac/369671dfd846bc6e6bce4d6bd4dfd5af04d1c166f50f95b1587f00f1ac5d/pydeform-0.5.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f5d02bc4433735197a184cd6172da2f", "sha256": "28e8c9cfca417e5e46331adbf351ddb1c62dc72dc5ef186eeb32b93c964f6ea1"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "5f5d02bc4433735197a184cd6172da2f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1219838, "upload_time": "2019-12-13T14:38:00", "upload_time_iso_8601": "2019-12-13T14:38:00.769514Z", "url": "https://files.pythonhosted.org/packages/42/9d/e1c7728f2ffc65fa68ba7819f641e820a20c9f01a1bd912a7505b8b54715/pydeform-0.5.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1644b3add9ed26897133a9b86d873c8", "sha256": "c743cdf4ad837f3bf4bef774eb6c79bfc6bdfe2da39b0059cec1692d4ecccfd3"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c1644b3add9ed26897133a9b86d873c8", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1050415, "upload_time": "2019-12-13T14:38:03", "upload_time_iso_8601": "2019-12-13T14:38:03.555990Z", "url": "https://files.pythonhosted.org/packages/78/ea/e6afbd36e3b87f01e7c4364979a31135a5f927935246e71c9725b66ee32d/pydeform-0.5.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "726233f37214a3283000101bcec44131", "sha256": "1bf81c34a4c48e106d6c1ab4da581262789b9b44b4625aa02aeb655494f40b99"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "726233f37214a3283000101bcec44131", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 543719, "upload_time": "2019-12-13T14:38:06", "upload_time_iso_8601": "2019-12-13T14:38:06.030115Z", "url": "https://files.pythonhosted.org/packages/66/a2/4c98360ce6d4a7b04111d924935a3f913158187d9be8531df1f3ceb0c4ff/pydeform-0.5.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67cab318aa87d00d54cde3a272a14478", "sha256": "68776492dc0bb1f0aaac00f49e7ade6f5d83009e6cafcda7582012674677a72c"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "67cab318aa87d00d54cde3a272a14478", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1219838, "upload_time": "2019-12-13T14:38:08", "upload_time_iso_8601": "2019-12-13T14:38:08.867525Z", "url": "https://files.pythonhosted.org/packages/66/27/fcf637c5831af916aa4dd456b9b7eee928a9becbf55a02243058e6a5b942/pydeform-0.5.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b81dc5b6da14946a49f7cf17c07e441c", "sha256": "6800831e5e2634349fb18495eb2b20fec1615067c12d36b088d97904a9b294ba"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b81dc5b6da14946a49f7cf17c07e441c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1050418, "upload_time": "2019-12-13T14:38:11", "upload_time_iso_8601": "2019-12-13T14:38:11.718799Z", "url": "https://files.pythonhosted.org/packages/5e/98/2433c4af682b4417d249ccaa07a43848ba4a40f7d681b1e78b71dec598a0/pydeform-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590257401655a1cd769035a299799ed7", "sha256": "74f88255879d29ca418f3f819d8d2d2deab04ab553f02d613dce78d5af890dd9"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "590257401655a1cd769035a299799ed7", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 543717, "upload_time": "2019-12-13T14:38:14", "upload_time_iso_8601": "2019-12-13T14:38:14.454777Z", "url": "https://files.pythonhosted.org/packages/32/0b/9e4d8e24e2b2abc4da310a6459f51120d3b7d45bed5283d9ece5a5c4b34a/pydeform-0.5.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09501c690d63d83f675f69d2b84668e3", "sha256": "590bbd2460bb789f61032ee691454d22131602c0102d1fd2a13da30941b1cd34"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "09501c690d63d83f675f69d2b84668e3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 626178, "upload_time": "2019-12-13T14:38:16", "upload_time_iso_8601": "2019-12-13T14:38:16.655098Z", "url": "https://files.pythonhosted.org/packages/d8/13/ecfe560fa6d4262fe22bcfad0ff4cead772492ac974cf01f8d82099ece67/pydeform-0.5.1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc76ff98262490575dc836fbb16df1c9", "sha256": "8d05dea0857aaea310a3b983b558e1d6e46992442faefa2352c8c9185a705d59"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "dc76ff98262490575dc836fbb16df1c9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1050150, "upload_time": "2019-12-13T14:38:18", "upload_time_iso_8601": "2019-12-13T14:38:18.780282Z", "url": "https://files.pythonhosted.org/packages/1b/9f/d4c899c3197fafc028346213b3642c3df346c5ad1ed758ce624f55904920/pydeform-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7543dbcece9d1396b6384f2c088a0d67", "sha256": "1ebac29662b5651b1a7dc3b17d47f4a82fe93e2d83bec491bcc115065f029f8f"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "7543dbcece9d1396b6384f2c088a0d67", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 543826, "upload_time": "2019-12-13T14:38:20", "upload_time_iso_8601": "2019-12-13T14:38:20.869395Z", "url": "https://files.pythonhosted.org/packages/e3/04/4dd57d25aa809032ad2f5f483a810761ddb5ba0b3040cb29a9e5a7fa7c77/pydeform-0.5.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "920c41bd08aa26b07600d6d1d0c124fa", "sha256": "383bf7a5b91b539504ef04b75d86d6ed0f35c24716fed4a3fe7d4120642cedc0"}, "downloads": -1, "filename": "pydeform-0.5.1.tar.gz", "has_sig": false, "md5_digest": "920c41bd08aa26b07600d6d1d0c124fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7971500, "upload_time": "2019-12-13T14:37:12", "upload_time_iso_8601": "2019-12-13T14:37:12.586644Z", "url": "https://files.pythonhosted.org/packages/e8/0c/3051363af7caac17541506b9f8ecde27b399cb805c70a6d183b18ad8ae88/pydeform-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc2eea2fd5745abfe0bdab18cb34a1fb", "sha256": "a1a604aa73df5218f33369908e48b42fac85c5ff8ba36da22b4deae367d3c1c4"}, "downloads": -1, "filename": "pydeform-0.5.1-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "bc2eea2fd5745abfe0bdab18cb34a1fb", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 1050261, "upload_time": "2019-12-13T14:37:58", "upload_time_iso_8601": "2019-12-13T14:37:58.535362Z", "url": "https://files.pythonhosted.org/packages/7d/ac/369671dfd846bc6e6bce4d6bd4dfd5af04d1c166f50f95b1587f00f1ac5d/pydeform-0.5.1-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f5d02bc4433735197a184cd6172da2f", "sha256": "28e8c9cfca417e5e46331adbf351ddb1c62dc72dc5ef186eeb32b93c964f6ea1"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "5f5d02bc4433735197a184cd6172da2f", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1219838, "upload_time": "2019-12-13T14:38:00", "upload_time_iso_8601": "2019-12-13T14:38:00.769514Z", "url": "https://files.pythonhosted.org/packages/42/9d/e1c7728f2ffc65fa68ba7819f641e820a20c9f01a1bd912a7505b8b54715/pydeform-0.5.1-cp35-cp35m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1644b3add9ed26897133a9b86d873c8", "sha256": "c743cdf4ad837f3bf4bef774eb6c79bfc6bdfe2da39b0059cec1692d4ecccfd3"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c1644b3add9ed26897133a9b86d873c8", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1050415, "upload_time": "2019-12-13T14:38:03", "upload_time_iso_8601": "2019-12-13T14:38:03.555990Z", "url": "https://files.pythonhosted.org/packages/78/ea/e6afbd36e3b87f01e7c4364979a31135a5f927935246e71c9725b66ee32d/pydeform-0.5.1-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "726233f37214a3283000101bcec44131", "sha256": "1bf81c34a4c48e106d6c1ab4da581262789b9b44b4625aa02aeb655494f40b99"}, "downloads": -1, "filename": "pydeform-0.5.1-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "726233f37214a3283000101bcec44131", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 543719, "upload_time": "2019-12-13T14:38:06", "upload_time_iso_8601": "2019-12-13T14:38:06.030115Z", "url": "https://files.pythonhosted.org/packages/66/a2/4c98360ce6d4a7b04111d924935a3f913158187d9be8531df1f3ceb0c4ff/pydeform-0.5.1-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67cab318aa87d00d54cde3a272a14478", "sha256": "68776492dc0bb1f0aaac00f49e7ade6f5d83009e6cafcda7582012674677a72c"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-macosx_10_6_intel.whl", "has_sig": false, "md5_digest": "67cab318aa87d00d54cde3a272a14478", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1219838, "upload_time": "2019-12-13T14:38:08", "upload_time_iso_8601": "2019-12-13T14:38:08.867525Z", "url": "https://files.pythonhosted.org/packages/66/27/fcf637c5831af916aa4dd456b9b7eee928a9becbf55a02243058e6a5b942/pydeform-0.5.1-cp36-cp36m-macosx_10_6_intel.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b81dc5b6da14946a49f7cf17c07e441c", "sha256": "6800831e5e2634349fb18495eb2b20fec1615067c12d36b088d97904a9b294ba"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b81dc5b6da14946a49f7cf17c07e441c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1050418, "upload_time": "2019-12-13T14:38:11", "upload_time_iso_8601": "2019-12-13T14:38:11.718799Z", "url": "https://files.pythonhosted.org/packages/5e/98/2433c4af682b4417d249ccaa07a43848ba4a40f7d681b1e78b71dec598a0/pydeform-0.5.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590257401655a1cd769035a299799ed7", "sha256": "74f88255879d29ca418f3f819d8d2d2deab04ab553f02d613dce78d5af890dd9"}, "downloads": -1, "filename": "pydeform-0.5.1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "590257401655a1cd769035a299799ed7", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 543717, "upload_time": "2019-12-13T14:38:14", "upload_time_iso_8601": "2019-12-13T14:38:14.454777Z", "url": "https://files.pythonhosted.org/packages/32/0b/9e4d8e24e2b2abc4da310a6459f51120d3b7d45bed5283d9ece5a5c4b34a/pydeform-0.5.1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09501c690d63d83f675f69d2b84668e3", "sha256": "590bbd2460bb789f61032ee691454d22131602c0102d1fd2a13da30941b1cd34"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "09501c690d63d83f675f69d2b84668e3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 626178, "upload_time": "2019-12-13T14:38:16", "upload_time_iso_8601": "2019-12-13T14:38:16.655098Z", "url": "https://files.pythonhosted.org/packages/d8/13/ecfe560fa6d4262fe22bcfad0ff4cead772492ac974cf01f8d82099ece67/pydeform-0.5.1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc76ff98262490575dc836fbb16df1c9", "sha256": "8d05dea0857aaea310a3b983b558e1d6e46992442faefa2352c8c9185a705d59"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "dc76ff98262490575dc836fbb16df1c9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1050150, "upload_time": "2019-12-13T14:38:18", "upload_time_iso_8601": "2019-12-13T14:38:18.780282Z", "url": "https://files.pythonhosted.org/packages/1b/9f/d4c899c3197fafc028346213b3642c3df346c5ad1ed758ce624f55904920/pydeform-0.5.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7543dbcece9d1396b6384f2c088a0d67", "sha256": "1ebac29662b5651b1a7dc3b17d47f4a82fe93e2d83bec491bcc115065f029f8f"}, "downloads": -1, "filename": "pydeform-0.5.1-cp37-cp37m-win_amd64.whl", "has_sig": false, "md5_digest": "7543dbcece9d1396b6384f2c088a0d67", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 543826, "upload_time": "2019-12-13T14:38:20", "upload_time_iso_8601": "2019-12-13T14:38:20.869395Z", "url": "https://files.pythonhosted.org/packages/e3/04/4dd57d25aa809032ad2f5f483a810761ddb5ba0b3040cb29a9e5a7fa7c77/pydeform-0.5.1-cp37-cp37m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "920c41bd08aa26b07600d6d1d0c124fa", "sha256": "383bf7a5b91b539504ef04b75d86d6ed0f35c24716fed4a3fe7d4120642cedc0"}, "downloads": -1, "filename": "pydeform-0.5.1.tar.gz", "has_sig": false, "md5_digest": "920c41bd08aa26b07600d6d1d0c124fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7971500, "upload_time": "2019-12-13T14:37:12", "upload_time_iso_8601": "2019-12-13T14:37:12.586644Z", "url": "https://files.pythonhosted.org/packages/e8/0c/3051363af7caac17541506b9f8ecde27b399cb805c70a6d183b18ad8ae88/pydeform-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:11 2020"}