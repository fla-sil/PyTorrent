{"info": {"author": "Mostafa Farrag", "author_email": "moah.farag@gmail.come", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development"], "description": "[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.2572035.svg)](https://doi.org/10.5281/zenodo.2572035)\n[![PyPI version](https://badge.fury.io/py/HAPI-Nile.svg)](https://badge.fury.io/py/HAPI-Nile)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/MAfarrag/HAPI/master)\n\nHAPI - Hydrological library for Python \n=====================================================================\n**HAPI** is a Python package providing fast and flexible, way to build Hydrological models with different spatial representations (lumped, semidistributed and conceptual distributed) using HBV96.\nThe package is very flexible to an extent that it allows developers to change the structure of the defined conceptual model or to enter\ntheir own model, it contains two routing functions muskingum cunge, and MAXBAS triangular function.\n(all function has been tested and validated during a Master thesis at IHE-Delft April 2018 and the library is still under development)\n\n\nMain Features\n-------------\nHere are just a few of the things that Hapi does well:\n  - Easy handling of rasters data downloaded from global data and easy way to\n    manipulate the data to arrange it to run the model\n  - Easy calibration of the model using Harmony search method and Genetic Algorithms\n  - flexible GIS function to process rasters interpolate values and georeference \n    calculated discharge values to the correct place.\n  - Different ways for considering variability of catchment properties, lumped properties,\n    distributed properties and hydrologic response units\n  - Two different Ways of generating input data, from satellite data and from simple statistics\n    methods like IDW(inverse distance weighting method) and ISDW(inverse dsquared istance weighting method)\n  - Wide range of GIS function to process Rasters (execute some functions on a folder of rasters) like \n    project raster, resampling, Clipping, creating a raster fom arrays, Map algebra.\n  - Some function to plot shapefiles using and rasters using bokeh library in a web application.\n  - Different performance criteria to measure the godness of fit of the hydrological model\n\n-------------\nThis work has been done under supervision of Dr/ Gerald Corzo at IHE Delft April 2018\n-------------\n\n\n\n\nInstallation\n============\n```\nPlease install Hapi in a Virtual environment so that its requirements don't tamper with your system's python\n**Hapi** works with Python 2.7 and 3.7 64Bit on Windows\n```\n\nif you are using conda\n```\n# Clone the repository. Or download the ZIP and add `-master` to the name.\ngit clone https://github.com/MAfarrag/HAPI\n\n# Enter the repository\nopen comand prompt and type cd then the path to the repository\ncd Hapi\n\n# Create a virtualenv\nopen anaconda prompt and type\nconda create -n Hapi_env python=3.7 anaconda \nthat will create an environment named python3 that contain s Python3.7 version of Anaconda \n\n# Activate the env\nconda activate Hapi_env\n\n```\n# Install the dependencies\nyou can check [libraries.io](https://libraries.io/github/MAfarrag/HAPI) to check versions of the libraries\n```\nconda install Numpy\nconda install pandas\nconda install scipy\nconda install fiona\nconda install -c conda-forge gdal\nconda install -c conda-forge rasterio\nconda install shapely\nconda install geopandas\n```\n## Install from Github\nto install the last development to time you can install the library from github\n```\npip install git+https://github.com/MAfarrag/HAPI\n```\n## Compile \nYou can compile the repository after you clone it \niF python is already added to your system environment variable\n```\npython setup.py install\n```\n###### or \n```\npathto_your_env\\python setup.py install\n```\n## pip\nto install the last release you can easly use pip\n```\npip install HAPI-Nile\n```\n## YML file\nusing the environment.yml file included with hapi you can create a new environment with all the dependencies installed with the latest Hapi version\nin the master branch\n```\nconda env create --name Hapi_env -f environment.yml\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MAfarrag/HAPI", "keywords": "Hydrology,Distributed hydrological model", "license": "", "maintainer": "", "maintainer_email": "", "name": "HAPI-Nile", "package_url": "https://pypi.org/project/HAPI-Nile/", "platform": "", "project_url": "https://pypi.org/project/HAPI-Nile/", "project_urls": {"Homepage": "https://github.com/MAfarrag/HAPI"}, "release_url": "https://pypi.org/project/HAPI-Nile/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Distributed Hydrological model", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://doi.org/10.5281/zenodo.2572035\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d6f430e8d15e5b287a682ef4e7f7fea49009711/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e323537323033352e737667\"></a>\n<a href=\"https://badge.fury.io/py/HAPI-Nile\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a45b727512e216bb0491194412a06a0588da73a5/68747470733a2f2f62616467652e667572792e696f2f70792f484150492d4e696c652e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/MAfarrag/HAPI/master\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h1>HAPI - Hydrological library for Python</h1>\n<p><strong>HAPI</strong> is a Python package providing fast and flexible, way to build Hydrological models with different spatial representations (lumped, semidistributed and conceptual distributed) using HBV96.\nThe package is very flexible to an extent that it allows developers to change the structure of the defined conceptual model or to enter\ntheir own model, it contains two routing functions muskingum cunge, and MAXBAS triangular function.\n(all function has been tested and validated during a Master thesis at IHE-Delft April 2018 and the library is still under development)</p>\n<h2>Main Features</h2>\n<p>Here are just a few of the things that Hapi does well:</p>\n<ul>\n<li>Easy handling of rasters data downloaded from global data and easy way to\nmanipulate the data to arrange it to run the model</li>\n<li>Easy calibration of the model using Harmony search method and Genetic Algorithms</li>\n<li>flexible GIS function to process rasters interpolate values and georeference\ncalculated discharge values to the correct place.</li>\n<li>Different ways for considering variability of catchment properties, lumped properties,\ndistributed properties and hydrologic response units</li>\n<li>Two different Ways of generating input data, from satellite data and from simple statistics\nmethods like IDW(inverse distance weighting method) and ISDW(inverse dsquared istance weighting method)</li>\n<li>Wide range of GIS function to process Rasters (execute some functions on a folder of rasters) like\nproject raster, resampling, Clipping, creating a raster fom arrays, Map algebra.</li>\n<li>Some function to plot shapefiles using and rasters using bokeh library in a web application.</li>\n<li>Different performance criteria to measure the godness of fit of the hydrological model</li>\n</ul>\n<hr>\n<h2>This work has been done under supervision of Dr/ Gerald Corzo at IHE Delft April 2018</h2>\n<h1>Installation</h1>\n<pre><code>Please install Hapi in a Virtual environment so that its requirements don't tamper with your system's python\n**Hapi** works with Python 2.7 and 3.7 64Bit on Windows\n</code></pre>\n<p>if you are using conda</p>\n<pre><code># Clone the repository. Or download the ZIP and add `-master` to the name.\ngit clone https://github.com/MAfarrag/HAPI\n\n# Enter the repository\nopen comand prompt and type cd then the path to the repository\ncd Hapi\n\n# Create a virtualenv\nopen anaconda prompt and type\nconda create -n Hapi_env python=3.7 anaconda \nthat will create an environment named python3 that contain s Python3.7 version of Anaconda \n\n# Activate the env\nconda activate Hapi_env\n\n</code></pre>\n<h1>Install the dependencies</h1>\n<p>you can check <a href=\"https://libraries.io/github/MAfarrag/HAPI\" rel=\"nofollow\">libraries.io</a> to check versions of the libraries</p>\n<pre><code>conda install Numpy\nconda install pandas\nconda install scipy\nconda install fiona\nconda install -c conda-forge gdal\nconda install -c conda-forge rasterio\nconda install shapely\nconda install geopandas\n</code></pre>\n<h2>Install from Github</h2>\n<p>to install the last development to time you can install the library from github</p>\n<pre><code>pip install git+https://github.com/MAfarrag/HAPI\n</code></pre>\n<h2>Compile</h2>\n<p>You can compile the repository after you clone it\niF python is already added to your system environment variable</p>\n<pre><code>python setup.py install\n</code></pre>\n<h6>or</h6>\n<pre><code>pathto_your_env\\python setup.py install\n</code></pre>\n<h2>pip</h2>\n<p>to install the last release you can easly use pip</p>\n<pre><code>pip install HAPI-Nile\n</code></pre>\n<h2>YML file</h2>\n<p>using the environment.yml file included with hapi you can create a new environment with all the dependencies installed with the latest Hapi version\nin the master branch</p>\n<pre><code>conda env create --name Hapi_env -f environment.yml\n</code></pre>\n\n          </div>"}, "last_serial": 7163160, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1491e51ee10e41a4ddc1c76a1c0b3039", "sha256": "9db4821eefd211569a7b171b43b5c5bd3f5e931e51996b30a497fce493a99ccc"}, "downloads": -1, "filename": "HAPI_Nile-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1491e51ee10e41a4ddc1c76a1c0b3039", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 142554, "upload_time": "2020-04-19T07:12:08", "upload_time_iso_8601": "2020-04-19T07:12:08.465859Z", "url": "https://files.pythonhosted.org/packages/b9/43/5685f27f4ecff41547da4e5ae716f2442a1e78011dd2a56cc13530d89336/HAPI_Nile-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6958065067594e78e0521a22f08c8894", "sha256": "84adeecd1910d88231e4dcda3ffcf5c68d65ddfca7e98e169e20bbaaa56397ec"}, "downloads": -1, "filename": "HAPI-Nile-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6958065067594e78e0521a22f08c8894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111244, "upload_time": "2020-04-19T07:12:13", "upload_time_iso_8601": "2020-04-19T07:12:13.644925Z", "url": "https://files.pythonhosted.org/packages/d8/bb/b65ad4dda78594f4b1ef6ba58d0f4abb99f41421a7a0d4d4fdd9c9f18470/HAPI-Nile-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "561e6330d53901bedbd2ca0281e9088a", "sha256": "c794b7de67b9818a337831b694dc6d0fa26768c029b7eb2be446fc6006179b81"}, "downloads": -1, "filename": "HAPI_Nile-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "561e6330d53901bedbd2ca0281e9088a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 143019, "upload_time": "2020-05-04T10:28:32", "upload_time_iso_8601": "2020-05-04T10:28:32.490795Z", "url": "https://files.pythonhosted.org/packages/82/1f/5eca281ded844351e984f234c7c8e730e99c3e2a64182cf10f875418e08f/HAPI_Nile-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a8a05ee7dcfcbb8eb0e7719d55349ea", "sha256": "bded92db87e19392641fb44c8aeced833a188eb74fce277abea06a1356304add"}, "downloads": -1, "filename": "HAPI-Nile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9a8a05ee7dcfcbb8eb0e7719d55349ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113388, "upload_time": "2020-05-04T10:28:37", "upload_time_iso_8601": "2020-05-04T10:28:37.360557Z", "url": "https://files.pythonhosted.org/packages/eb/4c/48617942ff4efbded62f7dd43229ba67b320cf3936d780a008a099bc02fc/HAPI-Nile-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "561e6330d53901bedbd2ca0281e9088a", "sha256": "c794b7de67b9818a337831b694dc6d0fa26768c029b7eb2be446fc6006179b81"}, "downloads": -1, "filename": "HAPI_Nile-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "561e6330d53901bedbd2ca0281e9088a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 143019, "upload_time": "2020-05-04T10:28:32", "upload_time_iso_8601": "2020-05-04T10:28:32.490795Z", "url": "https://files.pythonhosted.org/packages/82/1f/5eca281ded844351e984f234c7c8e730e99c3e2a64182cf10f875418e08f/HAPI_Nile-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a8a05ee7dcfcbb8eb0e7719d55349ea", "sha256": "bded92db87e19392641fb44c8aeced833a188eb74fce277abea06a1356304add"}, "downloads": -1, "filename": "HAPI-Nile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9a8a05ee7dcfcbb8eb0e7719d55349ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113388, "upload_time": "2020-05-04T10:28:37", "upload_time_iso_8601": "2020-05-04T10:28:37.360557Z", "url": "https://files.pythonhosted.org/packages/eb/4c/48617942ff4efbded62f7dd43229ba67b320cf3936d780a008a099bc02fc/HAPI-Nile-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:32 2020"}