{"info": {"author": "Oleg Medvedev", "author_email": "omdv.public@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Overview\n\n[![Unix Build Status](https://img.shields.io/travis/omdv/geovectors/master.svg?label=unix)](https://travis-ci.org/omdv/geovectors)\n[![Coverage Status](https://img.shields.io/coveralls/omdv/geovectors/master.svg)](https://coveralls.io/r/omdv/geovectors)\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/omdv/geovectors.svg)](https://scrutinizer-ci.com/g/omdv/geovectors/?branch=master)\n[![PyPI Version](https://img.shields.io/pypi/v/geovectorslib.svg)](https://pypi.org/project/geovectorslib)\n[![PyPI License](https://img.shields.io/pypi/l/geovectorslib.svg)](https://pypi.org/project/geovectorslib)\n\nThis library provides vectorized direct and inverse geodesic methods.\n\nThe motivation was to have the accurate and fast vectorized geodesic routines for sailboat routing project. There are few python libraries, with [geographiclib](https://geographiclib.sourceforge.io/html/python/index.html) being the most accurate and reliable. Haversine method, which is widely used as an example of fast inverse method can be vectorized rather easily, however the errors are expected to be at [least 0.5%](https://en.wikipedia.org/wiki/Haversine_formula#Formulation). There are no vectorized AND accurate options.\n\nThis library is based on `numpy` and uses [Vincenty's formulae](https://en.wikipedia.org/wiki/Vincenty's_formulae). It is heavily based on the [Movable Type Scripts blog](https://www.movable-type.co.uk/scripts/latlong-vincenty.html) and Javascript [Geodesy](https://www.npmjs.com/package/geodesy) code.\n\nVincenty's inverse algorithm is accurate, but sensitive to [nearly antipodal points](https://en.wikipedia.org/wiki/Vincenty%27s_formulae#Nearly_antipodal_points). One approach would be to return `NaN` for such points, with the assumption that they are not frequently observed in practical applications, however as [this discussion](https://gis.stackexchange.com/questions/84885/difference-between-vincenty-and-great-circle-distance-calculations) nicely pointed out the package cannot be complete if it cannot handle these situations. I found that the issue can be solved by relaxing one of convergence criteria, but it results in errors up to 0.25% vs geographiclib for these points.\n\nSo, instead, this library uses the vectorized Vincenty's formulae with **geographiclib as a fallback** for unconverged points.\n\nSee [notebook](https://github.com/omdv/geovectors/blob/master/notebooks/demo.ipynb) for execution time comparisons vs geographiclib.\n\n```\nDirect method for 100,000 points\n\n94.9 ms \u00b1 25 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nvs\n9.79 s \u00b1 1.4 s per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n```\n\n```\nInverse method for 100,000 points\n\n1.5 s \u00b1 504 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nvs\n24.2 s \u00b1 3.91 s per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n```\n\n# Setup\n\n## Requirements\n\n* Python 3.7+\n* Numpy\n* Geographiclib\n\n## Installation\n\nInstall it directly into an activated virtual environment:\n\n```text\npip install geovectorslib\n```\n\n# Usage\n\nAfter installation, the package can imported:\n\n```text\n$ python\n>>> from geovectorslib import direct, inverse\n>>> direct(lats1, lon1, bearings, distances)\n>>> inverse(lats1, lons1, lats2, lons2)\n```\n\n```text\nLatitudes in decimal degrees [-90; +90].\nLongitudes in decimal degrees [-180; +180].\nBearings in decimal degrees [0; 360].\nDistances in meters.\n```\n\n# References\n\n[Movable Type Scripts](https://www.movable-type.co.uk/scripts/latlong-vincenty.html)\n\n[Geodesy](https://www.npmjs.com/package/geodesy)\n\n[Geopy](https://pypi.org/project/geopy/)\n\n[Geographiclib](https://geographiclib.sourceforge.io/html/python/index.html)\n\n[Stackoverflow discussion](https://gis.stackexchange.com/questions/84885/difference-between-vincenty-and-great-circle-distance-calculations)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/geovectorslib", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "geovectorslib", "package_url": "https://pypi.org/project/geovectorslib/", "platform": "", "project_url": "https://pypi.org/project/geovectorslib/", "project_urls": {"Documentation": "https://geovectorslib.readthedocs.io", "Homepage": "https://pypi.org/project/geovectorslib", "Repository": "https://github.com/omdv/geovectors"}, "release_url": "https://pypi.org/project/geovectorslib/1.1/", "requires_dist": ["numpy (>=1.18.0,<2.0.0)", "geographiclib (>=1.50,<2.0)"], "requires_python": ">=3.7,<4.0", "summary": "Vectorized geodesic calculations.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p><a href=\"https://travis-ci.org/omdv/geovectors\" rel=\"nofollow\"><img alt=\"Unix Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f747e5f0183d6e31b2e0a5c40936144dfaf62d07/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f6d64762f67656f766563746f72732f6d61737465722e7376673f6c6162656c3d756e6978\"></a>\n<a href=\"https://coveralls.io/r/omdv/geovectors\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd312460d0ec09858d49eecfcc291d116929edae/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6f6d64762f67656f766563746f72732f6d61737465722e737667\"></a>\n<a href=\"https://scrutinizer-ci.com/g/omdv/geovectors/?branch=master\" rel=\"nofollow\"><img alt=\"Scrutinizer Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06d019462f13cdb40e5c95d9c6a5f052902e79cb/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f6f6d64762f67656f766563746f72732e737667\"></a>\n<a href=\"https://pypi.org/project/geovectorslib\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f666eaa9ea82b828bb0a86d3a934bcae3e9c37e2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656f766563746f72736c69622e737667\"></a>\n<a href=\"https://pypi.org/project/geovectorslib\" rel=\"nofollow\"><img alt=\"PyPI License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5df81b251128cc4a65e8274631f98a1fcf803a73/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f67656f766563746f72736c69622e737667\"></a></p>\n<p>This library provides vectorized direct and inverse geodesic methods.</p>\n<p>The motivation was to have the accurate and fast vectorized geodesic routines for sailboat routing project. There are few python libraries, with <a href=\"https://geographiclib.sourceforge.io/html/python/index.html\" rel=\"nofollow\">geographiclib</a> being the most accurate and reliable. Haversine method, which is widely used as an example of fast inverse method can be vectorized rather easily, however the errors are expected to be at <a href=\"https://en.wikipedia.org/wiki/Haversine_formula#Formulation\" rel=\"nofollow\">least 0.5%</a>. There are no vectorized AND accurate options.</p>\n<p>This library is based on <code>numpy</code> and uses <a href=\"https://en.wikipedia.org/wiki/Vincenty's_formulae\" rel=\"nofollow\">Vincenty's formulae</a>. It is heavily based on the <a href=\"https://www.movable-type.co.uk/scripts/latlong-vincenty.html\" rel=\"nofollow\">Movable Type Scripts blog</a> and Javascript <a href=\"https://www.npmjs.com/package/geodesy\" rel=\"nofollow\">Geodesy</a> code.</p>\n<p>Vincenty's inverse algorithm is accurate, but sensitive to <a href=\"https://en.wikipedia.org/wiki/Vincenty%27s_formulae#Nearly_antipodal_points\" rel=\"nofollow\">nearly antipodal points</a>. One approach would be to return <code>NaN</code> for such points, with the assumption that they are not frequently observed in practical applications, however as <a href=\"https://gis.stackexchange.com/questions/84885/difference-between-vincenty-and-great-circle-distance-calculations\" rel=\"nofollow\">this discussion</a> nicely pointed out the package cannot be complete if it cannot handle these situations. I found that the issue can be solved by relaxing one of convergence criteria, but it results in errors up to 0.25% vs geographiclib for these points.</p>\n<p>So, instead, this library uses the vectorized Vincenty's formulae with <strong>geographiclib as a fallback</strong> for unconverged points.</p>\n<p>See <a href=\"https://github.com/omdv/geovectors/blob/master/notebooks/demo.ipynb\" rel=\"nofollow\">notebook</a> for execution time comparisons vs geographiclib.</p>\n<pre><code>Direct method for 100,000 points\n\n94.9 ms \u00b1 25 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nvs\n9.79 s \u00b1 1.4 s per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n<pre><code>Inverse method for 100,000 points\n\n1.5 s \u00b1 504 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nvs\n24.2 s \u00b1 3.91 s per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n<h1>Setup</h1>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.7+</li>\n<li>Numpy</li>\n<li>Geographiclib</li>\n</ul>\n<h2>Installation</h2>\n<p>Install it directly into an activated virtual environment:</p>\n<pre>pip install geovectorslib\n</pre>\n<h1>Usage</h1>\n<p>After installation, the package can imported:</p>\n<pre>$ python\n&gt;&gt;&gt; from geovectorslib import direct, inverse\n&gt;&gt;&gt; direct(lats1, lon1, bearings, distances)\n&gt;&gt;&gt; inverse(lats1, lons1, lats2, lons2)\n</pre>\n<pre>Latitudes in decimal degrees [-90; +90].\nLongitudes in decimal degrees [-180; +180].\nBearings in decimal degrees [0; 360].\nDistances in meters.\n</pre>\n<h1>References</h1>\n<p><a href=\"https://www.movable-type.co.uk/scripts/latlong-vincenty.html\" rel=\"nofollow\">Movable Type Scripts</a></p>\n<p><a href=\"https://www.npmjs.com/package/geodesy\" rel=\"nofollow\">Geodesy</a></p>\n<p><a href=\"https://pypi.org/project/geopy/\" rel=\"nofollow\">Geopy</a></p>\n<p><a href=\"https://geographiclib.sourceforge.io/html/python/index.html\" rel=\"nofollow\">Geographiclib</a></p>\n<p><a href=\"https://gis.stackexchange.com/questions/84885/difference-between-vincenty-and-great-circle-distance-calculations\" rel=\"nofollow\">Stackoverflow discussion</a></p>\n\n          </div>"}, "last_serial": 6412604, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "20b4d89360a2d5ccdeee8eed58aa94ac", "sha256": "e86924d56bfe949749fb204d85dc9251b3752724514c381ad47a0b09251f684d"}, "downloads": -1, "filename": "geovectorslib-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "20b4d89360a2d5ccdeee8eed58aa94ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9745, "upload_time": "2020-01-08T00:58:33", "upload_time_iso_8601": "2020-01-08T00:58:33.061779Z", "url": "https://files.pythonhosted.org/packages/2c/d2/2039258f1698eb29f3fa5f4efda81958fbe78e547070a5b880b2e2637da1/geovectorslib-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7e2142f8bf3dcac10390f0e63c31eaa", "sha256": "1b75629ac843aed615b667b550a0cfcd773bcc7c9a6252e567ea88f69e738990"}, "downloads": -1, "filename": "geovectorslib-1.0.tar.gz", "has_sig": false, "md5_digest": "f7e2142f8bf3dcac10390f0e63c31eaa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9923, "upload_time": "2020-01-08T00:58:35", "upload_time_iso_8601": "2020-01-08T00:58:35.329095Z", "url": "https://files.pythonhosted.org/packages/8d/e0/2f88f0c7171987cb3ceb5d8543c57f6ac94a6856fb0c9136d42ef120f718/geovectorslib-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "91ea3cf67dc46f78ff9319c5fb75e5b6", "sha256": "3c90e758e438ef653ec0b149de8e74e47bbfb6631f9c86b8c73ce520d215fdc2"}, "downloads": -1, "filename": "geovectorslib-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91ea3cf67dc46f78ff9319c5fb75e5b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9738, "upload_time": "2020-01-08T01:16:28", "upload_time_iso_8601": "2020-01-08T01:16:28.043208Z", "url": "https://files.pythonhosted.org/packages/71/8d/a93494fa645a058d67dd258c811ac66321492094ee557c83fbffd02b662e/geovectorslib-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ff31fb1391689273eb1016a4cff1f3", "sha256": "3f882f3d7aa7e1d618b935d3883f124f21e1aaacdb84d97b6dbcbcd28d97b05f"}, "downloads": -1, "filename": "geovectorslib-1.1.tar.gz", "has_sig": false, "md5_digest": "f5ff31fb1391689273eb1016a4cff1f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9873, "upload_time": "2020-01-08T01:16:29", "upload_time_iso_8601": "2020-01-08T01:16:29.311504Z", "url": "https://files.pythonhosted.org/packages/4c/ce/5e79141a80389d8e13e9395f90abb37fa15118639de84c2bdecf74082222/geovectorslib-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91ea3cf67dc46f78ff9319c5fb75e5b6", "sha256": "3c90e758e438ef653ec0b149de8e74e47bbfb6631f9c86b8c73ce520d215fdc2"}, "downloads": -1, "filename": "geovectorslib-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91ea3cf67dc46f78ff9319c5fb75e5b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9738, "upload_time": "2020-01-08T01:16:28", "upload_time_iso_8601": "2020-01-08T01:16:28.043208Z", "url": "https://files.pythonhosted.org/packages/71/8d/a93494fa645a058d67dd258c811ac66321492094ee557c83fbffd02b662e/geovectorslib-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ff31fb1391689273eb1016a4cff1f3", "sha256": "3f882f3d7aa7e1d618b935d3883f124f21e1aaacdb84d97b6dbcbcd28d97b05f"}, "downloads": -1, "filename": "geovectorslib-1.1.tar.gz", "has_sig": false, "md5_digest": "f5ff31fb1391689273eb1016a4cff1f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9873, "upload_time": "2020-01-08T01:16:29", "upload_time_iso_8601": "2020-01-08T01:16:29.311504Z", "url": "https://files.pythonhosted.org/packages/4c/ce/5e79141a80389d8e13e9395f90abb37fa15118639de84c2bdecf74082222/geovectorslib-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:54 2020"}