{"info": {"author": "Nicholas Hairs", "author_email": "info+nserver@nicholashairs.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Internet :: Name Service (DNS)"], "description": "# NServer: a high-level Python DNS Name Server Framework.\n\n[![PyPi](https://img.shields.io/pypi/v/nserver.svg)](https://pypi.python.org/pypi/nserver/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/nserver.svg)](https://github.com/nhairs/nserver)\n[![License](https://img.shields.io/github/license/nhairs/nserver.svg)](https://github.com/nhairs/nserver)\n\nNServer is a Python (3.6+) framework for building customised DNS name servers with a focuses on ease of use over completeness. It implements high level APIs for interacting with DNS queries whilst making very few assumptions about how responses are generated.\n\nIt is not intended to act like traditional DNS servers such as [BIND](https://www.isc.org/bind/) or [CoreDNS](https://github.com/coredns/coredns) and should not be considered a general DNS resolver.\n\nNServer has been built upon [dnslib](https://github.com/paulc/dnslib) however uses high level abstractions that does not give access to the full DNS specification. If this is your desired behaviour I suggest using dnslib and its [server API](https://github.com/paulc/dnslib/blob/master/dnslib/server.py).\n\nNServer has been inspired by easy to use high level frameworks such as [Flask](https://github.com/pallets/flask) or [Requests](https://github.com/psf/requests).\n\nNServer is currently Alpha software and does not have complete documentation, testing, or implementation of certain features. Specific APIs may change in the future, but NServer uses semantic versioning so you can have more stable interfaces using version specifiers (e.g. `nserver>=0.0.1,<1.0`).\n\n## Installation\n### Install via pip\n```shell\npip3 install nserver\n```\n\n## Quick Start\n```python\nfrom nserver import NameServer, Response, A, NS, TXT\n\nns = NameServer(\"example\")\n\n# Responses can have answers records, additional records and authority records.\n@ns.rule(\"example.com\", [\"NS\"])\ndef my_name_servers(query):\n    response = Response()\n    for i in range(4):\n        my_ns = \"ns{}.example.com\".format(i + 1)\n        response.answers.append(NS(query.name, my_ns))\n        response.additional.append(A(my_ns, \"1.1.1.1\"))\n    return response\n\n\n# Rules can use wildcards for both single-segment (*) or many-segment (**)\n# wildcards will not match mising segments (equivilent to regex `+`)\n# You can also construct simple responses by return records directly.\n\n\n@ns.rule(\"**.example.com\", [\"A\"])\ndef wildcard_example(query):\n    \"\"\"All example.com subdomains are at 1.2.3.4.\"\"\"\n    return A(query.name, \"1.2.3.4\")\n\n\n# Rules are processed in the order they are registered so if a query matches\n# this rule, it will not reach the `australian_catchall` below.\n# Wildcards can appear in names, but the above segment limits apply.\n\n\n@ns.rule(\"www.*.com.au\", [\"A\"])\ndef all_australian_www(query):\n    return A(query.name, \"5.6.7.8\")\n\n\n# Wildcard domains also allow special substitutions.\n# base_name will provide the domain less any subdomains.\n\n\n@ns.rule(\"hello.{base_domain}\", [\"TXT\"])\ndef say_hello(query):\n    if query.name.endswith(\".com.au\"):\n        return TXT(query.name, \"G'day mate\")\n    return TXT(query.name, \"Hello friend\")\n\n\n# Rules can apply to multiple query types.\n\n\n@ns.rule(\"**.com.au\", [\"A\", \"AAAA\", \"ANY\"])\ndef australian_catchall(query):\n    return Response()  # Empty response, avoids default NXDOMAIN\n\n\n# Anything that does not match will return NXDOMAIN\n\nif __name__ == \"__main__\":\n    ns.settings.SERVER_PORT = 9001  # It's over 9000!\n    ns.run()\n```\n\nOnce running, interact using `dig`:\n\n```shell\ndig -p 9001 @localhost NS example.com\n\ndig -p 9001 @localhost A foo.example.com\ndig -p 9001 @localhost A foo.bar.example.com\n\ndig -p 9001 @localhost A www.foo.com.au\ndig -p 9001 @localhost A www.bar.com.au\n\ndig -p 9001 @localhost TXT hello.foo.com\ndig -p 9001 @localhost TXT hello.foo.com.au\n\ndig -p 9001 @localhost A foo.com.au\ndig -p 9001 @localhost AAAA foo.com.au\ndig -p 9001 @localhost ANY foo.com.au\n```\n\n## Bugs, Feature Requests etc\nTLDR: Please [submit an issue on github](https://github.com/nhairs/nserver/issues).\n\nIn the case of bug reports, please help me help you by following best practices [1](https://marker.io/blog/write-bug-report/) [2](https://www.chiark.greenend.org.uk/~sgtatham/bugs.html).\n\nIn the case of feature requests, please provide background to the problem you are trying to solve so to help find a solution that makes the most sense for the library as well as your usecase. Before making a feature request consider looking at my (roughly written) [design notes](https://github.com/nhairs/nserver/blob/master/DESIGN_NOTES.md).\n\n## Development\nThe only development dependency is bash and docker. All actions are run within docker for ease of use. See `./dev.sh help` for commands. Typical commands are `format`, `lint`, `test`, `repl`, `build`.\n\nI am still working through open source licencing and contributing, so not taking PRs at this point in time. Instead raise and issue and I'll try get to it as soon a feasible.\n\n## Licence\nThis project is licenced under the MIT Licence - see [`LICENCE`](https://github.com/nahirs/nserver/blob/master/LICENCE).\n\nThis project may include other open source licenced software - see [`NOTICE`](https://github.com/nhairs/nserver/blob/master/NOTICE).\n\n## Authors\nA project by Nicholas Hairs - [www.nicholashairs.com](https://www.nicholashairs.com).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nhairs/nserver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nserver", "package_url": "https://pypi.org/project/nserver/", "platform": "", "project_url": "https://pypi.org/project/nserver/", "project_urls": {"Homepage": "https://github.com/nhairs/nserver"}, "release_url": "https://pypi.org/project/nserver/0.0.3/", "requires_dist": ["dnslib", "tldextract"], "requires_python": ">=3.6, <4", "summary": "DNS Name Server Framework", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NServer: a high-level Python DNS Name Server Framework.</h1>\n<p><a href=\"https://pypi.python.org/pypi/nserver/\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef13848f680b09b486c45f0f52108cda154aee8d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e7365727665722e737667\"></a>\n<a href=\"https://github.com/nhairs/nserver\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72045631a3ba4b1d9df4bcdf609df705f3411410/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6e7365727665722e737667\"></a>\n<a href=\"https://github.com/nhairs/nserver\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce9e820418f37faa1c024b63bd99858c886a2101/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e68616972732f6e7365727665722e737667\"></a></p>\n<p>NServer is a Python (3.6+) framework for building customised DNS name servers with a focuses on ease of use over completeness. It implements high level APIs for interacting with DNS queries whilst making very few assumptions about how responses are generated.</p>\n<p>It is not intended to act like traditional DNS servers such as <a href=\"https://www.isc.org/bind/\" rel=\"nofollow\">BIND</a> or <a href=\"https://github.com/coredns/coredns\" rel=\"nofollow\">CoreDNS</a> and should not be considered a general DNS resolver.</p>\n<p>NServer has been built upon <a href=\"https://github.com/paulc/dnslib\" rel=\"nofollow\">dnslib</a> however uses high level abstractions that does not give access to the full DNS specification. If this is your desired behaviour I suggest using dnslib and its <a href=\"https://github.com/paulc/dnslib/blob/master/dnslib/server.py\" rel=\"nofollow\">server API</a>.</p>\n<p>NServer has been inspired by easy to use high level frameworks such as <a href=\"https://github.com/pallets/flask\" rel=\"nofollow\">Flask</a> or <a href=\"https://github.com/psf/requests\" rel=\"nofollow\">Requests</a>.</p>\n<p>NServer is currently Alpha software and does not have complete documentation, testing, or implementation of certain features. Specific APIs may change in the future, but NServer uses semantic versioning so you can have more stable interfaces using version specifiers (e.g. <code>nserver&gt;=0.0.1,&lt;1.0</code>).</p>\n<h2>Installation</h2>\n<h3>Install via pip</h3>\n<pre>pip3 install nserver\n</pre>\n<h2>Quick Start</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nserver</span> <span class=\"kn\">import</span> <span class=\"n\">NameServer</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">NS</span><span class=\"p\">,</span> <span class=\"n\">TXT</span>\n\n<span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">NameServer</span><span class=\"p\">(</span><span class=\"s2\">\"example\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Responses can have answers records, additional records and authority records.</span>\n<span class=\"nd\">@ns</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"s2\">\"example.com\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"NS\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_name_servers</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">Response</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n        <span class=\"n\">my_ns</span> <span class=\"o\">=</span> <span class=\"s2\">\"ns</span><span class=\"si\">{}</span><span class=\"s2\">.example.com\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">answers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">NS</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">my_ns</span><span class=\"p\">))</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">additional</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">my_ns</span><span class=\"p\">,</span> <span class=\"s2\">\"1.1.1.1\"</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"c1\"># Rules can use wildcards for both single-segment (*) or many-segment (**)</span>\n<span class=\"c1\"># wildcards will not match mising segments (equivilent to regex `+`)</span>\n<span class=\"c1\"># You can also construct simple responses by return records directly.</span>\n\n\n<span class=\"nd\">@ns</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"s2\">\"**.example.com\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">wildcard_example</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"All example.com subdomains are at 1.2.3.4.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">\"1.2.3.4\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Rules are processed in the order they are registered so if a query matches</span>\n<span class=\"c1\"># this rule, it will not reach the `australian_catchall` below.</span>\n<span class=\"c1\"># Wildcards can appear in names, but the above segment limits apply.</span>\n\n\n<span class=\"nd\">@ns</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"s2\">\"www.*.com.au\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">all_australian_www</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">\"5.6.7.8\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Wildcard domains also allow special substitutions.</span>\n<span class=\"c1\"># base_name will provide the domain less any subdomains.</span>\n\n\n<span class=\"nd\">@ns</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"s2\">\"hello.</span><span class=\"si\">{base_domain}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"TXT\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\".com.au\"</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">TXT</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">\"G'day mate\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">TXT</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello friend\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Rules can apply to multiple query types.</span>\n\n\n<span class=\"nd\">@ns</span><span class=\"o\">.</span><span class=\"n\">rule</span><span class=\"p\">(</span><span class=\"s2\">\"**.com.au\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span> <span class=\"s2\">\"AAAA\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ANY\"</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">australian_catchall</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">()</span>  <span class=\"c1\"># Empty response, avoids default NXDOMAIN</span>\n\n\n<span class=\"c1\"># Anything that does not match will return NXDOMAIN</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">9001</span>  <span class=\"c1\"># It's over 9000!</span>\n    <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>Once running, interact using <code>dig</code>:</p>\n<pre>dig -p <span class=\"m\">9001</span> @localhost NS example.com\n\ndig -p <span class=\"m\">9001</span> @localhost A foo.example.com\ndig -p <span class=\"m\">9001</span> @localhost A foo.bar.example.com\n\ndig -p <span class=\"m\">9001</span> @localhost A www.foo.com.au\ndig -p <span class=\"m\">9001</span> @localhost A www.bar.com.au\n\ndig -p <span class=\"m\">9001</span> @localhost TXT hello.foo.com\ndig -p <span class=\"m\">9001</span> @localhost TXT hello.foo.com.au\n\ndig -p <span class=\"m\">9001</span> @localhost A foo.com.au\ndig -p <span class=\"m\">9001</span> @localhost AAAA foo.com.au\ndig -p <span class=\"m\">9001</span> @localhost ANY foo.com.au\n</pre>\n<h2>Bugs, Feature Requests etc</h2>\n<p>TLDR: Please <a href=\"https://github.com/nhairs/nserver/issues\" rel=\"nofollow\">submit an issue on github</a>.</p>\n<p>In the case of bug reports, please help me help you by following best practices <a href=\"https://marker.io/blog/write-bug-report/\" rel=\"nofollow\">1</a> <a href=\"https://www.chiark.greenend.org.uk/%7Esgtatham/bugs.html\" rel=\"nofollow\">2</a>.</p>\n<p>In the case of feature requests, please provide background to the problem you are trying to solve so to help find a solution that makes the most sense for the library as well as your usecase. Before making a feature request consider looking at my (roughly written) <a href=\"https://github.com/nhairs/nserver/blob/master/DESIGN_NOTES.md\" rel=\"nofollow\">design notes</a>.</p>\n<h2>Development</h2>\n<p>The only development dependency is bash and docker. All actions are run within docker for ease of use. See <code>./dev.sh help</code> for commands. Typical commands are <code>format</code>, <code>lint</code>, <code>test</code>, <code>repl</code>, <code>build</code>.</p>\n<p>I am still working through open source licencing and contributing, so not taking PRs at this point in time. Instead raise and issue and I'll try get to it as soon a feasible.</p>\n<h2>Licence</h2>\n<p>This project is licenced under the MIT Licence - see <a href=\"https://github.com/nahirs/nserver/blob/master/LICENCE\" rel=\"nofollow\"><code>LICENCE</code></a>.</p>\n<p>This project may include other open source licenced software - see <a href=\"https://github.com/nhairs/nserver/blob/master/NOTICE\" rel=\"nofollow\"><code>NOTICE</code></a>.</p>\n<h2>Authors</h2>\n<p>A project by Nicholas Hairs - <a href=\"https://www.nicholashairs.com\" rel=\"nofollow\">www.nicholashairs.com</a>.</p>\n\n          </div>"}, "last_serial": 6804966, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e67f9a4ca1e372fea4990796a4368c18", "sha256": "8b9761efbfacfa3153d6dd06889db43e7626ac1197aa81d4460662027e76f714"}, "downloads": -1, "filename": "nserver-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e67f9a4ca1e372fea4990796a4368c18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14525, "upload_time": "2020-02-29T10:55:34", "upload_time_iso_8601": "2020-02-29T10:55:34.549528Z", "url": "https://files.pythonhosted.org/packages/f0/5c/864aaf4aeb45a61d404017327dea6255b82c838cda45649452c3fe691c8c/nserver-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ac6eb3749e7ad8338fb29ca3a2de6f", "sha256": "56c36104b1c40d8d0552c548d77cb7956ba17f069737cf191da2a2963a1d9a40"}, "downloads": -1, "filename": "nserver-0.0.1.tar.gz", "has_sig": false, "md5_digest": "13ac6eb3749e7ad8338fb29ca3a2de6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 17527, "upload_time": "2020-02-29T10:55:37", "upload_time_iso_8601": "2020-02-29T10:55:37.902492Z", "url": "https://files.pythonhosted.org/packages/bf/a9/aaf5be1df0d20677430ff15e58aa4110f2b22f3eb424808dd438d5e9913e/nserver-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ae045d409cd068b1d0f7623ca531b1e5", "sha256": "8370e0f3a45a259345abcc83aecdd24e96ee9ec8928a33681f34e40d72ca2706"}, "downloads": -1, "filename": "nserver-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ae045d409cd068b1d0f7623ca531b1e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14681, "upload_time": "2020-03-01T11:17:56", "upload_time_iso_8601": "2020-03-01T11:17:56.540097Z", "url": "https://files.pythonhosted.org/packages/85/2b/d689c246bfa3c9c2e68110bd812f606fe1ed1ce22cd43e31d04420127aab/nserver-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b421c51d49a28813f824a962f3a027d", "sha256": "3e90e580e0f3a0531327b9b89d986ab1b1bed8cd13f042e007b3b039e89d1a27"}, "downloads": -1, "filename": "nserver-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8b421c51d49a28813f824a962f3a027d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 17637, "upload_time": "2020-03-01T11:17:58", "upload_time_iso_8601": "2020-03-01T11:17:58.761609Z", "url": "https://files.pythonhosted.org/packages/c1/69/03ff8d18f15273778d83c9d1c491649a7e6405929030e84bd8944c8b1b82/nserver-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ceed4a4cd2b2868cfa873f81e4d90e80", "sha256": "5471ae80876ae43086ee2fdb29fe8f2367ac43d700673c5a96d38fd76f3f9a18"}, "downloads": -1, "filename": "nserver-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ceed4a4cd2b2868cfa873f81e4d90e80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14936, "upload_time": "2020-03-13T10:49:48", "upload_time_iso_8601": "2020-03-13T10:49:48.147637Z", "url": "https://files.pythonhosted.org/packages/b0/78/8a36644909ccffc4f8160c3d02ae6df8247eb8e4adc2a9bfade1d41b41ba/nserver-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a426f8e2d0d8fb0fcd552b76682c10", "sha256": "79f8ce8916e8253a4ff34dfc6770dd79c1094e2a32e5c9b6e824cd2fbf424353"}, "downloads": -1, "filename": "nserver-0.0.3.tar.gz", "has_sig": false, "md5_digest": "69a426f8e2d0d8fb0fcd552b76682c10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 17860, "upload_time": "2020-03-13T10:49:50", "upload_time_iso_8601": "2020-03-13T10:49:50.254160Z", "url": "https://files.pythonhosted.org/packages/15/22/dbde7778cfa257579e2b5c8f7126b492adda734fc936f3a71e95e0453617/nserver-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ceed4a4cd2b2868cfa873f81e4d90e80", "sha256": "5471ae80876ae43086ee2fdb29fe8f2367ac43d700673c5a96d38fd76f3f9a18"}, "downloads": -1, "filename": "nserver-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ceed4a4cd2b2868cfa873f81e4d90e80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 14936, "upload_time": "2020-03-13T10:49:48", "upload_time_iso_8601": "2020-03-13T10:49:48.147637Z", "url": "https://files.pythonhosted.org/packages/b0/78/8a36644909ccffc4f8160c3d02ae6df8247eb8e4adc2a9bfade1d41b41ba/nserver-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69a426f8e2d0d8fb0fcd552b76682c10", "sha256": "79f8ce8916e8253a4ff34dfc6770dd79c1094e2a32e5c9b6e824cd2fbf424353"}, "downloads": -1, "filename": "nserver-0.0.3.tar.gz", "has_sig": false, "md5_digest": "69a426f8e2d0d8fb0fcd552b76682c10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 17860, "upload_time": "2020-03-13T10:49:50", "upload_time_iso_8601": "2020-03-13T10:49:50.254160Z", "url": "https://files.pythonhosted.org/packages/15/22/dbde7778cfa257579e2b5c8f7126b492adda734fc936f3a71e95e0453617/nserver-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:26 2020"}