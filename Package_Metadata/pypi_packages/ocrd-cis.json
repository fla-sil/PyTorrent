{"info": {"author": "Florian Fink, Tobias Englmeier, Christoph Weber", "author_email": "finkf@cis.lmu.de, englmeier@cis.lmu.de, web_chris@msn.com", "bugtrack_url": null, "classifiers": [], "description": "[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/cisocrgroup/ocrd_cis.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/alerts/)\n# ocrd_cis\n\n[CIS](http://www.cis.lmu.de) [OCR-D](http://ocr-d.de) command line\ntools for the automatic post-correction of OCR-results.\n\n## Introduction\n`ocrd_cis` contains different tools for the automatic post correction\nof OCR-results.  It contains tools for the training, evaluation and\nexecution of the post correction.  Most of the tools are following the\n[OCR-D cli conventions](https://ocr-d.github.io/cli).\n\nThere is a helper tool to align multiple OCR results as well as a\nversion of ocropy that works with python3.\n\n## Installation\nThere are multiple ways to install the `ocrd_cis` tools:\n * `make install` uses `pip` to install `ocrd_cis` (see below).\n * `make install-devel` uses `pip -e` to install `ocrd_cis` (see\n   below).\n * `pip install --upgrade pip ocrd_cis_dir`\n * `pip install -e --upgrade pip ocrd_cis_dir`\n\nIt is possible to install `ocrd_cis` in a custom directory using\n`virtualenv`:\n```sh\n python3 -m venv venv-dir\n source venv-dir/bin/activate\n make install # or any other command to install ocrd_cis (see above)\n # use ocrd_cis\n deactivate\n```\n\n## Usage\nMost tools follow the [OCR-D cli\nconventions](https://ocr-d.github.io/cli).  They accept the\n`--input-file-grp`, `--output-file-grp`, `--parameter`, `--mets`,\n`--log-level` command line arguments (short and long).  For some tools\n(most notably the alignment tool) expect a comma seperated list of\nmultiple input file groups.\n\nThe [ocrd-tool.json](ocrd_cis/ocrd-tool.json) contains a schema\ndescription of the parameter config file for the different tools that\naccept the `--parameter` argument.\n\n### ocrd-cis-post-correct.sh\nThis bash script runs the post correction using a pre-trained\n[model](http://cis.lmu.de/~finkf/model.zip).  If additional support\nOCRs should be used, models for these OCR steps are required and must\nbe configured in an according configuration file (see ocrd-tool.json).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the master-OCR file group\n * `--output-file-grp` name of the post-correction file group\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\n### ocrd-cis-align\nAligns tokens of multiple input file groups to one output file group.\nThis tool is used to align the master OCR with any additional support\nOCRs.  It accepts a comma-separated list of input file groups, which\nit aligns in order.\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` comma seperated list of the input file groups;\n   first input file group is the master OCR\n * `--output-file-grp` name of the file group for the aligned result\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\n### ocrd-cis-train.sh\nScript to train a model from a list of ground-truth archives (see\nocrd-tool.json) for the post correction.  The tool somewhat mimics the\nbehaviour of other ocrd tools:\n * `--mets` for the workspace\n * `--log-level` is passed to other tools\n * `--parameter` is used as configuration\n * `--output-file-grp` defines the output file group for the model\n\n### ocrd-cis-data\nHelper tool to get the path of the installed data files. Usage:\n`ocrd-cis-data [-jar|-3gs]` to get the path of the jar library or the\npath to th default 3-grams language model file.\n\n### ocrd-cis-wer\nHelper tool to calculate the word error rate aligned ocr files.  It\nwrites a simple JSON-formated stats file to the given output file group.\n\nArguments:\n * `--input-file-grp` input file group of aligned ocr results with\n   their respective ground truth.\n * `--output-file-grp` name of the file group for the stats file\n * `--log-level` set log level\n * `--mets` path to METS file in workspace\n\n### ocrd-cis-profile\nRun the profiler over the given files of the according the given input\nfile grp and adds a gzipped JSON-formatted profile to the output file\ngroup of the workspace.  This tools requires an installed [language\nprofiler](https://github.com/cisocrgroup/Profiler).\n\nArguments:\n * `--parameter` path to configuration file\n * `--input-file-grp` name of the input file group to profile\n * `--output-file-grp` name of the output file group where the profile\n   is stored\n * `--log-level` set log level\n * `--mets` path to METS file in the workspace\n\n### ocrd-cis-ocropy-train\nThe ocropy-train tool can be used to train LSTM models.\nIt takes ground truth from the workspace and saves (image+text) snippets from the corresponding pages.\nThen a model is trained on all snippets for 1 million (or the given number of) randomized iterations from the parameter file.\n```sh\nocrd-cis-ocropy-train \\\n  --input-file-grp OCR-D-GT-SEG-LINE \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-clip\nThe ocropy-clip tool can be used to remove intrusions of neighbouring segments in regions / lines of a workspace.\nIt runs a (ad-hoc binarization and) connected component analysis on every text region / line of every PAGE in the input file group, as well as its overlapping neighbours, and for each binary object of conflict, determines whether it belongs to the neighbour, and can therefore be clipped to white. It references the resulting segment image files in the output PAGE (as AlternativeImage).\n```sh\nocrd-cis-ocropy-clip \\\n  --input-file-grp OCR-D-SEG-LINE \\\n  --output-file-grp OCR-D-SEG-LINE-CLIP \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-resegment\nThe ocropy-resegment tool can be used to remove overlap between lines of a workspace.\nIt runs a (ad-hoc binarization and) line segmentation on every text region of every PAGE in the input file group, and for each line already annotated, determines the label of largest extent within the original coordinates (polygon outline) in that line, and annotates the resulting coordinates in the output PAGE.\n```sh\nocrd-cis-ocropy-resegment \\\n  --input-file-grp OCR-D-SEG-LINE \\\n  --output-file-grp OCR-D-SEG-LINE-RES \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-segment\nThe ocropy-segment tool can be used to segment regions into lines.\nIt runs a (ad-hoc binarization and) line segmentation on every text region of every PAGE in the input file group, and adds a TextLine element with the resulting polygon outline to the annotation of the output PAGE.\n```sh\nocrd-cis-ocropy-segment \\\n  --input-file-grp OCR-D-SEG-BLOCK \\\n  --output-file-grp OCR-D-SEG-LINE \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-deskew\nThe ocropy-deskew tool can be used to deskew pages / regions of a workspace.\nIt runs the Ocropy thresholding and deskewing estimation on every segment of every PAGE in the input file group and annotates the orientation angle in the output PAGE.\n```sh\nocrd-cis-ocropy-deskew \\\n  --input-file-grp OCR-D-SEG-LINE \\\n  --output-file-grp OCR-D-SEG-LINE-DES \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-denoise\nThe ocropy-denoise tool can be used to despeckle pages / regions / lines of a workspace.\nIt runs the Ocropy \"nlbin\" denoising on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as AlternativeImage).\n```sh\nocrd-cis-ocropy-denoise \\\n  --input-file-grp OCR-D-SEG-LINE-DES \\\n  --output-file-grp OCR-D-SEG-LINE-DEN \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-binarize\nThe ocropy-binarize tool can be used to binarize, denoise and deskew pages / regions / lines of a workspace.\nIt runs the Ocropy \"nlbin\" adaptive thresholding, deskewing estimation and denoising on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as AlternativeImage). (If a deskewing angle has already been annotated in a region, the tool respects that and rotates accordingly.) Images can also be produced grayscale-normalized.\n```sh\nocrd-cis-ocropy-binarize \\\n  --input-file-grp OCR-D-SEG-LINE-DES \\\n  --output-file-grp OCR-D-SEG-LINE-BIN \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-dewarp\nThe ocropy-dewarp tool can be used to dewarp text lines of a workspace.\nIt runs the Ocropy baseline estimation and dewarping on every line in every text region of every PAGE in the input file group and references the resulting line image files in the output PAGE (as AlternativeImage).\n```sh\nocrd-cis-ocropy-dewarp \\\n  --input-file-grp OCR-D-SEG-LINE-BIN \\\n  --output-file-grp OCR-D-SEG-LINE-DEW \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### ocrd-cis-ocropy-recognize\nThe ocropy-recognize tool can be used to recognize lines / words / glyphs from pages of a workspace.\nIt runs the Ocropy optical character recognition on every line in every text region of every PAGE in the input file group and adds the resulting text annotation in the output PAGE.\n```sh\nocrd-cis-ocropy-recognize \\\n  --input-file-grp OCR-D-SEG-LINE-DEW \\\n  --output-file-grp OCR-D-OCR-OCRO \\\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n```\n\n### Tesserocr\nInstall essential system packages for Tesserocr\n```sh\nsudo apt-get install python3-tk \\\n  tesseract-ocr libtesseract-dev libleptonica-dev \\\n  libimage-exiftool-perl libxml2-utils\n```\n\nThen install Tesserocr from: https://github.com/OCR-D/ocrd_tesserocr\n```sh\npip install -r requirements.txt\npip install .\n```\n\nDownload and move tesseract models from:\nhttps://github.com/tesseract-ocr/tesseract/wiki/Data-Files\nor use your own models and\nplace them into: /usr/share/tesseract-ocr/4.00/tessdata\n\n## Workflow configuration\n\nA decent pipeline might look like this:\n\n1. page-level cropping\n2. page-level binarization\n3. page-level deskewing\n4. page-level dewarping\n5. region segmentation\n6. region-level clipping\n7. region-level deskewing\n8. line segmentation\n9. line-level clipping or resegmentation\n10. line-level dewarping\n11. line-level recognition\n12. line-level alignment\n\nIf GT is used, steps 1, 5 and 8 can be omitted. Else if a segmentation is used in 5 and 8 which does not produce overlapping sections, steps 6 and 9 can be omitted.\n\n## Testing\nTo run a few basic tests type `make test` (`ocrd_cis` has to be\ninstalled in order to run any tests).\n\n## OCR-D workspace\n\n* Create a new (empty) workspace: `ocrd workspace init workspace-dir`\n* cd into `workspace-dir`\n* Add new file to workspace: `ocrd workspace add file -G group -i id\n  -m mimetype`\n\n## OCR-D links\n\n- [OCR-D](https://ocr-d.github.io)\n- [Github](https://github.com/OCR-D)\n- [Project-page](http://www.ocr-d.de/)\n- [Ground-truth](http://www.ocr-d.de/sites/all/GTDaten/IndexGT.html)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cisocrgroup/ocrd_cis", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ocrd-cis", "package_url": "https://pypi.org/project/ocrd-cis/", "platform": "", "project_url": "https://pypi.org/project/ocrd-cis/", "project_urls": {"Homepage": "https://github.com/cisocrgroup/ocrd_cis"}, "release_url": "https://pypi.org/project/ocrd-cis/0.0.7/", "requires_dist": ["ocrd (>=2.0.0)", "click", "scipy", "numpy (>=1.17.0)", "pillow (>=6.2.0)", "matplotlib (>3.0.0)", "python-Levenshtein", "calamari-ocr (==0.3.5)"], "requires_python": "", "summary": "CIS OCR-D command line tools", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e7bea1e8295ce8480e9004f810556c15a56d68a/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6369736f637267726f75702f6f6372645f6369732e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://lgtm.com/projects/g/cisocrgroup/ocrd_cis/alerts/\" rel=\"nofollow\"><img alt=\"Total alerts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c338bbf53e8ed60768638e89a7da938ee858a4f/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f6369736f637267726f75702f6f6372645f6369732e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a></p>\n<h1>ocrd_cis</h1>\n<p><a href=\"http://www.cis.lmu.de\" rel=\"nofollow\">CIS</a> <a href=\"http://ocr-d.de\" rel=\"nofollow\">OCR-D</a> command line\ntools for the automatic post-correction of OCR-results.</p>\n<h2>Introduction</h2>\n<p><code>ocrd_cis</code> contains different tools for the automatic post correction\nof OCR-results.  It contains tools for the training, evaluation and\nexecution of the post correction.  Most of the tools are following the\n<a href=\"https://ocr-d.github.io/cli\" rel=\"nofollow\">OCR-D cli conventions</a>.</p>\n<p>There is a helper tool to align multiple OCR results as well as a\nversion of ocropy that works with python3.</p>\n<h2>Installation</h2>\n<p>There are multiple ways to install the <code>ocrd_cis</code> tools:</p>\n<ul>\n<li><code>make install</code> uses <code>pip</code> to install <code>ocrd_cis</code> (see below).</li>\n<li><code>make install-devel</code> uses <code>pip -e</code> to install <code>ocrd_cis</code> (see\nbelow).</li>\n<li><code>pip install --upgrade pip ocrd_cis_dir</code></li>\n<li><code>pip install -e --upgrade pip ocrd_cis_dir</code></li>\n</ul>\n<p>It is possible to install <code>ocrd_cis</code> in a custom directory using\n<code>virtualenv</code>:</p>\n<pre> python3 -m venv venv-dir\n <span class=\"nb\">source</span> venv-dir/bin/activate\n make install <span class=\"c1\"># or any other command to install ocrd_cis (see above)</span>\n <span class=\"c1\"># use ocrd_cis</span>\n deactivate\n</pre>\n<h2>Usage</h2>\n<p>Most tools follow the <a href=\"https://ocr-d.github.io/cli\" rel=\"nofollow\">OCR-D cli\nconventions</a>.  They accept the\n<code>--input-file-grp</code>, <code>--output-file-grp</code>, <code>--parameter</code>, <code>--mets</code>,\n<code>--log-level</code> command line arguments (short and long).  For some tools\n(most notably the alignment tool) expect a comma seperated list of\nmultiple input file groups.</p>\n<p>The <a href=\"ocrd_cis/ocrd-tool.json\" rel=\"nofollow\">ocrd-tool.json</a> contains a schema\ndescription of the parameter config file for the different tools that\naccept the <code>--parameter</code> argument.</p>\n<h3>ocrd-cis-post-correct.sh</h3>\n<p>This bash script runs the post correction using a pre-trained\n<a href=\"http://cis.lmu.de/%7Efinkf/model.zip\" rel=\"nofollow\">model</a>.  If additional support\nOCRs should be used, models for these OCR steps are required and must\nbe configured in an according configuration file (see ocrd-tool.json).</p>\n<p>Arguments:</p>\n<ul>\n<li><code>--parameter</code> path to configuration file</li>\n<li><code>--input-file-grp</code> name of the master-OCR file group</li>\n<li><code>--output-file-grp</code> name of the post-correction file group</li>\n<li><code>--log-level</code> set log level</li>\n<li><code>--mets</code> path to METS file in workspace</li>\n</ul>\n<h3>ocrd-cis-align</h3>\n<p>Aligns tokens of multiple input file groups to one output file group.\nThis tool is used to align the master OCR with any additional support\nOCRs.  It accepts a comma-separated list of input file groups, which\nit aligns in order.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>--parameter</code> path to configuration file</li>\n<li><code>--input-file-grp</code> comma seperated list of the input file groups;\nfirst input file group is the master OCR</li>\n<li><code>--output-file-grp</code> name of the file group for the aligned result</li>\n<li><code>--log-level</code> set log level</li>\n<li><code>--mets</code> path to METS file in workspace</li>\n</ul>\n<h3>ocrd-cis-train.sh</h3>\n<p>Script to train a model from a list of ground-truth archives (see\nocrd-tool.json) for the post correction.  The tool somewhat mimics the\nbehaviour of other ocrd tools:</p>\n<ul>\n<li><code>--mets</code> for the workspace</li>\n<li><code>--log-level</code> is passed to other tools</li>\n<li><code>--parameter</code> is used as configuration</li>\n<li><code>--output-file-grp</code> defines the output file group for the model</li>\n</ul>\n<h3>ocrd-cis-data</h3>\n<p>Helper tool to get the path of the installed data files. Usage:\n<code>ocrd-cis-data [-jar|-3gs]</code> to get the path of the jar library or the\npath to th default 3-grams language model file.</p>\n<h3>ocrd-cis-wer</h3>\n<p>Helper tool to calculate the word error rate aligned ocr files.  It\nwrites a simple JSON-formated stats file to the given output file group.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>--input-file-grp</code> input file group of aligned ocr results with\ntheir respective ground truth.</li>\n<li><code>--output-file-grp</code> name of the file group for the stats file</li>\n<li><code>--log-level</code> set log level</li>\n<li><code>--mets</code> path to METS file in workspace</li>\n</ul>\n<h3>ocrd-cis-profile</h3>\n<p>Run the profiler over the given files of the according the given input\nfile grp and adds a gzipped JSON-formatted profile to the output file\ngroup of the workspace.  This tools requires an installed <a href=\"https://github.com/cisocrgroup/Profiler\" rel=\"nofollow\">language\nprofiler</a>.</p>\n<p>Arguments:</p>\n<ul>\n<li><code>--parameter</code> path to configuration file</li>\n<li><code>--input-file-grp</code> name of the input file group to profile</li>\n<li><code>--output-file-grp</code> name of the output file group where the profile\nis stored</li>\n<li><code>--log-level</code> set log level</li>\n<li><code>--mets</code> path to METS file in the workspace</li>\n</ul>\n<h3>ocrd-cis-ocropy-train</h3>\n<p>The ocropy-train tool can be used to train LSTM models.\nIt takes ground truth from the workspace and saves (image+text) snippets from the corresponding pages.\nThen a model is trained on all snippets for 1 million (or the given number of) randomized iterations from the parameter file.</p>\n<pre>ocrd-cis-ocropy-train <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-GT-SEG-LINE <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-clip</h3>\n<p>The ocropy-clip tool can be used to remove intrusions of neighbouring segments in regions / lines of a workspace.\nIt runs a (ad-hoc binarization and) connected component analysis on every text region / line of every PAGE in the input file group, as well as its overlapping neighbours, and for each binary object of conflict, determines whether it belongs to the neighbour, and can therefore be clipped to white. It references the resulting segment image files in the output PAGE (as AlternativeImage).</p>\n<pre>ocrd-cis-ocropy-clip <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-CLIP <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-resegment</h3>\n<p>The ocropy-resegment tool can be used to remove overlap between lines of a workspace.\nIt runs a (ad-hoc binarization and) line segmentation on every text region of every PAGE in the input file group, and for each line already annotated, determines the label of largest extent within the original coordinates (polygon outline) in that line, and annotates the resulting coordinates in the output PAGE.</p>\n<pre>ocrd-cis-ocropy-resegment <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-RES <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-segment</h3>\n<p>The ocropy-segment tool can be used to segment regions into lines.\nIt runs a (ad-hoc binarization and) line segmentation on every text region of every PAGE in the input file group, and adds a TextLine element with the resulting polygon outline to the annotation of the output PAGE.</p>\n<pre>ocrd-cis-ocropy-segment <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-BLOCK <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-deskew</h3>\n<p>The ocropy-deskew tool can be used to deskew pages / regions of a workspace.\nIt runs the Ocropy thresholding and deskewing estimation on every segment of every PAGE in the input file group and annotates the orientation angle in the output PAGE.</p>\n<pre>ocrd-cis-ocropy-deskew <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-DES <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-denoise</h3>\n<p>The ocropy-denoise tool can be used to despeckle pages / regions / lines of a workspace.\nIt runs the Ocropy \"nlbin\" denoising on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as AlternativeImage).</p>\n<pre>ocrd-cis-ocropy-denoise <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE-DES <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-DEN <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-binarize</h3>\n<p>The ocropy-binarize tool can be used to binarize, denoise and deskew pages / regions / lines of a workspace.\nIt runs the Ocropy \"nlbin\" adaptive thresholding, deskewing estimation and denoising on every segment of every PAGE in the input file group and references the resulting segment image files in the output PAGE (as AlternativeImage). (If a deskewing angle has already been annotated in a region, the tool respects that and rotates accordingly.) Images can also be produced grayscale-normalized.</p>\n<pre>ocrd-cis-ocropy-binarize <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE-DES <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-BIN <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-dewarp</h3>\n<p>The ocropy-dewarp tool can be used to dewarp text lines of a workspace.\nIt runs the Ocropy baseline estimation and dewarping on every line in every text region of every PAGE in the input file group and references the resulting line image files in the output PAGE (as AlternativeImage).</p>\n<pre>ocrd-cis-ocropy-dewarp <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE-BIN <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-SEG-LINE-DEW <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>ocrd-cis-ocropy-recognize</h3>\n<p>The ocropy-recognize tool can be used to recognize lines / words / glyphs from pages of a workspace.\nIt runs the Ocropy optical character recognition on every line in every text region of every PAGE in the input file group and adds the resulting text annotation in the output PAGE.</p>\n<pre>ocrd-cis-ocropy-recognize <span class=\"se\">\\</span>\n  --input-file-grp OCR-D-SEG-LINE-DEW <span class=\"se\">\\</span>\n  --output-file-grp OCR-D-OCR-OCRO <span class=\"se\">\\</span>\n  --mets mets.xml\n  --parameter file:///path/to/config.json\n</pre>\n<h3>Tesserocr</h3>\n<p>Install essential system packages for Tesserocr</p>\n<pre>sudo apt-get install python3-tk <span class=\"se\">\\</span>\n  tesseract-ocr libtesseract-dev libleptonica-dev <span class=\"se\">\\</span>\n  libimage-exiftool-perl libxml2-utils\n</pre>\n<p>Then install Tesserocr from: <a href=\"https://github.com/OCR-D/ocrd_tesserocr\" rel=\"nofollow\">https://github.com/OCR-D/ocrd_tesserocr</a></p>\n<pre>pip install -r requirements.txt\npip install .\n</pre>\n<p>Download and move tesseract models from:\n<a href=\"https://github.com/tesseract-ocr/tesseract/wiki/Data-Files\" rel=\"nofollow\">https://github.com/tesseract-ocr/tesseract/wiki/Data-Files</a>\nor use your own models and\nplace them into: /usr/share/tesseract-ocr/4.00/tessdata</p>\n<h2>Workflow configuration</h2>\n<p>A decent pipeline might look like this:</p>\n<ol>\n<li>page-level cropping</li>\n<li>page-level binarization</li>\n<li>page-level deskewing</li>\n<li>page-level dewarping</li>\n<li>region segmentation</li>\n<li>region-level clipping</li>\n<li>region-level deskewing</li>\n<li>line segmentation</li>\n<li>line-level clipping or resegmentation</li>\n<li>line-level dewarping</li>\n<li>line-level recognition</li>\n<li>line-level alignment</li>\n</ol>\n<p>If GT is used, steps 1, 5 and 8 can be omitted. Else if a segmentation is used in 5 and 8 which does not produce overlapping sections, steps 6 and 9 can be omitted.</p>\n<h2>Testing</h2>\n<p>To run a few basic tests type <code>make test</code> (<code>ocrd_cis</code> has to be\ninstalled in order to run any tests).</p>\n<h2>OCR-D workspace</h2>\n<ul>\n<li>Create a new (empty) workspace: <code>ocrd workspace init workspace-dir</code></li>\n<li>cd into <code>workspace-dir</code></li>\n<li>Add new file to workspace: <code>ocrd workspace add file -G group -i id -m mimetype</code></li>\n</ul>\n<h2>OCR-D links</h2>\n<ul>\n<li><a href=\"https://ocr-d.github.io\" rel=\"nofollow\">OCR-D</a></li>\n<li><a href=\"https://github.com/OCR-D\" rel=\"nofollow\">Github</a></li>\n<li><a href=\"http://www.ocr-d.de/\" rel=\"nofollow\">Project-page</a></li>\n<li><a href=\"http://www.ocr-d.de/sites/all/GTDaten/IndexGT.html\" rel=\"nofollow\">Ground-truth</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6235442, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "a186d34dad8d16c13d12af2d0b6d889b", "sha256": "ac2ada13f48b301831e41cba1e9a86b8e10ac2e8f4036ecdda9eb3524e36461c"}, "downloads": -1, "filename": "ocrd_cis-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a186d34dad8d16c13d12af2d0b6d889b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34044792, "upload_time": "2019-11-05T19:37:33", "upload_time_iso_8601": "2019-11-05T19:37:33.819139Z", "url": "https://files.pythonhosted.org/packages/f7/e0/5e3953c9243d05859e679bb83bef9c6f08e10fe0eef736fce90bc42657bc/ocrd_cis-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c8c3934a2a4fe764c112d8fd12a5ffc", "sha256": "97aea3f172a5eda7272113eb99d55fddda0a96069a20173ea17563d0532bbd55"}, "downloads": -1, "filename": "ocrd_cis-0.0.6.tar.gz", "has_sig": false, "md5_digest": "5c8c3934a2a4fe764c112d8fd12a5ffc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96645, "upload_time": "2019-11-05T19:37:38", "upload_time_iso_8601": "2019-11-05T19:37:38.406783Z", "url": "https://files.pythonhosted.org/packages/8a/a9/1fab502623c41529c13b4ecbedfe224f35843160ddcef4c527a18cfe73b8/ocrd_cis-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "539c82850462be8013eb31938e7779cf", "sha256": "c3d5898c869ae8c88db28fd52907bcabf1ac0d5cd474f73a30a1ff06615c3dbe"}, "downloads": -1, "filename": "ocrd_cis-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "539c82850462be8013eb31938e7779cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34044484, "upload_time": "2019-12-02T15:30:28", "upload_time_iso_8601": "2019-12-02T15:30:28.430896Z", "url": "https://files.pythonhosted.org/packages/38/c3/10637d7c51e3d6a0e5e5004476dcf2de093e1e3bec8452e241dcf1fa595c/ocrd_cis-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7df03598c04d60203afb00c61ff836da", "sha256": "3629b49d32e1626830b6890f6d47793474fcb3232e4b12c43d5d3f38bb33f08d"}, "downloads": -1, "filename": "ocrd_cis-0.0.7.tar.gz", "has_sig": false, "md5_digest": "7df03598c04d60203afb00c61ff836da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96590, "upload_time": "2019-12-02T15:30:33", "upload_time_iso_8601": "2019-12-02T15:30:33.037095Z", "url": "https://files.pythonhosted.org/packages/b8/cb/3fdc4daee6b85b732913c012cf41cafaab708b367c3fd5883d0d8e99c1b1/ocrd_cis-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "539c82850462be8013eb31938e7779cf", "sha256": "c3d5898c869ae8c88db28fd52907bcabf1ac0d5cd474f73a30a1ff06615c3dbe"}, "downloads": -1, "filename": "ocrd_cis-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "539c82850462be8013eb31938e7779cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34044484, "upload_time": "2019-12-02T15:30:28", "upload_time_iso_8601": "2019-12-02T15:30:28.430896Z", "url": "https://files.pythonhosted.org/packages/38/c3/10637d7c51e3d6a0e5e5004476dcf2de093e1e3bec8452e241dcf1fa595c/ocrd_cis-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7df03598c04d60203afb00c61ff836da", "sha256": "3629b49d32e1626830b6890f6d47793474fcb3232e4b12c43d5d3f38bb33f08d"}, "downloads": -1, "filename": "ocrd_cis-0.0.7.tar.gz", "has_sig": false, "md5_digest": "7df03598c04d60203afb00c61ff836da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96590, "upload_time": "2019-12-02T15:30:33", "upload_time_iso_8601": "2019-12-02T15:30:33.037095Z", "url": "https://files.pythonhosted.org/packages/b8/cb/3fdc4daee6b85b732913c012cf41cafaab708b367c3fd5883d0d8e99c1b1/ocrd_cis-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:40 2020"}