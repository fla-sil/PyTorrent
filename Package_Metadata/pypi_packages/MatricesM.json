{"info": {"author": "semihM", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# <a href=\"https://pypi.org/project/MatricesM/\">MatricesM</a>\n#### A stand-alone library for Python 3.6 and higher to create and manipulate matrices used in linear algebra and dataframes in statistics\n#### [Join MathStuff's Slack workspace](https://join.slack.com/t/mathstuffm/shared_invite/enQtNjE1NzE4NjM2ODM0LTk3ODEyNDVhY2Y5OGU1ZjZmZDc0YjQwMmE2YTJkZTczMGI1ODdmZGY2ZTQ2ZGRiMTM3MmQ0NjczODdmMzBiYjI) for questions and discussions.\n#### Check out [the wiki](https://github.com/MathStuff/MatricesM/wiki) for better documentation\n\n### Install using pip:\n\n   <code>pip install MatricesM</code>\n\n### Import by using:\n   ```python \n   import MatricesM as mm #Use by calling : mm.Matrix(arguments)\n   ```\n   #### OR\n   ```python \n   from MatricesM import * #Use matrices directly : Matrix(arguments)\n   ```\n### Import and print example matrices:\n   ```python \n   from MatricesM.exampleMatrices import *\n   ```\n\n### Basic syntax:\n\n_MatricesM.matrix.**Matrix**_(\n\n**dim**: _int | [int,int] | (int,int)_ = _None_\n\nDimensions of the matrix. **_Required_**(Unless **data** is given), mainly used for random matrix creation or to reshape the given **data**.\n\n**data**: _[Any] | [[Any],...] | str | dict_ = _[]_\n\nData to use in matrix, **_Optional_**, matrix's elements are picked from this parameter. Matrix filling related parameters are ignored if valid values given to this parameter. If no argument is passed matrix is filled depending on the **fill** and **ranged**\n\n**fill**: _Any_ = _None_\n\nObject,method or value to use for filling the matrix with. **_Optional_** . If a _list_ or _range_ is given, given object will be repeated as rows. Accepts custom functions. _default_ is **null** for dataframe dtype, **uniform** for other dtypes.\n\nAvailable special distributions: \n* _uniform_\n\n* _triangular_\n\n* _gauss_\n\n* _gammavariate,betavariate_\n\n* _expovariate_\n\n* _lognormvariate_\n\n**ranged**: _[*args] | (*args) | dict_ = _(0,1)_\n\nArguments to pass to the function in **fill**. **_Optional_**. To apply all the elements give a list | tuple. To apply every column individually give a dictionary as _{**\"Column_name\"**:[*args], ...}_. \n\nArguments should follow one of the following rules:\n\n* If 'fill' is uniform, interval to pick numbers from as _[minimum,maximum]_\n\n* If 'fill' is gauss or lognormvariate mean and standard deviation are picked from this attribute as _[mean,standard_deviation]_\n\n* If 'fill' is triangular, range of the numbers and the mode as _[minimum,maximum,mode]_\n\n* If 'fill' is gammavariate or betavariate, alpha and beta values are picked as _[alpha,beta]_\n\n* If 'fill' is expovariate, lambda value have to be given in a list as _[lambda]_\"\"\"                   \n\n**features**:_[str, ...]_ = _[]_\n\nColumn names. **_Optional_**. If no argument is given, columns get named \"col_1\",\"col_2\" and so on.\n\n**seed**: _int_ = _None_\n\nSeed to use while picking up random numbers. **_Optional_**.\n\n**dtype**: _int | float | complex | dataframe_ = _float_\n\nType of values the Matrix will carry. **_Optional_**. _dataframe_ to enable all types.\n\n**coldtypes**: _[type_,...]_ = _[]_\n\nList of type object for each column's data type. **_Optional_**. Requires _dataframe_ dtype to work.\n\n**decimal**: _int_ = 4\n\nAmount of decimal places to print. **_Optional_**.\n\n**index**: _[Any, ...] | (Any, ...) | Matrix | Label_ = _Label()_\n\nRow labels for each row. **_Optional_**. Only works with _dataframe_ dtype.\n\n\n**implicit**: _bool_ = _False_\n\nSkip setup proccess for faster initiation, if necessary arguments are passed. **_Optional_**. Don't change if you aren't sure what your matrix requires to work properly.\n\n****kwargs**: NOTES, PRECISION, DEFAULT_NULL, ROW_LIMIT, QR_ITERS, EIGENDEC_ITERS, DISPLAY_OPTIONS, DEFAULT_BOOL.\n      )\n\n_MatricesM.matrix.**dataframe**_(\n\n**data**=: _[Any] | [[Any],...] | str | dict_ = _[]_\n\nData to use in the dataframe, **Optional**, matrix's elements are picked from this parameter. Matrix filling related parameters are ignored if valid values given to this parameter. If no argument is passed matrix is filled depending on the **fill** and **ranged**\n\n**features**:_[str, ...]_ = _[]_\n\nColumn names. **_Optional_**. If no argument is given, columns get named \"col_1\",\"col_2\" and so on.\n\n**coldtypes**: _[type_,...]_ = _[]_\n\nList of type object for each column's data type. **_Optional_**.\n\n**decimal**: _int_ = _3_\n\nAmount of decimal places to print. **_Optional_**.\n\n**index**: _[Any, ...] | (Any, ...) | Matrix | Label_  = _Label()_\n\nRow labels for each row. **_Optional_**.\n\n\n****kwargs** #Rest of the arguments passed to Matrix\n      )\n\n   ##### -[matrix.py](https://github.com/MathStuff/MatricesM/blob/master/MatricesM/matrix.py) contains the main Matrix class.\n\n   ##### -[matrices.py](https://github.com/MathStuff/MatricesM/blob/master/MatricesM/constructors/matrices.py) contains functions to create special matrices.\n\n   ##### -[exampleMatrices.py](https://github.com/MathStuff/MatricesM/blob/master/MatricesM/exampleMatrices.py) contains example matrices.\n\n   ##### -Check the [project tab](https://github.com/semihM/Matrices/projects) to see the progress\n-------------- \nSome examples:\n--------------\n##### Create matrices filled with random numbers or given values\n```python \n#Creates a 4x4 matrix filled with random float numbers\nA = Matrix(4) \n\n#Creates a 3x5 matrix with elements uniformly distributed in the range from 10 to 25\nB = Matrix([3,5],ranged=[10,25]) \n\n#Create a 6x6 square matrix filled with random integer numbers in the default range: [0,1]\nE = Matrix(6,dtype=int) \n\n#Create a 200x5 matrix using Gauss distribution with mean=50 and standard deviation=10\nF = Matrix([200,5],fill=gauss,ranged=[50,10]) \n\n#Create a 10x10 matrix filled with 1's\nG = Matrix(10,fill=1)\n\n#Create a 200x4 matrix filled with integer numbers using triangular distribution where the range is [0,20] and mode is around if not 18\nH = Matrix((200,4),fill=triangular,ranged=[0,20,18],dtype=int) \n\n#Create a 50x50 matrix filled with complex numbers using beta distribution for both real and imaginary parts with alpha=2 and beta=5\nC1 = Matrix(50,fill=betavariate,ranged=[2,5],dtype=complex)\n\n#Create a 10x1 matrix filled with the given string\nS = Matrix((10,1),fill=\"hello\",dtype=dataframe)\n```\n----------------------------------------\n##### Generate randomly filled matrices using special distributions\n```python\n#Create a 10000x3 matrix using a triangular distribution with integer values.\nrandomData1 = Matrix((10000,3),\n                     fill=triangular,\n                     ranged={\"feature1\":(0,100,50),\"feature2\":(-50,50,25),\"feature3\":(10,20,20)},\n                     seed=32141,\n                     dtype=int)\n\n#Create a 10000x4 matrix using gamma distribution with float numbers.\nrandomData2 = Matrix([10000,4],\n                     fill=gammavariate,\n                     ranged={\"feature1\":[1,1.2],\"feature2\":[12,24],\"feature3\":[15,100],\"feature4\":[1.5,3]},\n                     seed=39598)\n\n#Create a 10000x4 matrix using normal(gauss) distribution with integer numbers.\nrandomData3 = Matrix([10000,4],\n                     fill=gauss,\n                     ranged={\"feature1\":[0,25],\"feature2\":[100,200],\"feature3\":[1000,10000],\"feature4\":[1,100]},\n                     seed=4472142,\n                     dtype=int)\n\n#Create a 20000x4 matrix using exponential distribution with float numbers.\nrandomData4 = Matrix([20000,4],\n                     fill=expovariate,\n                     ranged={\"feature1\":[0.1],\"feature2\":[0.95],\"feature3\":[0.5],\"feature4\":[0.00025]},\n                     seed=21751923)\n```\n----------------------------------------\n##### Create special matrices\n```python \n#3x3 identity matrix\nid3 = Identity(3)\n\n#A 8x8 symmetrical matrix filled with numbers in range from 0 to 1 with uniform distribution \nsym1 = Symmetrical(8)\n\n``` \n----------------------------------------\n##### Give list of numbers to create matrices\n```python \n#Creates a matrix with the given list of numbers\nfilled_rows = [[1,2,3],[4,5,6],[7,8,9]]\n\nC = Matrix(data=filled_rows) \n\n#Create a dataframe from a list\ndata = [[\"James\",180.4,85],\n        [\"Tom\",172,73],\n        [\"Sophia\",168.25,65]]\n\ndf = dataframe(data=data,\n               features=[\"Name\",\"Height\",\"Weight\"],\n               decimal=1)\n\n#Same as:        \ndf = Matrix(data=data,\n            dtype=dataframe,\n            features=[\"Name\",\"Height\",\"Weight\"],\n            decimal=1)\n\n#coldtypes parameter may be required in cases where the data given doesn't represent the desired data types\n``` \n----------------------------------------\n##### Give a string filled with data and use the numbers in it to create a matrix\n```python \n#Creates a 3x3 matrix from the given string\nC1 = Matrix(3,\"1 0 -1 4 5 5 1 2 2\") \n\n#Creates a 2x4 matrix from the given string\nC2 = Matrix([2,4],\"5 -2 -3 2 1 0 0 4\")\n\n#Create a matrix from the given string, dimension is *required* as [dataAmount,features]. Only numbers are picked up\ndata=\"\"\"1,K,60,69900,6325\n2,K,30,79000,5200\n3,E,52,85500,7825\n4,E,57,17100,8375\n5,E,55,5500,5450\n6,E,68,27200,8550\n7,E,41,20500,4500\n8,E,20,69000,5050\n9,K,33,13200,8325\n10,E,37,31800,5975\"\"\"\n\n#As an integer matrix\nintMat = Matrix(dim=[10,4],\n                data=data,\n                features=[\"id\",\"age\",\"num1\",\"num2\"],\n                dtype=int) \n\n#Or as a dataframe\ndf = Matrix(dim=[10,4],\n            data=data,\n            features=[\"id\",\"age\",\"num1\",\"num2\"],\n            dtype=dataframe,\n            coldtypes=[int]*4)\n\n```\n----------------------------------------\n##### Read data from files \n```python \n#Create a dataframe matrix from a csv file. read_file accepts 2 optional parameters: encoding, delimiter\ndata_matrix = read_file(data_directory) \n\n#Example dataset: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009\nwine = read_file(\".../Data/winequality-red.csv\")\n```\n----------------------------------------\n##### Get specific parts of the matrix (Assuming default column names)\n```python\n#All rows' second to forth columns as a matrix\nMatrix[:,1:4] == Matrix.t[1:4,:].t\n\n#Nineth column of every even numbered row as a matrix\nMatrix[::2,8] == Matrix[::2,8:9] == Matrix[\"col_9\"][::2] == Matrix.col_9[::2] \n#Using methods\nMatrix.select((\"col_9\"))[::2] == Matrix.col(9)[::2]\n\n#Forth to seventh rows as a matrix\nMatrix[3:7] \n\n#Fifth row's eighth element (returns the value as it is, not a new matrix)\nMatrix[4,7] == Matrix.matrix[4][7]\n\n#Use column names\nMatrix[\"col_3\",\"col_1\",\"col_2\"] == Matrix.select((\"col_3\",\"col_1\",\"col_2\"))\n\n#Use index column for row indices\n#Return the rows where the level 1 label matches the value\nMatrix.level[1].ind[value]\n\n#Return the \"col_4\" column of rows using level 3 labels starting with val1's first appearance and ending with the row before val2's first appearance\nMatrix.level[3].ind[val1:val2,\"col_4\"]\n```\n----------------------------------------\n##### Filter out depending on what you need\n```python \n#Using example dataset, get the rows where the \"quality\" feature is higher or equal to 6 and pH in range (3,3.3)\n#All statements should be properly closed with parentheses\nwineOverSix = winedata.where(\"(quality>6) and ((pH<3.3) and (pH>3))\")\n#Alternative way (2x faster)\nwineOverSix = winedata[(winedata[\"quality\"]>6) & ((winedata[\"pH\"]<3.3) & (winedata[\"pH\"]>3))]\n\n#Select the columns of pH and quality and assign them to another matrix\nfiltered = winedata.select((\"pH\",\"quality\"))\n#Alternative way (2x faster)\nfiltered = winedata[\"pH\",\"quality\"] \n\n#Use 'quality' column as row labels\nwinedata.index = winedata.quality\n\n#Add 'alcohol' to as level 2 row labels\nwinedata.index.add_level(winedata.alcohol)\n\n#Sort by given column and shuffle the data\nwinedata.sortBy(\"quality\") #Data is sorted in increasing order, use reverse=True for decreasing order\n\n#Shuffle the rows\nwinedata.shuffle()\n\n#Get 20 samples from the data under desired conditions\nwinedata.sample(20,\"(quality>5) and ((alcohol<11) or (density>0.95))\")\n#Alternative way (1.5x faster)\nwinedata[(winedata[\"quality\"]>5) & ((winedata[\"alcohol\"]<11) | (winedata[\"density\"]>0.95))].sample(20)\n\n#Return all the rows and select 'alcohol' and 'quality' columns where quality is higher than 6\nwinedata[winedata[\"quality\"]>6,(\"alcohol\", \"quality\")]\n\n#Return the rows of all email adresses using gmail.com domain in the column 'mail'\nMatrix.match(expression=r\"\\w+@gmail.com\",\n             columns=\"mail\",\n             as_row=True)\n```\n----------------------------------------\n##### Apply arithmetic operations to individual rows and columns.\n```python\n#Create a 1000x2 dataframe filled using normal distribution with given arguments\nmarketData = Matrix((1000,2),fill=gauss,ranged={\"Price\":(250,60),\"Discount\":(8,2)},dtype=dataframe)\n\n#Change invalid values in \"Discount\" column where it's less than 0 to 0\nmarketData[marketData[\"Discount\"]<0,\"Discount\"] = 0\n\n#Explore the data\nmarketData.describe\n\n#Multiply 'Price' with 0.9 and subtract 5 also add 10 to 'Discount' under the conditions: Price>100 and Discount<5\nmarketData.apply( (\"*0.9 -5\",\"+10\"), (\"Price\",\"Discount\"), \"(Price>100) and (Discount<5)\" )\n```\n----------------------------------------\n##### Replace values in the matrix\n```python\n#Replace all 0's with 1's\ndata.replace(old=0,new=1)\n\n#Replace all \"Pending\" values to \"Done\" in \"Order1\" and \"Order2\" columns\ndata.replace(old=\"Pending\", #(data[\"Order1\"]==\"Pending\") & (data[\"Order2\"]==\"Pending\") can also be used\n             new=\"Done\",\n             column=(\"Order1\",\"Order2\")\n             )\n\n#Replace all '' values in the column \"Length\" with the mean of the \"Length\" column\ndata.replace=(old='', #data[\"Length\"]==\"\" can also be used\n              new=data.mean(\"Length\",get=0),\n              column=\"Length\"\n              )\n\n#Replace all \"FF\" values in \"Grade\" column with \"AA\" in the column \"Grade\" where \"Year\" is less than 2019\ndata.replace(old=\"FF\", #data[\"Grade\"]==\"FF\" can also be used\n             new=\"AA\",\n             column=\"Grade\",\n             condition=data[\"Year\"]<=2019\n             )\n\n#Replace all numbers below 0 in with 0's in column named \"F5\" where \"Score1\" is less than \"Score2\"\ndata.replace(old=data[\"F5\"]<0,\n             new=0,\n             column=\"F5\",\n             condition=data[\"Score1\"]<data[\"Score2\"]\n             )\n\n#Change value of 'Feature5' to 0 in the rows where the 'Feature1' is lower than 0\ndata[data[\"Feature1\"]<0,\"Feature5\"] = 0\n\n#Create a matrix with a square filled with 0's in the middle, 5's outside\ns = Matrix(5,fill=5,dtype=int)\ns[1:4,1:4] = 0 #Same as using Matrix(3,fill=0)\n#Visually:\n\"\"\"\n5 5 5 5 5              5 5 5 5 5\n5 5 5 5 5  Changes to  5 0 0 0 5\n5 5 5 5 5     ---->    5 0 0 0 5\n5 5 5 5 5              5 0 0 0 5\n5 5 5 5 5              5 5 5 5 5\n\"\"\"\n\n#Change the values in the 2nd to 4th rows' 1st and 3rd columns to 0 and 99 \nMatrix[1:4,(\"col_1\",\"col_3\")] = [0,99]\n#Visually:\n\"\"\"\n3 9 6 10               3 9  6  10\n5 0 4  2   Changes to  0 0 99   2\n5 8 2  2      ---->    0 8 99   2\n6 1 7  0               0 1 99   0\n\"\"\"\n\n```\n----------------------------------------\n##### Concatenate a matrix to your matrix.\n```python\n#Concatenate a new column named 'Discounted_Price' containing the product of the 'Price' and 'Discount' columns\nmarketData[\"Discounted_Price\"] = marketData[\"Price\"] - marketData[\"Price\"]*(marketData[\"Discount\"]/100)\n```\n----------------------------------------\n#### Use your matrix's methods and properties\n##### Basics\n```python \nMatrix.grid #Prints ALL of the matrix's elements as a grid, if dtype is dataframe, column names also get printed\n\nMatrix.p #Prints the dimensions, wheter or not the matrix is square and the grid. If dtype is dataframe, column names are also printed\n\nMatrix.decimal #Returns the chosen amount of decimal digits to round while printing. Can be used to set it's value\n\nMatrix.matrix #Returns the matrix's rows as lists in a list. >>> dataframe.data Returns the same thing if dataframe was used instead of Matrix\n\nMatrix.dim #Returns the dimension of the matrix; can be used to change the dimensions, ex: [4,8] can be set to [1,32] where rows carry over as columns in order from left to right\n\nMatrix.d0 #Returns the amount of rows\n\nMatrix.d1 #Returns the amount of columns\n\nMatrix.col(n,as_matrix) #Returns the nth column if n is an integer or returns the column named n, as a list or matrix, set as_matrix to True to get the list as a matrix\n\nMatrix.row(n,as_matrix) #Returns nth row of the matrix as a list or matrix, set as_matrix to True to get the list as a matrix\n\nMatrix.concat(matrix,axis,fillnull) #Concatenate a matrix to self. Set 'axis' to 0 to concatenate as rows, 1(default) to concatenate as columns. 'fillnull' to enable filling missing values with null objects\n\nMatrix.add(values,row,col,feature,dtype,index,fillnull) #Adds list to given index in row or col, indeces start from 1. If a column is added, dtype and feature are used determine type and name. If a row is added, 'index' can be used to determine its row label. 'fillnull' to enable any missing values as null objects\n\nMatrix.remove(row,col) #Removes the desired row and/or column\n\nMatrix.swap(index1,index2,axis,returnmat) #Swap the row or column in index1 with index2. Set 'axis' 0 to use indices for rows, 1 to use as column indices. Column names can be used with axis=1. 'returnmat' to decide wheter or not to return self if 'inplace' is True\n\nMatrix.copy #Returns a copy of the matrix\n\nMatrix.obj #Returns the string form of the Matrix object which can be evaluated to create the same matrix\n\nMatrix.seed #Returns the seed used to generate the random numbers in the matrix, returns None if matrix wasn't filled randomly. Can be used to refill the matrix inplace if set to a new value\n\nMatrix.fill #Returns the value or distribution of which the matrix was filled with. Can be used to refill the matrix inplace if set to a new value\n\nMatrix.initRange #Returns the value of 'ranged' used while creating the matrix. Can be used to refill the matrix inplace if set to a new value\n\nMatrix.intForm #Returns integer form of the matrix\n\nMatrix.floatForm #Returns float form of the matrix\n\nMatrix.ceilForm #Returns a matrix of all the elements' ceiling values\n\nMatrix.floorForm #Returns the same matrix as \"intForm\"\n\nMatrix.roundForm(n) #Returns a matrix of elements' rounded up to n decimal digits. Same as round(Matrix,n)\n\nMatrix.kwargs #Returns a dictionary of the matrix's basic attributes\n\nMatrix.ROW_LIMIT #Maximum amount of rows to display using 'repr' method, default is 30.\n\nMatrix.PRECISION #Decimal places to round to during calculations\n\nMatrix.NOTES #String to attach to the string form of self. Notes get displayed after the labels and the grid is processed.\n\nMatrix.EIGENVEC_ITERS #How many iterations will be done in eigenvector calculation with shifted inverse iteration method, default is 10.\n\nMatrix.QR_ITERS #How many iterations will be done in eigenvalue calculation with QR algorithm, default is 50. Play around with this value if the values you get don't seem right.\n\nMatrix.DISPLAY_OPTIONS #Display options as dict; default:{\n                                                        \"allow_label_dupes\":False,\n                                                        \"dupe_place_holder\":\"//\",\n                                                        \"label_seperator\":\",\",\n                                                        \"left_top_corner\":\"+\",\n                                                        \"left_seperator\":\"|\",\n                                                        \"top_seperator\":\"-\",\n                                                        \"col_place_holder\":\"...\",\n                                                        \"row_place_holder\":\"...\"}\n\n\nMatrix.DEFAULT_NULL #Object to use as null values, default is null.\n\nMatrix.DEFAULT_BOOL #Boolean values to use as True and False in a dictionary. {True:1,False:0} is default.\n\nMatrix.col_1, Matrix.col_2, ... #Tries to return a 'Matrix.level.name' object pointing at 'Matrix's 'col_1','col_2', ... column name row, if it fails, tries to return all columns with 'col_1','col_2', ... column names in level-1 \n\n#Element wise arithmetic operators : \"@\", \"+\", \"-\", \"*\", \"/\", \"//\", \"**\", \"%\"\n\n#Element wise comparison operators : \"<\" ,\"<=\", \">\", \">=\", \"==\", \"!=\", \"&\", \"|\", \"~\"\n\n```\n##### Algebric properties\n```python\nMatrix.det #Returns the determinant of the matrix\n\nMatrix.t #Returns the transposed matrix\n\nMatrix.ht #Returns the hermitian-transpose of the matrix\n\nMatrix.adj #Returns the adjoint matrix\n\nMatrix.inv #Returns the inversed matrix\n\nMatrix.pseudoinv #Returns the pseudo inverse of the matrix\n\nMatrix.rank #Returns the rank of the matrix\n\nMatrix.echelon #Returns the echelon form of the matrix\n\nMatrix.rrechelon #Returns the reduced row echelon form of the matrix\n\nMatrix.eigenvalues #Returns the eigenvalues #Currently doesn't work with singular matrices\n\nMatrix.eigenvectors #Returns a list of eigenvectors as matrices\n\nMatrix.EIGENDEC #Returns the matrices from eigenvalue decomposition in a tuple\n\nMatrix.eigenvecmat #Returns a matrix with eigenvectors as columns\n\nMatrix.diagmat #Returns the diagonal matrix from eigenvalue decomposition\n\nMatrix.SVD #Returns the U,sigma and the V.ht matrices in a tuple from the singular value decomposition\n\nMatrix.LU #Returns both L and U matrices from LU decomposition in a tuple\n\nMatrix.lowtri #Returns the lower triangular form (L matrix from LU decomposition) of the matrix\n\nMatrix.uptri #Returns the upper triangular form (U matrix from LU decomposition) of the matrix\n\nMatrix.symdec #Returns both symmetrical and anti-symmetrical parts of the matrix\n\nMatrix.sym #Returns the symmetric part of the matrix \n\nMatrix.anti #Returns the antisymmetric part of the matrix\n\nMatrix.perma #Returns the permanent of the matrix\n\nMatrix.conj #Returns the conjugated forms of the elements in a matrix\n\nMatrix.QR #Returns both Q and R matrices from QR decomposition in a tuple\n\nMatrix.Q #Returns the orthonormal matrix from the QR decomposition\n\nMatrix.R #Returns the upper-triangular matrix from the QR decomposition\n\nMatrix.trace #Returns the trace of the matrix\n\nMatrix.isSquare #Returns True if the matrix is a square matrix\n\nMatrix.isSymmetric #Returns True if the matrix is a symmetric matrix\n\nMatrix.isAntiSymmetric #Returns True if the matrix is an antisymmetric matrix\n\nMatrix.isPerSymmetric #Returns True if the matrix is a persymmetric matrix\n\nMatrix.isHermitian #Returns True if the matrix is a hermitian matrix\n\nMatrix.isTriangular #Returns True if the matrix is a triangular matrix\n\nMatrix.isUpperTri #Returns True if the matrix is a upper-trianguar matrix\n\nMatrix.isLowerTri #Returns True if the matrix is a lower-triangular matrix\n\nMatrix.isDiagonal #Returns True if the matrix is a diagonal matrix\n\nMatrix.isUpperBidiagonal #Returns True if the matrix is an upper-bidiagonal matrix\n\nMatrix.isLowerBidiagonal #Returns True if the matrix is a lower-bidiagonal matrix\n\nMatrix.isBidiagonal #Returns True if the matrix is an upper-bidiagonal or a lower-bidiagonal matrix\n\nMatrix.isTridiagonal #Returns True if the matrix is a tridiagonal matrix\n\nMatrix.isUpperHessenberg #Returns True if the matrix is an upper-Hessenberg matrix\n\nMatrix.isLowerHessenberg #Returns True if the matrix is a lower-Hessenberg matrix\n\nMatrix.isHessenberg #Returns True if the matrix is an upper-Hessenberg or a lower-Hessenberg matrix\n\nMatrix.isToeplitz #Returns True if the matrix is a Toeplitz matrix\n\nMatrix.isUnitary #Returns True if the matrix is a unitary matrix\n\nMatrix.isIdempotent #Returns True if the matrix is an idempotent matrix\n\nMatrix.isOrthogonal #Returns True if the matrix is an orthogonal matrix\n\nMatrix.isCircular #Returns True if the matrix is a circular matrix\n\nMatrix.isPositive #Returns True if the matrix is a positive valued matrix\n\nMatrix.isNonNegative #Returns True if the matrix is a non-negative matrix\n\nMatrix.isProjection #Returns True if the matrix is a projection matrix\n\nMatrix.isZero #Returns True if the all the elements in the matrix is 0\n\nMatrix.isDefective #Returns True if the nxn matrix has m linearly independent eigenvalues where m<n\n\nMatrix.minor(m,n,returndet) #Returns the mth row's nth element's minor matrix's determinant, set returndet to False to get the matrix of which the determinant was calculated\n\nMatrix.setdiag(val) #Change diagonal elements to given 'val' or the values in 'val'. If 'val' is a Matrix, diagonals are picked from given matrix's diagonals\n\nMatrix.nilpotency(limit) #Returns the nilpotency degree of the matrix, returns None if some elements diverge. Limit parameter is for iteration amount\n\n```\n##### Statistical properties \n```python \nMatrix.features #Returns the column names if given, can also be used to set column names\n\nMatrix.index #Returns the values in the index column in a list, can bu used to set new indices\n\nMatrix.coldtypes #Returns what type of data each column carries, can be used to set the values.\n\nMatrix.head(n) #Returns the first n rows (if there are less than n rows it returns all the rows)\n\nMatrix.tail(n) #Returns the last n rows (if there are less than n rows it returns all the rows)\n\nMatrix.describe #Returns a description matrix with columns describing the matrix holding column, count, dtype, mean, sdev, min, 25%, 50%, 75%, max.\n\nMatrix.info #Returns information about columns: Dtype, Valid data amount, Invalid data amount, Unique data amount\n\nMatrix.uniques(column) #Returns the unique set of the 'column'; If 'column' is None, all columns' unique values are returned in a list of lists \n\nMatrix.groupBy(columns) #Return a 'Group' object containing the Matrix grouped by given 'columns'.\n\nMatrix.sum(n,get) #Returns the sum of the elements in the column with name/index 'n'. If 'n' is None, all column sums are returned. Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.prod(n,get) #Returns the product of the elements in the column with name/index 'n'. If 'n' is None, all column products are returned. Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.find(element,indexStart) #Returns a list of the element's indeces as tuples. Returns None if element not in matrix\n\nMatrix.select(columns) #Returns a matrix where the desired columns are concatenated in order. Only works if 'columns' is a tuple or a list\n\nMatrix.where(condition) #Returns a matrix where the given condition(s) are True. Example: Matrix.where(\"(col_1>=0.5) and (col_2!=0)\") \n\nMatrix.match(regex,columns,as_row) #Return the rows or the values in the matrix depending on 'as_row', in the given column names/numbers in 'columns' as a list/tuple or str/int, matching given 'regex' regular expressions\n\nMatrix.apply(expressions,columns,conditions,returnmat) #Apply given 'expression' to given 'columns' where the 'conditions' are True, set returnmat wheter or not to return self. If 'columns' is None, 'expressions' is applied to all columns. Executed as: value=eval('value'+operation)\n\nMatrix.transform(function,columns,conditions,returnmat #Pass values into the given 'function' and change them to what it outputs. Rest of the parameters works same as 'apply' method. Executed as: value = function(value)\n\nMatrix.replace(old,new,columns,conditions,returnmat) #Change 'old' values to 'new' in the 'columns' where the 'conditions' are True. Set returnmat wheter or not to return self.\n\nMatrix.sortBy(column,reverse,returnmat) #Sort the matrix by the desired 'column', do it in decreasing order if 'reverse'==True, and return self if 'returnmat'==True\n\nMatrix.shuffle(iterations,returnmat) #Shuffle the rows 'iterations' times and return self if 'returnmat'==True\n\nMatrix.sample(size,condition) #Get a sample sized 'size' where the 'condition' is True\n\nMatrix.count(column,get) #Returns how many of the values are valid (same type as given in coldtypes) for each or desired column(s).  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.mean(n,get) #Returns the nth column or column named n's average, give None as argument to get the all columns' averages;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.ranged(n,get) #Returns the nth column or column named n's range, give None as argument to get the all columns' ranges; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.median(n,get) #Returns the nth column or column named n's median, give None to get all columns' medians;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.freq(n,get) #Returns the nth column or column named n's elements frequency as a dictionary where elements are keys and how often they repeat as values. If called without arguments, returns every column\"s frequencies; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.\n\nMatrix.mode(n,get) #Returns the nth column or column named n's mode, give None to get all columns' modes;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.\n\nMatrix.ranked(n,reverse,key,get) #Returns the nth column or column named n's ranks(that are the indices the values would get if they were sorted) give None to get all columns' modes;  Use 'get' to choose what to return,-1 for ranks in-place, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.\n\nMatrix.iqr(n,as_quartiles,get) #Returns the nth column or column named n's iqr, give None to get all columns' iqr values. If first,second and third quartiles is desired, give as_quartiles parameter bool(True);  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.sdev(n,population,get) #Returns the nth column or column named n's standard deviation, if None is given as an argument returns all columns' standard deviations. Give population parameter 1 if calculation is not for samples, 0 otherwise; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.var(n,population,get) #Returns the nth column or column named n's variance, if None is given as an argument returns all columns' variance. Give population parameter 1 if calculation is not for samples, 0 otherwise;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.\n\nMatrix.cov(col1,col2,population) #Returns the col1 and col2's covariance. Give population parameter True if calculation is not for samples\n\nMatrix.z(col,population) #Returns the z-scores of the desired  column, call without arguments to get the all z-scores as a matrix. Give population parameter 1 if calculation is not for samples, 0 otherwise.\n\nMatrix.corr(column_1,column_2,population,method) #Returns linear correlation of 2 columns chosen from the matrix. If no argument given, returns the correlation matrix. Give population parameter 1 if calculation is not for samples, 0 otherwise; methods available: 'pearson'(default), 'kandell', 'spearman'\n\nMatrix.normalize(column,inplace,declare,returnmat) #Normalize the data in the desired column, None to normalize all columns. Give inplace parameter \"True\" boolean value to make normalization in-place, \"False\" to return a new matrix with normalized data. 'declare' to guess the new value's data type and replace it in 'coldtypes'. 'returnmat' to decide wheter or not to return self if 'inplace' is True\n\nMatrix.stdize(column,inplace,declare,returnmat) #Standardize the data in the desired column, None to standardize all columns. Give inplace parameter \"True\" boolean value to make standardization in-place, \"False\" to return a new matrix with standardized data. 'declare' to guess the new value's data type and replace it in 'coldtypes'. 'returnmat' to decide wheter or not to return self if 'inplace' is True\n\nMatrix.oneHotEncode(column,concat) #One-hot encode a 'column', 'concat' to decide wheter or not to concatenate the encoded matrix or return it\n\nMatrix.fix_coldtypes(column,retur_dtype) #Guess the data type for the given column(s), return dtypes with return_dtype or apply them directly to coldtypes\n\ndataframe.level #Inner level class used for passing the level to 'ind' class for row labeling.\n\ndataframe.level.ind #Row label indexing class, syntax : dataframe.level[integer_level].ind[row_label]\n\ndataframe.level.name #Column name indexing class, syntax : dataframe.level[integer_level].ind[column_name]\n\ndataframe.colname #Allows column names' level names over integers, syntax : dataframe.colname[label_name].name[column_name]\n\ndataframe.rowname #Allows row labels' level names over integers, syntax : dataframe.rowname[label_name].ind[column_name]\n```\n\n----------------------------------------\n##### Printing options\n```python\n#All the values + column names if it's a dataframe\n\nmyMatrix.grid \n\n#Dimensions + wheter its square or not + the string printed in 'grid' property\n\nmyMatrix.p #Same as print(myMatrix)\n\n#Similar to 'grid' but rows and columns are limited by myMatrix.ROW_LIMIT\n\nmyMatrix\n\n#Issues about dtypes not matching and/or missing data can be solved by using 'replace' method\n```\n----------------------------------------\n##### Copying the matrix\n```python\n#Using 'copy' property (Fastest)\n\nnewMatrix = oldMatrix.copy\n\n#Using 'kwargs' property, 'copy' uses this one so it's as fast as 'copy' is\n\nnewMatrix = Matrix(**oldMatrix.kwargs)\n\n#Using 'obj' property (Slowest)\n\nnewMatrix = eval(oldMatrix.obj)\n\n```\n----------------------------------------\n##### All calculations below returns a matrix filled with 1's where the condition is True, otherwise 0\n```python \n   A**2 == A*A\n\n   A*2 == A+A\n\n   A.t.t == A\n\n   A.adj[2,0] == A.minor(1,3)\n\n   #bool object can be called to get a boolean value of the matrix, if all elements are 1's then it will return True and False in any other case.\n   bool(Matrix(10,fill=1)) == True\n\n   #round call is currently required for the next examples due to <~%1e-5 error rate on some calculations\n\n   round(A @ Matrix(data=Identity(A.dim[0])),4) == round(A, 4) #A assumed to be a square matrix\n\n   round(A @ A.inv)== Matrix(data=Identity(A.dim[0]))\n\n   round(A,4) == round(A.sym + A.anti,4)\n\n   round(A.inv.inv,4) == round(A, 4)\n\n   round(A.lowtri @ A.uptri, 4) == round(A, 4)\n\n   round(A.Q @ A.R, 4) == round(A, 4)\n\n\n``` \n----------------------------------------\n\n#### More examples can be found in [exampleMatrices.py](https://github.com/MathStuff/MatricesM/blob/master/MatricesM/exampleMatrices.py)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MathStuff/Matrices", "keywords": "matrix,matrices,dataframe,linear algebra,statistics,mathematics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "MatricesM", "package_url": "https://pypi.org/project/MatricesM/", "platform": "", "project_url": "https://pypi.org/project/MatricesM/", "project_urls": {"Homepage": "https://github.com/MathStuff/Matrices"}, "release_url": "https://pypi.org/project/MatricesM/0.9a24.post2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python>=3.6 library for creating and using matrices used in linear algebra and statistics", "version": "0.9a24.post2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://pypi.org/project/MatricesM/\" rel=\"nofollow\">MatricesM</a></h1>\n<h4>A stand-alone library for Python 3.6 and higher to create and manipulate matrices used in linear algebra and dataframes in statistics</h4>\n<h4><a href=\"https://join.slack.com/t/mathstuffm/shared_invite/enQtNjE1NzE4NjM2ODM0LTk3ODEyNDVhY2Y5OGU1ZjZmZDc0YjQwMmE2YTJkZTczMGI1ODdmZGY2ZTQ2ZGRiMTM3MmQ0NjczODdmMzBiYjI\" rel=\"nofollow\">Join MathStuff's Slack workspace</a> for questions and discussions.</h4>\n<h4>Check out <a href=\"https://github.com/MathStuff/MatricesM/wiki\" rel=\"nofollow\">the wiki</a> for better documentation</h4>\n<h3>Install using pip:</h3>\n<p><code>pip install MatricesM</code></p>\n<h3>Import by using:</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">MatricesM</span> <span class=\"k\">as</span> <span class=\"nn\">mm</span> <span class=\"c1\">#Use by calling : mm.Matrix(arguments)</span>\n</pre>\n<h4>OR</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">MatricesM</span> <span class=\"kn\">import</span> <span class=\"o\">*</span> <span class=\"c1\">#Use matrices directly : Matrix(arguments)</span>\n</pre>\n<h3>Import and print example matrices:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">MatricesM.exampleMatrices</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<h3>Basic syntax:</h3>\n<p><em>MatricesM.matrix.<strong>Matrix</strong></em>(</p>\n<p><strong>dim</strong>: <em>int | [int,int] | (int,int)</em> = <em>None</em></p>\n<p>Dimensions of the matrix. <strong><em>Required</em></strong>(Unless <strong>data</strong> is given), mainly used for random matrix creation or to reshape the given <strong>data</strong>.</p>\n<p><strong>data</strong>: <em>[Any] | [[Any],...] | str | dict</em> = <em>[]</em></p>\n<p>Data to use in matrix, <strong><em>Optional</em></strong>, matrix's elements are picked from this parameter. Matrix filling related parameters are ignored if valid values given to this parameter. If no argument is passed matrix is filled depending on the <strong>fill</strong> and <strong>ranged</strong></p>\n<p><strong>fill</strong>: <em>Any</em> = <em>None</em></p>\n<p>Object,method or value to use for filling the matrix with. <strong><em>Optional</em></strong> . If a <em>list</em> or <em>range</em> is given, given object will be repeated as rows. Accepts custom functions. <em>default</em> is <strong>null</strong> for dataframe dtype, <strong>uniform</strong> for other dtypes.</p>\n<p>Available special distributions:</p>\n<ul>\n<li>\n<p><em>uniform</em></p>\n</li>\n<li>\n<p><em>triangular</em></p>\n</li>\n<li>\n<p><em>gauss</em></p>\n</li>\n<li>\n<p><em>gammavariate,betavariate</em></p>\n</li>\n<li>\n<p><em>expovariate</em></p>\n</li>\n<li>\n<p><em>lognormvariate</em></p>\n</li>\n</ul>\n<p><strong>ranged</strong>: <em>[*args] | (*args) | dict</em> = <em>(0,1)</em></p>\n<p>Arguments to pass to the function in <strong>fill</strong>. <strong><em>Optional</em></strong>. To apply all the elements give a list | tuple. To apply every column individually give a dictionary as <em>{<strong>\"Column_name\"</strong>:[*args], ...}</em>.</p>\n<p>Arguments should follow one of the following rules:</p>\n<ul>\n<li>\n<p>If 'fill' is uniform, interval to pick numbers from as <em>[minimum,maximum]</em></p>\n</li>\n<li>\n<p>If 'fill' is gauss or lognormvariate mean and standard deviation are picked from this attribute as <em>[mean,standard_deviation]</em></p>\n</li>\n<li>\n<p>If 'fill' is triangular, range of the numbers and the mode as <em>[minimum,maximum,mode]</em></p>\n</li>\n<li>\n<p>If 'fill' is gammavariate or betavariate, alpha and beta values are picked as <em>[alpha,beta]</em></p>\n</li>\n<li>\n<p>If 'fill' is expovariate, lambda value have to be given in a list as <em>[lambda]</em>\"\"\"</p>\n</li>\n</ul>\n<p><strong>features</strong>:<em>[str, ...]</em> = <em>[]</em></p>\n<p>Column names. <strong><em>Optional</em></strong>. If no argument is given, columns get named \"col_1\",\"col_2\" and so on.</p>\n<p><strong>seed</strong>: <em>int</em> = <em>None</em></p>\n<p>Seed to use while picking up random numbers. <strong><em>Optional</em></strong>.</p>\n<p><strong>dtype</strong>: <em>int | float | complex | dataframe</em> = <em>float</em></p>\n<p>Type of values the Matrix will carry. <strong><em>Optional</em></strong>. <em>dataframe</em> to enable all types.</p>\n<p><strong>coldtypes</strong>: <em>[type</em>,...]_ = <em>[]</em></p>\n<p>List of type object for each column's data type. <strong><em>Optional</em></strong>. Requires <em>dataframe</em> dtype to work.</p>\n<p><strong>decimal</strong>: <em>int</em> = 4</p>\n<p>Amount of decimal places to print. <strong><em>Optional</em></strong>.</p>\n<p><strong>index</strong>: <em>[Any, ...] | (Any, ...) | Matrix | Label</em> = <em>Label()</em></p>\n<p>Row labels for each row. <strong><em>Optional</em></strong>. Only works with <em>dataframe</em> dtype.</p>\n<p><strong>implicit</strong>: <em>bool</em> = <em>False</em></p>\n<p>Skip setup proccess for faster initiation, if necessary arguments are passed. <strong><em>Optional</em></strong>. Don't change if you aren't sure what your matrix requires to work properly.</p>\n<p>**<strong>kwargs</strong>: NOTES, PRECISION, DEFAULT_NULL, ROW_LIMIT, QR_ITERS, EIGENDEC_ITERS, DISPLAY_OPTIONS, DEFAULT_BOOL.\n)</p>\n<p><em>MatricesM.matrix.<strong>dataframe</strong></em>(</p>\n<p><strong>data</strong>=: <em>[Any] | [[Any],...] | str | dict</em> = <em>[]</em></p>\n<p>Data to use in the dataframe, <strong>Optional</strong>, matrix's elements are picked from this parameter. Matrix filling related parameters are ignored if valid values given to this parameter. If no argument is passed matrix is filled depending on the <strong>fill</strong> and <strong>ranged</strong></p>\n<p><strong>features</strong>:<em>[str, ...]</em> = <em>[]</em></p>\n<p>Column names. <strong><em>Optional</em></strong>. If no argument is given, columns get named \"col_1\",\"col_2\" and so on.</p>\n<p><strong>coldtypes</strong>: <em>[type</em>,...]_ = <em>[]</em></p>\n<p>List of type object for each column's data type. <strong><em>Optional</em></strong>.</p>\n<p><strong>decimal</strong>: <em>int</em> = <em>3</em></p>\n<p>Amount of decimal places to print. <strong><em>Optional</em></strong>.</p>\n<p><strong>index</strong>: <em>[Any, ...] | (Any, ...) | Matrix | Label</em>  = <em>Label()</em></p>\n<p>Row labels for each row. <strong><em>Optional</em></strong>.</p>\n<p>**<strong>kwargs</strong> #Rest of the arguments passed to Matrix\n)</p>\n<h5>-<a href=\"https://github.com/MathStuff/MatricesM/blob/master/MatricesM/matrix.py\" rel=\"nofollow\">matrix.py</a> contains the main Matrix class.</h5>\n<h5>-<a href=\"https://github.com/MathStuff/MatricesM/blob/master/MatricesM/constructors/matrices.py\" rel=\"nofollow\">matrices.py</a> contains functions to create special matrices.</h5>\n<h5>-<a href=\"https://github.com/MathStuff/MatricesM/blob/master/MatricesM/exampleMatrices.py\" rel=\"nofollow\">exampleMatrices.py</a> contains example matrices.</h5>\n<h5>-Check the <a href=\"https://github.com/semihM/Matrices/projects\" rel=\"nofollow\">project tab</a> to see the progress</h5>\n<hr>\n<h2>Some examples:</h2>\n<h5>Create matrices filled with random numbers or given values</h5>\n<pre><span class=\"c1\">#Creates a 4x4 matrix filled with random float numbers</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Creates a 3x5 matrix with elements uniformly distributed in the range from 10 to 25</span>\n<span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">])</span> \n\n<span class=\"c1\">#Create a 6x6 square matrix filled with random integer numbers in the default range: [0,1]</span>\n<span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Create a 200x5 matrix using Gauss distribution with mean=50 and standard deviation=10</span>\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">gauss</span><span class=\"p\">,</span><span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">])</span> \n\n<span class=\"c1\">#Create a 10x10 matrix filled with 1's</span>\n<span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a 200x4 matrix filled with integer numbers using triangular distribution where the range is [0,20] and mode is around if not 18</span>\n<span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">((</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">triangular</span><span class=\"p\">,</span><span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">],</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Create a 50x50 matrix filled with complex numbers using beta distribution for both real and imaginary parts with alpha=2 and beta=5</span>\n<span class=\"n\">C1</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">betavariate</span><span class=\"p\">,</span><span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">complex</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a 10x1 matrix filled with the given string</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dataframe</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Generate randomly filled matrices using special distributions</h5>\n<pre><span class=\"c1\">#Create a 10000x3 matrix using a triangular distribution with integer values.</span>\n<span class=\"n\">randomData1</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">((</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                     <span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">triangular</span><span class=\"p\">,</span>\n                     <span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"feature1\"</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">50</span><span class=\"p\">),</span><span class=\"s2\">\"feature2\"</span><span class=\"p\">:(</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">),</span><span class=\"s2\">\"feature3\"</span><span class=\"p\">:(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">)},</span>\n                     <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">32141</span><span class=\"p\">,</span>\n                     <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a 10000x4 matrix using gamma distribution with float numbers.</span>\n<span class=\"n\">randomData2</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n                     <span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">gammavariate</span><span class=\"p\">,</span>\n                     <span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"feature1\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mf\">1.2</span><span class=\"p\">],</span><span class=\"s2\">\"feature2\"</span><span class=\"p\">:[</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"p\">],</span><span class=\"s2\">\"feature3\"</span><span class=\"p\">:[</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">],</span><span class=\"s2\">\"feature4\"</span><span class=\"p\">:[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]},</span>\n                     <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">39598</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a 10000x4 matrix using normal(gauss) distribution with integer numbers.</span>\n<span class=\"n\">randomData3</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">10000</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n                     <span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">gauss</span><span class=\"p\">,</span>\n                     <span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"feature1\"</span><span class=\"p\">:[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">25</span><span class=\"p\">],</span><span class=\"s2\">\"feature2\"</span><span class=\"p\">:[</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">],</span><span class=\"s2\">\"feature3\"</span><span class=\"p\">:[</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"mi\">10000</span><span class=\"p\">],</span><span class=\"s2\">\"feature4\"</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">]},</span>\n                     <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">4472142</span><span class=\"p\">,</span>\n                     <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a 20000x4 matrix using exponential distribution with float numbers.</span>\n<span class=\"n\">randomData4</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">20000</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n                     <span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">expovariate</span><span class=\"p\">,</span>\n                     <span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"feature1\"</span><span class=\"p\">:[</span><span class=\"mf\">0.1</span><span class=\"p\">],</span><span class=\"s2\">\"feature2\"</span><span class=\"p\">:[</span><span class=\"mf\">0.95</span><span class=\"p\">],</span><span class=\"s2\">\"feature3\"</span><span class=\"p\">:[</span><span class=\"mf\">0.5</span><span class=\"p\">],</span><span class=\"s2\">\"feature4\"</span><span class=\"p\">:[</span><span class=\"mf\">0.00025</span><span class=\"p\">]},</span>\n                     <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">21751923</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Create special matrices</h5>\n<pre><span class=\"c1\">#3x3 identity matrix</span>\n<span class=\"n\">id3</span> <span class=\"o\">=</span> <span class=\"n\">Identity</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#A 8x8 symmetrical matrix filled with numbers in range from 0 to 1 with uniform distribution </span>\n<span class=\"n\">sym1</span> <span class=\"o\">=</span> <span class=\"n\">Symmetrical</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Give list of numbers to create matrices</h5>\n<pre><span class=\"c1\">#Creates a matrix with the given list of numbers</span>\n<span class=\"n\">filled_rows</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]]</span>\n\n<span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">filled_rows</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Create a dataframe from a list</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">\"James\"</span><span class=\"p\">,</span><span class=\"mf\">180.4</span><span class=\"p\">,</span><span class=\"mi\">85</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"Tom\"</span><span class=\"p\">,</span><span class=\"mi\">172</span><span class=\"p\">,</span><span class=\"mi\">73</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"Sophia\"</span><span class=\"p\">,</span><span class=\"mf\">168.25</span><span class=\"p\">,</span><span class=\"mi\">65</span><span class=\"p\">]]</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">dataframe</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n               <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span><span class=\"s2\">\"Height\"</span><span class=\"p\">,</span><span class=\"s2\">\"Weight\"</span><span class=\"p\">],</span>\n               <span class=\"n\">decimal</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Same as:        </span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dataframe</span><span class=\"p\">,</span>\n            <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span><span class=\"s2\">\"Height\"</span><span class=\"p\">,</span><span class=\"s2\">\"Weight\"</span><span class=\"p\">],</span>\n            <span class=\"n\">decimal</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#coldtypes parameter may be required in cases where the data given doesn't represent the desired data types</span>\n</pre>\n<hr>\n<h5>Give a string filled with data and use the numbers in it to create a matrix</h5>\n<pre><span class=\"c1\">#Creates a 3x3 matrix from the given string</span>\n<span class=\"n\">C1</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"s2\">\"1 0 -1 4 5 5 1 2 2\"</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Creates a 2x4 matrix from the given string</span>\n<span class=\"n\">C2</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"s2\">\"5 -2 -3 2 1 0 0 4\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Create a matrix from the given string, dimension is *required* as [dataAmount,features]. Only numbers are picked up</span>\n<span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"1,K,60,69900,6325</span>\n<span class=\"s2\">2,K,30,79000,5200</span>\n<span class=\"s2\">3,E,52,85500,7825</span>\n<span class=\"s2\">4,E,57,17100,8375</span>\n<span class=\"s2\">5,E,55,5500,5450</span>\n<span class=\"s2\">6,E,68,27200,8550</span>\n<span class=\"s2\">7,E,41,20500,4500</span>\n<span class=\"s2\">8,E,20,69000,5050</span>\n<span class=\"s2\">9,K,33,13200,8325</span>\n<span class=\"s2\">10,E,37,31800,5975\"\"\"</span>\n\n<span class=\"c1\">#As an integer matrix</span>\n<span class=\"n\">intMat</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n                <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span><span class=\"s2\">\"num1\"</span><span class=\"p\">,</span><span class=\"s2\">\"num2\"</span><span class=\"p\">],</span>\n                <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Or as a dataframe</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n            <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span><span class=\"s2\">\"age\"</span><span class=\"p\">,</span><span class=\"s2\">\"num1\"</span><span class=\"p\">,</span><span class=\"s2\">\"num2\"</span><span class=\"p\">],</span>\n            <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dataframe</span><span class=\"p\">,</span>\n            <span class=\"n\">coldtypes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Read data from files</h5>\n<pre><span class=\"c1\">#Create a dataframe matrix from a csv file. read_file accepts 2 optional parameters: encoding, delimiter</span>\n<span class=\"n\">data_matrix</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"n\">data_directory</span><span class=\"p\">)</span> \n\n<span class=\"c1\">#Example dataset: https://www.kaggle.com/uciml/red-wine-quality-cortez-et-al-2009</span>\n<span class=\"n\">wine</span> <span class=\"o\">=</span> <span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s2\">\".../Data/winequality-red.csv\"</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Get specific parts of the matrix (Assuming default column names)</h5>\n<pre><span class=\"c1\">#All rows' second to forth columns as a matrix</span>\n<span class=\"n\">Matrix</span><span class=\"p\">[:,</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,:]</span><span class=\"o\">.</span><span class=\"n\">t</span>\n\n<span class=\"c1\">#Nineth column of every even numbered row as a matrix</span>\n<span class=\"n\">Matrix</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"s2\">\"col_9\"</span><span class=\"p\">][::</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">col_9</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]</span> \n<span class=\"c1\">#Using methods</span>\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">((</span><span class=\"s2\">\"col_9\"</span><span class=\"p\">))[::</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)[::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#Forth to seventh rows as a matrix</span>\n<span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">]</span> \n\n<span class=\"c1\">#Fifth row's eighth element (returns the value as it is, not a new matrix)</span>\n<span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">][</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#Use column names</span>\n<span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"s2\">\"col_3\"</span><span class=\"p\">,</span><span class=\"s2\">\"col_1\"</span><span class=\"p\">,</span><span class=\"s2\">\"col_2\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">((</span><span class=\"s2\">\"col_3\"</span><span class=\"p\">,</span><span class=\"s2\">\"col_1\"</span><span class=\"p\">,</span><span class=\"s2\">\"col_2\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#Use index column for row indices</span>\n<span class=\"c1\">#Return the rows where the level 1 label matches the value</span>\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ind</span><span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#Return the \"col_4\" column of rows using level 3 labels starting with val1's first appearance and ending with the row before val2's first appearance</span>\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ind</span><span class=\"p\">[</span><span class=\"n\">val1</span><span class=\"p\">:</span><span class=\"n\">val2</span><span class=\"p\">,</span><span class=\"s2\">\"col_4\"</span><span class=\"p\">]</span>\n</pre>\n<hr>\n<h5>Filter out depending on what you need</h5>\n<pre><span class=\"c1\">#Using example dataset, get the rows where the \"quality\" feature is higher or equal to 6 and pH in range (3,3.3)</span>\n<span class=\"c1\">#All statements should be properly closed with parentheses</span>\n<span class=\"n\">wineOverSix</span> <span class=\"o\">=</span> <span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"(quality&gt;6) and ((pH&lt;3.3) and (pH&gt;3))\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#Alternative way (2x faster)</span>\n<span class=\"n\">wineOverSix</span> <span class=\"o\">=</span> <span class=\"n\">winedata</span><span class=\"p\">[(</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">((</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"pH\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mf\">3.3</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"pH\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">3</span><span class=\"p\">))]</span>\n\n<span class=\"c1\">#Select the columns of pH and quality and assign them to another matrix</span>\n<span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">((</span><span class=\"s2\">\"pH\"</span><span class=\"p\">,</span><span class=\"s2\">\"quality\"</span><span class=\"p\">))</span>\n<span class=\"c1\">#Alternative way (2x faster)</span>\n<span class=\"n\">filtered</span> <span class=\"o\">=</span> <span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"pH\"</span><span class=\"p\">,</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]</span> \n\n<span class=\"c1\">#Use 'quality' column as row labels</span>\n<span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">quality</span>\n\n<span class=\"c1\">#Add 'alcohol' to as level 2 row labels</span>\n<span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">add_level</span><span class=\"p\">(</span><span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">alcohol</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Sort by given column and shuffle the data</span>\n<span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">sortBy</span><span class=\"p\">(</span><span class=\"s2\">\"quality\"</span><span class=\"p\">)</span> <span class=\"c1\">#Data is sorted in increasing order, use reverse=True for decreasing order</span>\n\n<span class=\"c1\">#Shuffle the rows</span>\n<span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#Get 20 samples from the data under desired conditions</span>\n<span class=\"n\">winedata</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"s2\">\"(quality&gt;5) and ((alcohol&lt;11) or (density&gt;0.95))\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#Alternative way (1.5x faster)</span>\n<span class=\"n\">winedata</span><span class=\"p\">[(</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">((</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"alcohol\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"density\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mf\">0.95</span><span class=\"p\">))]</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Return all the rows and select 'alcohol' and 'quality' columns where quality is higher than 6</span>\n<span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"n\">winedata</span><span class=\"p\">[</span><span class=\"s2\">\"quality\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">6</span><span class=\"p\">,(</span><span class=\"s2\">\"alcohol\"</span><span class=\"p\">,</span> <span class=\"s2\">\"quality\"</span><span class=\"p\">)]</span>\n\n<span class=\"c1\">#Return the rows of all email adresses using gmail.com domain in the column 'mail'</span>\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"\\w+@gmail.com\"</span><span class=\"p\">,</span>\n             <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"s2\">\"mail\"</span><span class=\"p\">,</span>\n             <span class=\"n\">as_row</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Apply arithmetic operations to individual rows and columns.</h5>\n<pre><span class=\"c1\">#Create a 1000x2 dataframe filled using normal distribution with given arguments</span>\n<span class=\"n\">marketData</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">((</span><span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"n\">gauss</span><span class=\"p\">,</span><span class=\"n\">ranged</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"Price\"</span><span class=\"p\">:(</span><span class=\"mi\">250</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">),</span><span class=\"s2\">\"Discount\"</span><span class=\"p\">:(</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)},</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">dataframe</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Change invalid values in \"Discount\" column where it's less than 0 to 0</span>\n<span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"s2\">\"Discount\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">\"Discount\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">#Explore the data</span>\n<span class=\"n\">marketData</span><span class=\"o\">.</span><span class=\"n\">describe</span>\n\n<span class=\"c1\">#Multiply 'Price' with 0.9 and subtract 5 also add 10 to 'Discount' under the conditions: Price&gt;100 and Discount&lt;5</span>\n<span class=\"n\">marketData</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"s2\">\"*0.9 -5\"</span><span class=\"p\">,</span><span class=\"s2\">\"+10\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">\"Price\"</span><span class=\"p\">,</span><span class=\"s2\">\"Discount\"</span><span class=\"p\">),</span> <span class=\"s2\">\"(Price&gt;100) and (Discount&lt;5)\"</span> <span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>Replace values in the matrix</h5>\n<pre><span class=\"c1\">#Replace all 0's with 1's</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">new</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Replace all \"Pending\" values to \"Done\" in \"Order1\" and \"Order2\" columns</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s2\">\"Pending\"</span><span class=\"p\">,</span> <span class=\"c1\">#(data[\"Order1\"]==\"Pending\") &amp; (data[\"Order2\"]==\"Pending\") can also be used</span>\n             <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"s2\">\"Done\"</span><span class=\"p\">,</span>\n             <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"Order1\"</span><span class=\"p\">,</span><span class=\"s2\">\"Order2\"</span><span class=\"p\">)</span>\n             <span class=\"p\">)</span>\n\n<span class=\"c1\">#Replace all '' values in the column \"Length\" with the mean of the \"Length\" column</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"c1\">#data[\"Length\"]==\"\" can also be used</span>\n              <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"s2\">\"Length\"</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n              <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">\"Length\"</span>\n              <span class=\"p\">)</span>\n\n<span class=\"c1\">#Replace all \"FF\" values in \"Grade\" column with \"AA\" in the column \"Grade\" where \"Year\" is less than 2019</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s2\">\"FF\"</span><span class=\"p\">,</span> <span class=\"c1\">#data[\"Grade\"]==\"FF\" can also be used</span>\n             <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"s2\">\"AA\"</span><span class=\"p\">,</span>\n             <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">\"Grade\"</span><span class=\"p\">,</span>\n             <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Year\"</span><span class=\"p\">]</span><span class=\"o\">&lt;=</span><span class=\"mi\">2019</span>\n             <span class=\"p\">)</span>\n\n<span class=\"c1\">#Replace all numbers below 0 in with 0's in column named \"F5\" where \"Score1\" is less than \"Score2\"</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"F5\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n             <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n             <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s2\">\"F5\"</span><span class=\"p\">,</span>\n             <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Score1\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Score2\"</span><span class=\"p\">]</span>\n             <span class=\"p\">)</span>\n\n<span class=\"c1\">#Change value of 'Feature5' to 0 in the rows where the 'Feature1' is lower than 0</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Feature1\"</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">\"Feature5\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">#Create a matrix with a square filled with 0's in the middle, 5's outside</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\">#Same as using Matrix(3,fill=0)</span>\n<span class=\"c1\">#Visually:</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">5 5 5 5 5              5 5 5 5 5</span>\n<span class=\"sd\">5 5 5 5 5  Changes to  5 0 0 0 5</span>\n<span class=\"sd\">5 5 5 5 5     ----&gt;    5 0 0 0 5</span>\n<span class=\"sd\">5 5 5 5 5              5 0 0 0 5</span>\n<span class=\"sd\">5 5 5 5 5              5 5 5 5 5</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\">#Change the values in the 2nd to 4th rows' 1st and 3rd columns to 0 and 99 </span>\n<span class=\"n\">Matrix</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,(</span><span class=\"s2\">\"col_1\"</span><span class=\"p\">,</span><span class=\"s2\">\"col_3\"</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">99</span><span class=\"p\">]</span>\n<span class=\"c1\">#Visually:</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">3 9 6 10               3 9  6  10</span>\n<span class=\"sd\">5 0 4  2   Changes to  0 0 99   2</span>\n<span class=\"sd\">5 8 2  2      ----&gt;    0 8 99   2</span>\n<span class=\"sd\">6 1 7  0               0 1 99   0</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<hr>\n<h5>Concatenate a matrix to your matrix.</h5>\n<pre><span class=\"c1\">#Concatenate a new column named 'Discounted_Price' containing the product of the 'Price' and 'Discount' columns</span>\n<span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"s2\">\"Discounted_Price\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"s2\">\"Price\"</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"s2\">\"Price\"</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">marketData</span><span class=\"p\">[</span><span class=\"s2\">\"Discount\"</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h4>Use your matrix's methods and properties</h4>\n<h5>Basics</h5>\n<pre><span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">grid</span> <span class=\"c1\">#Prints ALL of the matrix's elements as a grid, if dtype is dataframe, column names also get printed</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">p</span> <span class=\"c1\">#Prints the dimensions, wheter or not the matrix is square and the grid. If dtype is dataframe, column names are also printed</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">decimal</span> <span class=\"c1\">#Returns the chosen amount of decimal digits to round while printing. Can be used to set it's value</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">matrix</span> <span class=\"c1\">#Returns the matrix's rows as lists in a list. &gt;&gt;&gt; dataframe.data Returns the same thing if dataframe was used instead of Matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">dim</span> <span class=\"c1\">#Returns the dimension of the matrix; can be used to change the dimensions, ex: [4,8] can be set to [1,32] where rows carry over as columns in order from left to right</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">d0</span> <span class=\"c1\">#Returns the amount of rows</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">d1</span> <span class=\"c1\">#Returns the amount of columns</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">col</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">as_matrix</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column if n is an integer or returns the column named n, as a list or matrix, set as_matrix to True to get the list as a matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">as_matrix</span><span class=\"p\">)</span> <span class=\"c1\">#Returns nth row of the matrix as a list or matrix, set as_matrix to True to get the list as a matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span><span class=\"n\">axis</span><span class=\"p\">,</span><span class=\"n\">fillnull</span><span class=\"p\">)</span> <span class=\"c1\">#Concatenate a matrix to self. Set 'axis' to 0 to concatenate as rows, 1(default) to concatenate as columns. 'fillnull' to enable filling missing values with null objects</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"n\">row</span><span class=\"p\">,</span><span class=\"n\">col</span><span class=\"p\">,</span><span class=\"n\">feature</span><span class=\"p\">,</span><span class=\"n\">dtype</span><span class=\"p\">,</span><span class=\"n\">index</span><span class=\"p\">,</span><span class=\"n\">fillnull</span><span class=\"p\">)</span> <span class=\"c1\">#Adds list to given index in row or col, indeces start from 1. If a column is added, dtype and feature are used determine type and name. If a row is added, 'index' can be used to determine its row label. 'fillnull' to enable any missing values as null objects</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span><span class=\"n\">col</span><span class=\"p\">)</span> <span class=\"c1\">#Removes the desired row and/or column</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">index1</span><span class=\"p\">,</span><span class=\"n\">index2</span><span class=\"p\">,</span><span class=\"n\">axis</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Swap the row or column in index1 with index2. Set 'axis' 0 to use indices for rows, 1 to use as column indices. Column names can be used with axis=1. 'returnmat' to decide wheter or not to return self if 'inplace' is True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">copy</span> <span class=\"c1\">#Returns a copy of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"c1\">#Returns the string form of the Matrix object which can be evaluated to create the same matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"c1\">#Returns the seed used to generate the random numbers in the matrix, returns None if matrix wasn't filled randomly. Can be used to refill the matrix inplace if set to a new value</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">fill</span> <span class=\"c1\">#Returns the value or distribution of which the matrix was filled with. Can be used to refill the matrix inplace if set to a new value</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">initRange</span> <span class=\"c1\">#Returns the value of 'ranged' used while creating the matrix. Can be used to refill the matrix inplace if set to a new value</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">intForm</span> <span class=\"c1\">#Returns integer form of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">floatForm</span> <span class=\"c1\">#Returns float form of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">ceilForm</span> <span class=\"c1\">#Returns a matrix of all the elements' ceiling values</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">floorForm</span> <span class=\"c1\">#Returns the same matrix as \"intForm\"</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">roundForm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"c1\">#Returns a matrix of elements' rounded up to n decimal digits. Same as round(Matrix,n)</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">kwargs</span> <span class=\"c1\">#Returns a dictionary of the matrix's basic attributes</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">ROW_LIMIT</span> <span class=\"c1\">#Maximum amount of rows to display using 'repr' method, default is 30.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">PRECISION</span> <span class=\"c1\">#Decimal places to round to during calculations</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">NOTES</span> <span class=\"c1\">#String to attach to the string form of self. Notes get displayed after the labels and the grid is processed.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">EIGENVEC_ITERS</span> <span class=\"c1\">#How many iterations will be done in eigenvector calculation with shifted inverse iteration method, default is 10.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">QR_ITERS</span> <span class=\"c1\">#How many iterations will be done in eigenvalue calculation with QR algorithm, default is 50. Play around with this value if the values you get don't seem right.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">DISPLAY_OPTIONS</span> <span class=\"c1\">#Display options as dict; default:{</span>\n                                                        <span class=\"s2\">\"allow_label_dupes\"</span><span class=\"p\">:</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"dupe_place_holder\"</span><span class=\"p\">:</span><span class=\"s2\">\"//\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"label_seperator\"</span><span class=\"p\">:</span><span class=\"s2\">\",\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"left_top_corner\"</span><span class=\"p\">:</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"left_seperator\"</span><span class=\"p\">:</span><span class=\"s2\">\"|\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"top_seperator\"</span><span class=\"p\">:</span><span class=\"s2\">\"-\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"col_place_holder\"</span><span class=\"p\">:</span><span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n                                                        <span class=\"s2\">\"row_place_holder\"</span><span class=\"p\">:</span><span class=\"s2\">\"...\"</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_NULL</span> <span class=\"c1\">#Object to use as null values, default is null.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_BOOL</span> <span class=\"c1\">#Boolean values to use as True and False in a dictionary. {True:1,False:0} is default.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">col_1</span><span class=\"p\">,</span> <span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">col_2</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"c1\">#Tries to return a 'Matrix.level.name' object pointing at 'Matrix's 'col_1','col_2', ... column name row, if it fails, tries to return all columns with 'col_1','col_2', ... column names in level-1 </span>\n\n<span class=\"c1\">#Element wise arithmetic operators : \"@\", \"+\", \"-\", \"*\", \"/\", \"//\", \"**\", \"%\"</span>\n\n<span class=\"c1\">#Element wise comparison operators : \"&lt;\" ,\"&lt;=\", \"&gt;\", \"&gt;=\", \"==\", \"!=\", \"&amp;\", \"|\", \"~\"</span>\n</pre>\n<h5>Algebric properties</h5>\n<pre><span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">det</span> <span class=\"c1\">#Returns the determinant of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"c1\">#Returns the transposed matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">ht</span> <span class=\"c1\">#Returns the hermitian-transpose of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">adj</span> <span class=\"c1\">#Returns the adjoint matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">inv</span> <span class=\"c1\">#Returns the inversed matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">pseudoinv</span> <span class=\"c1\">#Returns the pseudo inverse of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">rank</span> <span class=\"c1\">#Returns the rank of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">echelon</span> <span class=\"c1\">#Returns the echelon form of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">rrechelon</span> <span class=\"c1\">#Returns the reduced row echelon form of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">eigenvalues</span> <span class=\"c1\">#Returns the eigenvalues #Currently doesn't work with singular matrices</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">eigenvectors</span> <span class=\"c1\">#Returns a list of eigenvectors as matrices</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">EIGENDEC</span> <span class=\"c1\">#Returns the matrices from eigenvalue decomposition in a tuple</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">eigenvecmat</span> <span class=\"c1\">#Returns a matrix with eigenvectors as columns</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">diagmat</span> <span class=\"c1\">#Returns the diagonal matrix from eigenvalue decomposition</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">SVD</span> <span class=\"c1\">#Returns the U,sigma and the V.ht matrices in a tuple from the singular value decomposition</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">LU</span> <span class=\"c1\">#Returns both L and U matrices from LU decomposition in a tuple</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">lowtri</span> <span class=\"c1\">#Returns the lower triangular form (L matrix from LU decomposition) of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">uptri</span> <span class=\"c1\">#Returns the upper triangular form (U matrix from LU decomposition) of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">symdec</span> <span class=\"c1\">#Returns both symmetrical and anti-symmetrical parts of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">sym</span> <span class=\"c1\">#Returns the symmetric part of the matrix </span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">anti</span> <span class=\"c1\">#Returns the antisymmetric part of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">perma</span> <span class=\"c1\">#Returns the permanent of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">conj</span> <span class=\"c1\">#Returns the conjugated forms of the elements in a matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">QR</span> <span class=\"c1\">#Returns both Q and R matrices from QR decomposition in a tuple</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">Q</span> <span class=\"c1\">#Returns the orthonormal matrix from the QR decomposition</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">R</span> <span class=\"c1\">#Returns the upper-triangular matrix from the QR decomposition</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">trace</span> <span class=\"c1\">#Returns the trace of the matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isSquare</span> <span class=\"c1\">#Returns True if the matrix is a square matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isSymmetric</span> <span class=\"c1\">#Returns True if the matrix is a symmetric matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isAntiSymmetric</span> <span class=\"c1\">#Returns True if the matrix is an antisymmetric matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isPerSymmetric</span> <span class=\"c1\">#Returns True if the matrix is a persymmetric matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isHermitian</span> <span class=\"c1\">#Returns True if the matrix is a hermitian matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isTriangular</span> <span class=\"c1\">#Returns True if the matrix is a triangular matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isUpperTri</span> <span class=\"c1\">#Returns True if the matrix is a upper-trianguar matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isLowerTri</span> <span class=\"c1\">#Returns True if the matrix is a lower-triangular matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isDiagonal</span> <span class=\"c1\">#Returns True if the matrix is a diagonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isUpperBidiagonal</span> <span class=\"c1\">#Returns True if the matrix is an upper-bidiagonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isLowerBidiagonal</span> <span class=\"c1\">#Returns True if the matrix is a lower-bidiagonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isBidiagonal</span> <span class=\"c1\">#Returns True if the matrix is an upper-bidiagonal or a lower-bidiagonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isTridiagonal</span> <span class=\"c1\">#Returns True if the matrix is a tridiagonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isUpperHessenberg</span> <span class=\"c1\">#Returns True if the matrix is an upper-Hessenberg matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isLowerHessenberg</span> <span class=\"c1\">#Returns True if the matrix is a lower-Hessenberg matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isHessenberg</span> <span class=\"c1\">#Returns True if the matrix is an upper-Hessenberg or a lower-Hessenberg matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isToeplitz</span> <span class=\"c1\">#Returns True if the matrix is a Toeplitz matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isUnitary</span> <span class=\"c1\">#Returns True if the matrix is a unitary matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isIdempotent</span> <span class=\"c1\">#Returns True if the matrix is an idempotent matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isOrthogonal</span> <span class=\"c1\">#Returns True if the matrix is an orthogonal matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isCircular</span> <span class=\"c1\">#Returns True if the matrix is a circular matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isPositive</span> <span class=\"c1\">#Returns True if the matrix is a positive valued matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isNonNegative</span> <span class=\"c1\">#Returns True if the matrix is a non-negative matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isProjection</span> <span class=\"c1\">#Returns True if the matrix is a projection matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isZero</span> <span class=\"c1\">#Returns True if the all the elements in the matrix is 0</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">isDefective</span> <span class=\"c1\">#Returns True if the nxn matrix has m linearly independent eigenvalues where m&lt;n</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">minor</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">returndet</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the mth row's nth element's minor matrix's determinant, set returndet to False to get the matrix of which the determinant was calculated</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">setdiag</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"c1\">#Change diagonal elements to given 'val' or the values in 'val'. If 'val' is a Matrix, diagonals are picked from given matrix's diagonals</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">nilpotency</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nilpotency degree of the matrix, returns None if some elements diverge. Limit parameter is for iteration amount</span>\n</pre>\n<h5>Statistical properties</h5>\n<pre><span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">features</span> <span class=\"c1\">#Returns the column names if given, can also be used to set column names</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"c1\">#Returns the values in the index column in a list, can bu used to set new indices</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">coldtypes</span> <span class=\"c1\">#Returns what type of data each column carries, can be used to set the values.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the first n rows (if there are less than n rows it returns all the rows)</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">tail</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the last n rows (if there are less than n rows it returns all the rows)</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">describe</span> <span class=\"c1\">#Returns a description matrix with columns describing the matrix holding column, count, dtype, mean, sdev, min, 25%, 50%, 75%, max.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">info</span> <span class=\"c1\">#Returns information about columns: Dtype, Valid data amount, Invalid data amount, Unique data amount</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">uniques</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the unique set of the 'column'; If 'column' is None, all columns' unique values are returned in a list of lists </span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">groupBy</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"c1\">#Return a 'Group' object containing the Matrix grouped by given 'columns'.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the sum of the elements in the column with name/index 'n'. If 'n' is None, all column sums are returned. Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">prod</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the product of the elements in the column with name/index 'n'. If 'n' is None, all column products are returned. Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">,</span><span class=\"n\">indexStart</span><span class=\"p\">)</span> <span class=\"c1\">#Returns a list of the element's indeces as tuples. Returns None if element not in matrix</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"c1\">#Returns a matrix where the desired columns are concatenated in order. Only works if 'columns' is a tuple or a list</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span> <span class=\"c1\">#Returns a matrix where the given condition(s) are True. Example: Matrix.where(\"(col_1&gt;=0.5) and (col_2!=0)\") </span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">,</span><span class=\"n\">columns</span><span class=\"p\">,</span><span class=\"n\">as_row</span><span class=\"p\">)</span> <span class=\"c1\">#Return the rows or the values in the matrix depending on 'as_row', in the given column names/numbers in 'columns' as a list/tuple or str/int, matching given 'regex' regular expressions</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">,</span><span class=\"n\">columns</span><span class=\"p\">,</span><span class=\"n\">conditions</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Apply given 'expression' to given 'columns' where the 'conditions' are True, set returnmat wheter or not to return self. If 'columns' is None, 'expressions' is applied to all columns. Executed as: value=eval('value'+operation)</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span><span class=\"n\">columns</span><span class=\"p\">,</span><span class=\"n\">conditions</span><span class=\"p\">,</span><span class=\"n\">returnmat</span> <span class=\"c1\">#Pass values into the given 'function' and change them to what it outputs. Rest of the parameters works same as 'apply' method. Executed as: value = function(value)</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">old</span><span class=\"p\">,</span><span class=\"n\">new</span><span class=\"p\">,</span><span class=\"n\">columns</span><span class=\"p\">,</span><span class=\"n\">conditions</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Change 'old' values to 'new' in the 'columns' where the 'conditions' are True. Set returnmat wheter or not to return self.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">sortBy</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">reverse</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Sort the matrix by the desired 'column', do it in decreasing order if 'reverse'==True, and return self if 'returnmat'==True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">iterations</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Shuffle the rows 'iterations' times and return self if 'returnmat'==True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"n\">condition</span><span class=\"p\">)</span> <span class=\"c1\">#Get a sample sized 'size' where the 'condition' is True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns how many of the values are valid (same type as given in coldtypes) for each or desired column(s).  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's average, give None as argument to get the all columns' averages;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">ranged</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's range, give None as argument to get the all columns' ranges; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">median</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's median, give None to get all columns' medians;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's elements frequency as a dictionary where elements are keys and how often they repeat as values. If called without arguments, returns every column\"s frequencies; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">mode</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's mode, give None to get all columns' modes;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">ranked</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">reverse</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's ranks(that are the indices the values would get if they were sorted) give None to get all columns' modes;  Use 'get' to choose what to return,-1 for ranks in-place, 0 for a list, 1 for a dictionary(default), 2 for a list of Matrix object for each column.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">iqr</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">as_quartiles</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's iqr, give None to get all columns' iqr values. If first,second and third quartiles is desired, give as_quartiles parameter bool(True);  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">sdev</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">population</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's standard deviation, if None is given as an argument returns all columns' standard deviations. Give population parameter 1 if calculation is not for samples, 0 otherwise; Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">population</span><span class=\"p\">,</span><span class=\"n\">get</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the nth column or column named n's variance, if None is given as an argument returns all columns' variance. Give population parameter 1 if calculation is not for samples, 0 otherwise;  Use 'get' to choose what to return, 0 for a list, 1 for a dictionary(default), 2 for a Matrix.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">cov</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span><span class=\"n\">col2</span><span class=\"p\">,</span><span class=\"n\">population</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the col1 and col2's covariance. Give population parameter True if calculation is not for samples</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">(</span><span class=\"n\">col</span><span class=\"p\">,</span><span class=\"n\">population</span><span class=\"p\">)</span> <span class=\"c1\">#Returns the z-scores of the desired  column, call without arguments to get the all z-scores as a matrix. Give population parameter 1 if calculation is not for samples, 0 otherwise.</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">corr</span><span class=\"p\">(</span><span class=\"n\">column_1</span><span class=\"p\">,</span><span class=\"n\">column_2</span><span class=\"p\">,</span><span class=\"n\">population</span><span class=\"p\">,</span><span class=\"n\">method</span><span class=\"p\">)</span> <span class=\"c1\">#Returns linear correlation of 2 columns chosen from the matrix. If no argument given, returns the correlation matrix. Give population parameter 1 if calculation is not for samples, 0 otherwise; methods available: 'pearson'(default), 'kandell', 'spearman'</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">inplace</span><span class=\"p\">,</span><span class=\"n\">declare</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Normalize the data in the desired column, None to normalize all columns. Give inplace parameter \"True\" boolean value to make normalization in-place, \"False\" to return a new matrix with normalized data. 'declare' to guess the new value's data type and replace it in 'coldtypes'. 'returnmat' to decide wheter or not to return self if 'inplace' is True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">stdize</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">inplace</span><span class=\"p\">,</span><span class=\"n\">declare</span><span class=\"p\">,</span><span class=\"n\">returnmat</span><span class=\"p\">)</span> <span class=\"c1\">#Standardize the data in the desired column, None to standardize all columns. Give inplace parameter \"True\" boolean value to make standardization in-place, \"False\" to return a new matrix with standardized data. 'declare' to guess the new value's data type and replace it in 'coldtypes'. 'returnmat' to decide wheter or not to return self if 'inplace' is True</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">oneHotEncode</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">concat</span><span class=\"p\">)</span> <span class=\"c1\">#One-hot encode a 'column', 'concat' to decide wheter or not to concatenate the encoded matrix or return it</span>\n\n<span class=\"n\">Matrix</span><span class=\"o\">.</span><span class=\"n\">fix_coldtypes</span><span class=\"p\">(</span><span class=\"n\">column</span><span class=\"p\">,</span><span class=\"n\">retur_dtype</span><span class=\"p\">)</span> <span class=\"c1\">#Guess the data type for the given column(s), return dtypes with return_dtype or apply them directly to coldtypes</span>\n\n<span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"c1\">#Inner level class used for passing the level to 'ind' class for row labeling.</span>\n\n<span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">ind</span> <span class=\"c1\">#Row label indexing class, syntax : dataframe.level[integer_level].ind[row_label]</span>\n\n<span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"c1\">#Column name indexing class, syntax : dataframe.level[integer_level].ind[column_name]</span>\n\n<span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">colname</span> <span class=\"c1\">#Allows column names' level names over integers, syntax : dataframe.colname[label_name].name[column_name]</span>\n\n<span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">rowname</span> <span class=\"c1\">#Allows row labels' level names over integers, syntax : dataframe.rowname[label_name].ind[column_name]</span>\n</pre>\n<hr>\n<h5>Printing options</h5>\n<pre><span class=\"c1\">#All the values + column names if it's a dataframe</span>\n\n<span class=\"n\">myMatrix</span><span class=\"o\">.</span><span class=\"n\">grid</span> \n\n<span class=\"c1\">#Dimensions + wheter its square or not + the string printed in 'grid' property</span>\n\n<span class=\"n\">myMatrix</span><span class=\"o\">.</span><span class=\"n\">p</span> <span class=\"c1\">#Same as print(myMatrix)</span>\n\n<span class=\"c1\">#Similar to 'grid' but rows and columns are limited by myMatrix.ROW_LIMIT</span>\n\n<span class=\"n\">myMatrix</span>\n\n<span class=\"c1\">#Issues about dtypes not matching and/or missing data can be solved by using 'replace' method</span>\n</pre>\n<hr>\n<h5>Copying the matrix</h5>\n<pre><span class=\"c1\">#Using 'copy' property (Fastest)</span>\n\n<span class=\"n\">newMatrix</span> <span class=\"o\">=</span> <span class=\"n\">oldMatrix</span><span class=\"o\">.</span><span class=\"n\">copy</span>\n\n<span class=\"c1\">#Using 'kwargs' property, 'copy' uses this one so it's as fast as 'copy' is</span>\n\n<span class=\"n\">newMatrix</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">oldMatrix</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Using 'obj' property (Slowest)</span>\n\n<span class=\"n\">newMatrix</span> <span class=\"o\">=</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"n\">oldMatrix</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h5>All calculations below returns a matrix filled with 1's where the condition is True, otherwise 0</h5>\n<pre>   <span class=\"n\">A</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">*</span><span class=\"n\">A</span>\n\n   <span class=\"n\">A</span><span class=\"o\">*</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">+</span><span class=\"n\">A</span>\n\n   <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">A</span>\n\n   <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">adj</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">minor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n   <span class=\"c1\">#bool object can be called to get a boolean value of the matrix, if all elements are 1's then it will return True and False in any other case.</span>\n   <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"n\">fill</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n\n   <span class=\"c1\">#round call is currently required for the next examples due to &lt;~%1e-5 error rate on some calculations</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">Identity</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">dim</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])),</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"c1\">#A assumed to be a square matrix</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"o\">@</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">)</span><span class=\"o\">==</span> <span class=\"n\">Matrix</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">Identity</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">dim</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">sym</span> <span class=\"o\">+</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">anti</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">lowtri</span> <span class=\"o\">@</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">uptri</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n\n   <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">Q</span> <span class=\"o\">@</span> <span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h4>More examples can be found in <a href=\"https://github.com/MathStuff/MatricesM/blob/master/MatricesM/exampleMatrices.py\" rel=\"nofollow\">exampleMatrices.py</a></h4>\n\n          </div>"}, "last_serial": 6325043, "releases": {"0.8a0": [{"comment_text": "", "digests": {"md5": "9e17d1c4e8be77b81e9182699f76610b", "sha256": "c7e3ae573fdaaa5b6425d92811bc99f661d66aa1b9768cca7887a3eac75a985a"}, "downloads": -1, "filename": "MatricesM-0.8a0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e17d1c4e8be77b81e9182699f76610b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 20938, "upload_time": "2019-01-23T20:28:20", "upload_time_iso_8601": "2019-01-23T20:28:20.639339Z", "url": "https://files.pythonhosted.org/packages/b4/03/8b699f1f99dca3a949debc25cdc70afdc444db9d33e12919b3fbe0fd951d/MatricesM-0.8a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9331f1eea35f9e52c26ca400c4665856", "sha256": "16277b43d27dee2c2bdf92a9bd0ea0cf43f193a7e0b715c436288b0d78f3e891"}, "downloads": -1, "filename": "MatricesM-0.8a0.tar.gz", "has_sig": false, "md5_digest": "9331f1eea35f9e52c26ca400c4665856", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 35760, "upload_time": "2019-01-23T20:28:22", "upload_time_iso_8601": "2019-01-23T20:28:22.734069Z", "url": "https://files.pythonhosted.org/packages/aa/6b/ab03ed4de7273a3d64a8839aee961b43aaf618197d70843c6811a6d9467a/MatricesM-0.8a0.tar.gz", "yanked": false}], "0.8a1": [{"comment_text": "", "digests": {"md5": "82749746cef9d01ab09fd8f12778de48", "sha256": "09213c16a87c39eb7e69275639953ef9eb0fa2243f6135a9d76e125bd787b986"}, "downloads": -1, "filename": "MatricesM-0.8a1-py3-none-any.whl", "has_sig": false, "md5_digest": "82749746cef9d01ab09fd8f12778de48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21332, "upload_time": "2019-01-24T23:06:05", "upload_time_iso_8601": "2019-01-24T23:06:05.569635Z", "url": "https://files.pythonhosted.org/packages/7c/84/030723937b7f211dc0dc4fef12933064b4598a3b5851f3eb7f508094f6c4/MatricesM-0.8a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5531184c5f0f6e97bfc84c81d479481f", "sha256": "abbf1a395262e81fe9b31471df012a227be27f8c8ca7d829c7d2455eb5d08774"}, "downloads": -1, "filename": "MatricesM-0.8a1.tar.gz", "has_sig": false, "md5_digest": "5531184c5f0f6e97bfc84c81d479481f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36124, "upload_time": "2019-01-24T23:06:07", "upload_time_iso_8601": "2019-01-24T23:06:07.126451Z", "url": "https://files.pythonhosted.org/packages/42/40/a8ab3cf001f157455f0bdc4ec3cc5035b054f08622c185448d830f41abf4/MatricesM-0.8a1.tar.gz", "yanked": false}], "0.8a2": [{"comment_text": "", "digests": {"md5": "11ab77e454c9f686673199f95492a7d6", "sha256": "a6cedf94a882b3368e1a68c7d58e9087e64acca224040a027724b448332a09ed"}, "downloads": -1, "filename": "MatricesM-0.8a2-py3-none-any.whl", "has_sig": false, "md5_digest": "11ab77e454c9f686673199f95492a7d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21435, "upload_time": "2019-01-25T11:41:29", "upload_time_iso_8601": "2019-01-25T11:41:29.799823Z", "url": "https://files.pythonhosted.org/packages/ae/9b/96828d700c6d48c2015f03d3a0bef80dd44b6dbe427bf84f9b582163bb1b/MatricesM-0.8a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ebbf6c937a2a3ceb62eb73a5ad1c14d", "sha256": "0f3a7b94573e1a4dabae76b76a2f21c7cdc65f5b7a5b40574ce66d3bf88779f1"}, "downloads": -1, "filename": "MatricesM-0.8a2.tar.gz", "has_sig": false, "md5_digest": "0ebbf6c937a2a3ceb62eb73a5ad1c14d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36224, "upload_time": "2019-01-25T11:41:31", "upload_time_iso_8601": "2019-01-25T11:41:31.281118Z", "url": "https://files.pythonhosted.org/packages/6d/aa/4086a8f40f107d69cd8a048ad256d439ce5c989ec5c2e0f20218633bab6a/MatricesM-0.8a2.tar.gz", "yanked": false}], "0.8a3": [{"comment_text": "", "digests": {"md5": "d51cb3dbe7aa17fabcf1ec5646e30e1c", "sha256": "fd57eeff337da3fa43f628e41b27e1a34adf8a715ec51d6c57442b3168e8d9c6"}, "downloads": -1, "filename": "MatricesM-0.8a3-py3-none-any.whl", "has_sig": false, "md5_digest": "d51cb3dbe7aa17fabcf1ec5646e30e1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21910, "upload_time": "2019-01-28T18:35:25", "upload_time_iso_8601": "2019-01-28T18:35:25.567579Z", "url": "https://files.pythonhosted.org/packages/9a/47/90d1a6679215f22791b835df1f48f5c9a33b151a3343450b943b5a6aa841/MatricesM-0.8a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30f42595709bf8eb37e0878087948107", "sha256": "b71e9a3d053f7cdbb4d3e77df5f1dd883d2b3dbd976581f726c2f471d75d4b7c"}, "downloads": -1, "filename": "MatricesM-0.8a3.tar.gz", "has_sig": false, "md5_digest": "30f42595709bf8eb37e0878087948107", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36753, "upload_time": "2019-01-28T18:35:27", "upload_time_iso_8601": "2019-01-28T18:35:27.565311Z", "url": "https://files.pythonhosted.org/packages/07/93/2c34276dfe647a1189d14c6c8c2db1e7bbe587f5b63638dee6d87dadad52/MatricesM-0.8a3.tar.gz", "yanked": false}], "0.8a4": [{"comment_text": "", "digests": {"md5": "bd25cfef9da6e80296b5d47a3f38601a", "sha256": "2a5f7f87d8033ed64d6fff3bd518bc1e9fc837609d4ec31b6a939ca0b28d44ed"}, "downloads": -1, "filename": "MatricesM-0.8a4-py3-none-any.whl", "has_sig": false, "md5_digest": "bd25cfef9da6e80296b5d47a3f38601a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21869, "upload_time": "2019-01-29T12:39:27", "upload_time_iso_8601": "2019-01-29T12:39:27.734329Z", "url": "https://files.pythonhosted.org/packages/d8/36/71e0bf83f08295c516c07daac57d1160a8759dd10a1719530c0521ad5d1b/MatricesM-0.8a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71e09ab15e4cee55683b45f34c1ef334", "sha256": "dacb08906d8d1889ea2bc3c03da3992988e03d8035860adc4c73e1b05900c3ac"}, "downloads": -1, "filename": "MatricesM-0.8a4.tar.gz", "has_sig": false, "md5_digest": "71e09ab15e4cee55683b45f34c1ef334", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36675, "upload_time": "2019-01-29T12:39:29", "upload_time_iso_8601": "2019-01-29T12:39:29.008580Z", "url": "https://files.pythonhosted.org/packages/1d/9a/2638d6b528f8ff0a6eee9e363b1752958b84de3ed2a9b25571d366fe7342/MatricesM-0.8a4.tar.gz", "yanked": false}], "0.8a4.post1": [{"comment_text": "", "digests": {"md5": "937cf924a64e4cb506b9234d937041cd", "sha256": "3f9c3ef92b252868ee20f483383305d5db33677d89d8e61b8bd3ed10a7d642f8"}, "downloads": -1, "filename": "MatricesM-0.8a4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "937cf924a64e4cb506b9234d937041cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21929, "upload_time": "2019-01-29T12:47:47", "upload_time_iso_8601": "2019-01-29T12:47:47.486220Z", "url": "https://files.pythonhosted.org/packages/70/4d/615cdbb68f0b1595c951290ffda493c7af31ce354056fee9d41c65f47376/MatricesM-0.8a4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "245527ce8812d8bd792dddecad56f127", "sha256": "0d5b6ce014fd9eb48bbaf47650bfb08d2abd65d63b5d85d53bfd581ffcc94509"}, "downloads": -1, "filename": "MatricesM-0.8a4.post1.tar.gz", "has_sig": false, "md5_digest": "245527ce8812d8bd792dddecad56f127", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36703, "upload_time": "2019-01-29T12:47:49", "upload_time_iso_8601": "2019-01-29T12:47:49.103365Z", "url": "https://files.pythonhosted.org/packages/31/fa/5ee155f7ea73a5b1624de17e7a1f9c62b84cea4e752ae305f9dc84fd6425/MatricesM-0.8a4.post1.tar.gz", "yanked": false}], "0.8a5": [{"comment_text": "", "digests": {"md5": "09d5090cd4dc53b2f78edef076c16d50", "sha256": "f4714f96503380d78bf9f1b025baf5e1eb7e996e54599d4a6d2c351c605f6510"}, "downloads": -1, "filename": "MatricesM-0.8a5-py3-none-any.whl", "has_sig": false, "md5_digest": "09d5090cd4dc53b2f78edef076c16d50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21790, "upload_time": "2019-02-06T12:26:44", "upload_time_iso_8601": "2019-02-06T12:26:44.258424Z", "url": "https://files.pythonhosted.org/packages/b0/b1/2e0d35e9e2a2a37929cab67c8851bfc1e71a9c1ac1c5c6e751b826e1634e/MatricesM-0.8a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f873fbb63af3528c52193e1e347d1589", "sha256": "a18ce852891601210a9f793af9669c0aff8f51373b694ccc0aeaf2d0254529f4"}, "downloads": -1, "filename": "MatricesM-0.8a5.tar.gz", "has_sig": false, "md5_digest": "f873fbb63af3528c52193e1e347d1589", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36588, "upload_time": "2019-02-06T12:26:46", "upload_time_iso_8601": "2019-02-06T12:26:46.351984Z", "url": "https://files.pythonhosted.org/packages/05/e6/e59fb3333d9a90f060704f575d0d20f554a7e7732598452a9d5c2018bb09/MatricesM-0.8a5.tar.gz", "yanked": false}], "0.9a0": [{"comment_text": "", "digests": {"md5": "5afe78dd3d60ebca106fcb1976058e65", "sha256": "f80d59b615d7cd571d7bc65ab67610b4f8f41ed9f870d2bfc9e380dabf9f3efe"}, "downloads": -1, "filename": "MatricesM-0.9a0-py3-none-any.whl", "has_sig": false, "md5_digest": "5afe78dd3d60ebca106fcb1976058e65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 24764, "upload_time": "2019-02-09T13:47:50", "upload_time_iso_8601": "2019-02-09T13:47:50.088872Z", "url": "https://files.pythonhosted.org/packages/79/f9/7fffe40da44bb52323e0f8f328d022a0fa4b3fac19f1a8a4f60dcf37699c/MatricesM-0.9a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1db4a72a8461edb019b98efd178b340", "sha256": "bc1c3a1aef0e340b275232f42de68a63247d7deb886a723214fcbf21cfaf9760"}, "downloads": -1, "filename": "MatricesM-0.9a0.tar.gz", "has_sig": false, "md5_digest": "d1db4a72a8461edb019b98efd178b340", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 39614, "upload_time": "2019-02-09T13:47:51", "upload_time_iso_8601": "2019-02-09T13:47:51.795428Z", "url": "https://files.pythonhosted.org/packages/3b/c1/aafb104fbe0735126c96a0c20d071754295e8845c15ccb17fd99b03163c6/MatricesM-0.9a0.tar.gz", "yanked": false}], "0.9a1": [{"comment_text": "", "digests": {"md5": "ab7a46d356693fe4285ba32f4fef10ef", "sha256": "0a31cdd1c4317460eac9b99203fedb51feb9e95638e86dd1905b8b5ab5ded81d"}, "downloads": -1, "filename": "MatricesM-0.9a1-py3-none-any.whl", "has_sig": false, "md5_digest": "ab7a46d356693fe4285ba32f4fef10ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 22557, "upload_time": "2019-02-13T16:42:12", "upload_time_iso_8601": "2019-02-13T16:42:12.816046Z", "url": "https://files.pythonhosted.org/packages/ac/ea/8c0d08472cab4ec432022b6fbf561a5036e522d3dc726ff9c52d12d00525/MatricesM-0.9a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ad6f3656353cc1c891d1727a0c9bde1", "sha256": "1ce0507950d3947d8811f327054f06503830e42b96b952649d5029725b665f85"}, "downloads": -1, "filename": "MatricesM-0.9a1.tar.gz", "has_sig": false, "md5_digest": "9ad6f3656353cc1c891d1727a0c9bde1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 37366, "upload_time": "2019-02-13T16:42:14", "upload_time_iso_8601": "2019-02-13T16:42:14.545294Z", "url": "https://files.pythonhosted.org/packages/42/a1/8883771dd72a3ea2579691d171b939dfe224a8108534e8414b7fc8785f87/MatricesM-0.9a1.tar.gz", "yanked": false}], "0.9a10.post1": [{"comment_text": "", "digests": {"md5": "23ed86c0a68a0a766d2199612a30e3e1", "sha256": "55968650cfc6576cd312c6045b433f0097af53be9ea7a93c47f84d92f827bccd"}, "downloads": -1, "filename": "MatricesM-0.9a10.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "23ed86c0a68a0a766d2199612a30e3e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 50263, "upload_time": "2019-04-18T20:22:42", "upload_time_iso_8601": "2019-04-18T20:22:42.701754Z", "url": "https://files.pythonhosted.org/packages/9d/3b/2303cabb334bb62cb3152264f90c29a783d5c6a020777e6cb1939b34d5b5/MatricesM-0.9a10.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1df612fbcac0d15a97c7f33e1aa8e68e", "sha256": "fc1f3decddeb1d42ffd592e5146b93775b1780577e6385bae250c701cbc8ae6b"}, "downloads": -1, "filename": "MatricesM-0.9a10.post1.tar.gz", "has_sig": false, "md5_digest": "1df612fbcac0d15a97c7f33e1aa8e68e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 42519, "upload_time": "2019-04-18T20:22:44", "upload_time_iso_8601": "2019-04-18T20:22:44.534485Z", "url": "https://files.pythonhosted.org/packages/47/f9/57958abffab6b005b165b9f74a681a6979690f9e8d32b09ada7378e6da11/MatricesM-0.9a10.post1.tar.gz", "yanked": false}], "0.9a11": [{"comment_text": "", "digests": {"md5": "901410dd274e1d24073297e93ce6bc78", "sha256": "f848bdcf60172f954062b352a96f1f76fe454cd099dae4bb89d9d89aeac0d929"}, "downloads": -1, "filename": "MatricesM-0.9a11-py3-none-any.whl", "has_sig": false, "md5_digest": "901410dd274e1d24073297e93ce6bc78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 52444, "upload_time": "2019-04-21T11:15:48", "upload_time_iso_8601": "2019-04-21T11:15:48.072328Z", "url": "https://files.pythonhosted.org/packages/2d/44/d961895fdd1b6d392636870d07534264b3dd27ea3ea538a3ffda810484f2/MatricesM-0.9a11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3f049e772e0689e83b7a7cb9f005851", "sha256": "93d10aac9fa8e0372142b58da271109ee513f44398e0b035185a179a0b1eae11"}, "downloads": -1, "filename": "MatricesM-0.9a11.tar.gz", "has_sig": false, "md5_digest": "d3f049e772e0689e83b7a7cb9f005851", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 42950, "upload_time": "2019-04-21T11:15:49", "upload_time_iso_8601": "2019-04-21T11:15:49.990745Z", "url": "https://files.pythonhosted.org/packages/f7/3f/905ef31903ab6d8333cefa9fe23bd11dca350c25a9132dffed11de011b03/MatricesM-0.9a11.tar.gz", "yanked": false}], "0.9a12": [{"comment_text": "", "digests": {"md5": "447273d9b3d629d6f9fa10fcb8fd4778", "sha256": "a5d44748848076d3ac89240620f83f60f1640165deaa565496b274c4a35606a1"}, "downloads": -1, "filename": "MatricesM-0.9a12-py3-none-any.whl", "has_sig": false, "md5_digest": "447273d9b3d629d6f9fa10fcb8fd4778", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 53766, "upload_time": "2019-04-25T10:35:27", "upload_time_iso_8601": "2019-04-25T10:35:27.356402Z", "url": "https://files.pythonhosted.org/packages/91/5f/e4f02c27687c4c4efd0775ade51bc49e9cc2cf27c97cef6aaccbb40f2c92/MatricesM-0.9a12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e94ad20e97e65977821f2ee18ff03e69", "sha256": "f5410b48cf4693b65936d10eb141b6127525b80478121df817837af4ba54e169"}, "downloads": -1, "filename": "MatricesM-0.9a12.tar.gz", "has_sig": false, "md5_digest": "e94ad20e97e65977821f2ee18ff03e69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 43672, "upload_time": "2019-04-25T10:35:29", "upload_time_iso_8601": "2019-04-25T10:35:29.506531Z", "url": "https://files.pythonhosted.org/packages/ec/f4/1b29ae5ab554c9683ae75352d0e5a662f4ab34a41750612cf063db9eae76/MatricesM-0.9a12.tar.gz", "yanked": false}], "0.9a13": [{"comment_text": "", "digests": {"md5": "720cd47b30d03a74d14fe8bc075baba4", "sha256": "740b29a10ea5ee0d9a0c278ee6243034ef84738e6574c78e76706890f5b43680"}, "downloads": -1, "filename": "MatricesM-0.9a13-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "720cd47b30d03a74d14fe8bc075baba4", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 59866, "upload_time": "2019-04-27T17:25:45", "upload_time_iso_8601": "2019-04-27T17:25:45.028074Z", "url": "https://files.pythonhosted.org/packages/af/98/2855a2b217e403dc8cb88f0e4868af7413ad2ea32e3045e7695bd02f5c65/MatricesM-0.9a13-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "945fb343d28e675ad98e365c4cfd2616", "sha256": "1604857b20229ef3aeaaee9b151a37f43780a7970c3583237fcaf9605908a118"}, "downloads": -1, "filename": "MatricesM-0.9a13.tar.gz", "has_sig": false, "md5_digest": "945fb343d28e675ad98e365c4cfd2616", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44415, "upload_time": "2019-04-27T17:25:50", "upload_time_iso_8601": "2019-04-27T17:25:50.858780Z", "url": "https://files.pythonhosted.org/packages/67/18/63c9a436e2e7d7742b1b3866814671500574c1d6a5c617e6ab61e8ca4372/MatricesM-0.9a13.tar.gz", "yanked": false}], "0.9a14": [{"comment_text": "", "digests": {"md5": "8895da392f049ca18bc15d7da8d63de5", "sha256": "1bfd0746f45f7de82808ba2a6be5abe2157dd6ef166df1ce4538ad0da75717a7"}, "downloads": -1, "filename": "MatricesM-0.9a14-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "8895da392f049ca18bc15d7da8d63de5", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 92996, "upload_time": "2019-04-29T19:32:07", "upload_time_iso_8601": "2019-04-29T19:32:07.686778Z", "url": "https://files.pythonhosted.org/packages/13/dd/84c7e83c9f20938db33398cc922a947e6225c75a2bdf5fe1f57d79b16785/MatricesM-0.9a14-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1c64a48ea94c560d98764c5abb5039b", "sha256": "57cb389bf8efccf67f228904b8f3c0d57388e7329e10ae58c2cfdf2277788dd7"}, "downloads": -1, "filename": "MatricesM-0.9a14.tar.gz", "has_sig": false, "md5_digest": "d1c64a48ea94c560d98764c5abb5039b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44804, "upload_time": "2019-04-29T19:32:13", "upload_time_iso_8601": "2019-04-29T19:32:13.434866Z", "url": "https://files.pythonhosted.org/packages/81/49/916c7cac06986d4afda1bbea2da9de2aa30d0058444ae389dd4daf92a6bd/MatricesM-0.9a14.tar.gz", "yanked": false}], "0.9a14.post1": [{"comment_text": "", "digests": {"md5": "a8db7324a7628c9dc453e9e8dc828064", "sha256": "3075f1c46bdc34c95c978a496896bbe0137b3c273cc9312dff1fda2f08e36ea5"}, "downloads": -1, "filename": "MatricesM-0.9a14.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "a8db7324a7628c9dc453e9e8dc828064", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 93093, "upload_time": "2019-04-29T19:46:28", "upload_time_iso_8601": "2019-04-29T19:46:28.034866Z", "url": "https://files.pythonhosted.org/packages/a3/66/046eb8ebe979422fe307d96bd82ffbc87d63de7686d363d9cea6c23f8817/MatricesM-0.9a14.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd411eb609c2ab5681a79bdc935f3ce8", "sha256": "16cb066e448a57d8359610553e547989bf870a307d398cf2a2279ac676a77a17"}, "downloads": -1, "filename": "MatricesM-0.9a14.post1.tar.gz", "has_sig": false, "md5_digest": "bd411eb609c2ab5681a79bdc935f3ce8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44844, "upload_time": "2019-04-29T19:46:33", "upload_time_iso_8601": "2019-04-29T19:46:33.606784Z", "url": "https://files.pythonhosted.org/packages/b6/99/b5738dd2c61b3e396db3f7f2e6fcd73c2f08cd7e8f9e0dd422c9364e81da/MatricesM-0.9a14.post1.tar.gz", "yanked": false}], "0.9a14.post2": [{"comment_text": "", "digests": {"md5": "0d309f1a8b79a4d28c7b062dc00eb88f", "sha256": "43b5bd96aaae582fa62e5692132ed9f6944f2e5ed2943f5a7dd36637cf215886"}, "downloads": -1, "filename": "MatricesM-0.9a14.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "0d309f1a8b79a4d28c7b062dc00eb88f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 102408, "upload_time": "2019-04-30T09:54:45", "upload_time_iso_8601": "2019-04-30T09:54:45.702782Z", "url": "https://files.pythonhosted.org/packages/ff/c6/ab3007ac62823ce9744ec7e9acea3c97fe382792463640546080e721992a/MatricesM-0.9a14.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcfa7a0c33a0285443377b2d380fdd73", "sha256": "528f41171bee49de5b9928889de4809b004a2470518fb009c0147cdd27e68bd3"}, "downloads": -1, "filename": "MatricesM-0.9a14.post2.tar.gz", "has_sig": false, "md5_digest": "fcfa7a0c33a0285443377b2d380fdd73", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45116, "upload_time": "2019-04-30T09:54:52", "upload_time_iso_8601": "2019-04-30T09:54:52.274782Z", "url": "https://files.pythonhosted.org/packages/05/33/a28297989f896ce9fe73500f39eb1a9e4917523e120c8ca5adfcefd738de/MatricesM-0.9a14.post2.tar.gz", "yanked": false}], "0.9a14.post3": [{"comment_text": "", "digests": {"md5": "8be31d7106f2caffa7739844cbbbacae", "sha256": "d9f367b833f964beaee769c5ab852a0f8cdc1f0b0b5a83a7586fba2e762e3f0a"}, "downloads": -1, "filename": "MatricesM-0.9a14.post3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "8be31d7106f2caffa7739844cbbbacae", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 107081, "upload_time": "2019-05-04T08:10:23", "upload_time_iso_8601": "2019-05-04T08:10:23.520180Z", "url": "https://files.pythonhosted.org/packages/b5/a3/24073ccf68d6bed8cffac3c700d4bf391f7061629c92b869b49c8126a82a/MatricesM-0.9a14.post3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03fdca720b72d0a50e0a0ab8b49b8d89", "sha256": "5f0d0e2d6b66fcdaa599fd96a35ffabd7dda971042e71d66630599a8c39db2d4"}, "downloads": -1, "filename": "MatricesM-0.9a14.post3.tar.gz", "has_sig": false, "md5_digest": "03fdca720b72d0a50e0a0ab8b49b8d89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45609, "upload_time": "2019-05-04T08:10:25", "upload_time_iso_8601": "2019-05-04T08:10:25.364907Z", "url": "https://files.pythonhosted.org/packages/35/5c/6141dc75a7a95e64c0511518c062b952c490f64e372142d9be27040e1139/MatricesM-0.9a14.post3.tar.gz", "yanked": false}], "0.9a14.post4": [{"comment_text": "", "digests": {"md5": "b48744a59170421599a0e2b8ea7580d8", "sha256": "211fa4c1d758baad08bc4cd9894808388cd80a8da87e6e8856b466fe41cc0639"}, "downloads": -1, "filename": "MatricesM-0.9a14.post4-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "b48744a59170421599a0e2b8ea7580d8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.5", "size": 107074, "upload_time": "2019-05-04T08:19:34", "upload_time_iso_8601": "2019-05-04T08:19:34.640916Z", "url": "https://files.pythonhosted.org/packages/d9/2b/3251a73c731aa0338d6d4b979a819314aad802408cabba0d69a423296eeb/MatricesM-0.9a14.post4-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76e85f683113529ea47e855b6ba528d6", "sha256": "23b35869281fe0bdd19478872c1b5d158c9338fd35e0a5903135b8f1bfd27b5a"}, "downloads": -1, "filename": "MatricesM-0.9a14.post4.tar.gz", "has_sig": false, "md5_digest": "76e85f683113529ea47e855b6ba528d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45590, "upload_time": "2019-05-04T08:19:36", "upload_time_iso_8601": "2019-05-04T08:19:36.405606Z", "url": "https://files.pythonhosted.org/packages/8a/89/417889bc7af9397aad28a9cd29bcfb33b58a0da9c7fcdd68d7c50770984e/MatricesM-0.9a14.post4.tar.gz", "yanked": false}], "0.9a14.post7": [{"comment_text": "", "digests": {"md5": "1efdeadb321cbe4cfc1cd77e9a0047fd", "sha256": "98b790d655eac3cd982ba5d6f1e2e82c9c5fecb5508325d4f2375ef11b0e4f06"}, "downloads": -1, "filename": "MatricesM-0.9a14.post7-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "1efdeadb321cbe4cfc1cd77e9a0047fd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 106491, "upload_time": "2019-05-07T17:29:38", "upload_time_iso_8601": "2019-05-07T17:29:38.540807Z", "url": "https://files.pythonhosted.org/packages/07/81/c769ee91131cfd907973c70589281fe90ce030faa53090a65f99e593629c/MatricesM-0.9a14.post7-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42f06a50f3187b84eb497014c0fac3d8", "sha256": "a179fa386c4ec7ad10b14219626850d192a7ea4a6a17d1a25ec3d35efb19dd01"}, "downloads": -1, "filename": "MatricesM-0.9a14.post7.tar.gz", "has_sig": false, "md5_digest": "42f06a50f3187b84eb497014c0fac3d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45737, "upload_time": "2019-05-07T17:29:40", "upload_time_iso_8601": "2019-05-07T17:29:40.212258Z", "url": "https://files.pythonhosted.org/packages/4e/8f/5ca059b4a3716d122090a2715e15591bed3595f4b324fec4211f377b66fc/MatricesM-0.9a14.post7.tar.gz", "yanked": false}], "0.9a14.post8": [{"comment_text": "", "digests": {"md5": "b947ac73bad213b530f8c419212c8730", "sha256": "99c899e4ecc2833339f3c59a766c6cfa78fc91850daf22448450f6f1bd483363"}, "downloads": -1, "filename": "MatricesM-0.9a14.post8-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "b947ac73bad213b530f8c419212c8730", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 106508, "upload_time": "2019-05-10T17:15:52", "upload_time_iso_8601": "2019-05-10T17:15:52.303782Z", "url": "https://files.pythonhosted.org/packages/af/12/a43ab31acf2c50c846aceaa36d97b2257fb40619f8d8e7a901d040eb2387/MatricesM-0.9a14.post8-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ab399d9b3b2ca2f65fd237da6949126", "sha256": "0fab888fc82bf4485747cdfd74687fbd12c357f958f30a386c90ff74c3633257"}, "downloads": -1, "filename": "MatricesM-0.9a14.post8.tar.gz", "has_sig": false, "md5_digest": "4ab399d9b3b2ca2f65fd237da6949126", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45808, "upload_time": "2019-05-10T17:15:56", "upload_time_iso_8601": "2019-05-10T17:15:56.623153Z", "url": "https://files.pythonhosted.org/packages/52/e9/9138f0c4721db0ebe82395637d70d9a8151deefb29da0395b570b5e2f6f1/MatricesM-0.9a14.post8.tar.gz", "yanked": false}], "0.9a15": [{"comment_text": "", "digests": {"md5": "a2c65a6acdf0b132a579794c2a61b17d", "sha256": "463b23648a0c42fc3765fd5eef491b09400a9fd780fa79580a998e40d3017987"}, "downloads": -1, "filename": "MatricesM-0.9a15-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "a2c65a6acdf0b132a579794c2a61b17d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 107871, "upload_time": "2019-05-11T20:23:35", "upload_time_iso_8601": "2019-05-11T20:23:35.529331Z", "url": "https://files.pythonhosted.org/packages/a9/f4/1595b01b4ca7ffe47269c29616d6e8f490a0acd950bd372d9b67fc6a2ed3/MatricesM-0.9a15-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d16f235ec8215df0fa951e42fb3c56d5", "sha256": "559d3087dc86bd1fea12a5b8b5909559bda6571b3efb973397732efa16b5972b"}, "downloads": -1, "filename": "MatricesM-0.9a15.tar.gz", "has_sig": false, "md5_digest": "d16f235ec8215df0fa951e42fb3c56d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 47088, "upload_time": "2019-05-11T20:23:37", "upload_time_iso_8601": "2019-05-11T20:23:37.574561Z", "url": "https://files.pythonhosted.org/packages/49/13/9dafe9c0e1d8ccc884903c0fe9e96369eea5e249f2be1b2ef2422ff0c613/MatricesM-0.9a15.tar.gz", "yanked": false}], "0.9a16": [{"comment_text": "", "digests": {"md5": "cf41b92c9ce6260f9161fe7c5f0628de", "sha256": "81ee6d5a2e1dc98c646b134eb6ecf72e3c56b5a7d9b309b77aa78ed771671e1a"}, "downloads": -1, "filename": "MatricesM-0.9a16-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "cf41b92c9ce6260f9161fe7c5f0628de", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 110957, "upload_time": "2019-05-12T17:00:22", "upload_time_iso_8601": "2019-05-12T17:00:22.637083Z", "url": "https://files.pythonhosted.org/packages/c1/bb/713d551ddb2289a4193af4dbfc4dcac678f89e939c747f3cf902431b41bc/MatricesM-0.9a16-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c61c2878c540e24f4071d5ec20ba67eb", "sha256": "daeddaea8e061ca791a07a6b6fa904ffea18015b14b8b0673d10157213f4571b"}, "downloads": -1, "filename": "MatricesM-0.9a16.tar.gz", "has_sig": false, "md5_digest": "c61c2878c540e24f4071d5ec20ba67eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49584, "upload_time": "2019-05-12T17:00:24", "upload_time_iso_8601": "2019-05-12T17:00:24.913463Z", "url": "https://files.pythonhosted.org/packages/7c/0d/a86613d9a9a79e82d7913ebbd6ed02ca32b5310118ac571d6f02b57e35ee/MatricesM-0.9a16.tar.gz", "yanked": false}], "0.9a16.post1": [{"comment_text": "", "digests": {"md5": "3ea7e3742c83fffdddc7decb28fb2a95", "sha256": "9ee001afee59f2b146916eae034c7093466ea60e597e54d4c74622e734c28839"}, "downloads": -1, "filename": "MatricesM-0.9a16.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "3ea7e3742c83fffdddc7decb28fb2a95", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 111049, "upload_time": "2019-05-12T18:34:14", "upload_time_iso_8601": "2019-05-12T18:34:14.163764Z", "url": "https://files.pythonhosted.org/packages/a2/e2/e4a8e3051c24072c38c9a4ea34b688387b6f1e57d1e2136cce639faa64bf/MatricesM-0.9a16.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ce36886e7d88bb79e04e6e27a8f6560", "sha256": "27ce2d7226d87fae6a483a720a04c37d04ebff29b954da7e094d39ac9d65bee5"}, "downloads": -1, "filename": "MatricesM-0.9a16.post1.tar.gz", "has_sig": false, "md5_digest": "3ce36886e7d88bb79e04e6e27a8f6560", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49598, "upload_time": "2019-05-12T18:34:16", "upload_time_iso_8601": "2019-05-12T18:34:16.614866Z", "url": "https://files.pythonhosted.org/packages/91/5a/ca10bddd02d69a31ee3ab09c645a225880ac0aadb9b0fc818797a2ec24ce/MatricesM-0.9a16.post1.tar.gz", "yanked": false}], "0.9a16.post2": [{"comment_text": "", "digests": {"md5": "901034d8d001440ad2d769b0b0d8e92f", "sha256": "31819e97595d551858e44e632e7e2bbed2685b7477b7eabedee57a2c3493ec3f"}, "downloads": -1, "filename": "MatricesM-0.9a16.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "901034d8d001440ad2d769b0b0d8e92f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 111778, "upload_time": "2019-05-16T14:47:45", "upload_time_iso_8601": "2019-05-16T14:47:45.590510Z", "url": "https://files.pythonhosted.org/packages/8a/64/7eeb6bef49148fb0effa4eeb00a6b645b25dcbfe95b453a9f4d5f55bb527/MatricesM-0.9a16.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70a3ac1fb0f63fd8bdc7637bd1ca244c", "sha256": "3e03edaabeef28260ed345f89d5fff76e093c495a97a6d92e3bfe7189c6be2f1"}, "downloads": -1, "filename": "MatricesM-0.9a16.post2.tar.gz", "has_sig": false, "md5_digest": "70a3ac1fb0f63fd8bdc7637bd1ca244c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 50228, "upload_time": "2019-05-16T14:47:48", "upload_time_iso_8601": "2019-05-16T14:47:48.195572Z", "url": "https://files.pythonhosted.org/packages/3e/1c/01e22cf97cfbc540ff08383ce1169c30c0b1981531c74fb3bf11ff6c9205/MatricesM-0.9a16.post2.tar.gz", "yanked": false}], "0.9a16.post3": [{"comment_text": "", "digests": {"md5": "26a6ff283707a894fa75ad65189a9e10", "sha256": "79c1dbe1f560b3a76861f2fb5969553e4e747e17871c2daf8b710868a489d0ef"}, "downloads": -1, "filename": "MatricesM-0.9a16.post3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "26a6ff283707a894fa75ad65189a9e10", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 112078, "upload_time": "2019-05-16T19:19:31", "upload_time_iso_8601": "2019-05-16T19:19:31.804986Z", "url": "https://files.pythonhosted.org/packages/d7/09/ef3245c473120de4a63aee78ff7d47afbf76eb9ba052c7d699be20f45bf3/MatricesM-0.9a16.post3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dee9b1f9e934809067c6290b44cf00c", "sha256": "54eb0dd837a9064e04a662d7e08097bead343cef53eaa60e42bbafe5438b0f56"}, "downloads": -1, "filename": "MatricesM-0.9a16.post3.tar.gz", "has_sig": false, "md5_digest": "8dee9b1f9e934809067c6290b44cf00c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 50472, "upload_time": "2019-05-16T19:19:35", "upload_time_iso_8601": "2019-05-16T19:19:35.432160Z", "url": "https://files.pythonhosted.org/packages/fe/30/d8d44b5c1bb83137a0d89b1b73b6c434240baa45b75591c4ba118c0b9f8b/MatricesM-0.9a16.post3.tar.gz", "yanked": false}], "0.9a17": [{"comment_text": "", "digests": {"md5": "f66aa995748ba3046f0ac17586115cb3", "sha256": "5d808c2c82da5f8f9fafe7e246aec7a56b18d4a9286731f4cf5866b8d4c6ce5e"}, "downloads": -1, "filename": "MatricesM-0.9a17-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "f66aa995748ba3046f0ac17586115cb3", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 112677, "upload_time": "2019-05-17T12:14:05", "upload_time_iso_8601": "2019-05-17T12:14:05.606138Z", "url": "https://files.pythonhosted.org/packages/a0/5b/4230c8607be997b6d028dcaae62dd73b1572179220d8e8cb7dd7d75a13f8/MatricesM-0.9a17-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8930fb92a5cc530d4bef3451d8fcf883", "sha256": "ad32e30be2621033ef0d746897741a0e3b08e0ba3fd29993f4d6ca07bb720844"}, "downloads": -1, "filename": "MatricesM-0.9a17.tar.gz", "has_sig": false, "md5_digest": "8930fb92a5cc530d4bef3451d8fcf883", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 51000, "upload_time": "2019-05-17T12:14:08", "upload_time_iso_8601": "2019-05-17T12:14:08.189763Z", "url": "https://files.pythonhosted.org/packages/b8/a1/f32101b441cfe84f3aa643ebd352436479944acb9bba7628c17538262cc1/MatricesM-0.9a17.tar.gz", "yanked": false}], "0.9a17.post1": [{"comment_text": "", "digests": {"md5": "88af0920a828fe19ac18763f17d980b2", "sha256": "eb17e47b2fbcb825024f2ce3eadf40af1c5ae17d7e1c60e79e552ca1cfef1e3f"}, "downloads": -1, "filename": "MatricesM-0.9a17.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "88af0920a828fe19ac18763f17d980b2", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 112813, "upload_time": "2019-05-17T16:41:42", "upload_time_iso_8601": "2019-05-17T16:41:42.623712Z", "url": "https://files.pythonhosted.org/packages/f7/ba/06c750ad7653321912e712e886947e8b58feab98dd70d312607ad4d1e531/MatricesM-0.9a17.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1ca701e92a0faac2c4b2dc5e8999638", "sha256": "936e052f9563bfaef7118bf24a13c085d55c49f998052efd8e52a0a8b622142c"}, "downloads": -1, "filename": "MatricesM-0.9a17.post1.tar.gz", "has_sig": false, "md5_digest": "a1ca701e92a0faac2c4b2dc5e8999638", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 51031, "upload_time": "2019-05-17T16:41:45", "upload_time_iso_8601": "2019-05-17T16:41:45.426273Z", "url": "https://files.pythonhosted.org/packages/39/59/497e360a0e8e8906bf6284fc6f390a9fd79aa30d8daed20ad6ee46009b13/MatricesM-0.9a17.post1.tar.gz", "yanked": false}], "0.9a18": [{"comment_text": "", "digests": {"md5": "7800d32866e6d1fec32e1bd639fbde6f", "sha256": "8fccfcc74b1d5ad5d9b394534d26e1376dc4542d52635ebfe167250f7ecd724a"}, "downloads": -1, "filename": "MatricesM-0.9a18-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "7800d32866e6d1fec32e1bd639fbde6f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 128350, "upload_time": "2019-05-31T22:17:55", "upload_time_iso_8601": "2019-05-31T22:17:55.729606Z", "url": "https://files.pythonhosted.org/packages/8b/a1/498cc1dc08096e34307eba60a9e63e92f03f6491f6657ba55e1213b640b1/MatricesM-0.9a18-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1ff117f1943d6a7cd08a39d9d4e4494", "sha256": "eb17a3d16aacb483dbf5b9440402911ed7793a573f04195f25cc2ad3f162e255"}, "downloads": -1, "filename": "MatricesM-0.9a18.tar.gz", "has_sig": false, "md5_digest": "e1ff117f1943d6a7cd08a39d9d4e4494", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 68133, "upload_time": "2019-05-31T22:17:59", "upload_time_iso_8601": "2019-05-31T22:17:59.551927Z", "url": "https://files.pythonhosted.org/packages/42/1c/7539128128bafef1ac1867cf558d742dd3e2f4be8091ee533d07dd108ad3/MatricesM-0.9a18.tar.gz", "yanked": false}], "0.9a18.post1": [{"comment_text": "", "digests": {"md5": "d2decf11aff6c1285c70875b08cc41bc", "sha256": "c23ffa6fcc8e6de1eb335528d0b1895f75a99a91689003f314aa8458965fd5f7"}, "downloads": -1, "filename": "MatricesM-0.9a18.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "d2decf11aff6c1285c70875b08cc41bc", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 128875, "upload_time": "2019-06-01T17:14:01", "upload_time_iso_8601": "2019-06-01T17:14:01.989192Z", "url": "https://files.pythonhosted.org/packages/fe/ff/89f8a61f38ad9952aca5a50360307d9a330c6b1fc9d1f172826188494a39/MatricesM-0.9a18.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d017a04be94462756a9920b511e00d5e", "sha256": "33ba3f46cc25ac7388ee5577643fe0a4a7f1ac9e59ebc7cb939573e8e8586775"}, "downloads": -1, "filename": "MatricesM-0.9a18.post1.tar.gz", "has_sig": false, "md5_digest": "d017a04be94462756a9920b511e00d5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 68357, "upload_time": "2019-06-01T17:14:06", "upload_time_iso_8601": "2019-06-01T17:14:06.324079Z", "url": "https://files.pythonhosted.org/packages/91/e8/3d0a7c2eaa417d2710e9de395accbc3c6b67fb0304a82b1d8af09c7be542/MatricesM-0.9a18.post1.tar.gz", "yanked": false}], "0.9a18.post2": [{"comment_text": "", "digests": {"md5": "6c283afcce6b23b8ac55150792b82da8", "sha256": "2f1dd517fee487d7ed8932b5e9e60b62991eebdfe3303e4f78afffad03bcc88b"}, "downloads": -1, "filename": "MatricesM-0.9a18.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "6c283afcce6b23b8ac55150792b82da8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 130950, "upload_time": "2019-06-05T20:04:44", "upload_time_iso_8601": "2019-06-05T20:04:44.243189Z", "url": "https://files.pythonhosted.org/packages/13/0d/826b761df6b86934249beb8cba903b2a0f3dd3bfe27b2fbfad3f01e3c243/MatricesM-0.9a18.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b58c98e3ac4aa7f693e0063429a01e02", "sha256": "6a753608b995efb95319e0161cf0217421777b85db778220d66191077aea7ddc"}, "downloads": -1, "filename": "MatricesM-0.9a18.post2.tar.gz", "has_sig": false, "md5_digest": "b58c98e3ac4aa7f693e0063429a01e02", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69976, "upload_time": "2019-06-05T20:04:48", "upload_time_iso_8601": "2019-06-05T20:04:48.976236Z", "url": "https://files.pythonhosted.org/packages/8d/fe/54ed150b6d1cd42df7a7170d683db740a85f11881f901d79ca79ba086728/MatricesM-0.9a18.post2.tar.gz", "yanked": false}], "0.9a19": [{"comment_text": "", "digests": {"md5": "91affdb4d1d0ab1061a569b443efe8b1", "sha256": "ea82c79014f2ec6b6ec45d9c4d59fbc132784aaef20752a05ae204b1e4c01892"}, "downloads": -1, "filename": "MatricesM-0.9a19-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "91affdb4d1d0ab1061a569b443efe8b1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 131894, "upload_time": "2019-06-07T07:37:35", "upload_time_iso_8601": "2019-06-07T07:37:35.158685Z", "url": "https://files.pythonhosted.org/packages/24/f1/8490760645ad583e97801a568e08435cfd020500c38b39d408bd20bf3c3a/MatricesM-0.9a19-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13f658fffbf0c7e5aec6abc74a67f440", "sha256": "57b12e00010be98a969c0f9996bf6bbffb9c7b69463a6110dd58a66f99d81253"}, "downloads": -1, "filename": "MatricesM-0.9a19.tar.gz", "has_sig": false, "md5_digest": "13f658fffbf0c7e5aec6abc74a67f440", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72133, "upload_time": "2019-06-07T07:37:39", "upload_time_iso_8601": "2019-06-07T07:37:39.298211Z", "url": "https://files.pythonhosted.org/packages/e8/9e/b7ce2e35aa5ac5828b1cf957f1e29314f854bc98aca39e617f0d0cf925e4/MatricesM-0.9a19.tar.gz", "yanked": false}], "0.9a19.post1": [{"comment_text": "", "digests": {"md5": "159979ce414d9f3bd1443209af2a5042", "sha256": "4cabf762565af47f7beea7d99cc8bdf8574acd5abf902a69f7cd825b1a126058"}, "downloads": -1, "filename": "MatricesM-0.9a19.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "159979ce414d9f3bd1443209af2a5042", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 131951, "upload_time": "2019-06-07T12:24:33", "upload_time_iso_8601": "2019-06-07T12:24:33.618447Z", "url": "https://files.pythonhosted.org/packages/c0/0d/fe1377431baee98e2b15d3071252696eb66f4fe352b926f229fca88c7be1/MatricesM-0.9a19.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad5eb347991ddd28dfcde288f7e22793", "sha256": "359a8d2551fd609c3cdea5a8c94841064b2f73e32d2f1de1216c75d8410e318b"}, "downloads": -1, "filename": "MatricesM-0.9a19.post1.tar.gz", "has_sig": false, "md5_digest": "ad5eb347991ddd28dfcde288f7e22793", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72155, "upload_time": "2019-06-07T12:24:37", "upload_time_iso_8601": "2019-06-07T12:24:37.822098Z", "url": "https://files.pythonhosted.org/packages/e1/18/02a2b1ebcaecf388c69ab12b2bab2d34d0936196c89aaa905c3e0c8a14e2/MatricesM-0.9a19.post1.tar.gz", "yanked": false}], "0.9a2": [{"comment_text": "", "digests": {"md5": "8153a24162a019ac6ab1ab9f11a317e2", "sha256": "bec9f991eba44773d391773fb8a28ec4e9c97008668100100918f83b99350e93"}, "downloads": -1, "filename": "MatricesM-0.9a2-py3-none-any.whl", "has_sig": false, "md5_digest": "8153a24162a019ac6ab1ab9f11a317e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 23455, "upload_time": "2019-02-23T10:53:54", "upload_time_iso_8601": "2019-02-23T10:53:54.319595Z", "url": "https://files.pythonhosted.org/packages/85/3c/ef1fb638210ea1cd9c400814fec8dd3d2f5b7a81d6ed785e11da8a0706ed/MatricesM-0.9a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "759fdf4660542d25cf542676bea402c6", "sha256": "90c59be94b85537f99abb8b2e3cc8a320e155ff4bbca08c457809d9127b32ed7"}, "downloads": -1, "filename": "MatricesM-0.9a2.tar.gz", "has_sig": false, "md5_digest": "759fdf4660542d25cf542676bea402c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 38333, "upload_time": "2019-02-23T10:53:56", "upload_time_iso_8601": "2019-02-23T10:53:56.227172Z", "url": "https://files.pythonhosted.org/packages/2b/d0/7e5e09736b470bae4cdb3506db79f6400497ec1156cae1e7d60c21dc2bb3/MatricesM-0.9a2.tar.gz", "yanked": false}], "0.9a20.post3": [{"comment_text": "", "digests": {"md5": "dd7f8e91e5901d324eea3fc2b225320d", "sha256": "ffd2a248c1986f16bb6251c73fee046ab407731c82051f765ef81dfbaf9868ef"}, "downloads": -1, "filename": "MatricesM-0.9a20.post3-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "dd7f8e91e5901d324eea3fc2b225320d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 146693, "upload_time": "2019-06-17T13:27:38", "upload_time_iso_8601": "2019-06-17T13:27:38.136552Z", "url": "https://files.pythonhosted.org/packages/db/d7/fb16b353218604029e07657feeefa19c1f0e816dc77ce6df914cf037ea0c/MatricesM-0.9a20.post3-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8982e45e8eb090db00533c8951f15b7f", "sha256": "a1888fa010b2fba15ab4bfab428159a078bff6fb172ce564258ad8118469331b"}, "downloads": -1, "filename": "MatricesM-0.9a20.post3.tar.gz", "has_sig": false, "md5_digest": "8982e45e8eb090db00533c8951f15b7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 77485, "upload_time": "2019-06-17T13:27:42", "upload_time_iso_8601": "2019-06-17T13:27:42.522363Z", "url": "https://files.pythonhosted.org/packages/69/ec/1a687f2415b941dc76550d613853568dd6d2abc5f21e140c8fb04d78ffd6/MatricesM-0.9a20.post3.tar.gz", "yanked": false}], "0.9a21": [{"comment_text": "", "digests": {"md5": "f445908b08a16a473fcaa4da865574c0", "sha256": "e13674adaef462dd0cfd13bd9e60242a480803bb0916a915f6e9450c017c77bf"}, "downloads": -1, "filename": "MatricesM-0.9a21-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "f445908b08a16a473fcaa4da865574c0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 138818, "upload_time": "2019-06-18T15:16:48", "upload_time_iso_8601": "2019-06-18T15:16:48.164378Z", "url": "https://files.pythonhosted.org/packages/72/0d/820a20da395c55f03658182814eaae04c23e69dc06a661bacc3ed984cd2a/MatricesM-0.9a21-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de4496cd06c57c46fa54f8f72a23204f", "sha256": "b3798d019170598a167e796e297cc7da39c79578a882e145224492c8c6e5f69a"}, "downloads": -1, "filename": "MatricesM-0.9a21.tar.gz", "has_sig": false, "md5_digest": "de4496cd06c57c46fa54f8f72a23204f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 79232, "upload_time": "2019-06-18T15:16:52", "upload_time_iso_8601": "2019-06-18T15:16:52.522196Z", "url": "https://files.pythonhosted.org/packages/9f/b1/69460ea765346611a1ec14a284065d67fb9d410bb0167f1e9ec8dad1fb91/MatricesM-0.9a21.tar.gz", "yanked": false}], "0.9a21.post1": [{"comment_text": "", "digests": {"md5": "32bde6810c3cd065c3568b3721912794", "sha256": "98793b46d1f4132d3fa6ccd37e48790cb990126ceae106ba3585984482c85d8f"}, "downloads": -1, "filename": "MatricesM-0.9a21.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "32bde6810c3cd065c3568b3721912794", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 139595, "upload_time": "2019-06-19T19:18:06", "upload_time_iso_8601": "2019-06-19T19:18:06.002201Z", "url": "https://files.pythonhosted.org/packages/59/64/82fb5da2031b0fe3ac29bde306c632444a91f489039e1e3ffcf135d6d848/MatricesM-0.9a21.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67161f3ee0da5043db092f62078b3d1e", "sha256": "1d5dd106401ef81acc46279f4b3ac1899a37ef9d8df88149f979f3502637e91e"}, "downloads": -1, "filename": "MatricesM-0.9a21.post1.tar.gz", "has_sig": false, "md5_digest": "67161f3ee0da5043db092f62078b3d1e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 79958, "upload_time": "2019-06-19T19:18:10", "upload_time_iso_8601": "2019-06-19T19:18:10.793040Z", "url": "https://files.pythonhosted.org/packages/2b/d8/f339bd3a55a4bc044ed8a9deccce580606544e9bbfb0a912799a4a30bc4b/MatricesM-0.9a21.post1.tar.gz", "yanked": false}], "0.9a22": [{"comment_text": "", "digests": {"md5": "87b082c39098ebcc8ede174b8afc5308", "sha256": "e277286259f7ba39f74e33ccf77fc981541f5e4cbe535c2c088dc249a2ee640d"}, "downloads": -1, "filename": "MatricesM-0.9a22-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "87b082c39098ebcc8ede174b8afc5308", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 164161, "upload_time": "2019-07-25T15:29:35", "upload_time_iso_8601": "2019-07-25T15:29:35.665185Z", "url": "https://files.pythonhosted.org/packages/62/7a/7ed31cf2871622eb2f7524cda8951ec8cf7f1618ba1f637345d8db899e8b/MatricesM-0.9a22-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a9106281c18bbcd8cc891ffe1988d90", "sha256": "36f56f47f72cf863c2d86ec55dccd8e5eef532584ffdc58a3f24e9fa90340a26"}, "downloads": -1, "filename": "MatricesM-0.9a22.tar.gz", "has_sig": false, "md5_digest": "1a9106281c18bbcd8cc891ffe1988d90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81212, "upload_time": "2019-07-25T15:29:41", "upload_time_iso_8601": "2019-07-25T15:29:41.328467Z", "url": "https://files.pythonhosted.org/packages/12/1f/5791d535300c50359725aa33ce74314771fec56a1abfe71e89bca07b8b8c/MatricesM-0.9a22.tar.gz", "yanked": false}], "0.9a22.post1": [{"comment_text": "", "digests": {"md5": "5b576e91a5e317dd25333e3582f0a76e", "sha256": "a6c1375d52df195fde14e9ea9892bb7ca515154f6af27dc365cd03a6ffe0c6b2"}, "downloads": -1, "filename": "MatricesM-0.9a22.post1-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "5b576e91a5e317dd25333e3582f0a76e", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 164261, "upload_time": "2019-07-25T15:47:23", "upload_time_iso_8601": "2019-07-25T15:47:23.100451Z", "url": "https://files.pythonhosted.org/packages/8f/0d/9cda73a6dcdd42676e17ee75b87fd828df5000b8bde63640459d201c202c/MatricesM-0.9a22.post1-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8adb0c84683e5554ffc1c94bce4cc9cd", "sha256": "9ef080eedda9c3bf5f5fcb2900b236a52abec2e8ca4ec165590eb9beada2d991"}, "downloads": -1, "filename": "MatricesM-0.9a22.post1.tar.gz", "has_sig": false, "md5_digest": "8adb0c84683e5554ffc1c94bce4cc9cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81254, "upload_time": "2019-07-25T15:47:27", "upload_time_iso_8601": "2019-07-25T15:47:27.396270Z", "url": "https://files.pythonhosted.org/packages/45/1c/6d34be04142a9be3838cf1b4cc3b62ad44c0d7bff6499764d0f81cff9a83/MatricesM-0.9a22.post1.tar.gz", "yanked": false}], "0.9a22.post2": [{"comment_text": "", "digests": {"md5": "e767af3fad6a7989fcd4e50105a90181", "sha256": "d9501b44baf4834377ab9eb1008c9e0b11849c8c869a1bce4e7da34cf5fb9b07"}, "downloads": -1, "filename": "MatricesM-0.9a22.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "e767af3fad6a7989fcd4e50105a90181", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 164664, "upload_time": "2019-07-25T23:02:50", "upload_time_iso_8601": "2019-07-25T23:02:50.555071Z", "url": "https://files.pythonhosted.org/packages/27/be/86a67c8ad39f943ec99e99ae9c251d286f7ff696a0d1139d464285699184/MatricesM-0.9a22.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c9da21d1cc2b6d608ce21b316ae93ec", "sha256": "cfa6b894eeb421d6bff1642fa9543705afef22bfd61ccc88201a1fcf2802b67e"}, "downloads": -1, "filename": "MatricesM-0.9a22.post2.tar.gz", "has_sig": false, "md5_digest": "8c9da21d1cc2b6d608ce21b316ae93ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 81401, "upload_time": "2019-07-25T23:02:54", "upload_time_iso_8601": "2019-07-25T23:02:54.941819Z", "url": "https://files.pythonhosted.org/packages/79/d3/b43cbb7c986df46da0e6247110ba84fc35b38887f43a46f3963d405b64ae/MatricesM-0.9a22.post2.tar.gz", "yanked": false}], "0.9a23": [{"comment_text": "", "digests": {"md5": "4ae4ec987085c85a937fe14f05ad00a6", "sha256": "ab3f9ee4321af7af5d6154fba50bfc463a707697deb6a99582f0b0dc7899aa09"}, "downloads": -1, "filename": "MatricesM-0.9a23-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "4ae4ec987085c85a937fe14f05ad00a6", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 176065, "upload_time": "2019-09-01T11:44:24", "upload_time_iso_8601": "2019-09-01T11:44:24.115153Z", "url": "https://files.pythonhosted.org/packages/b3/bf/2e7d883e823d39390e44264bcbd32898c5f275d13ab5fcd510c9b7577a9c/MatricesM-0.9a23-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "371404a062a486c91e8c920c967dc9cb", "sha256": "27d58304a19d527c02b0cd1f22955265e3100ac96c1456815d0789dba879550f"}, "downloads": -1, "filename": "MatricesM-0.9a23.tar.gz", "has_sig": false, "md5_digest": "371404a062a486c91e8c920c967dc9cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 92511, "upload_time": "2019-09-01T11:44:27", "upload_time_iso_8601": "2019-09-01T11:44:27.147114Z", "url": "https://files.pythonhosted.org/packages/7a/4a/4e423562ec335e5dbd1a0830818a05cbf8534ff2027455834174eb181fc8/MatricesM-0.9a23.tar.gz", "yanked": false}], "0.9a24": [{"comment_text": "", "digests": {"md5": "8d2a63a647501fa62a9bbefefbb8d98b", "sha256": "5ab580b2f79d3212ee3d7d473369d8328f900064848fb581d6455793a67b8053"}, "downloads": -1, "filename": "MatricesM-0.9a24-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "8d2a63a647501fa62a9bbefefbb8d98b", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 188486, "upload_time": "2019-11-16T08:44:41", "upload_time_iso_8601": "2019-11-16T08:44:41.505378Z", "url": "https://files.pythonhosted.org/packages/97/20/03b5fcb2c6ae996702bb2caaaff9d3f110a95e6855cfc84810980a18eec1/MatricesM-0.9a24-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41766d5fb314ef07af827237d93263f4", "sha256": "7b89cda820f67765e4e82fe88cbd5a7e529e82a3c6e3a8a24019665200261e71"}, "downloads": -1, "filename": "MatricesM-0.9a24.tar.gz", "has_sig": false, "md5_digest": "41766d5fb314ef07af827237d93263f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 104494, "upload_time": "2019-11-16T08:44:44", "upload_time_iso_8601": "2019-11-16T08:44:44.805839Z", "url": "https://files.pythonhosted.org/packages/91/01/5bb402236e31da6d800bb872c7a068aceb59471dc690c3d3a10286014b79/MatricesM-0.9a24.tar.gz", "yanked": false}], "0.9a24.post2": [{"comment_text": "", "digests": {"md5": "b1b143aec88211497a1974a807db8b31", "sha256": "a3ec860e344376b951fab159f70b1cbb661375d3157ba492033f805f3854c849"}, "downloads": -1, "filename": "MatricesM-0.9a24.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "b1b143aec88211497a1974a807db8b31", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 193038, "upload_time": "2019-12-18T11:31:43", "upload_time_iso_8601": "2019-12-18T11:31:43.718571Z", "url": "https://files.pythonhosted.org/packages/e0/bd/32df600d46aca5c7337a2bed66a3c6a1ab0a207f59d8c6d80496ea125d0e/MatricesM-0.9a24.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65d4599e501556ae0547e7ff9335e791", "sha256": "fcbad09e3b2c15d1c499b072f543e03cae042303d1f1b74536d63f92b371cb30"}, "downloads": -1, "filename": "MatricesM-0.9a24.post2.tar.gz", "has_sig": false, "md5_digest": "65d4599e501556ae0547e7ff9335e791", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 108050, "upload_time": "2019-12-18T11:31:46", "upload_time_iso_8601": "2019-12-18T11:31:46.778495Z", "url": "https://files.pythonhosted.org/packages/ca/ea/967c1e2de9171a72a3c19e80274f381eeffe7728499b08f5142a01790ae7/MatricesM-0.9a24.post2.tar.gz", "yanked": false}], "0.9a3": [{"comment_text": "", "digests": {"md5": "cc5532120ff78d0720fa9c1582f803eb", "sha256": "ecc55d53bd624625fa83dedbbb85e11e6edaf3264ba88e41786d52da51f66ca4"}, "downloads": -1, "filename": "MatricesM-0.9a3-py3-none-any.whl", "has_sig": false, "md5_digest": "cc5532120ff78d0720fa9c1582f803eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 24510, "upload_time": "2019-03-03T12:07:26", "upload_time_iso_8601": "2019-03-03T12:07:26.636059Z", "url": "https://files.pythonhosted.org/packages/1a/ee/d99b4c6a2b859f5cf68e63dc7835346e10b0563c1d3a9bc0e8e0076259cd/MatricesM-0.9a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21af7497ef853c800051765f27d7964e", "sha256": "8be93734b214616f72f9de2e70cd9fc40ba3036f30c07ca2aad46d4f80e8a8bb"}, "downloads": -1, "filename": "MatricesM-0.9a3.tar.gz", "has_sig": false, "md5_digest": "21af7497ef853c800051765f27d7964e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 27232, "upload_time": "2019-03-03T12:07:28", "upload_time_iso_8601": "2019-03-03T12:07:28.418799Z", "url": "https://files.pythonhosted.org/packages/09/19/76bf61d1ddb9b65a1bd361c79b8c2481b8b3e26dc653705a0ecab7ef3db7/MatricesM-0.9a3.tar.gz", "yanked": false}], "0.9a3.post1": [{"comment_text": "", "digests": {"md5": "67557deecc4da39f3668031de72fbcb9", "sha256": "7e01f2acdb0c9004bcbda5d46972f5bcd2b8775f55656fae526f3685950fb543"}, "downloads": -1, "filename": "MatricesM-0.9a3.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "67557deecc4da39f3668031de72fbcb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 24591, "upload_time": "2019-03-03T12:24:05", "upload_time_iso_8601": "2019-03-03T12:24:05.143297Z", "url": "https://files.pythonhosted.org/packages/42/6d/65b566b0c2055cf97d986de7d5fdc49a197b64c4e0847b273dbe45abea0a/MatricesM-0.9a3.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdfd37484aebd3c7af7f587560044375", "sha256": "d09bfade98fcc2ca68a67a3e5b68c0d395dd62c6ab0cfd9776c8887bb24ff1ce"}, "downloads": -1, "filename": "MatricesM-0.9a3.post1.tar.gz", "has_sig": false, "md5_digest": "bdfd37484aebd3c7af7f587560044375", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 27334, "upload_time": "2019-03-03T12:24:06", "upload_time_iso_8601": "2019-03-03T12:24:06.445275Z", "url": "https://files.pythonhosted.org/packages/76/cd/df60c2ac15cf2458ffad2e521625468f002fb797703f3f8fd8ec031c2a15/MatricesM-0.9a3.post1.tar.gz", "yanked": false}], "0.9a4": [{"comment_text": "", "digests": {"md5": "a9841e7355579e43ec8041d0b04dc998", "sha256": "32f46855600b24a3c10cb8503762b809254c21f4b16e6c409fcc741b51c1588a"}, "downloads": -1, "filename": "MatricesM-0.9a4-py3-none-any.whl", "has_sig": false, "md5_digest": "a9841e7355579e43ec8041d0b04dc998", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 26345, "upload_time": "2019-03-09T19:11:22", "upload_time_iso_8601": "2019-03-09T19:11:22.143523Z", "url": "https://files.pythonhosted.org/packages/ab/97/dc91013fbc9d860c87ac2d18fb3ff24ca6c5b2c65130335e694d549367df/MatricesM-0.9a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "510511e5c5aafeac58e128f7a5130619", "sha256": "592990729160e3d82bf60384bf030661f9eb113688667e77b8e2490851a48276"}, "downloads": -1, "filename": "MatricesM-0.9a4.tar.gz", "has_sig": false, "md5_digest": "510511e5c5aafeac58e128f7a5130619", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 29366, "upload_time": "2019-03-09T19:11:23", "upload_time_iso_8601": "2019-03-09T19:11:23.834165Z", "url": "https://files.pythonhosted.org/packages/19/d8/37f3be1723be45878d50cb67a5c7c5e74b59dc736b6cb39b07d8317872c0/MatricesM-0.9a4.tar.gz", "yanked": false}], "0.9a4.post1": [{"comment_text": "", "digests": {"md5": "c7a77b4417f4a804fab3f38d8830a559", "sha256": "c9ac30eac558952965a6cfb51d92e2e7785e7a667cc4249fb7ddd9bc50ee6007"}, "downloads": -1, "filename": "MatricesM-0.9a4.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c7a77b4417f4a804fab3f38d8830a559", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 26491, "upload_time": "2019-03-10T07:40:36", "upload_time_iso_8601": "2019-03-10T07:40:36.978219Z", "url": "https://files.pythonhosted.org/packages/ce/78/a664e3018bd4a916f0f90e3f866acfe3b01496693adc61c53fbc8d62968d/MatricesM-0.9a4.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b84c5a58b24ce2933a1ca1bdeeda19f", "sha256": "a835a9a4136f8273e7a3f965e1a53a3ae1984316f8741dc7b5f8cf1f35927a64"}, "downloads": -1, "filename": "MatricesM-0.9a4.post1.tar.gz", "has_sig": false, "md5_digest": "6b84c5a58b24ce2933a1ca1bdeeda19f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 29613, "upload_time": "2019-03-10T07:40:38", "upload_time_iso_8601": "2019-03-10T07:40:38.523097Z", "url": "https://files.pythonhosted.org/packages/bd/af/5103a91173849704ddc3e21dc5e62f300b1fb223d60d6fe5f4f77abd5fe9/MatricesM-0.9a4.post1.tar.gz", "yanked": false}], "0.9a4.post2": [{"comment_text": "", "digests": {"md5": "a65af851f726bec5e0356594055e2c78", "sha256": "36ccb92411e9ee0972c35a820102ab4f11cd9751605b52932083bb8069ddbd3d"}, "downloads": -1, "filename": "MatricesM-0.9a4.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "a65af851f726bec5e0356594055e2c78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 26490, "upload_time": "2019-03-10T07:59:40", "upload_time_iso_8601": "2019-03-10T07:59:40.468584Z", "url": "https://files.pythonhosted.org/packages/27/97/11e03ae97c9bfee10a873db3d689348bb1092a4a7d7fabe4231ca37d8eec/MatricesM-0.9a4.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b887412752f2bb35c57f5e28f8b20766", "sha256": "9546c6c4586801e6378b350cf19c05dd614a5cc4e04891f8be61c4c397d70f58"}, "downloads": -1, "filename": "MatricesM-0.9a4.post2.tar.gz", "has_sig": false, "md5_digest": "b887412752f2bb35c57f5e28f8b20766", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 29608, "upload_time": "2019-03-10T07:59:42", "upload_time_iso_8601": "2019-03-10T07:59:42.177316Z", "url": "https://files.pythonhosted.org/packages/44/f0/b34f8f57b614647446e15cd8bacd47e97d3c847c828bf911896d172cfb2e/MatricesM-0.9a4.post2.tar.gz", "yanked": false}], "0.9a5": [{"comment_text": "", "digests": {"md5": "a1d2512a55d247dfd1bb73e32d40cb6a", "sha256": "a7634d1eb45f9f9508465565d5207c1c5711d05cae435ff04eacda9961eff27e"}, "downloads": -1, "filename": "MatricesM-0.9a5-py3-none-any.whl", "has_sig": false, "md5_digest": "a1d2512a55d247dfd1bb73e32d40cb6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 27196, "upload_time": "2019-03-14T20:01:53", "upload_time_iso_8601": "2019-03-14T20:01:53.847647Z", "url": "https://files.pythonhosted.org/packages/2a/9b/14df9bbbc5974928c80cee3a601e0d64e7d8fd5bf5800c04a90ca5bdec91/MatricesM-0.9a5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e7cb4041c909f8035a17c3999dbf919", "sha256": "f33d1039e7d07a3b06c9ae4ca9c163c81f30f0aee61fa997396958c35d55027e"}, "downloads": -1, "filename": "MatricesM-0.9a5.tar.gz", "has_sig": false, "md5_digest": "6e7cb4041c909f8035a17c3999dbf919", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30461, "upload_time": "2019-03-14T20:01:55", "upload_time_iso_8601": "2019-03-14T20:01:55.685341Z", "url": "https://files.pythonhosted.org/packages/ba/85/2544608f837fc3446a9ae14fbd69e118ee6b792bda5330ae1396e08cee69/MatricesM-0.9a5.tar.gz", "yanked": false}], "0.9a6.post2": [{"comment_text": "", "digests": {"md5": "ef708681dfa0aa90576bff620fcec8d7", "sha256": "60cbf27a59aefde999565edf43551833321479d9d62dd6d2313a091bb047112e"}, "downloads": -1, "filename": "MatricesM-0.9a6.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef708681dfa0aa90576bff620fcec8d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 57517, "upload_time": "2019-03-16T11:16:58", "upload_time_iso_8601": "2019-03-16T11:16:58.633703Z", "url": "https://files.pythonhosted.org/packages/e3/a4/2fe6238f33893150936880406905c2e5dbe32a4a988745c2848644aadff4/MatricesM-0.9a6.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a202d6e4fb6bf6648980057f80b4bbb0", "sha256": "9d3b26f64e6002fe6e3e7f9984e171a203085ad160aea1cc04f5ccef0be20271"}, "downloads": -1, "filename": "MatricesM-0.9a6.post2.tar.gz", "has_sig": false, "md5_digest": "a202d6e4fb6bf6648980057f80b4bbb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 60160, "upload_time": "2019-03-16T11:17:00", "upload_time_iso_8601": "2019-03-16T11:17:00.316195Z", "url": "https://files.pythonhosted.org/packages/46/5e/4ac6927115f681388fcc40d6dfe2f872434b42fba470c334de676bc597c2/MatricesM-0.9a6.post2.tar.gz", "yanked": false}], "0.9a6.post8": [{"comment_text": "", "digests": {"md5": "aaf84e7bf5b387c5a46f1009dffd2e7d", "sha256": "460f91335c398a7b3e0d1de7fe827ecc88bdc88982555a2ee22cb1710199b81f"}, "downloads": -1, "filename": "MatricesM-0.9a6.post8-py3-none-any.whl", "has_sig": false, "md5_digest": "aaf84e7bf5b387c5a46f1009dffd2e7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 27807, "upload_time": "2019-03-28T12:16:44", "upload_time_iso_8601": "2019-03-28T12:16:44.623592Z", "url": "https://files.pythonhosted.org/packages/e8/ff/48f7c77fc969b0e3baae7ad667d9678ea9d77015ab6b1786371865a9e604/MatricesM-0.9a6.post8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e82c21aae9fb3609098f2aa9f5132cf2", "sha256": "0ae43da6a52d9d80b515928f83cef6d1f5f18da76122cff0f09bf72191dec5be"}, "downloads": -1, "filename": "MatricesM-0.9a6.post8.tar.gz", "has_sig": false, "md5_digest": "e82c21aae9fb3609098f2aa9f5132cf2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 31071, "upload_time": "2019-03-28T12:16:46", "upload_time_iso_8601": "2019-03-28T12:16:46.474687Z", "url": "https://files.pythonhosted.org/packages/ad/84/0f99121659a344dfe6f75543d035388bcc4d60ce5f2f33874e8e50d100bf/MatricesM-0.9a6.post8.tar.gz", "yanked": false}], "0.9a7": [{"comment_text": "", "digests": {"md5": "93cbd602a4c6e1c06d35efbd51144c58", "sha256": "1ae61f0b2fbd619177542086855dbc7e80d120f55e66a43074eea992f58c77ce"}, "downloads": -1, "filename": "MatricesM-0.9a7-py3-none-any.whl", "has_sig": false, "md5_digest": "93cbd602a4c6e1c06d35efbd51144c58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 29125, "upload_time": "2019-03-31T16:19:36", "upload_time_iso_8601": "2019-03-31T16:19:36.943249Z", "url": "https://files.pythonhosted.org/packages/a2/1e/8315a0e1b0ac8d445e4e7b46f957d9365ac107e5d1bda824a370de7f3a60/MatricesM-0.9a7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3413626286eec6488d5de7fefef705f9", "sha256": "0b60256023a4470b7aa8fc3e0c837841fa4f52110366397afa346e8c49a50272"}, "downloads": -1, "filename": "MatricesM-0.9a7.tar.gz", "has_sig": false, "md5_digest": "3413626286eec6488d5de7fefef705f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 32444, "upload_time": "2019-03-31T16:19:38", "upload_time_iso_8601": "2019-03-31T16:19:38.572599Z", "url": "https://files.pythonhosted.org/packages/3f/38/c398c48b4fc8d58ded0aa469315a82d365cdff3c673245703e84296eb2f5/MatricesM-0.9a7.tar.gz", "yanked": false}], "0.9a8.post1": [{"comment_text": "", "digests": {"md5": "55278cf6bf99b33f0bb16713f4d2ea9e", "sha256": "b0c4f6a02534a20bbc7edbc8d99ebbf48f32a39804910c5ef2e8955a27a28aae"}, "downloads": -1, "filename": "MatricesM-0.9a8.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "55278cf6bf99b33f0bb16713f4d2ea9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 30641, "upload_time": "2019-04-05T18:41:59", "upload_time_iso_8601": "2019-04-05T18:41:59.954000Z", "url": "https://files.pythonhosted.org/packages/b7/b0/4bdb60422c2de4301bc08366b584f107e1bf9e231f3ab27dda231972ef0b/MatricesM-0.9a8.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fdb01be316d6119b8f0db536fa53d47", "sha256": "16b0a657c55c8a6da1b0a43cd6890858ffa32174758483b49ae3422770fb448c"}, "downloads": -1, "filename": "MatricesM-0.9a8.post1.tar.gz", "has_sig": false, "md5_digest": "0fdb01be316d6119b8f0db536fa53d47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 34025, "upload_time": "2019-04-05T18:42:01", "upload_time_iso_8601": "2019-04-05T18:42:01.705147Z", "url": "https://files.pythonhosted.org/packages/6a/4a/e96673a7b1e464e6960acdc6657716b909ff20004e1609e429d748cdf7c9/MatricesM-0.9a8.post1.tar.gz", "yanked": false}], "0.9a9.post2": [{"comment_text": "", "digests": {"md5": "9b1c2304ec594ac727cda744f6751e19", "sha256": "9a2c9ee1a750ff47084347fb670095556566e7fd89cc5f5db4601dc60e13d117"}, "downloads": -1, "filename": "MatricesM-0.9a9.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "9b1c2304ec594ac727cda744f6751e19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 33485, "upload_time": "2019-04-17T20:19:04", "upload_time_iso_8601": "2019-04-17T20:19:04.807013Z", "url": "https://files.pythonhosted.org/packages/dc/74/1b63632e66855a13da94fe5c7b0b07fc20ebccae30141d69918fa2d18222/MatricesM-0.9a9.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53b676bc491b70d40894795054816390", "sha256": "36d100aae8f0a39717eb4c1fa92b02873009739a47dc065451ec13618809ee77"}, "downloads": -1, "filename": "MatricesM-0.9a9.post2.tar.gz", "has_sig": false, "md5_digest": "53b676bc491b70d40894795054816390", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 36940, "upload_time": "2019-04-17T20:19:06", "upload_time_iso_8601": "2019-04-17T20:19:06.399357Z", "url": "https://files.pythonhosted.org/packages/8b/b3/58b49719b48fd5eb7fdb09b734d693b3fff35a35bbeba1bdd71eb277e0c7/MatricesM-0.9a9.post2.tar.gz", "yanked": false}], "0.9a9.post3": [{"comment_text": "", "digests": {"md5": "a0dfb00993ac0cd617126cf508151701", "sha256": "a0de1bcd36c0de9b330407e4708fa39c4fbfbf7d0640aec39768d73cea22af11"}, "downloads": -1, "filename": "MatricesM-0.9a9.post3-py3-none-any.whl", "has_sig": false, "md5_digest": "a0dfb00993ac0cd617126cf508151701", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34375, "upload_time": "2019-04-18T11:12:15", "upload_time_iso_8601": "2019-04-18T11:12:15.764689Z", "url": "https://files.pythonhosted.org/packages/d7/42/d570dd1b2ff93423e5106902e610b0fd8a1705c059b8190d983f7335ec9e/MatricesM-0.9a9.post3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e2d9782769e343992aa3fab29134565", "sha256": "dd3bed1e1c5d53dc1e82814ea3f30730cd9c0e387885df0304d2082c6c4b5e98"}, "downloads": -1, "filename": "MatricesM-0.9a9.post3.tar.gz", "has_sig": false, "md5_digest": "1e2d9782769e343992aa3fab29134565", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 37836, "upload_time": "2019-04-18T11:12:17", "upload_time_iso_8601": "2019-04-18T11:12:17.305801Z", "url": "https://files.pythonhosted.org/packages/c3/b9/19a68b8229aba0609917b642b8329d1807a992397f41bb14c94a9eabaf79/MatricesM-0.9a9.post3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1b143aec88211497a1974a807db8b31", "sha256": "a3ec860e344376b951fab159f70b1cbb661375d3157ba492033f805f3854c849"}, "downloads": -1, "filename": "MatricesM-0.9a24.post2-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "b1b143aec88211497a1974a807db8b31", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6", "size": 193038, "upload_time": "2019-12-18T11:31:43", "upload_time_iso_8601": "2019-12-18T11:31:43.718571Z", "url": "https://files.pythonhosted.org/packages/e0/bd/32df600d46aca5c7337a2bed66a3c6a1ab0a207f59d8c6d80496ea125d0e/MatricesM-0.9a24.post2-cp36-cp36m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65d4599e501556ae0547e7ff9335e791", "sha256": "fcbad09e3b2c15d1c499b072f543e03cae042303d1f1b74536d63f92b371cb30"}, "downloads": -1, "filename": "MatricesM-0.9a24.post2.tar.gz", "has_sig": false, "md5_digest": "65d4599e501556ae0547e7ff9335e791", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 108050, "upload_time": "2019-12-18T11:31:46", "upload_time_iso_8601": "2019-12-18T11:31:46.778495Z", "url": "https://files.pythonhosted.org/packages/ca/ea/967c1e2de9171a72a3c19e80274f381eeffe7728499b08f5142a01790ae7/MatricesM-0.9a24.post2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:17 2020"}