{"info": {"author": "John Didion", "author_email": "github@didion.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![PyPi](https://img.shields.io/pypi/v/ngstream.svg?branch=master)](https://pypi.python.org/pypi/ngstream)\n\n# ngstream: Streaming NGS reads from public databases\n\nngstream is a small python (3.6+) library that makes it easy to stream NGS reads from the Sequence Read Archive (SRA), GA4GH, and (eventually) other public databases, given an accession number.\n\n# Dependencies\n\n* Interacting with SRA requires [NGS](https://github.com/ncbi/ngs) and the python language bindings to be installed. Follow the instructions [here](https://github.com/ncbi/ngs/wiki/Building-and-Installing-from-Source). We recommend installing the SDK from [bioconda](https://bioconda.github.io/recipes/ncbi-ngs-sdk/README.html) or HomeBrew (`brew install sratookkit`) and then installing the python library from GitHub.\n* pysam is required for converting between BAM/CRAM (e.g. downloaded with Htsget) and SAM/FASTQ.\n\nNote that the SRA toolkit by default caches downloaded data -- if you mysteriously run out of hard disk space, this is probably why. Instructions on how to configure/disable caching are [here](https://github.com/ncbi/sra-tools/wiki/Toolkit-Configuration). If you want to change the cache location, use the following command (it won't return 0, but it still works):\n\n```bash\nvdb-config --root -s /repository/user/main/public/root=<TARGET_DIR>\n```\n\n# Installation\n\n```\npip install ngstream\n```\n\n# Building from source\n\nClone this repository and run:\n\n```\nmake\n```\n\n# Accessing Reads from SRA\n\n```python\nimport ngstream\n\n# Use the API to stream reads within your own python program.\nwith ngstream.open(\"SRR3618567\", protocol=\"sra\") as reader:\n    for record in reader:\n        # `record` is an `ngstream.api.Record` object if the data is\n        # single-end, and a `ngstream.api.Fragment` object if the data\n        # is paired-end.\n        print(record.as_fastq())\n```\n\n# Accessing Reads Using HTSGet\n\n```python\nimport ngstream\nfrom pathlib import Path\n\nurl = 'https://era.org/hts/ABC123'\nref = ngstream.GenomeReference(\"GRCh37\", Path(\"GRCh37_sizes.txt\"))\n\nwith ngstream.open(url, protocol=\"htsget\", reference=ref) as reader:\n    for pair in reader:\n        print(\"\\n\".join(str(read) for read in pair))\n```\n\n# Dump reads to a file (or pair of files)\n\n```python\nimport ngstream\n\n# Grab 1000 read pairs from an SRA run and write them to FASTQ files.\naccession = 'SRR3618567'\nwith ngstream.open(\"SRR3618567\", protocol=\"sra\", item_limit=1000) as reader:\n    files = ngstream.dump_fastq(reader)\n    print(f\"Wrote {reader.read_count} reads from {accession} to {files[0]}, {files[1]}\")\n```\n\n# Use the command-line tools\n\n```bash\n# Dump all reads from the ABC123 dataset to ABC123.bam in the current directory.\n$ htsget_dump https://era.org/hts/ABC123\n```\n\n# Documentation\n\nComing soon\n\n# Developers\n\n* We welcome contributions via pull requests.\n* Unit tests are highly desirable.\n* Style-wise, we enforce [black](https://black.readthedocs.io/en/stable/) code style. Please use `make reformat`.\n* We use Google-style docstrings, which are formatted by the [Napoleon Sphinx Plugin](https://pypi.python.org/pypi/sphinxcontrib-napoleon).\n* We run pylint as part of each build and strive to maintain a 10/10 score.\n* We enforce a [Code of Conduct](CODE_OF_CONDUCT.md).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jdidion/ngstream", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ngstream", "package_url": "https://pypi.org/project/ngstream/", "platform": "", "project_url": "https://pypi.org/project/ngstream/", "project_urls": {"Homepage": "https://github.com/jdidion/ngstream"}, "release_url": "https://pypi.org/project/ngstream/0.2.2/", "requires_dist": ["pokrok", "xphyle (>=4.0.0)", "pysam ; extra == 'pysam'", "requests ; extra == 'requests'", "subby (>=0.1.7) ; extra == 'subby'"], "requires_python": "", "summary": "Utilities for streaming NGS reads from SRA and GA4GH accessions.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/ngstream\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7d6ea4fcdc8bc25b64e6e66e8fea0fc559b73a1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e6773747265616d2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>ngstream: Streaming NGS reads from public databases</h1>\n<p>ngstream is a small python (3.6+) library that makes it easy to stream NGS reads from the Sequence Read Archive (SRA), GA4GH, and (eventually) other public databases, given an accession number.</p>\n<h1>Dependencies</h1>\n<ul>\n<li>Interacting with SRA requires <a href=\"https://github.com/ncbi/ngs\" rel=\"nofollow\">NGS</a> and the python language bindings to be installed. Follow the instructions <a href=\"https://github.com/ncbi/ngs/wiki/Building-and-Installing-from-Source\" rel=\"nofollow\">here</a>. We recommend installing the SDK from <a href=\"https://bioconda.github.io/recipes/ncbi-ngs-sdk/README.html\" rel=\"nofollow\">bioconda</a> or HomeBrew (<code>brew install sratookkit</code>) and then installing the python library from GitHub.</li>\n<li>pysam is required for converting between BAM/CRAM (e.g. downloaded with Htsget) and SAM/FASTQ.</li>\n</ul>\n<p>Note that the SRA toolkit by default caches downloaded data -- if you mysteriously run out of hard disk space, this is probably why. Instructions on how to configure/disable caching are <a href=\"https://github.com/ncbi/sra-tools/wiki/Toolkit-Configuration\" rel=\"nofollow\">here</a>. If you want to change the cache location, use the following command (it won't return 0, but it still works):</p>\n<pre>vdb-config --root -s /repository/user/main/public/root<span class=\"o\">=</span>&lt;TARGET_DIR&gt;\n</pre>\n<h1>Installation</h1>\n<pre><code>pip install ngstream\n</code></pre>\n<h1>Building from source</h1>\n<p>Clone this repository and run:</p>\n<pre><code>make\n</code></pre>\n<h1>Accessing Reads from SRA</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ngstream</span>\n\n<span class=\"c1\"># Use the API to stream reads within your own python program.</span>\n<span class=\"k\">with</span> <span class=\"n\">ngstream</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"SRR3618567\"</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s2\">\"sra\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"c1\"># `record` is an `ngstream.api.Record` object if the data is</span>\n        <span class=\"c1\"># single-end, and a `ngstream.api.Fragment` object if the data</span>\n        <span class=\"c1\"># is paired-end.</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">as_fastq</span><span class=\"p\">())</span>\n</pre>\n<h1>Accessing Reads Using HTSGet</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ngstream</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://era.org/hts/ABC123'</span>\n<span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">ngstream</span><span class=\"o\">.</span><span class=\"n\">GenomeReference</span><span class=\"p\">(</span><span class=\"s2\">\"GRCh37\"</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"GRCh37_sizes.txt\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ngstream</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s2\">\"htsget\"</span><span class=\"p\">,</span> <span class=\"n\">reference</span><span class=\"o\">=</span><span class=\"n\">ref</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">read</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">read</span> <span class=\"ow\">in</span> <span class=\"n\">pair</span><span class=\"p\">))</span>\n</pre>\n<h1>Dump reads to a file (or pair of files)</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ngstream</span>\n\n<span class=\"c1\"># Grab 1000 read pairs from an SRA run and write them to FASTQ files.</span>\n<span class=\"n\">accession</span> <span class=\"o\">=</span> <span class=\"s1\">'SRR3618567'</span>\n<span class=\"k\">with</span> <span class=\"n\">ngstream</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"SRR3618567\"</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"o\">=</span><span class=\"s2\">\"sra\"</span><span class=\"p\">,</span> <span class=\"n\">item_limit</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">ngstream</span><span class=\"o\">.</span><span class=\"n\">dump_fastq</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Wrote </span><span class=\"si\">{</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read_count</span><span class=\"si\">}</span><span class=\"s2\"> reads from </span><span class=\"si\">{</span><span class=\"n\">accession</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">files</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"n\">files</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h1>Use the command-line tools</h1>\n<pre><span class=\"c1\"># Dump all reads from the ABC123 dataset to ABC123.bam in the current directory.</span>\n$ htsget_dump https://era.org/hts/ABC123\n</pre>\n<h1>Documentation</h1>\n<p>Coming soon</p>\n<h1>Developers</h1>\n<ul>\n<li>We welcome contributions via pull requests.</li>\n<li>Unit tests are highly desirable.</li>\n<li>Style-wise, we enforce <a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\">black</a> code style. Please use <code>make reformat</code>.</li>\n<li>We use Google-style docstrings, which are formatted by the <a href=\"https://pypi.python.org/pypi/sphinxcontrib-napoleon\" rel=\"nofollow\">Napoleon Sphinx Plugin</a>.</li>\n<li>We run pylint as part of each build and strive to maintain a 10/10 score.</li>\n<li>We enforce a <a href=\"CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>.</li>\n</ul>\n\n          </div>"}, "last_serial": 6357346, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "f349a87e27ebec54e43d338797476394", "sha256": "5b7a33bca3d419c09429f340f887ed939086a9cae4fe4eabee015165b55c4565"}, "downloads": -1, "filename": "ngstream-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f349a87e27ebec54e43d338797476394", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33482, "upload_time": "2019-12-18T20:23:38", "upload_time_iso_8601": "2019-12-18T20:23:38.263608Z", "url": "https://files.pythonhosted.org/packages/70/9a/b1fc5b5da100cd4fcb1497a7e524e2ee46635a01edbf9072cafaa05242e6/ngstream-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "154b2eeea247ec5f67894d9aadaf1d14", "sha256": "1868375a29a2831001dd22b95c22f2f8b75c397d2cbf35bda664b651fb0605e7"}, "downloads": -1, "filename": "ngstream-0.2.0.tar.gz", "has_sig": false, "md5_digest": "154b2eeea247ec5f67894d9aadaf1d14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39468, "upload_time": "2019-12-18T20:23:40", "upload_time_iso_8601": "2019-12-18T20:23:40.892738Z", "url": "https://files.pythonhosted.org/packages/3f/e4/4bf1dbe82cf25041d46f4fd716134cb3d8b30c07e608ed4b55bb8c021d0a/ngstream-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b2175057f6321841e79412b06c826aa4", "sha256": "c87f77a5d8b6d461955ca1cd9fd7c8b0a3e441bf32e3fc48a1801d985e8c7381"}, "downloads": -1, "filename": "ngstream-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b2175057f6321841e79412b06c826aa4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33271, "upload_time": "2019-12-18T20:35:51", "upload_time_iso_8601": "2019-12-18T20:35:51.851177Z", "url": "https://files.pythonhosted.org/packages/f6/62/b2dcd737817c34148bef90da57c35a67a432548870c4db323c82c7aae570/ngstream-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2d1aae0f62f1827a19f21702dcd44ea", "sha256": "dc4b8999d78721f8799798362fa3448e95f1007d81f3873b6e4b1235ca946435"}, "downloads": -1, "filename": "ngstream-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b2d1aae0f62f1827a19f21702dcd44ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38880, "upload_time": "2019-12-18T20:35:53", "upload_time_iso_8601": "2019-12-18T20:35:53.233425Z", "url": "https://files.pythonhosted.org/packages/ed/95/96f330a39e9fd356c057e4b6d01c68d93f838d19b0380e70032eacb1e5a1/ngstream-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "29ec5e9aa46008d99fa06109b838cbba", "sha256": "9cb20e195ca96e8c2ff62c0a05b0aabc64d666b91e5d4477bf6e8f97778af5a2"}, "downloads": -1, "filename": "ngstream-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "29ec5e9aa46008d99fa06109b838cbba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33267, "upload_time": "2019-12-25T04:16:18", "upload_time_iso_8601": "2019-12-25T04:16:18.763038Z", "url": "https://files.pythonhosted.org/packages/80/5c/998ba26ae2d21b50b3e69552ebe0862fff865bbbb9ac3a217bc98b0a74d9/ngstream-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af69953b4fd7d7801309211ced22e10d", "sha256": "f7737bcf4fff2fbca0068b3097d39837654cd53b6e320385583b997f7a633322"}, "downloads": -1, "filename": "ngstream-0.2.2.tar.gz", "has_sig": false, "md5_digest": "af69953b4fd7d7801309211ced22e10d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38908, "upload_time": "2019-12-25T04:16:20", "upload_time_iso_8601": "2019-12-25T04:16:20.400217Z", "url": "https://files.pythonhosted.org/packages/d8/d3/fafa8217ec6c5d648a386ab06d0a629ee90c1d7a139fc33db2d9aa8ee3c5/ngstream-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "29ec5e9aa46008d99fa06109b838cbba", "sha256": "9cb20e195ca96e8c2ff62c0a05b0aabc64d666b91e5d4477bf6e8f97778af5a2"}, "downloads": -1, "filename": "ngstream-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "29ec5e9aa46008d99fa06109b838cbba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33267, "upload_time": "2019-12-25T04:16:18", "upload_time_iso_8601": "2019-12-25T04:16:18.763038Z", "url": "https://files.pythonhosted.org/packages/80/5c/998ba26ae2d21b50b3e69552ebe0862fff865bbbb9ac3a217bc98b0a74d9/ngstream-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af69953b4fd7d7801309211ced22e10d", "sha256": "f7737bcf4fff2fbca0068b3097d39837654cd53b6e320385583b997f7a633322"}, "downloads": -1, "filename": "ngstream-0.2.2.tar.gz", "has_sig": false, "md5_digest": "af69953b4fd7d7801309211ced22e10d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38908, "upload_time": "2019-12-25T04:16:20", "upload_time_iso_8601": "2019-12-25T04:16:20.400217Z", "url": "https://files.pythonhosted.org/packages/d8/d3/fafa8217ec6c5d648a386ab06d0a629ee90c1d7a139fc33db2d9aa8ee3c5/ngstream-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:28 2020"}