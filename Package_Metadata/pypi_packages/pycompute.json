{"info": {"author": "Narasimha Prasanna HN", "author_email": "narasimhaprasannahn@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# bzCompute\n\nbzCompute is a computation graph library with built-in support for domain-decomposition and prallel computation. The library can be used for expressing and executing large number of mathematical and text-processing operations using Data-Flow graphs, (Educational version of tensorflow), written in pure python code with numpy support.\n\n### Examples :\nThe educational project supports limited number of text-processing and mathematical operations that are normally used frequently.\n**Look at examples folder for various examples**\n\n### Parallel Computation : \nThe librabry supports both sequential and parallel computation on graphs. Domain Decomposition is the computation technique used to provide task-level parallelism by creating replicas of computation graphs . The library creates a Master-worker setup, where the MasterSession creates specified number of worker sessions, each worker-session is a thread. These threads can be pre-forked to memory or can be created on demand. Each worker is automatically assigned a name. The results are collected. Domain decomposition is manily used for running multiple replicas of data-flow graphs on different inputs, check out *examples*.\n\n### Supported Sessions : \nThe library supports three types of sessions as of now : \n\n  * **SequentialSession** : SequentialSession executes computation graph in a sequential order, leaving parallelism to OS and Hardware.\n  *  **MasterSession** : Creates a master session for parallel computation, can be used for domain-decomposition, by specifying number of worker threads.\n  *  **StringSession** : It is a variant of SequentialSession for executing a computation graph composed of strign operations. \n\n### Supported Operations : \nbzCompute supports many operations as of now, the library also provides support for defining custom operations as per the requirements.\n\n##### Numerical Operations :\nLook at *pyCompute/KernelOperations.py* to obtain list of all supported operations\n\n#### Text-Processing Operations : \nLook at *pyCompute/text_processing/StringOperations.py* for all supported string operations.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Narasimha1997/bzCompute", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycompute", "package_url": "https://pypi.org/project/pycompute/", "platform": "", "project_url": "https://pypi.org/project/pycompute/", "project_urls": {"Homepage": "https://github.com/Narasimha1997/bzCompute"}, "release_url": "https://pypi.org/project/pycompute/1.0/", "requires_dist": null, "requires_python": "", "summary": "A computation graph library with support for parallelism , numerical and string computations.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bzCompute</h1>\n<p>bzCompute is a computation graph library with built-in support for domain-decomposition and prallel computation. The library can be used for expressing and executing large number of mathematical and text-processing operations using Data-Flow graphs, (Educational version of tensorflow), written in pure python code with numpy support.</p>\n<h3>Examples :</h3>\n<p>The educational project supports limited number of text-processing and mathematical operations that are normally used frequently.\n<strong>Look at examples folder for various examples</strong></p>\n<h3>Parallel Computation :</h3>\n<p>The librabry supports both sequential and parallel computation on graphs. Domain Decomposition is the computation technique used to provide task-level parallelism by creating replicas of computation graphs . The library creates a Master-worker setup, where the MasterSession creates specified number of worker sessions, each worker-session is a thread. These threads can be pre-forked to memory or can be created on demand. Each worker is automatically assigned a name. The results are collected. Domain decomposition is manily used for running multiple replicas of data-flow graphs on different inputs, check out <em>examples</em>.</p>\n<h3>Supported Sessions :</h3>\n<p>The library supports three types of sessions as of now :</p>\n<ul>\n<li><strong>SequentialSession</strong> : SequentialSession executes computation graph in a sequential order, leaving parallelism to OS and Hardware.</li>\n<li><strong>MasterSession</strong> : Creates a master session for parallel computation, can be used for domain-decomposition, by specifying number of worker threads.</li>\n<li><strong>StringSession</strong> : It is a variant of SequentialSession for executing a computation graph composed of strign operations.</li>\n</ul>\n<h3>Supported Operations :</h3>\n<p>bzCompute supports many operations as of now, the library also provides support for defining custom operations as per the requirements.</p>\n<h5>Numerical Operations :</h5>\n<p>Look at <em>pyCompute/KernelOperations.py</em> to obtain list of all supported operations</p>\n<h4>Text-Processing Operations :</h4>\n<p>Look at <em>pyCompute/text_processing/StringOperations.py</em> for all supported string operations.</p>\n\n          </div>"}, "last_serial": 4939847, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "9e4fca65f5004b40d1f2e2ab349ae76b", "sha256": "68c4667c580a3d93d15c6b9ca34a476bf96364f763f47f7e47d5ac7a250dc281"}, "downloads": -1, "filename": "pycompute-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e4fca65f5004b40d1f2e2ab349ae76b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12084, "upload_time": "2019-03-14T13:58:19", "upload_time_iso_8601": "2019-03-14T13:58:19.882717Z", "url": "https://files.pythonhosted.org/packages/91/05/8e927423ec7bd9419e87f72fdf1fb12accd37d6e1035caefb4727962a489/pycompute-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "783a63cbbbd720a198290399764039ec", "sha256": "67e31b3ede34f467e33b4dbf22be80432f723a466583bff663f2f9e8f7dfd9ee"}, "downloads": -1, "filename": "pycompute-1.0.tar.gz", "has_sig": false, "md5_digest": "783a63cbbbd720a198290399764039ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8590, "upload_time": "2019-03-14T13:58:22", "upload_time_iso_8601": "2019-03-14T13:58:22.084448Z", "url": "https://files.pythonhosted.org/packages/6d/76/06ccaa52ae649f04c2bcde10163139a95ca01bb13fa8710700e8f521606d/pycompute-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e4fca65f5004b40d1f2e2ab349ae76b", "sha256": "68c4667c580a3d93d15c6b9ca34a476bf96364f763f47f7e47d5ac7a250dc281"}, "downloads": -1, "filename": "pycompute-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9e4fca65f5004b40d1f2e2ab349ae76b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12084, "upload_time": "2019-03-14T13:58:19", "upload_time_iso_8601": "2019-03-14T13:58:19.882717Z", "url": "https://files.pythonhosted.org/packages/91/05/8e927423ec7bd9419e87f72fdf1fb12accd37d6e1035caefb4727962a489/pycompute-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "783a63cbbbd720a198290399764039ec", "sha256": "67e31b3ede34f467e33b4dbf22be80432f723a466583bff663f2f9e8f7dfd9ee"}, "downloads": -1, "filename": "pycompute-1.0.tar.gz", "has_sig": false, "md5_digest": "783a63cbbbd720a198290399764039ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8590, "upload_time": "2019-03-14T13:58:22", "upload_time_iso_8601": "2019-03-14T13:58:22.084448Z", "url": "https://files.pythonhosted.org/packages/6d/76/06ccaa52ae649f04c2bcde10163139a95ca01bb13fa8710700e8f521606d/pycompute-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:11 2020"}