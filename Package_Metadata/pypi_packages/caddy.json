{"info": {"author": "Radek Je\u017eek, Dominika Kr\u00e1likov\u00e1, R\u00f3bert Selvek, Jakub Topi\u010d", "author_email": "topicjak@fit.cvut.cz", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "Caddy\n--------------------\n> Semester project for OOP course\n\n\nThe goal of this project is to create a simple version of a CAD application inspired by the early versions of Autocad.\n\n## Installation\n\nTo install Caddy, simply use pip:\n\n```\n$ pip install caddy\n```\n\nand run with following command:\n```\n$ caddy\n```\n\n### Requirements\n\nThe following software and libraries are required to run Caddy:\n\n- Tkinter\n\n## Project assignment\n\nThe application allows one to draw the following shapes:\n\n- polylines (a line containing multiple segments)\n- rectangles\n- circles\n- _optional_ any other objects you might want to add\n\nNext to drawing shapes, the application provide additional actions:\n\n- save shapes into a file\n- load shapes from a file\n- remove a shape\n- move a shape \n- remove all shapes upon getting a confirmation from a user\n- list drawn shapes \n- quit the application asking to save any changes\n- _optional_ undo the last action\n- _optional_ redo the last action\n- _optional_ export as SVG file\n- _optional_ zoom in / out the canvas\n- _optional_ pan the canvas\n\nThe drawing can be done by either typing commands into the command panel or by using mouse.\n\n### Command-line interface\n\nAt the bottom of the application, there is a command panel.\nIt contains a command input area where a user can type commands corresponding to the above actions.\nAbove the input, it shows a history of executed commands with any additional command output or error messages in case there was a problem. \n\n### Mouse interface\n\nAll the actions are also to be invoked using mouse by selecting an appropriate menu item or a toolbar icon.\nSome actions need additional parameters:\n\n- points are selected by clicking in the canvas (_optional_ changing the mouse cursor to `crosshair`).\n- shapes are selected by clicking in the canvas (_optional_ changing the mouse cursor to `select`).\n- filenames are represented by appropriate file selection dialogs\n\n### Actions\n\nThe following is the grammar of the command language in BNF format with regex definition for `STRING`, `NAT` and `INT`:\n\n```\nSTRING ::= \"\\w+\"\nNAT ::= \\d+\nINT ::= [+-]\\d+ \nPOINT ::= <ABSOLUTE_POINT> | <RELATIVE_POINT>\nPOINTS ::= <POINT> | <POINTS> \nABSOLUTE_POINT ::= <NAT>,<NAT>\nRELATIVE_POINT ::= <INT>,<INT>\n\nACTION ::= <LINE> \n  | <RECT> \n  | <CIRCLE> \n  | <SAVE> \n  | <LOAD> \n  | <REMOVE> \n  | <MOVE> \n  | <CLEAR> \n  | <LS> \n  | <QUIT>\n\nLINE ::= line <POINT> <POINTS>\n\nRECT ::= rect <POINT> <POINT>\n  | rect <POINT> <NAT> <NAT>\n\nCIRCLE ::= circle <POINT> <NAT>\n  | circle <POINT> <POINT> \n\nSAVE ::= save <STRING>\n\nLOAD ::= load <STRING>\n\nREMOVE ::= remove <POINT>\n\nMOVE ::= move <POINT> <POINT>\n\nCLEAR ::= clear\n\nLS ::= ls\n  | ls <POINT>\n\nQUIT ::= quit\n```\n\n#### Datatypes\n\nThe language contains 5 data types: a stringm a natural number, an integer, a point and a relative point.\nThe difference between a point (eg. `10,20`) and a relative point (e.g. `+10,-20`) is that relative point is always calculated from the coordinates of its predecessor or from `0,0` if it does not have any preceding point.\n\n#### Line\n\nDraw a line connecting all given points.\n\n#### Rectangle\n\nDraw a rectangle.\nIt accepts two forms:\n\n- `rect <POINT> <POINT>` where the first point is top-left corner and the second is bottom-right corner.\n- `rect <POINT> <NAT> <NAT>` where point is the top-left corner and the two natural numbers indicate width and height.\n\n#### Circle\n\nDraw a circle.\nIt accepts two forms:\n\n- `circle <POINT> <NAT>` where point is the center and the natural number indicates radius.\n- `circle <POINT> <POINT>` where the first point is left-most point of the circle and the second is the right-most point.\n\n#### Save, Load\n\nSave or load shapes to or from a given filename.\nThe representation is simply a sequence of commands the shapes.\n\n#### Remove\n\nRemove all the shapes that intersects with the given point.\n\n#### Move\n\nMove all the shapes that intersects with the given point to a new point.\n\n#### Clear\n\nAsk for a conformation and if accepted, removes all the shapes.\n\n#### List\n\nList all the shapes or the shapes intersecting the given point in the form of an action that could be used to draw them.  \n\n#### Quit\n\nAsk for a confirmation and if accepted, quits the application.\n\n### Implementation Details\n\n- Most GUI frameworks define `0,0` origin in the top left corner and the `width,height` in the bottom right corner.\n- In technical drawing, however, it it usually the bottom left corner that defines origin `0,0` going to top right corner for `width,height`.\n- This application will honor the technical drawing. The conversion is done using affine transformation.\n- For simplicity make the window non-resizeable and only use the available canvas size. For the ones who want to challenge themselves, feel free to implement panning (scrolling the canvas) and different zoom levels.\n- You need Java 11. If you see any problems with running maven, make use maven uses the right Java.\n\n### Implementation Rules\n\n- The requirements marked as _optional_ will earn you extra points. They are also fun to implement.\n- Feel free to use the provided skeleton and change whatever needs to be changed.\n- You will be judged by the quality of the final application and proper use of object-oriented design.\n- Do not copy from other teams, plagiarism is illegal and all concerning teams will be punished.\n- Do not use any additional library except for testing. The point is that you, yourself try to implement some of the basic concepts.  \n- We provide a few basic icons, feel free to replace them with a better alternatives.\n- **If something is not clear, just raise an [issue](https://gitlab.fit.cvut.cz/BI-OOP/cad-java-skeleton/issues/new) in the repo so everyone can see it.**\n- If you get stack, contact one of the [teaching assistant](https://moodle.fit.cvut.cz/enrol/index.php?id=38).\n- Good luck!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.fit.cvut.cz/jezekra1/oop-semester-project", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "caddy", "package_url": "https://pypi.org/project/caddy/", "platform": "", "project_url": "https://pypi.org/project/caddy/", "project_urls": {"Homepage": "https://gitlab.fit.cvut.cz/jezekra1/oop-semester-project"}, "release_url": "https://pypi.org/project/caddy/1.3.2/", "requires_dist": null, "requires_python": "", "summary": "Semester project for OOP course", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Caddy</h2>\n<blockquote>\n<p>Semester project for OOP course</p>\n</blockquote>\n<p>The goal of this project is to create a simple version of a CAD application inspired by the early versions of Autocad.</p>\n<h2>Installation</h2>\n<p>To install Caddy, simply use pip:</p>\n<pre><code>$ pip install caddy\n</code></pre>\n<p>and run with following command:</p>\n<pre><code>$ caddy\n</code></pre>\n<h3>Requirements</h3>\n<p>The following software and libraries are required to run Caddy:</p>\n<ul>\n<li>Tkinter</li>\n</ul>\n<h2>Project assignment</h2>\n<p>The application allows one to draw the following shapes:</p>\n<ul>\n<li>polylines (a line containing multiple segments)</li>\n<li>rectangles</li>\n<li>circles</li>\n<li><em>optional</em> any other objects you might want to add</li>\n</ul>\n<p>Next to drawing shapes, the application provide additional actions:</p>\n<ul>\n<li>save shapes into a file</li>\n<li>load shapes from a file</li>\n<li>remove a shape</li>\n<li>move a shape</li>\n<li>remove all shapes upon getting a confirmation from a user</li>\n<li>list drawn shapes</li>\n<li>quit the application asking to save any changes</li>\n<li><em>optional</em> undo the last action</li>\n<li><em>optional</em> redo the last action</li>\n<li><em>optional</em> export as SVG file</li>\n<li><em>optional</em> zoom in / out the canvas</li>\n<li><em>optional</em> pan the canvas</li>\n</ul>\n<p>The drawing can be done by either typing commands into the command panel or by using mouse.</p>\n<h3>Command-line interface</h3>\n<p>At the bottom of the application, there is a command panel.\nIt contains a command input area where a user can type commands corresponding to the above actions.\nAbove the input, it shows a history of executed commands with any additional command output or error messages in case there was a problem.</p>\n<h3>Mouse interface</h3>\n<p>All the actions are also to be invoked using mouse by selecting an appropriate menu item or a toolbar icon.\nSome actions need additional parameters:</p>\n<ul>\n<li>points are selected by clicking in the canvas (<em>optional</em> changing the mouse cursor to <code>crosshair</code>).</li>\n<li>shapes are selected by clicking in the canvas (<em>optional</em> changing the mouse cursor to <code>select</code>).</li>\n<li>filenames are represented by appropriate file selection dialogs</li>\n</ul>\n<h3>Actions</h3>\n<p>The following is the grammar of the command language in BNF format with regex definition for <code>STRING</code>, <code>NAT</code> and <code>INT</code>:</p>\n<pre><code>STRING ::= \"\\w+\"\nNAT ::= \\d+\nINT ::= [+-]\\d+ \nPOINT ::= &lt;ABSOLUTE_POINT&gt; | &lt;RELATIVE_POINT&gt;\nPOINTS ::= &lt;POINT&gt; | &lt;POINTS&gt; \nABSOLUTE_POINT ::= &lt;NAT&gt;,&lt;NAT&gt;\nRELATIVE_POINT ::= &lt;INT&gt;,&lt;INT&gt;\n\nACTION ::= &lt;LINE&gt; \n  | &lt;RECT&gt; \n  | &lt;CIRCLE&gt; \n  | &lt;SAVE&gt; \n  | &lt;LOAD&gt; \n  | &lt;REMOVE&gt; \n  | &lt;MOVE&gt; \n  | &lt;CLEAR&gt; \n  | &lt;LS&gt; \n  | &lt;QUIT&gt;\n\nLINE ::= line &lt;POINT&gt; &lt;POINTS&gt;\n\nRECT ::= rect &lt;POINT&gt; &lt;POINT&gt;\n  | rect &lt;POINT&gt; &lt;NAT&gt; &lt;NAT&gt;\n\nCIRCLE ::= circle &lt;POINT&gt; &lt;NAT&gt;\n  | circle &lt;POINT&gt; &lt;POINT&gt; \n\nSAVE ::= save &lt;STRING&gt;\n\nLOAD ::= load &lt;STRING&gt;\n\nREMOVE ::= remove &lt;POINT&gt;\n\nMOVE ::= move &lt;POINT&gt; &lt;POINT&gt;\n\nCLEAR ::= clear\n\nLS ::= ls\n  | ls &lt;POINT&gt;\n\nQUIT ::= quit\n</code></pre>\n<h4>Datatypes</h4>\n<p>The language contains 5 data types: a stringm a natural number, an integer, a point and a relative point.\nThe difference between a point (eg. <code>10,20</code>) and a relative point (e.g. <code>+10,-20</code>) is that relative point is always calculated from the coordinates of its predecessor or from <code>0,0</code> if it does not have any preceding point.</p>\n<h4>Line</h4>\n<p>Draw a line connecting all given points.</p>\n<h4>Rectangle</h4>\n<p>Draw a rectangle.\nIt accepts two forms:</p>\n<ul>\n<li><code>rect &lt;POINT&gt; &lt;POINT&gt;</code> where the first point is top-left corner and the second is bottom-right corner.</li>\n<li><code>rect &lt;POINT&gt; &lt;NAT&gt; &lt;NAT&gt;</code> where point is the top-left corner and the two natural numbers indicate width and height.</li>\n</ul>\n<h4>Circle</h4>\n<p>Draw a circle.\nIt accepts two forms:</p>\n<ul>\n<li><code>circle &lt;POINT&gt; &lt;NAT&gt;</code> where point is the center and the natural number indicates radius.</li>\n<li><code>circle &lt;POINT&gt; &lt;POINT&gt;</code> where the first point is left-most point of the circle and the second is the right-most point.</li>\n</ul>\n<h4>Save, Load</h4>\n<p>Save or load shapes to or from a given filename.\nThe representation is simply a sequence of commands the shapes.</p>\n<h4>Remove</h4>\n<p>Remove all the shapes that intersects with the given point.</p>\n<h4>Move</h4>\n<p>Move all the shapes that intersects with the given point to a new point.</p>\n<h4>Clear</h4>\n<p>Ask for a conformation and if accepted, removes all the shapes.</p>\n<h4>List</h4>\n<p>List all the shapes or the shapes intersecting the given point in the form of an action that could be used to draw them.</p>\n<h4>Quit</h4>\n<p>Ask for a confirmation and if accepted, quits the application.</p>\n<h3>Implementation Details</h3>\n<ul>\n<li>Most GUI frameworks define <code>0,0</code> origin in the top left corner and the <code>width,height</code> in the bottom right corner.</li>\n<li>In technical drawing, however, it it usually the bottom left corner that defines origin <code>0,0</code> going to top right corner for <code>width,height</code>.</li>\n<li>This application will honor the technical drawing. The conversion is done using affine transformation.</li>\n<li>For simplicity make the window non-resizeable and only use the available canvas size. For the ones who want to challenge themselves, feel free to implement panning (scrolling the canvas) and different zoom levels.</li>\n<li>You need Java 11. If you see any problems with running maven, make use maven uses the right Java.</li>\n</ul>\n<h3>Implementation Rules</h3>\n<ul>\n<li>The requirements marked as <em>optional</em> will earn you extra points. They are also fun to implement.</li>\n<li>Feel free to use the provided skeleton and change whatever needs to be changed.</li>\n<li>You will be judged by the quality of the final application and proper use of object-oriented design.</li>\n<li>Do not copy from other teams, plagiarism is illegal and all concerning teams will be punished.</li>\n<li>Do not use any additional library except for testing. The point is that you, yourself try to implement some of the basic concepts.</li>\n<li>We provide a few basic icons, feel free to replace them with a better alternatives.</li>\n<li><strong>If something is not clear, just raise an <a href=\"https://gitlab.fit.cvut.cz/BI-OOP/cad-java-skeleton/issues/new\" rel=\"nofollow\">issue</a> in the repo so everyone can see it.</strong></li>\n<li>If you get stack, contact one of the <a href=\"https://moodle.fit.cvut.cz/enrol/index.php?id=38\" rel=\"nofollow\">teaching assistant</a>.</li>\n<li>Good luck!</li>\n</ul>\n\n          </div>"}, "last_serial": 4670568, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e91c0a548a60152bd2ab0e851e45c1cc", "sha256": "cea5c80550688bc2f446a74ad41328de048e29795ae2f253aa33eaa33764e705"}, "downloads": -1, "filename": "caddy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e91c0a548a60152bd2ab0e851e45c1cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23002, "upload_time": "2018-12-18T13:08:10", "upload_time_iso_8601": "2018-12-18T13:08:10.981517Z", "url": "https://files.pythonhosted.org/packages/b5/77/067a3ff561f62cf9ee683e4b13e0036d8250aba05a630cd4e9ef02339877/caddy-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "da3694d0119a22b9a0ace64691c3100f", "sha256": "7176689ca3ad8d2eadc74fcf550600f0c7166affd514cc3f97baff3f0708c64d"}, "downloads": -1, "filename": "caddy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "da3694d0119a22b9a0ace64691c3100f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27509, "upload_time": "2018-12-25T16:15:59", "upload_time_iso_8601": "2018-12-25T16:15:59.118070Z", "url": "https://files.pythonhosted.org/packages/7a/50/e24295ed9e1aa79a3571902feab97ff162939c4083aa196538794986f64c/caddy-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2dc06fd7b043d1f7475a11f5b7cd9e36", "sha256": "d14ff6399df2b227c92702d976e7f65b2182ac2fe494504e811839de95c320c0"}, "downloads": -1, "filename": "caddy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2dc06fd7b043d1f7475a11f5b7cd9e36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37687, "upload_time": "2019-01-02T14:46:48", "upload_time_iso_8601": "2019-01-02T14:46:48.017882Z", "url": "https://files.pythonhosted.org/packages/0b/26/731729f69327a9679aa54fc3aaeb7afb6bf3ad1cd0a0c67a7e13162454b2/caddy-1.1.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "68b02833b028f257a08ccf9043a1f4d0", "sha256": "66b6d0419a70a94379fdf7f12e000e819ff8411006df02d8ac64f3a05423b825"}, "downloads": -1, "filename": "caddy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "68b02833b028f257a08ccf9043a1f4d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37691, "upload_time": "2019-01-03T20:03:49", "upload_time_iso_8601": "2019-01-03T20:03:49.778843Z", "url": "https://files.pythonhosted.org/packages/da/84/9c85581c650e9ad892de6b89c9b726208072edb9f60a686a57aca449ae64/caddy-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "1e64f1d38a7f22c9841644984f443f2a", "sha256": "f2dd392f97a20d6f73c55bbbfc7d5637da3ed99d3f3ccb4985ed0bbcfb3f1477"}, "downloads": -1, "filename": "caddy-1.3.1.tar.gz", "has_sig": false, "md5_digest": "1e64f1d38a7f22c9841644984f443f2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37684, "upload_time": "2019-01-03T20:23:38", "upload_time_iso_8601": "2019-01-03T20:23:38.206547Z", "url": "https://files.pythonhosted.org/packages/8c/70/c3dfe1ef759f369b6722354eddf422454ff13fd0d13328d98becbc41c602/caddy-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "6d8daf230fabf24dc4fdbc5e8f476c8b", "sha256": "7a479d54b101fed2af6ac9fafe83d3e9578f4b08cdd649c911fe6087f230c715"}, "downloads": -1, "filename": "caddy-1.3.2.tar.gz", "has_sig": false, "md5_digest": "6d8daf230fabf24dc4fdbc5e8f476c8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37604, "upload_time": "2019-01-07T22:56:42", "upload_time_iso_8601": "2019-01-07T22:56:42.203505Z", "url": "https://files.pythonhosted.org/packages/2e/5f/702c9f94ed1a5599d9d545ed5fe59d4bab999a7fd33137b1211640708431/caddy-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d8daf230fabf24dc4fdbc5e8f476c8b", "sha256": "7a479d54b101fed2af6ac9fafe83d3e9578f4b08cdd649c911fe6087f230c715"}, "downloads": -1, "filename": "caddy-1.3.2.tar.gz", "has_sig": false, "md5_digest": "6d8daf230fabf24dc4fdbc5e8f476c8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37604, "upload_time": "2019-01-07T22:56:42", "upload_time_iso_8601": "2019-01-07T22:56:42.203505Z", "url": "https://files.pythonhosted.org/packages/2e/5f/702c9f94ed1a5599d9d545ed5fe59d4bab999a7fd33137b1211640708431/caddy-1.3.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:42 2020"}