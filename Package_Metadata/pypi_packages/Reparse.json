{"info": {"author": "Andy Chase", "author_email": "theandychase@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Reparse\n=======\n\n*Python library/tools for combining and parsing using Regular Expressions in a maintainable way*\n\n[|Build Status| `Download/View Source on Github`_] [`Docs at ReadtheDocs`_]\n\nThis library also allows you to:\n\n- Maintain a database of Regular Expressions\n- Combine them together using Patterns\n- Search, Parse and Output data matched by combined Regex using Python functions.\n\nThis library basically just gives you a way to combine Regular Expressions together\nand hook them up to some callback functions in Python.\n\nA Taste / Getting Started\n=========================\n\n(See the examples/ directory for a full code examples)\n\nSay your fashionista friend must know what colors their friends like at certain times.\nLuckily for you two, your friend's friends are blogging fanatics and you have downloaded thousands\nof text documents containing their every thought.\n\nSo you want to get (color and time) or ``[('green', datetime.time(23, 0))]`` out of text like::\n\n     blah blah blah go to the store to buy green at 11pm! blah blah\n\nIf you need scan/search/parse/transform some unstructured input and get some semi-structured data\nout of it Reparse might be able to help.\n\nFirst structure some Regular Expressions (Here, in Yaml)\n--------------------------------------------------------\n\n.. code-block:: yaml\n\n    Color:\n        Basic Color:\n            Expression: (Red|Orange|Yellow|Green|Blue|Violet|Brown|Black)\n            Matches: Orange | Green\n            Non-Matches: White\n            Groups:\n              - Color\n\n    Time:\n        Basic Time:\n            Expression: ([0-9]|[1][0-2]) \\s? (am|pm)\n            Matches: 8am | 3 pm\n            Non-Matches: 8a | 8:00 am | 13pm\n            Groups:\n              - Hour\n              - AMPM\n\nThen structure some Patterns with those expressions (Yaml)\n----------------------------------------------------------\n\n.. code-block:: yaml\n\n    BasicColorTime:\n      Order: 1\n      Pattern: |\n        <Color> \\s? at \\s? <Time>\n      # Angle brackets detonate expression groups\n      # Multiple expressions in one group are combined together\n\nSome callback functions (in Python)\n-----------------------------------\n\n.. code-block:: python\n\n    from datetime import time\n    def color_time(Color=None, Time=None):\n        Color, Hour, Period = Color[0], int(Time[0]), Time[1]\n        if Period == 'pm':\n            Hour += 12\n        Time = time(hour=Hour)\n\n        return Color, Time\n\nBuild your parser\n-----------------\n\n.. code-block:: python\n\n    from examples.colortime.functions import functions\n    import reparse\n\n\n    colortime_parser = reparse.parser(\n        parser_type=reparse.basic_parser,\n        expressions_yaml_path=path + \"expressions.yaml\",\n        patterns_yaml_path=path + \"patterns.yaml\",\n        functions=functions\n    )\n\n    print(colortime_parser(\"~ ~ ~ go to the store ~ buy green at 11pm! ~ ~\"))\n\nResult\n------\n\n.. code-block:: python\n\n    [('green', datetime.time(23, 0))]\n\nCool!\n\nIntrigued? Learn more how to make the magic happen in `Howto: How to use Reparse`_.\n\nWant to read more about what Reparse is and what it can do? More info in `About: Why another tool for parsing?`_\n\nInfo\n====\n\n.. _installation-howto:\n\nInstallation\n------------\n\npip\n~~~~\n.. code-block:: python\n\n    pip install reparse\n\nmanually\n~~~~~~~~\n\n1. If you don't have them already,\n   Reparse depends on REGEX_, and PyYaml_.\n   Download those and ``python setup.py install`` in their directories.\n   If you are on windows, you may have to find binary installers for these, since they\n   contain modules that have to be compiled.\n\n2. Download the `Zip off of Github`_ (or clone the repo).\n\n3. Extract and do ``python setup.py install`` in the reparse containing the setup.py file directory.\n   You can also just have the reparse/reparse directory in the source tree\n   of your project if you don't want to install it.\n\n4. Test with ``python -c \"import reparse\"``,\n   no output means it is probably installed.\n   If you get ``ImportError: No module named reparse``\n   then you might want to recheck your steps.\n\nSupport\n-------\n\nNeed some help? Send me an email at theandychase@gmail.com and I'll do my best to help you.\n\nContribution\n------------\n\nThe code is located on Github_.\nSend me suggestions, issues, and pull requests and I'll gladly review them!\n\nVersions\n--------\n\n- *3.0* InvalidPattern Exception, Allow monkey patching regex arguments. RE|PARSE -> Reparse.\n- *2.1* Change `yaml.load` to `yaml.safe_load` for security\n- *2.0* Major Refactor, Python 3, Better Parser builders\n- *1.1* Fix setup.py\n- *1.0* Release\n\nLicence\n-------\n\nMIT Licensed! See LICENSE file for the full text.\n\n.. |Build Status| image:: https://travis-ci.org/andychase/reparse.png?branch=master\n   :target: https://travis-ci.org/andychase/reparse\n\n.. _Download/View Source on Github: https://github.com/andychase/reparse\n\n.. _Github: https://github.com/andychase/reparse\n\n.. _Docs at Readthedocs: https://reparse.readthedocs.org/en/latest/\n\n.. _`Howto: How to use Reparse`: https://reparse.readthedocs.org/en/latest/howto.html\n\n.. _`About: Why another tool for parsing?`: https://reparse.readthedocs.org/en/latest/about.html\n\n.. _`REGEX`: https://pypi.python.org/pypi/regex\n\n.. _`PyYaml`: https://pypi.python.org/pypi/PyYAML\n\n.. _`Zip off of Github`: https://github.com/andychase/reparse/archive/master.zip", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/andychase/reparse/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/andychase/reparse", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Reparse", "package_url": "https://pypi.org/project/Reparse/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Reparse/", "project_urls": {"Download": "https://github.com/andychase/reparse/archive/master.zip", "Homepage": "http://github.com/andychase/reparse"}, "release_url": "https://pypi.org/project/Reparse/3.0/", "requires_dist": null, "requires_python": null, "summary": "Regular Expression based parsers for extracting data from natural language", "version": "3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"reparse\">\n<h2>Reparse</h2>\n<p><em>Python library/tools for combining and parsing using Regular Expressions in a maintainable way</em></p>\n<p>[<a href=\"https://travis-ci.org/andychase/reparse\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f567b999ab0960952e9bd19d7056fca93b9ea90/68747470733a2f2f7472617669732d63692e6f72672f616e647963686173652f726570617273652e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://github.com/andychase/reparse\" rel=\"nofollow\">Download/View Source on Github</a>] [<a href=\"https://reparse.readthedocs.org/en/latest/\" rel=\"nofollow\">Docs at ReadtheDocs</a>]</p>\n<p>This library also allows you to:</p>\n<ul>\n<li>Maintain a database of Regular Expressions</li>\n<li>Combine them together using Patterns</li>\n<li>Search, Parse and Output data matched by combined Regex using Python functions.</li>\n</ul>\n<p>This library basically just gives you a way to combine Regular Expressions together\nand hook them up to some callback functions in Python.</p>\n</div>\n<div id=\"a-taste-getting-started\">\n<h2>A Taste / Getting Started</h2>\n<p>(See the examples/ directory for a full code examples)</p>\n<p>Say your fashionista friend must know what colors their friends like at certain times.\nLuckily for you two, your friend\u2019s friends are blogging fanatics and you have downloaded thousands\nof text documents containing their every thought.</p>\n<p>So you want to get (color and time) or <tt><span class=\"pre\">[('green',</span> datetime.time(23, <span class=\"pre\">0))]</span></tt> out of text like:</p>\n<pre>blah blah blah go to the store to buy green at 11pm! blah blah\n</pre>\n<p>If you need scan/search/parse/transform some unstructured input and get some semi-structured data\nout of it Reparse might be able to help.</p>\n<div id=\"first-structure-some-regular-expressions-here-in-yaml\">\n<h3>First structure some Regular Expressions (Here, in Yaml)</h3>\n<pre><span class=\"nt\">Color</span><span class=\"p\">:</span>\n    <span class=\"nt\">Basic Color</span><span class=\"p\">:</span>\n        <span class=\"nt\">Expression</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">(Red|Orange|Yellow|Green|Blue|Violet|Brown|Black)</span>\n        <span class=\"nt\">Matches</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Orange | Green</span>\n        <span class=\"nt\">Non-Matches</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">White</span>\n        <span class=\"nt\">Groups</span><span class=\"p\">:</span>\n          <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">Color</span>\n\n<span class=\"nt\">Time</span><span class=\"p\">:</span>\n    <span class=\"nt\">Basic Time</span><span class=\"p\">:</span>\n        <span class=\"nt\">Expression</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">([0-9]|[1][0-2]) \\s? (am|pm)</span>\n        <span class=\"nt\">Matches</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">8am | 3 pm</span>\n        <span class=\"nt\">Non-Matches</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">8a | 8:00 am | 13pm</span>\n        <span class=\"nt\">Groups</span><span class=\"p\">:</span>\n          <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">Hour</span>\n          <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">AMPM</span>\n</pre>\n</div>\n<div id=\"then-structure-some-patterns-with-those-expressions-yaml\">\n<h3>Then structure some Patterns with those expressions (Yaml)</h3>\n<pre><span class=\"nt\">BasicColorTime</span><span class=\"p\">:</span>\n  <span class=\"nt\">Order</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">1</span>\n  <span class=\"nt\">Pattern</span><span class=\"p\">:</span> <span class=\"p-Indicator\">|</span>\n    <span class=\"no\">&lt;Color&gt; \\s? at \\s? &lt;Time&gt;</span>\n  <span class=\"c1\"># Angle brackets detonate expression groups</span>\n  <span class=\"c1\"># Multiple expressions in one group are combined together</span>\n</pre>\n</div>\n<div id=\"some-callback-functions-in-python\">\n<h3>Some callback functions (in Python)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"k\">def</span> <span class=\"nf\">color_time</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">Time</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">Color</span><span class=\"p\">,</span> <span class=\"n\">Hour</span><span class=\"p\">,</span> <span class=\"n\">Period</span> <span class=\"o\">=</span> <span class=\"n\">Color</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">Time</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">Time</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">Period</span> <span class=\"o\">==</span> <span class=\"s1\">'pm'</span><span class=\"p\">:</span>\n        <span class=\"n\">Hour</span> <span class=\"o\">+=</span> <span class=\"mi\">12</span>\n    <span class=\"n\">Time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"n\">Hour</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Color</span><span class=\"p\">,</span> <span class=\"n\">Time</span>\n</pre>\n</div>\n<div id=\"build-your-parser\">\n<h3>Build your parser</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">examples.colortime.functions</span> <span class=\"kn\">import</span> <span class=\"n\">functions</span>\n<span class=\"kn\">import</span> <span class=\"nn\">reparse</span>\n\n\n<span class=\"n\">colortime_parser</span> <span class=\"o\">=</span> <span class=\"n\">reparse</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"p\">(</span>\n    <span class=\"n\">parser_type</span><span class=\"o\">=</span><span class=\"n\">reparse</span><span class=\"o\">.</span><span class=\"n\">basic_parser</span><span class=\"p\">,</span>\n    <span class=\"n\">expressions_yaml_path</span><span class=\"o\">=</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">\"expressions.yaml\"</span><span class=\"p\">,</span>\n    <span class=\"n\">patterns_yaml_path</span><span class=\"o\">=</span><span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"s2\">\"patterns.yaml\"</span><span class=\"p\">,</span>\n    <span class=\"n\">functions</span><span class=\"o\">=</span><span class=\"n\">functions</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">colortime_parser</span><span class=\"p\">(</span><span class=\"s2\">\"~ ~ ~ go to the store ~ buy green at 11pm! ~ ~\"</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"result\">\n<h3>Result</h3>\n<pre><span class=\"p\">[(</span><span class=\"s1\">'green'</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))]</span>\n</pre>\n<p>Cool!</p>\n<p>Intrigued? Learn more how to make the magic happen in <a href=\"https://reparse.readthedocs.org/en/latest/howto.html\" rel=\"nofollow\">Howto: How to use Reparse</a>.</p>\n<p>Want to read more about what Reparse is and what it can do? More info in <a href=\"https://reparse.readthedocs.org/en/latest/about.html\" rel=\"nofollow\">About: Why another tool for parsing?</a></p>\n</div>\n</div>\n<div id=\"info\">\n<h2>Info</h2>\n<div id=\"installation\">\n<span id=\"installation-howto\"></span><h3>Installation</h3>\n<div id=\"pip\">\n<h4>pip</h4>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">reparse</span>\n</pre>\n</div>\n<div id=\"manually\">\n<h4>manually</h4>\n<ol>\n<li>If you don\u2019t have them already,\nReparse depends on <a href=\"https://pypi.python.org/pypi/regex\" rel=\"nofollow\">REGEX</a>, and <a href=\"https://pypi.python.org/pypi/PyYAML\" rel=\"nofollow\">PyYaml</a>.\nDownload those and <tt>python setup.py install</tt> in their directories.\nIf you are on windows, you may have to find binary installers for these, since they\ncontain modules that have to be compiled.</li>\n<li>Download the <a href=\"https://github.com/andychase/reparse/archive/master.zip\" rel=\"nofollow\">Zip off of Github</a> (or clone the repo).</li>\n<li>Extract and do <tt>python setup.py install</tt> in the reparse containing the setup.py file directory.\nYou can also just have the reparse/reparse directory in the source tree\nof your project if you don\u2019t want to install it.</li>\n<li>Test with <tt>python <span class=\"pre\">-c</span> \"import reparse\"</tt>,\nno output means it is probably installed.\nIf you get <tt>ImportError: No module named reparse</tt>\nthen you might want to recheck your steps.</li>\n</ol>\n</div>\n</div>\n<div id=\"support\">\n<h3>Support</h3>\n<p>Need some help? Send me an email at <a href=\"mailto:theandychase%40gmail.com\">theandychase<span>@</span>gmail<span>.</span>com</a> and I\u2019ll do my best to help you.</p>\n</div>\n<div id=\"contribution\">\n<h3>Contribution</h3>\n<p>The code is located on <a href=\"https://github.com/andychase/reparse\" rel=\"nofollow\">Github</a>.\nSend me suggestions, issues, and pull requests and I\u2019ll gladly review them!</p>\n</div>\n<div id=\"versions\">\n<h3>Versions</h3>\n<ul>\n<li><em>3.0</em> InvalidPattern Exception, Allow monkey patching regex arguments. RE|PARSE -&gt; Reparse.</li>\n<li><em>2.1</em> Change <cite>yaml.load</cite> to <cite>yaml.safe_load</cite> for security</li>\n<li><em>2.0</em> Major Refactor, Python 3, Better Parser builders</li>\n<li><em>1.1</em> Fix setup.py</li>\n<li><em>1.0</em> Release</li>\n</ul>\n</div>\n<div id=\"licence\">\n<h3>Licence</h3>\n<p>MIT Licensed! See LICENSE file for the full text.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1828623, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "05245427fdecc26ed3faa34954d72f2c", "sha256": "caac7f9f4e7c1a5a9e44fd3d126de417eac99c4756e09d31b58f5ef6c0165b58"}, "downloads": -1, "filename": "Reparse-1.0.zip", "has_sig": true, "md5_digest": "05245427fdecc26ed3faa34954d72f2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3783, "upload_time": "2013-08-13T00:25:26", "upload_time_iso_8601": "2013-08-13T00:25:26.328615Z", "url": "https://files.pythonhosted.org/packages/56/74/956b8b58067541c51ebb8e7096cedbcecc67aac9eba98e69bc7868ce8a49/Reparse-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "91251fe9bb05336f13942a3f8dd7806e", "sha256": "7acb50917f8282dfff9676bc16dc426c025ab31db31966514e36249b63fb69ae"}, "downloads": -1, "filename": "Reparse-1.0.1.zip", "has_sig": true, "md5_digest": "91251fe9bb05336f13942a3f8dd7806e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8031, "upload_time": "2013-11-06T21:44:18", "upload_time_iso_8601": "2013-11-06T21:44:18.902444Z", "url": "https://files.pythonhosted.org/packages/0e/8a/1d419eff244778c4537f3514c376442eeaa5cd8add1fae7143d9c5310a4d/Reparse-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "fa7bb37be3706d684dc1d765e5a367a3", "sha256": "43e919530a3559f218d83bf827b658b8ee5297d070ebf863dbaa56d819d4c875"}, "downloads": -1, "filename": "Reparse-1.0.2.zip", "has_sig": true, "md5_digest": "fa7bb37be3706d684dc1d765e5a367a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8034, "upload_time": "2013-11-06T21:45:18", "upload_time_iso_8601": "2013-11-06T21:45:18.197237Z", "url": "https://files.pythonhosted.org/packages/f9/bb/ae4d7fcb912d152145b6539c8a601dd06c45b079e1e7fd92dea8804c0b64/Reparse-1.0.2.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "be19284f29f6eded9b6e72fe6fd220dd", "sha256": "ba097a6daf5c191fa35f5843fd61749aa4b0930a35e88d412bd0943d0f994000"}, "downloads": -1, "filename": "Reparse-1.1.zip", "has_sig": true, "md5_digest": "be19284f29f6eded9b6e72fe6fd220dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9078, "upload_time": "2013-11-09T06:56:59", "upload_time_iso_8601": "2013-11-09T06:56:59.505752Z", "url": "https://files.pythonhosted.org/packages/1b/47/22e06fcff3c25fe6260c3329b834c1adf2c9a22aea49546270204737eeac/Reparse-1.1.zip", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "4be193bec6383795e427f17bcfebb249", "sha256": "8c24c060105228b628473eeffae1c74abd1c2457361c880cdfa29ab2dbd992eb"}, "downloads": -1, "filename": "Reparse-2.0.zip", "has_sig": true, "md5_digest": "4be193bec6383795e427f17bcfebb249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17083, "upload_time": "2013-11-09T10:56:53", "upload_time_iso_8601": "2013-11-09T10:56:53.709936Z", "url": "https://files.pythonhosted.org/packages/d8/5b/a5eedfb522cd124e43c8acd3d6da8d67dc6875863791b83596f7ce452d89/Reparse-2.0.zip", "yanked": false}], "2.01": [], "2.1": [{"comment_text": "", "digests": {"md5": "16663130678133a91ce727ce69b65f43", "sha256": "23ab6ef2c2ef8b295d67eb2523d79863faf5fd22f4844669c2bb567cca451336"}, "downloads": -1, "filename": "reparse-2.1.tar.gz", "has_sig": false, "md5_digest": "16663130678133a91ce727ce69b65f43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9242, "upload_time": "2015-05-12T04:44:07", "upload_time_iso_8601": "2015-05-12T04:44:07.896239Z", "url": "https://files.pythonhosted.org/packages/04/f7/bc8b667c21d67e488b513cdd6872f5f8b12759e7eaa91c39af73fc3e3848/reparse-2.1.tar.gz", "yanked": false}], "3.0": [{"comment_text": "", "digests": {"md5": "3feaf68ed83c45cdad55a8acd674b550", "sha256": "6188c2306c20867ed2c464667c3835cb47c6b217ed5f659b53756dba253b28ce"}, "downloads": -1, "filename": "reparse-3.0.tar.gz", "has_sig": false, "md5_digest": "3feaf68ed83c45cdad55a8acd674b550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10369, "upload_time": "2015-11-22T22:57:14", "upload_time_iso_8601": "2015-11-22T22:57:14.835267Z", "url": "https://files.pythonhosted.org/packages/08/fe/2822999b3ae6295ae91fb67d7feb640a26138714bd1f64551a1a87a4dfc5/reparse-3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3feaf68ed83c45cdad55a8acd674b550", "sha256": "6188c2306c20867ed2c464667c3835cb47c6b217ed5f659b53756dba253b28ce"}, "downloads": -1, "filename": "reparse-3.0.tar.gz", "has_sig": false, "md5_digest": "3feaf68ed83c45cdad55a8acd674b550", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10369, "upload_time": "2015-11-22T22:57:14", "upload_time_iso_8601": "2015-11-22T22:57:14.835267Z", "url": "https://files.pythonhosted.org/packages/08/fe/2822999b3ae6295ae91fb67d7feb640a26138714bd1f64551a1a87a4dfc5/reparse-3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:41 2020"}