{"info": {"author": "Constantin Roganov", "author_email": "rccbox@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Security", "Topic :: Security :: Cryptography"], "description": "######################\npeewee_encrypted_field\n######################\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat \n        :target: https://opensource.org/licenses/MIT \n        \n.. image:: https://badge.fury.io/gh/brake%2Fpeewee_encrypted_field.svg\n        :target: https://badge.fury.io/gh/brake%2Fpeewee_encrypted_field\n        \n.. image:: https://img.shields.io/badge/Python-2.7-red.svg\n\n.. _fernet-py: https://github.com/heroku/fernet-py\n.. _Fernet tokens:\n.. _fernet spec: https://github.com/fernet/spec\n.. _Pycrypto: https://pypi.python.org/pypi/pycrypto\n\nEncrypted field for `Peewee ORM <https://github.com/coleifer/peewee>`_ models to save data in DB in encrypted form.\n\nData stored in DataBase as `Fernet tokens`_. After you define an encryption key all cryptography will be performed transparently for your application.\n\nUses simple fernet implementation https://github.com/heroku/fernet-py\n\nIdea caught from SQLAlchemy's `EncryptedType <http://sqlalchemy-utils.readthedocs.io/en/latest/data_types.html#module-sqlalchemy_utils.types.encrypted>`_.\n\nContents\n********\n\n* `Implementation Details`_ \n* `Features`_\n* `Installation`_\n* `Usage`_\n* `Key Derivation Example`_\n\n.. _Implementation Details:\n\nImplementation Details\n----------------------\n\nA fernet-py_ package can use Pycrypto_ or `M2Crypto <https://pypi.python.org/pypi/M2Crypto>`_ as backend (`details <https://github.com1/heroku/fernet-py#installation>`_). Same belongs to this module due to its dependency from fernet-py_. Note that ``pip`` uses Pycrypto_ as a default dependency when install fernet-py_. \n**Length of entire key is 32 bytes**, 16 bytes per both signing and encryption keys, as stated in `specification <https://github.com/fernet/spec/blob/master/Spec.md#key-format>`_.\n\n.. _Features:\n\nFeatures\n--------\n\nYou have to set ``key`` as a property of appropriate ``EncryptedField``. **You need to set this property once per** ``Model`` **per** ``Model`` **'s** ``Field``.\nIf you attempt to set ``key`` property for a ``Field`` whose ``key`` already has been set, exception ``EncryptedField.KeyAlreadyExists`` will be raised. To change the ``key`` on the fly you have to explictly perform ``del SomeEncryptedField.key`` and then set this property to desired value again.\n\n.. _Installation:\n\nInstallation\n------------\n\n``pip install peewee_encrypted_field``\n\nor, if you downloaded source, \n\n``python setup.py install``\n\n.. _Usage:\n\nUsage\n-----\n\nAt first, import module\n\n.. code-block:: python\n\n  from peewee import *\n  from peewee_encrypted_field import EncryptedField\n\nThen, define the model with :code:`EncryptedField`\n\n.. code-block:: python\n  \n  class SecureTable(BaseModel):\n      sensitive_data = EncryptedField()\n\n      class Meta:\n          db_table = 'SecureTable'\n\nAfter, configure field's encryption key\n\n.. code-block:: python\n  \n  SecureTable.sensitive_data.key = key_derivation_fn()  # a hypotetical key derivation \n                                                        # function returning 32 byte key\n\nFinally, save and retrieve data in a Peewee's usual manner\n\n.. code-block:: python\n\n  new_secret = SecureTable(sensitive_data='My New BIG Secret')\n  new_secret.save()\n\n.. _Key Derivation Example:\n\nKey Derivation Example\n----------------------\n\nExample Key Derivation Function baded on Pycrypto_ module.\n\n`Please take look at this Gist <https://gist.github.com/brake/18ab6f269fdef090034d1805308422c6>`_ - it can contain more actual version of code below.\n\n.. code-block:: python\n\n  from binascii import unhexlify\n  from functools import partial\n  from Crypto.Protocol import KDF\n  from Crypto.Hash import SHA512, HMAC\n  \n  _SALT = unhexlify('48B755AB80CD1C3DA61182D3DCD2E3A2CA869B783618FF6551FB4B0CDC3B8066')  # some salt\n  _KEY_LENGTH = 32\n  \n  key_derivation_fn = partial(        \n      KDF.PBKDF2,\n      salt=_SALT,\n      dkLen=_KEY_LENGTH,\n      count=5000,\n      prf=lambda p,s: HMAC.new(p,s,SHA512).digest()\n  )\n\n  # KDF usage\n  SecureTable.sensitive_data.key = key_derivation_fn(text_password)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/brake/peewee_mssql/archive/0.0.2.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brake/peewee_encrypted_field", "keywords": "database,ORM,peewee,encryption,fernet,ciphering", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "peewee_encrypted_field", "package_url": "https://pypi.org/project/peewee_encrypted_field/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/peewee_encrypted_field/", "project_urls": {"Download": "https://github.com/brake/peewee_mssql/archive/0.0.2.zip", "Homepage": "https://github.com/brake/peewee_encrypted_field"}, "release_url": "https://pypi.org/project/peewee_encrypted_field/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Field with encryption/decryption on save/read for use in Peewee ORM models", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e5be039daf9eba6b6bc47b88defd227ac24d66b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://badge.fury.io/gh/brake%2Fpeewee_encrypted_field\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/gh/brake%2Fpeewee_encrypted_field.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/485a9eb1f658749a8028226f4048961ae722c67f/68747470733a2f2f62616467652e667572792e696f2f67682f6272616b652532467065657765655f656e637279707465645f6669656c642e737667\"></a>\n<img alt=\"https://img.shields.io/badge/Python-2.7-red.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/175edbaa120edffdc38f226d046ff74fa7a5a0db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d322e372d7265642e737667\">\n<p>Encrypted field for <a href=\"https://github.com/coleifer/peewee\" rel=\"nofollow\">Peewee ORM</a> models to save data in DB in encrypted form.</p>\n<p>Data stored in DataBase as <a href=\"https://github.com/fernet/spec\" rel=\"nofollow\">Fernet tokens</a>. After you define an encryption key all cryptography will be performed transparently for your application.</p>\n<p>Uses simple fernet implementation <a href=\"https://github.com/heroku/fernet-py\" rel=\"nofollow\">https://github.com/heroku/fernet-py</a></p>\n<p>Idea caught from SQLAlchemy\u2019s <a href=\"http://sqlalchemy-utils.readthedocs.io/en/latest/data_types.html#module-sqlalchemy_utils.types.encrypted\" rel=\"nofollow\">EncryptedType</a>.</p>\n<div id=\"contents\">\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#implementation-details\" rel=\"nofollow\">Implementation Details</a></li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#key-derivation-example\" rel=\"nofollow\">Key Derivation Example</a></li>\n</ul>\n<div id=\"id1\">\n<span id=\"implementation-details\"></span><h3>Implementation Details</h3>\n<p>A <a href=\"https://github.com/heroku/fernet-py\" rel=\"nofollow\">fernet-py</a> package can use <a href=\"https://pypi.python.org/pypi/pycrypto\" rel=\"nofollow\">Pycrypto</a> or <a href=\"https://pypi.python.org/pypi/M2Crypto\" rel=\"nofollow\">M2Crypto</a> as backend (<a href=\"https://github.com1/heroku/fernet-py#installation\" rel=\"nofollow\">details</a>). Same belongs to this module due to its dependency from <a href=\"https://github.com/heroku/fernet-py\" rel=\"nofollow\">fernet-py</a>. Note that <tt>pip</tt> uses <a href=\"https://pypi.python.org/pypi/pycrypto\" rel=\"nofollow\">Pycrypto</a> as a default dependency when install <a href=\"https://github.com/heroku/fernet-py\" rel=\"nofollow\">fernet-py</a>.\n<strong>Length of entire key is 32 bytes</strong>, 16 bytes per both signing and encryption keys, as stated in <a href=\"https://github.com/fernet/spec/blob/master/Spec.md#key-format\" rel=\"nofollow\">specification</a>.</p>\n</div>\n<div id=\"id2\">\n<span id=\"features\"></span><h3>Features</h3>\n<p>You have to set <tt>key</tt> as a property of appropriate <tt>EncryptedField</tt>. <strong>You need to set this property once per</strong> <tt>Model</tt> <strong>per</strong> <tt>Model</tt> <strong>\u2018s</strong> <tt>Field</tt>.\nIf you attempt to set <tt>key</tt> property for a <tt>Field</tt> whose <tt>key</tt> already has been set, exception <tt>EncryptedField.KeyAlreadyExists</tt> will be raised. To change the <tt>key</tt> on the fly you have to explictly perform <tt>del SomeEncryptedField.key</tt> and then set this property to desired value again.</p>\n</div>\n<div id=\"id3\">\n<span id=\"installation\"></span><h3>Installation</h3>\n<p><tt>pip install peewee_encrypted_field</tt></p>\n<p>or, if you downloaded source,</p>\n<p><tt>python setup.py install</tt></p>\n</div>\n<div id=\"id4\">\n<span id=\"usage\"></span><h3>Usage</h3>\n<p>At first, import module</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">peewee</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">peewee_encrypted_field</span> <span class=\"kn\">import</span> <span class=\"n\">EncryptedField</span>\n</pre>\n<p>Then, define the model with <code>EncryptedField</code></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SecureTable</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">sensitive_data</span> <span class=\"o\">=</span> <span class=\"n\">EncryptedField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s1\">'SecureTable'</span>\n</pre>\n<p>After, configure field\u2019s encryption key</p>\n<pre><span class=\"n\">SecureTable</span><span class=\"o\">.</span><span class=\"n\">sensitive_data</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key_derivation_fn</span><span class=\"p\">()</span>  <span class=\"c1\"># a hypotetical key derivation</span>\n                                                      <span class=\"c1\"># function returning 32 byte key</span>\n</pre>\n<p>Finally, save and retrieve data in a Peewee\u2019s usual manner</p>\n<pre><span class=\"n\">new_secret</span> <span class=\"o\">=</span> <span class=\"n\">SecureTable</span><span class=\"p\">(</span><span class=\"n\">sensitive_data</span><span class=\"o\">=</span><span class=\"s1\">'My New BIG Secret'</span><span class=\"p\">)</span>\n<span class=\"n\">new_secret</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"id5\">\n<span id=\"key-derivation-example\"></span><h3>Key Derivation Example</h3>\n<p>Example Key Derivation Function baded on <a href=\"https://pypi.python.org/pypi/pycrypto\" rel=\"nofollow\">Pycrypto</a> module.</p>\n<p><a href=\"https://gist.github.com/brake/18ab6f269fdef090034d1805308422c6\" rel=\"nofollow\">Please take look at this Gist</a> - it can contain more actual version of code below.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">binascii</span> <span class=\"kn\">import</span> <span class=\"n\">unhexlify</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Crypto.Protocol</span> <span class=\"kn\">import</span> <span class=\"n\">KDF</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Crypto.Hash</span> <span class=\"kn\">import</span> <span class=\"n\">SHA512</span><span class=\"p\">,</span> <span class=\"n\">HMAC</span>\n\n<span class=\"n\">_SALT</span> <span class=\"o\">=</span> <span class=\"n\">unhexlify</span><span class=\"p\">(</span><span class=\"s1\">'48B755AB80CD1C3DA61182D3DCD2E3A2CA869B783618FF6551FB4B0CDC3B8066'</span><span class=\"p\">)</span>  <span class=\"c1\"># some salt</span>\n<span class=\"n\">_KEY_LENGTH</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n\n<span class=\"n\">key_derivation_fn</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span>\n    <span class=\"n\">KDF</span><span class=\"o\">.</span><span class=\"n\">PBKDF2</span><span class=\"p\">,</span>\n    <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">_SALT</span><span class=\"p\">,</span>\n    <span class=\"n\">dkLen</span><span class=\"o\">=</span><span class=\"n\">_KEY_LENGTH</span><span class=\"p\">,</span>\n    <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">,</span>\n    <span class=\"n\">prf</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">HMAC</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"n\">SHA512</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># KDF usage</span>\n<span class=\"n\">SecureTable</span><span class=\"o\">.</span><span class=\"n\">sensitive_data</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key_derivation_fn</span><span class=\"p\">(</span><span class=\"n\">text_password</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2395597, "releases": {"0.0.1": [], "0.0.2": [{"comment_text": "", "digests": {"md5": "153acada7388f7f70a04531877f8ba6b", "sha256": "a18ae1e2d87cf05b4c781210dbd4e56dec1b090d8f54547dbcf0fe3cfa799435"}, "downloads": -1, "filename": "peewee_encrypted_field-0.0.2.tar.gz", "has_sig": false, "md5_digest": "153acada7388f7f70a04531877f8ba6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4801, "upload_time": "2016-10-12T16:50:17", "upload_time_iso_8601": "2016-10-12T16:50:17.152036Z", "url": "https://files.pythonhosted.org/packages/dc/08/0a8b530efff8c424baa81e18be116b4fd6419c6387298042b3b0cd86b320/peewee_encrypted_field-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "153acada7388f7f70a04531877f8ba6b", "sha256": "a18ae1e2d87cf05b4c781210dbd4e56dec1b090d8f54547dbcf0fe3cfa799435"}, "downloads": -1, "filename": "peewee_encrypted_field-0.0.2.tar.gz", "has_sig": false, "md5_digest": "153acada7388f7f70a04531877f8ba6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4801, "upload_time": "2016-10-12T16:50:17", "upload_time_iso_8601": "2016-10-12T16:50:17.152036Z", "url": "https://files.pythonhosted.org/packages/dc/08/0a8b530efff8c424baa81e18be116b4fd6419c6387298042b3b0cd86b320/peewee_encrypted_field-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:46 2020"}