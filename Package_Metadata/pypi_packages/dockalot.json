{"info": {"author": "Mark Aikens", "author_email": "markadev@primeletters.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: System :: Installation/Setup", "Topic :: Utilities"], "description": "========\ndockalot\n========\n\n*Building Docker images for the real world*\n\n|build-status| |docs|\n\nIntroduction\n============\n\n``dockalot`` is a tool to build Docker images using Ansible playbooks for\napplication and configuration installation. It addresses several shortcomings\nwith the default Docker toolkit to make building non-trivial images easier.\n\nUsing a Dockerfile is fine if you are repackaging an open source or other\npublicly available package. But if you aren't, you might have one or more\nof these problems:\n\n* Building your image requires credentials to a private source code or\n  package repository\n* Building your image requires a custom package installation procedure more\n  complicated than ``apt-get install``\n\nBecause of the way ``docker build`` works by building your image in layers\non top of layers, you may find that your super-secret private repository\ncredentials gets trapped in one of those layers. Go ahead, export an image\nusing ``docker save`` and poke around the layers of an image you've already\nbuilt. Is that *your* access token in there? Well, it's everyone's access\ntoken now...\n\nTemporary files part of any non-trivial package installation also get\ntrapped in those middle layers causing your final Docker image to be much\nlarger than they need to be. Workarounds for this problem include ``&&``-itis;\njoining dozens of shell commands together with ``&&`` in an attempt to keep\nthem all on the same layer. When you do this you lose the ability to add\ncomments in-line and your Dockerfile becomes a mess.\n\nIt doesn't have to be this way.\n\n``dockalot`` solves these problems by executing all of the installation\ncommands in one Docker layer. There are no hidden layers for credentials or\ntemporary files to hide in. You can focus on just installing software into\nyour Docker image using high-level Ansible modules and let the tools handle\nthe low-level details.\n\n\nFeatures\n========\n\n- Build smaller images without having to think about Docker layers.\n- Pass your API keys into the build process and don't worry about them\n  getting stuck in any hidden Docker layers.\n- Take advantage of purpose-built `Ansible modules\n  <http://docs.ansible.com/ansible/list_of_files_modules.html>`_. Never\n  run ``sed`` again!\n- Use variables and templates in Ansible instead of clunky environment\n  variables.\n- Support for most of the important Dockerfile commands. Goal is to\n  have feature-parity with Dockerfiles.\n\n\nInstallation\n============\n\nRequirements:\n * Python 2.7\n * Docker >= 1.12\n\nInstall ``dockalot`` using *pip*::\n\n    ubuntu@ubuntu-vm:~$ sudo pip install dockalot\n\nOr, to install without root access you can use a\n`virtual environment <https://pypi.python.org/pypi/virtualenv>`_::\n\n    ubuntu@ubuntu-vm:~$ mkvirtualenv dockalot\n    ubuntu@ubuntu-vm:~$ . dockalot/bin/activate\n    (dockalot) ubuntu@ubuntu-vm:~$ pip install dockalot\n\n\nExample Usage\n=============\n\nA simple configuration file (``example1.yml``) to build an image looks like\nthis::\n\n    ---\n    docker:\n      base_image: \"python:2.7\"\n      entrypoint: [ \"/entrypoint.py\" ]\n      tags:\n        - myapp\n    ---\n    - name: Provision the container\n      hosts: all\n      tasks:\n        - name: Install the thing\n          copy: \n            dest: /entrypoint.py\n            content: |\n              #!/usr/bin/env python\n              print(\"I'm a Python script\")\n              print(\"Wheeeeee!!!!\")\n            mode: 0755\n\nBuild the image::\n\n    ubuntu@ubuntu-vm:~$ dockalot example1.yml \n    INFO:Creating the container to provision\n    ...\n    INFO:Committing the image\n    INFO:Created sha256:662a2be8c1215de09fc410f2c5c7fb2e8b6ed00b125c4cd27fe8a28972f8542c\n    INFO:Tagging image myapp:latest\n    ubuntu@ubuntu-vm:~$\n\nThen run your shiny new image::\n\n    ubuntu@ubuntu-vm:~$ docker run myapp\n    I'm a Python script\n    Wheeeeee!!!!\n    ubuntu@ubuntu-vm:~$\n\nAlso take a look at some more `complex examples\n<https://github.com/markadev/dockalot/tree/master/examples>`_.\n\n\nLicense\n=======\n\nThe project is licensed under the MIT license.\n\n\n.. |docs| image:: https://readthedocs.org/projects/dockalot/badge/?version=latest\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://dockalot.readthedocs.io/en/latest/?badge=latest\n\n.. |build-status| image:: https://travis-ci.org/markadev/dockalot.svg?branch=master\n    :alt: build status\n    :target: https://travis-ci.org/markadev/dockalot", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/markadev/dockalot", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "dockalot", "package_url": "https://pypi.org/project/dockalot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dockalot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/markadev/dockalot"}, "release_url": "https://pypi.org/project/dockalot/0.7.1/", "requires_dist": null, "requires_python": null, "summary": "Build Docker images for the real world using ansible playbooks", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Building Docker images for the real world</em></p>\n<p><a href=\"https://travis-ci.org/markadev/dockalot\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01ea3286d6a1a07b29e26e2fe9ad7b3d4ec47edb/68747470733a2f2f7472617669732d63692e6f72672f6d61726b616465762f646f636b616c6f742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://dockalot.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1aa174a1c5093849fcbdbbe933e63e7f3868a462/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646f636b616c6f742f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><tt>dockalot</tt> is a tool to build Docker images using Ansible playbooks for\napplication and configuration installation. It addresses several shortcomings\nwith the default Docker toolkit to make building non-trivial images easier.</p>\n<p>Using a Dockerfile is fine if you are repackaging an open source or other\npublicly available package. But if you aren\u2019t, you might have one or more\nof these problems:</p>\n<ul>\n<li>Building your image requires credentials to a private source code or\npackage repository</li>\n<li>Building your image requires a custom package installation procedure more\ncomplicated than <tt><span class=\"pre\">apt-get</span> install</tt></li>\n</ul>\n<p>Because of the way <tt>docker build</tt> works by building your image in layers\non top of layers, you may find that your super-secret private repository\ncredentials gets trapped in one of those layers. Go ahead, export an image\nusing <tt>docker save</tt> and poke around the layers of an image you\u2019ve already\nbuilt. Is that <em>your</em> access token in there? Well, it\u2019s everyone\u2019s access\ntoken now\u2026</p>\n<p>Temporary files part of any non-trivial package installation also get\ntrapped in those middle layers causing your final Docker image to be much\nlarger than they need to be. Workarounds for this problem include <tt>&amp;&amp;</tt>-itis;\njoining dozens of shell commands together with <tt>&amp;&amp;</tt> in an attempt to keep\nthem all on the same layer. When you do this you lose the ability to add\ncomments in-line and your Dockerfile becomes a mess.</p>\n<p>It doesn\u2019t have to be this way.</p>\n<p><tt>dockalot</tt> solves these problems by executing all of the installation\ncommands in one Docker layer. There are no hidden layers for credentials or\ntemporary files to hide in. You can focus on just installing software into\nyour Docker image using high-level Ansible modules and let the tools handle\nthe low-level details.</p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Build smaller images without having to think about Docker layers.</li>\n<li>Pass your API keys into the build process and don\u2019t worry about them\ngetting stuck in any hidden Docker layers.</li>\n<li>Take advantage of purpose-built <a href=\"http://docs.ansible.com/ansible/list_of_files_modules.html\" rel=\"nofollow\">Ansible modules</a>. Never\nrun <tt>sed</tt> again!</li>\n<li>Use variables and templates in Ansible instead of clunky environment\nvariables.</li>\n<li>Support for most of the important Dockerfile commands. Goal is to\nhave feature-parity with Dockerfiles.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<dl>\n<dt>Requirements:</dt>\n<dd><ul>\n<li>Python 2.7</li>\n<li>Docker &gt;= 1.12</li>\n</ul>\n</dd>\n</dl>\n<p>Install <tt>dockalot</tt> using <em>pip</em>:</p>\n<pre>ubuntu@ubuntu-vm:~$ sudo pip install dockalot\n</pre>\n<p>Or, to install without root access you can use a\n<a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtual environment</a>:</p>\n<pre>ubuntu@ubuntu-vm:~$ mkvirtualenv dockalot\nubuntu@ubuntu-vm:~$ . dockalot/bin/activate\n(dockalot) ubuntu@ubuntu-vm:~$ pip install dockalot\n</pre>\n</div>\n<div id=\"example-usage\">\n<h2>Example Usage</h2>\n<p>A simple configuration file (<tt>example1.yml</tt>) to build an image looks like\nthis:</p>\n<pre>---\ndocker:\n  base_image: \"python:2.7\"\n  entrypoint: [ \"/entrypoint.py\" ]\n  tags:\n    - myapp\n---\n- name: Provision the container\n  hosts: all\n  tasks:\n    - name: Install the thing\n      copy:\n        dest: /entrypoint.py\n        content: |\n          #!/usr/bin/env python\n          print(\"I'm a Python script\")\n          print(\"Wheeeeee!!!!\")\n        mode: 0755\n</pre>\n<p>Build the image:</p>\n<pre>ubuntu@ubuntu-vm:~$ dockalot example1.yml\nINFO:Creating the container to provision\n...\nINFO:Committing the image\nINFO:Created sha256:662a2be8c1215de09fc410f2c5c7fb2e8b6ed00b125c4cd27fe8a28972f8542c\nINFO:Tagging image myapp:latest\nubuntu@ubuntu-vm:~$\n</pre>\n<p>Then run your shiny new image:</p>\n<pre>ubuntu@ubuntu-vm:~$ docker run myapp\nI'm a Python script\nWheeeeee!!!!\nubuntu@ubuntu-vm:~$\n</pre>\n<p>Also take a look at some more <a href=\"https://github.com/markadev/dockalot/tree/master/examples\" rel=\"nofollow\">complex examples</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The project is licensed under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 2560747, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "8accd34e6181df73d499ab3ef8bbcc12", "sha256": "a4eec351173e0e7ea323a6cdeb1351c481ccb898379094b1c730bd511dc23e66"}, "downloads": -1, "filename": "dockalot-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8accd34e6181df73d499ab3ef8bbcc12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15910, "upload_time": "2016-10-09T21:09:17", "upload_time_iso_8601": "2016-10-09T21:09:17.918209Z", "url": "https://files.pythonhosted.org/packages/c9/ae/a990e672466c32d2aa2bb0c147e1a99a5c277edd875d616251e2428c14cc/dockalot-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "e3e687f508ca4930ba240e9e1bc81830", "sha256": "07ab4b1f1ecad1e8b813fa998f6044e0a4d4099d5dad5b70f79f364dd9da5dd6"}, "downloads": -1, "filename": "dockalot-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e3e687f508ca4930ba240e9e1bc81830", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24903, "upload_time": "2016-10-23T19:21:19", "upload_time_iso_8601": "2016-10-23T19:21:19.112147Z", "url": "https://files.pythonhosted.org/packages/9e/f6/8b186c2ef908f42aa9eaddede869df577918afb6a39fd279ecaae6c5dc4e/dockalot-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "33df1454220956377df8ef0b7e96c685", "sha256": "d9ebe58aae28364888aabe57239213ff268f44d32164f78c040abc94c026e1db"}, "downloads": -1, "filename": "dockalot-0.7.0.tar.gz", "has_sig": false, "md5_digest": "33df1454220956377df8ef0b7e96c685", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25720, "upload_time": "2016-10-28T00:54:40", "upload_time_iso_8601": "2016-10-28T00:54:40.474039Z", "url": "https://files.pythonhosted.org/packages/02/1b/ffbab6b53827a760be6f9c64bcea73273a3d0152badd3e1cd3af6983ee4b/dockalot-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "e23f76c38383ec407fc473a694331a97", "sha256": "59bfacabd69a5814e0e6dfce561c9969a2bfe969f369dbddb102a33f6570954b"}, "downloads": -1, "filename": "dockalot-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e23f76c38383ec407fc473a694331a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25797, "upload_time": "2017-01-08T15:36:37", "upload_time_iso_8601": "2017-01-08T15:36:37.578640Z", "url": "https://files.pythonhosted.org/packages/55/2f/e5c468b7ff347782e931406d647997a3a23707f90e0bf1ae14334eb9bd89/dockalot-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e23f76c38383ec407fc473a694331a97", "sha256": "59bfacabd69a5814e0e6dfce561c9969a2bfe969f369dbddb102a33f6570954b"}, "downloads": -1, "filename": "dockalot-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e23f76c38383ec407fc473a694331a97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25797, "upload_time": "2017-01-08T15:36:37", "upload_time_iso_8601": "2017-01-08T15:36:37.578640Z", "url": "https://files.pythonhosted.org/packages/55/2f/e5c468b7ff347782e931406d647997a3a23707f90e0bf1ae14334eb9bd89/dockalot-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:56 2020"}