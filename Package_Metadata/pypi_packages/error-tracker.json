{"info": {"author": "Sonu Kumar", "author_email": "sonunitw12@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\nError Tracker\n=============\n\n**Full featured error tracking module for Python apps supports Flask and Django**\n\n.. image::  https://img.shields.io/pypi/v/error-tracker.svg?color=dark-green\n    :target: https://pypi.org/project/error-tracker\n\n.. image::  https://img.shields.io/pypi/pyversions/error-tracker.svg?color=dark-green\n    :target: https://pypi.org/project/error-tracker\n\n.. image:: https://img.shields.io/github/license/sonus21/error-tracker.svg?color=dark-green\n    :target: https://github.com/sonus21/error-tracker/blob/master/LICENSE.txt\n\n.. image:: https://travis-ci.org/sonus21/error-tracker.svg?branch=master\n    :target: https://travis-ci.org/sonus21/error-tracker\n\n.. image:: https://coveralls.io/repos/github/sonus21/error-tracker/badge.svg?color=dark-green\n    :target: https://coveralls.io/github/sonus21/error-tracker\n\nIntroduction\n------------\nErrorTracker is a batteries-included app and extensions for python app, that can track errors, send notification, mask sensitive data and capture frames data.\n\nIt plays nicely with `Django <https://www.djangoproject.com/>`_ and `Flask <http://flask.pocoo.org/>`_\n\nSimple to use  extension that lets you add error recording interfaces to Python applications.\nIt's implemented in such a way that the developer has total control of the resulting application.\n\nOut-of-the-box, Error Tracker plays nicely with various ORM's, including\n\n- `SQLAlchemy <http://www.sqlalchemy.org/>`_,\n- `MongoEngine <http://mongoengine.org/>`_,\n- `Django ORM <https://tutorial.djangogirls.org/en/django_orm/>`_\n\n\nIt also boasts a simple Model management interface.\n\nThe biggest feature of ErrorTracker is flexibility. To start off with you can create a very simple application in no time,\nwith exception monitor enabled, but then you can go further and customize different aspects.\n\nErrorTracker is an active project, well-tested and production ready.\n\nInstallation\n------------\nTo install ErrorTracker, simply::\n\n    pip install error-tracker\n\n\nFeatures\n--------\n- Sensitive data( like *password*, *secret* ) Masking\n- Record all the frames ( frame data are stored in JSON format so that it can be analyzed later)\n- Unique URL generation\n- Number of times the exception occurred and first/last time of exception\n- Sending notifications with exception details\n- Record different types of exception like 500 or 404 etc\n- Raise or update ticket in Jira/Bugzilla etc by ticketing interface.\n\nUsage\n-----\n\nFlask App configuration\n=======================\n\n.. code::\n\n    ...\n    APP_ERROR_SEND_EMAIL = True\n    APP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\n    APP_ERROR_SUBJECT_PREFIX = \"Server Error\"\n    APP_ERROR_EMAIL_SENDER = 'user@example.com'\n\n\n\napp.py\n\n.. code::\n\n    from flask import Flask\n    from flask_mail import Mail\n    import settings\n    from error_tracker import AppErrorTracker, NotificationMixin\n    from flask_sqlalchemy import SQLAlchemy\n    ...\n    app = Flask(__name__)\n    app.config.from_object(settings)\n    db = SQLAlchemy(app)\n    class Notifier(Mail, NotificationMixin):\n        def notify(self, request, exception,\n                   email_subject=None,\n                   email_body=None,\n                   from_email=None,\n                   recipient_list=None):\n            message = Message(email_subject, recipient_list, email_body, sender=from_email)\n            self.send(message)\n    mailer = Notifier(app=app)\n    error_tracker = AppErrorTracker(app=app, db=db, notifier=mailer)\n\n    ....\n\n    ....\n    # Record exception when 404 error code is raised\n    @app.errorhandler(403)\n    def error_403(e):\n        error_tracker.capture_exception()\n        # any custom logic\n\n    # Record error using decorator\n    @app.errorhandler(500)\n    @error_tracker.track_exception\n    def error_500(e):\n        # some custom logic\n    ....\n\n\nDjango App Usage\n================\n\nWe need to update settings.py file as\n\n-  Add app to installed apps list\n-  Add Middleware for exception tracking. This should be added at the end so that it can process exception 1st in the middleware call stack.\n-  Other configs related to notification\n\nSample Code\n\n\n.. code::\n\n    ...\n    APP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\n    APP_ERROR_SUBJECT_PREFIX = \"Server Error\"\n    APP_ERROR_EMAIL_SENDER = 'user@example.com'\n\n    INSTALLED_APPS = [\n        ...\n        'error_tracker.DjangoErrorTracker'\n    ]\n    MIDDLEWARE = [\n        ...\n        'error_tracker.django.middleware.ExceptionTrackerMiddleWare'\n    ]\n\n\nDocumentations\n--------------\nThis has got extensive document browse at https://error-tracker.readthedocs.io/en/latest/\n\nAll docs are in `docs/source`\n\nAnd if you want to preview any *.rst* snippets that you may want to contribute, go to `http://rst.ninjs.org/ <http://rst.ninjs.org/>`_.\n\n\nExamples\n--------\nSeveral usage examples are included in the */tests* folder. Please feel free to add your own examples, or improve\non some of the existing ones, and then submit them via GitHub as a *pull-request*.\n\nYou can see some of these examples in action at https://github.com/sonus21/error-tracker/tree/master/examples\nTo run the examples on your local environment, one at a time, do something like::\n\n    cd error-tracker/examples\n\n\nDjango::\n\n     cd error-tracker/examples\n     cd DjangoSample\n     python manage.py runserver\n\nFlask::\n\n      cd flask-sample\n      python app.py\n\n\nTests\n-----\nTo run the tests, from the project directory, simply::\n\n    pip install -r requirements-dev.txt\n    bash tests/run-tests.sh\n\nYou should see output similar to::\n\n    .............................................\n    ----------------------------------------------------------------------\n    Ran 31 tests in 1.144s\n\n    OK\n\n\nContribution\n-------------\nYou're most welcome to raise pull request or fixes.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sonus21/error-tracker/", "keywords": "Flask,error-tracker,exception-tracking,exception-monitoring,Django", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "error-tracker", "package_url": "https://pypi.org/project/error-tracker/", "platform": "any", "project_url": "https://pypi.org/project/error-tracker/", "project_urls": {"Homepage": "https://github.com/sonus21/error-tracker/"}, "release_url": "https://pypi.org/project/error-tracker/1.1.5/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Simple and Extensible Error Monitoring/Tracking framework for Python", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Full featured error tracking module for Python apps supports Flask and Django</strong></p>\n<a href=\"https://pypi.org/project/error-tracker\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/error-tracker.svg?color=dark-green\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34964d3cdacef4f1942d7f6e567904c0f28258fc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6572726f722d747261636b65722e7376673f636f6c6f723d6461726b2d677265656e\"></a>\n<a href=\"https://pypi.org/project/error-tracker\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/error-tracker.svg?color=dark-green\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8469c7b16f5ff729af864947868541a7f4769d32/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6572726f722d747261636b65722e7376673f636f6c6f723d6461726b2d677265656e\"></a>\n<a href=\"https://github.com/sonus21/error-tracker/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/sonus21/error-tracker.svg?color=dark-green\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89bb14a0416a02ef554890813a1a0ceeffcc3aa9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f736f6e757332312f6572726f722d747261636b65722e7376673f636f6c6f723d6461726b2d677265656e\"></a>\n<a href=\"https://travis-ci.org/sonus21/error-tracker\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sonus21/error-tracker.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6dc0612580ff37194e7eee026c7592744660933/68747470733a2f2f7472617669732d63692e6f72672f736f6e757332312f6572726f722d747261636b65722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/sonus21/error-tracker\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/sonus21/error-tracker/badge.svg?color=dark-green\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d22b8e5fec9cdf205362955a00a17b0b9f10ebbb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f736f6e757332312f6572726f722d747261636b65722f62616467652e7376673f636f6c6f723d6461726b2d677265656e\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>ErrorTracker is a batteries-included app and extensions for python app, that can track errors, send notification, mask sensitive data and capture frames data.</p>\n<p>It plays nicely with <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> and <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a></p>\n<p>Simple to use  extension that lets you add error recording interfaces to Python applications.\nIt\u2019s implemented in such a way that the developer has total control of the resulting application.</p>\n<p>Out-of-the-box, Error Tracker plays nicely with various ORM\u2019s, including</p>\n<ul>\n<li><a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a>,</li>\n<li><a href=\"http://mongoengine.org/\" rel=\"nofollow\">MongoEngine</a>,</li>\n<li><a href=\"https://tutorial.djangogirls.org/en/django_orm/\" rel=\"nofollow\">Django ORM</a></li>\n</ul>\n<p>It also boasts a simple Model management interface.</p>\n<p>The biggest feature of ErrorTracker is flexibility. To start off with you can create a very simple application in no time,\nwith exception monitor enabled, but then you can go further and customize different aspects.</p>\n<p>ErrorTracker is an active project, well-tested and production ready.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install ErrorTracker, simply:</p>\n<pre>pip install error-tracker\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Sensitive data( like <em>password</em>, <em>secret</em> ) Masking</li>\n<li>Record all the frames ( frame data are stored in JSON format so that it can be analyzed later)</li>\n<li>Unique URL generation</li>\n<li>Number of times the exception occurred and first/last time of exception</li>\n<li>Sending notifications with exception details</li>\n<li>Record different types of exception like 500 or 404 etc</li>\n<li>Raise or update ticket in Jira/Bugzilla etc by ticketing interface.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"flask-app-configuration\">\n<h3>Flask App configuration</h3>\n<pre>...\nAPP_ERROR_SEND_EMAIL = True\nAPP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\nAPP_ERROR_SUBJECT_PREFIX = \"Server Error\"\nAPP_ERROR_EMAIL_SENDER = 'user@example.com'\n</pre>\n<p>app.py</p>\n<pre>from flask import Flask\nfrom flask_mail import Mail\nimport settings\nfrom error_tracker import AppErrorTracker, NotificationMixin\nfrom flask_sqlalchemy import SQLAlchemy\n...\napp = Flask(__name__)\napp.config.from_object(settings)\ndb = SQLAlchemy(app)\nclass Notifier(Mail, NotificationMixin):\n    def notify(self, request, exception,\n               email_subject=None,\n               email_body=None,\n               from_email=None,\n               recipient_list=None):\n        message = Message(email_subject, recipient_list, email_body, sender=from_email)\n        self.send(message)\nmailer = Notifier(app=app)\nerror_tracker = AppErrorTracker(app=app, db=db, notifier=mailer)\n\n....\n\n....\n# Record exception when 404 error code is raised\n@app.errorhandler(403)\ndef error_403(e):\n    error_tracker.capture_exception()\n    # any custom logic\n\n# Record error using decorator\n@app.errorhandler(500)\n@error_tracker.track_exception\ndef error_500(e):\n    # some custom logic\n....\n</pre>\n</div>\n<div id=\"django-app-usage\">\n<h3>Django App Usage</h3>\n<p>We need to update settings.py file as</p>\n<ul>\n<li>Add app to installed apps list</li>\n<li>Add Middleware for exception tracking. This should be added at the end so that it can process exception 1st in the middleware call stack.</li>\n<li>Other configs related to notification</li>\n</ul>\n<p>Sample Code</p>\n<pre>...\nAPP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\nAPP_ERROR_SUBJECT_PREFIX = \"Server Error\"\nAPP_ERROR_EMAIL_SENDER = 'user@example.com'\n\nINSTALLED_APPS = [\n    ...\n    'error_tracker.DjangoErrorTracker'\n]\nMIDDLEWARE = [\n    ...\n    'error_tracker.django.middleware.ExceptionTrackerMiddleWare'\n]\n</pre>\n</div>\n</div>\n<div id=\"documentations\">\n<h2>Documentations</h2>\n<p>This has got extensive document browse at <a href=\"https://error-tracker.readthedocs.io/en/latest/\" rel=\"nofollow\">https://error-tracker.readthedocs.io/en/latest/</a></p>\n<p>All docs are in <cite>docs/source</cite></p>\n<p>And if you want to preview any <em>.rst</em> snippets that you may want to contribute, go to <a href=\"http://rst.ninjs.org/\" rel=\"nofollow\">http://rst.ninjs.org/</a>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Several usage examples are included in the <em>/tests</em> folder. Please feel free to add your own examples, or improve\non some of the existing ones, and then submit them via GitHub as a <em>pull-request</em>.</p>\n<p>You can see some of these examples in action at <a href=\"https://github.com/sonus21/error-tracker/tree/master/examples\" rel=\"nofollow\">https://github.com/sonus21/error-tracker/tree/master/examples</a>\nTo run the examples on your local environment, one at a time, do something like:</p>\n<pre>cd error-tracker/examples\n</pre>\n<p>Django:</p>\n<pre>cd error-tracker/examples\ncd DjangoSample\npython manage.py runserver\n</pre>\n<p>Flask:</p>\n<pre>cd flask-sample\npython app.py\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the tests, from the project directory, simply:</p>\n<pre>pip install -r requirements-dev.txt\nbash tests/run-tests.sh\n</pre>\n<p>You should see output similar to:</p>\n<pre>.............................................\n----------------------------------------------------------------------\nRan 31 tests in 1.144s\n\nOK\n</pre>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>You\u2019re most welcome to raise pull request or fixes.</p>\n</div>\n\n          </div>"}, "last_serial": 6537018, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "f2e4ad38f74db66d72920aeedff71290", "sha256": "4b3fe0cf9024b1aec4e845c80783272ee922eac7470da18a2174b073380d56ca"}, "downloads": -1, "filename": "error-tracker-1.0.tar.gz", "has_sig": false, "md5_digest": "f2e4ad38f74db66d72920aeedff71290", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22555, "upload_time": "2019-12-01T07:50:01", "upload_time_iso_8601": "2019-12-01T07:50:01.681841Z", "url": "https://files.pythonhosted.org/packages/b7/7a/48a8d2d046ebcfdfe246945e20b1481264e22d72ea5963937e0cb18d8c08/error-tracker-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6c88162fc0cf6ec1ede2e09145cf136f", "sha256": "9a0c710d191a247b69645c53195332d1aeec0ff945c0b4cc687ba7937431cbee"}, "downloads": -1, "filename": "error-tracker-1.1.tar.gz", "has_sig": false, "md5_digest": "6c88162fc0cf6ec1ede2e09145cf136f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22593, "upload_time": "2019-12-16T13:41:16", "upload_time_iso_8601": "2019-12-16T13:41:16.485402Z", "url": "https://files.pythonhosted.org/packages/28/bc/bc24ec7fe1114b37c191cfc39876ae821770e8d67293123c3cdf10369dd8/error-tracker-1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "6d12bf8157ebc901e0f6510db7a34829", "sha256": "c36a6c9bf80c223e6ce80edacf6c33bd7d31fe6b2a1328c4b42c2ad8bdbf0bd5"}, "downloads": -1, "filename": "error-tracker-1.1.2.tar.gz", "has_sig": false, "md5_digest": "6d12bf8157ebc901e0f6510db7a34829", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22639, "upload_time": "2019-12-18T12:33:51", "upload_time_iso_8601": "2019-12-18T12:33:51.042612Z", "url": "https://files.pythonhosted.org/packages/34/f5/806e1456d5e5770883c2c79c07dce790ec92cefb63446a0956bc5aab1de8/error-tracker-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "3495e99704521dd02fed9b3787fad2ef", "sha256": "5a1eb9833a2139c8ce8ce9bcf0fcf9d4d805d5f0317f91c02233ff13d2b50a8f"}, "downloads": -1, "filename": "error-tracker-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3495e99704521dd02fed9b3787fad2ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22204, "upload_time": "2020-01-14T10:36:10", "upload_time_iso_8601": "2020-01-14T10:36:10.293022Z", "url": "https://files.pythonhosted.org/packages/f4/85/bca80d7c62c47c36322a82d1f72e1832825718a009d47a66ef899a10a3e3/error-tracker-1.1.3.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "8e1aaf251552be89152ba0f3edf02e7e", "sha256": "811cdc2f815ec813100f4f12cbe30021071d2ef0c7dce44d42637dfc1bf32d00"}, "downloads": -1, "filename": "error-tracker-1.1.5.tar.gz", "has_sig": false, "md5_digest": "8e1aaf251552be89152ba0f3edf02e7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22686, "upload_time": "2020-01-29T09:51:15", "upload_time_iso_8601": "2020-01-29T09:51:15.286778Z", "url": "https://files.pythonhosted.org/packages/b5/8b/e297654a90d3dacf7901e05f9964fbbdeda65c5b985f0e7c2f4d50c3985a/error-tracker-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e1aaf251552be89152ba0f3edf02e7e", "sha256": "811cdc2f815ec813100f4f12cbe30021071d2ef0c7dce44d42637dfc1bf32d00"}, "downloads": -1, "filename": "error-tracker-1.1.5.tar.gz", "has_sig": false, "md5_digest": "8e1aaf251552be89152ba0f3edf02e7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 22686, "upload_time": "2020-01-29T09:51:15", "upload_time_iso_8601": "2020-01-29T09:51:15.286778Z", "url": "https://files.pythonhosted.org/packages/b5/8b/e297654a90d3dacf7901e05f9964fbbdeda65c5b985f0e7c2f4d50c3985a/error-tracker-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:44 2020"}