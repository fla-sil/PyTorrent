{"info": {"author": "Herminio Vazquez", "author_email": "canimus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Text Processing", "Topic :: Utilities"], "description": "# AlphaReader\n\n[![canimus](https://circleci.com/gh/canimus/alphareader.svg?style=svg)](https://circleci.com/gh/canimus/alphareader)\n\nAfter several attempts to try the `csv` package or `pandas` for reading large files with custom delimiters, I ended up writting a little program that does the job without complaints.\n\n__AlphaReader__ is a high performant, pure python, 15-line of code library, that reads chunks of bytes from your files, and retrieve line by line, the content of it.\n\nThe inspiration of this library came by having to extract data from a MS-SQL Server database, and having to deal with the `CP1252` encoding. By default AlphaReader takes this encoding as it was useful in our use case.\n\nIt works also with `HDFS` through the `pyarrow` library. But is not a depedency.\n\n## CSVs\n```python\n# !cat file.csv\n# 1,John,Doe,2010\n# 2,Mary,Smith,2011\n# 3,Peter,Jones,2012\n\n> reader = AlphaReader(open('file.csv', 'rb'), encoding='cp1252', terminator=10, delimiter=44)\n> next(reader)\n> ['1','John','Doe','2010']\n```\n\n## TSVs\n```python\n# !cat file.tsv\n# 1    John    Doe    2010\n# 2    Mary    Smith  2011\n# 3    Peter   Jones  2012\n\n> reader = AlphaReader(open('file.tsv', 'rb'), encoding='cp1252', terminator=10, delimiter=9)\n> next(reader)\n> ['1','John','Doe','2010']\n```\n\n## XSVs\n```python\n# !cat file.tsv\n# 1\u00c2\u00a6John\u00c2\u00a6Doe\u00c2\u00a62010\n# 2\u00c2\u00a6Mary\u00c2\u00a6Smith\u00c2\u00a62011\n# 3\u00c2\u00a6Peter\u00c2\u00a6Jones\u00c2\u00a62012\n\n> ord('\u00c2\u00a6')\n> 166\n> chr(166)\n> '\u00c2\u00a6'\n> reader = AlphaReader(open('file.tsv', 'rb'), encoding='cp1252', terminator=10, delimiter=166)\n> next(reader)\n> ['1','John','Doe','2010']\n```\n\n## HDFS\n```python\n# !hdfs dfs -cat /raw/tsv/file.tsv\n# 1    John    Doe    2010\n# 2    Mary    Smith  2011\n# 3    Peter   Jones  2012\n\n> import pyarrow as pa\n> fs = pa.hdfs.connect()\n> reader = AlphaReader(fs.open('/raw/tsv/file.tsv', 'rb'), encoding='cp1252', terminator=10, delimiter=9)\n> next(reader)\n> ['1','John','Doe','2010']\n```\n\n## Transformations\n```python\n# !cat file.csv\n# 1,2,3\n# 10,20,30\n# 100,200,300\n\n> fn = lambda x: int(x)\n> reader = AlphaReader(open('/raw/tsv/file.tsv', 'rb'), encoding='cp1252', terminator=10, delimiter=44, fn_transform=fn)\n> next(reader)\n> [1,2,3]\n> next(reader)\n> [10,20,30]\n```\n\n## Chain Transformations\n```python\n# !cat file.csv\n# 1,2,3\n# 10,20,30\n# 100,200,300\n\n> fn_1 = lambda x: x+1\n> fn_2 = lambda x: x*10\n> reader = AlphaReader(open('/raw/tsv/file.tsv', 'rb'), encoding='cp1252', terminator=10, delimiter=44, fn_transform=[int, fn_1, fn_2])\n> next(reader)\n> [20,30,40]\n> next(reader)\n> [110,210,310]\n```\n\n## Caution\n```python\n> reader = AlphaReader(open('large_file.xsv', 'rb'), encoding='cp1252', terminator=172, delimiter=173)\n> records = list(reader) # Avoid this as it will load all file in memory\n```\n\n## Limitations\n- No support for `multi-byte` delimiters\n- Relatively slower performance than `csv` library. Use `csv` and dialects when your files have `\\r\\n` terminators\n- Transformations are per row, perhaps vectorization could aid performance\n\n## Performance\n- 24MB file loaded with `list(AlphaReader(file_handle))`\n```bash\ntests/test_profile.py::test_alphareader_with_encoding\n--------------------------------------------------------------------------------- live log call \nINFO     root:test_profile.py:22          252343 function calls in 0.386 seconds\n\n    Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n   119605    0.039    0.000    0.386    0.000 .\\alphareader\\__init__.py:39(AlphaReader)\n   122228    0.266    0.000    0.266    0.000 {method 'split' of 'str' objects}\n     2625    0.005    0.000    0.054    0.000 {method 'decode' of 'bytes' objects}\n     2624    0.001    0.000    0.049    0.000 .\\Python-3.7.4\\lib\\encodings\\cp1252.py:14(decode)\n     2624    0.048    0.000    0.048    0.000 {built-in method _codecs.charmap_decode}\n     2625    0.027    0.000    0.027    0.000 {method 'read' of '_io.BufferedReader' objects}\n        1    0.000    0.000    0.000    0.000 .\\__init__.py:5(_validate)\n        1    0.000    0.000    0.000    0.000 {built-in method _codecs.lookup}\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/canimus/alphareader", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "alphareader", "package_url": "https://pypi.org/project/alphareader/", "platform": "", "project_url": "https://pypi.org/project/alphareader/", "project_urls": {"Homepage": "https://github.com/canimus/alphareader"}, "release_url": "https://pypi.org/project/alphareader/0.0.7/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A reader for large files with custom delimiters and encodings", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AlphaReader</h1>\n<p><a href=\"https://circleci.com/gh/canimus/alphareader\" rel=\"nofollow\"><img alt=\"canimus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/953e5823b91ccea05cfbcb17d80cbdf27a6e93bc/68747470733a2f2f636972636c6563692e636f6d2f67682f63616e696d75732f616c7068617265616465722e7376673f7374796c653d737667\"></a></p>\n<p>After several attempts to try the <code>csv</code> package or <code>pandas</code> for reading large files with custom delimiters, I ended up writting a little program that does the job without complaints.</p>\n<p><strong>AlphaReader</strong> is a high performant, pure python, 15-line of code library, that reads chunks of bytes from your files, and retrieve line by line, the content of it.</p>\n<p>The inspiration of this library came by having to extract data from a MS-SQL Server database, and having to deal with the <code>CP1252</code> encoding. By default AlphaReader takes this encoding as it was useful in our use case.</p>\n<p>It works also with <code>HDFS</code> through the <code>pyarrow</code> library. But is not a depedency.</p>\n<h2>CSVs</h2>\n<pre><span class=\"c1\"># !cat file.csv</span>\n<span class=\"c1\"># 1,John,Doe,2010</span>\n<span class=\"c1\"># 2,Mary,Smith,2011</span>\n<span class=\"c1\"># 3,Peter,Jones,2012</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'John'</span><span class=\"p\">,</span><span class=\"s1\">'Doe'</span><span class=\"p\">,</span><span class=\"s1\">'2010'</span><span class=\"p\">]</span>\n</pre>\n<h2>TSVs</h2>\n<pre><span class=\"c1\"># !cat file.tsv</span>\n<span class=\"c1\"># 1    John    Doe    2010</span>\n<span class=\"c1\"># 2    Mary    Smith  2011</span>\n<span class=\"c1\"># 3    Peter   Jones  2012</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file.tsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'John'</span><span class=\"p\">,</span><span class=\"s1\">'Doe'</span><span class=\"p\">,</span><span class=\"s1\">'2010'</span><span class=\"p\">]</span>\n</pre>\n<h2>XSVs</h2>\n<pre><span class=\"c1\"># !cat file.tsv</span>\n<span class=\"c1\"># 1\u00c2\u00a6John\u00c2\u00a6Doe\u00c2\u00a62010</span>\n<span class=\"c1\"># 2\u00c2\u00a6Mary\u00c2\u00a6Smith\u00c2\u00a62011</span>\n<span class=\"c1\"># 3\u00c2\u00a6Peter\u00c2\u00a6Jones\u00c2\u00a62012</span>\n\n<span class=\"o\">&gt;</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">'\u00c2\u00a6'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"mi\">166</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"mi\">166</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"s1\">'\u00c2\u00a6'</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'file.tsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">166</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'John'</span><span class=\"p\">,</span><span class=\"s1\">'Doe'</span><span class=\"p\">,</span><span class=\"s1\">'2010'</span><span class=\"p\">]</span>\n</pre>\n<h2>HDFS</h2>\n<pre><span class=\"c1\"># !hdfs dfs -cat /raw/tsv/file.tsv</span>\n<span class=\"c1\"># 1    John    Doe    2010</span>\n<span class=\"c1\"># 2    Mary    Smith  2011</span>\n<span class=\"c1\"># 3    Peter   Jones  2012</span>\n\n<span class=\"o\">&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyarrow</span> <span class=\"k\">as</span> <span class=\"nn\">pa</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">pa</span><span class=\"o\">.</span><span class=\"n\">hdfs</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'/raw/tsv/file.tsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'John'</span><span class=\"p\">,</span><span class=\"s1\">'Doe'</span><span class=\"p\">,</span><span class=\"s1\">'2010'</span><span class=\"p\">]</span>\n</pre>\n<h2>Transformations</h2>\n<pre><span class=\"c1\"># !cat file.csv</span>\n<span class=\"c1\"># 1,2,3</span>\n<span class=\"c1\"># 10,20,30</span>\n<span class=\"c1\"># 100,200,300</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/raw/tsv/file.tsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"n\">fn_transform</span><span class=\"o\">=</span><span class=\"n\">fn</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">]</span>\n</pre>\n<h2>Chain Transformations</h2>\n<pre><span class=\"c1\"># !cat file.csv</span>\n<span class=\"c1\"># 1,2,3</span>\n<span class=\"c1\"># 10,20,30</span>\n<span class=\"c1\"># 100,200,300</span>\n\n<span class=\"o\">&gt;</span> <span class=\"n\">fn_1</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">fn_2</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"mi\">10</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/raw/tsv/file.tsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"n\">fn_transform</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">fn_1</span><span class=\"p\">,</span> <span class=\"n\">fn_2</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"p\">[</span><span class=\"mi\">110</span><span class=\"p\">,</span><span class=\"mi\">210</span><span class=\"p\">,</span><span class=\"mi\">310</span><span class=\"p\">]</span>\n</pre>\n<h2>Caution</h2>\n<pre><span class=\"o\">&gt;</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">AlphaReader</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'large_file.xsv'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">),</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span> <span class=\"n\">terminator</span><span class=\"o\">=</span><span class=\"mi\">172</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"mi\">173</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">)</span> <span class=\"c1\"># Avoid this as it will load all file in memory</span>\n</pre>\n<h2>Limitations</h2>\n<ul>\n<li>No support for <code>multi-byte</code> delimiters</li>\n<li>Relatively slower performance than <code>csv</code> library. Use <code>csv</code> and dialects when your files have <code>\\r\\n</code> terminators</li>\n<li>Transformations are per row, perhaps vectorization could aid performance</li>\n</ul>\n<h2>Performance</h2>\n<ul>\n<li>24MB file loaded with <code>list(AlphaReader(file_handle))</code></li>\n</ul>\n<pre>tests/test_profile.py::test_alphareader_with_encoding\n--------------------------------------------------------------------------------- live log call \nINFO     root:test_profile.py:22          <span class=\"m\">252343</span> <span class=\"k\">function</span> calls in <span class=\"m\">0</span>.386 seconds\n\n    Ordered by: cumulative <span class=\"nb\">time</span>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno<span class=\"o\">(</span><span class=\"k\">function</span><span class=\"o\">)</span>\n   <span class=\"m\">119605</span>    <span class=\"m\">0</span>.039    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.386    <span class=\"m\">0</span>.000 .<span class=\"se\">\\a</span>lphareader<span class=\"se\">\\_</span>_init__.py:39<span class=\"o\">(</span>AlphaReader<span class=\"o\">)</span>\n   <span class=\"m\">122228</span>    <span class=\"m\">0</span>.266    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.266    <span class=\"m\">0</span>.000 <span class=\"o\">{</span>method <span class=\"s1\">'split'</span> of <span class=\"s1\">'str'</span> objects<span class=\"o\">}</span>\n     <span class=\"m\">2625</span>    <span class=\"m\">0</span>.005    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.054    <span class=\"m\">0</span>.000 <span class=\"o\">{</span>method <span class=\"s1\">'decode'</span> of <span class=\"s1\">'bytes'</span> objects<span class=\"o\">}</span>\n     <span class=\"m\">2624</span>    <span class=\"m\">0</span>.001    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.049    <span class=\"m\">0</span>.000 .<span class=\"se\">\\P</span>ython-3.7.4<span class=\"se\">\\l</span>ib<span class=\"se\">\\e</span>ncodings<span class=\"se\">\\c</span>p1252.py:14<span class=\"o\">(</span>decode<span class=\"o\">)</span>\n     <span class=\"m\">2624</span>    <span class=\"m\">0</span>.048    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.048    <span class=\"m\">0</span>.000 <span class=\"o\">{</span>built-in method _codecs.charmap_decode<span class=\"o\">}</span>\n     <span class=\"m\">2625</span>    <span class=\"m\">0</span>.027    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.027    <span class=\"m\">0</span>.000 <span class=\"o\">{</span>method <span class=\"s1\">'read'</span> of <span class=\"s1\">'_io.BufferedReader'</span> objects<span class=\"o\">}</span>\n        <span class=\"m\">1</span>    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000 .<span class=\"se\">\\_</span>_init__.py:5<span class=\"o\">(</span>_validate<span class=\"o\">)</span>\n        <span class=\"m\">1</span>    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000    <span class=\"m\">0</span>.000 <span class=\"o\">{</span>built-in method _codecs.lookup<span class=\"o\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6927698, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "68560c6f480f0b602ed7b757eb78760b", "sha256": "3780ef1cc9289d8f4bdd0247159f8ced0bdb2f646d44973b679d78b03c2e0490"}, "downloads": -1, "filename": "alphareader-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "68560c6f480f0b602ed7b757eb78760b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15190, "upload_time": "2020-03-26T15:03:06", "upload_time_iso_8601": "2020-03-26T15:03:06.281194Z", "url": "https://files.pythonhosted.org/packages/0f/fc/63454dcd1cad8fcfb1b5c69451aa5dc9acb29473f04ee431c627d041d8a5/alphareader-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0048bfe292c258ccaa0bb7d6a6b6e45", "sha256": "e35cae28fb44c14eeb1c03ab8464a02087141682a7c05daf25a0407db52de99a"}, "downloads": -1, "filename": "alphareader-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d0048bfe292c258ccaa0bb7d6a6b6e45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3262, "upload_time": "2020-03-26T15:03:08", "upload_time_iso_8601": "2020-03-26T15:03:08.474785Z", "url": "https://files.pythonhosted.org/packages/f3/93/94c44998073019c4043ee37b0c4f7ae05fb6f0d64b40605b959301b1b4d5/alphareader-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "fb09effef351c57a8238c24d4a431ff4", "sha256": "1265457f680a448204213d613ed830b8ae688c368ced8fcd280fa8a17a21a804"}, "downloads": -1, "filename": "alphareader-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fb09effef351c57a8238c24d4a431ff4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16188, "upload_time": "2020-03-26T15:16:31", "upload_time_iso_8601": "2020-03-26T15:16:31.402789Z", "url": "https://files.pythonhosted.org/packages/34/f0/89e62ec46966c154576c18016d16b55acd218e7d33bd4e4a6d4a12da963e/alphareader-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c5d97dc650db813a8a28550fd0ad333f", "sha256": "c05aa1ba0f78fa2deead14bd7d10bbd63dd5ea1ef3705f260db3bda0a2dfb00a"}, "downloads": -1, "filename": "alphareader-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c5d97dc650db813a8a28550fd0ad333f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3254, "upload_time": "2020-03-26T15:16:32", "upload_time_iso_8601": "2020-03-26T15:16:32.673171Z", "url": "https://files.pythonhosted.org/packages/a2/34/34077d6ad8a042fe5bec2465518d72c62ef4eccbb5864297bb5d2f71f5d3/alphareader-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "70212f66728322faeb2cf80a30f7a418", "sha256": "0f7c27a0f67e13d11d90e6f26c0bb58a29370dd3172edb80f790b7fa567a57cd"}, "downloads": -1, "filename": "alphareader-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "70212f66728322faeb2cf80a30f7a418", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15195, "upload_time": "2020-03-26T22:55:19", "upload_time_iso_8601": "2020-03-26T22:55:19.853177Z", "url": "https://files.pythonhosted.org/packages/76/d3/69b71fe6a80437d9ec4bdc125723b219c8fb3e3fb80446beb48209da5629/alphareader-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "571408e4154aa421468233e690867255", "sha256": "a55494e1aaaf774578cd1103be90fabdd9bad6d27cc0c9626f564caff9fdcdfb"}, "downloads": -1, "filename": "alphareader-0.0.3.tar.gz", "has_sig": false, "md5_digest": "571408e4154aa421468233e690867255", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3395, "upload_time": "2020-03-26T22:55:21", "upload_time_iso_8601": "2020-03-26T22:55:21.100888Z", "url": "https://files.pythonhosted.org/packages/c4/44/2f9549f72aa053861e2e6c284817ae801eeec5872d943e2c133171bad005/alphareader-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e532ee71b9422d179fab3f6a5911b5a0", "sha256": "3885f765cf00f83036877c5d29451f465fbd289ff2f3bdf46b52c70d8b2f6a23"}, "downloads": -1, "filename": "alphareader-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e532ee71b9422d179fab3f6a5911b5a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15662, "upload_time": "2020-03-27T10:45:22", "upload_time_iso_8601": "2020-03-27T10:45:22.334782Z", "url": "https://files.pythonhosted.org/packages/aa/2d/27f2ec2db0e26ae5663f88a41dbdb190161fa37671de61c008ef341637ea/alphareader-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df65c3b976030be5c924b1ce75f22136", "sha256": "45477ad9c87aca8b11998f241dce97c2a82dbd1b08b5e2baf97bd15e04555f29"}, "downloads": -1, "filename": "alphareader-0.0.4.tar.gz", "has_sig": false, "md5_digest": "df65c3b976030be5c924b1ce75f22136", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3930, "upload_time": "2020-03-27T10:45:23", "upload_time_iso_8601": "2020-03-27T10:45:23.347226Z", "url": "https://files.pythonhosted.org/packages/c4/3c/add0b1929887f74ac24110a62636869436b1fd9e44d3fc6fcb3e1574f969/alphareader-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ab6e83df0a15792a3d546963bfa268b2", "sha256": "4b7933026950aac97249e59b6113d83c0423b447082735fd456272da74b783a4"}, "downloads": -1, "filename": "alphareader-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6e83df0a15792a3d546963bfa268b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15915, "upload_time": "2020-03-29T23:56:20", "upload_time_iso_8601": "2020-03-29T23:56:20.751964Z", "url": "https://files.pythonhosted.org/packages/a6/49/488c612afedb0e6447eb066a9510f4472de3b9509e428d65f986c683b66c/alphareader-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8eeee7fce7c69534c18c6bc6dd7c7897", "sha256": "34f3f77631a627efc65c71109213ef02cfce24e2318eb10597f5195685d93ec0"}, "downloads": -1, "filename": "alphareader-0.0.5.tar.gz", "has_sig": false, "md5_digest": "8eeee7fce7c69534c18c6bc6dd7c7897", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4224, "upload_time": "2020-03-29T23:56:21", "upload_time_iso_8601": "2020-03-29T23:56:21.998039Z", "url": "https://files.pythonhosted.org/packages/02/e6/354185cec7144fad07f3a02eaf8e2d28e20677b4151c4d37ffe64857ba31/alphareader-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "a21fc48a71d5be5810102bc0b0b32a59", "sha256": "ff47e7544f945b3849581cd6066e8ecb7f3871db0f7131c439b413cb39cd618c"}, "downloads": -1, "filename": "alphareader-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "a21fc48a71d5be5810102bc0b0b32a59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15915, "upload_time": "2020-03-30T00:05:02", "upload_time_iso_8601": "2020-03-30T00:05:02.941627Z", "url": "https://files.pythonhosted.org/packages/c7/31/2c32d7532cb92e695600ac113cf573865060492013975f7af336b5f5a8be/alphareader-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f401fcbb6d7a33f2d5cacfa9dfe1dac9", "sha256": "9279794e83c6c26dd578adaf6cde340668a23394e68c0280e5be8ac0925a92d4"}, "downloads": -1, "filename": "alphareader-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f401fcbb6d7a33f2d5cacfa9dfe1dac9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4224, "upload_time": "2020-03-30T00:05:04", "upload_time_iso_8601": "2020-03-30T00:05:04.256643Z", "url": "https://files.pythonhosted.org/packages/41/0a/b87898f0c80669465eeb21048217a2df462aaf18949a7b972e2eeec5d732/alphareader-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "c7075f4108e74264f1a5c95a9ed3a7c6", "sha256": "26448aa8bcf46eebff4c9d720893796fdd404bd045b27d4379782eadfbee9e00"}, "downloads": -1, "filename": "alphareader-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c7075f4108e74264f1a5c95a9ed3a7c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15921, "upload_time": "2020-04-01T13:34:29", "upload_time_iso_8601": "2020-04-01T13:34:29.919095Z", "url": "https://files.pythonhosted.org/packages/82/b5/fc0331ff678a662922451408cabd5ad1d741dfa99fd29bd9c2df4c5e0811/alphareader-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92a9b3a8460b4f2bcfabe930dfb23c9a", "sha256": "60fbf96ba313a2492ad8aee83815c9fee9c700e422bf951a602dfc073a1cb726"}, "downloads": -1, "filename": "alphareader-0.0.7.tar.gz", "has_sig": false, "md5_digest": "92a9b3a8460b4f2bcfabe930dfb23c9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4231, "upload_time": "2020-04-01T13:34:31", "upload_time_iso_8601": "2020-04-01T13:34:31.147950Z", "url": "https://files.pythonhosted.org/packages/e3/62/c94a65e19dae4522e83d4c622b039d2a7f45fcbf240f0762fa63744dcdae/alphareader-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7075f4108e74264f1a5c95a9ed3a7c6", "sha256": "26448aa8bcf46eebff4c9d720893796fdd404bd045b27d4379782eadfbee9e00"}, "downloads": -1, "filename": "alphareader-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c7075f4108e74264f1a5c95a9ed3a7c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15921, "upload_time": "2020-04-01T13:34:29", "upload_time_iso_8601": "2020-04-01T13:34:29.919095Z", "url": "https://files.pythonhosted.org/packages/82/b5/fc0331ff678a662922451408cabd5ad1d741dfa99fd29bd9c2df4c5e0811/alphareader-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92a9b3a8460b4f2bcfabe930dfb23c9a", "sha256": "60fbf96ba313a2492ad8aee83815c9fee9c700e422bf951a602dfc073a1cb726"}, "downloads": -1, "filename": "alphareader-0.0.7.tar.gz", "has_sig": false, "md5_digest": "92a9b3a8460b4f2bcfabe930dfb23c9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4231, "upload_time": "2020-04-01T13:34:31", "upload_time_iso_8601": "2020-04-01T13:34:31.147950Z", "url": "https://files.pythonhosted.org/packages/e3/62/c94a65e19dae4522e83d4c622b039d2a7f45fcbf240f0762fa63744dcdae/alphareader-0.0.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:17 2020"}