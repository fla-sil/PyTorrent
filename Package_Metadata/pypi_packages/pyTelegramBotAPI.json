{"info": {"author": "eternnoir", "author_email": "eternnoir@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 3"], "description": "# <p align=\"center\">pyTelegramBotAPI\n\n<p align=\"center\">A simple, but extensible Python implementation for the <a href=\"https://core.telegram.org/bots/api\">Telegram Bot API</a>.\n\n[![PyPi Package Version](https://img.shields.io/pypi/v/pyTelegramBotAPI.svg)](https://pypi.python.org/pypi/pyTelegramBotAPI)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/pyTelegramBotAPI.svg)](https://pypi.python.org/pypi/pyTelegramBotAPI)\n[![Build Status](https://travis-ci.org/eternnoir/pyTelegramBotAPI.svg?branch=master)](https://travis-ci.org/eternnoir/pyTelegramBotAPI)\n\n  * [Getting started.](#getting-started)\n  * [Writing your first bot](#writing-your-first-bot)\n    * [Prerequisites](#prerequisites)\n    * [A simple echo bot](#a-simple-echo-bot)\n  * [General API Documentation](#general-api-documentation)\n    * [Types](#types)\n    * [Methods](#methods)\n    * [General use of the API](#general-use-of-the-api)\n      * [Message handlers](#message-handlers)\n      * [Callback Query handlers](#callback-query-handler)\n      * [Middleware handlers](#middleware-handler)\n      * [TeleBot](#telebot)\n      * [Reply markup](#reply-markup)\n      * [Inline Mode](#inline-mode)\n  * [Advanced use of the API](#advanced-use-of-the-api)\n    * [Asynchronous delivery of messages](#asynchronous-delivery-of-messages)\n    * [Sending large text messages](#sending-large-text-messages)\n    * [Controlling the amount of Threads used by TeleBot](#controlling-the-amount-of-threads-used-by-telebot)\n    * [The listener mechanism](#the-listener-mechanism)\n    * [Using web hooks](#using-web-hooks)\n    * [Logging](#logging)\n    * [Proxy](#proxy)\n  * [API conformance](#api-conformance)\n  * [Change log](#change-log)\n  * [F.A.Q.](#faq)\n    * [Bot 2.0](#bot-20)\n    * [How can I distinguish a User and a GroupChat in message.chat?](#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat)\n  * [The Telegram Chat Group](#the-telegram-chat-group)\n  * [More examples](#more-examples)\n  * [Bots using this API](#bots-using-this-api)\n\n## Getting started.\n\nThis API is tested with Python 2.6, Python 2.7, Python 3.4, Pypy and Pypy 3.\nThere are two ways to install the library:\n\n* Installation using pip (a Python package manager)*:\n\n```\n$ pip install pyTelegramBotAPI\n```\n* Installation from source (requires git):\n\n```\n$ git clone https://github.com/eternnoir/pyTelegramBotAPI.git\n$ cd pyTelegramBotAPI\n$ python setup.py install\n```\n\nIt is generally recommended to use the first option.\n\n**While the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling `pip install pytelegrambotapi --upgrade`*\n\n## Writing your first bot\n\n### Prerequisites\n\nIt is presumed that you [have obtained an API token with @BotFather](https://core.telegram.org/bots#botfather). We will call this token `TOKEN`.\nFurthermore, you have basic knowledge of the Python programming language and more importantly [the Telegram Bot API](https://core.telegram.org/bots/api).\n\n### A simple echo bot\n\nThe TeleBot class (defined in \\__init__.py) encapsulates all API calls in a single class. It provides functions such as `send_xyz` (`send_message`, `send_document` etc.) and several ways to listen for incoming messages.\n\nCreate a file called `echo_bot.py`.\nThen, open the file and create an instance of the TeleBot class.\n```python\nimport telebot\n\nbot = telebot.TeleBot(\"TOKEN\")\n```\n*Note: Make sure to actually replace TOKEN with your own API token.*\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nLet's define a message handler which handles incoming `/start` and `/help` commands.\n```python\n@bot.message_handler(commands=['start', 'help'])\ndef send_welcome(message):\n\tbot.reply_to(message, \"Howdy, how are you doing?\")\n```\nA function which is decorated by a message handler __can have an arbitrary name, however, it must have only one parameter (the message)__.\n\nLet's add another handler:\n```python\n@bot.message_handler(func=lambda m: True)\ndef echo_all(message):\n\tbot.reply_to(message, message.text)\n```\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\n*Note: all handlers are tested in the order in which they were declared*\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n```python\nbot.polling()\n```\nAlright, that's it! Our source file now looks like this:\n```python\nimport telebot\n\nbot = telebot.TeleBot(\"TOKEN\")\n\n@bot.message_handler(commands=['start', 'help'])\ndef send_welcome(message):\n\tbot.reply_to(message, \"Howdy, how are you doing?\")\n\n@bot.message_handler(func=lambda message: True)\ndef echo_all(message):\n\tbot.reply_to(message, message.text)\n\nbot.polling()\n```\nTo start the bot, simply open up a terminal and enter `python echo_bot.py` to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\n## General API Documentation\n\n### Types\n\nAll types are defined in types.py. They are all completely in line with the [Telegram API's definition of the types](https://core.telegram.org/bots/api#available-types), except for the Message's `from` field, which is renamed to `from_user` (because `from` is a Python reserved token). Thus, attributes such as `message_id` can be accessed directly with `message.message_id`. Note that `message.chat` can be either an instance of `User` or `GroupChat` (see [How can I distinguish a User and a GroupChat in message.chat?](#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat)).\n\nThe Message object also has a `content_type`attribute, which defines the type of the Message. `content_type` can be one of the following strings:\n`text`, `audio`, `document`, `photo`, `sticker`, `video`, `video_note`, `voice`, `location`, `contact`, `new_chat_members`, `left_chat_member`, `new_chat_title`, `new_chat_photo`, `delete_chat_photo`, `group_chat_created`, `supergroup_chat_created`, `channel_chat_created`, `migrate_to_chat_id`, `migrate_from_chat_id`, `pinned_message`.\n\nYou can use some types in one function. Example:\n\n```content_types=[\"text\", \"sticker\", \"pinned_message\", \"photo\", \"audio\"]```\n\n### Methods\n\nAll [API methods](https://core.telegram.org/bots/api#available-methods) are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. `getMe` is renamed to `get_me` and `sendMessage` to `send_message`.\n\n### General use of the API\n\nOutlined below are some general use cases of the API.\n\n#### Message handlers\nA message handler is a function that is decorated with the `message_handler` decorator of a TeleBot instance. Message handlers consist of one or multiple filters.\nEach filter much return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided `bot` is an instance of TeleBot):\n```python\n@bot.message_handler(filters)\ndef function_name(message):\n\tbot.reply_to(message, \"This is a message handler\")\n```\n`function_name` is not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle.\n`filters` is a list of keyword arguments.\nA filter is declared in the following manner: `name=argument`. One handler may have multiple filters.\nTeleBot supports the following filters:\n\n|name|argument(s)|Condition|\n|:---:|---| ---|\n|content_types|list of strings (default `['text']`)|`True` if message.content_type is in the list of strings.|\n|regexp|a regular expression as a string|`True` if `re.search(regexp_arg)` returns `True` and `message.content_type == 'text'` (See [Python Regular Expressions](https://docs.python.org/2/library/re.html))|\n|commands|list of strings|`True` if `message.content_type == 'text'` and `message.text` starts with a command that is in the list of strings.|\n|func|a function (lambda or function reference)|`True` if the lambda or function reference returns `True`\n\nHere are some examples of using the filters and message handlers:\n\n```python\nimport telebot\nbot = telebot.TeleBot(\"TOKEN\")\n\n# Handles all text messages that contains the commands '/start' or '/help'.\n@bot.message_handler(commands=['start', 'help'])\ndef handle_start_help(message):\n\tpass\n\n# Handles all sent documents and audio files\n@bot.message_handler(content_types=['document', 'audio'])\ndef handle_docs_audio(message):\n\tpass\n\n# Handles all text messages that match the regular expression\n@bot.message_handler(regexp=\"SOME_REGEXP\")\ndef handle_message(message):\n\tpass\n\n# Handles all messages for which the lambda returns True\n@bot.message_handler(func=lambda message: message.document.mime_type == 'text/plain', content_types=['document'])\ndef handle_text_doc(message):\n\tpass\n\n# Which could also be defined as:\ndef test_message(message):\n\treturn message.document.mime_type == 'text/plain'\n\n@bot.message_handler(func=test_message, content_types=['document'])\ndef handle_text_doc(message):\n\tpass\n\n# Handlers can be stacked to create a function which will be called if either message_handler is eligible\n# This handler will be called if the message starts with '/hello' OR is some emoji\n@bot.message_handler(commands=['hello'])\n@bot.message_handler(func=lambda msg: msg.text.encode(\"utf-8\") == SOME_FANCY_EMOJI)\ndef send_something(message):\n    pass\n```\n**Important: all handlers are tested in the order in which they were declared**\n\n#### Edited Message handlers\n\nSame as Message handlers\n\n#### channel_post_handler\n\nSame as Message handlers\n\n#### edited_channel_post_handler\n\nSame as Message handlers\n\n#### Callback Query Handler\n\nIn bot2.0 update. You can get `callback_query` in update object. In telebot use `callback_query_handler` to process callback queries.\n\n```python\n@bot.callback_query_handler(func=lambda call: True)\ndef  test_callback(call):\n    logger.info(call)\n```\n#### Middleware Handler\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the \nTelegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are\nexecuted.\n\n```python\n@bot.middleware_handler(update_types=['message'])\ndef modify_message(bot_instance, message):\n    # modifying the message before it reaches any other handler \n    message.another_text = message.text + ':changed'\n\n@bot.message_handler(commands=['start'])\ndef start(message):\n    # the message is already modified when it reaches message handler\n    assert message.another_text == message.text + ':changed'\n```\nThere are other examples using middleware handler in the [examples/middleware](examples/middleware) directory.\n\n#### TeleBot\n```python\nimport telebot\n\nTOKEN = '<token_string>'\ntb = telebot.TeleBot(TOKEN)\t#create a new Telegram Bot object\n\n# Upon calling this function, TeleBot starts polling the Telegram servers for new messages.\n# - none_stop: True/False (default False) - Don't stop polling when receiving an error from the Telegram servers\n# - interval: True/False (default False) - The interval between polling requests\n#           Note: Editing this parameter harms the bot's response time\n# - timeout: integer (default 20) - Timeout in seconds for long polling.\ntb.polling(none_stop=False, interval=0, timeout=20)\n\n# getMe\nuser = tb.get_me()\n\n# setWebhook\ntb.set_webhook(url=\"http://example.com\", certificate=open('mycert.pem'))\n# unset webhook\ntb.remove_webhook()\n\n# getUpdates\nupdates = tb.get_updates()\nupdates = tb.get_updates(1234,100,20) #get_Updates(offset, limit, timeout):\n\n# sendMessage\ntb.send_message(chat_id, text)\n\n# forwardMessage\ntb.forward_message(to_chat_id, from_chat_id, message_id)\n\n# All send_xyz functions which can take a file as an argument, can also take a file_id instead of a file.\n# sendPhoto\nphoto = open('/tmp/photo.png', 'rb')\ntb.send_photo(chat_id, photo)\ntb.send_photo(chat_id, \"FILEID\")\n\n# sendAudio\naudio = open('/tmp/audio.mp3', 'rb')\ntb.send_audio(chat_id, audio)\ntb.send_audio(chat_id, \"FILEID\")\n\n## sendAudio with duration, performer and title.\ntb.send_audio(CHAT_ID, file_data, 1, 'eternnoir', 'pyTelegram')\n\n# sendVoice\nvoice = open('/tmp/voice.ogg', 'rb')\ntb.send_voice(chat_id, voice)\ntb.send_voice(chat_id, \"FILEID\")\n\n# sendDocument\ndoc = open('/tmp/file.txt', 'rb')\ntb.send_document(chat_id, doc)\ntb.send_document(chat_id, \"FILEID\")\n\n# sendSticker\nsti = open('/tmp/sti.webp', 'rb')\ntb.send_sticker(chat_id, sti)\ntb.send_sticker(chat_id, \"FILEID\")\n\n# sendVideo\nvideo = open('/tmp/video.mp4', 'rb')\ntb.send_video(chat_id, video)\ntb.send_video(chat_id, \"FILEID\")\n\n# sendVideoNote\nvideonote = open('/tmp/videonote.mp4', 'rb')\ntb.send_video_note(chat_id, videonote)\ntb.send_video_note(chat_id, \"FILEID\")\n\n# sendLocation\ntb.send_location(chat_id, lat, lon)\n\n# sendChatAction\n# action_string can be one of the following strings: 'typing', 'upload_photo', 'record_video', 'upload_video',\n# 'record_audio', 'upload_audio', 'upload_document' or 'find_location'.\ntb.send_chat_action(chat_id, action_string)\n\n# getFile\n# Downloading a file is straightforward\n# Returns a File object\nimport requests\nfile_info = tb.get_file(file_id)\n\nfile = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(API_TOKEN, file_info.file_path))\n\n\n```\n#### Reply markup\nAll `send_xyz` functions of TeleBot take an optional `reply_markup` argument. This argument must be an instance of `ReplyKeyboardMarkup`, `ReplyKeyboardRemove` or `ForceReply`, which are defined in types.py.\n\n```python\nfrom telebot import types\n\n# Using the ReplyKeyboardMarkup class\n# It's constructor can take the following optional arguments:\n# - resize_keyboard: True/False (default False)\n# - one_time_keyboard: True/False (default False)\n# - selective: True/False (default False)\n# - row_width: integer (default 3)\n# row_width is used in combination with the add() function.\n# It defines how many buttons are fit on each row before continuing on the next row.\nmarkup = types.ReplyKeyboardMarkup(row_width=2)\nitembtn1 = types.KeyboardButton('a')\nitembtn2 = types.KeyboardButton('v')\nitembtn3 = types.KeyboardButton('d')\nmarkup.add(itembtn1, itembtn2, itembtn3)\ntb.send_message(chat_id, \"Choose one letter:\", reply_markup=markup)\n\n# or add KeyboardButton one row at a time:\nmarkup = types.ReplyKeyboardMarkup()\nitembtna = types.KeyboardButton('a')\nitembtnv = types.KeyboardButton('v')\nitembtnc = types.KeyboardButton('c')\nitembtnd = types.KeyboardButton('d')\nitembtne = types.KeyboardButton('e')\nmarkup.row(itembtna, itembtnv)\nmarkup.row(itembtnc, itembtnd, itembtne)\ntb.send_message(chat_id, \"Choose one letter:\", reply_markup=markup)\n```\nThe last example yields this result:\n\n![ReplyKeyboardMarkup](https://farm3.staticflickr.com/2933/32418726704_9ef76093cf_o_d.jpg \"ReplyKeyboardMarkup\")\n\n```python\n# ReplyKeyboardRemove: hides a previously sent ReplyKeyboardMarkup\n# Takes an optional selective argument (True/False, default False)\nmarkup = types.ReplyKeyboardRemove(selective=False)\ntb.send_message(chat_id, message, reply_markup=markup)\n```\n\n```python\n# ForceReply: forces a user to reply to a message\n# Takes an optional selective argument (True/False, default False)\nmarkup = types.ForceReply(selective=False)\ntb.send_message(chat_id, \"Send me another word:\", reply_markup=markup)\n```\nForceReply:\n\n![ForceReply](https://farm4.staticflickr.com/3809/32418726814_d1baec0fc2_o_d.jpg \"ForceReply\")\n\n### Inline Mode\n\nMore information about [Inline mode](https://core.telegram.org/bots/inline).\n\n#### inline_handler\n\nNow, you can use inline_handler to get inline queries in telebot.\n\n```python\n\n@bot.inline_handler(lambda query: query.query == 'text')\ndef query_text(inline_query):\n    # Query message is text\n```\n\n\n#### chosen_inline_handler\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forgot add the /setinlinefeedback\ncommand for @Botfather.\n\nMore information : [collecting-feedback](https://core.telegram.org/bots/inline#collecting-feedback)\n\n```python\n@bot.chosen_inline_handler(func=lambda chosen_inline_result: True)\ndef test_chosen(chosen_inline_result):\n    # Process all chosen_inline_result.\n```\n\n#### answer_inline_query\n\n```python\n@bot.inline_handler(lambda query: query.query == 'text')\ndef query_text(inline_query):\n    try:\n        r = types.InlineQueryResultArticle('1', 'Result', types.InputTextMessageContent('Result message.'))\n        r2 = types.InlineQueryResultArticle('2', 'Result2', types.InputTextMessageContent('Result message2.'))\n        bot.answer_inline_query(inline_query.id, [r, r2])\n    except Exception as e:\n        print(e)\n\n```\n### Working with entities:\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.\nAttributes:\n* `type`\n* `url`\n* `offset`\n* `length`\n* `user`\n\n\n**Here's an Example:**`message.entities[num].<attribute>`<br>\nHere `num` is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.<br>\n`message.entities` returns a list of entities object. <br>\n`message.entities[0].type` would give the type of the first entity<br>\nRefer [Bot Api](https://core.telegram.org/bots/api#messageentity) for extra details\n\n## Advanced use of the API\n\n### Asynchronous delivery of messages\nThere exists an implementation of TeleBot which executes all `send_xyz` and the `get_me` functions asynchronously. This can speed up you bot __significantly__, but it has unwanted side effects if used without caution.\nTo enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n```python\ntb = telebot.AsyncTeleBot(\"TOKEN\")\n```\nNow, every function that calls the Telegram API is executed in a separate Thread. The functions are modified to return an AsyncTask instance (defined in util.py). Using AsyncTeleBot allows you to do the following:\n```python\nimport telebot\n\ntb = telebot.AsyncTeleBot(\"TOKEN\")\ntask = tb.get_me() # Execute an API call\n# Do some other operations...\na = 0\nfor a in range(100):\n\ta += 10\n\nresult = task.wait() # Get the result of the execution\n```\n*Note: if you execute send_xyz functions after eachother without calling wait(), the order in which messages are delivered might be wrong.*\n\n### Sending large text messages\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n```python\nfrom telebot import util\nlarge_text = open(\"large_text.txt\", \"rb\").read()\n\n# Split the text each 3000 characters.\n# split_string returns a list with the splitted text.\nsplitted_text = util.split_string(large_text, 3000)\nfor text in splitted_text:\n\ttb.send_message(chat_id, text)\n```\n### Controlling the amount of Threads used by TeleBot\nThe TeleBot constructor takes the following optional arguments:\n\n - threaded: True/False (default True). A flag to indicate whether\n   TeleBot should execute message handlers on it's polling Thread.\n\n### The listener mechanism\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. \nExample:\n```python\ndef handle_messages(messages):\n\tfor message in messages:\n\t\t# Do something with the message\n\t\tbot.reply_to(message, 'Hi')\n\nbot.set_update_listener(handle_messages)\nbot.polling()\n```\n\n### Using web hooks\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the *examples/webhook_examples* directory.\n\n### Logging\n\nYou can use the Telebot module logger to log debug info about Telebot. Use `telebot.logger` to get the logger of the TeleBot module.\nIt is possible to add custom logging Handlers to the logger. Refer to the [Python logging module page](https://docs.python.org/2/library/logging.html) for more info.\n\n```python\nimport logging\n\nlogger = telebot.logger\ntelebot.logger.setLevel(logging.DEBUG) # Outputs debug messages to console.\n```\n\n### Proxy\n\nYou can use proxy for request. `apihelper.proxy` object will use by call `requests` proxies argument.\n\n```python\nfrom telebot import apihelper\n\napihelper.proxy = {'http':'http://10.10.1.10:3128'}\n```\n\nIf you want to use socket5 proxy you need install dependency `pip install requests[socks]` and make sure, that you have the latest version of `gunicorn`, `PySocks`, `pyTelegramBotAPI`, `requests` and `urllib3`.\n\n```python\napihelper.proxy = {'https':'socks5://userproxy:password@proxy_address:port'}\n```\n\n\n## API conformance\n\n_Checking is in progress..._\n\n\u2705 [Bot API 3.5](https://core.telegram.org/bots/api-changelog#november-17-2017) _- To be checked..._\n\n* \u2714 [Bot API 3.4](https://core.telegram.org/bots/api-changelog#october-11-2017)\n* \u2714 [Bot API 3.3](https://core.telegram.org/bots/api-changelog#august-23-2017)\n* \u2714 [Bot API 3.2](https://core.telegram.org/bots/api-changelog#july-21-2017)\n* \u2714 [Bot API 3.1](https://core.telegram.org/bots/api-changelog#june-30-2017)\n* \u2714 [Bot API 3.0](https://core.telegram.org/bots/api-changelog#may-18-2017)\n* \u2714 [Bot API 2.3.1](https://core.telegram.org/bots/api-changelog#december-4-2016)\n* \u2714 [Bot API 2.3](https://core.telegram.org/bots/api-changelog#november-21-2016)\n* \u2714 [Bot API 2.2](https://core.telegram.org/bots/api-changelog#october-3-2016)\n* \u2714 [Bot API 2.1](https://core.telegram.org/bots/api-changelog#may-22-2016)\n* \u2714 [Bot API 2.0](https://core.telegram.org/bots/api-changelog#april-9-2016) \n\n\n## Change log\n\n27.04.2020 - Poll and Dice are up to date.\nPython2 conformance is not checked any more due to EOL. \n\n11.04.2020 - Refactoring. new_chat_member is out of support. Bugfix in html_text. Started Bot API conformance checking.\n\n06.06.2019 - Added polls support (Poll). Added functions send_poll, stop_poll\n\n## F.A.Q.\n\n### Bot 2.0\n\nApril 9,2016 Telegram release new bot 2.0 API, which has a drastic revision especially for the change of method's interface.If you want to update to the latest version, please make sure you've switched bot's code to bot 2.0 method interface.\n\n[More information about pyTelegramBotAPI support bot2.0](https://github.com/eternnoir/pyTelegramBotAPI/issues/130)\n\n### How can I distinguish a User and a GroupChat in message.chat?\nTelegram Bot API support new type Chat for message.chat.\n\n- Check the ```type``` attribute in ```Chat``` object:\n-\n```python\nif message.chat.type == \"private\":\n\t# private chat message\n\nif message.chat.type == \"group\":\n\t# group chat message\n\nif message.chat.type == \"supergroup\":\n\t# supergroup chat message\n\nif message.chat.type == \"channel\":\n\t# channel message\n\n```\n\n## The Telegram Chat Group\n\nGet help. Discuss. Chat.\n\n* Join the [pyTelegramBotAPI Telegram Chat Group](https://telegram.me/joinchat/Bn4ixj84FIZVkwhk2jag6A)\n* We now have a Telegram Channel as well! Keep yourself up to date with API changes, and [join it](https://telegram.me/pytelegrambotapi).\n\n## More examples\n\n* [Echo Bot](https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/echo_bot.py)\n* [Deep Linking](https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/deep_linking.py)\n* [next_step_handler Example](https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/step_example.py)\n\n## Bots using this API\n* [SiteAlert bot](https://telegram.me/SiteAlert_bot) ([source](https://github.com/ilteoood/SiteAlert-Python)) by *ilteoood* - Monitors websites and sends a notification on changes\n* [TelegramLoggingBot](https://github.com/aRandomStranger/TelegramLoggingBot) by *aRandomStranger*\n* [Send to Kindle Bot](https://telegram.me/Send2KindleBot) by *GabrielRF* - Send to Kindle files or links to files.\n* [Telegram LMGTFY_bot](https://github.com/GabrielRF/telegram-lmgtfy_bot) ([source](https://github.com/GabrielRF/telegram-lmgtfy_bot)) by *GabrielRF* - Let me Google that for you.\n* [Telegram UrlProBot](https://github.com/GabrielRF/telegram-urlprobot) ([source](https://github.com/GabrielRF/telegram-urlprobot)) by *GabrielRF* - URL shortener and URL expander.\n* [Telegram Proxy Bot](https://bitbucket.org/master_groosha/telegram-proxy-bot) by *Groosha* - A simple BITM (bot-in-the-middle) for Telegram acting as some kind of \"proxy\".\n* [Telegram Proxy Bot](https://github.com/mrgigabyte/proxybot) by *mrgigabyte* - `Credits for the original version of this bot goes to` **Groosha** `, simply added certain features which I thought were needed`.\n* [RadRetroRobot](https://github.com/Tronikart/RadRetroRobot) by *Tronikart* - Multifunctional Telegram Bot RadRetroRobot.\n* [League of Legends bot](https://telegram.me/League_of_Legends_bot) ([source](https://github.com/i32ropie/lol)) by *i32ropie*\n* [NeoBot](https://github.com/neoranger/NeoBot) by [@NeoRanger](https://github.com/neoranger)\n* [TagAlertBot](https://github.com/pitasi/TagAlertBot) by *pitasi*\n* [ComedoresUGRbot](http://telegram.me/ComedoresUGRbot) ([source](https://github.com/alejandrocq/ComedoresUGRbot)) by [*alejandrocq*](https://github.com/alejandrocq) - Telegram bot to check the menu of Universidad de Granada dining hall.\n* [picpingbot](https://web.telegram.org/#/im?p=%40picpingbot) - Fun anonymous photo exchange by Boogie Muffin.\n* [TheZigZagProject](https://github.com/WebShark025/TheZigZagProject) - The 'All In One' bot for Telegram! by WebShark025\n* [proxybot](https://github.com/p-hash/proxybot) - Simple Proxy Bot for Telegram. by p-hash\n* [DonantesMalagaBot](https://github.com/vfranch/DonantesMalagaBot)- DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n* [DuttyBot](https://github.com/DmytryiStriletskyi/DuttyBot) by *Dmytryi Striletskyi* - Timetable for one university in Kiev.\n* [dailypepebot](https://telegram.me/dailypepebot) by [*Jaime*](https://github.com/jiwidi/Dailypepe) - Get's you random pepe images and gives you their id, then you can call this image with the number.\n* [DailyQwertee](https://t.me/DailyQwertee) by [*Jaime*](https://github.com/jiwidi/DailyQwertee) - Bot that manages a channel that sends qwertee daily tshirts every day at 00:00\n* [wat-bridge](https://github.com/rmed/wat-bridge) by [*rmed*](https://github.com/rmed) - Send and receive messages to/from WhatsApp through Telegram\n* [flibusta_bot](https://github.com/Kurbezz/flibusta_bot) by [*Kurbezz*](https://github.com/Kurbezz)\n* [EmaProject](https://github.com/halkliff/emaproject) by [*halkliff*](https://github.com/halkliff) - Ema - Eastern Media Assistant was made thinking on the ease-to-use feature. Coding here is simple, as much as is fast and powerful.\n* [filmratingbot](http://t.me/filmratingbot)([source](https://github.com/jcolladosp/film-rating-bot)) by [*jcolladosp*](https://github.com/jcolladosp) - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n* [you2mp3bot](http://t.me/you2mp3bot)([link](https://storebot.me/bot/you2mp3bot)) - This bot can convert a Youtube video to Mp3. All you need is send the URL video.\n* [Send2Kindlebot](http://t.me/Send2KindleBot) ([source](https://github.com/GabrielRF/Send2KindleBot)) by *GabrielRF* - Send to Kindle service.\n* [RastreioBot](http://t.me/RastreioBot) ([source](https://github.com/GabrielRF/RastreioBot)) by *GabrielRF* - Bot used to track packages on the Brazilian Mail Service.\n* [filex_bot](http://t.me/filex_bot)([link](https://github.com/victor141516/FileXbot-telegram))\n* [Spbu4UBot](http://t.me/Spbu4UBot)([link](https://github.com/EeOneDown/spbu4u)) by *EeOneDown* - Bot with timetables for SPbU students.\n* [SmartySBot](http://t.me/ZDU_bot)([link](https://github.com/0xVK/SmartySBot)) by *0xVK* - Telegram timetable bot, for Zhytomyr Ivan Franko State University students.\n* [yandex_music_bot](http://t.me/yandex_music_bot)- Downloads tracks/albums/public playlists from Yandex.Music streaming service for free.\n* [LearnIt](https://t.me/LearnItbot)([link](https://github.com/tiagonapoli/LearnIt)) - A Telegram Bot created to help people to memorize other languages\u2019 vocabulary.\n* [MusicQuiz_bot](https://t.me/MusicQuiz_bot) by [Etoneja](https://github.com/Etoneja) - Listen to audio samples and try to name the performer of the song.\n* [Bot-Telegram-Shodan ](https://github.com/rubenleon/Bot-Telegram-Shodan) by [rubenleon](https://github.com/rubenleon)\n* [MandangoBot](https://t.me/MandangoBot) by @Alvaricias - Bot for managing Marvel Strike Force alliances (only in spanish, atm).\n* [ManjaroBot](https://t.me/ManjaroBot) by [@NeoRanger](https://github.com/neoranger) - Bot for Manjaro Linux Spanish group with a lot of info for Manjaro Newbies.\n* [VigoBusTelegramBot](https://t.me/vigobusbot) ([GitHub](https://github.com/Pythoneiro/VigoBus-TelegramBot)) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n* [kaishnik-bot](https://t.me/kaishnik_bot) ([source](https://github.com/airatk/kaishnik-bot)) by *airatk* - bot which shows all the necessary information to KNTRU-KAI students.\n* [Creation Date](https://t.me/creationdatebot) by @karipov - interpolates account creation dates based on telegram given ID\u2019s\n* [m0xbot](https://t.me/m0xbot) by [kor0p](https://github.com/kor0p) - tic-tac-toe.  \n* [kboardbot](https://t.me/kboardbot) by [kor0p](https://github.com/kor0p) - inline switches keyboard layout (English, Hebrew, Ukrainian, Russian).  \n* [Robbie](https://t.me/romdeliverybot) ([source](https://github.com/FacuM/romdeliverybot_support)) by @FacuM - Support Telegram bot for developers and maintainers.\n* [AsadovBot](https://t.me/asadov_bot) ([source](https://github.com/desexcile/BotApi)) by @DesExcile - \u0421atalog of poems by Eduard Asadov.\n* [thesaurus_com_bot](https://t.me/thesaurus_com_bot) ([source](https://github.com/LeoSvalov/words-i-learn-bot)) by @LeoSvalov - words and synonyms from [dictionary.com](https://www.dictionary.com) and [thesaurus.com](https://www.thesaurus.com) in the telegram.\n* [InfoBot](https://t.me/info2019_bot) ([source](https://github.com/irevenko/info-bot)) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n\nWant to have your bot listed here? Send a Telegram message to @eternnoir or @pevdh.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eternnoir/pyTelegramBotAPI", "keywords": "telegram bot api tools", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "pyTelegramBotAPI", "package_url": "https://pypi.org/project/pyTelegramBotAPI/", "platform": "", "project_url": "https://pypi.org/project/pyTelegramBotAPI/", "project_urls": {"Homepage": "https://github.com/eternnoir/pyTelegramBotAPI"}, "release_url": "https://pypi.org/project/pyTelegramBotAPI/3.7.1/", "requires_dist": null, "requires_python": "", "summary": "Python Telegram bot api.", "version": "3.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1></h1><p align=\"center\">pyTelegramBotAPI\n</p><p align=\"center\">A simple, but extensible Python implementation for the <a href=\"https://core.telegram.org/bots/api\" rel=\"nofollow\">Telegram Bot API</a>.\n</p><p><a href=\"https://pypi.python.org/pypi/pyTelegramBotAPI\" rel=\"nofollow\"><img alt=\"PyPi Package Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/352fd92ae1131f654227ac87897da847005d2d11/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707954656c656772616d426f744150492e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pyTelegramBotAPI\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10a19541c07f4cb9151aa31d8a18c9616591daf0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707954656c656772616d426f744150492e737667\"></a>\n<a href=\"https://travis-ci.org/eternnoir/pyTelegramBotAPI\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67f87cc1ca685202777e76fdbff790d555a54b0d/68747470733a2f2f7472617669732d63692e6f72672f657465726e6e6f69722f707954656c656772616d426f744150492e7376673f6272616e63683d6d6173746572\"></a></p>\n<ul>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started.</a></li>\n<li><a href=\"#writing-your-first-bot\" rel=\"nofollow\">Writing your first bot</a>\n<ul>\n<li><a href=\"#prerequisites\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#a-simple-echo-bot\" rel=\"nofollow\">A simple echo bot</a></li>\n</ul>\n</li>\n<li><a href=\"#general-api-documentation\" rel=\"nofollow\">General API Documentation</a>\n<ul>\n<li><a href=\"#types\" rel=\"nofollow\">Types</a></li>\n<li><a href=\"#methods\" rel=\"nofollow\">Methods</a></li>\n<li><a href=\"#general-use-of-the-api\" rel=\"nofollow\">General use of the API</a>\n<ul>\n<li><a href=\"#message-handlers\" rel=\"nofollow\">Message handlers</a></li>\n<li><a href=\"#callback-query-handler\" rel=\"nofollow\">Callback Query handlers</a></li>\n<li><a href=\"#middleware-handler\" rel=\"nofollow\">Middleware handlers</a></li>\n<li><a href=\"#telebot\" rel=\"nofollow\">TeleBot</a></li>\n<li><a href=\"#reply-markup\" rel=\"nofollow\">Reply markup</a></li>\n<li><a href=\"#inline-mode\" rel=\"nofollow\">Inline Mode</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#advanced-use-of-the-api\" rel=\"nofollow\">Advanced use of the API</a>\n<ul>\n<li><a href=\"#asynchronous-delivery-of-messages\" rel=\"nofollow\">Asynchronous delivery of messages</a></li>\n<li><a href=\"#sending-large-text-messages\" rel=\"nofollow\">Sending large text messages</a></li>\n<li><a href=\"#controlling-the-amount-of-threads-used-by-telebot\" rel=\"nofollow\">Controlling the amount of Threads used by TeleBot</a></li>\n<li><a href=\"#the-listener-mechanism\" rel=\"nofollow\">The listener mechanism</a></li>\n<li><a href=\"#using-web-hooks\" rel=\"nofollow\">Using web hooks</a></li>\n<li><a href=\"#logging\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"#proxy\" rel=\"nofollow\">Proxy</a></li>\n</ul>\n</li>\n<li><a href=\"#api-conformance\" rel=\"nofollow\">API conformance</a></li>\n<li><a href=\"#change-log\" rel=\"nofollow\">Change log</a></li>\n<li><a href=\"#faq\" rel=\"nofollow\">F.A.Q.</a>\n<ul>\n<li><a href=\"#bot-20\" rel=\"nofollow\">Bot 2.0</a></li>\n<li><a href=\"#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat\" rel=\"nofollow\">How can I distinguish a User and a GroupChat in message.chat?</a></li>\n</ul>\n</li>\n<li><a href=\"#the-telegram-chat-group\" rel=\"nofollow\">The Telegram Chat Group</a></li>\n<li><a href=\"#more-examples\" rel=\"nofollow\">More examples</a></li>\n<li><a href=\"#bots-using-this-api\" rel=\"nofollow\">Bots using this API</a></li>\n</ul>\n<h2>Getting started.</h2>\n<p>This API is tested with Python 2.6, Python 2.7, Python 3.4, Pypy and Pypy 3.\nThere are two ways to install the library:</p>\n<ul>\n<li>Installation using pip (a Python package manager)*:</li>\n</ul>\n<pre><code>$ pip install pyTelegramBotAPI\n</code></pre>\n<ul>\n<li>Installation from source (requires git):</li>\n</ul>\n<pre><code>$ git clone https://github.com/eternnoir/pyTelegramBotAPI.git\n$ cd pyTelegramBotAPI\n$ python setup.py install\n</code></pre>\n<p>It is generally recommended to use the first option.</p>\n<p>*<em>While the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling <code>pip install pytelegrambotapi --upgrade</code></em></p>\n<h2>Writing your first bot</h2>\n<h3>Prerequisites</h3>\n<p>It is presumed that you <a href=\"https://core.telegram.org/bots#botfather\" rel=\"nofollow\">have obtained an API token with @BotFather</a>. We will call this token <code>TOKEN</code>.\nFurthermore, you have basic knowledge of the Python programming language and more importantly <a href=\"https://core.telegram.org/bots/api\" rel=\"nofollow\">the Telegram Bot API</a>.</p>\n<h3>A simple echo bot</h3>\n<p>The TeleBot class (defined in _<em>init</em>_.py) encapsulates all API calls in a single class. It provides functions such as <code>send_xyz</code> (<code>send_message</code>, <code>send_document</code> etc.) and several ways to listen for incoming messages.</p>\n<p>Create a file called <code>echo_bot.py</code>.\nThen, open the file and create an instance of the TeleBot class.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telebot</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">TeleBot</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN\"</span><span class=\"p\">)</span>\n</pre>\n<p><em>Note: Make sure to actually replace TOKEN with your own API token.</em></p>\n<p>After that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.</p>\n<p>Let's define a message handler which handles incoming <code>/start</code> and <code>/help</code> commands.</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'help'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_welcome</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"s2\">\"Howdy, how are you doing?\"</span><span class=\"p\">)</span>\n</pre>\n<p>A function which is decorated by a message handler <strong>can have an arbitrary name, however, it must have only one parameter (the message)</strong>.</p>\n<p>Let's add another handler:</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo_all</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<p>This one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.</p>\n<p><em>Note: all handlers are tested in the order in which they were declared</em></p>\n<p>We now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:</p>\n<pre><span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">polling</span><span class=\"p\">()</span>\n</pre>\n<p>Alright, that's it! Our source file now looks like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telebot</span>\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">TeleBot</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'help'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_welcome</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"s2\">\"Howdy, how are you doing?\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo_all</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">polling</span><span class=\"p\">()</span>\n</pre>\n<p>To start the bot, simply open up a terminal and enter <code>python echo_bot.py</code> to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.</p>\n<h2>General API Documentation</h2>\n<h3>Types</h3>\n<p>All types are defined in types.py. They are all completely in line with the <a href=\"https://core.telegram.org/bots/api#available-types\" rel=\"nofollow\">Telegram API's definition of the types</a>, except for the Message's <code>from</code> field, which is renamed to <code>from_user</code> (because <code>from</code> is a Python reserved token). Thus, attributes such as <code>message_id</code> can be accessed directly with <code>message.message_id</code>. Note that <code>message.chat</code> can be either an instance of <code>User</code> or <code>GroupChat</code> (see <a href=\"#how-can-i-distinguish-a-user-and-a-groupchat-in-messagechat\" rel=\"nofollow\">How can I distinguish a User and a GroupChat in message.chat?</a>).</p>\n<p>The Message object also has a <code>content_type</code>attribute, which defines the type of the Message. <code>content_type</code> can be one of the following strings:\n<code>text</code>, <code>audio</code>, <code>document</code>, <code>photo</code>, <code>sticker</code>, <code>video</code>, <code>video_note</code>, <code>voice</code>, <code>location</code>, <code>contact</code>, <code>new_chat_members</code>, <code>left_chat_member</code>, <code>new_chat_title</code>, <code>new_chat_photo</code>, <code>delete_chat_photo</code>, <code>group_chat_created</code>, <code>supergroup_chat_created</code>, <code>channel_chat_created</code>, <code>migrate_to_chat_id</code>, <code>migrate_from_chat_id</code>, <code>pinned_message</code>.</p>\n<p>You can use some types in one function. Example:</p>\n<p><code>content_types=[\"text\", \"sticker\", \"pinned_message\", \"photo\", \"audio\"]</code></p>\n<h3>Methods</h3>\n<p>All <a href=\"https://core.telegram.org/bots/api#available-methods\" rel=\"nofollow\">API methods</a> are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. <code>getMe</code> is renamed to <code>get_me</code> and <code>sendMessage</code> to <code>send_message</code>.</p>\n<h3>General use of the API</h3>\n<p>Outlined below are some general use cases of the API.</p>\n<h4>Message handlers</h4>\n<p>A message handler is a function that is decorated with the <code>message_handler</code> decorator of a TeleBot instance. Message handlers consist of one or multiple filters.\nEach filter much return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided <code>bot</code> is an instance of TeleBot):</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">filters</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">function_name</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"s2\">\"This is a message handler\"</span><span class=\"p\">)</span>\n</pre>\n<p><code>function_name</code> is not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle.\n<code>filters</code> is a list of keyword arguments.\nA filter is declared in the following manner: <code>name=argument</code>. One handler may have multiple filters.\nTeleBot supports the following filters:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">name</th>\n<th>argument(s)</th>\n<th>Condition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">content_types</td>\n<td>list of strings (default <code>['text']</code>)</td>\n<td><code>True</code> if message.content_type is in the list of strings.</td>\n</tr>\n<tr>\n<td align=\"center\">regexp</td>\n<td>a regular expression as a string</td>\n<td><code>True</code> if <code>re.search(regexp_arg)</code> returns <code>True</code> and <code>message.content_type == 'text'</code> (See <a href=\"https://docs.python.org/2/library/re.html\" rel=\"nofollow\">Python Regular Expressions</a>)</td>\n</tr>\n<tr>\n<td align=\"center\">commands</td>\n<td>list of strings</td>\n<td><code>True</code> if <code>message.content_type == 'text'</code> and <code>message.text</code> starts with a command that is in the list of strings.</td>\n</tr>\n<tr>\n<td align=\"center\">func</td>\n<td>a function (lambda or function reference)</td>\n<td><code>True</code> if the lambda or function reference returns <code>True</code></td>\n</tr></tbody></table>\n<p>Here are some examples of using the filters and message handlers:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telebot</span>\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">TeleBot</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Handles all text messages that contains the commands '/start' or '/help'.</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'help'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_start_help</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Handles all sent documents and audio files</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">content_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'document'</span><span class=\"p\">,</span> <span class=\"s1\">'audio'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_docs_audio</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Handles all text messages that match the regular expression</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">regexp</span><span class=\"o\">=</span><span class=\"s2\">\"SOME_REGEXP\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Handles all messages for which the lambda returns True</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">mime_type</span> <span class=\"o\">==</span> <span class=\"s1\">'text/plain'</span><span class=\"p\">,</span> <span class=\"n\">content_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'document'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_text_doc</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Which could also be defined as:</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">return</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">document</span><span class=\"o\">.</span><span class=\"n\">mime_type</span> <span class=\"o\">==</span> <span class=\"s1\">'text/plain'</span>\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">test_message</span><span class=\"p\">,</span> <span class=\"n\">content_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'document'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_text_doc</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"c1\"># Handlers can be stacked to create a function which will be called if either message_handler is eligible</span>\n<span class=\"c1\"># This handler will be called if the message starts with '/hello' OR is some emoji</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'hello'</span><span class=\"p\">])</span>\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">SOME_FANCY_EMOJI</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">send_something</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p><strong>Important: all handlers are tested in the order in which they were declared</strong></p>\n<h4>Edited Message handlers</h4>\n<p>Same as Message handlers</p>\n<h4>channel_post_handler</h4>\n<p>Same as Message handlers</p>\n<h4>edited_channel_post_handler</h4>\n<p>Same as Message handlers</p>\n<h4>Callback Query Handler</h4>\n<p>In bot2.0 update. You can get <code>callback_query</code> in update object. In telebot use <code>callback_query_handler</code> to process callback queries.</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">callback_query_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span>  <span class=\"nf\">test_callback</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)</span>\n</pre>\n<h4>Middleware Handler</h4>\n<p>A middleware handler is a function that allows you to modify requests or the bot context as they pass through the\nTelegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are\nexecuted.</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">middleware_handler</span><span class=\"p\">(</span><span class=\"n\">update_types</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">modify_message</span><span class=\"p\">(</span><span class=\"n\">bot_instance</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"c1\"># modifying the message before it reaches any other handler </span>\n    <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">another_text</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">':changed'</span>\n\n<span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">message_handler</span><span class=\"p\">(</span><span class=\"n\">commands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'start'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"c1\"># the message is already modified when it reaches message handler</span>\n    <span class=\"k\">assert</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">another_text</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">+</span> <span class=\"s1\">':changed'</span>\n</pre>\n<p>There are other examples using middleware handler in the <a href=\"examples/middleware\" rel=\"nofollow\">examples/middleware</a> directory.</p>\n<h4>TeleBot</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telebot</span>\n\n<span class=\"n\">TOKEN</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;token_string&gt;'</span>\n<span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">TeleBot</span><span class=\"p\">(</span><span class=\"n\">TOKEN</span><span class=\"p\">)</span>\t<span class=\"c1\">#create a new Telegram Bot object</span>\n\n<span class=\"c1\"># Upon calling this function, TeleBot starts polling the Telegram servers for new messages.</span>\n<span class=\"c1\"># - none_stop: True/False (default False) - Don't stop polling when receiving an error from the Telegram servers</span>\n<span class=\"c1\"># - interval: True/False (default False) - The interval between polling requests</span>\n<span class=\"c1\">#           Note: Editing this parameter harms the bot's response time</span>\n<span class=\"c1\"># - timeout: integer (default 20) - Timeout in seconds for long polling.</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">polling</span><span class=\"p\">(</span><span class=\"n\">none_stop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># getMe</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">get_me</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># setWebhook</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">set_webhook</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://example.com\"</span><span class=\"p\">,</span> <span class=\"n\">certificate</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'mycert.pem'</span><span class=\"p\">))</span>\n<span class=\"c1\"># unset webhook</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">remove_webhook</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># getUpdates</span>\n<span class=\"n\">updates</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">get_updates</span><span class=\"p\">()</span>\n<span class=\"n\">updates</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">get_updates</span><span class=\"p\">(</span><span class=\"mi\">1234</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"c1\">#get_Updates(offset, limit, timeout):</span>\n\n<span class=\"c1\"># sendMessage</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># forwardMessage</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">forward_message</span><span class=\"p\">(</span><span class=\"n\">to_chat_id</span><span class=\"p\">,</span> <span class=\"n\">from_chat_id</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All send_xyz functions which can take a file as an argument, can also take a file_id instead of a file.</span>\n<span class=\"c1\"># sendPhoto</span>\n<span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/photo.png'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_photo</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">photo</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_photo</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendAudio</span>\n<span class=\"n\">audio</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/audio.mp3'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_audio</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">audio</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_audio</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\">## sendAudio with duration, performer and title.</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_audio</span><span class=\"p\">(</span><span class=\"n\">CHAT_ID</span><span class=\"p\">,</span> <span class=\"n\">file_data</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'eternnoir'</span><span class=\"p\">,</span> <span class=\"s1\">'pyTelegram'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendVoice</span>\n<span class=\"n\">voice</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/voice.ogg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_voice</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">voice</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_voice</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendDocument</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/file.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_document</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_document</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendSticker</span>\n<span class=\"n\">sti</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/sti.webp'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_sticker</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">sti</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_sticker</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendVideo</span>\n<span class=\"n\">video</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/video.mp4'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_video</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">video</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_video</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendVideoNote</span>\n<span class=\"n\">videonote</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/videonote.mp4'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_video_note</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">videonote</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_video_note</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"FILEID\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendLocation</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_location</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">,</span> <span class=\"n\">lon</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sendChatAction</span>\n<span class=\"c1\"># action_string can be one of the following strings: 'typing', 'upload_photo', 'record_video', 'upload_video',</span>\n<span class=\"c1\"># 'record_audio', 'upload_audio', 'upload_document' or 'find_location'.</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_chat_action</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">action_string</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># getFile</span>\n<span class=\"c1\"># Downloading a file is straightforward</span>\n<span class=\"c1\"># Returns a File object</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">file_info</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">get_file</span><span class=\"p\">(</span><span class=\"n\">file_id</span><span class=\"p\">)</span>\n\n<span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://api.telegram.org/file/bot</span><span class=\"si\">{0}</span><span class=\"s1\">/</span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">API_TOKEN</span><span class=\"p\">,</span> <span class=\"n\">file_info</span><span class=\"o\">.</span><span class=\"n\">file_path</span><span class=\"p\">))</span>\n</pre>\n<h4>Reply markup</h4>\n<p>All <code>send_xyz</code> functions of TeleBot take an optional <code>reply_markup</code> argument. This argument must be an instance of <code>ReplyKeyboardMarkup</code>, <code>ReplyKeyboardRemove</code> or <code>ForceReply</code>, which are defined in types.py.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">telebot</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n\n<span class=\"c1\"># Using the ReplyKeyboardMarkup class</span>\n<span class=\"c1\"># It's constructor can take the following optional arguments:</span>\n<span class=\"c1\"># - resize_keyboard: True/False (default False)</span>\n<span class=\"c1\"># - one_time_keyboard: True/False (default False)</span>\n<span class=\"c1\"># - selective: True/False (default False)</span>\n<span class=\"c1\"># - row_width: integer (default 3)</span>\n<span class=\"c1\"># row_width is used in combination with the add() function.</span>\n<span class=\"c1\"># It defines how many buttons are fit on each row before continuing on the next row.</span>\n<span class=\"n\">markup</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ReplyKeyboardMarkup</span><span class=\"p\">(</span><span class=\"n\">row_width</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">itembtn1</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtn2</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtn3</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">)</span>\n<span class=\"n\">markup</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">itembtn1</span><span class=\"p\">,</span> <span class=\"n\">itembtn2</span><span class=\"p\">,</span> <span class=\"n\">itembtn3</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"Choose one letter:\"</span><span class=\"p\">,</span> <span class=\"n\">reply_markup</span><span class=\"o\">=</span><span class=\"n\">markup</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or add KeyboardButton one row at a time:</span>\n<span class=\"n\">markup</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ReplyKeyboardMarkup</span><span class=\"p\">()</span>\n<span class=\"n\">itembtna</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtnv</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtnc</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtnd</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'d'</span><span class=\"p\">)</span>\n<span class=\"n\">itembtne</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">KeyboardButton</span><span class=\"p\">(</span><span class=\"s1\">'e'</span><span class=\"p\">)</span>\n<span class=\"n\">markup</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">(</span><span class=\"n\">itembtna</span><span class=\"p\">,</span> <span class=\"n\">itembtnv</span><span class=\"p\">)</span>\n<span class=\"n\">markup</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">(</span><span class=\"n\">itembtnc</span><span class=\"p\">,</span> <span class=\"n\">itembtnd</span><span class=\"p\">,</span> <span class=\"n\">itembtne</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"Choose one letter:\"</span><span class=\"p\">,</span> <span class=\"n\">reply_markup</span><span class=\"o\">=</span><span class=\"n\">markup</span><span class=\"p\">)</span>\n</pre>\n<p>The last example yields this result:</p>\n<p><img alt=\"ReplyKeyboardMarkup\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e116592e57171b0cfe2f1923736f8cea8bcbcbf4/68747470733a2f2f6661726d332e737461746963666c69636b722e636f6d2f323933332f33323431383732363730345f396566373630393363665f6f5f642e6a7067\"></p>\n<pre><span class=\"c1\"># ReplyKeyboardRemove: hides a previously sent ReplyKeyboardMarkup</span>\n<span class=\"c1\"># Takes an optional selective argument (True/False, default False)</span>\n<span class=\"n\">markup</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ReplyKeyboardRemove</span><span class=\"p\">(</span><span class=\"n\">selective</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">reply_markup</span><span class=\"o\">=</span><span class=\"n\">markup</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># ForceReply: forces a user to reply to a message</span>\n<span class=\"c1\"># Takes an optional selective argument (True/False, default False)</span>\n<span class=\"n\">markup</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">ForceReply</span><span class=\"p\">(</span><span class=\"n\">selective</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"s2\">\"Send me another word:\"</span><span class=\"p\">,</span> <span class=\"n\">reply_markup</span><span class=\"o\">=</span><span class=\"n\">markup</span><span class=\"p\">)</span>\n</pre>\n<p>ForceReply:</p>\n<p><img alt=\"ForceReply\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d996672b830ab7b805e3ba80538f13354b21f55/68747470733a2f2f6661726d342e737461746963666c69636b722e636f6d2f333830392f33323431383732363831345f643162616563306663325f6f5f642e6a7067\"></p>\n<h3>Inline Mode</h3>\n<p>More information about <a href=\"https://core.telegram.org/bots/inline\" rel=\"nofollow\">Inline mode</a>.</p>\n<h4>inline_handler</h4>\n<p>Now, you can use inline_handler to get inline queries in telebot.</p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">inline_handler</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"o\">==</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_text</span><span class=\"p\">(</span><span class=\"n\">inline_query</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Query message is text</span>\n</pre>\n<h4>chosen_inline_handler</h4>\n<p>Use chosen_inline_handler to get chosen_inline_result in telebot. Don't forgot add the /setinlinefeedback\ncommand for @Botfather.</p>\n<p>More information : <a href=\"https://core.telegram.org/bots/inline#collecting-feedback\" rel=\"nofollow\">collecting-feedback</a></p>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">chosen_inline_handler</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">chosen_inline_result</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_chosen</span><span class=\"p\">(</span><span class=\"n\">chosen_inline_result</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Process all chosen_inline_result.</span>\n</pre>\n<h4>answer_inline_query</h4>\n<pre><span class=\"nd\">@bot</span><span class=\"o\">.</span><span class=\"n\">inline_handler</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"o\">==</span> <span class=\"s1\">'text'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">query_text</span><span class=\"p\">(</span><span class=\"n\">inline_query</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">InlineQueryResultArticle</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'Result'</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">InputTextMessageContent</span><span class=\"p\">(</span><span class=\"s1\">'Result message.'</span><span class=\"p\">))</span>\n        <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">InlineQueryResultArticle</span><span class=\"p\">(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'Result2'</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">InputTextMessageContent</span><span class=\"p\">(</span><span class=\"s1\">'Result message2.'</span><span class=\"p\">))</span>\n        <span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">answer_inline_query</span><span class=\"p\">(</span><span class=\"n\">inline_query</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">r2</span><span class=\"p\">])</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<h3>Working with entities:</h3>\n<p>This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.\nAttributes:</p>\n<ul>\n<li><code>type</code></li>\n<li><code>url</code></li>\n<li><code>offset</code></li>\n<li><code>length</code></li>\n<li><code>user</code></li>\n</ul>\n<p><strong>Here's an Example:</strong><code>message.entities[num].&lt;attribute&gt;</code><br>\nHere <code>num</code> is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.<br>\n<code>message.entities</code> returns a list of entities object. <br>\n<code>message.entities[0].type</code> would give the type of the first entity<br>\nRefer <a href=\"https://core.telegram.org/bots/api#messageentity\" rel=\"nofollow\">Bot Api</a> for extra details</p>\n<h2>Advanced use of the API</h2>\n<h3>Asynchronous delivery of messages</h3>\n<p>There exists an implementation of TeleBot which executes all <code>send_xyz</code> and the <code>get_me</code> functions asynchronously. This can speed up you bot <strong>significantly</strong>, but it has unwanted side effects if used without caution.\nTo enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.</p>\n<pre><span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">AsyncTeleBot</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now, every function that calls the Telegram API is executed in a separate Thread. The functions are modified to return an AsyncTask instance (defined in util.py). Using AsyncTeleBot allows you to do the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">telebot</span>\n\n<span class=\"n\">tb</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">AsyncTeleBot</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN\"</span><span class=\"p\">)</span>\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">get_me</span><span class=\"p\">()</span> <span class=\"c1\"># Execute an API call</span>\n<span class=\"c1\"># Do some other operations...</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n\t<span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span> <span class=\"c1\"># Get the result of the execution</span>\n</pre>\n<p><em>Note: if you execute send_xyz functions after eachother without calling wait(), the order in which messages are delivered might be wrong.</em></p>\n<h3>Sending large text messages</h3>\n<p>Sometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">telebot</span> <span class=\"kn\">import</span> <span class=\"n\">util</span>\n<span class=\"n\">large_text</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"large_text.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Split the text each 3000 characters.</span>\n<span class=\"c1\"># split_string returns a list with the splitted text.</span>\n<span class=\"n\">splitted_text</span> <span class=\"o\">=</span> <span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">split_string</span><span class=\"p\">(</span><span class=\"n\">large_text</span><span class=\"p\">,</span> <span class=\"mi\">3000</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">splitted_text</span><span class=\"p\">:</span>\n\t<span class=\"n\">tb</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n<h3>Controlling the amount of Threads used by TeleBot</h3>\n<p>The TeleBot constructor takes the following optional arguments:</p>\n<ul>\n<li>threaded: True/False (default True). A flag to indicate whether\nTeleBot should execute message handlers on it's polling Thread.</li>\n</ul>\n<h3>The listener mechanism</h3>\n<p>As an alternative to the message handlers, one can also register a function as a listener to TeleBot.</p>\n<p>NOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called.\nExample:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_messages</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">):</span>\n\t<span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n\t\t<span class=\"c1\"># Do something with the message</span>\n\t\t<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">reply_to</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"s1\">'Hi'</span><span class=\"p\">)</span>\n\n<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">set_update_listener</span><span class=\"p\">(</span><span class=\"n\">handle_messages</span><span class=\"p\">)</span>\n<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">polling</span><span class=\"p\">()</span>\n</pre>\n<h3>Using web hooks</h3>\n<p>When using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.</p>\n<p>There are some examples using webhooks in the <em>examples/webhook_examples</em> directory.</p>\n<h3>Logging</h3>\n<p>You can use the Telebot module logger to log debug info about Telebot. Use <code>telebot.logger</code> to get the logger of the TeleBot module.\nIt is possible to add custom logging Handlers to the logger. Refer to the <a href=\"https://docs.python.org/2/library/logging.html\" rel=\"nofollow\">Python logging module page</a> for more info.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">logger</span>\n<span class=\"n\">telebot</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span> <span class=\"c1\"># Outputs debug messages to console.</span>\n</pre>\n<h3>Proxy</h3>\n<p>You can use proxy for request. <code>apihelper.proxy</code> object will use by call <code>requests</code> proxies argument.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">telebot</span> <span class=\"kn\">import</span> <span class=\"n\">apihelper</span>\n\n<span class=\"n\">apihelper</span><span class=\"o\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'http'</span><span class=\"p\">:</span><span class=\"s1\">'http://10.10.1.10:3128'</span><span class=\"p\">}</span>\n</pre>\n<p>If you want to use socket5 proxy you need install dependency <code>pip install requests[socks]</code> and make sure, that you have the latest version of <code>gunicorn</code>, <code>PySocks</code>, <code>pyTelegramBotAPI</code>, <code>requests</code> and <code>urllib3</code>.</p>\n<pre><span class=\"n\">apihelper</span><span class=\"o\">.</span><span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'https'</span><span class=\"p\">:</span><span class=\"s1\">'socks5://userproxy:password@proxy_address:port'</span><span class=\"p\">}</span>\n</pre>\n<h2>API conformance</h2>\n<p><em>Checking is in progress...</em></p>\n<p>\u2705 <a href=\"https://core.telegram.org/bots/api-changelog#november-17-2017\" rel=\"nofollow\">Bot API 3.5</a> <em>- To be checked...</em></p>\n<ul>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#october-11-2017\" rel=\"nofollow\">Bot API 3.4</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#august-23-2017\" rel=\"nofollow\">Bot API 3.3</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#july-21-2017\" rel=\"nofollow\">Bot API 3.2</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#june-30-2017\" rel=\"nofollow\">Bot API 3.1</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#may-18-2017\" rel=\"nofollow\">Bot API 3.0</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#december-4-2016\" rel=\"nofollow\">Bot API 2.3.1</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#november-21-2016\" rel=\"nofollow\">Bot API 2.3</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#october-3-2016\" rel=\"nofollow\">Bot API 2.2</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#may-22-2016\" rel=\"nofollow\">Bot API 2.1</a></li>\n<li>\u2714 <a href=\"https://core.telegram.org/bots/api-changelog#april-9-2016\" rel=\"nofollow\">Bot API 2.0</a></li>\n</ul>\n<h2>Change log</h2>\n<p>27.04.2020 - Poll and Dice are up to date.\nPython2 conformance is not checked any more due to EOL.</p>\n<p>11.04.2020 - Refactoring. new_chat_member is out of support. Bugfix in html_text. Started Bot API conformance checking.</p>\n<p>06.06.2019 - Added polls support (Poll). Added functions send_poll, stop_poll</p>\n<h2>F.A.Q.</h2>\n<h3>Bot 2.0</h3>\n<p>April 9,2016 Telegram release new bot 2.0 API, which has a drastic revision especially for the change of method's interface.If you want to update to the latest version, please make sure you've switched bot's code to bot 2.0 method interface.</p>\n<p><a href=\"https://github.com/eternnoir/pyTelegramBotAPI/issues/130\" rel=\"nofollow\">More information about pyTelegramBotAPI support bot2.0</a></p>\n<h3>How can I distinguish a User and a GroupChat in message.chat?</h3>\n<p>Telegram Bot API support new type Chat for message.chat.</p>\n<ul>\n<li>Check the <code>type</code> attribute in <code>Chat</code> object:</li>\n<li>\n</ul>\n<pre><span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">\"private\"</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># private chat message</span>\n\n<span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">\"group\"</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># group chat message</span>\n\n<span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">\"supergroup\"</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># supergroup chat message</span>\n\n<span class=\"k\">if</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s2\">\"channel\"</span><span class=\"p\">:</span>\n\t<span class=\"c1\"># channel message</span>\n</pre>\n<h2>The Telegram Chat Group</h2>\n<p>Get help. Discuss. Chat.</p>\n<ul>\n<li>Join the <a href=\"https://telegram.me/joinchat/Bn4ixj84FIZVkwhk2jag6A\" rel=\"nofollow\">pyTelegramBotAPI Telegram Chat Group</a></li>\n<li>We now have a Telegram Channel as well! Keep yourself up to date with API changes, and <a href=\"https://telegram.me/pytelegrambotapi\" rel=\"nofollow\">join it</a>.</li>\n</ul>\n<h2>More examples</h2>\n<ul>\n<li><a href=\"https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/echo_bot.py\" rel=\"nofollow\">Echo Bot</a></li>\n<li><a href=\"https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/deep_linking.py\" rel=\"nofollow\">Deep Linking</a></li>\n<li><a href=\"https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/step_example.py\" rel=\"nofollow\">next_step_handler Example</a></li>\n</ul>\n<h2>Bots using this API</h2>\n<ul>\n<li><a href=\"https://telegram.me/SiteAlert_bot\" rel=\"nofollow\">SiteAlert bot</a> (<a href=\"https://github.com/ilteoood/SiteAlert-Python\" rel=\"nofollow\">source</a>) by <em>ilteoood</em> - Monitors websites and sends a notification on changes</li>\n<li><a href=\"https://github.com/aRandomStranger/TelegramLoggingBot\" rel=\"nofollow\">TelegramLoggingBot</a> by <em>aRandomStranger</em></li>\n<li><a href=\"https://telegram.me/Send2KindleBot\" rel=\"nofollow\">Send to Kindle Bot</a> by <em>GabrielRF</em> - Send to Kindle files or links to files.</li>\n<li><a href=\"https://github.com/GabrielRF/telegram-lmgtfy_bot\" rel=\"nofollow\">Telegram LMGTFY_bot</a> (<a href=\"https://github.com/GabrielRF/telegram-lmgtfy_bot\" rel=\"nofollow\">source</a>) by <em>GabrielRF</em> - Let me Google that for you.</li>\n<li><a href=\"https://github.com/GabrielRF/telegram-urlprobot\" rel=\"nofollow\">Telegram UrlProBot</a> (<a href=\"https://github.com/GabrielRF/telegram-urlprobot\" rel=\"nofollow\">source</a>) by <em>GabrielRF</em> - URL shortener and URL expander.</li>\n<li><a href=\"https://bitbucket.org/master_groosha/telegram-proxy-bot\" rel=\"nofollow\">Telegram Proxy Bot</a> by <em>Groosha</em> - A simple BITM (bot-in-the-middle) for Telegram acting as some kind of \"proxy\".</li>\n<li><a href=\"https://github.com/mrgigabyte/proxybot\" rel=\"nofollow\">Telegram Proxy Bot</a> by <em>mrgigabyte</em> - <code>Credits for the original version of this bot goes to</code> <strong>Groosha</strong> <code>, simply added certain features which I thought were needed</code>.</li>\n<li><a href=\"https://github.com/Tronikart/RadRetroRobot\" rel=\"nofollow\">RadRetroRobot</a> by <em>Tronikart</em> - Multifunctional Telegram Bot RadRetroRobot.</li>\n<li><a href=\"https://telegram.me/League_of_Legends_bot\" rel=\"nofollow\">League of Legends bot</a> (<a href=\"https://github.com/i32ropie/lol\" rel=\"nofollow\">source</a>) by <em>i32ropie</em></li>\n<li><a href=\"https://github.com/neoranger/NeoBot\" rel=\"nofollow\">NeoBot</a> by <a href=\"https://github.com/neoranger\" rel=\"nofollow\">@NeoRanger</a></li>\n<li><a href=\"https://github.com/pitasi/TagAlertBot\" rel=\"nofollow\">TagAlertBot</a> by <em>pitasi</em></li>\n<li><a href=\"http://telegram.me/ComedoresUGRbot\" rel=\"nofollow\">ComedoresUGRbot</a> (<a href=\"https://github.com/alejandrocq/ComedoresUGRbot\" rel=\"nofollow\">source</a>) by <a href=\"https://github.com/alejandrocq\" rel=\"nofollow\"><em>alejandrocq</em></a> - Telegram bot to check the menu of Universidad de Granada dining hall.</li>\n<li><a href=\"https://web.telegram.org/#/im?p=%40picpingbot\" rel=\"nofollow\">picpingbot</a> - Fun anonymous photo exchange by Boogie Muffin.</li>\n<li><a href=\"https://github.com/WebShark025/TheZigZagProject\" rel=\"nofollow\">TheZigZagProject</a> - The 'All In One' bot for Telegram! by WebShark025</li>\n<li><a href=\"https://github.com/p-hash/proxybot\" rel=\"nofollow\">proxybot</a> - Simple Proxy Bot for Telegram. by p-hash</li>\n<li><a href=\"https://github.com/vfranch/DonantesMalagaBot\" rel=\"nofollow\">DonantesMalagaBot</a>- DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch</li>\n<li><a href=\"https://github.com/DmytryiStriletskyi/DuttyBot\" rel=\"nofollow\">DuttyBot</a> by <em>Dmytryi Striletskyi</em> - Timetable for one university in Kiev.</li>\n<li><a href=\"https://telegram.me/dailypepebot\" rel=\"nofollow\">dailypepebot</a> by <a href=\"https://github.com/jiwidi/Dailypepe\" rel=\"nofollow\"><em>Jaime</em></a> - Get's you random pepe images and gives you their id, then you can call this image with the number.</li>\n<li><a href=\"https://t.me/DailyQwertee\" rel=\"nofollow\">DailyQwertee</a> by <a href=\"https://github.com/jiwidi/DailyQwertee\" rel=\"nofollow\"><em>Jaime</em></a> - Bot that manages a channel that sends qwertee daily tshirts every day at 00:00</li>\n<li><a href=\"https://github.com/rmed/wat-bridge\" rel=\"nofollow\">wat-bridge</a> by <a href=\"https://github.com/rmed\" rel=\"nofollow\"><em>rmed</em></a> - Send and receive messages to/from WhatsApp through Telegram</li>\n<li><a href=\"https://github.com/Kurbezz/flibusta_bot\" rel=\"nofollow\">flibusta_bot</a> by <a href=\"https://github.com/Kurbezz\" rel=\"nofollow\"><em>Kurbezz</em></a></li>\n<li><a href=\"https://github.com/halkliff/emaproject\" rel=\"nofollow\">EmaProject</a> by <a href=\"https://github.com/halkliff\" rel=\"nofollow\"><em>halkliff</em></a> - Ema - Eastern Media Assistant was made thinking on the ease-to-use feature. Coding here is simple, as much as is fast and powerful.</li>\n<li><a href=\"http://t.me/filmratingbot\" rel=\"nofollow\">filmratingbot</a>(<a href=\"https://github.com/jcolladosp/film-rating-bot\" rel=\"nofollow\">source</a>) by <a href=\"https://github.com/jcolladosp\" rel=\"nofollow\"><em>jcolladosp</em></a> - Telegram bot using the Python API that gets films rating from IMDb and metacritic</li>\n<li><a href=\"http://t.me/you2mp3bot\" rel=\"nofollow\">you2mp3bot</a>(<a href=\"https://storebot.me/bot/you2mp3bot\" rel=\"nofollow\">link</a>) - This bot can convert a Youtube video to Mp3. All you need is send the URL video.</li>\n<li><a href=\"http://t.me/Send2KindleBot\" rel=\"nofollow\">Send2Kindlebot</a> (<a href=\"https://github.com/GabrielRF/Send2KindleBot\" rel=\"nofollow\">source</a>) by <em>GabrielRF</em> - Send to Kindle service.</li>\n<li><a href=\"http://t.me/RastreioBot\" rel=\"nofollow\">RastreioBot</a> (<a href=\"https://github.com/GabrielRF/RastreioBot\" rel=\"nofollow\">source</a>) by <em>GabrielRF</em> - Bot used to track packages on the Brazilian Mail Service.</li>\n<li><a href=\"http://t.me/filex_bot\" rel=\"nofollow\">filex_bot</a>(<a href=\"https://github.com/victor141516/FileXbot-telegram\" rel=\"nofollow\">link</a>)</li>\n<li><a href=\"http://t.me/Spbu4UBot\" rel=\"nofollow\">Spbu4UBot</a>(<a href=\"https://github.com/EeOneDown/spbu4u\" rel=\"nofollow\">link</a>) by <em>EeOneDown</em> - Bot with timetables for SPbU students.</li>\n<li><a href=\"http://t.me/ZDU_bot\" rel=\"nofollow\">SmartySBot</a>(<a href=\"https://github.com/0xVK/SmartySBot\" rel=\"nofollow\">link</a>) by <em>0xVK</em> - Telegram timetable bot, for Zhytomyr Ivan Franko State University students.</li>\n<li><a href=\"http://t.me/yandex_music_bot\" rel=\"nofollow\">yandex_music_bot</a>- Downloads tracks/albums/public playlists from Yandex.Music streaming service for free.</li>\n<li><a href=\"https://t.me/LearnItbot\" rel=\"nofollow\">LearnIt</a>(<a href=\"https://github.com/tiagonapoli/LearnIt\" rel=\"nofollow\">link</a>) - A Telegram Bot created to help people to memorize other languages\u2019 vocabulary.</li>\n<li><a href=\"https://t.me/MusicQuiz_bot\" rel=\"nofollow\">MusicQuiz_bot</a> by <a href=\"https://github.com/Etoneja\" rel=\"nofollow\">Etoneja</a> - Listen to audio samples and try to name the performer of the song.</li>\n<li><a href=\"https://github.com/rubenleon/Bot-Telegram-Shodan\" rel=\"nofollow\">Bot-Telegram-Shodan </a> by <a href=\"https://github.com/rubenleon\" rel=\"nofollow\">rubenleon</a></li>\n<li><a href=\"https://t.me/MandangoBot\" rel=\"nofollow\">MandangoBot</a> by @Alvaricias - Bot for managing Marvel Strike Force alliances (only in spanish, atm).</li>\n<li><a href=\"https://t.me/ManjaroBot\" rel=\"nofollow\">ManjaroBot</a> by <a href=\"https://github.com/neoranger\" rel=\"nofollow\">@NeoRanger</a> - Bot for Manjaro Linux Spanish group with a lot of info for Manjaro Newbies.</li>\n<li><a href=\"https://t.me/vigobusbot\" rel=\"nofollow\">VigoBusTelegramBot</a> (<a href=\"https://github.com/Pythoneiro/VigoBus-TelegramBot\" rel=\"nofollow\">GitHub</a>) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)</li>\n<li><a href=\"https://t.me/kaishnik_bot\" rel=\"nofollow\">kaishnik-bot</a> (<a href=\"https://github.com/airatk/kaishnik-bot\" rel=\"nofollow\">source</a>) by <em>airatk</em> - bot which shows all the necessary information to KNTRU-KAI students.</li>\n<li><a href=\"https://t.me/creationdatebot\" rel=\"nofollow\">Creation Date</a> by @karipov - interpolates account creation dates based on telegram given ID\u2019s</li>\n<li><a href=\"https://t.me/m0xbot\" rel=\"nofollow\">m0xbot</a> by <a href=\"https://github.com/kor0p\" rel=\"nofollow\">kor0p</a> - tic-tac-toe.</li>\n<li><a href=\"https://t.me/kboardbot\" rel=\"nofollow\">kboardbot</a> by <a href=\"https://github.com/kor0p\" rel=\"nofollow\">kor0p</a> - inline switches keyboard layout (English, Hebrew, Ukrainian, Russian).</li>\n<li><a href=\"https://t.me/romdeliverybot\" rel=\"nofollow\">Robbie</a> (<a href=\"https://github.com/FacuM/romdeliverybot_support\" rel=\"nofollow\">source</a>) by @FacuM - Support Telegram bot for developers and maintainers.</li>\n<li><a href=\"https://t.me/asadov_bot\" rel=\"nofollow\">AsadovBot</a> (<a href=\"https://github.com/desexcile/BotApi\" rel=\"nofollow\">source</a>) by @DesExcile - \u0421atalog of poems by Eduard Asadov.</li>\n<li><a href=\"https://t.me/thesaurus_com_bot\" rel=\"nofollow\">thesaurus_com_bot</a> (<a href=\"https://github.com/LeoSvalov/words-i-learn-bot\" rel=\"nofollow\">source</a>) by @LeoSvalov - words and synonyms from <a href=\"https://www.dictionary.com\" rel=\"nofollow\">dictionary.com</a> and <a href=\"https://www.thesaurus.com\" rel=\"nofollow\">thesaurus.com</a> in the telegram.</li>\n<li><a href=\"https://t.me/info2019_bot\" rel=\"nofollow\">InfoBot</a> (<a href=\"https://github.com/irevenko/info-bot\" rel=\"nofollow\">source</a>) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)</li>\n</ul>\n<p>Want to have your bot listed here? Send a Telegram message to @eternnoir or @pevdh.</p>\n\n          </div>"}, "last_serial": 7151091, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1215610d545840313bd457b8212d8e6b", "sha256": "424241387c04ed9a9a74157507e5d88eb6dab9a1fea65460506d2103a6992a2c"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.tar.gz", "has_sig": false, "md5_digest": "1215610d545840313bd457b8212d8e6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3193, "upload_time": "2015-06-26T14:50:02", "upload_time_iso_8601": "2015-06-26T14:50:02.698853Z", "url": "https://files.pythonhosted.org/packages/f3/1f/243d1ad79afd8938ccfa38c97eee4982491dc6601078a01a62f9f42afac0/pyTelegramBotAPI-0.1.tar.gz", "yanked": false}], "0.1.1": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "08d91b0d07ff049f29a23e0b36bb438b", "sha256": "e2d01553b255f1b0b4c638c0cd7f9a800196209d80eb37ed0021b3e7be490c63"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.2.tar.gz", "has_sig": false, "md5_digest": "08d91b0d07ff049f29a23e0b36bb438b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3348, "upload_time": "2015-06-26T15:11:10", "upload_time_iso_8601": "2015-06-26T15:11:10.614057Z", "url": "https://files.pythonhosted.org/packages/40/2b/a818506e1b83c1a945859bd5c7b3f36a49389a83d338086d9a2f30dcf867/pyTelegramBotAPI-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "41c5a1253c9a4f631378491d9fa720dc", "sha256": "1ac81aff0e6749447a30a4e4da63345f6327b4b6d754ccf492a544e4f0971fda"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.3.tar.gz", "has_sig": false, "md5_digest": "41c5a1253c9a4f631378491d9fa720dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3770, "upload_time": "2015-06-27T02:29:54", "upload_time_iso_8601": "2015-06-27T02:29:54.535971Z", "url": "https://files.pythonhosted.org/packages/2f/de/de3d6a1a1eac533bd1951db72909f9941343fc49ca0e989072861051b707/pyTelegramBotAPI-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "31f7431cee096feacc590b0318441641", "sha256": "2eefcfed3e5284ecbc618fc9ad4d92089e6a1629f0d9ee709d7b8130e96cabba"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.5.tar.gz", "has_sig": false, "md5_digest": "31f7431cee096feacc590b0318441641", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3993, "upload_time": "2015-06-27T14:32:15", "upload_time_iso_8601": "2015-06-27T14:32:15.570574Z", "url": "https://files.pythonhosted.org/packages/e3/0a/c27f47a113053d88dabda65535736084e12e3d59bb550511c3d415effc05/pyTelegramBotAPI-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "03ac441c107de08e98696510dd703872", "sha256": "b6ff6711fb0ad01a88dfceb72bbe894a736b16ea4b73285a6cff86a30b9e79ea"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.6.tar.gz", "has_sig": false, "md5_digest": "03ac441c107de08e98696510dd703872", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4492, "upload_time": "2015-06-28T09:39:50", "upload_time_iso_8601": "2015-06-28T09:39:50.248865Z", "url": "https://files.pythonhosted.org/packages/eb/30/b58cc8cbf8d73cb1b2dbf80e0b36c66523b765148112e97f59138e586164/pyTelegramBotAPI-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4ed2c0d234c5e04334b30b2b4334e6b3", "sha256": "b123b24ae06b290a308a7149f3f79a41bd27f808ce2f96b227fef6bb336379ff"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.7.tar.gz", "has_sig": false, "md5_digest": "4ed2c0d234c5e04334b30b2b4334e6b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4671, "upload_time": "2015-06-28T10:03:35", "upload_time_iso_8601": "2015-06-28T10:03:35.954011Z", "url": "https://files.pythonhosted.org/packages/8c/98/e6187f8d0aafb85ad67f04e0093a0e2d06f06a0fad41cc5984aa7e0d5d5e/pyTelegramBotAPI-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "9b24d3ed2a3560bbf1701b55ca1f9397", "sha256": "4804c4710bf173d3a9f3aed714c2cb95b16916638e8ae3c89bb18d893ffdfdcb"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.8.tar.gz", "has_sig": false, "md5_digest": "9b24d3ed2a3560bbf1701b55ca1f9397", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5124, "upload_time": "2015-06-30T05:32:16", "upload_time_iso_8601": "2015-06-30T05:32:16.868507Z", "url": "https://files.pythonhosted.org/packages/8b/5d/7125089867cc134b4d105c3096895a60a6a7ac143f9de3db87ef3f688f1b/pyTelegramBotAPI-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "8f63611abdd0ab0a9e25cb67b9fe9d53", "sha256": "7d0e72f83e39def2a16e434fafb69d74670bbfe6fbbb6547e8c955867143009f"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.1.9.tar.gz", "has_sig": false, "md5_digest": "8f63611abdd0ab0a9e25cb67b9fe9d53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5536, "upload_time": "2015-07-02T03:49:27", "upload_time_iso_8601": "2015-07-02T03:49:27.472560Z", "url": "https://files.pythonhosted.org/packages/c9/da/75429e0b20031e6fd4fd24dfd1361828733e48ec3ea970ee229e594b7174/pyTelegramBotAPI-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "17e4f27b2ca456bdd955ac6b96ccfdc5", "sha256": "fe30f9c26e0f500a912477d7491017d83027f17ac4367e9786e6d0cfaa560650"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.0.tar.gz", "has_sig": false, "md5_digest": "17e4f27b2ca456bdd955ac6b96ccfdc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7638, "upload_time": "2015-07-03T02:35:51", "upload_time_iso_8601": "2015-07-03T02:35:51.082215Z", "url": "https://files.pythonhosted.org/packages/76/40/24095b63c6c28e5c4de8c8491c53c96de71bf231c7aef1b863729c6d9492/pyTelegramBotAPI-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "69b6e25be8b9deca3fe276b4731c50cf", "sha256": "a9fd49b00443a887ff838ecfdba2b1ba12c47488831bd371078fe0e5f297c7d4"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.1.tar.gz", "has_sig": false, "md5_digest": "69b6e25be8b9deca3fe276b4731c50cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8074, "upload_time": "2015-07-08T03:44:21", "upload_time_iso_8601": "2015-07-08T03:44:21.642377Z", "url": "https://files.pythonhosted.org/packages/76/b5/7552c8c1d08eac75d9788d1d68e81643954a2c36faaf958c177c5a37ab10/pyTelegramBotAPI-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a0a8d6a9a3afd65408135d878ee80698", "sha256": "0c0a4d393988e49c2a0c3e74524208d73d81b17f6e5cad0595f8ef39937414e1"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a0a8d6a9a3afd65408135d878ee80698", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8075, "upload_time": "2015-07-09T02:42:16", "upload_time_iso_8601": "2015-07-09T02:42:16.780032Z", "url": "https://files.pythonhosted.org/packages/31/29/f97d91c6c6b5f88b4d5e93e95742cbcdae637fad43dfbd19d693155b485e/pyTelegramBotAPI-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0ac12d42b8f40ce8925464c51f4d61cb", "sha256": "976e12b6232b0130273c3a4b2550e62bd40d2c4956dfa22655a0144991690526"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0ac12d42b8f40ce8925464c51f4d61cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8125, "upload_time": "2015-07-13T11:33:57", "upload_time_iso_8601": "2015-07-13T11:33:57.979006Z", "url": "https://files.pythonhosted.org/packages/d9/ce/be146923d70e855eec4aa27b8bace4bba565e2546fa5f073744f5be59030/pyTelegramBotAPI-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c4ded75d8e4a221cfeb0b3b406d5e822", "sha256": "9c488a2cb464cbf0569d1583362831d0a2fdb177a75923f75972aa4daaf112b1"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c4ded75d8e4a221cfeb0b3b406d5e822", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8202, "upload_time": "2015-07-15T03:30:34", "upload_time_iso_8601": "2015-07-15T03:30:34.860599Z", "url": "https://files.pythonhosted.org/packages/c9/c1/34a63617a002cd975e86903f327dabe6b26c6d00801b02ec63585a1e0c98/pyTelegramBotAPI-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "e46f99cdba102c3c378b623305df857c", "sha256": "feadbe6e75bfe5bdd2ab04befba78ffec9fdb6f783193084c2ddcc91749286cc"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.5.tar.gz", "has_sig": false, "md5_digest": "e46f99cdba102c3c378b623305df857c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8244, "upload_time": "2015-07-17T01:44:47", "upload_time_iso_8601": "2015-07-17T01:44:47.058073Z", "url": "https://files.pythonhosted.org/packages/a9/9a/b1028ebf46a871c96689b6101ea1b62e5be8ce82056e8c410e3af27b3703/pyTelegramBotAPI-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c6d755196f77605f911215d5c1e18f4e", "sha256": "3afefcf50522341b3f9c9e912538731105bfedf292389c749d14455efc42b946"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.6.tar.gz", "has_sig": false, "md5_digest": "c6d755196f77605f911215d5c1e18f4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8388, "upload_time": "2015-07-20T02:44:45", "upload_time_iso_8601": "2015-07-20T02:44:45.660030Z", "url": "https://files.pythonhosted.org/packages/52/14/715faddd104c0d5e361e09e0a264c2b6e9e038fb6ba113ca3c197d9ce27b/pyTelegramBotAPI-0.2.6.tar.gz", "yanked": false}], "0.2.6.1": [], "0.2.7": [{"comment_text": "", "digests": {"md5": "00c9846672b6924f6168e0c2e7d78806", "sha256": "ed6adf8f2447b1b87480f7b5d0834b600f099d48d1d11cf563bed9d1b566c378"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.7.tar.gz", "has_sig": false, "md5_digest": "00c9846672b6924f6168e0c2e7d78806", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8394, "upload_time": "2015-07-23T01:18:26", "upload_time_iso_8601": "2015-07-23T01:18:26.382621Z", "url": "https://files.pythonhosted.org/packages/0c/56/c87754ac542d586c3694c59c6cbdef5f4ccbaf7b248b0f7d0610dcfab683/pyTelegramBotAPI-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "afc0c075e1836b1259107ba529ca292a", "sha256": "89cf465798919e78c123647d78daa997b49f99d8b46ca838a8984f6f359d3103"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.8.tar.gz", "has_sig": false, "md5_digest": "afc0c075e1836b1259107ba529ca292a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9127, "upload_time": "2015-07-30T01:10:48", "upload_time_iso_8601": "2015-07-30T01:10:48.561993Z", "url": "https://files.pythonhosted.org/packages/66/5a/9fd429591c49590f714ba9730f9e3edc77186b5817bf87f573a01f90a28f/pyTelegramBotAPI-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "ebd54ea039169304f7c74ad03fbfc430", "sha256": "41f1cd9f48a106f8a720b5e16267dc29001f9301c169fac397f9a34b7c7dadb2"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.2.9.tar.gz", "has_sig": false, "md5_digest": "ebd54ea039169304f7c74ad03fbfc430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9514, "upload_time": "2015-08-01T02:22:29", "upload_time_iso_8601": "2015-08-01T02:22:29.218873Z", "url": "https://files.pythonhosted.org/packages/67/4b/848d581154d5dc9dc79141e7c22defe547e012b9bbec6e919dc6869ac969/pyTelegramBotAPI-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "32822a00b93e129cd630e9c3828264f8", "sha256": "a43a6f013e3fc9f32ce1598e9310d774c67ec2dfe0a0c8f472edea546d3964be"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.0.tar.gz", "has_sig": false, "md5_digest": "32822a00b93e129cd630e9c3828264f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9535, "upload_time": "2015-08-14T07:50:40", "upload_time_iso_8601": "2015-08-14T07:50:40.623816Z", "url": "https://files.pythonhosted.org/packages/f6/ef/2f1389a0c4598e3703c52b59b965dce5bdc26d3810ef399c86cbab21c683/pyTelegramBotAPI-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "64e4c23207e420573e795aedd27f8b92", "sha256": "ccd232e1535a9cf2a9d4fe34648066cd8da0bc1b59fb368f3fcc18ae2549c127"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.1.tar.gz", "has_sig": false, "md5_digest": "64e4c23207e420573e795aedd27f8b92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9862, "upload_time": "2015-08-19T10:37:40", "upload_time_iso_8601": "2015-08-19T10:37:40.210838Z", "url": "https://files.pythonhosted.org/packages/7d/e6/b5f3f7646d5e0e0bc418fbe995470a42d01bb5b7bb49fb0cfdeeeb20575b/pyTelegramBotAPI-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ede609968d659f03ef1ff86a0fe5d5a5", "sha256": "c020e4c7e7065a143ba43fce424691f6aad414c881892d053698e8e3d57477ce"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ede609968d659f03ef1ff86a0fe5d5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13438, "upload_time": "2015-08-21T16:00:35", "upload_time_iso_8601": "2015-08-21T16:00:35.553513Z", "url": "https://files.pythonhosted.org/packages/83/f2/6ab0e7027094b0d8e211e918d2d6a5229ab754d35275564d58368c62fc2a/pyTelegramBotAPI-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "da1cbef71e31690f7822abaae948d603", "sha256": "5a01c9ca1e7dceae9ed7b931d2b7c6c0729794e46b08507e26b6d82036a75416"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.3.tar.gz", "has_sig": false, "md5_digest": "da1cbef71e31690f7822abaae948d603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13457, "upload_time": "2015-08-23T14:55:57", "upload_time_iso_8601": "2015-08-23T14:55:57.774667Z", "url": "https://files.pythonhosted.org/packages/a3/b5/3ec42b1badb0af1d2c30ac5de6c3d1b2bb6202445c4bda6ea59c1ae69979/pyTelegramBotAPI-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "acc19f3eb5f45a5c3122e14ff245d09a", "sha256": "56e0fa9c9770db49c830e8b36a149d217a84aeb9da0223e4308dd9c4f252aa83"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.4.tar.gz", "has_sig": false, "md5_digest": "acc19f3eb5f45a5c3122e14ff245d09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17753, "upload_time": "2015-09-09T02:46:35", "upload_time_iso_8601": "2015-09-09T02:46:35.850875Z", "url": "https://files.pythonhosted.org/packages/8c/6b/c91f704d03a2a6f083be85c12ca0760bd0228d79fd1304c9783978f5383f/pyTelegramBotAPI-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "5a6bf2c6c19fc5e649b6113491d5025a", "sha256": "4145b709cf678a38009b8cc34889e41fd89bb9fd73f9f1d96df8660bd2c186ea"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.5.tar.gz", "has_sig": false, "md5_digest": "5a6bf2c6c19fc5e649b6113491d5025a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17772, "upload_time": "2015-09-10T13:56:37", "upload_time_iso_8601": "2015-09-10T13:56:37.529625Z", "url": "https://files.pythonhosted.org/packages/37/bf/1492f9607aab203700e7511e58a57220b55fff8047d2889f1067594d47b3/pyTelegramBotAPI-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "165a2d785215de5f46fc310ef5803765", "sha256": "7ad28fbc20f8d2fe8b408b3f2bad384f318ae54e68d575a599965504442f6b8a"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.6.tar.gz", "has_sig": false, "md5_digest": "165a2d785215de5f46fc310ef5803765", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18014, "upload_time": "2015-09-19T15:10:49", "upload_time_iso_8601": "2015-09-19T15:10:49.351361Z", "url": "https://files.pythonhosted.org/packages/ce/d8/4a63e17a7e1db52b90ed56b93def1938807c908e39bf9a5988a62a52b4fe/pyTelegramBotAPI-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "8339c049eb5cc597ad249047be99f56c", "sha256": "ffd79cae085d11df38cfa561d274591c91b4bea8c4960d8760d8a79a7b4cf817"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.7.tar.gz", "has_sig": false, "md5_digest": "8339c049eb5cc597ad249047be99f56c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18068, "upload_time": "2015-09-30T15:45:36", "upload_time_iso_8601": "2015-09-30T15:45:36.668529Z", "url": "https://files.pythonhosted.org/packages/61/e0/d9ce5b3f1bef443eb5709507bc85060139c315887f3e685069446e97a4b8/pyTelegramBotAPI-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "6fedc61feb2bf9dcba582f5e25f6753e", "sha256": "0ba66ed557fd0f884dae1c438e732bf1564f09b39e5e8c500a9d3b707fdd4487"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.8.tar.gz", "has_sig": false, "md5_digest": "6fedc61feb2bf9dcba582f5e25f6753e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18844, "upload_time": "2015-10-03T08:49:26", "upload_time_iso_8601": "2015-10-03T08:49:26.297259Z", "url": "https://files.pythonhosted.org/packages/62/aa/679c35e9fb658db3a3fe3fa8152cb6a3ecf8ab42f15d11fcc74f212af4a7/pyTelegramBotAPI-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "2aaad7e9acc51d7e970b8fc11a76f075", "sha256": "76ed2e8bc05c9de6392946963794ef3e74c0dcb0a232c208a52e33ef34589a0f"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.3.9.tar.gz", "has_sig": false, "md5_digest": "2aaad7e9acc51d7e970b8fc11a76f075", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20321, "upload_time": "2015-10-12T14:49:42", "upload_time_iso_8601": "2015-10-12T14:49:42.842251Z", "url": "https://files.pythonhosted.org/packages/45/31/7fea72140edad64f11d667397126ee602946fe9052672abb2edbebd807a1/pyTelegramBotAPI-0.3.9.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f128b450dc62aca12903db529f885f0a", "sha256": "aceb5adf62ffabca8e41be4d89f6bf529aa08ac8c62cbeb75ed74d0de0a1d02f"}, "downloads": -1, "filename": "pyTelegramBotAPI-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f128b450dc62aca12903db529f885f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20314, "upload_time": "2015-10-26T14:15:34", "upload_time_iso_8601": "2015-10-26T14:15:34.586202Z", "url": "https://files.pythonhosted.org/packages/30/1a/659a07f14a1324a01090c64892a0b619a07e44bb2d6307ac665366667a77/pyTelegramBotAPI-0.4.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "2a445e1446eea6df43881103d881b915", "sha256": "748916563066713421dfac4522b8a780dafc231ea42c97df4724d7454338e7b6"}, "downloads": -1, "filename": "pyTelegramBotAPI-1.4.0.tar.gz", "has_sig": false, "md5_digest": "2a445e1446eea6df43881103d881b915", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20315, "upload_time": "2015-10-26T14:26:47", "upload_time_iso_8601": "2015-10-26T14:26:47.365019Z", "url": "https://files.pythonhosted.org/packages/10/ed/7369cedc3d90c355df8b81cfc06f6f682dbb16bd09b691d40de5c09afef5/pyTelegramBotAPI-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "dc7f5cfeb775e805817d2ad9a4ad0f80", "sha256": "3189e30679f40bcc2eefce690b1fbd773dee13d47d50be768f87dd631f1eb3eb"}, "downloads": -1, "filename": "pyTelegramBotAPI-1.4.1.tar.gz", "has_sig": false, "md5_digest": "dc7f5cfeb775e805817d2ad9a4ad0f80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23098, "upload_time": "2016-01-06T13:37:10", "upload_time_iso_8601": "2016-01-06T13:37:10.106362Z", "url": "https://files.pythonhosted.org/packages/7c/cb/81ec17e4dd79e1faab8c571c56622042127666235c14d4325e416f58ffa8/pyTelegramBotAPI-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "5a577a5008c3e08b581d0797e5b2b2e2", "sha256": "c94a922c943c9f0ea1af881637331cdaf82186028d322816db5e1943b591b8cd"}, "downloads": -1, "filename": "pyTelegramBotAPI-1.4.2.tar.gz", "has_sig": false, "md5_digest": "5a577a5008c3e08b581d0797e5b2b2e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23356, "upload_time": "2016-02-27T03:56:16", "upload_time_iso_8601": "2016-02-27T03:56:16.344074Z", "url": "https://files.pythonhosted.org/packages/8b/7c/cec0f44a8f161d184402d0a382a2062479129325c427295fbb3ba9d92ac7/pyTelegramBotAPI-1.4.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "603b01437116a7ef6d9a2f2f20bb4a6d", "sha256": "5c76debcef224a830463f40b3ff711bff7c5f495faf664f6af254ea23b59edac"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.0.0.tar.gz", "has_sig": false, "md5_digest": "603b01437116a7ef6d9a2f2f20bb4a6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38447, "upload_time": "2016-04-18T05:40:05", "upload_time_iso_8601": "2016-04-18T05:40:05.074600Z", "url": "https://files.pythonhosted.org/packages/3c/60/49dbe774a23c7ee40df81b2961eaa24131722522b618c29b590a7190fa90/pyTelegramBotAPI-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "e4b6e632217a7c43e521a44c8b9a901d", "sha256": "2695c18091c928c897ae214f24cf4c5b1b77657dc2094a625790dceaab944302"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.0.1.tar.gz", "has_sig": false, "md5_digest": "e4b6e632217a7c43e521a44c8b9a901d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38451, "upload_time": "2016-04-19T00:20:09", "upload_time_iso_8601": "2016-04-19T00:20:09.410165Z", "url": "https://files.pythonhosted.org/packages/a4/2c/41aa2511d3f4c3a39d242aa99127f49b512cf2739c9270523c83e4d1e0fe/pyTelegramBotAPI-2.0.1.tar.gz", "yanked": false}], "2.0.2": [], "2.0.3": [{"comment_text": "", "digests": {"md5": "e1b0ae2b5bebd91094743d6ab0d99bf9", "sha256": "a8193d82a95e29bbacbce1f0c7d060591edc894f01d5f0bc90024ee2b71bd38a"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.0.3.tar.gz", "has_sig": false, "md5_digest": "e1b0ae2b5bebd91094743d6ab0d99bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38489, "upload_time": "2016-04-25T16:04:47", "upload_time_iso_8601": "2016-04-25T16:04:47.105599Z", "url": "https://files.pythonhosted.org/packages/c9/56/e98fa05ec3954a4dc039cb8429ee0d36065eaf9e0ff1cd62728c8fe24da5/pyTelegramBotAPI-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "f3f8c16b866c7173bddd97634ed8389a", "sha256": "b0b1043a358b47063d566490757135da9c92c85c926fe2687eead716e5de06da"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.0.4.tar.gz", "has_sig": false, "md5_digest": "f3f8c16b866c7173bddd97634ed8389a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38491, "upload_time": "2016-04-30T16:40:02", "upload_time_iso_8601": "2016-04-30T16:40:02.385491Z", "url": "https://files.pythonhosted.org/packages/b4/cc/0256e0e1ae1b93736a87ef89a13ab4cb85aa44f8f14c530175679bb87978/pyTelegramBotAPI-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "1f4cd161987203b4457d59dbc45c6472", "sha256": "6e23e97855aecbd442c70ab0e4d8704e6f6abbeb73f57dba1e1ad199c3be3a36"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.0.5.tar.gz", "has_sig": false, "md5_digest": "1f4cd161987203b4457d59dbc45c6472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38482, "upload_time": "2016-05-03T13:32:48", "upload_time_iso_8601": "2016-05-03T13:32:48.719204Z", "url": "https://files.pythonhosted.org/packages/fe/6c/7f70f2bdfcd78927ba3a89b3667867362055dfbca26e495d26824197923b/pyTelegramBotAPI-2.0.5.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "4367056ab1ab1a1be4736c3a9faed696", "sha256": "37f84b53835bece599bf4a527bf2119863be3379850c809c2c922930c395bd8c"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.0.tar.gz", "has_sig": false, "md5_digest": "4367056ab1ab1a1be4736c3a9faed696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38533, "upload_time": "2016-05-08T10:49:33", "upload_time_iso_8601": "2016-05-08T10:49:33.524292Z", "url": "https://files.pythonhosted.org/packages/c9/b4/5158cf07234ec62af5a339f9b67ee8cbb14312c2f591db4e5390f7a5853c/pyTelegramBotAPI-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "3f676c25d132905ff4318a076e8530f1", "sha256": "e90b3bd38f427da47c35d9277f721d645d997c363e2ea06f36b7283e3d4128b2"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.1.tar.gz", "has_sig": false, "md5_digest": "3f676c25d132905ff4318a076e8530f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38533, "upload_time": "2016-05-12T03:40:24", "upload_time_iso_8601": "2016-05-12T03:40:24.959735Z", "url": "https://files.pythonhosted.org/packages/2c/98/e024d40f5a948c3ab7b66b8a28ac63355f4d500217c2209d37e6732e410d/pyTelegramBotAPI-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "8e903d72986f295fd2dc245b407da9db", "sha256": "c61d1b1402a86e9a5b44dd725021955890c447c2fc0fc1ab2b45b0b1cf7582be"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.2.tar.gz", "has_sig": false, "md5_digest": "8e903d72986f295fd2dc245b407da9db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38549, "upload_time": "2016-05-20T06:59:00", "upload_time_iso_8601": "2016-05-20T06:59:00.408337Z", "url": "https://files.pythonhosted.org/packages/89/8a/29c680e2be8e00a8fdff8baa533bdf4ba2d2e7a8106a33ef19b9eef594cc/pyTelegramBotAPI-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "49e4b6663621600e32f116332b994224", "sha256": "03e91582dc84e7ea27422a37f1e22fd84c77e0c9245baff06a04d00245da7f3e"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.3.tar.gz", "has_sig": false, "md5_digest": "49e4b6663621600e32f116332b994224", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39336, "upload_time": "2016-06-07T12:31:33", "upload_time_iso_8601": "2016-06-07T12:31:33.340457Z", "url": "https://files.pythonhosted.org/packages/ef/90/dcf4094ec78feb298e3d0510ce3bacf879c821f530a46f215f70342d6a6d/pyTelegramBotAPI-2.1.3.tar.gz", "yanked": false}], "2.1.4": [{"comment_text": "", "digests": {"md5": "da06d6f6cf06a4bf092d4feffe891697", "sha256": "bfc01b5ad618cc001097a0842fc9213e8fc15cd8da88910ee11016c26ec058c6"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.4.tar.gz", "has_sig": false, "md5_digest": "da06d6f6cf06a4bf092d4feffe891697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39354, "upload_time": "2016-06-17T10:05:58", "upload_time_iso_8601": "2016-06-17T10:05:58.262431Z", "url": "https://files.pythonhosted.org/packages/be/d2/e84b2a918f0d02d9b36038f068004262f436ecd9163e79d3d0576d20897a/pyTelegramBotAPI-2.1.4.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "02f04ac4d5621c0560018278b070bd4d", "sha256": "8a178f438aec25fbf4a5aa43e4f4ec969f9bf0eb69039bb9c8be13b88830edfa"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.5.tar.gz", "has_sig": false, "md5_digest": "02f04ac4d5621c0560018278b070bd4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39404, "upload_time": "2016-07-06T02:28:34", "upload_time_iso_8601": "2016-07-06T02:28:34.388420Z", "url": "https://files.pythonhosted.org/packages/31/09/3fbccb4f07b3c1805f68a288d143097ac225f82ee26f84cb643664f71488/pyTelegramBotAPI-2.1.5.tar.gz", "yanked": false}], "2.1.6": [{"comment_text": "", "digests": {"md5": "8b18e0094239047f2f349db5e5502b1c", "sha256": "5dec0e93934602893fa58e51aabecfc98ac95f930f35123abf879e1fa676fcd7"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.6.tar.gz", "has_sig": false, "md5_digest": "8b18e0094239047f2f349db5e5502b1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39437, "upload_time": "2016-08-29T13:50:59", "upload_time_iso_8601": "2016-08-29T13:50:59.913156Z", "url": "https://files.pythonhosted.org/packages/8f/71/dbe2944da77608900291d9e8ffbb8c48bbb5c5e6ed893933fb607fe70e2a/pyTelegramBotAPI-2.1.6.tar.gz", "yanked": false}], "2.1.7": [{"comment_text": "", "digests": {"md5": "35616d4ccd323430101d09c4d98c532f", "sha256": "2f8d6623092a13e0ba7105735b00d4f8a09a0c8f378c473407b7018d81704abf"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.1.7.tar.gz", "has_sig": false, "md5_digest": "35616d4ccd323430101d09c4d98c532f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39493, "upload_time": "2016-09-16T23:50:22", "upload_time_iso_8601": "2016-09-16T23:50:22.138132Z", "url": "https://files.pythonhosted.org/packages/48/97/7d90580fd204697f1aeddd3a1bf9615d2247cda23a0a5798149be650393d/pyTelegramBotAPI-2.1.7.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "3363517646f0cec4fd3749897cd2fe39", "sha256": "2372550d7b208d1778ab7842c9167c1d6e2c23bc76f5b2993af5e17890ac6d13"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.2.0.tar.gz", "has_sig": false, "md5_digest": "3363517646f0cec4fd3749897cd2fe39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41099, "upload_time": "2016-10-29T13:47:48", "upload_time_iso_8601": "2016-10-29T13:47:48.714219Z", "url": "https://files.pythonhosted.org/packages/28/7c/4f7e9eeae189e3c8eb0936764863041e6fa0e0cb3b406a918ba763847791/pyTelegramBotAPI-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "4fd56d5591c83b794b9ccf4c5e8afdf4", "sha256": "f113b158e356185f9a6f16e9d76f9d44191e9e7fb614123ab1f8bfb57aaf8167"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.2.1.tar.gz", "has_sig": false, "md5_digest": "4fd56d5591c83b794b9ccf4c5e8afdf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41101, "upload_time": "2016-10-29T23:05:44", "upload_time_iso_8601": "2016-10-29T23:05:44.471038Z", "url": "https://files.pythonhosted.org/packages/2d/2c/94b7697ee0012f5aeb2ba3b40340610f3a1c7b463f672feb0ad555958e83/pyTelegramBotAPI-2.2.1.tar.gz", "yanked": false}], "2.2.2": [{"comment_text": "", "digests": {"md5": "b73748bf451ae94a848d3499300c432f", "sha256": "55328a6ebae0827500b84cfc8621c93fc826cd64f5cff1e7d4e436da28b70dab"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.2.2.tar.gz", "has_sig": false, "md5_digest": "b73748bf451ae94a848d3499300c432f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41109, "upload_time": "2016-10-30T16:35:38", "upload_time_iso_8601": "2016-10-30T16:35:38.207974Z", "url": "https://files.pythonhosted.org/packages/3e/29/06ee901eb68739d2a1a08c79a21023cbc13bee4bc78afa608c7faad1e96a/pyTelegramBotAPI-2.2.2.tar.gz", "yanked": false}], "2.2.3": [{"comment_text": "", "digests": {"md5": "b8f9dabb5747f5b8f4b642b5deb7265b", "sha256": "b09d04c9b0988fc166eef61c9530d6f92b107039cd7484a8ce0b5ce2bb24c2f6"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.2.3.tar.gz", "has_sig": false, "md5_digest": "b8f9dabb5747f5b8f4b642b5deb7265b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41115, "upload_time": "2016-10-31T17:25:47", "upload_time_iso_8601": "2016-10-31T17:25:47.888403Z", "url": "https://files.pythonhosted.org/packages/42/b2/3d02176822be09a7eae8081a16b1e28b13b63c8b04796ebedbd70b834e47/pyTelegramBotAPI-2.2.3.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "209d59468d7f85a022e45405a06d9258", "sha256": "03f8fb1c769109264486745a9dbbd757f18b576fcae5834ebe16b85fe60dbd2c"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.3.0.tar.gz", "has_sig": false, "md5_digest": "209d59468d7f85a022e45405a06d9258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42189, "upload_time": "2016-12-06T04:10:35", "upload_time_iso_8601": "2016-12-06T04:10:35.794567Z", "url": "https://files.pythonhosted.org/packages/1c/9c/50a310362bdc7e60ef78f400449caf220c0ca7c7db4375ed0217ced86b44/pyTelegramBotAPI-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "ab0a0523a60d19e08b932b73ddac2829", "sha256": "32a3f2f764c35afc230b3c2e0cd641a8f79eee71488c3f0800d0d5d5698ab738"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.3.1.tar.gz", "has_sig": false, "md5_digest": "ab0a0523a60d19e08b932b73ddac2829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42509, "upload_time": "2017-03-04T13:53:55", "upload_time_iso_8601": "2017-03-04T13:53:55.308962Z", "url": "https://files.pythonhosted.org/packages/b9/2c/749fea68c89a633f33660b0152294c669616c12a3b8a6129e6dee6863510/pyTelegramBotAPI-2.3.1.tar.gz", "yanked": false}], "2.3.2": [{"comment_text": "", "digests": {"md5": "f5f172ed2021510031d2016299de2d29", "sha256": "5576307523c27a0f78843b0414be4182b99134c87d8a1bb731529198ae0dae68"}, "downloads": -1, "filename": "pyTelegramBotAPI-2.3.2.tar.gz", "has_sig": false, "md5_digest": "f5f172ed2021510031d2016299de2d29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42542, "upload_time": "2017-04-30T12:38:25", "upload_time_iso_8601": "2017-04-30T12:38:25.348875Z", "url": "https://files.pythonhosted.org/packages/f1/8c/9324907a4d060a5b151768646822033414c54c0773082cd9928a3674bba6/pyTelegramBotAPI-2.3.2.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "90d651715fe0f5818c85d9460bf74c52", "sha256": "7cefa822dc50de6bce74f2f1fe1f0d50811bcf3176d43ddc1b3bec039c258dcd"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.0.0.tar.gz", "has_sig": false, "md5_digest": "90d651715fe0f5818c85d9460bf74c52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47958, "upload_time": "2017-05-25T05:37:29", "upload_time_iso_8601": "2017-05-25T05:37:29.003521Z", "url": "https://files.pythonhosted.org/packages/31/2d/e58c09aa3c3de6d1d6e5ff3a613d72c4ef192812c7019d8c679b0e0c5017/pyTelegramBotAPI-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "2dad0c95a6ed993e43e95e3c2c992484", "sha256": "998993e3c02963426a824f8ab839ce79e24dd2da7ee123ff5c707c6f3e8c7edb"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.0.1.tar.gz", "has_sig": false, "md5_digest": "2dad0c95a6ed993e43e95e3c2c992484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47972, "upload_time": "2017-05-30T09:22:25", "upload_time_iso_8601": "2017-05-30T09:22:25.170861Z", "url": "https://files.pythonhosted.org/packages/57/6a/f3515f7046ac5dc71bbf65b7cf1fdf73dc62c30a0617b9d4c56611867d9d/pyTelegramBotAPI-3.0.1.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "ed3f78a38667b18c9e3ba7cfd2d41a05", "sha256": "284c61109639071046eede082e66cc83235e3992a4d72b159ac52d04558239f3"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.1.0.tar.gz", "has_sig": false, "md5_digest": "ed3f78a38667b18c9e3ba7cfd2d41a05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50425, "upload_time": "2017-07-01T03:24:59", "upload_time_iso_8601": "2017-07-01T03:24:59.142534Z", "url": "https://files.pythonhosted.org/packages/82/7e/e6b5360e62a5fae6b6ba9a68cc81a30b8d61f0a599ccc1e7b9dcf9052f44/pyTelegramBotAPI-3.1.0.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "a39879eb3fcc314ef9dfa150335d7f94", "sha256": "0fe92e5fa7ba08d4bf8fe2d3dfe08ec04751af0d10b9fbbfa34d39f11f65eac3"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.2.0.tar.gz", "has_sig": false, "md5_digest": "a39879eb3fcc314ef9dfa150335d7f94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52088, "upload_time": "2017-08-07T01:35:05", "upload_time_iso_8601": "2017-08-07T01:35:05.340450Z", "url": "https://files.pythonhosted.org/packages/7f/b3/ea5796e0691403e69632f82c9c38233d4ed0f7d52599c6e17e65b1c34726/pyTelegramBotAPI-3.2.0.tar.gz", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "3aaf67e7ac58cac363329cbf2a7de24c", "sha256": "4a9ba025c8430df6d5208abbf3a10f4f7875d5b42c519ca62119e8cb225657a2"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.2.1.tar.gz", "has_sig": false, "md5_digest": "3aaf67e7ac58cac363329cbf2a7de24c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52230, "upload_time": "2017-09-28T09:19:32", "upload_time_iso_8601": "2017-09-28T09:19:32.219323Z", "url": "https://files.pythonhosted.org/packages/e8/5f/df974d5413f1c53b566921a866be7534642508d7e652dd24987cdf219c04/pyTelegramBotAPI-3.2.1.tar.gz", "yanked": false}], "3.4.1": [{"comment_text": "", "digests": {"md5": "ae353043e0457a5dab8a83829dfb53bd", "sha256": "ad016442db99115c8bb6644e9c887135c00f77fda710b5de595c0bc8c18bbb03"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.4.1.tar.gz", "has_sig": false, "md5_digest": "ae353043e0457a5dab8a83829dfb53bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54317, "upload_time": "2017-11-13T02:27:18", "upload_time_iso_8601": "2017-11-13T02:27:18.647385Z", "url": "https://files.pythonhosted.org/packages/11/29/76ecc483954a44ca2cdcaaae643facb1bef03a72e69d2fe01f5a5cc4d197/pyTelegramBotAPI-3.4.1.tar.gz", "yanked": false}], "3.4.2": [{"comment_text": "", "digests": {"md5": "9bac166b44bb973ab572b39a59dfccb6", "sha256": "4f80384684bdc1ef5403bffdabfd5791f7c744ff2ced76953dd3178ebc74bf1a"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.4.2.tar.gz", "has_sig": false, "md5_digest": "9bac166b44bb973ab572b39a59dfccb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54294, "upload_time": "2017-11-14T17:01:22", "upload_time_iso_8601": "2017-11-14T17:01:22.759303Z", "url": "https://files.pythonhosted.org/packages/6f/fe/cc2a3a15db567477ef87521a39f005270dbe508bd78caf4753dbb4719372/pyTelegramBotAPI-3.4.2.tar.gz", "yanked": false}], "3.5.0": [{"comment_text": "", "digests": {"md5": "2f607ad97e05bf982741b5b733575558", "sha256": "263ee51fb1d6361d00f956e756113c14f0d3a10662c903ff5d916f6beabf849f"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.5.0.tar.gz", "has_sig": false, "md5_digest": "2f607ad97e05bf982741b5b733575558", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51523, "upload_time": "2017-11-29T06:25:30", "upload_time_iso_8601": "2017-11-29T06:25:30.351113Z", "url": "https://files.pythonhosted.org/packages/d0/76/f6a30f0481138f595156af6aa25c68450eed18436a2873348d193692cd21/pyTelegramBotAPI-3.5.0.tar.gz", "yanked": false}], "3.5.1": [{"comment_text": "", "digests": {"md5": "6d1ebe8217038fa759dbb38601250115", "sha256": "d097128ab2c6b43a0219231a4b39da46e3f2960cd8415ad0913c752e335cc4a8"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.5.1.tar.gz", "has_sig": false, "md5_digest": "6d1ebe8217038fa759dbb38601250115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51526, "upload_time": "2017-11-30T15:34:31", "upload_time_iso_8601": "2017-11-30T15:34:31.336653Z", "url": "https://files.pythonhosted.org/packages/b6/64/40fdf425f6d3cf108cb9c196ed81bfe388f69359194a0362482607b3ef29/pyTelegramBotAPI-3.5.1.tar.gz", "yanked": false}], "3.5.2": [{"comment_text": "", "digests": {"md5": "1496a03dfc87885f722e092688fd3fd0", "sha256": "c9b98cd837366a808aa118a84d343d2ab47d4037093c2e8167b54dfe07258f9f"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.5.2.tar.gz", "has_sig": false, "md5_digest": "1496a03dfc87885f722e092688fd3fd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51546, "upload_time": "2018-01-24T11:12:01", "upload_time_iso_8601": "2018-01-24T11:12:01.130919Z", "url": "https://files.pythonhosted.org/packages/a4/5a/7aab147b253f19e5ef007316f39cf693a63d5cd7f654c3805c76f6bde979/pyTelegramBotAPI-3.5.2.tar.gz", "yanked": false}], "3.6.0": [{"comment_text": "", "digests": {"md5": "7a74b531cc42957b61f3cb5b8e81a3c2", "sha256": "3d94916b609da91866aaa8dc4b024dbc72f157a0ed5e82e51224886c602f5521"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.0.tar.gz", "has_sig": false, "md5_digest": "7a74b531cc42957b61f3cb5b8e81a3c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52025, "upload_time": "2018-03-02T11:28:54", "upload_time_iso_8601": "2018-03-02T11:28:54.536285Z", "url": "https://files.pythonhosted.org/packages/2f/6c/506674010383c26b46ef6a921e065760a73ff775c4998c3931109e5d16ca/pyTelegramBotAPI-3.6.0.tar.gz", "yanked": false}], "3.6.1": [{"comment_text": "", "digests": {"md5": "612e997be83b82cbe218a06e83bbada0", "sha256": "b8bca082b96122d1b6dc2d1dbc3c6cef4c1f520e0ab0ee06999b853abb93ec65"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.1.tar.gz", "has_sig": false, "md5_digest": "612e997be83b82cbe218a06e83bbada0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52049, "upload_time": "2018-03-10T06:47:04", "upload_time_iso_8601": "2018-03-10T06:47:04.150423Z", "url": "https://files.pythonhosted.org/packages/a5/74/a6853c290b363535bed125928c752c92b1e9fe32fdb8ec83085c17420055/pyTelegramBotAPI-3.6.1.tar.gz", "yanked": false}], "3.6.2": [{"comment_text": "", "digests": {"md5": "3e93ddea8b254dae01da6299542d9099", "sha256": "ed1f07468ab1683fe9f87af24cae23e684e8b1e06f733191583e499836af864c"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.2.tar.gz", "has_sig": false, "md5_digest": "3e93ddea8b254dae01da6299542d9099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52061, "upload_time": "2018-03-23T11:59:59", "upload_time_iso_8601": "2018-03-23T11:59:59.125383Z", "url": "https://files.pythonhosted.org/packages/01/6b/74dde9fea8caaf7383f9be8893ac9315e40356d0d91af4bd61677afd98fe/pyTelegramBotAPI-3.6.2.tar.gz", "yanked": false}], "3.6.3": [{"comment_text": "", "digests": {"md5": "4988a5b905b34a8dda16a114af79139e", "sha256": "79ba09316ba9b01a0b2c3bf937d8cf57b33072c1caead7a6dc010956683cef5e"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.3.tar.gz", "has_sig": false, "md5_digest": "4988a5b905b34a8dda16a114af79139e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53049, "upload_time": "2018-05-14T02:21:28", "upload_time_iso_8601": "2018-05-14T02:21:28.975420Z", "url": "https://files.pythonhosted.org/packages/9e/7c/fcc6beb6f3f4030714ced7ac640c1b1158ea03ae674c87d925d6e07152be/pyTelegramBotAPI-3.6.3.tar.gz", "yanked": false}], "3.6.4": [{"comment_text": "", "digests": {"md5": "7337922f7755147d412604c80f2d9cc1", "sha256": "08b3412d3fb2d64d2d3dcd3849828662cf580a7ea3c4443abca2a9feae1f8515"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.4.tar.gz", "has_sig": false, "md5_digest": "7337922f7755147d412604c80f2d9cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54200, "upload_time": "2018-07-31T01:10:23", "upload_time_iso_8601": "2018-07-31T01:10:23.136180Z", "url": "https://files.pythonhosted.org/packages/9f/de/b0d7f3a8fedf6a85737518cbeaf33f1cf2397cef9e138fd6f230349e30ea/pyTelegramBotAPI-3.6.4.tar.gz", "yanked": false}], "3.6.5": [{"comment_text": "", "digests": {"md5": "06bddad8ae31f657875dcd0dd5466a7e", "sha256": "8059d10d2e8574bec77bd575b1bd948521f2c9870f3ff2a1bfc63482d1e2f62c"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.5.tar.gz", "has_sig": false, "md5_digest": "06bddad8ae31f657875dcd0dd5466a7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54315, "upload_time": "2018-08-03T00:37:23", "upload_time_iso_8601": "2018-08-03T00:37:23.823366Z", "url": "https://files.pythonhosted.org/packages/64/e4/39640b4d29fb6e48953b0a5f1a8b203b6ee20c32d6331c733e04b76a1937/pyTelegramBotAPI-3.6.5.tar.gz", "yanked": false}], "3.6.6": [{"comment_text": "", "digests": {"md5": "abb2847ef514c94aea369a3a4462b291", "sha256": "a4e8a98f97508a1c502c5a357536cf6c6e40dc4e5d4e58ebaedfba2d4f637e03"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.6.tar.gz", "has_sig": false, "md5_digest": "abb2847ef514c94aea369a3a4462b291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49688, "upload_time": "2018-09-07T08:15:14", "upload_time_iso_8601": "2018-09-07T08:15:14.285518Z", "url": "https://files.pythonhosted.org/packages/25/5e/9711642455c4e17b1202d4f6403ede0fef37fc145038aee7193f3b24445e/pyTelegramBotAPI-3.6.6.tar.gz", "yanked": false}], "3.6.7": [{"comment_text": "", "digests": {"md5": "3e92b3548615a686d8b87afd9362c0b7", "sha256": "0efd908ae5a52affe312579916166be2688dc17888593ccf22d4dfbbe41bf66a"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.6.7.tar.gz", "has_sig": false, "md5_digest": "3e92b3548615a686d8b87afd9362c0b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65662, "upload_time": "2020-01-14T08:37:19", "upload_time_iso_8601": "2020-01-14T08:37:19.474065Z", "url": "https://files.pythonhosted.org/packages/62/ab/99c606f69fcda57e35788b913dd34c9d9acb48dd26349141b3855dcf6351/pyTelegramBotAPI-3.6.7.tar.gz", "yanked": false}], "3.7.0": [{"comment_text": "", "digests": {"md5": "0ec00aea423ea8d32270f9d3c4dfa146", "sha256": "8e066888e4700c3da1a25be638a3a1d465a8c158f419460f1f627bca7f374730"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.7.0.tar.gz", "has_sig": false, "md5_digest": "0ec00aea423ea8d32270f9d3c4dfa146", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69872, "upload_time": "2020-04-29T09:37:53", "upload_time_iso_8601": "2020-04-29T09:37:53.711056Z", "url": "https://files.pythonhosted.org/packages/4d/5f/41f3de857ac49c11a7784cfc9b042214483a23baf6abab738ab374eeefe4/pyTelegramBotAPI-3.7.0.tar.gz", "yanked": false}], "3.7.1": [{"comment_text": "", "digests": {"md5": "10042f5dc50a927c37d4efbd55ad043a", "sha256": "8ef8e54098efd29a6bcac28d127480ae2b7491c1d33e4e0c7bbf0fc8949e0fae"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.7.1.tar.gz", "has_sig": false, "md5_digest": "10042f5dc50a927c37d4efbd55ad043a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70457, "upload_time": "2020-05-02T11:42:34", "upload_time_iso_8601": "2020-05-02T11:42:34.844964Z", "url": "https://files.pythonhosted.org/packages/16/1d/40c1fde174731bd58f014721a37c28d35210aa39c42c3e8b1659374a9bec/pyTelegramBotAPI-3.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10042f5dc50a927c37d4efbd55ad043a", "sha256": "8ef8e54098efd29a6bcac28d127480ae2b7491c1d33e4e0c7bbf0fc8949e0fae"}, "downloads": -1, "filename": "pyTelegramBotAPI-3.7.1.tar.gz", "has_sig": false, "md5_digest": "10042f5dc50a927c37d4efbd55ad043a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70457, "upload_time": "2020-05-02T11:42:34", "upload_time_iso_8601": "2020-05-02T11:42:34.844964Z", "url": "https://files.pythonhosted.org/packages/16/1d/40c1fde174731bd58f014721a37c28d35210aa39c42c3e8b1659374a9bec/pyTelegramBotAPI-3.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:33 2020"}