{"info": {"author": "Stanislav Lobanov", "author_email": "n10101010@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Wint - dependency injection with type hints.\n============================================\n\n[![Build Status](https://travis-ci.org/asyncee/wint.svg?branch=master)](https://travis-ci.org/asyncee/wint)\n[![Coverage Status](https://coveralls.io/repos/github/asyncee/wint/badge.svg?branch=master)](https://coveralls.io/github/asyncee/wint?branch=master)\n\nIntro\n-----\n\nWint is a lightweight library that implements dependency injection via type hinting.\n\nInstallation\n------------\n\nJust use pip:\n```\n$ pip install wint\n```\n\nHow it works\n------------\n\nThere are a ton of approaches to DI, and this library implements only property injection.\n\nWhen ``autowired`` decorator is applied then class is inspected for all\nannotated properties. If property has no value, then it is replaced with ``DependencyDescriptor``.\n\nDependency is resolved when attribute is accessed on instantiated class instance.\n\nThis behaviour allows to resolve dependencies in lazy manner with the downside of a side effect \u2014 instance\nreceives a descriptor property that was not existed earlier.\n\nExample\n-------\n\n```python\nfrom wint import autowired, ContainerProvider\n\n\nclass Printer:\n    \"\"\"Abstract class for printing messages.\"\"\"\n\n    def print(self, message):\n        raise NotImplementedError\n\n\nclass RealPrinter(Printer):\n    \"\"\"Implementation of `Printer` which uses `print` to output messages.\"\"\"\n\n    def print(self, message):\n        print(message)\n\n\n@autowired()\nclass PrintService:\n    # RealPrinter will be automatically injected on property access.\n    printer: Printer\n\n    def run(self, msg):\n        self.printer.print(f\"{msg}, i'm running!\")\n\n\nif __name__ == \"__main__\":\n    container = ContainerProvider.get()\n    # Register RealPrinter as singleton implementation of Printer.\n    container.register(Printer, RealPrinter())\n\n    PrintService().run('hey')\n```\n\n```bash\n$ python example.py\nhey, i'm running!\n```\n\nNotes\n-----\nThis library is built on [punq](https://github.com/bobthemighty/punq)\n(MIT License) and uses it's vendored version.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/asyncee/wint", "keywords": "dependency injection,type hinting,wint", "license": "MIT", "maintainer": "Stanislav Lobanov", "maintainer_email": "n10101010@gmail.com", "name": "wint", "package_url": "https://pypi.org/project/wint/", "platform": "", "project_url": "https://pypi.org/project/wint/", "project_urls": {"Homepage": "https://github.com/asyncee/wint"}, "release_url": "https://pypi.org/project/wint/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Dependency injection with type hints", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Wint - dependency injection with type hints.</h1>\n<p><a href=\"https://travis-ci.org/asyncee/wint\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af788528faf5124603b7f75d721421171b81c297/68747470733a2f2f7472617669732d63692e6f72672f6173796e6365652f77696e742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/asyncee/wint?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78784efbbe5e3b1613f9a68228eff821c489f936/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6173796e6365652f77696e742f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Intro</h2>\n<p>Wint is a lightweight library that implements dependency injection via type hinting.</p>\n<h2>Installation</h2>\n<p>Just use pip:</p>\n<pre><code>$ pip install wint\n</code></pre>\n<h2>How it works</h2>\n<p>There are a ton of approaches to DI, and this library implements only property injection.</p>\n<p>When <code>autowired</code> decorator is applied then class is inspected for all\nannotated properties. If property has no value, then it is replaced with <code>DependencyDescriptor</code>.</p>\n<p>Dependency is resolved when attribute is accessed on instantiated class instance.</p>\n<p>This behaviour allows to resolve dependencies in lazy manner with the downside of a side effect \u2014 instance\nreceives a descriptor property that was not existed earlier.</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wint</span> <span class=\"kn\">import</span> <span class=\"n\">autowired</span><span class=\"p\">,</span> <span class=\"n\">ContainerProvider</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Printer</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Abstract class for printing messages.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RealPrinter</span><span class=\"p\">(</span><span class=\"n\">Printer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Implementation of `Printer` which uses `print` to output messages.\"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@autowired</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">PrintService</span><span class=\"p\">:</span>\n    <span class=\"c1\"># RealPrinter will be automatically injected on property access.</span>\n    <span class=\"n\">printer</span><span class=\"p\">:</span> <span class=\"n\">Printer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">printer</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">msg</span><span class=\"si\">}</span><span class=\"s2\">, i'm running!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">ContainerProvider</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Register RealPrinter as singleton implementation of Printer.</span>\n    <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Printer</span><span class=\"p\">,</span> <span class=\"n\">RealPrinter</span><span class=\"p\">())</span>\n\n    <span class=\"n\">PrintService</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'hey'</span><span class=\"p\">)</span>\n</pre>\n<pre>$ python example.py\nhey, i<span class=\"err\">'</span>m running!\n</pre>\n<h2>Notes</h2>\n<p>This library is built on <a href=\"https://github.com/bobthemighty/punq\" rel=\"nofollow\">punq</a>\n(MIT License) and uses it's vendored version.</p>\n\n          </div>"}, "last_serial": 4078625, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0e914d873949b38a9d27cba2958251b6", "sha256": "ee04f2196659226e53e35f56f55250c8802edee23590081fcbdef8d0abd13348"}, "downloads": -1, "filename": "wint-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0e914d873949b38a9d27cba2958251b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23433, "upload_time": "2018-07-10T19:23:07", "upload_time_iso_8601": "2018-07-10T19:23:07.541893Z", "url": "https://files.pythonhosted.org/packages/12/3e/a884d1ccc534277ab53ea0de4bce3508e5f40ff7d192f97fd0c4b8608cf4/wint-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4dea8428f22868d3660f256676f4c84c", "sha256": "2d66fd301b0175e8df43c5eccc21c7082fea24195e978dda332cda2ea9cefd94"}, "downloads": -1, "filename": "wint-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4dea8428f22868d3660f256676f4c84c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5395, "upload_time": "2018-07-10T19:23:09", "upload_time_iso_8601": "2018-07-10T19:23:09.072236Z", "url": "https://files.pythonhosted.org/packages/77/de/a2b22aa12e45af093ebda55ebe153e5d894a66633e1beee0aeb74bc85916/wint-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7554c9762c43231d3032324d369fc637", "sha256": "9a9184eece1fa3438fa86600d5dc3ecfb0ea8c54f41627b5914e3191fd316ffb"}, "downloads": -1, "filename": "wint-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7554c9762c43231d3032324d369fc637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23644, "upload_time": "2018-07-18T15:34:26", "upload_time_iso_8601": "2018-07-18T15:34:26.962483Z", "url": "https://files.pythonhosted.org/packages/c8/b9/81aab1d9fe2e405b51c25db5e5a5c9c8e5b701008f9c7055711126668706/wint-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0e5b33f9bfde863dd9f3fe3cf6ccac7", "sha256": "96b5f93ea7aa2d01e47ad3e35144d0aaa913278507b1b059b007826f77f7f4dd"}, "downloads": -1, "filename": "wint-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a0e5b33f9bfde863dd9f3fe3cf6ccac7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6375, "upload_time": "2018-07-18T15:34:28", "upload_time_iso_8601": "2018-07-18T15:34:28.289240Z", "url": "https://files.pythonhosted.org/packages/76/1a/5612341055155268a97ca8f0be196e1d21d152c2ebc4c16b1788213fe929/wint-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7554c9762c43231d3032324d369fc637", "sha256": "9a9184eece1fa3438fa86600d5dc3ecfb0ea8c54f41627b5914e3191fd316ffb"}, "downloads": -1, "filename": "wint-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7554c9762c43231d3032324d369fc637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 23644, "upload_time": "2018-07-18T15:34:26", "upload_time_iso_8601": "2018-07-18T15:34:26.962483Z", "url": "https://files.pythonhosted.org/packages/c8/b9/81aab1d9fe2e405b51c25db5e5a5c9c8e5b701008f9c7055711126668706/wint-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0e5b33f9bfde863dd9f3fe3cf6ccac7", "sha256": "96b5f93ea7aa2d01e47ad3e35144d0aaa913278507b1b059b007826f77f7f4dd"}, "downloads": -1, "filename": "wint-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a0e5b33f9bfde863dd9f3fe3cf6ccac7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6375, "upload_time": "2018-07-18T15:34:28", "upload_time_iso_8601": "2018-07-18T15:34:28.289240Z", "url": "https://files.pythonhosted.org/packages/76/1a/5612341055155268a97ca8f0be196e1d21d152c2ebc4c16b1788213fe929/wint-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:50 2020"}