{"info": {"author": "Adam Johnson", "author_email": "me@adamj.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 7 - Inactive", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "=============\nWSGI Harakiri\n=============\n\n**Abandoned**\n\nDon't use this, it's not the best way to achieve a request timeout. You're\nprobably better off using and improving any such feature built into your wsgi\nserver, since it will terminate things more reliably.\n\n.. image:: https://img.shields.io/pypi/v/wsgi-harakiri.svg\n        :target: https://pypi.python.org/pypi/wsgi-harakiri\n\n.. image:: https://img.shields.io/travis/adamchainz/wsgi-harakiri.svg\n        :target: https://travis-ci.org/adamchainz/wsgi-harakiri\n\nWSGI Middleware that implements a customizable 'harakiri' like uWSGI.\n\n\nInstallation\n------------\n\nUse **pip**:\n\n.. code-block:: bash\n\n    pip install wsgi-harakiri\n\nTested on Python 2.7, 3.4, and 3.5.\n\nUsage\n-----\n\nWrap your WSGI application with the middleware, for example for a Django\napplication in your ``wsgi.py``:\n\n.. code-block:: python\n\n    import os\n\n    from django.core.wsgi import get_wsgi_application\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\n\n    application = get_wsgi_application()\n\n    from wsgi_harakiri import HarakiriMiddleware\n\n    # By default adds a request timeout of 30 seconds\n    application = HarakiriMiddleware(application)\n\nYour app **must not** be running a multi-threaded server (multi-process is ok),\nand it **must** be running on a POSIX system. The ``alarm`` system call is\nused, so this **cannot** be combined with other things that use it, e.g. the\n'harakiri' functionality in uWSGI.\n\nAPI\n---\n\n``HarakiriMiddleware(application, timeout=30, on_harakiri=None, error_app=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWraps a WSGI application with the harakiri functionality.\n\n``application`` may be any WSGI application.\n\n``timeout`` may be any integer number of seconds, and defaults to 30.\n\n``on_harakiri`` will be called when a harakiri occurs, from inside the alarm\nfunction - it is thus suitable for logging the stack trace that lead to the\ntimeout. Its return value is ignored.\n\n``error_app`` is a second WSGI application that will be called to produce an\nerror response when a timeout occurs. The default response is a rather plain\n'500 Internal server error' with HTML '<h1>Page load timeout</h1>'.\n\nExample usage with all arguments:\n\n.. code-block:: python\n\n    application = get_wsgi_application()\n\n    from wsgi_harakiri import HarakiriMiddleware\n\n\n    def harakiri_handler():\n        logger.error(\"Harakiri occured\", extra={'stack': True})\n\n\n    def harakiri_page(environ, start_response):\n        start_response(\n            '500 Internal server error',\n            [('Content-Type', 'text/html')]\n        )\n        return [b'<h1>Sorry, this page timed out.</h1>']\n\n\n    application = HarakiriMiddleware(\n        application,\n        timeout=15,\n        on_harakiri=harakiri_handler,\n        error_app=harakiri_page,\n    )\n\n``Harakiri``\n~~~~~~~~~~~~\n\nThis is the exception that gets raised when a timeout occurs. You should\n**not** catch it anywhere in your code, however you could use it to detect when\nit happens inside a particular code path. For example:\n\n.. code-block:: python\n\n    from wsgi_harakiri import Harakiri\n\n\n    def find_users(search_term):\n        conn = make_db_connection()\n        try:\n            return conn.query(search_term)\n        except Harakiri:\n            logger.error(\"A search timed out\", extra={'search_term': search_term})\n            raise\n\n\n=======\nHistory\n=======\n\nPending Release\n---------------\n\n* New release notes here\n\n1.0.0 (2016-03-28)\n------------------\n\n* First release on PyPI, with ``HarakiriMiddleware``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamchainz/wsgi-harakiri", "keywords": "WSGI,Harakiri", "license": "ISCL", "maintainer": null, "maintainer_email": null, "name": "wsgi-harakiri", "package_url": "https://pypi.org/project/wsgi-harakiri/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/wsgi-harakiri/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/adamchainz/wsgi-harakiri"}, "release_url": "https://pypi.org/project/wsgi-harakiri/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "WSGI Middleware that implements a customizable 'harakiri' like  uWSGI", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"wsgi-harakiri\">\n<h2>WSGI Harakiri</h2>\n<p><strong>Abandoned</strong></p>\n<p>Don\u2019t use this, it\u2019s not the best way to achieve a request timeout. You\u2019re\nprobably better off using and improving any such feature built into your wsgi\nserver, since it will terminate things more reliably.</p>\n<a href=\"https://pypi.python.org/pypi/wsgi-harakiri\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/wsgi-harakiri.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6b24ecfb40687c2f6222d96b817b48813773518/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f777367692d686172616b6972692e737667\"></a>\n<a href=\"https://travis-ci.org/adamchainz/wsgi-harakiri\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/adamchainz/wsgi-harakiri.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d8c42cf795ff2fe82a81b9876b70ce6fa9fd2c6/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6164616d636861696e7a2f777367692d686172616b6972692e737667\"></a>\n<p>WSGI Middleware that implements a customizable \u2018harakiri\u2019 like uWSGI.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use <strong>pip</strong>:</p>\n<pre>pip install wsgi-harakiri\n</pre>\n<p>Tested on Python 2.7, 3.4, and 3.5.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Wrap your WSGI application with the middleware, for example for a Django\napplication in your <tt>wsgi.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">\"DJANGO_SETTINGS_MODULE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"myproject.settings\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wsgi_harakiri</span> <span class=\"kn\">import</span> <span class=\"n\">HarakiriMiddleware</span>\n\n<span class=\"c1\"># By default adds a request timeout of 30 seconds</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">HarakiriMiddleware</span><span class=\"p\">(</span><span class=\"n\">application</span><span class=\"p\">)</span>\n</pre>\n<p>Your app <strong>must not</strong> be running a multi-threaded server (multi-process is ok),\nand it <strong>must</strong> be running on a POSIX system. The <tt>alarm</tt> system call is\nused, so this <strong>cannot</strong> be combined with other things that use it, e.g. the\n\u2018harakiri\u2019 functionality in uWSGI.</p>\n</div>\n<div id=\"api\">\n<h3>API</h3>\n<div id=\"harakirimiddleware-application-timeout-30-on-harakiri-none-error-app-none\">\n<h4><tt>HarakiriMiddleware(application, timeout=30, on_harakiri=None, error_app=None)</tt></h4>\n<p>Wraps a WSGI application with the harakiri functionality.</p>\n<p><tt>application</tt> may be any WSGI application.</p>\n<p><tt>timeout</tt> may be any integer number of seconds, and defaults to 30.</p>\n<p><tt>on_harakiri</tt> will be called when a harakiri occurs, from inside the alarm\nfunction - it is thus suitable for logging the stack trace that lead to the\ntimeout. Its return value is ignored.</p>\n<p><tt>error_app</tt> is a second WSGI application that will be called to produce an\nerror response when a timeout occurs. The default response is a rather plain\n\u2018500 Internal server error\u2019 with HTML \u2018&lt;h1&gt;Page load timeout&lt;/h1&gt;\u2019.</p>\n<p>Example usage with all arguments:</p>\n<pre><span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wsgi_harakiri</span> <span class=\"kn\">import</span> <span class=\"n\">HarakiriMiddleware</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">harakiri_handler</span><span class=\"p\">():</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Harakiri occured\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'stack'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">harakiri_page</span><span class=\"p\">(</span><span class=\"n\">environ</span><span class=\"p\">,</span> <span class=\"n\">start_response</span><span class=\"p\">):</span>\n    <span class=\"n\">start_response</span><span class=\"p\">(</span>\n        <span class=\"s1\">'500 Internal server error'</span><span class=\"p\">,</span>\n        <span class=\"p\">[(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">,</span> <span class=\"s1\">'text/html'</span><span class=\"p\">)]</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s1\">'&lt;h1&gt;Sorry, this page timed out.&lt;/h1&gt;'</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">HarakiriMiddleware</span><span class=\"p\">(</span>\n    <span class=\"n\">application</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span>\n    <span class=\"n\">on_harakiri</span><span class=\"o\">=</span><span class=\"n\">harakiri_handler</span><span class=\"p\">,</span>\n    <span class=\"n\">error_app</span><span class=\"o\">=</span><span class=\"n\">harakiri_page</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"harakiri\">\n<h4><tt>Harakiri</tt></h4>\n<p>This is the exception that gets raised when a timeout occurs. You should\n<strong>not</strong> catch it anywhere in your code, however you could use it to detect when\nit happens inside a particular code path. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wsgi_harakiri</span> <span class=\"kn\">import</span> <span class=\"n\">Harakiri</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">find_users</span><span class=\"p\">(</span><span class=\"n\">search_term</span><span class=\"p\">):</span>\n    <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">make_db_connection</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">search_term</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Harakiri</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"A search timed out\"</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'search_term'</span><span class=\"p\">:</span> <span class=\"n\">search_term</span><span class=\"p\">})</span>\n        <span class=\"k\">raise</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"pending-release\">\n<h3>Pending Release</h3>\n<ul>\n<li>New release notes here</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h3>1.0.0 (2016-03-28)</h3>\n<ul>\n<li>First release on PyPI, with <tt>HarakiriMiddleware</tt>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2082601, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2e19d8a3b5c648b3af8b6283e8212dc4", "sha256": "b28fcdf2696bcf4d0877174c802e732072d4a0dda4702eebc921fc15da54da37"}, "downloads": -1, "filename": "wsgi_harakiri-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e19d8a3b5c648b3af8b6283e8212dc4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5788, "upload_time": "2016-03-28T13:03:13", "upload_time_iso_8601": "2016-03-28T13:03:13.355277Z", "url": "https://files.pythonhosted.org/packages/20/44/eb5d49be9ec0610ef8762e9d37689c8308ceac8231b01799e01aad2c81b7/wsgi_harakiri-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "247f66a80a1367454a8f3723a012f221", "sha256": "84583627bf1d0afdeae062855f78970c04b09aec80b0c51cc127ef06e4e43ada"}, "downloads": -1, "filename": "wsgi-harakiri-1.0.0.tar.gz", "has_sig": false, "md5_digest": "247f66a80a1367454a8f3723a012f221", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5457, "upload_time": "2016-03-28T13:03:20", "upload_time_iso_8601": "2016-03-28T13:03:20.579970Z", "url": "https://files.pythonhosted.org/packages/80/34/2da6fa30cf6a516367b5a06d9f4d165c972e3fb9e335955e0de1e9ab1abc/wsgi-harakiri-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e19d8a3b5c648b3af8b6283e8212dc4", "sha256": "b28fcdf2696bcf4d0877174c802e732072d4a0dda4702eebc921fc15da54da37"}, "downloads": -1, "filename": "wsgi_harakiri-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2e19d8a3b5c648b3af8b6283e8212dc4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5788, "upload_time": "2016-03-28T13:03:13", "upload_time_iso_8601": "2016-03-28T13:03:13.355277Z", "url": "https://files.pythonhosted.org/packages/20/44/eb5d49be9ec0610ef8762e9d37689c8308ceac8231b01799e01aad2c81b7/wsgi_harakiri-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "247f66a80a1367454a8f3723a012f221", "sha256": "84583627bf1d0afdeae062855f78970c04b09aec80b0c51cc127ef06e4e43ada"}, "downloads": -1, "filename": "wsgi-harakiri-1.0.0.tar.gz", "has_sig": false, "md5_digest": "247f66a80a1367454a8f3723a012f221", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5457, "upload_time": "2016-03-28T13:03:20", "upload_time_iso_8601": "2016-03-28T13:03:20.579970Z", "url": "https://files.pythonhosted.org/packages/80/34/2da6fa30cf6a516367b5a06d9f4d165c972e3fb9e335955e0de1e9ab1abc/wsgi-harakiri-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:08 2020"}