{"info": {"author": "Marcell Vazquez-Chanlatte", "author_email": "mvc@linux.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# py-aiger-sat\nPythonic interface between AIGs and SAT solvers.\n\n[![Build Status](https://cloud.drone.io/api/badges/mvcisback/py-aiger-sat/status.svg)](https://cloud.drone.io/mvcisback/py-aiger-sat)\n[![codecov](https://codecov.io/gh/mvcisback/py-aiger-sat/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/py-aiger-sat)\n[![PyPI version](https://badge.fury.io/py/py-aiger-sat.svg)](https://badge.fury.io/py/py-aiger-sat)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n\n<!-- markdown-toc end -->\n\n\n# Installation\n\nIf you just need to use `aiger_sat`, you can just run:\n\n`$ pip install py-aiger-sat`\n\nFor developers, note that this project uses the\n[poetry](https://poetry.eustace.io/) python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:\n\n`$ poetry install`\n\n# Usage\n\n`aiger_sat` has two seperate API's. The first, called the Object API,\ncenters around the `SolverWrapper` object - a thin wrapper around a\n`pysat` solver. The second is a Function API which exposes 4 functions\n`solve`, `is_sat`, `is_valid`, and `are_equiv`. The function API is\nprimarily useful for simple 1-off SAT instances, where as the object\nAPI is more useful when incremental solves are needed, or the\nunderlying `pysat` solver must be exposed.\n\n## Object API\n\n```python\nfrom aiger_sat import SolverWrapper\n\nsolver = SolverWrapper()  # defaults to Glucose4\n\nfrom pysat.solver import Glucose3\nsolver2 = SolverWrapper(solver=Glucose3)\n```\n\n`solver` operate on boolean expressions in the form of `aiger`\ncircuits with a single output. For example,\n\n\n```python\nimport aiger\n\nx, y, z = map(aiger.atom, ['x', 'y', 'z'])\n\nexpr = (x & y) | ~z\nsolver.add_expr(expr)\nassert solver.is_sat()\nmodel = solver.get_model()\nprint(model)  # {'x': True, 'y': False, 'z': False}\nassert expr(model)\n```\n\nFurther, `aiger_sat` supports making assumptions and computing\nunsat_cores.\n\n```python\n# Make invalid assumption.\nassert not solver.is_sat(assumptions={\n    'x': False,\n    'z': True,\n})\nassert not solver.unsolved\n\ncore = solver.get_unsat_core()\nassert core == {'x': False, 'z': True}\n```\n\n## Function API\n\n```python\nimport aiger\nimport aiger_sat\n\nx, y, z = map(aiger.atom, ['x', 'y', 'z'])\nassert aiger_sat.is_sat(x & y & z)\n\nmodel = aiger_sat.solve(x & y & z)\nassert model == {'x': True, 'y': True, 'z': True}\n\nassert aiger_sat.is_valid(aiger.atom(True))\n\nexpr1 = x & y\nexpr2 = x & y & (z | ~z)\nassert aiger_sat.are_equiv(expr1, expr2)\n```\n\n## BitVector Support\n\n`py-aiger-sat` also natively supports the `py-aiger-bv` bitvector\nlibrary.\n\nTo enable this support, make sure that `py-aiger-bv` is installed,\neither manually:\n\n`$ pip install py-aiger-bv`\n\nor by installing `py-aiger-sat` with the `bitvector` option:\n\n`$ pip install py-aiger-sat[bitvector]` or `$ poetry install --extras=bitvector`\n\nUsage is analogous to the non-bitvector usage.\n\n```python\nfrom aiger_bv import atom\nfrom aiger_sat import sat_bv\n\n# Object API\nexpr = atom(4, 'x') & atom(4, 'y') < 2\nf = sat_bv.SolverBVWrapper()\nf.add_expr(expr)\n\nmodel = f.get_model()\n\n# Function API.\nmodel = sat_bv.solve(expr)\n\nprint(model)\n# {'x': (False, False, True, True), 'y': (False, False, True, True)}\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvcisback/py-aiger-sat", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-aiger-sat", "package_url": "https://pypi.org/project/py-aiger-sat/", "platform": "", "project_url": "https://pypi.org/project/py-aiger-sat/", "project_urls": {"Homepage": "https://github.com/mvcisback/py-aiger-sat", "Repository": "https://github.com/mvcisback/py-aiger-sat"}, "release_url": "https://pypi.org/project/py-aiger-sat/1.1.0/", "requires_dist": ["python-sat (>=0.1.4.dev13,<0.2.0)", "py-aiger (>=4.0.0,<5.0.0)", "py-aiger-cnf (>=3.0.0,<4.0.0)", "attrs (>=19.3,<20.0)", "py-aiger-bv (>=2.0.0,<3.0.0); extra == \"bitvector\""], "requires_python": ">=3.6,<4.0", "summary": "Pythonic interface between AIGs and SAT solvers.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-aiger-sat</h1>\n<p>Pythonic interface between AIGs and SAT solvers.</p>\n<p><a href=\"https://cloud.drone.io/mvcisback/py-aiger-sat\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f59090202c331f073a6422973be9e24cf4d2c75c/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6d766369736261636b2f70792d61696765722d7361742f7374617475732e737667\"></a>\n<a href=\"https://codecov.io/gh/mvcisback/py-aiger-sat\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1345d416015edaf80cdd44c182427c9a60ee6796/68747470733a2f2f636f6465636f762e696f2f67682f6d766369736261636b2f70792d61696765722d7361742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/py-aiger-sat\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85c409a381ef4248701ee46bd362cd9e1ff37575/68747470733a2f2f62616467652e667572792e696f2f70792f70792d61696765722d7361742e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n</ul>\n\n<h1>Installation</h1>\n<p>If you just need to use <code>aiger_sat</code>, you can just run:</p>\n<p><code>$ pip install py-aiger-sat</code></p>\n<p>For developers, note that this project uses the\n<a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:</p>\n<p><code>$ poetry install</code></p>\n<h1>Usage</h1>\n<p><code>aiger_sat</code> has two seperate API's. The first, called the Object API,\ncenters around the <code>SolverWrapper</code> object - a thin wrapper around a\n<code>pysat</code> solver. The second is a Function API which exposes 4 functions\n<code>solve</code>, <code>is_sat</code>, <code>is_valid</code>, and <code>are_equiv</code>. The function API is\nprimarily useful for simple 1-off SAT instances, where as the object\nAPI is more useful when incremental solves are needed, or the\nunderlying <code>pysat</code> solver must be exposed.</p>\n<h2>Object API</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiger_sat</span> <span class=\"kn\">import</span> <span class=\"n\">SolverWrapper</span>\n\n<span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">SolverWrapper</span><span class=\"p\">()</span>  <span class=\"c1\"># defaults to Glucose4</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pysat.solver</span> <span class=\"kn\">import</span> <span class=\"n\">Glucose3</span>\n<span class=\"n\">solver2</span> <span class=\"o\">=</span> <span class=\"n\">SolverWrapper</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"n\">Glucose3</span><span class=\"p\">)</span>\n</pre>\n<p><code>solver</code> operate on boolean expressions in the form of <code>aiger</code>\ncircuits with a single output. For example,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiger</span>\n\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">aiger</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"o\">~</span><span class=\"n\">z</span>\n<span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">add_expr</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">is_sat</span><span class=\"p\">()</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>  <span class=\"c1\"># {'x': True, 'y': False, 'z': False}</span>\n<span class=\"k\">assert</span> <span class=\"n\">expr</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</pre>\n<p>Further, <code>aiger_sat</code> supports making assumptions and computing\nunsat_cores.</p>\n<pre><span class=\"c1\"># Make invalid assumption.</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">is_sat</span><span class=\"p\">(</span><span class=\"n\">assumptions</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">unsolved</span>\n\n<span class=\"n\">core</span> <span class=\"o\">=</span> <span class=\"n\">solver</span><span class=\"o\">.</span><span class=\"n\">get_unsat_core</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">core</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n</pre>\n<h2>Function API</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiger</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiger_sat</span>\n\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">aiger</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">aiger_sat</span><span class=\"o\">.</span><span class=\"n\">is_sat</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">aiger_sat</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span> <span class=\"o\">&amp;</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">model</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">aiger_sat</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">(</span><span class=\"n\">aiger</span><span class=\"o\">.</span><span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"n\">expr1</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span>\n<span class=\"n\">expr2</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">z</span> <span class=\"o\">|</span> <span class=\"o\">~</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">aiger_sat</span><span class=\"o\">.</span><span class=\"n\">are_equiv</span><span class=\"p\">(</span><span class=\"n\">expr1</span><span class=\"p\">,</span> <span class=\"n\">expr2</span><span class=\"p\">)</span>\n</pre>\n<h2>BitVector Support</h2>\n<p><code>py-aiger-sat</code> also natively supports the <code>py-aiger-bv</code> bitvector\nlibrary.</p>\n<p>To enable this support, make sure that <code>py-aiger-bv</code> is installed,\neither manually:</p>\n<p><code>$ pip install py-aiger-bv</code></p>\n<p>or by installing <code>py-aiger-sat</code> with the <code>bitvector</code> option:</p>\n<p><code>$ pip install py-aiger-sat[bitvector]</code> or <code>$ poetry install --extras=bitvector</code></p>\n<p>Usage is analogous to the non-bitvector usage.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiger_bv</span> <span class=\"kn\">import</span> <span class=\"n\">atom</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiger_sat</span> <span class=\"kn\">import</span> <span class=\"n\">sat_bv</span>\n\n<span class=\"c1\"># Object API</span>\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">sat_bv</span><span class=\"o\">.</span><span class=\"n\">SolverBVWrapper</span><span class=\"p\">()</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">add_expr</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Function API.</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">sat_bv</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'x': (False, False, True, True), 'y': (False, False, True, True)}</span>\n</pre>\n\n          </div>"}, "last_serial": 6870974, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "59a89e76c4ba0f86281a77ab400b4d7b", "sha256": "5399c036ca838a34874596c1f8c078fbaa20f0e403c7acc80864ad1d0a82756f"}, "downloads": -1, "filename": "py_aiger_sat-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59a89e76c4ba0f86281a77ab400b4d7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4281, "upload_time": "2019-07-24T05:19:05", "upload_time_iso_8601": "2019-07-24T05:19:05.681538Z", "url": "https://files.pythonhosted.org/packages/88/74/1b2ca222f52a48a4de4ea0997b11ea0fca4720f971cc10a50f87c2d23364/py_aiger_sat-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "381a2a9c6e5dc20a5feea520e1f106e1", "sha256": "d1b34c9724e8e3ea141ea898d5acdb5ccaa326e894a0753fd24b8042e4ad47c0"}, "downloads": -1, "filename": "py-aiger-sat-0.1.0.tar.gz", "has_sig": false, "md5_digest": "381a2a9c6e5dc20a5feea520e1f106e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3963, "upload_time": "2019-07-24T05:19:03", "upload_time_iso_8601": "2019-07-24T05:19:03.402426Z", "url": "https://files.pythonhosted.org/packages/d6/3f/fb48eaa368ead047ac1aa6ac86ff22178441772e3cfa33316b3962f6d711/py-aiger-sat-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6a4b39ddbc5dab5425ee9f16b51b76bb", "sha256": "4151506df972799ecfb3401a68c42fe16320339e7d326bf9b8b78227cbf141ce"}, "downloads": -1, "filename": "py_aiger_sat-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6a4b39ddbc5dab5425ee9f16b51b76bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4845, "upload_time": "2019-07-24T22:00:38", "upload_time_iso_8601": "2019-07-24T22:00:38.194825Z", "url": "https://files.pythonhosted.org/packages/55/be/dcebae9375079dbee37707e842488017058f957d56770f8eedc7d0256d11/py_aiger_sat-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "140203c709b67336f11ac0e6ea6fb0bd", "sha256": "8cbf41755d0d0827f944a384ca9207d91a07b0fdeb642622ac23114d4a9ae01d"}, "downloads": -1, "filename": "py-aiger-sat-0.1.1.tar.gz", "has_sig": false, "md5_digest": "140203c709b67336f11ac0e6ea6fb0bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4543, "upload_time": "2019-07-24T22:00:36", "upload_time_iso_8601": "2019-07-24T22:00:36.505359Z", "url": "https://files.pythonhosted.org/packages/04/ad/b84c2837a49a348febc90a761ef92c7448d5fb4ceb977fbe42264e356d8c/py-aiger-sat-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "000ab3332ae1bc589bb71abcf7a66fd9", "sha256": "c4f3fb668810949c32f327734731e5912e7bbc0f2017d2cae440f99269dca759"}, "downloads": -1, "filename": "py_aiger_sat-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "000ab3332ae1bc589bb71abcf7a66fd9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5727, "upload_time": "2019-10-22T20:06:01", "upload_time_iso_8601": "2019-10-22T20:06:01.543514Z", "url": "https://files.pythonhosted.org/packages/9a/b1/772a8f952ea20be9d40c985df0340f31ee0fb40bfac2410c21542a3f84bd/py_aiger_sat-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bda406c9505e30df478e550715bc93d8", "sha256": "40a690543682a2419a4639bfbdec7c0e2ca1b086ee6e42d0968e38cb6e11b129"}, "downloads": -1, "filename": "py-aiger-sat-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bda406c9505e30df478e550715bc93d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5029, "upload_time": "2019-10-22T20:05:59", "upload_time_iso_8601": "2019-10-22T20:05:59.850476Z", "url": "https://files.pythonhosted.org/packages/7e/50/fc3d961181871f293ef2582c30f1ca813d908e368597dc9dbec1933700ab/py-aiger-sat-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a4b25be97a4b682c47be0e9fb2a42820", "sha256": "2fbefcde1dac45e70180cd2a6922f34ef5ca50dff5bc9d44e884ccf37846af23"}, "downloads": -1, "filename": "py_aiger_sat-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a4b25be97a4b682c47be0e9fb2a42820", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6109, "upload_time": "2019-10-29T00:01:03", "upload_time_iso_8601": "2019-10-29T00:01:03.892047Z", "url": "https://files.pythonhosted.org/packages/d8/1e/4eb1efb2e471249b238104efe5a7ea556442a3c75d86c8b9eb86e7a9d556/py_aiger_sat-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c1ef29d0b5b975bb916712ae3fc5161", "sha256": "c8774e7fb6b308fa59b26d99cef24e260cf747d9be0beb76c4968af9f85c6fb8"}, "downloads": -1, "filename": "py-aiger-sat-1.0.1.tar.gz", "has_sig": false, "md5_digest": "4c1ef29d0b5b975bb916712ae3fc5161", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5529, "upload_time": "2019-10-29T00:01:01", "upload_time_iso_8601": "2019-10-29T00:01:01.944999Z", "url": "https://files.pythonhosted.org/packages/64/44/b366ef356094b9525bde6ae4da59ce6b582a31be1899830f30986d3a6ff8/py-aiger-sat-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ad3c88522235c3ad83213981682107aa", "sha256": "6616ee82dea402555a9a8deb9a5c96a9310df5688831ef5afab2eefff95b4214"}, "downloads": -1, "filename": "py_aiger_sat-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad3c88522235c3ad83213981682107aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6109, "upload_time": "2020-03-24T06:31:16", "upload_time_iso_8601": "2020-03-24T06:31:16.176767Z", "url": "https://files.pythonhosted.org/packages/b0/2a/26445e1178b3f2be2a96ae4b8e9b9de6a08d6d60d612f6a9b996ab702ca1/py_aiger_sat-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1b44d185add2800659de449f97c7888", "sha256": "07721e8fe1aba454b83a9e3afed46250c66d5237109006c6bcfca3c973a5ce59"}, "downloads": -1, "filename": "py-aiger-sat-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b1b44d185add2800659de449f97c7888", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5474, "upload_time": "2020-03-24T06:31:15", "upload_time_iso_8601": "2020-03-24T06:31:15.086267Z", "url": "https://files.pythonhosted.org/packages/28/69/8de8bc677e73e6f10b9005e46cb8b2ec486166df8234fec84f64319f98f3/py-aiger-sat-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad3c88522235c3ad83213981682107aa", "sha256": "6616ee82dea402555a9a8deb9a5c96a9310df5688831ef5afab2eefff95b4214"}, "downloads": -1, "filename": "py_aiger_sat-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ad3c88522235c3ad83213981682107aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 6109, "upload_time": "2020-03-24T06:31:16", "upload_time_iso_8601": "2020-03-24T06:31:16.176767Z", "url": "https://files.pythonhosted.org/packages/b0/2a/26445e1178b3f2be2a96ae4b8e9b9de6a08d6d60d612f6a9b996ab702ca1/py_aiger_sat-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1b44d185add2800659de449f97c7888", "sha256": "07721e8fe1aba454b83a9e3afed46250c66d5237109006c6bcfca3c973a5ce59"}, "downloads": -1, "filename": "py-aiger-sat-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b1b44d185add2800659de449f97c7888", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5474, "upload_time": "2020-03-24T06:31:15", "upload_time_iso_8601": "2020-03-24T06:31:15.086267Z", "url": "https://files.pythonhosted.org/packages/28/69/8de8bc677e73e6f10b9005e46cb8b2ec486166df8234fec84f64319f98f3/py-aiger-sat-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:54 2020"}