{"info": {"author": "Shreyas Kulkarni", "author_email": "shyran@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nlstree\n===============================\n\n.. image:: https://img.shields.io/pypi/v/lstree.svg\n        :target: https://pypi.python.org/pypi/lstree\n\n.. image:: https://img.shields.io/travis/shreyas/lstree.svg\n        :target: https://travis-ci.org/shreyas/lstree\n\n.. image:: https://readthedocs.org/projects/lstree/badge/?version=latest\n        :target: https://readthedocs.org/projects/lstree/?badge=latest\n        :alt: Documentation Status\n\n\nlstree is for ls what pstree is for ps, and some more ...\n\nThe idea struck when I had just started using leiningen for creating a clojure project. I wanted a way to see what all files/folders/things are created when leiningen creates a project. So I wrote this tool. It helps you visually see the folder hierarchy, and allows you to do some basic filtering on the tree. \n\n* Free software: MIT license\n* Documentation: https://lstree.readthedocs.org.\n\nFeatures\n--------\n\n* Show a folder (or many, if specified) in tree structure\n* Show/hide hidden files \n* Ignore empty directories\n* Show (filter for) only certain files\n* Ignore certain files/folders\n\nInstallation\n------------\n\nUse pip to install lstree::\n\n    pip install lstree\n\n\nBasic Usage\n-----------\n\nlstree when used without any arguments, shows the current tree for $PWD::\n\n    tochukasui:hello-world$ lstree\n    |- ./\n       |- doc/\n          |- intro.md\n\n       |- resources/\n       |- src/\n          |- hello_world/\n             |- core.clj\n\n       |- target/\n          |- base+system+user+dev/\n             |- classes/\n                |- META-INF/\n                   |- maven/\n                      |- hello-world/\n                         |- hello-world/\n                            |- pom.properties\n\n             |- stale/\n                |- leiningen.core.classpath.extract-native-dependencies\n\n          |- classes/\n             |- META-INF/\n                |- maven/\n                   |- hello-world/\n                      |- hello-world/\n                         |- pom.properties\n\n          |- stale/\n             |- leiningen.core.classpath.extract-native-dependencies\n\n          |- hello-world-0.1.0-SNAPSHOT.jar\n\n       |- test/\n          |- hello_world/\n             |- core_test.clj\n\n       |- CHANGELOG.md\n       |- LICENSE\n       |- project.clj\n       |- README.md\n\nApparently this was a hello-world lein project after a `lein build`. Too much clutter. I don't care of about anything inside the target folder anyway. Let's cut it out::\n\n    tochukasui:hello-world$ lstree -i target\n    |- ./\n       |- doc/\n          |- intro.md\n\n       |- resources/\n       |- src/\n          |- hello_world/\n             |- core.clj\n\n       |- test/\n          |- hello_world/\n             |- core_test.clj\n\n       |- CHANGELOG.md\n       |- LICENSE\n       |- project.clj\n       |- README.md\n\nMuch better. We '-i gnored' the target folder. How about just focusing on the clojure source files?::\n\n    tochukasui:hello-world$ lstree -i target -f '*.clj'\n    |- ./\n       |- doc/\n       |- resources/\n       |- src/\n          |- hello_world/\n             |- core.clj\n\n       |- test/\n          |- hello_world/\n             |- core_test.clj\n\n       |- project.clj\n\nNice. But what are those 'doc' and 'resources' folders doing there? They don't have any clj files; why clutter the view?::\n\n    tochukasui:hello-world$ lstree -i target -f '*.clj' --ignore-empty\n    |- ./\n       |- src/\n          |- hello_world/\n             |- core.clj\n\n       |- test/\n          |- hello_world/\n             |- core_test.clj\n\n       |- project.clj\n\nAha! \n\nThere are a few more useful tools lstree offers. For more info, check out the usage section of the documentation: https://lstree.readthedocs.io/en/latest/usage.html\n\n\n=======\nHistory\n=======\n\n0.1.0 (2016-05-01)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shreyas/lstree", "keywords": "lstree", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "lstree", "package_url": "https://pypi.org/project/lstree/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lstree/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/shreyas/lstree"}, "release_url": "https://pypi.org/project/lstree/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "lstree is for ls what pstree is for ps, and some more", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"lstree\">\n<h2>lstree</h2>\n<a href=\"https://pypi.python.org/pypi/lstree\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/lstree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75a7916a463748ae5a80fc6ef8e1e2fa6477bd27/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c73747265652e737667\"></a>\n<a href=\"https://travis-ci.org/shreyas/lstree\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/shreyas/lstree.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04e28ebd359abd8eebe77a409d872fd55d4f125f/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f736872657961732f6c73747265652e737667\"></a>\n<a href=\"https://readthedocs.org/projects/lstree/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/136361e14d1644a366365b5d18bb3a05f7954584/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c73747265652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>lstree is for ls what pstree is for ps, and some more \u2026</p>\n<p>The idea struck when I had just started using leiningen for creating a clojure project. I wanted a way to see what all files/folders/things are created when leiningen creates a project. So I wrote this tool. It helps you visually see the folder hierarchy, and allows you to do some basic filtering on the tree.</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://lstree.readthedocs.org\" rel=\"nofollow\">https://lstree.readthedocs.org</a>.</li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Show a folder (or many, if specified) in tree structure</li>\n<li>Show/hide hidden files</li>\n<li>Ignore empty directories</li>\n<li>Show (filter for) only certain files</li>\n<li>Ignore certain files/folders</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Use pip to install lstree:</p>\n<pre>pip install lstree\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>lstree when used without any arguments, shows the current tree for $PWD:</p>\n<pre>tochukasui:hello-world$ lstree\n|- ./\n   |- doc/\n      |- intro.md\n\n   |- resources/\n   |- src/\n      |- hello_world/\n         |- core.clj\n\n   |- target/\n      |- base+system+user+dev/\n         |- classes/\n            |- META-INF/\n               |- maven/\n                  |- hello-world/\n                     |- hello-world/\n                        |- pom.properties\n\n         |- stale/\n            |- leiningen.core.classpath.extract-native-dependencies\n\n      |- classes/\n         |- META-INF/\n            |- maven/\n               |- hello-world/\n                  |- hello-world/\n                     |- pom.properties\n\n      |- stale/\n         |- leiningen.core.classpath.extract-native-dependencies\n\n      |- hello-world-0.1.0-SNAPSHOT.jar\n\n   |- test/\n      |- hello_world/\n         |- core_test.clj\n\n   |- CHANGELOG.md\n   |- LICENSE\n   |- project.clj\n   |- README.md\n</pre>\n<p>Apparently this was a hello-world lein project after a <cite>lein build</cite>. Too much clutter. I don\u2019t care of about anything inside the target folder anyway. Let\u2019s cut it out:</p>\n<pre>tochukasui:hello-world$ lstree -i target\n|- ./\n   |- doc/\n      |- intro.md\n\n   |- resources/\n   |- src/\n      |- hello_world/\n         |- core.clj\n\n   |- test/\n      |- hello_world/\n         |- core_test.clj\n\n   |- CHANGELOG.md\n   |- LICENSE\n   |- project.clj\n   |- README.md\n</pre>\n<p>Much better. We \u2018-i gnored\u2019 the target folder. How about just focusing on the clojure source files?:</p>\n<pre>tochukasui:hello-world$ lstree -i target -f '*.clj'\n|- ./\n   |- doc/\n   |- resources/\n   |- src/\n      |- hello_world/\n         |- core.clj\n\n   |- test/\n      |- hello_world/\n         |- core_test.clj\n\n   |- project.clj\n</pre>\n<p>Nice. But what are those \u2018doc\u2019 and \u2018resources\u2019 folders doing there? They don\u2019t have any clj files; why clutter the view?:</p>\n<pre>tochukasui:hello-world$ lstree -i target -f '*.clj' --ignore-empty\n|- ./\n   |- src/\n      |- hello_world/\n         |- core.clj\n\n   |- test/\n      |- hello_world/\n         |- core_test.clj\n\n   |- project.clj\n</pre>\n<p>Aha!</p>\n<p>There are a few more useful tools lstree offers. For more info, check out the usage section of the documentation: <a href=\"https://lstree.readthedocs.io/en/latest/usage.html\" rel=\"nofollow\">https://lstree.readthedocs.io/en/latest/usage.html</a></p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2016-05-01)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2093741, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e03af5fa56d13b440b66efedf25edf04", "sha256": "1098107ff79f32a9032e1ddb5ce4c8742152d0a83e921ab827b4f4acca10ca11"}, "downloads": -1, "filename": "lstree-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e03af5fa56d13b440b66efedf25edf04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15908, "upload_time": "2016-05-01T18:13:35", "upload_time_iso_8601": "2016-05-01T18:13:35.840043Z", "url": "https://files.pythonhosted.org/packages/25/53/86cb79b57381baef6863bd90d28980abdcc60885ed2b07a983e759aad5ee/lstree-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a93b87214751698da17096646915e16b", "sha256": "bec36372ac0c9713cb8b5c79981ea284adaad3fb4984b42c05aa6dc193119ec1"}, "downloads": -1, "filename": "lstree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a93b87214751698da17096646915e16b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17597, "upload_time": "2016-05-01T18:48:06", "upload_time_iso_8601": "2016-05-01T18:48:06.933302Z", "url": "https://files.pythonhosted.org/packages/a3/dd/00c5505aa21c06e50df0836101c91bba5fa32951862876feba6a90a375a5/lstree-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a93b87214751698da17096646915e16b", "sha256": "bec36372ac0c9713cb8b5c79981ea284adaad3fb4984b42c05aa6dc193119ec1"}, "downloads": -1, "filename": "lstree-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a93b87214751698da17096646915e16b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17597, "upload_time": "2016-05-01T18:48:06", "upload_time_iso_8601": "2016-05-01T18:48:06.933302Z", "url": "https://files.pythonhosted.org/packages/a3/dd/00c5505aa21c06e50df0836101c91bba5fa32951862876feba6a90a375a5/lstree-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:24 2020"}