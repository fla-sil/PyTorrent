{"info": {"author": "Christian Zagrodnick", "author_email": "mail@gocept.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": ".. contents::\n\n=========\n tcm2sql\n=========\n\n\nWhat is this?\n=============\n\ntcm2sql is a tool for generating SQL commands from a tcm static\nstructure diagram (SSD). It was developed by Christian Zagrodnick for\ngocept to generate some large PostgreSQL databases out of diagrams.\n\nThis diagram type is normally used for object structures in UML. If you are\nfamilliar with the UML notation, you should get the tcm2sql conventions\nfairly fast into your brain.\n\nRenderers can be plugged in to tcm2sql quite easy. Currently there is only\na renderer for PostgreSQL. It creates PostgreSQL compatible `create table`\nand related queries. The documentation is mostly based on PostgreSQL terms.\nThere is a section which deals with other renderers.\n\nIn prior versions there were also:\n\n    * DBObjects -- for creating some code which might be useful if you are using DBObjects.\n\n    * Prolog -- for creating Prolog terms.\n\nThose have been removed because of vast changes in tcm2sql's internal API\nand no actualy need for them. If you like to see those or others please\ncontact me.\n\nThere is also a mode for generating the difference between two SSDs. This\nallows to semi automatic updating of databases.\n\nTCM can be obtained from `University of Twente`_. There is versionavailable\non Debian, too.\n\nThanks to Christian Theune for reviewing the documentation.\n\n\nThe conventions\n===============\n\nYou might want to open an `Example*.ssd` in the `doc` directory of this\npackage.\n\n`Double Class Boxes` and `Triple Class Boxes` are used for tables.\nAs in UML the top is for the name, the middle for the attributes. The\nbottom part is used for constraints in tcm2sql.\n\nName\n----\n\nThe name is just passed to the `create table <name>`.\n\nAttributes\n----------\n\nBasically an attribute definition looks like:\n\n\t<AttributeName>: <Datatype>\n\ni.e.\n\n\ttitle: varchar(32)\n\nRow constraints are just written after the datatype:\n\n\tname: varchar(64) not null\n\n\nSo far so good. But there also are a few special characters:\n\n\t``#`` -- marks one more more columns as the PRIMARY KEY\n\n\t``~`` -- marks a column as a FOREIGN KEY\n\n\t``-`` -- marks a column as private\n\ni.e.\n\n\t#id: serial\n\ndefines a single row primary key, whereas\n\n\t#~foo: integer\n\n\t#~bar: integer\n\ndefines a double row PRIMARY KEY, while simultaneously marking\nthem as two FOREIGN KEYs.\n\nSo the whole attribute definition looks like this:\n\n<Attribute> ::=\n\t[\"#\"]{0,1}[\"~\"]{0,1}<AttributeName>: <Datatype> <RowConstraint>\n\n\n\nConstraints\n===========\n\nAs stated above, what the operations are in UML, are the\nconstraints in tcm2sql.\n\nConstraints have a similar definition as attributes:\n\n<Constraint> ::= <ConstraintName>: <ConstraintOperation>\n\nFor example:\n\n\tinvalidFoo: check (foo>47)\n\tdupeFooBar: unique (foo,bar)\n\nTo avoid very large boxes in the diagram you also have the\npossibilty to add constraints using the annotation of your table.\nIt then has to be prefixed by an questionmark (?). Since tcm has\nno indicator for boxes which have an annotation you might write\n`<ext>` as constraint, which is just ignored and is a good remember for\nyourself.\n\n<Constraints> ::= [[<Constraint>|\"<ext>\"]\\n]*\n\n\nRelations\n=========\n\nIn UML there are different types of relations between classes,\nwhich I tried to adapt to PostgreSQL.\n\nImplemented in tcm2sql:\n\n\t* Aggregation (white diamond)\n\n\t\tresults in an `on delete set null`\n\n\t\tThe diamond has to be connected to the table\n\t\twith the referenced PRIMARY KEY.\n\n\t* Composition (black diamond)\n\n\t\tresults in an `on delete cascade on update cascade`\n\n\t\tThe diamond has to be connected to the table\n\t\twith the referenced PRIMARY KEY.\n\n\t* Generalisation (arrow)\n\n\t\tresults in `inherits (foo)` See `PostgreSQL documentation`_ for\n\t\tdetails.\n\n\t\tThe parent table is where the arrow points to.\n\n\t* Binary relationship\n\n\t\tresults in an ordinary relation between two\n\t\ttables.\n\n\t\tYou have to write a 1 on *one* end in the\n\t\tcardinality field. This is where die PK resides.\n\n\nSo what's the ~ for?\n\n\tWithin a table every FOREIGN KEY has to be prefixed with\n\tthe ~. There are two ways for assigning a row to a\n\trelation.\n\n\t1. Write the FK's name as ROLE on the relation.\n\n\t2. Name it <Othertable>_<OthertablePK>\n\nHow to reference a composite primary key?\n\n    Make a single relation between the tables and put the\n    names of the foreign keys komma separated into the \"role\n    name\" of the foreign key side of the relation.\n\n\nViews and Private Attributes\n============================\n\n    For every table a view `sv<TableName>` is created with only public\n    attributes.  If you need access to the database with ODBC but cannot\n    allow access to all attributes you just mark the private attributes\n    with `-` and let ODBC only access the views.\n\n\nThe modes\n=========\n\n\nCreate Mode\n-----------\n\nUsage: bin/tcm2sql -n <file.ssd> ...\n\nGenerates a full sql file (actualy it prints to stdout) with the\nnecessary `CREATE TABLE` commands. The constraints  are added\nafterwards, since this is much easier.\n\nDiff Mode\n---------\n\nUsage: bin/tcm2sql -o <old.ssl> -n <new.ssd> ...\n\nGenerates sql wich does the following:\n\n\t- copy data to temporary tables\n\t- drop tables\n\t- create new tables\n\t- drop sequences of deleted tables\n\t- create sequences for new tables\n\t- copy data back\n\n\nThe diff mode seems to work pretty well, but please ensure you\nhave a recent backup.\n\n\nUsing multiple ssd files to create a single database\n====================================================\n\nAs the database grows you get more and more junctions. Furthermore tcm\nallows only six pages which become full.  To avoid both problems you can\nsplit your database into several files.\n\nThe file you pass as parameter to tcm2sql is started with. To have a\nconnection to another ssd file you create a class node with a stereotype.\nThe stereotype is the relative (to the master ssd) or absolute file name of\nthe ssd to be included. The table name references the actual table in the\nincluded ssd. See ExampleInclude*.ssd for an expamle.\n\nIt is possible to build include circles and including forth and back\nwithout any problem.\n\n\nExamples\n========\n\nThere are two example ssds, just try tcm2sql on them.\n\nReferences\n==========\n\n.. _`PostgreSQL documentation`: http://www.postgresql.org/idocs/index.php?inherit.html\n\n.. _`University of Twente`: http://wwwhome.cs.utwente.nl/~tcm/\n\n\n\n\n============\n Change log\n============\n\n1.0.0 (2010-12-14)\n==================\n\n   - Eggified package.\n\n   - Added entry point for console script.\n\n\n0.9.2 (2006-10-18)\n==================\n\n    - Restructured renderer classes to make it easier to write\n      renderers for other database managenemt systems.\n    - Better handling for serials and bigserials: Now they are always\n      written as integer with default + creation of sequence. (This\n      makes updating of tables possible which have serial columns.)\n    - Added commandline option --no_views to not generate views for the tables.\n    - Made usage help a bit nicer.\n\n0.9.1 (2005-03-31)\n==================\n\n    - Multi column foreign keys\n\n0.9 (2003-09-13)\n================\n\n    - splitting database to several diagrams (see README for documentation)\n    - requires Python 2.2\n    - complete rewrite of ssd file reader\n    - large changes on internal data structures\n    - code is much more readable\n    - DBObjects and Prolog renderer removed; they had to be changed to fit\n      into the new structure but there is no need for them right now.\n\n0.04 (2002-08-02)\n=================\n\n    - prolog renderer\n    - DBObjects renderer (quite useless)\n    - fixed the create/drop sequence bug (bug #374)\n    - Added logging tables for Postgres\n\n0.03 (2002-03-30)\n=================\n\n\t- Works with python2.1 now\n\t- some minor fixes\n\n\n0.02 (2002-02-13)\n=================\n\n\t- first public release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.gocept.com", "keywords": "sql tcm", "license": "GPL 2", "maintainer": null, "maintainer_email": null, "name": "tcm2sql", "package_url": "https://pypi.org/project/tcm2sql/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tcm2sql/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.gocept.com"}, "release_url": "https://pypi.org/project/tcm2sql/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Tool for generating SQL commands from a tcm static structure diagram (SSD)", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#tcm2sql\" id=\"id8\" rel=\"nofollow\">tcm2sql</a><ul>\n<li><a href=\"#what-is-this\" id=\"id9\" rel=\"nofollow\">What is this?</a></li>\n<li><a href=\"#the-conventions\" id=\"id10\" rel=\"nofollow\">The conventions</a><ul>\n<li><a href=\"#name\" id=\"id11\" rel=\"nofollow\">Name</a></li>\n<li><a href=\"#attributes\" id=\"id12\" rel=\"nofollow\">Attributes</a></li>\n</ul>\n</li>\n<li><a href=\"#constraints\" id=\"id13\" rel=\"nofollow\">Constraints</a></li>\n<li><a href=\"#relations\" id=\"id14\" rel=\"nofollow\">Relations</a></li>\n<li><a href=\"#views-and-private-attributes\" id=\"id15\" rel=\"nofollow\">Views and Private Attributes</a></li>\n<li><a href=\"#the-modes\" id=\"id16\" rel=\"nofollow\">The modes</a><ul>\n<li><a href=\"#create-mode\" id=\"id17\" rel=\"nofollow\">Create Mode</a></li>\n<li><a href=\"#diff-mode\" id=\"id18\" rel=\"nofollow\">Diff Mode</a></li>\n</ul>\n</li>\n<li><a href=\"#using-multiple-ssd-files-to-create-a-single-database\" id=\"id19\" rel=\"nofollow\">Using multiple ssd files to create a single database</a></li>\n<li><a href=\"#examples\" id=\"id20\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#references\" id=\"id21\" rel=\"nofollow\">References</a></li>\n</ul>\n</li>\n<li><a href=\"#change-log\" id=\"id22\" rel=\"nofollow\">Change log</a><ul>\n<li><a href=\"#id1\" id=\"id23\" rel=\"nofollow\">1.0.0 (2010-12-14)</a></li>\n<li><a href=\"#id2\" id=\"id24\" rel=\"nofollow\">0.9.2 (2006-10-18)</a></li>\n<li><a href=\"#id3\" id=\"id25\" rel=\"nofollow\">0.9.1 (2005-03-31)</a></li>\n<li><a href=\"#id4\" id=\"id26\" rel=\"nofollow\">0.9 (2003-09-13)</a></li>\n<li><a href=\"#id5\" id=\"id27\" rel=\"nofollow\">0.04 (2002-08-02)</a></li>\n<li><a href=\"#id6\" id=\"id28\" rel=\"nofollow\">0.03 (2002-03-30)</a></li>\n<li><a href=\"#id7\" id=\"id29\" rel=\"nofollow\">0.02 (2002-02-13)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"tcm2sql\">\n<h2><a href=\"#id8\" rel=\"nofollow\">tcm2sql</a></h2>\n<div id=\"what-is-this\">\n<h3><a href=\"#id9\" rel=\"nofollow\">What is this?</a></h3>\n<p>tcm2sql is a tool for generating SQL commands from a tcm static\nstructure diagram (SSD). It was developed by Christian Zagrodnick for\ngocept to generate some large PostgreSQL databases out of diagrams.</p>\n<p>This diagram type is normally used for object structures in UML. If you are\nfamilliar with the UML notation, you should get the tcm2sql conventions\nfairly fast into your brain.</p>\n<p>Renderers can be plugged in to tcm2sql quite easy. Currently there is only\na renderer for PostgreSQL. It creates PostgreSQL compatible <cite>create table</cite>\nand related queries. The documentation is mostly based on PostgreSQL terms.\nThere is a section which deals with other renderers.</p>\n<p>In prior versions there were also:</p>\n<blockquote>\n<ul>\n<li>DBObjects \u2013 for creating some code which might be useful if you are using DBObjects.</li>\n<li>Prolog \u2013 for creating Prolog terms.</li>\n</ul>\n</blockquote>\n<p>Those have been removed because of vast changes in tcm2sql\u2019s internal API\nand no actualy need for them. If you like to see those or others please\ncontact me.</p>\n<p>There is also a mode for generating the difference between two SSDs. This\nallows to semi automatic updating of databases.</p>\n<p>TCM can be obtained from <a href=\"http://wwwhome.cs.utwente.nl/~tcm/\" rel=\"nofollow\">University of Twente</a>. There is versionavailable\non Debian, too.</p>\n<p>Thanks to Christian Theune for reviewing the documentation.</p>\n</div>\n<div id=\"the-conventions\">\n<h3><a href=\"#id10\" rel=\"nofollow\">The conventions</a></h3>\n<p>You might want to open an <cite>Example*.ssd</cite> in the <cite>doc</cite> directory of this\npackage.</p>\n<p><cite>Double Class Boxes</cite> and <cite>Triple Class Boxes</cite> are used for tables.\nAs in UML the top is for the name, the middle for the attributes. The\nbottom part is used for constraints in tcm2sql.</p>\n<div id=\"name\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Name</a></h4>\n<p>The name is just passed to the <cite>create table &lt;name&gt;</cite>.</p>\n</div>\n<div id=\"attributes\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Attributes</a></h4>\n<p>Basically an attribute definition looks like:</p>\n<blockquote>\n&lt;AttributeName&gt;: &lt;Datatype&gt;</blockquote>\n<p>i.e.</p>\n<blockquote>\ntitle: varchar(32)</blockquote>\n<p>Row constraints are just written after the datatype:</p>\n<blockquote>\nname: varchar(64) not null</blockquote>\n<p>So far so good. But there also are a few special characters:</p>\n<blockquote>\n<p><tt>#</tt> \u2013 marks one more more columns as the PRIMARY KEY</p>\n<p><tt>~</tt> \u2013 marks a column as a FOREIGN KEY</p>\n<p><tt>-</tt> \u2013 marks a column as private</p>\n</blockquote>\n<p>i.e.</p>\n<blockquote>\n#id: serial</blockquote>\n<p>defines a single row primary key, whereas</p>\n<blockquote>\n<p>#~foo: integer</p>\n<p>#~bar: integer</p>\n</blockquote>\n<p>defines a double row PRIMARY KEY, while simultaneously marking\nthem as two FOREIGN KEYs.</p>\n<p>So the whole attribute definition looks like this:</p>\n<dl>\n<dt>&lt;Attribute&gt; ::=</dt>\n<dd>[\u201c#\u201d]{0,1}[\u201c~\u201d]{0,1}&lt;AttributeName&gt;: &lt;Datatype&gt; &lt;RowConstraint&gt;</dd>\n</dl>\n</div>\n</div>\n<div id=\"constraints\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Constraints</a></h3>\n<p>As stated above, what the operations are in UML, are the\nconstraints in tcm2sql.</p>\n<p>Constraints have a similar definition as attributes:</p>\n<p>&lt;Constraint&gt; ::= &lt;ConstraintName&gt;: &lt;ConstraintOperation&gt;</p>\n<p>For example:</p>\n<blockquote>\ninvalidFoo: check (foo&gt;47)\ndupeFooBar: unique (foo,bar)</blockquote>\n<p>To avoid very large boxes in the diagram you also have the\npossibilty to add constraints using the annotation of your table.\nIt then has to be prefixed by an questionmark (?). Since tcm has\nno indicator for boxes which have an annotation you might write\n<cite>&lt;ext&gt;</cite> as constraint, which is just ignored and is a good remember for\nyourself.</p>\n<p>&lt;Constraints&gt; ::= [[&lt;Constraint&gt;|\u201d&lt;ext&gt;\u201d]n]*</p>\n</div>\n<div id=\"relations\">\n<h3><a href=\"#id14\" rel=\"nofollow\">Relations</a></h3>\n<p>In UML there are different types of relations between classes,\nwhich I tried to adapt to PostgreSQL.</p>\n<p>Implemented in tcm2sql:</p>\n<blockquote>\n<ul>\n<li><p>Aggregation (white diamond)</p>\n<blockquote>\n<p>results in an <cite>on delete set null</cite></p>\n<p>The diamond has to be connected to the table\nwith the referenced PRIMARY KEY.</p>\n</blockquote>\n</li>\n<li><p>Composition (black diamond)</p>\n<blockquote>\n<p>results in an <cite>on delete cascade on update cascade</cite></p>\n<p>The diamond has to be connected to the table\nwith the referenced PRIMARY KEY.</p>\n</blockquote>\n</li>\n<li><p>Generalisation (arrow)</p>\n<blockquote>\n<p>results in <cite>inherits (foo)</cite> See <a href=\"http://www.postgresql.org/idocs/index.php?inherit.html\" rel=\"nofollow\">PostgreSQL documentation</a> for\ndetails.</p>\n<p>The parent table is where the arrow points to.</p>\n</blockquote>\n</li>\n<li><p>Binary relationship</p>\n<blockquote>\n<p>results in an ordinary relation between two\ntables.</p>\n<p>You have to write a 1 on <em>one</em> end in the\ncardinality field. This is where die PK resides.</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<p>So what\u2019s the ~ for?</p>\n<blockquote>\n<p>Within a table every FOREIGN KEY has to be prefixed with\nthe ~. There are two ways for assigning a row to a\nrelation.</p>\n<ol>\n<li>Write the FK\u2019s name as ROLE on the relation.</li>\n<li>Name it &lt;Othertable&gt;_&lt;OthertablePK&gt;</li>\n</ol>\n</blockquote>\n<p>How to reference a composite primary key?</p>\n<blockquote>\nMake a single relation between the tables and put the\nnames of the foreign keys komma separated into the \u201crole\nname\u201d of the foreign key side of the relation.</blockquote>\n</div>\n<div id=\"views-and-private-attributes\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Views and Private Attributes</a></h3>\n<blockquote>\nFor every table a view <cite>sv&lt;TableName&gt;</cite> is created with only public\nattributes.  If you need access to the database with ODBC but cannot\nallow access to all attributes you just mark the private attributes\nwith <cite>-</cite> and let ODBC only access the views.</blockquote>\n</div>\n<div id=\"the-modes\">\n<h3><a href=\"#id16\" rel=\"nofollow\">The modes</a></h3>\n<div id=\"create-mode\">\n<h4><a href=\"#id17\" rel=\"nofollow\">Create Mode</a></h4>\n<p>Usage: bin/tcm2sql -n &lt;file.ssd&gt; \u2026</p>\n<p>Generates a full sql file (actualy it prints to stdout) with the\nnecessary <cite>CREATE TABLE</cite> commands. The constraints  are added\nafterwards, since this is much easier.</p>\n</div>\n<div id=\"diff-mode\">\n<h4><a href=\"#id18\" rel=\"nofollow\">Diff Mode</a></h4>\n<p>Usage: bin/tcm2sql -o &lt;old.ssl&gt; -n &lt;new.ssd&gt; \u2026</p>\n<p>Generates sql wich does the following:</p>\n<blockquote>\n<ul>\n<li>copy data to temporary tables</li>\n<li>drop tables</li>\n<li>create new tables</li>\n<li>drop sequences of deleted tables</li>\n<li>create sequences for new tables</li>\n<li>copy data back</li>\n</ul>\n</blockquote>\n<p>The diff mode seems to work pretty well, but please ensure you\nhave a recent backup.</p>\n</div>\n</div>\n<div id=\"using-multiple-ssd-files-to-create-a-single-database\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Using multiple ssd files to create a single database</a></h3>\n<p>As the database grows you get more and more junctions. Furthermore tcm\nallows only six pages which become full.  To avoid both problems you can\nsplit your database into several files.</p>\n<p>The file you pass as parameter to tcm2sql is started with. To have a\nconnection to another ssd file you create a class node with a stereotype.\nThe stereotype is the relative (to the master ssd) or absolute file name of\nthe ssd to be included. The table name references the actual table in the\nincluded ssd. See ExampleInclude*.ssd for an expamle.</p>\n<p>It is possible to build include circles and including forth and back\nwithout any problem.</p>\n</div>\n<div id=\"examples\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Examples</a></h3>\n<p>There are two example ssds, just try tcm2sql on them.</p>\n</div>\n<div id=\"references\">\n<h3><a href=\"#id21\" rel=\"nofollow\">References</a></h3>\n</div>\n</div>\n<div id=\"change-log\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Change log</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id23\" rel=\"nofollow\">1.0.0 (2010-12-14)</a></h3>\n<blockquote>\n<ul>\n<li>Eggified package.</li>\n<li>Added entry point for console script.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id24\" rel=\"nofollow\">0.9.2 (2006-10-18)</a></h3>\n<blockquote>\n<ul>\n<li>Restructured renderer classes to make it easier to write\nrenderers for other database managenemt systems.</li>\n<li>Better handling for serials and bigserials: Now they are always\nwritten as integer with default + creation of sequence. (This\nmakes updating of tables possible which have serial columns.)</li>\n<li>Added commandline option \u2013no_views to not generate views for the tables.</li>\n<li>Made usage help a bit nicer.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id25\" rel=\"nofollow\">0.9.1 (2005-03-31)</a></h3>\n<blockquote>\n<ul>\n<li>Multi column foreign keys</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id26\" rel=\"nofollow\">0.9 (2003-09-13)</a></h3>\n<blockquote>\n<ul>\n<li>splitting database to several diagrams (see README for documentation)</li>\n<li>requires Python 2.2</li>\n<li>complete rewrite of ssd file reader</li>\n<li>large changes on internal data structures</li>\n<li>code is much more readable</li>\n<li>DBObjects and Prolog renderer removed; they had to be changed to fit\ninto the new structure but there is no need for them right now.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id27\" rel=\"nofollow\">0.04 (2002-08-02)</a></h3>\n<blockquote>\n<ul>\n<li>prolog renderer</li>\n<li>DBObjects renderer (quite useless)</li>\n<li>fixed the create/drop sequence bug (bug #374)</li>\n<li>Added logging tables for Postgres</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id28\" rel=\"nofollow\">0.03 (2002-03-30)</a></h3>\n<blockquote>\n<ul>\n<li>Works with python2.1 now</li>\n<li>some minor fixes</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id29\" rel=\"nofollow\">0.02 (2002-02-13)</a></h3>\n<blockquote>\n<ul>\n<li>first public release</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 800391, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "313f2fec25adf343863b698aeb58880c", "sha256": "f6dd5aadde55f925eb39922ecaa2e6384d073e2675c4e027ec2b270ec9426535"}, "downloads": -1, "filename": "tcm2sql-1.0.0.tar.gz", "has_sig": false, "md5_digest": "313f2fec25adf343863b698aeb58880c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34733, "upload_time": "2010-12-14T11:21:11", "upload_time_iso_8601": "2010-12-14T11:21:11.601932Z", "url": "https://files.pythonhosted.org/packages/60/fd/a0438c8d36fec9dd46a868ec3d371f01e4612c6737c20e24689c188c3cdb/tcm2sql-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "313f2fec25adf343863b698aeb58880c", "sha256": "f6dd5aadde55f925eb39922ecaa2e6384d073e2675c4e027ec2b270ec9426535"}, "downloads": -1, "filename": "tcm2sql-1.0.0.tar.gz", "has_sig": false, "md5_digest": "313f2fec25adf343863b698aeb58880c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34733, "upload_time": "2010-12-14T11:21:11", "upload_time_iso_8601": "2010-12-14T11:21:11.601932Z", "url": "https://files.pythonhosted.org/packages/60/fd/a0438c8d36fec9dd46a868ec3d371f01e4612c6737c20e24689c188c3cdb/tcm2sql-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:22 2020"}