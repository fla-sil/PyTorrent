{"info": {"author": "Theron Luhn", "author_email": "theron@luhn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Pyramid", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pyramid-marshmallow\n\npyramid-marshmallow is a simple Pyramid plugin that allows you to validate and\nmarshal a JSON HTTP request or response using\n[Marshmallow](http://marshmallow.readthedocs.io/) schemas.  You can then\nleverage this to automatically generate an OpenAPI specification for your API.\n\n> **Version 0.5 and greater requires Marshmallow 3.x.  For Marshmallow 2.x, use\n> version 0.4.**\n\n## Basic usage\n\nInstall the project with `pip install pyramid-marshmallow`.\n\nActivate it by adding `config.include('pyramid_marshmallow')` into your config\nfunction or adding `pyramid.includes = pyramid_marshmallow` into your ini file.\n\nTo validate incoming data, set `validate` to a Marshmallow schema in your\n`view_config`.  The request body is parsed as JSON then passed through the\nschema's `load` function.  You can access the processed data with\n`request.data`.\n\n```python\nfrom marshmallow import Schema, String\n\n\nclass HelloSchema(Schema):\n    name = String()\n\n\n@view_config(\n    context=Root,\n    name='hello',\n    request_method='post',\n    validate=HelloSchema(),\n)\ndef hello(context, request):\n    return Response(body='Hello, {}'.format(\n        request.data['name']\n    ))\n```\n\nFor GET requests, the URL parameters are passed into the schema.  Value lists\nare not currently supported.\n\nSetting `marshal` in your `view_config` will run the view output through\nmarshmallow (i.e. `Schema.dump`) before going to the renderer.  You probably\nwill want to set the renderer to `json`.\n\n```\n@view_config(\n    context=Root,\n    name='hello',\n    request_method='get',\n    marshal=HelloSchema(),\n    renderer='json',\n)\ndef hello(context, request):\n    name = fetch_name()\n    return {\n        'name': name,\n    }\n```\n\n`validate` and `marshal` operate independently, so can be used separately or\ntogether.\n\nAs a convenience, you can pass in a dictionary to `validate` or `marshal` and\npyramid-marshmallow will turn it into a schema for you.\n\n```python\n@view_config(\n    context=Root,\n    name='hello',\n    request_method='post',\n    validate={\n        'name': String(),\n    },\n)\n```\n\nYou can also get a schema made from a dictionary by using the\n`pyramid_marshmallow.make_schema` function.  This can be useful for `Nested`\nfields.\n\n\n### Error handling\n\npyramid-marshmallow passes through exceptions from marshmallow.  So errors\nduring validation will raise a `marshmallow.exceptions.ValidationError`\nexception.\n([Documentation](https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.exceptions.ValidationError))\n\nYou may want to attach a view to this exception to expose the error messages to\nthe user.\n\n```python\n@view_config(\n    context=ValidationError,\n    renderer='json',\n)\ndef validation_error(context, request):\n    request.response.status = 401  # HTTP Bad Request\n    return {\n        'errors': context.normalized_messages(),\n    }\n```\n\n## OpenAPI\n\nBy adding validation and marshalling to your views, we have the opportunity to\nutilize that data to generate documentation.  pyramid-marshmallow includes an\nutility that uses [apispec](https://apispec.readthedocs.io/en/stable/) to\ngenerate an [OpenAPI](https://swagger.io/resources/open-api/) specification for\nyour application.\n\nFirst, you'll need to install some extra dependencies.\n\n```bash\npip install pyramid-marshmallow[openapi]\n```\n\nNow you can generate your spec by simply passing in an ini file.\npyramid-marshmallow needs to run your application in order to inspect it, so\nthe ini file should contain all the necessary configuration to do so.\n\n```bash\ngenerate-spec development.ini\n```\n\nThis will output the spec to stdout as JSON.  You can set the `--output` flag\nto output the results to a file.\n\nYou can set `--format yaml` to output the spec as YAML instead or\n`--format html` to output the spec as an HTML file, powered by\n[ReDoc](https://github.com/Redocly/redoc).\n\nBy default, your spec will be titled \"Untitled\" and versioned \"0.1.0\".  You can\nchange this by setting `openapi.title` and `openapi.version` in your ini file.\n\n### Documenting Your API\n\nDocumentation will be autogenerated from the structure of your Pyramid app and\nyour `validate` and `marshal` declarations.  You can document schema fields by\nsetting the `description` property.\n\n```python\nclass Hello(Schema):\n    name = String(required=True, description='Your first and last name.')\n```\n\nThe first line of a view callable's docstring will be used as the `summary`\nproperty.  The following lines will be used for the `description`.\n\n\nDocumentation for the endpoint will be pulled from the view callable's\ndocstring.  The first line becomes the `summary` and the remaining lines become\nthe `description`.\n\nYou can also a line with three hyphens followed by a YAML object.  This will be\nmerged with the auto-generated\n[operation object](https://swagger.io/specification/#operationObject) and can\nbe used to manually augment the spec.\n\n```python\n@view_config(\n    context=WidgetResource,\n    method='post',\n    validate=WidgetSchema(),\n)\ndef create_widget(context, request):\n    \"\"\"\n    Create new widget\n\n    Creates a new widget with an attached plumbus.\n\n    ---\n    responses:\n        201:\n            description: Indicates the widget was successfully created.\n    \"\"\"\n    widget.make()\n    return HTTPCreated()\n```\n\nYou can also pass a dictionary as the `api_spec` property to\n`Configurator.add_view` or `@view_config`, which will be merged with the spec\nin the same way.  This can be advantageous if a single function services\nmultiple views.\n\n```python\n@view_config(\n    context=WidgetResource,\n    method='post',\n    validate=WidgetSchema(),\n    api_spec={\n        'summary': 'Create widget',\n    },\n)\n@view_config(\n    context=WidgetResource,\n    method='put',\n    validate=WidgetSchema(),\n    api_spec={\n        'summary': 'Update widget',\n    },\n)\ndef create_widget(context, request):\n    \"\"\"\n    Create/update new widget\n\n    ---\n    responses:\n        201:\n            description: Indicates the widget was successfully created.\n    \"\"\"\n    widget.create_or_update()\n    return HTTPCreated()\n```\n\n## URL Traversal\n\nIf you're using Pyramid's URL traversal, the generated spec may be mostly\nempty.  This is because pyramid-marshmallow has no way of knowing where in the\nresource tree a resource is.  You can denote this by setting the `__path__`\nproperty on each resource.\n\n```python\nclass Widget(Resource):\n    __path__ = '/widget'\n```\n\nViews attached to this resource will then be added to the spec.\n\nYou can add parameters to your path via the `__params__` property.  You can\nalso tag all attached views via `__tag__`.  Once you define a tag in one\nresource, you can use it elsewhere by setting `__tag__` to the tag name.\n\n```python\nclass Widget(Resource):\n    __path__ = '/widget/{widgetId}'\n    __params__ = [{\n        'name': 'widgetId',\n        'schema': {\n            'type': 'integer',\n        },\n    }]\n    __tag__ = {\n        'name': 'widgets',\n        'description': 'Endpoints for managing a widget.',\n    }\n```\n\n## Mergefile\n\nYou likely will wish to augment your API spec with a description, additional\ncomponents, and more.  This can be achieved with a mergefile.  Write a YAML\nfile with the parts of the spec you wish to augment and pass the filename as\nthe `--merge` flag with `generate-spec`.  The file will be loaded and merged\ninto the generated spec.\n\n## Zones\n\nIt may be that not all endpoints are made available to all users.  For example,\nyou may have all endpoints available internally but only select ones available\npublicly.  You would then want separate API docs for internal users versus\nexternal users.  This can be achieved using zones.\n\nTag each endpoint by setting `api_zone` in `Configuration.add_view` or\n`@view_config`.  By default, all endpoints regardless of zone will be added to\nthe spec.  Set the `--zone` flag in `generate-spec` to only put endpoints\nassigned to that zone in the spec.\n\n## Prior Art\n\n[pyramid-apispec](https://pypi.org/project/pyramid-apispec/) allows you to\naugment view callable docstrings with OpenAPI definitions and can reference\nMarshmallow schemas with the apispec Marshmallow plugin.  It does not support\nvalidating input and marshalling output.  Schemas and routes must be manually\ndeclared.\n\n[Cornice](https://cornice.readthedocs.io/en/latest/schema.html#using-marshmallow)\nsupports validation with Marshmallow schemas, however only on Cornice\nresources, not arbitrary Pyramid endpoints.  It does not support\nauto-generating OpenAPI documentation.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/luhn/pyramid-marshmallow", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyramid-marshmallow", "package_url": "https://pypi.org/project/pyramid-marshmallow/", "platform": "", "project_url": "https://pypi.org/project/pyramid-marshmallow/", "project_urls": {"Homepage": "https://github.com/luhn/pyramid-marshmallow", "Repository": "https://github.com/luhn/pyramid-marshmallow"}, "release_url": "https://pypi.org/project/pyramid-marshmallow/0.6.1/", "requires_dist": ["marshmallow (>=3.0,<4.0)", "pyramid (>=1.7,<2.0)", "apispec (>=3.0,<4.0); extra == \"openapi\"", "PyYAML (>=3.10); extra == \"openapi\""], "requires_python": ">=3.5,<4.0", "summary": "Validate request and response data with Marshmallow and optionally generate an OpenAPI spec.", "version": "0.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyramid-marshmallow</h1>\n<p>pyramid-marshmallow is a simple Pyramid plugin that allows you to validate and\nmarshal a JSON HTTP request or response using\n<a href=\"http://marshmallow.readthedocs.io/\" rel=\"nofollow\">Marshmallow</a> schemas.  You can then\nleverage this to automatically generate an OpenAPI specification for your API.</p>\n<blockquote>\n<p><strong>Version 0.5 and greater requires Marshmallow 3.x.  For Marshmallow 2.x, use\nversion 0.4.</strong></p>\n</blockquote>\n<h2>Basic usage</h2>\n<p>Install the project with <code>pip install pyramid-marshmallow</code>.</p>\n<p>Activate it by adding <code>config.include('pyramid_marshmallow')</code> into your config\nfunction or adding <code>pyramid.includes = pyramid_marshmallow</code> into your ini file.</p>\n<p>To validate incoming data, set <code>validate</code> to a Marshmallow schema in your\n<code>view_config</code>.  The request body is parsed as JSON then passed through the\nschema's <code>load</code> function.  You can access the processed data with\n<code>request.data</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">String</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HelloSchema</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">Root</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span>\n    <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">,</span>\n    <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">HelloSchema</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'Hello, </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span>\n    <span class=\"p\">))</span>\n</pre>\n<p>For GET requests, the URL parameters are passed into the schema.  Value lists\nare not currently supported.</p>\n<p>Setting <code>marshal</code> in your <code>view_config</code> will run the view output through\nmarshmallow (i.e. <code>Schema.dump</code>) before going to the renderer.  You probably\nwill want to set the renderer to <code>json</code>.</p>\n<pre><code>@view_config(\n    context=Root,\n    name='hello',\n    request_method='get',\n    marshal=HelloSchema(),\n    renderer='json',\n)\ndef hello(context, request):\n    name = fetch_name()\n    return {\n        'name': name,\n    }\n</code></pre>\n<p><code>validate</code> and <code>marshal</code> operate independently, so can be used separately or\ntogether.</p>\n<p>As a convenience, you can pass in a dictionary to <code>validate</code> or <code>marshal</code> and\npyramid-marshmallow will turn it into a schema for you.</p>\n<pre><span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">Root</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span>\n    <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">,</span>\n    <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">(),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can also get a schema made from a dictionary by using the\n<code>pyramid_marshmallow.make_schema</code> function.  This can be useful for <code>Nested</code>\nfields.</p>\n<h3>Error handling</h3>\n<p>pyramid-marshmallow passes through exceptions from marshmallow.  So errors\nduring validation will raise a <code>marshmallow.exceptions.ValidationError</code>\nexception.\n(<a href=\"https://marshmallow.readthedocs.io/en/stable/api_reference.html#marshmallow.exceptions.ValidationError\" rel=\"nofollow\">Documentation</a>)</p>\n<p>You may want to attach a view to this exception to expose the error messages to\nthe user.</p>\n<pre><span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">ValidationError</span><span class=\"p\">,</span>\n    <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">validation_error</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"mi\">401</span>  <span class=\"c1\"># HTTP Bad Request</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'errors'</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">normalized_messages</span><span class=\"p\">(),</span>\n    <span class=\"p\">}</span>\n</pre>\n<h2>OpenAPI</h2>\n<p>By adding validation and marshalling to your views, we have the opportunity to\nutilize that data to generate documentation.  pyramid-marshmallow includes an\nutility that uses <a href=\"https://apispec.readthedocs.io/en/stable/\" rel=\"nofollow\">apispec</a> to\ngenerate an <a href=\"https://swagger.io/resources/open-api/\" rel=\"nofollow\">OpenAPI</a> specification for\nyour application.</p>\n<p>First, you'll need to install some extra dependencies.</p>\n<pre>pip install pyramid-marshmallow<span class=\"o\">[</span>openapi<span class=\"o\">]</span>\n</pre>\n<p>Now you can generate your spec by simply passing in an ini file.\npyramid-marshmallow needs to run your application in order to inspect it, so\nthe ini file should contain all the necessary configuration to do so.</p>\n<pre>generate-spec development.ini\n</pre>\n<p>This will output the spec to stdout as JSON.  You can set the <code>--output</code> flag\nto output the results to a file.</p>\n<p>You can set <code>--format yaml</code> to output the spec as YAML instead or\n<code>--format html</code> to output the spec as an HTML file, powered by\n<a href=\"https://github.com/Redocly/redoc\" rel=\"nofollow\">ReDoc</a>.</p>\n<p>By default, your spec will be titled \"Untitled\" and versioned \"0.1.0\".  You can\nchange this by setting <code>openapi.title</code> and <code>openapi.version</code> in your ini file.</p>\n<h3>Documenting Your API</h3>\n<p>Documentation will be autogenerated from the structure of your Pyramid app and\nyour <code>validate</code> and <code>marshal</code> declarations.  You can document schema fields by\nsetting the <code>description</code> property.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Hello</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Your first and last name.'</span><span class=\"p\">)</span>\n</pre>\n<p>The first line of a view callable's docstring will be used as the <code>summary</code>\nproperty.  The following lines will be used for the <code>description</code>.</p>\n<p>Documentation for the endpoint will be pulled from the view callable's\ndocstring.  The first line becomes the <code>summary</code> and the remaining lines become\nthe <code>description</code>.</p>\n<p>You can also a line with three hyphens followed by a YAML object.  This will be\nmerged with the auto-generated\n<a href=\"https://swagger.io/specification/#operationObject\" rel=\"nofollow\">operation object</a> and can\nbe used to manually augment the spec.</p>\n<pre><span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">WidgetResource</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">,</span>\n    <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">WidgetSchema</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_widget</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Create new widget</span>\n\n<span class=\"sd\">    Creates a new widget with an attached plumbus.</span>\n\n<span class=\"sd\">    ---</span>\n<span class=\"sd\">    responses:</span>\n<span class=\"sd\">        201:</span>\n<span class=\"sd\">            description: Indicates the widget was successfully created.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">make</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">HTTPCreated</span><span class=\"p\">()</span>\n</pre>\n<p>You can also pass a dictionary as the <code>api_spec</code> property to\n<code>Configurator.add_view</code> or <code>@view_config</code>, which will be merged with the spec\nin the same way.  This can be advantageous if a single function services\nmultiple views.</p>\n<pre><span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">WidgetResource</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'post'</span><span class=\"p\">,</span>\n    <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">WidgetSchema</span><span class=\"p\">(),</span>\n    <span class=\"n\">api_spec</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'summary'</span><span class=\"p\">:</span> <span class=\"s1\">'Create widget'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@view_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">WidgetResource</span><span class=\"p\">,</span>\n    <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'put'</span><span class=\"p\">,</span>\n    <span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"n\">WidgetSchema</span><span class=\"p\">(),</span>\n    <span class=\"n\">api_spec</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'summary'</span><span class=\"p\">:</span> <span class=\"s1\">'Update widget'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_widget</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Create/update new widget</span>\n\n<span class=\"sd\">    ---</span>\n<span class=\"sd\">    responses:</span>\n<span class=\"sd\">        201:</span>\n<span class=\"sd\">            description: Indicates the widget was successfully created.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">create_or_update</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">HTTPCreated</span><span class=\"p\">()</span>\n</pre>\n<h2>URL Traversal</h2>\n<p>If you're using Pyramid's URL traversal, the generated spec may be mostly\nempty.  This is because pyramid-marshmallow has no way of knowing where in the\nresource tree a resource is.  You can denote this by setting the <code>__path__</code>\nproperty on each resource.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Widget</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">__path__</span> <span class=\"o\">=</span> <span class=\"s1\">'/widget'</span>\n</pre>\n<p>Views attached to this resource will then be added to the spec.</p>\n<p>You can add parameters to your path via the <code>__params__</code> property.  You can\nalso tag all attached views via <code>__tag__</code>.  Once you define a tag in one\nresource, you can use it elsewhere by setting <code>__tag__</code> to the tag name.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Widget</span><span class=\"p\">(</span><span class=\"n\">Resource</span><span class=\"p\">):</span>\n    <span class=\"n\">__path__</span> <span class=\"o\">=</span> <span class=\"s1\">'/widget/</span><span class=\"si\">{widgetId}</span><span class=\"s1\">'</span>\n    <span class=\"n\">__params__</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'widgetId'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'schema'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}]</span>\n    <span class=\"n\">__tag__</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'widgets'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'description'</span><span class=\"p\">:</span> <span class=\"s1\">'Endpoints for managing a widget.'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</pre>\n<h2>Mergefile</h2>\n<p>You likely will wish to augment your API spec with a description, additional\ncomponents, and more.  This can be achieved with a mergefile.  Write a YAML\nfile with the parts of the spec you wish to augment and pass the filename as\nthe <code>--merge</code> flag with <code>generate-spec</code>.  The file will be loaded and merged\ninto the generated spec.</p>\n<h2>Zones</h2>\n<p>It may be that not all endpoints are made available to all users.  For example,\nyou may have all endpoints available internally but only select ones available\npublicly.  You would then want separate API docs for internal users versus\nexternal users.  This can be achieved using zones.</p>\n<p>Tag each endpoint by setting <code>api_zone</code> in <code>Configuration.add_view</code> or\n<code>@view_config</code>.  By default, all endpoints regardless of zone will be added to\nthe spec.  Set the <code>--zone</code> flag in <code>generate-spec</code> to only put endpoints\nassigned to that zone in the spec.</p>\n<h2>Prior Art</h2>\n<p><a href=\"https://pypi.org/project/pyramid-apispec/\" rel=\"nofollow\">pyramid-apispec</a> allows you to\naugment view callable docstrings with OpenAPI definitions and can reference\nMarshmallow schemas with the apispec Marshmallow plugin.  It does not support\nvalidating input and marshalling output.  Schemas and routes must be manually\ndeclared.</p>\n<p><a href=\"https://cornice.readthedocs.io/en/latest/schema.html#using-marshmallow\" rel=\"nofollow\">Cornice</a>\nsupports validation with Marshmallow schemas, however only on Cornice\nresources, not arbitrary Pyramid endpoints.  It does not support\nauto-generating OpenAPI documentation.</p>\n\n          </div>"}, "last_serial": 6446332, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "f07d87fb7a8236559fbeac103a3854c5", "sha256": "de6e3575c8dc2fb809d7339de9ebcfa99d732d3c9caeed7e98f08e5bfcd2b9ed"}, "downloads": -1, "filename": "pyramid_marshmallow-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f07d87fb7a8236559fbeac103a3854c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 2798825, "upload_time": "2018-12-17T22:45:44", "upload_time_iso_8601": "2018-12-17T22:45:44.873282Z", "url": "https://files.pythonhosted.org/packages/74/35/54f56ed9da885b40354f250422890f02b5f003b63f8149d5cff9aafd8acb/pyramid_marshmallow-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55ff8538b4dc9da37c89390bf771451b", "sha256": "ee686375385fac6baa35c866790205b633cdc8153ae4d6e2fa101fa108a6ee41"}, "downloads": -1, "filename": "pyramid-marshmallow-0.4.0.tar.gz", "has_sig": false, "md5_digest": "55ff8538b4dc9da37c89390bf771451b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 2784641, "upload_time": "2018-12-17T22:45:39", "upload_time_iso_8601": "2018-12-17T22:45:39.784633Z", "url": "https://files.pythonhosted.org/packages/e3/81/7c88fa7e963474e6060eb211c0a255a168efb27f89df58e0c67f86eba6bb/pyramid-marshmallow-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "414e081680adf104205b0c9b8585f685", "sha256": "781e59ba3defdaa69baf521cfe21966aa76f4eb4794cc41c3be183ef63db3c03"}, "downloads": -1, "filename": "pyramid_marshmallow-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "414e081680adf104205b0c9b8585f685", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 2798826, "upload_time": "2019-01-25T18:19:08", "upload_time_iso_8601": "2019-01-25T18:19:08.572678Z", "url": "https://files.pythonhosted.org/packages/ad/0b/6704f7f999bbad9bd855c42c7353d216aeeb7a94449ce32b1ed78fff24b9/pyramid_marshmallow-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d0f7e29e1f8ed9c57da8a74b67d35ad", "sha256": "5c6b13b3f15ed2f737d56da98dbef5dd626019d050a074c97fbd83f04ef8c2ce"}, "downloads": -1, "filename": "pyramid-marshmallow-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5d0f7e29e1f8ed9c57da8a74b67d35ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 2784635, "upload_time": "2019-01-25T18:19:04", "upload_time_iso_8601": "2019-01-25T18:19:04.187974Z", "url": "https://files.pythonhosted.org/packages/43/50/837bf16efec170c86c1ddaec3493280a038e1ca9c719d940c530de502d52/pyramid-marshmallow-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "15d7f938928050b61950b5157d579124", "sha256": "7002905206cd9835760e37a1e370ce062d8021e85946a8b5f82371b0b889d29e"}, "downloads": -1, "filename": "pyramid_marshmallow-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15d7f938928050b61950b5157d579124", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8126, "upload_time": "2019-12-12T22:05:07", "upload_time_iso_8601": "2019-12-12T22:05:07.082660Z", "url": "https://files.pythonhosted.org/packages/db/be/2c028ef32309b63cafae3194ee4d5f194f10db9bb51ef6c5528bfa0712fd/pyramid_marshmallow-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29caea1e5adb3fe0ed19b886edb226eb", "sha256": "e5f620d66f5b8aecf76856fb16ac910b93c032e4acac6a4ab13fba9d8da7ab08"}, "downloads": -1, "filename": "pyramid-marshmallow-0.5.0.tar.gz", "has_sig": false, "md5_digest": "29caea1e5adb3fe0ed19b886edb226eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8398, "upload_time": "2019-12-12T22:05:05", "upload_time_iso_8601": "2019-12-12T22:05:05.218779Z", "url": "https://files.pythonhosted.org/packages/96/b0/b6adbae059122906ebefd637996e22f408c02e1b20ea8595adfcddd945a6/pyramid-marshmallow-0.5.0.tar.gz", "yanked": false}], "0.5.0b1": [{"comment_text": "", "digests": {"md5": "0025e1fcefd596f8fe2e32fff149e786", "sha256": "7990bc3b932e2621f08423e598cd36c126f42bcbf660b8373015a25e3e82c7f7"}, "downloads": -1, "filename": "pyramid_marshmallow-0.5.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "0025e1fcefd596f8fe2e32fff149e786", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8146, "upload_time": "2019-08-27T16:44:27", "upload_time_iso_8601": "2019-08-27T16:44:27.332270Z", "url": "https://files.pythonhosted.org/packages/2e/ac/afacf9a6a9d66d2c4a957284070bd3e4cf2d2b93419a56a35a197c1b1063/pyramid_marshmallow-0.5.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45f2c510dc7c667ece660c28dc588f23", "sha256": "58a2f5341d858300d1c06109a1fdee178462ed80e3764bff8a407c2165ee53fd"}, "downloads": -1, "filename": "pyramid-marshmallow-0.5.0b1.tar.gz", "has_sig": false, "md5_digest": "45f2c510dc7c667ece660c28dc588f23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8416, "upload_time": "2019-08-27T16:44:25", "upload_time_iso_8601": "2019-08-27T16:44:25.365226Z", "url": "https://files.pythonhosted.org/packages/1c/98/4a4d4abb0efbfcc56926849eff397226986cf1422ea18a721206b1dae351/pyramid-marshmallow-0.5.0b1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "7230a7419e06954c50a80703f467630c", "sha256": "b5a25489d3eae80197402ff915bfb92d5a3c9dc7501697df5e48bd13c538ed66"}, "downloads": -1, "filename": "pyramid_marshmallow-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7230a7419e06954c50a80703f467630c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8186, "upload_time": "2019-12-12T22:14:06", "upload_time_iso_8601": "2019-12-12T22:14:06.910852Z", "url": "https://files.pythonhosted.org/packages/ea/c6/0e7e15c90c6f3007213936f8e21aa32a59b36037b8a2e79cb6725db01bbf/pyramid_marshmallow-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d84956b97126538476b2dac23a2e0af8", "sha256": "1dce1b9951afa6899c758486b750512e70a495782cef1eb53218b319832604e0"}, "downloads": -1, "filename": "pyramid-marshmallow-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d84956b97126538476b2dac23a2e0af8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8496, "upload_time": "2019-12-12T22:14:05", "upload_time_iso_8601": "2019-12-12T22:14:05.448113Z", "url": "https://files.pythonhosted.org/packages/ea/14/000a5acb9d762a1f45763234e42fb9f9bb18bcf17ccb170716a2c56aa381/pyramid-marshmallow-0.5.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c1f76b35272f7d78c8d53e79fad4d381", "sha256": "e46f30c45633bc9bd0433fd5f9eefbe21d222f365c5592f54cb11befb2cfbbe2"}, "downloads": -1, "filename": "pyramid_marshmallow-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c1f76b35272f7d78c8d53e79fad4d381", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 9094, "upload_time": "2020-01-06T23:10:36", "upload_time_iso_8601": "2020-01-06T23:10:36.237101Z", "url": "https://files.pythonhosted.org/packages/69/dd/20442da03dbc968bce9ba3c17fecc9d995834c80b0bc5b3d3a275e48638a/pyramid_marshmallow-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd985e170df4a6f40962e422c2c539a9", "sha256": "f02360066dfeeeec46576f90026457ef51b3b96ee16846389905f9af53e4d6d0"}, "downloads": -1, "filename": "pyramid-marshmallow-0.6.0.tar.gz", "has_sig": false, "md5_digest": "bd985e170df4a6f40962e422c2c539a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9761, "upload_time": "2020-01-06T23:10:34", "upload_time_iso_8601": "2020-01-06T23:10:34.436445Z", "url": "https://files.pythonhosted.org/packages/11/49/121ce16cccb3ba36a05f9b5bc6080d07dca90140b45a27da4260b7430f44/pyramid-marshmallow-0.6.0.tar.gz", "yanked": false}], "0.6.0b1": [{"comment_text": "", "digests": {"md5": "d1d415849e79696008a4d35a3cd2f959", "sha256": "c345dfd16bd4c9b8184991298ea476399bb9cd40c2ba349208277d357e4db808"}, "downloads": -1, "filename": "pyramid_marshmallow-0.6.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "d1d415849e79696008a4d35a3cd2f959", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 9124, "upload_time": "2019-12-13T21:00:40", "upload_time_iso_8601": "2019-12-13T21:00:40.589149Z", "url": "https://files.pythonhosted.org/packages/d3/e5/f487247dc3f06a1e0a4537b9126ceea0eb89bd47774a3b772a2f4f156287/pyramid_marshmallow-0.6.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7912f9b5b44aa2b44a427d94bfef4704", "sha256": "33e2c795280c3dd8f0f04f3c77568ac4d1fca6f394ee005ddabb1a4fc16780ae"}, "downloads": -1, "filename": "pyramid-marshmallow-0.6.0b1.tar.gz", "has_sig": false, "md5_digest": "7912f9b5b44aa2b44a427d94bfef4704", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9764, "upload_time": "2019-12-13T21:00:38", "upload_time_iso_8601": "2019-12-13T21:00:38.904467Z", "url": "https://files.pythonhosted.org/packages/30/b9/d27ea1b33fd6fe7d40f99c812342ba47342183f9959c9daf4bb38526e7f8/pyramid-marshmallow-0.6.0b1.tar.gz", "yanked": false}], "0.6.0b2": [{"comment_text": "", "digests": {"md5": "55bfb1a5902da3eb946e78bb2f74e969", "sha256": "b1a7be1e1ae95f913b4aa638b6ebfee7352f197a878b4103309d8e6d73e04b68"}, "downloads": -1, "filename": "pyramid_marshmallow-0.6.0b2-py3-none-any.whl", "has_sig": false, "md5_digest": "55bfb1a5902da3eb946e78bb2f74e969", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 9110, "upload_time": "2019-12-31T19:37:35", "upload_time_iso_8601": "2019-12-31T19:37:35.537696Z", "url": "https://files.pythonhosted.org/packages/43/99/09711ce74819984511b520ee1b6d815aab36f9e1cba9704288ccf2c1b556/pyramid_marshmallow-0.6.0b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64e80f0a181373ab3c2b7c970f03b384", "sha256": "7a49c025ffe1a10868bcef30646c97ae5155feec096bdecb80aa75cee114a26f"}, "downloads": -1, "filename": "pyramid-marshmallow-0.6.0b2.tar.gz", "has_sig": false, "md5_digest": "64e80f0a181373ab3c2b7c970f03b384", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9759, "upload_time": "2019-12-31T19:37:34", "upload_time_iso_8601": "2019-12-31T19:37:34.182909Z", "url": "https://files.pythonhosted.org/packages/e5/8c/e9ae41afded0573e2fd74ee16627976bd87ab7d28336b0fc5b66192ee468/pyramid-marshmallow-0.6.0b2.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "19fc6f52b49519f7f110cdc507781ba4", "sha256": "30cab231e11ec568e63dad239af2bbd7e1bfe3cc87a5f9c3b961ebcbceb39512"}, "downloads": -1, "filename": "pyramid_marshmallow-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19fc6f52b49519f7f110cdc507781ba4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 9109, "upload_time": "2020-01-13T19:28:41", "upload_time_iso_8601": "2020-01-13T19:28:41.145726Z", "url": "https://files.pythonhosted.org/packages/5a/92/6c1f5c6f0c27a49e76bc1ed459898cdba8b090601bb108415a2df27f39d2/pyramid_marshmallow-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6768c5291acd86f695ef8442b703c8b2", "sha256": "1114887aa3add28ef5f27f3cede8bceef0373e6805dd299dafdcf8b1a3b77b6f"}, "downloads": -1, "filename": "pyramid-marshmallow-0.6.1.tar.gz", "has_sig": false, "md5_digest": "6768c5291acd86f695ef8442b703c8b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9782, "upload_time": "2020-01-13T19:28:39", "upload_time_iso_8601": "2020-01-13T19:28:39.270727Z", "url": "https://files.pythonhosted.org/packages/96/fc/6adcfc5458adef4afeef5cd4bc717fcb33c9f95a8482347dac87345a812c/pyramid-marshmallow-0.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19fc6f52b49519f7f110cdc507781ba4", "sha256": "30cab231e11ec568e63dad239af2bbd7e1bfe3cc87a5f9c3b961ebcbceb39512"}, "downloads": -1, "filename": "pyramid_marshmallow-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "19fc6f52b49519f7f110cdc507781ba4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 9109, "upload_time": "2020-01-13T19:28:41", "upload_time_iso_8601": "2020-01-13T19:28:41.145726Z", "url": "https://files.pythonhosted.org/packages/5a/92/6c1f5c6f0c27a49e76bc1ed459898cdba8b090601bb108415a2df27f39d2/pyramid_marshmallow-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6768c5291acd86f695ef8442b703c8b2", "sha256": "1114887aa3add28ef5f27f3cede8bceef0373e6805dd299dafdcf8b1a3b77b6f"}, "downloads": -1, "filename": "pyramid-marshmallow-0.6.1.tar.gz", "has_sig": false, "md5_digest": "6768c5291acd86f695ef8442b703c8b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9782, "upload_time": "2020-01-13T19:28:39", "upload_time_iso_8601": "2020-01-13T19:28:39.270727Z", "url": "https://files.pythonhosted.org/packages/96/fc/6adcfc5458adef4afeef5cd4bc717fcb33c9f95a8482347dac87345a812c/pyramid-marshmallow-0.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:23 2020"}