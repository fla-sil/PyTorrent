{"info": {"author": "Carbon Black Developer Network", "author_email": "cb-developer-network@vmware.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "# Carbon Black Cloud Syslog Connector\n\nThe syslog connector lets administrators forward alert notifications and audit logs from their Carbon Black Cloud instance to local, on-premise systems, and:\n\n* Generates pipe-delimited syslog messages with alert metadata identified by the streaming prevention system\n* Aggregates data from one or more Carbon Black Cloud organizations into a single syslog stream\n* Can be configured to use UDP, TCP, or encrypted (TCP over TLS) syslog protocols\n\n\n### Helpful Links\n* [Updating PATH in a Windows Environment](https://www.java.com/en/download/help/path.xml)\n\n### Customer Support\n\nUse the [Developer Community Forum](https://community.carbonblack.com/t5/user/userloginpage?redirectreason=permissiondenied&dest_url=https%3A%2F%2Fcommunity.carbonblack.com%2Ft5%2FDeveloper-Relations%2Fbd-p%2Fdeveloper-relations) to report bugs, request changes, and discuss with other API developers in the Carbon Black Community.\n\n### Requirements\n\n* CB Defense or CB ThreatHunter\n* [Python 2.7 running on a 64-bit Intel platform](https://www.python.org/download/releases/2.7/)\n* [pip](https://pip.pypa.io/en/stable/installing/)\n* [Jinja2](https://pypi.org/project/Jinja2/)\n* [MarkupSafe](https://pypi.org/project/MarkupSafe/1.1.1/)\n* [requests](https://pypi.org/project/requests/2.22.0/)\n* [Flask](https://pypi.org/project/Flask/1.1.1/)\n* [psutil](https://pypi.org/project/psutil/5.7.0/)\n\n\n## Installation\n\nYou can install the Syslog Connector using either PyPI or GitHub.\n\n### PyPI Installation\n\n1. Run the following command in your terminal: `pip install cbc-syslog`\n\n2. Navigate to the Python 2.7 package location: \n    MacOS: `/python2.7/site-packages/cbc_syslog` \n    Windows: `C:\\Python27\\Lib\\site-packages\\cbc_syslog`\n\n3. Copy and paste the Configuration File example shown below into your own `.conf` file and modify it to your own \nspecifications. Below is a table of all the configurable inputs that can be used in the syslog connector.\n\n    | Input      | Required | Description |     \n    | ----------- | ----------- | ----------- | \n    | template      | Y       | Template for syslog output.      |\n    | back_up_dir      | Y       | Location of the Backup Directory. This will be the location of backup files in the event that results fail to send to Syslog. The backup files are deleted upon a successful process.      |\n    | policy_action_severity      | Y       | This sets the default severity level for POLICY_ACTION notifications. By default it is 4.      |\n    | output_format      | Y       | Output format of the data sent. Currently support json, leef, and cef formats      |\n    | output_type      | Y       | Configures the specific output. Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'      |\n    | tcpout      | Y       | Output Type: IP:port      |\n    | udp_out      | Y       | Output Type: IP:port      |\n    | http_out      | Y       | Output Type: http/https endpoint - ie https://server.company.com/endpoint      |\n    | http_headers      | Y       | Required if using http: {'key1': 'value1', 'key2': 'value2'}     |\n    | https_ssl_verify      | Y       | Required if using http: True or False      |\n    | requests_ca_cert      | N       | Override ca file for self signed certificates when using https      |\n    | ca_cert      | N       | Specifies a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog      |\n    | cert      | N       | Specifies a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog      |\n    | key      | N       | Specifies a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog      |\n    | key_password      | N       | Specifies the password to decrypt the given private key when using TLS+TCP syslog      |\n    | tls_verify      | N       |  True or False      |\n    | api_connector_id      | Y       | API Connector ID      |\n    | api_key      | Y       | API Key      |\n    | siem_connector_id      | Y       | SIEM Connector ID      |\n    | siem_api_key      | Y       |  SIEM Key      |\n    | server_url      | Y       | Server URL      |\n\n4. Create a `.txt` file for Logs.\n5. Create an empty backup folder. The location of this folder will be placed in back_up_dir seen in the \nConfiguration file.  For more information on the behavior of the backup folder please see the description of back_up_dir \nin Step 2. \n6. Test the new connector and run the following command: \n\n    ```\n    python cb_defense_syslog.py -l [LOG_FILE_LOCATION] -c [CONFIG_FILE_LOCATION]\n    ```\n\n    A successful run will look like:\n\n    ```\n    INFO:__main__:CB Defense Syslog 1.0\n    INFO:__main__:Number of files in store forward: 0\n    INFO:__main__:Found 2 Cb Defense Servers in config file\n    INFO:__main__:Handling notifications for https://defense-test03.cbdtest.io\n    INFO:notifications:Attempting to connect to url: https://defense-test03.cbdtest.io\n    INFO:notifications:<Response [200]>\n    INFO:notifications:successfully connected, no alerts at this time\n    INFO:__main__:Sending Notifications\n    INFO:__main__:There are no messages to forward to host\n    INFO:__main__:Done Sending Notifications\n    INFO:__main__:Sending Audit Logs\n    INFO:__main__:Sending 18 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Audit Logs\n    INFO:__main__:Handling notifications for https://defense-eap01.conferdeploy.net\n    INFO:notifications:Attempting to connect to url: https://defense-eap01.conferdeploy.net\n    INFO:notifications:<Response [200]>\n    INFO:__main__:Sending Notifications\n    INFO:__main__:Sending 3 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Notifications\n    INFO:__main__:Sending Audit Logs\n    INFO:__main__:Sending 24 messages to 00.00.000.00:000\n    INFO:__main__:Done Sending Audit Logs\n    ```\n### GitHub Installation\n\n1. Pull down the Repo. You may use `git clone` or pull down the zip file directly from GitHub.\n\n2. Navigate to the following location within the package `/src/cbc_syslog`\n\n3. Follow Steps 3-6 in the PyPI installation instructions.\n\n### Sample Config File\n\n    [general]\n\n    #\n    # Template for syslog output.\n    # This is a jinja 2 template\n    # NOTE: The source variable corresponds to the Cb Defense Server used to retrieve results\n    #\n    template = {{source}} {{version}}|{{vendor}}|{{product}}|{{dev_version}}|{{signature}}|{{name}}|{{severity}}|{{extension}}\n\n    #\n    #Location of the Backup Directory\n    #This will be the location of back up files in the event that results fail to send to Syslog\n    #\n\n    back_up_dir = /Users/jdoe/Documents/\n\n    #\n    # This sets the default severity level for POLICY_ACTION notifications.  By default it is 4.\n    #\n    # 0 - Emergency: System is unusable.\n    #\n    # 1 - Alert: Action must be taken immediately.\n    #\n    # 2 - Critical: Critical conditions.\n    #\n    # 3 - Error: Error conditions.\n    #\n    # 4 - Warning: Warning conditions.\n    #\n    # 5 - Notice: Normal but significant condition.\n    #\n    # 6 - Informational: Informational messages.\n    #\n    # 7 - Debug: Debug-level messages.\n    #\n    policy_action_severity = 4\n\n\n    #\n    # Output format of the data sent. Currently support json or cef formats\n    #\n    # Warning: if using json output_format, we recommend NOT using UDP output_type\n    #\n    output_format=cef\n\n    #\n    # Configure the specific output.\n    # Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'\n    #\n    #  udp     - Have the events sent over a UDP socket\n    #  tcp     - Have the events sent over a TCP socket\n    #  tcp+tls - Have the events sent over a TLS+TCP socket\n    #  http    - Have the events sent over a HTTP connection\n    #\n    output_type=tcp\n\n    #\n    # tcpout=IP:port - ie 1.2.3.5:514\n    #\n    tcp_out=\n\n    #\n    # udpout=IP:port - ie 1.2.3.5:514\n    #\n    udp_out=\n\n    #\n    # httpout=http/https endpoint - ie https://server.company.com/endpoint\n    # http_headers= {'key1': 'value1', 'key2': 'value2'} - ie {'content-type': 'application/json'}\n    # https_ssl_verify = True or False\n    #\n    http_out=\n    http_headers= {'content-type': 'application/json'}\n    https_ssl_verify=True\n\n    #\n    # Override ca file for self signed certificates when using https\n    # This is typically a .pem file\n    #\n    #requests_ca_cert=/usr/share/cb/integrations/cb-defense-syslog/cert.pem\n\n    [tls]\n\n    #\n    # Specify a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog\n    #\n    #ca_cert = /etc/cb/integrations/cb-defense/ca.pem\n\n    #\n    # Optionally specify a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog\n    # If cert is specified, key is a required parameter\n    #\n    #cert = /etc/cb/integrations/cb-defense/cert.pem\n\n    #\n    # Optionally specify a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog\n    # If key is specified, cert is a required parameter\n    #\n    #key = /etc/cb/integrations/cb-defense/cert.key\n\n    #\n    # Optionally specify the password to decrypt the given private key when using TLS+TCP syslog\n    #\n    #key_password = p@ssw0rd1\n\n    #\n    # Uncomment tls_verify and set to \"false\" in order to disable verification of the peer server certificate\n    #\n    #tls_verify = true\n\n    [cbdefense1]\n\n    #\n    # Cb Defense API Connector ID\n    #\n    api_connector_id = GO5M953111\n\n    #\n    # Cb Defense API Key\n    #\n    api_key = BYCRM7BRNSH0CXZR5V1Y3111\n\n    #\n    # Cb Defense SIEM Connector ID\n    #\n    siem_connector_id = UEUWR4U111\n\n    #\n    # Cb Defense SIEM Key\n    #\n    siem_api_key = XNS5UKWZXZMCC3CYC7DFM111\n\n    #\n    # Cb Defense Server URL\n    # NOTE: this is not the url to the web ui, but to the API URL (for example, https://api-prod05.conferdeploy.net)\n    #\n    server_url = https://server1.yourcompany.com\n\n    #\n    # For more than one Cb Defense Server, add another server using the following template including the stanza\n    #\n    #[cbdefenseserver2]\n    #api_connector_id = KJARWBZ111\n    #api_key = CQF35EIH2WDF69PTWKGC4111\n    #siem_connector_id = UEUWR4U111\n    #siem_api_key = XNS5UKWZXZMCC3CYC7DFM111\n    #server_url = https://server2.yourcompany.com\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carbonblack/cb-defense-syslog-tls", "keywords": "carbonblack", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cbc-syslog", "package_url": "https://pypi.org/project/cbc-syslog/", "platform": "", "project_url": "https://pypi.org/project/cbc-syslog/", "project_urls": {"Homepage": "https://github.com/carbonblack/cb-defense-syslog-tls"}, "release_url": "https://pypi.org/project/cbc-syslog/1.0.2/", "requires_dist": ["Jinja2 (>=2.8.1)", "MarkupSafe (==1.1.1)", "requests (==2.22.0)", "Flask (==1.1.1)", "psutil (==5.7.0)"], "requires_python": "", "summary": "Syslog Connector for the Carbon Black Cloud", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Carbon Black Cloud Syslog Connector</h1>\n<p>The syslog connector lets administrators forward alert notifications and audit logs from their Carbon Black Cloud instance to local, on-premise systems, and:</p>\n<ul>\n<li>Generates pipe-delimited syslog messages with alert metadata identified by the streaming prevention system</li>\n<li>Aggregates data from one or more Carbon Black Cloud organizations into a single syslog stream</li>\n<li>Can be configured to use UDP, TCP, or encrypted (TCP over TLS) syslog protocols</li>\n</ul>\n<h3>Helpful Links</h3>\n<ul>\n<li><a href=\"https://www.java.com/en/download/help/path.xml\" rel=\"nofollow\">Updating PATH in a Windows Environment</a></li>\n</ul>\n<h3>Customer Support</h3>\n<p>Use the <a href=\"https://community.carbonblack.com/t5/user/userloginpage?redirectreason=permissiondenied&amp;dest_url=https%3A%2F%2Fcommunity.carbonblack.com%2Ft5%2FDeveloper-Relations%2Fbd-p%2Fdeveloper-relations\" rel=\"nofollow\">Developer Community Forum</a> to report bugs, request changes, and discuss with other API developers in the Carbon Black Community.</p>\n<h3>Requirements</h3>\n<ul>\n<li>CB Defense or CB ThreatHunter</li>\n<li><a href=\"https://www.python.org/download/releases/2.7/\" rel=\"nofollow\">Python 2.7 running on a 64-bit Intel platform</a></li>\n<li><a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">pip</a></li>\n<li><a href=\"https://pypi.org/project/Jinja2/\" rel=\"nofollow\">Jinja2</a></li>\n<li><a href=\"https://pypi.org/project/MarkupSafe/1.1.1/\" rel=\"nofollow\">MarkupSafe</a></li>\n<li><a href=\"https://pypi.org/project/requests/2.22.0/\" rel=\"nofollow\">requests</a></li>\n<li><a href=\"https://pypi.org/project/Flask/1.1.1/\" rel=\"nofollow\">Flask</a></li>\n<li><a href=\"https://pypi.org/project/psutil/5.7.0/\" rel=\"nofollow\">psutil</a></li>\n</ul>\n<h2>Installation</h2>\n<p>You can install the Syslog Connector using either PyPI or GitHub.</p>\n<h3>PyPI Installation</h3>\n<ol>\n<li>\n<p>Run the following command in your terminal: <code>pip install cbc-syslog</code></p>\n</li>\n<li>\n<p>Navigate to the Python 2.7 package location:\nMacOS: <code>/python2.7/site-packages/cbc_syslog</code>\nWindows: <code>C:\\Python27\\Lib\\site-packages\\cbc_syslog</code></p>\n</li>\n<li>\n<p>Copy and paste the Configuration File example shown below into your own <code>.conf</code> file and modify it to your own\nspecifications. Below is a table of all the configurable inputs that can be used in the syslog connector.</p>\n<table>\n<thead>\n<tr>\n<th>Input</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>template</td>\n<td>Y</td>\n<td>Template for syslog output.</td>\n</tr>\n<tr>\n<td>back_up_dir</td>\n<td>Y</td>\n<td>Location of the Backup Directory. This will be the location of backup files in the event that results fail to send to Syslog. The backup files are deleted upon a successful process.</td>\n</tr>\n<tr>\n<td>policy_action_severity</td>\n<td>Y</td>\n<td>This sets the default severity level for POLICY_ACTION notifications. By default it is 4.</td>\n</tr>\n<tr>\n<td>output_format</td>\n<td>Y</td>\n<td>Output format of the data sent. Currently support json, leef, and cef formats</td>\n</tr>\n<tr>\n<td>output_type</td>\n<td>Y</td>\n<td>Configures the specific output. Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'</td>\n</tr>\n<tr>\n<td>tcpout</td>\n<td>Y</td>\n<td>Output Type: IP:port</td>\n</tr>\n<tr>\n<td>udp_out</td>\n<td>Y</td>\n<td>Output Type: IP:port</td>\n</tr>\n<tr>\n<td>http_out</td>\n<td>Y</td>\n<td>Output Type: http/https endpoint - ie <a href=\"https://server.company.com/endpoint\" rel=\"nofollow\">https://server.company.com/endpoint</a></td>\n</tr>\n<tr>\n<td>http_headers</td>\n<td>Y</td>\n<td>Required if using http: {'key1': 'value1', 'key2': 'value2'}</td>\n</tr>\n<tr>\n<td>https_ssl_verify</td>\n<td>Y</td>\n<td>Required if using http: True or False</td>\n</tr>\n<tr>\n<td>requests_ca_cert</td>\n<td>N</td>\n<td>Override ca file for self signed certificates when using https</td>\n</tr>\n<tr>\n<td>ca_cert</td>\n<td>N</td>\n<td>Specifies a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog</td>\n</tr>\n<tr>\n<td>cert</td>\n<td>N</td>\n<td>Specifies a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog</td>\n</tr>\n<tr>\n<td>key</td>\n<td>N</td>\n<td>Specifies a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog</td>\n</tr>\n<tr>\n<td>key_password</td>\n<td>N</td>\n<td>Specifies the password to decrypt the given private key when using TLS+TCP syslog</td>\n</tr>\n<tr>\n<td>tls_verify</td>\n<td>N</td>\n<td>True or False</td>\n</tr>\n<tr>\n<td>api_connector_id</td>\n<td>Y</td>\n<td>API Connector ID</td>\n</tr>\n<tr>\n<td>api_key</td>\n<td>Y</td>\n<td>API Key</td>\n</tr>\n<tr>\n<td>siem_connector_id</td>\n<td>Y</td>\n<td>SIEM Connector ID</td>\n</tr>\n<tr>\n<td>siem_api_key</td>\n<td>Y</td>\n<td>SIEM Key</td>\n</tr>\n<tr>\n<td>server_url</td>\n<td>Y</td>\n<td>Server URL</td>\n</tr></tbody></table>\n</li>\n<li>\n<p>Create a <code>.txt</code> file for Logs.</p>\n</li>\n<li>\n<p>Create an empty backup folder. The location of this folder will be placed in back_up_dir seen in the\nConfiguration file.  For more information on the behavior of the backup folder please see the description of back_up_dir\nin Step 2.</p>\n</li>\n<li>\n<p>Test the new connector and run the following command:</p>\n<pre><code>python cb_defense_syslog.py -l [LOG_FILE_LOCATION] -c [CONFIG_FILE_LOCATION]\n</code></pre>\n<p>A successful run will look like:</p>\n<pre><code>INFO:__main__:CB Defense Syslog 1.0\nINFO:__main__:Number of files in store forward: 0\nINFO:__main__:Found 2 Cb Defense Servers in config file\nINFO:__main__:Handling notifications for https://defense-test03.cbdtest.io\nINFO:notifications:Attempting to connect to url: https://defense-test03.cbdtest.io\nINFO:notifications:&lt;Response [200]&gt;\nINFO:notifications:successfully connected, no alerts at this time\nINFO:__main__:Sending Notifications\nINFO:__main__:There are no messages to forward to host\nINFO:__main__:Done Sending Notifications\nINFO:__main__:Sending Audit Logs\nINFO:__main__:Sending 18 messages to 00.00.000.00:000\nINFO:__main__:Done Sending Audit Logs\nINFO:__main__:Handling notifications for https://defense-eap01.conferdeploy.net\nINFO:notifications:Attempting to connect to url: https://defense-eap01.conferdeploy.net\nINFO:notifications:&lt;Response [200]&gt;\nINFO:__main__:Sending Notifications\nINFO:__main__:Sending 3 messages to 00.00.000.00:000\nINFO:__main__:Done Sending Notifications\nINFO:__main__:Sending Audit Logs\nINFO:__main__:Sending 24 messages to 00.00.000.00:000\nINFO:__main__:Done Sending Audit Logs\n</code></pre>\n</li>\n</ol>\n<h3>GitHub Installation</h3>\n<ol>\n<li>\n<p>Pull down the Repo. You may use <code>git clone</code> or pull down the zip file directly from GitHub.</p>\n</li>\n<li>\n<p>Navigate to the following location within the package <code>/src/cbc_syslog</code></p>\n</li>\n<li>\n<p>Follow Steps 3-6 in the PyPI installation instructions.</p>\n</li>\n</ol>\n<h3>Sample Config File</h3>\n<pre><code>[general]\n\n#\n# Template for syslog output.\n# This is a jinja 2 template\n# NOTE: The source variable corresponds to the Cb Defense Server used to retrieve results\n#\ntemplate = {{source}} {{version}}|{{vendor}}|{{product}}|{{dev_version}}|{{signature}}|{{name}}|{{severity}}|{{extension}}\n\n#\n#Location of the Backup Directory\n#This will be the location of back up files in the event that results fail to send to Syslog\n#\n\nback_up_dir = /Users/jdoe/Documents/\n\n#\n# This sets the default severity level for POLICY_ACTION notifications.  By default it is 4.\n#\n# 0 - Emergency: System is unusable.\n#\n# 1 - Alert: Action must be taken immediately.\n#\n# 2 - Critical: Critical conditions.\n#\n# 3 - Error: Error conditions.\n#\n# 4 - Warning: Warning conditions.\n#\n# 5 - Notice: Normal but significant condition.\n#\n# 6 - Informational: Informational messages.\n#\n# 7 - Debug: Debug-level messages.\n#\npolicy_action_severity = 4\n\n\n#\n# Output format of the data sent. Currently support json or cef formats\n#\n# Warning: if using json output_format, we recommend NOT using UDP output_type\n#\noutput_format=cef\n\n#\n# Configure the specific output.\n# Valid options are: 'udp', 'tcp', 'tcp+tls', 'http'\n#\n#  udp     - Have the events sent over a UDP socket\n#  tcp     - Have the events sent over a TCP socket\n#  tcp+tls - Have the events sent over a TLS+TCP socket\n#  http    - Have the events sent over a HTTP connection\n#\noutput_type=tcp\n\n#\n# tcpout=IP:port - ie 1.2.3.5:514\n#\ntcp_out=\n\n#\n# udpout=IP:port - ie 1.2.3.5:514\n#\nudp_out=\n\n#\n# httpout=http/https endpoint - ie https://server.company.com/endpoint\n# http_headers= {'key1': 'value1', 'key2': 'value2'} - ie {'content-type': 'application/json'}\n# https_ssl_verify = True or False\n#\nhttp_out=\nhttp_headers= {'content-type': 'application/json'}\nhttps_ssl_verify=True\n\n#\n# Override ca file for self signed certificates when using https\n# This is typically a .pem file\n#\n#requests_ca_cert=/usr/share/cb/integrations/cb-defense-syslog/cert.pem\n\n[tls]\n\n#\n# Specify a file containing PEM-encoded CA certificates for verifying the peer server when using TLS+TCP syslog\n#\n#ca_cert = /etc/cb/integrations/cb-defense/ca.pem\n\n#\n# Optionally specify a file containing PEM-encoded client certificate for verifying this client when using TLS+TCP syslog\n# If cert is specified, key is a required parameter\n#\n#cert = /etc/cb/integrations/cb-defense/cert.pem\n\n#\n# Optionally specify a file containing PEM-encoded private key for verifying this client when using TLS+TCP syslog\n# If key is specified, cert is a required parameter\n#\n#key = /etc/cb/integrations/cb-defense/cert.key\n\n#\n# Optionally specify the password to decrypt the given private key when using TLS+TCP syslog\n#\n#key_password = p@ssw0rd1\n\n#\n# Uncomment tls_verify and set to \"false\" in order to disable verification of the peer server certificate\n#\n#tls_verify = true\n\n[cbdefense1]\n\n#\n# Cb Defense API Connector ID\n#\napi_connector_id = GO5M953111\n\n#\n# Cb Defense API Key\n#\napi_key = BYCRM7BRNSH0CXZR5V1Y3111\n\n#\n# Cb Defense SIEM Connector ID\n#\nsiem_connector_id = UEUWR4U111\n\n#\n# Cb Defense SIEM Key\n#\nsiem_api_key = XNS5UKWZXZMCC3CYC7DFM111\n\n#\n# Cb Defense Server URL\n# NOTE: this is not the url to the web ui, but to the API URL (for example, https://api-prod05.conferdeploy.net)\n#\nserver_url = https://server1.yourcompany.com\n\n#\n# For more than one Cb Defense Server, add another server using the following template including the stanza\n#\n#[cbdefenseserver2]\n#api_connector_id = KJARWBZ111\n#api_key = CQF35EIH2WDF69PTWKGC4111\n#siem_connector_id = UEUWR4U111\n#siem_api_key = XNS5UKWZXZMCC3CYC7DFM111\n#server_url = https://server2.yourcompany.com\n</code></pre>\n\n          </div>"}, "last_serial": 7181266, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a376c03432a788279a4c634a466cc9c7", "sha256": "d6a58fcefe7880abd1782eac7f486d986ebe63d958d3a8c4792d2a4dea959c0b"}, "downloads": -1, "filename": "cbc_syslog-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "a376c03432a788279a4c634a466cc9c7", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 398751, "upload_time": "2020-02-11T21:10:46", "upload_time_iso_8601": "2020-02-11T21:10:46.702699Z", "url": "https://files.pythonhosted.org/packages/b1/59/d6b76ddc19d9d2e4e819a0ef7262c72ae2a9c971aa2a0061a98273f805ea/cbc_syslog-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "572a545ce9dcd89e7d5f7f449127ebed", "sha256": "0a1d87fb55bce35f874ff8c837279646fd59a82de2b5d33ba2424a2c0d5f84e1"}, "downloads": -1, "filename": "cbc_syslog-1.0.0.tar.gz", "has_sig": false, "md5_digest": "572a545ce9dcd89e7d5f7f449127ebed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236176, "upload_time": "2020-02-11T21:10:48", "upload_time_iso_8601": "2020-02-11T21:10:48.510784Z", "url": "https://files.pythonhosted.org/packages/69/c9/9383e145afc3411e64e85ab40efbfbc5981e6c8d64695d6407d2302a8085/cbc_syslog-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "33ce6a7eb0a0a59160bf25b0fba321f4", "sha256": "a87cdda954da68fe50d6f24adec235c36ae7b93d298821c72f72e530cd1edcde"}, "downloads": -1, "filename": "cbc_syslog-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "33ce6a7eb0a0a59160bf25b0fba321f4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 399034, "upload_time": "2020-04-28T16:13:17", "upload_time_iso_8601": "2020-04-28T16:13:17.280540Z", "url": "https://files.pythonhosted.org/packages/c9/15/3725674c4dc65811a342695420cf253d879e5b8184243f50905a60ebc077/cbc_syslog-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a31a3f9f4ec729e3d51b21ec6a81508", "sha256": "a31b9a1e0c1454b613e083555c8529e6e63e839c52f3222f67f469fcac411682"}, "downloads": -1, "filename": "cbc_syslog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8a31a3f9f4ec729e3d51b21ec6a81508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 235452, "upload_time": "2020-04-28T16:13:18", "upload_time_iso_8601": "2020-04-28T16:13:18.438833Z", "url": "https://files.pythonhosted.org/packages/02/16/f3a2356d1bc75e8e234cfec153f280b080e6bbf6fdd722e1514b71c1bf44/cbc_syslog-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "931856e476d8993a9618cfcd6cdec0e9", "sha256": "c9a57059444236b9854d9f4a80e5b3d721afde7b567e3e6dce1916f9c209f9b6"}, "downloads": -1, "filename": "cbc_syslog-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "931856e476d8993a9618cfcd6cdec0e9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 399320, "upload_time": "2020-05-06T16:04:01", "upload_time_iso_8601": "2020-05-06T16:04:01.209802Z", "url": "https://files.pythonhosted.org/packages/d9/d2/45d9272e7163e7ffa058741be3ae5125c3e2749ec368820c329594c4d112/cbc_syslog-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96a000b84e7ffe7ffff5fc6d9e98060b", "sha256": "f7d489b878504a15ae17d0734e9d48232bad5f392050328edb1853bc446f643c"}, "downloads": -1, "filename": "cbc_syslog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "96a000b84e7ffe7ffff5fc6d9e98060b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236192, "upload_time": "2020-05-06T16:04:02", "upload_time_iso_8601": "2020-05-06T16:04:02.467988Z", "url": "https://files.pythonhosted.org/packages/c5/ba/3faeb0ec05a0b73e92e3497ba422daab3d00f054a06f34dfbdeab7ddedfc/cbc_syslog-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "931856e476d8993a9618cfcd6cdec0e9", "sha256": "c9a57059444236b9854d9f4a80e5b3d721afde7b567e3e6dce1916f9c209f9b6"}, "downloads": -1, "filename": "cbc_syslog-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "931856e476d8993a9618cfcd6cdec0e9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 399320, "upload_time": "2020-05-06T16:04:01", "upload_time_iso_8601": "2020-05-06T16:04:01.209802Z", "url": "https://files.pythonhosted.org/packages/d9/d2/45d9272e7163e7ffa058741be3ae5125c3e2749ec368820c329594c4d112/cbc_syslog-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96a000b84e7ffe7ffff5fc6d9e98060b", "sha256": "f7d489b878504a15ae17d0734e9d48232bad5f392050328edb1853bc446f643c"}, "downloads": -1, "filename": "cbc_syslog-1.0.2.tar.gz", "has_sig": false, "md5_digest": "96a000b84e7ffe7ffff5fc6d9e98060b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 236192, "upload_time": "2020-05-06T16:04:02", "upload_time_iso_8601": "2020-05-06T16:04:02.467988Z", "url": "https://files.pythonhosted.org/packages/c5/ba/3faeb0ec05a0b73e92e3497ba422daab3d00f054a06f34dfbdeab7ddedfc/cbc_syslog-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:10 2020"}