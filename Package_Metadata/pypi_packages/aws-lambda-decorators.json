{"info": {"author": "Grid Smarter Cities", "author_email": "open-source@gridsmartercities.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[<img align=\"right\" alt=\"Grid Smarter Cities\" src=\"https://s3.eu-west-2.amazonaws.com/open-source-resources/grid_smarter_cities_small.png\">](https://www.gridsmartercities.com/)\n\n![Build Status](https://codebuild.eu-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiSTZNdEsxUHdnWWdRMGwrS3FuaUxSb0g5c2hNdWdSNE94Y1RFRGNrdk96Zm9LWlZWWmpEK1FTWmcraGRnMEdzbmRjakF5SDVQUVBzcVpNL3hLSGw3TnpNPSIsIml2UGFyYW1ldGVyU3BlYyI6ImZsbHEwcUJGOFV2VXNpWHoiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Github Release](https://img.shields.io/github/release/gridsmartercities/aws-lambda-decorators.svg?style=flat)\n\\\n\\\n![Python Versions](https://img.shields.io/pypi/pyversions/aws-lambda-decorators.svg?style=flat)\n![PyPi Version](https://img.shields.io/pypi/v/aws-lambda-decorators.svg?style=flat)\n![PyPi Status](https://img.shields.io/pypi/status/aws-lambda-decorators.svg?style=flat)\n![Pypi Downloads](https://img.shields.io/pypi/dm/aws-lambda-decorators.svg?style=flat&logo=pypi)\n\n# aws-lambda-decorators\n\nA set of Python decorators to ease the development of AWS lambda functions.\n\n## Installation\n\nThe easiest way to use these AWS Lambda Decorators is to install them through Pip:\n\n`pip install aws-lambda-decorators`\n\n## Logging\n\nThe Logging level of the decorators can be controlled by setting a LOG_LEVEL environment variable. In python:\n\n`os.environ[\"LOG_LEVEL\"] = \"INFO\"`\n\nThe default value is \"INFO\"\n\n## Package Contents\n\n### [Decorators](https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/decorators.py)\n\nThe current list of AWS Lambda Python Decorators includes:\n\n* [__extract__](#extract): a decorator to extract and validate specific keys of a dictionary parameter passed to a AWS Lambda function.\n* [__extract_from_event__](#extract_from_event): a facade of [__extract__](#extract) to extract and validate keys from an AWS API Gateway lambda function _event_ parameter.\n* [__extract_from_context__](#extract_from_context): a facade of [__extract__](#extract) to extract and validate keys from an AWS API Gateway lambda function _context_ parameter.\n* [__extract_from_ssm__](#extract_from_ssm): a decorator to extract from AWS SSM the values of a set of parameter keys.\n* [__validate__](#validate): a decorator to validate a list of function parameters.\n* [__log__](#log): a decorator to log the parameters passed to the lambda function and/or the response of the lambda function.\n* [__handle_exceptions__](#handle_exceptions): a decorator to handle any type of declared exception generated by the lambda function. \n* [__response_body_as_json__](#response_body_as_json): a decorator to transform a response dictionary body to a json string.\n* [__handle_all_exceptions__](#handle_all_exceptions): a decorator to handle all exceptions thrown by the lambda function.\n* [__cors__](#cors): a decorator to add cors headers to a lambda function.\n* [__push_ws_errors__](#push_ws_errors): a decorator to push unsuccessful responses back to the calling user via websockets with api gateway.\n* [__push_ws_responses__](#push_ws_response): a decorator to push all responses back to the calling user via websockets with api gateway.\n\n\n### [Validators](https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/validators.py)\n\nCurrently, the package offers 12 validators:\n\n* __Mandatory__: Checks if a parameter has a value.\n* __RegexValidator__: Checks a parameter against a regular expression.\n* __SchemaValidator__: Checks if an object adheres to the schema. Uses [schema](https://github.com/keleshev/schema) library.\n* __Minimum__: Checks if an optional numerical value is greater than a minimum value.\n* __Maximum__: Checks if an optional numerical value is less than a maximum value.\n* __MinLength__: Checks if an optional string value is longer than a minimum length.\n* __MaxLength__: Checks if an optional string value is shorter than a maximum length.\n* __Type__: Checks if an optional object value is of a given python type.\n* __EnumValidator__: Checks if an optional object value is in a list of valid values.\n* __NonEmpty__: Checks if an optional object value is not an empty value.\n* __DateValidator__: Checks if a given string is a valid date according to a passed in date format.\n* __CurrencyCodeValidator__: Checks if a given string is a valid currency code (ISO 4217).\n\n### [Decoders](https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/decoders.py)\n\nThe package offers functions to decode from JSON and JWT. \n\n* __decode_json__: decodes/converts a json string to a python dictionary\n* __decode_jwt__: decodes/converts a JWT string to a python dictionary\n\n## Examples\n\nYou can see some basic examples in the [examples](https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/examples/examples.py) folder. \n\n### extract\n\nThis decorator extracts and validates values from dictionary parameters passed to a Lambda Function.\n\n* The decorator takes a list of __Parameter__ objects.\n* Each __Parameter__ object requires a non-empty path to the parameter in the dictionary, and the name of the dictionary (func_param_name)\n* The parameter value is extracted and added as a kwarg to the lambda handler (or any other decorated function/method).\n* You can add the parameter to the handler signature, or access it in the handler through kwargs.\n* The name of the extracted parameter is defaulted to the last element of the path name, but can be changed by passing a (valid pythonic variable name) var_name\n* You can define a default value for the parameter in the __Parameter__ or in the lambda handler itself.\n* A 400 exception is raised when the parameter cannot be extracted or when it does not validate.\n* A variable path (e.g. '/headers/Authorization[jwt]/sub') can be annotated to specify a decoding. In the example, Authorization might contain a JWT, which needs to be decoded before accessing the \"sub\" element.\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent/my_param', func_param_name='a_dictionary'),  # extracts a non mandatory my_param from a_dictionary\n    Parameter(path='/parent/missing_non_mandatory', func_param_name='a_dictionary', default='I am missing'),  # extracts a non mandatory missing_non_mandatory from a_dictionary\n    Parameter(path='/parent/missing_mandatory', func_param_name='a_dictionary'),  # does not fail as the parameter is not validated as mandatory\n    Parameter(path='/parent/child/id', validators=[Mandatory], var_name='user_id', func_param_name='another_dictionary')  # extracts a mandatory id as \"user_id\" from another_dictionary\n])\ndef extract_example(a_dictionary, another_dictionary, my_param='aDefaultValue', missing_non_mandatory='I am missing', missing_mandatory=None, user_id=None):\n    \"\"\"\n        Given these two dictionaries:\n\n        a_dictionary = { \n            'parent': { \n                'my_param': 'Hello!' \n            }, \n            'other': 'other value' \n        }\n\n        another_dictionary = { \n            'parent': { \n                'child': { \n                    'id': '123' \n                } \n            } \n        }\n\n        you can now access the extracted parameters directly: \n    \"\"\"\n    return my_param, missing_non_mandatory, missing_mandatory, user_id\n```\n\nOr you can use kwargs instead of specific parameter names:\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent/my_param', func_param_name='a_dictionary')  # extracts a non mandatory my_param from a_dictionary\n])\ndef extract_to_kwargs_example(a_dictionary, **kwargs):\n    \"\"\"\n        a_dictionary = { \n            'parent': { \n                'my_param': 'Hello!' \n            }, \n            'other': 'other value' \n        }\n    \"\"\"\n    return kwargs['my_param']  # returns 'Hello!'\n```\n\nA missing mandatory parameter, or a parameter that fails validation, will raise an exception:\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent/mandatory_param', func_param_name='a_dictionary', validators=[Mandatory])  # extracts a mandatory mandatory_param from a_dictionary\n])\ndef extract_mandatory_param_example(a_dictionary, mandatory_param=None):\n    return 'Here!'  # this part will never be reached, if the mandatory_param is missing\n\nresponse = extract_mandatory_param_example({'parent': {'my_param': 'Hello!'}, 'other': 'other value'} )\n\nprint(response)  # prints { 'statusCode': 400, 'body': '{\"message\": [{\"mandatory_param\": [\"Missing mandatory value\"]}]}' } and logs a more detailed error\n\n```\n\nYou can add custom error messages to all validators, and incorporate to those error messages the validated value and the validation condition:\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent/an_int', func_param_name='a_dictionary', validators=[Minimum(100, 'Bad value {value}: should be at least {condition}')])  # extracts a mandatory mandatory_param from a_dictionary\n])\ndef extract_minimum_param_with_custom_error_example(a_dictionary, mandatory_param=None):\n    return 'Here!'  # this part will never be reached, if the an_int param is less than 100\n\nresponse = extract_minimum_param_with_custom_error_example({'parent': {'an_int': 10}})\n\nprint(response)  # prints { 'statusCode': 400, 'body': '{\"message\": [{\"an_int\": [\"Bad value 10: should be at least 100\"]}]}' } and logs a more detailed error\n\n```\n\nYou can group the validation errors together (instead of exiting on first error).\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent/mandatory_param', func_param_name='a_dictionary', validators=[Mandatory]),  # extracts two mandatory parameters from a_dictionary\n    Parameter(path='/parent/another_mandatory_param', func_param_name='a_dictionary', validators=[Mandatory]),\n    Parameter(path='/parent/an_int', func_param_name='a_dictionary', validators=[Maximum(10), Minimum(5)])\n], group_errors=True)  # groups both errors together\ndef extract_multiple_param_example(a_dictionary, mandatory_param=None, another_mandatory_param=None, an_int=0):\n    return 'Here!'  # this part will never be reached, if the mandatory_param is missing\n\nresponse = extract_multiple_param_example({'parent': {'my_param': 'Hello!', 'an_int': 20}, 'other': 'other value'})\n\nprint(response)  # prints {'statusCode': 400, 'body': '{\"message\": [{\"mandatory_param\": [\"Missing mandatory value\"]}, {\"another_mandatory_param\": [\"Missing mandatory value\"]}, {\"an_int\": [\"\\'20\\' is greater than maximum value \\'10\\'\"]}]}'}\n\n```\n\nYou can decode any part of the parameter path from json or any other existing annotation.\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent[json]/my_param', func_param_name='a_dictionary')  # extracts a non mandatory my_param from a_dictionary\n])\ndef extract_from_json_example(a_dictionary, my_param=None):\n    \"\"\"\n        a_dictionary = { \n            'parent': '{\"my_param\": \"Hello!\" }', \n            'other': 'other value' \n        }\n    \"\"\"\n    return my_param  # returns 'Hello!'\n\n```\n\nYou can also use an integer annotation to access an specific list element by index.\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/parent[1]/my_param', func_param_name='a_dictionary')  # extracts a non mandatory my_param from a_dictionary\n])\ndef extract_from_list_example(a_dictionary, my_param=None):\n    \"\"\"\n        a_dictionary = { \n            'parent': [\n                {'my_param': 'Hello!'},\n                {'my_param': 'Bye!'}\n            ]\n        }\n    \"\"\"\n    return my_param  # returns 'Bye!'\n\n```\n\nYou can extract all parameters into a dictionary\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/params/my_param_1', func_param_name='a_dictionary'),  # extracts a non mandatory my_param_1 from a_dictionary\n    Parameter(path='/params/my_param_2', func_param_name='a_dictionary')  # extracts a non mandatory my_param_2 from a_dictionary\n])\ndef extract_dictionary_example(a_dictionary, **kwargs):\n    \"\"\"\n        a_dictionary = { \n            'params': {\n                'my_param_1': 'Hello!',\n                'my_param_2': 'Bye!'\n            }\n        }\n    \"\"\"\n    return kwargs  # returns {'my_param_1': 'Hello!', 'my_param_2': 'Bye!'}\n\n```\n\nYou can apply a transformation to an extracted value. The transformation will happen before validation.\n\nExample:\n```python\n@extract(parameters=[\n    Parameter(path='/params/my_param', func_param_name='a_dictionary', transform=int)  # extracts a non mandatory my_param from a_dictionary\n])\ndef extract_with_transform_example(a_dictionary, my_param=None):\n    \"\"\"\n        a_dictionary = { \n            'params': {\n                'my_param': '2'  # the original value is the string '2'\n            }\n        }\n    \"\"\"\n    return my_param  # returns the int value 2\n\n```\n\nThe transform function can be any function, with its own error handling.\n\nExample:\n```python\n\ndef to_int(arg):\n    try:\n        return int(arg)\n    except Exception:\n        raise Exception(\"My custom error message\")\n\n@extract(parameters=[\n    Parameter(path='/params/my_param', func_param_name='a_dictionary', transform=to_int)  # extracts a non mandatory my_param from a_dictionary\n])\ndef extract_with_custom_transform_example(a_dictionary, my_param=None):\n    return {}\n\nresponse = extract_with_custom_transform_example({'params': {'my_param': 'abc'}})\n\nprint(response)  # prints {'statusCode': 400, 'body': '{\"message\": \"Error extracting parameters\"}'}, and the logs will contain the \"My custom error message\" message.\n\n\n```\n\n### extract_from_event\n\nThis decorator is just a facade to the [extract](#extract) method to be used in AWS Api Gateway Lambdas. It automatically extracts from the event lambda parameter.\n\nExample:\n```python\n@extract_from_event(parameters=[\n    Parameter(path='/body[json]/my_param', validators=[Mandatory]),  # extracts a mandatory my_param from the json body of the event\n    Parameter(path='/headers/Authorization[jwt]/sub', validators=[Mandatory], var_name='user_id')  # extract the mandatory sub value as user_id from the authorization JWT\n])\ndef extract_from_event_example(event, context, my_param=None, user_id=None):\n    \"\"\"\n        event = { \n            'body': '{\"my_param\": \"Hello!\"}', \n            'headers': { \n                'Authorization': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c' \n            } \n        }\n    \"\"\"\n    return my_param, user_id  # returns ('Hello!', '1234567890')\n```\n\n### extract_from_context\n\nThis decorator is just a facade to the [extract](#extract) method to be used in AWS Api Gateway Lambdas. It automatically extracts from the context lambda parameter.\n\nExample:\n```python\n@extract_from_context(parameters=[\n    Parameter(path='/parent/my_param', validators=[Mandatory])  # extracts a mandatory my_param from the parent element in context\n])\ndef extract_from_context_example(event, context, my_param=None):\n    \"\"\"\n        context = {\n            'parent': {\n                'my_param': 'Hello!'\n            }\n        }\n    \"\"\"    \n    return my_param  # returns 'Hello!'\n```\n\n### extract_from_ssm\n\nThis decorator extracts a parameter from AWS SSM and passes the parameter down to your function as a kwarg.\n\n* The decorator takes a list of __SSMParameter__ objects.\n* Each __SSMParameter__ object requires the name of the SSM parameter (ssm_name)\n* If no var_name is passed in, the extracted value is passed to the function with the ssm_name name\n\nExample:\n```python\n@extract_from_ssm(ssm_parameters=[\n    SSMParameter(ssm_name='one_key'),  # extracts the value of one_key from SSM as a kwarg named \"one_key\"\n    SSMParameter(ssm_name='another_key', var_name=\"another\")  # extracts another_key as a kwarg named \"another\"\n])\ndef extract_from_ssm_example(your_func_params, one_key=None, another=None):\n    return your_func_params, one_key, another\n```\n\n### validate\n\nThis decorator validates a list of non dictionary parameters from your lambda function.\n\n* The decorator takes a list of __ValidatedParameter__ objects.\n* Each parameter object needs the name of the lambda function parameter that it is going to be validated, and the list of rules to validate.\n* A 400 exception is raised when the parameter does not validate.\n\nExample:\n```python\n@validate(parameters=[\n    ValidatedParameter(func_param_name='a_param', validators=[Mandatory]),  # validates a_param as mandatory\n    ValidatedParameter(func_param_name='another_param', validators=[Mandatory, RegexValidator(r'\\d+')])  # validates another_param as mandatory and containing only digits\n    ValidatedParameter(func_param_name='param_with_schema', validators=[SchemaValidator(Schema({'a': Or(str, dict)}))])  # validates param_with_schema as an object with specified schema\n])\ndef validate_example(a_param, another_param, param_with_schema):\n    return a_param, another_param, param_with_schema  # returns 'Hello!', '123456', {'a': {'b': 'c'}}\n\nvalidate_example('Hello!', '123456', {'a': {'b': 'c'}})\n```\n\nGiven the same function `validate_example`, a 400 exception is returned if at least one parameter does not validate (as per the [extract](#extract) decorator, you can group errors with the group_errors flag):\n\n```python\nvalidate_example('Hello!', 'ABCD')  # returns a 400 status code and an error message\n```\n\n### log\n\nThis decorator allows for logging the function arguments and/or the response.\n\nExample:\n```python\n@log(parameters=True, response=True)\ndef log_example(parameters): \n    return 'Done!'\n\nlog_example('Hello!')  # logs 'Hello!' and 'Done!'\n```\n\n### handle_exceptions\n\nThis decorator handles a list of exceptions, returning a 400 response containing the specified friendly message to the caller.\n\n* The decorator takes a list of __ExceptionHandler__ objects.\n* Each __ExceptionHandler__ requires the type of exception to check, and an optional friendly message to return to the caller.\n\nExample:\n```python\n@handle_exceptions(handlers=[\n    ExceptionHandler(ClientError, \"Your message when a client error happens.\")\n])\ndef handle_exceptions_example():\n    dynamodb = boto3.resource('dynamodb')\n    table = dynamodb.Table('non_existing_table')\n    table.query(KeyConditionExpression=Key('user_id').eq(user_id))\n    # ...\n\nhandle_exceptions_example()  # returns {'body': '{\"message\": \"Your message when a client error happens.\"}', 'statusCode': 400}\n```\n\n### handle_all_exceptions\n\nThis decorator handles all exceptions thrown by a lambda, returning a 400 response and the exception's message.\n\nExample:\n```python\n@handle_all_exceptions()\ndef handle_exceptions_example():\n    test_list = [1, 2, 3]\n    invalid_value = test_list[5]\n    # ...    \n\nhandle_all_exceptions_example()  # returns {'body': '{\"message\": \"list index out of range\"}, 'statusCode': 400}\n```\n\n### response_body_as_json\n\nThis decorator ensures that, if the response contains a body, the body is dumped as json.\n\n* Returns a 500 error if the response body cannot be dumped as json.\n\nExample:\n```python\n@response_body_as_json\ndef response_body_as_json_example():\n    return {'statusCode': 400, 'body': {'param': 'hello!'}}\n\nresponse_body_as_json_example()  # returns { 'statusCode': 400, 'body': \"{'param': 'hello!'}\" }\n```\n\n### cors\n\nThis decorator adds your defined CORS headers to the decorated function response.\n\n* Returns a 500 error if one or more of the CORS headers have an invalid type\n\nExample:\n```python\n@cors(allow_origin='*', allow_methods='POST', allow_headers='Content-Type', max_age=86400)\ndef cors_example():\n    return {'statusCode': 200}\n\ncors_example()  # returns {'statusCode': 200, 'headers': {'access-control-allow-origin': '*', 'access-control-allow-methods': 'POST', 'access-control-allow-headers': 'Content-Type', 'access-control-max-age': 86400}}\n```\n\n### push_ws_errors\n\nThis decorator pushes unsuccessful responses back to the calling client over websockets built on api gateway\n\nThis decorator requires the client is connected to the websocket api gateway instance, and will therefore have a connection id\n\nExample:\n```py\n@push_ws_errors('https://api_id.execute_id.region.amazonaws.com/Prod')\n@handle_all_exceptions()\ndef handler(event, context):\n    return {\n        'statusCode': 400,\n        'body': {\n            'message': 'Bad request'\n        }\n    }\n\n# will push {'type': 'error', 'statusCode': 400, 'message': 'Bad request'} back to the client via websockets\n```\n\n### push_ws_response\n\nThis decorator pushes all responses back to the calling client over websockets built on api gateway\n\nThis decorator requires the client is connected to the websocket api gateway instance, and will therefore have a connection id\n\nExample:\n```py\n@push_ws_response('https://api_id.execute_id.region.amazonaws.com/Prod')\ndef handler(event, context):\n    return {\n        'statusCode': 200,\n        'body': 'Hello, world!'\n    }\n\n# will push {'statusCode': 200, 'body': 'Hello, world!'} back to the client via websockets\n```\n\n## Writing your own validators\n\nYou can create your own validators by inheriting from the Validator class.\n\nFix length validator example:\n\n```python\nclass FixLength(Validator):\n    ERROR_MESSAGE = \"'{value}' length should be '{condition}'\"\n\n    def __init__(self, fix_length: int, error_message=None):\n        super().__init__(error_message=error_message, condition=fix_length)\n\n    def validate(self, value=None):\n        if value is None:\n            return True\n\n        return len(str(value)) == self._condition\n```\n\n## Documentation\n\nYou can get the docstring help by running:  \n\n```bash\n>>> from aws_lambda_decorators.decorators import extract\n>>> help(extract)\n```\n\n## Links\n\n* [PyPi](https://pypi.org/project/aws-lambda-decorators/)\n* [Test PyPi](https://test.pypi.org/project/aws-lambda-decorators/)\n* [Github](https://github.com/gridsmartercities/aws-lambda-decorators)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gridsmartercities/aws-lambda-decorators", "keywords": "aws lambda decorator", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aws-lambda-decorators", "package_url": "https://pypi.org/project/aws-lambda-decorators/", "platform": "", "project_url": "https://pypi.org/project/aws-lambda-decorators/", "project_urls": {"Homepage": "https://github.com/gridsmartercities/aws-lambda-decorators"}, "release_url": "https://pypi.org/project/aws-lambda-decorators/0.48/", "requires_dist": ["boto3", "PyJWT", "schema"], "requires_python": "", "summary": "A set of python decorators to simplify aws python lambda development", "version": "0.48", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.gridsmartercities.com/\" rel=\"nofollow\"><img align=\"right\" alt=\"Grid Smarter Cities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c19863ac75f2e5c4630fd5d796e78c8954c28a23/68747470733a2f2f73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f6f70656e2d736f757263652d7265736f75726365732f677269645f736d61727465725f6369746965735f736d616c6c2e706e67\"></a></p>\n<p><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebdbec21e8f26ef93da436ebf66f75213ec5067c/68747470733a2f2f636f64656275696c642e65752d776573742d322e616d617a6f6e6177732e636f6d2f6261646765733f757569643d65794a6c626d4e79655842305a57524559585268496a6f6953545a4e644573785548646e575764524d4777725333467561557853623067356332684e645764534e4539345931524652474e72646b39365a6d394c576c5a57576d70454b314654576d63726147526e4d45647a626d526a616b4635534456515556427a6356704e4c33684c53477733546e704e50534973496d6c32554746795957316c644756795533426c59794936496d5a736248457763554a474f46563256584e7057486f694c434a745958526c636d6c6862464e6c64464e6c636d6c68624349364d5830253344266272616e63683d6d6173746572\">\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<img alt=\"Github Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/417a76f2b233a0ca81deb0c6f93b179e179d74a0/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f67726964736d61727465726369746965732f6177732d6c616d6264612d6465636f7261746f72732e7376673f7374796c653d666c6174\">\n<br>\n<br>\n<img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c76f073dd2d6791c17440c0fb54bb764dec0f698/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6177732d6c616d6264612d6465636f7261746f72732e7376673f7374796c653d666c6174\">\n<img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/721bdf6637a2522b223166096d37e5b9ee5d9b38/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6177732d6c616d6264612d6465636f7261746f72732e7376673f7374796c653d666c6174\">\n<img alt=\"PyPi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/152cbc08faadbe0d4b54822e5b85839db7b6f73f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6177732d6c616d6264612d6465636f7261746f72732e7376673f7374796c653d666c6174\">\n<img alt=\"Pypi Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73e59618d21e7c4f804748a85713067cd0b8dc4a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6177732d6c616d6264612d6465636f7261746f72732e7376673f7374796c653d666c6174266c6f676f3d70797069\"></p>\n<h1>aws-lambda-decorators</h1>\n<p>A set of Python decorators to ease the development of AWS lambda functions.</p>\n<h2>Installation</h2>\n<p>The easiest way to use these AWS Lambda Decorators is to install them through Pip:</p>\n<p><code>pip install aws-lambda-decorators</code></p>\n<h2>Logging</h2>\n<p>The Logging level of the decorators can be controlled by setting a LOG_LEVEL environment variable. In python:</p>\n<p><code>os.environ[\"LOG_LEVEL\"] = \"INFO\"</code></p>\n<p>The default value is \"INFO\"</p>\n<h2>Package Contents</h2>\n<h3><a href=\"https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/decorators.py\" rel=\"nofollow\">Decorators</a></h3>\n<p>The current list of AWS Lambda Python Decorators includes:</p>\n<ul>\n<li><a href=\"#extract\" rel=\"nofollow\"><strong>extract</strong></a>: a decorator to extract and validate specific keys of a dictionary parameter passed to a AWS Lambda function.</li>\n<li><a href=\"#extract_from_event\" rel=\"nofollow\"><strong>extract_from_event</strong></a>: a facade of <a href=\"#extract\" rel=\"nofollow\"><strong>extract</strong></a> to extract and validate keys from an AWS API Gateway lambda function <em>event</em> parameter.</li>\n<li><a href=\"#extract_from_context\" rel=\"nofollow\"><strong>extract_from_context</strong></a>: a facade of <a href=\"#extract\" rel=\"nofollow\"><strong>extract</strong></a> to extract and validate keys from an AWS API Gateway lambda function <em>context</em> parameter.</li>\n<li><a href=\"#extract_from_ssm\" rel=\"nofollow\"><strong>extract_from_ssm</strong></a>: a decorator to extract from AWS SSM the values of a set of parameter keys.</li>\n<li><a href=\"#validate\" rel=\"nofollow\"><strong>validate</strong></a>: a decorator to validate a list of function parameters.</li>\n<li><a href=\"#log\" rel=\"nofollow\"><strong>log</strong></a>: a decorator to log the parameters passed to the lambda function and/or the response of the lambda function.</li>\n<li><a href=\"#handle_exceptions\" rel=\"nofollow\"><strong>handle_exceptions</strong></a>: a decorator to handle any type of declared exception generated by the lambda function.</li>\n<li><a href=\"#response_body_as_json\" rel=\"nofollow\"><strong>response_body_as_json</strong></a>: a decorator to transform a response dictionary body to a json string.</li>\n<li><a href=\"#handle_all_exceptions\" rel=\"nofollow\"><strong>handle_all_exceptions</strong></a>: a decorator to handle all exceptions thrown by the lambda function.</li>\n<li><a href=\"#cors\" rel=\"nofollow\"><strong>cors</strong></a>: a decorator to add cors headers to a lambda function.</li>\n<li><a href=\"#push_ws_errors\" rel=\"nofollow\"><strong>push_ws_errors</strong></a>: a decorator to push unsuccessful responses back to the calling user via websockets with api gateway.</li>\n<li><a href=\"#push_ws_response\" rel=\"nofollow\"><strong>push_ws_responses</strong></a>: a decorator to push all responses back to the calling user via websockets with api gateway.</li>\n</ul>\n<h3><a href=\"https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/validators.py\" rel=\"nofollow\">Validators</a></h3>\n<p>Currently, the package offers 12 validators:</p>\n<ul>\n<li><strong>Mandatory</strong>: Checks if a parameter has a value.</li>\n<li><strong>RegexValidator</strong>: Checks a parameter against a regular expression.</li>\n<li><strong>SchemaValidator</strong>: Checks if an object adheres to the schema. Uses <a href=\"https://github.com/keleshev/schema\" rel=\"nofollow\">schema</a> library.</li>\n<li><strong>Minimum</strong>: Checks if an optional numerical value is greater than a minimum value.</li>\n<li><strong>Maximum</strong>: Checks if an optional numerical value is less than a maximum value.</li>\n<li><strong>MinLength</strong>: Checks if an optional string value is longer than a minimum length.</li>\n<li><strong>MaxLength</strong>: Checks if an optional string value is shorter than a maximum length.</li>\n<li><strong>Type</strong>: Checks if an optional object value is of a given python type.</li>\n<li><strong>EnumValidator</strong>: Checks if an optional object value is in a list of valid values.</li>\n<li><strong>NonEmpty</strong>: Checks if an optional object value is not an empty value.</li>\n<li><strong>DateValidator</strong>: Checks if a given string is a valid date according to a passed in date format.</li>\n<li><strong>CurrencyCodeValidator</strong>: Checks if a given string is a valid currency code (ISO 4217).</li>\n</ul>\n<h3><a href=\"https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/aws_lambda_decorators/decoders.py\" rel=\"nofollow\">Decoders</a></h3>\n<p>The package offers functions to decode from JSON and JWT.</p>\n<ul>\n<li><strong>decode_json</strong>: decodes/converts a json string to a python dictionary</li>\n<li><strong>decode_jwt</strong>: decodes/converts a JWT string to a python dictionary</li>\n</ul>\n<h2>Examples</h2>\n<p>You can see some basic examples in the <a href=\"https://github.com/gridsmartercities/aws-lambda-decorators/blob/master/examples/examples.py\" rel=\"nofollow\">examples</a> folder.</p>\n<h3>extract</h3>\n<p>This decorator extracts and validates values from dictionary parameters passed to a Lambda Function.</p>\n<ul>\n<li>The decorator takes a list of <strong>Parameter</strong> objects.</li>\n<li>Each <strong>Parameter</strong> object requires a non-empty path to the parameter in the dictionary, and the name of the dictionary (func_param_name)</li>\n<li>The parameter value is extracted and added as a kwarg to the lambda handler (or any other decorated function/method).</li>\n<li>You can add the parameter to the handler signature, or access it in the handler through kwargs.</li>\n<li>The name of the extracted parameter is defaulted to the last element of the path name, but can be changed by passing a (valid pythonic variable name) var_name</li>\n<li>You can define a default value for the parameter in the <strong>Parameter</strong> or in the lambda handler itself.</li>\n<li>A 400 exception is raised when the parameter cannot be extracted or when it does not validate.</li>\n<li>A variable path (e.g. '/headers/Authorization[jwt]/sub') can be annotated to specify a decoding. In the example, Authorization might contain a JWT, which needs to be decoded before accessing the \"sub\" element.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">),</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/missing_non_mandatory'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'I am missing'</span><span class=\"p\">),</span>  <span class=\"c1\"># extracts a non mandatory missing_non_mandatory from a_dictionary</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/missing_mandatory'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">),</span>  <span class=\"c1\"># does not fail as the parameter is not validated as mandatory</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/child/id'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">],</span> <span class=\"n\">var_name</span><span class=\"o\">=</span><span class=\"s1\">'user_id'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'another_dictionary'</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a mandatory id as \"user_id\" from another_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">another_dictionary</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"s1\">'aDefaultValue'</span><span class=\"p\">,</span> <span class=\"n\">missing_non_mandatory</span><span class=\"o\">=</span><span class=\"s1\">'I am missing'</span><span class=\"p\">,</span> <span class=\"n\">missing_mandatory</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Given these two dictionaries:</span>\n\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'parent': { </span>\n<span class=\"sd\">                'my_param': 'Hello!' </span>\n<span class=\"sd\">            }, </span>\n<span class=\"sd\">            'other': 'other value' </span>\n<span class=\"sd\">        }</span>\n\n<span class=\"sd\">        another_dictionary = { </span>\n<span class=\"sd\">            'parent': { </span>\n<span class=\"sd\">                'child': { </span>\n<span class=\"sd\">                    'id': '123' </span>\n<span class=\"sd\">                } </span>\n<span class=\"sd\">            } </span>\n<span class=\"sd\">        }</span>\n\n<span class=\"sd\">        you can now access the extracted parameters directly: </span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_param</span><span class=\"p\">,</span> <span class=\"n\">missing_non_mandatory</span><span class=\"p\">,</span> <span class=\"n\">missing_mandatory</span><span class=\"p\">,</span> <span class=\"n\">user_id</span>\n</pre>\n<p>Or you can use kwargs instead of specific parameter names:</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_to_kwargs_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'parent': { </span>\n<span class=\"sd\">                'my_param': 'Hello!' </span>\n<span class=\"sd\">            }, </span>\n<span class=\"sd\">            'other': 'other value' </span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'my_param'</span><span class=\"p\">]</span>  <span class=\"c1\"># returns 'Hello!'</span>\n</pre>\n<p>A missing mandatory parameter, or a parameter that fails validation, will raise an exception:</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/mandatory_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">])</span>  <span class=\"c1\"># extracts a mandatory mandatory_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_mandatory_param_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">mandatory_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Here!'</span>  <span class=\"c1\"># this part will never be reached, if the mandatory_param is missing</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">extract_mandatory_param_example</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'my_param'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">},</span> <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'other value'</span><span class=\"p\">}</span> <span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>  <span class=\"c1\"># prints { 'statusCode': 400, 'body': '{\"message\": [{\"mandatory_param\": [\"Missing mandatory value\"]}]}' } and logs a more detailed error</span>\n</pre>\n<p>You can add custom error messages to all validators, and incorporate to those error messages the validated value and the validation condition:</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/an_int'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Minimum</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s1\">'Bad value </span><span class=\"si\">{value}</span><span class=\"s1\">: should be at least </span><span class=\"si\">{condition}</span><span class=\"s1\">'</span><span class=\"p\">)])</span>  <span class=\"c1\"># extracts a mandatory mandatory_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_minimum_param_with_custom_error_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">mandatory_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Here!'</span>  <span class=\"c1\"># this part will never be reached, if the an_int param is less than 100</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">extract_minimum_param_with_custom_error_example</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'an_int'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>  <span class=\"c1\"># prints { 'statusCode': 400, 'body': '{\"message\": [{\"an_int\": [\"Bad value 10: should be at least 100\"]}]}' } and logs a more detailed error</span>\n</pre>\n<p>You can group the validation errors together (instead of exiting on first error).</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/mandatory_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">]),</span>  <span class=\"c1\"># extracts two mandatory parameters from a_dictionary</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/another_mandatory_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">]),</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/an_int'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Maximum</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">Minimum</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"p\">],</span> <span class=\"n\">group_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># groups both errors together</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_multiple_param_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">mandatory_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">another_mandatory_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">an_int</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Here!'</span>  <span class=\"c1\"># this part will never be reached, if the mandatory_param is missing</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">extract_multiple_param_example</span><span class=\"p\">({</span><span class=\"s1\">'parent'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'my_param'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello!'</span><span class=\"p\">,</span> <span class=\"s1\">'an_int'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'other value'</span><span class=\"p\">})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>  <span class=\"c1\"># prints {'statusCode': 400, 'body': '{\"message\": [{\"mandatory_param\": [\"Missing mandatory value\"]}, {\"another_mandatory_param\": [\"Missing mandatory value\"]}, {\"an_int\": [\"\\'20\\' is greater than maximum value \\'10\\'\"]}]}'}</span>\n</pre>\n<p>You can decode any part of the parameter path from json or any other existing annotation.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent[json]/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_from_json_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'parent': '{\"my_param\": \"Hello!\" }', </span>\n<span class=\"sd\">            'other': 'other value' </span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_param</span>  <span class=\"c1\"># returns 'Hello!'</span>\n</pre>\n<p>You can also use an integer annotation to access an specific list element by index.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent[1]/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_from_list_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'parent': [</span>\n<span class=\"sd\">                {'my_param': 'Hello!'},</span>\n<span class=\"sd\">                {'my_param': 'Bye!'}</span>\n<span class=\"sd\">            ]</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_param</span>  <span class=\"c1\"># returns 'Bye!'</span>\n</pre>\n<p>You can extract all parameters into a dictionary</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/params/my_param_1'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">),</span>  <span class=\"c1\"># extracts a non mandatory my_param_1 from a_dictionary</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/params/my_param_2'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param_2 from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_dictionary_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'params': {</span>\n<span class=\"sd\">                'my_param_1': 'Hello!',</span>\n<span class=\"sd\">                'my_param_2': 'Bye!'</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwargs</span>  <span class=\"c1\"># returns {'my_param_1': 'Hello!', 'my_param_2': 'Bye!'}</span>\n</pre>\n<p>You can apply a transformation to an extracted value. The transformation will happen before validation.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/params/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_with_transform_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        a_dictionary = { </span>\n<span class=\"sd\">            'params': {</span>\n<span class=\"sd\">                'my_param': '2'  # the original value is the string '2'</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_param</span>  <span class=\"c1\"># returns the int value 2</span>\n</pre>\n<p>The transform function can be any function, with its own error handling.</p>\n<p>Example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">to_int</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"My custom error message\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@extract</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/params/my_param'</span><span class=\"p\">,</span> <span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_dictionary'</span><span class=\"p\">,</span> <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">to_int</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts a non mandatory my_param from a_dictionary</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_with_custom_transform_example</span><span class=\"p\">(</span><span class=\"n\">a_dictionary</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">extract_with_custom_transform_example</span><span class=\"p\">({</span><span class=\"s1\">'params'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'my_param'</span><span class=\"p\">:</span> <span class=\"s1\">'abc'</span><span class=\"p\">}})</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>  <span class=\"c1\"># prints {'statusCode': 400, 'body': '{\"message\": \"Error extracting parameters\"}'}, and the logs will contain the \"My custom error message\" message.</span>\n</pre>\n<h3>extract_from_event</h3>\n<p>This decorator is just a facade to the <a href=\"#extract\" rel=\"nofollow\">extract</a> method to be used in AWS Api Gateway Lambdas. It automatically extracts from the event lambda parameter.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract_from_event</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/body[json]/my_param'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">]),</span>  <span class=\"c1\"># extracts a mandatory my_param from the json body of the event</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/headers/Authorization[jwt]/sub'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">],</span> <span class=\"n\">var_name</span><span class=\"o\">=</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>  <span class=\"c1\"># extract the mandatory sub value as user_id from the authorization JWT</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_from_event_example</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        event = { </span>\n<span class=\"sd\">            'body': '{\"my_param\": \"Hello!\"}', </span>\n<span class=\"sd\">            'headers': { </span>\n<span class=\"sd\">                'Authorization': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c' </span>\n<span class=\"sd\">            } </span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">my_param</span><span class=\"p\">,</span> <span class=\"n\">user_id</span>  <span class=\"c1\"># returns ('Hello!', '1234567890')</span>\n</pre>\n<h3>extract_from_context</h3>\n<p>This decorator is just a facade to the <a href=\"#extract\" rel=\"nofollow\">extract</a> method to be used in AWS Api Gateway Lambdas. It automatically extracts from the context lambda parameter.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract_from_context</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">Parameter</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/parent/my_param'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">])</span>  <span class=\"c1\"># extracts a mandatory my_param from the parent element in context</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_from_context_example</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">my_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        context = {</span>\n<span class=\"sd\">            'parent': {</span>\n<span class=\"sd\">                'my_param': 'Hello!'</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    \"\"\"</span>    \n    <span class=\"k\">return</span> <span class=\"n\">my_param</span>  <span class=\"c1\"># returns 'Hello!'</span>\n</pre>\n<h3>extract_from_ssm</h3>\n<p>This decorator extracts a parameter from AWS SSM and passes the parameter down to your function as a kwarg.</p>\n<ul>\n<li>The decorator takes a list of <strong>SSMParameter</strong> objects.</li>\n<li>Each <strong>SSMParameter</strong> object requires the name of the SSM parameter (ssm_name)</li>\n<li>If no var_name is passed in, the extracted value is passed to the function with the ssm_name name</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@extract_from_ssm</span><span class=\"p\">(</span><span class=\"n\">ssm_parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">SSMParameter</span><span class=\"p\">(</span><span class=\"n\">ssm_name</span><span class=\"o\">=</span><span class=\"s1\">'one_key'</span><span class=\"p\">),</span>  <span class=\"c1\"># extracts the value of one_key from SSM as a kwarg named \"one_key\"</span>\n    <span class=\"n\">SSMParameter</span><span class=\"p\">(</span><span class=\"n\">ssm_name</span><span class=\"o\">=</span><span class=\"s1\">'another_key'</span><span class=\"p\">,</span> <span class=\"n\">var_name</span><span class=\"o\">=</span><span class=\"s2\">\"another\"</span><span class=\"p\">)</span>  <span class=\"c1\"># extracts another_key as a kwarg named \"another\"</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">extract_from_ssm_example</span><span class=\"p\">(</span><span class=\"n\">your_func_params</span><span class=\"p\">,</span> <span class=\"n\">one_key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">another</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">your_func_params</span><span class=\"p\">,</span> <span class=\"n\">one_key</span><span class=\"p\">,</span> <span class=\"n\">another</span>\n</pre>\n<h3>validate</h3>\n<p>This decorator validates a list of non dictionary parameters from your lambda function.</p>\n<ul>\n<li>The decorator takes a list of <strong>ValidatedParameter</strong> objects.</li>\n<li>Each parameter object needs the name of the lambda function parameter that it is going to be validated, and the list of rules to validate.</li>\n<li>A 400 exception is raised when the parameter does not validate.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@validate</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">ValidatedParameter</span><span class=\"p\">(</span><span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'a_param'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">]),</span>  <span class=\"c1\"># validates a_param as mandatory</span>\n    <span class=\"n\">ValidatedParameter</span><span class=\"p\">(</span><span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'another_param'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mandatory</span><span class=\"p\">,</span> <span class=\"n\">RegexValidator</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d+'</span><span class=\"p\">)])</span>  <span class=\"c1\"># validates another_param as mandatory and containing only digits</span>\n    <span class=\"n\">ValidatedParameter</span><span class=\"p\">(</span><span class=\"n\">func_param_name</span><span class=\"o\">=</span><span class=\"s1\">'param_with_schema'</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">SchemaValidator</span><span class=\"p\">(</span><span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"n\">Or</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)}))])</span>  <span class=\"c1\"># validates param_with_schema as an object with specified schema</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_example</span><span class=\"p\">(</span><span class=\"n\">a_param</span><span class=\"p\">,</span> <span class=\"n\">another_param</span><span class=\"p\">,</span> <span class=\"n\">param_with_schema</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a_param</span><span class=\"p\">,</span> <span class=\"n\">another_param</span><span class=\"p\">,</span> <span class=\"n\">param_with_schema</span>  <span class=\"c1\"># returns 'Hello!', '123456', {'a': {'b': 'c'}}</span>\n\n<span class=\"n\">validate_example</span><span class=\"p\">(</span><span class=\"s1\">'Hello!'</span><span class=\"p\">,</span> <span class=\"s1\">'123456'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}})</span>\n</pre>\n<p>Given the same function <code>validate_example</code>, a 400 exception is returned if at least one parameter does not validate (as per the <a href=\"#extract\" rel=\"nofollow\">extract</a> decorator, you can group errors with the group_errors flag):</p>\n<pre><span class=\"n\">validate_example</span><span class=\"p\">(</span><span class=\"s1\">'Hello!'</span><span class=\"p\">,</span> <span class=\"s1\">'ABCD'</span><span class=\"p\">)</span>  <span class=\"c1\"># returns a 400 status code and an error message</span>\n</pre>\n<h3>log</h3>\n<p>This decorator allows for logging the function arguments and/or the response.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@log</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">log_example</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">):</span> \n    <span class=\"k\">return</span> <span class=\"s1\">'Done!'</span>\n\n<span class=\"n\">log_example</span><span class=\"p\">(</span><span class=\"s1\">'Hello!'</span><span class=\"p\">)</span>  <span class=\"c1\"># logs 'Hello!' and 'Done!'</span>\n</pre>\n<h3>handle_exceptions</h3>\n<p>This decorator handles a list of exceptions, returning a 400 response containing the specified friendly message to the caller.</p>\n<ul>\n<li>The decorator takes a list of <strong>ExceptionHandler</strong> objects.</li>\n<li>Each <strong>ExceptionHandler</strong> requires the type of exception to check, and an optional friendly message to return to the caller.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@handle_exceptions</span><span class=\"p\">(</span><span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">ExceptionHandler</span><span class=\"p\">(</span><span class=\"n\">ClientError</span><span class=\"p\">,</span> <span class=\"s2\">\"Your message when a client error happens.\"</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_exceptions_example</span><span class=\"p\">():</span>\n    <span class=\"n\">dynamodb</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'dynamodb'</span><span class=\"p\">)</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">dynamodb</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'non_existing_table'</span><span class=\"p\">)</span>\n    <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">KeyConditionExpression</span><span class=\"o\">=</span><span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">))</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"n\">handle_exceptions_example</span><span class=\"p\">()</span>  <span class=\"c1\"># returns {'body': '{\"message\": \"Your message when a client error happens.\"}', 'statusCode': 400}</span>\n</pre>\n<h3>handle_all_exceptions</h3>\n<p>This decorator handles all exceptions thrown by a lambda, returning a 400 response and the exception's message.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@handle_all_exceptions</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">handle_exceptions_example</span><span class=\"p\">():</span>\n    <span class=\"n\">test_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"n\">invalid_value</span> <span class=\"o\">=</span> <span class=\"n\">test_list</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"c1\"># ...    </span>\n\n<span class=\"n\">handle_all_exceptions_example</span><span class=\"p\">()</span>  <span class=\"c1\"># returns {'body': '{\"message\": \"list index out of range\"}, 'statusCode': 400}</span>\n</pre>\n<h3>response_body_as_json</h3>\n<p>This decorator ensures that, if the response contains a body, the body is dumped as json.</p>\n<ul>\n<li>Returns a 500 error if the response body cannot be dumped as json.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@response_body_as_json</span>\n<span class=\"k\">def</span> <span class=\"nf\">response_body_as_json_example</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'param'</span><span class=\"p\">:</span> <span class=\"s1\">'hello!'</span><span class=\"p\">}}</span>\n\n<span class=\"n\">response_body_as_json_example</span><span class=\"p\">()</span>  <span class=\"c1\"># returns { 'statusCode': 400, 'body': \"{'param': 'hello!'}\" }</span>\n</pre>\n<h3>cors</h3>\n<p>This decorator adds your defined CORS headers to the decorated function response.</p>\n<ul>\n<li>Returns a 500 error if one or more of the CORS headers have an invalid type</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"nd\">@cors</span><span class=\"p\">(</span><span class=\"n\">allow_origin</span><span class=\"o\">=</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"n\">allow_methods</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">86400</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cors_example</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">}</span>\n\n<span class=\"n\">cors_example</span><span class=\"p\">()</span>  <span class=\"c1\"># returns {'statusCode': 200, 'headers': {'access-control-allow-origin': '*', 'access-control-allow-methods': 'POST', 'access-control-allow-headers': 'Content-Type', 'access-control-max-age': 86400}}</span>\n</pre>\n<h3>push_ws_errors</h3>\n<p>This decorator pushes unsuccessful responses back to the calling client over websockets built on api gateway</p>\n<p>This decorator requires the client is connected to the websocket api gateway instance, and will therefore have a connection id</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@push_ws_errors</span><span class=\"p\">(</span><span class=\"s1\">'https://api_id.execute_id.region.amazonaws.com/Prod'</span><span class=\"p\">)</span>\n<span class=\"nd\">@handle_all_exceptions</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"s1\">'Bad request'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c1\"># will push {'type': 'error', 'statusCode': 400, 'message': 'Bad request'} back to the client via websockets</span>\n</pre>\n<h3>push_ws_response</h3>\n<p>This decorator pushes all responses back to the calling client over websockets built on api gateway</p>\n<p>This decorator requires the client is connected to the websocket api gateway instance, and will therefore have a connection id</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@push_ws_response</span><span class=\"p\">(</span><span class=\"s1\">'https://api_id.execute_id.region.amazonaws.com/Prod'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello, world!'</span>\n    <span class=\"p\">}</span>\n\n<span class=\"c1\"># will push {'statusCode': 200, 'body': 'Hello, world!'} back to the client via websockets</span>\n</pre>\n<h2>Writing your own validators</h2>\n<p>You can create your own validators by inheriting from the Validator class.</p>\n<p>Fix length validator example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FixLength</span><span class=\"p\">(</span><span class=\"n\">Validator</span><span class=\"p\">):</span>\n    <span class=\"n\">ERROR_MESSAGE</span> <span class=\"o\">=</span> <span class=\"s2\">\"'</span><span class=\"si\">{value}</span><span class=\"s2\">' length should be '</span><span class=\"si\">{condition}</span><span class=\"s2\">'\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fix_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">error_message</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">error_message</span><span class=\"o\">=</span><span class=\"n\">error_message</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">fix_length</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_condition</span>\n</pre>\n<h2>Documentation</h2>\n<p>You can get the docstring help by running:</p>\n<pre>&gt;&gt;&gt; from aws_lambda_decorators.decorators import extract\n&gt;&gt;&gt; help<span class=\"o\">(</span>extract<span class=\"o\">)</span>\n</pre>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://pypi.org/project/aws-lambda-decorators/\" rel=\"nofollow\">PyPi</a></li>\n<li><a href=\"https://test.pypi.org/project/aws-lambda-decorators/\" rel=\"nofollow\">Test PyPi</a></li>\n<li><a href=\"https://github.com/gridsmartercities/aws-lambda-decorators\" rel=\"nofollow\">Github</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6827570, "releases": {"0.12": [{"comment_text": "", "digests": {"md5": "e840d7a1db63a8987bd19318f691c3af", "sha256": "50b62faf2f979c76f2cbdceb146f7077975eb20949b7b57767efcb6bec8d5739"}, "downloads": -1, "filename": "aws_lambda_decorators-0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "e840d7a1db63a8987bd19318f691c3af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12850, "upload_time": "2019-02-11T09:26:00", "upload_time_iso_8601": "2019-02-11T09:26:00.758366Z", "url": "https://files.pythonhosted.org/packages/5e/fc/bb630b37bec793bcdde9a7f62d67c41c33b1f5ba7fab0703ff53e4b3ab3d/aws_lambda_decorators-0.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "849c935283ac057d7a3320201a552d4b", "sha256": "92d464803d04cc108b1750a91ce5fedae3d1a29c506e1871988b2bed76744be3"}, "downloads": -1, "filename": "aws-lambda-decorators-0.12.tar.gz", "has_sig": false, "md5_digest": "849c935283ac057d7a3320201a552d4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14606, "upload_time": "2019-02-11T09:26:03", "upload_time_iso_8601": "2019-02-11T09:26:03.609971Z", "url": "https://files.pythonhosted.org/packages/83/9e/a50d6698a7de6ccfd0a5fb84f233feeebcbbc17653876264e3ea1707ce68/aws-lambda-decorators-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "66739dae3b2b974458ef6de320a19270", "sha256": "456c9c5a6b1f2bb2b6d637bff3b3a3690dddee7a8ebe99572ccac4f1bb93efe8"}, "downloads": -1, "filename": "aws_lambda_decorators-0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "66739dae3b2b974458ef6de320a19270", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12833, "upload_time": "2019-02-11T09:48:50", "upload_time_iso_8601": "2019-02-11T09:48:50.106705Z", "url": "https://files.pythonhosted.org/packages/ef/9c/176d01f222ff4f24ea438b7eb1105ea1c9713ffe02255bb379a25d99c851/aws_lambda_decorators-0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c1d80268a6f9eb6ec3c181fd4dd9f4c", "sha256": "92eac78ca55b0edb8e5a007029222ff992f7c27d8153ba65a319d2db97cc38d0"}, "downloads": -1, "filename": "aws-lambda-decorators-0.13.tar.gz", "has_sig": false, "md5_digest": "1c1d80268a6f9eb6ec3c181fd4dd9f4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14579, "upload_time": "2019-02-11T09:48:52", "upload_time_iso_8601": "2019-02-11T09:48:52.254485Z", "url": "https://files.pythonhosted.org/packages/73/e3/986b65544698111afc92cfa4723350fa9300c1d3f2a8f6411fe18168148b/aws-lambda-decorators-0.13.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "50b16cb8bc7f35552ec2a1e6ce277bbe", "sha256": "4e45c31c297a9800756e664425c34a29f9e90f70aaef82bc87170638a7f1f714"}, "downloads": -1, "filename": "aws_lambda_decorators-0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "50b16cb8bc7f35552ec2a1e6ce277bbe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12004, "upload_time": "2019-02-18T09:53:40", "upload_time_iso_8601": "2019-02-18T09:53:40.982777Z", "url": "https://files.pythonhosted.org/packages/a4/10/15a0b4259bb5cabd383c720de6af90777c085ab0070f7fcf7d2567ee95df/aws_lambda_decorators-0.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b64e4655552a0cf770f8adea7f61d53", "sha256": "837ec0d4cdadb673ef4e540a8729524ec02a0e8061de4421c7df5fc20a84eda4"}, "downloads": -1, "filename": "aws-lambda-decorators-0.14.tar.gz", "has_sig": false, "md5_digest": "8b64e4655552a0cf770f8adea7f61d53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14744, "upload_time": "2019-02-18T09:53:42", "upload_time_iso_8601": "2019-02-18T09:53:42.671295Z", "url": "https://files.pythonhosted.org/packages/a4/1a/f69b81f34878ba00bfc9222c5d12f3b05fa6fa7aca1e317c5934b3c57fce/aws-lambda-decorators-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "e5746364a5453875abf4cd1796506e29", "sha256": "822130286f4989b18d8431427b9dac50b63aad015d5cccf50d43cc5a532d482d"}, "downloads": -1, "filename": "aws_lambda_decorators-0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "e5746364a5453875abf4cd1796506e29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13002, "upload_time": "2019-03-01T15:27:53", "upload_time_iso_8601": "2019-03-01T15:27:53.960530Z", "url": "https://files.pythonhosted.org/packages/a3/7b/73d64ae0c59f40f8f54c55357ec6dd00e8c79411fd665b5c029f921f7ef8/aws_lambda_decorators-0.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cba73893c91d03d93e2dea6f2d0d2e1f", "sha256": "71e497a9130bed90c536a3850930573822c132471c11fa783b41a7a22a1c6c89"}, "downloads": -1, "filename": "aws-lambda-decorators-0.15.tar.gz", "has_sig": false, "md5_digest": "cba73893c91d03d93e2dea6f2d0d2e1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14905, "upload_time": "2019-03-01T15:27:55", "upload_time_iso_8601": "2019-03-01T15:27:55.387581Z", "url": "https://files.pythonhosted.org/packages/58/1f/fe95a252373394350abf0a27a239abfc8547ee519813f7cf1d6ea8ee61ae/aws-lambda-decorators-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "eeac493a64251b1b19fd5a9dc218089d", "sha256": "3a926aea2f5dd30235fdc5a4e1d21d5ceb3518b64d64f32330beb72cfb63b01e"}, "downloads": -1, "filename": "aws_lambda_decorators-0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "eeac493a64251b1b19fd5a9dc218089d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12999, "upload_time": "2019-03-04T10:53:56", "upload_time_iso_8601": "2019-03-04T10:53:56.717136Z", "url": "https://files.pythonhosted.org/packages/f8/f9/58ff670e4081f72fac13f61bcd5d67b3f77f7b0ac6570c1e4ef6cc1e8eb7/aws_lambda_decorators-0.16-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "900e779e1185f6dcd8c98cf283a7edd8", "sha256": "8f56a440067cba518e8c3f5c2b61db87918f59d5dd6e69c9cd3883472d448696"}, "downloads": -1, "filename": "aws-lambda-decorators-0.16.tar.gz", "has_sig": false, "md5_digest": "900e779e1185f6dcd8c98cf283a7edd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14905, "upload_time": "2019-03-04T10:53:58", "upload_time_iso_8601": "2019-03-04T10:53:58.941374Z", "url": "https://files.pythonhosted.org/packages/17/18/f43289bd3f190040d32dc9142169847ceac8972a8bdd22bf8c653a39dd20/aws-lambda-decorators-0.16.tar.gz", "yanked": false}], "0.17": [{"comment_text": "", "digests": {"md5": "ed388a0ce6b5d8ebc3162536975816f8", "sha256": "1cf688c6ae293781d4283a64161723c181f5e9238478b0df2060bf7be43eff4a"}, "downloads": -1, "filename": "aws_lambda_decorators-0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "ed388a0ce6b5d8ebc3162536975816f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12971, "upload_time": "2019-03-07T13:11:07", "upload_time_iso_8601": "2019-03-07T13:11:07.662606Z", "url": "https://files.pythonhosted.org/packages/d4/33/77311dd00b26510c73c730bd17d15533b17077f234c3b42723ed70223f68/aws_lambda_decorators-0.17-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c6d7d9da99f9d6c0368322561d549ee", "sha256": "f76a0790575ed59baf9f8787470bb8766be5cd473b3ae3056645df5e907865ce"}, "downloads": -1, "filename": "aws-lambda-decorators-0.17.tar.gz", "has_sig": false, "md5_digest": "5c6d7d9da99f9d6c0368322561d549ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14824, "upload_time": "2019-03-07T13:11:08", "upload_time_iso_8601": "2019-03-07T13:11:08.988398Z", "url": "https://files.pythonhosted.org/packages/65/03/f4a59c7ee1ffde9a52be08ad256e066c255e488fdaf0c33f66d2eca5f54d/aws-lambda-decorators-0.17.tar.gz", "yanked": false}], "0.18": [{"comment_text": "", "digests": {"md5": "028454ae1fe0bc460dfb1763aa06bce5", "sha256": "43d59bce3cbe0d60ca6506a0c936ab6aed5f92cd4a9b1238f475e35e71ce87a0"}, "downloads": -1, "filename": "aws_lambda_decorators-0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "028454ae1fe0bc460dfb1763aa06bce5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12153, "upload_time": "2019-03-15T15:10:31", "upload_time_iso_8601": "2019-03-15T15:10:31.638420Z", "url": "https://files.pythonhosted.org/packages/00/e6/b35cb5e4b35e69ddc47d91bd41c5d6e383cd1baecbb91383ea563816e0cc/aws_lambda_decorators-0.18-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00f6c743356b7cd2bfc1b15c33fe49f", "sha256": "bf454f1b4c370a1a930c54f664931aa2ed1d814391820acb262127f66867005b"}, "downloads": -1, "filename": "aws-lambda-decorators-0.18.tar.gz", "has_sig": false, "md5_digest": "a00f6c743356b7cd2bfc1b15c33fe49f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14900, "upload_time": "2019-03-15T15:10:33", "upload_time_iso_8601": "2019-03-15T15:10:33.020862Z", "url": "https://files.pythonhosted.org/packages/d8/14/3dcba35a5b48c83950bb129ea9abace34ca91b7dd73f6b536ccafba5cc85/aws-lambda-decorators-0.18.tar.gz", "yanked": false}], "0.19": [{"comment_text": "", "digests": {"md5": "b925263d99465d199176240a4886a5d2", "sha256": "84bb8e55799cffbf09cb7128e37d5b4a3bcce96b449f5a2a71818862deec86a3"}, "downloads": -1, "filename": "aws_lambda_decorators-0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "b925263d99465d199176240a4886a5d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12993, "upload_time": "2019-04-15T09:51:09", "upload_time_iso_8601": "2019-04-15T09:51:09.323262Z", "url": "https://files.pythonhosted.org/packages/b7/e0/a443046ee738f7b624af89089539488e20263d509de74df516c362d95ae3/aws_lambda_decorators-0.19-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c76fbc268004287fc698b62d4c2fe37", "sha256": "7a8617408bffd6b342c20d85ebc377406cc29a4a2c75849059a5f723616ee848"}, "downloads": -1, "filename": "aws-lambda-decorators-0.19.tar.gz", "has_sig": false, "md5_digest": "1c76fbc268004287fc698b62d4c2fe37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14881, "upload_time": "2019-04-15T09:51:11", "upload_time_iso_8601": "2019-04-15T09:51:11.239661Z", "url": "https://files.pythonhosted.org/packages/b8/d9/aac7ec8647211c3e1cc4b3bb8eb08a35a309871d97a3e37626983bbf7506/aws-lambda-decorators-0.19.tar.gz", "yanked": false}], "0.20": [{"comment_text": "", "digests": {"md5": "0f713cf1f26c20edb978be60bcb8b214", "sha256": "f334f27905b93e6f639aac7456e68adae0b9d894ff09a158ec31387b613dbd5c"}, "downloads": -1, "filename": "aws_lambda_decorators-0.20-py3-none-any.whl", "has_sig": false, "md5_digest": "0f713cf1f26c20edb978be60bcb8b214", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13019, "upload_time": "2019-04-16T13:50:41", "upload_time_iso_8601": "2019-04-16T13:50:41.762778Z", "url": "https://files.pythonhosted.org/packages/d4/b1/9c99f51eab47dd6dfc3ea6d7f45401f0bb3ce4e4ffd50d6c09ea27d0974a/aws_lambda_decorators-0.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7f7aee82ab16d434768febdf5b043d6", "sha256": "19ea2d2cebe829cb73b065a02e10e67e91965f5de516ace6db680ae1873d2354"}, "downloads": -1, "filename": "aws-lambda-decorators-0.20.tar.gz", "has_sig": false, "md5_digest": "d7f7aee82ab16d434768febdf5b043d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14914, "upload_time": "2019-04-16T13:50:43", "upload_time_iso_8601": "2019-04-16T13:50:43.524605Z", "url": "https://files.pythonhosted.org/packages/58/eb/1941f8a8cd2ae155f1b1f454a03d783584942e0a310a6fb9509b95ec05f1/aws-lambda-decorators-0.20.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "4f5db3688b26aec1b1eba4aa74d8b515", "sha256": "eb2eaaec1354dbee9ec4df29862d83f74df4623f4fd88c0d355aebed5809f084"}, "downloads": -1, "filename": "aws_lambda_decorators-0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "4f5db3688b26aec1b1eba4aa74d8b515", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13020, "upload_time": "2019-04-24T07:12:34", "upload_time_iso_8601": "2019-04-24T07:12:34.576006Z", "url": "https://files.pythonhosted.org/packages/3c/08/8e1704673ee57427ffa91f9567250edeb98f9be8a8beee4513b2c3ae9928/aws_lambda_decorators-0.21-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e741cac01b19de4eacc4706b4f167ce6", "sha256": "4bbc96926fc12b25a32b73a51189672b7b17c3e217595d1fbd78e0f067683495"}, "downloads": -1, "filename": "aws-lambda-decorators-0.21.tar.gz", "has_sig": false, "md5_digest": "e741cac01b19de4eacc4706b4f167ce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14951, "upload_time": "2019-04-24T07:12:36", "upload_time_iso_8601": "2019-04-24T07:12:36.518608Z", "url": "https://files.pythonhosted.org/packages/b7/8b/c80bb2d43691c94e9acbda721a701fb14fa2d64807100b3001d0cbffcc09/aws-lambda-decorators-0.21.tar.gz", "yanked": false}], "0.22": [{"comment_text": "", "digests": {"md5": "64ae3a5431eaa0f93008fe52c2d3e678", "sha256": "1d765c7c50ce47043741bbd3d812e76d49f992a8b2fe9655bf82f07ca1e0460b"}, "downloads": -1, "filename": "aws_lambda_decorators-0.22-py3-none-any.whl", "has_sig": false, "md5_digest": "64ae3a5431eaa0f93008fe52c2d3e678", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13043, "upload_time": "2019-04-30T13:40:23", "upload_time_iso_8601": "2019-04-30T13:40:23.839084Z", "url": "https://files.pythonhosted.org/packages/22/0a/eb2840c7fffbb80230da8340861608bcdbc65e699f132a0ca58d97df9fb3/aws_lambda_decorators-0.22-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d86105f0ffc70be4405317776c069e37", "sha256": "9a13bb6b84a5f0c57bfe57a75786c58705e9f472ffa46cc000623c1291803405"}, "downloads": -1, "filename": "aws-lambda-decorators-0.22.tar.gz", "has_sig": false, "md5_digest": "d86105f0ffc70be4405317776c069e37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14958, "upload_time": "2019-04-30T13:40:29", "upload_time_iso_8601": "2019-04-30T13:40:29.266780Z", "url": "https://files.pythonhosted.org/packages/5d/9c/c3f5f4647a7b1b57baa140393ddfcf8ea712dc8647a8b9efb8fa9f294ace/aws-lambda-decorators-0.22.tar.gz", "yanked": false}], "0.23": [{"comment_text": "", "digests": {"md5": "a58df0ca7c2963d8c018437fc7235dd8", "sha256": "589006d98733b2add65f5ffac0da4579a131f2ab77a245b68cc8e043ffae8f09"}, "downloads": -1, "filename": "aws_lambda_decorators-0.23-py3-none-any.whl", "has_sig": false, "md5_digest": "a58df0ca7c2963d8c018437fc7235dd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13227, "upload_time": "2019-05-14T14:01:09", "upload_time_iso_8601": "2019-05-14T14:01:09.655134Z", "url": "https://files.pythonhosted.org/packages/d8/4d/76049c10f4a60331013d581edf7254bfc7a0d7a4927fed2a1d5656f1502d/aws_lambda_decorators-0.23-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d55fee5ed671760d92800580a3d65a5", "sha256": "0809e3dbda01201edce15d113015812f3bb2120964fb9416cb0e84ba44d1ec74"}, "downloads": -1, "filename": "aws-lambda-decorators-0.23.tar.gz", "has_sig": false, "md5_digest": "2d55fee5ed671760d92800580a3d65a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15379, "upload_time": "2019-05-14T14:01:15", "upload_time_iso_8601": "2019-05-14T14:01:15.251180Z", "url": "https://files.pythonhosted.org/packages/86/f3/cd2dfbc2554a5640dd4411c1e613314d521d6b4ee645b29f1b5e805a88fa/aws-lambda-decorators-0.23.tar.gz", "yanked": false}], "0.24": [{"comment_text": "", "digests": {"md5": "7ec66f7532a8bf836df0a98c614e4281", "sha256": "756ebe2746e17def72e312141e8b09f6793f5876c69a06740fb7915fe12b32fa"}, "downloads": -1, "filename": "aws_lambda_decorators-0.24-py3-none-any.whl", "has_sig": false, "md5_digest": "7ec66f7532a8bf836df0a98c614e4281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14264, "upload_time": "2019-05-23T13:12:23", "upload_time_iso_8601": "2019-05-23T13:12:23.696522Z", "url": "https://files.pythonhosted.org/packages/7e/00/0128492a2f55c015cd68ea1aa0270509ca982b6cde240884c08506173bfc/aws_lambda_decorators-0.24-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f45c89e24743f69762ae7637916dddad", "sha256": "9ef84a779ba6de145b19e235ce146125177241fff0d837f8607db9cd09ec6b1d"}, "downloads": -1, "filename": "aws-lambda-decorators-0.24.tar.gz", "has_sig": false, "md5_digest": "f45c89e24743f69762ae7637916dddad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16569, "upload_time": "2019-05-23T13:12:29", "upload_time_iso_8601": "2019-05-23T13:12:29.439479Z", "url": "https://files.pythonhosted.org/packages/20/dc/3307836651404c26669ec842037ef2fc4078e238822b4c4138d833b74e90/aws-lambda-decorators-0.24.tar.gz", "yanked": false}], "0.25": [{"comment_text": "", "digests": {"md5": "43bc52288189736d8b21e8180ec23a53", "sha256": "9abb0e5bd383244e86a4d74b90a68306a1ea3c17167b457bdd892f519db1f213"}, "downloads": -1, "filename": "aws_lambda_decorators-0.25-py3-none-any.whl", "has_sig": false, "md5_digest": "43bc52288189736d8b21e8180ec23a53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14513, "upload_time": "2019-05-28T14:24:43", "upload_time_iso_8601": "2019-05-28T14:24:43.264363Z", "url": "https://files.pythonhosted.org/packages/b7/44/29ca4fb242a782bd893db139e2f764108dd2f7d0af16f9fb837944ee44f9/aws_lambda_decorators-0.25-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18969781036060e896079a792a187c2d", "sha256": "9d934b4bd048e9066cba2aeb56d80ca46257d8f2afbe87fa772414e87c209e60"}, "downloads": -1, "filename": "aws-lambda-decorators-0.25.tar.gz", "has_sig": false, "md5_digest": "18969781036060e896079a792a187c2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16925, "upload_time": "2019-05-28T14:24:45", "upload_time_iso_8601": "2019-05-28T14:24:45.384168Z", "url": "https://files.pythonhosted.org/packages/7f/c1/e640f26f7276d8d1cad610d436d4ccd8b4c22f2db746cc33fe6aad57932c/aws-lambda-decorators-0.25.tar.gz", "yanked": false}], "0.26": [{"comment_text": "", "digests": {"md5": "1f2b420200b679f5940030fed3451b88", "sha256": "6e6f3dbe9cfb940c0a4b8ac22ebce3795f1a87e1d71191c4058582f0aaabd629"}, "downloads": -1, "filename": "aws_lambda_decorators-0.26-py3-none-any.whl", "has_sig": false, "md5_digest": "1f2b420200b679f5940030fed3451b88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20725, "upload_time": "2019-07-25T07:19:10", "upload_time_iso_8601": "2019-07-25T07:19:10.638562Z", "url": "https://files.pythonhosted.org/packages/9d/cc/7f72b7c7478584f8d30d9d64c898eec3d92f381332f5e94a8e15bd0b3bac/aws_lambda_decorators-0.26-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b6fff14f152d5ecc9ee890374a67be6", "sha256": "5f38bb0879d0e3d80b9baef38b57d93e8b246efd9012bbc0c9a4d8c794b301d2"}, "downloads": -1, "filename": "aws-lambda-decorators-0.26.tar.gz", "has_sig": false, "md5_digest": "0b6fff14f152d5ecc9ee890374a67be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21260, "upload_time": "2019-07-25T07:19:12", "upload_time_iso_8601": "2019-07-25T07:19:12.821071Z", "url": "https://files.pythonhosted.org/packages/85/e2/cda37e46ed0ad504975bcda7684ab2ffbdf8ce48204724f54851676a283d/aws-lambda-decorators-0.26.tar.gz", "yanked": false}], "0.27": [{"comment_text": "", "digests": {"md5": "38016be21ae03ca409368d0635ed5455", "sha256": "4e7f7ad8ab02c3251fa7816df739c9498cec0445166df2d79dfc54e8709cfcef"}, "downloads": -1, "filename": "aws_lambda_decorators-0.27-py3-none-any.whl", "has_sig": false, "md5_digest": "38016be21ae03ca409368d0635ed5455", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21178, "upload_time": "2019-09-20T06:36:52", "upload_time_iso_8601": "2019-09-20T06:36:52.132163Z", "url": "https://files.pythonhosted.org/packages/08/ea/8d636f353939209a366565b753472e7129acce270d97562b01447a7b695d/aws_lambda_decorators-0.27-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bb5e2375add8632176105ac8ced9fea", "sha256": "3d41e39de30f5109616480fc53c5b7477c3ee4c77fc225b1a61809ed6401f625"}, "downloads": -1, "filename": "aws-lambda-decorators-0.27.tar.gz", "has_sig": false, "md5_digest": "7bb5e2375add8632176105ac8ced9fea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21904, "upload_time": "2019-09-20T06:36:54", "upload_time_iso_8601": "2019-09-20T06:36:54.124258Z", "url": "https://files.pythonhosted.org/packages/41/c7/3db6bc227352de0baf7af1f9119f07a31abadc56c9f59a5444b2a8b0a9f8/aws-lambda-decorators-0.27.tar.gz", "yanked": false}], "0.28": [{"comment_text": "", "digests": {"md5": "19ab370aa189e09d42c4002973b49e2d", "sha256": "224f73603a4f07d4df7281a5398fea16106776585aa0464fc9e54d95d182ea25"}, "downloads": -1, "filename": "aws_lambda_decorators-0.28-py3-none-any.whl", "has_sig": false, "md5_digest": "19ab370aa189e09d42c4002973b49e2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22297, "upload_time": "2019-09-24T11:51:45", "upload_time_iso_8601": "2019-09-24T11:51:45.108645Z", "url": "https://files.pythonhosted.org/packages/23/4b/c7665ebcbb105c9a50a25d0350166e1ecfd2e0c1f501b75b8a54f703757d/aws_lambda_decorators-0.28-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3566d3bfa58699b7b4904ce9a6419fa", "sha256": "24ac77c4e6b174c5d24174d9838c404226b8420f29bade68d014fa5d1bb06340"}, "downloads": -1, "filename": "aws-lambda-decorators-0.28.tar.gz", "has_sig": false, "md5_digest": "f3566d3bfa58699b7b4904ce9a6419fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22479, "upload_time": "2019-09-24T11:51:47", "upload_time_iso_8601": "2019-09-24T11:51:47.588150Z", "url": "https://files.pythonhosted.org/packages/53/b1/af64089a4393ecfcbdbfd9f4e4587655bc03d960490952bf3ec843bcc3e7/aws-lambda-decorators-0.28.tar.gz", "yanked": false}], "0.29": [{"comment_text": "", "digests": {"md5": "541297bf4c2a47b2a4d461ea4d48b5c5", "sha256": "5570e23a869bccda10aae2ab0caa44a5d0922c7ecfb123ac9608d65d4650d0d0"}, "downloads": -1, "filename": "aws_lambda_decorators-0.29-py3-none-any.whl", "has_sig": false, "md5_digest": "541297bf4c2a47b2a4d461ea4d48b5c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22342, "upload_time": "2019-09-24T13:40:25", "upload_time_iso_8601": "2019-09-24T13:40:25.242298Z", "url": "https://files.pythonhosted.org/packages/bc/51/f0827c66ffd722773d7a160f632f09ec64aad4c345d68293c7895306fe3a/aws_lambda_decorators-0.29-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16a7c2a37a0481af32e26dd512d8b5cc", "sha256": "1129f78c6d4dbb9034cfc218adbf013ba9d7f1f97a7a398957eed2e473692d22"}, "downloads": -1, "filename": "aws-lambda-decorators-0.29.tar.gz", "has_sig": false, "md5_digest": "16a7c2a37a0481af32e26dd512d8b5cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22539, "upload_time": "2019-09-24T13:40:28", "upload_time_iso_8601": "2019-09-24T13:40:28.382782Z", "url": "https://files.pythonhosted.org/packages/bc/6c/60ed04975c60ab78aaad155edddc458597e21162a9460c3c854758d97b91/aws-lambda-decorators-0.29.tar.gz", "yanked": false}], "0.30": [{"comment_text": "", "digests": {"md5": "1a3e5b4a5733d48ec62ab716331979cc", "sha256": "757305ba445f7b6dadd96839923e9e622a4124eecb92f6fcd49d55f13f4c7dff"}, "downloads": -1, "filename": "aws_lambda_decorators-0.30-py3-none-any.whl", "has_sig": false, "md5_digest": "1a3e5b4a5733d48ec62ab716331979cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23412, "upload_time": "2019-09-27T11:03:20", "upload_time_iso_8601": "2019-09-27T11:03:20.517074Z", "url": "https://files.pythonhosted.org/packages/f0/ac/de9ae4916c1a9871648ed2a5117ef55f081b7b13255703f97879767933d0/aws_lambda_decorators-0.30-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b14515502cdd837773b052b938739367", "sha256": "607673709594a819753b98cac824504bc1f3fb1eecbda89e677c5e0e9f841e64"}, "downloads": -1, "filename": "aws-lambda-decorators-0.30.tar.gz", "has_sig": false, "md5_digest": "b14515502cdd837773b052b938739367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23978, "upload_time": "2019-09-27T11:03:25", "upload_time_iso_8601": "2019-09-27T11:03:25.295198Z", "url": "https://files.pythonhosted.org/packages/2a/c2/476eceaf49050da2229274247f88ff955b8c7c458fa23f23b628ba7445a9/aws-lambda-decorators-0.30.tar.gz", "yanked": false}], "0.31": [{"comment_text": "", "digests": {"md5": "005bd2269a5e2a9a90acbe921034dc1a", "sha256": "3cdc4848a5e0be6d0f5807234d85a2fba55a8aee3e468d75e5df214b45b2d88e"}, "downloads": -1, "filename": "aws_lambda_decorators-0.31-py3-none-any.whl", "has_sig": false, "md5_digest": "005bd2269a5e2a9a90acbe921034dc1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23504, "upload_time": "2019-09-27T11:03:22", "upload_time_iso_8601": "2019-09-27T11:03:22.985323Z", "url": "https://files.pythonhosted.org/packages/77/8b/e1319bd99d379725685c0e250e70e1fdc3de437b261c532102328d9ed24e/aws_lambda_decorators-0.31-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "306796f2369d0184e210a5ad16fee2b8", "sha256": "1614cc2b1349c1793c129538d2cf814fb2d8efb22a381123c64439205ab11248"}, "downloads": -1, "filename": "aws-lambda-decorators-0.31.tar.gz", "has_sig": false, "md5_digest": "306796f2369d0184e210a5ad16fee2b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24039, "upload_time": "2019-09-27T11:03:27", "upload_time_iso_8601": "2019-09-27T11:03:27.758779Z", "url": "https://files.pythonhosted.org/packages/d2/0b/7a2ce2c79e988c80b84d1d788f0132d1cfffedc19c41cc1f9b5c7f0eac42/aws-lambda-decorators-0.31.tar.gz", "yanked": false}], "0.32": [{"comment_text": "", "digests": {"md5": "3266c07f2ee2e1d22d154dc3fb5fb7c4", "sha256": "23b673e7bf21f60ec99ec4574103763f44533870558b7ce901220012451df9bf"}, "downloads": -1, "filename": "aws_lambda_decorators-0.32-py3-none-any.whl", "has_sig": false, "md5_digest": "3266c07f2ee2e1d22d154dc3fb5fb7c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24631, "upload_time": "2019-10-01T06:51:00", "upload_time_iso_8601": "2019-10-01T06:51:00.571277Z", "url": "https://files.pythonhosted.org/packages/05/8b/fad391f6b7448b0799a7a70abafc68cf4ea6cce8ab19e89c48eb574c6276/aws_lambda_decorators-0.32-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e78814049bdd4a99f716f03779c34683", "sha256": "7d4753dc51cf3903dfa0c01905fadc4e033756e715cbddaf52e84b8257974a2c"}, "downloads": -1, "filename": "aws-lambda-decorators-0.32.tar.gz", "has_sig": false, "md5_digest": "e78814049bdd4a99f716f03779c34683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24325, "upload_time": "2019-10-01T06:51:06", "upload_time_iso_8601": "2019-10-01T06:51:06.305614Z", "url": "https://files.pythonhosted.org/packages/e5/9c/9ba3c3bff3b081d1396cce72ebf9e2e1b0c52af83f207c4999a4107d086c/aws-lambda-decorators-0.32.tar.gz", "yanked": false}], "0.33": [{"comment_text": "", "digests": {"md5": "b842cb5020c9644d0e9cde3127aa35b2", "sha256": "765222374ba0e5a2dd838343932673a7a1cf53c60cab86d68a8550181d5441b4"}, "downloads": -1, "filename": "aws_lambda_decorators-0.33-py3-none-any.whl", "has_sig": false, "md5_digest": "b842cb5020c9644d0e9cde3127aa35b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24694, "upload_time": "2019-10-01T08:20:00", "upload_time_iso_8601": "2019-10-01T08:20:00.298209Z", "url": "https://files.pythonhosted.org/packages/ef/ef/b0459fb100c1964502e348eb47ee6a56d06bb267dbbff6c76c44f0ed0241/aws_lambda_decorators-0.33-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "491e7438b94a5594d316a8a20a0020c6", "sha256": "86b1f0aa494ba73d93cf2932908224c9f0f4033ab9da82e07f87c29bcc2b87bb"}, "downloads": -1, "filename": "aws-lambda-decorators-0.33.tar.gz", "has_sig": false, "md5_digest": "491e7438b94a5594d316a8a20a0020c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24365, "upload_time": "2019-10-01T08:20:02", "upload_time_iso_8601": "2019-10-01T08:20:02.146860Z", "url": "https://files.pythonhosted.org/packages/5a/e2/96b5c50b390bc4843e8be35615ea45d936eaa88ea3e642bf9236dcb8a643/aws-lambda-decorators-0.33.tar.gz", "yanked": false}], "0.34": [{"comment_text": "", "digests": {"md5": "2dc007b49e3d095a6b043f019bad57b8", "sha256": "19fc9ab40c48fc6bba314d117942a56e429833869c9ef4afef69f3366a22af14"}, "downloads": -1, "filename": "aws_lambda_decorators-0.34-py3-none-any.whl", "has_sig": false, "md5_digest": "2dc007b49e3d095a6b043f019bad57b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24671, "upload_time": "2019-10-03T13:11:19", "upload_time_iso_8601": "2019-10-03T13:11:19.258783Z", "url": "https://files.pythonhosted.org/packages/0c/6f/44e667c538f5d2aa9e9c9cedb1b1955e9e59a0b954c2a2355edf29c533cf/aws_lambda_decorators-0.34-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7892e7bf77b80817b4bcf26b857416c", "sha256": "2c9f8ee754fc307ebae871f42a56ab580d3dff4cc62a67c473eea527c6e1d9e6"}, "downloads": -1, "filename": "aws-lambda-decorators-0.34.tar.gz", "has_sig": false, "md5_digest": "e7892e7bf77b80817b4bcf26b857416c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24386, "upload_time": "2019-10-03T13:11:21", "upload_time_iso_8601": "2019-10-03T13:11:21.686472Z", "url": "https://files.pythonhosted.org/packages/f3/30/253d9a723454122268f86cd86f540ca5e0396305e431ca2b28343b226673/aws-lambda-decorators-0.34.tar.gz", "yanked": false}], "0.35": [{"comment_text": "", "digests": {"md5": "a41b7f8e5568d638b326bfc47c893983", "sha256": "f8fffa13c1d2190ea2274e83f7c7f0db6947f08b15fdb77ddde602e127293c51"}, "downloads": -1, "filename": "aws_lambda_decorators-0.35-py3-none-any.whl", "has_sig": false, "md5_digest": "a41b7f8e5568d638b326bfc47c893983", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24850, "upload_time": "2019-10-04T08:08:09", "upload_time_iso_8601": "2019-10-04T08:08:09.926245Z", "url": "https://files.pythonhosted.org/packages/fc/a0/50cdb2ed01a9f4ba9e12ea8f62a7dc5ab18a0045ed758f654cf52406013c/aws_lambda_decorators-0.35-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd3334aa2031d114cefa7e43a6279d01", "sha256": "002b1c12ecc6836dfac58fa58af795c8368b001833d18826116ec9ab1cad71cf"}, "downloads": -1, "filename": "aws-lambda-decorators-0.35.tar.gz", "has_sig": false, "md5_digest": "dd3334aa2031d114cefa7e43a6279d01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24638, "upload_time": "2019-10-04T08:08:12", "upload_time_iso_8601": "2019-10-04T08:08:12.370776Z", "url": "https://files.pythonhosted.org/packages/e8/04/c0fdd78484dd5d99251d36bca6210c390808a73dd4beda39488084e0393a/aws-lambda-decorators-0.35.tar.gz", "yanked": false}], "0.36": [{"comment_text": "", "digests": {"md5": "95c7cf7207468490e020dbac225e0e7e", "sha256": "f96f81e4bf5b445f958776ba496a39016afe484ad3ab82f439a99894b5e20ec7"}, "downloads": -1, "filename": "aws_lambda_decorators-0.36-py3-none-any.whl", "has_sig": false, "md5_digest": "95c7cf7207468490e020dbac225e0e7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24960, "upload_time": "2019-10-04T10:29:46", "upload_time_iso_8601": "2019-10-04T10:29:46.092905Z", "url": "https://files.pythonhosted.org/packages/20/19/e207e5460130c3352f6b2017d28e1a560065d684f0ebbc0c452d7cfe22f5/aws_lambda_decorators-0.36-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b58f61c5b644b81403ab6f7443aa5dab", "sha256": "7ff01245b26217df2bdfd50cc68bb3cf9d91b54d63d6e170f668947f321a46d7"}, "downloads": -1, "filename": "aws-lambda-decorators-0.36.tar.gz", "has_sig": false, "md5_digest": "b58f61c5b644b81403ab6f7443aa5dab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24738, "upload_time": "2019-10-04T10:29:48", "upload_time_iso_8601": "2019-10-04T10:29:48.223238Z", "url": "https://files.pythonhosted.org/packages/b2/87/5a9c83731ea62dc3f69af1dcbcb54a6de41e133d75615ebfa7c667cc5cd8/aws-lambda-decorators-0.36.tar.gz", "yanked": false}], "0.38": [{"comment_text": "", "digests": {"md5": "91e95406a5c40a85257d41b5323fe882", "sha256": "7d4f419bf1259b1e493b0959b3707d646214cd0848586944c8aed14652247c50"}, "downloads": -1, "filename": "aws_lambda_decorators-0.38-py3-none-any.whl", "has_sig": false, "md5_digest": "91e95406a5c40a85257d41b5323fe882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25308, "upload_time": "2019-10-08T09:29:11", "upload_time_iso_8601": "2019-10-08T09:29:11.853205Z", "url": "https://files.pythonhosted.org/packages/2e/05/fbd7bdc215ea935c9d081a80f6d07710a19b24cd48737a2538be30119de5/aws_lambda_decorators-0.38-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55f1ead84420f9be6401d7e8360f26d6", "sha256": "b90b3e91b20cfd0f08534cc86f45550fffe7095c96b2f0d8eed79a4fc5d48315"}, "downloads": -1, "filename": "aws-lambda-decorators-0.38.tar.gz", "has_sig": false, "md5_digest": "55f1ead84420f9be6401d7e8360f26d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25062, "upload_time": "2019-10-08T09:29:14", "upload_time_iso_8601": "2019-10-08T09:29:14.135967Z", "url": "https://files.pythonhosted.org/packages/3f/2a/5d321f93b0fad35e152047869a01697be7713c1a2f29a30c1d23029cd6b8/aws-lambda-decorators-0.38.tar.gz", "yanked": false}], "0.39": [{"comment_text": "", "digests": {"md5": "ec18bdc1ecc5d348586a07bcc7bd0eab", "sha256": "a4189baf7a5da963ce40782b4df4faaa3f121c2d1a3f32079d24357ec6ae20e5"}, "downloads": -1, "filename": "aws_lambda_decorators-0.39-py3-none-any.whl", "has_sig": false, "md5_digest": "ec18bdc1ecc5d348586a07bcc7bd0eab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25297, "upload_time": "2019-10-11T09:02:48", "upload_time_iso_8601": "2019-10-11T09:02:48.367961Z", "url": "https://files.pythonhosted.org/packages/ba/77/4e53e12ba66d62750db931be7663a31d0c962fa113770517db8cb71de8c2/aws_lambda_decorators-0.39-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfb04a5e33bd91140c69e1277e3ae8d8", "sha256": "99147bee166a477c5a1a0e3f49b5bf195e1f74c71a86f94b96ba2f9ca29fbb41"}, "downloads": -1, "filename": "aws-lambda-decorators-0.39.tar.gz", "has_sig": false, "md5_digest": "bfb04a5e33bd91140c69e1277e3ae8d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25061, "upload_time": "2019-10-11T09:02:50", "upload_time_iso_8601": "2019-10-11T09:02:50.634787Z", "url": "https://files.pythonhosted.org/packages/50/10/2754c2b6a9ea59f73f1b8e4fa3580fc98ff710ab81315426b5152b8eb981/aws-lambda-decorators-0.39.tar.gz", "yanked": false}], "0.40": [{"comment_text": "", "digests": {"md5": "47e29620fbfd8c713e03ba727d1478e0", "sha256": "5c6953754b7afaa8ae7bf36d97e24e7e403fa51afec44693d25dcb5cd7a4511c"}, "downloads": -1, "filename": "aws_lambda_decorators-0.40-py3-none-any.whl", "has_sig": false, "md5_digest": "47e29620fbfd8c713e03ba727d1478e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25481, "upload_time": "2019-10-11T10:23:46", "upload_time_iso_8601": "2019-10-11T10:23:46.252881Z", "url": "https://files.pythonhosted.org/packages/ed/35/39447964c09b70cd6c4cc5d9f91d0b96c5ec1793a7843a654a6888235cc4/aws_lambda_decorators-0.40-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e7919fb52eabc17f95f6a1da88b4e76", "sha256": "3c2f63f7cc2a7711969d32841c56d65fbebb6b3882203743a540fb20cac204f2"}, "downloads": -1, "filename": "aws-lambda-decorators-0.40.tar.gz", "has_sig": false, "md5_digest": "3e7919fb52eabc17f95f6a1da88b4e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25365, "upload_time": "2019-10-11T10:23:48", "upload_time_iso_8601": "2019-10-11T10:23:48.336899Z", "url": "https://files.pythonhosted.org/packages/96/30/cab6f05db17b1d675686ba0de4ac47c1784c911db2bf74bb65dfa9588447/aws-lambda-decorators-0.40.tar.gz", "yanked": false}], "0.42": [{"comment_text": "", "digests": {"md5": "b3b9d3a476cfb83b05efeb4aa46cf391", "sha256": "31784512a246e6931170e5cee678ee01bc12162331c2b60d3520748a3829c76a"}, "downloads": -1, "filename": "aws_lambda_decorators-0.42-py3-none-any.whl", "has_sig": false, "md5_digest": "b3b9d3a476cfb83b05efeb4aa46cf391", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26460, "upload_time": "2019-10-16T06:31:34", "upload_time_iso_8601": "2019-10-16T06:31:34.705013Z", "url": "https://files.pythonhosted.org/packages/e4/38/1d87daaacd813f1265e1eb89f0907c51d6c29c782fb8a648e15a395b89bd/aws_lambda_decorators-0.42-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78a6662a9718a3e7644d0040c1383cac", "sha256": "1f42248a3e64dc7851a246c2ac6949d350ab2cd300a904cde2fd61d95a030906"}, "downloads": -1, "filename": "aws-lambda-decorators-0.42.tar.gz", "has_sig": false, "md5_digest": "78a6662a9718a3e7644d0040c1383cac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26344, "upload_time": "2019-10-16T06:31:37", "upload_time_iso_8601": "2019-10-16T06:31:37.256076Z", "url": "https://files.pythonhosted.org/packages/d7/8c/88d526321c3ce0fd67657a26752437dae942e8f1df7e71e1f615d86f1400/aws-lambda-decorators-0.42.tar.gz", "yanked": false}], "0.43": [{"comment_text": "", "digests": {"md5": "b796c5a7fc93ff8c21766c80513fda4f", "sha256": "e8a0cc3056a35a7a4afb48ed44dc393699fb8a99b702952f3661fd87fc7cc9b8"}, "downloads": -1, "filename": "aws_lambda_decorators-0.43-py3-none-any.whl", "has_sig": false, "md5_digest": "b796c5a7fc93ff8c21766c80513fda4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26752, "upload_time": "2019-10-18T07:55:47", "upload_time_iso_8601": "2019-10-18T07:55:47.107931Z", "url": "https://files.pythonhosted.org/packages/fa/f3/b25b19ae45bdd1c39d20670913a880c631de37e3d57488beff25c95ef35b/aws_lambda_decorators-0.43-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f3a52063ef696b7a37a2d5ff8f8116c", "sha256": "c095966db17162b386724793a32bfe6318b381d2715968e1efa2ca70f85b7528"}, "downloads": -1, "filename": "aws-lambda-decorators-0.43.tar.gz", "has_sig": false, "md5_digest": "5f3a52063ef696b7a37a2d5ff8f8116c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26698, "upload_time": "2019-10-18T07:55:48", "upload_time_iso_8601": "2019-10-18T07:55:48.845652Z", "url": "https://files.pythonhosted.org/packages/20/6b/8f9e21bf9a774c3519e09c3b111b8f43f1ce81a02ed754554ad01b648541/aws-lambda-decorators-0.43.tar.gz", "yanked": false}], "0.44": [{"comment_text": "", "digests": {"md5": "f5f9a3786106f86180f638d29b48c354", "sha256": "b4926e41d6c6f133091e9603d048d48f60fcdaf8bfd5abafe4bd9f5011141c48"}, "downloads": -1, "filename": "aws_lambda_decorators-0.44-py3-none-any.whl", "has_sig": false, "md5_digest": "f5f9a3786106f86180f638d29b48c354", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27109, "upload_time": "2019-10-28T14:58:41", "upload_time_iso_8601": "2019-10-28T14:58:41.221706Z", "url": "https://files.pythonhosted.org/packages/b8/81/003f726c00cfdf73851d0d4d65a256b186ea12048aa7b7133d69f0072b27/aws_lambda_decorators-0.44-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "286554f8eb69db60beee5d3e581f34b2", "sha256": "4427645fba9eddcada2a2fae9bbc4db4e0a51a342713b2b2d3d7e60666df803d"}, "downloads": -1, "filename": "aws-lambda-decorators-0.44.tar.gz", "has_sig": false, "md5_digest": "286554f8eb69db60beee5d3e581f34b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27056, "upload_time": "2019-10-28T14:58:43", "upload_time_iso_8601": "2019-10-28T14:58:43.095340Z", "url": "https://files.pythonhosted.org/packages/9f/66/4477a0f4ed5b9374ff20cca3184d7cb8bd0a1db085034770f69833c75583/aws-lambda-decorators-0.44.tar.gz", "yanked": false}], "0.45": [{"comment_text": "", "digests": {"md5": "edcca345422bea0da7e77d5b65953a72", "sha256": "4b5094561868c4118b0bf402e6524f28e52ecc1b17d411c9502b29edb1b7f9ac"}, "downloads": -1, "filename": "aws_lambda_decorators-0.45-py3-none-any.whl", "has_sig": false, "md5_digest": "edcca345422bea0da7e77d5b65953a72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27706, "upload_time": "2019-11-07T13:48:23", "upload_time_iso_8601": "2019-11-07T13:48:23.274781Z", "url": "https://files.pythonhosted.org/packages/01/15/445da605c683a96fd5a0f686bb4fbdd0dd246d09863f10968c54e0094b2b/aws_lambda_decorators-0.45-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fad8a9e1fa79a5528f90ceb0f9754d7", "sha256": "c24f312039c29b53af94958c8c8dc6447fb67e02fe86182331be2ba94ae17799"}, "downloads": -1, "filename": "aws-lambda-decorators-0.45.tar.gz", "has_sig": false, "md5_digest": "7fad8a9e1fa79a5528f90ceb0f9754d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27994, "upload_time": "2019-11-07T13:48:25", "upload_time_iso_8601": "2019-11-07T13:48:25.599032Z", "url": "https://files.pythonhosted.org/packages/55/27/ff02e04d02d5061c432c7ddffa17ee538e9abe74134d381a78428ebf389c/aws-lambda-decorators-0.45.tar.gz", "yanked": false}], "0.46": [{"comment_text": "", "digests": {"md5": "1f7a532422dbeef4b27ce546f04f0de2", "sha256": "9d52dda429d9f1678f85200e526c7650f32755337b6dd9177d9c40caae11fee4"}, "downloads": -1, "filename": "aws_lambda_decorators-0.46-py3-none-any.whl", "has_sig": false, "md5_digest": "1f7a532422dbeef4b27ce546f04f0de2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33818, "upload_time": "2019-12-03T13:24:13", "upload_time_iso_8601": "2019-12-03T13:24:13.309752Z", "url": "https://files.pythonhosted.org/packages/76/16/5a8e4c0e7fcb85a9a1643116fb66169025ca8b265153ece60778330f6b11/aws_lambda_decorators-0.46-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97a8006b9e754e5a62569665f1880411", "sha256": "de7ef3d52ef27b954b237e0bcaf40d84155bf0077848493a9da4ede18409101c"}, "downloads": -1, "filename": "aws-lambda-decorators-0.46.tar.gz", "has_sig": false, "md5_digest": "97a8006b9e754e5a62569665f1880411", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32301, "upload_time": "2019-12-03T13:24:15", "upload_time_iso_8601": "2019-12-03T13:24:15.286785Z", "url": "https://files.pythonhosted.org/packages/cd/f5/72762c2fed993ff193207d7e6ef4713cfeec266718d2a0afc7f01fd12a22/aws-lambda-decorators-0.46.tar.gz", "yanked": false}], "0.47": [{"comment_text": "", "digests": {"md5": "953a7900705fadffe057804f7ca9892c", "sha256": "9881f0641ebf7572376d2455cf90f514280ef60c838c3e2fa147d7e755308b99"}, "downloads": -1, "filename": "aws_lambda_decorators-0.47-py3-none-any.whl", "has_sig": false, "md5_digest": "953a7900705fadffe057804f7ca9892c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33836, "upload_time": "2019-12-13T09:43:45", "upload_time_iso_8601": "2019-12-13T09:43:45.178702Z", "url": "https://files.pythonhosted.org/packages/7c/11/abcb5eee3a07ae6f7dc14c35645c17e87186f784165de30a7c1c6bf84acc/aws_lambda_decorators-0.47-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29becc2c9ae3b4956d9433daf1413247", "sha256": "d131b4b7b8e437cbaa98b6e80e3965c7dba34d22cbf3ee5e5db58a812bce8e96"}, "downloads": -1, "filename": "aws-lambda-decorators-0.47.tar.gz", "has_sig": false, "md5_digest": "29becc2c9ae3b4956d9433daf1413247", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32374, "upload_time": "2019-12-13T09:43:47", "upload_time_iso_8601": "2019-12-13T09:43:47.479722Z", "url": "https://files.pythonhosted.org/packages/c8/ac/3863fd05577adf26d2a4888f8f2f68aafe10eaaf3e644099aa00caf4ade8/aws-lambda-decorators-0.47.tar.gz", "yanked": false}], "0.48": [{"comment_text": "", "digests": {"md5": "a0a73867f4b9d7014672fbee86d24717", "sha256": "e150d6d3bb774c110b4bc85f43a01b5c7badcad88ae6de5cd462013826c8a1f0"}, "downloads": -1, "filename": "aws_lambda_decorators-0.48-py3-none-any.whl", "has_sig": false, "md5_digest": "a0a73867f4b9d7014672fbee86d24717", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35471, "upload_time": "2020-03-17T10:10:11", "upload_time_iso_8601": "2020-03-17T10:10:11.080917Z", "url": "https://files.pythonhosted.org/packages/33/9e/291cbbef5844285ba667bdd0109be628e7133abd5a4436fe69b87bec8587/aws_lambda_decorators-0.48-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "107476e123ead4f2af40b1345156b551", "sha256": "0b7488119bd263c45a5e4dab38928956745a5b69d7e3af5353ba6b2d8805ced9"}, "downloads": -1, "filename": "aws-lambda-decorators-0.48.tar.gz", "has_sig": false, "md5_digest": "107476e123ead4f2af40b1345156b551", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35715, "upload_time": "2020-03-17T10:10:13", "upload_time_iso_8601": "2020-03-17T10:10:13.109900Z", "url": "https://files.pythonhosted.org/packages/43/b2/d6db95865a3c993751a4d429af20c71b654ecb9aa1f41654261b5ffc63c1/aws-lambda-decorators-0.48.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0a73867f4b9d7014672fbee86d24717", "sha256": "e150d6d3bb774c110b4bc85f43a01b5c7badcad88ae6de5cd462013826c8a1f0"}, "downloads": -1, "filename": "aws_lambda_decorators-0.48-py3-none-any.whl", "has_sig": false, "md5_digest": "a0a73867f4b9d7014672fbee86d24717", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35471, "upload_time": "2020-03-17T10:10:11", "upload_time_iso_8601": "2020-03-17T10:10:11.080917Z", "url": "https://files.pythonhosted.org/packages/33/9e/291cbbef5844285ba667bdd0109be628e7133abd5a4436fe69b87bec8587/aws_lambda_decorators-0.48-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "107476e123ead4f2af40b1345156b551", "sha256": "0b7488119bd263c45a5e4dab38928956745a5b69d7e3af5353ba6b2d8805ced9"}, "downloads": -1, "filename": "aws-lambda-decorators-0.48.tar.gz", "has_sig": false, "md5_digest": "107476e123ead4f2af40b1345156b551", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35715, "upload_time": "2020-03-17T10:10:13", "upload_time_iso_8601": "2020-03-17T10:10:13.109900Z", "url": "https://files.pythonhosted.org/packages/43/b2/d6db95865a3c993751a4d429af20c71b654ecb9aa1f41654261b5ffc63c1/aws-lambda-decorators-0.48.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:38 2020"}