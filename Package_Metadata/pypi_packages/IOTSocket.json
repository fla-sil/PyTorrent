{"info": {"author": "ABHIJITH BOPPE", "author_email": "abhijithas.eh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Secured IOT Socket Server \n\n - Time based verification\n - TLS/SSL \n - Device Validation\n\n\n## ABOUT\n\nIOT Socket Server handle multiple clients (with unique deviceID and its key) simultaneously for bidirectional communication.\n\nIt is similar to websocket. Here we can handle each client individually from there device id.\n\nIOT devices like Raspberry can also use this module as client with IOTSocketClient module.\n\n\n**How is it secured ?**\n\nTo prevent Replay attacks and device cloning attacks.\n\nFor every data transmission from client to server or vice versa there is a time stamp which is compared with server/client present time. If the time doesn't match (tolerance of -2 sec) or if there is any reused time then socket is closed.\n\nBy using these headers for every transmission, IOT devices over WiFi can also be secured.\n\n*NOTE:*\n\n- Make sure the device time is in sync with server time (use RTC)\n- Re-establish client socket connection every 24 hours\n- SSL key pinning on client side.\n- Verify device id and key from database\n- Client socket will be closed if there is no data for 90 sec\n\n### Example Server \n\n```python\n\n'''\nDeveloped by Abhijith Boppe - linkedin.com/in/abhijith-boppe/\n'''\nfrom IOTSocket import IOTSocketServer, IOTSocketServerSSL, IOTSocket\nimport time\n\nhost = \"127.0.0.1\"\nport = 9000\n\n# give certificate path and key path\ncertfile_path = \"/user/cert.pem\"\nkeyfile_path = \"/user/cert.key\"\ndelimiter = '\\r\\n#*\\r\\n'\n\n# give some insecure data te be filtered and sanitized to ''\nlst_of_data_to_remove = [delimiter]\nprev_call = 0\n\n# this function will be called recursively to check if server want to push any data\ndef from_server_to_client():\n    '''\n    create a FIFO named pipe, make your backend application like PHP\n    to write into it and you return a list. Like: ['id1 data1', 'id2 data2', 'id3 data3', .....]\n\n    Ex: ['23234 ON SWITCH 1','23235 OFF LIGHT','232365 GET ALL SENSOR VALUES']\n    (id must be numaric values only)\n\n    '''\n    return []\n\nclass handleEachClientHere(IOTSocket):\n    def DeviceVerify(self, id_, key):          # 'id_' - int , 'key' - string\n        '''\n        This method is called when a new client is connected.\n        Verify whether device id and key matches in database records\n        and check if it is activated.\n        (Check from DB)\n        '''\n\n        return 1    #return True if verified successfully else false\n\n    def handleMessage(self, id_, data):\n        '''\n        handle client id and data for further processing.\n        create a fifo named pipe and pass the data to your\n        backed application\n\n        (make sure u remove delimeters and other vulnerable strings which effect the backend application)\n        '''\n\n        for i in lst_of_data_to_remove:         # remove delimiters/data, if any are present in client data to prevent clashes\n            data.replace(i, '')\n        print(id_, data)\n\n    def handleClose(self, error_repo=''):\n        '''\n        handle error if any during socket handling\n        error start with \"ERROR: \"\n        and normal socket close will end with normal message\n        '''\n\n        if \"ERROR:\" in str(error_repo):\n            print(error_repo)\n        else:\n            pass\n            #print(error_repo)\n\n\nserver = IOTSocketServer(host, port, from_server_to_client,handleEachClientHere)        # without ssl\n# server = IOTSocketServerSSL(host, port, from_server_to_client, handleEachClientHere, certfile = certfile_path, keyfile = keyfile_path)\nserver.serveforever()\n```\n\n### Example client\n```python\n\n'''\nDeveloped by Abhijith Boppe - linkedin.com/in/abhijith-boppe/\n\nclient for raspberry \n'''\n\nfrom IOTSocket import IOTSocketClient as sock\nimport time\n\nhost = '127.0.0.1'\nport = 9000\ndevice_id = '1234567890'\ndevice_key ='1432qrzd23'\ncertfile_path = \"/user/cert.pem\"      # for key pinning (certificate pinning)\nprev_call = 0\n\ndef someThingtoSend():\n    '''\n    this function is called recursively.\n    read data from sensor and return data\n    '''\n    global prev_call\n    now = time.time()\n    if ((now - prev_call) > 10) or prev_call == 0:\n        example = 'temp=33.5&humid=40%'\n        prev_call = now\n        return example\n    else:\n        return ''\n\ndef handleCmdsFromServer(data):\n    '''\n    This function is called when ever there is \n    data/command from the server.\n    '''\n    print(data)\n\nwhile 1: # reconnect if socket is closed\n    try:\n        sock.connectionSet(host,port,device_id,device_key,Encrypt=False, cert_path= certfile_path)  # set IOT Socket connection with valid Device ID and Key.\n        # Continiously check for receiving / tansmiting of data\n        while 1:\n            data = someThingtoSend()\n            if data != '':\n                sock.sendData(data)     # send data to server if data is available to send\n            rcv_data = sock.recvData()  # receive data from server if available\n            if len(rcv_data) > 5:\n                handleCmdsFromServer(rcv_data)   # handle your data here\n\n    except Exception as n:\n        print(n)\n\n\n\n```\n\n### Additional Information\n\nThere is no hand shake. Connection is established directly on 1st request from client. Make sure the client and server time are in sync.\n\nRead/Write to your application from using fifo named pipe recursively without closing. \n\nPlease go through the code for better understanding of the protocol.\n\n\n## License & copyright\n\n\u00a9 Abhijith Boppe, Security analyst\n\nlinkedin.com/in/abhijith-boppe\n\nLicensed under the [MIT License](LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AbhijithAJ/IOTSocket", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "IOTSocket", "package_url": "https://pypi.org/project/IOTSocket/", "platform": "", "project_url": "https://pypi.org/project/IOTSocket/", "project_urls": {"Homepage": "https://github.com/AbhijithAJ/IOTSocket"}, "release_url": "https://pypi.org/project/IOTSocket/0.3.3/", "requires_dist": null, "requires_python": ">=3.2", "summary": "to make bidirectional full-duplex comunications securely for iot devices", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Secured IOT Socket Server</h1>\n<ul>\n<li>Time based verification</li>\n<li>TLS/SSL</li>\n<li>Device Validation</li>\n</ul>\n<h2>ABOUT</h2>\n<p>IOT Socket Server handle multiple clients (with unique deviceID and its key) simultaneously for bidirectional communication.</p>\n<p>It is similar to websocket. Here we can handle each client individually from there device id.</p>\n<p>IOT devices like Raspberry can also use this module as client with IOTSocketClient module.</p>\n<p><strong>How is it secured ?</strong></p>\n<p>To prevent Replay attacks and device cloning attacks.</p>\n<p>For every data transmission from client to server or vice versa there is a time stamp which is compared with server/client present time. If the time doesn't match (tolerance of -2 sec) or if there is any reused time then socket is closed.</p>\n<p>By using these headers for every transmission, IOT devices over WiFi can also be secured.</p>\n<p><em>NOTE:</em></p>\n<ul>\n<li>Make sure the device time is in sync with server time (use RTC)</li>\n<li>Re-establish client socket connection every 24 hours</li>\n<li>SSL key pinning on client side.</li>\n<li>Verify device id and key from database</li>\n<li>Client socket will be closed if there is no data for 90 sec</li>\n</ul>\n<h3>Example Server</h3>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Developed by Abhijith Boppe - linkedin.com/in/abhijith-boppe/</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">IOTSocket</span> <span class=\"kn\">import</span> <span class=\"n\">IOTSocketServer</span><span class=\"p\">,</span> <span class=\"n\">IOTSocketServerSSL</span><span class=\"p\">,</span> <span class=\"n\">IOTSocket</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s2\">\"127.0.0.1\"</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">9000</span>\n\n<span class=\"c1\"># give certificate path and key path</span>\n<span class=\"n\">certfile_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/user/cert.pem\"</span>\n<span class=\"n\">keyfile_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/user/cert.key\"</span>\n<span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">#*</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span>\n\n<span class=\"c1\"># give some insecure data te be filtered and sanitized to ''</span>\n<span class=\"n\">lst_of_data_to_remove</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">delimiter</span><span class=\"p\">]</span>\n<span class=\"n\">prev_call</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># this function will be called recursively to check if server want to push any data</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_server_to_client</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    create a FIFO named pipe, make your backend application like PHP</span>\n<span class=\"sd\">    to write into it and you return a list. Like: ['id1 data1', 'id2 data2', 'id3 data3', .....]</span>\n\n<span class=\"sd\">    Ex: ['23234 ON SWITCH 1','23235 OFF LIGHT','232365 GET ALL SENSOR VALUES']</span>\n<span class=\"sd\">    (id must be numaric values only)</span>\n\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">handleEachClientHere</span><span class=\"p\">(</span><span class=\"n\">IOTSocket</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">DeviceVerify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>          <span class=\"c1\"># 'id_' - int , 'key' - string</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        This method is called when a new client is connected.</span>\n<span class=\"sd\">        Verify whether device id and key matches in database records</span>\n<span class=\"sd\">        and check if it is activated.</span>\n<span class=\"sd\">        (Check from DB)</span>\n<span class=\"sd\">        '''</span>\n\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>    <span class=\"c1\">#return True if verified successfully else false</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handleMessage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        handle client id and data for further processing.</span>\n<span class=\"sd\">        create a fifo named pipe and pass the data to your</span>\n<span class=\"sd\">        backed application</span>\n\n<span class=\"sd\">        (make sure u remove delimeters and other vulnerable strings which effect the backend application)</span>\n<span class=\"sd\">        '''</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">lst_of_data_to_remove</span><span class=\"p\">:</span>         <span class=\"c1\"># remove delimiters/data, if any are present in client data to prevent clashes</span>\n            <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handleClose</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">error_repo</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        handle error if any during socket handling</span>\n<span class=\"sd\">        error start with \"ERROR: \"</span>\n<span class=\"sd\">        and normal socket close will end with normal message</span>\n<span class=\"sd\">        '''</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">\"ERROR:\"</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">error_repo</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">error_repo</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n            <span class=\"c1\">#print(error_repo)</span>\n\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">IOTSocketServer</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">from_server_to_client</span><span class=\"p\">,</span><span class=\"n\">handleEachClientHere</span><span class=\"p\">)</span>        <span class=\"c1\"># without ssl</span>\n<span class=\"c1\"># server = IOTSocketServerSSL(host, port, from_server_to_client, handleEachClientHere, certfile = certfile_path, keyfile = keyfile_path)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">serveforever</span><span class=\"p\">()</span>\n</pre>\n<h3>Example client</h3>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">Developed by Abhijith Boppe - linkedin.com/in/abhijith-boppe/</span>\n\n<span class=\"sd\">client for raspberry </span>\n<span class=\"sd\">'''</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">IOTSocket</span> <span class=\"kn\">import</span> <span class=\"n\">IOTSocketClient</span> <span class=\"k\">as</span> <span class=\"n\">sock</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s1\">'127.0.0.1'</span>\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">9000</span>\n<span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"s1\">'1234567890'</span>\n<span class=\"n\">device_key</span> <span class=\"o\">=</span><span class=\"s1\">'1432qrzd23'</span>\n<span class=\"n\">certfile_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/user/cert.pem\"</span>      <span class=\"c1\"># for key pinning (certificate pinning)</span>\n<span class=\"n\">prev_call</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">someThingtoSend</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    this function is called recursively.</span>\n<span class=\"sd\">    read data from sensor and return data</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">global</span> <span class=\"n\">prev_call</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">prev_call</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">prev_call</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"s1\">'temp=33.5&amp;humid=40%'</span>\n        <span class=\"n\">prev_call</span> <span class=\"o\">=</span> <span class=\"n\">now</span>\n        <span class=\"k\">return</span> <span class=\"n\">example</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">''</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handleCmdsFromServer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    This function is called when ever there is </span>\n<span class=\"sd\">    data/command from the server.</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"c1\"># reconnect if socket is closed</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">connectionSet</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span><span class=\"n\">port</span><span class=\"p\">,</span><span class=\"n\">device_id</span><span class=\"p\">,</span><span class=\"n\">device_key</span><span class=\"p\">,</span><span class=\"n\">Encrypt</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cert_path</span><span class=\"o\">=</span> <span class=\"n\">certfile_path</span><span class=\"p\">)</span>  <span class=\"c1\"># set IOT Socket connection with valid Device ID and Key.</span>\n        <span class=\"c1\"># Continiously check for receiving / tansmiting of data</span>\n        <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">someThingtoSend</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"o\">!=</span> <span class=\"s1\">''</span><span class=\"p\">:</span>\n                <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">sendData</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>     <span class=\"c1\"># send data to server if data is available to send</span>\n            <span class=\"n\">rcv_data</span> <span class=\"o\">=</span> <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">recvData</span><span class=\"p\">()</span>  <span class=\"c1\"># receive data from server if available</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rcv_data</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n                <span class=\"n\">handleCmdsFromServer</span><span class=\"p\">(</span><span class=\"n\">rcv_data</span><span class=\"p\">)</span>   <span class=\"c1\"># handle your data here</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<h3>Additional Information</h3>\n<p>There is no hand shake. Connection is established directly on 1st request from client. Make sure the client and server time are in sync.</p>\n<p>Read/Write to your application from using fifo named pipe recursively without closing.</p>\n<p>Please go through the code for better understanding of the protocol.</p>\n<h2>License &amp; copyright</h2>\n<p>\u00a9 Abhijith Boppe, Security analyst</p>\n<p>linkedin.com/in/abhijith-boppe</p>\n<p>Licensed under the <a href=\"LICENSE\" rel=\"nofollow\">MIT License</a></p>\n\n          </div>"}, "last_serial": 6628256, "releases": {"0.3.3": [{"comment_text": "", "digests": {"md5": "4c97cad648275eff461843a23dba94d2", "sha256": "a3ddcdf5091da756219286a6ca5846741002f66ca809a8082df628ce21409511"}, "downloads": -1, "filename": "IOTSocket-0.3.3-py2-none-any.whl", "has_sig": false, "md5_digest": "4c97cad648275eff461843a23dba94d2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.2", "size": 10201, "upload_time": "2020-02-14T05:18:16", "upload_time_iso_8601": "2020-02-14T05:18:16.803559Z", "url": "https://files.pythonhosted.org/packages/e4/8f/5c7b7e3a0c84b9893dc1f2bc1d2473f46d988f2cfd3184dde0e4642eee38/IOTSocket-0.3.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aaacbd06985dadae4eb9bb41846dd2e1", "sha256": "b68cb8796772cfda7dd503f87ada635bb3818548cfb836e5af740f5508e5388f"}, "downloads": -1, "filename": "IOTSocket-0.3.3.tar.gz", "has_sig": false, "md5_digest": "aaacbd06985dadae4eb9bb41846dd2e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 8322, "upload_time": "2020-02-14T05:18:22", "upload_time_iso_8601": "2020-02-14T05:18:22.109106Z", "url": "https://files.pythonhosted.org/packages/8b/8d/149ba1872a0f214c4c8a747dbaec3d86e78c36d969f7ee957d3ac4378503/IOTSocket-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c97cad648275eff461843a23dba94d2", "sha256": "a3ddcdf5091da756219286a6ca5846741002f66ca809a8082df628ce21409511"}, "downloads": -1, "filename": "IOTSocket-0.3.3-py2-none-any.whl", "has_sig": false, "md5_digest": "4c97cad648275eff461843a23dba94d2", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=3.2", "size": 10201, "upload_time": "2020-02-14T05:18:16", "upload_time_iso_8601": "2020-02-14T05:18:16.803559Z", "url": "https://files.pythonhosted.org/packages/e4/8f/5c7b7e3a0c84b9893dc1f2bc1d2473f46d988f2cfd3184dde0e4642eee38/IOTSocket-0.3.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aaacbd06985dadae4eb9bb41846dd2e1", "sha256": "b68cb8796772cfda7dd503f87ada635bb3818548cfb836e5af740f5508e5388f"}, "downloads": -1, "filename": "IOTSocket-0.3.3.tar.gz", "has_sig": false, "md5_digest": "aaacbd06985dadae4eb9bb41846dd2e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2", "size": 8322, "upload_time": "2020-02-14T05:18:22", "upload_time_iso_8601": "2020-02-14T05:18:22.109106Z", "url": "https://files.pythonhosted.org/packages/8b/8d/149ba1872a0f214c4c8a747dbaec3d86e78c36d969f7ee957d3ac4378503/IOTSocket-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:47 2020"}