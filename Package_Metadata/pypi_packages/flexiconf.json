{"info": {"author": "Ivan Chernousov", "author_email": "krusnik.viers@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "# flexiconf\nSimple and flexible separation settings from code\n\n[![Build Status](https://travis-ci.org/KrusnikViers/flexiconf.svg?branch=master)](https://travis-ci.org/KrusnikViers/flexiconf)\n[![codecov](https://codecov.io/gh/KrusnikViers/flexiconf/branch/master/graph/badge.svg)](https://codecov.io/gh/KrusnikViers/flexiconf)\n[![PyPI version](https://badge.fury.io/py/flexiconf.svg)](https://badge.fury.io/py/flexiconf)\n[![Maintainability](https://api.codeclimate.com/v1/badges/f947f0c596656595854f/maintainability)](https://codeclimate.com/github/KrusnikViers/flexiconf/maintainability)\n\nInstall: `pip install flexiconf`\n\n## How to use:\n### Config creation:\n```\nimport flexiconf\nconfig = flexiconf.Configuration([ ...loaders... ])\n```\nConfiguration is being read at the moment of an object creation, all `get` are fast and read-only operations. Sources of the configuration are defined by loaders list, that will be described later.\n\nYou may also create multiple configurations with different sources - for example, parse command line parameters first, to define configuration files to be read as a full config later.\n\n### Accessing parameters:\n\nConfiguration is treated as a tree of dicts and lists. For best compatibility, recommended to use only alphanumeric symbols and `_` as a key. Point `.` inside the key is treated as a divider between nested sections during both parsing ang getting.\n\nAfter being parsed, tree could be received directly by `Configuration.as_dict()` method. \n\nDifferent parameters could be received via get operators: with auto cast (`config.get_bool(...)`, `config.get_int(...)`, etc) or by generic `get` method. `get` methods receive `key_path` parameter (e.g. `section_1.subsection.key_name`) and optional `default` parameter of any type, including `None`. `KeyError` will be raised, if key was not found and default option was not provided.\n\n### Loaders:\nLoaders are objects, that read configuration from different sources. Loaders are executed in direct order, later loaders will override previously parsed options with the same keys.\n\n`JsonLoader` and `IniLoader` are both take optional `config_files_pattern` parameter, describing `glob` pattern to files with configuration. If not provided, parser will look for all `*.json/*.ini` files in the caller directory recursively.\n\n`EnvLoader` takes optional `pattern` parameter, to define keys to be added in configuration.\n\n`ArgsLoader` looks for all command line parameters with `key=value` format, with optional number of `-` as a prefix.\n\n### Custom loaders:\nIf you want to write your own loader, you could simply inherit from `flexiconf.BaseLoader` class and implement `load` method.\n\n### Contribution:\nIf you have some improvements, bug fixes or think, that your loader will be useful for other people, feel free to create pull request!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/KrusnikViers/flexiconf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flexiconf", "package_url": "https://pypi.org/project/flexiconf/", "platform": "", "project_url": "https://pypi.org/project/flexiconf/", "project_urls": {"Homepage": "https://github.com/KrusnikViers/flexiconf"}, "release_url": "https://pypi.org/project/flexiconf/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Simple and flexible separation settings from code", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>flexiconf</h1>\n<p>Simple and flexible separation settings from code</p>\n<p><a href=\"https://travis-ci.org/KrusnikViers/flexiconf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52a2a7f258bfdc4c2708e6ac8b06e2ae45ff81a2/68747470733a2f2f7472617669732d63692e6f72672f4b7275736e696b56696572732f666c657869636f6e662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/KrusnikViers/flexiconf\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20abd1f8f3c9d9ce138d67a7b5fb07f76423b7d5/68747470733a2f2f636f6465636f762e696f2f67682f4b7275736e696b56696572732f666c657869636f6e662f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/flexiconf\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/212b13cce94991dcc0d512800b9f1633f4b4d8fd/68747470733a2f2f62616467652e667572792e696f2f70792f666c657869636f6e662e737667\"></a>\n<a href=\"https://codeclimate.com/github/KrusnikViers/flexiconf/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b069e8ca999dd2f8d39728037686d64f82a5cc71/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f66393437663063353936363536353935383534662f6d61696e7461696e6162696c697479\"></a></p>\n<p>Install: <code>pip install flexiconf</code></p>\n<h2>How to use:</h2>\n<h3>Config creation:</h3>\n<pre><code>import flexiconf\nconfig = flexiconf.Configuration([ ...loaders... ])\n</code></pre>\n<p>Configuration is being read at the moment of an object creation, all <code>get</code> are fast and read-only operations. Sources of the configuration are defined by loaders list, that will be described later.</p>\n<p>You may also create multiple configurations with different sources - for example, parse command line parameters first, to define configuration files to be read as a full config later.</p>\n<h3>Accessing parameters:</h3>\n<p>Configuration is treated as a tree of dicts and lists. For best compatibility, recommended to use only alphanumeric symbols and <code>_</code> as a key. Point <code>.</code> inside the key is treated as a divider between nested sections during both parsing ang getting.</p>\n<p>After being parsed, tree could be received directly by <code>Configuration.as_dict()</code> method.</p>\n<p>Different parameters could be received via get operators: with auto cast (<code>config.get_bool(...)</code>, <code>config.get_int(...)</code>, etc) or by generic <code>get</code> method. <code>get</code> methods receive <code>key_path</code> parameter (e.g. <code>section_1.subsection.key_name</code>) and optional <code>default</code> parameter of any type, including <code>None</code>. <code>KeyError</code> will be raised, if key was not found and default option was not provided.</p>\n<h3>Loaders:</h3>\n<p>Loaders are objects, that read configuration from different sources. Loaders are executed in direct order, later loaders will override previously parsed options with the same keys.</p>\n<p><code>JsonLoader</code> and <code>IniLoader</code> are both take optional <code>config_files_pattern</code> parameter, describing <code>glob</code> pattern to files with configuration. If not provided, parser will look for all <code>*.json/*.ini</code> files in the caller directory recursively.</p>\n<p><code>EnvLoader</code> takes optional <code>pattern</code> parameter, to define keys to be added in configuration.</p>\n<p><code>ArgsLoader</code> looks for all command line parameters with <code>key=value</code> format, with optional number of <code>-</code> as a prefix.</p>\n<h3>Custom loaders:</h3>\n<p>If you want to write your own loader, you could simply inherit from <code>flexiconf.BaseLoader</code> class and implement <code>load</code> method.</p>\n<h3>Contribution:</h3>\n<p>If you have some improvements, bug fixes or think, that your loader will be useful for other people, feel free to create pull request!</p>\n\n          </div>"}, "last_serial": 4854315, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c37e83ad793ccb0715bcc537abdeee9c", "sha256": "07bda1e17548ea113173d6bf7b74e1ca660787e8cfb24d2ddd137125cf8ed9ef"}, "downloads": -1, "filename": "flexiconf-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c37e83ad793ccb0715bcc537abdeee9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3186, "upload_time": "2019-02-21T15:20:29", "upload_time_iso_8601": "2019-02-21T15:20:29.861967Z", "url": "https://files.pythonhosted.org/packages/dd/fe/41aabf783cfe52ac5284aee27a336ca770142580efaa9b916d21c41ad80c/flexiconf-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ce7c821b22de13fe680025fc6a3b14b6", "sha256": "82f408e10a9883a05d06ab065468265a1d42ced16ecd0ad6772ca632299bc59c"}, "downloads": -1, "filename": "flexiconf-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ce7c821b22de13fe680025fc6a3b14b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3420, "upload_time": "2019-02-21T15:44:54", "upload_time_iso_8601": "2019-02-21T15:44:54.074222Z", "url": "https://files.pythonhosted.org/packages/bc/0b/4acc16d0d7c9d14c72eca70bffa8d367d47d3cd9acaddd409b1c25408c83/flexiconf-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ee65df925dbf770989bfff925eca0eae", "sha256": "3392721bd2ae49a5ed7e1bd60880c834fd869e638465875cc4e7a5ce7892a8d1"}, "downloads": -1, "filename": "flexiconf-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ee65df925dbf770989bfff925eca0eae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3727, "upload_time": "2019-02-21T16:28:50", "upload_time_iso_8601": "2019-02-21T16:28:50.302140Z", "url": "https://files.pythonhosted.org/packages/8f/ba/ea49d4a93f2005dc32a4f503f6bc083c2a1fd390eae2eba2d254c64b6379/flexiconf-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a287abbdb014356846b78f592aeea535", "sha256": "c048f30ee752827676a7de8f46aef0b6a70d3080a17282f2abbaba9105bafd07"}, "downloads": -1, "filename": "flexiconf-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a287abbdb014356846b78f592aeea535", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5052, "upload_time": "2019-02-21T23:08:02", "upload_time_iso_8601": "2019-02-21T23:08:02.154030Z", "url": "https://files.pythonhosted.org/packages/0e/a0/d8ddb5c77cd12c2dca8289713c1242da3a502d3ef5e9e506ca763ca31794/flexiconf-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "99b451c9f1e732ff3c4cbef486894bb3", "sha256": "7b80ad9932649fa9b4dede394a71c9d52956e371b3837716ae8348e15ea2cde5"}, "downloads": -1, "filename": "flexiconf-1.0.4.tar.gz", "has_sig": false, "md5_digest": "99b451c9f1e732ff3c4cbef486894bb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5197, "upload_time": "2019-02-22T12:26:26", "upload_time_iso_8601": "2019-02-22T12:26:26.153427Z", "url": "https://files.pythonhosted.org/packages/4b/82/3b0c778d16608580e1c89576ac5353fcbe0003b8beceef88e86cf03c7615/flexiconf-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "99b451c9f1e732ff3c4cbef486894bb3", "sha256": "7b80ad9932649fa9b4dede394a71c9d52956e371b3837716ae8348e15ea2cde5"}, "downloads": -1, "filename": "flexiconf-1.0.4.tar.gz", "has_sig": false, "md5_digest": "99b451c9f1e732ff3c4cbef486894bb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5197, "upload_time": "2019-02-22T12:26:26", "upload_time_iso_8601": "2019-02-22T12:26:26.153427Z", "url": "https://files.pythonhosted.org/packages/4b/82/3b0c778d16608580e1c89576ac5353fcbe0003b8beceef88e86cf03c7615/flexiconf-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:55 2020"}