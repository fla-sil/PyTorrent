{"info": {"author": "Luis Fernando Barrera", "author_email": "luisfernando@informind.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "jinjaconfig\n===========\n\nA jinja2 renderer receiving a JSON string from commandline. Useful for generating config files in deployment\nenvironments.\n\n\nInstallation\n------------\nInstall jinja config ::\n\n    pip install jinjaconfig\n\nInstall from sources ::\n\n    pip install git+https://bitbucket.org/luisfernando/jinjaconfig.git\n\nUsage ::\n\n    usage: jinjaconfig [-h] --values [values] [file]\n\n    A jinja2 renderer receiving arguments from commandline. Useful for generating\n    config files in deployment enviroments\n\n    positional arguments:\n      file               template to parse\n\n    optional arguments:\n      -h, --help         show this help message and exit\n      --values [values]  json encoded values\n\nBasic Use\n---------\n\n1. Pass arguments from command line ::\n\n    jinjaconfig example.conf --values=\"{\"celery\":{\"task\":\"mytask\",\"path\":\"/home/x/Env/myenv/bin/celery\"},\n    \"num_procs\":2,\"user\":\"user\",\"workdir\":\"/home/x/app/app/\",\"logs\":{\"error\":\"/home/x/app/logs/err.log\",\n    \"log\":\"/home/x/app/logs/log.log\"}}\"\n\n2. Pass arguments from a file (\\*NIX, Bash) and output to file ::\n\n    jinjaconfig example.conf --values=\"`cat arguments.json`\" > result.conf\n\nexample.conf ::\n\n    ; ==================================\n    ;  configuration example\n    ; ==================================\n\n    [program:celery]\n    ; Set full path to celery program if using virtualenv\n    command={{ celery.path }} worker -A {{ celery.task }}\n\n    directory={{ workdir }}\n    user={{ user }}\n    numprocs={{ num_procs }}\n    stdout_logfile={{ logs.log }}\n    stderr_logfile={{ logs.error }}\n    autostart=true\n    autorestart=true\n    startsecs=10\n\n    ; Need to wait for currently executing tasks to finish at shutdown.\n    ; Increase this if you have very long running tasks.\n    stopwaitsecs = 600\n\n    ; When resorting to send SIGKILL to the program to terminate it\n    ; send SIGKILL to its whole process group instead,\n    ; taking care of its children as well.\n    killasgroup=true\n\n    ; if rabbitmq is supervised, set its priority higher\n    ; so it starts first\n    priority=998\n\narguments.json ::\n\n    {\n       \"celery\" : {\n          \"task\" : \"mytask\",\n          \"path\" : \"/home/x/Env/myenv/bin/celery\"\n       },\n       \"num_procs\" : 2,\n       \"user\" : \"user\",\n       \"workdir\" : \"/home/x/app/app/\",\n       \"logs\" : {\n          \"error\" : \"/home/x/app/logs/err.log\",\n          \"log\" : \"/home/x/app/logs/log.log\"\n       }\n    }\n\n\n\n\nAuthors:\n========\n\n- Luis Fernando Barrera (luisfernando@informind.com) @joyinsky", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/luisfernando/jinjaconfig", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "jinjaconfig", "package_url": "https://pypi.org/project/jinjaconfig/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jinjaconfig/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/luisfernando/jinjaconfig"}, "release_url": "https://pypi.org/project/jinjaconfig/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A jinja2 renderer receiving a JSON string from commandline. Useful for generating config files in deployment enviroments", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"jinjaconfig\">\n<h2>jinjaconfig</h2>\n<p>A jinja2 renderer receiving a JSON string from commandline. Useful for generating config files in deployment\nenvironments.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install jinja config</p>\n<pre>pip install jinjaconfig\n</pre>\n<p>Install from sources</p>\n<pre>pip install git+https://bitbucket.org/luisfernando/jinjaconfig.git\n</pre>\n<p>Usage</p>\n<pre>usage: jinjaconfig [-h] --values [values] [file]\n\nA jinja2 renderer receiving arguments from commandline. Useful for generating\nconfig files in deployment enviroments\n\npositional arguments:\n  file               template to parse\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --values [values]  json encoded values\n</pre>\n</div>\n<div id=\"basic-use\">\n<h3>Basic Use</h3>\n<ol>\n<li><p>Pass arguments from command line</p>\n<pre>jinjaconfig example.conf --values=\"{\"celery\":{\"task\":\"mytask\",\"path\":\"/home/x/Env/myenv/bin/celery\"},\n\"num_procs\":2,\"user\":\"user\",\"workdir\":\"/home/x/app/app/\",\"logs\":{\"error\":\"/home/x/app/logs/err.log\",\n\"log\":\"/home/x/app/logs/log.log\"}}\"\n</pre>\n</li>\n<li><p>Pass arguments from a file (*NIX, Bash) and output to file</p>\n<pre>jinjaconfig example.conf --values=\"`cat arguments.json`\" &gt; result.conf\n</pre>\n</li>\n</ol>\n<p>example.conf</p>\n<pre>; ==================================\n;  configuration example\n; ==================================\n\n[program:celery]\n; Set full path to celery program if using virtualenv\ncommand={{ celery.path }} worker -A {{ celery.task }}\n\ndirectory={{ workdir }}\nuser={{ user }}\nnumprocs={{ num_procs }}\nstdout_logfile={{ logs.log }}\nstderr_logfile={{ logs.error }}\nautostart=true\nautorestart=true\nstartsecs=10\n\n; Need to wait for currently executing tasks to finish at shutdown.\n; Increase this if you have very long running tasks.\nstopwaitsecs = 600\n\n; When resorting to send SIGKILL to the program to terminate it\n; send SIGKILL to its whole process group instead,\n; taking care of its children as well.\nkillasgroup=true\n\n; if rabbitmq is supervised, set its priority higher\n; so it starts first\npriority=998\n</pre>\n<p>arguments.json</p>\n<pre>{\n   \"celery\" : {\n      \"task\" : \"mytask\",\n      \"path\" : \"/home/x/Env/myenv/bin/celery\"\n   },\n   \"num_procs\" : 2,\n   \"user\" : \"user\",\n   \"workdir\" : \"/home/x/app/app/\",\n   \"logs\" : {\n      \"error\" : \"/home/x/app/logs/err.log\",\n      \"log\" : \"/home/x/app/logs/log.log\"\n   }\n}\n</pre>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors:</h2>\n<ul>\n<li>Luis Fernando Barrera (<a href=\"mailto:luisfernando%40informind.com\">luisfernando<span>@</span>informind<span>.</span>com</a>) @joyinsky</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1194220, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3bd651d1fdfd83e3e1430e659b31b5a5", "sha256": "3c44e8e243b579e212829b089300ded683c4b3c4329419f800a620689964d49f"}, "downloads": -1, "filename": "jinjaconfig-0.1.tar.gz", "has_sig": false, "md5_digest": "3bd651d1fdfd83e3e1430e659b31b5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3388, "upload_time": "2014-08-15T19:54:32", "upload_time_iso_8601": "2014-08-15T19:54:32.251371Z", "url": "https://files.pythonhosted.org/packages/a2/23/c71b9aa1583311901f3695ef427f81d31328aedd6b4c42a3e4b2a46bf71c/jinjaconfig-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a18f2e067ce1ff43ac1bf708a4ce06b5", "sha256": "5f9b32dedd773a02180457e94c77fe416c11001b4e7f3f1134405a0b9117ad60"}, "downloads": -1, "filename": "jinjaconfig-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a18f2e067ce1ff43ac1bf708a4ce06b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3385, "upload_time": "2014-08-15T23:12:14", "upload_time_iso_8601": "2014-08-15T23:12:14.196126Z", "url": "https://files.pythonhosted.org/packages/f2/b4/234762b1f63c12bf0dfc1c15e526f17d92c49a5d16be3e53c2c2273c8cfc/jinjaconfig-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a18f2e067ce1ff43ac1bf708a4ce06b5", "sha256": "5f9b32dedd773a02180457e94c77fe416c11001b4e7f3f1134405a0b9117ad60"}, "downloads": -1, "filename": "jinjaconfig-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a18f2e067ce1ff43ac1bf708a4ce06b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3385, "upload_time": "2014-08-15T23:12:14", "upload_time_iso_8601": "2014-08-15T23:12:14.196126Z", "url": "https://files.pythonhosted.org/packages/f2/b4/234762b1f63c12bf0dfc1c15e526f17d92c49a5d16be3e53c2c2273c8cfc/jinjaconfig-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:36 2020"}