{"info": {"author": "timothy eichler", "author_email": "tim_eichler@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "System Hotkey\n=============\n\nMulti platform system wide hotkeys for python 3,\n\nCurrently no mac or  python2 support :(\n\n\nInstallation\n------------\n\nthe old\n\n.. code-block:: bash\n\n  pip3 install system_hotkey\n\nshould do the trick\n\nWindows\n^^^^^^^\ninstall pywin32\n\nLinux\n^^^^^\nFor x11 you should use `xcffib <https://github.com/tych0/xcffib>`_  (bsd license),\n\nIf for some reason you have to use the python xlib bindings (gpl license), a few fixes need be added first. See `here <https://github.com/timeyyy/system_hotkey/issues/6#issuecomment-265410255>`_\n\n\nUsage\n------\n\n**Input Keysyms**\n\nSystem hotkeys uses the keysym names from xlib for everything besides modifiers.(although case insensitive)\ngrep for vk_codes for a list of available chars.\nIf you are unable to bind to a certain key please let us know.\n\nYou can bind directly to symbols such as [\"',. etc\nNumpad keys can be binded by prefixing with kp\\_.\n\nSupported modifiers include:\n\n- control\n- shift\n- super (windows key)\n- alt\n\nInvalidKeyError will be raised if a key was not understood\n\n.. code-block:: python\n\n    from system_hotkey import SystemHotkey\n    hk = SystemHotkeys()\n    hk.register(('control', 'shift', 'h'), callback=lambda:print(\"Easy!\"))\n\nA SystemRegisterError will be raised if a hotkey is already in use.\n\nTo unregister a hotkey\n\n.. code-block:: python\n\n    hk.unregister(('control', 'shift', 'h'))\n\nA KeyError will be raised if the combination is not already grabbed.\n\nA UnregisterError will be raised if unregistering failed for any other reason.\n\nIf you want you can pass in a custom consumer:\n\n.. code-block:: python\n\n    def some_func(self, event, hotkey, args):\n        pass\n\n    hk = SystemHotkeys(consumer=some_func)\n    hk.register(hotkey, arg1, arg2, arg3)\n\nSo you have a master function that receives all hotkey presses and can delegate as desired.\n\n**Note**\nModifier keys are independent of order i.e control + alt + del  is the same as alt + control + del\n\nFeatures\n--------\n- Support for up to 3 modifiers and a key\n\nLimitations\n-----------\n- I have only mapped most common keys, i have not experimented with Unicode/Japanese characters etc. It's only a matter of mapping a name to the keysym on Linux and virtual key code on windows.\n\n- binding to kp_left (key pad left) will also bind to kp_4, there is a flag (unite_kp) to toggle this behaviour but it is experimental\n\n\n\nTo be done\n==========\n\nMac support\n\neta > 8 months\n\n\nVersion Release Notes\n=====================\n1.0.3\n-----\n* Documented the fact that xlib shouldn't really be used\n\n1.0.2\n-----\n* Fixed a linux bug where spurious events got passed through\n\n1.0.0\n-----\n* calls to the unregister and register are now thread safe\n* kp keys work properly\n* kp_unite option\n\n0.1.4\n-----\n* Bug fix on linux where pressing numlock would crash us..\n\n0.1.3\n-----\n\n* Custom args can now be passed to a custom consumer\n\n\n\n\nAuthors and Contributors\n========================\n\nTimothy Eichler", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/timeyyy/system_hotkey", "keywords": "hotkeys python3 shortcutkeys shortuct x11 windows", "license": "BSD3", "maintainer": null, "maintainer_email": null, "name": "system_hotkey", "package_url": "https://pypi.org/project/system_hotkey/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/system_hotkey/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/timeyyy/system_hotkey"}, "release_url": "https://pypi.org/project/system_hotkey/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "System wide hotkeys", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"system-hotkey\">\n<h2>System Hotkey</h2>\n<p>Multi platform system wide hotkeys for python 3,</p>\n<p>Currently no mac or  python2 support :(</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>the old</p>\n<pre>pip3 install system_hotkey\n</pre>\n<p>should do the trick</p>\n<div id=\"windows\">\n<h4>Windows</h4>\n<p>install pywin32</p>\n</div>\n<div id=\"linux\">\n<h4>Linux</h4>\n<p>For x11 you should use <a href=\"https://github.com/tych0/xcffib\" rel=\"nofollow\">xcffib</a>  (bsd license),</p>\n<p>If for some reason you have to use the python xlib bindings (gpl license), a few fixes need be added first. See <a href=\"https://github.com/timeyyy/system_hotkey/issues/6#issuecomment-265410255\" rel=\"nofollow\">here</a></p>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><strong>Input Keysyms</strong></p>\n<p>System hotkeys uses the keysym names from xlib for everything besides modifiers.(although case insensitive)\ngrep for vk_codes for a list of available chars.\nIf you are unable to bind to a certain key please let us know.</p>\n<p>You can bind directly to symbols such as [\u201c\u2019,. etc\nNumpad keys can be binded by prefixing with kp_.</p>\n<p>Supported modifiers include:</p>\n<ul>\n<li>control</li>\n<li>shift</li>\n<li>super (windows key)</li>\n<li>alt</li>\n</ul>\n<p>InvalidKeyError will be raised if a key was not understood</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">system_hotkey</span> <span class=\"kn\">import</span> <span class=\"n\">SystemHotkey</span>\n<span class=\"n\">hk</span> <span class=\"o\">=</span> <span class=\"n\">SystemHotkeys</span><span class=\"p\">()</span>\n<span class=\"n\">hk</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">((</span><span class=\"s1\">'control'</span><span class=\"p\">,</span> <span class=\"s1\">'shift'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">),</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Easy!\"</span><span class=\"p\">))</span>\n</pre>\n<p>A SystemRegisterError will be raised if a hotkey is already in use.</p>\n<p>To unregister a hotkey</p>\n<pre><span class=\"n\">hk</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">((</span><span class=\"s1\">'control'</span><span class=\"p\">,</span> <span class=\"s1\">'shift'</span><span class=\"p\">,</span> <span class=\"s1\">'h'</span><span class=\"p\">))</span>\n</pre>\n<p>A KeyError will be raised if the combination is not already grabbed.</p>\n<p>A UnregisterError will be raised if unregistering failed for any other reason.</p>\n<p>If you want you can pass in a custom consumer:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">hotkey</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">hk</span> <span class=\"o\">=</span> <span class=\"n\">SystemHotkeys</span><span class=\"p\">(</span><span class=\"n\">consumer</span><span class=\"o\">=</span><span class=\"n\">some_func</span><span class=\"p\">)</span>\n<span class=\"n\">hk</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">hotkey</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">,</span> <span class=\"n\">arg3</span><span class=\"p\">)</span>\n</pre>\n<p>So you have a master function that receives all hotkey presses and can delegate as desired.</p>\n<p><strong>Note</strong>\nModifier keys are independent of order i.e control + alt + del  is the same as alt + control + del</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Support for up to 3 modifiers and a key</li>\n</ul>\n</div>\n<div id=\"limitations\">\n<h3>Limitations</h3>\n<ul>\n<li>I have only mapped most common keys, i have not experimented with Unicode/Japanese characters etc. It\u2019s only a matter of mapping a name to the keysym on Linux and virtual key code on windows.</li>\n<li>binding to kp_left (key pad left) will also bind to kp_4, there is a flag (unite_kp) to toggle this behaviour but it is experimental</li>\n</ul>\n</div>\n</div>\n<div id=\"to-be-done\">\n<h2>To be done</h2>\n<p>Mac support</p>\n<p>eta &gt; 8 months</p>\n</div>\n<div id=\"version-release-notes\">\n<h2>Version Release Notes</h2>\n<div id=\"id1\">\n<h3>1.0.3</h3>\n<ul>\n<li>Documented the fact that xlib shouldn\u2019t really be used</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.2</h3>\n<ul>\n<li>Fixed a linux bug where spurious events got passed through</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.0</h3>\n<ul>\n<li>calls to the unregister and register are now thread safe</li>\n<li>kp keys work properly</li>\n<li>kp_unite option</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.4</h3>\n<ul>\n<li>Bug fix on linux where pressing numlock would crash us..</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.3</h3>\n<ul>\n<li>Custom args can now be passed to a custom consumer</li>\n</ul>\n</div>\n</div>\n<div id=\"authors-and-contributors\">\n<h2>Authors and Contributors</h2>\n<p>Timothy Eichler</p>\n</div>\n\n          </div>"}, "last_serial": 2504675, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5d7cf885d9db2224eb459068925a6eeb", "sha256": "aad665585698c2ab16b9712aee7fc6eb4e091e13cdd5e86f13bb9fc3a4d63718"}, "downloads": -1, "filename": "system_hotkey-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5d7cf885d9db2224eb459068925a6eeb", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 28125, "upload_time": "2015-12-12T18:31:56", "upload_time_iso_8601": "2015-12-12T18:31:56.453876Z", "url": "https://files.pythonhosted.org/packages/74/41/15ac42858b51f71b316b0cc0e5ed4c6fc1824eb12787738beb55c99ae805/system_hotkey-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a940a8b72bbf582e8675ac56a31c6cd", "sha256": "30757c43f467d45527291b1104f9d5b28a1a58ac47cef8c7f2234167a5b63f15"}, "downloads": -1, "filename": "system_hotkey-0.1.0.zip", "has_sig": false, "md5_digest": "7a940a8b72bbf582e8675ac56a31c6cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31093, "upload_time": "2015-06-04T16:16:47", "upload_time_iso_8601": "2015-06-04T16:16:47.008029Z", "url": "https://files.pythonhosted.org/packages/87/02/f87a36be449eb1c66bbede97226adc435f014d6915c4d2db7bfc229ccda1/system_hotkey-0.1.0.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9f981e99877550064321efbe771b5063", "sha256": "464d070d1827e64abd1c2c2f9a892ff310002425bf7b24e2e168ce08cfbc563e"}, "downloads": -1, "filename": "system_hotkey-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f981e99877550064321efbe771b5063", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 28093, "upload_time": "2015-12-12T20:30:42", "upload_time_iso_8601": "2015-12-12T20:30:42.890773Z", "url": "https://files.pythonhosted.org/packages/79/47/aa17af29c3e2a4f748e047d4d261a076cab68ea63d8b82591ad32771dfe9/system_hotkey-0.1.2-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9f8501905f73c1809cf0b2e7e968334e", "sha256": "bdcb83409bea490550d760ccd66c79e4f7db16455bdc74da40557c2a4b157721"}, "downloads": -1, "filename": "system_hotkey-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f8501905f73c1809cf0b2e7e968334e", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 28349, "upload_time": "2016-01-26T11:33:39", "upload_time_iso_8601": "2016-01-26T11:33:39.268189Z", "url": "https://files.pythonhosted.org/packages/4c/b7/558c23e0772bbc1a64c77ba8e759262474331d4d0f7f3af830aa0b4d2d7d/system_hotkey-0.1.3-py2.py3-none-any.whl", "yanked": false}], "0.1.4.1": [{"comment_text": "", "digests": {"md5": "1964e1eb2d76a2b92364e611e15c2a1b", "sha256": "14d85e637776727e125057225972adbc932a989e7b35265fb2b385b64e3f0302"}, "downloads": -1, "filename": "system_hotkey-0.1.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1964e1eb2d76a2b92364e611e15c2a1b", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 29001, "upload_time": "2016-02-29T20:39:30", "upload_time_iso_8601": "2016-02-29T20:39:30.653410Z", "url": "https://files.pythonhosted.org/packages/5e/70/ad8d4bd0cfd5a0597dc90e0561c290c1904a7ad4479238bea6e7be1a346b/system_hotkey-0.1.4.1-py2.py3-none-any.whl", "yanked": false}], "1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "7e76098635d456e810fc2ecec491b520", "sha256": "df8efe5f6a5edee89cb88f08e014c4b902777739b3ec6cc4f9b600ff443b7b0a"}, "downloads": -1, "filename": "system_hotkey-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e76098635d456e810fc2ecec491b520", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 31429, "upload_time": "2016-06-06T11:48:15", "upload_time_iso_8601": "2016-06-06T11:48:15.821335Z", "url": "https://files.pythonhosted.org/packages/aa/65/b9e36083c6637836b2c6ba231a93c217c4c6c756a48552e5567d5cfdca15/system_hotkey-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c93ef701ed9482a6bca071fb4b03613", "sha256": "be9becce634908d24d3988e51293ce3fcbdd8e4b37c591b8e2849cbb903baccb"}, "downloads": -1, "filename": "system_hotkey-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8c93ef701ed9482a6bca071fb4b03613", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32031, "upload_time": "2016-06-06T11:48:11", "upload_time_iso_8601": "2016-06-06T11:48:11.206194Z", "url": "https://files.pythonhosted.org/packages/51/99/c13dc909507bd9281379d7b38293fab405ee9981000f342ea44f7e09a430/system_hotkey-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "1fd97daf8ded967cc975d52dfb0f7219", "sha256": "50a453529bb646cc49867d071588957d01385888c43193de89786be64754efb7"}, "downloads": -1, "filename": "system_hotkey-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1fd97daf8ded967cc975d52dfb0f7219", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 31543, "upload_time": "2016-07-28T20:42:19", "upload_time_iso_8601": "2016-07-28T20:42:19.736401Z", "url": "https://files.pythonhosted.org/packages/d1/8e/e9e9a640f24504984dc74560da710fcc103986e229ba00879392add7c791/system_hotkey-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b16d04bd986388a253ba03472c109b3d", "sha256": "fedb0edde9eab687416a3ac21fa520a43b9d5c93b1053221d62d47bb5aa6d9a9"}, "downloads": -1, "filename": "system_hotkey-1.0.2.tar.gz", "has_sig": false, "md5_digest": "b16d04bd986388a253ba03472c109b3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32134, "upload_time": "2016-07-28T20:42:17", "upload_time_iso_8601": "2016-07-28T20:42:17.406557Z", "url": "https://files.pythonhosted.org/packages/bb/5a/585126beb82a8fdc2d08a618a0615ce6dea584c7832a080d619915b627fe/system_hotkey-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bdb3945716c2e14529d87affef4cf12f", "sha256": "58a181c01f84368ace25d38cd119e9effaa0e8fdcab4c6b3ac9df0cc4a1caa88"}, "downloads": -1, "filename": "system_hotkey-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bdb3945716c2e14529d87affef4cf12f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31565, "upload_time": "2016-12-07T13:07:33", "upload_time_iso_8601": "2016-12-07T13:07:33.504344Z", "url": "https://files.pythonhosted.org/packages/65/b6/45b821fad7be5d43f99ed1e0c69e7e9116fd69c450ba164aad42c714fe68/system_hotkey-1.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdb3945716c2e14529d87affef4cf12f", "sha256": "58a181c01f84368ace25d38cd119e9effaa0e8fdcab4c6b3ac9df0cc4a1caa88"}, "downloads": -1, "filename": "system_hotkey-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bdb3945716c2e14529d87affef4cf12f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 31565, "upload_time": "2016-12-07T13:07:33", "upload_time_iso_8601": "2016-12-07T13:07:33.504344Z", "url": "https://files.pythonhosted.org/packages/65/b6/45b821fad7be5d43f99ed1e0c69e7e9116fd69c450ba164aad42c714fe68/system_hotkey-1.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:51 2020"}