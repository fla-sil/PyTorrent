{"info": {"author": "Marcin Nowak", "author_email": "marcin.j.nowak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# django-sqltemplate\nDatabase query tool for Django, based on SQL templates\n\n## Development status\n\n* Alpha\n* API may be radically changed until first Beta release\n* Not tested automatically yet\n\n### Roadmap\n\n* 0.6 - stable API\n* 0.7 - automated tests, first Beta release\n* 0.8,<1.0 - minor improvements without API changes, bugfixes\n* 1.0 - first Stable release\n\n## Introduction\n\nSQL is a great and poweruful DSL, which is easeier in maintenance \nwhen you're working on complext queries (i.e. reporting queries).\nBut the main problem of raw SQL is a commonly used \"spaghetti\" anti-pattern, \nwhen you're embedding/building SQLs directly in your code.\n\nThe solution comes from templating SQLs idea and `django-sqltemplate` \nis a simple implementation of it.\n\n## Quickstart\n\n### Install the package\n\n```pip install django-sqltemplate```\n\n### Add application to the INSTALLED_APPS\n\n```\n    INSTALLED_APPS = [\n       ...\n       'djsqltemplate',\n       ...\n       ]\n```\n\n### Add SQL template(s)\n\nMake `sqltemplates` directory in your Django app (your app must be added to\n`INSTALLED_APPS`):\n\n```mkdir <django-project>/<my-app>/sqltemplates```\n\nPut `hello.sql` template in `sqltemplates` directory:\n\nhello.sql (assuming sqlite syntax)\n```sql\nselect 'Hello ' || :name as message\n```\n\n### Query the database\n\n```python\n>>> import djsqltemplate\n>>> hello = djsqltemplate.get('hello.sql')\n>>> print hello.values(name='Marcin')\n[{'message': u'Hello Marcin'}]\n```\n\nIf query returns just one row (as in example above) you may read result\ndirectly using `.scalar()` method:\n\n```python\n>>> print hello.scalar(name='Marcin')\nHello Marcin\n```\n\nTo fetch results as a list of dictionaries use `.values()` method:\n\n```python\n>>> print hello.values(name='Marcin')\n[{'message': u'Hello Marcin'}]\n```\n\nTo fetch results as a list of tuples use `.values_list()` method:\n\n```python\n>>> print hello.values_list(name='Marcin')\n[(u'Hello Marcin',)]\n```\n\nTo fetch results as iterator over tuples use `.iterator()` method:\n\n```python\n>>> print hello.iterator(name='Marcin')\n<generator object _fetch at 0x7f8abd202870>\n```\n\nTo fetch results as iterator over dictionaries use `.dictiterator()` method:\n\n```python\n>>> print hello.dictiterator(name='Marcin')\n<generator object _fetch at 0x7f8abd202820>\n```\n\n\n## Advanced examples\n\n### The Counter\n\nLet's assume that we want to count rows returning from `hello.sql` query.\nTo do that we should create a sql for the counter. But instead of making\na new file, we'll create it from string, to show how `.from_string()`\nworks:\n\n```python\n>>> count = djsqltemplate.from_string(\n    'select count(*) from ({{ sql|safe }}) x')\n```\n\nThen join the queries together:\n\n```python\n>>> import djsqltemplate\n>>> hello = djsqltemplate.get('hello.sql').bind(name='Marcin')\n>>> count = djsqltemplate.from_string(\n    'select count(*) from ({{ sql|safe }}) x')\n>>> print count.scalar(sql=hello)\n1\n```\n\nAs you can see the `:name` variable was replaced with `Marcin` string,\nand the `sql` template variable (from The Counter query) was replaced\nby `hello.sql` subquery.\n\n#### How it looks?\n\n```python\n>>> print count.bind(sql=hello).pretty()\n```\n```sql\nSELECT count(*)\nFROM\n  (SELECT 'Hello ' || :name AS message) x\n```\n\n#### How it works?\n\n`count` and `hello` objects are `TemplateQuery` instances:\n\n```python\n>>> count, hello\n(<sqltemplate.query.TemplateQuery at 0x7f8abd1ee610>,\n <sqltemplate.query.TemplateQuery at 0x7f8abd1ee210>)\n```\n\nThe `TemplateQuery` wraps Django `Template` instance together with specified\ncontext.  Calling `TemplateQuery` produces new instance with extended context\n(internally using `.bind()` method), and the outermost context is extended by\ncontext of embedded templates.\n\nContext may be set at the factory time setting `context` argument or by\nimplicit call of `.bind()` method. Also you can pass extra context arguments\ndirectly to `.values()`, `.values_list()`, `.iterator()`, `.dictiterator()` and\n`.scalar()`.\n\n```python\n>>> hello = djsqltemplate.get('hello.sql', context={'name': 'Marcin'})\n>>> print hello.context\n{'name': 'Marcin'}\n\n>>> hello = djsqltemplate.get('hello.sql')\n>>> print hello.context\n{}\n\n>>> hello_marcin = hello.bind(name='Marcin')\n>>> print hello_marcin.context\n{'name': 'Marcin'}\n\n>>> print hello.scalar(name='Marcin')\nHello Marcin\n```\n\nSo in the Counter example we're setting `hello` instance as a `sql` variable\nfor the `counter.sql` template, which is resolved and rendered by\n`{{ sql|safe }}` expression, and then (at the execution time) the `name`\nvariable is passed to `cursor.execute()` (which is safe and the preferred way\nof passing query parameters). \n\nRemeber that preparing templates with additional context makes a new instance\n(a copy) of the original object. This will allow you for easy query\ncustomization dependend of your requirements.\n\n### Countries searcher\n\nLet's prepare a test table (still assuming sqlite as a db engine):\n\n```bash\necho \"create table countries (id int, name varchar(64));\" | sqlite3 db.sqlite3\n```\n\nFill the example data:\n\n```sql\necho \"insert into countries (id, name) values (1, 'Poland'), (2, 'Slovakia'), (3, 'Czech Republic');\" | sqlite3 db.sqlite3\n```\n\nAdd `countries.sql` query template:\n\n```sql\nselect id, name from countries\n{% if search_for %}where name like '%'||:search_for||'%'{% endif %}\n{% if limit %}limit :limit{% endif %} \n```\n\nInstantiate `count` and `countries` templates:\n\n```python\n>>> count = djsqltemplate.get('counter.sql')\n>>> countries = djsqltemplate.get('countries.sql')\n```\n\nAsk for countries containg letter \"a\" in their names:\n\n```python\n>>> print countries.values(search_for='a')\n[{'id': 1, 'name': u'Poland'}, {'id': 2, 'name': u'Slovakia'}]\n```\n\nthen count the results:\n\n```python\n>>> print count.scalar(sql=countries.bind(search_for='a'))\n2\n```\n\nand limit results if you want:\n\n```python\n>>> print countries.values(search_for='a', limit=1)\n[{'id': 1, 'name': u'Poland'}]\n```\n\nSimple?\n\n### Multiple database connections\n\n`TemplateQuery` class provides `.using()` method which allow you to\nchange connection used to querying database. Just provide connection\nname (alias) same as for Django's `QuerySet`.\n\n```python\n>>> print countries.using('default').values()\n```\n\nYou can set connection name at factory time:\n\n```python\n>>> countries = djsqltemplate.get('countries.sql', using='default')\n```\n\nAnd you can use `djsqltemplate.using()` as a context manager:\n\n```python\nwith djsqltemplate.using('default') as tpl:\n    countries = tpl.get('countries.sql')\n    print countries.values()\n```\n\nPlease note that `tpl` variable is a new factory instance, which will\nautomatically set proper connection to all created `TemplateQuery`\nobjects. Direct call to `djsqltemplate.get()` will create objects same\nas before, without connection set, because it is a shortcut for default\nfactory method.\n\n### Default context\n\nSometimes you may need to set some defaults. To do that you can set\ndefault context at a factory time:\n\n```python\n>>> countries = djsqltemplate.get('countries.sql', context={'limit': 2})\n```\n\nAnd by using `djsqltemplate.context()` context manager:\n\n```python\nwith djsqltemplate.context(limit=1) as tpl:\n    countries = tpl.get('countries.sql')\n    print countries.values()\n```\n\n### Setting default context and connection together\n\nIf you want to set default context together with specific connection,\nuse `djsqltemplate.scope()` context manager:\n\n```python\nwith djsqltemplate.scope(context={'limit': 2}, using='default') as tpl:\n    countries = tpl.get('countries.sql')\n    print countries.values()\n```\n\n## Motivation\n\n* `django-sqltemplate` is designed for managing queries of mid/large complexity\n  (like queries above 100 SLOCs, incl. window functions, non-generic syntax,\n  etc)\n* Maintenance of a complex queries is way faster using raw SQL instead of ORM\n  objects (`Q()`,`F()`,`.aggregate()`, etc)\n* The querying should be simplest as possible, incl. joining / embedding\n  templates (we don't want to handle cursors and connections instances manually)\n* It is not a replacement for Django ORM nor SQLAlchemy, and may be used\n  together with (i.e.`sqlalchemy.text(str(countries(search_for='a')))`\n  or Django's `Manager.raw()`)\n* There are many good template engines (Django Templates, Jinja2), so we just\n  need to use them and not reinvent the wheel\n* Django 1.8+ has support for multiple templating engines\n* Django is a most popoular RAD framework for Python, but with limited ORM\n\n## Requirements\n\n* Django 1.8+\n\nDependencies:\n\n* sqltemplate >= 0.5.0\n\n## License\n\nBSD\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marcinn/django-sqltemplate", "keywords": "web python django sql template", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-sqltemplate", "package_url": "https://pypi.org/project/django-sqltemplate/", "platform": "", "project_url": "https://pypi.org/project/django-sqltemplate/", "project_urls": {"Homepage": "https://github.com/marcinn/django-sqltemplate"}, "release_url": "https://pypi.org/project/django-sqltemplate/0.5.2.post2/", "requires_dist": ["sqltemplate (<0.6.0,>=0.5.0)"], "requires_python": "", "summary": "Database querying tool for Django, based on SQL templates", "version": "0.5.2.post2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-sqltemplate</h1>\n<p>Database query tool for Django, based on SQL templates</p>\n<h2>Development status</h2>\n<ul>\n<li>Alpha</li>\n<li>API may be radically changed until first Beta release</li>\n<li>Not tested automatically yet</li>\n</ul>\n<h3>Roadmap</h3>\n<ul>\n<li>0.6 - stable API</li>\n<li>0.7 - automated tests, first Beta release</li>\n<li>0.8,&lt;1.0 - minor improvements without API changes, bugfixes</li>\n<li>1.0 - first Stable release</li>\n</ul>\n<h2>Introduction</h2>\n<p>SQL is a great and poweruful DSL, which is easeier in maintenance\nwhen you're working on complext queries (i.e. reporting queries).\nBut the main problem of raw SQL is a commonly used \"spaghetti\" anti-pattern,\nwhen you're embedding/building SQLs directly in your code.</p>\n<p>The solution comes from templating SQLs idea and <code>django-sqltemplate</code>\nis a simple implementation of it.</p>\n<h2>Quickstart</h2>\n<h3>Install the package</h3>\n<p><code>pip install django-sqltemplate</code></p>\n<h3>Add application to the INSTALLED_APPS</h3>\n<pre><code>    INSTALLED_APPS = [\n       ...\n       'djsqltemplate',\n       ...\n       ]\n</code></pre>\n<h3>Add SQL template(s)</h3>\n<p>Make <code>sqltemplates</code> directory in your Django app (your app must be added to\n<code>INSTALLED_APPS</code>):</p>\n<p><code>mkdir &lt;django-project&gt;/&lt;my-app&gt;/sqltemplates</code></p>\n<p>Put <code>hello.sql</code> template in <code>sqltemplates</code> directory:</p>\n<p>hello.sql (assuming sqlite syntax)</p>\n<pre><span class=\"k\">select</span> <span class=\"s1\">'Hello '</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">name</span> <span class=\"k\">as</span> <span class=\"n\">message</span>\n</pre>\n<h3>Query the database</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">djsqltemplate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello.sql'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Hello Marcin'</span><span class=\"p\">}]</span>\n</pre>\n<p>If query returns just one row (as in example above) you may read result\ndirectly using <code>.scalar()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"n\">Hello</span> <span class=\"n\">Marcin</span>\n</pre>\n<p>To fetch results as a list of dictionaries use <code>.values()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'message'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Hello Marcin'</span><span class=\"p\">}]</span>\n</pre>\n<p>To fetch results as a list of tuples use <code>.values_list()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"sa\">u</span><span class=\"s1\">'Hello Marcin'</span><span class=\"p\">,)]</span>\n</pre>\n<p>To fetch results as iterator over tuples use <code>.iterator()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">iterator</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"n\">_fetch</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f8abd202870</span><span class=\"o\">&gt;</span>\n</pre>\n<p>To fetch results as iterator over dictionaries use <code>.dictiterator()</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">dictiterator</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">generator</span> <span class=\"nb\">object</span> <span class=\"n\">_fetch</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f8abd202820</span><span class=\"o\">&gt;</span>\n</pre>\n<h2>Advanced examples</h2>\n<h3>The Counter</h3>\n<p>Let's assume that we want to count rows returning from <code>hello.sql</code> query.\nTo do that we should create a sql for the counter. But instead of making\na new file, we'll create it from string, to show how <code>.from_string()</code>\nworks:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span>\n    <span class=\"s1\">'select count(*) from ({{ sql|safe }}) x'</span><span class=\"p\">)</span>\n</pre>\n<p>Then join the queries together:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">djsqltemplate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello.sql'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span>\n    <span class=\"s1\">'select count(*) from ({{ sql|safe }}) x'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">=</span><span class=\"n\">hello</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</pre>\n<p>As you can see the <code>:name</code> variable was replaced with <code>Marcin</code> string,\nand the <code>sql</code> template variable (from The Counter query) was replaced\nby <code>hello.sql</code> subquery.</p>\n<h4>How it looks?</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">=</span><span class=\"n\">hello</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"k\">SELECT</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"k\">FROM</span>\n  <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"s1\">'Hello '</span> <span class=\"o\">||</span> <span class=\"p\">:</span><span class=\"n\">name</span> <span class=\"k\">AS</span> <span class=\"n\">message</span><span class=\"p\">)</span> <span class=\"n\">x</span>\n</pre>\n<h4>How it works?</h4>\n<p><code>count</code> and <code>hello</code> objects are <code>TemplateQuery</code> instances:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span><span class=\"p\">,</span> <span class=\"n\">hello</span>\n<span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">sqltemplate</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">TemplateQuery</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f8abd1ee610</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n <span class=\"o\">&lt;</span><span class=\"n\">sqltemplate</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">TemplateQuery</span> <span class=\"n\">at</span> <span class=\"mh\">0x7f8abd1ee210</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>TemplateQuery</code> wraps Django <code>Template</code> instance together with specified\ncontext.  Calling <code>TemplateQuery</code> produces new instance with extended context\n(internally using <code>.bind()</code> method), and the outermost context is extended by\ncontext of embedded templates.</p>\n<p>Context may be set at the factory time setting <code>context</code> argument or by\nimplicit call of <code>.bind()</code> method. Also you can pass extra context arguments\ndirectly to <code>.values()</code>, <code>.values_list()</code>, <code>.iterator()</code>, <code>.dictiterator()</code> and\n<code>.scalar()</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello.sql'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Marcin'</span><span class=\"p\">})</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">context</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Marcin'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'hello.sql'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">context</span>\n<span class=\"p\">{}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hello_marcin</span> <span class=\"o\">=</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello_marcin</span><span class=\"o\">.</span><span class=\"n\">context</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Marcin'</span><span class=\"p\">}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">hello</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Marcin'</span><span class=\"p\">)</span>\n<span class=\"n\">Hello</span> <span class=\"n\">Marcin</span>\n</pre>\n<p>So in the Counter example we're setting <code>hello</code> instance as a <code>sql</code> variable\nfor the <code>counter.sql</code> template, which is resolved and rendered by\n<code>{{ sql|safe }}</code> expression, and then (at the execution time) the <code>name</code>\nvariable is passed to <code>cursor.execute()</code> (which is safe and the preferred way\nof passing query parameters).</p>\n<p>Remeber that preparing templates with additional context makes a new instance\n(a copy) of the original object. This will allow you for easy query\ncustomization dependend of your requirements.</p>\n<h3>Countries searcher</h3>\n<p>Let's prepare a test table (still assuming sqlite as a db engine):</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"create table countries (id int, name varchar(64));\"</span> <span class=\"p\">|</span> sqlite3 db.sqlite3\n</pre>\n<p>Fill the example data:</p>\n<pre><span class=\"n\">echo</span> <span class=\"ss\">\"insert into countries (id, name) values (1, 'Poland'), (2, 'Slovakia'), (3, 'Czech Republic');\"</span> <span class=\"o\">|</span> <span class=\"n\">sqlite3</span> <span class=\"n\">db</span><span class=\"p\">.</span><span class=\"n\">sqlite3</span>\n</pre>\n<p>Add <code>countries.sql</code> query template:</p>\n<pre><span class=\"k\">select</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"k\">from</span> <span class=\"n\">countries</span>\n<span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"n\">search_for</span> <span class=\"o\">%</span><span class=\"err\">}</span><span class=\"k\">where</span> <span class=\"n\">name</span> <span class=\"k\">like</span> <span class=\"s1\">'%'</span><span class=\"o\">||</span><span class=\"p\">:</span><span class=\"n\">search_for</span><span class=\"o\">||</span><span class=\"s1\">'%'</span><span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"n\">endif</span> <span class=\"o\">%</span><span class=\"err\">}</span>\n<span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"k\">if</span> <span class=\"k\">limit</span> <span class=\"o\">%</span><span class=\"err\">}</span><span class=\"k\">limit</span> <span class=\"p\">:</span><span class=\"k\">limit</span><span class=\"err\">{</span><span class=\"o\">%</span> <span class=\"n\">endif</span> <span class=\"o\">%</span><span class=\"err\">}</span> \n</pre>\n<p>Instantiate <code>count</code> and <code>countries</code> templates:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'counter.sql'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">)</span>\n</pre>\n<p>Ask for countries containg letter \"a\" in their names:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">search_for</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Poland'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Slovakia'</span><span class=\"p\">}]</span>\n</pre>\n<p>then count the results:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">count</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">=</span><span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">search_for</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">))</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>and limit results if you want:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">search_for</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Poland'</span><span class=\"p\">}]</span>\n</pre>\n<p>Simple?</p>\n<h3>Multiple database connections</h3>\n<p><code>TemplateQuery</code> class provides <code>.using()</code> method which allow you to\nchange connection used to querying database. Just provide connection\nname (alias) same as for Django's <code>QuerySet</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n</pre>\n<p>You can set connection name at factory time:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n</pre>\n<p>And you can use <code>djsqltemplate.using()</code> as a context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tpl</span><span class=\"p\">:</span>\n    <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">tpl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n</pre>\n<p>Please note that <code>tpl</code> variable is a new factory instance, which will\nautomatically set proper connection to all created <code>TemplateQuery</code>\nobjects. Direct call to <code>djsqltemplate.get()</code> will create objects same\nas before, without connection set, because it is a shortcut for default\nfactory method.</p>\n<h3>Default context</h3>\n<p>Sometimes you may need to set some defaults. To do that you can set\ndefault context at a factory time:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'limit'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre>\n<p>And by using <code>djsqltemplate.context()</code> context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tpl</span><span class=\"p\">:</span>\n    <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">tpl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n</pre>\n<h3>Setting default context and connection together</h3>\n<p>If you want to set default context together with specific connection,\nuse <code>djsqltemplate.scope()</code> context manager:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">djsqltemplate</span><span class=\"o\">.</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'limit'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tpl</span><span class=\"p\">:</span>\n    <span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">tpl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'countries.sql'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n</pre>\n<h2>Motivation</h2>\n<ul>\n<li><code>django-sqltemplate</code> is designed for managing queries of mid/large complexity\n(like queries above 100 SLOCs, incl. window functions, non-generic syntax,\netc)</li>\n<li>Maintenance of a complex queries is way faster using raw SQL instead of ORM\nobjects (<code>Q()</code>,<code>F()</code>,<code>.aggregate()</code>, etc)</li>\n<li>The querying should be simplest as possible, incl. joining / embedding\ntemplates (we don't want to handle cursors and connections instances manually)</li>\n<li>It is not a replacement for Django ORM nor SQLAlchemy, and may be used\ntogether with (i.e.<code>sqlalchemy.text(str(countries(search_for='a')))</code>\nor Django's <code>Manager.raw()</code>)</li>\n<li>There are many good template engines (Django Templates, Jinja2), so we just\nneed to use them and not reinvent the wheel</li>\n<li>Django 1.8+ has support for multiple templating engines</li>\n<li>Django is a most popoular RAD framework for Python, but with limited ORM</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Django 1.8+</li>\n</ul>\n<p>Dependencies:</p>\n<ul>\n<li>sqltemplate &gt;= 0.5.0</li>\n</ul>\n<h2>License</h2>\n<p>BSD</p>\n\n          </div>"}, "last_serial": 6345785, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cfc827c10d93125375c564b4141da1c6", "sha256": "43e9fe72979561f6881358953b3278b482737c670676c56f127e0003d17b3a39"}, "downloads": -1, "filename": "django_sqltemplate-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "cfc827c10d93125375c564b4141da1c6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7014, "upload_time": "2016-04-09T12:55:47", "upload_time_iso_8601": "2016-04-09T12:55:47.974016Z", "url": "https://files.pythonhosted.org/packages/de/06/d9fbc7a6a97fbbe5ef7f0a6459fbb4baa6ab67200c07a3dd7c8fec4fcc28/django_sqltemplate-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cac27f46e7c33c0a2f5deb77e558301", "sha256": "346382001f08afd3ffc1676525754a543ee33d6e7db70fe9428d50b265a1d06c"}, "downloads": -1, "filename": "django-sqltemplate-0.1.tar.gz", "has_sig": false, "md5_digest": "8cac27f46e7c33c0a2f5deb77e558301", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3901, "upload_time": "2016-04-09T12:55:39", "upload_time_iso_8601": "2016-04-09T12:55:39.325022Z", "url": "https://files.pythonhosted.org/packages/8b/f3/bf8347da8d5aad3041709f1746db645bcb70e9db6be8bc40656072cde450/django-sqltemplate-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f127283d42727826d728b4a0095f21c0", "sha256": "7e1db28a87584034aef852c108cca0083212b7467272ad50c90d2f442e2fdcab"}, "downloads": -1, "filename": "django_sqltemplate-0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f127283d42727826d728b4a0095f21c0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7062, "upload_time": "2016-04-11T07:43:32", "upload_time_iso_8601": "2016-04-11T07:43:32.862228Z", "url": "https://files.pythonhosted.org/packages/a5/45/8daa945e63caef182ab118af63937243b78fbcb5f6bc7cfaa919f5e4519d/django_sqltemplate-0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fddc8dcfeed63b487db942a7b5731d6", "sha256": "1de2eb5e7de17a3031c8c67914e39616ef4dc561499300ffb866acdd4e4a4af2"}, "downloads": -1, "filename": "django-sqltemplate-0.2.tar.gz", "has_sig": false, "md5_digest": "0fddc8dcfeed63b487db942a7b5731d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3936, "upload_time": "2016-04-11T07:43:19", "upload_time_iso_8601": "2016-04-11T07:43:19.650153Z", "url": "https://files.pythonhosted.org/packages/be/4e/d9fa29ab6ed542e90e83ff4e56a58edba97892e95fd65b94bc62b1f8cd03/django-sqltemplate-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "473320d400e65eb401e3977d763fa2db", "sha256": "899d20f13456698ae8090f65786300dcdeafa80dfe0b07722667b99b8d11938c"}, "downloads": -1, "filename": "django_sqltemplate-0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "473320d400e65eb401e3977d763fa2db", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7087, "upload_time": "2016-04-11T09:54:19", "upload_time_iso_8601": "2016-04-11T09:54:19.956597Z", "url": "https://files.pythonhosted.org/packages/1e/8c/00af1166866e6eca7addb436ae6e92f95c960b359138ed916daecaf5992e/django_sqltemplate-0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87ac046b4774b7fcd8ba14bab5a4dd2d", "sha256": "a1769447e900953dab4149b69880a34797495821e3836f8f62f2b2f14a7c8fd7"}, "downloads": -1, "filename": "django-sqltemplate-0.3.tar.gz", "has_sig": false, "md5_digest": "87ac046b4774b7fcd8ba14bab5a4dd2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3960, "upload_time": "2016-04-11T09:54:14", "upload_time_iso_8601": "2016-04-11T09:54:14.146654Z", "url": "https://files.pythonhosted.org/packages/cc/13/144a3e297f89b18589fe576860be9eb08e2313d140e07d41b1239d34ec73/django-sqltemplate-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b6c578afc48fa25296388320f2df5ce5", "sha256": "f772af0869b84f115c8605c377ec99d980e63364561920656995e550c4ca979e"}, "downloads": -1, "filename": "django_sqltemplate-0.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b6c578afc48fa25296388320f2df5ce5", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7144, "upload_time": "2016-04-11T11:36:23", "upload_time_iso_8601": "2016-04-11T11:36:23.687402Z", "url": "https://files.pythonhosted.org/packages/4b/ab/64eef92ddb90bfa9bb69dfe7566d9005eb55d31f613e505bdbf80af858b5/django_sqltemplate-0.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "483e7b4bce4152bce23fa56cade7f57e", "sha256": "9f310b1a18cf8dd0404af2a94944343b385f59b4cf55f4d14e5b27b7fd378f22"}, "downloads": -1, "filename": "django-sqltemplate-0.3.1.tar.gz", "has_sig": false, "md5_digest": "483e7b4bce4152bce23fa56cade7f57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3984, "upload_time": "2016-04-11T11:36:12", "upload_time_iso_8601": "2016-04-11T11:36:12.891787Z", "url": "https://files.pythonhosted.org/packages/06/44/9d56672cd9c35c6b474ad8d17d35a36548add070a7bd688423d72a7dd8ef/django-sqltemplate-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "febfdaa3ab2690a6a33f3d647438130c", "sha256": "a5fcf7858791df03dae41463ec43085d44a9f166743577898a4d9e3d0bd30573"}, "downloads": -1, "filename": "django_sqltemplate-0.4.0-py2-none-any.whl", "has_sig": false, "md5_digest": "febfdaa3ab2690a6a33f3d647438130c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7366, "upload_time": "2016-04-12T16:04:47", "upload_time_iso_8601": "2016-04-12T16:04:47.284937Z", "url": "https://files.pythonhosted.org/packages/eb/ca/91de4e251ec6727fdf540f4b1940af2a09f2b4eb07b7af53b6876b8bac10/django_sqltemplate-0.4.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cdfe4b9b1e2f2a2c312797fec8066f3", "sha256": "5a52865b6b12ba00da9a3a1d8efd5003e9f1a5210a539f0d137de9000aa93958"}, "downloads": -1, "filename": "django-sqltemplate-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5cdfe4b9b1e2f2a2c312797fec8066f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4203, "upload_time": "2016-04-12T16:04:24", "upload_time_iso_8601": "2016-04-12T16:04:24.875959Z", "url": "https://files.pythonhosted.org/packages/af/ed/d805a862e3896a4cb0c39d2feeb096671223e81aea3386f5221214e91274/django-sqltemplate-0.4.0.tar.gz", "yanked": false}], "0.4.1": [], "0.4.2": [{"comment_text": "", "digests": {"md5": "8a325bf64d85c6f8f538ef902570eafd", "sha256": "2938008051c0adbf80de3b3aeb17008789758c5ca92863036dc8093b84981177"}, "downloads": -1, "filename": "django_sqltemplate-0.4.2-py2-none-any.whl", "has_sig": false, "md5_digest": "8a325bf64d85c6f8f538ef902570eafd", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7416, "upload_time": "2016-04-12T17:06:48", "upload_time_iso_8601": "2016-04-12T17:06:48.914398Z", "url": "https://files.pythonhosted.org/packages/3b/1a/8ba79d4b3baacc1b16ed8d252be276c8efbc3f08006bcae3dc8a6a6cf2d3/django_sqltemplate-0.4.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b50f056700e915f5c455fe454ed767c2", "sha256": "23fbcca30b64cc1fe717a8002c6b7a2df72254af09f37f0f4b65f7af7cfa7c77"}, "downloads": -1, "filename": "django-sqltemplate-0.4.2.tar.gz", "has_sig": false, "md5_digest": "b50f056700e915f5c455fe454ed767c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4235, "upload_time": "2016-04-12T17:06:36", "upload_time_iso_8601": "2016-04-12T17:06:36.621074Z", "url": "https://files.pythonhosted.org/packages/99/c3/c435a6987e87737a20f3c0d46d35a618c6c5d012b2b6ebe3a595b3379b08/django-sqltemplate-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "81bba8796e1f217184488fec94b6b5c0", "sha256": "b63ddb0d85eb4bef45b68b327348f55c03910ead88a6bd41ae1dfd5ddf16b72d"}, "downloads": -1, "filename": "django_sqltemplate-0.4.3-py2-none-any.whl", "has_sig": false, "md5_digest": "81bba8796e1f217184488fec94b6b5c0", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7797, "upload_time": "2016-04-15T15:53:23", "upload_time_iso_8601": "2016-04-15T15:53:23.275314Z", "url": "https://files.pythonhosted.org/packages/df/66/8406bc101595eaf3ab6e0d8dd16ad01669f40027e80dba346a71762dfd1b/django_sqltemplate-0.4.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27d98239732556b5e83b2d1c9ad76f22", "sha256": "1159db943b4f3ef2a4ccf6a2c9e48b5af17e1b624a184fcc3bda511f9aa7a688"}, "downloads": -1, "filename": "django-sqltemplate-0.4.3.tar.gz", "has_sig": false, "md5_digest": "27d98239732556b5e83b2d1c9ad76f22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4594, "upload_time": "2016-04-15T15:53:13", "upload_time_iso_8601": "2016-04-15T15:53:13.446093Z", "url": "https://files.pythonhosted.org/packages/d8/eb/c09af7260a39e9c87c197da5f2f89f8f575b98532502e42443f5522e4b5a/django-sqltemplate-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "b4749c98b77e62462876ff466f40fbb8", "sha256": "0182735452294f3951e2957ab2aa4c04f2df53810828f884621126bc97596193"}, "downloads": -1, "filename": "django_sqltemplate-0.4.4-py2-none-any.whl", "has_sig": false, "md5_digest": "b4749c98b77e62462876ff466f40fbb8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7891, "upload_time": "2016-05-11T08:40:48", "upload_time_iso_8601": "2016-05-11T08:40:48.784919Z", "url": "https://files.pythonhosted.org/packages/6e/f1/b6f8245f117008f3ec61ce2eea168ba4d72d805b8e448c5a9eca9b779b2b/django_sqltemplate-0.4.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ad6c8eaeff70087ca08694739fcd3c4", "sha256": "eac30f002397353ae31966ee7cfd63936ee33a019fd1d8b66aab4d6fac17310a"}, "downloads": -1, "filename": "django-sqltemplate-0.4.4.tar.gz", "has_sig": false, "md5_digest": "5ad6c8eaeff70087ca08694739fcd3c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4671, "upload_time": "2016-05-11T08:40:36", "upload_time_iso_8601": "2016-05-11T08:40:36.111513Z", "url": "https://files.pythonhosted.org/packages/4c/ee/4cc8f3b74d3f2dbe7ac4f2854abe3fdcc440c0f885af6d592bf536da81a7/django-sqltemplate-0.4.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c2899d24decacf838461cdb7ec91a35c", "sha256": "dc6af1aed763f1e7de3c631328e373f0ab2eed402265db5ee2cf023cd54d5f8c"}, "downloads": -1, "filename": "django_sqltemplate-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c2899d24decacf838461cdb7ec91a35c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11496, "upload_time": "2017-02-10T10:06:40", "upload_time_iso_8601": "2017-02-10T10:06:40.263312Z", "url": "https://files.pythonhosted.org/packages/da/06/c531689d2632dd4a03d90947434b08852e1a0fa3536fae83d98aefa1def3/django_sqltemplate-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb2a53e723a7e978413d5cafde84b8df", "sha256": "b528b42fbf40f80c305cfdae9f9d5f2e9aa01f7f3727fe5e86bf0cdc09fede38"}, "downloads": -1, "filename": "django-sqltemplate-0.5.0.tar.gz", "has_sig": false, "md5_digest": "cb2a53e723a7e978413d5cafde84b8df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3546, "upload_time": "2017-02-10T10:06:38", "upload_time_iso_8601": "2017-02-10T10:06:38.350579Z", "url": "https://files.pythonhosted.org/packages/14/69/9d47fcb353a382e471582cd5565ddc584df8833410ea2d88e8be554d67d1/django-sqltemplate-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "3f9c94dab04f54d9891db7c6113cc92d", "sha256": "81ef630aa452b9b73e3d4e2e08edd74dcdfdb01aaa25fa20516cef42555916ed"}, "downloads": -1, "filename": "django_sqltemplate-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "3f9c94dab04f54d9891db7c6113cc92d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6379, "upload_time": "2018-09-28T08:24:33", "upload_time_iso_8601": "2018-09-28T08:24:33.042566Z", "url": "https://files.pythonhosted.org/packages/e9/c2/c10194c3567c15a9abf9ca7d18eebc52c8e5f83b34d76095a15ab743c085/django_sqltemplate-0.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9539b9ac594f2fc3ab3c6f9a3ca2c674", "sha256": "c103487e39cc7f359fc95994fa30006620428d4c69be30ded3dcd150d939a523"}, "downloads": -1, "filename": "django-sqltemplate-0.5.1.tar.gz", "has_sig": false, "md5_digest": "9539b9ac594f2fc3ab3c6f9a3ca2c674", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3554, "upload_time": "2018-09-28T08:24:30", "upload_time_iso_8601": "2018-09-28T08:24:30.891895Z", "url": "https://files.pythonhosted.org/packages/50/f4/32aa997b04d0d1253ea2a2c9bcd9a9c92331098b42768ba2575956cdeaed/django-sqltemplate-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "683e84c2b224cfc0229f4c8687221b8e", "sha256": "eef432e8c6b608368b81c05fd1c871226ee968460bcbcda9dc596efa11330e30"}, "downloads": -1, "filename": "django_sqltemplate-0.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "683e84c2b224cfc0229f4c8687221b8e", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 6956, "upload_time": "2019-04-17T23:48:19", "upload_time_iso_8601": "2019-04-17T23:48:19.999109Z", "url": "https://files.pythonhosted.org/packages/5b/86/609babc5b9143bd227a7d1126399588bc27d402446481164d6816e2542ca/django_sqltemplate-0.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1cf6caaaa446e61f3208675f15b3748", "sha256": "be9baeefef72d12f34469bb3bceca40649ad77cb34660470f7ce28a244c988b5"}, "downloads": -1, "filename": "django-sqltemplate-0.5.2.tar.gz", "has_sig": false, "md5_digest": "d1cf6caaaa446e61f3208675f15b3748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3761, "upload_time": "2019-04-17T23:48:18", "upload_time_iso_8601": "2019-04-17T23:48:18.191486Z", "url": "https://files.pythonhosted.org/packages/4a/dc/b4d6d2e199718a0175d2a2d3b8efc6cfafb3e8adafdfd92210825cacf856/django-sqltemplate-0.5.2.tar.gz", "yanked": false}], "0.5.2.post1": [{"comment_text": "", "digests": {"md5": "85f9429b7e32f1e7ce1d581c2ab62316", "sha256": "481219bae24f59e8f1a0ab7801d379a2be8bea463abe1fca3b7845d887420a26"}, "downloads": -1, "filename": "django_sqltemplate-0.5.2.post1-py2-none-any.whl", "has_sig": false, "md5_digest": "85f9429b7e32f1e7ce1d581c2ab62316", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7103, "upload_time": "2019-12-21T22:44:20", "upload_time_iso_8601": "2019-12-21T22:44:20.349132Z", "url": "https://files.pythonhosted.org/packages/b6/3c/93b56f20c4da1db5975f1dd46ee0f05161e532fa7e736444f6f59670a33c/django_sqltemplate-0.5.2.post1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4e0ca8d855dd780d94fba1f3a962363", "sha256": "be67838ab4fdfd36d5bf94e222e6e9b3731957c44013fa6c53b0dd073c79c605"}, "downloads": -1, "filename": "django-sqltemplate-0.5.2.post1.tar.gz", "has_sig": false, "md5_digest": "c4e0ca8d855dd780d94fba1f3a962363", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3826, "upload_time": "2019-12-21T22:44:21", "upload_time_iso_8601": "2019-12-21T22:44:21.585940Z", "url": "https://files.pythonhosted.org/packages/3f/95/b989e2ec4c914f933f558d52c63fea7c3567c9077ef27e121b4071ea8da8/django-sqltemplate-0.5.2.post1.tar.gz", "yanked": false}], "0.5.2.post2": [{"comment_text": "", "digests": {"md5": "6f150fd053e15165c7381c780957037b", "sha256": "d75ed7ae86263867e6aad4654cb6bd30e867d09936c97047491d399e5e5c0f10"}, "downloads": -1, "filename": "django_sqltemplate-0.5.2.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f150fd053e15165c7381c780957037b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9967, "upload_time": "2019-12-21T22:46:01", "upload_time_iso_8601": "2019-12-21T22:46:01.414716Z", "url": "https://files.pythonhosted.org/packages/f0/e3/1a5eae6a8156e41701c06824cd062b90c1bd0702ecfad26e06010468b8a8/django_sqltemplate-0.5.2.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f65c9ddc32caa4990e15a75f32b1ca9", "sha256": "33b4acd916751ec4ec30071292bf4fe0e49f25aaa5928438174de12001337563"}, "downloads": -1, "filename": "django-sqltemplate-0.5.2.post2.tar.gz", "has_sig": false, "md5_digest": "9f65c9ddc32caa4990e15a75f32b1ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8543, "upload_time": "2019-12-21T22:46:03", "upload_time_iso_8601": "2019-12-21T22:46:03.108560Z", "url": "https://files.pythonhosted.org/packages/ea/d3/2ae90301066a09ccb99340ff5c7d91e09b90ac42438a6ec9808ef6ab529c/django-sqltemplate-0.5.2.post2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f150fd053e15165c7381c780957037b", "sha256": "d75ed7ae86263867e6aad4654cb6bd30e867d09936c97047491d399e5e5c0f10"}, "downloads": -1, "filename": "django_sqltemplate-0.5.2.post2-py3-none-any.whl", "has_sig": false, "md5_digest": "6f150fd053e15165c7381c780957037b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9967, "upload_time": "2019-12-21T22:46:01", "upload_time_iso_8601": "2019-12-21T22:46:01.414716Z", "url": "https://files.pythonhosted.org/packages/f0/e3/1a5eae6a8156e41701c06824cd062b90c1bd0702ecfad26e06010468b8a8/django_sqltemplate-0.5.2.post2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f65c9ddc32caa4990e15a75f32b1ca9", "sha256": "33b4acd916751ec4ec30071292bf4fe0e49f25aaa5928438174de12001337563"}, "downloads": -1, "filename": "django-sqltemplate-0.5.2.post2.tar.gz", "has_sig": false, "md5_digest": "9f65c9ddc32caa4990e15a75f32b1ca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8543, "upload_time": "2019-12-21T22:46:03", "upload_time_iso_8601": "2019-12-21T22:46:03.108560Z", "url": "https://files.pythonhosted.org/packages/ea/d3/2ae90301066a09ccb99340ff5c7d91e09b90ac42438a6ec9808ef6ab529c/django-sqltemplate-0.5.2.post2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:00 2020"}