{"info": {"author": "CNLambda", "author_email": "dodo2998@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Freely Distributable", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5"], "description": "Linked Properties\n#################\n\nThis is a python library that allows you to link properties together, so\nif one is changed the others change accordingly.\n\nYou can use this library everywhere, I don't care. Giving credit would\nbe nice, but is optional.\n\nInstalling\n==========\n\n.. code-block:: bash\n\n    $ pip install linked_properties\n\nUsing\n=====\n\nThe library consists of two important parts: ``WatchableProperty`` and\n``LinkableProperty``.\n\nA class named ``ComplexLinkedProperty`` or something like that may be\nadded in the future, it would combine both concepts; but it would need\nadditional work. I added the documentation anyways.\n\n``WatchableProperty``\n---------------------\n\nAs the docstring states:\n\n::\n\n    WatchableProperty is a class that is used to create a property that can be submitted to a LinkableProperty.\n\n    It works exactly the same as \"property\", except for the name.\n\n    If a linked property is reading from another one, than this object may be blocked for writing for the instance in question.\n    To get around this, you may define an \"at_blocked_set\" function, that unlocks the linked property by setting it to None. It may return true or false, if it is true, the __set__ function is called another time.\n\n    Note: the at_blocked_set function can invoke the __set__ function again only once per tried write access!\n\nYou *cannot* use normal properties to make LinkableProperties work.\n\nHere's how you can use them (Spoiler Alert: It's (almost) exactly the same as\nwith the builtin properties):\n* 1st option: Replace the builtin property (kind of). This *should generally not be used*, although it can be used if you are updating an old project to fit the requirements automatically.\n\n.. code-block:: python\n\n    import linked_properties\n    property = linked_properties.WatchableProperty\n    # ... (Your own code)\n\n* 2nd option: Using them with function decorators. This *should* be the preferred way, but some (or just this one, i don't know) editors like PyCharm think you are working with the builtin properties. This may lead to warnings that shouldn't exist.\n\n.. code-block:: python\n\n    import linked_properties\n    # ... (Your own code)\n\n    class SomeName(object): # ... (Your own code)\n        @linked_properties.WatchableProperty\n        def x(self) -> int:\n            return self._x\n\n        @x.setter\n        def x(self, value: int) -> None:\n            self._x = int(value)\n\n            # ... (Your own code)\n\n    # ... (Your own code)\n\n* 3rd option: Using them the ugly way.\n  This is still better than the first one,\n  and it's the only one to make PyCharm stop spawning warnings because of types all over the place.\n\n.. code-block:: python\n\n    import linked_properties\n    # ... (Your own code)\n\n    class SomeName(object): # ... (Your own code)\n        # ... (Your own code)\n\n        def _get_x(self) -> int:\n            return self._x\n\n        def _set_x(self, value: int) -> None:\n            self._x = value\n\n        x = linked_properties.WatchableProperty(_get_x, _set_x)\n\n        # ... (Your own code)\n\n    # ... (Your own code)\n\n\nBut be aware of this: Two things is different.\n\nWhile ``@property_name.setter`` **returns a new instance** for a builtin property because they are **immutable**, a WatchableProperty **returns itself and changes accordingly** because it is **mutable**.\n\nJust try to avoid situations where you need mutable or immutable descriptors, because this behaviour can change in future versions. (I can't even think of a situation where this would help)\n\nAnd you **cannot** define a deleter, although that may change in the future as well.\n\n``LinkableProperty``\n--------------------\n\nAs the docstring states:\n\n::\n\n    The main functionality[.] [...]\n\n\nYou cannot define any getter, setter or deleter. The init function takes a ``WatchableProperty``.\n\nThe definition is simple, and the usage is as well:\n\nIf you have two LinkedProperties, you can set one to be the other (``obj1.l_x = obj2.l_x``). This results in following behaviour:\n\nYou can't set the associated ``WatchableProperty`` of the receiving ``LinkableProperty`` anymore (at least not by ``obj1.x = ...``), and if the associated ``WatchableProperty`` of the sending ``LinkableProperty`` gets changed, the setter of the other ``WatchableProperty`` gets called.\n\nIf you want to unlink them, set the receiving ``LinkableProperty`` to ``None``. (``obj1.l_x = None``)\n\n**Be aware of this:** You should *only* use LinkedProperties if your property *makes sense to be able to get linked*. This excludes properties that count how often something was written to or read, and everything that *changes behaviour after writing the same value or reading twice*.\n\n``LinkableTransmission``\n------------------------\n\nThis is the object the getter of a ``LinkableProperty`` returns, to be able to connect with other LinkedProperties.\n\nYou don't have to care about this one, if you don't want to change how the library works.\nI put this in anyway, because this will be expanded in the next version; allowing you to interact with it like you would interact with the underlying value.\n(-> ``obj1.l_x = obj2.l_x * 2``)\n\nIf the ``ComplexLinkableProperty`` is implemented, using ``transmission.value`` may be important to let it be used by other libraries.\nUsing this technique is also important if you want to set the new value only once, and don't want those two properties to be linked.\n\n``ComplexLinkableProperty``\n---------------------------\n\n***This is not implemented yet.***\n\nThis LinkableProperty will be a ``LinkableProperty``, with a getter and setter that you define,\nand you can assign values to this properties, and not just transmissions.\nIf you want to be able to set the property to a transmission, you have to use the current way of dealing with LinkedProperties.\n\nThis returns a LinkableTransmission if you are receiving, with a ``transmission.value`` gathered by the getter. If you are trying to set the attribute, one of two things will happen:\n\n* If the value is a ``LinkableTransmission`` or a subclass: The property gets linked by the transmission.\n\n* If it isn't: Run the setter with the new value.\n\nThe setter will also run when the value of the linked property changes, or if they are linked.\n\nExample\n-------\n\nI personally can learn better from examples. So here is one:\n\n.. code-block:: python\n\n    import linked_properties\n\n    class Widget(object):\n        def __init__(self, width: int, height: int) -> None:\n            self._width = 0  # type: int\n            self._height = 0  # type: int\n\n            self.width = width\n            self.height = height\n\n        @linked_property.WatchableProperty\n        def width(self) -> int:\n            return self._width\n\n        @width.setter\n        def width(self, new_value: int) -> None:\n            assert isinstance(new_value, int)\n            self._width = new_value\n\n        l_width = linked_properties.LinkableProperty(width)\n\n        # ...  (height; see width)\n\nOr after the ``ComplexLinkableProperty`` arrived:\n\n.. code-block:: python\n\n    import linked_properties\n\n    class Widget(object):\n        def __init__(self, width: int, height: int) - None:\n            self._width = 0  # type: int\n            self._height = 0  # type: int\n\n            self.width = width\n            self.height = height\n\n        @linked_property.ComplexLinkableProperty\n        def width(self) -> int:\n            return self._width\n\n        @width.setter\n        def width(self, new_value: int) -> None:\n            assert isinstance(new_value, int)\n            self._width = new_value\n\nContributing\n============\n\nIf you want to contribute, just email me: dodo2998@gmail.com", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CNLambda/linked_properties/", "keywords": "linking properties", "license": "UNLICENSE", "maintainer": "", "maintainer_email": "", "name": "linked-properties", "package_url": "https://pypi.org/project/linked-properties/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/linked-properties/", "project_urls": {"Homepage": "https://github.com/CNLambda/linked_properties/"}, "release_url": "https://pypi.org/project/linked-properties/1.0.0b1/", "requires_dist": null, "requires_python": "", "summary": "This library allows you to link properties, so if one is changed the others change accordingly.", "version": "1.0.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a python library that allows you to link properties together, so\nif one is changed the others change accordingly.</p>\n<p>You can use this library everywhere, I don\u2019t care. Giving credit would\nbe nice, but is optional.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ pip install linked_properties\n</pre>\n</div>\n<div id=\"using\">\n<h2>Using</h2>\n<p>The library consists of two important parts: <tt>WatchableProperty</tt> and\n<tt>LinkableProperty</tt>.</p>\n<p>A class named <tt>ComplexLinkedProperty</tt> or something like that may be\nadded in the future, it would combine both concepts; but it would need\nadditional work. I added the documentation anyways.</p>\n<div id=\"watchableproperty\">\n<h3><tt>WatchableProperty</tt></h3>\n<p>As the docstring states:</p>\n<pre>WatchableProperty is a class that is used to create a property that can be submitted to a LinkableProperty.\n\nIt works exactly the same as \"property\", except for the name.\n\nIf a linked property is reading from another one, than this object may be blocked for writing for the instance in question.\nTo get around this, you may define an \"at_blocked_set\" function, that unlocks the linked property by setting it to None. It may return true or false, if it is true, the __set__ function is called another time.\n\nNote: the at_blocked_set function can invoke the __set__ function again only once per tried write access!\n</pre>\n<p>You <em>cannot</em> use normal properties to make LinkableProperties work.</p>\n<p>Here\u2019s how you can use them (Spoiler Alert: It\u2019s (almost) exactly the same as\nwith the builtin properties):\n* 1st option: Replace the builtin property (kind of). This <em>should generally not be used</em>, although it can be used if you are updating an old project to fit the requirements automatically.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">linked_properties</span>\n<span class=\"nb\">property</span> <span class=\"o\">=</span> <span class=\"n\">linked_properties</span><span class=\"o\">.</span><span class=\"n\">WatchableProperty</span>\n<span class=\"c1\"># ... (Your own code)</span>\n</pre>\n<ul>\n<li>2nd option: Using them with function decorators. This <em>should</em> be the preferred way, but some (or just this one, i don\u2019t know) editors like PyCharm think you are working with the builtin properties. This may lead to warnings that shouldn\u2019t exist.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">linked_properties</span>\n<span class=\"c1\"># ... (Your own code)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeName</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"c1\"># ... (Your own code)</span>\n    <span class=\"nd\">@linked_properties</span><span class=\"o\">.</span><span class=\"n\">WatchableProperty</span>\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\n\n    <span class=\"nd\">@x</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># ... (Your own code)</span>\n\n<span class=\"c1\"># ... (Your own code)</span>\n</pre>\n<ul>\n<li>3rd option: Using them the ugly way.\nThis is still better than the first one,\nand it\u2019s the only one to make PyCharm stop spawning warnings because of types all over the place.</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">linked_properties</span>\n<span class=\"c1\"># ... (Your own code)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeName</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> <span class=\"c1\"># ... (Your own code)</span>\n    <span class=\"c1\"># ... (Your own code)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">linked_properties</span><span class=\"o\">.</span><span class=\"n\">WatchableProperty</span><span class=\"p\">(</span><span class=\"n\">_get_x</span><span class=\"p\">,</span> <span class=\"n\">_set_x</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ... (Your own code)</span>\n\n<span class=\"c1\"># ... (Your own code)</span>\n</pre>\n<p>But be aware of this: Two things is different.</p>\n<p>While <tt>@property_name.setter</tt> <strong>returns a new instance</strong> for a builtin property because they are <strong>immutable</strong>, a WatchableProperty <strong>returns itself and changes accordingly</strong> because it is <strong>mutable</strong>.</p>\n<p>Just try to avoid situations where you need mutable or immutable descriptors, because this behaviour can change in future versions. (I can\u2019t even think of a situation where this would help)</p>\n<p>And you <strong>cannot</strong> define a deleter, although that may change in the future as well.</p>\n</div>\n<div id=\"linkableproperty\">\n<h3><tt>LinkableProperty</tt></h3>\n<p>As the docstring states:</p>\n<pre>The main functionality[.] [...]\n</pre>\n<p>You cannot define any getter, setter or deleter. The init function takes a <tt>WatchableProperty</tt>.</p>\n<p>The definition is simple, and the usage is as well:</p>\n<p>If you have two LinkedProperties, you can set one to be the other (<tt>obj1.l_x = obj2.l_x</tt>). This results in following behaviour:</p>\n<p>You can\u2019t set the associated <tt>WatchableProperty</tt> of the receiving <tt>LinkableProperty</tt> anymore (at least not by <tt>obj1.x = ...</tt>), and if the associated <tt>WatchableProperty</tt> of the sending <tt>LinkableProperty</tt> gets changed, the setter of the other <tt>WatchableProperty</tt> gets called.</p>\n<p>If you want to unlink them, set the receiving <tt>LinkableProperty</tt> to <tt>None</tt>. (<tt>obj1.l_x = None</tt>)</p>\n<p><strong>Be aware of this:</strong> You should <em>only</em> use LinkedProperties if your property <em>makes sense to be able to get linked</em>. This excludes properties that count how often something was written to or read, and everything that <em>changes behaviour after writing the same value or reading twice</em>.</p>\n</div>\n<div id=\"linkabletransmission\">\n<h3><tt>LinkableTransmission</tt></h3>\n<p>This is the object the getter of a <tt>LinkableProperty</tt> returns, to be able to connect with other LinkedProperties.</p>\n<p>You don\u2019t have to care about this one, if you don\u2019t want to change how the library works.\nI put this in anyway, because this will be expanded in the next version; allowing you to interact with it like you would interact with the underlying value.\n(-&gt; <tt>obj1.l_x = obj2.l_x * 2</tt>)</p>\n<p>If the <tt>ComplexLinkableProperty</tt> is implemented, using <tt>transmission.value</tt> may be important to let it be used by other libraries.\nUsing this technique is also important if you want to set the new value only once, and don\u2019t want those two properties to be linked.</p>\n</div>\n<div id=\"complexlinkableproperty\">\n<h3><tt>ComplexLinkableProperty</tt></h3>\n<p><strong>*This is not implemented yet.*</strong></p>\n<p>This LinkableProperty will be a <tt>LinkableProperty</tt>, with a getter and setter that you define,\nand you can assign values to this properties, and not just transmissions.\nIf you want to be able to set the property to a transmission, you have to use the current way of dealing with LinkedProperties.</p>\n<p>This returns a LinkableTransmission if you are receiving, with a <tt>transmission.value</tt> gathered by the getter. If you are trying to set the attribute, one of two things will happen:</p>\n<ul>\n<li>If the value is a <tt>LinkableTransmission</tt> or a subclass: The property gets linked by the transmission.</li>\n<li>If it isn\u2019t: Run the setter with the new value.</li>\n</ul>\n<p>The setter will also run when the value of the linked property changes, or if they are linked.</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>I personally can learn better from examples. So here is one:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">linked_properties</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Widget</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># type: int</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_height</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># type: int</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">width</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span>\n\n    <span class=\"nd\">@linked_property</span><span class=\"o\">.</span><span class=\"n\">WatchableProperty</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span>\n\n    <span class=\"nd\">@width</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">new_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n\n    <span class=\"n\">l_width</span> <span class=\"o\">=</span> <span class=\"n\">linked_properties</span><span class=\"o\">.</span><span class=\"n\">LinkableProperty</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ...  (height; see width)</span>\n</pre>\n<p>Or after the <tt>ComplexLinkableProperty</tt> arrived:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">linked_properties</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Widget</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># type: int</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_height</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># type: int</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">width</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span>\n\n    <span class=\"nd\">@linked_property</span><span class=\"o\">.</span><span class=\"n\">ComplexLinkableProperty</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span>\n\n    <span class=\"nd\">@width</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">new_value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_width</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you want to contribute, just email me: <a href=\"mailto:dodo2998%40gmail.com\">dodo2998<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 2080939, "releases": {"1.0.0b1": [{"comment_text": "", "digests": {"md5": "6dd9a9c5689492397697203457d9db49", "sha256": "66801798f58e64508c9544fa644cc6e090fcdc5df9bdc5a4199c9de0099c19c0"}, "downloads": -1, "filename": "linked_properties-1.0.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6dd9a9c5689492397697203457d9db49", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11235, "upload_time": "2016-04-24T11:48:01", "upload_time_iso_8601": "2016-04-24T11:48:01.457964Z", "url": "https://files.pythonhosted.org/packages/2d/66/825a314847aeb7e71b8d703234e697d83f41cabddb51ff92e78469660863/linked_properties-1.0.0b1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6dd9a9c5689492397697203457d9db49", "sha256": "66801798f58e64508c9544fa644cc6e090fcdc5df9bdc5a4199c9de0099c19c0"}, "downloads": -1, "filename": "linked_properties-1.0.0b1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6dd9a9c5689492397697203457d9db49", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11235, "upload_time": "2016-04-24T11:48:01", "upload_time_iso_8601": "2016-04-24T11:48:01.457964Z", "url": "https://files.pythonhosted.org/packages/2d/66/825a314847aeb7e71b8d703234e697d83f41cabddb51ff92e78469660863/linked_properties-1.0.0b1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:37 2020"}