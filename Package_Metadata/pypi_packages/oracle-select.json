{"info": {"author": "Jamie Davis", "author_email": "jamjam@umich.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "# Oracle Select\n\nAn easy interface for reading from an Oracle database with cx_Oracle.\n\n\n## To use:\n\nUsage is meant to be simple. Provide your username, password, and host address when you instantiate the DB class. Each select statement opens and closes a new connection. Results are returned as lists of dicts or an empty list if no results are found. For each result, any LOB-like fields are read into strings/bytes for easy handling.\n\n    >>> from oracle_select import DB\n    >>> db = DB(username='your.username', password='password', host='DBNAME.WORLD')\n    >>> sql = \"\"\"select * from ps_table\"\"\"\n    >>> db.select(sql)\n\n\n### Using bind variables\n\nBind variables can be passed to the select statement in two ways:\n\nAs a dictionary when referencing named sql variables:\n\n    >>> sql = \"\"\"select * from ps_table where emplid = :emplid\"\"\"\n    >>> db.select(sql, binds={'emplid': '12345678'})\n\nOr as a tuple when referencing numeric sql variables:\n\n    >>> sql = \"\"\"select * from ps_table where emplid = :1\"\"\"\n    >>> db.select(sql, binds=('12345678',))\n\n\n### Fetch One vs. Many vs. All\n\nBy default all results will be returned. Sometimes, when the result set is large, this is a bad idea. To limit your result set, modify the fetch parameter. Then the select statement will only return N results.\n\n    >>> sql = \"\"\"select * from ps_table\"\"\"\n    >>> db.select(sql, fetch=10)  # fetch first ten results\n    >>> db.select(sql, fetch=0)  # fetch all results (default)\n\n\n### Fetch Large Datasets with a Generator\n\nLarge datasets can be retrieved using the `select_iter` method:\n\n    >>> sql = \"\"\"select * from ps_large_table\"\"\"\n    >>> for chunk in db.select_iter(sql):\n    >>>    for result in chunk:\n    >>>        print(result)\n\n\nResults will be returned in chunks of `fetch_size`. To limit the total number of results, set `max_rows`. By default chunks of 1,000 records will be returned until the entire result set has been consumed (`max_rows = None`).\n\n\n## Utils\n\nThe `oracle_select.utils` module provides some useful tools for working with PeopleSoft, including an interface for polling the process monitor.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "oracle cx_Oracle", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "oracle-select", "package_url": "https://pypi.org/project/oracle-select/", "platform": "", "project_url": "https://pypi.org/project/oracle-select/", "project_urls": null, "release_url": "https://pypi.org/project/oracle-select/0.1.3/", "requires_dist": ["attrdict", "cx-Oracle", "pandas ; extra == 'utils'", "IPython ; extra == 'utils'"], "requires_python": "", "summary": "Easy interface for reading from Oracle databases", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Oracle Select</p>\n<p>An easy interface for reading from an Oracle database with cx_Oracle.</p>\n<p>## To use:</p>\n<p>Usage is meant to be simple. Provide your username, password, and host address when you instantiate the DB class. Each select statement opens and closes a new connection. Results are returned as lists of dicts or an empty list if no results are found. For each result, any LOB-like fields are read into strings/bytes for easy handling.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from oracle_select import DB\n&gt;&gt;&gt; db = DB(username='your.username', password='password', host='DBNAME.WORLD')\n&gt;&gt;&gt; sql = \"\"\"select * from ps_table\"\"\"\n&gt;&gt;&gt; db.select(sql)\n</pre>\n</blockquote>\n<p>### Using bind variables</p>\n<p>Bind variables can be passed to the select statement in two ways:</p>\n<p>As a dictionary when referencing named sql variables:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sql = \"\"\"select * from ps_table where emplid = :emplid\"\"\"\n&gt;&gt;&gt; db.select(sql, binds={'emplid': '12345678'})\n</pre>\n</blockquote>\n<p>Or as a tuple when referencing numeric sql variables:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sql = \"\"\"select * from ps_table where emplid = :1\"\"\"\n&gt;&gt;&gt; db.select(sql, binds=('12345678',))\n</pre>\n</blockquote>\n<p>### Fetch One vs. Many vs. All</p>\n<p>By default all results will be returned. Sometimes, when the result set is large, this is a bad idea. To limit your result set, modify the fetch parameter. Then the select statement will only return N results.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sql = \"\"\"select * from ps_table\"\"\"\n&gt;&gt;&gt; db.select(sql, fetch=10)  # fetch first ten results\n&gt;&gt;&gt; db.select(sql, fetch=0)  # fetch all results (default)\n</pre>\n</blockquote>\n<p>### Fetch Large Datasets with a Generator</p>\n<p>Large datasets can be retrieved using the <cite>select_iter</cite> method:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sql = \"\"\"select * from ps_large_table\"\"\"\n&gt;&gt;&gt; for chunk in db.select_iter(sql):\n&gt;&gt;&gt;    for result in chunk:\n&gt;&gt;&gt;        print(result)\n</pre>\n</blockquote>\n<p>Results will be returned in chunks of <cite>fetch_size</cite>. To limit the total number of results, set <cite>max_rows</cite>. By default chunks of 1,000 records will be returned until the entire result set has been consumed (<cite>max_rows = None</cite>).</p>\n<p>## Utils</p>\n<p>The <cite>oracle_select.utils</cite> module provides some useful tools for working with PeopleSoft, including an interface for polling the process monitor.</p>\n\n          </div>"}, "last_serial": 5422300, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a76712113fdb48654ef3bba9e6ba5a54", "sha256": "0d22aada38d5c6a2713c7701720a7379fe2671c47855e2d40daf6c330fc4940a"}, "downloads": -1, "filename": "oracle_select-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a76712113fdb48654ef3bba9e6ba5a54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3484, "upload_time": "2018-12-19T22:49:44", "upload_time_iso_8601": "2018-12-19T22:49:44.913573Z", "url": "https://files.pythonhosted.org/packages/f7/4f/180b90c8f905e15efcca19e72e671830f48f404a3ca8a1b501ec59dcd49b/oracle_select-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f1789b381469d4d4896caf61b9c3fb0", "sha256": "2c3b1c0cad89e3a9982bb635bb4e3bb5abf10415ff1b91f332c6951c2d59d568"}, "downloads": -1, "filename": "oracle_select-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9f1789b381469d4d4896caf61b9c3fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3128, "upload_time": "2018-12-19T22:49:47", "upload_time_iso_8601": "2018-12-19T22:49:47.004569Z", "url": "https://files.pythonhosted.org/packages/27/ba/6950c35a1307e89ef52e8af13659e3dc829f8ce56c9d9fe823823cffc076/oracle_select-0.1.1.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "78c01a80464ff848e53bc490c7a3b85c", "sha256": "8733f7ec305d06a65bdc4380750fff5cec8d55517bd5b76e5d9615cb4a37cfec"}, "downloads": -1, "filename": "oracle_select-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "78c01a80464ff848e53bc490c7a3b85c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3504, "upload_time": "2019-06-19T19:26:52", "upload_time_iso_8601": "2019-06-19T19:26:52.646638Z", "url": "https://files.pythonhosted.org/packages/46/9d/b63ea968fd110ad7df491758f7efbab487ca8ff689f867d25ebd8ce17e7c/oracle_select-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6e44b9eebbcbded39627d23518cfab9", "sha256": "02ef6053f905d3d6afc41bd2c3e4f13458ee249ff14d0f20c33370b6d9509a46"}, "downloads": -1, "filename": "oracle_select-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a6e44b9eebbcbded39627d23518cfab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3155, "upload_time": "2019-06-19T19:26:55", "upload_time_iso_8601": "2019-06-19T19:26:55.161340Z", "url": "https://files.pythonhosted.org/packages/a7/14/99426493de6f72c4cfe1bce679db94958047f913decbc9525c4fe75e9c2f/oracle_select-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "78c01a80464ff848e53bc490c7a3b85c", "sha256": "8733f7ec305d06a65bdc4380750fff5cec8d55517bd5b76e5d9615cb4a37cfec"}, "downloads": -1, "filename": "oracle_select-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "78c01a80464ff848e53bc490c7a3b85c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3504, "upload_time": "2019-06-19T19:26:52", "upload_time_iso_8601": "2019-06-19T19:26:52.646638Z", "url": "https://files.pythonhosted.org/packages/46/9d/b63ea968fd110ad7df491758f7efbab487ca8ff689f867d25ebd8ce17e7c/oracle_select-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6e44b9eebbcbded39627d23518cfab9", "sha256": "02ef6053f905d3d6afc41bd2c3e4f13458ee249ff14d0f20c33370b6d9509a46"}, "downloads": -1, "filename": "oracle_select-0.1.3.tar.gz", "has_sig": false, "md5_digest": "a6e44b9eebbcbded39627d23518cfab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3155, "upload_time": "2019-06-19T19:26:55", "upload_time_iso_8601": "2019-06-19T19:26:55.161340Z", "url": "https://files.pythonhosted.org/packages/a7/14/99426493de6f72c4cfe1bce679db94958047f913decbc9525c4fe75e9c2f/oracle_select-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:53 2020"}