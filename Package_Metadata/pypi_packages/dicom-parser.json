{"info": {"author": "Zvi Baratz", "author_email": "baratzz@pm.me", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![Documentation Status](https://readthedocs.org/projects/dicom-parser/badge/?version=latest)](http://dicom-parser.readthedocs.io/?badge=latest)\n[![PyPI version](https://img.shields.io/pypi/v/dicom_parser.svg)](https://pypi.python.org/pypi/pylabber/)\n[![PyPI status](https://img.shields.io/pypi/status/dicom_parser.svg)](https://pypi.python.org/pypi/pylabber/)\n![Coverage](coverage.svg)\n\n# dicom_parser\n\n*dicom_parser* is a utility python package meant to facilitate access to\n[DICOM](https://www.dicomstandard.org/) header information by extending the functionality of\n*[pydicom]*.\n\nEssentially, *dicom_parser* uses [DICOM](https://www.dicomstandard.org/)'s\n[data-element](https://northstar-www.dartmouth.edu/doc/idl/html_6.2/DICOM_Attributes.html)\n[value-representation (VR)](http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.2.html),\nas well as prior knowledge on vendor-specific private tags or encoding schemes,\nin order to transform them to more \"pythonic\" data structures when possible.\n\nFor more information, please see [the documentation].\n\n---\n\n## Installation\n\nTo install the latest version of `dicom_parser`, simply run:\n\n```shell\n    pip install dicom_parser\n```\n\n---\n\n## Quickstart\n\nThe most basic usage case is reading a single DICOM image (*.dcm* file) as\nan [Image](https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.image.Image)\ninstance.\n\n```python\n    from dicom_parser import Image\n\n    # Create a DICOM Image object\n    image = Image('/path/to/dicom/file.dcm')\n```\n\n\n### Coversion to Python's native types\n\n*dicom_parser* provides *dict*-like access to the parsed values of the\n[header](https://dcm4che.atlassian.net/wiki/spaces/d2/pages/1835038/A+Very+Basic+DICOM+Introduction)'s\ndata-elements. The raw values as read by *[pydicom]* remain accessible through the *raw* attribute.\n\n#### Examples\n\nDecimal String (DS) to *float* using the [Header] class's\n[get](https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header.get)\nmethod:\n\n```python\n    raw_value = image.header.raw['ImagingFrequency'].value\n    raw_value\n    >> \"123.25993\"\n    type(raw_value)\n    >> str\n\n    parsed_value = image.header.get('ImagingFrequency')\n    parsed_value\n    >> 123.25993\n    type(parsed_value)\n    >> float\n```\n\nAge String (AS) to *float*:\n\n```python\n    raw_value = image.header.raw['PatientAge'].value\n    raw_value\n    >> \"027Y\"\n    type(raw_value)\n    >> str\n\n    parsed_value = image.header.get('PatientAge')\n    parsed_value\n    >> 27.0\n    type(parsed_value)\n    >> float\n```\n\nDate String (DA) to *[datetime.date]* using the [Header] class's\nindexing operator/subscript notation:\n\n```python\n\n    raw_value = image.header.raw['PatientBirthDate'].value\n    raw_value\n    >> \"19901214\"\n    type(raw_value)\n    >> str\n\n    parsed_value = image.header['PatientBirthDate']\n    parsed_value\n    >> datetime.date(1990, 12, 14)\n    type(parsed_value)\n    >> datetime.date\n```\n\nEt cetera.\n\n>   The *dict*-like functionality also includes safe getting:\n>\n>   ```python\n>       image.header.get('MissingKey')\n>       >> None\n>       image.header.get('MissingKey', 'DefaultValue')\n>       >> 'DefaultValue'\n>   ```\n>\n>   As well as raising a KeyError for missing keys with the indexing operator:\n>\n>   ```python\n>       image.header['MissingKey']\n>       >> ...\n>       >> KeyError: \"The keyword: 'MissingKey' does not exist in the header!\"\n>   ```\n\n\n### Read DICOM series directory as a [Series]\n\n\nAnother useful class this package offers is the [Series] class:\n\n```python\n    from dicom_parser import Series\n\n    series = Series('/path/to/dicom/series/')\n\n    # Read stacked pixel arrays as a 3D volume\n    type(series.data)\n    >>> numpy.ndarray\n    series.data.shape\n    >> (224, 224, 208)\n\n    # Access the underlying Image instances\n    series.images[6].header.get('InstanceNumber')\n    >> 7    # instance numbers are 1-indexed\n```\n\nReading Siemens 4D data\n[encoded as mosaics](https://nipy.org/nibabel/dicom/dicom_mosaic.html)\nis also supported:\n\n```python\n    fmri_series = Series('/path/to/dicom/fmri/')\n    fmri_series.data.shape\n    >> (96, 96, 64, 200)\n```\n\nFor more information, please see [the documentation].\n\n\n[datetime.date]: https://docs.python.org/3/library/datetime.html#available-types\n[Header]: https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header\n[pydicom]: https://pydicom.github.io/\n[Series]: https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.series.Series\n[the documentation]: http://dicom-parser.readthedocs.io/?badge=latest\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ZviBaratz/dicom_parser", "keywords": "dicom dcm mri neuroimaging", "license": "AGPLv3", "maintainer": "", "maintainer_email": "", "name": "dicom-parser", "package_url": "https://pypi.org/project/dicom-parser/", "platform": "", "project_url": "https://pypi.org/project/dicom-parser/", "project_urls": {"Homepage": "https://github.com/ZviBaratz/dicom_parser"}, "release_url": "https://pypi.org/project/dicom-parser/0.1.2/", "requires_dist": ["pydicom (~=1.4)", "nibabel (~=3.0)", "numpy (~=1.18)", "black (==19.10b0) ; extra == 'dev'", "coverage (~=5.0) ; extra == 'dev'", "doc8 (~=0.8) ; extra == 'dev'", "flake8 (~=3.7) ; extra == 'dev'", "ipython (~=7.12) ; extra == 'dev'", "pytest (~=5.3) ; extra == 'dev'", "sphinx (~=2.4) ; extra == 'dev'", "sphinx-rtd-theme (~=0.4) ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "DICOM files parser meant to facilitate data access.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"http://dicom-parser.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70bacc4999c2178ee1152157b73ddb14f0b42231/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6469636f6d2d7061727365722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.python.org/pypi/pylabber/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f30b4aba59fac46fb58e792fb792f950de3f689c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6469636f6d5f7061727365722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pylabber/\" rel=\"nofollow\"><img alt=\"PyPI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47ab132e9e55a6a38e2efad36c9ab49b1cad0abc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6469636f6d5f7061727365722e737667\"></a>\n<img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a64f84ff993066f90d9885f5981b728963c18e7/636f7665726167652e737667\"></p>\n<h1>dicom_parser</h1>\n<p><em>dicom_parser</em> is a utility python package meant to facilitate access to\n<a href=\"https://www.dicomstandard.org/\" rel=\"nofollow\">DICOM</a> header information by extending the functionality of\n<em><a href=\"https://pydicom.github.io/\" rel=\"nofollow\">pydicom</a></em>.</p>\n<p>Essentially, <em>dicom_parser</em> uses <a href=\"https://www.dicomstandard.org/\" rel=\"nofollow\">DICOM</a>'s\n<a href=\"https://northstar-www.dartmouth.edu/doc/idl/html_6.2/DICOM_Attributes.html\" rel=\"nofollow\">data-element</a>\n<a href=\"http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.2.html\" rel=\"nofollow\">value-representation (VR)</a>,\nas well as prior knowledge on vendor-specific private tags or encoding schemes,\nin order to transform them to more \"pythonic\" data structures when possible.</p>\n<p>For more information, please see <a href=\"http://dicom-parser.readthedocs.io/?badge=latest\" rel=\"nofollow\">the documentation</a>.</p>\n<hr>\n<h2>Installation</h2>\n<p>To install the latest version of <code>dicom_parser</code>, simply run:</p>\n<pre>    pip install dicom_parser\n</pre>\n<hr>\n<h2>Quickstart</h2>\n<p>The most basic usage case is reading a single DICOM image (<em>.dcm</em> file) as\nan <a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.image.Image\" rel=\"nofollow\">Image</a>\ninstance.</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">dicom_parser</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n\n    <span class=\"c1\"># Create a DICOM Image object</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/dicom/file.dcm'</span><span class=\"p\">)</span>\n</pre>\n<h3>Coversion to Python's native types</h3>\n<p><em>dicom_parser</em> provides <em>dict</em>-like access to the parsed values of the\n<a href=\"https://dcm4che.atlassian.net/wiki/spaces/d2/pages/1835038/A+Very+Basic+DICOM+Introduction\" rel=\"nofollow\">header</a>'s\ndata-elements. The raw values as read by <em><a href=\"https://pydicom.github.io/\" rel=\"nofollow\">pydicom</a></em> remain accessible through the <em>raw</em> attribute.</p>\n<h4>Examples</h4>\n<p>Decimal String (DS) to <em>float</em> using the <a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header\" rel=\"nofollow\">Header</a> class's\n<a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header.get\" rel=\"nofollow\">get</a>\nmethod:</p>\n<pre>    <span class=\"n\">raw_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">[</span><span class=\"s1\">'ImagingFrequency'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"n\">raw_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"123.25993\"</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">raw_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"nb\">str</span>\n\n    <span class=\"n\">parsed_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'ImagingFrequency'</span><span class=\"p\">)</span>\n    <span class=\"n\">parsed_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"mf\">123.25993</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">parsed_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"nb\">float</span>\n</pre>\n<p>Age String (AS) to <em>float</em>:</p>\n<pre>    <span class=\"n\">raw_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">[</span><span class=\"s1\">'PatientAge'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"n\">raw_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"027Y\"</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">raw_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"nb\">str</span>\n\n    <span class=\"n\">parsed_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'PatientAge'</span><span class=\"p\">)</span>\n    <span class=\"n\">parsed_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"mf\">27.0</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">parsed_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"nb\">float</span>\n</pre>\n<p>Date String (DA) to <em><a href=\"https://docs.python.org/3/library/datetime.html#available-types\" rel=\"nofollow\">datetime.date</a></em> using the <a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.header.Header\" rel=\"nofollow\">Header</a> class's\nindexing operator/subscript notation:</p>\n<pre>    <span class=\"n\">raw_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">[</span><span class=\"s1\">'PatientBirthDate'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"n\">raw_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"s2\">\"19901214\"</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">raw_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"nb\">str</span>\n\n    <span class=\"n\">parsed_value</span> <span class=\"o\">=</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">[</span><span class=\"s1\">'PatientBirthDate'</span><span class=\"p\">]</span>\n    <span class=\"n\">parsed_value</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">)</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">parsed_value</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>\n</pre>\n<p>Et cetera.</p>\n<blockquote>\n<p>The <em>dict</em>-like functionality also includes safe getting:</p>\n<pre>    <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'MissingKey'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"kc\">None</span>\n    <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'MissingKey'</span><span class=\"p\">,</span> <span class=\"s1\">'DefaultValue'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"s1\">'DefaultValue'</span>\n</pre>\n<p>As well as raising a KeyError for missing keys with the indexing operator:</p>\n<pre>    <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">[</span><span class=\"s1\">'MissingKey'</span><span class=\"p\">]</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"o\">...</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span> <span class=\"s2\">\"The keyword: 'MissingKey' does not exist in the header!\"</span>\n</pre>\n</blockquote>\n<h3>Read DICOM series directory as a <a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.series.Series\" rel=\"nofollow\">Series</a></h3>\n<p>Another useful class this package offers is the <a href=\"https://dicom-parser.readthedocs.io/en/latest/modules/dicom_parser.html#dicom_parser.series.Series\" rel=\"nofollow\">Series</a> class:</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">dicom_parser</span> <span class=\"kn\">import</span> <span class=\"n\">Series</span>\n\n    <span class=\"n\">series</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/dicom/series/'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Read stacked pixel arrays as a 3D volume</span>\n    <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>\n    <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">224</span><span class=\"p\">,</span> <span class=\"mi\">208</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Access the underlying Image instances</span>\n    <span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">images</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'InstanceNumber'</span><span class=\"p\">)</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">7</span>    <span class=\"c1\"># instance numbers are 1-indexed</span>\n</pre>\n<p>Reading Siemens 4D data\n<a href=\"https://nipy.org/nibabel/dicom/dicom_mosaic.html\" rel=\"nofollow\">encoded as mosaics</a>\nis also supported:</p>\n<pre>    <span class=\"n\">fmri_series</span> <span class=\"o\">=</span> <span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/dicom/fmri/'</span><span class=\"p\">)</span>\n    <span class=\"n\">fmri_series</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n    <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">96</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre>\n<p>For more information, please see <a href=\"http://dicom-parser.readthedocs.io/?badge=latest\" rel=\"nofollow\">the documentation</a>.</p>\n\n          </div>"}, "last_serial": 6740617, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6ac3e76055159178d9c9d96925a8641a", "sha256": "cde8834be8ff8fe37439ce34423c8a5681f2c83757acbf55e8df2ade99161623"}, "downloads": -1, "filename": "dicom_parser-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac3e76055159178d9c9d96925a8641a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 48411, "upload_time": "2020-02-23T15:21:24", "upload_time_iso_8601": "2020-02-23T15:21:24.390473Z", "url": "https://files.pythonhosted.org/packages/ee/21/bd76959e2f678e4326917833ddaa5fa968f44a5d97b3d21adff8215ff617/dicom_parser-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecf50e7b52ca06f5e129718afbfbb0df", "sha256": "6c95748c27c626846aa69e212ce23377bce4cbaa49e6c49a44bbffdc1a38ca71"}, "downloads": -1, "filename": "dicom_parser-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ecf50e7b52ca06f5e129718afbfbb0df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23875, "upload_time": "2020-02-23T15:21:27", "upload_time_iso_8601": "2020-02-23T15:21:27.021593Z", "url": "https://files.pythonhosted.org/packages/38/c0/3931bed9683329926a25dbab121bc369f0b4fbbdfc2f4bb96a04ac2b67a6/dicom_parser-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a09e43d08565c35c4b80f05a3488a022", "sha256": "3e5240a64a3264e28a9314a66b880ace6a8fdee8475cde9dc5d1ac626189ce9c"}, "downloads": -1, "filename": "dicom_parser-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a09e43d08565c35c4b80f05a3488a022", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 52671, "upload_time": "2020-02-25T19:55:32", "upload_time_iso_8601": "2020-02-25T19:55:32.921153Z", "url": "https://files.pythonhosted.org/packages/96/15/2b74abc6fcd348a6dc77b95f9af3baef20242f35d1972ef00117ce0c8b0a/dicom_parser-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ade8683aed1c6e19a83de3e0d3e7a076", "sha256": "57320b977f5088a90caed5554b01225422a2cfd3ac75099e6797fee027e0c143"}, "downloads": -1, "filename": "dicom_parser-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ade8683aed1c6e19a83de3e0d3e7a076", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29205, "upload_time": "2020-02-25T19:55:35", "upload_time_iso_8601": "2020-02-25T19:55:35.102579Z", "url": "https://files.pythonhosted.org/packages/ed/6a/f8cb098755e81d7f3426e9f48e3bb766b658395ba10fff6d74329021edb6/dicom_parser-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "af0e1f05a96f9498e3f16755da1fc2cf", "sha256": "6fb01c0325d4a5b4035110f5202fbd83fc1241af1eecd9c5caa3246b06daf56e"}, "downloads": -1, "filename": "dicom_parser-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "af0e1f05a96f9498e3f16755da1fc2cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55098, "upload_time": "2020-03-03T13:20:45", "upload_time_iso_8601": "2020-03-03T13:20:45.390781Z", "url": "https://files.pythonhosted.org/packages/01/6d/f8935d91ab29ee1998035d003cf08127c01eb3704f7923a42dc17c282dc0/dicom_parser-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f55169e9d6275bf39afb6ce40f334410", "sha256": "d14a005ff6965e002cc9c2ec6154e3fc83b673c5739907505d74e9216b0408cb"}, "downloads": -1, "filename": "dicom_parser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f55169e9d6275bf39afb6ce40f334410", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29054, "upload_time": "2020-03-03T13:20:48", "upload_time_iso_8601": "2020-03-03T13:20:48.098804Z", "url": "https://files.pythonhosted.org/packages/a3/9c/c8cf580a07ac65cdb956e13c5295606e5c0acacddbade0614199d0c257d3/dicom_parser-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "af0e1f05a96f9498e3f16755da1fc2cf", "sha256": "6fb01c0325d4a5b4035110f5202fbd83fc1241af1eecd9c5caa3246b06daf56e"}, "downloads": -1, "filename": "dicom_parser-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "af0e1f05a96f9498e3f16755da1fc2cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55098, "upload_time": "2020-03-03T13:20:45", "upload_time_iso_8601": "2020-03-03T13:20:45.390781Z", "url": "https://files.pythonhosted.org/packages/01/6d/f8935d91ab29ee1998035d003cf08127c01eb3704f7923a42dc17c282dc0/dicom_parser-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f55169e9d6275bf39afb6ce40f334410", "sha256": "d14a005ff6965e002cc9c2ec6154e3fc83b673c5739907505d74e9216b0408cb"}, "downloads": -1, "filename": "dicom_parser-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f55169e9d6275bf39afb6ce40f334410", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29054, "upload_time": "2020-03-03T13:20:48", "upload_time_iso_8601": "2020-03-03T13:20:48.098804Z", "url": "https://files.pythonhosted.org/packages/a3/9c/c8cf580a07ac65cdb956e13c5295606e5c0acacddbade0614199d0c257d3/dicom_parser-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:34 2020"}