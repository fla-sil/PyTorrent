{"info": {"author": "Kevin L. Mitchell", "author_email": "kevin.mitchell@rackspace.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "SimpleRPC\n=========\n\nSimpleRPC is a simple RPC package for Python, supporting both client\nand server functions through definition of a single class.  To\nimplement a client and server, merely extend the ``SimpleRPC`` class\nand define the RPC functions as methods of this class, decorated with\nthe ``@remote`` decorator.  (Note that the methods ``close()``,\n``ping()``, ``connect()``, ``listen()``, and ``serve()`` are reserved,\nas are the ``host``, ``port``, ``authkey``, ``mode``, and ``conn``\ninstance attributes and the ``connection_class`` class attribute.)  To\nrun the server, simply call the ``listen()`` method, which will loop\nforever, accepting clients and using `eventlet`_ to spawn a thread to\nserve them (implemented using the ``serve()`` method).  For the\nclient, simply calling the RPC method is sufficient, but the\nconnection can be explicitly initialized by calling the ``connect()``\nmethod.  The connection can be closed by calling ``close()``, and a\nround-trip time can be obtained by using the ``ping()`` method.  Note\nthat all function arguments and results must be serializable by the\nPython ``json`` package.  (RPC methods may raise exceptions, as long\nas the exception class is available on the client side; if it is not,\nthe exception will turn into an ``ImportError``.)\n\nNote that SimpleRPC is so simple that no effort is made to use a\nsecure connection type, such as SSL.  For this reason, the server\nshould be started on 127.0.0.1, to prevent snooping.  (Clients do send\nan \"authkey\" to the server, which the server uses to authorize the\nclient, but this \"authkey\" is sent as plain text.)  It is possible to\nuse a more secure connection technology, such as SSL, by extending the\n``Connection`` class and setting the ``connection_class`` class\nattribute of the ``SimpleRPC`` subclass to that ``Connection``\nsubclass.\n\n.. _eventlet: http://eventlet.net/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/klmitch/simplerpc", "keywords": null, "license": "Apache License (2.0)", "maintainer": null, "maintainer_email": null, "name": "simplerpc", "package_url": "https://pypi.org/project/simplerpc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/simplerpc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/klmitch/simplerpc"}, "release_url": "https://pypi.org/project/simplerpc/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple RPC", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>SimpleRPC is a simple RPC package for Python, supporting both client\nand server functions through definition of a single class.  To\nimplement a client and server, merely extend the <tt>SimpleRPC</tt> class\nand define the RPC functions as methods of this class, decorated with\nthe <tt>@remote</tt> decorator.  (Note that the methods <tt>close()</tt>,\n<tt>ping()</tt>, <tt>connect()</tt>, <tt>listen()</tt>, and <tt>serve()</tt> are reserved,\nas are the <tt>host</tt>, <tt>port</tt>, <tt>authkey</tt>, <tt>mode</tt>, and <tt>conn</tt>\ninstance attributes and the <tt>connection_class</tt> class attribute.)  To\nrun the server, simply call the <tt>listen()</tt> method, which will loop\nforever, accepting clients and using <a href=\"http://eventlet.net/\" rel=\"nofollow\">eventlet</a> to spawn a thread to\nserve them (implemented using the <tt>serve()</tt> method).  For the\nclient, simply calling the RPC method is sufficient, but the\nconnection can be explicitly initialized by calling the <tt>connect()</tt>\nmethod.  The connection can be closed by calling <tt>close()</tt>, and a\nround-trip time can be obtained by using the <tt>ping()</tt> method.  Note\nthat all function arguments and results must be serializable by the\nPython <tt>json</tt> package.  (RPC methods may raise exceptions, as long\nas the exception class is available on the client side; if it is not,\nthe exception will turn into an <tt>ImportError</tt>.)</p>\n<p>Note that SimpleRPC is so simple that no effort is made to use a\nsecure connection type, such as SSL.  For this reason, the server\nshould be started on 127.0.0.1, to prevent snooping.  (Clients do send\nan \u201cauthkey\u201d to the server, which the server uses to authorize the\nclient, but this \u201cauthkey\u201d is sent as plain text.)  It is possible to\nuse a more secure connection technology, such as SSL, by extending the\n<tt>Connection</tt> class and setting the <tt>connection_class</tt> class\nattribute of the <tt>SimpleRPC</tt> subclass to that <tt>Connection</tt>\nsubclass.</p>\n\n          </div>"}, "last_serial": 799591, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6c4c1718d8d16c9249fe551ef59510a0", "sha256": "2ef29501e850e0f7e5af9ea2232011157c544d5759d72297d8b901f49b07e493"}, "downloads": -1, "filename": "simplerpc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6c4c1718d8d16c9249fe551ef59510a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15000, "upload_time": "2012-09-05T16:08:31", "upload_time_iso_8601": "2012-09-05T16:08:31.872277Z", "url": "https://files.pythonhosted.org/packages/8c/7b/c7dc49973e45e3a90d490f46a795415601681e481e887ad5453116b00c13/simplerpc-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c4c1718d8d16c9249fe551ef59510a0", "sha256": "2ef29501e850e0f7e5af9ea2232011157c544d5759d72297d8b901f49b07e493"}, "downloads": -1, "filename": "simplerpc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6c4c1718d8d16c9249fe551ef59510a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15000, "upload_time": "2012-09-05T16:08:31", "upload_time_iso_8601": "2012-09-05T16:08:31.872277Z", "url": "https://files.pythonhosted.org/packages/8c/7b/c7dc49973e45e3a90d490f46a795415601681e481e887ad5453116b00c13/simplerpc-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:15 2020"}