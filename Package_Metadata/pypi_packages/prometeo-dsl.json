{"info": {"author": "Andrea Zanelli", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"https://github.com/zanellia/prometeo/blob/master/logo/logo.png\" align=\"left\"\n     alt=\"prometeo logo by Andrea Zanelli\" width=\"80\" height=\"120\">\n\n![Travis Status](https://travis-ci.org/zanellia/prometeo.svg?branch=master) [![PyPI version fury.io](https://badge.fury.io/py/prometeo-dsl.svg)](https://pypi.python.org/pypi/ansicolortags/)\n\nThis is prometeo, a modeling tool for embedded high-performance computing. prometeo provides a \ndomain specific language (DSL) based on a subset of the Python language that allows \none to conveniently write scientific computing programs in a high-level language (Python itself) that can be transpiled\nto high-performance self-contained C code easily deployable on embedded devices.\n\n### features\n- __Python compatible syntax__ : prometeo is a DSL embedded into the Python language. \nprometeo programs can be executed from the Python interpreter.\n- __efficient__ : prometeo programs transpile to high-performance C code.\n- __statically typed__ : prometeo uses Python's native type hints to strictly enforce static typing.\n- __deterministic memory usage__ : a specific program structure is required and enforced through static analysis. In this way\nprometeo transpiled programs have a guaranteed maximum heap usage.\n- __fast memory menagement__ : thanks to its static analysis, prometeo can avoid allocating\nand garbage-collecting memory, resulting in faster and safer execution.\n- __self-contained and embeddable__ : unlike other similar tools and languages, prometeo targets specifically embedded applications and programs \nwritten in prometeo transpiled to self-contained C code that does not require linking against \nthe Python run-time library.\n\n### PyPI installation\n\nprometeo can be installed through PyPI with `pip install prometeo-dsl`.\n\n### manual installation\nIf you want to install prometeo building the sources on your local machine you can proceed as follows:\n\n- Run `git submodule update --init` to clone the submodules.\n- Run `make install_shared` from `<prometeo_root>/prometeo/cpmt` to compile and install the shared library associated with the C backend. Notice that the default installation path is `<prometeo_root>/prometeo/cpmt/install`.\n- You need Python 3.7. or later.\n- Optional: to keep things clean you can setup a virtual environment with `virtualenv --python=<path_to_python3.7 <path_to_new_virtualenv>`.\n- Run `pip install -e .` from `<prometeo_root>` to install the Python package.\n\nFinally, you can run the examples in `<root>/examples` with `pmt <example_name>.py --cgen=<True/False>`, where the `--cgen` flag determines whether the code is executed by the Python interpreter or C code is generated compiled and run.\n\n### a simple example\n\nThe Python code\n```python\nfrom prometeo import *\n\nn : dims = 10\n\ndef main() -> int:\n\n    A: pmat = pmat(n, n)\n    for i in range(10):\n        for j in range(10):\n            A[i, j] = 1.0\n\n    B: pmat = pmat(n, n)\n    for i in range(10):\n        B[0, i] = 2.0\n\n\n    C: pmat = pmat(n, n)\n    C = A * B\n    pmat_print(C)\n    return 0\n```\ncan be run by the standard Python interpreter (version >3.6 required) and it \nwill perform the described linear algebra operations using the command `pmt simple_example.py --cgen=False`. \nAt the same time, the code can be parsed by prometeo and its abstract syntax tree (AST) analyzed in order\nto generate the following high-performance C code:\n```c\n#include \"stdlib.h\"\n#include \"simple_example.h\"\nvoid * ___c_pmt_8_heap;\nvoid * ___c_pmt_64_heap;\nvoid * ___c_pmt_8_heap_head;\nvoid * ___c_pmt_64_heap_head;\n\n#include \"prometeo.h\"\nint main() {\n    ___c_pmt_8_heap = malloc(10000); \n    ___c_pmt_8_heap_head = ___c_pmt_8_heap;\n    char * pmem_ptr = (char *)___c_pmt_8_heap;\n    align_char_to(8, &pmem_ptr);\n    ___c_pmt_8_heap = pmem_ptr;\n    ___c_pmt_64_heap = malloc(1000000);\n    ___c_pmt_64_heap_head = ___c_pmt_64_heap;\n    pmem_ptr = (char *)___c_pmt_64_heap;\n    align_char_to(64, &pmem_ptr);\n    ___c_pmt_64_heap = pmem_ptr;\n\tvoid *callee_pmt_8_heap = ___c_pmt_8_heap;\n\tvoid *callee_pmt_64_heap = ___c_pmt_64_heap;\n\n    struct pmat * A = c_pmt_create_pmat(n, n);\n    for(int i = 0; i < 10; i++) {\n        for(int j = 0; j < 10; j++) {\n            c_pmt_pmat_set_el(A, i, j, 1.0);\n    }\n\n    }\n\n    struct pmat * B = c_pmt_create_pmat(n, n);\n    for(int i = 0; i < 10; i++) {\n        c_pmt_pmat_set_el(B, 0, i, 2.0);\n    }\n\n    struct pmat * C = c_pmt_create_pmat(n, n);\n    c_pmt_pmat_fill(C, 0.0);\n    c_pmt_gemm_nn(A, B, C, C);\n    c_pmt_pmat_print(C);\n\t___c_pmt_8_heap = callee_pmt_8_heap;\n\t___c_pmt_64_heap = callee_pmt_64_heap;\n\n\tfree(___c_pmt_8_heap_head);\n\tfree(___c_pmt_64_heap_head);\n\treturn 0;\n}\n```\nwhich relies on the high-performance linear algebra package BLASFEO. The generated code will be readily compiled and run with when running `pmt simple_example.py --cgen=True`.\n\n### a more advanced example (Riccati factorization)\n```python\nfrom prometeo import *\n\nsizes: dimv = [[2,2], [2,2], [2,2], [2,2], [2,2]]\nnx: dims  = 2\nnxu: dims = 4\nnu: dims  = 2\nN:  dims  = 5\n\nclass qp_data:\n    A: List = plist(pmat, sizes)\n    B: List = plist(pmat, sizes)\n    Q: List = plist(pmat, sizes)\n    R: List = plist(pmat, sizes)\n    P: List = plist(pmat, sizes)\n\n    fact: List = plist(pmat, sizes)\n\n    def factorize(self) -> None:\n        M: pmat = pmat(nxu, nxu)\n        Mxx: pmat = pmat(nx, nx)\n        L: pmat = pmat(nxu, nxu)\n        Q: pmat = pmat(nx, nx)\n        R: pmat = pmat(nu, nu)\n        BA: pmat = pmat(nx, nxu)\n        BAtP: pmat = pmat(nxu, nx)\n        pmat_copy(self.Q[N-1], self.P[N-1])\n\n        for i in range(1, N):\n            pmat_hcat(self.B[N-i], self.A[N-i], BA)\n            pmat_fill(BAtP, 0.0)\n            pmt_gemm_tn(BA, self.P[N-i], BAtP, BAtP)\n\n            pmat_copy(self.Q[N-i], Q)\n            pmat_copy(self.R[N-i], R)\n            pmat_fill(M, 0.0)\n            M[0:nu,0:nu] = R\n            M[nu:nu+nx,nu:nu+nx] = Q\n\n            pmt_gemm_nn(BAtP, BA, M, M)\n            pmat_fill(L, 0.0)\n            pmt_potrf(M, L)\n\n            Mxx[0:nx, 0:nx] = L[nu:nu+nx, nu:nu+nx]\n\n            pmat_fill(self.P[N-i-1], 0.0)\n            pmt_gemm_nt(Mxx, Mxx, self.P[N-i-1], self.P[N-i-1])\n            pmat_print(self.P[N-i-1])\n\n        return\n\ndef main() -> int:\n\n    A: pmat = pmat(nx, nx)\n    A[0,0] = 0.8\n    A[0,1] = 0.1\n    A[1,0] = 0.3\n    A[1,1] = 0.8\n\n    B: pmat = pmat(nx, nu)\n    B[0,0] = 1.0  \n    B[0,1] = 0.0\n    B[1,0] = 0.0\n    B[1,1] = 1.0\n\n    Q: pmat = pmat(nx, nx)\n    Q[0,0] = 1.0  \n    Q[0,1] = 0.0\n    Q[1,0] = 0.0\n    Q[1,1] = 1.0\n\n    R: pmat = pmat(nu, nu)\n    R[0,0] = 1.0  \n    R[0,1] = 0.0\n    R[1,0] = 0.0\n    R[1,1] = 1.0\n\n    qp : qp_data = qp_data() \n\n    for i in range(N):\n        qp.A[i] = A\n\n    for i in range(N):\n        qp.B[i] = B\n\n    for i in range(N):\n        qp.Q[i] = Q\n\n    for i in range(N):\n        qp.R[i] = R\n\n    qp.factorize()\n    \n    return 0\n```\nSimilarly, the code above can be run by the standard Python interpreter using the command `pmt dgemm.py --cgen=False` and prometeo can generate compile and run the following high-performance C code using instead `pmt dgemm.py --cgen=True`:\n```c\n#include \"stdlib.h\"\n#include \"riccati.h\"\nvoid * ___c_pmt_8_heap;\nvoid * ___c_pmt_64_heap;\nvoid * ___c_pmt_8_heap_head;\nvoid * ___c_pmt_64_heap_head;\n\n#include \"prometeo.h\"\n\nvoid qp_data_init(struct qp_data *object){\n    object->A[0] = c_pmt_create_pmat(2, 2);\n    object->A[1] = c_pmt_create_pmat(2, 2);\n    object->A[2] = c_pmt_create_pmat(2, 2);\n    object->A[3] = c_pmt_create_pmat(2, 2);\n    object->A[4] = c_pmt_create_pmat(2, 2);\n    object->B[0] = c_pmt_create_pmat(2, 2);\n    object->B[1] = c_pmt_create_pmat(2, 2);\n    object->B[2] = c_pmt_create_pmat(2, 2);\n    object->B[3] = c_pmt_create_pmat(2, 2);\n    object->B[4] = c_pmt_create_pmat(2, 2);\n    object->Q[0] = c_pmt_create_pmat(2, 2);\n    object->Q[1] = c_pmt_create_pmat(2, 2);\n    object->Q[2] = c_pmt_create_pmat(2, 2);\n    object->Q[3] = c_pmt_create_pmat(2, 2);\n    object->Q[4] = c_pmt_create_pmat(2, 2);\n    object->R[0] = c_pmt_create_pmat(2, 2);\n    object->R[1] = c_pmt_create_pmat(2, 2);\n    object->R[2] = c_pmt_create_pmat(2, 2);\n    object->R[3] = c_pmt_create_pmat(2, 2);\n    object->R[4] = c_pmt_create_pmat(2, 2);\n    object->P[0] = c_pmt_create_pmat(2, 2);\n    object->P[1] = c_pmt_create_pmat(2, 2);\n    object->P[2] = c_pmt_create_pmat(2, 2);\n    object->P[3] = c_pmt_create_pmat(2, 2);\n    object->P[4] = c_pmt_create_pmat(2, 2);\n    object->fact[0] = c_pmt_create_pmat(2, 2);\n    object->fact[1] = c_pmt_create_pmat(2, 2);\n    object->fact[2] = c_pmt_create_pmat(2, 2);\n    object->fact[3] = c_pmt_create_pmat(2, 2);\n    object->fact[4] = c_pmt_create_pmat(2, 2);\n    object->_Z9factorize = &_Z9factorizeqp_data_impl;\n}\n\n\n\nvoid _Z9factorizeqp_data_impl(qp_data *self) {\n\tvoid *callee_pmt_8_heap = ___c_pmt_8_heap;\n\tvoid *callee_pmt_64_heap = ___c_pmt_64_heap;\n\n    struct pmat * M = c_pmt_create_pmat(nxu, nxu);\n    struct pmat * Mxx = c_pmt_create_pmat(nx, nx);\n    struct pmat * L = c_pmt_create_pmat(nxu, nxu);\n    struct pmat * Q = c_pmt_create_pmat(nx, nx);\n    struct pmat * R = c_pmt_create_pmat(nu, nu);\n    struct pmat * BA = c_pmt_create_pmat(nx, nxu);\n    struct pmat * BAtP = c_pmt_create_pmat(nxu, nx);\n    c_pmt_pmat_copy(self->Q[N - 1], self->P[N - 1]);\n    for(int i = 1; i < N; i+=1) {\n        c_pmt_pmat_hcat(self->B[N - i], self->A[N - i], BA);\n        c_pmt_pmat_fill(BAtP, 0.0);\n        c_pmt_gemm_tn(BA, self->P[N - i], BAtP, BAtP);\n        c_pmt_pmat_copy(self->Q[N - i], Q);\n        c_pmt_pmat_copy(self->R[N - i], R);\n        c_pmt_pmat_fill(M, 0.0);\n        c_pmt_gecp(nu-0, nu-0, R, 0, 0, M, 0, 0);\n        c_pmt_gecp((nu + nx)-nu, (nu + nx)-nu, Q, 0, 0, M, nu, nu);\n        c_pmt_gemm_nn(BAtP, BA, M, M);\n        c_pmt_pmat_fill(L, 0.0);\n        c_pmt_potrf(M, L);\n        c_pmt_gecp(nx-0, nx-0, L, nu, nu, Mxx, 0, 0);\n        c_pmt_pmat_fill(self->P[N - i - 1], 0.0);\n        c_pmt_gemm_nt(Mxx, Mxx, self->P[N - i - 1], self->P[N - i - 1]);\n        c_pmt_pmat_print(self->P[N - i - 1]);\n    }\n\n\t___c_pmt_8_heap = callee_pmt_8_heap;\n\t___c_pmt_64_heap = callee_pmt_64_heap;\n\n    return ;\n}int main() {\n    ___c_pmt_8_heap = malloc(10000); \n    ___c_pmt_8_heap_head = ___c_pmt_8_heap;\n    char * pmem_ptr = (char *)___c_pmt_8_heap;\n    align_char_to(8, &pmem_ptr);\n    ___c_pmt_8_heap = pmem_ptr;\n    ___c_pmt_64_heap = malloc(1000000);\n    ___c_pmt_64_heap_head = ___c_pmt_64_heap;\n    pmem_ptr = (char *)___c_pmt_64_heap;\n    align_char_to(64, &pmem_ptr);\n    ___c_pmt_64_heap = pmem_ptr;\n\tvoid *callee_pmt_8_heap = ___c_pmt_8_heap;\n\tvoid *callee_pmt_64_heap = ___c_pmt_64_heap;\n\n    struct pmat * A = c_pmt_create_pmat(nx, nx);\n    c_pmt_pmat_set_el(A, 0, 0, 0.8);\n    c_pmt_pmat_set_el(A, 0, 1, 0.1);\n    c_pmt_pmat_set_el(A, 1, 0, 0.3);\n    c_pmt_pmat_set_el(A, 1, 1, 0.8);\n    struct pmat * B = c_pmt_create_pmat(nx, nu);\n    c_pmt_pmat_set_el(B, 0, 0, 1.0);\n    c_pmt_pmat_set_el(B, 0, 1, 0.0);\n    c_pmt_pmat_set_el(B, 1, 0, 0.0);\n    c_pmt_pmat_set_el(B, 1, 1, 1.0);\n    struct pmat * Q = c_pmt_create_pmat(nx, nx);\n    c_pmt_pmat_set_el(Q, 0, 0, 1.0);\n    c_pmt_pmat_set_el(Q, 0, 1, 0.0);\n    c_pmt_pmat_set_el(Q, 1, 0, 0.0);\n    c_pmt_pmat_set_el(Q, 1, 1, 1.0);\n    struct pmat * R = c_pmt_create_pmat(nu, nu);\n    c_pmt_pmat_set_el(R, 0, 0, 1.0);\n    c_pmt_pmat_set_el(R, 0, 1, 0.0);\n    c_pmt_pmat_set_el(R, 1, 0, 0.0);\n    c_pmt_pmat_set_el(R, 1, 1, 1.0);\n    struct qp_data qp___;\n    struct qp_data * qp= &qp___;\n    qp_data_init(qp); //\n    for(int i = 0; i < N; i++) {\n        qp->A[i] = A;\n    }\n\n    for(int i = 0; i < N; i++) {\n        qp->B[i] = B;\n    }\n\n    for(int i = 0; i < N; i++) {\n        qp->Q[i] = Q;\n    }\n\n    for(int i = 0; i < N; i++) {\n        qp->R[i] = R;\n    }\n\n    qp->_Z9factorize(qp);\n\t___c_pmt_8_heap = callee_pmt_8_heap;\n\t___c_pmt_64_heap = callee_pmt_64_heap;\n\n\tfree(___c_pmt_8_heap_head);\n\tfree(___c_pmt_64_heap_head);\n\treturn 0;\n}\n```\n__Disclaimer: prometeo is still at a very preliminary stage and only very few linear algebra operations and Python constructs are supported for the time being.__", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/zanellia/prometeo", "keywords": "", "license": "LGPL", "maintainer": "", "maintainer_email": "", "name": "prometeo-dsl", "package_url": "https://pypi.org/project/prometeo-dsl/", "platform": "", "project_url": "https://pypi.org/project/prometeo-dsl/", "project_urls": {"Homepage": "http://github.com/zanellia/prometeo"}, "release_url": "https://pypi.org/project/prometeo-dsl/0.0.3/", "requires_dist": null, "requires_python": ">=3.6, <=3.9", "summary": "Python-to-C transpiler and domain specific language for embedded high-performance computing", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img align=\"left\" alt=\"prometeo logo by Andrea Zanelli\" height=\"120\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9f9886d4dba8051a6cba91a8201e51dee98c585/68747470733a2f2f6769746875622e636f6d2f7a616e656c6c69612f70726f6d6574656f2f626c6f622f6d61737465722f6c6f676f2f6c6f676f2e706e67\" width=\"80\"></p>\n<p><img alt=\"Travis Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c390fe7f23aa231efa93cefc78725a3f8088905/68747470733a2f2f7472617669732d63692e6f72672f7a616e656c6c69612f70726f6d6574656f2e7376673f6272616e63683d6d6173746572\"> <a href=\"https://pypi.python.org/pypi/ansicolortags/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1793fd361032a439764281c79b69606a16cf082/68747470733a2f2f62616467652e667572792e696f2f70792f70726f6d6574656f2d64736c2e737667\"></a></p>\n<p>This is prometeo, a modeling tool for embedded high-performance computing. prometeo provides a\ndomain specific language (DSL) based on a subset of the Python language that allows\none to conveniently write scientific computing programs in a high-level language (Python itself) that can be transpiled\nto high-performance self-contained C code easily deployable on embedded devices.</p>\n<h3>features</h3>\n<ul>\n<li><strong>Python compatible syntax</strong> : prometeo is a DSL embedded into the Python language.\nprometeo programs can be executed from the Python interpreter.</li>\n<li><strong>efficient</strong> : prometeo programs transpile to high-performance C code.</li>\n<li><strong>statically typed</strong> : prometeo uses Python's native type hints to strictly enforce static typing.</li>\n<li><strong>deterministic memory usage</strong> : a specific program structure is required and enforced through static analysis. In this way\nprometeo transpiled programs have a guaranteed maximum heap usage.</li>\n<li><strong>fast memory menagement</strong> : thanks to its static analysis, prometeo can avoid allocating\nand garbage-collecting memory, resulting in faster and safer execution.</li>\n<li><strong>self-contained and embeddable</strong> : unlike other similar tools and languages, prometeo targets specifically embedded applications and programs\nwritten in prometeo transpiled to self-contained C code that does not require linking against\nthe Python run-time library.</li>\n</ul>\n<h3>PyPI installation</h3>\n<p>prometeo can be installed through PyPI with <code>pip install prometeo-dsl</code>.</p>\n<h3>manual installation</h3>\n<p>If you want to install prometeo building the sources on your local machine you can proceed as follows:</p>\n<ul>\n<li>Run <code>git submodule update --init</code> to clone the submodules.</li>\n<li>Run <code>make install_shared</code> from <code>&lt;prometeo_root&gt;/prometeo/cpmt</code> to compile and install the shared library associated with the C backend. Notice that the default installation path is <code>&lt;prometeo_root&gt;/prometeo/cpmt/install</code>.</li>\n<li>You need Python 3.7. or later.</li>\n<li>Optional: to keep things clean you can setup a virtual environment with <code>virtualenv --python=&lt;path_to_python3.7 &lt;path_to_new_virtualenv&gt;</code>.</li>\n<li>Run <code>pip install -e .</code> from <code>&lt;prometeo_root&gt;</code> to install the Python package.</li>\n</ul>\n<p>Finally, you can run the examples in <code>&lt;root&gt;/examples</code> with <code>pmt &lt;example_name&gt;.py --cgen=&lt;True/False&gt;</code>, where the <code>--cgen</code> flag determines whether the code is executed by the Python interpreter or C code is generated compiled and run.</p>\n<h3>a simple example</h3>\n<p>The Python code</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">prometeo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">n</span> <span class=\"p\">:</span> <span class=\"n\">dims</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n\n    <span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n            <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n    <span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>\n\n\n    <span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">A</span> <span class=\"o\">*</span> <span class=\"n\">B</span>\n    <span class=\"n\">pmat_print</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre>\n<p>can be run by the standard Python interpreter (version &gt;3.6 required) and it\nwill perform the described linear algebra operations using the command <code>pmt simple_example.py --cgen=False</code>.\nAt the same time, the code can be parsed by prometeo and its abstract syntax tree (AST) analyzed in order\nto generate the following high-performance C code:</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">\"stdlib.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"simple_example.h\"</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_8_heap_head</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_64_heap_head</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"prometeo.h\"</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span> \n    <span class=\"n\">___c_pmt_8_heap_head</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">pmem_ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">align_char_to</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">pmem_ptr</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">pmem_ptr</span><span class=\"p\">;</span>\n    <span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_64_heap_head</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">pmem_ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">align_char_to</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">pmem_ptr</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">pmem_ptr</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_fill</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_gemm_nn</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_print</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">);</span>\n\t<span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_64_heap</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">___c_pmt_8_heap_head</span><span class=\"p\">);</span>\n\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">___c_pmt_64_heap_head</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>which relies on the high-performance linear algebra package BLASFEO. The generated code will be readily compiled and run with when running <code>pmt simple_example.py --cgen=True</code>.</p>\n<h3>a more advanced example (Riccati factorization)</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">prometeo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">sizes</span><span class=\"p\">:</span> <span class=\"n\">dimv</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"n\">nx</span><span class=\"p\">:</span> <span class=\"n\">dims</span>  <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">nxu</span><span class=\"p\">:</span> <span class=\"n\">dims</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">nu</span><span class=\"p\">:</span> <span class=\"n\">dims</span>  <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">N</span><span class=\"p\">:</span>  <span class=\"n\">dims</span>  <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">qp_data</span><span class=\"p\">:</span>\n    <span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n    <span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n    <span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n    <span class=\"n\">R</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n    <span class=\"n\">P</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fact</span><span class=\"p\">:</span> <span class=\"n\">List</span> <span class=\"o\">=</span> <span class=\"n\">plist</span><span class=\"p\">(</span><span class=\"n\">pmat</span><span class=\"p\">,</span> <span class=\"n\">sizes</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">factorize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">M</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">)</span>\n        <span class=\"n\">Mxx</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">)</span>\n        <span class=\"n\">L</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">)</span>\n        <span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">)</span>\n        <span class=\"n\">R</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">)</span>\n        <span class=\"n\">BA</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">)</span>\n        <span class=\"n\">BAtP</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">)</span>\n        <span class=\"n\">pmat_copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n            <span class=\"n\">pmat_hcat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">BA</span><span class=\"p\">)</span>\n            <span class=\"n\">pmat_fill</span><span class=\"p\">(</span><span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n            <span class=\"n\">pmt_gemm_tn</span><span class=\"p\">(</span><span class=\"n\">BA</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"n\">BAtP</span><span class=\"p\">)</span>\n\n            <span class=\"n\">pmat_copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">Q</span><span class=\"p\">)</span>\n            <span class=\"n\">pmat_copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n            <span class=\"n\">pmat_fill</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n            <span class=\"n\">M</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R</span>\n            <span class=\"n\">M</span><span class=\"p\">[</span><span class=\"n\">nu</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"o\">+</span><span class=\"n\">nx</span><span class=\"p\">,</span><span class=\"n\">nu</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"o\">+</span><span class=\"n\">nx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Q</span>\n\n            <span class=\"n\">pmt_gemm_nn</span><span class=\"p\">(</span><span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"n\">BA</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">)</span>\n            <span class=\"n\">pmat_fill</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n            <span class=\"n\">pmt_potrf</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">)</span>\n\n            <span class=\"n\">Mxx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">nx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"n\">nu</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"o\">+</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">:</span><span class=\"n\">nu</span><span class=\"o\">+</span><span class=\"n\">nx</span><span class=\"p\">]</span>\n\n            <span class=\"n\">pmat_fill</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n            <span class=\"n\">pmt_gemm_nt</span><span class=\"p\">(</span><span class=\"n\">Mxx</span><span class=\"p\">,</span> <span class=\"n\">Mxx</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">pmat_print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n\n    <span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">)</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span>\n\n    <span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">)</span>\n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>  \n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n    <span class=\"n\">Q</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">)</span>\n    <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>  \n    <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n    <span class=\"n\">R</span><span class=\"p\">:</span> <span class=\"n\">pmat</span> <span class=\"o\">=</span> <span class=\"n\">pmat</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">)</span>\n    <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>  \n    <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n    <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n    <span class=\"n\">qp</span> <span class=\"p\">:</span> <span class=\"n\">qp_data</span> <span class=\"o\">=</span> <span class=\"n\">qp_data</span><span class=\"p\">()</span> \n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">B</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Q</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R</span>\n\n    <span class=\"n\">qp</span><span class=\"o\">.</span><span class=\"n\">factorize</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre>\n<p>Similarly, the code above can be run by the standard Python interpreter using the command <code>pmt dgemm.py --cgen=False</code> and prometeo can generate compile and run the following high-performance C code using instead <code>pmt dgemm.py --cgen=True</code>:</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">\"stdlib.h\"</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"riccati.h\"</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_8_heap_head</span><span class=\"p\">;</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span> <span class=\"n\">___c_pmt_64_heap_head</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"prometeo.h\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">qp_data_init</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">qp_data</span> <span class=\"o\">*</span><span class=\"n\">object</span><span class=\"p\">){</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">fact</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">fact</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">fact</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">fact</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">fact</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n    <span class=\"n\">object</span><span class=\"o\">-&gt;</span><span class=\"n\">_Z9factorize</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">_Z9factorizeqp_data_impl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n\n<span class=\"kt\">void</span> <span class=\"nf\">_Z9factorizeqp_data_impl</span><span class=\"p\">(</span><span class=\"n\">qp_data</span> <span class=\"o\">*</span><span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">Mxx</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">BA</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nxu</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">BAtP</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nxu</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_copy</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">+=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">c_pmt_pmat_hcat</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">BA</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_fill</span><span class=\"p\">(</span><span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gemm_tn</span><span class=\"p\">(</span><span class=\"n\">BA</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"n\">BAtP</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_copy</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">Q</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_copy</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_fill</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gecp</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gecp</span><span class=\"p\">((</span><span class=\"n\">nu</span> <span class=\"o\">+</span> <span class=\"n\">nx</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">nu</span> <span class=\"o\">+</span> <span class=\"n\">nx</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gemm_nn</span><span class=\"p\">(</span><span class=\"n\">BAtP</span><span class=\"p\">,</span> <span class=\"n\">BA</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_fill</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_potrf</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gecp</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"o\">-</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">Mxx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_pmat_fill</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n        <span class=\"n\">c_pmt_gemm_nt</span><span class=\"p\">(</span><span class=\"n\">Mxx</span><span class=\"p\">,</span> <span class=\"n\">Mxx</span><span class=\"p\">,</span> <span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n        <span class=\"n\">c_pmt_pmat_print</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"o\">-&gt;</span><span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n\n\t<span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_64_heap</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">);</span> \n    <span class=\"n\">___c_pmt_8_heap_head</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span> <span class=\"n\">pmem_ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">align_char_to</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">pmem_ptr</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">pmem_ptr</span><span class=\"p\">;</span>\n    <span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1000000</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_64_heap_head</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">pmem_ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n    <span class=\"n\">align_char_to</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">pmem_ptr</span><span class=\"p\">);</span>\n    <span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">pmem_ptr</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">callee_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">___c_pmt_64_heap</span><span class=\"p\">;</span>\n\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nx</span><span class=\"p\">,</span> <span class=\"n\">nx</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">pmat</span> <span class=\"o\">*</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">c_pmt_create_pmat</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">nu</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">);</span>\n    <span class=\"n\">c_pmt_pmat_set_el</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">);</span>\n    <span class=\"k\">struct</span> <span class=\"n\">qp_data</span> <span class=\"n\">qp___</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">qp_data</span> <span class=\"o\">*</span> <span class=\"n\">qp</span><span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">qp___</span><span class=\"p\">;</span>\n    <span class=\"n\">qp_data_init</span><span class=\"p\">(</span><span class=\"n\">qp</span><span class=\"p\">);</span> <span class=\"c1\">//</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">qp</span><span class=\"o\">-&gt;</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">qp</span><span class=\"o\">-&gt;</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">qp</span><span class=\"o\">-&gt;</span><span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Q</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">qp</span><span class=\"o\">-&gt;</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">R</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">qp</span><span class=\"o\">-&gt;</span><span class=\"n\">_Z9factorize</span><span class=\"p\">(</span><span class=\"n\">qp</span><span class=\"p\">);</span>\n\t<span class=\"n\">___c_pmt_8_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_8_heap</span><span class=\"p\">;</span>\n\t<span class=\"n\">___c_pmt_64_heap</span> <span class=\"o\">=</span> <span class=\"n\">callee_pmt_64_heap</span><span class=\"p\">;</span>\n\n\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">___c_pmt_8_heap_head</span><span class=\"p\">);</span>\n\t<span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">___c_pmt_64_heap_head</span><span class=\"p\">);</span>\n\t<span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Disclaimer: prometeo is still at a very preliminary stage and only very few linear algebra operations and Python constructs are supported for the time being.</strong></p>\n\n          </div>"}, "last_serial": 7178791, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "75e04e88490912b3530701e25e2dd8ac", "sha256": "ed09e0f7bfedff6668c41f97c3ddd5e6b11ede744216ea77fd66c5005dcb3858"}, "downloads": -1, "filename": "prometeo_dsl-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75e04e88490912b3530701e25e2dd8ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <=3.9", "size": 430207, "upload_time": "2020-05-04T11:18:57", "upload_time_iso_8601": "2020-05-04T11:18:57.712172Z", "url": "https://files.pythonhosted.org/packages/0a/ea/f7838cad04ffa84c3d4004de653c0478e316282a6710c541f3ce858bb296/prometeo_dsl-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f7a8202c201e2cf1054ccd9f24f17d59", "sha256": "f9ceeb9d302dffe261a5764b6041c80ce2a633aace37d58a98bdc3fe5899bfd2"}, "downloads": -1, "filename": "prometeo_dsl-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f7a8202c201e2cf1054ccd9f24f17d59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <=3.9", "size": 430288, "upload_time": "2020-05-04T11:57:02", "upload_time_iso_8601": "2020-05-04T11:57:02.269893Z", "url": "https://files.pythonhosted.org/packages/d0/b1/618e85fd6dcfd284fd45a82a83f4d13beaad7d849ac2cd2634670140b5ed/prometeo_dsl-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2ed2108581ca971d06a8592b9c10819d", "sha256": "dd1e3a3c3838e1fbb2338954a903e87b8599d667c0130c6b646cd77c43cec809"}, "downloads": -1, "filename": "prometeo-dsl-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2ed2108581ca971d06a8592b9c10819d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <=3.9", "size": 48363, "upload_time": "2020-05-06T09:02:05", "upload_time_iso_8601": "2020-05-06T09:02:05.111394Z", "url": "https://files.pythonhosted.org/packages/a8/c8/562060ef1d58c1d42b5b5f09482ca83fd968b914e1284a9b32f14d7ffab1/prometeo-dsl-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ed2108581ca971d06a8592b9c10819d", "sha256": "dd1e3a3c3838e1fbb2338954a903e87b8599d667c0130c6b646cd77c43cec809"}, "downloads": -1, "filename": "prometeo-dsl-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2ed2108581ca971d06a8592b9c10819d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <=3.9", "size": 48363, "upload_time": "2020-05-06T09:02:05", "upload_time_iso_8601": "2020-05-06T09:02:05.111394Z", "url": "https://files.pythonhosted.org/packages/a8/c8/562060ef1d58c1d42b5b5f09482ca83fd968b914e1284a9b32f14d7ffab1/prometeo-dsl-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:11 2020"}