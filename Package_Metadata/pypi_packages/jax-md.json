{"info": {"author": "Google", "author_email": "jax-md-dev@google.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# JAX, M.D. [[arXiv](https://arxiv.org/abs/1912.04232)]\n\n### Accelerated, Differentiable, Molecular Dynamics\n[**Quickstart**](#getting-started)\n| [**Reference docs**](https://jax-md.readthedocs.io/en/latest/)\n\n[![Build Status](https://travis-ci.org/google/jax-md.svg?branch=master)](https://travis-ci.org/google/jax-md) [![PyPI](https://img.shields.io/pypi/v/jax-md)](https://pypi.org/project/jax-md/) [![PyPI - License](https://img.shields.io/pypi/l/jax_md)](https://github.com/google/jax-md/blob/master/LICENSE)\n\n\nMolecular dynamics is a workhorse of modern computational condensed matter\nphysics. It is frequently used to simulate materials to observe how small scale\ninteractions can give rise to complex large-scale phenomenology. Most molecular\ndynamics packages (e.g. HOOMD Blue or LAMMPS) are complicated, specialized\npieces of code that are many thousands of lines long. They typically involve\nsignificant code duplication to allow for running simulations on CPU and GPU.\nAdditionally, large amounts of code is often devoted to taking derivatives\nof quantities to compute functions of interest (e.g. gradients of energies\nto compute forces).\n\nHowever, recent work in machine learning has led to significant software\ndevelopments that might make it possible to write more concise\nmolecular dynamics simulations that offer a range of benefits. Here we target\nJAX, which allows us to write python code that gets compiled to XLA and allows\nus to run on CPU, GPU, or TPU. Moreover, JAX allows us to take derivatives of\npython code. Thus, not only is this molecular dynamics simulation automatically\nhardware accelerated, it is also __end-to-end__ differentiable. This should\nallow for some interesting experiments that we're excited to explore.\n\nJAX, MD is a research project that is currently under development. Expect\nsharp edges and possibly some API breaking changes as we continue to support\na broader set of simulations. JAX MD is a functional and data driven library. Data is stored in arrays or tuples of arrays and functions transform data from one state to another.\n\n### Getting Started\n\nTo get started playing around with JAX MD check out the following colab notebooks on Google Cloud without needing to install anything. For a very simple introduction, I would recommend the Minimization example. For an example of a bunch of the features of JAX MD, check out the JAX MD cookbook.\n\n- [JAX MD Cookbook](https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/jax_md_cookbook.ipynb)\n- [Minimization](https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/minimization.ipynb)\n- [NVE Simulation](https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nve_simulation.ipynb)\n- [NVT Simulation](https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nvt_simulation.ipynb)\n- [NVE with Neighbor Lists](https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nve_neighbor_list.ipynb)\n\nYou can install JAX MD locally with pip,\n```\npip install jax-md --upgrade\n```\nIf you want to build the latest version then you can grab the most recent version from head,\n```\ngit clone https://github.com/google/jax-md\npip install -e jax-md\n```\n\n# Overview\n\nWe now summarize the main components of the library.\n\n## Spaces ([`space.py`](https://github.com/google/jax-md/blob/master/jax_md/space.py))\n\nIn general we must have a way of computing the pairwise distance between atoms.\nWe must also have efficient strategies for moving atoms in some space that may\nor may not be globally isomorphic to R^N. For example, periodic boundary\nconditions are commonplace in simulations and must be respected. Spaces are defined as a pair of functions, `(displacement_fn, shift_fn)`. Given two points `displacement_fn(R_1, R_2)` computes the displacement vector between the two points. If you would like to compute displacement vectors between all pairs of points in a given `(N, dim)` matrix the function `space.map_product` appropriately vectorizes `displacement_fn`. It is often useful to define a metric instead of a displcement function in which case you can use the helper function `space.metric` to convert a displacement function to a metric function. Given a point and a shift `shift_fn(R, dR)` displaces the point `R` by an amount `dR`.\n\nThe following spaces are currently supported:\n- `space.free()` specifies a space with free boundary conditions.\n- `space.periodic(box_size)` specifies a space with periodic boundary conditions of side length `box_size`.\n- `space.periodic_general(T)` specifies a space as a periodic parellelopiped formed by transforming the unit cube by an affine transformation `T`. Note that `T` can be a time dependent function `T(t)` that is useful for simulating systems under strain.\n\nExample:\n\n```python\nfrom jax_md import space\nbox_size = 25.0\ndisplacement_fn, shift_fn = space.periodic(box_size)\n```\n\n## Potential Energy ([`energy.py`](https://github.com/google/jax-md/blob/master/jax_md/energy.py))\n\nIn the simplest case, molecular dynamics calculations are often based on a pair\npotential that is defined by a user. This then is used to compute a total energy\nwhose negative gradient gives forces. One of the very nice things about JAX is\nthat we get forces for free! The second part of the code is devoted to computing\nenergies. \n\nWe provide the following potentials:\n- `energy.soft_sphere` a soft sphere whose energy incrases as the overlap of the spheres to some power, `alpha`.\n- `energy.lennard_jones` a standard 12-6 lennard-jones potential.\n- `energy.eam` embedded atom model potential with ability to load parameters from LAMMPS files.\n\nFor finite-ranged potentials it is often useful to consider only interactions within a certain neighborhood. We include the `_neighbor_list` modifier to the above potentials that uses a list of neighbors (see below) for optimization.\n\nExample:\n\n```python\nimport jax.numpy as np\nfrom jax import random\nfrom jax_md import energy, quantity\nN = 1000\nspatial_dimension = 2\nkey = random.PRNGKey(0)\nR = random.uniform(key, (N, spatial_dimension), minval=0.0, maxval=1.0)\nenergy_fn = energy.lennard_jones_pair(displacement_fn)\nprint('E = {}'.format(energy_fn(R)))\nforce_fn = quantity.force(energy_fn)\nprint('Total Squared Force = {}'.format(np.sum(force_fn(R) ** 2)))\n```\n\n## Dynamics ([`simulate.py`](https://github.com/google/jax-md/blob/master/jax_md/simulate.py), [`minimize.py`](https://github.com/google/jax-md/blob/master/jax_md/minimize.py))\n\nGiven an energy function and a system, there are a number of dynamics are useful\nto simulate. The simulation code is based on the structure of the optimizers\nfound in JAX. In particular, each simulation function returns an initialization\nfunction and an update function. The initialization function takes a set of\npositions and creates the necessary dynamical state variables. The update\nfunction does a single step of dynamics to the dynamical state variables and\nreturns an updated state.\n\nWe include a several different kinds of dynamics. However, there is certainly room\nto add more for e.g. constaint strain simulations.\n\nIt is often desirable to find an energy minimum of the system. We provide\ntwo methods to do this. We provide simple gradient descent minimization. This is\nmostly for pedagogical purposes, since it often performs poorly. We additionally\ninclude the FIRE algorithm which often sees significantly faster convergence. Moreover a common experiment to run in the context of molecular dynamics is to simulate a system with a fixed volume and temperature.\n\nWe provide the following dynamics:\n- `simulate.nve` Constant energy simulation; numerically integrates Newton's laws directly.\n- `simulate.nvt_nose_hoover` Uses Nose-Hoover chain to simulate a constant temperature system.\n- `simulate.nvt_langevin` Simulates a system by numerically integrating the Langevin stochistic differential equation.\n- `simulate.brownian` Simulates brownian motion.\n- `minimize.gradient_descent` Mimimizes a system using gradient descent.\n- `minimize.fire_descent` Minimizes a system using the fast inertial relaxation engine.\n\nExample:\n\n```python\nfrom jax_md import simulate\ntemperature = 1.0\ndt = 1e-3\ninit, update = simulate.nvt_nose_hoover(energy_fn, shift_fn, dt, temperature)\nstate = init(key, R)\nfor _ in range(100):\n  state = update(state)\nR = state.position\n```\n\n## Spatial Partitioning ([`partition.py`](https://github.com/google/jax-md/blob/master/jax_md/partition.py))\n\nIn many applications, it is useful to construct spatial partitions of particles / objects in a simulation. \n\nWe provide the following methods:\n- `partition.cell_list` Partitions objects (and metadata) into a grid of cells. \n- `partition.neighbor_list` Constructs a set of neighbors within some cutoff distance for each object in a simulation. \n\nCell List Example:\n```python\nfrom jax_md import partition\n\ncell_size = 5.0\ncapacity = 10\ncell_list_fn = partition.cell_list(box_size, cell_size, capacity)\ncell_list_data = cell_list_fn(R)\n```\n\nNeighbor List Example:\n```python\nfrom jax_md import partition\n\nneighbor_list_fn = partition.neighbor_list(displacement_fn, box_size, cell_size, R)\nneighbor_idx = neighbor_list_fn(R) \n\n# neighbor_idx is a [N, max_neighbors] ndarray of neighbor ids for each particle.\n# Empty slots are marked by id == N.\n```\n# Development\n\nJAX MD is under active development. We have very limited development resources and so we typically focus on adding features that will have high impact to researchers using JAX MD (including us). Please don't hesitate to open feature requests to help us guide development. We more than welcome contributions!\n\n## Technical gotchas\n\n### GPU\n\nYou must follow [JAX's](https://www.github.com/google/jax/) GPU installation instructions to enable GPU support.\n\n\n### 64-bit precision\nTo enable 64-bit precision, set the respective JAX flag _before_ importing `jax_md` (see the JAX [guide](https://colab.research.google.com/github/google/jax/blob/master/notebooks/Common_Gotchas_in_JAX.ipynb#scrollTo=YTktlwTTMgFl)), for example:\n\n```python\nfrom jax.config import config\nconfig.update(\"jax_enable_x64\", True)\n```\n\n# Citation\n\nIf you use the code in a publication, please cite the repo using the .bib,\n\n```\n@misc{jaxmd2019,\n    title={JAX M.D.: End-to-End Differentiable, Hardware Accelerated, Molecular Dynamics in Pure Python},\n    author={Samuel S. Schoenholz and Ekin D. Cubuk},\n    year={2019},\n    eprint={1912.04232},\n    archivePrefix={arXiv},\n    primaryClass={stat.ML},\n    howpublished={\\url{https://github.com/google/jax-md}, \\url{https://arxiv.org/abs/1912.04232}},\n}\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/jax-md/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/google/jax-md", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "jax-md", "package_url": "https://pypi.org/project/jax-md/", "platform": "", "project_url": "https://pypi.org/project/jax-md/", "project_urls": {"Bug Tracker": "https://github.com/google/jax-md/issues", "Documentation": "https://arxiv.org/abs/1912.04232", "Download": "https://pypi.org/project/jax-md/", "Homepage": "https://github.com/google/jax-md", "Source Code": "https://github.com/google/jax-md"}, "release_url": "https://pypi.org/project/jax-md/0.1.5/", "requires_dist": ["absl-py", "numpy", "jax (>=0.1.55)", "jaxlib (>=0.1.37)", "dataclasses"], "requires_python": ">=2.7", "summary": "Differentiable, Hardware Accelerated, Molecular Dynamics", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JAX, M.D. [<a href=\"https://arxiv.org/abs/1912.04232\" rel=\"nofollow\">arXiv</a>]</h1>\n<h3>Accelerated, Differentiable, Molecular Dynamics</h3>\n<p><a href=\"#getting-started\" rel=\"nofollow\"><strong>Quickstart</strong></a>\n| <a href=\"https://jax-md.readthedocs.io/en/latest/\" rel=\"nofollow\"><strong>Reference docs</strong></a></p>\n<p><a href=\"https://travis-ci.org/google/jax-md\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2d28803a821e8e8d42594ba0e08a2cc9e73a73d/68747470733a2f2f7472617669732d63692e6f72672f676f6f676c652f6a61782d6d642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/jax-md/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99e10be4854cec75fe141c51f35ee8f034229d27/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a61782d6d64\"></a> <a href=\"https://github.com/google/jax-md/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3c9a5e0cb214f2121752579e78197e912dad67c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6a61785f6d64\"></a></p>\n<p>Molecular dynamics is a workhorse of modern computational condensed matter\nphysics. It is frequently used to simulate materials to observe how small scale\ninteractions can give rise to complex large-scale phenomenology. Most molecular\ndynamics packages (e.g. HOOMD Blue or LAMMPS) are complicated, specialized\npieces of code that are many thousands of lines long. They typically involve\nsignificant code duplication to allow for running simulations on CPU and GPU.\nAdditionally, large amounts of code is often devoted to taking derivatives\nof quantities to compute functions of interest (e.g. gradients of energies\nto compute forces).</p>\n<p>However, recent work in machine learning has led to significant software\ndevelopments that might make it possible to write more concise\nmolecular dynamics simulations that offer a range of benefits. Here we target\nJAX, which allows us to write python code that gets compiled to XLA and allows\nus to run on CPU, GPU, or TPU. Moreover, JAX allows us to take derivatives of\npython code. Thus, not only is this molecular dynamics simulation automatically\nhardware accelerated, it is also <strong>end-to-end</strong> differentiable. This should\nallow for some interesting experiments that we're excited to explore.</p>\n<p>JAX, MD is a research project that is currently under development. Expect\nsharp edges and possibly some API breaking changes as we continue to support\na broader set of simulations. JAX MD is a functional and data driven library. Data is stored in arrays or tuples of arrays and functions transform data from one state to another.</p>\n<h3>Getting Started</h3>\n<p>To get started playing around with JAX MD check out the following colab notebooks on Google Cloud without needing to install anything. For a very simple introduction, I would recommend the Minimization example. For an example of a bunch of the features of JAX MD, check out the JAX MD cookbook.</p>\n<ul>\n<li><a href=\"https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/jax_md_cookbook.ipynb\" rel=\"nofollow\">JAX MD Cookbook</a></li>\n<li><a href=\"https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/minimization.ipynb\" rel=\"nofollow\">Minimization</a></li>\n<li><a href=\"https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nve_simulation.ipynb\" rel=\"nofollow\">NVE Simulation</a></li>\n<li><a href=\"https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nvt_simulation.ipynb\" rel=\"nofollow\">NVT Simulation</a></li>\n<li><a href=\"https://colab.research.google.com/github/google/jax-md/blob/master/notebooks/nve_neighbor_list.ipynb\" rel=\"nofollow\">NVE with Neighbor Lists</a></li>\n</ul>\n<p>You can install JAX MD locally with pip,</p>\n<pre><code>pip install jax-md --upgrade\n</code></pre>\n<p>If you want to build the latest version then you can grab the most recent version from head,</p>\n<pre><code>git clone https://github.com/google/jax-md\npip install -e jax-md\n</code></pre>\n<h1>Overview</h1>\n<p>We now summarize the main components of the library.</p>\n<h2>Spaces (<a href=\"https://github.com/google/jax-md/blob/master/jax_md/space.py\" rel=\"nofollow\"><code>space.py</code></a>)</h2>\n<p>In general we must have a way of computing the pairwise distance between atoms.\nWe must also have efficient strategies for moving atoms in some space that may\nor may not be globally isomorphic to R^N. For example, periodic boundary\nconditions are commonplace in simulations and must be respected. Spaces are defined as a pair of functions, <code>(displacement_fn, shift_fn)</code>. Given two points <code>displacement_fn(R_1, R_2)</code> computes the displacement vector between the two points. If you would like to compute displacement vectors between all pairs of points in a given <code>(N, dim)</code> matrix the function <code>space.map_product</code> appropriately vectorizes <code>displacement_fn</code>. It is often useful to define a metric instead of a displcement function in which case you can use the helper function <code>space.metric</code> to convert a displacement function to a metric function. Given a point and a shift <code>shift_fn(R, dR)</code> displaces the point <code>R</code> by an amount <code>dR</code>.</p>\n<p>The following spaces are currently supported:</p>\n<ul>\n<li><code>space.free()</code> specifies a space with free boundary conditions.</li>\n<li><code>space.periodic(box_size)</code> specifies a space with periodic boundary conditions of side length <code>box_size</code>.</li>\n<li><code>space.periodic_general(T)</code> specifies a space as a periodic parellelopiped formed by transforming the unit cube by an affine transformation <code>T</code>. Note that <code>T</code> can be a time dependent function <code>T(t)</code> that is useful for simulating systems under strain.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax_md</span> <span class=\"kn\">import</span> <span class=\"n\">space</span>\n<span class=\"n\">box_size</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>\n<span class=\"n\">displacement_fn</span><span class=\"p\">,</span> <span class=\"n\">shift_fn</span> <span class=\"o\">=</span> <span class=\"n\">space</span><span class=\"o\">.</span><span class=\"n\">periodic</span><span class=\"p\">(</span><span class=\"n\">box_size</span><span class=\"p\">)</span>\n</pre>\n<h2>Potential Energy (<a href=\"https://github.com/google/jax-md/blob/master/jax_md/energy.py\" rel=\"nofollow\"><code>energy.py</code></a>)</h2>\n<p>In the simplest case, molecular dynamics calculations are often based on a pair\npotential that is defined by a user. This then is used to compute a total energy\nwhose negative gradient gives forces. One of the very nice things about JAX is\nthat we get forces for free! The second part of the code is devoted to computing\nenergies.</p>\n<p>We provide the following potentials:</p>\n<ul>\n<li><code>energy.soft_sphere</code> a soft sphere whose energy incrases as the overlap of the spheres to some power, <code>alpha</code>.</li>\n<li><code>energy.lennard_jones</code> a standard 12-6 lennard-jones potential.</li>\n<li><code>energy.eam</code> embedded atom model potential with ability to load parameters from LAMMPS files.</li>\n</ul>\n<p>For finite-ranged potentials it is often useful to consider only interactions within a certain neighborhood. We include the <code>_neighbor_list</code> modifier to the above potentials that uses a list of neighbors (see below) for optimization.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jax.numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jax</span> <span class=\"kn\">import</span> <span class=\"n\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jax_md</span> <span class=\"kn\">import</span> <span class=\"n\">energy</span><span class=\"p\">,</span> <span class=\"n\">quantity</span>\n<span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">spatial_dimension</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">PRNGKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">spatial_dimension</span><span class=\"p\">),</span> <span class=\"n\">minval</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">energy_fn</span> <span class=\"o\">=</span> <span class=\"n\">energy</span><span class=\"o\">.</span><span class=\"n\">lennard_jones_pair</span><span class=\"p\">(</span><span class=\"n\">displacement_fn</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'E = </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">energy_fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)))</span>\n<span class=\"n\">force_fn</span> <span class=\"o\">=</span> <span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"n\">force</span><span class=\"p\">(</span><span class=\"n\">energy_fn</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Total Squared Force = </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">force_fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n</pre>\n<h2>Dynamics (<a href=\"https://github.com/google/jax-md/blob/master/jax_md/simulate.py\" rel=\"nofollow\"><code>simulate.py</code></a>, <a href=\"https://github.com/google/jax-md/blob/master/jax_md/minimize.py\" rel=\"nofollow\"><code>minimize.py</code></a>)</h2>\n<p>Given an energy function and a system, there are a number of dynamics are useful\nto simulate. The simulation code is based on the structure of the optimizers\nfound in JAX. In particular, each simulation function returns an initialization\nfunction and an update function. The initialization function takes a set of\npositions and creates the necessary dynamical state variables. The update\nfunction does a single step of dynamics to the dynamical state variables and\nreturns an updated state.</p>\n<p>We include a several different kinds of dynamics. However, there is certainly room\nto add more for e.g. constaint strain simulations.</p>\n<p>It is often desirable to find an energy minimum of the system. We provide\ntwo methods to do this. We provide simple gradient descent minimization. This is\nmostly for pedagogical purposes, since it often performs poorly. We additionally\ninclude the FIRE algorithm which often sees significantly faster convergence. Moreover a common experiment to run in the context of molecular dynamics is to simulate a system with a fixed volume and temperature.</p>\n<p>We provide the following dynamics:</p>\n<ul>\n<li><code>simulate.nve</code> Constant energy simulation; numerically integrates Newton's laws directly.</li>\n<li><code>simulate.nvt_nose_hoover</code> Uses Nose-Hoover chain to simulate a constant temperature system.</li>\n<li><code>simulate.nvt_langevin</code> Simulates a system by numerically integrating the Langevin stochistic differential equation.</li>\n<li><code>simulate.brownian</code> Simulates brownian motion.</li>\n<li><code>minimize.gradient_descent</code> Mimimizes a system using gradient descent.</li>\n<li><code>minimize.fire_descent</code> Minimizes a system using the fast inertial relaxation engine.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax_md</span> <span class=\"kn\">import</span> <span class=\"n\">simulate</span>\n<span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">1e-3</span>\n<span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">update</span> <span class=\"o\">=</span> <span class=\"n\">simulate</span><span class=\"o\">.</span><span class=\"n\">nvt_nose_hoover</span><span class=\"p\">(</span><span class=\"n\">energy_fn</span><span class=\"p\">,</span> <span class=\"n\">shift_fn</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"p\">)</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n  <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">)</span>\n<span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">position</span>\n</pre>\n<h2>Spatial Partitioning (<a href=\"https://github.com/google/jax-md/blob/master/jax_md/partition.py\" rel=\"nofollow\"><code>partition.py</code></a>)</h2>\n<p>In many applications, it is useful to construct spatial partitions of particles / objects in a simulation.</p>\n<p>We provide the following methods:</p>\n<ul>\n<li><code>partition.cell_list</code> Partitions objects (and metadata) into a grid of cells.</li>\n<li><code>partition.neighbor_list</code> Constructs a set of neighbors within some cutoff distance for each object in a simulation.</li>\n</ul>\n<p>Cell List Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax_md</span> <span class=\"kn\">import</span> <span class=\"n\">partition</span>\n\n<span class=\"n\">cell_size</span> <span class=\"o\">=</span> <span class=\"mf\">5.0</span>\n<span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">cell_list_fn</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"o\">.</span><span class=\"n\">cell_list</span><span class=\"p\">(</span><span class=\"n\">box_size</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">)</span>\n<span class=\"n\">cell_list_data</span> <span class=\"o\">=</span> <span class=\"n\">cell_list_fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span>\n</pre>\n<p>Neighbor List Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax_md</span> <span class=\"kn\">import</span> <span class=\"n\">partition</span>\n\n<span class=\"n\">neighbor_list_fn</span> <span class=\"o\">=</span> <span class=\"n\">partition</span><span class=\"o\">.</span><span class=\"n\">neighbor_list</span><span class=\"p\">(</span><span class=\"n\">displacement_fn</span><span class=\"p\">,</span> <span class=\"n\">box_size</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">)</span>\n<span class=\"n\">neighbor_idx</span> <span class=\"o\">=</span> <span class=\"n\">neighbor_list_fn</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">)</span> \n\n<span class=\"c1\"># neighbor_idx is a [N, max_neighbors] ndarray of neighbor ids for each particle.</span>\n<span class=\"c1\"># Empty slots are marked by id == N.</span>\n</pre>\n<h1>Development</h1>\n<p>JAX MD is under active development. We have very limited development resources and so we typically focus on adding features that will have high impact to researchers using JAX MD (including us). Please don't hesitate to open feature requests to help us guide development. We more than welcome contributions!</p>\n<h2>Technical gotchas</h2>\n<h3>GPU</h3>\n<p>You must follow <a href=\"https://www.github.com/google/jax/\" rel=\"nofollow\">JAX's</a> GPU installation instructions to enable GPU support.</p>\n<h3>64-bit precision</h3>\n<p>To enable 64-bit precision, set the respective JAX flag <em>before</em> importing <code>jax_md</code> (see the JAX <a href=\"https://colab.research.google.com/github/google/jax/blob/master/notebooks/Common_Gotchas_in_JAX.ipynb#scrollTo=YTktlwTTMgFl\" rel=\"nofollow\">guide</a>), for example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jax.config</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"s2\">\"jax_enable_x64\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Citation</h1>\n<p>If you use the code in a publication, please cite the repo using the .bib,</p>\n<pre><code>@misc{jaxmd2019,\n    title={JAX M.D.: End-to-End Differentiable, Hardware Accelerated, Molecular Dynamics in Pure Python},\n    author={Samuel S. Schoenholz and Ekin D. Cubuk},\n    year={2019},\n    eprint={1912.04232},\n    archivePrefix={arXiv},\n    primaryClass={stat.ML},\n    howpublished={\\url{https://github.com/google/jax-md}, \\url{https://arxiv.org/abs/1912.04232}},\n}\n</code></pre>\n\n          </div>"}, "last_serial": 7146384, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6a2cd1a10961799070bc571145b5c6b3", "sha256": "866145b2313e76c07ee877fdbb7880ff46c70e1b656fbe521a94f150700c7d52"}, "downloads": -1, "filename": "jax_md-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6a2cd1a10961799070bc571145b5c6b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36030, "upload_time": "2019-12-11T19:33:00", "upload_time_iso_8601": "2019-12-11T19:33:00.217831Z", "url": "https://files.pythonhosted.org/packages/df/44/c55411bd2442e6f1ff90acc0279d35abcfa971b65389c3f16c0464bd2cda/jax_md-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "954258985b358cf72e4aeb691a5d32f5", "sha256": "9065e7b8e988a4c94b24616d78aecd535b3291e93824bd0de85f39e05db15ddd"}, "downloads": -1, "filename": "jax-md-0.1.0.tar.gz", "has_sig": false, "md5_digest": "954258985b358cf72e4aeb691a5d32f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25335, "upload_time": "2019-12-11T19:33:02", "upload_time_iso_8601": "2019-12-11T19:33:02.515792Z", "url": "https://files.pythonhosted.org/packages/67/8c/a7de115dbf248fbb5b2aed81928d2da9c566c9f1c2f040209d605d6d5b39/jax-md-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "47d225ecef244e0ecc306ba07704af80", "sha256": "46052360482ffcfae7249643da9e9181f59caff7d778ffcc39b371f8a6727177"}, "downloads": -1, "filename": "jax_md-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "47d225ecef244e0ecc306ba07704af80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 41887, "upload_time": "2020-02-14T00:32:30", "upload_time_iso_8601": "2020-02-14T00:32:30.029668Z", "url": "https://files.pythonhosted.org/packages/94/8f/ec2723ecad201ed03ebd9d42a998cfc80a524c933cf3b690098eab5a0a0c/jax_md-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9eb34314db6cc56bc1be17339617b090", "sha256": "562bfeb21a605ea7c8d8ef91121d2644508a0f5c26d9ba669e39045d01720e2a"}, "downloads": -1, "filename": "jax-md-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9eb34314db6cc56bc1be17339617b090", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 33286, "upload_time": "2020-02-14T00:32:33", "upload_time_iso_8601": "2020-02-14T00:32:33.297481Z", "url": "https://files.pythonhosted.org/packages/c3/fe/95ce6ce6875fe9b7172d5197d015b51de573c6583aabae8fd7b4a98b6f7d/jax-md-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ee70df85f21767d550cb55fb8c060a2a", "sha256": "02bb078d4beb369c6331bb1f69d6c18edb5b2e5a5ad0aff0d22c5e3ac0774cc4"}, "downloads": -1, "filename": "jax_md-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee70df85f21767d550cb55fb8c060a2a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 42149, "upload_time": "2020-03-26T22:59:30", "upload_time_iso_8601": "2020-03-26T22:59:30.100137Z", "url": "https://files.pythonhosted.org/packages/2d/94/81b7b297e0909d8d20d0b6fb6a2c45d0af2f5e10709948e3ae8d6d4616f0/jax_md-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a004317bfced2cefc3ecf7026d26c21", "sha256": "1751cd157d1055c78c0be3363931720d92d61ff9539bd928e3303e27e24c6ed7"}, "downloads": -1, "filename": "jax-md-0.1.2.tar.gz", "has_sig": false, "md5_digest": "1a004317bfced2cefc3ecf7026d26c21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 33593, "upload_time": "2020-03-26T22:59:31", "upload_time_iso_8601": "2020-03-26T22:59:31.629286Z", "url": "https://files.pythonhosted.org/packages/6f/34/eed5d89c1ffbf3836893c6b0d8801659469cff253503b28099c8b217c19d/jax-md-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c0246d2aeb59af1c8e2be873946623c1", "sha256": "62aa06329c5d625e92a0c67eba2ffa6c18fc4738a6e9f1e436489d3706f52da7"}, "downloads": -1, "filename": "jax_md-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c0246d2aeb59af1c8e2be873946623c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 42115, "upload_time": "2020-04-15T18:53:22", "upload_time_iso_8601": "2020-04-15T18:53:22.317621Z", "url": "https://files.pythonhosted.org/packages/4a/86/72daae3d6eeae87a8a3a379036afbb484bd0ca49786b511d1893930b06cd/jax_md-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "424dad716c06622ff91f1cc2d5c5ce53", "sha256": "adf5f6097e96dcbc466e9a7453d6883f44d6409e86e7fc9634f4421b717005ed"}, "downloads": -1, "filename": "jax-md-0.1.3.tar.gz", "has_sig": false, "md5_digest": "424dad716c06622ff91f1cc2d5c5ce53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 33561, "upload_time": "2020-04-15T18:53:23", "upload_time_iso_8601": "2020-04-15T18:53:23.574114Z", "url": "https://files.pythonhosted.org/packages/ec/ed/20c0a77968b0ab4ad34948c5b53ab17b5a3acc209e6af2ffcfa2d7d62433/jax-md-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b4a2f5e7a8eafd2f8047b680668fe9ea", "sha256": "825375f8c8462a2329789325a16a50c740ed5bfa102205609b346ed780d10ad7"}, "downloads": -1, "filename": "jax_md-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4a2f5e7a8eafd2f8047b680668fe9ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 44073, "upload_time": "2020-05-01T16:49:23", "upload_time_iso_8601": "2020-05-01T16:49:23.260578Z", "url": "https://files.pythonhosted.org/packages/df/75/89c653ecc9789dd5beb52de6cec9e2ecdcaa54457d83ea5211f491cffe24/jax_md-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae5d39e61055fbcaa811520208c3c9fd", "sha256": "18e1ecf5e76f2e16c9fe9c17e37949f5799984bc82b8f3600cf1b0433a4ac38c"}, "downloads": -1, "filename": "jax-md-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ae5d39e61055fbcaa811520208c3c9fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 34321, "upload_time": "2020-05-01T16:49:24", "upload_time_iso_8601": "2020-05-01T16:49:24.843504Z", "url": "https://files.pythonhosted.org/packages/73/8d/94b50eb8727f755e2312f92c40e92aa5ca2cec15bbeb56c346ff8230bd1a/jax-md-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4a2f5e7a8eafd2f8047b680668fe9ea", "sha256": "825375f8c8462a2329789325a16a50c740ed5bfa102205609b346ed780d10ad7"}, "downloads": -1, "filename": "jax_md-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4a2f5e7a8eafd2f8047b680668fe9ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 44073, "upload_time": "2020-05-01T16:49:23", "upload_time_iso_8601": "2020-05-01T16:49:23.260578Z", "url": "https://files.pythonhosted.org/packages/df/75/89c653ecc9789dd5beb52de6cec9e2ecdcaa54457d83ea5211f491cffe24/jax_md-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae5d39e61055fbcaa811520208c3c9fd", "sha256": "18e1ecf5e76f2e16c9fe9c17e37949f5799984bc82b8f3600cf1b0433a4ac38c"}, "downloads": -1, "filename": "jax-md-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ae5d39e61055fbcaa811520208c3c9fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 34321, "upload_time": "2020-05-01T16:49:24", "upload_time_iso_8601": "2020-05-01T16:49:24.843504Z", "url": "https://files.pythonhosted.org/packages/73/8d/94b50eb8727f755e2312f92c40e92aa5ca2cec15bbeb56c346ff8230bd1a/jax-md-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:02 2020"}