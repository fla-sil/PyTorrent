{"info": {"author": "Arkadiusz Dzi\u0119giel", "author_email": "arkadiusz.dziegiel@glorpen.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============\nGlorpen Config\n==============\n\n.. image:: https://travis-ci.org/glorpen/glorpen-config.svg?branch=master\n    :target: https://travis-ci.org/glorpen/glorpen-config\n.. image:: https://readthedocs.org/projects/glorpen-config/badge/?version=latest\n    :target: https://glorpen-config.readthedocs.io/en/latest/\n\nConfig framework for Your projects - with validation, interpolation and value normalization!\n\nFull documentation: https://glorpen-config.readthedocs.io/\n\nOfficial repositories\n=====================\n\nGitHub: https://github.com/glorpen/glorpen-config\n\nBitBucket: https://bitbucket.org/glorpen/glorpen-config\n\nFeatures\n========\n\nYou can:\n\n- create custom fields for custom data\n- define configuration schema inside Python app\n- convert configuration values to Python objects\n- validate configuration\n- use interpolation to fill config values\n- set default values\n\nLoading data\n------------\n\n``glorpen.config.Config`` uses ``glorpen.config.loaders`` to allow loading data from different sources.\n\nLoaders should accept:\n\n- path, ``filepath`` constructor argument\n- file-like object, ``fileobj`` constructor argument\n\nAdditionally you can just pass ``dict`` data to config with ``glorpen.config.Config.load_data`` or ``glorpen.config.Config.finalize``.\n\nInterpolation\n-------------\n\nYou can reuse values from config with ``{{ path.to.value }}`` notation, eg:\n\n.. code-block:: yaml\n\n   project:\n      path: \"/tmp\"\n      cache_path: \"{{ project.path }}/cache\"\n\nString interpolation currently can be used only with ``glorpen.config.fields.simple.String`` fields.\n\nNormalization and validation\n----------------------------\n\nEach field type has own normalization rules, eg. for ``glorpen.config.fields.log.LogLevel``:\n\n.. code-block:: yaml\n\n   logging: DEBUG\n\n``config.get(\"logging\")`` would yield value ``10`` as is ``logging.DEBUG``. \n\nAdditionally it will raise ``glorpen.config.exceptions.ValidationError`` if invalid level name is given.\n\nDefault values\n--------------\n\nEach field can have default value. If no value is given in config but default one is set, it will be used instead.\n\nDefault values adhere to same interpolation and normalization rules - each default value is denormalized and then passed to normalizers.\nThat way complex object can still profit from config interpolation. There should not be any real impact on performance as it is done only once.\n\nExample usage\n=============\n\nYour first step should be defining configuration schema:\n\n.. code-block:: python\n\n   import logging\n   import glorpen.config.fields.simple as f\n   from glorpen.config.fields.log import LogLevel\n\n   project_path = \"/tmp/project\"\n\n   spec = f.Dict({\n     \"project_path\": f.Path(default=project_path),\n     \"project_cache_path\": f.Path(default=\"{{ project_path }}/cache\"),\n     \"logging\": LogLevel(default=logging.INFO),\n     \"database\": f.String(),\n     \"sources\": f.Dict({\n         \"some_param\": f.String(),\n         \"some_path\": f.Path(),\n     }),\n     \"maybe_string\": f.Variant([\n         f.String(),\n         f.Number()\n     ])\n   })\n\nExample yaml config:\n\n.. code-block:: yaml\n\n   logging: \"DEBUG\"\n   database: \"mysql://....\"\n   sources:\n     some_param: \"some param\"\n     some_path: \"/tmp\"\n   maybe_string: 12\n\nThen you can create ``glorpen.config.Config`` instance:\n\n.. code-block:: python\n\n   from glorpen.config import Config\n   import glorpen.config.loaders as loaders\n\n   loader = loaders.YamlLoader(filepath=config_path)\n   cfg = Config(loader=loader, spec=spec).finalize()\n\n   cfg.get(\"sources.some_param\") #=> 'some param'\n   cfg.get(\"project_path\") #=> '/tmp/project'\n   cfg.get(\"project_cache_path\") #=> '/tmp/project/cache'\n   cfg.get(\"logging\") #=> 10\n   cfg.get(\"maybe_string\") #=> 12\n\nCreating custom fields\n======================\n\nCustom field class should extend ``glorpen.config.fields.base.Field`` or ``glorpen.config.fields.base.FieldWithDefault``.\n\n``glorpen.config.fields.base.Field.make_resolvable`` method should register normalizer functions which later will be called in registration order.\nEach value returned by normalizer is passed to next one. After chain end value is returned as config value.\n\nReturned ``glorpen.config.fields.base.ResolvableObject`` instance is resolved before passing it to next normalizer.\n\nIf value passed to normalizator is invalid it should raise ``glorpen.config.exceptions.ValidationError``.\nSometimes value can be lazy loaded - it is represented as ``glorpen.config.fields.base.ResolvableObject``.\nYou can get real value by using ``glorpen.config.fields.base.resolve(value, config)``.\n\n.. code-block:: python\n\n   class MyValue(object):\n      def __init__(self, value):\n         super(MyValue, self).__init__()\n         self.value = value\n\n   class MyField(Field):\n\n       def to_my_value(self, value, config):\n           return MyValue(value)\n\n       def is_value_supported(self, value):\n           return True\n\n       def make_resolvable(self, r):\n           r.on_resolve(self.to_my_value)\n\nThe last thing is to use prepared custom field in configuration spec.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/glorpen/glorpen-config", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "glorpen-config", "package_url": "https://pypi.org/project/glorpen-config/", "platform": "", "project_url": "https://pypi.org/project/glorpen-config/", "project_urls": {"Homepage": "https://github.com/glorpen/glorpen-config"}, "release_url": "https://pypi.org/project/glorpen-config/2.2.0/", "requires_dist": ["six (>=1.9)"], "requires_python": "", "summary": "Loads, validates and normalizes configuration.", "version": "2.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/glorpen/glorpen-config\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/glorpen/glorpen-config.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41cd5c782904cd57d1ffc44f35e9b3ebedcb6267/68747470733a2f2f7472617669732d63692e6f72672f676c6f7270656e2f676c6f7270656e2d636f6e6669672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://glorpen-config.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/glorpen-config/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c61b71497876a00ebd86c521e943b57dc6f8b837/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f676c6f7270656e2d636f6e6669672f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Config framework for Your projects - with validation, interpolation and value normalization!</p>\n<p>Full documentation: <a href=\"https://glorpen-config.readthedocs.io/\" rel=\"nofollow\">https://glorpen-config.readthedocs.io/</a></p>\n<div id=\"official-repositories\">\n<h2>Official repositories</h2>\n<p>GitHub: <a href=\"https://github.com/glorpen/glorpen-config\" rel=\"nofollow\">https://github.com/glorpen/glorpen-config</a></p>\n<p>BitBucket: <a href=\"https://bitbucket.org/glorpen/glorpen-config\" rel=\"nofollow\">https://bitbucket.org/glorpen/glorpen-config</a></p>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>You can:</p>\n<ul>\n<li>create custom fields for custom data</li>\n<li>define configuration schema inside Python app</li>\n<li>convert configuration values to Python objects</li>\n<li>validate configuration</li>\n<li>use interpolation to fill config values</li>\n<li>set default values</li>\n</ul>\n<div id=\"loading-data\">\n<h3>Loading data</h3>\n<p><tt>glorpen.config.Config</tt> uses <tt>glorpen.config.loaders</tt> to allow loading data from different sources.</p>\n<p>Loaders should accept:</p>\n<ul>\n<li>path, <tt>filepath</tt> constructor argument</li>\n<li>file-like object, <tt>fileobj</tt> constructor argument</li>\n</ul>\n<p>Additionally you can just pass <tt>dict</tt> data to config with <tt>glorpen.config.Config.load_data</tt> or <tt>glorpen.config.Config.finalize</tt>.</p>\n</div>\n<div id=\"interpolation\">\n<h3>Interpolation</h3>\n<p>You can reuse values from config with <tt>{{ path.to.value }}</tt> notation, eg:</p>\n<pre><span class=\"nt\">project</span><span class=\"p\">:</span>\n   <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp\"</span>\n   <span class=\"nt\">cache_path</span><span class=\"p\">:</span> <span class=\"s\">\"{{</span><span class=\"nv\"> </span><span class=\"s\">project.path</span><span class=\"nv\"> </span><span class=\"s\">}}/cache\"</span>\n</pre>\n<p>String interpolation currently can be used only with <tt>glorpen.config.fields.simple.String</tt> fields.</p>\n</div>\n<div id=\"normalization-and-validation\">\n<h3>Normalization and validation</h3>\n<p>Each field type has own normalization rules, eg. for <tt>glorpen.config.fields.log.LogLevel</tt>:</p>\n<pre><span class=\"nt\">logging</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DEBUG</span>\n</pre>\n<p><tt><span class=\"pre\">config.get(\"logging\")</span></tt> would yield value <tt>10</tt> as is <tt>logging.DEBUG</tt>.</p>\n<p>Additionally it will raise <tt>glorpen.config.exceptions.ValidationError</tt> if invalid level name is given.</p>\n</div>\n<div id=\"default-values\">\n<h3>Default values</h3>\n<p>Each field can have default value. If no value is given in config but default one is set, it will be used instead.</p>\n<p>Default values adhere to same interpolation and normalization rules - each default value is denormalized and then passed to normalizers.\nThat way complex object can still profit from config interpolation. There should not be any real impact on performance as it is done only once.</p>\n</div>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>Your first step should be defining configuration schema:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glorpen.config.fields.simple</span> <span class=\"k\">as</span> <span class=\"nn\">f</span>\n<span class=\"kn\">from</span> <span class=\"nn\">glorpen.config.fields.log</span> <span class=\"kn\">import</span> <span class=\"n\">LogLevel</span>\n\n<span class=\"n\">project_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/tmp/project\"</span>\n\n<span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">({</span>\n  <span class=\"s2\">\"project_path\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">project_path</span><span class=\"p\">),</span>\n  <span class=\"s2\">\"project_cache_path\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"{{ project_path }}/cache\"</span><span class=\"p\">),</span>\n  <span class=\"s2\">\"logging\"</span><span class=\"p\">:</span> <span class=\"n\">LogLevel</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">),</span>\n  <span class=\"s2\">\"database\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span>\n  <span class=\"s2\">\"sources\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">({</span>\n      <span class=\"s2\">\"some_param\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span>\n      <span class=\"s2\">\"some_path\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(),</span>\n  <span class=\"p\">}),</span>\n  <span class=\"s2\">\"maybe_string\"</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Variant</span><span class=\"p\">([</span>\n      <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span>\n      <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">Number</span><span class=\"p\">()</span>\n  <span class=\"p\">])</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Example yaml config:</p>\n<pre><span class=\"nt\">logging</span><span class=\"p\">:</span> <span class=\"s\">\"DEBUG\"</span>\n<span class=\"nt\">database</span><span class=\"p\">:</span> <span class=\"s\">\"mysql://....\"</span>\n<span class=\"nt\">sources</span><span class=\"p\">:</span>\n  <span class=\"nt\">some_param</span><span class=\"p\">:</span> <span class=\"s\">\"some</span><span class=\"nv\"> </span><span class=\"s\">param\"</span>\n  <span class=\"nt\">some_path</span><span class=\"p\">:</span> <span class=\"s\">\"/tmp\"</span>\n<span class=\"nt\">maybe_string</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">12</span>\n</pre>\n<p>Then you can create <tt>glorpen.config.Config</tt> instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">glorpen.config</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">glorpen.config.loaders</span> <span class=\"k\">as</span> <span class=\"nn\">loaders</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">loaders</span><span class=\"o\">.</span><span class=\"n\">YamlLoader</span><span class=\"p\">(</span><span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">config_path</span><span class=\"p\">)</span>\n<span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"n\">spec</span><span class=\"o\">=</span><span class=\"n\">spec</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">finalize</span><span class=\"p\">()</span>\n\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"sources.some_param\"</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 'some param'</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"project_path\"</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; '/tmp/project'</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"project_cache_path\"</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; '/tmp/project/cache'</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"logging\"</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 10</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"maybe_string\"</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; 12</span>\n</pre>\n</div>\n<div id=\"creating-custom-fields\">\n<h2>Creating custom fields</h2>\n<p>Custom field class should extend <tt>glorpen.config.fields.base.Field</tt> or <tt>glorpen.config.fields.base.FieldWithDefault</tt>.</p>\n<p><tt>glorpen.config.fields.base.Field.make_resolvable</tt> method should register normalizer functions which later will be called in registration order.\nEach value returned by normalizer is passed to next one. After chain end value is returned as config value.</p>\n<p>Returned <tt>glorpen.config.fields.base.ResolvableObject</tt> instance is resolved before passing it to next normalizer.</p>\n<p>If value passed to normalizator is invalid it should raise <tt>glorpen.config.exceptions.ValidationError</tt>.\nSometimes value can be lazy loaded - it is represented as <tt>glorpen.config.fields.base.ResolvableObject</tt>.\nYou can get real value by using <tt>glorpen.config.fields.base.resolve(value, config)</tt>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyValue</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n      <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyValue</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyField</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_my_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">MyValue</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_value_supported</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_resolvable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">):</span>\n        <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">on_resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_my_value</span><span class=\"p\">)</span>\n</pre>\n<p>The last thing is to use prepared custom field in configuration spec.</p>\n</div>\n\n          </div>"}, "last_serial": 6565443, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "486b4b057f04379e53c8d6f07c7aa73e", "sha256": "163735a77d848119a0181c426d55b6c7c5eb4b6f86bbf935603fc770773c9c22"}, "downloads": -1, "filename": "glorpen_config-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "486b4b057f04379e53c8d6f07c7aa73e", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 10365, "upload_time": "2015-12-15T23:43:01", "upload_time_iso_8601": "2015-12-15T23:43:01.626529Z", "url": "https://files.pythonhosted.org/packages/31/c5/52f98282461de74bc539beeb6f520448c2dddfe6720323a528e101131ad4/glorpen_config-1.0.1-py2.py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "daab2a5245d67946e9f886682c494311", "sha256": "317db8e43239c811c1bdbf9ef09a9e9176f6fc9ef44e71f63005c80fc06d2114"}, "downloads": -1, "filename": "glorpen_config-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "daab2a5245d67946e9f886682c494311", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10385, "upload_time": "2018-10-26T07:29:05", "upload_time_iso_8601": "2018-10-26T07:29:05.935962Z", "url": "https://files.pythonhosted.org/packages/7d/97/fd90426c24fdf56610f0e57b6f73fe79374d0bc88e5c9790ba2d6a8524e6/glorpen_config-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4af6ed8025aacc222bd2adbd8e672125", "sha256": "a74be8d39f3bc012acbd25f7ed54e19ce7a70e0008691169df0f669895f3e5ef"}, "downloads": -1, "filename": "glorpen-config-2.0.0.tar.gz", "has_sig": false, "md5_digest": "4af6ed8025aacc222bd2adbd8e672125", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10208, "upload_time": "2018-10-26T07:29:07", "upload_time_iso_8601": "2018-10-26T07:29:07.564572Z", "url": "https://files.pythonhosted.org/packages/5c/02/bd2699b6775d9d56f5ef08830cbeb70efeb0f22a66c7fbb78eb3e35d2b53/glorpen-config-2.0.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "171cb3085cfe1274697270a0355ac5f2", "sha256": "b0a41bad55dc0088170b4dce50c554510b85edb36b885077aad34b39d7c9cb1e"}, "downloads": -1, "filename": "glorpen_config-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "171cb3085cfe1274697270a0355ac5f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12416, "upload_time": "2019-01-20T10:07:00", "upload_time_iso_8601": "2019-01-20T10:07:00.908945Z", "url": "https://files.pythonhosted.org/packages/0b/41/14bfc8bfd771e2df9ebd2b5cedf0b591120bb16e49e07fd8ad03459d0d0c/glorpen_config-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "920079b1da6f900a81ce49e36b3003fd", "sha256": "f2c71b06dcdd89baef2dcb9e682f44007b7cf6b628516a28c1785cdbabfaa578"}, "downloads": -1, "filename": "glorpen-config-2.1.1.tar.gz", "has_sig": false, "md5_digest": "920079b1da6f900a81ce49e36b3003fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10786, "upload_time": "2019-01-20T10:07:02", "upload_time_iso_8601": "2019-01-20T10:07:02.251776Z", "url": "https://files.pythonhosted.org/packages/39/06/6758ae354b70745573659fe92be6dfc6d2fe482e5e1abaf433de91769a9b/glorpen-config-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "141a999aafa177bbd821103abf2cce6a", "sha256": "fbdbedf0370af840a06fb3268debf63ad6cc3811cadda55eaba5a22246109b18"}, "downloads": -1, "filename": "glorpen_config-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "141a999aafa177bbd821103abf2cce6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12611, "upload_time": "2020-02-03T23:13:59", "upload_time_iso_8601": "2020-02-03T23:13:59.761625Z", "url": "https://files.pythonhosted.org/packages/b2/10/f9a0b81864e0162c127e12c39936ff1b6ab7a9e8cc62f336412a2b962888/glorpen_config-2.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7931b6f9987f45cfd834874b73f69890", "sha256": "7bdeaaf0ba582397f2fb7231273139da61f30d1ca729ce4a4a44575b3d1e83f6"}, "downloads": -1, "filename": "glorpen-config-2.2.0.tar.gz", "has_sig": false, "md5_digest": "7931b6f9987f45cfd834874b73f69890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10834, "upload_time": "2020-02-03T23:14:01", "upload_time_iso_8601": "2020-02-03T23:14:01.428560Z", "url": "https://files.pythonhosted.org/packages/af/14/162f6791c3fc5a3e833222bf03f86203135c379f059f5e3f727a2ec963d8/glorpen-config-2.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "141a999aafa177bbd821103abf2cce6a", "sha256": "fbdbedf0370af840a06fb3268debf63ad6cc3811cadda55eaba5a22246109b18"}, "downloads": -1, "filename": "glorpen_config-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "141a999aafa177bbd821103abf2cce6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12611, "upload_time": "2020-02-03T23:13:59", "upload_time_iso_8601": "2020-02-03T23:13:59.761625Z", "url": "https://files.pythonhosted.org/packages/b2/10/f9a0b81864e0162c127e12c39936ff1b6ab7a9e8cc62f336412a2b962888/glorpen_config-2.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7931b6f9987f45cfd834874b73f69890", "sha256": "7bdeaaf0ba582397f2fb7231273139da61f30d1ca729ce4a4a44575b3d1e83f6"}, "downloads": -1, "filename": "glorpen-config-2.2.0.tar.gz", "has_sig": false, "md5_digest": "7931b6f9987f45cfd834874b73f69890", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10834, "upload_time": "2020-02-03T23:14:01", "upload_time_iso_8601": "2020-02-03T23:14:01.428560Z", "url": "https://files.pythonhosted.org/packages/af/14/162f6791c3fc5a3e833222bf03f86203135c379f059f5e3f727a2ec963d8/glorpen-config-2.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:30 2020"}