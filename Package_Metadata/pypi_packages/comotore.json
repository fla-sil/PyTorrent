{"info": {"author": "Zaglyadskiy Alexander", "author_email": "rlllx33@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries"], "description": "Comotore\n========\n\n`Comotore` - component engine library - simple actor model realisation.\n\nExamples\n--------\n\n`Client/server example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Client(Component):\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n\n            self._name = kwargs.get(\"name\", None)\n\n        async def construct(self):\n            async def process():\n                req = await self.request(\"{name}\".format(name=self._name))\n                async for res in req.response():\n                    self.logger[\"Client\"].info(\n                        \"Response {name}\".format(name=self._name), corr_id=req.correlation_id, payload=res\n                    )\n                self.logger[\"Client\"].info(\"Responses completed {name}\".format(name=self._name))\n                await self.completed()\n\n            self.fly(process())\n\n        @Component.signal\n        def request(self, data):\n            pass\n\n        @Component.signal\n        def completed(self, _):\n            pass\n\n\n    class Server(Component):\n        def __init__(self, **kwargs):\n            super().__init__(**kwargs)\n\n            self._name = kwargs.get(\"name\", None)\n\n        async def response(self, request):\n            self.logger[\"Server\"].info(\"Request\", payload=request.payload)\n            for i in range(2):\n                yield \"{name} {payload} {number}\".format(name=self._name, payload=request.payload, number=i)\n                await asyncio.sleep(1)\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        server_first = engine.component(Server, name=\"first\")\n        server_second = engine.component(Server, name=\"second\")\n        client = engine.component(\n            Client, name=\"client_1\",\n            start_waiting_for=[server_first.started, server_second.started]\n        )\n        engine.call(client.request, server_first.response)\n        engine.call(client.request, server_second.response)\n        engine.cast(client.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n\n`Producer/consumer example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import uuid\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Producer(Component):\n        async def construct(self):\n            async def produce():\n                try:\n                    i = 0\n                    while True:\n                        payload = uuid.uuid4()\n                        await self.produced(payload)\n                        self.logger[\"Producer\"].info(\"Produce\", payload=payload)\n                        await asyncio.sleep(2)\n                        i += 1\n                        if i > 2:\n                            break\n                    await self.completed()\n                except asyncio.CancelledError:\n                    pass\n\n            self.fly(produce())\n\n        @Component.signal\n        def produced(self, uniq_id):\n            pass\n\n        @Component.signal\n        def completed(self, _):\n            pass\n\n\n    class Consumer(Component):\n        async def consume1(self, signal):\n            self.logger[\"Consumer\"].info(\"Consume 1\", payload=signal.payload)\n\n        async def consume2(self, signal):\n            self.logger[\"Consumer\"].info(\"Consume 2\", payload=signal.payload)\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        consumer = engine.component(Consumer)\n        producer = engine.component(Producer, start_waiting_for=[consumer.started])\n        engine.cast(producer.produced, consumer.consume1)\n        engine.cast(producer.produced, consumer.consume2)\n        engine.cast(producer.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n`Invoke example`\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n    import sys\n\n    from comotore import (Engine, Component)\n    from comotore.logging.formatters import PlainFormatter\n    from comotore import runner\n\n\n    class Worker(Component):\n        @Component.signal\n        def completed(self):\n            pass\n\n        async def cast_work(self, signal):\n            self.logger[\"Worker\"].info(\"Cast work was invoked with\", payload=signal.payload)\n            await self.completed()\n\n        async def call_work(self, signal):\n            self.logger[\"Worker\"].info(\"Call work was invoked with\", payload=signal.payload)\n            for i in range(2):\n                yield \"Call work response {number}\".format(number=i)\n                await asyncio.sleep(1)\n\n\n    async def invoker(eng, cast_target, call_target):\n        eng.logger[\"Invoker\"].info(\"Invoke in 2 seconds\")\n        await asyncio.sleep(2)\n        eng.logger[\"Invoker\"].info(\"Invoke call\")\n        req = await eng.invoke_call(call_target, payload=\"Some call data\")\n        async for res in req.response():\n            eng.logger[\"Invoker\"].info(res)\n        await eng.invoke_cast(cast_target, payload=\"Some cast data\")\n\n\n    async def main():\n        engine = Engine()\n\n        engine.logger.setLevel(logging.INFO)\n        handler = logging.StreamHandler(sys.stderr)\n        formatter = PlainFormatter(\n            \"{asctime} - {levelname}: [{tag}] hostname={hostname}, pid={process}, tid={thread}> {message} {data}\", style=\"{\"\n        )\n        handler.setFormatter(formatter)\n        engine.logger.addHandler(handler)\n\n        worker = engine.component(Worker)\n        engine.cast(worker.completed, engine.avatar.quit)\n\n        print(engine)\n        print(\"-\" * 40)\n        asyncio.ensure_future(invoker(engine, worker.cast_work, worker.call_work), loop=engine.loop)\n        await engine\n\n    if __name__ == \"__main__\":\n        runner.run(main())\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "The MIT License", "maintainer": "", "maintainer_email": "", "name": "comotore", "package_url": "https://pypi.org/project/comotore/", "platform": "", "project_url": "https://pypi.org/project/comotore/", "project_urls": null, "release_url": "https://pypi.org/project/comotore/19.12.2/", "requires_dist": ["async-timeout (<4,>=3.0.1)"], "requires_python": "", "summary": "comotore - component engine library - simple actor model realisation", "version": "19.12.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>Comotore</cite> - component engine library - simple actor model realisation.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><cite>Client/server example</cite></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"n\">Component</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore.logging.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">PlainFormatter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"n\">runner</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">construct</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">():</span>\n            <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">))</span>\n            <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Client\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"Response </span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">),</span> <span class=\"n\">corr_id</span><span class=\"o\">=</span><span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">correlation_id</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">res</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Client\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Responses completed </span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">))</span>\n            <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fly</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n    <span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n    <span class=\"k\">def</span> <span class=\"nf\">completed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Server</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Server\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Request\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"s2\">\"</span><span class=\"si\">{name}</span><span class=\"s2\"> </span><span class=\"si\">{payload}</span><span class=\"s2\"> </span><span class=\"si\">{number}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"p\">()</span>\n\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">PlainFormatter</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"</span><span class=\"si\">{asctime}</span><span class=\"s2\"> - </span><span class=\"si\">{levelname}</span><span class=\"s2\">: [</span><span class=\"si\">{tag}</span><span class=\"s2\">] hostname=</span><span class=\"si\">{hostname}</span><span class=\"s2\">, pid=</span><span class=\"si\">{process}</span><span class=\"s2\">, tid=</span><span class=\"si\">{thread}</span><span class=\"s2\">&gt; </span><span class=\"si\">{message}</span><span class=\"s2\"> </span><span class=\"si\">{data}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">\"{\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"n\">server_first</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">Server</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"first\"</span><span class=\"p\">)</span>\n    <span class=\"n\">server_second</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">Server</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"second\"</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span>\n        <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"client_1\"</span><span class=\"p\">,</span>\n        <span class=\"n\">start_waiting_for</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">server_first</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"p\">,</span> <span class=\"n\">server_second</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">server_first</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">server_second</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">avatar</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">engine</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p><cite>Producer/consumer example</cite></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"n\">Component</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore.logging.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">PlainFormatter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"n\">runner</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Producer</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">construct</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">produce</span><span class=\"p\">():</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n                <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()</span>\n                    <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">produced</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Producer\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Produce\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n                    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                    <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                        <span class=\"k\">break</span>\n                <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">CancelledError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fly</span><span class=\"p\">(</span><span class=\"n\">produce</span><span class=\"p\">())</span>\n\n    <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n    <span class=\"k\">def</span> <span class=\"nf\">produced</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">uniq_id</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n    <span class=\"k\">def</span> <span class=\"nf\">completed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Consumer</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Consumer\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Consume 1\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">consume2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Consumer\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Consume 2\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"p\">()</span>\n\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">PlainFormatter</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"</span><span class=\"si\">{asctime}</span><span class=\"s2\"> - </span><span class=\"si\">{levelname}</span><span class=\"s2\">: [</span><span class=\"si\">{tag}</span><span class=\"s2\">] hostname=</span><span class=\"si\">{hostname}</span><span class=\"s2\">, pid=</span><span class=\"si\">{process}</span><span class=\"s2\">, tid=</span><span class=\"si\">{thread}</span><span class=\"s2\">&gt; </span><span class=\"si\">{message}</span><span class=\"s2\"> </span><span class=\"si\">{data}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">\"{\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">Consumer</span><span class=\"p\">)</span>\n    <span class=\"n\">producer</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">Producer</span><span class=\"p\">,</span> <span class=\"n\">start_waiting_for</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">started</span><span class=\"p\">])</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">produced</span><span class=\"p\">,</span> <span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">consume1</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">produced</span><span class=\"p\">,</span> <span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">consume2</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">producer</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">avatar</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">engine</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p><cite>Invoke example</cite></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Engine</span><span class=\"p\">,</span> <span class=\"n\">Component</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore.logging.formatters</span> <span class=\"kn\">import</span> <span class=\"n\">PlainFormatter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">comotore</span> <span class=\"kn\">import</span> <span class=\"n\">runner</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Worker</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">):</span>\n    <span class=\"nd\">@Component</span><span class=\"o\">.</span><span class=\"n\">signal</span>\n    <span class=\"k\">def</span> <span class=\"nf\">completed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">cast_work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Worker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Cast work was invoked with\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">call_work</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signal</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Worker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Call work was invoked with\"</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"s2\">\"Call work response </span><span class=\"si\">{number}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">invoker</span><span class=\"p\">(</span><span class=\"n\">eng</span><span class=\"p\">,</span> <span class=\"n\">cast_target</span><span class=\"p\">,</span> <span class=\"n\">call_target</span><span class=\"p\">):</span>\n    <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Invoker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Invoke in 2 seconds\"</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Invoker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Invoke call\"</span><span class=\"p\">)</span>\n    <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">invoke_call</span><span class=\"p\">(</span><span class=\"n\">call_target</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"s2\">\"Some call data\"</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">res</span> <span class=\"ow\">in</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"p\">():</span>\n        <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"p\">[</span><span class=\"s2\">\"Invoker\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">eng</span><span class=\"o\">.</span><span class=\"n\">invoke_cast</span><span class=\"p\">(</span><span class=\"n\">cast_target</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"s2\">\"Some cast data\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"p\">()</span>\n\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n    <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">PlainFormatter</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"</span><span class=\"si\">{asctime}</span><span class=\"s2\"> - </span><span class=\"si\">{levelname}</span><span class=\"s2\">: [</span><span class=\"si\">{tag}</span><span class=\"s2\">] hostname=</span><span class=\"si\">{hostname}</span><span class=\"s2\">, pid=</span><span class=\"si\">{process}</span><span class=\"s2\">, tid=</span><span class=\"si\">{thread}</span><span class=\"s2\">&gt; </span><span class=\"si\">{message}</span><span class=\"s2\"> </span><span class=\"si\">{data}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">\"{\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"n\">worker</span> <span class=\"o\">=</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">component</span><span class=\"p\">(</span><span class=\"n\">Worker</span><span class=\"p\">)</span>\n    <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">completed</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">avatar</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"-\"</span> <span class=\"o\">*</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">invoker</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">cast_work</span><span class=\"p\">,</span> <span class=\"n\">worker</span><span class=\"o\">.</span><span class=\"n\">call_work</span><span class=\"p\">),</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">engine</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6324493, "releases": {"19.12.2": [{"comment_text": "", "digests": {"md5": "25e10cfb8a4a121682ce27d25688b40a", "sha256": "6b3ce833386718b2e1a5c5113ccd188bd447259b6e22c874366685403a502953"}, "downloads": -1, "filename": "comotore-19.12.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25e10cfb8a4a121682ce27d25688b40a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21348, "upload_time": "2019-12-18T09:40:18", "upload_time_iso_8601": "2019-12-18T09:40:18.505500Z", "url": "https://files.pythonhosted.org/packages/a3/e3/1359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca/comotore-19.12.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25e10cfb8a4a121682ce27d25688b40a", "sha256": "6b3ce833386718b2e1a5c5113ccd188bd447259b6e22c874366685403a502953"}, "downloads": -1, "filename": "comotore-19.12.2-py3-none-any.whl", "has_sig": false, "md5_digest": "25e10cfb8a4a121682ce27d25688b40a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21348, "upload_time": "2019-12-18T09:40:18", "upload_time_iso_8601": "2019-12-18T09:40:18.505500Z", "url": "https://files.pythonhosted.org/packages/a3/e3/1359d0aff7541f8c51b59e6329db7f32c65e998baec9bf1bb01ee853c3ca/comotore-19.12.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:44:18 2020"}