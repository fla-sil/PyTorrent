{"info": {"author": "Christian Lyder Jacobsen", "author_email": "christian@lyderjacobsen.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: JavaScript", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "FilterCoffee \n============\n\nFilterCoffee is a simple WSG middleware for compiling CoffeeScript to JavaScript\non the fly. It is intended for use in the development of WSGI applicatons, but\nfor deployed applications you should use some other strategy for delivering your\ncompiled CoffeeScript (e.g., write a script to compile all your CoffeeScripts to\nJavaScript).\n\nFilterCoffee caches the compiled CoffeeScripts in memory but will recompile\nscripts when they are modified. A CoffeeScript compilation error results in the\nrequest returning a ``500`` error containing the CoffeeScript error message in\nthe body. Error messages are also output to the ``wsgi.error`` stream so that\nthey will show up in your console or in your servers error log. \n\n\nInstallation\n------------\n\nFilterCoffee depends on CoffeeScript and in turn node.js. CoffeeScript expects\nthe ``coffee`` command to be available on the current PATH. See the installation\ninstructions for CoffeeScript for more information:\nhttp://coffeescript.org/#installation\n\nThere are a number of different ways to install CoffeeFilter:\n\nUsing PIP\n~~~~~~~~~\n\nThis is the preferred method. Run::\n\n  pip install filtercoffee\n\nFor an Individual Applicaiton\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCopy ``filtercoffee.py`` into an appropriate place in your WSGI applications\ncode.\n\nSystem Wide from Downloaded Source\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRun::\n\n  python setup.py install\n\nBasic Usage\n-----------\n\nYou can wrap your WSGI application in the FilterCoffee middleware like so\n(assuming that the variable ``app`` contains your WSGI application and the\nvariable ``debug`` is only set when the application is in development mode::\n\n  if debug:\n      import filtercoffee\n      app = filtercoffee.FilterCoffee(\n                  app,\n\t          static_dir='/path/to/static/files')\n\nFilterCoffee will now intercept any request that ends in ``.js`` and check if a\ncorresponding ``.coffee`` file exists. If a ``.coffee`` file exists it will be\ncompiled and the comiled output will be returned in the response (the compiled\noutput is also cached such that recompilation only occurs if the ``.coffee``\nfile changes). If no ``.coffee`` file exists, the original application is called\nto handle the request.\n\nAdvanced Usage\n--------------\n\nFilterCoffee has flexible support for deciding what it should consider a Coffee-\nor JavaScript. Check the arguments to FilterCoffee's ``__init__`` method.\n\nRelated Software\n----------------\n\n  http://github.com/dsc/coffeecup\n    Uses the ``coffee`` command's ``watch`` option to recompile files and leaves\n    the resulting JavaScript files in the file system. This is in contrast with\n    FilterCoffee which does its own caching and does not leave .js files in the\n    filesystem.\n\nChangelog\n=========\n\n0.3 Feb 01, 2012\n\n* Include README in source distribution\n\n0.2 Jan 25, 2012\n\n* Documentation Updates\n* PyPI\n\n0.1 Jan 17, 2012\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/downloads/clj/filtercoffee/filtercoffee-0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/clj/filtercoffee", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "filtercoffee", "package_url": "https://pypi.org/project/filtercoffee/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/filtercoffee/", "project_urls": {"Download": "https://github.com/downloads/clj/filtercoffee/filtercoffee-0.3.tar.gz", "Homepage": "http://github.com/clj/filtercoffee"}, "release_url": "https://pypi.org/project/filtercoffee/0.3/", "requires_dist": null, "requires_python": null, "summary": "A simple WSGI Middleware for compiling CoffeeScript to JavaScript on the fly", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"filtercoffee\">\n<h2>FilterCoffee</h2>\n<p>FilterCoffee is a simple WSG middleware for compiling CoffeeScript to JavaScript\non the fly. It is intended for use in the development of WSGI applicatons, but\nfor deployed applications you should use some other strategy for delivering your\ncompiled CoffeeScript (e.g., write a script to compile all your CoffeeScripts to\nJavaScript).</p>\n<p>FilterCoffee caches the compiled CoffeeScripts in memory but will recompile\nscripts when they are modified. A CoffeeScript compilation error results in the\nrequest returning a <tt>500</tt> error containing the CoffeeScript error message in\nthe body. Error messages are also output to the <tt>wsgi.error</tt> stream so that\nthey will show up in your console or in your servers error log.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>FilterCoffee depends on CoffeeScript and in turn node.js. CoffeeScript expects\nthe <tt>coffee</tt> command to be available on the current PATH. See the installation\ninstructions for CoffeeScript for more information:\n<a href=\"http://coffeescript.org/#installation\" rel=\"nofollow\">http://coffeescript.org/#installation</a></p>\n<p>There are a number of different ways to install CoffeeFilter:</p>\n<div id=\"using-pip\">\n<h4>Using PIP</h4>\n<p>This is the preferred method. Run:</p>\n<pre>pip install filtercoffee\n</pre>\n</div>\n<div id=\"for-an-individual-applicaiton\">\n<h4>For an Individual Applicaiton</h4>\n<p>Copy <tt>filtercoffee.py</tt> into an appropriate place in your WSGI applications\ncode.</p>\n</div>\n<div id=\"system-wide-from-downloaded-source\">\n<h4>System Wide from Downloaded Source</h4>\n<p>Run:</p>\n<pre>python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>You can wrap your WSGI application in the FilterCoffee middleware like so\n(assuming that the variable <tt>app</tt> contains your WSGI application and the\nvariable <tt>debug</tt> is only set when the application is in development mode:</p>\n<pre>if debug:\n    import filtercoffee\n    app = filtercoffee.FilterCoffee(\n                app,\n                static_dir='/path/to/static/files')\n</pre>\n<p>FilterCoffee will now intercept any request that ends in <tt>.js</tt> and check if a\ncorresponding <tt>.coffee</tt> file exists. If a <tt>.coffee</tt> file exists it will be\ncompiled and the comiled output will be returned in the response (the compiled\noutput is also cached such that recompilation only occurs if the <tt>.coffee</tt>\nfile changes). If no <tt>.coffee</tt> file exists, the original application is called\nto handle the request.</p>\n</div>\n<div id=\"advanced-usage\">\n<h3>Advanced Usage</h3>\n<p>FilterCoffee has flexible support for deciding what it should consider a Coffee-\nor JavaScript. Check the arguments to FilterCoffee\u2019s <tt>__init__</tt> method.</p>\n</div>\n<div id=\"related-software\">\n<h3>Related Software</h3>\n<blockquote>\n<dl>\n<dt><a href=\"http://github.com/dsc/coffeecup\" rel=\"nofollow\">http://github.com/dsc/coffeecup</a></dt>\n<dd>Uses the <tt>coffee</tt> command\u2019s <tt>watch</tt> option to recompile files and leaves\nthe resulting JavaScript files in the file system. This is in contrast with\nFilterCoffee which does its own caching and does not leave .js files in the\nfilesystem.</dd>\n</dl>\n</blockquote>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>0.3 Feb 01, 2012</p>\n<ul>\n<li>Include README in source distribution</li>\n</ul>\n<p>0.2 Jan 25, 2012</p>\n<ul>\n<li>Documentation Updates</li>\n<li>PyPI</li>\n</ul>\n<p>0.1 Jan 17, 2012</p>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1737058, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "5554871c43967133238795e4eb0ba603", "sha256": "cfed60df215c5a2cf8853ec734f4ef8253583dac3cd6b3dde8ae75ea78fb6024"}, "downloads": -1, "filename": "filtercoffee-0.2.tar.gz", "has_sig": false, "md5_digest": "5554871c43967133238795e4eb0ba603", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4204, "upload_time": "2015-09-24T21:05:24", "upload_time_iso_8601": "2015-09-24T21:05:24.756535Z", "url": "https://files.pythonhosted.org/packages/6f/85/627640ea561f00fb7f1fc3ba1f1baac1892c13f4f9db5d5e8ab3cd725800/filtercoffee-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "1435c8e33cf046ec4cb6ce31c8799f3d", "sha256": "9f11c646dcca224a12c9e922cb1342feecce0b3796d5466173ecc4e12f2fa2ea"}, "downloads": -1, "filename": "filtercoffee-0.3.tar.gz", "has_sig": false, "md5_digest": "1435c8e33cf046ec4cb6ce31c8799f3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4511, "upload_time": "2012-02-01T19:50:03", "upload_time_iso_8601": "2012-02-01T19:50:03.724048Z", "url": "https://files.pythonhosted.org/packages/6d/d8/fcead4c728d0bd658b0d643e42869f5e14a7b2dd79d26896949ac92fc37d/filtercoffee-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1435c8e33cf046ec4cb6ce31c8799f3d", "sha256": "9f11c646dcca224a12c9e922cb1342feecce0b3796d5466173ecc4e12f2fa2ea"}, "downloads": -1, "filename": "filtercoffee-0.3.tar.gz", "has_sig": false, "md5_digest": "1435c8e33cf046ec4cb6ce31c8799f3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4511, "upload_time": "2012-02-01T19:50:03", "upload_time_iso_8601": "2012-02-01T19:50:03.724048Z", "url": "https://files.pythonhosted.org/packages/6d/d8/fcead4c728d0bd658b0d643e42869f5e14a7b2dd79d26896949ac92fc37d/filtercoffee-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:29 2020"}