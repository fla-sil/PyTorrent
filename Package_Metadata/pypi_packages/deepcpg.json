{"info": {"author": "Christof Angermueller", "author_email": "cangermueller@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "========================================================================\nDeepCpG: Deep neural networks for predicting single-cell DNA methylation\n========================================================================\n\n|Version| |License| |PyPI| |Docs| |DOI| |Tweet|\n\n.. |Version| image:: https://img.shields.io/badge/python-2.7%2B%2C3.4%2B-green.svg\n  :target: https://www.python.org/\n\n.. |License| image:: https://img.shields.io/github/license/mashape/apistatus.svg\n  :target: https://github.com/cangermueller/deepcpg/tree/master/LICENSE\n\n.. |PyPI| image:: https://img.shields.io/badge/pypi-latest-orange.svg\n  :target: https://pypi.python.org/pypi/deepcpg\n\n.. |Docs| image:: https://img.shields.io/badge/docs-up--to--date-brightgreen.svg\n  :target: http://deepcpg.readthedocs.io\n\n.. |DOI| image:: https://zenodo.org/badge/68630079.svg\n   :target: https://zenodo.org/badge/latestdoi/68630079\n\n.. |Tweet| image:: https://img.shields.io/twitter/url/http/shields.io.svg?style=social\n  :target: https://twitter.com/intent/tweet?text=Checkout+%23DeepCpG%3A+%23DeepLearning+for+predicting+DNA+methylation%2C+%40cangermueller\n\nDeepCpG [1]_ is a deep neural network for predicting the methylation state of CpG dinucleotides in multiple cells. It allows to accurately impute incomplete DNA methylation profiles, to discover predictive sequence motifs, and to quantify the effect of sequence mutations. (`Angermueller et al, 2017 <http://dx.doi.org/10.1186/s13059-017-1189-z>`_).\n\n**Please help to improve DeepCpG**, by reporting bugs, typos in notebooks and documentation, or any ideas on how to make things better. You can submit an `issue <https://github.com/cangermueller/deepcpg/issues>`_ or send me an `email <mailto:cangermueller@gmail.com>`_.\n\n.. figure:: docs/source/fig1.png\n   :width: 640 px\n   :align: left\n   :alt: DeepCpG model architecture and applications\n\n   **DeepCpG model architecture and applications.**\n\n   \\(a\\) Sparse single-cell CpG profiles as obtained from scBS-seq or scRRBS-seq. Methylated CpG sites are denoted by ones, unmethylated CpG sites by zeros, and question marks denote CpG sites with unknown methylation state (missing data). (b) DeepCpG model architecture. The DNA model consists of two convolutional and pooling layers to identify predictive motifs from the local sequence context, and one fully connected layer to model motif interactions. The CpG model scans the CpG neighborhood of multiple cells (rows in b), using a bidirectional gated recurrent network (GRU), yielding compressed features in a vector of constant size. The Joint model learns interactions between higher-level features derived from the DNA- and CpG model to predict methylation states in all cells. (c, d) The trained DeepCpG model can be used for different downstream analyses, including genome-wide imputation of missing CpG sites (c) and the discovery of DNA sequence motifs that are associated with DNA methylation levels or cell-to-cell variability (d).\n\n\n.. [1] Angermueller, Christof, Heather J. Lee, Wolf Reik, and Oliver Stegle. *DeepCpG: Accurate Prediction of Single-Cell DNA Methylation States Using Deep Learning.* Genome Biology 18 (April 11, 2017): 67. doi:10.1186/s13059-017-1189-z.\n\n\nTable of contents\n=================\n* `News`_\n* `Installation`_\n* `Getting started`_\n* `Examples`_\n* `Model Zoo`_\n* `FAQ`_\n* `Content`_\n* `Changelog`_\n* `Contact`_\n\n\nNews\n====\n\n* **181201**: DeepCpG 1.0.7 released!\n* **180224**: DeepCpG 1.0.6 released!\n* **171112**: Keras 2 is now the main Keras version (release 1.0.5).\n* **170412**: New `notebook <./examples/notebooks/stats/index.ipynb>`_ on predicting inter-cell statistics!\n* **170414**: Added `dcpg_eval_perf.py <./scripts/dcpg_eval_perf.py>`_ and `dcpg_eval_perf.Rmd <./R/dcpg_eval_perf.Rmd>`_ for evaluating and visualizing prediction performances! Find an example in `this notebook <./examples/notebooks/basics/index.ipynb#Evaluating-prediction-performances>`_!\n* **170412**: New `notebook <./examples/notebooks/stats/index.ipynb>`_ on predicting inter-cell statistics!\n* **170410**: New `notebook <./examples/notebooks/snp/index.ipynb>`_ on estimating mutation effects!\n* **170406**: A short description of all `DeepCpG scripts <http://deepcpg.readthedocs.io/latest/scripts/index.html>`_!\n* **170404**: New guide on creating and analyzing DeepCpG data `released <http://deepcpg.readthedocs.io/latest/data.html>`_!\n* **170404**: Training on continuous data, e.g. from bulk experiments, now `supported <http://deepcpg.readthedocs.io/latest/data.html>`_!\n\n\nInstallation\n============\n\nThe easiest way to install DeepCpG is to use ``PyPI``:\n\n.. code:: bash\n\n  pip install deepcpg\n\nAlternatively, you can checkout the repository,\n\n.. code:: bash\n\n  git clone https://github.com/cangermueller/deepcpg.git\n\n\nand then install DeepCpG using ``setup.py``:\n\n.. code:: bash\n\n  python setup.py install\n\n\nGetting started\n===============\n\n1. Store known CpG methylation states of each cell into a tab-delimted file with the following columns:\n\n* Chromosome (without chr)\n* Position of the CpG site on the chromosome starting with one\n* Binary methylation state of the CpG sites (0=unmethylation, 1=methylated)\n\nExample:\n\n.. code::\n\n  1   3000827   1.0\n  1   3001007   0.0\n  1   3001018   1.0\n  ...\n  Y   90829839  1.0\n  Y   90829899  1.0\n  Y   90829918  0.0\n\n\n2. Run ``dcpg_data.py`` to create the input data for DeepCpG:\n\n.. code:: bash\n\n  dcpg_data.py\n  --cpg_profiles ./cpg/cell1.tsv ./cpg/cell2.tsv ./cpg/cell3.tsv\n  --dna_files ./dna/mm10\n  --cpg_wlen 50\n  --dna_wlen 1001\n  --out_dir ./data\n\n``./cpg/cell[123].tsv`` store the methylation data from step 1., ``./dna`` contains the DNA database, e.g. `mm10 <http://ftp.ensembl.org/pub/release-85/fasta/mus_musculus/dna/>`_ for mouse or `hg38 <http://ftp.ensembl.org/pub/release-86/fasta/homo_sapiens/dna/>`_ for human, and output data files will be stored in ``./data``.\n\n\n3. Fine-tune a pre-trained model or train your own model from scratch with ``dcpg_train.py``:\n\n.. code:: bash\n\n  dcpg_train.py\n    ./data/c{1,3,6,7,9}_*.h5\n    --val_data ./data/c{13,14,15,16,17,18,19}_*.h5\n    --dna_model CnnL2h128\n    --cpg_model RnnL1\n    --joint_model JointL2h512\n    --nb_epoch 30\n    --out_dir ./model\n\nThis command uses chromosomes 1-3 for training and 10-13 for validation. ``---dna_model``, ``--cpg_model``, and ``--joint_model`` specify the architecture of the CpG, DNA, and Joint model, respectively (see manuscript for details). Training will stop after at most 30 epochs and model files will be stored in ``./model``.\n\n\n4. Use ``dcpg_eval.py`` to impute methylation profiles and evaluate model performances.\n\n.. code:: bash\n\n  dcpg_eval.py\n    ./data/*.h5\n    --model_files ./model/model.json ./model/model_weights_val.h5\n    --out_data ./eval/data.h5\n    --out_report ./eval/report.tsv\n\nThis command predicts missing methylation states on all chromosomes and evaluates prediction performances using known methylation states. Predicted states will be stored in ``./eval/data.h5`` and performance metrics in ``./eval/report.tsv``.\n\n\n5. Export imputed methylation profiles to HDF5 or bedGraph files:\n\n.. code:: bash\n\n  dcpg_eval_export.py\n    ./eval/data.h5\n    -o ./eval/hdf\n    -f hdf\n\n\n\nExamples\n========\n\nYou can find example notebooks and scripts on how to use DeepCpG in `/examples <examples/README.md>`_. R scripts and Rmarkdown files for downstream analyses are stored in `/R <R/README.md>`_.\n\n\nDocumentation\n=============\n\nThe `DeepCpG documentation <http://deepcpg.readthedocs.io>`_ provides information on training, hyper-parameter selection, and model architectures.\n\n\nModel Zoo\n=========\n\nYou can download pre-trained models from the `DeepCpG model zoo <docs/source/zoo.md>`_.\n\n\nFAQ\n===\n\n**Why am I getting warnings 'No CpG site at position X!' when using `dcpg_data.py`?**\nThis means that some sites in ``--cpg_profile`` files are not CpG sites, i.e. there is no CG dinucleotide at the given position in the DNA sequence. Make sure that ``--dna_files`` point to the correct genome and CpG sites are correctly aligned. Since DeepCpG currently does not support allele-specific methylation, data from different alleles must be merged (recommended) or only one allele be used.\n\n**How can I train models on one or more GPUs?**\nDeepCpG use the `Keras <https://keras.io>`_ deep learning library, which supports `Theano <http://deeplearning.net/software/theano/>`_ or `Tensorflow <https://www.tensorflow.org/>`_ as backend. If you are using Tensorflow, DeepCpG will automatically run on all available GPUs. If you are using Theano, you have to set the flag `device=GPU` in the `THEANO_FLAGS` environment variable.\n\n.. code:: bash\n\n  THEANO_FLAGS='device=gpu,floatX=float32'\n\nYou can find more information about Keras backends `here <https://keras.io/backend/>`_, and about parallelization `here <https://keras.io/getting-started/faq/#how-can-i-run-keras-on-gpu>`_.\n\n\n\nContent\n=======\n* ``/deepcpg/``: Source code\n* ``/docs``: Documentation\n* ``/examples/``: Examples on how to use DeepCpG\n* ``/R``: R scripts and Rmarkdown files for downstream analyses\n* ``/script/``: Executable DeepCpG scripts\n* ``/tests``: Test files\n\n\nChangelog\n=========\n\n1.0.7\n-----\n* Add support for Keras >=2.2.0.\n\n1.0.6\n-----\n* Add support for Keras 2.1.4 and Tensorflow 1.5.0\n* Minor bug-fixes.\n\n1.0.5\n-----\nUses Keras 2 as main Keras version.\n\n1.0.4\n-----\nAdds evaluation scripts and notebooks, improves documentation, and fixes minor bugs.\n  + Adds `dcpg_eval_perf.py <http://deepcpg.readthedocs.io/en/latest/scripts/index.html#module-scripts.dcpg_eval_perf>`_ and R markdown files for computing and visualizing performance metrics genome-wide and in annotated contexts.\n  + Adds `dcpg_snp.py <http://deepcpg.readthedocs.io/en/latest/scripts/index.html#module-scripts.dcpg_snp>`_ for computing mutation effects.\n  + Adds notebooks on computing mutation effects and predicting inter-cell statistics.\n  + Adds documentation of `DeepCpG scripts <http://deepcpg.readthedocs.io/latest/scripts/index.html>`_.\n  + Adds integration tests.\n  + Includes minor bug-fixes.\n\n1.0.3\n-----\nExtends ``dcpg_data.py``, updates documentation, and fixes minor bugs.\n  + Extends ``dcpg_data.py`` to support bedGraph and TSV input files.\n  + Enables training on continuous methylation states.\n  + Adds `documentation <http://deepcpg.readthedocs.io/en/latest/data.html#data>`_ about creating and analyzing Data.\n  + Updates documentation of `scripts <http://deepcpg.readthedocs.io/en/latest/scripts/index.html#scripts>`_ and `library <http://deepcpg.readthedocs.io/en/latest/lib/index.html#library>`_.\n\n\n\nContact\n=======\n* Christof Angermueller\n* cangermueller@gmail.com\n* https://cangermueller.com\n* `@cangermueller <https://twitter.com/cangermueller>`_\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cangermueller/deepcpg", "keywords": "Deep learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "deepcpg", "package_url": "https://pypi.org/project/deepcpg/", "platform": "", "project_url": "https://pypi.org/project/deepcpg/", "project_urls": {"Homepage": "https://github.com/cangermueller/deepcpg"}, "release_url": "https://pypi.org/project/deepcpg/1.0.7/", "requires_dist": null, "requires_python": "", "summary": "Deep learning for predicting CpG methylation", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            ========================================================================<br>DeepCpG: Deep neural networks for predicting single-cell DNA methylation<br>========================================================================<br><br>|Version| |License| |PyPI| |Docs| |DOI| |Tweet|<br><br>.. |Version| image:: https://img.shields.io/badge/python-2.7%2B%2C3.4%2B-green.svg<br>  :target: https://www.python.org/<br><br>.. |License| image:: https://img.shields.io/github/license/mashape/apistatus.svg<br>  :target: https://github.com/cangermueller/deepcpg/tree/master/LICENSE<br><br>.. |PyPI| image:: https://img.shields.io/badge/pypi-latest-orange.svg<br>  :target: https://pypi.python.org/pypi/deepcpg<br><br>.. |Docs| image:: https://img.shields.io/badge/docs-up--to--date-brightgreen.svg<br>  :target: http://deepcpg.readthedocs.io<br><br>.. |DOI| image:: https://zenodo.org/badge/68630079.svg<br>   :target: https://zenodo.org/badge/latestdoi/68630079<br><br>.. |Tweet| image:: https://img.shields.io/twitter/url/http/shields.io.svg?style=social<br>  :target: https://twitter.com/intent/tweet?text=Checkout+%23DeepCpG%3A+%23DeepLearning+for+predicting+DNA+methylation%2C+%40cangermueller<br><br>DeepCpG [1]_ is a deep neural network for predicting the methylation state of CpG dinucleotides in multiple cells. It allows to accurately impute incomplete DNA methylation profiles, to discover predictive sequence motifs, and to quantify the effect of sequence mutations. (`Angermueller et al, 2017 &lt;http://dx.doi.org/10.1186/s13059-017-1189-z&gt;`_).<br><br>**Please help to improve DeepCpG**, by reporting bugs, typos in notebooks and documentation, or any ideas on how to make things better. You can submit an `issue &lt;https://github.com/cangermueller/deepcpg/issues&gt;`_ or send me an `email &lt;mailto:cangermueller@gmail.com&gt;`_.<br><br>.. figure:: docs/source/fig1.png<br>   :width: 640 px<br>   :align: left<br>   :alt: DeepCpG model architecture and applications<br><br>   **DeepCpG model architecture and applications.**<br><br>   \\(a\\) Sparse single-cell CpG profiles as obtained from scBS-seq or scRRBS-seq. Methylated CpG sites are denoted by ones, unmethylated CpG sites by zeros, and question marks denote CpG sites with unknown methylation state (missing data). (b) DeepCpG model architecture. The DNA model consists of two convolutional and pooling layers to identify predictive motifs from the local sequence context, and one fully connected layer to model motif interactions. The CpG model scans the CpG neighborhood of multiple cells (rows in b), using a bidirectional gated recurrent network (GRU), yielding compressed features in a vector of constant size. The Joint model learns interactions between higher-level features derived from the DNA- and CpG model to predict methylation states in all cells. (c, d) The trained DeepCpG model can be used for different downstream analyses, including genome-wide imputation of missing CpG sites (c) and the discovery of DNA sequence motifs that are associated with DNA methylation levels or cell-to-cell variability (d).<br><br><br>.. [1] Angermueller, Christof, Heather J. Lee, Wolf Reik, and Oliver Stegle. *DeepCpG: Accurate Prediction of Single-Cell DNA Methylation States Using Deep Learning.* Genome Biology 18 (April 11, 2017): 67. doi:10.1186/s13059-017-1189-z.<br><br><br>Table of contents<br>=================<br>* `News`_<br>* `Installation`_<br>* `Getting started`_<br>* `Examples`_<br>* `Model Zoo`_<br>* `FAQ`_<br>* `Content`_<br>* `Changelog`_<br>* `Contact`_<br><br><br>News<br>====<br><br>* **181201**: DeepCpG 1.0.7 released!<br>* **180224**: DeepCpG 1.0.6 released!<br>* **171112**: Keras 2 is now the main Keras version (release 1.0.5).<br>* **170412**: New `notebook &lt;./examples/notebooks/stats/index.ipynb&gt;`_ on predicting inter-cell statistics!<br>* **170414**: Added `dcpg_eval_perf.py &lt;./scripts/dcpg_eval_perf.py&gt;`_ and `dcpg_eval_perf.Rmd &lt;./R/dcpg_eval_perf.Rmd&gt;`_ for evaluating and visualizing prediction performances! Find an example in `this notebook &lt;./examples/notebooks/basics/index.ipynb#Evaluating-prediction-performances&gt;`_!<br>* **170412**: New `notebook &lt;./examples/notebooks/stats/index.ipynb&gt;`_ on predicting inter-cell statistics!<br>* **170410**: New `notebook &lt;./examples/notebooks/snp/index.ipynb&gt;`_ on estimating mutation effects!<br>* **170406**: A short description of all `DeepCpG scripts &lt;http://deepcpg.readthedocs.io/latest/scripts/index.html&gt;`_!<br>* **170404**: New guide on creating and analyzing DeepCpG data `released &lt;http://deepcpg.readthedocs.io/latest/data.html&gt;`_!<br>* **170404**: Training on continuous data, e.g. from bulk experiments, now `supported &lt;http://deepcpg.readthedocs.io/latest/data.html&gt;`_!<br><br><br>Installation<br>============<br><br>The easiest way to install DeepCpG is to use ``PyPI``:<br><br>.. code:: bash<br><br>  pip install deepcpg<br><br>Alternatively, you can checkout the repository,<br><br>.. code:: bash<br><br>  git clone https://github.com/cangermueller/deepcpg.git<br><br><br>and then install DeepCpG using ``setup.py``:<br><br>.. code:: bash<br><br>  python setup.py install<br><br><br>Getting started<br>===============<br><br>1. Store known CpG methylation states of each cell into a tab-delimted file with the following columns:<br><br>* Chromosome (without chr)<br>* Position of the CpG site on the chromosome starting with one<br>* Binary methylation state of the CpG sites (0=unmethylation, 1=methylated)<br><br>Example:<br><br>.. code::<br><br>  1   3000827   1.0<br>  1   3001007   0.0<br>  1   3001018   1.0<br>  ...<br>  Y   90829839  1.0<br>  Y   90829899  1.0<br>  Y   90829918  0.0<br><br><br>2. Run ``dcpg_data.py`` to create the input data for DeepCpG:<br><br>.. code:: bash<br><br>  dcpg_data.py<br>  --cpg_profiles ./cpg/cell1.tsv ./cpg/cell2.tsv ./cpg/cell3.tsv<br>  --dna_files ./dna/mm10<br>  --cpg_wlen 50<br>  --dna_wlen 1001<br>  --out_dir ./data<br><br>``./cpg/cell[123].tsv`` store the methylation data from step 1., ``./dna`` contains the DNA database, e.g. `mm10 &lt;http://ftp.ensembl.org/pub/release-85/fasta/mus_musculus/dna/&gt;`_ for mouse or `hg38 &lt;http://ftp.ensembl.org/pub/release-86/fasta/homo_sapiens/dna/&gt;`_ for human, and output data files will be stored in ``./data``.<br><br><br>3. Fine-tune a pre-trained model or train your own model from scratch with ``dcpg_train.py``:<br><br>.. code:: bash<br><br>  dcpg_train.py<br>    ./data/c{1,3,6,7,9}_*.h5<br>    --val_data ./data/c{13,14,15,16,17,18,19}_*.h5<br>    --dna_model CnnL2h128<br>    --cpg_model RnnL1<br>    --joint_model JointL2h512<br>    --nb_epoch 30<br>    --out_dir ./model<br><br>This command uses chromosomes 1-3 for training and 10-13 for validation. ``---dna_model``, ``--cpg_model``, and ``--joint_model`` specify the architecture of the CpG, DNA, and Joint model, respectively (see manuscript for details). Training will stop after at most 30 epochs and model files will be stored in ``./model``.<br><br><br>4. Use ``dcpg_eval.py`` to impute methylation profiles and evaluate model performances.<br><br>.. code:: bash<br><br>  dcpg_eval.py<br>    ./data/*.h5<br>    --model_files ./model/model.json ./model/model_weights_val.h5<br>    --out_data ./eval/data.h5<br>    --out_report ./eval/report.tsv<br><br>This command predicts missing methylation states on all chromosomes and evaluates prediction performances using known methylation states. Predicted states will be stored in ``./eval/data.h5`` and performance metrics in ``./eval/report.tsv``.<br><br><br>5. Export imputed methylation profiles to HDF5 or bedGraph files:<br><br>.. code:: bash<br><br>  dcpg_eval_export.py<br>    ./eval/data.h5<br>    -o ./eval/hdf<br>    -f hdf<br><br><br><br>Examples<br>========<br><br>You can find example notebooks and scripts on how to use DeepCpG in `/examples &lt;examples/README.md&gt;`_. R scripts and Rmarkdown files for downstream analyses are stored in `/R &lt;R/README.md&gt;`_.<br><br><br>Documentation<br>=============<br><br>The `DeepCpG documentation &lt;http://deepcpg.readthedocs.io&gt;`_ provides information on training, hyper-parameter selection, and model architectures.<br><br><br>Model Zoo<br>=========<br><br>You can download pre-trained models from the `DeepCpG model zoo &lt;docs/source/zoo.md&gt;`_.<br><br><br>FAQ<br>===<br><br>**Why am I getting warnings 'No CpG site at position X!' when using `dcpg_data.py`?**<br>This means that some sites in ``--cpg_profile`` files are not CpG sites, i.e. there is no CG dinucleotide at the given position in the DNA sequence. Make sure that ``--dna_files`` point to the correct genome and CpG sites are correctly aligned. Since DeepCpG currently does not support allele-specific methylation, data from different alleles must be merged (recommended) or only one allele be used.<br><br>**How can I train models on one or more GPUs?**<br>DeepCpG use the `Keras &lt;https://keras.io&gt;`_ deep learning library, which supports `Theano &lt;http://deeplearning.net/software/theano/&gt;`_ or `Tensorflow &lt;https://www.tensorflow.org/&gt;`_ as backend. If you are using Tensorflow, DeepCpG will automatically run on all available GPUs. If you are using Theano, you have to set the flag `device=GPU` in the `THEANO_FLAGS` environment variable.<br><br>.. code:: bash<br><br>  THEANO_FLAGS='device=gpu,floatX=float32'<br><br>You can find more information about Keras backends `here &lt;https://keras.io/backend/&gt;`_, and about parallelization `here &lt;https://keras.io/getting-started/faq/#how-can-i-run-keras-on-gpu&gt;`_.<br><br><br><br>Content<br>=======<br>* ``/deepcpg/``: Source code<br>* ``/docs``: Documentation<br>* ``/examples/``: Examples on how to use DeepCpG<br>* ``/R``: R scripts and Rmarkdown files for downstream analyses<br>* ``/script/``: Executable DeepCpG scripts<br>* ``/tests``: Test files<br><br><br>Changelog<br>=========<br><br>1.0.7<br>-----<br>* Add support for Keras &gt;=2.2.0.<br><br>1.0.6<br>-----<br>* Add support for Keras 2.1.4 and Tensorflow 1.5.0<br>* Minor bug-fixes.<br><br>1.0.5<br>-----<br>Uses Keras 2 as main Keras version.<br><br>1.0.4<br>-----<br>Adds evaluation scripts and notebooks, improves documentation, and fixes minor bugs.<br>  + Adds `dcpg_eval_perf.py &lt;http://deepcpg.readthedocs.io/en/latest/scripts/index.html#module-scripts.dcpg_eval_perf&gt;`_ and R markdown files for computing and visualizing performance metrics genome-wide and in annotated contexts.<br>  + Adds `dcpg_snp.py &lt;http://deepcpg.readthedocs.io/en/latest/scripts/index.html#module-scripts.dcpg_snp&gt;`_ for computing mutation effects.<br>  + Adds notebooks on computing mutation effects and predicting inter-cell statistics.<br>  + Adds documentation of `DeepCpG scripts &lt;http://deepcpg.readthedocs.io/latest/scripts/index.html&gt;`_.<br>  + Adds integration tests.<br>  + Includes minor bug-fixes.<br><br>1.0.3<br>-----<br>Extends ``dcpg_data.py``, updates documentation, and fixes minor bugs.<br>  + Extends ``dcpg_data.py`` to support bedGraph and TSV input files.<br>  + Enables training on continuous methylation states.<br>  + Adds `documentation &lt;http://deepcpg.readthedocs.io/en/latest/data.html#data&gt;`_ about creating and analyzing Data.<br>  + Updates documentation of `scripts &lt;http://deepcpg.readthedocs.io/en/latest/scripts/index.html#scripts&gt;`_ and `library &lt;http://deepcpg.readthedocs.io/en/latest/lib/index.html#library&gt;`_.<br><br><br><br>Contact<br>=======<br>* Christof Angermueller<br>* cangermueller@gmail.com<br>* https://cangermueller.com<br>* `@cangermueller &lt;https://twitter.com/cangermueller&gt;`_<br>\n          </div>"}, "last_serial": 4553982, "releases": {"1.0.0": [], "1.0.1": [{"comment_text": "", "digests": {"md5": "53785043c993c21e79892fc5bace7ecc", "sha256": "80a451b3feed8f3277606824aa04b31f8838ab0b13d73108da0381ec8b17f546"}, "downloads": -1, "filename": "deepcpg-1.0.1.tar.gz", "has_sig": false, "md5_digest": "53785043c993c21e79892fc5bace7ecc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27495, "upload_time": "2017-02-15T22:10:09", "upload_time_iso_8601": "2017-02-15T22:10:09.919851Z", "url": "https://files.pythonhosted.org/packages/b3/6a/14fbe97efbfc7e8e2e07f7109caa976308cc8096bc2eaead54c3a69218a7/deepcpg-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "272f715098ab410abd3a0a0ccd68228a", "sha256": "ab9175765c36b658af219fae51811e92d90ccfa98206ed83ef7b92c873191ebf"}, "downloads": -1, "filename": "deepcpg-1.0.2.tar.gz", "has_sig": false, "md5_digest": "272f715098ab410abd3a0a0ccd68228a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26600, "upload_time": "2017-02-19T21:12:11", "upload_time_iso_8601": "2017-02-19T21:12:11.219485Z", "url": "https://files.pythonhosted.org/packages/47/0e/3f32f2a971bcaddbbcbb992b224432462060283810d9be5b1fdea33c752d/deepcpg-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2abbb883fd393bd3a433849e506c0aaf", "sha256": "9133e16710b24ff25990b7b9c8cb44af0c076f4037a5d60890bb1b11ef04b499"}, "downloads": -1, "filename": "deepcpg-1.0.3.macosx-10.12-x86_64.tar.gz", "has_sig": false, "md5_digest": "2abbb883fd393bd3a433849e506c0aaf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60185, "upload_time": "2017-04-06T20:55:23", "upload_time_iso_8601": "2017-04-06T20:55:23.880707Z", "url": "https://files.pythonhosted.org/packages/ac/87/7136782b8ebce8d45a793e31b77cb42c176250999b9020efa0f0e9e75bf1/deepcpg-1.0.3.macosx-10.12-x86_64.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "6044b9cb0d48b3ef56c19bd31d613980", "sha256": "cd47d304defb7b909d91db9c0f16895efb7ea353e9027bec805794053bcbbdd3"}, "downloads": -1, "filename": "deepcpg-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6044b9cb0d48b3ef56c19bd31d613980", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 80733, "upload_time": "2017-05-04T20:23:52", "upload_time_iso_8601": "2017-05-04T20:23:52.167837Z", "url": "https://files.pythonhosted.org/packages/01/84/e996ed32686f3a2155c01c4688b11087959e51beccb83f7af580a36d6441/deepcpg-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8547dc9d07bee4d60814c51783fd3b4", "sha256": "e1e41e2509ceb80c1d12d86a890c00eda12e8ff28124ffade2de4fc51bfed9e3"}, "downloads": -1, "filename": "deepcpg-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a8547dc9d07bee4d60814c51783fd3b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72519, "upload_time": "2017-05-01T09:10:34", "upload_time_iso_8601": "2017-05-01T09:10:34.420467Z", "url": "https://files.pythonhosted.org/packages/25/17/bea0f1d33a0a3b6cb61e38e88c9b8a1cf20b5d58a5a1c513ca08f87b82d7/deepcpg-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "4aa29dc691535f115af8fe250e4af61e", "sha256": "6fe94b1912a8acc73659a1481eefa6b703b2062ab3997f7c8c3857a9fcc6fecc"}, "downloads": -1, "filename": "deepcpg-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4aa29dc691535f115af8fe250e4af61e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 84919, "upload_time": "2017-12-06T04:03:18", "upload_time_iso_8601": "2017-12-06T04:03:18.412423Z", "url": "https://files.pythonhosted.org/packages/9c/46/3420d5f0b30ca97418b53ab9c1d2909789664c30ae8844a9d08737a84712/deepcpg-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb31f6d95a96992f5a3f998cff6cafb9", "sha256": "8ce6e03ce07def66ae2954894554be3d1e9d4172d61dd7e99cd22c83c7c8d536"}, "downloads": -1, "filename": "deepcpg-1.0.5.tar.gz", "has_sig": false, "md5_digest": "eb31f6d95a96992f5a3f998cff6cafb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 77013, "upload_time": "2017-12-06T04:07:17", "upload_time_iso_8601": "2017-12-06T04:07:17.607269Z", "url": "https://files.pythonhosted.org/packages/18/db/7ea8a073ba2dea3d91c03814489c7fdbd1b3d0e2f4a8c4a8bb6d883f0b6a/deepcpg-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "de4d99011892cc1bf6c348dda8a3cb95", "sha256": "a4f06f163bd8d29d0fbdd0458ad81304ad4389d2a9a28e3b87a3dbbdd92382f1"}, "downloads": -1, "filename": "deepcpg-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "de4d99011892cc1bf6c348dda8a3cb95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 85172, "upload_time": "2018-02-25T04:31:47", "upload_time_iso_8601": "2018-02-25T04:31:47.731787Z", "url": "https://files.pythonhosted.org/packages/12/1e/8194161fa0f3d5a01dedd7e93e942785e50f837dc192d190ad0656206d07/deepcpg-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f094a0fda600f7c83254184782d1f368", "sha256": "a98c98f93cce8740d4aa4469e5c3ad09438916de1c416cd7354ff5f2e3a5a867"}, "downloads": -1, "filename": "deepcpg-1.0.6.tar.gz", "has_sig": false, "md5_digest": "f094a0fda600f7c83254184782d1f368", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81245, "upload_time": "2018-02-25T04:31:29", "upload_time_iso_8601": "2018-02-25T04:31:29.662130Z", "url": "https://files.pythonhosted.org/packages/ff/cd/ee837d28321429cb055a5370818ef01bf9ca7e11fb52b39172b0f50c38df/deepcpg-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "55f28d43629961117533ec8205940ed6", "sha256": "026ba8af5d8412d73a59631737deec3923185ca27f700723bb142e783767a2e5"}, "downloads": -1, "filename": "deepcpg-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "55f28d43629961117533ec8205940ed6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 81002, "upload_time": "2018-12-03T01:25:51", "upload_time_iso_8601": "2018-12-03T01:25:51.348922Z", "url": "https://files.pythonhosted.org/packages/e5/36/fd343bd1856d75c8c91c797271ce47e19c5bdd04a6ab543726c68682f406/deepcpg-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d43a9dd0b5224ed70d4770866355f7c", "sha256": "36877d4b25cd8953a549f3b38be932e55f01c689a8c3983f61ed772c9213b11c"}, "downloads": -1, "filename": "deepcpg-1.0.7.tar.gz", "has_sig": false, "md5_digest": "8d43a9dd0b5224ed70d4770866355f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81249, "upload_time": "2018-12-03T01:26:12", "upload_time_iso_8601": "2018-12-03T01:26:12.168863Z", "url": "https://files.pythonhosted.org/packages/84/0d/84707864a6065054ced22dc1f1edd6ca638659d7227edd4e1d1b2edd6df7/deepcpg-1.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55f28d43629961117533ec8205940ed6", "sha256": "026ba8af5d8412d73a59631737deec3923185ca27f700723bb142e783767a2e5"}, "downloads": -1, "filename": "deepcpg-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "55f28d43629961117533ec8205940ed6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 81002, "upload_time": "2018-12-03T01:25:51", "upload_time_iso_8601": "2018-12-03T01:25:51.348922Z", "url": "https://files.pythonhosted.org/packages/e5/36/fd343bd1856d75c8c91c797271ce47e19c5bdd04a6ab543726c68682f406/deepcpg-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d43a9dd0b5224ed70d4770866355f7c", "sha256": "36877d4b25cd8953a549f3b38be932e55f01c689a8c3983f61ed772c9213b11c"}, "downloads": -1, "filename": "deepcpg-1.0.7.tar.gz", "has_sig": false, "md5_digest": "8d43a9dd0b5224ed70d4770866355f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81249, "upload_time": "2018-12-03T01:26:12", "upload_time_iso_8601": "2018-12-03T01:26:12.168863Z", "url": "https://files.pythonhosted.org/packages/84/0d/84707864a6065054ced22dc1f1edd6ca638659d7227edd4e1d1b2edd6df7/deepcpg-1.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:28 2020"}