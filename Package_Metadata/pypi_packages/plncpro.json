{"info": {"author": "Urminder Singh", "author_email": "usingh@iastate.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/urmi-21/PLncPRO.svg?branch=master)](https://travis-ci.org/urmi-21/PLncPRO)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/plncpro)\n![PyPI - Downloads](https://img.shields.io/pypi/dd/plncpro)\n\n                          _____  _            _____  _____   ____  \n                         |  __ \\| |          |  __ \\|  __ \\ / __ \\ \n                         | |__) | |_ __   ___| |__) | |__) | |  | |\n                         |  ___/| | '_ \\ / __|  ___/|  _  /| |  | |\n                         | |    | | | | | (__| |    | | \\ \\| |__| |\n                         |_|    |_|_| |_|\\___|_|    |_|  \\_\\\\____/ \n                                           \n\n#  INTRODUCTION\n\nPlncPRO (Plant Long Non-Coding rna Prediction by Random fOrests) is a program to classify coding (mRNAs) and long non-coding transcripts (lncRNAs).\nOur method is based on random forest method and uses protein homology search, sequence based and 3-mer frequency based features. \nWe have developed predictive models for several plant species to predict lncRNAs. \nWe comprehensively tested our method on plants and vertebrates and found that our model works better as compared to the existing tools.\n\n## Citation\nSingh et. al. PLncPRO for prediction of long non-coding RNAs (lncRNAs) in plants and its application for discovery of abiotic stress-responsive lncRNAs in rice and chickpea. Nucleic Acids Res. 2017 Dec 15;45(22):e183. doi: 10.1093/nar/gkx866.\n\n#### NOTE: We have updated PlncPro for python3. PlncPro for python2 is also available at http://ccbb.jnu.ac.in/plncpro/. Usage for this newer version is different from the older versions.\n\n#  INSTALLATION\n\n## Pre-requisite: \n1. OS: Linux, macOS\n2. Python 3.5 or later versions (http://www.python.org/)\n3. NCBI BLAST (https://blast.ncbi.nlm.nih.gov/Blast.cgi)\n4. GNU C Library (glibc >= 2.14)\n\n## python dependencies\n1. NumPy (http://www.numpy.org/) \n2. SciPy (https://www.scipy.org/)\n3. Scikit-learn (http://scikit-learn.org/) \n4. Biopython (http://biopython.org/)\n5. regex\n\n## Using PIP\n```\npip install plncpro\n```\n\n## From source\n\n```\ngit clone https://github.com/urmi-21/PLncPRO.git\npip install PlncPro\n```\n\n## Run tests\n\n```\nbash tests/local_test.sh\n```\n\n# Basic Usage\n\nSee [examples](https://github.com/urmi-21/PLncPRO/tree/master/examples) for detailed usage examples.\n\n### `plncpro predict` \n\nLabel lncRNAs and mRNAs. This file reads an input\nfile containing sequences and then classifies the sequences as coding or\nnon-coding. It uses a model generated by build.py to make classifications.\nIt outputs a file containing class label and class probabilities for each\nsequence.\n \n```\nplncpro predict -i <input fasta> -o <output_dir> -p <output_file_name> -t 2 -d <blast_db> -m <model_file>\n```\n\n### PARAMETERS\n\n```\t\n-p,--prediction_out\toutput file name\n-i,--infile\t\tfile containing input sequences\n-m,--model\t\tmodel file\n-o,--outdir\t\toutput directory name\n-d,--db\t\t\tpath to blast database\n\t\tOPTIONAL\n-t,--threads\t\tnumber of threads [default: 4]\n-l,--labels\t\tpath to the files containg labels(it outputs classification accuracy)\n-r,--remove_temp\tclean up intermediate files\n-v,--verbose\t\tshow more messages\n--min_len\t\tspecifiy min_length to filter input files\n--noblast\t\tDon't use blast features\n-no_ff\t\t\tDon't use framefinder features\n--qcov_hsp\t\tspecify query coverage parameter for blast[default:30]\n--blastres*\t\tpath to blast output for input file\n*blast result should be in following format: -outfmt '6 qseqid sseqid pident evalue qcovs qcovhsp score bitscore qframe sframe'\n```\n\n     \n\n\n### `plncpro build` \nBuild model using the given training data\n(mRNA/lncRNA transcripts). This file reads two labelled datasets\ncontaining coding and non-coding transcripts. Then it makes a random\nforest based classification model and saves the model, which can be used\nto predict unknown sequences.\n\n \n```\nplncpro build -p <mrna fasta> -n <lncrna fasta> -o <out_dir> -m <model_name> -d <blast db> -t <threads>\n```\n\t\t\n### PARAMETERS   \n```\n-p,--pos\t\tfile containing mRNA sequences\n-n,--neg\t\tfile containing lncRNA sequences\n-m,--model\t\toutput model name\n-o,--outdir\t\toutput directory name\n-d\t\t\tpath to blast database\n\t\tOPTIONAL\n-t,--threads\t\tnumber of threads [default: 4]\n-k,--num_trees\t\tnumber of trees[default: 1000]\n-r,--remove_temp\tclean up intermediate files\n-v,--verbose\t\tshow more messages\t\n--min_len\t\tspecifiy min_length to filter input files\n--noblast\t\tDon't use blast features\n--no_ff\t\t\tDon't use framefinder features\n--qcov_hsp\t\tspecify query cov parameter for blast[default:30]\n--pos_blastres*\t\tpath to blast result for mRNA input file\n--neg_blastres*\t\tpath to blast result for lncRNA input file\n\n*blast result should be in following format: -outfmt '6 qseqid sseqid pident evalue qcovs qcovhsp score bitscore qframe sframe' \n```   \n\n\n\n\n### plncpro predtoseq\nExtract mRNA or lncRNA sequences from\nPLNCPRO output file. This file reads a prediction output file and\nextracts sequences from a given class. User can specify class and\nprobability cut-off and extract desired transcript sequences.\n\n\n```\nplncpro predtoseq -f <fasta_file> -o <outputfile> -p <PLNCPRO_prediction_file> -l <required_label>\n```\n  \t\t\n### PARAMETERS\n```\n-f\t\t\tinput fasta file name\n-o\t\t\toutput fasta file name\t\n-p\t\t\tpath to file containg predictions by PLNCPRO\n\t\tOPTIONAL\n-l\t\t\tlabel of the required sequences (0 for lncRNA;1 for mRNA) [default:0]\n-s\t\t\tclass probability cutoff (extract sequences with probability greater than or equal to s\n--min\t\t\tspecifiy min_length of sequences[default:0]\n--max\t\t\tspecifiy min_length of sequences[default:Inf]\n```\n\n\n# Download data used in paper\n\nData is hosted on google drive. [Direct link](https://drive.google.com/file/d/108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe/view)\n\nDirectly download using wget.\n```\nwget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&id=108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe\" -O plncpro_data.zip && rm -rf /tmp/cookies.txt\n```\n\n\n# COPYING\n\nGNU Public License version 3 (GPLv3)\nDetails on http://www.gnu.org/copyleft/gpl.html", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/urmi-21/PLncPRO", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "plncpro", "package_url": "https://pypi.org/project/plncpro/", "platform": "", "project_url": "https://pypi.org/project/plncpro/", "project_urls": {"Homepage": "https://github.com/urmi-21/PLncPRO"}, "release_url": "https://pypi.org/project/plncpro/1.2.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "PlncPRO (Plant Long Non-Coding rna Prediction by Random fOrests) is a program to classify coding (mRNAs) and long non-coding transcripts (lncRNAs).", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/urmi-21/PLncPRO\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbf9a68000f91b27a2dfa64718fd9df02120e290/68747470733a2f2f7472617669732d63692e6f72672f75726d692d32312f504c6e6350524f2e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3011a95c75a3c340a48f608be907033de42cdf9e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f706c6e6370726f\">\n<img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac9363465ef7f0424dbd6d08c3868e01ef2d69d4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f64642f706c6e6370726f\"></p>\n<pre><code>                      _____  _            _____  _____   ____  \n                     |  __ \\| |          |  __ \\|  __ \\ / __ \\ \n                     | |__) | |_ __   ___| |__) | |__) | |  | |\n                     |  ___/| | '_ \\ / __|  ___/|  _  /| |  | |\n                     | |    | | | | | (__| |    | | \\ \\| |__| |\n                     |_|    |_|_| |_|\\___|_|    |_|  \\_\\\\____/ \n</code></pre>\n<h1>INTRODUCTION</h1>\n<p>PlncPRO (Plant Long Non-Coding rna Prediction by Random fOrests) is a program to classify coding (mRNAs) and long non-coding transcripts (lncRNAs).\nOur method is based on random forest method and uses protein homology search, sequence based and 3-mer frequency based features.\nWe have developed predictive models for several plant species to predict lncRNAs.\nWe comprehensively tested our method on plants and vertebrates and found that our model works better as compared to the existing tools.</p>\n<h2>Citation</h2>\n<p>Singh et. al. PLncPRO for prediction of long non-coding RNAs (lncRNAs) in plants and its application for discovery of abiotic stress-responsive lncRNAs in rice and chickpea. Nucleic Acids Res. 2017 Dec 15;45(22):e183. doi: 10.1093/nar/gkx866.</p>\n<h4>NOTE: We have updated PlncPro for python3. PlncPro for python2 is also available at <a href=\"http://ccbb.jnu.ac.in/plncpro/\" rel=\"nofollow\">http://ccbb.jnu.ac.in/plncpro/</a>. Usage for this newer version is different from the older versions.</h4>\n<h1>INSTALLATION</h1>\n<h2>Pre-requisite:</h2>\n<ol>\n<li>OS: Linux, macOS</li>\n<li>Python 3.5 or later versions (<a href=\"http://www.python.org/\" rel=\"nofollow\">http://www.python.org/</a>)</li>\n<li>NCBI BLAST (<a href=\"https://blast.ncbi.nlm.nih.gov/Blast.cgi\" rel=\"nofollow\">https://blast.ncbi.nlm.nih.gov/Blast.cgi</a>)</li>\n<li>GNU C Library (glibc &gt;= 2.14)</li>\n</ol>\n<h2>python dependencies</h2>\n<ol>\n<li>NumPy (<a href=\"http://www.numpy.org/\" rel=\"nofollow\">http://www.numpy.org/</a>)</li>\n<li>SciPy (<a href=\"https://www.scipy.org/\" rel=\"nofollow\">https://www.scipy.org/</a>)</li>\n<li>Scikit-learn (<a href=\"http://scikit-learn.org/\" rel=\"nofollow\">http://scikit-learn.org/</a>)</li>\n<li>Biopython (<a href=\"http://biopython.org/\" rel=\"nofollow\">http://biopython.org/</a>)</li>\n<li>regex</li>\n</ol>\n<h2>Using PIP</h2>\n<pre><code>pip install plncpro\n</code></pre>\n<h2>From source</h2>\n<pre><code>git clone https://github.com/urmi-21/PLncPRO.git\npip install PlncPro\n</code></pre>\n<h2>Run tests</h2>\n<pre><code>bash tests/local_test.sh\n</code></pre>\n<h1>Basic Usage</h1>\n<p>See <a href=\"https://github.com/urmi-21/PLncPRO/tree/master/examples\" rel=\"nofollow\">examples</a> for detailed usage examples.</p>\n<h3><code>plncpro predict</code></h3>\n<p>Label lncRNAs and mRNAs. This file reads an input\nfile containing sequences and then classifies the sequences as coding or\nnon-coding. It uses a model generated by build.py to make classifications.\nIt outputs a file containing class label and class probabilities for each\nsequence.</p>\n<pre><code>plncpro predict -i &lt;input fasta&gt; -o &lt;output_dir&gt; -p &lt;output_file_name&gt; -t 2 -d &lt;blast_db&gt; -m &lt;model_file&gt;\n</code></pre>\n<h3>PARAMETERS</h3>\n<pre><code>-p,--prediction_out\toutput file name\n-i,--infile\t\tfile containing input sequences\n-m,--model\t\tmodel file\n-o,--outdir\t\toutput directory name\n-d,--db\t\t\tpath to blast database\n\t\tOPTIONAL\n-t,--threads\t\tnumber of threads [default: 4]\n-l,--labels\t\tpath to the files containg labels(it outputs classification accuracy)\n-r,--remove_temp\tclean up intermediate files\n-v,--verbose\t\tshow more messages\n--min_len\t\tspecifiy min_length to filter input files\n--noblast\t\tDon't use blast features\n-no_ff\t\t\tDon't use framefinder features\n--qcov_hsp\t\tspecify query coverage parameter for blast[default:30]\n--blastres*\t\tpath to blast output for input file\n*blast result should be in following format: -outfmt '6 qseqid sseqid pident evalue qcovs qcovhsp score bitscore qframe sframe'\n</code></pre>\n<h3><code>plncpro build</code></h3>\n<p>Build model using the given training data\n(mRNA/lncRNA transcripts). This file reads two labelled datasets\ncontaining coding and non-coding transcripts. Then it makes a random\nforest based classification model and saves the model, which can be used\nto predict unknown sequences.</p>\n<pre><code>plncpro build -p &lt;mrna fasta&gt; -n &lt;lncrna fasta&gt; -o &lt;out_dir&gt; -m &lt;model_name&gt; -d &lt;blast db&gt; -t &lt;threads&gt;\n</code></pre>\n<h3>PARAMETERS</h3>\n<pre><code>-p,--pos\t\tfile containing mRNA sequences\n-n,--neg\t\tfile containing lncRNA sequences\n-m,--model\t\toutput model name\n-o,--outdir\t\toutput directory name\n-d\t\t\tpath to blast database\n\t\tOPTIONAL\n-t,--threads\t\tnumber of threads [default: 4]\n-k,--num_trees\t\tnumber of trees[default: 1000]\n-r,--remove_temp\tclean up intermediate files\n-v,--verbose\t\tshow more messages\t\n--min_len\t\tspecifiy min_length to filter input files\n--noblast\t\tDon't use blast features\n--no_ff\t\t\tDon't use framefinder features\n--qcov_hsp\t\tspecify query cov parameter for blast[default:30]\n--pos_blastres*\t\tpath to blast result for mRNA input file\n--neg_blastres*\t\tpath to blast result for lncRNA input file\n\n*blast result should be in following format: -outfmt '6 qseqid sseqid pident evalue qcovs qcovhsp score bitscore qframe sframe' \n</code></pre>\n<h3>plncpro predtoseq</h3>\n<p>Extract mRNA or lncRNA sequences from\nPLNCPRO output file. This file reads a prediction output file and\nextracts sequences from a given class. User can specify class and\nprobability cut-off and extract desired transcript sequences.</p>\n<pre><code>plncpro predtoseq -f &lt;fasta_file&gt; -o &lt;outputfile&gt; -p &lt;PLNCPRO_prediction_file&gt; -l &lt;required_label&gt;\n</code></pre>\n<h3>PARAMETERS</h3>\n<pre><code>-f\t\t\tinput fasta file name\n-o\t\t\toutput fasta file name\t\n-p\t\t\tpath to file containg predictions by PLNCPRO\n\t\tOPTIONAL\n-l\t\t\tlabel of the required sequences (0 for lncRNA;1 for mRNA) [default:0]\n-s\t\t\tclass probability cutoff (extract sequences with probability greater than or equal to s\n--min\t\t\tspecifiy min_length of sequences[default:0]\n--max\t\t\tspecifiy min_length of sequences[default:Inf]\n</code></pre>\n<h1>Download data used in paper</h1>\n<p>Data is hosted on google drive. <a href=\"https://drive.google.com/file/d/108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe/view\" rel=\"nofollow\">Direct link</a></p>\n<p>Directly download using wget.</p>\n<pre><code>wget --load-cookies /tmp/cookies.txt \"https://docs.google.com/uc?export=download&amp;confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&amp;id=108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\\1\\n/p')&amp;id=108S-9Bt4CLCHTaCn6-HKTqQZDo0nssZe\" -O plncpro_data.zip &amp;&amp; rm -rf /tmp/cookies.txt\n</code></pre>\n<h1>COPYING</h1>\n<p>GNU Public License version 3 (GPLv3)\nDetails on <a href=\"http://www.gnu.org/copyleft/gpl.html\" rel=\"nofollow\">http://www.gnu.org/copyleft/gpl.html</a></p>\n\n          </div>"}, "last_serial": 6491381, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "7b157464d525f33e4f78c1fd71b08d2f", "sha256": "e830f97133aa41f493145692fa4ba74e3080b1fd6f534cc67d394fa74ed591dc"}, "downloads": -1, "filename": "plncpro-1.2.tar.gz", "has_sig": false, "md5_digest": "7b157464d525f33e4f78c1fd71b08d2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 174948, "upload_time": "2020-01-20T23:58:20", "upload_time_iso_8601": "2020-01-20T23:58:20.542534Z", "url": "https://files.pythonhosted.org/packages/3d/88/dbf59b2e3ba18261e210829fe801165c729f4917ee86037920fbaef9036a/plncpro-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "8c5a451108283aa540c91c25b9a46c2f", "sha256": "c35b0ab27afbd7b19e86930cf4a8d6869e319ad8cf1a10f736a1e6f7e5781d09"}, "downloads": -1, "filename": "plncpro-1.2.1.tar.gz", "has_sig": false, "md5_digest": "8c5a451108283aa540c91c25b9a46c2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 175013, "upload_time": "2020-01-21T00:10:48", "upload_time_iso_8601": "2020-01-21T00:10:48.494695Z", "url": "https://files.pythonhosted.org/packages/a8/0b/c9b8fef29c2be161bbfa444c1bc821103d21eac9cf53dedff150042ab323/plncpro-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "776f29ae0d8245fec2fa6c55b1aaa632", "sha256": "78537a49a5b7ec082af8a3c043d9429f063c6197b32903d7f503c6ee3b289400"}, "downloads": -1, "filename": "plncpro-1.2.2.tar.gz", "has_sig": false, "md5_digest": "776f29ae0d8245fec2fa6c55b1aaa632", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 175649, "upload_time": "2020-01-21T00:33:59", "upload_time_iso_8601": "2020-01-21T00:33:59.082917Z", "url": "https://files.pythonhosted.org/packages/96/8b/307c386ab9df64d1233b77bcd0856bc00db3f6908848ec16defc01f89776/plncpro-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "776f29ae0d8245fec2fa6c55b1aaa632", "sha256": "78537a49a5b7ec082af8a3c043d9429f063c6197b32903d7f503c6ee3b289400"}, "downloads": -1, "filename": "plncpro-1.2.2.tar.gz", "has_sig": false, "md5_digest": "776f29ae0d8245fec2fa6c55b1aaa632", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 175649, "upload_time": "2020-01-21T00:33:59", "upload_time_iso_8601": "2020-01-21T00:33:59.082917Z", "url": "https://files.pythonhosted.org/packages/96/8b/307c386ab9df64d1233b77bcd0856bc00db3f6908848ec16defc01f89776/plncpro-1.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:24 2020"}