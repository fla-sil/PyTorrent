{"info": {"author": "Gabriel S. Gusmao", "author_email": "gusmaogabriels@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "|star| |watch| |fork| |github|\r\n\r\n.. image:: https://img.shields.io/pypi/l/xl2py.svg\r\n   :height: 100px\r\n   :width: 200 px\r\n   :scale: 50 %\r\n   :alt: alternate text\r\n   :align: right\r\n\r\n\r\n.. image:: https://img.shields.io/pypi/v/xl2py.svg\r\n   :height: 100px\r\n   :width: 200 px\r\n   :scale: 50 %\r\n   :alt: alternate text\r\n   :align: right\r\n\r\nAn Excel (XL) 2 Python (Py) structure retriever for optimization. Convert the I/O of XL files into Python.\r\n\r\n|ld|\r\n\r\n|rg|\r\n\r\n----------------\r\n**Description**\r\n----------------\r\n\r\n*Convert an XL structure to Py and use any optimization algorithm of your will*  \r\n\r\n*Now, with object-oriented formulas*\r\n\r\nThe current project makes use of the XL COM interface (win32com library) to:\r\n\r\n  1. Read an objective function cell\r\n  2. Recursively build its dependent structure as of its formula\r\n      * The XL structure is represented in Py as a dict() object\r\n      * The structure is referenced to as: \r\n          * `dictobj[Workbook number as int][Worksheet number as int][Row as int][Column as int]`\r\n      * Whereby it handles:\r\n          * multi-XL workbook/worksheet references\r\n          * single worksheet multirange retrieval\r\n  3. XL cell formulas are translated to **object oriented** calculation blocks (no more `evals` as of this update).\r\n  4. The calculation structure is determinded by cell-dependency trees, which have been already stored during the conversion (2)\r\n      - Handling of circular references\r\n  \r\n  Ongoing development: A simple evolutionary algorithm that runs based off the abovementioned structure.\r\n\r\n----------------\r\n**Features**\r\n----------------\r\n\r\n    - **Conversion Library**\r\n\r\n    The following XL functions can be currently handled by xl2py.\r\n    xl2py is capable of undertaking **single-cells**, **arrays** and **array/matrix operations**\r\n\r\n        1. Standard operators: \\+, \\-, \\/, \\*, \\^\r\n        2. Logical operators: \\<, \\>, \\<=, \\>=, \\<>, \\=\r\n        3. IF\r\n        4. AVERAGE\r\n        5. STDEV.P\r\n        6. TRANSPOSE\r\n        7. ABS\r\n        8. MMULT\r\n        9. IFERROR\r\n        10. SUM\r\n        11. COUNT\r\n        12. SQRT\r\n\r\n------------------------------------------------\r\n**Tackled in the latest update**\r\n------------------------------------------------\r\n\r\n\t1. No more `evals` -> formulas are object oriented (Calculation-, Formula- and Reference- and Numeric-Blocks)\r\n\t2. by-operand handling\r\n\t    *Over the latest update development, by-operand handling of formulas took place of RPN (reverse-polish notation). For additional details, viz. github repository*\r\n\r\n----------------\r\n**On the way**\r\n----------------\r\n\r\n  1. Object serialization\r\n  2. CVS outputs\r\n  3. A conceptual example with corresponding XL file. (*reach me for further assistance*)\r\n\r\n----------------\r\n**Instructions**\r\n----------------\r\n\r\n    - **Installation**\r\n\r\n    .. code-block:: python\r\n\r\n        pip install xl2py==version_no\r\n\r\n    - **Example**: I/O object creation\r\n\r\n    .. code-block:: python\r\n        \r\n        import xl2py \r\n        \r\n        Builder = xl2py.builder() # creates a xl2py builder object\r\n        # place the path of your XL file \r\n        path = r'C:\\\\User\\\\DEFAULT\\\\WHATEVER\\\\...' \r\n        # define your XL file password (if it exists)\r\n        pwd = 'password' \r\n        # opens up a XL COM interface and attach it to the Builder object\r\n        Builder.connect_com(path,pwd) \r\n        # declare your input cell/range references\r\n        inputs = xl2py.xlref(<Workbook str or int>, \\\r\n            <Worksheet int>, <A1- or R1C1-type XL references>)\r\n        # inputs include other inputs to the xlref object\r\n        inputs += xl2py.xlref(<str or int>, <int>, <str>)\r\n        # output must be a single cell reference\r\n        output = xl2py.xlref(<str or int>, <int>, <str>) \r\n        # Now you are all set. You shall translate the XL structure to python.\r\n        Builder.set_structure(inputs,output)\r\n        # If you want to change the input cell/range values...\r\n        # vals must be of the shape of the inputs \r\n        # and must be parsed as a list of lists or numpy arrays\r\n        Builder.set_input_values(vals) \r\n        # grab the output (objective fun) value as numpy array\r\n        output_val = Builder.get_output_value() # Grab the new output value\r\n\r\nYou can find me @ Gabriel S. Gusm\u00e3o <gusmaogabriels@gmail.com>\r\n\r\n    - https://www.researchgate.net/profile/Gabriel_Gusmao\r\n    - https://github.com/gusmaogabriels\r\n\r\n.. |github| image:: https://img.shields.io/github/followers/gusmaogabriels.svg?style=social&label=Follow\r\n   :scale: 25%\r\n   :target: https://github.com/gusmaogabriels\r\n\r\n.. |fork| image:: https://img.shields.io/github/forks/gusmaogabriels/xl2py.svg?style=social&label=Fork\r\n   :scale: 25%\r\n   :target: https://github.com/gusmaogabriels/xl2py/fork\r\n\r\n.. |star| image:: https://img.shields.io/github/stars/gusmaogabriels/xl2py.svg?style=social&label=Star\r\n   :scale: 25%\r\n   :target: https://github.com/gusmaogabriels/xl2py/stargazers\r\n\r\n.. |watch| image:: https://img.shields.io/github/watchers/gusmaogabriels/xl2py.svg?style=social&label=Watch\r\n   :scale: 25%\r\n   :target: https://github.com/gusmaogabriels/xl2py/watchers\r\n\r\n.. |rg| image:: https://www.researchgate.net/images/public/profile_share_badge.png\r\n   :height: 55 px\r\n   :width: 166 px\r\n   :scale: 30 %\r\n   :target: https://www.researchgate.net/profile/Gabriel_Gusmao?cp=shp\r\n\r\n.. |ld| image:: https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png\r\n   :height: 25 px\r\n   :width: 160 px\r\n   :scale: 50 %\r\n   :target: https://br.linkedin.com/pub/gabriel-saben%C3%A7a-gusm%C3%A3o/115/aa6/aa8", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/gusmaogabriels/xl2py/tarball/v2.0b", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gusmaogabriels/xl2py", "keywords": "python,excel,com,solver,optmization,minimization,evolutionary,stochastic", "license": "The MIT License (MIT)", "maintainer": "Gabriel Saben\u00e7a Gusm\u00e3o", "maintainer_email": "gusmaogabriels@gmail.com", "name": "xl2py", "package_url": "https://pypi.org/project/xl2py/", "platform": "Python 2.7+", "project_url": "https://pypi.org/project/xl2py/", "project_urls": {"Download": "https://github.com/gusmaogabriels/xl2py/tarball/v2.0b", "Homepage": "https://github.com/gusmaogabriels/xl2py"}, "release_url": "https://pypi.org/project/xl2py/2.0b/", "requires_dist": null, "requires_python": null, "summary": "An Excel (XL) 2 Python (Py) structure retriever for optimization. Convert the I/O of XL files into Python.", "version": "2.0b", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/gusmaogabriels/xl2py/stargazers\" rel=\"nofollow\"><img alt=\"star\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14d8ad60975feee7f21028909c8f7dd72b6a16b9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6775736d616f6761627269656c732f786c3270792e7376673f7374796c653d736f6369616c266c6162656c3d53746172\"></a> <a href=\"https://github.com/gusmaogabriels/xl2py/watchers\" rel=\"nofollow\"><img alt=\"watch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecfa7819dab98311f02762d6d1ac4779a493bfa3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6775736d616f6761627269656c732f786c3270792e7376673f7374796c653d736f6369616c266c6162656c3d5761746368\"></a> <a href=\"https://github.com/gusmaogabriels/xl2py/fork\" rel=\"nofollow\"><img alt=\"fork\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c20394ba730681f7c482384c9a1e39a1766e8b40/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6775736d616f6761627269656c732f786c3270792e7376673f7374796c653d736f6369616c266c6162656c3d466f726b\"></a> <a href=\"https://github.com/gusmaogabriels\" rel=\"nofollow\"><img alt=\"github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73d9b682e2188c5cccf7b20455cf6fe1606f7483/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f6775736d616f6761627269656c732e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77\"></a></p>\n<img alt=\"alternate text\" class=\"align-right\" height=\"100px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6dc799990ff7b9aabe52f9114e19553bee44e80/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f786c3270792e737667\" width=\"200px\">\n<img alt=\"alternate text\" class=\"align-right\" height=\"100px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f4a363d20395cb33a88cc6a21699093742eed4e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f786c3270792e737667\" width=\"200px\">\n<p>An Excel (XL) 2 Python (Py) structure retriever for optimization. Convert the I/O of XL files into Python.</p>\n<p><a href=\"https://br.linkedin.com/pub/gabriel-saben%C3%A7a-gusm%C3%A3o/115/aa6/aa8\" rel=\"nofollow\"><img alt=\"ld\" height=\"25px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1440bf42cd93b02fd4b67be3a6ab76324fd78d2f/68747470733a2f2f7374617469632e6c6963646e2e636f6d2f736364732f636f6d6d6f6e2f752f696d672f77656270726f6d6f2f62746e5f766965776d795f3136307832352e706e67\" width=\"160px\"></a></p>\n<p><a href=\"https://www.researchgate.net/profile/Gabriel_Gusmao?cp=shp\" rel=\"nofollow\"><img alt=\"rg\" height=\"55px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58848f075bddc1eff2a52e6b4988be9747701458/68747470733a2f2f7777772e7265736561726368676174652e6e65742f696d616765732f7075626c69632f70726f66696c655f73686172655f62616467652e706e67\" width=\"166px\"></a></p>\n<div id=\"description\">\n<h2><strong>Description</strong></h2>\n<p><em>Convert an XL structure to Py and use any optimization algorithm of your will</em></p>\n<p><em>Now, with object-oriented formulas</em></p>\n<p>The current project makes use of the XL COM interface (win32com library) to:</p>\n<blockquote>\n<ol>\n<li>Read an objective function cell</li>\n<li><dl>\n<dt>Recursively build its dependent structure as of its formula</dt>\n<dd><ul>\n<li>The XL structure is represented in Py as a dict() object</li>\n<li><dl>\n<dt>The structure is referenced to as:</dt>\n<dd><ul>\n<li><cite>dictobj[Workbook number as int][Worksheet number as int][Row as int][Column as int]</cite></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Whereby it handles:</dt>\n<dd><ul>\n<li>multi-XL workbook/worksheet references</li>\n<li>single worksheet multirange retrieval</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>XL cell formulas are translated to <strong>object oriented</strong> calculation blocks (no more <cite>evals</cite> as of this update).</li>\n<li><dl>\n<dt>The calculation structure is determinded by cell-dependency trees, which have been already stored during the conversion (2)</dt>\n<dd><ul>\n<li>Handling of circular references</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ol>\n<p>Ongoing development: A simple evolutionary algorithm that runs based off the abovementioned structure.</p>\n</blockquote>\n</div>\n<div id=\"features\">\n<h2><strong>Features</strong></h2>\n<blockquote>\n<ul>\n<li><strong>Conversion Library</strong></li>\n</ul>\n<p>The following XL functions can be currently handled by xl2py.\nxl2py is capable of undertaking <strong>single-cells</strong>, <strong>arrays</strong> and <strong>array/matrix operations</strong></p>\n<blockquote>\n<ol>\n<li>Standard operators: +, -, /, *, ^</li>\n<li>Logical operators: &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;, =</li>\n<li>IF</li>\n<li>AVERAGE</li>\n<li>STDEV.P</li>\n<li>TRANSPOSE</li>\n<li>ABS</li>\n<li>MMULT</li>\n<li>IFERROR</li>\n<li>SUM</li>\n<li>COUNT</li>\n<li>SQRT</li>\n</ol>\n</blockquote>\n</blockquote>\n</div>\n<div id=\"tackled-in-the-latest-update\">\n<h2><strong>Tackled in the latest update</strong></h2>\n<blockquote>\n<ol>\n<li>No more <cite>evals</cite> -&gt; formulas are object oriented (Calculation-, Formula- and Reference- and Numeric-Blocks)</li>\n<li><dl>\n<dt>by-operand handling</dt>\n<dd><em>Over the latest update development, by-operand handling of formulas took place of RPN (reverse-polish notation). For additional details, viz. github repository</em></dd>\n</dl>\n</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"on-the-way\">\n<h2><strong>On the way</strong></h2>\n<blockquote>\n<ol>\n<li>Object serialization</li>\n<li>CVS outputs</li>\n<li>A conceptual example with corresponding XL file. (<em>reach me for further assistance</em>)</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"instructions\">\n<h2><strong>Instructions</strong></h2>\n<blockquote>\n<ul>\n<li><strong>Installation</strong></li>\n</ul>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">xl2py</span><span class=\"o\">==</span><span class=\"n\">version_no</span>\n</pre>\n<ul>\n<li><strong>Example</strong>: I/O object creation</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">xl2py</span>\n\n<span class=\"n\">Builder</span> <span class=\"o\">=</span> <span class=\"n\">xl2py</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"p\">()</span> <span class=\"c1\"># creates a xl2py builder object</span>\n<span class=\"c1\"># place the path of your XL file</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">User</span><span class=\"se\">\\\\</span><span class=\"s1\">DEFAULT</span><span class=\"se\">\\\\</span><span class=\"s1\">WHATEVER</span><span class=\"se\">\\\\</span><span class=\"s1\">...'</span>\n<span class=\"c1\"># define your XL file password (if it exists)</span>\n<span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span>\n<span class=\"c1\"># opens up a XL COM interface and attach it to the Builder object</span>\n<span class=\"n\">Builder</span><span class=\"o\">.</span><span class=\"n\">connect_com</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"n\">pwd</span><span class=\"p\">)</span>\n<span class=\"c1\"># declare your input cell/range references</span>\n<span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"n\">xl2py</span><span class=\"o\">.</span><span class=\"n\">xlref</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">Workbook</span> <span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> \\\n    <span class=\"o\">&lt;</span><span class=\"n\">Worksheet</span> <span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">A1</span><span class=\"o\">-</span> <span class=\"ow\">or</span> <span class=\"n\">R1C1</span><span class=\"o\">-</span><span class=\"nb\">type</span> <span class=\"n\">XL</span> <span class=\"n\">references</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"c1\"># inputs include other inputs to the xlref object</span>\n<span class=\"n\">inputs</span> <span class=\"o\">+=</span> <span class=\"n\">xl2py</span><span class=\"o\">.</span><span class=\"n\">xlref</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"nb\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"c1\"># output must be a single cell reference</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">xl2py</span><span class=\"o\">.</span><span class=\"n\">xlref</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nb\">str</span> <span class=\"ow\">or</span> <span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"nb\">int</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"nb\">str</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now you are all set. You shall translate the XL structure to python.</span>\n<span class=\"n\">Builder</span><span class=\"o\">.</span><span class=\"n\">set_structure</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,</span><span class=\"n\">output</span><span class=\"p\">)</span>\n<span class=\"c1\"># If you want to change the input cell/range values...</span>\n<span class=\"c1\"># vals must be of the shape of the inputs</span>\n<span class=\"c1\"># and must be parsed as a list of lists or numpy arrays</span>\n<span class=\"n\">Builder</span><span class=\"o\">.</span><span class=\"n\">set_input_values</span><span class=\"p\">(</span><span class=\"n\">vals</span><span class=\"p\">)</span>\n<span class=\"c1\"># grab the output (objective fun) value as numpy array</span>\n<span class=\"n\">output_val</span> <span class=\"o\">=</span> <span class=\"n\">Builder</span><span class=\"o\">.</span><span class=\"n\">get_output_value</span><span class=\"p\">()</span> <span class=\"c1\"># Grab the new output value</span>\n</pre>\n</blockquote>\n<p>You can find me @ Gabriel S. Gusm\u00e3o &lt;<a href=\"mailto:gusmaogabriels%40gmail.com\">gusmaogabriels<span>@</span>gmail<span>.</span>com</a>&gt;</p>\n<blockquote>\n<ul>\n<li><a href=\"https://www.researchgate.net/profile/Gabriel_Gusmao\" rel=\"nofollow\">https://www.researchgate.net/profile/Gabriel_Gusmao</a></li>\n<li><a href=\"https://github.com/gusmaogabriels\" rel=\"nofollow\">https://github.com/gusmaogabriels</a></li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2162576, "releases": {"1.0.3b": [{"comment_text": "", "digests": {"md5": "3a7c1eb83a2eba6d529f7556e082ea2f", "sha256": "fc4d51d23d47930a8b30543eb0313db66014a15477ccefc49cbadb5d73cdf968"}, "downloads": -1, "filename": "xl2py-1.0.3b.zip", "has_sig": false, "md5_digest": "3a7c1eb83a2eba6d529f7556e082ea2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20156, "upload_time": "2015-10-08T04:07:35", "upload_time_iso_8601": "2015-10-08T04:07:35.330367Z", "url": "https://files.pythonhosted.org/packages/a1/e9/450f80376fc314b0221bcf7a099c6ac9f897efa6c3b70b7d38937a460086/xl2py-1.0.3b.zip", "yanked": false}], "1.0.4b": [{"comment_text": "", "digests": {"md5": "d64133f295bac7244701f1748cf9cb15", "sha256": "e3f8274173a8e26a69ebe51cbd3e82d4d184579e7f748c287e34a66cbc5ca5bf"}, "downloads": -1, "filename": "xl2py-1.0.4b.zip", "has_sig": false, "md5_digest": "d64133f295bac7244701f1748cf9cb15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20374, "upload_time": "2015-10-08T04:23:27", "upload_time_iso_8601": "2015-10-08T04:23:27.988235Z", "url": "https://files.pythonhosted.org/packages/8b/5d/77797e951b31a5877343f646a002efd92d830273296eff1ee524b4496de8/xl2py-1.0.4b.zip", "yanked": false}], "2.0b": []}, "urls": [], "timestamp": "Fri May  8 03:25:22 2020"}