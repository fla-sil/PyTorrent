{"info": {"author": "Grigory Bakunov", "author_email": "thebobuk@ya.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# \u03bcXML - xml stream parsing in less than 100 lines of code\n\n\u03bcXML is oversimlified way to parse large (or slow loading) XML lines with easy way for tag matching and callbacking.\nNo dependencies (besides python3.4+) and only one class `uxml.Parser` inside the library.\n\n```python\nimport uxml\np = uxml.Parser(open('test.rss'))\np.find('/rss/channel/item', lambda e: print(e))\np.start()\n```\n\nFirst meaningful line is parser's object creation. The only parameter is file (or any other `io.TextIOWrapper` compatible) object.\n`.find` method add new tag matcher for parser. First argument is a pointer to tag which we want to find inside xml stream.\nI use nanoxpath notation (i.e. you should show full path to this tags or use `//` as a starting symbol).\nSecond argument of `find` is a callback which will be invoked if given tag is found and the only argument for this callback is a internal structure of tags and attributes inside this tag. Attributes can be separated from children tags by name, it's always starts with '@' symbol.\nIf tag is just one internal text - it will be returned as result. If there's more than one children with same name, it will be returned as list of tags. If tag have both internal text and attributes, first will be added to attributes as '#text'.\n\nYou can use unlimited number of `find`'s.\nParsing will start with `start` method. Example above will print every item inside given rss file.\nLet me show you a little bit more complicated stuff.\n\n```python\nres = []\np = uxml.Parser('test.rss')\np.find('//link', lambda x: res.append(x)).find('//description', lambda x: print(x)).start()\n```\n\nFirst off all you can notice what `find` and `start` calls are chainable.\nTrailing `/` will convert to any number of previous tags, so this time we will got list of links at `res` variable.\nAlso we just pass 'test.rss' filename to Parser constructor. It's not only open this file but also trying to guess XML encoding (very poorly but anyway).\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bobuk/uxml", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "uxml", "package_url": "https://pypi.org/project/uxml/", "platform": "", "project_url": "https://pypi.org/project/uxml/", "project_urls": {"Homepage": "http://github.com/bobuk/uxml"}, "release_url": "https://pypi.org/project/uxml/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "uRPC is oversimplistic stream XML parser", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># \u03bcXML - xml stream parsing in less than 100 lines of code</p>\n<p>\u03bcXML is oversimlified way to parse large (or slow loading) XML lines with easy way for tag matching and callbacking.\nNo dependencies (besides python3.4+) and only one class <cite>uxml.Parser</cite> inside the library.</p>\n<p><tt>`python\nimport uxml\np = <span class=\"pre\">uxml.Parser(open('test.rss'))</span>\n<span class=\"pre\">p.find('/rss/channel/item',</span> lambda e: print(e))\np.start()\n`</tt></p>\n<p>First meaningful line is parser\u2019s object creation. The only parameter is file (or any other <cite>io.TextIOWrapper</cite> compatible) object.\n<cite>.find</cite> method add new tag matcher for parser. First argument is a pointer to tag which we want to find inside xml stream.\nI use nanoxpath notation (i.e. you should show full path to this tags or use <cite>//</cite> as a starting symbol).\nSecond argument of <cite>find</cite> is a callback which will be invoked if given tag is found and the only argument for this callback is a internal structure of tags and attributes inside this tag. Attributes can be separated from children tags by name, it\u2019s always starts with \u2018@\u2019 symbol.\nIf tag is just one internal text - it will be returned as result. If there\u2019s more than one children with same name, it will be returned as list of tags. If tag have both internal text and attributes, first will be added to attributes as \u2018#text\u2019.</p>\n<p>You can use unlimited number of <cite>find</cite>\u2019s.\nParsing will start with <cite>start</cite> method. Example above will print every item inside given rss file.\nLet me show you a little bit more complicated stuff.</p>\n<p><tt>`python\nres = []\np = <span class=\"pre\">uxml.Parser('test.rss')</span>\n<span class=\"pre\">p.find('//link',</span> lambda x: <span class=\"pre\">res.append(x)).find('//description',</span> lambda x: <span class=\"pre\">print(x)).start()</span>\n`</tt></p>\n<p>First off all you can notice what <cite>find</cite> and <cite>start</cite> calls are chainable.\nTrailing <cite>/</cite> will convert to any number of previous tags, so this time we will got list of links at <cite>res</cite> variable.\nAlso we just pass \u2018test.rss\u2019 filename to Parser constructor. It\u2019s not only open this file but also trying to guess XML encoding (very poorly but anyway).</p>\n\n          </div>"}, "last_serial": 4037496, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1ae69b36c4354180693d05d3fa13ab5f", "sha256": "67ab3d27ed0fa4101c5664ebcd26ef5f01a4ea9b36bce5eb0134bb2f35219c94"}, "downloads": -1, "filename": "uxml-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1ae69b36c4354180693d05d3fa13ab5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2933, "upload_time": "2018-06-21T23:56:07", "upload_time_iso_8601": "2018-06-21T23:56:07.515908Z", "url": "https://files.pythonhosted.org/packages/03/33/bf1fdf5b6028dca13ba881b566a5bbfd5c13b16b4ed9bfe12e8b9381dc3c/uxml-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4cbead56fc0d4b9ffce7d841217bf649", "sha256": "3add082d54b9616588573a8ff0cf0e8e5a0a6a73b6573c7a8eaaa65cd8227d3a"}, "downloads": -1, "filename": "uxml-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4cbead56fc0d4b9ffce7d841217bf649", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2954, "upload_time": "2018-07-03T14:56:42", "upload_time_iso_8601": "2018-07-03T14:56:42.211591Z", "url": "https://files.pythonhosted.org/packages/18/cf/3c395a9e5ef794de4edadb08eef251d36df11667c78ecb6f54aba813f9f2/uxml-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "aa70e09de644928027d282e390b62c4f", "sha256": "9b8b19a8c1cc036d7d1a28228b7719e747214a90211732c873444a975672716e"}, "downloads": -1, "filename": "uxml-0.2.1.tar.gz", "has_sig": false, "md5_digest": "aa70e09de644928027d282e390b62c4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3082, "upload_time": "2018-07-04T13:26:22", "upload_time_iso_8601": "2018-07-04T13:26:22.988022Z", "url": "https://files.pythonhosted.org/packages/92/7a/26f8b4f43c79b56093c35e9fc3f581f29b551572c340523660502cdb65d0/uxml-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ea4a6996326882269747251259db22ca", "sha256": "b532af5ed5392ccb543808dac73c343fe81129b81073fafaec726910ad248b5b"}, "downloads": -1, "filename": "uxml-0.2.2.tar.gz", "has_sig": false, "md5_digest": "ea4a6996326882269747251259db22ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3124, "upload_time": "2018-07-04T15:03:48", "upload_time_iso_8601": "2018-07-04T15:03:48.687807Z", "url": "https://files.pythonhosted.org/packages/e3/86/912ff51fb3124447747f743c3be99d63c7630ed8a03dd92e98c9402b3676/uxml-0.2.2.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "06b4f96ba077bd31b1359c8081e9d8dd", "sha256": "cbddb87dd7f7024d97956fe273a0b081874c504117b326b3958ba1605dbbcb75"}, "downloads": -1, "filename": "uxml-0.2.5.tar.gz", "has_sig": false, "md5_digest": "06b4f96ba077bd31b1359c8081e9d8dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3387, "upload_time": "2018-07-04T19:39:16", "upload_time_iso_8601": "2018-07-04T19:39:16.016398Z", "url": "https://files.pythonhosted.org/packages/d1/7c/10250564ab3da21866499067935f8075180107a343744086f095c37b4d7f/uxml-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b9cecd8e9a82848b7c575c90680aee77", "sha256": "76e7d755e03b74b127b3a460c6e28dea96b61caa3fff3e879d302e784923ceb7"}, "downloads": -1, "filename": "uxml-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b9cecd8e9a82848b7c575c90680aee77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3553, "upload_time": "2018-07-06T19:28:48", "upload_time_iso_8601": "2018-07-06T19:28:48.120833Z", "url": "https://files.pythonhosted.org/packages/93/54/c9fdb746cd474f46b61b0f0ba6aad8fa906fed10243e22c67b6228e79e89/uxml-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9cecd8e9a82848b7c575c90680aee77", "sha256": "76e7d755e03b74b127b3a460c6e28dea96b61caa3fff3e879d302e784923ceb7"}, "downloads": -1, "filename": "uxml-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b9cecd8e9a82848b7c575c90680aee77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3553, "upload_time": "2018-07-06T19:28:48", "upload_time_iso_8601": "2018-07-06T19:28:48.120833Z", "url": "https://files.pythonhosted.org/packages/93/54/c9fdb746cd474f46b61b0f0ba6aad8fa906fed10243e22c67b6228e79e89/uxml-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:27 2020"}