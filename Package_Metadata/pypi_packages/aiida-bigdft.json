{"info": {"author": "The BigDFT Team", "author_email": "bigdft-developers@lists.launchpad.net", "bugtrack_url": null, "classifiers": ["Framework :: AiiDA", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python"], "description": "[![Build Status](https://travis-ci.org/BigDFT-group/aiida-bigdft-plugin.svg?branch=master)](https://travis-ci.org/BigDFT-group/aiida-bigdft-plugin) \n[![Coverage Status](https://coveralls.io/repos/github/BigDFT-group/aiida-bigdft-plugin/badge.svg?branch=master)](https://coveralls.io/github/BigDFT-group/aiida-bigdft-plugin?branch=master) \n[![Docs status](https://readthedocs.org/projects/aiida-bigdft/badge)](http://aiida-bigdft.readthedocs.io/) \n[![PyPI version](https://badge.fury.io/py/aiida-bigdft.svg)](https://badge.fury.io/py/aiida-bigdft)\n\n# aiida-bigdft\n\nAiida plugin for BigDFT code.\nThis is a simple plugin to integrate bigdft computation in an AiiDA workflow. Input file is generated using PyBigDFT tools, and output is returned as a dict, using the LogFile feature of PyBigDFT. Both futile and PyBigDFT are included in this plugin, BigDFT itself is not needed.\n\nThis plugin is the default output of the \n[AiiDA plugin cutter](https://github.com/aiidateam/aiida-plugin-cutter),\nintended to help developers get started with their AiiDA plugins.\n\n## Features\n\n * Create input files and specify command line options via a python dictionary and `BigDFTParameters`:\n   ```python\n   d = { 'ignore-case': True }\n   BigDFTParameters = DataFactory('bigdft')\n   bigdft_parameters = {}\n   bigdft_parameters[\"dft\"] = { \"ixc\": \"LDA\", \"itermax\": \"5\" }\n   bigdft_parameters[\"output\"] = { 'orbitals': 'binary' } \n   inputs['parameters'] = BigDFTParameters(dict=bigdft_parameters)\n   ```\n\n * Run computation and retrieve output files (by default : logfile, time.yaml, forces, can be extended to retrieve any geenrated file):\n   ```python\n   inputs['extra_retrieved_files'] = List()\n   inputs['extra_retrieved_files'].set_list([[\"./data*/*\", \".\", 2]])\n   result = run(CalculationFactory('bigdft'), **inputs)\n   #or asynchronously\n   future = submit(CalculationFactory('bigdft'), **inputs)\n   ```\n\n * load back YAML logfile and turn it into a python dict (through PyBigDFT utilities) to analyze results\n   ```python\n   #only if run asynchronously, load results from database first after completion\n   result=load_node(future.pk).outputs\n\n   logfile = result['bigdft_logfile'].logfile\n   print (logfile['Energy (Hartree)'])\n   ```\n## Installation\n\n```shell\npip install aiida-bigdft\nverdi quicksetup  # better to set up a new profile, or run reentry scan\nverdi plugin list aiida.calculations  # should now show your calclulation plugins\n```\n\n## Usage\n\nHere goes a complete example of how to submit a test calculation using this plugin.\n\nA quick demo of how to submit a calculation:\n```shell\nverdi daemon start         # make sure the daemon is running\ncd examples\nverdi run submit.py        # submit test calculation\nverdi process list -a  # check status of calculation\n```\n\nThe plugin also includes verdi commands to inspect its data types:\n```shell\nverdi data bigdft list\nverdi data bigdft export <PK>\n```\n\n## Development\n\n```shell\ngit clone https://github.com/BigDFT-group/aiida-bigdft-plugin .\ncd aiida-bigdft-plugin\npip install -e .[pre-commit,testing]  # install extra dependencies\npre-commit install  # install pre-commit hooks\npytest -v  # discover and run all tests\n```\n\nSee the [developer guide](http://aiida-bigdft.readthedocs.io/en/latest/developer_guide/index.html) for more information.\n\n## License\n\nMIT\n\n\n## Contact\n\nbigdft-developers@lists.launchpad.net\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BigDFT-group/aiida-bigdft-plugin", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aiida-bigdft", "package_url": "https://pypi.org/project/aiida-bigdft/", "platform": "", "project_url": "https://pypi.org/project/aiida-bigdft/", "project_urls": {"Homepage": "https://github.com/BigDFT-group/aiida-bigdft-plugin"}, "release_url": "https://pypi.org/project/aiida-bigdft/0.1.0a0/", "requires_dist": ["aiida-core (<2.0.0,>=1.0.0b3)", "six", "voluptuous", "sphinx ; extra == 'docs'", "pre-commit (==1.11.0) ; extra == 'pre-commit'", "yapf (==0.27.0) ; extra == 'pre-commit'", "prospector (==0.12.11) ; extra == 'pre-commit'", "pylint (==1.9.4) ; extra == 'pre-commit'", "pgtest (==1.2.0) ; extra == 'testing'", "wheel (>=0.31) ; extra == 'testing'", "coverage ; extra == 'testing'", "pytest (<5.0.0,>=3.6.3) ; extra == 'testing'", "pytest-cov (<5.0.0,>=2.6.1) ; extra == 'testing'"], "requires_python": "", "summary": "Aiida plugin for BigDFT code", "version": "0.1.0a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/BigDFT-group/aiida-bigdft-plugin\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/837c7da5a090c89e2dc381f6a8b37315c0a10a25/68747470733a2f2f7472617669732d63692e6f72672f4269674446542d67726f75702f61696964612d6269676466742d706c7567696e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/BigDFT-group/aiida-bigdft-plugin?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2ef1941c6ef078f5158e516b16702389a448ac1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4269674446542d67726f75702f61696964612d6269676466742d706c7567696e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://aiida-bigdft.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Docs status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d6543c48eee7abf9e230379675ce98750fe4442/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696964612d6269676466742f6261646765\"></a>\n<a href=\"https://badge.fury.io/py/aiida-bigdft\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/227f032f8c5aa71aeb73bf2f25ab98fc66970d83/68747470733a2f2f62616467652e667572792e696f2f70792f61696964612d6269676466742e737667\"></a></p>\n<h1>aiida-bigdft</h1>\n<p>Aiida plugin for BigDFT code.\nThis is a simple plugin to integrate bigdft computation in an AiiDA workflow. Input file is generated using PyBigDFT tools, and output is returned as a dict, using the LogFile feature of PyBigDFT. Both futile and PyBigDFT are included in this plugin, BigDFT itself is not needed.</p>\n<p>This plugin is the default output of the\n<a href=\"https://github.com/aiidateam/aiida-plugin-cutter\" rel=\"nofollow\">AiiDA plugin cutter</a>,\nintended to help developers get started with their AiiDA plugins.</p>\n<h2>Features</h2>\n<ul>\n<li>\n<p>Create input files and specify command line options via a python dictionary and <code>BigDFTParameters</code>:</p>\n<pre><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'ignore-case'</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"p\">}</span>\n<span class=\"n\">BigDFTParameters</span> <span class=\"o\">=</span> <span class=\"n\">DataFactory</span><span class=\"p\">(</span><span class=\"s1\">'bigdft'</span><span class=\"p\">)</span>\n<span class=\"n\">bigdft_parameters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">bigdft_parameters</span><span class=\"p\">[</span><span class=\"s2\">\"dft\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"ixc\"</span><span class=\"p\">:</span> <span class=\"s2\">\"LDA\"</span><span class=\"p\">,</span> <span class=\"s2\">\"itermax\"</span><span class=\"p\">:</span> <span class=\"s2\">\"5\"</span> <span class=\"p\">}</span>\n<span class=\"n\">bigdft_parameters</span><span class=\"p\">[</span><span class=\"s2\">\"output\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'orbitals'</span><span class=\"p\">:</span> <span class=\"s1\">'binary'</span> <span class=\"p\">}</span> \n<span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'parameters'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">BigDFTParameters</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"o\">=</span><span class=\"n\">bigdft_parameters</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Run computation and retrieve output files (by default : logfile, time.yaml, forces, can be extended to retrieve any geenrated file):</p>\n<pre><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'extra_retrieved_files'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">()</span>\n<span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s1\">'extra_retrieved_files'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_list</span><span class=\"p\">([[</span><span class=\"s2\">\"./data*/*\"</span><span class=\"p\">,</span> <span class=\"s2\">\".\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]])</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">CalculationFactory</span><span class=\"p\">(</span><span class=\"s1\">'bigdft'</span><span class=\"p\">),</span> <span class=\"o\">**</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n<span class=\"c1\">#or asynchronously</span>\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">CalculationFactory</span><span class=\"p\">(</span><span class=\"s1\">'bigdft'</span><span class=\"p\">),</span> <span class=\"o\">**</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>load back YAML logfile and turn it into a python dict (through PyBigDFT utilities) to analyze results</p>\n<pre><span class=\"c1\">#only if run asynchronously, load results from database first after completion</span>\n<span class=\"n\">result</span><span class=\"o\">=</span><span class=\"n\">load_node</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">outputs</span>\n\n<span class=\"n\">logfile</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'bigdft_logfile'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">logfile</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">logfile</span><span class=\"p\">[</span><span class=\"s1\">'Energy (Hartree)'</span><span class=\"p\">])</span>\n</pre>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install aiida-bigdft\nverdi quicksetup  <span class=\"c1\"># better to set up a new profile, or run reentry scan</span>\nverdi plugin list aiida.calculations  <span class=\"c1\"># should now show your calclulation plugins</span>\n</pre>\n<h2>Usage</h2>\n<p>Here goes a complete example of how to submit a test calculation using this plugin.</p>\n<p>A quick demo of how to submit a calculation:</p>\n<pre>verdi daemon start         <span class=\"c1\"># make sure the daemon is running</span>\n<span class=\"nb\">cd</span> examples\nverdi run submit.py        <span class=\"c1\"># submit test calculation</span>\nverdi process list -a  <span class=\"c1\"># check status of calculation</span>\n</pre>\n<p>The plugin also includes verdi commands to inspect its data types:</p>\n<pre>verdi data bigdft list\nverdi data bigdft <span class=\"nb\">export</span> &lt;PK&gt;\n</pre>\n<h2>Development</h2>\n<pre>git clone https://github.com/BigDFT-group/aiida-bigdft-plugin .\n<span class=\"nb\">cd</span> aiida-bigdft-plugin\npip install -e .<span class=\"o\">[</span>pre-commit,testing<span class=\"o\">]</span>  <span class=\"c1\"># install extra dependencies</span>\npre-commit install  <span class=\"c1\"># install pre-commit hooks</span>\npytest -v  <span class=\"c1\"># discover and run all tests</span>\n</pre>\n<p>See the <a href=\"http://aiida-bigdft.readthedocs.io/en/latest/developer_guide/index.html\" rel=\"nofollow\">developer guide</a> for more information.</p>\n<h2>License</h2>\n<p>MIT</p>\n<h2>Contact</h2>\n<p><a href=\"mailto:bigdft-developers@lists.launchpad.net\">bigdft-developers@lists.launchpad.net</a></p>\n\n          </div>"}, "last_serial": 6293565, "releases": {"0.1.0a0": [{"comment_text": "", "digests": {"md5": "871a7860069ffdfad0ff2c297b1b2ac9", "sha256": "617ff025a90166154699219647a8212e2785d537496977df30a906163147c189"}, "downloads": -1, "filename": "aiida_bigdft-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "871a7860069ffdfad0ff2c297b1b2ac9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192928, "upload_time": "2019-12-13T14:53:38", "upload_time_iso_8601": "2019-12-13T14:53:38.187172Z", "url": "https://files.pythonhosted.org/packages/1b/8d/4b1954ac615b24afee5354e5622f8d2b4e4df0f70cae00b33801ed202c82/aiida_bigdft-0.1.0a0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "871a7860069ffdfad0ff2c297b1b2ac9", "sha256": "617ff025a90166154699219647a8212e2785d537496977df30a906163147c189"}, "downloads": -1, "filename": "aiida_bigdft-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "871a7860069ffdfad0ff2c297b1b2ac9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 192928, "upload_time": "2019-12-13T14:53:38", "upload_time_iso_8601": "2019-12-13T14:53:38.187172Z", "url": "https://files.pythonhosted.org/packages/1b/8d/4b1954ac615b24afee5354e5622f8d2b4e4df0f70cae00b33801ed202c82/aiida_bigdft-0.1.0a0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:22:03 2020"}