{"info": {"author": "Jeffrey McLarty", "author_email": "jeffrey.mclarty@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "==============================\r\nReadable Runtime State Machine\r\n==============================\r\n\r\n.. image:: https://travis-ci.org/jnmclarty/rrsm.svg?branch=master\r\n    :target: https://travis-ci.org/jnmclarty/rrsm\r\n    \r\n.. image:: https://coveralls.io/repos/jnmclarty/rrsm/badge.svg \r\n    :target: https://coveralls.io/r/jnmclarty/rrsm\r\n\r\nEnables a finite state machine to be created **at run-time** *AND* leverage simple attribute syntax creating **self documenting code**.\r\n\r\nNormally these concepts are mutually exclusive, and in any finished design can hard coded.  This module is handy during prototyping.\r\n\r\nUsage\r\n=====\r\n\r\n.. code:: python\r\n\r\n    >>> from rrsm import StateMachine\r\n    \r\n    >>> #Instantiation works with a list of the form ['state', ...] \r\n    ... #or a dictionary of the form {'state' : value, ...}\r\n    ... SM = StateMachine(['cool', 'off', 'on', 'warm'])   \r\n\r\n    >>> #checking state works against strings or integers:\r\n    ... SM == 'cool'\r\n    True\r\n    \r\n    >>> #Change the state\r\n    ... SM('warm')\r\n    \r\n    >>> #using attributes to check state:\r\n    ... SM == SM.cool\r\n    False\r\n    >>> SM == SM.warm\r\n    True\r\n    >>> SM.current_state\r\n    'warm'\r\n    >>> SM.current_code\r\n    3\r\n     \r\nFor hardcoded finite state machines, the Super State Machine project seems like a more promising solution.\r\n\r\nThis implementation has no dependencies, nor does it import any of the standard library. It should work on any python version, but it's tested with 2.6, 2.7, 3.3 and 2.4. Some exceptions probably apply to the exception handling.  Pun intended.\r\n\r\nInstall\r\n=======\r\n\r\nThe easiest way to install is::\r\n\r\n    pip install rrsm", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/jnmclarty/rrsm/tarball/0.2.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jnmclarty/rrsm", "keywords": "readable,runtime,run-time,finite,state,machine", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "rrsm", "package_url": "https://pypi.org/project/rrsm/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/rrsm/", "project_urls": {"Download": "https://github.com/jnmclarty/rrsm/tarball/0.2.0", "Homepage": "https://github.com/jnmclarty/rrsm"}, "release_url": "https://pypi.org/project/rrsm/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Readable run-time state machine", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jnmclarty/rrsm\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jnmclarty/rrsm.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd30af3e9fb9fa70bb0ca7cc871eb28c63eec10e/68747470733a2f2f7472617669732d63692e6f72672f6a6e6d636c617274792f7272736d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/jnmclarty/rrsm\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/jnmclarty/rrsm/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/697e4a41fdb4c553f25f20e34543afafa878af06/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6e6d636c617274792f7272736d2f62616467652e737667\"></a>\n<p>Enables a finite state machine to be created <strong>at run-time</strong> <em>AND</em> leverage simple attribute syntax creating <strong>self documenting code</strong>.</p>\n<p>Normally these concepts are mutually exclusive, and in any finished design can hard coded.  This module is handy during prototyping.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rrsm</span> <span class=\"kn\">import</span> <span class=\"n\">StateMachine</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#Instantiation works with a list of the form ['state', ...]</span>\n<span class=\"o\">...</span> <span class=\"c1\">#or a dictionary of the form {'state' : value, ...}</span>\n<span class=\"o\">...</span> <span class=\"n\">SM</span> <span class=\"o\">=</span> <span class=\"n\">StateMachine</span><span class=\"p\">([</span><span class=\"s1\">'cool'</span><span class=\"p\">,</span> <span class=\"s1\">'off'</span><span class=\"p\">,</span> <span class=\"s1\">'on'</span><span class=\"p\">,</span> <span class=\"s1\">'warm'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#checking state works against strings or integers:</span>\n<span class=\"o\">...</span> <span class=\"n\">SM</span> <span class=\"o\">==</span> <span class=\"s1\">'cool'</span>\n<span class=\"kc\">True</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#Change the state</span>\n<span class=\"o\">...</span> <span class=\"n\">SM</span><span class=\"p\">(</span><span class=\"s1\">'warm'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\">#using attributes to check state:</span>\n<span class=\"o\">...</span> <span class=\"n\">SM</span> <span class=\"o\">==</span> <span class=\"n\">SM</span><span class=\"o\">.</span><span class=\"n\">cool</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SM</span> <span class=\"o\">==</span> <span class=\"n\">SM</span><span class=\"o\">.</span><span class=\"n\">warm</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SM</span><span class=\"o\">.</span><span class=\"n\">current_state</span>\n<span class=\"s1\">'warm'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SM</span><span class=\"o\">.</span><span class=\"n\">current_code</span>\n<span class=\"mi\">3</span>\n</pre>\n<p>For hardcoded finite state machines, the Super State Machine project seems like a more promising solution.</p>\n<p>This implementation has no dependencies, nor does it import any of the standard library. It should work on any python version, but it\u2019s tested with 2.6, 2.7, 3.3 and 2.4. Some exceptions probably apply to the exception handling.  Pun intended.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>The easiest way to install is:</p>\n<pre>pip install rrsm\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1452010, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fbb3345345ee0173f6f7c8575e592be1", "sha256": "51f634997413e4d73944b84c384bdb2b3680069bce0abfb9b4198954fe78ca25"}, "downloads": -1, "filename": "rrsm-0.1.0.zip", "has_sig": false, "md5_digest": "fbb3345345ee0173f6f7c8575e592be1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6603, "upload_time": "2015-03-07T03:39:31", "upload_time_iso_8601": "2015-03-07T03:39:31.889430Z", "url": "https://files.pythonhosted.org/packages/4e/2e/4928185d04a027925a09f9f673ef7b21baf830db0cf213f336dc9da4e1ce/rrsm-0.1.0.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6176ae5a882e9f24d22e27783d2fb47e", "sha256": "805b59d543caeab6cc58f97143469a12790cca7d88fd3180ccd72c067703e330"}, "downloads": -1, "filename": "rrsm-0.2.0.zip", "has_sig": false, "md5_digest": "6176ae5a882e9f24d22e27783d2fb47e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6729, "upload_time": "2015-03-07T13:14:05", "upload_time_iso_8601": "2015-03-07T13:14:05.146301Z", "url": "https://files.pythonhosted.org/packages/4b/28/7f441ece7fb54571594f6cc90c7b22e46c4114c959815471a2fdcc2c7891/rrsm-0.2.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6176ae5a882e9f24d22e27783d2fb47e", "sha256": "805b59d543caeab6cc58f97143469a12790cca7d88fd3180ccd72c067703e330"}, "downloads": -1, "filename": "rrsm-0.2.0.zip", "has_sig": false, "md5_digest": "6176ae5a882e9f24d22e27783d2fb47e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6729, "upload_time": "2015-03-07T13:14:05", "upload_time_iso_8601": "2015-03-07T13:14:05.146301Z", "url": "https://files.pythonhosted.org/packages/4b/28/7f441ece7fb54571594f6cc90c7b22e46c4114c959815471a2fdcc2c7891/rrsm-0.2.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:45 2020"}