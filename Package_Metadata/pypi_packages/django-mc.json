{"info": {"author": "David Danier", "author_email": "david.danier@team23.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "django-mc\n=========\n\n|pypi-badge| |build-status|\n\n.. |build-status| image:: https://travis-ci.org/team23/django_mc.svg\n    :target: https://travis-ci.org/team23/django_mc\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/django-mc.svg\n    :target: https://pypi.python.org/pypi/django-mc\n\n**django-mc** let's you build a CMS system that evolves around a few key ideas:\n\n- Pages are Django models where every page represents the content of one URL.\n  The content of a page is mostly build up using components.\n- Components are content fragments that can be part of a page, but usually\n  don't have their own canonical URL. Examples for components might be an\n  image, a pdf download, a block of text, a contact form, etc.\n\ndjango-mc expects that you define different \"regions\" in a page that can take\ncomponents. A region might be a segment of your frontend design like \"header\",\n\"footer\", \"sidebar\" or \"content\", etc. This allows you to not only fill a page\nwith components but also decide in which part (\"region\") of the page they\nshould be placed.\n\nA page usually also has a layout assigned. A layout is also just a model that\nmay define multiple components in different regions. The final contents of the\nrendered page will then be a combination of the components from the page and\nfrom the page layout. The layout more or less defines the fallback components\nfor a region that should be displayed if one region in the page has no\ncomponents assigned.\n\nA model that can hold components (i.e. layouts and pages) is called a\ncomponent provider (see ``django_mc.models.RegionComponentProvider``).\n\ndjango_mc is unopinionated about how you display and manage the data inside the\nuser facing backend. This means you can use whatever administration interface\nyou want. A good fit though might be ``django_backend``.\n\nDevelopment\n-----------\n\nCreate a virtual environment, then install ``django-mc`` and its dependencies with::\n\nInstall the dependencies (including the test dependencies) with::\n\n    pip install -r requirements.txt\n\nThen you can run all tests with::\n\n    tox\n\n\nChangelog\n=========\n\n0.1.0\n-----\n\n- Added ``django_mc.link`` sub-application.\n- Added ``AddComponentTypeToRegions`` and ``RemoveComponentTypeFromRegions``\n  to make it super easy to add and remove component types to and from the list of\n  allowed components in a region.\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.team23.de/team23/django_mc", "keywords": null, "license": "BSD licence, see LICENSE file", "maintainer": null, "maintainer_email": null, "name": "django-mc", "package_url": "https://pypi.org/project/django-mc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-mc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://git.team23.de/team23/django_mc"}, "release_url": "https://pypi.org/project/django-mc/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A foundational structure for CMS systems. Helps you to create page models, components (individual content blocks to build up pages) and to attach components to pages.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-mc<br>=========<br><br>|pypi-badge| |build-status|<br><br>.. |build-status| image:: https://travis-ci.org/team23/django_mc.svg<br>    :target: https://travis-ci.org/team23/django_mc<br><br>.. |pypi-badge| image:: https://img.shields.io/pypi/v/django-mc.svg<br>    :target: https://pypi.python.org/pypi/django-mc<br><br>**django-mc** let's you build a CMS system that evolves around a few key ideas:<br><br>- Pages are Django models where every page represents the content of one URL.<br>  The content of a page is mostly build up using components.<br>- Components are content fragments that can be part of a page, but usually<br>  don't have their own canonical URL. Examples for components might be an<br>  image, a pdf download, a block of text, a contact form, etc.<br><br>django-mc expects that you define different \"regions\" in a page that can take<br>components. A region might be a segment of your frontend design like \"header\",<br>\"footer\", \"sidebar\" or \"content\", etc. This allows you to not only fill a page<br>with components but also decide in which part (\"region\") of the page they<br>should be placed.<br><br>A page usually also has a layout assigned. A layout is also just a model that<br>may define multiple components in different regions. The final contents of the<br>rendered page will then be a combination of the components from the page and<br>from the page layout. The layout more or less defines the fallback components<br>for a region that should be displayed if one region in the page has no<br>components assigned.<br><br>A model that can hold components (i.e. layouts and pages) is called a<br>component provider (see ``django_mc.models.RegionComponentProvider``).<br><br>django_mc is unopinionated about how you display and manage the data inside the<br>user facing backend. This means you can use whatever administration interface<br>you want. A good fit though might be ``django_backend``.<br><br>Development<br>-----------<br><br>Create a virtual environment, then install ``django-mc`` and its dependencies with::<br><br>Install the dependencies (including the test dependencies) with::<br><br>    pip install -r requirements.txt<br><br>Then you can run all tests with::<br><br>    tox<br><br><br>Changelog<br>=========<br><br>0.1.0<br>-----<br><br>- Added ``django_mc.link`` sub-application.<br>- Added ``AddComponentTypeToRegions`` and ``RemoveComponentTypeFromRegions``<br>  to make it super easy to add and remove component types to and from the list of<br>  allowed components in a region.<br>- Initial release.\n          </div>"}, "last_serial": 4304480, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bbc9f3b2257f3d3c7a7aa87a4b2dbd90", "sha256": "d43af60ad947fff0a0c88a42c1367f77d6d75d6696703e4eb44e96b862fced3f"}, "downloads": -1, "filename": "django-mc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbc9f3b2257f3d3c7a7aa87a4b2dbd90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18193, "upload_time": "2016-04-05T08:38:41", "upload_time_iso_8601": "2016-04-05T08:38:41.855612Z", "url": "https://files.pythonhosted.org/packages/42/26/a2950a00c3bd74103bed07be4ea63d603c705208a4b563fe56b11623150f/django-mc-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bbc9f3b2257f3d3c7a7aa87a4b2dbd90", "sha256": "d43af60ad947fff0a0c88a42c1367f77d6d75d6696703e4eb44e96b862fced3f"}, "downloads": -1, "filename": "django-mc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bbc9f3b2257f3d3c7a7aa87a4b2dbd90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18193, "upload_time": "2016-04-05T08:38:41", "upload_time_iso_8601": "2016-04-05T08:38:41.855612Z", "url": "https://files.pythonhosted.org/packages/42/26/a2950a00c3bd74103bed07be4ea63d603c705208a4b563fe56b11623150f/django-mc-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:08 2020"}