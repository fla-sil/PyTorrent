{"info": {"author": "momijiame", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pandas-should\n\npandas-should is pandas extension for asserting.\n\n### Install\n\nInstall and update released version using pip:\n\n```sh\n$ pip install pandas-should\n```\n\nIf you want development version:\n\n```sh\n$ pip install git+https://github.com/momijiame/pandas-should.git\n```\n\n### Quickstart\n\nYou can just to import `pandas_should` to use:\n\n```python\nimport pandas_should\n```\n\n#### DataFrame\n\n##### Length (rows)\n\nBefore:\n\n```python\nassert len(df1) == len(df2)\n```\n\nAfter:\n\n```python\nassert df1.should.have_same_length(df2)\n```\n\nOr\n\n```python\nassert df1.should.have_length(len(df2))\n```\n\nBefore (multiple DataFrame):\n\n```python\nassert len(df1) == (len(df2) + len(df3))\n```\n\nAfter (multiple DataFrame)\n\n```python\nassert df1.should.have_same_length(df2, df3)\n```\n\n##### Width (columns)\n\nBefore:\n\n```python\nassert len(df1.columns) == len(df2.columns)\n```\n\nAfter:\n\n```python\nassert df1.should.have_same_width(df2)\n```\n\nOr\n\n```python\nassert df1.should.have_width(len(df2.columns))\n```\n\nBefore (multiple DataFrame):\n\n```python\nassert len(df1.columns) == (len(df2.columns)) + len(df3.columns)))\n```\n\nAfter (multiple DataFrame)\n\n```python\nassert df1.should.have_same_width(df2, df3)\n```\n\n##### Equality\n\nBefore:\n\n```python\nfrom pandas.util.testing import assert_frame_equal\ndef equal(a, b):\n    try:\n        assert_frame_equal(a, b)\n    except AssertionError:\n        return False\n    return True\n\nassert equal(df1, df2)\n```\n\nAfter:\n\n```python\nassert df1.should.equal(df2)\n```\n\n##### Null inclusion\n\nBefore:\n\n```python\nassert df.isnull().any(axis=None)\n```\n\nAfter:\n\n```python\nassert df.should.have_null()\n```\n\nOr expect not to be included:\n\n```python\nassert df.should.have_not_null()\nassert not df.should.have_null()\n```\n\n\n##### Shape\n\nBefore:\n\n```python\nassert df1.shape == df2.shape\n```\n\nAfter:\n\n```python\nassert df1.should.be_shaped_like(df2)\n```\n\nOr\n\n```python\nassert df1.should.be_shaped_like(df2.shape)\nassert df1.should.be_shaped_like(df2.shape[0], df2.shape[1])\n```\n\n##### Value range\n\nBefore:\n\n```python\nassert (df >= range_min).any(axis=None) and (df <= range_max).any(axis=None) \n```\n\nAfter:\n\n```python\nassert df.should.fall_within_range(range_min, range_max)\n```\n\nGreater than only:\n\n```python\nassert df.should.greater_than(range_min)\nassert df.should.greater_than_or_equal(range_min)\n```\n\nLess than only:\n\n```python\nassert df.should.less_than(range_min)\nassert df.should.less_than_or_equal(range_min)\n```\n\n#### Series\n\n##### Length\n\nBefore:\n\n```python\nassert len(s1) == len(s2)\n```\n\nAfter:\n\n```python\nassert s1.should.have_same_length(s2)\n```\n\nOr:\n\n```python\nassert s1.should.have_length(len(s2))\n```\n\nBefore (multiple Series):\n\n```python\nassert len(s1) == (len(s2) + len(s3))\n```\n\nAfter (multiple Series):\n\n```python\nassert s1.should.have_same_length(s2, s3)\n```\n\n##### Equality\n\nBefore:\n\n```python\nfrom pandas.util.testing import assert_series_equal\ndef equal(a, b):\n    try:\n        assert_series_equal(a, b)\n    except AssertionError:\n        return False\n    return True\n\nassert equal(s1, s2)\n```\n\nAfter:\n\n```python\nassert s1.should.equal(s2)\n```\n\n##### Null inclusion\n\nBefore:\n\n```python\nassert s.isnull().any()\n```\n\nAfter:\n\n```python\nassert s.should.have_null()\n```\n\nOr expect not to be included:\n\n```python\nassert s.should.have_not_null()\nassert not s.should.have_null()\n```\n\n##### Value range\n\n\nBefore:\n\n```python\nassert (s >= range_min).any() and (s <= range_max).any() \n```\n\nAfter:\n\n```python\nassert s.should.fall_within_range(range_min, range_max)\n```\n\nGreater than only:\n\n```python\nassert s.should.greater_than(range_min)\nassert s.should.greater_than_or_equal(range_min)\n```\n\nLess than only:\n\n```python\nassert s.should.less_than(range_min)\nassert s.should.less_than_or_equal(range_min)\n```\n\n##### Value variety\n\nBefore:\n\n```python\nassert len(s.unique()) == expect_size\n```\n\nAfter:\n\n```python\nassert s.should.have_number_of_unique_values(expect_size)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/momijiame/pandas-should", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "pandas-should", "package_url": "https://pypi.org/project/pandas-should/", "platform": "", "project_url": "https://pypi.org/project/pandas-should/", "project_urls": {"Homepage": "https://github.com/momijiame/pandas-should"}, "release_url": "https://pypi.org/project/pandas-should/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "pandas extension for asserting", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pandas-should</h1>\n<p>pandas-should is pandas extension for asserting.</p>\n<h3>Install</h3>\n<p>Install and update released version using pip:</p>\n<pre>$ pip install pandas-should\n</pre>\n<p>If you want development version:</p>\n<pre>$ pip install git+https://github.com/momijiame/pandas-should.git\n</pre>\n<h3>Quickstart</h3>\n<p>You can just to import <code>pandas_should</code> to use:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas_should</span>\n</pre>\n<h4>DataFrame</h4>\n<h5>Length (rows)</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_length</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<p>Or</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_length</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">))</span>\n</pre>\n<p>Before (multiple DataFrame):</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df3</span><span class=\"p\">))</span>\n</pre>\n<p>After (multiple DataFrame)</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_length</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">,</span> <span class=\"n\">df3</span><span class=\"p\">)</span>\n</pre>\n<h5>Width (columns)</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_width</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<p>Or</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_width</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">))</span>\n</pre>\n<p>Before (multiple DataFrame):</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df3</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)))</span>\n</pre>\n<p>After (multiple DataFrame)</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_width</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">,</span> <span class=\"n\">df3</span><span class=\"p\">)</span>\n</pre>\n<h5>Equality</h5>\n<p>Before:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"kn\">import</span> <span class=\"n\">assert_frame_equal</span>\n<span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">assert_frame_equal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<h5>Null inclusion</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_null</span><span class=\"p\">()</span>\n</pre>\n<p>Or expect not to be included:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_not_null</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_null</span><span class=\"p\">()</span>\n</pre>\n<h5>Shape</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be_shaped_like</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n</pre>\n<p>Or</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be_shaped_like</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">df1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">be_shaped_like</span><span class=\"p\">(</span><span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">df2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<h5>Value range</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">df</span> <span class=\"o\">&gt;=</span> <span class=\"n\">range_min</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">df</span> <span class=\"o\">&lt;=</span> <span class=\"n\">range_max</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> \n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">fall_within_range</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">,</span> <span class=\"n\">range_max</span><span class=\"p\">)</span>\n</pre>\n<p>Greater than only:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">greater_than</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">greater_than_or_equal</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n</pre>\n<p>Less than only:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">less_than</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">less_than_or_equal</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n</pre>\n<h4>Series</h4>\n<h5>Length</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_length</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n</pre>\n<p>Or:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_length</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">))</span>\n</pre>\n<p>Before (multiple Series):</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s3</span><span class=\"p\">))</span>\n</pre>\n<p>After (multiple Series):</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_same_length</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">s3</span><span class=\"p\">)</span>\n</pre>\n<h5>Equality</h5>\n<p>Before:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pandas.util.testing</span> <span class=\"kn\">import</span> <span class=\"n\">assert_series_equal</span>\n<span class=\"k\">def</span> <span class=\"nf\">equal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">assert_series_equal</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">)</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s1</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">equal</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">)</span>\n</pre>\n<h5>Null inclusion</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">()</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_null</span><span class=\"p\">()</span>\n</pre>\n<p>Or expect not to be included:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_not_null</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_null</span><span class=\"p\">()</span>\n</pre>\n<h5>Value range</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&gt;=</span> <span class=\"n\">range_min</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">&lt;=</span> <span class=\"n\">range_max</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">()</span> \n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">fall_within_range</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">,</span> <span class=\"n\">range_max</span><span class=\"p\">)</span>\n</pre>\n<p>Greater than only:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">greater_than</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">greater_than_or_equal</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n</pre>\n<p>Less than only:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">less_than</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">less_than_or_equal</span><span class=\"p\">(</span><span class=\"n\">range_min</span><span class=\"p\">)</span>\n</pre>\n<h5>Value variety</h5>\n<p>Before:</p>\n<pre><span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"n\">expect_size</span>\n</pre>\n<p>After:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">should</span><span class=\"o\">.</span><span class=\"n\">have_number_of_unique_values</span><span class=\"p\">(</span><span class=\"n\">expect_size</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5481137, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "39b453ff2779c8f42e780f818a0177ab", "sha256": "ee7511fd119eaf93396b83c443453f48facfc881846c80336696ebabe0a75690"}, "downloads": -1, "filename": "pandas-should-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39b453ff2779c8f42e780f818a0177ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3909, "upload_time": "2019-07-03T12:42:26", "upload_time_iso_8601": "2019-07-03T12:42:26.137809Z", "url": "https://files.pythonhosted.org/packages/f3/c5/f68f953e0b2f0f44b0ac80ff55d27ea0b096a891a5702b610023dbdb6ec5/pandas-should-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39b453ff2779c8f42e780f818a0177ab", "sha256": "ee7511fd119eaf93396b83c443453f48facfc881846c80336696ebabe0a75690"}, "downloads": -1, "filename": "pandas-should-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39b453ff2779c8f42e780f818a0177ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3909, "upload_time": "2019-07-03T12:42:26", "upload_time_iso_8601": "2019-07-03T12:42:26.137809Z", "url": "https://files.pythonhosted.org/packages/f3/c5/f68f953e0b2f0f44b0ac80ff55d27ea0b096a891a5702b610023dbdb6ec5/pandas-should-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:27 2020"}