{"info": {"author": "Alex Saskevich", "author_email": "bwatas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System", "Topic :: System :: Filesystems", "Topic :: Utilities"], "description": "binario\r\n=======\r\nSimple work with binary data.\r\n\r\nWhat is the binario?\r\n--------------------\r\n**binario** is the Python package that lets an application read/write primitive data types from an underlying input/output stream as binary data.\r\n\r\nAnd which primitive data types it can process?\r\n----------------------------------------------\r\nIt can work with booleans, integers, shorts, long integers, floats, doubles, strings and any byte buffers.\r\n\r\nHow to write data?\r\n------------------\r\nIt's simple. Just create instance of `Writer` and then do your work:\r\n\r\n>>> import binario\r\n>>> w = binario.Writer(\"file.dat\")\r\n>>> w.write_short(2014)\r\n>>> w.write_bool(True)\r\n>>> w.write_float(3.1415)\r\n>>> w.write_string(\"Hello, world!\")\r\n>>> w.write(bytes([128, 20, 10, 255, 0]))\r\n\r\nAnd how to read data?\r\n---------------------\r\nIt's simple too. Like outputting, create `Reader` and then do your work:\r\n\r\n>>> import binario\r\n>>> r = binario.Reader(\"file.dat\")\r\n>>> r.read_short()\r\n2014\r\n>>> r.read_bool()\r\nTrue\r\n>>> r.read_float()\r\n3.1415\r\n>>> r.read_string()\r\n\"Hello, world!\"\r\n>>> r.read(5)\r\nb'\\x80\\x14\\n\\xff\\x00'\r\n\r\nWhich byte order specified by default?\r\n--------------------------------------\r\nBy default it is `network` order (or `big-endian`).\r\n\r\nOkay, it is good, but if I want to change byte order for `Reader` or `Writer`?\r\n------------------------------------------------------------------------------\r\nNot a problem! Just specify it:\r\n\r\n>>> import binario\r\n>>> r = binario.Reader(\"file.dat\", binario.LITTLE_ENDIAN)\r\n>>> w = binario.Writer(\"another_file.dat\", binario.BIG_ENDIAN)\r\n\r\n\r\nWhat about append new data to existing file?\r\n--------------------------------------------\r\nYeah, it is also very simple:\r\n\r\n>>> import binario\r\n>>> w = binario.Writer(\"incomplete_file.dat\", append=True)\r\n\r\n\r\nHow to install this package?\r\n----------------------------\r\nJust type in your terminal\r\n\r\n>>> pip install binario\r\n\r\nWhere to find documentation?\r\n----------------------------\r\nLook here: http://binarios-docs.readthedocs.org/en/latest/\r\n\r\nContribution\r\n------------\r\nIf you do have a contribution for the package feel free to put up a Pull Request or open Issue on GitHub repo: http://github.com/asaskevich/binario.", "description_content_type": null, "docs_url": null, "download_url": "https://pypi.python.org/pypi/binario", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/asaskevich/binario", "keywords": "io input output file binary binario data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "binario", "package_url": "https://pypi.org/project/binario/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/binario/", "project_urls": {"Download": "https://pypi.python.org/pypi/binario", "Homepage": "http://github.com/asaskevich/binario"}, "release_url": "https://pypi.org/project/binario/0.0.4/", "requires_dist": null, "requires_python": null, "summary": "Package that lets an application read/write primitive data types from an underlying input/output stream as binary data.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple work with binary data.</p>\n<div id=\"what-is-the-binario\">\n<h2>What is the binario?</h2>\n<p><strong>binario</strong> is the Python package that lets an application read/write primitive data types from an underlying input/output stream as binary data.</p>\n</div>\n<div id=\"and-which-primitive-data-types-it-can-process\">\n<h2>And which primitive data types it can process?</h2>\n<p>It can work with booleans, integers, shorts, long integers, floats, doubles, strings and any byte buffers.</p>\n</div>\n<div id=\"how-to-write-data\">\n<h2>How to write data?</h2>\n<p>It\u2019s simple. Just create instance of <cite>Writer</cite> and then do your work:</p>\n<pre>&gt;&gt;&gt; import binario\n&gt;&gt;&gt; w = binario.Writer(\"file.dat\")\n&gt;&gt;&gt; w.write_short(2014)\n&gt;&gt;&gt; w.write_bool(True)\n&gt;&gt;&gt; w.write_float(3.1415)\n&gt;&gt;&gt; w.write_string(\"Hello, world!\")\n&gt;&gt;&gt; w.write(bytes([128, 20, 10, 255, 0]))\n</pre>\n</div>\n<div id=\"and-how-to-read-data\">\n<h2>And how to read data?</h2>\n<p>It\u2019s simple too. Like outputting, create <cite>Reader</cite> and then do your work:</p>\n<pre>&gt;&gt;&gt; import binario\n&gt;&gt;&gt; r = binario.Reader(\"file.dat\")\n&gt;&gt;&gt; r.read_short()\n2014\n&gt;&gt;&gt; r.read_bool()\nTrue\n&gt;&gt;&gt; r.read_float()\n3.1415\n&gt;&gt;&gt; r.read_string()\n\"Hello, world!\"\n&gt;&gt;&gt; r.read(5)\nb'\\x80\\x14\\n\\xff\\x00'\n</pre>\n</div>\n<div id=\"which-byte-order-specified-by-default\">\n<h2>Which byte order specified by default?</h2>\n<p>By default it is <cite>network</cite> order (or <cite>big-endian</cite>).</p>\n</div>\n<div id=\"okay-it-is-good-but-if-i-want-to-change-byte-order-for-reader-or-writer\">\n<h2>Okay, it is good, but if I want to change byte order for <cite>Reader</cite> or <cite>Writer</cite>?</h2>\n<p>Not a problem! Just specify it:</p>\n<pre>&gt;&gt;&gt; import binario\n&gt;&gt;&gt; r = binario.Reader(\"file.dat\", binario.LITTLE_ENDIAN)\n&gt;&gt;&gt; w = binario.Writer(\"another_file.dat\", binario.BIG_ENDIAN)\n</pre>\n</div>\n<div id=\"what-about-append-new-data-to-existing-file\">\n<h2>What about append new data to existing file?</h2>\n<p>Yeah, it is also very simple:</p>\n<pre>&gt;&gt;&gt; import binario\n&gt;&gt;&gt; w = binario.Writer(\"incomplete_file.dat\", append=True)\n</pre>\n</div>\n<div id=\"how-to-install-this-package\">\n<h2>How to install this package?</h2>\n<p>Just type in your terminal</p>\n<pre>&gt;&gt;&gt; pip install binario\n</pre>\n</div>\n<div id=\"where-to-find-documentation\">\n<h2>Where to find documentation?</h2>\n<p>Look here: <a href=\"http://binarios-docs.readthedocs.org/en/latest/\" rel=\"nofollow\">http://binarios-docs.readthedocs.org/en/latest/</a></p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>If you do have a contribution for the package feel free to put up a Pull Request or open Issue on GitHub repo: <a href=\"http://github.com/asaskevich/binario\" rel=\"nofollow\">http://github.com/asaskevich/binario</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1199166, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7d3a5a2d273a88db457365806a05062b", "sha256": "dcd9a45bf5bc1ae064f91af9781dafbe5d8156f1b8946073a637455b7ee4509d"}, "downloads": -1, "filename": "binario-0.0.1.zip", "has_sig": false, "md5_digest": "7d3a5a2d273a88db457365806a05062b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6261, "upload_time": "2014-08-20T12:05:12", "upload_time_iso_8601": "2014-08-20T12:05:12.048601Z", "url": "https://files.pythonhosted.org/packages/0c/28/005a1ad2d23d3774a430a4fe89722b9bec291fc9a891d0493da965b184d5/binario-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3083625ebe1024ac02b954e03bfc6573", "sha256": "143b09ba52862f32c35a08fd0e3465135562f9079d1b1bfcb726738cf54728db"}, "downloads": -1, "filename": "binario-0.0.2.zip", "has_sig": false, "md5_digest": "3083625ebe1024ac02b954e03bfc6573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7341, "upload_time": "2014-08-20T12:24:54", "upload_time_iso_8601": "2014-08-20T12:24:54.063695Z", "url": "https://files.pythonhosted.org/packages/1f/a9/56670c7087bb891548081d63d27dc3ee0273a0edd20aa99e3a4f4963e07f/binario-0.0.2.zip", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "262b531ab16bd7b12c63156dbe9cc66f", "sha256": "8781d6373f864c788465e2b18e95f98579c5ee185c00248f4e228540e7d424e7"}, "downloads": -1, "filename": "binario-0.0.3.zip", "has_sig": false, "md5_digest": "262b531ab16bd7b12c63156dbe9cc66f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8116, "upload_time": "2014-08-20T18:08:26", "upload_time_iso_8601": "2014-08-20T18:08:26.029645Z", "url": "https://files.pythonhosted.org/packages/2a/4b/fb5471187063ac5069b371e4b71f3f773768298db28c4f7f9536f250a74f/binario-0.0.3.zip", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "54a599545c1f24e272280924b5a0272e", "sha256": "50130ba47054bbcbee236d3f378f315985ad6e1ca9eeacce5494c4e102f30c47"}, "downloads": -1, "filename": "binario-0.0.4.zip", "has_sig": false, "md5_digest": "54a599545c1f24e272280924b5a0272e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9796, "upload_time": "2014-08-21T18:02:31", "upload_time_iso_8601": "2014-08-21T18:02:31.460840Z", "url": "https://files.pythonhosted.org/packages/d5/f6/f676b20fe94cb4df2942f5da75ec945bc11a148989cf8129c74cb2e2d0aa/binario-0.0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54a599545c1f24e272280924b5a0272e", "sha256": "50130ba47054bbcbee236d3f378f315985ad6e1ca9eeacce5494c4e102f30c47"}, "downloads": -1, "filename": "binario-0.0.4.zip", "has_sig": false, "md5_digest": "54a599545c1f24e272280924b5a0272e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9796, "upload_time": "2014-08-21T18:02:31", "upload_time_iso_8601": "2014-08-21T18:02:31.460840Z", "url": "https://files.pythonhosted.org/packages/d5/f6/f676b20fe94cb4df2942f5da75ec945bc11a148989cf8129c74cb2e2d0aa/binario-0.0.4.zip", "yanked": false}], "timestamp": "Thu May  7 22:37:30 2020"}