{"info": {"author": "Hsiaoming Yang", "author_email": "lepture@me.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Database :: Front-Ends", "Topic :: Software Development :: Libraries"], "description": "Vino\n=======\n\nVINO Is Not ORM. Yes, it's true, it's not ORM.\n\n\nGet Started\n------------\n\nA quick view with Vino::\n\n    # setup\n    # db = Vino('engine://user:passwd@host:port/database')\n    db = Vino('sqlite://db.sqlite')\n\n    # query\n    db.table('user').find(username='lepture').fetch()\n\n    # create\n    db.table('user').create(username='lepture', website='http://lepture.com')\n    db.commit()\n\n    # update\n    db.table('user').find(username='lepture').update(username='Hsiaoming Yang')\n    db.commit()\n\n    # delete\n    db.table('user').find(username='lepture').delete()\n    db.commit()\n\n\nSetup\n------\n\nWe will only support sqlite3 and mysql by now.\n\nSQLite\n~~~~~~~\n\nSQLite with relative path::\n\n    db = Vino('sqlite://relative/path/db.sqlite')\n\nSQLite with absolute path::\n\n    db = Vino('sqlite:///root/path/db.sqlite')\n\n**Please note, it's different from SQLAlchemy**.\n\nMySQL\n~~~~~~~\n\nMySQL with all information::\n\n    db = Vino('mysql://lepture:123456@localhost:3306/test')\n\nMySQL with less information::\n\n    db = Vino('mysql://lepture@localhost/test')\n\nDefault port is 3306.\n\n**Please note, it's utf8 by default**.\n\n\nQuery\n------\n\nFind all data::\n\n    db.table('user').fetch()\n\nFind all specified data::\n\n    db.table('user').find(username='lepture').fetch()\n\nFind the first data::\n\n    # fetch 1 will not return a list\n    db.table('user').find(username='lepture').fetch(1)\n\nLimit on query::\n\n    db.table('user').find(username='lepture').fetch(5, offset=3)\n\nMultiple filters::\n\n    db.table('user').find(username='lepture', age=20).fetch()\n\nAdvanced filters::\n\n    # just like Django\n\n    db.table('user').find(age__in=[20, 22]).fetch()\n    db.table('user').find(age__gt=20).fetch()\n    db.table('user').find(age__lt=20).fetch()\n    db.table('user').find(age__gte=20).fetch()\n    db.table('user').find(age__lte=20).fetch()\n\n    # more see documentation\n\nMore Advanced filters::\n\n    db.table('user').find(age__ne=20).fetch()  # not equal\n    db.table('user').find(age__nin=[20, 22]).fetch()  # not in\n\n    # more see documentation\n\nQuery order::\n\n    db.table('user').find(age=20).order('-id').fetch()\n\n\nCreate\n-------\n\n\nUpdate\n-------\n\n\nDelete\n---------\n\nDelete all data::\n\n    db.table('user').delete()\n    db.commit()\n\nDelete specified data::\n\n    db.table('user').find(username='lepture').delete()\n    db.commit()\n\n\nFAQ\n-----\n\n1. How do I join tables?\n\n   Vino provides clean and simple API, you should join tables yourself\n   with ``db.raw``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "vino", "package_url": "https://pypi.org/project/vino/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vino/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/vino/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Vino Is Not ORM", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>VINO Is Not ORM. Yes, it\u2019s true, it\u2019s not ORM.</p>\n<div id=\"get-started\">\n<h2>Get Started</h2>\n<p>A quick view with Vino:</p>\n<pre># setup\n# db = Vino('engine://user:passwd@host:port/database')\ndb = Vino('sqlite://db.sqlite')\n\n# query\ndb.table('user').find(username='lepture').fetch()\n\n# create\ndb.table('user').create(username='lepture', website='http://lepture.com')\ndb.commit()\n\n# update\ndb.table('user').find(username='lepture').update(username='Hsiaoming Yang')\ndb.commit()\n\n# delete\ndb.table('user').find(username='lepture').delete()\ndb.commit()\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>We will only support sqlite3 and mysql by now.</p>\n<div id=\"sqlite\">\n<h3>SQLite</h3>\n<p>SQLite with relative path:</p>\n<pre>db = Vino('sqlite://relative/path/db.sqlite')\n</pre>\n<p>SQLite with absolute path:</p>\n<pre>db = Vino('sqlite:///root/path/db.sqlite')\n</pre>\n<p><strong>Please note, it\u2019s different from SQLAlchemy</strong>.</p>\n</div>\n<div id=\"mysql\">\n<h3>MySQL</h3>\n<p>MySQL with all information:</p>\n<pre>db = Vino('mysql://lepture:123456@localhost:3306/test')\n</pre>\n<p>MySQL with less information:</p>\n<pre>db = Vino('mysql://lepture@localhost/test')\n</pre>\n<p>Default port is 3306.</p>\n<p><strong>Please note, it\u2019s utf8 by default</strong>.</p>\n</div>\n</div>\n<div id=\"query\">\n<h2>Query</h2>\n<p>Find all data:</p>\n<pre>db.table('user').fetch()\n</pre>\n<p>Find all specified data:</p>\n<pre>db.table('user').find(username='lepture').fetch()\n</pre>\n<p>Find the first data:</p>\n<pre># fetch 1 will not return a list\ndb.table('user').find(username='lepture').fetch(1)\n</pre>\n<p>Limit on query:</p>\n<pre>db.table('user').find(username='lepture').fetch(5, offset=3)\n</pre>\n<p>Multiple filters:</p>\n<pre>db.table('user').find(username='lepture', age=20).fetch()\n</pre>\n<p>Advanced filters:</p>\n<pre># just like Django\n\ndb.table('user').find(age__in=[20, 22]).fetch()\ndb.table('user').find(age__gt=20).fetch()\ndb.table('user').find(age__lt=20).fetch()\ndb.table('user').find(age__gte=20).fetch()\ndb.table('user').find(age__lte=20).fetch()\n\n# more see documentation\n</pre>\n<p>More Advanced filters:</p>\n<pre>db.table('user').find(age__ne=20).fetch()  # not equal\ndb.table('user').find(age__nin=[20, 22]).fetch()  # not in\n\n# more see documentation\n</pre>\n<p>Query order:</p>\n<pre>db.table('user').find(age=20).order('-id').fetch()\n</pre>\n</div>\n<div id=\"create\">\n<h2>Create</h2>\n</div>\n<div id=\"update\">\n<h2>Update</h2>\n</div>\n<div id=\"delete\">\n<h2>Delete</h2>\n<p>Delete all data:</p>\n<pre>db.table('user').delete()\ndb.commit()\n</pre>\n<p>Delete specified data:</p>\n<pre>db.table('user').find(username='lepture').delete()\ndb.commit()\n</pre>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<ol>\n<li><p>How do I join tables?</p>\n<p>Vino provides clean and simple API, you should join tables yourself\nwith <tt>db.raw</tt></p>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 449046, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 03:35:53 2020"}