{"info": {"author": "Andrew Miller et al.", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only"], "description": "Most fault tolerant protocols (including RAFT, PBFT, Zyzzyva, Q/U)\ndon't guarantee good performance when there are Byzantine faults. Even\nthe so-called \"robust\" BFT protocols (like UpRight, RBFT, Prime,\nSpinning, and Stellar) have various hard-coded timeout parameters, and\ncan only guarantee performance when the network behaves approximately as\nexpected - hence they are best suited to well-controlled settings like\ncorporate data centers.\n\nHoneyBadgerBFT is fault tolerance for the wild wild wide-area-network.\nHoneyBadger nodes can even stay hidden behind anonymizing relays like\nTor, and the purely-asynchronous protocol will make progress at whatever\nrate the network supports.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amiller/HoneyBadgerBFT", "keywords": "distributed systems,cryptography,byzantine fault tolerance", "license": "CRAPL", "maintainer": "", "maintainer_email": "", "name": "honeybadgerbft", "package_url": "https://pypi.org/project/honeybadgerbft/", "platform": "", "project_url": "https://pypi.org/project/honeybadgerbft/", "project_urls": {"Homepage": "https://github.com/amiller/HoneyBadgerBFT"}, "release_url": "https://pypi.org/project/honeybadgerbft/0.0.0/", "requires_dist": null, "requires_python": "", "summary": "The Honey Badger of BFT Protocols", "version": "0.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Most fault tolerant protocols (including RAFT, PBFT, Zyzzyva, Q/U)\ndon\u2019t guarantee good performance when there are Byzantine faults. Even\nthe so-called \u201crobust\u201d BFT protocols (like UpRight, RBFT, Prime,\nSpinning, and Stellar) have various hard-coded timeout parameters, and\ncan only guarantee performance when the network behaves approximately as\nexpected - hence they are best suited to well-controlled settings like\ncorporate data centers.</p>\n<p>HoneyBadgerBFT is fault tolerance for the wild wild wide-area-network.\nHoneyBadger nodes can even stay hidden behind anonymizing relays like\nTor, and the purely-asynchronous protocol will make progress at whatever\nrate the network supports.</p>\n\n          </div>"}, "last_serial": 3226334, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "83418baa5bd2ca96d66de367ab988884", "sha256": "af6fdbf0f13b26f775d1c4125398f4dd4ec41de314e96d7109070d493bb49a55"}, "downloads": -1, "filename": "honeybadgerbft-0.0.0.tar.gz", "has_sig": true, "md5_digest": "83418baa5bd2ca96d66de367ab988884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3663, "upload_time": "2017-10-04T20:31:10", "upload_time_iso_8601": "2017-10-04T20:31:10.883893Z", "url": "https://files.pythonhosted.org/packages/63/4c/154633dcb5d23ce395d042f790d2880a15c079fbdcae7b7810dad92597ad/honeybadgerbft-0.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83418baa5bd2ca96d66de367ab988884", "sha256": "af6fdbf0f13b26f775d1c4125398f4dd4ec41de314e96d7109070d493bb49a55"}, "downloads": -1, "filename": "honeybadgerbft-0.0.0.tar.gz", "has_sig": true, "md5_digest": "83418baa5bd2ca96d66de367ab988884", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3663, "upload_time": "2017-10-04T20:31:10", "upload_time_iso_8601": "2017-10-04T20:31:10.883893Z", "url": "https://files.pythonhosted.org/packages/63/4c/154633dcb5d23ce395d042f790d2880a15c079fbdcae7b7810dad92597ad/honeybadgerbft-0.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:42 2020"}