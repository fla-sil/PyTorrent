{"info": {"author": "Krisztian Toth", "author_email": "tkrisztiana@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Keycloak based authentication policy for Pyramid framework\n\n\nAuthentication policy which uses Keycloak's OpenID API via a client\nto authenticate the user. It uses cookies to hold the access token and\nthe refresh token.\n\nThis package is dependant on the package `python-keycloak`.\n\n## Usage\n\n```python\nfrom keycloak import KeycloakOpenID\nfrom pyramid.config import Configurator\nfrom keycloak_auth_policy import KeycloakBasedAuthenticationPolicy\n\ndef main():\n    openid_client = KeycloakOpenID(...)\n    config = Configurator()\n    config.set_authentication_policy(\n        KeycloakBasedAuthenticationPolicy(openid_client))\n```\n\nYou have to handle the redirect logic in your forbidden view based on your \nneeds:\n\n```python\nfrom pyramid.httpexceptions import HTTPFound, HTTPForbidden\nfrom pyramid.request import Request\nfrom pyramid.view import forbidden_view_config\n\n@forbidden_view_config()\ndef forbidden_view(request: Request):\n    if ...: # user has no privileges\n        raise HTTPForbidden(\"You don't have permissions for this action\")\n\n    # Keycloak's URL to redirect to where the user can log in\n    url = ...\n\n    # you can either redirect to the URL or return it if you have a client \n    # which consumes your API\n    return HTTPFound(url)\n``` \n\nYou also need to have a callback endpoint where Keycloak redirects to after a \nsuccessful login\n\n```python\nfrom keycloak.exceptions import KeycloakError\nfrom pyramid.httpexceptions import HTTPFound\nfrom pyramid.request import Request\nfrom pyramid.view import view_defaults, view_config\n\n\n@view_defaults(renderer='json')\nclass AuthApi:\n\n    def __init__(self, request: Request) -> None:\n        self.request = request\n        self._openid_client = ... # get OpenID client\n\n    @view_config(route_name='auth.exchange', request_method='GET',\n                 permission='public')\n    def exchange(self):\n        try:\n            token_response = self._openid_client.exchange(\n                self.request.GET.get(\"code\"),\n                self.request.route_url(\"auth.exchange\")) # the redirect URI\n        except KeycloakError as e:\n            ... # handle exception\n\n        access_token = token_response.get(\"access_token\")\n        refresh_token = token_response.get(\"refresh_token\")\n\n        # set the tokens as cookies to the client and return a response\n        # you can either redirect from here or if your application is consumed\n        # as an API you can return a successful response\n        response = HTTPFound(...)\n        response.set_cookie(\"refresh_token_cookie_name\", refresh_token)\n        response.set_cookie(\"access_token_cookie_name\", access_token)\n\n        return response\n```\n\nYou can also implement a logout endpoint if you feel like to\n\n```python\nfrom pyramid.security import forget\n\n    ...\n\n    @view_config(route_name='auth.logout', request_method='GET',\n                 permission='private')\n    def logout(self):\n        headers = forget(self.request)\n        response = self.request.response\n        response.headerlist.extend(headers)\n        return response\n```\n\nFor more information see the docstrings of each method in the source.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/watsta/keycloak_pyramid", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyramid-keycloak", "package_url": "https://pypi.org/project/pyramid-keycloak/", "platform": "", "project_url": "https://pypi.org/project/pyramid-keycloak/", "project_urls": {"Homepage": "https://github.com/watsta/keycloak_pyramid"}, "release_url": "https://pypi.org/project/pyramid-keycloak/0.0.13/", "requires_dist": ["python-keycloak (<1.0)", "pyramid (<2.0,>1.0)"], "requires_python": "", "summary": "Keycloak based authentication policy for Pyramid", "version": "0.0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keycloak based authentication policy for Pyramid framework</h1>\n<p>Authentication policy which uses Keycloak's OpenID API via a client\nto authenticate the user. It uses cookies to hold the access token and\nthe refresh token.</p>\n<p>This package is dependant on the package <code>python-keycloak</code>.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keycloak</span> <span class=\"kn\">import</span> <span class=\"n\">KeycloakOpenID</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.config</span> <span class=\"kn\">import</span> <span class=\"n\">Configurator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keycloak_auth_policy</span> <span class=\"kn\">import</span> <span class=\"n\">KeycloakBasedAuthenticationPolicy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">openid_client</span> <span class=\"o\">=</span> <span class=\"n\">KeycloakOpenID</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configurator</span><span class=\"p\">()</span>\n    <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_authentication_policy</span><span class=\"p\">(</span>\n        <span class=\"n\">KeycloakBasedAuthenticationPolicy</span><span class=\"p\">(</span><span class=\"n\">openid_client</span><span class=\"p\">))</span>\n</pre>\n<p>You have to handle the redirect logic in your forbidden view based on your\nneeds:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyramid.httpexceptions</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPFound</span><span class=\"p\">,</span> <span class=\"n\">HTTPForbidden</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.request</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.view</span> <span class=\"kn\">import</span> <span class=\"n\">forbidden_view_config</span>\n\n<span class=\"nd\">@forbidden_view_config</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">forbidden_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"c1\"># user has no privileges</span>\n        <span class=\"k\">raise</span> <span class=\"n\">HTTPForbidden</span><span class=\"p\">(</span><span class=\"s2\">\"You don't have permissions for this action\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Keycloak's URL to redirect to where the user can log in</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n    <span class=\"c1\"># you can either redirect to the URL or return it if you have a client </span>\n    <span class=\"c1\"># which consumes your API</span>\n    <span class=\"k\">return</span> <span class=\"n\">HTTPFound</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<p>You also need to have a callback endpoint where Keycloak redirects to after a\nsuccessful login</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">keycloak.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">KeycloakError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.httpexceptions</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPFound</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.request</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyramid.view</span> <span class=\"kn\">import</span> <span class=\"n\">view_defaults</span><span class=\"p\">,</span> <span class=\"n\">view_config</span>\n\n\n<span class=\"nd\">@view_defaults</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">AuthApi</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openid_client</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># get OpenID client</span>\n\n    <span class=\"nd\">@view_config</span><span class=\"p\">(</span><span class=\"n\">route_name</span><span class=\"o\">=</span><span class=\"s1\">'auth.exchange'</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span>\n                 <span class=\"n\">permission</span><span class=\"o\">=</span><span class=\"s1\">'public'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">exchange</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">token_response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_openid_client</span><span class=\"o\">.</span><span class=\"n\">exchange</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"code\"</span><span class=\"p\">),</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">route_url</span><span class=\"p\">(</span><span class=\"s2\">\"auth.exchange\"</span><span class=\"p\">))</span> <span class=\"c1\"># the redirect URI</span>\n        <span class=\"k\">except</span> <span class=\"n\">KeycloakError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"o\">...</span> <span class=\"c1\"># handle exception</span>\n\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">token_response</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"access_token\"</span><span class=\"p\">)</span>\n        <span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"n\">token_response</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"refresh_token\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># set the tokens as cookies to the client and return a response</span>\n        <span class=\"c1\"># you can either redirect from here or if your application is consumed</span>\n        <span class=\"c1\"># as an API you can return a successful response</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HTTPFound</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span><span class=\"s2\">\"refresh_token_cookie_name\"</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span><span class=\"s2\">\"access_token_cookie_name\"</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>You can also implement a logout endpoint if you feel like to</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyramid.security</span> <span class=\"kn\">import</span> <span class=\"n\">forget</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"nd\">@view_config</span><span class=\"p\">(</span><span class=\"n\">route_name</span><span class=\"o\">=</span><span class=\"s1\">'auth.logout'</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span>\n                 <span class=\"n\">permission</span><span class=\"o\">=</span><span class=\"s1\">'private'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">logout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">response</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headerlist</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>For more information see the docstrings of each method in the source.</p>\n\n          </div>"}, "last_serial": 4359479, "releases": {"0.0.13": [{"comment_text": "", "digests": {"md5": "cfa0c00f7cc1dcbdd8133218e9efbe7e", "sha256": "b5ddb84b61c749f3c36f053545a16a39ebca42ec2bcec9a60274215deae12f79"}, "downloads": -1, "filename": "pyramid_keycloak-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa0c00f7cc1dcbdd8133218e9efbe7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5176, "upload_time": "2018-10-10T10:32:15", "upload_time_iso_8601": "2018-10-10T10:32:15.593012Z", "url": "https://files.pythonhosted.org/packages/a8/f1/858c9d6950cdad32ba7dc164e6ea5eb3212b17ac6736538117fc452648a0/pyramid_keycloak-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc455199df6b1e159add2b4bbd09bebd", "sha256": "8ffabe6541edd1d7b7eed0f82925ef922997afaebf95137f81b30183f11dada7"}, "downloads": -1, "filename": "pyramid_keycloak-0.0.13.tar.gz", "has_sig": false, "md5_digest": "bc455199df6b1e159add2b4bbd09bebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3855, "upload_time": "2018-10-10T10:32:17", "upload_time_iso_8601": "2018-10-10T10:32:17.400889Z", "url": "https://files.pythonhosted.org/packages/77/db/3535e98d8ca11a69fad24baeabdf8a5cd9d331481c49d602172dcc6453f0/pyramid_keycloak-0.0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfa0c00f7cc1dcbdd8133218e9efbe7e", "sha256": "b5ddb84b61c749f3c36f053545a16a39ebca42ec2bcec9a60274215deae12f79"}, "downloads": -1, "filename": "pyramid_keycloak-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa0c00f7cc1dcbdd8133218e9efbe7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5176, "upload_time": "2018-10-10T10:32:15", "upload_time_iso_8601": "2018-10-10T10:32:15.593012Z", "url": "https://files.pythonhosted.org/packages/a8/f1/858c9d6950cdad32ba7dc164e6ea5eb3212b17ac6736538117fc452648a0/pyramid_keycloak-0.0.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc455199df6b1e159add2b4bbd09bebd", "sha256": "8ffabe6541edd1d7b7eed0f82925ef922997afaebf95137f81b30183f11dada7"}, "downloads": -1, "filename": "pyramid_keycloak-0.0.13.tar.gz", "has_sig": false, "md5_digest": "bc455199df6b1e159add2b4bbd09bebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3855, "upload_time": "2018-10-10T10:32:17", "upload_time_iso_8601": "2018-10-10T10:32:17.400889Z", "url": "https://files.pythonhosted.org/packages/77/db/3535e98d8ca11a69fad24baeabdf8a5cd9d331481c49d602172dcc6453f0/pyramid_keycloak-0.0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:24 2020"}