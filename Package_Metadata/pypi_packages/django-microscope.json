{"info": {"author": "Keryn Knight", "author_email": "django-microscope@kerynknight.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "django-microscope\n================================\n\n:author: Keryn Knight\n:version: 0.1.1\n\nConvert a `Django`_ app into a standalone `Django`_ project so you can run it\nindependently as a microservice or what-have-you.\n\nConfiguration options given to ``run()`` are defaults, and may be replaced by\nenvironment variables thanks to `django-environ`_\n\nIf your app crosses boundaries into another application via imports, you should\nhopefully get warnings. Figuring out how to do that was mostly why I did this. I'd\nnever encountered `sys.meta_path`_ before.\n\nAlternatives\n------------\n\nIf you're starting a **new** app and want the proper micro experience, you\nmaybe want `django-micro`_ instead. It has magic involved too, but different magic!\n\nUsage\n-----\n\nCreate yourself a ``manage.py`` file in your app's folder (eg: where your\n``views.py``, ``models.py`` are) and do something like this...\n\n.. code:: python\n\n    from microscope import run\n    from django.conf.urls import url  # or path etc.\n\n    def urls():\n        from myapp.views import MyView\n        return [url('^$', MyView.as_view())]\n\n    application = run(\n        DEBUG=True,\n        ROOT_URLCONF=urls\n    )\n\nRunning it\n----------\n\nIt'll probably work, right? ``python manage.py [command]`` should all be OK.\nYou could probably go even more minimal with `dj-cmd`_ so you can do ``dj r``\n\nGunicorn\n^^^^^^^^\n\n``gunicorn manage`` and ``gunicorn manage:application`` should both work fine,\nas should ``DEBUG=0 gunicorn manage`` to change the setting by env-var.\n\nUWSGI\n^^^^^\n\nWhatever madness of command-line arguments or ini configuration invokes uwsgi for\nyou probably works; eg: ``uwsgi --http :8080 --wsgi-file `pwd`/manage.py --virtualenv $VIRTUAL_ENV``\n\nEnvironment variables should be fine?\n\nmod_wsgi\n^^^^^^^^\n\nIt'd probably work, but environment variable substitution for settings won't work\nat all, I don't think.\n\nURL configuration\n-----------------\n\nthe ``ROOT_URLCONF`` has to be a callable (function or object implementing ``__call__``)\nto defer execution of imports related to userland code, which almost certainly\ndepends on settings having already been configured. It's also because\nyour existing ``urls.py`` for the app may not be where you want the mountpoints\nwhen running it standalone vs as part of a monolith project.\n\nYou'll eagerly get an ``ImproperlyConfigured`` exception when starting the app, if your\n``ROOT_URLCONF`` is missing or not-callable.\n\nDon't worry, it's only called at startup, not on every request!\n\nIf you **do** want to use another file, ``microscope.urlconf('dotted.path.to.urls')``\nmay help\n\n.. code:: python\n\n    from microscope import run, urlconf\n    application = run(ROOT_URLCONF=urlconf('path.to.urls'))\n\nTests\n-----\n\nLiterally none. If you have `honcho`_ you can do ``honcho -f demo_project.procfile start``\nto start the ``demo_project.py`` (equivalent of ``manage.py``) using ``runserver``,\n``gunicorn`` and ``uwsgi`` on ports **8000**, **8001** and **8002** respectively.\n\nThe license\n-----------\n\nIt's the `FreeBSD`_. There's should be a ``LICENSE`` file in the root of the repository, and in any archives.\n\n.. _FreeBSD: http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29\n.. _Django: https://docs.djangoproject.com/en/stable/\n.. _django-environ: https://github.com/joke2k/django-environ\n.. _honcho: https://honcho.readthedocs.io/\n.. _sys.meta_path: https://docs.python.org/3/library/sys.html#sys.meta_path\n.. _django-micro: https://github.com/zenwalker/django-micro\n.. _dj-cmd: https://github.com/nigma/dj-cmd\n\n\n----\n\nCopyright (c) 2018, Keryn Knight\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n----\n\nChange history for django-microscope\n-------------------------------------------------------------\n0.1.1\n^^^^^^\n* Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kezabelle/django-microscope/", "keywords": "django django-microscope manage.py microservice microscope", "license": "BSD License", "maintainer": "Keryn Knight", "maintainer_email": "django-microscope@kerynknight.com", "name": "django-microscope", "package_url": "https://pypi.org/project/django-microscope/", "platform": "", "project_url": "https://pypi.org/project/django-microscope/", "project_urls": {"Homepage": "https://github.com/kezabelle/django-microscope/"}, "release_url": "https://pypi.org/project/django-microscope/0.1.1/", "requires_dist": ["Django (>=1.9)", "django-environ (>=0.4.4)"], "requires_python": "", "summary": "Turn a Django app into a Django project so it can run as a microservice or whatever", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>Keryn Knight</td></tr>\n<tr><th>Version:</th>\n<td>0.1.1</td></tr>\n</tbody>\n</table>\n<p>Convert a <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> app into a standalone <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> project so you can run it\nindependently as a microservice or what-have-you.</p>\n<p>Configuration options given to <tt>run()</tt> are defaults, and may be replaced by\nenvironment variables thanks to <a href=\"https://github.com/joke2k/django-environ\" rel=\"nofollow\">django-environ</a></p>\n<p>If your app crosses boundaries into another application via imports, you should\nhopefully get warnings. Figuring out how to do that was mostly why I did this. I\u2019d\nnever encountered <a href=\"https://docs.python.org/3/library/sys.html#sys.meta_path\" rel=\"nofollow\">sys.meta_path</a> before.</p>\n<div id=\"alternatives\">\n<h2>Alternatives</h2>\n<p>If you\u2019re starting a <strong>new</strong> app and want the proper micro experience, you\nmaybe want <a href=\"https://github.com/zenwalker/django-micro\" rel=\"nofollow\">django-micro</a> instead. It has magic involved too, but different magic!</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create yourself a <tt>manage.py</tt> file in your app\u2019s folder (eg: where your\n<tt>views.py</tt>, <tt>models.py</tt> are) and do something like this\u2026</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">microscope</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>  <span class=\"c1\"># or path etc.</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">urls</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">myapp.views</span> <span class=\"kn\">import</span> <span class=\"n\">MyView</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s1\">'^$'</span><span class=\"p\">,</span> <span class=\"n\">MyView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">())]</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">DEBUG</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">ROOT_URLCONF</span><span class=\"o\">=</span><span class=\"n\">urls</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"running-it\">\n<h2>Running it</h2>\n<p>It\u2019ll probably work, right? <tt>python manage.py [command]</tt> should all be OK.\nYou could probably go even more minimal with <a href=\"https://github.com/nigma/dj-cmd\" rel=\"nofollow\">dj-cmd</a> so you can do <tt>dj r</tt></p>\n<div id=\"gunicorn\">\n<h3>Gunicorn</h3>\n<p><tt>gunicorn manage</tt> and <tt>gunicorn manage:application</tt> should both work fine,\nas should <tt>DEBUG=0 gunicorn manage</tt> to change the setting by env-var.</p>\n</div>\n<div id=\"uwsgi\">\n<h3>UWSGI</h3>\n<p>Whatever madness of command-line arguments or ini configuration invokes uwsgi for\nyou probably works; eg: <tt>uwsgi <span class=\"pre\">--http</span> :8080 <span class=\"pre\">--wsgi-file</span> <span class=\"pre\">`pwd`/manage.py</span> <span class=\"pre\">--virtualenv</span> $VIRTUAL_ENV</tt></p>\n<p>Environment variables should be fine?</p>\n</div>\n<div id=\"mod-wsgi\">\n<h3>mod_wsgi</h3>\n<p>It\u2019d probably work, but environment variable substitution for settings won\u2019t work\nat all, I don\u2019t think.</p>\n</div>\n</div>\n<div id=\"url-configuration\">\n<h2>URL configuration</h2>\n<p>the <tt>ROOT_URLCONF</tt> has to be a callable (function or object implementing <tt>__call__</tt>)\nto defer execution of imports related to userland code, which almost certainly\ndepends on settings having already been configured. It\u2019s also because\nyour existing <tt>urls.py</tt> for the app may not be where you want the mountpoints\nwhen running it standalone vs as part of a monolith project.</p>\n<p>You\u2019ll eagerly get an <tt>ImproperlyConfigured</tt> exception when starting the app, if your\n<tt>ROOT_URLCONF</tt> is missing or not-callable.</p>\n<p>Don\u2019t worry, it\u2019s only called at startup, not on every request!</p>\n<p>If you <strong>do</strong> want to use another file, <tt><span class=\"pre\">microscope.urlconf('dotted.path.to.urls')</span></tt>\nmay help</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">microscope</span> <span class=\"kn\">import</span> <span class=\"n\">run</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">ROOT_URLCONF</span><span class=\"o\">=</span><span class=\"n\">urlconf</span><span class=\"p\">(</span><span class=\"s1\">'path.to.urls'</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Literally none. If you have <a href=\"https://honcho.readthedocs.io/\" rel=\"nofollow\">honcho</a> you can do <tt>honcho <span class=\"pre\">-f</span> demo_project.procfile start</tt>\nto start the <tt>demo_project.py</tt> (equivalent of <tt>manage.py</tt>) using <tt>runserver</tt>,\n<tt>gunicorn</tt> and <tt>uwsgi</tt> on ports <strong>8000</strong>, <strong>8001</strong> and <strong>8002</strong> respectively.</p>\n</div>\n<div id=\"the-license\">\n<h2>The license</h2>\n<p>It\u2019s the <a href=\"http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29\" rel=\"nofollow\">FreeBSD</a>. There\u2019s should be a <tt>LICENSE</tt> file in the root of the repository, and in any archives.</p>\n<hr class=\"docutils\">\n<p>Copyright (c) 2018, Keryn Knight\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>\n<ol>\n<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>\n</ol>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"change-history-for-django-microscope\">\n<h2>Change history for django-microscope</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.1</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5007510, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8120d0bf61adfbd0a2e6d5a367690f8e", "sha256": "db9684dd3540fdaed94c1cf9de189393912287c0ccd6dd8f8ef45e26bf2194da"}, "downloads": -1, "filename": "django_microscope-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8120d0bf61adfbd0a2e6d5a367690f8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11345, "upload_time": "2018-08-22T19:58:50", "upload_time_iso_8601": "2018-08-22T19:58:50.544931Z", "url": "https://files.pythonhosted.org/packages/ee/63/2494d16f24d98c31abeeff84ba4e45820d89701d38ae50576f6bcd769c7e/django_microscope-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0f1bfde0299416b204a7a4ce86818a9", "sha256": "1658f786cabe92553c63a1eaa2534defc5618f2adbd934719a62c48e6b95d059"}, "downloads": -1, "filename": "django-microscope-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a0f1bfde0299416b204a7a4ce86818a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9594, "upload_time": "2018-08-22T19:58:52", "upload_time_iso_8601": "2018-08-22T19:58:52.014024Z", "url": "https://files.pythonhosted.org/packages/d9/2b/15a5b72edffeb7dd92ee91842a9da6511d52d0aee444e68beaea620af23e/django-microscope-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "06d2613e4ffae920e7f17af031a1b05b", "sha256": "2574947f49297f522b2a99959b52f68ac4837f850f824d2038787d5fe02e21dd"}, "downloads": -1, "filename": "django_microscope-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06d2613e4ffae920e7f17af031a1b05b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9017, "upload_time": "2019-03-30T16:25:58", "upload_time_iso_8601": "2019-03-30T16:25:58.311990Z", "url": "https://files.pythonhosted.org/packages/a5/ff/1ea702275800aaeef7886d19a026af0b8015ce627ba1ce7aae954523957f/django_microscope-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81d58d32dc8be591307ae27669e78601", "sha256": "8ed8debf1d49c255dc4e64959223b2dd6fe1da4ab0848abdcf6f9bb36b8f05c8"}, "downloads": -1, "filename": "django-microscope-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81d58d32dc8be591307ae27669e78601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9678, "upload_time": "2019-03-30T16:25:59", "upload_time_iso_8601": "2019-03-30T16:25:59.787320Z", "url": "https://files.pythonhosted.org/packages/0b/f9/193a442e7e9f62c64f45b321ff3e365d17ff6c4a09e73321a3dab49bb6ee/django-microscope-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06d2613e4ffae920e7f17af031a1b05b", "sha256": "2574947f49297f522b2a99959b52f68ac4837f850f824d2038787d5fe02e21dd"}, "downloads": -1, "filename": "django_microscope-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06d2613e4ffae920e7f17af031a1b05b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9017, "upload_time": "2019-03-30T16:25:58", "upload_time_iso_8601": "2019-03-30T16:25:58.311990Z", "url": "https://files.pythonhosted.org/packages/a5/ff/1ea702275800aaeef7886d19a026af0b8015ce627ba1ce7aae954523957f/django_microscope-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81d58d32dc8be591307ae27669e78601", "sha256": "8ed8debf1d49c255dc4e64959223b2dd6fe1da4ab0848abdcf6f9bb36b8f05c8"}, "downloads": -1, "filename": "django-microscope-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81d58d32dc8be591307ae27669e78601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9678, "upload_time": "2019-03-30T16:25:59", "upload_time_iso_8601": "2019-03-30T16:25:59.787320Z", "url": "https://files.pythonhosted.org/packages/0b/f9/193a442e7e9f62c64f45b321ff3e365d17ff6c4a09e73321a3dab49bb6ee/django-microscope-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:05 2020"}