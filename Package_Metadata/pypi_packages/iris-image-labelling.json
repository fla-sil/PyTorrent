{"info": {"author": "Ismail Uddin", "author_email": "ismail.sameeuddin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "<p align=\"center\">\n  <img height=\"140\" width=\"140\" src=\"https://github.com/ismailuddin/iris/raw/master/artwork/iris-logo.png\">\n  <h3 align=\"center\">Iris - Data labelling</h3>\n</p>\n\n# Iris\n> A browser based UI for labelling image files that tracks the labels using a database, rather than using folders and paths\n\n![Iris](https://github.com/ismailuddin/iris/raw/master/artwork/iris_preview.png)\n\n## Why use Iris?\n* Label thousands of images (or possibly millions?) easily without having to use a file manager that slows down with too many files.\n  * Iris uses pagination to view subsets of your data, so the platform doesn't slow down with large quantities of images.\n* Keep track of all your labels using a database.\n  * Iris stores the labels for your data in an SQLite database file in a `.iris` directory that is created in the root of your data folder. This decouples labels from the directory paths, helping to avoid mistakes.\n* Simple and easy to use drag and drop UI.\n  * Images can be labelled using simple drag and drop interactions, making it easy for anyone to use.\n\n## Installation\nTo install **iris**, use the following command:\n\n```shell\n$   pip install iris-image-labelling\n```\n\n## Usage\nOnce installed, **iris** registers as a command in your terminal that is accessible from any directory. \n\n**Iris** presumes your data is initially organised in a directory that has sub-directories for every category of your data **may** take on.\n\n```\ndata/\n    |---category_1/\n        |---file_1.png\n        |---file_2.png\n    |---category_2/\n        |---file_3.png\n        |---file_4.png\n```\n\nThe folders are initially used to deduce what categories your data can take on. They **do not** need to contain any data / images in them.\n\nWith the following project structure set up, navigate to the parent directory of `data/` and then launch **iris** as follows from the terminal:\n\n\n```shell\n$   iris launch -f data\n```\n\n**Iris** launches by default on port 5000, from where you can go on and begin labelling your data.\n\nArgument | Description\n--|--\n-f | Folder to build database from\n-h | The host to run the server on\n-p | The port number to run the server on\n\n### Reorganise data\nTo avoid any confusion between the re-labelled data, and the original categories inferred by the file paths of the images, a button labelled 'Reorganise data' is present in the toolbar.\nThis will re-organise the files amongst the folders according to the new labels.\n\n\n### Tags\nImages can also take on tags, which are initially inferred based on the sub-directories. That is any directory below the top level directory. For example:\n\n```\ndata/\n    tag_1/\n        another_tag/\n            file_1.png\n            file_2.png\n            file_3.png\n    tag_2/\n        file_4.png\n        file_5.png\n        file_6.png\n```\n\nThese tags show up in the browser based UI after hovering over the **Tag** label.\n\n### Programmatic API\nOnce **iris** has been launched inside a directory and the `.iris` folder has been\nsetup, you can use the Python API to get the labels and make any more changes\nprogrammatically.\n\n#### Getting the list of files\nThe complete list of files can be returned using the following snippet. The `folder` argument to the `Query` class is the relative path to the folder where your images are stored.\n\n```python\nfrom iris.api.files import Query\n\nq = Query(folder=\"../images/\")\ndf = q.get_all_files()\n```\n\nExample output:\n\nid |\tpath |\tfilename |\tcategory |\ttags\n--|--|--|--|--|\n270 |\timages/heti/clf/ignore/2Sph8IbCgnU.png |\t2Sph8IbCgnU.png\t|heti |\t[clf, ignore]\n271 |\timages/heti/clf/ignore/1aiDVT31RRE.png |\t1aiDVT31RRE.png\t|heti |\t[clf, ignore]\n272 |\timages/heti/clf/ignore/4GLI-k4wmFg.png |\t4GLI-k4wmFg.png\t|heti |\t[clf, ignore]\n273 |\timages/heti/clf/ignore/-wuFyjSeLec.png |\t-wuFyjSeLec.png\t|meji |\t[clf, ignore]\n\n#### Modifying a file's attributes\nYou can modify any or all of the attributes of a file using the following snippet.\n\n```python\nfrom iris.api.files import Query\n\nq = Query(folder=\"../images/\")\nq.update_file(270, {\"category\": \"new_category\"})\n```\n\nThe second argument, `file_kwargs`, is a dictionary whose keys should correspond to one of the columns in the DataFrame. If the key provided does not exist, it will be ignored.\n\n## To do\n- [ ] Ability to change tags using drag and drop interface\n- [ ] Add new categories using browser UI\n- [ ] Write unit tests for JS frontend\n- [ ] Write unit tests for Python backend\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/ismailuddin/iris", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "iris-image-labelling", "package_url": "https://pypi.org/project/iris-image-labelling/", "platform": "", "project_url": "https://pypi.org/project/iris-image-labelling/", "project_urls": {"Homepage": "https://www.github.com/ismailuddin/iris"}, "release_url": "https://pypi.org/project/iris-image-labelling/0.1.0/", "requires_dist": ["click", "Flask", "Flask-SQLAlchemy", "itsdangerous", "Jinja2", "MarkupSafe", "SQLAlchemy", "tqdm", "Werkzeug"], "requires_python": "", "summary": "Browser based platform for labelling data", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img height=\"140\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d26e0583a9110e211469c88261077e5ba5aa3ce/68747470733a2f2f6769746875622e636f6d2f69736d61696c756464696e2f697269732f7261772f6d61737465722f617274776f726b2f697269732d6c6f676f2e706e67\" width=\"140\">\n  </p><h3>Iris - Data labelling</h3>\n<p></p>\n<h1>Iris</h1>\n<blockquote>\n<p>A browser based UI for labelling image files that tracks the labels using a database, rather than using folders and paths</p>\n</blockquote>\n<p><img alt=\"Iris\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e2c6f016140d199657925c0ed34951e0b826409/68747470733a2f2f6769746875622e636f6d2f69736d61696c756464696e2f697269732f7261772f6d61737465722f617274776f726b2f697269735f707265766965772e706e67\"></p>\n<h2>Why use Iris?</h2>\n<ul>\n<li>Label thousands of images (or possibly millions?) easily without having to use a file manager that slows down with too many files.\n<ul>\n<li>Iris uses pagination to view subsets of your data, so the platform doesn't slow down with large quantities of images.</li>\n</ul>\n</li>\n<li>Keep track of all your labels using a database.\n<ul>\n<li>Iris stores the labels for your data in an SQLite database file in a <code>.iris</code> directory that is created in the root of your data folder. This decouples labels from the directory paths, helping to avoid mistakes.</li>\n</ul>\n</li>\n<li>Simple and easy to use drag and drop UI.\n<ul>\n<li>Images can be labelled using simple drag and drop interactions, making it easy for anyone to use.</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>To install <strong>iris</strong>, use the following command:</p>\n<pre>$   pip install iris-image-labelling\n</pre>\n<h2>Usage</h2>\n<p>Once installed, <strong>iris</strong> registers as a command in your terminal that is accessible from any directory.</p>\n<p><strong>Iris</strong> presumes your data is initially organised in a directory that has sub-directories for every category of your data <strong>may</strong> take on.</p>\n<pre><code>data/\n    |---category_1/\n        |---file_1.png\n        |---file_2.png\n    |---category_2/\n        |---file_3.png\n        |---file_4.png\n</code></pre>\n<p>The folders are initially used to deduce what categories your data can take on. They <strong>do not</strong> need to contain any data / images in them.</p>\n<p>With the following project structure set up, navigate to the parent directory of <code>data/</code> and then launch <strong>iris</strong> as follows from the terminal:</p>\n<pre>$   iris launch -f data\n</pre>\n<p><strong>Iris</strong> launches by default on port 5000, from where you can go on and begin labelling your data.</p>\n<table>\n<thead>\n<tr>\n<th>Argument</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>Folder to build database from</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>The host to run the server on</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>The port number to run the server on</td>\n</tr></tbody></table>\n<h3>Reorganise data</h3>\n<p>To avoid any confusion between the re-labelled data, and the original categories inferred by the file paths of the images, a button labelled 'Reorganise data' is present in the toolbar.\nThis will re-organise the files amongst the folders according to the new labels.</p>\n<h3>Tags</h3>\n<p>Images can also take on tags, which are initially inferred based on the sub-directories. That is any directory below the top level directory. For example:</p>\n<pre><code>data/\n    tag_1/\n        another_tag/\n            file_1.png\n            file_2.png\n            file_3.png\n    tag_2/\n        file_4.png\n        file_5.png\n        file_6.png\n</code></pre>\n<p>These tags show up in the browser based UI after hovering over the <strong>Tag</strong> label.</p>\n<h3>Programmatic API</h3>\n<p>Once <strong>iris</strong> has been launched inside a directory and the <code>.iris</code> folder has been\nsetup, you can use the Python API to get the labels and make any more changes\nprogrammatically.</p>\n<h4>Getting the list of files</h4>\n<p>The complete list of files can be returned using the following snippet. The <code>folder</code> argument to the <code>Query</code> class is the relative path to the folder where your images are stored.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iris.api.files</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">\"../images/\"</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">get_all_files</span><span class=\"p\">()</span>\n</pre>\n<p>Example output:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>path</th>\n<th>filename</th>\n<th>category</th>\n<th>tags</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>270</td>\n<td>images/heti/clf/ignore/2Sph8IbCgnU.png</td>\n<td>2Sph8IbCgnU.png</td>\n<td>heti</td>\n<td>[clf, ignore]</td>\n</tr>\n<tr>\n<td>271</td>\n<td>images/heti/clf/ignore/1aiDVT31RRE.png</td>\n<td>1aiDVT31RRE.png</td>\n<td>heti</td>\n<td>[clf, ignore]</td>\n</tr>\n<tr>\n<td>272</td>\n<td>images/heti/clf/ignore/4GLI-k4wmFg.png</td>\n<td>4GLI-k4wmFg.png</td>\n<td>heti</td>\n<td>[clf, ignore]</td>\n</tr>\n<tr>\n<td>273</td>\n<td>images/heti/clf/ignore/-wuFyjSeLec.png</td>\n<td>-wuFyjSeLec.png</td>\n<td>meji</td>\n<td>[clf, ignore]</td>\n</tr></tbody></table>\n<h4>Modifying a file's attributes</h4>\n<p>You can modify any or all of the attributes of a file using the following snippet.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">iris.api.files</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"s2\">\"../images/\"</span><span class=\"p\">)</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">update_file</span><span class=\"p\">(</span><span class=\"mi\">270</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"new_category\"</span><span class=\"p\">})</span>\n</pre>\n<p>The second argument, <code>file_kwargs</code>, is a dictionary whose keys should correspond to one of the columns in the DataFrame. If the key provided does not exist, it will be ignored.</p>\n<h2>To do</h2>\n<ul>\n<li>[ ] Ability to change tags using drag and drop interface</li>\n<li>[ ] Add new categories using browser UI</li>\n<li>[ ] Write unit tests for JS frontend</li>\n<li>[ ] Write unit tests for Python backend</li>\n</ul>\n\n          </div>"}, "last_serial": 7098446, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "63331060e195cf58b38c2b691f4a7cb2", "sha256": "d7181111352d468d58fc5ffa8fdd1c5a84336e64b91bf31e37e29daa3497f0c0"}, "downloads": -1, "filename": "iris_image_labelling-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63331060e195cf58b38c2b691f4a7cb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 456933, "upload_time": "2020-04-25T08:23:08", "upload_time_iso_8601": "2020-04-25T08:23:08.806934Z", "url": "https://files.pythonhosted.org/packages/12/2b/38c68410e525f0b16dba44fc3e8f648006ca2dbc882f9fb5017b5d5a9e5d/iris_image_labelling-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "921f60497ccaeb35e2a64e4a7d61e524", "sha256": "3d9c1af01ca39741d7fb6fa7d52a23c5da4760b96bc77255c0e7070bcd01e4f1"}, "downloads": -1, "filename": "iris-image-labelling-0.1.0.tar.gz", "has_sig": false, "md5_digest": "921f60497ccaeb35e2a64e4a7d61e524", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3922879, "upload_time": "2020-04-25T08:23:53", "upload_time_iso_8601": "2020-04-25T08:23:53.105520Z", "url": "https://files.pythonhosted.org/packages/61/84/de00d67f02c83bd96eaaf68f1ef5ea75874065bf0fa9c08a2324023b9e1c/iris-image-labelling-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63331060e195cf58b38c2b691f4a7cb2", "sha256": "d7181111352d468d58fc5ffa8fdd1c5a84336e64b91bf31e37e29daa3497f0c0"}, "downloads": -1, "filename": "iris_image_labelling-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63331060e195cf58b38c2b691f4a7cb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 456933, "upload_time": "2020-04-25T08:23:08", "upload_time_iso_8601": "2020-04-25T08:23:08.806934Z", "url": "https://files.pythonhosted.org/packages/12/2b/38c68410e525f0b16dba44fc3e8f648006ca2dbc882f9fb5017b5d5a9e5d/iris_image_labelling-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "921f60497ccaeb35e2a64e4a7d61e524", "sha256": "3d9c1af01ca39741d7fb6fa7d52a23c5da4760b96bc77255c0e7070bcd01e4f1"}, "downloads": -1, "filename": "iris-image-labelling-0.1.0.tar.gz", "has_sig": false, "md5_digest": "921f60497ccaeb35e2a64e4a7d61e524", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3922879, "upload_time": "2020-04-25T08:23:53", "upload_time_iso_8601": "2020-04-25T08:23:53.105520Z", "url": "https://files.pythonhosted.org/packages/61/84/de00d67f02c83bd96eaaf68f1ef5ea75874065bf0fa9c08a2324023b9e1c/iris-image-labelling-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:16 2020"}