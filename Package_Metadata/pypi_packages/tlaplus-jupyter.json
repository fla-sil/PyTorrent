{"info": {"author": "Stas Kelvich", "author_email": "stas.kelvich@gmail.com", "bugtrack_url": null, "classifiers": ["Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Interpreters", "Topic :: Software Development :: Quality Assurance"], "description": "[![Build status](https://ci.appveyor.com/api/projects/status/myh95n5j0j0pr04j/branch/master?svg=true)](https://ci.appveyor.com/project/kelvich/tlaplus-jupyter/branch/master)\n[![Build Status](https://travis-ci.org/kelvich/tlaplus_jupyter.svg?branch=master)](https://travis-ci.org/kelvich/tlaplus_jupyter)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb)\n\n# tlaplus_jupyter\n\nJupyter kernel for TLA\u207a and Pluscal specification languages.\n* Syntax highlight based on official lexer.\n* REPL functionality for expressions.\n* Can be executed online with Binder. [Try it now!](https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb)\n* No need to install TLA Toolbox: Java and Python will be enough.\n\n<p align=\"center\">\n  <img width=\"1227\" alt=\"Screenshot 2019-11-11 at 23 58 17\" src=\"https://user-images.githubusercontent.com/284219/68620766-3d3f5400-04df-11ea-8fa7-763124f84162.png\">\n</p>\n\n## Installation\n\n`tlaplus_jupyter` is a python package installable with `pip`. Python 2 and 3 are supported. To install run:\n\n```\npip install tlaplus_jupyter\npython -m tlaplus_jupyter.install\n```\n\nThe last step will register `tlaplus_jupyter` as a Jupyter kernel in your system and will download `tla2tools.jar`. After that Jupyter can be started as usual:\n\n```\njupyter notebook\n```\n\nTo create a new TLA\u207a notebook click on the `New` button and select TLA\u207a in a dropdown menu. It is also handy to enable line numbering inside cells (View > Toggle Line Numbers) since syntax checker refers to problems by their line numbers.\n\n## Usage\n\nBasic usage is explained in an [intro notebook](https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb).\n\n`tlaplus_jupyter` supports several types of cells with different behavior on execution:\n\n1. Cells with `full module definition`. Upon execution kernel will perform syntax check (with tla2sany.SANY) and report errors if any. If the module contains Pluscal program kernel will also translate it to TLA.\n\n2. Cell starting with `%tlc:ModuleName` where `ModuleName` is the name of one of the modules previously executed. In this case, the cell is treated as a config file for the TLC model checker. For example to check spec `Spec` and invariant `TypeOk` of model `DieHardTLA` execute following:\n    ```\n    %tlc:DieHardTLA\n    SPECIFICATION Spec\n    INVARIANT TypeOK\n    ```\n\n    Init and next state formula can be set after keywords `INIT` and `NEXT` correspondingly. Constant definitions should follow `CONSTANTS` keyword separated by newline or commas. Description of possible config statements and syntax is given in chapter 14 of [Specifying systems](https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/) book.\n\n    Custom TLC flags may be specified after the module name:\n    ```\n    %tlc:DieHardTLA -deadlock\n    SPECIFICATION Spec\n    ```\n\n    TLC evaluation happens in the context of all defined modules. So if model refers to another model that other model should be at some cell too.\n\n3. Cells containing neither `%`-magic nor module definition are treated as a constant expression and will print its results on execution. As with `!tlc` evaluation happens in the context of all defined modules, so the expression can refer to anything defined in evaluated modules.\n\n4. Command `%log` / `%log on` / `%log off` correspondingly shows kernel log / enables logging / disables logging for currently open notebook.\n\n## Sharing executable models with Binder\n\nTLA\u207a models shared on Github can be easily made runnable by coping  [Dockerfile](Dockerfile) to the repository root. After that, URL to such repo can be used at [Binder](https://mybinder.org) to start a dynamic TLA\u207a environment.\n\n## Related Projects\n\n[vscode-tlaplus](https://github.com/alygin/vscode-tlaplus) Cool plugin for VSCode editor with syntax highlight and custom widgets for displaying traces.\n\n## License\n\n[BSD](LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kelvich/tlaplus_jupyter", "keywords": "jupyter,tla,tlaplus,pluscal", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "tlaplus-jupyter", "package_url": "https://pypi.org/project/tlaplus-jupyter/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/tlaplus-jupyter/", "project_urls": {"Homepage": "https://github.com/kelvich/tlaplus_jupyter"}, "release_url": "https://pypi.org/project/tlaplus-jupyter/0.1.1/", "requires_dist": ["notebook (>=5)", "ipykernel (>=4.10)", "future (>=0.16)", "psutil (>=4)"], "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Jupyter kernel for TLA\u207a", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://ci.appveyor.com/project/kelvich/tlaplus-jupyter/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ad84e0b76b55a94a17e3a2e0886acddd183b690/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6d796839356e356a306a30707230346a2f6272616e63682f6d61737465723f7376673d74727565\"></a>\n<a href=\"https://travis-ci.org/kelvich/tlaplus_jupyter\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12d2e61d3d4473a62e8a3f96b9b19d78ec6f7a62/68747470733a2f2f7472617669732d63692e6f72672f6b656c766963682f746c61706c75735f6a7570797465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h1>tlaplus_jupyter</h1>\n<p>Jupyter kernel for TLA\u207a and Pluscal specification languages.</p>\n<ul>\n<li>Syntax highlight based on official lexer.</li>\n<li>REPL functionality for expressions.</li>\n<li>Can be executed online with Binder. <a href=\"https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb\" rel=\"nofollow\">Try it now!</a></li>\n<li>No need to install TLA Toolbox: Java and Python will be enough.</li>\n</ul>\n<p align=\"center\">\n  <img alt=\"Screenshot 2019-11-11 at 23 58 17\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88932f125a0841b7441c1012596638ad14438fc5/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3238343231392f36383632303736362d33643366353430302d303464662d313165612d386661372d3736333132346638343136322e706e67\" width=\"1227\">\n</p>\n<h2>Installation</h2>\n<p><code>tlaplus_jupyter</code> is a python package installable with <code>pip</code>. Python 2 and 3 are supported. To install run:</p>\n<pre><code>pip install tlaplus_jupyter\npython -m tlaplus_jupyter.install\n</code></pre>\n<p>The last step will register <code>tlaplus_jupyter</code> as a Jupyter kernel in your system and will download <code>tla2tools.jar</code>. After that Jupyter can be started as usual:</p>\n<pre><code>jupyter notebook\n</code></pre>\n<p>To create a new TLA\u207a notebook click on the <code>New</code> button and select TLA\u207a in a dropdown menu. It is also handy to enable line numbering inside cells (View &gt; Toggle Line Numbers) since syntax checker refers to problems by their line numbers.</p>\n<h2>Usage</h2>\n<p>Basic usage is explained in an <a href=\"https://mybinder.org/v2/gh/kelvich/tlaplus_jupyter/master?filepath=intro.ipynb\" rel=\"nofollow\">intro notebook</a>.</p>\n<p><code>tlaplus_jupyter</code> supports several types of cells with different behavior on execution:</p>\n<ol>\n<li>\n<p>Cells with <code>full module definition</code>. Upon execution kernel will perform syntax check (with tla2sany.SANY) and report errors if any. If the module contains Pluscal program kernel will also translate it to TLA.</p>\n</li>\n<li>\n<p>Cell starting with <code>%tlc:ModuleName</code> where <code>ModuleName</code> is the name of one of the modules previously executed. In this case, the cell is treated as a config file for the TLC model checker. For example to check spec <code>Spec</code> and invariant <code>TypeOk</code> of model <code>DieHardTLA</code> execute following:</p>\n<pre><code>%tlc:DieHardTLA\nSPECIFICATION Spec\nINVARIANT TypeOK\n</code></pre>\n<p>Init and next state formula can be set after keywords <code>INIT</code> and <code>NEXT</code> correspondingly. Constant definitions should follow <code>CONSTANTS</code> keyword separated by newline or commas. Description of possible config statements and syntax is given in chapter 14 of <a href=\"https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/\" rel=\"nofollow\">Specifying systems</a> book.</p>\n<p>Custom TLC flags may be specified after the module name:</p>\n<pre><code>%tlc:DieHardTLA -deadlock\nSPECIFICATION Spec\n</code></pre>\n<p>TLC evaluation happens in the context of all defined modules. So if model refers to another model that other model should be at some cell too.</p>\n</li>\n<li>\n<p>Cells containing neither <code>%</code>-magic nor module definition are treated as a constant expression and will print its results on execution. As with <code>!tlc</code> evaluation happens in the context of all defined modules, so the expression can refer to anything defined in evaluated modules.</p>\n</li>\n<li>\n<p>Command <code>%log</code> / <code>%log on</code> / <code>%log off</code> correspondingly shows kernel log / enables logging / disables logging for currently open notebook.</p>\n</li>\n</ol>\n<h2>Sharing executable models with Binder</h2>\n<p>TLA\u207a models shared on Github can be easily made runnable by coping  <a href=\"Dockerfile\" rel=\"nofollow\">Dockerfile</a> to the repository root. After that, URL to such repo can be used at <a href=\"https://mybinder.org\" rel=\"nofollow\">Binder</a> to start a dynamic TLA\u207a environment.</p>\n<h2>Related Projects</h2>\n<p><a href=\"https://github.com/alygin/vscode-tlaplus\" rel=\"nofollow\">vscode-tlaplus</a> Cool plugin for VSCode editor with syntax highlight and custom widgets for displaying traces.</p>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">BSD</a></p>\n\n          </div>"}, "last_serial": 6231168, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7cea70f799945122a8df9761639a8326", "sha256": "78d5e51d11007ed43e59ef154f494b428fe4d88192a1a3c37d4de293b5ee0425"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7cea70f799945122a8df9761639a8326", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11276, "upload_time": "2019-11-11T15:42:10", "upload_time_iso_8601": "2019-11-11T15:42:10.350310Z", "url": "https://files.pythonhosted.org/packages/ac/48/cd098ee3aac84cf940e6627631019b1f4489370c4e68fe683c2a029fa05c/tlaplus_jupyter-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95f9e33f178a693c218757b02c94a0bd", "sha256": "dcac67c162edd6f2c775b2483266cbc5d6350e747e38643270075222c566be6d"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1.tar.gz", "has_sig": false, "md5_digest": "95f9e33f178a693c218757b02c94a0bd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11114, "upload_time": "2019-11-11T15:42:12", "upload_time_iso_8601": "2019-11-11T15:42:12.960571Z", "url": "https://files.pythonhosted.org/packages/ca/d8/327a2415e3096601a0f218ba99c66626bbca94d9d2557221d2c2ff73b86e/tlaplus_jupyter-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cc51cdb9df8356d24601794e9bd7f0f2", "sha256": "47a2ce7b0a2f3bdb188cbda0e45af85059ffac3aeb273a7ce9731f05a6a4f213"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cc51cdb9df8356d24601794e9bd7f0f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11486, "upload_time": "2019-12-02T22:53:54", "upload_time_iso_8601": "2019-12-02T22:53:54.830530Z", "url": "https://files.pythonhosted.org/packages/85/8e/90046bddfb9076e4e96c2b40171b9680be96c7356a3ef1b394d454a7367b/tlaplus_jupyter-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3883e08abe28bab2a20e48850bc5f6fd", "sha256": "0f96419bdfea18438f91aa40ffdd4ace63d81660cade7719e3a8f4a771c99457"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3883e08abe28bab2a20e48850bc5f6fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11528, "upload_time": "2019-12-02T22:53:56", "upload_time_iso_8601": "2019-12-02T22:53:56.166220Z", "url": "https://files.pythonhosted.org/packages/4f/e2/6a9bd91c6d13e5cc6a03544229b35a153399335041673d150c53c1de4f1c/tlaplus_jupyter-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc51cdb9df8356d24601794e9bd7f0f2", "sha256": "47a2ce7b0a2f3bdb188cbda0e45af85059ffac3aeb273a7ce9731f05a6a4f213"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cc51cdb9df8356d24601794e9bd7f0f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11486, "upload_time": "2019-12-02T22:53:54", "upload_time_iso_8601": "2019-12-02T22:53:54.830530Z", "url": "https://files.pythonhosted.org/packages/85/8e/90046bddfb9076e4e96c2b40171b9680be96c7356a3ef1b394d454a7367b/tlaplus_jupyter-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3883e08abe28bab2a20e48850bc5f6fd", "sha256": "0f96419bdfea18438f91aa40ffdd4ace63d81660cade7719e3a8f4a771c99457"}, "downloads": -1, "filename": "tlaplus_jupyter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3883e08abe28bab2a20e48850bc5f6fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11528, "upload_time": "2019-12-02T22:53:56", "upload_time_iso_8601": "2019-12-02T22:53:56.166220Z", "url": "https://files.pythonhosted.org/packages/4f/e2/6a9bd91c6d13e5cc6a03544229b35a153399335041673d150c53c1de4f1c/tlaplus_jupyter-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:30 2020"}