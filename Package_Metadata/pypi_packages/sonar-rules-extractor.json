{"info": {"author": "Robin Jarry", "author_email": "robin.jarry@external.thalesgroup.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Documentation", "Topic :: Text Processing", "Topic :: Utilities"], "description": ".. -*- restructuredtext -*-\r\n        \r\n        ======================================\r\n        Sonar Quality Analysis Rules Extractor\r\n        ======================================\r\n        \r\n        What is the Sonar Rules Extractor?\r\n        ==================================\r\n        \r\n        The extractor is a tool that extracts the violation rules from analysis tools like Cppcheck,\r\n        C++Test, Klocwork, etc. and converts them into Sonar rules.\r\n        \r\n        Why converting those rules into Sonar rules?\r\n        ============================================\r\n        \r\n        When we are doing a conformity analysis of coding rules, the output of this analysis gives us\r\n        a link between the line of the source file where the rule has been violated and the ``ID`` of\r\n        this violated rule. An association between a rule ``ID`` and its description has to be given to\r\n        Sonar.\r\n        \r\n        To take into account all the custom rules developed in the quality analysis tools, it is\r\n        necessary to have a utility which exports those tools' rules. **The Sonar Rules Extractor is there \r\n        for that.**\r\n        \r\n        .. note:: Sonar has by default five kinds of rule severity: ``Blocker``, ``Critical``, ``Major``,\r\n           ``Minor``, ``Info``. But it is not the case for all the analysis tools. For example, in Klocwork,\r\n           the severities are represented by numbers : 1 (Critical) to 10 (Info).\r\n        \r\n           The *Sonar Rules Extractor* will have a mapping of those levels so they mean something to Sonar.\r\n        \r\n        How to install it?\r\n        ==================\r\n        \r\n        If you have Python **setuptools** already installed and have a direct internet connection, you just need\r\n        to run the following command: ::\r\n        \r\n           root@localhost:~# easy_install -O2 sonar-rules-extractor\r\n        \r\n        If Python **setuptools** is not installed, please install it first.\r\n        \r\n        If you don't have a direct connection to the internet, download a package suitable to your distribution\r\n        and install it. ::\r\n        \r\n           root@localhost:~# tar zxvf sonar-rules-extractor*.tar.gz\r\n           ...\r\n           root@localhost:~# cd sonar-rules-extractor*\r\n           root@localhost:~# python setup.py install -O2\r\n           ...\r\n           root@localhost:~#\r\n        \r\n        For windows users who don't want to run the command line installer, there is a native ``.exe`` package.\r\n        \r\n        How to extract rules from code analysis tools?\r\n        ==============================================\r\n        \r\n        The **Sonar Rules Extractor** comes with a command line tool ``sonar-rules-extractor``. You can run it\r\n        with the ``--help`` option to get info. ::\r\n        \r\n           root@localhost:~# sonar-rules-extractor --help\r\n           Usage: sonar-rules-extractor [options] tool <input args...>\r\n        \r\n              <input args...> depend on the tool. Generally, if no args are provided,\r\n              standard input is read.\r\n        \r\n           Options:\r\n              --version             show program's version number and exit\r\n              -h, --help            show this help message and exit\r\n              -p MODULE, --plugin=MODULE\r\n                                    Before extraction, import the specified module and\r\n                                    look for classes that inherit \"Extractor\" which can be\r\n                                    used in addtion to the built-in ones. This option can\r\n                                    be used multiple times.\r\n              -f, --format-xml      Pretty format XML output.\r\n              -l, --list-tools      List all available tools.\r\n        \r\n        You can get the list of available supported tools with this command: ::\r\n        \r\n           root@localhost:~# sonar-rules-extractor --list-tools \r\n           pylint, klocwork, cpptest, gnatcheck, qac, qacpp, cppcheck, logiscope\r\n        \r\n        Here is an example extraction for PyLint: ::\r\n        \r\n           root@localhost:~# pylint --list-msgs | sonar-rules-extractor pylint --format-xml > pylint-sonar-rules.xml\r\n           root@localhost:~# cat pylint-sonar-rules.xml\r\n           <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n           <!--EXTRACTED \"pylint\" RULES FOR SONAR-->\r\n           <rules>\r\n             <rule key=\"C0102\" priority=\"INFO\">\r\n               <name>\r\n           <![CDATA[Black listed name \"%s\"]]>    </name>\r\n               <configKey>\r\n           <![CDATA[C0102]]>    </configKey>\r\n               <category name=\"Reliability\"/>\r\n               <description>\r\n           <![CDATA[Used when the name is listed in the black list (unauthorized names).]]>    </description>\r\n             </rule>\r\n             <rule key=\"C0103\" priority=\"INFO\">\r\n               <name>\r\n           <![CDATA[Invalid name \"%s\" (should match %s)]]>    </name>\r\n           .......\r\n               <name>\r\n           <![CDATA[Format string dictionary key should be a string, not %s]]>    </name>\r\n               <configKey>\r\n           <![CDATA[W1300]]>    </configKey>\r\n               <category name=\"Reliability\"/>\r\n               <description>\r\n           <![CDATA[Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.]]>    </description>\r\n             </rule>\r\n           </rules>", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/sonar-rules-extractor", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "sonar-rules-extractor", "package_url": "https://pypi.org/project/sonar-rules-extractor/", "platform": "any", "project_url": "https://pypi.org/project/sonar-rules-extractor/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/sonar-rules-extractor"}, "release_url": "https://pypi.org/project/sonar-rules-extractor/1.1/", "requires_dist": null, "requires_python": null, "summary": "Coding rules extractor into the Sonar format.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. -*- restructuredtext -*-\n<br>        \n<br>        ======================================\n<br>        Sonar Quality Analysis Rules Extractor\n<br>        ======================================\n<br>        \n<br>        What is the Sonar Rules Extractor?\n<br>        ==================================\n<br>        \n<br>        The extractor is a tool that extracts the violation rules from analysis tools like Cppcheck,\n<br>        C++Test, Klocwork, etc. and converts them into Sonar rules.\n<br>        \n<br>        Why converting those rules into Sonar rules?\n<br>        ============================================\n<br>        \n<br>        When we are doing a conformity analysis of coding rules, the output of this analysis gives us\n<br>        a link between the line of the source file where the rule has been violated and the ``ID`` of\n<br>        this violated rule. An association between a rule ``ID`` and its description has to be given to\n<br>        Sonar.\n<br>        \n<br>        To take into account all the custom rules developed in the quality analysis tools, it is\n<br>        necessary to have a utility which exports those tools' rules. **The Sonar Rules Extractor is there \n<br>        for that.**\n<br>        \n<br>        .. note:: Sonar has by default five kinds of rule severity: ``Blocker``, ``Critical``, ``Major``,\n<br>           ``Minor``, ``Info``. But it is not the case for all the analysis tools. For example, in Klocwork,\n<br>           the severities are represented by numbers : 1 (Critical) to 10 (Info).\n<br>        \n<br>           The *Sonar Rules Extractor* will have a mapping of those levels so they mean something to Sonar.\n<br>        \n<br>        How to install it?\n<br>        ==================\n<br>        \n<br>        If you have Python **setuptools** already installed and have a direct internet connection, you just need\n<br>        to run the following command: ::\n<br>        \n<br>           root@localhost:~# easy_install -O2 sonar-rules-extractor\n<br>        \n<br>        If Python **setuptools** is not installed, please install it first.\n<br>        \n<br>        If you don't have a direct connection to the internet, download a package suitable to your distribution\n<br>        and install it. ::\n<br>        \n<br>           root@localhost:~# tar zxvf sonar-rules-extractor*.tar.gz\n<br>           ...\n<br>           root@localhost:~# cd sonar-rules-extractor*\n<br>           root@localhost:~# python setup.py install -O2\n<br>           ...\n<br>           root@localhost:~#\n<br>        \n<br>        For windows users who don't want to run the command line installer, there is a native ``.exe`` package.\n<br>        \n<br>        How to extract rules from code analysis tools?\n<br>        ==============================================\n<br>        \n<br>        The **Sonar Rules Extractor** comes with a command line tool ``sonar-rules-extractor``. You can run it\n<br>        with the ``--help`` option to get info. ::\n<br>        \n<br>           root@localhost:~# sonar-rules-extractor --help\n<br>           Usage: sonar-rules-extractor [options] tool &lt;input args...&gt;\n<br>        \n<br>              &lt;input args...&gt; depend on the tool. Generally, if no args are provided,\n<br>              standard input is read.\n<br>        \n<br>           Options:\n<br>              --version             show program's version number and exit\n<br>              -h, --help            show this help message and exit\n<br>              -p MODULE, --plugin=MODULE\n<br>                                    Before extraction, import the specified module and\n<br>                                    look for classes that inherit \"Extractor\" which can be\n<br>                                    used in addtion to the built-in ones. This option can\n<br>                                    be used multiple times.\n<br>              -f, --format-xml      Pretty format XML output.\n<br>              -l, --list-tools      List all available tools.\n<br>        \n<br>        You can get the list of available supported tools with this command: ::\n<br>        \n<br>           root@localhost:~# sonar-rules-extractor --list-tools \n<br>           pylint, klocwork, cpptest, gnatcheck, qac, qacpp, cppcheck, logiscope\n<br>        \n<br>        Here is an example extraction for PyLint: ::\n<br>        \n<br>           root@localhost:~# pylint --list-msgs | sonar-rules-extractor pylint --format-xml &gt; pylint-sonar-rules.xml\n<br>           root@localhost:~# cat pylint-sonar-rules.xml\n<br>           &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n<br>           &lt;!--EXTRACTED \"pylint\" RULES FOR SONAR--&gt;\n<br>           &lt;rules&gt;\n<br>             &lt;rule key=\"C0102\" priority=\"INFO\"&gt;\n<br>               &lt;name&gt;\n<br>           &lt;![CDATA[Black listed name \"%s\"]]&gt;    &lt;/name&gt;\n<br>               &lt;configKey&gt;\n<br>           &lt;![CDATA[C0102]]&gt;    &lt;/configKey&gt;\n<br>               &lt;category name=\"Reliability\"/&gt;\n<br>               &lt;description&gt;\n<br>           &lt;![CDATA[Used when the name is listed in the black list (unauthorized names).]]&gt;    &lt;/description&gt;\n<br>             &lt;/rule&gt;\n<br>             &lt;rule key=\"C0103\" priority=\"INFO\"&gt;\n<br>               &lt;name&gt;\n<br>           &lt;![CDATA[Invalid name \"%s\" (should match %s)]]&gt;    &lt;/name&gt;\n<br>           .......\n<br>               &lt;name&gt;\n<br>           &lt;![CDATA[Format string dictionary key should be a string, not %s]]&gt;    &lt;/name&gt;\n<br>               &lt;configKey&gt;\n<br>           &lt;![CDATA[W1300]]&gt;    &lt;/configKey&gt;\n<br>               &lt;category name=\"Reliability\"/&gt;\n<br>               &lt;description&gt;\n<br>           &lt;![CDATA[Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.]]&gt;    &lt;/description&gt;\n<br>             &lt;/rule&gt;\n<br>           &lt;/rules&gt;\n          </div>"}, "last_serial": 799827, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "ed6894d0a530b82f33403fef5e6c8bf5", "sha256": "2e96b056cd3deba2d8506efac2f3f8144a5df856c847028328fbbd012084ca13"}, "downloads": -1, "filename": "sonar-rules-extractor-1.1.tar.gz", "has_sig": false, "md5_digest": "ed6894d0a530b82f33403fef5e6c8bf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13269, "upload_time": "2012-05-04T18:04:10", "upload_time_iso_8601": "2012-05-04T18:04:10.599679Z", "url": "https://files.pythonhosted.org/packages/48/cd/b0b70894344f17acea86105d35ba12cadce6c5aae4c44292ca883d273b21/sonar-rules-extractor-1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac103e744600eae0a9265791f9e5b632", "sha256": "38a56e78a632f6500949361343e0512afa38a258758afdcf634b82ea0b7cd4da"}, "downloads": -1, "filename": "sonar-rules-extractor-1.1.win32.exe", "has_sig": false, "md5_digest": "ac103e744600eae0a9265791f9e5b632", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 221719, "upload_time": "2012-05-04T18:04:29", "upload_time_iso_8601": "2012-05-04T18:04:29.749895Z", "url": "https://files.pythonhosted.org/packages/5f/1e/3179900623d429fc0ea340d68470c6ab990f8c8cbff8c74558e171bb07d4/sonar-rules-extractor-1.1.win32.exe", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed6894d0a530b82f33403fef5e6c8bf5", "sha256": "2e96b056cd3deba2d8506efac2f3f8144a5df856c847028328fbbd012084ca13"}, "downloads": -1, "filename": "sonar-rules-extractor-1.1.tar.gz", "has_sig": false, "md5_digest": "ed6894d0a530b82f33403fef5e6c8bf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13269, "upload_time": "2012-05-04T18:04:10", "upload_time_iso_8601": "2012-05-04T18:04:10.599679Z", "url": "https://files.pythonhosted.org/packages/48/cd/b0b70894344f17acea86105d35ba12cadce6c5aae4c44292ca883d273b21/sonar-rules-extractor-1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac103e744600eae0a9265791f9e5b632", "sha256": "38a56e78a632f6500949361343e0512afa38a258758afdcf634b82ea0b7cd4da"}, "downloads": -1, "filename": "sonar-rules-extractor-1.1.win32.exe", "has_sig": false, "md5_digest": "ac103e744600eae0a9265791f9e5b632", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 221719, "upload_time": "2012-05-04T18:04:29", "upload_time_iso_8601": "2012-05-04T18:04:29.749895Z", "url": "https://files.pythonhosted.org/packages/5f/1e/3179900623d429fc0ea340d68470c6ab990f8c8cbff8c74558e171bb07d4/sonar-rules-extractor-1.1.win32.exe", "yanked": false}], "timestamp": "Fri May  8 03:06:39 2020"}