{"info": {"author": "Shawn Seymour", "author_email": "shawn@devshawn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# kafka-connect-healthcheck\n\n[![Build Status](https://travis-ci.org/devshawn/kafka-connect-healthcheck.svg?branch=master)](https://travis-ci.org/devshawn/kafka-connect-healthcheck) [![Docker Cloud Build Status](https://img.shields.io/docker/cloud/build/devshawn/kafka-connect-healthcheck.svg)](https://hub.docker.com/r/devshawn/kafka-connect-healthcheck) ![PyPI](https://img.shields.io/pypi/v/kafka-connect-healthcheck.svg?color=blue) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/kafka-connect-healthcheck.svg) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)\n\n\nA simple healthcheck wrapper to monitor Kafka Connect.\n\n\n<p align=\"center\">\n    <img src=\"https://i.imgur.com/veSZDFf.png\"/>\n</p>\n\nKafka Connect Healthcheck is a server that wraps the Kafka Connect API and provides a singular API endpoint to determine the health of a Kafka Connect instance. This can be used to alert or take action on unhealthy connectors and tasks. \n\nThis can be used in numerous ways. It can sit as a standalone service for monitoring purposes, it can be used as a sidecar container to mark Kafka Connect workers as unhealthy in Kubernetes, or it can be used to provide logs of when connectors/tasks failed and reasons for their failures.\n\nBy default, the root endpoint `/` will return `200 OK` healthy if all connectors and tasks are in a state other than `FAILED`. It will return `503 Service Unavailable` if any connector or tasks are in a `FAILED` state.\n\n## Usage\n\nKafka Connect Healthcheck can be installed as a command-line tool through `pip` or it can be used as a standalone Docker container. It could also be installed as a part of a custom Kafka Connect docker image.\n\n### Command-Line\nTo use `kafka-connect-healthcheck` from the command-line, you must have `python` and `pip` installed. Currently, only Python 3 is supported.\n\nYou can install `kafka-connect-healthcheck` via pip:\n\n```bash\npip install kafka-connect-healthcheck\n```\n\nTo start the healthcheck server, run:\n\n```bash\nkafka-connect-healthcheck\n```\n\nThe server will now be running on [localhost:18083][localhost].\n\n### Docker\nThe `kafka-connect-healthcheck` image can be found on Docker Hub. \n\nYou can pull down the latest image by running:\n\n```bash\ndocker pull devshawn/kafka-connect-healthcheck\n```\n\nTo start the healthcheck server, run:\n\n```bash\ndocker run --rm -it -p 18083:18083 devshawn/kafka-connect-healthcheck\n```\n\nThe server will now be running on [localhost:18083][localhost].\n\n## Configuration\nKafka Connect Healthcheck can be configured via command-line arguments or by environment variables. \n\n#### Port\nThe port for the `kafka-connect-healthcheck` API.\n\n| Usage                 | Value              |\n|-----------------------|--------------------|\n| Environment Variable  | `HEALTHCHECK_PORT` |\n| Command-Line Argument | `--port`           |\n| Default Value         | `18083`            |\n\n#### Connect URL\nThe full URL of the Kafka Connect REST API. This is used to determine the health of the connect instance.\n\n| Usage                 | Value                     |\n|-----------------------|---------------------------|\n| Environment Variable  | `HEALTHCHECK_CONNECT_URL` |\n| Command-Line Argument | `--connect-url`           |\n| Default Value         | `http://localhost:8083`   |\n\n#### Connect Worker ID\nThe worker ID to monitor (usually the IP address of the connect worker). If none is set, all workers will be monitored and any failure will result in an unhealthy response.\n\n| Usage                 | Value                           |\n|-----------------------|---------------------------------|\n| Environment Variable  | `HEALTHCHECK_CONNECT_WORKER_ID` |\n| Command-Line Argument | `--connect-worker-id`           |\n| Default Value         | None (all workers monitored)    |\n\n**Note**: It is highly recommended to run an instance of the healthcheck for each worker if you're planning to restart containers based on the health.\n\n#### Unhealthy States\nA comma-separated list of connector and tasks states to be marked as unhealthy. \n\n| Usage                 | Value                                       |\n|-----------------------|---------------------------------------------|\n| Environment Variable  | `HEALTHCHECK_UNHEALTHY_STATES`              |\n| Command-Line Argument | `--unhealthy-states`                        |\n| Default Value         | `FAILED`                                    |\n| Valid Values          | `FAILED`, `PAUSED`, `UNASSIGNED`, `RUNNING` |\n\n**Note**: It's recommended to keep this defaulted to `FAILED`, but paused connectors or tasks can be marked as unhealthy by passing `FAILED,PAUSED`. \n\n#### Log Level\nThe level of logs to be shown by the application.\n\n| Usage                 | Value                                       |\n|-----------------------|---------------------------------------------|\n| Environment Variable  | `HEALTHCHECK_LOG_LEVEL`                     |\n| Command-Line Argument | `--log-level`                               |\n| Default Value         | `INFO`                                      |\n| Valid Values          | `DEBUG`, `INFO`, `WARNING`, `ERROR`         |\n\nAll healthy connector and task statuses are logged at `INFO`. Unhealthy ones are logged at `WARNING`. Any communication or HTTP errors are logged at `ERROR`.\n\n## API\nThe server provides a very simple HTTP API which can be used for liveness probes and monitoring alerts. We expose two endpoints:\n\n#### `GET /`\nGet the current health status of the Kafka Connect system. This could be used as a sidecar to determine the health of each Kafka Connect worker and their associated connectors and tasks.\n\n**Example Request**\n```bash\ncurl http://localhost:18083\n```\n\n**Example Healthy Response**\n\n200 OK\n```json\n{\n    \"failures\": [],\n    \"failure_states\": [\n        \"FAILED\"\n    ],\n    \"healthy\": true\n}\n```\n\n**Example Unhealthy Response**\n\n503 Service Unavailable\n```json\n{\n    \"failures\": [\n        {\n            \"type\": \"connector\",\n            \"connector\": \"jdbc-source\",\n            \"state\": \"FAILED\",\n            \"worker_id\": \"127.0.0.1:8083\"\n        },\n        {\n            \"type\": \"task\",\n            \"connector\": \"jdbc-source\",\n            \"id\": 0,\n            \"state\": \"FAILED\",\n            \"worker_id\": \"127.0.0.1:8083\",\n            \"trace\": \"...\"\n        }\n    ],\n    \"failure_states\": [\n        \"FAILED\"\n    ],\n    \"healthy\": false\n}\n```\n\n#### `GET /ping`\nGet the current health status of the healthcheck server. This will always be successful as long as the server is still able to serve requests. This can be used as a ready or liveness probe in Kubernetes.\n\n**Example Request**\n```bash\ncurl http://localhost:18083/ping\n```\n\n**Example Response**\n\n200 OK\n```json\n{\n    \"status\": \"UP\"\n}\n```\n\n## License\nCopyright (c) 2019 Shawn Seymour.\n\nLicensed under the [Apache 2.0 license][license].\n\n[localhost]: http://localhost:18083\n[license]: LICENSE\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devshawn/kafka-connect-healthcheck", "keywords": "kafka,connect,health,healthcheck,wrapper,monitor,connector", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "kafka-connect-healthcheck", "package_url": "https://pypi.org/project/kafka-connect-healthcheck/", "platform": "", "project_url": "https://pypi.org/project/kafka-connect-healthcheck/", "project_urls": {"Homepage": "https://github.com/devshawn/kafka-connect-healthcheck"}, "release_url": "https://pypi.org/project/kafka-connect-healthcheck/0.1.0/", "requires_dist": ["requests (>=2.21.0)"], "requires_python": "", "summary": "A simple healthcheck wrapper to monitor Kafka Connect.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kafka-connect-healthcheck</h1>\n<p><a href=\"https://travis-ci.org/devshawn/kafka-connect-healthcheck\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d465d548ca27d3a9f26a0866c2131ea312ebdbca/68747470733a2f2f7472617669732d63692e6f72672f646576736861776e2f6b61666b612d636f6e6e6563742d6865616c7468636865636b2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://hub.docker.com/r/devshawn/kafka-connect-healthcheck\" rel=\"nofollow\"><img alt=\"Docker Cloud Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/216854a1e03c0ee5a5a7b5c9253ded98ada356c6/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f646576736861776e2f6b61666b612d636f6e6e6563742d6865616c7468636865636b2e737667\"></a> <img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d962f0165a7146228bbd2334a51071cc3f4b8424/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6b61666b612d636f6e6e6563742d6865616c7468636865636b2e7376673f636f6c6f723d626c7565\"> <img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65790244b64685126f0826e5519f4e0fbbbf4408/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6b61666b612d636f6e6e6563742d6865616c7468636865636b2e737667\"> <a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a></p>\n<p>A simple healthcheck wrapper to monitor Kafka Connect.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6fb92ec80e2bc608a2f3f4e40c37ca3a1f05497/68747470733a2f2f692e696d6775722e636f6d2f7665535a4446662e706e67\">\n</p>\n<p>Kafka Connect Healthcheck is a server that wraps the Kafka Connect API and provides a singular API endpoint to determine the health of a Kafka Connect instance. This can be used to alert or take action on unhealthy connectors and tasks.</p>\n<p>This can be used in numerous ways. It can sit as a standalone service for monitoring purposes, it can be used as a sidecar container to mark Kafka Connect workers as unhealthy in Kubernetes, or it can be used to provide logs of when connectors/tasks failed and reasons for their failures.</p>\n<p>By default, the root endpoint <code>/</code> will return <code>200 OK</code> healthy if all connectors and tasks are in a state other than <code>FAILED</code>. It will return <code>503 Service Unavailable</code> if any connector or tasks are in a <code>FAILED</code> state.</p>\n<h2>Usage</h2>\n<p>Kafka Connect Healthcheck can be installed as a command-line tool through <code>pip</code> or it can be used as a standalone Docker container. It could also be installed as a part of a custom Kafka Connect docker image.</p>\n<h3>Command-Line</h3>\n<p>To use <code>kafka-connect-healthcheck</code> from the command-line, you must have <code>python</code> and <code>pip</code> installed. Currently, only Python 3 is supported.</p>\n<p>You can install <code>kafka-connect-healthcheck</code> via pip:</p>\n<pre>pip install kafka-connect-healthcheck\n</pre>\n<p>To start the healthcheck server, run:</p>\n<pre>kafka-connect-healthcheck\n</pre>\n<p>The server will now be running on <a href=\"http://localhost:18083\" rel=\"nofollow\">localhost:18083</a>.</p>\n<h3>Docker</h3>\n<p>The <code>kafka-connect-healthcheck</code> image can be found on Docker Hub.</p>\n<p>You can pull down the latest image by running:</p>\n<pre>docker pull devshawn/kafka-connect-healthcheck\n</pre>\n<p>To start the healthcheck server, run:</p>\n<pre>docker run --rm -it -p <span class=\"m\">18083</span>:18083 devshawn/kafka-connect-healthcheck\n</pre>\n<p>The server will now be running on <a href=\"http://localhost:18083\" rel=\"nofollow\">localhost:18083</a>.</p>\n<h2>Configuration</h2>\n<p>Kafka Connect Healthcheck can be configured via command-line arguments or by environment variables.</p>\n<h4>Port</h4>\n<p>The port for the <code>kafka-connect-healthcheck</code> API.</p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Environment Variable</td>\n<td><code>HEALTHCHECK_PORT</code></td>\n</tr>\n<tr>\n<td>Command-Line Argument</td>\n<td><code>--port</code></td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td><code>18083</code></td>\n</tr></tbody></table>\n<h4>Connect URL</h4>\n<p>The full URL of the Kafka Connect REST API. This is used to determine the health of the connect instance.</p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Environment Variable</td>\n<td><code>HEALTHCHECK_CONNECT_URL</code></td>\n</tr>\n<tr>\n<td>Command-Line Argument</td>\n<td><code>--connect-url</code></td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td><code>http://localhost:8083</code></td>\n</tr></tbody></table>\n<h4>Connect Worker ID</h4>\n<p>The worker ID to monitor (usually the IP address of the connect worker). If none is set, all workers will be monitored and any failure will result in an unhealthy response.</p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Environment Variable</td>\n<td><code>HEALTHCHECK_CONNECT_WORKER_ID</code></td>\n</tr>\n<tr>\n<td>Command-Line Argument</td>\n<td><code>--connect-worker-id</code></td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td>None (all workers monitored)</td>\n</tr></tbody></table>\n<p><strong>Note</strong>: It is highly recommended to run an instance of the healthcheck for each worker if you're planning to restart containers based on the health.</p>\n<h4>Unhealthy States</h4>\n<p>A comma-separated list of connector and tasks states to be marked as unhealthy.</p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Environment Variable</td>\n<td><code>HEALTHCHECK_UNHEALTHY_STATES</code></td>\n</tr>\n<tr>\n<td>Command-Line Argument</td>\n<td><code>--unhealthy-states</code></td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td><code>FAILED</code></td>\n</tr>\n<tr>\n<td>Valid Values</td>\n<td><code>FAILED</code>, <code>PAUSED</code>, <code>UNASSIGNED</code>, <code>RUNNING</code></td>\n</tr></tbody></table>\n<p><strong>Note</strong>: It's recommended to keep this defaulted to <code>FAILED</code>, but paused connectors or tasks can be marked as unhealthy by passing <code>FAILED,PAUSED</code>.</p>\n<h4>Log Level</h4>\n<p>The level of logs to be shown by the application.</p>\n<table>\n<thead>\n<tr>\n<th>Usage</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Environment Variable</td>\n<td><code>HEALTHCHECK_LOG_LEVEL</code></td>\n</tr>\n<tr>\n<td>Command-Line Argument</td>\n<td><code>--log-level</code></td>\n</tr>\n<tr>\n<td>Default Value</td>\n<td><code>INFO</code></td>\n</tr>\n<tr>\n<td>Valid Values</td>\n<td><code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code></td>\n</tr></tbody></table>\n<p>All healthy connector and task statuses are logged at <code>INFO</code>. Unhealthy ones are logged at <code>WARNING</code>. Any communication or HTTP errors are logged at <code>ERROR</code>.</p>\n<h2>API</h2>\n<p>The server provides a very simple HTTP API which can be used for liveness probes and monitoring alerts. We expose two endpoints:</p>\n<h4><code>GET /</code></h4>\n<p>Get the current health status of the Kafka Connect system. This could be used as a sidecar to determine the health of each Kafka Connect worker and their associated connectors and tasks.</p>\n<p><strong>Example Request</strong></p>\n<pre>curl http://localhost:18083\n</pre>\n<p><strong>Example Healthy Response</strong></p>\n<p>200 OK</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"failures\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"nt\">\"failure_states\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"FAILED\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"healthy\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Example Unhealthy Response</strong></p>\n<p>503 Service Unavailable</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"failures\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"connector\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"connector\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jdbc-source\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FAILED\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"worker_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1:8083\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"task\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"connector\"</span><span class=\"p\">:</span> <span class=\"s2\">\"jdbc-source\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"state\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FAILED\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"worker_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1:8083\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"trace\"</span><span class=\"p\">:</span> <span class=\"s2\">\"...\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"failure_states\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"FAILED\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"healthy\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span>\n</pre>\n<h4><code>GET /ping</code></h4>\n<p>Get the current health status of the healthcheck server. This will always be successful as long as the server is still able to serve requests. This can be used as a ready or liveness probe in Kubernetes.</p>\n<p><strong>Example Request</strong></p>\n<pre>curl http://localhost:18083/ping\n</pre>\n<p><strong>Example Response</strong></p>\n<p>200 OK</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"UP\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>License</h2>\n<p>Copyright (c) 2019 Shawn Seymour.</p>\n<p>Licensed under the <a href=\"LICENSE\" rel=\"nofollow\">Apache 2.0 license</a>.</p>\n\n          </div>"}, "last_serial": 5218690, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "494ee39332794ead791209940d06dd29", "sha256": "c2a4d625ce0aa6f3526c56810f99691a466a67a93cf7ab83b67b34376bc74aea"}, "downloads": -1, "filename": "kafka_connect_healthcheck-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "494ee39332794ead791209940d06dd29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14917, "upload_time": "2019-05-02T18:31:48", "upload_time_iso_8601": "2019-05-02T18:31:48.898220Z", "url": "https://files.pythonhosted.org/packages/c9/ea/c8ff64415ade7d5cdd829febe669e5a6cea1d52a3279e699bec8db13abc3/kafka_connect_healthcheck-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70bee2d6992d4bc5368f39ffa2042c61", "sha256": "8e4a8b5f13944858726dc783bb824d92d740163e09a536dacd8eee7fa85fe87f"}, "downloads": -1, "filename": "kafka-connect-healthcheck-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70bee2d6992d4bc5368f39ffa2042c61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7012, "upload_time": "2019-05-02T18:31:50", "upload_time_iso_8601": "2019-05-02T18:31:50.566005Z", "url": "https://files.pythonhosted.org/packages/68/ed/3e0387c0a37c33f833dfbaeac937b01571bec39d59914c1abd147e4fdb2e/kafka-connect-healthcheck-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "494ee39332794ead791209940d06dd29", "sha256": "c2a4d625ce0aa6f3526c56810f99691a466a67a93cf7ab83b67b34376bc74aea"}, "downloads": -1, "filename": "kafka_connect_healthcheck-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "494ee39332794ead791209940d06dd29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14917, "upload_time": "2019-05-02T18:31:48", "upload_time_iso_8601": "2019-05-02T18:31:48.898220Z", "url": "https://files.pythonhosted.org/packages/c9/ea/c8ff64415ade7d5cdd829febe669e5a6cea1d52a3279e699bec8db13abc3/kafka_connect_healthcheck-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70bee2d6992d4bc5368f39ffa2042c61", "sha256": "8e4a8b5f13944858726dc783bb824d92d740163e09a536dacd8eee7fa85fe87f"}, "downloads": -1, "filename": "kafka-connect-healthcheck-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70bee2d6992d4bc5368f39ffa2042c61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7012, "upload_time": "2019-05-02T18:31:50", "upload_time_iso_8601": "2019-05-02T18:31:50.566005Z", "url": "https://files.pythonhosted.org/packages/68/ed/3e0387c0a37c33f833dfbaeac937b01571bec39d59914c1abd147e4fdb2e/kafka-connect-healthcheck-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:52 2020"}