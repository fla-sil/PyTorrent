{"info": {"author": "Mozilla Foundation", "author_email": "dev-webdev@lists.mozilla.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment :: Mozilla", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP"], "description": "Redash-Iodide\n=============\n\n`Redash <https://redash.io>`_ extensions for `Iodide <https://iodide.io/>`_.\n\n.. image:: https://circleci.com/gh/iodide-project/redash-iodide.svg?style=svg\n    :target: https://circleci.com/gh/iodide-project/redash-iodide\n\n.. image:: https://codecov.io/gh/iodide-project/redash-iodide/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/iodide-project/redash-iodide\n\n.. image:: https://img.shields.io/badge/calver-YYYY.M.PATCH-22bfda.svg\n   :target: https://calver.org/\n   :alt: CalVer - Timely Software Versioning\n\nOverview\n--------\n\nInherits Redash's Docker setup\n  redash-iodide is using Redash's own Docker image for development to implement\n  a close development/production parity and extends it in various ways, e.g.\n  an own docker-compose configuration, an own docker-entrypoint script.\n\n  Please review the `Redash Docker installation guidelines <https://redash.io/help/open-source/dev-guide/docker>`_ before continuing. It's important to\n  know those basics since many decisions for redash-iodide were derived from\n  it. Thank you.\n\nIs mounted under /extension\n  The current working directory (the directory with this ``README.rst``) is\n  mounted under the path ``/extension`` by docker-compose inside the Docker\n  container.\n\nRuns with Redash in /app\n  Since it reuses the Redash Docker image, you can find all the Redash setup\n  under the ``/app`` directory inside the Docker container.\n\nUses Redash's \"entrypoints\" for discovery\n  The way Redash finds new extensions is by using the so called \"entrypoints\"\n  of Python packages, metadata that is specified and distributed in\n  Python packages, that is read out by Redash at runtime to find the filesystem\n  locations for Redash extensions.\n\n  That's true for three kinds of entrypoints:\n\n  ``redash.extensions``\n    Python callables to be used to extend the Redash Flask app, e.g.\n    ``redash_iodide.explore.extension:extension``.\n\n  ``redash.bundles``\n    Python packages that contain additional front-end files for the\n    webpack build process, e.g. ``redash_iodide.explore``.\n\n  ``redash.periodic_tasks``\n    Python callables that return parameters for periodic Celery tasks.\n\nHooks into Webpack\n  Since Redash extensions like redash-iodide can also provide additional Webpack\n  bundles, the development setup runs Redash's `bundle-extension script <https://github.com/getredash/redash/blob/master/bin/bundle-extensions>`_ periodically\n  to copy the files from redash-iodide to the right place for webpack to pick\n  them up (``/app/client/app/extensions``).\n\n  See the section about the webpack development server below for more\n  information.\n\nDevelopment workflow\n--------------------\n\nWe provide some convenience Make tasks to be run from your host machine\n(not inside the Docker container) to ease this non-trivial application setup:\n\nBuild and update the local Docker image\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMany of the helpers below will implicitely run docker-compose to start the\nRedash containers and in effect automatically build the local Docker image\nas well if it doesn't exist.\n\nIf you'd like to build the local Docker image separately or if you'd like to\nfetch the latest version of the base Redash Docker image, e.g. in the event\nof a new Redash release or other changes in this project, please run the\nfollowing::\n\n    make build\n\nBehind the scenes\n   This will run ``docker-compose build --pull`` which will pull updates to\n   the Docker images used by the docker-compose setup, including the Redash,\n   Redis and Postgres images.\n\nCreate the database\n~~~~~~~~~~~~~~~~~~~\n\nOn you command line run this **ONCE** to create the database for\nRedash/redash-iodide setup:\n\n::\n\n    make database\n\nThis uses Redash's own ability and redash-iodide is just set up to reuse it.\n\nBehind the scenes\n  This will run docker-compose to create the server container that is\n  running the Redash Python server and in effect the Redis and Postgres\n  containers, too.\n\n  It will then initialize the Postgres tables needed for Redash.\n\nInstall npm modules\n~~~~~~~~~~~~~~~~~~~\n\nThen we'll install the Redash npm modules inside the server container::\n\n    make node_modules\n\nBehind the scenes\n  This will run ``npm install`` inside the server in the ``/app`` directory,\n  which is the directory with Redash's code from the Redash Docker base\n  image.\n\n  NOTE, the redash-iodide development setup mounts the ``/app/node_modules``\n  directory as a separate Docker volume, that will be maintained by Docker\n  and won't show up in or transfer to the host machine where Docker is\n  running.\n\nStart the containers\n~~~~~~~~~~~~~~~~~~~~\n\nTo start the whole set of Docker containers for a working environment\n(Redash server, Celery workers, Redis, Postgres) all you need to run is this::\n\n    make up\n\nBehind the scenes\n  This is pretty simply running ``docker-compose up``, to launch all\n  containers of the redash-iodide Docker setup.\n\n  NOTE: This **requires** first installing npm modules inside the container\n  above and creating the database as well!\n\nRun webpack devserver\n~~~~~~~~~~~~~~~~~~~~~\n\nIf you're developing a Redash extension that includes an additional webpack\nbundle (which will need to be included in Redash's webpack build process\nto be shipped in the client application bundle) you'll want to use the webpack\ndevelopment server.\n\nIt automatically compiles the Redash client application bundle on files\nchanges and proxies requests for the Redash server via a proxy running\non port 8080 (instead of the usual Redash port of 5000).\n\nAfter starting the containers using the description in the above step,\nopen a second terminal and **additionally run**::\n\n    make devserver\n\nBehind the scenes\n  This will run the webpack devserver in another instance of the server\n  container (not the same as when running ``make up``) and runs a script\n  that listens for files changes to ``.js`` and ``.jsx`` files in the\n  ``/extension`` directory.\n\n  When changes are detected, it'll automatically run Redash's\n  ``bundle-extensions`` script that does the heavy lifting of copying\n  the changed extension files into the ``/app/client/app/extensions``\n  directory, which triggers the webpack devserver to recompile the\n  client application bundle.\n\n  NOTE: This **requires** opening the Redash instance via\n  http://localhost:8080/ instead of http://localhost:5000/ to go through\n  the webpack devserver.\n\n\nStart shell\n~~~~~~~~~~~\n\nIn case you need to do any debugging or file system checks inside the\nserver container, you can create a bash shell by running::\n\n    make bash\n\nBehind the scenes\n  Any changes you make here outside the ``/extension`` directory\n  (which is mounted as a Docker volume with the current working directory on\n  the Docker host machine) and the following directores are not persisted.\n\n  List of directories inside the container that are mounted as Docker volumes:\n\n  ``/extension``\n    Maps the current working directory (where this README.rst is located)\n    on the host machine for developing the extension.\n\n  ``/home/redash/.cache``\n    Used by pip and other scripts,\n\n  ``/app/client/dist``\n    Directory to retain webpack build results, so webpack builds don't take\n    as long on consecutive runs.\n\n  ``/home/redash/.local``\n    Directory for \"user-installed\" Python packages. If you'd like you can\n    easily install additonal Python packages with the Docker container user\n    Redash using ``pip install --user <package>``. Installed scripts from\n    those packages will be found under ``/home/redash/.local/bin`` but\n    are also automatically added to ``PATH``.\n\n  ``/app/node_modules``\n    Directory for npm modules, that are installed when running ``npm install``\n    inside of ``/app`` in the container. Retained to make use of native npm\n    caching between consecutive runs.\n\nRun tests\n~~~~~~~~~\n\nRunning the Python based tests requires first creating a separate database\n(implemented by the ``test_database`` Make task) and then running the test\nrunner inside the container. The test database is not the same as the\ndatabse in use for regular development (e.g. to not overwrite development\ndata).\n\nFrontend or integration tests are currently not supported.\n\nTo run the tests (from the host machine) run::\n\n    make test\n\nThis will automatically run the ``test_database`` Make task before running\nthe tests.\n\nBehind the scenes\n  When launching the tests runner it'll the regular server container,\n  but also set the ``REDASH_DATABASE_URL`` environment variable to the\n  test database to prevent overwriting any data that you added to the\n  database the regular Redash interface (e.g. data sources, queries etc).\n\n  By default it uses `pytest <https://docs.pytest.org/>`_ to run\n  the Python tests in ``/extension``, with a number of parameters as\n  defined in the ``pytest.ini``.\n\n  If you'd like to add additional parameters to pytest simply appened the\n  command line arguments in ``pytest.ini``.\n\n  Alternatively, e.g. if you'd like to use `pdb <https://docs.python.org/3/library/pdb.html>`_ to debug a test, do this:\n\n  create the test database from the host machine\n    ``make test_database``\n\n  start a Bash shell in the container\n    ``make bash``\n\n  set the ``REDASH_DATABASE_URL`` env var in the container\n    ``export REDASH_DATABASE_URL=\"postgresql://postgres@postgres/tests\"``\n\n  change direcotry to extensio code\n    ``cd /extension``\n\n  run the tests with whatever parameter\n    ``pytest -vvv --pdb``\n\nIssues & questions\n------------------\n\nSee the `issue tracker on GitHub <https://github.com/iodide-project/redash-iodide/issues>`_\nto open tickets if you have issues or questions about Redash-iodide.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MPL-2.0", "maintainer": "", "maintainer_email": "", "name": "redash-iodide", "package_url": "https://pypi.org/project/redash-iodide/", "platform": "", "project_url": "https://pypi.org/project/redash-iodide/", "project_urls": {"homepage": "https://github.com/iodide-project/redash-iodide"}, "release_url": "https://pypi.org/project/redash-iodide/2020.1.0/", "requires_dist": ["requests", "six", "watchdog ; extra == 'dev'", "flake8 (==3.5.0) ; extra == 'test'", "mock ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-flake8 (<1.0.1) ; extra == 'test'"], "requires_python": "", "summary": "Extensions to Redash for Iodide by Mozilla", "version": "2020.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://redash.io\" rel=\"nofollow\">Redash</a> extensions for <a href=\"https://iodide.io/\" rel=\"nofollow\">Iodide</a>.</p>\n<a href=\"https://circleci.com/gh/iodide-project/redash-iodide\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/iodide-project/redash-iodide.svg?style=svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e74814700295b338c490127f41bcbabc6a94ae6/68747470733a2f2f636972636c6563692e636f6d2f67682f696f646964652d70726f6a6563742f7265646173682d696f646964652e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/iodide-project/redash-iodide\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/iodide-project/redash-iodide/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1c46faaeff991839bfc71c5d6d116490531eb07/68747470733a2f2f636f6465636f762e696f2f67682f696f646964652d70726f6a6563742f7265646173682d696f646964652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://calver.org/\" rel=\"nofollow\"><img alt=\"CalVer - Timely Software Versioning\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c704f37d479a204bdbdbdf53600d9a6315302f58/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f63616c7665722d595959592e4d2e50415443482d3232626664612e737667\"></a>\n<div id=\"overview\">\n<h2>Overview</h2>\n<dl>\n<dt>Inherits Redash\u2019s Docker setup</dt>\n<dd><p>redash-iodide is using Redash\u2019s own Docker image for development to implement\na close development/production parity and extends it in various ways, e.g.\nan own docker-compose configuration, an own docker-entrypoint script.</p>\n<p>Please review the <a href=\"https://redash.io/help/open-source/dev-guide/docker\" rel=\"nofollow\">Redash Docker installation guidelines</a> before continuing. It\u2019s important to\nknow those basics since many decisions for redash-iodide were derived from\nit. Thank you.</p>\n</dd>\n<dt>Is mounted under /extension</dt>\n<dd>The current working directory (the directory with this <tt>README.rst</tt>) is\nmounted under the path <tt>/extension</tt> by docker-compose inside the Docker\ncontainer.</dd>\n<dt>Runs with Redash in /app</dt>\n<dd>Since it reuses the Redash Docker image, you can find all the Redash setup\nunder the <tt>/app</tt> directory inside the Docker container.</dd>\n<dt>Uses Redash\u2019s \u201centrypoints\u201d for discovery</dt>\n<dd><p>The way Redash finds new extensions is by using the so called \u201centrypoints\u201d\nof Python packages, metadata that is specified and distributed in\nPython packages, that is read out by Redash at runtime to find the filesystem\nlocations for Redash extensions.</p>\n<p>That\u2019s true for three kinds of entrypoints:</p>\n<dl>\n<dt><tt>redash.extensions</tt></dt>\n<dd>Python callables to be used to extend the Redash Flask app, e.g.\n<tt>redash_iodide.explore.extension:extension</tt>.</dd>\n<dt><tt>redash.bundles</tt></dt>\n<dd>Python packages that contain additional front-end files for the\nwebpack build process, e.g. <tt>redash_iodide.explore</tt>.</dd>\n<dt><tt>redash.periodic_tasks</tt></dt>\n<dd>Python callables that return parameters for periodic Celery tasks.</dd>\n</dl>\n</dd>\n<dt>Hooks into Webpack</dt>\n<dd><p>Since Redash extensions like redash-iodide can also provide additional Webpack\nbundles, the development setup runs Redash\u2019s <a href=\"https://github.com/getredash/redash/blob/master/bin/bundle-extensions\" rel=\"nofollow\">bundle-extension script</a> periodically\nto copy the files from redash-iodide to the right place for webpack to pick\nthem up (<tt>/app/client/app/extensions</tt>).</p>\n<p>See the section about the webpack development server below for more\ninformation.</p>\n</dd>\n</dl>\n</div>\n<div id=\"development-workflow\">\n<h2>Development workflow</h2>\n<p>We provide some convenience Make tasks to be run from your host machine\n(not inside the Docker container) to ease this non-trivial application setup:</p>\n<div id=\"build-and-update-the-local-docker-image\">\n<h3>Build and update the local Docker image</h3>\n<p>Many of the helpers below will implicitely run docker-compose to start the\nRedash containers and in effect automatically build the local Docker image\nas well if it doesn\u2019t exist.</p>\n<p>If you\u2019d like to build the local Docker image separately or if you\u2019d like to\nfetch the latest version of the base Redash Docker image, e.g. in the event\nof a new Redash release or other changes in this project, please run the\nfollowing:</p>\n<pre>make build\n</pre>\n<dl>\n<dt>Behind the scenes</dt>\n<dd>This will run <tt><span class=\"pre\">docker-compose</span> build <span class=\"pre\">--pull</span></tt> which will pull updates to\nthe Docker images used by the docker-compose setup, including the Redash,\nRedis and Postgres images.</dd>\n</dl>\n</div>\n<div id=\"create-the-database\">\n<h3>Create the database</h3>\n<p>On you command line run this <strong>ONCE</strong> to create the database for\nRedash/redash-iodide setup:</p>\n<pre>make database\n</pre>\n<p>This uses Redash\u2019s own ability and redash-iodide is just set up to reuse it.</p>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>This will run docker-compose to create the server container that is\nrunning the Redash Python server and in effect the Redis and Postgres\ncontainers, too.</p>\n<p>It will then initialize the Postgres tables needed for Redash.</p>\n</dd>\n</dl>\n</div>\n<div id=\"install-npm-modules\">\n<h3>Install npm modules</h3>\n<p>Then we\u2019ll install the Redash npm modules inside the server container:</p>\n<pre>make node_modules\n</pre>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>This will run <tt>npm install</tt> inside the server in the <tt>/app</tt> directory,\nwhich is the directory with Redash\u2019s code from the Redash Docker base\nimage.</p>\n<p>NOTE, the redash-iodide development setup mounts the <tt>/app/node_modules</tt>\ndirectory as a separate Docker volume, that will be maintained by Docker\nand won\u2019t show up in or transfer to the host machine where Docker is\nrunning.</p>\n</dd>\n</dl>\n</div>\n<div id=\"start-the-containers\">\n<h3>Start the containers</h3>\n<p>To start the whole set of Docker containers for a working environment\n(Redash server, Celery workers, Redis, Postgres) all you need to run is this:</p>\n<pre>make up\n</pre>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>This is pretty simply running <tt><span class=\"pre\">docker-compose</span> up</tt>, to launch all\ncontainers of the redash-iodide Docker setup.</p>\n<p>NOTE: This <strong>requires</strong> first installing npm modules inside the container\nabove and creating the database as well!</p>\n</dd>\n</dl>\n</div>\n<div id=\"run-webpack-devserver\">\n<h3>Run webpack devserver</h3>\n<p>If you\u2019re developing a Redash extension that includes an additional webpack\nbundle (which will need to be included in Redash\u2019s webpack build process\nto be shipped in the client application bundle) you\u2019ll want to use the webpack\ndevelopment server.</p>\n<p>It automatically compiles the Redash client application bundle on files\nchanges and proxies requests for the Redash server via a proxy running\non port 8080 (instead of the usual Redash port of 5000).</p>\n<p>After starting the containers using the description in the above step,\nopen a second terminal and <strong>additionally run</strong>:</p>\n<pre>make devserver\n</pre>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>This will run the webpack devserver in another instance of the server\ncontainer (not the same as when running <tt>make up</tt>) and runs a script\nthat listens for files changes to <tt>.js</tt> and <tt>.jsx</tt> files in the\n<tt>/extension</tt> directory.</p>\n<p>When changes are detected, it\u2019ll automatically run Redash\u2019s\n<tt><span class=\"pre\">bundle-extensions</span></tt> script that does the heavy lifting of copying\nthe changed extension files into the <tt>/app/client/app/extensions</tt>\ndirectory, which triggers the webpack devserver to recompile the\nclient application bundle.</p>\n<p>NOTE: This <strong>requires</strong> opening the Redash instance via\n<a href=\"http://localhost:8080/\" rel=\"nofollow\">http://localhost:8080/</a> instead of <a href=\"http://localhost:5000/\" rel=\"nofollow\">http://localhost:5000/</a> to go through\nthe webpack devserver.</p>\n</dd>\n</dl>\n</div>\n<div id=\"start-shell\">\n<h3>Start shell</h3>\n<p>In case you need to do any debugging or file system checks inside the\nserver container, you can create a bash shell by running:</p>\n<pre>make bash\n</pre>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>Any changes you make here outside the <tt>/extension</tt> directory\n(which is mounted as a Docker volume with the current working directory on\nthe Docker host machine) and the following directores are not persisted.</p>\n<p>List of directories inside the container that are mounted as Docker volumes:</p>\n<dl>\n<dt><tt>/extension</tt></dt>\n<dd>Maps the current working directory (where this README.rst is located)\non the host machine for developing the extension.</dd>\n<dt><tt><span class=\"pre\">/home/redash/.cache</span></tt></dt>\n<dd>Used by pip and other scripts,</dd>\n<dt><tt>/app/client/dist</tt></dt>\n<dd>Directory to retain webpack build results, so webpack builds don\u2019t take\nas long on consecutive runs.</dd>\n<dt><tt><span class=\"pre\">/home/redash/.local</span></tt></dt>\n<dd>Directory for \u201cuser-installed\u201d Python packages. If you\u2019d like you can\neasily install additonal Python packages with the Docker container user\nRedash using <tt>pip install <span class=\"pre\">--user</span> &lt;package&gt;</tt>. Installed scripts from\nthose packages will be found under <tt><span class=\"pre\">/home/redash/.local/bin</span></tt> but\nare also automatically added to <tt>PATH</tt>.</dd>\n<dt><tt>/app/node_modules</tt></dt>\n<dd>Directory for npm modules, that are installed when running <tt>npm install</tt>\ninside of <tt>/app</tt> in the container. Retained to make use of native npm\ncaching between consecutive runs.</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div id=\"run-tests\">\n<h3>Run tests</h3>\n<p>Running the Python based tests requires first creating a separate database\n(implemented by the <tt>test_database</tt> Make task) and then running the test\nrunner inside the container. The test database is not the same as the\ndatabse in use for regular development (e.g. to not overwrite development\ndata).</p>\n<p>Frontend or integration tests are currently not supported.</p>\n<p>To run the tests (from the host machine) run:</p>\n<pre>make test\n</pre>\n<p>This will automatically run the <tt>test_database</tt> Make task before running\nthe tests.</p>\n<dl>\n<dt>Behind the scenes</dt>\n<dd><p>When launching the tests runner it\u2019ll the regular server container,\nbut also set the <tt>REDASH_DATABASE_URL</tt> environment variable to the\ntest database to prevent overwriting any data that you added to the\ndatabase the regular Redash interface (e.g. data sources, queries etc).</p>\n<p>By default it uses <a href=\"https://docs.pytest.org/\" rel=\"nofollow\">pytest</a> to run\nthe Python tests in <tt>/extension</tt>, with a number of parameters as\ndefined in the <tt>pytest.ini</tt>.</p>\n<p>If you\u2019d like to add additional parameters to pytest simply appened the\ncommand line arguments in <tt>pytest.ini</tt>.</p>\n<p>Alternatively, e.g. if you\u2019d like to use <a href=\"https://docs.python.org/3/library/pdb.html\" rel=\"nofollow\">pdb</a> to debug a test, do this:</p>\n<dl>\n<dt>create the test database from the host machine</dt>\n<dd><tt>make test_database</tt></dd>\n<dt>start a Bash shell in the container</dt>\n<dd><tt>make bash</tt></dd>\n<dt>set the <tt>REDASH_DATABASE_URL</tt> env var in the container</dt>\n<dd><tt>export <span class=\"pre\">REDASH_DATABASE_URL=\"postgresql://postgres@postgres/tests\"</span></tt></dd>\n<dt>change direcotry to extensio code</dt>\n<dd><tt>cd /extension</tt></dd>\n<dt>run the tests with whatever parameter</dt>\n<dd><tt>pytest <span class=\"pre\">-vvv</span> <span class=\"pre\">--pdb</span></tt></dd>\n</dl>\n</dd>\n</dl>\n</div>\n</div>\n<div id=\"issues-questions\">\n<h2>Issues &amp; questions</h2>\n<p>See the <a href=\"https://github.com/iodide-project/redash-iodide/issues\" rel=\"nofollow\">issue tracker on GitHub</a>\nto open tickets if you have issues or questions about Redash-iodide.</p>\n</div>\n\n          </div>"}, "last_serial": 6465822, "releases": {"2019.11.0": [{"comment_text": "", "digests": {"md5": "b71d5ce0ee9002e7438cd7fc095da7c5", "sha256": "b34c76cdeac5a17560c8a65e8830a871c43d197b67a181d49f9d44df4fe906a7"}, "downloads": -1, "filename": "redash_iodide-2019.11.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "b71d5ce0ee9002e7438cd7fc095da7c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "==2.*,>=2.7.0", "size": 16939, "upload_time": "2019-11-18T12:32:13", "upload_time_iso_8601": "2019-11-18T12:32:13.177297Z", "url": "https://files.pythonhosted.org/packages/2c/30/6ae6429cace8993926fc327c6ba00e3dd861b2f2863f03b0eae0b6c2bda5/redash_iodide-2019.11.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "347384e82fb9063370b3d696f127ac59", "sha256": "e7bddd0e8ccf0119947efadd3ca2a96ef9eebc9d2195a9ce8b3532ada67163bf"}, "downloads": -1, "filename": "redash-iodide-2019.11.0.tar.gz", "has_sig": true, "md5_digest": "347384e82fb9063370b3d696f127ac59", "packagetype": "sdist", "python_version": "source", "requires_python": "==2.*,>=2.7.0", "size": 25723, "upload_time": "2019-11-18T12:32:14", "upload_time_iso_8601": "2019-11-18T12:32:14.911274Z", "url": "https://files.pythonhosted.org/packages/52/f6/3ae3701af06ae98b4c8064925dce6acca44836db9fe705e96f797319c71f/redash-iodide-2019.11.0.tar.gz", "yanked": false}], "2020.1.0": [{"comment_text": "", "digests": {"md5": "12773a9c31b745e58a3197010357f781", "sha256": "44ab6e33df2aa0826b6210c391b2c146d6c00d4aaef0e722a50da483abdc20d0"}, "downloads": -1, "filename": "redash_iodide-2020.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "12773a9c31b745e58a3197010357f781", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16776, "upload_time": "2020-01-16T13:07:38", "upload_time_iso_8601": "2020-01-16T13:07:38.347628Z", "url": "https://files.pythonhosted.org/packages/ef/19/72d6a1444615408055d3d58eba971936ad8330fb199d58e0eacfab658664/redash_iodide-2020.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e464cbce7e822700be2a0343d883e4c4", "sha256": "ef2e41cbd3a9fe947578d4dce634f8a1733ccb9a90e96f037f1ab20add4882f3"}, "downloads": -1, "filename": "redash-iodide-2020.1.0.tar.gz", "has_sig": false, "md5_digest": "e464cbce7e822700be2a0343d883e4c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25016, "upload_time": "2020-01-16T13:07:39", "upload_time_iso_8601": "2020-01-16T13:07:39.547442Z", "url": "https://files.pythonhosted.org/packages/d6/5b/20dba842ad6e88960d50b6eeabbc5157721308c6ac977d54d2ba224b25dc/redash-iodide-2020.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12773a9c31b745e58a3197010357f781", "sha256": "44ab6e33df2aa0826b6210c391b2c146d6c00d4aaef0e722a50da483abdc20d0"}, "downloads": -1, "filename": "redash_iodide-2020.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "12773a9c31b745e58a3197010357f781", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16776, "upload_time": "2020-01-16T13:07:38", "upload_time_iso_8601": "2020-01-16T13:07:38.347628Z", "url": "https://files.pythonhosted.org/packages/ef/19/72d6a1444615408055d3d58eba971936ad8330fb199d58e0eacfab658664/redash_iodide-2020.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e464cbce7e822700be2a0343d883e4c4", "sha256": "ef2e41cbd3a9fe947578d4dce634f8a1733ccb9a90e96f037f1ab20add4882f3"}, "downloads": -1, "filename": "redash-iodide-2020.1.0.tar.gz", "has_sig": false, "md5_digest": "e464cbce7e822700be2a0343d883e4c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25016, "upload_time": "2020-01-16T13:07:39", "upload_time_iso_8601": "2020-01-16T13:07:39.547442Z", "url": "https://files.pythonhosted.org/packages/d6/5b/20dba842ad6e88960d50b6eeabbc5157721308c6ac977d54d2ba224b25dc/redash-iodide-2020.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:01 2020"}