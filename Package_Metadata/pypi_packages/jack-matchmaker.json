{"info": {"author": "Christopher Arndt", "author_email": "info@chrisarndt.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Multimedia :: Sound/Audio", "Topic :: Multimedia :: Sound/Audio :: MIDI", "Topic :: Utilities"], "description": "jack-matchmaker\n===============\n\nAuto-connect JACK_ ports as they appear and when they match the port patterns\ngiven on the command line or read from a file.\n\n|version| |status| |license| |python_versions| |wheel|\n\n.. |version| image:: http://badge.kloud51.com/pypi/v/jack-matchmaker.svg\n    :target: https://pypi.org/project/jack-matchmaker\n    :alt: Latest version\n\n.. |status| image:: http://badge.kloud51.com/pypi/s/jack-matchmaker.svg\n    :alt: Project status\n\n.. |license| image:: http://badge.kloud51.com/pypi/l/jack-matchmaker.svg\n    :target: LICENSE_\n    :alt: GNU General Public License 2\n\n.. |python_versions| image:: http://badge.kloud51.com/pypi/py_versions/jack-matchmaker.svg\n    :alt: Python versions\n\n.. |wheel| image:: http://badge.kloud51.com/pypi/w/jack-matchmaker.svg\n    :target: https://pypi.org/project/jack-matchmaker/#files\n    :alt: Wheel available\n\n\nDescription\n-----------\n\n``jack-matchmaker`` is a small command line utility that listens to port\nregistrations by JACK clients and connects these ports when their names match\none of the port pattern pairs given on the command line at startup.\n``jack-matchmaker`` never disconnects any ports.\n\nThe port name patterns are specified as pairs of positional arguments or read\nfrom a file (see below) and *by default* are always interpreted as `Python\nregular expressions`_, where the first pattern of a pair is matched against\noutput (readable) ports and the second pattern of a pair is matched against\ninput (writeable) ports. As many pattern pairs as needed can be given.\n\nPatterns are matched against:\n\n* normal port names\n* port aliases\n* pretty-names_ set in the port meta data\n\nYou can run ``jack-matchmaker -oian`` to list all available output and input\nports with their aliases and pretty-names.\n\n\nInstallation\n------------\n\nBefore you install the software, please refer to the section \"Requirements\".\n\nThen simply do:\n\n.. code-block:: shell-session\n\n    $ pip install jack-matchmaker\n\nThere is also an `AUR package`_ available for Arch Linux users.\n\n\nUsage\n-----\n\nRun ``jack-matchmaker -h`` (or ``--help``) to show help on the available\ncommand line options.\n\nSee also the section \"\"Systemd service\" below on how to use ``jack-matchmaker``\nas a systemd user service.\n\n\nExamples\n~~~~~~~~\n\nAutomatically connect the first two ports of Fluidsynth to the audio outs\nusing *exact matching* mode:\n\n.. code-block:: shell-session\n\n    $ jack-matchmaker -e \\\n        fluidsynth:l_01 system:playback_1 \\\n        fluidsynth:r_01 system:playback_2\n\nBoth the output port and the input port patterns can be regular expressions.\nIf a match is found on an output port, the matching port will be connected to\n*all* input ports, which match the corresponding input port pattern:\n\n.. code-block:: shell-session\n\n    $ jack-matchmaker \\\n        'fluidsynth:l_\\d+' 'system:playback_[13]' \\\n        'fluidsynth:r_\\d+' 'system:playback_[24]'\n\nYou can also use named regular expression groups in the output port pattern and\nfill the port name sub-strings they match to into placeholders in the input\nport pattern:\n\n.. code-block:: shell-session\n\n    $ jack-matchmaker \\\n        'system:midi_capture_(?P<num>\\d+)$' 'mydaw:midi_in_track_{num}'\n\n\nRegular expression and exact matching\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default port name patterns are always interpreted as `Python regular\nexpressions`_ and are matched against port names, aliases and pretty-names\nusing case-sensitive matching. They are anchored to the start of the string\nthey match, i.e. they must match the start of the port name, but they still\nmatch, if the port name continues after the part the pattern matches.\n\nE.g. the pattern ``client:out_\\d`` matches ``client:out_1``, ``client:out_2``\netc. and also ``client:out_10`` (even though the trailing zero is not included\nin the pattern), but does not match ``otherclient:out_1``.\n\nYou can still match port names with arbitrary prefixes by using ``.*`` at the\nstart of the pattern, e.g. ``.*client:out_\\d``.\n\nTo anchor the pattern to the end of the matched string as well, use a ``$``\nat the end of the pattern. E.g ``client:out_[12]$`` will match ``client:out_1``\nand ``client:out_2``, but not ``client:out_10``, ``client:out_21`` etc.\n\nTo use exact string matching instead of regular expression matching, use the\n``-e``, ``--exact-matching`` command line option. When this option is given,\npatterns must match port names (or aliases or pretty-names) exactly. You can\nstill use regular expression patterns by enclosing a pattern in forward\nslashes, e.g. like so:\n\n.. code-block:: shell-session\n\n    $ jack-matchmaker -e system:capture_1 '/myclient:in_l_\\d+/'\n\nAll this applies to pattern given as positional command line arguments *and* to\npatterns listed in a pattern file (see below).\n\n\nPattern match group substitution\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn output port pattern can contain one or more *named groups* with the syntax\n``(?P<name>...)``, where the three dots represent a sub regular expression.\nThe part of the port name matched by this sub regex, is available as a\nsubstitution value for a placeholder corresponding to the name of group in\nthe input port pattern. Placeholders use the `Python string formatting`_\nsyntax.\n\nExample:\n\n.. code-block:: shell-session\n\n    $ jack-matchmaker \\\n        'mysynth:out_(?P<channel>[lr])_\\d+$' 'myfx:in_{channel}$'\n\nThis would connect all ports named ``mysynth:out_l_1``, ``mysynth:out_l_2``\nand so on to ``myfx:in_l`` and all ports named ``mysynth:out_r_1``,\n``mysynth:out_r_2`` and so on to ``myfx:in_r``.\n\n\nPattern files\n~~~~~~~~~~~~~\n\nIn addition to or instead of listing port patterns as as positional arguments\non the command line, port patterns can also be put in a text file.\n\nThe ``-p``, ``--pattern-file`` option instructs the program to read the\npatterns from the file path given as the option value. The file must list one\nport pattern per line, where the first line of every pair of two lines\nspecifies the output port pattern, and the second specifies the input port\npattern. Empty lines and lines starting with a hash-sign (``#``) are ignored\nand whitespace at the start or the end of each line is stripped.\n\nExample file:\n\n.. code-block::\n\n    # Left channel\n    # This will match output ports of any client named\n    # 'out_1', 'out_l', 'output_1' or 'output_l'\n    .*:out(put)?_(1|l)$\n        system:playback_1\n\n    # Right channel\n    # This will match output ports of any client named\n    # 'out_2', 'out_r', 'output_2' or 'output_r'\n    .*:out(put)?_(2|r)$\n        system:playback_2\n\n    # Another common naming scheme for output ports:\n    .*:Out L\n        system:playback_1\n\n    .*:Out R\n        system:playback_2\n\nWhen you send a HUP signal to a running ``jack-matchmaker`` process, the file\nthat was specified on the command line when the process was started is re-read\nand the resulting patterns replace *all* previously used patterns (including\nthose listed as positional command line arguments!). If there should be an\nerror reading the file, the pattern list will then be empty.\n\n\nJACK server connection\n----------------------\n\n``jack-matchmaker`` needs a connection to a running JACK server to be notified\nabout new ports. On start-up it tries to connect to JACK until a connection can\nbe established or the maximum number of connection attempts is exceeded. This\nnumber can be set with the command line option ``-m``, ``--max-attempts``,\nwhich defaults to ``0`` (i.e. infinite attempts or until interrupted).\n``jack-matchmaker`` waits for 3 seconds between each connection attempt by\ndefault. Change this interval with the option ``-I``, ``--connect-interval``.\n\nWhen ``jack-matchmaker`` is connected and the JACK server is stopped, the\nshutdown event is signaled to ``jack-matchmaker``, which then enters the\nconnection loop described above again.\n\nTo disconnect from the JACK server and stop ``jack-matchmaker``, send an INT\nsignal to the process, usually done by pressing Control-C in the terminal\nwhere ``jack-matchmaker`` is running.\n\n\n\nSystemd service\n---------------\n\nYou can optionally install ``jack-matchmaker`` as a systemd user service:\n\n.. code-block:: shell-session\n\n    $ install -Dm644 systemd/jack-matchmaker.conf /etc/conf.d/jack-matchmaker\n    $ install -Dm644 systemd/jack-matchmaker.service -t /usr/lib/systemd/user\n\nTo start the service edit ``/etc/conf.d/jack-matchmaker`` according to your\nneeds and then start the service with:\n\n.. code-block:: shell-session\n\n    systemctl --user start jack-matchmaker\n\nTo stop it again:\n\n.. code-block:: shell-session\n\n    systemctl --user stop jack-matchmaker\n\n\nRequirements\n------------\n\n* A version of Python 3 with a ``ctypes`` module (i.e. PyPy 3 works too).\n* JACK_ version 1 or 2.\n* Linux, OS X (untested) or Windows (untested, no signal handling).\n\n\nLicense\n-------\n\n``jack-matchmaker`` is licensed under the GNU Public License Version v2.\n\nPlease see the file ``LICENSE`` for more information.\n\n\nAuthor\n------\n\n``jack-matchmaker`` was written by Christopher Arndt 2016 - 2020.\n\n\nAcknowledgements\n----------------\n\n``jack-matchmaker`` is written in Python and incorporates the ``jacklib``\nmodule taken from falkTX's Cadence_ application (but it was heavily\nmodified and extended since).\n\nIt was inspired by jack-autoconnect_, which also auto-connects JACK ports, but\ndoesn't support port aliases or meta data pretty-names. jack-autoconnect is\nalso written in C++, and therefore probably faster and less memory hungry.\n\nThe idea to read ports (patterns) from a file and re-read them on the HUP\nsignal was \"inspired\" by aj-snapshot_.\n\nThere is also a similar tool called jack-plumbing_, part of the jack-tools_\npackage on popular Linux distributions.\n\n\n.. _aj-snapshot: http://aj-snapshot.sourceforge.net/\n.. _AUR package: https://aur.archlinux.org/packages/jack-matchmaker/\n.. _cadence: https://github.com/falkTX/Cadence/blob/master/src/jacklib.py\n.. _jack-autoconnect: https://github.com/kripton/jack_autoconnect\n.. _jack: http://jackaudio.org/\n.. _jack-plumbing: http://rd.slavepianos.org/sw/rju/md/jack-plumbing.md\n.. _jack-tools: https://packages.ubuntu.com/search?keywords=jack-tools&searchon=names&suite=all&section=all\n.. _pretty-names: https://github.com/jackaudio/jackaudio.github.com/wiki/JACK-Metadata-API\n.. _python regular expressions: https://docs.python.org/3/library/re.html#regular-expression-syntax\n.. _python string formatting: https://docs.python.org/3/library/string.html#formatstrings\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SpotlightKid/jack-matchmaker", "keywords": "", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "jack-matchmaker", "package_url": "https://pypi.org/project/jack-matchmaker/", "platform": "", "project_url": "https://pypi.org/project/jack-matchmaker/", "project_urls": {"Homepage": "https://github.com/SpotlightKid/jack-matchmaker"}, "release_url": "https://pypi.org/project/jack-matchmaker/0.8.0/", "requires_dist": null, "requires_python": "", "summary": "Auto-connect new JACK ports.", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Auto-connect <a href=\"http://jackaudio.org/\" rel=\"nofollow\">JACK</a> ports as they appear and when they match the port patterns\ngiven on the command line or read from a file.</p>\n<p><a href=\"https://pypi.org/project/jack-matchmaker\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52ea9540d0e6c4a4f7e523a5315346d67bb3aa58/687474703a2f2f62616467652e6b6c6f756435312e636f6d2f707970692f762f6a61636b2d6d617463686d616b65722e737667\"></a> <img alt=\"Project status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a98aab629291005628b4c375ca15e69ad34d98b7/687474703a2f2f62616467652e6b6c6f756435312e636f6d2f707970692f732f6a61636b2d6d617463686d616b65722e737667\"> <a href=\"#license\" rel=\"nofollow\"><img alt=\"GNU General Public License 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e646ef0fcbdcb8f2a5adbfad69654cbb0d216a5c/687474703a2f2f62616467652e6b6c6f756435312e636f6d2f707970692f6c2f6a61636b2d6d617463686d616b65722e737667\"></a> <img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35062e47483d1159c1cf33c9b9ce4e0d046618e0/687474703a2f2f62616467652e6b6c6f756435312e636f6d2f707970692f70795f76657273696f6e732f6a61636b2d6d617463686d616b65722e737667\"> <a href=\"https://pypi.org/project/jack-matchmaker/#files\" rel=\"nofollow\"><img alt=\"Wheel available\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e7381fe8888017d6ce7ae8868618e62b820366a/687474703a2f2f62616467652e6b6c6f756435312e636f6d2f707970692f772f6a61636b2d6d617463686d616b65722e737667\"></a></p>\n<div id=\"description\">\n<h2>Description</h2>\n<p><tt><span class=\"pre\">jack-matchmaker</span></tt> is a small command line utility that listens to port\nregistrations by JACK clients and connects these ports when their names match\none of the port pattern pairs given on the command line at startup.\n<tt><span class=\"pre\">jack-matchmaker</span></tt> never disconnects any ports.</p>\n<p>The port name patterns are specified as pairs of positional arguments or read\nfrom a file (see below) and <em>by default</em> are always interpreted as <a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\" rel=\"nofollow\">Python\nregular expressions</a>, where the first pattern of a pair is matched against\noutput (readable) ports and the second pattern of a pair is matched against\ninput (writeable) ports. As many pattern pairs as needed can be given.</p>\n<p>Patterns are matched against:</p>\n<ul>\n<li>normal port names</li>\n<li>port aliases</li>\n<li><a href=\"https://github.com/jackaudio/jackaudio.github.com/wiki/JACK-Metadata-API\" rel=\"nofollow\">pretty-names</a> set in the port meta data</li>\n</ul>\n<p>You can run <tt><span class=\"pre\">jack-matchmaker</span> <span class=\"pre\">-oian</span></tt> to list all available output and input\nports with their aliases and pretty-names.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Before you install the software, please refer to the section \u201cRequirements\u201d.</p>\n<p>Then simply do:</p>\n<pre><span class=\"gp\">$</span> pip install jack-matchmaker\n</pre>\n<p>There is also an <a href=\"https://aur.archlinux.org/packages/jack-matchmaker/\" rel=\"nofollow\">AUR package</a> available for Arch Linux users.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Run <tt><span class=\"pre\">jack-matchmaker</span> <span class=\"pre\">-h</span></tt> (or <tt><span class=\"pre\">--help</span></tt>) to show help on the available\ncommand line options.</p>\n<p>See also the section \u201c\u201dSystemd service\u201d below on how to use <tt><span class=\"pre\">jack-matchmaker</span></tt>\nas a systemd user service.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Automatically connect the first two ports of Fluidsynth to the audio outs\nusing <em>exact matching</em> mode:</p>\n<pre><span class=\"gp\">$</span> jack-matchmaker -e <span class=\"se\">\\\n</span>    fluidsynth:l_01 system:playback_1 <span class=\"se\">\\\n</span>    fluidsynth:r_01 system:playback_2\n</pre>\n<p>Both the output port and the input port patterns can be regular expressions.\nIf a match is found on an output port, the matching port will be connected to\n<em>all</em> input ports, which match the corresponding input port pattern:</p>\n<pre><span class=\"gp\">$</span> jack-matchmaker <span class=\"se\">\\\n</span>    <span class=\"s1\">'fluidsynth:l_\\d+'</span> <span class=\"s1\">'system:playback_[13]'</span> <span class=\"se\">\\\n</span>    <span class=\"s1\">'fluidsynth:r_\\d+'</span> <span class=\"s1\">'system:playback_[24]'</span>\n</pre>\n<p>You can also use named regular expression groups in the output port pattern and\nfill the port name sub-strings they match to into placeholders in the input\nport pattern:</p>\n<pre><span class=\"gp\">$</span> jack-matchmaker <span class=\"se\">\\\n</span>    <span class=\"s1\">'system:midi_capture_(?P&lt;num&gt;\\d+)$'</span> <span class=\"s1\">'mydaw:midi_in_track_{num}'</span>\n</pre>\n</div>\n<div id=\"regular-expression-and-exact-matching\">\n<h3>Regular expression and exact matching</h3>\n<p>By default port name patterns are always interpreted as <a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\" rel=\"nofollow\">Python regular\nexpressions</a> and are matched against port names, aliases and pretty-names\nusing case-sensitive matching. They are anchored to the start of the string\nthey match, i.e. they must match the start of the port name, but they still\nmatch, if the port name continues after the part the pattern matches.</p>\n<p>E.g. the pattern <tt>client:out_\\d</tt> matches <tt>client:out_1</tt>, <tt>client:out_2</tt>\netc. and also <tt>client:out_10</tt> (even though the trailing zero is not included\nin the pattern), but does not match <tt>otherclient:out_1</tt>.</p>\n<p>You can still match port names with arbitrary prefixes by using <tt>.*</tt> at the\nstart of the pattern, e.g. <tt>.*client:out_\\d</tt>.</p>\n<p>To anchor the pattern to the end of the matched string as well, use a <tt>$</tt>\nat the end of the pattern. E.g <tt>client:out_[12]$</tt> will match <tt>client:out_1</tt>\nand <tt>client:out_2</tt>, but not <tt>client:out_10</tt>, <tt>client:out_21</tt> etc.</p>\n<p>To use exact string matching instead of regular expression matching, use the\n<tt><span class=\"pre\">-e</span></tt>, <tt><span class=\"pre\">--exact-matching</span></tt> command line option. When this option is given,\npatterns must match port names (or aliases or pretty-names) exactly. You can\nstill use regular expression patterns by enclosing a pattern in forward\nslashes, e.g. like so:</p>\n<pre><span class=\"gp\">$</span> jack-matchmaker -e system:capture_1 <span class=\"s1\">'/myclient:in_l_\\d+/'</span>\n</pre>\n<p>All this applies to pattern given as positional command line arguments <em>and</em> to\npatterns listed in a pattern file (see below).</p>\n</div>\n<div id=\"pattern-match-group-substitution\">\n<h3>Pattern match group substitution</h3>\n<p>An output port pattern can contain one or more <em>named groups</em> with the syntax\n<tt><span class=\"pre\">(?P&lt;name&gt;...)</span></tt>, where the three dots represent a sub regular expression.\nThe part of the port name matched by this sub regex, is available as a\nsubstitution value for a placeholder corresponding to the name of group in\nthe input port pattern. Placeholders use the <a href=\"https://docs.python.org/3/library/string.html#formatstrings\" rel=\"nofollow\">Python string formatting</a>\nsyntax.</p>\n<p>Example:</p>\n<pre><span class=\"gp\">$</span> jack-matchmaker <span class=\"se\">\\\n</span>    <span class=\"s1\">'mysynth:out_(?P&lt;channel&gt;[lr])_\\d+$'</span> <span class=\"s1\">'myfx:in_{channel}$'</span>\n</pre>\n<p>This would connect all ports named <tt>mysynth:out_l_1</tt>, <tt>mysynth:out_l_2</tt>\nand so on to <tt>myfx:in_l</tt> and all ports named <tt>mysynth:out_r_1</tt>,\n<tt>mysynth:out_r_2</tt> and so on to <tt>myfx:in_r</tt>.</p>\n</div>\n<div id=\"pattern-files\">\n<h3>Pattern files</h3>\n<p>In addition to or instead of listing port patterns as as positional arguments\non the command line, port patterns can also be put in a text file.</p>\n<p>The <tt><span class=\"pre\">-p</span></tt>, <tt><span class=\"pre\">--pattern-file</span></tt> option instructs the program to read the\npatterns from the file path given as the option value. The file must list one\nport pattern per line, where the first line of every pair of two lines\nspecifies the output port pattern, and the second specifies the input port\npattern. Empty lines and lines starting with a hash-sign (<tt>#</tt>) are ignored\nand whitespace at the start or the end of each line is stripped.</p>\n<p>Example file:</p>\n<pre># Left channel\n# This will match output ports of any client named\n# 'out_1', 'out_l', 'output_1' or 'output_l'\n.*:out(put)?_(1|l)$\n    system:playback_1\n\n# Right channel\n# This will match output ports of any client named\n# 'out_2', 'out_r', 'output_2' or 'output_r'\n.*:out(put)?_(2|r)$\n    system:playback_2\n\n# Another common naming scheme for output ports:\n.*:Out L\n    system:playback_1\n\n.*:Out R\n    system:playback_2\n</pre>\n<p>When you send a HUP signal to a running <tt><span class=\"pre\">jack-matchmaker</span></tt> process, the file\nthat was specified on the command line when the process was started is re-read\nand the resulting patterns replace <em>all</em> previously used patterns (including\nthose listed as positional command line arguments!). If there should be an\nerror reading the file, the pattern list will then be empty.</p>\n</div>\n</div>\n<div id=\"jack-server-connection\">\n<h2>JACK server connection</h2>\n<p><tt><span class=\"pre\">jack-matchmaker</span></tt> needs a connection to a running JACK server to be notified\nabout new ports. On start-up it tries to connect to JACK until a connection can\nbe established or the maximum number of connection attempts is exceeded. This\nnumber can be set with the command line option <tt><span class=\"pre\">-m</span></tt>, <tt><span class=\"pre\">--max-attempts</span></tt>,\nwhich defaults to <tt>0</tt> (i.e. infinite attempts or until interrupted).\n<tt><span class=\"pre\">jack-matchmaker</span></tt> waits for 3 seconds between each connection attempt by\ndefault. Change this interval with the option <tt><span class=\"pre\">-I</span></tt>, <tt><span class=\"pre\">--connect-interval</span></tt>.</p>\n<p>When <tt><span class=\"pre\">jack-matchmaker</span></tt> is connected and the JACK server is stopped, the\nshutdown event is signaled to <tt><span class=\"pre\">jack-matchmaker</span></tt>, which then enters the\nconnection loop described above again.</p>\n<p>To disconnect from the JACK server and stop <tt><span class=\"pre\">jack-matchmaker</span></tt>, send an INT\nsignal to the process, usually done by pressing Control-C in the terminal\nwhere <tt><span class=\"pre\">jack-matchmaker</span></tt> is running.</p>\n</div>\n<div id=\"systemd-service\">\n<h2>Systemd service</h2>\n<p>You can optionally install <tt><span class=\"pre\">jack-matchmaker</span></tt> as a systemd user service:</p>\n<pre><span class=\"gp\">$</span> install -Dm644 systemd/jack-matchmaker.conf /etc/conf.d/jack-matchmaker\n<span class=\"gp\">$</span> install -Dm644 systemd/jack-matchmaker.service -t /usr/lib/systemd/user\n</pre>\n<p>To start the service edit <tt><span class=\"pre\">/etc/conf.d/jack-matchmaker</span></tt> according to your\nneeds and then start the service with:</p>\n<pre><span class=\"go\">systemctl --user start jack-matchmaker</span>\n</pre>\n<p>To stop it again:</p>\n<pre><span class=\"go\">systemctl --user stop jack-matchmaker</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>A version of Python 3 with a <tt>ctypes</tt> module (i.e. PyPy 3 works too).</li>\n<li><a href=\"http://jackaudio.org/\" rel=\"nofollow\">JACK</a> version 1 or 2.</li>\n<li>Linux, OS X (untested) or Windows (untested, no signal handling).</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><tt><span class=\"pre\">jack-matchmaker</span></tt> is licensed under the GNU Public License Version v2.</p>\n<p>Please see the file <tt>LICENSE</tt> for more information.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p><tt><span class=\"pre\">jack-matchmaker</span></tt> was written by Christopher Arndt 2016 - 2020.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p><tt><span class=\"pre\">jack-matchmaker</span></tt> is written in Python and incorporates the <tt>jacklib</tt>\nmodule taken from falkTX\u2019s <a href=\"https://github.com/falkTX/Cadence/blob/master/src/jacklib.py\" rel=\"nofollow\">Cadence</a> application (but it was heavily\nmodified and extended since).</p>\n<p>It was inspired by <a href=\"https://github.com/kripton/jack_autoconnect\" rel=\"nofollow\">jack-autoconnect</a>, which also auto-connects JACK ports, but\ndoesn\u2019t support port aliases or meta data pretty-names. jack-autoconnect is\nalso written in C++, and therefore probably faster and less memory hungry.</p>\n<p>The idea to read ports (patterns) from a file and re-read them on the HUP\nsignal was \u201cinspired\u201d by <a href=\"http://aj-snapshot.sourceforge.net/\" rel=\"nofollow\">aj-snapshot</a>.</p>\n<p>There is also a similar tool called <a href=\"http://rd.slavepianos.org/sw/rju/md/jack-plumbing.md\" rel=\"nofollow\">jack-plumbing</a>, part of the <a href=\"https://packages.ubuntu.com/search?keywords=jack-tools&amp;searchon=names&amp;suite=all&amp;section=all\" rel=\"nofollow\">jack-tools</a>\npackage on popular Linux distributions.</p>\n</div>\n\n          </div>"}, "last_serial": 6483048, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2f87d57509597950ba6cca325d026dc9", "sha256": "f86ed152469ff4a44e6e948ff02cfbd4959f5696706167c9715787d3e5dd7fb8"}, "downloads": -1, "filename": "jack_matchmaker-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2f87d57509597950ba6cca325d026dc9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15594, "upload_time": "2016-10-13T01:09:59", "upload_time_iso_8601": "2016-10-13T01:09:59.397948Z", "url": "https://files.pythonhosted.org/packages/9b/3a/b8fd28ec9729aa0deef6bb06ec4b63caff88aa10cdd1ae1e1cfd1ae43182/jack_matchmaker-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22a3be852bf56bc5f22a8df11d54449f", "sha256": "e96898fe1fa1e1f6ea086c8fbd235e2eaf7ea7fd8aa968d0db338095ec2d83fd"}, "downloads": -1, "filename": "jack-matchmaker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "22a3be852bf56bc5f22a8df11d54449f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18092, "upload_time": "2016-10-13T01:11:07", "upload_time_iso_8601": "2016-10-13T01:11:07.904939Z", "url": "https://files.pythonhosted.org/packages/c2/3b/cec3a101de60d5c3f51e5d004cb0db9d81a8d0ccfb05d27226202cc9a01d/jack-matchmaker-0.1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "fef9c8fe0ba6b7f72a958890128700f3", "sha256": "b362542697c07e0e5c0efb2e626e7adbb367615dcc97e55c96102cc4b25a2290"}, "downloads": -1, "filename": "jack-matchmaker-0.1.0.zip", "has_sig": false, "md5_digest": "fef9c8fe0ba6b7f72a958890128700f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21536, "upload_time": "2016-10-13T01:08:41", "upload_time_iso_8601": "2016-10-13T01:08:41.506483Z", "url": "https://files.pythonhosted.org/packages/bb/30/aa7fcd9236f9005a86b7bec68b8106bd1e0187deff7c992add14e055c3c3/jack-matchmaker-0.1.0.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b5e2999251c3d343f59b74f86d3c44f5", "sha256": "93f89bfa6166861cfaed3c57905748b107883efdb963ecf53113e374b27aa5b0"}, "downloads": -1, "filename": "jack_matchmaker-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5e2999251c3d343f59b74f86d3c44f5", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17198, "upload_time": "2016-10-21T19:27:14", "upload_time_iso_8601": "2016-10-21T19:27:14.600297Z", "url": "https://files.pythonhosted.org/packages/d8/dd/b74a64cb361fc82895505ad09c01e2ce3ad4f47a24c094fe45233e26de1d/jack_matchmaker-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2232332ca673c251fc888572fcd6a52e", "sha256": "355c6ea74cb90eb37235371a3a3341cee519e6011e5c453401e4b5167824bd4f"}, "downloads": -1, "filename": "jack-matchmaker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2232332ca673c251fc888572fcd6a52e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20477, "upload_time": "2016-10-21T19:27:12", "upload_time_iso_8601": "2016-10-21T19:27:12.029996Z", "url": "https://files.pythonhosted.org/packages/74/27/9973cf117faab3e46d2b96c8cc422c6d7c4225997bc7b8488298911dcbd5/jack-matchmaker-0.2.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "135c520f78f66aed2bea0f8a92a8e597", "sha256": "a19954a1d912b6a1322b5b780e193789b30bf1b5987d09b7d1f411b8cb401606"}, "downloads": -1, "filename": "jack-matchmaker-0.2.0.zip", "has_sig": false, "md5_digest": "135c520f78f66aed2bea0f8a92a8e597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25066, "upload_time": "2016-10-21T19:27:08", "upload_time_iso_8601": "2016-10-21T19:27:08.909236Z", "url": "https://files.pythonhosted.org/packages/08/22/2d25ca67f2042e7690a19bdbc624377a6114a318ca15f563bf0525ce66eb/jack-matchmaker-0.2.0.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "b501d5fb512f6da281934a001aa787f4", "sha256": "5e3980506f20ddb82169a9a291f8c536c9e9068c1bd56b79edbad5f425637a74"}, "downloads": -1, "filename": "jack_matchmaker-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b501d5fb512f6da281934a001aa787f4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17453, "upload_time": "2016-10-21T22:07:18", "upload_time_iso_8601": "2016-10-21T22:07:18.207920Z", "url": "https://files.pythonhosted.org/packages/56/80/0885f86a914fc4cf15eed2853d9e77bdb4ba81a6b1a7e3d0adca94e0e88f/jack_matchmaker-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ec1f7ccfcc6632e0d011ce3417bac33", "sha256": "cf8a2056461f30b02b4fbbf9e31377b2e8990cfcb37606ffa6d84997f36f5364"}, "downloads": -1, "filename": "jack-matchmaker-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7ec1f7ccfcc6632e0d011ce3417bac33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20587, "upload_time": "2016-10-21T22:07:15", "upload_time_iso_8601": "2016-10-21T22:07:15.430949Z", "url": "https://files.pythonhosted.org/packages/49/02/da2d9c692442c4507f8bd19f02aa672a7e2fd54000bcf3fb64fde03be91d/jack-matchmaker-0.2.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "109874580464da9d4087c67a6d465c59", "sha256": "392a866b0981b91bf8c173533e94f882430005ed638b79d9bccffa899a033773"}, "downloads": -1, "filename": "jack-matchmaker-0.2.1.zip", "has_sig": false, "md5_digest": "109874580464da9d4087c67a6d465c59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25356, "upload_time": "2016-10-21T22:07:12", "upload_time_iso_8601": "2016-10-21T22:07:12.754308Z", "url": "https://files.pythonhosted.org/packages/75/06/1f01c7416e9a3fb2885785bb0b171ba43527c8b39cb803a33ffb5677c5ec/jack-matchmaker-0.2.1.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f93bf1d8f466830fc00fe729f49edfc4", "sha256": "bf6652bb2578c79322faff29e01e39bd81569d596a42fa5c4808a076e1099da1"}, "downloads": -1, "filename": "jack_matchmaker-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f93bf1d8f466830fc00fe729f49edfc4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19039, "upload_time": "2016-11-03T23:27:35", "upload_time_iso_8601": "2016-11-03T23:27:35.119678Z", "url": "https://files.pythonhosted.org/packages/06/23/1c1dd3dd379ec187f427fb40e358ff914036b6d93b0e1aba23f215119f36/jack_matchmaker-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b81b8c698cdf248af7dafb5fca675a79", "sha256": "f81f8eaf1665d0e48ab752f0b620dece1206ad564eacf5d315f2609babb54c35"}, "downloads": -1, "filename": "jack-matchmaker-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b81b8c698cdf248af7dafb5fca675a79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22350, "upload_time": "2016-11-03T23:27:32", "upload_time_iso_8601": "2016-11-03T23:27:32.713885Z", "url": "https://files.pythonhosted.org/packages/0a/be/911b10cdbf5366eff9a6e075a579a83183511b0008c4725729dcaff27860/jack-matchmaker-0.3.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed3685a31fbf6957df5ce7e5a7100412", "sha256": "d96c2a301c21da6b0ad20361ae2416c53367f24c838172cb342da2e405acb775"}, "downloads": -1, "filename": "jack-matchmaker-0.3.0.zip", "has_sig": false, "md5_digest": "ed3685a31fbf6957df5ce7e5a7100412", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27738, "upload_time": "2016-11-03T23:27:29", "upload_time_iso_8601": "2016-11-03T23:27:29.633820Z", "url": "https://files.pythonhosted.org/packages/53/53/17a2244ae8898b0989c1cfd73b384efa16b594f12849f12d56a0f79a2f5e/jack-matchmaker-0.3.0.zip", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f2b9e551eb2fe6a88544d224e5622810", "sha256": "d8ed7071400d4be421b21ec27c300ff3452e96c5c61dab870593b746e93317c4"}, "downloads": -1, "filename": "jack_matchmaker-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2b9e551eb2fe6a88544d224e5622810", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19147, "upload_time": "2016-11-04T16:00:55", "upload_time_iso_8601": "2016-11-04T16:00:55.336603Z", "url": "https://files.pythonhosted.org/packages/10/29/78ba25c4d4ed0bfbe0fe687e9750183a9a542649e3e5c646adb9eb063b7c/jack_matchmaker-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c7e2bc744699dd8fc91b3ab22cbb99d", "sha256": "fc4432cabbeac294c766d6f59186d864b256d549d930e641fe416ec7a750c0a9"}, "downloads": -1, "filename": "jack-matchmaker-0.4.0.tar.gz", "has_sig": false, "md5_digest": "6c7e2bc744699dd8fc91b3ab22cbb99d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22480, "upload_time": "2016-11-04T16:00:52", "upload_time_iso_8601": "2016-11-04T16:00:52.066360Z", "url": "https://files.pythonhosted.org/packages/e2/64/7d41197ea7861db55da9ca8716e38a22ed524dbcf9b7c711e3299236a7fc/jack-matchmaker-0.4.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0dc2d91c6c46cdc77017c5b0ae4f5ab", "sha256": "cadf85d2af54261b4ec1c243593e9bc8a72cde6403da006f03b64095b6c64895"}, "downloads": -1, "filename": "jack-matchmaker-0.4.0.zip", "has_sig": false, "md5_digest": "c0dc2d91c6c46cdc77017c5b0ae4f5ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27852, "upload_time": "2016-11-04T16:00:47", "upload_time_iso_8601": "2016-11-04T16:00:47.823901Z", "url": "https://files.pythonhosted.org/packages/56/3e/fd13b0ab7e5ddb74f91718569b269735ef6e1c873abee395435f4b2c0b29/jack-matchmaker-0.4.0.zip", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "48f1bd7829ade559d85749aec94bcfb8", "sha256": "335c96e5bd650c37f92a3cfbbee065d3c53e0ea2a7aa95fc8c6e0d9f953521ee"}, "downloads": -1, "filename": "jack_matchmaker-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "48f1bd7829ade559d85749aec94bcfb8", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 19400, "upload_time": "2016-11-05T17:39:23", "upload_time_iso_8601": "2016-11-05T17:39:23.547585Z", "url": "https://files.pythonhosted.org/packages/ba/88/bdbc5a53244548fd0b6ad73fca4ab70d5095367f94429d217e2351bd1d98/jack_matchmaker-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dfa37a50dcfd41c39c1832a0dfc21fc", "sha256": "d41577fac2df0edfceb7fd2334a6a47e74a54749a1574c39e872de36526f72ea"}, "downloads": -1, "filename": "jack-matchmaker-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9dfa37a50dcfd41c39c1832a0dfc21fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21867, "upload_time": "2016-11-05T17:39:19", "upload_time_iso_8601": "2016-11-05T17:39:19.605681Z", "url": "https://files.pythonhosted.org/packages/b2/6e/ff9fb518cad3949ba578ed4d34b9c22b4d0fc47c839d63af234174e3fdd5/jack-matchmaker-0.5.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "05c0af24fc34c0d3ad3c85e9b51d2c12", "sha256": "a6a80e6ee54e6068c50c1d25e9c40d5c76c18a1a87d951726ccdc03fd302489f"}, "downloads": -1, "filename": "jack-matchmaker-0.5.0.zip", "has_sig": false, "md5_digest": "05c0af24fc34c0d3ad3c85e9b51d2c12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27029, "upload_time": "2016-11-05T17:39:16", "upload_time_iso_8601": "2016-11-05T17:39:16.107232Z", "url": "https://files.pythonhosted.org/packages/fd/67/3bc0c895410c8f44606a3e164ed85381e0baa8b04c9498886a325e4bffa3/jack-matchmaker-0.5.0.zip", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "c07d48a01a3df4ff9009da5956661779", "sha256": "6aefe2a06eb69ee85b1b3b12af41d0ce5c77e528994297b67b5eeae883fa14d4"}, "downloads": -1, "filename": "jack_matchmaker-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c07d48a01a3df4ff9009da5956661779", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20978, "upload_time": "2017-10-16T14:17:24", "upload_time_iso_8601": "2017-10-16T14:17:24.033296Z", "url": "https://files.pythonhosted.org/packages/1a/53/b418ea2acb301217c58947aa203e2bd37952da70d703866d9dbaf790a624/jack_matchmaker-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b491c58c7ac82b45ca98f993d05dfe8", "sha256": "26afda4e5ccc7f7c5d996eabbc75bdc7458d1871ff3d9d8b9183c5e6eeda185a"}, "downloads": -1, "filename": "jack-matchmaker-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6b491c58c7ac82b45ca98f993d05dfe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22286, "upload_time": "2017-10-16T14:17:25", "upload_time_iso_8601": "2017-10-16T14:17:25.793729Z", "url": "https://files.pythonhosted.org/packages/97/0a/bd441b295769b92717e80053ab87ae38c8f78f70ccf4eb1186169d53f15f/jack-matchmaker-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "179cfdd7933d50ac3336598c500cc104", "sha256": "d9dbb8d639b39da3c85456368b521b9507d4323389cd65aafdf1e24d70b46f14"}, "downloads": -1, "filename": "jack_matchmaker-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "179cfdd7933d50ac3336598c500cc104", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26815, "upload_time": "2019-04-15T21:26:53", "upload_time_iso_8601": "2019-04-15T21:26:53.671396Z", "url": "https://files.pythonhosted.org/packages/c7/93/153fcec9efb369684b9c90dc15a8c33cdb7ac4c0bdb4a9b608a75a45952d/jack_matchmaker-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de8954ac697b6696d922d9c5a480c2ac", "sha256": "7fde275574f9b618c9cb5dad900379c3dd64bc5f9d5baafb3b2cb140b5d3f1d4"}, "downloads": -1, "filename": "jack-matchmaker-0.7.0.tar.gz", "has_sig": false, "md5_digest": "de8954ac697b6696d922d9c5a480c2ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27459, "upload_time": "2019-04-15T21:26:55", "upload_time_iso_8601": "2019-04-15T21:26:55.638141Z", "url": "https://files.pythonhosted.org/packages/58/98/b27ee84dfeee8a7837bc30fe519789ba44d174ce4e220ed53afa47d549b5/jack-matchmaker-0.7.0.tar.gz", "yanked": false}], "0.7.0rc1": [{"comment_text": "", "digests": {"md5": "b9a7ae1388348e70e30a13542cdbd8a7", "sha256": "1a8f309f6c7ff192cac2899ae1eced82030ee0dda6a5fbd5b2f69d96eb350836"}, "downloads": -1, "filename": "jack_matchmaker-0.7.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "b9a7ae1388348e70e30a13542cdbd8a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26697, "upload_time": "2019-04-10T22:37:28", "upload_time_iso_8601": "2019-04-10T22:37:28.883184Z", "url": "https://files.pythonhosted.org/packages/60/15/ad76f69b39ae974887751977514d8b5d3f92156135e8f56a60cb50f771f8/jack_matchmaker-0.7.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b785864d10dbd0de99d0452d02c03fd", "sha256": "10568e60ef9516d88b1f405bc4e8a76da2b5ed9f26207c76ba434352e1cd459c"}, "downloads": -1, "filename": "jack-matchmaker-0.7.0rc1.tar.gz", "has_sig": false, "md5_digest": "9b785864d10dbd0de99d0452d02c03fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26094, "upload_time": "2019-04-10T22:37:30", "upload_time_iso_8601": "2019-04-10T22:37:30.462434Z", "url": "https://files.pythonhosted.org/packages/5b/65/b44d4d71b54493f823f8efeb8ad398379b03abe4be83f5f58939cce00311/jack-matchmaker-0.7.0rc1.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "75b8dff74d0991eaf1be9c35aab47946", "sha256": "e3342c0772bbe007cfa5a319b4a4b17197cad971397f1c39cb32c6fcb84d2e31"}, "downloads": -1, "filename": "jack_matchmaker-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75b8dff74d0991eaf1be9c35aab47946", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27139, "upload_time": "2019-05-13T21:22:09", "upload_time_iso_8601": "2019-05-13T21:22:09.382573Z", "url": "https://files.pythonhosted.org/packages/2a/bc/1dd66765f4f2fa7d22b5b52e744f84e6e4e80d124414f836ec8f074c4365/jack_matchmaker-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be1d945483d42bf61f78c8b8c1500f3", "sha256": "85fc73519c4fe97ab105e1267dac94adc070f3405245a36d4974881f07bcd92d"}, "downloads": -1, "filename": "jack-matchmaker-0.7.1.tar.gz", "has_sig": false, "md5_digest": "2be1d945483d42bf61f78c8b8c1500f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27882, "upload_time": "2019-05-13T21:22:10", "upload_time_iso_8601": "2019-05-13T21:22:10.988528Z", "url": "https://files.pythonhosted.org/packages/bb/69/ccdd39e30a2f8afb2bde866e16f2cee342568d48638b098d9256a3850187/jack-matchmaker-0.7.1.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "adca697f5678598dc05fc92962939679", "sha256": "6a5d26023f12be550753205b47af2cca2c083ac4ab0501787145b20aa30893d6"}, "downloads": -1, "filename": "jack_matchmaker-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adca697f5678598dc05fc92962939679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27393, "upload_time": "2020-01-19T17:53:26", "upload_time_iso_8601": "2020-01-19T17:53:26.404504Z", "url": "https://files.pythonhosted.org/packages/37/d6/3938eb41519b1bb7fba614f64ca345ae0117c24d85e9568f2555c1e5706e/jack_matchmaker-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8925b89b059b2867d02aa2445fc858e1", "sha256": "b5388397459bf3fce8fb6296eaa06afa9b37f81835ad8d6b29bfa60b371d8f3e"}, "downloads": -1, "filename": "jack-matchmaker-0.8.0.tar.gz", "has_sig": false, "md5_digest": "8925b89b059b2867d02aa2445fc858e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29437, "upload_time": "2020-01-19T17:53:28", "upload_time_iso_8601": "2020-01-19T17:53:28.077391Z", "url": "https://files.pythonhosted.org/packages/33/8a/f763290d485c50c06182e40ddc245ae9b261285b3c21ecb9a4faa5307cb5/jack-matchmaker-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "adca697f5678598dc05fc92962939679", "sha256": "6a5d26023f12be550753205b47af2cca2c083ac4ab0501787145b20aa30893d6"}, "downloads": -1, "filename": "jack_matchmaker-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adca697f5678598dc05fc92962939679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27393, "upload_time": "2020-01-19T17:53:26", "upload_time_iso_8601": "2020-01-19T17:53:26.404504Z", "url": "https://files.pythonhosted.org/packages/37/d6/3938eb41519b1bb7fba614f64ca345ae0117c24d85e9568f2555c1e5706e/jack_matchmaker-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8925b89b059b2867d02aa2445fc858e1", "sha256": "b5388397459bf3fce8fb6296eaa06afa9b37f81835ad8d6b29bfa60b371d8f3e"}, "downloads": -1, "filename": "jack-matchmaker-0.8.0.tar.gz", "has_sig": false, "md5_digest": "8925b89b059b2867d02aa2445fc858e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29437, "upload_time": "2020-01-19T17:53:28", "upload_time_iso_8601": "2020-01-19T17:53:28.077391Z", "url": "https://files.pythonhosted.org/packages/33/8a/f763290d485c50c06182e40ddc245ae9b261285b3c21ecb9a4faa5307cb5/jack-matchmaker-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:23 2020"}