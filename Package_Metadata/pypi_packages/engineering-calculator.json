{"info": {"author": "Ken Kundert", "author_email": "ec@nurdletech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "ec: An Engineering Calculator\n=============================\n\nThs calculator is noteworthy in that it employs a stack model of computation \n(Reverse Polish Notation), it supports numbers with SI scale factors and units, \nand uses a text-only user interface.\n\n\nInstalling\n----------\n\n| Version: 1.6.0\n| Released: 2020-04-15\n\n.. image:: https://img.shields.io/travis/KenKundert/ec/master.svg\n    :target: https://travis-ci.org/KenKundert/ec\n\n.. image:: https://img.shields.io/pypi/v/engineering_calculator.svg\n    :target: https://pypi.python.org/pypi/engineering_calculator\n\n.. image:: https://img.shields.io/pypi/pyversions/engineering_calculator.svg\n    :target: https://pypi.python.org/pypi/engineering_calculator\n\n.. IGNORE: pypi statistics are broken and unlikely to be fixed\n    .. image:: https://img.shields.io/pypi/dm/engineering_calculator.svg\n        :target: https://pypi.python.org/pypi/engineering_calculator\n\nInstall with::\n\n    pip3 install engineering-calculator --user\n\nRequires Python version 3.3 or later. Also supports Python 2.7 with slightly \nreduced functionality.\n\nAlternatively, you can use ec0, a slightly less capable version of ec that \nsupports older versions of python.\n\nMore information on both ec and ec0 can be found at `NurdleTech \n<http://www.nurdletech.com/ec.html>`_ .\n\n\nInstalling from Source\n----------------------\n\nInstallation of the manpage is not completely robust when using pip. If it is \nnot working for you, you should install from source.  To get the source code::\n\n   $ git clone https://github.com/KenKundert/ec.git\n\nOnce cloned, you can get the latest updates using::\n\n   $ cd ec\n   $ git pull\n\nAlternatively, you can download a zip file from `github \n<https://github.com/KenKundert/ec/archive/master.zip>`_.  If you go this route, \nyou will have to unzip the file using the unzip command. For example::\n\n   $ wget https://github.com/KenKundert/ec/archive/master.zip\n   $ unzip master.zip\n   $ mv ec-master ec\n   $ cd ec\n\nTo run the regression tests::\n\n   $ ./test\n\nTo install::\n\n   $ python setup.py install --user\n\nTo create and install the manpage, run::\n\n   $ ./manpage.py\n   $ mkdir -p ~/.local/man/man1\n   $ cp ec.1 ~/.local/man/man1\n\nTo read the EC manual::\n\n   $ man ec\n\nTo run EC::\n\n   $ ec\n   0:\n\n\nA Brief Tour of Engineering Calculator\n--------------------------------------\n\nTo perform operations in EC, you first enter the numbers, then the operators.  \nIn particular, as you enter the numbers they are pushed onto the stack. The \noperators then take numbers from the stack and replace them with the result.  \nThe operations are performed immediately and there is no use of parentheses to \ngroup calculations. Any intermediate results are stored on the stack until \nneeded.\n\nTo add two numbers::\n\n   0: 4 5 +\n   9:\n\nThis command first pushes 4 onto the stack, then it pushes 5 on the stack, and \nfinally runs the addition operator, which pulls 4 and 5 off the stack and then \npushes the sum, 9, back onto the stack.  The prompt displays the value of the \nx-register, which is generally the final result from the previous command.\n\nYou can string together an arbitrarily long calculation on a single line::\n\n   0: 4 5 + 6 7 + *\n   117:\n\nThis command demonstrates the power of using a stack for calculations. It first \ncomputes the sum and places the results on the stack. That result stays on the \nstack while the sum of 6 and 7 is computed, and finally it is used, and \nconsumed, in the final multiplication.\n\nAlternately, you can string a calculation over multiple lines (this calculates \nthe value of two parallel 100 ohm resistors)::\n\n   0: 100\n   100: 100\n   100: ||\n   50:\n\nEffectively, you only need to type *enter* is when you want to see the result.\n\nSelect operators can be entered without preceding them with a space if they \nfollow a number or a name. For example::\n\n   0: 4 5* 6 5+ *\n   220:\n\nUse *stack* to see the contents of the stack::\n\n   0: 1 2 3 4 5 stack\n        1\n        2\n        3\n     y: 4\n     x: 5\n   5: + stack\n        1\n        2\n     y: 3\n     x: 9\n   9: + stack\n        1\n     y: 2\n     x: 12\n   12: + stack\n     y: 1\n     x: 14\n   14: + stack\n     x: 15\n   14: -1 stack\n     y: 15\n     x: -1\n   -1:\n\nThe stack grows without limit as needed. The bottom two values are the values \nthat are generally involved in operations and they are labeled *x* and *y* as an \naid to help you understand and predict the basic operation of various commands. \nFor example::\n\n   0: 8 2 stack\n     y: 8\n     x: 2\n   2: ytox\n   64:\n\nThe command name *ytox* is short for 'raise value of *y* register to the value \nin the *x* register'.\n\nYou remove a value from the bottom of the stack with *pop*::\n\n   0: 10 -3 stack\n     y: 10\n     x: -3\n   -3: pop\n   10: stack\n     x: 10\n\nTo store a value into a variable, type an equal sign followed by a name. To\nrecall it, simply use the name::\n\n   0: 100MHz =freq\n   100MHz: 2pi* =omega\n   628.32M: 1pF =Cin\n   1pF: 1 omega/ Cin/\n   1.5915K:\n\nDisplay variables using::\n\n   628.32M: vars\n     Cin = 1pF\n     Rref = 50 Ohms\n     freq = 100MHz\n     omega = 628.32M\n   628.32M:\n\n*Rref* is a special variable that is set by default to 50 Ohms, but you can \nchange its value. It is used in *dBm* calculations.\n\nFrom the above example you can see that EC supports SI scale factors and units.  \nThe support for units is relatively conservative.  You can enter them\nand it remembers them, but they do not survive any operation other than a\ncopy. In this way it should never display incorrect or misleading units, however\nit displays units when it can. For example::\n\n   0: 100MHz =freq\n   100 MHz: 2pi* \"rads/s\" =omega\n   628.32 Mrads/s: vars\n     Rref = 50 Ohms\n     freq = 100 MHz\n     omega = 628.32 Mrads/s\n   628.32 Mrads/s: 2pi /\n   100M:\n\nNotice that EC captured units on 100MHz and stored them into the memory freq.\nAlso notice that the units of \"rads/s\" were explicitly specified, and they were\nalso captured. Finally, notice that dividing by *2pi* cleared the units.\n\nThis simple way of adding units to a number, ex. 100MHz, is somewhat restricted.\n\n* You can only add units after a scale factor, but once you've given the scale \n  factor the units are optional. In this way, 1m represents 1e-3 rather than one \n  meter. If you want to specify one meter, you would use 1_m. The underscore is \n  a scale factor, like m or k. It represents the unity scale factor.\n\n* Units added to the end of a number may consist only of letters and \n  underscores. Digits and special characters like /, ^, \\*, -, ( or ) are not \n  allowed.\n\n* You can only add units to number literals. So 100MHz is okay, but 'omega 2pi/ \n  Hz' is not.\n\nYou can overcome this limitation by entering a quoted string. Doing so \ninterprets the contents of the string as units and applies them to whatever is \nin the *x* register. For example::\n\n   0: 100MHz 2pi* \"rads/s\"\n   628.32 Mrads/s: 2pi / \"Hz\"\n   100 MHz:\n\n   0: 9.8066 \"m/s^2\"\n   9.8066 m/s^2:\n\nNormally units are given after the number, however a dollar sign would be given\nimmediately before::\n\n   0: $100M\n   $100M:\n\nYou can enter hexadecimal, octal, or binary numbers, in either traditional\nprogrammers notation or in Verilog notation. For example::\n\n   0: 0xFF\n   255: 0o77\n   63: 0b1111\n   15: 'hFF\n   255: 'o77\n   63: 'b1111\n   15:\n\nYou can also display numbers in hexadecimal, octal, or binary in both\ntraditional or Verilog notation. To do so, use ``hex``, ``oct``, ``bin``, \n``vhex``, ``voct``, or ``vbin``::\n\n   0: 255\n   255: hex4\n   0x00ff: vbin\n   'b11111111:\n\nYou can convert voltages into *dBm* using::\n\n   0: 10 vdbm\n   30:\n\nYou can convert *dBm* into voltage using::\n\n   0: -10 dbmv\n   100 mV: \n\nBoth of these assume a load resistance that is contained in memory *Rref*, which \nby default is 50 Ohms.\n\nAt start up EC reads and executes commands from files. It first tries '~/.ecrc'\nand runs any commands it contains if it exists. It then tries './.ecrc' if it\nexists. Finally it runs any files given on the command line. It is common to put\nyour generic preferences in '~/.exrc'. For example, if your are a physicist with\na desire for high precision results, you might use::\n\n    eng6\n    h 2pi / \"J-s\" =hbar\n\nThis tells EC to use 6 digits of resolution and predefines *hbar* as a constant.\nThe local start up file ('./.ecrc') or the file given as a command line argument\nis generally used to give more project specific initializations. For example, in\na directory where you are working on a PLL design you might have an './.ecrc'\nfile with the following contents::\n\n    88.3uSiemens =kdet\n    9.1G \"Hz/V\" =kvco\n    2 =m\n    8 =n\n    1.4pF =cs\n    59.7pF =cp\n    2.2kOhms =rz\n\nEC also takes commands from the command line. For example::\n\n   $ ec \"125mV 67uV / db\"\n   65.417\n\nEC prints back-quoted strings while interpolating the values of registers and \nvariables when requested. For example::\n\n   $ ec 'degs 500 1000 rtop \"V/V\" `Gain = $0 @ $1.` quit'\n   Gain = 1.118 KV/V @ 26.565 degs.\n\nNormally *ec* prints the value of the x register and exits when it runs out of \nthings to do.  The *quit* at the end tells ec to exit immediately. In this way \nthe value of the x register is not printed.  Without it you would see the \nmagnitude printed twice.\n\nYou can define functions with the following syntax: *( ... )name*, where '(' \nstarts the function definition, ')name' terminates it, and ... is simply \na collection of calculator actions. For example::\n\n   0: (2pi * \"rads/s\")to_omega\n   0: (2pi / \"Hz\")to_freq\n   0: 1.4GHz\n   1.4 GHz: to_omega\n   8.7965 Grads/s: to_freq\n   1.4 GHz:\n\nYou can get a list of the actions available with::\n\n   0: ?\n\nYou can get help on a specific topic, such as //, with::\n\n   0: ?//\n\nYou can get a list of the help topics available with::\n\n   0: help\n\nThere is much more available that what is described here. For more information,\nrun::\n\n   $ man ec\n\nYou can quit the program using::\n\n   0: quit\n\n(or *:q* or *^D*).\n\n| Enjoy,\n|    -Ken", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/kenkundert/ec/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://nurdletech.com/linux-utilities/ec", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "engineering-calculator", "package_url": "https://pypi.org/project/engineering-calculator/", "platform": "", "project_url": "https://pypi.org/project/engineering-calculator/", "project_urls": {"Download": "https://github.com/kenkundert/ec/tarball/master", "Homepage": "http://nurdletech.com/linux-utilities/ec"}, "release_url": "https://pypi.org/project/engineering-calculator/1.6.0/", "requires_dist": null, "requires_python": "", "summary": "engineering calculator", "version": "1.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Ths calculator is noteworthy in that it employs a stack model of computation\n(Reverse Polish Notation), it supports numbers with SI scale factors and units,\nand uses a text-only user interface.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<div>\n<div>Version: 1.6.0</div>\n<div>Released: 2020-04-15</div>\n</div>\n<a href=\"https://travis-ci.org/KenKundert/ec\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/KenKundert/ec/master.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8883efd44ce434d41203db81db5d19bbf711e4a/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4b656e4b756e646572742f65632f6d61737465722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/engineering_calculator\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/engineering_calculator.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc5481b70e5cfff60565c9871f806d841da2f20d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f656e67696e656572696e675f63616c63756c61746f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/engineering_calculator\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/engineering_calculator.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f219b15facd5b76f63871870428a6ec0d2bcf188/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f656e67696e656572696e675f63616c63756c61746f722e737667\"></a>\n<p>Install with:</p>\n<pre>pip3 install engineering-calculator --user\n</pre>\n<p>Requires Python version 3.3 or later. Also supports Python 2.7 with slightly\nreduced functionality.</p>\n<p>Alternatively, you can use ec0, a slightly less capable version of ec that\nsupports older versions of python.</p>\n<p>More information on both ec and ec0 can be found at <a href=\"http://www.nurdletech.com/ec.html\" rel=\"nofollow\">NurdleTech</a> .</p>\n</div>\n<div id=\"installing-from-source\">\n<h2>Installing from Source</h2>\n<p>Installation of the manpage is not completely robust when using pip. If it is\nnot working for you, you should install from source.  To get the source code:</p>\n<pre>$ git clone https://github.com/KenKundert/ec.git\n</pre>\n<p>Once cloned, you can get the latest updates using:</p>\n<pre>$ cd ec\n$ git pull\n</pre>\n<p>Alternatively, you can download a zip file from <a href=\"https://github.com/KenKundert/ec/archive/master.zip\" rel=\"nofollow\">github</a>.  If you go this route,\nyou will have to unzip the file using the unzip command. For example:</p>\n<pre>$ wget https://github.com/KenKundert/ec/archive/master.zip\n$ unzip master.zip\n$ mv ec-master ec\n$ cd ec\n</pre>\n<p>To run the regression tests:</p>\n<pre>$ ./test\n</pre>\n<p>To install:</p>\n<pre>$ python setup.py install --user\n</pre>\n<p>To create and install the manpage, run:</p>\n<pre>$ ./manpage.py\n$ mkdir -p ~/.local/man/man1\n$ cp ec.1 ~/.local/man/man1\n</pre>\n<p>To read the EC manual:</p>\n<pre>$ man ec\n</pre>\n<p>To run EC:</p>\n<pre>$ ec\n0:\n</pre>\n</div>\n<div id=\"a-brief-tour-of-engineering-calculator\">\n<h2>A Brief Tour of Engineering Calculator</h2>\n<p>To perform operations in EC, you first enter the numbers, then the operators.\nIn particular, as you enter the numbers they are pushed onto the stack. The\noperators then take numbers from the stack and replace them with the result.\nThe operations are performed immediately and there is no use of parentheses to\ngroup calculations. Any intermediate results are stored on the stack until\nneeded.</p>\n<p>To add two numbers:</p>\n<pre>0: 4 5 +\n9:\n</pre>\n<p>This command first pushes 4 onto the stack, then it pushes 5 on the stack, and\nfinally runs the addition operator, which pulls 4 and 5 off the stack and then\npushes the sum, 9, back onto the stack.  The prompt displays the value of the\nx-register, which is generally the final result from the previous command.</p>\n<p>You can string together an arbitrarily long calculation on a single line:</p>\n<pre>0: 4 5 + 6 7 + *\n117:\n</pre>\n<p>This command demonstrates the power of using a stack for calculations. It first\ncomputes the sum and places the results on the stack. That result stays on the\nstack while the sum of 6 and 7 is computed, and finally it is used, and\nconsumed, in the final multiplication.</p>\n<p>Alternately, you can string a calculation over multiple lines (this calculates\nthe value of two parallel 100 ohm resistors):</p>\n<pre>0: 100\n100: 100\n100: ||\n50:\n</pre>\n<p>Effectively, you only need to type <em>enter</em> is when you want to see the result.</p>\n<p>Select operators can be entered without preceding them with a space if they\nfollow a number or a name. For example:</p>\n<pre>0: 4 5* 6 5+ *\n220:\n</pre>\n<p>Use <em>stack</em> to see the contents of the stack:</p>\n<pre>0: 1 2 3 4 5 stack\n     1\n     2\n     3\n  y: 4\n  x: 5\n5: + stack\n     1\n     2\n  y: 3\n  x: 9\n9: + stack\n     1\n  y: 2\n  x: 12\n12: + stack\n  y: 1\n  x: 14\n14: + stack\n  x: 15\n14: -1 stack\n  y: 15\n  x: -1\n-1:\n</pre>\n<p>The stack grows without limit as needed. The bottom two values are the values\nthat are generally involved in operations and they are labeled <em>x</em> and <em>y</em> as an\naid to help you understand and predict the basic operation of various commands.\nFor example:</p>\n<pre>0: 8 2 stack\n  y: 8\n  x: 2\n2: ytox\n64:\n</pre>\n<p>The command name <em>ytox</em> is short for \u2018raise value of <em>y</em> register to the value\nin the <em>x</em> register\u2019.</p>\n<p>You remove a value from the bottom of the stack with <em>pop</em>:</p>\n<pre>0: 10 -3 stack\n  y: 10\n  x: -3\n-3: pop\n10: stack\n  x: 10\n</pre>\n<p>To store a value into a variable, type an equal sign followed by a name. To\nrecall it, simply use the name:</p>\n<pre>0: 100MHz =freq\n100MHz: 2pi* =omega\n628.32M: 1pF =Cin\n1pF: 1 omega/ Cin/\n1.5915K:\n</pre>\n<p>Display variables using:</p>\n<pre>628.32M: vars\n  Cin = 1pF\n  Rref = 50 Ohms\n  freq = 100MHz\n  omega = 628.32M\n628.32M:\n</pre>\n<p><em>Rref</em> is a special variable that is set by default to 50 Ohms, but you can\nchange its value. It is used in <em>dBm</em> calculations.</p>\n<p>From the above example you can see that EC supports SI scale factors and units.\nThe support for units is relatively conservative.  You can enter them\nand it remembers them, but they do not survive any operation other than a\ncopy. In this way it should never display incorrect or misleading units, however\nit displays units when it can. For example:</p>\n<pre>0: 100MHz =freq\n100 MHz: 2pi* \"rads/s\" =omega\n628.32 Mrads/s: vars\n  Rref = 50 Ohms\n  freq = 100 MHz\n  omega = 628.32 Mrads/s\n628.32 Mrads/s: 2pi /\n100M:\n</pre>\n<p>Notice that EC captured units on 100MHz and stored them into the memory freq.\nAlso notice that the units of \u201crads/s\u201d were explicitly specified, and they were\nalso captured. Finally, notice that dividing by <em>2pi</em> cleared the units.</p>\n<p>This simple way of adding units to a number, ex. 100MHz, is somewhat restricted.</p>\n<ul>\n<li>You can only add units after a scale factor, but once you\u2019ve given the scale\nfactor the units are optional. In this way, 1m represents 1e-3 rather than one\nmeter. If you want to specify one meter, you would use 1_m. The underscore is\na scale factor, like m or k. It represents the unity scale factor.</li>\n<li>Units added to the end of a number may consist only of letters and\nunderscores. Digits and special characters like /, ^, *, -, ( or ) are not\nallowed.</li>\n<li>You can only add units to number literals. So 100MHz is okay, but \u2018omega 2pi/\nHz\u2019 is not.</li>\n</ul>\n<p>You can overcome this limitation by entering a quoted string. Doing so\ninterprets the contents of the string as units and applies them to whatever is\nin the <em>x</em> register. For example:</p>\n<pre>0: 100MHz 2pi* \"rads/s\"\n628.32 Mrads/s: 2pi / \"Hz\"\n100 MHz:\n\n0: 9.8066 \"m/s^2\"\n9.8066 m/s^2:\n</pre>\n<p>Normally units are given after the number, however a dollar sign would be given\nimmediately before:</p>\n<pre>0: $100M\n$100M:\n</pre>\n<p>You can enter hexadecimal, octal, or binary numbers, in either traditional\nprogrammers notation or in Verilog notation. For example:</p>\n<pre>0: 0xFF\n255: 0o77\n63: 0b1111\n15: 'hFF\n255: 'o77\n63: 'b1111\n15:\n</pre>\n<p>You can also display numbers in hexadecimal, octal, or binary in both\ntraditional or Verilog notation. To do so, use <tt>hex</tt>, <tt>oct</tt>, <tt>bin</tt>,\n<tt>vhex</tt>, <tt>voct</tt>, or <tt>vbin</tt>:</p>\n<pre>0: 255\n255: hex4\n0x00ff: vbin\n'b11111111:\n</pre>\n<p>You can convert voltages into <em>dBm</em> using:</p>\n<pre>0: 10 vdbm\n30:\n</pre>\n<p>You can convert <em>dBm</em> into voltage using:</p>\n<pre>0: -10 dbmv\n100 mV:\n</pre>\n<p>Both of these assume a load resistance that is contained in memory <em>Rref</em>, which\nby default is 50 Ohms.</p>\n<p>At start up EC reads and executes commands from files. It first tries \u2018~/.ecrc\u2019\nand runs any commands it contains if it exists. It then tries \u2018./.ecrc\u2019 if it\nexists. Finally it runs any files given on the command line. It is common to put\nyour generic preferences in \u2018~/.exrc\u2019. For example, if your are a physicist with\na desire for high precision results, you might use:</p>\n<pre>eng6\nh 2pi / \"J-s\" =hbar\n</pre>\n<p>This tells EC to use 6 digits of resolution and predefines <em>hbar</em> as a constant.\nThe local start up file (\u2018./.ecrc\u2019) or the file given as a command line argument\nis generally used to give more project specific initializations. For example, in\na directory where you are working on a PLL design you might have an \u2018./.ecrc\u2019\nfile with the following contents:</p>\n<pre>88.3uSiemens =kdet\n9.1G \"Hz/V\" =kvco\n2 =m\n8 =n\n1.4pF =cs\n59.7pF =cp\n2.2kOhms =rz\n</pre>\n<p>EC also takes commands from the command line. For example:</p>\n<pre>$ ec \"125mV 67uV / db\"\n65.417\n</pre>\n<p>EC prints back-quoted strings while interpolating the values of registers and\nvariables when requested. For example:</p>\n<pre>$ ec 'degs 500 1000 rtop \"V/V\" `Gain = $0 @ $1.` quit'\nGain = 1.118 KV/V @ 26.565 degs.\n</pre>\n<p>Normally <em>ec</em> prints the value of the x register and exits when it runs out of\nthings to do.  The <em>quit</em> at the end tells ec to exit immediately. In this way\nthe value of the x register is not printed.  Without it you would see the\nmagnitude printed twice.</p>\n<p>You can define functions with the following syntax: <em>( \u2026 )name</em>, where \u2018(\u2018\nstarts the function definition, \u2018)name\u2019 terminates it, and \u2026 is simply\na collection of calculator actions. For example:</p>\n<pre>0: (2pi * \"rads/s\")to_omega\n0: (2pi / \"Hz\")to_freq\n0: 1.4GHz\n1.4 GHz: to_omega\n8.7965 Grads/s: to_freq\n1.4 GHz:\n</pre>\n<p>You can get a list of the actions available with:</p>\n<pre>0: ?\n</pre>\n<p>You can get help on a specific topic, such as //, with:</p>\n<pre>0: ?//\n</pre>\n<p>You can get a list of the help topics available with:</p>\n<pre>0: help\n</pre>\n<p>There is much more available that what is described here. For more information,\nrun:</p>\n<pre>$ man ec\n</pre>\n<p>You can quit the program using:</p>\n<pre>0: quit\n</pre>\n<p>(or <em>:q</em> or <em>^D</em>).</p>\n<div>\n<div>Enjoy,</div>\n<div>\n<div>-Ken</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7028971, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "1564d4edf2d77cf156cc7d8edff2d922", "sha256": "dad9f98e73a63f13001da62c93ba741f1bcd8eeb9a6a2710147192d43f3c45ab"}, "downloads": -1, "filename": "engineering-calculator-1.1.1.tar.gz", "has_sig": false, "md5_digest": "1564d4edf2d77cf156cc7d8edff2d922", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35445, "upload_time": "2016-05-22T09:09:34", "upload_time_iso_8601": "2016-05-22T09:09:34.379057Z", "url": "https://files.pythonhosted.org/packages/a0/c8/5763fb9cd807c61732e4b4decc23860d213f05a9cccb3cfd5ab00bd8c54a/engineering-calculator-1.1.1.tar.gz", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "5beef62a0e134f5b3692ee959407fb6a", "sha256": "58f8abf2a6ae721bf44a8c2c1909d4fee9a7e70fe00349d912dac248391cd79e"}, "downloads": -1, "filename": "engineering-calculator-1.1.10.tar.gz", "has_sig": false, "md5_digest": "5beef62a0e134f5b3692ee959407fb6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36846, "upload_time": "2016-06-11T07:04:55", "upload_time_iso_8601": "2016-06-11T07:04:55.188583Z", "url": "https://files.pythonhosted.org/packages/14/fc/73f64cda0a4e9ee05f22f2f0cded61c93310345ed5bf16e50d1da43fa75c/engineering-calculator-1.1.10.tar.gz", "yanked": false}], "1.1.11": [{"comment_text": "", "digests": {"md5": "a676a14d4b7ced79f90f9f6943aa23e4", "sha256": "265b4f38c0f28ec00e081a76da754605f208b7923ca52d92bbb41c3c0011238c"}, "downloads": -1, "filename": "engineering-calculator-1.1.11.tar.gz", "has_sig": false, "md5_digest": "a676a14d4b7ced79f90f9f6943aa23e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36850, "upload_time": "2016-06-11T18:53:09", "upload_time_iso_8601": "2016-06-11T18:53:09.538798Z", "url": "https://files.pythonhosted.org/packages/6e/59/d3c0ca8558fb6f1ec7e6e18af1f0facc4723c672e49cdf28a267e9724ee1/engineering-calculator-1.1.11.tar.gz", "yanked": false}], "1.1.12": [{"comment_text": "", "digests": {"md5": "3c77a5c8c9713253913e1970b03445de", "sha256": "c5830c74ccf32d9707ae0d3c0e7b48241afc702629334b9628905a60d18a336e"}, "downloads": -1, "filename": "engineering-calculator-1.1.12.tar.gz", "has_sig": false, "md5_digest": "3c77a5c8c9713253913e1970b03445de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36919, "upload_time": "2016-09-29T08:55:11", "upload_time_iso_8601": "2016-09-29T08:55:11.667144Z", "url": "https://files.pythonhosted.org/packages/5e/58/2871c3a0680d8064d068b762a236e2e327f1e759d97b2fd7e7059af6cb5a/engineering-calculator-1.1.12.tar.gz", "yanked": false}], "1.1.13": [{"comment_text": "", "digests": {"md5": "ea3d74c4511bb185ed1a4eae9a667588", "sha256": "03c84e923a948dad774cb74e7fc3b55e9642b9c1060720df0f35322a4fd36670"}, "downloads": -1, "filename": "engineering-calculator-1.1.13.tar.gz", "has_sig": false, "md5_digest": "ea3d74c4511bb185ed1a4eae9a667588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45288, "upload_time": "2016-09-29T09:02:40", "upload_time_iso_8601": "2016-09-29T09:02:40.701546Z", "url": "https://files.pythonhosted.org/packages/77/34/b793b7d88715fdcec71a4a9a221816d04798bfbaf25b7346226dbe407e50/engineering-calculator-1.1.13.tar.gz", "yanked": false}], "1.1.14": [{"comment_text": "", "digests": {"md5": "139a733ec441e413ee1ffa391a981072", "sha256": "b6da9892c4dd0e359d32bbb56ccbda2527f3144f78476ef27c4b6fab06e4510d"}, "downloads": -1, "filename": "engineering-calculator-1.1.14.tar.gz", "has_sig": false, "md5_digest": "139a733ec441e413ee1ffa391a981072", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45288, "upload_time": "2016-09-29T09:10:38", "upload_time_iso_8601": "2016-09-29T09:10:38.060979Z", "url": "https://files.pythonhosted.org/packages/27/a2/c746565154a189b50d4a62d5861e8435bf6d57c148c2b62fe5cbadc2f1b6/engineering-calculator-1.1.14.tar.gz", "yanked": false}], "1.1.15": [{"comment_text": "", "digests": {"md5": "aac133f2fee8c03a63629e2a05a232a5", "sha256": "5284106328c186d3d57e9a3494670d4c78339709f76df80ecff8a5c6e585aa47"}, "downloads": -1, "filename": "engineering-calculator-1.1.15.tar.gz", "has_sig": false, "md5_digest": "aac133f2fee8c03a63629e2a05a232a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45332, "upload_time": "2016-09-29T09:30:52", "upload_time_iso_8601": "2016-09-29T09:30:52.893645Z", "url": "https://files.pythonhosted.org/packages/ac/92/10cf197aaac374f8632793aab682bc869206c18bd1ad0d43fc299d62ec86/engineering-calculator-1.1.15.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "3c93841f3cff38fac0551eb5c172520d", "sha256": "a869c7b0481794a84c486d2b0bedc84ad6b246265bef076319fc6ea295510c30"}, "downloads": -1, "filename": "engineering-calculator-1.1.5.tar.gz", "has_sig": false, "md5_digest": "3c93841f3cff38fac0551eb5c172520d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35243, "upload_time": "2016-05-22T09:44:06", "upload_time_iso_8601": "2016-05-22T09:44:06.822999Z", "url": "https://files.pythonhosted.org/packages/42/d4/4f6182fe5d2d439a9bf499279b0184eb8ed8ba80665667c8fdabd1c8d1c7/engineering-calculator-1.1.5.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "f1271b49b64894886640cae1b961e2cf", "sha256": "43bd71d421a1bda1f594e8a3bf6051a9af0054c710a63acecc47cc30123e0f65"}, "downloads": -1, "filename": "engineering-calculator-1.1.7.tar.gz", "has_sig": false, "md5_digest": "f1271b49b64894886640cae1b961e2cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36848, "upload_time": "2016-05-25T23:18:43", "upload_time_iso_8601": "2016-05-25T23:18:43.184712Z", "url": "https://files.pythonhosted.org/packages/34/1c/62fb33398545b287bc4d0867a3ec028ab2e686d8caeac4d90501f470cf5f/engineering-calculator-1.1.7.tar.gz", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "966a7b8b1a1b033fe173c7d33254afd3", "sha256": "c2971d5fd0badd317a01df94f1090d48e34bda8633a41fdb46d21273ab518225"}, "downloads": -1, "filename": "engineering-calculator-1.1.9.tar.gz", "has_sig": false, "md5_digest": "966a7b8b1a1b033fe173c7d33254afd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36835, "upload_time": "2016-06-11T06:59:12", "upload_time_iso_8601": "2016-06-11T06:59:12.735465Z", "url": "https://files.pythonhosted.org/packages/c0/00/b2c2950c693453926d5f10d7e0a07ffece5093d2bb76450306f935c8f1f7/engineering-calculator-1.1.9.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "03f72ef321d87975b1a307e5d5369506", "sha256": "af6fc58862733c8530144626d6681f4dda8644330e4a70f044c9819659f07de1"}, "downloads": -1, "filename": "engineering-calculator-1.2.2.tar.gz", "has_sig": false, "md5_digest": "03f72ef321d87975b1a307e5d5369506", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48539, "upload_time": "2016-09-30T08:42:15", "upload_time_iso_8601": "2016-09-30T08:42:15.573579Z", "url": "https://files.pythonhosted.org/packages/5c/b8/883add1073eff1f807ff5d8b74461fb5fbf40158a394fa24497d04935b9c/engineering-calculator-1.2.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "7ca6a7669fc4eb51ef6b63672c923fe5", "sha256": "e01656cb30f5ac9b588e59da2cffbec23295aef3e2d9ea7082d63d87662d198d"}, "downloads": -1, "filename": "engineering-calculator-1.3.0.tar.gz", "has_sig": false, "md5_digest": "7ca6a7669fc4eb51ef6b63672c923fe5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48743, "upload_time": "2016-10-26T12:43:51", "upload_time_iso_8601": "2016-10-26T12:43:51.835508Z", "url": "https://files.pythonhosted.org/packages/97/c3/dad2bc596076bece23f7c978fe07ea0d64a0489d1b2c683a98d8867d71dd/engineering-calculator-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "bb3805d949d8f3cefc39eb6ea13036c0", "sha256": "f30829dbc420d8cba9fbbddfc533504d8bb26e297e571be2ab9ea6b8869fcc4d"}, "downloads": -1, "filename": "engineering-calculator-1.4.0.tar.gz", "has_sig": false, "md5_digest": "bb3805d949d8f3cefc39eb6ea13036c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48842, "upload_time": "2016-11-27T04:53:27", "upload_time_iso_8601": "2016-11-27T04:53:27.563595Z", "url": "https://files.pythonhosted.org/packages/26/e2/40f4301db10c846316d647362ae6f3f2857e40bf3cdf92adae5a33cd348f/engineering-calculator-1.4.0.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "2daf6fda3fd705efc27bb0664e03b6e8", "sha256": "cbd787328e204498041c051087922e2e7292c4de6cb4734e7215a7864f2ee570"}, "downloads": -1, "filename": "engineering-calculator-1.4.2.tar.gz", "has_sig": false, "md5_digest": "2daf6fda3fd705efc27bb0664e03b6e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49326, "upload_time": "2016-12-07T20:48:46", "upload_time_iso_8601": "2016-12-07T20:48:46.566767Z", "url": "https://files.pythonhosted.org/packages/c8/af/d85cf989b22d60c26efd0a0b195e222b2723bf4bce00ea4e865036b8cea2/engineering-calculator-1.4.2.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "51cc37d92d5516227bee4ba67295d4d4", "sha256": "daced6b5243c9c9fa77a27e24617a26bba531c44f83d566b269be9f38bbd60ab"}, "downloads": -1, "filename": "engineering-calculator-1.5.0.tar.gz", "has_sig": false, "md5_digest": "51cc37d92d5516227bee4ba67295d4d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50776, "upload_time": "2017-03-20T02:01:31", "upload_time_iso_8601": "2017-03-20T02:01:31.852971Z", "url": "https://files.pythonhosted.org/packages/40/df/45abd473df2185b9491d702e525faec00f96012ac413db6e7d8fd97debae/engineering-calculator-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "81b158ae07989eb28eef32129a1d6bfb", "sha256": "ce653fbb0211e3200ad34e090cf17b1e283d59f6d94be1d3fbe1c94df0aba81e"}, "downloads": -1, "filename": "engineering-calculator-1.5.1.tar.gz", "has_sig": true, "md5_digest": "81b158ae07989eb28eef32129a1d6bfb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50879, "upload_time": "2017-07-13T19:48:02", "upload_time_iso_8601": "2017-07-13T19:48:02.835368Z", "url": "https://files.pythonhosted.org/packages/91/2c/a20bab0d25faefafa419427c4c48159ba4e48893f7298a0f3f51e5207205/engineering-calculator-1.5.1.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "fe538b039456f17459727b593a40003e", "sha256": "c5044b8e003d3b7ad050084e4bc3742809ae1d1fb89c132bc0aa9a64434cff97"}, "downloads": -1, "filename": "engineering-calculator-1.6.0.tar.gz", "has_sig": false, "md5_digest": "fe538b039456f17459727b593a40003e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41508, "upload_time": "2020-04-16T02:49:14", "upload_time_iso_8601": "2020-04-16T02:49:14.595996Z", "url": "https://files.pythonhosted.org/packages/6c/9e/d6242334727bf506c270ee38004f9a847a8af6087fe869bca17169b35d51/engineering-calculator-1.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe538b039456f17459727b593a40003e", "sha256": "c5044b8e003d3b7ad050084e4bc3742809ae1d1fb89c132bc0aa9a64434cff97"}, "downloads": -1, "filename": "engineering-calculator-1.6.0.tar.gz", "has_sig": false, "md5_digest": "fe538b039456f17459727b593a40003e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41508, "upload_time": "2020-04-16T02:49:14", "upload_time_iso_8601": "2020-04-16T02:49:14.595996Z", "url": "https://files.pythonhosted.org/packages/6c/9e/d6242334727bf506c270ee38004f9a847a8af6087fe869bca17169b35d51/engineering-calculator-1.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:21 2020"}