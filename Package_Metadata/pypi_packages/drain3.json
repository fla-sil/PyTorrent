{"info": {"author": "IBM Research Haifa", "author_email": "drain3@il.ibm.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries"], "description": "# Drain3\n## Introduction\n\nDrain3 is an online log template miner that can extract templates (clusters) from a stream of log messages\nin a timely manner. It employs a parse tree with fixed depth to guide the log group search process, \nwhich effectively avoids constructing a very deep and unbalanced tree.\n\nDrain3 continuously learns on-the-fly and automatically extracts \"log templates\" from raw log entries. \n\n#### Example:\n \nFor the input:\n\n```\nconnected to 10.0.0.1\nconnected to 10.0.0.2\nconnected to 10.0.0.3\nHex number 0xDEADBEAF\nHex number 0x10000\nuser davidoh logged in\nuser eranr logged in\n```\n\nDrain3 extracts the following templates:\n\n```\nA0001 (size 3): connected to <IP>\nA0002 (size 2): Hex number <HEX>\nA0003 (size 2): user <*> logged in\n```\n\nThis project is an upgrade of the original [Drain](https://github.com/logpai/logparser/blob/master/logparser/Drain) \nproject by LogPAI from Python 2.7 to Python 3.6 or later with some bug-fixes and additional features.\n\nRead more information about Drain from the following paper:\n\n- Pinjia He, Jieming Zhu, Zibin Zheng, and Michael R. Lyu. [Drain: An Online Log Parsing Approach with Fixed Depth Tree](http://jmzhu.logpai.com/pub/pjhe_icws2017.pdf), Proceedings of the 24th International Conference on Web Services (ICWS), 2017.\n\n\n#### New features\n \n- **Persistence**. Save and load Drain state into an [Apache Kafka](https://kafka.apache.org) topic or a file.\n- **Streaming**. Support feeding Drain with messages one-be-one.\n- **Masking**. Replace some message parts (e.g numbers, IPs, emails) with wildcards. This improves the accuracy of template mining.\n- **Packaging**. As a pip package. \n\n#### Expected Input and Output\n\nThe input for Drain3 is the unstructured free-text portion log messages. It is recommended to extract \nstructured headers like timestamp, hostname. severity, etc.. from log messages before passing to Drain3, \nin order to improve mining accuracy.  \n\nThe output is a dictionary with the following fields:\n- `change_type`: indicates either if a new template was identified, an existing template was changed or message added to an existing cluster. \n- `cluster_id`: Sequential ID of the cluster that the log belongs to, for example, `A0008`\n- `cluster_size`: The size (message count) of the cluster that the log belongs to\n- `cluster_count`: Count clusters seen so far\n- `template_mined`: the last template of above cluster_id\n\nTemplates may change over time based on input, for example:\n\n```\naa aa aa\n{\"change_type\": \"cluster_created\", \"cluster_id\": \"A0001\", \"cluster_size\": 1, \"template_mined\": \"aa aa aa\", \"cluster_count\": 1}\n\naa aa ab\n{\"change_type\": \"cluster_template_changed\", \"cluster_id\": \"A0001\", \"cluster_size\": 2, \"template_mined\": \"aa aa <*>\", \"cluster_count\": 1}\n```\n\n**Explanation:** *Drain3 learned that the third token is a parameter*\n\n## Configuration\n\nDrain3 is configured using [configparser](https://docs.python.org/3.4/library/configparser.html) using file `drain3.ini` available parameters are:\n- `[DEFAULT]/snapshot_poll_timeout_sec` - maximum timeout for restoring snapshot from Kafka (default 60)\n- `[DEFAULT]/sim_th` - recognition threshold (default 0.4)\n- `[DEFAULT]/masking` - parameters masking - in json format (default \"\")\n- `[DEFAULT]/snapshot_interval_minutes` - interval for new snapshots (default 1)\n- `[DEFAULT]/compress_state` - whether to compress the state before saving it. This can be useful when using Kafka persistence. \n\n## Masking\n\nThis feature allows masking of specific parameters in log message to specific keywords. Use a list of regular expression  \ndictionaries in the configuration file with the format {'regex_pattern', 'mask_with'} to set custom masking.\n\nIn order to mask an IP address created the file `drain3.ini` :\n\n```\n[DEFAULT]\nmasking = [\n    {\"regex_pattern\":\"((?<=[^A-Za-z0-9])|^)(\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})((?=[^A-Za-z0-9])|$)\", \"mask_with\": \"IP\"},\n    ]\n```\n\nNow, Drain3 recognizes IP addresses in templates, for example with input such as:\n```\nIP is 12.12.12.12\n{\"change_type\": \"cluster_created\", \"cluster_id\": \"A0013\", \"cluster_size\": 1, \"template_mined\": \"IP is <IP>\", \"cluster_count\": 13}\n```\n\nNote: template parameters that do not match custom masking are output as <*>\n\n## Persistence:\nThe persistence feature saves and loads a snapshot of Drain3 state in (compressed) json format. This feature adds restart resiliency\nto Drain allowing continuation of activity and knowledge across restarts.\n\nDrain3 state includes the search tree and all the clusters that were identified up until snapshot time.\n\nThe snapshot also persist number of occurrences per cluster, and the cluster_id.\n\nAn example of a snapshot:\n```\n{\"clusters\": [{\"cluster_id\": \"A0001\", \"log_template_tokens\": `[\"aa\", \"aa\", \"<\\*>\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 2}, {\"cluster_id\": \"A0002\", \"log_template_tokens\": `[\"My\", \"IP\", \"is\", \"<IP>\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 1}]...\n```\n\nThis example snapshot persist two clusters with the templates:\n\n> `[\"aa\", \"aa\", \"<\\*>\"]` - occurs twice\n>\n>  `[\"My\", \"IP\", \"is\", \"<IP>\"]` - occurs once\n\nSnapshots are created in the following events:\n\n- `cluster_created` - in any new template\n- `cluster_template_changed` - in any update of a template\n- `periodic` - after n minutes from the last snapshot. This is intended to save cluster sizes even if no new template was identified.  \n\nDrain3 supports two persistence methods:\n\n- **Kafka** - The snapshot is saved in a dedicated topic used only for snapshots - the last message in this topic \nis the last snapshot that will be loaded after restart.\nFor Kafka persistence, you need to provide: `topic_name` and `server_name`. \n\n- **File** - The snapshot is saved to a file.\n\n\n## Installation\n\nDrain3 is available from pypi. To install use `pip`:\n\n```pip3 install drain3```\n\n\n## Examples\n\nRun from the root folder of the repository: \n\n```\npython -m examples.drain_stdin_demo\n```\n\nUse Drain3 with input from stdin and persist to either Kafka / file / no persistence.\n\nEnter several log lines using the command line. Press `q` to end execution.\n\nChange `persistence_type` variable in the example to change persistence mode.\n\nAn example drain3.ini file with masking instructions exists in the `examples` folder.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/IBM/Drain3/archive/v_01.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IBM/Drain3", "keywords": "drain,log,parser,IBM", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "drain3", "package_url": "https://pypi.org/project/drain3/", "platform": "", "project_url": "https://pypi.org/project/drain3/", "project_urls": {"Download": "https://github.com/IBM/Drain3/archive/v_01.tar.gz", "Homepage": "https://github.com/IBM/Drain3"}, "release_url": "https://pypi.org/project/drain3/0.7.2/", "requires_dist": null, "requires_python": "", "summary": "persistent log parser", "version": "0.7.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Drain3</h1>\n<h2>Introduction</h2>\n<p>Drain3 is an online log template miner that can extract templates (clusters) from a stream of log messages\nin a timely manner. It employs a parse tree with fixed depth to guide the log group search process,\nwhich effectively avoids constructing a very deep and unbalanced tree.</p>\n<p>Drain3 continuously learns on-the-fly and automatically extracts \"log templates\" from raw log entries.</p>\n<h4>Example:</h4>\n<p>For the input:</p>\n<pre><code>connected to 10.0.0.1\nconnected to 10.0.0.2\nconnected to 10.0.0.3\nHex number 0xDEADBEAF\nHex number 0x10000\nuser davidoh logged in\nuser eranr logged in\n</code></pre>\n<p>Drain3 extracts the following templates:</p>\n<pre><code>A0001 (size 3): connected to &lt;IP&gt;\nA0002 (size 2): Hex number &lt;HEX&gt;\nA0003 (size 2): user &lt;*&gt; logged in\n</code></pre>\n<p>This project is an upgrade of the original <a href=\"https://github.com/logpai/logparser/blob/master/logparser/Drain\" rel=\"nofollow\">Drain</a>\nproject by LogPAI from Python 2.7 to Python 3.6 or later with some bug-fixes and additional features.</p>\n<p>Read more information about Drain from the following paper:</p>\n<ul>\n<li>Pinjia He, Jieming Zhu, Zibin Zheng, and Michael R. Lyu. <a href=\"http://jmzhu.logpai.com/pub/pjhe_icws2017.pdf\" rel=\"nofollow\">Drain: An Online Log Parsing Approach with Fixed Depth Tree</a>, Proceedings of the 24th International Conference on Web Services (ICWS), 2017.</li>\n</ul>\n<h4>New features</h4>\n<ul>\n<li><strong>Persistence</strong>. Save and load Drain state into an <a href=\"https://kafka.apache.org\" rel=\"nofollow\">Apache Kafka</a> topic or a file.</li>\n<li><strong>Streaming</strong>. Support feeding Drain with messages one-be-one.</li>\n<li><strong>Masking</strong>. Replace some message parts (e.g numbers, IPs, emails) with wildcards. This improves the accuracy of template mining.</li>\n<li><strong>Packaging</strong>. As a pip package.</li>\n</ul>\n<h4>Expected Input and Output</h4>\n<p>The input for Drain3 is the unstructured free-text portion log messages. It is recommended to extract\nstructured headers like timestamp, hostname. severity, etc.. from log messages before passing to Drain3,\nin order to improve mining accuracy.</p>\n<p>The output is a dictionary with the following fields:</p>\n<ul>\n<li><code>change_type</code>: indicates either if a new template was identified, an existing template was changed or message added to an existing cluster.</li>\n<li><code>cluster_id</code>: Sequential ID of the cluster that the log belongs to, for example, <code>A0008</code></li>\n<li><code>cluster_size</code>: The size (message count) of the cluster that the log belongs to</li>\n<li><code>cluster_count</code>: Count clusters seen so far</li>\n<li><code>template_mined</code>: the last template of above cluster_id</li>\n</ul>\n<p>Templates may change over time based on input, for example:</p>\n<pre><code>aa aa aa\n{\"change_type\": \"cluster_created\", \"cluster_id\": \"A0001\", \"cluster_size\": 1, \"template_mined\": \"aa aa aa\", \"cluster_count\": 1}\n\naa aa ab\n{\"change_type\": \"cluster_template_changed\", \"cluster_id\": \"A0001\", \"cluster_size\": 2, \"template_mined\": \"aa aa &lt;*&gt;\", \"cluster_count\": 1}\n</code></pre>\n<p><strong>Explanation:</strong> <em>Drain3 learned that the third token is a parameter</em></p>\n<h2>Configuration</h2>\n<p>Drain3 is configured using <a href=\"https://docs.python.org/3.4/library/configparser.html\" rel=\"nofollow\">configparser</a> using file <code>drain3.ini</code> available parameters are:</p>\n<ul>\n<li><code>[DEFAULT]/snapshot_poll_timeout_sec</code> - maximum timeout for restoring snapshot from Kafka (default 60)</li>\n<li><code>[DEFAULT]/sim_th</code> - recognition threshold (default 0.4)</li>\n<li><code>[DEFAULT]/masking</code> - parameters masking - in json format (default \"\")</li>\n<li><code>[DEFAULT]/snapshot_interval_minutes</code> - interval for new snapshots (default 1)</li>\n<li><code>[DEFAULT]/compress_state</code> - whether to compress the state before saving it. This can be useful when using Kafka persistence.</li>\n</ul>\n<h2>Masking</h2>\n<p>This feature allows masking of specific parameters in log message to specific keywords. Use a list of regular expression<br>\ndictionaries in the configuration file with the format {'regex_pattern', 'mask_with'} to set custom masking.</p>\n<p>In order to mask an IP address created the file <code>drain3.ini</code> :</p>\n<pre><code>[DEFAULT]\nmasking = [\n    {\"regex_pattern\":\"((?&lt;=[^A-Za-z0-9])|^)(\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3})((?=[^A-Za-z0-9])|$)\", \"mask_with\": \"IP\"},\n    ]\n</code></pre>\n<p>Now, Drain3 recognizes IP addresses in templates, for example with input such as:</p>\n<pre><code>IP is 12.12.12.12\n{\"change_type\": \"cluster_created\", \"cluster_id\": \"A0013\", \"cluster_size\": 1, \"template_mined\": \"IP is &lt;IP&gt;\", \"cluster_count\": 13}\n</code></pre>\n<p>Note: template parameters that do not match custom masking are output as &lt;*&gt;</p>\n<h2>Persistence:</h2>\n<p>The persistence feature saves and loads a snapshot of Drain3 state in (compressed) json format. This feature adds restart resiliency\nto Drain allowing continuation of activity and knowledge across restarts.</p>\n<p>Drain3 state includes the search tree and all the clusters that were identified up until snapshot time.</p>\n<p>The snapshot also persist number of occurrences per cluster, and the cluster_id.</p>\n<p>An example of a snapshot:</p>\n<pre><code>{\"clusters\": [{\"cluster_id\": \"A0001\", \"log_template_tokens\": `[\"aa\", \"aa\", \"&lt;\\*&gt;\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 2}, {\"cluster_id\": \"A0002\", \"log_template_tokens\": `[\"My\", \"IP\", \"is\", \"&lt;IP&gt;\"]`, \"py/object\": \"drain3_core.LogCluster\", \"size\": 1}]...\n</code></pre>\n<p>This example snapshot persist two clusters with the templates:</p>\n<blockquote>\n<p><code>[\"aa\", \"aa\", \"&lt;\\*&gt;\"]</code> - occurs twice</p>\n<p><code>[\"My\", \"IP\", \"is\", \"&lt;IP&gt;\"]</code> - occurs once</p>\n</blockquote>\n<p>Snapshots are created in the following events:</p>\n<ul>\n<li><code>cluster_created</code> - in any new template</li>\n<li><code>cluster_template_changed</code> - in any update of a template</li>\n<li><code>periodic</code> - after n minutes from the last snapshot. This is intended to save cluster sizes even if no new template was identified.</li>\n</ul>\n<p>Drain3 supports two persistence methods:</p>\n<ul>\n<li>\n<p><strong>Kafka</strong> - The snapshot is saved in a dedicated topic used only for snapshots - the last message in this topic\nis the last snapshot that will be loaded after restart.\nFor Kafka persistence, you need to provide: <code>topic_name</code> and <code>server_name</code>.</p>\n</li>\n<li>\n<p><strong>File</strong> - The snapshot is saved to a file.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Drain3 is available from pypi. To install use <code>pip</code>:</p>\n<p><code>pip3 install drain3</code></p>\n<h2>Examples</h2>\n<p>Run from the root folder of the repository:</p>\n<pre><code>python -m examples.drain_stdin_demo\n</code></pre>\n<p>Use Drain3 with input from stdin and persist to either Kafka / file / no persistence.</p>\n<p>Enter several log lines using the command line. Press <code>q</code> to end execution.</p>\n<p>Change <code>persistence_type</code> variable in the example to change persistence mode.</p>\n<p>An example drain3.ini file with masking instructions exists in the <code>examples</code> folder.</p>\n\n          </div>"}, "last_serial": 6866256, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "f84e37e02d486adf4fd5be92ce03409c", "sha256": "13c1445d494f0d9795880d407dda9c9e58293ec475fc5c58f5a2e69efc23d516"}, "downloads": -1, "filename": "drain3-0.5.tar.gz", "has_sig": false, "md5_digest": "f84e37e02d486adf4fd5be92ce03409c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10104, "upload_time": "2020-03-17T07:59:05", "upload_time_iso_8601": "2020-03-17T07:59:05.964192Z", "url": "https://files.pythonhosted.org/packages/06/56/5842187d7f19069ca4197d1ff12c5215ca61d71b3dc1bb4e8cb300fb3bc6/drain3-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "88e06ec691bb23dbf49b3645cc0e24e8", "sha256": "f8d8d4e5ad0de840dc31dcab7ef26fafd1a8415d44d07f591e9db4ac13867302"}, "downloads": -1, "filename": "drain3-0.6.tar.gz", "has_sig": false, "md5_digest": "88e06ec691bb23dbf49b3645cc0e24e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10089, "upload_time": "2020-03-17T13:49:06", "upload_time_iso_8601": "2020-03-17T13:49:06.690704Z", "url": "https://files.pythonhosted.org/packages/4b/60/44ad3676781b2119ce6c2365c207cd977dffe873d0f0fec131123ab2dba2/drain3-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "dbedb473d5e9d000bec8fc572a6fec22", "sha256": "302c2cc72b9b648e0da284be6ff888d201b98bffe38a6b33da84f4b44237b814"}, "downloads": -1, "filename": "drain3-0.7.tar.gz", "has_sig": false, "md5_digest": "dbedb473d5e9d000bec8fc572a6fec22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8499, "upload_time": "2020-03-23T14:08:10", "upload_time_iso_8601": "2020-03-23T14:08:10.691266Z", "url": "https://files.pythonhosted.org/packages/38/a7/276c4094a055832aa0115358660a56840bb21f519f95a09f0e3ff45529b2/drain3-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "78ccd1eaf91ec42db8666aabf5179638", "sha256": "a1016072ac1432e9218569b71ebf8279a5bc5ccf858bd0ac447194c02d19207e"}, "downloads": -1, "filename": "drain3-0.7.1.tar.gz", "has_sig": false, "md5_digest": "78ccd1eaf91ec42db8666aabf5179638", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8458, "upload_time": "2020-03-23T14:27:59", "upload_time_iso_8601": "2020-03-23T14:27:59.880435Z", "url": "https://files.pythonhosted.org/packages/c9/9a/8dbfd3fa5b7a42f7d6b3adc3dd2b58c30c2e83cc901791f29c517d8f8708/drain3-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "634eb765f3129af64abbb0eda2482427", "sha256": "f315e33b7f168d2d311631c649bb0de3ad6f0e64ee52df3a5432fb3a8cd30c6c"}, "downloads": -1, "filename": "drain3-0.7.2.tar.gz", "has_sig": false, "md5_digest": "634eb765f3129af64abbb0eda2482427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8503, "upload_time": "2020-03-23T15:31:28", "upload_time_iso_8601": "2020-03-23T15:31:28.236114Z", "url": "https://files.pythonhosted.org/packages/2c/b3/a1502b9bde86b2ab2ca3c6a04c72f60237c7c2253145bd9c69d2c6fb4136/drain3-0.7.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "634eb765f3129af64abbb0eda2482427", "sha256": "f315e33b7f168d2d311631c649bb0de3ad6f0e64ee52df3a5432fb3a8cd30c6c"}, "downloads": -1, "filename": "drain3-0.7.2.tar.gz", "has_sig": false, "md5_digest": "634eb765f3129af64abbb0eda2482427", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8503, "upload_time": "2020-03-23T15:31:28", "upload_time_iso_8601": "2020-03-23T15:31:28.236114Z", "url": "https://files.pythonhosted.org/packages/2c/b3/a1502b9bde86b2ab2ca3c6a04c72f60237c7c2253145bd9c69d2c6fb4136/drain3-0.7.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:53 2020"}