{"info": {"author": "Antoine Dauptain", "author_email": "coop@cerfacs.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Tiny 3D Engine\n\n![logo](http://cerfacs.fr/coop/whatwedo/logo_tiny3dengine.gif)\n\nThis package is a python 3D engine based on the Tkinter Canvas.\nIt uses Numpy for math handling.\n\n*It is available on [pipy](https://pypi.org/project/tiny-3d-engine/), \ndocumentation is on [readtthedocs](https://tiny-3d-engine.readthedocs.io/en/latest/), sources are mirrored on [gitlab.com](https://gitlab.com/cerfacs/tiny_3d_engine)*\n\nInstall this using \n\n```bash\npip install tiny_3d_engine\n```\n\n\nIt create simle 3D rendering for `bars`, `tri` and `quad` elements and store the scenes in Ensight's ASCII `.geo`format.\nA trivial square would look like:\n\n![trivial_example](http://cerfacs.fr/coop/whatwedo/example_t3e.png)\n\n## example\n\nIn the following example, two squares are appended to an initially void **Scene3D** object.\n\n- The first, in blue, is made of edges (2 vertices connectivity)\n- The second, in red, is made od squares (4 vertices connectivity)\n\nThis scene is passed to the **Engine3D** object, triggering a window.\n\n```python\nfrom tiny_3d_engine import (Scene3D, Engine3D)\n\nscene = Scene3D()\n\nSIZE = 2\nLENGTH= 200.\npoints = list()\nconn = list()\ndx = LENGTH/\n\nfor i in range(SIZE):\n    for j in range(SIZE):\n        index = len(points)\n        points.append([i*dx, j*dx, 0])\n        points.append([(i+1)*dx, j*dx, 0])\n        points.append([i*dx, (j+1)*dx, 0])\n        points.append([(i+1)*dx, (j+1)*dx, 0])\n        #conn.append([index, index+1, index+2])\n        #conn.append([index+3, index+1, index+2])\n        conn.append([index, index+1])\n        conn.append([index+3, index+1])\nscene.add_or_update_part(\"square1\", points, conn, color=\"#0000ff\")\n\npoints = list()\nconn = list()\nfor i in range(SIZE):\n    for j in range(SIZE):\n        index = len(points)\n        points.append([i*dx, j*dx, LENGTH])\n        points.append([(i+1)*dx, j*dx, LENGTH])\n        points.append([i*dx, (j+1)*dx, LENGTH])\n        points.append([(i+1)*dx, (j+1)*dx, LENGTH])\n        conn.append([index, index+1, index+3, index+2])\nscene.add_or_update_part(\"square2\", points, conn, color=\"#ff0000\")\n\ntest = Engine3D(scene)\ntest.rotate(\"x\", 45)\ntest.rotate(\"y\", 45)\ntest.render()\n#test.bench_speed()\ntest.mainloop()\n\n```\n\n## requirements\n\nThe present library require Numpy and Tkinter. \nThe Tk aspects are limited to the **screen** object.\nIn the future I might write extensions for PyQT4 Canvas or Matplotlib... or not.\n\n## origin\n\nIt is a mix between a Pure Tcl/Tk Engine of mine [pureTK 3d engine](https://gitlab.com/cerfacs/opentea/blob/1.7/c3sm/create_viewer3d.tcl) and the the pyEngine3D-master of [henryHaefliger](https://github.com/hnhaefliger)[pyEngine3D](https://github.com/hnhaefliger/PyEngine3D) , because I really liked the API.\n\nThe present one allow several parts to be loaded, and uses numpy.\nScenes can be dumped or read from the Ensight .case/.geo files.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cerfacs.fr/coop/", "keywords": "3D,python,Tkinter", "license": "CeCILL-B FREE SOFTWARE LICENSE AGREEMENT", "maintainer": "", "maintainer_email": "", "name": "tiny-3d-engine", "package_url": "https://pypi.org/project/tiny-3d-engine/", "platform": "", "project_url": "https://pypi.org/project/tiny-3d-engine/", "project_urls": {"Homepage": "http://cerfacs.fr/coop/"}, "release_url": "https://pypi.org/project/tiny-3d-engine/0.1.0/", "requires_dist": ["numpy"], "requires_python": "", "summary": "Open Source tiny 3D engine for tkinter", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tiny 3D Engine</h1>\n<p><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47851005278f69c4a08d2da99cffd6650c113064/687474703a2f2f636572666163732e66722f636f6f702f776861747765646f2f6c6f676f5f74696e793364656e67696e652e676966\"></p>\n<p>This package is a python 3D engine based on the Tkinter Canvas.\nIt uses Numpy for math handling.</p>\n<p><em>It is available on <a href=\"https://pypi.org/project/tiny-3d-engine/\" rel=\"nofollow\">pipy</a>,\ndocumentation is on <a href=\"https://tiny-3d-engine.readthedocs.io/en/latest/\" rel=\"nofollow\">readtthedocs</a>, sources are mirrored on <a href=\"https://gitlab.com/cerfacs/tiny_3d_engine\" rel=\"nofollow\">gitlab.com</a></em></p>\n<p>Install this using</p>\n<pre>pip install tiny_3d_engine\n</pre>\n<p>It create simle 3D rendering for <code>bars</code>, <code>tri</code> and <code>quad</code> elements and store the scenes in Ensight's ASCII <code>.geo</code>format.\nA trivial square would look like:</p>\n<p><img alt=\"trivial_example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b83ef5d2d03d463445db2a0a963e951c58b5ea4/687474703a2f2f636572666163732e66722f636f6f702f776861747765646f2f6578616d706c655f7433652e706e67\"></p>\n<h2>example</h2>\n<p>In the following example, two squares are appended to an initially void <strong>Scene3D</strong> object.</p>\n<ul>\n<li>The first, in blue, is made of edges (2 vertices connectivity)</li>\n<li>The second, in red, is made od squares (4 vertices connectivity)</li>\n</ul>\n<p>This scene is passed to the <strong>Engine3D</strong> object, triggering a window.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tiny_3d_engine</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Scene3D</span><span class=\"p\">,</span> <span class=\"n\">Engine3D</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">Scene3D</span><span class=\"p\">()</span>\n\n<span class=\"n\">SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">LENGTH</span><span class=\"o\">=</span> <span class=\"mf\">200.</span>\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"n\">LENGTH</span><span class=\"o\">/</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">):</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"c1\">#conn.append([index, index+1, index+2])</span>\n        <span class=\"c1\">#conn.append([index+3, index+1, index+2])</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add_or_update_part</span><span class=\"p\">(</span><span class=\"s2\">\"square1\"</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"#0000ff\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">SIZE</span><span class=\"p\">):</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">LENGTH</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">LENGTH</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">LENGTH</span><span class=\"p\">])</span>\n        <span class=\"n\">points</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">LENGTH</span><span class=\"p\">])</span>\n        <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add_or_update_part</span><span class=\"p\">(</span><span class=\"s2\">\"square2\"</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"#ff0000\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">Engine3D</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">)</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">)</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">()</span>\n<span class=\"c1\">#test.bench_speed()</span>\n<span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">mainloop</span><span class=\"p\">()</span>\n</pre>\n<h2>requirements</h2>\n<p>The present library require Numpy and Tkinter.\nThe Tk aspects are limited to the <strong>screen</strong> object.\nIn the future I might write extensions for PyQT4 Canvas or Matplotlib... or not.</p>\n<h2>origin</h2>\n<p>It is a mix between a Pure Tcl/Tk Engine of mine <a href=\"https://gitlab.com/cerfacs/opentea/blob/1.7/c3sm/create_viewer3d.tcl\" rel=\"nofollow\">pureTK 3d engine</a> and the the pyEngine3D-master of <a href=\"https://github.com/hnhaefliger\" rel=\"nofollow\">henryHaefliger</a><a href=\"https://github.com/hnhaefliger/PyEngine3D\" rel=\"nofollow\">pyEngine3D</a> , because I really liked the API.</p>\n<p>The present one allow several parts to be loaded, and uses numpy.\nScenes can be dumped or read from the Ensight .case/.geo files.</p>\n\n          </div>"}, "last_serial": 7027744, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "982f3f69c157a035e56bf63c92364408", "sha256": "9eb0f72c8cb48403e52e24c5738e2ea3f98f21194075ea3df9308bb9f1ef4f1a"}, "downloads": -1, "filename": "tiny_3d_engine-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "982f3f69c157a035e56bf63c92364408", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19352, "upload_time": "2020-02-03T10:05:28", "upload_time_iso_8601": "2020-02-03T10:05:28.227012Z", "url": "https://files.pythonhosted.org/packages/ce/fa/77ba11be0222679fd46d668275a52fbabc472947ebf8f0e80d9bd149b519/tiny_3d_engine-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e83c96d73bba33ae0e5b1a006ebccddf", "sha256": "2d33570175b1490e4cc1e5861be92734fae259a9e3b8f925d42348acc17f04cf"}, "downloads": -1, "filename": "tiny_3d_engine-0.0.0.tar.gz", "has_sig": false, "md5_digest": "e83c96d73bba33ae0e5b1a006ebccddf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10268, "upload_time": "2020-02-03T10:05:30", "upload_time_iso_8601": "2020-02-03T10:05:30.655626Z", "url": "https://files.pythonhosted.org/packages/ec/e7/685a38b031a0737b1e22e4108afd0c60116680b0beeed534d9ec685b69b3/tiny_3d_engine-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "957c4ccf7488211c0ed424533e14e5b4", "sha256": "2a185ed59891512cbb52100a95738c7af972abf919b6ccc954fbc0b0835500a9"}, "downloads": -1, "filename": "tiny_3d_engine-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "957c4ccf7488211c0ed424533e14e5b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21455, "upload_time": "2020-04-15T21:54:49", "upload_time_iso_8601": "2020-04-15T21:54:49.315571Z", "url": "https://files.pythonhosted.org/packages/4d/3c/85b56472487b5b515a8c2dd1fc78af4c258a5c5932102e12bead52d5f4ad/tiny_3d_engine-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "531755f1c4f6b64b75e03a14f406a754", "sha256": "2d413daf3bd1e66ab2b8dac8c17bdc83506eb7f31ab1b5a3579b953dea8e43e0"}, "downloads": -1, "filename": "tiny_3d_engine-0.1.0.tar.gz", "has_sig": false, "md5_digest": "531755f1c4f6b64b75e03a14f406a754", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11867, "upload_time": "2020-04-15T21:54:51", "upload_time_iso_8601": "2020-04-15T21:54:51.092990Z", "url": "https://files.pythonhosted.org/packages/dc/3b/faba43435ed15732961f4af47cb476a8fcd14bdc1b539c8e13bf2eb827eb/tiny_3d_engine-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "957c4ccf7488211c0ed424533e14e5b4", "sha256": "2a185ed59891512cbb52100a95738c7af972abf919b6ccc954fbc0b0835500a9"}, "downloads": -1, "filename": "tiny_3d_engine-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "957c4ccf7488211c0ed424533e14e5b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21455, "upload_time": "2020-04-15T21:54:49", "upload_time_iso_8601": "2020-04-15T21:54:49.315571Z", "url": "https://files.pythonhosted.org/packages/4d/3c/85b56472487b5b515a8c2dd1fc78af4c258a5c5932102e12bead52d5f4ad/tiny_3d_engine-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "531755f1c4f6b64b75e03a14f406a754", "sha256": "2d413daf3bd1e66ab2b8dac8c17bdc83506eb7f31ab1b5a3579b953dea8e43e0"}, "downloads": -1, "filename": "tiny_3d_engine-0.1.0.tar.gz", "has_sig": false, "md5_digest": "531755f1c4f6b64b75e03a14f406a754", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11867, "upload_time": "2020-04-15T21:54:51", "upload_time_iso_8601": "2020-04-15T21:54:51.092990Z", "url": "https://files.pythonhosted.org/packages/dc/3b/faba43435ed15732961f4af47cb476a8fcd14bdc1b539c8e13bf2eb827eb/tiny_3d_engine-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:08 2020"}