{"info": {"author": "Bruno Beltran", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Fortran", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Physics"], "description": "# WormLike Chain SIMulator\n\n[![Build Status](https://travis-ci.org/brunobeltran/wlcsim.svg?branch=master)](https://travis-ci.org/brunobeltran/wlcsim)\n\nThis code is designed to efficiently simulate the wormlike chain polymer model\nusing various coarse-grainings where applicable.\n\nFor very stiff polymers, the usual wormlike chain is simulated.\n\nFor relatively more flexible polymers, the \"stretchable, shearable\" chain is\nused.\n\nFor *VERY* stretchable polymers, a purely Gaussian chain is used.\n\n## To Run\n\nSimply typing ``make`` in the top level directory will build the simulator\nfrom source. The executable created (``wlcsim.exe``) will use the parameters in\nthe file ``input/input`` and write its output to the ``data`` directory.\nDescriptions of the available parameters can be found at their definitions and\nwhere they are read in ``src/wlcsim/params.f03``. Example input files are\nusually more useful, and can be found in the ``input`` directory.\nTo force a rerun without having to manually delete all the old output files, you\ncan also simply type ``make run`` at any time.\n\nThere are several ways to easily visualize simulation output. There are PyMol\nscripts in the ``vizualization`` directory, ``python -m wlcsim.plot_wlcsim``\nfrom the repo's top level directory will launch a GUI designed to visualize BD\nsimulations, and one can of course simply use the output in the ``data``\ndirectory, which contains rank two arrays of shape\n``num_beads*num_polymers-by-3``, with one file per time point. By default,\nspecifying multiple polymers just simulates them in parallel in the same\nreaction volume, no interactions are assumed.\n\nTo scan parameters, the Python script ``scan_wlcsim.py`` should be used. It takes\ncare of saving the current git commit\\_hash, all inputs, etc. into a unique\ndirectory, and preventing race conditions even on shared filesystems, among\nother things.\n\n## Disclaimer\n\nThis codebase is internal to the Spakowitz lab and is not guaranteed to be\nbug-free at any point. For battle-tested versions of our software, please see\nthe links in the relevant papers.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SpakowitzLab/BasicWLC", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wlcsim", "package_url": "https://pypi.org/project/wlcsim/", "platform": "", "project_url": "https://pypi.org/project/wlcsim/", "project_urls": {"Homepage": "https://github.com/SpakowitzLab/BasicWLC"}, "release_url": "https://pypi.org/project/wlcsim/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># WormLike Chain SIMulator</p>\n<p>[![Build Status](<a href=\"https://travis-ci.org/brunobeltran/wlcsim.svg?branch=master)%5D(https://travis-ci.org/brunobeltran/wlcsim\" rel=\"nofollow\">https://travis-ci.org/brunobeltran/wlcsim.svg?branch=master)](https://travis-ci.org/brunobeltran/wlcsim</a>)</p>\n<p>This code is designed to efficiently simulate the wormlike chain polymer model\nusing various coarse-grainings where applicable.</p>\n<p>For very stiff polymers, the usual wormlike chain is simulated.</p>\n<p>For relatively more flexible polymers, the \u201cstretchable, shearable\u201d chain is\nused.</p>\n<p>For <em>VERY</em> stretchable polymers, a purely Gaussian chain is used.</p>\n<p>## To Run</p>\n<p>Simply typing <tt>make</tt> in the top level directory will build the simulator\nfrom source. The executable created (<tt>wlcsim.exe</tt>) will use the parameters in\nthe file <tt>input/input</tt> and write its output to the <tt>data</tt> directory.\nDescriptions of the available parameters can be found at their definitions and\nwhere they are read in <tt>src/wlcsim/params.f03</tt>. Example input files are\nusually more useful, and can be found in the <tt>input</tt> directory.\nTo force a rerun without having to manually delete all the old output files, you\ncan also simply type <tt>make run</tt> at any time.</p>\n<p>There are several ways to easily visualize simulation output. There are PyMol\nscripts in the <tt>vizualization</tt> directory, <tt>python <span class=\"pre\">-m</span> wlcsim.plot_wlcsim</tt>\nfrom the repo\u2019s top level directory will launch a GUI designed to visualize BD\nsimulations, and one can of course simply use the output in the <tt>data</tt>\ndirectory, which contains rank two arrays of shape\n<tt><span class=\"pre\">num_beads*num_polymers-by-3</span></tt>, with one file per time point. By default,\nspecifying multiple polymers just simulates them in parallel in the same\nreaction volume, no interactions are assumed.</p>\n<p>To scan parameters, the Python script <tt>scan_wlcsim.py</tt> should be used. It takes\ncare of saving the current git commit_hash, all inputs, etc. into a unique\ndirectory, and preventing race conditions even on shared filesystems, among\nother things.</p>\n<p>## Disclaimer</p>\n<p>This codebase is internal to the Spakowitz lab and is not guaranteed to be\nbug-free at any point. For battle-tested versions of our software, please see\nthe links in the relevant papers.</p>\n\n          </div>"}, "last_serial": 5872000, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "c2f92da6005e6a9b2633bd1419f56d67", "sha256": "e4fbd2f190fa5089f5e8bcf25ae29b00c68bf5fa1644097ae2de112d2629694e"}, "downloads": -1, "filename": "wlcsim-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c2f92da6005e6a9b2633bd1419f56d67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2336097, "upload_time": "2019-09-23T07:16:33", "upload_time_iso_8601": "2019-09-23T07:16:33.104429Z", "url": "https://files.pythonhosted.org/packages/39/a3/045826c67f1b6069d6fba2cfeb2dd83fafa74709b33044f0de09526a188e/wlcsim-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "068bfbabc1d18d38312ac10bac6168a0", "sha256": "76ea5caae66a5516f04d78d9d9a4f26e4f47b8e8d6b56e3f6d066d3a3385e9e4"}, "downloads": -1, "filename": "wlcsim-0.0.7.tar.gz", "has_sig": false, "md5_digest": "068bfbabc1d18d38312ac10bac6168a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2336097, "upload_time": "2019-09-23T07:34:01", "upload_time_iso_8601": "2019-09-23T07:34:01.365778Z", "url": "https://files.pythonhosted.org/packages/32/6e/449dd595ac6e4f41e22a22a81168a31707c5b19ae0bc48fc2f0c57ea72ac/wlcsim-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "068bfbabc1d18d38312ac10bac6168a0", "sha256": "76ea5caae66a5516f04d78d9d9a4f26e4f47b8e8d6b56e3f6d066d3a3385e9e4"}, "downloads": -1, "filename": "wlcsim-0.0.7.tar.gz", "has_sig": false, "md5_digest": "068bfbabc1d18d38312ac10bac6168a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2336097, "upload_time": "2019-09-23T07:34:01", "upload_time_iso_8601": "2019-09-23T07:34:01.365778Z", "url": "https://files.pythonhosted.org/packages/32/6e/449dd595ac6e4f41e22a22a81168a31707c5b19ae0bc48fc2f0c57ea72ac/wlcsim-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:27 2020"}