{"info": {"author": "Matt Wisniewski", "author_email": "mattw@jwplayer.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Testing"], "description": "Networktest\n===========\n\nA library to test and enforce testing rules for Python applications that make network requests.\n\nInstallation\n============\n\n.. code-block:: bash\n\n    pip install networktest\n\nBlocking network requests\n=========================\n\nnetworktest provides a context manager NetworkBlocker that can be used to prevent tests or an application from making network requests.\n\n.. code-block:: python\n\n    import urllib.request\n    from networktest import NetworkBlocker\n\n    with NetworkBlocker():\n        # A NetworkBlockException will be raised\n        urllib.request.urlopen('http://127.0.0.1').read()\n\nIn some types of tests you may want to allow certain types of requests but not others. When testing an API you may want to allow tests to access that API's database but not make requests to another API.\n\n.. code-block:: python\n\n    import urllib.request\n    from networktest import NetworkBlocker\n    from my_database import Database\n\n    with NetworkBlocker(allowed_packages=NetworkBlocker.AllowablePackages.DATASTORE):\n        # This is fine\n        Database.query('SELECT 1')\n\n        # A NetworkBlockException will be raised\n        urllib.request.urlopen('http://127.0.0.1').read()\n\nIf you're in the process of migrating your tests to mock requests you may want to use NetworkBlocker's warning mode. This mode will allow requests but display a warning.\n\n.. code-block:: python\n\n    import urllib.request\n    from networktest import NetworkBlocker\n\n    with NetworkBlocker(mode=NetworkBlocker.Modes.WARNING):\n        # This will be allowed but a warning will be displayed\n        urllib.request.urlopen('http://127.0.0.1').read()\n\nTestCase Support\n----------------\n\nSome TestCases are provided that will apply NetworkBlocker to all tests in that case with some default settings.\n\n.. code-block:: python\n\n    import urllib.request\n    from my_database import Database\n    from networktest import NetworkBlockedTest, NetworkLimitedTest\n\n    class MyTest(NetworkBlockedTest):\n\n        def test_blocker(self):\n            # A NetworkBlockException will be raised\n            urllib.request.urlopen('http://127.0.0.1').read()\n\n    class MyOtherTest(NetworkLimitedTest):\n\n        def test_blocker(self):\n            # This is fine\n            Database.query('SELECT 1')\n\n            # A NetworkBlockException will be raised\n            urllib.request.urlopen('http://127.0.0.1').read()\n\npytest Support\n--------------\n\npytest markers networkblocked and networklimited are available to apply NetworkBlocker to tests. These may be applied to modules, classes, methods or any other way pytest markers are supported.\n\n.. code-block:: python\n\n    from pytest import mark\n\n    @mark.networkblocked\n    def test_blocked(self):\n        # A NetworkBlockException will be raised\n        urllib.request.urlopen('http://127.0.0.1').read()\n\n    @mark.networklimited\n    def test_limited(self):\n        # This is fine\n        Database.query('SELECT 1')\n\n        # A NetworkBlockException will be raised\n        urllib.request.urlopen('http://127.0.0.1').read()\n\nNetworkBlocker may be applied to an entire directory by adding an autouse fixture to a conftest.py file in that directory.\n\n.. code-block:: python\n\n    @pytest.fixture(scope='module', autouse=True)\n    def networkblocker():\n        with NetworkBlocker():\n            yield\n\nMocking API requests\n====================\n\nHttpApiMock is provided to help with mocking API requests in unit and functional tests.\n\n.. code-block:: python\n\n    import urllib.request\n    from networktest.mock import HttpApiMock\n\n    class MyApiMock(HttpApiMock):\n\n        hostnames = [\n           'my-api'\n        ]\n\n        endpoints = [\n            HttpApiMockEndpoint(\n                operation_id='example',\n                match_pattern=b'^GET /example/(?P<example_id>.*?)/',\n                response=lambda groups: (418, {\n                    'id': groups['example_id'],\n                })\n            )\n        ]\n\n    def test_my_api():\n        with MyApiMock() as mock_api:\n            response = urllib.request.urlopen('http://my-api/')\n            response.read()\n            # Requests which do not have a matched endpoint return a 200 response code by default\n            assert response.getcode() == 200\n\n            try:\n                # This request matches the 'example' endpoint defined in MyApiMock\n                urllib.request.urlopen('http://my-api/example/1234/').read()\n            except urllib.error.HTTPError as e:\n                # The response is the one defined for the 'example' endpoint\n                assert e.code == 418\n                assert e.read() == b'{\"id\": \"1234\"}'\n\n            # It's possible to change the default responses inside of a test\n            # In most tests it would make sense to apply MyApiMock to all tests of a certain type\n            #   and only explictly use MyApiMock when doing something like this.\n            mock_api.example.response = lambda groups: (204, None)\n            response = urllib.request.urlopen('http://my-api/')\n            response.read()\n            assert response.getcode() == 204\n\nIntegration tests\n=================\n\nHttpApiMock may also be used to create assertions for integration tests without preventing API requests from being made.\n\n.. code-block:: python\n\n    import urllib.request\n    from networktest.mock import HttpApiMock\n\n    class MyApiMock(HttpApiMock):\n\n        hostnames = [\n            'my-api'\n        ]\n\n        endpoints = [\n            HttpApiMockEndpoint(\n                operation_id='example',\n                match_pattern=b'^GET /example/(?P<example_id>.*?)/',\n                response=lambda groups: (204, None)\n            )\n        ]\n\n    def test_my_api():\n        with MyApiMock(Mode=MyApiMock.Modes.WATCH) as mock_api:\n            urllib.request.urlopen('http://my-api/example/1234/').read()\n            mock_api.example.request_mock.assert_called_once()\n\n\nVersioning\n==========\n\nThis package strictly follows `semantic versioning <https://semver.org>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jwplayer/networktest", "keywords": "network,test,functional,unit,integration,api,http,request", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "networktest", "package_url": "https://pypi.org/project/networktest/", "platform": "", "project_url": "https://pypi.org/project/networktest/", "project_urls": {"Homepage": "https://github.com/jwplayer/networktest"}, "release_url": "https://pypi.org/project/networktest/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "Tools for testing applications that make network requests.", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"networktest\">\n<h2>Networktest</h2>\n<p>A library to test and enforce testing rules for Python applications that make network requests.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install networktest\n</pre>\n</div>\n<div id=\"blocking-network-requests\">\n<h2>Blocking network requests</h2>\n<p>networktest provides a context manager NetworkBlocker that can be used to prevent tests or an application from making network requests.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest</span> <span class=\"kn\">import</span> <span class=\"n\">NetworkBlocker</span>\n\n<span class=\"k\">with</span> <span class=\"n\">NetworkBlocker</span><span class=\"p\">():</span>\n    <span class=\"c1\"># A NetworkBlockException will be raised</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<p>In some types of tests you may want to allow certain types of requests but not others. When testing an API you may want to allow tests to access that API\u2019s database but not make requests to another API.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest</span> <span class=\"kn\">import</span> <span class=\"n\">NetworkBlocker</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n\n<span class=\"k\">with</span> <span class=\"n\">NetworkBlocker</span><span class=\"p\">(</span><span class=\"n\">allowed_packages</span><span class=\"o\">=</span><span class=\"n\">NetworkBlocker</span><span class=\"o\">.</span><span class=\"n\">AllowablePackages</span><span class=\"o\">.</span><span class=\"n\">DATASTORE</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This is fine</span>\n    <span class=\"n\">Database</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># A NetworkBlockException will be raised</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<p>If you\u2019re in the process of migrating your tests to mock requests you may want to use NetworkBlocker\u2019s warning mode. This mode will allow requests but display a warning.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest</span> <span class=\"kn\">import</span> <span class=\"n\">NetworkBlocker</span>\n\n<span class=\"k\">with</span> <span class=\"n\">NetworkBlocker</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">NetworkBlocker</span><span class=\"o\">.</span><span class=\"n\">Modes</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This will be allowed but a warning will be displayed</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<div id=\"testcase-support\">\n<h3>TestCase Support</h3>\n<p>Some TestCases are provided that will apply NetworkBlocker to all tests in that case with some default settings.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest</span> <span class=\"kn\">import</span> <span class=\"n\">NetworkBlockedTest</span><span class=\"p\">,</span> <span class=\"n\">NetworkLimitedTest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTest</span><span class=\"p\">(</span><span class=\"n\">NetworkBlockedTest</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_blocker</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># A NetworkBlockException will be raised</span>\n        <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyOtherTest</span><span class=\"p\">(</span><span class=\"n\">NetworkLimitedTest</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_blocker</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is fine</span>\n        <span class=\"n\">Database</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># A NetworkBlockException will be raised</span>\n        <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"pytest-support\">\n<h3>pytest Support</h3>\n<p>pytest markers networkblocked and networklimited are available to apply NetworkBlocker to tests. These may be applied to modules, classes, methods or any other way pytest markers are supported.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytest</span> <span class=\"kn\">import</span> <span class=\"n\">mark</span>\n\n<span class=\"nd\">@mark</span><span class=\"o\">.</span><span class=\"n\">networkblocked</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_blocked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># A NetworkBlockException will be raised</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@mark</span><span class=\"o\">.</span><span class=\"n\">networklimited</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_limited</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This is fine</span>\n    <span class=\"n\">Database</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'SELECT 1'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># A NetworkBlockException will be raised</span>\n    <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<p>NetworkBlocker may be applied to an entire directory by adding an autouse fixture to a conftest.py file in that directory.</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s1\">'module'</span><span class=\"p\">,</span> <span class=\"n\">autouse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">networkblocker</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">NetworkBlocker</span><span class=\"p\">():</span>\n        <span class=\"k\">yield</span>\n</pre>\n</div>\n</div>\n<div id=\"mocking-api-requests\">\n<h2>Mocking API requests</h2>\n<p>HttpApiMock is provided to help with mocking API requests in unit and functional tests.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">HttpApiMock</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApiMock</span><span class=\"p\">(</span><span class=\"n\">HttpApiMock</span><span class=\"p\">):</span>\n\n    <span class=\"n\">hostnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n       <span class=\"s1\">'my-api'</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">endpoints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">HttpApiMockEndpoint</span><span class=\"p\">(</span>\n            <span class=\"n\">operation_id</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n            <span class=\"n\">match_pattern</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'^GET /example/(?P&lt;example_id&gt;.*?)/'</span><span class=\"p\">,</span>\n            <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">418</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">groups</span><span class=\"p\">[</span><span class=\"s1\">'example_id'</span><span class=\"p\">],</span>\n            <span class=\"p\">})</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_my_api</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">MyApiMock</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">mock_api</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://my-api/'</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Requests which do not have a matched endpoint return a 200 response code by default</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">getcode</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This request matches the 'example' endpoint defined in MyApiMock</span>\n            <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://my-api/example/1234/'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">HTTPError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The response is the one defined for the 'example' endpoint</span>\n            <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">418</span>\n            <span class=\"k\">assert</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'{\"id\": \"1234\"}'</span>\n\n        <span class=\"c1\"># It's possible to change the default responses inside of a test</span>\n        <span class=\"c1\"># In most tests it would make sense to apply MyApiMock to all tests of a certain type</span>\n        <span class=\"c1\">#   and only explictly use MyApiMock when doing something like this.</span>\n        <span class=\"n\">mock_api</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://my-api/'</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">getcode</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">204</span>\n</pre>\n</div>\n<div id=\"integration-tests\">\n<h2>Integration tests</h2>\n<p>HttpApiMock may also be used to create assertions for integration tests without preventing API requests from being made.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">networktest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">HttpApiMock</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApiMock</span><span class=\"p\">(</span><span class=\"n\">HttpApiMock</span><span class=\"p\">):</span>\n\n    <span class=\"n\">hostnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">'my-api'</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">endpoints</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">HttpApiMockEndpoint</span><span class=\"p\">(</span>\n            <span class=\"n\">operation_id</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n            <span class=\"n\">match_pattern</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'^GET /example/(?P&lt;example_id&gt;.*?)/'</span><span class=\"p\">,</span>\n            <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_my_api</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"n\">MyApiMock</span><span class=\"p\">(</span><span class=\"n\">Mode</span><span class=\"o\">=</span><span class=\"n\">MyApiMock</span><span class=\"o\">.</span><span class=\"n\">Modes</span><span class=\"o\">.</span><span class=\"n\">WATCH</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">mock_api</span><span class=\"p\">:</span>\n        <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"s1\">'http://my-api/example/1234/'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">mock_api</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">request_mock</span><span class=\"o\">.</span><span class=\"n\">assert_called_once</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>This package strictly follows <a href=\"https://semver.org\" rel=\"nofollow\">semantic versioning</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6269857, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ddc36468651f565832dca56951c3bc71", "sha256": "5f3182c828df76899a34d363e515fbaf22af1feee6d7d4e1ea9ee70cb769014c"}, "downloads": -1, "filename": "networktest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ddc36468651f565832dca56951c3bc71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14729, "upload_time": "2019-11-12T20:57:38", "upload_time_iso_8601": "2019-11-12T20:57:38.638767Z", "url": "https://files.pythonhosted.org/packages/29/41/3121f105ac32971654d07e67207572f64c9bb33dd1cc2e2f8c8b0b941c0f/networktest-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c356990ed08f5d62503516d206e9e275", "sha256": "afc0eb95d6ba786d0cda3b761d846bd304aef8434cc059bb5997de978e708f43"}, "downloads": -1, "filename": "networktest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c356990ed08f5d62503516d206e9e275", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16756, "upload_time": "2019-11-12T20:57:40", "upload_time_iso_8601": "2019-11-12T20:57:40.739056Z", "url": "https://files.pythonhosted.org/packages/7c/01/7d81fb10d23612664ef5a38dbc81dad86a7269d713b71c76b8b707bfc5de/networktest-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "98b882efe69f286a1fb058e6fd8cdef2", "sha256": "f5cfc33adaf40bc17c5852f8ba2c7c39f280969307de89e1ac6e2e881dbceaa7"}, "downloads": -1, "filename": "networktest-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98b882efe69f286a1fb058e6fd8cdef2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14729, "upload_time": "2019-11-12T21:20:05", "upload_time_iso_8601": "2019-11-12T21:20:05.714923Z", "url": "https://files.pythonhosted.org/packages/24/b0/e5b873f8ff5dad30bd768ed267d88cc2d6caae9005334d4991ee498a34f5/networktest-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1690c609005d4c08282e749f769050b", "sha256": "b9cdbc10fab9cf896323b4cbf5de63bb50ab8b18981cf5da2858e1e18bec1770"}, "downloads": -1, "filename": "networktest-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e1690c609005d4c08282e749f769050b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17771, "upload_time": "2019-11-12T21:20:07", "upload_time_iso_8601": "2019-11-12T21:20:07.234605Z", "url": "https://files.pythonhosted.org/packages/10/02/43a46d8b10795d994792c59e2414c2491833e95b0128767228e2f9b8af5a/networktest-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a46bd073182daa3388fbcfca19b9d45b", "sha256": "5793dea048c992dcdebaebae63df18c0f6230fded35203db8f4ba58f24120f47"}, "downloads": -1, "filename": "networktest-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a46bd073182daa3388fbcfca19b9d45b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14733, "upload_time": "2019-11-12T21:48:59", "upload_time_iso_8601": "2019-11-12T21:48:59.171389Z", "url": "https://files.pythonhosted.org/packages/12/55/7b2467328d9d52b1d84237e24fc2289a36eb4dd3ca1fc183d83ad18fdcb3/networktest-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94b0c30b64c11eb9cede37184de46b4c", "sha256": "d92296f31873b83b9f53e8da995fa4fcbf13407e6583604593c8f202c4c5475d"}, "downloads": -1, "filename": "networktest-1.0.1.tar.gz", "has_sig": false, "md5_digest": "94b0c30b64c11eb9cede37184de46b4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17810, "upload_time": "2019-11-12T21:49:00", "upload_time_iso_8601": "2019-11-12T21:49:00.699496Z", "url": "https://files.pythonhosted.org/packages/47/9d/8f4e0c27fa4341b867ee95414801c323218305cad4b34d8363ddd5f4f03b/networktest-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "14dbfda9ab06abd31cfe37d5a5a20e0b", "sha256": "8b31a27188bc2e08a7e3dbc165bc8a3022a8f911d378374aa34139c3bc94adeb"}, "downloads": -1, "filename": "networktest-1.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "14dbfda9ab06abd31cfe37d5a5a20e0b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13269, "upload_time": "2019-11-22T16:30:07", "upload_time_iso_8601": "2019-11-22T16:30:07.360320Z", "url": "https://files.pythonhosted.org/packages/f8/ec/5021b8397b6c772010b158143565d19c3a2bb7877189047dd20907303c08/networktest-1.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d71ae77b9b018167a7d6ed79f6c7dcfe", "sha256": "90c08b0cfa27c4e464f3c2af9208ad6ec0910cdd887af1b2803cf1f6d5e70a77"}, "downloads": -1, "filename": "networktest-1.0.2.tar.gz", "has_sig": false, "md5_digest": "d71ae77b9b018167a7d6ed79f6c7dcfe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17602, "upload_time": "2019-11-22T16:30:08", "upload_time_iso_8601": "2019-11-22T16:30:08.783218Z", "url": "https://files.pythonhosted.org/packages/e6/d7/ab178c3d31d30a3388fb8f446e9413f47fe5b795e9647ae8386b0663d5fc/networktest-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "da7f286909b95f234424754e12508c0f", "sha256": "0f1596d43bef96466a0da0248f89006a7d84d502a5f4f8bff65713a7e1ce9d61"}, "downloads": -1, "filename": "networktest-1.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "da7f286909b95f234424754e12508c0f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13270, "upload_time": "2019-11-25T16:20:57", "upload_time_iso_8601": "2019-11-25T16:20:57.995814Z", "url": "https://files.pythonhosted.org/packages/5b/a1/459c5efa11eed17dc4d09682ba574b71a6f53418f0fcedfaa9528327cb33/networktest-1.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "495663a35f419d27a57301760c197b0d", "sha256": "cf6024ee196854762de252dc3fa2e590f461a220701f24746a1389781b59cd4d"}, "downloads": -1, "filename": "networktest-1.0.3.tar.gz", "has_sig": false, "md5_digest": "495663a35f419d27a57301760c197b0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17517, "upload_time": "2019-11-25T16:20:59", "upload_time_iso_8601": "2019-11-25T16:20:59.715250Z", "url": "https://files.pythonhosted.org/packages/52/a4/b0e1559699bad64bf86f07b5dc31cb1c56e823f0f7ccda44762b7e154af3/networktest-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "e257d17dd22b9ff01005167c1d1eca14", "sha256": "361b11cecba893b2cd2916effc1e30d4dd54918073b753921be2dfca11dbee81"}, "downloads": -1, "filename": "networktest-1.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "e257d17dd22b9ff01005167c1d1eca14", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13419, "upload_time": "2019-12-09T22:43:32", "upload_time_iso_8601": "2019-12-09T22:43:32.100230Z", "url": "https://files.pythonhosted.org/packages/7b/11/2c22b676b9618c88904eeece62302ab54d2fcc808f5777554586c5b2be07/networktest-1.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7f035ceaa177a62728208b755fd2a7a", "sha256": "13ccb71a912373489c3db66fb0de25ba8f9e9436eb5128714144f6475ef0602e"}, "downloads": -1, "filename": "networktest-1.0.4.tar.gz", "has_sig": false, "md5_digest": "b7f035ceaa177a62728208b755fd2a7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17854, "upload_time": "2019-12-09T22:43:33", "upload_time_iso_8601": "2019-12-09T22:43:33.906603Z", "url": "https://files.pythonhosted.org/packages/df/b5/8589d8c37a30fe773a0418bb16c8d9d40840ed9d014225094314305d75db/networktest-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "fcf6317d64eb98e58c5ce11024461159", "sha256": "05950dcdf451cf0180c3f7a4838a3ad43ffe50b058d396e72adfab187ea11d25"}, "downloads": -1, "filename": "networktest-1.0.5-py2-none-any.whl", "has_sig": false, "md5_digest": "fcf6317d64eb98e58c5ce11024461159", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13443, "upload_time": "2019-12-09T23:30:14", "upload_time_iso_8601": "2019-12-09T23:30:14.306219Z", "url": "https://files.pythonhosted.org/packages/17/9a/a960255c8b4e6566af1a17b684449f12009dfeab1bed590c712f04fa165f/networktest-1.0.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d60a5512033cbf395fab62b549a599e", "sha256": "23ee90b438a03b6ce2726c3cf0ff30984ca47060eb3f56fe26afaf94401102bf"}, "downloads": -1, "filename": "networktest-1.0.5.tar.gz", "has_sig": false, "md5_digest": "8d60a5512033cbf395fab62b549a599e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17960, "upload_time": "2019-12-09T23:30:15", "upload_time_iso_8601": "2019-12-09T23:30:15.882462Z", "url": "https://files.pythonhosted.org/packages/f9/3e/39c39d8cb5bb3d956e4fb2a46851868581018e1fcb600a491fd7fcc161e1/networktest-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcf6317d64eb98e58c5ce11024461159", "sha256": "05950dcdf451cf0180c3f7a4838a3ad43ffe50b058d396e72adfab187ea11d25"}, "downloads": -1, "filename": "networktest-1.0.5-py2-none-any.whl", "has_sig": false, "md5_digest": "fcf6317d64eb98e58c5ce11024461159", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 13443, "upload_time": "2019-12-09T23:30:14", "upload_time_iso_8601": "2019-12-09T23:30:14.306219Z", "url": "https://files.pythonhosted.org/packages/17/9a/a960255c8b4e6566af1a17b684449f12009dfeab1bed590c712f04fa165f/networktest-1.0.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d60a5512033cbf395fab62b549a599e", "sha256": "23ee90b438a03b6ce2726c3cf0ff30984ca47060eb3f56fe26afaf94401102bf"}, "downloads": -1, "filename": "networktest-1.0.5.tar.gz", "has_sig": false, "md5_digest": "8d60a5512033cbf395fab62b549a599e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17960, "upload_time": "2019-12-09T23:30:15", "upload_time_iso_8601": "2019-12-09T23:30:15.882462Z", "url": "https://files.pythonhosted.org/packages/f9/3e/39c39d8cb5bb3d956e4fb2a46851868581018e1fcb600a491fd7fcc161e1/networktest-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:50 2020"}