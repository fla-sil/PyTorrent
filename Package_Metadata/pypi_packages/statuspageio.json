{"info": {"author": "GameSparks developers", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "python-statuspageio\n==============\n\nStatusPage.oi  API V1 library client for Python. Based on the documentaion from https://doers.statuspage.io/api/v1/\n\nProvides most of the funcitonality for the http://statuspage.io api's via handy python code.\n\n\nInstallation\n------------\n\nStatuspageio package can be installed either via pip:\n\n.. code:: bash\n\n    $ pip install --upgrade statuspageio\n\n\n\nYou can install from the source code as well. First clone the repo and\nthen execute:\n\n.. code:: bash\n\n    $ python setup.py install\n\nAfter installing, import ``statuspageio`` package:\n\n.. code:: python\n\n    import statuspageio\n\nUsage\n-----\n\n.. code:: python\n\n    import statuspageio\n\n    # Then we instantiate a client (as shown below)\n\nBuild a client\n~~~~~~~~~~~~~~\n\n**Using this api without authentication gives an error**\n\n.. code:: python\n\n    client = statuspageio.Client(api_key='<YOUR_PERSONAL_API_KEY>', page_id=<YOUR_PERSONAL_PAGE_ID')\nor\n    client = statuspageio.Client(api_key='<YOUR_PERSONAL_API_KEY>', page_id=<YOUR_PERSONAL_PAGE_ID',organization_id=<YOUR_PERSONAL_ORGANIZATION_ID)\n\n\nClient Options\n~~~~~~~~~~~~~~\n\nThe following options are available while instantiating a client:\n\n-  **api\\_key**: Personal API Key\n-  **page\\_id**: Personal page id\n-  **organization\\_id**: Personal organization id, used for managing users.\n-  **base\\_url**: Base url for the api\n-  **user\\_agent**: Default user-agent for all requests\n-  **timeout**: Request timeout\n-  **verbose**: Verbose/debug mode\n\nArchitecture\n~~~~~~~~~~~~\n\nThe library follows few architectural principles you should understand\nbefore digging deeper. 1. Interactions with resources are done via\nservice objects. 2. Service objects are exposed as properties on client\ninstances. 3. Service objects expose resource-oriented actions. 4.\nActions return dictionaries that support attribute-style access, a la\nJavaScript (thanks to Bunch and it's form Munch).\n\nFor example, to interact with components API you will use\n``statuspageio.ComponentsService``, which you can get if you call:\n\n.. code:: python\n\n    client = statuspageio.Client(api_key='<YOUR_PERSONAL_API_KEY>', page_id=<YOUR_PERSONAL_PAGE_ID')\n    client.components # statuspageio.ComponentsService\n\nTo retrieve list of resources and use filtering you will call ``#list``\nmethod:\n\n.. code:: python\n\n    client = statuspageio.Client(api_key='<YOUR_PERSONAL_API_KEY>', page_id=<YOUR_PERSONAL_PAGE_ID')\n    client.components.list() # list(dict|Munch)\n\n\n\nResources and actions\n---------------------\n\nDocumentation for every action can be found in ``statuspageio/services.py``\nfile.\n\n\nTests\n-----\n\nSorry. These need to be written.\n\n\nThanks\n------\n\nThank you to the BaseCRM development team who created the majority of the code for this project.\nWe forked the code as the aritectural style worked really well for this project.\nPlease see https://github.com/basecrm/basecrm-python for more details\n\nThank you so much!\n\nLicense\n-------\n\nMIT\n\nBug Reports\n-----------\n\nReport `here <https://github.com/GameSparks/python-statuspageio/issues>`__.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gamesparks/python-statuspageio", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "statuspageio", "package_url": "https://pypi.org/project/statuspageio/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/statuspageio/", "project_urls": {"Homepage": "https://github.com/gamesparks/python-statuspageio"}, "release_url": "https://pypi.org/project/statuspageio/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "StatusPage.io API V1 library client for Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            python-statuspageio<br>==============<br><br>StatusPage.oi  API V1 library client for Python. Based on the documentaion from https://doers.statuspage.io/api/v1/<br><br>Provides most of the funcitonality for the http://statuspage.io api's via handy python code.<br><br><br>Installation<br>------------<br><br>Statuspageio package can be installed either via pip:<br><br>.. code:: bash<br><br>    $ pip install --upgrade statuspageio<br><br><br><br>You can install from the source code as well. First clone the repo and<br>then execute:<br><br>.. code:: bash<br><br>    $ python setup.py install<br><br>After installing, import ``statuspageio`` package:<br><br>.. code:: python<br><br>    import statuspageio<br><br>Usage<br>-----<br><br>.. code:: python<br><br>    import statuspageio<br><br>    # Then we instantiate a client (as shown below)<br><br>Build a client<br>~~~~~~~~~~~~~~<br><br>**Using this api without authentication gives an error**<br><br>.. code:: python<br><br>    client = statuspageio.Client(api_key='&lt;YOUR_PERSONAL_API_KEY&gt;', page_id=&lt;YOUR_PERSONAL_PAGE_ID')<br>or<br>    client = statuspageio.Client(api_key='&lt;YOUR_PERSONAL_API_KEY&gt;', page_id=&lt;YOUR_PERSONAL_PAGE_ID',organization_id=&lt;YOUR_PERSONAL_ORGANIZATION_ID)<br><br><br>Client Options<br>~~~~~~~~~~~~~~<br><br>The following options are available while instantiating a client:<br><br>-  **api\\_key**: Personal API Key<br>-  **page\\_id**: Personal page id<br>-  **organization\\_id**: Personal organization id, used for managing users.<br>-  **base\\_url**: Base url for the api<br>-  **user\\_agent**: Default user-agent for all requests<br>-  **timeout**: Request timeout<br>-  **verbose**: Verbose/debug mode<br><br>Architecture<br>~~~~~~~~~~~~<br><br>The library follows few architectural principles you should understand<br>before digging deeper. 1. Interactions with resources are done via<br>service objects. 2. Service objects are exposed as properties on client<br>instances. 3. Service objects expose resource-oriented actions. 4.<br>Actions return dictionaries that support attribute-style access, a la<br>JavaScript (thanks to Bunch and it's form Munch).<br><br>For example, to interact with components API you will use<br>``statuspageio.ComponentsService``, which you can get if you call:<br><br>.. code:: python<br><br>    client = statuspageio.Client(api_key='&lt;YOUR_PERSONAL_API_KEY&gt;', page_id=&lt;YOUR_PERSONAL_PAGE_ID')<br>    client.components # statuspageio.ComponentsService<br><br>To retrieve list of resources and use filtering you will call ``#list``<br>method:<br><br>.. code:: python<br><br>    client = statuspageio.Client(api_key='&lt;YOUR_PERSONAL_API_KEY&gt;', page_id=&lt;YOUR_PERSONAL_PAGE_ID')<br>    client.components.list() # list(dict|Munch)<br><br><br><br>Resources and actions<br>---------------------<br><br>Documentation for every action can be found in ``statuspageio/services.py``<br>file.<br><br><br>Tests<br>-----<br><br>Sorry. These need to be written.<br><br><br>Thanks<br>------<br><br>Thank you to the BaseCRM development team who created the majority of the code for this project.<br>We forked the code as the aritectural style worked really well for this project.<br>Please see https://github.com/basecrm/basecrm-python for more details<br><br>Thank you so much!<br><br>License<br>-------<br><br>MIT<br><br>Bug Reports<br>-----------<br><br>Report `here &lt;https://github.com/GameSparks/python-statuspageio/issues&gt;`__.\n          </div>"}, "last_serial": 1933723, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "43d101d52fbd1f7f5153d971c1389a9b", "sha256": "4f20e41a4ecc243bbc918c77863940c559fac31107b3915c9dd7c8f5397e41a5"}, "downloads": -1, "filename": "statuspageio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "43d101d52fbd1f7f5153d971c1389a9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10974, "upload_time": "2016-02-01T14:18:58", "upload_time_iso_8601": "2016-02-01T14:18:58.406142Z", "url": "https://files.pythonhosted.org/packages/9f/52/af1c91d3924c0b25090050bb57c8782fd129ebbaf9a634650c203e740fd4/statuspageio-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "43d101d52fbd1f7f5153d971c1389a9b", "sha256": "4f20e41a4ecc243bbc918c77863940c559fac31107b3915c9dd7c8f5397e41a5"}, "downloads": -1, "filename": "statuspageio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "43d101d52fbd1f7f5153d971c1389a9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10974, "upload_time": "2016-02-01T14:18:58", "upload_time_iso_8601": "2016-02-01T14:18:58.406142Z", "url": "https://files.pythonhosted.org/packages/9f/52/af1c91d3924c0b25090050bb57c8782fd129ebbaf9a634650c203e740fd4/statuspageio-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:18 2020"}