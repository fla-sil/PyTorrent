{"info": {"author": "Till Theato", "author_email": "till.theato@evocount.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n[![PyPI version](https://badge.fury.io/py/drf-channels-oneway-ws.svg)](https://badge.fury.io/py/drf-channels-oneway-ws)\n[![Build Status](https://travis-ci.org/evocount/drf-channels-oneway-ws.svg?branch=master)](https://travis-ci.org/evocount/drf-channels-oneway-ws)\n[![codecov](https://codecov.io/gh/evocount/drf-channels-oneway-ws/branch/master/graph/badge.svg)](https://codecov.io/gh/evocount/drf-channels-oneway-ws)\n\n# DRF channels one-way WS\n\nSimple one-way bindings for django-channels with some specific support for django-rest-framework serializers and websockets. I.e. enrich your existing API with push notifications.\n\n## Installation\n\n* `pipenv install drf-channels-oneway-ws` or `pip install drf-channels-oneway-ws`\n\n## Usage\n\n### Bindings\n```python\nfrom django.db import models\nfrom rest_framework import serializers\nfrom channels_oneway.bindings import Binding\n\nclass Family(models.Model):\n    name = models.CharField(max_length=255)\n\nclass Bird(models.Model):\n    name = models.CharField(max_length=255)\n    family = models.ForeignKey('Family', models.CASCADE)\n\n\nclass BirdSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Customer\n        fields = ('__all__')\n\n\nclass BirdBinding(Binding):\n    model = Bird\n    stream = 'birds'\n    serializer = BirdSerializer\n\n    @classmethod\n    def group_names(cls, instance):\n        return [instance.family.name]\n\nclass FamilyBinding(Binding):\n    \"\"\"\n    example of a binding not using a drf serializer\n    \"\"\"\n    model = Family\n    stream = 'bird-families'\n\n    @classmethod\n    def group_names(cls, instance):\n        return [instance.name]\n\n    def serialize_data(self, instance):\n        return {'id': instance.id, 'name': instance.name}\n```\n\nNow you make sure you have a WebsocketConsumer, which does something like `self.channel_layer.group_add('thrushes', self.channel_name)` in its connect coroutine.\n`Family.objects.create(name='thrushes')` will then cause the following to be sent over the associated websocket:\n\n```json\n{\n    \"stream\": \"bird-families\",\n    \"payload\": {\n        \"action\": \"create\",\n        \"data\": {\"id\": 1, \"name\": \"thrushes\"},\n        \"model\": \"your_app.family\",\n        \"pk\": 1\n    }\n}\n```\n\nUpon modification (`\"action\": \"update\"`) or deletion (`\"action\": \"delete\"`) you will receive messages with an equal structure.\n\n\n#### Registration\nIn order to let the bindings register their signals make sure they are imported at some point. In case you use a dedicated file, import it from [`AppConfig.ready`](https://docs.djangoproject.com/en/2.2/ref/applications/#django.apps.AppConfig.ready) just like your signals.\n\n\n### Helpers\nIn order to send a ws message from outside a binding, but using the same format (stream + payload) (and also the drf json encoder) use the async `channels_oneway.utils.groupSend(group, stream, payload)` or its sync equivalent `groupSendSync`.\n\n## Contributing\n\n### Installation\n\n* `git clone git@github.com:evocount/drf-channels-oneway-ws.git`\n* `cd drf-channels-oneway-ws`\n* `pipenv install --dev`\n\n### Running tests\n\n* `pipenv run pytest --cov`\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE.md).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/evocount/drf-channels-oneway-ws", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "drf-channels-oneway-ws", "package_url": "https://pypi.org/project/drf-channels-oneway-ws/", "platform": "", "project_url": "https://pypi.org/project/drf-channels-oneway-ws/", "project_urls": {"Homepage": "https://github.com/evocount/drf-channels-oneway-ws"}, "release_url": "https://pypi.org/project/drf-channels-oneway-ws/0.3.0/", "requires_dist": ["Django", "channels", "djangorestframework", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-django ; extra == 'test'", "pytest-asyncio ; extra == 'test'"], "requires_python": ">=3.6.0", "summary": "Simple one-way bindings for django-channels with some specific support for django-rest-framework serializers and websockets. I.e. enrich your existing API with push notifications.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/drf-channels-oneway-ws\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb19f492c617247dbcf0d186b1d58408804e5de4/68747470733a2f2f62616467652e667572792e696f2f70792f6472662d6368616e6e656c732d6f6e657761792d77732e737667\"></a>\n<a href=\"https://travis-ci.org/evocount/drf-channels-oneway-ws\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b064a36112a4f6681b9c96bbf3c917c8bfce6305/68747470733a2f2f7472617669732d63692e6f72672f65766f636f756e742f6472662d6368616e6e656c732d6f6e657761792d77732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/evocount/drf-channels-oneway-ws\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63c8032e4e0cb6b9090e8cf89001de39bb3caeed/68747470733a2f2f636f6465636f762e696f2f67682f65766f636f756e742f6472662d6368616e6e656c732d6f6e657761792d77732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>DRF channels one-way WS</h1>\n<p>Simple one-way bindings for django-channels with some specific support for django-rest-framework serializers and websockets. I.e. enrich your existing API with push notifications.</p>\n<h2>Installation</h2>\n<ul>\n<li><code>pipenv install drf-channels-oneway-ws</code> or <code>pip install drf-channels-oneway-ws</code></li>\n</ul>\n<h2>Usage</h2>\n<h3>Bindings</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rest_framework</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">channels_oneway.bindings</span> <span class=\"kn\">import</span> <span class=\"n\">Binding</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Family</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Bird</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'Family'</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BirdSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Customer</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'__all__'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BirdBinding</span><span class=\"p\">(</span><span class=\"n\">Binding</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bird</span>\n    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'birds'</span>\n    <span class=\"n\">serializer</span> <span class=\"o\">=</span> <span class=\"n\">BirdSerializer</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">group_names</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FamilyBinding</span><span class=\"p\">(</span><span class=\"n\">Binding</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    example of a binding not using a drf serializer</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Family</span>\n    <span class=\"n\">stream</span> <span class=\"o\">=</span> <span class=\"s1\">'bird-families'</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">group_names</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">}</span>\n</pre>\n<p>Now you make sure you have a WebsocketConsumer, which does something like <code>self.channel_layer.group_add('thrushes', self.channel_name)</code> in its connect coroutine.\n<code>Family.objects.create(name='thrushes')</code> will then cause the following to be sent over the associated websocket:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"stream\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bird-families\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"payload\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"create\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"thrushes\"</span><span class=\"p\">},</span>\n        <span class=\"nt\">\"model\"</span><span class=\"p\">:</span> <span class=\"s2\">\"your_app.family\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"pk\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Upon modification (<code>\"action\": \"update\"</code>) or deletion (<code>\"action\": \"delete\"</code>) you will receive messages with an equal structure.</p>\n<h4>Registration</h4>\n<p>In order to let the bindings register their signals make sure they are imported at some point. In case you use a dedicated file, import it from <a href=\"https://docs.djangoproject.com/en/2.2/ref/applications/#django.apps.AppConfig.ready\" rel=\"nofollow\"><code>AppConfig.ready</code></a> just like your signals.</p>\n<h3>Helpers</h3>\n<p>In order to send a ws message from outside a binding, but using the same format (stream + payload) (and also the drf json encoder) use the async <code>channels_oneway.utils.groupSend(group, stream, payload)</code> or its sync equivalent <code>groupSendSync</code>.</p>\n<h2>Contributing</h2>\n<h3>Installation</h3>\n<ul>\n<li><code>git clone git@github.com:evocount/drf-channels-oneway-ws.git</code></li>\n<li><code>cd drf-channels-oneway-ws</code></li>\n<li><code>pipenv install --dev</code></li>\n</ul>\n<h3>Running tests</h3>\n<ul>\n<li><code>pipenv run pytest --cov</code></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the <a href=\"LICENSE.md\" rel=\"nofollow\">MIT License</a>.</p>\n\n          </div>"}, "last_serial": 5687275, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3c538187ade7080897497c113c092b91", "sha256": "977fd607eb29565473b6dcce11a82c2acd3ba899c9dcf5f6eb3983a00bfa8faa"}, "downloads": -1, "filename": "drf_channels_oneway_ws-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c538187ade7080897497c113c092b91", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6298, "upload_time": "2019-03-21T17:58:09", "upload_time_iso_8601": "2019-03-21T17:58:09.152373Z", "url": "https://files.pythonhosted.org/packages/fd/69/395b33b5de3dc14b67263e55280c097b08fcc6982b1679d6d8bb9fa1f741/drf_channels_oneway_ws-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c619599260dc8599a4cacb5f604d738", "sha256": "574b113875cc961f7a402e49c1ac6d7e507841987ab2ddc1831d4d0b5d839bc3"}, "downloads": -1, "filename": "drf-channels-oneway-ws-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5c619599260dc8599a4cacb5f604d738", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6028, "upload_time": "2019-03-21T17:58:11", "upload_time_iso_8601": "2019-03-21T17:58:11.128928Z", "url": "https://files.pythonhosted.org/packages/6f/50/e167fadc19fb393546c628eaf3fe43e6a173d60bee69d04cd11dc2031a09/drf-channels-oneway-ws-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "dc47ba5cfb849c4e3241e6027529c5fc", "sha256": "21f17a584fd59f1302a69fb8f814123bd7ad6b2be8e9fd53df3587ac31ae1672"}, "downloads": -1, "filename": "drf_channels_oneway_ws-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc47ba5cfb849c4e3241e6027529c5fc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6728, "upload_time": "2019-08-16T09:20:50", "upload_time_iso_8601": "2019-08-16T09:20:50.558867Z", "url": "https://files.pythonhosted.org/packages/86/21/b383cd318463083431ece4af757887abaaca4f5cdbbccbc287f2d71b7561/drf_channels_oneway_ws-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "734fba93e85c087b6ce4a0aa15f284c9", "sha256": "ec05889ac2364ded3c96581d8854e418ef35c2ddd81095dfadc832900b5b6adf"}, "downloads": -1, "filename": "drf-channels-oneway-ws-0.2.0.tar.gz", "has_sig": false, "md5_digest": "734fba93e85c087b6ce4a0aa15f284c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6462, "upload_time": "2019-08-16T09:20:52", "upload_time_iso_8601": "2019-08-16T09:20:52.429914Z", "url": "https://files.pythonhosted.org/packages/33/57/48dd048c5cf8eba53b9df6b6225398e9faaa40f6623218b1336dbbb9fc34/drf-channels-oneway-ws-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b35bc29e28bb0f194f9a0531d44834ae", "sha256": "3a6ebaec2e5985a5818b42c55090e0abf38f6f5e575595190d02bf940f7c8b1f"}, "downloads": -1, "filename": "drf_channels_oneway_ws-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b35bc29e28bb0f194f9a0531d44834ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6825, "upload_time": "2019-08-16T12:05:22", "upload_time_iso_8601": "2019-08-16T12:05:22.103177Z", "url": "https://files.pythonhosted.org/packages/f0/87/61a937cf031bf8804a0fa51e417258dcfa132d58cef59a71853cd95f2a3f/drf_channels_oneway_ws-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a3d11eb92ab0a671832c8e4df305427", "sha256": "fca8159c4d439fc02cda744d868feb7ecad1ff25d75f9bcd70756b9af17c03d6"}, "downloads": -1, "filename": "drf-channels-oneway-ws-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5a3d11eb92ab0a671832c8e4df305427", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6555, "upload_time": "2019-08-16T12:05:23", "upload_time_iso_8601": "2019-08-16T12:05:23.847978Z", "url": "https://files.pythonhosted.org/packages/4d/66/da2d420473f8604dc4b3857ef6ead8bbc44a80c45112b401b1a7b9dcc616/drf-channels-oneway-ws-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b35bc29e28bb0f194f9a0531d44834ae", "sha256": "3a6ebaec2e5985a5818b42c55090e0abf38f6f5e575595190d02bf940f7c8b1f"}, "downloads": -1, "filename": "drf_channels_oneway_ws-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b35bc29e28bb0f194f9a0531d44834ae", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 6825, "upload_time": "2019-08-16T12:05:22", "upload_time_iso_8601": "2019-08-16T12:05:22.103177Z", "url": "https://files.pythonhosted.org/packages/f0/87/61a937cf031bf8804a0fa51e417258dcfa132d58cef59a71853cd95f2a3f/drf_channels_oneway_ws-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a3d11eb92ab0a671832c8e4df305427", "sha256": "fca8159c4d439fc02cda744d868feb7ecad1ff25d75f9bcd70756b9af17c03d6"}, "downloads": -1, "filename": "drf-channels-oneway-ws-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5a3d11eb92ab0a671832c8e4df305427", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6555, "upload_time": "2019-08-16T12:05:23", "upload_time_iso_8601": "2019-08-16T12:05:23.847978Z", "url": "https://files.pythonhosted.org/packages/4d/66/da2d420473f8604dc4b3857ef6ead8bbc44a80c45112b401b1a7b9dcc616/drf-channels-oneway-ws-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:47 2020"}