{"info": {"author": "Luca Cappelletti", "author_email": "cappelletti.luca94@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "keras_bed_sequence\n=========================================================================================\n|travis| |sonar_quality| |sonar_maintainability| |codacy|\n|code_climate_maintainability| |pip| |downloads|\n\nLazily one-hot encoding bed sequences using Keras Sequence.\n\nHow do I install this package?\n----------------------------------------------\nAs usual, just download it using pip:\n\n.. code:: shell\n\n    pip install keras_bed_sequence\n\nTests Coverage\n----------------------------------------------\nSince some software handling coverages sometimes get\nslightly different results, here's three of them:\n\n|coveralls| |sonar_coverage| |code_climate_coverage|\n\nUsage examples\n------------------------\nThe following examples are tested within the package test suite.\n\nClassification task example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nLet's start by building an extremely simple classification task model:\n\n.. code:: python\n\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import Dense, Flatten\n    from keras_mixed_sequence import MixedSequence\n\n    model = Sequential([\n        Flatten(),\n        Dense(1)\n    ])\n    model.compile(\n        optimizer=\"nadam\",\n        loss=\"MSE\"\n    )\n\nWe then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:\n\n.. code:: python\n\n    import numpy as np\n    from keras_mixed_sequence import MixedSequence\n    from keras_bed_sequence import BedSequence\n\n    batch_size = 32\n    bed_sequence = BedSequence(\n        \"hg19\",\n        \"path/to/bed/files.bed\",\n        batch_size\n    )\n    y = the_output_values\n    mixed_sequence = MixedSequence(\n        x=bed_sequence,\n        y=y,\n        batch_size=batch_size\n    )\n\nFinally, we can proceed to use the obtained MixedSequence\nto train our model:\n\n.. code:: python\n\n    model.fit_generator(\n        mixed_sequence,\n        steps_per_epoch=mixed_sequence.steps_per_epoch,\n        epochs=2,\n        verbose=0,\n        shuffle=True\n    )\n\nAuto-encoding task example\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nLet's start by building an extremely simple auto-encoding task model:\n\n.. code:: python\n\n    from tensorflow.keras.models import Sequential\n    from tensorflow.keras.layers import Conv2D, Reshape, Conv2DTranspose\n\n    model = Sequential([\n        Reshape((200, 4, 1)),\n        Conv2D(16, kernel_size=3, activation=\"relu\"),\n        Conv2DTranspose(1, kernel_size=3, activation=\"relu\"),\n        Reshape((-1, 200, 4))\n    ])\n    model.compile(\n        optimizer=\"nadam\",\n        loss=\"MSE\"\n    )\n\nWe then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:\n\n.. code:: python\n\n    import numpy as np\n    from keras_mixed_sequence import MixedSequence\n    from keras_bed_sequence import BedSequence\n\n    batch_size = 32\n    bed_sequence = BedSequence(\n        Genome(\"hg19\", chromosomes=[\"chr1\"]),\n        \"path/to/bed/files.bed\",\n        batch_size\n    )\n    mixed_sequence = MixedSequence(\n        x=bed_sequence,\n        y=bed_sequence,\n        batch_size=batch_size\n    )\n\nFinally, we can proceed to use the obtained MixedSequence\nto train our model:\n\n.. code:: python\n\n    model.fit_generator(\n        mixed_sequence,\n        steps_per_epoch=mixed_sequence.steps_per_epoch,\n        epochs=2,\n        verbose=0,\n        shuffle=True\n    )\n\nMulti-task example (classification + auto-encoding)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nLet's start by building an extremely simple multi-tasks model:\n\n.. code:: python\n\n    from tensorflow.keras.models import Model\n    from tensorflow.keras.layers import Dense, Conv2D, Reshape, Flatten, Conv2DTranspose, Input\n\n    inputs = Input(shape=(200, 4))\n\n    flattened = Flatten()(inputs)\n\n    output1 = Dense(\n        units=1,\n        activation=\"relu\",\n        name=\"output1\"\n    )(flattened)\n\n    hidden = Reshape((200, 4, 1))(inputs)\n    hidden = Conv2D(16, kernel_size=3, activation=\"relu\")(hidden)\n    hidden = Conv2DTranspose(1, kernel_size=3, activation=\"relu\")(hidden)\n    output2 = Reshape((200, 4), name=\"output2\")(hidden)\n\n    model = Model(\n        inputs=inputs,\n        outputs=[output1, output2],\n        name=\"my_model\"\n    )\n\n    model.compile(\n        optimizer=\"nadam\",\n        loss=\"MSE\"\n    )\n\nWe then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:\n\n.. code:: python\n\n    import numpy as np\n    from keras_mixed_sequence import MixedSequence\n    from keras_bed_sequence import BedSequence\n\n    batch_size = 32\n    bed_sequence = BedSequence(\n        \"hg19\",\n        \"{cwd}/test.bed\".format(\n            cwd=os.path.dirname(os.path.abspath(__file__))\n        ),\n        batch_size\n    )\n    y = np.random.randint(\n        2,\n        size=(bed_sequence.samples_number, 1)\n    )\n    mixed_sequence = MixedSequence(\n        bed_sequence,\n        {\n            \"output1\": y,\n            \"output2\": bed_sequence\n        },\n        batch_size\n    )\n\nFinally, we can proceed to use the obtained MixedSequence\nto train our model:\n\n.. code:: python\n\n    model.fit_generator(\n        mixed_sequence,\n        steps_per_epoch=mixed_sequence.steps_per_epoch,\n        epochs=2,\n        verbose=0,\n        shuffle=True\n    )\n\n\n.. |travis| image:: https://travis-ci.org/LucaCappelletti94/keras_bed_sequence.png\n   :target: https://travis-ci.org/LucaCappelletti94/keras_bed_sequence\n   :alt: Travis CI build\n\n.. |sonar_quality| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_bed_sequence&metric=alert_status\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\n    :alt: SonarCloud Quality\n\n.. |sonar_maintainability| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_bed_sequence&metric=sqale_rating\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\n    :alt: SonarCloud Maintainability\n\n.. |sonar_coverage| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_keras_bed_sequence&metric=coverage\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\n    :alt: SonarCloud Coverage\n\n.. |coveralls| image:: https://coveralls.io/repos/github/LucaCappelletti94/keras_bed_sequence/badge.svg?branch=master\n    :target: https://coveralls.io/github/LucaCappelletti94/keras_bed_sequence?branch=master\n    :alt: Coveralls Coverage\n\n.. |pip| image:: https://badge.fury.io/py/keras-bed-sequence.svg\n    :target: https://badge.fury.io/py/keras-bed-sequence\n    :alt: Pypi project\n\n.. |downloads| image:: https://pepy.tech/badge/keras-bed-sequence\n    :target: https://pepy.tech/badge/keras-bed-sequence\n    :alt: Pypi total project downloads\n\n.. |codacy| image:: https://api.codacy.com/project/badge/Grade/6bb591f3d405443a9549967eac35b723\n    :target: https://www.codacy.com/manual/LucaCappelletti94/keras_bed_sequence?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=LucaCappelletti94/keras_bed_sequence&amp;utm_campaign=Badge_Grade\n    :alt: Codacy Maintainability\n\n.. |code_climate_maintainability| image:: https://api.codeclimate.com/v1/badges/d601fb2c7485f1ac3433/maintainability\n    :target: https://codeclimate.com/github/LucaCappelletti94/keras_bed_sequence/maintainability\n    :alt: Maintainability\n\n.. |code_climate_coverage| image:: https://api.codeclimate.com/v1/badges/d601fb2c7485f1ac3433/test_coverage\n    :target: https://codeclimate.com/github/LucaCappelletti94/keras_bed_sequence/test_coverage\n    :alt: Code Climate", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LucaCappelletti94/keras_bed_sequence", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "keras-bed-sequence", "package_url": "https://pypi.org/project/keras-bed-sequence/", "platform": "", "project_url": "https://pypi.org/project/keras-bed-sequence/", "project_urls": {"Homepage": "https://github.com/LucaCappelletti94/keras_bed_sequence"}, "release_url": "https://pypi.org/project/keras-bed-sequence/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Lazily one-hot encoding bed sequences using Keras Sequence.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/LucaCappelletti94/keras_bed_sequence\" rel=\"nofollow\"><img alt=\"Travis CI build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efd18c86825ecbef2ff2e76dbc8d23880ae3fafd/68747470733a2f2f7472617669732d63692e6f72672f4c75636143617070656c6c6574746939342f6b657261735f6265645f73657175656e63652e706e67\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d06e1d8aa4ae06baf0e067d74b1920b24cb5a47/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f6265645f73657175656e6365266d65747269633d616c6572745f737461747573\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ebb171f4eb5080cf88908f5d5b8a66c0dcff10d6/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f6265645f73657175656e6365266d65747269633d7371616c655f726174696e67\"></a> <a href=\"https://www.codacy.com/manual/LucaCappelletti94/keras_bed_sequence?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=LucaCappelletti94/keras_bed_sequence&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5149f0fd3cfade7233e4caf405179c8b1dd582fc/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3662623539316633643430353434336139353439393637656163333562373233\"></a>\n<a href=\"https://codeclimate.com/github/LucaCappelletti94/keras_bed_sequence/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9711a8b03f0f6a4164024b6908aebd160036e597/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f64363031666232633734383566316163333433332f6d61696e7461696e6162696c697479\"></a> <a href=\"https://badge.fury.io/py/keras-bed-sequence\" rel=\"nofollow\"><img alt=\"Pypi project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ba1383dbb25ee4a10e737ad51cecb18659f2cce/68747470733a2f2f62616467652e667572792e696f2f70792f6b657261732d6265642d73657175656e63652e737667\"></a> <a href=\"https://pepy.tech/badge/keras-bed-sequence\" rel=\"nofollow\"><img alt=\"Pypi total project downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f7061fb9b86526aca4866267aa1141adfa20f67/68747470733a2f2f706570792e746563682f62616467652f6b657261732d6265642d73657175656e6365\"></a></p>\n<p>Lazily one-hot encoding bed sequences using Keras Sequence.</p>\n<div id=\"how-do-i-install-this-package\">\n<h2>How do I install this package?</h2>\n<p>As usual, just download it using pip:</p>\n<pre>pip install keras_bed_sequence\n</pre>\n</div>\n<div id=\"tests-coverage\">\n<h2>Tests Coverage</h2>\n<p>Since some software handling coverages sometimes get\nslightly different results, here\u2019s three of them:</p>\n<p><a href=\"https://coveralls.io/github/LucaCappelletti94/keras_bed_sequence?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5fb49b044e8e07074a57d59b116ce5ee8ebb289/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4c75636143617070656c6c6574746939342f6b657261735f6265645f73657175656e63652f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_keras_bed_sequence\" rel=\"nofollow\"><img alt=\"SonarCloud Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f19223ffb49239bd335555b69e76f7190e29d4b/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f6b657261735f6265645f73657175656e6365266d65747269633d636f766572616765\"></a> <a href=\"https://codeclimate.com/github/LucaCappelletti94/keras_bed_sequence/test_coverage\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f5fb0dfe761f395207d0b05cb3e0ef52236a43c/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f64363031666232633734383566316163333433332f746573745f636f766572616765\"></a></p>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>The following examples are tested within the package test suite.</p>\n<div id=\"classification-task-example\">\n<h3>Classification task example</h3>\n<p>Let\u2019s start by building an extremely simple classification task model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">Sequential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Dense</span><span class=\"p\">,</span> <span class=\"n\">Flatten</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_mixed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">MixedSequence</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">([</span>\n    <span class=\"n\">Flatten</span><span class=\"p\">(),</span>\n    <span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span>\n    <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s2\">\"nadam\"</span><span class=\"p\">,</span>\n    <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s2\">\"MSE\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>We then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_mixed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">MixedSequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_bed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">BedSequence</span>\n\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">bed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">BedSequence</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"hg19\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"path/to/bed/files.bed\"</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">the_output_values</span>\n<span class=\"n\">mixed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">MixedSequence</span><span class=\"p\">(</span>\n    <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">bed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, we can proceed to use the obtained MixedSequence\nto train our model:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">mixed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"n\">mixed_sequence</span><span class=\"o\">.</span><span class=\"n\">steps_per_epoch</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"auto-encoding-task-example\">\n<h3>Auto-encoding task example</h3>\n<p>Let\u2019s start by building an extremely simple auto-encoding task model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">Sequential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Conv2D</span><span class=\"p\">,</span> <span class=\"n\">Reshape</span><span class=\"p\">,</span> <span class=\"n\">Conv2DTranspose</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Sequential</span><span class=\"p\">([</span>\n    <span class=\"n\">Reshape</span><span class=\"p\">((</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n    <span class=\"n\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">),</span>\n    <span class=\"n\">Conv2DTranspose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">),</span>\n    <span class=\"n\">Reshape</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"p\">])</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span>\n    <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s2\">\"nadam\"</span><span class=\"p\">,</span>\n    <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s2\">\"MSE\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>We then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_mixed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">MixedSequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_bed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">BedSequence</span>\n\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">bed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">BedSequence</span><span class=\"p\">(</span>\n    <span class=\"n\">Genome</span><span class=\"p\">(</span><span class=\"s2\">\"hg19\"</span><span class=\"p\">,</span> <span class=\"n\">chromosomes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"chr1\"</span><span class=\"p\">]),</span>\n    <span class=\"s2\">\"path/to/bed/files.bed\"</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n<span class=\"n\">mixed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">MixedSequence</span><span class=\"p\">(</span>\n    <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">bed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">bed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, we can proceed to use the obtained MixedSequence\nto train our model:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">mixed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"n\">mixed_sequence</span><span class=\"o\">.</span><span class=\"n\">steps_per_epoch</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"multi-task-example-classification-auto-encoding\">\n<h3>Multi-task example (classification + auto-encoding)</h3>\n<p>Let\u2019s start by building an extremely simple multi-tasks model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.models</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tensorflow.keras.layers</span> <span class=\"kn\">import</span> <span class=\"n\">Dense</span><span class=\"p\">,</span> <span class=\"n\">Conv2D</span><span class=\"p\">,</span> <span class=\"n\">Reshape</span><span class=\"p\">,</span> <span class=\"n\">Flatten</span><span class=\"p\">,</span> <span class=\"n\">Conv2DTranspose</span><span class=\"p\">,</span> <span class=\"n\">Input</span>\n\n<span class=\"n\">inputs</span> <span class=\"o\">=</span> <span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n<span class=\"n\">flattened</span> <span class=\"o\">=</span> <span class=\"n\">Flatten</span><span class=\"p\">()(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n\n<span class=\"n\">output1</span> <span class=\"o\">=</span> <span class=\"n\">Dense</span><span class=\"p\">(</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"output1\"</span>\n<span class=\"p\">)(</span><span class=\"n\">flattened</span><span class=\"p\">)</span>\n\n<span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">Reshape</span><span class=\"p\">((</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n<span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">Conv2D</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">)(</span><span class=\"n\">hidden</span><span class=\"p\">)</span>\n<span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">Conv2DTranspose</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s2\">\"relu\"</span><span class=\"p\">)(</span><span class=\"n\">hidden</span><span class=\"p\">)</span>\n<span class=\"n\">output2</span> <span class=\"o\">=</span> <span class=\"n\">Reshape</span><span class=\"p\">((</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"output2\"</span><span class=\"p\">)(</span><span class=\"n\">hidden</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">inputs</span><span class=\"p\">,</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">output1</span><span class=\"p\">,</span> <span class=\"n\">output2</span><span class=\"p\">],</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_model\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span>\n    <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s2\">\"nadam\"</span><span class=\"p\">,</span>\n    <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s2\">\"MSE\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>We then proceed to load the training data into Keras Sequences,\nusing, in particular, a MixedSequence object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_mixed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">MixedSequence</span>\n<span class=\"kn\">from</span> <span class=\"nn\">keras_bed_sequence</span> <span class=\"kn\">import</span> <span class=\"n\">BedSequence</span>\n\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">32</span>\n<span class=\"n\">bed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">BedSequence</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"hg19\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"</span><span class=\"si\">{cwd}</span><span class=\"s2\">/test.bed\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">))</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span>\n    <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">bed_sequence</span><span class=\"o\">.</span><span class=\"n\">samples_number</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">mixed_sequence</span> <span class=\"o\">=</span> <span class=\"n\">MixedSequence</span><span class=\"p\">(</span>\n    <span class=\"n\">bed_sequence</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"output1\"</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"output2\"</span><span class=\"p\">:</span> <span class=\"n\">bed_sequence</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">batch_size</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Finally, we can proceed to use the obtained MixedSequence\nto train our model:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">mixed_sequence</span><span class=\"p\">,</span>\n    <span class=\"n\">steps_per_epoch</span><span class=\"o\">=</span><span class=\"n\">mixed_sequence</span><span class=\"o\">.</span><span class=\"n\">steps_per_epoch</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6728755, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "550980cfcbfba70c1c945c091619a079", "sha256": "81cea79eebb2cc5354a6014e1f2619641c65af78b5b5bea416a2349b06f3e2ad"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.0.tar.gz", "has_sig": false, "md5_digest": "550980cfcbfba70c1c945c091619a079", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5514, "upload_time": "2020-01-25T15:58:49", "upload_time_iso_8601": "2020-01-25T15:58:49.938654Z", "url": "https://files.pythonhosted.org/packages/6f/6d/0d03f9e0341ef3059a047354832c9396670b59014cc1b2b308871da595ca/keras_bed_sequence-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "48554acb0b0723a81eba3621cf51b20c", "sha256": "66ea4899b0b02e7f5a7a6dbf301fd5cdad3efd072ccf8f05cde204d8c6083615"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.1.tar.gz", "has_sig": false, "md5_digest": "48554acb0b0723a81eba3621cf51b20c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5629, "upload_time": "2020-01-27T09:57:10", "upload_time_iso_8601": "2020-01-27T09:57:10.190975Z", "url": "https://files.pythonhosted.org/packages/53/cd/3641bf58dfeb6fffb09b4f8895220132688a1751e20394c63042bc1c0c1c/keras_bed_sequence-1.0.1.tar.gz", "yanked": false}], "1.0.10": [{"comment_text": "", "digests": {"md5": "35283b1e81584fc9c244e3fb30ebb4df", "sha256": "d6434506bf0a54bf333fec90b4ff0c543e95126b78bba9556b7f05a1a460915f"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.10.tar.gz", "has_sig": false, "md5_digest": "35283b1e81584fc9c244e3fb30ebb4df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7194, "upload_time": "2020-02-20T19:59:37", "upload_time_iso_8601": "2020-02-20T19:59:37.937698Z", "url": "https://files.pythonhosted.org/packages/f1/23/7f2c0177c28a2875a3ea734056d9c059aae8e74dd13762980d584619e140/keras_bed_sequence-1.0.10.tar.gz", "yanked": false}], "1.0.11": [{"comment_text": "", "digests": {"md5": "cdec958b3a7590558024de5dbbc8cb4b", "sha256": "1d6a8dccf5734fe1f6dbfc36957ade53747522ca69b75918154490815be3f52c"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.11.tar.gz", "has_sig": false, "md5_digest": "cdec958b3a7590558024de5dbbc8cb4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7212, "upload_time": "2020-02-20T21:53:59", "upload_time_iso_8601": "2020-02-20T21:53:59.594919Z", "url": "https://files.pythonhosted.org/packages/c0/dc/907e1b6afc746b8318651be92e4935ab822a69a643bd3ab37f82b272cee8/keras_bed_sequence-1.0.11.tar.gz", "yanked": false}], "1.0.12": [{"comment_text": "", "digests": {"md5": "08e23dcccb9370a449c5687c02022159", "sha256": "96e319e87333484bfac6663b6e3bc8207b733eea31b4457380c133c53f136170"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.12.tar.gz", "has_sig": false, "md5_digest": "08e23dcccb9370a449c5687c02022159", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7282, "upload_time": "2020-02-22T14:50:42", "upload_time_iso_8601": "2020-02-22T14:50:42.874631Z", "url": "https://files.pythonhosted.org/packages/bb/4e/ed765d2042b88c40a126ca151ecdaa9a6073b54f3fa228ffe117e03c4eda/keras_bed_sequence-1.0.12.tar.gz", "yanked": false}], "1.0.13": [{"comment_text": "", "digests": {"md5": "18f8b3786526b8dae69466283a61a9ed", "sha256": "2a77a177936906e7207f4d94ea9746f9595808ac777fb284fdd57c1afd6d36d0"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.13.tar.gz", "has_sig": false, "md5_digest": "18f8b3786526b8dae69466283a61a9ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7316, "upload_time": "2020-02-22T17:15:51", "upload_time_iso_8601": "2020-02-22T17:15:51.179257Z", "url": "https://files.pythonhosted.org/packages/ca/e7/1fbf4afef8c4b7ba0c792ed7c133315649a0b564cffb4a2847c813f13435/keras_bed_sequence-1.0.13.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6d8ba41e024063bd11e8d2af2af6c3ba", "sha256": "443df9961b39bbbf5690400d3bc91553af69601ec879a797cade8b5737f19151"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6d8ba41e024063bd11e8d2af2af6c3ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5669, "upload_time": "2020-01-27T10:07:57", "upload_time_iso_8601": "2020-01-27T10:07:57.843575Z", "url": "https://files.pythonhosted.org/packages/38/81/adfeb4063dabd08d5a3402ee3bf3428acf26c83ed915a6dd73f08c4165ee/keras_bed_sequence-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "d765847335da1c56ef4908158b0d7117", "sha256": "c210fb2676088d63bb5f98f13eb656b0dd7e74026093e8f5be99ce01b7b66c42"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.4.tar.gz", "has_sig": false, "md5_digest": "d765847335da1c56ef4908158b0d7117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6361, "upload_time": "2020-01-29T16:03:29", "upload_time_iso_8601": "2020-01-29T16:03:29.879950Z", "url": "https://files.pythonhosted.org/packages/92/10/ec96b76d5766eafb8ad9c5fae21320300049a2d88bdfe426765d2a513675/keras_bed_sequence-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "5fd8d6770c0eb0014028e52d9163a894", "sha256": "af4a984af896fdaf39b27418bf3531ed6459a3a7569522f6c2f67d7f7d3146c5"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5fd8d6770c0eb0014028e52d9163a894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6964, "upload_time": "2020-01-30T09:04:32", "upload_time_iso_8601": "2020-01-30T09:04:32.570401Z", "url": "https://files.pythonhosted.org/packages/f6/ff/cb36248648c0c8ebcca7e8193761ab6f38908e303873598e432037bea2a1/keras_bed_sequence-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "c9d9f3cb2da1e80485910e6cfa5fe9b0", "sha256": "226687d20b980be384bbb7b8b544a2d9fc0c36d562176d4cebcb89c21887dce3"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.6.tar.gz", "has_sig": false, "md5_digest": "c9d9f3cb2da1e80485910e6cfa5fe9b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6990, "upload_time": "2020-01-30T10:10:21", "upload_time_iso_8601": "2020-01-30T10:10:21.997583Z", "url": "https://files.pythonhosted.org/packages/02/5d/bd7ecddbcf11a0c20fc5e07b5f8203fa59f433d4a610340c3beddd797c7b/keras_bed_sequence-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "8f4a09252910620b64c265dd428840d6", "sha256": "b78ea9ac41b2207cb842dee63bb923ac8e7109b9f0e3a20940868d95bb616abd"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.7.tar.gz", "has_sig": false, "md5_digest": "8f4a09252910620b64c265dd428840d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6988, "upload_time": "2020-01-30T18:45:40", "upload_time_iso_8601": "2020-01-30T18:45:40.886715Z", "url": "https://files.pythonhosted.org/packages/f0/dd/1080862adb9ef2c5295332936fca8f389c775cadb98fe7c1ea4a6a80d936/keras_bed_sequence-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "642415e3d2180ee65bf6a3b25e861b2e", "sha256": "fa3ea43e31ae5285cb6f71c481cd8bf0ee737612aed975f118b2533ab70add60"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.8.tar.gz", "has_sig": false, "md5_digest": "642415e3d2180ee65bf6a3b25e861b2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6991, "upload_time": "2020-01-30T21:28:34", "upload_time_iso_8601": "2020-01-30T21:28:34.246306Z", "url": "https://files.pythonhosted.org/packages/b2/d1/83a356d76375a659ef464e185db870ce3001c2e663f3360181f26b606a5c/keras_bed_sequence-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "2bb575470fbb786c18b2ed763deed26f", "sha256": "78b640108513293de7c9e0047fbdfe761764c7aa3387d85dd2e6314b6a550c9e"}, "downloads": -1, "filename": "keras_bed_sequence-1.0.9.tar.gz", "has_sig": false, "md5_digest": "2bb575470fbb786c18b2ed763deed26f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7203, "upload_time": "2020-02-20T19:22:31", "upload_time_iso_8601": "2020-02-20T19:22:31.804992Z", "url": "https://files.pythonhosted.org/packages/1c/eb/bafd5e93f6089794372521ece267ebe9bba7c0ffec5f4948db397453d830/keras_bed_sequence-1.0.9.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "002a063026499cf04e0e1287335d26d7", "sha256": "3e7de421829f266009a81dc997fa90b9dd4a801d03d845de2f96e536733c75bd"}, "downloads": -1, "filename": "keras_bed_sequence-1.1.0.tar.gz", "has_sig": false, "md5_digest": "002a063026499cf04e0e1287335d26d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7488, "upload_time": "2020-03-01T15:04:25", "upload_time_iso_8601": "2020-03-01T15:04:25.431245Z", "url": "https://files.pythonhosted.org/packages/07/ec/8451fe24180744220f06c5bca3a8a797868e04609c7244b6735fb4c0cdc1/keras_bed_sequence-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "66f60078407433364ef088aa102565cd", "sha256": "b34e661f1de4e07a907d4a21ea58b57cf1d372e8af2c3d26c26303380616b8a2"}, "downloads": -1, "filename": "keras_bed_sequence-1.1.1.tar.gz", "has_sig": false, "md5_digest": "66f60078407433364ef088aa102565cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7490, "upload_time": "2020-03-01T15:21:50", "upload_time_iso_8601": "2020-03-01T15:21:50.352562Z", "url": "https://files.pythonhosted.org/packages/14/bb/447dc5afee5253ad5c4c77a7d758c5fac4597ba2235c0f9bc96dfa4ef6c4/keras_bed_sequence-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66f60078407433364ef088aa102565cd", "sha256": "b34e661f1de4e07a907d4a21ea58b57cf1d372e8af2c3d26c26303380616b8a2"}, "downloads": -1, "filename": "keras_bed_sequence-1.1.1.tar.gz", "has_sig": false, "md5_digest": "66f60078407433364ef088aa102565cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7490, "upload_time": "2020-03-01T15:21:50", "upload_time_iso_8601": "2020-03-01T15:21:50.352562Z", "url": "https://files.pythonhosted.org/packages/14/bb/447dc5afee5253ad5c4c77a7d758c5fac4597ba2235c0f9bc96dfa4ef6c4/keras_bed_sequence-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:14 2020"}