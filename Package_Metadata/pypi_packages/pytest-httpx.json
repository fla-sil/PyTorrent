{"info": {"author": "Colin Bounouar", "author_email": "colin.bounouar.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Build Tools"], "description": "<h2 align=\"center\">Send responses to HTTPX using pytest</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/pytest-httpx/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/pytest_httpx\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\"><img alt=\"Build status\" src=\"https://api.travis-ci.com/Colin-b/pytest_httpx.svg?branch=master\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-72 passed-blue\"></a>\n<a href=\"https://pypi.org/project/pytest-httpx/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/pytest_httpx\"></a>\n</p>\n\n> Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).\n>\n> However current state can be considered as stable.\n\nOnce installed, `httpx_mock` [`pytest`](https://docs.pytest.org/en/latest/) fixture will make sure every [`httpx`](https://www.python-httpx.org) request will be replied to with user provided responses.\n\n- [Add responses](#add-responses)\n  - [JSON body](#add-json-response)\n  - [Custom body](#reply-with-custom-body)\n  - [Multipart body (files, ...)](#add-multipart-response)\n  - [HTTP status code](#add-non-200-response)\n  - [HTTP headers](#reply-with-custom-headers)\n  - [HTTP/2.0](#add-http/2.0-response)\n- [Add dynamic responses](#dynamic-responses)\n- [Raising exceptions](#raising-exceptions)\n- [Check requests](#check-sent-requests)\n\n## Add responses\n\nYou can register responses for both sync and async [`HTTPX`](https://www.python-httpx.org) requests.\n\n`httpx_mock` fixture is available within `pytest_httpx`.\n\n```python\nimport pytest\nimport httpx\nfrom pytest_httpx import httpx_mock\n\n\ndef test_something(httpx_mock):\n    httpx_mock.add_response()\n\n    with httpx.Client() as client:\n        response = client.get(\"http://test_url\")\n\n\n@pytest.mark.asyncio\nasync def test_something_async(httpx_mock):\n    httpx_mock.add_response()\n\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"http://test_url\")\n```\n\nIf all registered responses are not sent back during test execution, the test case will fail at teardown.\n\nDefault response is a HTTP/1.1 200 (OK) without any body.\n\n### How response is selected\n\nIn case more than one response match request, the first one not yet sent (according to the registration order) will be sent.\n\nIn case all matching responses have been sent, the last one (according to the registration order) will be sent.\n\nYou can add criteria so that response will be sent only in case of a more specific matching.\n\n#### Matching on URL\n\n`url` parameter can either be a string, a python [re.Pattern](https://docs.python.org/3/library/re.html) instance or a [httpx.URL](https://www.python-httpx.org/api/#url) instance.\n\nMatching is performed on the full URL, query parameters included.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_url(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(url=\"http://test_url\")\n\n    with httpx.Client() as client:\n        response1 = client.delete(\"http://test_url\")\n        response2 = client.get(\"http://test_url\")\n```\n\n#### Matching on HTTP method\n\nUse `method` parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) to reply to.\n\n`method` parameter must be a string. It will be upper cased so it can be provided lower cased.\n\nMatching is performed on equality.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_post(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(method=\"POST\")\n\n    with httpx.Client() as client:\n        response = client.post(\"http://test_url\")\n\n\ndef test_put(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(method=\"PUT\")\n\n    with httpx.Client() as client:\n        response = client.put(\"http://test_url\")\n\n\ndef test_delete(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(method=\"DELETE\")\n\n    with httpx.Client() as client:\n        response = client.delete(\"http://test_url\")\n\n\ndef test_patch(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(method=\"PATCH\")\n\n    with httpx.Client() as client:\n        response = client.patch(\"http://test_url\")\n\n\ndef test_head(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(method=\"HEAD\")\n\n    with httpx.Client() as client:\n        response = client.head(\"http://test_url\")\n\n```\n\n#### Matching on HTTP headers\n\nUse `match_headers` parameter to specify the HTTP headers to reply to.\n\nMatching is performed on equality for each provided header.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_headers_matching(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(match_headers={'user-agent': 'python-httpx/0.11.1'})\n\n    with httpx.Client() as client:\n        response = client.get(\"http://test_url\")\n```\n\n#### Matching on HTTP body\n\nUse `match_content` parameter to specify the full HTTP body to reply to.\n\nMatching is performed on equality.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_content_matching(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(match_content=b\"This is the body\")\n\n    with httpx.Client() as client:\n        response = client.post(\"http://test_url\", data=b\"This is the body\")\n```\n\n### Add JSON response\n\nUse `json` parameter to add a JSON response using python values.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_json(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(json=[{\"key1\": \"value1\", \"key2\": \"value2\"}])\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").json() == [{\"key1\": \"value1\", \"key2\": \"value2\"}]\n\n```\n\n### Reply with custom body\n\nUse `data` parameter to reply with a custom body by providing bytes or UTF-8 encoded string.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_str_body(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(data=\"This is my UTF-8 content\")\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").text == \"This is my UTF-8 content\"\n\n\ndef test_bytes_body(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(data=b\"This is my bytes content\")\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").content == b\"This is my bytes content\"\n\n```\n\n### Add multipart response\n\nUse `data` parameter as a dictionary or `files` parameter (or both) to send multipart response.\n\nYou can specify `boundary` parameter to specify the multipart boundary to use.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_multipart_body(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(data={\"key1\": \"value1\"}, files={\"file1\": \"content of file 1\"}, boundary=b\"2256d3a36d2a61a1eba35a22bee5c74a\")\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").text == '''--2256d3a36d2a61a1eba35a22bee5c74a\\r\nContent-Disposition: form-data; name=\"key1\"\\r\n\\r\nvalue1\\r\n--2256d3a36d2a61a1eba35a22bee5c74a\\r\nContent-Disposition: form-data; name=\"file1\"; filename=\"upload\"\\r\nContent-Type: application/octet-stream\\r\n\\r\ncontent of file 1\\r\n--2256d3a36d2a61a1eba35a22bee5c74a--\\r\n'''\n\n```\n\n### Add non 200 response\n\nUse `status_code` parameter to specify the HTTP status code of the response.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_status_code(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(status_code=404)\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").status_code == 404\n\n```\n\n### Reply with custom headers\n\nUse `headers` parameter to specify the extra headers of the response.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_headers(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(headers={\"X-Header1\": \"Test value\"})\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").headers[\"x-header1\"] == \"Test value\"\n\n```\n\n### Add HTTP/2.0 response\n\nUse `http_version` parameter to specify the HTTP protocol version of the response.\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_http_version(httpx_mock: HTTPXMock):\n    httpx_mock.add_response(http_version=\"HTTP/2.0\")\n\n    with httpx.Client() as client:\n        assert client.get(\"http://test_url\").http_version == \"HTTP/2.0\"\n\n```\n\n## Add callbacks\n\nYou can perform custom manipulation upon request reception by registering callbacks.\n\nCallback should expect at least two parameters:\n * request: The received [`httpx.Request`](https://www.python-httpx.org/api/#request).\n * timeout: The [`httpx.Timeout`](https://www.python-httpx.org/advanced/#timeout-configuration) linked to the request.\n\nIf all callbacks are not executed during test execution, the test case will fail at teardown.\n\n### Dynamic responses\n\nCallback should return a [`httpx.Response`](https://www.python-httpx.org/api/#response) instance.\n\n```python\nimport httpx\nfrom httpx._content_streams import JSONStream\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_dynamic_response(httpx_mock: HTTPXMock):\n    def custom_response(request: httpx.Request, *args, **kwargs) -> httpx.Response:\n        return httpx.Response(\n            status_code=200,\n            http_version=\"HTTP/1.1\",\n            headers=[],\n            stream=JSONStream({\"url\": str(request.url)}),\n            request=request,\n        )\n\n    httpx_mock.add_callback(custom_response)\n\n    with httpx.Client() as client:\n        response = client.get(\"http://test_url\")\n        assert response.json() == {\"url\": \"http://test_url\"}\n\n```\n\n### Raising exceptions\n\nYou can simulate HTTPX exception throwing by raising an exception in your callback.\n\nThis can be useful if you want to assert that your code handles HTTPX exceptions properly.\n\n```python\nimport httpx\nimport pytest\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_exception_raising(httpx_mock: HTTPXMock):\n    def raise_timeout(*args, **kwargs) -> httpx.Response:\n        raise httpx.exceptions.TimeoutException()\n\n    httpx_mock.add_callback(raise_timeout)\n\n    with httpx.Client() as client:\n        with pytest.raises(httpx.exceptions.TimeoutException):\n            client.get(\"http://test_url\")\n\n```\n\n### How callback is selected\n\nIn case more than one callback match request, the first one not yet executed (according to the registration order) will be executed.\n\nIn case all matching callbacks have been executed, the last one (according to the registration order) will be executed.\n\nYou can add criteria so that callback will be sent only in case of a more specific matching.\n\n#### Matching on URL\n\n`url` parameter can either be a string, a python [re.Pattern](https://docs.python.org/3/library/re.html) instance or a [httpx.URL](https://www.python-httpx.org/api/#url) instance.\n\nMatching is performed on the full URL, query parameters included.\n\n#### Matching on HTTP method\n\nUse `method` parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) executing the callback.\n\n`method` parameter must be a string. It will be upper cased so it can be provided lower cased.\n\nMatching is performed on equality.\n\n#### Matching on HTTP headers\n\nUse `match_headers` parameter to specify the HTTP headers executing the callback.\n\nMatching is performed on equality for each provided header.\n\n#### Matching on HTTP body\n\nUse `match_content` parameter to specify the full HTTP body executing the callback.\n\nMatching is performed on equality.\n\n## Check sent requests\n\n```python\nimport httpx\nfrom pytest_httpx import httpx_mock, HTTPXMock\n\n\ndef test_many_requests(httpx_mock: HTTPXMock):\n    httpx_mock.add_response()\n\n    with httpx.Client() as client:\n        response1 = client.get(\"http://test_url\")\n        response2 = client.get(\"http://test_url\")\n\n    requests = httpx_mock.get_requests()\n\n\ndef test_single_request(httpx_mock: HTTPXMock):\n    httpx_mock.add_response()\n\n    with httpx.Client() as client:\n        response = client.get(\"http://test_url\")\n\n    request = httpx_mock.get_request()\n```\n\n### How requests are selected\n\nYou can add criteria so that requests will be returned only in case of a more specific matching.\n\n#### Matching on URL\n\n`url` parameter can either be a string, a python [re.Pattern](https://docs.python.org/3/library/re.html) instance or a [httpx.URL](https://www.python-httpx.org/api/#url) instance.\n\nMatching is performed on the full URL, query parameters included.\n\n#### Matching on HTTP method\n\nUse `method` parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) of the requests to retrieve.\n\n`method` parameter must be a string. It will be upper cased so it can be provided lower cased.\n\nMatching is performed on equality.\n\n#### Matching on HTTP headers\n\nUse `match_headers` parameter to specify the HTTP headers executing the callback.\n\nMatching is performed on equality for each provided header.\n\n#### Matching on HTTP body\n\nUse `match_content` parameter to specify the full HTTP body executing the callback.\n\nMatching is performed on equality.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.org/project/pytest-httpx/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://colin-b.github.io/pytest_httpx/", "keywords": "pytest,testing,mock,httpx", "license": "MIT", "maintainer": "Colin Bounouar", "maintainer_email": "colin.bounouar.dev@gmail.com", "name": "pytest-httpx", "package_url": "https://pypi.org/project/pytest-httpx/", "platform": "Windows", "project_url": "https://pypi.org/project/pytest-httpx/", "project_urls": {"Changelog": "https://github.com/Colin-b/pytest_httpx/blob/master/CHANGELOG.md", "Download": "https://pypi.org/project/pytest-httpx/", "GitHub": "https://github.com/Colin-b/pytest_httpx", "Homepage": "https://colin-b.github.io/pytest_httpx/", "Issues": "https://github.com/Colin-b/pytest_httpx/issues"}, "release_url": "https://pypi.org/project/pytest-httpx/0.2.1/", "requires_dist": ["httpx (==0.12.*)", "pytest (==5.*)", "pytest-asyncio (==0.10.*) ; extra == 'testing'", "pytest-cov (==2.*) ; extra == 'testing'"], "requires_python": ">=3.6", "summary": "Send responses to httpx.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Send responses to HTTPX using pytest</h2>\n<p align=\"center\">\n<a href=\"https://pypi.org/project/pytest-httpx/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d13ca2480e8429550b1f2f90e996fb794845700e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573745f6874747078\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfa2109a4a84d0c9125939500fe4b08cbc1691bc/68747470733a2f2f6170692e7472617669732d63692e636f6d2f436f6c696e2d622f7079746573745f68747470782e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0280f255d36847e3743058a68bedfb93626e993f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d627269676874677265656e\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://travis-ci.com/Colin-b/pytest_httpx\" rel=\"nofollow\"><img alt=\"Number of tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a90fb75c4e5f37f13c5622c6dc87b0d9111d38b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f74657374732d3732207061737365642d626c7565\"></a>\n<a href=\"https://pypi.org/project/pytest-httpx/\" rel=\"nofollow\"><img alt=\"Number of downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2febfaede328c95fd6478daec52200e911c65353/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7079746573745f6874747078\"></a>\n</p>\n<blockquote>\n<p>Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).</p>\n<p>However current state can be considered as stable.</p>\n</blockquote>\n<p>Once installed, <code>httpx_mock</code> <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\"><code>pytest</code></a> fixture will make sure every <a href=\"https://www.python-httpx.org\" rel=\"nofollow\"><code>httpx</code></a> request will be replied to with user provided responses.</p>\n<ul>\n<li><a href=\"#add-responses\" rel=\"nofollow\">Add responses</a>\n<ul>\n<li><a href=\"#add-json-response\" rel=\"nofollow\">JSON body</a></li>\n<li><a href=\"#reply-with-custom-body\" rel=\"nofollow\">Custom body</a></li>\n<li><a href=\"#add-multipart-response\" rel=\"nofollow\">Multipart body (files, ...)</a></li>\n<li><a href=\"#add-non-200-response\" rel=\"nofollow\">HTTP status code</a></li>\n<li><a href=\"#reply-with-custom-headers\" rel=\"nofollow\">HTTP headers</a></li>\n<li><a href=\"#add-http/2.0-response\" rel=\"nofollow\">HTTP/2.0</a></li>\n</ul>\n</li>\n<li><a href=\"#dynamic-responses\" rel=\"nofollow\">Add dynamic responses</a></li>\n<li><a href=\"#raising-exceptions\" rel=\"nofollow\">Raising exceptions</a></li>\n<li><a href=\"#check-sent-requests\" rel=\"nofollow\">Check requests</a></li>\n</ul>\n<h2>Add responses</h2>\n<p>You can register responses for both sync and async <a href=\"https://www.python-httpx.org\" rel=\"nofollow\"><code>HTTPX</code></a> requests.</p>\n<p><code>httpx_mock</code> fixture is available within <code>pytest_httpx</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">asyncio</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_something_async</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">AsyncClient</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n</pre>\n<p>If all registered responses are not sent back during test execution, the test case will fail at teardown.</p>\n<p>Default response is a HTTP/1.1 200 (OK) without any body.</p>\n<h3>How response is selected</h3>\n<p>In case more than one response match request, the first one not yet sent (according to the registration order) will be sent.</p>\n<p>In case all matching responses have been sent, the last one (according to the registration order) will be sent.</p>\n<p>You can add criteria so that response will be sent only in case of a more specific matching.</p>\n<h4>Matching on URL</h4>\n<p><code>url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\" rel=\"nofollow\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\" rel=\"nofollow\">httpx.URL</a> instance.</p>\n<p>Matching is performed on the full URL, query parameters included.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_url</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response1</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n        <span class=\"n\">response2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Matching on HTTP method</h4>\n<p>Use <code>method</code> parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) to reply to.</p>\n<p><code>method</code> parameter must be a string. It will be upper cased so it can be provided lower cased.</p>\n<p>Matching is performed on equality.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_post</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">\"POST\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_put</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_delete</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_patch</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">\"PATCH\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_head</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">\"HEAD\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Matching on HTTP headers</h4>\n<p>Use <code>match_headers</code> parameter to specify the HTTP headers to reply to.</p>\n<p>Matching is performed on equality for each provided header.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_headers_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'user-agent'</span><span class=\"p\">:</span> <span class=\"s1\">'python-httpx/0.11.1'</span><span class=\"p\">})</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Matching on HTTP body</h4>\n<p>Use <code>match_content</code> parameter to specify the full HTTP body to reply to.</p>\n<p>Matching is performed on equality.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_content_matching</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">match_content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"This is the body\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"This is the body\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Add JSON response</h3>\n<p>Use <code>json</code> parameter to add a JSON response using python values.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_json</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">[{</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">}])</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value2\"</span><span class=\"p\">}]</span>\n</pre>\n<h3>Reply with custom body</h3>\n<p>Use <code>data</code> parameter to reply with a custom body by providing bytes or UTF-8 encoded string.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_str_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">\"This is my UTF-8 content\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s2\">\"This is my UTF-8 content\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_bytes_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"This is my bytes content\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"This is my bytes content\"</span>\n</pre>\n<h3>Add multipart response</h3>\n<p>Use <code>data</code> parameter as a dictionary or <code>files</code> parameter (or both) to send multipart response.</p>\n<p>You can specify <code>boundary</code> parameter to specify the multipart boundary to use.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_multipart_body</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value1\"</span><span class=\"p\">},</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"file1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"content of file 1\"</span><span class=\"p\">},</span> <span class=\"n\">boundary</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"2256d3a36d2a61a1eba35a22bee5c74a\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s1\">'''--2256d3a36d2a61a1eba35a22bee5c74a</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">Content-Disposition: form-data; name=\"key1\"</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">value1</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">--2256d3a36d2a61a1eba35a22bee5c74a</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">Content-Disposition: form-data; name=\"file1\"; filename=\"upload\"</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">Content-Type: application/octet-stream</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">content of file 1</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">--2256d3a36d2a61a1eba35a22bee5c74a--</span><span class=\"se\">\\r</span><span class=\"s1\"></span>\n<span class=\"s1\">'''</span>\n</pre>\n<h3>Add non 200 response</h3>\n<p>Use <code>status_code</code> parameter to specify the HTTP status code of the response.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_status_code</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">404</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span>\n</pre>\n<h3>Reply with custom headers</h3>\n<p>Use <code>headers</code> parameter to specify the extra headers of the response.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_headers</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"X-Header1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test value\"</span><span class=\"p\">})</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"x-header1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"Test value\"</span>\n</pre>\n<h3>Add HTTP/2.0 response</h3>\n<p>Use <code>http_version</code> parameter to specify the HTTP protocol version of the response.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_http_version</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">(</span><span class=\"n\">http_version</span><span class=\"o\">=</span><span class=\"s2\">\"HTTP/2.0\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">http_version</span> <span class=\"o\">==</span> <span class=\"s2\">\"HTTP/2.0\"</span>\n</pre>\n<h2>Add callbacks</h2>\n<p>You can perform custom manipulation upon request reception by registering callbacks.</p>\n<p>Callback should expect at least two parameters:</p>\n<ul>\n<li>request: The received <a href=\"https://www.python-httpx.org/api/#request\" rel=\"nofollow\"><code>httpx.Request</code></a>.</li>\n<li>timeout: The <a href=\"https://www.python-httpx.org/advanced/#timeout-configuration\" rel=\"nofollow\"><code>httpx.Timeout</code></a> linked to the request.</li>\n</ul>\n<p>If all callbacks are not executed during test execution, the test case will fail at teardown.</p>\n<h3>Dynamic responses</h3>\n<p>Callback should return a <a href=\"https://www.python-httpx.org/api/#response\" rel=\"nofollow\"><code>httpx.Response</code></a> instance.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">httpx._content_streams</span> <span class=\"kn\">import</span> <span class=\"n\">JSONStream</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_dynamic_response</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">custom_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span>\n            <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n            <span class=\"n\">http_version</span><span class=\"o\">=</span><span class=\"s2\">\"HTTP/1.1\"</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n            <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">JSONStream</span><span class=\"p\">({</span><span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)}),</span>\n            <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"n\">custom_response</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://test_url\"</span><span class=\"p\">}</span>\n</pre>\n<h3>Raising exceptions</h3>\n<p>You can simulate HTTPX exception throwing by raising an exception in your callback.</p>\n<p>This can be useful if you want to assert that your code handles HTTPX exceptions properly.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_exception_raising</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">raise_timeout</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">TimeoutException</span><span class=\"p\">()</span>\n\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_callback</span><span class=\"p\">(</span><span class=\"n\">raise_timeout</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">TimeoutException</span><span class=\"p\">):</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n</pre>\n<h3>How callback is selected</h3>\n<p>In case more than one callback match request, the first one not yet executed (according to the registration order) will be executed.</p>\n<p>In case all matching callbacks have been executed, the last one (according to the registration order) will be executed.</p>\n<p>You can add criteria so that callback will be sent only in case of a more specific matching.</p>\n<h4>Matching on URL</h4>\n<p><code>url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\" rel=\"nofollow\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\" rel=\"nofollow\">httpx.URL</a> instance.</p>\n<p>Matching is performed on the full URL, query parameters included.</p>\n<h4>Matching on HTTP method</h4>\n<p>Use <code>method</code> parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) executing the callback.</p>\n<p><code>method</code> parameter must be a string. It will be upper cased so it can be provided lower cased.</p>\n<p>Matching is performed on equality.</p>\n<h4>Matching on HTTP headers</h4>\n<p>Use <code>match_headers</code> parameter to specify the HTTP headers executing the callback.</p>\n<p>Matching is performed on equality for each provided header.</p>\n<h4>Matching on HTTP body</h4>\n<p>Use <code>match_content</code> parameter to specify the full HTTP body executing the callback.</p>\n<p>Matching is performed on equality.</p>\n<h2>Check sent requests</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">httpx</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytest_httpx</span> <span class=\"kn\">import</span> <span class=\"n\">httpx_mock</span><span class=\"p\">,</span> <span class=\"n\">HTTPXMock</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_many_requests</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response1</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n        <span class=\"n\">response2</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">requests</span> <span class=\"o\">=</span> <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">get_requests</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_single_request</span><span class=\"p\">(</span><span class=\"n\">httpx_mock</span><span class=\"p\">:</span> <span class=\"n\">HTTPXMock</span><span class=\"p\">):</span>\n    <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">add_response</span><span class=\"p\">()</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">httpx</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://test_url\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">httpx_mock</span><span class=\"o\">.</span><span class=\"n\">get_request</span><span class=\"p\">()</span>\n</pre>\n<h3>How requests are selected</h3>\n<p>You can add criteria so that requests will be returned only in case of a more specific matching.</p>\n<h4>Matching on URL</h4>\n<p><code>url</code> parameter can either be a string, a python <a href=\"https://docs.python.org/3/library/re.html\" rel=\"nofollow\">re.Pattern</a> instance or a <a href=\"https://www.python-httpx.org/api/#url\" rel=\"nofollow\">httpx.URL</a> instance.</p>\n<p>Matching is performed on the full URL, query parameters included.</p>\n<h4>Matching on HTTP method</h4>\n<p>Use <code>method</code> parameter to specify the HTTP method (POST, PUT, DELETE, PATCH, HEAD) of the requests to retrieve.</p>\n<p><code>method</code> parameter must be a string. It will be upper cased so it can be provided lower cased.</p>\n<p>Matching is performed on equality.</p>\n<h4>Matching on HTTP headers</h4>\n<p>Use <code>match_headers</code> parameter to specify the HTTP headers executing the callback.</p>\n<p>Matching is performed on equality for each provided header.</p>\n<h4>Matching on HTTP body</h4>\n<p>Use <code>match_content</code> parameter to specify the full HTTP body executing the callback.</p>\n<p>Matching is performed on equality.</p>\n\n          </div>"}, "last_serial": 6851394, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7f619b7177d678720e8709f6f0c8504c", "sha256": "af6c32a86017eb4b701cc6f5cd8dc843336e479a9164059a6dfbf9536e7427f7"}, "downloads": -1, "filename": "pytest_httpx-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7f619b7177d678720e8709f6f0c8504c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4672, "upload_time": "2020-02-05T15:51:39", "upload_time_iso_8601": "2020-02-05T15:51:39.425334Z", "url": "https://files.pythonhosted.org/packages/0e/8e/00159fef20086d3f0b1b78f2a42bed03d4e8b2b84b04a4d0a15f48fdcf1f/pytest_httpx-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a478387c65d2bc76d8f70f52d063cf1a", "sha256": "d7431dc30637a00f1f0afa95713ca73a022b7f53ac6f8a00b5679baaf6a0a6cd"}, "downloads": -1, "filename": "pytest_httpx-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a478387c65d2bc76d8f70f52d063cf1a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3518, "upload_time": "2020-02-05T15:51:41", "upload_time_iso_8601": "2020-02-05T15:51:41.145346Z", "url": "https://files.pythonhosted.org/packages/9e/56/3771603c1636b38e89be8d26cd12dc032b0db7f9487ee87e38293292f2fe/pytest_httpx-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "83487f2b5df1e87980fd1cdc64009698", "sha256": "cf192c2484a2220af2a69dfdffe7a4221d8037b6e2d102467912b0488e237819"}, "downloads": -1, "filename": "pytest_httpx-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "83487f2b5df1e87980fd1cdc64009698", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5164, "upload_time": "2020-02-06T00:04:56", "upload_time_iso_8601": "2020-02-06T00:04:56.049329Z", "url": "https://files.pythonhosted.org/packages/14/84/881cebfbc24529f33e50f989bef623c2c8355604a1a67bb792a5a6b6f17c/pytest_httpx-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cde2477472ac33f723c7d7e96e63460", "sha256": "e7156769d1476c38ea35dfed687874a508928e8bc56cbd848fa6d62d29d5e02b"}, "downloads": -1, "filename": "pytest_httpx-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0cde2477472ac33f723c7d7e96e63460", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3987, "upload_time": "2020-02-06T00:04:57", "upload_time_iso_8601": "2020-02-06T00:04:57.091075Z", "url": "https://files.pythonhosted.org/packages/c9/fb/133f80f54d67874fb603deb62d911a37f9d279b0bce9bef3b4e3fbcd3765/pytest_httpx-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "731b00ff461bf2c2120e77e10c37f1f2", "sha256": "8ed70f37dd6ef0c28c374bfdc71b759b31fa61dd164a4ff2b6258dcb4e8ec9fd"}, "downloads": -1, "filename": "pytest_httpx-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "731b00ff461bf2c2120e77e10c37f1f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7653, "upload_time": "2020-02-06T21:46:59", "upload_time_iso_8601": "2020-02-06T21:46:59.847175Z", "url": "https://files.pythonhosted.org/packages/99/4c/154c0626828169bd19b6b49ad0f7979f121025e0b72776a35385b68e4b0a/pytest_httpx-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4414389a0474f68791e1a05cac7ebfe3", "sha256": "2edcf2f1c050f362467d5277314dbac0da7637d87a4ca6d117f338da46b825f3"}, "downloads": -1, "filename": "pytest_httpx-0.0.3.tar.gz", "has_sig": false, "md5_digest": "4414389a0474f68791e1a05cac7ebfe3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8082, "upload_time": "2020-02-06T21:47:01", "upload_time_iso_8601": "2020-02-06T21:47:01.027457Z", "url": "https://files.pythonhosted.org/packages/38/b0/f6031342d0e4d4b9d98e24b2bb987804864894d5d8b0d716c64136777f7d/pytest_httpx-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a4cd9ec36efd5fd68e8457bbd3ca5d68", "sha256": "ecbba37fdfa9c04b70cfd455c8b0666ebdd155b6d4548544e9f8a6b31177e015"}, "downloads": -1, "filename": "pytest_httpx-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a4cd9ec36efd5fd68e8457bbd3ca5d68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7932, "upload_time": "2020-02-07T16:44:41", "upload_time_iso_8601": "2020-02-07T16:44:41.306182Z", "url": "https://files.pythonhosted.org/packages/e8/3e/1928c3c7cd97cb531be01603e9b0fe33ca505d6b32fb7d4e5d632571fd2e/pytest_httpx-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97c9aeb2a37b9df0f5abe08872c39804", "sha256": "e4d3aa1d28e9f7d194fce61ba84e40acbe755205f29bb3c88327a5324d5ee926"}, "downloads": -1, "filename": "pytest_httpx-0.0.4.tar.gz", "has_sig": false, "md5_digest": "97c9aeb2a37b9df0f5abe08872c39804", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7397, "upload_time": "2020-02-07T16:44:42", "upload_time_iso_8601": "2020-02-07T16:44:42.456884Z", "url": "https://files.pythonhosted.org/packages/91/b5/8763e4f74c0eb81a9330790ac98a6b31ee6a99716a0dc0b49dec0b552727/pytest_httpx-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "bd8b687508d3ae1f7ccf037e34ad4672", "sha256": "0db385604d7a988e366510e73684ef2924b2100a870480b7f3d148d75bb52ae5"}, "downloads": -1, "filename": "pytest_httpx-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bd8b687508d3ae1f7ccf037e34ad4672", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8236, "upload_time": "2020-02-10T14:52:31", "upload_time_iso_8601": "2020-02-10T14:52:31.538124Z", "url": "https://files.pythonhosted.org/packages/82/d4/8eb861dbd8b1d5d508ac603e1c7698a7af0b680d02cea3886b531826ba54/pytest_httpx-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96900dad5049153e0d5a1fb61b9b7b08", "sha256": "36ce94e3a8febe552c8c40e512d547213ee800826cd1de28227f0ff64fd63562"}, "downloads": -1, "filename": "pytest_httpx-0.0.5.tar.gz", "has_sig": false, "md5_digest": "96900dad5049153e0d5a1fb61b9b7b08", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9032, "upload_time": "2020-02-10T14:52:32", "upload_time_iso_8601": "2020-02-10T14:52:32.767062Z", "url": "https://files.pythonhosted.org/packages/0c/04/4f4fca537a670d5d6bb3238a55ff251a0b38513540e066cc58d4fd03b55f/pytest_httpx-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1344a8efb8c4f9f6212d54d0a633ceda", "sha256": "4119091b56e41e31ff4201c51e78556b988ff9d91427484df3989a382f437f2b"}, "downloads": -1, "filename": "pytest_httpx-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1344a8efb8c4f9f6212d54d0a633ceda", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8253, "upload_time": "2020-02-13T19:01:36", "upload_time_iso_8601": "2020-02-13T19:01:36.663074Z", "url": "https://files.pythonhosted.org/packages/0b/9a/811f35f9878000da6fba8e799884740beb2f6e469fd3a90165c1a25e9583/pytest_httpx-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d939887e5876624258799ec1081953a2", "sha256": "1cd1b89afba0f69bd6689ba022dc35463b892e13468cb0a4fa6f77dcf158f73d"}, "downloads": -1, "filename": "pytest_httpx-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d939887e5876624258799ec1081953a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9102, "upload_time": "2020-02-13T19:01:38", "upload_time_iso_8601": "2020-02-13T19:01:38.072869Z", "url": "https://files.pythonhosted.org/packages/c4/3e/418e12cac8019713d203c516fa8b6ec2180011c9460badf35e7dbfa61d38/pytest_httpx-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9b1464cbd12a0f2e726232f4ed577b78", "sha256": "a7ceb4f73e8a867f7d2171a211bfe58f9354edac5679c4c8b7404c6761c74a64"}, "downloads": -1, "filename": "pytest_httpx-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b1464cbd12a0f2e726232f4ed577b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8250, "upload_time": "2020-03-09T15:31:01", "upload_time_iso_8601": "2020-03-09T15:31:01.518464Z", "url": "https://files.pythonhosted.org/packages/0b/5b/84b233b777a6bbd49d6f3b9b97e5f9629fd51ada8f85ac9a8cd0d1023098/pytest_httpx-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ff0b6621cc8e1004d6ec6141b4faed5", "sha256": "a684ac50a45b2ae5135bd01199a1f20e9f614cd18ee6ed6ebe13e7c6f28d6009"}, "downloads": -1, "filename": "pytest_httpx-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8ff0b6621cc8e1004d6ec6141b4faed5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8003, "upload_time": "2020-03-09T15:31:02", "upload_time_iso_8601": "2020-03-09T15:31:02.727912Z", "url": "https://files.pythonhosted.org/packages/47/07/d71c0b8f14189764394fb04e734933b5ca3c2073f69f284d62975d2603f0/pytest_httpx-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d5b2096e7ee294eb34a825e252f3df27", "sha256": "5698579dae927e1f4c0e4e9ce6fb45e0a72e8d8599d46ac56409973c73fcc68d"}, "downloads": -1, "filename": "pytest_httpx-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5b2096e7ee294eb34a825e252f3df27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8237, "upload_time": "2020-03-20T17:35:41", "upload_time_iso_8601": "2020-03-20T17:35:41.521733Z", "url": "https://files.pythonhosted.org/packages/85/75/34b87ad1d3a5bf90337eab18568ecf137d5df657d7749432e7714960126a/pytest_httpx-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a0def1589f25ed0e5b63686765e8a5d", "sha256": "b46348b2a6afa5e5a463495a8f2b915ae1ffa5f6f687f6b04bf1b7c6302c99b7"}, "downloads": -1, "filename": "pytest_httpx-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1a0def1589f25ed0e5b63686765e8a5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7997, "upload_time": "2020-03-20T17:35:42", "upload_time_iso_8601": "2020-03-20T17:35:42.685949Z", "url": "https://files.pythonhosted.org/packages/18/1f/a7e266cdaf9de886f99554f3faacb4a7ae3c0521fce1901fbb63b8ac90ee/pytest_httpx-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5b2096e7ee294eb34a825e252f3df27", "sha256": "5698579dae927e1f4c0e4e9ce6fb45e0a72e8d8599d46ac56409973c73fcc68d"}, "downloads": -1, "filename": "pytest_httpx-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5b2096e7ee294eb34a825e252f3df27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8237, "upload_time": "2020-03-20T17:35:41", "upload_time_iso_8601": "2020-03-20T17:35:41.521733Z", "url": "https://files.pythonhosted.org/packages/85/75/34b87ad1d3a5bf90337eab18568ecf137d5df657d7749432e7714960126a/pytest_httpx-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a0def1589f25ed0e5b63686765e8a5d", "sha256": "b46348b2a6afa5e5a463495a8f2b915ae1ffa5f6f687f6b04bf1b7c6302c99b7"}, "downloads": -1, "filename": "pytest_httpx-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1a0def1589f25ed0e5b63686765e8a5d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7997, "upload_time": "2020-03-20T17:35:42", "upload_time_iso_8601": "2020-03-20T17:35:42.685949Z", "url": "https://files.pythonhosted.org/packages/18/1f/a7e266cdaf9de886f99554f3faacb4a7ae3c0521fce1901fbb63b8ac90ee/pytest_httpx-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:04 2020"}