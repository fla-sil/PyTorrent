{"info": {"author": "Gustavo Montamat", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "# AdWords API Reporting in Python\n\nAn [AdWords API](https://developers.google.com/adwords/api/docs/guides/start) large scale reporting tool written in\nPython. Reports are downloaded as plaintext files but connectivity with a database engine such as MySQL, PostgreSQL, or\nMongoDB can be implemented [upon request](https://github.com/gmontamat/pyaw-reporting/issues).\n\n## Overview\n\n[pyaw-reporting](https://github.com/gmontamat/pyaw-reporting) is an open-source Python package suitable for large\nscale AdWords API reporting. Output reports are comma-separated values (CSV) plaintext files. By default, the package\nuses 10 threads to download reports simultaneously from different accounts. The number of threads used can be modified\nusing the `-n` parameter. It has been successfully tested using +100 threads making it useful for heavy load AdWords\nManager Accounts.\n\n### Supported AdWords API version\n\nThe latest API version supported by this package is\n[v201809](https://ads-developers.googleblog.com/2018/09/announcing-v201809-of-adwords-api.html) with\n[googleads 23.0.1](https://pypi.python.org/pypi/googleads). Older versions of the API are not supported, nor the newer\n[Google Ads API](https://developers.google.com/google-ads/api/docs/start).\n\n## Quick Start\n\n### Prerequisites\n\nYou will need Python 3.6+; this package installs [googleads](https://pypi.python.org/pypi/googleads) as a dependency.\nNote that that support for Python 2.7\n[ended in 2019](https://ads-developers.googleblog.com/2019/10/python-2-deprecation-in-google-ads-api.html). Using a\nvirtual environment is recommended to avoid running the package with `sudo`.\n\nAn access token [YAML file](#about-the-yaml-token) with the corresponding AdWords credentials is also necessary. By\ndefault, the package will look for `~/googleads.yaml` unless a different path is passed. The optional parameter\n**client\\_customer\\_id** must be included in this *YAML* file, you should enter your *AdWords Manager Account id*\n(formerly known as *MCC id*). This way, all accounts linked to the Manager Account will be retrieved. The sample file\n[example.yaml](awreporting/example.yaml) shows how your token should look like.\n\n[AWQL](https://developers.google.com/adwords/api/docs/guides/awql) queries could be either passed in the command line\nwith the `-a`/`--awql` parameter or stored in a plaintext file and passed via the `-q`/`--query` parameter. The module\nincludes a [sample query](awreporting/query.txt) which will retrieve clicks and impressions per ad for the\nlast 7 days. Refer to [Report Types](https://developers.google.com/adwords/api/docs/appendix/reports) and\n[The AdWords Query Language (AWQL)](https://developers.google.com/adwords/api/docs/guides/awql) for more information\nabout these queries.\n\n### Installation\n\n```bash\n$ pip install pyaw-reporting\n```\n\n### Usage\n\n#### Command line\n\n```\nusage: awreporting [-h] (-a AWQL | -q QUERY_FILE) [-t TOKEN] [-o OUTPUT]\n                   [-n NUM_THREAD] [-v]\n\nAwReporting - Large scale AdWords reporting tool in Python\n\noptional arguments:\n  -h, --help                              show this help message and exit\n  -t TOKEN, --token TOKEN                 specify AdWords YAML token path\n  -o OUTPUT, --output OUTPUT              define output file name\n  -n NUM_THREAD, --num-thread NUM_THREAD  set number of threads\n  -v, --verbose                           display activity\n\nrequired arguments:\n  -a AWQL, --awql AWQL                    pass AWQL query\n  -q QUERY_FILE, --query-file QUERY_FILE  ...or use a query file\n```\n\nFor example:\n\n```bash\n$ awreporting -t example.yaml -a \\\n  \"SELECT ExternalCustomerId, CampaignId, AdGroupId, Id, Date, Clicks, Impressions \\\n  FROM AD_PERFORMANCE_REPORT WHERE Impressions > 0 DURING LAST_7_DAYS\" \\\n  -o adperformance.csv -n 100\n```\n\nOr, with a query file:\n\n```bash\n$ awreporting -t example.yaml -q query.txt -o adperformance.csv -n 100\n```\n\nIf you experience problems downloading reports, check the resulting logs in `awreporting.log` or use the\n`-v`/`--verbose` parameter to verify if something is wrong with your token or *AWQL* query.\n\n#### Code\n\nIf you prefer embedding this package in your own code, you could do like so:\n\n```python\nfrom awreporting import get_report\n\nquery = (\n    \"SELECT ExternalCustomerId, CampaignId, AdGroupId, Id, Date, Clicks, Impressions \"\n    \"FROM AD_PERFORMANCE_REPORT \"\n    \"WHERE Impressions > 0 \"\n    \"DURING LAST_7_DAYS\"\n)\nget_report('example.yaml', query, 'adperformance.csv', 100)\n```\n\n### About the YAML token\n\nThe example token file provided [example.yaml](awreporting/example.yaml) is not valid. Refer to\n[this guide](https://developers.google.com/adwords/api/docs/guides/first-api-call) if you are using the AdWords API for\nthe first time.\n\n### Disclaimer\n\nThis is neither an official [AdWords API](https://developers.google.com/adwords/api/) repository nor a clone of\n[AwReporting](https://github.com/googleads/aw-reporting). Consider using\n[AwReporting](https://github.com/googleads/aw-reporting) if you are a Java developer. This framework no longer supports\nPython 2.7; only Python 3.6 or greater are compatible since\n[googleads](https://github.com/googleads/googleads-python-lib#python-versions) requires it.\n\n### Troubleshooting\n\nWe recommend that you try the app with a small number of threads first (the default is 10) and increase the number\naccordingly. The AdWords server may complain when many API calls are made at the same time but those exceptions are\nhandled by the app. We have successfully obtained huge reports using 200 threads.\n\nWhen using this tool it might be necessary to enable a DNS cache in your system, such as\n[nscd](http://man7.org/linux/man-pages/man8/nscd.8.html). This should eliminate DNS lookup problems when repeatedly\ncalling the AdWords API server. For example, if you find many `URLError: <urlopen error [Errno -2] Name or service\nnot known>` in your logs, enable the DNS cache.\n\nIn some Linux systems `nscd` is not enabled by default but it can be started with:\n\n```\n# systemctl start nscd\n```\n\n## Useful links\n\n* https://developers.google.com/adwords/api/\n* https://github.com/googleads/googleads-python-lib\n* https://github.com/googleads/aw-reporting\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gmontamat/pyaw-reporting", "keywords": "adwords adwords-api adwords-reports googleads awql", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyaw-reporting", "package_url": "https://pypi.org/project/pyaw-reporting/", "platform": "", "project_url": "https://pypi.org/project/pyaw-reporting/", "project_urls": {"Homepage": "https://github.com/gmontamat/pyaw-reporting"}, "release_url": "https://pypi.org/project/pyaw-reporting/0.0.5/", "requires_dist": ["googleads"], "requires_python": "", "summary": "AdWords API Reporting in Python", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AdWords API Reporting in Python</h1>\n<p>An <a href=\"https://developers.google.com/adwords/api/docs/guides/start\" rel=\"nofollow\">AdWords API</a> large scale reporting tool written in\nPython. Reports are downloaded as plaintext files but connectivity with a database engine such as MySQL, PostgreSQL, or\nMongoDB can be implemented <a href=\"https://github.com/gmontamat/pyaw-reporting/issues\" rel=\"nofollow\">upon request</a>.</p>\n<h2>Overview</h2>\n<p><a href=\"https://github.com/gmontamat/pyaw-reporting\" rel=\"nofollow\">pyaw-reporting</a> is an open-source Python package suitable for large\nscale AdWords API reporting. Output reports are comma-separated values (CSV) plaintext files. By default, the package\nuses 10 threads to download reports simultaneously from different accounts. The number of threads used can be modified\nusing the <code>-n</code> parameter. It has been successfully tested using +100 threads making it useful for heavy load AdWords\nManager Accounts.</p>\n<h3>Supported AdWords API version</h3>\n<p>The latest API version supported by this package is\n<a href=\"https://ads-developers.googleblog.com/2018/09/announcing-v201809-of-adwords-api.html\" rel=\"nofollow\">v201809</a> with\n<a href=\"https://pypi.python.org/pypi/googleads\" rel=\"nofollow\">googleads 23.0.1</a>. Older versions of the API are not supported, nor the newer\n<a href=\"https://developers.google.com/google-ads/api/docs/start\" rel=\"nofollow\">Google Ads API</a>.</p>\n<h2>Quick Start</h2>\n<h3>Prerequisites</h3>\n<p>You will need Python 3.6+; this package installs <a href=\"https://pypi.python.org/pypi/googleads\" rel=\"nofollow\">googleads</a> as a dependency.\nNote that that support for Python 2.7\n<a href=\"https://ads-developers.googleblog.com/2019/10/python-2-deprecation-in-google-ads-api.html\" rel=\"nofollow\">ended in 2019</a>. Using a\nvirtual environment is recommended to avoid running the package with <code>sudo</code>.</p>\n<p>An access token <a href=\"#about-the-yaml-token\" rel=\"nofollow\">YAML file</a> with the corresponding AdWords credentials is also necessary. By\ndefault, the package will look for <code>~/googleads.yaml</code> unless a different path is passed. The optional parameter\n<strong>client_customer_id</strong> must be included in this <em>YAML</em> file, you should enter your <em>AdWords Manager Account id</em>\n(formerly known as <em>MCC id</em>). This way, all accounts linked to the Manager Account will be retrieved. The sample file\n<a href=\"awreporting/example.yaml\" rel=\"nofollow\">example.yaml</a> shows how your token should look like.</p>\n<p><a href=\"https://developers.google.com/adwords/api/docs/guides/awql\" rel=\"nofollow\">AWQL</a> queries could be either passed in the command line\nwith the <code>-a</code>/<code>--awql</code> parameter or stored in a plaintext file and passed via the <code>-q</code>/<code>--query</code> parameter. The module\nincludes a <a href=\"awreporting/query.txt\" rel=\"nofollow\">sample query</a> which will retrieve clicks and impressions per ad for the\nlast 7 days. Refer to <a href=\"https://developers.google.com/adwords/api/docs/appendix/reports\" rel=\"nofollow\">Report Types</a> and\n<a href=\"https://developers.google.com/adwords/api/docs/guides/awql\" rel=\"nofollow\">The AdWords Query Language (AWQL)</a> for more information\nabout these queries.</p>\n<h3>Installation</h3>\n<pre>$ pip install pyaw-reporting\n</pre>\n<h3>Usage</h3>\n<h4>Command line</h4>\n<pre><code>usage: awreporting [-h] (-a AWQL | -q QUERY_FILE) [-t TOKEN] [-o OUTPUT]\n                   [-n NUM_THREAD] [-v]\n\nAwReporting - Large scale AdWords reporting tool in Python\n\noptional arguments:\n  -h, --help                              show this help message and exit\n  -t TOKEN, --token TOKEN                 specify AdWords YAML token path\n  -o OUTPUT, --output OUTPUT              define output file name\n  -n NUM_THREAD, --num-thread NUM_THREAD  set number of threads\n  -v, --verbose                           display activity\n\nrequired arguments:\n  -a AWQL, --awql AWQL                    pass AWQL query\n  -q QUERY_FILE, --query-file QUERY_FILE  ...or use a query file\n</code></pre>\n<p>For example:</p>\n<pre>$ awreporting -t example.yaml -a <span class=\"se\">\\</span>\n  <span class=\"s2\">\"SELECT ExternalCustomerId, CampaignId, AdGroupId, Id, Date, Clicks, Impressions \\</span>\n<span class=\"s2\">  FROM AD_PERFORMANCE_REPORT WHERE Impressions &gt; 0 DURING LAST_7_DAYS\"</span> <span class=\"se\">\\</span>\n  -o adperformance.csv -n <span class=\"m\">100</span>\n</pre>\n<p>Or, with a query file:</p>\n<pre>$ awreporting -t example.yaml -q query.txt -o adperformance.csv -n <span class=\"m\">100</span>\n</pre>\n<p>If you experience problems downloading reports, check the resulting logs in <code>awreporting.log</code> or use the\n<code>-v</code>/<code>--verbose</code> parameter to verify if something is wrong with your token or <em>AWQL</em> query.</p>\n<h4>Code</h4>\n<p>If you prefer embedding this package in your own code, you could do like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">awreporting</span> <span class=\"kn\">import</span> <span class=\"n\">get_report</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"SELECT ExternalCustomerId, CampaignId, AdGroupId, Id, Date, Clicks, Impressions \"</span>\n    <span class=\"s2\">\"FROM AD_PERFORMANCE_REPORT \"</span>\n    <span class=\"s2\">\"WHERE Impressions &gt; 0 \"</span>\n    <span class=\"s2\">\"DURING LAST_7_DAYS\"</span>\n<span class=\"p\">)</span>\n<span class=\"n\">get_report</span><span class=\"p\">(</span><span class=\"s1\">'example.yaml'</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"s1\">'adperformance.csv'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<h3>About the YAML token</h3>\n<p>The example token file provided <a href=\"awreporting/example.yaml\" rel=\"nofollow\">example.yaml</a> is not valid. Refer to\n<a href=\"https://developers.google.com/adwords/api/docs/guides/first-api-call\" rel=\"nofollow\">this guide</a> if you are using the AdWords API for\nthe first time.</p>\n<h3>Disclaimer</h3>\n<p>This is neither an official <a href=\"https://developers.google.com/adwords/api/\" rel=\"nofollow\">AdWords API</a> repository nor a clone of\n<a href=\"https://github.com/googleads/aw-reporting\" rel=\"nofollow\">AwReporting</a>. Consider using\n<a href=\"https://github.com/googleads/aw-reporting\" rel=\"nofollow\">AwReporting</a> if you are a Java developer. This framework no longer supports\nPython 2.7; only Python 3.6 or greater are compatible since\n<a href=\"https://github.com/googleads/googleads-python-lib#python-versions\" rel=\"nofollow\">googleads</a> requires it.</p>\n<h3>Troubleshooting</h3>\n<p>We recommend that you try the app with a small number of threads first (the default is 10) and increase the number\naccordingly. The AdWords server may complain when many API calls are made at the same time but those exceptions are\nhandled by the app. We have successfully obtained huge reports using 200 threads.</p>\n<p>When using this tool it might be necessary to enable a DNS cache in your system, such as\n<a href=\"http://man7.org/linux/man-pages/man8/nscd.8.html\" rel=\"nofollow\">nscd</a>. This should eliminate DNS lookup problems when repeatedly\ncalling the AdWords API server. For example, if you find many <code>URLError: &lt;urlopen error [Errno -2] Name or service not known&gt;</code> in your logs, enable the DNS cache.</p>\n<p>In some Linux systems <code>nscd</code> is not enabled by default but it can be started with:</p>\n<pre><code># systemctl start nscd\n</code></pre>\n<h2>Useful links</h2>\n<ul>\n<li><a href=\"https://developers.google.com/adwords/api/\" rel=\"nofollow\">https://developers.google.com/adwords/api/</a></li>\n<li><a href=\"https://github.com/googleads/googleads-python-lib\" rel=\"nofollow\">https://github.com/googleads/googleads-python-lib</a></li>\n<li><a href=\"https://github.com/googleads/aw-reporting\" rel=\"nofollow\">https://github.com/googleads/aw-reporting</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7020886, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "008959b75c3b85c759b7a41c411a3efb", "sha256": "8659ec2e55c1786a77a0924a4d92cc9e4fdc9516ce2fdf1d4c8346f97d5ccfa1"}, "downloads": -1, "filename": "pyaw_reporting-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "008959b75c3b85c759b7a41c411a3efb", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15483, "upload_time": "2019-02-02T17:28:40", "upload_time_iso_8601": "2019-02-02T17:28:40.398472Z", "url": "https://files.pythonhosted.org/packages/c9/b7/dba6baa547544dd9cf6d367557e508478f4a4257d929f930b541c4017450/pyaw_reporting-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd31e658ecf36feae49fdc60ef0b3375", "sha256": "bd4f2c5551d2970f9b487beaef24c4ba938eeee4aff18f470f7885633192664c"}, "downloads": -1, "filename": "pyaw_reporting-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cd31e658ecf36feae49fdc60ef0b3375", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15483, "upload_time": "2019-02-02T17:20:42", "upload_time_iso_8601": "2019-02-02T17:20:42.305774Z", "url": "https://files.pythonhosted.org/packages/cd/a4/90e6a5ab4dffba9ab64b56d210acf00d123be766536c2978f1d56177c299/pyaw_reporting-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e267cad140b6343db01c7c4d19a3745", "sha256": "1cbb4b5df5e20e2f5194ba3648d814686c8bed4081ba006c1a577b3d48caac83"}, "downloads": -1, "filename": "pyaw-reporting-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1e267cad140b6343db01c7c4d19a3745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8637, "upload_time": "2019-02-02T17:20:44", "upload_time_iso_8601": "2019-02-02T17:20:44.724068Z", "url": "https://files.pythonhosted.org/packages/38/9a/a971903f13db58e4c3b86d1e816a62765ee7dbb3c196ea06a934a22bc887/pyaw-reporting-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "79c4ab44248ea4b14d3f10aa87eddd18", "sha256": "6c18078430b28b3658bd95bd9420d71ca4cbfd222e529a91f8283b8164b5a1b2"}, "downloads": -1, "filename": "pyaw_reporting-0.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "79c4ab44248ea4b14d3f10aa87eddd18", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15481, "upload_time": "2019-03-03T01:01:08", "upload_time_iso_8601": "2019-03-03T01:01:08.911868Z", "url": "https://files.pythonhosted.org/packages/89/bd/4f4ef7092a4e29eb2cce8d7043ade880342144324677145ab63dbe3706b0/pyaw_reporting-0.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35bc2973ed97f099e06ba0937b4aec97", "sha256": "e53e58ef5b6b982a456055c2cffebaa1734fa78f70879ad19e3f9ba73efad77b"}, "downloads": -1, "filename": "pyaw_reporting-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "35bc2973ed97f099e06ba0937b4aec97", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15479, "upload_time": "2019-03-03T00:58:21", "upload_time_iso_8601": "2019-03-03T00:58:21.769487Z", "url": "https://files.pythonhosted.org/packages/f4/2d/1d59ac3d295c62d199947d3e9e44e04664f62165aad3faedae3c96880746/pyaw_reporting-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1dac07d86d86894501695fc4d762a3f", "sha256": "c9facc68d96c415b24ea1067c9ef91373f60bf495fe9bba0ae453ef6ac5c2323"}, "downloads": -1, "filename": "pyaw-reporting-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d1dac07d86d86894501695fc4d762a3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8631, "upload_time": "2019-03-03T00:58:24", "upload_time_iso_8601": "2019-03-03T00:58:24.809817Z", "url": "https://files.pythonhosted.org/packages/dc/e8/094a64fd6d23dd8b4ccae71af6fad12816e9770596e24d898de460277bf8/pyaw-reporting-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "21490cdd223bd5206948bcab16759325", "sha256": "6c66fa62074d449c7aef95d865d672d786701fd5af7d0db4fd2a948dcdfbd2ea"}, "downloads": -1, "filename": "pyaw_reporting-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "21490cdd223bd5206948bcab16759325", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 15530, "upload_time": "2019-05-02T03:21:16", "upload_time_iso_8601": "2019-05-02T03:21:16.115508Z", "url": "https://files.pythonhosted.org/packages/1a/ee/e9afd44296f608dbecfaf00910294e1402b0700d7acb88ccc88e5441e914/pyaw_reporting-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "492015392eeaee965426dcc7a4efafd0", "sha256": "91338802ca52603d1bc4cc48b49fd070d01ef927822bd50d94dfbb230e344a70"}, "downloads": -1, "filename": "pyaw_reporting-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "492015392eeaee965426dcc7a4efafd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15528, "upload_time": "2019-05-02T03:20:07", "upload_time_iso_8601": "2019-05-02T03:20:07.508414Z", "url": "https://files.pythonhosted.org/packages/70/25/b528e0c82c61c3f8cc66890d02b59e8033fa454e9018f5073adc40041da2/pyaw_reporting-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "add75e71f555eef491d0df21d77e2e39", "sha256": "25de71debdb467def70f8e43f356949f4b64da1db5613a272e2bef1cff0f7e9f"}, "downloads": -1, "filename": "pyaw-reporting-0.0.4.tar.gz", "has_sig": false, "md5_digest": "add75e71f555eef491d0df21d77e2e39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8703, "upload_time": "2019-05-02T03:20:09", "upload_time_iso_8601": "2019-05-02T03:20:09.215881Z", "url": "https://files.pythonhosted.org/packages/6d/b5/f436d6131f92732832686659048f07145f8f8a6b275500a75db68169533a/pyaw-reporting-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "2b64fc6d7b62feb72aeeed5d33372392", "sha256": "d9d7314e653884f30489810fed290e823d51a56fecdda8f2a588e768fd4f7cda"}, "downloads": -1, "filename": "pyaw_reporting-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2b64fc6d7b62feb72aeeed5d33372392", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15456, "upload_time": "2020-04-14T23:15:16", "upload_time_iso_8601": "2020-04-14T23:15:16.608553Z", "url": "https://files.pythonhosted.org/packages/9a/63/0406f4304d62d35d1ce128ab24def251b88e7465cfcab47f319bb8cf7904/pyaw_reporting-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "809d93f769a5e7cc153f09bfe8cdd139", "sha256": "354014e04bbdbc3364e38a8d683e40f9f2b6351b47d6c556cdd926ba1cafaa50"}, "downloads": -1, "filename": "pyaw-reporting-0.0.5.tar.gz", "has_sig": false, "md5_digest": "809d93f769a5e7cc153f09bfe8cdd139", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8635, "upload_time": "2020-04-14T23:15:19", "upload_time_iso_8601": "2020-04-14T23:15:19.022000Z", "url": "https://files.pythonhosted.org/packages/a9/d9/b778036daa9488cec143f1f1a85d6344c54525dbf5bfa0fb552d7f104a30/pyaw-reporting-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b64fc6d7b62feb72aeeed5d33372392", "sha256": "d9d7314e653884f30489810fed290e823d51a56fecdda8f2a588e768fd4f7cda"}, "downloads": -1, "filename": "pyaw_reporting-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2b64fc6d7b62feb72aeeed5d33372392", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15456, "upload_time": "2020-04-14T23:15:16", "upload_time_iso_8601": "2020-04-14T23:15:16.608553Z", "url": "https://files.pythonhosted.org/packages/9a/63/0406f4304d62d35d1ce128ab24def251b88e7465cfcab47f319bb8cf7904/pyaw_reporting-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "809d93f769a5e7cc153f09bfe8cdd139", "sha256": "354014e04bbdbc3364e38a8d683e40f9f2b6351b47d6c556cdd926ba1cafaa50"}, "downloads": -1, "filename": "pyaw-reporting-0.0.5.tar.gz", "has_sig": false, "md5_digest": "809d93f769a5e7cc153f09bfe8cdd139", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8635, "upload_time": "2020-04-14T23:15:19", "upload_time_iso_8601": "2020-04-14T23:15:19.022000Z", "url": "https://files.pythonhosted.org/packages/a9/d9/b778036daa9488cec143f1f1a85d6344c54525dbf5bfa0fb552d7f104a30/pyaw-reporting-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:30 2020"}