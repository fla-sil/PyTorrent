{"info": {"author": "Maciej Gol", "author_email": "1kroolik1@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "tenant-schemas-celery \n=====================\n [![Build Status](https://travis-ci.org/maciej-gol/tenant-schemas-celery.svg?branch=master)](https://travis-ci.org/maciej-gol/tenant-schemas-celery)\n\nCelery application implementation that allows celery tasks to cooperate with\nmulti-tenancy provided by [django-tenant-schemas](https://github.com/bernardopires/django-tenant-schemas) and\n[django-tenants](https://github.com/tomturner/django-tenants) packages.\n\nThis project might not seem frequently updated, but it just has all the functionality needed. Issues and questions are answered quickly.\n\nInstallation\n------------\n\n```bash\n   $ pip install tenant-schemas-celery\n   $ pip install django-tenants\n```\n\nUsage\n-----\n\n   * Define a celery app using given `CeleryApp` class.\n\n```python\n   import os\n   os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n\n   from django.conf import settings\n\n   from tenant_schemas_celery.app import CeleryApp\n\n   app = CeleryApp()\n   app.config_from_object('django.conf:settings')\n   app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n```\n\nThis assumes a fresh Celery 4.3.0 application. For previous versions, the key is to create a new `CeleryApp` instance that will be used to access task decorator from.\n\n   * Replace your `@task` decorator with `@app.task`\n\n```python\n   from django.db import connection\n   from myproject.celery import app\n\n   @app.task\n   def my_task():\n      print(connection.schema_name)\n```\n\n   * Run celery worker (`myproject.celery` is where you've defined the `app` variable)\n\n```bash\n    $ celery worker -A myproject.celery\n```\n\n   * Post registered task. The schema name will get automatically added to the task's arguments.\n\n```python\n   from myproject.tasks import my_task\n   my_task.delay()\n```\n\nThe `TenantTask` class transparently inserts current connection's schema into\nthe task's kwargs. The schema name is then popped from the task's kwargs in\n`task_prerun` signal handler, and the connection's schema is changed\naccordingly.\n\n### Tenant objects cache\n\nNew in `0.3.0`.\n\nEvery time a celery task is executed, the tenant object of the `connection` object is being refetched.\nFor some use cases, this can introduce significant performance hit.\n\nIn such scenarios, you can pass `tenant_cache_seconds` argument to the `@app.task()` decorator. This will\ncause the tenant objects to be cached for given period of time. `0` turns this off.\n\n```python\n@app.task(tenant_cache_seconds=30)\ndef some_task():\n    ...\n```\n\nCelery beat integration\n-----------------------\n\nThis package does not provide support for scheduling periodic tasks inside given schema. Instead, you can use `{django_tenants,django_tenants_schemas}.utils.{get_tenant_model,tenant_context}` methods to launch given tasks within specific tenant.\n\nLet's say that you would like to run a `reset_remaining_jobs` tasks periodically, for every tenant that you have. Instead of scheduling the task for each schema separately, you can schedule one dispatcher task that will iterate over all schemas and send specific task for each schema you want, instead:\n\n```python\nfrom django_tenants.utils import get_tenant_model, tenant_context\nfrom django_tenant_schemas.utils import get_tenant_model, tenant_context\n\n@app.task\ndef reset_remaining_jobs_in_all_schemas():\n    for tenant in get_tenant_model().objects.exclude(schema_name='public'):\n        with tenant_context(tenant):\n            reset_remaining_jobs_in_schema.delay()\n\n@app.task\ndef reset_remaining_jobs_in_schema():\n    <do some logic>\n```\n\nThe `reset_remaining_jobs_in_all_schemas` task (called the dispatch task) should be registered in your celery beat schedule. The `reset_remaining_jobs_in_schema` task should be called from the dispatch task.\n\nThat way you have full control over which schemas the task should be scheduled in.\n\nPython compatibility\n====================\n\nThe `0.x` series are the last one to support Python<3.6.\nThe `1.` series support Python>3.6", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maciej-gol/tenant-schemas-celery", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tenant-schemas-celery", "package_url": "https://pypi.org/project/tenant-schemas-celery/", "platform": "", "project_url": "https://pypi.org/project/tenant-schemas-celery/", "project_urls": {"Homepage": "https://github.com/maciej-gol/tenant-schemas-celery"}, "release_url": "https://pypi.org/project/tenant-schemas-celery/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Celery integration for django-tenant-schemas and django-tenants", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tenant-schemas-celery</h1>\n<p><a href=\"https://travis-ci.org/maciej-gol/tenant-schemas-celery\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7185f8ea4bab6c86961ded4a9be601f21a053b3/68747470733a2f2f7472617669732d63692e6f72672f6d616369656a2d676f6c2f74656e616e742d736368656d61732d63656c6572792e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Celery application implementation that allows celery tasks to cooperate with\nmulti-tenancy provided by <a href=\"https://github.com/bernardopires/django-tenant-schemas\" rel=\"nofollow\">django-tenant-schemas</a> and\n<a href=\"https://github.com/tomturner/django-tenants\" rel=\"nofollow\">django-tenants</a> packages.</p>\n<p>This project might not seem frequently updated, but it just has all the functionality needed. Issues and questions are answered quickly.</p>\n<h2>Installation</h2>\n<pre>   $ pip install tenant-schemas-celery\n   $ pip install django-tenants\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>Define a celery app using given <code>CeleryApp</code> class.</li>\n</ul>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">os</span>\n   <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s1\">'DJANGO_SETTINGS_MODULE'</span><span class=\"p\">,</span> <span class=\"s1\">'app.settings'</span><span class=\"p\">)</span>\n\n   <span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n   <span class=\"kn\">from</span> <span class=\"nn\">tenant_schemas_celery.app</span> <span class=\"kn\">import</span> <span class=\"n\">CeleryApp</span>\n\n   <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">CeleryApp</span><span class=\"p\">()</span>\n   <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config_from_object</span><span class=\"p\">(</span><span class=\"s1\">'django.conf:settings'</span><span class=\"p\">)</span>\n   <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">autodiscover_tasks</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">INSTALLED_APPS</span><span class=\"p\">)</span>\n</pre>\n<p>This assumes a fresh Celery 4.3.0 application. For previous versions, the key is to create a new <code>CeleryApp</code> instance that will be used to access task decorator from.</p>\n<ul>\n<li>Replace your <code>@task</code> decorator with <code>@app.task</code></li>\n</ul>\n<pre>   <span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n   <span class=\"kn\">from</span> <span class=\"nn\">myproject.celery</span> <span class=\"kn\">import</span> <span class=\"n\">app</span>\n\n   <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span>\n   <span class=\"k\">def</span> <span class=\"nf\">my_task</span><span class=\"p\">():</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">schema_name</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Run celery worker (<code>myproject.celery</code> is where you've defined the <code>app</code> variable)</li>\n</ul>\n<pre>    $ celery worker -A myproject.celery\n</pre>\n<ul>\n<li>Post registered task. The schema name will get automatically added to the task's arguments.</li>\n</ul>\n<pre>   <span class=\"kn\">from</span> <span class=\"nn\">myproject.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">my_task</span>\n   <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>TenantTask</code> class transparently inserts current connection's schema into\nthe task's kwargs. The schema name is then popped from the task's kwargs in\n<code>task_prerun</code> signal handler, and the connection's schema is changed\naccordingly.</p>\n<h3>Tenant objects cache</h3>\n<p>New in <code>0.3.0</code>.</p>\n<p>Every time a celery task is executed, the tenant object of the <code>connection</code> object is being refetched.\nFor some use cases, this can introduce significant performance hit.</p>\n<p>In such scenarios, you can pass <code>tenant_cache_seconds</code> argument to the <code>@app.task()</code> decorator. This will\ncause the tenant objects to be cached for given period of time. <code>0</code> turns this off.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">tenant_cache_seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_task</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre>\n<h2>Celery beat integration</h2>\n<p>This package does not provide support for scheduling periodic tasks inside given schema. Instead, you can use <code>{django_tenants,django_tenants_schemas}.utils.{get_tenant_model,tenant_context}</code> methods to launch given tasks within specific tenant.</p>\n<p>Let's say that you would like to run a <code>reset_remaining_jobs</code> tasks periodically, for every tenant that you have. Instead of scheduling the task for each schema separately, you can schedule one dispatcher task that will iterate over all schemas and send specific task for each schema you want, instead:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_tenants.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_tenant_model</span><span class=\"p\">,</span> <span class=\"n\">tenant_context</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_tenant_schemas.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_tenant_model</span><span class=\"p\">,</span> <span class=\"n\">tenant_context</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"k\">def</span> <span class=\"nf\">reset_remaining_jobs_in_all_schemas</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">tenant</span> <span class=\"ow\">in</span> <span class=\"n\">get_tenant_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">schema_name</span><span class=\"o\">=</span><span class=\"s1\">'public'</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"n\">tenant_context</span><span class=\"p\">(</span><span class=\"n\">tenant</span><span class=\"p\">):</span>\n            <span class=\"n\">reset_remaining_jobs_in_schema</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">task</span>\n<span class=\"k\">def</span> <span class=\"nf\">reset_remaining_jobs_in_schema</span><span class=\"p\">():</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">do</span> <span class=\"n\">some</span> <span class=\"n\">logic</span><span class=\"o\">&gt;</span>\n</pre>\n<p>The <code>reset_remaining_jobs_in_all_schemas</code> task (called the dispatch task) should be registered in your celery beat schedule. The <code>reset_remaining_jobs_in_schema</code> task should be called from the dispatch task.</p>\n<p>That way you have full control over which schemas the task should be scheduled in.</p>\n<h1>Python compatibility</h1>\n<p>The <code>0.x</code> series are the last one to support Python&lt;3.6.\nThe <code>1.</code> series support Python&gt;3.6</p>\n\n          </div>"}, "last_serial": 6478436, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "177247dd799c4a8215158cda53831056", "sha256": "381977df92525363d4254d0033c2b4d1734abd674b3f922c0b78877872bed550"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.0.tar.gz", "has_sig": false, "md5_digest": "177247dd799c4a8215158cda53831056", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3309, "upload_time": "2014-08-15T09:50:01", "upload_time_iso_8601": "2014-08-15T09:50:01.111754Z", "url": "https://files.pythonhosted.org/packages/a4/8d/934026185f6711672d9a9f5feb73f033360a966ec8883aff51ab2ba7d9cf/tenant-schemas-celery-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fd09e2b142b74b0c101ab15e0f7ee866", "sha256": "042cf6ae8907d959e56a0580bd6a3386e655888bf38befd38ad446ee38e8df17"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fd09e2b142b74b0c101ab15e0f7ee866", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3521, "upload_time": "2014-08-15T09:53:18", "upload_time_iso_8601": "2014-08-15T09:53:18.710379Z", "url": "https://files.pythonhosted.org/packages/89/f9/49a84222ab4d7ca8fe7444a57f815f0528b09e7043ad1f2c2eaab249cf36/tenant-schemas-celery-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7fcccccebbd473199f37b4d3f869e2d5", "sha256": "508f2e72752c2203588df8fa4d827f20742ae90e0d398775df3dd4ee1d5b71dd"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.2.tar.gz", "has_sig": false, "md5_digest": "7fcccccebbd473199f37b4d3f869e2d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3999, "upload_time": "2014-11-25T20:17:09", "upload_time_iso_8601": "2014-11-25T20:17:09.031031Z", "url": "https://files.pythonhosted.org/packages/f2/b6/54298ce115b31c3836db9038024dfbb4fec8b6cff110d4b3a61618ea4d3b/tenant-schemas-celery-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d3fba7ff45c6a9a081b44a8399d5b971", "sha256": "6af0fde8feb3509357ec2a5452d3c1e39a41af85471322bfb351558d409b867c"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d3fba7ff45c6a9a081b44a8399d5b971", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4001, "upload_time": "2015-01-01T19:22:13", "upload_time_iso_8601": "2015-01-01T19:22:13.179640Z", "url": "https://files.pythonhosted.org/packages/c4/ca/a053f68342c5257d99e5c672b730ea72a62ab30b2b061ba690dedad02ad6/tenant-schemas-celery-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2fdc3d417a67873cb087674339458ce7", "sha256": "de1200c05efec99ae78c3f3bf7b981564eb9a38a028f7f6f1f06f100b2df0868"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.4.tar.gz", "has_sig": false, "md5_digest": "2fdc3d417a67873cb087674339458ce7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4268, "upload_time": "2015-07-15T21:37:59", "upload_time_iso_8601": "2015-07-15T21:37:59.168394Z", "url": "https://files.pythonhosted.org/packages/9b/9c/3bf36d941975333646ff3d8181e75c6403b928265926423f3923b4d989d5/tenant-schemas-celery-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "9b10006557160a8b84cbda3ff95ca265", "sha256": "69a3b587575ba2d7dcbdb01986a762e5d072669710d6fa7e1a1e6f8e676436e0"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9b10006557160a8b84cbda3ff95ca265", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4289, "upload_time": "2015-07-15T21:44:00", "upload_time_iso_8601": "2015-07-15T21:44:00.031177Z", "url": "https://files.pythonhosted.org/packages/ed/6c/da9ae4dcabd16d4f4fb61cac7b9652dfc3fb7cda91e0a567591c05f4b047/tenant-schemas-celery-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "0601fd9d2d950c4d40020b308a46e5c0", "sha256": "573ec4a35af8e6864e13a1ed62c6ba17e969f832bb1590c1efa392657640cd46"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0601fd9d2d950c4d40020b308a46e5c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4393, "upload_time": "2017-04-04T21:40:50", "upload_time_iso_8601": "2017-04-04T21:40:50.877456Z", "url": "https://files.pythonhosted.org/packages/d7/63/e39e0b6de48dbfd74bf9cc7506436988f1e01d70bb0ad00dad3aad308cd6/tenant-schemas-celery-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "f7037139ce466c7763852bb526393b66", "sha256": "c4a036d05feb09a5b2123fee772a1933a5cfc3d1dbd5bbaac79e2a4910e7957f"}, "downloads": -1, "filename": "tenant-schemas-celery-0.1.7.tar.gz", "has_sig": false, "md5_digest": "f7037139ce466c7763852bb526393b66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4489, "upload_time": "2017-05-07T18:57:39", "upload_time_iso_8601": "2017-05-07T18:57:39.279418Z", "url": "https://files.pythonhosted.org/packages/85/b3/11dc2d3f99eb86d6f3ea7d3450c77de31cb90cd481c61120f0487f45a7ac/tenant-schemas-celery-0.1.7.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e906b0fab1784259eb5858fa0dda7932", "sha256": "e400a18ebdcb10cfa12a455f04a098f484bb8914854d332fb6d00c810f635d9e"}, "downloads": -1, "filename": "tenant-schemas-celery-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e906b0fab1784259eb5858fa0dda7932", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4851, "upload_time": "2018-10-06T16:01:11", "upload_time_iso_8601": "2018-10-06T16:01:11.447122Z", "url": "https://files.pythonhosted.org/packages/21/da/deb918396fe8635fd42bd61fd62352f14767d071fb03ba75397d5457c98f/tenant-schemas-celery-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fb56ca3b307cf46937b52e55a5f56476", "sha256": "67f90e32777b9b7a9b384a4a0415d03574b998ffbf400871825f528a321a9447"}, "downloads": -1, "filename": "tenant-schemas-celery-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fb56ca3b307cf46937b52e55a5f56476", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4802, "upload_time": "2018-10-11T18:26:29", "upload_time_iso_8601": "2018-10-11T18:26:29.963337Z", "url": "https://files.pythonhosted.org/packages/ca/10/bb1d8ecd374494bb9e016768000611fa2853e29fd9726465f2da76710518/tenant-schemas-celery-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "bc443f3d2eab4217bfd0b95d9a9eca6a", "sha256": "4047089ba06cb74863105b67457fda3edccc725b3b7f2ed7f0431d280a9a0b9f"}, "downloads": -1, "filename": "tenant-schemas-celery-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bc443f3d2eab4217bfd0b95d9a9eca6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7885, "upload_time": "2020-01-18T15:06:41", "upload_time_iso_8601": "2020-01-18T15:06:41.686492Z", "url": "https://files.pythonhosted.org/packages/e3/3c/d96359b072bd92e054e6ddd63a816fe4229e16306601f0f5a87c3f1c651c/tenant-schemas-celery-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bc443f3d2eab4217bfd0b95d9a9eca6a", "sha256": "4047089ba06cb74863105b67457fda3edccc725b3b7f2ed7f0431d280a9a0b9f"}, "downloads": -1, "filename": "tenant-schemas-celery-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bc443f3d2eab4217bfd0b95d9a9eca6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7885, "upload_time": "2020-01-18T15:06:41", "upload_time_iso_8601": "2020-01-18T15:06:41.686492Z", "url": "https://files.pythonhosted.org/packages/e3/3c/d96359b072bd92e054e6ddd63a816fe4229e16306601f0f5a87c3f1c651c/tenant-schemas-celery-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:37 2020"}