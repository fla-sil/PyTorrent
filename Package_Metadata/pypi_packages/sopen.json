{"info": {"author": "David Michael Pennington", "author_email": "mike@pennington.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================\nThe sopen Package\n=================\n\nWhat is sopen?\n==============\n\nsopen_ is a simple Python2 and Python3-compatible package which wraps Python's\nPopen_.  sopen_ strives to be a cross-platform library available in both Linux and Windows.\n\nsopen_ runs a shell command in one of two ways:\n\n- 'blocking' mode, which blocks until the shell command finishes.\n- 'nonblocking' mode, which enables the user to see output from the command as it runs.\n\nThe primary goal of sopen_ is simplicity.  The user doesn't need to think about pipes, queues, threading, or any of the other issues that come up while using Popen_ (especially in nonblocking use cases).\n\nAs with anything, simplicity comes with tradeoffs:\n\n- At this time, sopen_ does not support piping commands into other process (or piping commands through the shell).  Use Popen_ if piping commands into each other is required\n- Usage of 'blocking' and 'nonblocking' modes are different.\n- Process return codes are not available in nonblocking mode at this time\n\nBlocking mode usage\n===================\n\nThis captures the output of a grep and prints it to stdout...\n\n.. code-block:: python\n\n    from sopen import Sopen\n\n    # This blocks until the output of the grep finishes...\n    proc = Sopen('grep foo bar.txt', mode='blocking')\n\n    for line in proc.stdout.read().splitlines():\n        print(line)\n\nNon-blocking mode usage\n=======================\n\nNon-blocking mode is best for commands that stream output non-stop, or processes that you may want to react to in real-time.  This example captures the output of a ping command (five pings) and prints it to stdout...\n\n.. code-block:: python\n\n    from sopen import Sopen\n\n    ping_addrs = '127.0.0.1'\n\n    proc = Sopen('ping -c 5 -O {0}'.format(ping_addrs), mode='nonblocking')\n\n    finished = False\n    while not finished:\n\n        # readline_stdout() is only available in nonblocking mode\n        # The timeout parameter tells sopen how long to wait for output;\n        #    if there is no output before the timeout, None is returned.\n        out = proc.readline_stdout(timeout=0.001)\n        err = proc.readline_stderr(timeout=0.001)\n        if (out is not None):\n            print(\"{}\".format(out))\n        if (err is not None):\n            print(\"ERROR {}\".format(err))\n\n        if proc.stdout_done and proc.stderr_done:\n            finished = True\n\nWhere sopen_ really shines is when you need to spawn many streaming shell commands and monitor them all at once.\n\nThe following example pings four addresses simultaneously and prints output for them all.\n\n.. code-block:: python\n\n    from sopen import Sopen\n\n    ping_addrs = ['127.0.0.1', '127.0.0.2', '127.0.0.3', '127.0.0.4']\n    procs = dict()\n\n    # Spawn pings for all addresses\n    for addr in ping_addrs:\n        proc = Sopen('ping -A -O {0}'.format(addr), mode='nonblocking')\n        procs[addr] = proc\n\n    while True:\n        for addr, proc in procs.items():\n            out = proc.readline_stdout(timeout=0.001)\n            err = proc.readline_stderr(timeout=0.001)\n            if (out is not None):\n                print(\"{}\".format(out))\n            if (err is not None):\n                print(\"ERROR {}\".format(err))\n\n\n.. _`sopen`: https://github.com/mpenning/sopen/\n.. _`Popen`: https://docs.python.org/3/library/subprocess.html#popen-objects\n.. _`Python`: https://python.org/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mpenning/sopen", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sopen", "package_url": "https://pypi.org/project/sopen/", "platform": "any", "project_url": "https://pypi.org/project/sopen/", "project_urls": {"Homepage": "http://github.com/mpenning/sopen"}, "release_url": "https://pypi.org/project/sopen/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "sopen", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-sopen\">\n<h2>What is sopen?</h2>\n<p><a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> is a simple Python2 and Python3-compatible package which wraps Python\u2019s\n<a href=\"https://docs.python.org/3/library/subprocess.html#popen-objects\" rel=\"nofollow\">Popen</a>.  <a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> strives to be a cross-platform library available in both Linux and Windows.</p>\n<p><a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> runs a shell command in one of two ways:</p>\n<ul>\n<li>\u2018blocking\u2019 mode, which blocks until the shell command finishes.</li>\n<li>\u2018nonblocking\u2019 mode, which enables the user to see output from the command as it runs.</li>\n</ul>\n<p>The primary goal of <a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> is simplicity.  The user doesn\u2019t need to think about pipes, queues, threading, or any of the other issues that come up while using <a href=\"https://docs.python.org/3/library/subprocess.html#popen-objects\" rel=\"nofollow\">Popen</a> (especially in nonblocking use cases).</p>\n<p>As with anything, simplicity comes with tradeoffs:</p>\n<ul>\n<li>At this time, <a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> does not support piping commands into other process (or piping commands through the shell).  Use <a href=\"https://docs.python.org/3/library/subprocess.html#popen-objects\" rel=\"nofollow\">Popen</a> if piping commands into each other is required</li>\n<li>Usage of \u2018blocking\u2019 and \u2018nonblocking\u2019 modes are different.</li>\n<li>Process return codes are not available in nonblocking mode at this time</li>\n</ul>\n</div>\n<div id=\"blocking-mode-usage\">\n<h2>Blocking mode usage</h2>\n<p>This captures the output of a grep and prints it to stdout\u2026</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sopen</span> <span class=\"kn\">import</span> <span class=\"n\">Sopen</span>\n\n<span class=\"c1\"># This blocks until the output of the grep finishes...</span>\n<span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">Sopen</span><span class=\"p\">(</span><span class=\"s1\">'grep foo bar.txt'</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'blocking'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"non-blocking-mode-usage\">\n<h2>Non-blocking mode usage</h2>\n<p>Non-blocking mode is best for commands that stream output non-stop, or processes that you may want to react to in real-time.  This example captures the output of a ping command (five pings) and prints it to stdout\u2026</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sopen</span> <span class=\"kn\">import</span> <span class=\"n\">Sopen</span>\n\n<span class=\"n\">ping_addrs</span> <span class=\"o\">=</span> <span class=\"s1\">'127.0.0.1'</span>\n\n<span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">Sopen</span><span class=\"p\">(</span><span class=\"s1\">'ping -c 5 -O </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">ping_addrs</span><span class=\"p\">),</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'nonblocking'</span><span class=\"p\">)</span>\n\n<span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">finished</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># readline_stdout() is only available in nonblocking mode</span>\n    <span class=\"c1\"># The timeout parameter tells sopen how long to wait for output;</span>\n    <span class=\"c1\">#    if there is no output before the timeout, None is returned.</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">readline_stdout</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n    <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">readline_stderr</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ERROR </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">stdout_done</span> <span class=\"ow\">and</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">stderr_done</span><span class=\"p\">:</span>\n        <span class=\"n\">finished</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>Where <a href=\"https://github.com/mpenning/sopen/\" rel=\"nofollow\">sopen</a> really shines is when you need to spawn many streaming shell commands and monitor them all at once.</p>\n<p>The following example pings four addresses simultaneously and prints output for them all.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sopen</span> <span class=\"kn\">import</span> <span class=\"n\">Sopen</span>\n\n<span class=\"n\">ping_addrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.2'</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.3'</span><span class=\"p\">,</span> <span class=\"s1\">'127.0.0.4'</span><span class=\"p\">]</span>\n<span class=\"n\">procs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Spawn pings for all addresses</span>\n<span class=\"k\">for</span> <span class=\"n\">addr</span> <span class=\"ow\">in</span> <span class=\"n\">ping_addrs</span><span class=\"p\">:</span>\n    <span class=\"n\">proc</span> <span class=\"o\">=</span> <span class=\"n\">Sopen</span><span class=\"p\">(</span><span class=\"s1\">'ping -A -O </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">),</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'nonblocking'</span><span class=\"p\">)</span>\n    <span class=\"n\">procs</span><span class=\"p\">[</span><span class=\"n\">addr</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">proc</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"n\">proc</span> <span class=\"ow\">in</span> <span class=\"n\">procs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">readline_stdout</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n        <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">proc</span><span class=\"o\">.</span><span class=\"n\">readline_stderr</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"ERROR </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 5350425, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c5a29e83202bf298878060464941c1c4", "sha256": "6fd31d35fdd52db8e4cb5a87ce8216da2900b953098e8d6319c24fe8236615d5"}, "downloads": -1, "filename": "sopen-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c5a29e83202bf298878060464941c1c4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6920, "upload_time": "2019-06-02T23:45:12", "upload_time_iso_8601": "2019-06-02T23:45:12.552489Z", "url": "https://files.pythonhosted.org/packages/f0/5d/b0ce505dc22ddfda93c1049a69f2d46fc646394a225c670514a9d70bf250/sopen-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8640db504c8653df71dc06b5d6cd7c0b", "sha256": "b3978d889ba1ff61e1102460bd5830dd07819915983aa477b488429d6f27e0d9"}, "downloads": -1, "filename": "sopen-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8640db504c8653df71dc06b5d6cd7c0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5665, "upload_time": "2019-06-02T23:45:14", "upload_time_iso_8601": "2019-06-02T23:45:14.577075Z", "url": "https://files.pythonhosted.org/packages/9d/6a/b926a49e700b93b2ae98f8c7350a7b145061480fef1e92a81cf13c42f71f/sopen-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "51f93dedf02aa94a6e2c26ac1be68be1", "sha256": "eede0101a36195645113a9a4c20c76e3cd6b6e210b53c35e7c35ddbe514258a1"}, "downloads": -1, "filename": "sopen-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "51f93dedf02aa94a6e2c26ac1be68be1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7276, "upload_time": "2019-06-03T01:26:46", "upload_time_iso_8601": "2019-06-03T01:26:46.392392Z", "url": "https://files.pythonhosted.org/packages/2b/51/cd14dfe65af83b6d6303de6fcf0c0e1d3d33a51bbce98e0ec2ff6ec2539e/sopen-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "029e8c5d35cd4d592d98dd43d7aa4cbb", "sha256": "c12d8a7924fdf37654340b1ef4877c0f769a0ded9374027236c5bcca38876fa0"}, "downloads": -1, "filename": "sopen-0.0.2.tar.gz", "has_sig": false, "md5_digest": "029e8c5d35cd4d592d98dd43d7aa4cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5929, "upload_time": "2019-06-03T01:26:48", "upload_time_iso_8601": "2019-06-03T01:26:48.015183Z", "url": "https://files.pythonhosted.org/packages/00/64/4c506ab1b5c2975fa53096807fc721fcccff2b56938df9bd265eae427b5e/sopen-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "515ff34bc333aa769702023029ee32eb", "sha256": "69f4d59f7d64494cbbc3a0d1705a4e6ea06acdd752d5fc47e6817c5b4eef0f3a"}, "downloads": -1, "filename": "sopen-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "515ff34bc333aa769702023029ee32eb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7222, "upload_time": "2019-06-03T01:41:10", "upload_time_iso_8601": "2019-06-03T01:41:10.134780Z", "url": "https://files.pythonhosted.org/packages/b2/d6/e7443d2cbe894d126065cb2055837bbda96559bbdf95ff9666b52dcd15d2/sopen-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "253e92cf1c7adae6550166dde0ec6615", "sha256": "40259976b4628808caec0ef8ea5e05958db1f155b72e6f56bbc151ce2abdec4f"}, "downloads": -1, "filename": "sopen-0.0.3.tar.gz", "has_sig": false, "md5_digest": "253e92cf1c7adae6550166dde0ec6615", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5902, "upload_time": "2019-06-03T01:41:11", "upload_time_iso_8601": "2019-06-03T01:41:11.686907Z", "url": "https://files.pythonhosted.org/packages/f1/a4/212be598d84b02b141255be9f52364626d255c823eac3d065cbfa00cfcf5/sopen-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "515ff34bc333aa769702023029ee32eb", "sha256": "69f4d59f7d64494cbbc3a0d1705a4e6ea06acdd752d5fc47e6817c5b4eef0f3a"}, "downloads": -1, "filename": "sopen-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "515ff34bc333aa769702023029ee32eb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7222, "upload_time": "2019-06-03T01:41:10", "upload_time_iso_8601": "2019-06-03T01:41:10.134780Z", "url": "https://files.pythonhosted.org/packages/b2/d6/e7443d2cbe894d126065cb2055837bbda96559bbdf95ff9666b52dcd15d2/sopen-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "253e92cf1c7adae6550166dde0ec6615", "sha256": "40259976b4628808caec0ef8ea5e05958db1f155b72e6f56bbc151ce2abdec4f"}, "downloads": -1, "filename": "sopen-0.0.3.tar.gz", "has_sig": false, "md5_digest": "253e92cf1c7adae6550166dde0ec6615", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5902, "upload_time": "2019-06-03T01:41:11", "upload_time_iso_8601": "2019-06-03T01:41:11.686907Z", "url": "https://files.pythonhosted.org/packages/f1/a4/212be598d84b02b141255be9f52364626d255c823eac3d065cbfa00cfcf5/sopen-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:33 2020"}