{"info": {"author": "Dmitry Kryukov", "author_email": "glebov.ru@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: AsyncIO", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Typing :: Typed"], "description": "CASHEWS \ud83e\udd54\n=========\n\nAsync cache utils with simple api to build fast and reliable applications\n-------------------------------------------------------------------------\n\n    pip install cashews[redis]\n\n\nWhy\n---\n\nCache plays significant role in modern applications and everybody wanna use all power of async programming and cache..\nThere are a few advance techniques with cache and async programming that can help you to build simple, fast,\n scalable and reliable applications. Caches\n\n\n# Features\n- Decorator base api, just decorate and play\n- Cache invalidation by time, 'ttl' is a required parameter to avoid storage overflow and endless cache\n- Support Multi backend ([Memory](#memory), [Redis](#redis), memcache by request)\n- Can cache any objects securely with pickle (use [hash key](#redis)). \n- Simple configuring and API\n- cache invalidation autosystem and API \n- Cache usage detection API\n\n## API\n- [simple cache](#simple-cache)\n- [fail cache](#fail-cache)\n- [hit-rate cache](#hit-cache)\n- [perf-rate cache](#performance-downgrade-detection)\n- [rate-limit](#rate-limit)\n- [cache with early expiration/rebuilding](#early)\n- [lock](#locked) \n- [circuit](#circuit-breaker) \n- [api for key storage/backend](#basic-api)\n- [auto invalidation](#invalidation)\n- [detect cache usage](#detect-source-of-a-result)\n\nUsage\n-----\n\n### Configure\nCache object is a single object that can be configured in one place by url::\n\n```python\nfrom cashews import cache\n\ncache.setup(\"redis://0.0.0.0/?db=1&create_connection_timeout=0.5&safe=0&hash_key=my_sicret&enable=1\")\nor\ncache.setup(\"redis://0.0.0.0/\", db=1, create_connection_timeout=0.5, safe=False, hash_key=b\"my_key\", enable=True)\nor\ncache.setup(\"mem://\") # for inmemory cache\n```\nif you dont like global objects or prefer more manageable way you can work with cache class \n```python\n\nfrom cashews import Cache\n\ncache = Cache()\ncache.setup(\"mem://?size=500\")\n```\n\nYou can disable cache by 'enable' parameter:\n```python\n\ncache.setup(\"mem://?size=500\", enable=False)\ncache.setup(\"redis://redis/0?enable=1\")\ncache.setup(\"redis://redis?enable=True\")\n```\nAlso read about dynamic disabling at [simple cache](#simple-cache) section\n\n### Backends\n\n#### Memory\nStore values in a dict, have 2 strategies to expire keys: \ndeferred task to remove key, can overload loop by big amount of async tasks, that's why use strategy with storing expiration time is prefer\nThis strategy check expiration on 'get' and periodically purge expired keys\nAlso size of memory cache limit with size parameter (default 1000):\n\n```python\ncache.setup(\"mem://?size=500\")\ncache.setup(\"mem://?check_interval=10&size=10000\") # using strategy with expiration store, we increase check_interval be\n```\n#### Redis\nRequired aioredis package\nStore values in a redis key-value storage. Use 'safe' parameter to avoid raising any connection errors, command will return None in this case.\nThis backend use pickle to store values, but the cashes store values with sha1 keyed hash.\nSo you should set 'hash_key' parameter to protect your application from security vulnerabilities.\nYou can set parameters for [redis pool](https://aioredis.readthedocs.io/en/v1.3.0/api_reference.html#aioredis.create_pool) by backend setup    \n\n```python\ncache.setup(\"redis://0.0.0.0/?db=1&minsize=10&safe=1&hash_key=my_sicret\")\ncache.setup(\"redis://0.0.0.0/\", db=1, password=\"my_pass\", create_connection_timeout=0.1, safe=0, hash_key=\"my_sicret\")\n```\n\n### Simple cache\n\nTypical cache strategy: execute, store and return cached value till expiration::\n\n```python\n\nfrom cashews import cache\nfrom datetime import timedelta\n\n@cache(ttl=timedelta(hours=3))\nasync def long_running_function(arg, kward):\n    ...\n```\n\n:param ttl: duration in seconds or in timedelta object or a callable object to store a result\n\n:param func_args: arguments of call that will be used in key, can be tuple or dict with argument name as a key and callable object as a transform function for value of this argument\n\n```python\n\n@cache(ttl=100, func_args=(\"arg\", \"token\"))\nasync def long_running_function(arg, user: User, token: str = \"token\"):\n    ...\n\nawait long_running_function(\"name\", user=user, token=\"qdfrevt\")  # key will be like \"long_running_function:arg:name:token:qdfrevt\n```\nBut what if we want to user argument define a cache key or want to hide token from cache\n```python\n@cache(ttl=100, func_args={\"arg\": True, \"token\": get_md5, \"user\": attrgetter(\"uid\")})\nasync def long_running_function(arg, user: User, token: str = \"token\"):\n    ...\n\nawait long_running_function(\"name\", user=user, token=\"qdfrevt\")  # key will be like \"long_running_function:arg:name:token:7ea802f0544ff108aace43e2d3752a28:user:51e6da60-2553-45ec-9e56-d9538b9614c8\n```\n\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call (like 'key_{token}/{arg}\\{user}')\n\n:param condition: callable object that determines whether the result will be saved or not\n\n:param prefix: custom prefix for key\n\n\n### Fail cache\nReturn cache result (at list 1 call of function call should be succeed) if call raised one of the given exceptions,\n\n:param ttl: duration in seconds or in timedelta object or a callable object to store a result\n\n:param exceptions: exceptions at which returned cache result\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param prefix: custom prefix for key, default \"fail\"\n\nExample\n-------\n```python\nfrom cashews import cache  # or from cashews import fail\n\n@cache.fail(ttl=timedelta(hours=2))\nasync def get(name):\n    value = await api_call()\n    return {\"status\": value}\n```\n\n### Hit cache\nCache call results and drop cache after given numbers of call 'cache_hits'\n\n:param ttl: duration in seconds or in timedelta object or a callable object to store a result\n\n:param cache_hits: number of cache hits till cache will dropped\n\n:param update_before: number of cache hits before cache will update\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param condition: callable object that determines whether the result will be saved or not\n\n:param prefix: custom prefix for key, default \"hit\"\n\nExample\n-------\n```python\nfrom cashews import cache  # or from cashews import hit\n\n@cache.hit(ttl=timedelta(hours=2), cache_hits=100, update_before=2)\nasync def get(name):\n    ...\n```\n\n### Performance downgrade detection\nTrace time execution of target and throw exception if it downgrade to given condition\n\n:param ttl: duration in seconds or in timedelta object or a callable object to store a result\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param trace_size: the number of calls that are involved\n\n:param perf_condition: callable object that determines whether the result will be cached,\n       default if doubled mean value of time execution less then current\n\n:param prefix: custom prefix for key, default 'perf'\n\n```python\nimport cashews.decorators.perf\nfrom cashews import cache   # or from cashews import perf\n\n@cashews.decorators.perf.perf(ttl=timedelta(hours=2))\nasync def get(name):\n    value = await api_call()\n    return {\"status\": value}\n``` \n\n### Locked\nDecorator that can help you to solve Cache stampede problem (https://en.wikipedia.org/wiki/Cache_stampede),\nLock following function calls till first one will be finished\nCan guarantee that one function call for given ttl, if ttl is None\n\n:param ttl: duration to lock wrapped function call\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param prefix: custom prefix for key, default 'early'\n\n```python\n\nfrom cashews import cache  # or from cashews import locked\n\n@cache.locked(ttl=timedelta(minutes=10))\nasync def get(name):\n    value = await api_call()\n    return {\"status\": value}\n```\n\n### Early\nCache strategy that try to solve Cache stampede problem (https://en.wikipedia.org/wiki/Cache_stampede),\nWith a hot cache recalculate a result in background near expiration time\nWarning! Not good at cold cache\n\n:param ttl: seconds in int or as timedelta object to store a result\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param condition: callable object that determines whether the result will be saved or not\n\n:param prefix: custom prefix for key, default 'early'\n```python\nfrom cashews import cache  # or from cashews import early\n\n@cache.early(ttl=timedelta(minutes=10))\nasync def get(name):\n    value = await api_call()\n    return {\"status\": value}\n```\n\n### Rate limit \nRate limit for function call. Do not call function if rate limit is reached, and call given action\n\n:param limit: number of calls\n\n:param period: Period\n\n:param ttl: time to ban, default == period\n\n:param func_args: [see simple cache params](#simple-cache)\n\n:param action: call when rate limit reached, default raise RateLimitException\n\n:param prefix: custom prefix for key, default 'rate_limit'\n```python\nimport cashews.decorators.rate\nfrom cashews import cache  # or from cashews import rate_limit\n\n# no more then 10 calls per minute or ban for 10 minutes\n@cashews.decorators.rate.rate_limit(limit=10, period=timedelta(minutes=1) ttl=timedelta(minutes=10))\nasync def get(name):\n    return {\"status\": value}\n```\n\n### Circuit breaker\nCircuit breaker\n\n:param errors_rate: Errors rate in percents\n\n:param period: Period\n\n:param ttl: seconds in int or as timedelta to keep circuit breaker switched\n\n:param func_args: arguments that will be used in key\n\n:param exceptions: exceptions at which returned cache result\n\n:param key: custom cache key, may contain alias to args or kwargs passed to a call\n\n:param prefix: custom prefix for key, default \"circuit_breaker\"\n```python\nfrom cashews import cache  # or from cashews import rate_limit\n\n\n@cache.circuit_breaker(errors_rate=10, period=timedelta(minutes=1) ttl=timedelta(minutes=5))\nasync def get(name):\n    ...\n```    \n\n### Basic api\nThere are 13 basic methods to work with key-storage::```python\n```python\nfrom cashews import cache\n\ncache.setup(\"mem://\")\n\nawait cache.set(key=\"key\", value={\"any\": True}, expire=60, exist=None)  # -> bool\nawait cache.get(\"key\")  # -> Any\nawait cache.get_many(\"key1\", \"key2\")\nawait cache.incr(\"key\") # -> int\nawait cache.delete(\"key\")\nawait cache.expire(\"key\", timeout=10)\nawait cache.get_expire(\"key\")  # -> int seconds to expire\nawait cache.ping(message=None)  # -> bytes\nawait cache.clear()\nawait cache.is_locked(\"key\", wait=60)  # -> bool\nasync with cache.lock(\"key\", expire=10):\n   ...\nawait cache.set_lock(\"key\", value=\"value\", expire=60)  # -> bool\nawait cache.unlock(\"key\", \"value\")  # -> bool\n```    \n\n### Invalidation\nCache invalidation - on of the main Computer Science well known problem. That's why `ttl` is a required parameter for all cache decorators\nAnother strategy to cache invalidation implement in next api:\n\n```python\nfrom cashews import cache\nfrom datetime import timedelta\n\n@cache(ttl=timedelta(days=1))\nasync def user_items(user_id, fresh=False):\n    ...\n\n@cache(ttl=timedelta(hours=3))\nasync def items(page=1):\n    ...\n\n@cashews.cache_utils.invalidate.invalidate(\"module:items:page:*\")  # the same as @cache.invalidate(items)\n@cashews.cache_utils.invalidate.invalidate(user_items, {\"user_id\": lambda user: user.id}, defaults={\"fresh\"; True})\nasync def create_item(user):\n   ...\n```\n\nAlso you may face problem with invalid cache arising on code changing. For example we have:\n```python\n\n@cache(ttl=timedelta(days=1))\nasync def get_user(user_id):\n    return {\"name\": \"Dmitry\", \"surname\": \"Krykov\"}\n```\nThan we did changes\n\n    -    return {\"name\": \"Dmitry\", \"surname\": \"Krykov\"}\n    +    return {\"full_name\": \"Dmitry Krykov\"}\n\n\nThere is no way simple way to automatically detect that kind of cache invalidity, because it is a dict.\n\u0421ertainly we can add prefix for this cache:\n```python\n@cache(ttl=timedelta(days=1), prefix=\"v2\")\nasync def get_user(user_id):\n    return {\"full_name\": \"Dmitry Krykov\"}\n```\nbut usually we forget to do it...\nThe best defense against such errors is to use objects like `dataclasses` for operating with structures, \nit adds distinctness and `cashews` can detect changes in this structure automatically by checking representation (repr) of object.\nSo you can you use your own datacontainer with defined `__repr__` method that rise `AttributeError`:\n```python\nfrom dataclasses import dataclass\n\n@dataclass()\nclass User:\n    name: str\n    surname: str\n# OR\nclass User:\n\n    def __init__(self, name, surname):\n        self.name, self.surname = name, surname\n\n    def __repr__(self):\n        return f\"{self.name} {self.surname}\"\n\n# Will detect changes of structure\n@cache(ttl=timedelta(days=1), prefix=\"v2\")\nasync def get_user(user_id):\n    return User(\"Dima\", \"Krykov\")\n```\n\n##Detect source of a result\nDecorators give to us very simple api but it makes difficult to understand what led to this result - cache or direct call\nTo solve this problem cashews have a simple API:\n```python\nfrom cashews import context_cache_detect\n\ncontext_cache_detect.start()\nresponse = await decorated_function()\nkeys = context_cache_detect.get()\nprint(keys)\n# >>> {\"key\": {\"ttl\": 10}, \"fail_key\": {\"ttl\": timedelta(hours=10), \"exc\": RateLimit}}\n\n# OR\nfrom cashews import CacheDetect\n\ncache_detect = CacheDetect()\nawait func(_from_cache=cache_detect)\nassert cache_detect.get() == {}\n\nawait func(_from_cache=cache_detect)\nassert len(cache_detect.get()) == 1\n```\nYou can use it in your web app:\n```python\n@app.middleware(\"http\")\nasync def add_from_cache_headers(request: Request, call_next):\n    context_cache_detect.start()\n    response = await call_next(request)\n    keys = context_cache_detect.get()\n    if keys:\n        key = list(keys.keys())[0]\n        response.headers[\"X-From-Cache\"] = key\n        expire = await mem.get_expire(key)\n        if expire == -1:\n            expire = await cache.get_expire(key)\n        response.headers[\"X-From-Cache-Expire-In-Seconds\"] = str(expire)\n        response.headers[\"X-From-Cache-TTL\"] = str(keys[key][\"ttl\"].total_seconds())\n        if \"exc\" in keys[key]:\n            response.headers[\"X-From-Cache-Exc\"] = str(keys[key][\"exc\"])\n    return response\n```\n\nFail cache - disable next set to avoide update cache by wrong values\nInfo by key template\nHit rate + https://www.datadoghq.com/blog/how-to-monitor-redis-performance-metrics/\n\nInvalidate without scan (may be separate keys by db )\nClient side cache for redis backend\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Krukov/cashews/tarball/0.17.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Krukov/cashews", "keywords": "cache aio async multicache aiocache", "license": "", "maintainer": "", "maintainer_email": "", "name": "cashews", "package_url": "https://pypi.org/project/cashews/", "platform": "", "project_url": "https://pypi.org/project/cashews/", "project_urls": {"Download": "https://github.com/Krukov/cashews/tarball/0.17.0", "Homepage": "https://github.com/Krukov/cashews"}, "release_url": "https://pypi.org/project/cashews/0.17.0/", "requires_dist": ["black ; extra == 'dev'", "codecov ; extra == 'dev'", "coverage ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'dev'", "isort ; extra == 'dev'", "pylint ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "aioredis (>=1.0.0) ; extra == 'redis'"], "requires_python": "", "summary": "cache tools with async power", "version": "0.17.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CASHEWS \ud83e\udd54</h1>\n<h2>Async cache utils with simple api to build fast and reliable applications</h2>\n<pre><code>pip install cashews[redis]\n</code></pre>\n<h2>Why</h2>\n<p>Cache plays significant role in modern applications and everybody wanna use all power of async programming and cache..\nThere are a few advance techniques with cache and async programming that can help you to build simple, fast,\nscalable and reliable applications. Caches</p>\n<h1>Features</h1>\n<ul>\n<li>Decorator base api, just decorate and play</li>\n<li>Cache invalidation by time, 'ttl' is a required parameter to avoid storage overflow and endless cache</li>\n<li>Support Multi backend (<a href=\"#memory\" rel=\"nofollow\">Memory</a>, <a href=\"#redis\" rel=\"nofollow\">Redis</a>, memcache by request)</li>\n<li>Can cache any objects securely with pickle (use <a href=\"#redis\" rel=\"nofollow\">hash key</a>).</li>\n<li>Simple configuring and API</li>\n<li>cache invalidation autosystem and API</li>\n<li>Cache usage detection API</li>\n</ul>\n<h2>API</h2>\n<ul>\n<li><a href=\"#simple-cache\" rel=\"nofollow\">simple cache</a></li>\n<li><a href=\"#fail-cache\" rel=\"nofollow\">fail cache</a></li>\n<li><a href=\"#hit-cache\" rel=\"nofollow\">hit-rate cache</a></li>\n<li><a href=\"#performance-downgrade-detection\" rel=\"nofollow\">perf-rate cache</a></li>\n<li><a href=\"#rate-limit\" rel=\"nofollow\">rate-limit</a></li>\n<li><a href=\"#early\" rel=\"nofollow\">cache with early expiration/rebuilding</a></li>\n<li><a href=\"#locked\" rel=\"nofollow\">lock</a></li>\n<li><a href=\"#circuit-breaker\" rel=\"nofollow\">circuit</a></li>\n<li><a href=\"#basic-api\" rel=\"nofollow\">api for key storage/backend</a></li>\n<li><a href=\"#invalidation\" rel=\"nofollow\">auto invalidation</a></li>\n<li><a href=\"#detect-source-of-a-result\" rel=\"nofollow\">detect cache usage</a></li>\n</ul>\n<h2>Usage</h2>\n<h3>Configure</h3>\n<p>Cache object is a single object that can be configured in one place by url::</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://0.0.0.0/?db=1&amp;create_connection_timeout=0.5&amp;safe=0&amp;hash_key=my_sicret&amp;enable=1\"</span><span class=\"p\">)</span>\n<span class=\"ow\">or</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://0.0.0.0/\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">create_connection_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"my_key\"</span><span class=\"p\">,</span> <span class=\"n\">enable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"ow\">or</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://\"</span><span class=\"p\">)</span> <span class=\"c1\"># for inmemory cache</span>\n</pre>\n<p>if you dont like global objects or prefer more manageable way you can work with cache class</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">Cache</span>\n\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">Cache</span><span class=\"p\">()</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://?size=500\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can disable cache by 'enable' parameter:</p>\n<pre><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://?size=500\"</span><span class=\"p\">,</span> <span class=\"n\">enable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://redis/0?enable=1\"</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://redis?enable=True\"</span><span class=\"p\">)</span>\n</pre>\n<p>Also read about dynamic disabling at <a href=\"#simple-cache\" rel=\"nofollow\">simple cache</a> section</p>\n<h3>Backends</h3>\n<h4>Memory</h4>\n<p>Store values in a dict, have 2 strategies to expire keys:\ndeferred task to remove key, can overload loop by big amount of async tasks, that's why use strategy with storing expiration time is prefer\nThis strategy check expiration on 'get' and periodically purge expired keys\nAlso size of memory cache limit with size parameter (default 1000):</p>\n<pre><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://?size=500\"</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://?check_interval=10&amp;size=10000\"</span><span class=\"p\">)</span> <span class=\"c1\"># using strategy with expiration store, we increase check_interval be</span>\n</pre>\n<h4>Redis</h4>\n<p>Required aioredis package\nStore values in a redis key-value storage. Use 'safe' parameter to avoid raising any connection errors, command will return None in this case.\nThis backend use pickle to store values, but the cashes store values with sha1 keyed hash.\nSo you should set 'hash_key' parameter to protect your application from security vulnerabilities.\nYou can set parameters for <a href=\"https://aioredis.readthedocs.io/en/v1.3.0/api_reference.html#aioredis.create_pool\" rel=\"nofollow\">redis pool</a> by backend setup</p>\n<pre><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://0.0.0.0/?db=1&amp;minsize=10&amp;safe=1&amp;hash_key=my_sicret\"</span><span class=\"p\">)</span>\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"redis://0.0.0.0/\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">\"my_pass\"</span><span class=\"p\">,</span> <span class=\"n\">create_connection_timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hash_key</span><span class=\"o\">=</span><span class=\"s2\">\"my_sicret\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Simple cache</h3>\n<p>Typical cache strategy: execute, store and return cached value till expiration::</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">long_running_function</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">kward</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>:param ttl: duration in seconds or in timedelta object or a callable object to store a result</p>\n<p>:param func_args: arguments of call that will be used in key, can be tuple or dict with argument name as a key and callable object as a transform function for value of this argument</p>\n<pre><span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">func_args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"arg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"token\"</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">long_running_function</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"token\"</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">await</span> <span class=\"n\">long_running_function</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"qdfrevt\"</span><span class=\"p\">)</span>  <span class=\"c1\"># key will be like \"long_running_function:arg:name:token:qdfrevt</span>\n</pre>\n<p>But what if we want to user argument define a cache key or want to hide token from cache</p>\n<pre><span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">func_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"arg\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"s2\">\"token\"</span><span class=\"p\">:</span> <span class=\"n\">get_md5</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">:</span> <span class=\"n\">attrgetter</span><span class=\"p\">(</span><span class=\"s2\">\"uid\"</span><span class=\"p\">)})</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">long_running_function</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"token\"</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">await</span> <span class=\"n\">long_running_function</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"s2\">\"qdfrevt\"</span><span class=\"p\">)</span>  <span class=\"c1\"># key will be like \"long_running_function:arg:name:token:7ea802f0544ff108aace43e2d3752a28:user:51e6da60-2553-45ec-9e56-d9538b9614c8</span>\n</pre>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call (like 'key_{token}/{arg}{user}')</p>\n<p>:param condition: callable object that determines whether the result will be saved or not</p>\n<p>:param prefix: custom prefix for key</p>\n<h3>Fail cache</h3>\n<p>Return cache result (at list 1 call of function call should be succeed) if call raised one of the given exceptions,</p>\n<p>:param ttl: duration in seconds or in timedelta object or a callable object to store a result</p>\n<p>:param exceptions: exceptions at which returned cache result</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param prefix: custom prefix for key, default \"fail\"</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import fail</span>\n\n<span class=\"nd\">@cache</span><span class=\"o\">.</span><span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api_call</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n</pre>\n<h3>Hit cache</h3>\n<p>Cache call results and drop cache after given numbers of call 'cache_hits'</p>\n<p>:param ttl: duration in seconds or in timedelta object or a callable object to store a result</p>\n<p>:param cache_hits: number of cache hits till cache will dropped</p>\n<p>:param update_before: number of cache hits before cache will update</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param condition: callable object that determines whether the result will be saved or not</p>\n<p>:param prefix: custom prefix for key, default \"hit\"</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import hit</span>\n\n<span class=\"nd\">@cache</span><span class=\"o\">.</span><span class=\"n\">hit</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">cache_hits</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">update_before</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Performance downgrade detection</h3>\n<p>Trace time execution of target and throw exception if it downgrade to given condition</p>\n<p>:param ttl: duration in seconds or in timedelta object or a callable object to store a result</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param trace_size: the number of calls that are involved</p>\n<p>:param perf_condition: callable object that determines whether the result will be cached,\ndefault if doubled mean value of time execution less then current</p>\n<p>:param prefix: custom prefix for key, default 'perf'</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cashews.decorators.perf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>   <span class=\"c1\"># or from cashews import perf</span>\n\n<span class=\"nd\">@cashews</span><span class=\"o\">.</span><span class=\"n\">decorators</span><span class=\"o\">.</span><span class=\"n\">perf</span><span class=\"o\">.</span><span class=\"n\">perf</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api_call</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n</pre>\n<h3>Locked</h3>\n<p>Decorator that can help you to solve Cache stampede problem (<a href=\"https://en.wikipedia.org/wiki/Cache_stampede\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Cache_stampede</a>),\nLock following function calls till first one will be finished\nCan guarantee that one function call for given ttl, if ttl is None</p>\n<p>:param ttl: duration to lock wrapped function call</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param prefix: custom prefix for key, default 'early'</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import locked</span>\n\n<span class=\"nd\">@cache</span><span class=\"o\">.</span><span class=\"n\">locked</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api_call</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n</pre>\n<h3>Early</h3>\n<p>Cache strategy that try to solve Cache stampede problem (<a href=\"https://en.wikipedia.org/wiki/Cache_stampede\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Cache_stampede</a>),\nWith a hot cache recalculate a result in background near expiration time\nWarning! Not good at cold cache</p>\n<p>:param ttl: seconds in int or as timedelta object to store a result</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param condition: callable object that determines whether the result will be saved or not</p>\n<p>:param prefix: custom prefix for key, default 'early'</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import early</span>\n\n<span class=\"nd\">@cache</span><span class=\"o\">.</span><span class=\"n\">early</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">api_call</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n</pre>\n<h3>Rate limit</h3>\n<p>Rate limit for function call. Do not call function if rate limit is reached, and call given action</p>\n<p>:param limit: number of calls</p>\n<p>:param period: Period</p>\n<p>:param ttl: time to ban, default == period</p>\n<p>:param func_args: <a href=\"#simple-cache\" rel=\"nofollow\">see simple cache params</a></p>\n<p>:param action: call when rate limit reached, default raise RateLimitException</p>\n<p>:param prefix: custom prefix for key, default 'rate_limit'</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cashews.decorators.rate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import rate_limit</span>\n\n<span class=\"c1\"># no more then 10 calls per minute or ban for 10 minutes</span>\n<span class=\"nd\">@cashews</span><span class=\"o\">.</span><span class=\"n\">decorators</span><span class=\"o\">.</span><span class=\"n\">rate</span><span class=\"o\">.</span><span class=\"n\">rate_limit</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"status\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">}</span>\n</pre>\n<h3>Circuit breaker</h3>\n<p>Circuit breaker</p>\n<p>:param errors_rate: Errors rate in percents</p>\n<p>:param period: Period</p>\n<p>:param ttl: seconds in int or as timedelta to keep circuit breaker switched</p>\n<p>:param func_args: arguments that will be used in key</p>\n<p>:param exceptions: exceptions at which returned cache result</p>\n<p>:param key: custom cache key, may contain alias to args or kwargs passed to a call</p>\n<p>:param prefix: custom prefix for key, default \"circuit_breaker\"</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>  <span class=\"c1\"># or from cashews import rate_limit</span>\n\n\n<span class=\"nd\">@cache</span><span class=\"o\">.</span><span class=\"n\">circuit_breaker</span><span class=\"p\">(</span><span class=\"n\">errors_rate</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h3>Basic api</h3>\n<p>There are 13 basic methods to work with key-storage::```python</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n\n<span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s2\">\"mem://\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"any\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">},</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">exist</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; bool</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; Any</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get_many</span><span class=\"p\">(</span><span class=\"s2\">\"key1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"key2\"</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">incr</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; int</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">expire</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get_expire</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; int seconds to expire</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">ping</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; bytes</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">is_locked</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; bool</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set_lock</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"value\"</span><span class=\"p\">,</span> <span class=\"n\">expire</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; bool</span>\n<span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"s2\">\"key\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; bool</span>\n</pre>\n<h3>Invalidation</h3>\n<p>Cache invalidation - on of the main Computer Science well known problem. That's why <code>ttl</code> is a required parameter for all cache decorators\nAnother strategy to cache invalidation implement in next api:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">user_items</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">fresh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@cashews</span><span class=\"o\">.</span><span class=\"n\">cache_utils</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"p\">(</span><span class=\"s2\">\"module:items:page:*\"</span><span class=\"p\">)</span>  <span class=\"c1\"># the same as @cache.invalidate(items)</span>\n<span class=\"nd\">@cashews</span><span class=\"o\">.</span><span class=\"n\">cache_utils</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"o\">.</span><span class=\"n\">invalidate</span><span class=\"p\">(</span><span class=\"n\">user_items</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">},</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"fresh\"</span><span class=\"p\">;</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_item</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n</pre>\n<p>Also you may face problem with invalid cache arising on code changing. For example we have:</p>\n<pre><span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Dmitry\"</span><span class=\"p\">,</span> <span class=\"s2\">\"surname\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Krykov\"</span><span class=\"p\">}</span>\n</pre>\n<p>Than we did changes</p>\n<pre><code>-    return {\"name\": \"Dmitry\", \"surname\": \"Krykov\"}\n+    return {\"full_name\": \"Dmitry Krykov\"}\n</code></pre>\n<p>There is no way simple way to automatically detect that kind of cache invalidity, because it is a dict.\n\u0421ertainly we can add prefix for this cache:</p>\n<pre><span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"v2\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"full_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Dmitry Krykov\"</span><span class=\"p\">}</span>\n</pre>\n<p>but usually we forget to do it...\nThe best defense against such errors is to use objects like <code>dataclasses</code> for operating with structures,\nit adds distinctness and <code>cashews</code> can detect changes in this structure automatically by checking representation (repr) of object.\nSo you can you use your own datacontainer with defined <code>__repr__</code> method that rise <code>AttributeError</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"nd\">@dataclass</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">surname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"c1\"># OR</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surname</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">surname</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">surname</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"c1\"># Will detect changes of structure</span>\n<span class=\"nd\">@cache</span><span class=\"p\">(</span><span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">\"v2\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s2\">\"Dima\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Krykov\"</span><span class=\"p\">)</span>\n</pre>\n<p>##Detect source of a result\nDecorators give to us very simple api but it makes difficult to understand what led to this result - cache or direct call\nTo solve this problem cashews have a simple API:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">context_cache_detect</span>\n\n<span class=\"n\">context_cache_detect</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">decorated_function</span><span class=\"p\">()</span>\n<span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">context_cache_detect</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; {\"key\": {\"ttl\": 10}, \"fail_key\": {\"ttl\": timedelta(hours=10), \"exc\": RateLimit}}</span>\n\n<span class=\"c1\"># OR</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cashews</span> <span class=\"kn\">import</span> <span class=\"n\">CacheDetect</span>\n\n<span class=\"n\">cache_detect</span> <span class=\"o\">=</span> <span class=\"n\">CacheDetect</span><span class=\"p\">()</span>\n<span class=\"k\">await</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">_from_cache</span><span class=\"o\">=</span><span class=\"n\">cache_detect</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">cache_detect</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">await</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">_from_cache</span><span class=\"o\">=</span><span class=\"n\">cache_detect</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cache_detect</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<p>You can use it in your web app:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">middleware</span><span class=\"p\">(</span><span class=\"s2\">\"http\"</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">add_from_cache_headers</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">call_next</span><span class=\"p\">):</span>\n    <span class=\"n\">context_cache_detect</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">call_next</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">context_cache_detect</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"X-From-Cache\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"n\">expire</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">mem</span><span class=\"o\">.</span><span class=\"n\">get_expire</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">expire</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">expire</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get_expire</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"X-From-Cache-Expire-In-Seconds\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">expire</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"X-From-Cache-TTL\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">\"ttl\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"exc\"</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]:</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">\"X-From-Cache-Exc\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">\"exc\"</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<p>Fail cache - disable next set to avoide update cache by wrong values\nInfo by key template\nHit rate + <a href=\"https://www.datadoghq.com/blog/how-to-monitor-redis-performance-metrics/\" rel=\"nofollow\">https://www.datadoghq.com/blog/how-to-monitor-redis-performance-metrics/</a></p>\n<p>Invalidate without scan (may be separate keys by db )\nClient side cache for redis backend</p>\n\n          </div>"}, "last_serial": 7164878, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0b0908ba42ae8310f89bc0c257cf973f", "sha256": "4569dca965ee05e2f8e8ba765c2696506800810e0d9815995f3b0e813ca568f3"}, "downloads": -1, "filename": "cashews-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0b0908ba42ae8310f89bc0c257cf973f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21939, "upload_time": "2019-12-13T21:09:08", "upload_time_iso_8601": "2019-12-13T21:09:08.725492Z", "url": "https://files.pythonhosted.org/packages/0a/47/ea0f946a0062f5c579a4d1c3df6fbd48b638105457796623eb64050a02a9/cashews-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4983432de59ac93081d6459ae9513415", "sha256": "4c40a592ce6aab7675dd9ae3dc54aba5929e5a5bd52af50628238420ce82b8d8"}, "downloads": -1, "filename": "cashews-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4983432de59ac93081d6459ae9513415", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15879, "upload_time": "2019-12-13T21:09:11", "upload_time_iso_8601": "2019-12-13T21:09:11.467821Z", "url": "https://files.pythonhosted.org/packages/fd/9c/3660036f2f859357b735791cfe7096c7ab76c03a9dce67a6735362c5f459/cashews-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6462f6ce74341c31d579d0d5db037526", "sha256": "c13d73c22391da85c60a757da1df20470240a31dec849d4e8ced4322bd7f0cd5"}, "downloads": -1, "filename": "cashews-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6462f6ce74341c31d579d0d5db037526", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22016, "upload_time": "2019-12-13T22:01:52", "upload_time_iso_8601": "2019-12-13T22:01:52.768155Z", "url": "https://files.pythonhosted.org/packages/e6/df/510d41e54cbb3e6061cd266c7a4fefd2d63b7927120daed965269514f4a4/cashews-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43919fe33a13fcbc9c2714aa7eb62ec9", "sha256": "5a6678fe35e2dbea74ac9f81704575e4fe9004eaf57cb3f68c386b81457173ba"}, "downloads": -1, "filename": "cashews-0.1.1.tar.gz", "has_sig": false, "md5_digest": "43919fe33a13fcbc9c2714aa7eb62ec9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15979, "upload_time": "2019-12-13T22:01:54", "upload_time_iso_8601": "2019-12-13T22:01:54.566421Z", "url": "https://files.pythonhosted.org/packages/98/b7/52ebec86f2494d164578f2ca18484517e4708811146962cac946c34386a3/cashews-0.1.1.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "b6e3486ff5a510ce0b9876107121f374", "sha256": "7018948bcfb6924bb20aa2c949d513e704f5abd9b757aaa4959a35adaa233029"}, "downloads": -1, "filename": "cashews-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6e3486ff5a510ce0b9876107121f374", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31968, "upload_time": "2020-04-03T18:52:32", "upload_time_iso_8601": "2020-04-03T18:52:32.854257Z", "url": "https://files.pythonhosted.org/packages/d5/b5/06f8f39aaa1724452aa835463ef4faa8a2e828f90da0f747fad8cc36e480/cashews-0.10.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89ed09faa8572dec6164f6902bada009", "sha256": "4292929e677f482b497626fac168581cf77526dc55e20552e72dceb92d829e9e"}, "downloads": -1, "filename": "cashews-0.10.0.tar.gz", "has_sig": false, "md5_digest": "89ed09faa8572dec6164f6902bada009", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25466, "upload_time": "2020-04-03T18:52:34", "upload_time_iso_8601": "2020-04-03T18:52:34.305267Z", "url": "https://files.pythonhosted.org/packages/ce/95/03c27297f6f183fb3493c10829e52b8de65e191224ba0c0e6ad6915d6f60/cashews-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "6f8aaefe98dbb86e6fe23b87f6198a90", "sha256": "b439a740dbda5e758ea4488b97b76a6da6eac5539ee7ba18bade476608e16ba1"}, "downloads": -1, "filename": "cashews-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f8aaefe98dbb86e6fe23b87f6198a90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32096, "upload_time": "2020-04-04T23:07:15", "upload_time_iso_8601": "2020-04-04T23:07:15.172964Z", "url": "https://files.pythonhosted.org/packages/2a/5e/a1cf28deef08f0c54272815a3ea32864bdbff2650325479c57272dcd1cb0/cashews-0.11.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0d65174e2c9cec5d21e0f78688f8c2d", "sha256": "e985e75df4b96741ac534acb60ce5b270ff7e5a55294ed555ec02426811f8f14"}, "downloads": -1, "filename": "cashews-0.11.0.tar.gz", "has_sig": false, "md5_digest": "c0d65174e2c9cec5d21e0f78688f8c2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25698, "upload_time": "2020-04-04T23:07:16", "upload_time_iso_8601": "2020-04-04T23:07:16.881170Z", "url": "https://files.pythonhosted.org/packages/28/45/8726edee3e1e1389de35e0cd1c491ec69def36baddfb1314adecaf460a8a/cashews-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "9333bfd0c01abc564bb9b657f69ca54b", "sha256": "fc0d5f89ca7be6c80c4df136e662036a970a093be3964e10ee2335586158059c"}, "downloads": -1, "filename": "cashews-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9333bfd0c01abc564bb9b657f69ca54b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32353, "upload_time": "2020-04-06T15:25:09", "upload_time_iso_8601": "2020-04-06T15:25:09.339213Z", "url": "https://files.pythonhosted.org/packages/4e/44/2df0fc28b3040e22553665f566da1fc6a659fba3fe6ef19f734de8f6aa7c/cashews-0.12.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9315dad1aae746e5fd6f42e43a8b6911", "sha256": "4320d50067755040cfd9d9ba0413a8eeb654a13af6854fe6ef7d5174be9ea105"}, "downloads": -1, "filename": "cashews-0.12.0.tar.gz", "has_sig": false, "md5_digest": "9315dad1aae746e5fd6f42e43a8b6911", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26526, "upload_time": "2020-04-06T15:25:11", "upload_time_iso_8601": "2020-04-06T15:25:11.065441Z", "url": "https://files.pythonhosted.org/packages/21/be/1812d041efcc148a96a66dc8022dcedab6981dbb6f1cae0b187011963e00/cashews-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "8b348486e40b042a8ff20db9fb3cfc04", "sha256": "bd1f4e74fe1dc82655539779b30c4d97798a1cd6821b340e03eb97d78bd9f842"}, "downloads": -1, "filename": "cashews-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8b348486e40b042a8ff20db9fb3cfc04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33550, "upload_time": "2020-04-07T22:20:18", "upload_time_iso_8601": "2020-04-07T22:20:18.074200Z", "url": "https://files.pythonhosted.org/packages/9a/c1/615aa3d26470528df6f8b78ae94b953adccd078feff20b0ef4d54fa7a281/cashews-0.13.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cb9b4d5ff55c7c82443f672e047a3dd", "sha256": "b7a071d8903f634a6b6bce46cbf89fbe4c09861554f90649713e49d1720cb7c2"}, "downloads": -1, "filename": "cashews-0.13.0.tar.gz", "has_sig": false, "md5_digest": "7cb9b4d5ff55c7c82443f672e047a3dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27401, "upload_time": "2020-04-07T22:20:20", "upload_time_iso_8601": "2020-04-07T22:20:20.086783Z", "url": "https://files.pythonhosted.org/packages/e4/a8/eda835fac79cd3c5ad232344c42bcda7c8a35af85a4550f151aa281a6c08/cashews-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "be89b3d2742020077ccd4b002509054d", "sha256": "4e0d725d7d214b0e9731bf64f100c85666ef94521a5759311ba8b3bb2c8d5e31"}, "downloads": -1, "filename": "cashews-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "be89b3d2742020077ccd4b002509054d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33793, "upload_time": "2020-04-08T19:43:23", "upload_time_iso_8601": "2020-04-08T19:43:23.929538Z", "url": "https://files.pythonhosted.org/packages/e8/4f/88e455ba4211de20241535c829f45a6e1e35e14034e21be894bbe47c9070/cashews-0.14.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2169c69e88adf29aef54a793e742b695", "sha256": "8f7c78e9b4d82b33bab602ab88a1930c87d28f805eb4a804d27ecf16b058761f"}, "downloads": -1, "filename": "cashews-0.14.0.tar.gz", "has_sig": false, "md5_digest": "2169c69e88adf29aef54a793e742b695", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27643, "upload_time": "2020-04-08T19:43:25", "upload_time_iso_8601": "2020-04-08T19:43:25.620969Z", "url": "https://files.pythonhosted.org/packages/06/2a/19bb134117c647e95ce8e283a8a5bad56def0caf4e91c11dcc6a75810f35/cashews-0.14.0.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "1d761c1a982147d52953515701ea6201", "sha256": "eaf0e6c16ab405c16de31f6c0084bb77810e2f3e945ddad67325b7de7af028be"}, "downloads": -1, "filename": "cashews-0.14.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1d761c1a982147d52953515701ea6201", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35186, "upload_time": "2020-04-11T13:56:25", "upload_time_iso_8601": "2020-04-11T13:56:25.697723Z", "url": "https://files.pythonhosted.org/packages/03/26/aade07367632782f1e4fa3af32487204c03b78bc7797fca6110b8fcb0cb8/cashews-0.14.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01bc65590658eb74e816f5aa6208088b", "sha256": "f5519450bd0f74e278eb7b63053295b2af81e37a530df274fd18d8ee6f2bf13f"}, "downloads": -1, "filename": "cashews-0.14.1.tar.gz", "has_sig": false, "md5_digest": "01bc65590658eb74e816f5aa6208088b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28306, "upload_time": "2020-04-11T13:56:27", "upload_time_iso_8601": "2020-04-11T13:56:27.623031Z", "url": "https://files.pythonhosted.org/packages/c6/07/937b70eb4b1c770a93d73c12ea93d879bc7b364c549bb4df12775cdeeb14/cashews-0.14.1.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "a9257b00ddfff33f079ed5e40c13a97b", "sha256": "6741c9a09ddc4bd1ca344fc8ae00d80f45d5adbd8e683e096d58fbb829890d6d"}, "downloads": -1, "filename": "cashews-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a9257b00ddfff33f079ed5e40c13a97b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38156, "upload_time": "2020-04-21T14:50:44", "upload_time_iso_8601": "2020-04-21T14:50:44.263090Z", "url": "https://files.pythonhosted.org/packages/68/6d/12ac231a62b7e7d7daa2b66bed3eae3757b1778431c58b19619b151148c1/cashews-0.15.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48269de277b9947a7272f4911906ac51", "sha256": "6b2cbe8fa4886547f5af6eff89e003ffd387776db3b07308837539b91dc6fa65"}, "downloads": -1, "filename": "cashews-0.15.0.tar.gz", "has_sig": false, "md5_digest": "48269de277b9947a7272f4911906ac51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30420, "upload_time": "2020-04-21T14:50:46", "upload_time_iso_8601": "2020-04-21T14:50:46.705037Z", "url": "https://files.pythonhosted.org/packages/f0/20/216cde82fac299cc3387fb477a894c1b2dba30bae3c9a52970ff9cc4842d/cashews-0.15.0.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "90455fc62b987c112d30517cc1ac341a", "sha256": "30787b4528bfd5baf5373aa2b409b0d4b3f5d8539224a3d4b5efd04cf2123f2f"}, "downloads": -1, "filename": "cashews-0.15.1-py3-none-any.whl", "has_sig": false, "md5_digest": "90455fc62b987c112d30517cc1ac341a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38411, "upload_time": "2020-04-22T08:38:55", "upload_time_iso_8601": "2020-04-22T08:38:55.564170Z", "url": "https://files.pythonhosted.org/packages/1c/b4/ce34009510778aa0dd6e19678d03ab373c346f2955e6c7991ce0ba7c1ca4/cashews-0.15.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d19b1884a99fc3e719fa4eb7466868f", "sha256": "65f3387445c36b42f9bac6527b1950922da10dc4d779cbc3b5f2b19ff63aacbb"}, "downloads": -1, "filename": "cashews-0.15.1.tar.gz", "has_sig": false, "md5_digest": "4d19b1884a99fc3e719fa4eb7466868f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30733, "upload_time": "2020-04-22T08:38:57", "upload_time_iso_8601": "2020-04-22T08:38:57.211243Z", "url": "https://files.pythonhosted.org/packages/1f/16/7e966ccf63a23c09a8fc4b3227716224ee5e7f4eb66109d8213230611273/cashews-0.15.1.tar.gz", "yanked": false}], "0.15.2": [{"comment_text": "", "digests": {"md5": "68b1d11136d450b81e10d74e22e67882", "sha256": "0dd9f1b0f3d8e9cc5daf4e6e96ee12756bc6617997223e28b06f08f278dfd350"}, "downloads": -1, "filename": "cashews-0.15.2-py3-none-any.whl", "has_sig": false, "md5_digest": "68b1d11136d450b81e10d74e22e67882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 38531, "upload_time": "2020-04-23T07:57:58", "upload_time_iso_8601": "2020-04-23T07:57:58.779381Z", "url": "https://files.pythonhosted.org/packages/ff/40/e610b601d3d5a41911967ce09a8f22f630646342dbe4f02dd0dc724e6c12/cashews-0.15.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44cc2148ae8892871510e667ca88a994", "sha256": "9d6407ca0e783682d7bf515da1b9a46522e5372a6e846a146269d4f7a10478b7"}, "downloads": -1, "filename": "cashews-0.15.2.tar.gz", "has_sig": false, "md5_digest": "44cc2148ae8892871510e667ca88a994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30855, "upload_time": "2020-04-23T07:58:00", "upload_time_iso_8601": "2020-04-23T07:58:00.677464Z", "url": "https://files.pythonhosted.org/packages/44/dd/a24543af6ef003e287ce648aa05c25782794fb3d2379035712e6b1f6fe3a/cashews-0.15.2.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "f362b59ba6d9f97bbfc29e16fda88d1b", "sha256": "67f3c78166d15deb66da13ebe997c3b2837b4e0ab4030e040bf1a8742d0cc3ed"}, "downloads": -1, "filename": "cashews-0.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f362b59ba6d9f97bbfc29e16fda88d1b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40536, "upload_time": "2020-04-25T16:50:38", "upload_time_iso_8601": "2020-04-25T16:50:38.919006Z", "url": "https://files.pythonhosted.org/packages/9c/1e/a1472229000fcb70e52a7bce634edf20c92823ae2d10ae1d56cfcdba8ef2/cashews-0.16.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4aa3b460e3429c172ee93a3921800c1", "sha256": "114ec59430985d7299de4dca9b061afa1e5a535ab2229f741e44598d1da527ed"}, "downloads": -1, "filename": "cashews-0.16.0.tar.gz", "has_sig": false, "md5_digest": "f4aa3b460e3429c172ee93a3921800c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31359, "upload_time": "2020-04-25T16:50:40", "upload_time_iso_8601": "2020-04-25T16:50:40.659291Z", "url": "https://files.pythonhosted.org/packages/9a/98/c0d29e8ceab2d0ab0ac99de95f7a05c23fbe7f82e083edde0bae45ae8c76/cashews-0.16.0.tar.gz", "yanked": false}], "0.16.1": [{"comment_text": "", "digests": {"md5": "281ebf93fd696b41f524a21adde69d6b", "sha256": "d24bc855b23ebfa4618710574a6b86edb4a7dd143e9341cd78eb52b80e701563"}, "downloads": -1, "filename": "cashews-0.16.1-py3-none-any.whl", "has_sig": false, "md5_digest": "281ebf93fd696b41f524a21adde69d6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40544, "upload_time": "2020-04-30T11:38:23", "upload_time_iso_8601": "2020-04-30T11:38:23.061064Z", "url": "https://files.pythonhosted.org/packages/01/ac/56a246a2cd54b90930156322fd7fb0442e3ad61e124ccdbc8cd7bae66372/cashews-0.16.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82a185c9b39299ecd25bcc95a3afa514", "sha256": "703d355e45a1be3ebe7468ee6b0026a9d25e8da3826719d949943115ee33a156"}, "downloads": -1, "filename": "cashews-0.16.1.tar.gz", "has_sig": false, "md5_digest": "82a185c9b39299ecd25bcc95a3afa514", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31377, "upload_time": "2020-04-30T11:38:25", "upload_time_iso_8601": "2020-04-30T11:38:25.694166Z", "url": "https://files.pythonhosted.org/packages/13/40/b6c57815d387159611d8f2674496bcb75704a38841c4ca1a2d3c3f04e59c/cashews-0.16.1.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "5cb6908c02bcb51be3626ae9fe8d8875", "sha256": "5a6889a2697ade841da60321d373ed3071cc0d28b21f94fab303bbd8bef06d82"}, "downloads": -1, "filename": "cashews-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5cb6908c02bcb51be3626ae9fe8d8875", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41182, "upload_time": "2020-05-04T14:42:04", "upload_time_iso_8601": "2020-05-04T14:42:04.883750Z", "url": "https://files.pythonhosted.org/packages/ad/11/b03123fe035fac8fcb9d16ee111385d7e2555b5e12fda0d0e250d0d52a8d/cashews-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3d8a59cd17d87b36d5ac2971f0c7c11", "sha256": "d388be32e489fbf0792ce5cd6f1e4f7fcb2841a3f92562ea34404b07f554ee2a"}, "downloads": -1, "filename": "cashews-0.17.0.tar.gz", "has_sig": false, "md5_digest": "e3d8a59cd17d87b36d5ac2971f0c7c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32127, "upload_time": "2020-05-04T14:42:06", "upload_time_iso_8601": "2020-05-04T14:42:06.708374Z", "url": "https://files.pythonhosted.org/packages/74/f7/828bd307e5b69692dc484e4a2e4084dc20c6133dd05e8aede4e2ffd298c9/cashews-0.17.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d8691e0f558378b5b81b7c59a2f6ec09", "sha256": "04ae14ce7e8dfacc4b65cbec040a2001ba8cb5ab07f2ddee30413dd9a869cea6"}, "downloads": -1, "filename": "cashews-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d8691e0f558378b5b81b7c59a2f6ec09", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23963, "upload_time": "2020-01-02T20:38:04", "upload_time_iso_8601": "2020-01-02T20:38:04.106011Z", "url": "https://files.pythonhosted.org/packages/dd/9b/2e93ef35cb331a5722d4c989164efa4d2a01c18389c54c2df0c0fd58b540/cashews-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79d9990a414ef62e2bed72c6be8c9a8e", "sha256": "f96914c2dfa03668b38ec791ca63b22bd7bab3e43442f9fe4c5d397ee9671ab3"}, "downloads": -1, "filename": "cashews-0.2.0.tar.gz", "has_sig": false, "md5_digest": "79d9990a414ef62e2bed72c6be8c9a8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17663, "upload_time": "2020-01-02T20:38:05", "upload_time_iso_8601": "2020-01-02T20:38:05.998764Z", "url": "https://files.pythonhosted.org/packages/75/fb/41b0beab8d3c649a8f4370ccf7c98eed7c25021edd9440d65df95a4bea8c/cashews-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "97c8670c4bbd5b7442ef2dc94899894d", "sha256": "ba6b81e7f79171ab297258a618350b90ab056b7f891e8916378d6cef63ccd435"}, "downloads": -1, "filename": "cashews-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "97c8670c4bbd5b7442ef2dc94899894d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23914, "upload_time": "2020-01-02T21:13:24", "upload_time_iso_8601": "2020-01-02T21:13:24.694684Z", "url": "https://files.pythonhosted.org/packages/3c/00/d21ebfd20f15294a38b08752c2dc7ebf1a9dc84b5d03267caba3fdc226a5/cashews-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "692d30bf68bd7e59a6bee754665370d3", "sha256": "40571abda71ab6c42e177020090e361a21f54c79f897d14ef30680275ed5fb06"}, "downloads": -1, "filename": "cashews-0.2.1.tar.gz", "has_sig": false, "md5_digest": "692d30bf68bd7e59a6bee754665370d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17684, "upload_time": "2020-01-02T21:13:26", "upload_time_iso_8601": "2020-01-02T21:13:26.291947Z", "url": "https://files.pythonhosted.org/packages/94/80/74fe9e3a2f7624f3d6a0f8b5a974c97beaca123050b1c3aa2034ecb0603e/cashews-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "66111b41625a544b69c72453e98ecd9c", "sha256": "f5de6459a03e985daf78aaa156ba7ca8892ab2c0166477d1a76323d605bae05d"}, "downloads": -1, "filename": "cashews-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "66111b41625a544b69c72453e98ecd9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26476, "upload_time": "2020-01-06T21:45:52", "upload_time_iso_8601": "2020-01-06T21:45:52.025730Z", "url": "https://files.pythonhosted.org/packages/b7/99/7b8d108867388c7f6f7becbd2dc1e63ad4f3e820d2d286b2f7a2125f667f/cashews-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a48ef4406efdfb2aa54c5da1f1f5783d", "sha256": "aeb5dc8707284dbc6d3608e7fcc561d46a42cb9d7aa1da5ec596a4bb017158c2"}, "downloads": -1, "filename": "cashews-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a48ef4406efdfb2aa54c5da1f1f5783d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20867, "upload_time": "2020-01-06T21:45:55", "upload_time_iso_8601": "2020-01-06T21:45:55.226321Z", "url": "https://files.pythonhosted.org/packages/fc/45/2dc238f92d4dc76dd78b8d5874e0aa5251e18213bb948261c62832f8c21d/cashews-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "df3c47244bd424e0fc81b71e50211de3", "sha256": "2b31209e1645405381cdffd368d5dc844994d8722c8931a1896f4016f586fa7e"}, "downloads": -1, "filename": "cashews-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "df3c47244bd424e0fc81b71e50211de3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27232, "upload_time": "2020-01-09T16:48:34", "upload_time_iso_8601": "2020-01-09T16:48:34.849535Z", "url": "https://files.pythonhosted.org/packages/9c/04/6783f792c9dab006c8285ea5efbe034709e34fa70198eb4ce6b1b76e23e4/cashews-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef36cfd66cad8de8b3fe0dfc86660aa3", "sha256": "2518520686edc5b9b5bff81a7f413afa86a003515fc1226c18874ecc389730a3"}, "downloads": -1, "filename": "cashews-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ef36cfd66cad8de8b3fe0dfc86660aa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21300, "upload_time": "2020-01-09T16:48:36", "upload_time_iso_8601": "2020-01-09T16:48:36.441520Z", "url": "https://files.pythonhosted.org/packages/fc/f8/24edc99c8478865d343e364f272f84ae013e702c7b2852f86e14f06ee779/cashews-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c38e20a581939c71d9efdacd35289b26", "sha256": "809056d78119a5e25766752edf203bd39ac5253de04c9bae1a6adc17652e4848"}, "downloads": -1, "filename": "cashews-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c38e20a581939c71d9efdacd35289b26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28379, "upload_time": "2020-03-11T23:40:33", "upload_time_iso_8601": "2020-03-11T23:40:33.149611Z", "url": "https://files.pythonhosted.org/packages/89/fc/7290fa3af7aca1add607cd041ce5ce82b4ec61920ce61ee4762f828af85a/cashews-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e003dd87090c1dcbcf486d98cedf841", "sha256": "c6a9da187d3bdfd8554fffd57a948ad32b6f91d85a77ec319de47ad9ae7f5529"}, "downloads": -1, "filename": "cashews-0.5.0.tar.gz", "has_sig": false, "md5_digest": "5e003dd87090c1dcbcf486d98cedf841", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22450, "upload_time": "2020-03-11T23:40:34", "upload_time_iso_8601": "2020-03-11T23:40:34.600830Z", "url": "https://files.pythonhosted.org/packages/56/15/217d575ad460d957cf2cc7bdfce2ea5c68d6b1bee67470242ddb44d62e02/cashews-0.5.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "225d88f18963139367d5770c670989da", "sha256": "791cbd2544f4f01f9f03ce1151fac0f36fdac7aabd2107b4cd137c6cb3344752"}, "downloads": -1, "filename": "cashews-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "225d88f18963139367d5770c670989da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28134, "upload_time": "2020-03-25T21:29:48", "upload_time_iso_8601": "2020-03-25T21:29:48.319916Z", "url": "https://files.pythonhosted.org/packages/65/7e/f3b474a0dcc39458d6a687b10f8e41965ac7b139c4035c6114413c99cdd2/cashews-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d55165e82c23da7ebdce36d3680a9046", "sha256": "0f7a953ce498e779abba32e66ea13f64e93bacd0b2cf9ccab213ad42bc0a661c"}, "downloads": -1, "filename": "cashews-0.7.0.tar.gz", "has_sig": false, "md5_digest": "d55165e82c23da7ebdce36d3680a9046", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22408, "upload_time": "2020-03-25T21:29:49", "upload_time_iso_8601": "2020-03-25T21:29:49.876524Z", "url": "https://files.pythonhosted.org/packages/5a/7a/658ef32f9554438785185f8dfcf24754a071a9a8219df4ca685882617a29/cashews-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "6f9d975bbe20c91361fb732dbcbc015d", "sha256": "ea85d4d92798f1f139e97570ac7e300d6d81bc50f566cc107da21cda5d2ae636"}, "downloads": -1, "filename": "cashews-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f9d975bbe20c91361fb732dbcbc015d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29974, "upload_time": "2020-03-28T13:50:49", "upload_time_iso_8601": "2020-03-28T13:50:49.193321Z", "url": "https://files.pythonhosted.org/packages/d8/43/e3f836d7fdc1cf56d9af57af83047c604c763d1c6aafcb3b743dfedc8300/cashews-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6424889523444516882d87cde512573", "sha256": "9b0d8f14b2f854124c98f68e89f2262e68853fd8a3a96599eebebcabf1bcb357"}, "downloads": -1, "filename": "cashews-0.8.0.tar.gz", "has_sig": false, "md5_digest": "a6424889523444516882d87cde512573", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23948, "upload_time": "2020-03-28T13:50:50", "upload_time_iso_8601": "2020-03-28T13:50:50.544639Z", "url": "https://files.pythonhosted.org/packages/2c/27/2bcf3e88cb36b86d8ec6e2a2afb278cd0009541a9e7651033bb1501e3d32/cashews-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "70123a7d9f48f98a51f36ffe27b39860", "sha256": "871ec34f7308f81bc098203313523c2c2fbc749cb60d4c72aa0ffdec2114575e"}, "downloads": -1, "filename": "cashews-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "70123a7d9f48f98a51f36ffe27b39860", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31396, "upload_time": "2020-03-31T14:38:33", "upload_time_iso_8601": "2020-03-31T14:38:33.202892Z", "url": "https://files.pythonhosted.org/packages/ab/91/7821420576cc71caf96f6cb474c4249d511b4c8e85c78460b9d4a00720be/cashews-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1492b07cbde736ebe957d547125e410", "sha256": "ed50fd3b70b0ee16e32b4429a74a10e3fbd60f636c4ea10c6f959787d1430602"}, "downloads": -1, "filename": "cashews-0.9.0.tar.gz", "has_sig": false, "md5_digest": "b1492b07cbde736ebe957d547125e410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25006, "upload_time": "2020-03-31T14:38:34", "upload_time_iso_8601": "2020-03-31T14:38:34.879627Z", "url": "https://files.pythonhosted.org/packages/cf/0b/60ebd6cd6fc238a6871ed57eb91fc1ac6ee16b8a385f29e208999a151d6f/cashews-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5cb6908c02bcb51be3626ae9fe8d8875", "sha256": "5a6889a2697ade841da60321d373ed3071cc0d28b21f94fab303bbd8bef06d82"}, "downloads": -1, "filename": "cashews-0.17.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5cb6908c02bcb51be3626ae9fe8d8875", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41182, "upload_time": "2020-05-04T14:42:04", "upload_time_iso_8601": "2020-05-04T14:42:04.883750Z", "url": "https://files.pythonhosted.org/packages/ad/11/b03123fe035fac8fcb9d16ee111385d7e2555b5e12fda0d0e250d0d52a8d/cashews-0.17.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3d8a59cd17d87b36d5ac2971f0c7c11", "sha256": "d388be32e489fbf0792ce5cd6f1e4f7fcb2841a3f92562ea34404b07f554ee2a"}, "downloads": -1, "filename": "cashews-0.17.0.tar.gz", "has_sig": false, "md5_digest": "e3d8a59cd17d87b36d5ac2971f0c7c11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32127, "upload_time": "2020-05-04T14:42:06", "upload_time_iso_8601": "2020-05-04T14:42:06.708374Z", "url": "https://files.pythonhosted.org/packages/74/f7/828bd307e5b69692dc484e4a2e4084dc20c6133dd05e8aede4e2ffd298c9/cashews-0.17.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:20 2020"}