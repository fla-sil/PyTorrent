{"info": {"author": "Joshua Tauberer", "author_email": "jt@occams.info", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "email\\_validator\n================\n\nA robust email address syntax and deliverability validation library for\nPython 2.7/3.4+ by [Joshua Tauberer](https://razor.occams.info).\n\nThis library validates that a string is of the form `x@y.com`. This is\nthe sort of validation you would want for an email-based login form on \na website.\n\nKey features:\n\n* Good for validating email addresses used for logins/identity.\n* Friendly error messages when validation fails (appropriate to show\n  to end users).\n* (optionally) Checks deliverability: Does the domain name resolve?\n* Supports internationalized domain names and (optionally)\n  internationalized local parts.\n* Normalizes email addresses (super important for internationalized\n  addresses! see below).\n\nThe library is NOT for validation of the To: line in an email message\n(e.g. `My Name <my@address.com>`), which\n[flanker](https://github.com/mailgun/flanker) is more appropriate for.\nAnd this library does NOT permit obsolete forms of email addresses, so\nif you need strict validation against the email specs exactly, use\n[pyIsEmail](https://github.com/michaelherold/pyIsEmail).\n\nThis library was first published in 2015. The current version is 1.1.0\n(posted April 30, 2020). **In this version, the type of the value returned\nfrom `validate_email` has changed, but dict-style access to the validated\naddress information still works, so it is backwards compatible.**\n\nInstallation\n------------\n\nThis package is on PyPI, so:\n\n```sh\npip install email_validator\n```\n\n`pip3` also works.\n\nUsage\n-----\n\nIf you're validating a user's email address before creating a user\naccount, you might do this:\n\n```python\nfrom email_validator import validate_email, EmailNotValidError\n\nemail = \"my+address@mydomain.tld\"\n\ntry:\n  # Validate.\n  valid = validate_email(email)\n\n  # Update with the normalized form.\n  email = valid.email\nexcept EmailNotValidError as e:\n  # email is not valid, exception message is human-readable\n  print(str(e))\n```\n\nThis validates the address and gives you its normalized form. You should\nput the normalized form in your database and always normalize before\nchecking if an address is in your database.\n\nThe validator will accept internationalized email addresses, but email\naddresses with non-ASCII characters in the *local* part of the address\n(before the @-sign) require the\n[SMTPUTF8](https://tools.ietf.org/html/rfc6531) extension which may not\nbe supported by your mail submission library or your outbound mail\nserver. If you know ahead of time that SMTPUTF8 is not supported then\n**add the keyword argument allow\\_smtputf8=False to fail validation for\naddresses that would require SMTPUTF8**:\n\n```python\nvalid = validate_email(email, allow_smtputf8=False)\n```\n\nOverview\n--------\n\nThe module provides a single function `validate_email(email_address)` which\ntakes an email address (either a `str` or ASCII `bytes`) and:\n\n- Raises a `EmailNotValidError` with a helpful, human-readable error\n  message explaining why the email address is not valid, or\n- Returns an object with a normalized form of the email address and\n  other information about it.\n\nWhen an email address is not valid, `validate_email` raises either an\n`EmailSyntaxError` if the form of the address is invalid or an\n`EmailUndeliverableError` if the domain name does not resolve. Both\nexception classes are subclasses of `EmailNotValidError`, which in turn\nis a subclass of `ValueError`.\n\nBut when an email address is valid, an object is returned containing\na normalized form of the email address (which you should use!) and\nother information.\n\nThe validator doesn't permit obsoleted forms of email addresses that no\none uses anymore even though they are still valid and deliverable, since\nthey will probably give you grief if you're using email for login. (See\nlater in the document about that.)\n\nThe validator checks that the domain name in the email address resolves.\nThere is nothing to be gained by trying to actually contact an SMTP\nserver, so that's not done here. For privacy, security, and practicality\nreasons servers are good at not giving away whether an address is\ndeliverable or not: email addresses that appear to accept mail at first\ncan bounce mail after a delay, and bounced mail may indicate a temporary\nfailure of a good email address (sometimes an intentional failure, like\ngreylisting).\n\nThe function also accepts the following keyword arguments (default as\nshown):\n\n`allow_smtputf8=True`: Set to `False` to prohibit internationalized addresses that would\n    require the\n    [SMTPUTF8](https://tools.ietf.org/html/rfc6531) extension.\n\n`check_deliverability=True`: Set to `False` to skip the domain name resolution check.\n\n`allow_empty_local=False`: Set to `True` to allow an empty local part (i.e.\n    `@example.com`), e.g. for validating Postfix aliases.\n\nInternationalized email addresses\n---------------------------------\n\nThe email protocol SMTP and the domain name system DNS have historically\nonly allowed ASCII characters in email addresses and domain names,\nrespectively. Each has adapted to internationalization in a separate\nway, creating two separate aspects to email address\ninternationalization.\n\n### Internationalized domain names (IDN)\n\nThe first is [internationalized domain names (RFC\n5891)](https://tools.ietf.org/html/rfc5891), a.k.a IDNA 2008. The DNS\nsystem has not been updated with Unicode support. Instead,\ninternationalized domain names are converted into a special IDNA ASCII\nform starting with `xn--`. When an email address has non-ASCII\ncharacters in its domain part, the domain part is replaced with its IDNA\nASCII equivalent form in the process of mail transmission. Your mail\nsubmission library probably does this for you transparently. Note that\nmost web browsers are currently in transition between IDNA 2003 (RFC\n3490) and IDNA 2008 (RFC 5891) and [compliance around the web is not\nvery\ngood](http://archives.miloush.net/michkap/archive/2012/02/27/10273315.html)\nin any case, so be aware that edge cases are handled differently by\ndifferent applications and libraries. This library conforms to IDNA 2008\nusing the [idna](https://github.com/kjd/idna) module by Kim Davies.\n\n### Internationalized local parts\n\nThe second sort of internationalization is internationalization in the\n*local* part of the address (before the @-sign). These email addresses\nrequire that your mail submission library and the mail servers along the\nroute to the destination, including your own outbound mail server, all\nsupport the [SMTPUTF8 (RFC 6531)](https://tools.ietf.org/html/rfc6531)\nextension. Support for SMTPUTF8 varies.\n\n### If you know ahead of time that SMTPUTF8 is not supported by your mail submission stack\n\nBy default all internationalized forms are accepted by the validator.\nBut if you know ahead of time that SMTPUTF8 is not supported by your\nmail submission stack, then you must filter out addresses that require\nSMTPUTF8 using the `allow_smtputf8=False` keyword argument (see above).\nThis will cause the validation function to raise a `EmailSyntaxError` if\ndelivery would require SMTPUTF8. That's just in those cases where\nnon-ASCII characters appear before the @-sign. If you do not set\n`allow_smtputf8=False`, you can also check the value of the `smtputf8`\nfield in the returned object.\n\nIf your mail submission library doesn't support Unicode at all --- even\nin the domain part of the address --- then immediately prior to mail\nsubmission you must replace the email address with its ASCII-ized form.\nThis library gives you back the ASCII-ized form in the `ascii_email`\nfield in the returned object, which you can get like this:\n\n```python\nvalid = validate_email(email, allow_smtputf8=False)\nemail = valid.ascii_email\n```\n\nThe local part is left alone (if it has internationalized characters\n`allow_smtputf8=False` will force validation to fail) and the domain\npart is converted to [IDNA ASCII](https://tools.ietf.org/html/rfc5891).\n(You probably should not do this at account creation time so you don't\nchange the user's login information without telling them.)\n\n### UCS-4 support required for Python 2.7\n\nNote that when using Python 2.7, it is required that it was built with\nUCS-4 support (see\n[here](https://stackoverflow.com/questions/29109944/python-returns-length-of-2-for-single-unicode-character-string));\notherwise emails with unicode characters outside of the BMP (Basic\nMultilingual Plane) will not validate correctly.\n\nNormalization\n-------------\n\nThe use of Unicode in email addresses introduced a normalization\nproblem. Different Unicode strings can look identical and have the same\nsemantic meaning to the user. The `email` field returned on successful\nvalidation provides the correctly normalized form of the given email\naddress:\n\n```python\nvalid = validate_email(\"me@\uff24\uff4f\uff4d\uff41\uff49\uff4e.com\")\nemail = valid.ascii_email\nprint(email)\n# prints: me@domain.com\n```\n\nBecause an end-user might type their email address in different (but\nequivalent) un-normalized forms at different times, you ought to\nreplace what they enter with the normalized form immediately prior to\ngoing into your database (during account creation), querying your database\n(during login), or sending outbound mail. Normalization may also change\nthe length of an email address, and this may affect whether it is valid\nand acceptable by your SMTP provider.\n\nThe normalizations include lowercasing the domain part of the email\naddress (domain names are case-insensitive), [Unicode \"NFC\"\nnormalization](https://en.wikipedia.org/wiki/Unicode_equivalence) of the\nwhole address (which turns characters plus [combining\ncharacters](https://en.wikipedia.org/wiki/Combining_character) into\nprecomposed characters where possible and replaces certain Unicode\ncharacters (such as angstrom and ohm) with other equivalent code points\n(a-with-ring and omega, respectively)), replacement of [fullwidth and\nhalfwidth\ncharacters](https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms)\nin the domain part, and possibly other\n[UTS46](http://unicode.org/reports/tr46) mappings on the domain part.\n\n(See [RFC 6532 (internationalized email) section\n3.1](https://tools.ietf.org/html/rfc6532#section-3.1) and [RFC 5895\n(IDNA 2008) section 2](http://www.ietf.org/rfc/rfc5895.txt).)\n\nExamples\n--------\n\nFor the email address `test@joshdata.me`, the returned object is:\n\n```python\nValidatedEmail(\n  email='test@joshdata.me',\n  local_part='test',\n  domain='joshdata.me',\n  ascii_email='test@joshdata.me',\n  ascii_local_part='test',\n  ascii_domain='joshdata.me',\n  smtputf8=False,\n  mx=[(10, 'box.occams.info')],\n  mx_fallback_type=None)\n```\n\nFor the fictitious address `example@\u30c4.life`, which has an\ninternationalized domain but ASCII local part, the returned object is:\n\n```python\nValidatedEmail(\n  email='example@\u30c4.life',\n  local_part='example',\n  domain='\u30c4.life',\n  ascii_email='example@xn--bdk.life',\n  ascii_local_part='example',\n  ascii_domain='xn--bdk.life',\n  smtputf8=False)\n\n```\n\nNote that `smtputf8` is `False` even though the domain part is\ninternationalized because\n[SMTPUTF8](https://tools.ietf.org/html/rfc6531) is only needed if the\nlocal part of the address is internationalized (the domain part can be\nconverted to IDNA ASCII). Also note that the `email` and `domain`\nfields provide a normalized form of the email address and domain name\n(casefolding and Unicode normalization as required by IDNA 2008).\n\nFor the fictitious address `\u30c4-test@joshdata.me`, which has an\ninternationalized local part, the returned object is:\n\n```python\nValidatedEmail(\n  email='\u30c4-test@joshdata.me',\n  local_part='\u30c4-test',\n  domain='joshdata.me',\n  ascii_email=None,\n  ascii_local_part=None,\n  ascii_domain='joshdata.me',\n  smtputf8=True)\n```\n\nNow `smtputf8` is `True` and `ascii_email` is `None` because the local\npart of the address is internationalized. The `local_part` and `email` fields\nreturn the normalized form of the address: certain Unicode characters\n(such as angstrom and ohm) may be replaced by other equivalent code\npoints (a-with-ring and omega).\n\nReturn value\n------------\n\nWhen an email address passes validation, the fields in the returned object\nare:\n\n`email`: The canonical form of the email address, mostly useful for\n    display purposes. This merely combines the `local_part` and `domain`\n    fields (see below).\n\n`ascii_email`: If set, an ASCII-only form of the email address by replacing the\n    domain part with [IDNA ASCII](https://tools.ietf.org/html/rfc5891).\n    This field will be present when an ASCII-only form of the email\n    address exists (including if the email address is already ASCII). If\n    the local part of the email address contains internationalized\n    characters, `ascii_email` will be `None`. If set, it merely combines\n    `ascii_local_part` and `ascii_domain`.\n\n`local_part`: The local part of the given email address (before the @-sign) with\n    Unicode NFC normalization applied.\n\n`ascii_local_part`: If set, the local part, which is composed of ASCII characters only.\n\n`domain`: The canonical internationalized form of the domain part of the\n    address, by round-tripping through IDNA ASCII. If the returned\n    string contains non-ASCII characters, either the\n    [SMTPUTF8](https://tools.ietf.org/html/rfc6531) feature of your\n    mail relay will be required to transmit the message or else the\n    email address's domain part must be converted to IDNA ASCII first\n    (given in the returned `domain` field).\n\n`ascii_domain`: The [IDNA ASCII](https://tools.ietf.org/html/rfc5891)-encoded form\n    of the domain part of the given email address (after the @-sign), as\n    it would be transmitted on the wire.\n\n`smtputf8`: A boolean indicating that the\n    [SMTPUTF8](https://tools.ietf.org/html/rfc6531) feature of your\n    mail relay will be required to transmit messages to this address\n    because the local part of the address has non-ASCII characters (the\n    local part cannot be IDNA-encoded). If `allow_smtputf8=False` is\n    passed as an argument, this flag will always be false because an\n    exception is raised if it would have been true.\n\n`mx`: A list of (priority, domain) tuples of MX records specified in the\n    DNS for the domain (see [RFC 5321 section\n    5](https://tools.ietf.org/html/rfc5321#section-5)).\n\n`mx_fallback_type`: `None` if an `MX` record is found. If no MX records are actually\n    specified in DNS and instead are inferred, through an obsolete\n    mechanism, from A or AAAA records, the value is the type of DNS\n    record used instead (`A` or `AAAA`).\n\nAssumptions\n-----------\n\nBy design, this validator does not pass all email addresses that\nstrictly conform to the standards. Many email address forms are obsolete\nor likely to cause trouble:\n\n* The validator assumes the email address is intended to be\n  deliverable on the public Internet using DNS, and so the domain part\n  of the email address must be a resolvable domain name.\n* The \"quoted string\" form of the local part of the email address (RFC\n  5321 4.1.2) is not permitted --- no one uses this anymore anyway.\n  Quoted forms allow multiple @-signs, space characters, and other\n  troublesome conditions.\n* The \"literal\" form for the domain part of an email address (an\n  IP address) is not accepted --- no one uses this anymore anyway.\n\nTesting\n-------\n\nTests can be run using\n\n```sh\npip install -r test_requirements.txt \nmake test\n```\n\nFor Project Maintainers\n-----------------------\n\nThe package is distributed as a universal wheel. The wheel is specified\nas universal in the file `setup.cfg` by the `universal = 1` key in the\n`[bdist_wheel]` section.\n\nTo release:\n\n* Update the version number.\n* Follow the steps below to publish source and a universal wheel to pypi:\n\n```sh\npip3 install twine\nrm -rf dist\npython3 setup.py sdist\npython3 setup.py bdist_wheel\ntwine upload dist/*\ngit tag v1.0.XXX # replace with version in setup.py\ngit push --tags\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JoshData/python-email-validator", "keywords": "email address validator", "license": "CC0 (copyright waived)", "maintainer": "", "maintainer_email": "", "name": "email-validator", "package_url": "https://pypi.org/project/email-validator/", "platform": "", "project_url": "https://pypi.org/project/email-validator/", "project_urls": {"Homepage": "https://github.com/JoshData/python-email-validator"}, "release_url": "https://pypi.org/project/email-validator/1.1.0/", "requires_dist": ["dnspython (>=1.15.0)", "idna (>=2.0.0)"], "requires_python": "", "summary": "A robust email syntax and deliverability validation library for Python 2.x/3.x.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>email_validator</h1>\n<p>A robust email address syntax and deliverability validation library for\nPython 2.7/3.4+ by <a href=\"https://razor.occams.info\" rel=\"nofollow\">Joshua Tauberer</a>.</p>\n<p>This library validates that a string is of the form <code>x@y.com</code>. This is\nthe sort of validation you would want for an email-based login form on\na website.</p>\n<p>Key features:</p>\n<ul>\n<li>Good for validating email addresses used for logins/identity.</li>\n<li>Friendly error messages when validation fails (appropriate to show\nto end users).</li>\n<li>(optionally) Checks deliverability: Does the domain name resolve?</li>\n<li>Supports internationalized domain names and (optionally)\ninternationalized local parts.</li>\n<li>Normalizes email addresses (super important for internationalized\naddresses! see below).</li>\n</ul>\n<p>The library is NOT for validation of the To: line in an email message\n(e.g. <code>My Name &lt;my@address.com&gt;</code>), which\n<a href=\"https://github.com/mailgun/flanker\" rel=\"nofollow\">flanker</a> is more appropriate for.\nAnd this library does NOT permit obsolete forms of email addresses, so\nif you need strict validation against the email specs exactly, use\n<a href=\"https://github.com/michaelherold/pyIsEmail\" rel=\"nofollow\">pyIsEmail</a>.</p>\n<p>This library was first published in 2015. The current version is 1.1.0\n(posted April 30, 2020). <strong>In this version, the type of the value returned\nfrom <code>validate_email</code> has changed, but dict-style access to the validated\naddress information still works, so it is backwards compatible.</strong></p>\n<h2>Installation</h2>\n<p>This package is on PyPI, so:</p>\n<pre>pip install email_validator\n</pre>\n<p><code>pip3</code> also works.</p>\n<h2>Usage</h2>\n<p>If you're validating a user's email address before creating a user\naccount, you might do this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">email_validator</span> <span class=\"kn\">import</span> <span class=\"n\">validate_email</span><span class=\"p\">,</span> <span class=\"n\">EmailNotValidError</span>\n\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"s2\">\"my+address@mydomain.tld\"</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Validate.</span>\n  <span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">validate_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Update with the normalized form.</span>\n  <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">email</span>\n<span class=\"k\">except</span> <span class=\"n\">EmailNotValidError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n  <span class=\"c1\"># email is not valid, exception message is human-readable</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n<p>This validates the address and gives you its normalized form. You should\nput the normalized form in your database and always normalize before\nchecking if an address is in your database.</p>\n<p>The validator will accept internationalized email addresses, but email\naddresses with non-ASCII characters in the <em>local</em> part of the address\n(before the @-sign) require the\n<a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8</a> extension which may not\nbe supported by your mail submission library or your outbound mail\nserver. If you know ahead of time that SMTPUTF8 is not supported then\n<strong>add the keyword argument allow_smtputf8=False to fail validation for\naddresses that would require SMTPUTF8</strong>:</p>\n<pre><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">validate_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">allow_smtputf8</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Overview</h2>\n<p>The module provides a single function <code>validate_email(email_address)</code> which\ntakes an email address (either a <code>str</code> or ASCII <code>bytes</code>) and:</p>\n<ul>\n<li>Raises a <code>EmailNotValidError</code> with a helpful, human-readable error\nmessage explaining why the email address is not valid, or</li>\n<li>Returns an object with a normalized form of the email address and\nother information about it.</li>\n</ul>\n<p>When an email address is not valid, <code>validate_email</code> raises either an\n<code>EmailSyntaxError</code> if the form of the address is invalid or an\n<code>EmailUndeliverableError</code> if the domain name does not resolve. Both\nexception classes are subclasses of <code>EmailNotValidError</code>, which in turn\nis a subclass of <code>ValueError</code>.</p>\n<p>But when an email address is valid, an object is returned containing\na normalized form of the email address (which you should use!) and\nother information.</p>\n<p>The validator doesn't permit obsoleted forms of email addresses that no\none uses anymore even though they are still valid and deliverable, since\nthey will probably give you grief if you're using email for login. (See\nlater in the document about that.)</p>\n<p>The validator checks that the domain name in the email address resolves.\nThere is nothing to be gained by trying to actually contact an SMTP\nserver, so that's not done here. For privacy, security, and practicality\nreasons servers are good at not giving away whether an address is\ndeliverable or not: email addresses that appear to accept mail at first\ncan bounce mail after a delay, and bounced mail may indicate a temporary\nfailure of a good email address (sometimes an intentional failure, like\ngreylisting).</p>\n<p>The function also accepts the following keyword arguments (default as\nshown):</p>\n<p><code>allow_smtputf8=True</code>: Set to <code>False</code> to prohibit internationalized addresses that would\nrequire the\n<a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8</a> extension.</p>\n<p><code>check_deliverability=True</code>: Set to <code>False</code> to skip the domain name resolution check.</p>\n<p><code>allow_empty_local=False</code>: Set to <code>True</code> to allow an empty local part (i.e.\n<code>@example.com</code>), e.g. for validating Postfix aliases.</p>\n<h2>Internationalized email addresses</h2>\n<p>The email protocol SMTP and the domain name system DNS have historically\nonly allowed ASCII characters in email addresses and domain names,\nrespectively. Each has adapted to internationalization in a separate\nway, creating two separate aspects to email address\ninternationalization.</p>\n<h3>Internationalized domain names (IDN)</h3>\n<p>The first is <a href=\"https://tools.ietf.org/html/rfc5891\" rel=\"nofollow\">internationalized domain names (RFC\n5891)</a>, a.k.a IDNA 2008. The DNS\nsystem has not been updated with Unicode support. Instead,\ninternationalized domain names are converted into a special IDNA ASCII\nform starting with <code>xn--</code>. When an email address has non-ASCII\ncharacters in its domain part, the domain part is replaced with its IDNA\nASCII equivalent form in the process of mail transmission. Your mail\nsubmission library probably does this for you transparently. Note that\nmost web browsers are currently in transition between IDNA 2003 (RFC\n3490) and IDNA 2008 (RFC 5891) and <a href=\"http://archives.miloush.net/michkap/archive/2012/02/27/10273315.html\" rel=\"nofollow\">compliance around the web is not\nvery\ngood</a>\nin any case, so be aware that edge cases are handled differently by\ndifferent applications and libraries. This library conforms to IDNA 2008\nusing the <a href=\"https://github.com/kjd/idna\" rel=\"nofollow\">idna</a> module by Kim Davies.</p>\n<h3>Internationalized local parts</h3>\n<p>The second sort of internationalization is internationalization in the\n<em>local</em> part of the address (before the @-sign). These email addresses\nrequire that your mail submission library and the mail servers along the\nroute to the destination, including your own outbound mail server, all\nsupport the <a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8 (RFC 6531)</a>\nextension. Support for SMTPUTF8 varies.</p>\n<h3>If you know ahead of time that SMTPUTF8 is not supported by your mail submission stack</h3>\n<p>By default all internationalized forms are accepted by the validator.\nBut if you know ahead of time that SMTPUTF8 is not supported by your\nmail submission stack, then you must filter out addresses that require\nSMTPUTF8 using the <code>allow_smtputf8=False</code> keyword argument (see above).\nThis will cause the validation function to raise a <code>EmailSyntaxError</code> if\ndelivery would require SMTPUTF8. That's just in those cases where\nnon-ASCII characters appear before the @-sign. If you do not set\n<code>allow_smtputf8=False</code>, you can also check the value of the <code>smtputf8</code>\nfield in the returned object.</p>\n<p>If your mail submission library doesn't support Unicode at all --- even\nin the domain part of the address --- then immediately prior to mail\nsubmission you must replace the email address with its ASCII-ized form.\nThis library gives you back the ASCII-ized form in the <code>ascii_email</code>\nfield in the returned object, which you can get like this:</p>\n<pre><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">validate_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">allow_smtputf8</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">ascii_email</span>\n</pre>\n<p>The local part is left alone (if it has internationalized characters\n<code>allow_smtputf8=False</code> will force validation to fail) and the domain\npart is converted to <a href=\"https://tools.ietf.org/html/rfc5891\" rel=\"nofollow\">IDNA ASCII</a>.\n(You probably should not do this at account creation time so you don't\nchange the user's login information without telling them.)</p>\n<h3>UCS-4 support required for Python 2.7</h3>\n<p>Note that when using Python 2.7, it is required that it was built with\nUCS-4 support (see\n<a href=\"https://stackoverflow.com/questions/29109944/python-returns-length-of-2-for-single-unicode-character-string\" rel=\"nofollow\">here</a>);\notherwise emails with unicode characters outside of the BMP (Basic\nMultilingual Plane) will not validate correctly.</p>\n<h2>Normalization</h2>\n<p>The use of Unicode in email addresses introduced a normalization\nproblem. Different Unicode strings can look identical and have the same\nsemantic meaning to the user. The <code>email</code> field returned on successful\nvalidation provides the correctly normalized form of the given email\naddress:</p>\n<pre><span class=\"n\">valid</span> <span class=\"o\">=</span> <span class=\"n\">validate_email</span><span class=\"p\">(</span><span class=\"s2\">\"me@\uff24\uff4f\uff4d\uff41\uff49\uff4e.com\"</span><span class=\"p\">)</span>\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">valid</span><span class=\"o\">.</span><span class=\"n\">ascii_email</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints: me@domain.com</span>\n</pre>\n<p>Because an end-user might type their email address in different (but\nequivalent) un-normalized forms at different times, you ought to\nreplace what they enter with the normalized form immediately prior to\ngoing into your database (during account creation), querying your database\n(during login), or sending outbound mail. Normalization may also change\nthe length of an email address, and this may affect whether it is valid\nand acceptable by your SMTP provider.</p>\n<p>The normalizations include lowercasing the domain part of the email\naddress (domain names are case-insensitive), <a href=\"https://en.wikipedia.org/wiki/Unicode_equivalence\" rel=\"nofollow\">Unicode \"NFC\"\nnormalization</a> of the\nwhole address (which turns characters plus <a href=\"https://en.wikipedia.org/wiki/Combining_character\" rel=\"nofollow\">combining\ncharacters</a> into\nprecomposed characters where possible and replaces certain Unicode\ncharacters (such as angstrom and ohm) with other equivalent code points\n(a-with-ring and omega, respectively)), replacement of <a href=\"https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms\" rel=\"nofollow\">fullwidth and\nhalfwidth\ncharacters</a>\nin the domain part, and possibly other\n<a href=\"http://unicode.org/reports/tr46\" rel=\"nofollow\">UTS46</a> mappings on the domain part.</p>\n<p>(See <a href=\"https://tools.ietf.org/html/rfc6532#section-3.1\" rel=\"nofollow\">RFC 6532 (internationalized email) section\n3.1</a> and <a href=\"http://www.ietf.org/rfc/rfc5895.txt\" rel=\"nofollow\">RFC 5895\n(IDNA 2008) section 2</a>.)</p>\n<h2>Examples</h2>\n<p>For the email address <code>test@joshdata.me</code>, the returned object is:</p>\n<pre><span class=\"n\">ValidatedEmail</span><span class=\"p\">(</span>\n  <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'test@joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">local_part</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n  <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_email</span><span class=\"o\">=</span><span class=\"s1\">'test@joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_local_part</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_domain</span><span class=\"o\">=</span><span class=\"s1\">'joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">smtputf8</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n  <span class=\"n\">mx</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'box.occams.info'</span><span class=\"p\">)],</span>\n  <span class=\"n\">mx_fallback_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>For the fictitious address <code>example@\u30c4.life</code>, which has an\ninternationalized domain but ASCII local part, the returned object is:</p>\n<pre><span class=\"n\">ValidatedEmail</span><span class=\"p\">(</span>\n  <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'example@\u30c4.life'</span><span class=\"p\">,</span>\n  <span class=\"n\">local_part</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n  <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'\u30c4.life'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_email</span><span class=\"o\">=</span><span class=\"s1\">'example@xn--bdk.life'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_local_part</span><span class=\"o\">=</span><span class=\"s1\">'example'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_domain</span><span class=\"o\">=</span><span class=\"s1\">'xn--bdk.life'</span><span class=\"p\">,</span>\n  <span class=\"n\">smtputf8</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Note that <code>smtputf8</code> is <code>False</code> even though the domain part is\ninternationalized because\n<a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8</a> is only needed if the\nlocal part of the address is internationalized (the domain part can be\nconverted to IDNA ASCII). Also note that the <code>email</code> and <code>domain</code>\nfields provide a normalized form of the email address and domain name\n(casefolding and Unicode normalization as required by IDNA 2008).</p>\n<p>For the fictitious address <code>\u30c4-test@joshdata.me</code>, which has an\ninternationalized local part, the returned object is:</p>\n<pre><span class=\"n\">ValidatedEmail</span><span class=\"p\">(</span>\n  <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'\u30c4-test@joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">local_part</span><span class=\"o\">=</span><span class=\"s1\">'\u30c4-test'</span><span class=\"p\">,</span>\n  <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"s1\">'joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_email</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_local_part</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"n\">ascii_domain</span><span class=\"o\">=</span><span class=\"s1\">'joshdata.me'</span><span class=\"p\">,</span>\n  <span class=\"n\">smtputf8</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Now <code>smtputf8</code> is <code>True</code> and <code>ascii_email</code> is <code>None</code> because the local\npart of the address is internationalized. The <code>local_part</code> and <code>email</code> fields\nreturn the normalized form of the address: certain Unicode characters\n(such as angstrom and ohm) may be replaced by other equivalent code\npoints (a-with-ring and omega).</p>\n<h2>Return value</h2>\n<p>When an email address passes validation, the fields in the returned object\nare:</p>\n<p><code>email</code>: The canonical form of the email address, mostly useful for\ndisplay purposes. This merely combines the <code>local_part</code> and <code>domain</code>\nfields (see below).</p>\n<p><code>ascii_email</code>: If set, an ASCII-only form of the email address by replacing the\ndomain part with <a href=\"https://tools.ietf.org/html/rfc5891\" rel=\"nofollow\">IDNA ASCII</a>.\nThis field will be present when an ASCII-only form of the email\naddress exists (including if the email address is already ASCII). If\nthe local part of the email address contains internationalized\ncharacters, <code>ascii_email</code> will be <code>None</code>. If set, it merely combines\n<code>ascii_local_part</code> and <code>ascii_domain</code>.</p>\n<p><code>local_part</code>: The local part of the given email address (before the @-sign) with\nUnicode NFC normalization applied.</p>\n<p><code>ascii_local_part</code>: If set, the local part, which is composed of ASCII characters only.</p>\n<p><code>domain</code>: The canonical internationalized form of the domain part of the\naddress, by round-tripping through IDNA ASCII. If the returned\nstring contains non-ASCII characters, either the\n<a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8</a> feature of your\nmail relay will be required to transmit the message or else the\nemail address's domain part must be converted to IDNA ASCII first\n(given in the returned <code>domain</code> field).</p>\n<p><code>ascii_domain</code>: The <a href=\"https://tools.ietf.org/html/rfc5891\" rel=\"nofollow\">IDNA ASCII</a>-encoded form\nof the domain part of the given email address (after the @-sign), as\nit would be transmitted on the wire.</p>\n<p><code>smtputf8</code>: A boolean indicating that the\n<a href=\"https://tools.ietf.org/html/rfc6531\" rel=\"nofollow\">SMTPUTF8</a> feature of your\nmail relay will be required to transmit messages to this address\nbecause the local part of the address has non-ASCII characters (the\nlocal part cannot be IDNA-encoded). If <code>allow_smtputf8=False</code> is\npassed as an argument, this flag will always be false because an\nexception is raised if it would have been true.</p>\n<p><code>mx</code>: A list of (priority, domain) tuples of MX records specified in the\nDNS for the domain (see <a href=\"https://tools.ietf.org/html/rfc5321#section-5\" rel=\"nofollow\">RFC 5321 section\n5</a>).</p>\n<p><code>mx_fallback_type</code>: <code>None</code> if an <code>MX</code> record is found. If no MX records are actually\nspecified in DNS and instead are inferred, through an obsolete\nmechanism, from A or AAAA records, the value is the type of DNS\nrecord used instead (<code>A</code> or <code>AAAA</code>).</p>\n<h2>Assumptions</h2>\n<p>By design, this validator does not pass all email addresses that\nstrictly conform to the standards. Many email address forms are obsolete\nor likely to cause trouble:</p>\n<ul>\n<li>The validator assumes the email address is intended to be\ndeliverable on the public Internet using DNS, and so the domain part\nof the email address must be a resolvable domain name.</li>\n<li>The \"quoted string\" form of the local part of the email address (RFC\n5321 4.1.2) is not permitted --- no one uses this anymore anyway.\nQuoted forms allow multiple @-signs, space characters, and other\ntroublesome conditions.</li>\n<li>The \"literal\" form for the domain part of an email address (an\nIP address) is not accepted --- no one uses this anymore anyway.</li>\n</ul>\n<h2>Testing</h2>\n<p>Tests can be run using</p>\n<pre>pip install -r test_requirements.txt \nmake <span class=\"nb\">test</span>\n</pre>\n<h2>For Project Maintainers</h2>\n<p>The package is distributed as a universal wheel. The wheel is specified\nas universal in the file <code>setup.cfg</code> by the <code>universal = 1</code> key in the\n<code>[bdist_wheel]</code> section.</p>\n<p>To release:</p>\n<ul>\n<li>Update the version number.</li>\n<li>Follow the steps below to publish source and a universal wheel to pypi:</li>\n</ul>\n<pre>pip3 install twine\nrm -rf dist\npython3 setup.py sdist\npython3 setup.py bdist_wheel\ntwine upload dist/*\ngit tag v1.0.XXX <span class=\"c1\"># replace with version in setup.py</span>\ngit push --tags\n</pre>\n\n          </div>"}, "last_serial": 7138763, "releases": {"0.1.0-rc1": [{"comment_text": "", "digests": {"md5": "d0bbcac57846e825b2f12d26aa87aa4d", "sha256": "d0cc2a53b2fcf421b01a641af5faa61ff7eab270004ada4051a139f87746de89"}, "downloads": -1, "filename": "email_validator-0.1.0-rc1.tar.gz", "has_sig": false, "md5_digest": "d0bbcac57846e825b2f12d26aa87aa4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12348, "upload_time": "2015-04-21T14:28:44", "upload_time_iso_8601": "2015-04-21T14:28:44.637302Z", "url": "https://files.pythonhosted.org/packages/06/7a/e596ad26286d78b43e905204d61ec981a59f8e00424efd08369e4ee0aaef/email_validator-0.1.0-rc1.tar.gz", "yanked": false}], "0.1.0rc3": [{"comment_text": "", "digests": {"md5": "b2d63074e1f56fe2a5df88e04c6a9f7c", "sha256": "ee55ca7652a81771aa0b60ae68396688ef2b722dbe017d8615ed8cb3d64ab490"}, "downloads": -1, "filename": "email_validator-0.1.0rc3.tar.gz", "has_sig": false, "md5_digest": "b2d63074e1f56fe2a5df88e04c6a9f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15593, "upload_time": "2015-04-29T21:12:27", "upload_time_iso_8601": "2015-04-29T21:12:27.137724Z", "url": "https://files.pythonhosted.org/packages/ad/ff/74307d5f37f9099a7e30e97d4dfcef86ed6a0ee73068a81b644045c11f6b/email_validator-0.1.0rc3.tar.gz", "yanked": false}], "0.1.0rc4": [{"comment_text": "", "digests": {"md5": "4964974b91c18d0c81d3a46bf0dd5bf1", "sha256": "dfa20d96b32b5d5390b0b0f8b011706b1b210564d1eeca535a632148c6cb30d7"}, "downloads": -1, "filename": "email_validator-0.1.0rc4.tar.gz", "has_sig": false, "md5_digest": "4964974b91c18d0c81d3a46bf0dd5bf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15595, "upload_time": "2015-04-29T21:17:25", "upload_time_iso_8601": "2015-04-29T21:17:25.637171Z", "url": "https://files.pythonhosted.org/packages/c8/c7/f64de455411f9653b0787fbf4ffab04a528e692b6943720d5ba6ca7c8ba6/email_validator-0.1.0rc4.tar.gz", "yanked": false}], "0.1.0rc5": [{"comment_text": "", "digests": {"md5": "152266ab34458e264d06ffcbc807f85b", "sha256": "8dc7f201f25803003709b5d7d1353f562a1547b227c36c35e9bb24c8ce28dfc1"}, "downloads": -1, "filename": "email_validator-0.1.0rc5.tar.gz", "has_sig": false, "md5_digest": "152266ab34458e264d06ffcbc807f85b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15052, "upload_time": "2015-05-19T12:33:15", "upload_time_iso_8601": "2015-05-19T12:33:15.792742Z", "url": "https://files.pythonhosted.org/packages/6d/a2/ba954cbd381e350698accfba7c7f756bfe469f8948bcee368e640a2f21ef/email_validator-0.1.0rc5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ed7991d2260fc40386cce46dad102811", "sha256": "f44a45b7ed078b205e5738065125594fd7adcabd88d0bcd0a5155ae6ab14d7fd"}, "downloads": -1, "filename": "email_validator-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ed7991d2260fc40386cce46dad102811", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15041, "upload_time": "2015-06-15T15:22:17", "upload_time_iso_8601": "2015-06-15T15:22:17.055690Z", "url": "https://files.pythonhosted.org/packages/5e/05/8fd01ef8517f34c67ed07499c044a51806fe8908c5d78016b074ab2ac17c/email_validator-0.5.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4fdb93f848c513ea2ea636f03bf5d7f3", "sha256": "fd4eb8f8fd0c84339f4d88799fe1e718ff917d3a7a8570f5c613295bbbfe2501"}, "downloads": -1, "filename": "email_validator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4fdb93f848c513ea2ea636f03bf5d7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18272, "upload_time": "2015-09-05T12:22:15", "upload_time_iso_8601": "2015-09-05T12:22:15.714689Z", "url": "https://files.pythonhosted.org/packages/9a/2b/a482187dd223481313f8309cbf9d0316d2ef379489cf7de85867bc79de0a/email_validator-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "73d6d6d7c08f6751cb409a48cda9698d", "sha256": "1c8bf2af1d2b213bab7298145077e2bf82b926c21054a30c47d44504cb93c856"}, "downloads": -1, "filename": "email_validator-1.0.1.tar.gz", "has_sig": false, "md5_digest": "73d6d6d7c08f6751cb409a48cda9698d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18316, "upload_time": "2016-03-06T23:24:51", "upload_time_iso_8601": "2016-03-06T23:24:51.420594Z", "url": "https://files.pythonhosted.org/packages/ce/dd/63fc85ccc6db18cfab302d52015ed349bbd5aab11ebee713da0908744ba7/email_validator-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0a81cf9dc6e6e3d40860626563ce0379", "sha256": "feec98c601524619e67b377f52ce331920f026d1b2e05bf5d6d0031ec844b600"}, "downloads": -1, "filename": "email_validator-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0a81cf9dc6e6e3d40860626563ce0379", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17787, "upload_time": "2017-09-12T11:46:36", "upload_time_iso_8601": "2017-09-12T11:46:36.571963Z", "url": "https://files.pythonhosted.org/packages/7c/19/1715c8e1e21ee82f6a7ceedee666e43dac628929546fb642853c4ce60fb9/email_validator-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fbe652ab41aaa4f937f90bdbbedfa52", "sha256": "669eaae98d86dbd0ab62ab2f5fbc95d01cb28f8e038aa30ab165b244130949c9"}, "downloads": -1, "filename": "email_validator-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3fbe652ab41aaa4f937f90bdbbedfa52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18607, "upload_time": "2016-12-30T22:31:46", "upload_time_iso_8601": "2016-12-30T22:31:46.363169Z", "url": "https://files.pythonhosted.org/packages/72/d9/08afd9a35e25828659f905c6b254ddf8e786174695f0e769e30b5c69d4dc/email_validator-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "f76ce9c4fb77e650462fd8dfab8b3d91", "sha256": "ddc4b5b59fa699bb10127adcf7ad4de78fde4ec539a072b104b8bb16da666ae5"}, "downloads": -1, "filename": "email_validator-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f76ce9c4fb77e650462fd8dfab8b3d91", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17962, "upload_time": "2017-09-12T11:47:25", "upload_time_iso_8601": "2017-09-12T11:47:25.160852Z", "url": "https://files.pythonhosted.org/packages/d9/0f/7e3815143e30959fd38d02f622c77912a465c153d854317b248d29d6d7bf/email_validator-1.0.3-py2.py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "66d799674e046e3d69672cdd5169f3d2", "sha256": "79966e318d6d68fed359c90f8f19d242bcc178b724011f1c07145bd093da6cc7"}, "downloads": -1, "filename": "email_validator-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "66d799674e046e3d69672cdd5169f3d2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14910, "upload_time": "2019-05-02T19:44:01", "upload_time_iso_8601": "2019-05-02T19:44:01.258076Z", "url": "https://files.pythonhosted.org/packages/09/31/f1a496192ea2e87ec4db40dfc2f000de3fbce565e10e95f09a614127e09f/email_validator-1.0.4-py2.py3-none-any.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "a37be88e669f27508763aff5f61ebe12", "sha256": "e3e6ede1765d7c1e580d2050d834b2689361f7da2d50ce74df6a5968fca7cb13"}, "downloads": -1, "filename": "email_validator-1.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a37be88e669f27508763aff5f61ebe12", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14953, "upload_time": "2019-10-18T18:28:40", "upload_time_iso_8601": "2019-10-18T18:28:40.742138Z", "url": "https://files.pythonhosted.org/packages/8a/67/9f2e15c3052ac54773b99bedcc9cb3c0654ab1065652bb2c0145bea6335d/email_validator-1.0.5-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c75ab9d0c1a826019b05c1456f1e0288", "sha256": "de2aad89b13574a73fd26c04a5200389b293bd9578602fc3b51537ada47af153"}, "downloads": -1, "filename": "email_validator-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c75ab9d0c1a826019b05c1456f1e0288", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17226, "upload_time": "2020-04-30T16:51:16", "upload_time_iso_8601": "2020-04-30T16:51:16.249828Z", "url": "https://files.pythonhosted.org/packages/45/54/1a1da475b684aa4eb30da169ea5ebd9341a5d3138138bc2b365222b9ac87/email_validator-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12c3adab5371fbc300650193f1c11efc", "sha256": "2d515ed56eca41a2c91bbe1e0b1054d604a2502417487b553d3d26962945eda2"}, "downloads": -1, "filename": "email_validator-1.1.0.tar.gz", "has_sig": false, "md5_digest": "12c3adab5371fbc300650193f1c11efc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23239, "upload_time": "2020-04-30T16:51:17", "upload_time_iso_8601": "2020-04-30T16:51:17.324438Z", "url": "https://files.pythonhosted.org/packages/59/6c/83147751ce4a22e085814b4dbf675934e4382801fd418ef40f4703f68866/email_validator-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c75ab9d0c1a826019b05c1456f1e0288", "sha256": "de2aad89b13574a73fd26c04a5200389b293bd9578602fc3b51537ada47af153"}, "downloads": -1, "filename": "email_validator-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c75ab9d0c1a826019b05c1456f1e0288", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17226, "upload_time": "2020-04-30T16:51:16", "upload_time_iso_8601": "2020-04-30T16:51:16.249828Z", "url": "https://files.pythonhosted.org/packages/45/54/1a1da475b684aa4eb30da169ea5ebd9341a5d3138138bc2b365222b9ac87/email_validator-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "12c3adab5371fbc300650193f1c11efc", "sha256": "2d515ed56eca41a2c91bbe1e0b1054d604a2502417487b553d3d26962945eda2"}, "downloads": -1, "filename": "email_validator-1.1.0.tar.gz", "has_sig": false, "md5_digest": "12c3adab5371fbc300650193f1c11efc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23239, "upload_time": "2020-04-30T16:51:17", "upload_time_iso_8601": "2020-04-30T16:51:17.324438Z", "url": "https://files.pythonhosted.org/packages/59/6c/83147751ce4a22e085814b4dbf675934e4382801fd418ef40f4703f68866/email_validator-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:42 2020"}