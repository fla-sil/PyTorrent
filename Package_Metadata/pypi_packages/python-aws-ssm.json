{"info": {"author": "Luca Valentini", "author_email": "luca@paddle.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "[![Build Status](https://travis-ci.com/PaddleHQ/python-aws-ssm.svg?branch=master)](https://travis-ci.com/PaddleHQ/python-aws-ssm)\n[![codecov](https://codecov.io/gh/PaddleHQ/python-aws-ssm/branch/master/graph/badge.svg)](https://codecov.io/gh/PaddleHQ/python-aws-ssm)\n[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![codestyle](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n# python-aws-ssm\nPython package that interfaces with [AWS System Manager](https://www.amazonaws.cn/en/systems-manager/).\n\n## Why to use python-aws-ssm and not the boto3 SSM client?\nThis package is wrapping boto3 SSM client and hides the complexity dealing with the not so Python friendly AWS SDK.\nPerfect use case for this package is when secure parameters for an application are stored to\n[AWS Parameter Store](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html)\nusing a path hierarchy. During application startup you can use this package to fetch them and use them in your application.\n\n## Warning\n\nThe SSM service is rate-limited by default. We strongly suggest using\nretrieving SSM keys by path, e.g. via `ParameterStore.get_parameters_by_path()`.\nThis requires grouping keys by a useful path but reduces the chance of\nyour own services being rate-limited in turn.\n\n## Install\n```bash\npip install python-aws-ssm\n```\n\n## Examples\n\n#### Basic Usage\n\n```python\nfrom python_aws_ssm.parameters import ParameterStore\n\n# Assuming you have the parameters in the following format:\n# my-service/dev/param-1  -> with value `a`\n# my-service/dev/param-2  -> with value `b`\nparameter_store = ParameterStore()\n# Requesting the base path\nparameters = parameter_store.get_parameters_by_path(\"/my-service/dev/\")\n# And getting a specific value\nvalue = parameters.get(\"param-1\")\n# value should be `a`\n```\n\n#### Required parameters on path\n\nRequesting parameters by path is efficient but comes with an additional\nburden of validation: clients typically expect a number of keys to be\npresent, e.g. the path `/service/foo/db/` might be used to retrieve the\ndatabase credentials including the host name at `/service/foo/db/hostname`.\nThe onus of verifying that this key is present is by default on the client.\n\nTo assert the presence of these keys automatically, pass a set of required\nparameters via the `parameters` keyword argument:\n\n```python\nfrom python_aws_ssm.parameters import ParameterStore, MissingParameterError\n\n# Assuming you have the following keys:\n#  * /service/foo/db/hostname\n#  * /service/foo/db/username\n#  * /service/foo/db/password\n#  * /service/foo/db/port\n#  * /service/foo/db/description\nparameter_store = ParameterStore()\n# Requesting the base path but asserting presence of required parameters\ntry:\n    parameters = parameter_store.get_parameters_by_path(\n            \"/service/foo/db/\",\n            required_parameters={\"hostname\", \"username\", \"password\", \"port\"}\n        )\nexcept MissingParameterError as e:\n    # Report on the missing parameters.\n    print(e.msg)\nelse:\n    # Use the parameters, knowing that they exist.\n    print(parameters['hostname'])  # guaranteed to exist.\n```\n\n#### Recursive and nested options\n\n```python\nfrom python_aws_ssm.parameters import ParameterStore\n\n# Assuming you have the parameters in the following format:\n# my-service/dev/param-1  -> with value `a`\n# my-service/dev/param-2  -> with value `b`\nparameter_store = ParameterStore()\n# Requesting the base path\nparameters = parameter_store.get_parameters_by_path(\n    \"/my-service/\", recursive=True, nested=True\n)\n# And getting a specific value\ndev_parameters = parameters.get(\"dev\")\n# value should be {\"param-1\": \"a\", \"param-2\": \"b\"}\n```\n\n#### Get parameters by name\n\n```python\nfrom python_aws_ssm.parameters import ParameterStore\n\n# Assuming you have the parameters in the following format:\n# my-service/dev/param-1  -> with value `a`\n# common/dev/param-2  -> with value `b`\nparameter_store = ParameterStore()\n# Requesting the base path\nparameters = parameter_store.get_parameters(\n    [\"/my-service/dev/param-1\", \"/common/dev/param-2\"]\n)\n# And getting a specific value\ndev_parameters = parameters.get(\"/common/dev/param-2\")\n# value should be `b`\n```\n\n#### With custom client\n\n```python\nfrom python_aws_ssm.parameters import ParameterStore\nimport boto3\n\n# Initialise an SSM client to specify the source of the credentials.\n# e.g. locally a profile would be more likely; an AWS Lambda would most\n# likely not override the credentials source.\nssm_client = boto3.Session(profile_name='dev').client('ssm')\nparameter_store = ParameterStore(ssm_client)\n\nparameters = parameter_store.get_parameters([\"/service/path/\"])\n```\n\n## Development\n\nIf you are missing any features or have found a bug, please open a PR or a new Github issue.\n\n\n#### Setup\nThis project uses Poetry to manage the dependencies and the virtual environment.\nFollow the instructions from Poetry website (https://poetry.eustace.io/docs/#installation) to configure your local environment.\n\nAfter completing the Poetry setup, the virtual environment can be created running:\n```shell\nmake setup\n```\n\n#### Tests\nTests are run by Pytest\n```shell\nmake test\n```\n\n#### Code style\n- Mypy is used for type annotations (https://github.com/python/mypy)\n- Black formatter (https://github.com/psf/black) is used to keep the coding style consistent.\n- Isort (https://github.com/timothycrosley/isort) is used to sort the imports.\nTo format the codebase just run:\n```shell\nmake format\n```\nand to check it before pushing:\n```shell\nmake lint\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/PaddleHQ/python-aws-ssm", "keywords": "python,aws,ssm", "license": "Apache-2.0", "maintainer": "Luca Valentini", "maintainer_email": "luca@paddle.com", "name": "python-aws-ssm", "package_url": "https://pypi.org/project/python-aws-ssm/", "platform": "", "project_url": "https://pypi.org/project/python-aws-ssm/", "project_urls": {"Homepage": "https://github.com/PaddleHQ/python-aws-ssm", "Repository": "https://github.com/PaddleHQ/python-aws-ssm"}, "release_url": "https://pypi.org/project/python-aws-ssm/1.0.0/", "requires_dist": ["boto3 (>=1.9,<2.0)"], "requires_python": ">=3.7,<4.0", "summary": "Python package that interfaces with AWS System Manager", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/PaddleHQ/python-aws-ssm\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db94d5df6258dc00d451bf0f3c017b0ce10eb86e/68747470733a2f2f7472617669732d63692e636f6d2f506164646c6548512f707974686f6e2d6177732d73736d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/PaddleHQ/python-aws-ssm\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ff509c55f454f491bbb4bbafd87cc025dd2b178/68747470733a2f2f636f6465636f762e696f2f67682f506164646c6548512f707974686f6e2d6177732d73736d2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"codestyle\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<h1>python-aws-ssm</h1>\n<p>Python package that interfaces with <a href=\"https://www.amazonaws.cn/en/systems-manager/\" rel=\"nofollow\">AWS System Manager</a>.</p>\n<h2>Why to use python-aws-ssm and not the boto3 SSM client?</h2>\n<p>This package is wrapping boto3 SSM client and hides the complexity dealing with the not so Python friendly AWS SDK.\nPerfect use case for this package is when secure parameters for an application are stored to\n<a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html\" rel=\"nofollow\">AWS Parameter Store</a>\nusing a path hierarchy. During application startup you can use this package to fetch them and use them in your application.</p>\n<h2>Warning</h2>\n<p>The SSM service is rate-limited by default. We strongly suggest using\nretrieving SSM keys by path, e.g. via <code>ParameterStore.get_parameters_by_path()</code>.\nThis requires grouping keys by a useful path but reduces the chance of\nyour own services being rate-limited in turn.</p>\n<h2>Install</h2>\n<pre>pip install python-aws-ssm\n</pre>\n<h2>Examples</h2>\n<h4>Basic Usage</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_aws_ssm.parameters</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStore</span>\n\n<span class=\"c1\"># Assuming you have the parameters in the following format:</span>\n<span class=\"c1\"># my-service/dev/param-1  -&gt; with value `a`</span>\n<span class=\"c1\"># my-service/dev/param-2  -&gt; with value `b`</span>\n<span class=\"n\">parameter_store</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStore</span><span class=\"p\">()</span>\n<span class=\"c1\"># Requesting the base path</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameter_store</span><span class=\"o\">.</span><span class=\"n\">get_parameters_by_path</span><span class=\"p\">(</span><span class=\"s2\">\"/my-service/dev/\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># And getting a specific value</span>\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"param-1\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># value should be `a`</span>\n</pre>\n<h4>Required parameters on path</h4>\n<p>Requesting parameters by path is efficient but comes with an additional\nburden of validation: clients typically expect a number of keys to be\npresent, e.g. the path <code>/service/foo/db/</code> might be used to retrieve the\ndatabase credentials including the host name at <code>/service/foo/db/hostname</code>.\nThe onus of verifying that this key is present is by default on the client.</p>\n<p>To assert the presence of these keys automatically, pass a set of required\nparameters via the <code>parameters</code> keyword argument:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_aws_ssm.parameters</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStore</span><span class=\"p\">,</span> <span class=\"n\">MissingParameterError</span>\n\n<span class=\"c1\"># Assuming you have the following keys:</span>\n<span class=\"c1\">#  * /service/foo/db/hostname</span>\n<span class=\"c1\">#  * /service/foo/db/username</span>\n<span class=\"c1\">#  * /service/foo/db/password</span>\n<span class=\"c1\">#  * /service/foo/db/port</span>\n<span class=\"c1\">#  * /service/foo/db/description</span>\n<span class=\"n\">parameter_store</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStore</span><span class=\"p\">()</span>\n<span class=\"c1\"># Requesting the base path but asserting presence of required parameters</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameter_store</span><span class=\"o\">.</span><span class=\"n\">get_parameters_by_path</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"/service/foo/db/\"</span><span class=\"p\">,</span>\n            <span class=\"n\">required_parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"hostname\"</span><span class=\"p\">,</span> <span class=\"s2\">\"username\"</span><span class=\"p\">,</span> <span class=\"s2\">\"password\"</span><span class=\"p\">,</span> <span class=\"s2\">\"port\"</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">MissingParameterError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Report on the missing parameters.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Use the parameters, knowing that they exist.</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">'hostname'</span><span class=\"p\">])</span>  <span class=\"c1\"># guaranteed to exist.</span>\n</pre>\n<h4>Recursive and nested options</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_aws_ssm.parameters</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStore</span>\n\n<span class=\"c1\"># Assuming you have the parameters in the following format:</span>\n<span class=\"c1\"># my-service/dev/param-1  -&gt; with value `a`</span>\n<span class=\"c1\"># my-service/dev/param-2  -&gt; with value `b`</span>\n<span class=\"n\">parameter_store</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStore</span><span class=\"p\">()</span>\n<span class=\"c1\"># Requesting the base path</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameter_store</span><span class=\"o\">.</span><span class=\"n\">get_parameters_by_path</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"/my-service/\"</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">nested</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># And getting a specific value</span>\n<span class=\"n\">dev_parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"dev\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># value should be {\"param-1\": \"a\", \"param-2\": \"b\"}</span>\n</pre>\n<h4>Get parameters by name</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_aws_ssm.parameters</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStore</span>\n\n<span class=\"c1\"># Assuming you have the parameters in the following format:</span>\n<span class=\"c1\"># my-service/dev/param-1  -&gt; with value `a`</span>\n<span class=\"c1\"># common/dev/param-2  -&gt; with value `b`</span>\n<span class=\"n\">parameter_store</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStore</span><span class=\"p\">()</span>\n<span class=\"c1\"># Requesting the base path</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameter_store</span><span class=\"o\">.</span><span class=\"n\">get_parameters</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"/my-service/dev/param-1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/common/dev/param-2\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># And getting a specific value</span>\n<span class=\"n\">dev_parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/common/dev/param-2\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># value should be `b`</span>\n</pre>\n<h4>With custom client</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_aws_ssm.parameters</span> <span class=\"kn\">import</span> <span class=\"n\">ParameterStore</span>\n<span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n\n<span class=\"c1\"># Initialise an SSM client to specify the source of the credentials.</span>\n<span class=\"c1\"># e.g. locally a profile would be more likely; an AWS Lambda would most</span>\n<span class=\"c1\"># likely not override the credentials source.</span>\n<span class=\"n\">ssm_client</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">profile_name</span><span class=\"o\">=</span><span class=\"s1\">'dev'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'ssm'</span><span class=\"p\">)</span>\n<span class=\"n\">parameter_store</span> <span class=\"o\">=</span> <span class=\"n\">ParameterStore</span><span class=\"p\">(</span><span class=\"n\">ssm_client</span><span class=\"p\">)</span>\n\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameter_store</span><span class=\"o\">.</span><span class=\"n\">get_parameters</span><span class=\"p\">([</span><span class=\"s2\">\"/service/path/\"</span><span class=\"p\">])</span>\n</pre>\n<h2>Development</h2>\n<p>If you are missing any features or have found a bug, please open a PR or a new Github issue.</p>\n<h4>Setup</h4>\n<p>This project uses Poetry to manage the dependencies and the virtual environment.\nFollow the instructions from Poetry website (<a href=\"https://poetry.eustace.io/docs/#installation\" rel=\"nofollow\">https://poetry.eustace.io/docs/#installation</a>) to configure your local environment.</p>\n<p>After completing the Poetry setup, the virtual environment can be created running:</p>\n<pre>make setup\n</pre>\n<h4>Tests</h4>\n<p>Tests are run by Pytest</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<h4>Code style</h4>\n<ul>\n<li>Mypy is used for type annotations (<a href=\"https://github.com/python/mypy\" rel=\"nofollow\">https://github.com/python/mypy</a>)</li>\n<li>Black formatter (<a href=\"https://github.com/psf/black\" rel=\"nofollow\">https://github.com/psf/black</a>) is used to keep the coding style consistent.</li>\n<li>Isort (<a href=\"https://github.com/timothycrosley/isort\" rel=\"nofollow\">https://github.com/timothycrosley/isort</a>) is used to sort the imports.\nTo format the codebase just run:</li>\n</ul>\n<pre>make format\n</pre>\n<p>and to check it before pushing:</p>\n<pre>make lint\n</pre>\n\n          </div>"}, "last_serial": 6272343, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1c9e9264024911b1979d0c68f745d803", "sha256": "541259e350fe950ff31f104fcc714da795b7bdce5cad0599f181d2761e8395bb"}, "downloads": -1, "filename": "python_aws_ssm-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c9e9264024911b1979d0c68f745d803", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12471, "upload_time": "2019-08-21T08:56:17", "upload_time_iso_8601": "2019-08-21T08:56:17.516345Z", "url": "https://files.pythonhosted.org/packages/ce/cb/93614764fb1b2642ac52bdf2bddd3c19a86681cba2178190223f69e22e0a/python_aws_ssm-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ea6d72170142d70727d26b2ca1694b0", "sha256": "2c3e1033c755ea5bbfe24bcb8fbc28585eff7865247b4e35c9ae8b26ca3a9d95"}, "downloads": -1, "filename": "python-aws-ssm-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2ea6d72170142d70727d26b2ca1694b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8551, "upload_time": "2019-08-21T08:56:15", "upload_time_iso_8601": "2019-08-21T08:56:15.847989Z", "url": "https://files.pythonhosted.org/packages/63/16/1892e75d6a8370868ba43f87f671da7cfdfc451bec9eefd33ebc56ef20f7/python-aws-ssm-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8a370e1611b20a46a2d626fbed58c177", "sha256": "ef70b24e24ebb54ff8bfd80b1b2e1de13aaa4bea3884baa46ae00296d4df827a"}, "downloads": -1, "filename": "python_aws_ssm-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8a370e1611b20a46a2d626fbed58c177", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12474, "upload_time": "2019-08-27T10:59:31", "upload_time_iso_8601": "2019-08-27T10:59:31.258254Z", "url": "https://files.pythonhosted.org/packages/88/dd/7d8af6e8860fb2a9f95a0b4665ae396e87f6d74bc71c4514961182c7e076/python_aws_ssm-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f69335948dbd7c3408cc818ebc232898", "sha256": "5999bf3b9d30fb45294cedcfa8aa9023b5dd6d75aaf218eadb9efa78a06bb023"}, "downloads": -1, "filename": "python-aws-ssm-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f69335948dbd7c3408cc818ebc232898", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 8542, "upload_time": "2019-08-27T10:59:29", "upload_time_iso_8601": "2019-08-27T10:59:29.472795Z", "url": "https://files.pythonhosted.org/packages/34/3a/32f9843b8fdca3104c93e607d0a5adb5ca0d53fe17f11370b521c4b1abe9/python-aws-ssm-0.1.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "96646568d484eddfbcd47177ba17735f", "sha256": "eecb69412b852d24131d3750936e3d171dce0e70a8d70120b5fed6250e096446"}, "downloads": -1, "filename": "python_aws_ssm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96646568d484eddfbcd47177ba17735f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13478, "upload_time": "2019-12-10T11:50:40", "upload_time_iso_8601": "2019-12-10T11:50:40.566696Z", "url": "https://files.pythonhosted.org/packages/b9/25/555603eae755356ca670898714ba861b7eb900be40a139b68c1029e4bd67/python_aws_ssm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f781c200f489d3378aedd557320d29e8", "sha256": "212641ef7354469b568fec277ee0c8855755dde5ee687f61d7c057a1b9b83c5c"}, "downloads": -1, "filename": "python-aws-ssm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f781c200f489d3378aedd557320d29e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9749, "upload_time": "2019-12-10T11:50:38", "upload_time_iso_8601": "2019-12-10T11:50:38.483545Z", "url": "https://files.pythonhosted.org/packages/9e/3d/24a027516375267a3a7b52ed176f03b90226f7739eede6dd7044e9d0040b/python-aws-ssm-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96646568d484eddfbcd47177ba17735f", "sha256": "eecb69412b852d24131d3750936e3d171dce0e70a8d70120b5fed6250e096446"}, "downloads": -1, "filename": "python_aws_ssm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96646568d484eddfbcd47177ba17735f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 13478, "upload_time": "2019-12-10T11:50:40", "upload_time_iso_8601": "2019-12-10T11:50:40.566696Z", "url": "https://files.pythonhosted.org/packages/b9/25/555603eae755356ca670898714ba861b7eb900be40a139b68c1029e4bd67/python_aws_ssm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f781c200f489d3378aedd557320d29e8", "sha256": "212641ef7354469b568fec277ee0c8855755dde5ee687f61d7c057a1b9b83c5c"}, "downloads": -1, "filename": "python-aws-ssm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f781c200f489d3378aedd557320d29e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9749, "upload_time": "2019-12-10T11:50:38", "upload_time_iso_8601": "2019-12-10T11:50:38.483545Z", "url": "https://files.pythonhosted.org/packages/9e/3d/24a027516375267a3a7b52ed176f03b90226f7739eede6dd7044e9d0040b/python-aws-ssm-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:47 2020"}