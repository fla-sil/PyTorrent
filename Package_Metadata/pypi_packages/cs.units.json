{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Functions for decomposing nonnegative integers according to various unit scales.\n\nPresupplied scales:\n* `BINARY_BYTES_SCALE`: Binary units of (B)ytes, KiB, MiB, GiB etc.\n* `DECIMAL_BYTES_SCALE`: Decimal units of (B)ytes, KB, MB, GB etc.\n* `DECIMAL_SCALE`: Unit suffixes K, M, G etc.\n* `TIME_SCALE`: Units of (s)econds, (m)inutes, (h)ours, (d)ays and (w)eeks.\n\n## Function `combine(components, scale)`\n\nCombine a sequence of value components as from `human()` into an integer.\n\n## Function `geek_bytes(n)`\n\nDecompose a nonnegative integer `n` into counts by unit\nfrom `BINARY_BYTES_SCALE`.\n\n## Function `human(n, scale)`\n\nDecompose a nonnegative integer `n` into counts by unit from `scale`.\n\nParameters:\n* `n`: a nonnegative integer.\n* `scale`: a sequence of `(factor,unit)` where factor is the\n  size factor to the follow scale and `unit` is the designator\n  of the unit.\n\n## Function `human_bytes(n)`\n\nDecompose a nonnegative integer `n` into counts by unit\nfrom `DECIMAL_BYTES_SCALE`.\n\n## Function `human_time(n, scale=None)`\n\nDecompose a nonnegative integer `n` into counts by unit\nfrom `TIME_SCALE`.\n\n## Function `multiparse(s, scales, offset=0)`\n\nParse an integer followed by an optional scale and return computed value.\nReturns the parsed value and the new offset.\n\nParameters:\n* `s`: the string to parse.\n* `scales`: an iterable of scale arrays of (factor, unit_name).\n* `offset`: starting position for parse.\n\n## Function `parse(s, scale, offset=0)`\n\nParse an integer followed by an optional scale and return computed value.\nReturns the parsed value and the new offset.\n\nParameters:\n* `s`: the string to parse.\n* `scale`: a scale array of (factor, unit_name).\n* `offset`: starting position for parse.\n\n## Function `transcribe(n, scale, max_parts=None, skip_zero=False, sep='')`\n\nTranscribe a nonnegative integer `n` against `scale`.\n\nParameters:\n* `n`: a nonnegative integer.\n* `scale`: a sequence of (factor, unit) where factor is the\n  size factor to the follow scale and `unit` is the designator\n  of the unit.\n* `max_parts`: the maximum number of components to transcribe.\n* `skip_zero`: omit components of value 0.\n* `sep`: separator between words, default: `''`.\n\n## Function `transcribe_bytes_geek(n, max_parts=1, **kw)`\n\nTranscribe a nonnegative integer `n` against `BINARY_BYTES_SCALE`.\n\n## Function `transcribe_bytes_human(n, max_parts=1, **kw)`\n\nTranscribe a nonnegative integer `n` against `DECIMAL_BYTES_SCALE`.\n\n## Function `transcribe_time(n, max_parts=3, **kw)`\n\nTranscribe a nonnegative integer `n` against `TIME_SCALE`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python2,python3", "license": "", "maintainer": "", "maintainer_email": "", "name": "cs.units", "package_url": "https://pypi.org/project/cs.units/", "platform": "", "project_url": "https://pypi.org/project/cs.units/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.units/20190220/", "requires_dist": null, "requires_python": "", "summary": "unit suffixes for nonnegative integers; parsing and transcription", "version": "20190220", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Functions for decomposing nonnegative integers according to various unit scales.</p>\n<p>Presupplied scales:</p>\n<ul>\n<li><code>BINARY_BYTES_SCALE</code>: Binary units of (B)ytes, KiB, MiB, GiB etc.</li>\n<li><code>DECIMAL_BYTES_SCALE</code>: Decimal units of (B)ytes, KB, MB, GB etc.</li>\n<li><code>DECIMAL_SCALE</code>: Unit suffixes K, M, G etc.</li>\n<li><code>TIME_SCALE</code>: Units of (s)econds, (m)inutes, (h)ours, (d)ays and (w)eeks.</li>\n</ul>\n<h2>Function <code>combine(components, scale)</code></h2>\n<p>Combine a sequence of value components as from <code>human()</code> into an integer.</p>\n<h2>Function <code>geek_bytes(n)</code></h2>\n<p>Decompose a nonnegative integer <code>n</code> into counts by unit\nfrom <code>BINARY_BYTES_SCALE</code>.</p>\n<h2>Function <code>human(n, scale)</code></h2>\n<p>Decompose a nonnegative integer <code>n</code> into counts by unit from <code>scale</code>.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>n</code>: a nonnegative integer.</li>\n<li><code>scale</code>: a sequence of <code>(factor,unit)</code> where factor is the\nsize factor to the follow scale and <code>unit</code> is the designator\nof the unit.</li>\n</ul>\n<h2>Function <code>human_bytes(n)</code></h2>\n<p>Decompose a nonnegative integer <code>n</code> into counts by unit\nfrom <code>DECIMAL_BYTES_SCALE</code>.</p>\n<h2>Function <code>human_time(n, scale=None)</code></h2>\n<p>Decompose a nonnegative integer <code>n</code> into counts by unit\nfrom <code>TIME_SCALE</code>.</p>\n<h2>Function <code>multiparse(s, scales, offset=0)</code></h2>\n<p>Parse an integer followed by an optional scale and return computed value.\nReturns the parsed value and the new offset.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>s</code>: the string to parse.</li>\n<li><code>scales</code>: an iterable of scale arrays of (factor, unit_name).</li>\n<li><code>offset</code>: starting position for parse.</li>\n</ul>\n<h2>Function <code>parse(s, scale, offset=0)</code></h2>\n<p>Parse an integer followed by an optional scale and return computed value.\nReturns the parsed value and the new offset.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>s</code>: the string to parse.</li>\n<li><code>scale</code>: a scale array of (factor, unit_name).</li>\n<li><code>offset</code>: starting position for parse.</li>\n</ul>\n<h2>Function <code>transcribe(n, scale, max_parts=None, skip_zero=False, sep='')</code></h2>\n<p>Transcribe a nonnegative integer <code>n</code> against <code>scale</code>.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>n</code>: a nonnegative integer.</li>\n<li><code>scale</code>: a sequence of (factor, unit) where factor is the\nsize factor to the follow scale and <code>unit</code> is the designator\nof the unit.</li>\n<li><code>max_parts</code>: the maximum number of components to transcribe.</li>\n<li><code>skip_zero</code>: omit components of value 0.</li>\n<li><code>sep</code>: separator between words, default: <code>''</code>.</li>\n</ul>\n<h2>Function <code>transcribe_bytes_geek(n, max_parts=1, **kw)</code></h2>\n<p>Transcribe a nonnegative integer <code>n</code> against <code>BINARY_BYTES_SCALE</code>.</p>\n<h2>Function <code>transcribe_bytes_human(n, max_parts=1, **kw)</code></h2>\n<p>Transcribe a nonnegative integer <code>n</code> against <code>DECIMAL_BYTES_SCALE</code>.</p>\n<h2>Function <code>transcribe_time(n, max_parts=3, **kw)</code></h2>\n<p>Transcribe a nonnegative integer <code>n</code> against <code>TIME_SCALE</code>.</p>\n\n          </div>"}, "last_serial": 4844590, "releases": {"20181228": [{"comment_text": "", "digests": {"md5": "77887fb59b2bab9b669baca3e0973dfd", "sha256": "4e2c4cf63356e4d2ae6faa65d46afe4ed23564b925afed068aee988d114e3490"}, "downloads": -1, "filename": "cs.units-20181228.tar.gz", "has_sig": false, "md5_digest": "77887fb59b2bab9b669baca3e0973dfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3362, "upload_time": "2018-12-28T04:49:42", "upload_time_iso_8601": "2018-12-28T04:49:42.110989Z", "url": "https://files.pythonhosted.org/packages/81/2a/8ab5be6b4745386144920122901908d9a6404a9561c166460c97475850a3/cs.units-20181228.tar.gz", "yanked": false}], "20190220": [{"comment_text": "", "digests": {"md5": "a96684c67655da4391ab160689b6445c", "sha256": "d2a35267eb0056f7bab72f1e279bab01fc07ed8cad14b68198a8b65aea74ac82"}, "downloads": -1, "filename": "cs.units-20190220.tar.gz", "has_sig": false, "md5_digest": "a96684c67655da4391ab160689b6445c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3413, "upload_time": "2019-02-20T09:28:19", "upload_time_iso_8601": "2019-02-20T09:28:19.018428Z", "url": "https://files.pythonhosted.org/packages/6b/13/7794a385106c4a11745f1a7886a20910648962a482e6d359804903f6f134/cs.units-20190220.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a96684c67655da4391ab160689b6445c", "sha256": "d2a35267eb0056f7bab72f1e279bab01fc07ed8cad14b68198a8b65aea74ac82"}, "downloads": -1, "filename": "cs.units-20190220.tar.gz", "has_sig": false, "md5_digest": "a96684c67655da4391ab160689b6445c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3413, "upload_time": "2019-02-20T09:28:19", "upload_time_iso_8601": "2019-02-20T09:28:19.018428Z", "url": "https://files.pythonhosted.org/packages/6b/13/7794a385106c4a11745f1a7886a20910648962a482e6d359804903f6f134/cs.units-20190220.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:43 2020"}