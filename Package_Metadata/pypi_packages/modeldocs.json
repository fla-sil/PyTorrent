{"info": {"author": "Johan Nestaas", "author_email": "johannestaas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications :: Qt", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python"], "description": "modeldocs\n=========\n\nmodeldocs is a documentation generator for your model subclasses.\n\nBy parsing source code files, this generates documentation for your data models with\na documentation format similar to apidocs (https://github.com/apidoc/apidoc)\n\nInstallation\n------------\n\nFrom pypi::\n\n    $ pip install modeldocs\n\nOr from the project root directory::\n\n    $ python setup.py install\n\nUsage\n-----\n\nFirst, create a configuration file in json, like (optional \"include\")::\n\n    {\n        \"name\": \"My Documentation\",\n        \"version\": \"1.0.0\",\n        \"title\": \"My Documentation Title\",\n        \"description\": \"This documents my data models\",\n        \"include\": [\n            \"mymodule\",\n            \"tests/myfile.py\"\n        ]\n    }\n\nSave it as modeldocs.json in the current directory.\n\nThen simply run it, and it'll search for all modeldocs recursively from the current directory::\n\n    $ modeldocs\n\nOr, specify via the command line where to look and what files::\n\n    $ modeldocs --include mymodule myfile.py\n\nOr pass a path to your custom config, which may specify an \"include\" configuration variable::\n\n    $ modeldocs --config my_model_docs.json\n\nAlso, you can specify a custom output directory (default \"docs\")::\n\n    $ modeldocs --output mydocs\n\nUse --help/-h to view info on the arguments::\n\n    $ modeldocs --help\n\nThe format is pretty simple. It follows a very similar format to apidocs (check github link above), example::\n\n    class Motorcycle(MongoCollection):\n        '''\n        @modelGroup Vehicles\n        @modelTitle Motorcycle\n        @modelDescription This represents a motorcycle and all its data.\n        \n        @modelField {String} name the motorcycle name\n        @modelField {Number} year the year it was made\n        @modelField {Datetime} purchased_at the datetime it was purchased\n        @modelField {String=\"red\",\"green\",\"blue\"} color the color of the motorcycle, with specified possible values.\n        @modelField {String} [owner] the owner of the vehicle (optional due to brackets)\n        @modelField {Number} [wheels=2] the number of wheels (default 2 as specified)\n\n        @modelExample {json} Motorcycle Example\n            {\n                \"name\": \"yamaha v-star 650\",\n                \"year\": 2002,\n                ...\n            }\n        '''\n        pass\n\nThat's all it takes. Just add doc strings like the above to all your classes and it will recursively discover them\nand generate the documentation into the \"docs\" directory.\n\nRelease Notes\n-------------\n\n:0.1.3:\n    Fix issue with labeltype description wrapping multiple lines\n:0.1.2:\n    Add note to readme\n:0.1.1:\n    Better method of parsing, without loading any python modules. Just give it an include directory.\n:0.1.0:\n    Generates docs!\n:0.0.1:\n    Project created", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johannestaas/modeldocs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "modeldocs", "package_url": "https://pypi.org/project/modeldocs/", "platform": "", "project_url": "https://pypi.org/project/modeldocs/", "project_urls": {"Homepage": "https://github.com/johannestaas/modeldocs"}, "release_url": "https://pypi.org/project/modeldocs/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Documentation generator for your model subclasses.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>modeldocs is a documentation generator for your model subclasses.</p>\n<p>By parsing source code files, this generates documentation for your data models with\na documentation format similar to apidocs (<a href=\"https://github.com/apidoc/apidoc\" rel=\"nofollow\">https://github.com/apidoc/apidoc</a>)</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From pypi:</p>\n<pre>$ pip install modeldocs\n</pre>\n<p>Or from the project root directory:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First, create a configuration file in json, like (optional \u201cinclude\u201d):</p>\n<pre>{\n    \"name\": \"My Documentation\",\n    \"version\": \"1.0.0\",\n    \"title\": \"My Documentation Title\",\n    \"description\": \"This documents my data models\",\n    \"include\": [\n        \"mymodule\",\n        \"tests/myfile.py\"\n    ]\n}\n</pre>\n<p>Save it as modeldocs.json in the current directory.</p>\n<p>Then simply run it, and it\u2019ll search for all modeldocs recursively from the current directory:</p>\n<pre>$ modeldocs\n</pre>\n<p>Or, specify via the command line where to look and what files:</p>\n<pre>$ modeldocs --include mymodule myfile.py\n</pre>\n<p>Or pass a path to your custom config, which may specify an \u201cinclude\u201d configuration variable:</p>\n<pre>$ modeldocs --config my_model_docs.json\n</pre>\n<p>Also, you can specify a custom output directory (default \u201cdocs\u201d):</p>\n<pre>$ modeldocs --output mydocs\n</pre>\n<p>Use \u2013help/-h to view info on the arguments:</p>\n<pre>$ modeldocs --help\n</pre>\n<p>The format is pretty simple. It follows a very similar format to apidocs (check github link above), example:</p>\n<pre>class Motorcycle(MongoCollection):\n    '''\n    @modelGroup Vehicles\n    @modelTitle Motorcycle\n    @modelDescription This represents a motorcycle and all its data.\n\n    @modelField {String} name the motorcycle name\n    @modelField {Number} year the year it was made\n    @modelField {Datetime} purchased_at the datetime it was purchased\n    @modelField {String=\"red\",\"green\",\"blue\"} color the color of the motorcycle, with specified possible values.\n    @modelField {String} [owner] the owner of the vehicle (optional due to brackets)\n    @modelField {Number} [wheels=2] the number of wheels (default 2 as specified)\n\n    @modelExample {json} Motorcycle Example\n        {\n            \"name\": \"yamaha v-star 650\",\n            \"year\": 2002,\n            ...\n        }\n    '''\n    pass\n</pre>\n<p>That\u2019s all it takes. Just add doc strings like the above to all your classes and it will recursively discover them\nand generate the documentation into the \u201cdocs\u201d directory.</p>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>0.1.3:</th><td>Fix issue with labeltype description wrapping multiple lines</td>\n</tr>\n<tr><th>0.1.2:</th><td>Add note to readme</td>\n</tr>\n<tr><th>0.1.1:</th><td>Better method of parsing, without loading any python modules. Just give it an include directory.</td>\n</tr>\n<tr><th>0.1.0:</th><td>Generates docs!</td>\n</tr>\n<tr><th>0.0.1:</th><td>Project created</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 4088046, "releases": {"0.0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "b36cab84dd2cef75988644f2742a3d6e", "sha256": "4f5a81c6561fd9b230cf870986c2119f7a704072bd302a18de695e7a5e79c5ba"}, "downloads": -1, "filename": "modeldocs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b36cab84dd2cef75988644f2742a3d6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194482, "upload_time": "2017-06-04T11:50:56", "upload_time_iso_8601": "2017-06-04T11:50:56.281042Z", "url": "https://files.pythonhosted.org/packages/d9/83/e8e9c76425ca05e61b87a410080be46c63b5efc957a034d906a4a5527423/modeldocs-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c351f4e3b0b1a4eb1bc13f709c0832c3", "sha256": "6fc5f57a55163de107a7c82c9c5afce474d45e3b1ad9081e48b5913957aa6262"}, "downloads": -1, "filename": "modeldocs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c351f4e3b0b1a4eb1bc13f709c0832c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194878, "upload_time": "2017-06-05T06:15:15", "upload_time_iso_8601": "2017-06-05T06:15:15.879735Z", "url": "https://files.pythonhosted.org/packages/77/7e/ca12c278dddae8f9f3b9e62f908fd74c382bb2f7d7862cb712e4df4f0fe7/modeldocs-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0bcb10fe3e22571ead1760dc26e7dccd", "sha256": "a3580675ebb5fe079cb3c783c7b84b6c755dc8be93d99e6e5d1a1c4ee5bcffc2"}, "downloads": -1, "filename": "modeldocs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0bcb10fe3e22571ead1760dc26e7dccd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194838, "upload_time": "2017-06-05T06:44:11", "upload_time_iso_8601": "2017-06-05T06:44:11.699885Z", "url": "https://files.pythonhosted.org/packages/35/83/28152344793bed6cc9774f8a507c75b3f2ada84a4def37dbcb451c94c8f4/modeldocs-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fb4a6cae136ce3b7af5fd91d26fae1c6", "sha256": "54fb5c6a8093d5fa441396adf5217f99c6c56a4bf0ff66c8eeb0828cff6dd351"}, "downloads": -1, "filename": "modeldocs-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fb4a6cae136ce3b7af5fd91d26fae1c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194879, "upload_time": "2017-06-07T18:20:38", "upload_time_iso_8601": "2017-06-07T18:20:38.773392Z", "url": "https://files.pythonhosted.org/packages/59/fa/e916333b6ff0ccbef4ce5ff1735d52af75932bf2df8a1b94a9661e8d697b/modeldocs-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "1152bb1d5af137abbb90b376062ecdf3", "sha256": "d3e39a3ab90ec7cee6b439d16818d0b5ecfc100e98e78cd922a407987cf82d57"}, "downloads": -1, "filename": "modeldocs-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1152bb1d5af137abbb90b376062ecdf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194874, "upload_time": "2018-07-21T08:08:59", "upload_time_iso_8601": "2018-07-21T08:08:59.291380Z", "url": "https://files.pythonhosted.org/packages/38/56/620c2009c5181f72cb4382ae5146da5b0139ca0ae1ef29b0edfecbb1e2f5/modeldocs-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1152bb1d5af137abbb90b376062ecdf3", "sha256": "d3e39a3ab90ec7cee6b439d16818d0b5ecfc100e98e78cd922a407987cf82d57"}, "downloads": -1, "filename": "modeldocs-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1152bb1d5af137abbb90b376062ecdf3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194874, "upload_time": "2018-07-21T08:08:59", "upload_time_iso_8601": "2018-07-21T08:08:59.291380Z", "url": "https://files.pythonhosted.org/packages/38/56/620c2009c5181f72cb4382ae5146da5b0139ca0ae1ef29b0edfecbb1e2f5/modeldocs-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:55 2020"}