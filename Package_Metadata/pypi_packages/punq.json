{"info": {"author": "Bob Gregory", "author_email": "bob@codefiend.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Punq\n====\n\n.. image:: https://travis-ci.org/bobthemighty/punq.svg?branch=master\n      :target: https://travis-ci.org/bobthemighty/punq\n\n.. image:: https://img.shields.io/codecov/c/github/bobthemighty/punq.svg?style=flat\n      :target: https://codecov.io/gh/bobthemighty/punq\n\n.. image:: https://readthedocs.org/projects/punq/badge/?version=latest\n      :target: https://punq.readthedocs.io/en/latest/?badge=latest\n      :alt: Documentation Status\n\nAn unintrusive library for dependency injection in modern Python.\nInspired by `Funq`_, Punq is a dependency injection library you can understand.\n\n- No global state\n- No decorators\n- No weird syntax applied to arguments\n- Small and simple code base with 100% test coverage and developer-friendly comments.\n\nInstallation\n------------\n\nPunq is available on the `cheese shop`_.\n\n.. code:: bash\n\n    pip install punq\n\nDocumentation is available on `Read the docs`_.\n\nQuick Start\n-----------\n\nPunq avoids global state, so you must explicitly create a container in the entrypoint of your application:\n\n.. code:: python\n\n   import punq\n    \n   container = punq.Container()\n\nOnce you have a container, you can register your application's dependencies. In the simplest case, we can register any arbitrary object with some key:\n\n.. code:: python\n\n   container.register(\"connection_string\", \"postgresql://...\")\n\nWe can then request that object back from the container:\n\n.. code:: python\n\n   conn_str = container.resolve(\"connection_string\")\n\nUsually, though, we want to register some object that implements a useful service.:\n\n.. code:: python\n\n   class ConfigReader:\n      def get_config(self):\n         pass\n \n   class EnvironmentConfigReader(ConfigReader):\n      def get_config(self):\n         return {\n            \"logging\": {\n               \"level\": os.env.get(\"LOGGING_LEVEL\", \"debug\")\n            }\n            \"greeting\": os.env.get(\"GREETING\", \"Hello world\")\n         }\n\n   container.register(ConfigReader, EnvironmentConfigReader)\n\nNow we can `resolve` the `ConfigReader` service, and receive a concrete implementation:\n\n.. code:: python\n\n   config = container.resolve(ConfigReader).get_config()\n\nIf our application's dependencies have their *own* dependencies, Punq will inject those, too:\n\n.. code:: python\n\n   class Greeter:\n      def greet(self):\n         pass\n\n\n   class ConsoleGreeter:\n      def __init__(self, config_reader: ConfigReader):\n         self.config = config_reader.get_config()\n\n      def greet(self):\n         print(self.config['greeting'])\n\n\n   container.register(Greeter)\n   container.resolve(Greeter).greet()\n         \nIf you just want to resolve an object without having any base class, that's okay:\n\n.. code:: python\n\n   class Greeter:\n      def __init__(self, config_reader: ConfigReader):\n         self.config = config_reader.get_config()\n\n      def greet(self):\n         print(self.config['greeting'])\n\n   container.register(Greeter)\n   container.resolve(Greeter).greet()\n         \nAnd if you need to have a singleton object for some reason, we can tell punq to register a specific instance of an object:\n\n.. code:: python\n\n   class FileWritingGreeter:\n      def __init__(self, path, greeting):\n         self.path = path\n         self.message = greeting\n         self.file = open(self.path, 'w')\n\n      def greet(self):\n         self.file.write(self.message)\n\n\n   one_true_greeter = FileWritingGreeter(\"/tmp/greetings\", \"Hello world\")\n   container.register(Greeter, instance=one_true_greeter)\n\n\nYou might not know all of your arguments at registration time, but you can provide them later:\n\n.. code:: python\n\n   container.register(Greeter, FileWritingGreeter)\n   greeter = container.resolve(Greeter, path=\"/tmp/foo\", greeting=\"Hello world\")\n\nConversely, you might want to provide arguments at registration time, without adding them to the container:\n\n.. code:: python\n\n   container.register(Greeter, FileWritingGreeter, path=\"/tmp/foo\", greeting=\"Hello world\")\n   \nFuller documentation is available on `Read the docs`_.\n\n.. _cheese shop: https://pypi.org/project/punq/\n.. _Read the docs: http://punq.readthedocs.io/en/latest/ \n.. _Funq: https://github.com/jlyonsmith/Funq\n\nChangelog\n=========\n\n`0.4.1`_ 2020-02-01\n-------------------\n    The container now includes itself as a dependency. This makes some funky\n    use-cases simple to implement, eg. dynamic dispatch to multiple\n    implementations.\n\n`0.4.0`_ 2020-02-01\n-------------------\n    Punq now supports registering implementations as singleton. Singleton\n    instances are cached per-container, and instantiation is lazy, ie. we defer\n    creation until we first resolve the service.\n    Hat tip to `jbcpollak`_\n\n`0.3.0`_ 2019-07-13\n-------------------\nFixes\n    Punq only passes required arguments to nested dependencies. Previously, we would pass\n    all the arguments in our context as kwargs, which caused unintuitive failures if constructors\n    weren't expecting them.\n    Fixed by `Thielen B`_\n\n`0.2.1`_ 2019-05-22\n-------------------\nFixes\n    Punq will now prefer to use a provided resolution argument instead of creating it anew.\n\n`0.2.0`_ 2019-02-12\n-------------------\nFixes\n    Added handling for typing.ForwardRef\n\nBreaking Changes\n    Added explicit `instance` kwarg to `register` which replaces the previous behaviour where\n    `container.register(Service, someInstance)` would register a concrete instance.\n    This fixes https://github.com/bobthemighty/punq/issues/6\n\n0.1.2-alpha 2019-02-11\n----------------------\nFeature\n    First automatic Travis deploy\n\n0.0.1\n-----\n    Basic resolution and registration works\n    Punq is almost certainly slow as a dog, non thread-safe, and prone to weird behaviour in the edge cases.\n\n.. _0.2.0: https://github.com/bobthemighty/punq/compare/v0.1.2-alpha...v0.2\n.. _0.2.1: https://github.com/bobthemighty/punq/compare/v0.2...v0.2.1\n.. _0.3.0: https://github.com/bobthemighty/punq/compare/v0.2.1...v0.3.0\n.. _0.4.0: https://github.com/bobthemighty/punq/compare/v0.3.0...v0.4.0\n.. _0.4.1: https://github.com/bobthemighty/punq/compare/v0.4.0...v0.4.1\n.. _Thielen B: https://github.com/FourSpotProject\n.. _jbcpollak: https://github.com/jbcpollak", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bobthemighty/punq", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "punq", "package_url": "https://pypi.org/project/punq/", "platform": "any", "project_url": "https://pypi.org/project/punq/", "project_urls": {"Homepage": "http://github.com/bobthemighty/punq"}, "release_url": "https://pypi.org/project/punq/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Unintrusive dependency injection for Python 3.6 +", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"punq\">\n<h2>Punq</h2>\n<a href=\"https://travis-ci.org/bobthemighty/punq\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bobthemighty/punq.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92dc10a8e78ab376893486128943e15580a45a28/68747470733a2f2f7472617669732d63692e6f72672f626f627468656d69676874792f70756e712e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/bobthemighty/punq\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/bobthemighty/punq.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88f6e45b92ee32d2c2ae22343f468b136b32e2ac/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f626f627468656d69676874792f70756e712e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://punq.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5223c901cae3b78fa07a3e2416245e75ec4d5fd2/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70756e712f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>An unintrusive library for dependency injection in modern Python.\nInspired by <a href=\"https://github.com/jlyonsmith/Funq\" rel=\"nofollow\">Funq</a>, Punq is a dependency injection library you can understand.</p>\n<ul>\n<li>No global state</li>\n<li>No decorators</li>\n<li>No weird syntax applied to arguments</li>\n<li>Small and simple code base with 100% test coverage and developer-friendly comments.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Punq is available on the <a href=\"https://pypi.org/project/punq/\" rel=\"nofollow\">cheese shop</a>.</p>\n<pre>pip install punq\n</pre>\n<p>Documentation is available on <a href=\"http://punq.readthedocs.io/en/latest/\" rel=\"nofollow\">Read the docs</a>.</p>\n</div>\n<div id=\"quick-start\">\n<h3>Quick Start</h3>\n<p>Punq avoids global state, so you must explicitly create a container in the entrypoint of your application:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">punq</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">punq</span><span class=\"o\">.</span><span class=\"n\">Container</span><span class=\"p\">()</span>\n</pre>\n<p>Once you have a container, you can register your application\u2019s dependencies. In the simplest case, we can register any arbitrary object with some key:</p>\n<pre><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s2\">\"connection_string\"</span><span class=\"p\">,</span> <span class=\"s2\">\"postgresql://...\"</span><span class=\"p\">)</span>\n</pre>\n<p>We can then request that object back from the container:</p>\n<pre><span class=\"n\">conn_str</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"s2\">\"connection_string\"</span><span class=\"p\">)</span>\n</pre>\n<p>Usually, though, we want to register some object that implements a useful service.:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ConfigReader</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">get_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EnvironmentConfigReader</span><span class=\"p\">(</span><span class=\"n\">ConfigReader</span><span class=\"p\">):</span>\n   <span class=\"k\">def</span> <span class=\"nf\">get_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n         <span class=\"s2\">\"logging\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"LOGGING_LEVEL\"</span><span class=\"p\">,</span> <span class=\"s2\">\"debug\"</span><span class=\"p\">)</span>\n         <span class=\"p\">}</span>\n         <span class=\"s2\">\"greeting\"</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"GREETING\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">ConfigReader</span><span class=\"p\">,</span> <span class=\"n\">EnvironmentConfigReader</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can <cite>resolve</cite> the <cite>ConfigReader</cite> service, and receive a concrete implementation:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">ConfigReader</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n</pre>\n<p>If our application\u2019s dependencies have their <em>own</em> dependencies, Punq will inject those, too:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Greeter</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConsoleGreeter</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config_reader</span><span class=\"p\">:</span> <span class=\"n\">ConfigReader</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config_reader</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'greeting'</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">greet</span><span class=\"p\">()</span>\n</pre>\n<p>If you just want to resolve an object without having any base class, that\u2019s okay:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Greeter</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config_reader</span><span class=\"p\">:</span> <span class=\"n\">ConfigReader</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config_reader</span><span class=\"o\">.</span><span class=\"n\">get_config</span><span class=\"p\">()</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'greeting'</span><span class=\"p\">])</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">greet</span><span class=\"p\">()</span>\n</pre>\n<p>And if you need to have a singleton object for some reason, we can tell punq to register a specific instance of an object:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">FileWritingGreeter</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">greeting</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">one_true_greeter</span> <span class=\"o\">=</span> <span class=\"n\">FileWritingGreeter</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/greetings\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"n\">one_true_greeter</span><span class=\"p\">)</span>\n</pre>\n<p>You might not know all of your arguments at registration time, but you can provide them later:</p>\n<pre><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">,</span> <span class=\"n\">FileWritingGreeter</span><span class=\"p\">)</span>\n<span class=\"n\">greeter</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp/foo\"</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n</pre>\n<p>Conversely, you might want to provide arguments at registration time, without adding them to the container:</p>\n<pre><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Greeter</span><span class=\"p\">,</span> <span class=\"n\">FileWritingGreeter</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp/foo\"</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">)</span>\n</pre>\n<p>Fuller documentation is available on <a href=\"http://punq.readthedocs.io/en/latest/\" rel=\"nofollow\">Read the docs</a>.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3><a href=\"https://github.com/bobthemighty/punq/compare/v0.4.0...v0.4.1\" rel=\"nofollow\">0.4.1</a> 2020-02-01</h3>\n<blockquote>\nThe container now includes itself as a dependency. This makes some funky\nuse-cases simple to implement, eg. dynamic dispatch to multiple\nimplementations.</blockquote>\n</div>\n<div id=\"id2\">\n<h3><a href=\"https://github.com/bobthemighty/punq/compare/v0.3.0...v0.4.0\" rel=\"nofollow\">0.4.0</a> 2020-02-01</h3>\n<blockquote>\nPunq now supports registering implementations as singleton. Singleton\ninstances are cached per-container, and instantiation is lazy, ie. we defer\ncreation until we first resolve the service.\nHat tip to <a href=\"https://github.com/jbcpollak\" rel=\"nofollow\">jbcpollak</a></blockquote>\n</div>\n<div id=\"id3\">\n<h3><a href=\"https://github.com/bobthemighty/punq/compare/v0.2.1...v0.3.0\" rel=\"nofollow\">0.3.0</a> 2019-07-13</h3>\n<dl>\n<dt>Fixes</dt>\n<dd>Punq only passes required arguments to nested dependencies. Previously, we would pass\nall the arguments in our context as kwargs, which caused unintuitive failures if constructors\nweren\u2019t expecting them.\nFixed by <a href=\"https://github.com/FourSpotProject\" rel=\"nofollow\">Thielen B</a></dd>\n</dl>\n</div>\n<div id=\"id4\">\n<h3><a href=\"https://github.com/bobthemighty/punq/compare/v0.2...v0.2.1\" rel=\"nofollow\">0.2.1</a> 2019-05-22</h3>\n<dl>\n<dt>Fixes</dt>\n<dd>Punq will now prefer to use a provided resolution argument instead of creating it anew.</dd>\n</dl>\n</div>\n<div id=\"id5\">\n<h3><a href=\"https://github.com/bobthemighty/punq/compare/v0.1.2-alpha...v0.2\" rel=\"nofollow\">0.2.0</a> 2019-02-12</h3>\n<dl>\n<dt>Fixes</dt>\n<dd>Added handling for typing.ForwardRef</dd>\n<dt>Breaking Changes</dt>\n<dd>Added explicit <cite>instance</cite> kwarg to <cite>register</cite> which replaces the previous behaviour where\n<cite>container.register(Service, someInstance)</cite> would register a concrete instance.\nThis fixes <a href=\"https://github.com/bobthemighty/punq/issues/6\" rel=\"nofollow\">https://github.com/bobthemighty/punq/issues/6</a></dd>\n</dl>\n</div>\n<div id=\"alpha-2019-02-11\">\n<h3>0.1.2-alpha 2019-02-11</h3>\n<dl>\n<dt>Feature</dt>\n<dd>First automatic Travis deploy</dd>\n</dl>\n</div>\n<div id=\"id6\">\n<h3>0.0.1</h3>\n<blockquote>\nBasic resolution and registration works\nPunq is almost certainly slow as a dog, non thread-safe, and prone to weird behaviour in the edge cases.</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6557560, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8e9e5cf139f1991d3172b7566ad51605", "sha256": "ae4c03dcbc764a59ea74e2e3ff493313b6fb93d338d764b8ee3a4e5b9ffaac96"}, "downloads": -1, "filename": "punq-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8e9e5cf139f1991d3172b7566ad51605", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2917, "upload_time": "2017-09-10T21:12:11", "upload_time_iso_8601": "2017-09-10T21:12:11.062247Z", "url": "https://files.pythonhosted.org/packages/04/5f/a23044d7b1c06e63147612e91a2c0f61176bee697694db4564562a51ff59/punq-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c9d897083c24dc5d369e9112c601a989", "sha256": "30a980199e175b92ec96dfc5fa887d9242c4096564f53b212e771c433bf82722"}, "downloads": -1, "filename": "punq-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c9d897083c24dc5d369e9112c601a989", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3036, "upload_time": "2017-09-10T21:21:51", "upload_time_iso_8601": "2017-09-10T21:21:51.595308Z", "url": "https://files.pythonhosted.org/packages/5c/96/2365b4849e95049eb831207023ea9b46df220c23be4d514febecf2478845/punq-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a973503ee409ae6c66609577727c2895", "sha256": "5597609ee0fe4017588fcb178349c8ca1dd2c1d09db603c0467091069741adec"}, "downloads": -1, "filename": "punq-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a973503ee409ae6c66609577727c2895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3106, "upload_time": "2017-09-10T21:39:19", "upload_time_iso_8601": "2017-09-10T21:39:19.934792Z", "url": "https://files.pythonhosted.org/packages/be/d6/e721e8adf8eb95e187ed0f3be0b2144d2df16a1f37cc2ce7826b178f74f0/punq-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "387270380bedae35871fffd87931b8cc", "sha256": "169a5a3ee685e8c908ce93a02c220b9871d51ab6a208ee88769f27d5d776d924"}, "downloads": -1, "filename": "punq-0.0.4.tar.gz", "has_sig": false, "md5_digest": "387270380bedae35871fffd87931b8cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3095, "upload_time": "2017-09-10T21:44:43", "upload_time_iso_8601": "2017-09-10T21:44:43.838095Z", "url": "https://files.pythonhosted.org/packages/65/3f/06257c7867ae0b71ae09b97d50395f62ea6fe4653882069418a5104cb159/punq-0.0.4.tar.gz", "yanked": false}], "0.1.2.1a0": [{"comment_text": "", "digests": {"md5": "cde8e7aea89f18262431f63e727b59e3", "sha256": "00180f0831febfd360c4fc04e1a332bc1a18391cc5a8e77838aa62708ce092e5"}, "downloads": -1, "filename": "punq-0.1.2.1a0.tar.gz", "has_sig": false, "md5_digest": "cde8e7aea89f18262431f63e727b59e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15441, "upload_time": "2019-02-06T07:08:53", "upload_time_iso_8601": "2019-02-06T07:08:53.444109Z", "url": "https://files.pythonhosted.org/packages/67/c2/1fa41fb3c29d09c57bb56253758dd94a348aec5aedd79ee5c994a237332c/punq-0.1.2.1a0.tar.gz", "yanked": false}], "0.1.2a0": [{"comment_text": "", "digests": {"md5": "7bdaf86624551f540d93182e3f06da4c", "sha256": "d9eaa579b2a8b3e863f37ef6ded5a40d7aae0e70f4272e514ded55ef51bb9d53"}, "downloads": -1, "filename": "punq-0.1.2a0.tar.gz", "has_sig": false, "md5_digest": "7bdaf86624551f540d93182e3f06da4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14966, "upload_time": "2019-02-06T06:56:56", "upload_time_iso_8601": "2019-02-06T06:56:56.621280Z", "url": "https://files.pythonhosted.org/packages/48/a3/9ee2f16e1a77f578accb9064a876b35e9bdaa467d232d704d93773e01895/punq-0.1.2a0.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b717e8e09aace99c87ad5cdd896dc8e6", "sha256": "3e7d531f99d35fb2f03ca1007c134bc0682a369057df0c7083c9369b665f7add"}, "downloads": -1, "filename": "punq-0.2.tar.gz", "has_sig": false, "md5_digest": "b717e8e09aace99c87ad5cdd896dc8e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19146, "upload_time": "2019-02-12T11:30:38", "upload_time_iso_8601": "2019-02-12T11:30:38.274046Z", "url": "https://files.pythonhosted.org/packages/15/20/87a6c98b2db54ffeadf29b84cbe8eaed2440a3c926fb7f3c7584561728ad/punq-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d46eb30b5e16e9d62812f88952d48a88", "sha256": "381852451f4a260ee24ab6a70726210c82eda4df5859a0f78b201b181959048a"}, "downloads": -1, "filename": "punq-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d46eb30b5e16e9d62812f88952d48a88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23773, "upload_time": "2019-05-22T05:44:53", "upload_time_iso_8601": "2019-05-22T05:44:53.407458Z", "url": "https://files.pythonhosted.org/packages/21/04/bd5066f005e5c68814f38f16548520be3f913e21b9a9e8a4b2d47873af1a/punq-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "80d0df400911531c10c920036149c38d", "sha256": "69b80d957eb28d7d2d89459fd16561063592f20e8bc00259dce39c29b60cfbd0"}, "downloads": -1, "filename": "punq-0.3.0.tar.gz", "has_sig": false, "md5_digest": "80d0df400911531c10c920036149c38d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23976, "upload_time": "2019-07-13T04:47:07", "upload_time_iso_8601": "2019-07-13T04:47:07.534181Z", "url": "https://files.pythonhosted.org/packages/eb/43/78c5a5d9cf67a42bde18f2a6e05c29d647a15b49ffb6097524af161d0359/punq-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "257e703845a52eda0bd019ef9405b9b7", "sha256": "ccc6d0f5e30ef5ed68afc3971592b98b55f6fdbe59e887405cc1464bb31ae7ee"}, "downloads": -1, "filename": "punq-0.4.0.tar.gz", "has_sig": false, "md5_digest": "257e703845a52eda0bd019ef9405b9b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24629, "upload_time": "2020-02-02T10:02:36", "upload_time_iso_8601": "2020-02-02T10:02:36.134608Z", "url": "https://files.pythonhosted.org/packages/32/b9/a9c0b2d76642824b39eeb5d0db398d5cb89b4ed5de437392c90f9df36cf6/punq-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "7b14875725e984c37d125b54b0446b9d", "sha256": "570494d52215611334d0d604853ac3ddfe1b62fccb4ad95ea5158618d1a90914"}, "downloads": -1, "filename": "punq-0.4.1.tar.gz", "has_sig": false, "md5_digest": "7b14875725e984c37d125b54b0446b9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25095, "upload_time": "2020-02-02T10:56:59", "upload_time_iso_8601": "2020-02-02T10:56:59.879137Z", "url": "https://files.pythonhosted.org/packages/7f/8d/134df0a6ba960708f4cea5f179a02b035fb2af9660542dfc963b0ffd19a7/punq-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b14875725e984c37d125b54b0446b9d", "sha256": "570494d52215611334d0d604853ac3ddfe1b62fccb4ad95ea5158618d1a90914"}, "downloads": -1, "filename": "punq-0.4.1.tar.gz", "has_sig": false, "md5_digest": "7b14875725e984c37d125b54b0446b9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25095, "upload_time": "2020-02-02T10:56:59", "upload_time_iso_8601": "2020-02-02T10:56:59.879137Z", "url": "https://files.pythonhosted.org/packages/7f/8d/134df0a6ba960708f4cea5f179a02b035fb2af9660542dfc963b0ffd19a7/punq-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:33 2020"}