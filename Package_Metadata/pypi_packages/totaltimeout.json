{"info": {"author": "Alexander Kozhevnikov", "author_email": "mentalisttraceur@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.3", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: IronPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Programming Language :: Python :: Implementation :: Stackless"], "description": "totaltimeout\n============\n\nSpread one timeout over many operations.\n\nCorrectly and efficiently spreads one timeout over many steps by\nrecalculating the time remaining after some amount of waiting has\nalready happened, to pass an adjusted timeout to the next step.\n\n\nVersioning\n----------\n\nThis library's version numbers follow the `SemVer 2.0.0 specification\n<https://semver.org/spec/v2.0.0.html>`_.\n\nThe current version number is available in the variable ``__version__``,\nas is normal for Python modules.\n\n\nInstallation\n------------\n\n::\n\n    pip install totaltimeout\n\n\nUsage\n-----\n\nImport the ``Timeout`` class.\n\n.. code:: python\n\n    from totaltimeout import Timeout\n\nWaiting in a \"timed loop\" for an API with retries (useful\nfor unreliable APIs that may either hang or need retries):\n\n.. code:: python\n\n    for time_left in Timeout(SOME_NUMBER_OF_SECONDS):\n         reply = requests.get(some_flaky_api_url, timeout=time_left)\n         if reply.status == 200:\n             break\n\nSame as above, but with a wait between retries:\n\n.. code:: python\n\n    timeout = Timeout(SOME_NUMBER_OF_SECONDS)\n    for time_left in timeout:\n         reply = requests.get(some_flaky_api_url, timeout=time_left)\n         if reply.status == 200:\n             break\n         if timeout.time_left() <= RETRY_DELAY:\n             break\n         time.sleep(RETRY_DELAY)\n\nWaiting for multiple tasks to finish:\n\n.. code:: python\n\n    timeout = Timeout(10.0)\n    my_thread_foo.join(timeout.time_left())\n    my_thread_bar.join(timeout.time_left())\n    my_thread_qux.join(timeout.time_left())\n    # Wait only as long as the slowest\n    # thread to finish, as if they all\n    # got a 10 second wait in parallel.\n\nWaiting for multiple tasks within each iteration of a \"timed loop\":\n\n.. code:: python\n\n    timeout = Timeout(SOME_NUMBER_OF_SECONDS)\n    for time_left in timeout:\n         foo.some_work(timeout=time_left)\n         # The first timeout can be *either* be the for loop value or\n         # the ``time_left()`` method. The rest *have to be* the latter.\n         foo.some_more_work(timeout=timeout.time_left())\n         some_other_work(timeout=timeout.time_left())\n\n\nExplanation\n~~~~~~~~~~~\n\nIf you're confused about what's going on, run this example program:\n\n.. code:: python\n\n    from time import sleep\n\n    from totaltimeout import Timeout\n\n    def demo(timeout_in_seconds):\n        timeout = Timeout(timeout_in_seconds)\n        for time_left in timeout:\n            print(time_left)\n            sleep(1)\n            print(timeout.time_left())\n            sleep(1)\n\n    if __name__ == '__main__':\n        demo(10)\n\nYou should get output kinda like this::\n\n    9.99990844912827\n    8.996184696443379\n    7.992705063894391\n    6.990415567532182\n    5.983945298939943\n    4.981594786979258\n    3.979213748127222\n    2.9768632212653756\n    1.9745127055794\n    0.9699955033138394\n\n\nAdvanced Usage Notes\n~~~~~~~~~~~~~~~~~~~~\n\n``Timeout`` uses ``time.monotonic`` as the default time function,\nfalling back to ``time.time`` if ``time.monotonic`` is unavailable.\n\nYou can override this by passing in a callable as the second argument.\n\nFor example, if you've installed the\n`monotonic backport <https://pypi.org/project/monotonic>`_:\n\n.. code:: python\n\n    from monotonic import monotonic\n\n    timeout = Timeout(10.0, now=monotonic)\n\nAny callables that return time in seconds as floating point values\nare supported as part of the interface subject to SemVer backwards\ncompability guarantees.\n\nHowever, **any** callables that return time values that can be\nsubtracted from each other to produce duration values which in turn can\nbe subtracted from each other and compared to zero should work, and\nseconds are expected only because Python's idiomatic unit for timeouts\nis seconds. If the ``timeout``, ``now``, and usage are consistent, any\nchoice that fits these criteria is likely to work.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mentalisttraceur/python-totaltimeout", "keywords": "", "license": "0BSD (BSD Zero Clause License)", "maintainer": "", "maintainer_email": "", "name": "totaltimeout", "package_url": "https://pypi.org/project/totaltimeout/", "platform": "", "project_url": "https://pypi.org/project/totaltimeout/", "project_urls": {"Homepage": "https://github.com/mentalisttraceur/python-totaltimeout"}, "release_url": "https://pypi.org/project/totaltimeout/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Spread one timeout over many operations", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Spread one timeout over many operations.</p>\n<p>Correctly and efficiently spreads one timeout over many steps by\nrecalculating the time remaining after some amount of waiting has\nalready happened, to pass an adjusted timeout to the next step.</p>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>This library\u2019s version numbers follow the <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">SemVer 2.0.0 specification</a>.</p>\n<p>The current version number is available in the variable <tt>__version__</tt>,\nas is normal for Python modules.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install totaltimeout\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Import the <tt>Timeout</tt> class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">totaltimeout</span> <span class=\"kn\">import</span> <span class=\"n\">Timeout</span>\n</pre>\n<p>Waiting in a \u201ctimed loop\u201d for an API with retries (useful\nfor unreliable APIs that may either hang or need retries):</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">time_left</span> <span class=\"ow\">in</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"n\">SOME_NUMBER_OF_SECONDS</span><span class=\"p\">):</span>\n     <span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">some_flaky_api_url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">time_left</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span> <span class=\"n\">reply</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n         <span class=\"k\">break</span>\n</pre>\n<p>Same as above, but with a wait between retries:</p>\n<pre><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"n\">SOME_NUMBER_OF_SECONDS</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">time_left</span> <span class=\"ow\">in</span> <span class=\"n\">timeout</span><span class=\"p\">:</span>\n     <span class=\"n\">reply</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">some_flaky_api_url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">time_left</span><span class=\"p\">)</span>\n     <span class=\"k\">if</span> <span class=\"n\">reply</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n         <span class=\"k\">break</span>\n     <span class=\"k\">if</span> <span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">RETRY_DELAY</span><span class=\"p\">:</span>\n         <span class=\"k\">break</span>\n     <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"n\">RETRY_DELAY</span><span class=\"p\">)</span>\n</pre>\n<p>Waiting for multiple tasks to finish:</p>\n<pre><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"n\">my_thread_foo</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n<span class=\"n\">my_thread_bar</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n<span class=\"n\">my_thread_qux</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n<span class=\"c1\"># Wait only as long as the slowest</span>\n<span class=\"c1\"># thread to finish, as if they all</span>\n<span class=\"c1\"># got a 10 second wait in parallel.</span>\n</pre>\n<p>Waiting for multiple tasks within each iteration of a \u201ctimed loop\u201d:</p>\n<pre><span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"n\">SOME_NUMBER_OF_SECONDS</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">time_left</span> <span class=\"ow\">in</span> <span class=\"n\">timeout</span><span class=\"p\">:</span>\n     <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">some_work</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">time_left</span><span class=\"p\">)</span>\n     <span class=\"c1\"># The first timeout can be *either* be the for loop value or</span>\n     <span class=\"c1\"># the ``time_left()`` method. The rest *have to be* the latter.</span>\n     <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">some_more_work</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n     <span class=\"n\">some_other_work</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n</pre>\n<div id=\"explanation\">\n<h3>Explanation</h3>\n<p>If you\u2019re confused about what\u2019s going on, run this example program:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">totaltimeout</span> <span class=\"kn\">import</span> <span class=\"n\">Timeout</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">demo</span><span class=\"p\">(</span><span class=\"n\">timeout_in_seconds</span><span class=\"p\">):</span>\n    <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"n\">timeout_in_seconds</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">time_left</span> <span class=\"ow\">in</span> <span class=\"n\">timeout</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time_left</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">.</span><span class=\"n\">time_left</span><span class=\"p\">())</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">demo</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>You should get output kinda like this:</p>\n<pre>9.99990844912827\n8.996184696443379\n7.992705063894391\n6.990415567532182\n5.983945298939943\n4.981594786979258\n3.979213748127222\n2.9768632212653756\n1.9745127055794\n0.9699955033138394\n</pre>\n</div>\n<div id=\"advanced-usage-notes\">\n<h3>Advanced Usage Notes</h3>\n<p><tt>Timeout</tt> uses <tt>time.monotonic</tt> as the default time function,\nfalling back to <tt>time.time</tt> if <tt>time.monotonic</tt> is unavailable.</p>\n<p>You can override this by passing in a callable as the second argument.</p>\n<p>For example, if you\u2019ve installed the\n<a href=\"https://pypi.org/project/monotonic\" rel=\"nofollow\">monotonic backport</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">monotonic</span> <span class=\"kn\">import</span> <span class=\"n\">monotonic</span>\n\n<span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">Timeout</span><span class=\"p\">(</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">now</span><span class=\"o\">=</span><span class=\"n\">monotonic</span><span class=\"p\">)</span>\n</pre>\n<p>Any callables that return time in seconds as floating point values\nare supported as part of the interface subject to SemVer backwards\ncompability guarantees.</p>\n<p>However, <strong>any</strong> callables that return time values that can be\nsubtracted from each other to produce duration values which in turn can\nbe subtracted from each other and compared to zero should work, and\nseconds are expected only because Python\u2019s idiomatic unit for timeouts\nis seconds. If the <tt>timeout</tt>, <tt>now</tt>, and usage are consistent, any\nchoice that fits these criteria is likely to work.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6217067, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e23dbe9bd8208823bf1ecd7acde753b9", "sha256": "16a9f28dc883a3cf33f0fc27f12f95916f2e942919dc45038477abf3b45c8167"}, "downloads": -1, "filename": "totaltimeout-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e23dbe9bd8208823bf1ecd7acde753b9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5888, "upload_time": "2018-09-26T06:48:58", "upload_time_iso_8601": "2018-09-26T06:48:58.305950Z", "url": "https://files.pythonhosted.org/packages/15/b5/f5f4fdcb26262536206ed8431c2e8cb6da86ca798e2ee4f8573ba2dd27ac/totaltimeout-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4da6d227f9d3dd5b575a3ed875dd4fd0", "sha256": "351479f550e40e73139395d33b699c8a5a989ffd0485c0a00be156c3a1f17329"}, "downloads": -1, "filename": "totaltimeout-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4da6d227f9d3dd5b575a3ed875dd4fd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3753, "upload_time": "2018-09-26T06:49:00", "upload_time_iso_8601": "2018-09-26T06:49:00.690461Z", "url": "https://files.pythonhosted.org/packages/3a/04/4e69fdf5bc0949bc68727d89d8ae8ee4df50b49c0d256f7e053f5bab4cd8/totaltimeout-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "02e1cb3de739c81d602beabf81462fbd", "sha256": "d8d7be713e64753e5fadf4d25029aca90c9a10de472ccb3bb997498d92bb213a"}, "downloads": -1, "filename": "totaltimeout-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "02e1cb3de739c81d602beabf81462fbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5923, "upload_time": "2018-09-26T08:12:11", "upload_time_iso_8601": "2018-09-26T08:12:11.105901Z", "url": "https://files.pythonhosted.org/packages/2d/e0/8051d1b5cfb553a37d3b21c515f89a8d106247ae7c946cf24c2edea8d44d/totaltimeout-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e488bebb89f789af0c92e8bf16e25a04", "sha256": "af596d3237f609cef8ff8a7d710801aa757b069c82b605bc1ea2c7947d213271"}, "downloads": -1, "filename": "totaltimeout-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e488bebb89f789af0c92e8bf16e25a04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3767, "upload_time": "2018-09-26T08:12:13", "upload_time_iso_8601": "2018-09-26T08:12:13.005760Z", "url": "https://files.pythonhosted.org/packages/ca/a9/e399bd9486f97e1aa5ee87d4d28166480ecefe0fba1c65b19c80234060df/totaltimeout-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2bad6dd32840e3d2d8c9d0fff457391d", "sha256": "55888bd2c6f02c86c50a72c52ce37a74b54164f56356224a54bffd70661465ca"}, "downloads": -1, "filename": "totaltimeout-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2bad6dd32840e3d2d8c9d0fff457391d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4788, "upload_time": "2019-11-29T07:46:01", "upload_time_iso_8601": "2019-11-29T07:46:01.792402Z", "url": "https://files.pythonhosted.org/packages/a0/9e/bfa4ad20cf80ad2f3c093d4fe625c6b8ea97b3f0d9a048ed8db66ef62e1b/totaltimeout-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ec04d81e0a65cbb3717b288e82c02f8", "sha256": "d2173e435309e51a048d1ba84cb645c1e98ad142055a88f1e5f1e38b56e7355c"}, "downloads": -1, "filename": "totaltimeout-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0ec04d81e0a65cbb3717b288e82c02f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4332, "upload_time": "2019-11-29T07:46:04", "upload_time_iso_8601": "2019-11-29T07:46:04.143755Z", "url": "https://files.pythonhosted.org/packages/f7/3f/87e4b9baf55353b5ff4e928eaee984c1115c579c10993e7ae3e3b5173353/totaltimeout-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2bad6dd32840e3d2d8c9d0fff457391d", "sha256": "55888bd2c6f02c86c50a72c52ce37a74b54164f56356224a54bffd70661465ca"}, "downloads": -1, "filename": "totaltimeout-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2bad6dd32840e3d2d8c9d0fff457391d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4788, "upload_time": "2019-11-29T07:46:01", "upload_time_iso_8601": "2019-11-29T07:46:01.792402Z", "url": "https://files.pythonhosted.org/packages/a0/9e/bfa4ad20cf80ad2f3c093d4fe625c6b8ea97b3f0d9a048ed8db66ef62e1b/totaltimeout-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ec04d81e0a65cbb3717b288e82c02f8", "sha256": "d2173e435309e51a048d1ba84cb645c1e98ad142055a88f1e5f1e38b56e7355c"}, "downloads": -1, "filename": "totaltimeout-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0ec04d81e0a65cbb3717b288e82c02f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4332, "upload_time": "2019-11-29T07:46:04", "upload_time_iso_8601": "2019-11-29T07:46:04.143755Z", "url": "https://files.pythonhosted.org/packages/f7/3f/87e4b9baf55353b5ff4e928eaee984c1115c579c10993e7ae3e3b5173353/totaltimeout-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:33 2020"}