{"info": {"author": "Ilan Schnell", "author_email": "ilanschnell@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "bitarray: efficient arrays of booleans\n======================================\n\nThis module provides an object type which efficiently represents an array\nof booleans.  Bitarrays are sequence types and behave very much like usual\nlists.  Eight bits are represented by one byte in a contiguous block of\nmemory.  The user can select between two representations: little-endian\nand big-endian.  All of the functionality is implemented in C.\nMethods for accessing the machine representation are provided.\nThis can be useful when bit level access to binary files is required,\nsuch as portable bitmap image files (.pbm).  Also, when dealing with\ncompressed data which uses variable bit length encoding, you may find\nthis module useful.\n\n\nKey features\n------------\n\n * All functionality implemented in C.\n * Bitarray objects behave very much like a list object, in particular\n   slicing (including slice assignment and deletion) is supported.\n * The bit endianness can be specified for each bitarray object, see below.\n * Packing and unpacking to other binary data formats, e.g. numpy.ndarray\n   is possible.\n * Fast methods for encoding and decoding variable bit length prefix codes\n * Bitwise operations: `&`, `|`, `^`, `&=`, `|=`, `^=`, `~`\n * Sequential search\n * Pickling and unpickling of bitarray objects.\n * Bitarray objects support the buffer protocol (Python 2.7 and above)\n * On 32-bit systems, a bitarray object can contain up to 2^34 elements,\n   that is 16 Gbits (on 64-bit machines up to 2^63 elements in theory).\n\n\nInstallation\n------------\n\nBitarray can be installed from source:\n\n    $ tar xzf bitarray-1.2.1.tar.gz\n    $ cd bitarray-1.2.1\n    $ python setup.py install\n\nOn Unix systems, the latter command may have to be executed with root\nprivileges.  You can also pip install bitarray.\nOnce you have installed the package, you may want to test it:\n\n    $ python -c 'import bitarray; bitarray.test()'\n    bitarray is installed in: /usr/local/lib/python2.7/site-packages/bitarray\n    bitarray version: 1.2.1\n    3.7.4 (r271:86832, Dec 29 2018) [GCC 4.2.1 (SUSE Linux)]\n    .........................................................................\n    .........................................................................\n    ..............................\n    ----------------------------------------------------------------------\n    Ran 199 tests in 1.144s\n\n    OK\n\nYou can always import the function test,\nand `test().wasSuccessful()` will return `True` when the test went well.\n\n\nUsing the module\n----------------\n\nAs mentioned above, bitarray objects behave very much like lists, so\nthere is not too much to learn.  The biggest difference from list objects\nis the ability to access the machine representation of the object.\nWhen doing so, the bit endianness is of importance; this issue is\nexplained in detail in the section below.  Here, we demonstrate the\nbasic usage of bitarray objects:\n\n    >>> from bitarray import bitarray\n    >>> a = bitarray()            # create empty bitarray\n    >>> a.append(True)\n    >>> a.extend([False, True, True])\n    >>> a\n    bitarray('1011')\n\nBitarray objects can be instantiated in different ways:\n\n    >>> a = bitarray(2**20)       # bitarray of length 1048576 (uninitialized)\n    >>> bitarray('1001011')       # from a string\n    bitarray('1001011')\n    >>> lst = [True, False, False, True, False, True, True]\n    >>> bitarray(lst)             # from list, tuple, iterable\n    bitarray('1001011')\n\nBits can be assigned from any Python object, if the value can be interpreted\nas a truth value.  You can think of this as Python's built-in function bool()\nbeing applied, whenever casting an object:\n\n    >>> a = bitarray([42, '', True, {}, 'foo', None])\n    >>> a\n    bitarray('101010')\n    >>> a.append(a)      # note that bool(a) is True\n    >>> a.count(42)      # counts occurrences of True (not 42)\n    4\n    >>> a.remove('')     # removes first occurrence of False\n    >>> a\n    bitarray('110101')\n\nLike lists, bitarray objects support slice assignment and deletion:\n\n    >>> a = bitarray(50)\n    >>> a.setall(False)\n    >>> a[11:37:3] = 9 * bitarray([True])\n    >>> a\n    bitarray('00000000000100100100100100100100100100000000000000')\n    >>> del a[12::3]\n    >>> a\n    bitarray('0000000000010101010101010101000000000')\n    >>> a[-6:] = bitarray('10011')\n    >>> a\n    bitarray('000000000001010101010101010100010011')\n    >>> a += bitarray('000111')\n    >>> a[9:]\n    bitarray('001010101010101010100010011000111')\n\nIn addition, slices can be assigned to booleans, which is easier (and\nfaster) than assigning to a bitarray in which all values are the same:\n\n    >>> a = 20 * bitarray('0')\n    >>> a[1:15:3] = True\n    >>> a\n    bitarray('01001001001001000000')\n\nThis is easier and faster than:\n\n    >>> a = 20 * bitarray('0')\n    >>> a[1:15:3] = 5 * bitarray('1')\n    >>> a\n    bitarray('01001001001001000000')\n\nNote that in the latter we have to create a temporary bitarray whose length\nmust be known or calculated.\n\n\nBit endianness\n--------------\n\nSince a bitarray allows addressing of individual bits, where the machine\nrepresents 8 bits in one byte, there are two obvious choices for this\nmapping: little- and big-endian.\nWhen creating a new bitarray object, the endianness can always be\nspecified explicitly:\n\n    >>> a = bitarray(endian='little')\n    >>> a.frombytes(b'A')\n    >>> a\n    bitarray('10000010')\n    >>> b = bitarray('11000010', endian='little')\n    >>> b.tobytes()\n    b'C'\n\nHere, the low-bit comes first because little-endian means that increasing\nnumeric significance corresponds to an increasing address (index).\nSo a[0] is the lowest and least significant bit, and a[7] is the highest\nand most significant bit.\n\n    >>> a = bitarray(endian='big')\n    >>> a.frombytes(b'A')\n    >>> a\n    bitarray('01000001')\n    >>> a[6] = 1\n    >>> a.tobytes()\n    b'C'\n\nHere, the high-bit comes first because big-endian\nmeans \"most-significant first\".\nSo a[0] is now the lowest and most significant bit, and a[7] is the highest\nand least significant bit.\n\nThe bit endianness is a property attached to each bitarray object.\nWhen comparing bitarray objects, the endianness (and hence the machine\nrepresentation) is irrelevant; what matters is the mapping from indices\nto bits:\n\n    >>> bitarray('11001', endian='big') == bitarray('11001', endian='little')\n    True\n\nBitwise operations (`&`, `|`, `^`, `&=`, `|=`, `^=`, `~`) are implemented\nefficiently using the corresponding byte operations in C, i.e. the operators\nact on the machine representation of the bitarray objects.\nTherefore, one has to be cautious when applying the operation to bitarrays\nwith different endianness.\n\nWhen converting to and from machine representation, using\nthe `tobytes`, `frombytes`, `tofile` and `fromfile` methods,\nthe endianness matters:\n\n    >>> a = bitarray(endian='little')\n    >>> a.frombytes(b'\\x01')\n    >>> a\n    bitarray('10000000')\n    >>> b = bitarray(endian='big')\n    >>> b.frombytes(b'\\x80')\n    >>> b\n    bitarray('10000000')\n    >>> a == b\n    True\n    >>> a.tobytes() == b.tobytes()\n    False\n\nThe endianness can not be changed once an object is created.\nHowever, since creating a bitarray from another bitarray just copies the\nmemory representing the data, you can create a new bitarray with different\nendianness:\n\n    >>> a = bitarray('11100000', endian='little')\n    >>> a\n    bitarray('11100000')\n    >>> b = bitarray(a, endian='big')\n    >>> b\n    bitarray('00000111')\n    >>> a == b\n    False\n    >>> a.tobytes() == b.tobytes()\n    True\n\nThe default bit endianness is currently big-endian, however this may change\nin the future, and when dealing with the machine representation of bitarray\nobjects, it is recommended to always explicitly specify the endianness.\n\nUnless explicitly converting to machine representation, using\nthe `tobytes`, `frombytes`, `tofile` and `fromfile` methods,\nthe bit endianness will have no effect on any computation, and one\ncan safely ignore setting the endianness, and other details of this section.\n\n\nBuffer protocol\n---------------\n\nPython 2.7 provides memoryview objects, which allow Python code to access\nthe internal data of an object that supports the buffer protocol without\ncopying.  Bitarray objects support this protocol, with the memory being\ninterpreted as simple bytes.\n\n    >>> a = bitarray('01000001' '01000010' '01000011', endian='big')\n    >>> v = memoryview(a)\n    >>> len(v)\n    3\n    >>> v[-1]\n    67\n    >>> v[:2].tobytes()\n    b'AB'\n    >>> v.readonly  # changing a bitarray's memory is also possible\n    False\n    >>> v[1] = 111\n    >>> a\n    bitarray('010000010110111101000011')\n\n\nVariable bit length prefix codes\n--------------------------------\n\nThe method `encode` takes a dictionary mapping symbols to bitarrays\nand an iterable, and extends the bitarray object with the encoded symbols\nfound while iterating.  For example:\n\n    >>> d = {'H':bitarray('111'), 'e':bitarray('0'),\n    ...      'l':bitarray('110'), 'o':bitarray('10')}\n    ...\n    >>> a = bitarray()\n    >>> a.encode(d, 'Hello')\n    >>> a\n    bitarray('111011011010')\n\nNote that the string `'Hello'` is an iterable, but the symbols are not\nlimited to characters, in fact any immutable Python object can be a symbol.\nTaking the same dictionary, we can apply the `decode` method which will\nreturn a list of the symbols:\n\n    >>> a.decode(d)\n    ['H', 'e', 'l', 'l', 'o']\n    >>> ''.join(a.decode(d))\n    'Hello'\n\nSince symbols are not limited to being characters, it is necessary to return\nthem as elements of a list, rather than simply returning the joined string.\n\n\nReference\n=========\n\nThe bitarray object:\n--------------------\n\n`bitarray(initial=0, /, endian='big')`\n\nReturn a new bitarray object whose items are bits initialized from\nthe optional initial object, and endianness.\nIf no initial object is provided, an empty bitarray (length zero) is created.\nThe initial object may be of the following types:\n\n`int`: Create a bitarray of given integer length.  The initial values are\narbitrary.  If you want all values to be set, use the .setall() method.\n\n`str`: Create bitarray from a string of `0` and `1`.\n\n`list`, `tuple`, `iterable`: Create bitarray from a sequence, each\nelement in the sequence is converted to a bit using its truth value.\n\n`bitarray`: Create bitarray from another bitarray.  This is done by\ncopying the memory holding the bitarray data, and is hence very fast.\n\nThe optional keyword arguments `endian` specifies the bit endianness of the\ncreated bitarray object.\nAllowed values are the strings `big` and `little` (default is `big`).\n\nNote that setting the bit endianness only has an effect when accessing the\nmachine representation of the bitarray, i.e. when using the methods: tofile,\nfromfile, tobytes, frombytes.\n\n\n**A bitarray object supports the following methods:**\n\n`all()` -> bool\n\nReturns True when all bits in the array are True.\n\n\n`any()` -> bool\n\nReturns True when any bit in the array is True.\n\n\n`append(item, /)`\n\nAppend the value `bool(item)` to the end of the bitarray.\n\n\n`buffer_info()` -> tuple\n\nReturn a tuple (address, size, endianness, unused, allocated) giving the\ncurrent memory address, the size (in bytes) used to hold the bitarray's\ncontents, the bit endianness as a string, the number of unused bits\n(e.g. a bitarray of length 11 will have a buffer size of 2 bytes and\n5 unused bits), and the size (in bytes) of the allocated memory.\n\n\n`bytereverse()`\n\nFor all bytes representing the bitarray, reverse the bit order (in-place).\nNote: This method changes the actual machine values representing the\nbitarray; it does not change the endianness of the bitarray object.\n\n\n`copy()` -> bitarray\n\nReturn a copy of the bitarray.\n\n\n`count(value=True, start=0, stop=<end of array>, /)` -> int\n\nCount the number of occurrences of bool(value) in the bitarray.\n\n\n`decode(code, /)` -> list\n\nGiven a prefix code (a dict mapping symbols to bitarrays),\ndecode the content of the bitarray and return it as a list of symbols.\n\n\n`encode(code, iterable, /)`\n\nGiven a prefix code (a dict mapping symbols to bitarrays),\niterate over the iterable object with symbols, and extend the bitarray\nwith the corresponding bitarray for each symbols.\n\n\n`endian()` -> str\n\nReturn the bit endianness as a string (either `little` or `big`).\n\n\n`extend(iterable, /)`\n\nAppend bits to the end of the bitarray.  The objects which can be passed\nto this method are the same iterable objects which can given to a bitarray\nobject upon initialization.\n\n\n`fill()` -> int\n\nAdds zeros to the end of the bitarray, such that the length of the bitarray\nwill be a multiple of 8.  Returns the number of bits added (0..7).\n\n\n`frombytes(bytes, /)`\n\nAppend from a byte string, interpreted as machine values.\n\n\n`fromfile(f, n=<till EOF>, /)`\n\nRead n bytes from the file object f and append them to the bitarray\ninterpreted as machine values.  When n is omitted, as many bytes are\nread until EOF is reached.\n\n\n`fromstring(str)`\n\nAppend from a string, interpreting the string as machine values.\nDeprecated since version 0.4.0, use `.frombytes()` instead.\n\n\n`index(value, start=0, stop=<end of array>, /)` -> int\n\nReturn index of the first occurrence of `bool(value)` in the bitarray.\nRaises `ValueError` if the value is not present.\n\n\n`insert(index, value, /)`\n\nInsert `bool(value)` into the bitarray before index.\n\n\n`invert()`\n\nInvert all bits in the array (in-place),\ni.e. convert each 1-bit into a 0-bit and vice versa.\n\n\n`iterdecode(code, /)` -> iterator\n\nGiven a prefix code (a dict mapping symbols to bitarrays),\ndecode the content of the bitarray and return an iterator over\nthe symbols.\n\n\n`itersearch(bitarray, /)` -> iterator\n\nSearches for the given a bitarray in self, and return an iterator over\nthe start positions where bitarray matches self.\n\n\n`length()` -> int\n\nReturn the length, i.e. number of bits stored in the bitarray.\nThis method is preferred over `__len__` (used when typing `len(a)`),\nsince `__len__` will fail for a bitarray object with 2^31 or more elements\non a 32bit machine, whereas this method will return the correct value,\non 32bit and 64bit machines.\n\n\n`pack(bytes, /)`\n\nExtend the bitarray from bytes, where each byte corresponds to a single\nbit.  The byte `b'\\x00'` maps to bit 0 and all other characters map to\nbit 1.\nThis method, as well as the unpack method, are meant for efficient\ntransfer of data between bitarray objects to other python objects\n(for example NumPy's ndarray object) which have a different memory view.\n\n\n`pop(index=-1, /)` -> item\n\nReturn the i-th (default last) element and delete it from the bitarray.\nRaises `IndexError` if bitarray is empty or index is out of range.\n\n\n`remove(value, /)`\n\nRemove the first occurrence of `bool(value)` in the bitarray.\nRaises `ValueError` if item is not present.\n\n\n`reverse()`\n\nReverse the order of bits in the array (in-place).\n\n\n`search(bitarray, limit=<none>, /)` -> list\n\nSearches for the given bitarray in self, and return the list of start\npositions.\nThe optional argument limits the number of search results to the integer\nspecified.  By default, all search results are returned.\n\n\n`setall(value, /)`\n\nSet all bits in the bitarray to `bool(value)`.\n\n\n`sort(reverse=False)`\n\nSort the bits in the array (in-place).\n\n\n`to01()` -> str\n\nReturn a string containing '0's and '1's, representing the bits in the\nbitarray object.\nNote: To extend a bitarray from a string containing '0's and '1's,\nuse the extend method.\n\n\n`tobytes()` -> bytes\n\nReturn the byte representation of the bitarray.\nWhen the length of the bitarray is not a multiple of 8, the few remaining\nbits (1..7) are considered to be 0.\n\n\n`tofile(f, /)`\n\nWrite all bits (as machine values) to the file object f.\nWhen the length of the bitarray is not a multiple of 8,\nthe remaining bits (1..7) are set to 0.\n\n\n`tolist()` -> list\n\nReturn an ordinary list with the items in the bitarray.\nNote that the list object being created will require 32 or 64 times more\nmemory than the bitarray object, which may cause a memory error if the\nbitarray is very large.\nAlso note that to extend a bitarray with elements from a list,\nuse the extend method.\n\n\n`tostring()` -> str\n\nReturn the string representing (machine values) of the bitarray.\nWhen the length of the bitarray is not a multiple of 8, the few remaining\nbits (1..7) are set to 0.\nDeprecated since version 0.4.0, use `.tobytes()` instead.\n\n\n`unpack(zero=b'\\x00', one=b'\\xff')` -> bytes\n\nReturn bytes containing one character for each bit in the bitarray,\nusing the specified mapping.\n\n\nThe frozenbitarray object:\n--------------------------\n\n`frozenbitarray(initial=0, /, endian='big')`\n\nReturn a frozenbitarray object, which is initialized the same way a bitarray\nobject is initialized.  A frozenbitarray is immutable and hashable.\nIts contents cannot be altered after is created; however, it can be used as\na dictionary key.\n\n\nFunctions defined in the module:\n--------------------------------\n\n`test(verbosity=1, repeat=1)` -> TextTestResult\n\nRun self-test, and return unittest.runner.TextTestResult object.\n\n\n`bitdiff(a, b, /)` -> int\n\nReturn the difference between two bitarrays a and b.\nThis is function does the same as (a ^ b).count(), but is more memory\nefficient, as no intermediate bitarray object gets created.\nDeprecated since version 1.2.0, use `bitarray.util.count_xor()` instead.\n\n\n`bits2bytes(n, /)` -> int\n\nReturn the number of bytes necessary to store n bits.\n\n\nFunctions defined in bitarray.util:\n-----------------------------------\n\n`zeros(length, /, endian='big')` -> bitarray\n\nCreate a bitarray of length, with all values 0.\n\n\n`rindex(bitarray, value=True, /)` -> int\n\nReturn the rightmost index of `bool(value)` in bitarray.\nRaises `ValueError` if the value is not present.\n\n\n`strip(bitarray, mode='right', /)` -> bitarray\n\nStrip zeros from left, right or both ends.\nAllowed values for mode are the strings: `left`, `right`, `both`\n\n\n`count_n(a, n, /)` -> int\n\nFind the smallest index `i` for which `a[:i].count() == n`.\nRaises `ValueError`, when n exceeds the `a.count()`.\n\n\n`count_and(a, b, /)` -> int\n\nReturns `(a & b).count()`, but is more memory efficient,\nas no intermediate bitarray object gets created.\n\n\n`count_or(a, b, /)` -> int\n\nReturns `(a | b).count()`, but is more memory efficient,\nas no intermediate bitarray object gets created.\n\n\n`count_xor(a, b, /)` -> int\n\nReturns `(a ^ b).count()`, but is more memory efficient,\nas no intermediate bitarray object gets created.\n\n\n`subset(a, b, /)` -> bool\n\nReturn True if bitarray `a` is a subset of bitarray `b` (False otherwise).\n`subset(a, b)` is equivalent to `(a & b).count() == a.count()` but is more\nefficient since we can stop as soon as one mismatch is found, and no\nintermediate bitarray object gets created.\n\n\n`ba2hex(bitarray, /)` -> hexstr\n\nReturn a bytes object containing with hexadecimal representation of\nthe bitarray (which has to be multiple of 4 in length).\n\n\n`hex2ba(hexstr, /)` -> bitarray\n\nBitarray of hexadecimal representation.\nhexstr may contain any number of hex digits (upper or lower case).\n\n\n`ba2int(bitarray, /)` -> int\n\nConvert the given bitarray into an integer.\nThe bit-endianness of the bitarray is respected.\n\n\n`int2ba(int, /, length=None, endian='big')` -> bitarray\n\nConvert the given integer into a bitarray (with given endianness,\nand no leading (big-endian) / trailing (little-endian) zeros).\nIf length is provided, the result will be of this length, and an\n`OverflowError` will be raised, if the integer cannot be represented\nwithin length bits.\n\n\n`huffman_code(dict, /, endian='big')` -> dict\n\nGiven a frequency map, a dictionary mapping symbols to thier frequency,\ncalculate the Huffman code, i.e. a dict mapping those symbols to\nbitarrays (with given endianness).  Note that the symbols may be any\nhashable object (including `None`).\n\n\nChange log\n----------\n\n*1.2.1* (2020-01-06):\n\n  * simplify markdown of readme so PyPI renders better\n  * make tests for bitarray.util required (instead of warning when\n    they cannot be imported)\n\n\n*1.2.0* (2019-12-06):\n\n  * add bitarray.util module which provides useful utility functions\n  * deprecate `bitarray.bitdiff` in favor of `bitarray.util.count_xor`\n  * use markdown for documentation\n  * fix bug in .count() on 32bit systems in special cases when array size\n    is 2^29 bits or larger\n  * simplified tests by using bytes syntax\n  * update smallints and sieve example to use new utility module\n  * simplified mandel example to use numba\n  * use file context managers in tests\n\n\n*1.1.0* (2019-11-07):\n\n  * add frozenbitarray object\n  * add optional start and stop parameters to .count() method\n  * add official Python 3.8 support\n  * optimize setrange() C-function by using memset\n  * fix issue #74, bitarray is hashable on Python 2\n  * fix issue #68, `unittest.TestCase.assert_` deprecated\n  * improved test suite - tests should run in about 1 second\n  * update documentation to use positional-only syntax in docstrings\n  * update readme to pass Python 3 doctest\n  * add utils module to examples\n\n\nPlease find the complete change log\n<a href=\"https://github.com/ilanschnell/bitarray/blob/master/CHANGE_LOG\">here</a>.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ilanschnell/bitarray", "keywords": "", "license": "PSF", "maintainer": "", "maintainer_email": "", "name": "bitarray", "package_url": "https://pypi.org/project/bitarray/", "platform": "", "project_url": "https://pypi.org/project/bitarray/", "project_urls": {"Homepage": "https://github.com/ilanschnell/bitarray"}, "release_url": "https://pypi.org/project/bitarray/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "efficient arrays of booleans -- C extension", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"bitarray-efficient-arrays-of-booleans\">\n<h2>bitarray: efficient arrays of booleans</h2>\n<p>This module provides an object type which efficiently represents an array\nof booleans.  Bitarrays are sequence types and behave very much like usual\nlists.  Eight bits are represented by one byte in a contiguous block of\nmemory.  The user can select between two representations: little-endian\nand big-endian.  All of the functionality is implemented in C.\nMethods for accessing the machine representation are provided.\nThis can be useful when bit level access to binary files is required,\nsuch as portable bitmap image files (.pbm).  Also, when dealing with\ncompressed data which uses variable bit length encoding, you may find\nthis module useful.</p>\n<div id=\"key-features\">\n<h3>Key features</h3>\n<blockquote>\n<ul>\n<li>All functionality implemented in C.</li>\n<li>Bitarray objects behave very much like a list object, in particular\nslicing (including slice assignment and deletion) is supported.</li>\n<li>The bit endianness can be specified for each bitarray object, see below.</li>\n<li>Packing and unpacking to other binary data formats, e.g. numpy.ndarray\nis possible.</li>\n<li>Fast methods for encoding and decoding variable bit length prefix codes</li>\n<li>Bitwise operations: <cite>&amp;</cite>, <cite>|</cite>, <cite>^</cite>, <cite>&amp;=</cite>, <cite>|=</cite>, <cite>^=</cite>, <cite>~</cite></li>\n<li>Sequential search</li>\n<li>Pickling and unpickling of bitarray objects.</li>\n<li>Bitarray objects support the buffer protocol (Python 2.7 and above)</li>\n<li>On 32-bit systems, a bitarray object can contain up to 2^34 elements,\nthat is 16 Gbits (on 64-bit machines up to 2^63 elements in theory).</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Bitarray can be installed from source:</p>\n<blockquote>\n$ tar xzf bitarray-1.2.1.tar.gz\n$ cd bitarray-1.2.1\n$ python setup.py install</blockquote>\n<p>On Unix systems, the latter command may have to be executed with root\nprivileges.  You can also pip install bitarray.\nOnce you have installed the package, you may want to test it:</p>\n<blockquote>\n<p>$ python -c \u2018import bitarray; bitarray.test()\u2019\nbitarray is installed in: /usr/local/lib/python2.7/site-packages/bitarray\nbitarray version: 1.2.1\n3.7.4 (r271:86832, Dec 29 2018) [GCC 4.2.1 (SUSE Linux)]\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014-\nRan 199 tests in 1.144s</p>\n<p>OK</p>\n</blockquote>\n<p>You can always import the function test,\nand <cite>test().wasSuccessful()</cite> will return <cite>True</cite> when the test went well.</p>\n</div>\n<div id=\"using-the-module\">\n<h3>Using the module</h3>\n<p>As mentioned above, bitarray objects behave very much like lists, so\nthere is not too much to learn.  The biggest difference from list objects\nis the ability to access the machine representation of the object.\nWhen doing so, the bit endianness is of importance; this issue is\nexplained in detail in the section below.  Here, we demonstrate the\nbasic usage of bitarray objects:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from bitarray import bitarray\n&gt;&gt;&gt; a = bitarray()            # create empty bitarray\n&gt;&gt;&gt; a.append(True)\n&gt;&gt;&gt; a.extend([False, True, True])\n&gt;&gt;&gt; a\nbitarray('1011')\n</pre>\n</blockquote>\n<p>Bitarray objects can be instantiated in different ways:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray(2**20)       # bitarray of length 1048576 (uninitialized)\n&gt;&gt;&gt; bitarray('1001011')       # from a string\nbitarray('1001011')\n&gt;&gt;&gt; lst = [True, False, False, True, False, True, True]\n&gt;&gt;&gt; bitarray(lst)             # from list, tuple, iterable\nbitarray('1001011')\n</pre>\n</blockquote>\n<p>Bits can be assigned from any Python object, if the value can be interpreted\nas a truth value.  You can think of this as Python\u2019s built-in function bool()\nbeing applied, whenever casting an object:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray([42, '', True, {}, 'foo', None])\n&gt;&gt;&gt; a\nbitarray('101010')\n&gt;&gt;&gt; a.append(a)      # note that bool(a) is True\n&gt;&gt;&gt; a.count(42)      # counts occurrences of True (not 42)\n4\n&gt;&gt;&gt; a.remove('')     # removes first occurrence of False\n&gt;&gt;&gt; a\nbitarray('110101')\n</pre>\n</blockquote>\n<p>Like lists, bitarray objects support slice assignment and deletion:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray(50)\n&gt;&gt;&gt; a.setall(False)\n&gt;&gt;&gt; a[11:37:3] = 9 * bitarray([True])\n&gt;&gt;&gt; a\nbitarray('00000000000100100100100100100100100100000000000000')\n&gt;&gt;&gt; del a[12::3]\n&gt;&gt;&gt; a\nbitarray('0000000000010101010101010101000000000')\n&gt;&gt;&gt; a[-6:] = bitarray('10011')\n&gt;&gt;&gt; a\nbitarray('000000000001010101010101010100010011')\n&gt;&gt;&gt; a += bitarray('000111')\n&gt;&gt;&gt; a[9:]\nbitarray('001010101010101010100010011000111')\n</pre>\n</blockquote>\n<p>In addition, slices can be assigned to booleans, which is easier (and\nfaster) than assigning to a bitarray in which all values are the same:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = 20 * bitarray('0')\n&gt;&gt;&gt; a[1:15:3] = True\n&gt;&gt;&gt; a\nbitarray('01001001001001000000')\n</pre>\n</blockquote>\n<p>This is easier and faster than:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = 20 * bitarray('0')\n&gt;&gt;&gt; a[1:15:3] = 5 * bitarray('1')\n&gt;&gt;&gt; a\nbitarray('01001001001001000000')\n</pre>\n</blockquote>\n<p>Note that in the latter we have to create a temporary bitarray whose length\nmust be known or calculated.</p>\n</div>\n<div id=\"bit-endianness\">\n<h3>Bit endianness</h3>\n<p>Since a bitarray allows addressing of individual bits, where the machine\nrepresents 8 bits in one byte, there are two obvious choices for this\nmapping: little- and big-endian.\nWhen creating a new bitarray object, the endianness can always be\nspecified explicitly:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray(endian='little')\n&gt;&gt;&gt; a.frombytes(b'A')\n&gt;&gt;&gt; a\nbitarray('10000010')\n&gt;&gt;&gt; b = bitarray('11000010', endian='little')\n&gt;&gt;&gt; b.tobytes()\nb'C'\n</pre>\n</blockquote>\n<p>Here, the low-bit comes first because little-endian means that increasing\nnumeric significance corresponds to an increasing address (index).\nSo a[0] is the lowest and least significant bit, and a[7] is the highest\nand most significant bit.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray(endian='big')\n&gt;&gt;&gt; a.frombytes(b'A')\n&gt;&gt;&gt; a\nbitarray('01000001')\n&gt;&gt;&gt; a[6] = 1\n&gt;&gt;&gt; a.tobytes()\nb'C'\n</pre>\n</blockquote>\n<p>Here, the high-bit comes first because big-endian\nmeans \u201cmost-significant first\u201d.\nSo a[0] is now the lowest and most significant bit, and a[7] is the highest\nand least significant bit.</p>\n<p>The bit endianness is a property attached to each bitarray object.\nWhen comparing bitarray objects, the endianness (and hence the machine\nrepresentation) is irrelevant; what matters is the mapping from indices\nto bits:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; bitarray('11001', endian='big') == bitarray('11001', endian='little')\nTrue\n</pre>\n</blockquote>\n<p>Bitwise operations (<cite>&amp;</cite>, <cite>|</cite>, <cite>^</cite>, <cite>&amp;=</cite>, <cite>|=</cite>, <cite>^=</cite>, <cite>~</cite>) are implemented\nefficiently using the corresponding byte operations in C, i.e. the operators\nact on the machine representation of the bitarray objects.\nTherefore, one has to be cautious when applying the operation to bitarrays\nwith different endianness.</p>\n<p>When converting to and from machine representation, using\nthe <cite>tobytes</cite>, <cite>frombytes</cite>, <cite>tofile</cite> and <cite>fromfile</cite> methods,\nthe endianness matters:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray(endian='little')\n&gt;&gt;&gt; a.frombytes(b'\\x01')\n&gt;&gt;&gt; a\nbitarray('10000000')\n&gt;&gt;&gt; b = bitarray(endian='big')\n&gt;&gt;&gt; b.frombytes(b'\\x80')\n&gt;&gt;&gt; b\nbitarray('10000000')\n&gt;&gt;&gt; a == b\nTrue\n&gt;&gt;&gt; a.tobytes() == b.tobytes()\nFalse\n</pre>\n</blockquote>\n<p>The endianness can not be changed once an object is created.\nHowever, since creating a bitarray from another bitarray just copies the\nmemory representing the data, you can create a new bitarray with different\nendianness:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray('11100000', endian='little')\n&gt;&gt;&gt; a\nbitarray('11100000')\n&gt;&gt;&gt; b = bitarray(a, endian='big')\n&gt;&gt;&gt; b\nbitarray('00000111')\n&gt;&gt;&gt; a == b\nFalse\n&gt;&gt;&gt; a.tobytes() == b.tobytes()\nTrue\n</pre>\n</blockquote>\n<p>The default bit endianness is currently big-endian, however this may change\nin the future, and when dealing with the machine representation of bitarray\nobjects, it is recommended to always explicitly specify the endianness.</p>\n<p>Unless explicitly converting to machine representation, using\nthe <cite>tobytes</cite>, <cite>frombytes</cite>, <cite>tofile</cite> and <cite>fromfile</cite> methods,\nthe bit endianness will have no effect on any computation, and one\ncan safely ignore setting the endianness, and other details of this section.</p>\n</div>\n<div id=\"buffer-protocol\">\n<h3>Buffer protocol</h3>\n<p>Python 2.7 provides memoryview objects, which allow Python code to access\nthe internal data of an object that supports the buffer protocol without\ncopying.  Bitarray objects support this protocol, with the memory being\ninterpreted as simple bytes.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a = bitarray('01000001' '01000010' '01000011', endian='big')\n&gt;&gt;&gt; v = memoryview(a)\n&gt;&gt;&gt; len(v)\n3\n&gt;&gt;&gt; v[-1]\n67\n&gt;&gt;&gt; v[:2].tobytes()\nb'AB'\n&gt;&gt;&gt; v.readonly  # changing a bitarray's memory is also possible\nFalse\n&gt;&gt;&gt; v[1] = 111\n&gt;&gt;&gt; a\nbitarray('010000010110111101000011')\n</pre>\n</blockquote>\n</div>\n<div id=\"variable-bit-length-prefix-codes\">\n<h3>Variable bit length prefix codes</h3>\n<p>The method <cite>encode</cite> takes a dictionary mapping symbols to bitarrays\nand an iterable, and extends the bitarray object with the encoded symbols\nfound while iterating.  For example:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; d = {'H':bitarray('111'), 'e':bitarray('0'),\n...      'l':bitarray('110'), 'o':bitarray('10')}\n...\n&gt;&gt;&gt; a = bitarray()\n&gt;&gt;&gt; a.encode(d, 'Hello')\n&gt;&gt;&gt; a\nbitarray('111011011010')\n</pre>\n</blockquote>\n<p>Note that the string <cite>\u2018Hello\u2019</cite> is an iterable, but the symbols are not\nlimited to characters, in fact any immutable Python object can be a symbol.\nTaking the same dictionary, we can apply the <cite>decode</cite> method which will\nreturn a list of the symbols:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; a.decode(d)\n['H', 'e', 'l', 'l', 'o']\n&gt;&gt;&gt; ''.join(a.decode(d))\n'Hello'\n</pre>\n</blockquote>\n<p>Since symbols are not limited to being characters, it is necessary to return\nthem as elements of a list, rather than simply returning the joined string.</p>\n</div>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<div id=\"the-bitarray-object\">\n<h3>The bitarray object:</h3>\n<p><cite>bitarray(initial=0, /, endian=\u2019big\u2019)</cite></p>\n<p>Return a new bitarray object whose items are bits initialized from\nthe optional initial object, and endianness.\nIf no initial object is provided, an empty bitarray (length zero) is created.\nThe initial object may be of the following types:</p>\n<p><cite>int</cite>: Create a bitarray of given integer length.  The initial values are\narbitrary.  If you want all values to be set, use the .setall() method.</p>\n<p><cite>str</cite>: Create bitarray from a string of <cite>0</cite> and <cite>1</cite>.</p>\n<p><cite>list</cite>, <cite>tuple</cite>, <cite>iterable</cite>: Create bitarray from a sequence, each\nelement in the sequence is converted to a bit using its truth value.</p>\n<p><cite>bitarray</cite>: Create bitarray from another bitarray.  This is done by\ncopying the memory holding the bitarray data, and is hence very fast.</p>\n<p>The optional keyword arguments <cite>endian</cite> specifies the bit endianness of the\ncreated bitarray object.\nAllowed values are the strings <cite>big</cite> and <cite>little</cite> (default is <cite>big</cite>).</p>\n<p>Note that setting the bit endianness only has an effect when accessing the\nmachine representation of the bitarray, i.e. when using the methods: tofile,\nfromfile, tobytes, frombytes.</p>\n<p><strong>A bitarray object supports the following methods:</strong></p>\n<p><cite>all()</cite> -&gt; bool</p>\n<p>Returns True when all bits in the array are True.</p>\n<p><cite>any()</cite> -&gt; bool</p>\n<p>Returns True when any bit in the array is True.</p>\n<p><cite>append(item, /)</cite></p>\n<p>Append the value <cite>bool(item)</cite> to the end of the bitarray.</p>\n<p><cite>buffer_info()</cite> -&gt; tuple</p>\n<p>Return a tuple (address, size, endianness, unused, allocated) giving the\ncurrent memory address, the size (in bytes) used to hold the bitarray\u2019s\ncontents, the bit endianness as a string, the number of unused bits\n(e.g. a bitarray of length 11 will have a buffer size of 2 bytes and\n5 unused bits), and the size (in bytes) of the allocated memory.</p>\n<p><cite>bytereverse()</cite></p>\n<p>For all bytes representing the bitarray, reverse the bit order (in-place).\nNote: This method changes the actual machine values representing the\nbitarray; it does not change the endianness of the bitarray object.</p>\n<p><cite>copy()</cite> -&gt; bitarray</p>\n<p>Return a copy of the bitarray.</p>\n<p><cite>count(value=True, start=0, stop=&lt;end of array&gt;, /)</cite> -&gt; int</p>\n<p>Count the number of occurrences of bool(value) in the bitarray.</p>\n<p><cite>decode(code, /)</cite> -&gt; list</p>\n<p>Given a prefix code (a dict mapping symbols to bitarrays),\ndecode the content of the bitarray and return it as a list of symbols.</p>\n<p><cite>encode(code, iterable, /)</cite></p>\n<p>Given a prefix code (a dict mapping symbols to bitarrays),\niterate over the iterable object with symbols, and extend the bitarray\nwith the corresponding bitarray for each symbols.</p>\n<p><cite>endian()</cite> -&gt; str</p>\n<p>Return the bit endianness as a string (either <cite>little</cite> or <cite>big</cite>).</p>\n<p><cite>extend(iterable, /)</cite></p>\n<p>Append bits to the end of the bitarray.  The objects which can be passed\nto this method are the same iterable objects which can given to a bitarray\nobject upon initialization.</p>\n<p><cite>fill()</cite> -&gt; int</p>\n<p>Adds zeros to the end of the bitarray, such that the length of the bitarray\nwill be a multiple of 8.  Returns the number of bits added (0..7).</p>\n<p><cite>frombytes(bytes, /)</cite></p>\n<p>Append from a byte string, interpreted as machine values.</p>\n<p><cite>fromfile(f, n=&lt;till EOF&gt;, /)</cite></p>\n<p>Read n bytes from the file object f and append them to the bitarray\ninterpreted as machine values.  When n is omitted, as many bytes are\nread until EOF is reached.</p>\n<p><cite>fromstring(str)</cite></p>\n<p>Append from a string, interpreting the string as machine values.\nDeprecated since version 0.4.0, use <cite>.frombytes()</cite> instead.</p>\n<p><cite>index(value, start=0, stop=&lt;end of array&gt;, /)</cite> -&gt; int</p>\n<p>Return index of the first occurrence of <cite>bool(value)</cite> in the bitarray.\nRaises <cite>ValueError</cite> if the value is not present.</p>\n<p><cite>insert(index, value, /)</cite></p>\n<p>Insert <cite>bool(value)</cite> into the bitarray before index.</p>\n<p><cite>invert()</cite></p>\n<p>Invert all bits in the array (in-place),\ni.e. convert each 1-bit into a 0-bit and vice versa.</p>\n<p><cite>iterdecode(code, /)</cite> -&gt; iterator</p>\n<p>Given a prefix code (a dict mapping symbols to bitarrays),\ndecode the content of the bitarray and return an iterator over\nthe symbols.</p>\n<p><cite>itersearch(bitarray, /)</cite> -&gt; iterator</p>\n<p>Searches for the given a bitarray in self, and return an iterator over\nthe start positions where bitarray matches self.</p>\n<p><cite>length()</cite> -&gt; int</p>\n<p>Return the length, i.e. number of bits stored in the bitarray.\nThis method is preferred over <cite>__len__</cite> (used when typing <cite>len(a)</cite>),\nsince <cite>__len__</cite> will fail for a bitarray object with 2^31 or more elements\non a 32bit machine, whereas this method will return the correct value,\non 32bit and 64bit machines.</p>\n<p><cite>pack(bytes, /)</cite></p>\n<p>Extend the bitarray from bytes, where each byte corresponds to a single\nbit.  The byte <cite>b\u2019x00\u2019</cite> maps to bit 0 and all other characters map to\nbit 1.\nThis method, as well as the unpack method, are meant for efficient\ntransfer of data between bitarray objects to other python objects\n(for example NumPy\u2019s ndarray object) which have a different memory view.</p>\n<p><cite>pop(index=-1, /)</cite> -&gt; item</p>\n<p>Return the i-th (default last) element and delete it from the bitarray.\nRaises <cite>IndexError</cite> if bitarray is empty or index is out of range.</p>\n<p><cite>remove(value, /)</cite></p>\n<p>Remove the first occurrence of <cite>bool(value)</cite> in the bitarray.\nRaises <cite>ValueError</cite> if item is not present.</p>\n<p><cite>reverse()</cite></p>\n<p>Reverse the order of bits in the array (in-place).</p>\n<p><cite>search(bitarray, limit=&lt;none&gt;, /)</cite> -&gt; list</p>\n<p>Searches for the given bitarray in self, and return the list of start\npositions.\nThe optional argument limits the number of search results to the integer\nspecified.  By default, all search results are returned.</p>\n<p><cite>setall(value, /)</cite></p>\n<p>Set all bits in the bitarray to <cite>bool(value)</cite>.</p>\n<p><cite>sort(reverse=False)</cite></p>\n<p>Sort the bits in the array (in-place).</p>\n<p><cite>to01()</cite> -&gt; str</p>\n<p>Return a string containing \u20180\u2019s and \u20181\u2019s, representing the bits in the\nbitarray object.\nNote: To extend a bitarray from a string containing \u20180\u2019s and \u20181\u2019s,\nuse the extend method.</p>\n<p><cite>tobytes()</cite> -&gt; bytes</p>\n<p>Return the byte representation of the bitarray.\nWhen the length of the bitarray is not a multiple of 8, the few remaining\nbits (1..7) are considered to be 0.</p>\n<p><cite>tofile(f, /)</cite></p>\n<p>Write all bits (as machine values) to the file object f.\nWhen the length of the bitarray is not a multiple of 8,\nthe remaining bits (1..7) are set to 0.</p>\n<p><cite>tolist()</cite> -&gt; list</p>\n<p>Return an ordinary list with the items in the bitarray.\nNote that the list object being created will require 32 or 64 times more\nmemory than the bitarray object, which may cause a memory error if the\nbitarray is very large.\nAlso note that to extend a bitarray with elements from a list,\nuse the extend method.</p>\n<p><cite>tostring()</cite> -&gt; str</p>\n<p>Return the string representing (machine values) of the bitarray.\nWhen the length of the bitarray is not a multiple of 8, the few remaining\nbits (1..7) are set to 0.\nDeprecated since version 0.4.0, use <cite>.tobytes()</cite> instead.</p>\n<p><cite>unpack(zero=b\u2019x00\u2019, one=b\u2019xff\u2019)</cite> -&gt; bytes</p>\n<p>Return bytes containing one character for each bit in the bitarray,\nusing the specified mapping.</p>\n</div>\n<div id=\"the-frozenbitarray-object\">\n<h3>The frozenbitarray object:</h3>\n<p><cite>frozenbitarray(initial=0, /, endian=\u2019big\u2019)</cite></p>\n<p>Return a frozenbitarray object, which is initialized the same way a bitarray\nobject is initialized.  A frozenbitarray is immutable and hashable.\nIts contents cannot be altered after is created; however, it can be used as\na dictionary key.</p>\n</div>\n<div id=\"functions-defined-in-the-module\">\n<h3>Functions defined in the module:</h3>\n<p><cite>test(verbosity=1, repeat=1)</cite> -&gt; TextTestResult</p>\n<p>Run self-test, and return unittest.runner.TextTestResult object.</p>\n<p><cite>bitdiff(a, b, /)</cite> -&gt; int</p>\n<p>Return the difference between two bitarrays a and b.\nThis is function does the same as (a ^ b).count(), but is more memory\nefficient, as no intermediate bitarray object gets created.\nDeprecated since version 1.2.0, use <cite>bitarray.util.count_xor()</cite> instead.</p>\n<p><cite>bits2bytes(n, /)</cite> -&gt; int</p>\n<p>Return the number of bytes necessary to store n bits.</p>\n</div>\n<div id=\"functions-defined-in-bitarray-util\">\n<h3>Functions defined in bitarray.util:</h3>\n<p><cite>zeros(length, /, endian=\u2019big\u2019)</cite> -&gt; bitarray</p>\n<p>Create a bitarray of length, with all values 0.</p>\n<p><cite>rindex(bitarray, value=True, /)</cite> -&gt; int</p>\n<p>Return the rightmost index of <cite>bool(value)</cite> in bitarray.\nRaises <cite>ValueError</cite> if the value is not present.</p>\n<p><cite>strip(bitarray, mode=\u2019right\u2019, /)</cite> -&gt; bitarray</p>\n<p>Strip zeros from left, right or both ends.\nAllowed values for mode are the strings: <cite>left</cite>, <cite>right</cite>, <cite>both</cite></p>\n<p><cite>count_n(a, n, /)</cite> -&gt; int</p>\n<p>Find the smallest index <cite>i</cite> for which <cite>a[:i].count() == n</cite>.\nRaises <cite>ValueError</cite>, when n exceeds the <cite>a.count()</cite>.</p>\n<p><cite>count_and(a, b, /)</cite> -&gt; int</p>\n<p>Returns <cite>(a &amp; b).count()</cite>, but is more memory efficient,\nas no intermediate bitarray object gets created.</p>\n<p><cite>count_or(a, b, /)</cite> -&gt; int</p>\n<p>Returns <cite>(a | b).count()</cite>, but is more memory efficient,\nas no intermediate bitarray object gets created.</p>\n<p><cite>count_xor(a, b, /)</cite> -&gt; int</p>\n<p>Returns <cite>(a ^ b).count()</cite>, but is more memory efficient,\nas no intermediate bitarray object gets created.</p>\n<p><cite>subset(a, b, /)</cite> -&gt; bool</p>\n<p>Return True if bitarray <cite>a</cite> is a subset of bitarray <cite>b</cite> (False otherwise).\n<cite>subset(a, b)</cite> is equivalent to <cite>(a &amp; b).count() == a.count()</cite> but is more\nefficient since we can stop as soon as one mismatch is found, and no\nintermediate bitarray object gets created.</p>\n<p><cite>ba2hex(bitarray, /)</cite> -&gt; hexstr</p>\n<p>Return a bytes object containing with hexadecimal representation of\nthe bitarray (which has to be multiple of 4 in length).</p>\n<p><cite>hex2ba(hexstr, /)</cite> -&gt; bitarray</p>\n<p>Bitarray of hexadecimal representation.\nhexstr may contain any number of hex digits (upper or lower case).</p>\n<p><cite>ba2int(bitarray, /)</cite> -&gt; int</p>\n<p>Convert the given bitarray into an integer.\nThe bit-endianness of the bitarray is respected.</p>\n<p><cite>int2ba(int, /, length=None, endian=\u2019big\u2019)</cite> -&gt; bitarray</p>\n<p>Convert the given integer into a bitarray (with given endianness,\nand no leading (big-endian) / trailing (little-endian) zeros).\nIf length is provided, the result will be of this length, and an\n<cite>OverflowError</cite> will be raised, if the integer cannot be represented\nwithin length bits.</p>\n<p><cite>huffman_code(dict, /, endian=\u2019big\u2019)</cite> -&gt; dict</p>\n<p>Given a frequency map, a dictionary mapping symbols to thier frequency,\ncalculate the Huffman code, i.e. a dict mapping those symbols to\nbitarrays (with given endianness).  Note that the symbols may be any\nhashable object (including <cite>None</cite>).</p>\n</div>\n<div id=\"change-log\">\n<h3>Change log</h3>\n<p><em>1.2.1</em> (2020-01-06):</p>\n<blockquote>\n<ul>\n<li>simplify markdown of readme so PyPI renders better</li>\n<li>make tests for bitarray.util required (instead of warning when\nthey cannot be imported)</li>\n</ul>\n</blockquote>\n<p><em>1.2.0</em> (2019-12-06):</p>\n<blockquote>\n<ul>\n<li>add bitarray.util module which provides useful utility functions</li>\n<li>deprecate <cite>bitarray.bitdiff</cite> in favor of <cite>bitarray.util.count_xor</cite></li>\n<li>use markdown for documentation</li>\n<li>fix bug in .count() on 32bit systems in special cases when array size\nis 2^29 bits or larger</li>\n<li>simplified tests by using bytes syntax</li>\n<li>update smallints and sieve example to use new utility module</li>\n<li>simplified mandel example to use numba</li>\n<li>use file context managers in tests</li>\n</ul>\n</blockquote>\n<p><em>1.1.0</em> (2019-11-07):</p>\n<blockquote>\n<ul>\n<li>add frozenbitarray object</li>\n<li>add optional start and stop parameters to .count() method</li>\n<li>add official Python 3.8 support</li>\n<li>optimize setrange() C-function by using memset</li>\n<li>fix issue #74, bitarray is hashable on Python 2</li>\n<li>fix issue #68, <cite>unittest.TestCase.assert_</cite> deprecated</li>\n<li>improved test suite - tests should run in about 1 second</li>\n<li>update documentation to use positional-only syntax in docstrings</li>\n<li>update readme to pass Python 3 doctest</li>\n<li>add utils module to examples</li>\n</ul>\n</blockquote>\n<p>Please find the complete change log\n&lt;a href=\u201d<a href=\"https://github.com/ilanschnell/bitarray/blob/master/CHANGE_LOG\" rel=\"nofollow\">https://github.com/ilanschnell/bitarray/blob/master/CHANGE_LOG</a>\u201d&gt;here&lt;/a&gt;.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6404167, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e0e01765d15963531324a1b81b3796bc", "sha256": "65a99398fb160022caf72ee4424e118d4a55b64b3313a05bc233fb25b10a4f08"}, "downloads": -1, "filename": "bitarray-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e0e01765d15963531324a1b81b3796bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14349, "upload_time": "2008-08-17T21:48:44", "upload_time_iso_8601": "2008-08-17T21:48:44Z", "url": "https://files.pythonhosted.org/packages/55/5c/a0883a2b6ccf209aa444e95ac30a520be4b0b31bc47fcd96a636d9489514/bitarray-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "bb904c5bbb0566c674798a62c616f367", "sha256": "d744b718e38aeea6ccfaae034ea18258a4b92d9c38739e496ec603b5b827fe0f"}, "downloads": -1, "filename": "bitarray-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bb904c5bbb0566c674798a62c616f367", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30209, "upload_time": "2008-09-02T14:09:41", "upload_time_iso_8601": "2008-09-02T14:09:41Z", "url": "https://files.pythonhosted.org/packages/a7/e4/3c45234533ba512c77d9208776aba25f1fdc4450112e254a47a35050e4f3/bitarray-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4197a52621bdea43cd8b028cf0e59917", "sha256": "cc6f8e4f03a6bb488ba1874571d2ddfb8699a3590b5b00abbddefc5f1745697d"}, "downloads": -1, "filename": "bitarray-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4197a52621bdea43cd8b028cf0e59917", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33387, "upload_time": "2008-09-08T04:42:09", "upload_time_iso_8601": "2008-09-08T04:42:09Z", "url": "https://files.pythonhosted.org/packages/24/96/15206fa1cc9bb511b9226ae213cdd572c3feb39fdad99aa0ec0c1ccd6a41/bitarray-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d03d9f1e6bdc99161a1dbc004f8ed93b", "sha256": "161038f0b8db32d68dbd6a185b81c6355025e954cdeb108186af272fe49f571e"}, "downloads": -1, "filename": "bitarray-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d03d9f1e6bdc99161a1dbc004f8ed93b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33950, "upload_time": "2008-09-10T03:04:39", "upload_time_iso_8601": "2008-09-10T03:04:39Z", "url": "https://files.pythonhosted.org/packages/4b/e8/a28d08c226df752181025b2f5af380ca7c023ede8021f8777f39c2bf5052/bitarray-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ba762db8fc4a9656260afa531e145f14", "sha256": "f0a16a2493483f948ee372caf017698389c08647e5dfff2c8e02767a752056eb"}, "downloads": -1, "filename": "bitarray-0.2.3.tar.gz", "has_sig": false, "md5_digest": "ba762db8fc4a9656260afa531e145f14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39163, "upload_time": "2008-09-17T01:55:52", "upload_time_iso_8601": "2008-09-17T01:55:52Z", "url": "https://files.pythonhosted.org/packages/08/81/96aac89e78bc2109572029330008d215bbbe4faadddd33676f8ea7dd853f/bitarray-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "c352badd1bcf8c50145c8cac89b5c33d", "sha256": "3d3f41b197ba6a7ca45a08f39dc0d3b93e43a706c88a929846a4f98e3a92dc27"}, "downloads": -1, "filename": "bitarray-0.2.4.tar.gz", "has_sig": false, "md5_digest": "c352badd1bcf8c50145c8cac89b5c33d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39262, "upload_time": "2008-09-22T05:12:09", "upload_time_iso_8601": "2008-09-22T05:12:09Z", "url": "https://files.pythonhosted.org/packages/70/c1/78f3e109c81f9605c168d1378fd45376087ea2da4f5f2777a2444347991c/bitarray-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "3bb5555530365c46a160469aa330e5ad", "sha256": "ac7f89438eff0cf70d4d96f0ae1e4e7cb28d54c5fd125ee185c0b6a86459169d"}, "downloads": -1, "filename": "bitarray-0.2.5.tar.gz", "has_sig": false, "md5_digest": "3bb5555530365c46a160469aa330e5ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40921, "upload_time": "2008-09-23T15:06:08", "upload_time_iso_8601": "2008-09-23T15:06:08Z", "url": "https://files.pythonhosted.org/packages/ff/80/bd4295babc33a84ee0b05b09ee3dcee66631ab0a66566a129a59b24bcaa8/bitarray-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7b8b73479337416648799dfdf25a2201", "sha256": "bbfd83f186834fffd76178cde3e771da24e5f98bf0db51ed5949dd5c68db0ad3"}, "downloads": -1, "filename": "bitarray-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7b8b73479337416648799dfdf25a2201", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40485, "upload_time": "2008-10-01T01:19:23", "upload_time_iso_8601": "2008-10-01T01:19:23Z", "url": "https://files.pythonhosted.org/packages/ca/e6/abbfc26432de5f39ae5d496c79bfb9ed5231dd262ef65a61f38cf9b6dc74/bitarray-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "03a2660c997fbe95cb49be8e760aec52", "sha256": "e5ee079f81f9739a08ea967be333db7a7d99a1c2f142a6295850c2fcc19fb62b"}, "downloads": -1, "filename": "bitarray-0.3.1.tar.gz", "has_sig": false, "md5_digest": "03a2660c997fbe95cb49be8e760aec52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40686, "upload_time": "2008-10-12T06:21:50", "upload_time_iso_8601": "2008-10-12T06:21:50Z", "url": "https://files.pythonhosted.org/packages/79/08/fd03483af50e9dda39f89d7f278aaf4285f022c7981efe45f29ba344d667/bitarray-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "e3de642f8121cea8b98801b311c0d0cd", "sha256": "6ff58d5dfd3e5b64eea2a3670de26e4be7327c8753a6523c8a80de369a640c21"}, "downloads": -1, "filename": "bitarray-0.3.2.tar.gz", "has_sig": false, "md5_digest": "e3de642f8121cea8b98801b311c0d0cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41660, "upload_time": "2008-10-20T02:41:07", "upload_time_iso_8601": "2008-10-20T02:41:07Z", "url": "https://files.pythonhosted.org/packages/1c/fd/58ce26ca429a9187f755912553ffaea472531297086cd5edbc5e04231ef5/bitarray-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b745560982b4eb35c0c9ac6a2eab2d05", "sha256": "565e3fa1242b99795c201e2adc44643cd6c8d36a2eac13bf4afa466204cf68d3"}, "downloads": -1, "filename": "bitarray-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b745560982b4eb35c0c9ac6a2eab2d05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38211, "upload_time": "2008-12-14T05:38:06", "upload_time_iso_8601": "2008-12-14T05:38:06Z", "url": "https://files.pythonhosted.org/packages/b6/72/7956cfbd7efe940cafae9b0eb479b8f665322a371ea0380661f022b17191/bitarray-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "7ec37ca4b8bd3713ebe9d337484585a8", "sha256": "7fb334c763f30b2da159662a7d72723a77ffe7d9fbd8be10aa8ba6fe39e59a63"}, "downloads": -1, "filename": "bitarray-0.3.4-py2.5-win32.egg", "has_sig": false, "md5_digest": "7ec37ca4b8bd3713ebe9d337484585a8", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 53027, "upload_time": "2009-01-15T20:22:15", "upload_time_iso_8601": "2009-01-15T20:22:15Z", "url": "https://files.pythonhosted.org/packages/24/95/ee2f52edbb6af377f9f119e436fede506c95649f541b7e5b3cf2cbc05549/bitarray-0.3.4-py2.5-win32.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b49a3b50c82d5adfde6e75f6e917ee0", "sha256": "d8e5e0aa8603d63b454ab3c8e25e6311bb27ca8bf469e03b420730fb26437dbc"}, "downloads": -1, "filename": "bitarray-0.3.4.tar.gz", "has_sig": false, "md5_digest": "6b49a3b50c82d5adfde6e75f6e917ee0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38338, "upload_time": "2009-01-15T04:38:24", "upload_time_iso_8601": "2009-01-15T04:38:24Z", "url": "https://files.pythonhosted.org/packages/2a/81/f2acf88511e99f658e1d55fd1a7a3ec2c958e0be2f5fe43aa17c4c9779b4/bitarray-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "666188abdf378ee48a37438aaab29552", "sha256": "410dad6f5113c67fed2a5013f37c27982b6ed0ed0a35a8065b2b3b14689b3590"}, "downloads": -1, "filename": "bitarray-0.3.5-py2.5-win32.egg", "has_sig": false, "md5_digest": "666188abdf378ee48a37438aaab29552", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 54079, "upload_time": "2009-04-07T03:17:41", "upload_time_iso_8601": "2009-04-07T03:17:41.379903Z", "url": "https://files.pythonhosted.org/packages/7d/bd/ca44472ffaa0376cd2b202a86afa99cbc37ef237650f1046c15a98c0ee56/bitarray-0.3.5-py2.5-win32.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c4b178699532c29fde5d655b96611ba9", "sha256": "c5877b0e46768219e08ed3de887a5fa9c18c321dda99e3da738c157c36946dcf"}, "downloads": -1, "filename": "bitarray-0.3.5-py2.6-win32.egg", "has_sig": false, "md5_digest": "c4b178699532c29fde5d655b96611ba9", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 55371, "upload_time": "2010-01-15T18:31:51", "upload_time_iso_8601": "2010-01-15T18:31:51.451162Z", "url": "https://files.pythonhosted.org/packages/fe/5d/7825208e85f1a38a36a771c7728fe1557e2d44955a9240bb1b68b7cae713/bitarray-0.3.5-py2.6-win32.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f9bf863634ca89c31025279618fc49a", "sha256": "9da9ff492e54cf246145a2bd8198b90db5006593394d2d44cecaae3cbfd57fad"}, "downloads": -1, "filename": "bitarray-0.3.5-py2.6-win-amd64.egg", "has_sig": false, "md5_digest": "1f9bf863634ca89c31025279618fc49a", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 55198, "upload_time": "2010-01-15T18:32:22", "upload_time_iso_8601": "2010-01-15T18:32:22.453671Z", "url": "https://files.pythonhosted.org/packages/8e/e2/efb965875b2383031419fee889ecbf3d9299000a14ff39a40ed0cebe872d/bitarray-0.3.5-py2.6-win-amd64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ed0da96a6b926d07c7181ec5d767b38", "sha256": "3a5eb92dbb0e09589f3129544b1a9036f2b36ddcdee3fabca5d1094dfd3f2b10"}, "downloads": -1, "filename": "bitarray-0.3.5-py2.7-win32.egg", "has_sig": false, "md5_digest": "8ed0da96a6b926d07c7181ec5d767b38", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 55232, "upload_time": "2011-02-24T19:17:17", "upload_time_iso_8601": "2011-02-24T19:17:17.318687Z", "url": "https://files.pythonhosted.org/packages/f5/d9/87f3cfea82a5a7cdf82bda6e9a31a6bda2b37c18e8b98a7641b81fdbc824/bitarray-0.3.5-py2.7-win32.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ad446f81b3bbc6ae9b07e5ee3b9a477", "sha256": "5f962ff2651b01a815cc67ccb8af50a0181f1248cdc52be2d68d601e3af3ecaf"}, "downloads": -1, "filename": "bitarray-0.3.5-py2.7-win-amd64.egg", "has_sig": false, "md5_digest": "6ad446f81b3bbc6ae9b07e5ee3b9a477", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 55045, "upload_time": "2011-02-24T19:16:36", "upload_time_iso_8601": "2011-02-24T19:16:36.742200Z", "url": "https://files.pythonhosted.org/packages/74/d0/d239ca9ccc6c1e744d5718826117b8741240c32113bdbb5b559478ffda6f/bitarray-0.3.5-py2.7-win-amd64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "322a25e04e7aece5e028e5b068329291", "sha256": "cebf82b533dc7ffdd1b8b669633e754e2e1a00016bf27865fdd3ea6ca28aaf51"}, "downloads": -1, "filename": "bitarray-0.3.5.tar.gz", "has_sig": false, "md5_digest": "322a25e04e7aece5e028e5b068329291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42009, "upload_time": "2009-04-07T03:06:57", "upload_time_iso_8601": "2009-04-07T03:06:57.248756Z", "url": "https://files.pythonhosted.org/packages/cd/bd/a0004437d0baff149c2f5a86ead23aa7e4a67413de40f7286e8cd85266af/bitarray-0.3.5.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3a9995865cf4c835abf40ff3c5237bde", "sha256": "23a03dffdb3e5c7cd5990652ec5a0b4497f43140dbad87bfcf3a75d6ed875341"}, "downloads": -1, "filename": "bitarray-0.4.0.tar.gz", "has_sig": false, "md5_digest": "3a9995865cf4c835abf40ff3c5237bde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39064, "upload_time": "2011-12-30T02:44:30", "upload_time_iso_8601": "2011-12-30T02:44:30.959574Z", "url": "https://files.pythonhosted.org/packages/35/5a/d16058c255be8df3bdf91be825fdf690cb65204c43a5410703316db09de3/bitarray-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "19e49ef6d2e74d14dc78bd1ff54b12d9", "sha256": "210a4e6f55c2ecaaa4b0352771fdc6aab35711e47921021a12632913ccbd06f8"}, "downloads": -1, "filename": "bitarray-0.5.0.tar.gz", "has_sig": false, "md5_digest": "19e49ef6d2e74d14dc78bd1ff54b12d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40826, "upload_time": "2012-01-23T20:11:40", "upload_time_iso_8601": "2012-01-23T20:11:40.322886Z", "url": "https://files.pythonhosted.org/packages/9e/b3/ae0531d7b0b1ab9b54a87fe06d8856a70669a3cdba2c410153e2ae73be71/bitarray-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "bed26368db217cde6ff8ef162401309a", "sha256": "b607cca3e4059f80987d957f3cf3996c7ecd178dd851308d0227f795c2966037"}, "downloads": -1, "filename": "bitarray-0.5.1.tar.gz", "has_sig": false, "md5_digest": "bed26368db217cde6ff8ef162401309a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40057, "upload_time": "2012-02-01T03:24:49", "upload_time_iso_8601": "2012-02-01T03:24:49.315352Z", "url": "https://files.pythonhosted.org/packages/4a/22/437ae17e117bb40bdd3f4e3df1eceb390370a24e53816180c48171428144/bitarray-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "057680ef69992bf134d6d6c194609da9", "sha256": "51f01b8b2b8c9f9e0378b0b973f49b351a62d027eff9c0802b7656856d88555a"}, "downloads": -1, "filename": "bitarray-0.5.2.tar.gz", "has_sig": false, "md5_digest": "057680ef69992bf134d6d6c194609da9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41694, "upload_time": "2012-02-03T02:42:12", "upload_time_iso_8601": "2012-02-03T02:42:12.266035Z", "url": "https://files.pythonhosted.org/packages/b6/bb/9bb030285dcd890002df9a472276208236aec3ec4f35dbeee70b9a3ec930/bitarray-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2cd86472146fe2f49bffe10ff1845f5d", "sha256": "b6d4c45add021811388882d792c781b3cd886633355813c0c02b057617b4c8d1"}, "downloads": -1, "filename": "bitarray-0.6.0.tar.gz", "has_sig": false, "md5_digest": "2cd86472146fe2f49bffe10ff1845f5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44515, "upload_time": "2012-02-07T04:01:45", "upload_time_iso_8601": "2012-02-07T04:01:45.123899Z", "url": "https://files.pythonhosted.org/packages/71/6f/07234a7d5c181793fdaef174b8f4587fb22769de30d5e8ecdbe9e1a8a567/bitarray-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "e05c4aaf5df32a0d7c040c0c69311edc", "sha256": "d6f7caa14f678a52467da361b56e6ea9ff888d1b48c69367468c2f7361ad0239"}, "downloads": -1, "filename": "bitarray-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e05c4aaf5df32a0d7c040c0c69311edc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45675, "upload_time": "2012-02-16T02:14:24", "upload_time_iso_8601": "2012-02-16T02:14:24.661245Z", "url": "https://files.pythonhosted.org/packages/8e/16/93ed475097ef4fbf85be9c00b4779320959da75a794ed3bcd9ef94f910e9/bitarray-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "a1e80e63aec650721826d385b017201b", "sha256": "203426d96bf43adc5220a2f66a3c18fedcf009ce98de419a8a580ec7695424d1"}, "downloads": -1, "filename": "bitarray-0.8.0.tar.gz", "has_sig": false, "md5_digest": "a1e80e63aec650721826d385b017201b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46455, "upload_time": "2012-04-04T18:24:32", "upload_time_iso_8601": "2012-04-04T18:24:32.075552Z", "url": "https://files.pythonhosted.org/packages/8e/6b/b6b11c76784d379bdd0faa60346fd3caf20626e0bac3486856ce0ef60cea/bitarray-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "3825184f54f4d93508a28031b4c65d3b", "sha256": "7da501356e48a83c61f479393681c1bc4b94e5a34ace7e08cb29e7dd9290ab18"}, "downloads": -1, "filename": "bitarray-0.8.1.tar.gz", "has_sig": false, "md5_digest": "3825184f54f4d93508a28031b4c65d3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46877, "upload_time": "2013-03-31T02:08:49", "upload_time_iso_8601": "2013-03-31T02:08:49.260108Z", "url": "https://files.pythonhosted.org/packages/0a/da/9f61d28a20c42b4963334efacfd257c85150ede96d0cd2509b37da69da47/bitarray-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "09db96e4e168ba05147a3210c8abdcd1", "sha256": "94a1747208b7ef1debfd469657f2d4b74446e170ba735927207a525602ebf0cc"}, "downloads": -1, "filename": "bitarray-0.8.2.1.tar.gz", "has_sig": false, "md5_digest": "09db96e4e168ba05147a3210c8abdcd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36307, "upload_time": "2018-05-30T19:03:13", "upload_time_iso_8601": "2018-05-30T19:03:13.283802Z", "url": "https://files.pythonhosted.org/packages/aa/ef/2eb38a90ad40d0451a5228e760505567ff4cd3d8a936341a43a885fa8aa0/bitarray-0.8.2.1.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "f3131ac2a277f3b70dbb6132ca8f8889", "sha256": "050cd30b810ddb3aa941e7ddfbe0d8065e793012d0a88cb5739ec23624b9895e"}, "downloads": -1, "filename": "bitarray-0.8.3.tar.gz", "has_sig": false, "md5_digest": "f3131ac2a277f3b70dbb6132ca8f8889", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36292, "upload_time": "2018-07-06T16:19:15", "upload_time_iso_8601": "2018-07-06T16:19:15.808564Z", "url": "https://files.pythonhosted.org/packages/e2/1e/b93636ae36d08d0ee3aec40b08731cc97217c69db9422c0afef6ee32ebd2/bitarray-0.8.3.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "d4ce1f72ea731a1cd1c2f93e4b05b27b", "sha256": "29401d5c70ddea7a571bd1d7a13821db943917a03c428e37ff794eb2636905c2"}, "downloads": -1, "filename": "bitarray-0.9.0.tar.gz", "has_sig": false, "md5_digest": "d4ce1f72ea731a1cd1c2f93e4b05b27b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36488, "upload_time": "2019-04-22T07:04:30", "upload_time_iso_8601": "2019-04-22T07:04:30.521531Z", "url": "https://files.pythonhosted.org/packages/64/02/48ed15b393641f343fe4b9c10fc12751bac0a93cc2d699bc6676a24bf7ab/bitarray-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "1f886e22c8bc119119f985aafa9530bd", "sha256": "fa10b88f54e3795872e003e056ac0a6f4c703fc700037c43dd95d1a1c6f71ee3"}, "downloads": -1, "filename": "bitarray-0.9.1.tar.gz", "has_sig": false, "md5_digest": "1f886e22c8bc119119f985aafa9530bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36792, "upload_time": "2019-04-28T06:42:56", "upload_time_iso_8601": "2019-04-28T06:42:56.434874Z", "url": "https://files.pythonhosted.org/packages/61/35/bfc8c3837b63d8bc12c51f7b2300b837e3b0151f154648f02ea3e373ca0b/bitarray-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "b806f84577084e83de03b4bda59efe06", "sha256": "ea6420df9f6264a5632939fd1d566418b2d023528d1cf3a928e09f7a1a18a36f"}, "downloads": -1, "filename": "bitarray-0.9.2.tar.gz", "has_sig": false, "md5_digest": "b806f84577084e83de03b4bda59efe06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36789, "upload_time": "2019-04-29T19:35:32", "upload_time_iso_8601": "2019-04-29T19:35:32.742780Z", "url": "https://files.pythonhosted.org/packages/f2/f1/d5c824741a19d2386374cbc62caada0e90bcf6ee4212490b272a8054428d/bitarray-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "278d76f5055dac26416a8a645de65223", "sha256": "b2783d74247abb2669f581a001ecaa747e4b2ff9440762dbb499ed69b83e321e"}, "downloads": -1, "filename": "bitarray-0.9.3.tar.gz", "has_sig": false, "md5_digest": "278d76f5055dac26416a8a645de65223", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38009, "upload_time": "2019-05-20T15:59:27", "upload_time_iso_8601": "2019-05-20T15:59:27.002134Z", "url": "https://files.pythonhosted.org/packages/23/3e/ff197e545fd0f1d3796a4460a355c2beac92525823a3073cec66c03d63c3/bitarray-0.9.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "713872961d83f8640170d6bd5a759637", "sha256": "fe818b76257d191894c2eead02b5ff470ca0047216929e497ed866985a2f26d4"}, "downloads": -1, "filename": "bitarray-1.0.0.tar.gz", "has_sig": false, "md5_digest": "713872961d83f8640170d6bd5a759637", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31437, "upload_time": "2019-07-18T22:06:58", "upload_time_iso_8601": "2019-07-18T22:06:58.497608Z", "url": "https://files.pythonhosted.org/packages/47/a7/d4ec094b405c4d2df6163e5fe3dbcaeb2b6aa6ef201f681aeab257adb7f1/bitarray-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "56f55188d8d5361834db0bc7120f8998", "sha256": "3eb500f8b9cde19e14472fcbee0195dbf0fbac006f8406a03f0cfb495dff20a0"}, "downloads": -1, "filename": "bitarray-1.0.1.tar.gz", "has_sig": false, "md5_digest": "56f55188d8d5361834db0bc7120f8998", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37545, "upload_time": "2019-07-19T06:00:11", "upload_time_iso_8601": "2019-07-19T06:00:11.599369Z", "url": "https://files.pythonhosted.org/packages/c7/2a/35d3bd5bffa9e179267318057a12adc41f837310edf043d8e6d939719f95/bitarray-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "743d396a1012d6f7d791d8a526da302d", "sha256": "9f578314c7808eb1416620dc7d7977d4787a65a4f61b4c9685343a860712615b"}, "downloads": -1, "filename": "bitarray-1.1.0.tar.gz", "has_sig": false, "md5_digest": "743d396a1012d6f7d791d8a526da302d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40080, "upload_time": "2019-11-07T18:33:21", "upload_time_iso_8601": "2019-11-07T18:33:21.573500Z", "url": "https://files.pythonhosted.org/packages/8a/cf/098522ff2d1a8679ce15396cf0cc25d60ae6327b805532ad092feec1a4fd/bitarray-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ce21bdfb6d074bd051abd601667b238e", "sha256": "4f8706b651243c9faa981f075bcbdef2fab83e9b9bc9211ed2cb5849f9a68342"}, "downloads": -1, "filename": "bitarray-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ce21bdfb6d074bd051abd601667b238e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48254, "upload_time": "2019-12-06T07:27:21", "upload_time_iso_8601": "2019-12-06T07:27:21.930004Z", "url": "https://files.pythonhosted.org/packages/eb/fd/bf67cfea810305148ab8a1e8fbdcc5179f56979c73907fec9a36ebd4a58a/bitarray-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "a46bf869f6adf34f5b0dc82b469793b7", "sha256": "2ed675f460bb0d3d66fd8042a6f1f0d36cf213e52e72a745283ddb245da7b9cf"}, "downloads": -1, "filename": "bitarray-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a46bf869f6adf34f5b0dc82b469793b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48269, "upload_time": "2020-01-06T20:11:34", "upload_time_iso_8601": "2020-01-06T20:11:34.770622Z", "url": "https://files.pythonhosted.org/packages/3d/78/99528059e42f199910df89bd0ad8d9238f41d0499b506e0b3174340075ea/bitarray-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a46bf869f6adf34f5b0dc82b469793b7", "sha256": "2ed675f460bb0d3d66fd8042a6f1f0d36cf213e52e72a745283ddb245da7b9cf"}, "downloads": -1, "filename": "bitarray-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a46bf869f6adf34f5b0dc82b469793b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48269, "upload_time": "2020-01-06T20:11:34", "upload_time_iso_8601": "2020-01-06T20:11:34.770622Z", "url": "https://files.pythonhosted.org/packages/3d/78/99528059e42f199910df89bd0ad8d9238f41d0499b506e0b3174340075ea/bitarray-1.2.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:19 2020"}