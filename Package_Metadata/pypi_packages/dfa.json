{"info": {"author": "Marcell Vazquez-Chanlatte", "author_email": "marcell.vc@eecs.berkeley.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# DFA\n\nA simple python implementation of a DFA. \n\n[![Build Status](https://cloud.drone.io/api/badges/mvcisback/dfa/status.svg)](https://cloud.drone.io/mvcisback/dfa)\n[![Docs](https://img.shields.io/badge/API-link-color)](https://mvcisback.github.io/dfa)\n[![codecov](https://codecov.io/gh/mvcisback/dfa/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/dfa)\n[![PyPI version](https://badge.fury.io/py/dfa.svg)](https://badge.fury.io/py/dfa)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Membership Queries](#membership-queries)\n    - [Transitions and Traces](#transitions-and-traces)\n    - [Non-boolean output alphabets](#non-boolean-output-alphabets)\n    - [Moore Machines](#moore-machines)\n    - [Composition](#composition)\n    - [DFA <-> Dictionary](#dfa---dictionary)\n    - [Computing Reachable States](#computing-reachable-states)\n    - [Sampling Paths](#sampling-paths)\n    - [Running interactively (Co-Routine API)](#running-interactively-co-routine-api)\n    - [Sampling Paths](#special-alphabets)\n    - [Visualizing DFAs](#visualizing-dfas)\n\n<!-- markdown-toc end -->\n\n\n**Features:**\n\n1. State can be any Hashable object.\n2. Alphabet can be any finite sequence of Hashable objects.\n3. Designed to be immutable and hashable (assuming components are\n   immutable and hashable).\n4. Design choice to allow transition map and accepting set to be\n   given as functions rather than an explicit `dict` or `set`.\n\n# Installation\n\nIf you just need to use `dfa`, you can just run:\n\n`$ pip install dfa`\n\nFor developers, note that this project uses the\n[poetry](https://poetry.eustace.io/) python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:\n\n`$ poetry install`\n\n# Usage\n\nThe `dfa` api is centered around the `DFA` object. \n\nBy default, the `DFA` object models a `Deterministic Finite Acceptor`,\ne.g., a recognizer of a Regular Language. \n\n**Example Usage:**\n```python\nfrom dfa import DFA\n\ndfa1 = DFA(\n    start=0,\n    inputs={0, 1},\n    label=lambda s: (s % 4) == 3,\n    transition=lambda s, c: (s + c) % 4,\n)\n\ndfa2 = DFA(\n    start=\"left\",\n    inputs={\"move right\", \"move left\"},\n    label=lambda s: s == \"left\",\n    transition=lambda s, c: \"left\" if c == \"move left\" else \"right\",\n)\n```\n\n## Membership Queries\n\n```python\nassert dfa1.label([1, 1, 1, 1])\nassert not dfa1.label([1, 0])\n\nassert dfa2.label([\"move right\"]*100 + [\"move left\"])\nassert not dfa2.label([\"move left\", \"move right\"])\n```\n\n## Transitions and Traces\n\n```python\nassert dfa1.transition([1, 1, 1]) == 3\nassert list(dfa1.trace([1, 1, 1])) == [0, 1, 2, 3]\n```\n\n## Non-boolean output alphabets\n\nSometimes, it is useful to model an automata which can label a word\nusing a non-Boolean alphabet. For example, `{True, False, UNSURE}`.\n\nThe `DFA` object supports this by specifying the output alphabet.\n\n```python\nUNSURE = None\n\ndef my_labeler(s):\n    if s % 4 == 2:\n       return None\n    return (s % 4) == 3\n\n\ndfa3 = DFA(\n    start=0,\n    inputs={0, 1},\n    label=my_labeler,\n    transition=lambda s, c: (s + c) % 4,\n    outputs={True, False, UNSURE},\n)\n```\n\n**Note:** If `outputs` is set to `None`, then no checks are done that\nthe outputs are within the output alphabet.\n\n```python\ndfa3 = DFA(\n    start=0,\n    inputs={0, 1},\n    label=my_labeler,\n    transition=lambda s, c: (s + c) % 4,\n    outputs=None,\n)\n```\n\n## Moore Machines\n\nFinally, by reinterpreting the structure of the `DFA` object, one can\nmodel a Moore Machine. For example, in 3 state counter, `dfa1`, the\nMoore Machine can output the current count.\n\n```python\nassert dfa1.transduce(()) == ()\nassert dfa1.transduce((1,)) == (False,)\nassert dfa1.transduce((1, 1, 1, 1)) == (False, False, False, True)\n```\n\n## Composition\n\n`DFA` objects can be combined in three ways:\n\n1. (Synchronous) Cascading Composition: Feed outputs of one `DFA` into another.\n\n```python\nmod_5 = DFA(\n    start=0,\n    label=lambda s: s,\n    transition=lambda s, c: (s + c) % 5,\n    inputs={0, 1},\n    outputs={0, 1, 2, 3, 4},\n)\neq_0 = DFA(\n    start=0,\n    label=lambda s: s == 0,\n    transition=lambda s, c: c,\n    inputs={0, 1, 2, 3, 4},\n    outputs={True, False}\n)\n\neq_0_mod_5 = eq_0 << mod_5\nassert eq_0_mod_5.label([0, 0, 0, 0])\nassert not eq_0_mod_5.label([0, 1, 0, 0, 0])\n```\n\nNote that we use Moore Machine semantics (as opposed to Mealy).  Thus\n`eq_0`'s input is determined by `mod_5`'s state *before* seeing the\ninput. Thus, the following holds.\n\n```python\nassert not eq_0_mod_5.label([1, 1, 1, 1, 1])\nassert eq_0_mod_5.label([1, 1, 1, 1, 1, 0])\n```\n\n2. (Synchronous) Parallel Composition: Run two `DFA`s in parallel.\n\n```python\nparity = DFA(\n    start=0, inputs={0, 1}, label=lambda s: s,\n    transition=lambda s, c: (s + c) & 1,\n)\n\nself_composed = parity | parity\n\nassert self_composed.label([(0, 0), (1, 0)]) == (1, 0)\n```\n\n**Note** Parallel composition results in a `DFA` with\n`dfa.ProductAlphabet` input and outputs.\n\n3. (Synchronous) Parallel Composition with shared inputs:\n\n```python\nfrom dfa.utils import tee\n\nself_composed2 = parity | parity\n\nassert self_composed2.label([0, 1, 0]) == (1, 1)\n```\n\n## DFA <-> Dictionary\n\nNote that `dfa` provides helper functions for going from a dictionary\nbased representation of a deterministic transition system to a `DFA`\nobject and back.\n\n```python\nfrom dfa import dfa2dict, dict2dfa\n\n# DFA encoded a nested dictionaries with the following\n# signature.\n#     <state>: (<label>, {<action>: <next state>})\n\ndfa_dict = {\n    0: (False, {0: 0, 1: 1}),\n    1: (False, {0: 1, 1: 2}),\n    2: (False, {0: 2, 1: 3}), \n    3: (True, {0: 3, 1: 0})\n}\n\n# Dictionary -> DFA\ndfa = dict2dfa(dfa_dict, start=0)\n\n# DFA -> Dictionary\ndfa_dict2, start = dfa2dict(dfa)\n\nassert (dfa_dict, 0) == (dfa_dict2, start)\n```\n\n## Computing Reachable States\n\n```python\n# Perform a depth first traversal to collect all reachable states.\nassert dfa1.states() == {0, 1, 2, 3}\n```\n\n## Sampling Paths\n\nOften times, it is useful to sample a path between two states, say `a`\nand `b`. `dfa` supports this using `dfa.utils.paths`. This function\nreturns a generator of words, `w`, such that `dfa.transition(w,\nstart=b) == a`. For example:\n\n\n```python\nfrom dfa.utils import paths\n\naccess_strings = paths(\n    dfa1, \n    start=0,\n    end=1,  # Optional. If not specified returns all paths\n            # starting at `start`.\n    max_length=7,  #  Defaults to float('inf')\n    randomize=True,  #  Randomize the order. Shorter paths still found first.\n)\n\nfor word in access_strings:\n    assert dfa1.transition(word, start=0) == 1\n```\n\n## Running interactively (Co-Routine API)\n\n`dfa` supports interactively stepping through a `DFA` object via\nco-routines. This is particularly useful when using DFA in a control\nloop. For example, the following code counts how many `1`'s it takes\nto advance `dfa1`'s state back to the start state.\n\n```python\n\nmachine = dfa1.run()\n\nstart = next(machine)\nstate = None\n\ncount = 0\nwhile state != start:\n    count += 1\n    state = machine.send(1)\n```\n\n## Special Alphabets\n\nOften times, explicitly representing an alphabet is tedious,\nimpossible, or inefficient. \n\nAs such, `dfa` currently provides the following alphabets (with more\nplanned in the future).\n\n1. `dfa.ExplicitAlphabet`: A wrapper around frozensets. Default type of `Alphabet`.\n1. `dfa.SupAlphabet`: Alphabet that contains all possible inputs\n   (beware of [Russell's paradox}(https://en.wikipedia.org/wiki/Russell's_paradox)).\n1. `dfa.ProductAlphabet(left, right)`: Alphabet representing the Cartesian product\n   of `left` and `right` alphabets.\n1. `dfa.ExponentialAlphabet`: Alphabet representing the product of a\n   `base` alphabet with itself `dim` times.\n\n\n## Visualizing DFAs\n\n`dfa` optionally supports visualizing DFAs using graphviz. To use this\nfunctionality be sure to install `dfa` using with the `draw` option:\n\n```python\npip install dfa[draw]\n```\n\nor \n\n```python\npoetry install -E draw\n```\n\nThen one can simply use `dfa.draw.write_dot` to write a `.dot` file\nrepresenting the DFA. This `.dot` file can be rendered using any\ngraphviz supporting tool.\n\n```python\nfrom dfa.draw import write_dot\n\nwrite_dot(dfa1, \"path/to/dfa1.dot\")\n```\n\nUsing the `dot` command in linux results in the following rendering of `dfa1`.\n\n`$ dot -Tsvg path/to/dfa1.dot > dfa1.svg`\n\n<figure>\n  <img src=\"assets/dfa1.svg\" alt=\"visualization of dfa1\" width=500px>\n  <figcaption>\n    Visualization of dfa1 using graphviz.\n  </figcaption>\n</figure>\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvcisback/dfa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dfa", "package_url": "https://pypi.org/project/dfa/", "platform": "", "project_url": "https://pypi.org/project/dfa/", "project_urls": {"Homepage": "https://github.com/mvcisback/dfa", "Repository": "https://github.com/mvcisback/dfa"}, "release_url": "https://pypi.org/project/dfa/2.0.0/", "requires_dist": ["attrs (>=19.1,<20.0)", "funcy (>=1.12,<2.0)", "lazytree (>=0.3.1,<0.4.0)", "pydot (>=1.4,<2.0); extra == \"draw\""], "requires_python": ">=3.7,<4.0", "summary": "Python library for modeling DFAs, Moore Machines, and Transition Systems.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DFA</h1>\n<p>A simple python implementation of a DFA.</p>\n<p><a href=\"https://cloud.drone.io/mvcisback/dfa\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/faa6355752ed91dcdb2a104d265d06c63fde82c4/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6d766369736261636b2f6466612f7374617475732e737667\"></a>\n<a href=\"https://mvcisback.github.io/dfa\" rel=\"nofollow\"><img alt=\"Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63f99f0443ee8d7c48a4f4339d8c1a366ba95d71/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4150492d6c696e6b2d636f6c6f72\"></a>\n<a href=\"https://codecov.io/gh/mvcisback/dfa\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cdebd8dc52b252ce36a5c26a1682e1168a17a498/68747470733a2f2f636f6465636f762e696f2f67682f6d766369736261636b2f6466612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/dfa\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b9a1269960eaf16736c63b932ed62d747e715d4/68747470733a2f2f62616467652e667572792e696f2f70792f6466612e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#membership-queries\" rel=\"nofollow\">Membership Queries</a></li>\n<li><a href=\"#transitions-and-traces\" rel=\"nofollow\">Transitions and Traces</a></li>\n<li><a href=\"#non-boolean-output-alphabets\" rel=\"nofollow\">Non-boolean output alphabets</a></li>\n<li><a href=\"#moore-machines\" rel=\"nofollow\">Moore Machines</a></li>\n<li><a href=\"#composition\" rel=\"nofollow\">Composition</a></li>\n<li><a href=\"#dfa---dictionary\" rel=\"nofollow\">DFA &lt;-&gt; Dictionary</a></li>\n<li><a href=\"#computing-reachable-states\" rel=\"nofollow\">Computing Reachable States</a></li>\n<li><a href=\"#sampling-paths\" rel=\"nofollow\">Sampling Paths</a></li>\n<li><a href=\"#running-interactively-co-routine-api\" rel=\"nofollow\">Running interactively (Co-Routine API)</a></li>\n<li><a href=\"#special-alphabets\" rel=\"nofollow\">Sampling Paths</a></li>\n<li><a href=\"#visualizing-dfas\" rel=\"nofollow\">Visualizing DFAs</a></li>\n</ul>\n</li>\n</ul>\n\n<p><strong>Features:</strong></p>\n<ol>\n<li>State can be any Hashable object.</li>\n<li>Alphabet can be any finite sequence of Hashable objects.</li>\n<li>Designed to be immutable and hashable (assuming components are\nimmutable and hashable).</li>\n<li>Design choice to allow transition map and accepting set to be\ngiven as functions rather than an explicit <code>dict</code> or <code>set</code>.</li>\n</ol>\n<h1>Installation</h1>\n<p>If you just need to use <code>dfa</code>, you can just run:</p>\n<p><code>$ pip install dfa</code></p>\n<p>For developers, note that this project uses the\n<a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> python package/dependency\nmanagement tool. Please familarize yourself with it and then\nrun:</p>\n<p><code>$ poetry install</code></p>\n<h1>Usage</h1>\n<p>The <code>dfa</code> api is centered around the <code>DFA</code> object.</p>\n<p>By default, the <code>DFA</code> object models a <code>Deterministic Finite Acceptor</code>,\ne.g., a recognizer of a Regular Language.</p>\n<p><strong>Example Usage:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa</span> <span class=\"kn\">import</span> <span class=\"n\">DFA</span>\n\n<span class=\"n\">dfa1</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">dfa2</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"left\"</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"move right\"</span><span class=\"p\">,</span> <span class=\"s2\">\"move left\"</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s2\">\"left\"</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"s2\">\"left\"</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"s2\">\"move left\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"right\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Membership Queries</h2>\n<pre><span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">dfa2</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"s2\">\"move right\"</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">100</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s2\">\"move left\"</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">dfa2</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"s2\">\"move left\"</span><span class=\"p\">,</span> <span class=\"s2\">\"move right\"</span><span class=\"p\">])</span>\n</pre>\n<h2>Transitions and Traces</h2>\n<pre><span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">transition</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n<span class=\"k\">assert</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<h2>Non-boolean output alphabets</h2>\n<p>Sometimes, it is useful to model an automata which can label a word\nusing a non-Boolean alphabet. For example, <code>{True, False, UNSURE}</code>.</p>\n<p>The <code>DFA</code> object supports this by specifying the output alphabet.</p>\n<pre><span class=\"n\">UNSURE</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_labeler</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">%</span> <span class=\"mi\">4</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n       <span class=\"k\">return</span> <span class=\"kc\">None</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n\n\n<span class=\"n\">dfa3</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">my_labeler</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">UNSURE</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> If <code>outputs</code> is set to <code>None</code>, then no checks are done that\nthe outputs are within the output alphabet.</p>\n<pre><span class=\"n\">dfa3</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">my_labeler</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Moore Machines</h2>\n<p>Finally, by reinterpreting the structure of the <code>DFA</code> object, one can\nmodel a Moore Machine. For example, in 3 state counter, <code>dfa1</code>, the\nMoore Machine can output the current count.</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">transduce</span><span class=\"p\">(())</span> <span class=\"o\">==</span> <span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">transduce</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,)</span>\n<span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">transduce</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Composition</h2>\n<p><code>DFA</code> objects can be combined in three ways:</p>\n<ol>\n<li>(Synchronous) Cascading Composition: Feed outputs of one <code>DFA</code> into another.</li>\n</ol>\n<pre><span class=\"n\">mod_5</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"n\">eq_0</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">c</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">eq_0_mod_5</span> <span class=\"o\">=</span> <span class=\"n\">eq_0</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">mod_5</span>\n<span class=\"k\">assert</span> <span class=\"n\">eq_0_mod_5</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">eq_0_mod_5</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p>Note that we use Moore Machine semantics (as opposed to Mealy).  Thus\n<code>eq_0</code>'s input is determined by <code>mod_5</code>'s state <em>before</em> seeing the\ninput. Thus, the following holds.</p>\n<pre><span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">eq_0_mod_5</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">eq_0_mod_5</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<ol>\n<li>(Synchronous) Parallel Composition: Run two <code>DFA</code>s in parallel.</li>\n</ol>\n<pre><span class=\"n\">parity</span> <span class=\"o\">=</span> <span class=\"n\">DFA</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"n\">s</span><span class=\"p\">,</span>\n    <span class=\"n\">transition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">self_composed</span> <span class=\"o\">=</span> <span class=\"n\">parity</span> <span class=\"o\">|</span> <span class=\"n\">parity</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">self_composed</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)])</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note</strong> Parallel composition results in a <code>DFA</code> with\n<code>dfa.ProductAlphabet</code> input and outputs.</p>\n<ol>\n<li>(Synchronous) Parallel Composition with shared inputs:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa.utils</span> <span class=\"kn\">import</span> <span class=\"n\">tee</span>\n\n<span class=\"n\">self_composed2</span> <span class=\"o\">=</span> <span class=\"n\">parity</span> <span class=\"o\">|</span> <span class=\"n\">parity</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">self_composed2</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>DFA &lt;-&gt; Dictionary</h2>\n<p>Note that <code>dfa</code> provides helper functions for going from a dictionary\nbased representation of a deterministic transition system to a <code>DFA</code>\nobject and back.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa</span> <span class=\"kn\">import</span> <span class=\"n\">dfa2dict</span><span class=\"p\">,</span> <span class=\"n\">dict2dfa</span>\n\n<span class=\"c1\"># DFA encoded a nested dictionaries with the following</span>\n<span class=\"c1\"># signature.</span>\n<span class=\"c1\">#     &lt;state&gt;: (&lt;label&gt;, {&lt;action&gt;: &lt;next state&gt;})</span>\n\n<span class=\"n\">dfa_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}),</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}),</span>\n    <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}),</span> \n    <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Dictionary -&gt; DFA</span>\n<span class=\"n\">dfa</span> <span class=\"o\">=</span> <span class=\"n\">dict2dfa</span><span class=\"p\">(</span><span class=\"n\">dfa_dict</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DFA -&gt; Dictionary</span>\n<span class=\"n\">dfa_dict2</span><span class=\"p\">,</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">dfa2dict</span><span class=\"p\">(</span><span class=\"n\">dfa</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">dfa_dict</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">dfa_dict2</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">)</span>\n</pre>\n<h2>Computing Reachable States</h2>\n<pre><span class=\"c1\"># Perform a depth first traversal to collect all reachable states.</span>\n<span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">states</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n<h2>Sampling Paths</h2>\n<p>Often times, it is useful to sample a path between two states, say <code>a</code>\nand <code>b</code>. <code>dfa</code> supports this using <code>dfa.utils.paths</code>. This function\nreturns a generator of words, <code>w</code>, such that <code>dfa.transition(w, start=b) == a</code>. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa.utils</span> <span class=\"kn\">import</span> <span class=\"n\">paths</span>\n\n<span class=\"n\">access_strings</span> <span class=\"o\">=</span> <span class=\"n\">paths</span><span class=\"p\">(</span>\n    <span class=\"n\">dfa1</span><span class=\"p\">,</span> \n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional. If not specified returns all paths</span>\n            <span class=\"c1\"># starting at `start`.</span>\n    <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">,</span>  <span class=\"c1\">#  Defaults to float('inf')</span>\n    <span class=\"n\">randomize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\">#  Randomize the order. Shorter paths still found first.</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">access_strings</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">transition</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<h2>Running interactively (Co-Routine API)</h2>\n<p><code>dfa</code> supports interactively stepping through a <code>DFA</code> object via\nco-routines. This is particularly useful when using DFA in a control\nloop. For example, the following code counts how many <code>1</code>'s it takes\nto advance <code>dfa1</code>'s state back to the start state.</p>\n<pre><span class=\"n\">machine</span> <span class=\"o\">=</span> <span class=\"n\">dfa1</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">machine</span><span class=\"p\">)</span>\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">while</span> <span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"n\">start</span><span class=\"p\">:</span>\n    <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Special Alphabets</h2>\n<p>Often times, explicitly representing an alphabet is tedious,\nimpossible, or inefficient.</p>\n<p>As such, <code>dfa</code> currently provides the following alphabets (with more\nplanned in the future).</p>\n<ol>\n<li><code>dfa.ExplicitAlphabet</code>: A wrapper around frozensets. Default type of <code>Alphabet</code>.</li>\n<li><code>dfa.SupAlphabet</code>: Alphabet that contains all possible inputs\n(beware of [Russell's paradox}(https://en.wikipedia.org/wiki/Russell's_paradox)).</li>\n<li><code>dfa.ProductAlphabet(left, right)</code>: Alphabet representing the Cartesian product\nof <code>left</code> and <code>right</code> alphabets.</li>\n<li><code>dfa.ExponentialAlphabet</code>: Alphabet representing the product of a\n<code>base</code> alphabet with itself <code>dim</code> times.</li>\n</ol>\n<h2>Visualizing DFAs</h2>\n<p><code>dfa</code> optionally supports visualizing DFAs using graphviz. To use this\nfunctionality be sure to install <code>dfa</code> using with the <code>draw</code> option:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">dfa</span><span class=\"p\">[</span><span class=\"n\">draw</span><span class=\"p\">]</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">poetry</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">E</span> <span class=\"n\">draw</span>\n</pre>\n<p>Then one can simply use <code>dfa.draw.write_dot</code> to write a <code>.dot</code> file\nrepresenting the DFA. This <code>.dot</code> file can be rendered using any\ngraphviz supporting tool.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dfa.draw</span> <span class=\"kn\">import</span> <span class=\"n\">write_dot</span>\n\n<span class=\"n\">write_dot</span><span class=\"p\">(</span><span class=\"n\">dfa1</span><span class=\"p\">,</span> <span class=\"s2\">\"path/to/dfa1.dot\"</span><span class=\"p\">)</span>\n</pre>\n<p>Using the <code>dot</code> command in linux results in the following rendering of <code>dfa1</code>.</p>\n<p><code>$ dot -Tsvg path/to/dfa1.dot &gt; dfa1.svg</code></p>\n&lt;figure&gt;\n  <img alt=\"visualization of dfa1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7df907b669a444f75eeddc5c3f6104fb6fbfbcf6/6173736574732f646661312e737667\" width=\"500px\">\n  &lt;figcaption&gt;\n    Visualization of dfa1 using graphviz.\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n\n          </div>"}, "last_serial": 6786880, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "618875295e4310852f3783ed51e4fd9c", "sha256": "6367cab005691c9f15fb79adc6d744a445a52044683d7fdba66b50b07b769656"}, "downloads": -1, "filename": "dfa-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "618875295e4310852f3783ed51e4fd9c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3007, "upload_time": "2019-04-14T22:09:25", "upload_time_iso_8601": "2019-04-14T22:09:25.645989Z", "url": "https://files.pythonhosted.org/packages/a7/df/2960c969d8f3b6c58771f2f19847d30f47bf3bc11916f2cde038f3c9ae12/dfa-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa9b9c244514810df5e23adae4533294", "sha256": "5a266008d10a1262c918786f88dcb1d11e8a7ed16ee1a393cb980ee88bdccb1f"}, "downloads": -1, "filename": "dfa-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fa9b9c244514810df5e23adae4533294", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1960, "upload_time": "2019-04-14T22:09:37", "upload_time_iso_8601": "2019-04-14T22:09:37.549801Z", "url": "https://files.pythonhosted.org/packages/65/77/2dbe3dd013f9dbc602eadbb9d54b97241052e36e6bf74364356228c01560/dfa-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4021be746dddb7d88177cca687e43153", "sha256": "b61f86ceaf29c0fb6905bf65b8a2a4f7ffbe1141948d5659c8d540b7d762529e"}, "downloads": -1, "filename": "dfa-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4021be746dddb7d88177cca687e43153", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3034, "upload_time": "2019-04-14T23:07:59", "upload_time_iso_8601": "2019-04-14T23:07:59.536281Z", "url": "https://files.pythonhosted.org/packages/2a/56/27675bac2827a5554f8349683d4fc2c4d6229b5504d1b250ddc24fed788d/dfa-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c89323483df27c9f59ddcabf47d7ca4", "sha256": "f968f4c2419906d7fa2ed23b05c2b42f0141a12c36ea488d2d82937ca7f63743"}, "downloads": -1, "filename": "dfa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8c89323483df27c9f59ddcabf47d7ca4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2101, "upload_time": "2019-04-14T23:08:07", "upload_time_iso_8601": "2019-04-14T23:08:07.249312Z", "url": "https://files.pythonhosted.org/packages/fc/c5/bff34fd0dfe1ee7b38f8a564c7c085f214edb3daf63a5e8b34ade5789720/dfa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "59bb8dc790ab55f19659660ab9332c19", "sha256": "4d50c631f051bf81ea8f80eddd6ebd9cca7d1c2db9087061250219a4a77915c7"}, "downloads": -1, "filename": "dfa-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "59bb8dc790ab55f19659660ab9332c19", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3026, "upload_time": "2019-04-14T23:13:52", "upload_time_iso_8601": "2019-04-14T23:13:52.983461Z", "url": "https://files.pythonhosted.org/packages/6f/23/4edb8faad273e5ffb38e4e4ea12c31b27ee15e92b2f7e2f0b17ded222060/dfa-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "084b6bde4ec7aeaf69685adac53ccedc", "sha256": "21bdbd46807133f530e28d3eff74b4ddc653c98fecd376f392aabd5211db741f"}, "downloads": -1, "filename": "dfa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "084b6bde4ec7aeaf69685adac53ccedc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2093, "upload_time": "2019-04-14T23:13:44", "upload_time_iso_8601": "2019-04-14T23:13:44.817962Z", "url": "https://files.pythonhosted.org/packages/9c/b6/de8337bbe406ad5ca1034e6adba91a652e676db7309405b1c144f3ae228c/dfa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f908d09b42607705f7942c0b54843815", "sha256": "4c75bd4bb485ea2b68dd52b1094976ce0e002d98548b7ba6a7358fac03cb0a14"}, "downloads": -1, "filename": "dfa-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f908d09b42607705f7942c0b54843815", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3175, "upload_time": "2019-04-15T21:09:13", "upload_time_iso_8601": "2019-04-15T21:09:13.971565Z", "url": "https://files.pythonhosted.org/packages/eb/74/1c93a2c2d1cc7f5e78d0c98086f81d527ae5667ac0f0ba699850833b8677/dfa-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0988e10b661a8b564b8d43249af45b3a", "sha256": "8cd82d841e748c2fd31b7a5066e12efab738dbb2815c6028b00a8fb6c5df42e7"}, "downloads": -1, "filename": "dfa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0988e10b661a8b564b8d43249af45b3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2296, "upload_time": "2019-04-15T21:09:26", "upload_time_iso_8601": "2019-04-15T21:09:26.412477Z", "url": "https://files.pythonhosted.org/packages/e3/e2/846a48d55fca90e32fd858c70915a6812ac6c1bbf29646daa263e410b400/dfa-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d5990d96ce16b75c3da97b7bb621ecfd", "sha256": "2e1ed9cfbaf10ccadd963871e0b286365fa599969371b7b8866f2a57aa974080"}, "downloads": -1, "filename": "dfa-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d5990d96ce16b75c3da97b7bb621ecfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3011, "upload_time": "2019-06-14T06:27:14", "upload_time_iso_8601": "2019-06-14T06:27:14.027279Z", "url": "https://files.pythonhosted.org/packages/39/ca/0f3372b51797803c44f40179452e14c0067c0fea4264408cef84b9f09cc7/dfa-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40b60113c527773c9d3c62f87b57ed68", "sha256": "b17562d4a79d5fc28f9cfe2fb69656d37f778270be76480c242f62047a538e35"}, "downloads": -1, "filename": "dfa-0.1.4.tar.gz", "has_sig": false, "md5_digest": "40b60113c527773c9d3c62f87b57ed68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2519, "upload_time": "2019-06-14T06:27:15", "upload_time_iso_8601": "2019-06-14T06:27:15.258277Z", "url": "https://files.pythonhosted.org/packages/05/cc/168fc83d6bf0a04da71c4f0ae343a434db7e5c40613a680d351722f1adae/dfa-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6e634fb3f639572b91a1723c66c45819", "sha256": "322ff80d15c2d5e0ee3a3ca0a6398feea94440cb4faa12ede7e52d395d9196c9"}, "downloads": -1, "filename": "dfa-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e634fb3f639572b91a1723c66c45819", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3134, "upload_time": "2019-06-24T18:55:50", "upload_time_iso_8601": "2019-06-24T18:55:50.339592Z", "url": "https://files.pythonhosted.org/packages/a4/c2/97fcbbdd8aafa22477ed765a2e1c8b9b22a95f6899f435c00a137819ee8b/dfa-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f31d53d1f4d0279e34259b727856f473", "sha256": "908cd984eb874448507734909936897f087f82a4287fa6dc02f4fd5a78440fe6"}, "downloads": -1, "filename": "dfa-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f31d53d1f4d0279e34259b727856f473", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2647, "upload_time": "2019-06-24T18:55:51", "upload_time_iso_8601": "2019-06-24T18:55:51.475758Z", "url": "https://files.pythonhosted.org/packages/df/b7/5599968e1e46c3f0f2525b38f72dd89ad413feb8257c0a3f23fe98e43b38/dfa-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1b9d6a285e19a94a6b36af230fe65778", "sha256": "b58c4cdaed60e01a5e49d682ee635a547820b542980511bdabbf0b3f7625e062"}, "downloads": -1, "filename": "dfa-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b9d6a285e19a94a6b36af230fe65778", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3157, "upload_time": "2019-07-06T02:43:14", "upload_time_iso_8601": "2019-07-06T02:43:14.638788Z", "url": "https://files.pythonhosted.org/packages/bf/13/d2b8f98d8062611da34cb20b1816f5b4bcf4199c717d13a4782e6f3dc32d/dfa-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "460ab5f7d9af7c1c99986714f93bf507", "sha256": "4395d229181c7be18c694ee36696c0c20e49460e735d90c0175694b1472d012a"}, "downloads": -1, "filename": "dfa-0.2.1.tar.gz", "has_sig": false, "md5_digest": "460ab5f7d9af7c1c99986714f93bf507", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2676, "upload_time": "2019-07-06T02:43:16", "upload_time_iso_8601": "2019-07-06T02:43:16.111374Z", "url": "https://files.pythonhosted.org/packages/ac/75/2f38ab926f49109b856a6865eaddb65ad833084a4e4ea39bbb81f7276e71/dfa-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "56c37e83539aebf0cce8dc026765b34f", "sha256": "8abd232b73c322e8eb61b10b350536789891c0a888d445e8ed5e888e1e4c932d"}, "downloads": -1, "filename": "dfa-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "56c37e83539aebf0cce8dc026765b34f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3213, "upload_time": "2019-07-06T04:09:40", "upload_time_iso_8601": "2019-07-06T04:09:40.762284Z", "url": "https://files.pythonhosted.org/packages/b0/fc/e60fe9bf7cfe903d856fa9103d10b18d7c4b97cb9c4f5faf39ac41210f2a/dfa-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15d5e92beb9f7f31cdcced0285eb59be", "sha256": "9d5c5e44a078d6db54a9530909bd00fe42dfcb24f51cfadfa7572bfc07576778"}, "downloads": -1, "filename": "dfa-0.3.0.tar.gz", "has_sig": false, "md5_digest": "15d5e92beb9f7f31cdcced0285eb59be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2735, "upload_time": "2019-07-06T04:09:42", "upload_time_iso_8601": "2019-07-06T04:09:42.244575Z", "url": "https://files.pythonhosted.org/packages/55/1c/d9a3adcffaf4bfd5190fb247bf86137ccfd7276824387f2f0c9d073a9818/dfa-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8f6a58644e7b7162d4c2120d10d01f1a", "sha256": "6921c17558869c80e14dbe3d88510020c9df46b5f212dd95732ce6373ce7ca10"}, "downloads": -1, "filename": "dfa-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8f6a58644e7b7162d4c2120d10d01f1a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3231, "upload_time": "2019-07-08T19:24:58", "upload_time_iso_8601": "2019-07-08T19:24:58.729022Z", "url": "https://files.pythonhosted.org/packages/e4/78/9cb75499e1077fc9ffb6d999f79d3e780f1e3f48366e1f7b52549ee79149/dfa-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a520dd11f2ab5222c4fff94769328b18", "sha256": "e5517dd330ad99b96bff1b8ee6152e701233ff4296e492cfa99a02a61a0fa21b"}, "downloads": -1, "filename": "dfa-0.3.1.tar.gz", "has_sig": false, "md5_digest": "a520dd11f2ab5222c4fff94769328b18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2753, "upload_time": "2019-07-08T19:24:59", "upload_time_iso_8601": "2019-07-08T19:24:59.831970Z", "url": "https://files.pythonhosted.org/packages/82/23/1f4cadfb05a453e29c26cda6f2c9fbf09de82a85f8441dd724c4d8530dc8/dfa-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "b2247d1cf91d286b1c101d1f87139e0c", "sha256": "ecaaaaee2a7e9f53defbbb85d1079c080eca74294ab6dcacac63b9405a5138f0"}, "downloads": -1, "filename": "dfa-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b2247d1cf91d286b1c101d1f87139e0c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5748, "upload_time": "2019-07-14T04:00:52", "upload_time_iso_8601": "2019-07-14T04:00:52.401363Z", "url": "https://files.pythonhosted.org/packages/14/6c/1b3c6d96ddf9b0f5e431354c446423795d24b5ee0fd7f4efdbec7a12e3da/dfa-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22888be224289b24d76808f0ec046b5c", "sha256": "216c221dc02dcb1060b628858c2eaea075993535cb788625e8447f79dea37616"}, "downloads": -1, "filename": "dfa-0.3.2.tar.gz", "has_sig": false, "md5_digest": "22888be224289b24d76808f0ec046b5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5447, "upload_time": "2019-07-14T04:00:54", "upload_time_iso_8601": "2019-07-14T04:00:54.366663Z", "url": "https://files.pythonhosted.org/packages/e0/2e/c49f6d4c09ebeaea17634c4fefe2f895659f06c4e593e7883379839c2b98/dfa-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "44559ce82ea509e22275421f2cf82b89", "sha256": "e184ba48378fe36b35d5668d250c5adf96280c69d548d639541ab35007108b51"}, "downloads": -1, "filename": "dfa-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "44559ce82ea509e22275421f2cf82b89", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7668, "upload_time": "2019-07-29T19:13:01", "upload_time_iso_8601": "2019-07-29T19:13:01.675304Z", "url": "https://files.pythonhosted.org/packages/92/d7/c04ed191ebbf0d53fe1d120148259fac2f5c8743c692cc6c3bc2ada22158/dfa-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3abc0c0e7cdc2be707600865397fcd22", "sha256": "09a8a39984816c15ed3217fc9c75330c62a6b6fbd308e9c6941de70ffb90c9f8"}, "downloads": -1, "filename": "dfa-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3abc0c0e7cdc2be707600865397fcd22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7654, "upload_time": "2019-07-29T19:13:03", "upload_time_iso_8601": "2019-07-29T19:13:03.444609Z", "url": "https://files.pythonhosted.org/packages/20/0a/e5ec815163c010786edbb8002c880bdb954e670ab8be6ffe7f6c91bf28c8/dfa-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "59f37a8eedf697c082f549cc21466bcc", "sha256": "baef75489dba1b103a15f5572f21a15a32b5f38489ffe3ca5f4e8ecdfabd818e"}, "downloads": -1, "filename": "dfa-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "59f37a8eedf697c082f549cc21466bcc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7690, "upload_time": "2020-02-01T21:38:54", "upload_time_iso_8601": "2020-02-01T21:38:54.110760Z", "url": "https://files.pythonhosted.org/packages/20/43/79b7fe5a00a802acd109cf27ec0d7493e500d45eade14f7681c0f63ba334/dfa-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "185eefb04d405bc31f238c41d9f04826", "sha256": "b730c94f6b788651b4c8cbff0c35b370afc56c6f9a6bd6db0d1e39aa72411da3"}, "downloads": -1, "filename": "dfa-0.3.4.tar.gz", "has_sig": false, "md5_digest": "185eefb04d405bc31f238c41d9f04826", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7652, "upload_time": "2020-02-01T21:38:55", "upload_time_iso_8601": "2020-02-01T21:38:55.726297Z", "url": "https://files.pythonhosted.org/packages/2a/45/894b04f992a985acf454dc897e605bdfc0fe7027bddc0742325fff820363/dfa-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4237a99894bc262948aa3708766777fe", "sha256": "9f0e038caf6c35e04a11de8e8626ff6d5b829bc56cd1cab8afb757c26333dd2c"}, "downloads": -1, "filename": "dfa-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4237a99894bc262948aa3708766777fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7959, "upload_time": "2020-02-02T22:56:22", "upload_time_iso_8601": "2020-02-02T22:56:22.988092Z", "url": "https://files.pythonhosted.org/packages/ed/d1/965c41f201cf3318e7f1f29df9da2ebfbda62a43bc410d23554b359846bc/dfa-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d97d24becc842dd5d47409e815b5a60b", "sha256": "53bae7210a7fa417407310522279f8efbd3658c2ced7b599412a30c9d68afa45"}, "downloads": -1, "filename": "dfa-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d97d24becc842dd5d47409e815b5a60b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 8126, "upload_time": "2020-02-02T22:56:24", "upload_time_iso_8601": "2020-02-02T22:56:24.873069Z", "url": "https://files.pythonhosted.org/packages/58/15/7c32b656fd6e4ef211525db4859319450cae96f8b6c6059ddea1897f065a/dfa-0.4.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f72a880466796b93545e88dd9b12aedb", "sha256": "a73cf0037c2f637353f0b64bb6f54adc619b01f9ac100830419f49c14bd57240"}, "downloads": -1, "filename": "dfa-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f72a880466796b93545e88dd9b12aedb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9402, "upload_time": "2020-02-29T19:53:52", "upload_time_iso_8601": "2020-02-29T19:53:52.366135Z", "url": "https://files.pythonhosted.org/packages/b2/2b/20dee48c99b9545bb3effbf87669d6973c7da7156df7f933aa089a8b5abc/dfa-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b9f13f71fc4924aae23fcb925b30801", "sha256": "d0f9fd1f663c5cfbbab49f68c72191978d5bfea1a4f050b06f04764090ec73e2"}, "downloads": -1, "filename": "dfa-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4b9f13f71fc4924aae23fcb925b30801", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 10980, "upload_time": "2020-02-29T19:53:53", "upload_time_iso_8601": "2020-02-29T19:53:53.887153Z", "url": "https://files.pythonhosted.org/packages/cf/d3/865eafc030042840930bfe676ec706584a70738b9d614cb45ac7e29d931a/dfa-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "117b0a3dc2f10ea0e1c675e8b9d6de0f", "sha256": "bd7cb747bce0ff296fc90f7d2ce6f853d559d250652be20f59cd04f3962e34d1"}, "downloads": -1, "filename": "dfa-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "117b0a3dc2f10ea0e1c675e8b9d6de0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9895, "upload_time": "2020-02-29T20:11:11", "upload_time_iso_8601": "2020-02-29T20:11:11.866102Z", "url": "https://files.pythonhosted.org/packages/33/20/192bf9a04b8ee8a26afc85af376ae57b9de0157570c73fb51e457f71c2df/dfa-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e9d55f3b6256b7b052319d98e2ee56d", "sha256": "771c52de4944ba8b4be725b57e599c57a5b76596ee2fcc0460b68ee97a6c121b"}, "downloads": -1, "filename": "dfa-1.0.1.tar.gz", "has_sig": false, "md5_digest": "3e9d55f3b6256b7b052319d98e2ee56d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12086, "upload_time": "2020-02-29T20:11:13", "upload_time_iso_8601": "2020-02-29T20:11:13.560827Z", "url": "https://files.pythonhosted.org/packages/e4/9b/940012ebb882fceb51f6539d3bf94444d60461c4c119ae88a54055c06b9a/dfa-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "dd0005f24611c3eea509cb4b9f918011", "sha256": "350d4014f11e5e3440ae0074a24f7352ca71fdfe01dbc8002e2fc5ee4d03eebf"}, "downloads": -1, "filename": "dfa-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dd0005f24611c3eea509cb4b9f918011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9926, "upload_time": "2020-02-29T20:39:52", "upload_time_iso_8601": "2020-02-29T20:39:52.841918Z", "url": "https://files.pythonhosted.org/packages/10/c1/aa0ddce512ed2a390d352b06d05d1782da7d581a5883594d30cd5f311eb5/dfa-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd4e2d3f6920e19bd45c699b84b98599", "sha256": "dedb9b1ce5ae52b1f334f76c057e0502f821712d56331d3ed4647e2733098d02"}, "downloads": -1, "filename": "dfa-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fd4e2d3f6920e19bd45c699b84b98599", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12102, "upload_time": "2020-02-29T20:39:54", "upload_time_iso_8601": "2020-02-29T20:39:54.460862Z", "url": "https://files.pythonhosted.org/packages/e3/1b/c1bb9143593dc438b9e7b7e40727762b41e1a95dc09565c9a6cb9bbfe02f/dfa-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "4fe84419f0e36b46723211045c7db182", "sha256": "09a14e1bf85d9ff81fd8485214352a48e7636490294d4161a6070381f69d61c1"}, "downloads": -1, "filename": "dfa-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4fe84419f0e36b46723211045c7db182", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9911, "upload_time": "2020-02-29T20:44:14", "upload_time_iso_8601": "2020-02-29T20:44:14.299729Z", "url": "https://files.pythonhosted.org/packages/5d/78/467eeb6939a7dac3cfa93076b8a09739e61c436439c3aa10a26701367a14/dfa-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f081d55cf13e9a38e5f31d94aa7cba5", "sha256": "111e73dcfa7e1d0ac7bfa56b012c70050b7e96cccdf722982f4fd12d7b5c7f7f"}, "downloads": -1, "filename": "dfa-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9f081d55cf13e9a38e5f31d94aa7cba5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12094, "upload_time": "2020-02-29T20:44:15", "upload_time_iso_8601": "2020-02-29T20:44:15.523223Z", "url": "https://files.pythonhosted.org/packages/48/56/2e631b60f0561ab067200ce272992466617426fb180aee5e1de84e13e465/dfa-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f5065bfe897e4c921a9d18451eea5d1e", "sha256": "294747dd637b5bef67012123c40a6b9c40fa307f90f89a4ebce814e450be6e34"}, "downloads": -1, "filename": "dfa-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f5065bfe897e4c921a9d18451eea5d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8168, "upload_time": "2020-03-03T21:02:40", "upload_time_iso_8601": "2020-03-03T21:02:40.531718Z", "url": "https://files.pythonhosted.org/packages/1d/61/c24c0f1e6d08e663c03d74d564e5f41929952234df244b13596f3ced359b/dfa-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4691e4c87159b393595d814e9d954ee", "sha256": "af9d226100c18c6b788359d34aeb40b77346482db279fa4f40b1291e2eecc559"}, "downloads": -1, "filename": "dfa-1.0.4.tar.gz", "has_sig": false, "md5_digest": "a4691e4c87159b393595d814e9d954ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9544, "upload_time": "2020-03-03T21:02:41", "upload_time_iso_8601": "2020-03-03T21:02:41.732731Z", "url": "https://files.pythonhosted.org/packages/ce/6d/bf288a06bea60786e31fb7b8c5e5042b97af1ddf6376627f7c98b366d5e0/dfa-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "997998b772d1f9f1d8e1eebd4be56162", "sha256": "035d6b553902b82ff8d193d8d505f0b5232eb2da61553d0d77fa0d95112fb62a"}, "downloads": -1, "filename": "dfa-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "997998b772d1f9f1d8e1eebd4be56162", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8279, "upload_time": "2020-03-07T04:34:02", "upload_time_iso_8601": "2020-03-07T04:34:02.965361Z", "url": "https://files.pythonhosted.org/packages/bf/fd/946bd2ed43a66edcce831174f2fff509d42956f7366d4fae89e71cdc91de/dfa-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c96bea9701cff8b243f300d9304ecbb", "sha256": "513a6c1b8f35a29e79dc886a221e29eb7025780a617d82e83fe01a8be50b054d"}, "downloads": -1, "filename": "dfa-1.0.5.tar.gz", "has_sig": false, "md5_digest": "3c96bea9701cff8b243f300d9304ecbb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9654, "upload_time": "2020-03-07T04:34:04", "upload_time_iso_8601": "2020-03-07T04:34:04.495421Z", "url": "https://files.pythonhosted.org/packages/c1/85/2f012333b8247637de7c5bc938878ba73afef1e274d587893f4f34521a06/dfa-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "944f039704b4aba9f58434f128858032", "sha256": "212dba8b3d564ad70a8e9391f78297e2c9ebb40d29fdf762ec6ea309b634499a"}, "downloads": -1, "filename": "dfa-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "944f039704b4aba9f58434f128858032", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 8458, "upload_time": "2020-03-07T19:51:00", "upload_time_iso_8601": "2020-03-07T19:51:00.978044Z", "url": "https://files.pythonhosted.org/packages/b8/f9/62fcf6d43dd2f641f0861ba33078cc497d3c82a201a10d66c30990327bc8/dfa-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06afcd2bd0b03e1a08f9bd56add80a38", "sha256": "19079a3c501ff47f76e36f15c2f5bf7724a91fdfb0e405d8b8a6c5b542b18e72"}, "downloads": -1, "filename": "dfa-1.1.0.tar.gz", "has_sig": false, "md5_digest": "06afcd2bd0b03e1a08f9bd56add80a38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 9754, "upload_time": "2020-03-07T19:51:02", "upload_time_iso_8601": "2020-03-07T19:51:02.606109Z", "url": "https://files.pythonhosted.org/packages/73/e1/1c64ae6a8a11ec449c92b2fdb5bef70beae7011cbcd8b3980272f40681d5/dfa-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "c9ee41fd128707a6a4e3f9ab2815db6c", "sha256": "35304522ed95e069fcd877698fdd6cbf410b2ab740f8f4276921eec0bf2ff301"}, "downloads": -1, "filename": "dfa-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9ee41fd128707a6a4e3f9ab2815db6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9446, "upload_time": "2020-03-10T18:36:20", "upload_time_iso_8601": "2020-03-10T18:36:20.745809Z", "url": "https://files.pythonhosted.org/packages/21/14/3da95831a3fe3d12d2b4bf43710263142ce65d19890a9a79fd0d63cbf73f/dfa-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "837fa103d91eada6a800b030766ef035", "sha256": "26a9cab926ab57b2717452a4594b8ae839ab46caa4f6b310fe943d30dde285e8"}, "downloads": -1, "filename": "dfa-2.0.0.tar.gz", "has_sig": false, "md5_digest": "837fa103d91eada6a800b030766ef035", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12346, "upload_time": "2020-03-10T18:36:22", "upload_time_iso_8601": "2020-03-10T18:36:22.486914Z", "url": "https://files.pythonhosted.org/packages/3e/5d/0155a592c7fee6a8eff1711d36d669a1957276fb20481df032f846dac636/dfa-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9ee41fd128707a6a4e3f9ab2815db6c", "sha256": "35304522ed95e069fcd877698fdd6cbf410b2ab740f8f4276921eec0bf2ff301"}, "downloads": -1, "filename": "dfa-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9ee41fd128707a6a4e3f9ab2815db6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 9446, "upload_time": "2020-03-10T18:36:20", "upload_time_iso_8601": "2020-03-10T18:36:20.745809Z", "url": "https://files.pythonhosted.org/packages/21/14/3da95831a3fe3d12d2b4bf43710263142ce65d19890a9a79fd0d63cbf73f/dfa-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "837fa103d91eada6a800b030766ef035", "sha256": "26a9cab926ab57b2717452a4594b8ae839ab46caa4f6b310fe943d30dde285e8"}, "downloads": -1, "filename": "dfa-2.0.0.tar.gz", "has_sig": false, "md5_digest": "837fa103d91eada6a800b030766ef035", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 12346, "upload_time": "2020-03-10T18:36:22", "upload_time_iso_8601": "2020-03-10T18:36:22.486914Z", "url": "https://files.pythonhosted.org/packages/3e/5d/0155a592c7fee6a8eff1711d36d669a1957276fb20481df032f846dac636/dfa-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:47 2020"}