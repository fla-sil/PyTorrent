{"info": {"author": "Le Cuong", "author_email": "cuong.le@f4.intek.edu.vn", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Sprite Detection\n\n## Sprite\n\nA [**sprite**](<https://en.wikipedia.org/wiki/Sprite_(computer_graphics)>) is a small [**raster graphic**](https://en.wikipedia.org/wiki/Raster_graphics) (a **bitmap**) that represents an object such as a [character, a vehicle, a projectile, etc.](https://www.youtube.com/watch?v=a1yBP5t-fSA)\n\n![Metal Slug ](metal_slug_sprite_large.png)\n\nSprites are a popular way to create large, complex scenes as you can manipulate each sprite separately from the rest of the scene. This allows for greater control over how the scene is rendered, as well as over how the players can interact with the scene.\n\nSprites are mainly used in 2D video games, such as [Shoot'em up](https://en.wikipedia.org/wiki/Shoot_%27em_up) in which the hero combats a large number of enemies by shooting at them while dodging their fire:\n\n| [Cannon Fodder](<https://en.wikipedia.org/wiki/Cannon_Fodder_(video_game)>) | [Commando](<https://en.wikipedia.org/wiki/Commando_(video_game)>) | [Metal Slug](https://en.wikipedia.org/wiki/Metal_Slug) |\n| --------------------------------------------------------------------------- | ----------------------------------------------------------------- | ------------------------------------------------------ |\n| ![Cannon Fodder](2d_video_game_cannon_fodder.jpg)                           | ![Commando](2d_video_game_commando.jpg)                           | ![Metal Slug](2d_video_game_metal_slug.png)            |\n\n## Sprite Animation\n\nSeveral sprites, representing a same object, can be rendered in quick succession to give the illusion of movement of this object (**animation**).\n\nFor example, the animation of the hero Marco Rossi (Metal Slug), running with a gun, is composed of 9 sprites:\n\n![Metal Slug Sprite Running with a Gun](metal_slug_sprites_running_with_gun.png)\n\n## Sprite Sheet\n\nIt is not uncommon for games to have tens to hundreds of sprites. Loading each of these as an individual image would consume a lot of memory and processing power. To help manage sprites and avoid using so many images, many games use [**sprite sheets**](https://www.youtube.com/watch?v=crrFUYabm6E) (also known as **image sprites**).\n\nA sprite sheet consists of multiple sprites in one image. In other words, sprite sheets pack multiple sprites into a single picture. Using sprite sheet, video game developers create sprite sheet animation representing one or several animation sequences while only loading a single file:\n\n![Metal Slug Sprites](metal_slug_sprite_sheet_large.png)\n\n## Sprite Bounding Box\n\nA frame (**bounding box**) can be used to delimit the sprite in the sprite sheet. This bounding box is defined with two 2D points `top_left` and the `bottom_right`, which their respective coordinates `x` and `y` are relative to the top-left corner of the sprite sheet's image.\n\nFor example:\n\n![Shape Bounding Boxes](metal_slug_sprite_detection_bounding_boxes.png)\n\n## Sprite Mask\n\nThe mask of a sprite defines the 2D shape of the sprite. For example, the sprite sheet [`metal_slug_sprite_standing_stance.png`](metal_slug_sprite_standing_stance_large.png) contains the 3 following sprites:\n\n![Metal Slug Standing Stance](metal_slug_sprite_standing_stance_large.png)\n\nThe masks of these sprites are respectively:\n\n![](metal_slug_sprite_detection_coloring.png)\n\n## Optimized Sprite Sheet\n\nSprites could be evenly placed in the sprite sheet according to their bounding box. The disadvantage is that this method of placement wastes a lot of memory because of all the additional transparency of each sprite, especially when sprites have different width and height.\n\nThe developers are aware of the wasted memory and started to optimize the space in the sprite sheets. Sprites are placed close to each others, depending on their shape. The bounding box of a sprite may intersect the bounding box of another sprite, but the shape of this sprite is always separated from the shape of any other sprites with at least 1 transparent pixel.\n\n![Optimized Sprite Sheet](optimized_sprite_sheet.png)\n\nThis space optimization is even more efficient when some big sprites have concave shape (i.e., shape that curves inward):\n\n| Scene with 2 Sprites    | Sprite Sheet                                 | Sprite Masks                                      |\n| ----------------------- | -------------------------------------------- | ------------------------------------------------- |\n| ![Islands](islands.png) | ![Islands Sprite Sheet](islands_sprites.png) | ![Islands Sprite Masks](islands_sprite_masks.png) |\n\n# Aim of the project\n\n- Detect sprites in the input image and draw those sprites to new image with its bounding box and mark.\n\n# Usage Information\n\n### Requirement\n\n- Python 3.6\n- Numpy\n- Pillow\n\n### Installation\n\n```bash\n$ pipenv install spritesheet-lecuong91\n```\n\nExample:\n\n```python\nimage = SpriteSheet('metal_slug_sprites_running_with_gun.png')\nsprites, label = image.find_sprites()\nsprite_label_image = image.create_sprite_labels_image()\nsprite_label_image.save('test.png')\n```\n\n# Contact Information\nIf you have any problems using this library, please use the contact below.\n\nEmail: cuong.le@f4.intek.edu.vn\n\n# License\n\nThis project is licensed under the MIT License - see the LICENSE.txt file for details\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/intek-training-jsc/sprite-sheet-cuongle91/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spritesheet-lecuong91", "package_url": "https://pypi.org/project/spritesheet-lecuong91/", "platform": "", "project_url": "https://pypi.org/project/spritesheet-lecuong91/", "project_urls": {"Homepage": "https://github.com/intek-training-jsc/sprite-sheet-cuongle91/"}, "release_url": "https://pypi.org/project/spritesheet-lecuong91/0.0.2/", "requires_dist": ["setuptools", "wheel", "twine", "numpy", "pillow"], "requires_python": ">=3.6", "summary": "Sprite detect", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Sprite Detection</p>\n<p>## Sprite</p>\n<p>A [<strong>sprite</strong>](&lt;<a href=\"https://en.wikipedia.org/wiki/Sprite_(computer_graphics)\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Sprite_(computer_graphics)</a>&gt;) is a small [<strong>raster graphic</strong>](<a href=\"https://en.wikipedia.org/wiki/Raster_graphics\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Raster_graphics</a>) (a <strong>bitmap</strong>) that represents an object such as a [character, a vehicle, a projectile, etc.](<a href=\"https://www.youtube.com/watch?v=a1yBP5t-fSA\" rel=\"nofollow\">https://www.youtube.com/watch?v=a1yBP5t-fSA</a>)</p>\n<p>![Metal Slug ](metal_slug_sprite_large.png)</p>\n<p>Sprites are a popular way to create large, complex scenes as you can manipulate each sprite separately from the rest of the scene. This allows for greater control over how the scene is rendered, as well as over how the players can interact with the scene.</p>\n<p>Sprites are mainly used in 2D video games, such as [Shoot\u2019em up](<a href=\"https://en.wikipedia.org/wiki/Shoot_%27em_up\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Shoot_%27em_up</a>) in which the hero combats a large number of enemies by shooting at them while dodging their fire:</p>\n<div>\n<div>[Cannon Fodder](&lt;<a href=\"https://en.wikipedia.org/wiki/Cannon_Fodder_(video_game)\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Cannon_Fodder_(video_game)</a>&gt;) | [Commando](&lt;<a href=\"https://en.wikipedia.org/wiki/Commando_(video_game)\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Commando_(video_game)</a>&gt;) | [Metal Slug](<a href=\"https://en.wikipedia.org/wiki/Metal_Slug\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Metal_Slug</a>) |</div>\n<div>\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 |</div>\n<div>![Cannon Fodder](2d_video_game_cannon_fodder.jpg)                           | ![Commando](2d_video_game_commando.jpg)                           | ![Metal Slug](2d_video_game_metal_slug.png)            |</div>\n</div>\n<p>## Sprite Animation</p>\n<p>Several sprites, representing a same object, can be rendered in quick succession to give the illusion of movement of this object (<strong>animation</strong>).</p>\n<p>For example, the animation of the hero Marco Rossi (Metal Slug), running with a gun, is composed of 9 sprites:</p>\n<p>![Metal Slug Sprite Running with a Gun](metal_slug_sprites_running_with_gun.png)</p>\n<p>## Sprite Sheet</p>\n<p>It is not uncommon for games to have tens to hundreds of sprites. Loading each of these as an individual image would consume a lot of memory and processing power. To help manage sprites and avoid using so many images, many games use [<strong>sprite sheets</strong>](<a href=\"https://www.youtube.com/watch?v=crrFUYabm6E\" rel=\"nofollow\">https://www.youtube.com/watch?v=crrFUYabm6E</a>) (also known as <strong>image sprites</strong>).</p>\n<p>A sprite sheet consists of multiple sprites in one image. In other words, sprite sheets pack multiple sprites into a single picture. Using sprite sheet, video game developers create sprite sheet animation representing one or several animation sequences while only loading a single file:</p>\n<p>![Metal Slug Sprites](metal_slug_sprite_sheet_large.png)</p>\n<p>## Sprite Bounding Box</p>\n<p>A frame (<strong>bounding box</strong>) can be used to delimit the sprite in the sprite sheet. This bounding box is defined with two 2D points <cite>top_left</cite> and the <cite>bottom_right</cite>, which their respective coordinates <cite>x</cite> and <cite>y</cite> are relative to the top-left corner of the sprite sheet\u2019s image.</p>\n<p>For example:</p>\n<p>![Shape Bounding Boxes](metal_slug_sprite_detection_bounding_boxes.png)</p>\n<p>## Sprite Mask</p>\n<p>The mask of a sprite defines the 2D shape of the sprite. For example, the sprite sheet [<cite>metal_slug_sprite_standing_stance.png</cite>](metal_slug_sprite_standing_stance_large.png) contains the 3 following sprites:</p>\n<p>![Metal Slug Standing Stance](metal_slug_sprite_standing_stance_large.png)</p>\n<p>The masks of these sprites are respectively:</p>\n<p>![](metal_slug_sprite_detection_coloring.png)</p>\n<p>## Optimized Sprite Sheet</p>\n<p>Sprites could be evenly placed in the sprite sheet according to their bounding box. The disadvantage is that this method of placement wastes a lot of memory because of all the additional transparency of each sprite, especially when sprites have different width and height.</p>\n<p>The developers are aware of the wasted memory and started to optimize the space in the sprite sheets. Sprites are placed close to each others, depending on their shape. The bounding box of a sprite may intersect the bounding box of another sprite, but the shape of this sprite is always separated from the shape of any other sprites with at least 1 transparent pixel.</p>\n<p>![Optimized Sprite Sheet](optimized_sprite_sheet.png)</p>\n<p>This space optimization is even more efficient when some big sprites have concave shape (i.e., shape that curves inward):</p>\n<div>\n<div>Scene with 2 Sprites    | Sprite Sheet                                 | Sprite Masks                                      |</div>\n<div>\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013 | \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014- |</div>\n<div>![Islands](islands.png) | ![Islands Sprite Sheet](islands_sprites.png) | ![Islands Sprite Masks](islands_sprite_masks.png) |</div>\n</div>\n<p># Aim of the project</p>\n<ul>\n<li>Detect sprites in the input image and draw those sprites to new image with its bounding box and mark.</li>\n</ul>\n<p># Usage Information</p>\n<p>### Requirement</p>\n<ul>\n<li>Python 3.6</li>\n<li>Numpy</li>\n<li>Pillow</li>\n</ul>\n<p>### Installation</p>\n<p><tt>`bash\n$ pipenv install <span class=\"pre\">spritesheet-lecuong91</span>\n`</tt></p>\n<p>Example:</p>\n<p><tt>`python\nimage = <span class=\"pre\">SpriteSheet('metal_slug_sprites_running_with_gun.png')</span>\nsprites, label = image.find_sprites()\nsprite_label_image = image.create_sprite_labels_image()\n<span class=\"pre\">sprite_label_image.save('test.png')</span>\n`</tt></p>\n<p># Contact Information\nIf you have any problems using this library, please use the contact below.</p>\n<p>Email: <a href=\"mailto:cuong.le%40f4.intek.edu.vn\">cuong<span>.</span>le<span>@</span>f4<span>.</span>intek<span>.</span>edu<span>.</span>vn</a></p>\n<p># License</p>\n<p>This project is licensed under the MIT License - see the LICENSE.txt file for details</p>\n\n          </div>"}, "last_serial": 6576383, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5b0e1e84d4da0ac579e2df10e7842d51", "sha256": "927b7c1eee2a5f525fbb353fbd3a7e429d55d493fdff5d61299938daf887a8ee"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5b0e1e84d4da0ac579e2df10e7842d51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6769, "upload_time": "2020-02-05T14:02:18", "upload_time_iso_8601": "2020-02-05T14:02:18.674787Z", "url": "https://files.pythonhosted.org/packages/4a/40/eeab29e77675fa15353f403ed7ea919375400a0111c32bff3cc03db43c54/spritesheet_lecuong91-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f280ed2cc583d6435a245969e04f1f3e", "sha256": "153c92e07b6b444a473e3c6229fa2f1674bd0d2c1cabdab34f8b9c3f14ec8418"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f280ed2cc583d6435a245969e04f1f3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5683, "upload_time": "2020-02-05T14:02:22", "upload_time_iso_8601": "2020-02-05T14:02:22.658514Z", "url": "https://files.pythonhosted.org/packages/9e/95/5430029d9fbee1e126faa4f689638875beee84ad9967a49d371a04fa11b7/spritesheet_lecuong91-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "94ede0d97f820e780b20ad5d71aa889a", "sha256": "a6073694192f4239b03bd764e3a208e3348025f0eab7d1cf47868da6cb6b371c"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94ede0d97f820e780b20ad5d71aa889a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8861, "upload_time": "2020-02-05T14:57:25", "upload_time_iso_8601": "2020-02-05T14:57:25.636041Z", "url": "https://files.pythonhosted.org/packages/da/8d/b50903f9ed416f57d954847d62c381f5536096d5fad55d12194982c130fe/spritesheet_lecuong91-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3942940433b1da73fef1cb3cc53c20", "sha256": "eb2071cd8ef146ffafd376baa462d19896416fb1a0e5f6a139cb990accf3f9e0"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0e3942940433b1da73fef1cb3cc53c20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5687, "upload_time": "2020-02-05T14:57:27", "upload_time_iso_8601": "2020-02-05T14:57:27.450073Z", "url": "https://files.pythonhosted.org/packages/54/b2/c3e42f53ab23edbdf37d348c39fb5c11cd8a392d3e688fb14360874aa0ee/spritesheet_lecuong91-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "94ede0d97f820e780b20ad5d71aa889a", "sha256": "a6073694192f4239b03bd764e3a208e3348025f0eab7d1cf47868da6cb6b371c"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94ede0d97f820e780b20ad5d71aa889a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8861, "upload_time": "2020-02-05T14:57:25", "upload_time_iso_8601": "2020-02-05T14:57:25.636041Z", "url": "https://files.pythonhosted.org/packages/da/8d/b50903f9ed416f57d954847d62c381f5536096d5fad55d12194982c130fe/spritesheet_lecuong91-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3942940433b1da73fef1cb3cc53c20", "sha256": "eb2071cd8ef146ffafd376baa462d19896416fb1a0e5f6a139cb990accf3f9e0"}, "downloads": -1, "filename": "spritesheet_lecuong91-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0e3942940433b1da73fef1cb3cc53c20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5687, "upload_time": "2020-02-05T14:57:27", "upload_time_iso_8601": "2020-02-05T14:57:27.450073Z", "url": "https://files.pythonhosted.org/packages/54/b2/c3e42f53ab23edbdf37d348c39fb5c11cd8a392d3e688fb14360874aa0ee/spritesheet_lecuong91-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:21 2020"}