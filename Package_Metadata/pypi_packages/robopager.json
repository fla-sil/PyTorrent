{"info": {"author": "Equinox Fitness", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "Robopager\n=========\n\n.. image:: https://badge.fury.io/py/robopager.svg\n    :target: https://badge.fury.io/py/robopager\n    :alt: PyPI Version\n\n. image:: https://api.codacy.com/project/badge/Grade/c0e6c19dc2d8471da1b1b6099e1e46a9\n   :alt: Codacy Badge\n   :target: https://app.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&utm_medium=referral&utm_content=equinoxfitness/robopager&utm_campaign=Badge_Grade_Dashboard\n\n.. image:: https://api.codacy.com/project/badge/Grade/c0e6c19dc2d8471da1b1b6099e1e46a9\n    :target: https://www.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/robopager&amp;utm_campaign=Badge_Grade\n    :alt: Code Quality Grade\n\n.. image:: https://api.codacy.com/project/badge/Coverage/c0e6c19dc2d8471da1b1b6099e1e46a9\n    :target: https://www.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/robopager&amp;utm_campaign=Badge_Coverage\n    :alt: Coverage\n\n.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\n    :target: https://github.com/equinoxfitness/robopager/blob/master/CODE_OF_CONDUCT.rst\n    :alt: Code of Conduct\n\n\nRobopager is a job monitor and notification tool designed for daily\nemail check and job latency check. The daily email check function can\nhelp you to monitor your inbox and whether you receive the expected\nemails at a certain time on a daily basis. The job latency check\nfunction helps to monitor every few seconds or minutes whether your\nscheduled workflows finish on time. If emails are not received in an\nexpected timeframe or the scheduled jobs don't complete on time, you\nwill receive the alerts from PagerDuty in email, text message or phone\ncall depending on your choice.\n\nInstallation\n------------\n\nRobopager requires Python 3.6+\n\n::\n\n    python3 -m venv <virtual environment name>\n    source <virtual environment name>/bin/activate\n    pip install robopager\n\nSetup Instructions\n------------------\n\nBefore start using this tool, you need to configure the settings in the\n**etl.cfg** and create your **checklist.yaml** file. You can find\nexample files above and change to your own values. Detailed explanations\nas below.\n\n1. etl.cfg\n~~~~~~~~~~\n\nThis file contains the loggin or server information of the applications\nor services that will be used in this tool, such as your monitored\nemail, PagerDuty service and other servers. It also has the settings for\nyou to choose the function mode.\n\n-  google\\_apps: enter the email address you want to monitor and use\n   b64encode to encrypt your password for security concerns\n-  pager\\_duty: enter the information of the subdomain you will use and\n   the API access key for authentication\n-  enable\\_redis: enter \"True\" if you want to use Redis, which is highly\n   recommended because of API rate limit in PagerDuty; otherwise\n   \"False\". Please refer to Note section for more information about\n   Redis and please refer to this `link <https://v2.developer.pagerduty.com/docs/rate-limiting>`_\n   for more details about API rate limit.\n-  redis: enter the server and database information to get access to\n   redis database, if you opt to use redis to store the job cache\n-  batchy: enter the server and port information to connect to your\n   scheduled batch jobs\n-  function\\_type: you can enter either \"email\" for daily email check or\n   \"batchy\" for intraday job latency check or both, separated by comma\n-  heartbeat: enter the \"Integration Key\" of the startup service created\n   on PagerDuty. It usually consists of 32 characters. Since we\n   recommend users to restart the robopager application at regular\n   intervals to avoid the unnecessary crash-down of the checks,\n   heartbeat as a service can notify user that robopager has restarted\n   successfully\n-  timezone: your local timezone to make sure the correct delivery time.\n   You can use the code below to search the correct timezone:\n\n   ::\n\n       import pytz\n       for tz in pytz.all_timezones:\n           print tz\n\n2. checklist.yaml\n~~~~~~~~~~~~~~~~~\n\nThis file lists the information of all the jobs that you want to\nmonitor. Each job must have a unique name. You could find examples below\nfor both types of job.\n\n**Daily Email Checks**\n\n-  type: email\n-  pd\\_description: a brief description of the check job\n-  pd\\_service: the \"Integration Key\" of a PagerDuty service only for this\n   specific job, usually consists of 32 characters\n-  senders: list of senders that robopager will be monitoring\n   for particular emails\n-  delivery\\_time: the expected delivery time of emails you are monitoring;\n   emails received before this time will not be scanned.\n   Please pay attention to your local timezone\n-  check\\_time: the time at which robopager actually starts checking for delivery.\n   Even if an email is expected to arrive at 7:00AM we may wait untill 7:15 to\n   account for minor latency and avoid false alarms. Please pay attention to\n   pass the time that is in the same timezone where you run the jobs,\n   such as your local computer or cloud server, etc.\n-  subjects: a list of email subjects requires to satisify the check\n\n   ::\n\n    unique_email_check_job_name:\n        type: email\n        pd_description: \"Check whether you are OK\"\n        pd_service: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n        senders: ['email_address@gmail.com']\n        delivery_time: 03:00\n        check_time: 03:15\n        subjects:\n            - \"Great - You look awesome!\"\n            - \"Good - You look OK!\"\n\n**Intraday Latency Check**\n\n-  type: batchy\n-  pd\\_description: a brief description of the check job\n-  pd\\_service: the \"Integration Key\" of a PagerDuty service only for\n   this specific job, usually consists of 32 characters\n-  wf\\_name: name of the scheduled workflow you want to monitor,\n   please enter the correct and accurate name\n-  check\\_time: the time at which robopager actually starts checking\n-  poll\\_sec: the number of seconds in between checks\n-  latency\\_min: when it has been more than x minutes from last end time\n   a failure will be generated, warnings at 80% of threshold\n\n   ::\n\n    unique_latency_check_name:\n        type: batchy\n        pd_description: \"intraday latency check for xxxx job\"\n        pd_service: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n        wf_name: \"intraday_latency_check\"\n        check_time: \"09:00\"\n        poll_sec: 180\n        latency_min: 60\n\nQuick Start\n-----------\n\nAfter finish all the setups above, you can start to use the tool to help\nmonitor you scheduled jobs. \nRobopager has two modes:\n\n-  Single Job Mode: This will run the specific check and exit when complete. Execute with\n   a -c parameter and a specific job name you want to run. For example:\n\n   ::\n\n    python3 -m robopager.robopager -c unique_email_check_job_name -y checklist_file_path\n    -cf core -p config_file_path\n\n-  Service Mode: This will execute all the check jobs in the\n   checklist.yaml file.\n\n   ::\n\n       python3 -m robopager.robopager -y checklist_file_path -cf core -p config_file_path\n\n*Notice: This module uses datacoco\\_core's config() to parse the\nconfiguration file as default. We also integrate AWS Secret Manager as\nalternative configuration method to retriece your credentials but this\nfunction is still in progress. Please check back for update. The\nparameter \"-cf\" in command line is to choose whether using datacoco or\nsecret manager*\n\nNotes\n-----\n\n-  **Redis**: The main purpose of using Redis is to prevent Robopager\n   from being annoying. Using Redis allows PagerDuty to store the\n   incident history data in it. PagerDuty will check the state of the\n   last run in Redis and only create a new incident if the same key of\n   last run is not found (key is deterministic based on date + hour).\n   This will avoid PagerDuty from sending the same alerts in every run\n   during the check period. For each check, two key patterns of a new\n   incident will be created:\n\n   -  *jobname*: stores latest state for a check (success or failure)\n   -  *alert key*: stores pagerduty submission informaton\n\n   Below are a few helpful redis commands:\n\n   -  connect to redis cli, assuming database 1 will be used for\n      robopager: ``redis-cli -n 1``\n   -  list keys based on pattern: ``keys *`` or ``keys key_name*``\n   -  get all fields within a hash (Robopager stores all keys as\n      hashes): ``hgetall key_full_name``\n\n-  Robopager submits to PagerDuty using a deterministic key, therefore\n   you can have multiple Robopager instance running (for redundancy\n   without producing duplicate tickets). There is a special offset\\_sec\n   parameter in the PDInteraction class, setting this will have a\n   specific server wait the specified number of seconds before checking\n   state, and subsequently triggering incidents in Pagerduty. This will\n   prevent unnecessary API calls.\n-  Robopager will not yet reload the checklist.yaml if changed, it will\n   need to be restarted\n-  Finally, this is not a very sophisticated application (this\n   simplicity is deliberate), we are using features like threading and\n   some 0.x modules. So, we suggest rebooting or restarting the service\n   often (weekly or daily) to avoid the unnecessary crash-down of the\n   checks\n\nDevelopment\n-----------\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nIt is recommended to use the steps below to set up a virtual environment\nfor development:\n\n::\n\n    python3 -m venv <virtual env name>\n    source <virtual env name>/bin/activate\n    pip install -r requirements.txt\n\nTesting\n~~~~~~~\n\n::\n\n    pip install -r requirements-dev.txt\n\nTo run the testing suite, please modify the credentials in test\\_data\nfolder, then simply run the command:\n\n::\n\n    python3 -m unittest discover tests\n\nContributing\n------------\n\nContributions to Robopager are welcome! Please reference guidelines to\nhelp with setting up your development environment `here <https://github.com/equinoxfitness/robopager/blob/master/CONTRIBUTING.rst>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/equinoxfitness/robopager", "keywords": "job monitor,daily email check,intraday latency check", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "robopager", "package_url": "https://pypi.org/project/robopager/", "platform": "", "project_url": "https://pypi.org/project/robopager/", "project_urls": {"Homepage": "https://github.com/equinoxfitness/robopager"}, "release_url": "https://pypi.org/project/robopager/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Job monitor and alerting app by Equinox", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/robopager\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fafa37ea16666b300ada60a93b96f86eaeef006a/68747470733a2f2f62616467652e667572792e696f2f70792f726f626f70616765722e737667\"></a>\n<dl>\n<dt>. image:: <a href=\"https://api.codacy.com/project/badge/Grade/c0e6c19dc2d8471da1b1b6099e1e46a9\" rel=\"nofollow\">https://api.codacy.com/project/badge/Grade/c0e6c19dc2d8471da1b1b6099e1e46a9</a></dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><th>alt:</th><td>Codacy Badge</td>\n</tr>\n<tr><th>target:</th><td><a href=\"https://app.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/robopager&amp;utm_campaign=Badge_Grade_Dashboard\" rel=\"nofollow\">https://app.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=equinoxfitness/robopager&amp;utm_campaign=Badge_Grade_Dashboard</a></td>\n</tr>\n</tbody>\n</table>\n</dd>\n</dl>\n<a href=\"https://www.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=equinoxfitness/robopager&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Code Quality Grade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d9b89aa8baa2ccecc65de59220f21c74858606d/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6330653663313964633264383437316461316231623630393965316534366139\"></a>\n<a href=\"https://www.codacy.com/gh/equinoxfitness/robopager?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=equinoxfitness/robopager&amp;amp;utm_campaign=Badge_Coverage\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22a388b510ce611ca56fc583871a8e4a07bb2dc3/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f436f7665726167652f6330653663313964633264383437316461316231623630393965316534366139\"></a>\n<a href=\"https://github.com/equinoxfitness/robopager/blob/master/CODE_OF_CONDUCT.rst\" rel=\"nofollow\"><img alt=\"Code of Conduct\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/591d3b135d63fd7f255a3a299d1936e697eaaf27/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667\"></a>\n<p>Robopager is a job monitor and notification tool designed for daily\nemail check and job latency check. The daily email check function can\nhelp you to monitor your inbox and whether you receive the expected\nemails at a certain time on a daily basis. The job latency check\nfunction helps to monitor every few seconds or minutes whether your\nscheduled workflows finish on time. If emails are not received in an\nexpected timeframe or the scheduled jobs don\u2019t complete on time, you\nwill receive the alerts from PagerDuty in email, text message or phone\ncall depending on your choice.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Robopager requires Python 3.6+</p>\n<pre>python3 -m venv &lt;virtual environment name&gt;\nsource &lt;virtual environment name&gt;/bin/activate\npip install robopager\n</pre>\n</div>\n<div id=\"setup-instructions\">\n<h2>Setup Instructions</h2>\n<p>Before start using this tool, you need to configure the settings in the\n<strong>etl.cfg</strong> and create your <strong>checklist.yaml</strong> file. You can find\nexample files above and change to your own values. Detailed explanations\nas below.</p>\n<div id=\"etl-cfg\">\n<h3>1. etl.cfg</h3>\n<p>This file contains the loggin or server information of the applications\nor services that will be used in this tool, such as your monitored\nemail, PagerDuty service and other servers. It also has the settings for\nyou to choose the function mode.</p>\n<ul>\n<li><p>google_apps: enter the email address you want to monitor and use\nb64encode to encrypt your password for security concerns</p>\n</li>\n<li><p>pager_duty: enter the information of the subdomain you will use and\nthe API access key for authentication</p>\n</li>\n<li><p>enable_redis: enter \u201cTrue\u201d if you want to use Redis, which is highly\nrecommended because of API rate limit in PagerDuty; otherwise\n\u201cFalse\u201d. Please refer to Note section for more information about\nRedis and please refer to this <a href=\"https://v2.developer.pagerduty.com/docs/rate-limiting\" rel=\"nofollow\">link</a>\nfor more details about API rate limit.</p>\n</li>\n<li><p>redis: enter the server and database information to get access to\nredis database, if you opt to use redis to store the job cache</p>\n</li>\n<li><p>batchy: enter the server and port information to connect to your\nscheduled batch jobs</p>\n</li>\n<li><p>function_type: you can enter either \u201cemail\u201d for daily email check or\n\u201cbatchy\u201d for intraday job latency check or both, separated by comma</p>\n</li>\n<li><p>heartbeat: enter the \u201cIntegration Key\u201d of the startup service created\non PagerDuty. It usually consists of 32 characters. Since we\nrecommend users to restart the robopager application at regular\nintervals to avoid the unnecessary crash-down of the checks,\nheartbeat as a service can notify user that robopager has restarted\nsuccessfully</p>\n</li>\n<li><p>timezone: your local timezone to make sure the correct delivery time.\nYou can use the code below to search the correct timezone:</p>\n<pre>import pytz\nfor tz in pytz.all_timezones:\n    print tz\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"checklist-yaml\">\n<h3>2. checklist.yaml</h3>\n<p>This file lists the information of all the jobs that you want to\nmonitor. Each job must have a unique name. You could find examples below\nfor both types of job.</p>\n<p><strong>Daily Email Checks</strong></p>\n<ul>\n<li><p>type: email</p>\n</li>\n<li><p>pd_description: a brief description of the check job</p>\n</li>\n<li><p>pd_service: the \u201cIntegration Key\u201d of a PagerDuty service only for this\nspecific job, usually consists of 32 characters</p>\n</li>\n<li><p>senders: list of senders that robopager will be monitoring\nfor particular emails</p>\n</li>\n<li><p>delivery_time: the expected delivery time of emails you are monitoring;\nemails received before this time will not be scanned.\nPlease pay attention to your local timezone</p>\n</li>\n<li><p>check_time: the time at which robopager actually starts checking for delivery.\nEven if an email is expected to arrive at 7:00AM we may wait untill 7:15 to\naccount for minor latency and avoid false alarms. Please pay attention to\npass the time that is in the same timezone where you run the jobs,\nsuch as your local computer or cloud server, etc.</p>\n</li>\n<li><p>subjects: a list of email subjects requires to satisify the check</p>\n<pre>unique_email_check_job_name:\n    type: email\n    pd_description: \"Check whether you are OK\"\n    pd_service: 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    senders: ['email_address@gmail.com']\n    delivery_time: 03:00\n    check_time: 03:15\n    subjects:\n        - \"Great - You look awesome!\"\n        - \"Good - You look OK!\"\n</pre>\n</li>\n</ul>\n<p><strong>Intraday Latency Check</strong></p>\n<ul>\n<li><p>type: batchy</p>\n</li>\n<li><p>pd_description: a brief description of the check job</p>\n</li>\n<li><p>pd_service: the \u201cIntegration Key\u201d of a PagerDuty service only for\nthis specific job, usually consists of 32 characters</p>\n</li>\n<li><p>wf_name: name of the scheduled workflow you want to monitor,\nplease enter the correct and accurate name</p>\n</li>\n<li><p>check_time: the time at which robopager actually starts checking</p>\n</li>\n<li><p>poll_sec: the number of seconds in between checks</p>\n</li>\n<li><p>latency_min: when it has been more than x minutes from last end time\na failure will be generated, warnings at 80% of threshold</p>\n<pre>unique_latency_check_name:\n    type: batchy\n    pd_description: \"intraday latency check for xxxx job\"\n    pd_service: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    wf_name: \"intraday_latency_check\"\n    check_time: \"09:00\"\n    poll_sec: 180\n    latency_min: 60\n</pre>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>After finish all the setups above, you can start to use the tool to help\nmonitor you scheduled jobs.\nRobopager has two modes:</p>\n<ul>\n<li><p>Single Job Mode: This will run the specific check and exit when complete. Execute with\na -c parameter and a specific job name you want to run. For example:</p>\n<pre>python3 -m robopager.robopager -c unique_email_check_job_name -y checklist_file_path\n-cf core -p config_file_path\n</pre>\n</li>\n<li><p>Service Mode: This will execute all the check jobs in the\nchecklist.yaml file.</p>\n<pre>python3 -m robopager.robopager -y checklist_file_path -cf core -p config_file_path\n</pre>\n</li>\n</ul>\n<p><em>Notice: This module uses datacoco_core\u2019s config() to parse the\nconfiguration file as default. We also integrate AWS Secret Manager as\nalternative configuration method to retriece your credentials but this\nfunction is still in progress. Please check back for update. The\nparameter \u201c-cf\u201d in command line is to choose whether using datacoco or\nsecret manager</em></p>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<ul>\n<li><p><strong>Redis</strong>: The main purpose of using Redis is to prevent Robopager\nfrom being annoying. Using Redis allows PagerDuty to store the\nincident history data in it. PagerDuty will check the state of the\nlast run in Redis and only create a new incident if the same key of\nlast run is not found (key is deterministic based on date + hour).\nThis will avoid PagerDuty from sending the same alerts in every run\nduring the check period. For each check, two key patterns of a new\nincident will be created:</p>\n<ul>\n<li><em>jobname</em>: stores latest state for a check (success or failure)</li>\n<li><em>alert key</em>: stores pagerduty submission informaton</li>\n</ul>\n<p>Below are a few helpful redis commands:</p>\n<ul>\n<li>connect to redis cli, assuming database 1 will be used for\nrobopager: <tt><span class=\"pre\">redis-cli</span> <span class=\"pre\">-n</span> 1</tt></li>\n<li>list keys based on pattern: <tt>keys *</tt> or <tt>keys key_name*</tt></li>\n<li>get all fields within a hash (Robopager stores all keys as\nhashes): <tt>hgetall key_full_name</tt></li>\n</ul>\n</li>\n<li><p>Robopager submits to PagerDuty using a deterministic key, therefore\nyou can have multiple Robopager instance running (for redundancy\nwithout producing duplicate tickets). There is a special offset_sec\nparameter in the PDInteraction class, setting this will have a\nspecific server wait the specified number of seconds before checking\nstate, and subsequently triggering incidents in Pagerduty. This will\nprevent unnecessary API calls.</p>\n</li>\n<li><p>Robopager will not yet reload the checklist.yaml if changed, it will\nneed to be restarted</p>\n</li>\n<li><p>Finally, this is not a very sophisticated application (this\nsimplicity is deliberate), we are using features like threading and\nsome 0.x modules. So, we suggest rebooting or restarting the service\noften (weekly or daily) to avoid the unnecessary crash-down of the\nchecks</p>\n</li>\n</ul>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>It is recommended to use the steps below to set up a virtual environment\nfor development:</p>\n<pre>python3 -m venv &lt;virtual env name&gt;\nsource &lt;virtual env name&gt;/bin/activate\npip install -r requirements.txt\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<pre>pip install -r requirements-dev.txt\n</pre>\n<p>To run the testing suite, please modify the credentials in test_data\nfolder, then simply run the command:</p>\n<pre>python3 -m unittest discover tests\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions to Robopager are welcome! Please reference guidelines to\nhelp with setting up your development environment <a href=\"https://github.com/equinoxfitness/robopager/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">here</a></p>\n</div>\n\n          </div>"}, "last_serial": 6896620, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6220b9156c03625ab281d0897a01d527", "sha256": "47d2be7c51200b657f6f93283adca4d7098659a6e4971896abb3ce4c7ab20b65"}, "downloads": -1, "filename": "robopager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6220b9156c03625ab281d0897a01d527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11163, "upload_time": "2020-03-27T14:38:18", "upload_time_iso_8601": "2020-03-27T14:38:18.430778Z", "url": "https://files.pythonhosted.org/packages/ca/32/a524fc07780487c2935efbf4b64db1115b534bdd6cd9c2a014afe04aa5d7/robopager-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6220b9156c03625ab281d0897a01d527", "sha256": "47d2be7c51200b657f6f93283adca4d7098659a6e4971896abb3ce4c7ab20b65"}, "downloads": -1, "filename": "robopager-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6220b9156c03625ab281d0897a01d527", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11163, "upload_time": "2020-03-27T14:38:18", "upload_time_iso_8601": "2020-03-27T14:38:18.430778Z", "url": "https://files.pythonhosted.org/packages/ca/32/a524fc07780487c2935efbf4b64db1115b534bdd6cd9c2a014afe04aa5d7/robopager-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:01 2020"}