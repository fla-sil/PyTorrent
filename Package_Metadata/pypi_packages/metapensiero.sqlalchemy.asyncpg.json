{"info": {"author": "Lele Gaifax", "author_email": "lele@metapensiero.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.sqlalchemy.asyncpg -- SQLAlchemy adaptor for asyncpg\n.. :Created:   Tue 20 Dec 2016 21:17:12 CET\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: \u00a9 2016, 2017 Lele Gaifax\n..\n\n=================================\n metapensiero.sqlalchemy.asyncpg\n=================================\n\nSQLAlchemy adaptor for asyncpg\n==============================\n\n :author: Lele Gaifax\n :contact: lele@metapensiero.it\n :license: GNU General Public License version 3 or later\n\nThis is a Python 3 package, spin-off from the proprietary ``Ytefas`` application, that\nimplements the ability of executing SQLAlchemy core statements through asyncpg__, in a\ncleaner way than asyncpgsa__ (I'm biased, of course \ud83d\ude1c): the main difference is that it\nuses explicitly typed parameter placeholders, to avoid `the problem`__ that initially\nprompted me to write this package.\n\nIt emits ``DEBUG`` logs with `prettified`__ SQL statements, with *parameters* resolved to\nthe actual *values*, and supplies an asyncpg variant of `metapensiero.sqlalchemy.proxy`__\n\\ 's ProxiedQuery__.\n\n\n__ https://pypi.python.org/pypi/asyncpg\n__ https://pypi.python.org/pypi/asyncpgsa\n__ https://github.com/MagicStack/asyncpg/issues/32\n__ https://pypi.python.org/pypi/metapensiero.sqlalchemy.proxy\n__ http://metapensierosqlalchemyproxy.readthedocs.io/en/latest/\\\n   core.html#metapensiero.sqlalchemy.proxy.core.ProxiedQuery\n__ http://pg-query.readthedocs.io/en/latest/\n\n\nTypical usage\n-------------\n\nThe following script:\n\n.. code-block:: python\n\n  import asyncio\n  from datetime import date\n  import logging\n\n  import sqlalchemy as sa\n  from asyncpg import create_pool\n  from asyncpg.types import Range\n  from metapensiero.sqlalchemy import asyncpg as sasyncpg\n\n\n  async def dml_tests(connection):\n      sasyncpg_test = sa.Table('sasyncpg_test', sa.MetaData(),\n                               sa.Column('id', sa.types.Integer, primary_key=True),\n                               sa.Column('value', sa.types.Text),\n                               sa.Column('period', sa.dialects.postgresql.DATERANGE))\n\n      value = 'First test'\n      insert_stmt = sasyncpg_test.insert().values(id=1, value=value)\n      await connection.execute(insert_stmt)\n\n      new_value = 'Second test'\n      update_stmt = (sasyncpg_test.update()\n                     .values(value=new_value,\n                             period=Range(date(2016, 2, 1), date(2016, 3, 1)))\n                     .where(sasyncpg_test.c.id == 1))\n      await connection.execute(update_stmt)\n\n      select_stmt = (sa.select([sasyncpg_test.c.value])\n                     .where(sasyncpg_test.c.id == sa.bindparam('id')))\n      for row in await connection.fetchall(select_stmt, named_args={'id': 1}):\n          print('Row:', row)\n\n      single_row = (sa.select([sasyncpg_test])\n                    .where(sasyncpg_test.c.period.contains(date(2016, 2, 15))))\n      print('Row:', await connection.fetchone(single_row))\n\n\n  async def run(loop):\n      pool = await create_pool(database=\"test\", loop=loop)\n\n      async with pool.acquire() as apgc:\n          connection = sasyncpg.Connection(apgc)\n\n          query = sa.select([sa.func.version()])\n          result = await connection.scalar(query)\n          print(\"PostgreSQL version:\", result)\n\n          await connection.execute('create table sasyncpg_test ('\n                                   ' id integer not null primary key,'\n                                   ' value text,'\n                                   ' period daterange)')\n\n          try:\n              await dml_tests(connection)\n          finally:\n              await connection.execute('DROP TABLE sasyncpg_test')\n\n\n  def main():\n      loop = asyncio.get_event_loop()\n      loop.run_until_complete(run(loop))\n\n\n  if __name__ == '__main__':\n      logging.basicConfig(level=logging.DEBUG)\n      main()\n\nproduces something like::\n\n  DEBUG:asyncio:Using selector: EpollSelector\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching scalar in transaction 9ddb60:\n      SELECT version() AS version_1\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched value in 869 \u00b5sec\n  PostgreSQL version: PostgreSQL 9.6.6 on x86_64-pc-linux-gnu, compiled by gcc (Debian 7.2.0-12) 7.2.1 20171025, 64-bit\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n      CREATE TABLE sasyncpg_test (\n          id integer NOT NULL PRIMARY KEY, value text, period daterange\n      )\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 97.1 msec\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n      INSERT INTO sasyncpg_test (id, value)\n      VALUES (1::integer, 'First test'::text)\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 1.26 msec\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n      UPDATE sasyncpg_test\n      SET value = 'Second test'::text, period = '[2016-02-01,2016-03-01)'::daterange\n      WHERE sasyncpg_test.id = 1::integer\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 14.1 msec\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching rows in transaction 9ddb60:\n      SELECT sasyncpg_test.value\n      FROM sasyncpg_test\n      WHERE sasyncpg_test.id = 1::integer\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched 1 records in 909 \u00b5sec\n  Row: <Record value='Second test'>\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching row in transaction 9ddb60:\n      SELECT sasyncpg_test.id, sasyncpg_test.value, sasyncpg_test.period\n      FROM sasyncpg_test\n      WHERE sasyncpg_test.period @> datetime.date(2016, 2, 15)::date\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched one record in 951 \u00b5sec\n  Row: <Record id=1 value='Second test' period=<Range [datetime.date(2016, 2, 1), datetime.date(2016, 3, 1))>>\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n      DROP TABLE sasyncpg_test RESTRICT\n  DEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 12 msec\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n0.1 (2017-12-03)\n~~~~~~~~~~~~~~~~\n\n- Standalone package, released under GPLv3\n\n\n0.0 (unreleased)\n~~~~~~~~~~~~~~~~\n\n- Initial effort.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/metapensiero/metapensiero.sqlalchemy.asyncpg.git", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "metapensiero.sqlalchemy.asyncpg", "package_url": "https://pypi.org/project/metapensiero.sqlalchemy.asyncpg/", "platform": "", "project_url": "https://pypi.org/project/metapensiero.sqlalchemy.asyncpg/", "project_urls": {"Homepage": "https://gitlab.com/metapensiero/metapensiero.sqlalchemy.asyncpg.git"}, "release_url": "https://pypi.org/project/metapensiero.sqlalchemy.asyncpg/0.1/", "requires_dist": null, "requires_python": "", "summary": "SQLAlchemy adaptor for asyncpg", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>author:</th><td>Lele Gaifax</td>\n</tr>\n<tr><th>contact:</th><td><a href=\"mailto:lele%40metapensiero.it\">lele<span>@</span>metapensiero<span>.</span>it</a></td>\n</tr>\n<tr><th>license:</th><td>GNU General Public License version 3 or later</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>This is a Python 3 package, spin-off from the proprietary <tt>Ytefas</tt> application, that\nimplements the ability of executing SQLAlchemy core statements through <a href=\"https://pypi.python.org/pypi/asyncpg\" rel=\"nofollow\">asyncpg</a>, in a\ncleaner way than <a href=\"https://pypi.python.org/pypi/asyncpgsa\" rel=\"nofollow\">asyncpgsa</a> (I\u2019m biased, of course \ud83d\ude1c): the main difference is that it\nuses explicitly typed parameter placeholders, to avoid <a href=\"https://github.com/MagicStack/asyncpg/issues/32\" rel=\"nofollow\">the problem</a> that initially\nprompted me to write this package.</p>\n<p>It emits <tt>DEBUG</tt> logs with <a href=\"https://pypi.python.org/pypi/metapensiero.sqlalchemy.proxy\" rel=\"nofollow\">prettified</a> SQL statements, with <em>parameters</em> resolved to\nthe actual <em>values</em>, and supplies an asyncpg variant of <a href=\"http://metapensierosqlalchemyproxy.readthedocs.io/en/latest/%20core.html#metapensiero.sqlalchemy.proxy.core.ProxiedQuery\" rel=\"nofollow\">metapensiero.sqlalchemy.proxy</a>\n\u2018s <a href=\"http://pg-query.readthedocs.io/en/latest/\" rel=\"nofollow\">ProxiedQuery</a>.</p>\n<div id=\"typical-usage\">\n<h2>Typical usage</h2>\n<p>The following script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asyncpg</span> <span class=\"kn\">import</span> <span class=\"n\">create_pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">asyncpg.types</span> <span class=\"kn\">import</span> <span class=\"n\">Range</span>\n<span class=\"kn\">from</span> <span class=\"nn\">metapensiero.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">asyncpg</span> <span class=\"k\">as</span> <span class=\"n\">sasyncpg</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">dml_tests</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">):</span>\n    <span class=\"n\">sasyncpg_test</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'sasyncpg_test'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">MetaData</span><span class=\"p\">(),</span>\n                             <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n                             <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">),</span>\n                             <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'period'</span><span class=\"p\">,</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">dialects</span><span class=\"o\">.</span><span class=\"n\">postgresql</span><span class=\"o\">.</span><span class=\"n\">DATERANGE</span><span class=\"p\">))</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'First test'</span>\n    <span class=\"n\">insert_stmt</span> <span class=\"o\">=</span> <span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">insert_stmt</span><span class=\"p\">)</span>\n\n    <span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"s1\">'Second test'</span>\n    <span class=\"n\">update_stmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n                   <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">new_value</span><span class=\"p\">,</span>\n                           <span class=\"n\">period</span><span class=\"o\">=</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n                   <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">update_stmt</span><span class=\"p\">)</span>\n\n    <span class=\"n\">select_stmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">])</span>\n                   <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">bindparam</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)))</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">(</span><span class=\"n\">select_stmt</span><span class=\"p\">,</span> <span class=\"n\">named_args</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Row:'</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span>\n\n    <span class=\"n\">single_row</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">sasyncpg_test</span><span class=\"p\">])</span>\n                  <span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">sasyncpg_test</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Row:'</span><span class=\"p\">,</span> <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">(</span><span class=\"n\">single_row</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">create_pool</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">apgc</span><span class=\"p\">:</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">sasyncpg</span><span class=\"o\">.</span><span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">apgc</span><span class=\"p\">)</span>\n\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">()])</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"PostgreSQL version:\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n\n        <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'create table sasyncpg_test ('</span>\n                                 <span class=\"s1\">' id integer not null primary key,'</span>\n                                 <span class=\"s1\">' value text,'</span>\n                                 <span class=\"s1\">' period daterange)'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">dml_tests</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">'DROP TABLE sasyncpg_test'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>produces something like:</p>\n<pre>DEBUG:asyncio:Using selector: EpollSelector\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching scalar in transaction 9ddb60:\n    SELECT version() AS version_1\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched value in 869 \u00b5sec\nPostgreSQL version: PostgreSQL 9.6.6 on x86_64-pc-linux-gnu, compiled by gcc (Debian 7.2.0-12) 7.2.1 20171025, 64-bit\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n    CREATE TABLE sasyncpg_test (\n        id integer NOT NULL PRIMARY KEY, value text, period daterange\n    )\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 97.1 msec\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n    INSERT INTO sasyncpg_test (id, value)\n    VALUES (1::integer, 'First test'::text)\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 1.26 msec\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n    UPDATE sasyncpg_test\n    SET value = 'Second test'::text, period = '[2016-02-01,2016-03-01)'::daterange\n    WHERE sasyncpg_test.id = 1::integer\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 14.1 msec\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching rows in transaction 9ddb60:\n    SELECT sasyncpg_test.value\n    FROM sasyncpg_test\n    WHERE sasyncpg_test.id = 1::integer\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched 1 records in 909 \u00b5sec\nRow: &lt;Record value='Second test'&gt;\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetching row in transaction 9ddb60:\n    SELECT sasyncpg_test.id, sasyncpg_test.value, sasyncpg_test.period\n    FROM sasyncpg_test\n    WHERE sasyncpg_test.period @&gt; datetime.date(2016, 2, 15)::date\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Fetched one record in 951 \u00b5sec\nRow: &lt;Record id=1 value='Second test' period=&lt;Range [datetime.date(2016, 2, 1), datetime.date(2016, 3, 1))&gt;&gt;\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Executing in transaction 9ddb60:\n    DROP TABLE sasyncpg_test RESTRICT\nDEBUG:metapensiero.sqlalchemy.asyncpg.funcs:Execution took 12 msec\n</pre>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id7\">\n<h3>0.1 (2017-12-03)</h3>\n<ul>\n<li>Standalone package, released under GPLv3</li>\n</ul>\n</div>\n<div id=\"unreleased\">\n<h3>0.0 (unreleased)</h3>\n<ul>\n<li>Initial effort.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3384600, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b2b583094f60f78fffcb634093148a71", "sha256": "0399642907cb00d3c9f2c8401867747defd3f19981d4af8b9a9153c0d4599dcb"}, "downloads": -1, "filename": "metapensiero.sqlalchemy.asyncpg-0.1.tar.gz", "has_sig": false, "md5_digest": "b2b583094f60f78fffcb634093148a71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19599, "upload_time": "2017-12-03T11:56:31", "upload_time_iso_8601": "2017-12-03T11:56:31.628385Z", "url": "https://files.pythonhosted.org/packages/da/b1/c94df67930b6fe2e382734f991a1908207166dbf2f322ff92f06a777c2e9/metapensiero.sqlalchemy.asyncpg-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2b583094f60f78fffcb634093148a71", "sha256": "0399642907cb00d3c9f2c8401867747defd3f19981d4af8b9a9153c0d4599dcb"}, "downloads": -1, "filename": "metapensiero.sqlalchemy.asyncpg-0.1.tar.gz", "has_sig": false, "md5_digest": "b2b583094f60f78fffcb634093148a71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19599, "upload_time": "2017-12-03T11:56:31", "upload_time_iso_8601": "2017-12-03T11:56:31.628385Z", "url": "https://files.pythonhosted.org/packages/da/b1/c94df67930b6fe2e382734f991a1908207166dbf2f322ff92f06a777c2e9/metapensiero.sqlalchemy.asyncpg-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:51 2020"}