{"info": {"author": "Thierry Spetebroot <thierry.spetebroot@gmail.com>", "author_email": "thierry.spetebroot@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "# aio-timers\n\n[![PyPI - License](https://img.shields.io/pypi/l/aio-times.svg?longCache=true&&style=flat-square)](https://github.com/ThierrySpetebroot/aio-timers/blob/master/LICENSE)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aio-times.svg?longCache=true&&style=flat-square)\n[![PyPI](https://img.shields.io/pypi/v/aio-times.svg?longCache=true&&style=flat-square)](https://test.pypi.org/project/aio-timers/)\n\n\nTiming utilities based on `asyncio`.\n\n## Setup\n`pip install aio-timers`\n\n## Usage\n```python\nimport asyncio\nfrom aio_timers import Timer\n\ndef callback(name):\n    print(\"Hello {}!\".format(name))\n\n# timer is scheduled here\ntimer = Timer(5, callback, callback_args=(\"World\",))\n\n# wait until the callback has been executed\nloop = asyncio.get_event_loop()\nloop.run_until_complete(timer.wait())\nprint(\"end\")\n```\n\nOutput:\n\n(after 5 seconds)\n> Hello World!\n>\n> end\n\n### Timer\n\nCalls a `callback` after `delay` seconds.\n\nThe timer is executed as a task on an event loop.\n\nThe callback is invoked:\n - as a synchronous function if it is not a coroutine;\n - with an await if it is a coroutine or the `callback_async` flag is set to `True`.\n\nAny result returned by the callback is ignored.\n\n#### Constructor\n`Timer(delay, callback, callback_args=(), callback_kwargs={}, callback_async=False, *, loop=None)`\n\nwhere:\n - delay, seconds before the `callback` is executed;\n - callback, the callback to execute after `delay` seconds\n - callback_args, (optional, default=`()`) positional arguments to pass to `callback`\n - callback_kwargs, (optional, default=`{}`) keyword arguments to pass to `callback`\n - callback_async, (optional, default=`False`) if `True` the callback will be executed on the event loop (`await`)\n - loop, (optional, default=`None`) event loop where the delayed task will be scheduled (if`None` will use `asyncio.get_event_loop()`)\n\nNOTE: the `callback_async` flag should be used when a coroutine is decorated (e.g., using `functools.partial`)\n\n#### .cancel()\nCancels the execution of the callback.\n\n#### async .wait()\nWait until the callback has been executed or its execution has been canceled.\n\nIf the execution has been canceled, will raise `asyncio.CancelledError`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ThierrySpetebroot/aio-timers", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "aio-timers", "package_url": "https://pypi.org/project/aio-timers/", "platform": "all", "project_url": "https://pypi.org/project/aio-timers/", "project_urls": {"Homepage": "https://github.com/ThierrySpetebroot/aio-timers"}, "release_url": "https://pypi.org/project/aio-timers/0.0.1/", "requires_dist": null, "requires_python": ">=3.5.*, <4", "summary": "Timer support for asyncio.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aio-timers</h1>\n<p><a href=\"https://github.com/ThierrySpetebroot/aio-timers/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5b801776bc4245b81649c1adc98b20f51a08212/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f61696f2d74696d65732e7376673f6c6f6e6743616368653d7472756526267374796c653d666c61742d737175617265\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b907bba993b53fe129a4805569d5fb65cbbed690/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696f2d74696d65732e7376673f6c6f6e6743616368653d7472756526267374796c653d666c61742d737175617265\">\n<a href=\"https://test.pypi.org/project/aio-timers/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/899b64e45cf878bb15dfe9df59ce3ca56c0b7b30/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696f2d74696d65732e7376673f6c6f6e6743616368653d7472756526267374796c653d666c61742d737175617265\"></a></p>\n<p>Timing utilities based on <code>asyncio</code>.</p>\n<h2>Setup</h2>\n<p><code>pip install aio-timers</code></p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aio_timers</span> <span class=\"kn\">import</span> <span class=\"n\">Timer</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello </span><span class=\"si\">{}</span><span class=\"s2\">!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># timer is scheduled here</span>\n<span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">Timer</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">callback_args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"World\"</span><span class=\"p\">,))</span>\n\n<span class=\"c1\"># wait until the callback has been executed</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"end\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<p>(after 5 seconds)</p>\n<blockquote>\n<p>Hello World!</p>\n<p>end</p>\n</blockquote>\n<h3>Timer</h3>\n<p>Calls a <code>callback</code> after <code>delay</code> seconds.</p>\n<p>The timer is executed as a task on an event loop.</p>\n<p>The callback is invoked:</p>\n<ul>\n<li>as a synchronous function if it is not a coroutine;</li>\n<li>with an await if it is a coroutine or the <code>callback_async</code> flag is set to <code>True</code>.</li>\n</ul>\n<p>Any result returned by the callback is ignored.</p>\n<h4>Constructor</h4>\n<p><code>Timer(delay, callback, callback_args=(), callback_kwargs={}, callback_async=False, *, loop=None)</code></p>\n<p>where:</p>\n<ul>\n<li>delay, seconds before the <code>callback</code> is executed;</li>\n<li>callback, the callback to execute after <code>delay</code> seconds</li>\n<li>callback_args, (optional, default=<code>()</code>) positional arguments to pass to <code>callback</code></li>\n<li>callback_kwargs, (optional, default=<code>{}</code>) keyword arguments to pass to <code>callback</code></li>\n<li>callback_async, (optional, default=<code>False</code>) if <code>True</code> the callback will be executed on the event loop (<code>await</code>)</li>\n<li>loop, (optional, default=<code>None</code>) event loop where the delayed task will be scheduled (if<code>None</code> will use <code>asyncio.get_event_loop()</code>)</li>\n</ul>\n<p>NOTE: the <code>callback_async</code> flag should be used when a coroutine is decorated (e.g., using <code>functools.partial</code>)</p>\n<h4>.cancel()</h4>\n<p>Cancels the execution of the callback.</p>\n<h4>async .wait()</h4>\n<p>Wait until the callback has been executed or its execution has been canceled.</p>\n<p>If the execution has been canceled, will raise <code>asyncio.CancelledError</code>.</p>\n\n          </div>"}, "last_serial": 4097740, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d1febbd2550cd917ea8a2d4d38303e23", "sha256": "56a51137f374d8cdcead20d0a139acc8ed29ca500434b26915cbd8bd76f680fc"}, "downloads": -1, "filename": "aio-timers-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d1febbd2550cd917ea8a2d4d38303e23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.*, <4", "size": 3299, "upload_time": "2018-07-24T17:15:42", "upload_time_iso_8601": "2018-07-24T17:15:42.029222Z", "url": "https://files.pythonhosted.org/packages/e7/79/ed582e969701c57ca2010570d0e5f7cd9521b5be98befa4c4a97c958d574/aio-timers-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d1febbd2550cd917ea8a2d4d38303e23", "sha256": "56a51137f374d8cdcead20d0a139acc8ed29ca500434b26915cbd8bd76f680fc"}, "downloads": -1, "filename": "aio-timers-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d1febbd2550cd917ea8a2d4d38303e23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.*, <4", "size": 3299, "upload_time": "2018-07-24T17:15:42", "upload_time_iso_8601": "2018-07-24T17:15:42.029222Z", "url": "https://files.pythonhosted.org/packages/e7/79/ed582e969701c57ca2010570d0e5f7cd9521b5be98befa4c4a97c958d574/aio-timers-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:41 2020"}