{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "treetl: Running ETL tasks with tree-like dependencies\n=====================================================\n\nPipelines of batch jobs don't need to be linear. Sometimes there are shared intermediate transformations that can feed\nfuture steps in the process. **treetl** manages and runs collections of dependent ETL jobs by storing and registering\nthem as a `polytree <https://en.wikipedia.org/wiki/Polytree>`_.\n\nThis package was put together with `Spark <http://spark.apache.org/>`_ jobs in mind, so caching intermediate and\ncarrying results forward is top of mind. Due to this, one of the main benefits of **treetl** is that partial\njob results can be shared in memory.\n\nExample\n=======\n\nThe following set of jobs will all run exactly once and pass their transformed data (or some reference to it) to the\njobs dependent upon them.\n\n.. code:: python\n\n  from treetl import (\n    Job, JobRunner, JOB_STATUS\n  )\n\n  class JobA(Job):\n    def transform(self, **kwargs):\n      self.transformed_data = 1\n      return self\n\n  # JobB.transform can take a kwarg named\n  # a_param that corresponds to JobA().transformed_data\n  @Job.dependency(a_param=JobA)\n  class JobB(Job):\n    def transform(self, a_param=None, **kwargs):\n      self.transformed_data = a_param + 1\n      return self\n\n    def load(self, **kwargs):\n      # could save intermediate result self.transformed_data here\n      pass\n\n  @Job.dependency(some_b_param=JobB)\n  class JobC(Job):\n    pass\n\n  @Job.dependency(input_param=JobA)\n  class JobD(Job):\n    def transform(self, input_param=None, **kwargs):\n      self.transformed_data = input_param + 1\n      return self\n\n  @Job.dependency(in_one=JobB, in_two=JobD)\n  class JobE(Job):\n    def transform(self, in_one=None, in_two=None, **kwargs):\n      # do stuff with in_one.transformed_data and in_two.transformed_data\n      self.transformed_data = in_one + in_two\n\n  # order submitted doesn't matter\n  jobs = [ JobD(), JobC(), JobA(), JobB(), JobE() ]\n  job_runner = JobRunner(jobs)\n  if job_runner.run().status == JOB_STATUS.FAILED:\n    # to see this section in action add the following to\n    # def transform(self): raise ValueError()\n    # to the definition of JobD\n    print('Jobs failed')\n    print('Root jobs that caused the failure : {}'.format(job_runner.failed_job_roots()))\n    print('Paths to sources of failure       : {}'.format(job_runner.failed_job_root_paths()))\n  else:\n    print('Success!')\n    print('JobE transformed data: {}'.format(jobs[4].transformed_data))\n\n\nTODO\n====\n\n* Set parameters common to multiple jobs via the top level JobRunner\n* Set/pass state parameters to job methods\n* Support submitting a `JobRunner` as a job for nested job dependency graphs.\n* Run from a specific point in the tree. Allow for parents of starting point to retrieve last loaded data instead of recomputing the whole set of dependencies.\n* Ability to pass job attributes to component functions used in the decorator based definition of a job", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "treetl", "package_url": "https://pypi.org/project/treetl/", "platform": "any", "project_url": "https://pypi.org/project/treetl/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/treetl/1.3.0/", "requires_dist": null, "requires_python": null, "summary": "Job organizer for ETL tasks with tree like dependencies.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"treetl-running-etl-tasks-with-tree-like-dependencies\">\n<h2>treetl: Running ETL tasks with tree-like dependencies</h2>\n<p>Pipelines of batch jobs don\u2019t need to be linear. Sometimes there are shared intermediate transformations that can feed\nfuture steps in the process. <strong>treetl</strong> manages and runs collections of dependent ETL jobs by storing and registering\nthem as a <a href=\"https://en.wikipedia.org/wiki/Polytree\" rel=\"nofollow\">polytree</a>.</p>\n<p>This package was put together with <a href=\"http://spark.apache.org/\" rel=\"nofollow\">Spark</a> jobs in mind, so caching intermediate and\ncarrying results forward is top of mind. Due to this, one of the main benefits of <strong>treetl</strong> is that partial\njob results can be shared in memory.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The following set of jobs will all run exactly once and pass their transformed data (or some reference to it) to the\njobs dependent upon them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">treetl</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n  <span class=\"n\">Job</span><span class=\"p\">,</span> <span class=\"n\">JobRunner</span><span class=\"p\">,</span> <span class=\"n\">JOB_STATUS</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JobA</span><span class=\"p\">(</span><span class=\"n\">Job</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transformed_data</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<span class=\"c1\"># JobB.transform can take a kwarg named</span>\n<span class=\"c1\"># a_param that corresponds to JobA().transformed_data</span>\n<span class=\"nd\">@Job</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">(</span><span class=\"n\">a_param</span><span class=\"o\">=</span><span class=\"n\">JobA</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">JobB</span><span class=\"p\">(</span><span class=\"n\">Job</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transformed_data</span> <span class=\"o\">=</span> <span class=\"n\">a_param</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># could save intermediate result self.transformed_data here</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@Job</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">(</span><span class=\"n\">some_b_param</span><span class=\"o\">=</span><span class=\"n\">JobB</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">JobC</span><span class=\"p\">(</span><span class=\"n\">Job</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n\n<span class=\"nd\">@Job</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">(</span><span class=\"n\">input_param</span><span class=\"o\">=</span><span class=\"n\">JobA</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">JobD</span><span class=\"p\">(</span><span class=\"n\">Job</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_param</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transformed_data</span> <span class=\"o\">=</span> <span class=\"n\">input_param</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n<span class=\"nd\">@Job</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">(</span><span class=\"n\">in_one</span><span class=\"o\">=</span><span class=\"n\">JobB</span><span class=\"p\">,</span> <span class=\"n\">in_two</span><span class=\"o\">=</span><span class=\"n\">JobD</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">JobE</span><span class=\"p\">(</span><span class=\"n\">Job</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">in_one</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">in_two</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do stuff with in_one.transformed_data and in_two.transformed_data</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">transformed_data</span> <span class=\"o\">=</span> <span class=\"n\">in_one</span> <span class=\"o\">+</span> <span class=\"n\">in_two</span>\n\n<span class=\"c1\"># order submitted doesn't matter</span>\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"n\">JobD</span><span class=\"p\">(),</span> <span class=\"n\">JobC</span><span class=\"p\">(),</span> <span class=\"n\">JobA</span><span class=\"p\">(),</span> <span class=\"n\">JobB</span><span class=\"p\">(),</span> <span class=\"n\">JobE</span><span class=\"p\">()</span> <span class=\"p\">]</span>\n<span class=\"n\">job_runner</span> <span class=\"o\">=</span> <span class=\"n\">JobRunner</span><span class=\"p\">(</span><span class=\"n\">jobs</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">job_runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"n\">JOB_STATUS</span><span class=\"o\">.</span><span class=\"n\">FAILED</span><span class=\"p\">:</span>\n  <span class=\"c1\"># to see this section in action add the following to</span>\n  <span class=\"c1\"># def transform(self): raise ValueError()</span>\n  <span class=\"c1\"># to the definition of JobD</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Jobs failed'</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Root jobs that caused the failure : </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">job_runner</span><span class=\"o\">.</span><span class=\"n\">failed_job_roots</span><span class=\"p\">()))</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Paths to sources of failure       : </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">job_runner</span><span class=\"o\">.</span><span class=\"n\">failed_job_root_paths</span><span class=\"p\">()))</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Success!'</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'JobE transformed data: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">transformed_data</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Set parameters common to multiple jobs via the top level JobRunner</li>\n<li>Set/pass state parameters to job methods</li>\n<li>Support submitting a <cite>JobRunner</cite> as a job for nested job dependency graphs.</li>\n<li>Run from a specific point in the tree. Allow for parents of starting point to retrieve last loaded data instead of recomputing the whole set of dependencies.</li>\n<li>Ability to pass job attributes to component functions used in the decorator based definition of a job</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2204868, "releases": {"1.3.0": [{"comment_text": "", "digests": {"md5": "52659b82d384ce4785e8914a6f333950", "sha256": "59300ed8c9b9a31d7622524b7ee7925b54e89c4c0b02b31df82f50990b69d520"}, "downloads": -1, "filename": "treetl-1.3.0.tar.gz", "has_sig": false, "md5_digest": "52659b82d384ce4785e8914a6f333950", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14577, "upload_time": "2016-07-06T02:24:16", "upload_time_iso_8601": "2016-07-06T02:24:16.866569Z", "url": "https://files.pythonhosted.org/packages/d2/38/a3c9c2c4c40c2f34c36252c6e9d04b0a8ce1452262c6c5d9a15a2f9557a8/treetl-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52659b82d384ce4785e8914a6f333950", "sha256": "59300ed8c9b9a31d7622524b7ee7925b54e89c4c0b02b31df82f50990b69d520"}, "downloads": -1, "filename": "treetl-1.3.0.tar.gz", "has_sig": false, "md5_digest": "52659b82d384ce4785e8914a6f333950", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14577, "upload_time": "2016-07-06T02:24:16", "upload_time_iso_8601": "2016-07-06T02:24:16.866569Z", "url": "https://files.pythonhosted.org/packages/d2/38/a3c9c2c4c40c2f34c36252c6e9d04b0a8ce1452262c6c5d9a15a2f9557a8/treetl-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:32 2020"}