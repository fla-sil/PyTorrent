{"info": {"author": "pepoluan", "author_email": "pepoluan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\n multiworker\n=============\n\nBackground\n==========\n\nToday's computers are almost always multicore machines. However, due to CPython's GIL, exploiting these multiple cores\nare not simple. The ``multithreading`` module, for instance, are practically rendered impotent as multithreading won't\nhappen unless a thread is being tied up in an I/O operation.\n\nHowever, Python provides a way to actually harness multicore parallelism: The ``multiprocessing`` module.\n\nThe problem with ``multiprocessing`` is that you are given a very 'low-level' plumbing mechanism. It provides you with\ntools to create multiple (sub-)processes, tools to communicate between the (sub-)processes, tools to synchronize\nbetween the (sub-)processes... but that's about it. When you start making programs to harness ``multiprocessing``'s\npowers, you'll quickly find out that you have to keep building the exact same code structure. And along the way, you\nkeep 're-creating the wheel', so to speak.\n\nThis package aims to provide Python programmers with a 'slightly higher level' view of ``multiprocessing``, by removing\nthe necessity of keep having to create the 'harness' code.\n\n*In a nutshell*, this code aims to be to ``multiprocessing`` what ``requests`` did for ``urllib``: Abstracting all the\nplumbing and providing a more intuitive toolset to implement multicore-aware programs.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pepoluan/multiworker", "keywords": "multiprocessing parallel workers multiworker", "license": "MPL 2.0", "maintainer": null, "maintainer_email": null, "name": "multiworker", "package_url": "https://pypi.org/project/multiworker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/multiworker/", "project_urls": {"Homepage": "https://bitbucket.org/pepoluan/multiworker"}, "release_url": "https://pypi.org/project/multiworker/0.1.1a0.dev1/", "requires_dist": null, "requires_python": null, "summary": "Simpler multiprocessing framework", "version": "0.1.1a0.dev1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Today\u2019s computers are almost always multicore machines. However, due to CPython\u2019s GIL, exploiting these multiple cores\nare not simple. The <tt>multithreading</tt> module, for instance, are practically rendered impotent as multithreading won\u2019t\nhappen unless a thread is being tied up in an I/O operation.</p>\n<p>However, Python provides a way to actually harness multicore parallelism: The <tt>multiprocessing</tt> module.</p>\n<p>The problem with <tt>multiprocessing</tt> is that you are given a very \u2018low-level\u2019 plumbing mechanism. It provides you with\ntools to create multiple (sub-)processes, tools to communicate between the (sub-)processes, tools to synchronize\nbetween the (sub-)processes\u2026 but that\u2019s about it. When you start making programs to harness <tt>multiprocessing</tt>\u2019s\npowers, you\u2019ll quickly find out that you have to keep building the exact same code structure. And along the way, you\nkeep \u2018re-creating the wheel\u2019, so to speak.</p>\n<p>This package aims to provide Python programmers with a \u2018slightly higher level\u2019 view of <tt>multiprocessing</tt>, by removing\nthe necessity of keep having to create the \u2018harness\u2019 code.</p>\n<p><em>In a nutshell</em>, this code aims to be to <tt>multiprocessing</tt> what <tt>requests</tt> did for <tt>urllib</tt>: Abstracting all the\nplumbing and providing a more intuitive toolset to implement multicore-aware programs.</p>\n\n          </div>"}, "last_serial": 2055473, "releases": {"0.1.1a0.dev1": [{"comment_text": "", "digests": {"md5": "294b0a85440a5780b8e82c7f8dc40a54", "sha256": "9f987df74b3c7dd95e07741c1e090e444a60f7a2bc3dbc8d26139dfa63e05664"}, "downloads": -1, "filename": "multiworker-0.1.1a0.dev1.zip", "has_sig": false, "md5_digest": "294b0a85440a5780b8e82c7f8dc40a54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3735, "upload_time": "2016-04-09T20:19:31", "upload_time_iso_8601": "2016-04-09T20:19:31.253236Z", "url": "https://files.pythonhosted.org/packages/f2/8f/11eb2ad9fde308524b4dd57539164cc324f20315377a77330fb89767f20a/multiworker-0.1.1a0.dev1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "294b0a85440a5780b8e82c7f8dc40a54", "sha256": "9f987df74b3c7dd95e07741c1e090e444a60f7a2bc3dbc8d26139dfa63e05664"}, "downloads": -1, "filename": "multiworker-0.1.1a0.dev1.zip", "has_sig": false, "md5_digest": "294b0a85440a5780b8e82c7f8dc40a54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3735, "upload_time": "2016-04-09T20:19:31", "upload_time_iso_8601": "2016-04-09T20:19:31.253236Z", "url": "https://files.pythonhosted.org/packages/f2/8f/11eb2ad9fde308524b4dd57539164cc324f20315377a77330fb89767f20a/multiworker-0.1.1a0.dev1.zip", "yanked": false}], "timestamp": "Fri May  8 00:50:17 2020"}