{"info": {"author": "Maxim Kulkin", "author_email": "maxim.kulkin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "****************\nhypothesis-regex\n****************\n\n.. image:: https://img.shields.io/pypi/l/hypothesis-regex.svg\n    :target: https://github.com/maximkulkin/hypothesis-regex/blob/master/LICENSE\n    :alt: License: MIT\n\n.. image:: https://img.shields.io/travis/maximkulkin/hypothesis-regex.svg\n    :target: https://travis-ci.org/maximkulkin/hypothesis-regex\n    :alt: Build Status\n\n.. image:: https://img.shields.io/pypi/v/hypothesis-regex.svg\n    :target: https://pypi.python.org/pypi/hypothesis-regex\n    :alt: PyPI\n\n`Hypothesis <https://hypothesis.readthedocs.io/en/latest/>`_ extension \nto allow generating strings based on regex. Useful in case you have some schema\n(e.g. JSON Schema) which already has regular expressions validating data.\n\nExample\n=======\n\n.. code:: python\n\n    from hypothesis_regex import regex\n    import requests\n    import json\n\n    EMAIL_REGEX = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]{2,}\\.[a-zA-Z0-9-.]{2,}$\"\n\n    @given(regex(EMAIL_REGEX))\n    def test_registering_user(email):\n        response = requests.post('/signup', json.dumps({'email': email}))\n        assert response.status_code == 201\n\nFeatures\n========\n\nRegex strategy returns strings that always match given regex (this check is\nenforced by a filter) and it tries to do that in an effective way so that less\ngenerated examples are filtered out. However, some regex constructs may decrease\nstrategy efficiency and should be used with caution:\n\n* \"^\" and \"$\" in the middle of a string - do not do anything.\n* \"\\\\b\" and \"\\\\B\" (word boundary and not a word boundary) - do not do anything and\n  instead just rely on top-level regex match filter to filter out non-matching\n  examples.\n* positive lookaheads and lookbehinds just generate data they should match (as if\n  it was part of preceeding/following parts).\n* negative lookaheads and lookbehinds do not do anything so it relies on\n  preceeding/following parts to generate correct strings (otherwise the example will\n  be filtered out).\n* \"(?(id)yes-pattern|no-pattern)\" does not actually check if group with given id\n  was actually used and instead just generates either yes- or no-pattern.\n\nRegex strategy tries to go all crazy about generated data (e.g. \"$\" at the end of a\nstring either does not generate anything or generate a newline). The idea is not to\ngenerate a nicely looking strings but instead any craze unexpected combination that\nwill still match your given regex so you can prepare for those and handle them in\nmost apropriate way.\n\nYou can use regex flags to get more control on strategy:\n\n* re.IGNORECASE - literals or literal ranges generate both lowercase and uppercase\n  letters. E.g. `r'a'` will generate both `\"a\"` and `\"A\"`, or `'[a-z]'` will generate\n  both lowercase and uppercase english characters.\n* re.DOTALL - \".\" char will be able to generate newlines\n* re.UNICODE - character categories\n  (\"\\\\w\", \"\\\\d\" or \"\\\\s\" and their negations) will generate unicode characters.\n  This is default for Python 3, see re.ASCII to reverse it.\n\nThere are two ways to pass regex flags:\n\n1. By passing compiled regex with that flags: `regex(re.compile('abc', re.IGNORECASE))`\n2. By using inline flags syntax: `regex('(?i)abc')`\n\nInstallation\n============\n::\n\n    $ pip install hypothesis-regex\n\nRequirements\n============\n\n- Python >= 2.7 and <= 3.6\n- `hypothesis <https://pypi.python.org/pypi/hypothesis>`__ >= 3.8\n\nProject Links\n=============\n\n- PyPI: https://pypi.python.org/pypi/hypothesis-regex\n- Issues: https://github.com/maximkulkin/hypothesis-regex/issues\n\nLicense\n=======\n\nMIT licensed. See the bundled `LICENSE <https://github.com/maximkulkin/hypothesis-regex/blob/master/LICENSE>`_ file for more details.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maximkulkin/hypothesis-regex", "keywords": "hypothesis,regex", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hypothesis-regex", "package_url": "https://pypi.org/project/hypothesis-regex/", "platform": "", "project_url": "https://pypi.org/project/hypothesis-regex/", "project_urls": {"Homepage": "https://github.com/maximkulkin/hypothesis-regex"}, "release_url": "https://pypi.org/project/hypothesis-regex/0.3.1/", "requires_dist": ["hypothesis (>=3.8)", "six (>=1.10)"], "requires_python": "", "summary": "Hypothesis extension to allow generating strings based on regex", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/maximkulkin/hypothesis-regex/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4152d98ea5afc5c3125e2884503f0a723678ccbd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6879706f7468657369732d72656765782e737667\"></a>\n<a href=\"https://travis-ci.org/maximkulkin/hypothesis-regex\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32b8556d8dfb80140d3e1d5332cfada8c9c2bf7b/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6178696d6b756c6b696e2f6879706f7468657369732d72656765782e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/hypothesis-regex\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/293d83e30c1cad4b9a38dd4a9580d01a56aeb16d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6879706f7468657369732d72656765782e737667\"></a>\n<p><a href=\"https://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">Hypothesis</a> extension\nto allow generating strings based on regex. Useful in case you have some schema\n(e.g. JSON Schema) which already has regular expressions validating data.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hypothesis_regex</span> <span class=\"kn\">import</span> <span class=\"n\">regex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">EMAIL_REGEX</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]{2,}\\.[a-zA-Z0-9-.]{2,}$\"</span>\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"n\">EMAIL_REGEX</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_registering_user</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s1\">'/signup'</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"n\">email</span><span class=\"p\">}))</span>\n    <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">201</span>\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Regex strategy returns strings that always match given regex (this check is\nenforced by a filter) and it tries to do that in an effective way so that less\ngenerated examples are filtered out. However, some regex constructs may decrease\nstrategy efficiency and should be used with caution:</p>\n<ul>\n<li>\u201c^\u201d and \u201c$\u201d in the middle of a string - do not do anything.</li>\n<li>\u201c\\b\u201d and \u201c\\B\u201d (word boundary and not a word boundary) - do not do anything and\ninstead just rely on top-level regex match filter to filter out non-matching\nexamples.</li>\n<li>positive lookaheads and lookbehinds just generate data they should match (as if\nit was part of preceeding/following parts).</li>\n<li>negative lookaheads and lookbehinds do not do anything so it relies on\npreceeding/following parts to generate correct strings (otherwise the example will\nbe filtered out).</li>\n<li>\u201c(?(id)yes-pattern|no-pattern)\u201d does not actually check if group with given id\nwas actually used and instead just generates either yes- or no-pattern.</li>\n</ul>\n<p>Regex strategy tries to go all crazy about generated data (e.g. \u201c$\u201d at the end of a\nstring either does not generate anything or generate a newline). The idea is not to\ngenerate a nicely looking strings but instead any craze unexpected combination that\nwill still match your given regex so you can prepare for those and handle them in\nmost apropriate way.</p>\n<p>You can use regex flags to get more control on strategy:</p>\n<ul>\n<li>re.IGNORECASE - literals or literal ranges generate both lowercase and uppercase\nletters. E.g. <cite>r\u2019a\u2019</cite> will generate both <cite>\u201ca\u201d</cite> and <cite>\u201cA\u201d</cite>, or <cite>\u2018[a-z]\u2019</cite> will generate\nboth lowercase and uppercase english characters.</li>\n<li>re.DOTALL - \u201c.\u201d char will be able to generate newlines</li>\n<li>re.UNICODE - character categories\n(\u201c\\w\u201d, \u201c\\d\u201d or \u201c\\s\u201d and their negations) will generate unicode characters.\nThis is default for Python 3, see re.ASCII to reverse it.</li>\n</ul>\n<p>There are two ways to pass regex flags:</p>\n<ol>\n<li>By passing compiled regex with that flags: <cite>regex(re.compile(\u2018abc\u2019, re.IGNORECASE))</cite></li>\n<li>By using inline flags syntax: <cite>regex(\u2018(?i)abc\u2019)</cite></li>\n</ol>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install hypothesis-regex\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 2.7 and &lt;= 3.6</li>\n<li><a href=\"https://pypi.python.org/pypi/hypothesis\" rel=\"nofollow\">hypothesis</a> &gt;= 3.8</li>\n</ul>\n</div>\n<div id=\"project-links\">\n<h2>Project Links</h2>\n<ul>\n<li>PyPI: <a href=\"https://pypi.python.org/pypi/hypothesis-regex\" rel=\"nofollow\">https://pypi.python.org/pypi/hypothesis-regex</a></li>\n<li>Issues: <a href=\"https://github.com/maximkulkin/hypothesis-regex/issues\" rel=\"nofollow\">https://github.com/maximkulkin/hypothesis-regex/issues</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT licensed. See the bundled <a href=\"https://github.com/maximkulkin/hypothesis-regex/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 3669516, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7f6a7eedeff83be870296b43af3c8c1e", "sha256": "e32ae39e5d72406c3fe894a270b6329042e7ac57c3b59583934d5ce4566cb830"}, "downloads": -1, "filename": "hypothesis_regex-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7f6a7eedeff83be870296b43af3c8c1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4858, "upload_time": "2017-05-16T05:57:50", "upload_time_iso_8601": "2017-05-16T05:57:50.828119Z", "url": "https://files.pythonhosted.org/packages/88/b0/015aea895782edca2b653f575fd9dcb4af337da3745a085bd78ea6a84282/hypothesis_regex-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cf304bc7ed75ffa592a446e144240f3", "sha256": "c5d91c3ef3fa003993b0c8f2d745878269774b41b1a82801d71daa8877b4c543"}, "downloads": -1, "filename": "hypothesis-regex-0.1.tar.gz", "has_sig": false, "md5_digest": "1cf304bc7ed75ffa592a446e144240f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4513, "upload_time": "2017-05-16T05:57:53", "upload_time_iso_8601": "2017-05-16T05:57:53.006159Z", "url": "https://files.pythonhosted.org/packages/63/74/dcaa9fcda50f34f7954ab1f98436ea3c63f5b2f4e18ca873150cfd5ee68b/hypothesis-regex-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a4077c8b6635088cc9a849d8dd6d7dd4", "sha256": "a03cec68bbe8a6d7dedd8ba6ca59a93afe43613431b2223593a9e45136d5120b"}, "downloads": -1, "filename": "hypothesis_regex-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a4077c8b6635088cc9a849d8dd6d7dd4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7108, "upload_time": "2017-06-05T18:13:04", "upload_time_iso_8601": "2017-06-05T18:13:04.886521Z", "url": "https://files.pythonhosted.org/packages/c9/3c/69534bb7ece9ceadb2daeb5bf3bfbb242a25f56daaed5c33aa6b48759548/hypothesis_regex-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a53e1181aa95e2d7321a0e5fda8ef34c", "sha256": "3f7e8beb30b57f075eddd3f9d2d0e3d3aa3a9f686b25feebebe6e677f0a81930"}, "downloads": -1, "filename": "hypothesis-regex-0.2.tar.gz", "has_sig": false, "md5_digest": "a53e1181aa95e2d7321a0e5fda8ef34c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9625, "upload_time": "2017-06-05T18:13:06", "upload_time_iso_8601": "2017-06-05T18:13:06.951467Z", "url": "https://files.pythonhosted.org/packages/3b/9c/5d51c8fe3949782f4cfca03b5ee244f6c57b0002f1d6ded1cd00387594f6/hypothesis-regex-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2bc77bcac1b931dc865ee43b6d19e101", "sha256": "18b0efdfb54cdf616e35b78f4d94abf4ee1f72a8151ec118b53232e469a0024e"}, "downloads": -1, "filename": "hypothesis_regex-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2bc77bcac1b931dc865ee43b6d19e101", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8984, "upload_time": "2018-03-14T16:21:00", "upload_time_iso_8601": "2018-03-14T16:21:00.073617Z", "url": "https://files.pythonhosted.org/packages/a1/31/fc2b9e4cbd00681ab0497587c0f7d4e5eeec139013334f34b74b4c4e1a2b/hypothesis_regex-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adebbeba5d9ea49c3e562d8054bba460", "sha256": "47dd8e79e764efbcf73e713d38f9f48c3125ada80fd48639c3c2ea5c1b9ee983"}, "downloads": -1, "filename": "hypothesis-regex-0.3.tar.gz", "has_sig": false, "md5_digest": "adebbeba5d9ea49c3e562d8054bba460", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9173, "upload_time": "2018-03-14T16:21:01", "upload_time_iso_8601": "2018-03-14T16:21:01.568132Z", "url": "https://files.pythonhosted.org/packages/02/0e/5b29d4f30034acdf1f59e63cae568d5dace3b84fe387c7b488f686603360/hypothesis-regex-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "9adbf1b8f8ea4636a4f7cc4badd11b1d", "sha256": "b1b851c08f1480abf34fea05ee6ad3362c5754c76dd83ef7ce8651e064a4fc61"}, "downloads": -1, "filename": "hypothesis_regex-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9adbf1b8f8ea4636a4f7cc4badd11b1d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9018, "upload_time": "2018-03-14T16:46:14", "upload_time_iso_8601": "2018-03-14T16:46:14.281392Z", "url": "https://files.pythonhosted.org/packages/4a/5e/66e12e5bab7aaa5cf8a20fc22d877c575969f4b308e1db3d69e590a6fbcf/hypothesis_regex-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4d97ff427e5cbe6fee0876a7474773e", "sha256": "d7432b72e832e9fa1db97bd949ab12f9739dd31363d8c8502215be007fde2763"}, "downloads": -1, "filename": "hypothesis-regex-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f4d97ff427e5cbe6fee0876a7474773e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9190, "upload_time": "2018-03-14T16:46:16", "upload_time_iso_8601": "2018-03-14T16:46:16.267867Z", "url": "https://files.pythonhosted.org/packages/b1/0c/f58b9b187d48274a74238344f66afe262fc953bd4c4dd5fc3206c769b2ea/hypothesis-regex-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9adbf1b8f8ea4636a4f7cc4badd11b1d", "sha256": "b1b851c08f1480abf34fea05ee6ad3362c5754c76dd83ef7ce8651e064a4fc61"}, "downloads": -1, "filename": "hypothesis_regex-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9adbf1b8f8ea4636a4f7cc4badd11b1d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9018, "upload_time": "2018-03-14T16:46:14", "upload_time_iso_8601": "2018-03-14T16:46:14.281392Z", "url": "https://files.pythonhosted.org/packages/4a/5e/66e12e5bab7aaa5cf8a20fc22d877c575969f4b308e1db3d69e590a6fbcf/hypothesis_regex-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4d97ff427e5cbe6fee0876a7474773e", "sha256": "d7432b72e832e9fa1db97bd949ab12f9739dd31363d8c8502215be007fde2763"}, "downloads": -1, "filename": "hypothesis-regex-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f4d97ff427e5cbe6fee0876a7474773e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9190, "upload_time": "2018-03-14T16:46:16", "upload_time_iso_8601": "2018-03-14T16:46:16.267867Z", "url": "https://files.pythonhosted.org/packages/b1/0c/f58b9b187d48274a74238344f66afe262fc953bd4c4dd5fc3206c769b2ea/hypothesis-regex-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:25 2020"}