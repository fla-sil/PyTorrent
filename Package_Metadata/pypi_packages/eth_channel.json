{"info": {"author": "Jason Carver", "author_email": "ethcalibur+pip@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Ethereum Payment Channels Demo\n==============================\n\n|Join the chat at https://gitter.im/ethereum/web3.py| |Build Status|\n|PyPI version| |Python versions| |Docs build|\n\nDemonstrate an offline payment in Ethereum with a signed message, in\nPython\n\n-  Python 3.5+ support\n\nRead more in the `documentation on\nReadTheDocs <http://eth-channel.readthedocs.io/>`__. `View the change\nlog <http://eth-channel.readthedocs.io/en/latest/releases.html>`__.\n\nQuickstart\n----------\n\n.. code:: sh\n\n    pip install eth-channel\n\n    geth --dev\n\n    python -m eth_channel.demo_dev\n\nDeveloper setup\n---------------\n\nIf you would like to hack on eth-channel, please check out the `Ethereum\nDevelopment Tactical\nManual <https://github.com/pipermerriam/ethereum-dev-tactical-manual>`__\nfor information on how we do:\n\n-  Testing\n-  Pull Requests\n-  Code Style\n-  Documentation\n\nDevelopment Environment Setup\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can set up your dev environment with:\n\n.. code:: sh\n\n\n    git clone git@github.com:carver/eth-channel.git\n    cd eth-channel\n    virtualenv -p python3 venv\n    . venv/bin/activate\n    pip install -e .[dev]\n\nTesting Setup\n~~~~~~~~~~~~~\n\nDuring development, you might like to have tests run on every file save.\n\nShow flake8 errors on file change:\n\n.. code:: sh\n\n    # Test flake8\n    when-changed -v -s -r -1 eth_channel/ tests/ -c \"clear; flake8 eth_channel tests && echo 'flake8 success' || echo 'error'\"\n\nRun multi-process tests in one command, but without color:\n\n.. code:: sh\n\n    # in the project root:\n    pytest --numprocesses=4 --looponfail --maxfail=1\n    # the same thing, succinctly:\n    pytest -n 4 -f --maxfail=1\n\nRun in one thread, with color and desktop notifications:\n\n.. code:: sh\n\n    cd venv\n    ptw --onfail \"notify-send -t 5000 'Test failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'python 3 test on eth-channel failed'\" ../tests ../eth_channel\n\nRelease setup\n~~~~~~~~~~~~~\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    make release bump=$$VERSION_PART_TO_BUMP$$\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump, like\n``make release bump=minor`` or ``make release bump=devnum``.\n\nIf you are in a beta version, ``make release bump=stage`` will switch to\na stable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``make release bump=\"--new-version 4.0.0-alpha.1 devnum\"``\n\n.. |Join the chat at https://gitter.im/ethereum/web3.py| image:: https://badges.gitter.im/ethereum/web3.py.svg\n   :target: https://gitter.im/ethereum/web3.py?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n.. |Build Status| image:: https://circleci.com/gh/carver/eth-channel.svg?style=shield\n   :target: https://circleci.com/gh/carver/eth-channel\n.. |PyPI version| image:: https://badge.fury.io/py/eth-channel.svg\n   :target: https://badge.fury.io/py/eth-channel\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/eth-channel.svg\n   :target: https://pypi.python.org/pypi/eth-channel\n.. |Docs build| image:: https://readthedocs.org/projects/eth-channel/badge/?version=latest\n   :target: http://eth-channel.readthedocs.io/en/latest/?badge=latest\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carver/eth-channel", "keywords": "ethereum", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eth_channel", "package_url": "https://pypi.org/project/eth_channel/", "platform": "", "project_url": "https://pypi.org/project/eth_channel/", "project_urls": {"Homepage": "https://github.com/carver/eth-channel"}, "release_url": "https://pypi.org/project/eth_channel/0.1.0a1/", "requires_dist": null, "requires_python": "", "summary": "eth_channel: Demonstrate an offline payment in Ethereum with a signed message, in Python", "version": "0.1.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://gitter.im/ethereum/web3.py?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/ethereum/web3.py\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37b701cf1456eeea86ea95693158a9ba78773e25/68747470733a2f2f6261646765732e6769747465722e696d2f657468657265756d2f776562332e70792e737667\"></a> <a href=\"https://circleci.com/gh/carver/eth-channel\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca6cd090e2078bf0a9eba4a03937020c23ba8041/68747470733a2f2f636972636c6563692e636f6d2f67682f6361727665722f6574682d6368616e6e656c2e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://badge.fury.io/py/eth-channel\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e6fdfa206a3cc9e4668589550a95c2e86a7c21f/68747470733a2f2f62616467652e667572792e696f2f70792f6574682d6368616e6e656c2e737667\"></a> <a href=\"https://pypi.python.org/pypi/eth-channel\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2d5345abb8b053f4b54dbcfbd77e9835fdc8d44/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6574682d6368616e6e656c2e737667\"></a> <a href=\"http://eth-channel.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Docs build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a60c320ae5925520a597e11c2ac72ca4ebff427/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6574682d6368616e6e656c2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Demonstrate an offline payment in Ethereum with a signed message, in\nPython</p>\n<ul>\n<li>Python 3.5+ support</li>\n</ul>\n<p>Read more in the <a href=\"http://eth-channel.readthedocs.io/\" rel=\"nofollow\">documentation on\nReadTheDocs</a>. <a href=\"http://eth-channel.readthedocs.io/en/latest/releases.html\" rel=\"nofollow\">View the change\nlog</a>.</p>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<pre>pip install eth-channel\n\ngeth --dev\n\npython -m eth_channel.demo_dev\n</pre>\n</div>\n<div id=\"developer-setup\">\n<h2>Developer setup</h2>\n<p>If you would like to hack on eth-channel, please check out the <a href=\"https://github.com/pipermerriam/ethereum-dev-tactical-manual\" rel=\"nofollow\">Ethereum\nDevelopment Tactical\nManual</a>\nfor information on how we do:</p>\n<ul>\n<li>Testing</li>\n<li>Pull Requests</li>\n<li>Code Style</li>\n<li>Documentation</li>\n</ul>\n<div id=\"development-environment-setup\">\n<h3>Development Environment Setup</h3>\n<p>You can set up your dev environment with:</p>\n<pre>git clone git@github.com:carver/eth-channel.git\n<span class=\"nb\">cd</span> eth-channel\nvirtualenv -p python3 venv\n. venv/bin/activate\npip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"testing-setup\">\n<h3>Testing Setup</h3>\n<p>During development, you might like to have tests run on every file save.</p>\n<p>Show flake8 errors on file change:</p>\n<pre><span class=\"c1\"># Test flake8\n</span>when-changed -v -s -r -1 eth_channel/ tests/ -c <span class=\"s2\">\"clear; flake8 eth_channel tests &amp;&amp; echo 'flake8 success' || echo 'error'\"</span>\n</pre>\n<p>Run multi-process tests in one command, but without color:</p>\n<pre><span class=\"c1\"># in the project root:\n</span>pytest --numprocesses<span class=\"o\">=</span><span class=\"m\">4</span> --looponfail --maxfail<span class=\"o\">=</span><span class=\"m\">1</span>\n<span class=\"c1\"># the same thing, succinctly:\n</span>pytest -n <span class=\"m\">4</span> -f --maxfail<span class=\"o\">=</span><span class=\"m\">1</span>\n</pre>\n<p>Run in one thread, with color and desktop notifications:</p>\n<pre><span class=\"nb\">cd</span> venv\nptw --onfail <span class=\"s2\">\"notify-send -t 5000 'Test failure \u26a0\u26a0\u26a0\u26a0\u26a0' 'python 3 test on eth-channel failed'\"</span> ../tests ../eth_channel\n</pre>\n</div>\n<div id=\"release-setup\">\n<h3>Release setup</h3>\n<p>For Debian-like systems:</p>\n<pre>apt install pandoc\n</pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<div id=\"how-to-bumpversion\">\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <tt><span class=\"pre\">{major}.{minor}.{patch}</span></tt> for\nstable, and <tt><span class=\"pre\">{major}.{minor}.{patch}-{stage}.{devnum}</span></tt> for unstable\n(<tt>stage</tt> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump, like\n<tt>make release bump=minor</tt> or <tt>make release bump=devnum</tt>.</p>\n<p>If you are in a beta version, <tt>make release bump=stage</tt> will switch to\na stable.</p>\n<p>To issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n<tt>make release <span class=\"pre\">bump=\"--new-version</span> <span class=\"pre\">4.0.0-alpha.1</span> devnum\"</tt></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3808357, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "758e56b680d48573d5918af9ab327fba", "sha256": "f7f6d055dde04069605d516938815a1eea4feb289521a1f160106e4efee462c6"}, "downloads": -1, "filename": "eth_channel-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "758e56b680d48573d5918af9ab327fba", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7568, "upload_time": "2018-04-25T22:25:41", "upload_time_iso_8601": "2018-04-25T22:25:41.637762Z", "url": "https://files.pythonhosted.org/packages/4d/ad/1b64c51decf62a3e5de46fd6ee4578da92d99bea59f2286c42f88f4ca6c1/eth_channel-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee7930ba8685843a252b209b3bcfeb8a", "sha256": "c3c2b4725ef434d3f301a3800a536ff1f0455f13fb31fd5567aaacdd58f73631"}, "downloads": -1, "filename": "eth_channel-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "ee7930ba8685843a252b209b3bcfeb8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6078, "upload_time": "2018-04-25T22:25:39", "upload_time_iso_8601": "2018-04-25T22:25:39.953033Z", "url": "https://files.pythonhosted.org/packages/b6/42/d1dd6dd9de962a1d929cfda6b71449b8045e918b6ccf319716b165ae3666/eth_channel-0.1.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "758e56b680d48573d5918af9ab327fba", "sha256": "f7f6d055dde04069605d516938815a1eea4feb289521a1f160106e4efee462c6"}, "downloads": -1, "filename": "eth_channel-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "758e56b680d48573d5918af9ab327fba", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7568, "upload_time": "2018-04-25T22:25:41", "upload_time_iso_8601": "2018-04-25T22:25:41.637762Z", "url": "https://files.pythonhosted.org/packages/4d/ad/1b64c51decf62a3e5de46fd6ee4578da92d99bea59f2286c42f88f4ca6c1/eth_channel-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee7930ba8685843a252b209b3bcfeb8a", "sha256": "c3c2b4725ef434d3f301a3800a536ff1f0455f13fb31fd5567aaacdd58f73631"}, "downloads": -1, "filename": "eth_channel-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "ee7930ba8685843a252b209b3bcfeb8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6078, "upload_time": "2018-04-25T22:25:39", "upload_time_iso_8601": "2018-04-25T22:25:39.953033Z", "url": "https://files.pythonhosted.org/packages/b6/42/d1dd6dd9de962a1d929cfda6b71449b8045e918b6ccf319716b165ae3666/eth_channel-0.1.0a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:30 2020"}