{"info": {"author": "Kaan Mertol", "author_email": "kmertol@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "Geocell\n=======\n\nThe *Google Maps Geolocation API* actually lets you define multiple gsm\ncell towers into its request. But it will just return the location and\naccuracy based on the first cell(serving cell), doing nothing meaningful\nabout the neighbour cells, rssi and timing advance values.\n\nSo this is an attempt to do something a bit more meaningful...\n\nInstallation\n------------\n\nUse pip:\n\n::\n\n    pip install geocell\n\nOr clone the repo and:\n\n::\n\n    pip setup.py install\n\nSetting your Google Maps API Key\n--------------------------------\n\nThe key will be used in:\n\n-  *Google Maps Geolocation API* for requesting cell locations\n-  *Google Maps Javascript API* for drawing maps\n\nIf you don't have a google maps api key. Go\n`here <https://developers.google.com/maps/documentation/javascript/get-api-key>`__\nand follow the instructions to get your key.\n\nSet your api key using either of the following methods:\n\n-  Set your key as the ``GOOGLE_MAPS_API_KEY`` environment variable\n-  ``import geocell`` then ``geocell.api_key=\"<your api key>\"``\n\nUsage\n-----\n\nSimple location request\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> import geocell\n    >>> sample_cell = {\"mnc\":2,\"mcc\":286,\"cid\":51861,\"lac\":54110}\n    >>> geocell.locate(sample_cell)\n    {'location': {'lat': 40.7018889, 'lng': 29.8912834}, 'accuracy': 3250.0}\n\nLocation Estimation\n~~~~~~~~~~~~~~~~~~~\n\nWe need the rssi values and multiple cell information to make an\nestimation\n\n.. code:: python\n\n    >>> sample_cells = [\n    ...     {\"rssi\":-82,\"mnc\":2,\"mcc\":286,\"cid\":51861,\"lac\":54110},\n    ...     {\"rssi\":-85,\"mnc\":2,\"mcc\":286,\"cid\":16116,\"lac\":54110},\n    ...     {\"rssi\":-93,\"mnc\":2,\"mcc\":286,\"cid\":0,\"lac\":54108},\n    ...     {\"rssi\":-94,\"mnc\":2,\"mcc\":286,\"cid\":38344,\"lac\":54110},\n    ...     {\"rssi\":-97,\"mnc\":2,\"mcc\":286,\"cid\":52555,\"lac\":54110},\n    ...     {\"rssi\":-98,\"mnc\":2,\"mcc\":286,\"cid\":51857,\"lac\":54108},\n    ...     {\"rssi\":-99,\"mnc\":2,\"mcc\":286,\"cid\":39684,\"lac\":54110}\n    ... ]\n    >>> geocell.estimate(sample_cells)\n    {'location': {'lat': 40.70356939393244, 'lng': 29.88564243119295}, 'accuracy': 251.3839360809747}\n\n.. NOTE::\n\n    You will notice that this function takes couple of seconds to\n    return, the reason is that the *Google Maps Geolocation API*\n    requests take some time. But the cell requests are cached internally\n    in the module so the next time you request the same cell, the value\n    will be returned instantly. If you like, you can also set\n    ``geocell.is_multiprocess = True`` to do multiple requests, just\n    don't use multiprocessing inside a interpreter, it doesn't like it.\n\nLet's see it in action now:\n\n.. code:: python\n\n    >>> geocell.estimate(sample_cells, \"map.html\")\n    {'location': {'lat': 40.70356939393244, 'lng': 29.88564243119295}, 'accuracy': 251.38393\n    60809747}\n\nLooking at the generated map:\n\n-  **Light yellow circle** is the serving cell\n-  **Red colored** are the neighbour cells\n-  **The blue lines** are the flight path showing estimation done at\n   each step. Starting point of the flight path is the center of the\n   serving cell\n-  **The marker** shows the end of the flight path and the last\n   estimated location\n\n.. figure:: https://cloud.githubusercontent.com/assets/3398029/18313982/d0a5a9a0-7519-11e6-99e3-70743cffdf78.jpg\n   :alt: all\n\n\nLet's take a closer look:\n\n.. code:: python\n\n    >>> geocell.estimate(sample_cells, \"map_estimate.html\", cell_display=\"estimate\")\n    {'location': {'lat': 40.70356939393244, 'lng': 29.88564243119295}, 'accuracy': 251.38393\n    60809747}\n\nNow the map shows only the estimated location(marker) and estimated\naccuracy(radius). The arrow points to the actual location.\n\n.. figure:: https://cloud.githubusercontent.com/assets/3398029/18313986/d32f370e-7519-11e6-9250-6ae622daf013.jpg\n   :alt: estimate", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kmertol/geocell", "keywords": "geolocation location cell", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "geocell", "package_url": "https://pypi.org/project/geocell/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/geocell/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/kmertol/geocell"}, "release_url": "https://pypi.org/project/geocell/0.9.0/", "requires_dist": null, "requires_python": null, "summary": "Location estimation using GSM Cells with Google Maps Geolocation API", "version": "0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <em>Google Maps Geolocation API</em> actually lets you define multiple gsm\ncell towers into its request. But it will just return the location and\naccuracy based on the first cell(serving cell), doing nothing meaningful\nabout the neighbour cells, rssi and timing advance values.</p>\n<p>So this is an attempt to do something a bit more meaningful\u2026</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Use pip:</p>\n<pre>pip install geocell\n</pre>\n<p>Or clone the repo and:</p>\n<pre>pip setup.py install\n</pre>\n</div>\n<div id=\"setting-your-google-maps-api-key\">\n<h2>Setting your Google Maps API Key</h2>\n<p>The key will be used in:</p>\n<ul>\n<li><em>Google Maps Geolocation API</em> for requesting cell locations</li>\n<li><em>Google Maps Javascript API</em> for drawing maps</li>\n</ul>\n<p>If you don\u2019t have a google maps api key. Go\n<a href=\"https://developers.google.com/maps/documentation/javascript/get-api-key\" rel=\"nofollow\">here</a>\nand follow the instructions to get your key.</p>\n<p>Set your api key using either of the following methods:</p>\n<ul>\n<li>Set your key as the <tt>GOOGLE_MAPS_API_KEY</tt> environment variable</li>\n<li><tt>import geocell</tt> then <tt><span class=\"pre\">geocell.api_key=\"&lt;your</span> api key&gt;\"</tt></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"simple-location-request\">\n<h3>Simple location request</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">geocell</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample_cell</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">51861</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">geocell</span><span class=\"o\">.</span><span class=\"n\">locate</span><span class=\"p\">(</span><span class=\"n\">sample_cell</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">40.7018889</span><span class=\"p\">,</span> <span class=\"s1\">'lng'</span><span class=\"p\">:</span> <span class=\"mf\">29.8912834</span><span class=\"p\">},</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">3250.0</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"location-estimation\">\n<h3>Location Estimation</h3>\n<p>We need the rssi values and multiple cell information to make an\nestimation</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sample_cells</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">82</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">51861</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">85</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">16116</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">93</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54108</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">94</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">38344</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">97</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">52555</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">51857</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54108</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">{</span><span class=\"s2\">\"rssi\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"s2\">\"mnc\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s2\">\"mcc\"</span><span class=\"p\">:</span><span class=\"mi\">286</span><span class=\"p\">,</span><span class=\"s2\">\"cid\"</span><span class=\"p\">:</span><span class=\"mi\">39684</span><span class=\"p\">,</span><span class=\"s2\">\"lac\"</span><span class=\"p\">:</span><span class=\"mi\">54110</span><span class=\"p\">}</span>\n<span class=\"o\">...</span> <span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">geocell</span><span class=\"o\">.</span><span class=\"n\">estimate</span><span class=\"p\">(</span><span class=\"n\">sample_cells</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">40.70356939393244</span><span class=\"p\">,</span> <span class=\"s1\">'lng'</span><span class=\"p\">:</span> <span class=\"mf\">29.88564243119295</span><span class=\"p\">},</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">251.3839360809747</span><span class=\"p\">}</span>\n</pre>\n<div>\n<p>Note</p>\n<p>You will notice that this function takes couple of seconds to\nreturn, the reason is that the <em>Google Maps Geolocation API</em>\nrequests take some time. But the cell requests are cached internally\nin the module so the next time you request the same cell, the value\nwill be returned instantly. If you like, you can also set\n<tt>geocell.is_multiprocess = True</tt> to do multiple requests, just\ndon\u2019t use multiprocessing inside a interpreter, it doesn\u2019t like it.</p>\n</div>\n<p>Let\u2019s see it in action now:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">geocell</span><span class=\"o\">.</span><span class=\"n\">estimate</span><span class=\"p\">(</span><span class=\"n\">sample_cells</span><span class=\"p\">,</span> <span class=\"s2\">\"map.html\"</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">40.70356939393244</span><span class=\"p\">,</span> <span class=\"s1\">'lng'</span><span class=\"p\">:</span> <span class=\"mf\">29.88564243119295</span><span class=\"p\">},</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">251.38393</span>\n<span class=\"mi\">60809747</span><span class=\"p\">}</span>\n</pre>\n<p>Looking at the generated map:</p>\n<ul>\n<li><strong>Light yellow circle</strong> is the serving cell</li>\n<li><strong>Red colored</strong> are the neighbour cells</li>\n<li><strong>The blue lines</strong> are the flight path showing estimation done at\neach step. Starting point of the flight path is the center of the\nserving cell</li>\n<li><strong>The marker</strong> shows the end of the flight path and the last\nestimated location</li>\n</ul>\n<div>\n<img alt=\"all\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29fcc0bb836d655d759ee32a83d6ab5c387850f5/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f333339383032392f31383331333938322f64306135613961302d373531392d313165362d393965332d3730373433636666646637382e6a7067\">\n</div>\n<p>Let\u2019s take a closer look:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">geocell</span><span class=\"o\">.</span><span class=\"n\">estimate</span><span class=\"p\">(</span><span class=\"n\">sample_cells</span><span class=\"p\">,</span> <span class=\"s2\">\"map_estimate.html\"</span><span class=\"p\">,</span> <span class=\"n\">cell_display</span><span class=\"o\">=</span><span class=\"s2\">\"estimate\"</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'lat'</span><span class=\"p\">:</span> <span class=\"mf\">40.70356939393244</span><span class=\"p\">,</span> <span class=\"s1\">'lng'</span><span class=\"p\">:</span> <span class=\"mf\">29.88564243119295</span><span class=\"p\">},</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">251.38393</span>\n<span class=\"mi\">60809747</span><span class=\"p\">}</span>\n</pre>\n<p>Now the map shows only the estimated location(marker) and estimated\naccuracy(radius). The arrow points to the actual location.</p>\n<div>\n<img alt=\"estimate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c888b5c7d39b825be4fb08c3f101211b5c567d4/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f333339383032392f31383331333938362f64333266333730652d373531392d313165362d393235302d3661653632326461663031332e6a7067\">\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2331186, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "8f51d0e40a10436546caa151b185ddb1", "sha256": "694d89cb85a4338faf8cb0f95dad1c49f28c1c50977e574261c8a9d878efdbe5"}, "downloads": -1, "filename": "geocell-0.9.0.zip", "has_sig": false, "md5_digest": "8f51d0e40a10436546caa151b185ddb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12287, "upload_time": "2016-09-08T10:57:06", "upload_time_iso_8601": "2016-09-08T10:57:06.662602Z", "url": "https://files.pythonhosted.org/packages/a0/79/d22ae28e23eec2a6c96cf0a2799bc67c737cc2e5684c6a913b96373ee356/geocell-0.9.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f51d0e40a10436546caa151b185ddb1", "sha256": "694d89cb85a4338faf8cb0f95dad1c49f28c1c50977e574261c8a9d878efdbe5"}, "downloads": -1, "filename": "geocell-0.9.0.zip", "has_sig": false, "md5_digest": "8f51d0e40a10436546caa151b185ddb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12287, "upload_time": "2016-09-08T10:57:06", "upload_time_iso_8601": "2016-09-08T10:57:06.662602Z", "url": "https://files.pythonhosted.org/packages/a0/79/d22ae28e23eec2a6c96cf0a2799bc67c737cc2e5684c6a913b96373ee356/geocell-0.9.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:58:09 2020"}