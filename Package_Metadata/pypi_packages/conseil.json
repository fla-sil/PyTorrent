{"info": {"author": "Michael Zaikin", "author_email": "mz@baking-bad.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# ConseilPy\n[![PyPI version](https://badge.fury.io/py/conseil.svg?)](https://badge.fury.io/py/conseil)\n[![Build Status](https://travis-ci.org/baking-bad/conseilpy.svg?branch=master)](https://travis-ci.org/baking-bad/conseilpy)\n[![Made With](https://img.shields.io/badge/made%20with-python-blue.svg?)](https://www.python.org)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nPython toolkit for [Conseil](https://cryptonomic.github.io/Conseil) blockchain indexer\n\n## Installation\n\nPython 3.6+ required\n\n```bash\n$ pip install conseil\n```\n\n## Usage\n\nConseilPy is a lot like Sqlalchemy, so if you're familiar with it, you can easily cook queries.\n\n![It's time to cook](https://i.imgflip.com/35csjl.jpg?)\n\n### Quickstart\nGet top 5 delegators by balance\n```python\nfrom conseil import conseil\n\nAccount = conseil.tezos.alphanet.accounts\nAccount.query(Account.acccount_id, Account.balance) \\\n    .filter(Account.script.is_(None), \n            Account.account_id.startswith('KT1')) \\\n    .order_by(Account.balance.desc()) \\\n    .limit(5) \\\n    .all()\n```\n\nSee more [examples](https://github.com/baking-bad/conseilpy/tree/master/examples)\n\n### Client initialization\nIf using a default conseil client is not an option you can instantiate it yourself:\n```python\nfrom conseil.api import ConseilApi\nfrom conseil.core import Client\n\nconseil = Client(ConseilApi(\n    api_key='<API_KEY>',\n    api_host='<API_HOST>',\n    api_version=2\n))\n```\n\n### Exploring database schema\nConseil metadata has the following tree structure:  \nplatform / network / entity / attribute / value\n\nSo you can simply access any node by name:\n```python\n>>> from conseil import conseil\n>>> print(conseil.tezos.alphanet.operations.kind.transaction)\ntransaction\n```\n\nAutocompletion `Shift + Tab` and docstrings are available in Jupyter:\n```python\n>>> conseil\nPath\nmetadata/platforms\n\nPlatforms\n.tezos\n\n>>> conseil.tezos.alphanet\nPath\nmetadata/tezos/alphanet/entities\n\nEntities\n.accounts\n.balance_updates\n.ballots\n.blocks\n.delegates\n.fees\n.operation_groups\n.operations\n.proposals\n.rolls\n```\n\nAlternatively you can check full [SQL schema](https://github.com/Cryptonomic/Conseil/blob/master/doc/conseil.sql)\n\n### Selecting fields\nConseil doesn't support joins at the moment so you can request attributes for a single entity only. \n\n```python\nfrom conseil import conseil\n\nc = conseil.tezos.alphanet\n\n# select all fields\nc.query(c.accounts)\nc.accounts.query()\n\n# select specific fields\nc.query(c.accounts.balance, c.accounts.account_id)\nc.accounts.query(c.accounts.balance, c.accounts.account_id)\n\n# select single field\nc.accounts.balance.query()\n```\n\n### Filtering results\nConseil receives a conjunction of predicates, which can be inverted by one, but not together.\nPredicate syntax is similar to Sqlalchemy, but has less operations.\n\n```python\nfrom conseil import conseil\nfrom conseil.core import not_\n\nAccount = conseil.tezos.alphanet.accounts\nAccount.query() \\\n    .filter(not_(Account.account_id.startswith('tz')),\n            Account.script.is_(None),\n            Account.balance > 0)\n```\n\nHere is a full list of supported operations:\n\n| Conseil operation | Filter             | Inversed                |\n| ----------------- | ------------------ | ----------------------- |\n| in                | `x.in_(a, b, ...)` | `x.notin_(a, b, ...)`   |\n| between           | `x.between(a, b)`  | `not_(x.between(a, b))` |\n| like              | `x.like(a)`        | `x.notlike(a)`          |\n| lt                | `x < a`            | `x >= a`                |\n| gt                | `x > a`            | `x <= a`                |\n| eq                | `x == a`           | `x != a`                |\n| startsWith        | `x.startswith(a)`  | `not_(x.startsWith(a))` |\n| endsWith          | `x.endswith(a)`    | `not_(x.endswith(a))`   |\n| isnull            | `x.is_(None)`      | `x.isnot(None)`         |\n\nYou can also use `filter_by` for simple queries:\n\n```python\nfrom conseil import conseil\n\nconseil.tezos.alphanet.accounts.query() \\\n    .filter_by(account_id='tzkt')\n```\n\n### Data aggregation\n\nThis is an important concept to understand. In Conseil you specify which columns will be aggregated and the rest of them are used in `GROUP BY` clause. Here is an example:\n\n```python\nfrom conseil import conseil\n\nBlock = conseil.tezos.alphanet.blocks\nBlock.query(Block.baker, Block.level.count(), Block.timestamp.max())  \n# will be compiled to SELECT baker, COUNT(level), MAX(timestamp) FROM blocks GROUP BY baker\n```\n\nAdditionally, you can specify `HAVING` predicates if you want to filter results by aggregated column:\n\n```python\nfrom conseil import conseil\n\nBlock = conseil.tezos.alphanet.blocks\nBlock.query(Block.baker, Block.level.count()) \\\n    .having(Block.level.count() > 1)  # you have to specify aggregation function here as well\n```\n\nHere is the list of supported aggregation functions:\n\n* `count`\n* `sum`\n* `avg`\n* `min`\n* `max`\n\nIf you want to group by some fields but not include them in the result use `group_by` method:\n\n```python\nfrom conseil import conseil\n\nBlock = conseil.tezos.alphanet.blocks\nBlock.query(Block.level.count()) \\\n\t.group_by(Block.baker)\n```\n\n### Sorting and limiting results\n\nThis is similar to Sqlalchemy as well, you can specify one or multiple sort columns with optional descending modifier.\n\n```python\nfrom conseil import conseil\n\nAccount = conseil.tezos.alphanet.accounts\nAccount.query() \\\n    .order_by(Account.balance.desc(), Account.account_id) \\\n    .limit(20)\n```\n\nYou can sort by aggregated column too:\n\n```python\nfrom conseil import conseil\n\nOperation = conseil.tezos.alphanet.operations\nOperation.query(Operation.source, Operation.amount.avg()) \\\n    .order_by(Operation.amount.avg().desc()) \\\n    .limit(50)\n```\n\n### Query preview\n\nSo you have cooked a simple query and want to see the resulting Conseil request body.\n\n```python\nfrom conseil import conseil\n\nAccount = conseil.tezos.alphanet.accounts\nquery = Account.query() \\\n    .order_by(Account.balance.desc()) \\\n    .limit(1)\n```\n\nThen you can simply:\n\n```python\n>>> query\nPath\ndata/tezos/alphanet/accounts\n\nQuery\n{\"aggregation\": [],\n \"fields\": [],\n \"limit\": 1,\n \"orderBy\": [{\"direction\": \"desc\", \"field\": \"balance\"}],\n \"output\": \"json\",\n \"predicates\": []}\n```\n\n### Execution\n\nIt's time to submit our query and get some data.\n\n```python\nfrom conseil import conseil\n\nAccount = conseil.tezos.alphanet.accounts\n```\n\n#### Return multiple rows\n\n```python\nquery = Account.query()\n\nquery.all()  # will return List[dict] (default output type)\nquery.all(output='csv')  # will return string (csv)\n```\n\n#### Return single row\n\n```python\nquery = Account.query() \\\n\t.filter_by(account_id='tzkt')\n\nquery.one()  # will fail if there is no account with such id or there are many\nquery.one_or_none()  # will handle the exception and return None\n```\n\n#### Return scalar\n\n```python\nquery = Account.balance.query() \\\n\t.order_by(Account.balance.desc()) \\\n    .limit(1)\n\nquery.scalar()  # will return single numeric value\n```\n\n#### Return vector\n\n```python\nquery = Operation.query(Operation.timestamp) \\\n    .filter_by(source='tzkt')\n    \nquery.vector()  # will return flat list of timestamps\n```\n\n### Precision\nConseil allows to specify numeric column precision. In order to use this functionality use `decimal` type. For example:\n\n```python\nfrom conseil import conseil\nfrom decimal import Decimal\n\nAccount = conseil.tezos.alphanet.accounts\nAccount.query(Account.balance) \\\n    .filter(Account.balance > Decimal('0.1'), \n            Account.balance < Decimal('0.01'))  # precision will be 2 (max)\n```\n\n### Renaming fields\nYou can change names of requested fields in the resulting json/csv:\n\n```python\nfrom conseil import conseil\n\nAccount = conseil.tezos.alphanet.accounts\nAccount.query(Account.account_id.label('address'))\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/baking-bad/conseilpy", "keywords": "tezos,blockchain", "license": "MIT", "maintainer": "Michael Zaikin", "maintainer_email": "mz@baking-bad.org", "name": "conseil", "package_url": "https://pypi.org/project/conseil/", "platform": "", "project_url": "https://pypi.org/project/conseil/", "project_urls": {"Homepage": "https://github.com/baking-bad/conseilpy", "Repository": "https://github.com/baking-bad/conseilpy"}, "release_url": "https://pypi.org/project/conseil/0.1.4/", "requires_dist": ["requests"], "requires_python": ">=3.6,<4.0", "summary": "Python toolkit for Conseil blockchain indexer", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ConseilPy</h1>\n<p><a href=\"https://badge.fury.io/py/conseil\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38f18e27df58a44b41cda5b35933f6226e926d98/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e7365696c2e7376673f\"></a>\n<a href=\"https://travis-ci.org/baking-bad/conseilpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b2719db8847b240fc39b38846fac35bba23c578/68747470733a2f2f7472617669732d63692e6f72672f62616b696e672d6261642f636f6e7365696c70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.python.org\" rel=\"nofollow\"><img alt=\"Made With\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2bdb9e191e90ad302e77e8e400df24ae5a068013/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d616465253230776974682d707974686f6e2d626c75652e7376673f\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Python toolkit for <a href=\"https://cryptonomic.github.io/Conseil\" rel=\"nofollow\">Conseil</a> blockchain indexer</p>\n<h2>Installation</h2>\n<p>Python 3.6+ required</p>\n<pre>$ pip install conseil\n</pre>\n<h2>Usage</h2>\n<p>ConseilPy is a lot like Sqlalchemy, so if you're familiar with it, you can easily cook queries.</p>\n<p><img alt=\"It's time to cook\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef9de70f430bdc044d2ba4dc2af409da8f54b0fb/68747470733a2f2f692e696d67666c69702e636f6d2f333563736a6c2e6a70673f\"></p>\n<h3>Quickstart</h3>\n<p>Get top 5 delegators by balance</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">acccount_id</span><span class=\"p\">,</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">script</span><span class=\"o\">.</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">),</span> \n            <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'KT1'</span><span class=\"p\">))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>See more <a href=\"https://github.com/baking-bad/conseilpy/tree/master/examples\" rel=\"nofollow\">examples</a></p>\n<h3>Client initialization</h3>\n<p>If using a default conseil client is not an option you can instantiate it yourself:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil.api</span> <span class=\"kn\">import</span> <span class=\"n\">ConseilApi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">conseil.core</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"n\">conseil</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">ConseilApi</span><span class=\"p\">(</span>\n    <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s1\">'&lt;API_KEY&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">api_host</span><span class=\"o\">=</span><span class=\"s1\">'&lt;API_HOST&gt;'</span><span class=\"p\">,</span>\n    <span class=\"n\">api_version</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n<span class=\"p\">))</span>\n</pre>\n<h3>Exploring database schema</h3>\n<p>Conseil metadata has the following tree structure:<br>\nplatform / network / entity / attribute / value</p>\n<p>So you can simply access any node by name:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">operations</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"p\">)</span>\n<span class=\"n\">transaction</span>\n</pre>\n<p>Autocompletion <code>Shift + Tab</code> and docstrings are available in Jupyter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conseil</span>\n<span class=\"n\">Path</span>\n<span class=\"n\">metadata</span><span class=\"o\">/</span><span class=\"n\">platforms</span>\n\n<span class=\"n\">Platforms</span>\n<span class=\"o\">.</span><span class=\"n\">tezos</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span>\n<span class=\"n\">Path</span>\n<span class=\"n\">metadata</span><span class=\"o\">/</span><span class=\"n\">tezos</span><span class=\"o\">/</span><span class=\"n\">alphanet</span><span class=\"o\">/</span><span class=\"n\">entities</span>\n\n<span class=\"n\">Entities</span>\n<span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"o\">.</span><span class=\"n\">balance_updates</span>\n<span class=\"o\">.</span><span class=\"n\">ballots</span>\n<span class=\"o\">.</span><span class=\"n\">blocks</span>\n<span class=\"o\">.</span><span class=\"n\">delegates</span>\n<span class=\"o\">.</span><span class=\"n\">fees</span>\n<span class=\"o\">.</span><span class=\"n\">operation_groups</span>\n<span class=\"o\">.</span><span class=\"n\">operations</span>\n<span class=\"o\">.</span><span class=\"n\">proposals</span>\n<span class=\"o\">.</span><span class=\"n\">rolls</span>\n</pre>\n<p>Alternatively you can check full <a href=\"https://github.com/Cryptonomic/Conseil/blob/master/doc/conseil.sql\" rel=\"nofollow\">SQL schema</a></p>\n<h3>Selecting fields</h3>\n<p>Conseil doesn't support joins at the moment so you can request attributes for a single entity only.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span>\n\n<span class=\"c1\"># select all fields</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># select specific fields</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># select single field</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n</pre>\n<h3>Filtering results</h3>\n<p>Conseil receives a conjunction of predicates, which can be inverted by one, but not together.\nPredicate syntax is similar to Sqlalchemy, but has less operations.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n<span class=\"kn\">from</span> <span class=\"nn\">conseil.core</span> <span class=\"kn\">import</span> <span class=\"n\">not_</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">not_</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'tz'</span><span class=\"p\">)),</span>\n            <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">script</span><span class=\"o\">.</span><span class=\"n\">is_</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>Here is a full list of supported operations:</p>\n<table>\n<thead>\n<tr>\n<th>Conseil operation</th>\n<th>Filter</th>\n<th>Inversed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>in</td>\n<td><code>x.in_(a, b, ...)</code></td>\n<td><code>x.notin_(a, b, ...)</code></td>\n</tr>\n<tr>\n<td>between</td>\n<td><code>x.between(a, b)</code></td>\n<td><code>not_(x.between(a, b))</code></td>\n</tr>\n<tr>\n<td>like</td>\n<td><code>x.like(a)</code></td>\n<td><code>x.notlike(a)</code></td>\n</tr>\n<tr>\n<td>lt</td>\n<td><code>x &lt; a</code></td>\n<td><code>x &gt;= a</code></td>\n</tr>\n<tr>\n<td>gt</td>\n<td><code>x &gt; a</code></td>\n<td><code>x &lt;= a</code></td>\n</tr>\n<tr>\n<td>eq</td>\n<td><code>x == a</code></td>\n<td><code>x != a</code></td>\n</tr>\n<tr>\n<td>startsWith</td>\n<td><code>x.startswith(a)</code></td>\n<td><code>not_(x.startsWith(a))</code></td>\n</tr>\n<tr>\n<td>endsWith</td>\n<td><code>x.endswith(a)</code></td>\n<td><code>not_(x.endswith(a))</code></td>\n</tr>\n<tr>\n<td>isnull</td>\n<td><code>x.is_(None)</code></td>\n<td><code>x.isnot(None)</code></td>\n</tr></tbody></table>\n<p>You can also use <code>filter_by</code> for simple queries:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">account_id</span><span class=\"o\">=</span><span class=\"s1\">'tzkt'</span><span class=\"p\">)</span>\n</pre>\n<h3>Data aggregation</h3>\n<p>This is an important concept to understand. In Conseil you specify which columns will be aggregated and the rest of them are used in <code>GROUP BY</code> clause. Here is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Block</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n<span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">baker</span><span class=\"p\">,</span> <span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(),</span> <span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())</span>  \n<span class=\"c1\"># will be compiled to SELECT baker, COUNT(level), MAX(timestamp) FROM blocks GROUP BY baker</span>\n</pre>\n<p>Additionally, you can specify <code>HAVING</code> predicates if you want to filter results by aggregated column:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Block</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n<span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">baker</span><span class=\"p\">,</span> <span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">having</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># you have to specify aggregation function here as well</span>\n</pre>\n<p>Here is the list of supported aggregation functions:</p>\n<ul>\n<li><code>count</code></li>\n<li><code>sum</code></li>\n<li><code>avg</code></li>\n<li><code>min</code></li>\n<li><code>max</code></li>\n</ul>\n<p>If you want to group by some fields but not include them in the result use <code>group_by</code> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Block</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n<span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">level</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">())</span> \\\n\t<span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">baker</span><span class=\"p\">)</span>\n</pre>\n<h3>Sorting and limiting results</h3>\n<p>This is similar to Sqlalchemy as well, you can specify one or multiple sort columns with optional descending modifier.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">(),</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p>You can sort by aggregated column too:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Operation</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">operations</span>\n<span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">.</span><span class=\"n\">avg</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"o\">.</span><span class=\"n\">avg</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<h3>Query preview</h3>\n<p>So you have cooked a simple query and want to see the resulting Conseil request body.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can simply:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span>\n<span class=\"n\">Path</span>\n<span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">tezos</span><span class=\"o\">/</span><span class=\"n\">alphanet</span><span class=\"o\">/</span><span class=\"n\">accounts</span>\n\n<span class=\"n\">Query</span>\n<span class=\"p\">{</span><span class=\"s2\">\"aggregation\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n <span class=\"s2\">\"fields\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n <span class=\"s2\">\"limit\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n <span class=\"s2\">\"orderBy\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"direction\"</span><span class=\"p\">:</span> <span class=\"s2\">\"desc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"balance\"</span><span class=\"p\">}],</span>\n <span class=\"s2\">\"output\"</span><span class=\"p\">:</span> <span class=\"s2\">\"json\"</span><span class=\"p\">,</span>\n <span class=\"s2\">\"predicates\"</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n</pre>\n<h3>Execution</h3>\n<p>It's time to submit our query and get some data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n</pre>\n<h4>Return multiple rows</h4>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># will return List[dict] (default output type)</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"s1\">'csv'</span><span class=\"p\">)</span>  <span class=\"c1\"># will return string (csv)</span>\n</pre>\n<h4>Return single row</h4>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n\t<span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">account_id</span><span class=\"o\">=</span><span class=\"s1\">'tzkt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>  <span class=\"c1\"># will fail if there is no account with such id or there are many</span>\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">one_or_none</span><span class=\"p\">()</span>  <span class=\"c1\"># will handle the exception and return None</span>\n</pre>\n<h4>Return scalar</h4>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span> \\\n\t<span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span> \\\n    <span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">scalar</span><span class=\"p\">()</span>  <span class=\"c1\"># will return single numeric value</span>\n</pre>\n<h4>Return vector</h4>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'tzkt'</span><span class=\"p\">)</span>\n    \n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">vector</span><span class=\"p\">()</span>  <span class=\"c1\"># will return flat list of timestamps</span>\n</pre>\n<h3>Precision</h3>\n<p>Conseil allows to specify numeric column precision. In order to use this functionality use <code>decimal</code> type. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n<span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&gt;</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.1'</span><span class=\"p\">),</span> \n            <span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">balance</span> <span class=\"o\">&lt;</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s1\">'0.01'</span><span class=\"p\">))</span>  <span class=\"c1\"># precision will be 2 (max)</span>\n</pre>\n<h3>Renaming fields</h3>\n<p>You can change names of requested fields in the resulting json/csv:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">conseil</span> <span class=\"kn\">import</span> <span class=\"n\">conseil</span>\n\n<span class=\"n\">Account</span> <span class=\"o\">=</span> <span class=\"n\">conseil</span><span class=\"o\">.</span><span class=\"n\">tezos</span><span class=\"o\">.</span><span class=\"n\">alphanet</span><span class=\"o\">.</span><span class=\"n\">accounts</span>\n<span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Account</span><span class=\"o\">.</span><span class=\"n\">account_id</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s1\">'address'</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 5760254, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e347b949ff20e311425016b6c92bc78a", "sha256": "a8241399c2ff5d006161365aadd2ce6ac57b3c57439e98e80c91b5ca85819553"}, "downloads": -1, "filename": "conseil-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e347b949ff20e311425016b6c92bc78a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 18727, "upload_time": "2019-07-03T18:19:37", "upload_time_iso_8601": "2019-07-03T18:19:37.826857Z", "url": "https://files.pythonhosted.org/packages/b5/55/01f2232ddaeb10fbe58fd8efe8d2f6d2c4b751339024067b78de5e499131/conseil-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7473684b96956094189d295068bf3c9d", "sha256": "0dd0162b43ba0b28208616998439620f60fadc486f86757ad5ef65ab9f582f9d"}, "downloads": -1, "filename": "conseil-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7473684b96956094189d295068bf3c9d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7948, "upload_time": "2019-07-03T18:19:40", "upload_time_iso_8601": "2019-07-03T18:19:40.389145Z", "url": "https://files.pythonhosted.org/packages/3a/2b/de31b707547756697dcc2160b15e473fdc54ec5213e4e7193d8215a14a1b/conseil-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "150ebcc148470968c78e7fa08e906d4f", "sha256": "0175f4f1f5dec9cea7ea4ec8c40dd86e527c1f1a78c5f5cc3a2f55e634e43c48"}, "downloads": -1, "filename": "conseil-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "150ebcc148470968c78e7fa08e906d4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8816, "upload_time": "2019-07-08T14:22:24", "upload_time_iso_8601": "2019-07-08T14:22:24.911524Z", "url": "https://files.pythonhosted.org/packages/88/c9/8a0e0742168662ebb9a36384db03579be448b2b4ba4a21f25f10ba591143/conseil-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd67701cb1fc499f8a190756fd18beae", "sha256": "fe83060a563d0a9a304cb407f47116ac3f20e5dc7cbca9fd7bf007240a927912"}, "downloads": -1, "filename": "conseil-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bd67701cb1fc499f8a190756fd18beae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10736, "upload_time": "2019-07-08T14:22:26", "upload_time_iso_8601": "2019-07-08T14:22:26.755293Z", "url": "https://files.pythonhosted.org/packages/4e/db/322a0a85be990074ae681831de22a756ec081a6b55da186f64f7fb0f684c/conseil-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "c1d1e5fd2134b551b6c4381a47f8567a", "sha256": "203ade887d0a7c73155bf68f9a3b3bec7660ec16a587838cafc15e93d0fe0a24"}, "downloads": -1, "filename": "conseil-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c1d1e5fd2134b551b6c4381a47f8567a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8943, "upload_time": "2019-07-10T15:37:00", "upload_time_iso_8601": "2019-07-10T15:37:00.234252Z", "url": "https://files.pythonhosted.org/packages/46/f3/0a3a0279d7c3dc222fdc490935775a584f11eba4786cef903e72cbe9c9c9/conseil-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18e2ed3d334f2f4d11c2042a1af0c11c", "sha256": "f2c8080e24a10cd41a433c40855bbcaa354542ec51bdca5f8e245f4b8de5b071"}, "downloads": -1, "filename": "conseil-0.1.2.tar.gz", "has_sig": false, "md5_digest": "18e2ed3d334f2f4d11c2042a1af0c11c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11046, "upload_time": "2019-07-10T15:37:01", "upload_time_iso_8601": "2019-07-10T15:37:01.822780Z", "url": "https://files.pythonhosted.org/packages/f2/79/1b6383924f52ec8d7784383c20e00f649346c8e6bbccaf9b1de685fd4f40/conseil-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "faae05db09befaa51ece44fca597ce41", "sha256": "f94554db8831c77f88bc989edf67a494dce2689b563a551d02dd20360944f1ed"}, "downloads": -1, "filename": "conseil-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "faae05db09befaa51ece44fca597ce41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 8952, "upload_time": "2019-07-11T08:20:57", "upload_time_iso_8601": "2019-07-11T08:20:57.134924Z", "url": "https://files.pythonhosted.org/packages/1d/3b/31e132fcd7230442d980799c195fefe1485e0e27f082af70ff261b8bbd50/conseil-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fba447db4d14ebdcf4c619356e3313c", "sha256": "292b1fd5463b7fad973e36f2ac656b7a7d05c4f7414838ae8bccb8fb4535fd3d"}, "downloads": -1, "filename": "conseil-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6fba447db4d14ebdcf4c619356e3313c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11038, "upload_time": "2019-07-11T08:20:58", "upload_time_iso_8601": "2019-07-11T08:20:58.895691Z", "url": "https://files.pythonhosted.org/packages/ba/6a/28aa300b2991214efbd8ff76bf4e4573975304ddac94fe421c47ad79507c/conseil-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8425a11e1d9c48c5165012c8e89a911c", "sha256": "c87d0cd0104086535d70574ab70acb0a995ddf4889da747b1738e081235f9c0f"}, "downloads": -1, "filename": "conseil-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8425a11e1d9c48c5165012c8e89a911c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10559, "upload_time": "2019-08-30T13:08:36", "upload_time_iso_8601": "2019-08-30T13:08:36.980943Z", "url": "https://files.pythonhosted.org/packages/f7/76/7da787c8f2a62a1bde6d06720499c090c5672c6ce39f08c3597dcf5d75c3/conseil-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94f33e09d84e70d67b53b0ece029527c", "sha256": "a3b2b6de5003c18c66090bdff2e7f27914e79373df716d2314ab3244623d8333"}, "downloads": -1, "filename": "conseil-0.1.4.tar.gz", "has_sig": false, "md5_digest": "94f33e09d84e70d67b53b0ece029527c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12521, "upload_time": "2019-08-30T13:08:38", "upload_time_iso_8601": "2019-08-30T13:08:38.914429Z", "url": "https://files.pythonhosted.org/packages/33/43/f5b0746c979748144b9226b6f42bb70e7f3f2f6801744ce8aeb7014d1672/conseil-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8425a11e1d9c48c5165012c8e89a911c", "sha256": "c87d0cd0104086535d70574ab70acb0a995ddf4889da747b1738e081235f9c0f"}, "downloads": -1, "filename": "conseil-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8425a11e1d9c48c5165012c8e89a911c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10559, "upload_time": "2019-08-30T13:08:36", "upload_time_iso_8601": "2019-08-30T13:08:36.980943Z", "url": "https://files.pythonhosted.org/packages/f7/76/7da787c8f2a62a1bde6d06720499c090c5672c6ce39f08c3597dcf5d75c3/conseil-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94f33e09d84e70d67b53b0ece029527c", "sha256": "a3b2b6de5003c18c66090bdff2e7f27914e79373df716d2314ab3244623d8333"}, "downloads": -1, "filename": "conseil-0.1.4.tar.gz", "has_sig": false, "md5_digest": "94f33e09d84e70d67b53b0ece029527c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12521, "upload_time": "2019-08-30T13:08:38", "upload_time_iso_8601": "2019-08-30T13:08:38.914429Z", "url": "https://files.pythonhosted.org/packages/33/43/f5b0746c979748144b9226b6f42bb70e7f3f2f6801744ce8aeb7014d1672/conseil-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:41 2020"}