{"info": {"author": "Mahmoud Hashemi and Mark Williams", "author_email": "mahmoud@hatnote.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries"], "description": "Cronfed\n=======\n\n.. image:: https://farm9.staticflickr.com/8144/7544169948_8abb2bb2f3_m_d.jpg\n\n**Cronfed** monitors basic batch jobs, or any other cron-based\nscheduled commands by parsing a given mailbox and turning it into an\nRSS feed. The feed can in turn be monitored with your browser_,\nfeedreader_ or other RSS-compatible service (such as IFTTT_).\n\nSimply add a cron job to generate the feed, pointing it at a\nweb-accessible location (such as a ``public_html`` directory or your\nsite's assets directory). Check out the example for some real-world\nCronfed usage, with an explanation of how cron and Cronfed work\ntogether.\n\nCronfed is **Minimum Viable Monitoring**, aimed at providing a basic\nthreshold of monitoring without complex automation or dependencies.\nIt's targeted at smaller projects which otherwise might go without any\nmonitoring at all. It's so easy to set up and use on the standard\nLinux/BSD machine that there's no reason to not use it from\nDay 1. While Cronfed makes attempts at limiting the amount of\ninformation externalized, it is not recommended for jobs with\nextremely-sensitive information.\n\n*\"Cronfed: It's the least you could do!\"*\n\nInstallation\n------------\n\nCronfed is pure Python, has no system library dependencies, and should\nwork wonders on any POSIX machine with a functioning cron daemon and\nlocal mail system::\n\n  pip install cronfed\n\nRun ``python -m cronfed --help`` to see options, or read on for a\nusage example.\n\nExample\n-------\n\nFirst, let's look at a basic cron job. This one will fetch our data\nonce an hour, on the hour::\n\n  0 * * * * /usr/bin/python /home/myuser/project/fetch.py 2>&1 | tee -a /home/myuser/project/logs/fetch.txt\n\nNotice how the output (``stdout`` + ``stderr``) is piped to a log file,\nbut using the ``tee`` command. This ensures that the output goes to the\nfile as well as ``stdout``. ``cron`` captures that ``stdout`` and puts it\ninto an email, which then gets sent to the user who owns the job. This\nusually means the email goes to ``myuser@localhost``, which on many\ndistributions means that it is saved to ``/var/mail/myuser``. Do note\nthat if the command generates no output, then ``cron`` **will not send\nan email**, so it's a good idea to emit an error message.\n\nOnce we're sure that email is being delivered, we're halfway\nthere. Now we just need the actual Cronfed cronjob::\n\n  */15 * * * * /usr/bin/python -m cronfed --output /var/www/mysite/assets/cronfed.rss /var/mail/myuser 2>&1 | tee -a /home/myuser/project/logs/cronfed.txt\n\nIn this example we have the installed ``cronfed`` module regenerating\nour feed every fifteen minutes. This is a pretty quick process in most\ncases, so feel free to make it more often. In this case, the output of\ncronfed itself is monitored in exactly the same way as normal cron\njobs, with a logfile and email to ``user@localhost``.\n\nHistory\n-------\n\nCronfed was created for `Hatnote`_ to monitor the periodic data\nrefreshes necessary to generate `The Weeklypedia`_. See those cron\njobs and more in the `Weeklypedia crontab`_.\n\n* Copyright: (c) 2015 by `Mark Williams`_ and `Mahmoud Hashemi`_\n* License: BSD, see LICENSE for more details.\n\n\n.. _browser: https://www.mozilla.org/en-US/firefox/new/\n.. _feedreader: https://theoldreader.com/\n.. _IFTTT: https://ifttt.com/\n.. _Hatnote: http://hatnote.com\n.. _The Weeklypedia: http://weekly.hatnote.com\n.. _Weeklypedia crontab: https://github.com/hatnote/weeklypedia/blob/master/weeklypedia/crontab\n.. _Mark Williams: https://github.com/markrwilliams/\n.. _Mahmoud Hashemi: https://github.com/mahmoud/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hatnote/cronfed", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "cronfed", "package_url": "https://pypi.org/project/cronfed/", "platform": "any", "project_url": "https://pypi.org/project/cronfed/", "project_urls": {"Homepage": "https://github.com/hatnote/cronfed"}, "release_url": "https://pypi.org/project/cronfed/20.0.0/", "requires_dist": null, "requires_python": "", "summary": "Bare minimum cron job monitoring for the masses.", "version": "20.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://farm9.staticflickr.com/8144/7544169948_8abb2bb2f3_m_d.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26bd4d17be319f75f12510dda9087142e01b7d2d/68747470733a2f2f6661726d392e737461746963666c69636b722e636f6d2f383134342f373534343136393934385f386162623262623266335f6d5f642e6a7067\">\n<p><strong>Cronfed</strong> monitors basic batch jobs, or any other cron-based\nscheduled commands by parsing a given mailbox and turning it into an\nRSS feed. The feed can in turn be monitored with your <a href=\"https://www.mozilla.org/en-US/firefox/new/\" rel=\"nofollow\">browser</a>,\n<a href=\"https://theoldreader.com/\" rel=\"nofollow\">feedreader</a> or other RSS-compatible service (such as <a href=\"https://ifttt.com/\" rel=\"nofollow\">IFTTT</a>).</p>\n<p>Simply add a cron job to generate the feed, pointing it at a\nweb-accessible location (such as a <tt>public_html</tt> directory or your\nsite\u2019s assets directory). Check out the example for some real-world\nCronfed usage, with an explanation of how cron and Cronfed work\ntogether.</p>\n<p>Cronfed is <strong>Minimum Viable Monitoring</strong>, aimed at providing a basic\nthreshold of monitoring without complex automation or dependencies.\nIt\u2019s targeted at smaller projects which otherwise might go without any\nmonitoring at all. It\u2019s so easy to set up and use on the standard\nLinux/BSD machine that there\u2019s no reason to not use it from\nDay 1. While Cronfed makes attempts at limiting the amount of\ninformation externalized, it is not recommended for jobs with\nextremely-sensitive information.</p>\n<p><em>\u201cCronfed: It\u2019s the least you could do!\u201d</em></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Cronfed is pure Python, has no system library dependencies, and should\nwork wonders on any POSIX machine with a functioning cron daemon and\nlocal mail system:</p>\n<pre>pip install cronfed\n</pre>\n<p>Run <tt>python <span class=\"pre\">-m</span> cronfed <span class=\"pre\">--help</span></tt> to see options, or read on for a\nusage example.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>First, let\u2019s look at a basic cron job. This one will fetch our data\nonce an hour, on the hour:</p>\n<pre>0 * * * * /usr/bin/python /home/myuser/project/fetch.py 2&gt;&amp;1 | tee -a /home/myuser/project/logs/fetch.txt\n</pre>\n<p>Notice how the output (<tt>stdout</tt> + <tt>stderr</tt>) is piped to a log file,\nbut using the <tt>tee</tt> command. This ensures that the output goes to the\nfile as well as <tt>stdout</tt>. <tt>cron</tt> captures that <tt>stdout</tt> and puts it\ninto an email, which then gets sent to the user who owns the job. This\nusually means the email goes to <tt>myuser@localhost</tt>, which on many\ndistributions means that it is saved to <tt>/var/mail/myuser</tt>. Do note\nthat if the command generates no output, then <tt>cron</tt> <strong>will not send\nan email</strong>, so it\u2019s a good idea to emit an error message.</p>\n<p>Once we\u2019re sure that email is being delivered, we\u2019re halfway\nthere. Now we just need the actual Cronfed cronjob:</p>\n<pre>*/15 * * * * /usr/bin/python -m cronfed --output /var/www/mysite/assets/cronfed.rss /var/mail/myuser 2&gt;&amp;1 | tee -a /home/myuser/project/logs/cronfed.txt\n</pre>\n<p>In this example we have the installed <tt>cronfed</tt> module regenerating\nour feed every fifteen minutes. This is a pretty quick process in most\ncases, so feel free to make it more often. In this case, the output of\ncronfed itself is monitored in exactly the same way as normal cron\njobs, with a logfile and email to <tt>user@localhost</tt>.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>Cronfed was created for <a href=\"http://hatnote.com\" rel=\"nofollow\">Hatnote</a> to monitor the periodic data\nrefreshes necessary to generate <a href=\"http://weekly.hatnote.com\" rel=\"nofollow\">The Weeklypedia</a>. See those cron\njobs and more in the <a href=\"https://github.com/hatnote/weeklypedia/blob/master/weeklypedia/crontab\" rel=\"nofollow\">Weeklypedia crontab</a>.</p>\n<ul>\n<li>Copyright: (c) 2015 by <a href=\"https://github.com/markrwilliams/\" rel=\"nofollow\">Mark Williams</a> and <a href=\"https://github.com/mahmoud/\" rel=\"nofollow\">Mahmoud Hashemi</a></li>\n<li>License: BSD, see LICENSE for more details.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6904396, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "fcfdf4778d9bf97d4b60e04fc6f3b665", "sha256": "fda5f33a4f0a947b68c6296b339a4ee62cdac675646253fb59ea10e7b4b1cd56"}, "downloads": -1, "filename": "cronfed-0.2.0.tar.gz", "has_sig": false, "md5_digest": "fcfdf4778d9bf97d4b60e04fc6f3b665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3032, "upload_time": "2015-03-04T11:00:53", "upload_time_iso_8601": "2015-03-04T11:00:53.190968Z", "url": "https://files.pythonhosted.org/packages/86/f7/16b0d9d3bbd99be236d43e95463557cfe178166638ca6dc68dc8a1be51cf/cronfed-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e9baf9e11df2813fa982abf534499f30", "sha256": "ed0819c6c76b82a5ea2567a8d431583aec47a0196f80b10244058053a7dcf65d"}, "downloads": -1, "filename": "cronfed-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e9baf9e11df2813fa982abf534499f30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5777, "upload_time": "2015-03-04T11:11:37", "upload_time_iso_8601": "2015-03-04T11:11:37.384396Z", "url": "https://files.pythonhosted.org/packages/ba/86/8a9a8fd6b791f03224f1e76b6c999197187de0d26e11f3cb7e9cee0bfe5d/cronfed-0.2.1.tar.gz", "yanked": false}], "20.0.0": [{"comment_text": "", "digests": {"md5": "7be8ac1a9e45e562908f83afd7d6d845", "sha256": "917dc62591365088ae6e73058b56112419b64749678e19f33a03e41e4be02a3a"}, "downloads": -1, "filename": "cronfed-20.0.0.tar.gz", "has_sig": false, "md5_digest": "7be8ac1a9e45e562908f83afd7d6d845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6177, "upload_time": "2020-03-29T00:47:28", "upload_time_iso_8601": "2020-03-29T00:47:28.299038Z", "url": "https://files.pythonhosted.org/packages/98/cf/26ae2f343e2ba4b19808c724502c20f2969465efc06d2e3efa4c1d1f743f/cronfed-20.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7be8ac1a9e45e562908f83afd7d6d845", "sha256": "917dc62591365088ae6e73058b56112419b64749678e19f33a03e41e4be02a3a"}, "downloads": -1, "filename": "cronfed-20.0.0.tar.gz", "has_sig": false, "md5_digest": "7be8ac1a9e45e562908f83afd7d6d845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6177, "upload_time": "2020-03-29T00:47:28", "upload_time_iso_8601": "2020-03-29T00:47:28.299038Z", "url": "https://files.pythonhosted.org/packages/98/cf/26ae2f343e2ba4b19808c724502c20f2969465efc06d2e3efa4c1d1f743f/cronfed-20.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:14 2020"}