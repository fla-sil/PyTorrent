{"info": {"author": "frogstair", "author_email": "daniladudkin412@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "#  nanologger\nnanologger is a tiny logger made with Python.\n\nIt includes basic functionality such as\n1. A basic log\n2. Warning logs\n3. Fatal logs\n4. Success logs\n\nThis tiny package also includes time format editing and enabling/disabling colors\n\n***Warning***: Windows does not support color in console, so it is automatically disabled\n\n##  Example code:\n```python\nimport nanologger as log\n\nprint(\"The first four logs will be printed, and will not exit on Fatal call\")\nlog.Log(\"Database service is up\")\nlog.Warning(\"File not found, using default directory\")\nlog.Fatal(\"Cannot connect to server\", exit = False)\nlog.Success(\"Operation Complete\\n\")\n\nprint(\"Next three four will be printed without color\")\nlog.hasColor = False\nlog.Log(\"Database service is up\")\nlog.Warning(\"File not found, using default directory\")\nlog.Fatal(\"Cannot connect to server\", exit = False)\nlog.Success(\"Operation Complete\\n\")\n\nprint(\"Next three four will be printed without timestamp\")\nlog.hasColor = True\nlog.hasTimestamp = False\nlog.Log(\"Database service is up\")\nlog.Warning(\"File not found, using default directory\")\nlog.Fatal(\"Cannot connect to server\", exit = False)\nlog.Success(\"Operation Complete\\n\")\n\nprint(\"Next three logs will be printed in a different time format, and exit on Fatal call\")\nlog.hasTimestamp = True\nlog.hasColor = True\nlog.timeFormat = \"%Y-%m-%d\"\nlog.Log(\"Database service is up\")\nlog.Warning(\"File not found, using default directory\")\nlog.Fatal(\"Cannot connect to server\")\nlog.Success(\"Operation Complete\")\n```\n##  Methods:\n1.  `Log` prints a log with a timestamp\n2.  `Warning` prints a warning with timestamp\n3.  `Fatal` prints a fatal log (terminates program if appropeiate value set)\n4.  `Success` prints a success log\n\n##  Variables:\n1. `timeFormat` is a string, supports regular Python timestamps **default: \"%d-%m-%Y %H:%M:%S\"**\n2. `hasColor` is a boolean that sets/removes color from the logs **default: True**\n3. `hasTimestamp` is a boolean that sets/removes the timestamp **default: True**\n\n##  Installation\nInstall the package  by running\n```bash\npip install nanologger\n```\nImport it with\n```python\nimport nanologger\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nanologger", "package_url": "https://pypi.org/project/nanologger/", "platform": "", "project_url": "https://pypi.org/project/nanologger/", "project_urls": null, "release_url": "https://pypi.org/project/nanologger/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A tiny logger tool for Python", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nanologger</h1>\n<p>nanologger is a tiny logger made with Python.</p>\n<p>It includes basic functionality such as</p>\n<ol>\n<li>A basic log</li>\n<li>Warning logs</li>\n<li>Fatal logs</li>\n<li>Success logs</li>\n</ol>\n<p>This tiny package also includes time format editing and enabling/disabling colors</p>\n<p><em><strong>Warning</strong></em>: Windows does not support color in console, so it is automatically disabled</p>\n<h2>Example code:</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nanologger</span> <span class=\"k\">as</span> <span class=\"nn\">log</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The first four logs will be printed, and will not exit on Fatal call\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"s2\">\"Database service is up\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Warning</span><span class=\"p\">(</span><span class=\"s2\">\"File not found, using default directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot connect to server\"</span><span class=\"p\">,</span> <span class=\"n\">exit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"s2\">\"Operation Complete</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Next three four will be printed without color\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">hasColor</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"s2\">\"Database service is up\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Warning</span><span class=\"p\">(</span><span class=\"s2\">\"File not found, using default directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot connect to server\"</span><span class=\"p\">,</span> <span class=\"n\">exit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"s2\">\"Operation Complete</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Next three four will be printed without timestamp\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">hasColor</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">hasTimestamp</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"s2\">\"Database service is up\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Warning</span><span class=\"p\">(</span><span class=\"s2\">\"File not found, using default directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot connect to server\"</span><span class=\"p\">,</span> <span class=\"n\">exit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"s2\">\"Operation Complete</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Next three logs will be printed in a different time format, and exit on Fatal call\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">hasTimestamp</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">hasColor</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">timeFormat</span> <span class=\"o\">=</span> <span class=\"s2\">\"%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">\"</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Log</span><span class=\"p\">(</span><span class=\"s2\">\"Database service is up\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Warning</span><span class=\"p\">(</span><span class=\"s2\">\"File not found, using default directory\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatal</span><span class=\"p\">(</span><span class=\"s2\">\"Cannot connect to server\"</span><span class=\"p\">)</span>\n<span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Success</span><span class=\"p\">(</span><span class=\"s2\">\"Operation Complete\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Methods:</h2>\n<ol>\n<li><code>Log</code> prints a log with a timestamp</li>\n<li><code>Warning</code> prints a warning with timestamp</li>\n<li><code>Fatal</code> prints a fatal log (terminates program if appropeiate value set)</li>\n<li><code>Success</code> prints a success log</li>\n</ol>\n<h2>Variables:</h2>\n<ol>\n<li><code>timeFormat</code> is a string, supports regular Python timestamps <strong>default: \"%d-%m-%Y %H:%M:%S\"</strong></li>\n<li><code>hasColor</code> is a boolean that sets/removes color from the logs <strong>default: True</strong></li>\n<li><code>hasTimestamp</code> is a boolean that sets/removes the timestamp <strong>default: True</strong></li>\n</ol>\n<h2>Installation</h2>\n<p>Install the package  by running</p>\n<pre>pip install nanologger\n</pre>\n<p>Import it with</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nanologger</span>\n</pre>\n\n          </div>"}, "last_serial": 7150393, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "4e5167c9c8906b64bd43df9b4ad487dd", "sha256": "465271d3a4451c4ee6da24a527d7f858764f03b7faaf47d67dfb2c27a7a7a71a"}, "downloads": -1, "filename": "nanologger-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4e5167c9c8906b64bd43df9b4ad487dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3073, "upload_time": "2020-04-29T18:10:51", "upload_time_iso_8601": "2020-04-29T18:10:51.064212Z", "url": "https://files.pythonhosted.org/packages/fa/a9/7f201e7df3d56373727106db4a4b16f21bf0a3d6debdd9793b2cbde5cff4/nanologger-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6317fa6aec2df2db4c8117095559c7b5", "sha256": "f4524507420a4a2cbe7baa35276956d95d21244bb96d3049ebc94452d59e09ba"}, "downloads": -1, "filename": "nanologger-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6317fa6aec2df2db4c8117095559c7b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2283, "upload_time": "2020-04-29T18:10:52", "upload_time_iso_8601": "2020-04-29T18:10:52.452493Z", "url": "https://files.pythonhosted.org/packages/e6/50/704a6d17c4aaf594221137702c170e480845b93935a5939b79006e794694/nanologger-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "17b3681263f47578a8cda743e9dfb163", "sha256": "46eb74169a271abc4468214aea70b4628f3e0763a34187b700b79919178122ad"}, "downloads": -1, "filename": "nanologger-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "17b3681263f47578a8cda743e9dfb163", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3188, "upload_time": "2020-05-02T08:47:14", "upload_time_iso_8601": "2020-05-02T08:47:14.554504Z", "url": "https://files.pythonhosted.org/packages/27/11/f2d42cda0e70ef471391145a07bd983d4cbf9ef94d7af4353a62a996e312/nanologger-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57f64a401facff9f6201c0b03c6a9cc3", "sha256": "541e6d00a0eb8d0b4a72055501b363383b579372fbbce2d74b0b6348bfa7e931"}, "downloads": -1, "filename": "nanologger-1.0.3.tar.gz", "has_sig": false, "md5_digest": "57f64a401facff9f6201c0b03c6a9cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2388, "upload_time": "2020-05-02T08:47:15", "upload_time_iso_8601": "2020-05-02T08:47:15.625523Z", "url": "https://files.pythonhosted.org/packages/8e/cf/d32cf9e9edc411aa9bc9a8108b2ba00e4475a3ef9c4d25a7db2c8c1b65ab/nanologger-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17b3681263f47578a8cda743e9dfb163", "sha256": "46eb74169a271abc4468214aea70b4628f3e0763a34187b700b79919178122ad"}, "downloads": -1, "filename": "nanologger-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "17b3681263f47578a8cda743e9dfb163", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3188, "upload_time": "2020-05-02T08:47:14", "upload_time_iso_8601": "2020-05-02T08:47:14.554504Z", "url": "https://files.pythonhosted.org/packages/27/11/f2d42cda0e70ef471391145a07bd983d4cbf9ef94d7af4353a62a996e312/nanologger-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57f64a401facff9f6201c0b03c6a9cc3", "sha256": "541e6d00a0eb8d0b4a72055501b363383b579372fbbce2d74b0b6348bfa7e931"}, "downloads": -1, "filename": "nanologger-1.0.3.tar.gz", "has_sig": false, "md5_digest": "57f64a401facff9f6201c0b03c6a9cc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2388, "upload_time": "2020-05-02T08:47:15", "upload_time_iso_8601": "2020-05-02T08:47:15.625523Z", "url": "https://files.pythonhosted.org/packages/8e/cf/d32cf9e9edc411aa9bc9a8108b2ba00e4475a3ef9c4d25a7db2c8c1b65ab/nanologger-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:38 2020"}