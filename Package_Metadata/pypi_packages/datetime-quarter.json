{"info": {"author": "BetaS", "author_email": "thou1999@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# datetime-quarter\nSimple quarter support for python `datetime.date`\n\n## Setup\n\n1. Install via pip (`pip install datetime-quarter`)\n2. or via git (`git clone \"https://github.com/BetaS/datetime-quarter\"`)\n3. Check availability in your project like below\n```python\nfrom datequarter import DateQuarter\n\nsample = DateQuarter(2019, 4)\nprint(sample)  # 2019 4Q\n```\n\n## Operations\n\n### 1. Creation\n- `item = DateQuarter(2019, 4)  # 2019 4Q`\n- `item = DateQuarter(2018, 8)  # 2019 4Q` *for convinience*\n- `item = DateQuarter.from_date(datetime.date(2019, 12, 31))  # 2019 4Q`\n\n### 2. Adding or sub quarter\n- `DateQuarter(2019, 4)+1  # 2020 1Q`\n- `DateQuarter(2019, 4)-4  # 2018 4Q`\n\n### 3. Getting distance\n- `DateQuarter(2019, 4) - DateQuarter(2019, 1)  # 3Q`\n- `DateQuarter(2019, 1) - DateQuarter(2019, 4)  # -3Q`\n\n### 4. Comparison of `DateQuarter`\n- `DateQuarter(2019, 1) > DateQuarter(2019, 4)  # False`\n- `DateQuarter(2019, 1) < DateQuarter(2019, 4)  # True`\n- `DateQuarter(2019, 1) == DateQuarter(2019, 4)  # False`\n- `DateQuarter(2019, 1) != DateQuarter(2019, 4)  # True`\n- also support `>=` and `<=`\n\n### 5. Comparison of `datetime.date`\n- `datetime.date(2019, 12, 31) in DateQuarter(2019, 1)  # False`\n- `datetime.date(2019, 12, 31) in DateQuarter(2019, 4)  # True`\n- also support `>`, `>=` and vice versa\n\n### 6. Getting start and end date\n- `DateQuarter(2019, 1).start_date()  # datetime.date(2019, 1, 1)`\n- `DateQuarter(2019, 1).end_date()  # datetime.date(2019, 3, 31)`\n\n### 7. Iterate over containing date\n```python\nquarter = DateQuarter(2019, 1)\nfor day in quarter.days():\n    print(day)  # [datetime.date(2019, 1, 1), ..., datetime.date(2019, 3, 31)]\n```\n\n### 8. Iterate between `DateQuarter`\n```python\nstart = DateQuarter(2019, 1)\nend = DateQuarter(2019, 4)\nfor quarter in DateQuarter.between(start, end):\n    print(quarter)  # [DateQuarter(2019, 1), DateQuarter(2019, 2) , DateQuarter(2019,3)]\n```\n- also it support reversed case\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BetaS/datetime-quarter", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "datetime-quarter", "package_url": "https://pypi.org/project/datetime-quarter/", "platform": "", "project_url": "https://pypi.org/project/datetime-quarter/", "project_urls": {"Homepage": "https://github.com/BetaS/datetime-quarter"}, "release_url": "https://pypi.org/project/datetime-quarter/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Simple and lightweight quarter support for python datetime", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>datetime-quarter</h1>\n<p>Simple quarter support for python <code>datetime.date</code></p>\n<h2>Setup</h2>\n<ol>\n<li>Install via pip (<code>pip install datetime-quarter</code>)</li>\n<li>or via git (<code>git clone \"https://github.com/BetaS/datetime-quarter\"</code>)</li>\n<li>Check availability in your project like below</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datequarter</span> <span class=\"kn\">import</span> <span class=\"n\">DateQuarter</span>\n\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">DateQuarter</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>  <span class=\"c1\"># 2019 4Q</span>\n</pre>\n<h2>Operations</h2>\n<h3>1. Creation</h3>\n<ul>\n<li><code>item = DateQuarter(2019, 4) # 2019 4Q</code></li>\n<li><code>item = DateQuarter(2018, 8) # 2019 4Q</code> <em>for convinience</em></li>\n<li><code>item = DateQuarter.from_date(datetime.date(2019, 12, 31)) # 2019 4Q</code></li>\n</ul>\n<h3>2. Adding or sub quarter</h3>\n<ul>\n<li><code>DateQuarter(2019, 4)+1 # 2020 1Q</code></li>\n<li><code>DateQuarter(2019, 4)-4 # 2018 4Q</code></li>\n</ul>\n<h3>3. Getting distance</h3>\n<ul>\n<li><code>DateQuarter(2019, 4) - DateQuarter(2019, 1) # 3Q</code></li>\n<li><code>DateQuarter(2019, 1) - DateQuarter(2019, 4) # -3Q</code></li>\n</ul>\n<h3>4. Comparison of <code>DateQuarter</code></h3>\n<ul>\n<li><code>DateQuarter(2019, 1) &gt; DateQuarter(2019, 4) # False</code></li>\n<li><code>DateQuarter(2019, 1) &lt; DateQuarter(2019, 4) # True</code></li>\n<li><code>DateQuarter(2019, 1) == DateQuarter(2019, 4) # False</code></li>\n<li><code>DateQuarter(2019, 1) != DateQuarter(2019, 4) # True</code></li>\n<li>also support <code>&gt;=</code> and <code>&lt;=</code></li>\n</ul>\n<h3>5. Comparison of <code>datetime.date</code></h3>\n<ul>\n<li><code>datetime.date(2019, 12, 31) in DateQuarter(2019, 1) # False</code></li>\n<li><code>datetime.date(2019, 12, 31) in DateQuarter(2019, 4) # True</code></li>\n<li>also support <code>&gt;</code>, <code>&gt;=</code> and vice versa</li>\n</ul>\n<h3>6. Getting start and end date</h3>\n<ul>\n<li><code>DateQuarter(2019, 1).start_date() # datetime.date(2019, 1, 1)</code></li>\n<li><code>DateQuarter(2019, 1).end_date() # datetime.date(2019, 3, 31)</code></li>\n</ul>\n<h3>7. Iterate over containing date</h3>\n<pre><span class=\"n\">quarter</span> <span class=\"o\">=</span> <span class=\"n\">DateQuarter</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">day</span> <span class=\"ow\">in</span> <span class=\"n\">quarter</span><span class=\"o\">.</span><span class=\"n\">days</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">day</span><span class=\"p\">)</span>  <span class=\"c1\"># [datetime.date(2019, 1, 1), ..., datetime.date(2019, 3, 31)]</span>\n</pre>\n<h3>8. Iterate between <code>DateQuarter</code></h3>\n<pre><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">DateQuarter</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">DateQuarter</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">quarter</span> <span class=\"ow\">in</span> <span class=\"n\">DateQuarter</span><span class=\"o\">.</span><span class=\"n\">between</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">quarter</span><span class=\"p\">)</span>  <span class=\"c1\"># [DateQuarter(2019, 1), DateQuarter(2019, 2) , DateQuarter(2019,3)]</span>\n</pre>\n<ul>\n<li>also it support reversed case</li>\n</ul>\n\n          </div>"}, "last_serial": 6596895, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "82e9f15154713af7b32e02f1818b2c98", "sha256": "e10c2b68e9f26e8ba628c9e6d41dc12a0d6842522c01ad6a8a97ae0418460b0b"}, "downloads": -1, "filename": "datetime_quarter-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "82e9f15154713af7b32e02f1818b2c98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3829, "upload_time": "2020-02-09T09:26:02", "upload_time_iso_8601": "2020-02-09T09:26:02.817990Z", "url": "https://files.pythonhosted.org/packages/21/77/a3fef79310c74e23854dbb312c7465d59a5ccd7d3a54233a1d370d149643/datetime_quarter-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f715a73f867da29cce4bcf72618dc9ae", "sha256": "834b8fd66d49a0b55953a55e8dc33bf2ce4a57b3d72d730b34f59df104c1eacd"}, "downloads": -1, "filename": "datetime-quarter-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f715a73f867da29cce4bcf72618dc9ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2583, "upload_time": "2020-02-09T09:26:05", "upload_time_iso_8601": "2020-02-09T09:26:05.471761Z", "url": "https://files.pythonhosted.org/packages/1c/0f/24b1345c79dbc580645b76c00dc3b775a14e67b7424d7ff80774ff90820f/datetime-quarter-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "9a10c746af26af7784875e43398d26a3", "sha256": "e5d89d06175366d5e5693900ecd2e700e4dcd23705b91acd6bd123a65281787d"}, "downloads": -1, "filename": "datetime_quarter-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9a10c746af26af7784875e43398d26a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3929, "upload_time": "2020-02-09T09:44:34", "upload_time_iso_8601": "2020-02-09T09:44:34.214561Z", "url": "https://files.pythonhosted.org/packages/a4/40/d981eda9ede2f5d2a9a31b43d640836595a1679543c54103c71eaca61f9b/datetime_quarter-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ae6baa49522a403cac4c6fc15a1f3e8", "sha256": "86ac0e8c4483e6343df89443f26eaeedce3cff1cbafe700027a9d9a7c35abbd2"}, "downloads": -1, "filename": "datetime-quarter-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0ae6baa49522a403cac4c6fc15a1f3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2680, "upload_time": "2020-02-09T09:44:35", "upload_time_iso_8601": "2020-02-09T09:44:35.839148Z", "url": "https://files.pythonhosted.org/packages/50/7c/3b95527669bddb18d5f44ae3ff4c23e734bbf5552851926a34e40b67fdeb/datetime-quarter-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a10c746af26af7784875e43398d26a3", "sha256": "e5d89d06175366d5e5693900ecd2e700e4dcd23705b91acd6bd123a65281787d"}, "downloads": -1, "filename": "datetime_quarter-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9a10c746af26af7784875e43398d26a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3929, "upload_time": "2020-02-09T09:44:34", "upload_time_iso_8601": "2020-02-09T09:44:34.214561Z", "url": "https://files.pythonhosted.org/packages/a4/40/d981eda9ede2f5d2a9a31b43d640836595a1679543c54103c71eaca61f9b/datetime_quarter-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ae6baa49522a403cac4c6fc15a1f3e8", "sha256": "86ac0e8c4483e6343df89443f26eaeedce3cff1cbafe700027a9d9a7c35abbd2"}, "downloads": -1, "filename": "datetime-quarter-1.0.3.tar.gz", "has_sig": false, "md5_digest": "0ae6baa49522a403cac4c6fc15a1f3e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2680, "upload_time": "2020-02-09T09:44:35", "upload_time_iso_8601": "2020-02-09T09:44:35.839148Z", "url": "https://files.pythonhosted.org/packages/50/7c/3b95527669bddb18d5f44ae3ff4c23e734bbf5552851926a34e40b67fdeb/datetime-quarter-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:04 2020"}