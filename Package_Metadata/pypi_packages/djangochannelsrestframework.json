{"info": {"author": "Matthaus Woolard", "author_email": "matthaus.woolard@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "==============================\nDjango Channels Rest Framework\n==============================\n\nDjango Channels Rest Framework provides a DRF like interface for building channels-v2 websocket consumers.\n\n\nThis project can be used alongside HyperMediaChannels_ and ChannelsMultiplexer_ to create a Hyper Media Style api over websockets. However Django Channels Rest Framework is also a free standing framwork with the goal of providing an api that is familiar to DRF users. \n\n.. _HyperMediaChannels: https://github.com/hishnash/hypermediachannels\n.. _ChannelsMultiplexer: https://github.com/hishnash/channelsmultiplexer\n\n.. image:: https://travis-ci.org/hishnash/djangochannelsrestframework.svg?branch=master\n    :target: https://travis-ci.org/hishnash/djangochannelsrestframework\n\nThanks to\n---------\n\n\nDCRF is based of a fork of `Channels Api <https://github.com/linuxlewis/channels-api>`_ and of course inspired by `Django Rest Framework <http://www.django-rest-framework.org/>`_.\n\n\nInstall\n-------\n\n.. code-block:: bash\n\n  pip install djangochannelsrestframework\n\n\nHow to Use\n==========\n\n\n\nObserving a Model instance\n--------------------------\n\nConsumer that accepts subscribtions to an instance.\n\n.. code-block:: python\n\n   class TestConsumer(ObserverModelInstanceMixin, GenericAsyncAPIConsumer):\n       queryset = get_user_model().objects.all()\n       serializer_class = UserSerializer\n\nthis exposes the `retrieve` and `subscribe_instance` actions to that instance.\n\nto subscribe send:\n\n\n.. code-block:: python\n\n   {\n       \"action\": \"subscribe_instance\",\n       \"pk\": 42,  # the id of the instance you are subscribing to\n       \"request_id\": 4  # this id will be used for all resultent updates.\n   }\n\n\nActions will be sent down out from the server:\n\n.. code-block:: python\n\n\t{\n\t\t\"action\": \"update\",\n\t\t\"errors\": [],\n\t\t\"response_status\": 200,\n\t\t\"request_id\": 4,\n\t\t\"data\": {'email': '42@example.com', 'id': 42, 'username': 'thenewname'},\n\t}\n\nAdding Custom actions\n---------------------\n\n\n.. code-block:: python\n\n   class UserConsumer(GenericAsyncAPIConsumer):\n       queryset = get_user_model().objects.all()\n       serializer_class = UserSerializer\n\n       @action()\n       async def send_email(self, pk=None, to=None, **kwargs):\n           user = await database_sync_to_async(self.get_object)(pk=pk)\n           # ... do some stuff\n           # remember to wrap all db actions in `database_sync_to_async`\n           return {}, 200  # return the contenct and the response code.\n\n       @action()  # if the method is not async it is already wrapped in `database_sync_to_async`\n       def publish(self, pk=None, **kwargs):\n           user = self.get_object(pk=pk)\n\t   # ...\n\t   return {'pk': pk}, 200\n\nYou can also use any of:\n\n*  ``CreateModelMixin``\n*  ``ListModelMixin``\n*  ``RetrieveModelMixin``\n*  ``UpdateModelMixin``\n*  ``PatchModelMixin``\n*  ``DeleteModelMixin``\n\njust as you would in DRF.\n\n.. code-block:: python\n\n  from djangochannelsrestframework.generics import GenericAsyncAPIConsumer\n  from djangochannelsrestframework.mixins import (\n      RetrieveModelMixin,\n      UpdateModelMixin\n  )\n\n  class UserConsumer(RetrieveModelMixin, UpdateModelMixin, GenericAsyncAPIConsumer):\n      queryset = get_user_model().objects.all()\n      serializer_class = UserSerializer\n\n\nConsumers that are not bound to Models\n--------------------------------------\n\n\nYou can also create consumers that are not at all related to any models.\n\n.. code-block:: python\n\n  from djangochannelsrestframework.decorators import action\n  from djangochannelsrestframework.consumers import AsyncAPIConsumer\n\n  class MyConsumer(AsyncAPIConsumer):\n\n      @action()\n      async def an_async_action(self, some=None, **kwargs):\n          # do something async\n\t  return {'response with': 'some message'}, 200\n\n      @action()\n      def a_sync_action(self, pk=None, **kwargs):\n          # do something sync\n\t  return {'response with': 'some message'}, 200\n\nUsing your normal views over a websocket connection\n---------------------------------------------------\n\n.. code-block:: python\n\n  from djangochannelsrestframework.consumers import view_as_consumer\n\n  application = ProtocolTypeRouter({\n      \"websocket\": AuthMiddlewareStack(\n          URLRouter([\n\t      url(r\"^front(end)/$\", view_as_consumer(YourDjangoView)),\n\t  ])\n      ),\n   })\n\n\nCreating a fully-functional custom Consumer\n-------------------------------------------\n\nThis package offers Django Rest Framework capabilities via mixins. To utilize these mixins, one must inherit from the ``GenericAsyncAPIConsumer``.\n\nOne may use the same exact querysets and ``serializer_classes`` utilized in their DRF Views, but must omit the DRF permissions. \n\nPermissions are to be imported from djangochannelsrestframework, which provides the standard ``AllowAny`` and ``IsAuthenticated`` permissions.\n\n\n.. code-block:: python\n\n    from . import models\n    from . import serializers\n    from djangochannelsrestframework import permissions\n    from djangochannelsrestframework.generics import GenericAsyncAPIConsumer\n    from djangochannelsrestframework.mixins import (\n        ListModelMixin,\n        PatchModelMixin,\n        UpdateModelMixin,\n        CreateModelMixin,\n        DeleteModelMixin,\n    )\n\n    class LiveConsumer(ListModelMixin, GenericAsyncAPIConsumer):\n        queryset = models.Test.objects.all()\n        serializer_class = serializers.TestSerializer\n        permission_classes = (permissions.IsAuthenticated,)\n\n\nBecause this class uses the ``ListModelMixin``, one has access to the ``list`` action.\n\nOne can access this action from the client with a payload, or from within a method:\n\nAccess action from Client ``payload: {action: \"list\", \"request_id\": 42}``\n\nNote: Mixin - available action\n\n``ListModelMixin`` - ``list``\n``PatchModelMixin`` - ``patch``\n``CreateModelMixin`` - ``create``\n``RetrieveModelMixin`` - ``retrieve``\n``UpdateModelMixin`` - ``update``\n``DeleteModelMixin`` - ``delete``\n\n\nSubscribing to all instances of a model\n---------------------------------------\n\nOne can subscribe to all instances of a model by utilizing the ``model_observer``.\n\n.. code-block:: python\n\n    from djangochannelsrestframework.observer import model_observer\n\n    @model_observer(models.Test)\n    async def model_activity(self, message, observer=None, **kwargs):\n        # send activity to your frontend\n        await self.send_json(message)\n\nThis method will send messages to the client on all CRUD operations made through the Django ORM.\n\nNote: These notifications do not include bulk updates, such as ``models.Test.objects.filter(name=\"abc\").update(name=\"newname\")``\n\n\nCreating consumer operation\n---------------------------\n\nTo create consumer operations, one can choose between using the traditional ``receive_json`` method utilized in typical consumers or djangochannelsrestframework actions. \n\nActions are created by adding the ``action`` <decorator> to a method.\n\n.. code-block:: python\n\n    from djangochannelsrestframework.decorators import action\n\n    # Subscribe to model via action\n    @action()\n    async def subscribe_to_model(self, **kwargs):\n        await LiveConsumer.model_activity.subscribe(self)\n\n    # Subscribe to model via receive_json\n    async def receive_json(self, content):\n        await super().receive_json(content)\n        await LiveConsumer.model_activity.subscribe(self)\n\nBoth the action and ``receive_json`` make use of the ``model_activity`` method in the ``LiveConsumer`` class, referred to above, subscribing to all CRUD operations of the model specified in the ``@model_observer``.\n\nNote: If utilizing ``receive_json``, one must ``super().receive_json(content)`` to avoid the disruption of other actions not declared in the ``receive_json``.\n\n\nInitiating operation on consumer connect\n----------------------------------------\n\nOne may initiate operations on consumer connects by overriding the ``websocket_connect`` method.\n\n.. code-block:: python\n\n    async def websocket_connect(self, message):\n\n        # Super Save\n        await super().websocket_connect(message)\n\n        # Initialized operation\n        await type(self).activities_change.subscribe(self)\n\n\nThis method utilizes the previously mentioned ``model_activity`` method to subscribe to all instances of the current Consumer's model. \n\nNote: Notice the use of ``type(self)``, rather than ``LiveConsumer``. This is a more dynamic approach, most likely used in a custom Consumer mixin, allowing one to subscribe to the current consumer rather than a specific one.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hishnash/djangochannelsrestframework", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "djangochannelsrestframework", "package_url": "https://pypi.org/project/djangochannelsrestframework/", "platform": "", "project_url": "https://pypi.org/project/djangochannelsrestframework/", "project_urls": {"Homepage": "https://github.com/hishnash/djangochannelsrestframework"}, "release_url": "https://pypi.org/project/djangochannelsrestframework/0.0.6/", "requires_dist": ["Django (>=1.11)", "channels (>=2.1.1)", "djangorestframework (>=3.0)", "pytest (~=5.4.0) ; extra == 'tests'", "pytest-django (~=3.4.1) ; extra == 'tests'", "pytest-asyncio (~=0.11.0) ; extra == 'tests'", "coverage (~=4.4) ; extra == 'tests'"], "requires_python": "", "summary": "RESTful API for WebSockets using django channels.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django Channels Rest Framework provides a DRF like interface for building channels-v2 websocket consumers.</p>\n<p>This project can be used alongside <a href=\"https://github.com/hishnash/hypermediachannels\" rel=\"nofollow\">HyperMediaChannels</a> and <a href=\"https://github.com/hishnash/channelsmultiplexer\" rel=\"nofollow\">ChannelsMultiplexer</a> to create a Hyper Media Style api over websockets. However Django Channels Rest Framework is also a free standing framwork with the goal of providing an api that is familiar to DRF users.</p>\n<a href=\"https://travis-ci.org/hishnash/djangochannelsrestframework\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/hishnash/djangochannelsrestframework.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba531f4a7c66f45edc6f0c52eb15b57622602172/68747470733a2f2f7472617669732d63692e6f72672f686973686e6173682f646a616e676f6368616e6e656c73726573746672616d65776f726b2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"thanks-to\">\n<h2>Thanks to</h2>\n<p>DCRF is based of a fork of <a href=\"https://github.com/linuxlewis/channels-api\" rel=\"nofollow\">Channels Api</a> and of course inspired by <a href=\"http://www.django-rest-framework.org/\" rel=\"nofollow\">Django Rest Framework</a>.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install djangochannelsrestframework\n</pre>\n<div id=\"how-to-use\">\n<h3>How to Use</h3>\n</div>\n</div>\n<div id=\"observing-a-model-instance\">\n<h2>Observing a Model instance</h2>\n<p>Consumer that accepts subscribtions to an instance.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TestConsumer</span><span class=\"p\">(</span><span class=\"n\">ObserverModelInstanceMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericAsyncAPIConsumer</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n</pre>\n<p>this exposes the <cite>retrieve</cite> and <cite>subscribe_instance</cite> actions to that instance.</p>\n<p>to subscribe send:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"subscribe_instance\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pk\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>  <span class=\"c1\"># the id of the instance you are subscribing to</span>\n    <span class=\"s2\">\"request_id\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>  <span class=\"c1\"># this id will be used for all resultent updates.</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Actions will be sent down out from the server:</p>\n<pre><span class=\"p\">{</span>\n        <span class=\"s2\">\"action\"</span><span class=\"p\">:</span> <span class=\"s2\">\"update\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"s2\">\"response_status\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"request_id\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"data\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'42@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'thenewname'</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"adding-custom-actions\">\n<h2>Adding Custom actions</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserConsumer</span><span class=\"p\">(</span><span class=\"n\">GenericAsyncAPIConsumer</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">to</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">database_sync_to_async</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">)(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ... do some stuff</span>\n        <span class=\"c1\"># remember to wrap all db actions in `database_sync_to_async`</span>\n        <span class=\"k\">return</span> <span class=\"p\">{},</span> <span class=\"mi\">200</span>  <span class=\"c1\"># return the contenct and the response code.</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">()</span>  <span class=\"c1\"># if the method is not async it is already wrapped in `database_sync_to_async`</span>\n    <span class=\"k\">def</span> <span class=\"nf\">publish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'pk'</span><span class=\"p\">:</span> <span class=\"n\">pk</span><span class=\"p\">},</span> <span class=\"mi\">200</span>\n</pre>\n<p>You can also use any of:</p>\n<ul>\n<li><tt>CreateModelMixin</tt></li>\n<li><tt>ListModelMixin</tt></li>\n<li><tt>RetrieveModelMixin</tt></li>\n<li><tt>UpdateModelMixin</tt></li>\n<li><tt>PatchModelMixin</tt></li>\n<li><tt>DeleteModelMixin</tt></li>\n</ul>\n<p>just as you would in DRF.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.generics</span> <span class=\"kn\">import</span> <span class=\"n\">GenericAsyncAPIConsumer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.mixins</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">RetrieveModelMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">UpdateModelMixin</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserConsumer</span><span class=\"p\">(</span><span class=\"n\">RetrieveModelMixin</span><span class=\"p\">,</span> <span class=\"n\">UpdateModelMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericAsyncAPIConsumer</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSerializer</span>\n</pre>\n</div>\n<div id=\"consumers-that-are-not-bound-to-models\">\n<h2>Consumers that are not bound to Models</h2>\n<p>You can also create consumers that are not at all related to any models.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">action</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncAPIConsumer</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyConsumer</span><span class=\"p\">(</span><span class=\"n\">AsyncAPIConsumer</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">()</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">an_async_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">some</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do something async</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'response with'</span><span class=\"p\">:</span> <span class=\"s1\">'some message'</span><span class=\"p\">},</span> <span class=\"mi\">200</span>\n\n    <span class=\"nd\">@action</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">a_sync_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do something sync</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'response with'</span><span class=\"p\">:</span> <span class=\"s1\">'some message'</span><span class=\"p\">},</span> <span class=\"mi\">200</span>\n</pre>\n</div>\n<div id=\"using-your-normal-views-over-a-websocket-connection\">\n<h2>Using your normal views over a websocket connection</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">view_as_consumer</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">ProtocolTypeRouter</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"websocket\"</span><span class=\"p\">:</span> <span class=\"n\">AuthMiddlewareStack</span><span class=\"p\">(</span>\n        <span class=\"n\">URLRouter</span><span class=\"p\">([</span>\n            <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"^front(end)/$\"</span><span class=\"p\">,</span> <span class=\"n\">view_as_consumer</span><span class=\"p\">(</span><span class=\"n\">YourDjangoView</span><span class=\"p\">)),</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">),</span>\n <span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"creating-a-fully-functional-custom-consumer\">\n<h2>Creating a fully-functional custom Consumer</h2>\n<p>This package offers Django Rest Framework capabilities via mixins. To utilize these mixins, one must inherit from the <tt>GenericAsyncAPIConsumer</tt>.</p>\n<p>One may use the same exact querysets and <tt>serializer_classes</tt> utilized in their DRF Views, but must omit the DRF permissions.</p>\n<p>Permissions are to be imported from djangochannelsrestframework, which provides the standard <tt>AllowAny</tt> and <tt>IsAuthenticated</tt> permissions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework</span> <span class=\"kn\">import</span> <span class=\"n\">permissions</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.generics</span> <span class=\"kn\">import</span> <span class=\"n\">GenericAsyncAPIConsumer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.mixins</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ListModelMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">PatchModelMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">UpdateModelMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">CreateModelMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">DeleteModelMixin</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LiveConsumer</span><span class=\"p\">(</span><span class=\"n\">ListModelMixin</span><span class=\"p\">,</span> <span class=\"n\">GenericAsyncAPIConsumer</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">serializer_class</span> <span class=\"o\">=</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">TestSerializer</span>\n    <span class=\"n\">permission_classes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"o\">.</span><span class=\"n\">IsAuthenticated</span><span class=\"p\">,)</span>\n</pre>\n<p>Because this class uses the <tt>ListModelMixin</tt>, one has access to the <tt>list</tt> action.</p>\n<p>One can access this action from the client with a payload, or from within a method:</p>\n<p>Access action from Client <tt>payload: {action: \"list\", \"request_id\": 42}</tt></p>\n<p>Note: Mixin - available action</p>\n<p><tt>ListModelMixin</tt> - <tt>list</tt>\n<tt>PatchModelMixin</tt> - <tt>patch</tt>\n<tt>CreateModelMixin</tt> - <tt>create</tt>\n<tt>RetrieveModelMixin</tt> - <tt>retrieve</tt>\n<tt>UpdateModelMixin</tt> - <tt>update</tt>\n<tt>DeleteModelMixin</tt> - <tt>delete</tt></p>\n</div>\n<div id=\"subscribing-to-all-instances-of-a-model\">\n<h2>Subscribing to all instances of a model</h2>\n<p>One can subscribe to all instances of a model by utilizing the <tt>model_observer</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.observer</span> <span class=\"kn\">import</span> <span class=\"n\">model_observer</span>\n\n<span class=\"nd\">@model_observer</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Test</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">model_activity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">observer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># send activity to your frontend</span>\n    <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">send_json</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<p>This method will send messages to the client on all CRUD operations made through the Django ORM.</p>\n<p>Note: These notifications do not include bulk updates, such as <tt><span class=\"pre\">models.Test.objects.filter(name=\"abc\").update(name=\"newname\")</span></tt></p>\n</div>\n<div id=\"creating-consumer-operation\">\n<h2>Creating consumer operation</h2>\n<p>To create consumer operations, one can choose between using the traditional <tt>receive_json</tt> method utilized in typical consumers or djangochannelsrestframework actions.</p>\n<p>Actions are created by adding the <tt>action</tt> &lt;decorator&gt; to a method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">djangochannelsrestframework.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">action</span>\n\n<span class=\"c1\"># Subscribe to model via action</span>\n<span class=\"nd\">@action</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">subscribe_to_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"n\">LiveConsumer</span><span class=\"o\">.</span><span class=\"n\">model_activity</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscribe to model via receive_json</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">receive_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"k\">await</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">receive_json</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">LiveConsumer</span><span class=\"o\">.</span><span class=\"n\">model_activity</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre>\n<p>Both the action and <tt>receive_json</tt> make use of the <tt>model_activity</tt> method in the <tt>LiveConsumer</tt> class, referred to above, subscribing to all CRUD operations of the model specified in the <tt>@model_observer</tt>.</p>\n<p>Note: If utilizing <tt>receive_json</tt>, one must <tt><span class=\"pre\">super().receive_json(content)</span></tt> to avoid the disruption of other actions not declared in the <tt>receive_json</tt>.</p>\n</div>\n<div id=\"initiating-operation-on-consumer-connect\">\n<h2>Initiating operation on consumer connect</h2>\n<p>One may initiate operations on consumer connects by overriding the <tt>websocket_connect</tt> method.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">websocket_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Super Save</span>\n    <span class=\"k\">await</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">websocket_connect</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Initialized operation</span>\n    <span class=\"k\">await</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">activities_change</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre>\n<p>This method utilizes the previously mentioned <tt>model_activity</tt> method to subscribe to all instances of the current Consumer\u2019s model.</p>\n<p>Note: Notice the use of <tt>type(self)</tt>, rather than <tt>LiveConsumer</tt>. This is a more dynamic approach, most likely used in a custom Consumer mixin, allowing one to subscribe to the current consumer rather than a specific one.</p>\n</div>\n\n          </div>"}, "last_serial": 7183395, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "aeacf2fd15c700c49ddc10c5c236ef45", "sha256": "69e929034073e41a42e69dfed7d04b6032d1dafc9769edb8003841ef587bab96"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aeacf2fd15c700c49ddc10c5c236ef45", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17100, "upload_time": "2018-05-08T08:50:40", "upload_time_iso_8601": "2018-05-08T08:50:40.484484Z", "url": "https://files.pythonhosted.org/packages/6e/e0/b0adcaab9bbacf18cc3616995a67f6f68782b782baf7e23ed52eb395264d/djangochannelsrestframework-0.0.2-py2.py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cd751fbbdcb67b78186addd52af62c44", "sha256": "3205d807cbb516ffbf33cf88e907f9b0ce11883dfc2ec355018272ef7f7cf687"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd751fbbdcb67b78186addd52af62c44", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14975, "upload_time": "2018-08-18T14:35:33", "upload_time_iso_8601": "2018-08-18T14:35:33.715654Z", "url": "https://files.pythonhosted.org/packages/13/ef/0af881781a5ab9da3486c3ee55a1e177b190b793ee55fbd7e36b9cbb3d2a/djangochannelsrestframework-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25063f35f41d09671c2dce47f64d00f3", "sha256": "db218c3a1c410ac8bb84bc19fd50c49394693eb8bad34232afdb7ddd06433b69"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.3.tar.gz", "has_sig": false, "md5_digest": "25063f35f41d09671c2dce47f64d00f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13291, "upload_time": "2018-08-18T14:35:35", "upload_time_iso_8601": "2018-08-18T14:35:35.221293Z", "url": "https://files.pythonhosted.org/packages/c7/8c/f7bdeb04bffeda5a8b5cd355b349a6b4425be2396bf9587d319d24ac543f/djangochannelsrestframework-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "b6dcd06f94d4f28c68eb1d3163394cac", "sha256": "7c7b1953575db732461632893d152e033a60df97fe412e6e56704cb8e78373ba"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b6dcd06f94d4f28c68eb1d3163394cac", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18840, "upload_time": "2020-04-09T21:43:26", "upload_time_iso_8601": "2020-04-09T21:43:26.829106Z", "url": "https://files.pythonhosted.org/packages/5b/e4/963653f7e5b529d0accbdd95399ff58d746481fb3f15aefa3df0e045f389/djangochannelsrestframework-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "280a9cf0b659ec3d9020a2c042a1c5a5", "sha256": "c814d37241b0c3906e9b2bac7e43bef5fc90705f42bfc1312230a715b183196c"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.4.tar.gz", "has_sig": false, "md5_digest": "280a9cf0b659ec3d9020a2c042a1c5a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17279, "upload_time": "2020-04-09T21:43:29", "upload_time_iso_8601": "2020-04-09T21:43:29.190231Z", "url": "https://files.pythonhosted.org/packages/92/a7/6a2561f2cfe1ee32b1851623e8ec67276768eec448ceec86825b7318a823/djangochannelsrestframework-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ff0362facb14590895e77068b08d8f13", "sha256": "72605081f444dcf1e3b81de30c983e1be818a87d33ed0e771a918791318a7636"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff0362facb14590895e77068b08d8f13", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18842, "upload_time": "2020-04-09T22:15:35", "upload_time_iso_8601": "2020-04-09T22:15:35.866185Z", "url": "https://files.pythonhosted.org/packages/75/9d/35d04bd794c2c256ef5611add841c8017598b1080b086de39c293075712b/djangochannelsrestframework-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc2854aba322f307fdae72c8d64e9aab", "sha256": "4757c073f620bff79305a6ec69af9f5b318ea711e08c9e70410420c20a6f7c79"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bc2854aba322f307fdae72c8d64e9aab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17268, "upload_time": "2020-04-09T22:15:37", "upload_time_iso_8601": "2020-04-09T22:15:37.492946Z", "url": "https://files.pythonhosted.org/packages/cf/2d/8b83d6b8ae14be932e9a2cb87066e51586ff2ca3eacdd915b5cca7fe17db/djangochannelsrestframework-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "6bd10d637bb014896cf5467e6312d134", "sha256": "f462255a789f9da5d7be38d8e0118c111ea7ebf5e6f8856cb124bbf683387a53"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bd10d637bb014896cf5467e6312d134", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18866, "upload_time": "2020-05-06T20:39:43", "upload_time_iso_8601": "2020-05-06T20:39:43.101903Z", "url": "https://files.pythonhosted.org/packages/15/01/2bb773fa062bcd058d7b16054512fe16fc54b992438c23004136a081f975/djangochannelsrestframework-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5b44d57dff7bbe8ff5c870947ce12e8", "sha256": "e846cb44d464c34bea3af7fc137571aa9af398ce292b2800f98e5069bb493056"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e5b44d57dff7bbe8ff5c870947ce12e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17312, "upload_time": "2020-05-06T20:39:45", "upload_time_iso_8601": "2020-05-06T20:39:45.783168Z", "url": "https://files.pythonhosted.org/packages/ec/7d/baad614d4c775fc71035df1bab917d8b4834e11bed3cd021c4c9c61adc33/djangochannelsrestframework-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6bd10d637bb014896cf5467e6312d134", "sha256": "f462255a789f9da5d7be38d8e0118c111ea7ebf5e6f8856cb124bbf683387a53"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bd10d637bb014896cf5467e6312d134", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18866, "upload_time": "2020-05-06T20:39:43", "upload_time_iso_8601": "2020-05-06T20:39:43.101903Z", "url": "https://files.pythonhosted.org/packages/15/01/2bb773fa062bcd058d7b16054512fe16fc54b992438c23004136a081f975/djangochannelsrestframework-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5b44d57dff7bbe8ff5c870947ce12e8", "sha256": "e846cb44d464c34bea3af7fc137571aa9af398ce292b2800f98e5069bb493056"}, "downloads": -1, "filename": "djangochannelsrestframework-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e5b44d57dff7bbe8ff5c870947ce12e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17312, "upload_time": "2020-05-06T20:39:45", "upload_time_iso_8601": "2020-05-06T20:39:45.783168Z", "url": "https://files.pythonhosted.org/packages/ec/7d/baad614d4c775fc71035df1bab917d8b4834e11bed3cd021c4c9c61adc33/djangochannelsrestframework-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:11 2020"}