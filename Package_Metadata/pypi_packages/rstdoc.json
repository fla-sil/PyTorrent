{"info": {"author": "Roland Puntaier", "author_email": "roland.puntaier@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "\n=================================\nrstdoc(1) Version 1.8.0 \\| rstdoc\n=================================\n\nSee `background and documentation <https://rstdoc.readthedocs.io/en/latest/>`__.\n\nMany companies use `DOCX <http://www.ecma-international.org/publications/standards/Ecma-376.htm>`_\nand thus produce an information barrier.\nWorking with text is more integrated in the (software) development process.\nA final format can be `DOCX`_, but, at least during development, text is better.\n\n`Sphinx <http://www.sphinx-doc.org/en/stable/>`__\nis an extension of `Docutils <http://docutils.sourceforge.net/>`__\nused for many (software) projects,\nbut it does not support creation of `DOCX`_ files, which certain companies demand.\n`Pandoc <https://pandoc.org/>`__\ndoes support `DOCX`_, but does not support the Sphinx extensions,\nhence ``:ref:`` and the like cannot be used.\n\nThis python package supports working with\n`RST <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html>`_\nas documentation format without depending on Sphinx.\n\n- link RST documents using \n  `substitutions <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions>`__\n  (generated in ``_links_xxx.r?st``)\n- create a ``.tags`` file to jump around in an editor that support \n  `ctags <http://ctags.sourceforge.net/FORMAT>`__\n- `RST`_ handling with python: reformat/create `RST`_ tables\n- post-process Pandoc's conversion from `DOCX`_ to `RST`_\n- pre-process Pandoc's conversion from `RST`_ to `DOCX`_\n- Support in building with `WAF <https://github.com/waf-project/waf>`_ (or ``Makefile``)\n\n  - expand\n    `SimpleTemplate <https://bottlepy.org/docs/dev/stpl.html#simpletemplate-syntax>`_\n    template files ``.stpl``\n  - graphics files (``.tikz``, ``.svg``, ``.dot``,  ``.uml``, ``.eps`` or ``.stpl`` thereof, and ``.pyg``)\n    are converted to ``.png``\n    and placed into ``./_images`` or ``<updir>/_images``, if there, else into current directory.\n  - a ``gen`` file specifies how `RST`_ should be generated from source code files (see ``dcx.py``)\n\nThe conventions used are shown\n\n- by the example produced via ``rstdcx --rest smplfldr`` or ``rstdcx --stpl smplfldr``\n- by the documentation sources that can be found at\n  https://github.com/rpuntaie/rstdoc/tree/master/doc\n\n``pip install rstdoc`` installs:\n\n+-----------+-------------------+--------------------------------------------+\n| Module    | CLI Script        | Description                                |\n+===========+===================+============================================+\n| dcx       | `rstdcx`_, rstdoc | create ``.tags``, labels and links         |\n+-----------+-------------------+--------------------------------------------+\n| fromdocx  | `rstfromdocx`_    | Convert DOCX to RST using Pandoc           |\n+-----------+-------------------+--------------------------------------------+\n| listtable | `rstlisttable`_   | Convert RST grid tables to list-tables     |\n+-----------+-------------------+--------------------------------------------+\n| untable   | `rstuntable`_     | Converts certain list-tables to paragraphs |\n+-----------+-------------------+--------------------------------------------+\n| reflow    | `rstreflow`_      | Reflow paragraphs and tables               |\n+-----------+-------------------+--------------------------------------------+\n| reimg     | `rstreimg`_       | Rename images referenced in the RST file   |\n+-----------+-------------------+--------------------------------------------+\n| retable   | `rstretable`_     | Transforms list tables to grid tables      |\n+-----------+-------------------+--------------------------------------------+\n\n\n\n\nrstdcx\n======\n\nrestructuredText sources are split into two types of files:\nmain files considered by Sphinx, and included files.\nWhich of ``.rest``  or ``.rst`` is main or included is determined\nby ``source_suffix`` in a ``<root>/conf.py`` or by the extension of the ``_links_xxx`` files.\n\n``rstdoc`` creates documentation (PDF, HTML, DOCX)\nfrom restructuredText (``.rst``, ``.rest``) using either\n\n- `Pandoc <https://pandoc.org>`__\n- `Sphinx <http://www.sphinx-doc.org>`__\n- Docutils\n  `configurable <http://docutils.sourceforge.net/docs/user/config.html>`__\n\n``rstdoc`` and ``rstdcx`` command line tools call ``dcx.py``.\nwhich\n\n- creates ``.tags`` to jump around with the editor\n\n- handles `.stpl <https://bottlepy.org/docs/dev/stpl.html>`__ files\n\n- processes ``gen`` files (see examples produced by --rest)\n\n- creates links files (``_links_docx.r?st``, ``_links_sphinx.r?st``, ...)\n\n- forwards known files to either Pandoc, Sphinx or Docutils\n\nSee example at the end of ``dcx.py``.\nIt is supposed to be used with a build tool.\n``make`` and ``waf`` examples are included.\n\n- Initialize example tree (add ``--rstrest`` to make ``.rst`` main and ``.rest`` included files):\n\n  $ ./dcx.py --rest repo #repo/doc/{sy,ra,sr,dd,tp}.rest files OR\n  $ ./dcx.py --stpl repo #repo/doc/{sy,ra,sr,dd,tp}.rest.stpl files\n  $ ./dcx.py --ipdt repo #repo/pdt/AAA/{i,p,d,t}.rest.stpl files\n  $ ./dcx.py --over repo #.rest all over\n\n- Only create .tags and ``_links_xxx.r?st``::\n\n  $ cd repo\n  $ rstdoc\n\n- Create the docs (and .tags and ``_links_xxx.r?st``) with **make**::\n\n  $ make html #OR\n  $ make epub #OR\n  $ make latex #OR\n  $ make docx #OR\n  $ make pdf\n\n  The latter two are done by Pandoc, the others by Sphinx.\n\n- Create the docs (and .tags and ``_links_xxx.r?st``) with\n  `waf <https://github.com/waf-project/waf>`__:\n\n  Instead of using ``make`` one can load ``dcx.py`` (``rstdoc.dcx``) in\n  `waf <https://github.com/waf-project/waf>`__.\n  ``waf`` also considers all recursively included files,\n  such that a change in any of them results in a rebuild.\n  All files can have an additional ``.stpl`` extension to use\n  `SimpleTemplate <https://bottlepy.org/docs/dev/stpl.html>`__.\n\n  $ waf configure #also copies the latest version of waf in here\n  $ waf --docs docx,sphinx_html,rst_odt\n  $ #or you provide --docs during configure to always compile the docs\n\n  - ``rst_xxx``: via\n    `rst2xxx.py <http://docutils.sourceforge.net/docs/user/tools.html>`__\n  - ``sphinx_xxx``: via `Sphinx <http://www.sphinx-doc.org>`__ and\n  - just ``xxx``: via `Pandoc <https://pandoc.org>`__.\n\n\nThe following image language files should be parallel to the ``.r?st`` files.\nThey are automatically converted to ``.png``\nand placed into ``./_images`` or ``<updir>/_images`` or else parallel to the file.\n\n- ``.tikz`` or ``.tikz.stpl``.\n  This needs LaTex.\n\n- `.svg <http://svgpocketguide.com/book/>`__ or ``.svg.stpl``\n\n- ``.dot`` or ``.dot.stpl``\n\n  This needs `graphviz <https://graphviz.gitlab.io/gallery/>`__.\n\n- `.uml <http://plantuml.com/command-line>`__ or ``.uml.stpl``\n\n  This needs `plantuml <http://plantuml.com/command-line>`__ .\n  Provide either\n\n  - ``plantuml.bat`` with e.g. ``java -jar \"%~dp0plantuml.jar\" %*``  or\n  - ``plantuml`` sh script with\n    ``java -jar `dirname $BASH_SOURCE`/plantuml.jar \"$@\"``\n\n- ``.eps`` or ``.eps.stpl`` embedded postscript files.\n\n  This needs `inkscape <https://inkscape.org/en/>`__.\n\n- ``.pyg`` contains python code that produces a graphic.\n  If the python code defines a ``to_svg`` or a ``save_to_png`` function,\n  then that is used, to create a png.\n  Else the following is tried\n\n  - ``pyx.canvas.canvas`` from the\n    `pyx <http://pyx.sourceforge.net/manual/graphics.html>`__ library or\n  - ``cairocffi.Surface`` from\n    `cairocffi <https://cairocffi.readthedocs.io/en/stable/overview.html>`__\n  - `matplotlib <https://matplotlib.org>`__.\n    If ``matplotlib.pyplot.get_fignums()>1``\n    the figures result in ``<name><fignum>.png``\n\n  The same code or the file names can be used in a ``.r?st.stpl`` file\n  with ``pngembed()`` or ``dcx.svgembed()`` to embed in html output.\n\n  ::\n\n     {{!svgembed(\"egpyx.pyg\",outinfo)}}\n     <%\n     ansvg=svgembed('''\n     from svgwrite import cm, mm, drawing\n     d=drawing.Drawing(viewBox=('0 0 300 300'))\n     d.add(d.circle(center=(2*cm, 2*cm), r='1cm', stroke='blue', stroke_width=9))\n     '''.splitlines(),outinfo)\n     %>\n     {{!ansvg}}\n\n\nConventions\n-----------\n\nFiles\n\n  - fain files and included files: ``.rest``, ``.rst`` or vice versa.\n    ``.txt`` are for literally included files (use :literal: option).\n  - templates separately rendered : ``*.rest.stpl`` and ``*.rst.stpl``\n    template included: ``*.rst.tpl``\n    Template lookup is done in\n    ``.`` and ``..`` with respect to the current file.\n\n    - with ``%include('some.rst.tpl', param=\"test\")`` with optional parameters\n    - with ``%globals().update(include('utility.rst.tpl'))``\n      if it contains only definitions\n\nLinks\n\n- ``.. _`id`:`` are *reST targets*.\n  reST targets should not be template-generated.\n  The template files should have a higher or equal number of targets\n  than the generated file,\n  in order for tags to jump to the template original.\n  If one wants to generate reST targets,\n  then this should better happen in a previous step,\n  e.g. with ``gen`` files mentioned above.\n\n- References use replacement `substitutions \\\n  <http://docutils.sourceforge.net/docs/ref/rst/directives.html#replacement-text>`__:\n  ``|id|``.\n\n- If you want an overview of the linking (traceability),\n  add ``.. include:: _traceability_file.rst``\n  to ``index.rest`` or another ``.rest`` parallel to it.\n  It is there in the example project, to include it in tests.\n  ``_traceability_file.{svg,png,rst}`` are all in the same directory.\n\nLink files are created in link roots, which are folders where the first main file\n(``.rest`` or ``.rst``) is encoutered during depth-first traversal.\nNon-overlapping link root paths produce separately linked file sets.\n\n``.. include:: /_links_sphinx.r?st``, with the one initial ``/``\ninstead of a relative or absolute path,\nwill automatically search upward for the ``_links_xxx.r?st`` file\n(``_sphinx`` is replaced by what is needed by the wanted target when the docs are generated).\n\nSphinx ``conf.py`` is augmented by configuration for Pandoc and Docutils.\nIt should be where the input file is, or better at the project root\nto be usable with `waf <https://github.com/waf-project/waf>`__.\n\nSee the example project created with ``--rest/stpl/ipdt/over``\nand the sources of the documentation of\n`rstdoc <https://github.com/rpuntaie/rstdoc>`__.\n\n\n``rstdcx`` CLI\n--------------\n\nWithout parameters: creates ``|substitution|`` links and .tags ctags for reST targets.\n\nWith two or three parameters: process file or dir to out file or dir\nthrough Pandoc, Sphinx, Docutils (third parameter):\n\n- ``html``, ``docx``, ``odt``, ``pdf``, ... uses  Pandoc.\n\n- ``rst_html``, ``rst_odt``, ``rst_pdf``, ...  uses\n  `rst2html <http://docutils.sourceforge.net/0.6/docs/user/tools.html>`__, ...\n\n- ``sphinx_html``, ``sphinx_pdf``, ...  uses Sphinx.\n  Sphinx provides a nice entry point via the\n  `sphinx bootstrap theme <https://github.com/ryan-roemer/sphinx-bootstrap-theme>`__.\n\n4th parameter onward become python defines usable in ``.stpl`` files.\n\nPdf output needs latex. Else you can make odt or docx and use\n\n- win: ``swriter.exe --headless --convert-to pdf Untitled1.odt``\n- linux: ``lowriter --headless --convert-to pdf Untitled1.odt``\n\nInkscape (.eps, .svg), Dot (.dot), Planuml (.uml), latex (.tex,.tikz)\nare converted to .png into ``./_images`` or ``<updir>/_images`` or '.'.\nAny of the files can be a SimpleTemplate template (xxx.yyy.stpl).\n\nConfiguration is in ``conf.py`` or ``../conf.py``.\n\n``rstdoc --stpl|--rest|--ipdt|-over`` create sample project trees.\n\n``--stpl`` with ``.rest.stpl`` template files,\n``--rest`` with only a doc folder with ``.rest`` files,\n``--ipdt`` with inform-plan-do-test enhancement cycles\n``--over`` with ``.rest`` files all over the project tree including symbolic links\n\nExamples\n--------\n\nExample folders (see wscript and Makefile there)::\n\n    rstdoc --rest <folder> [--rstrest]\n    rstdoc --stpl <folder> [--rstrest]\n    rstdoc --ipdt <folder> [--rstrest]\n    rstdoc --over <folder> [--rstrest]\n\nExamples usages with the files generated by ``rstdoc --stpl tmp``:\n\n.. code-block:: sh\n\n    cd tmp/doc\n    rstdcx   #expand .stpl and produce .tag and _links_xxx files\n\n    #expand stpl and append substitutions (for simple expansion use ``stpl <file> .``)\n    rstdcx dd.rest.stpl - rest           # expand to stdout, appending dd.html substitutions, to pipe to Pandoc\n    rstdcx dd.rest.stpl - html.          # as before\n    rstdcx dd.rest.stpl - docx.          # expand to stdout, appending dd.docx substitutions, to pipe to Pandoc\n    rstdcx dd.rest.stpl - newname.docx.  # expand template, appending substitutions for target newname.docx\n    rstdcx dd.rest.stpl - html           # expand to stdout, already process through Pandoc to produce html on stdout\n    rstdcx dd.rest.stpl                  # as before\n    rstdcx sy.rest.stpl - rst_html       # expand template, already process through Docutils to produce html on stdout\n    stpl sy.rest.stpl | rstdcx - - sy.html. # appending sy.html substitutions, e.g. to pipe to Pandoc\n    stpl dd.rest.stpl | rstdcx - - dd.html  # appending tp.html substitutions and produce html on stdout via Pandoc\n    rstdcx dd.rest.stpl dd.rest          # expand into dd.rest, appending substitutions for target dd.html\n    rstdcx dd.rest.stpl dd.html html     # expand template, process through Pandoc to produce dd.html\n    rstdcx dd.rest.stpl dd.html          # as before\n    rstdcx dd.rest.stpl dd.html rst_html # expand template, already process through Docutils to produce dd.html\n    rstdcx dd.rest.stpl dd.docx          # expand template, process through Pandoc to produce dd.docx\n    rstdcx dd.rest.stpl dd.odt pandoc    # expand template, process through Pandoc to produce dd.odt\n    rstdcx dd.rest.stpl dd.odt           # as before\n    rstdcx dd.rest.stpl dd.odt rst_odt   # expand template, process through Docutils to produce dd.odt\n    rstdcx dd.rest.stpl dd.odt rst       # as before\n    rstdcx . build html                  # convert current dir to build output dir using pandoc\n    rstdcx . build sphinx_html           # ... using sphinx (if no index.rest, every file separately)\n\n    #Sphinx is not file-oriented\n    #but with rstdcx you need to provide the files to give Sphinx ``master_doc`` (normally: index.rest)\n    #Directly from ``.stpl`` does not work with Sphinx\n    rstdcx index.rest ../build/index.html sphinx_html   # via Sphinx the output directory must be different\n\n    #convert the graphics and place the into _images or <updir>/_images\n    #if no _images directory exists they will be placed into the same directory\n    rstdcx egcairo.pyg\n    rstdcx egdot.dot.stpl\n    rstdcx egeps.eps\n    rstdcx egother.pyg\n    rstdcx egplt.pyg\n    rstdcx egpygal.pyg\n    rstdcx egpyx.pyg\n    rstdcx egsvg.svg.stpl\n    rstdcx egtikz.tikz\n    rstdcx egtikz1.tikz\n    rstdcx eguml.uml\n\n    #Convert graphics to a png (even if _images directory exists):\n    rstdcx eguml.uml eguml.png\n\n    #Files to other files:\n\n    rstdoc dd.rest.stpl dd.rest\n    rstdoc dd.rest.stpl dd.html html\n    rstdoc dd.rest.stpl dd.html\n    rstdoc sr.rest.stpl sr.html rst_html\n    rstdoc dd.rest.stpl dd.docx\n    rstdoc dd.rest.stpl dd.odt pandoc\n    rstdoc dd.rest.stpl dd.odt\n    rstdoc sr.rest.stpl sr.odt rst_odt\n    rstdoc sr.rest.stpl sr.odt rst\n    rstdoc index.rest build/index.html sphinx_html\n\n    #Directories to other directories with out info:\n\n    rstdoc . build html\n    rstdoc . build sphinx_html\n\nGrep with python re in .py, .rst, .rest, .stpl, .tpl::\n\n    rstdoc --pygrep inline\n\nGrep for keyword lines containing 'png'::\n\n    rstdoc --kw png\n\nDefault keyword lines::\n\n    .. {kw1,kw2}\n    {{_ID3('kw1 kw2')}}\n    %__ID3('kw1 kw2')\n    :ID3: kw1 kw2\n\n\nrstfromdocx\n===========\n\n| rstfromdocx: shell command\n| fromdocx: rstdoc module\n\nConvert DOCX to RST in a subfolder of current dir, named after the DOCX file.\nIt also creates ``conf.py``, ``index.py`` and ``Makefile``\nand copies ``dcx.py`` into the folder.\n\nSee |rstdcx| for format conventions for the RST.\n\nThere are options to post-process through::\n\n    --listtable (--join can be provided)\n    --untable\n    --reflow (--sentence True,  --join 0)\n    --reimg\n\n``rstfromdocx -lurg`` combines all of these.\n\nTo convert more DOCX documents into the same\nRST documentation folder, proceed like this:\n\n- rename/copy the original DOCX to the name you want for the ``.rest`` file\n- run ``rstfromdocx -lurg doc1.docx``; instead of -lurg use your own options\n- check the output in the ``doc1`` subfolder\n- repeat the previous 2 steps with the next DOCX files\n- create a new folder, e.g. ``doc``\n- merge all other folders into that new folder\n\n``fromdocx.docx_rst_5`` creates 5 different rst files with different postprocessing.\n\nSee |rstreflow| for an alternative proceeding.\n\n\n\n\nrstlisttable\n============\n\n| rstlisttable: shell command\n| listable: rstdoc module\n\nConvert RST grid tables to list-tables.\n\n#. Convert grid tables in a file to list-tables. The result is output to stdout::\n\n    $ listtable.py input.rst\n\n#. Convert several files::\n\n    $ listtable.py input1.rst input2.rst\n    $ listtable.py *.rst\n\n#. Use pipe (but ``cat`` might not keep the encoding)::\n\n    $ cat in.rst | listtable.py -  | untable.py - > out.rst\n\nOptions\n-------\n-j, --join       e.g.002. Join method per column: 0=\"\".join; 1=\" \".join; 2=\"\\\\n\".join\n\n\n\nrstuntable\n==========\n\n| rstuntable: shell command\n| untable: rstdoc module\n\nConvert tables of following format to paragraphs with an ID.\nThe '-' in ID is removed and the ID is made lower case.\n**Bold** is removed.\n\n.. list-table::\n   :widths: 50 50\n   :header-rows: 0\n\n   * - **ID-XY-00**\n     - text goes here\n\n   * - **ID-XY-01**\n     - text again goes here\n\n\nIf the first entry does contain no word chars or spaces between words,\nthen the table stays. For a different behavior replace paragraph23.\n\nA file produced from a docx using pandoc or ``fromdocx.py`` will\nneed a pre-processing via ``rstlisttable`` to convert grid tables to ``list-table`` tables.\nThis is done in one step with ``rstfromdocx -lu doc.rst``.\n\n\nrstreflow\n=========\n\n| rstreflow: shell command\n| reflow: rstdoc module\n\nReflow tables and paragraphs in a rst document produced from a docx.\n\nPost-process a docx in this order::\n\n    rstfromdocx doc.docx\n    rstlisttable doc/doc.rst > doc/tmp.rst\n    rstuntable doc/tmp.rst > doc/tmp1.rst\n    rstreflow doc/tmp1.rst > doc/tmp2.rst\n    rstreimg doc/tmp2.rst > doc/tmp3.rst\n    rm doc/doc.rst\n    mv doc/tmp3.rst doc/doc.rst\n    rm doc/tmp*\n\nCheck the intermediate results.\n\nElse one can also do inplace::\n\n    rstfromdocx doc.docx\n    rstlisttable -i doc/doc.rst\n    rstuntable -i doc/doc.rst\n    rstreflow -i doc/doc.rst\n    rstreimg -i doc/doc.rst\n\n.. note:: DOCX to RST using Pandoc\n\n   ``rstfromdocx -lurg doc.rst`` converts a docx to RST and\n   does all the post-processing in one step.\n\n   It is adviced, though, to compare the output with the original and do some manual\n   corrections here and there.\n\n\nrstreimg\n========\n\n| rstreimg: shell command\n| reimg: rstdoc module\n\nReimg renames the images in the rst file and the files themselves.\nIt uses part of the document name and a number as new names.\n\nThis is useful, if more RST documents converted from DOCX\nshould be combined in one directory and\nthe names of the images have no meaning (image13,...).\n\n\nrstretable\n==========\n\n| rstretable: shell command\n| retable: rstdoc module\n\nTransforms list tables to grid tables.\n\nThis file also contains the code from\nthe Vim plugin \n`vim-rst-tables-py3 <https://github.com/ossobv/vim-rst-tables-py3>`__,\nplus some little fixes.\n``rstdoc`` is used by the Vim plugin\n`vim_py3_rst <https://github.com/rpuntaie/vim_py3_rst>`__\n, which replaces\n`vim-rst-tables-py3 <https://github.com/ossobv/vim-rst-tables-py3>`__.\n\n.. |rstdcx| replace:: `rstdcx <file:#rstdcx>`__\n.. |rstfromdocx| replace:: `rstfromdocx <file:#rstfromdocx>`__\n.. |rstlisttable| replace:: `rstlisttable <file:#rstlisttable>`__\n.. |rstuntable| replace:: `rstuntable <file:#rstuntable>`__\n.. |rstreflow| replace:: `rstreflow <file:#rstreflow>`__\n.. |rstreimg| replace:: `rstreimg <file:#rstreimg>`__\n.. |rstretable| replace:: `rstretable <file:#rstretable>`__\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rpuntaie/rstdoc", "keywords": "Documentation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rstdoc", "package_url": "https://pypi.org/project/rstdoc/", "platform": "", "project_url": "https://pypi.org/project/rstdoc/", "project_urls": {"Homepage": "https://github.com/rpuntaie/rstdoc"}, "release_url": "https://pypi.org/project/rstdoc/1.8.0/", "requires_dist": ["cffi", "cairocffi", "cairosvg", "pillow", "pyx", "pyfca", "pygal", "numpy", "matplotlib", "sympy", "pint", "drawsvg", "svgwrite", "stpl", "pypandoc", "docutils", "sphinx", "sphinx-bootstrap-theme", "gitpython", "pyyaml", "txdir", "waf ; extra == 'build'", "mock ; extra == 'develop'", "virtualenv ; extra == 'develop'", "pytest-coverage ; extra == 'develop'"], "requires_python": "", "summary": "rstdoc - support documentation in restructedText (rst)", "version": "1.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>See <a href=\"https://rstdoc.readthedocs.io/en/latest/\" rel=\"nofollow\">background and documentation</a>.</p>\n<p>Many companies use <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a>\nand thus produce an information barrier.\nWorking with text is more integrated in the (software) development process.\nA final format can be <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a>, but, at least during development, text is better.</p>\n<p><a href=\"http://www.sphinx-doc.org/en/stable/\" rel=\"nofollow\">Sphinx</a>\nis an extension of <a href=\"http://docutils.sourceforge.net/\" rel=\"nofollow\">Docutils</a>\nused for many (software) projects,\nbut it does not support creation of <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a> files, which certain companies demand.\n<a href=\"https://pandoc.org/\" rel=\"nofollow\">Pandoc</a>\ndoes support <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a>, but does not support the Sphinx extensions,\nhence <tt>:ref:</tt> and the like cannot be used.</p>\n<p>This python package supports working with\n<a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a>\nas documentation format without depending on Sphinx.</p>\n<ul>\n<li>link RST documents using\n<a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#substitution-definitions\" rel=\"nofollow\">substitutions</a>\n(generated in <tt><span class=\"pre\">_links_xxx.r?st</span></tt>)</li>\n<li>create a <tt>.tags</tt> file to jump around in an editor that support\n<a href=\"http://ctags.sourceforge.net/FORMAT\" rel=\"nofollow\">ctags</a></li>\n<li><a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a> handling with python: reformat/create <a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a> tables</li>\n<li>post-process Pandoc\u2019s conversion from <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a> to <a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a></li>\n<li>pre-process Pandoc\u2019s conversion from <a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a> to <a href=\"http://www.ecma-international.org/publications/standards/Ecma-376.htm\" rel=\"nofollow\">DOCX</a></li>\n<li>Support in building with <a href=\"https://github.com/waf-project/waf\" rel=\"nofollow\">WAF</a> (or <tt>Makefile</tt>)<ul>\n<li>expand\n<a href=\"https://bottlepy.org/docs/dev/stpl.html#simpletemplate-syntax\" rel=\"nofollow\">SimpleTemplate</a>\ntemplate files <tt>.stpl</tt></li>\n<li>graphics files (<tt>.tikz</tt>, <tt>.svg</tt>, <tt>.dot</tt>,  <tt>.uml</tt>, <tt>.eps</tt> or <tt>.stpl</tt> thereof, and <tt>.pyg</tt>)\nare converted to <tt>.png</tt>\nand placed into <tt>./_images</tt> or <tt><span class=\"pre\">&lt;updir&gt;/_images</span></tt>, if there, else into current directory.</li>\n<li>a <tt>gen</tt> file specifies how <a href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\" rel=\"nofollow\">RST</a> should be generated from source code files (see <tt>dcx.py</tt>)</li>\n</ul>\n</li>\n</ul>\n<p>The conventions used are shown</p>\n<ul>\n<li>by the example produced via <tt>rstdcx <span class=\"pre\">--rest</span> smplfldr</tt> or <tt>rstdcx <span class=\"pre\">--stpl</span> smplfldr</tt></li>\n<li>by the documentation sources that can be found at\n<a href=\"https://github.com/rpuntaie/rstdoc/tree/master/doc\" rel=\"nofollow\">https://github.com/rpuntaie/rstdoc/tree/master/doc</a></li>\n</ul>\n<p><tt>pip install rstdoc</tt> installs:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Module</th>\n<th>CLI Script</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>dcx</td>\n<td><a href=\"#rstdcx\" rel=\"nofollow\">rstdcx</a>, rstdoc</td>\n<td>create <tt>.tags</tt>, labels and links</td>\n</tr>\n<tr><td>fromdocx</td>\n<td><a href=\"#rstfromdocx\" rel=\"nofollow\">rstfromdocx</a></td>\n<td>Convert DOCX to RST using Pandoc</td>\n</tr>\n<tr><td>listtable</td>\n<td><a href=\"#rstlisttable\" rel=\"nofollow\">rstlisttable</a></td>\n<td>Convert RST grid tables to list-tables</td>\n</tr>\n<tr><td>untable</td>\n<td><a href=\"#rstuntable\" rel=\"nofollow\">rstuntable</a></td>\n<td>Converts certain list-tables to paragraphs</td>\n</tr>\n<tr><td>reflow</td>\n<td><a href=\"#rstreflow\" rel=\"nofollow\">rstreflow</a></td>\n<td>Reflow paragraphs and tables</td>\n</tr>\n<tr><td>reimg</td>\n<td><a href=\"#rstreimg\" rel=\"nofollow\">rstreimg</a></td>\n<td>Rename images referenced in the RST file</td>\n</tr>\n<tr><td>retable</td>\n<td><a href=\"#rstretable\" rel=\"nofollow\">rstretable</a></td>\n<td>Transforms list tables to grid tables</td>\n</tr>\n</tbody>\n</table>\n<div id=\"rstdcx\">\n<h2>rstdcx</h2>\n<p>restructuredText sources are split into two types of files:\nmain files considered by Sphinx, and included files.\nWhich of <tt>.rest</tt>  or <tt>.rst</tt> is main or included is determined\nby <tt>source_suffix</tt> in a <tt><span class=\"pre\">&lt;root&gt;/conf.py</span></tt> or by the extension of the <tt>_links_xxx</tt> files.</p>\n<p><tt>rstdoc</tt> creates documentation (PDF, HTML, DOCX)\nfrom restructuredText (<tt>.rst</tt>, <tt>.rest</tt>) using either</p>\n<ul>\n<li><a href=\"https://pandoc.org\" rel=\"nofollow\">Pandoc</a></li>\n<li><a href=\"http://www.sphinx-doc.org\" rel=\"nofollow\">Sphinx</a></li>\n<li>Docutils\n<a href=\"http://docutils.sourceforge.net/docs/user/config.html\" rel=\"nofollow\">configurable</a></li>\n</ul>\n<p><tt>rstdoc</tt> and <tt>rstdcx</tt> command line tools call <tt>dcx.py</tt>.\nwhich</p>\n<ul>\n<li>creates <tt>.tags</tt> to jump around with the editor</li>\n<li>handles <a href=\"https://bottlepy.org/docs/dev/stpl.html\" rel=\"nofollow\">.stpl</a> files</li>\n<li>processes <tt>gen</tt> files (see examples produced by \u2013rest)</li>\n<li>creates links files (<tt><span class=\"pre\">_links_docx.r?st</span></tt>, <tt><span class=\"pre\">_links_sphinx.r?st</span></tt>, \u2026)</li>\n<li>forwards known files to either Pandoc, Sphinx or Docutils</li>\n</ul>\n<p>See example at the end of <tt>dcx.py</tt>.\nIt is supposed to be used with a build tool.\n<tt>make</tt> and <tt>waf</tt> examples are included.</p>\n<ul>\n<li><p>Initialize example tree (add <tt><span class=\"pre\">--rstrest</span></tt> to make <tt>.rst</tt> main and <tt>.rest</tt> included files):</p>\n<p>$ ./dcx.py \u2013rest repo #repo/doc/{sy,ra,sr,dd,tp}.rest files OR\n$ ./dcx.py \u2013stpl repo #repo/doc/{sy,ra,sr,dd,tp}.rest.stpl files\n$ ./dcx.py \u2013ipdt repo #repo/pdt/AAA/{i,p,d,t}.rest.stpl files\n$ ./dcx.py \u2013over repo #.rest all over</p>\n</li>\n<li><p>Only create .tags and <tt><span class=\"pre\">_links_xxx.r?st</span></tt>:</p>\n<pre>$ cd repo\n$ rstdoc\n</pre>\n</li>\n<li><p>Create the docs (and .tags and <tt><span class=\"pre\">_links_xxx.r?st</span></tt>) with <strong>make</strong>:</p>\n<pre>$ make html #OR\n$ make epub #OR\n$ make latex #OR\n$ make docx #OR\n$ make pdf\n</pre>\n<p>The latter two are done by Pandoc, the others by Sphinx.</p>\n</li>\n<li><p>Create the docs (and .tags and <tt><span class=\"pre\">_links_xxx.r?st</span></tt>) with\n<a href=\"https://github.com/waf-project/waf\" rel=\"nofollow\">waf</a>:</p>\n<p>Instead of using <tt>make</tt> one can load <tt>dcx.py</tt> (<tt>rstdoc.dcx</tt>) in\n<a href=\"https://github.com/waf-project/waf\" rel=\"nofollow\">waf</a>.\n<tt>waf</tt> also considers all recursively included files,\nsuch that a change in any of them results in a rebuild.\nAll files can have an additional <tt>.stpl</tt> extension to use\n<a href=\"https://bottlepy.org/docs/dev/stpl.html\" rel=\"nofollow\">SimpleTemplate</a>.</p>\n<p>$ waf configure #also copies the latest version of waf in here\n$ waf \u2013docs docx,sphinx_html,rst_odt\n$ #or you provide \u2013docs during configure to always compile the docs</p>\n<ul>\n<li><tt>rst_xxx</tt>: via\n<a href=\"http://docutils.sourceforge.net/docs/user/tools.html\" rel=\"nofollow\">rst2xxx.py</a></li>\n<li><tt>sphinx_xxx</tt>: via <a href=\"http://www.sphinx-doc.org\" rel=\"nofollow\">Sphinx</a> and</li>\n<li>just <tt>xxx</tt>: via <a href=\"https://pandoc.org\" rel=\"nofollow\">Pandoc</a>.</li>\n</ul>\n</li>\n</ul>\n<p>The following image language files should be parallel to the <tt><span class=\"pre\">.r?st</span></tt> files.\nThey are automatically converted to <tt>.png</tt>\nand placed into <tt>./_images</tt> or <tt><span class=\"pre\">&lt;updir&gt;/_images</span></tt> or else parallel to the file.</p>\n<ul>\n<li><p><tt>.tikz</tt> or <tt>.tikz.stpl</tt>.\nThis needs LaTex.</p>\n</li>\n<li><p><a href=\"http://svgpocketguide.com/book/\" rel=\"nofollow\">.svg</a> or <tt>.svg.stpl</tt></p>\n</li>\n<li><p><tt>.dot</tt> or <tt>.dot.stpl</tt></p>\n<p>This needs <a href=\"https://graphviz.gitlab.io/gallery/\" rel=\"nofollow\">graphviz</a>.</p>\n</li>\n<li><p><a href=\"http://plantuml.com/command-line\" rel=\"nofollow\">.uml</a> or <tt>.uml.stpl</tt></p>\n<p>This needs <a href=\"http://plantuml.com/command-line\" rel=\"nofollow\">plantuml</a> .\nProvide either</p>\n<ul>\n<li><tt>plantuml.bat</tt> with e.g. <tt>java <span class=\"pre\">-jar</span> <span class=\"pre\">\"%~dp0plantuml.jar\"</span> %*</tt>  or</li>\n<li><tt>plantuml</tt> sh script with\n<tt>java <span class=\"pre\">-jar</span> `dirname <span class=\"pre\">$BASH_SOURCE`/plantuml.jar</span> <span class=\"pre\">\"$@\"</span></tt></li>\n</ul>\n</li>\n<li><p><tt>.eps</tt> or <tt>.eps.stpl</tt> embedded postscript files.</p>\n<p>This needs <a href=\"https://inkscape.org/en/\" rel=\"nofollow\">inkscape</a>.</p>\n</li>\n<li><p><tt>.pyg</tt> contains python code that produces a graphic.\nIf the python code defines a <tt>to_svg</tt> or a <tt>save_to_png</tt> function,\nthen that is used, to create a png.\nElse the following is tried</p>\n<ul>\n<li><tt>pyx.canvas.canvas</tt> from the\n<a href=\"http://pyx.sourceforge.net/manual/graphics.html\" rel=\"nofollow\">pyx</a> library or</li>\n<li><tt>cairocffi.Surface</tt> from\n<a href=\"https://cairocffi.readthedocs.io/en/stable/overview.html\" rel=\"nofollow\">cairocffi</a></li>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a>.\nIf <tt><span class=\"pre\">matplotlib.pyplot.get_fignums()&gt;1</span></tt>\nthe figures result in <tt><span class=\"pre\">&lt;name&gt;&lt;fignum&gt;.png</span></tt></li>\n</ul>\n<p>The same code or the file names can be used in a <tt><span class=\"pre\">.r?st.stpl</span></tt> file\nwith <tt>pngembed()</tt> or <tt>dcx.svgembed()</tt> to embed in html output.</p>\n<pre>{{!svgembed(\"egpyx.pyg\",outinfo)}}\n&lt;%\nansvg=svgembed('''\nfrom svgwrite import cm, mm, drawing\nd=drawing.Drawing(viewBox=('0 0 300 300'))\nd.add(d.circle(center=(2*cm, 2*cm), r='1cm', stroke='blue', stroke_width=9))\n'''.splitlines(),outinfo)\n%&gt;\n{{!ansvg}}\n</pre>\n</li>\n</ul>\n<div id=\"conventions\">\n<h3>Conventions</h3>\n<p>Files</p>\n<blockquote>\n<ul>\n<li>fain files and included files: <tt>.rest</tt>, <tt>.rst</tt> or vice versa.\n<tt>.txt</tt> are for literally included files (use :literal: option).</li>\n<li>templates separately rendered : <tt>*.rest.stpl</tt> and <tt>*.rst.stpl</tt>\ntemplate included: <tt>*.rst.tpl</tt>\nTemplate lookup is done in\n<tt>.</tt> and <tt>..</tt> with respect to the current file.<ul>\n<li>with <tt><span class=\"pre\">%include('some.rst.tpl',</span> <span class=\"pre\">param=\"test\")</span></tt> with optional parameters</li>\n<li>with <tt><span class=\"pre\">%globals().update(include('utility.rst.tpl'))</span></tt>\nif it contains only definitions</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Links</p>\n<ul>\n<li><tt>.. _`id`:</tt> are <em>reST targets</em>.\nreST targets should not be template-generated.\nThe template files should have a higher or equal number of targets\nthan the generated file,\nin order for tags to jump to the template original.\nIf one wants to generate reST targets,\nthen this should better happen in a previous step,\ne.g. with <tt>gen</tt> files mentioned above.</li>\n<li>References use replacement <a href=\"http://docutils.sourceforge.net/docs/ref/rst/directives.html#replacement-text\" rel=\"nofollow\">substitutions </a>:\n<tt>|id|</tt>.</li>\n<li>If you want an overview of the linking (traceability),\nadd <tt>.. include:: _traceability_file.rst</tt>\nto <tt>index.rest</tt> or another <tt>.rest</tt> parallel to it.\nIt is there in the example project, to include it in tests.\n<tt><span class=\"pre\">_traceability_file.{svg,png,rst}</span></tt> are all in the same directory.</li>\n</ul>\n<p>Link files are created in link roots, which are folders where the first main file\n(<tt>.rest</tt> or <tt>.rst</tt>) is encoutered during depth-first traversal.\nNon-overlapping link root paths produce separately linked file sets.</p>\n<p><tt>.. include:: <span class=\"pre\">/_links_sphinx.r?st</span></tt>, with the one initial <tt>/</tt>\ninstead of a relative or absolute path,\nwill automatically search upward for the <tt><span class=\"pre\">_links_xxx.r?st</span></tt> file\n(<tt>_sphinx</tt> is replaced by what is needed by the wanted target when the docs are generated).</p>\n<p>Sphinx <tt>conf.py</tt> is augmented by configuration for Pandoc and Docutils.\nIt should be where the input file is, or better at the project root\nto be usable with <a href=\"https://github.com/waf-project/waf\" rel=\"nofollow\">waf</a>.</p>\n<p>See the example project created with <tt><span class=\"pre\">--rest/stpl/ipdt/over</span></tt>\nand the sources of the documentation of\n<a href=\"https://github.com/rpuntaie/rstdoc\" rel=\"nofollow\">rstdoc</a>.</p>\n</div>\n<div id=\"rstdcx-cli\">\n<h3><tt>rstdcx</tt> CLI</h3>\n<p>Without parameters: creates <tt>|substitution|</tt> links and .tags ctags for reST targets.</p>\n<p>With two or three parameters: process file or dir to out file or dir\nthrough Pandoc, Sphinx, Docutils (third parameter):</p>\n<ul>\n<li><tt>html</tt>, <tt>docx</tt>, <tt>odt</tt>, <tt>pdf</tt>, \u2026 uses  Pandoc.</li>\n<li><tt>rst_html</tt>, <tt>rst_odt</tt>, <tt>rst_pdf</tt>, \u2026  uses\n<a href=\"http://docutils.sourceforge.net/0.6/docs/user/tools.html\" rel=\"nofollow\">rst2html</a>, \u2026</li>\n<li><tt>sphinx_html</tt>, <tt>sphinx_pdf</tt>, \u2026  uses Sphinx.\nSphinx provides a nice entry point via the\n<a href=\"https://github.com/ryan-roemer/sphinx-bootstrap-theme\" rel=\"nofollow\">sphinx bootstrap theme</a>.</li>\n</ul>\n<p>4th parameter onward become python defines usable in <tt>.stpl</tt> files.</p>\n<p>Pdf output needs latex. Else you can make odt or docx and use</p>\n<ul>\n<li>win: <tt>swriter.exe <span class=\"pre\">--headless</span> <span class=\"pre\">--convert-to</span> pdf Untitled1.odt</tt></li>\n<li>linux: <tt>lowriter <span class=\"pre\">--headless</span> <span class=\"pre\">--convert-to</span> pdf Untitled1.odt</tt></li>\n</ul>\n<p>Inkscape (.eps, .svg), Dot (.dot), Planuml (.uml), latex (.tex,.tikz)\nare converted to .png into <tt>./_images</tt> or <tt><span class=\"pre\">&lt;updir&gt;/_images</span></tt> or \u2018.\u2019.\nAny of the files can be a SimpleTemplate template (xxx.yyy.stpl).</p>\n<p>Configuration is in <tt>conf.py</tt> or <tt><span class=\"pre\">../conf.py</span></tt>.</p>\n<p><tt>rstdoc <span class=\"pre\">--stpl|--rest|--ipdt|-over</span></tt> create sample project trees.</p>\n<p><tt><span class=\"pre\">--stpl</span></tt> with <tt>.rest.stpl</tt> template files,\n<tt><span class=\"pre\">--rest</span></tt> with only a doc folder with <tt>.rest</tt> files,\n<tt><span class=\"pre\">--ipdt</span></tt> with inform-plan-do-test enhancement cycles\n<tt><span class=\"pre\">--over</span></tt> with <tt>.rest</tt> files all over the project tree including symbolic links</p>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Example folders (see wscript and Makefile there):</p>\n<pre>rstdoc --rest &lt;folder&gt; [--rstrest]\nrstdoc --stpl &lt;folder&gt; [--rstrest]\nrstdoc --ipdt &lt;folder&gt; [--rstrest]\nrstdoc --over &lt;folder&gt; [--rstrest]\n</pre>\n<p>Examples usages with the files generated by <tt>rstdoc <span class=\"pre\">--stpl</span> tmp</tt>:</p>\n<pre><span class=\"nb\">cd</span> tmp/doc\nrstdcx   <span class=\"c1\">#expand .stpl and produce .tag and _links_xxx files\n</span>\n<span class=\"c1\">#expand stpl and append substitutions (for simple expansion use ``stpl &lt;file&gt; .``)\n</span>rstdcx dd.rest.stpl - rest           <span class=\"c1\"># expand to stdout, appending dd.html substitutions, to pipe to Pandoc\n</span>rstdcx dd.rest.stpl - html.          <span class=\"c1\"># as before\n</span>rstdcx dd.rest.stpl - docx.          <span class=\"c1\"># expand to stdout, appending dd.docx substitutions, to pipe to Pandoc\n</span>rstdcx dd.rest.stpl - newname.docx.  <span class=\"c1\"># expand template, appending substitutions for target newname.docx\n</span>rstdcx dd.rest.stpl - html           <span class=\"c1\"># expand to stdout, already process through Pandoc to produce html on stdout\n</span>rstdcx dd.rest.stpl                  <span class=\"c1\"># as before\n</span>rstdcx sy.rest.stpl - rst_html       <span class=\"c1\"># expand template, already process through Docutils to produce html on stdout\n</span>stpl sy.rest.stpl <span class=\"p\">|</span> rstdcx - - sy.html. <span class=\"c1\"># appending sy.html substitutions, e.g. to pipe to Pandoc\n</span>stpl dd.rest.stpl <span class=\"p\">|</span> rstdcx - - dd.html  <span class=\"c1\"># appending tp.html substitutions and produce html on stdout via Pandoc\n</span>rstdcx dd.rest.stpl dd.rest          <span class=\"c1\"># expand into dd.rest, appending substitutions for target dd.html\n</span>rstdcx dd.rest.stpl dd.html html     <span class=\"c1\"># expand template, process through Pandoc to produce dd.html\n</span>rstdcx dd.rest.stpl dd.html          <span class=\"c1\"># as before\n</span>rstdcx dd.rest.stpl dd.html rst_html <span class=\"c1\"># expand template, already process through Docutils to produce dd.html\n</span>rstdcx dd.rest.stpl dd.docx          <span class=\"c1\"># expand template, process through Pandoc to produce dd.docx\n</span>rstdcx dd.rest.stpl dd.odt pandoc    <span class=\"c1\"># expand template, process through Pandoc to produce dd.odt\n</span>rstdcx dd.rest.stpl dd.odt           <span class=\"c1\"># as before\n</span>rstdcx dd.rest.stpl dd.odt rst_odt   <span class=\"c1\"># expand template, process through Docutils to produce dd.odt\n</span>rstdcx dd.rest.stpl dd.odt rst       <span class=\"c1\"># as before\n</span>rstdcx . build html                  <span class=\"c1\"># convert current dir to build output dir using pandoc\n</span>rstdcx . build sphinx_html           <span class=\"c1\"># ... using sphinx (if no index.rest, every file separately)\n</span>\n<span class=\"c1\">#Sphinx is not file-oriented\n#but with rstdcx you need to provide the files to give Sphinx ``master_doc`` (normally: index.rest)\n#Directly from ``.stpl`` does not work with Sphinx\n</span>rstdcx index.rest ../build/index.html sphinx_html   <span class=\"c1\"># via Sphinx the output directory must be different\n</span>\n<span class=\"c1\">#convert the graphics and place the into _images or &lt;updir&gt;/_images\n#if no _images directory exists they will be placed into the same directory\n</span>rstdcx egcairo.pyg\nrstdcx egdot.dot.stpl\nrstdcx egeps.eps\nrstdcx egother.pyg\nrstdcx egplt.pyg\nrstdcx egpygal.pyg\nrstdcx egpyx.pyg\nrstdcx egsvg.svg.stpl\nrstdcx egtikz.tikz\nrstdcx egtikz1.tikz\nrstdcx eguml.uml\n\n<span class=\"c1\">#Convert graphics to a png (even if _images directory exists):\n</span>rstdcx eguml.uml eguml.png\n\n<span class=\"c1\">#Files to other files:\n</span>\nrstdoc dd.rest.stpl dd.rest\nrstdoc dd.rest.stpl dd.html html\nrstdoc dd.rest.stpl dd.html\nrstdoc sr.rest.stpl sr.html rst_html\nrstdoc dd.rest.stpl dd.docx\nrstdoc dd.rest.stpl dd.odt pandoc\nrstdoc dd.rest.stpl dd.odt\nrstdoc sr.rest.stpl sr.odt rst_odt\nrstdoc sr.rest.stpl sr.odt rst\nrstdoc index.rest build/index.html sphinx_html\n\n<span class=\"c1\">#Directories to other directories with out info:\n</span>\nrstdoc . build html\nrstdoc . build sphinx_html\n</pre>\n<p>Grep with python re in .py, .rst, .rest, .stpl, .tpl:</p>\n<pre>rstdoc --pygrep inline\n</pre>\n<p>Grep for keyword lines containing \u2018png\u2019:</p>\n<pre>rstdoc --kw png\n</pre>\n<p>Default keyword lines:</p>\n<pre>.. {kw1,kw2}\n{{_ID3('kw1 kw2')}}\n%__ID3('kw1 kw2')\n:ID3: kw1 kw2\n</pre>\n</div>\n</div>\n<div id=\"rstfromdocx\">\n<h2>rstfromdocx</h2>\n<div>\n<div>rstfromdocx: shell command</div>\n<div>fromdocx: rstdoc module</div>\n</div>\n<p>Convert DOCX to RST in a subfolder of current dir, named after the DOCX file.\nIt also creates <tt>conf.py</tt>, <tt>index.py</tt> and <tt>Makefile</tt>\nand copies <tt>dcx.py</tt> into the folder.</p>\n<p>See <a>rstdcx</a> for format conventions for the RST.</p>\n<p>There are options to post-process through:</p>\n<pre>--listtable (--join can be provided)\n--untable\n--reflow (--sentence True,  --join 0)\n--reimg\n</pre>\n<p><tt>rstfromdocx <span class=\"pre\">-lurg</span></tt> combines all of these.</p>\n<p>To convert more DOCX documents into the same\nRST documentation folder, proceed like this:</p>\n<ul>\n<li>rename/copy the original DOCX to the name you want for the <tt>.rest</tt> file</li>\n<li>run <tt>rstfromdocx <span class=\"pre\">-lurg</span> doc1.docx</tt>; instead of -lurg use your own options</li>\n<li>check the output in the <tt>doc1</tt> subfolder</li>\n<li>repeat the previous 2 steps with the next DOCX files</li>\n<li>create a new folder, e.g. <tt>doc</tt></li>\n<li>merge all other folders into that new folder</li>\n</ul>\n<p><tt>fromdocx.docx_rst_5</tt> creates 5 different rst files with different postprocessing.</p>\n<p>See <a>rstreflow</a> for an alternative proceeding.</p>\n</div>\n<div id=\"rstlisttable\">\n<h2>rstlisttable</h2>\n<div>\n<div>rstlisttable: shell command</div>\n<div>listable: rstdoc module</div>\n</div>\n<p>Convert RST grid tables to list-tables.</p>\n<ol>\n<li><p>Convert grid tables in a file to list-tables. The result is output to stdout:</p>\n<pre>$ listtable.py input.rst\n</pre>\n</li>\n<li><p>Convert several files:</p>\n<pre>$ listtable.py input1.rst input2.rst\n$ listtable.py *.rst\n</pre>\n</li>\n<li><p>Use pipe (but <tt>cat</tt> might not keep the encoding):</p>\n<pre>$ cat in.rst | listtable.py -  | untable.py - &gt; out.rst\n</pre>\n</li>\n</ol>\n<div id=\"options\">\n<h3>Options</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-j</span>, <span class=\"option\">--join</span></kbd></td>\n<td>e.g.002. Join method per column: 0=\u201d\u201d.join; 1=\u201d \u201c.join; 2=\u201d\\n\u201d.join</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"rstuntable\">\n<h2>rstuntable</h2>\n<div>\n<div>rstuntable: shell command</div>\n<div>untable: rstdoc module</div>\n</div>\n<p>Convert tables of following format to paragraphs with an ID.\nThe \u2018-\u2018 in ID is removed and the ID is made lower case.\n<strong>Bold</strong> is removed.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>ID-XY-00</strong></td>\n<td>text goes here</td>\n</tr>\n<tr><td><strong>ID-XY-01</strong></td>\n<td>text again goes here</td>\n</tr>\n</tbody>\n</table>\n<p>If the first entry does contain no word chars or spaces between words,\nthen the table stays. For a different behavior replace paragraph23.</p>\n<p>A file produced from a docx using pandoc or <tt>fromdocx.py</tt> will\nneed a pre-processing via <tt>rstlisttable</tt> to convert grid tables to <tt><span class=\"pre\">list-table</span></tt> tables.\nThis is done in one step with <tt>rstfromdocx <span class=\"pre\">-lu</span> doc.rst</tt>.</p>\n</div>\n<div id=\"rstreflow\">\n<h2>rstreflow</h2>\n<div>\n<div>rstreflow: shell command</div>\n<div>reflow: rstdoc module</div>\n</div>\n<p>Reflow tables and paragraphs in a rst document produced from a docx.</p>\n<p>Post-process a docx in this order:</p>\n<pre>rstfromdocx doc.docx\nrstlisttable doc/doc.rst &gt; doc/tmp.rst\nrstuntable doc/tmp.rst &gt; doc/tmp1.rst\nrstreflow doc/tmp1.rst &gt; doc/tmp2.rst\nrstreimg doc/tmp2.rst &gt; doc/tmp3.rst\nrm doc/doc.rst\nmv doc/tmp3.rst doc/doc.rst\nrm doc/tmp*\n</pre>\n<p>Check the intermediate results.</p>\n<p>Else one can also do inplace:</p>\n<pre>rstfromdocx doc.docx\nrstlisttable -i doc/doc.rst\nrstuntable -i doc/doc.rst\nrstreflow -i doc/doc.rst\nrstreimg -i doc/doc.rst\n</pre>\n<div>\n<p>Note</p>\n<p>DOCX to RST using Pandoc</p>\n<p><tt>rstfromdocx <span class=\"pre\">-lurg</span> doc.rst</tt> converts a docx to RST and\ndoes all the post-processing in one step.</p>\n<p>It is adviced, though, to compare the output with the original and do some manual\ncorrections here and there.</p>\n</div>\n</div>\n<div id=\"rstreimg\">\n<h2>rstreimg</h2>\n<div>\n<div>rstreimg: shell command</div>\n<div>reimg: rstdoc module</div>\n</div>\n<p>Reimg renames the images in the rst file and the files themselves.\nIt uses part of the document name and a number as new names.</p>\n<p>This is useful, if more RST documents converted from DOCX\nshould be combined in one directory and\nthe names of the images have no meaning (image13,\u2026).</p>\n</div>\n<div id=\"rstretable\">\n<h2>rstretable</h2>\n<div>\n<div>rstretable: shell command</div>\n<div>retable: rstdoc module</div>\n</div>\n<p>Transforms list tables to grid tables.</p>\n<p>This file also contains the code from\nthe Vim plugin\n<a href=\"https://github.com/ossobv/vim-rst-tables-py3\" rel=\"nofollow\">vim-rst-tables-py3</a>,\nplus some little fixes.\n<tt>rstdoc</tt> is used by the Vim plugin\n<a href=\"https://github.com/rpuntaie/vim_py3_rst\" rel=\"nofollow\">vim_py3_rst</a>\n, which replaces\n<a href=\"https://github.com/ossobv/vim-rst-tables-py3\" rel=\"nofollow\">vim-rst-tables-py3</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6191324, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "eb75ddeabcb6e588a5f0f9811b676a82", "sha256": "c957ee9917f4a69df579135c62987b2a7abf0fba57208b96635a574440159b95"}, "downloads": -1, "filename": "rstdoc-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb75ddeabcb6e588a5f0f9811b676a82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 65531, "upload_time": "2018-04-30T20:06:03", "upload_time_iso_8601": "2018-04-30T20:06:03.878521Z", "url": "https://files.pythonhosted.org/packages/42/b2/558f613f19ff94bf21175a1ea8492291eda222465714352c5f92f0d2def0/rstdoc-1.0-py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b94f92a84009c21c546e757ca4531ddd", "sha256": "f48fcaba3df0a44928282e1416d36ce7597f93de996fb73297a495ee5211fda6"}, "downloads": -1, "filename": "rstdoc-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b94f92a84009c21c546e757ca4531ddd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 65925, "upload_time": "2018-05-10T08:06:38", "upload_time_iso_8601": "2018-05-10T08:06:38.652768Z", "url": "https://files.pythonhosted.org/packages/5a/0d/9f7f0b3dbf413004efae1190220960a004981d2ca814c12e7ac3fb709b8e/rstdoc-1.1-py3-none-any.whl", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "ec6b4ed7c7e77e071d5cd3ffbfeaa86b", "sha256": "6540a388d98c2b695fddda99845575067a86146ca771102d297a6958d0e73363"}, "downloads": -1, "filename": "rstdoc-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ec6b4ed7c7e77e071d5cd3ffbfeaa86b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66398, "upload_time": "2018-05-25T17:30:34", "upload_time_iso_8601": "2018-05-25T17:30:34.225795Z", "url": "https://files.pythonhosted.org/packages/ab/8f/4716d2a8f317fa2994916dddac1c1de7605e8aeacf8227dbaa65440247a4/rstdoc-1.2-py3-none-any.whl", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "218a00e38607f1e35ab03b820960f4b8", "sha256": "37cb1ebc6ea0a49fd58a5cee2a0c7b799bdd14477e4a5a88b8097cb0079c12a2"}, "downloads": -1, "filename": "rstdoc-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "218a00e38607f1e35ab03b820960f4b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 68129, "upload_time": "2018-09-09T18:03:30", "upload_time_iso_8601": "2018-09-09T18:03:30.259250Z", "url": "https://files.pythonhosted.org/packages/22/94/ffcc235b206d626546a69af89705bad1a984b46647d090a2b8bb4cbc6e58/rstdoc-1.3-py3-none-any.whl", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "d0bb4ec9537b88696860fbb660281598", "sha256": "bb025dcf143fe6069ba501634afd81e36501c686289315bf487efb172407817e"}, "downloads": -1, "filename": "rstdoc-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d0bb4ec9537b88696860fbb660281598", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 66234, "upload_time": "2018-09-23T20:04:02", "upload_time_iso_8601": "2018-09-23T20:04:02.574736Z", "url": "https://files.pythonhosted.org/packages/da/5f/62baba882d939bd822b31d599ec883804de362cbca64969e0721a3b843e5/rstdoc-1.4-py3-none-any.whl", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "71ee0dc19af59fa8ad854597592f4eb0", "sha256": "429a7f5d7f02a2a529ecf7a15354240f83268419f5c5d8825359a52d7a014d73"}, "downloads": -1, "filename": "rstdoc-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "71ee0dc19af59fa8ad854597592f4eb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 87621, "upload_time": "2018-10-23T22:30:23", "upload_time_iso_8601": "2018-10-23T22:30:23.978804Z", "url": "https://files.pythonhosted.org/packages/f8/e4/9ae587121c23821386f7ed217e39289b8ffd8d2fab7db576123de1649cb8/rstdoc-1.6.0-py3-none-any.whl", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "1c3aff3ccc835f92bdaededc553e52a2", "sha256": "5229d67e6a7789a2df2c208e26b14715c5a21fa025ff8feaf7a228b3335f870d"}, "downloads": -1, "filename": "rstdoc-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c3aff3ccc835f92bdaededc553e52a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97721, "upload_time": "2018-10-28T22:12:17", "upload_time_iso_8601": "2018-10-28T22:12:17.263438Z", "url": "https://files.pythonhosted.org/packages/6e/9f/f0857840d5c92d26415bf870d61b660c2e929ca18d98c3b57b075290e16e/rstdoc-1.6.1-py3-none-any.whl", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "1562631711c104915c022bfa0a013853", "sha256": "d1ad10379a749e477c970ac0236a3560aa86e091b84bc142d85c4f6ed1058251"}, "downloads": -1, "filename": "rstdoc-1.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1562631711c104915c022bfa0a013853", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97919, "upload_time": "2018-10-29T23:20:08", "upload_time_iso_8601": "2018-10-29T23:20:08.230315Z", "url": "https://files.pythonhosted.org/packages/7b/6c/2ec1471dc046798d995f10724d7590fb2a49aa7f6eb1db7be5a8984bbeb9/rstdoc-1.6.2-py3-none-any.whl", "yanked": false}], "1.6.3": [{"comment_text": "", "digests": {"md5": "e6f4f43a12f7f935de5a8a5d33b4b882", "sha256": "0e67ffefb899172ef060918e09e63d0e23b39c75f413011791705bc5c05e6186"}, "downloads": -1, "filename": "rstdoc-1.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e6f4f43a12f7f935de5a8a5d33b4b882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 97018, "upload_time": "2018-11-20T07:02:19", "upload_time_iso_8601": "2018-11-20T07:02:19.763270Z", "url": "https://files.pythonhosted.org/packages/8c/f1/9cf765355209ef10c53903cef6bb8619fb0a89a2eec946abcd3e4bdc7e2f/rstdoc-1.6.3-py3-none-any.whl", "yanked": false}], "1.6.4": [{"comment_text": "", "digests": {"md5": "a1f4827c3a42759e1a1c1d41eb8eaa64", "sha256": "2b217162ae87e22b0de7730a734964b5bf701548b31ecdedf0a377585b712fda"}, "downloads": -1, "filename": "rstdoc-1.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a1f4827c3a42759e1a1c1d41eb8eaa64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96691, "upload_time": "2018-11-20T07:57:04", "upload_time_iso_8601": "2018-11-20T07:57:04.468795Z", "url": "https://files.pythonhosted.org/packages/1d/72/6f1f3d4b67d53dd23db21cf33ad71688936d9bbc6c1935734f4032324ea2/rstdoc-1.6.4-py3-none-any.whl", "yanked": false}], "1.6.5": [{"comment_text": "", "digests": {"md5": "bd55af2c9a290682cf884a5aa81846fd", "sha256": "6d41fc5fafd5e5f2e02a50265ee36f6ef9437df05b42278704ef58b17fc41e84"}, "downloads": -1, "filename": "rstdoc-1.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "bd55af2c9a290682cf884a5aa81846fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 96776, "upload_time": "2018-11-20T20:27:04", "upload_time_iso_8601": "2018-11-20T20:27:04.899146Z", "url": "https://files.pythonhosted.org/packages/ac/fb/225db72dbfaa994dbd3d7d75226e9680c7b7abc62e4a7354b2a53daeca56/rstdoc-1.6.5-py3-none-any.whl", "yanked": false}], "1.6.6": [{"comment_text": "", "digests": {"md5": "8c5cfe291e06a5111abc934be8f065b6", "sha256": "a0b6a1b62112b23575da77f9a77228332be990176e2b1a322436017d22116f32"}, "downloads": -1, "filename": "rstdoc-1.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "8c5cfe291e06a5111abc934be8f065b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 98804, "upload_time": "2018-12-22T20:01:10", "upload_time_iso_8601": "2018-12-22T20:01:10.214846Z", "url": "https://files.pythonhosted.org/packages/1d/8f/fa5e424c6211cef0fe235f80db883863fc4d045a68fb39ca80c6098ac563/rstdoc-1.6.6-py3-none-any.whl", "yanked": false}], "1.6.7": [{"comment_text": "", "digests": {"md5": "8753543d4158433c89371c78fc877510", "sha256": "0ce82217b8049b428a47d824b343efe2bc79be0539c6896b89540bd550ffca06"}, "downloads": -1, "filename": "rstdoc-1.6.7-py3-none-any.whl", "has_sig": false, "md5_digest": "8753543d4158433c89371c78fc877510", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99384, "upload_time": "2019-01-20T18:39:28", "upload_time_iso_8601": "2019-01-20T18:39:28.519363Z", "url": "https://files.pythonhosted.org/packages/6b/2b/704ea437cf3d6f7818bf5b1f0eb476ea91ec84a67aea8eb83bc3f2b7e01b/rstdoc-1.6.7-py3-none-any.whl", "yanked": false}], "1.6.8": [{"comment_text": "", "digests": {"md5": "76ea364b54f49b7fef8eed0f3f72e6fa", "sha256": "976140a703b27a0bf3f0e46a4d518cd7d6a6709916103eee4f85797ee2c2240e"}, "downloads": -1, "filename": "rstdoc-1.6.8-py3-none-any.whl", "has_sig": false, "md5_digest": "76ea364b54f49b7fef8eed0f3f72e6fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99628, "upload_time": "2019-03-01T18:42:42", "upload_time_iso_8601": "2019-03-01T18:42:42.930925Z", "url": "https://files.pythonhosted.org/packages/82/3d/ca02f8a1109ac6903b5fb1437e2049adf5c8fc68afaa0c0aa87e2fa4d5a7/rstdoc-1.6.8-py3-none-any.whl", "yanked": false}], "1.6.9": [{"comment_text": "", "digests": {"md5": "333c1b9c0f39a16dfb43fc4c67390d88", "sha256": "ca518bfb43c4fd9dae010fedd508030c8d6ab9e97465e8cf1574b4ff4ac76655"}, "downloads": -1, "filename": "rstdoc-1.6.9-py3-none-any.whl", "has_sig": false, "md5_digest": "333c1b9c0f39a16dfb43fc4c67390d88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 99625, "upload_time": "2019-03-02T12:11:19", "upload_time_iso_8601": "2019-03-02T12:11:19.414963Z", "url": "https://files.pythonhosted.org/packages/32/47/5f46fddec03ac1ac87a97d78a2de1e5ab3fc7a07ced11ca5772b99e369b3/rstdoc-1.6.9-py3-none-any.whl", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "f28832f1f71d3f0a02b60b1ec32bbb31", "sha256": "9a97c96b0ee0ae5ea6497b91a1a149cd692ea2d35a841c90ecb4134727a24597"}, "downloads": -1, "filename": "rstdoc-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f28832f1f71d3f0a02b60b1ec32bbb31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 101003, "upload_time": "2019-03-22T17:35:42", "upload_time_iso_8601": "2019-03-22T17:35:42.497622Z", "url": "https://files.pythonhosted.org/packages/01/90/16543384a822797989dd2582ce4417fddbd8f9b6c6d9a9ddd6e0c6e18922/rstdoc-1.7.0-py3-none-any.whl", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "9f10f83baf9235e04a6b066534885ea8", "sha256": "1bf1b66a5b96c9146c15a743684ceaf0ab2a85d3ce541be12f9fb9c22454150f"}, "downloads": -1, "filename": "rstdoc-1.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9f10f83baf9235e04a6b066534885ea8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 101050, "upload_time": "2019-03-28T10:57:05", "upload_time_iso_8601": "2019-03-28T10:57:05.244894Z", "url": "https://files.pythonhosted.org/packages/a1/43/c594133f6e76bc4c20b56dd74967393744219abc7aac1cc3db7f6c5884b9/rstdoc-1.7.1-py3-none-any.whl", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "43cb94bd3f284f4cfc1e70d899f68639", "sha256": "86bd448b64eebfed762769721e9f38795a411f691399961b38055cba475100b5"}, "downloads": -1, "filename": "rstdoc-1.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "43cb94bd3f284f4cfc1e70d899f68639", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 110499, "upload_time": "2019-09-26T21:06:45", "upload_time_iso_8601": "2019-09-26T21:06:45.585990Z", "url": "https://files.pythonhosted.org/packages/47/25/9acf41156cba3b71c1ff2d12aa15c767412bcd7be32e8208ccc7f6b9ccd1/rstdoc-1.7.2-py3-none-any.whl", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "e5260ec4832c07379a99ba0fea849d98", "sha256": "d385261ec42deebddcd2a2a86bb3b87642dd04c823859d92bc06876b2d2097c5"}, "downloads": -1, "filename": "rstdoc-1.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e5260ec4832c07379a99ba0fea849d98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 113317, "upload_time": "2019-11-11T18:38:37", "upload_time_iso_8601": "2019-11-11T18:38:37.205318Z", "url": "https://files.pythonhosted.org/packages/a0/c6/18fbd03dead12bb44036e9246b46f7ef899410f1d2ce0d3e1ce8c592c6f2/rstdoc-1.7.3-py3-none-any.whl", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "91119345b9c29286593a654eff7334a9", "sha256": "9a2cff15306dc7b9d77d93105ffa059d55c449923abe15391e11ab2202a0fbe6"}, "downloads": -1, "filename": "rstdoc-1.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "91119345b9c29286593a654eff7334a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 121963, "upload_time": "2019-11-24T22:21:42", "upload_time_iso_8601": "2019-11-24T22:21:42.895443Z", "url": "https://files.pythonhosted.org/packages/0b/c3/4aee5257af4924163dbc7a9a7b9fd89193d88dd93dd03b2218c5f2287940/rstdoc-1.8.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91119345b9c29286593a654eff7334a9", "sha256": "9a2cff15306dc7b9d77d93105ffa059d55c449923abe15391e11ab2202a0fbe6"}, "downloads": -1, "filename": "rstdoc-1.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "91119345b9c29286593a654eff7334a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 121963, "upload_time": "2019-11-24T22:21:42", "upload_time_iso_8601": "2019-11-24T22:21:42.895443Z", "url": "https://files.pythonhosted.org/packages/0b/c3/4aee5257af4924163dbc7a9a7b9fd89193d88dd93dd03b2218c5f2287940/rstdoc-1.8.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:00:32 2020"}