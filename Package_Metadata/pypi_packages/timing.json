{"info": {"author": "Mateusz Bysiek", "author_email": "mateusz.bysiek@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": ".. role:: python(code)\n    :language: python\n\n\n======\ntiming\n======\n\n.. image:: https://img.shields.io/pypi/v/timing.svg\n    :target: https://pypi.org/project/timing\n    :alt: package version from PyPI\n\n.. image:: https://travis-ci.com/mbdevpl/timing.svg?branch=master\n    :target: https://travis-ci.com/mbdevpl/timing\n    :alt: build status from Travis CI\n\n.. image:: https://codecov.io/gh/mbdevpl/timing/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/mbdevpl/timing\n    :alt: test coverage from Codecov\n\n.. image:: https://img.shields.io/github/license/mbdevpl/timing.svg\n    :target: https://github.com/mbdevpl/timing/blob/master/NOTICE\n    :alt: license\n\nTiming module was created to simplify logging of timings of selected parts of an application.\n\n.. contents::\n    :backlinks: none\n\n\nHow to use\n==========\n\nRecommended initialization is as follows.\n\n.. code:: python\n\n    import timing\n\n    _TIME = timing.get_timing_group(__name__)  # type: timing.TimingGroup\n\n\nThis follows the conventions of :python:`logging` module.\n\n.. code:: python\n\n    import logging\n\n    _LOG = logging.getLogger(__name__)\n\nAny name can be used instead of :python:`__name__`.\nHowever, if a names of format :python:`module.sub.subsub` are used, this will create a timing\nhierarchy where each timing data is stored in its proper location and can be queried easier.\n\nThe resulting :python:`_TIME` object is used to create individual timers,\nand will handle storing results in cache, which later can be used to obtain timing statistics.\n\nYou can obtain the timer object directly via :python:`start(name)` method.\nYou'll need to manually call :python:`stop()` in this case.\n\n.. code:: python\n\n   timer = _TIME.start('spam')  # type: timing.Timing\n   spam()\n   more_spam()\n   timer.stop()\n\n\nYou can also obtain the timer object indirectly via :python:`measure(name)` context manager.\nThe context manager will take care of calling :python:`stop()` at the end.\n\n.. code:: python\n\n    with _TIME.measure('ham') as timer:  # type: timing.Timing\n        ham()\n        more_ham()\n\n\nAnd if you want to time many repetitions of the same action (e.g. for statistical significance)\nyou can use :python:`measure_many(name[, samples][, threshold])` generator.\n\nYou can decide how many times you want to measure via :python:`samples` parameter\nand how many seconds at most you want to spend on measurements via :python:`threshold` parameter\n\n.. code:: python\n\n    for timer in _TIME.measure_many('eggs', samples=1000):  # type: timing.Timing\n        eggs()\n        more_eggs()\n\n    for timer in _TIME.measure_many('bacon', threshold=0.5):  # type: timing.Timing\n        bacon()\n        more_bacon()\n\n    for timer in _TIME.measure_many('tomatoes', samples=500, threshold=0.5):  # type: timing.Timing\n        tomatoes()\n        more_tomatoes()\n\n\nAlso, you can use :python:`measure` and :python:`measure(name)` as decorator.\nIn this scenario you cannot access the timings directly, but the results will be stored\nin the timing group object, as well as in the global cache unless you configure the timing\nto not use the cache.\n\n.. code:: python\n\n    import timing\n\n    _TIME = timing.get_timing_group(__name__)\n\n    @_TIME.measure\n    def recipe():\n        ham()\n        eggs()\n        bacon()\n\n    @_TIME.measure('the_best_recipe')\n    def bad_recipe():\n        spam()\n        spam()\n        spam()\n\n\nThen, after calling each function the results can be accessed through :python:`summary` property.\n\n.. code:: python\n\n    recipe()\n    bad_recipe()\n    bad_recipe()\n\n    assert _TIME.summary['recipe']['samples'] == 1\n    assert _TIME.summary['the_best_recipe']['samples'] == 2\n\n\nThe :python:`summary` property is dynamically computed on first access. Subsequent accesses\nwill not recompute the values, so if you need to access the updated results,\ncall the :python:`summarize()` method.\n\n.. code:: python\n\n    recipe()\n    assert _TIME.summary['recipe']['samples'] == 1\n\n    bad_recipe()\n    bad_recipe()\n    assert _TIME.summary['the_best_recipe']['samples'] == 2  # will fail\n    _TIME.summarize()\n    assert _TIME.summary['the_best_recipe']['samples'] == 2  # ok\n\n\nFurther API and documentation are in development.\n\n\nSee these examples in action in `examples.ipynb <https://github.com/mbdevpl/timing/blob/v0.4.0/examples.ipynb>`_ notebook.\n\n\nRequirements\n============\n\nPython version 3.5 or later.\n\nPython libraries as specified in `requirements.txt <https://github.com/mbdevpl/timing/blob/v0.4.0/requirements.txt>`_.\n\nBuilding and running tests additionally requires packages listed in `test_requirements.txt <https://github.com/mbdevpl/timing/blob/v0.4.0/test_requirements.txt>`_.\n\nTested on Linux and OS X.\n\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mbdevpl/timing", "keywords": "timing,timer,time measurement,profiling,reproducibility", "license": "Apache License 2.0", "maintainer": "Mateusz Bysiek", "maintainer_email": "mateusz.bysiek@gmail.com", "name": "timing", "package_url": "https://pypi.org/project/timing/", "platform": "", "project_url": "https://pypi.org/project/timing/", "project_urls": {"Homepage": "https://github.com/mbdevpl/timing"}, "release_url": "https://pypi.org/project/timing/0.4.0/", "requires_dist": ["numpy", "version-query"], "requires_python": ">=3.5", "summary": "Simplify logging of timings of selected parts of an application.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/timing\" rel=\"nofollow\"><img alt=\"package version from PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa6fd4be6467036379f186f472928d22163450fd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696d696e672e737667\"></a>\n<a href=\"https://travis-ci.com/mbdevpl/timing\" rel=\"nofollow\"><img alt=\"build status from Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2251ca9e319a506533c9122bf6793e9b3ad8388/68747470733a2f2f7472617669732d63692e636f6d2f6d62646576706c2f74696d696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/mbdevpl/timing\" rel=\"nofollow\"><img alt=\"test coverage from Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/615fbce98e35f0aacef565a4de17b26e2c80d59f/68747470733a2f2f636f6465636f762e696f2f67682f6d62646576706c2f74696d696e672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://github.com/mbdevpl/timing/blob/master/NOTICE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73a4d093c3bc295b2051db4ecf51a7dba74c62b6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d62646576706c2f74696d696e672e737667\"></a>\n<p>Timing module was created to simplify logging of timings of selected parts of an application.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#how-to-use\" id=\"id1\" rel=\"nofollow\">How to use</a></li>\n<li><a href=\"#requirements\" id=\"id2\" rel=\"nofollow\">Requirements</a></li>\n</ul>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>Recommended initialization is as follows.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timing</span>\n\n<span class=\"n\">_TIME</span> <span class=\"o\">=</span> <span class=\"n\">timing</span><span class=\"o\">.</span><span class=\"n\">get_timing_group</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>  <span class=\"c1\"># type: timing.TimingGroup</span>\n</pre>\n<p>This follows the conventions of <code class=\"python\"><span class=\"n\">logging</span></code> module.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">_LOG</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n</pre>\n<p>Any name can be used instead of <code class=\"python\"><span class=\"vm\">__name__</span></code>.\nHowever, if a names of format <code class=\"python\"><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">subsub</span></code> are used, this will create a timing\nhierarchy where each timing data is stored in its proper location and can be queried easier.</p>\n<p>The resulting <code class=\"python\"><span class=\"n\">_TIME</span></code> object is used to create individual timers,\nand will handle storing results in cache, which later can be used to obtain timing statistics.</p>\n<p>You can obtain the timer object directly via <code class=\"python\"><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span></code> method.\nYou\u2019ll need to manually call <code class=\"python\"><span class=\"n\">stop</span><span class=\"p\">()</span></code> in this case.</p>\n<pre><span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"s1\">'spam'</span><span class=\"p\">)</span>  <span class=\"c1\"># type: timing.Timing</span>\n<span class=\"n\">spam</span><span class=\"p\">()</span>\n<span class=\"n\">more_spam</span><span class=\"p\">()</span>\n<span class=\"n\">timer</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>You can also obtain the timer object indirectly via <code class=\"python\"><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span></code> context manager.\nThe context manager will take care of calling <code class=\"python\"><span class=\"n\">stop</span><span class=\"p\">()</span></code> at the end.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"s1\">'ham'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">timer</span><span class=\"p\">:</span>  <span class=\"c1\"># type: timing.Timing</span>\n    <span class=\"n\">ham</span><span class=\"p\">()</span>\n    <span class=\"n\">more_ham</span><span class=\"p\">()</span>\n</pre>\n<p>And if you want to time many repetitions of the same action (e.g. for statistical significance)\nyou can use <code class=\"python\"><span class=\"n\">measure_many</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">[,</span> <span class=\"n\">samples</span><span class=\"p\">][,</span> <span class=\"n\">threshold</span><span class=\"p\">])</span></code> generator.</p>\n<p>You can decide how many times you want to measure via <code class=\"python\"><span class=\"n\">samples</span></code> parameter\nand how many seconds at most you want to spend on measurements via <code class=\"python\"><span class=\"n\">threshold</span></code> parameter</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">timer</span> <span class=\"ow\">in</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">measure_many</span><span class=\"p\">(</span><span class=\"s1\">'eggs'</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">):</span>  <span class=\"c1\"># type: timing.Timing</span>\n    <span class=\"n\">eggs</span><span class=\"p\">()</span>\n    <span class=\"n\">more_eggs</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">timer</span> <span class=\"ow\">in</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">measure_many</span><span class=\"p\">(</span><span class=\"s1\">'bacon'</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">):</span>  <span class=\"c1\"># type: timing.Timing</span>\n    <span class=\"n\">bacon</span><span class=\"p\">()</span>\n    <span class=\"n\">more_bacon</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">timer</span> <span class=\"ow\">in</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">measure_many</span><span class=\"p\">(</span><span class=\"s1\">'tomatoes'</span><span class=\"p\">,</span> <span class=\"n\">samples</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">):</span>  <span class=\"c1\"># type: timing.Timing</span>\n    <span class=\"n\">tomatoes</span><span class=\"p\">()</span>\n    <span class=\"n\">more_tomatoes</span><span class=\"p\">()</span>\n</pre>\n<p>Also, you can use <code class=\"python\"><span class=\"n\">measure</span></code> and <code class=\"python\"><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span></code> as decorator.\nIn this scenario you cannot access the timings directly, but the results will be stored\nin the timing group object, as well as in the global cache unless you configure the timing\nto not use the cache.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">timing</span>\n\n<span class=\"n\">_TIME</span> <span class=\"o\">=</span> <span class=\"n\">timing</span><span class=\"o\">.</span><span class=\"n\">get_timing_group</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@_TIME</span><span class=\"o\">.</span><span class=\"n\">measure</span>\n<span class=\"k\">def</span> <span class=\"nf\">recipe</span><span class=\"p\">():</span>\n    <span class=\"n\">ham</span><span class=\"p\">()</span>\n    <span class=\"n\">eggs</span><span class=\"p\">()</span>\n    <span class=\"n\">bacon</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@_TIME</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"s1\">'the_best_recipe'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bad_recipe</span><span class=\"p\">():</span>\n    <span class=\"n\">spam</span><span class=\"p\">()</span>\n    <span class=\"n\">spam</span><span class=\"p\">()</span>\n    <span class=\"n\">spam</span><span class=\"p\">()</span>\n</pre>\n<p>Then, after calling each function the results can be accessed through <code class=\"python\"><span class=\"n\">summary</span></code> property.</p>\n<pre><span class=\"n\">recipe</span><span class=\"p\">()</span>\n<span class=\"n\">bad_recipe</span><span class=\"p\">()</span>\n<span class=\"n\">bad_recipe</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">[</span><span class=\"s1\">'recipe'</span><span class=\"p\">][</span><span class=\"s1\">'samples'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n<span class=\"k\">assert</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">[</span><span class=\"s1\">'the_best_recipe'</span><span class=\"p\">][</span><span class=\"s1\">'samples'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<p>The <code class=\"python\"><span class=\"n\">summary</span></code> property is dynamically computed on first access. Subsequent accesses\nwill not recompute the values, so if you need to access the updated results,\ncall the <code class=\"python\"><span class=\"n\">summarize</span><span class=\"p\">()</span></code> method.</p>\n<pre><span class=\"n\">recipe</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">[</span><span class=\"s1\">'recipe'</span><span class=\"p\">][</span><span class=\"s1\">'samples'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">bad_recipe</span><span class=\"p\">()</span>\n<span class=\"n\">bad_recipe</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">[</span><span class=\"s1\">'the_best_recipe'</span><span class=\"p\">][</span><span class=\"s1\">'samples'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>  <span class=\"c1\"># will fail</span>\n<span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summarize</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">_TIME</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">[</span><span class=\"s1\">'the_best_recipe'</span><span class=\"p\">][</span><span class=\"s1\">'samples'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>  <span class=\"c1\"># ok</span>\n</pre>\n<p>Further API and documentation are in development.</p>\n<p>See these examples in action in <a href=\"https://github.com/mbdevpl/timing/blob/v0.4.0/examples.ipynb\" rel=\"nofollow\">examples.ipynb</a> notebook.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Python version 3.5 or later.</p>\n<p>Python libraries as specified in <a href=\"https://github.com/mbdevpl/timing/blob/v0.4.0/requirements.txt\" rel=\"nofollow\">requirements.txt</a>.</p>\n<p>Building and running tests additionally requires packages listed in <a href=\"https://github.com/mbdevpl/timing/blob/v0.4.0/test_requirements.txt\" rel=\"nofollow\">test_requirements.txt</a>.</p>\n<p>Tested on Linux and OS X.</p>\n</div>\n\n          </div>"}, "last_serial": 5465581, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2ccf673aa1ab4ad477db205f48ab9224", "sha256": "ffd008e8df70749fa6eef3b249dece06530bacedc35eee1ee72e5aa0757a9498"}, "downloads": -1, "filename": "timing-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ccf673aa1ab4ad477db205f48ab9224", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4411, "upload_time": "2018-07-31T08:30:44", "upload_time_iso_8601": "2018-07-31T08:30:44.595914Z", "url": "https://files.pythonhosted.org/packages/e6/97/2aa062ae7fb2533ddc27b411d55696da59184a5491735787e5b612cc3f70/timing-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b07af25dca521282513c20b6e3d72f22", "sha256": "fc904a130a7d10ae12d47e2f9012387b46b431ada3e1f5a0ccebe8cf17c59908"}, "downloads": -1, "filename": "timing-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b07af25dca521282513c20b6e3d72f22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14674, "upload_time": "2018-07-31T08:30:46", "upload_time_iso_8601": "2018-07-31T08:30:46.439580Z", "url": "https://files.pythonhosted.org/packages/83/f2/f1acb9d3e32216ffaf682a46c955b97d56a80dcdead9559f0638f3c7a5e1/timing-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4cc361911d39e11eaa23b5a477dd0ac6", "sha256": "8a7d99394e0eb98cb97c0d662228f232cf22a479a90e076ccbefffc168ecc6be"}, "downloads": -1, "filename": "timing-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4cc361911d39e11eaa23b5a477dd0ac6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4423, "upload_time": "2018-08-01T02:39:52", "upload_time_iso_8601": "2018-08-01T02:39:52.400077Z", "url": "https://files.pythonhosted.org/packages/28/4b/9bcc51c6ffaf50198c32d33b683fd4e99aa0391981919286ed47e60eec62/timing-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "060603a381d5fbf973e485c2bdbb3147", "sha256": "f3296d7a6f98066ee331ad66eb380409a3147d6bc717e9848fbaa5e579b4fdf9"}, "downloads": -1, "filename": "timing-0.1.1.tar.gz", "has_sig": false, "md5_digest": "060603a381d5fbf973e485c2bdbb3147", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 14685, "upload_time": "2018-08-01T02:39:53", "upload_time_iso_8601": "2018-08-01T02:39:53.932798Z", "url": "https://files.pythonhosted.org/packages/29/db/5acee423d4837b78e9ebdca77a416c676d3e782dabbbbfb1092cbd48533c/timing-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ba72273a71644878d53ef96072b3f229", "sha256": "a98643722f5e8004cf132f3c667ede037688b9e0f7957dc4ff8821da7e303af2"}, "downloads": -1, "filename": "timing-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ba72273a71644878d53ef96072b3f229", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10563, "upload_time": "2019-02-19T03:33:41", "upload_time_iso_8601": "2019-02-19T03:33:41.717670Z", "url": "https://files.pythonhosted.org/packages/81/34/ade03f539e3f30623cebd1ebbe3bc25b27b303a8551dac9a3fba79a18c3d/timing-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0f912016e5c03d5001a722ac5e2733bb", "sha256": "183b7544e8dffa985857596b3d61dcdf7f2952303c87352d77c513f616f6df5a"}, "downloads": -1, "filename": "timing-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0f912016e5c03d5001a722ac5e2733bb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17375, "upload_time": "2019-02-19T03:33:43", "upload_time_iso_8601": "2019-02-19T03:33:43.863532Z", "url": "https://files.pythonhosted.org/packages/66/0d/fa74d8164db29e6630b8f108317689f84cd30b16e355ec713cb816bc0c89/timing-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3bd5261372ee13c52f74a5f33fb77867", "sha256": "c22b183538249ff9036e2b12be49ed4a14e7d056f2794c9498cf7e39f30a32b8"}, "downloads": -1, "filename": "timing-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3bd5261372ee13c52f74a5f33fb77867", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11109, "upload_time": "2019-06-12T13:49:25", "upload_time_iso_8601": "2019-06-12T13:49:25.171819Z", "url": "https://files.pythonhosted.org/packages/13/7d/55cb6d911558dabaf3492d04150a7886eb6c7846319b2b289789aa208883/timing-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd7ff0890b49ef0618ebba276fa25831", "sha256": "6ac2d297309f3ab0f058237e4b604d5cf742cfe185ad437dba63e64000b6e491"}, "downloads": -1, "filename": "timing-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bd7ff0890b49ef0618ebba276fa25831", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18577, "upload_time": "2019-06-12T13:49:27", "upload_time_iso_8601": "2019-06-12T13:49:27.054472Z", "url": "https://files.pythonhosted.org/packages/fd/54/5c2d9b24db2660725276bf575a1d6428bdff6d684f1f2e5c44535b20c403/timing-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3f9ccd258257635cecf70ad9429718cc", "sha256": "5957dd5a03691f00190f1e261e61ceb28d1635b105d43934060d46f87b7777db"}, "downloads": -1, "filename": "timing-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f9ccd258257635cecf70ad9429718cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12828, "upload_time": "2019-06-29T14:44:24", "upload_time_iso_8601": "2019-06-29T14:44:24.249831Z", "url": "https://files.pythonhosted.org/packages/7d/1e/ee0ea69ff906e99d2d63044f87504e74ccccc5b9b110b5a7fe88a109ed92/timing-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5427d61659734ebb207228a62617536", "sha256": "b714ce66e94e9bbb6b205cfe4a768be6d14c11b202baf5026a2582b1cee2c3c4"}, "downloads": -1, "filename": "timing-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d5427d61659734ebb207228a62617536", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18403, "upload_time": "2019-06-29T14:44:26", "upload_time_iso_8601": "2019-06-29T14:44:26.209568Z", "url": "https://files.pythonhosted.org/packages/4a/b1/2a3efe78bb97b94e3a68ae865ba5b3065545cf828ee212f466329fa66625/timing-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f9ccd258257635cecf70ad9429718cc", "sha256": "5957dd5a03691f00190f1e261e61ceb28d1635b105d43934060d46f87b7777db"}, "downloads": -1, "filename": "timing-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f9ccd258257635cecf70ad9429718cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12828, "upload_time": "2019-06-29T14:44:24", "upload_time_iso_8601": "2019-06-29T14:44:24.249831Z", "url": "https://files.pythonhosted.org/packages/7d/1e/ee0ea69ff906e99d2d63044f87504e74ccccc5b9b110b5a7fe88a109ed92/timing-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d5427d61659734ebb207228a62617536", "sha256": "b714ce66e94e9bbb6b205cfe4a768be6d14c11b202baf5026a2582b1cee2c3c4"}, "downloads": -1, "filename": "timing-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d5427d61659734ebb207228a62617536", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 18403, "upload_time": "2019-06-29T14:44:26", "upload_time_iso_8601": "2019-06-29T14:44:26.209568Z", "url": "https://files.pythonhosted.org/packages/4a/b1/2a3efe78bb97b94e3a68ae865ba5b3065545cf828ee212f466329fa66625/timing-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:18 2020"}