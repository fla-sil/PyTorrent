{"info": {"author": "NorgateData Pty Ltd", "author_email": "support@norgatedata.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Win32 (MS Windows)", "Intended Audience :: Financial and Insurance Industry", "License :: Other/Proprietary License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Office/Business :: Financial :: Investment"], "description": "\n![alt text](https://norgatedata.com/assets/images/norgate-data-logo-400x188.svg \"Norgate Data\") ![alt text](https://media.quantopian.com/logos/open_source/zipline-logo-03_.png \"Zipline\")\n\nIntegrates financial market data provided by [Norgate Data](https://norgatedata.com/) with [Zipline](https://zipline.io/), a Pythonic algorithmic trading library for backtesting.\n\nKey features of this extension\n * Simple bundle creation\n * Survivorship bias-free bundles\n * Incorporates time series data such as historical index membership and dividend yield into Zipline's Pipeline mechanism\n * No modifications to the Zipline code base (except to fix problems with installation and obsolete calls that crash Zipline)\n\n# Installation\n\n```sh\npip install zipline-norgatedata\n```\n\n# Upgrades\n\nTo receive upgrades/updates\n\n```sh\npip install zipline-norgatedata --upgrade\n```\n\n# Requirements\n\n* Zipline 1.3\n* Python 3.5 only (this is a limitation of Zipline)\n* Microsoft Windows\n* An active [Norgate Data](https://norgatedata.com/) subscription\n* Writable local user folder named .norgatedata (or defined in environment variable NORGATEDATA_ROOT) - defaults to C:\\\\Users\\\\Your username\\\\.norgatedata\n* Python packages: Pandas, Numpy, Logbook\n\n# Assumptions\n- Stocks are automatically set an auto_close_date of the last quoted date \n- Futures are automatically set an auto_close_date to the earlier of following: Last trading date (for cash settled futures, and physically delivered futures that only allow delivery after the last trading date), or 1 trading day prior to first notice date for futures that have a first notice date prior to the last trading date.\n\n# Bundle Creation \n\nNavigate to your Zipline local settings folder.  This is typically located at **c:\\\\users\\\\<your username>\\\\.zipline**\n\nAdd the following lines at the top of your Zipline local settings file - extension.py:\n**Note:  This is _NOT_ the extension.py file inside the Anaconda3\\\\envs\\\\<your environment>\\\\lib\\\\site-packages\\\\zipline**\n\n```py\nfrom norgatedata import StockPriceAdjustmentType\nfrom zipline_norgatedata import (\n    register_norgatedata_equities_bundle,\n    register_norgatedata_futures_bundle )\n```\n\nThen create as many bundles definitions as you desire.  These bundles will use either a given symbol list, one or more watchlists from your Norgate Data Watchlist Library and (for futures markets) all contracts belonging to a given set of [futures market session symbols](https://norgatedata.com/data-content-tables.php#futures).\n\nHere are some examples with varying parameters.  You should adapt these to your requirements.\n\nregister_norgatedata_equities_bundle has the following default parameters:\n    stock_price_adjustment_setting = StockPriceAdjustmentType.TOTALRETURN,\n    end_session = 'now',\n\tcalendar_name = 'NYSE',\n\nregister_norgatedata_futures_bundle has the following default parameters:\n    end_session = 'now',\n    calendar_name = 'us_futures'\n\n```py\n\n# EQUITIES BUNDLES\n\n# Single stock bundle - AAPL from 1990 though 2018\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-aapl',\n    symbol_list = ['AAPL'], \n    start_session = '1990-01-01',\n    end_session = '2018-12-31'\n)\n\n# FANG stocks (Facebook, Amazon, Netflix, Google) - 2012-05-18 until now\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-fang',\n    symbol_list = ['FB','AMZN','NFLX','GOOGL'], \n    start_session = '2012-05-18',  # This is that FB first traded\n)\n\n# A small set of selected ETFs\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-selected-etfs',\n    symbol_list = ['SPY','GLD','USO'],\n    start_session = '2006-04-10', # This is the USO first trading date\n)\n\n# S&P 500 Bundle for backtesting including all current & past constituents back to 1990\n# and the S&P 500 Total Return index (useful for benchmarking and/or index trend filtering)\n# (around 1800 securities)\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-sp500',\n    symbol_list = ['$SPXTR'],\n    watchlists = ['S&P 500 Current & Past'],\n    start_session = '1990-01-01',\n)\n\n# Russell 3000 bundle containing all ccurrent & past constituents back to 1990\n# and the Russell 3000 Total Return Index (useful for benchmarking and/or index trend filtering)\n# (about 11000 securities)\n\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-russell3000',\n    watchlists = ['Russell 3000 Current & Past'],\n    symbol_list = ['$RUATR'],\n    start_session = '1990-01-01' ,\n)\n\n# FUTURES BUNDLES\n\n# Example bundle for all of the individual contracts from three futures markets:\n# E-mini S&P 500, E-mini Nasdaq 100, E-mini Russell 2000\nregister_norgatedata_futures_bundle(\n    bundlename = 'norgatedata-selected-index-futures',\n    session_symbols = ['ES','NQ','RTY'],\n    start_session = '2000-01-01',\n)\n\n# Same as above, but also adds the S&P 500 Total Return index ($SPXTR) for reference\nregister_norgatedata_futures_bundle(\n    bundlename = 'norgatedata-selected-index-futures-and-index',\n    session_symbols = ['ES','NQ','RTY'],\n    symbol_list = ['$SPXTR']\n    start_session = '2000-01-01',\n)\n\n# Bundle of futures used in Andreas Clenow's Trading Evolved book\n# (contains 6000+ individual futures contracts/deliveries)\nbundlename = 'norgatedata-tradingevolved-futures'\nsession_symbols = [\n\t'6A', # AUD\n\t'6B', # GBP\n\t'6C', # CAD\n\t'6E', # EUR\n\t'DX', # USDX\n\t'6J', # JPY\n\t'6N', # NZD\n\t'6S', # CHF\n\t'LBS', # Lumber\n\t'ZC', # Corn\n\t'CT', # Cotton\n\t'GF', # Feeder Cattle\n\t'KC', # Coffee\n\t'LRC', # Robusta Coffee\n\t'LSU', # White Sugar\n\t'ZO', # Oats\n\t'ZS', # Soybeans\n\t'SB', # Sugar\n\t'ZM', # Soybean Meal\n\t'ZW', # Wheat\n\t'CL', # Crude Oil\n\t'GC', # Gold\n\t'HG', # Copper\n\t'HO', # NY Harbor ULSD \n\t'GAS', # Gas Oil\n\t'NG', # Henry Hub Natural Gas\n\t'PA', # Palladium\n\t'PL', # Platinum\n\t'RB', # RBOB Gasoline\n\t'SI', # Silver\n\t'ES', # E-mini S&P 500\n\t'NKD', # Nikkei 225 Dollar\n\t'NQ', # E-mini Nasdaq-100\n\t'STW', # MSCI Taiwan \n\t'VX', # Cboe Volatility Index\n\t'YM', # E-mini Dow\n\t'GE', # Eurodollar\n\t'ZF', # 5-Year US T-Note\n\t'ZT', # 2-Year US T-Note\n\t'ZN', # 10-Year US T-Note\n\t'ZB', # 30-Year US T-Bond        \n]\nstart_session = '2000-01-01',\n\nregister_norgatedata_futures_bundle(bundlename,start_session,session_symbols = session_symbols )\n\n\n```\n\nTo ingest a bundle:\n\n```sh\nzipline ingest -b <bundlename>\n```\n\n\n# Pipelines - accessing timeseries data\n\nTimeseries data has been exposed into Zipline's Pipeline interface.   During a backtest, the Pipelines will be calculated against all securities in the bundle.\n\nThe following Filter (i.e. boolean) pipelines are available:\n - [NorgateDataIndexConstituent](https://norgatedata.com/data-content-tables.php#ushics)\n - [NorgateDataMajorExchangeListed](https://norgatedata.com/data-content-tables.php#usmajorexchangelisted)\n - [NorgateDataCapitalEvent](https://norgatedata.com/data-content-tables.php#capitalevent)\n - [NorgateDataPaddingStatus](https://norgatedata.com/data-content-tables.php#padding)\n\nThe following Factor (i.e. float) pipelines are available:\n - NorgateDataUnadjustedClose\n - [NorgateDataDividendYield](https://norgatedata.com/data-content-tables.php#dividendyield)\n\n To incorporate these into your trading model, you need to import the relevant packages/methods:\n\n```py\nfrom zipline.pipeline import Pipeline\nfrom zipline_norgatedata.pipelines import (\n    NorgateDataIndexConstituent, NorgateDataDividendYield )\nfrom zipline.api import order_target_percent\n```\n\nIt is recommended you put your pipeline construction in its own function:\n\n ```py\ndef make_pipeline():\n    indexconstituent = NorgateDataIndexConstituent('S&P 1500')\n    divyield = NorgateDataDividendYield()\n    return Pipeline(\n        columns={\n             'NorgateDataIndexConstituent':indexconstituent,\n             'NorgateDividendYield':divyield },\n        screen = indexconstituent)\n```\n\nIncorporate this into your trading system by attaching it to your initialize method.  Note, for better efficiency, use chunks=9999 or however many bars you are likely to need.  \nThis will save unnecessary access to the Norgate Data database.\n\n```py\n\n def initialize(context):\n    attach_pipeline(make_pipeline(), 'norgatedata_pipeline', chunks=9999,eager=True)\n    # ...\n```\n\nNow you can access the contents of the pipeline in before_trading_start and/or handle_data by using Zipline's pipline_output method.  You can exit positions not already in the \n\n```py\ndef before_trading_start(context, data):\n    context.pipeline_data = pipeline_output('norgatedata_pipeline')\n    # ... your code here ...\n\ndef handle_data(context, data):\n    context.pipeline_data = pipeline_output('norgatedata_pipeline')\n    current_constituents = context.pipeline_data.index\n\n    # ... your code here ...\n\n    # Exit positions not in the index today\n    for asset in context.portfolio.positions:   \n        if asset not in current_constituents:\n            order_target_percent(asset,0.0)\n\n    # ... your code here ...\n```\n\n# Worked example backtesting S&P 500 Constituents back to 1990\n\nThis example comprises a backtest on the S&P 500, with a basic trend filter that is applied on the S&P 500 index ($SPX).  The total return version of the index is also ingested ($SPXTR) for comparison purposes.\n\nCreate a bundle definition in extensions.py as follows:\n\n```py\nfrom zipline_norgatedata import register_norgatedata_equities_bundle\n\nregister_norgatedata_equities_bundle(\n    bundlename = 'norgatedata-sp500-backtest',\n    symbol_list = ['$SPX','$SPXTR'],\n    watchlists = ['S&P 500 Current & Past'],\n    start_session = '1990-01-01',\n)\n```\n\nNow, ingest that bundle into zipline:\n\n```sh\nzipline ingest -b norgatedata-sp500-backtest\n```\n\nInside your trading system file, you'd incorporate the following code snippets:\n\n```py\nfrom zipline.pipeline import Pipeline\nfrom zipline_norgatedata.pipelines import (\n    NorgateDataIndexConstituent, \n    NorgateDataDividendYield)\n\n...\n\ndef make_pipeline():\n    indexconstituent = NorgateDataIndexConstituent('S&P 500')\n    return Pipeline(\n        columns={\n             'NorgateDataIndexConstituent':indexconstituent,\n        },\n        screen = indexconstituent)\n\n def initialize(context):\n    attach_pipeline(make_pipeline(), 'norgatedata_pipeline', chunks=9999,eager=True)\n    # ... your code here ...\n\ndef before_trading_start(context, data):\n    context.pipeline_data = pipeline_output('norgatedata_pipeline')\n    # ... your code here ...\n\ndef handle_data(context, data):\n    context.pipeline_data = pipeline_output('norgatedata_pipeline')\n    current_constituents = context.pipeline_data.index\n\n    # ... your code here ...\n\n    # Exit positions not in the index today\n    for asset in context.portfolio.positions:   \n        if asset not in context.assets:\n            order_target_percent(asset,0.0)\n\n    # ...\n```\n\n\n# Worked example backtesting E-Mini S&P 500 futures\n\nThis example created a continuous contract of the E-Mini S&P 500 futures that trade on CME on volume.\n\nCreate a bundle definition in extensions.py as follows:\n\n```py\nfrom zipline_norgatedata import register_norgatedata_futures_bundle\n\nbundlename = 'norgatedata-es-futures'\nsession_symbols = ['ES']\nstart_session = '2000-01-01'\nregister_norgatedata_futures_bundle(bundlename,start_session,session_symbols = session_symbols )\n\n```\n\nNow, ingest that bundle into zipline:\n\n```sh\nzipline ingest -b norgatedata-es-futures\n```\n\nInside your trading system file, you'd incorporate the following code snippets:\n\n```py\n def initialize(context):\n\n    # Obtain market(s)s directly from the bundle\n    af =  context.asset_finder\n    markets = set([]) # a set eliminates dupes\n    allcontracts = af.retrieve_futures_contracts(af.sids)\n    for contract in allcontracts:\n        markets.add(allcontracts[contract].root_symbol)\n\n    markets = list(markets)\n    markets.sort()\n\n    # Make a list of all continuations\n    context.universe = [\n        continuous_future(market, offset=0, roll='volume', adjustment='mul')\n            for market in markets\n    ]\n    # ... your code here ...\n\ndef handle_data(context, data):\n    # Get continuation data\n    hist = data.history(\n        context.universe, \n        fields=['close','volume'], \n        frequency='1d', \n        bar_count=250,  # Adjust to whatever lookback period you need\n    )\n\n    # Now use hist in your calculations \n\n    # Make a dictionary of open positions, based on the root symbol\n    open_pos = {\n        pos.root_symbol: pos \n        for pos in context.portfolio.positions\n    } \n\n    contracts_to_trade = 5\n\n    for continuation in context.universe:\n        # ...\n        continuation = data.current(continuation, 'contract')\n        # ...\n\n        # Entering a position:\n        order_target(contract,  contracts_to_trade)\n\n        # Existing a position\n        order_target(contract, -1 * contracts_to_trade)\n\n    # Finally, if there are open positions check for rolls\n    if len(open_pos) > 0:   \n        roll_futures(context, data)           \n\n```\n\n# Metadata\n\nThe following fields are available in the metadata dataframe: start_date, end_date, ac_date, symbol, asset_name, exchange, exchange_full, asset_type, norgate_data_symbol, norgate_data_assetid.  \n\n# Norgate Data Futures Market Session symbols\n\nTo obtain just the futures market sessions symbols, you can use the norgatedata package and adapt the following code:\n```py\nimport norgatedata\nfor session_symbol in norgatedata.futures_market_session_symbols():\n    print (session_symbol + \" \" + norgatedata.futures_market_session_name(session_symbol)) \n```\n# Zipline Futures root symbols\n\nTo show the translated 2 character root symbols for each futures market session, and a description of each market you can run a tiny script (or adapt this):\n\n```py\nimport zipline_norgatedata\nroot_symbols_dict = zipline_norgatedata.zipline_futures_root_symbols_dict()\nprint (root_symbols_dict)\n```\n\n# Zipline installation best practice\n\n- Zipline can be difficult to install if you do it in the wrong order.  Here's how we did it:\n\n  1.  Install the [Anaconda Distribution](https://www.anaconda.com/distribution/) \n  2.  Downgrade Conda to v4.6.11 (see ***Zipline installation troubleshooting - Conda*** below).\n  3.  Start Ananconda and Create a fresh Python 3.5 environment (Click Environments, then click Create, give it a name such as zip35, select Python 3.5 and click Create)\n  4.  Run a terminal in the new environment, and use conda to install zipline \n      ```\n      conda install zipline -c Quantopian\n      ```\n      and any other packages you want such as jupyter,  matplotlib etc.  \n      ```\n      conda install jupyter matplotlib\n      ```\n      Note, if you want Pyfolio (you probably will at some point), you should install this using Pip, as there is a very old version on Anaconda:\n      ```\n      pip install pyfolio\n      ```\n  5.  Install norgatedata and  zipline-norgatedata using pip \n      ```\n      pip install norgatedata zipline-norgatedata\n      ```\n  6.  Patch the zipline package (see ***Zipline 1.3.0 Benchmark Patch*** below) to resolve backtest failure) within your new environment\n  7.  Start a command prompt in your zipline environment you created, and simply run ```zipline``` to ensure that it work (this also creates the .zipline folder too)\n  8.  If you are backtesting futures data and create your own continuous futures from within your backtesting, you'll need to patch Zipline.  (see ***Zipline 1.3.0 Patches to resolve KeyError on Continuous Futures backtesting***)\n  9.  If you want to backtest data prior to 1990 (Stocks) or 2000 (Futures) see ***Backtesting prior to in-built Zipline/trading-calendar limits***\n\n\n\n# Zipline Limitations/Quirks\n\n- Zipline 1.3.0 is only compatible with Python 3.5.  Hopefully they'll update it one day....\n- Zipline has not been not had an official release since v1.3.0 (July 2018).  For reasons unknown, even though many fixes and changes have been implemented to the source code, no release has been made.\n- Zipline is hard-coded to handle equities data from 1990 onwards only\n- Zipline is hard-coded handle futuress data from 2000 onwards.\n- Zipline has unnecessarily complicated futures contracts by restricting symbols to 2 characters.  This is not a conventional followed by exchanges.  We hope they see the light and allow variable futures root symbol lengths (up to 5 characters).  In the meantime, you can get a list of futures market sessions covered and translated to their 2 character limit with: zipline_futures_root_symbols()\n- Zipline doesn't define all futures markets and doesn't provide any runtime extensibility in this area - you will need to add them to <your_environment>\\lib\\site-packages\\zipline\\finance\\constants.py if they are not defined.  Be sure to backup this file as it will be overwritten any time you update zipline.\n- Zipline assumes that there are bars for every day of trading.  If a security doesn't trade for a given day (e.g. it was halted/suspended, or simply nobody wanted to trade it), it will be padded with the previous close repeated in the OHLC fields, with volume set to zero.  Consider how this might affect your trading calculations.  \n- Index volumes cannot be accurately ingested due to Zipline trying to convert large volumes to UINTs which are out-of-bounds for UINT32.  Index volumes will be divided by 1000.\n Any stock whose adjusted volume exceeds the bounds of UINT32 will be set to the maximum UINT32 value (4294967295).  This only occurs for stocks with a lot of splis and/or very large special dsitributions.\n- Suprisingly, Zipline benchmarks do not work from securities ingested into your bundle.   Rather, the benchmark uses hardcoded logic that attempts to download the security SPY from an IEX API (which is now retired).  See the \"Zipline 1.3.0 Benchmark patch\" below to fix/bypass this issue.\n- Ingestion times could be improved significantly with multiprocessing (this requires Zipline enhancements)\n\n\nIf you are brave you could try with the latest Zipline source code (make sure you install the release version first, to solve dependencies):\n```\nconda install -c quantopian/label/ci zipline\n```\nNote:  You'll need to re-ingest any previously ingested bundles, as the underlying database schema used in Zipline is different.\n\n\n# Zipline installation troubleshooting - Conda\n\nWhen using Conda to install zipline, it spits out a lot of unsatisfiable package conflicts in a horribly complex error message\n```\n(zip35) C:\\Users\\Richard>conda install -c quantopian zipline\nCollecting package metadata (current_repodata.json): done\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\nSolving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\nCollecting package metadata (repodata.json): done\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\nSolving environment: \\\nFound conflicts! Looking for incompatible packages.\nThis can take several minutes.  Press CTRL-C to abort.\nExamining html5lib:   0%|                                                                                   | 0/33 [00:00<?, ?it/s]|failed\n\nUnsatisfiableError: The following specifications were found to be incompatible with each other:\n\nPackage markupsafe conflicts for:\nzipline -> markupsafe[version='>=0.23']\nPackage typing conflicts for:\nzipline -> typing[version='>=3.6.2']\n...\nPackage patsy conflicts for:\nzipline -> patsy[version='>=0.4.0']\nPackage numpy conflicts for:\nzipline -> numpy[version='>=1.11,<1.12.0a0|>=1.14,<1.15.0a0']\nPackage certifi conflicts for:\nzipline -> certifi[version='>=2018.8.24']\n```\n\nThis really makes no sense as the Conda environment is supposed to figure out all of these conflicts.  \n\nThis error started around Aug 2019 onwards when Conda v4.7 was released and is still a problem with Conda v4.7.12 as at 14 Nov 2019) \n\nUntil the Zipline devs figure out what is happening here, we've found that by downgrading to Conda v4.6.11 then the installation can proceed.  \n\nFirstly, start a terminal in your \"Base\" Environment (click Environments, select Base, click the Play button, then select Open Terminal)\n\nIn the terminal, use these commands to downgrade Conda:\n\n```sh\nconda activate base\nconda config --set allow_conda_downgrades true\nconda install conda=4.6.11\n```\n\nVerify that Conda v4.6.11 is in use:\n\n```sh\nconda --version\n```\n\nIf conda 4.6.11 is shown then you are good to continue.  Make sure you shut down this terminal so that you don't accidentally install into the 'base' enviornment and proceed with the Zipline installation.\n\n# Zipline 1.3.0 Benchmark Patch to resolve backtest failure \n\nStrangely, by default, Zipline attempts to obtain benchmark data for for the symbol SPY from IEX (even if you define another symbol as the benchmark).  The public IEX API was retired in June 2019 so this causes all backtests to fail.\n\nThis will show this lovely error JSONDecodeError message similar to the following:\n```\n[2019-09-02 00:38:53.586933] INFO: Loader: Downloading benchmark data for 'SPY' from 1989-12-29 00:00:00+00:00 to 2019-08-30 00:00:00+00:00\nTraceback (most recent call last): \n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\Scripts\\zipline-script.py\", line 11, in <module>\n    load_entry_point('zipline==1.3.0+383.g069e97b2', 'console_scripts', 'zipline')()\n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\lib\\site-packages\\click\\core.py\", line 722, in __call__\n    return self.main(*args, **kwargs)\n...\n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\lib\\json\\decoder.py\", line 357, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n```\n\nA workaround is to simply return a benchmark that shows no return.  To do this you'll need to edit your Zipline libraries as follows:\n\n* Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )\n* Then navigate to Lib\\site-packages\\zipline\\data  (i.e. full path for an enviornment named zip35 would be \"C:\\Users\\<your username>\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\data\")\n* Edit the file benchmarks.py and replace all of the contents with the following:\n\n```py\nimport pandas as pd\nfrom trading_calendars import get_calendar\n\n# Modified to avoid downloading data from obsolete IEX interface\ndef get_benchmark_returns(symbol):\n    cal = get_calendar('NYSE')\n    first_date = pd.Timestamp('1896-01-01', tz='utc')\n    last_date = pd.Timestamp.today(tz='utc')\n    dates = cal.sessions_in_range(first_date, last_date)\n    data = pd.DataFrame(0.0, index=dates, columns=['close'])\n    data = data['close']\n    return data.sort_index().iloc[1:]\n\n```\n\n* Edit the file loader.py\n* search for the method ensure_benchmark_data, and comment out the following four lines as shown (around line 200):\n\n```py\n    #data = _load_cached_data(filename, first_date, last_date, now, 'benchmark',\n    #                         environ)\n    #if data is not None:\n    #    return data\n```\n\nThanks to Andreas Clenow for this workaround, found here: https://github.com/quantopian/zipline/issues/2480\n\n# Zipline 1.3.0 Patch to resolve KeyError on Continuous Futures backtesting\n\nThis bug shows as the following crypic error messgae:\n```\nKeyError: <class 'zipline.assets.continuous_futures.ContinuousFutures'>\n```\n\nPart 1:  Bug fix for DataPortal\n\nIf you want to create continuous futures, you'll need to fix Zipline for a bug in the DataPortal code.  Effectively what has been left out of the Zipline source code is the ability to read futures data.  We could either fake our futures data to look like Equities data, or do this simple patch.\n\nYou'll need to edit your Zipline package library as follows:\n\n* Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )\n* Then navigate to Lib\\site-packages\\zipline\\utils  (i.e. full path for an enviornment named zip35 would be \"C:\\Users\\<your username>\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\utils\")\n* Edit the file run_algo.py and find the following lines (around line 141):\n\n```py\n        data = DataPortal(\n            env.asset_finder,\n            trading_calendar=trading_calendar,\n            first_trading_day=first_trading_day,\n            equity_minute_reader=bundle_data.equity_minute_bar_reader,\n            equity_daily_reader=bundle_data.equity_daily_bar_reader,\n            adjustment_reader=bundle_data.adjustment_reader,\n```\n\nAdd the following two lines to the end of this argument list:\n```py\n            future_minute_reader=bundle_data.equity_minute_bar_reader,\n            future_daily_reader=bundle_data.equity_daily_bar_reader,\n```\n\nThe entire section of code should now read as follows:\n```py\n        data = DataPortal(\n            env.asset_finder,\n            trading_calendar=trading_calendar,\n            first_trading_day=first_trading_day,\n            equity_minute_reader=bundle_data.equity_minute_bar_reader,\n            equity_daily_reader=bundle_data.equity_daily_bar_reader,\n            adjustment_reader=bundle_data.adjustment_reader,\n            future_minute_reader=bundle_data.equity_minute_bar_reader,\n            future_daily_reader=bundle_data.equity_daily_bar_reader,\n            )\n```\n\nPart 2:  Workaround for markets without defined volatility\n\nBy default, Zipline has defined constants for volatility that are used for slippage modelling.  If you attempt to test on a market that is not defined in the constants.py file, you will get a KeyError like this:\n\nThis bug shows as the following crypic error messgae:\n```\nKeyError: 'KC'\n```\n\nThis patch will give any market without an explicitly defined volatility a default volatility.\n\n* Edit finance/slippage.py\n* At around line 27, find the following:\n\n```py\nfrom zipline.finance.constants import ROOT_SYMBOL_TO_ETA\n```\n\nChange this to:\n\n```py\nfrom zipline.finance.constants import ROOT_SYMBOL_TO_ETA, DEFAULT_ETA\n```\n\n* At around line 510, within get_simulated_impact, find:\n\n```py\n        eta = self._eta[order.asset.root_symbol]\n```\n\nchange this to:\n\n```py\n        try:\n            eta = self._eta[order.asset.root_symbol]\n        except:\n            eta = DEFAULT_ETA\n```\n\n# Jupyter reports no module named win32api\n\nInstall/reinstall pywin32\n\n```\nconda install pywin32\n```\n\n\n# Backtesting prior to in-built Zipline/trading-calendar limits\n\nZipline will only backtest according to the calendar within the trading_calendars package.  With some easy patches you can extend backtesting for US stocks from 1990 to 1970 and Futures from 2000 to 1970.\n\n1970 is the limit though.  It is not possible to extend prior to this  Most likely there's an underlying limitation to the Unix Epoch (1970-01-01 00:00:00).\n\nFirstly, we need extend internal benchmarking code to handle dates prior to 1980:\n* Navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )\n* Then navigate to Lib\\site-packages\\zipline\\data  (i.e. full path for an enviornment named zip35 would be \"C:\\Users\\<your username>\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\data\")\n* Edit the file treasuries.py and find the following lines (around line 58):\n```py\n    return pd.Timestamp('1980', tz='UTC')\n```\n\nchange this to:\n```py\n    return pd.Timestamp('1970', tz='UTC')\n```\n\nTo extend backtestng prior to 1970 for US stocks:\n* Navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )\n* Then navigate to Lib\\site-packages\\trading_calendars  (i.e. full path for an enviornment named zip35 would be \"C:\\Users\\<your username>\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\trading_calendars\")\n* Edit the file trading_calendar.py and find the following lines (around line 45):\n```py\nstart_default = pd.Timestamp('1990-01-01', tz=UTC)\n```\n\nchange this to:\n```py\nstart_default = pd.Timestamp('1970-01-01', tz=UTC)\n```\n\nTo extend backtestng prior to 2000 for futures:\n* Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )\n* Then navigate to Lib\\site-packages\\trading_calendars  (i.e. full path for an enviornment named zip35 would be \"C:\\Users\\<your username>\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\trading_calendars\")\n* Edit the file us_futures_calendar.py and find the following lines (around line 49):\n```py\n                 start=Timestamp('2000-01-01', tz=UTC),\n```\n\nchange this to:\n```py\n                 start=Timestamp('1970-01-01', tz=UTC),\n```\n\nNote:  This section is a work-in-progress.  There are additional trading holidays that need to be included.  Norgate Data will be submitting a pull request for such changes to the trading_calendar package.  In the meantime, if you want accurate holidays for NYSE (US Stocks), or ASX (Australian Stocks) contact Norgate data.  We'd be happy to email the trading calendar files.\n\n# Testing on ASX data\n\nBy default, run_algorithm uses the 'NYSE' trading calendar.  To backtest other markets, you need to specify the calendar.\n\nAt the top of your algorithm:\n```py\nfrom trading_calendars import get_calendar\n```\n\nIn the run_algorithm call, add a trading_calendar= line, for example:\n\n```py\nresults = run_algorithm(\n    start=start, end=end, \n    initialize=initialize, analyze=analyze, \n    handle_data=handle_data, \n    capital_base=10000, \n    trading_calendar=get_calendar('XASX'),\n    data_frequency = 'daily', \n    bundle='norgatedata-spasx200',\n)\n```\n\nASX users will need an updated ASX trading calendar too.\n\nThis can be upgraded by conda.\n\n```\nconda upgrade trading-calendars -c Quantopian\n```\n\n# Books/publications that use Zipline, adapted for Norgate Data use\n\nWe have adapted the Python code in the following books to use Norgate Data.  \n\n* [Trading Evoled:  Anyone can Build Killer Trading Strategies in Python](https://www.followingthetrend.com/trading-evolved/).  Source code in Jupyter notebook format here: http://norgatedata.com/book-examples/trading-evolved/NorgateDataTradingEvolvedExamples.zip\n\nIf there are other book/publications worthwhile considering, let us know.\n\n\n# Support\n\nFor support on Norgate Data or usage of the zipline-norgatedata extension:\n[Norgate Data support](https://norgatedata.com/contact.php)\n\nPlease put separate issues in separate emails, as this ensures each issue is separately ticketed and tracked.\n\nFor Zipline coding/usage issues, join the [Zipline Google Group](https://groups.google.com/forum/#!forum/zipline).  For bug reports on Zipline, report them on [Zipline Github](https://github.com/quantopian/zipline/issues)\n\n# Thanks\n\nThanks to:\n\n* [Andreas Clenow](https://www.followingthetrend.com) for his pioneering work in documenting Zipline bundles in his latest book [Trading Evolved: Anyone can Build Killer Trading Strategies in Python](https://www.followingthetrend.com/trading-evolved/).  We used many of the techniques described in the book to build our bundle code.\n* Norgate Data alpha and beta testers.  Without your persistence we wouldn't have implemented half of the features.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://norgatedata.com", "keywords": "", "license": "EULA", "maintainer": "", "maintainer_email": "", "name": "zipline-norgatedata", "package_url": "https://pypi.org/project/zipline-norgatedata/", "platform": "", "project_url": "https://pypi.org/project/zipline-norgatedata/", "project_urls": {"Homepage": "https://norgatedata.com"}, "release_url": "https://pypi.org/project/zipline-norgatedata/1.1.37/", "requires_dist": ["zipline", "pandas", "norgatedata", "numpy", "logbook"], "requires_python": ">=3.5.0,<3.6", "summary": "Zipline extension to provide bundles of data from Norgate Data into the Zipline algorithmic trading library for the Python programming language", "version": "1.1.37", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e9f89831be77d42c9321db5acded458f12dcffb/68747470733a2f2f6e6f7267617465646174612e636f6d2f6173736574732f696d616765732f6e6f72676174652d646174612d6c6f676f2d343030783138382e737667\"> <img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65d11a63d1f42dfb2ac4f6cdaee6e4ecd2366f2b/68747470733a2f2f6d656469612e7175616e746f7069616e2e636f6d2f6c6f676f732f6f70656e5f736f757263652f7a69706c696e652d6c6f676f2d30335f2e706e67\"></p>\n<p>Integrates financial market data provided by <a href=\"https://norgatedata.com/\" rel=\"nofollow\">Norgate Data</a> with <a href=\"https://zipline.io/\" rel=\"nofollow\">Zipline</a>, a Pythonic algorithmic trading library for backtesting.</p>\n<p>Key features of this extension</p>\n<ul>\n<li>Simple bundle creation</li>\n<li>Survivorship bias-free bundles</li>\n<li>Incorporates time series data such as historical index membership and dividend yield into Zipline's Pipeline mechanism</li>\n<li>No modifications to the Zipline code base (except to fix problems with installation and obsolete calls that crash Zipline)</li>\n</ul>\n<h1>Installation</h1>\n<pre>pip install zipline-norgatedata\n</pre>\n<h1>Upgrades</h1>\n<p>To receive upgrades/updates</p>\n<pre>pip install zipline-norgatedata --upgrade\n</pre>\n<h1>Requirements</h1>\n<ul>\n<li>Zipline 1.3</li>\n<li>Python 3.5 only (this is a limitation of Zipline)</li>\n<li>Microsoft Windows</li>\n<li>An active <a href=\"https://norgatedata.com/\" rel=\"nofollow\">Norgate Data</a> subscription</li>\n<li>Writable local user folder named .norgatedata (or defined in environment variable NORGATEDATA_ROOT) - defaults to C:\\Users\\Your username\\.norgatedata</li>\n<li>Python packages: Pandas, Numpy, Logbook</li>\n</ul>\n<h1>Assumptions</h1>\n<ul>\n<li>Stocks are automatically set an auto_close_date of the last quoted date</li>\n<li>Futures are automatically set an auto_close_date to the earlier of following: Last trading date (for cash settled futures, and physically delivered futures that only allow delivery after the last trading date), or 1 trading day prior to first notice date for futures that have a first notice date prior to the last trading date.</li>\n</ul>\n<h1>Bundle Creation</h1>\n<p>Navigate to your Zipline local settings folder.  This is typically located at <strong>c:\\users\\&lt;your username&gt;\\.zipline</strong></p>\n<p>Add the following lines at the top of your Zipline local settings file - extension.py:\n<strong>Note:  This is <em>NOT</em> the extension.py file inside the Anaconda3\\envs\\&lt;your environment&gt;\\lib\\site-packages\\zipline</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">norgatedata</span> <span class=\"kn\">import</span> <span class=\"n\">StockPriceAdjustmentType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zipline_norgatedata</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">,</span>\n    <span class=\"n\">register_norgatedata_futures_bundle</span> <span class=\"p\">)</span>\n</pre>\n<p>Then create as many bundles definitions as you desire.  These bundles will use either a given symbol list, one or more watchlists from your Norgate Data Watchlist Library and (for futures markets) all contracts belonging to a given set of <a href=\"https://norgatedata.com/data-content-tables.php#futures\" rel=\"nofollow\">futures market session symbols</a>.</p>\n<p>Here are some examples with varying parameters.  You should adapt these to your requirements.</p>\n<p>register_norgatedata_equities_bundle has the following default parameters:\nstock_price_adjustment_setting = StockPriceAdjustmentType.TOTALRETURN,\nend_session = 'now',\ncalendar_name = 'NYSE',</p>\n<p>register_norgatedata_futures_bundle has the following default parameters:\nend_session = 'now',\ncalendar_name = 'us_futures'</p>\n<pre><span class=\"c1\"># EQUITIES BUNDLES</span>\n\n<span class=\"c1\"># Single stock bundle - AAPL from 1990 though 2018</span>\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-aapl'</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'AAPL'</span><span class=\"p\">],</span> \n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span><span class=\"p\">,</span>\n    <span class=\"n\">end_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2018-12-31'</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># FANG stocks (Facebook, Amazon, Netflix, Google) - 2012-05-18 until now</span>\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-fang'</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'FB'</span><span class=\"p\">,</span><span class=\"s1\">'AMZN'</span><span class=\"p\">,</span><span class=\"s1\">'NFLX'</span><span class=\"p\">,</span><span class=\"s1\">'GOOGL'</span><span class=\"p\">],</span> \n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2012-05-18'</span><span class=\"p\">,</span>  <span class=\"c1\"># This is that FB first traded</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># A small set of selected ETFs</span>\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-selected-etfs'</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'SPY'</span><span class=\"p\">,</span><span class=\"s1\">'GLD'</span><span class=\"p\">,</span><span class=\"s1\">'USO'</span><span class=\"p\">],</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2006-04-10'</span><span class=\"p\">,</span> <span class=\"c1\"># This is the USO first trading date</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># S&amp;P 500 Bundle for backtesting including all current &amp; past constituents back to 1990</span>\n<span class=\"c1\"># and the S&amp;P 500 Total Return index (useful for benchmarking and/or index trend filtering)</span>\n<span class=\"c1\"># (around 1800 securities)</span>\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-sp500'</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'$SPXTR'</span><span class=\"p\">],</span>\n    <span class=\"n\">watchlists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'S&amp;P 500 Current &amp; Past'</span><span class=\"p\">],</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Russell 3000 bundle containing all ccurrent &amp; past constituents back to 1990</span>\n<span class=\"c1\"># and the Russell 3000 Total Return Index (useful for benchmarking and/or index trend filtering)</span>\n<span class=\"c1\"># (about 11000 securities)</span>\n\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-russell3000'</span><span class=\"p\">,</span>\n    <span class=\"n\">watchlists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Russell 3000 Current &amp; Past'</span><span class=\"p\">],</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'$RUATR'</span><span class=\"p\">],</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span> <span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># FUTURES BUNDLES</span>\n\n<span class=\"c1\"># Example bundle for all of the individual contracts from three futures markets:</span>\n<span class=\"c1\"># E-mini S&amp;P 500, E-mini Nasdaq 100, E-mini Russell 2000</span>\n<span class=\"n\">register_norgatedata_futures_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-selected-index-futures'</span><span class=\"p\">,</span>\n    <span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ES'</span><span class=\"p\">,</span><span class=\"s1\">'NQ'</span><span class=\"p\">,</span><span class=\"s1\">'RTY'</span><span class=\"p\">],</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Same as above, but also adds the S&amp;P 500 Total Return index ($SPXTR) for reference</span>\n<span class=\"n\">register_norgatedata_futures_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-selected-index-futures-and-index'</span><span class=\"p\">,</span>\n    <span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ES'</span><span class=\"p\">,</span><span class=\"s1\">'NQ'</span><span class=\"p\">,</span><span class=\"s1\">'RTY'</span><span class=\"p\">],</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'$SPXTR'</span><span class=\"p\">]</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Bundle of futures used in Andreas Clenow's Trading Evolved book</span>\n<span class=\"c1\"># (contains 6000+ individual futures contracts/deliveries)</span>\n<span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-tradingevolved-futures'</span>\n<span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"s1\">'6A'</span><span class=\"p\">,</span> <span class=\"c1\"># AUD</span>\n\t<span class=\"s1\">'6B'</span><span class=\"p\">,</span> <span class=\"c1\"># GBP</span>\n\t<span class=\"s1\">'6C'</span><span class=\"p\">,</span> <span class=\"c1\"># CAD</span>\n\t<span class=\"s1\">'6E'</span><span class=\"p\">,</span> <span class=\"c1\"># EUR</span>\n\t<span class=\"s1\">'DX'</span><span class=\"p\">,</span> <span class=\"c1\"># USDX</span>\n\t<span class=\"s1\">'6J'</span><span class=\"p\">,</span> <span class=\"c1\"># JPY</span>\n\t<span class=\"s1\">'6N'</span><span class=\"p\">,</span> <span class=\"c1\"># NZD</span>\n\t<span class=\"s1\">'6S'</span><span class=\"p\">,</span> <span class=\"c1\"># CHF</span>\n\t<span class=\"s1\">'LBS'</span><span class=\"p\">,</span> <span class=\"c1\"># Lumber</span>\n\t<span class=\"s1\">'ZC'</span><span class=\"p\">,</span> <span class=\"c1\"># Corn</span>\n\t<span class=\"s1\">'CT'</span><span class=\"p\">,</span> <span class=\"c1\"># Cotton</span>\n\t<span class=\"s1\">'GF'</span><span class=\"p\">,</span> <span class=\"c1\"># Feeder Cattle</span>\n\t<span class=\"s1\">'KC'</span><span class=\"p\">,</span> <span class=\"c1\"># Coffee</span>\n\t<span class=\"s1\">'LRC'</span><span class=\"p\">,</span> <span class=\"c1\"># Robusta Coffee</span>\n\t<span class=\"s1\">'LSU'</span><span class=\"p\">,</span> <span class=\"c1\"># White Sugar</span>\n\t<span class=\"s1\">'ZO'</span><span class=\"p\">,</span> <span class=\"c1\"># Oats</span>\n\t<span class=\"s1\">'ZS'</span><span class=\"p\">,</span> <span class=\"c1\"># Soybeans</span>\n\t<span class=\"s1\">'SB'</span><span class=\"p\">,</span> <span class=\"c1\"># Sugar</span>\n\t<span class=\"s1\">'ZM'</span><span class=\"p\">,</span> <span class=\"c1\"># Soybean Meal</span>\n\t<span class=\"s1\">'ZW'</span><span class=\"p\">,</span> <span class=\"c1\"># Wheat</span>\n\t<span class=\"s1\">'CL'</span><span class=\"p\">,</span> <span class=\"c1\"># Crude Oil</span>\n\t<span class=\"s1\">'GC'</span><span class=\"p\">,</span> <span class=\"c1\"># Gold</span>\n\t<span class=\"s1\">'HG'</span><span class=\"p\">,</span> <span class=\"c1\"># Copper</span>\n\t<span class=\"s1\">'HO'</span><span class=\"p\">,</span> <span class=\"c1\"># NY Harbor ULSD </span>\n\t<span class=\"s1\">'GAS'</span><span class=\"p\">,</span> <span class=\"c1\"># Gas Oil</span>\n\t<span class=\"s1\">'NG'</span><span class=\"p\">,</span> <span class=\"c1\"># Henry Hub Natural Gas</span>\n\t<span class=\"s1\">'PA'</span><span class=\"p\">,</span> <span class=\"c1\"># Palladium</span>\n\t<span class=\"s1\">'PL'</span><span class=\"p\">,</span> <span class=\"c1\"># Platinum</span>\n\t<span class=\"s1\">'RB'</span><span class=\"p\">,</span> <span class=\"c1\"># RBOB Gasoline</span>\n\t<span class=\"s1\">'SI'</span><span class=\"p\">,</span> <span class=\"c1\"># Silver</span>\n\t<span class=\"s1\">'ES'</span><span class=\"p\">,</span> <span class=\"c1\"># E-mini S&amp;P 500</span>\n\t<span class=\"s1\">'NKD'</span><span class=\"p\">,</span> <span class=\"c1\"># Nikkei 225 Dollar</span>\n\t<span class=\"s1\">'NQ'</span><span class=\"p\">,</span> <span class=\"c1\"># E-mini Nasdaq-100</span>\n\t<span class=\"s1\">'STW'</span><span class=\"p\">,</span> <span class=\"c1\"># MSCI Taiwan </span>\n\t<span class=\"s1\">'VX'</span><span class=\"p\">,</span> <span class=\"c1\"># Cboe Volatility Index</span>\n\t<span class=\"s1\">'YM'</span><span class=\"p\">,</span> <span class=\"c1\"># E-mini Dow</span>\n\t<span class=\"s1\">'GE'</span><span class=\"p\">,</span> <span class=\"c1\"># Eurodollar</span>\n\t<span class=\"s1\">'ZF'</span><span class=\"p\">,</span> <span class=\"c1\"># 5-Year US T-Note</span>\n\t<span class=\"s1\">'ZT'</span><span class=\"p\">,</span> <span class=\"c1\"># 2-Year US T-Note</span>\n\t<span class=\"s1\">'ZN'</span><span class=\"p\">,</span> <span class=\"c1\"># 10-Year US T-Note</span>\n\t<span class=\"s1\">'ZB'</span><span class=\"p\">,</span> <span class=\"c1\"># 30-Year US T-Bond        </span>\n<span class=\"p\">]</span>\n<span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span><span class=\"p\">,</span>\n\n<span class=\"n\">register_norgatedata_futures_bundle</span><span class=\"p\">(</span><span class=\"n\">bundlename</span><span class=\"p\">,</span><span class=\"n\">start_session</span><span class=\"p\">,</span><span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"n\">session_symbols</span> <span class=\"p\">)</span>\n</pre>\n<p>To ingest a bundle:</p>\n<pre>zipline ingest -b &lt;bundlename&gt;\n</pre>\n<h1>Pipelines - accessing timeseries data</h1>\n<p>Timeseries data has been exposed into Zipline's Pipeline interface.   During a backtest, the Pipelines will be calculated against all securities in the bundle.</p>\n<p>The following Filter (i.e. boolean) pipelines are available:</p>\n<ul>\n<li><a href=\"https://norgatedata.com/data-content-tables.php#ushics\" rel=\"nofollow\">NorgateDataIndexConstituent</a></li>\n<li><a href=\"https://norgatedata.com/data-content-tables.php#usmajorexchangelisted\" rel=\"nofollow\">NorgateDataMajorExchangeListed</a></li>\n<li><a href=\"https://norgatedata.com/data-content-tables.php#capitalevent\" rel=\"nofollow\">NorgateDataCapitalEvent</a></li>\n<li><a href=\"https://norgatedata.com/data-content-tables.php#padding\" rel=\"nofollow\">NorgateDataPaddingStatus</a></li>\n</ul>\n<p>The following Factor (i.e. float) pipelines are available:</p>\n<ul>\n<li>NorgateDataUnadjustedClose</li>\n<li><a href=\"https://norgatedata.com/data-content-tables.php#dividendyield\" rel=\"nofollow\">NorgateDataDividendYield</a></li>\n</ul>\n<p>To incorporate these into your trading model, you need to import the relevant packages/methods:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zipline_norgatedata.pipelines</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">NorgateDataIndexConstituent</span><span class=\"p\">,</span> <span class=\"n\">NorgateDataDividendYield</span> <span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zipline.api</span> <span class=\"kn\">import</span> <span class=\"n\">order_target_percent</span>\n</pre>\n<p>It is recommended you put your pipeline construction in its own function:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">make_pipeline</span><span class=\"p\">():</span>\n   <span class=\"n\">indexconstituent</span> <span class=\"o\">=</span> <span class=\"n\">NorgateDataIndexConstituent</span><span class=\"p\">(</span><span class=\"s1\">'S&amp;P 1500'</span><span class=\"p\">)</span>\n   <span class=\"n\">divyield</span> <span class=\"o\">=</span> <span class=\"n\">NorgateDataDividendYield</span><span class=\"p\">()</span>\n   <span class=\"k\">return</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n       <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'NorgateDataIndexConstituent'</span><span class=\"p\">:</span><span class=\"n\">indexconstituent</span><span class=\"p\">,</span>\n            <span class=\"s1\">'NorgateDividendYield'</span><span class=\"p\">:</span><span class=\"n\">divyield</span> <span class=\"p\">},</span>\n       <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"n\">indexconstituent</span><span class=\"p\">)</span>\n</pre>\n<p>Incorporate this into your trading system by attaching it to your initialize method.  Note, for better efficiency, use chunks=9999 or however many bars you are likely to need.<br>\nThis will save unnecessary access to the Norgate Data database.</p>\n<pre> <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">attach_pipeline</span><span class=\"p\">(</span><span class=\"n\">make_pipeline</span><span class=\"p\">(),</span> <span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"mi\">9999</span><span class=\"p\">,</span><span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Now you can access the contents of the pipeline in before_trading_start and/or handle_data by using Zipline's pipline_output method.  You can exit positions not already in the</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">before_trading_start</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_output</span><span class=\"p\">(</span><span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... your code here ...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_output</span><span class=\"p\">(</span><span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">)</span>\n    <span class=\"n\">current_constituents</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n    <span class=\"c1\"># ... your code here ...</span>\n\n    <span class=\"c1\"># Exit positions not in the index today</span>\n    <span class=\"k\">for</span> <span class=\"n\">asset</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">portfolio</span><span class=\"o\">.</span><span class=\"n\">positions</span><span class=\"p\">:</span>   \n        <span class=\"k\">if</span> <span class=\"n\">asset</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">current_constituents</span><span class=\"p\">:</span>\n            <span class=\"n\">order_target_percent</span><span class=\"p\">(</span><span class=\"n\">asset</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ... your code here ...</span>\n</pre>\n<h1>Worked example backtesting S&amp;P 500 Constituents back to 1990</h1>\n<p>This example comprises a backtest on the S&amp;P 500, with a basic trend filter that is applied on the S&amp;P 500 index ($SPX).  The total return version of the index is also ingested ($SPXTR) for comparison purposes.</p>\n<p>Create a bundle definition in extensions.py as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline_norgatedata</span> <span class=\"kn\">import</span> <span class=\"n\">register_norgatedata_equities_bundle</span>\n\n<span class=\"n\">register_norgatedata_equities_bundle</span><span class=\"p\">(</span>\n    <span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-sp500-backtest'</span><span class=\"p\">,</span>\n    <span class=\"n\">symbol_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'$SPX'</span><span class=\"p\">,</span><span class=\"s1\">'$SPXTR'</span><span class=\"p\">],</span>\n    <span class=\"n\">watchlists</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'S&amp;P 500 Current &amp; Past'</span><span class=\"p\">],</span>\n    <span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'1990-01-01'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Now, ingest that bundle into zipline:</p>\n<pre>zipline ingest -b norgatedata-sp500-backtest\n</pre>\n<p>Inside your trading system file, you'd incorporate the following code snippets:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zipline_norgatedata.pipelines</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">NorgateDataIndexConstituent</span><span class=\"p\">,</span> \n    <span class=\"n\">NorgateDataDividendYield</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">indexconstituent</span> <span class=\"o\">=</span> <span class=\"n\">NorgateDataIndexConstituent</span><span class=\"p\">(</span><span class=\"s1\">'S&amp;P 500'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n        <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span>\n             <span class=\"s1\">'NorgateDataIndexConstituent'</span><span class=\"p\">:</span><span class=\"n\">indexconstituent</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"n\">indexconstituent</span><span class=\"p\">)</span>\n\n <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">attach_pipeline</span><span class=\"p\">(</span><span class=\"n\">make_pipeline</span><span class=\"p\">(),</span> <span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"mi\">9999</span><span class=\"p\">,</span><span class=\"n\">eager</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... your code here ...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">before_trading_start</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_output</span><span class=\"p\">(</span><span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... your code here ...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_output</span><span class=\"p\">(</span><span class=\"s1\">'norgatedata_pipeline'</span><span class=\"p\">)</span>\n    <span class=\"n\">current_constituents</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">pipeline_data</span><span class=\"o\">.</span><span class=\"n\">index</span>\n\n    <span class=\"c1\"># ... your code here ...</span>\n\n    <span class=\"c1\"># Exit positions not in the index today</span>\n    <span class=\"k\">for</span> <span class=\"n\">asset</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">portfolio</span><span class=\"o\">.</span><span class=\"n\">positions</span><span class=\"p\">:</span>   \n        <span class=\"k\">if</span> <span class=\"n\">asset</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">assets</span><span class=\"p\">:</span>\n            <span class=\"n\">order_target_percent</span><span class=\"p\">(</span><span class=\"n\">asset</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ...</span>\n</pre>\n<h1>Worked example backtesting E-Mini S&amp;P 500 futures</h1>\n<p>This example created a continuous contract of the E-Mini S&amp;P 500 futures that trade on CME on volume.</p>\n<p>Create a bundle definition in extensions.py as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline_norgatedata</span> <span class=\"kn\">import</span> <span class=\"n\">register_norgatedata_futures_bundle</span>\n\n<span class=\"n\">bundlename</span> <span class=\"o\">=</span> <span class=\"s1\">'norgatedata-es-futures'</span>\n<span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ES'</span><span class=\"p\">]</span>\n<span class=\"n\">start_session</span> <span class=\"o\">=</span> <span class=\"s1\">'2000-01-01'</span>\n<span class=\"n\">register_norgatedata_futures_bundle</span><span class=\"p\">(</span><span class=\"n\">bundlename</span><span class=\"p\">,</span><span class=\"n\">start_session</span><span class=\"p\">,</span><span class=\"n\">session_symbols</span> <span class=\"o\">=</span> <span class=\"n\">session_symbols</span> <span class=\"p\">)</span>\n</pre>\n<p>Now, ingest that bundle into zipline:</p>\n<pre>zipline ingest -b norgatedata-es-futures\n</pre>\n<p>Inside your trading system file, you'd incorporate the following code snippets:</p>\n<pre> <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># Obtain market(s)s directly from the bundle</span>\n    <span class=\"n\">af</span> <span class=\"o\">=</span>  <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">asset_finder</span>\n    <span class=\"n\">markets</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">([])</span> <span class=\"c1\"># a set eliminates dupes</span>\n    <span class=\"n\">allcontracts</span> <span class=\"o\">=</span> <span class=\"n\">af</span><span class=\"o\">.</span><span class=\"n\">retrieve_futures_contracts</span><span class=\"p\">(</span><span class=\"n\">af</span><span class=\"o\">.</span><span class=\"n\">sids</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">contract</span> <span class=\"ow\">in</span> <span class=\"n\">allcontracts</span><span class=\"p\">:</span>\n        <span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">allcontracts</span><span class=\"p\">[</span><span class=\"n\">contract</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">root_symbol</span><span class=\"p\">)</span>\n\n    <span class=\"n\">markets</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">markets</span><span class=\"p\">)</span>\n    <span class=\"n\">markets</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Make a list of all continuations</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">universe</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">continuous_future</span><span class=\"p\">(</span><span class=\"n\">market</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">roll</span><span class=\"o\">=</span><span class=\"s1\">'volume'</span><span class=\"p\">,</span> <span class=\"n\">adjustment</span><span class=\"o\">=</span><span class=\"s1\">'mul'</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">market</span> <span class=\"ow\">in</span> <span class=\"n\">markets</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># ... your code here ...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Get continuation data</span>\n    <span class=\"n\">hist</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">(</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">universe</span><span class=\"p\">,</span> \n        <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'close'</span><span class=\"p\">,</span><span class=\"s1\">'volume'</span><span class=\"p\">],</span> \n        <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"s1\">'1d'</span><span class=\"p\">,</span> \n        <span class=\"n\">bar_count</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span>  <span class=\"c1\"># Adjust to whatever lookback period you need</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Now use hist in your calculations </span>\n\n    <span class=\"c1\"># Make a dictionary of open positions, based on the root symbol</span>\n    <span class=\"n\">open_pos</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"n\">pos</span><span class=\"o\">.</span><span class=\"n\">root_symbol</span><span class=\"p\">:</span> <span class=\"n\">pos</span> \n        <span class=\"k\">for</span> <span class=\"n\">pos</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">portfolio</span><span class=\"o\">.</span><span class=\"n\">positions</span>\n    <span class=\"p\">}</span> \n\n    <span class=\"n\">contracts_to_trade</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">continuation</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">universe</span><span class=\"p\">:</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"n\">continuation</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">(</span><span class=\"n\">continuation</span><span class=\"p\">,</span> <span class=\"s1\">'contract'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n\n        <span class=\"c1\"># Entering a position:</span>\n        <span class=\"n\">order_target</span><span class=\"p\">(</span><span class=\"n\">contract</span><span class=\"p\">,</span>  <span class=\"n\">contracts_to_trade</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Existing a position</span>\n        <span class=\"n\">order_target</span><span class=\"p\">(</span><span class=\"n\">contract</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">contracts_to_trade</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Finally, if there are open positions check for rolls</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">open_pos</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>   \n        <span class=\"n\">roll_futures</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>           \n</pre>\n<h1>Metadata</h1>\n<p>The following fields are available in the metadata dataframe: start_date, end_date, ac_date, symbol, asset_name, exchange, exchange_full, asset_type, norgate_data_symbol, norgate_data_assetid.</p>\n<h1>Norgate Data Futures Market Session symbols</h1>\n<p>To obtain just the futures market sessions symbols, you can use the norgatedata package and adapt the following code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">norgatedata</span>\n<span class=\"k\">for</span> <span class=\"n\">session_symbol</span> <span class=\"ow\">in</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">futures_market_session_symbols</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">session_symbol</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">norgatedata</span><span class=\"o\">.</span><span class=\"n\">futures_market_session_name</span><span class=\"p\">(</span><span class=\"n\">session_symbol</span><span class=\"p\">))</span> \n</pre>\n<h1>Zipline Futures root symbols</h1>\n<p>To show the translated 2 character root symbols for each futures market session, and a description of each market you can run a tiny script (or adapt this):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zipline_norgatedata</span>\n<span class=\"n\">root_symbols_dict</span> <span class=\"o\">=</span> <span class=\"n\">zipline_norgatedata</span><span class=\"o\">.</span><span class=\"n\">zipline_futures_root_symbols_dict</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">root_symbols_dict</span><span class=\"p\">)</span>\n</pre>\n<h1>Zipline installation best practice</h1>\n<ul>\n<li>\n<p>Zipline can be difficult to install if you do it in the wrong order.  Here's how we did it:</p>\n<ol>\n<li>Install the <a href=\"https://www.anaconda.com/distribution/\" rel=\"nofollow\">Anaconda Distribution</a></li>\n<li>Downgrade Conda to v4.6.11 (see <em><strong>Zipline installation troubleshooting - Conda</strong></em> below).</li>\n<li>Start Ananconda and Create a fresh Python 3.5 environment (Click Environments, then click Create, give it a name such as zip35, select Python 3.5 and click Create)</li>\n<li>Run a terminal in the new environment, and use conda to install zipline\n<pre><code>conda install zipline -c Quantopian\n</code></pre>\nand any other packages you want such as jupyter,  matplotlib etc.\n<pre><code>conda install jupyter matplotlib\n</code></pre>\nNote, if you want Pyfolio (you probably will at some point), you should install this using Pip, as there is a very old version on Anaconda:\n<pre><code>pip install pyfolio\n</code></pre>\n</li>\n<li>Install norgatedata and  zipline-norgatedata using pip\n<pre><code>pip install norgatedata zipline-norgatedata\n</code></pre>\n</li>\n<li>Patch the zipline package (see <em><strong>Zipline 1.3.0 Benchmark Patch</strong></em> below) to resolve backtest failure) within your new environment</li>\n<li>Start a command prompt in your zipline environment you created, and simply run <code>zipline</code> to ensure that it work (this also creates the .zipline folder too)</li>\n<li>If you are backtesting futures data and create your own continuous futures from within your backtesting, you'll need to patch Zipline.  (see <em><strong>Zipline 1.3.0 Patches to resolve KeyError on Continuous Futures backtesting</strong></em>)</li>\n<li>If you want to backtest data prior to 1990 (Stocks) or 2000 (Futures) see <em><strong>Backtesting prior to in-built Zipline/trading-calendar limits</strong></em></li>\n</ol>\n</li>\n</ul>\n<h1>Zipline Limitations/Quirks</h1>\n<ul>\n<li>Zipline 1.3.0 is only compatible with Python 3.5.  Hopefully they'll update it one day....</li>\n<li>Zipline has not been not had an official release since v1.3.0 (July 2018).  For reasons unknown, even though many fixes and changes have been implemented to the source code, no release has been made.</li>\n<li>Zipline is hard-coded to handle equities data from 1990 onwards only</li>\n<li>Zipline is hard-coded handle futuress data from 2000 onwards.</li>\n<li>Zipline has unnecessarily complicated futures contracts by restricting symbols to 2 characters.  This is not a conventional followed by exchanges.  We hope they see the light and allow variable futures root symbol lengths (up to 5 characters).  In the meantime, you can get a list of futures market sessions covered and translated to their 2 character limit with: zipline_futures_root_symbols()</li>\n<li>Zipline doesn't define all futures markets and doesn't provide any runtime extensibility in this area - you will need to add them to &lt;your_environment&gt;\\lib\\site-packages\\zipline\\finance\\constants.py if they are not defined.  Be sure to backup this file as it will be overwritten any time you update zipline.</li>\n<li>Zipline assumes that there are bars for every day of trading.  If a security doesn't trade for a given day (e.g. it was halted/suspended, or simply nobody wanted to trade it), it will be padded with the previous close repeated in the OHLC fields, with volume set to zero.  Consider how this might affect your trading calculations.</li>\n<li>Index volumes cannot be accurately ingested due to Zipline trying to convert large volumes to UINTs which are out-of-bounds for UINT32.  Index volumes will be divided by 1000.\nAny stock whose adjusted volume exceeds the bounds of UINT32 will be set to the maximum UINT32 value (4294967295).  This only occurs for stocks with a lot of splis and/or very large special dsitributions.</li>\n<li>Suprisingly, Zipline benchmarks do not work from securities ingested into your bundle.   Rather, the benchmark uses hardcoded logic that attempts to download the security SPY from an IEX API (which is now retired).  See the \"Zipline 1.3.0 Benchmark patch\" below to fix/bypass this issue.</li>\n<li>Ingestion times could be improved significantly with multiprocessing (this requires Zipline enhancements)</li>\n</ul>\n<p>If you are brave you could try with the latest Zipline source code (make sure you install the release version first, to solve dependencies):</p>\n<pre><code>conda install -c quantopian/label/ci zipline\n</code></pre>\n<p>Note:  You'll need to re-ingest any previously ingested bundles, as the underlying database schema used in Zipline is different.</p>\n<h1>Zipline installation troubleshooting - Conda</h1>\n<p>When using Conda to install zipline, it spits out a lot of unsatisfiable package conflicts in a horribly complex error message</p>\n<pre><code>(zip35) C:\\Users\\Richard&gt;conda install -c quantopian zipline\nCollecting package metadata (current_repodata.json): done\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\nSolving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\nCollecting package metadata (repodata.json): done\nSolving environment: failed with initial frozen solve. Retrying with flexible solve.\nSolving environment: \\\nFound conflicts! Looking for incompatible packages.\nThis can take several minutes.  Press CTRL-C to abort.\nExamining html5lib:   0%|                                                                                   | 0/33 [00:00&lt;?, ?it/s]|failed\n\nUnsatisfiableError: The following specifications were found to be incompatible with each other:\n\nPackage markupsafe conflicts for:\nzipline -&gt; markupsafe[version='&gt;=0.23']\nPackage typing conflicts for:\nzipline -&gt; typing[version='&gt;=3.6.2']\n...\nPackage patsy conflicts for:\nzipline -&gt; patsy[version='&gt;=0.4.0']\nPackage numpy conflicts for:\nzipline -&gt; numpy[version='&gt;=1.11,&lt;1.12.0a0|&gt;=1.14,&lt;1.15.0a0']\nPackage certifi conflicts for:\nzipline -&gt; certifi[version='&gt;=2018.8.24']\n</code></pre>\n<p>This really makes no sense as the Conda environment is supposed to figure out all of these conflicts.</p>\n<p>This error started around Aug 2019 onwards when Conda v4.7 was released and is still a problem with Conda v4.7.12 as at 14 Nov 2019)</p>\n<p>Until the Zipline devs figure out what is happening here, we've found that by downgrading to Conda v4.6.11 then the installation can proceed.</p>\n<p>Firstly, start a terminal in your \"Base\" Environment (click Environments, select Base, click the Play button, then select Open Terminal)</p>\n<p>In the terminal, use these commands to downgrade Conda:</p>\n<pre>conda activate base\nconda config --set allow_conda_downgrades <span class=\"nb\">true</span>\nconda install <span class=\"nv\">conda</span><span class=\"o\">=</span><span class=\"m\">4</span>.6.11\n</pre>\n<p>Verify that Conda v4.6.11 is in use:</p>\n<pre>conda --version\n</pre>\n<p>If conda 4.6.11 is shown then you are good to continue.  Make sure you shut down this terminal so that you don't accidentally install into the 'base' enviornment and proceed with the Zipline installation.</p>\n<h1>Zipline 1.3.0 Benchmark Patch to resolve backtest failure</h1>\n<p>Strangely, by default, Zipline attempts to obtain benchmark data for for the symbol SPY from IEX (even if you define another symbol as the benchmark).  The public IEX API was retired in June 2019 so this causes all backtests to fail.</p>\n<p>This will show this lovely error JSONDecodeError message similar to the following:</p>\n<pre><code>[2019-09-02 00:38:53.586933] INFO: Loader: Downloading benchmark data for 'SPY' from 1989-12-29 00:00:00+00:00 to 2019-08-30 00:00:00+00:00\nTraceback (most recent call last): \n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\Scripts\\zipline-script.py\", line 11, in &lt;module&gt;\n    load_entry_point('zipline==1.3.0+383.g069e97b2', 'console_scripts', 'zipline')()\n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\lib\\site-packages\\click\\core.py\", line 722, in __call__\n    return self.main(*args, **kwargs)\n...\n  File \"C:\\Users\\pyuser\\Anaconda3\\envs\\zip35\\lib\\json\\decoder.py\", line 357, in raw_decode\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n</code></pre>\n<p>A workaround is to simply return a benchmark that shows no return.  To do this you'll need to edit your Zipline libraries as follows:</p>\n<ul>\n<li>Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )</li>\n<li>Then navigate to Lib\\site-packages\\zipline\\data  (i.e. full path for an enviornment named zip35 would be \"C:\\Users&lt;your username&gt;\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\data\")</li>\n<li>Edit the file benchmarks.py and replace all of the contents with the following:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">trading_calendars</span> <span class=\"kn\">import</span> <span class=\"n\">get_calendar</span>\n\n<span class=\"c1\"># Modified to avoid downloading data from obsolete IEX interface</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_benchmark_returns</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">):</span>\n    <span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">get_calendar</span><span class=\"p\">(</span><span class=\"s1\">'NYSE'</span><span class=\"p\">)</span>\n    <span class=\"n\">first_date</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1896-01-01'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'utc'</span><span class=\"p\">)</span>\n    <span class=\"n\">last_date</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'utc'</span><span class=\"p\">)</span>\n    <span class=\"n\">dates</span> <span class=\"o\">=</span> <span class=\"n\">cal</span><span class=\"o\">.</span><span class=\"n\">sessions_in_range</span><span class=\"p\">(</span><span class=\"n\">first_date</span><span class=\"p\">,</span> <span class=\"n\">last_date</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">dates</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'close'</span><span class=\"p\">])</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'close'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n</pre>\n<ul>\n<li>Edit the file loader.py</li>\n<li>search for the method ensure_benchmark_data, and comment out the following four lines as shown (around line 200):</li>\n</ul>\n<pre>    <span class=\"c1\">#data = _load_cached_data(filename, first_date, last_date, now, 'benchmark',</span>\n    <span class=\"c1\">#                         environ)</span>\n    <span class=\"c1\">#if data is not None:</span>\n    <span class=\"c1\">#    return data</span>\n</pre>\n<p>Thanks to Andreas Clenow for this workaround, found here: <a href=\"https://github.com/quantopian/zipline/issues/2480\" rel=\"nofollow\">https://github.com/quantopian/zipline/issues/2480</a></p>\n<h1>Zipline 1.3.0 Patch to resolve KeyError on Continuous Futures backtesting</h1>\n<p>This bug shows as the following crypic error messgae:</p>\n<pre><code>KeyError: &lt;class 'zipline.assets.continuous_futures.ContinuousFutures'&gt;\n</code></pre>\n<p>Part 1:  Bug fix for DataPortal</p>\n<p>If you want to create continuous futures, you'll need to fix Zipline for a bug in the DataPortal code.  Effectively what has been left out of the Zipline source code is the ability to read futures data.  We could either fake our futures data to look like Equities data, or do this simple patch.</p>\n<p>You'll need to edit your Zipline package library as follows:</p>\n<ul>\n<li>Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )</li>\n<li>Then navigate to Lib\\site-packages\\zipline\\utils  (i.e. full path for an enviornment named zip35 would be \"C:\\Users&lt;your username&gt;\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\utils\")</li>\n<li>Edit the file run_algo.py and find the following lines (around line 141):</li>\n</ul>\n<pre>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DataPortal</span><span class=\"p\">(</span>\n            <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">asset_finder</span><span class=\"p\">,</span>\n            <span class=\"n\">trading_calendar</span><span class=\"o\">=</span><span class=\"n\">trading_calendar</span><span class=\"p\">,</span>\n            <span class=\"n\">first_trading_day</span><span class=\"o\">=</span><span class=\"n\">first_trading_day</span><span class=\"p\">,</span>\n            <span class=\"n\">equity_minute_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_minute_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">equity_daily_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_daily_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">adjustment_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">adjustment_reader</span><span class=\"p\">,</span>\n</pre>\n<p>Add the following two lines to the end of this argument list:</p>\n<pre>            <span class=\"n\">future_minute_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_minute_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">future_daily_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_daily_bar_reader</span><span class=\"p\">,</span>\n</pre>\n<p>The entire section of code should now read as follows:</p>\n<pre>        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">DataPortal</span><span class=\"p\">(</span>\n            <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">asset_finder</span><span class=\"p\">,</span>\n            <span class=\"n\">trading_calendar</span><span class=\"o\">=</span><span class=\"n\">trading_calendar</span><span class=\"p\">,</span>\n            <span class=\"n\">first_trading_day</span><span class=\"o\">=</span><span class=\"n\">first_trading_day</span><span class=\"p\">,</span>\n            <span class=\"n\">equity_minute_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_minute_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">equity_daily_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_daily_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">adjustment_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">adjustment_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">future_minute_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_minute_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"n\">future_daily_reader</span><span class=\"o\">=</span><span class=\"n\">bundle_data</span><span class=\"o\">.</span><span class=\"n\">equity_daily_bar_reader</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n</pre>\n<p>Part 2:  Workaround for markets without defined volatility</p>\n<p>By default, Zipline has defined constants for volatility that are used for slippage modelling.  If you attempt to test on a market that is not defined in the constants.py file, you will get a KeyError like this:</p>\n<p>This bug shows as the following crypic error messgae:</p>\n<pre><code>KeyError: 'KC'\n</code></pre>\n<p>This patch will give any market without an explicitly defined volatility a default volatility.</p>\n<ul>\n<li>Edit finance/slippage.py</li>\n<li>At around line 27, find the following:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline.finance.constants</span> <span class=\"kn\">import</span> <span class=\"n\">ROOT_SYMBOL_TO_ETA</span>\n</pre>\n<p>Change this to:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zipline.finance.constants</span> <span class=\"kn\">import</span> <span class=\"n\">ROOT_SYMBOL_TO_ETA</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_ETA</span>\n</pre>\n<ul>\n<li>At around line 510, within get_simulated_impact, find:</li>\n</ul>\n<pre>        <span class=\"n\">eta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_eta</span><span class=\"p\">[</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">root_symbol</span><span class=\"p\">]</span>\n</pre>\n<p>change this to:</p>\n<pre>        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">eta</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_eta</span><span class=\"p\">[</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">asset</span><span class=\"o\">.</span><span class=\"n\">root_symbol</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span><span class=\"p\">:</span>\n            <span class=\"n\">eta</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_ETA</span>\n</pre>\n<h1>Jupyter reports no module named win32api</h1>\n<p>Install/reinstall pywin32</p>\n<pre><code>conda install pywin32\n</code></pre>\n<h1>Backtesting prior to in-built Zipline/trading-calendar limits</h1>\n<p>Zipline will only backtest according to the calendar within the trading_calendars package.  With some easy patches you can extend backtesting for US stocks from 1990 to 1970 and Futures from 2000 to 1970.</p>\n<p>1970 is the limit though.  It is not possible to extend prior to this  Most likely there's an underlying limitation to the Unix Epoch (1970-01-01 00:00:00).</p>\n<p>Firstly, we need extend internal benchmarking code to handle dates prior to 1980:</p>\n<ul>\n<li>Navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )</li>\n<li>Then navigate to Lib\\site-packages\\zipline\\data  (i.e. full path for an enviornment named zip35 would be \"C:\\Users&lt;your username&gt;\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\zipline\\data\")</li>\n<li>Edit the file treasuries.py and find the following lines (around line 58):</li>\n</ul>\n<pre>    <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1980'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span>\n</pre>\n<p>change this to:</p>\n<pre>    <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1970'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span>\n</pre>\n<p>To extend backtestng prior to 1970 for US stocks:</p>\n<ul>\n<li>Navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )</li>\n<li>Then navigate to Lib\\site-packages\\trading_calendars  (i.e. full path for an enviornment named zip35 would be \"C:\\Users&lt;your username&gt;\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\trading_calendars\")</li>\n<li>Edit the file trading_calendar.py and find the following lines (around line 45):</li>\n</ul>\n<pre><span class=\"n\">start_default</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1990-01-01'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">UTC</span><span class=\"p\">)</span>\n</pre>\n<p>change this to:</p>\n<pre><span class=\"n\">start_default</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1970-01-01'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">UTC</span><span class=\"p\">)</span>\n</pre>\n<p>To extend backtestng prior to 2000 for futures:</p>\n<ul>\n<li>Firstly, navigate to the exact path of your Python environment installation (from the error message above, the environment path is C:\\Users\\pyuser\\Anaconda3\\envs\\zip35 )</li>\n<li>Then navigate to Lib\\site-packages\\trading_calendars  (i.e. full path for an enviornment named zip35 would be \"C:\\Users&lt;your username&gt;\\Anaconda3\\envs\\zip35\\Lib\\site-packages\\trading_calendars\")</li>\n<li>Edit the file us_futures_calendar.py and find the following lines (around line 49):</li>\n</ul>\n<pre>                 <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'2000-01-01'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">UTC</span><span class=\"p\">),</span>\n</pre>\n<p>change this to:</p>\n<pre>                 <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'1970-01-01'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">UTC</span><span class=\"p\">),</span>\n</pre>\n<p>Note:  This section is a work-in-progress.  There are additional trading holidays that need to be included.  Norgate Data will be submitting a pull request for such changes to the trading_calendar package.  In the meantime, if you want accurate holidays for NYSE (US Stocks), or ASX (Australian Stocks) contact Norgate data.  We'd be happy to email the trading calendar files.</p>\n<h1>Testing on ASX data</h1>\n<p>By default, run_algorithm uses the 'NYSE' trading calendar.  To backtest other markets, you need to specify the calendar.</p>\n<p>At the top of your algorithm:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">trading_calendars</span> <span class=\"kn\">import</span> <span class=\"n\">get_calendar</span>\n</pre>\n<p>In the run_algorithm call, add a trading_calendar= line, for example:</p>\n<pre><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">run_algorithm</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> \n    <span class=\"n\">initialize</span><span class=\"o\">=</span><span class=\"n\">initialize</span><span class=\"p\">,</span> <span class=\"n\">analyze</span><span class=\"o\">=</span><span class=\"n\">analyze</span><span class=\"p\">,</span> \n    <span class=\"n\">handle_data</span><span class=\"o\">=</span><span class=\"n\">handle_data</span><span class=\"p\">,</span> \n    <span class=\"n\">capital_base</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> \n    <span class=\"n\">trading_calendar</span><span class=\"o\">=</span><span class=\"n\">get_calendar</span><span class=\"p\">(</span><span class=\"s1\">'XASX'</span><span class=\"p\">),</span>\n    <span class=\"n\">data_frequency</span> <span class=\"o\">=</span> <span class=\"s1\">'daily'</span><span class=\"p\">,</span> \n    <span class=\"n\">bundle</span><span class=\"o\">=</span><span class=\"s1\">'norgatedata-spasx200'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>ASX users will need an updated ASX trading calendar too.</p>\n<p>This can be upgraded by conda.</p>\n<pre><code>conda upgrade trading-calendars -c Quantopian\n</code></pre>\n<h1>Books/publications that use Zipline, adapted for Norgate Data use</h1>\n<p>We have adapted the Python code in the following books to use Norgate Data.</p>\n<ul>\n<li><a href=\"https://www.followingthetrend.com/trading-evolved/\" rel=\"nofollow\">Trading Evoled:  Anyone can Build Killer Trading Strategies in Python</a>.  Source code in Jupyter notebook format here: <a href=\"http://norgatedata.com/book-examples/trading-evolved/NorgateDataTradingEvolvedExamples.zip\" rel=\"nofollow\">http://norgatedata.com/book-examples/trading-evolved/NorgateDataTradingEvolvedExamples.zip</a></li>\n</ul>\n<p>If there are other book/publications worthwhile considering, let us know.</p>\n<h1>Support</h1>\n<p>For support on Norgate Data or usage of the zipline-norgatedata extension:\n<a href=\"https://norgatedata.com/contact.php\" rel=\"nofollow\">Norgate Data support</a></p>\n<p>Please put separate issues in separate emails, as this ensures each issue is separately ticketed and tracked.</p>\n<p>For Zipline coding/usage issues, join the <a href=\"https://groups.google.com/forum/#!forum/zipline\" rel=\"nofollow\">Zipline Google Group</a>.  For bug reports on Zipline, report them on <a href=\"https://github.com/quantopian/zipline/issues\" rel=\"nofollow\">Zipline Github</a></p>\n<h1>Thanks</h1>\n<p>Thanks to:</p>\n<ul>\n<li><a href=\"https://www.followingthetrend.com\" rel=\"nofollow\">Andreas Clenow</a> for his pioneering work in documenting Zipline bundles in his latest book <a href=\"https://www.followingthetrend.com/trading-evolved/\" rel=\"nofollow\">Trading Evolved: Anyone can Build Killer Trading Strategies in Python</a>.  We used many of the techniques described in the book to build our bundle code.</li>\n<li>Norgate Data alpha and beta testers.  Without your persistence we wouldn't have implemented half of the features.</li>\n</ul>\n\n          </div>"}, "last_serial": 7097416, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9bba499767a4d9ed99968575b594423f", "sha256": "b42f553d19f769d7ba01ed1ecac90d503ec9b405e96c47e75a42da8d1166316a"}, "downloads": -1, "filename": "zipline_norgatedata-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9bba499767a4d9ed99968575b594423f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.*,<3.6", "size": 4657, "upload_time": "2019-07-07T12:13:55", "upload_time_iso_8601": "2019-07-07T12:13:55.395296Z", "url": "https://files.pythonhosted.org/packages/ac/23/83a67fa68f754f67cd58e8e0b386eeb6d100a96ba720b5105a3084602f84/zipline_norgatedata-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c44d85975fa180482220100732014b6c", "sha256": "5e7528f7a2445cfc97ed1f8360a351d43670ff2c975ec4c936966f1f21c75144"}, "downloads": -1, "filename": "zipline_norgatedata-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c44d85975fa180482220100732014b6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 4660, "upload_time": "2019-07-07T12:20:37", "upload_time_iso_8601": "2019-07-07T12:20:37.708235Z", "url": "https://files.pythonhosted.org/packages/e1/52/040828d57ce2ba353d132a969c7f4d8a6bd52a10eab917900d025cf3ef7e/zipline_norgatedata-0.0.2-py3-none-any.whl", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "717396042e1bd8fdcb20731d0ff21e0d", "sha256": "65bd37b5a28f519deb91de3a9d3480566198a31b1dbf7b3b4c9b6f93d60745d0"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "717396042e1bd8fdcb20731d0ff21e0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 6834, "upload_time": "2019-07-28T10:17:16", "upload_time_iso_8601": "2019-07-28T10:17:16.689188Z", "url": "https://files.pythonhosted.org/packages/b3/5c/07dc64ad4814a7066cb5fece568e7bd5da08698b17e41735b89b7acedef9/zipline_norgatedata-0.9.0-py3-none-any.whl", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "d8f67e96d24a0f7d6b6d597ff1ba85ed", "sha256": "cf13c90fe5bf5967f56c9891076e1260b6d12839b6e3b4f02e8cc34988952344"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d8f67e96d24a0f7d6b6d597ff1ba85ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 7328, "upload_time": "2019-07-28T11:52:20", "upload_time_iso_8601": "2019-07-28T11:52:20.220740Z", "url": "https://files.pythonhosted.org/packages/41/df/262de199d12d2137e5a7096647c8d9b861e3ff59c93d933979f71eea3b01/zipline_norgatedata-0.9.1-py3-none-any.whl", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "53c733aacba90a1436be1cbf53112e79", "sha256": "45c069352da338acf11d6868c0e1a345eea0b217f4b255d2e493c1d262a25dab"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "53c733aacba90a1436be1cbf53112e79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 8026, "upload_time": "2019-08-01T02:38:10", "upload_time_iso_8601": "2019-08-01T02:38:10.771084Z", "url": "https://files.pythonhosted.org/packages/86/ea/8fb41e2911b229fa4ad790e95932f435830b550e57ebd599bfd125d49792/zipline_norgatedata-0.9.2-py3-none-any.whl", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "921e479642fc468baa727db340ea068f", "sha256": "a561d4a1b1506c18960a3fa4504d17f500ecfe48720d4f2d5611a8006ad9c4a8"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "921e479642fc468baa727db340ea068f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 8711, "upload_time": "2019-08-06T06:43:25", "upload_time_iso_8601": "2019-08-06T06:43:25.656580Z", "url": "https://files.pythonhosted.org/packages/5c/a4/28c835465b3eac2837e2751c67ecc54540977566fa59c9f4aee226675ae4/zipline_norgatedata-0.9.3-py3-none-any.whl", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "aad2bef6af2f118c43aea7d7cbc3a6ac", "sha256": "434d879982c8f01c137326103237157677015ff8a0d30dd638e64549f875e840"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "aad2bef6af2f118c43aea7d7cbc3a6ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9018, "upload_time": "2019-08-08T03:59:07", "upload_time_iso_8601": "2019-08-08T03:59:07.041873Z", "url": "https://files.pythonhosted.org/packages/db/3a/e4055716be0eedc32264d70002794f561bea83dc9a99b638410fd1b33cbc/zipline_norgatedata-0.9.4-py3-none-any.whl", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "19935486a387d611981c7a79426752f4", "sha256": "95c4a6479f9699c3693670806530c76979f9392567199bb2edbe477e7d679b44"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "19935486a387d611981c7a79426752f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9341, "upload_time": "2019-08-14T11:56:49", "upload_time_iso_8601": "2019-08-14T11:56:49.594324Z", "url": "https://files.pythonhosted.org/packages/0e/24/fe98f9d3f279a2bde8cd16ae07c0e97df964dc1f214782fad5f2830dd10a/zipline_norgatedata-0.9.5-py3-none-any.whl", "yanked": false}], "0.9.6": [{"comment_text": "", "digests": {"md5": "3edefc5c84a8b83c5f837ad7dd331de7", "sha256": "d314785ce9ef6d611cf645a8e4e14a56cb4a5c3bf90103cefbde0570a60e8b1b"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.6-py3-none-any.whl", "has_sig": false, "md5_digest": "3edefc5c84a8b83c5f837ad7dd331de7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9268, "upload_time": "2019-08-15T11:03:17", "upload_time_iso_8601": "2019-08-15T11:03:17.071798Z", "url": "https://files.pythonhosted.org/packages/7e/fc/e964981d64cd0b1f08efc6300bcf004bba58715c5bfa7726c2befdbcd68d/zipline_norgatedata-0.9.6-py3-none-any.whl", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "73be7ecf88ba7bd67b2ddf04778ed7f6", "sha256": "7eb11e0dcb8f5fd7287208352cb3edfeabd866fd7fd66c20c34d266e6c08e995"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.7-py3-none-any.whl", "has_sig": false, "md5_digest": "73be7ecf88ba7bd67b2ddf04778ed7f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9463, "upload_time": "2019-08-19T02:50:43", "upload_time_iso_8601": "2019-08-19T02:50:43.264931Z", "url": "https://files.pythonhosted.org/packages/9c/dc/34c3e3c622c00226c60046f9d05c0462ff29161bbea15a7acff0548a6fcb/zipline_norgatedata-0.9.7-py3-none-any.whl", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "d672953f4771f829faa6510cb835ad26", "sha256": "2138ad42cd9629ed162c667d5c4508b5adf4e6a50660752813f065327d7c202b"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d672953f4771f829faa6510cb835ad26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9633, "upload_time": "2019-08-19T07:17:27", "upload_time_iso_8601": "2019-08-19T07:17:27.956564Z", "url": "https://files.pythonhosted.org/packages/1c/f9/fa0454a20359e819fb86d203de91d01b0a7481cc8eac38eebb71e793df98/zipline_norgatedata-0.9.8-py3-none-any.whl", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "185c6f120be4a44e626da844a5c97122", "sha256": "02b22105f827070cac9fa20069f916a1387555873a150b70a814acd33ab610a9"}, "downloads": -1, "filename": "zipline_norgatedata-0.9.9-py3-none-any.whl", "has_sig": false, "md5_digest": "185c6f120be4a44e626da844a5c97122", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 9631, "upload_time": "2019-08-19T09:20:32", "upload_time_iso_8601": "2019-08-19T09:20:32.936264Z", "url": "https://files.pythonhosted.org/packages/4b/80/f515ffc8b07ec6702aaaaa24aded868940c1a22be4240346962f3595ec17/zipline_norgatedata-0.9.9-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "2c9133dd25d3f79638e5f6915b1518db", "sha256": "cec6bb27cd2e7493ff2e430060ea5155b0b22c7192747018acdabbb324937b40"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2c9133dd25d3f79638e5f6915b1518db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12224, "upload_time": "2019-08-27T07:22:25", "upload_time_iso_8601": "2019-08-27T07:22:25.877582Z", "url": "https://files.pythonhosted.org/packages/f4/c9/1a6614b537fb19303a56aaf1f25c31d74bda54b09027b1922ca82c4707ff/zipline_norgatedata-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "28968326c0a7e6150be0e9098add1785", "sha256": "1125095d5fb2dc1b2f2759405fa51227b9bc66c10d924ff9fdccbb556731e3d4"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "28968326c0a7e6150be0e9098add1785", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12222, "upload_time": "2019-08-27T07:25:53", "upload_time_iso_8601": "2019-08-27T07:25:53.144918Z", "url": "https://files.pythonhosted.org/packages/e5/af/e94f6a04d7f7bb5450fed1e934ea9cb969383930f4fa5938fb100140ee0c/zipline_norgatedata-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "43d3aff11c5d047d6ef6c6f865a21237", "sha256": "587138385d55aef560a7cb09092357341a5f16f7c7900cc17a8f21bd6349e3fa"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "43d3aff11c5d047d6ef6c6f865a21237", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12215, "upload_time": "2019-08-27T07:27:30", "upload_time_iso_8601": "2019-08-27T07:27:30.835888Z", "url": "https://files.pythonhosted.org/packages/16/df/594867a028b1fcf95d5f910e2616cbb03bdceee6b8abf79cbaadd00fdef5/zipline_norgatedata-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "213d25cf49dc2e3826ce0c4d84b8f05f", "sha256": "3669e3610cb90e8eb97f6e474b1455dbdade84f5d406cce9f13534bcc832079d"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "213d25cf49dc2e3826ce0c4d84b8f05f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12434, "upload_time": "2019-08-27T07:40:43", "upload_time_iso_8601": "2019-08-27T07:40:43.245393Z", "url": "https://files.pythonhosted.org/packages/02/4d/f145902ca50a7d54eeb759979ce6dfe4af5948a04d1005e44fbd7530a2a9/zipline_norgatedata-1.0.3-py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "37b8518c89630caa115d6f73262ccbb7", "sha256": "773223963b3115ac4f9717a23e0e6a273899440f49212d8dccf585377bdbf9b7"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "37b8518c89630caa115d6f73262ccbb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12000, "upload_time": "2019-08-27T08:11:05", "upload_time_iso_8601": "2019-08-27T08:11:05.511997Z", "url": "https://files.pythonhosted.org/packages/2b/97/c0180469394c710b897cf05fdd1c4fb8c5d0b0e3317e93485c2b0aa3c9c0/zipline_norgatedata-1.0.4-py3-none-any.whl", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "e5df3900b957f8efb74a5585814712f3", "sha256": "dee38368ab9fd3a29adb3488015f4fb970079f9c6fbd3890e0f5e56f61e7ca95"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e5df3900b957f8efb74a5585814712f3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12081, "upload_time": "2019-08-27T08:27:09", "upload_time_iso_8601": "2019-08-27T08:27:09.730523Z", "url": "https://files.pythonhosted.org/packages/02/52/10eb14572a6b72c7e2c7e6bc632ee60d0454a1311207fe1439b431917ec9/zipline_norgatedata-1.0.5-py3-none-any.whl", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "d17b0596567d0133f6a896c02a41270a", "sha256": "704e19b8485bb15e7e519af3b3faf0e203f0996d318ef3ded13b4a26e240f6cd"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d17b0596567d0133f6a896c02a41270a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12134, "upload_time": "2019-08-27T08:31:38", "upload_time_iso_8601": "2019-08-27T08:31:38.094511Z", "url": "https://files.pythonhosted.org/packages/3f/59/24dc8661c1452fb5b12e7b9b22e230a8f7f7245e9f64324ae0d6e765332c/zipline_norgatedata-1.0.6-py3-none-any.whl", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "44acf35106b246d5a1da6d941e3c0569", "sha256": "129360637accf7ed83a01fdfbb223a52863d4dc453f47d5ad7674b27a1eaa4ce"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "44acf35106b246d5a1da6d941e3c0569", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12279, "upload_time": "2019-08-29T14:46:46", "upload_time_iso_8601": "2019-08-29T14:46:46.325994Z", "url": "https://files.pythonhosted.org/packages/d6/39/5fbd70ed067c6f716347b77b567ee676f36c13b6283abfe73147f519b710/zipline_norgatedata-1.0.7-py3-none-any.whl", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "a1cd18fd1810b1a1a99e1fad8a87af2e", "sha256": "8ba66d40650d8bd699d3f622f20cf0a4cfe0df60a6060251cb683b8a2107eee5"}, "downloads": -1, "filename": "zipline_norgatedata-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "a1cd18fd1810b1a1a99e1fad8a87af2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12313, "upload_time": "2019-08-29T14:51:58", "upload_time_iso_8601": "2019-08-29T14:51:58.791674Z", "url": "https://files.pythonhosted.org/packages/d2/04/d966d366ed243b2a6874799b8c253f4df72065e2a9021feeb781f3419631/zipline_norgatedata-1.0.8-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "98cb3ac8c67af5c9cdd8c859faa77aff", "sha256": "e9ad37847998148fa5457a7cd6bf9da5efbc0390d7d9dc5ddb3c6726d048637f"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "98cb3ac8c67af5c9cdd8c859faa77aff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12508, "upload_time": "2019-08-29T22:51:52", "upload_time_iso_8601": "2019-08-29T22:51:52.584814Z", "url": "https://files.pythonhosted.org/packages/2d/57/bf85d4ad6e5b78ce870d31af202a0a35ab24b4dc81597a3324313f482c49/zipline_norgatedata-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "acb4831959e2e44146897c0be4c1f370", "sha256": "277d902e13ceb3373f591520f86398d70418d09a291c8112c721f33d65741cc2"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "acb4831959e2e44146897c0be4c1f370", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 12508, "upload_time": "2019-08-29T22:52:44", "upload_time_iso_8601": "2019-08-29T22:52:44.558753Z", "url": "https://files.pythonhosted.org/packages/5a/ba/5d0d610620621c1cb3ea5de6b2978a92c1dcece6ea468bf537ba85347e16/zipline_norgatedata-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.10": [{"comment_text": "", "digests": {"md5": "7dd0c8248d03ffb3908dc2ab529c03f8", "sha256": "95c53c6bab66e5a25452831b8226fe8687cf50518a8630991588993262bb9dd7"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7dd0c8248d03ffb3908dc2ab529c03f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 19726, "upload_time": "2019-09-20T02:19:06", "upload_time_iso_8601": "2019-09-20T02:19:06.047904Z", "url": "https://files.pythonhosted.org/packages/27/08/d158e9261efa41c34bd2cb0e9c43bc26782a371cf37d4a8b210fafca7cef/zipline_norgatedata-1.1.10-py3-none-any.whl", "yanked": false}], "1.1.11": [{"comment_text": "", "digests": {"md5": "c574fcaf7c08c274cebb4535192663a3", "sha256": "976e95c4a79e0f54d1239a3b427d70e08e284cc10a7fe6d536bd38d648a211e0"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "c574fcaf7c08c274cebb4535192663a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 19721, "upload_time": "2019-09-20T02:25:26", "upload_time_iso_8601": "2019-09-20T02:25:26.841126Z", "url": "https://files.pythonhosted.org/packages/ed/23/06caa5864718a87947d9680d4701784a6905277a0bbbc86f947ddce9b22b/zipline_norgatedata-1.1.11-py3-none-any.whl", "yanked": false}], "1.1.12": [{"comment_text": "", "digests": {"md5": "1ed3174083f827a6b44231a5ea2ecb7b", "sha256": "3e322eb0952ef69ad9bd8f56b6e600c25c8d6a5fcdac99c89d6f5ce354c5fe99"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "1ed3174083f827a6b44231a5ea2ecb7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 20118, "upload_time": "2019-10-17T01:24:23", "upload_time_iso_8601": "2019-10-17T01:24:23.227408Z", "url": "https://files.pythonhosted.org/packages/3c/eb/13549d256e1d08a6c0202b3e5d90db82766c8651dc9ecae932581835fabf/zipline_norgatedata-1.1.12-py3-none-any.whl", "yanked": false}], "1.1.14": [{"comment_text": "", "digests": {"md5": "f4cdf6c5a6f5983ece4d6bcf516fe343", "sha256": "44f4128bbd2bf47ebef5dde15020625a3a7a681246f8205183bb1c0e141521e2"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.14-py3-none-any.whl", "has_sig": false, "md5_digest": "f4cdf6c5a6f5983ece4d6bcf516fe343", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 21603, "upload_time": "2019-10-26T02:18:28", "upload_time_iso_8601": "2019-10-26T02:18:28.312651Z", "url": "https://files.pythonhosted.org/packages/0c/ca/97bcd733c19a57489ff1d34ff9f61c3783e8c088ef82e3d5571fa2838793/zipline_norgatedata-1.1.14-py3-none-any.whl", "yanked": false}], "1.1.15": [{"comment_text": "", "digests": {"md5": "d6a3b281991173577cca289f25ac31d0", "sha256": "70a4e3f2057493f8c9155d0e8432fc0331bb7d82e7924f1016b6a2e2e80cb3b0"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.15-py3-none-any.whl", "has_sig": false, "md5_digest": "d6a3b281991173577cca289f25ac31d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 22303, "upload_time": "2019-10-26T05:10:44", "upload_time_iso_8601": "2019-10-26T05:10:44.018790Z", "url": "https://files.pythonhosted.org/packages/17/35/e00f30ffc12b6e380e57f8c8d9981e70d9266804f121072ff1b934116eb9/zipline_norgatedata-1.1.15-py3-none-any.whl", "yanked": false}], "1.1.16": [{"comment_text": "", "digests": {"md5": "8a61b6a5fede59b46fa0de52717e73fc", "sha256": "885016b4c634d488a668c18f81e93dc47c701e644e49e7cb8fe6b58763c480e3"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.16-py3-none-any.whl", "has_sig": false, "md5_digest": "8a61b6a5fede59b46fa0de52717e73fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 22929, "upload_time": "2019-10-28T05:20:16", "upload_time_iso_8601": "2019-10-28T05:20:16.367194Z", "url": "https://files.pythonhosted.org/packages/77/65/4bbd1a72ec25f99644d7a6c41e321ab89df661b05d0d6cc96a131ea8c28d/zipline_norgatedata-1.1.16-py3-none-any.whl", "yanked": false}], "1.1.17": [{"comment_text": "", "digests": {"md5": "f63505ca8a5cca2e2943c8fabb35af27", "sha256": "4ed09f59e9889fdaff37b38dca4eff03ca236e6e4584298f77183d70ae8188d4"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.17-py3-none-any.whl", "has_sig": false, "md5_digest": "f63505ca8a5cca2e2943c8fabb35af27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 22938, "upload_time": "2019-10-28T05:30:00", "upload_time_iso_8601": "2019-10-28T05:30:00.340801Z", "url": "https://files.pythonhosted.org/packages/9b/50/d0931c65df86adce7a3548ec08dda6b56f6df765fe6d44f319f1df3db31e/zipline_norgatedata-1.1.17-py3-none-any.whl", "yanked": false}], "1.1.18": [{"comment_text": "", "digests": {"md5": "245a6f76f88259b918ef71fc5107ca74", "sha256": "4976cbae6db5ca531566da24bd0e10e58fd03d8f8a2f4d0ac7855ede85ff9ab6"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.18-py3-none-any.whl", "has_sig": false, "md5_digest": "245a6f76f88259b918ef71fc5107ca74", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 22926, "upload_time": "2019-10-28T05:31:36", "upload_time_iso_8601": "2019-10-28T05:31:36.483484Z", "url": "https://files.pythonhosted.org/packages/e8/98/660c2706862109e993afa79edc55b0ae9c151525a22b74d7e54d22d1f5a2/zipline_norgatedata-1.1.18-py3-none-any.whl", "yanked": false}], "1.1.19": [{"comment_text": "", "digests": {"md5": "8fedc5eaeccf4d413374b9b1eb947f83", "sha256": "353aa6ce2e2bab86dcd2189f979ac3ba050b547b70bef2531884abd8821002e2"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.19-py3-none-any.whl", "has_sig": false, "md5_digest": "8fedc5eaeccf4d413374b9b1eb947f83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23190, "upload_time": "2019-10-28T08:42:55", "upload_time_iso_8601": "2019-10-28T08:42:55.040247Z", "url": "https://files.pythonhosted.org/packages/41/d4/9ce4abd10f3e9f2008c01c5966c5ccbf072afd9448dc2407877e4914b564/zipline_norgatedata-1.1.19-py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "ea7d7b7f240da50280017d62d2462ebd", "sha256": "a5f67a735600971d66c5e0b98cb3281c82f68f418caaf06dacd04141bbe5c30b"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ea7d7b7f240da50280017d62d2462ebd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18922, "upload_time": "2019-09-02T03:03:06", "upload_time_iso_8601": "2019-09-02T03:03:06.922002Z", "url": "https://files.pythonhosted.org/packages/62/84/173e51d6ff242e32924b50fac04d1b622c0870382d0b5a1a0db975c665ab/zipline_norgatedata-1.1.2-py3-none-any.whl", "yanked": false}], "1.1.20": [{"comment_text": "", "digests": {"md5": "7a5c87f0da1397eab431c6b163682281", "sha256": "3b4b203fe4d75846ec1301ec796228e0b410dd6be10c4c14f034d7fd9201386b"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "7a5c87f0da1397eab431c6b163682281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23549, "upload_time": "2019-10-29T13:26:41", "upload_time_iso_8601": "2019-10-29T13:26:41.450202Z", "url": "https://files.pythonhosted.org/packages/43/b7/e86f7817fab9f5914256111cbd8ad3065ba391544b225acdaf77cffb354c/zipline_norgatedata-1.1.20-py3-none-any.whl", "yanked": false}], "1.1.21": [{"comment_text": "", "digests": {"md5": "a6d3f1a878690fda172f7f70033c26d1", "sha256": "cdd0808bb0744c0cd91268b0f9ecc58e8a161448a43c36d7a47ed7327d70d48f"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.21-py3-none-any.whl", "has_sig": false, "md5_digest": "a6d3f1a878690fda172f7f70033c26d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23549, "upload_time": "2019-10-29T13:36:46", "upload_time_iso_8601": "2019-10-29T13:36:46.685884Z", "url": "https://files.pythonhosted.org/packages/37/f3/fa624daebf52c3e713dbe68db15de086287cfbabce04dad836e91f69383a/zipline_norgatedata-1.1.21-py3-none-any.whl", "yanked": false}], "1.1.22": [{"comment_text": "", "digests": {"md5": "c0376116185fbbb7ecc31371650a926a", "sha256": "b489ba65e898091450e8d8a2ee8bd8c19f0392d8111ac855923fdbd38f3c59ae"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.22-py3-none-any.whl", "has_sig": false, "md5_digest": "c0376116185fbbb7ecc31371650a926a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23539, "upload_time": "2019-10-29T13:37:40", "upload_time_iso_8601": "2019-10-29T13:37:40.028124Z", "url": "https://files.pythonhosted.org/packages/f9/58/7f05451e9937a20c437777059765cd82387cbd1f9600854e79d0dc8d330c/zipline_norgatedata-1.1.22-py3-none-any.whl", "yanked": false}], "1.1.23": [{"comment_text": "", "digests": {"md5": "20380effaefd828d94d75bcb1437d671", "sha256": "2205f6a4b41ddeec29d78bae1e137a27e60d86cd7e6935f548a9ba2fc79d0baa"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.23-py3-none-any.whl", "has_sig": false, "md5_digest": "20380effaefd828d94d75bcb1437d671", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23393, "upload_time": "2019-10-29T13:42:11", "upload_time_iso_8601": "2019-10-29T13:42:11.593931Z", "url": "https://files.pythonhosted.org/packages/49/13/27dd924b11a961bcd6128e6abed7d629ca71db2c4c0b4f34dcf0b9f58c4d/zipline_norgatedata-1.1.23-py3-none-any.whl", "yanked": false}], "1.1.24": [{"comment_text": "", "digests": {"md5": "dd43cbd83b71fe8651053b20c70e9361", "sha256": "121d16b415ac763044ca917d9b9f21cc8c98abde077b519b4f7c6e147bf4f425"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.24-py3-none-any.whl", "has_sig": false, "md5_digest": "dd43cbd83b71fe8651053b20c70e9361", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23139, "upload_time": "2019-11-04T04:09:24", "upload_time_iso_8601": "2019-11-04T04:09:24.306635Z", "url": "https://files.pythonhosted.org/packages/f9/d0/9243f1bba8acb3c1e921484b0adcd937c87b55c109fd41adbc1682e18b61/zipline_norgatedata-1.1.24-py3-none-any.whl", "yanked": false}], "1.1.27": [{"comment_text": "", "digests": {"md5": "ece36c838f013a9f740d282d04595723", "sha256": "645f8106132e0253cff2d1766240e38fe9b7d8a8854196a647b7f27ca34f9641"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.27-py3-none-any.whl", "has_sig": false, "md5_digest": "ece36c838f013a9f740d282d04595723", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23645, "upload_time": "2019-11-09T10:22:22", "upload_time_iso_8601": "2019-11-09T10:22:22.355841Z", "url": "https://files.pythonhosted.org/packages/03/ad/f88493f5f29b36220505b325224c21067051a7fc80ef84709b45db1d8b0c/zipline_norgatedata-1.1.27-py3-none-any.whl", "yanked": false}], "1.1.28": [{"comment_text": "", "digests": {"md5": "6187c3941bea18dbe8208c93639ecf84", "sha256": "35ac5eac0c2093ceb8f0cfe52d987e9f40ab7cdc81eb96338de750f16c72b995"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.28-py3-none-any.whl", "has_sig": false, "md5_digest": "6187c3941bea18dbe8208c93639ecf84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 23651, "upload_time": "2019-11-10T00:15:01", "upload_time_iso_8601": "2019-11-10T00:15:01.487267Z", "url": "https://files.pythonhosted.org/packages/cf/c0/e1a7974667ffc5d9dac54e35c38585b15107778aa9116c09ebec01ee486c/zipline_norgatedata-1.1.28-py3-none-any.whl", "yanked": false}], "1.1.29": [{"comment_text": "", "digests": {"md5": "602d74ae1eab0a96cead520bfd3ed735", "sha256": "3484b078169166502b1e1fc17f606552581496fcad170d8baa1545b4628b40f8"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.29-py3-none-any.whl", "has_sig": false, "md5_digest": "602d74ae1eab0a96cead520bfd3ed735", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 24124, "upload_time": "2019-11-11T03:06:09", "upload_time_iso_8601": "2019-11-11T03:06:09.322834Z", "url": "https://files.pythonhosted.org/packages/f2/bb/c97953c333930d688659009fbf593320b7a803034cf24a8523a7a853f9ea/zipline_norgatedata-1.1.29-py3-none-any.whl", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "f731bb2b1a3e88ee5dd9e6a1b87151b0", "sha256": "45734645db0a7d03f45fe38c97c0998d1f83c16f4e0d700867f4da3dbd8afb41"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f731bb2b1a3e88ee5dd9e6a1b87151b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18880, "upload_time": "2019-09-02T04:24:00", "upload_time_iso_8601": "2019-09-02T04:24:00.454176Z", "url": "https://files.pythonhosted.org/packages/58/fc/092dbfe4f9663c95c51f7c12e90a44ae5ff5ca06109efa6b9852d2ab99b3/zipline_norgatedata-1.1.3-py3-none-any.whl", "yanked": false}], "1.1.30": [{"comment_text": "", "digests": {"md5": "f10aff2d94852ed0092f34af9d346b65", "sha256": "58a8165c6963db1ff2f36f10827f346a7dc0b546ef53ef20b1d76f46edf1cc00"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.30-py3-none-any.whl", "has_sig": false, "md5_digest": "f10aff2d94852ed0092f34af9d346b65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 24965, "upload_time": "2020-02-19T04:01:15", "upload_time_iso_8601": "2020-02-19T04:01:15.320376Z", "url": "https://files.pythonhosted.org/packages/b1/91/3dc6a79f3874be199bf9d25ae4ff16824d31e6886b298ba42e2c409b0d33/zipline_norgatedata-1.1.30-py3-none-any.whl", "yanked": false}], "1.1.31": [{"comment_text": "", "digests": {"md5": "672df90ad8f40fcb3f5bc330d25f801b", "sha256": "c26d11c4913ef49ed51ce83c6e076e26ed3471e51deb8a2de1320808423018c9"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.31-py3-none-any.whl", "has_sig": false, "md5_digest": "672df90ad8f40fcb3f5bc330d25f801b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 24973, "upload_time": "2020-02-19T04:03:16", "upload_time_iso_8601": "2020-02-19T04:03:16.437143Z", "url": "https://files.pythonhosted.org/packages/60/2f/9d046e85769c643863c5667e8b864a28cc0aa8ab54b8ae45836a7561e380/zipline_norgatedata-1.1.31-py3-none-any.whl", "yanked": false}], "1.1.32": [{"comment_text": "", "digests": {"md5": "03e9a80aedda0cd5883de4ffe192d384", "sha256": "1e0e1e6d1ae5f4fc4456e3a1f8aa8ee878e794c1c6b490800c31c870ff54cf54"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.32-py3-none-any.whl", "has_sig": false, "md5_digest": "03e9a80aedda0cd5883de4ffe192d384", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25122, "upload_time": "2020-02-20T04:40:25", "upload_time_iso_8601": "2020-02-20T04:40:25.579532Z", "url": "https://files.pythonhosted.org/packages/47/02/7c66fdbcaa07821bee1adcb068646fca396bff11f2804ce471f7a01a0b50/zipline_norgatedata-1.1.32-py3-none-any.whl", "yanked": false}], "1.1.33": [{"comment_text": "", "digests": {"md5": "00641063367a5851225b895d32392a0f", "sha256": "b24e640fc2c9f913d1adc365b5ca443ac1b2a22b0013dcdeb43aabc6b3dccf7e"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.33-py3-none-any.whl", "has_sig": false, "md5_digest": "00641063367a5851225b895d32392a0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25144, "upload_time": "2020-04-23T02:56:48", "upload_time_iso_8601": "2020-04-23T02:56:48.542842Z", "url": "https://files.pythonhosted.org/packages/f3/70/31d0d8accfd05fc9363057865320a3387977af44b8ea66255a0ed750a0a9/zipline_norgatedata-1.1.33-py3-none-any.whl", "yanked": false}], "1.1.34": [{"comment_text": "", "digests": {"md5": "f5f13f6768df98ce259fd65c7ac661b4", "sha256": "81f106582ba81bedaaef5554bf504ab462d1c3de0e5703903f110ebadca6cf72"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.34-py3-none-any.whl", "has_sig": false, "md5_digest": "f5f13f6768df98ce259fd65c7ac661b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25375, "upload_time": "2020-04-23T05:42:02", "upload_time_iso_8601": "2020-04-23T05:42:02.902019Z", "url": "https://files.pythonhosted.org/packages/0f/70/75c2e9ee19e0f698683514db833ad405f91fc30531bf7ca0ed37693bdd98/zipline_norgatedata-1.1.34-py3-none-any.whl", "yanked": false}], "1.1.35": [{"comment_text": "", "digests": {"md5": "4327e84750329a92db3d02a484f39c6e", "sha256": "95526adf8896cc3e63a11011c8bfd2fce6e4f8f1e326122d225d9853a8ffd8fa"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.35-py3-none-any.whl", "has_sig": false, "md5_digest": "4327e84750329a92db3d02a484f39c6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25377, "upload_time": "2020-04-23T07:11:48", "upload_time_iso_8601": "2020-04-23T07:11:48.969132Z", "url": "https://files.pythonhosted.org/packages/6f/10/4ddd36ff03d162fcfd6b6af80e6bb9f3f31c944bb857fef64289ea983375/zipline_norgatedata-1.1.35-py3-none-any.whl", "yanked": false}], "1.1.37": [{"comment_text": "", "digests": {"md5": "8d5b705aa5c6e2cd6fff84bf06368359", "sha256": "3b4d47fd2f4bda19a47af8e8e2eb93f079a2d634d8dce22d5f46e9440cdf4ca7"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.37-py3-none-any.whl", "has_sig": false, "md5_digest": "8d5b705aa5c6e2cd6fff84bf06368359", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25799, "upload_time": "2020-04-25T02:22:22", "upload_time_iso_8601": "2020-04-25T02:22:22.275999Z", "url": "https://files.pythonhosted.org/packages/58/da/ae9a647190dace284a5463f2b1612d6a9c7340efd9e32d5ef0321988bc02/zipline_norgatedata-1.1.37-py3-none-any.whl", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "a300247498a27eac1261f05c795b1399", "sha256": "ddd928607d885f35641414d7fe180d8a39d9ba5671718890d4d17035a37799a1"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a300247498a27eac1261f05c795b1399", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18876, "upload_time": "2019-09-02T04:26:43", "upload_time_iso_8601": "2019-09-02T04:26:43.099694Z", "url": "https://files.pythonhosted.org/packages/9a/01/a05d184c6d98d30be606a11dd4cb93dfbe3bd21363defa3e815c9b087256/zipline_norgatedata-1.1.4-py3-none-any.whl", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "92cc75b4cb03088a5a10b8b2c0344e84", "sha256": "36f462800665094b8b3c9789306dffdd6d97bf588744d778f707fa307b4eec04"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "92cc75b4cb03088a5a10b8b2c0344e84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18876, "upload_time": "2019-09-02T04:27:24", "upload_time_iso_8601": "2019-09-02T04:27:24.444128Z", "url": "https://files.pythonhosted.org/packages/93/62/473103977817e8c26ca2be0274e18ada208eeb6110a0732804a9dcd05db9/zipline_norgatedata-1.1.5-py3-none-any.whl", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "d328ccad140a217ee5c82500f13c5664", "sha256": "b594c888a56a88c9097179472d816013095d9030337490b678233540c2e93bdf"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d328ccad140a217ee5c82500f13c5664", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18871, "upload_time": "2019-09-02T23:44:43", "upload_time_iso_8601": "2019-09-02T23:44:43.245290Z", "url": "https://files.pythonhosted.org/packages/c5/47/5d17b7a262d1bb4d53a2fa83ca3856915a5592843420c9c22dddf1080120/zipline_norgatedata-1.1.6-py3-none-any.whl", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "17e2e3f5cd5d57c38446d35fc58e491d", "sha256": "70242f039687c54477b088c43dd6d6c03415bc73a68b4cdf545b5c170d38f1a7"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "17e2e3f5cd5d57c38446d35fc58e491d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 18874, "upload_time": "2019-09-07T09:06:18", "upload_time_iso_8601": "2019-09-07T09:06:18.641052Z", "url": "https://files.pythonhosted.org/packages/f3/7b/147eeec4f01661546d52b2a4bfb44078d9b04acfc503b6e47b6284773aa5/zipline_norgatedata-1.1.7-py3-none-any.whl", "yanked": false}], "1.1.8": [{"comment_text": "", "digests": {"md5": "2aa311a0b75e2ea8b5abc75b70dd4f79", "sha256": "b5cb3e76f27769c8931caea85ab7939ebb172f7feb7c2b99077ba2a21c2a648d"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2aa311a0b75e2ea8b5abc75b70dd4f79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 19487, "upload_time": "2019-09-08T04:50:08", "upload_time_iso_8601": "2019-09-08T04:50:08.668429Z", "url": "https://files.pythonhosted.org/packages/39/6a/aca1a59a01ecc7bf5b3b6511eb464c635b2e6e691a0d7b0775b03be41fe2/zipline_norgatedata-1.1.8-py3-none-any.whl", "yanked": false}], "1.1.9": [{"comment_text": "", "digests": {"md5": "2d5a84656f1840c105c71128f1d1be7a", "sha256": "34a8067a213d9d7e468afca0c2db5a63384f444b02c052ed4e4df016edfaa85d"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2d5a84656f1840c105c71128f1d1be7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 19739, "upload_time": "2019-09-20T02:13:10", "upload_time_iso_8601": "2019-09-20T02:13:10.617771Z", "url": "https://files.pythonhosted.org/packages/f5/c6/43b912c45e7c80b4c3dc0864147111e6826d7220e4d8c8b1d025067a644a/zipline_norgatedata-1.1.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d5b705aa5c6e2cd6fff84bf06368359", "sha256": "3b4d47fd2f4bda19a47af8e8e2eb93f079a2d634d8dce22d5f46e9440cdf4ca7"}, "downloads": -1, "filename": "zipline_norgatedata-1.1.37-py3-none-any.whl", "has_sig": false, "md5_digest": "8d5b705aa5c6e2cd6fff84bf06368359", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.0,<3.6", "size": 25799, "upload_time": "2020-04-25T02:22:22", "upload_time_iso_8601": "2020-04-25T02:22:22.275999Z", "url": "https://files.pythonhosted.org/packages/58/da/ae9a647190dace284a5463f2b1612d6a9c7340efd9e32d5ef0321988bc02/zipline_norgatedata-1.1.37-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:15:58 2020"}