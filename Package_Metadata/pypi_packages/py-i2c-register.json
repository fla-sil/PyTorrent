{"info": {"author": "Noah Huppert", "author_email": "developer.noah@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Python I2C Register |Build Status| |Test Coverage|\n==================================================\n\nPython wrapper library around the common I2C controller register\npattern.\n\nI2C Register is a python library which aims to make communicating with\nregisters on I2C devices dead simple. It is meant to directly transfer\nthe Register Definitions pages of a data sheet into your program.\n\nTable Of Contents\n=================\n\n-  `Installation <#installation>`__\n-  `Quick Example <#quick-example>`__\n-  `Systems Overview <#systems-overview>`__\n\n   -  `Creating a RegisterList <#creating-a-registerlist>`__\n   -  `Defining Registers <#defining-registers>`__\n   -  `Adding RegisterSegments <#adding-registersegments>`__\n   -  `Reading from RegisterSegments <#reading-from-registersegments>`__\n   -  `Writing to RegisterSegments <#writing-to-registersegments>`__\n\n-  `Writting Wrapper Classes <#writing-wrapper-classes>`__\n-  `Development <#development>`__\n\n   -  `Running Tests <#running-tests>`__\n\n-  `Distribution <#distribution>`__\n\n   -  `Setup <#setup>`__\n   -  `Steps <#steps>`__\n\nInstallation\n============\n\nI2C Register is available as a PIP package with the name\n``py-i2c-register``.\n\nSimply use PIP to install:\n\n.. code:: bash\n\n    pip install --user py-i2c-register\n\nYou will then be able to include the ``py_i2c_register`` module and its\nvarious classes:\n\n.. code:: python\n\n    from py_i2c_register.register_list import RegisterList\n    from py_i2c_register.register import Register\n    from py_i2c_register.register_segment import RegisterSegment\n\nQuick Example\n=============\n\nTake these control register definitions from a data sheet:\n\n.. figure:: https://github.com/Noah-Huppert/py-i2c-register/blob/master/docs/img/example-register-defs-p1.png?raw=true\n   :alt: Example Hardware Data Sheet Register Definitions page 1\n\n   Example Hardware Data Sheet Register Definitions page 1\n\n.. figure:: https://github.com/Noah-Huppert/py-i2c-register/blob/master/docs/img/example-register-defs-p2.png?raw=true\n   :alt: Example Hardware Data Sheet Register Definitions page 2\n\n   Example Hardware Data Sheet Register Definitions page 2\n\nWith the help of the I2C Register library they can easily be represented\nand manipulated.\n\n.. code:: python\n\n    from py_i2c_register.register_list import RegisterList\n    from py_i2c_register.register import Register\n\n    # Create RegisterList instance to hold registers, device's i2c address is 0x62\n    controls = RegisterList(0x62, i2c, {})\n\n    # Add a definition for an ACQ_COMMAND (Acquisition Command) register, address 0x00 with WRITE permissions\n    controls.add(\"ACQ_COMMAND\", 0x00, Register.WRITE, {})\\\n        .add(\"ACQ_COMMAND\", 0, 7, [0] * 8)  # Define the segment of bits to read with LSB index of 0 and MSB index of 7\n        \n    # Add a definition for a STATUS register, address 0x01 with READ permissions\n    controls.add(\"STATUS\", 0x01, Register.READ, {}) \\\n        # Define various individual Register Segments which each signify different parts of the status\n        .add(\"PROC_ERROR_FLAG\", 6, 6, [0]) \\\n        .add(\"HEALTH_FLAG\", 5, 5, [0]) \\\n        .add(\"SECONDARY_RET_FLAG\", 4, 4, [0]) \\\n        .add(\"INVALID_SIGNAL_FLAG\", 3, 3, [0]) \\\n        .add(\"SIGNAL_OVERFLOW_FLAG\", 2, 2, [0]) \\\n        .add(\"REFERENCE_OVERFLOW_FLAG\", 1, 1, [0]) \\\n        .add(\"BUSY_FLAG\", 0, 0, [0])\n        \n    # Add a definition for a VELOCITY register, address 0x09 with READ permissions\n    controls.add(\"VELOCITY\", 0x09, Register.READ, {})\\\n        .add(\"VELOCITY\", 0, 7, [0] * 8)  # Define the segment of bits to read for velocity value with LSB index of 0 and MSB index of 7\n\n        \n    # Super simple to read and write values\n    # Set ACQ_COMMAND Register bits to value of 0x04, then write to register\n    controls.set_bits_from_int(\"ACQ_COMMAND\", \"ACQ_COMMAND\", 0x04, write_after=True)  \n\n    # Read STATUS register for BUSY_FLAG value and convert to an integer\n    busy = controls.to_int(\"STATUS\", \"BUSY_FLAG\", read_first=True)\n\n    # Read VELOCITY register and convert to two's compliment integer\n    velocity = controls.to_twos_comp_int(\"VELOCITY\", \"VELOCITY\", read_first=True)\n\nSystems Overview\n================\n\nThe main class this library provides is the ``RegisterList`` class. This\nclass manages a list of ``Register`` definitions. It also provides some\nuseful helper methods to make performing certain common actions quick\nand easy.\n\nCreating a RegisterList\n-----------------------\n\nTo create a ``RegisterList`` import the ``register_list.RegisterList``\nclass. Then call the constructor giving it a I2C device address, an `I2C\nObject </docs/i2c-object.md>`__, and any ``Register``\\ s you have\nalready defined:\n\n.. code:: python\n\n    from py_i2c_register.register_list import RegisterList\n    controls = RegisterList(0x62, i2c, {})\n\nThe provided I2C Device address will be used to contact the device which\nholds the registers over I2C. The `I2C Object </docs/i2c-object.md>`__\ndepends on your platform, see the\n`documentation </docs/i2c-object.md>`__ for more information. In most\ncases you can provide an empty ``Register`` map as well.\n\nDefining Registers\n------------------\n\nAfter you create a ``RegisterList`` you must define some ``Register``\\ s\nto control. A ``Register`` is defined by a name (for easy programmatic\naccess), an I2C address, and a string containing IO operation\npermissions. The ``RegisterList`` class provides a useful\n``add(reg_name, reg_addr, reg_permissions, reg_segments)`` method for\nadding ``Register``\\ s.\n\n.. code:: python\n\n    from py_i2c_register.register import Register\n    controls.add(\"REGISTER_NAME\", 0x00, Registers.READ + Register.WRITE, {})\n\nThis would define a ``Register`` with the name ``REGISTER_NAME``, the\naddress ``0x00`` and the permission to read and write to/from it.\n\nAdding RegisterSegments\n-----------------------\n\nTo actually read or write to/from a ``Register`` you need to define at\nleast one ``RegisterSegment``. These describe how bits read from\nregisters map to sub values. This could be useful if a device for\nexample: provides a health register and each bit represents a different\nsystem's health. You define ``RegisterSegment``\\ s by giving a name (for\neasy programmatic access) and the index of the segment's least and most\nsignificant bits. The previously mentioned ``RegisterList.add()`` method\nreturns the ``Register`` that it just created. You can then in turn use\na similar helper method that ``Register`` provides called\n``add(seg_name, lsb_i, msb_i, default_bits)``:\n\n.. code:: python\n\n    controls.add(\"HEALTH\", 0x00, Registers.READ, {})\\\n        .add(\"LEFT_MOTOR_FLAG\", 2, 2, [0])\\\n        .add(\"RIGHT_MOTOR_FLAG\", 1, 1, [0])\\\n        .add(\"NETWORK_FLAG\", 0, 0, [0])\n\nThis would define a ``Register`` named ``HEALTH`` at address ``0x00``\nwith read permissions. This ``Register`` would have 3\n``RegisterSegment``\\ s. These 3 register segments would look at bits 0,\n1, and 2 for the status of the left and right motors as well as some\nmade up network module.\n\nReading from RegisterSegments\n-----------------------------\n\nThe ``RegisterList`` provides some useful helper methods for reading\n``RegisterSegment``\\ s as integer values. They are called ``to_int`` and\n``to_twos_comp_int``. They both take the name of a ``Register`` and\n``RegisterSegment`` to read. Optionally you can pass a ``read_first``\nvalue. When ``True`` these methods will read the ``Register`` off the\nI2C device before returning the ``RegisterSegment`` value:\n\n.. code:: python\n\n    network_status = controls.to_int(\"HEALTH\", \"NETWORK_FLAG\", read_first=True)\n    velocity = controls.to_twos_comp_int(\"VELOCITY\", \"VELOCITY\", read_first=True)\n\nThis would read the ``NETWORK_FLAG`` segment of the ``HEALTH`` register\nand the ``VELOCITY`` segment of the ``VELOCITY`` register.\n\nOntop of using ``RegisterList``\\ s helper methods one can access raw\n``RegisterSegment`` values via the ``RegisterSegment.bits`` array. This\narray contains the raw ``0`` or ``1`` values of the register. Just be\nsure to call ``Register.read`` before accessing the\n``RegisterSegment.bits`` array:\n\n.. code:: python\n\n    controls.get(\"VELOCITY\").read()\n    velocity_bits = controls.get(\"VELOCITY\").get(\"VELOCITY\").bits\n\nWriting to RegisterSegments\n---------------------------\n\nThe ``RegisterList`` class provides the ``set_bits`` and\n``set_bits_from_int`` helper methods. Similar to the reading helper\nmethods mentioned above ``set_bits`` and ``set_bits_from_int`` both also\ntake a ``Register`` and ``RegisterSegment`` name as their first two\nparameters. The third value of both functions is the value to set. In\nthe case of the ``set_bits`` method it is expected to be an array of\nbits to set. In the case of the ``set_bits_from_int`` method it is\nexpected to be an integer value to set. The ``set_bits`` and\n``set_bits_from_int`` methods also offer an optional ``write_after``\nflag. If ``True`` they will write the value of the ``Register`` to the\nI2C device after the value has been set.\n\n.. code:: python\n\n    controls.set_bits(\"ACQ_COMMAND\", \"ACQ_COMMAND\", [0, 0, 0, 0, 0, 1, 0, 0], write_after=True)  \n    controls.set_bits_from_int(\"ACQ_COMMAND\", \"ACQ_COMMAND\", 0x04, write_after=True)  \n\nThis would set the ``ACQ_COMMAND`` segment of the ``ACQ_COMMAND``\nregister to the value ``0x04`` using the ``set_bits`` and\n``set_bits_from_int`` methods.\n\nWriting Wrapper Classes\n=======================\n\nI2C Register's simple architecture lends itself well to being used in\nhardware wrapper classes. All one must do is create a class with its own\n``RegisterList`` instance. Then add ``Register`` and ``RegisterSegment``\ndefinitions in the ``__init__()`` method:\n\n.. code:: python\n\n    from py_i2c_register.register_list import RegisterList\n    from py_i2c_register.register import Register\n\n    class LidarLiteV3():\n        # Register and Segment name constants\n        REG_ACQ_COMMAND = \"ACQ_COMMAND\"\n        SEG_ACQ_COMMAND = REG_ACQ_COMMAND\n\n        REG_STATUS = \"STATUS\"\n        SEG_PROC_ERROR_FLAG = \"PROC_ERROR_FLAG\"\n        SEG_HEALTH_FLAG = \"HEALTH_FLAG\"\n        SEG_SECONDARY_RET_FLAG = \"SECONDARY_RET_FLAG\"\n        SEG_INVALID_SIGNAL_FLAG = \"INVALID_SIGNAL_FLAG\"\n        SEG_SIGNAL_OVERFLOW_FLAG = \"SIGNAL_OVERFLOW_FLAG\"\n        SEG_REFERENCE_OVERFLOW_FLAG = \"REFERENCE_OVERFLOW_FLAG\"\n        SEG_BUSY_FLAG = \"BUSY_FLAG\"\n\n        REG_VELOCITY = \"VELOCITY\"\n        SEG_VELOCITY= REG_VELOCITY\n        \n        REG_DISTANCE = \"DISTANCE\"\n        SEG_DISTANCE = REG_DISTANCE\n        \n        def __init__(self):\n            # Create some device specific I2C Object\n            self.i2c = ...\n            \n            # Configure control registers\n            self.controls = RegisterList(0x62, self.i2c, {})\n            self.controls.add(LightLiteV3.REG_ACQ_COMMAND, 0x00, Register.WRITE, {}) \\\n                .add(LightLiteV3.SEG_ACQ_COMMAND, 0, 7, [0] * 8)\n\n            self.controls.add(LightLiteV3.REG_STATUS, 0x01, Register.READ, {}) \\\n                .add(LightLiteV3.SEG_PROC_ERROR_FLAG, 6, 6, [0]) \\\n                .add(LightLiteV3.SEG_HEALTH_FLAG, 5, 5, [0]) \\\n                .add(LightLiteV3.SEG_SECONDARY_RET_FLAG, 4, 4, [0]) \\\n                .add(LightLiteV3.SEG_INVALID_SIGNAL_FLAG, 3, 3, [0]) \\\n                .add(LightLiteV3.SEG_SIGNAL_OVERFLOW_FLAG, 2, 2, [0]) \\\n                .add(LightLiteV3.SEG_REFERENCE_OVERFLOW_FLAG, 1, 1, [0]) \\\n                .add(LightLiteV3.SEG_BUSY_FLAG, 0, 0, [0])\n\n            self.controls.add(LightLiteV3.REG_VELOCITY, 0x09, Register.READ, {})\\\n                .add(LightLiteV3.SEG_VELOCITY, 0, 7, [0] * 8)\n\n            self.controls.add(LightLiteV3.REG_DISTANCE, 0x8f, Register.READ, {})\\\n                .add(LightLiteV3.SEG_DISTANCE, 0, 15, [0] * 16)\n                \n        # Provide useful helper methods\n        def measure(self):\n            self.controls.set_bits_from_int(LidarLiteV3.REG_ACQ_COMMAND, LidarLiteV3.SEG_ACQ_COMMAND, 0x04, write_after=True)\n             \n        def distance(self):\n            return self.controls.to_int(LidarLiteV3.REG_DISTANCE, LidarLiteV3.SEG_DISTANCE, read_first=True)\n        \n        def velocity(self):\n            return self.controls.to_int(LidarLiteV3.REG_VELOCITY, LidarLiteV3.SEG_VELOCITY, read_first=True)\n\n    # Now using your hardware has never been easier\n    lidar = LidarLiteV3()\n\n    while True:\n        lidar.measure()\n        print(\"Car is going {} m/s when it was {} m away\".format(lidar.velocity(), lidar.distance()))\n\nDevelopment\n===========\n\nThe code for I2C Register is located in the ``py_i2c_register``\ndirectory. Feel free to contribute by opening a pull request. I try to\ntest and document as much as I can.\n\nSupported Python Versions: 2.7, 3.6\n\nRunning Tests\n-------------\n\nTo run tests a couple python packages are required. To install them you\ncan run the ``test-install`` Make target:\n\n.. code:: bash\n\n    make test-install\n\nYou can then run test by executing the ``test`` Make target:\n\n.. code:: bash\n\n    make test\n\nTo see a more detailed HTML report you can run the ``test-html`` Make\ntarget. The results will then be saved to ``htmlcov/index.html``.\n\nDistribution\n============\n\nThis repository provides a PIP package called ``py-i2c-register``. To\npublish this distribution a variety of helpers are provided in the\nMakefile.\n\nSetup\n-----\n\nThe `Pandoc <http://pandoc.org>`__ tool is required for the release\nprocess along with some miscellaneous Python packages. Please refer to\nthe `Pandoc Website <http://pandoc.org/installing.html>`__ for\ninstallation instructions. You can install the misc. Python packages\nwith the ``dist-install`` Make target:\n\n.. code:: bash\n\n    make dist-install\n\nYou can verify that all distribution dependencies are install and\naccessible by running the ``dist-check`` Make target. If it exits\nsuccessfully all dependencies were found.\n\nFinally you must create ``.pypirc`` file in your home directory with the\ncontents:\n\n::\n\n    [distutils]\n    index-servers=pypi\n\n    [pypi]\n    repository = https://upload.pypi.org/legacy/\n    username = Your Username\n    password = Your Password\n\nThis gives the PyPi release tool some basic configuration options and\nyour credentials.\n\nSteps\n-----\n\nThis section details the steps required to release this package.\n\n1. Test\n\n   -  Ensure that all tests pass by running the ``test`` Make target:\n\n      .. code:: bash\n\n          make test \n\n2. Clean and build\n\n   -  Clean up previous distribution materials by running the\n      ``dist-clean`` Make target:\n\n      .. code:: bash\n\n          make dist-clean\n\n   -  Build the distribution by running the ``dist-build`` Make target:\n\n      .. code:: bash\n\n          make dist-build\n\n3. Upload\n\n   -  Upload the distribution to PyPi by running the ``dist-upload``\n      Make target:\n\n      .. code:: bash\n\n          make dist-upload\n\n   -  This requires that you have a ``.pypirc`` file setup with your\n      username and password\n\nThe Makefile provides a useful target which runs steps 1 and 2 under one\ncommand named ``dist``. However the upload step must still be completed\nseparately.\n\n.. |Build Status| image:: https://travis-ci.org/Noah-Huppert/py-i2c-register.svg?branch=master\n   :target: https://travis-ci.org/Noah-Huppert/py-i2c-register\n.. |Test Coverage| image:: https://codeclimate.com/github/Noah-Huppert/py-i2c-register/badges/coverage.svg\n   :target: https://codeclimate.com/github/Noah-Huppert/py-i2c-register/coverage", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Noah-Huppert/py-i2c-register", "keywords": "library i2c registers", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-i2c-register", "package_url": "https://pypi.org/project/py-i2c-register/", "platform": "", "project_url": "https://pypi.org/project/py-i2c-register/", "project_urls": {"Homepage": "https://github.com/Noah-Huppert/py-i2c-register"}, "release_url": "https://pypi.org/project/py-i2c-register/0.0.8/", "requires_dist": null, "requires_python": "", "summary": "Python wrapper library around the common I2C controller register pattern.", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"python-i2c-register-build-status-test-coverage\">\n<h2>Python I2C Register <a href=\"https://travis-ci.org/Noah-Huppert/py-i2c-register\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9284dda3ddc8039ac25ab6d9c6d052d4b795860d/68747470733a2f2f7472617669732d63692e6f72672f4e6f61682d487570706572742f70792d6932632d72656769737465722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codeclimate.com/github/Noah-Huppert/py-i2c-register/coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c84e2b1f9b482cd94d71402e53b48661643614a1/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f4e6f61682d487570706572742f70792d6932632d72656769737465722f6261646765732f636f7665726167652e737667\"></a></h2>\n<p>Python wrapper library around the common I2C controller register\npattern.</p>\n<p>I2C Register is a python library which aims to make communicating with\nregisters on I2C devices dead simple. It is meant to directly transfer\nthe Register Definitions pages of a data sheet into your program.</p>\n</div>\n<div id=\"table-of-contents\">\n<h2>Table Of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quick-example\" rel=\"nofollow\">Quick Example</a></li>\n<li><a href=\"#systems-overview\" rel=\"nofollow\">Systems Overview</a><ul>\n<li><a href=\"#creating-a-registerlist\" rel=\"nofollow\">Creating a RegisterList</a></li>\n<li><a href=\"#defining-registers\" rel=\"nofollow\">Defining Registers</a></li>\n<li><a href=\"#adding-registersegments\" rel=\"nofollow\">Adding RegisterSegments</a></li>\n<li><a href=\"#reading-from-registersegments\" rel=\"nofollow\">Reading from RegisterSegments</a></li>\n<li><a href=\"#writing-to-registersegments\" rel=\"nofollow\">Writing to RegisterSegments</a></li>\n</ul>\n</li>\n<li><a href=\"#writing-wrapper-classes\" rel=\"nofollow\">Writting Wrapper Classes</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a><ul>\n<li><a href=\"#running-tests\" rel=\"nofollow\">Running Tests</a></li>\n</ul>\n</li>\n<li><a href=\"#distribution\" rel=\"nofollow\">Distribution</a><ul>\n<li><a href=\"#setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#steps\" rel=\"nofollow\">Steps</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>I2C Register is available as a PIP package with the name\n<tt><span class=\"pre\">py-i2c-register</span></tt>.</p>\n<p>Simply use PIP to install:</p>\n<pre>pip install --user py-i2c-register\n</pre>\n<p>You will then be able to include the <tt>py_i2c_register</tt> module and its\nvarious classes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register_list</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register</span> <span class=\"kn\">import</span> <span class=\"n\">Register</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register_segment</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterSegment</span>\n</pre>\n</div>\n<div id=\"quick-example\">\n<h2>Quick Example</h2>\n<p>Take these control register definitions from a data sheet:</p>\n<div>\n<img alt=\"Example Hardware Data Sheet Register Definitions page 1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1adf3bbffdca1d54742aaa6a4a9a8dcdd33d6a5e/68747470733a2f2f6769746875622e636f6d2f4e6f61682d487570706572742f70792d6932632d72656769737465722f626c6f622f6d61737465722f646f63732f696d672f6578616d706c652d72656769737465722d646566732d70312e706e673f7261773d74727565\">\n<p>Example Hardware Data Sheet Register Definitions page 1</p>\n</div>\n<div>\n<img alt=\"Example Hardware Data Sheet Register Definitions page 2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b0c87bc76bafc6f98cccd18c5e50cadd537736d/68747470733a2f2f6769746875622e636f6d2f4e6f61682d487570706572742f70792d6932632d72656769737465722f626c6f622f6d61737465722f646f63732f696d672f6578616d706c652d72656769737465722d646566732d70322e706e673f7261773d74727565\">\n<p>Example Hardware Data Sheet Register Definitions page 2</p>\n</div>\n<p>With the help of the I2C Register library they can easily be represented\nand manipulated.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register_list</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register</span> <span class=\"kn\">import</span> <span class=\"n\">Register</span>\n\n<span class=\"c1\"># Create RegisterList instance to hold registers, device's i2c address is 0x62</span>\n<span class=\"n\">controls</span> <span class=\"o\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"mh\">0x62</span><span class=\"p\">,</span> <span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n\n<span class=\"c1\"># Add a definition for an ACQ_COMMAND (Acquisition Command) register, address 0x00 with WRITE permissions</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">)</span>  <span class=\"c1\"># Define the segment of bits to read with LSB index of 0 and MSB index of 7</span>\n\n<span class=\"c1\"># Add a definition for a STATUS register, address 0x01 with READ permissions</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"STATUS\"</span><span class=\"p\">,</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span> \\\n    <span class=\"c1\"># Define various individual Register Segments which each signify different parts of the status</span>\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"PROC_ERROR_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"HEALTH_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"SECONDARY_RET_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"INVALID_SIGNAL_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"SIGNAL_OVERFLOW_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"REFERENCE_OVERFLOW_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"BUSY_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Add a definition for a VELOCITY register, address 0x09 with READ permissions</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"mh\">0x09</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">)</span>  <span class=\"c1\"># Define the segment of bits to read for velocity value with LSB index of 0 and MSB index of 7</span>\n\n\n<span class=\"c1\"># Super simple to read and write values</span>\n<span class=\"c1\"># Set ACQ_COMMAND Register bits to value of 0x04, then write to register</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">set_bits_from_int</span><span class=\"p\">(</span><span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"mh\">0x04</span><span class=\"p\">,</span> <span class=\"n\">write_after</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read STATUS register for BUSY_FLAG value and convert to an integer</span>\n<span class=\"n\">busy</span> <span class=\"o\">=</span> <span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">(</span><span class=\"s2\">\"STATUS\"</span><span class=\"p\">,</span> <span class=\"s2\">\"BUSY_FLAG\"</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read VELOCITY register and convert to two's compliment integer</span>\n<span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_twos_comp_int</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"systems-overview\">\n<h2>Systems Overview</h2>\n<p>The main class this library provides is the <tt>RegisterList</tt> class. This\nclass manages a list of <tt>Register</tt> definitions. It also provides some\nuseful helper methods to make performing certain common actions quick\nand easy.</p>\n<div id=\"creating-a-registerlist\">\n<h3>Creating a RegisterList</h3>\n<p>To create a <tt>RegisterList</tt> import the <tt>register_list.RegisterList</tt>\nclass. Then call the constructor giving it a I2C device address, an <a href=\"/docs/i2c-object.md\" rel=\"nofollow\">I2C\nObject</a>, and any <tt>Register</tt>s you have\nalready defined:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register_list</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterList</span>\n<span class=\"n\">controls</span> <span class=\"o\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"mh\">0x62</span><span class=\"p\">,</span> <span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n</pre>\n<p>The provided I2C Device address will be used to contact the device which\nholds the registers over I2C. The <a href=\"/docs/i2c-object.md\" rel=\"nofollow\">I2C Object</a>\ndepends on your platform, see the\n<a href=\"/docs/i2c-object.md\" rel=\"nofollow\">documentation</a> for more information. In most\ncases you can provide an empty <tt>Register</tt> map as well.</p>\n</div>\n<div id=\"defining-registers\">\n<h3>Defining Registers</h3>\n<p>After you create a <tt>RegisterList</tt> you must define some <tt>Register</tt>s\nto control. A <tt>Register</tt> is defined by a name (for easy programmatic\naccess), an I2C address, and a string containing IO operation\npermissions. The <tt>RegisterList</tt> class provides a useful\n<tt>add(reg_name, reg_addr, reg_permissions, reg_segments)</tt> method for\nadding <tt>Register</tt>s.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register</span> <span class=\"kn\">import</span> <span class=\"n\">Register</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"REGISTER_NAME\"</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"n\">Registers</span><span class=\"o\">.</span><span class=\"n\">READ</span> <span class=\"o\">+</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n</pre>\n<p>This would define a <tt>Register</tt> with the name <tt>REGISTER_NAME</tt>, the\naddress <tt>0x00</tt> and the permission to read and write to/from it.</p>\n</div>\n<div id=\"adding-registersegments\">\n<h3>Adding RegisterSegments</h3>\n<p>To actually read or write to/from a <tt>Register</tt> you need to define at\nleast one <tt>RegisterSegment</tt>. These describe how bits read from\nregisters map to sub values. This could be useful if a device for\nexample: provides a health register and each bit represents a different\nsystem\u2019s health. You define <tt>RegisterSegment</tt>s by giving a name (for\neasy programmatic access) and the index of the segment\u2019s least and most\nsignificant bits. The previously mentioned <tt>RegisterList.add()</tt> method\nreturns the <tt>Register</tt> that it just created. You can then in turn use\na similar helper method that <tt>Register</tt> provides called\n<tt>add(seg_name, lsb_i, msb_i, default_bits)</tt>:</p>\n<pre><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"HEALTH\"</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"n\">Registers</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"LEFT_MOTOR_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"RIGHT_MOTOR_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\\\n    <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"NETWORK_FLAG\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre>\n<p>This would define a <tt>Register</tt> named <tt>HEALTH</tt> at address <tt>0x00</tt>\nwith read permissions. This <tt>Register</tt> would have 3\n<tt>RegisterSegment</tt>s. These 3 register segments would look at bits 0,\n1, and 2 for the status of the left and right motors as well as some\nmade up network module.</p>\n</div>\n<div id=\"reading-from-registersegments\">\n<h3>Reading from RegisterSegments</h3>\n<p>The <tt>RegisterList</tt> provides some useful helper methods for reading\n<tt>RegisterSegment</tt>s as integer values. They are called <tt>to_int</tt> and\n<tt>to_twos_comp_int</tt>. They both take the name of a <tt>Register</tt> and\n<tt>RegisterSegment</tt> to read. Optionally you can pass a <tt>read_first</tt>\nvalue. When <tt>True</tt> these methods will read the <tt>Register</tt> off the\nI2C device before returning the <tt>RegisterSegment</tt> value:</p>\n<pre><span class=\"n\">network_status</span> <span class=\"o\">=</span> <span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">(</span><span class=\"s2\">\"HEALTH\"</span><span class=\"p\">,</span> <span class=\"s2\">\"NETWORK_FLAG\"</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">velocity</span> <span class=\"o\">=</span> <span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_twos_comp_int</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>This would read the <tt>NETWORK_FLAG</tt> segment of the <tt>HEALTH</tt> register\nand the <tt>VELOCITY</tt> segment of the <tt>VELOCITY</tt> register.</p>\n<p>Ontop of using <tt>RegisterList</tt>s helper methods one can access raw\n<tt>RegisterSegment</tt> values via the <tt>RegisterSegment.bits</tt> array. This\narray contains the raw <tt>0</tt> or <tt>1</tt> values of the register. Just be\nsure to call <tt>Register.read</tt> before accessing the\n<tt>RegisterSegment.bits</tt> array:</p>\n<pre><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">velocity_bits</span> <span class=\"o\">=</span> <span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"VELOCITY\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bits</span>\n</pre>\n</div>\n<div id=\"writing-to-registersegments\">\n<h3>Writing to RegisterSegments</h3>\n<p>The <tt>RegisterList</tt> class provides the <tt>set_bits</tt> and\n<tt>set_bits_from_int</tt> helper methods. Similar to the reading helper\nmethods mentioned above <tt>set_bits</tt> and <tt>set_bits_from_int</tt> both also\ntake a <tt>Register</tt> and <tt>RegisterSegment</tt> name as their first two\nparameters. The third value of both functions is the value to set. In\nthe case of the <tt>set_bits</tt> method it is expected to be an array of\nbits to set. In the case of the <tt>set_bits_from_int</tt> method it is\nexpected to be an integer value to set. The <tt>set_bits</tt> and\n<tt>set_bits_from_int</tt> methods also offer an optional <tt>write_after</tt>\nflag. If <tt>True</tt> they will write the value of the <tt>Register</tt> to the\nI2C device after the value has been set.</p>\n<pre><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">set_bits</span><span class=\"p\">(</span><span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">write_after</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">set_bits_from_int</span><span class=\"p\">(</span><span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ACQ_COMMAND\"</span><span class=\"p\">,</span> <span class=\"mh\">0x04</span><span class=\"p\">,</span> <span class=\"n\">write_after</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>This would set the <tt>ACQ_COMMAND</tt> segment of the <tt>ACQ_COMMAND</tt>\nregister to the value <tt>0x04</tt> using the <tt>set_bits</tt> and\n<tt>set_bits_from_int</tt> methods.</p>\n</div>\n</div>\n<div id=\"writing-wrapper-classes\">\n<h2>Writing Wrapper Classes</h2>\n<p>I2C Register\u2019s simple architecture lends itself well to being used in\nhardware wrapper classes. All one must do is create a class with its own\n<tt>RegisterList</tt> instance. Then add <tt>Register</tt> and <tt>RegisterSegment</tt>\ndefinitions in the <tt>__init__()</tt> method:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register_list</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_i2c_register.register</span> <span class=\"kn\">import</span> <span class=\"n\">Register</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LidarLiteV3</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Register and Segment name constants</span>\n    <span class=\"n\">REG_ACQ_COMMAND</span> <span class=\"o\">=</span> <span class=\"s2\">\"ACQ_COMMAND\"</span>\n    <span class=\"n\">SEG_ACQ_COMMAND</span> <span class=\"o\">=</span> <span class=\"n\">REG_ACQ_COMMAND</span>\n\n    <span class=\"n\">REG_STATUS</span> <span class=\"o\">=</span> <span class=\"s2\">\"STATUS\"</span>\n    <span class=\"n\">SEG_PROC_ERROR_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"PROC_ERROR_FLAG\"</span>\n    <span class=\"n\">SEG_HEALTH_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"HEALTH_FLAG\"</span>\n    <span class=\"n\">SEG_SECONDARY_RET_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"SECONDARY_RET_FLAG\"</span>\n    <span class=\"n\">SEG_INVALID_SIGNAL_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"INVALID_SIGNAL_FLAG\"</span>\n    <span class=\"n\">SEG_SIGNAL_OVERFLOW_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"SIGNAL_OVERFLOW_FLAG\"</span>\n    <span class=\"n\">SEG_REFERENCE_OVERFLOW_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"REFERENCE_OVERFLOW_FLAG\"</span>\n    <span class=\"n\">SEG_BUSY_FLAG</span> <span class=\"o\">=</span> <span class=\"s2\">\"BUSY_FLAG\"</span>\n\n    <span class=\"n\">REG_VELOCITY</span> <span class=\"o\">=</span> <span class=\"s2\">\"VELOCITY\"</span>\n    <span class=\"n\">SEG_VELOCITY</span><span class=\"o\">=</span> <span class=\"n\">REG_VELOCITY</span>\n\n    <span class=\"n\">REG_DISTANCE</span> <span class=\"o\">=</span> <span class=\"s2\">\"DISTANCE\"</span>\n    <span class=\"n\">SEG_DISTANCE</span> <span class=\"o\">=</span> <span class=\"n\">REG_DISTANCE</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Create some device specific I2C Object</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i2c</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n        <span class=\"c1\"># Configure control registers</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span> <span class=\"o\">=</span> <span class=\"n\">RegisterList</span><span class=\"p\">(</span><span class=\"mh\">0x62</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">i2c</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_ACQ_COMMAND</span><span class=\"p\">,</span> <span class=\"mh\">0x00</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span> <span class=\"p\">{})</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_ACQ_COMMAND</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_STATUS</span><span class=\"p\">,</span> <span class=\"mh\">0x01</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_PROC_ERROR_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_HEALTH_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_SECONDARY_RET_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_INVALID_SIGNAL_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_SIGNAL_OVERFLOW_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_REFERENCE_OVERFLOW_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> \\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_BUSY_FLAG</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_VELOCITY</span><span class=\"p\">,</span> <span class=\"mh\">0x09</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_VELOCITY</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_DISTANCE</span><span class=\"p\">,</span> <span class=\"mh\">0x8f</span><span class=\"p\">,</span> <span class=\"n\">Register</span><span class=\"o\">.</span><span class=\"n\">READ</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\\\n            <span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">LightLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_DISTANCE</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Provide useful helper methods</span>\n    <span class=\"k\">def</span> <span class=\"nf\">measure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">set_bits_from_int</span><span class=\"p\">(</span><span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_ACQ_COMMAND</span><span class=\"p\">,</span> <span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_ACQ_COMMAND</span><span class=\"p\">,</span> <span class=\"mh\">0x04</span><span class=\"p\">,</span> <span class=\"n\">write_after</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">(</span><span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_DISTANCE</span><span class=\"p\">,</span> <span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_DISTANCE</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">velocity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">controls</span><span class=\"o\">.</span><span class=\"n\">to_int</span><span class=\"p\">(</span><span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">REG_VELOCITY</span><span class=\"p\">,</span> <span class=\"n\">LidarLiteV3</span><span class=\"o\">.</span><span class=\"n\">SEG_VELOCITY</span><span class=\"p\">,</span> <span class=\"n\">read_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Now using your hardware has never been easier</span>\n<span class=\"n\">lidar</span> <span class=\"o\">=</span> <span class=\"n\">LidarLiteV3</span><span class=\"p\">()</span>\n\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">lidar</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Car is going </span><span class=\"si\">{}</span><span class=\"s2\"> m/s when it was </span><span class=\"si\">{}</span><span class=\"s2\"> m away\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">lidar</span><span class=\"o\">.</span><span class=\"n\">velocity</span><span class=\"p\">(),</span> <span class=\"n\">lidar</span><span class=\"o\">.</span><span class=\"n\">distance</span><span class=\"p\">()))</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The code for I2C Register is located in the <tt>py_i2c_register</tt>\ndirectory. Feel free to contribute by opening a pull request. I try to\ntest and document as much as I can.</p>\n<p>Supported Python Versions: 2.7, 3.6</p>\n<div id=\"running-tests\">\n<h3>Running Tests</h3>\n<p>To run tests a couple python packages are required. To install them you\ncan run the <tt><span class=\"pre\">test-install</span></tt> Make target:</p>\n<pre>make test-install\n</pre>\n<p>You can then run test by executing the <tt>test</tt> Make target:</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<p>To see a more detailed HTML report you can run the <tt><span class=\"pre\">test-html</span></tt> Make\ntarget. The results will then be saved to <tt>htmlcov/index.html</tt>.</p>\n</div>\n</div>\n<div id=\"distribution\">\n<h2>Distribution</h2>\n<p>This repository provides a PIP package called <tt><span class=\"pre\">py-i2c-register</span></tt>. To\npublish this distribution a variety of helpers are provided in the\nMakefile.</p>\n<div id=\"setup\">\n<h3>Setup</h3>\n<p>The <a href=\"http://pandoc.org\" rel=\"nofollow\">Pandoc</a> tool is required for the release\nprocess along with some miscellaneous Python packages. Please refer to\nthe <a href=\"http://pandoc.org/installing.html\" rel=\"nofollow\">Pandoc Website</a> for\ninstallation instructions. You can install the misc. Python packages\nwith the <tt><span class=\"pre\">dist-install</span></tt> Make target:</p>\n<pre>make dist-install\n</pre>\n<p>You can verify that all distribution dependencies are install and\naccessible by running the <tt><span class=\"pre\">dist-check</span></tt> Make target. If it exits\nsuccessfully all dependencies were found.</p>\n<p>Finally you must create <tt>.pypirc</tt> file in your home directory with the\ncontents:</p>\n<pre>[distutils]\nindex-servers=pypi\n\n[pypi]\nrepository = https://upload.pypi.org/legacy/\nusername = Your Username\npassword = Your Password\n</pre>\n<p>This gives the PyPi release tool some basic configuration options and\nyour credentials.</p>\n</div>\n<div id=\"steps\">\n<h3>Steps</h3>\n<p>This section details the steps required to release this package.</p>\n<ol>\n<li><p>Test</p>\n<ul>\n<li><p>Ensure that all tests pass by running the <tt>test</tt> Make target:</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n</li>\n</ul>\n</li>\n<li><p>Clean and build</p>\n<ul>\n<li><p>Clean up previous distribution materials by running the\n<tt><span class=\"pre\">dist-clean</span></tt> Make target:</p>\n<pre>make dist-clean\n</pre>\n</li>\n<li><p>Build the distribution by running the <tt><span class=\"pre\">dist-build</span></tt> Make target:</p>\n<pre>make dist-build\n</pre>\n</li>\n</ul>\n</li>\n<li><p>Upload</p>\n<ul>\n<li><p>Upload the distribution to PyPi by running the <tt><span class=\"pre\">dist-upload</span></tt>\nMake target:</p>\n<pre>make dist-upload\n</pre>\n</li>\n<li><p>This requires that you have a <tt>.pypirc</tt> file setup with your\nusername and password</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>The Makefile provides a useful target which runs steps 1 and 2 under one\ncommand named <tt>dist</tt>. However the upload step must still be completed\nseparately.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2753153, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "08c590c5ced7c42c46a6e1e1f124166c", "sha256": "fe7c95be58d1933a2992b0ee3000bbd437a9618252f568af49e370db58617e95"}, "downloads": -1, "filename": "py-i2c-register-0.0.1.tar.gz", "has_sig": false, "md5_digest": "08c590c5ced7c42c46a6e1e1f124166c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13492, "upload_time": "2017-04-04T15:39:43", "upload_time_iso_8601": "2017-04-04T15:39:43.195564Z", "url": "https://files.pythonhosted.org/packages/76/bc/810e200ce20964c216c8bebb57801bb3e8c9a7fad678364ef0eec33c76f8/py-i2c-register-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "75d9a6360a4ee524b1835026c49531e9", "sha256": "ec36133b11891cae50db901c4499a0645d5069e1284989fe9a89951929318cdf"}, "downloads": -1, "filename": "py-i2c-register-0.0.2.tar.gz", "has_sig": false, "md5_digest": "75d9a6360a4ee524b1835026c49531e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13493, "upload_time": "2017-04-04T15:41:45", "upload_time_iso_8601": "2017-04-04T15:41:45.389245Z", "url": "https://files.pythonhosted.org/packages/bf/64/32eb86efbe91f165d764105a60ba5c5a61bfa8e5799225fe2f5149dc42e8/py-i2c-register-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "02bfe771539154400f7b9f6754d7692e", "sha256": "d6888ce14924dadff8ff26930430196571289059ed8e69a0f3d2a52f36ab5a54"}, "downloads": -1, "filename": "py-i2c-register-0.0.3.tar.gz", "has_sig": false, "md5_digest": "02bfe771539154400f7b9f6754d7692e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15083, "upload_time": "2017-04-04T16:49:47", "upload_time_iso_8601": "2017-04-04T16:49:47.008841Z", "url": "https://files.pythonhosted.org/packages/75/65/f6ba24fa25495d99e702798d84c3037f9bdbb15c794336e3a4fc9ce701f8/py-i2c-register-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "6c46d8006bf0007926ebc74df9b2aa02", "sha256": "9826f2f1683f5de9539d668f056b1a57b2628783edde0329994dcedcd68ac18d"}, "downloads": -1, "filename": "py-i2c-register-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6c46d8006bf0007926ebc74df9b2aa02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15094, "upload_time": "2017-04-04T16:55:26", "upload_time_iso_8601": "2017-04-04T16:55:26.101937Z", "url": "https://files.pythonhosted.org/packages/b7/97/a0ed424e24c614020776a12461521cc88f1e104221d059e5b2297d783d69/py-i2c-register-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "35347ca57102854cd38e5369def83665", "sha256": "832def38050839bcf07f952ad06ea1cf5d790f51e7dd901068e6ef1a3ce721ca"}, "downloads": -1, "filename": "py-i2c-register-0.0.5.tar.gz", "has_sig": false, "md5_digest": "35347ca57102854cd38e5369def83665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15096, "upload_time": "2017-04-04T17:01:40", "upload_time_iso_8601": "2017-04-04T17:01:40.542982Z", "url": "https://files.pythonhosted.org/packages/7e/dd/77ececa1f1bb8c7706e04d3bb86bde74399a3bb7deb3408434f5b28289f4/py-i2c-register-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "8fcbe06c3c3076cf2bff622a7c9a0612", "sha256": "c9df83df480728093ba6056e3789d74a4c4692c9727e508e26bcbc46e5c49e2e"}, "downloads": -1, "filename": "py-i2c-register-0.0.6.tar.gz", "has_sig": false, "md5_digest": "8fcbe06c3c3076cf2bff622a7c9a0612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15112, "upload_time": "2017-04-04T17:04:50", "upload_time_iso_8601": "2017-04-04T17:04:50.975470Z", "url": "https://files.pythonhosted.org/packages/19/41/fc689c1ea6285571b9648c2e4b1cfdda5e7db45e6e5fd88f24e64ac37024/py-i2c-register-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7a321f8c03cfd6c17819c6cd5108f68e", "sha256": "87db22a037f222cb0774b18e37ba38340b96a7f5b9899d8049561c26de06dfbc"}, "downloads": -1, "filename": "py-i2c-register-0.0.7.tar.gz", "has_sig": false, "md5_digest": "7a321f8c03cfd6c17819c6cd5108f68e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16157, "upload_time": "2017-04-04T20:48:23", "upload_time_iso_8601": "2017-04-04T20:48:23.317461Z", "url": "https://files.pythonhosted.org/packages/c5/bc/481ca780b7c99f150aa6194090fc72608b3d389c53e5761736802f24ab9e/py-i2c-register-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "18909219c7f9e1c84885b7a6bf706137", "sha256": "42ac9c9475252a177a08745b34888d69c91d69149249cb50c7faf082127094a7"}, "downloads": -1, "filename": "py-i2c-register-0.0.8.tar.gz", "has_sig": false, "md5_digest": "18909219c7f9e1c84885b7a6bf706137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16241, "upload_time": "2017-04-04T21:00:37", "upload_time_iso_8601": "2017-04-04T21:00:37.769407Z", "url": "https://files.pythonhosted.org/packages/d4/83/9cdb8238b72eab114a6fc101598a44bf0749e0e05f386aa4f3f0553f86e2/py-i2c-register-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18909219c7f9e1c84885b7a6bf706137", "sha256": "42ac9c9475252a177a08745b34888d69c91d69149249cb50c7faf082127094a7"}, "downloads": -1, "filename": "py-i2c-register-0.0.8.tar.gz", "has_sig": false, "md5_digest": "18909219c7f9e1c84885b7a6bf706137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16241, "upload_time": "2017-04-04T21:00:37", "upload_time_iso_8601": "2017-04-04T21:00:37.769407Z", "url": "https://files.pythonhosted.org/packages/d4/83/9cdb8238b72eab114a6fc101598a44bf0749e0e05f386aa4f3f0553f86e2/py-i2c-register-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:13 2020"}