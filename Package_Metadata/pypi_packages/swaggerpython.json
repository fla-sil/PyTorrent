{"info": {"author": "Digium, Inc and Infectious Media", "author_email": "sre@infectiousmedia.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Swagger Python\n--------------\n\nThis is an update of swaggerpython, with Python3 support and a few fixes.\n\nPRs and issues welcome.\n\nAbout\n-----\n\nSwagger.py is a Python library for using\n`Swagger <https://developers.helloreverb.com/swagger/>`__ defined API's.\n\nSwagger itself is best described on the Swagger home page:\n\n    Swagger is a specification and complete framework implementation for\n    describing, producing, consuming, and visualizing RESTful web\n    services.\n\nThe `Swagger\nspecification <https://github.com/wordnik/swagger-core/wiki>`__ defines\nhow API's may be described using Swagger.\n\nSwagger.py also supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.\n\nUsage\n-----\n\nInstall the latest release from PyPI.  This is our forked version.\n\n::\n\n    $ sudo pip install swaggerpython\n\nOr install from source using the ``setup.py`` script.\n\n::\n\n    $ sudo ./setup.py install\n\nAPI\n===\n\nSwagger.py will dynamically build an object model from a Swagger-enabled\nRESTful API.\n\nHere is a simple example using the `Asterisk REST\nInterface <https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI>`__\n\n.. code:: Python\n\n    #!/usr/bin/env python\n\n    import json\n\n    from swaggerpython.client import SwaggerClient\n    from swaggerpython.http_client import SynchronousHttpClient\n\n    http_client = SynchronousHttpClient()\n    http_client.set_basic_auth('localhost', 'hey', 'peekaboo')\n\n    ari = SwaggerClient(\n        \"http://localhost:8088/ari/api-docs/resources.json\",\n        http_client=http_client)\n\n    ws = ari.events.eventWebsocket(app='hello')\n\n    for msg_str in iter(lambda: ws.recv(), None):\n        msg_json = json.loads(msg_str)\n        if msg_json['type'] == 'StasisStart':\n            channelId = msg_json['channel']['id']\n            ari.channels.answer(channelId=channelId)\n            ari.channels.play(channelId=channelId,\n                              media='sound:hello-world')\n            ari.channels.continueInDialplan(channelId=channelId)\n\nswagger-codegen\n===============\n\nThere are the beginnings of a Mustache-based code generator, but it's\nnot functional... yet.\n\n.. Inspired by the original [swagger-codegen][] project, templates are\n   written using [Mustache][] templates ([Pystache][], specifically).\n   There are several important differences.\n\n    * The model that is fed into the mustache templates is almost\n      identical to Swagger's API resource listing and API declaration\n      model. The differences are listed [below](#model).\n    * The templates themselves are completely self contained, with the\n      logic to enrich the model being specified in `translate.py` in the\n      same directory as the `*.mustache` files.\n\nData model\n==========\n\nThe data model presented by the ``swagger_model`` module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a ``_author`` or ``_copyright`` field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.\n\nThere are a few meaningful differences.\n\n-  Resource listing\n-  The ``file`` and ``base_dir`` fields have been added, referencing the\n   original ``.json`` file.\n-  The objects in a ``resource_listing``'s ``api`` array contains a\n   field ``api_declaration``, which is the processed result from the\n   referenced API doc.\n-  API declaration\n-  A ``file`` field has been added, referencing the original ``.json``\n   file.\n\nDevelopment\n-----------\n\nThe code is documented using `Sphinx <http://sphinx-doc.org/>`__, which\nallows `IntelliJ IDEA <http://confluence.jetbrains.net/display/PYH/>`__\nto do a better job at inferring types for autocompletion.\n\nTo keep things isolated, I also recommend installing (and using)\n`virtualenv <http://www.virtualenv.org/>`__.\n\n::\n\n    $ sudo pip install virtualenv\n    $ mkdir -p ~/virtualenv\n    $ virtualenv ~/virtualenv/swagger\n    $ . ~/virtualenv/swagger/bin/activate\n\n`Setuptools <http://pypi.python.org/pypi/setuptools>`__ is used for\nbuilding. `Nose <http://nose.readthedocs.org/en/latest/>`__ is used\nfor unit testing, with the `coverage\n<http://nedbatchelder.com/code/coverage/>`__ plugin installed to\ngenerated code coverage reports. Pass ``--with-coverage`` to generate\nthe code coverage report. HTML versions of the reports are put in\n``cover/index.html``.\n\n::\n\n    $ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n    $ ./setup.py nosetests # run unit tests\n    $ ./setup.py bdist_egg # build distributable\n\n\nTODO\n----\n\nmypy?\n\n\nLicense\n-------\n\nCopyright (c) 2013, Digium, Inc. All rights reserved.\n\nSwagger.py is licensed with a `BSD 3-Clause\nLicense <http://opensource.org/licenses/BSD-3-Clause>`__.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/poogles/swagger-python", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "swaggerpython", "package_url": "https://pypi.org/project/swaggerpython/", "platform": "", "project_url": "https://pypi.org/project/swaggerpython/", "project_urls": {"Homepage": "https://github.com/poogles/swagger-python"}, "release_url": "https://pypi.org/project/swaggerpython/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Library for accessing Swagger-enabled API's", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"swagger-python\">\n<h2>Swagger Python</h2>\n<p>This is an update of swaggerpython, with Python3 support and a few fixes.</p>\n<p>PRs and issues welcome.</p>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>Swagger.py is a Python library for using\n<a href=\"https://developers.helloreverb.com/swagger/\" rel=\"nofollow\">Swagger</a> defined API\u2019s.</p>\n<p>Swagger itself is best described on the Swagger home page:</p>\n<blockquote>\nSwagger is a specification and complete framework implementation for\ndescribing, producing, consuming, and visualizing RESTful web\nservices.</blockquote>\n<p>The <a href=\"https://github.com/wordnik/swagger-core/wiki\" rel=\"nofollow\">Swagger\nspecification</a> defines\nhow API\u2019s may be described using Swagger.</p>\n<p>Swagger.py also supports a WebSocket extension, allowing a WebSocket to\nbe documented, and auto-generated WebSocket client code.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Install the latest release from PyPI.  This is our forked version.</p>\n<pre>$ sudo pip install swaggerpython\n</pre>\n<p>Or install from source using the <tt>setup.py</tt> script.</p>\n<pre>$ sudo ./setup.py install\n</pre>\n<div id=\"api\">\n<h3>API</h3>\n<p>Swagger.py will dynamically build an object model from a Swagger-enabled\nRESTful API.</p>\n<p>Here is a simple example using the <a href=\"https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI\" rel=\"nofollow\">Asterisk REST\nInterface</a></p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">swaggerpython.client</span> <span class=\"kn\">import</span> <span class=\"n\">SwaggerClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">swaggerpython.http_client</span> <span class=\"kn\">import</span> <span class=\"n\">SynchronousHttpClient</span>\n\n<span class=\"n\">http_client</span> <span class=\"o\">=</span> <span class=\"n\">SynchronousHttpClient</span><span class=\"p\">()</span>\n<span class=\"n\">http_client</span><span class=\"o\">.</span><span class=\"n\">set_basic_auth</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"s1\">'hey'</span><span class=\"p\">,</span> <span class=\"s1\">'peekaboo'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ari</span> <span class=\"o\">=</span> <span class=\"n\">SwaggerClient</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"http://localhost:8088/ari/api-docs/resources.json\"</span><span class=\"p\">,</span>\n    <span class=\"n\">http_client</span><span class=\"o\">=</span><span class=\"n\">http_client</span><span class=\"p\">)</span>\n\n<span class=\"n\">ws</span> <span class=\"o\">=</span> <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">eventWebsocket</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">msg_str</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(),</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">msg_json</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">msg_str</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'StasisStart'</span><span class=\"p\">:</span>\n        <span class=\"n\">channelId</span> <span class=\"o\">=</span> <span class=\"n\">msg_json</span><span class=\"p\">[</span><span class=\"s1\">'channel'</span><span class=\"p\">][</span><span class=\"s1\">'id'</span><span class=\"p\">]</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">,</span>\n                          <span class=\"n\">media</span><span class=\"o\">=</span><span class=\"s1\">'sound:hello-world'</span><span class=\"p\">)</span>\n        <span class=\"n\">ari</span><span class=\"o\">.</span><span class=\"n\">channels</span><span class=\"o\">.</span><span class=\"n\">continueInDialplan</span><span class=\"p\">(</span><span class=\"n\">channelId</span><span class=\"o\">=</span><span class=\"n\">channelId</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"swagger-codegen\">\n<h3>swagger-codegen</h3>\n<p>There are the beginnings of a Mustache-based code generator, but it\u2019s\nnot functional\u2026 yet.</p>\n</div>\n<div id=\"data-model\">\n<h3>Data model</h3>\n<p>The data model presented by the <tt>swagger_model</tt> module is nearly\nidentical to the original Swagger API resource listing and API\ndeclaration. This means that if you add extra custom metadata to your\ndocs (such as a <tt>_author</tt> or <tt>_copyright</tt> field), they will carry\nforward into the object model. I recommend prefixing custom fields with\nan underscore, to avoid collisions with future versions of Swagger.</p>\n<p>There are a few meaningful differences.</p>\n<ul>\n<li>Resource listing</li>\n<li>The <tt>file</tt> and <tt>base_dir</tt> fields have been added, referencing the\noriginal <tt>.json</tt> file.</li>\n<li>The objects in a <tt>resource_listing</tt>\u2019s <tt>api</tt> array contains a\nfield <tt>api_declaration</tt>, which is the processed result from the\nreferenced API doc.</li>\n<li>API declaration</li>\n<li>A <tt>file</tt> field has been added, referencing the original <tt>.json</tt>\nfile.</li>\n</ul>\n</div>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The code is documented using <a href=\"http://sphinx-doc.org/\" rel=\"nofollow\">Sphinx</a>, which\nallows <a href=\"http://confluence.jetbrains.net/display/PYH/\" rel=\"nofollow\">IntelliJ IDEA</a>\nto do a better job at inferring types for autocompletion.</p>\n<p>To keep things isolated, I also recommend installing (and using)\n<a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a>.</p>\n<pre>$ sudo pip install virtualenv\n$ mkdir -p ~/virtualenv\n$ virtualenv ~/virtualenv/swagger\n$ . ~/virtualenv/swagger/bin/activate\n</pre>\n<p><a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">Setuptools</a> is used for\nbuilding. <a href=\"http://nose.readthedocs.org/en/latest/\" rel=\"nofollow\">Nose</a> is used\nfor unit testing, with the <a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> plugin installed to\ngenerated code coverage reports. Pass <tt><span class=\"pre\">--with-coverage</span></tt> to generate\nthe code coverage report. HTML versions of the reports are put in\n<tt>cover/index.html</tt>.</p>\n<pre>$ ./setup.py develop   # prep for development (install deps, launchers, etc.)\n$ ./setup.py nosetests # run unit tests\n$ ./setup.py bdist_egg # build distributable\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>mypy?</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2013, Digium, Inc. All rights reserved.</p>\n<p>Swagger.py is licensed with a <a href=\"http://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\">BSD 3-Clause\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 3541259, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "ac713ecf703d507231179da2a16270d4", "sha256": "5b7f1ce88d141efbfda48189be26b943a726d00423de5ea7598e7a48913074cc"}, "downloads": -1, "filename": "swaggerpython-0.2.2.tar.gz", "has_sig": false, "md5_digest": "ac713ecf703d507231179da2a16270d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15250, "upload_time": "2018-02-01T11:20:31", "upload_time_iso_8601": "2018-02-01T11:20:31.559419Z", "url": "https://files.pythonhosted.org/packages/7b/00/632cbaeb4af1ddf2b1616db92b2d4bc0894c6b8c2d22a8cc7ea471fc4b79/swaggerpython-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0fd77e44e2ddab2367fb8dedf371c77d", "sha256": "643346c3294d525be8506c285b487b8623a4a5967c5c90c550c74b1966ba3864"}, "downloads": -1, "filename": "swaggerpython-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0fd77e44e2ddab2367fb8dedf371c77d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15357, "upload_time": "2018-02-01T11:25:18", "upload_time_iso_8601": "2018-02-01T11:25:18.731793Z", "url": "https://files.pythonhosted.org/packages/8e/a4/62ebbe36788f73b84d4d0ff41146edf89fd723e8f568d5cbdc9d2df41e38/swaggerpython-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0fd77e44e2ddab2367fb8dedf371c77d", "sha256": "643346c3294d525be8506c285b487b8623a4a5967c5c90c550c74b1966ba3864"}, "downloads": -1, "filename": "swaggerpython-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0fd77e44e2ddab2367fb8dedf371c77d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15357, "upload_time": "2018-02-01T11:25:18", "upload_time_iso_8601": "2018-02-01T11:25:18.731793Z", "url": "https://files.pythonhosted.org/packages/8e/a4/62ebbe36788f73b84d4d0ff41146edf89fd723e8f568d5cbdc9d2df41e38/swaggerpython-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:44 2020"}