{"info": {"author": "sobolevn", "author_email": "mail@sobolevn.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# classes\n\n[![classes logo](https://raw.githubusercontent.com/dry-python/brand/master/logo/classes.png)](https://github.com/dry-python/classes)\n\n-----\n\n[![Build Status](https://travis-ci.org/dry-python/classes.svg?branch=master)](https://travis-ci.org/dry-python/classes)\n[![Coverage Status](https://coveralls.io/repos/github/dry-python/classes/badge.svg?branch=master)](https://coveralls.io/github/dry-python/classes?branch=master)\n[![Documentation Status](https://readthedocs.org/projects/classes/badge/?version=latest)](https://classes.readthedocs.io/en/latest/?badge=latest)\n[![Python Version](https://img.shields.io/pypi/pyversions/classes.svg)](https://pypi.org/project/classes/)\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n-----\n\nSmart, pythonic, ad-hoc, typed polymorphism for Python.\n\n\n## Features\n\n- Provides a bunch of primitives to write declarative business logic\n- Enforces better architecture\n- Fully typed with annotations and checked with `mypy`, [PEP561 compatible](https://www.python.org/dev/peps/pep-0561/)\n- Allows to write a lot of simple code without inheritance or interfaces\n- Pythonic and pleasant to write and to read (!)\n- Easy to start: has lots of docs, tests, and tutorials\n\n\n## Installation\n\n```bash\npip install classes\n```\n\nYou also need to [configure](https://classes.readthedocs.io/en/latest/pages/container.html#type-safety)\n`mypy` correctly and install our plugin\nto fix [this existing issue](https://github.com/python/mypy/issues/3157):\n\n```ini\n# In setup.cfg or mypy.ini:\n[mypy]\nplugins =\n  classes.contrib.mypy.typeclass_plugin\n```\n\n**Without this step**, your project will report type-violations here and there.\n\nWe also recommend to use the same `mypy` settings [we use](https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml).\n\nMake sure you know how to get started, [check out our docs](https://classes.readthedocs.io/en/latest/)!\n\n\n## Example\n\nImagine, that you want to bound implementation to some particular type.\nLike, strings behave like this, numbers behave like that, and so on.\n\nThe good realworld example is `djangorestframework`.\nIt is build around the idea that different\ndata types should be converted differently to and from `json` format.\n\nWhat is the \"traditional\" (or outdated if you will!) approach?\nTo create tons of classes for different data types and use them.\n\nThat's how we end up with classes like so:\n\n```python\nclass IntField(Field):\n    def from_json(self, value):\n        return value\n\n    def to_json(self, value):\n        return value\n```\n\nIt literally has a lot of problems:\n\n- It is hard to type this code. How can I be sure that my `json` will be parsed by the given schema?\n- It contains a lot of boilerplate\n- It has complex API: there are usually several methods to override, some fields to adjust. Moreover, we use a class, not a callable\n- It is hard to extend the default library for new custom types you will have in your own project\n\nThere should be a better way of solving this problem!\nAnd typeclasses are a better way!\n\nHow would new API look like with this concept?\n\n```python\n>>> from typing import Union\n>>> from classes import typeclass\n>>> @typeclass\n... def to_json(instance) -> str:\n...     \"\"\"This is a typeclass definition to covert things to json.\"\"\"\n...\n>>> @to_json.instance(int)\n... @to_json.instance(float)\n... def _to_json_int(instance: Union[int, float]) -> str:\n...     return str(instance)\n...\n>>> @to_json.instance(bool)\n... def _to_json_bool(instance: bool) -> str:\n...     return 'true' if instance else 'false'\n...\n>>> @to_json.instance(list)\n... def _to_json_list(instance: list) -> str:\n...     return '[{0}]'.format(\n...         ', '.join(to_json(list_item) for list_item in instance),\n...     )\n...\n\n```\n\nSee how easy it is to works with types and implementation?\n\nTypeclass is represented as a regular function, so you can use it like one:\n\n```python\n>>> to_json(True)\n'true'\n>>> to_json(1)\n'1'\n>>> to_json([False, 1, 2])\n'[false, 1, 2]'\n\n```\n\nAnd it easy to extend this typeclass with your own classes as well:\n\n```python\n>>> # Pretending to import the existing library from somewhere:\n>>> # from to_json import to_json\n>>> import datetime as dt\n>>> @to_json.instance(dt.datetime)\n... def _to_json_datetime(instance: dt.datetime) -> str:\n...     return instance.isoformat()\n...\n>>> to_json(dt.datetime(2019, 10, 31, 12, 28, 00))\n'2019-10-31T12:28:00'\n\n```\n\nThat's how simple, safe, and powerful typeclasses are!\nMake sure to [check out our docs](https://github.com/dry-python/classes) to learn more.\n\n\n## License\n\nBSD 2-Clause\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://kinds.readthedocs.io", "keywords": "functional programming,fp,composition,type-safety,mypy,stubs", "license": "BSD-2-Clause", "maintainer": "sobolevn", "maintainer_email": "mail@sobolevn.me", "name": "kinds", "package_url": "https://pypi.org/project/kinds/", "platform": "", "project_url": "https://pypi.org/project/kinds/", "project_urls": {"Homepage": "https://kinds.readthedocs.io", "Repository": "https://github.com/dry-python/kinds"}, "release_url": "https://pypi.org/project/kinds/0.0.1/", "requires_dist": ["typing_extensions (>=3.7,<4.0)"], "requires_python": ">=3.6,<4.0", "summary": "Smart, pythonic, ad-hoc, typed polymorphism for Python", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>classes</h1>\n<p><a href=\"https://github.com/dry-python/classes\" rel=\"nofollow\"><img alt=\"classes logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d8c413147b4ca8108caadbd9fa5a353efea12af/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6472792d707974686f6e2f6272616e642f6d61737465722f6c6f676f2f636c61737365732e706e67\"></a></p>\n<hr>\n<p><a href=\"https://travis-ci.org/dry-python/classes\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/284d24e9793017006aaf7b18ee68868a597b1454/68747470733a2f2f7472617669732d63692e6f72672f6472792d707974686f6e2f636c61737365732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/dry-python/classes?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/643a38656fd5d08b2e23ab4a23fafc194c64f63a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6472792d707974686f6e2f636c61737365732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://classes.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dbd7e5d9137759f129f3c153ade92a8c8c445ef/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636c61737365732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pypi.org/project/classes/\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f83e529e54f21002246f2c7343315770d76368d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636c61737365732e737667\"></a>\n<a href=\"https://github.com/wemake-services/wemake-python-styleguide\" rel=\"nofollow\"><img alt=\"wemake-python-styleguide\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8b7ab66b651e55b1e788d412c25d402dfc132f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d77656d616b652d3030303030302e737667\"></a>\n<a href=\"http://mypy-lang.org/\" rel=\"nofollow\"><img alt=\"Checked with mypy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0db8f5dcbf5f340f278004d5db3d16b4cdf33ba/687474703a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667\"></a></p>\n<hr>\n<p>Smart, pythonic, ad-hoc, typed polymorphism for Python.</p>\n<h2>Features</h2>\n<ul>\n<li>Provides a bunch of primitives to write declarative business logic</li>\n<li>Enforces better architecture</li>\n<li>Fully typed with annotations and checked with <code>mypy</code>, <a href=\"https://www.python.org/dev/peps/pep-0561/\" rel=\"nofollow\">PEP561 compatible</a></li>\n<li>Allows to write a lot of simple code without inheritance or interfaces</li>\n<li>Pythonic and pleasant to write and to read (!)</li>\n<li>Easy to start: has lots of docs, tests, and tutorials</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install classes\n</pre>\n<p>You also need to <a href=\"https://classes.readthedocs.io/en/latest/pages/container.html#type-safety\" rel=\"nofollow\">configure</a>\n<code>mypy</code> correctly and install our plugin\nto fix <a href=\"https://github.com/python/mypy/issues/3157\" rel=\"nofollow\">this existing issue</a>:</p>\n<pre><span class=\"c1\"># In setup.cfg or mypy.ini:</span>\n<span class=\"k\">[mypy]</span>\n<span class=\"na\">plugins</span> <span class=\"o\">=</span><span class=\"s\"></span>\n<span class=\"s\">  classes.contrib.mypy.typeclass_plugin</span>\n</pre>\n<p><strong>Without this step</strong>, your project will report type-violations here and there.</p>\n<p>We also recommend to use the same <code>mypy</code> settings <a href=\"https://github.com/wemake-services/wemake-python-styleguide/blob/master/styles/mypy.toml\" rel=\"nofollow\">we use</a>.</p>\n<p>Make sure you know how to get started, <a href=\"https://classes.readthedocs.io/en/latest/\" rel=\"nofollow\">check out our docs</a>!</p>\n<h2>Example</h2>\n<p>Imagine, that you want to bound implementation to some particular type.\nLike, strings behave like this, numbers behave like that, and so on.</p>\n<p>The good realworld example is <code>djangorestframework</code>.\nIt is build around the idea that different\ndata types should be converted differently to and from <code>json</code> format.</p>\n<p>What is the \"traditional\" (or outdated if you will!) approach?\nTo create tons of classes for different data types and use them.</p>\n<p>That's how we end up with classes like so:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">IntField</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n</pre>\n<p>It literally has a lot of problems:</p>\n<ul>\n<li>It is hard to type this code. How can I be sure that my <code>json</code> will be parsed by the given schema?</li>\n<li>It contains a lot of boilerplate</li>\n<li>It has complex API: there are usually several methods to override, some fields to adjust. Moreover, we use a class, not a callable</li>\n<li>It is hard to extend the default library for new custom types you will have in your own project</li>\n</ul>\n<p>There should be a better way of solving this problem!\nAnd typeclasses are a better way!</p>\n<p>How would new API look like with this concept?</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Union</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">classes</span> <span class=\"kn\">import</span> <span class=\"n\">typeclass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@typeclass</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">to_json</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"s2\">\"\"\"This is a typeclass definition to covert things to json.\"\"\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@to_json</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"nd\">@to_json</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">_to_json_int</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@to_json</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">_to_json_bool</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s1\">'true'</span> <span class=\"k\">if</span> <span class=\"n\">instance</span> <span class=\"k\">else</span> <span class=\"s1\">'false'</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@to_json</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">_to_json_list</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s1\">'[</span><span class=\"si\">{0}</span><span class=\"s1\">]'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">list_item</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">list_item</span> <span class=\"ow\">in</span> <span class=\"n\">instance</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>     <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>See how easy it is to works with types and implementation?</p>\n<p>Typeclass is represented as a regular function, so you can use it like one:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">'true'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_json</span><span class=\"p\">([</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"s1\">'[false, 1, 2]'</span>\n</pre>\n<p>And it easy to extend this typeclass with your own classes as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Pretending to import the existing library from somewhere:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># from to_json import to_json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@to_json</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">_to_json_datetime</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">to_json</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">))</span>\n<span class=\"s1\">'2019-10-31T12:28:00'</span>\n</pre>\n<p>That's how simple, safe, and powerful typeclasses are!\nMake sure to <a href=\"https://github.com/dry-python/classes\" rel=\"nofollow\">check out our docs</a> to learn more.</p>\n<h2>License</h2>\n<p>BSD 2-Clause</p>\n\n          </div>"}, "last_serial": 6064702, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "77f6ffc380963d90757c14f430394e39", "sha256": "f5bff6521f9255852a5a5d10de0f51aed3ab9f1d4fbdf0af1f3648c5ee740dcc"}, "downloads": -1, "filename": "kinds-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "77f6ffc380963d90757c14f430394e39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4040, "upload_time": "2019-11-01T15:50:31", "upload_time_iso_8601": "2019-11-01T15:50:31.963184Z", "url": "https://files.pythonhosted.org/packages/50/dc/361ce2fd219c553aaf3ae4f9b341a9d1d2a6621cab95e4f5eb5f15def9a9/kinds-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e120fd3465564bd2107768581693147", "sha256": "99e2b2a973c027de138f85dab4b5990c0b58c11848ca7b8913ac44769f0b6b6f"}, "downloads": -1, "filename": "kinds-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3e120fd3465564bd2107768581693147", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4689, "upload_time": "2019-11-01T15:50:35", "upload_time_iso_8601": "2019-11-01T15:50:35.122786Z", "url": "https://files.pythonhosted.org/packages/b4/e2/b026c9b0d7d14afb0f9928cfb7f438cc53182a2064fac8cddcb2c5597fa6/kinds-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "77f6ffc380963d90757c14f430394e39", "sha256": "f5bff6521f9255852a5a5d10de0f51aed3ab9f1d4fbdf0af1f3648c5ee740dcc"}, "downloads": -1, "filename": "kinds-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "77f6ffc380963d90757c14f430394e39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4040, "upload_time": "2019-11-01T15:50:31", "upload_time_iso_8601": "2019-11-01T15:50:31.963184Z", "url": "https://files.pythonhosted.org/packages/50/dc/361ce2fd219c553aaf3ae4f9b341a9d1d2a6621cab95e4f5eb5f15def9a9/kinds-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e120fd3465564bd2107768581693147", "sha256": "99e2b2a973c027de138f85dab4b5990c0b58c11848ca7b8913ac44769f0b6b6f"}, "downloads": -1, "filename": "kinds-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3e120fd3465564bd2107768581693147", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4689, "upload_time": "2019-11-01T15:50:35", "upload_time_iso_8601": "2019-11-01T15:50:35.122786Z", "url": "https://files.pythonhosted.org/packages/b4/e2/b026c9b0d7d14afb0f9928cfb7f438cc53182a2064fac8cddcb2c5597fa6/kinds-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:43 2020"}