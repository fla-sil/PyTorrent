{"info": {"author": "Andrey Mikhaylenko", "author_email": "neithere@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: User Interfaces"], "description": "Yaargh: Yet Another Argh\n========================\n\nYaargh is a fork of Argh (https://github.com/neithere/argh/).\n\nWhy fork?\n---------\n\nThe argh project is no longer maintained (https://github.com/neithere/argh/issues/124#issuecomment-383645696).\nThis project will attempt to fix issues and make improvements to the original project.\nThe intent is for all these changes to be made back to the original argh project\nwhen that becomes possible, and for yaargh to act as a replacement until it is.\n\nYou can use yaargh as a drop-in replacement for argh (`import yaargh as argh`)\nthough see Compatability below.\n\nIn order to support using yaargh automatically even in applications where you can't easily change\nthe code, the optional feature `yaargh[import-argh]` will add a dummy `argh` module such that\n`import argh` will use `yaargh`.\n\nHighlights\n----------\n\nThe most signifigant differences from ``argh``, and reasons you may prefer to use it:\n\n- Commands that fail with a ``CommandError`` now exit with status ``1`` (failure) instead of\n  status ``0`` (success). This is extremely important when used in scripts.\n\nCompatability\n-------------\n\nWhile yaargh strives to maintain backwards compatability with argh and its existing behavior,\nthe nature of a library like `argh` with a large amount of \"magic\" behavior and defaults\nmeans that what we consider the best default may change from version to version. For example,\nhelp text wording may change.\n\nIn addition, there is behavior that is almost always a bug but that it is technically possible\nsome users rely on.\n\nBoth kinds of compatability breaks are listed below:\n\n- If a function's type signature included a ``*varargs`` argument with an annotation of\n  type ``str``, this annotation previously was ignored. Now, that annotation will be used\n  as a help string. In almost all cases this should be fixing behavior to match user intent,\n  but it will technically result in different ``--help`` output.\n\n- Previously, if a function raised a ``yaargh.CommandError`` or an error explicitly marked as wrapped,\n  then ``yaargh.dispatch()`` (and by extension ``yaargh.dispatch_command()`` and ``yaargh.dispatch_commands()``)\n  would write the error message to the given ``error_file`` (by default ``sys.stderr``), then\n  return. It now raises a SystemExit instead of returning. In almost all cases, ``dispatch()`` is\n  the last thing the program does anyway, and parsing failures already caused a SystemExit to be\n  raised so most users who need to do something after error will already be catching it.\n  This is a signifigant break but is nessecary to allow non-zero exit codes for failed commands.\n\n- Related to the above, commands that fail with a ``yaargh.CommandError`` or other wrapped error\n  will now exit with status ``1``, indicating failure. Previously, unless the user did something to avoid it,\n  the command would have returned from ``yaargh.dispatch()`` and subsequently exited success.\n  In the vast majority of cases this would have been a latent bug likely to cause havoc in scripts\n  or other systems which rely on status code to check if a command succeeded.\n  You can use ``CommandError(message, code=0)`` to restore the previous behavior.\n\nOriginal README\n---------------\n\nBuilding a command-line interface?  Found yourself uttering \"argh!\" while\nstruggling with the API of `argparse`?  Don't like the complexity but need\nthe power?\n\n.. epigraph::\n\n    Everything should be made as simple as possible, but no simpler.\n\n    -- Albert Einstein (probably)\n\n`Argh` is a smart wrapper for `argparse`.  `Argparse` is a very powerful tool;\n`Argh` just makes it easy to use.\n\nIn a nutshell\n-------------\n\n`Argh`-powered applications are *simple* but *flexible*:\n\n:Modular:\n    Declaration of commands can be decoupled from assembling and dispatching;\n\n:Pythonic:\n    Commands are declared naturally, no complex API calls in most cases;\n\n:Reusable:\n    Commands are plain functions, can be used directly outside of CLI context;\n\n:Layered:\n    The complexity of code raises with requirements;\n\n:Transparent:\n    The full power of argparse is available whenever needed;\n\n:Namespaced:\n    Nested commands are a piece of cake, no messing with subparsers (though\n    they are of course used under the hood);\n\n:Term-Friendly:\n    Command output is processed with respect to stream encoding;\n\n:Unobtrusive:\n    `Argh` can dispatch a subset of pure-`argparse` code, and pure-`argparse`\n    code can update and dispatch a parser assembled with `Argh`;\n\n:DRY:\n    The amount of boilerplate code is minimal; among other things, `Argh` will:\n\n    * infer command name from function name;\n    * infer arguments from function signature;\n    * infer argument type from the default value;\n    * infer argument action from the default value (for booleans);\n    * add an alias root command ``help`` for the ``--help`` argument.\n\n:NIH free:\n    `Argh` supports *completion*, *progress bars* and everything else by being\n    friendly to excellent 3rd-party libraries.  No need to reinvent the wheel.\n\nSounds good?  Check the tutorial!\n\nRelation to argparse\n--------------------\n\n`Argh` is fully compatible with `argparse`.  You can mix `Argh`-agnostic and\n`Argh`-aware code.  Just keep in mind that the dispatcher does some extra work\nthat a custom dispatcher may not do.\n\nInstallation\n------------\n\nUsing pip::\n\n    $ pip install argh\n\nArch Linux (AUR)::\n\n    $ yaourt python-argh\n\nExamples\n--------\n\nA very simple application with one command:\n\n.. code-block:: python\n\n    import argh\n\n    def main():\n        return 'Hello world'\n\n    argh.dispatch_command(main)\n\nRun it:\n\n.. code-block:: bash\n\n    $ ./app.py\n    Hello world\n\nA potentially modular application with multiple commands:\n\n.. code-block:: python\n\n    import argh\n\n    # declaring:\n\n    def echo(text):\n        \"Returns given word as is.\"\n        return text\n\n    def greet(name, greeting='Hello'):\n        \"Greets the user with given name. The greeting is customizable.\"\n        return greeting + ', ' + name\n\n    # assembling:\n\n    parser = argh.ArghParser()\n    parser.add_commands([echo, greet])\n\n    # dispatching:\n\n    if __name__ == '__main__':\n        parser.dispatch()\n\nOf course it works:\n\n.. code-block:: bash\n\n    $ ./app.py greet Andy\n    Hello, Andy\n\n    $ ./app.py greet Andy -g Arrrgh\n    Arrrgh, Andy\n\nHere's the auto-generated help for this application (note how the docstrings\nare reused)::\n\n    $ ./app.py help\n\n    usage: app.py {echo,greet} ...\n\n    positional arguments:\n        echo        Returns given word as is.\n        greet       Greets the user with given name. The greeting is customizable.\n\n...and for a specific command (an ordinary function signature is converted\nto CLI arguments)::\n\n    $ ./app.py help greet\n\n    usage: app.py greet [-g GREETING] name\n\n    Greets the user with given name. The greeting is customizable.\n\n    positional arguments:\n      name\n\n    optional arguments:\n      -g GREETING, --greeting GREETING   'Hello'\n\n(The help messages have been simplified a bit for brevity.)\n\n`Argh` easily maps plain Python functions to CLI.  Sometimes this is not\nenough; in these cases the powerful API of `argparse` is also available:\n\n.. code-block:: python\n\n    @arg('text', default='hello world', nargs='+', help='The message')\n    def echo(text):\n        print text\n\nThe approaches can be safely combined even up to this level:\n\n.. code-block:: python\n\n    # adding help to `foo` which is in the function signature:\n    @arg('foo', help='blah')\n    # these are not in the signature so they go to **kwargs:\n    @arg('baz')\n    @arg('-q', '--quux')\n    # the function itself:\n    def cmd(foo, bar=1, *args, **kwargs):\n        yield foo\n        yield bar\n        yield ', '.join(args)\n        yield kwargs['baz']\n        yield kwargs['quux']\n\nLinks\n-----\n\n* `Project home page`_ (GitHub)\n* `Documentation`_ (Read the Docs)\n* `Package distribution`_ (PyPI)\n* Questions, requests, bug reports, etc.:\n\n  * `Issue tracker`_ (GitHub)\n  * `Mailing list`_ (subscribe to get important announcements)\n  * Direct e-mail (neithere at gmail com)\n\n.. _project home page: http://github.com/neithere/argh/\n.. _documentation: http://argh.readthedocs.org\n.. _package distribution: http://pypi.python.org/pypi/argh\n.. _issue tracker: http://github.com/neithere/argh/issues/\n.. _mailing list: http://groups.google.com/group/argh-users\n\nAuthor\n------\n\nDeveloped by Andrey Mikhaylenko since 2010.\n\nSee file `AUTHORS` for a complete list of contributors to this library.\n\nSupport\n-------\n\nThe fastest way to improve this project is to submit tested and documented\npatches or detailed bug reports.\n\nOtherwise you can \"flattr\" me: |FlattrLink|_\n\n.. _FlattrLink: https://flattr.com/submit/auto?user_id=neithere&url=http%3A%2F%2Fpypi.python.org%2Fpypi%2Fargh\n.. |FlattrLink| image:: https://api.flattr.com/button/flattr-badge-large.png\n   :alt: Flattr the Argh project\n\nLicensing\n---------\n\nArgh is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nArgh is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with Argh.  If not, see <http://gnu.org/licenses/>.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ekimekim/yaargh/", "keywords": "cli command line argparse optparse argument option", "license": "GNU Lesser General Public License (LGPL), Version 3", "maintainer": "Mike Lang", "maintainer_email": "mikelang3000+yaargh@gmail.com", "name": "yaargh", "package_url": "https://pypi.org/project/yaargh/", "platform": "", "project_url": "https://pypi.org/project/yaargh/", "project_urls": {"Homepage": "http://github.com/ekimekim/yaargh/"}, "release_url": "https://pypi.org/project/yaargh/0.28.0/", "requires_dist": null, "requires_python": "", "summary": "An unobtrusive argparse wrapper with natural syntax", "version": "0.28.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Yaargh is a fork of Argh (<a href=\"https://github.com/neithere/argh/\" rel=\"nofollow\">https://github.com/neithere/argh/</a>).</p>\n<div id=\"why-fork\">\n<h2>Why fork?</h2>\n<p>The argh project is no longer maintained (<a href=\"https://github.com/neithere/argh/issues/124#issuecomment-383645696\" rel=\"nofollow\">https://github.com/neithere/argh/issues/124#issuecomment-383645696</a>).\nThis project will attempt to fix issues and make improvements to the original project.\nThe intent is for all these changes to be made back to the original argh project\nwhen that becomes possible, and for yaargh to act as a replacement until it is.</p>\n<p>You can use yaargh as a drop-in replacement for argh (<cite>import yaargh as argh</cite>)\nthough see Compatability below.</p>\n<p>In order to support using yaargh automatically even in applications where you can\u2019t easily change\nthe code, the optional feature <cite>yaargh[import-argh]</cite> will add a dummy <cite>argh</cite> module such that\n<cite>import argh</cite> will use <cite>yaargh</cite>.</p>\n</div>\n<div id=\"highlights\">\n<h2>Highlights</h2>\n<p>The most signifigant differences from <tt>argh</tt>, and reasons you may prefer to use it:</p>\n<ul>\n<li>Commands that fail with a <tt>CommandError</tt> now exit with status <tt>1</tt> (failure) instead of\nstatus <tt>0</tt> (success). This is extremely important when used in scripts.</li>\n</ul>\n</div>\n<div id=\"compatability\">\n<h2>Compatability</h2>\n<p>While yaargh strives to maintain backwards compatability with argh and its existing behavior,\nthe nature of a library like <cite>argh</cite> with a large amount of \u201cmagic\u201d behavior and defaults\nmeans that what we consider the best default may change from version to version. For example,\nhelp text wording may change.</p>\n<p>In addition, there is behavior that is almost always a bug but that it is technically possible\nsome users rely on.</p>\n<p>Both kinds of compatability breaks are listed below:</p>\n<ul>\n<li>If a function\u2019s type signature included a <tt>*varargs</tt> argument with an annotation of\ntype <tt>str</tt>, this annotation previously was ignored. Now, that annotation will be used\nas a help string. In almost all cases this should be fixing behavior to match user intent,\nbut it will technically result in different <tt><span class=\"pre\">--help</span></tt> output.</li>\n<li>Previously, if a function raised a <tt>yaargh.CommandError</tt> or an error explicitly marked as wrapped,\nthen <tt>yaargh.dispatch()</tt> (and by extension <tt>yaargh.dispatch_command()</tt> and <tt>yaargh.dispatch_commands()</tt>)\nwould write the error message to the given <tt>error_file</tt> (by default <tt>sys.stderr</tt>), then\nreturn. It now raises a SystemExit instead of returning. In almost all cases, <tt>dispatch()</tt> is\nthe last thing the program does anyway, and parsing failures already caused a SystemExit to be\nraised so most users who need to do something after error will already be catching it.\nThis is a signifigant break but is nessecary to allow non-zero exit codes for failed commands.</li>\n<li>Related to the above, commands that fail with a <tt>yaargh.CommandError</tt> or other wrapped error\nwill now exit with status <tt>1</tt>, indicating failure. Previously, unless the user did something to avoid it,\nthe command would have returned from <tt>yaargh.dispatch()</tt> and subsequently exited success.\nIn the vast majority of cases this would have been a latent bug likely to cause havoc in scripts\nor other systems which rely on status code to check if a command succeeded.\nYou can use <tt>CommandError(message, code=0)</tt> to restore the previous behavior.</li>\n</ul>\n</div>\n<div id=\"original-readme\">\n<h2>Original README</h2>\n<p>Building a command-line interface?  Found yourself uttering \u201cargh!\u201d while\nstruggling with the API of <cite>argparse</cite>?  Don\u2019t like the complexity but need\nthe power?</p>\n<blockquote>\n<p>Everything should be made as simple as possible, but no simpler.</p>\n<p>\u2014Albert Einstein (probably)</p>\n</blockquote>\n<p><cite>Argh</cite> is a smart wrapper for <cite>argparse</cite>.  <cite>Argparse</cite> is a very powerful tool;\n<cite>Argh</cite> just makes it easy to use.</p>\n</div>\n<div id=\"in-a-nutshell\">\n<h2>In a nutshell</h2>\n<p><cite>Argh</cite>-powered applications are <em>simple</em> but <em>flexible</em>:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Modular:</th><td><p>Declaration of commands can be decoupled from assembling and dispatching;</p>\n</td>\n</tr>\n<tr><th>Pythonic:</th><td><p>Commands are declared naturally, no complex API calls in most cases;</p>\n</td>\n</tr>\n<tr><th>Reusable:</th><td><p>Commands are plain functions, can be used directly outside of CLI context;</p>\n</td>\n</tr>\n<tr><th>Layered:</th><td><p>The complexity of code raises with requirements;</p>\n</td>\n</tr>\n<tr><th>Transparent:</th><td><p>The full power of argparse is available whenever needed;</p>\n</td>\n</tr>\n<tr><th>Namespaced:</th><td><p>Nested commands are a piece of cake, no messing with subparsers (though\nthey are of course used under the hood);</p>\n</td>\n</tr>\n<tr><th>Term-Friendly:</th><td><p>Command output is processed with respect to stream encoding;</p>\n</td>\n</tr>\n<tr><th>Unobtrusive:</th><td><p><cite>Argh</cite> can dispatch a subset of pure-<cite>argparse</cite> code, and pure-<cite>argparse</cite>\ncode can update and dispatch a parser assembled with <cite>Argh</cite>;</p>\n</td>\n</tr>\n<tr><th>DRY:</th><td><p>The amount of boilerplate code is minimal; among other things, <cite>Argh</cite> will:</p>\n<ul>\n<li>infer command name from function name;</li>\n<li>infer arguments from function signature;</li>\n<li>infer argument type from the default value;</li>\n<li>infer argument action from the default value (for booleans);</li>\n<li>add an alias root command <tt>help</tt> for the <tt><span class=\"pre\">--help</span></tt> argument.</li>\n</ul>\n</td>\n</tr>\n<tr><th>NIH free:</th><td><p><cite>Argh</cite> supports <em>completion</em>, <em>progress bars</em> and everything else by being\nfriendly to excellent 3rd-party libraries.  No need to reinvent the wheel.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Sounds good?  Check the tutorial!</p>\n</div>\n<div id=\"relation-to-argparse\">\n<h2>Relation to argparse</h2>\n<p><cite>Argh</cite> is fully compatible with <cite>argparse</cite>.  You can mix <cite>Argh</cite>-agnostic and\n<cite>Argh</cite>-aware code.  Just keep in mind that the dispatcher does some extra work\nthat a custom dispatcher may not do.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using pip:</p>\n<pre>$ pip install argh\n</pre>\n<p>Arch Linux (AUR):</p>\n<pre>$ yaourt python-argh\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>A very simple application with one command:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argh</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Hello world'</span>\n\n<span class=\"n\">argh</span><span class=\"o\">.</span><span class=\"n\">dispatch_command</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<p>Run it:</p>\n<pre>$ ./app.py\nHello world\n</pre>\n<p>A potentially modular application with multiple commands:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argh</span>\n\n<span class=\"c1\"># declaring:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"s2\">\"Returns given word as is.\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s1\">'Hello'</span><span class=\"p\">):</span>\n    <span class=\"s2\">\"Greets the user with given name. The greeting is customizable.\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">greeting</span> <span class=\"o\">+</span> <span class=\"s1\">', '</span> <span class=\"o\">+</span> <span class=\"n\">name</span>\n\n<span class=\"c1\"># assembling:</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argh</span><span class=\"o\">.</span><span class=\"n\">ArghParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_commands</span><span class=\"p\">([</span><span class=\"n\">echo</span><span class=\"p\">,</span> <span class=\"n\">greet</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># dispatching:</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">()</span>\n</pre>\n<p>Of course it works:</p>\n<pre>$ ./app.py greet Andy\nHello, Andy\n\n$ ./app.py greet Andy -g Arrrgh\nArrrgh, Andy\n</pre>\n<p>Here\u2019s the auto-generated help for this application (note how the docstrings\nare reused):</p>\n<pre>$ ./app.py help\n\nusage: app.py {echo,greet} ...\n\npositional arguments:\n    echo        Returns given word as is.\n    greet       Greets the user with given name. The greeting is customizable.\n</pre>\n<p>\u2026and for a specific command (an ordinary function signature is converted\nto CLI arguments):</p>\n<pre>$ ./app.py help greet\n\nusage: app.py greet [-g GREETING] name\n\nGreets the user with given name. The greeting is customizable.\n\npositional arguments:\n  name\n\noptional arguments:\n  -g GREETING, --greeting GREETING   'Hello'\n</pre>\n<p>(The help messages have been simplified a bit for brevity.)</p>\n<p><cite>Argh</cite> easily maps plain Python functions to CLI.  Sometimes this is not\nenough; in these cases the powerful API of <cite>argparse</cite> is also available:</p>\n<pre><span class=\"nd\">@arg</span><span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'The message'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">text</span>\n</pre>\n<p>The approaches can be safely combined even up to this level:</p>\n<pre><span class=\"c1\"># adding help to `foo` which is in the function signature:</span>\n<span class=\"nd\">@arg</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'blah'</span><span class=\"p\">)</span>\n<span class=\"c1\"># these are not in the signature so they go to **kwargs:</span>\n<span class=\"nd\">@arg</span><span class=\"p\">(</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"nd\">@arg</span><span class=\"p\">(</span><span class=\"s1\">'-q'</span><span class=\"p\">,</span> <span class=\"s1\">'--quux'</span><span class=\"p\">)</span>\n<span class=\"c1\"># the function itself:</span>\n<span class=\"k\">def</span> <span class=\"nf\">cmd</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">foo</span>\n    <span class=\"k\">yield</span> <span class=\"n\">bar</span>\n    <span class=\"k\">yield</span> <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'baz'</span><span class=\"p\">]</span>\n    <span class=\"k\">yield</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'quux'</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"http://github.com/neithere/argh/\" rel=\"nofollow\">Project home page</a> (GitHub)</li>\n<li><a href=\"http://argh.readthedocs.org\" rel=\"nofollow\">Documentation</a> (Read the Docs)</li>\n<li><a href=\"http://pypi.python.org/pypi/argh\" rel=\"nofollow\">Package distribution</a> (PyPI)</li>\n<li>Questions, requests, bug reports, etc.:<ul>\n<li><a href=\"http://github.com/neithere/argh/issues/\" rel=\"nofollow\">Issue tracker</a> (GitHub)</li>\n<li><a href=\"http://groups.google.com/group/argh-users\" rel=\"nofollow\">Mailing list</a> (subscribe to get important announcements)</li>\n<li>Direct e-mail (neithere at gmail com)</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Developed by Andrey Mikhaylenko since 2010.</p>\n<p>See file <cite>AUTHORS</cite> for a complete list of contributors to this library.</p>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>The fastest way to improve this project is to submit tested and documented\npatches or detailed bug reports.</p>\n<p>Otherwise you can \u201cflattr\u201d me: <a href=\"https://flattr.com/submit/auto?user_id=neithere&amp;url=http%3A%2F%2Fpypi.python.org%2Fpypi%2Fargh\" rel=\"nofollow\"><img alt=\"Flattr the Argh project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b42550eca8c42d3bee354bdba548e69c6d743f2a/68747470733a2f2f6170692e666c617474722e636f6d2f627574746f6e2f666c617474722d62616467652d6c617267652e706e67\"></a></p>\n</div>\n<div id=\"licensing\">\n<h2>Licensing</h2>\n<p>Argh is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>Argh is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.</p>\n<p>You should have received a copy of the GNU Lesser General Public License\nalong with Argh.  If not, see &lt;<a href=\"http://gnu.org/licenses/\" rel=\"nofollow\">http://gnu.org/licenses/</a>&gt;.</p>\n</div>\n\n          </div>"}, "last_serial": 7162574, "releases": {"0.27.1": [{"comment_text": "", "digests": {"md5": "57030eba04b1853ab124dad9a0499bdb", "sha256": "29107d797e600ec2ff7da6e52ed6bca7a1d6ab104dd64106dbdddf0b585dd139"}, "downloads": -1, "filename": "yaargh-0.27.1.tar.gz", "has_sig": false, "md5_digest": "57030eba04b1853ab124dad9a0499bdb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49119, "upload_time": "2020-03-22T02:45:44", "upload_time_iso_8601": "2020-03-22T02:45:44.152783Z", "url": "https://files.pythonhosted.org/packages/82/9e/55640054716bcd1c343d364f8721f495d05ff88afc3312993d21073e08e0/yaargh-0.27.1.tar.gz", "yanked": false}], "0.28.0": [{"comment_text": "", "digests": {"md5": "9e115229bcadd85b557ddf4a71f86f93", "sha256": "7cb002ac126d649795ba442513894bc5b91eb336d07ad6048be40f3b3ae98aa5"}, "downloads": -1, "filename": "yaargh-0.28.0.tar.gz", "has_sig": false, "md5_digest": "9e115229bcadd85b557ddf4a71f86f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51065, "upload_time": "2020-05-04T09:51:29", "upload_time_iso_8601": "2020-05-04T09:51:29.972849Z", "url": "https://files.pythonhosted.org/packages/2b/eb/5a18bb06230ec0e786f40ea0cc091292bd68ad5c0a3282f335cbc1aa928b/yaargh-0.28.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e115229bcadd85b557ddf4a71f86f93", "sha256": "7cb002ac126d649795ba442513894bc5b91eb336d07ad6048be40f3b3ae98aa5"}, "downloads": -1, "filename": "yaargh-0.28.0.tar.gz", "has_sig": false, "md5_digest": "9e115229bcadd85b557ddf4a71f86f93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51065, "upload_time": "2020-05-04T09:51:29", "upload_time_iso_8601": "2020-05-04T09:51:29.972849Z", "url": "https://files.pythonhosted.org/packages/2b/eb/5a18bb06230ec0e786f40ea0cc091292bd68ad5c0a3282f335cbc1aa928b/yaargh-0.28.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:52 2020"}