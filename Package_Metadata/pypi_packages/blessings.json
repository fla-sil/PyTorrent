{"info": {"author": "Erik Rose", "author_email": "erikrose@grinchcentral.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Console :: Curses", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: User Interfaces", "Topic :: Terminals"], "description": "=========\nBlessings\n=========\n\nCoding with Blessings looks like this... ::\n\n    from blessings import Terminal\n\n    t = Terminal()\n\n    print t.bold('Hi there!')\n    print t.bold_red_on_bright_green('It hurts my eyes!')\n\n    with t.location(0, t.height - 1):\n        print 'This is at the bottom.'\n\nOr, for byte-level control, you can drop down and play with raw terminal\ncapabilities::\n\n    print '{t.bold}All your {t.red}bold and red base{t.normal}'.format(t=t)\n    print t.wingo(2)\n\n`Full API Reference <https://blessings.readthedocs.io/>`_\n\nThe Pitch\n=========\n\nBlessings lifts several of curses_' limiting assumptions, and it makes your\ncode pretty, too:\n\n* Use styles, color, and maybe a little positioning without necessarily\n  clearing the whole\n  screen first.\n* Leave more than one screenful of scrollback in the buffer after your program\n  exits, like a well-behaved command-line app should.\n* Get rid of all those noisy, C-like calls to ``tigetstr`` and ``tparm``, so\n  your code doesn't get crowded out by terminal bookkeeping.\n* Act intelligently when somebody redirects your output to a file, omitting the\n  terminal control codes the user doesn't want to see (optional).\n\n.. _curses: http://docs.python.org/library/curses.html\n\nBefore And After\n----------------\n\nWithout Blessings, this is how you'd print some underlined text at the bottom\nof the screen::\n\n    from curses import tigetstr, setupterm, tparm\n    from fcntl import ioctl\n    from os import isatty\n    import struct\n    import sys\n    from termios import TIOCGWINSZ\n\n    # If we want to tolerate having our output piped to other commands or\n    # files without crashing, we need to do all this branching:\n    if hasattr(sys.stdout, 'fileno') and isatty(sys.stdout.fileno()):\n        setupterm()\n        sc = tigetstr('sc')\n        cup = tigetstr('cup')\n        rc = tigetstr('rc')\n        underline = tigetstr('smul')\n        normal = tigetstr('sgr0')\n    else:\n        sc = cup = rc = underline = normal = ''\n    print sc  # Save cursor position.\n    if cup:\n        # tigetnum('lines') doesn't always update promptly, hence this:\n        height = struct.unpack('hhhh', ioctl(0, TIOCGWINSZ, '\\000' * 8))[0]\n        print tparm(cup, height - 1, 0)  # Move cursor to bottom.\n    print 'This is {under}underlined{normal}!'.format(under=underline,\n                                                      normal=normal)\n    print rc  # Restore cursor position.\n\nThat was long and full of incomprehensible trash! Let's try it again, this time\nwith Blessings::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    with term.location(0, term.height - 1):\n        print 'This is', term.underline('pretty!')\n\nMuch better.\n\nWhat It Provides\n================\n\nBlessings provides just one top-level object: ``Terminal``. Instantiating a\n``Terminal`` figures out whether you're on a terminal at all and, if so, does\nany necessary terminal setup. After that, you can proceed to ask it all sorts\nof things about the terminal. Terminal terminal terminal.\n\nSimple Formatting\n-----------------\n\nLots of handy formatting codes (\"capabilities\" in low-level parlance) are\navailable as attributes on a ``Terminal``. For example::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    print 'I am ' + term.bold + 'bold' + term.normal + '!'\n\nThough they are strings at heart, you can also use them as callable wrappers so\nyou don't have to say ``normal`` afterward::\n\n    print 'I am', term.bold('bold') + '!'\n\nOr, if you want fine-grained control while maintaining some semblance of\nbrevity, you can combine it with Python's string formatting, which makes\nattributes easy to access::\n\n    print 'All your {t.red}base {t.underline}are belong to us{t.normal}'.format(t=term)\n\nSimple capabilities of interest include...\n\n* ``bold``\n* ``reverse``\n* ``underline``\n* ``no_underline`` (which turns off underlining)\n* ``blink``\n* ``normal`` (which turns off everything, even colors)\n\nHere are a few more which are less likely to work on all terminals:\n\n* ``dim``\n* ``italic`` and ``no_italic``\n* ``shadow`` and ``no_shadow``\n* ``standout`` and ``no_standout``\n* ``subscript`` and ``no_subscript``\n* ``superscript`` and ``no_superscript``\n* ``flash`` (which flashes the screen once)\n\nNote that, while the inverse of ``underline`` is ``no_underline``, the only way\nto turn off ``bold`` or ``reverse`` is ``normal``, which also cancels any\ncustom colors. This is because there's no portable way to tell the terminal to\nundo certain pieces of formatting, even at the lowest level.\n\nYou might also notice that the above aren't the typical incomprehensible\nterminfo capability names; we alias a few of the harder-to-remember ones for\nreadability. However, you aren't limited to these: you can reference any\nstring-returning capability listed on the `terminfo man page`_ by the name\nunder the \"Cap-name\" column: for example, ``term.rum``.\n\n.. _`terminfo man page`: http://www.manpagez.com/man/5/terminfo/\n\nColor\n-----\n\n16 colors, both foreground and background, are available as easy-to-remember\nattributes::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    print term.red + term.on_green + 'Red on green? Ick!' + term.normal\n    print term.bright_red + term.on_bright_blue + 'This is even worse!' + term.normal\n\nYou can also call them as wrappers, which sets everything back to normal at the\nend::\n\n    print term.red_on_green('Red on green? Ick!')\n    print term.yellow('I can barely see it.')\n\nThe available colors are...\n\n* ``black``\n* ``red``\n* ``green``\n* ``yellow``\n* ``blue``\n* ``magenta``\n* ``cyan``\n* ``white``\n\nYou can set the background color instead of the foreground by prepending\n``on_``, as in ``on_blue``. There is also a ``bright`` version of each color:\nfor example, ``on_bright_blue``.\n\nThere is also a numerical interface to colors, which takes an integer from\n0-15::\n\n    term.color(5) + 'Hello' + term.normal\n    term.on_color(3) + 'Hello' + term.normal\n\n    term.color(5)('Hello')\n    term.on_color(3)('Hello')\n\nIf some color is unsupported (for instance, if only the normal colors are\navailable, not the bright ones), trying to use it will, on most terminals, have\nno effect: the foreground and background colors will stay as they were. You can\nget fancy and do different things depending on the supported colors by checking\n`number_of_colors`_.\n\n.. _`number_of_colors`: http://packages.python.org/blessings/#blessings.Terminal.number_of_colors\n\nCompound Formatting\n-------------------\n\nIf you want to do lots of crazy formatting all at once, you can just mash it\nall together::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    print term.bold_underline_green_on_yellow + 'Woo' + term.normal\n\nOr you can use your newly coined attribute as a wrapper, which implicitly sets\neverything back to normal afterward::\n\n    print term.bold_underline_green_on_yellow('Woo')\n\nThis compound notation comes in handy if you want to allow users to customize\nthe formatting of your app: just have them pass in a format specifier like\n\"bold_green\" on the command line, and do a quick ``getattr(term,\nthat_option)('Your text')`` when you do your formatting.\n\nI'd be remiss if I didn't credit couleur_, where I probably got the idea for\nall this mashing.\n\n.. _couleur: http://pypi.python.org/pypi/couleur\n\nMoving The Cursor\n-----------------\n\nWhen you want to move the cursor to output text at a specific spot, you have\na few choices.\n\nMoving Temporarily\n~~~~~~~~~~~~~~~~~~\n\nMost often, you'll need to flit to a certain location, print something, and\nthen return: for example, when updating a progress bar at the bottom of the\nscreen. ``Terminal`` provides a context manager for doing this concisely::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    with term.location(0, term.height - 1):\n        print 'Here is the bottom.'\n    print 'This is back where I came from.'\n\nParameters to ``location()`` are ``x`` and then ``y``, but you can also pass\njust one of them, leaving the other alone. For example... ::\n\n    with term.location(y=10):\n        print 'We changed just the row.'\n\nIf you're doing a series of ``move`` calls (see below) and want to return the\ncursor to its original position afterward, call ``location()`` with no\narguments, and it will do only the position restoring::\n\n    with term.location():\n        print term.move(1, 1) + 'Hi'\n        print term.move(9, 9) + 'Mom'\n\nNote that, since ``location()`` uses the terminal's built-in\nposition-remembering machinery, you can't usefully nest multiple calls. Use\n``location()`` at the outermost spot, and use simpler things like ``move``\ninside.\n\nMoving Permanently\n~~~~~~~~~~~~~~~~~~\n\nIf you just want to move and aren't worried about returning, do something like\nthis::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    print term.move(10, 1) + 'Hi, mom!'\n\n``move``\n  Position the cursor elsewhere. Parameters are y coordinate, then x\n  coordinate.\n``move_x``\n  Move the cursor to the given column.\n``move_y``\n  Move the cursor to the given row.\n\nHow does all this work? These are simply more terminal capabilities, wrapped to\ngive them nicer names. The added wrinkle--that they take parameters--is also\ngiven a pleasant treatment: rather than making you dig up ``tparm()`` all the\ntime, we simply make these capabilities into callable strings. You'd get the\nraw capability strings if you were to just print them, but they're fully\nparametrized if you pass params to them as if they were functions.\n\nConsequently, you can also reference any other string-returning capability\nlisted on the `terminfo man page`_ by its name under the \"Cap-name\" column.\n\n.. _`terminfo man page`: http://www.manpagez.com/man/5/terminfo/\n\nOne-Notch Movement\n~~~~~~~~~~~~~~~~~~\n\nFinally, there are some parameterless movement capabilities that move the\ncursor one character in various directions:\n\n* ``move_left``\n* ``move_right``\n* ``move_up``\n* ``move_down``\n\nFor example... ::\n\n    print term.move_up + 'Howdy!'\n\nHeight And Width\n----------------\n\nIt's simple to get the height and width of the terminal, in characters::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    height = term.height\n    width = term.width\n\nThese are newly updated each time you ask for them, so they're safe to use from\nSIGWINCH handlers.\n\nClearing The Screen\n-------------------\n\nBlessings provides syntactic sugar over some screen-clearing capabilities:\n\n``clear``\n  Clear the whole screen.\n``clear_eol``\n  Clear to the end of the line.\n``clear_bol``\n  Clear backward to the beginning of the line.\n``clear_eos``\n  Clear to the end of screen.\n\nFull-Screen Mode\n----------------\n\nPerhaps you have seen a full-screen program, such as an editor, restore the\nexact previous state of the terminal upon exiting, including, for example, the\ncommand-line prompt from which it was launched. Curses pretty much forces you\ninto this behavior, but Blessings makes it optional. If you want to do the\nstate-restoration thing, use these capabilities:\n\n``enter_fullscreen``\n    Switch to the terminal mode where full-screen output is sanctioned. Print\n    this before you do any output.\n``exit_fullscreen``\n    Switch back to normal mode, restoring the exact state from before\n    ``enter_fullscreen`` was used.\n\nUsing ``exit_fullscreen`` will wipe away any trace of your program's output, so\nreserve it for when you don't want to leave anything behind in the scrollback.\n\nThere's also a context manager you can use as a shortcut::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    with term.fullscreen():\n        # Print some stuff.\n\nBesides brevity, another advantage is that it switches back to normal mode even\nif an exception is raised in the ``with`` block.\n\nPipe Savvy\n----------\n\nIf your program isn't attached to a terminal, like if it's being piped to\nanother command or redirected to a file, all the capability attributes on\n``Terminal`` will return empty strings. You'll get a nice-looking file without\nany formatting codes gumming up the works.\n\nIf you want to override this--like if you anticipate your program being piped\nthrough ``less -r``, which handles terminal escapes just fine--pass\n``force_styling=True`` to the ``Terminal`` constructor.\n\nIn any case, there is a ``does_styling`` attribute on ``Terminal`` that lets\nyou see whether your capabilities will return actual, working formatting codes.\nIf it's false, you should refrain from drawing progress bars and other frippery\nand just stick to content, since you're apparently headed into a pipe::\n\n    from blessings import Terminal\n\n    term = Terminal()\n    if term.does_styling:\n        with term.location(0, term.height - 1):\n            print 'Progress: [=======>   ]'\n    print term.bold('Important stuff')\n\nShopping List\n=============\n\nThere are decades of legacy tied up in terminal interaction, so attention to\ndetail and behavior in edge cases make a difference. Here are some ways\nBlessings has your back:\n\n* Uses the terminfo database so it works with any terminal type\n* Provides up-to-the-moment terminal height and width, so you can respond to\n  terminal size changes (SIGWINCH signals). (Most other libraries query the\n  ``COLUMNS`` and ``LINES`` environment variables or the ``cols`` or ``lines``\n  terminal capabilities, which don't update promptly, if at all.)\n* Avoids making a mess if the output gets piped to a non-terminal\n* Works great with standard Python string templating\n* Provides convenient access to all terminal capabilities, not just a sugared\n  few\n* Outputs to any file-like object, not just stdout\n* Keeps a minimum of internal state, so you can feel free to mix and match with\n  calls to curses or whatever other terminal libraries you like\n\nBlessings does not provide...\n\n* Native color support on the Windows command prompt. However, it should work\n  when used in concert with colorama_.\n\n.. _colorama: http://pypi.python.org/pypi/colorama/0.2.4\n\nBugs\n====\n\nBugs or suggestions? Visit the `issue tracker`_.\n\n.. _`issue tracker`: https://github.com/erikrose/blessings/issues/\n\nBlessings tests are run automatically by `Travis CI`_.\n\n.. _`Travis CI`: https://travis-ci.org/erikrose/blessings/\n\n.. image:: https://travis-ci.org/erikrose/blessings.svg?branch=master\n    :target: https://travis-ci.org/erikrose/blessings\n\n\nLicense\n=======\n\nBlessings is under the MIT License. See the LICENSE file.\n\nVersion History\n===============\n\n1.7\n  * Drop support for Python 2.6 and 3.3, which are end-of-lifed.\n  * Switch from 2to3 to the ``six`` library.\n\n1.6.1\n  * Don't crash if ``number_of_colors()`` is called when run in a non-terminal\n    or when ``does_styling`` is otherwise false.\n\n1.6\n  * Add ``does_styling`` property. This takes ``force_styling`` into account\n    and should replace most uses of ``is_a_tty``.\n  * Make ``is_a_tty`` a read-only property, like ``does_styling``. Writing to\n    it never would have done anything constructive.\n  * Add ``fullscreen()`` and ``hidden_cursor()`` to the auto-generated docs.\n  * Fall back to ``LINES`` and ``COLUMNS`` environment vars to find height and\n    width. (jquast)\n  * Support terminal types, such as kermit and avatar, that use bytes 127-255\n    in their escape sequences. (jquast)\n\n1.5.1\n  * Clean up fabfile, removing the redundant ``test`` command.\n  * Add Travis support.\n  * Make ``python setup.py test`` work without spurious errors on 2.6.\n  * Work around a tox parsing bug in its config file.\n  * Make context managers clean up after themselves even if there's an\n    exception. (Vitja Makarov)\n  * Parametrizing a capability no longer crashes when there is no tty. (Vitja\n    Makarov)\n\n1.5\n  * Add syntactic sugar and documentation for ``enter_fullscreen`` and\n    ``exit_fullscreen``.\n  * Add context managers ``fullscreen()`` and ``hidden_cursor()``.\n  * Now you can force a ``Terminal`` never to emit styles by passing\n    ``force_styling=None``.\n\n1.4\n  * Add syntactic sugar for cursor visibility control and single-space-movement\n    capabilities.\n  * Endorse the ``location()`` idiom for restoring cursor position after a\n    series of manual movements.\n  * Fix a bug in which ``location()`` wouldn't do anything when passed zeroes.\n  * Allow tests to be run with ``python setup.py test``.\n\n1.3\n  * Added ``number_of_colors``, which tells you how many colors the terminal\n    supports.\n  * Made ``color(n)`` and ``on_color(n)`` callable to wrap a string, like the\n    named colors can. Also, make them both fall back to the ``setf`` and\n    ``setb`` capabilities (like the named colors do) if the ANSI ``setaf`` and\n    ``setab`` aren't available.\n  * Allowed ``color`` attr to act as an unparametrized string, not just a\n    callable.\n  * Made ``height`` and ``width`` examine any passed-in stream before falling\n    back to stdout. (This rarely if ever affects actual behavior; it's mostly\n    philosophical.)\n  * Made caching simpler and slightly more efficient.\n  * Got rid of a reference cycle between Terminals and FormattingStrings.\n  * Updated docs to reflect that terminal addressing (as in ``location()``) is\n    0-based.\n\n1.2\n  * Added support for Python 3! We need 3.2.3 or greater, because the curses\n    library couldn't decide whether to accept strs or bytes before that\n    (http://bugs.python.org/issue10570).\n  * Everything that comes out of the library is now unicode. This lets us\n    support Python 3 without making a mess of the code, and Python 2 should\n    continue to work unless you were testing types (and badly). Please file a\n    bug if this causes trouble for you.\n  * Changed to the MIT License for better world domination.\n  * Added Sphinx docs.\n\n1.1\n  * Added nicely named attributes for colors.\n  * Introduced compound formatting.\n  * Added wrapper behavior for styling and colors.\n  * Let you force capabilities to be non-empty, even if the output stream is\n    not a terminal.\n  * Added the ``is_a_tty`` attribute for telling whether the output stream is a\n    terminal.\n  * Sugared the remaining interesting string capabilities.\n  * Let ``location()`` operate on just an x *or* y coordinate.\n\n1.0\n  * Extracted Blessings from nose-progressive, my `progress-bar-having,\n    traceback-shortcutting, rootin', tootin' testrunner`_. It provided the\n    tootin' functionality.\n\n.. _`progress-bar-having, traceback-shortcutting, rootin', tootin' testrunner`: http://pypi.python.org/pypi/nose-progressive/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erikrose/blessings", "keywords": "terminal,tty,curses,ncurses,formatting,style,color,console", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "blessings", "package_url": "https://pypi.org/project/blessings/", "platform": "", "project_url": "https://pypi.org/project/blessings/", "project_urls": {"Homepage": "https://github.com/erikrose/blessings"}, "release_url": "https://pypi.org/project/blessings/1.7/", "requires_dist": ["six"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A thin, practical wrapper around terminal coloring, styling, and positioning", "version": "1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Coding with Blessings looks like this\u2026</p>\n<pre>from blessings import Terminal\n\nt = Terminal()\n\nprint t.bold('Hi there!')\nprint t.bold_red_on_bright_green('It hurts my eyes!')\n\nwith t.location(0, t.height - 1):\n    print 'This is at the bottom.'\n</pre>\n<p>Or, for byte-level control, you can drop down and play with raw terminal\ncapabilities:</p>\n<pre>print '{t.bold}All your {t.red}bold and red base{t.normal}'.format(t=t)\nprint t.wingo(2)\n</pre>\n<p><a href=\"https://blessings.readthedocs.io/\" rel=\"nofollow\">Full API Reference</a></p>\n<div id=\"the-pitch\">\n<h2>The Pitch</h2>\n<p>Blessings lifts several of <a href=\"http://docs.python.org/library/curses.html\" rel=\"nofollow\">curses</a>\u2019 limiting assumptions, and it makes your\ncode pretty, too:</p>\n<ul>\n<li>Use styles, color, and maybe a little positioning without necessarily\nclearing the whole\nscreen first.</li>\n<li>Leave more than one screenful of scrollback in the buffer after your program\nexits, like a well-behaved command-line app should.</li>\n<li>Get rid of all those noisy, C-like calls to <tt>tigetstr</tt> and <tt>tparm</tt>, so\nyour code doesn\u2019t get crowded out by terminal bookkeeping.</li>\n<li>Act intelligently when somebody redirects your output to a file, omitting the\nterminal control codes the user doesn\u2019t want to see (optional).</li>\n</ul>\n<div id=\"before-and-after\">\n<h3>Before And After</h3>\n<p>Without Blessings, this is how you\u2019d print some underlined text at the bottom\nof the screen:</p>\n<pre>from curses import tigetstr, setupterm, tparm\nfrom fcntl import ioctl\nfrom os import isatty\nimport struct\nimport sys\nfrom termios import TIOCGWINSZ\n\n# If we want to tolerate having our output piped to other commands or\n# files without crashing, we need to do all this branching:\nif hasattr(sys.stdout, 'fileno') and isatty(sys.stdout.fileno()):\n    setupterm()\n    sc = tigetstr('sc')\n    cup = tigetstr('cup')\n    rc = tigetstr('rc')\n    underline = tigetstr('smul')\n    normal = tigetstr('sgr0')\nelse:\n    sc = cup = rc = underline = normal = ''\nprint sc  # Save cursor position.\nif cup:\n    # tigetnum('lines') doesn't always update promptly, hence this:\n    height = struct.unpack('hhhh', ioctl(0, TIOCGWINSZ, '\\000' * 8))[0]\n    print tparm(cup, height - 1, 0)  # Move cursor to bottom.\nprint 'This is {under}underlined{normal}!'.format(under=underline,\n                                                  normal=normal)\nprint rc  # Restore cursor position.\n</pre>\n<p>That was long and full of incomprehensible trash! Let\u2019s try it again, this time\nwith Blessings:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nwith term.location(0, term.height - 1):\n    print 'This is', term.underline('pretty!')\n</pre>\n<p>Much better.</p>\n</div>\n</div>\n<div id=\"what-it-provides\">\n<h2>What It Provides</h2>\n<p>Blessings provides just one top-level object: <tt>Terminal</tt>. Instantiating a\n<tt>Terminal</tt> figures out whether you\u2019re on a terminal at all and, if so, does\nany necessary terminal setup. After that, you can proceed to ask it all sorts\nof things about the terminal. Terminal terminal terminal.</p>\n<div id=\"simple-formatting\">\n<h3>Simple Formatting</h3>\n<p>Lots of handy formatting codes (\u201ccapabilities\u201d in low-level parlance) are\navailable as attributes on a <tt>Terminal</tt>. For example:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nprint 'I am ' + term.bold + 'bold' + term.normal + '!'\n</pre>\n<p>Though they are strings at heart, you can also use them as callable wrappers so\nyou don\u2019t have to say <tt>normal</tt> afterward:</p>\n<pre>print 'I am', term.bold('bold') + '!'\n</pre>\n<p>Or, if you want fine-grained control while maintaining some semblance of\nbrevity, you can combine it with Python\u2019s string formatting, which makes\nattributes easy to access:</p>\n<pre>print 'All your {t.red}base {t.underline}are belong to us{t.normal}'.format(t=term)\n</pre>\n<p>Simple capabilities of interest include\u2026</p>\n<ul>\n<li><tt>bold</tt></li>\n<li><tt>reverse</tt></li>\n<li><tt>underline</tt></li>\n<li><tt>no_underline</tt> (which turns off underlining)</li>\n<li><tt>blink</tt></li>\n<li><tt>normal</tt> (which turns off everything, even colors)</li>\n</ul>\n<p>Here are a few more which are less likely to work on all terminals:</p>\n<ul>\n<li><tt>dim</tt></li>\n<li><tt>italic</tt> and <tt>no_italic</tt></li>\n<li><tt>shadow</tt> and <tt>no_shadow</tt></li>\n<li><tt>standout</tt> and <tt>no_standout</tt></li>\n<li><tt>subscript</tt> and <tt>no_subscript</tt></li>\n<li><tt>superscript</tt> and <tt>no_superscript</tt></li>\n<li><tt>flash</tt> (which flashes the screen once)</li>\n</ul>\n<p>Note that, while the inverse of <tt>underline</tt> is <tt>no_underline</tt>, the only way\nto turn off <tt>bold</tt> or <tt>reverse</tt> is <tt>normal</tt>, which also cancels any\ncustom colors. This is because there\u2019s no portable way to tell the terminal to\nundo certain pieces of formatting, even at the lowest level.</p>\n<p>You might also notice that the above aren\u2019t the typical incomprehensible\nterminfo capability names; we alias a few of the harder-to-remember ones for\nreadability. However, you aren\u2019t limited to these: you can reference any\nstring-returning capability listed on the <a href=\"http://www.manpagez.com/man/5/terminfo/\" rel=\"nofollow\">terminfo man page</a> by the name\nunder the \u201cCap-name\u201d column: for example, <tt>term.rum</tt>.</p>\n</div>\n<div id=\"color\">\n<h3>Color</h3>\n<p>16 colors, both foreground and background, are available as easy-to-remember\nattributes:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nprint term.red + term.on_green + 'Red on green? Ick!' + term.normal\nprint term.bright_red + term.on_bright_blue + 'This is even worse!' + term.normal\n</pre>\n<p>You can also call them as wrappers, which sets everything back to normal at the\nend:</p>\n<pre>print term.red_on_green('Red on green? Ick!')\nprint term.yellow('I can barely see it.')\n</pre>\n<p>The available colors are\u2026</p>\n<ul>\n<li><tt>black</tt></li>\n<li><tt>red</tt></li>\n<li><tt>green</tt></li>\n<li><tt>yellow</tt></li>\n<li><tt>blue</tt></li>\n<li><tt>magenta</tt></li>\n<li><tt>cyan</tt></li>\n<li><tt>white</tt></li>\n</ul>\n<p>You can set the background color instead of the foreground by prepending\n<tt>on_</tt>, as in <tt>on_blue</tt>. There is also a <tt>bright</tt> version of each color:\nfor example, <tt>on_bright_blue</tt>.</p>\n<p>There is also a numerical interface to colors, which takes an integer from\n0-15:</p>\n<pre>term.color(5) + 'Hello' + term.normal\nterm.on_color(3) + 'Hello' + term.normal\n\nterm.color(5)('Hello')\nterm.on_color(3)('Hello')\n</pre>\n<p>If some color is unsupported (for instance, if only the normal colors are\navailable, not the bright ones), trying to use it will, on most terminals, have\nno effect: the foreground and background colors will stay as they were. You can\nget fancy and do different things depending on the supported colors by checking\n<a href=\"http://packages.python.org/blessings/#blessings.Terminal.number_of_colors\" rel=\"nofollow\">number_of_colors</a>.</p>\n</div>\n<div id=\"compound-formatting\">\n<h3>Compound Formatting</h3>\n<p>If you want to do lots of crazy formatting all at once, you can just mash it\nall together:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nprint term.bold_underline_green_on_yellow + 'Woo' + term.normal\n</pre>\n<p>Or you can use your newly coined attribute as a wrapper, which implicitly sets\neverything back to normal afterward:</p>\n<pre>print term.bold_underline_green_on_yellow('Woo')\n</pre>\n<p>This compound notation comes in handy if you want to allow users to customize\nthe formatting of your app: just have them pass in a format specifier like\n\u201cbold_green\u201d on the command line, and do a quick <tt>getattr(term,\n<span class=\"pre\">that_option)('Your</span> text')</tt> when you do your formatting.</p>\n<p>I\u2019d be remiss if I didn\u2019t credit <a href=\"http://pypi.python.org/pypi/couleur\" rel=\"nofollow\">couleur</a>, where I probably got the idea for\nall this mashing.</p>\n</div>\n<div id=\"moving-the-cursor\">\n<h3>Moving The Cursor</h3>\n<p>When you want to move the cursor to output text at a specific spot, you have\na few choices.</p>\n<div id=\"moving-temporarily\">\n<h4>Moving Temporarily</h4>\n<p>Most often, you\u2019ll need to flit to a certain location, print something, and\nthen return: for example, when updating a progress bar at the bottom of the\nscreen. <tt>Terminal</tt> provides a context manager for doing this concisely:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nwith term.location(0, term.height - 1):\n    print 'Here is the bottom.'\nprint 'This is back where I came from.'\n</pre>\n<p>Parameters to <tt>location()</tt> are <tt>x</tt> and then <tt>y</tt>, but you can also pass\njust one of them, leaving the other alone. For example\u2026</p>\n<pre>with term.location(y=10):\n    print 'We changed just the row.'\n</pre>\n<p>If you\u2019re doing a series of <tt>move</tt> calls (see below) and want to return the\ncursor to its original position afterward, call <tt>location()</tt> with no\narguments, and it will do only the position restoring:</p>\n<pre>with term.location():\n    print term.move(1, 1) + 'Hi'\n    print term.move(9, 9) + 'Mom'\n</pre>\n<p>Note that, since <tt>location()</tt> uses the terminal\u2019s built-in\nposition-remembering machinery, you can\u2019t usefully nest multiple calls. Use\n<tt>location()</tt> at the outermost spot, and use simpler things like <tt>move</tt>\ninside.</p>\n</div>\n<div id=\"moving-permanently\">\n<h4>Moving Permanently</h4>\n<p>If you just want to move and aren\u2019t worried about returning, do something like\nthis:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nprint term.move(10, 1) + 'Hi, mom!'\n</pre>\n<dl>\n<dt><tt>move</tt></dt>\n<dd>Position the cursor elsewhere. Parameters are y coordinate, then x\ncoordinate.</dd>\n<dt><tt>move_x</tt></dt>\n<dd>Move the cursor to the given column.</dd>\n<dt><tt>move_y</tt></dt>\n<dd>Move the cursor to the given row.</dd>\n</dl>\n<p>How does all this work? These are simply more terminal capabilities, wrapped to\ngive them nicer names. The added wrinkle\u2013that they take parameters\u2013is also\ngiven a pleasant treatment: rather than making you dig up <tt>tparm()</tt> all the\ntime, we simply make these capabilities into callable strings. You\u2019d get the\nraw capability strings if you were to just print them, but they\u2019re fully\nparametrized if you pass params to them as if they were functions.</p>\n<p>Consequently, you can also reference any other string-returning capability\nlisted on the <a href=\"http://www.manpagez.com/man/5/terminfo/\" rel=\"nofollow\">terminfo man page</a> by its name under the \u201cCap-name\u201d column.</p>\n</div>\n<div id=\"one-notch-movement\">\n<h4>One-Notch Movement</h4>\n<p>Finally, there are some parameterless movement capabilities that move the\ncursor one character in various directions:</p>\n<ul>\n<li><tt>move_left</tt></li>\n<li><tt>move_right</tt></li>\n<li><tt>move_up</tt></li>\n<li><tt>move_down</tt></li>\n</ul>\n<p>For example\u2026</p>\n<pre>print term.move_up + 'Howdy!'\n</pre>\n</div>\n</div>\n<div id=\"height-and-width\">\n<h3>Height And Width</h3>\n<p>It\u2019s simple to get the height and width of the terminal, in characters:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nheight = term.height\nwidth = term.width\n</pre>\n<p>These are newly updated each time you ask for them, so they\u2019re safe to use from\nSIGWINCH handlers.</p>\n</div>\n<div id=\"clearing-the-screen\">\n<h3>Clearing The Screen</h3>\n<p>Blessings provides syntactic sugar over some screen-clearing capabilities:</p>\n<dl>\n<dt><tt>clear</tt></dt>\n<dd>Clear the whole screen.</dd>\n<dt><tt>clear_eol</tt></dt>\n<dd>Clear to the end of the line.</dd>\n<dt><tt>clear_bol</tt></dt>\n<dd>Clear backward to the beginning of the line.</dd>\n<dt><tt>clear_eos</tt></dt>\n<dd>Clear to the end of screen.</dd>\n</dl>\n</div>\n<div id=\"full-screen-mode\">\n<h3>Full-Screen Mode</h3>\n<p>Perhaps you have seen a full-screen program, such as an editor, restore the\nexact previous state of the terminal upon exiting, including, for example, the\ncommand-line prompt from which it was launched. Curses pretty much forces you\ninto this behavior, but Blessings makes it optional. If you want to do the\nstate-restoration thing, use these capabilities:</p>\n<dl>\n<dt><tt>enter_fullscreen</tt></dt>\n<dd>Switch to the terminal mode where full-screen output is sanctioned. Print\nthis before you do any output.</dd>\n<dt><tt>exit_fullscreen</tt></dt>\n<dd>Switch back to normal mode, restoring the exact state from before\n<tt>enter_fullscreen</tt> was used.</dd>\n</dl>\n<p>Using <tt>exit_fullscreen</tt> will wipe away any trace of your program\u2019s output, so\nreserve it for when you don\u2019t want to leave anything behind in the scrollback.</p>\n<p>There\u2019s also a context manager you can use as a shortcut:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nwith term.fullscreen():\n    # Print some stuff.\n</pre>\n<p>Besides brevity, another advantage is that it switches back to normal mode even\nif an exception is raised in the <tt>with</tt> block.</p>\n</div>\n<div id=\"pipe-savvy\">\n<h3>Pipe Savvy</h3>\n<p>If your program isn\u2019t attached to a terminal, like if it\u2019s being piped to\nanother command or redirected to a file, all the capability attributes on\n<tt>Terminal</tt> will return empty strings. You\u2019ll get a nice-looking file without\nany formatting codes gumming up the works.</p>\n<p>If you want to override this\u2013like if you anticipate your program being piped\nthrough <tt>less <span class=\"pre\">-r</span></tt>, which handles terminal escapes just fine\u2013pass\n<tt>force_styling=True</tt> to the <tt>Terminal</tt> constructor.</p>\n<p>In any case, there is a <tt>does_styling</tt> attribute on <tt>Terminal</tt> that lets\nyou see whether your capabilities will return actual, working formatting codes.\nIf it\u2019s false, you should refrain from drawing progress bars and other frippery\nand just stick to content, since you\u2019re apparently headed into a pipe:</p>\n<pre>from blessings import Terminal\n\nterm = Terminal()\nif term.does_styling:\n    with term.location(0, term.height - 1):\n        print 'Progress: [=======&gt;   ]'\nprint term.bold('Important stuff')\n</pre>\n</div>\n</div>\n<div id=\"shopping-list\">\n<h2>Shopping List</h2>\n<p>There are decades of legacy tied up in terminal interaction, so attention to\ndetail and behavior in edge cases make a difference. Here are some ways\nBlessings has your back:</p>\n<ul>\n<li>Uses the terminfo database so it works with any terminal type</li>\n<li>Provides up-to-the-moment terminal height and width, so you can respond to\nterminal size changes (SIGWINCH signals). (Most other libraries query the\n<tt>COLUMNS</tt> and <tt>LINES</tt> environment variables or the <tt>cols</tt> or <tt>lines</tt>\nterminal capabilities, which don\u2019t update promptly, if at all.)</li>\n<li>Avoids making a mess if the output gets piped to a non-terminal</li>\n<li>Works great with standard Python string templating</li>\n<li>Provides convenient access to all terminal capabilities, not just a sugared\nfew</li>\n<li>Outputs to any file-like object, not just stdout</li>\n<li>Keeps a minimum of internal state, so you can feel free to mix and match with\ncalls to curses or whatever other terminal libraries you like</li>\n</ul>\n<p>Blessings does not provide\u2026</p>\n<ul>\n<li>Native color support on the Windows command prompt. However, it should work\nwhen used in concert with <a href=\"http://pypi.python.org/pypi/colorama/0.2.4\" rel=\"nofollow\">colorama</a>.</li>\n</ul>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Bugs or suggestions? Visit the <a href=\"https://github.com/erikrose/blessings/issues/\" rel=\"nofollow\">issue tracker</a>.</p>\n<p>Blessings tests are run automatically by <a href=\"https://travis-ci.org/erikrose/blessings/\" rel=\"nofollow\">Travis CI</a>.</p>\n<a href=\"https://travis-ci.org/erikrose/blessings\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/erikrose/blessings.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a84c1bb36784997eaf2ab767eac144eac991652/68747470733a2f2f7472617669732d63692e6f72672f6572696b726f73652f626c657373696e67732e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Blessings is under the MIT License. See the LICENSE file.</p>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<dl>\n<dt>1.7</dt>\n<dd><ul>\n<li>Drop support for Python 2.6 and 3.3, which are end-of-lifed.</li>\n<li>Switch from 2to3 to the <tt>six</tt> library.</li>\n</ul>\n</dd>\n<dt>1.6.1</dt>\n<dd><ul>\n<li>Don\u2019t crash if <tt>number_of_colors()</tt> is called when run in a non-terminal\nor when <tt>does_styling</tt> is otherwise false.</li>\n</ul>\n</dd>\n<dt>1.6</dt>\n<dd><ul>\n<li>Add <tt>does_styling</tt> property. This takes <tt>force_styling</tt> into account\nand should replace most uses of <tt>is_a_tty</tt>.</li>\n<li>Make <tt>is_a_tty</tt> a read-only property, like <tt>does_styling</tt>. Writing to\nit never would have done anything constructive.</li>\n<li>Add <tt>fullscreen()</tt> and <tt>hidden_cursor()</tt> to the auto-generated docs.</li>\n<li>Fall back to <tt>LINES</tt> and <tt>COLUMNS</tt> environment vars to find height and\nwidth. (jquast)</li>\n<li>Support terminal types, such as kermit and avatar, that use bytes 127-255\nin their escape sequences. (jquast)</li>\n</ul>\n</dd>\n<dt>1.5.1</dt>\n<dd><ul>\n<li>Clean up fabfile, removing the redundant <tt>test</tt> command.</li>\n<li>Add Travis support.</li>\n<li>Make <tt>python setup.py test</tt> work without spurious errors on 2.6.</li>\n<li>Work around a tox parsing bug in its config file.</li>\n<li>Make context managers clean up after themselves even if there\u2019s an\nexception. (Vitja Makarov)</li>\n<li>Parametrizing a capability no longer crashes when there is no tty. (Vitja\nMakarov)</li>\n</ul>\n</dd>\n<dt>1.5</dt>\n<dd><ul>\n<li>Add syntactic sugar and documentation for <tt>enter_fullscreen</tt> and\n<tt>exit_fullscreen</tt>.</li>\n<li>Add context managers <tt>fullscreen()</tt> and <tt>hidden_cursor()</tt>.</li>\n<li>Now you can force a <tt>Terminal</tt> never to emit styles by passing\n<tt>force_styling=None</tt>.</li>\n</ul>\n</dd>\n<dt>1.4</dt>\n<dd><ul>\n<li>Add syntactic sugar for cursor visibility control and single-space-movement\ncapabilities.</li>\n<li>Endorse the <tt>location()</tt> idiom for restoring cursor position after a\nseries of manual movements.</li>\n<li>Fix a bug in which <tt>location()</tt> wouldn\u2019t do anything when passed zeroes.</li>\n<li>Allow tests to be run with <tt>python setup.py test</tt>.</li>\n</ul>\n</dd>\n<dt>1.3</dt>\n<dd><ul>\n<li>Added <tt>number_of_colors</tt>, which tells you how many colors the terminal\nsupports.</li>\n<li>Made <tt>color(n)</tt> and <tt>on_color(n)</tt> callable to wrap a string, like the\nnamed colors can. Also, make them both fall back to the <tt>setf</tt> and\n<tt>setb</tt> capabilities (like the named colors do) if the ANSI <tt>setaf</tt> and\n<tt>setab</tt> aren\u2019t available.</li>\n<li>Allowed <tt>color</tt> attr to act as an unparametrized string, not just a\ncallable.</li>\n<li>Made <tt>height</tt> and <tt>width</tt> examine any passed-in stream before falling\nback to stdout. (This rarely if ever affects actual behavior; it\u2019s mostly\nphilosophical.)</li>\n<li>Made caching simpler and slightly more efficient.</li>\n<li>Got rid of a reference cycle between Terminals and FormattingStrings.</li>\n<li>Updated docs to reflect that terminal addressing (as in <tt>location()</tt>) is\n0-based.</li>\n</ul>\n</dd>\n<dt>1.2</dt>\n<dd><ul>\n<li>Added support for Python 3! We need 3.2.3 or greater, because the curses\nlibrary couldn\u2019t decide whether to accept strs or bytes before that\n(<a href=\"http://bugs.python.org/issue10570\" rel=\"nofollow\">http://bugs.python.org/issue10570</a>).</li>\n<li>Everything that comes out of the library is now unicode. This lets us\nsupport Python 3 without making a mess of the code, and Python 2 should\ncontinue to work unless you were testing types (and badly). Please file a\nbug if this causes trouble for you.</li>\n<li>Changed to the MIT License for better world domination.</li>\n<li>Added Sphinx docs.</li>\n</ul>\n</dd>\n<dt>1.1</dt>\n<dd><ul>\n<li>Added nicely named attributes for colors.</li>\n<li>Introduced compound formatting.</li>\n<li>Added wrapper behavior for styling and colors.</li>\n<li>Let you force capabilities to be non-empty, even if the output stream is\nnot a terminal.</li>\n<li>Added the <tt>is_a_tty</tt> attribute for telling whether the output stream is a\nterminal.</li>\n<li>Sugared the remaining interesting string capabilities.</li>\n<li>Let <tt>location()</tt> operate on just an x <em>or</em> y coordinate.</li>\n</ul>\n</dd>\n<dt>1.0</dt>\n<dd><ul>\n<li>Extracted Blessings from nose-progressive, my <a href=\"http://pypi.python.org/pypi/nose-progressive/\" rel=\"nofollow\">progress-bar-having,\ntraceback-shortcutting, rootin\u2019, tootin\u2019 testrunner</a>. It provided the\ntootin\u2019 functionality.</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 3985799, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "d1ef5d48a018c765c789a1d866371d50", "sha256": "e9673685bbe597d66bc9e39e2d7ee1b7b655e84d81b9f91b3839d9b01d71059c"}, "downloads": -1, "filename": "blessings-1.0.tar.gz", "has_sig": false, "md5_digest": "d1ef5d48a018c765c789a1d866371d50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7256, "upload_time": "2011-11-07T18:42:28", "upload_time_iso_8601": "2011-11-07T18:42:28.468404Z", "url": "https://files.pythonhosted.org/packages/1d/74/76e38f0085ce2a0843928ede3b90a920062bd313502654e43dd41f2ba78b/blessings-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "9a2e3fd52b8b839a34b92805033408b7", "sha256": "7891f97f53c5d915234676c7bdffce12db54c7d07f5f8833b0094cb4a37dfde8"}, "downloads": -1, "filename": "blessings-1.1.tar.gz", "has_sig": false, "md5_digest": "9a2e3fd52b8b839a34b92805033408b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13501, "upload_time": "2011-11-18T22:42:54", "upload_time_iso_8601": "2011-11-18T22:42:54.832451Z", "url": "https://files.pythonhosted.org/packages/1a/ac/1dee7dde467b1c235d1c072f4c1afbdcecac5473c5ba66596ff997898b36/blessings-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "2c74d36b3868e6c5e85857e0fe797444", "sha256": "061b7e407175a289ecd36ce18082852dd63a0a62a5ab7410fe546f509400c97d"}, "downloads": -1, "filename": "blessings-1.2.tar.gz", "has_sig": false, "md5_digest": "2c74d36b3868e6c5e85857e0fe797444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16036, "upload_time": "2011-11-28T19:38:09", "upload_time_iso_8601": "2011-11-28T19:38:09.941573Z", "url": "https://files.pythonhosted.org/packages/8a/fc/298d081ae7d1aac85b24965de59736b669ff610804add9ac18763362a944/blessings-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "976b4009460fc1513b924b31065e246c", "sha256": "1bc5679fdf1807c74eb8da3774dd61ba928134cfb729df664fb60602161af193"}, "downloads": -1, "filename": "blessings-1.3.tar.gz", "has_sig": false, "md5_digest": "976b4009460fc1513b924b31065e246c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17989, "upload_time": "2011-12-13T06:16:09", "upload_time_iso_8601": "2011-12-13T06:16:09.242746Z", "url": "https://files.pythonhosted.org/packages/1f/4b/1a547253822278ae6ab6a6c783f2f1c6ecad13a5b775cb951156e27d7d1a/blessings-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "4dcc75700168e99d8b29b9314b983da1", "sha256": "a9eaaa1b4e8d3269233f415e49a304b506e19441599e17c1aee269f7486162b6"}, "downloads": -1, "filename": "blessings-1.4.tar.gz", "has_sig": false, "md5_digest": "4dcc75700168e99d8b29b9314b983da1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19416, "upload_time": "2012-06-03T03:06:47", "upload_time_iso_8601": "2012-06-03T03:06:47.840771Z", "url": "https://files.pythonhosted.org/packages/87/17/b4a941fa2090fc2d18ecce89133372ab69bac80a42521d918872c20ef4d6/blessings-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "368094303d698512f86e1aab8dde3b9e", "sha256": "3aa414066c285646622384b563ec4b93c7e50099bd65a397b8db6b6e9a90b657"}, "downloads": -1, "filename": "blessings-1.5.tar.gz", "has_sig": false, "md5_digest": "368094303d698512f86e1aab8dde3b9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20263, "upload_time": "2012-06-22T07:21:27", "upload_time_iso_8601": "2012-06-22T07:21:27.626061Z", "url": "https://files.pythonhosted.org/packages/0a/26/9813708e8e2839e60fd2008f3a76131b9b3e327c092149955fe088bfd59c/blessings-1.5.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "fbbddbf20b1f9a13e3fa612b1e086fd8", "sha256": "2f6f5509fe180ae3092fdc559585a83a3cfce30afba9de25ccefc5ecfbfedbfc"}, "downloads": -1, "filename": "blessings-1.5.1.tar.gz", "has_sig": false, "md5_digest": "fbbddbf20b1f9a13e3fa612b1e086fd8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19239, "upload_time": "2013-08-30T15:51:55", "upload_time_iso_8601": "2013-08-30T15:51:55.459965Z", "url": "https://files.pythonhosted.org/packages/51/99/7d93373ddbf20cc05a4db5db9793e8e476b71ae186ded35ca6e91743a1b1/blessings-1.5.1.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "4f552a8ebcd4982693c92571beb99394", "sha256": "edc5713061f10966048bf6b40d9a514b381e0ba849c64e034c4ef6c1847d3007"}, "downloads": -1, "filename": "blessings-1.6.tar.gz", "has_sig": false, "md5_digest": "4f552a8ebcd4982693c92571beb99394", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19974, "upload_time": "2014-10-01T04:29:13", "upload_time_iso_8601": "2014-10-01T04:29:13.838197Z", "url": "https://files.pythonhosted.org/packages/af/4a/61acd1c6c29662d3fcbcaee5ba95c20b1d315c5a33534732b6d81e0dc8e8/blessings-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "ff57b9c32d4aafa3ba7acbeb022fd80c", "sha256": "26dbaf2f89c3e6dee11c10f7c0b85756ed75cf602b1bb7935b4efd8ed67a000f"}, "downloads": -1, "filename": "blessings-1.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "ff57b9c32d4aafa3ba7acbeb022fd80c", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 26579, "upload_time": "2018-01-03T17:03:36", "upload_time_iso_8601": "2018-01-03T17:03:36.391251Z", "url": "https://files.pythonhosted.org/packages/81/bd/2629c84d08b9da0252ba8f139a8791b8b7416ed3b7537173e05c35588c2c/blessings-1.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81408d6cad2148d03f134193bf2b1806", "sha256": "466e43ff45723b272311de0437649df464b33b4daba7a54c69493212958e19c7"}, "downloads": -1, "filename": "blessings-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81408d6cad2148d03f134193bf2b1806", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26508, "upload_time": "2018-01-03T17:03:38", "upload_time_iso_8601": "2018-01-03T17:03:38.687551Z", "url": "https://files.pythonhosted.org/packages/2e/e8/3b7eae26b1ef0b79bfe07af1abd96586031c89b18066bd0efbb73be2f788/blessings-1.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "548a69d43c991fa85fdaa24806884e7b", "sha256": "74919575885552e14bc24a68f8b539690bd1b5629180faa830b1a25b8c7fb6ea"}, "downloads": -1, "filename": "blessings-1.6.1.tar.gz", "has_sig": false, "md5_digest": "548a69d43c991fa85fdaa24806884e7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20122, "upload_time": "2018-01-03T17:03:40", "upload_time_iso_8601": "2018-01-03T17:03:40.789271Z", "url": "https://files.pythonhosted.org/packages/4e/a7/b4937f0843a5c034408265551127993b3b67a8450ecce259da16bb9c5c7d/blessings-1.6.1.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "3958c55c3a7bcbbb44f396dc4f4d5cf6", "sha256": "caad5211e7ba5afe04367cdd4cfc68fa886e2e08f6f35e76b7387d2109ccea6e"}, "downloads": -1, "filename": "blessings-1.7-py2-none-any.whl", "has_sig": false, "md5_digest": "3958c55c3a7bcbbb44f396dc4f4d5cf6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 26580, "upload_time": "2018-06-21T14:00:07", "upload_time_iso_8601": "2018-06-21T14:00:07.478781Z", "url": "https://files.pythonhosted.org/packages/8d/b1/a3fe6fd8a012e6d019bafd671c2fee0597ea97ff2e76c25aadfa4545fc32/blessings-1.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e6c6034179f8508b0d97d9e7d29d4f7", "sha256": "b1fdd7e7a675295630f9ae71527a8ebc10bfefa236b3d6aa4932ee4462c17ba3"}, "downloads": -1, "filename": "blessings-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6e6c6034179f8508b0d97d9e7d29d4f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18460, "upload_time": "2018-06-21T14:00:24", "upload_time_iso_8601": "2018-06-21T14:00:24.412298Z", "url": "https://files.pythonhosted.org/packages/03/74/489f85a78247609c6b4f13733cbf3ba0d864b11aa565617b645d6fdf2a4a/blessings-1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38555a2bba0ace706aec58444368e022", "sha256": "98e5854d805f50a5b58ac2333411b0482516a8210f23f43308baeb58d77c157d"}, "downloads": -1, "filename": "blessings-1.7.tar.gz", "has_sig": false, "md5_digest": "38555a2bba0ace706aec58444368e022", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 28194, "upload_time": "2018-06-21T14:00:25", "upload_time_iso_8601": "2018-06-21T14:00:25.518071Z", "url": "https://files.pythonhosted.org/packages/5c/f8/9f5e69a63a9243448350b44c87fae74588aa634979e6c0c501f26a4f6df7/blessings-1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3958c55c3a7bcbbb44f396dc4f4d5cf6", "sha256": "caad5211e7ba5afe04367cdd4cfc68fa886e2e08f6f35e76b7387d2109ccea6e"}, "downloads": -1, "filename": "blessings-1.7-py2-none-any.whl", "has_sig": false, "md5_digest": "3958c55c3a7bcbbb44f396dc4f4d5cf6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 26580, "upload_time": "2018-06-21T14:00:07", "upload_time_iso_8601": "2018-06-21T14:00:07.478781Z", "url": "https://files.pythonhosted.org/packages/8d/b1/a3fe6fd8a012e6d019bafd671c2fee0597ea97ff2e76c25aadfa4545fc32/blessings-1.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e6c6034179f8508b0d97d9e7d29d4f7", "sha256": "b1fdd7e7a675295630f9ae71527a8ebc10bfefa236b3d6aa4932ee4462c17ba3"}, "downloads": -1, "filename": "blessings-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "6e6c6034179f8508b0d97d9e7d29d4f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18460, "upload_time": "2018-06-21T14:00:24", "upload_time_iso_8601": "2018-06-21T14:00:24.412298Z", "url": "https://files.pythonhosted.org/packages/03/74/489f85a78247609c6b4f13733cbf3ba0d864b11aa565617b645d6fdf2a4a/blessings-1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38555a2bba0ace706aec58444368e022", "sha256": "98e5854d805f50a5b58ac2333411b0482516a8210f23f43308baeb58d77c157d"}, "downloads": -1, "filename": "blessings-1.7.tar.gz", "has_sig": false, "md5_digest": "38555a2bba0ace706aec58444368e022", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 28194, "upload_time": "2018-06-21T14:00:25", "upload_time_iso_8601": "2018-06-21T14:00:25.518071Z", "url": "https://files.pythonhosted.org/packages/5c/f8/9f5e69a63a9243448350b44c87fae74588aa634979e6c0c501f26a4f6df7/blessings-1.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:06 2020"}