{"info": {"author": "Iv\u00e1n de Paz Centeno", "author_email": "ipazc@unileon.es", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Natural Language :: English", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "MTCNN\n#####\n\n.. image:: https://badge.fury.io/py/mtcnn.svg\n    :target: https://badge.fury.io/py/mtcnn\n.. image:: https://travis-ci.org/ipazc/mtcnn.svg?branch=master\n    :target: https://travis-ci.org/ipazc/mtcnn\n\n\nImplementation of the MTCNN face detector for Keras in Python3.4+. It is written from scratch, using as a reference the implementation of\nMTCNN from David Sandberg (`FaceNet's MTCNN <https://github.com/davidsandberg/facenet/tree/master/src/align>`_) in Facenet. It is based on the paper *Zhang, K et al. (2016)* [ZHANG2016]_.\n\n.. image:: https://github.com/ipazc/mtcnn/raw/master/result.jpg\n\n\nINSTALLATION\n############\n\nCurrently it is only supported Python3.4 onwards. It can be installed through pip:\n\n.. code:: bash\n\n    $ pip install mtcnn\n\nThis implementation requires OpenCV>=4.1 and Keras>=2.0.0 (any Tensorflow supported by Keras will be supported by this MTCNN package).\nIf this is the first time you use tensorflow, you will probably need to install it in your system:\n\n.. code:: bash\n\n    $ pip install tensorflow\n\nor with `conda`\n\n.. code:: bash\n\n    $ conda install tensorflow\n\nNote that `tensorflow-gpu` version can be used instead if a GPU device is available on the system, which will speedup the results.\n\nUSAGE\n#####\n\nThe following example illustrates the ease of use of this package:\n\n\n.. code:: python\n\n    >>> from mtcnn import MTCNN\n    >>> import cv2\n    >>>\n    >>> img = cv2.cvtColor(cv2.imread(\"ivan.jpg\"), cv2.COLOR_BGR2RGB)\n    >>> detector = MTCNN()\n    >>> detector.detect_faces(img)\n    [\n        {\n            'box': [277, 90, 48, 63],\n            'keypoints':\n            {\n                'nose': (303, 131),\n                'mouth_right': (313, 141),\n                'right_eye': (314, 114),\n                'left_eye': (291, 117),\n                'mouth_left': (296, 143)\n            },\n            'confidence': 0.99851983785629272\n        }\n    ]\n\nThe detector returns a list of JSON objects. Each JSON object contains three main keys: 'box', 'confidence' and 'keypoints':\n\n- The bounding box is formatted as [x, y, width, height] under the key 'box'.\n- The confidence is the probability for a bounding box to be matching a face.\n- The keypoints are formatted into a JSON object with the keys 'left_eye', 'right_eye', 'nose', 'mouth_left', 'mouth_right'. Each keypoint is identified by a pixel position (x, y).\n\nAnother good example of usage can be found in the file \"`example.py`_.\" located in the root of this repository.\n\nBENCHMARK\n=========\n\nThe following tables shows the benchmark of this mtcnn implementation running on an `Intel i7-3612QM CPU @ 2.10GHz <https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-3612QM+%40+2.10GHz>`_, with a **CPU-based** Tensorflow 1.4.1.\n\n - Pictures containing a single frontal face:\n\n+------------+--------------+---------------+-----+\n| Image size | Total pixels | Process time  | FPS |\n+============+==============+===============+=====+\n| 460x259    | 119,140      | 0.118 seconds | 8.5 |\n+------------+--------------+---------------+-----+\n| 561x561    | 314,721      | 0.227 seconds | 4.5 |\n+------------+--------------+---------------+-----+\n| 667x1000   | 667,000      | 0.456 seconds | 2.2 |\n+------------+--------------+---------------+-----+\n| 1920x1200  | 2,304,000    | 1.093 seconds | 0.9 |\n+------------+--------------+---------------+-----+\n| 4799x3599  | 17,271,601   | 8.798 seconds | 0.1 |\n+------------+--------------+---------------+-----+\n\n - Pictures containing 10 frontal faces:\n\n+------------+--------------+---------------+-----+\n| Image size | Total pixels | Process time  | FPS |\n+============+==============+===============+=====+\n| 474x224    | 106,176      | 0.185 seconds | 5.4 |\n+------------+--------------+---------------+-----+\n| 736x348    | 256,128      | 0.290 seconds | 3.4 |\n+------------+--------------+---------------+-----+\n| 2100x994   | 2,087,400    | 1.286 seconds | 0.7 |\n+------------+--------------+---------------+-----+\n\nMODEL\n#####\n\nBy default the MTCNN bundles a face detection weights model.\n\nThe model is adapted from the Facenet's MTCNN implementation, merged in a single file located inside the folder 'data' relative\nto the module's path. It can be overriden by injecting it into the MTCNN() constructor during instantiation.\n\nThe model must be numpy-based containing the 3 main keys \"pnet\", \"rnet\" and \"onet\", having each of them the weights of each of the layers of the network.\n\nFor more reference about the network definition, take a close look at the paper from *Zhang et al. (2016)* [ZHANG2016]_.\n\nLICENSE\n#######\n\n`MIT License`_.\n\n\nREFERENCE\n=========\n\n.. [ZHANG2016] Zhang, K., Zhang, Z., Li, Z., and Qiao, Y. (2016). Joint face detection and alignment using multitask cascaded convolutional networks. IEEE Signal Processing Letters, 23(10):1499\u20131503.\n\n.. _example.py: example.py\n.. _MIT license: LICENSE\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ipazc/mtcnn", "keywords": "mtcnn face detection tensorflow pip package", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mtcnn", "package_url": "https://pypi.org/project/mtcnn/", "platform": "", "project_url": "https://pypi.org/project/mtcnn/", "project_urls": {"Homepage": "http://github.com/ipazc/mtcnn"}, "release_url": "https://pypi.org/project/mtcnn/0.1.0/", "requires_dist": ["keras (>=2.0.0)", "opencv-python (>=4.1.0)"], "requires_python": "", "summary": "Multi-task Cascaded Convolutional Neural Networks for Face Detection, based on TensorFlow", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mtcnn\">\n<h2>MTCNN</h2>\n<a href=\"https://badge.fury.io/py/mtcnn\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/mtcnn.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0564cec85891196d8f992462cd57d7b1c82d86e1/68747470733a2f2f62616467652e667572792e696f2f70792f6d74636e6e2e737667\"></a>\n<a href=\"https://travis-ci.org/ipazc/mtcnn\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ipazc/mtcnn.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfcce21b8e268db63b3ea79eaa3fe1bdd2ce8b87/68747470733a2f2f7472617669732d63692e6f72672f6970617a632f6d74636e6e2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Implementation of the MTCNN face detector for Keras in Python3.4+. It is written from scratch, using as a reference the implementation of\nMTCNN from David Sandberg (<a href=\"https://github.com/davidsandberg/facenet/tree/master/src/align\" rel=\"nofollow\">FaceNet\u2019s MTCNN</a>) in Facenet. It is based on the paper <em>Zhang, K et al. (2016)</em> <a href=\"#zhang2016\" id=\"id1\" rel=\"nofollow\">[ZHANG2016]</a>.</p>\n<img alt=\"https://github.com/ipazc/mtcnn/raw/master/result.jpg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d527d3fa3c1983754a13d5b536f266a58617748/68747470733a2f2f6769746875622e636f6d2f6970617a632f6d74636e6e2f7261772f6d61737465722f726573756c742e6a7067\">\n</div>\n<div id=\"installation\">\n<h2>INSTALLATION</h2>\n<p>Currently it is only supported Python3.4 onwards. It can be installed through pip:</p>\n<pre>$ pip install mtcnn\n</pre>\n<p>This implementation requires OpenCV&gt;=4.1 and Keras&gt;=2.0.0 (any Tensorflow supported by Keras will be supported by this MTCNN package).\nIf this is the first time you use tensorflow, you will probably need to install it in your system:</p>\n<pre>$ pip install tensorflow\n</pre>\n<p>or with <cite>conda</cite></p>\n<pre>$ conda install tensorflow\n</pre>\n<p>Note that <cite>tensorflow-gpu</cite> version can be used instead if a GPU device is available on the system, which will speedup the results.</p>\n</div>\n<div id=\"usage\">\n<h2>USAGE</h2>\n<p>The following example illustrates the ease of use of this package:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">mtcnn</span> <span class=\"kn\">import</span> <span class=\"n\">MTCNN</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s2\">\"ivan.jpg\"</span><span class=\"p\">),</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">detector</span> <span class=\"o\">=</span> <span class=\"n\">MTCNN</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">detector</span><span class=\"o\">.</span><span class=\"n\">detect_faces</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">)</span>\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'box'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">277</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">],</span>\n        <span class=\"s1\">'keypoints'</span><span class=\"p\">:</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">'nose'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">303</span><span class=\"p\">,</span> <span class=\"mi\">131</span><span class=\"p\">),</span>\n            <span class=\"s1\">'mouth_right'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">313</span><span class=\"p\">,</span> <span class=\"mi\">141</span><span class=\"p\">),</span>\n            <span class=\"s1\">'right_eye'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">314</span><span class=\"p\">,</span> <span class=\"mi\">114</span><span class=\"p\">),</span>\n            <span class=\"s1\">'left_eye'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">291</span><span class=\"p\">,</span> <span class=\"mi\">117</span><span class=\"p\">),</span>\n            <span class=\"s1\">'mouth_left'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">296</span><span class=\"p\">,</span> <span class=\"mi\">143</span><span class=\"p\">)</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'confidence'</span><span class=\"p\">:</span> <span class=\"mf\">0.99851983785629272</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The detector returns a list of JSON objects. Each JSON object contains three main keys: \u2018box\u2019, \u2018confidence\u2019 and \u2018keypoints\u2019:</p>\n<ul>\n<li>The bounding box is formatted as [x, y, width, height] under the key \u2018box\u2019.</li>\n<li>The confidence is the probability for a bounding box to be matching a face.</li>\n<li>The keypoints are formatted into a JSON object with the keys \u2018left_eye\u2019, \u2018right_eye\u2019, \u2018nose\u2019, \u2018mouth_left\u2019, \u2018mouth_right\u2019. Each keypoint is identified by a pixel position (x, y).</li>\n</ul>\n<p>Another good example of usage can be found in the file \u201c<a href=\"example.py\" rel=\"nofollow\">example.py</a>.\u201d located in the root of this repository.</p>\n<div id=\"benchmark\">\n<h3>BENCHMARK</h3>\n<p>The following tables shows the benchmark of this mtcnn implementation running on an <a href=\"https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core+i7-3612QM+%40+2.10GHz\" rel=\"nofollow\">Intel i7-3612QM CPU @ 2.10GHz</a>, with a <strong>CPU-based</strong> Tensorflow 1.4.1.</p>\n<blockquote>\n<ul>\n<li>Pictures containing a single frontal face:</li>\n</ul>\n</blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Image size</th>\n<th>Total pixels</th>\n<th>Process time</th>\n<th>FPS</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>460x259</td>\n<td>119,140</td>\n<td>0.118 seconds</td>\n<td>8.5</td>\n</tr>\n<tr><td>561x561</td>\n<td>314,721</td>\n<td>0.227 seconds</td>\n<td>4.5</td>\n</tr>\n<tr><td>667x1000</td>\n<td>667,000</td>\n<td>0.456 seconds</td>\n<td>2.2</td>\n</tr>\n<tr><td>1920x1200</td>\n<td>2,304,000</td>\n<td>1.093 seconds</td>\n<td>0.9</td>\n</tr>\n<tr><td>4799x3599</td>\n<td>17,271,601</td>\n<td>8.798 seconds</td>\n<td>0.1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>Pictures containing 10 frontal faces:</li>\n</ul>\n</blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Image size</th>\n<th>Total pixels</th>\n<th>Process time</th>\n<th>FPS</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>474x224</td>\n<td>106,176</td>\n<td>0.185 seconds</td>\n<td>5.4</td>\n</tr>\n<tr><td>736x348</td>\n<td>256,128</td>\n<td>0.290 seconds</td>\n<td>3.4</td>\n</tr>\n<tr><td>2100x994</td>\n<td>2,087,400</td>\n<td>1.286 seconds</td>\n<td>0.7</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"model\">\n<h2>MODEL</h2>\n<p>By default the MTCNN bundles a face detection weights model.</p>\n<p>The model is adapted from the Facenet\u2019s MTCNN implementation, merged in a single file located inside the folder \u2018data\u2019 relative\nto the module\u2019s path. It can be overriden by injecting it into the MTCNN() constructor during instantiation.</p>\n<p>The model must be numpy-based containing the 3 main keys \u201cpnet\u201d, \u201crnet\u201d and \u201conet\u201d, having each of them the weights of each of the layers of the network.</p>\n<p>For more reference about the network definition, take a close look at the paper from <em>Zhang et al. (2016)</em> <a href=\"#zhang2016\" id=\"id2\" rel=\"nofollow\">[ZHANG2016]</a>.</p>\n</div>\n<div id=\"license\">\n<h2>LICENSE</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">MIT License</a>.</p>\n<div id=\"reference\">\n<h3>REFERENCE</h3>\n<table id=\"zhang2016\">\n<col><col>\n<tbody>\n<tr><td>[ZHANG2016]</td><td><em>(<a href=\"#id1\" rel=\"nofollow\">1</a>, <a href=\"#id2\" rel=\"nofollow\">2</a>)</em> Zhang, K., Zhang, Z., Li, Z., and Qiao, Y. (2016). Joint face detection and alignment using multitask cascaded convolutional networks. IEEE Signal Processing Letters, 23(10):1499\u20131503.</td></tr>\n</tbody>\n</table>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6137856, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bba42532a2f006d61b0de0cacbecec57", "sha256": "8c5cda05964f306b8d768fd2ac5bcc03a4b29806fd483e8687b3689f8127dfab"}, "downloads": -1, "filename": "mtcnn-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bba42532a2f006d61b0de0cacbecec57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2254034, "upload_time": "2018-01-05T04:11:03", "upload_time_iso_8601": "2018-01-05T04:11:03.187565Z", "url": "https://files.pythonhosted.org/packages/bd/28/5080d4bfc2407e1e9ed1dd7493b7e11bd4e591ebe68b5d005493db0eabff/mtcnn-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "80c28e08673afd0d8cb58d29df92c168", "sha256": "a354fa70003ab02128922d6b66cf7a46c624afef3cc727767c047f3fdf7ac47f"}, "downloads": -1, "filename": "mtcnn-0.0.2.tar.gz", "has_sig": false, "md5_digest": "80c28e08673afd0d8cb58d29df92c168", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2254221, "upload_time": "2018-01-05T15:35:35", "upload_time_iso_8601": "2018-01-05T15:35:35.508375Z", "url": "https://files.pythonhosted.org/packages/42/b2/2277daba60f5ce099d9f7cb9f7f5353508646ad9e48d34e7a814d496496b/mtcnn-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "552143867c5bf0ef5cfbd0a89a78f5ae", "sha256": "216c0c936ad6e4f4a3a12877e9faf5a46cb17e3d5848420c4418197ab3a12587"}, "downloads": -1, "filename": "mtcnn-0.0.3.tar.gz", "has_sig": false, "md5_digest": "552143867c5bf0ef5cfbd0a89a78f5ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2255460, "upload_time": "2018-01-10T16:46:24", "upload_time_iso_8601": "2018-01-10T16:46:24.469083Z", "url": "https://files.pythonhosted.org/packages/6c/20/f35af76ca43cb93b0ed05b8b5399e0dca7184ab17021c40b3ef0f019120d/mtcnn-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8104922a3e2e7e33d17d56fbb5699719", "sha256": "244f67c2e0fe42237f34cff3d72b7eefe1fca953c5dc54600472ab4cc36cb382"}, "downloads": -1, "filename": "mtcnn-0.0.4.tar.gz", "has_sig": false, "md5_digest": "8104922a3e2e7e33d17d56fbb5699719", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2256354, "upload_time": "2018-01-18T16:18:47", "upload_time_iso_8601": "2018-01-18T16:18:47.587495Z", "url": "https://files.pythonhosted.org/packages/23/69/d07e7e05965743408c8817ba28858981cf796a7d36a6525a878e3aab1856/mtcnn-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e2b5672e7c054de1e9a2acf7ddf2e026", "sha256": "03787947f46c87449c5e8d34925e5fbbaa367dfa16b16ac5abceeb0408b45375"}, "downloads": -1, "filename": "mtcnn-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e2b5672e7c054de1e9a2acf7ddf2e026", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2256354, "upload_time": "2018-01-31T12:33:02", "upload_time_iso_8601": "2018-01-31T12:33:02.520360Z", "url": "https://files.pythonhosted.org/packages/46/24/7e0064769847bbc45b021c8e524a3a08580210a3d4fa213dc4a0dc770cbb/mtcnn-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "0fd19f21062b8aa9d1fda0c7120107a0", "sha256": "78de64ee19e332c9e4d6fea1903f7b3fbb8397708bdecfc85326d7e4706a92cd"}, "downloads": -1, "filename": "mtcnn-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0fd19f21062b8aa9d1fda0c7120107a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2256360, "upload_time": "2018-01-31T12:34:49", "upload_time_iso_8601": "2018-01-31T12:34:49.467818Z", "url": "https://files.pythonhosted.org/packages/3f/5b/4a384c7aab79b28e2013a813088af8893e603712638f9d7ac795931679e2/mtcnn-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e01239aecf5d61c2dadff517b26bd033", "sha256": "99474debce9253c7d6bf2346db68d242e54e456a4595af46dc44d5352ddcb98d"}, "downloads": -1, "filename": "mtcnn-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e01239aecf5d61c2dadff517b26bd033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2255750, "upload_time": "2018-05-09T13:55:40", "upload_time_iso_8601": "2018-05-09T13:55:40.274942Z", "url": "https://files.pythonhosted.org/packages/f8/84/47f5ce4dbd448d0899b0aa20eba9da950a95329206a6acd8770d7ef80b38/mtcnn-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "c6584d3d3a65ca55ebd3dec47312d9db", "sha256": "a9ec787f5f474435ce27ceb3510d217be48e049a374bd027c5ba5574de87a177"}, "downloads": -1, "filename": "mtcnn-0.0.8.tar.gz", "has_sig": false, "md5_digest": "c6584d3d3a65ca55ebd3dec47312d9db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2256290, "upload_time": "2018-07-23T21:49:20", "upload_time_iso_8601": "2018-07-23T21:49:20.193625Z", "url": "https://files.pythonhosted.org/packages/0b/f5/d62ac2bdf1c683b7650268305db3126323a7b6a2f6390273038285fa9e3f/mtcnn-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "95f562ecd6308d89c72469aad914fd5e", "sha256": "1eee06176f69da9e09d7e1b007b5663e4632ee77994934219ee2db63c309b8ba"}, "downloads": -1, "filename": "mtcnn-0.0.9.tar.gz", "has_sig": false, "md5_digest": "95f562ecd6308d89c72469aad914fd5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2255999, "upload_time": "2019-05-06T12:11:41", "upload_time_iso_8601": "2019-05-06T12:11:41.228519Z", "url": "https://files.pythonhosted.org/packages/9e/c7/8546b18fbd367b156c5bbbbaa8912ab31c8129171523ff8b47b546d70b09/mtcnn-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8074cb2ac2c48deba5f0f2f3f40fe2d2", "sha256": "d991b5bf3c4fa61b9e28b1a9a0005e0a57adc8d7aaa49833ed1010bb8d5aa670"}, "downloads": -1, "filename": "mtcnn-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "8074cb2ac2c48deba5f0f2f3f40fe2d2", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 2272953, "upload_time": "2019-11-14T17:37:05", "upload_time_iso_8601": "2019-11-14T17:37:05.964483Z", "url": "https://files.pythonhosted.org/packages/b6/bc/0bed76312f52ef2914d6ff88cce67a27f257b1d3729a614be4c33d5a30e2/mtcnn-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5118839699dd2254a082bf3f43de13a", "sha256": "5168c3a5ab9bb91e97a370134982f07daf745ac003db51b92fe4c666331ef10c"}, "downloads": -1, "filename": "mtcnn-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5118839699dd2254a082bf3f43de13a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2260275, "upload_time": "2019-11-14T17:37:03", "upload_time_iso_8601": "2019-11-14T17:37:03.287426Z", "url": "https://files.pythonhosted.org/packages/67/43/abee91792797c609c1bf30f1112117f7a87a713ebaa6ec5201d5555a73ef/mtcnn-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a10e0e5896e8a92485863ddcc47186a", "sha256": "56624f08e088e5cf062de8005df09696cdbc0f4c2fc3578483b19e0fb3984252"}, "downloads": -1, "filename": "mtcnn-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8a10e0e5896e8a92485863ddcc47186a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2255846, "upload_time": "2019-11-14T17:37:08", "upload_time_iso_8601": "2019-11-14T17:37:08.559156Z", "url": "https://files.pythonhosted.org/packages/b4/8e/6565beb364587befbef5efad314e14f78be85d65c3709a4da09bd9dfbb65/mtcnn-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8074cb2ac2c48deba5f0f2f3f40fe2d2", "sha256": "d991b5bf3c4fa61b9e28b1a9a0005e0a57adc8d7aaa49833ed1010bb8d5aa670"}, "downloads": -1, "filename": "mtcnn-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "8074cb2ac2c48deba5f0f2f3f40fe2d2", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 2272953, "upload_time": "2019-11-14T17:37:05", "upload_time_iso_8601": "2019-11-14T17:37:05.964483Z", "url": "https://files.pythonhosted.org/packages/b6/bc/0bed76312f52ef2914d6ff88cce67a27f257b1d3729a614be4c33d5a30e2/mtcnn-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5118839699dd2254a082bf3f43de13a", "sha256": "5168c3a5ab9bb91e97a370134982f07daf745ac003db51b92fe4c666331ef10c"}, "downloads": -1, "filename": "mtcnn-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b5118839699dd2254a082bf3f43de13a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2260275, "upload_time": "2019-11-14T17:37:03", "upload_time_iso_8601": "2019-11-14T17:37:03.287426Z", "url": "https://files.pythonhosted.org/packages/67/43/abee91792797c609c1bf30f1112117f7a87a713ebaa6ec5201d5555a73ef/mtcnn-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a10e0e5896e8a92485863ddcc47186a", "sha256": "56624f08e088e5cf062de8005df09696cdbc0f4c2fc3578483b19e0fb3984252"}, "downloads": -1, "filename": "mtcnn-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8a10e0e5896e8a92485863ddcc47186a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2255846, "upload_time": "2019-11-14T17:37:08", "upload_time_iso_8601": "2019-11-14T17:37:08.559156Z", "url": "https://files.pythonhosted.org/packages/b4/8e/6565beb364587befbef5efad314e14f78be85d65c3709a4da09bd9dfbb65/mtcnn-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:43 2020"}