{"info": {"author": "Adam Ginsburg", "author_email": "adam.g.ginsburg@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Power-law Distribution Fitting\n==============================\nThis is a python implementation of a power-law distribution fitter.  The code\nhere was originally hosted on `agpy\n<http://code.google.com/p/agpy/source/browse/wiki/PowerLaw.wiki>`_ but was\nmoved and re-packaged to make setup.py cleaner.  \n\n`API Documentation <http://plfit.readthedocs.org/>`_\n\nSee also https://github.com/jeffalstott/powerlaw, an alternate implementation\nof the same algorithm with additional bells & whistles.\n\nInstallation\n------------\n\nI've attempted to make the setup.py file work nicely, but it includes some\nhacks, so if you run into trouble, please report it on `github\n<github.com/keflavich/plfit>`_::\n\n    git clone git@github.com:keflavich/plfit.git\n    cd plfit\n    python setup.py install\n\n*If* ``python setup.py install`` doesn't work, you can try the following:\n\nTo install the cython function, run:\n``python setup.py build_ext --inplace``\n\nTo install the fortran function::\n\n    cd plfit/plfit/ \n    f2py -c fplfit.f -m fplfit --fcompiler=gfortran\n\nDescription\n-----------\n\nAaron Clauset et al. address the issue of fitting power-laws to distributions\non `this website <http://www.santafe.edu/~aaronc/powerlaws/>`_ and in their paper\n`Power-law distributions in empirical\ndata <http://code.google.com/p/agpy/source/browse/wiki/PowerLaw.wiki>`_.  I have\ncreated a python implementation of their code because I didn't have matlab or R\nand wanted to do some power-law fitting. \n\nPower-laws are very commonly used in astronomy and are typically used to\ndescribe the initial mass function (IMF), the core mass function (CMF), and\noften luminosity distributions.  Most distributions in astronomy tend to be\napparent power-laws because the source counts are too few or too narrow to\ndistinguish powerlaws from log-normal and other distributions.  But, to this\nend, I've included the testing mechanism to test for consistency with a power\nlaw as described in the above paper.\n\nThe python internal documentation is complete.  A brief description of relevant functions is included here for convenience:\n\nplfit is implemented as a class.  This means that you import plfit, and declare an instance of the plfit class::\n\n    import plfit\n    X = rand(1000)\n    myplfit = plfit.plfit(X)\n\nThe results of the fit are printed to the screen (if desired) and are stored as part of the object.\n\n``alpha_`` and ``kstest_`` are functions used internally to determine the ks-statistic and alpha values as a function of xmin.\n\nThere are 3 predefined plotting functions:\n  * ``alphavsks`` plots alpha on the y-axis vs. the ks statistic value on the\n    x-axis with the 'best-fit' alpha value plotted with error bars.   These\n    plots are a useful way to determine if other values of xmin are similarly\n    good fits.\n  * ``plotcdf`` plots the cumulative distribution function along with the\n    best-fit power law\n  * ``plotpdf`` plots a histogram of the PDF with the best fit power law.  It\n    defaults to log binning (i.e. a linear power-law fit) but can do dN/dS and\n    linear binning as well.\n\nOther useful functions:\n * ``test_pl`` uses the fitted power-law as the starting point for a monte-carlo\n   test of whether the powerlaw is an acceptable fit.  It returns a \"p-value\" that\n   should be >0.1 if a power-law fit is to be considered (though a high p-value\n   does not ensure that the distribution function is a power law!).\n\n * ``plexp_inv`` creates a cutoff power-law distribution with an exponential\n   tail-off.  It is useful for tests.\n * ``pl_inv`` creates a pure cutoff power-law distribution\n * ``test_fitter`` uses the previous two functions to test the fitter's ability\n   to return the correct xmin and alpha values for large numbers of iterations\n\n\nThe powerlaw fitter is very effective at returning the correct value of alpha\nbut not as good at returning the correct value of xmin.\n\nThere are 3 implementations of the code internals.  fplfit.f is a fortran\nfunction, cplfit.pyx is a cython function, and plfit.py is the wrapper and\nincludes a python-only implementation that requires numpy.  FORTRAN is fastest,\nfollow closely by cython.  Python is ~3x slower.  \n\nAs of November 21, 2011, there is a pure python (i.e., no numpy) implementation\nat <https://github.com/keflavich/plfit/blob/master/plfit/plfit_py.py> - you can just\nput this file in your local working directory and import it, since it contains\nno requirements beyond pure python.  It's slower and hobbled, but it works, and perhaps\nwill run fast with `pypy <http://pypy.org/>`_.\n\n\nFor usage *examples*, see\n * `<https://github.com/keflavich/plfit/blob/master/plfit/tests/clauset2009_tests.py>`_\n * `<https://github.com/keflavich/plfit/blob/master/plfit/tests/plfit_tests.py>`_\n * `<https://github.com/keflavich/plfit/blob/master/plfit/tests/speedcompare_plfit.py>`_\n\nA very simple example::\n\n    import plfit\n    from numpy.random import rand,seed\n\n    # generate a power law using the \"inverse\" power-law generator code\n    X=plfit.plexp_inv(rand(1000),1,2.5)\n\n    # use the numpy version to fit (usefortran=False is only needed if you installed the fortran version)\n    myplfit=plfit.plfit(X,usefortran=False)\n    # output should look something like this:\n    # PYTHON plfit executed in 0.201362 seconds\n    # xmin: 0.621393 n(>xmin): 263 alpha: 2.39465 +/- 0.0859979   Log-Likelihood: -238.959   ks: 0.0278864 p(ks): 0.986695\n\n    # generate some plots\n    from pylab import *\n    figure(1)\n    myplfit.plotpdf()\n\n    figure(2)\n    myplfit.plotcdf()\n\n\n*If you use this code, please cite Clauset et al 2009*  \n\nDirection citations to the source are welcome!  The python translation has been cited in the following works (and perhaps others?):\n\n * http://adsabs.harvard.edu/abs/2011ApJ...735...51M\n * http://adsabs.harvard.edu/abs/2011ApJ...736..149G\n * http://www.rsc.org/suppdata/CC/c0/c0cc00366b/c0cc00366b.pdf\n * http://adsabs.harvard.edu/cgi-bin/bib_query (http://code.google.com/p/powerlaw)\n\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/keflavich/plfit/trend.png\n   :alt: Bitdeli badge\n   :target: https://bitdeli.com/free\n\nv1.0.3 - just a fresh push to pypi, probably for 2.7->3.x\nv1.0.2 - bugfix for the \"nosmall\" case and documentation update\nv1.0.1 - bugfix to pypi only; just adds things to MANIFEST.in\nv1.0 - first release\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/keflavich/plfit/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/keflavich/plfit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "plfit", "package_url": "https://pypi.org/project/plfit/", "platform": "Linux", "project_url": "https://pypi.org/project/plfit/", "project_urls": {"Download": "https://github.com/keflavich/plfit/archive/master.zip", "Homepage": "https://github.com/keflavich/plfit"}, "release_url": "https://pypi.org/project/plfit/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Python implementation of Aaron Clauset's power-law distribution fitter", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a python implementation of a power-law distribution fitter.  The code\nhere was originally hosted on <a href=\"http://code.google.com/p/agpy/source/browse/wiki/PowerLaw.wiki\" rel=\"nofollow\">agpy</a> but was\nmoved and re-packaged to make setup.py cleaner.</p>\n<p><a href=\"http://plfit.readthedocs.org/\" rel=\"nofollow\">API Documentation</a></p>\n<p>See also <a href=\"https://github.com/jeffalstott/powerlaw\" rel=\"nofollow\">https://github.com/jeffalstott/powerlaw</a>, an alternate implementation\nof the same algorithm with additional bells &amp; whistles.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>I\u2019ve attempted to make the setup.py file work nicely, but it includes some\nhacks, so if you run into trouble, please report it on <a href=\"github.com/keflavich/plfit\" rel=\"nofollow\">github</a>:</p>\n<pre>git clone git@github.com:keflavich/plfit.git\ncd plfit\npython setup.py install\n</pre>\n<p><em>If</em> <tt>python setup.py install</tt> doesn\u2019t work, you can try the following:</p>\n<p>To install the cython function, run:\n<tt>python setup.py build_ext <span class=\"pre\">--inplace</span></tt></p>\n<p>To install the fortran function:</p>\n<pre>cd plfit/plfit/\nf2py -c fplfit.f -m fplfit --fcompiler=gfortran\n</pre>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<p>Aaron Clauset et al. address the issue of fitting power-laws to distributions\non <a href=\"http://www.santafe.edu/~aaronc/powerlaws/\" rel=\"nofollow\">this website</a> and in their paper\n<a href=\"http://code.google.com/p/agpy/source/browse/wiki/PowerLaw.wiki\" rel=\"nofollow\">Power-law distributions in empirical\ndata</a>.  I have\ncreated a python implementation of their code because I didn\u2019t have matlab or R\nand wanted to do some power-law fitting.</p>\n<p>Power-laws are very commonly used in astronomy and are typically used to\ndescribe the initial mass function (IMF), the core mass function (CMF), and\noften luminosity distributions.  Most distributions in astronomy tend to be\napparent power-laws because the source counts are too few or too narrow to\ndistinguish powerlaws from log-normal and other distributions.  But, to this\nend, I\u2019ve included the testing mechanism to test for consistency with a power\nlaw as described in the above paper.</p>\n<p>The python internal documentation is complete.  A brief description of relevant functions is included here for convenience:</p>\n<p>plfit is implemented as a class.  This means that you import plfit, and declare an instance of the plfit class:</p>\n<pre>import plfit\nX = rand(1000)\nmyplfit = plfit.plfit(X)\n</pre>\n<p>The results of the fit are printed to the screen (if desired) and are stored as part of the object.</p>\n<p><tt>alpha_</tt> and <tt>kstest_</tt> are functions used internally to determine the ks-statistic and alpha values as a function of xmin.</p>\n<dl>\n<dt>There are 3 predefined plotting functions:</dt>\n<dd><ul>\n<li><tt>alphavsks</tt> plots alpha on the y-axis vs. the ks statistic value on the\nx-axis with the \u2018best-fit\u2019 alpha value plotted with error bars.   These\nplots are a useful way to determine if other values of xmin are similarly\ngood fits.</li>\n<li><tt>plotcdf</tt> plots the cumulative distribution function along with the\nbest-fit power law</li>\n<li><tt>plotpdf</tt> plots a histogram of the PDF with the best fit power law.  It\ndefaults to log binning (i.e. a linear power-law fit) but can do dN/dS and\nlinear binning as well.</li>\n</ul>\n</dd>\n<dt>Other useful functions:</dt>\n<dd><ul>\n<li><tt>test_pl</tt> uses the fitted power-law as the starting point for a monte-carlo\ntest of whether the powerlaw is an acceptable fit.  It returns a \u201cp-value\u201d that\nshould be &gt;0.1 if a power-law fit is to be considered (though a high p-value\ndoes not ensure that the distribution function is a power law!).</li>\n<li><tt>plexp_inv</tt> creates a cutoff power-law distribution with an exponential\ntail-off.  It is useful for tests.</li>\n<li><tt>pl_inv</tt> creates a pure cutoff power-law distribution</li>\n<li><tt>test_fitter</tt> uses the previous two functions to test the fitter\u2019s ability\nto return the correct xmin and alpha values for large numbers of iterations</li>\n</ul>\n</dd>\n</dl>\n<p>The powerlaw fitter is very effective at returning the correct value of alpha\nbut not as good at returning the correct value of xmin.</p>\n<p>There are 3 implementations of the code internals.  fplfit.f is a fortran\nfunction, cplfit.pyx is a cython function, and plfit.py is the wrapper and\nincludes a python-only implementation that requires numpy.  FORTRAN is fastest,\nfollow closely by cython.  Python is ~3x slower.</p>\n<p>As of November 21, 2011, there is a pure python (i.e., no numpy) implementation\nat &lt;<a href=\"https://github.com/keflavich/plfit/blob/master/plfit/plfit_py.py\" rel=\"nofollow\">https://github.com/keflavich/plfit/blob/master/plfit/plfit_py.py</a>&gt; - you can just\nput this file in your local working directory and import it, since it contains\nno requirements beyond pure python.  It\u2019s slower and hobbled, but it works, and perhaps\nwill run fast with <a href=\"http://pypy.org/\" rel=\"nofollow\">pypy</a>.</p>\n<dl>\n<dt>For usage <em>examples</em>, see</dt>\n<dd><ul>\n<li><a href=\"https://github.com/keflavich/plfit/blob/master/plfit/tests/clauset2009_tests.py\" rel=\"nofollow\">https://github.com/keflavich/plfit/blob/master/plfit/tests/clauset2009_tests.py</a></li>\n<li><a href=\"https://github.com/keflavich/plfit/blob/master/plfit/tests/plfit_tests.py\" rel=\"nofollow\">https://github.com/keflavich/plfit/blob/master/plfit/tests/plfit_tests.py</a></li>\n<li><a href=\"https://github.com/keflavich/plfit/blob/master/plfit/tests/speedcompare_plfit.py\" rel=\"nofollow\">https://github.com/keflavich/plfit/blob/master/plfit/tests/speedcompare_plfit.py</a></li>\n</ul>\n</dd>\n</dl>\n<p>A very simple example:</p>\n<pre>import plfit\nfrom numpy.random import rand,seed\n\n# generate a power law using the \"inverse\" power-law generator code\nX=plfit.plexp_inv(rand(1000),1,2.5)\n\n# use the numpy version to fit (usefortran=False is only needed if you installed the fortran version)\nmyplfit=plfit.plfit(X,usefortran=False)\n# output should look something like this:\n# PYTHON plfit executed in 0.201362 seconds\n# xmin: 0.621393 n(&gt;xmin): 263 alpha: 2.39465 +/- 0.0859979   Log-Likelihood: -238.959   ks: 0.0278864 p(ks): 0.986695\n\n# generate some plots\nfrom pylab import *\nfigure(1)\nmyplfit.plotpdf()\n\nfigure(2)\nmyplfit.plotcdf()\n</pre>\n<p><em>If you use this code, please cite Clauset et al 2009</em></p>\n<p>Direction citations to the source are welcome!  The python translation has been cited in the following works (and perhaps others?):</p>\n<blockquote>\n<ul>\n<li><a href=\"http://adsabs.harvard.edu/abs/2011ApJ...735...51M\" rel=\"nofollow\">http://adsabs.harvard.edu/abs/2011ApJ\u2026735\u202651M</a></li>\n<li><a href=\"http://adsabs.harvard.edu/abs/2011ApJ...736..149G\" rel=\"nofollow\">http://adsabs.harvard.edu/abs/2011ApJ\u2026736..149G</a></li>\n<li><a href=\"http://www.rsc.org/suppdata/CC/c0/c0cc00366b/c0cc00366b.pdf\" rel=\"nofollow\">http://www.rsc.org/suppdata/CC/c0/c0cc00366b/c0cc00366b.pdf</a></li>\n<li><a href=\"http://adsabs.harvard.edu/cgi-bin/bib_query\" rel=\"nofollow\">http://adsabs.harvard.edu/cgi-bin/bib_query</a> (<a href=\"http://code.google.com/p/powerlaw\" rel=\"nofollow\">http://code.google.com/p/powerlaw</a>)</li>\n</ul>\n</blockquote>\n<a href=\"https://bitdeli.com/free\" rel=\"nofollow\"><img alt=\"Bitdeli badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf821ffaed6e4fcfcb4dc87ff8597b66309ebbc0/68747470733a2f2f64327765637a68766c38323376302e636c6f756466726f6e742e6e65742f6b65666c61766963682f706c6669742f7472656e642e706e67\"></a>\n<p>v1.0.3 - just a fresh push to pypi, probably for 2.7-&gt;3.x\nv1.0.2 - bugfix for the \u201cnosmall\u201d case and documentation update\nv1.0.1 - bugfix to pypi only; just adds things to MANIFEST.in\nv1.0 - first release</p>\n</div>\n\n          </div>"}, "last_serial": 6676728, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "f89861673fd86bd0fe740037d97dafe0", "sha256": "71db7ad405e4216fae1a47943e345f0a5c5c9508a96842f1ad1fab0b290560ef"}, "downloads": -1, "filename": "plfit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f89861673fd86bd0fe740037d97dafe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 170899, "upload_time": "2013-06-05T15:42:05", "upload_time_iso_8601": "2013-06-05T15:42:05.851345Z", "url": "https://files.pythonhosted.org/packages/95/7e/77db449bd9f89f6a9a9b47ac01b1edabf9006360aac0d12e2068d9354992/plfit-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "17c3d1afebdc052914f2d236fe5157ec", "sha256": "11bd5d24706ff55d16e4c70902d0ff005f6b0cc80c709889f7abc18220d53d82"}, "downloads": -1, "filename": "plfit-1.0.2.tar.gz", "has_sig": false, "md5_digest": "17c3d1afebdc052914f2d236fe5157ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 172084, "upload_time": "2014-01-13T14:01:52", "upload_time_iso_8601": "2014-01-13T14:01:52.267227Z", "url": "https://files.pythonhosted.org/packages/56/f3/5c9d5e07f7279e35957bc0a6115062ef82995fafd15497db1e8372a8f834/plfit-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "8c65a22cb85a91ff14fb227a6b79e2e7", "sha256": "b7197fd5ff16c930159c5cce7afb1b4c0f5e9e8c7cc44790ba9bbd5b0aa1d398"}, "downloads": -1, "filename": "plfit-1.0.3.tar.gz", "has_sig": false, "md5_digest": "8c65a22cb85a91ff14fb227a6b79e2e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193996, "upload_time": "2020-02-21T17:24:33", "upload_time_iso_8601": "2020-02-21T17:24:33.696944Z", "url": "https://files.pythonhosted.org/packages/5e/7f/c2c37a7c9ffb4878d3a8f8e450aad474c02c374f422b506c5a5198ea20f9/plfit-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c65a22cb85a91ff14fb227a6b79e2e7", "sha256": "b7197fd5ff16c930159c5cce7afb1b4c0f5e9e8c7cc44790ba9bbd5b0aa1d398"}, "downloads": -1, "filename": "plfit-1.0.3.tar.gz", "has_sig": false, "md5_digest": "8c65a22cb85a91ff14fb227a6b79e2e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193996, "upload_time": "2020-02-21T17:24:33", "upload_time_iso_8601": "2020-02-21T17:24:33.696944Z", "url": "https://files.pythonhosted.org/packages/5e/7f/c2c37a7c9ffb4878d3a8f8e450aad474c02c374f422b506c5a5198ea20f9/plfit-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:28 2020"}