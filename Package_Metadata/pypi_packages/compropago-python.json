{"info": {"author": "Noe Nieto", "author_email": "nnieto@noenieto.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: No Input/Output (Daemon)", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: Spanish", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "Compropago en Python\n====================\n\nThis is the Python library for ComproPago (https://compropago.com/), a Mexican\npayment gateway.\n\nSpanish from now on...\n\nEsta es la libreria de Python para Compropago (https://compropago.com/).\n\nComproPago es una plataforma de pagos en efectivo que ayuda a que personas que\nno cuentan con tarjeta de cr\u00e9dito puedan realizar transacciones en tiendas en\nl\u00ednea.\n\nLos clientes finales puedan pagar sus compras de Internet en establecimientos\ncomo 7Eleven, Oxxo, Extra, Soriana, Walmart, Coppel, Farmacia Benavides,\nBodega Aurrera y Farmacias Guadalajara entre otros.\n\n\nInstalaci\u00f3n\n-----------\n\nCon ``pip`` se instala as\u00ed::\n\n    pip install compropago-python\n\nSi usas `zc.buildout <http://www.buildout.org/en/latest/>`_ solo necesitas\na\u00f1adir ``compropago-python`` a la secci\u00f3n ``eggs``::\n\n    [buildout]\n    eggs =\n        ...\n        compropago-python\n\nInstalaci\u00f3n en modo desarrollo\n------------------------------\n\nDebes de tener instalado pip y de preferencia virtualenv y virtualenvwrapper.\n\n.. code-block:: bash\n\n    mkvirtualenv ve\n    workon ve\n    cd compropago-python\n    python setupy.py develop\n\nCon esto se instalan las dependencias. Ahora solo necesitas correr las pruebas.\n\n.. code-block:: bash\n    nosetests\n\nEn Windoge\n~~~~~~~~~~\n\nInstala Python. Yo lo instale con chocolatey, pero puedes usar el metodo\nque quieras. Chocolatey instal\u00f3 python en C:\\Tools\\Python2.\n\nDespu\u00e9s de instalar Python hay que instalar pip con `get-pip.py\n<https://bootstrap.pypa.io/get-pip.py>`_. [1]_\n\n.. code-block:: msdos\n    C:\\Tools\\Python2\\python.exe get-pip.py\n\nDespues puedes instalar virtualenv y crear tu entorno virtual.\n\n.. code-block:: msdos\n    C:\\Tools\\Python2\\Scripts\\pip.exe install virtualenv\n    CD C:\\Code\\MyProject\n    C:\\Tools\\Python2\\Scripts\\mkvirtualenv.exe ve\n    ve\\Scripts\\activate.exe\n\nFinalmente:\n\n.. code-block:: msdos\n    cd compropago-python\n    ..\\ve\\Scripts\\python.exe setup.py develop\n    ..\\ve\\Scripts\\nosetests.exe\n\n\n\u00bfC\u00f3mo crear un cargo?\n---------------------\n\nPara cualquier operaci\u00f3n con el API de Compropago tendr\u00e1s que usar la llave p\u00fablica que puedes obtener en el panel de Control de Compropago.\n\n.. code-block:: python\n    from compropago import CompropagoAPI, CompropagoCharge\n    COMPROPAGO_PRIVATE_API_KEY = '687881193b2423'\n    api = CompropagoAPI(api_key=COMPROPAGO_PRIVATE_API_KEY)\n    c = CompropagoCharge(\n        order_id = '1', # De preferencia un numero consecutivo asociado a una orden de compra\n        order_price = '10.59', #Compropago solo maneja pesos\n        order_name = 'La tiendita de la esquina',\n        customer_name = 'Fulano Fernandes',\n        customer_email = perengano@perez.com,\n        payment_type = 'OXXO'\n    )\n    r = api.charge(c)\n\nNota: Hay dos versiones del API: 1.0 y 1.1. Las dos versiones difieren bastante. \nSi Compropago falla diciendo que la llave es invalida, prueba con la otra llave\nque te dan el panel de control.\n\nLos tipos de pagos soportados por `payment_type` son::\n\n    OXXO\n    SEVEN_ELEVEN\n    EXTRA\n    CHEDRAUI\n    ELEKTRA\n    COPPEL\n    FARMACIA_BENAVIDES\n    FARMACIA_ESQUIVAR\n\n\nVerificar un cargo existente\n----------------------------\n\nNecesitaras el id del pago creado en el paso anterior.\n\n.. code-block:: python\n    from compropago impo    rt CompropagoAPI\n    COMPROPAGO_PRIVATE_API_KEY = '687881193b2423'\n    api = CompropagoAPI(COMPROPAGO_PRIVATE_API_KEY)\n    payment_id = '123234' # Viniendo de alguna pa\n    res = api.verify_charge(pay_id)\n    if res['object'] == 'event' and res['type'] == 'charge.success':\n        print \"Pagado\"\n\nErrores\n--------\n\nC\u00f3digo  Descripci\u00f3n\n\n4001    Llave no encontrada\n5001    ID de pago no encontrado\n5002    Tienda no encontrada\n5003    El precio del producto excede el l\u00edmite por transacci\u00f3n en el establecimiento seleccionado\n6001    Hubo un problema con el proveedor de SMS y el mensaje no se env\u00edo\n6002    Se ha superado el n\u00famero de envios SMS, m\u00e1ximo 2 mensajes por orden de pago\n6003    Compa\u00f1ia celular inv\u00e1lida, soportamos: TELCEL, MOVISTAR, IUSACELL, UNEFON y NEXTEL\n6004    N\u00famero de celular no v\u00e1lido, probablemente el n\u00famero contiene menos o m\u00e1s de 10 d\u00edgitos", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.io/tzicatl/compropago-python", "keywords": "ecommerce e-commerce payment development mexico", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "compropago-python", "package_url": "https://pypi.org/project/compropago-python/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/compropago-python/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.io/tzicatl/compropago-python"}, "release_url": "https://pypi.org/project/compropago-python/0.3/", "requires_dist": null, "requires_python": null, "summary": "Python library for ComproPago", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            Compropago en Python<br>====================<br><br>This is the Python library for ComproPago (https://compropago.com/), a Mexican<br>payment gateway.<br><br>Spanish from now on...<br><br>Esta es la libreria de Python para Compropago (https://compropago.com/).<br><br>ComproPago es una plataforma de pagos en efectivo que ayuda a que personas que<br>no cuentan con tarjeta de cr\u00e9dito puedan realizar transacciones en tiendas en<br>l\u00ednea.<br><br>Los clientes finales puedan pagar sus compras de Internet en establecimientos<br>como 7Eleven, Oxxo, Extra, Soriana, Walmart, Coppel, Farmacia Benavides,<br>Bodega Aurrera y Farmacias Guadalajara entre otros.<br><br><br>Instalaci\u00f3n<br>-----------<br><br>Con ``pip`` se instala as\u00ed::<br><br>    pip install compropago-python<br><br>Si usas `zc.buildout &lt;http://www.buildout.org/en/latest/&gt;`_ solo necesitas<br>a\u00f1adir ``compropago-python`` a la secci\u00f3n ``eggs``::<br><br>    [buildout]<br>    eggs =<br>        ...<br>        compropago-python<br><br>Instalaci\u00f3n en modo desarrollo<br>------------------------------<br><br>Debes de tener instalado pip y de preferencia virtualenv y virtualenvwrapper.<br><br>.. code-block:: bash<br><br>    mkvirtualenv ve<br>    workon ve<br>    cd compropago-python<br>    python setupy.py develop<br><br>Con esto se instalan las dependencias. Ahora solo necesitas correr las pruebas.<br><br>.. code-block:: bash<br>    nosetests<br><br>En Windoge<br>~~~~~~~~~~<br><br>Instala Python. Yo lo instale con chocolatey, pero puedes usar el metodo<br>que quieras. Chocolatey instal\u00f3 python en C:\\Tools\\Python2.<br><br>Despu\u00e9s de instalar Python hay que instalar pip con `get-pip.py<br>&lt;https://bootstrap.pypa.io/get-pip.py&gt;`_. [1]_<br><br>.. code-block:: msdos<br>    C:\\Tools\\Python2\\python.exe get-pip.py<br><br>Despues puedes instalar virtualenv y crear tu entorno virtual.<br><br>.. code-block:: msdos<br>    C:\\Tools\\Python2\\Scripts\\pip.exe install virtualenv<br>    CD C:\\Code\\MyProject<br>    C:\\Tools\\Python2\\Scripts\\mkvirtualenv.exe ve<br>    ve\\Scripts\\activate.exe<br><br>Finalmente:<br><br>.. code-block:: msdos<br>    cd compropago-python<br>    ..\\ve\\Scripts\\python.exe setup.py develop<br>    ..\\ve\\Scripts\\nosetests.exe<br><br><br>\u00bfC\u00f3mo crear un cargo?<br>---------------------<br><br>Para cualquier operaci\u00f3n con el API de Compropago tendr\u00e1s que usar la llave p\u00fablica que puedes obtener en el panel de Control de Compropago.<br><br>.. code-block:: python<br>    from compropago import CompropagoAPI, CompropagoCharge<br>    COMPROPAGO_PRIVATE_API_KEY = '687881193b2423'<br>    api = CompropagoAPI(api_key=COMPROPAGO_PRIVATE_API_KEY)<br>    c = CompropagoCharge(<br>        order_id = '1', # De preferencia un numero consecutivo asociado a una orden de compra<br>        order_price = '10.59', #Compropago solo maneja pesos<br>        order_name = 'La tiendita de la esquina',<br>        customer_name = 'Fulano Fernandes',<br>        customer_email = perengano@perez.com,<br>        payment_type = 'OXXO'<br>    )<br>    r = api.charge(c)<br><br>Nota: Hay dos versiones del API: 1.0 y 1.1. Las dos versiones difieren bastante. <br>Si Compropago falla diciendo que la llave es invalida, prueba con la otra llave<br>que te dan el panel de control.<br><br>Los tipos de pagos soportados por `payment_type` son::<br><br>    OXXO<br>    SEVEN_ELEVEN<br>    EXTRA<br>    CHEDRAUI<br>    ELEKTRA<br>    COPPEL<br>    FARMACIA_BENAVIDES<br>    FARMACIA_ESQUIVAR<br><br><br>Verificar un cargo existente<br>----------------------------<br><br>Necesitaras el id del pago creado en el paso anterior.<br><br>.. code-block:: python<br>    from compropago impo    rt CompropagoAPI<br>    COMPROPAGO_PRIVATE_API_KEY = '687881193b2423'<br>    api = CompropagoAPI(COMPROPAGO_PRIVATE_API_KEY)<br>    payment_id = '123234' # Viniendo de alguna pa<br>    res = api.verify_charge(pay_id)<br>    if res['object'] == 'event' and res['type'] == 'charge.success':<br>        print \"Pagado\"<br><br>Errores<br>--------<br><br>C\u00f3digo  Descripci\u00f3n<br><br>4001    Llave no encontrada<br>5001    ID de pago no encontrado<br>5002    Tienda no encontrada<br>5003    El precio del producto excede el l\u00edmite por transacci\u00f3n en el establecimiento seleccionado<br>6001    Hubo un problema con el proveedor de SMS y el mensaje no se env\u00edo<br>6002    Se ha superado el n\u00famero de envios SMS, m\u00e1ximo 2 mensajes por orden de pago<br>6003    Compa\u00f1ia celular inv\u00e1lida, soportamos: TELCEL, MOVISTAR, IUSACELL, UNEFON y NEXTEL<br>6004    N\u00famero de celular no v\u00e1lido, probablemente el n\u00famero contiene menos o m\u00e1s de 10 d\u00edgitos\n          </div>"}, "last_serial": 1945063, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1f12fa6c19e02bc3487b9795101f5192", "sha256": "ea639eabee93b5187968714174e7785c2d0d9b6f0a21abea738b81280baceeb4"}, "downloads": -1, "filename": "compropago_python-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1f12fa6c19e02bc3487b9795101f5192", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9516, "upload_time": "2015-11-30T04:18:04", "upload_time_iso_8601": "2015-11-30T04:18:04.942634Z", "url": "https://files.pythonhosted.org/packages/ae/d6/8e4f5da50841acd59cecdebc6d7657a8ea35e03b19950e763689344d9225/compropago_python-0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b05255153bde81d88433d275889b1869", "sha256": "fa6688903bb6cca385988474c8b37e079997f81e6c72fd1812e1d14514ff98bb"}, "downloads": -1, "filename": "compropago-python-0.1.tar.gz", "has_sig": false, "md5_digest": "b05255153bde81d88433d275889b1869", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6098, "upload_time": "2015-11-30T04:18:15", "upload_time_iso_8601": "2015-11-30T04:18:15.270153Z", "url": "https://files.pythonhosted.org/packages/59/f4/c46b3d27ea10e895235205a0961e1a8e740ca64d20c649d1f9578ceaebbf/compropago-python-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b6c072d144f392ab0192f18cd29eedd9", "sha256": "dec1fe95f72ce3eda4d8cbbd92f2d3dc871e72cf9736c47f6f7f71356840f72f"}, "downloads": -1, "filename": "compropago_python-0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "b6c072d144f392ab0192f18cd29eedd9", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9599, "upload_time": "2016-01-24T21:25:11", "upload_time_iso_8601": "2016-01-24T21:25:11.741214Z", "url": "https://files.pythonhosted.org/packages/a3/1b/7f4e948ba6b29e358d548c0031a7a89d88b95b966b44bbd9e1db33fb4092/compropago_python-0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c7fd844f3fe7c204e849e09fd19f6d0", "sha256": "04e5ea52750df97f4857da2d8a9dca048c45c05bb5cacd4b0c0445d249db4837"}, "downloads": -1, "filename": "compropago-python-0.2.tar.gz", "has_sig": false, "md5_digest": "7c7fd844f3fe7c204e849e09fd19f6d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6208, "upload_time": "2016-01-24T21:25:04", "upload_time_iso_8601": "2016-01-24T21:25:04.763451Z", "url": "https://files.pythonhosted.org/packages/9e/41/2026b4d6af1394d15d5b60811b6650164c68da7cfbaa931f6d8af2e6ecdd/compropago-python-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "848b242c26f8f9f5b2bfb8b857d0fa57", "sha256": "975bc54ad69cfe3ac32f0c134f2f759cc348375fb98d37a33723eb3e07b89327"}, "downloads": -1, "filename": "compropago_python-0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "848b242c26f8f9f5b2bfb8b857d0fa57", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9618, "upload_time": "2016-02-08T06:14:11", "upload_time_iso_8601": "2016-02-08T06:14:11.246610Z", "url": "https://files.pythonhosted.org/packages/3f/59/f2a54eb6981aba85d3d04cfac752f236251c524fa3c32c307f35b17bc959/compropago_python-0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc354ddc1a42521df79066f902d6891", "sha256": "7f0e9b8e689845265e51fef305bbe3859f356f7902723815eb51cf5a0ca52f1a"}, "downloads": -1, "filename": "compropago-python-0.3.tar.gz", "has_sig": false, "md5_digest": "cdc354ddc1a42521df79066f902d6891", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6222, "upload_time": "2016-02-08T06:13:58", "upload_time_iso_8601": "2016-02-08T06:13:58.734654Z", "url": "https://files.pythonhosted.org/packages/41/8f/a840e4694eba3c59f514bd61a2e5ef1ad82f338b2f157309928b238f3eec/compropago-python-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "848b242c26f8f9f5b2bfb8b857d0fa57", "sha256": "975bc54ad69cfe3ac32f0c134f2f759cc348375fb98d37a33723eb3e07b89327"}, "downloads": -1, "filename": "compropago_python-0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "848b242c26f8f9f5b2bfb8b857d0fa57", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 9618, "upload_time": "2016-02-08T06:14:11", "upload_time_iso_8601": "2016-02-08T06:14:11.246610Z", "url": "https://files.pythonhosted.org/packages/3f/59/f2a54eb6981aba85d3d04cfac752f236251c524fa3c32c307f35b17bc959/compropago_python-0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdc354ddc1a42521df79066f902d6891", "sha256": "7f0e9b8e689845265e51fef305bbe3859f356f7902723815eb51cf5a0ca52f1a"}, "downloads": -1, "filename": "compropago-python-0.3.tar.gz", "has_sig": false, "md5_digest": "cdc354ddc1a42521df79066f902d6891", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6222, "upload_time": "2016-02-08T06:13:58", "upload_time_iso_8601": "2016-02-08T06:13:58.734654Z", "url": "https://files.pythonhosted.org/packages/41/8f/a840e4694eba3c59f514bd61a2e5ef1ad82f338b2f157309928b238f3eec/compropago-python-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:10 2020"}