{"info": {"author": "Rick van Rein (for the ARPA2 Shell project)", "author_email": "rick@openfortress.nl", "bugtrack_url": null, "classifiers": [], "description": "# The ARPA2 Shell Collection\n\n> *ARPA2 Shells are the control programs for hosts that implement\n> parts of the InternetWide Architecture.  They may integrate with\n> components like LDAP, Kerberos or databases to setup and control \n> those components.  The shells have an interactive interface and\n> a JSON access path.*\n\nTo operate a node in your infrastructure, you might use the basic\ncommands relating to the various programs that make them do what\nthey are supposed to do.  Or you might use a wrapper shell that\nis designed to make functionality available at a conceptual level.\nThis is the intention of the ARPA2 Shells.\n\nAs part of doing something, an infrastructural node may need to\norder co-operation from another node.  This too can be done using\ntraditional techniques, for instance accessing a shell and sending\na command. then scraping the output.  This tends to be tedious and\nerrorprone.  The ARPA2 Shells facilitate a JSON access channel to\naccommodate such commands in an automation-friendly manner, and\nindeed the shells can calll on each other.\n\n\n## Access Control\n\nA vital part in the design of the ARPA2 Shell system is that they\nexercise access control not on the sessions, but on the individual\ncommands.  This is a bit like file access permissions, but now\napplied to operations.  Here it helps that the operations aim to\nbe conceptual, rather than mechanical.  Instead of granting the\npermission to write a file, you would be granting the permission\nto add and remove users under a domain.\n\nAn interesting result of this detailed level of access control is\nthat we can open the system to anyone.  The shells and their JSON\ninterfaces are open to any user anywhere, both internal and external,\nbut before they can succeed in running a certain command they need\nto be qualified to run just that command.  In other words, anyone\naccessing our shells can get a prompt -- but they may still be\nimpotent when it comes to issuing commands.  This openness is of\nimportance with our intended pluggable infrastructure, where\nthird parties can plugin service under our domain and we allow\nthem a limited degree of control.\n\n\n## Command Syntax implies JSON Scheme\n\nThe commands issued have a clear syntax, of which the ARPA2 Shells\nare aware.  This is inherited from the `cmdparser.cmdparser` package\nby Andy Pearce.  We extended this package with a JSON interface,\nusing the same grammar to form a JSON scheme.  We are still hoping\nto integrate our work into the original package, but have ceased\nwaiting and instead forked the package.  You can use our package\n`arpa2shell.cmdparser` as a drop-in replacement for the original\n`cmdparser.cmdparser` package in its 1.0.1 version.\n\nRead more:\n\n  * [Backbone Innovations](http://internetwide.org/blog/2018/11/22/backbone-innovations.html)\n  * [Protocol for ARPA2 Messaging over AMQP](PROTOCOL.MD)\n  * [Using GSS-API with AMQP](GSS-API.MD)\n\n\n## Generic Modules\n\nThe class `arpa2shell.Cmd` is a generic class from which the\nARPA2 Shells all inherit.  It provides them with a few general\nfacilities by which their behaviour is more general.  We may\nalso add a few other general things in the `arpa2shell` module,\nsuch as LDAP access, or sending JSON commands to that interface\nof other ARPA2 Shells.\n\nShells install as entry points into the `arpa2shell` or other\npackages, and the generic shell installs as an `arpa2shell`\ncommand.  This command might be started as a shell anywhere,\nbut will most commonly be used to service an OpenSSH login\nor other (remote) console access attempts.\n\nThe `arpa2shell` does not process commands on its own, but it\ncan launch other shells.  This allows switching back and forth\nbetween command environments that setup different aspects of\nthe infrastructure.  It is also possible to prefix a command\nfor a subshell with that subshell's name.  The result is that\nARPA2 Shells can focus on one aspect alone, while operators\nstill have control over as many of these aspects as they need\non any particular node.\n\n\n## Choosing GSS-API and AMQP 1.0\n\nARPA2 Shells can send commands to subshells, but they should\nnot do this directly.  Instead, they should rely on a switching\nbackbone that grants optimum flexibility to the operator and\ndomain owners.  This is established by messaging through AMQP 1.0,\nwhere access control is achieved through GSS-API with credential\nforwarding.\n\nWe use GSS-API as an end-to-end encryption/authentication layer,\nnot TLS.  This might sound obnoxious, but it is grown out of a\ntrue need.  TLS does not protect end-to-end traffic, but instead\na single client-server connection.  Since we intend to allow any\nuser to access any shell, we need to account for deep linking into\nour infrastructure.  Again, the objective is to support external\ncomponents diving into whatever parts of the infrastructure and\nsimply control their usage of conceptual commands.\n\nThe choice to transport over AMQP 1.0 is for the same reason;\nhaving end-to-end protection, we can now allow for flexible\nrouting of messages between infrastructural nodes, at least\nfor the passing of JSON messages.  This is best done with a\nflexible infrastructure.  It is true that AMQP 1.0 is more\ncomplex than its predecessors, but the upgrade to 1.0 enables\nthe routing of messages between domains, and that is in the\ninterest of externally provided services being plugged into\nour infrastructure.\n\nRead more:\n\n  * [Tetralogy of a Free Internet](http://internetwide.org/blog/2016/06/24/iwo-phases.html)\n\n\n## Multiple Shells in one Setup\n\nOperators may install multiple shells on one machine, and\nto simplify that we support multiple shells in one Git repository.\nThis is not required, other repositories can add their own shells\nunder the `arpa2shell` name space.\n\nThe `setup.py` builds and distributes multiple software\npackages at once.  You normally want to install the ones that\nmake sense locally, so keep an eye on that.  We may split up\nthe `setup.py` later if that makes sense.\n\nThe currently supported shells are:\n\n  * The meta-shell `arpa2shell`\n  * The basic client `arpa2api` for JSON / GSS-API / AMQP 1.0\n  * The basic server `arpa2api.d` for JSON / GSS-API / AMQP 1.0\n  * [arpa2dns](src/arpa2dns/README.MD) for DNS management\n  * [arpa2id](src/arpa2id/README.MD) for Identity management\n  * [arpa2reservoir](src/arpa2dns/README.MD) for DNS management\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/arpa2/shell", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "arpa2.shell", "package_url": "https://pypi.org/project/arpa2.shell/", "platform": "", "project_url": "https://pypi.org/project/arpa2.shell/", "project_urls": {"Homepage": "https://gitlab.com/arpa2/shell"}, "release_url": "https://pypi.org/project/arpa2.shell/0.1.0/", "requires_dist": ["six", "enum34 ; python_version < \"3\"", "gssapi ; extra == 'json'", "python-qpid-proton ; extra == 'json'"], "requires_python": "", "summary": "Generic ARPA2 commandline shell support -- shell switching -- JSON/AMQP backend", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>The ARPA2 Shell Collection</h1>\n<blockquote>\n<p><em>ARPA2 Shells are the control programs for hosts that implement\nparts of the InternetWide Architecture.  They may integrate with\ncomponents like LDAP, Kerberos or databases to setup and control\nthose components.  The shells have an interactive interface and\na JSON access path.</em></p>\n</blockquote>\n<p>To operate a node in your infrastructure, you might use the basic\ncommands relating to the various programs that make them do what\nthey are supposed to do.  Or you might use a wrapper shell that\nis designed to make functionality available at a conceptual level.\nThis is the intention of the ARPA2 Shells.</p>\n<p>As part of doing something, an infrastructural node may need to\norder co-operation from another node.  This too can be done using\ntraditional techniques, for instance accessing a shell and sending\na command. then scraping the output.  This tends to be tedious and\nerrorprone.  The ARPA2 Shells facilitate a JSON access channel to\naccommodate such commands in an automation-friendly manner, and\nindeed the shells can calll on each other.</p>\n<h2>Access Control</h2>\n<p>A vital part in the design of the ARPA2 Shell system is that they\nexercise access control not on the sessions, but on the individual\ncommands.  This is a bit like file access permissions, but now\napplied to operations.  Here it helps that the operations aim to\nbe conceptual, rather than mechanical.  Instead of granting the\npermission to write a file, you would be granting the permission\nto add and remove users under a domain.</p>\n<p>An interesting result of this detailed level of access control is\nthat we can open the system to anyone.  The shells and their JSON\ninterfaces are open to any user anywhere, both internal and external,\nbut before they can succeed in running a certain command they need\nto be qualified to run just that command.  In other words, anyone\naccessing our shells can get a prompt -- but they may still be\nimpotent when it comes to issuing commands.  This openness is of\nimportance with our intended pluggable infrastructure, where\nthird parties can plugin service under our domain and we allow\nthem a limited degree of control.</p>\n<h2>Command Syntax implies JSON Scheme</h2>\n<p>The commands issued have a clear syntax, of which the ARPA2 Shells\nare aware.  This is inherited from the <code>cmdparser.cmdparser</code> package\nby Andy Pearce.  We extended this package with a JSON interface,\nusing the same grammar to form a JSON scheme.  We are still hoping\nto integrate our work into the original package, but have ceased\nwaiting and instead forked the package.  You can use our package\n<code>arpa2shell.cmdparser</code> as a drop-in replacement for the original\n<code>cmdparser.cmdparser</code> package in its 1.0.1 version.</p>\n<p>Read more:</p>\n<ul>\n<li><a href=\"http://internetwide.org/blog/2018/11/22/backbone-innovations.html\" rel=\"nofollow\">Backbone Innovations</a></li>\n<li><a href=\"PROTOCOL.MD\" rel=\"nofollow\">Protocol for ARPA2 Messaging over AMQP</a></li>\n<li><a href=\"GSS-API.MD\" rel=\"nofollow\">Using GSS-API with AMQP</a></li>\n</ul>\n<h2>Generic Modules</h2>\n<p>The class <code>arpa2shell.Cmd</code> is a generic class from which the\nARPA2 Shells all inherit.  It provides them with a few general\nfacilities by which their behaviour is more general.  We may\nalso add a few other general things in the <code>arpa2shell</code> module,\nsuch as LDAP access, or sending JSON commands to that interface\nof other ARPA2 Shells.</p>\n<p>Shells install as entry points into the <code>arpa2shell</code> or other\npackages, and the generic shell installs as an <code>arpa2shell</code>\ncommand.  This command might be started as a shell anywhere,\nbut will most commonly be used to service an OpenSSH login\nor other (remote) console access attempts.</p>\n<p>The <code>arpa2shell</code> does not process commands on its own, but it\ncan launch other shells.  This allows switching back and forth\nbetween command environments that setup different aspects of\nthe infrastructure.  It is also possible to prefix a command\nfor a subshell with that subshell's name.  The result is that\nARPA2 Shells can focus on one aspect alone, while operators\nstill have control over as many of these aspects as they need\non any particular node.</p>\n<h2>Choosing GSS-API and AMQP 1.0</h2>\n<p>ARPA2 Shells can send commands to subshells, but they should\nnot do this directly.  Instead, they should rely on a switching\nbackbone that grants optimum flexibility to the operator and\ndomain owners.  This is established by messaging through AMQP 1.0,\nwhere access control is achieved through GSS-API with credential\nforwarding.</p>\n<p>We use GSS-API as an end-to-end encryption/authentication layer,\nnot TLS.  This might sound obnoxious, but it is grown out of a\ntrue need.  TLS does not protect end-to-end traffic, but instead\na single client-server connection.  Since we intend to allow any\nuser to access any shell, we need to account for deep linking into\nour infrastructure.  Again, the objective is to support external\ncomponents diving into whatever parts of the infrastructure and\nsimply control their usage of conceptual commands.</p>\n<p>The choice to transport over AMQP 1.0 is for the same reason;\nhaving end-to-end protection, we can now allow for flexible\nrouting of messages between infrastructural nodes, at least\nfor the passing of JSON messages.  This is best done with a\nflexible infrastructure.  It is true that AMQP 1.0 is more\ncomplex than its predecessors, but the upgrade to 1.0 enables\nthe routing of messages between domains, and that is in the\ninterest of externally provided services being plugged into\nour infrastructure.</p>\n<p>Read more:</p>\n<ul>\n<li><a href=\"http://internetwide.org/blog/2016/06/24/iwo-phases.html\" rel=\"nofollow\">Tetralogy of a Free Internet</a></li>\n</ul>\n<h2>Multiple Shells in one Setup</h2>\n<p>Operators may install multiple shells on one machine, and\nto simplify that we support multiple shells in one Git repository.\nThis is not required, other repositories can add their own shells\nunder the <code>arpa2shell</code> name space.</p>\n<p>The <code>setup.py</code> builds and distributes multiple software\npackages at once.  You normally want to install the ones that\nmake sense locally, so keep an eye on that.  We may split up\nthe <code>setup.py</code> later if that makes sense.</p>\n<p>The currently supported shells are:</p>\n<ul>\n<li>The meta-shell <code>arpa2shell</code></li>\n<li>The basic client <code>arpa2api</code> for JSON / GSS-API / AMQP 1.0</li>\n<li>The basic server <code>arpa2api.d</code> for JSON / GSS-API / AMQP 1.0</li>\n<li><a href=\"src/arpa2dns/README.MD\" rel=\"nofollow\">arpa2dns</a> for DNS management</li>\n<li><a href=\"src/arpa2id/README.MD\" rel=\"nofollow\">arpa2id</a> for Identity management</li>\n<li><a href=\"src/arpa2dns/README.MD\" rel=\"nofollow\">arpa2reservoir</a> for DNS management</li>\n</ul>\n\n          </div>"}, "last_serial": 6630622, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cb4769a726c91e453173f88c2c210323", "sha256": "30e46bdfabfadf8065019056ebbed5581480873513c8bd82f5433dadfb4e660a"}, "downloads": -1, "filename": "arpa2.shell-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb4769a726c91e453173f88c2c210323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37995, "upload_time": "2020-02-14T12:42:40", "upload_time_iso_8601": "2020-02-14T12:42:40.754505Z", "url": "https://files.pythonhosted.org/packages/57/8a/65d818dd6725886e4e497f1783c2b4fe5624e1a864b2dd1b023955fa9be1/arpa2.shell-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc4bc49ee314fe6d7117033c9d76853f", "sha256": "bdf0a0bfee94f7a47c2f7a88b003fbee8eef6bbece0967f82b0eb8d5028706f4"}, "downloads": -1, "filename": "arpa2.shell-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cc4bc49ee314fe6d7117033c9d76853f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4822, "upload_time": "2020-02-14T12:42:50", "upload_time_iso_8601": "2020-02-14T12:42:50.877554Z", "url": "https://files.pythonhosted.org/packages/8b/20/d43c17d544f7240e3a0d7cd1dd6e047a72e09de5ec5f6a2188d133caa0af/arpa2.shell-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb4769a726c91e453173f88c2c210323", "sha256": "30e46bdfabfadf8065019056ebbed5581480873513c8bd82f5433dadfb4e660a"}, "downloads": -1, "filename": "arpa2.shell-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb4769a726c91e453173f88c2c210323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 37995, "upload_time": "2020-02-14T12:42:40", "upload_time_iso_8601": "2020-02-14T12:42:40.754505Z", "url": "https://files.pythonhosted.org/packages/57/8a/65d818dd6725886e4e497f1783c2b4fe5624e1a864b2dd1b023955fa9be1/arpa2.shell-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc4bc49ee314fe6d7117033c9d76853f", "sha256": "bdf0a0bfee94f7a47c2f7a88b003fbee8eef6bbece0967f82b0eb8d5028706f4"}, "downloads": -1, "filename": "arpa2.shell-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cc4bc49ee314fe6d7117033c9d76853f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4822, "upload_time": "2020-02-14T12:42:50", "upload_time_iso_8601": "2020-02-14T12:42:50.877554Z", "url": "https://files.pythonhosted.org/packages/8b/20/d43c17d544f7240e3a0d7cd1dd6e047a72e09de5ec5f6a2188d133caa0af/arpa2.shell-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:11 2020"}