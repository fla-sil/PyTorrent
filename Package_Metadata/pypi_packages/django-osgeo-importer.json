{"info": {"author": "django-osgeo-importer contributors", "author_email": "garnertb@prominentedge.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7"], "description": "[![Build Status](https://travis-ci.org/GeoNode/django-osgeo-importer.svg?branch=master)](https://travis-ci.org/GeoNode/django-osgeo-importer)\n[![Coverage Status](https://coveralls.io/repos/github/GeoNode/django-osgeo-importer/badge.svg?branch=master)](https://coveralls.io/github/GeoNode/django-osgeo-importer?branch=master)\n\n# django-osgeo-importer\nosgeo-importer is a Django application that helps you create custom pipelines for uploading geospatial data.  It's goal is to provide a highly extensible, easily testable and reusable framework for importing data into geospatial applications.\n\n\n## Installation\n`pip install git+https://github.com/GeoNode/django-osgeo-importer.git`\n\n\n## Supported geodata formats\n\n* Shapefile\n* KML\n* GeoJSON\n* GeoTIFF\n* GeoPackage\n* CSV\n* NITF\n\nThese formats are officially supported, meaning that we make a public\ncommitment to maintain support for them, including testing and maintenance to\nensure they keep working. In particular, we will not make any changes to\ndependencies (like supported GDAL versions) which endangers support for these\nofficially supported formats.\n\n\n## Settings\n* `OSGEO_IMPORTER`: The default Importer to use for uploads.\n* `OSGEO_INSPECTOR`: The default Inspector to use for uploads.\n* `OSGEO_IMPORTER_GEONODE_ENABLED`: If `True`, the osgeo_importer will expose the [GeoNode-flavored](osgeo_importer/geonode_apis.py) APIs vs a vanilla API.\n* `IMPORT_HANDLERS`: A list of handlers that each layer is passed through during the import process. Changing this setting allows complete customization \u2013 even replacement \u2013 of the osgeo-importer import process.\n\n## Running test cases.\n\nRequires [Vagrant](http://vagrantup.com).\n\n```shell\nvagrant up\nvagrant ssh\npython /vagrant/manage.py test osgeo_importer\n```\n\n## Frontend\n\nThe Django app comes with an Angular-based wizard. If you are just using the\nDjango app, you do not need to do anything special for the frontend and you can\nignore this section.\n\nHowever, if you are interested in making changes to the frontend, the frontend\ndependencies can be managed using `npm` via a `package.json` file, and the\nmost common tasks are automated via `make` (using a `Makefile`).\n\nFor example, if you want to regenerate the static files for the frontend, then\nyou can change to the directory `osgeo_importer/static/osgeo_importer` and then\njust run `make`.\n\nIf you want to upgrade versions of anything, you can edit `package.json` to\nspecify the desired updates, then run `make clean; make`. If any files are\nchanged, it is up to you to commit them into the git repo if you want them to\nbe used \"out of the box.\"\n\nTo watch files for changes and run the tests, you can run\n`./node_modules/karma/bin/karma start`.\n\n\n## Concepts\nThe import process starts with an extensible Angular-based wizard that allows the user to upload a file\nand provide configuration options.  Once the user starts the import, the configuration options are passed to an\nImporter which will read the incoming geospatial data and load it into a target data store (ie: PostGIS).  Once\nthe data has been successfully loaded, the Importer will execute a series of \"handlers\" that process the data\nfor use in your application.\n\n\n### Inspectors\nInspectors are Python classes that are responsible for reading incoming geospatial datasets.  Custom inspectors should\n implement the methods exposed in the `InspectorMixin`.\n\n##### GDALInspector\nUses the GDAL library to read geospatial data.\n\nGDALInspector settings:\n\n`IMPORT_CSV_X_FIELDS` : List of fields passed in as the X_POSSIBLE_NAMES open options to the CSV Driver.\n`IMPORT_CSV_Y_FIELDS` : List of fields passed in as the Y_POSSIBLE_NAMES open options to the CSV Driver.\n`IMPORT_CSV_GEOM_FIELDS` : List of fields passed in as the GEOM_POSSIBLE_NAMES open options to the CSV Driver.\n\n##### OGRInspector\nUses the OGR library to read geospatial data.\n\n### Handlers\nHandlers are Python classes which are executed in order by the Importer after the import process has succeeded.  The response from\nthe Importer's `import` method is sent to each handler which includes the configuration options provided at upload.\n\n\n### Importers\nImporters are Python classes that are responsible for opening incoming geospatial datasets (using one or many inspectors) and\ncopying features to a target location - typically a PostGIS database.\n\n### Adding Support for Additional EPSG Codes\nIf you have data sets with projections that are not currently supported by the EPSG codes in the Pyproj data directory,\nyou can add additional EPSG codes.  Inside the scripts folder there is a file called epsg_extra with some examples\nof additional EPSG codes that we've added.  You can add any additional EPSG code with it's corresponding projection\nin that file using the same format as our examples.\n\nYou'll need to copy that file to your Pyproj data directory, which by default is\n/usr/local/lib/python2.7/dist-packages/pyproj/data.  If your Pyproj data directory is in a different location, you may\nneed to add the PROJECTION_SETTINGS settings variable in your own Django settings with the directory that you're using.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GeoNode/django-osgeo-importer", "keywords": null, "license": "GPLv3+", "maintainer": null, "maintainer_email": null, "name": "django-osgeo-importer", "package_url": "https://pypi.org/project/django-osgeo-importer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-osgeo-importer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/GeoNode/django-osgeo-importer"}, "release_url": "https://pypi.org/project/django-osgeo-importer/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "django-osgeo-importer is a reusable Django application for inspecting geospatial data using GDAL/OGR and importing the data into an application.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/GeoNode/django-osgeo-importer.svg?branch=master)](https://travis-ci.org/GeoNode/django-osgeo-importer)<br>[![Coverage Status](https://coveralls.io/repos/github/GeoNode/django-osgeo-importer/badge.svg?branch=master)](https://coveralls.io/github/GeoNode/django-osgeo-importer?branch=master)<br><br># django-osgeo-importer<br>osgeo-importer is a Django application that helps you create custom pipelines for uploading geospatial data.  It's goal is to provide a highly extensible, easily testable and reusable framework for importing data into geospatial applications.<br><br><br>## Installation<br>`pip install git+https://github.com/GeoNode/django-osgeo-importer.git`<br><br><br>## Supported geodata formats<br><br>* Shapefile<br>* KML<br>* GeoJSON<br>* GeoTIFF<br>* GeoPackage<br>* CSV<br>* NITF<br><br>These formats are officially supported, meaning that we make a public<br>commitment to maintain support for them, including testing and maintenance to<br>ensure they keep working. In particular, we will not make any changes to<br>dependencies (like supported GDAL versions) which endangers support for these<br>officially supported formats.<br><br><br>## Settings<br>* `OSGEO_IMPORTER`: The default Importer to use for uploads.<br>* `OSGEO_INSPECTOR`: The default Inspector to use for uploads.<br>* `OSGEO_IMPORTER_GEONODE_ENABLED`: If `True`, the osgeo_importer will expose the [GeoNode-flavored](osgeo_importer/geonode_apis.py) APIs vs a vanilla API.<br>* `IMPORT_HANDLERS`: A list of handlers that each layer is passed through during the import process. Changing this setting allows complete customization \u2013 even replacement \u2013 of the osgeo-importer import process.<br><br>## Running test cases.<br><br>Requires [Vagrant](http://vagrantup.com).<br><br>```shell<br>vagrant up<br>vagrant ssh<br>python /vagrant/manage.py test osgeo_importer<br>```<br><br>## Frontend<br><br>The Django app comes with an Angular-based wizard. If you are just using the<br>Django app, you do not need to do anything special for the frontend and you can<br>ignore this section.<br><br>However, if you are interested in making changes to the frontend, the frontend<br>dependencies can be managed using `npm` via a `package.json` file, and the<br>most common tasks are automated via `make` (using a `Makefile`).<br><br>For example, if you want to regenerate the static files for the frontend, then<br>you can change to the directory `osgeo_importer/static/osgeo_importer` and then<br>just run `make`.<br><br>If you want to upgrade versions of anything, you can edit `package.json` to<br>specify the desired updates, then run `make clean; make`. If any files are<br>changed, it is up to you to commit them into the git repo if you want them to<br>be used \"out of the box.\"<br><br>To watch files for changes and run the tests, you can run<br>`./node_modules/karma/bin/karma start`.<br><br><br>## Concepts<br>The import process starts with an extensible Angular-based wizard that allows the user to upload a file<br>and provide configuration options.  Once the user starts the import, the configuration options are passed to an<br>Importer which will read the incoming geospatial data and load it into a target data store (ie: PostGIS).  Once<br>the data has been successfully loaded, the Importer will execute a series of \"handlers\" that process the data<br>for use in your application.<br><br><br>### Inspectors<br>Inspectors are Python classes that are responsible for reading incoming geospatial datasets.  Custom inspectors should<br> implement the methods exposed in the `InspectorMixin`.<br><br>##### GDALInspector<br>Uses the GDAL library to read geospatial data.<br><br>GDALInspector settings:<br><br>`IMPORT_CSV_X_FIELDS` : List of fields passed in as the X_POSSIBLE_NAMES open options to the CSV Driver.<br>`IMPORT_CSV_Y_FIELDS` : List of fields passed in as the Y_POSSIBLE_NAMES open options to the CSV Driver.<br>`IMPORT_CSV_GEOM_FIELDS` : List of fields passed in as the GEOM_POSSIBLE_NAMES open options to the CSV Driver.<br><br>##### OGRInspector<br>Uses the OGR library to read geospatial data.<br><br>### Handlers<br>Handlers are Python classes which are executed in order by the Importer after the import process has succeeded.  The response from<br>the Importer's `import` method is sent to each handler which includes the configuration options provided at upload.<br><br><br>### Importers<br>Importers are Python classes that are responsible for opening incoming geospatial datasets (using one or many inspectors) and<br>copying features to a target location - typically a PostGIS database.<br><br>### Adding Support for Additional EPSG Codes<br>If you have data sets with projections that are not currently supported by the EPSG codes in the Pyproj data directory,<br>you can add additional EPSG codes.  Inside the scripts folder there is a file called epsg_extra with some examples<br>of additional EPSG codes that we've added.  You can add any additional EPSG code with it's corresponding projection<br>in that file using the same format as our examples.<br><br>You'll need to copy that file to your Pyproj data directory, which by default is<br>/usr/local/lib/python2.7/dist-packages/pyproj/data.  If your Pyproj data directory is in a different location, you may<br>need to add the PROJECTION_SETTINGS settings variable in your own Django settings with the directory that you're using.\n          </div>"}, "last_serial": 2903168, "releases": {"0.1.1a0": [{"comment_text": "", "digests": {"md5": "9ae08ce57c197b342eeab4b20de5fd00", "sha256": "b64aa81c034f73c8311b875d33d38f599090c9674ac08a1ec57312f7663968b6"}, "downloads": -1, "filename": "django-osgeo-importer-0.1.1a0.tar.gz", "has_sig": false, "md5_digest": "9ae08ce57c197b342eeab4b20de5fd00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 778297, "upload_time": "2017-01-26T00:18:19", "upload_time_iso_8601": "2017-01-26T00:18:19.081936Z", "url": "https://files.pythonhosted.org/packages/f2/31/a06314d946698e2e315d36111e8e69cdfb083982b31d2a91a53269c022e5/django-osgeo-importer-0.1.1a0.tar.gz", "yanked": false}], "0.1.1a1": [{"comment_text": "", "digests": {"md5": "10a456df41411048d4ab11f7aa881166", "sha256": "3abfb7530b0befcbeec0eafff2fdcd0acdc962cf14e6d37aac1f79325822d3d1"}, "downloads": -1, "filename": "django-osgeo-importer-0.1.1a1.tar.gz", "has_sig": false, "md5_digest": "10a456df41411048d4ab11f7aa881166", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 556641, "upload_time": "2017-02-06T19:37:17", "upload_time_iso_8601": "2017-02-06T19:37:17.929990Z", "url": "https://files.pythonhosted.org/packages/d7/5e/98d2a413a64b7b2a0111908eab01d915f0670c702a1c00f6cfa3bb730631/django-osgeo-importer-0.1.1a1.tar.gz", "yanked": false}], "0.1.1a2": [{"comment_text": "", "digests": {"md5": "deff8a0235903072e7e7ae2b000d0c65", "sha256": "bd61f87ed8a1d52a9714bc21cbc51fcfb09e77c7d3054c686234336156f17b38"}, "downloads": -1, "filename": "django-osgeo-importer-0.1.1a2.tar.gz", "has_sig": false, "md5_digest": "deff8a0235903072e7e7ae2b000d0c65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 558260, "upload_time": "2017-02-09T21:10:50", "upload_time_iso_8601": "2017-02-09T21:10:50.675630Z", "url": "https://files.pythonhosted.org/packages/e7/c8/9f117313c277283510fc55109ea63861eea739efac3b620abd618d48fca4/django-osgeo-importer-0.1.1a2.tar.gz", "yanked": false}], "0.1.1a3": [{"comment_text": "", "digests": {"md5": "69a6b3016a139be696b873caa3bf6a5b", "sha256": "13798d4fa39d47d95565b8708b1b5bf9c1f80ee78942ddd8fe7842c14b532554"}, "downloads": -1, "filename": "django-osgeo-importer-0.1.1a3.tar.gz", "has_sig": false, "md5_digest": "69a6b3016a139be696b873caa3bf6a5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 559096, "upload_time": "2017-02-14T23:18:19", "upload_time_iso_8601": "2017-02-14T23:18:19.637032Z", "url": "https://files.pythonhosted.org/packages/28/67/ee7414afb79379eb04bfbb909186c2dd5d657c9958295eeb6517d7be34c9/django-osgeo-importer-0.1.1a3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b4f7b6016455b0fb9a599f0b2cfe93b1", "sha256": "8178e76a1c9f88146c019924243d7e20ea866207737dace7cb2935118f681a14"}, "downloads": -1, "filename": "django-osgeo-importer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b4f7b6016455b0fb9a599f0b2cfe93b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1192211, "upload_time": "2017-04-06T19:33:45", "upload_time_iso_8601": "2017-04-06T19:33:45.492420Z", "url": "https://files.pythonhosted.org/packages/36/27/e472c7a5fbf712858dd80dad9c0b463d4d09fc15018fef8655d53c9f48a9/django-osgeo-importer-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "360cd3108e577d04b88405e09a611124", "sha256": "ecbc55902c607e76c823caa4cc87afbb97d259a6626c0b93d1b0fa0335b68fdf"}, "downloads": -1, "filename": "django-osgeo-importer-0.2.1.tar.gz", "has_sig": false, "md5_digest": "360cd3108e577d04b88405e09a611124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 845092, "upload_time": "2017-05-26T17:48:18", "upload_time_iso_8601": "2017-05-26T17:48:18.069632Z", "url": "https://files.pythonhosted.org/packages/0f/49/603e0452a6fe45b80c6b65de64657218de7f8ba86885aac74dd98cfa84ee/django-osgeo-importer-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "360cd3108e577d04b88405e09a611124", "sha256": "ecbc55902c607e76c823caa4cc87afbb97d259a6626c0b93d1b0fa0335b68fdf"}, "downloads": -1, "filename": "django-osgeo-importer-0.2.1.tar.gz", "has_sig": false, "md5_digest": "360cd3108e577d04b88405e09a611124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 845092, "upload_time": "2017-05-26T17:48:18", "upload_time_iso_8601": "2017-05-26T17:48:18.069632Z", "url": "https://files.pythonhosted.org/packages/0f/49/603e0452a6fe45b80c6b65de64657218de7f8ba86885aac74dd98cfa84ee/django-osgeo-importer-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:22 2020"}