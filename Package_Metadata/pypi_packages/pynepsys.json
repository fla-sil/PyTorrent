{"info": {"author": "Jason Pelzer", "author_email": "pypi.org@pelzer.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "PyNepSys\n====\n\nPython package to interface with the `Neptune Systems Apex`. \nTested against an Apex Classic, handles reading probe and\noutlet state, and setting outlets to ON, OFF, AUTO modes.\n\nUsage\n-----\n\n```python\nfrom pynepsys import Apex\napex = Apex('192.168.0.2','admin','pass')\n\nconnection_status = await apex.validate_connection()\nif connection_status != 'success':\n raise Exception('Cannot connect to Apex: ' + connection_status)\n# connect and pull metadata about probes and outlets.\nawait apex.fetch_current_state()\n\noutlet = apex.outlets['KalkMixer']\n# This just updates the local copy to auto mode\noutlet.enable_auto()\n# Push the state to the Apex\nawait apex.update_outlet(outlet)\n# The mode is auto, but we don't know if it's on or off\n# until we refetch state. We can hold on to the outlet instance.\nassert not outlet.is_on() and not outlet.is_off()\n# Fetch again\nawait apex.fetch_current_state()\n\nassert outlet.is_auto() == True\nassert outlet.is_on() or outlet.is_off()\n```\n\nNeptune Systems Apex Aquacontroller: \n-----\nhttp://www.neptunesystems.com/products/apex-controllers/apex-controller-system/", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jpelzer/pynepsys", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pynepsys", "package_url": "https://pypi.org/project/pynepsys/", "platform": "", "project_url": "https://pypi.org/project/pynepsys/", "project_urls": {"Homepage": "https://github.com/jpelzer/pynepsys"}, "release_url": "https://pypi.org/project/pynepsys/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python library for Neptune Systems Apex", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyNepSys</h1>\n<p>Python package to interface with the <code>Neptune Systems Apex</code>.\nTested against an Apex Classic, handles reading probe and\noutlet state, and setting outlets to ON, OFF, AUTO modes.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pynepsys</span> <span class=\"kn\">import</span> <span class=\"n\">Apex</span>\n<span class=\"n\">apex</span> <span class=\"o\">=</span> <span class=\"n\">Apex</span><span class=\"p\">(</span><span class=\"s1\">'192.168.0.2'</span><span class=\"p\">,</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span><span class=\"s1\">'pass'</span><span class=\"p\">)</span>\n\n<span class=\"n\">connection_status</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">apex</span><span class=\"o\">.</span><span class=\"n\">validate_connection</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">connection_status</span> <span class=\"o\">!=</span> <span class=\"s1\">'success'</span><span class=\"p\">:</span>\n <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">'Cannot connect to Apex: '</span> <span class=\"o\">+</span> <span class=\"n\">connection_status</span><span class=\"p\">)</span>\n<span class=\"c1\"># connect and pull metadata about probes and outlets.</span>\n<span class=\"k\">await</span> <span class=\"n\">apex</span><span class=\"o\">.</span><span class=\"n\">fetch_current_state</span><span class=\"p\">()</span>\n\n<span class=\"n\">outlet</span> <span class=\"o\">=</span> <span class=\"n\">apex</span><span class=\"o\">.</span><span class=\"n\">outlets</span><span class=\"p\">[</span><span class=\"s1\">'KalkMixer'</span><span class=\"p\">]</span>\n<span class=\"c1\"># This just updates the local copy to auto mode</span>\n<span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">enable_auto</span><span class=\"p\">()</span>\n<span class=\"c1\"># Push the state to the Apex</span>\n<span class=\"k\">await</span> <span class=\"n\">apex</span><span class=\"o\">.</span><span class=\"n\">update_outlet</span><span class=\"p\">(</span><span class=\"n\">outlet</span><span class=\"p\">)</span>\n<span class=\"c1\"># The mode is auto, but we don't know if it's on or off</span>\n<span class=\"c1\"># until we refetch state. We can hold on to the outlet instance.</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">is_on</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">is_off</span><span class=\"p\">()</span>\n<span class=\"c1\"># Fetch again</span>\n<span class=\"k\">await</span> <span class=\"n\">apex</span><span class=\"o\">.</span><span class=\"n\">fetch_current_state</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">is_auto</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"kc\">True</span>\n<span class=\"k\">assert</span> <span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">is_on</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">outlet</span><span class=\"o\">.</span><span class=\"n\">is_off</span><span class=\"p\">()</span>\n</pre>\n<h2>Neptune Systems Apex Aquacontroller:</h2>\n<p><a href=\"http://www.neptunesystems.com/products/apex-controllers/apex-controller-system/\" rel=\"nofollow\">http://www.neptunesystems.com/products/apex-controllers/apex-controller-system/</a></p>\n\n          </div>"}, "last_serial": 7078817, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "850ee263e3704c265c1b6530ac9ba01f", "sha256": "47f9836b9342de901e5477fbe481fca6a58e61cdf7a84d5000f5f43b245947eb"}, "downloads": -1, "filename": "pynepsys-1.0.0.tar.gz", "has_sig": false, "md5_digest": "850ee263e3704c265c1b6530ac9ba01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3893, "upload_time": "2020-04-20T21:55:35", "upload_time_iso_8601": "2020-04-20T21:55:35.209281Z", "url": "https://files.pythonhosted.org/packages/4b/69/93d99c7968a0af2e3ccdd5284b6f11dd3e2b9bc41843a1bec9b0975be6bc/pynepsys-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "02e7560d2f7770118260df46f82bf489", "sha256": "e0f3dc61b5e7c1c88db465a9e2579c79a0104065b3d8badf2908910ad5a48b59"}, "downloads": -1, "filename": "pynepsys-1.1.0.tar.gz", "has_sig": false, "md5_digest": "02e7560d2f7770118260df46f82bf489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3941, "upload_time": "2020-04-22T18:54:38", "upload_time_iso_8601": "2020-04-22T18:54:38.148354Z", "url": "https://files.pythonhosted.org/packages/bb/80/4d673ff2f4b47ca0c88b4caab048857cd795a4f3aa263fc29de91fbf0c9d/pynepsys-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "02e7560d2f7770118260df46f82bf489", "sha256": "e0f3dc61b5e7c1c88db465a9e2579c79a0104065b3d8badf2908910ad5a48b59"}, "downloads": -1, "filename": "pynepsys-1.1.0.tar.gz", "has_sig": false, "md5_digest": "02e7560d2f7770118260df46f82bf489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3941, "upload_time": "2020-04-22T18:54:38", "upload_time_iso_8601": "2020-04-22T18:54:38.148354Z", "url": "https://files.pythonhosted.org/packages/bb/80/4d673ff2f4b47ca0c88b4caab048857cd795a4f3aa263fc29de91fbf0c9d/pynepsys-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:18 2020"}