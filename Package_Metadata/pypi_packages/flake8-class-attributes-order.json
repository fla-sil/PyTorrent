{"info": {"author": "Ilya Lebedev", "author_email": "melevir@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Framework :: Flake8", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance"], "description": "# flake8-class-attributes-order\n\n[![Build Status](https://travis-ci.org/best-doctor/flake8-class-attributes-order.svg?branch=master)](https://travis-ci.org/best-doctor/flake8-class-attributes-order)\n[![Maintainability](https://api.codeclimate.com/v1/badges/28b7cd9d0714ec4b93a3/maintainability)](https://codeclimate.com/github/best-doctor/flake8-class-attributes-order/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/28b7cd9d0714ec4b93a3/test_coverage)](https://codeclimate.com/github/best-doctor/flake8-class-attributes-order/test_coverage)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flake8-class-attributes-order)\n\nAn extension for flake8 to report on wrong class attributes order and\nclass level logic.\n\nThe validator can extract class attribute type: docstring, property,\nnested class, `GLOBAL_VAR`, etc.\nIf django model fields are detected, the validator can detect,\nif the field is link to another table (foreign key, generic key, etc)\nor not.\n\nAfter resolving each attribute type, validator checks attributes order.\n\nDefault configuration checks for the following order of attributes:\n\n- `__new__`\n- `__init__`\n- `__post_init__`\n- other magic methods\n- `@property`\n- `@staticmethod`\n- `@classmethod`\n- other methods\n- private methods\n\nIf the order is broken, validator will report on it.\n\nBesides methods, the validator checks other attributes methods:\ndocstrings, nested classes, constants, attributes, and so on.\n\nAlso validator checks, if class has no class level logic and report\nif any. Here is an example:\n\n```python\nclass PhoneForm(forms.Form):\n    phone = forms.CharField(17, label='\u0422\u0435\u043b\u0435\u0444\u043e\u043d'.upper())\n\n    # this should happen in __init__!\n    phone.widget.attrs.update({'class': 'form-control phone'})\n\n```\n\n## Installation\n\n```\npip install flake8-class-attributes-order\n```\n\n## Configuration\n\n### Strict mode\n\nThere is another preconfigured order that is more strict on private subtypes:\n\n- `__new__`\n- `__init__`\n- `__post_init__`\n- other magic method\n- `@property`\n- `@staticmethod`\n- `@classmethod`\n- other methods\n- private `@property`\n- private `@staticmethod`\n- private `@classmethod`\n- other private methods\n\nTo enable strict validation, please set the flag in your config file:\n\n```\n[flake8]\nuse_class_attributes_order_strict_mode = True\n```\n\n### Manual order configuration\n\nOrder can be manually configured via `class_attributes_order` config setting.\n\nFor example, if you prefer to put `class Meta` after constants and fields:\n\n```\n[flake8]\nclass_attributes_order =\n    field,\n    meta_class,\n    nested_class,\n    magic_method,\n    property_method,\n    static_method,\n    class_method,\n    method,\n    private_method\n```\n\nConfigurable options:\n\n| Option                |               Description           | Fallbacks to\\* |\n|:---------------------:|:-----------------------------------:|:--------------:|\n|meta_class             |class Meta: (e.g. in Django projects)| nested_class   |\n|nested_class           |Other nested classes                 | None\\*         |\n|constant               |SOME_CONSTANTS                       | field          |\n|outer_field            |some = models.ForeignKey etc.        | field          |\n|field                  |Other fields                         | None           |\n|`__new__`              |`__new__`                            | magic_method   |\n|`__init__`             |`__init__`                           | magic_method   |\n|`__post_init__`        |`__post_init__`                      | magic_method   |\n|`__str__`              |`__str__`                            | magic_method   |\n|magic_method           |Other magic methods                  | method         |\n|save                   |def save(...)                        | method         |\n|delete                 |def delete(...)                      | method         |\n|property_method        |@property/@cached_property etc.      | method         |\n|private_property_method|@property/@cached_property with _    | property_method|\n|static_method          |@staticmethod                        | method         |\n|private_static_method  |@staticmethod beginning with _       | static_method  |\n|class_method           |@classmethod                         | method         |\n|private_class_method   |@classmethod beginning with _        | class_method   |\n|private_method         |other methods beginning with _       | method         |\n|method                 |other methods                        | None           |\n\n\\* if not provided, will use its supertype order\n\n\\*\\*  if not defined, such base types and all their subtypes (unless defined)\nwill be ignored during validation. It's recommended\nto set at least `nested_class`, `field` and `method`\n\nYou choose how detailed your configuration is.\nFor example, you can define order of each supported magic method\n(`__new__`, `__str__`, etc.), or set `magic_method`\nto allow any order among them or even just use `method`\n\n## Example\n\n```python\nDEBUG = True\n\n\nclass User:\n    def fetch_info_from_crm(self):\n        pass\n\n    LOGIN_FIELD = 'email'  # wtf? this should be on top of class definition!\n\n\nclass UserNode:\n    class Meta:\n        model = User\n\n    if DEBUG:  # not great idea at all\n        def is_synced_with_crm(self):\n            pass\n\n```\n\nUsage:\n\n```terminal\n$ flake8 test.py\ntest.py:5:5: CCE001 User.fetch_info_from_crm should be after User.LOGIN_FIELD\ntest.py:15:5: CCE002 Class level expression detected model UserNode, line 15\n```\n\nTested on Python 3.7.x and flake8 3.7.5.\n\n## Error codes\n\n| Error code |                     Description                          |\n|:----------:|:--------------------------------------------------------:|\n|   CCE001   | Wrong class attributes order (`XXX should be after YYY`) |\n|   CCE002   | Class level expression detected                          |\n\n## Contributing\n\nWe would love you to contribute to our project. It's simple:\n\n- Create an issue with bug you found or proposal you have.\n  Wait for approve from maintainer.\n- Create a pull request. Make sure all checks are green.\n- Fix review comments if any.\n- Be awesome.\n\nHere are useful tips:\n\n- You can run all checks and tests with `make check`. Please do it\n  before TravisCI does.\n- We use\n  [BestDoctor python styleguide](https://github.com/best-doctor/guides/blob/master/guides/python_styleguide.md).\n  Sorry, styleguide is available only in Russian for now.\n- We respect [Django CoC](https://www.djangoproject.com/conduct/).\n  Make soft, not bullshit.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/best-doctor/flake8-class-attributes-order", "keywords": "flake8", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flake8-class-attributes-order", "package_url": "https://pypi.org/project/flake8-class-attributes-order/", "platform": "", "project_url": "https://pypi.org/project/flake8-class-attributes-order/", "project_urls": {"Homepage": "https://github.com/best-doctor/flake8-class-attributes-order"}, "release_url": "https://pypi.org/project/flake8-class-attributes-order/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A flake8 extension that checks classes attributes order", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>flake8-class-attributes-order</h1>\n<p><a href=\"https://travis-ci.org/best-doctor/flake8-class-attributes-order\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79959431dc1a7c880e405f50b8ece2ab350671d1/68747470733a2f2f7472617669732d63692e6f72672f626573742d646f63746f722f666c616b65382d636c6173732d617474726962757465732d6f726465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/best-doctor/flake8-class-attributes-order/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53ac6eeaf5ece7cfd6089d59a427fe36cc6429c3/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f32386237636439643037313465633462393361332f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codeclimate.com/github/best-doctor/flake8-class-attributes-order/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/716852681c73ca36e82f198aa9dc5596651eadb4/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f32386237636439643037313465633462393361332f746573745f636f766572616765\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/308ee20aafe78fdb501cb9cb8fa3ea40ddd44c0e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f666c616b65382d636c6173732d617474726962757465732d6f72646572\"></p>\n<p>An extension for flake8 to report on wrong class attributes order and\nclass level logic.</p>\n<p>The validator can extract class attribute type: docstring, property,\nnested class, <code>GLOBAL_VAR</code>, etc.\nIf django model fields are detected, the validator can detect,\nif the field is link to another table (foreign key, generic key, etc)\nor not.</p>\n<p>After resolving each attribute type, validator checks attributes order.</p>\n<p>Default configuration checks for the following order of attributes:</p>\n<ul>\n<li><code>__new__</code></li>\n<li><code>__init__</code></li>\n<li><code>__post_init__</code></li>\n<li>other magic methods</li>\n<li><code>@property</code></li>\n<li><code>@staticmethod</code></li>\n<li><code>@classmethod</code></li>\n<li>other methods</li>\n<li>private methods</li>\n</ul>\n<p>If the order is broken, validator will report on it.</p>\n<p>Besides methods, the validator checks other attributes methods:\ndocstrings, nested classes, constants, attributes, and so on.</p>\n<p>Also validator checks, if class has no class level logic and report\nif any. Here is an example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PhoneForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">phone</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'\u0422\u0435\u043b\u0435\u0444\u043e\u043d'</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># this should happen in __init__!</span>\n    <span class=\"n\">phone</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'form-control phone'</span><span class=\"p\">})</span>\n</pre>\n<h2>Installation</h2>\n<pre><code>pip install flake8-class-attributes-order\n</code></pre>\n<h2>Configuration</h2>\n<h3>Strict mode</h3>\n<p>There is another preconfigured order that is more strict on private subtypes:</p>\n<ul>\n<li><code>__new__</code></li>\n<li><code>__init__</code></li>\n<li><code>__post_init__</code></li>\n<li>other magic method</li>\n<li><code>@property</code></li>\n<li><code>@staticmethod</code></li>\n<li><code>@classmethod</code></li>\n<li>other methods</li>\n<li>private <code>@property</code></li>\n<li>private <code>@staticmethod</code></li>\n<li>private <code>@classmethod</code></li>\n<li>other private methods</li>\n</ul>\n<p>To enable strict validation, please set the flag in your config file:</p>\n<pre><code>[flake8]\nuse_class_attributes_order_strict_mode = True\n</code></pre>\n<h3>Manual order configuration</h3>\n<p>Order can be manually configured via <code>class_attributes_order</code> config setting.</p>\n<p>For example, if you prefer to put <code>class Meta</code> after constants and fields:</p>\n<pre><code>[flake8]\nclass_attributes_order =\n    field,\n    meta_class,\n    nested_class,\n    magic_method,\n    property_method,\n    static_method,\n    class_method,\n    method,\n    private_method\n</code></pre>\n<p>Configurable options:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Option</th>\n<th align=\"center\">Description</th>\n<th align=\"center\">Fallbacks to*</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">meta_class</td>\n<td align=\"center\">class Meta: (e.g. in Django projects)</td>\n<td align=\"center\">nested_class</td>\n</tr>\n<tr>\n<td align=\"center\">nested_class</td>\n<td align=\"center\">Other nested classes</td>\n<td align=\"center\">None*</td>\n</tr>\n<tr>\n<td align=\"center\">constant</td>\n<td align=\"center\">SOME_CONSTANTS</td>\n<td align=\"center\">field</td>\n</tr>\n<tr>\n<td align=\"center\">outer_field</td>\n<td align=\"center\">some = models.ForeignKey etc.</td>\n<td align=\"center\">field</td>\n</tr>\n<tr>\n<td align=\"center\">field</td>\n<td align=\"center\">Other fields</td>\n<td align=\"center\">None</td>\n</tr>\n<tr>\n<td align=\"center\"><code>__new__</code></td>\n<td align=\"center\"><code>__new__</code></td>\n<td align=\"center\">magic_method</td>\n</tr>\n<tr>\n<td align=\"center\"><code>__init__</code></td>\n<td align=\"center\"><code>__init__</code></td>\n<td align=\"center\">magic_method</td>\n</tr>\n<tr>\n<td align=\"center\"><code>__post_init__</code></td>\n<td align=\"center\"><code>__post_init__</code></td>\n<td align=\"center\">magic_method</td>\n</tr>\n<tr>\n<td align=\"center\"><code>__str__</code></td>\n<td align=\"center\"><code>__str__</code></td>\n<td align=\"center\">magic_method</td>\n</tr>\n<tr>\n<td align=\"center\">magic_method</td>\n<td align=\"center\">Other magic methods</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">save</td>\n<td align=\"center\">def save(...)</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">delete</td>\n<td align=\"center\">def delete(...)</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">property_method</td>\n<td align=\"center\">@property/@cached_property etc.</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">private_property_method</td>\n<td align=\"center\">@property/@cached_property with _</td>\n<td align=\"center\">property_method</td>\n</tr>\n<tr>\n<td align=\"center\">static_method</td>\n<td align=\"center\">@staticmethod</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">private_static_method</td>\n<td align=\"center\">@staticmethod beginning with _</td>\n<td align=\"center\">static_method</td>\n</tr>\n<tr>\n<td align=\"center\">class_method</td>\n<td align=\"center\">@classmethod</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">private_class_method</td>\n<td align=\"center\">@classmethod beginning with _</td>\n<td align=\"center\">class_method</td>\n</tr>\n<tr>\n<td align=\"center\">private_method</td>\n<td align=\"center\">other methods beginning with _</td>\n<td align=\"center\">method</td>\n</tr>\n<tr>\n<td align=\"center\">method</td>\n<td align=\"center\">other methods</td>\n<td align=\"center\">None</td>\n</tr></tbody></table>\n<p>* if not provided, will use its supertype order</p>\n<p>**  if not defined, such base types and all their subtypes (unless defined)\nwill be ignored during validation. It's recommended\nto set at least <code>nested_class</code>, <code>field</code> and <code>method</code></p>\n<p>You choose how detailed your configuration is.\nFor example, you can define order of each supported magic method\n(<code>__new__</code>, <code>__str__</code>, etc.), or set <code>magic_method</code>\nto allow any order among them or even just use <code>method</code></p>\n<h2>Example</h2>\n<pre><span class=\"n\">DEBUG</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fetch_info_from_crm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"n\">LOGIN_FIELD</span> <span class=\"o\">=</span> <span class=\"s1\">'email'</span>  <span class=\"c1\"># wtf? this should be on top of class definition!</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserNode</span><span class=\"p\">:</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span>  <span class=\"c1\"># not great idea at all</span>\n        <span class=\"k\">def</span> <span class=\"nf\">is_synced_with_crm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n</pre>\n<p>Usage:</p>\n<pre>$ flake8 test.py\ntest.py:5:5: CCE001 User.fetch_info_from_crm should be after User.LOGIN_FIELD\ntest.py:15:5: CCE002 Class level expression detected model UserNode, line 15\n</pre>\n<p>Tested on Python 3.7.x and flake8 3.7.5.</p>\n<h2>Error codes</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Error code</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">CCE001</td>\n<td align=\"center\">Wrong class attributes order (<code>XXX should be after YYY</code>)</td>\n</tr>\n<tr>\n<td align=\"center\">CCE002</td>\n<td align=\"center\">Class level expression detected</td>\n</tr></tbody></table>\n<h2>Contributing</h2>\n<p>We would love you to contribute to our project. It's simple:</p>\n<ul>\n<li>Create an issue with bug you found or proposal you have.\nWait for approve from maintainer.</li>\n<li>Create a pull request. Make sure all checks are green.</li>\n<li>Fix review comments if any.</li>\n<li>Be awesome.</li>\n</ul>\n<p>Here are useful tips:</p>\n<ul>\n<li>You can run all checks and tests with <code>make check</code>. Please do it\nbefore TravisCI does.</li>\n<li>We use\n<a href=\"https://github.com/best-doctor/guides/blob/master/guides/python_styleguide.md\" rel=\"nofollow\">BestDoctor python styleguide</a>.\nSorry, styleguide is available only in Russian for now.</li>\n<li>We respect <a href=\"https://www.djangoproject.com/conduct/\" rel=\"nofollow\">Django CoC</a>.\nMake soft, not bullshit.</li>\n</ul>\n\n          </div>"}, "last_serial": 6815958, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d6852406204a36b0e9cfd3323eab42e4", "sha256": "b0d3c21f3a62cdb90a441660610ddcc65f5655ea837066f6a72def1f78bd9915"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d6852406204a36b0e9cfd3323eab42e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4940, "upload_time": "2019-02-15T10:42:29", "upload_time_iso_8601": "2019-02-15T10:42:29.025333Z", "url": "https://files.pythonhosted.org/packages/81/41/b74f37c66874bde53b3b64553c0e18450303d2218cc4658f5b8046ad6efd/flake8_class_attributes_order-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cf955f3029cac88c0a8cf7ffeb7e246c", "sha256": "b88f88463036976ffc23c5a6dd392391635eaf6416e400611eda8c3429cd02aa"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.2.tar.gz", "has_sig": false, "md5_digest": "cf955f3029cac88c0a8cf7ffeb7e246c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4939, "upload_time": "2019-02-18T06:44:57", "upload_time_iso_8601": "2019-02-18T06:44:57.921154Z", "url": "https://files.pythonhosted.org/packages/5e/bc/d7d58661d4ec8971d851dd8d5fde4830863193d9741de9f180ea2f0aef39/flake8_class_attributes_order-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ca3afc3167ad5ce06e7aad39305e1217", "sha256": "71a1ab446ccd197cb6a6febd0a59a658dd4918ca01d93afe8f6aa2a450e9e74b"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ca3afc3167ad5ce06e7aad39305e1217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4932, "upload_time": "2019-05-04T08:10:33", "upload_time_iso_8601": "2019-05-04T08:10:33.375520Z", "url": "https://files.pythonhosted.org/packages/43/17/9929b1b7a5937a226b33cac8b467f2c814fe81d0148f9d8058b5cbfea6b1/flake8_class_attributes_order-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "68448ee3f5c144e696692262cf6fc8e4", "sha256": "c2c6e4591a6800085634a88daa5df3be11a94e98acbee103e4b22e3d845b122d"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.4.tar.gz", "has_sig": false, "md5_digest": "68448ee3f5c144e696692262cf6fc8e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4983, "upload_time": "2019-09-05T05:50:47", "upload_time_iso_8601": "2019-09-05T05:50:47.841629Z", "url": "https://files.pythonhosted.org/packages/1d/56/8d76fdfb8f9fc6218623562153179651fcdea73782aa04c04a1cb19735e1/flake8_class_attributes_order-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "dd09876b6f1b462adfcea2890a3213da", "sha256": "4d6b2c2e6afeb5f90f3284df09a064da0f9156dabbba63d5fc8c89588db9d175"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.5.tar.gz", "has_sig": false, "md5_digest": "dd09876b6f1b462adfcea2890a3213da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4990, "upload_time": "2019-09-05T06:06:42", "upload_time_iso_8601": "2019-09-05T06:06:42.355757Z", "url": "https://files.pythonhosted.org/packages/0f/e0/16372c784f5ababe10a562ae7d317e54d080c93aa8f401061d3aa2b8a8bb/flake8_class_attributes_order-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "69765398c68b7fa9f1646688ad4a5cef", "sha256": "e79215345e3b3feeee39318c740da7f4512d4456c03241470428f8bfb8a50acb"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.6.tar.gz", "has_sig": false, "md5_digest": "69765398c68b7fa9f1646688ad4a5cef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5421, "upload_time": "2019-10-26T03:02:24", "upload_time_iso_8601": "2019-10-26T03:02:24.998366Z", "url": "https://files.pythonhosted.org/packages/53/46/e3cbec716bb5877aaf71c2bcb1d0ee40a078cbd2739934a75fa013fee15d/flake8_class_attributes_order-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "fab427c3773939ee93ca2cfce97da550", "sha256": "49768054bbee1fc89d0e27851338c167705a7afc7006093a4924567337c0f920"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.0.7.tar.gz", "has_sig": false, "md5_digest": "fab427c3773939ee93ca2cfce97da550", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5625, "upload_time": "2019-11-04T04:38:53", "upload_time_iso_8601": "2019-11-04T04:38:53.690801Z", "url": "https://files.pythonhosted.org/packages/20/95/1faf315279d2150d0203da485d971831239a3e8605ce2b9fba534ec52ea4/flake8_class_attributes_order-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "6f65486454b987d2facacbbb5082091a", "sha256": "ad5c85b09edcb593ae244d8839660d38e777c6ccb701e9e3edc80730a58f2228"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f65486454b987d2facacbbb5082091a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7249, "upload_time": "2020-03-15T15:34:23", "upload_time_iso_8601": "2020-03-15T15:34:23.621679Z", "url": "https://files.pythonhosted.org/packages/23/e9/75a23bfc2d67d7ef2999e7b63d75c15977f73504fe62ad162bd575011423/flake8_class_attributes_order-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f65486454b987d2facacbbb5082091a", "sha256": "ad5c85b09edcb593ae244d8839660d38e777c6ccb701e9e3edc80730a58f2228"}, "downloads": -1, "filename": "flake8_class_attributes_order-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6f65486454b987d2facacbbb5082091a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7249, "upload_time": "2020-03-15T15:34:23", "upload_time_iso_8601": "2020-03-15T15:34:23.621679Z", "url": "https://files.pythonhosted.org/packages/23/e9/75a23bfc2d67d7ef2999e7b63d75c15977f73504fe62ad162bd575011423/flake8_class_attributes_order-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:57 2020"}