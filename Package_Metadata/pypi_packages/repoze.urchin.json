{"info": {"author": "Agendaless Consulting", "author_email": "repoze-dev@lists.repoze.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware"], "description": "repoze.urchin README\n====================\n\nThis package provides WSGI middleware for injecting the markup\nrequired to use Google Analytics into web pages.\n\nPlease see docs/index.rst for detailed documentation.\n\n\nrepoze.urchin Changelog\n=======================\n\n0.2 (2011-10-10)\n----------------\n\n- Replaced urchin javascript with new async tracking code. See:\n\n    http://www.google.com/support/googleanalytics/bin/answer.py?answer=174090\n\n  Note that the script is now inserted at the end of the <head> tag.\n\n- Added bypass for HEAD requests. This is a workaround for an assertion in\n  webob.Response that doesn't let you set the body on a response if the request\n  method is 'HEAD'. This behavior on the part of webob is actually bogus, as\n  outlined here:\n\n    http://blog.dscpl.com.au/2009/10/wsgi-issues-with-http-head-requests.html\n\n  The key issue here is that as long as anything in the WSGI stack tries to\n  special case 'HEAD' requests, we can end up with responses with headers which\n  differ depending on whether the request method is 'GET' or 'HEAD'.  In this\n  specific example, by bypassing the urchin processing in the event of a HEAD\n  request, we wind up with a Content-Length header for HEAD that doesn't\n  include the extra bytes for the inserted urchin code that we would get with a\n  GET request. This is, by definition of the standards, wrong, and yet\n  unavoidable as long as webob is in our stack.\n\n  For now, we can hold our noses and know that probably nothing's going to\n  really break because of this discrepency, but we can maybe try to convince\n  the webob crowd to drop conditional processing for HEAD requests.\n\n0.1 (2009-06-02)\n----------------\n\n- Initial release.", "description_content_type": null, "docs_url": "https://pythonhosted.org/repoze.urchin/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.repoze.org", "keywords": "web wsgi GoogleAnalytics", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "repoze.urchin", "package_url": "https://pypi.org/project/repoze.urchin/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repoze.urchin/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.repoze.org"}, "release_url": "https://pypi.org/project/repoze.urchin/0.2/", "requires_dist": null, "requires_python": null, "summary": "WSGI middleware for Google analytics", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"repoze-urchin-readme\">\n<h2>repoze.urchin README</h2>\n<p>This package provides WSGI middleware for injecting the markup\nrequired to use Google Analytics into web pages.</p>\n<p>Please see docs/index.rst for detailed documentation.</p>\n</div>\n<div id=\"repoze-urchin-changelog\">\n<h2>repoze.urchin Changelog</h2>\n<div id=\"id1\">\n<h3>0.2 (2011-10-10)</h3>\n<ul>\n<li><p>Replaced urchin javascript with new async tracking code. See:</p>\n<blockquote>\n<p><a href=\"http://www.google.com/support/googleanalytics/bin/answer.py?answer=174090\" rel=\"nofollow\">http://www.google.com/support/googleanalytics/bin/answer.py?answer=174090</a></p>\n</blockquote>\n<p>Note that the script is now inserted at the end of the &lt;head&gt; tag.</p>\n</li>\n<li><p>Added bypass for HEAD requests. This is a workaround for an assertion in\nwebob.Response that doesn\u2019t let you set the body on a response if the request\nmethod is \u2018HEAD\u2019. This behavior on the part of webob is actually bogus, as\noutlined here:</p>\n<blockquote>\n<p><a href=\"http://blog.dscpl.com.au/2009/10/wsgi-issues-with-http-head-requests.html\" rel=\"nofollow\">http://blog.dscpl.com.au/2009/10/wsgi-issues-with-http-head-requests.html</a></p>\n</blockquote>\n<p>The key issue here is that as long as anything in the WSGI stack tries to\nspecial case \u2018HEAD\u2019 requests, we can end up with responses with headers which\ndiffer depending on whether the request method is \u2018GET\u2019 or \u2018HEAD\u2019.  In this\nspecific example, by bypassing the urchin processing in the event of a HEAD\nrequest, we wind up with a Content-Length header for HEAD that doesn\u2019t\ninclude the extra bytes for the inserted urchin code that we would get with a\nGET request. This is, by definition of the standards, wrong, and yet\nunavoidable as long as webob is in our stack.</p>\n<p>For now, we can hold our noses and know that probably nothing\u2019s going to\nreally break because of this discrepency, but we can maybe try to convince\nthe webob crowd to drop conditional processing for HEAD requests.</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1 (2009-06-02)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 804691, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0af906d0c3f043a7b822c98b5c31e733", "sha256": "6d336a02b8abeabbbe4b3784d804fad67a2fe3813f318e1b8fbd1e44a4d90359"}, "downloads": -1, "filename": "repoze.urchin-0.1.tar.gz", "has_sig": false, "md5_digest": "0af906d0c3f043a7b822c98b5c31e733", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15709, "upload_time": "2009-06-02T22:55:34", "upload_time_iso_8601": "2009-06-02T22:55:34.163845Z", "url": "https://files.pythonhosted.org/packages/a3/f7/d26bcb7b9f4cbbe17c7ad5d05a073d988e80ec2eaf0e92154fb242bb3a17/repoze.urchin-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0af909b1324428c5230c6dd509567c95", "sha256": "6563f739ba172ee87846bd673c564dd1213517044d2e7d617be3e08a0295b72a"}, "downloads": -1, "filename": "repoze.urchin-0.2.tar.gz", "has_sig": false, "md5_digest": "0af909b1324428c5230c6dd509567c95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17218, "upload_time": "2011-10-11T00:02:43", "upload_time_iso_8601": "2011-10-11T00:02:43.205483Z", "url": "https://files.pythonhosted.org/packages/c6/36/7749eadc9bbd384fa496eb068c20bc4d0ff5aa1d308004da095692e29d4c/repoze.urchin-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0af909b1324428c5230c6dd509567c95", "sha256": "6563f739ba172ee87846bd673c564dd1213517044d2e7d617be3e08a0295b72a"}, "downloads": -1, "filename": "repoze.urchin-0.2.tar.gz", "has_sig": false, "md5_digest": "0af909b1324428c5230c6dd509567c95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17218, "upload_time": "2011-10-11T00:02:43", "upload_time_iso_8601": "2011-10-11T00:02:43.205483Z", "url": "https://files.pythonhosted.org/packages/c6/36/7749eadc9bbd384fa496eb068c20bc4d0ff5aa1d308004da095692e29d4c/repoze.urchin-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:24 2020"}