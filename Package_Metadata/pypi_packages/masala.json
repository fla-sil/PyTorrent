{"info": {"author": "OGURA_Daiki", "author_email": "8hachibee125@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=================================================================\nMasala\n=================================================================\n\nbuild status\n\nmaster\n\n.. image:: https://travis-ci.org/hachibeeDI/masala.svg?branch=master\n    :target: https://travis-ci.org/hachibeeDI/masala\n\n\nInstall\n=================================================================\n\n.. code-block:: bash\n\n   $ pip install masala\n\n\nExample\n=================================================================\n\n\ncurry\n-----------------------------------------------------------------\n\n\n.. code-block:: python\n\n   >>> from __future__ import (print_function, division, absolute_import, unicode_literals, )\n   >>> from masala import CurryContainer as cc\n   >>> cur = cc(lambda a, b, c: [a, b, c])\n   >>> cur = cur << 'aaa' << 'bbb'\n   >>> cur('ccc')\n   ['aaa', 'bbb', 'ccc']\n\n   >>> cur = cc(lambda a, b='hogeeee', c='foooo': [a, b, c])\n   >>> cur = cur << 'a' << ('c', 'c')\n   >>> cur('b')\n   ['a', 'b', 'c']\n\n   >>> from masala import curried\n   >>> @curried\n   ... def sum5(a, b, c, d, e):\n   ...     return a + b + c + d + e\n   ...\n   >>> sum0 = sum5 << 1 << 2 << 3 << 4 << 5\n   >>> assert sum0() == sum5(1, 2, 3, 4, 5)\n\n\n\nshort hands\n-----------------------------------------------------------------\n\nlambda\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   >>> from masala import lambd as _\n   >>> from masala.datatype import Either\n   >>> Either.right('hachi') >> _.title()\n   'Hachi'\n   >>> replacer = _.replace(_, _)\n   >>> replacer('hachi', 'chi', 'chiboee')\n   'hachiboee'\n   >>> list(map(_ + 2, range(3)))\n   [2, 3, 4]\n   >>> from six.moves import reduce\n   >>> reduce(_ + _, range(5))\n   10\n\n\nmethod chaining\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. code-block:: python\n\n   >>> from masala import BuilderAllowsMethodChaining as __\n   >>> Either.right('hachi') >> __.title().replace('i', 'U').replace('c', 'z')\n   'HazhU'\n   >>> foolambda = __.title().replace('i', 'U').replace('c', 'z')\n   >>> foolambda('hachi')\n   'HazhU'\n\n   >>> Either.right(4) >> ((__ + 4) * 'py'.title())\n   'PyPyPyPyPyPyPyPy'\n   >>> (__ + 1 + 2 + 3 + 4 + 5)(0)\n   15\n   >>> (__ + 1 + 2 + 3 + 4 + 5).apply__(0)\n   15\n\n\nlist processing\n-----------------------------------------------------------------\n\n\n.. code-block:: python\n\n   >>> from masala import (apply as a, lambd as _, )\n   >>> from masala.datatype import Stream\n   >>> # extends linq like methods to Stream.\n   >>> # but I reccomend to use itertools extention is also prepared as `from masala.datatype.stream import itertools_ext`\n   >>> from masala.datatype.stream import linq_ext\n   >>> Stream([1, 2, 3]).select(_ * 2).to_list()\n   [2, 4, 6]\n   >>> # support lazy evaluation\n   >>> Stream([1, 2, 3]).select(_ * 2)  # doctest:+ELLIPSIS\n   Stream: < <function ...\n\n   >>> Stream(range(0, 15)).select(_ + 1).where(__ % 2 == 0).to_list()\n   [2, 4, 6, 8, 10, 12, 14]\n\n   >>> Stream(range(0, 100)).select(_ * 2).where(_ > 1000).first()  # doctest:+ELLIPSIS\n   Empty: < None > reason => <class 'masala.datatype.stream.error.NoContentStreamError'>:\n\n   >>> Stream(range(0, 100)).select(_ * 2).any(_ > 1000)\n   False\n   >>> Stream(111111).select(_ * 2).to_list()\n   Empty: < None > reason => <class 'masala.datatype.stream.error.NotIterableError'>: 'int' object is not iterable\n\n   >>> # you can extend the method by yourself\n   >>> from masala.datatype.stream import dispatch_stream\n   >>> @dispatch_stream\n   ... def my_select(xs, x_to_y):\n   ...     for x in xs:\n   ...         yield x_to_y(x)\n   >>> Stream([1, 2, 3]).my_select(_ * 2).to_list()\n   [2, 4, 6]\n   >>> from masala.datatype.stream import delete_dispatchedmethods\n   >>> # you can clean extentions.\n   >>> delete_dispatchedmethods(['my_select'])\n\n   >>> # other cases\n   >>> twicer = Stream().select(_ * 2)\n   >>> twiced = twicer << [1, 2, 3]\n   >>> list(twiced)\n   [2, 4, 6]\n   >>> twiced2 = twicer << [2, 3, 4]\n   >>> list(twiced2)\n   [4, 6, 8]\n\n   >>> delete_dispatchedmethods(linq_ext.__all__)\n\n\n\nPattern Match\n-----------------------------------------------------------------\n\n\n.. code-block:: python\n\n   >>> from masala import Match\n\n   >>> match = Match(10)\n   >>> if match.when(1):\n   ...    print('boo')\n   ... elif match.when(10):\n   ...    print('yieeeee')\n   yieeeee\n\n\n   >>> from masala import Wildcard as _\n\n   >>> match = Match([1, 2, 3])\n   >>> @match.when([2, 2, 2], let_=('one', 'two', 'thr'))\n   ... def case1(one, two, thr):\n   ...     return 'case1'\n   >>> @match.when([_, 2, 3], let_=('one', '_', 'thr'))\n   ... def case2(one, thr):\n   ...    return 'case2'\n   >>> assert match.end == 'case2'\n\n   >>> match = Match('python')\n   >>> @match.when(_.isdigit(), let_='moo')\n   ... def case1(moo):\n   ...     return one\n   >>> @match.when(_ == 'python', let_=('a'))\n   ... def case2(a):\n   ...     return a\n   >>> assert match.end == 'python'\n\n\n   >>> # with datatype\n\n   >>> from masala.datatype import Right, Left\n\n   >>> match = Match(Either.right('python'))\n   >>> @match.when(Right)\n   ... def case_right(v):\n   ...     return v + ' is right!'\n   >>> @match.when(Left)\n   ... def case_left(v):\n   ...     assert False\n   >>> assert match.end == 'python is right!'\n\n\n\ncall method with optional values\n-----------------------------------------------------------------\n\n.. code-block:: python\n\n   >>> from masala import Perhaps\n\n   >>> p = Perhaps('hoge huga foo')\n   >>> p.try_('replace', 'huga', 'muoo').try_('upper').get()\n   'HOGE MUOO FOO'\n   >>> p.apply(len).get()\n   13\n\n   >>> nonecase = Perhaps(None).try_('replace', 'huga', 'muoo').try_('upper')\n   >>> nonecase.get()\n\n   >>> nonecase.get_or('nnnnn')\n   'nnnnn'\n\n\n\nSupport\n=================================================================\n\ntested version of Python is\n\n- 2.7\n- 3.4", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hachibeeDI/masala", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "masala", "package_url": "https://pypi.org/project/masala/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/masala/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hachibeeDI/masala"}, "release_url": "https://pypi.org/project/masala/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "curry functional patternpatch linq", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>build status</p>\n<p>master</p>\n<a href=\"https://travis-ci.org/hachibeeDI/masala\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/hachibeeDI/masala.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21033861f93f2617f6e1438c336d7e8478831700/68747470733a2f2f7472617669732d63692e6f72672f686163686962656544492f6d6173616c612e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install masala\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<div id=\"curry\">\n<h3>curry</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">print_function</span><span class=\"p\">,</span> <span class=\"n\">division</span><span class=\"p\">,</span> <span class=\"n\">absolute_import</span><span class=\"p\">,</span> <span class=\"n\">unicode_literals</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">CurryContainer</span> <span class=\"k\">as</span> <span class=\"n\">cc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'aaa'</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'bbb'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"p\">(</span><span class=\"s1\">'ccc'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'aaa'</span><span class=\"p\">,</span> <span class=\"s1\">'bbb'</span><span class=\"p\">,</span> <span class=\"s1\">'ccc'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"s1\">'hogeeee'</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"s1\">'foooo'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'a'</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cur</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">curried</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@curried</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">sum5</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"n\">e</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sum0</span> <span class=\"o\">=</span> <span class=\"n\">sum5</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">3</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">sum0</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">sum5</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"short-hands\">\n<h3>short hands</h3>\n<div id=\"lambda\">\n<h4>lambda</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">lambd</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype</span> <span class=\"kn\">import</span> <span class=\"n\">Either</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Either</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"s1\">'hachi'</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n<span class=\"s1\">'Hachi'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">replacer</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">replacer</span><span class=\"p\">(</span><span class=\"s1\">'hachi'</span><span class=\"p\">,</span> <span class=\"s1\">'chi'</span><span class=\"p\">,</span> <span class=\"s1\">'chiboee'</span><span class=\"p\">)</span>\n<span class=\"s1\">'hachiboee'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">six.moves</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">+</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"mi\">10</span>\n</pre>\n</div>\n<div id=\"method-chaining\">\n<h4>method chaining</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">BuilderAllowsMethodChaining</span> <span class=\"k\">as</span> <span class=\"n\">__</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Either</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"s1\">'hachi'</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">)</span>\n<span class=\"s1\">'HazhU'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foolambda</span> <span class=\"o\">=</span> <span class=\"n\">__</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foolambda</span><span class=\"p\">(</span><span class=\"s1\">'hachi'</span><span class=\"p\">)</span>\n<span class=\"s1\">'HazhU'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Either</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">((</span><span class=\"n\">__</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"s1\">'py'</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">())</span>\n<span class=\"s1\">'PyPyPyPyPyPyPyPy'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">__</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">)(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">15</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">__</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">apply__</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">15</span>\n</pre>\n</div>\n</div>\n<div id=\"list-processing\">\n<h3>list processing</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">apply</span> <span class=\"k\">as</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">lambd</span> <span class=\"k\">as</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype</span> <span class=\"kn\">import</span> <span class=\"n\">Stream</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># extends linq like methods to Stream.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># but I reccomend to use itertools extention is also prepared as `from masala.datatype.stream import itertools_ext`</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype.stream</span> <span class=\"kn\">import</span> <span class=\"n\">linq_ext</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># support lazy evaluation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Stream</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"o\">...</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">__</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>  <span class=\"c1\"># doctest:+ELLIPSIS</span>\n<span class=\"n\">Empty</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span> <span class=\"kc\">None</span> <span class=\"o\">&gt;</span> <span class=\"n\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">masala</span><span class=\"o\">.</span><span class=\"n\">datatype</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">NoContentStreamError</span><span class=\"s1\">'&gt;:</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">(</span><span class=\"mi\">111111</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"n\">Empty</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span> <span class=\"kc\">None</span> <span class=\"o\">&gt;</span> <span class=\"n\">reason</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">masala</span><span class=\"o\">.</span><span class=\"n\">datatype</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">NotIterableError</span><span class=\"s1\">'&gt;: '</span><span class=\"nb\">int</span><span class=\"s1\">' object is not iterable</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># you can extend the method by yourself</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype.stream</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch_stream</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dispatch_stream</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">my_select</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">x_to_y</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">xs</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">yield</span> <span class=\"n\">x_to_y</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Stream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">my_select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_list</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype.stream</span> <span class=\"kn\">import</span> <span class=\"n\">delete_dispatchedmethods</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># you can clean extentions.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">delete_dispatchedmethods</span><span class=\"p\">([</span><span class=\"s1\">'my_select'</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># other cases</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">twicer</span> <span class=\"o\">=</span> <span class=\"n\">Stream</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">twiced</span> <span class=\"o\">=</span> <span class=\"n\">twicer</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">twiced</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">twiced2</span> <span class=\"o\">=</span> <span class=\"n\">twicer</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">twiced2</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">delete_dispatchedmethods</span><span class=\"p\">(</span><span class=\"n\">linq_ext</span><span class=\"o\">.</span><span class=\"n\">__all__</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"pattern-match\">\n<h3>Pattern Match</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">Match</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">Match</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'boo'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">elif</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'yieeeee'</span><span class=\"p\">)</span>\n<span class=\"n\">yieeeee</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">Wildcard</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">Match</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">let_</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"s1\">'two'</span><span class=\"p\">,</span> <span class=\"s1\">'thr'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case1</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">two</span><span class=\"p\">,</span> <span class=\"n\">thr</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s1\">'case1'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">([</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">let_</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">'thr'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case2</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">thr</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>    <span class=\"k\">return</span> <span class=\"s1\">'case2'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"o\">==</span> <span class=\"s1\">'case2'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">Match</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">isdigit</span><span class=\"p\">(),</span> <span class=\"n\">let_</span><span class=\"o\">=</span><span class=\"s1\">'moo'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case1</span><span class=\"p\">(</span><span class=\"n\">moo</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">one</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"o\">==</span> <span class=\"s1\">'python'</span><span class=\"p\">,</span> <span class=\"n\">let_</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case2</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">a</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"o\">==</span> <span class=\"s1\">'python'</span>\n\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># with datatype</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala.datatype</span> <span class=\"kn\">import</span> <span class=\"n\">Right</span><span class=\"p\">,</span> <span class=\"n\">Left</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">Match</span><span class=\"p\">(</span><span class=\"n\">Either</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">(</span><span class=\"s1\">'python'</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">Right</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case_right</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"s1\">' is right!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@match</span><span class=\"o\">.</span><span class=\"n\">when</span><span class=\"p\">(</span><span class=\"n\">Left</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">case_left</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">assert</span> <span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">assert</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"o\">==</span> <span class=\"s1\">'python is right!'</span>\n</pre>\n</div>\n<div id=\"call-method-with-optional-values\">\n<h3>call method with optional values</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">masala</span> <span class=\"kn\">import</span> <span class=\"n\">Perhaps</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Perhaps</span><span class=\"p\">(</span><span class=\"s1\">'hoge huga foo'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">try_</span><span class=\"p\">(</span><span class=\"s1\">'replace'</span><span class=\"p\">,</span> <span class=\"s1\">'huga'</span><span class=\"p\">,</span> <span class=\"s1\">'muoo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">try_</span><span class=\"p\">(</span><span class=\"s1\">'upper'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"s1\">'HOGE MUOO FOO'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"mi\">13</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nonecase</span> <span class=\"o\">=</span> <span class=\"n\">Perhaps</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">try_</span><span class=\"p\">(</span><span class=\"s1\">'replace'</span><span class=\"p\">,</span> <span class=\"s1\">'huga'</span><span class=\"p\">,</span> <span class=\"s1\">'muoo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">try_</span><span class=\"p\">(</span><span class=\"s1\">'upper'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nonecase</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">nonecase</span><span class=\"o\">.</span><span class=\"n\">get_or</span><span class=\"p\">(</span><span class=\"s1\">'nnnnn'</span><span class=\"p\">)</span>\n<span class=\"s1\">'nnnnn'</span>\n</pre>\n</div>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>tested version of Python is</p>\n<ul>\n<li>2.7</li>\n<li>3.4</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1158090, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "ceede6e13bdcbf404e1faf26cff2ede9", "sha256": "30372676de59b90eb19745c97640521729db986a6bf5bcbe0eb314b83e35d443"}, "downloads": -1, "filename": "masala-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ceede6e13bdcbf404e1faf26cff2ede9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14424, "upload_time": "2014-07-15T08:39:27", "upload_time_iso_8601": "2014-07-15T08:39:27.464597Z", "url": "https://files.pythonhosted.org/packages/29/a9/0373673cc20c35396f1d8a4fb9db6c5ae153610e0e545a79c1f0860a46f9/masala-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ceede6e13bdcbf404e1faf26cff2ede9", "sha256": "30372676de59b90eb19745c97640521729db986a6bf5bcbe0eb314b83e35d443"}, "downloads": -1, "filename": "masala-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ceede6e13bdcbf404e1faf26cff2ede9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14424, "upload_time": "2014-07-15T08:39:27", "upload_time_iso_8601": "2014-07-15T08:39:27.464597Z", "url": "https://files.pythonhosted.org/packages/29/a9/0373673cc20c35396f1d8a4fb9db6c5ae153610e0e545a79c1f0860a46f9/masala-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:31 2020"}