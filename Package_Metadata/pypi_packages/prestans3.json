{"info": {"author": "Anomaly Software", "author_email": "support@anomaly.net.au", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Prestans 3.0\n============\n\nA `WSGI <https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface>`_ compliant `REST <https://en.wikipedia.org/wiki/Representational_state_transfer>`_ micro framework.\n\n`Prestans <http://www.math.ubc.ca/~cass/frivs/latin/latin-dict-full.html>`_ is a WSGI compliant REST micro-framework for `Python <https://python.org>`_. It's focused on structure of code and unforgivingly valid data. Prestans accomplishes this by laying out a concrete paradigm of models, parsers and handlers. The framework is designed to work best with but not restricted to `single page Web applications <https://en.wikipedia.org/wiki/Single-page_application>`_ and native mobile clients. Prestans happily co-exists with other Python frameworks and `middleware. <http://wsgi.readthedocs.org/en/latest/libraries.html>`_ and offers API builders:\n\n* Types layer that lets you easily define rules for data delivered and received by your API endpoints\n* Parser infrastructure for the request, response and query parameter payloads\n* Middleware compatible request router to support a useful handler life cycle\n* HTTP header based content format negotiation for requests and responses\n* Assistive extras to let you translate persistent objects to validated REST responses\n* Ability to integrate with existing authentication and authorisation services\n* Response minification, reducing payload sizes by up to 30%\n* Self documenting API, understood by `Sphinx <http://sphinx-doc.org>`_ (see our development tools for details)\n* API client code generation (for limited languages)\n\nDuring development\n^^^^^^^^^^^^^^^^^^\n\nThe Prestans projects ships in two distinct things:\n\n* The server micro-framework, everything you need to run your Prestans application\n* Additional developer tools (called Apparatus) that assist during development but are unnecessary in production\n\nApparatus allow API makers to generate:\n\n* Static rewrite map for clients to unpack minified responses.\n* Client side Model stubs (for limited number of languages) based on server definitions used to consume responses and construct request payload.\n* Documentation based on blueprint (auto discovered properties of your API) and in-line commentary.\n\nThese tools were originally built into the server distribution. As of the 3.0 we decided to make these tools standalone so they (along with their dependencies) aren't installed in production environments.\n\nWhile developing applications using Prestans, we recommend installing `Apparatus for Prestans <https://github.com/anomaly/prestans3-apparatus.git>`_.\n\nInstallation\n^^^^^^^^^^^^\n\nWe recommend installing Prestans via PyPi:\n\n.. code-block:: bash\n\n    $ pip install -U prestans3\n\nOn your development environment we recommend installing Apparatus for Prestans (this will install an appropriate version of the server framework along with the developer tools):\n\n.. code-block:: bash\n\n    $ pip install -U prestans3-apparatus\n\nDeveloper tools are not required in production environments. Installing development tools will install unnecessary dependencies.\n\nDocs & Help\n^^^^^^^^^^^\n\n* `Comprehensive documentation, <https://prestans.readthedocs.org>`_ along with it's `Sphinx source. <https://github.com/anomaly/prestans-docs.git>`_\n* `Discussion mailing list <http://groups.google.com/group/prestans-discuss>`_ and a `security announcement mailing list. <http://groups.google.com/group/prestans-announce>`_. Also consider reading this guide on `how to ask questions the smart way. <http://www.catb.org/esr/faqs/smart-questions.html>`_ \n* `Issue tracker <https://github.com/anomaly/prestans/issues>`_ for bugs and feature requests. Ensure you've consulted the documentation and discussion list before you lodge an issue.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/anomaly/prestans3/archive/3.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anomaly/prestans3.git", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "prestans3", "package_url": "https://pypi.org/project/prestans3/", "platform": "any", "project_url": "https://pypi.org/project/prestans3/", "project_urls": {"Download": "https://github.com/anomaly/prestans3/archive/3.0.0.tar.gz", "Homepage": "https://github.com/anomaly/prestans3.git"}, "release_url": "https://pypi.org/project/prestans3/3.0.0/", "requires_dist": null, "requires_python": null, "summary": "A WSGI compliant REST micro-framework", "version": "3.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" rel=\"nofollow\">WSGI</a> compliant <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" rel=\"nofollow\">REST</a> micro framework.</p>\n<p><a href=\"http://www.math.ubc.ca/~cass/frivs/latin/latin-dict-full.html\" rel=\"nofollow\">Prestans</a> is a WSGI compliant REST micro-framework for <a href=\"https://python.org\" rel=\"nofollow\">Python</a>. It\u2019s focused on structure of code and unforgivingly valid data. Prestans accomplishes this by laying out a concrete paradigm of models, parsers and handlers. The framework is designed to work best with but not restricted to <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" rel=\"nofollow\">single page Web applications</a> and native mobile clients. Prestans happily co-exists with other Python frameworks and <a href=\"http://wsgi.readthedocs.org/en/latest/libraries.html\" rel=\"nofollow\">middleware.</a> and offers API builders:</p>\n<ul>\n<li>Types layer that lets you easily define rules for data delivered and received by your API endpoints</li>\n<li>Parser infrastructure for the request, response and query parameter payloads</li>\n<li>Middleware compatible request router to support a useful handler life cycle</li>\n<li>HTTP header based content format negotiation for requests and responses</li>\n<li>Assistive extras to let you translate persistent objects to validated REST responses</li>\n<li>Ability to integrate with existing authentication and authorisation services</li>\n<li>Response minification, reducing payload sizes by up to 30%</li>\n<li>Self documenting API, understood by <a href=\"http://sphinx-doc.org\" rel=\"nofollow\">Sphinx</a> (see our development tools for details)</li>\n<li>API client code generation (for limited languages)</li>\n</ul>\n<div id=\"during-development\">\n<h2>During development</h2>\n<p>The Prestans projects ships in two distinct things:</p>\n<ul>\n<li>The server micro-framework, everything you need to run your Prestans application</li>\n<li>Additional developer tools (called Apparatus) that assist during development but are unnecessary in production</li>\n</ul>\n<p>Apparatus allow API makers to generate:</p>\n<ul>\n<li>Static rewrite map for clients to unpack minified responses.</li>\n<li>Client side Model stubs (for limited number of languages) based on server definitions used to consume responses and construct request payload.</li>\n<li>Documentation based on blueprint (auto discovered properties of your API) and in-line commentary.</li>\n</ul>\n<p>These tools were originally built into the server distribution. As of the 3.0 we decided to make these tools standalone so they (along with their dependencies) aren\u2019t installed in production environments.</p>\n<p>While developing applications using Prestans, we recommend installing <a href=\"https://github.com/anomaly/prestans3-apparatus.git\" rel=\"nofollow\">Apparatus for Prestans</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>We recommend installing Prestans via PyPi:</p>\n<pre>$ pip install -U prestans3\n</pre>\n<p>On your development environment we recommend installing Apparatus for Prestans (this will install an appropriate version of the server framework along with the developer tools):</p>\n<pre>$ pip install -U prestans3-apparatus\n</pre>\n<p>Developer tools are not required in production environments. Installing development tools will install unnecessary dependencies.</p>\n</div>\n<div id=\"docs-help\">\n<h2>Docs &amp; Help</h2>\n<ul>\n<li><a href=\"https://prestans.readthedocs.org\" rel=\"nofollow\">Comprehensive documentation,</a> along with it\u2019s <a href=\"https://github.com/anomaly/prestans-docs.git\" rel=\"nofollow\">Sphinx source.</a></li>\n<li><a href=\"http://groups.google.com/group/prestans-discuss\" rel=\"nofollow\">Discussion mailing list</a> and a <a href=\"http://groups.google.com/group/prestans-announce\" rel=\"nofollow\">security announcement mailing list.</a>. Also consider reading this guide on <a href=\"http://www.catb.org/esr/faqs/smart-questions.html\" rel=\"nofollow\">how to ask questions the smart way.</a></li>\n<li><a href=\"https://github.com/anomaly/prestans/issues\" rel=\"nofollow\">Issue tracker</a> for bugs and feature requests. Ensure you\u2019ve consulted the documentation and discussion list before you lodge an issue.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6211779, "releases": {"3.0.0": []}, "urls": [], "timestamp": "Fri May  8 03:19:46 2020"}