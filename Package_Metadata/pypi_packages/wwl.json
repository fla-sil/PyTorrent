{"info": {"author": "Matteo Togninalli", "author_email": "matteo.togninalli@bsse.ethz.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License"], "description": "# WWL Package\n\n## Installation\nTo install `wwl`, run the following:\n```sh\n$ pip install cython numpy\n$ pip install wwl\n```\n\n## Usage\nWWL can be used to compute the pairwise kernel matrix between a list of Graphs.\nThe kernel function `wwl` takes as input a list of igraph `Graph` objects. It can also take their node features (if they are continuously attributed), the number of iterations for the embedding scheme,\nthe value for gamma in the Laplacian kernel, and a flag for sinkhorn approximations.\n```python\nfrom wwl import wwl\n\n# load the graphs\ngraphs = [ig.read(fname) for fname in graph_filenames]\n\n# load node features for continuous graphs\nnode_features = np.load(path_to_node_features)\n\n# compute the kernel\nkernel_matrix = wwl(graphs, node_features=node_features, num_iterations=4)\n\n# use in SVM\nfrom sklearn.svm import SVC\n\ntrain_index, test_index = np.load(train_index_path), np.load(test_index_path)\ny = np.load(path_to_labels)\nK_train = kernel_matrix[train_index][:,train_index]\nK_test = kernel_matrix[test_index][:,train_index]\n\nsvm = SVC(kernel='precomputed') # For a Krein SVM, please refer to krein.py\nsvm.fit(K_train)\n\ny_predict = svm.predict(K_test)\n```\n\nPlease see `utilities.wwl_custom_grid_search_cv` for a custom crossvalidation to cross-validate the number of iterations, gammas in the Laplacian kernel, and other parameters for the SVM.  \n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BorgwardtLab/WWL", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wwl", "package_url": "https://pypi.org/project/wwl/", "platform": "", "project_url": "https://pypi.org/project/wwl/", "project_urls": {"Homepage": "https://github.com/BorgwardtLab/WWL", "Issues": "https://github.com/BorgwardtLab/WWL/issues"}, "release_url": "https://pypi.org/project/wwl/0.1.2/", "requires_dist": ["Cython", "POT", "numpy", "scikit-learn", "python-igraph"], "requires_python": ">=3.6", "summary": "Wasserstein Weisfeiler-Lehman Graph Kernels", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WWL Package</h1>\n<h2>Installation</h2>\n<p>To install <code>wwl</code>, run the following:</p>\n<pre>$ pip install cython numpy\n$ pip install wwl\n</pre>\n<h2>Usage</h2>\n<p>WWL can be used to compute the pairwise kernel matrix between a list of Graphs.\nThe kernel function <code>wwl</code> takes as input a list of igraph <code>Graph</code> objects. It can also take their node features (if they are continuously attributed), the number of iterations for the embedding scheme,\nthe value for gamma in the Laplacian kernel, and a flag for sinkhorn approximations.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wwl</span> <span class=\"kn\">import</span> <span class=\"n\">wwl</span>\n\n<span class=\"c1\"># load the graphs</span>\n<span class=\"n\">graphs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ig</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">fname</span> <span class=\"ow\">in</span> <span class=\"n\">graph_filenames</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># load node features for continuous graphs</span>\n<span class=\"n\">node_features</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path_to_node_features</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># compute the kernel</span>\n<span class=\"n\">kernel_matrix</span> <span class=\"o\">=</span> <span class=\"n\">wwl</span><span class=\"p\">(</span><span class=\"n\">graphs</span><span class=\"p\">,</span> <span class=\"n\">node_features</span><span class=\"o\">=</span><span class=\"n\">node_features</span><span class=\"p\">,</span> <span class=\"n\">num_iterations</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># use in SVM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n\n<span class=\"n\">train_index</span><span class=\"p\">,</span> <span class=\"n\">test_index</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">train_index_path</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">test_index_path</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">path_to_labels</span><span class=\"p\">)</span>\n<span class=\"n\">K_train</span> <span class=\"o\">=</span> <span class=\"n\">kernel_matrix</span><span class=\"p\">[</span><span class=\"n\">train_index</span><span class=\"p\">][:,</span><span class=\"n\">train_index</span><span class=\"p\">]</span>\n<span class=\"n\">K_test</span> <span class=\"o\">=</span> <span class=\"n\">kernel_matrix</span><span class=\"p\">[</span><span class=\"n\">test_index</span><span class=\"p\">][:,</span><span class=\"n\">train_index</span><span class=\"p\">]</span>\n\n<span class=\"n\">svm</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">(</span><span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"s1\">'precomputed'</span><span class=\"p\">)</span> <span class=\"c1\"># For a Krein SVM, please refer to krein.py</span>\n<span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">K_train</span><span class=\"p\">)</span>\n\n<span class=\"n\">y_predict</span> <span class=\"o\">=</span> <span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">K_test</span><span class=\"p\">)</span>\n</pre>\n<p>Please see <code>utilities.wwl_custom_grid_search_cv</code> for a custom crossvalidation to cross-validate the number of iterations, gammas in the Laplacian kernel, and other parameters for the SVM.</p>\n\n          </div>"}, "last_serial": 6229805, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "3516f6b6a5dc4827b368406d4de38080", "sha256": "5dfaf15affaa71805e3549368e753b5499c47551004b5d579cb11ce9f6515d5e"}, "downloads": -1, "filename": "wwl-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3516f6b6a5dc4827b368406d4de38080", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7494, "upload_time": "2019-12-02T12:17:32", "upload_time_iso_8601": "2019-12-02T12:17:32.858855Z", "url": "https://files.pythonhosted.org/packages/1f/4a/e4a9eed066b2e941285e8e248b0da71248914b0609a86706f0997962d792/wwl-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cbe721e88bd1e33af770ac9cd207448", "sha256": "738bd6b6d87e25ef90743196b6f3de611962a29f6f33a759b050d1848cfacc19"}, "downloads": -1, "filename": "wwl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3cbe721e88bd1e33af770ac9cd207448", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5765, "upload_time": "2019-12-02T12:17:46", "upload_time_iso_8601": "2019-12-02T12:17:46.789719Z", "url": "https://files.pythonhosted.org/packages/ac/86/bab8efa5be9d84a3aebcbdf8e9650816d6f44c034cbe361a5d4b60a912a9/wwl-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0af613cd1ed1d2968a7198266eb94b4e", "sha256": "109dabcb32b7657f8a911bd9b098b7488c0e58031834e0e56a6c89a0b3484925"}, "downloads": -1, "filename": "wwl-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0af613cd1ed1d2968a7198266eb94b4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8226, "upload_time": "2019-12-02T17:00:33", "upload_time_iso_8601": "2019-12-02T17:00:33.344092Z", "url": "https://files.pythonhosted.org/packages/74/bd/11f5a76d34fc739432a4db2cd90ac95caa6e7ee4c0dc4222730c66016d02/wwl-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "025211127a254a9d39940e52054967d8", "sha256": "df2ce1f8d57dee88706c4350ab9ff22d43fb9fe7596f6fafb408a65845a5c3e6"}, "downloads": -1, "filename": "wwl-0.1.2.tar.gz", "has_sig": false, "md5_digest": "025211127a254a9d39940e52054967d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7035, "upload_time": "2019-12-02T17:00:39", "upload_time_iso_8601": "2019-12-02T17:00:39.630782Z", "url": "https://files.pythonhosted.org/packages/96/c0/8d0e8c1d5b9c92102173f42d6834c14d20ea3bbf2cb811c8eb4b8710718e/wwl-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0af613cd1ed1d2968a7198266eb94b4e", "sha256": "109dabcb32b7657f8a911bd9b098b7488c0e58031834e0e56a6c89a0b3484925"}, "downloads": -1, "filename": "wwl-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0af613cd1ed1d2968a7198266eb94b4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8226, "upload_time": "2019-12-02T17:00:33", "upload_time_iso_8601": "2019-12-02T17:00:33.344092Z", "url": "https://files.pythonhosted.org/packages/74/bd/11f5a76d34fc739432a4db2cd90ac95caa6e7ee4c0dc4222730c66016d02/wwl-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "025211127a254a9d39940e52054967d8", "sha256": "df2ce1f8d57dee88706c4350ab9ff22d43fb9fe7596f6fafb408a65845a5c3e6"}, "downloads": -1, "filename": "wwl-0.1.2.tar.gz", "has_sig": false, "md5_digest": "025211127a254a9d39940e52054967d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7035, "upload_time": "2019-12-02T17:00:39", "upload_time_iso_8601": "2019-12-02T17:00:39.630782Z", "url": "https://files.pythonhosted.org/packages/96/c0/8d0e8c1d5b9c92102173f42d6834c14d20ea3bbf2cb811c8eb4b8710718e/wwl-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:42 2020"}