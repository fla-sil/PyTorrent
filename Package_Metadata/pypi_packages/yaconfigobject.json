{"info": {"author": "Philipp Falke", "author_email": "philipp.falke@meteoswiss.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "yaconfigobject\n==============\n\n[![Build Status](https://travis-ci.com/MeteoSwiss/yaconfigobject.svg?branch=master)](https://travis-ci.com/MeteoSwiss/yaconfigobject) [![codecov](https://codecov.io/gh/MeteoSwiss/yaconfigobject/branch/master/graph/badge.svg)](https://codecov.io/gh/MeteoSwiss/yaconfigobject) [![Documentation Status](https://readthedocs.org/projects/yaconfigobject/badge/?version=latest)](https://yaconfigobject.readthedocs.io/en/latest/?badge=latest)\n\n\nYet Anoter Configuration Object, this time using YAML.\n\nA Python package that provides application wide configuration as an object,\nwhere all configuration items are accessible as attributes directly:\n\n```python\nfrom yaconfigobject import Config\n\nCONFIG = Config()\n\nproperty = CONFIG.topic.subtopic\n```\n\nConfigurations are stored in a YAML file inside the `module/config` directory\nof the application. A file called `config.yaml` existing in the applications\ncurrent working directory will take precedence over the packaged file (in the\n`config` directory).\n\n\nUse in a module\n---------------\n\nTo make sure every piece of code has access to the same configured information,\nit is recommended to instantiate a `Config` object in the modules `__init__.py`\nfile. The `Config` object needs to be present before any other imports take\nplace.\n\nAn example `__init__.py`:\n\n```python\nfrom yaconfigobject import Config\n\nCONFIG = Config('module.yaml')\n\nfrom .module_main import *\n```\n\n\nAdvanced usage\n--------------\n\nSeveral options might help you adapting the ``Config`` class to your needs.\n\n### Defining search paths\n\nTo tell ``yaconfigobject.Config()`` where to search for config files, the\n``paths`` keyword argument can be specified as a list:\n\n```python\nCONFIG = Config(paths=['~', '~/.local/share/my_app'])\n```\n\n### Using custom config file names\n\nFor applications where different parts use a separate configuration, it is \nhighly recommended to use a custom file name:\n\n```python\nCONFIG = Config(name='my_app.yaml')\n```\n\n### Adding values in code\n\nOf course you can also specify config values through code:\n\n```python\nfrom yaconfigobject import Config\n\nstatic_config = Config(database='sqlite:///:memory:')\n\nCONFIG = Config(name='my_app.yaml')\nCONFIG.update(static_config)\n```\n\n### Loading config values from environment variables\n\n`yaconfigobject` will try to load config values from environment variables \nprefixed with the uppercase module or application name when initialising a \n`Config` object.\n\n```python\nCONFIG = Config(name='my_app.yaml')\n```\n\nAll environment variables starting with `MY_APP` will be considered a config \nvalue. Config items from the environment will always take precedence.\n\n> **NOTE:** When using environment variables, config item identifiers cannot\n> contain underscores(`_`)! The app / module name is the only exception.\n\n\n=======\nHistory\n=======\n\n1.2.3 (2020-04-28)\n------------------\n\n* First release on PyPI.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MeteoSwiss/yaconfigobject", "keywords": "yaconfigobject", "license": "BSD-3-Clause license", "maintainer": "", "maintainer_email": "", "name": "yaconfigobject", "package_url": "https://pypi.org/project/yaconfigobject/", "platform": "", "project_url": "https://pypi.org/project/yaconfigobject/", "project_urls": {"Homepage": "https://github.com/MeteoSwiss/yaconfigobject"}, "release_url": "https://pypi.org/project/yaconfigobject/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "A library representing YAML config files as object.", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>yaconfigobject</h1>\n<p><a href=\"https://travis-ci.com/MeteoSwiss/yaconfigobject\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22913e464b68579909d7bce918b151b3ae776bf7/68747470733a2f2f7472617669732d63692e636f6d2f4d6574656f53776973732f7961636f6e6669676f626a6563742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/MeteoSwiss/yaconfigobject\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31c96dcc9e9b8f635eee0cea613e86bc25e1a837/68747470733a2f2f636f6465636f762e696f2f67682f4d6574656f53776973732f7961636f6e6669676f626a6563742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://yaconfigobject.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c45acce5ebd2c6f55cc1c9bd69abe6e3f0b673c3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7961636f6e6669676f626a6563742f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Yet Anoter Configuration Object, this time using YAML.</p>\n<p>A Python package that provides application wide configuration as an object,\nwhere all configuration items are accessible as attributes directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yaconfigobject</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">()</span>\n\n<span class=\"nb\">property</span> <span class=\"o\">=</span> <span class=\"n\">CONFIG</span><span class=\"o\">.</span><span class=\"n\">topic</span><span class=\"o\">.</span><span class=\"n\">subtopic</span>\n</pre>\n<p>Configurations are stored in a YAML file inside the <code>module/config</code> directory\nof the application. A file called <code>config.yaml</code> existing in the applications\ncurrent working directory will take precedence over the packaged file (in the\n<code>config</code> directory).</p>\n<h2>Use in a module</h2>\n<p>To make sure every piece of code has access to the same configured information,\nit is recommended to instantiate a <code>Config</code> object in the modules <code>__init__.py</code>\nfile. The <code>Config</code> object needs to be present before any other imports take\nplace.</p>\n<p>An example <code>__init__.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yaconfigobject</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"s1\">'module.yaml'</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.module_main</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<h2>Advanced usage</h2>\n<p>Several options might help you adapting the <code>Config</code> class to your needs.</p>\n<h3>Defining search paths</h3>\n<p>To tell <code>yaconfigobject.Config()</code> where to search for config files, the\n<code>paths</code> keyword argument can be specified as a list:</p>\n<pre><span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'~'</span><span class=\"p\">,</span> <span class=\"s1\">'~/.local/share/my_app'</span><span class=\"p\">])</span>\n</pre>\n<h3>Using custom config file names</h3>\n<p>For applications where different parts use a separate configuration, it is\nhighly recommended to use a custom file name:</p>\n<pre><span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_app.yaml'</span><span class=\"p\">)</span>\n</pre>\n<h3>Adding values in code</h3>\n<p>Of course you can also specify config values through code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yaconfigobject</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n\n<span class=\"n\">static_config</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'sqlite:///:memory:'</span><span class=\"p\">)</span>\n\n<span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_app.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">CONFIG</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">static_config</span><span class=\"p\">)</span>\n</pre>\n<h3>Loading config values from environment variables</h3>\n<p><code>yaconfigobject</code> will try to load config values from environment variables\nprefixed with the uppercase module or application name when initialising a\n<code>Config</code> object.</p>\n<pre><span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_app.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>All environment variables starting with <code>MY_APP</code> will be considered a config\nvalue. Config items from the environment will always take precedence.</p>\n<blockquote>\n<p><strong>NOTE:</strong> When using environment variables, config item identifiers cannot\ncontain underscores(<code>_</code>)! The app / module name is the only exception.</p>\n</blockquote>\n<h1>=======\nHistory</h1>\n<h2>1.2.3 (2020-04-28)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n\n          </div>"}, "last_serial": 7120500, "releases": {"1.2.3": [{"comment_text": "", "digests": {"md5": "51c6f84f3b885315e47d7e0812c926d8", "sha256": "764d9d3daa33af9bf35a2c366484b012c9566f124192994ce7bfae7595f3ae0e"}, "downloads": -1, "filename": "yaconfigobject-1.2.3.tar.gz", "has_sig": false, "md5_digest": "51c6f84f3b885315e47d7e0812c926d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14004, "upload_time": "2020-04-28T13:33:53", "upload_time_iso_8601": "2020-04-28T13:33:53.151576Z", "url": "https://files.pythonhosted.org/packages/d8/69/7602a6e0a450768cf9ead393cdec62b55adb040087621c85fa12989f16e9/yaconfigobject-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51c6f84f3b885315e47d7e0812c926d8", "sha256": "764d9d3daa33af9bf35a2c366484b012c9566f124192994ce7bfae7595f3ae0e"}, "downloads": -1, "filename": "yaconfigobject-1.2.3.tar.gz", "has_sig": false, "md5_digest": "51c6f84f3b885315e47d7e0812c926d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14004, "upload_time": "2020-04-28T13:33:53", "upload_time_iso_8601": "2020-04-28T13:33:53.151576Z", "url": "https://files.pythonhosted.org/packages/d8/69/7602a6e0a450768cf9ead393cdec62b55adb040087621c85fa12989f16e9/yaconfigobject-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:50 2020"}