{"info": {"author": "Open Knowledge Foundation", "author_email": "info@okfn.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# tableschema-pandas-py\n\n[![Travis](https://img.shields.io/travis/frictionlessdata/tableschema-pandas-py/master.svg)](https://travis-ci.org/frictionlessdata/tableschema-pandas-py)\n[![Coveralls](http://img.shields.io/coveralls/frictionlessdata/tableschema-pandas-py.svg?branch=master)](https://coveralls.io/r/frictionlessdata/tableschema-pandas-py?branch=master)\n[![PyPi](https://img.shields.io/pypi/v/tableschema-pandas.svg)](https://pypi.python.org/pypi/tableschema-pandas)\n[![Github](https://img.shields.io/badge/github-master-brightgreen)](https://github.com/frictionlessdata/tableschema-pandas-py)\n[![Gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\nGenerate and load Pandas data frames [Table Schema](http://specs.frictionlessdata.io/table-schema/) descriptors.\n\n## Features\n\n- implements `tableschema.Storage` interface\n\n## Contents\n\n<!--TOC-->\n\n  - [Getting Started](#getting-started)\n    - [Installation](#installation)\n    - [Example](#example)\n  - [Documentation](#documentation)\n    - [Storage](#storage)\n  - [Contributing](#contributing)\n  - [Changelog](#changelog)\n\n<!--TOC-->\n\n## Getting Started\n\n### Installation\n\nThe package use semantic versioning. It means that major versions  could include breaking changes. It's highly recommended to specify `package` version range in your `setup/requirements` file e.g. `package>=1.0,<2.0`.\n\n```\n$ pip install tableschema-pandas\n```\n\n### Example\n\nCode examples in this readme requires Python 3.3+ interpreter. You could see even more example in [examples](https://github.com/frictionlessdata/tableschema-pandas-py/tree/master/examples) directory.\n\nYou can easily load resources from a data package as Pandas data frames by simply using `datapackage.push_datapackage` function:\n\n```python\n>>> import datapackage\n\n>>> data_url = 'http://data.okfn.org/data/core/country-list/datapackage.json'\n>>> storage = datapackage.push_datapackage(data_url, 'pandas')\n\n>>> storage.buckets\n['data___data']\n\n>>> type(storage['data___data'])\n<class 'pandas.core.frame.DataFrame'>\n\n>>> storage['data___data'].head()\n             Name Code\n0     Afghanistan   AF\n1   \u00c5land Islands   AX\n2         Albania   AL\n3         Algeria   DZ\n4  American Samoa   AS\n```\n\nAlso it is possible to pull your existing data frame into a data package:\n\n```python\n>>> datapackage.pull_datapackage('/tmp/datapackage.json', 'country_list', 'pandas', tables={\n...     'data': storage['data___data'],\n... })\nStorage\n```\n\n## Documentation\n\nThe whole public API of this package is described here and follows semantic versioning rules. Everyting outside of this readme are private API and could be changed without any notification on any new version.\n\n### Storage\n\nPackage implements [Tabular Storage](https://github.com/frictionlessdata/tableschema-py#storage) interface (see full documentation on the link):\n\n![Storage](https://i.imgur.com/RQgrxqp.png)\n\nThis driver provides an additional API:\n\n#### `Storage(dataframes=[])`\n\n- `dataframes (object[])` - list of storage dataframes\n\nWe can get storage this way:\n\n```python\n>>> from tableschema_pandas import Storage\n\n>>> storage = Storage()\n```\n\nStorage works as a container for Pandas data frames. You can define new data frame inside storage using `storage.create` method:\n\n```python\n>>> storage.create('data', {\n...     'primaryKey': 'id',\n...     'fields': [\n...         {'name': 'id', 'type': 'integer'},\n...         {'name': 'comment', 'type': 'string'},\n...     ]\n... })\n\n>>> storage.buckets\n['data']\n\n>>> storage['data'].shape\n(0, 0)\n```\n\nUse `storage.write` to populate data frame with data:\n\n```python\n>>> storage.write('data', [(1, 'a'), (2, 'b')])\n\n>>> storage['data']\nid comment\n1        a\n2        b\n```\n\nAlso you can use [tabulator](https://github.com/frictionlessdata/tabulator-py) to populate data frame from external data file. As you see, subsequent writes simply appends new data on top of existing ones:\n\n```python\n>>> import tabulator\n\n>>> with tabulator.Stream('data/comments.csv', headers=1) as stream:\n...     storage.write('data', stream)\n\n>>> storage['data']\nid comment\n1        a\n2        b\n1     good\n```\n\n## Contributing\n\nThe project follows the [Open Knowledge International coding standards](https://github.com/okfn/coding-standards).\n\nRecommended way to get started is to create and activate a project virtual environment.\nTo install package and development dependencies into active environment:\n\n```\n$ make install\n```\n\nTo run tests with linting and coverage:\n\n```bash\n$ make test\n```\n\nFor linting `pylama` configured in `pylama.ini` is used. On this stage it's already\ninstalled into your environment and could be used separately with more fine-grained control\nas described in documentation - https://pylama.readthedocs.io/en/latest/.\n\nFor example to sort results by error type:\n\n```bash\n$ pylama --sort <path>\n```\n\nFor testing `tox` configured in `tox.ini` is used.\nIt's already installed into your environment and could be used separately with more fine-grained control as described in documentation - https://testrun.org/tox/latest/.\n\nFor example to check subset of tests against Python 2 environment with increased verbosity.\nAll positional arguments and options after `--` will be passed to `py.test`:\n\n```bash\ntox -e py27 -- -v tests/<path>\n```\n\nUnder the hood `tox` uses `pytest` configured in `pytest.ini`, `coverage`\nand `mock` packages. This packages are available only in tox envionments.\n\n## Changelog\n\nHere described only breaking and the most important changes. The full changelog and documentation for all released versions could be found in nicely formatted [commit history](https://github.com/frictionlessdata/tableschema-pandas-py/commits/master).\n\n#### v1.1\n\n- Added support for composite primary keys (loading to pandas)\n\n#### v1.0\n\n- Initial driver implementation\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frictionlessdata/tableschema-pandas-py", "keywords": "frictionless data,datapackage,pandas", "license": "LGPLv3+", "maintainer": "", "maintainer_email": "", "name": "tableschema-pandas", "package_url": "https://pypi.org/project/tableschema-pandas/", "platform": "", "project_url": "https://pypi.org/project/tableschema-pandas/", "project_urls": {"Homepage": "https://github.com/frictionlessdata/tableschema-pandas-py"}, "release_url": "https://pypi.org/project/tableschema-pandas/1.1.0/", "requires_dist": ["six (>=1.9)", "pandas (>=0.18)", "tabulator (>=1.0)", "tableschema (>=1.1)", "isodate (>=0.6)", "mock ; extra == 'develop'", "pylama ; extra == 'develop'", "pytest ; extra == 'develop'", "pytest-cov ; extra == 'develop'", "tox ; extra == 'develop'"], "requires_python": "", "summary": "Generate Pandas data frames, load and extract data, based on JSON Table Schema descriptors.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tableschema-pandas-py</h1>\n<p><a href=\"https://travis-ci.org/frictionlessdata/tableschema-pandas-py\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2efd1262abf3ac112737b4cd72334469fbc13d79/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6672696374696f6e6c657373646174612f7461626c65736368656d612d70616e6461732d70792f6d61737465722e737667\"></a>\n<a href=\"https://coveralls.io/r/frictionlessdata/tableschema-pandas-py?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f99fd1a9bedc1802dca5e137e30ac4d08fe232f4/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6672696374696f6e6c657373646174612f7461626c65736368656d612d70616e6461732d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/tableschema-pandas\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/daea8e3cc71fac2809fcd0ad237fbf1690563ead/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7461626c65736368656d612d70616e6461732e737667\"></a>\n<a href=\"https://github.com/frictionlessdata/tableschema-pandas-py\" rel=\"nofollow\"><img alt=\"Github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe3b85e910b303fc497328fd9e064a0813699a67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622d6d61737465722d627269676874677265656e\"></a>\n<a href=\"https://gitter.im/frictionlessdata/chat\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb17f2481df87e64c9f854d8900ea6aaf373ea77/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f6672696374696f6e6c657373646174612f636861742e737667\"></a></p>\n<p>Generate and load Pandas data frames <a href=\"http://specs.frictionlessdata.io/table-schema/\" rel=\"nofollow\">Table Schema</a> descriptors.</p>\n<h2>Features</h2>\n<ul>\n<li>implements <code>tableschema.Storage</code> interface</li>\n</ul>\n<h2>Contents</h2>\n\n<ul>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting Started</a>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a>\n<ul>\n<li><a href=\"#storage\" rel=\"nofollow\">Storage</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<p>The package use semantic versioning. It means that major versions  could include breaking changes. It's highly recommended to specify <code>package</code> version range in your <code>setup/requirements</code> file e.g. <code>package&gt;=1.0,&lt;2.0</code>.</p>\n<pre><code>$ pip install tableschema-pandas\n</code></pre>\n<h3>Example</h3>\n<p>Code examples in this readme requires Python 3.3+ interpreter. You could see even more example in <a href=\"https://github.com/frictionlessdata/tableschema-pandas-py/tree/master/examples\" rel=\"nofollow\">examples</a> directory.</p>\n<p>You can easily load resources from a data package as Pandas data frames by simply using <code>datapackage.push_datapackage</code> function:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">datapackage</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://data.okfn.org/data/core/country-list/datapackage.json'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">datapackage</span><span class=\"o\">.</span><span class=\"n\">push_datapackage</span><span class=\"p\">(</span><span class=\"n\">data_url</span><span class=\"p\">,</span> <span class=\"s1\">'pandas'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">buckets</span>\n<span class=\"p\">[</span><span class=\"s1\">'data___data'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data___data'</span><span class=\"p\">])</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"s1\">'&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data___data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n             <span class=\"n\">Name</span> <span class=\"n\">Code</span>\n<span class=\"mi\">0</span>     <span class=\"n\">Afghanistan</span>   <span class=\"n\">AF</span>\n<span class=\"mi\">1</span>   <span class=\"n\">\u00c5land</span> <span class=\"n\">Islands</span>   <span class=\"n\">AX</span>\n<span class=\"mi\">2</span>         <span class=\"n\">Albania</span>   <span class=\"n\">AL</span>\n<span class=\"mi\">3</span>         <span class=\"n\">Algeria</span>   <span class=\"n\">DZ</span>\n<span class=\"mi\">4</span>  <span class=\"n\">American</span> <span class=\"n\">Samoa</span>   <span class=\"n\">AS</span>\n</pre>\n<p>Also it is possible to pull your existing data frame into a data package:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">datapackage</span><span class=\"o\">.</span><span class=\"n\">pull_datapackage</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/datapackage.json'</span><span class=\"p\">,</span> <span class=\"s1\">'country_list'</span><span class=\"p\">,</span> <span class=\"s1\">'pandas'</span><span class=\"p\">,</span> <span class=\"n\">tables</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data___data'</span><span class=\"p\">],</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n<span class=\"n\">Storage</span>\n</pre>\n<h2>Documentation</h2>\n<p>The whole public API of this package is described here and follows semantic versioning rules. Everyting outside of this readme are private API and could be changed without any notification on any new version.</p>\n<h3>Storage</h3>\n<p>Package implements <a href=\"https://github.com/frictionlessdata/tableschema-py#storage\" rel=\"nofollow\">Tabular Storage</a> interface (see full documentation on the link):</p>\n<p><img alt=\"Storage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/191c341340508a9cf36b41690ca1a05252c9eca9/68747470733a2f2f692e696d6775722e636f6d2f525167727871702e706e67\"></p>\n<p>This driver provides an additional API:</p>\n<h4><code>Storage(dataframes=[])</code></h4>\n<ul>\n<li><code>dataframes (object[])</code> - list of storage dataframes</li>\n</ul>\n<p>We can get storage this way:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tableschema_pandas</span> <span class=\"kn\">import</span> <span class=\"n\">Storage</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">Storage</span><span class=\"p\">()</span>\n</pre>\n<p>Storage works as a container for Pandas data frames. You can define new data frame inside storage using <code>storage.create</code> method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'primaryKey'</span><span class=\"p\">:</span> <span class=\"s1\">'id'</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'fields'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>         <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'comment'</span><span class=\"p\">,</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n<span class=\"o\">...</span>     <span class=\"p\">]</span>\n<span class=\"o\">...</span> <span class=\"p\">})</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">buckets</span>\n<span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>Use <code>storage.write</code> to populate data frame with data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n<span class=\"nb\">id</span> <span class=\"n\">comment</span>\n<span class=\"mi\">1</span>        <span class=\"n\">a</span>\n<span class=\"mi\">2</span>        <span class=\"n\">b</span>\n</pre>\n<p>Also you can use <a href=\"https://github.com/frictionlessdata/tabulator-py\" rel=\"nofollow\">tabulator</a> to populate data frame from external data file. As you see, subsequent writes simply appends new data on top of existing ones:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">tabulator</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">tabulator</span><span class=\"o\">.</span><span class=\"n\">Stream</span><span class=\"p\">(</span><span class=\"s1\">'data/comments.csv'</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s1\">'data'</span><span class=\"p\">]</span>\n<span class=\"nb\">id</span> <span class=\"n\">comment</span>\n<span class=\"mi\">1</span>        <span class=\"n\">a</span>\n<span class=\"mi\">2</span>        <span class=\"n\">b</span>\n<span class=\"mi\">1</span>     <span class=\"n\">good</span>\n</pre>\n<h2>Contributing</h2>\n<p>The project follows the <a href=\"https://github.com/okfn/coding-standards\" rel=\"nofollow\">Open Knowledge International coding standards</a>.</p>\n<p>Recommended way to get started is to create and activate a project virtual environment.\nTo install package and development dependencies into active environment:</p>\n<pre><code>$ make install\n</code></pre>\n<p>To run tests with linting and coverage:</p>\n<pre>$ make <span class=\"nb\">test</span>\n</pre>\n<p>For linting <code>pylama</code> configured in <code>pylama.ini</code> is used. On this stage it's already\ninstalled into your environment and could be used separately with more fine-grained control\nas described in documentation - <a href=\"https://pylama.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pylama.readthedocs.io/en/latest/</a>.</p>\n<p>For example to sort results by error type:</p>\n<pre>$ pylama --sort &lt;path&gt;\n</pre>\n<p>For testing <code>tox</code> configured in <code>tox.ini</code> is used.\nIt's already installed into your environment and could be used separately with more fine-grained control as described in documentation - <a href=\"https://testrun.org/tox/latest/\" rel=\"nofollow\">https://testrun.org/tox/latest/</a>.</p>\n<p>For example to check subset of tests against Python 2 environment with increased verbosity.\nAll positional arguments and options after <code>--</code> will be passed to <code>py.test</code>:</p>\n<pre>tox -e py27 -- -v tests/&lt;path&gt;\n</pre>\n<p>Under the hood <code>tox</code> uses <code>pytest</code> configured in <code>pytest.ini</code>, <code>coverage</code>\nand <code>mock</code> packages. This packages are available only in tox envionments.</p>\n<h2>Changelog</h2>\n<p>Here described only breaking and the most important changes. The full changelog and documentation for all released versions could be found in nicely formatted <a href=\"https://github.com/frictionlessdata/tableschema-pandas-py/commits/master\" rel=\"nofollow\">commit history</a>.</p>\n<h4>v1.1</h4>\n<ul>\n<li>Added support for composite primary keys (loading to pandas)</li>\n</ul>\n<h4>v1.0</h4>\n<ul>\n<li>Initial driver implementation</li>\n</ul>\n\n          </div>"}, "last_serial": 6029985, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "712e4919a1e93bb61a8de5253d231d4b", "sha256": "f9c1a567f2c6c6469c3c5bc9a1db96dd187960ccd528e93720ae0e08b4e28ee3"}, "downloads": -1, "filename": "tableschema_pandas-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "712e4919a1e93bb61a8de5253d231d4b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11086, "upload_time": "2017-09-28T07:40:25", "upload_time_iso_8601": "2017-09-28T07:40:25.821025Z", "url": "https://files.pythonhosted.org/packages/04/5a/434093806ab1a66db46b4cd3222543693a39173b2ace377da9bb1ead580f/tableschema_pandas-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f2eb920a6e8335f08af3b32ae05b225", "sha256": "4d1bfb120146b3313e7187eee16dc305599be4c37e0d571fef8ee12531eed21d"}, "downloads": -1, "filename": "tableschema-pandas-0.6.0.tar.gz", "has_sig": false, "md5_digest": "5f2eb920a6e8335f08af3b32ae05b225", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11833, "upload_time": "2017-09-28T07:40:27", "upload_time_iso_8601": "2017-09-28T07:40:27.367348Z", "url": "https://files.pythonhosted.org/packages/3d/54/22d69fc1b60beac80747fa403ba1efad218c4515b60c631461ca3e0c5add/tableschema-pandas-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "c79f848a65bbdc8529409b08a9df0619", "sha256": "b3647d17d8c86ddf6bf70446c8340c33c11757de8a59cee849f2c741dc315090"}, "downloads": -1, "filename": "tableschema_pandas-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c79f848a65bbdc8529409b08a9df0619", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11272, "upload_time": "2017-09-30T18:00:48", "upload_time_iso_8601": "2017-09-30T18:00:48.171223Z", "url": "https://files.pythonhosted.org/packages/5d/09/1c9595766292a148bc463408e30b55c3e099bb4694be083d685d8c43193c/tableschema_pandas-0.6.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9fcd7537251b6dd5a911b3149248cbb", "sha256": "ee374f86fb2b5f79a2f16961dc049f5985f7ed6e936d3f10fb6804ed0e712a4c"}, "downloads": -1, "filename": "tableschema-pandas-0.6.1.tar.gz", "has_sig": false, "md5_digest": "a9fcd7537251b6dd5a911b3149248cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11956, "upload_time": "2017-09-30T18:00:49", "upload_time_iso_8601": "2017-09-30T18:00:49.096004Z", "url": "https://files.pythonhosted.org/packages/e5/3c/df78f653532e4c4851b32f814e8c79a4a48120b394bd1d97acb4659a5f6e/tableschema-pandas-0.6.1.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "7fd21bc083e2dc222ba9ca757eeab478", "sha256": "6a66d1c7737af29b7377bd1e6a25474a65323e3132e453585247aecb0fa649a8"}, "downloads": -1, "filename": "tableschema_pandas-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7fd21bc083e2dc222ba9ca757eeab478", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10749, "upload_time": "2019-09-21T09:13:30", "upload_time_iso_8601": "2019-09-21T09:13:30.826073Z", "url": "https://files.pythonhosted.org/packages/2b/97/1e117294561b92c15c25f45d9c3ed97c5bc9c4fabe6b358694dc4053951d/tableschema_pandas-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2297cd15bc54449323cf664ae952ffa", "sha256": "6817b0b7055ea0bae018d4d970ca31045dc8a0aa567827382aa0c3e1130b78c3"}, "downloads": -1, "filename": "tableschema-pandas-0.6.3.tar.gz", "has_sig": false, "md5_digest": "e2297cd15bc54449323cf664ae952ffa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10847, "upload_time": "2019-09-21T09:13:32", "upload_time_iso_8601": "2019-09-21T09:13:32.445114Z", "url": "https://files.pythonhosted.org/packages/83/8b/da04b836858b85c0e470d538561ddc930a38ccb8d8fa0e2438fb093fb33a/tableschema-pandas-0.6.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9b6a73588c076358ea946533636bab11", "sha256": "1a39ec2a5b28f62a29c61f6b4253b6718b569dea7a2137125af29eb7e592edd0"}, "downloads": -1, "filename": "tableschema_pandas-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b6a73588c076358ea946533636bab11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10755, "upload_time": "2019-09-21T11:41:36", "upload_time_iso_8601": "2019-09-21T11:41:36.733617Z", "url": "https://files.pythonhosted.org/packages/89/15/ba3b260d2a0fb22eabf910a6bcb2c784eaf018a4e9557e41fc9b199af91b/tableschema_pandas-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fcd83132994a814761c81102d1ecc35", "sha256": "f46114b06ebf58d89c618ac29c8fb39c7b7debb7e013b9aa1e89fc93c399b9fb"}, "downloads": -1, "filename": "tableschema-pandas-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2fcd83132994a814761c81102d1ecc35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10858, "upload_time": "2019-09-21T11:41:38", "upload_time_iso_8601": "2019-09-21T11:41:38.303378Z", "url": "https://files.pythonhosted.org/packages/8b/ad/d6a798742784fd34d73670d316a546e96794d669258e7daa92a0c32ee6cc/tableschema-pandas-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ce1f37691690d37fd151d5b0af7b224f", "sha256": "e053c72be8d821331595de1cf08fedcf23aebdc832364d60bc98043fe0ef7cb7"}, "downloads": -1, "filename": "tableschema_pandas-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce1f37691690d37fd151d5b0af7b224f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10808, "upload_time": "2019-10-25T14:34:35", "upload_time_iso_8601": "2019-10-25T14:34:35.908474Z", "url": "https://files.pythonhosted.org/packages/3d/10/51e855b1a92a9d0bb23f349ba44df0685aeb7581df23f148e034bb05f1ae/tableschema_pandas-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ee3db009481b2be32203c1b40298097", "sha256": "13ab08fc83069d2581c9d6a94876d911b219e8e3448c497de57f59e69a6ed1e0"}, "downloads": -1, "filename": "tableschema-pandas-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1ee3db009481b2be32203c1b40298097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11160, "upload_time": "2019-10-25T14:34:37", "upload_time_iso_8601": "2019-10-25T14:34:37.067271Z", "url": "https://files.pythonhosted.org/packages/e0/f6/1f8f92db63bc304de683a8c1acf72baa64eaf993dfa2161a7a5cd7cbc715/tableschema-pandas-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce1f37691690d37fd151d5b0af7b224f", "sha256": "e053c72be8d821331595de1cf08fedcf23aebdc832364d60bc98043fe0ef7cb7"}, "downloads": -1, "filename": "tableschema_pandas-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce1f37691690d37fd151d5b0af7b224f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10808, "upload_time": "2019-10-25T14:34:35", "upload_time_iso_8601": "2019-10-25T14:34:35.908474Z", "url": "https://files.pythonhosted.org/packages/3d/10/51e855b1a92a9d0bb23f349ba44df0685aeb7581df23f148e034bb05f1ae/tableschema_pandas-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ee3db009481b2be32203c1b40298097", "sha256": "13ab08fc83069d2581c9d6a94876d911b219e8e3448c497de57f59e69a6ed1e0"}, "downloads": -1, "filename": "tableschema-pandas-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1ee3db009481b2be32203c1b40298097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11160, "upload_time": "2019-10-25T14:34:37", "upload_time_iso_8601": "2019-10-25T14:34:37.067271Z", "url": "https://files.pythonhosted.org/packages/e0/f6/1f8f92db63bc304de683a8c1acf72baa64eaf993dfa2161a7a5cd7cbc715/tableschema-pandas-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:39 2020"}