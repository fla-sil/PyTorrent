{"info": {"author": "atokulus", "author_email": "atokulus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# About `flora_tools`\n\nThe `flora_tools` package provides the tools and means for developing on the new PermaSense flora DPP2 Comboards, facilitating the LoRa radio SX1262 from Semtech.\n\nModule | Description\n------ | -----------\n`flora_tools`             | General resources, such as the static calculation of time-on-air, Gloria & LWB figures, <br />basic interfacing via serial/UART, and interface for the Tektronix oscilloscope to measure the timings precisely\n`flora_tools.experiments` | All scripted experiments, utilizing e.g. the oscilloscope\n`flora_tools.analysis`    | Jupyter notebooks for condensed visual representation.\n`flora_tools.sim`         | The simulation server for the protocol layers\n`flora_tools.toolchain`   | The scripts for flashing and maintaining the firmware projects\n`flora_tools.stm32loader` | The script which implements the STM32's UART ROM-bootloader protocol\n\n# Installation Guide\n\nInstall Python3.7+ and pip 10.0+. If your are using Ubuntu 18.04, these are already installed. Then you can install the pip package `flora-tools`\n\n```sh\npython -m pip install flora-tools\n```\n\nIf you run into problems, try `python3 -m pip` or `pip3`, as there are still many old distributions around.\n\n### Run The script ###\n\nUse \n\n```sh\npython -m flora-tools  # With a dash!\n```\n\nor just\n\n```\nflora_tools  # With an underscore!\n```\n\n### Development ### \n\nDo not install the python package from PyPi, but rather clone this repository and run\n\n```sh\ngit submodule update --init --recursive\npython -m pip install -e .\n```\n\ninside the top folder (where `setup.py` is located). You can edit the source files and the module will reflect the changes automatically.\n\nThe python package is generated and uploaded according to (https://packaging.python.org/tutorials/packaging-projects/).\nDo not forget to clone the git submodules as well.\n\n\n## Patch Atollic TrueStudio Eclipse Project Files\nAs there are no external include paths and symbols configured in a freshly generated Atollic TrueStudio project, the project's XML files have to be patched.\n\nJust run\n\n```sh\npython -m flora-tools patch_eclipse path/to/flora_repository\n```\n\n\n## Mass programming/flashing DevKits (STM32L476RG) and Comboards (STM32L443CC, STM32L433CC) with built-in ROM UART-Bootloader\n\nUsing the `stm32loader` library for Python 3 (originally by *florisla*), all SX126xDVK1xAS devkits and DPP-Comboard modules can be programmed simultaneously. The library is available as a git submodule inside the `flora-tools` python package.\n\nEnsure you have closed all your serial-port connections to your DevKits or ComBoards.\n\nYou can now either put the MCU into bootloader mode by pullin BOOT0-pin high (connect with VCC), set the J502 & J503 solder bridges on the DPP carrier board, or use the dedicated FlOS CLI command `system bootloader` inside *flora CLI* to jump directly into the ROM bootloader. All variant are supported automatically by the command below.\n\nCheck that you have compiled and built your Atollic project correctly and have a `*.hex` or `*.binary` file inside the `Outputs` folder. Then run the following command with the correct path (i.e. where the `platform` and `lib` folder are located).:\n\n```sh\npython -m flora-tools program_all path/to/flora_repository\n```\n\n## Programming single Device\n```sh\npython -m flora-tools program path/to/firmware(.hex/.binary) -p COM1\n```\n\n## Measurement setup\n\n### Precise timing measurements\n\n![Setup to measure precise timings](/doc/img/measurements-cable_setup.png)\n\n### Measurements over GPIB/LXI/VISA\nFor a working PyVISA installation for interfacing with the oscilloscope and power analyzers you need to follow this [guide](https://pyvisa.readthedocs.io/en/stable/getting_nivisa.html). For Windows, you can download the following VISA backend driver: (http://www.ni.com/download/ni-visa-18.0/7597/en/)\n\nUse NI MAX to configure all your devices.\n\n### Tektronix MSO4104B oscilloscope\n\nFirst, upgrade your oscilloscope to the lates firmware version, as the `HORIZONTAL:RECORDLENGTH` command won't work otherwise.\n\nConnect your oscilloscope to LAN via a Ethernet.\n\nPush the `Utility` button and switch to the `Utility Page` `I/O`. Select `Ethernet & LXI`. Disable the `e*Scope Password`. Set the `Network Configuration` (bottom) to `Automatic` to get a DHCP lease.\n\nAdd your Tektronix MSO4104B oscilloscope in NI MAX. You have to note down the VISA Resource Name.\n\n## FlockLab Integration\n\n*To be integrated.*\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Atokulus/flora_tools.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flora-tools", "package_url": "https://pypi.org/project/flora-tools/", "platform": "", "project_url": "https://pypi.org/project/flora-tools/", "project_urls": {"Homepage": "https://github.com/Atokulus/flora_tools.git"}, "release_url": "https://pypi.org/project/flora-tools/0.1.11/", "requires_dist": ["intelhex", "jupyter", "matplotlib", "networkx", "numpy", "pandas", "pyserial", "pyvisa", "setuptools"], "requires_python": ">=3.7", "summary": "Tool and library for interfacing with the PermaSense Flora nodes, enabling programming, configuring and measuring.", "version": "0.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># About <cite>flora_tools</cite></p>\n<p>The <cite>flora_tools</cite> package provides the tools and means for developing on the new PermaSense flora DPP2 Comboards, facilitating the LoRa radio SX1262 from Semtech.</p>\n<p>Module | Description\n\u2014\u2014 | \u2014\u2014\u2014\u2013\n<cite>flora_tools</cite>             | General resources, such as the static calculation of time-on-air, Gloria &amp; LWB figures, &lt;br /&gt;basic interfacing via serial/UART, and interface for the Tektronix oscilloscope to measure the timings precisely\n<cite>flora_tools.experiments</cite> | All scripted experiments, utilizing e.g. the oscilloscope\n<cite>flora_tools.analysis</cite>    | Jupyter notebooks for condensed visual representation.\n<cite>flora_tools.sim</cite>         | The simulation server for the protocol layers\n<cite>flora_tools.toolchain</cite>   | The scripts for flashing and maintaining the firmware projects\n<cite>flora_tools.stm32loader</cite> | The script which implements the STM32\u2019s UART ROM-bootloader protocol</p>\n<p># Installation Guide</p>\n<p>Install Python3.7+ and pip 10.0+. If your are using Ubuntu 18.04, these are already installed. Then you can install the pip package <cite>flora-tools</cite></p>\n<p><tt>`sh\npython <span class=\"pre\">-m</span> pip install <span class=\"pre\">flora-tools</span>\n`</tt></p>\n<p>If you run into problems, try <cite>python3 -m pip</cite> or <cite>pip3</cite>, as there are still many old distributions around.</p>\n<p>### Run The script ###</p>\n<p>Use</p>\n<p><tt>`sh\npython <span class=\"pre\">-m</span> <span class=\"pre\">flora-tools</span>\u00a0 # With a dash!\n`</tt></p>\n<p>or just</p>\n<p><tt>`\nflora_tools\u00a0 # With an underscore!\n`</tt></p>\n<p>### Development ###</p>\n<p>Do not install the python package from PyPi, but rather clone this repository and run</p>\n<p><tt>`sh\ngit submodule update <span class=\"pre\">--init</span> <span class=\"pre\">--recursive</span>\npython <span class=\"pre\">-m</span> pip install <span class=\"pre\">-e</span> .\n`</tt></p>\n<p>inside the top folder (where <cite>setup.py</cite> is located). You can edit the source files and the module will reflect the changes automatically.</p>\n<p>The python package is generated and uploaded according to (<a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">https://packaging.python.org/tutorials/packaging-projects/</a>).\nDo not forget to clone the git submodules as well.</p>\n<p>## Patch Atollic TrueStudio Eclipse Project Files\nAs there are no external include paths and symbols configured in a freshly generated Atollic TrueStudio project, the project\u2019s XML files have to be patched.</p>\n<p>Just run</p>\n<p><tt>`sh\npython <span class=\"pre\">-m</span> <span class=\"pre\">flora-tools</span> patch_eclipse path/to/flora_repository\n`</tt></p>\n<p>## Mass programming/flashing DevKits (STM32L476RG) and Comboards (STM32L443CC, STM32L433CC) with built-in ROM UART-Bootloader</p>\n<p>Using the <cite>stm32loader</cite> library for Python 3 (originally by <em>florisla</em>), all SX126xDVK1xAS devkits and DPP-Comboard modules can be programmed simultaneously. The library is available as a git submodule inside the <cite>flora-tools</cite> python package.</p>\n<p>Ensure you have closed all your serial-port connections to your DevKits or ComBoards.</p>\n<p>You can now either put the MCU into bootloader mode by pullin BOOT0-pin high (connect with VCC), set the J502 &amp; J503 solder bridges on the DPP carrier board, or use the dedicated FlOS CLI command <cite>system bootloader</cite> inside <em>flora CLI</em> to jump directly into the ROM bootloader. All variant are supported automatically by the command below.</p>\n<p>Check that you have compiled and built your Atollic project correctly and have a <cite>*.hex</cite> or <cite>*.binary</cite> file inside the <cite>Outputs</cite> folder. Then run the following command with the correct path (i.e. where the <cite>platform</cite> and <cite>lib</cite> folder are located).:</p>\n<p><tt>`sh\npython <span class=\"pre\">-m</span> <span class=\"pre\">flora-tools</span> program_all path/to/flora_repository\n`</tt></p>\n<p>## Programming single Device\n<tt>`sh\npython <span class=\"pre\">-m</span> <span class=\"pre\">flora-tools</span> program <span class=\"pre\">path/to/firmware(.hex/.binary)</span> <span class=\"pre\">-p</span> COM1\n`</tt></p>\n<p>## Measurement setup</p>\n<p>### Precise timing measurements</p>\n<p>![Setup to measure precise timings](/doc/img/measurements-cable_setup.png)</p>\n<p>### Measurements over GPIB/LXI/VISA\nFor a working PyVISA installation for interfacing with the oscilloscope and power analyzers you need to follow this [guide](<a href=\"https://pyvisa.readthedocs.io/en/stable/getting_nivisa.html\" rel=\"nofollow\">https://pyvisa.readthedocs.io/en/stable/getting_nivisa.html</a>). For Windows, you can download the following VISA backend driver: (<a href=\"http://www.ni.com/download/ni-visa-18.0/7597/en/\" rel=\"nofollow\">http://www.ni.com/download/ni-visa-18.0/7597/en/</a>)</p>\n<p>Use NI MAX to configure all your devices.</p>\n<p>### Tektronix MSO4104B oscilloscope</p>\n<p>First, upgrade your oscilloscope to the lates firmware version, as the <cite>HORIZONTAL:RECORDLENGTH</cite> command won\u2019t work otherwise.</p>\n<p>Connect your oscilloscope to LAN via a Ethernet.</p>\n<p>Push the <cite>Utility</cite> button and switch to the <cite>Utility Page</cite> <cite>I/O</cite>. Select <cite>Ethernet &amp; LXI</cite>. Disable the <cite>e*Scope Password</cite>. Set the <cite>Network Configuration</cite> (bottom) to <cite>Automatic</cite> to get a DHCP lease.</p>\n<p>Add your Tektronix MSO4104B oscilloscope in NI MAX. You have to note down the VISA Resource Name.</p>\n<p>## FlockLab Integration</p>\n<p><em>To be integrated.</em></p>\n\n          </div>"}, "last_serial": 4065369, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "fac684007edd1cd849a8349cba115642", "sha256": "d9250f50348d544109032cc0cbf8750d5fc1ce88d59305a50cf171eb7dbe1c69"}, "downloads": -1, "filename": "flora_tools-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "fac684007edd1cd849a8349cba115642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 101922, "upload_time": "2018-07-16T11:21:42", "upload_time_iso_8601": "2018-07-16T11:21:42.482370Z", "url": "https://files.pythonhosted.org/packages/67/37/8845026b285975f430a244b30b895a691696211c95cf729334a468d61d16/flora_tools-0.1.11-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fac684007edd1cd849a8349cba115642", "sha256": "d9250f50348d544109032cc0cbf8750d5fc1ce88d59305a50cf171eb7dbe1c69"}, "downloads": -1, "filename": "flora_tools-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "fac684007edd1cd849a8349cba115642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 101922, "upload_time": "2018-07-16T11:21:42", "upload_time_iso_8601": "2018-07-16T11:21:42.482370Z", "url": "https://files.pythonhosted.org/packages/67/37/8845026b285975f430a244b30b895a691696211c95cf729334a468d61d16/flora_tools-0.1.11-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 01:01:45 2020"}