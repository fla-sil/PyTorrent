{"info": {"author": "Chirag Shah", "author_email": "chiragshah9696@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<h1 align=\"center\"><img alt=\"pyCAIR Logo\" src=\"https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/e11bbea2/others/logo.jpg\" width=\"250\"></h1>\n\npyCAIR is a content-aware image resizing(CAIR) [library](https://pypi.org/project/pyCAIR/) based on [Seam Carving for Content-Aware Image Resizing](http://http://graphics.cs.cmu.edu/courses/15-463/2012_fall/hw/proj3-seamcarving/imret.pdf \"Seam Carving for Content-Aware Image Resizing\") paper.\n\n## Table of Contents\n\n1. [How CAIR works](#how-does-it-work)\n2. [Understanding the research paper](#intutive-explanation-of-research-paper)\n3. [Project structure and explanation](#project-structure-and-explanation)\n4. [Installation](#installation)\n5. [Usage](#usage)\n6. [Demo](#in-action)\n7. [Screenshots](#screenshots)\n8. [Todo](#todo)\n\n\n## How does it work\n\n- An energy map and a grayscale format of image is generated from the provided image.\n\n- Seam Carving algorithm tries to find the not so useful regions in image by picking up the lowest energy values from energy map.\n\n- With the help of Dynamic Programming coupled with backtracking, seam carving  algorithm generates individual seams over the image using top-down approach or left-right approach.(depending on vertical or horizontal resizing)\n\n- By traversing the image matrix row-wise, the cumulative minimum energy is computed for all possible connected seams for each entry. The minimum energy level is calculated by summing up the current pixel with the lowest value of the neighboring pixels from the previous row.\n\n- Find the lowest cost seam from the energy matrix starting from the last row and remove it.\n\n- Repeat the process iteratively until the image is resized depending on user specified ratio.\n\n| ![Result7](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/c4692303/others/algorithm.png)  | ![Result8](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/c4692303/others/backtracking.png) |\n|:---:|:---:|\n| DP Matrix | Backtracking with minimum energy |\n\n## Intutive explanation of research paper\n\n> ![Notes1](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/06ce7c6e/notes/notes1.png)\n\n> ![Notes2](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/06ce7c6e/notes/notes2.png)\n\n> ![Notes3](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/06ce7c6e/notes/notes3.png)\n\n> ![Notes4](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/06ce7c6e/notes/notes4.png)\n\n\n## Project structure and explanation\n\n**Directory structure:**\n\n**pyCAIR** (root directory)  \n&nbsp; \t| - images/  \n&nbsp; \t| - results /   \n&nbsp; \t| - sequences/ (zipped in repository)  \n&nbsp; \t| - videos/  \n&nbsp; \t| - [notdoneyet.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/notdoneyet.py)  \n&nbsp; \t| - [imgtovideos.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/imgtovideos.py)  \n&nbsp; \t| - [opencv_generators.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/opencv_generators.py)  \n&nbsp; \t| - [seam_carve.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/seam_carve.py)  \n&nbsp; \t| - [helpers.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/helpers.py)  \n\n**File:** [notdoneyet.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/notdoneyet.py)\n\n- **user_input()** -  \nParameters:\n\t- Alignment: Specify on which axis the resizing operation has to be performed.\n\t- Scale Ratio: Floating point operation between 0 and 1 to scale the output image.\n\t- Display Seam: If this option isn't selected, the image is only seamed in background. \n\t- Input Image\n\t- Generate Sequences: Generate intermediate sequences to form a video after all the operations are performed.\n\n**File:** [imgtovideos.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/imgtovideos.py)\n\n- **generateVideo()** - pass each image path to **vid()** for video generation.\n\n- **vid() **- writes each input image to video buffer for creating a complete video.\n\n**File:** [opencv_generators.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/opencv_generators.py)\n\n - **generateEnergyMap()** - utilised OpenCV inbuilt functions for obtaining energies and converting image to grayscale.\n\n - **generateColorMap() ** - utilised OpenCV inbuilt functions to superimpose heatmaps on the given image.\n\n**File:** [seam_carve.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/seam_carve.py)\n\n-  **getEnergy()** - generated energy map using sobel operators and convolve function.\n\n-  **getMaps()** - implemented the function to get seams using Dynamic Programming. Also, stored results of minimum seam in seperate list for backtracking.\n\n-  **drawSeam()** - Plot seams(vertical and horizontal) using red color on image.\n\n- **carve()** - reshape and crop image.\n\n- **cropByColumn()** - Implements cropping on both axes, i.e. vertical and horizontal.\n\n- **cropByRow()** -  Rotate image to ignore repeated computations and provide the rotated image as an input to *cropByColumn* function.\n\n**File:** [helpers.py](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/helpers.py)\n\n- **writeImage()** - stores the images in results directory.\n\n- **writeImageG()** - stores intermediate generated sequence of images in sequences directory.\n\n- **createFolder() -** self explanatory\n\n- **getFileExtension() -** self explanatory\n\n**Other folders:**\n\n- **images/** - stores the input images for testing.\n\n- **videos/** - stores the videos generated from the intermediate sequences.\n\n- **results/** - stores the final results.\n\n- **sequences/** - stores the intermediate sequences generated.\n\n\n\n## Installation\n\n- Simply run `pip install pyCAIR`\n\n- [Direct download option](https://github.com/avidLearnerInProgress/pyCAIR/archive/0.1.tar.gz)\n\n## Usage\n\n```python\n'''\nIt runs the entire code and returns final results\n'''\nfrom pyCAIR import user_input\nuser_input(alignment, scale, seam, input_image, generate_sequences)\n\n'''\nIt generates the energy map\n'''\nfrom pyCAIR import generateEnergyMap\ngenerateEnergyMap(image_name, file_extension, file_name)\n\n'''\nIt generates color maps\n'''\nfrom pyCAIR import generateColorMap\ngenerateColorMap(image_name, file_extension, file_name)\n\n'''\nIt converts sequence of images generated to video\n'''\nfrom pyCAIR import generateVideo\ngenerateVideo()\n\n'''\nIt returns all the paths where images are present for generating video\n'''\nfrom pyCAIR import getToProcessPaths\ngetToProcessPaths()\n\n'''\nIt returns seams, cropped image for an image\n'''\nfrom pyCAIR import cropByColumn\nseam_img, crop_img = cropByColumn(image, display_seams, generate, lsit, scale_c, fromRow)\n\n'''\nIt returns seams, cropped image for an image\n'''\nfrom pyCAIR import cropByRow\nseam_img, crop_img = cropByRow(image, display_seams, generate, lsit, scale_c)\n\n'''\nIt returns created folder\n'''\nfrom pyCAIR import createFolder\nf = createFolder(folder_name)\n\n'''\nIt returns extension of file\n'''\nfrom pyCAIR import getFileExtension\nf = getFileExtension(file_name)\n\n'''\nIt writes image to specified folder\n'''\nfrom pyCAIR import writeImage\nf = writeImage(image, args)\n```\n\n## In Action\n\n[![Video1](https://cdn.pbrd.co/images/HqSW5C0.png)](https://youtube.com/watch?v=PXYryvF7moE)  \n\n[![Video2](https://cdn.pbrd.co/images/HqSWjpq.png)](https://www.youtube.com/watch?v=fH21N4MBN3k)  \n\n- [Playlist](https://www.youtube.com/playlist?list=PL7k5xCepzh7o2kF_FMh4P9tZgALoAx48N)  \n\n## Screenshots\n\n#### Results for Image 1:\n\n| ![Result0](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/images/fig4.png)  | ![Result1](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/gray.png) | ![Result2](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/energy.png) |\n|:---:|:---:|:---:|\n| Original Image | Grayscale | Energy Map |  \n\n| ![Result3](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/colormap1.png)  | ![Result4](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/colormap2.png) |\n|:---:|:---:|\n| Color Map Winter | Color Map Hot |  \n\n| ![Result5](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/column_seams.png)  | ![Result6](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/column_cropped.png) |\n|:---:|:---:|\n| Seams for Columns | Columns Cropped |  \n\n| ![Result7](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/row_seams.png)  | ![Result8](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig4/row_cropped.png) |\n|:---:|:---:|\n| Seams for Rows | Rows Cropped |  \n\n#### Results for Image 2:  \n\n| ![Result0](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/images/fig13.jpg)  | ![Result1](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/gray.jpg) | ![Result2](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/energy.jpg) |\n|:---:|:---:|:---:|\n| Original Image | Grayscale | Energy Map |  \n\n| ![Result3](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/colormap1.jpg)  | ![Result4](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/colormap2.jpg) |\n|:---:|:---:|\n| Color Map Winter | Color Map Hot |  \n\n| ![Result5](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/column_seams.jpg)  |![Result6](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/column_cropped.jpg) |\n|:---:|:---:|\n| Seams for Columns | Columns Cropped |  \n\n| ![Result7](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/row_seams.jpg)  | ![Result8](https://cdn.rawgit.com/avidLearnerInProgress/pyCAIR/0fc66d01/results/fig13/row_cropped.jpg) |\n|:---:|:---:|\n| Seams for Rows | Rows Cropped |  \n\n## Todo\n\n- [x] Implement Seam Algorithm\n- [x] Generate energy maps and color maps for image\n- [x] Display Vertical Seams \n- [x] Display Horizontal Seams \n- [x] Crop Columns \n- [x] Crop Rows \n- [x] Use argparse for Command Line Application \n- [x] Store subsamples in different directories for crop and seam respectively \n- [x] Generate video/gif from sub-samples  \n- [x] Provide a better Readme\n- [x] Provide examples for usage\n- [ ] Generate unittests for each functions\n- [ ] Add Continous Integration Services(Travis, Coveralls)\n- [ ] Add badges\n- [ ] Provide better project description on PyPI\n- [ ] Documentation using Spinx\n- [ ] Integrate object detection using YOLOv2 \n- [ ] Identify most important object (using probability of predicted object)\n- [ ] Invert energy values of most important object\n- [ ] Re-apply Seam Carve and compare results\n\n## License\n\nThis software is licensed under the [GNU General Public License v3.0](https://github.com/avidLearnerInProgress/pyCAIR/blob/master/LICENSE) &copy; [Chirag Shah](https://github.com/avidLearnerInProgress)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/avidLearnerInProgress/pyCAIR/archive/0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/avidLearnerInProgress/pyCAIR", "keywords": "python,openCV,image-processing,dynamic-programming,seam-carving", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "pyCAIR", "package_url": "https://pypi.org/project/pyCAIR/", "platform": "", "project_url": "https://pypi.org/project/pyCAIR/", "project_urls": {"Download": "https://github.com/avidLearnerInProgress/pyCAIR/archive/0.1.tar.gz", "Homepage": "https://github.com/avidLearnerInProgress/pyCAIR"}, "release_url": "https://pypi.org/project/pyCAIR/0.1.13/", "requires_dist": null, "requires_python": "", "summary": "This module provides a simple yet powerful mechanism to resize images using Seam Carving Algorithm.", "version": "0.1.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"pyCAIR Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1eae7422ebdbe51660746fafc7921e2554d1eeb7/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f65313162626561322f6f74686572732f6c6f676f2e6a7067\" width=\"250\"></h1>\n<p>pyCAIR is a content-aware image resizing(CAIR) <a href=\"https://pypi.org/project/pyCAIR/\" rel=\"nofollow\">library</a> based on <a href=\"http://http://graphics.cs.cmu.edu/courses/15-463/2012_fall/hw/proj3-seamcarving/imret.pdf\" rel=\"nofollow\" title=\"Seam Carving for Content-Aware Image Resizing\">Seam Carving for Content-Aware Image Resizing</a> paper.</p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#how-does-it-work\" rel=\"nofollow\">How CAIR works</a></li>\n<li><a href=\"#intutive-explanation-of-research-paper\" rel=\"nofollow\">Understanding the research paper</a></li>\n<li><a href=\"#project-structure-and-explanation\" rel=\"nofollow\">Project structure and explanation</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#in-action\" rel=\"nofollow\">Demo</a></li>\n<li><a href=\"#screenshots\" rel=\"nofollow\">Screenshots</a></li>\n<li><a href=\"#todo\" rel=\"nofollow\">Todo</a></li>\n</ol>\n<h2>How does it work</h2>\n<ul>\n<li>\n<p>An energy map and a grayscale format of image is generated from the provided image.</p>\n</li>\n<li>\n<p>Seam Carving algorithm tries to find the not so useful regions in image by picking up the lowest energy values from energy map.</p>\n</li>\n<li>\n<p>With the help of Dynamic Programming coupled with backtracking, seam carving  algorithm generates individual seams over the image using top-down approach or left-right approach.(depending on vertical or horizontal resizing)</p>\n</li>\n<li>\n<p>By traversing the image matrix row-wise, the cumulative minimum energy is computed for all possible connected seams for each entry. The minimum energy level is calculated by summing up the current pixel with the lowest value of the neighboring pixels from the previous row.</p>\n</li>\n<li>\n<p>Find the lowest cost seam from the energy matrix starting from the last row and remove it.</p>\n</li>\n<li>\n<p>Repeat the process iteratively until the image is resized depending on user specified ratio.</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f0732726f214ba7fbb2e980619f4dd4a0042bb2/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f63343639323330332f6f74686572732f616c676f726974686d2e706e67\"></th>\n<th align=\"center\"><img alt=\"Result8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26219c0ab35ee1308d377bb2515e373ca76da6f6/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f63343639323330332f6f74686572732f6261636b747261636b696e672e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">DP Matrix</td>\n<td align=\"center\">Backtracking with minimum energy</td>\n</tr></tbody></table>\n<h2>Intutive explanation of research paper</h2>\n<blockquote>\n<p><img alt=\"Notes1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/701c8bdc85b1e904530fc7bbfde545c23f7c377f/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30366365376336652f6e6f7465732f6e6f746573312e706e67\"></p>\n</blockquote>\n<blockquote>\n<p><img alt=\"Notes2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88009bd9cbbebde619e2286d628a3abe8c8be083/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30366365376336652f6e6f7465732f6e6f746573322e706e67\"></p>\n</blockquote>\n<blockquote>\n<p><img alt=\"Notes3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccf3560e6a230777e7356c237e145ada7316f705/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30366365376336652f6e6f7465732f6e6f746573332e706e67\"></p>\n</blockquote>\n<blockquote>\n<p><img alt=\"Notes4\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59fd9dc39ff94693d115ed5bc990672c0c2e4f1e/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30366365376336652f6e6f7465732f6e6f746573342e706e67\"></p>\n</blockquote>\n<h2>Project structure and explanation</h2>\n<p><strong>Directory structure:</strong></p>\n<p><strong>pyCAIR</strong> (root directory)<br>\n\u00a0 \t| - images/<br>\n\u00a0 \t| - results /<br>\n\u00a0 \t| - sequences/ (zipped in repository)<br>\n\u00a0 \t| - videos/<br>\n\u00a0 \t| - <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/notdoneyet.py\" rel=\"nofollow\">notdoneyet.py</a><br>\n\u00a0 \t| - <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/imgtovideos.py\" rel=\"nofollow\">imgtovideos.py</a><br>\n\u00a0 \t| - <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/opencv_generators.py\" rel=\"nofollow\">opencv_generators.py</a><br>\n\u00a0 \t| - <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/seam_carve.py\" rel=\"nofollow\">seam_carve.py</a><br>\n\u00a0 \t| - <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/helpers.py\" rel=\"nofollow\">helpers.py</a></p>\n<p><strong>File:</strong> <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/notdoneyet.py\" rel=\"nofollow\">notdoneyet.py</a></p>\n<ul>\n<li><strong>user_input()</strong> -<br>\nParameters:\n<ul>\n<li>Alignment: Specify on which axis the resizing operation has to be performed.</li>\n<li>Scale Ratio: Floating point operation between 0 and 1 to scale the output image.</li>\n<li>Display Seam: If this option isn't selected, the image is only seamed in background.</li>\n<li>Input Image</li>\n<li>Generate Sequences: Generate intermediate sequences to form a video after all the operations are performed.</li>\n</ul>\n</li>\n</ul>\n<p><strong>File:</strong> <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/imgtovideos.py\" rel=\"nofollow\">imgtovideos.py</a></p>\n<ul>\n<li>\n<p><strong>generateVideo()</strong> - pass each image path to <strong>vid()</strong> for video generation.</p>\n</li>\n<li>\n<p>**vid() **- writes each input image to video buffer for creating a complete video.</p>\n</li>\n</ul>\n<p><strong>File:</strong> <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/opencv_generators.py\" rel=\"nofollow\">opencv_generators.py</a></p>\n<ul>\n<li>\n<p><strong>generateEnergyMap()</strong> - utilised OpenCV inbuilt functions for obtaining energies and converting image to grayscale.</p>\n</li>\n<li>\n<p>**generateColorMap() ** - utilised OpenCV inbuilt functions to superimpose heatmaps on the given image.</p>\n</li>\n</ul>\n<p><strong>File:</strong> <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/pyCAIR/seam_carve.py\" rel=\"nofollow\">seam_carve.py</a></p>\n<ul>\n<li>\n<p><strong>getEnergy()</strong> - generated energy map using sobel operators and convolve function.</p>\n</li>\n<li>\n<p><strong>getMaps()</strong> - implemented the function to get seams using Dynamic Programming. Also, stored results of minimum seam in seperate list for backtracking.</p>\n</li>\n<li>\n<p><strong>drawSeam()</strong> - Plot seams(vertical and horizontal) using red color on image.</p>\n</li>\n<li>\n<p><strong>carve()</strong> - reshape and crop image.</p>\n</li>\n<li>\n<p><strong>cropByColumn()</strong> - Implements cropping on both axes, i.e. vertical and horizontal.</p>\n</li>\n<li>\n<p><strong>cropByRow()</strong> -  Rotate image to ignore repeated computations and provide the rotated image as an input to <em>cropByColumn</em> function.</p>\n</li>\n</ul>\n<p><strong>File:</strong> <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/helpers.py\" rel=\"nofollow\">helpers.py</a></p>\n<ul>\n<li>\n<p><strong>writeImage()</strong> - stores the images in results directory.</p>\n</li>\n<li>\n<p><strong>writeImageG()</strong> - stores intermediate generated sequence of images in sequences directory.</p>\n</li>\n<li>\n<p><strong>createFolder() -</strong> self explanatory</p>\n</li>\n<li>\n<p><strong>getFileExtension() -</strong> self explanatory</p>\n</li>\n</ul>\n<p><strong>Other folders:</strong></p>\n<ul>\n<li>\n<p><strong>images/</strong> - stores the input images for testing.</p>\n</li>\n<li>\n<p><strong>videos/</strong> - stores the videos generated from the intermediate sequences.</p>\n</li>\n<li>\n<p><strong>results/</strong> - stores the final results.</p>\n</li>\n<li>\n<p><strong>sequences/</strong> - stores the intermediate sequences generated.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Simply run <code>pip install pyCAIR</code></p>\n</li>\n<li>\n<p><a href=\"https://github.com/avidLearnerInProgress/pyCAIR/archive/0.1.tar.gz\" rel=\"nofollow\">Direct download option</a></p>\n</li>\n</ul>\n<h2>Usage</h2>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">It runs the entire code and returns final results</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">user_input</span>\n<span class=\"n\">user_input</span><span class=\"p\">(</span><span class=\"n\">alignment</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">seam</span><span class=\"p\">,</span> <span class=\"n\">input_image</span><span class=\"p\">,</span> <span class=\"n\">generate_sequences</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It generates the energy map</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">generateEnergyMap</span>\n<span class=\"n\">generateEnergyMap</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"p\">,</span> <span class=\"n\">file_extension</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It generates color maps</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">generateColorMap</span>\n<span class=\"n\">generateColorMap</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"p\">,</span> <span class=\"n\">file_extension</span><span class=\"p\">,</span> <span class=\"n\">file_name</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It converts sequence of images generated to video</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">generateVideo</span>\n<span class=\"n\">generateVideo</span><span class=\"p\">()</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It returns all the paths where images are present for generating video</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">getToProcessPaths</span>\n<span class=\"n\">getToProcessPaths</span><span class=\"p\">()</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It returns seams, cropped image for an image</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">cropByColumn</span>\n<span class=\"n\">seam_img</span><span class=\"p\">,</span> <span class=\"n\">crop_img</span> <span class=\"o\">=</span> <span class=\"n\">cropByColumn</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">display_seams</span><span class=\"p\">,</span> <span class=\"n\">generate</span><span class=\"p\">,</span> <span class=\"n\">lsit</span><span class=\"p\">,</span> <span class=\"n\">scale_c</span><span class=\"p\">,</span> <span class=\"n\">fromRow</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It returns seams, cropped image for an image</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">cropByRow</span>\n<span class=\"n\">seam_img</span><span class=\"p\">,</span> <span class=\"n\">crop_img</span> <span class=\"o\">=</span> <span class=\"n\">cropByRow</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">display_seams</span><span class=\"p\">,</span> <span class=\"n\">generate</span><span class=\"p\">,</span> <span class=\"n\">lsit</span><span class=\"p\">,</span> <span class=\"n\">scale_c</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It returns created folder</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">createFolder</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">createFolder</span><span class=\"p\">(</span><span class=\"n\">folder_name</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It returns extension of file</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">getFileExtension</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">getFileExtension</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">It writes image to specified folder</span>\n<span class=\"sd\">'''</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyCAIR</span> <span class=\"kn\">import</span> <span class=\"n\">writeImage</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">writeImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<h2>In Action</h2>\n<p><a href=\"https://youtube.com/watch?v=PXYryvF7moE\" rel=\"nofollow\"><img alt=\"Video1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5081121e833240a1e3b647c1f2bf60420023e4b8/68747470733a2f2f63646e2e706272642e636f2f696d616765732f487153573543302e706e67\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=fH21N4MBN3k\" rel=\"nofollow\"><img alt=\"Video2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5f686c6cb71580447d93fa8e585489a4644bf54/68747470733a2f2f63646e2e706272642e636f2f696d616765732f487153576a70712e706e67\"></a></p>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PL7k5xCepzh7o2kF_FMh4P9tZgALoAx48N\" rel=\"nofollow\">Playlist</a></li>\n</ul>\n<h2>Screenshots</h2>\n<h4>Results for Image 1:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f86109e3818dab9a4301022738d0269dffa0e4e/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f696d616765732f666967342e706e67\"></th>\n<th align=\"center\"><img alt=\"Result1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c61bba7e117c62b5da0eb66cb8f6b1045e12282/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f677261792e706e67\"></th>\n<th align=\"center\"><img alt=\"Result2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da37f1bcdadf8ac96ca4c10d56c23e7f0c20e7ff/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f656e657267792e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Original Image</td>\n<td align=\"center\">Grayscale</td>\n<td align=\"center\">Energy Map</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a47003a4cb985cf86acd7ed48d79307302fd2be9/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f636f6c6f726d6170312e706e67\"></th>\n<th align=\"center\"><img alt=\"Result4\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ffbd5943e3b616b34222a4cef8877582ed26af83/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f636f6c6f726d6170322e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Color Map Winter</td>\n<td align=\"center\">Color Map Hot</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result5\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49d059821012c7b6c2f15b480033458d2bfbd4ae/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f636f6c756d6e5f7365616d732e706e67\"></th>\n<th align=\"center\"><img alt=\"Result6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/274b12f4e6e68e5088c3fe63f984330dec1023f3/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f636f6c756d6e5f63726f707065642e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Seams for Columns</td>\n<td align=\"center\">Columns Cropped</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9aa765fc731024d529d5b71593a7b6e35d138b3e/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f726f775f7365616d732e706e67\"></th>\n<th align=\"center\"><img alt=\"Result8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39e9fd0e052b82809212ac37ae4c568b2bf84ffd/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f666967342f726f775f63726f707065642e706e67\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Seams for Rows</td>\n<td align=\"center\">Rows Cropped</td>\n</tr></tbody></table>\n<h4>Results for Image 2:</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb6607f9406485bd601859d0e3e5cf98fefb857a/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f696d616765732f66696731332e6a7067\"></th>\n<th align=\"center\"><img alt=\"Result1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d2906b4b0ba566e049a940315c869e95573559d8/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f677261792e6a7067\"></th>\n<th align=\"center\"><img alt=\"Result2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7298abc8eeab31ba3a17a70691ca2a02e419f171/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f656e657267792e6a7067\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Original Image</td>\n<td align=\"center\">Grayscale</td>\n<td align=\"center\">Energy Map</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0d0627d2158c500be0c27c9f4ba352384c3d4dc/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f636f6c6f726d6170312e6a7067\"></th>\n<th align=\"center\"><img alt=\"Result4\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ced25baa48c21f5912d9bb6401c918b0a4e7a311/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f636f6c6f726d6170322e6a7067\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Color Map Winter</td>\n<td align=\"center\">Color Map Hot</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result5\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/001b9184cff9ec1e547131f59389e3cc130f8ddf/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f636f6c756d6e5f7365616d732e6a7067\"></th>\n<th align=\"center\"><img alt=\"Result6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8f3fb90886bba879ecbec12942310e92cd5e480/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f636f6c756d6e5f63726f707065642e6a7067\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Seams for Columns</td>\n<td align=\"center\">Columns Cropped</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img alt=\"Result7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a2c7bcb179f08555714ad22a629560fef5c5508/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f726f775f7365616d732e6a7067\"></th>\n<th align=\"center\"><img alt=\"Result8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc6567fed4494e37376007da788b760b3e81fbf7/68747470733a2f2f63646e2e7261776769742e636f6d2f617669644c6561726e6572496e50726f67726573732f7079434149522f30666336366430312f726573756c74732f66696731332f726f775f63726f707065642e6a7067\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Seams for Rows</td>\n<td align=\"center\">Rows Cropped</td>\n</tr></tbody></table>\n<h2>Todo</h2>\n<ul>\n<li>[x] Implement Seam Algorithm</li>\n<li>[x] Generate energy maps and color maps for image</li>\n<li>[x] Display Vertical Seams</li>\n<li>[x] Display Horizontal Seams</li>\n<li>[x] Crop Columns</li>\n<li>[x] Crop Rows</li>\n<li>[x] Use argparse for Command Line Application</li>\n<li>[x] Store subsamples in different directories for crop and seam respectively</li>\n<li>[x] Generate video/gif from sub-samples</li>\n<li>[x] Provide a better Readme</li>\n<li>[x] Provide examples for usage</li>\n<li>[ ] Generate unittests for each functions</li>\n<li>[ ] Add Continous Integration Services(Travis, Coveralls)</li>\n<li>[ ] Add badges</li>\n<li>[ ] Provide better project description on PyPI</li>\n<li>[ ] Documentation using Spinx</li>\n<li>[ ] Integrate object detection using YOLOv2</li>\n<li>[ ] Identify most important object (using probability of predicted object)</li>\n<li>[ ] Invert energy values of most important object</li>\n<li>[ ] Re-apply Seam Carve and compare results</li>\n</ul>\n<h2>License</h2>\n<p>This software is licensed under the <a href=\"https://github.com/avidLearnerInProgress/pyCAIR/blob/master/LICENSE\" rel=\"nofollow\">GNU General Public License v3.0</a> \u00a9 <a href=\"https://github.com/avidLearnerInProgress\" rel=\"nofollow\">Chirag Shah</a></p>\n\n          </div>"}, "last_serial": 3993534, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "b388e80c0c6972b02648b55c30f04444", "sha256": "7fa8b21157dcd483b90b73a039f25ae5c93ad4ebc13ee6c2c16a7309f54ce479"}, "downloads": -1, "filename": "pyCAIR-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "b388e80c0c6972b02648b55c30f04444", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10475, "upload_time": "2018-06-22T19:56:33", "upload_time_iso_8601": "2018-06-22T19:56:33.665138Z", "url": "https://files.pythonhosted.org/packages/93/7f/82f5b4c2627fff59cf40ed9392d429618653c4bd6569b94591fbc49b990b/pyCAIR-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57db4d4e05a124812b98018fcc26ed43", "sha256": "593bef77b3df89fd6a24fca5a9d4dc8d0feb8e2db8b13dfe021f2b14ab0a524e"}, "downloads": -1, "filename": "pyCAIR-0.1.11.tar.gz", "has_sig": false, "md5_digest": "57db4d4e05a124812b98018fcc26ed43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6744, "upload_time": "2018-06-22T19:56:35", "upload_time_iso_8601": "2018-06-22T19:56:35.090081Z", "url": "https://files.pythonhosted.org/packages/a6/a6/f595dbaaf22ba9cd79010893acec0176c38a40e9d7b5fd8215cb51ea38aa/pyCAIR-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "e358996f8fd76d57edbdfd1513c69f91", "sha256": "46880fe41fd71821106bb10c20a7236829512e01234cc6e9c98fdf080c3c46a8"}, "downloads": -1, "filename": "pyCAIR-0.1.12-py3-none-any.whl", "has_sig": false, "md5_digest": "e358996f8fd76d57edbdfd1513c69f91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10475, "upload_time": "2018-06-22T20:07:13", "upload_time_iso_8601": "2018-06-22T20:07:13.195914Z", "url": "https://files.pythonhosted.org/packages/19/91/07cdc813c0b7fbb41e4f7a7641e49e6d7a5354bffe22ad20ae8f7dfb272f/pyCAIR-0.1.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "929ca580b581de73bd3b9fdd773a908d", "sha256": "709ed30817860a5d9267b7d5e614601453e8627a5d1912c5057f25f84d176805"}, "downloads": -1, "filename": "pyCAIR-0.1.12.tar.gz", "has_sig": false, "md5_digest": "929ca580b581de73bd3b9fdd773a908d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6786, "upload_time": "2018-06-22T20:07:14", "upload_time_iso_8601": "2018-06-22T20:07:14.409848Z", "url": "https://files.pythonhosted.org/packages/75/3a/4238f0c9e80742563672879a417005eee21a0b863726f5a8e0098b5274e3/pyCAIR-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "629c659aadbf9206edbe539157caecdc", "sha256": "02ef7439625d5395cf7e9eb40c028b82157985637dbb5dad39ca0fc1a5a38d41"}, "downloads": -1, "filename": "pyCAIR-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "629c659aadbf9206edbe539157caecdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9077, "upload_time": "2018-06-23T19:58:21", "upload_time_iso_8601": "2018-06-23T19:58:21.974195Z", "url": "https://files.pythonhosted.org/packages/a5/a9/da1b46aa9e436099875afa542e93edb5edf47e6ac1dd9dcfb8429ae4563e/pyCAIR-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f34d9db202b83f9e41a8821ebe27c604", "sha256": "91eca5a51fc0933b16ccf5f6524ccf8feeaa15c3e706acd3ee838985b6eac221"}, "downloads": -1, "filename": "pyCAIR-0.1.13.tar.gz", "has_sig": false, "md5_digest": "f34d9db202b83f9e41a8821ebe27c604", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20925, "upload_time": "2018-06-23T19:58:23", "upload_time_iso_8601": "2018-06-23T19:58:23.510052Z", "url": "https://files.pythonhosted.org/packages/e8/56/03a8b036b3f70107b3555fa4d240cdc9b595579e1793507a963633fe32b3/pyCAIR-0.1.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "629c659aadbf9206edbe539157caecdc", "sha256": "02ef7439625d5395cf7e9eb40c028b82157985637dbb5dad39ca0fc1a5a38d41"}, "downloads": -1, "filename": "pyCAIR-0.1.13-py3-none-any.whl", "has_sig": false, "md5_digest": "629c659aadbf9206edbe539157caecdc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9077, "upload_time": "2018-06-23T19:58:21", "upload_time_iso_8601": "2018-06-23T19:58:21.974195Z", "url": "https://files.pythonhosted.org/packages/a5/a9/da1b46aa9e436099875afa542e93edb5edf47e6ac1dd9dcfb8429ae4563e/pyCAIR-0.1.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f34d9db202b83f9e41a8821ebe27c604", "sha256": "91eca5a51fc0933b16ccf5f6524ccf8feeaa15c3e706acd3ee838985b6eac221"}, "downloads": -1, "filename": "pyCAIR-0.1.13.tar.gz", "has_sig": false, "md5_digest": "f34d9db202b83f9e41a8821ebe27c604", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20925, "upload_time": "2018-06-23T19:58:23", "upload_time_iso_8601": "2018-06-23T19:58:23.510052Z", "url": "https://files.pythonhosted.org/packages/e8/56/03a8b036b3f70107b3555fa4d240cdc9b595579e1793507a963633fe32b3/pyCAIR-0.1.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:50 2020"}