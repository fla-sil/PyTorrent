{"info": {"author": "Brett Francis", "author_email": "brett@gridward.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": "Plant Extract Document processor\n================================\nA package for interacting with and creating [SunSpec](http://sunspec.org)\nPlant Extract Documents and the standard blocks contained therein.\n\nInstallation\n------------\nUsing pip::\n\n    pip install plantextract\n\nUsage\n-------\nTypical `parse` usage looks like this::\n\n    #!/usr/bin/env python\n\n    from pedparser import ModelIDValues, PointIDValues\n    import plantextract.pedparser\n    ...\n\n    this_dir, this_filename = os.path.split(__file__)\n    ped_file = os.path.join(this_dir, 'examples', 'ped-kitchen-sink.xml')\n    parser = pedparser.PlantExtractParser()\n    parser.parse(ped_file=ped_file)\n    parser.ped.plant               # the Plant block\n    parser.ped.plant.name          # the Plant's name attribute\n    parser.ped.plant.location.city # the Plant's location city attribute\n\n    # get ENERGY Points that are from an INVERTER_SINGLE_PHASE Model\n    points = parser.match_model_points(\n        model_id=ModelIDValues.INVERTER_SINGLE_PHASE,\n        point_ids=[PointIDValues.ENERGY]\n    )\n    print('Retrieved point:', points[0].id, points[0].value())\n    print('Point scale factor:', points[0].sf)\n    print('Point value:', points[0].value())  # another way to get Point value\n\n    # get ENERGY Points that are from an INVERTER_SINGLE_PHASE Model, but only\n    # if the Device containing the Model has a logger ID of '11:22:33:44:55:66'\n    points = parser.match_model_points(\n        model_id=ModelIDValues.INVERTER_SINGLE_PHASE,\n        logger_id='11:22:33:44:55:66',\n        point_ids=[PointIDValues.ENERGY, PointIDValues.POWER]\n    )\n    print('Retrieved point:', points[0].id, points[0].value())\n    # ...etc...\n\n    # ...or one can directly interact with the sunSpecData block\n    print parser.ped.sunSpecData.d   # the DeviceRecords list in the sunSpecData\n    print parser.ped.sunSpecData.d[0].m # the Models list in the Zero'th Device\n    print parser.ped.sunSpecData.d[0].m[0].p[0].id # the ID of the Zero'th Point\n    # ...etc...\n\n\nTypical `create` usage looks like this:\n\n    #!/usr/bin/env python\n\n    from plantextract.ped import PlantExtract, Plant, Location\n    from plantextract.ped import NamePlate, Array, Equipment\n\n    ped = PlantExtract(\n        Plant(\n            uuid4(),\n            activation_date=\"2013-03-02\",\n            location=Location(latitude=1.1, longitude=2.2,\n                                     city=\"Redwood City\",\n                                     state_province=\"CA\"),\n            name_plate=NamePlate(props=[\n                Property('installedDCCapacity', 'float', '6.5'),\n                Property('installedACCapacity', 'float', '6.4')\n            ]),\n            design_elements=DesignElements(props=[\n                Property('plantType', 'string', 'commercial')\n            ]),\n            array=Array(props=[\n                Property('description','string','Carport')\n            ], array_id=1),\n            equipment=Equipment(props=[\n                Property('Mn', 'string', 'MeterManuf'),\n                Property('Md', 'string', 'MeterModel'),\n                Property('uncertainty', 'float', '0.5')\n            ], equipment_type='meter')\n        )\n    )\n\nRequires [PyXB](http://pyxb.sourceforge.net) 1.2.3", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lashex/ped.git", "keywords": "sunspec plant extract", "license": "Apache License, Version 2.0", "maintainer": null, "maintainer_email": null, "name": "plantextract", "package_url": "https://pypi.org/project/plantextract/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/plantextract/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lashex/ped.git"}, "release_url": "https://pypi.org/project/plantextract/0.3.0/", "requires_dist": null, "requires_python": null, "summary": "Python Plant Extract Document processor", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Plant Extract Document processor<br>================================<br>A package for interacting with and creating [SunSpec](http://sunspec.org)<br>Plant Extract Documents and the standard blocks contained therein.<br><br>Installation<br>------------<br>Using pip::<br><br>    pip install plantextract<br><br>Usage<br>-------<br>Typical `parse` usage looks like this::<br><br>    #!/usr/bin/env python<br><br>    from pedparser import ModelIDValues, PointIDValues<br>    import plantextract.pedparser<br>    ...<br><br>    this_dir, this_filename = os.path.split(__file__)<br>    ped_file = os.path.join(this_dir, 'examples', 'ped-kitchen-sink.xml')<br>    parser = pedparser.PlantExtractParser()<br>    parser.parse(ped_file=ped_file)<br>    parser.ped.plant               # the Plant block<br>    parser.ped.plant.name          # the Plant's name attribute<br>    parser.ped.plant.location.city # the Plant's location city attribute<br><br>    # get ENERGY Points that are from an INVERTER_SINGLE_PHASE Model<br>    points = parser.match_model_points(<br>        model_id=ModelIDValues.INVERTER_SINGLE_PHASE,<br>        point_ids=[PointIDValues.ENERGY]<br>    )<br>    print('Retrieved point:', points[0].id, points[0].value())<br>    print('Point scale factor:', points[0].sf)<br>    print('Point value:', points[0].value())  # another way to get Point value<br><br>    # get ENERGY Points that are from an INVERTER_SINGLE_PHASE Model, but only<br>    # if the Device containing the Model has a logger ID of '11:22:33:44:55:66'<br>    points = parser.match_model_points(<br>        model_id=ModelIDValues.INVERTER_SINGLE_PHASE,<br>        logger_id='11:22:33:44:55:66',<br>        point_ids=[PointIDValues.ENERGY, PointIDValues.POWER]<br>    )<br>    print('Retrieved point:', points[0].id, points[0].value())<br>    # ...etc...<br><br>    # ...or one can directly interact with the sunSpecData block<br>    print parser.ped.sunSpecData.d   # the DeviceRecords list in the sunSpecData<br>    print parser.ped.sunSpecData.d[0].m # the Models list in the Zero'th Device<br>    print parser.ped.sunSpecData.d[0].m[0].p[0].id # the ID of the Zero'th Point<br>    # ...etc...<br><br><br>Typical `create` usage looks like this:<br><br>    #!/usr/bin/env python<br><br>    from plantextract.ped import PlantExtract, Plant, Location<br>    from plantextract.ped import NamePlate, Array, Equipment<br><br>    ped = PlantExtract(<br>        Plant(<br>            uuid4(),<br>            activation_date=\"2013-03-02\",<br>            location=Location(latitude=1.1, longitude=2.2,<br>                                     city=\"Redwood City\",<br>                                     state_province=\"CA\"),<br>            name_plate=NamePlate(props=[<br>                Property('installedDCCapacity', 'float', '6.5'),<br>                Property('installedACCapacity', 'float', '6.4')<br>            ]),<br>            design_elements=DesignElements(props=[<br>                Property('plantType', 'string', 'commercial')<br>            ]),<br>            array=Array(props=[<br>                Property('description','string','Carport')<br>            ], array_id=1),<br>            equipment=Equipment(props=[<br>                Property('Mn', 'string', 'MeterManuf'),<br>                Property('Md', 'string', 'MeterModel'),<br>                Property('uncertainty', 'float', '0.5')<br>            ], equipment_type='meter')<br>        )<br>    )<br><br>Requires [PyXB](http://pyxb.sourceforge.net) 1.2.3\n          </div>"}, "last_serial": 911396, "releases": {"0.2.7": [{"comment_text": "", "digests": {"md5": "b43b9fd68faab6452be682ccff521861", "sha256": "2a7bdf8ad62ded65edd85b6a56cc1c7d2f55f2d9e4d2c1aae7860f226ad54a2c"}, "downloads": -1, "filename": "plantextract-0.2.7-py2.7.egg", "has_sig": false, "md5_digest": "b43b9fd68faab6452be682ccff521861", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 111254, "upload_time": "2012-12-30T08:23:22", "upload_time_iso_8601": "2012-12-30T08:23:22.506631Z", "url": "https://files.pythonhosted.org/packages/c7/82/5bd2a819bfbea160749db810aaa49fc82d7ee6ae4eca81f14fd5c46b6873/plantextract-0.2.7-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffb00d5ea94432b71fb47aa7d1cb782b", "sha256": "603d19959d2fa4583a0ac5790b3ccfef9d466d0287bce8acc18d0d83c724cd64"}, "downloads": -1, "filename": "plantextract-0.2.7.tar.gz", "has_sig": false, "md5_digest": "ffb00d5ea94432b71fb47aa7d1cb782b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49990, "upload_time": "2012-12-30T08:23:17", "upload_time_iso_8601": "2012-12-30T08:23:17.057279Z", "url": "https://files.pythonhosted.org/packages/ff/8d/5704f268972ac914b4314294608ecc5edd35292b59b90e95bff286e97d9f/plantextract-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "9ac3b07e1c765d8009ad1e4c140b5109", "sha256": "9d9226e8b9fab54da987ac2594bca224d88d299238f14da9556cef8d0eb7aabe"}, "downloads": -1, "filename": "plantextract-0.2.8-py2.7.egg", "has_sig": false, "md5_digest": "9ac3b07e1c765d8009ad1e4c140b5109", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 128391, "upload_time": "2013-01-10T07:40:57", "upload_time_iso_8601": "2013-01-10T07:40:57.699446Z", "url": "https://files.pythonhosted.org/packages/c4/85/1768f3850c5d9d13b07eeb59d54ce96b6c952d0f00cab5927216c24c6254/plantextract-0.2.8-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "12c7507b37788b975804e78e7a681799", "sha256": "b661008a6d64c580a1fc480f4f9f4fd534d63e478b19b143936f07ed51e90490"}, "downloads": -1, "filename": "plantextract-0.2.8.tar.gz", "has_sig": false, "md5_digest": "12c7507b37788b975804e78e7a681799", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50295, "upload_time": "2013-01-10T07:40:56", "upload_time_iso_8601": "2013-01-10T07:40:56.066140Z", "url": "https://files.pythonhosted.org/packages/c5/1b/b7acbe8ded2f098abdc55db95e78fde3fc44850cc78132bdfa65d8226fd7/plantextract-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "5f0a183b4918215c94ef0da602a9af07", "sha256": "68ab55270b3549a833c6b05f4e5d531d6bec420c875f86e27e01ff54d69537b1"}, "downloads": -1, "filename": "plantextract-0.2.9-py2.7.egg", "has_sig": false, "md5_digest": "5f0a183b4918215c94ef0da602a9af07", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 146779, "upload_time": "2013-06-30T06:05:06", "upload_time_iso_8601": "2013-06-30T06:05:06.160061Z", "url": "https://files.pythonhosted.org/packages/db/cc/c6ac5e8a103068968827f66b4aabb66140a74f8e4e5dfd02a28fc72ad2b7/plantextract-0.2.9-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3f413eb7b51e17bb92263aba9ce686a", "sha256": "19427b68991cef55b8d3f6a7f1a1c270cb118fdded075150ce42ed8f5fce4f98"}, "downloads": -1, "filename": "plantextract-0.2.9.tar.gz", "has_sig": false, "md5_digest": "c3f413eb7b51e17bb92263aba9ce686a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53515, "upload_time": "2013-06-30T06:05:03", "upload_time_iso_8601": "2013-06-30T06:05:03.192504Z", "url": "https://files.pythonhosted.org/packages/14/63/91844091ac67117a6412013cf8caa6ae3edd3b5b1deda127cf7e8b46d2b0/plantextract-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d514c57417e9ab5b081b170dfdf010b", "sha256": "6ce724af93f27955779cc58e036cb93ad95f61e387157ebbbef6ff6639a8ed67"}, "downloads": -1, "filename": "plantextract-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d514c57417e9ab5b081b170dfdf010b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68368, "upload_time": "2013-11-05T08:03:41", "upload_time_iso_8601": "2013-11-05T08:03:41.165697Z", "url": "https://files.pythonhosted.org/packages/98/c9/b26490711873c0f4e7e66ec14c38f8b76f8e5ba175fb4f10067d2c2f156d/plantextract-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d514c57417e9ab5b081b170dfdf010b", "sha256": "6ce724af93f27955779cc58e036cb93ad95f61e387157ebbbef6ff6639a8ed67"}, "downloads": -1, "filename": "plantextract-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d514c57417e9ab5b081b170dfdf010b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68368, "upload_time": "2013-11-05T08:03:41", "upload_time_iso_8601": "2013-11-05T08:03:41.165697Z", "url": "https://files.pythonhosted.org/packages/98/c9/b26490711873c0f4e7e66ec14c38f8b76f8e5ba175fb4f10067d2c2f156d/plantextract-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:40 2020"}