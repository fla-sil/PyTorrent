{"info": {"author": "thautawarm", "author_email": "twshere@outlook.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "## Remu-Operator\n\nThis is framework to separate the resolution of operator precedence and associativity from parsing time,\nby using a concise algorithm instead of Shunting Yard algorithm.\n\n[Taine Zhao](http://github.com/thautwarm) is the author of this algorithm, and has named it \"Operator Bubbling\".\n\n\n```python\nfrom remu_operator import Operator, binop_reduce\n\nprecedences = {\n    '+': 1,\n    '*': 2,\n    \"^\": 3,\n}\n\nleft = False\nright = True\n\nassociativities = {'+': left, '*': left, '^': right}\n\n\ndef cons(v):\n    return lambda l, r: '({} {} {})'.format(l, v, r)\n\n\nx = binop_reduce(\n    cons,\n    [1, Operator(\"+\"), 2,\n     Operator(\"*\"), 3, Operator(\"^\"), 4,\n     Operator(\"^\"), 5, Operator(\"+\"), 6,\n     Operator(\"*\"), 7], precedences, associativities)\n\nassert x == '((1 + (2 * (3 ^ (4 ^ 5)))) + (6 * 7))'\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RemuLang/remu-operator", "keywords": "compiler,operator precedence,operator associativity,resolver", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "remu-operator", "package_url": "https://pypi.org/project/remu-operator/", "platform": "any", "project_url": "https://pypi.org/project/remu-operator/", "project_urls": {"Homepage": "https://github.com/RemuLang/remu-operator"}, "release_url": "https://pypi.org/project/remu-operator/1.0.1/", "requires_dist": null, "requires_python": ">=3", "summary": "A framework to separate resolution of operator precedence and associativity from parsing time", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Remu-Operator</h2>\n<p>This is framework to separate the resolution of operator precedence and associativity from parsing time,\nby using a concise algorithm instead of Shunting Yard algorithm.</p>\n<p><a href=\"http://github.com/thautwarm\" rel=\"nofollow\">Taine Zhao</a> is the author of this algorithm, and has named it \"Operator Bubbling\".</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">remu_operator</span> <span class=\"kn\">import</span> <span class=\"n\">Operator</span><span class=\"p\">,</span> <span class=\"n\">binop_reduce</span>\n\n<span class=\"n\">precedences</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'+'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"^\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">associativities</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'+'</span><span class=\"p\">:</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"s1\">'^'</span><span class=\"p\">:</span> <span class=\"n\">right</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cons</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"s1\">'(</span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">)'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">binop_reduce</span><span class=\"p\">(</span>\n    <span class=\"n\">cons</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n     <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"^\"</span><span class=\"p\">),</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n     <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"^\"</span><span class=\"p\">),</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">),</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n     <span class=\"n\">Operator</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">),</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"n\">precedences</span><span class=\"p\">,</span> <span class=\"n\">associativities</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"s1\">'((1 + (2 * (3 ^ (4 ^ 5)))) + (6 * 7))'</span>\n</pre>\n\n          </div>"}, "last_serial": 6429244, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "64233bb73d91ccb8fccf8d9602859a96", "sha256": "5ca5ec4be6fa020662e7ee455febbc0982eea297e3a3d16a6507d32c3b90857e"}, "downloads": -1, "filename": "remu_operator-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "64233bb73d91ccb8fccf8d9602859a96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3195, "upload_time": "2020-01-10T12:02:03", "upload_time_iso_8601": "2020-01-10T12:02:03.524809Z", "url": "https://files.pythonhosted.org/packages/d4/a5/43e5dbb0f35898f0835ba268174daee9f37c6502f1fa4ca8c946b6ac30ba/remu_operator-1.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5c40b60e2a10c8570fb14f02c3251449", "sha256": "4d72cde42d6c585d27f91ffe7adf1faa6106cbfdc2b5c99584916b71d8163b3c"}, "downloads": -1, "filename": "remu_operator-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c40b60e2a10c8570fb14f02c3251449", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3577, "upload_time": "2020-01-10T12:11:24", "upload_time_iso_8601": "2020-01-10T12:11:24.666801Z", "url": "https://files.pythonhosted.org/packages/0f/b2/2873bc0915e0c33089f33c2da9e6e6cfdc4f84c878548e6df451241b8fde/remu_operator-1.0.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c40b60e2a10c8570fb14f02c3251449", "sha256": "4d72cde42d6c585d27f91ffe7adf1faa6106cbfdc2b5c99584916b71d8163b3c"}, "downloads": -1, "filename": "remu_operator-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c40b60e2a10c8570fb14f02c3251449", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3577, "upload_time": "2020-01-10T12:11:24", "upload_time_iso_8601": "2020-01-10T12:11:24.666801Z", "url": "https://files.pythonhosted.org/packages/0f/b2/2873bc0915e0c33089f33c2da9e6e6cfdc4f84c878548e6df451241b8fde/remu_operator-1.0.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:04:48 2020"}