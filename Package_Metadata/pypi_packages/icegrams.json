{"info": {"author": "Mi\u00f0eind ehf", "author_email": "vt@extrada.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: Icelandic", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Linguistic", "Topic :: Utilities"], "description": "=======================================================\nIcegrams: A fast, compact trigram library for Icelandic\n=======================================================\n\n.. image:: https://travis-ci.com/mideind/Icegrams.svg?branch=master\n    :target: https://travis-ci.com/mideind/Icegrams\n\n********\nOverview\n********\n\n**Icegrams** is a Python 3.x package that encapsulates a\n**large trigram library for Icelandic**. (A trigram is a tuple of\nthree consecutive words or tokens that appear in real-world text.)\n\nThe almost 34 million trigrams are heavily compressed using radix tries and\n`quasi-succinct indexes <https://arxiv.org/abs/1206.4300>`_ employing\nElias-Fano encoding. This enables the compressed trigram file to be mapped\ndirectly into memory, with no *ex ante* decompression, for fast queries\n(typically ~40 microseconds per lookup).\n\nThe Icegrams library is implemented in Python and C/C++, glued together via\n`CFFI <https://cffi.readthedocs.io/en/latest/>`_.\n\nThe trigram storage approach is based on a\n`2017 paper by Pibiri and Venturini <http://pages.di.unipi.it/pibiri/papers/SIGIR17.pdf>`_,\nalso referring to\n`Ottaviano and Venturini <http://www.di.unipi.it/~ottavian/files/elias_fano_sigir14.pdf>`_\n(2014) regarding partitioned Elias-Fano indexes.\n\nYou can use Icegrams to obtain probabilities (relative frequencies) of\nover a million different **unigrams** (single words or tokens), or of\n**bigrams** (pairs of two words or tokens), or of **trigrams**. You can also\nask it to return the N most likely successors to any unigram or bigram.\n\nIcegrams is useful for instance in spelling correction, predictive typing,\nto help disabled people write text faster, and for various text generation,\nstatistics and modelling tasks.\n\nIcegrams is built on the database of `Greynir.is <https://greynir.is>`_,\ncomprising over 6 million sentences parsed from Icelandic news articles.\n\n*******\nExample\n*******\n\n>>> from icegrams import Ngrams\n>>> ng = Ngrams()\n>>> # Obtain the frequency of the unigram '\u00cdsland'\n>>> ng.freq(\"\u00cdsland\")\n42018\n>>> # Obtain the probability of the unigram '\u00cdsland', as a fraction\n>>> # of the frequency of all unigrams in the database\n>>> ng.prob(\"\u00cdsland\")\n0.0003979926900206475\n>>> # Obtain the log probability (base e) of the unigram '\u00cdsland'\n>>> ng.logprob(\"\u00cdsland\")\n-7.8290769196308005\n>>> # Obtain the frequency of the bigram 'Katr\u00edn Jakobsd\u00f3ttir'\n>>> ng.freq(\"Katr\u00edn\", \"Jakobsd\u00f3ttir\")\n3517\n>>> # Obtain the probability of 'Jakobsd\u00f3ttir' given 'Katr\u00edn'\n>>> ng.prob(\"Katr\u00edn\", \"Jakobsd\u00f3ttir\")\n0.23298013245033142\n>>> # Obtain the probability of 'J\u00fal\u00edusd\u00f3ttir' given 'Katr\u00edn'\n>>> ng.prob(\"Katr\u00edn\", \"J\u00fal\u00edusd\u00f3ttir\")\n0.013642384105960274\n>>> # Obtain the frequency of 'velta fyrirt\u00e6kisins er'\n>>> ng.freq(\"velta\", \"fyrirt\u00e6kisins\", \"er\")\n4\n>>> # adj_freq returns adjusted frequencies, i.e incremented by 1\n>>> ng.adj_freq(\"xxx\", \"yyy\", \"zzz\")\n1\n\n*********\nReference\n*********\n\nInitializing Icegrams\n---------------------\n\nAfter installing the ``icegrams`` package, use the following code to\nimport it and initialize an instance of the ``Ngrams`` class::\n\n    from icegrams import Ngrams\n    ng = Ngrams()\n\nNow you can use the ``ng`` instance to query for unigram, bigram\nand trigram frequencies and probabilities.\n\nThe Ngrams class\n----------------\n\n* ``__init__(self)``\n\n  Initializes the ``Ngrams`` instance.\n\n* ``freq(self, *args) -> int``\n\n  Returns the frequency of a unigram, bigram or trigram.\n\n  * ``str[] *args`` A parameter sequence of consecutive unigrams\n    to query the frequency for.\n  * **returns** An integer with the frequency of the unigram,\n    bigram or trigram.\n\n  To query for the frequency of a unigram in the text, call\n  ``ng.freq(\"unigram1\")``. This returns the number of times that\n  the unigram appears in the database. The unigram is\n  queried as-is, i.e. with no string stripping or lowercasing.\n\n  To query for the frequency of a bigram in the text, call\n  ``ng.freq(\"unigram1\", \"unigram2\")``.\n\n  To query for the frequency of a trigram in the text, call\n  ``ng.freq(\"unigram1\", \"unigram2\", \"unigram3\")``.\n\n  If you pass more than 3 arguments to ``ng.freq()``, only the\n  last 3 are significant, and the query will be treated\n  as a trigram query.\n\n  Examples::\n\n    >>>> ng.freq(\"stj\u00f3rnarskr\u00e1\")\n    2973\n    >>>> ng.freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n    39\n    >>>> ng.freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    12\n    >>>> ng.freq(\"xxx\", \"yyy\", \"zzz\")\n    0\n\n* ``adj_freq(self, *args) -> int``\n\n  Returns the adjusted frequency of a unigram, bigram or trigram.\n\n  * ``str[] *args`` A parameter sequence of consecutive unigrams\n    to query the frequency for.\n  * **returns** An integer with the adjusted frequency of the unigram,\n    bigram or trigram. The adjusted frequency is the actual\n    frequency plus 1. The method thus never returns 0.\n\n  To query for the frequency of a unigram in the text, call\n  ``ng.adj_freq(\"unigram1\")``. This returns the number of times that\n  the unigram appears in the database, plus 1. The unigram is\n  queried as-is, i.e. with no string stripping or lowercasing.\n\n  To query for the frequency of a bigram in the text, call\n  ``ng.adj_freq(\"unigram1\", \"unigram2\")``.\n\n  To query for the frequency of a trigram in the text, call\n  ``ng.adj_freq(\"unigram1\", \"unigram2\", \"unigram3\")``.\n\n  If you pass more than 3 arguments to ``ng.adj_freq()``, only the\n  last 3 are significant, and the query will be treated\n  as a trigram query.\n\n  Examples::\n\n    >>>> ng.adj_freq(\"stj\u00f3rnarskr\u00e1\")\n    2974\n    >>>> ng.adj_freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n    40\n    >>>> ng.adj_freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    13\n    >>>> ng.adj_freq(\"xxx\", \"yyy\", \"zzz\")\n    1\n\n* ``prob(self, *args) -> float``\n\n  Returns the probability of a unigram, bigram or trigram.\n\n  * ``str[] *args`` A parameter sequence of consecutive unigrams\n    to query the probability for.\n  * **returns** A float with the probability of the given unigram,\n    bigram or trigram.\n\n  The probability of a *unigram* is\n  the frequency of the unigram divided by the sum of the\n  frequencies of all unigrams in the database.\n\n  The probability of a *bigram* ``(u1, u2)`` is the frequency\n  of the bigram divided by the frequency of the unigram ``u1``,\n  i.e. how likely ``u2`` is to succeed ``u1``.\n\n  The probability of a trigram ``(u1, u2, u3)`` is the frequency\n  of the trigram divided by the frequency of the bigram ``(u1, u2)``,\n  i.e. how likely ``u3`` is to succeed ``u1 u2``.\n\n  If you pass more than 3 arguments to ``ng.prob()``, only the\n  last 3 are significant, and the query will be treated\n  as a trigram probability query.\n\n  Examples::\n\n    >>>> ng.prob(\"stj\u00f3rnarskr\u00e1\")\n    2.8168929772755334e-05\n    >>>> ng.prob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n    0.01344989912575655\n    >>>> ng.prob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    0.325\n\n* ``logprob(self, *args) -> float``\n\n  Returns the log probability of a unigram, bigram or trigram.\n\n  * ``str[] *args`` A parameter sequence of consecutive unigrams\n    to query the log probability for.\n  * **returns** A float with the natural logarithm (base *e*) of the\n    probability of the given unigram, bigram or trigram.\n\n  The probability of a *unigram* is\n  the adjusted frequency of the unigram divided by the sum of the\n  frequencies of all unigrams in the database.\n\n  The probability of a *bigram* ``(u1, u2)`` is the adjusted frequency\n  of the bigram divided by the adjusted frequency of the unigram ``u1``,\n  i.e. how likely ``u2`` is to succeed ``u1``.\n\n  The probability of a trigram ``(u1, u2, u3)`` is the adjusted frequency\n  of the trigram divided by the adjusted frequency of the bigram ``(u1, u2)``,\n  i.e. how likely ``u3`` is to succeed ``u1 u2``.\n\n  If you pass more than 3 arguments to ``ng.logprob()``, only the\n  last 3 are significant, and the query will be treated\n  as a trigram probability query.\n\n  Examples::\n\n    >>>> ng.logprob(\"stj\u00f3rnarskr\u00e1\")\n    -10.477290968535172\n    >>>> ng.logprob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n    -4.308783672906165\n    >>>> ng.logprob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    -1.1239300966523995\n\n* ``succ(self, n, *args) -> list[tuple]``\n\n  Returns the *N* most probable successors of a unigram or bigram.\n\n  * ``int n`` A positive integer specifying how many successors,\n    at a maximum, should be returned.\n  * ``str[] *args`` One or two string parameters containing the\n    unigram or bigram to query the successors for.\n  * **returns** A list of tuples of (successor unigram, log probability),\n    in descending order of probability.\n\n  If you pass more than 2 string arguments to ``ng.succ()``, only the\n  last 2 are significant, and the query will be treated\n  as a bigram successor query.\n\n  Examples::\n\n    >>>> ng.succ(2, \"stj\u00f3rnarskr\u00e1\")\n    [('.', -1.8259625296091855), ('landsins', -2.223111581475692)]\n    >>>> ng.succ(2, \"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n    [('\u00cdslands', -1.1239300966523995), ('og', -1.3862943611198904)]\n    >>>> # The following is equivalent to ng.succ(2, \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    >>>> ng.succ(2, \"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n    [('.', -1.3862943611198908), (',', -1.6545583477145702)]\n\n*****\nNotes\n*****\n\nIcegrams is built with a sliding window over the source text. This means that\na sentence such as ``\"Ma\u00f0urinn bor\u00f0a\u00f0i \u00edsinn.\"`` results in the following\ntrigrams being added to the database::\n\n   (\"\", \"\", \"Ma\u00f0urinn\")\n   (\"\", \"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\")\n   (\"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\", \"\u00edsinn\")\n   (\"bor\u00f0a\u00f0i\", \"\u00edsinn\", \".\")\n   (\"\u00edsinn\", \".\", \"\")\n   (\".\", \"\", \"\")\n\nThe same sliding window strategy is applied for bigrams, so the following\nbigrams would be recorded for the same sentence::\n\n   (\"\", \"Ma\u00f0urinn\")\n   (\"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\")\n   (\"bor\u00f0a\u00f0i\", \"\u00edsinn\")\n   (\"\u00edsinn\", \".\")\n   (\".\", \"\")\n\nYou can thus obtain the N unigrams that most often start\na sentence by asking for ``ng.succ(N, \"\")``.\n\nAnd, of course, four unigrams are also added, one for each token in the\nsentence.\n\nThe tokenization of the source text into unigrams is done with the\n`Tokenizer package <https://pypi.org/project/tokenizer>`_ and\nuses the rules documented there.\n\n*************\nPrerequisites\n*************\n\nThis package runs on CPython 3.4 or newer, and on PyPy 3.5 or newer. It\nhas been tested on Linux (gcc on x86-64 and ARMhf), MacOS (clang) and\nWindows (MSVC).\n\nIf a binary wheel package isn't available on `PyPI <https://pypi.org>`_\nfor your system, you may need to have the ``python3-dev`` and/or potentially\n``python3.6-dev`` packages (or their Windows equivalents) installed on your\nsystem to set up Icegrams successfully. This is because a source distribution\ninstall requires a C++ compiler and linker::\n\n    # Debian or Ubuntu:\n    sudo apt-get install python3-dev\n    sudo apt-get install python3.6-dev\n\n************\nInstallation\n************\n\nTo install this package::\n\n    $ pip install icegrams\n\nIf you want to be able to edit the source, do like so (assuming you have **git** installed)::\n\n    $ git clone https://github.com/mideind/Icegrams\n    $ cd Icegrams\n    $ # [ Activate your virtualenv here if you have one ]\n    $ python setup.py develop\n\nThe package source code is now in ``./src/icegrams``.\n\n*****\nTests\n*****\n\nTo run the built-in tests, install `pytest <https://docs.pytest.org/en/latest/>`_,\n``cd`` to your ``Icegrams`` subdirectory (and optionally activate your\nvirtualenv), then run::\n\n    $ python -m pytest\n\n*********\nChangelog\n*********\n\n* Version 0.5.0: Trigrams corpus has been spell-checked\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mideind/Icegrams", "keywords": "nlp,trigram,ngram,trigrams,ngrams,icelandic", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "icegrams", "package_url": "https://pypi.org/project/icegrams/", "platform": "", "project_url": "https://pypi.org/project/icegrams/", "project_urls": {"Homepage": "https://github.com/mideind/Icegrams"}, "release_url": "https://pypi.org/project/icegrams/0.5.0/", "requires_dist": ["cffi (>=1.10.0)"], "requires_python": "", "summary": "Trigram statistics for Icelandic", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.com/mideind/Icegrams\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/mideind/Icegrams.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73429fa3cb784e8674c27b2d4a3795fb4c76aea0/68747470733a2f2f7472617669732d63692e636f6d2f6d696465696e642f4963656772616d732e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><strong>Icegrams</strong> is a Python 3.x package that encapsulates a\n<strong>large trigram library for Icelandic</strong>. (A trigram is a tuple of\nthree consecutive words or tokens that appear in real-world text.)</p>\n<p>The almost 34 million trigrams are heavily compressed using radix tries and\n<a href=\"https://arxiv.org/abs/1206.4300\" rel=\"nofollow\">quasi-succinct indexes</a> employing\nElias-Fano encoding. This enables the compressed trigram file to be mapped\ndirectly into memory, with no <em>ex ante</em> decompression, for fast queries\n(typically ~40 microseconds per lookup).</p>\n<p>The Icegrams library is implemented in Python and C/C++, glued together via\n<a href=\"https://cffi.readthedocs.io/en/latest/\" rel=\"nofollow\">CFFI</a>.</p>\n<p>The trigram storage approach is based on a\n<a href=\"http://pages.di.unipi.it/pibiri/papers/SIGIR17.pdf\" rel=\"nofollow\">2017 paper by Pibiri and Venturini</a>,\nalso referring to\n<a href=\"http://www.di.unipi.it/~ottavian/files/elias_fano_sigir14.pdf\" rel=\"nofollow\">Ottaviano and Venturini</a>\n(2014) regarding partitioned Elias-Fano indexes.</p>\n<p>You can use Icegrams to obtain probabilities (relative frequencies) of\nover a million different <strong>unigrams</strong> (single words or tokens), or of\n<strong>bigrams</strong> (pairs of two words or tokens), or of <strong>trigrams</strong>. You can also\nask it to return the N most likely successors to any unigram or bigram.</p>\n<p>Icegrams is useful for instance in spelling correction, predictive typing,\nto help disabled people write text faster, and for various text generation,\nstatistics and modelling tasks.</p>\n<p>Icegrams is built on the database of <a href=\"https://greynir.is\" rel=\"nofollow\">Greynir.is</a>,\ncomprising over 6 million sentences parsed from Icelandic news articles.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre>&gt;&gt;&gt; from icegrams import Ngrams\n&gt;&gt;&gt; ng = Ngrams()\n&gt;&gt;&gt; # Obtain the frequency of the unigram '\u00cdsland'\n&gt;&gt;&gt; ng.freq(\"\u00cdsland\")\n42018\n&gt;&gt;&gt; # Obtain the probability of the unigram '\u00cdsland', as a fraction\n&gt;&gt;&gt; # of the frequency of all unigrams in the database\n&gt;&gt;&gt; ng.prob(\"\u00cdsland\")\n0.0003979926900206475\n&gt;&gt;&gt; # Obtain the log probability (base e) of the unigram '\u00cdsland'\n&gt;&gt;&gt; ng.logprob(\"\u00cdsland\")\n-7.8290769196308005\n&gt;&gt;&gt; # Obtain the frequency of the bigram 'Katr\u00edn Jakobsd\u00f3ttir'\n&gt;&gt;&gt; ng.freq(\"Katr\u00edn\", \"Jakobsd\u00f3ttir\")\n3517\n&gt;&gt;&gt; # Obtain the probability of 'Jakobsd\u00f3ttir' given 'Katr\u00edn'\n&gt;&gt;&gt; ng.prob(\"Katr\u00edn\", \"Jakobsd\u00f3ttir\")\n0.23298013245033142\n&gt;&gt;&gt; # Obtain the probability of 'J\u00fal\u00edusd\u00f3ttir' given 'Katr\u00edn'\n&gt;&gt;&gt; ng.prob(\"Katr\u00edn\", \"J\u00fal\u00edusd\u00f3ttir\")\n0.013642384105960274\n&gt;&gt;&gt; # Obtain the frequency of 'velta fyrirt\u00e6kisins er'\n&gt;&gt;&gt; ng.freq(\"velta\", \"fyrirt\u00e6kisins\", \"er\")\n4\n&gt;&gt;&gt; # adj_freq returns adjusted frequencies, i.e incremented by 1\n&gt;&gt;&gt; ng.adj_freq(\"xxx\", \"yyy\", \"zzz\")\n1\n</pre>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<div id=\"initializing-icegrams\">\n<h3>Initializing Icegrams</h3>\n<p>After installing the <tt>icegrams</tt> package, use the following code to\nimport it and initialize an instance of the <tt>Ngrams</tt> class:</p>\n<pre>from icegrams import Ngrams\nng = Ngrams()\n</pre>\n<p>Now you can use the <tt>ng</tt> instance to query for unigram, bigram\nand trigram frequencies and probabilities.</p>\n</div>\n<div id=\"the-ngrams-class\">\n<h3>The Ngrams class</h3>\n<ul>\n<li><p><tt>__init__(self)</tt></p>\n<p>Initializes the <tt>Ngrams</tt> instance.</p>\n</li>\n<li><p><tt>freq(self, *args) <span class=\"pre\">-&gt;</span> int</tt></p>\n<p>Returns the frequency of a unigram, bigram or trigram.</p>\n<ul>\n<li><tt>str[] *args</tt> A parameter sequence of consecutive unigrams\nto query the frequency for.</li>\n<li><strong>returns</strong> An integer with the frequency of the unigram,\nbigram or trigram.</li>\n</ul>\n<p>To query for the frequency of a unigram in the text, call\n<tt><span class=\"pre\">ng.freq(\"unigram1\")</span></tt>. This returns the number of times that\nthe unigram appears in the database. The unigram is\nqueried as-is, i.e. with no string stripping or lowercasing.</p>\n<p>To query for the frequency of a bigram in the text, call\n<tt><span class=\"pre\">ng.freq(\"unigram1\",</span> \"unigram2\")</tt>.</p>\n<p>To query for the frequency of a trigram in the text, call\n<tt><span class=\"pre\">ng.freq(\"unigram1\",</span> \"unigram2\", \"unigram3\")</tt>.</p>\n<p>If you pass more than 3 arguments to <tt>ng.freq()</tt>, only the\nlast 3 are significant, and the query will be treated\nas a trigram query.</p>\n<p>Examples:</p>\n<pre>&gt;&gt;&gt;&gt; ng.freq(\"stj\u00f3rnarskr\u00e1\")\n2973\n&gt;&gt;&gt;&gt; ng.freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n39\n&gt;&gt;&gt;&gt; ng.freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n12\n&gt;&gt;&gt;&gt; ng.freq(\"xxx\", \"yyy\", \"zzz\")\n0\n</pre>\n</li>\n<li><p><tt>adj_freq(self, *args) <span class=\"pre\">-&gt;</span> int</tt></p>\n<p>Returns the adjusted frequency of a unigram, bigram or trigram.</p>\n<ul>\n<li><tt>str[] *args</tt> A parameter sequence of consecutive unigrams\nto query the frequency for.</li>\n<li><strong>returns</strong> An integer with the adjusted frequency of the unigram,\nbigram or trigram. The adjusted frequency is the actual\nfrequency plus 1. The method thus never returns 0.</li>\n</ul>\n<p>To query for the frequency of a unigram in the text, call\n<tt><span class=\"pre\">ng.adj_freq(\"unigram1\")</span></tt>. This returns the number of times that\nthe unigram appears in the database, plus 1. The unigram is\nqueried as-is, i.e. with no string stripping or lowercasing.</p>\n<p>To query for the frequency of a bigram in the text, call\n<tt><span class=\"pre\">ng.adj_freq(\"unigram1\",</span> \"unigram2\")</tt>.</p>\n<p>To query for the frequency of a trigram in the text, call\n<tt><span class=\"pre\">ng.adj_freq(\"unigram1\",</span> \"unigram2\", \"unigram3\")</tt>.</p>\n<p>If you pass more than 3 arguments to <tt>ng.adj_freq()</tt>, only the\nlast 3 are significant, and the query will be treated\nas a trigram query.</p>\n<p>Examples:</p>\n<pre>&gt;&gt;&gt;&gt; ng.adj_freq(\"stj\u00f3rnarskr\u00e1\")\n2974\n&gt;&gt;&gt;&gt; ng.adj_freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n40\n&gt;&gt;&gt;&gt; ng.adj_freq(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n13\n&gt;&gt;&gt;&gt; ng.adj_freq(\"xxx\", \"yyy\", \"zzz\")\n1\n</pre>\n</li>\n<li><p><tt>prob(self, *args) <span class=\"pre\">-&gt;</span> float</tt></p>\n<p>Returns the probability of a unigram, bigram or trigram.</p>\n<ul>\n<li><tt>str[] *args</tt> A parameter sequence of consecutive unigrams\nto query the probability for.</li>\n<li><strong>returns</strong> A float with the probability of the given unigram,\nbigram or trigram.</li>\n</ul>\n<p>The probability of a <em>unigram</em> is\nthe frequency of the unigram divided by the sum of the\nfrequencies of all unigrams in the database.</p>\n<p>The probability of a <em>bigram</em> <tt>(u1, u2)</tt> is the frequency\nof the bigram divided by the frequency of the unigram <tt>u1</tt>,\ni.e. how likely <tt>u2</tt> is to succeed <tt>u1</tt>.</p>\n<p>The probability of a trigram <tt>(u1, u2, u3)</tt> is the frequency\nof the trigram divided by the frequency of the bigram <tt>(u1, u2)</tt>,\ni.e. how likely <tt>u3</tt> is to succeed <tt>u1 u2</tt>.</p>\n<p>If you pass more than 3 arguments to <tt>ng.prob()</tt>, only the\nlast 3 are significant, and the query will be treated\nas a trigram probability query.</p>\n<p>Examples:</p>\n<pre>&gt;&gt;&gt;&gt; ng.prob(\"stj\u00f3rnarskr\u00e1\")\n2.8168929772755334e-05\n&gt;&gt;&gt;&gt; ng.prob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n0.01344989912575655\n&gt;&gt;&gt;&gt; ng.prob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n0.325\n</pre>\n</li>\n<li><p><tt>logprob(self, *args) <span class=\"pre\">-&gt;</span> float</tt></p>\n<p>Returns the log probability of a unigram, bigram or trigram.</p>\n<ul>\n<li><tt>str[] *args</tt> A parameter sequence of consecutive unigrams\nto query the log probability for.</li>\n<li><strong>returns</strong> A float with the natural logarithm (base <em>e</em>) of the\nprobability of the given unigram, bigram or trigram.</li>\n</ul>\n<p>The probability of a <em>unigram</em> is\nthe adjusted frequency of the unigram divided by the sum of the\nfrequencies of all unigrams in the database.</p>\n<p>The probability of a <em>bigram</em> <tt>(u1, u2)</tt> is the adjusted frequency\nof the bigram divided by the adjusted frequency of the unigram <tt>u1</tt>,\ni.e. how likely <tt>u2</tt> is to succeed <tt>u1</tt>.</p>\n<p>The probability of a trigram <tt>(u1, u2, u3)</tt> is the adjusted frequency\nof the trigram divided by the adjusted frequency of the bigram <tt>(u1, u2)</tt>,\ni.e. how likely <tt>u3</tt> is to succeed <tt>u1 u2</tt>.</p>\n<p>If you pass more than 3 arguments to <tt>ng.logprob()</tt>, only the\nlast 3 are significant, and the query will be treated\nas a trigram probability query.</p>\n<p>Examples:</p>\n<pre>&gt;&gt;&gt;&gt; ng.logprob(\"stj\u00f3rnarskr\u00e1\")\n-10.477290968535172\n&gt;&gt;&gt;&gt; ng.logprob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n-4.308783672906165\n&gt;&gt;&gt;&gt; ng.logprob(\"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n-1.1239300966523995\n</pre>\n</li>\n<li><p><tt>succ(self, n, *args) <span class=\"pre\">-&gt;</span> list[tuple]</tt></p>\n<p>Returns the <em>N</em> most probable successors of a unigram or bigram.</p>\n<ul>\n<li><tt>int n</tt> A positive integer specifying how many successors,\nat a maximum, should be returned.</li>\n<li><tt>str[] *args</tt> One or two string parameters containing the\nunigram or bigram to query the successors for.</li>\n<li><strong>returns</strong> A list of tuples of (successor unigram, log probability),\nin descending order of probability.</li>\n</ul>\n<p>If you pass more than 2 string arguments to <tt>ng.succ()</tt>, only the\nlast 2 are significant, and the query will be treated\nas a bigram successor query.</p>\n<p>Examples:</p>\n<pre>&gt;&gt;&gt;&gt; ng.succ(2, \"stj\u00f3rnarskr\u00e1\")\n[('.', -1.8259625296091855), ('landsins', -2.223111581475692)]\n&gt;&gt;&gt;&gt; ng.succ(2, \"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\")\n[('\u00cdslands', -1.1239300966523995), ('og', -1.3862943611198904)]\n&gt;&gt;&gt;&gt; # The following is equivalent to ng.succ(2, \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n&gt;&gt;&gt;&gt; ng.succ(2, \"stj\u00f3rnarskr\u00e1\", \"l\u00fd\u00f0veldisins\", \"\u00cdslands\")\n[('.', -1.3862943611198908), (',', -1.6545583477145702)]\n</pre>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>Icegrams is built with a sliding window over the source text. This means that\na sentence such as <tt>\"Ma\u00f0urinn bor\u00f0a\u00f0i \u00edsinn.\"</tt> results in the following\ntrigrams being added to the database:</p>\n<pre>(\"\", \"\", \"Ma\u00f0urinn\")\n(\"\", \"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\")\n(\"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\", \"\u00edsinn\")\n(\"bor\u00f0a\u00f0i\", \"\u00edsinn\", \".\")\n(\"\u00edsinn\", \".\", \"\")\n(\".\", \"\", \"\")\n</pre>\n<p>The same sliding window strategy is applied for bigrams, so the following\nbigrams would be recorded for the same sentence:</p>\n<pre>(\"\", \"Ma\u00f0urinn\")\n(\"Ma\u00f0urinn\", \"bor\u00f0a\u00f0i\")\n(\"bor\u00f0a\u00f0i\", \"\u00edsinn\")\n(\"\u00edsinn\", \".\")\n(\".\", \"\")\n</pre>\n<p>You can thus obtain the N unigrams that most often start\na sentence by asking for <tt>ng.succ(N, \"\")</tt>.</p>\n<p>And, of course, four unigrams are also added, one for each token in the\nsentence.</p>\n<p>The tokenization of the source text into unigrams is done with the\n<a href=\"https://pypi.org/project/tokenizer\" rel=\"nofollow\">Tokenizer package</a> and\nuses the rules documented there.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>This package runs on CPython 3.4 or newer, and on PyPy 3.5 or newer. It\nhas been tested on Linux (gcc on x86-64 and ARMhf), MacOS (clang) and\nWindows (MSVC).</p>\n<p>If a binary wheel package isn\u2019t available on <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a>\nfor your system, you may need to have the <tt><span class=\"pre\">python3-dev</span></tt> and/or potentially\n<tt><span class=\"pre\">python3.6-dev</span></tt> packages (or their Windows equivalents) installed on your\nsystem to set up Icegrams successfully. This is because a source distribution\ninstall requires a C++ compiler and linker:</p>\n<pre># Debian or Ubuntu:\nsudo apt-get install python3-dev\nsudo apt-get install python3.6-dev\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install this package:</p>\n<pre>$ pip install icegrams\n</pre>\n<p>If you want to be able to edit the source, do like so (assuming you have <strong>git</strong> installed):</p>\n<pre>$ git clone https://github.com/mideind/Icegrams\n$ cd Icegrams\n$ # [ Activate your virtualenv here if you have one ]\n$ python setup.py develop\n</pre>\n<p>The package source code is now in <tt>./src/icegrams</tt>.</p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run the built-in tests, install <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>,\n<tt>cd</tt> to your <tt>Icegrams</tt> subdirectory (and optionally activate your\nvirtualenv), then run:</p>\n<pre>$ python -m pytest\n</pre>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<ul>\n<li>Version 0.5.0: Trigrams corpus has been spell-checked</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6312758, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "07178098be170fc1aa4c3d6e8e7e4fbc", "sha256": "e26cefed3d85af69daa34095327b49b8a85c7ca53af5f7226b41ca2f74d12a48"}, "downloads": -1, "filename": "icegrams-0.1.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "07178098be170fc1aa4c3d6e8e7e4fbc", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 60943, "upload_time": "2019-03-08T17:48:18", "upload_time_iso_8601": "2019-03-08T17:48:18.021088Z", "url": "https://files.pythonhosted.org/packages/6f/6a/9af73f1ec5d9996c83651710282bbf4ba56d52638c610c007ec516fd1d2f/icegrams-0.1.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8955501bba574baa24c7d1b84fef1a94", "sha256": "9d86e5702fa81754a8a542bc75f718b400ed060b153bbba772618e5528c3f738"}, "downloads": -1, "filename": "icegrams-0.1.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8955501bba574baa24c7d1b84fef1a94", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 60943, "upload_time": "2019-03-08T17:48:20", "upload_time_iso_8601": "2019-03-08T17:48:20.341645Z", "url": "https://files.pythonhosted.org/packages/3e/04/8b4a970bbaa62300551267236b10db2fdd26067f7a50ed366431e316ff07/icegrams-0.1.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7113b374b2b2e838d6382139f74d8c64", "sha256": "78dccce715c0b7148d155d5f7aa1d1eb8a43f0ab4ce34a3f0e2e659fa1407b14"}, "downloads": -1, "filename": "icegrams-0.1.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7113b374b2b2e838d6382139f74d8c64", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 60945, "upload_time": "2019-03-08T17:48:21", "upload_time_iso_8601": "2019-03-08T17:48:21.919123Z", "url": "https://files.pythonhosted.org/packages/41/bd/33d719271ea7f9f92f1f3f0404520dc877aaac98135860f91466c6fc5220/icegrams-0.1.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "005a97782cbcf3d939cf898b5522cf46", "sha256": "271469ac8582072a412d6781a5cdbe10abc5e38b859ee1528e45495a1dd5c78a"}, "downloads": -1, "filename": "icegrams-0.1.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "005a97782cbcf3d939cf898b5522cf46", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 60930, "upload_time": "2019-03-08T17:48:23", "upload_time_iso_8601": "2019-03-08T17:48:23.396242Z", "url": "https://files.pythonhosted.org/packages/f7/cf/23fcc2b1ee1a2c7252eaf85a142c775ede12a63dab9c8cae46f63a661094/icegrams-0.1.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "677f1e348aa4ddc177161cd7fe674242", "sha256": "c5561fd00241ed97d4d52bc6c5de59c6d45a74002c206fca13d8027c990e9f2b"}, "downloads": -1, "filename": "icegrams-0.1.0.tar.gz", "has_sig": false, "md5_digest": "677f1e348aa4ddc177161cd7fe674242", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33990, "upload_time": "2019-03-08T17:48:24", "upload_time_iso_8601": "2019-03-08T17:48:24.983715Z", "url": "https://files.pythonhosted.org/packages/40/04/a2cc151a9f085b7a2379a092bdc96d37747f4dd555901472e2fc77e614bc/icegrams-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8d404a4a70a2702cafae2e9a338cafbe", "sha256": "85fde2ebc2383fd1a4f725e9d42ecdf08f2c48028a8a27aadaa093385f266cdd"}, "downloads": -1, "filename": "icegrams-0.2.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8d404a4a70a2702cafae2e9a338cafbe", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 84255681, "upload_time": "2019-03-11T16:05:36", "upload_time_iso_8601": "2019-03-11T16:05:36.223128Z", "url": "https://files.pythonhosted.org/packages/8d/eb/9e92bc2fc05cd8763b98b158f2e7890ac0e6bbb23771bb0817bcc4b41fe9/icegrams-0.2.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d1a1af15a1baacab2cb9ebebc304cf9", "sha256": "0fcfe12e8a87ea50b1ad841ce04043db77177b35185bb8442280987cb2c5d089"}, "downloads": -1, "filename": "icegrams-0.2.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8d1a1af15a1baacab2cb9ebebc304cf9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 84255677, "upload_time": "2019-03-11T16:05:51", "upload_time_iso_8601": "2019-03-11T16:05:51.392420Z", "url": "https://files.pythonhosted.org/packages/a5/f9/0de576e5f9de850c998ec4845ca58cd554331a73bc01d98a04e161c10bd2/icegrams-0.2.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6627d400009231c4e7541f4b023192a8", "sha256": "0c45eee236ba6288c8f717e7ac33879a3a45b840f9d919ecfaa4109da61388f3"}, "downloads": -1, "filename": "icegrams-0.2.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "6627d400009231c4e7541f4b023192a8", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 84255673, "upload_time": "2019-03-11T16:06:07", "upload_time_iso_8601": "2019-03-11T16:06:07.515423Z", "url": "https://files.pythonhosted.org/packages/0e/05/80bb10ccd5a0d0cbdcd7f8a6f985e13505beae62aec8028c1e8a25a64b47/icegrams-0.2.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "33b85dc442acdf20fc83c8d2e13a7a32", "sha256": "2a3d6733a7c56c143acad2a4a399e4cd0b018fe880a3948aca3c3d15cf70e7fd"}, "downloads": -1, "filename": "icegrams-0.2.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "33b85dc442acdf20fc83c8d2e13a7a32", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 84255670, "upload_time": "2019-03-11T16:06:22", "upload_time_iso_8601": "2019-03-11T16:06:22.800316Z", "url": "https://files.pythonhosted.org/packages/03/f0/d3f8c178d959061e83f6c3c0302606f76efd15ef6596e948f158bc503395/icegrams-0.2.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dd658f937946a9bdb1667c39c166034", "sha256": "b07feeb0ee86c16f50c8ca11af2a5fc36eeb40964235a04441a6f6a308d4ce09"}, "downloads": -1, "filename": "icegrams-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1dd658f937946a9bdb1667c39c166034", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84081439, "upload_time": "2019-03-11T16:06:38", "upload_time_iso_8601": "2019-03-11T16:06:38.205914Z", "url": "https://files.pythonhosted.org/packages/51/e0/fba6c5589c05277290b50f00fb2942a12fe2926e6ceb6602102c9051ae0a/icegrams-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ab92788a999f822e1fbad300dbcc1204", "sha256": "cdc5af10d7c28138e766870c90e045ba953939b08b20f97aa48ede1ff2135083"}, "downloads": -1, "filename": "icegrams-0.3.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ab92788a999f822e1fbad300dbcc1204", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 84261063, "upload_time": "2019-03-20T18:16:27", "upload_time_iso_8601": "2019-03-20T18:16:27.684179Z", "url": "https://files.pythonhosted.org/packages/1c/29/d317150629e043ad99aa47ca515c7ac21e2d11301bb198b01d6feab3a295/icegrams-0.3.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af3afd44ffd1cb26436cbbde8d6d730a", "sha256": "ada6d6b16d6f16f29b2a8e7fbda0012d52ae6bcfbc4f0ad2f8b9de34c592d34d"}, "downloads": -1, "filename": "icegrams-0.3.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "af3afd44ffd1cb26436cbbde8d6d730a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 84261074, "upload_time": "2019-03-20T18:16:42", "upload_time_iso_8601": "2019-03-20T18:16:42.818095Z", "url": "https://files.pythonhosted.org/packages/39/23/05688253d25a664971353713834b4028359f14e22c2419d7c942594e6dd5/icegrams-0.3.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "529a390b1cd1a7f7f274b3241606d9e5", "sha256": "8ff07d84b71b04deac5fbc0f8956d3eb85854320f40715c91809ea2412217653"}, "downloads": -1, "filename": "icegrams-0.3.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "529a390b1cd1a7f7f274b3241606d9e5", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 84261069, "upload_time": "2019-03-20T18:16:58", "upload_time_iso_8601": "2019-03-20T18:16:58.206688Z", "url": "https://files.pythonhosted.org/packages/b6/8d/eca195176ff5022ff60ee8c027d5457524653703a24c25013c98ecdf056c/icegrams-0.3.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "723d3578a51e5449e3e1251b39e5359a", "sha256": "15f1889b782b4634f2f310e6a4f5c05c26b4c1cdecf5f01772675605b6f454e9"}, "downloads": -1, "filename": "icegrams-0.3.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "723d3578a51e5449e3e1251b39e5359a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 84261057, "upload_time": "2019-03-20T18:17:13", "upload_time_iso_8601": "2019-03-20T18:17:13.054617Z", "url": "https://files.pythonhosted.org/packages/f5/1e/41b387df512ed41b80f005e5d41a97d7cb45aa5b746d87dfcfbc286bba67/icegrams-0.3.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0434884d01cc4e7442401effd3b5acfa", "sha256": "40b992532cd67fa3facf19a4bcfaf03ae425013481fd929283cede655af8345e"}, "downloads": -1, "filename": "icegrams-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0434884d01cc4e7442401effd3b5acfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84079339, "upload_time": "2019-03-20T18:17:30", "upload_time_iso_8601": "2019-03-20T18:17:30.958783Z", "url": "https://files.pythonhosted.org/packages/8f/4a/1a2ed12a3b1fa85e53ef2deb16f3ecaa88cfc137c97de2ab39f2b3dc583e/icegrams-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0eefa830c8d1b07a82951f276b618b5d", "sha256": "3efed032467c1098ea1e13e0808c4010306bee95d8a035796c0dd49f3509a230"}, "downloads": -1, "filename": "icegrams-0.4.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "0eefa830c8d1b07a82951f276b618b5d", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 84260874, "upload_time": "2019-05-03T15:08:19", "upload_time_iso_8601": "2019-05-03T15:08:19.518165Z", "url": "https://files.pythonhosted.org/packages/ae/12/bfb48b2023e8db2fc31bf523cf315ab16d48da46241d621f1e07aba74aad/icegrams-0.4.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a62314579d7204fbc310018e496f80e", "sha256": "269562a338e05ca6c748b28302d3cf737d4106a00c07a5849a5deca6e106b2fa"}, "downloads": -1, "filename": "icegrams-0.4.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4a62314579d7204fbc310018e496f80e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 84260872, "upload_time": "2019-05-03T15:12:13", "upload_time_iso_8601": "2019-05-03T15:12:13.389910Z", "url": "https://files.pythonhosted.org/packages/e1/83/083f971b32c19c40fc862d9b567d16485b076b716412fa8296659ed6d114/icegrams-0.4.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eee4394a727722af4a0fc664aeebeece", "sha256": "3c3e5f038d5f4c6d3346060569b8f3e7035c60bad006a7e584ba7e010c2a4803"}, "downloads": -1, "filename": "icegrams-0.4.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "eee4394a727722af4a0fc664aeebeece", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 84260884, "upload_time": "2019-05-03T15:14:39", "upload_time_iso_8601": "2019-05-03T15:14:39.073808Z", "url": "https://files.pythonhosted.org/packages/55/85/ee7d656d098b544502fb255fc520993da2fc9e4db337c1d4e57f7be98daf/icegrams-0.4.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bf4020a37147981e191db3de649ac7a", "sha256": "c48d0be5bc89d0d4113975bb21285bae0e377319157fe56c76b017ec2bee49e9"}, "downloads": -1, "filename": "icegrams-0.4.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8bf4020a37147981e191db3de649ac7a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 84260872, "upload_time": "2019-05-03T15:15:58", "upload_time_iso_8601": "2019-05-03T15:15:58.321626Z", "url": "https://files.pythonhosted.org/packages/dd/58/12c5e431f5fc9c2ece86b6327014db3437001f99001f936b653f0a32099f/icegrams-0.4.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39f8293c8729b915c2bc315e3816d0b0", "sha256": "0b2f86eb1e4dde65024f5c1d0b0c4be4f2e57eca745ee884caeab6d68e26bafe"}, "downloads": -1, "filename": "icegrams-0.4.0.tar.gz", "has_sig": false, "md5_digest": "39f8293c8729b915c2bc315e3816d0b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84079274, "upload_time": "2019-05-03T15:17:19", "upload_time_iso_8601": "2019-05-03T15:17:19.690991Z", "url": "https://files.pythonhosted.org/packages/d1/6a/befe94bb464ff014b3008e5ab5fa5ee7680ac280a09e83d9fab45376391a/icegrams-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "cc0d6664b29353e67ad4d8cd954aa348", "sha256": "65a09871a040333e9d18cfd5fb1b64550e4fc6fa8e1ad2fe17868b1e14678591"}, "downloads": -1, "filename": "icegrams-0.5.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "cc0d6664b29353e67ad4d8cd954aa348", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 83895381, "upload_time": "2019-12-16T18:16:27", "upload_time_iso_8601": "2019-12-16T18:16:27.830969Z", "url": "https://files.pythonhosted.org/packages/17/7a/df9d5280d67ced46c4d825cefb324a20481ad25be712218cd2913d4966b5/icegrams-0.5.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c2ab7736381c7efc4ad4c7e10deab4e", "sha256": "8410740d5680779cd55fa8982441e3e7059272915d1f660bdad348a21c086c66"}, "downloads": -1, "filename": "icegrams-0.5.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7c2ab7736381c7efc4ad4c7e10deab4e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 83895375, "upload_time": "2019-12-16T18:16:43", "upload_time_iso_8601": "2019-12-16T18:16:43.697271Z", "url": "https://files.pythonhosted.org/packages/7c/70/15f11b5e260143470c8ce9ab316a999b0c37a20ca3e0caa6d890150ff50e/icegrams-0.5.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "238b5d69c50eadb7f59a1b5f7d309ca1", "sha256": "80be343b6d01f57ed172fda2c91355b838d1effec4a88e398a13795eb5b6b277"}, "downloads": -1, "filename": "icegrams-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "238b5d69c50eadb7f59a1b5f7d309ca1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 83895393, "upload_time": "2019-12-16T18:17:00", "upload_time_iso_8601": "2019-12-16T18:17:00.507395Z", "url": "https://files.pythonhosted.org/packages/68/1f/716c0638cad173ed27272fc038587a1dba1d6d5698bb045c12a6f8885b79/icegrams-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02a79a0d2218bb2531b52b6c173293d2", "sha256": "5c42c35c2c0693fcefdb58baeb2f23556d6efd31e7cf31a6aaf5409549cc8553"}, "downloads": -1, "filename": "icegrams-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "02a79a0d2218bb2531b52b6c173293d2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 83895381, "upload_time": "2019-12-16T18:17:23", "upload_time_iso_8601": "2019-12-16T18:17:23.056033Z", "url": "https://files.pythonhosted.org/packages/0b/a5/e30fa625af8233ddfaa10ae3cd5b4d21f8ab073f77ed94ce0dd71642bd47/icegrams-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "829ad568c30043beab74a56f7bbe2f09", "sha256": "d77cff8b6266d96ab54b5f816592b79e573cb63c1d0abd8f0120feab9753618c"}, "downloads": -1, "filename": "icegrams-0.5.0.tar.gz", "has_sig": false, "md5_digest": "829ad568c30043beab74a56f7bbe2f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83716126, "upload_time": "2019-12-16T18:17:40", "upload_time_iso_8601": "2019-12-16T18:17:40.060897Z", "url": "https://files.pythonhosted.org/packages/f9/36/0864e46651a3e552ffe0fe265957fbb0621d9af0f04390c7b48dfc55e33a/icegrams-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cc0d6664b29353e67ad4d8cd954aa348", "sha256": "65a09871a040333e9d18cfd5fb1b64550e4fc6fa8e1ad2fe17868b1e14678591"}, "downloads": -1, "filename": "icegrams-0.5.0-cp34-cp34m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "cc0d6664b29353e67ad4d8cd954aa348", "packagetype": "bdist_wheel", "python_version": "cp34", "requires_python": null, "size": 83895381, "upload_time": "2019-12-16T18:16:27", "upload_time_iso_8601": "2019-12-16T18:16:27.830969Z", "url": "https://files.pythonhosted.org/packages/17/7a/df9d5280d67ced46c4d825cefb324a20481ad25be712218cd2913d4966b5/icegrams-0.5.0-cp34-cp34m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c2ab7736381c7efc4ad4c7e10deab4e", "sha256": "8410740d5680779cd55fa8982441e3e7059272915d1f660bdad348a21c086c66"}, "downloads": -1, "filename": "icegrams-0.5.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "7c2ab7736381c7efc4ad4c7e10deab4e", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 83895375, "upload_time": "2019-12-16T18:16:43", "upload_time_iso_8601": "2019-12-16T18:16:43.697271Z", "url": "https://files.pythonhosted.org/packages/7c/70/15f11b5e260143470c8ce9ab316a999b0c37a20ca3e0caa6d890150ff50e/icegrams-0.5.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "238b5d69c50eadb7f59a1b5f7d309ca1", "sha256": "80be343b6d01f57ed172fda2c91355b838d1effec4a88e398a13795eb5b6b277"}, "downloads": -1, "filename": "icegrams-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "238b5d69c50eadb7f59a1b5f7d309ca1", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 83895393, "upload_time": "2019-12-16T18:17:00", "upload_time_iso_8601": "2019-12-16T18:17:00.507395Z", "url": "https://files.pythonhosted.org/packages/68/1f/716c0638cad173ed27272fc038587a1dba1d6d5698bb045c12a6f8885b79/icegrams-0.5.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02a79a0d2218bb2531b52b6c173293d2", "sha256": "5c42c35c2c0693fcefdb58baeb2f23556d6efd31e7cf31a6aaf5409549cc8553"}, "downloads": -1, "filename": "icegrams-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "02a79a0d2218bb2531b52b6c173293d2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 83895381, "upload_time": "2019-12-16T18:17:23", "upload_time_iso_8601": "2019-12-16T18:17:23.056033Z", "url": "https://files.pythonhosted.org/packages/0b/a5/e30fa625af8233ddfaa10ae3cd5b4d21f8ab073f77ed94ce0dd71642bd47/icegrams-0.5.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "829ad568c30043beab74a56f7bbe2f09", "sha256": "d77cff8b6266d96ab54b5f816592b79e573cb63c1d0abd8f0120feab9753618c"}, "downloads": -1, "filename": "icegrams-0.5.0.tar.gz", "has_sig": false, "md5_digest": "829ad568c30043beab74a56f7bbe2f09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83716126, "upload_time": "2019-12-16T18:17:40", "upload_time_iso_8601": "2019-12-16T18:17:40.060897Z", "url": "https://files.pythonhosted.org/packages/f9/36/0864e46651a3e552ffe0fe265957fbb0621d9af0f04390c7b48dfc55e33a/icegrams-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:06 2020"}