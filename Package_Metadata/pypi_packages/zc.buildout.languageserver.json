{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "A [Language Server](https://microsoft.github.io/language-server-protocol/) for [zc.buildout](http://www.buildout.org/).\n\nThis language server is implemented using [pygls](https://github.com/openlawlibrary/pygls).\n\n# Installation\n\n## Standalone\n\nNeeds a python >= 3.6.\n\n```bash\npython -m pip install zc.buildout.languageserver\n```\n\nThen configure your editor to run `buildoutls` ( or `python3 -m buildoutls` ).\n\n## From vscode extension\n\nOn activation, the extension automatically installs the extension on the python configured in the extension preferences.\n\nThe automatic installation does not seem to work with theia and the python egg has to be installed beforehand.\n\n# Features\n\n## Completions\n\n- `${` complete sections.\n- `${section:` complete `section`'s options. If `section` uses a known recipe, dynamic options from the recipe are also completed.\n- `${buildout:extends}` completes filenames.\n- `${buildout:parts}` and `<=` option completes parts.\n\n## Diagnostics\n\n- non existant section and options in `${section:option}` references.\n- required options not defined for a a few \"known recipes\".\n\n## Symbols\n\n- Sections and options are shown are displayed in outline as symbols.\n\n## Links\n\n- `${buildout:extends}` are links.\n\n## Go to definitions\n\n- from `${section:options}` we can go to the location where `option` is defined in `section`, or to `section` header if it's not defined.\n- from `<= section` we can go to `section`.\n- from `${buildout:extends}` we can go to the extended profile.\n\n## Hover\n\n- Hover on an option show the option value.\n\n## Find references\n\n- Find references of the current symbol. A bit simple, it only look for references and does not check if profiles really `extends` each other. It does not look in templates either.\n\n## Template support\n\n- \"current\" buildout profile is guessed, then completions and diagnostics should work on any files.\n\n## Jinja2 support\n\n- Jinja syntax is syntax highlighted and jinja syntax markers are ignored when parsing buildout.\n\n## SlapOS support\n\n- SlapOS instance buildout (ie. buildout generated by buildout) is understood, `${` and `$${` are treated separatly for completions and diagnostics.\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog][keepachangelog],\nand this project adheres to [Semantic Versioning][semver].\n\n## [0.2.1] - 2020-04-25\n\n### Fixed\n\n- references: consider listing a section in `${buildout:parts}` as a reference.\n- completions: use `textEdit` to properly overwrite exiting text.\n- all: debounce protocol functions to accept cancellations.\n- all: fix errors when opening profiles outside of workspace.\n\n## [0.2.0] - 2020-02-12\n\n### Added:\n\n- support running with buildout < 2.9.3\n- initial support of `instance.cfg` defined using `slapos.recipe.template:jinja2`\n\n### Fixed\n\n- fixed broken v0.1.1 release, it could not be installed from pypi.\n- diagnostics: prevent \"missing required options\" false positive on sections used only as macros.\n- diagnostic: Correctly analyze sections with `.` or `-` in their names\n- diagnostic: Fix false positives on `${buildout:parts}` with extended sections\n- diagnostic: Fix false positives on `${buildout:parts}` when dynamically adding parts with jinja.\n\n## [0.1.1] - 2020-01-30\n\n### Added\n\n- definitions: paths from `${buildout:extends}` can also be opened with jump to definition.\n- completions: fix insertText with `-`.\n- diagnostics: detect missing non existant sections listed in `${buildout:parts}`.\n- diagnostics: detect sections without recipe listed in `${buildout:parts}`.\n\n## 0.1.0 - 2020-01-04\n\n- Initial Version\n\n[keepachangelog]: https://keepachangelog.com/en/1.0.0/\n[semver]: https://semver.org/spec/v2.0.0.html\n[0.1.1]: https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.1.0...v0.1.1\n[0.2.0]: https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.1.1...v0.2.0\n[0.2.1]: https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.2.0...v0.2.1", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "zc.buildout languageserver", "license": "", "maintainer": "", "maintainer_email": "", "name": "zc.buildout.languageserver", "package_url": "https://pypi.org/project/zc.buildout.languageserver/", "platform": "", "project_url": "https://pypi.org/project/zc.buildout.languageserver/", "project_urls": null, "release_url": "https://pypi.org/project/zc.buildout.languageserver/0.2.1/", "requires_dist": null, "requires_python": ">=3.6.*", "summary": "A language server for zc.buildout", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A <a href=\"https://microsoft.github.io/language-server-protocol/\" rel=\"nofollow\">Language Server</a> for <a href=\"http://www.buildout.org/\" rel=\"nofollow\">zc.buildout</a>.</p>\n<p>This language server is implemented using <a href=\"https://github.com/openlawlibrary/pygls\" rel=\"nofollow\">pygls</a>.</p>\n<h1>Installation</h1>\n<h2>Standalone</h2>\n<p>Needs a python &gt;= 3.6.</p>\n<pre>python -m pip install zc.buildout.languageserver\n</pre>\n<p>Then configure your editor to run <code>buildoutls</code> ( or <code>python3 -m buildoutls</code> ).</p>\n<h2>From vscode extension</h2>\n<p>On activation, the extension automatically installs the extension on the python configured in the extension preferences.</p>\n<p>The automatic installation does not seem to work with theia and the python egg has to be installed beforehand.</p>\n<h1>Features</h1>\n<h2>Completions</h2>\n<ul>\n<li><code>${</code> complete sections.</li>\n<li><code>${section:</code> complete <code>section</code>'s options. If <code>section</code> uses a known recipe, dynamic options from the recipe are also completed.</li>\n<li><code>${buildout:extends}</code> completes filenames.</li>\n<li><code>${buildout:parts}</code> and <code>&lt;=</code> option completes parts.</li>\n</ul>\n<h2>Diagnostics</h2>\n<ul>\n<li>non existant section and options in <code>${section:option}</code> references.</li>\n<li>required options not defined for a a few \"known recipes\".</li>\n</ul>\n<h2>Symbols</h2>\n<ul>\n<li>Sections and options are shown are displayed in outline as symbols.</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li><code>${buildout:extends}</code> are links.</li>\n</ul>\n<h2>Go to definitions</h2>\n<ul>\n<li>from <code>${section:options}</code> we can go to the location where <code>option</code> is defined in <code>section</code>, or to <code>section</code> header if it's not defined.</li>\n<li>from <code>&lt;= section</code> we can go to <code>section</code>.</li>\n<li>from <code>${buildout:extends}</code> we can go to the extended profile.</li>\n</ul>\n<h2>Hover</h2>\n<ul>\n<li>Hover on an option show the option value.</li>\n</ul>\n<h2>Find references</h2>\n<ul>\n<li>Find references of the current symbol. A bit simple, it only look for references and does not check if profiles really <code>extends</code> each other. It does not look in templates either.</li>\n</ul>\n<h2>Template support</h2>\n<ul>\n<li>\"current\" buildout profile is guessed, then completions and diagnostics should work on any files.</li>\n</ul>\n<h2>Jinja2 support</h2>\n<ul>\n<li>Jinja syntax is syntax highlighted and jinja syntax markers are ignored when parsing buildout.</li>\n</ul>\n<h2>SlapOS support</h2>\n<ul>\n<li>SlapOS instance buildout (ie. buildout generated by buildout) is understood, <code>${</code> and <code>$${</code> are treated separatly for completions and diagnostics.</li>\n</ul>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>,\nand this project adheres to <a href=\"https://semver.org/spec/v2.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>.</p>\n<h2><a href=\"https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.2.0...v0.2.1\" rel=\"nofollow\">0.2.1</a> - 2020-04-25</h2>\n<h3>Fixed</h3>\n<ul>\n<li>references: consider listing a section in <code>${buildout:parts}</code> as a reference.</li>\n<li>completions: use <code>textEdit</code> to properly overwrite exiting text.</li>\n<li>all: debounce protocol functions to accept cancellations.</li>\n<li>all: fix errors when opening profiles outside of workspace.</li>\n</ul>\n<h2><a href=\"https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.1.1...v0.2.0\" rel=\"nofollow\">0.2.0</a> - 2020-02-12</h2>\n<h3>Added:</h3>\n<ul>\n<li>support running with buildout &lt; 2.9.3</li>\n<li>initial support of <code>instance.cfg</code> defined using <code>slapos.recipe.template:jinja2</code></li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>fixed broken v0.1.1 release, it could not be installed from pypi.</li>\n<li>diagnostics: prevent \"missing required options\" false positive on sections used only as macros.</li>\n<li>diagnostic: Correctly analyze sections with <code>.</code> or <code>-</code> in their names</li>\n<li>diagnostic: Fix false positives on <code>${buildout:parts}</code> with extended sections</li>\n<li>diagnostic: Fix false positives on <code>${buildout:parts}</code> when dynamically adding parts with jinja.</li>\n</ul>\n<h2><a href=\"https://github.com/perrinjerome/vscode-zc-buildout/compare/v0.1.0...v0.1.1\" rel=\"nofollow\">0.1.1</a> - 2020-01-30</h2>\n<h3>Added</h3>\n<ul>\n<li>definitions: paths from <code>${buildout:extends}</code> can also be opened with jump to definition.</li>\n<li>completions: fix insertText with <code>-</code>.</li>\n<li>diagnostics: detect missing non existant sections listed in <code>${buildout:parts}</code>.</li>\n<li>diagnostics: detect sections without recipe listed in <code>${buildout:parts}</code>.</li>\n</ul>\n<h2>0.1.0 - 2020-01-04</h2>\n<ul>\n<li>Initial Version</li>\n</ul>\n\n          </div>"}, "last_serial": 7104021, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9ae4a050aaf9088d04f82cf8bd825c13", "sha256": "d2ad4759a7a46850d3073bd37313ce41120d06f9912606e866d1b0d53fe2ecae"}, "downloads": -1, "filename": "zc.buildout.languageserver-0.1.0.tar.gz", "has_sig": true, "md5_digest": "9ae4a050aaf9088d04f82cf8bd825c13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 24901, "upload_time": "2020-01-08T01:04:20", "upload_time_iso_8601": "2020-01-08T01:04:20.427204Z", "url": "https://files.pythonhosted.org/packages/29/7d/e3bc4dadeb1178093b08fd040f436d55822a1fa743f1c471e241a2310f10/zc.buildout.languageserver-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "92f51ea2081ace7ab12d6df40673b482", "sha256": "05895d0b99d5e53d81601f2a9a5305fe030f3e909adbc3db4ebec9b50cba8624"}, "downloads": -1, "filename": "zc.buildout.languageserver-0.1.1.tar.gz", "has_sig": true, "md5_digest": "92f51ea2081ace7ab12d6df40673b482", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 25904, "upload_time": "2020-01-30T00:21:30", "upload_time_iso_8601": "2020-01-30T00:21:30.502824Z", "url": "https://files.pythonhosted.org/packages/18/23/5ec4e02c9c298ee37c5e51443d3b993098ac118498b92c30e034791c779d/zc.buildout.languageserver-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4203f7e0b3a0de0e531fa5f534405564", "sha256": "513583954a0ece841b1d681e0981e953346cf4a4297b9aa802f6678bc40382a1"}, "downloads": -1, "filename": "zc.buildout.languageserver-0.2.0.tar.gz", "has_sig": true, "md5_digest": "4203f7e0b3a0de0e531fa5f534405564", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 29872, "upload_time": "2020-02-12T11:36:04", "upload_time_iso_8601": "2020-02-12T11:36:04.429320Z", "url": "https://files.pythonhosted.org/packages/e7/63/6a2f8528a47d0349f2b02ec27b2dde4b9b9e58b2207be3673c9daf58aee0/zc.buildout.languageserver-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "007ef4722dca7d93f3993ec41d2aab46", "sha256": "202ce7d96c84ac64ea2ca8972f133e5445d6c8713c3be67e889a1d0b34f32e6a"}, "downloads": -1, "filename": "zc.buildout.languageserver-0.2.1.tar.gz", "has_sig": true, "md5_digest": "007ef4722dca7d93f3993ec41d2aab46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 30633, "upload_time": "2020-04-26T10:04:23", "upload_time_iso_8601": "2020-04-26T10:04:23.773386Z", "url": "https://files.pythonhosted.org/packages/dd/6b/0ed5d56c0cbf73da81e5ba1d724b5bcd0e38e63d5c772a7ca223fa93ba4b/zc.buildout.languageserver-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "007ef4722dca7d93f3993ec41d2aab46", "sha256": "202ce7d96c84ac64ea2ca8972f133e5445d6c8713c3be67e889a1d0b34f32e6a"}, "downloads": -1, "filename": "zc.buildout.languageserver-0.2.1.tar.gz", "has_sig": true, "md5_digest": "007ef4722dca7d93f3993ec41d2aab46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.*", "size": 30633, "upload_time": "2020-04-26T10:04:23", "upload_time_iso_8601": "2020-04-26T10:04:23.773386Z", "url": "https://files.pythonhosted.org/packages/dd/6b/0ed5d56c0cbf73da81e5ba1d724b5bcd0e38e63d5c772a7ca223fa93ba4b/zc.buildout.languageserver-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:26 2020"}