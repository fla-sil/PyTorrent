{"info": {"author": "#0K Srinivasan Ramachandran", "author_email": "ashok.srinivasan2002@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "chenhancc\n==============\n\nA Fast geodesic algorithm in python that spans across the surface through the polygons\n\n<p>\n\t<img src=\"https://raw.githubusercontent.com/aalavandhaann/chenhan_cython/master/images/Dog.jpg\" height=\"200\"><img src=\"https://raw.githubusercontent.com/aalavandhaann/chenhan_cython/master/images/Cat.jpg\" height=\"200\"><img src=\"https://raw.githubusercontent.com/aalavandhaann/chenhan_cython/master/images/Man.jpg\" height=\"200\">\n</p>\n<p>\n\nMany Thanks\n-----------\n\nThe original c++ source code was provided to me by Dr. Xin Shiqing (https://sites.google.com/site/xinshiqing/). My sincere thanks to him for his help\n\nThe algorithm is purely based on the paper of Shiqing who provided me with this wonderful c++ code as well. All I had to do was make some changes so it can be compiled as a python library. The timing or efficiency difference between the pure python implementation and c++ -> python conversion is atleast 210x times. \n</>\n\n```\nXin SQ, Wang GJ. Improving Chen and Han's algorithm on the discrete geodesic problem. ACM Transactions on Graphics (TOG). 2009 Aug 1;28(4):104.\n```\n\n\n# chenhan_cython\nUsing cython instead of PyBind11 generated by Binder. Rather straightforward. I am giving up on Binder to generate the pybind11 binding code for Windows. This attempt is to create PXD files and use autowrap to generate the PYX files. Looks promising so far. \n\nInstallation\n------------\n\n**Python Package Manager (PIP)**\n\n- ```pip install py_chenhancc --user``` or\n- ```sudo pip install py_chenhancc``` (You need administration privileges)\n\n**Easy Install**\n\n```easy_install --prefix $HOME/.local``` This is for ubuntu \n\n\n**Prerequesties**\n\n- This code is compiled using cython and autowrap module to generate PYX files. There is no need to generate the PYX files yourself. It has been generated already for Windows and GCC systems\n\n\t*[Github link for autowrap](https://github.com/uweschmitt/autowrap).\n\n\n**On any OS (Linux, OS X, MAC, Windows)**\n\n - You can install using PIP\n - Do ```pip install py_chenhancc```\n\nISSUES\n------\n- Unix systems - Using pip install ```pip install py_chenhancc``` it would fail saying the command gcc failed with the compilation because of blah blah reason. I got it to work by exporting ```export CC=x86_64-linux-gnu-g++```\n- Next if you notice it still fails after setting the above step ensure you have gcc version 4.9 atleast. Looks like gcc 4.8 is annoyed with std=c++14 flag in the compiler options. These two steps should figure you out.\n- Windows and Macintosh systems - I am finding it difficult to get my hands on a macintosh machine. Will soon test it and update all of you with what is necessary. If someone is kind enough to lend me a hand then please. \n\n\nLicense\n-------\n\nI haven't thought about it yet. The world is so strange that even free stuffs come at a cost. Did you notice that even for free licenses there are many variants to it? Anyways feel free to do things you want to after cloning the repository. \n\nDemos\n---------\n\nIf you want to perform demos as shown in the screenshots above. Then after installing the sharedobject for chenhancc you should be also install another Blender plugin to see live paths on meshes. The link to the repository is [here](https://github.com/aalavandhaann/ch_bl_geodesics). Once you have installed the plugin then start clicking on the meshes and see paths between consecutive clicks. \n\n\nDemos - Blender\n-------------------\n\nYou will find <b>blender</b> folder inside the <b>demo</b> folder. There is a blend file that can test a mesh loaded in the scene. Just ensure to load a mesh, select it with mouse and run the script `(Alt-p)`. You should see a path between the selected vertices as supplied in the code in the text editor of Blender. In the below code change the `svid` and `evid` to change the vertex selection. `svid` is the seed vertex index, and `evid` is the target vertex index to which a path should be found. \n\n```\n#Replace the below Blender api imports with the framework of your choice. \n#The idea is to supply points, and face information for mesh representation\n#inside the geodesics algorithm\n\n#----------Blender based api modules import----------------\nimport bpy, bmesh;\nfrom mathutils import Vector;\n#----------End of Blender based api modules import----------------\n\nfrom py_chenhancc import CBaseModel as BaseModel, CRichModel as RichModel, CPoint3D as Point3D, CFace as Face, CICHWithFurtherPriorityQueue as ICHWithFurtherPriorityQueue;\n\n\nc = bpy.context;\nm = c.active_object;\nsvid = 0;\nevid = 20000;\n\ndef rotate(l, n):\n    return l[n:] + l[:n];\n\ndef createPathMesh(points):\n    myvertexlist = [[2,2,2],[4,4,4],[6,6,6],[8,8,8]]\n    \n    obName = \"path_\"+str(len(points));\n    me = bpy.data.meshes.new(obName);\n    ob = bpy.data.objects.new(obName, me);\n\n    # Get a BMesh representation\n    bm = bmesh.new();   # create an empty BMesh\n    bm.from_mesh(me);   # fill it in from a Mesh\n\n    # Modify the BMesh, can do anything here...\n    for index, co in enumerate(points):\n        v = bm.verts.new(co);\n        v.index = index;\n        \n    bm.verts.ensure_lookup_table();\n    \n    for index, co in enumerate(points[1:]):\n        v1 = bm.verts[index-1];\n        v2 = bm.verts[index];\n        e = bm.edges.new((v1, v2));\n        \n    \n    # also add bm.edges and bm.faces\n\n    # Finish up, write the bmesh back to the mesh\n    bm.to_mesh(me);\n    bm.free();  # free and prevent further access\n    \n    scn = bpy.context.scene;\n    scn.objects.link(ob);\n    scn.objects.active = ob;\n    ob.select = True;\n\n\nif(m):\n    verts = [];\n    faces = [];\n    loops = m.data.loops;\n    \n    bmodel = RichModel();\n    \n    m.data.vertices[svid].select = True;\n    m.data.vertices[evid].select = True;\n    \n    for v in m.data.vertices:\n        p3d = Point3D(v.co.x, v.co.y, v.co.z);\n        verts.append(p3d);\n   \n    for f in m.data.polygons:\n        f_vids = [loops[lid].vertex_index for lid in f.loop_indices];        \n        faces.append(Face(f_vids[0], f_vids[1], f_vids[2]));\n    \n    bmodel.LoadModel(verts, faces);\n    bmodel.Preprocess();\n    \n    emethod = ICHWithFurtherPriorityQueue(bmodel, set([svid]));\n    emethod.Execute();\n    paths = emethod.FindSourceVertex(evid,[]);\n    paths = rotate(paths, 1);\n    \n    path_verts = [];\n    \n    for epoint in paths:\n        pt = epoint.Get3DPoint(bmodel);\n        path_verts.append(Vector((pt.x, pt.y, pt.z)));\n    createPathMesh(path_verts);\n    print('DONE FOUND THE PATHS::: ');\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aalavandhaann/chenhan_cython", "keywords": "geodesic mesh mesh3d opengl pygl triangle triangular meshes blender", "license": "LICENSE.txt", "maintainer": "#0K Srinivasan Ramachandran", "maintainer_email": "ashok.srinivasan2002@gmail.com", "name": "py-chenhancc", "package_url": "https://pypi.org/project/py-chenhancc/", "platform": "any", "project_url": "https://pypi.org/project/py-chenhancc/", "project_urls": {"Homepage": "https://github.com/aalavandhaann/chenhan_cython"}, "release_url": "https://pypi.org/project/py-chenhancc/0.0.7/", "requires_dist": null, "requires_python": ">=2", "summary": "A geodesic path solution using chenhan", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>chenhancc</h1>\n<p>A Fast geodesic algorithm in python that spans across the surface through the polygons</p>\n<p>\n\t<img height=\"200\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0698d4cb680abd8036dd26e451311efdcc3f9b29/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f61616c6176616e646861616e6e2f6368656e68616e5f637974686f6e2f6d61737465722f696d616765732f446f672e6a7067\"><img height=\"200\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79c06f14f1ea829ed49761385340233db180181c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f61616c6176616e646861616e6e2f6368656e68616e5f637974686f6e2f6d61737465722f696d616765732f4361742e6a7067\"><img height=\"200\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfb195652ed0e73eb1ee72b3af9404e722bb6fd7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f61616c6176616e646861616e6e2f6368656e68616e5f637974686f6e2f6d61737465722f696d616765732f4d616e2e6a7067\">\n</p>\n<p>\n</p><h2>Many Thanks</h2>\n<p>The original c++ source code was provided to me by Dr. Xin Shiqing (<a href=\"https://sites.google.com/site/xinshiqing/\" rel=\"nofollow\">https://sites.google.com/site/xinshiqing/</a>). My sincere thanks to him for his help</p>\n<p>The algorithm is purely based on the paper of Shiqing who provided me with this wonderful c++ code as well. All I had to do was make some changes so it can be compiled as a python library. The timing or efficiency difference between the pure python implementation and c++ -&gt; python conversion is atleast 210x times.\n&lt;/&gt;</p>\n<pre><code>Xin SQ, Wang GJ. Improving Chen and Han's algorithm on the discrete geodesic problem. ACM Transactions on Graphics (TOG). 2009 Aug 1;28(4):104.\n</code></pre>\n<h1>chenhan_cython</h1>\n<p>Using cython instead of PyBind11 generated by Binder. Rather straightforward. I am giving up on Binder to generate the pybind11 binding code for Windows. This attempt is to create PXD files and use autowrap to generate the PYX files. Looks promising so far.</p>\n<h2>Installation</h2>\n<p><strong>Python Package Manager (PIP)</strong></p>\n<ul>\n<li><code>pip install py_chenhancc --user</code> or</li>\n<li><code>sudo pip install py_chenhancc</code> (You need administration privileges)</li>\n</ul>\n<p><strong>Easy Install</strong></p>\n<p><code>easy_install --prefix $HOME/.local</code> This is for ubuntu</p>\n<p><strong>Prerequesties</strong></p>\n<ul>\n<li>\n<p>This code is compiled using cython and autowrap module to generate PYX files. There is no need to generate the PYX files yourself. It has been generated already for Windows and GCC systems</p>\n<p>*<a href=\"https://github.com/uweschmitt/autowrap\" rel=\"nofollow\">Github link for autowrap</a>.</p>\n</li>\n</ul>\n<p><strong>On any OS (Linux, OS X, MAC, Windows)</strong></p>\n<ul>\n<li>You can install using PIP</li>\n<li>Do <code>pip install py_chenhancc</code></li>\n</ul>\n<h2>ISSUES</h2>\n<ul>\n<li>Unix systems - Using pip install <code>pip install py_chenhancc</code> it would fail saying the command gcc failed with the compilation because of blah blah reason. I got it to work by exporting <code>export CC=x86_64-linux-gnu-g++</code></li>\n<li>Next if you notice it still fails after setting the above step ensure you have gcc version 4.9 atleast. Looks like gcc 4.8 is annoyed with std=c++14 flag in the compiler options. These two steps should figure you out.</li>\n<li>Windows and Macintosh systems - I am finding it difficult to get my hands on a macintosh machine. Will soon test it and update all of you with what is necessary. If someone is kind enough to lend me a hand then please.</li>\n</ul>\n<h2>License</h2>\n<p>I haven't thought about it yet. The world is so strange that even free stuffs come at a cost. Did you notice that even for free licenses there are many variants to it? Anyways feel free to do things you want to after cloning the repository.</p>\n<h2>Demos</h2>\n<p>If you want to perform demos as shown in the screenshots above. Then after installing the sharedobject for chenhancc you should be also install another Blender plugin to see live paths on meshes. The link to the repository is <a href=\"https://github.com/aalavandhaann/ch_bl_geodesics\" rel=\"nofollow\">here</a>. Once you have installed the plugin then start clicking on the meshes and see paths between consecutive clicks.</p>\n<h2>Demos - Blender</h2>\n<p>You will find <b>blender</b> folder inside the <b>demo</b> folder. There is a blend file that can test a mesh loaded in the scene. Just ensure to load a mesh, select it with mouse and run the script <code>(Alt-p)</code>. You should see a path between the selected vertices as supplied in the code in the text editor of Blender. In the below code change the <code>svid</code> and <code>evid</code> to change the vertex selection. <code>svid</code> is the seed vertex index, and <code>evid</code> is the target vertex index to which a path should be found.</p>\n<pre><code>#Replace the below Blender api imports with the framework of your choice. \n#The idea is to supply points, and face information for mesh representation\n#inside the geodesics algorithm\n\n#----------Blender based api modules import----------------\nimport bpy, bmesh;\nfrom mathutils import Vector;\n#----------End of Blender based api modules import----------------\n\nfrom py_chenhancc import CBaseModel as BaseModel, CRichModel as RichModel, CPoint3D as Point3D, CFace as Face, CICHWithFurtherPriorityQueue as ICHWithFurtherPriorityQueue;\n\n\nc = bpy.context;\nm = c.active_object;\nsvid = 0;\nevid = 20000;\n\ndef rotate(l, n):\n    return l[n:] + l[:n];\n\ndef createPathMesh(points):\n    myvertexlist = [[2,2,2],[4,4,4],[6,6,6],[8,8,8]]\n    \n    obName = \"path_\"+str(len(points));\n    me = bpy.data.meshes.new(obName);\n    ob = bpy.data.objects.new(obName, me);\n\n    # Get a BMesh representation\n    bm = bmesh.new();   # create an empty BMesh\n    bm.from_mesh(me);   # fill it in from a Mesh\n\n    # Modify the BMesh, can do anything here...\n    for index, co in enumerate(points):\n        v = bm.verts.new(co);\n        v.index = index;\n        \n    bm.verts.ensure_lookup_table();\n    \n    for index, co in enumerate(points[1:]):\n        v1 = bm.verts[index-1];\n        v2 = bm.verts[index];\n        e = bm.edges.new((v1, v2));\n        \n    \n    # also add bm.edges and bm.faces\n\n    # Finish up, write the bmesh back to the mesh\n    bm.to_mesh(me);\n    bm.free();  # free and prevent further access\n    \n    scn = bpy.context.scene;\n    scn.objects.link(ob);\n    scn.objects.active = ob;\n    ob.select = True;\n\n\nif(m):\n    verts = [];\n    faces = [];\n    loops = m.data.loops;\n    \n    bmodel = RichModel();\n    \n    m.data.vertices[svid].select = True;\n    m.data.vertices[evid].select = True;\n    \n    for v in m.data.vertices:\n        p3d = Point3D(v.co.x, v.co.y, v.co.z);\n        verts.append(p3d);\n   \n    for f in m.data.polygons:\n        f_vids = [loops[lid].vertex_index for lid in f.loop_indices];        \n        faces.append(Face(f_vids[0], f_vids[1], f_vids[2]));\n    \n    bmodel.LoadModel(verts, faces);\n    bmodel.Preprocess();\n    \n    emethod = ICHWithFurtherPriorityQueue(bmodel, set([svid]));\n    emethod.Execute();\n    paths = emethod.FindSourceVertex(evid,[]);\n    paths = rotate(paths, 1);\n    \n    path_verts = [];\n    \n    for epoint in paths:\n        pt = epoint.Get3DPoint(bmodel);\n        path_verts.append(Vector((pt.x, pt.y, pt.z)));\n    createPathMesh(path_verts);\n    print('DONE FOUND THE PATHS::: ');\n</code></pre>\n\n          </div>"}, "last_serial": 7112645, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "730d0bc3de5275bf16e775805ca14f38", "sha256": "ecadf0e1c042d7b27fac93a34d94c0be89d35634ce629e56249c6ae1caafb3cd"}, "downloads": -1, "filename": "py_chenhancc-0.0.1.zip", "has_sig": false, "md5_digest": "730d0bc3de5275bf16e775805ca14f38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 107575, "upload_time": "2018-01-05T22:53:16", "upload_time_iso_8601": "2018-01-05T22:53:16.810063Z", "url": "https://files.pythonhosted.org/packages/b3/39/f5bc285f4eac621c89fda7351751be8557cdfc64069ba6990b884302e893/py_chenhancc-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8a7e8b58115d0e46ed35fb33c6e69da1", "sha256": "d4374622384107f976446883168507a26af8b1a9e49416478f34d0155b2723e4"}, "downloads": -1, "filename": "py_chenhancc-0.0.2.zip", "has_sig": false, "md5_digest": "8a7e8b58115d0e46ed35fb33c6e69da1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114520, "upload_time": "2018-01-05T23:12:11", "upload_time_iso_8601": "2018-01-05T23:12:11.575696Z", "url": "https://files.pythonhosted.org/packages/1b/5d/6da1ec1742d4c9aad9e5383a889b481871314a12d85845681d813772db2d/py_chenhancc-0.0.2.zip", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c3d84eab0f4a4808c2a6b2379c5794ae", "sha256": "233f1a24b4be3ddf6140089afb5912987bb2324bda13925b412329cb153143eb"}, "downloads": -1, "filename": "py_chenhancc-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c3d84eab0f4a4808c2a6b2379c5794ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114435, "upload_time": "2018-03-13T23:30:52", "upload_time_iso_8601": "2018-03-13T23:30:52.220500Z", "url": "https://files.pythonhosted.org/packages/b2/b6/753153291802e707c7826ef80ba107d8971d71cb89427e5387339e1fd893/py_chenhancc-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d75938204bf1f494b6cfe987da2c36f7", "sha256": "c9bc31c999362882ff212fe31d205a22c3b074a28eb75a294a63bf59313ca30a"}, "downloads": -1, "filename": "py_chenhancc-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d75938204bf1f494b6cfe987da2c36f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 124235, "upload_time": "2020-04-25T18:33:05", "upload_time_iso_8601": "2020-04-25T18:33:05.812011Z", "url": "https://files.pythonhosted.org/packages/02/35/0afba852df7ac93f5322cc1a6093ad95d7ed0a149cae62ca5f21278ab90c/py_chenhancc-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ecf24d65d824c14d1a8cc5ad73385f3e", "sha256": "50487d29c0a13c4775af6eeea7d8a7760cf7930688efb947b7d9667a00f816b5"}, "downloads": -1, "filename": "py_chenhancc-0.0.5.tar.gz", "has_sig": false, "md5_digest": "ecf24d65d824c14d1a8cc5ad73385f3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 124288, "upload_time": "2020-04-25T18:50:11", "upload_time_iso_8601": "2020-04-25T18:50:11.793143Z", "url": "https://files.pythonhosted.org/packages/12/4d/3640f1fc7e2e3d368a473731c566f608bb74c74002e6f828f250cffc24af/py_chenhancc-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "675ea99e66b680c91717458001f9eaf0", "sha256": "411b0ae25b8968b5e7bffe3fdee35c78fa82b4b67f0dde61f9f38d677b706385"}, "downloads": -1, "filename": "py_chenhancc-0.0.6.tar.gz", "has_sig": false, "md5_digest": "675ea99e66b680c91717458001f9eaf0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 23801, "upload_time": "2020-04-27T15:28:03", "upload_time_iso_8601": "2020-04-27T15:28:03.889836Z", "url": "https://files.pythonhosted.org/packages/c6/57/3b62739256667b036fc37da25f3d03d7638fd737ef85c12c527052a99f72/py_chenhancc-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "d7f2f2e0d89c3f300362d05344a429e4", "sha256": "278b836af9370f145e3e64ebba866b684320a310a1521db8ca3ceb84b9e338f3"}, "downloads": -1, "filename": "py_chenhancc-0.0.7.tar.gz", "has_sig": false, "md5_digest": "d7f2f2e0d89c3f300362d05344a429e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 23900, "upload_time": "2020-04-27T15:35:37", "upload_time_iso_8601": "2020-04-27T15:35:37.840808Z", "url": "https://files.pythonhosted.org/packages/58/64/bbf300deb2fe6edd879c58dfc3087eeddab4aa60a0a3fcb1d5a763b7b2b2/py_chenhancc-0.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7f2f2e0d89c3f300362d05344a429e4", "sha256": "278b836af9370f145e3e64ebba866b684320a310a1521db8ca3ceb84b9e338f3"}, "downloads": -1, "filename": "py_chenhancc-0.0.7.tar.gz", "has_sig": false, "md5_digest": "d7f2f2e0d89c3f300362d05344a429e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2", "size": 23900, "upload_time": "2020-04-27T15:35:37", "upload_time_iso_8601": "2020-04-27T15:35:37.840808Z", "url": "https://files.pythonhosted.org/packages/58/64/bbf300deb2fe6edd879c58dfc3087eeddab4aa60a0a3fcb1d5a763b7b2b2/py_chenhancc-0.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:32 2020"}