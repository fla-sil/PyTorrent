{"info": {"author": "Erik Cederstrand", "author_email": "erik@cederstrand.dk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Topic :: Communications"], "description": "Exchange Web Services client library\n====================================\n\nThis module provides an well-performing, well-behaving,\nplatform-independent and simple interface for communicating with a\nMicrosoft Exchange 2007-2016 Server or Office365 using Exchange Web\nServices (EWS). It currently implements autodiscover, and functions for\nsearching, creating, updating, deleting, exporting and uploading\ncalendar, mailbox, task, contact and distribution list items.\n\n[![image](https://img.shields.io/pypi/v/exchangelib.svg)](https://pypi.org/project/exchangelib/)\n[![image](https://img.shields.io/pypi/pyversions/exchangelib.svg)](https://pypi.org/project/exchangelib/)\n[![image](https://api.codacy.com/project/badge/Grade/5f805ad901054a889f4b99a82d6c1cb7)](https://www.codacy.com/app/ecederstrand/exchangelib?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ecederstrand/exchangelib&amp;utm_campaign=Badge_Grade)\n[![image](https://api.travis-ci.com/ecederstrand/exchangelib.png)](http://travis-ci.com/ecederstrand/exchangelib)\n[![image](https://coveralls.io/repos/github/ecederstrand/exchangelib/badge.svg?branch=master)](https://coveralls.io/github/ecederstrand/exchangelib?branch=master)\n\n## Teaser\n\nHere's a short example of how `exchangelib` works. Let's print the first\n100 inbox messages in reverse order:\n\n```python\nfrom exchangelib import Credentials, Account\n\ncredentials = Credentials('john@example.com', 'topsecret')\naccount = Account('john@example.com', credentials=credentials, autodiscover=True)\n\nfor item in account.inbox.all().order_by('-datetime_received')[:100]:\n    print(item.subject, item.sender, item.datetime_received)\n```\n\n\n## Installation\nYou can install this package from PyPI:\n\n```bash\npip install exchangelib\n```\n\nThe default installation does not support Kerberos or SSPI. For additional Kerberos or SSPI support,\ninstall with the extra `kerberos` or `sspi` dependencies (please note that SSPI is only supported on\nWindows):\n\n```bash\npip install exchangelib[kerberos]\npip install exchangelib[sspi]\n```\n\nTo get both, install as:\n\n```bash\npip install exchangelib[complete]\n```\n\nTo install the very latest code, install directly from GitHub instead:\n\n```bash\npip install git+https://github.com/ecederstrand/exchangelib.git\n```\n\n`exchangelib` uses the `lxml` package, and `pykerberos` to support Kerberos authentication.\nTo be able to install these, you may need to install some additional operating system packages.\n\nOn Ubuntu:\n```bash\napt-get install libxml2-dev libxslt1-dev\n\n# For Kerberos support, also install these:\napt-get install libkrb5-dev build-essential libssl-dev libffi-dev python-dev\n```\n\nOn CentOS:\n```bash\n# For Kerberos support, install these:\nyum install gcc python-devel krb5-devel krb5-workstation python-devel\n```\n\nOn FreeBSD, `pip` needs a little help:\n```bash\npkg install libxml2 libxslt\nCFLAGS=-I/usr/local/include pip install lxml\n\n# For Kerberos support, also install these:\npkg install krb5\nCFLAGS=-I/usr/local/include pip install kerberos pykerberos\n```\n\nFor other operating systems, please consult the documentation for the Python package that\nfails to install.\n\n\n## Setup and connecting\n\n```python\nfrom exchangelib import DELEGATE, IMPERSONATION, Account, Credentials, OAuth2Credentials, \\\n    OAuth2AuthorizationCodeCredentials, FaultTolerance, Configuration, NTLM, GSSAPI, SSPI, \\\n    OAUTH2, Build, Version\nfrom exchangelib.autodiscover import AutodiscoverProtocol\n\n# Specify your credentials. Username is usually in WINDOMAIN\\username format, where WINDOMAIN is\n# the name of the Windows Domain your username is connected to, but some servers also\n# accept usernames in PrimarySMTPAddress ('myusername@example.com') format (Office365 requires it).\n# UPN format is also supported, if your server expects that.\ncredentials = Credentials(username='MYWINDOMAIN\\\\myusername', password='topsecret')\n\n# If you're running long-running jobs, you may want to enable fault-tolerance. Fault-tolerance\n# means that requests to the server do an exponential backoff and sleep for up to a certain\n# threshold before giving up, if the server is unavailable or responding with error messages.\n# This prevents automated scripts from overwhelming a failing or overloaded server, and hides\n# intermittent service outages that often happen in large Exchange installations.\n\n# An Account is the account on the Exchange server that you want to connect to. This can be\n# the account associated with the credentials you connect with, or any other account on the\n# server that you have been granted access to. If, for example, you want to access a shared\n# folder, create an Account instance using the email address of the account that the shared \n# folder belongs to, and access the shared folder through this account.\n\n# 'primary_smtp_address' is the primary SMTP address assigned the account. If you enable\n# autodiscover, an alias address will work, too. In this case, 'Account.primary_smtp_address'\n# will be set to the primary SMTP address.\nmy_account = Account(primary_smtp_address='myusername@example.com', credentials=credentials,\n                     autodiscover=True, access_type=DELEGATE)\njohns_account = Account(primary_smtp_address='john@example.com', credentials=credentials,\n                        autodiscover=True, access_type=DELEGATE)\nmarys_account = Account(primary_smtp_address='mary@example.com', credentials=credentials,\n                        autodiscover=True, access_type=DELEGATE)\nstill_marys_account = Account(primary_smtp_address='alias_for_mary@example.com',\n                              credentials=credentials, autodiscover=True, access_type=DELEGATE)\n\n# Full autodiscover data is availale on the Account object:\nmy_account.ad_response\n\n# Set up a target account and do an autodiscover lookup to find the target EWS endpoint.\naccount = Account(primary_smtp_address='john@example.com', credentials=credentials,\n                  autodiscover=True, access_type=DELEGATE)\n\n# If your credentials have been given impersonation access to the target account, set a\n# different 'access_type':\naccount = Account(primary_smtp_address='john@example.com', credentials=credentials,\n                  autodiscover=True, access_type=IMPERSONATION)\n\n# If the server doesn't support autodiscover, or you want to avoid the overhead of autodiscover,\n# use a Configuration object to set the server location instead:\nconfig = Configuration(server='mail.example.com', credentials=credentials)\naccount = Account(primary_smtp_address='john@example.com', config=config,\n                  autodiscover=False, access_type=DELEGATE)\n\n# 'exchangelib' will attempt to guess the server version and authentication method. If you\n# have a really bizarre or locked-down installation and the guessing fails, or you want to avoid\n# the extra network traffic, you can set the auth method and version explicitly instead:\nversion = Version(build=Build(15, 0, 12, 34))\nconfig = Configuration(\n    server='example.com', credentials=credentials, version=version, auth_type=NTLM\n)\n\n# By default, we fail on all exceptions from the server. If you want to enable fault\n# tolerance, add a retry policy to your configuration. We will then retry on certain\n# transient errors. By default, we back off exponentially and retry for up to an hour.\n# This is configurable:\nconfig = Configuration(retry_policy=FaultTolerance(max_wait=3600), credentials=credentials)\naccount = Account(primary_smtp_address='john@example.com', config=config)\n\n# Autodiscovery will also use this policy, but only for the final autodiscover endpoint.\n# Here's how to change the policy for connecting to autodiscover candidate servers.\n# Old autodiscover implementation\nimport exchangelib.autodiscover.legacy\nexchangelib.autodiscover.legacy.INITIAL_RETRY_POLICY = FaultTolerance(max_wait=30)\n# New autodiscover implementation\nfrom exchangelib.autodiscover import Autodiscovery\nAutodiscovery.INITIAL_RETRY_POLICY = FaultTolerance(max_wait=30)\n\n# Kerberos and SSPI authentication are supported via the GSSAPI and SSPI auth types.\nconfig = Configuration(server='example.com', auth_type=GSSAPI)\nconfig = Configuration(server='example.com', auth_type=SSPI)\n\n# OAuth is supported via the OAUTH2 auth type and the OAuth2Credentials class.\n# Use OAuth2AuthorizationCodeCredentials for the authorization code flow (useful\n# for applications that access multiple accounts).\ncredentials = OAuth2Credentials(client_id='MY_ID', client_secret='MY_SECRET', tenant_id='TENANT_ID')\ncredentials = OAuth2AuthorizationCodeCredentials(client_id='MY_ID', client_secret='MY_SECRET', authorization_code='AUTH_CODE')\ncredentials = OAuth2AuthorizationCodeCredentials(client_id='MY_ID', client_secret='MY_SECRET', access_token='EXISTING_TOKEN')\nconfig = Configuration(credentials=credentials, auth_type=OAUTH2)\n\n# Applications using the authorization code flow that let exchangelib refresh\n# access tokens for them probably want to store the refreshed tokens so users\n# don't have to re-authorize. Subclass OAuth2AuthorizationCodeCredentials and\n# override on_token_auto_refreshed():\nclass MyCredentials(OAuth2AuthorizationCodeCredentials):\n    def on_token_auto_refreshed(self, access_token):\n        store_it_somewhere(access_token)\n        # Let the object update its internal state!\n        super().on_token_auto_refreshed(access_token)\n\n# For applications that use the authorization code flow and rely on an external\n# provider to refresh access tokens (and thus are unable to provide a client ID\n# and secret to exchangelib), subclass OAuth2AuthorizationCodeCredentials and\n# override refresh().\nclass MyCredentials(OAuth2AuthorizationCodeCredentials):\n    def refresh(self):\n        self.access_token = ...\n\n# If you're connecting to the same account very often, you can cache the autodiscover result for\n# later so you can skip the autodiscover lookup:\news_url = account.protocol.service_endpoint\news_auth_type = account.protocol.auth_type\nprimary_smtp_address = account.primary_smtp_address\n\n# You can now create the Account without autodiscovering, using the cached values:\nconfig = Configuration(service_endpoint=ews_url, credentials=credentials, auth_type=ews_auth_type)\naccount = Account(\n    primary_smtp_address=primary_smtp_address, \n    config=config, autodiscover=False, \n    access_type=DELEGATE,\n)\n\n# Autodiscover can take a lot of time, specially the part that figures out the autodiscover \n# server to contact for a specific email domain. For this reason, we will create a persistent, \n# per-user, on-disk cache containing a map of previous, successful domain -> autodiscover server\n# lookups. This cache is shared between processes and is not deleted when your program exits.\n\n# A cache entry for a domain is removed automatically if autodiscovery fails for an email in that\n# domain. It's possible to clear the entire cache completely if you want:\nfrom exchangelib.autodiscover import clear_cache\nclear_cache()\n```\n\n## Proxies and custom TLS validation\n\nIf you need proxy support or custom TLS validation, you can supply a\ncustom 'requests' transport adapter class, as described in\n<http://docs.python-requests.org/en/master/user/advanced/#transport-adapters>.\n\nHere's an example using different custom root certificates depending on\nthe server to connect to:\n\n```python\nfrom urllib.parse import urlparse\nimport requests.adapters\nfrom exchangelib.protocol import BaseProtocol\n\nclass RootCAAdapter(requests.adapters.HTTPAdapter):\n    \"\"\"An HTTP adapter that uses a custom root CA certificate at a hard coded location\"\"\"\n    def cert_verify(self, conn, url, verify, cert):\n        cert_file = {\n            'example.com': '/path/to/example.com.crt',\n            'mail.internal': '/path/to/mail.internal.crt',\n        }[urlparse(url).hostname]\n        super().cert_verify(conn=conn, url=url, verify=cert_file, cert=cert)\n\n# Tell exchangelib to use this adapter class instead of the default\nBaseProtocol.HTTP_ADAPTER_CLS = RootCAAdapter\n```\n\nHere's an example of adding proxy support:\n\n```python\nimport requests.adapters\nfrom exchangelib.protocol import BaseProtocol\n\nclass ProxyAdapter(requests.adapters.HTTPAdapter):\n    def send(self, *args, **kwargs):\n        kwargs['proxies'] = {\n            'http': 'http://10.0.0.1:1243',\n            'https': 'http://10.0.0.1:4321',\n        }\n        return super().send(*args, **kwargs)\n\n# Tell exchangelib to use this adapter class instead of the default\nBaseProtocol.HTTP_ADAPTER_CLS = ProxyAdapter\n```\n\n`exchangelib` provides a sample adapter which ignores TLS validation\nerrors. Use at own risk.\n\n```python\nfrom exchangelib.protocol import BaseProtocol, NoVerifyHTTPAdapter\n\n# Tell exchangelib to use this adapter class instead of the default\nBaseProtocol.HTTP_ADAPTER_CLS = NoVerifyHTTPAdapter\n```\n\n## User-Agent\n\nYou can supply a custom 'User-Agent' for your application.\nBy default, `exchangelib` will use: `exchangelib/<version> (python-requests/<version>)`\n\nHere's an example using different User-Agent:\n\n```python\nfrom exchangelib.protocol import BaseProtocol\n\n# Tell exchangelib to use this user-agent instead of the default\nBaseProtocol.USERAGENT = \"Auto-Reply/0.1.0\"\n```\n\n## Folders\nAll wellknown folders are available as properties on the account, e.g. as `account.root`, `account.calendar`,\n`account.trash`, `account.inbox`, `account.outbox`, `account.sent`, `account.junk`, `account.tasks` and\n`account.contacts`.\n\n```python\n# There are multiple ways of navigating the folder tree and searching for folders. Globbing and \n# absolute path may create unexpected results if your folder names contain slashes.\n\n# The folder structure is cached after first access to a folder hierarchy. This means that external\n# changes to the folder structure will not show up until you clear the cache. Here's how to clear\n# the cache of each of the currently supported folder hierarchies:\nfrom exchangelib import Account, Folder\n\na = Account(...)\na.root.refresh()\na.public_folders_root.refresh()\na.archive_root.refresh()\n\nsome_folder = a.root / 'Some Folder'\nsome_folder.parent\nsome_folder.parent.parent.parent\nsome_folder.root  # Returns the root of the folder structure, at any level. Same as Account.root\nsome_folder.children  # A generator of child folders\nsome_folder.absolute  # Returns the absolute path, as a string\nsome_folder.walk()  # A generator returning all subfolders at arbitrary depth this level\n# Globbing uses the normal UNIX globbing syntax\nsome_folder.glob('foo*')  # Return child folders matching the pattern\nsome_folder.glob('*/foo')  # Return subfolders named 'foo' in any child folder\nsome_folder.glob('**/foo')  # Return subfolders named 'foo' at any depth\nsome_folder / 'sub_folder' / 'even_deeper' / 'leaf'  # Works like pathlib.Path\n# You can also drill down into the folder structure without using the cache. This works like\n# the single slash syntax, but does not start by creating a cache the folder hierarchy. This is\n# useful if your account contains a huge number of folders, and you already know where to go.\nsome_folder // 'sub_folder' // 'even_deeper' // 'leaf'\nsome_folder.parts  # returns some_folder and all its parents, as Folder instances\n# tree() returns a string representation of the tree structure at the given level\nprint(a.root.tree())\n'''\nroot\n\u251c\u2500\u2500 inbox\n\u2502   \u2514\u2500\u2500 todos\n\u2514\u2500\u2500 archive\n    \u251c\u2500\u2500 Last Job\n    \u251c\u2500\u2500 exchangelib issues\n    \u2514\u2500\u2500 Mom\n'''\n\n# Folders have some useful counters:\na.inbox.total_count\na.inbox.child_folder_count\na.inbox.unread_count\n# Update the counters\na.inbox.refresh()\n\n# Folders can be created, updated and deleted:\nf = Folder(parent=a.inbox, name='My New Folder')\nf.save()\n\nf.name = 'My New Subfolder'\nf.save()\nf.delete()\n\n# Delete all items in a folder\nf.empty()\n# Also delete all subfolders in the folder\nf.empty(delete_sub_folders=True)\n# Recursively delete all items in a folder, and all subfolders and their content. This is\n# like `empty(delete_sub_folders=True)` but attempts to protect distinguished folders from\n# being deleted. Use with caution!\nf.wipe()\n```\n\n## Dates, datetimes and timezones\n\nEWS has some special requirements on datetimes and timezones. You need\nto use the special `EWSDate`, `EWSDateTime` and `EWSTimeZone` classes\nwhen working with dates.\n\n```python\nfrom datetime import datetime, timedelta\nimport pytz\nfrom exchangelib import EWSTimeZone, EWSDateTime, EWSDate\n\n# EWSTimeZone works just like pytz.timezone()\ntz = EWSTimeZone.timezone('Europe/Copenhagen')\n# You can also get the local timezone defined in your operating system\ntz = EWSTimeZone.localzone()\n\n# EWSDate and EWSDateTime work just like datetime.datetime and datetime.date. Always create\n# timezone-aware datetimes with EWSTimeZone.localize():\nlocalized_dt = tz.localize(EWSDateTime(2017, 9, 5, 8, 30))\nright_now = tz.localize(EWSDateTime.now())\n\n# Datetime math works transparently\ntwo_hours_later = localized_dt + timedelta(hours=2)\ntwo_hours = two_hours_later - localized_dt\ntwo_hours_later += timedelta(hours=2)\n\n# Dates\nmy_date = EWSDate(2017, 9, 5)\ntoday = EWSDate.today()\nalso_today = right_now.date()\nalso_today += timedelta(days=10)\n\n# UTC helpers. 'UTC' is the UTC timezone as an EWSTimeZone instance.\n# 'UTC_NOW' returns a timezone-aware UTC timestamp of current time.\nfrom exchangelib import UTC, UTC_NOW\n\nright_now_in_utc = UTC.localize(EWSDateTime.now())\nright_now_in_utc = UTC_NOW()\n\n# Already have a Python datetime object you want to use? Make sure it's localized. Then pass \n# it to from_datetime().\npytz_tz = pytz.timezone('Europe/Copenhagen')\npy_dt = pytz_tz.localize(datetime(2017, 12, 11, 10, 9, 8))\news_now = EWSDateTime.from_datetime(py_dt)\n```\n\n## Creating, updating, deleting, sending, moving, archiving\n\n```python\n# Here's an example of creating a calendar item in the user's standard calendar.  If you want to\n# access a non-standard calendar, choose a different one from account.folders[Calendar].\n#\n# You can create, update and delete single items:\nfrom exchangelib import Account, CalendarItem, Message, Mailbox, FileAttachment, HTMLBody\nfrom exchangelib.items import SEND_ONLY_TO_ALL, SEND_ONLY_TO_CHANGED\nfrom exchangelib.properties import DistinguishedFolderId\n\na = Account(...)\nitem = CalendarItem(folder=a.calendar, subject='foo')\nitem.save()  # This gives the item an 'id' and a 'changekey' value\nitem.save(send_meeting_invitations=SEND_ONLY_TO_ALL)  # Send a meeting invitation to attendees\n# Update a field. All fields have a corresponding Python type that must be used.\nitem.subject = 'bar'\n# Print all available fields on the 'CalendarItem' class. Beware that some fields are read-only, or\n# read-only after the item has been saved or sent, and some fields are not supported on old\n# versions of Exchange.\nprint(CalendarItem.FIELDS)\nitem.save()  # When the items has an item_id, this will update the item\nitem.save(update_fields=['subject'])  # Only updates certain fields. Accepts a list of field names.\nitem.save(send_meeting_invitations=SEND_ONLY_TO_CHANGED)  # Send invites only to attendee changes\nitem.delete()  # Hard deletinon\nitem.delete(send_meeting_cancellations=SEND_ONLY_TO_ALL)  # Send cancellations to all attendees\nitem.soft_delete()  # Delete, but keep a copy in the recoverable items folder\nitem.move_to_trash()  # Move to the trash folder\nitem.move(a.trash)  # Also moves the item to the trash folder\nitem.copy(a.trash)  # Creates a copy of the item to the trash folder\nitem.archive(DistinguishedFolderId('inbox'))  # Archives the item to inbox of the the archive mailbox\n\n# You can also send emails. If you don't want a local copy:\nm = Message(\n    account=a,\n    subject='Daily motivation',\n    body='All bodies are beautiful',\n    to_recipients=[\n        Mailbox(email_address='anne@example.com'),\n        Mailbox(email_address='bob@example.com'),\n    ],\n    cc_recipients=['carl@example.com', 'denice@example.com'],  # Simple strings work, too\n    bcc_recipients=[\n        Mailbox(email_address='erik@example.com'),\n        'felicity@example.com',\n    ],  # Or a mix of both\n)\nm.send()\n\n# Or, if you want a copy in e.g. the 'Sent' folder\nm = Message(\n    account=a,\n    folder=a.sent,\n    subject='Daily motivation',\n    body='All bodies are beautiful',\n    to_recipients=[Mailbox(email_address='anne@example.com')]\n)\nm.send_and_save()\n\n# Likewise, you can reply to and forward messages that are stored in your mailbox (i.e. they\n# have an item ID).\nm = a.sent.get(subject='Daily motivation')\nm.reply(\n    subject='Re: Daily motivation',\n    body='I agree',\n    to_recipients=['carl@example.com', 'denice@example.com']\n)\nm.reply_all(subject='Re: Daily motivation', body='I agree')\nm.forward(\n    subject='Fwd: Daily motivation',\n    body='Hey, look at this!', \n    to_recipients=['carl@example.com', 'denice@example.com']\n)\n\n# You can also edit a draft of a reply or forward\nforward_draft = m.create_forward(\n    subject='Fwd: Daily motivation',\n    body='Hey, look at this!',\n    to_recipients=['carl@example.com', 'denice@example.com']\n).save(a.drafts) # gives you back the item\nforward_draft.reply_to = ['erik@example.com']\nforward_draft.attach(FileAttachment(name='my_file.txt', content='hello world'.encode('utf-8')))\nforward_draft.send() # now our forward has an extra reply_to field and an extra attachment.\n\n# EWS distinguishes between plain text and HTML body contents. If you want to send HTML body\n# content, use the HTMLBody helper. Clients will see this as HTML and display the body correctly:\nitem.body = HTMLBody('<html><body>Hello happy <blink>OWA user!</blink></body></html>')\n```\n\n## Bulk operations\n\n```python\n# Build a list of calendar items\nfrom exchangelib import Account, CalendarItem, EWSDateTime, EWSTimeZone, Attendee, Mailbox\nfrom exchangelib.properties import DistinguishedFolderId\n\na = Account(...)\ntz = EWSTimeZone.timezone('Europe/Copenhagen')\nyear, month, day = 2016, 3, 20\ncalendar_items = []\nfor hour in range(7, 17):\n    calendar_items.append(CalendarItem(\n        start=tz.localize(EWSDateTime(year, month, day, hour, 30)),\n        end=tz.localize(EWSDateTime(year, month, day, hour + 1, 15)),\n        subject='Test item',\n        body='Hello from Python',\n        location='devnull',\n        categories=['foo', 'bar'],\n        required_attendees = [Attendee(\n            mailbox=Mailbox(email_address='user1@example.com'),\n            response_type='Accept'\n        )]\n    ))\n\n# Create all items at once\nreturn_ids = a.bulk_create(folder=a.calendar, items=calendar_items)\n\n# Bulk fetch, when you have a list of item IDs and want the full objects. Returns a generator.\ncalendar_ids = [(i.id, i.changekey) for i in calendar_items]\nitems_iter = a.fetch(ids=calendar_ids)\n# If you only want some fields, use the 'only_fields' attribute\nitems_iter = a.fetch(ids=calendar_ids, only_fields=['start', 'subject'])\n\n# Bulk update items. Each item must be accompanied by a list of attributes to update\nupdated_ids = a.bulk_update(items=[(i, ('start', 'subject')) for i in calendar_items])\n\n# Move many items to a new folder\nnew_ids = a.bulk_move(ids=calendar_ids, to_folder=a.other_calendar)\n\n# Send draft messages in bulk\nmessage_ids = a.drafts.all().only('id', 'changekey')\nnew_ids = a.bulk_send(ids=message_ids, save_copy=False)\n\n# Delete in bulk\ndelete_results = a.bulk_delete(ids=calendar_ids)\n\n# Archive in bulk\ndelete_results = a.bulk_archive(ids=calendar_ids, to_folder=DistinguishedFolderId('inbox'))\n\n# Bulk delete items found as a queryset\na.inbox.filter(subject__startswith='Invoice').delete()\n\n# Likewise, you can bulk send, copy, move or archive items found in a QuerySet\na.drafts.filter(subject__startswith='Invoice').send()\n# All kwargs are passed on to the equivalent bulk methods on the Account\na.drafts.filter(subject__startswith='Invoice').send(save_copy=False)\na.inbox.filter(subject__startswith='Invoice').copy(to_folder=a.inbox / 'Archive')\na.inbox.filter(subject__startswith='Invoice').move(to_folder=a.inbox / 'Archive')\na.inbox.filter(subject__startswith='Invoice').archive(to_folder=DistinguishedFolderId('inbox'))\n\n# You can change the default page size of bulk operations if you have a slow or busy server\na.inbox.filter(subject__startswith='Invoice').delete(page_size=25)\n```\n\n## Searching\n\nSearching is modeled after the Django QuerySet API, and a large part of\nthe API is supported. Like in Django, the QuerySet is lazy and doesn't\nfetch anything before the QuerySet is iterated. QuerySets support\nchaining, so you can build the final query in multiple steps, and you\ncan re-use a base QuerySet for multiple sub-searches. The QuerySet\nreturns an iterator, and results are cached when the QuerySet is fully\niterated the first time.\n\nHere are some examples of using the API:\n\n```python\nfrom datetime import timedelta\nfrom exchangelib import Account, EWSDateTime, FolderCollection, Q, Message\n\na = Account(...)\n\n# Not all fields on an item support searching. Here's the list of options for Message items\nprint([f.name for f in Message.FIELDS if f.is_searchable])\n\nall_items = a.inbox.all()  # Get everything\nall_items_without_caching = a.inbox.all().iterator()  # Get everything, but don't cache\n# Chain multiple modifiers to refine the query\nfiltered_items = a.inbox.filter(subject__contains='foo').exclude(categories__icontains='bar')\nstatus_report = a.inbox.all().delete()  # Delete the items returned by the QuerySet\nstart = a.default_timezone.localize(EWSDateTime(2017, 1, 1))\nend = a.default_timezone.localize(EWSDateTime(2018, 1, 1))\nitems_for_2017 = a.calendar.filter(start__range=(start, end))  # Filter by a date range\n\n# Same as filter() but throws an error if exactly one item isn't returned\nitem = a.inbox.get(subject='unique_string')\n\n# If you only have the ID and possibly the changekey of an item, you can get the full item:\na.inbox.get(id='AAMkADQy=')\na.inbox.get(id='AAMkADQy=', changekey='FwAAABYA')\n\n# You can sort by a single or multiple fields. Prefix a field with '-' to reverse the sorting. \n# Sorting is efficient since it is done server-side, except when a calendar view sorting on \n# multiple fields.\nordered_items = a.inbox.all().order_by('subject')\nreverse_ordered_items = a.inbox.all().order_by('-subject')\n # Indexed properties can be ordered on their individual components\nsorted_by_home_street = a.contacts.all().order_by('physical_addresses__Home__street')\n# Beware that sorting is done client-side here\na.calendar.view(start=start, end=end).order_by('subject', 'categories')\n\n# Counting and exists\nn = a.inbox.all().count()  # Efficient counting\nfolder_is_empty = not a.inbox.all().exists()  # Efficient tasting\n\n# Restricting returned attributes\nsparse_items = a.inbox.all().only('subject', 'start')\n# Dig deeper on indexed properties\nsparse_items = a.contacts.all().only('phone_numbers')\nsparse_items = a.contacts.all().only('phone_numbers__CarPhone')\nsparse_items = a.contacts.all().only('physical_addresses__Home__street')\n\n# Return values as dicts, not objects\nids_as_dict = a.inbox.all().values('id', 'changekey')\n# Return values as nested lists\nvalues_as_list = a.inbox.all().values_list('subject', 'body')\n# Return values as a flat list\nall_subjects = a.inbox.all().values_list('physical_addresses__Home__street', flat=True)\n\n# A QuerySet can be indexed and sliced like a normal Python list. Slicing and indexing of the\n# QuerySet is efficient because it only fetches the necessary items to perform the slicing.\n# Slicing from the end is also efficient, but then you might as well reverse the sorting.\nfirst_ten = a.inbox.all().order_by('-subject')[:10]  # Efficient. We only fetch 10 items\nlast_ten = a.inbox.all().order_by('-subject')[:-10]  # Efficient, but convoluted\nnext_ten = a.inbox.all().order_by('-subject')[10:20]  # Efficient. We only fetch 10 items\nsingle_item = a.inbox.all().order_by('-subject')[34298]  # Efficient. We only fetch 1 item\nten_items = a.inbox.all().order_by('-subject')[3420:3430]  # Efficient. We only fetch 10 items\nrandom_emails = a.inbox.all().order_by('-subject')[::3]  # This is just stupid, but works\n\n# The syntax for filter() is modeled after Django QuerySet filters. The following filter lookup \n# types are supported. Some lookups only work with string attributes. Range and less/greater \n# operators only work for date or numerical attributes. Some attributes are not searchable at all \n# via EWS:\nqs = a.calendar.all()\nqs.filter(subject='foo')  # Returns items where subject is exactly 'foo'. Case-sensitive\nqs.filter(start__range=(start, end))  # Returns items within range\nqs.filter(subject__in=('foo', 'bar'))  # Return items where subject is either 'foo' or 'bar'\nqs.filter(subject__not='foo')  # Returns items where subject is not 'foo'\nqs.filter(start__gt=start)  # Returns items starting after 'dt'\nqs.filter(start__gte=start)  # Returns items starting on or after 'dt'\nqs.filter(start__lt=start)  # Returns items starting before 'dt'\nqs.filter(start__lte=start)  # Returns items starting on or before 'dt'\nqs.filter(subject__exact='foo')  # Same as filter(subject='foo')\nqs.filter(subject__iexact='foo')  #  Returns items where subject is 'foo', 'FOO' or 'Foo'\nqs.filter(subject__contains='foo')  # Returns items where subject contains 'foo'\nqs.filter(subject__icontains='foo')  # Returns items where subject contains 'foo', 'FOO' or 'Foo'\nqs.filter(subject__startswith='foo')  # Returns items where subject starts with 'foo'\n# Returns items where subject starts with 'foo', 'FOO' or 'Foo'\nqs.filter(subject__istartswith='foo')\n# Returns items that have at least one category assigned, i.e. the field exists on the item on the \n# server.\nqs.filter(categories__exists=True)\n# Returns items that have no categories set, i.e. the field does not exist on the item on the \n# server.\nqs.filter(categories__exists=False)\n\n# WARNING: Filtering on the 'body' field is not fully supported by EWS. There seems to be a window\n# before some internal search index is populated where case-sensitive or case-insensitive filtering\n# for substrings in the body element incorrectly returns an empty result, and sometimes the result\n# stays empty.\n\n# filter() also supports EWS QueryStrings. Just pass the string to filter(). QueryStrings cannot\n# be combined with other filters. We make no attempt at validating the syntax of the QueryString \n# - we just pass the string verbatim to EWS.\n#\n# Read more about the QueryString syntax here:\n# https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/querystring-querystringtype\na.inbox.filter('subject:XXX')\n\n# filter() also supports Q objects that are modeled after Django Q objects, for building complex\n# boolean logic search expressions.\nq = (Q(subject__iexact='foo') | Q(subject__contains='bar')) & ~Q(subject__startswith='baz')\na.inbox.filter(q)\n\n# In this example, we filter by categories so we only get the items created by us.\na.calendar.filter(\n    start__lt=a.default_timezone.localize(EWSDateTime(2019, 1, 1)),\n    end__gt=a.default_timezone.localize(EWSDateTime(2019, 1, 31)),\n    categories__contains=['foo', 'bar'],\n)\n\n# By default, EWS returns only the master recurring item. If you want recurring calendar\n# items to be expanded, use calendar.view(start=..., end=...) instead.\nitems = a.calendar.view(\n    start=a.default_timezone.localize(EWSDateTime(2019, 1, 31)),\n    end=a.default_timezone.localize(EWSDateTime(2019, 1, 31)) + timedelta(days=1),\n)\nfor item in items:\n    print(item.start, item.end, item.subject, item.body, item.location)\n\n# You can combine view() with other modifiers. For example, to check for conflicts before \n# adding a meeting from 8:00 to 10:00:\nhas_conflicts = a.calendar.view(\n    start=a.default_timezone.localize(EWSDateTime(2019, 1, 31, 8)),\n    end=a.default_timezone.localize(EWSDateTime(2019, 1, 31, 10)),\n    max_items=1\n).exists()\n\n# The filtering syntax also works on collections of folders, so you can search multiple folders in \n# a single request.\na.inbox.children.filter(subject='foo')\na.inbox.walk().filter(subject='foo')\na.inbox.glob('foo*').filter(subject='foo')\n# Or select the folders individually\nFolderCollection(account=a, folders=[a.inbox, a.calendar]).filter(subject='foo')\n```\n\n## Paging\n\nPaging EWS services, e.g. FindItem and, have a default page size of 100. You can\nchange this value globally if you want:\n\n```python\nimport exchangelib.services\nexchangelib.services.CHUNK_SIZE = 25\n```\n\nIf you are working with very small or very large items, this may not be a reasonable\nvalue. For example, if you want to retrieve and save emails with large attachments,\nyou can change this value on a per-queryset basis:\n\n```python\nfrom exchangelib import Account\n\na = Account(...)\nqs = a.inbox.all().only('mime_content')\nqs.page_size = 5\nfor msg in qs.iterator():\n    with open('%s.eml' % msg.item_id, 'w') as f:\n        f.write(msg.mime_content)\n```\n\nFinally, the bulk methods defined on the `Account` class have an optional `chunk_size`\nargument that you can use to set a non-default page size when fetching, creating, updating\nor deleting items.\n\n```python\nfrom exchangelib import Account, Message\n\na = Account(...)\nhuge_list_of_items = [Message(...) for i in range(10000)]\nreturn_ids = a.bulk_create(folder=a.inbox, items=huge_list_of_items, chunk_size=5)\n```\n\n## Meetings\n\nThe `CalendarItem` class allows you send out requests for meetings that\nyou initiate or to cancel meetings that you already set out before. It\nis also possible to process `MeetingRequest` messages that are received.\nYou can reply to these messages using the `AcceptItem`,\n`TentativelyAcceptItem` and `DeclineItem` classes. If you receive a\ncancellation for a meeting (class `MeetingCancellation`) that you\nalready accepted then you can also process these by removing the entry\nfrom the calendar.\n\n```python\nfrom exchangelib import Account, CalendarItem, EWSDateTime\nfrom exchangelib.items import MeetingRequest, MeetingCancellation, SEND_TO_ALL_AND_SAVE_COPY\n\na = Account(...)\n\n# create a meeting request and send it out\nitem = CalendarItem(\n    account=a,\n    folder=a.calendar,\n    start=a.default_timezone.localize(EWSDateTime(2019, 1, 31, 8, 15)),\n    end=a.default_timezone.localize(EWSDateTime(2019, 1, 31, 8, 45)),\n    subject=\"Subject of Meeting\",\n    body=\"Please come to my meeting\",\n    required_attendees=['anne@example.com', 'bob@example.com']\n)\nitem.save(send_meeting_invitations=SEND_TO_ALL_AND_SAVE_COPY)\n\n# cancel a meeting that was sent out using the CalendarItem class\nfor calendar_item in a.calendar.all().order_by('-datetime_received')[:5]:\n    # only the organizer of a meeting can cancel it\n    if calendar_item.organizer.email_address == a.primary_smtp_address:\n        calendar_item.cancel()\n\n# processing an incoming MeetingRequest\nfor item in a.inbox.all().order_by('-datetime_received')[:5]:\n    if isinstance(item, MeetingRequest):\n        item.accept(body=\"Sure, I'll come\")\n        # Or:\n        item.decline(body=\"No way!\")\n        # Or:\n        item.tentatively_accept(body=\"Maybe...\")\n\n# meeting requests can also be handled from the calendar - e.g. decline the meeting that was \n# received last.\nfor calendar_item in a.calendar.all().order_by('-datetime_received')[:1]:\n    calendar_item.decline()\n\n# processing an incoming MeetingCancellation (also delete from calendar)\nfor item in a.inbox.all().order_by('-datetime_received')[:5]:\n    if isinstance(item, MeetingCancellation):\n        if item.associated_calendar_item_id:\n            calendar_item = a.inbox.get(\n                id=item.associated_calendar_item_id.id,\n                changekey=item.associated_calendar_item_id.changekey\n            )\n            calendar_item.delete()\n        item.move_to_trash()\n```\n\n## Contacts\n\nFetching personas from a contact folder is supported using the same\nsyntax as folders. Just start your query with `.people()`:\n\n```python\n# Navigate to a contact folder and start the search\nfrom exchangelib import Account, DistributionList\nfrom exchangelib.indexed_properties import EmailAddress\n\na = Account(...)\nfolder = a.root / 'AllContacts'\nfor p in folder.people():\n    print(p)\nfor p in folder.people().only('display_name').filter(display_name='john').order_by('display_name'):\n    print(p)\n\n# Getting a single contact in the GAL contact list\ngal = a.contacts / 'GAL Contacts'\ncontact = gal.get(email_addresses=EmailAddress(email='lucas@example.com'))\n# All contacts with a gmail address\ngmail_contacts = list(gal.filter(email_addresses__contains=EmailAddress(email='gmail.com')))\n# All Gmail email addresses\ngmail_addresses = [e.email for c in\n                   gal.filter(email_addresses__contains=EmailAddress(email='gmail.com'))\n                   for e in c.email_addresses]\n# All email addresses\nall_addresses = [e.email for c in gal.all()\n                 for e in c.email_addresses if not isinstance(c, DistributionList)]\n```\n\nContact items have `photo` and `notes` fields, but they are apparently unused. Instead, you can\nadd a contact photo and notes like this:\n\n```python\nfrom exchangelib import Account, FileAttachment\n\na = Account(...)\ncontact = a.contacts.get(given_name='John')\ncontact.body = 'This is a note'\ncontact.save(update_fields=['body'])\natt = FileAttachment(\n    name='ContactPicture.jpg',\n    content_type='image/png',\n    is_inline=False,\n    is_contact_photo=True,\n    content=open('john_profile_picture.png', 'rb').read(),\n)\ncontact.attach(att)\n```\n\n\n## Extended properties\n\nExtended properties makes it possible to attach custom key-value pairs\nto items and folders on the Exchange server. There are multiple online\nresources that describe working with extended properties, and list many\nof the magic values that are used by existing Exchange clients to store\ncommon and custom properties. The following is not a comprehensive\ndescription of the possibilities, but we do intend to support all the\npossibilities provided by EWS.\n\n```python\n# If folder items have extended properties, you need to register them before you can access them. \n# Create a subclass of ExtendedProperty and define a set of matching setup values:\nfrom exchangelib import Account, ExtendedProperty, CalendarItem, Folder, Message\n\na = Account(...)\n\nclass LunchMenu(ExtendedProperty):\n    property_set_id = '12345678-1234-1234-1234-123456781234'\n    property_name = 'Catering from the cafeteria'\n    property_type = 'String'\n\n# Register the property on the item type of your choice\nCalendarItem.register('lunch_menu', LunchMenu)\n# Now your property is available as the attribute 'lunch_menu', just like any other attribute\nitem = CalendarItem(..., lunch_menu='Foie gras et consomm\u00e9 de l\u00e9gumes')\nitem.save()\nfor i in a.calendar.all():\n    print(i.lunch_menu)\n# If you change your mind, jsut remove the property again\nCalendarItem.deregister('lunch_menu')\n\n# You can also create named properties (e.g. created from User Defined Fields in Outlook, see \n# issue #137):\nclass LunchMenu(ExtendedProperty):\n    distinguished_property_set_id = 'PublicStrings'\n    property_name = 'Catering from the cafeteria'\n    property_type = 'String'\n\n# We support extended properties with tags. This is the definition for the 'completed' and \n# 'followup' flag you can add to items in Outlook (see also issue #85):\nclass Flag(ExtendedProperty):\n    property_tag = 0x1090\n    property_type = 'Integer'\n\n# Or with property ID:\nclass MyMeetingArray(ExtendedProperty):\n    property_set_id = '00062004-0000-0000-C000-000000000046'\n    property_type = 'BinaryArray'\n    property_id = 32852\n\n# Or using distinguished property sets combined with property ID (here as a hex value to align \n# with the format usually mentioned in Microsoft docs). This is the definition for a response to\n# an Outlook Vote request (see issue #198):\nclass VoteResponse(ExtendedProperty):\n    distinguished_property_set_id = 'Common'\n    property_id = 0x00008524\n    property_type = 'String'\n\n# Extended properties also work with folders. For folders, it's only possible to register custom\n# fields on all folder types at once. This is because it's difficult to provide a consistent API\n# when some folders have custom fields and others don't. Custom fields must be registered on the\n# generic Folder or RootOfHierarchy folder classes.\n#\n# Here's an example of getting the size (in bytes) of a folder:\nclass FolderSize(ExtendedProperty):\n    property_tag = 0x0e08\n    property_type = 'Integer'\n\nFolder.register('size', FolderSize)\nprint(a.inbox.size)\n\n# In general, here's how to work with any MAPI property as listed in e.g.\n# https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/mapi-properties. Let's\n# take `PidLidTaskDueDate` as an example. This is the due date for a message maked with the\n# follow-up flag in Microsoft Outlook.\n#\n# PidLidTaskDueDate is documented at\n# https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/pidlidtaskduedate-canonical-property.\n# The property ID is `0x00008105` and the property set is `PSETID_Task`. But EWS wants the UUID for\n# `PSETID_Task`, so we look that up in the MS-OXPROPS pdf:\n# https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxprops/f6ab1613-aefe-447d-a49c-18217230b148\n# The UUID is `00062003-0000-0000-C000-000000000046`. The property type is `PT_SYSTIME` which is also called\n# `SystemTime` (see\n# https://docs.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.mapipropertytype )\n#\n# In conclusion, the definition for the due date becomes:\n\nclass FlagDue(ExtendedProperty):\n    property_set_id = '00062003-0000-0000-C000-000000000046'\n    property_id = 0x8105\n    property_type = 'SystemTime'\n\nMessage.register('flag_due', FlagDue)\n```\n\n## Attachments\n\n```python\n# It's possible to create, delete and get attachments connected to any item type:\n# Process attachments on existing items. FileAttachments have a 'content' attribute\n# containing the binary content of the file, and ItemAttachments have an 'item' attribute\n# containing the item. The item can be a Message, CalendarItem, Task etc.\nimport os.path\nfrom exchangelib import Account, FileAttachment, ItemAttachment, Message, CalendarItem, HTMLBody\n\na = Account\nfor item in a.inbox.all():\n    for attachment in item.attachments:\n        if isinstance(attachment, FileAttachment):\n            local_path = os.path.join('/tmp', attachment.name)\n            with open(local_path, 'wb') as f:\n                f.write(attachment.content)\n            print('Saved attachment to', local_path)\n        elif isinstance(attachment, ItemAttachment):\n            if isinstance(attachment.item, Message):\n                print(attachment.item.subject, attachment.item.body)\n\n# Streaming downloads of file attachment is supported. This reduces memory consumption since we\n# never store the full content of the file in-memory:\nfor item in a.inbox.all():\n    for attachment in item.attachments:\n        if isinstance(attachment, FileAttachment):\n            local_path = os.path.join('/tmp', attachment.name)\n            with open(local_path, 'wb') as f, attachment.fp as fp:\n                buffer = fp.read(1024)\n                while buffer:\n                    f.write(buffer)\n                    buffer = fp.read(1024)\n            print('Saved attachment to', local_path)\n\n# Create a new item with an attachment\nitem = Message(...)\nbinary_file_content = 'Hello from unicode \u00e6\u00f8\u00e5'.encode('utf-8')  # Or read from file, BytesIO etc.\nmy_file = FileAttachment(name='my_file.txt', content=binary_file_content)\nitem.attach(my_file)\nmy_calendar_item = CalendarItem(...)\nmy_appointment = ItemAttachment(name='my_appointment', item=my_calendar_item)\nitem.attach(my_appointment)\nitem.save()\n\n# Add an attachment on an existing item\nmy_other_file = FileAttachment(name='my_other_file.txt', content=binary_file_content)\nitem.attach(my_other_file)\n\n# Remove the attachment again\nitem.detach(my_file)\n\n# If you want to embed an image in the item body, you can link to the file in the HTML\nmessage = Message(...)\nlogo_filename = 'logo.png'\nwith open(logo_filename, 'rb') as f:\n    my_logo = FileAttachment(name=logo_filename, content=f.read(), is_inline=True, content_id=logo_filename)\nmessage.attach(my_logo)\nmessage.body = HTMLBody('<html><body>Hello logo: <img src=\"cid:%s\"></body></html>' % logo_filename)\n\n# Attachments cannot be updated via EWS. In this case, you must to detach the attachment, update\n# the relevant fields, and attach the updated attachment.\n\n# Be aware that adding and deleting attachments from items that are already created in Exchange\n# (items that have an item_id) will update the changekey of the item.\n```\n\n## Recurring calendar items\n\nThere is full read-write support for creating recurring calendar items.\nYou can create daily, weekly, monthly and yearly recurrences (the latter\ntwo in relative and absolute versions).\n\nHere's an example of creating 7 occurrences on Mondays and Wednesdays of\nevery third week, starting September 1, 2017:\n\n```python\nfrom datetime import timedelta\nfrom exchangelib import Account, CalendarItem, EWSDateTime\nfrom exchangelib.fields import MONDAY, WEDNESDAY\nfrom exchangelib.recurrence import Recurrence, WeeklyPattern\n\na = Account(...)\nstart = a.default_timezone.localize(EWSDateTime(2017, 9, 1, 11))\nend = start + timedelta(hours=2)\nitem = CalendarItem(\n    folder=a.calendar,\n    start=start,\n    end=end,\n    subject='Hello Recurrence',\n    recurrence=Recurrence(\n        pattern=WeeklyPattern(interval=3, weekdays=[MONDAY, WEDNESDAY]),\n        start=start.date(),\n        number=7\n    ),\n)\n\n# Occurrence data for the master item\nfor i in a.calendar.filter(start__lt=end, end__gt=start):\n    print(i.subject, i.start, i.end)\n    print(i.recurrence)\n    print(i.first_occurrence)\n    print(i.last_occurrence)\n    for o in i.modified_occurrences:\n        print(o)\n    for o in i.deleted_occurrences:\n        print(o)\n\n# All occurrences expanded. The recurrence will span over 4 iterations of a 3-week period\nfor i in a.calendar.view(start=start, end=start + timedelta(days=4*3*7)):\n    print(i.subject, i.start, i.end)\n\n# 'modified_occurrences' and 'deleted_occurrences' of master items are read-only fields. To \n# delete or modify an occurrence, you must use 'view()' to fetch the occurrence and modify or \n# delete it:\nfor occurrence in a.calendar.view(start=start, end=start + timedelta(days=4*3*7)):\n    # Delete or update random occurrences. This will affect 'modified_occurrences' and \n    # 'deleted_occurrences' of the master item.\n    if occurrence.start.milliseconds % 2:\n        # We receive timestamps as UTC but want to write them back as local timezone\n        occurrence.start = occurrence.start.astimezone(a.default_timezone)\n        occurrence.start += timedelta(minutes=30)\n        occurrence.end = occurrence.end.astimezone(a.default_timezone)\n        occurrence.end += timedelta(minutes=30)\n        occurrence.subject = 'My new subject'\n        occurrence.save()\n    else:\n        occurrence.delete()\n```\n\n## Message timestamp fields\n\nEach `Message` item has four timestamp fields:\n\n-   `datetime_created`\n-   `datetime_sent`\n-   `datetime_received`\n-   `last_modified_time`\n\nThe values for these fields are set by the Exchange server and are not\nmodifiable via EWS. All values are timezone-aware `EWSDateTime`\ninstances.\n\nThe `datetime_sent` value may be earlier than `datetime_created`.\n\n## Out of Facility\n\nYou can get and set OOF messages using the `Account.oof_settings`\nproperty:\n\n```python\nfrom exchangelib import Account, OofSettings, EWSDateTime\n\na = Account(...)\n\n# Get the current OOF settings\na.oof_settings\n# Change the OOF settings to something else\na.oof_settings = OofSettings(\n    state=OofSettings.SCHEDULED,\n    external_audience='Known',\n    internal_reply=\"I'm in the pub. See ya guys!\",\n    external_reply=\"I'm having a business dinner in town\",\n    start=a.default_timezone.localize(EWSDateTime(2017, 11, 1, 11)),\n    end=a.default_timezone.localize(EWSDateTime(2017, 12, 1, 11)),\n)\n# Disable OOF messages\na.oof_settings = OofSettings(\n    state=OofSettings.DISABLED,\n    internal_reply='',\n    external_reply='',\n)\n```\n\n\n## Mail tips\nMail tips for an account contain some extra information about the account,\ne.g. OOF information, max message size, whether the mailbox is full, messages\nare moderated etc. Here's how to get mail tips for a single account:\n\n```python\nfrom exchangelib import Account\n\na = Account(...)\nprint(a.mail_tips)\n```\n\n\n## Delegate information\nAn account can have delegates, which are other users that are allowed to access the account.\nHere's how to fetch information about those delegates, including which level of access they\nhave to the account.\n```python\nfrom exchangelib import Account\n\na = Account(...)\nprint(a.delegates)\n```\n\n\n## Export and upload\n\nExchange supports backup and restore of folder contents using special\nexport and upload services. They are available on the `Account` model:\n\n```python\nfrom exchangelib import Account\n\na = Account(...)\nitems = a.inbox.all().only('id', 'changekey')\ndata = a.export(items)  # Pass a list of Item instances or (item_id, changekey) tuples\na.upload((a.inbox, d) for d in data)  # Restore the items. Expects a list of (folder, data) tuples\n```\n\n## Non-account methods\n\n```python\nfrom exchangelib import Account, DLMailbox\nfrom exchangelib.properties import AlternateId, EWS_ID, OWA_ID\n\na = Account(...)\n\n# Get timezone information from the server\na.protocol.get_timezones()\n\n# Get room lists defined on the server\na.protocol.get_roomlists()\n\n# Get rooms belonging to a specific room list\nfor rl in a.protocol.get_roomlists():\n    a.protocol.get_rooms(rl)\n\n# Get account information for a list of names or email addresses\nfor mailbox in a.protocol.resolve_names(['ann@example.com', 'bart@example.com']):\n    print(mailbox.email_address)\nfor mailbox, contact in a.protocol.resolve_names(['anne', 'bart'], return_full_contact_data=True):\n    print(mailbox.email_address, contact.display_name)\n\n# Get all mailboxes on a distribution list\nfor mailbox in a.protocol.expand_dl(DLMailbox(email_address='distro@example.com', mailbox_type='PublicDL')):\n    print(mailbox.email_address)\n# Or just pass a string containing the SMTP address\nfor mailbox in a.protocol.expand_dl('distro@example.com'):\n    print(mailbox.email_address)\n\n# Convert item IDs from one format to another\nfor converted_id in a.protocol.convert_ids([\n    AlternateId(id='AAA=', format=EWS_ID, mailbox=a.primary_smtp_address),\n], destination_format=OWA_ID):\n    print(converted_id)\n\n# Get searchable mailboxes. This method is only available to users who have been assigned\n# the Discovery Management RBAC role. (This feature works on Exchange 2013 onwards)\nfor mailbox in a.protocol.get_searchable_mailboxes():\n    print(mailbox)\n```\n\nEWS supports getting availability information for a set of users in a certain\ntimeframe. The server returns an object for each account containing free/busy\ninformation, including a list of calendar events in the user's calendar, and\nthe working hours and timezone of the user.\n\n```python\nfrom datetime import timedelta\nfrom exchangelib import Account, EWSDateTime\n\na = Account(...)\nstart = a.default_timezone.localize(EWSDateTime.now())\nend = start + timedelta(hours=6)\naccounts = [(a, 'Organizer', False)]\nfor busy_info in a.protocol.get_free_busy_info(accounts=accounts, start=start, end=end):\n    print(busy_info)\n```\n\nThe calendar events and working hours are returned as naive datetimes. To convert\nto timezone-aware datetimes, a bit of extra work is needed if the users are not\nknown to be in the same timezone.\n\n```python\n# Get all server timezones. We need that to convert 'working_hours_timezone'\nfrom datetime import timedelta\nfrom exchangelib import Account, EWSDateTime, EWSTimeZone\n\na = Account(...)\ntimezones = list(a.protocol.get_timezones(return_full_timezone_data=True))\n\n# Get availability information for a list of accounts\nstart = a.default_timezone.localize(EWSDateTime.now())\nend = start + timedelta(hours=6)\n# get_free_busy_info() expects a list of (account, attendee_type, exclude_conflicts) tuples\naccounts = [(a, 'Organizer', False)]\nfor busy_info in a.protocol.get_free_busy_info(accounts=accounts, start=start, end=end):\n    # Convert the TimeZone object to a Microsoft timezone ID\n    ms_id = busy_info.working_hours_timezone.to_server_timezone(timezones, start.year)\n    account_tz = EWSTimeZone.from_ms_id(ms_id)\n    print(account_tz, busy_info.working_hours)\n    for event in busy_info.calendar_events:\n        print(account_tz.localize(event.start), account_tz.localize(event.end))\n```\n\n\n## Troubleshooting\n\nIf you are having trouble using this library, the first thing to try is\nto enable debug logging. This will output a huge amount of information\nabout what is going on, most notable the actual XML documents that are\ngoing over the wire. This can be really handy to see which fields are\nbeing sent and received.\n\n```python\nimport logging\n# This handler will pretty-print and syntax highlight the request and response XML documents\nfrom exchangelib.util import PrettyXmlHandler\n\nlogging.basicConfig(level=logging.DEBUG, handlers=[PrettyXmlHandler()])\n# Your code using exchangelib goes here\n```\n\nMost class definitions have a docstring containing at least a URL to the\nMSDN page for the corresponding XML element.\n\n```python\nfrom exchangelib import CalendarItem\nprint(CalendarItem.__doc__)\n```\n\n\n# Tests\n\nThe test suite is split into unit tests, and integration tests that require a real Exchange\nserver. If you want to run the full test suite, you must provide setup parameters for\na test account. Copy `settings.yml.sample` to `settings.yml` and change the default\nparameters. If a `settings.yml` is available, we will run the entire test suite. Otherwise,\njust the unit tests are run.\n\n*WARNING*: The test account should not contain valuable data. The tests try hard to no touch\nexisting data in the account, but accidents happen.\n\nYou can run either the entire test suite or individual tests.\n\n```bash\n# Full test suite\npython setup.py test\n\n# Single test class or test case\npython -m unittest -k FolderTest.test_refresh\n# Or, if you want extreme levels of debug output:\npython -m unittest -k FolderTest.test_refresh -v\n```\n\n\n# Notes\n\nAlmost all item fields are supported. The remaining ones are tracked in\n<https://github.com/ecederstrand/exchangelib/issues/203>.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ecederstrand/exchangelib", "keywords": "ews exchange autodiscover microsoft outlook exchange-web-services o365 office365", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "exchangelib", "package_url": "https://pypi.org/project/exchangelib/", "platform": "", "project_url": "https://pypi.org/project/exchangelib/", "project_urls": {"Homepage": "https://github.com/ecederstrand/exchangelib"}, "release_url": "https://pypi.org/project/exchangelib/3.1.1/", "requires_dist": ["requests (>=2.7)", "requests-ntlm (>=0.2.0)", "dnspython (>=1.14.0)", "pytz", "lxml (>3.0)", "cached-property", "tzlocal", "python-dateutil", "pygments", "defusedxml (>=0.6.0)", "isodate", "oauthlib", "requests-oauthlib", "requests-kerberos ; extra == 'complete'", "requests-negotiate-sspi ; extra == 'complete'", "requests-kerberos ; extra == 'kerberos'", "requests-negotiate-sspi ; extra == 'sspi'"], "requires_python": ">=3.5", "summary": "Client for Microsoft Exchange Web Services (EWS)", "version": "3.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Exchange Web Services client library</h1>\n<p>This module provides an well-performing, well-behaving,\nplatform-independent and simple interface for communicating with a\nMicrosoft Exchange 2007-2016 Server or Office365 using Exchange Web\nServices (EWS). It currently implements autodiscover, and functions for\nsearching, creating, updating, deleting, exporting and uploading\ncalendar, mailbox, task, contact and distribution list items.</p>\n<p><a href=\"https://pypi.org/project/exchangelib/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/649fbebedd1b4a5534e5e36d90dcbef8d4321694/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f65786368616e67656c69622e737667\"></a>\n<a href=\"https://pypi.org/project/exchangelib/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e87b6cd9cd17f717e4b257323546965e85a2773/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f65786368616e67656c69622e737667\"></a>\n<a href=\"https://www.codacy.com/app/ecederstrand/exchangelib?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ecederstrand/exchangelib&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f6a40b821c167cc507e1d33120bf39efc282657/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3566383035616439303130353461383839663462393961383264366331636237\"></a>\n<a href=\"http://travis-ci.com/ecederstrand/exchangelib\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28ac748e3834e8b46cfba9ad85a9ea837db83a35/68747470733a2f2f6170692e7472617669732d63692e636f6d2f656365646572737472616e642f65786368616e67656c69622e706e67\"></a>\n<a href=\"https://coveralls.io/github/ecederstrand/exchangelib?branch=master\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ed66d90746e4d1fcfb4575d3d82c2baf9e36d84/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656365646572737472616e642f65786368616e67656c69622f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Teaser</h2>\n<p>Here's a short example of how <code>exchangelib</code> works. Let's print the first\n100 inbox messages in reverse order:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Credentials</span><span class=\"p\">,</span> <span class=\"n\">Account</span>\n\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'topsecret'</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-datetime_received'</span><span class=\"p\">)[:</span><span class=\"mi\">100</span><span class=\"p\">]:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">datetime_received</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<p>You can install this package from PyPI:</p>\n<pre>pip install exchangelib\n</pre>\n<p>The default installation does not support Kerberos or SSPI. For additional Kerberos or SSPI support,\ninstall with the extra <code>kerberos</code> or <code>sspi</code> dependencies (please note that SSPI is only supported on\nWindows):</p>\n<pre>pip install exchangelib<span class=\"o\">[</span>kerberos<span class=\"o\">]</span>\npip install exchangelib<span class=\"o\">[</span>sspi<span class=\"o\">]</span>\n</pre>\n<p>To get both, install as:</p>\n<pre>pip install exchangelib<span class=\"o\">[</span>complete<span class=\"o\">]</span>\n</pre>\n<p>To install the very latest code, install directly from GitHub instead:</p>\n<pre>pip install git+https://github.com/ecederstrand/exchangelib.git\n</pre>\n<p><code>exchangelib</code> uses the <code>lxml</code> package, and <code>pykerberos</code> to support Kerberos authentication.\nTo be able to install these, you may need to install some additional operating system packages.</p>\n<p>On Ubuntu:</p>\n<pre>apt-get install libxml2-dev libxslt1-dev\n\n<span class=\"c1\"># For Kerberos support, also install these:</span>\napt-get install libkrb5-dev build-essential libssl-dev libffi-dev python-dev\n</pre>\n<p>On CentOS:</p>\n<pre><span class=\"c1\"># For Kerberos support, install these:</span>\nyum install gcc python-devel krb5-devel krb5-workstation python-devel\n</pre>\n<p>On FreeBSD, <code>pip</code> needs a little help:</p>\n<pre>pkg install libxml2 libxslt\n<span class=\"nv\">CFLAGS</span><span class=\"o\">=</span>-I/usr/local/include pip install lxml\n\n<span class=\"c1\"># For Kerberos support, also install these:</span>\npkg install krb5\n<span class=\"nv\">CFLAGS</span><span class=\"o\">=</span>-I/usr/local/include pip install kerberos pykerberos\n</pre>\n<p>For other operating systems, please consult the documentation for the Python package that\nfails to install.</p>\n<h2>Setup and connecting</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">DELEGATE</span><span class=\"p\">,</span> <span class=\"n\">IMPERSONATION</span><span class=\"p\">,</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">Credentials</span><span class=\"p\">,</span> <span class=\"n\">OAuth2Credentials</span><span class=\"p\">,</span> \\\n    <span class=\"n\">OAuth2AuthorizationCodeCredentials</span><span class=\"p\">,</span> <span class=\"n\">FaultTolerance</span><span class=\"p\">,</span> <span class=\"n\">Configuration</span><span class=\"p\">,</span> <span class=\"n\">NTLM</span><span class=\"p\">,</span> <span class=\"n\">GSSAPI</span><span class=\"p\">,</span> <span class=\"n\">SSPI</span><span class=\"p\">,</span> \\\n    <span class=\"n\">OAUTH2</span><span class=\"p\">,</span> <span class=\"n\">Build</span><span class=\"p\">,</span> <span class=\"n\">Version</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.autodiscover</span> <span class=\"kn\">import</span> <span class=\"n\">AutodiscoverProtocol</span>\n\n<span class=\"c1\"># Specify your credentials. Username is usually in WINDOMAIN\\username format, where WINDOMAIN is</span>\n<span class=\"c1\"># the name of the Windows Domain your username is connected to, but some servers also</span>\n<span class=\"c1\"># accept usernames in PrimarySMTPAddress ('myusername@example.com') format (Office365 requires it).</span>\n<span class=\"c1\"># UPN format is also supported, if your server expects that.</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">Credentials</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'MYWINDOMAIN</span><span class=\"se\">\\\\</span><span class=\"s1\">myusername'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'topsecret'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you're running long-running jobs, you may want to enable fault-tolerance. Fault-tolerance</span>\n<span class=\"c1\"># means that requests to the server do an exponential backoff and sleep for up to a certain</span>\n<span class=\"c1\"># threshold before giving up, if the server is unavailable or responding with error messages.</span>\n<span class=\"c1\"># This prevents automated scripts from overwhelming a failing or overloaded server, and hides</span>\n<span class=\"c1\"># intermittent service outages that often happen in large Exchange installations.</span>\n\n<span class=\"c1\"># An Account is the account on the Exchange server that you want to connect to. This can be</span>\n<span class=\"c1\"># the account associated with the credentials you connect with, or any other account on the</span>\n<span class=\"c1\"># server that you have been granted access to. If, for example, you want to access a shared</span>\n<span class=\"c1\"># folder, create an Account instance using the email address of the account that the shared </span>\n<span class=\"c1\"># folder belongs to, and access the shared folder through this account.</span>\n\n<span class=\"c1\"># 'primary_smtp_address' is the primary SMTP address assigned the account. If you enable</span>\n<span class=\"c1\"># autodiscover, an alias address will work, too. In this case, 'Account.primary_smtp_address'</span>\n<span class=\"c1\"># will be set to the primary SMTP address.</span>\n<span class=\"n\">my_account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'myusername@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span>\n                     <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n<span class=\"n\">johns_account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span>\n                        <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n<span class=\"n\">marys_account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'mary@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span>\n                        <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n<span class=\"n\">still_marys_account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'alias_for_mary@example.com'</span><span class=\"p\">,</span>\n                              <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Full autodiscover data is availale on the Account object:</span>\n<span class=\"n\">my_account</span><span class=\"o\">.</span><span class=\"n\">ad_response</span>\n\n<span class=\"c1\"># Set up a target account and do an autodiscover lookup to find the target EWS endpoint.</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span>\n                  <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If your credentials have been given impersonation access to the target account, set a</span>\n<span class=\"c1\"># different 'access_type':</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span>\n                  <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">IMPERSONATION</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If the server doesn't support autodiscover, or you want to avoid the overhead of autodiscover,</span>\n<span class=\"c1\"># use a Configuration object to set the server location instead:</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'mail.example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n                  <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 'exchangelib' will attempt to guess the server version and authentication method. If you</span>\n<span class=\"c1\"># have a really bizarre or locked-down installation and the guessing fails, or you want to avoid</span>\n<span class=\"c1\"># the extra network traffic, you can set the auth method and version explicitly instead:</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"n\">build</span><span class=\"o\">=</span><span class=\"n\">Build</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">))</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span>\n    <span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'example.com'</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">auth_type</span><span class=\"o\">=</span><span class=\"n\">NTLM</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># By default, we fail on all exceptions from the server. If you want to enable fault</span>\n<span class=\"c1\"># tolerance, add a retry policy to your configuration. We will then retry on certain</span>\n<span class=\"c1\"># transient errors. By default, we back off exponentially and retry for up to an hour.</span>\n<span class=\"c1\"># This is configurable:</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">retry_policy</span><span class=\"o\">=</span><span class=\"n\">FaultTolerance</span><span class=\"p\">(</span><span class=\"n\">max_wait</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">),</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"s1\">'john@example.com'</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Autodiscovery will also use this policy, but only for the final autodiscover endpoint.</span>\n<span class=\"c1\"># Here's how to change the policy for connecting to autodiscover candidate servers.</span>\n<span class=\"c1\"># Old autodiscover implementation</span>\n<span class=\"kn\">import</span> <span class=\"nn\">exchangelib.autodiscover.legacy</span>\n<span class=\"n\">exchangelib</span><span class=\"o\">.</span><span class=\"n\">autodiscover</span><span class=\"o\">.</span><span class=\"n\">legacy</span><span class=\"o\">.</span><span class=\"n\">INITIAL_RETRY_POLICY</span> <span class=\"o\">=</span> <span class=\"n\">FaultTolerance</span><span class=\"p\">(</span><span class=\"n\">max_wait</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"c1\"># New autodiscover implementation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.autodiscover</span> <span class=\"kn\">import</span> <span class=\"n\">Autodiscovery</span>\n<span class=\"n\">Autodiscovery</span><span class=\"o\">.</span><span class=\"n\">INITIAL_RETRY_POLICY</span> <span class=\"o\">=</span> <span class=\"n\">FaultTolerance</span><span class=\"p\">(</span><span class=\"n\">max_wait</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Kerberos and SSPI authentication are supported via the GSSAPI and SSPI auth types.</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth_type</span><span class=\"o\">=</span><span class=\"n\">GSSAPI</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'example.com'</span><span class=\"p\">,</span> <span class=\"n\">auth_type</span><span class=\"o\">=</span><span class=\"n\">SSPI</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OAuth is supported via the OAUTH2 auth type and the OAuth2Credentials class.</span>\n<span class=\"c1\"># Use OAuth2AuthorizationCodeCredentials for the authorization code flow (useful</span>\n<span class=\"c1\"># for applications that access multiple accounts).</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">OAuth2Credentials</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'MY_ID'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'MY_SECRET'</span><span class=\"p\">,</span> <span class=\"n\">tenant_id</span><span class=\"o\">=</span><span class=\"s1\">'TENANT_ID'</span><span class=\"p\">)</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">OAuth2AuthorizationCodeCredentials</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'MY_ID'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'MY_SECRET'</span><span class=\"p\">,</span> <span class=\"n\">authorization_code</span><span class=\"o\">=</span><span class=\"s1\">'AUTH_CODE'</span><span class=\"p\">)</span>\n<span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">OAuth2AuthorizationCodeCredentials</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s1\">'MY_ID'</span><span class=\"p\">,</span> <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s1\">'MY_SECRET'</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'EXISTING_TOKEN'</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"n\">auth_type</span><span class=\"o\">=</span><span class=\"n\">OAUTH2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Applications using the authorization code flow that let exchangelib refresh</span>\n<span class=\"c1\"># access tokens for them probably want to store the refreshed tokens so users</span>\n<span class=\"c1\"># don't have to re-authorize. Subclass OAuth2AuthorizationCodeCredentials and</span>\n<span class=\"c1\"># override on_token_auto_refreshed():</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyCredentials</span><span class=\"p\">(</span><span class=\"n\">OAuth2AuthorizationCodeCredentials</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_token_auto_refreshed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"p\">):</span>\n        <span class=\"n\">store_it_somewhere</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Let the object update its internal state!</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">on_token_auto_refreshed</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For applications that use the authorization code flow and rely on an external</span>\n<span class=\"c1\"># provider to refresh access tokens (and thus are unable to provide a client ID</span>\n<span class=\"c1\"># and secret to exchangelib), subclass OAuth2AuthorizationCodeCredentials and</span>\n<span class=\"c1\"># override refresh().</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyCredentials</span><span class=\"p\">(</span><span class=\"n\">OAuth2AuthorizationCodeCredentials</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refresh</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># If you're connecting to the same account very often, you can cache the autodiscover result for</span>\n<span class=\"c1\"># later so you can skip the autodiscover lookup:</span>\n<span class=\"n\">ews_url</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">service_endpoint</span>\n<span class=\"n\">ews_auth_type</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">auth_type</span>\n<span class=\"n\">primary_smtp_address</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">primary_smtp_address</span>\n\n<span class=\"c1\"># You can now create the Account without autodiscovering, using the cached values:</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"n\">service_endpoint</span><span class=\"o\">=</span><span class=\"n\">ews_url</span><span class=\"p\">,</span> <span class=\"n\">credentials</span><span class=\"o\">=</span><span class=\"n\">credentials</span><span class=\"p\">,</span> <span class=\"n\">auth_type</span><span class=\"o\">=</span><span class=\"n\">ews_auth_type</span><span class=\"p\">)</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span>\n    <span class=\"n\">primary_smtp_address</span><span class=\"o\">=</span><span class=\"n\">primary_smtp_address</span><span class=\"p\">,</span> \n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">autodiscover</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> \n    <span class=\"n\">access_type</span><span class=\"o\">=</span><span class=\"n\">DELEGATE</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Autodiscover can take a lot of time, specially the part that figures out the autodiscover </span>\n<span class=\"c1\"># server to contact for a specific email domain. For this reason, we will create a persistent, </span>\n<span class=\"c1\"># per-user, on-disk cache containing a map of previous, successful domain -&gt; autodiscover server</span>\n<span class=\"c1\"># lookups. This cache is shared between processes and is not deleted when your program exits.</span>\n\n<span class=\"c1\"># A cache entry for a domain is removed automatically if autodiscovery fails for an email in that</span>\n<span class=\"c1\"># domain. It's possible to clear the entire cache completely if you want:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.autodiscover</span> <span class=\"kn\">import</span> <span class=\"n\">clear_cache</span>\n<span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n</pre>\n<h2>Proxies and custom TLS validation</h2>\n<p>If you need proxy support or custom TLS validation, you can supply a\ncustom 'requests' transport adapter class, as described in\n<a href=\"http://docs.python-requests.org/en/master/user/advanced/#transport-adapters\" rel=\"nofollow\">http://docs.python-requests.org/en/master/user/advanced/#transport-adapters</a>.</p>\n<p>Here's an example using different custom root certificates depending on\nthe server to connect to:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests.adapters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.protocol</span> <span class=\"kn\">import</span> <span class=\"n\">BaseProtocol</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RootCAAdapter</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">HTTPAdapter</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"An HTTP adapter that uses a custom root CA certificate at a hard coded location\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cert_verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"p\">,</span> <span class=\"n\">cert</span><span class=\"p\">):</span>\n        <span class=\"n\">cert_file</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'example.com'</span><span class=\"p\">:</span> <span class=\"s1\">'/path/to/example.com.crt'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'mail.internal'</span><span class=\"p\">:</span> <span class=\"s1\">'/path/to/mail.internal.crt'</span><span class=\"p\">,</span>\n        <span class=\"p\">}[</span><span class=\"n\">urlparse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hostname</span><span class=\"p\">]</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cert_verify</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"o\">=</span><span class=\"n\">conn</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"n\">cert_file</span><span class=\"p\">,</span> <span class=\"n\">cert</span><span class=\"o\">=</span><span class=\"n\">cert</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tell exchangelib to use this adapter class instead of the default</span>\n<span class=\"n\">BaseProtocol</span><span class=\"o\">.</span><span class=\"n\">HTTP_ADAPTER_CLS</span> <span class=\"o\">=</span> <span class=\"n\">RootCAAdapter</span>\n</pre>\n<p>Here's an example of adding proxy support:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests.adapters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.protocol</span> <span class=\"kn\">import</span> <span class=\"n\">BaseProtocol</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProxyAdapter</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">adapters</span><span class=\"o\">.</span><span class=\"n\">HTTPAdapter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'proxies'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'http'</span><span class=\"p\">:</span> <span class=\"s1\">'http://10.0.0.1:1243'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'https'</span><span class=\"p\">:</span> <span class=\"s1\">'http://10.0.0.1:4321'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Tell exchangelib to use this adapter class instead of the default</span>\n<span class=\"n\">BaseProtocol</span><span class=\"o\">.</span><span class=\"n\">HTTP_ADAPTER_CLS</span> <span class=\"o\">=</span> <span class=\"n\">ProxyAdapter</span>\n</pre>\n<p><code>exchangelib</code> provides a sample adapter which ignores TLS validation\nerrors. Use at own risk.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib.protocol</span> <span class=\"kn\">import</span> <span class=\"n\">BaseProtocol</span><span class=\"p\">,</span> <span class=\"n\">NoVerifyHTTPAdapter</span>\n\n<span class=\"c1\"># Tell exchangelib to use this adapter class instead of the default</span>\n<span class=\"n\">BaseProtocol</span><span class=\"o\">.</span><span class=\"n\">HTTP_ADAPTER_CLS</span> <span class=\"o\">=</span> <span class=\"n\">NoVerifyHTTPAdapter</span>\n</pre>\n<h2>User-Agent</h2>\n<p>You can supply a custom 'User-Agent' for your application.\nBy default, <code>exchangelib</code> will use: <code>exchangelib/&lt;version&gt; (python-requests/&lt;version&gt;)</code></p>\n<p>Here's an example using different User-Agent:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib.protocol</span> <span class=\"kn\">import</span> <span class=\"n\">BaseProtocol</span>\n\n<span class=\"c1\"># Tell exchangelib to use this user-agent instead of the default</span>\n<span class=\"n\">BaseProtocol</span><span class=\"o\">.</span><span class=\"n\">USERAGENT</span> <span class=\"o\">=</span> <span class=\"s2\">\"Auto-Reply/0.1.0\"</span>\n</pre>\n<h2>Folders</h2>\n<p>All wellknown folders are available as properties on the account, e.g. as <code>account.root</code>, <code>account.calendar</code>,\n<code>account.trash</code>, <code>account.inbox</code>, <code>account.outbox</code>, <code>account.sent</code>, <code>account.junk</code>, <code>account.tasks</code> and\n<code>account.contacts</code>.</p>\n<pre><span class=\"c1\"># There are multiple ways of navigating the folder tree and searching for folders. Globbing and </span>\n<span class=\"c1\"># absolute path may create unexpected results if your folder names contain slashes.</span>\n\n<span class=\"c1\"># The folder structure is cached after first access to a folder hierarchy. This means that external</span>\n<span class=\"c1\"># changes to the folder structure will not show up until you clear the cache. Here's how to clear</span>\n<span class=\"c1\"># the cache of each of the currently supported folder hierarchies:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">Folder</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">public_folders_root</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">archive_root</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n<span class=\"n\">some_folder</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">root</span> <span class=\"o\">/</span> <span class=\"s1\">'Some Folder'</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">root</span>  <span class=\"c1\"># Returns the root of the folder structure, at any level. Same as Account.root</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">children</span>  <span class=\"c1\"># A generator of child folders</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">absolute</span>  <span class=\"c1\"># Returns the absolute path, as a string</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">()</span>  <span class=\"c1\"># A generator returning all subfolders at arbitrary depth this level</span>\n<span class=\"c1\"># Globbing uses the normal UNIX globbing syntax</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'foo*'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return child folders matching the pattern</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'*/foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return subfolders named 'foo' in any child folder</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'**/foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return subfolders named 'foo' at any depth</span>\n<span class=\"n\">some_folder</span> <span class=\"o\">/</span> <span class=\"s1\">'sub_folder'</span> <span class=\"o\">/</span> <span class=\"s1\">'even_deeper'</span> <span class=\"o\">/</span> <span class=\"s1\">'leaf'</span>  <span class=\"c1\"># Works like pathlib.Path</span>\n<span class=\"c1\"># You can also drill down into the folder structure without using the cache. This works like</span>\n<span class=\"c1\"># the single slash syntax, but does not start by creating a cache the folder hierarchy. This is</span>\n<span class=\"c1\"># useful if your account contains a huge number of folders, and you already know where to go.</span>\n<span class=\"n\">some_folder</span> <span class=\"o\">//</span> <span class=\"s1\">'sub_folder'</span> <span class=\"o\">//</span> <span class=\"s1\">'even_deeper'</span> <span class=\"o\">//</span> <span class=\"s1\">'leaf'</span>\n<span class=\"n\">some_folder</span><span class=\"o\">.</span><span class=\"n\">parts</span>  <span class=\"c1\"># returns some_folder and all its parents, as Folder instances</span>\n<span class=\"c1\"># tree() returns a string representation of the tree structure at the given level</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">tree</span><span class=\"p\">())</span>\n<span class=\"sd\">'''</span>\n<span class=\"sd\">root</span>\n<span class=\"sd\">\u251c\u2500\u2500 inbox</span>\n<span class=\"sd\">\u2502   \u2514\u2500\u2500 todos</span>\n<span class=\"sd\">\u2514\u2500\u2500 archive</span>\n<span class=\"sd\">    \u251c\u2500\u2500 Last Job</span>\n<span class=\"sd\">    \u251c\u2500\u2500 exchangelib issues</span>\n<span class=\"sd\">    \u2514\u2500\u2500 Mom</span>\n<span class=\"sd\">'''</span>\n\n<span class=\"c1\"># Folders have some useful counters:</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">total_count</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">child_folder_count</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">unread_count</span>\n<span class=\"c1\"># Update the counters</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Folders can be created, updated and deleted:</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Folder</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'My New Folder'</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'My New Subfolder'</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Delete all items in a folder</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">()</span>\n<span class=\"c1\"># Also delete all subfolders in the folder</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">delete_sub_folders</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Recursively delete all items in a folder, and all subfolders and their content. This is</span>\n<span class=\"c1\"># like `empty(delete_sub_folders=True)` but attempts to protect distinguished folders from</span>\n<span class=\"c1\"># being deleted. Use with caution!</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">wipe</span><span class=\"p\">()</span>\n</pre>\n<h2>Dates, datetimes and timezones</h2>\n<p>EWS has some special requirements on datetimes and timezones. You need\nto use the special <code>EWSDate</code>, <code>EWSDateTime</code> and <code>EWSTimeZone</code> classes\nwhen working with dates.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytz</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">EWSTimeZone</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span><span class=\"p\">,</span> <span class=\"n\">EWSDate</span>\n\n<span class=\"c1\"># EWSTimeZone works just like pytz.timezone()</span>\n<span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"n\">EWSTimeZone</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'Europe/Copenhagen'</span><span class=\"p\">)</span>\n<span class=\"c1\"># You can also get the local timezone defined in your operating system</span>\n<span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"n\">EWSTimeZone</span><span class=\"o\">.</span><span class=\"n\">localzone</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># EWSDate and EWSDateTime work just like datetime.datetime and datetime.date. Always create</span>\n<span class=\"c1\"># timezone-aware datetimes with EWSTimeZone.localize():</span>\n<span class=\"n\">localized_dt</span> <span class=\"o\">=</span> <span class=\"n\">tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n<span class=\"n\">right_now</span> <span class=\"o\">=</span> <span class=\"n\">tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Datetime math works transparently</span>\n<span class=\"n\">two_hours_later</span> <span class=\"o\">=</span> <span class=\"n\">localized_dt</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">two_hours</span> <span class=\"o\">=</span> <span class=\"n\">two_hours_later</span> <span class=\"o\">-</span> <span class=\"n\">localized_dt</span>\n<span class=\"n\">two_hours_later</span> <span class=\"o\">+=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Dates</span>\n<span class=\"n\">my_date</span> <span class=\"o\">=</span> <span class=\"n\">EWSDate</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">today</span> <span class=\"o\">=</span> <span class=\"n\">EWSDate</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n<span class=\"n\">also_today</span> <span class=\"o\">=</span> <span class=\"n\">right_now</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">()</span>\n<span class=\"n\">also_today</span> <span class=\"o\">+=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># UTC helpers. 'UTC' is the UTC timezone as an EWSTimeZone instance.</span>\n<span class=\"c1\"># 'UTC_NOW' returns a timezone-aware UTC timestamp of current time.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">UTC</span><span class=\"p\">,</span> <span class=\"n\">UTC_NOW</span>\n\n<span class=\"n\">right_now_in_utc</span> <span class=\"o\">=</span> <span class=\"n\">UTC</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">right_now_in_utc</span> <span class=\"o\">=</span> <span class=\"n\">UTC_NOW</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Already have a Python datetime object you want to use? Make sure it's localized. Then pass </span>\n<span class=\"c1\"># it to from_datetime().</span>\n<span class=\"n\">pytz_tz</span> <span class=\"o\">=</span> <span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'Europe/Copenhagen'</span><span class=\"p\">)</span>\n<span class=\"n\">py_dt</span> <span class=\"o\">=</span> <span class=\"n\">pytz_tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"n\">ews_now</span> <span class=\"o\">=</span> <span class=\"n\">EWSDateTime</span><span class=\"o\">.</span><span class=\"n\">from_datetime</span><span class=\"p\">(</span><span class=\"n\">py_dt</span><span class=\"p\">)</span>\n</pre>\n<h2>Creating, updating, deleting, sending, moving, archiving</h2>\n<pre><span class=\"c1\"># Here's an example of creating a calendar item in the user's standard calendar.  If you want to</span>\n<span class=\"c1\"># access a non-standard calendar, choose a different one from account.folders[Calendar].</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># You can create, update and delete single items:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">Mailbox</span><span class=\"p\">,</span> <span class=\"n\">FileAttachment</span><span class=\"p\">,</span> <span class=\"n\">HTMLBody</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.items</span> <span class=\"kn\">import</span> <span class=\"n\">SEND_ONLY_TO_ALL</span><span class=\"p\">,</span> <span class=\"n\">SEND_ONLY_TO_CHANGED</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.properties</span> <span class=\"kn\">import</span> <span class=\"n\">DistinguishedFolderId</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">CalendarItem</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># This gives the item an 'id' and a 'changekey' value</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">send_meeting_invitations</span><span class=\"o\">=</span><span class=\"n\">SEND_ONLY_TO_ALL</span><span class=\"p\">)</span>  <span class=\"c1\"># Send a meeting invitation to attendees</span>\n<span class=\"c1\"># Update a field. All fields have a corresponding Python type that must be used.</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"s1\">'bar'</span>\n<span class=\"c1\"># Print all available fields on the 'CalendarItem' class. Beware that some fields are read-only, or</span>\n<span class=\"c1\"># read-only after the item has been saved or sent, and some fields are not supported on old</span>\n<span class=\"c1\"># versions of Exchange.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">CalendarItem</span><span class=\"o\">.</span><span class=\"n\">FIELDS</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># When the items has an item_id, this will update the item</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'subject'</span><span class=\"p\">])</span>  <span class=\"c1\"># Only updates certain fields. Accepts a list of field names.</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">send_meeting_invitations</span><span class=\"o\">=</span><span class=\"n\">SEND_ONLY_TO_CHANGED</span><span class=\"p\">)</span>  <span class=\"c1\"># Send invites only to attendee changes</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>  <span class=\"c1\"># Hard deletinon</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">send_meeting_cancellations</span><span class=\"o\">=</span><span class=\"n\">SEND_ONLY_TO_ALL</span><span class=\"p\">)</span>  <span class=\"c1\"># Send cancellations to all attendees</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">soft_delete</span><span class=\"p\">()</span>  <span class=\"c1\"># Delete, but keep a copy in the recoverable items folder</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">move_to_trash</span><span class=\"p\">()</span>  <span class=\"c1\"># Move to the trash folder</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">trash</span><span class=\"p\">)</span>  <span class=\"c1\"># Also moves the item to the trash folder</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">trash</span><span class=\"p\">)</span>  <span class=\"c1\"># Creates a copy of the item to the trash folder</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">archive</span><span class=\"p\">(</span><span class=\"n\">DistinguishedFolderId</span><span class=\"p\">(</span><span class=\"s1\">'inbox'</span><span class=\"p\">))</span>  <span class=\"c1\"># Archives the item to inbox of the the archive mailbox</span>\n\n<span class=\"c1\"># You can also send emails. If you don't want a local copy:</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n    <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Daily motivation'</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'All bodies are beautiful'</span><span class=\"p\">,</span>\n    <span class=\"n\">to_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Mailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'anne@example.com'</span><span class=\"p\">),</span>\n        <span class=\"n\">Mailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'bob@example.com'</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">cc_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'carl@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'denice@example.com'</span><span class=\"p\">],</span>  <span class=\"c1\"># Simple strings work, too</span>\n    <span class=\"n\">bcc_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">Mailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'erik@example.com'</span><span class=\"p\">),</span>\n        <span class=\"s1\">'felicity@example.com'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>  <span class=\"c1\"># Or a mix of both</span>\n<span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Or, if you want a copy in e.g. the 'Sent' folder</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n    <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span>\n    <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">sent</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Daily motivation'</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'All bodies are beautiful'</span><span class=\"p\">,</span>\n    <span class=\"n\">to_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Mailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'anne@example.com'</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">send_and_save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Likewise, you can reply to and forward messages that are stored in your mailbox (i.e. they</span>\n<span class=\"c1\"># have an item ID).</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">sent</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Daily motivation'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">reply</span><span class=\"p\">(</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Re: Daily motivation'</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'I agree'</span><span class=\"p\">,</span>\n    <span class=\"n\">to_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'carl@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'denice@example.com'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">reply_all</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Re: Daily motivation'</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'I agree'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">forward</span><span class=\"p\">(</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Fwd: Daily motivation'</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'Hey, look at this!'</span><span class=\"p\">,</span> \n    <span class=\"n\">to_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'carl@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'denice@example.com'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># You can also edit a draft of a reply or forward</span>\n<span class=\"n\">forward_draft</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">create_forward</span><span class=\"p\">(</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Fwd: Daily motivation'</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'Hey, look at this!'</span><span class=\"p\">,</span>\n    <span class=\"n\">to_recipients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'carl@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'denice@example.com'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">drafts</span><span class=\"p\">)</span> <span class=\"c1\"># gives you back the item</span>\n<span class=\"n\">forward_draft</span><span class=\"o\">.</span><span class=\"n\">reply_to</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'erik@example.com'</span><span class=\"p\">]</span>\n<span class=\"n\">forward_draft</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">FileAttachment</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_file.txt'</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s1\">'hello world'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)))</span>\n<span class=\"n\">forward_draft</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span> <span class=\"c1\"># now our forward has an extra reply_to field and an extra attachment.</span>\n\n<span class=\"c1\"># EWS distinguishes between plain text and HTML body contents. If you want to send HTML body</span>\n<span class=\"c1\"># content, use the HTMLBody helper. Clients will see this as HTML and display the body correctly:</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">HTMLBody</span><span class=\"p\">(</span><span class=\"s1\">'&lt;html&gt;&lt;body&gt;Hello happy &lt;blink&gt;OWA user!&lt;/blink&gt;&lt;/body&gt;&lt;/html&gt;'</span><span class=\"p\">)</span>\n</pre>\n<h2>Bulk operations</h2>\n<pre><span class=\"c1\"># Build a list of calendar items</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span><span class=\"p\">,</span> <span class=\"n\">EWSTimeZone</span><span class=\"p\">,</span> <span class=\"n\">Attendee</span><span class=\"p\">,</span> <span class=\"n\">Mailbox</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.properties</span> <span class=\"kn\">import</span> <span class=\"n\">DistinguishedFolderId</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"n\">EWSTimeZone</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'Europe/Copenhagen'</span><span class=\"p\">)</span>\n<span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">20</span>\n<span class=\"n\">calendar_items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">hour</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">):</span>\n    <span class=\"n\">calendar_items</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">CalendarItem</span><span class=\"p\">(</span>\n        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)),</span>\n        <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"n\">hour</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)),</span>\n        <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Test item'</span><span class=\"p\">,</span>\n        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'Hello from Python'</span><span class=\"p\">,</span>\n        <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s1\">'devnull'</span><span class=\"p\">,</span>\n        <span class=\"n\">categories</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">],</span>\n        <span class=\"n\">required_attendees</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Attendee</span><span class=\"p\">(</span>\n            <span class=\"n\">mailbox</span><span class=\"o\">=</span><span class=\"n\">Mailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'user1@example.com'</span><span class=\"p\">),</span>\n            <span class=\"n\">response_type</span><span class=\"o\">=</span><span class=\"s1\">'Accept'</span>\n        <span class=\"p\">)]</span>\n    <span class=\"p\">))</span>\n\n<span class=\"c1\"># Create all items at once</span>\n<span class=\"n\">return_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">calendar_items</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Bulk fetch, when you have a list of item IDs and want the full objects. Returns a generator.</span>\n<span class=\"n\">calendar_ids</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">changekey</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">calendar_items</span><span class=\"p\">]</span>\n<span class=\"n\">items_iter</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">calendar_ids</span><span class=\"p\">)</span>\n<span class=\"c1\"># If you only want some fields, use the 'only_fields' attribute</span>\n<span class=\"n\">items_iter</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">calendar_ids</span><span class=\"p\">,</span> <span class=\"n\">only_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'subject'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Bulk update items. Each item must be accompanied by a list of attributes to update</span>\n<span class=\"n\">updated_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_update</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'start'</span><span class=\"p\">,</span> <span class=\"s1\">'subject'</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">calendar_items</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Move many items to a new folder</span>\n<span class=\"n\">new_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_move</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">calendar_ids</span><span class=\"p\">,</span> <span class=\"n\">to_folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">other_calendar</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Send draft messages in bulk</span>\n<span class=\"n\">message_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">drafts</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'changekey'</span><span class=\"p\">)</span>\n<span class=\"n\">new_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_send</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">message_ids</span><span class=\"p\">,</span> <span class=\"n\">save_copy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete in bulk</span>\n<span class=\"n\">delete_results</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_delete</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">calendar_ids</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Archive in bulk</span>\n<span class=\"n\">delete_results</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_archive</span><span class=\"p\">(</span><span class=\"n\">ids</span><span class=\"o\">=</span><span class=\"n\">calendar_ids</span><span class=\"p\">,</span> <span class=\"n\">to_folder</span><span class=\"o\">=</span><span class=\"n\">DistinguishedFolderId</span><span class=\"p\">(</span><span class=\"s1\">'inbox'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Bulk delete items found as a queryset</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Likewise, you can bulk send, copy, move or archive items found in a QuerySet</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">drafts</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n<span class=\"c1\"># All kwargs are passed on to the equivalent bulk methods on the Account</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">drafts</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">save_copy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">to_folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span> <span class=\"o\">/</span> <span class=\"s1\">'Archive'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">to_folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span> <span class=\"o\">/</span> <span class=\"s1\">'Archive'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">archive</span><span class=\"p\">(</span><span class=\"n\">to_folder</span><span class=\"o\">=</span><span class=\"n\">DistinguishedFolderId</span><span class=\"p\">(</span><span class=\"s1\">'inbox'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># You can change the default page size of bulk operations if you have a slow or busy server</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'Invoice'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">page_size</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre>\n<h2>Searching</h2>\n<p>Searching is modeled after the Django QuerySet API, and a large part of\nthe API is supported. Like in Django, the QuerySet is lazy and doesn't\nfetch anything before the QuerySet is iterated. QuerySets support\nchaining, so you can build the final query in multiple steps, and you\ncan re-use a base QuerySet for multiple sub-searches. The QuerySet\nreturns an iterator, and results are cached when the QuerySet is fully\niterated the first time.</p>\n<p>Here are some examples of using the API:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span><span class=\"p\">,</span> <span class=\"n\">FolderCollection</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Not all fields on an item support searching. Here's the list of options for Message items</span>\n<span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">FIELDS</span> <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">is_searchable</span><span class=\"p\">])</span>\n\n<span class=\"n\">all_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># Get everything</span>\n<span class=\"n\">all_items_without_caching</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">iterator</span><span class=\"p\">()</span>  <span class=\"c1\"># Get everything, but don't cache</span>\n<span class=\"c1\"># Chain multiple modifiers to refine the query</span>\n<span class=\"n\">filtered_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__contains</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">categories__icontains</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n<span class=\"n\">status_report</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>  <span class=\"c1\"># Delete the items returned by the QuerySet</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">items_for_2017</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">))</span>  <span class=\"c1\"># Filter by a date range</span>\n\n<span class=\"c1\"># Same as filter() but throws an error if exactly one item isn't returned</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'unique_string'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you only have the ID and possibly the changekey of an item, you can get the full item:</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'AAMkADQy='</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'AAMkADQy='</span><span class=\"p\">,</span> <span class=\"n\">changekey</span><span class=\"o\">=</span><span class=\"s1\">'FwAAABYA'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can sort by a single or multiple fields. Prefix a field with '-' to reverse the sorting. </span>\n<span class=\"c1\"># Sorting is efficient since it is done server-side, except when a calendar view sorting on </span>\n<span class=\"c1\"># multiple fields.</span>\n<span class=\"n\">ordered_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'subject'</span><span class=\"p\">)</span>\n<span class=\"n\">reverse_ordered_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)</span>\n <span class=\"c1\"># Indexed properties can be ordered on their individual components</span>\n<span class=\"n\">sorted_by_home_street</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'physical_addresses__Home__street'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Beware that sorting is done client-side here</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'subject'</span><span class=\"p\">,</span> <span class=\"s1\">'categories'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Counting and exists</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>  <span class=\"c1\"># Efficient counting</span>\n<span class=\"n\">folder_is_empty</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>  <span class=\"c1\"># Efficient tasting</span>\n\n<span class=\"c1\"># Restricting returned attributes</span>\n<span class=\"n\">sparse_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'subject'</span><span class=\"p\">,</span> <span class=\"s1\">'start'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Dig deeper on indexed properties</span>\n<span class=\"n\">sparse_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'phone_numbers'</span><span class=\"p\">)</span>\n<span class=\"n\">sparse_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'phone_numbers__CarPhone'</span><span class=\"p\">)</span>\n<span class=\"n\">sparse_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'physical_addresses__Home__street'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Return values as dicts, not objects</span>\n<span class=\"n\">ids_as_dict</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'changekey'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Return values as nested lists</span>\n<span class=\"n\">values_as_list</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'subject'</span><span class=\"p\">,</span> <span class=\"s1\">'body'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Return values as a flat list</span>\n<span class=\"n\">all_subjects</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'physical_addresses__Home__street'</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A QuerySet can be indexed and sliced like a normal Python list. Slicing and indexing of the</span>\n<span class=\"c1\"># QuerySet is efficient because it only fetches the necessary items to perform the slicing.</span>\n<span class=\"c1\"># Slicing from the end is also efficient, but then you might as well reverse the sorting.</span>\n<span class=\"n\">first_ten</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[:</span><span class=\"mi\">10</span><span class=\"p\">]</span>  <span class=\"c1\"># Efficient. We only fetch 10 items</span>\n<span class=\"n\">last_ten</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[:</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">]</span>  <span class=\"c1\"># Efficient, but convoluted</span>\n<span class=\"n\">next_ten</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">20</span><span class=\"p\">]</span>  <span class=\"c1\"># Efficient. We only fetch 10 items</span>\n<span class=\"n\">single_item</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[</span><span class=\"mi\">34298</span><span class=\"p\">]</span>  <span class=\"c1\"># Efficient. We only fetch 1 item</span>\n<span class=\"n\">ten_items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[</span><span class=\"mi\">3420</span><span class=\"p\">:</span><span class=\"mi\">3430</span><span class=\"p\">]</span>  <span class=\"c1\"># Efficient. We only fetch 10 items</span>\n<span class=\"n\">random_emails</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-subject'</span><span class=\"p\">)[::</span><span class=\"mi\">3</span><span class=\"p\">]</span>  <span class=\"c1\"># This is just stupid, but works</span>\n\n<span class=\"c1\"># The syntax for filter() is modeled after Django QuerySet filters. The following filter lookup </span>\n<span class=\"c1\"># types are supported. Some lookups only work with string attributes. Range and less/greater </span>\n<span class=\"c1\"># operators only work for date or numerical attributes. Some attributes are not searchable at all </span>\n<span class=\"c1\"># via EWS:</span>\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items where subject is exactly 'foo'. Case-sensitive</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">))</span>  <span class=\"c1\"># Returns items within range</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__in</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">))</span>  <span class=\"c1\"># Return items where subject is either 'foo' or 'bar'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__not</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items where subject is not 'foo'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__gt</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items starting after 'dt'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__gte</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items starting on or after 'dt'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__lt</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items starting before 'dt'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__lte</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items starting on or before 'dt'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__exact</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Same as filter(subject='foo')</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__iexact</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\">#  Returns items where subject is 'foo', 'FOO' or 'Foo'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__contains</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items where subject contains 'foo'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__icontains</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items where subject contains 'foo', 'FOO' or 'Foo'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>  <span class=\"c1\"># Returns items where subject starts with 'foo'</span>\n<span class=\"c1\"># Returns items where subject starts with 'foo', 'FOO' or 'Foo'</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject__istartswith</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns items that have at least one category assigned, i.e. the field exists on the item on the </span>\n<span class=\"c1\"># server.</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">categories__exists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Returns items that have no categories set, i.e. the field does not exist on the item on the </span>\n<span class=\"c1\"># server.</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">categories__exists</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># WARNING: Filtering on the 'body' field is not fully supported by EWS. There seems to be a window</span>\n<span class=\"c1\"># before some internal search index is populated where case-sensitive or case-insensitive filtering</span>\n<span class=\"c1\"># for substrings in the body element incorrectly returns an empty result, and sometimes the result</span>\n<span class=\"c1\"># stays empty.</span>\n\n<span class=\"c1\"># filter() also supports EWS QueryStrings. Just pass the string to filter(). QueryStrings cannot</span>\n<span class=\"c1\"># be combined with other filters. We make no attempt at validating the syntax of the QueryString </span>\n<span class=\"c1\"># - we just pass the string verbatim to EWS.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Read more about the QueryString syntax here:</span>\n<span class=\"c1\"># https://docs.microsoft.com/en-us/exchange/client-developer/web-service-reference/querystring-querystringtype</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s1\">'subject:XXX'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># filter() also supports Q objects that are modeled after Django Q objects, for building complex</span>\n<span class=\"c1\"># boolean logic search expressions.</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subject__iexact</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subject__contains</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">))</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">subject__startswith</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># In this example, we filter by categories so we only get the items created by us.</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">start__lt</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n    <span class=\"n\">end__gt</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)),</span>\n    <span class=\"n\">categories__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># By default, EWS returns only the master recurring item. If you want recurring calendar</span>\n<span class=\"c1\"># items to be expanded, use calendar.view(start=..., end=...) instead.</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)),</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can combine view() with other modifiers. For example, to check for conflicts before </span>\n<span class=\"c1\"># adding a meeting from 8:00 to 10:00:</span>\n<span class=\"n\">has_conflicts</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)),</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)),</span>\n    <span class=\"n\">max_items</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The filtering syntax also works on collections of folders, so you can search multiple folders in </span>\n<span class=\"c1\"># a single request.</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'foo*'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or select the folders individually</span>\n<span class=\"n\">FolderCollection</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">folders</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n</pre>\n<h2>Paging</h2>\n<p>Paging EWS services, e.g. FindItem and, have a default page size of 100. You can\nchange this value globally if you want:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">exchangelib.services</span>\n<span class=\"n\">exchangelib</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"o\">.</span><span class=\"n\">CHUNK_SIZE</span> <span class=\"o\">=</span> <span class=\"mi\">25</span>\n</pre>\n<p>If you are working with very small or very large items, this may not be a reasonable\nvalue. For example, if you want to retrieve and save emails with large attachments,\nyou can change this value on a per-queryset basis:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'mime_content'</span><span class=\"p\">)</span>\n<span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">page_size</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">iterator</span><span class=\"p\">():</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">.eml'</span> <span class=\"o\">%</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">item_id</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">mime_content</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, the bulk methods defined on the <code>Account</code> class have an optional <code>chunk_size</code>\nargument that you can use to set a non-default page size when fetching, creating, updating\nor deleting items.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">huge_list_of_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)]</span>\n<span class=\"n\">return_ids</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">huge_list_of_items</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<h2>Meetings</h2>\n<p>The <code>CalendarItem</code> class allows you send out requests for meetings that\nyou initiate or to cancel meetings that you already set out before. It\nis also possible to process <code>MeetingRequest</code> messages that are received.\nYou can reply to these messages using the <code>AcceptItem</code>,\n<code>TentativelyAcceptItem</code> and <code>DeclineItem</code> classes. If you receive a\ncancellation for a meeting (class <code>MeetingCancellation</code>) that you\nalready accepted then you can also process these by removing the entry\nfrom the calendar.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.items</span> <span class=\"kn\">import</span> <span class=\"n\">MeetingRequest</span><span class=\"p\">,</span> <span class=\"n\">MeetingCancellation</span><span class=\"p\">,</span> <span class=\"n\">SEND_TO_ALL_AND_SAVE_COPY</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a meeting request and send it out</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">CalendarItem</span><span class=\"p\">(</span>\n    <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"p\">,</span>\n    <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)),</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">)),</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"Subject of Meeting\"</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"Please come to my meeting\"</span><span class=\"p\">,</span>\n    <span class=\"n\">required_attendees</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'anne@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'bob@example.com'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">send_meeting_invitations</span><span class=\"o\">=</span><span class=\"n\">SEND_TO_ALL_AND_SAVE_COPY</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># cancel a meeting that was sent out using the CalendarItem class</span>\n<span class=\"k\">for</span> <span class=\"n\">calendar_item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-datetime_received'</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"c1\"># only the organizer of a meeting can cancel it</span>\n    <span class=\"k\">if</span> <span class=\"n\">calendar_item</span><span class=\"o\">.</span><span class=\"n\">organizer</span><span class=\"o\">.</span><span class=\"n\">email_address</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">primary_smtp_address</span><span class=\"p\">:</span>\n        <span class=\"n\">calendar_item</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># processing an incoming MeetingRequest</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-datetime_received'</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">MeetingRequest</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"Sure, I'll come\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Or:</span>\n        <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">decline</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"No way!\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Or:</span>\n        <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">tentatively_accept</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">\"Maybe...\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># meeting requests can also be handled from the calendar - e.g. decline the meeting that was </span>\n<span class=\"c1\"># received last.</span>\n<span class=\"k\">for</span> <span class=\"n\">calendar_item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-datetime_received'</span><span class=\"p\">)[:</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n    <span class=\"n\">calendar_item</span><span class=\"o\">.</span><span class=\"n\">decline</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># processing an incoming MeetingCancellation (also delete from calendar)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'-datetime_received'</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">MeetingCancellation</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">associated_calendar_item_id</span><span class=\"p\">:</span>\n            <span class=\"n\">calendar_item</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">associated_calendar_item_id</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n                <span class=\"n\">changekey</span><span class=\"o\">=</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">associated_calendar_item_id</span><span class=\"o\">.</span><span class=\"n\">changekey</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">calendar_item</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">move_to_trash</span><span class=\"p\">()</span>\n</pre>\n<h2>Contacts</h2>\n<p>Fetching personas from a contact folder is supported using the same\nsyntax as folders. Just start your query with <code>.people()</code>:</p>\n<pre><span class=\"c1\"># Navigate to a contact folder and start the search</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">DistributionList</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.indexed_properties</span> <span class=\"kn\">import</span> <span class=\"n\">EmailAddress</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">root</span> <span class=\"o\">/</span> <span class=\"s1\">'AllContacts'</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'display_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s1\">'john'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'display_name'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Getting a single contact in the GAL contact list</span>\n<span class=\"n\">gal</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span> <span class=\"o\">/</span> <span class=\"s1\">'GAL Contacts'</span>\n<span class=\"n\">contact</span> <span class=\"o\">=</span> <span class=\"n\">gal</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">email_addresses</span><span class=\"o\">=</span><span class=\"n\">EmailAddress</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'lucas@example.com'</span><span class=\"p\">))</span>\n<span class=\"c1\"># All contacts with a gmail address</span>\n<span class=\"n\">gmail_contacts</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gal</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">email_addresses__contains</span><span class=\"o\">=</span><span class=\"n\">EmailAddress</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'gmail.com'</span><span class=\"p\">)))</span>\n<span class=\"c1\"># All Gmail email addresses</span>\n<span class=\"n\">gmail_addresses</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span>\n                   <span class=\"n\">gal</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">email_addresses__contains</span><span class=\"o\">=</span><span class=\"n\">EmailAddress</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'gmail.com'</span><span class=\"p\">))</span>\n                   <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">email_addresses</span><span class=\"p\">]</span>\n<span class=\"c1\"># All email addresses</span>\n<span class=\"n\">all_addresses</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">gal</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n                 <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">email_addresses</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">DistributionList</span><span class=\"p\">)]</span>\n</pre>\n<p>Contact items have <code>photo</code> and <code>notes</code> fields, but they are apparently unused. Instead, you can\nadd a contact photo and notes like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">FileAttachment</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">contact</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">contacts</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">given_name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">)</span>\n<span class=\"n\">contact</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s1\">'This is a note'</span>\n<span class=\"n\">contact</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">])</span>\n<span class=\"n\">att</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachment</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'ContactPicture.jpg'</span><span class=\"p\">,</span>\n    <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s1\">'image/png'</span><span class=\"p\">,</span>\n    <span class=\"n\">is_inline</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"n\">is_contact_photo</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'john_profile_picture.png'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">contact</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">att</span><span class=\"p\">)</span>\n</pre>\n<h2>Extended properties</h2>\n<p>Extended properties makes it possible to attach custom key-value pairs\nto items and folders on the Exchange server. There are multiple online\nresources that describe working with extended properties, and list many\nof the magic values that are used by existing Exchange clients to store\ncommon and custom properties. The following is not a comprehensive\ndescription of the possibilities, but we do intend to support all the\npossibilities provided by EWS.</p>\n<pre><span class=\"c1\"># If folder items have extended properties, you need to register them before you can access them. </span>\n<span class=\"c1\"># Create a subclass of ExtendedProperty and define a set of matching setup values:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">ExtendedProperty</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">Folder</span><span class=\"p\">,</span> <span class=\"n\">Message</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LunchMenu</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">property_set_id</span> <span class=\"o\">=</span> <span class=\"s1\">'12345678-1234-1234-1234-123456781234'</span>\n    <span class=\"n\">property_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Catering from the cafeteria'</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'String'</span>\n\n<span class=\"c1\"># Register the property on the item type of your choice</span>\n<span class=\"n\">CalendarItem</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'lunch_menu'</span><span class=\"p\">,</span> <span class=\"n\">LunchMenu</span><span class=\"p\">)</span>\n<span class=\"c1\"># Now your property is available as the attribute 'lunch_menu', just like any other attribute</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">CalendarItem</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">lunch_menu</span><span class=\"o\">=</span><span class=\"s1\">'Foie gras et consomm\u00e9 de l\u00e9gumes'</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">lunch_menu</span><span class=\"p\">)</span>\n<span class=\"c1\"># If you change your mind, jsut remove the property again</span>\n<span class=\"n\">CalendarItem</span><span class=\"o\">.</span><span class=\"n\">deregister</span><span class=\"p\">(</span><span class=\"s1\">'lunch_menu'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can also create named properties (e.g. created from User Defined Fields in Outlook, see </span>\n<span class=\"c1\"># issue #137):</span>\n<span class=\"k\">class</span> <span class=\"nc\">LunchMenu</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">distinguished_property_set_id</span> <span class=\"o\">=</span> <span class=\"s1\">'PublicStrings'</span>\n    <span class=\"n\">property_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Catering from the cafeteria'</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'String'</span>\n\n<span class=\"c1\"># We support extended properties with tags. This is the definition for the 'completed' and </span>\n<span class=\"c1\"># 'followup' flag you can add to items in Outlook (see also issue #85):</span>\n<span class=\"k\">class</span> <span class=\"nc\">Flag</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">property_tag</span> <span class=\"o\">=</span> <span class=\"mh\">0x1090</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'Integer'</span>\n\n<span class=\"c1\"># Or with property ID:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyMeetingArray</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">property_set_id</span> <span class=\"o\">=</span> <span class=\"s1\">'00062004-0000-0000-C000-000000000046'</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'BinaryArray'</span>\n    <span class=\"n\">property_id</span> <span class=\"o\">=</span> <span class=\"mi\">32852</span>\n\n<span class=\"c1\"># Or using distinguished property sets combined with property ID (here as a hex value to align </span>\n<span class=\"c1\"># with the format usually mentioned in Microsoft docs). This is the definition for a response to</span>\n<span class=\"c1\"># an Outlook Vote request (see issue #198):</span>\n<span class=\"k\">class</span> <span class=\"nc\">VoteResponse</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">distinguished_property_set_id</span> <span class=\"o\">=</span> <span class=\"s1\">'Common'</span>\n    <span class=\"n\">property_id</span> <span class=\"o\">=</span> <span class=\"mh\">0x00008524</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'String'</span>\n\n<span class=\"c1\"># Extended properties also work with folders. For folders, it's only possible to register custom</span>\n<span class=\"c1\"># fields on all folder types at once. This is because it's difficult to provide a consistent API</span>\n<span class=\"c1\"># when some folders have custom fields and others don't. Custom fields must be registered on the</span>\n<span class=\"c1\"># generic Folder or RootOfHierarchy folder classes.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Here's an example of getting the size (in bytes) of a folder:</span>\n<span class=\"k\">class</span> <span class=\"nc\">FolderSize</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">property_tag</span> <span class=\"o\">=</span> <span class=\"mh\">0x0e08</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'Integer'</span>\n\n<span class=\"n\">Folder</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'size'</span><span class=\"p\">,</span> <span class=\"n\">FolderSize</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># In general, here's how to work with any MAPI property as listed in e.g.</span>\n<span class=\"c1\"># https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/mapi-properties. Let's</span>\n<span class=\"c1\"># take `PidLidTaskDueDate` as an example. This is the due date for a message maked with the</span>\n<span class=\"c1\"># follow-up flag in Microsoft Outlook.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># PidLidTaskDueDate is documented at</span>\n<span class=\"c1\"># https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/pidlidtaskduedate-canonical-property.</span>\n<span class=\"c1\"># The property ID is `0x00008105` and the property set is `PSETID_Task`. But EWS wants the UUID for</span>\n<span class=\"c1\"># `PSETID_Task`, so we look that up in the MS-OXPROPS pdf:</span>\n<span class=\"c1\"># https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxprops/f6ab1613-aefe-447d-a49c-18217230b148</span>\n<span class=\"c1\"># The UUID is `00062003-0000-0000-C000-000000000046`. The property type is `PT_SYSTIME` which is also called</span>\n<span class=\"c1\"># `SystemTime` (see</span>\n<span class=\"c1\"># https://docs.microsoft.com/en-us/dotnet/api/microsoft.exchange.webservices.data.mapipropertytype )</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># In conclusion, the definition for the due date becomes:</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FlagDue</span><span class=\"p\">(</span><span class=\"n\">ExtendedProperty</span><span class=\"p\">):</span>\n    <span class=\"n\">property_set_id</span> <span class=\"o\">=</span> <span class=\"s1\">'00062003-0000-0000-C000-000000000046'</span>\n    <span class=\"n\">property_id</span> <span class=\"o\">=</span> <span class=\"mh\">0x8105</span>\n    <span class=\"n\">property_type</span> <span class=\"o\">=</span> <span class=\"s1\">'SystemTime'</span>\n\n<span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">'flag_due'</span><span class=\"p\">,</span> <span class=\"n\">FlagDue</span><span class=\"p\">)</span>\n</pre>\n<h2>Attachments</h2>\n<pre><span class=\"c1\"># It's possible to create, delete and get attachments connected to any item type:</span>\n<span class=\"c1\"># Process attachments on existing items. FileAttachments have a 'content' attribute</span>\n<span class=\"c1\"># containing the binary content of the file, and ItemAttachments have an 'item' attribute</span>\n<span class=\"c1\"># containing the item. The item can be a Message, CalendarItem, Task etc.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os.path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">FileAttachment</span><span class=\"p\">,</span> <span class=\"n\">ItemAttachment</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">HTMLBody</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">attachment</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">attachments</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"p\">,</span> <span class=\"n\">FileAttachment</span><span class=\"p\">):</span>\n            <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'/tmp'</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Saved attachment to'</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"p\">,</span> <span class=\"n\">ItemAttachment</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Streaming downloads of file attachment is supported. This reduces memory consumption since we</span>\n<span class=\"c1\"># never store the full content of the file in-memory:</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">attachment</span> <span class=\"ow\">in</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">attachments</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"p\">,</span> <span class=\"n\">FileAttachment</span><span class=\"p\">):</span>\n            <span class=\"n\">local_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'/tmp'</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">local_path</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">fp</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n                <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n                <span class=\"k\">while</span> <span class=\"n\">buffer</span><span class=\"p\">:</span>\n                    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n                    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Saved attachment to'</span><span class=\"p\">,</span> <span class=\"n\">local_path</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new item with an attachment</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">binary_file_content</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello from unicode \u00e6\u00f8\u00e5'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>  <span class=\"c1\"># Or read from file, BytesIO etc.</span>\n<span class=\"n\">my_file</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachment</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_file.txt'</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">binary_file_content</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">my_file</span><span class=\"p\">)</span>\n<span class=\"n\">my_calendar_item</span> <span class=\"o\">=</span> <span class=\"n\">CalendarItem</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">my_appointment</span> <span class=\"o\">=</span> <span class=\"n\">ItemAttachment</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_appointment'</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">=</span><span class=\"n\">my_calendar_item</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">my_appointment</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add an attachment on an existing item</span>\n<span class=\"n\">my_other_file</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachment</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_other_file.txt'</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">binary_file_content</span><span class=\"p\">)</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">my_other_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Remove the attachment again</span>\n<span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">detach</span><span class=\"p\">(</span><span class=\"n\">my_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you want to embed an image in the item body, you can link to the file in the HTML</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">logo_filename</span> <span class=\"o\">=</span> <span class=\"s1\">'logo.png'</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">logo_filename</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">my_logo</span> <span class=\"o\">=</span> <span class=\"n\">FileAttachment</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">logo_filename</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">is_inline</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">content_id</span><span class=\"o\">=</span><span class=\"n\">logo_filename</span><span class=\"p\">)</span>\n<span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">my_logo</span><span class=\"p\">)</span>\n<span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">HTMLBody</span><span class=\"p\">(</span><span class=\"s1\">'&lt;html&gt;&lt;body&gt;Hello logo: &lt;img src=\"cid:</span><span class=\"si\">%s</span><span class=\"s1\">\"&gt;&lt;/body&gt;&lt;/html&gt;'</span> <span class=\"o\">%</span> <span class=\"n\">logo_filename</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Attachments cannot be updated via EWS. In this case, you must to detach the attachment, update</span>\n<span class=\"c1\"># the relevant fields, and attach the updated attachment.</span>\n\n<span class=\"c1\"># Be aware that adding and deleting attachments from items that are already created in Exchange</span>\n<span class=\"c1\"># (items that have an item_id) will update the changekey of the item.</span>\n</pre>\n<h2>Recurring calendar items</h2>\n<p>There is full read-write support for creating recurring calendar items.\nYou can create daily, weekly, monthly and yearly recurrences (the latter\ntwo in relative and absolute versions).</p>\n<p>Here's an example of creating 7 occurrences on Mondays and Wednesdays of\nevery third week, starting September 1, 2017:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">CalendarItem</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.fields</span> <span class=\"kn\">import</span> <span class=\"n\">MONDAY</span><span class=\"p\">,</span> <span class=\"n\">WEDNESDAY</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.recurrence</span> <span class=\"kn\">import</span> <span class=\"n\">Recurrence</span><span class=\"p\">,</span> <span class=\"n\">WeeklyPattern</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">CalendarItem</span><span class=\"p\">(</span>\n    <span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'Hello Recurrence'</span><span class=\"p\">,</span>\n    <span class=\"n\">recurrence</span><span class=\"o\">=</span><span class=\"n\">Recurrence</span><span class=\"p\">(</span>\n        <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"n\">WeeklyPattern</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">weekdays</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MONDAY</span><span class=\"p\">,</span> <span class=\"n\">WEDNESDAY</span><span class=\"p\">]),</span>\n        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(),</span>\n        <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">7</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Occurrence data for the master item</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">start__lt</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">end__gt</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">recurrence</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">first_occurrence</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">last_occurrence</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">o</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">modified_occurrences</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">o</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">deleted_occurrences</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All occurrences expanded. The recurrence will span over 4 iterations of a 3-week period</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 'modified_occurrences' and 'deleted_occurrences' of master items are read-only fields. To </span>\n<span class=\"c1\"># delete or modify an occurrence, you must use 'view()' to fetch the occurrence and modify or </span>\n<span class=\"c1\"># delete it:</span>\n<span class=\"k\">for</span> <span class=\"n\">occurrence</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">calendar</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"mi\">7</span><span class=\"p\">)):</span>\n    <span class=\"c1\"># Delete or update random occurrences. This will affect 'modified_occurrences' and </span>\n    <span class=\"c1\"># 'deleted_occurrences' of the master item.</span>\n    <span class=\"k\">if</span> <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">.</span><span class=\"n\">milliseconds</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"c1\"># We receive timestamps as UTC but want to write them back as local timezone</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"o\">.</span><span class=\"n\">astimezone</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"p\">)</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">+=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"o\">.</span><span class=\"n\">astimezone</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"p\">)</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"o\">+=</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"s1\">'My new subject'</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">occurrence</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<h2>Message timestamp fields</h2>\n<p>Each <code>Message</code> item has four timestamp fields:</p>\n<ul>\n<li><code>datetime_created</code></li>\n<li><code>datetime_sent</code></li>\n<li><code>datetime_received</code></li>\n<li><code>last_modified_time</code></li>\n</ul>\n<p>The values for these fields are set by the Exchange server and are not\nmodifiable via EWS. All values are timezone-aware <code>EWSDateTime</code>\ninstances.</p>\n<p>The <code>datetime_sent</code> value may be earlier than <code>datetime_created</code>.</p>\n<h2>Out of Facility</h2>\n<p>You can get and set OOF messages using the <code>Account.oof_settings</code>\nproperty:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">OofSettings</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the current OOF settings</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">oof_settings</span>\n<span class=\"c1\"># Change the OOF settings to something else</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">oof_settings</span> <span class=\"o\">=</span> <span class=\"n\">OofSettings</span><span class=\"p\">(</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">OofSettings</span><span class=\"o\">.</span><span class=\"n\">SCHEDULED</span><span class=\"p\">,</span>\n    <span class=\"n\">external_audience</span><span class=\"o\">=</span><span class=\"s1\">'Known'</span><span class=\"p\">,</span>\n    <span class=\"n\">internal_reply</span><span class=\"o\">=</span><span class=\"s2\">\"I'm in the pub. See ya guys!\"</span><span class=\"p\">,</span>\n    <span class=\"n\">external_reply</span><span class=\"o\">=</span><span class=\"s2\">\"I'm having a business dinner in town\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)),</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Disable OOF messages</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">oof_settings</span> <span class=\"o\">=</span> <span class=\"n\">OofSettings</span><span class=\"p\">(</span>\n    <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">OofSettings</span><span class=\"o\">.</span><span class=\"n\">DISABLED</span><span class=\"p\">,</span>\n    <span class=\"n\">internal_reply</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">external_reply</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Mail tips</h2>\n<p>Mail tips for an account contain some extra information about the account,\ne.g. OOF information, max message size, whether the mailbox is full, messages\nare moderated etc. Here's how to get mail tips for a single account:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">mail_tips</span><span class=\"p\">)</span>\n</pre>\n<h2>Delegate information</h2>\n<p>An account can have delegates, which are other users that are allowed to access the account.\nHere's how to fetch information about those delegates, including which level of access they\nhave to the account.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">delegates</span><span class=\"p\">)</span>\n</pre>\n<h2>Export and upload</h2>\n<p>Exchange supports backup and restore of folder contents using special\nexport and upload services. They are available on the <code>Account</code> model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"s1\">'changekey'</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>  <span class=\"c1\"># Pass a list of Item instances or (item_id, changekey) tuples</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">inbox</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># Restore the items. Expects a list of (folder, data) tuples</span>\n</pre>\n<h2>Non-account methods</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">DLMailbox</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.properties</span> <span class=\"kn\">import</span> <span class=\"n\">AlternateId</span><span class=\"p\">,</span> <span class=\"n\">EWS_ID</span><span class=\"p\">,</span> <span class=\"n\">OWA_ID</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get timezone information from the server</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_timezones</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get room lists defined on the server</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_roomlists</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get rooms belonging to a specific room list</span>\n<span class=\"k\">for</span> <span class=\"n\">rl</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_roomlists</span><span class=\"p\">():</span>\n    <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_rooms</span><span class=\"p\">(</span><span class=\"n\">rl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get account information for a list of names or email addresses</span>\n<span class=\"k\">for</span> <span class=\"n\">mailbox</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">resolve_names</span><span class=\"p\">([</span><span class=\"s1\">'ann@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'bart@example.com'</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mailbox</span><span class=\"o\">.</span><span class=\"n\">email_address</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">mailbox</span><span class=\"p\">,</span> <span class=\"n\">contact</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">resolve_names</span><span class=\"p\">([</span><span class=\"s1\">'anne'</span><span class=\"p\">,</span> <span class=\"s1\">'bart'</span><span class=\"p\">],</span> <span class=\"n\">return_full_contact_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mailbox</span><span class=\"o\">.</span><span class=\"n\">email_address</span><span class=\"p\">,</span> <span class=\"n\">contact</span><span class=\"o\">.</span><span class=\"n\">display_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get all mailboxes on a distribution list</span>\n<span class=\"k\">for</span> <span class=\"n\">mailbox</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">expand_dl</span><span class=\"p\">(</span><span class=\"n\">DLMailbox</span><span class=\"p\">(</span><span class=\"n\">email_address</span><span class=\"o\">=</span><span class=\"s1\">'distro@example.com'</span><span class=\"p\">,</span> <span class=\"n\">mailbox_type</span><span class=\"o\">=</span><span class=\"s1\">'PublicDL'</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mailbox</span><span class=\"o\">.</span><span class=\"n\">email_address</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or just pass a string containing the SMTP address</span>\n<span class=\"k\">for</span> <span class=\"n\">mailbox</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">expand_dl</span><span class=\"p\">(</span><span class=\"s1\">'distro@example.com'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mailbox</span><span class=\"o\">.</span><span class=\"n\">email_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert item IDs from one format to another</span>\n<span class=\"k\">for</span> <span class=\"n\">converted_id</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">convert_ids</span><span class=\"p\">([</span>\n    <span class=\"n\">AlternateId</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'AAA='</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">EWS_ID</span><span class=\"p\">,</span> <span class=\"n\">mailbox</span><span class=\"o\">=</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">primary_smtp_address</span><span class=\"p\">),</span>\n<span class=\"p\">],</span> <span class=\"n\">destination_format</span><span class=\"o\">=</span><span class=\"n\">OWA_ID</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">converted_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get searchable mailboxes. This method is only available to users who have been assigned</span>\n<span class=\"c1\"># the Discovery Management RBAC role. (This feature works on Exchange 2013 onwards)</span>\n<span class=\"k\">for</span> <span class=\"n\">mailbox</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_searchable_mailboxes</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mailbox</span><span class=\"p\">)</span>\n</pre>\n<p>EWS supports getting availability information for a set of users in a certain\ntimeframe. The server returns an object for each account containing free/busy\ninformation, including a list of calendar events in the user's calendar, and\nthe working hours and timezone of the user.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s1\">'Organizer'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">busy_info</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_free_busy_info</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"o\">=</span><span class=\"n\">accounts</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">busy_info</span><span class=\"p\">)</span>\n</pre>\n<p>The calendar events and working hours are returned as naive datetimes. To convert\nto timezone-aware datetimes, a bit of extra work is needed if the users are not\nknown to be in the same timezone.</p>\n<pre><span class=\"c1\"># Get all server timezones. We need that to convert 'working_hours_timezone'</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">Account</span><span class=\"p\">,</span> <span class=\"n\">EWSDateTime</span><span class=\"p\">,</span> <span class=\"n\">EWSTimeZone</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Account</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">timezones</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_timezones</span><span class=\"p\">(</span><span class=\"n\">return_full_timezone_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Get availability information for a list of accounts</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">default_timezone</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">EWSDateTime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"c1\"># get_free_busy_info() expects a list of (account, attendee_type, exclude_conflicts) tuples</span>\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s1\">'Organizer'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)]</span>\n<span class=\"k\">for</span> <span class=\"n\">busy_info</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">get_free_busy_info</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"o\">=</span><span class=\"n\">accounts</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Convert the TimeZone object to a Microsoft timezone ID</span>\n    <span class=\"n\">ms_id</span> <span class=\"o\">=</span> <span class=\"n\">busy_info</span><span class=\"o\">.</span><span class=\"n\">working_hours_timezone</span><span class=\"o\">.</span><span class=\"n\">to_server_timezone</span><span class=\"p\">(</span><span class=\"n\">timezones</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">)</span>\n    <span class=\"n\">account_tz</span> <span class=\"o\">=</span> <span class=\"n\">EWSTimeZone</span><span class=\"o\">.</span><span class=\"n\">from_ms_id</span><span class=\"p\">(</span><span class=\"n\">ms_id</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_tz</span><span class=\"p\">,</span> <span class=\"n\">busy_info</span><span class=\"o\">.</span><span class=\"n\">working_hours</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">busy_info</span><span class=\"o\">.</span><span class=\"n\">calendar_events</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">account_tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">),</span> <span class=\"n\">account_tz</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">))</span>\n</pre>\n<h2>Troubleshooting</h2>\n<p>If you are having trouble using this library, the first thing to try is\nto enable debug logging. This will output a huge amount of information\nabout what is going on, most notable the actual XML documents that are\ngoing over the wire. This can be really handy to see which fields are\nbeing sent and received.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"c1\"># This handler will pretty-print and syntax highlight the request and response XML documents</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exchangelib.util</span> <span class=\"kn\">import</span> <span class=\"n\">PrettyXmlHandler</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">PrettyXmlHandler</span><span class=\"p\">()])</span>\n<span class=\"c1\"># Your code using exchangelib goes here</span>\n</pre>\n<p>Most class definitions have a docstring containing at least a URL to the\nMSDN page for the corresponding XML element.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">exchangelib</span> <span class=\"kn\">import</span> <span class=\"n\">CalendarItem</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">CalendarItem</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span><span class=\"p\">)</span>\n</pre>\n<h1>Tests</h1>\n<p>The test suite is split into unit tests, and integration tests that require a real Exchange\nserver. If you want to run the full test suite, you must provide setup parameters for\na test account. Copy <code>settings.yml.sample</code> to <code>settings.yml</code> and change the default\nparameters. If a <code>settings.yml</code> is available, we will run the entire test suite. Otherwise,\njust the unit tests are run.</p>\n<p><em>WARNING</em>: The test account should not contain valuable data. The tests try hard to no touch\nexisting data in the account, but accidents happen.</p>\n<p>You can run either the entire test suite or individual tests.</p>\n<pre><span class=\"c1\"># Full test suite</span>\npython setup.py <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Single test class or test case</span>\npython -m unittest -k FolderTest.test_refresh\n<span class=\"c1\"># Or, if you want extreme levels of debug output:</span>\npython -m unittest -k FolderTest.test_refresh -v\n</pre>\n<h1>Notes</h1>\n<p>Almost all item fields are supported. The remaining ones are tracked in\n<a href=\"https://github.com/ecederstrand/exchangelib/issues/203\" rel=\"nofollow\">https://github.com/ecederstrand/exchangelib/issues/203</a>.</p>\n\n          </div>"}, "last_serial": 6505283, "releases": {"1.10.0": [{"comment_text": "", "digests": {"md5": "4f41dae378b4e1cb1e7eaa0f9353cdb3", "sha256": "b1458e33c9ca981b2ee280183acf4f4ea9b3c5ee83ad01af771753a9269517c6"}, "downloads": -1, "filename": "exchangelib-1.10.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4f41dae378b4e1cb1e7eaa0f9353cdb3", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 135285, "upload_time": "2017-09-02T18:41:38", "upload_time_iso_8601": "2017-09-02T18:41:38.046034Z", "url": "https://files.pythonhosted.org/packages/76/1d/b29c98d15f9b1e97f480b9cc1fdfed6eb7a770b9d9ea993b42d8045ae070/exchangelib-1.10.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ccd4e3d31e2560525510835f19b5597", "sha256": "dfc4023ac5bcfa6c3cbdac44d150d1b8732e392d650c8762d60046f8d7e81199"}, "downloads": -1, "filename": "exchangelib-1.10.0.tar.gz", "has_sig": false, "md5_digest": "9ccd4e3d31e2560525510835f19b5597", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111638, "upload_time": "2017-09-02T18:41:32", "upload_time_iso_8601": "2017-09-02T18:41:32.458756Z", "url": "https://files.pythonhosted.org/packages/3d/55/20b9847924834d51488ea14f57ed1f66b195ffefca535031f2f2075b8059/exchangelib-1.10.0.tar.gz", "yanked": false}], "1.10.1": [{"comment_text": "", "digests": {"md5": "dc6ad00b13159be7382aa5dcb1ef7bbf", "sha256": "b8eca0cd2b647a385e6c00c807c3e2698660a79183f7841cd24b4d220a6b30a9"}, "downloads": -1, "filename": "exchangelib-1.10.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc6ad00b13159be7382aa5dcb1ef7bbf", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 137597, "upload_time": "2017-09-07T21:03:59", "upload_time_iso_8601": "2017-09-07T21:03:59.327288Z", "url": "https://files.pythonhosted.org/packages/75/fa/822d791e1d5de24ec792d26d23191500c7eaea9beb4d90b6a80d585b171f/exchangelib-1.10.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72efa8233d90a30968d8fb1b791404c", "sha256": "83ed1a75768151409636d36ebc63b47a70585d5caa0d101a947d81d573179440"}, "downloads": -1, "filename": "exchangelib-1.10.1.tar.gz", "has_sig": false, "md5_digest": "e72efa8233d90a30968d8fb1b791404c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 114986, "upload_time": "2017-09-07T21:03:55", "upload_time_iso_8601": "2017-09-07T21:03:55.057006Z", "url": "https://files.pythonhosted.org/packages/88/e8/f3a9748f7507c18269ba49b0419942601e0a6d6d68d2e423094511035266/exchangelib-1.10.1.tar.gz", "yanked": false}], "1.10.2": [{"comment_text": "", "digests": {"md5": "05c7a0ef4186a81a0a377f0decbd0d23", "sha256": "6083179ade751ac29ed07fec3bfd2f25112517f58f1b787193fecafd6adc29f6"}, "downloads": -1, "filename": "exchangelib-1.10.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "05c7a0ef4186a81a0a377f0decbd0d23", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 140196, "upload_time": "2017-09-14T07:51:46", "upload_time_iso_8601": "2017-09-14T07:51:46.418839Z", "url": "https://files.pythonhosted.org/packages/86/ca/44eb69df8e3c6f7290258c3f35207e7530e025f5422cc99a0f32c6d20e66/exchangelib-1.10.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0129ddf67cb33dc38d5a90012935bab9", "sha256": "9ed6fdaed59da7343c71faf0acb19016e1eaaa2fc0b8f90d275157ecfc8f5bd1"}, "downloads": -1, "filename": "exchangelib-1.10.2.tar.gz", "has_sig": false, "md5_digest": "0129ddf67cb33dc38d5a90012935bab9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120100, "upload_time": "2017-09-14T07:51:36", "upload_time_iso_8601": "2017-09-14T07:51:36.612641Z", "url": "https://files.pythonhosted.org/packages/12/d4/e5ac4d35ac27f06a1908aa2fd79ea9fe7bb53efaacf898321808174da319/exchangelib-1.10.2.tar.gz", "yanked": false}], "1.10.3": [{"comment_text": "", "digests": {"md5": "2aae27dfb31deed833eccb5479dda5d9", "sha256": "7745f5210d393307a09f693a9a5977e5453e10f2308f50b6fdea0b6ab173d595"}, "downloads": -1, "filename": "exchangelib-1.10.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2aae27dfb31deed833eccb5479dda5d9", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 140330, "upload_time": "2017-09-17T19:19:23", "upload_time_iso_8601": "2017-09-17T19:19:23.002348Z", "url": "https://files.pythonhosted.org/packages/93/10/dda1ca8650ae262ba575aa1e3196dfac4e50d22efed7803e7335f1aaf657/exchangelib-1.10.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c6eb5ccffa20b600cbdccc182a1d5b4", "sha256": "5fb6754d9774d84c282ae60f19c79b937b88e748c6ef2543cd28e122a51396f3"}, "downloads": -1, "filename": "exchangelib-1.10.3.tar.gz", "has_sig": false, "md5_digest": "6c6eb5ccffa20b600cbdccc182a1d5b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 120221, "upload_time": "2017-09-17T19:19:20", "upload_time_iso_8601": "2017-09-17T19:19:20.265525Z", "url": "https://files.pythonhosted.org/packages/2a/63/f65b5bb0981c45f03a4db7d453e9509e6bc59adaf0cb2bf61cf33d3b44e6/exchangelib-1.10.3.tar.gz", "yanked": false}], "1.10.4": [{"comment_text": "", "digests": {"md5": "66864cf869f52ab1de83381b04f5c9d3", "sha256": "0b1785ae7d8330a50e14356910024c43d13e3faa634a26c16912832a2b35f903"}, "downloads": -1, "filename": "exchangelib-1.10.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "66864cf869f52ab1de83381b04f5c9d3", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 141518, "upload_time": "2017-10-10T20:16:40", "upload_time_iso_8601": "2017-10-10T20:16:40.708472Z", "url": "https://files.pythonhosted.org/packages/14/2e/cb71c442672d7d448e73e9e5dde554e3c9f45f57ba3ee49bbba60eab8f76/exchangelib-1.10.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4f7219c511c40babe4bcd557eefcb9", "sha256": "8b628130a82a053ccefbf3466bbe5ea22dd6908161d7f7987b2234c9c2dda2f7"}, "downloads": -1, "filename": "exchangelib-1.10.4.tar.gz", "has_sig": false, "md5_digest": "ab4f7219c511c40babe4bcd557eefcb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 125509, "upload_time": "2017-10-10T20:16:38", "upload_time_iso_8601": "2017-10-10T20:16:38.362647Z", "url": "https://files.pythonhosted.org/packages/84/05/b8f94a86d22ffa76b69de9df0159ff15b5f694bafa8434d6b9c99c4bb394/exchangelib-1.10.4.tar.gz", "yanked": false}], "1.10.5": [{"comment_text": "", "digests": {"md5": "d044134184d5d1a695736ad3b3463d43", "sha256": "cb5f787378ca3d7bef6119d1db5d7e75b37b88a9c87ad4939fc87d27962c7f02"}, "downloads": -1, "filename": "exchangelib-1.10.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d044134184d5d1a695736ad3b3463d43", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 142066, "upload_time": "2017-11-09T09:04:00", "upload_time_iso_8601": "2017-11-09T09:04:00.466440Z", "url": "https://files.pythonhosted.org/packages/e5/e3/bed4c3f3e3b20e14234e6d63500ca61fd352965dcc5f23b64e26beb4416d/exchangelib-1.10.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1948ca033b444135ed6cd0d1d93434be", "sha256": "c9122e4c33142568aff2d3d6a6d79b9c73a8c573f99ad2e6ceb865ed9cb10705"}, "downloads": -1, "filename": "exchangelib-1.10.5.tar.gz", "has_sig": false, "md5_digest": "1948ca033b444135ed6cd0d1d93434be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 126067, "upload_time": "2017-11-09T09:03:57", "upload_time_iso_8601": "2017-11-09T09:03:57.504943Z", "url": "https://files.pythonhosted.org/packages/5b/da/781cf28f7fe43bbcb806bd3dab017900c0fa5eebf7e337d52640412a14fc/exchangelib-1.10.5.tar.gz", "yanked": false}], "1.10.6": [{"comment_text": "", "digests": {"md5": "a06941441fe4f4c4451cf41cd655b9ea", "sha256": "712829a76138afb1911e8dfa124fe6b7dd61ecf268f36359d474f3df9252e24b"}, "downloads": -1, "filename": "exchangelib-1.10.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a06941441fe4f4c4451cf41cd655b9ea", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 145998, "upload_time": "2017-11-29T15:47:39", "upload_time_iso_8601": "2017-11-29T15:47:39.001956Z", "url": "https://files.pythonhosted.org/packages/29/08/634ec32cd8d4ab207e68b0e5a2f06bc5258143fea4dfb6e3617a657b5142/exchangelib-1.10.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b6a39f3dcf7464a1d4b4fff2c43d47b", "sha256": "ef8c45a273cf2a75a3ba8a146eb2f9d7c031f4db1b0a75ed9b5f49241fe474a7"}, "downloads": -1, "filename": "exchangelib-1.10.6.tar.gz", "has_sig": false, "md5_digest": "0b6a39f3dcf7464a1d4b4fff2c43d47b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129739, "upload_time": "2017-11-29T15:47:34", "upload_time_iso_8601": "2017-11-29T15:47:34.239944Z", "url": "https://files.pythonhosted.org/packages/dd/78/224c4f64831a87b39034c28fb6ca1ff8b333986a194097a31a6379dccadd/exchangelib-1.10.6.tar.gz", "yanked": false}], "1.10.7": [{"comment_text": "", "digests": {"md5": "0dba2af82b553349396bab83dc718689", "sha256": "9c1d36fc7c31a863ccf0ede851eb86fad6bf39c8c29316436efc76b8991b26aa"}, "downloads": -1, "filename": "exchangelib-1.10.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0dba2af82b553349396bab83dc718689", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 148306, "upload_time": "2017-12-27T14:35:50", "upload_time_iso_8601": "2017-12-27T14:35:50.377432Z", "url": "https://files.pythonhosted.org/packages/23/9e/6d6a273ab16a63e39552a2aa3f12584975afe1209c5bf4116daf87d8dfa4/exchangelib-1.10.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fcd8abbd6a29fbaee220b4abc1d787f", "sha256": "bbc1e3d536fb9b27041614a191613388ab66313332af4ccaf920c42530ba0822"}, "downloads": -1, "filename": "exchangelib-1.10.7.tar.gz", "has_sig": false, "md5_digest": "7fcd8abbd6a29fbaee220b4abc1d787f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 132346, "upload_time": "2017-12-27T14:35:46", "upload_time_iso_8601": "2017-12-27T14:35:46.706342Z", "url": "https://files.pythonhosted.org/packages/96/85/f5be89d84234463477d8575e03800e35d353bbaaef5c51cfd060e646b2c9/exchangelib-1.10.7.tar.gz", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "0e049c30274d8e6e4bc9657c56eac1a0", "sha256": "de1dbcdd2cbe9e6f15b16ffebc08df7a4ebc895f2a032f831c1f6848d06980d2"}, "downloads": -1, "filename": "exchangelib-1.11.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e049c30274d8e6e4bc9657c56eac1a0", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 160284, "upload_time": "2018-04-09T10:53:10", "upload_time_iso_8601": "2018-04-09T10:53:10.740439Z", "url": "https://files.pythonhosted.org/packages/60/6f/0cc44bc6934bbe0ce192dcd8338257492bb3277220d8ba7949116bd66cfc/exchangelib-1.11.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d813870c398a19d82bac98af2a1eb5e", "sha256": "349884c12fadb5f2e2d7a72b7e0e10cbfa6a82108e7fbd291520e9c1ee007955"}, "downloads": -1, "filename": "exchangelib-1.11.0.tar.gz", "has_sig": false, "md5_digest": "1d813870c398a19d82bac98af2a1eb5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157401, "upload_time": "2018-04-09T10:53:07", "upload_time_iso_8601": "2018-04-09T10:53:07.895643Z", "url": "https://files.pythonhosted.org/packages/b9/2e/e14fd9a9b93c7ae9ea25e5d6b6b5216006e0f5ef2f9b2a2d7c3ce0a65f8c/exchangelib-1.11.0.tar.gz", "yanked": false}], "1.11.1": [{"comment_text": "", "digests": {"md5": "eda09dcabaec89b617aa3f1360385209", "sha256": "16ebda89ee2b7c06d470ac9f318c9fb4f9f702f8ce6c1b8171b33744871a4089"}, "downloads": -1, "filename": "exchangelib-1.11.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eda09dcabaec89b617aa3f1360385209", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 162275, "upload_time": "2018-04-17T11:03:06", "upload_time_iso_8601": "2018-04-17T11:03:06.119486Z", "url": "https://files.pythonhosted.org/packages/d3/22/5e501a133c2c2de64acbe921f62e5f154a1674d66c8a0834295d273a4de6/exchangelib-1.11.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc28bd6cf5b976df7d584872d5cf0d85", "sha256": "f54a96ca668682aef4bc3cdc1fc7ba285e996d1114eeb87f97dce521ca867ffa"}, "downloads": -1, "filename": "exchangelib-1.11.1.tar.gz", "has_sig": false, "md5_digest": "cc28bd6cf5b976df7d584872d5cf0d85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 158833, "upload_time": "2018-04-17T11:03:03", "upload_time_iso_8601": "2018-04-17T11:03:03.696876Z", "url": "https://files.pythonhosted.org/packages/a4/27/c4c8f2a5a25098b759bdbdd2e691065d97e7249eb23818bc0a40235e0acf/exchangelib-1.11.1.tar.gz", "yanked": false}], "1.11.2": [{"comment_text": "", "digests": {"md5": "3f640ef071761d974913599ec1b641db", "sha256": "950ce47be9496f0905d1591883074340ef13795559ce15a760c4d25fee2182cf"}, "downloads": -1, "filename": "exchangelib-1.11.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f640ef071761d974913599ec1b641db", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 149223, "upload_time": "2018-04-25T23:21:49", "upload_time_iso_8601": "2018-04-25T23:21:49.938155Z", "url": "https://files.pythonhosted.org/packages/bd/39/e5cffc2dea6a8b6bff7d5447bcc0c05e0faf33f6317871d96b437563622d/exchangelib-1.11.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9bceef7958eccb7967b56e514f72da18", "sha256": "fcac6a33a168ecd0e2f6cd761c558cb1db765ff933bac9e701e500152e8f19e4"}, "downloads": -1, "filename": "exchangelib-1.11.2.tar.gz", "has_sig": false, "md5_digest": "9bceef7958eccb7967b56e514f72da18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159152, "upload_time": "2018-04-25T23:21:46", "upload_time_iso_8601": "2018-04-25T23:21:46.947037Z", "url": "https://files.pythonhosted.org/packages/70/2a/1058d3777d02a5dcc2939423f91e00ef0be50dc905048c2eeadcbacaf11e/exchangelib-1.11.2.tar.gz", "yanked": false}], "1.11.3": [{"comment_text": "", "digests": {"md5": "772863474b8ed69932e12c0657d683e7", "sha256": "208433dd274f8f2d55931d1b5b5146ca50fea78cee89304fdded3becf2766f8a"}, "downloads": -1, "filename": "exchangelib-1.11.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "772863474b8ed69932e12c0657d683e7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 149560, "upload_time": "2018-05-03T20:33:52", "upload_time_iso_8601": "2018-05-03T20:33:52.908967Z", "url": "https://files.pythonhosted.org/packages/f5/6d/a8bc916c35a70a688645708cce2afea7ab8e658c634b7ddfc4cbfb1aff79/exchangelib-1.11.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45550fa4b737a0ada84c33955f3ec83e", "sha256": "1a18deb7cdee17541e98ba62cef474a76a5a198e46150ec41ebb22a57ebf4a4b"}, "downloads": -1, "filename": "exchangelib-1.11.3.tar.gz", "has_sig": false, "md5_digest": "45550fa4b737a0ada84c33955f3ec83e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 159790, "upload_time": "2018-05-03T20:33:54", "upload_time_iso_8601": "2018-05-03T20:33:54.476662Z", "url": "https://files.pythonhosted.org/packages/ea/a8/bdad38ec6554496e4d85c6641d74a98aaa655ca9e12b334850660f4a0392/exchangelib-1.11.3.tar.gz", "yanked": false}], "1.11.4": [{"comment_text": "", "digests": {"md5": "f07dfb3a02e0a5e2e6d899d5b2f917fd", "sha256": "11f3fee5b0aa0b4f423d44091664a5ec15ef00173df2f6e94ed03cf3e6ec8665"}, "downloads": -1, "filename": "exchangelib-1.11.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f07dfb3a02e0a5e2e6d899d5b2f917fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 150360, "upload_time": "2018-05-31T15:10:34", "upload_time_iso_8601": "2018-05-31T15:10:34.489753Z", "url": "https://files.pythonhosted.org/packages/fa/25/2a929f5f205f6ccee11226893808b5069fc4cf4d0e324d97bb4b4fb8dcf1/exchangelib-1.11.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e3fba0f44466fae1fd15a8082add23", "sha256": "9fb543ec28e21099a4159e74b1daf5c7e84ac3d4f0413d68711ebbb126e56aa0"}, "downloads": -1, "filename": "exchangelib-1.11.4.tar.gz", "has_sig": false, "md5_digest": "b0e3fba0f44466fae1fd15a8082add23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 161148, "upload_time": "2018-05-31T15:10:36", "upload_time_iso_8601": "2018-05-31T15:10:36.535716Z", "url": "https://files.pythonhosted.org/packages/ec/0f/816d3e91b098ff7dc427a92d030a1442bbee5837e0f15ea9f1732726c786/exchangelib-1.11.4.tar.gz", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "a86cb4b99a269c413e5617f77dc79eee", "sha256": "3dff2d2100e73d9b92a436b81fb6b4eb06ea557e6d4e21638b13111d5361e540"}, "downloads": -1, "filename": "exchangelib-1.12.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a86cb4b99a269c413e5617f77dc79eee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 155501, "upload_time": "2018-10-03T13:51:44", "upload_time_iso_8601": "2018-10-03T13:51:44.542144Z", "url": "https://files.pythonhosted.org/packages/b4/a3/830ccb4ecab2629608c7cec5d75b97309258fb02ffc0a1d56840743eee55/exchangelib-1.12.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2738048c76e58387624fc2cac363c0f", "sha256": "091be9f1fdc3187925875001b09f87c8c1d640242a797868e9e5e31bb9e5e54a"}, "downloads": -1, "filename": "exchangelib-1.12.0.tar.gz", "has_sig": false, "md5_digest": "b2738048c76e58387624fc2cac363c0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 175067, "upload_time": "2018-10-03T13:51:47", "upload_time_iso_8601": "2018-10-03T13:51:47.026966Z", "url": "https://files.pythonhosted.org/packages/3e/00/964bb1a7b8077225e4f59f4ba57aff6414b93b8c8b0c298e36f2677b751c/exchangelib-1.12.0.tar.gz", "yanked": false}], "1.12.1": [{"comment_text": "", "digests": {"md5": "c352a2a0af5b97e863e12bf6d242ac5d", "sha256": "471f17d9a982df5dbe8a1dd7e998a3c1e59f021f710c76b194dd1270eb06fc60"}, "downloads": -1, "filename": "exchangelib-1.12.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c352a2a0af5b97e863e12bf6d242ac5d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 160107, "upload_time": "2018-12-01T23:25:43", "upload_time_iso_8601": "2018-12-01T23:25:43.363088Z", "url": "https://files.pythonhosted.org/packages/9d/05/dcb0fa619520edcafe4bf51044688878428734c50dd2cdd330e1ccc62466/exchangelib-1.12.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a52a6be6320d2be5cdd11d532401e4c4", "sha256": "5761ddd50149267b74d45617e21181e43de0187358a48e44e4eb8a456b949917"}, "downloads": -1, "filename": "exchangelib-1.12.1.tar.gz", "has_sig": false, "md5_digest": "a52a6be6320d2be5cdd11d532401e4c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 181675, "upload_time": "2018-12-01T23:25:45", "upload_time_iso_8601": "2018-12-01T23:25:45.470982Z", "url": "https://files.pythonhosted.org/packages/dc/66/ede723ed31c5fb6b552cc2e5d8161cd00c4525a63de87938226b1266dc93/exchangelib-1.12.1.tar.gz", "yanked": false}], "1.12.2": [{"comment_text": "", "digests": {"md5": "809aa5351eb65122e526eb070a697709", "sha256": "04426ed6e95f4c4a793f67a035117da3eecae284abb44283e4f27241f663acc3"}, "downloads": -1, "filename": "exchangelib-1.12.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "809aa5351eb65122e526eb070a697709", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 162623, "upload_time": "2019-02-14T19:48:50", "upload_time_iso_8601": "2019-02-14T19:48:50.999869Z", "url": "https://files.pythonhosted.org/packages/02/f3/10370d970547e9f9bf07dacb565273a1c247de9f42880748893f985b04d4/exchangelib-1.12.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "726c8828d28d81fffd1b354c871136e0", "sha256": "bb8d69ea9ab9ff02c53e62250550352f5ae202fb8c9a86588e4b5c6b650fc430"}, "downloads": -1, "filename": "exchangelib-1.12.2.tar.gz", "has_sig": false, "md5_digest": "726c8828d28d81fffd1b354c871136e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 185516, "upload_time": "2019-02-14T19:48:53", "upload_time_iso_8601": "2019-02-14T19:48:53.665938Z", "url": "https://files.pythonhosted.org/packages/28/4c/85cf45575214e2afb43d0283f92ef5a2460e0c670918c25f5b006ecfc091/exchangelib-1.12.2.tar.gz", "yanked": false}], "1.12.3": [{"comment_text": "", "digests": {"md5": "f8e51fd6a2184ce9145a5aba2ad88591", "sha256": "d688a9358c0b90e7780f6c8c3c6cf6cb34f684014769b889ed87f0f07dc9ec4a"}, "downloads": -1, "filename": "exchangelib-1.12.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f8e51fd6a2184ce9145a5aba2ad88591", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 164802, "upload_time": "2019-05-04T09:32:08", "upload_time_iso_8601": "2019-05-04T09:32:08.030348Z", "url": "https://files.pythonhosted.org/packages/da/68/f312aa51d7e98be011e2889b6330f7ff56406209581b86c6a246b9c90340/exchangelib-1.12.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ef38822d58876e66e35aeafbed27436", "sha256": "3611282dd2d2acec214c6f3578d925ad8bbb352736b2cc2f43721e9f949a8734"}, "downloads": -1, "filename": "exchangelib-1.12.3.tar.gz", "has_sig": false, "md5_digest": "8ef38822d58876e66e35aeafbed27436", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 187746, "upload_time": "2019-05-04T09:32:09", "upload_time_iso_8601": "2019-05-04T09:32:09.944120Z", "url": "https://files.pythonhosted.org/packages/18/21/582e1fd077cf5ef31c5f2e27b18b8f90ebf46a2ff69afc4ea675eb7bd98d/exchangelib-1.12.3.tar.gz", "yanked": false}], "1.12.4": [{"comment_text": "", "digests": {"md5": "1a58718b255738b09a704df8a7fa555d", "sha256": "5c60df1f13c689baf9c8caedd4875b3ebd81f904799c7bf6dee1802ea59fd10a"}, "downloads": -1, "filename": "exchangelib-1.12.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1a58718b255738b09a704df8a7fa555d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 165223, "upload_time": "2019-05-09T12:11:56", "upload_time_iso_8601": "2019-05-09T12:11:56.729332Z", "url": "https://files.pythonhosted.org/packages/26/5f/0be015c2eeec2f8fafec0c7e22cb80168df64c85ee246bfce926c6e11668/exchangelib-1.12.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d33fd4e44d7f9a097d4dcaceb48a3c2", "sha256": "761f7113d72eeb4e5d13091b85a2facacdb46bf0bda53cdd3be5481a32bfe6bd"}, "downloads": -1, "filename": "exchangelib-1.12.4.tar.gz", "has_sig": false, "md5_digest": "2d33fd4e44d7f9a097d4dcaceb48a3c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 187800, "upload_time": "2019-05-09T12:11:59", "upload_time_iso_8601": "2019-05-09T12:11:59.031885Z", "url": "https://files.pythonhosted.org/packages/db/52/10af407565406bf6017050b02e7a827e55baa7b2307b2fddb5e3ec9488de/exchangelib-1.12.4.tar.gz", "yanked": false}], "1.12.5": [{"comment_text": "", "digests": {"md5": "1ebde9e6a393653708f01f5da5628f25", "sha256": "ef0b54ac3641266ea7c005fc28c9256fa072cb2835cd168204f99a9abe3d9ae8"}, "downloads": -1, "filename": "exchangelib-1.12.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ebde9e6a393653708f01f5da5628f25", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 165797, "upload_time": "2019-05-28T09:34:59", "upload_time_iso_8601": "2019-05-28T09:34:59.642851Z", "url": "https://files.pythonhosted.org/packages/37/d2/ecd181f3574ef7377f96182b8fa118b85296f8fd920da309a3588280f686/exchangelib-1.12.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35121da740e784b7a90685bb9691d69e", "sha256": "27d79ee010815868bbe0e81002e09f6e62ba754edfa5429c054b9ccf35464995"}, "downloads": -1, "filename": "exchangelib-1.12.5.tar.gz", "has_sig": false, "md5_digest": "35121da740e784b7a90685bb9691d69e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 189034, "upload_time": "2019-05-28T09:35:06", "upload_time_iso_8601": "2019-05-28T09:35:06.199674Z", "url": "https://files.pythonhosted.org/packages/62/6b/891e091fb4f3d50e2c457bf3fabf3349ffb1d697ed5a7edb92324027af1a/exchangelib-1.12.5.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "01f1fe4f08629915648515c01c3204f7", "sha256": "37d61a8530d440a8f292be12d0276f60ec4420d96e2df17db8acf6f34ea87916"}, "downloads": -1, "filename": "exchangelib-1.2.tar.gz", "has_sig": false, "md5_digest": "01f1fe4f08629915648515c01c3204f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41453, "upload_time": "2016-03-07T16:54:47", "upload_time_iso_8601": "2016-03-07T16:54:47.024832Z", "url": "https://files.pythonhosted.org/packages/7d/3c/11524eccaa42196ed1eda575dadf5403234875e1e52ab7250468c3b39625/exchangelib-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "cd048d464776452720bf92f770c7d5c8", "sha256": "48cbbf923729aa584bc01b5565d7c16e738696443f91d143cd32d1e67e3d6534"}, "downloads": -1, "filename": "exchangelib-1.3.tar.gz", "has_sig": false, "md5_digest": "cd048d464776452720bf92f770c7d5c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41843, "upload_time": "2016-03-16T11:08:31", "upload_time_iso_8601": "2016-03-16T11:08:31.639067Z", "url": "https://files.pythonhosted.org/packages/20/14/9f48e2befe807db0ea883d31fd6b84fae400fc55ff603e3585524cb5b8c5/exchangelib-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "0287716fcfb59b47250376549a9df0a8", "sha256": "ee12bbbdf47e31adbd16eb00d48c66f5d47d88cea06addf993ebfde8cddbb137"}, "downloads": -1, "filename": "exchangelib-1.3.1.tar.gz", "has_sig": false, "md5_digest": "0287716fcfb59b47250376549a9df0a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41901, "upload_time": "2016-03-17T14:13:46", "upload_time_iso_8601": "2016-03-17T14:13:46.495238Z", "url": "https://files.pythonhosted.org/packages/8e/54/4cfebc7f7bc52e5ca033e6f9c10c58f40fd3a1e8557beae0c262800adf46/exchangelib-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "b6737ac4211693965d51bb7d2bf49d61", "sha256": "3e25db43584c134fb7b87feabbe035978018d4c7b7ce627d70fab21c7b4d33c3"}, "downloads": -1, "filename": "exchangelib-1.3.2.tar.gz", "has_sig": false, "md5_digest": "b6737ac4211693965d51bb7d2bf49d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42552, "upload_time": "2016-05-09T14:40:36", "upload_time_iso_8601": "2016-05-09T14:40:36.872522Z", "url": "https://files.pythonhosted.org/packages/e8/3f/31a2c9f02e9bd67d4501390ea10b66eac3f670e0a21571b547b6141ee446/exchangelib-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "2fc28c354918e6a9dbcfe7c1a26eb621", "sha256": "0a7df7decaad494e5df0742e8aac2ba7b31b3c8cd4943d38de60574fcbfddd92"}, "downloads": -1, "filename": "exchangelib-1.3.3.tar.gz", "has_sig": false, "md5_digest": "2fc28c354918e6a9dbcfe7c1a26eb621", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42555, "upload_time": "2016-05-09T14:53:11", "upload_time_iso_8601": "2016-05-09T14:53:11.891448Z", "url": "https://files.pythonhosted.org/packages/01/b3/555d622bf6a752b3a920d74230e2fd48bc08e3188b0e8deed2cccf30f829/exchangelib-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "3c0eb4872d84c1630ce56d6ba1bb9e0f", "sha256": "a3b47323f45293fd9627816f83e78b34a9ff57bfdd6fcdbd050e90b3d06e5830"}, "downloads": -1, "filename": "exchangelib-1.3.4.tar.gz", "has_sig": false, "md5_digest": "3c0eb4872d84c1630ce56d6ba1bb9e0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44264, "upload_time": "2016-05-12T21:43:27", "upload_time_iso_8601": "2016-05-12T21:43:27.461937Z", "url": "https://files.pythonhosted.org/packages/22/9a/634ca7503bcecd7dbf51074ae2cf47057e5c0ed3bf35fdacc811434a9b00/exchangelib-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "58df9a26df95d4afbca5733eb494f978", "sha256": "b35d8d12a15136471c5dc0b4bae72f6bdcc6be9b4b70b47eea6d3ff528c142d4"}, "downloads": -1, "filename": "exchangelib-1.3.5.tar.gz", "has_sig": false, "md5_digest": "58df9a26df95d4afbca5733eb494f978", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44696, "upload_time": "2016-05-13T08:33:10", "upload_time_iso_8601": "2016-05-13T08:33:10.652091Z", "url": "https://files.pythonhosted.org/packages/3f/7e/d2314cfc4e04801bc3da3da8519154111b3a16dc5d07c5ab391aa0df7d4e/exchangelib-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "2fcc5416a4de0172b18f293637178b18", "sha256": "dedb53b7b6a0474516d865dcae0bfb19b0af473880f9107bfe4f2c63ae625847"}, "downloads": -1, "filename": "exchangelib-1.3.6.tar.gz", "has_sig": false, "md5_digest": "2fcc5416a4de0172b18f293637178b18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44700, "upload_time": "2016-05-13T09:05:44", "upload_time_iso_8601": "2016-05-13T09:05:44.113523Z", "url": "https://files.pythonhosted.org/packages/0d/0c/87088ba12769f47f6e3dcc1273f9ac6c86be0ccd03e41d0bb0c18a311e1d/exchangelib-1.3.6.tar.gz", "yanked": false}], "1.3.7": [{"comment_text": "", "digests": {"md5": "791aee441cd2d250087c8b393d359c90", "sha256": "cfda3077e148ef18d02b72ac03a438f821eeb50d0695e48e6e5fbb4d72b45195"}, "downloads": -1, "filename": "exchangelib-1.3.7.tar.gz", "has_sig": false, "md5_digest": "791aee441cd2d250087c8b393d359c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45244, "upload_time": "2016-06-22T16:26:47", "upload_time_iso_8601": "2016-06-22T16:26:47.740787Z", "url": "https://files.pythonhosted.org/packages/94/c7/4ad9922a542b19a5edd1fccc809fea18c63783c10a9a07c84c93e0361b97/exchangelib-1.3.7.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "3e1ff6c5ed3da81740bbc5a56594f2a0", "sha256": "a9f3649d8ada784f03553e2ffef7da82954d92444b743b7fb28fef073586b6e6"}, "downloads": -1, "filename": "exchangelib-1.4.tar.gz", "has_sig": false, "md5_digest": "3e1ff6c5ed3da81740bbc5a56594f2a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49077, "upload_time": "2016-06-24T09:52:33", "upload_time_iso_8601": "2016-06-24T09:52:33.877577Z", "url": "https://files.pythonhosted.org/packages/e2/6b/617fbe440ab51836392e972d072f8418507a1ed311a17a24ad735fee71cd/exchangelib-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "62598b7669e460d05f10ae95c2e4de85", "sha256": "221da44ef02a2ca11b1169c7e290e165e465d54885d8889fe3bbf069b8327e28"}, "downloads": -1, "filename": "exchangelib-1.4.1.tar.gz", "has_sig": false, "md5_digest": "62598b7669e460d05f10ae95c2e4de85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49085, "upload_time": "2016-06-24T09:55:17", "upload_time_iso_8601": "2016-06-24T09:55:17.333492Z", "url": "https://files.pythonhosted.org/packages/0d/9b/40f9c5e43c3d28d2c39e4172eac7e89d3ada018f37a3d714ad15046f7160/exchangelib-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "ed8fea5194a6294bfe9964c06dc1b109", "sha256": "c278fe575573f2c5667bb38e7db397a4217ae9bc5bd1e4fda5906332ea51dcc7"}, "downloads": -1, "filename": "exchangelib-1.4.2.tar.gz", "has_sig": false, "md5_digest": "ed8fea5194a6294bfe9964c06dc1b109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50113, "upload_time": "2016-07-27T10:23:14", "upload_time_iso_8601": "2016-07-27T10:23:14.065957Z", "url": "https://files.pythonhosted.org/packages/01/db/9672f6b85f97326c4efd53a5c079688e42296f543776c0ad8869ac48f848/exchangelib-1.4.2.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "d4be4d74c468be00d42f456b14d25be6", "sha256": "3d4ae1aa0180bc4fb34b35d1e310f28fcd328182441a4356771a343ab220467f"}, "downloads": -1, "filename": "exchangelib-1.5.0.tar.gz", "has_sig": false, "md5_digest": "d4be4d74c468be00d42f456b14d25be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51361, "upload_time": "2016-07-29T11:37:39", "upload_time_iso_8601": "2016-07-29T11:37:39.430766Z", "url": "https://files.pythonhosted.org/packages/33/98/840d6a3854f72dc1dd2832ee6c86e27e8e82f51d65706958275e2b521c2e/exchangelib-1.5.0.tar.gz", "yanked": false}], "1.5.1": [], "1.5.2": [{"comment_text": "", "digests": {"md5": "eb3b61a751f325fd7f582d280c0350e6", "sha256": "12c83d8cb0deda2bb968808f3ddeee81a8978a58006572f9a54d74fdaceeb530"}, "downloads": -1, "filename": "exchangelib-1.5.2.tar.gz", "has_sig": false, "md5_digest": "eb3b61a751f325fd7f582d280c0350e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52289, "upload_time": "2016-08-08T16:06:19", "upload_time_iso_8601": "2016-08-08T16:06:19.572532Z", "url": "https://files.pythonhosted.org/packages/bb/c8/7f0a7a4d17f72d7b4d5f3afebc57d4524da6c96dcfb787a5746cc4d809c3/exchangelib-1.5.2.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "76c93eca426cc6535ec5b8f28ed9d9d7", "sha256": "a6fbad4e7762c97cb401efb600c9799badfc88398099dae7fd127dd34f107ba1"}, "downloads": -1, "filename": "exchangelib-1.6.0.tar.gz", "has_sig": false, "md5_digest": "76c93eca426cc6535ec5b8f28ed9d9d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55976, "upload_time": "2016-08-17T21:31:02", "upload_time_iso_8601": "2016-08-17T21:31:02.134653Z", "url": "https://files.pythonhosted.org/packages/90/25/12bdbcb7807ec129ac5e87446d0480660caefdded325f8295951596925e7/exchangelib-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "3a7e7c1b236c38ba7879509d689d9033", "sha256": "6fa54408ae8e3085dfd9800d84aacf7ac14f973c84e9452fa0a14e71227ee1f5"}, "downloads": -1, "filename": "exchangelib-1.6.1.tar.gz", "has_sig": false, "md5_digest": "3a7e7c1b236c38ba7879509d689d9033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56345, "upload_time": "2016-08-18T09:56:57", "upload_time_iso_8601": "2016-08-18T09:56:57.894071Z", "url": "https://files.pythonhosted.org/packages/76/0f/ce0ddee20c2688c5598bc1d5376456cdbdc28de9737bca3e47d94f23e067/exchangelib-1.6.1.tar.gz", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "143092977400d6d984078ec577b65938", "sha256": "2325918cf659adf7efe1af925d7d5508668d1113cc21f7ecb30173eb4582259d"}, "downloads": -1, "filename": "exchangelib-1.6.2.tar.gz", "has_sig": false, "md5_digest": "143092977400d6d984078ec577b65938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57404, "upload_time": "2016-09-09T11:36:36", "upload_time_iso_8601": "2016-09-09T11:36:36.492932Z", "url": "https://files.pythonhosted.org/packages/f6/e0/59169f30ea499bd364bf64b70bfc681e7149cde98bee8ff3d2dbc935e744/exchangelib-1.6.2.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "3e59bd57c9fa50e18857ae28f0262c03", "sha256": "2bb3083bc44d3cac1cae062b86f41ec926cdf1ac68a723fb4f625d47847bc379"}, "downloads": -1, "filename": "exchangelib-1.7.0.tar.gz", "has_sig": false, "md5_digest": "3e59bd57c9fa50e18857ae28f0262c03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63265, "upload_time": "2016-09-23T10:35:50", "upload_time_iso_8601": "2016-09-23T10:35:50.690867Z", "url": "https://files.pythonhosted.org/packages/fa/3b/54b4130e09c9033689ed507328dce5e4145b89f60a365a6e164af81e0caf/exchangelib-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "4270ab5d8d86e4b059c209dba721495f", "sha256": "20fb38c42bdcd06beb4659c129b9e2f07320cd8c27b4a7b2999016a826806754"}, "downloads": -1, "filename": "exchangelib-1.7.1.tar.gz", "has_sig": false, "md5_digest": "4270ab5d8d86e4b059c209dba721495f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66797, "upload_time": "2016-09-29T17:07:46", "upload_time_iso_8601": "2016-09-29T17:07:46.852204Z", "url": "https://files.pythonhosted.org/packages/0e/51/e1a94f58f977a874609e160d67fe890caae7e7d5f97a2d012b8fa79b5ecb/exchangelib-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "505d9faf5d5154997813b7294bb017ea", "sha256": "ee634b4c93c0adb776df5447f9cd16530107cb567152dfcf1adf2fa54139ce10"}, "downloads": -1, "filename": "exchangelib-1.7.2.tar.gz", "has_sig": false, "md5_digest": "505d9faf5d5154997813b7294bb017ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72609, "upload_time": "2016-11-22T20:48:19", "upload_time_iso_8601": "2016-11-22T20:48:19.997129Z", "url": "https://files.pythonhosted.org/packages/4f/ce/3815377afe26af36a5eeb89fba62d18d516d7a81b3002d9df5cd2e0dbe00/exchangelib-1.7.2.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "b1a43494fbd043739cffb3d757817fbf", "sha256": "e665a4f85ad5412ca9ffd01643fdc21a4c4408d580688027bed18fccd71407ed"}, "downloads": -1, "filename": "exchangelib-1.7.3.tar.gz", "has_sig": false, "md5_digest": "b1a43494fbd043739cffb3d757817fbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75229, "upload_time": "2016-11-30T16:26:35", "upload_time_iso_8601": "2016-11-30T16:26:35.534945Z", "url": "https://files.pythonhosted.org/packages/8d/e4/f4559c057014f7638308bd85a0bc098f739aee3d94351bad5b30df09f13f/exchangelib-1.7.3.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "6a0e0aae87125f7b35af9a06d0ca18d2", "sha256": "d9367eec90ad40a9ad48d4aad124e539817c33172787f50ceb3411ea27a1cfff"}, "downloads": -1, "filename": "exchangelib-1.7.4.tar.gz", "has_sig": false, "md5_digest": "6a0e0aae87125f7b35af9a06d0ca18d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78452, "upload_time": "2016-12-16T13:10:22", "upload_time_iso_8601": "2016-12-16T13:10:22.093331Z", "url": "https://files.pythonhosted.org/packages/a7/ea/be91bbe7c5d644d3bbcdc30fb6a154f6e9509c395668c178bd4905215868/exchangelib-1.7.4.tar.gz", "yanked": false}], "1.7.5": [{"comment_text": "", "digests": {"md5": "10d8cdab27eae384095d3b424060d9ad", "sha256": "eb02d89a92a41179332746df9fdd119a7b0f6404927b1286fa6b2c4b7d7a983b"}, "downloads": -1, "filename": "exchangelib-1.7.5.tar.gz", "has_sig": false, "md5_digest": "10d8cdab27eae384095d3b424060d9ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 80269, "upload_time": "2016-12-28T13:52:09", "upload_time_iso_8601": "2016-12-28T13:52:09.442440Z", "url": "https://files.pythonhosted.org/packages/fb/f6/5c170f86d142162bce4c68815fcd1d1fa7600c0e18f3529bfe80a5a10ef4/exchangelib-1.7.5.tar.gz", "yanked": false}], "1.7.6": [{"comment_text": "", "digests": {"md5": "eeb484778740c3512dd932c66b356017", "sha256": "d2a1ceb949ac435cba730493eb18e410ce1955c622e1202cb1dd5aede36b8e0c"}, "downloads": -1, "filename": "exchangelib-1.7.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "eeb484778740c3512dd932c66b356017", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 94121, "upload_time": "2017-01-23T07:09:28", "upload_time_iso_8601": "2017-01-23T07:09:28.064030Z", "url": "https://files.pythonhosted.org/packages/6f/74/902c3f25acbf4e25c7a6bde8fe7c65c408bebb9746b2f29b30a0f1548640/exchangelib-1.7.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1825ef87c55bb30178f532084967f8e2", "sha256": "a0229c2c1479be2fa4119288706cc680a8992e8281425b40bacf8ada7692035f"}, "downloads": -1, "filename": "exchangelib-1.7.6.tar.gz", "has_sig": false, "md5_digest": "1825ef87c55bb30178f532084967f8e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81885, "upload_time": "2017-01-23T07:09:24", "upload_time_iso_8601": "2017-01-23T07:09:24.484855Z", "url": "https://files.pythonhosted.org/packages/c3/f5/ae8ea533b35bfd055175aa174bb516f12a4e9774bd7888423b14ec221ca1/exchangelib-1.7.6.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "c3bd85b113b4ffc67e6e1b4f0167b57b", "sha256": "5f57fc236bb65d02f3f7dc88560f1929ea0fd96d25c8c5fa892c3d4d9858b19b"}, "downloads": -1, "filename": "exchangelib-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c3bd85b113b4ffc67e6e1b4f0167b57b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 101132, "upload_time": "2017-02-09T20:39:21", "upload_time_iso_8601": "2017-02-09T20:39:21.049295Z", "url": "https://files.pythonhosted.org/packages/96/dd/403b8caa5b318cb0539a88809c5ba5f5fa97d9af0887c1e1ebe5df3fbc4f/exchangelib-1.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "899817132b209484209c58c1f0fa37b6", "sha256": "bb9b861021aa0cf4c722e928280b8b736b874f2847426d1b4e62cb00dd39f2f4"}, "downloads": -1, "filename": "exchangelib-1.8.0.tar.gz", "has_sig": false, "md5_digest": "899817132b209484209c58c1f0fa37b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89036, "upload_time": "2017-02-09T20:39:17", "upload_time_iso_8601": "2017-02-09T20:39:17.949838Z", "url": "https://files.pythonhosted.org/packages/d1/6d/9b2e02839f756914852ecb9f3db77d7a5c4f639600fec91213ef50f28ea0/exchangelib-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "d20bbe744139554df7d96a1dce854973", "sha256": "9f997afc243ae506edf8bc1353cf50807dcc87ede284df40c40a61897183eca2"}, "downloads": -1, "filename": "exchangelib-1.8.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d20bbe744139554df7d96a1dce854973", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 101618, "upload_time": "2017-02-09T23:12:45", "upload_time_iso_8601": "2017-02-09T23:12:45.294640Z", "url": "https://files.pythonhosted.org/packages/a2/3d/a7c6ca5e290aa4f01c1ca7dfa76ebfd374dfe1632663d2c0593ab41434c0/exchangelib-1.8.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa9ba0f32640d0ad92ee6fd8f896fd0d", "sha256": "0e9c3af87f1c9435e99b3e053a7df0b81fa3fda4bc1da095467e54597ab285c9"}, "downloads": -1, "filename": "exchangelib-1.8.1.tar.gz", "has_sig": false, "md5_digest": "fa9ba0f32640d0ad92ee6fd8f896fd0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87098, "upload_time": "2017-02-09T23:12:42", "upload_time_iso_8601": "2017-02-09T23:12:42.665104Z", "url": "https://files.pythonhosted.org/packages/85/af/b70b6e10634ba72ea3f13f99cc574ee43b960a8a49a5edd51ccbf53192fb/exchangelib-1.8.1.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "742d2c9ba450b80eef7d472b8e1dbb1f", "sha256": "fcd9c625062e6469c41dd2f12f248f7b4be9947bd3d7167c9afb5f8d25d50822"}, "downloads": -1, "filename": "exchangelib-1.9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "742d2c9ba450b80eef7d472b8e1dbb1f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 120568, "upload_time": "2017-04-11T13:31:55", "upload_time_iso_8601": "2017-04-11T13:31:55.271164Z", "url": "https://files.pythonhosted.org/packages/a6/26/3678fb44d3f535320ed3407bad893857ed214d0705e8c4d47300a8c975d8/exchangelib-1.9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "265b7dacebcceff23d14cd2792e98da0", "sha256": "0c110bd5f852f07fcf2c73ed5ce75abc827a7454021a577b7d63cd425e800077"}, "downloads": -1, "filename": "exchangelib-1.9.0.tar.gz", "has_sig": false, "md5_digest": "265b7dacebcceff23d14cd2792e98da0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89223, "upload_time": "2017-04-11T13:31:51", "upload_time_iso_8601": "2017-04-11T13:31:51.939339Z", "url": "https://files.pythonhosted.org/packages/9a/0c/6b876277125b4d15c048ffa73d4922ccc96f7d82d7adea6dd800e7946b13/exchangelib-1.9.0.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "4f499e9c5b3b0442472d2e32749905b6", "sha256": "a0403a1a5b4912aa642a76b7976bd070f7cac808c9989e54656c1c1ee23a8c94"}, "downloads": -1, "filename": "exchangelib-1.9.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4f499e9c5b3b0442472d2e32749905b6", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 120710, "upload_time": "2017-04-11T19:18:02", "upload_time_iso_8601": "2017-04-11T19:18:02.414955Z", "url": "https://files.pythonhosted.org/packages/f8/be/738a500b23599d9cdc5376c76bb2011a8f96195b235def43dbb22762a1b5/exchangelib-1.9.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "557834cee84401deebeab0456b1c7e82", "sha256": "d4148cdc8528b1feab28ef4c032a7f3b503c5316256c94e68b7b0caee0dbddc8"}, "downloads": -1, "filename": "exchangelib-1.9.1.tar.gz", "has_sig": false, "md5_digest": "557834cee84401deebeab0456b1c7e82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89444, "upload_time": "2017-04-11T19:17:57", "upload_time_iso_8601": "2017-04-11T19:17:57.774818Z", "url": "https://files.pythonhosted.org/packages/49/0a/0ec73e6afc9d92af19823361cbb71d5f0bcbfc2e6e98cd3945f51e1a0879/exchangelib-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "6c652dd938de804bc7f271d020b54ed5", "sha256": "2ca37128c41d542b30a760df8027b4f4c9f18d4ec0da9e105c8e3925d7a0d40f"}, "downloads": -1, "filename": "exchangelib-1.9.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6c652dd938de804bc7f271d020b54ed5", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 121214, "upload_time": "2017-04-12T20:06:07", "upload_time_iso_8601": "2017-04-12T20:06:07.278771Z", "url": "https://files.pythonhosted.org/packages/f8/75/cbdb91cd6bca156fc9e9698b3da935254d0eb9a17b6b82a5761bc7eb16ae/exchangelib-1.9.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d9e557c223f79ff5e407848947603309", "sha256": "417ac7650c75c5c4daf0b185e0191e4ed895f1b2c6f9429ee6a094dfed5a2421"}, "downloads": -1, "filename": "exchangelib-1.9.2.tar.gz", "has_sig": false, "md5_digest": "d9e557c223f79ff5e407848947603309", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89970, "upload_time": "2017-04-12T20:06:03", "upload_time_iso_8601": "2017-04-12T20:06:03.126480Z", "url": "https://files.pythonhosted.org/packages/b2/f0/825a84c78197a20f77b688ba0a436edd20758e630f8e19d85d0edac969d6/exchangelib-1.9.2.tar.gz", "yanked": false}], "1.9.3": [{"comment_text": "", "digests": {"md5": "37b5e653bbeaed5a58dba73d709265c6", "sha256": "1bda29b53c1156762203f3bc5f647df00f4bc80aee0e593d7279ccd98dc211d2"}, "downloads": -1, "filename": "exchangelib-1.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "37b5e653bbeaed5a58dba73d709265c6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 123444, "upload_time": "2017-04-25T22:21:07", "upload_time_iso_8601": "2017-04-25T22:21:07.795277Z", "url": "https://files.pythonhosted.org/packages/33/19/e27a3899786d477bbad663d7c8217aa1fd3b50dfc2b13e881ff04f34bdf7/exchangelib-1.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a48a4cdbb07c0215334b226ef431f12f", "sha256": "3144f2a3b4985b411165acaaabf6728195993cfca081aa22cdc5466ffd5e5073"}, "downloads": -1, "filename": "exchangelib-1.9.3.tar.gz", "has_sig": false, "md5_digest": "a48a4cdbb07c0215334b226ef431f12f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92178, "upload_time": "2017-04-25T22:21:04", "upload_time_iso_8601": "2017-04-25T22:21:04.979976Z", "url": "https://files.pythonhosted.org/packages/5d/53/114b88155999928ced62bee074986f97141e731637980eac0cf5d9d8977c/exchangelib-1.9.3.tar.gz", "yanked": false}], "1.9.4": [{"comment_text": "", "digests": {"md5": "594f2f818d36a3fae2271a43bd96ea7b", "sha256": "a0a5c5bfd1822c54570784cb5a95f140a9f9c76ac2cbb91544576d963c8c3101"}, "downloads": -1, "filename": "exchangelib-1.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "594f2f818d36a3fae2271a43bd96ea7b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 129274, "upload_time": "2017-06-22T21:43:52", "upload_time_iso_8601": "2017-06-22T21:43:52.179101Z", "url": "https://files.pythonhosted.org/packages/8e/9e/1075d30d978e67952d01361814c3c02e282a4af267000cca5a4537a6e2bd/exchangelib-1.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a550a980d234830d7e84d323978a05a", "sha256": "5233188f3c602281d4f036acf2a300678b5cd1747992cf47514357680ac3d371"}, "downloads": -1, "filename": "exchangelib-1.9.4.tar.gz", "has_sig": false, "md5_digest": "1a550a980d234830d7e84d323978a05a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99390, "upload_time": "2017-06-22T21:43:49", "upload_time_iso_8601": "2017-06-22T21:43:49.676574Z", "url": "https://files.pythonhosted.org/packages/2e/d3/159801e592f1cdfdf67fb89e25985750893350e5caadba9631b2e6c6edac/exchangelib-1.9.4.tar.gz", "yanked": false}], "1.9.5": [{"comment_text": "", "digests": {"md5": "f85683dce2876b9f2f13b35b250c5c21", "sha256": "c5cc75303b865d06ff9f7b2feb4e0c3c35ecdca1ec5ae3036abe789cab2267e6"}, "downloads": -1, "filename": "exchangelib-1.9.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f85683dce2876b9f2f13b35b250c5c21", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 132443, "upload_time": "2017-08-23T19:19:22", "upload_time_iso_8601": "2017-08-23T19:19:22.427974Z", "url": "https://files.pythonhosted.org/packages/02/36/a9346a2bbe443b5059dceb68b8aa810d3890dd5dffd3c8e64fe1479852b7/exchangelib-1.9.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d0aa0490e22c88dd4369a529868c1fe", "sha256": "a4b1e1ea8321eeb395d328380d8ee9edd6e3e4e452850913b04febc4804c2aa5"}, "downloads": -1, "filename": "exchangelib-1.9.5.tar.gz", "has_sig": false, "md5_digest": "6d0aa0490e22c88dd4369a529868c1fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102056, "upload_time": "2017-08-23T19:19:19", "upload_time_iso_8601": "2017-08-23T19:19:19.502342Z", "url": "https://files.pythonhosted.org/packages/73/8e/37a2a97294965bca1963636af9f5bff6418407a4041baa77e11003f0d6ef/exchangelib-1.9.5.tar.gz", "yanked": false}], "1.9.6": [{"comment_text": "", "digests": {"md5": "73cdd58883c23505208eac00660b5bb2", "sha256": "c77f2b1942f17a21f76eb1a06b779ecae12a7cbb68aebba9a92219b540e9e3c8"}, "downloads": -1, "filename": "exchangelib-1.9.6.tar.gz", "has_sig": false, "md5_digest": "73cdd58883c23505208eac00660b5bb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111769, "upload_time": "2017-08-31T12:06:50", "upload_time_iso_8601": "2017-08-31T12:06:50.614569Z", "url": "https://files.pythonhosted.org/packages/5f/12/27171a67593c2e956061e93f59440e8244dceff7b5a72c4a470de9044eec/exchangelib-1.9.6.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "e2d86d5ad7b0fe4db24da8cc941a9779", "sha256": "4a595be3c19c8f4ad1f07db0211d874734e9f734e48ef3bfe2a8babcb4e4b50f"}, "downloads": -1, "filename": "exchangelib-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e2d86d5ad7b0fe4db24da8cc941a9779", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 229927, "upload_time": "2019-08-21T10:25:11", "upload_time_iso_8601": "2019-08-21T10:25:11.706727Z", "url": "https://files.pythonhosted.org/packages/f1/58/c2c7e19336320906e3219d1bf25c55cf9a1aff9d4692a4f6489f14ce7197/exchangelib-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f0248ae4d873b9e9b7f931ae7cd1f7e", "sha256": "a148ce372121d8e00f8bec9e9889d9b4f164bac95e3e7529a51459df7447710a"}, "downloads": -1, "filename": "exchangelib-2.0.0.tar.gz", "has_sig": false, "md5_digest": "3f0248ae4d873b9e9b7f931ae7cd1f7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 251712, "upload_time": "2019-08-21T10:25:14", "upload_time_iso_8601": "2019-08-21T10:25:14.908804Z", "url": "https://files.pythonhosted.org/packages/1b/b0/e5fadaaf03cbee023031aee7dfaecc17ddb8b9de68ee9d8604b65622d1ba/exchangelib-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "ad4b5de63a9a625dd470ad867498b4a0", "sha256": "a78bc7ba96c43dbc0c2aa22fdcf9da5d93345ac0c00b091fb120abb2e4273db1"}, "downloads": -1, "filename": "exchangelib-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad4b5de63a9a625dd470ad867498b4a0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 193522, "upload_time": "2019-08-27T19:48:43", "upload_time_iso_8601": "2019-08-27T19:48:43.125779Z", "url": "https://files.pythonhosted.org/packages/37/59/23c9377ab53c4667c679d92a98d8620cf97d019761e62bd088603a2c177a/exchangelib-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4eb5f5d14c68fd102d5513ddb28fc30c", "sha256": "f2901dbc711a0196d42e6457737a5434a0ab3960fc9adf58451413bb30746495"}, "downloads": -1, "filename": "exchangelib-2.0.1.tar.gz", "has_sig": false, "md5_digest": "4eb5f5d14c68fd102d5513ddb28fc30c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 197248, "upload_time": "2019-08-27T19:48:48", "upload_time_iso_8601": "2019-08-27T19:48:48.927138Z", "url": "https://files.pythonhosted.org/packages/58/69/4d1d391cbca1ab770451115fee7c7241553aea31711a7434e43d3c10b1cd/exchangelib-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "cc09c59b35b3320ca5c5b3ed4fda40df", "sha256": "75abadcd4d1787ae31c9177f5d8fec0da8ad8f3086742d4bf1f1e6e860e62a3b"}, "downloads": -1, "filename": "exchangelib-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cc09c59b35b3320ca5c5b3ed4fda40df", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 237990, "upload_time": "2019-11-07T08:30:08", "upload_time_iso_8601": "2019-11-07T08:30:08.089612Z", "url": "https://files.pythonhosted.org/packages/69/6c/75f9b444e1e025e32ac168bdc5e7bbedecf1c3382e311d5f862cf9cbf9e1/exchangelib-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b0330a8d8c0e6831c691fe45b19e41", "sha256": "44ed44126f8578c8cf71e6cae5e6a099f613cd9363726da9cd1807a0319a7e7f"}, "downloads": -1, "filename": "exchangelib-2.1.0.tar.gz", "has_sig": false, "md5_digest": "68b0330a8d8c0e6831c691fe45b19e41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 268074, "upload_time": "2019-11-07T08:30:12", "upload_time_iso_8601": "2019-11-07T08:30:12.025802Z", "url": "https://files.pythonhosted.org/packages/45/22/552fee8c86f790c4deca1d5ebeee91a1d85e823425a2c8fddbf36bed0b94/exchangelib-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "33d29d07b0f3d22e1c789be76da23cbd", "sha256": "c4c506bc41c210f5f9b39a3d45aaab921a8d781fcbc9a568f2295425cb7aa525"}, "downloads": -1, "filename": "exchangelib-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "33d29d07b0f3d22e1c789be76da23cbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 257087, "upload_time": "2019-12-05T11:31:39", "upload_time_iso_8601": "2019-12-05T11:31:39.030581Z", "url": "https://files.pythonhosted.org/packages/df/e8/6fbaa48e840cba44af6ff0332e1a9a4751c15bd808f2e5d2c0d203da6491/exchangelib-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37c5732e83c592264bbd224cabd5d13a", "sha256": "b28c5ac8bcbaa757a7642ded32549abd40014dc0cf93befd14badc65b1d123a5"}, "downloads": -1, "filename": "exchangelib-2.1.1.tar.gz", "has_sig": false, "md5_digest": "37c5732e83c592264bbd224cabd5d13a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 270324, "upload_time": "2019-12-05T11:31:42", "upload_time_iso_8601": "2019-12-05T11:31:42.233408Z", "url": "https://files.pythonhosted.org/packages/6b/4b/4d7c4903080b7e60073c7936582ccdb8fa637f8f50acab20c3cd1208c5e8/exchangelib-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "f7f2e9dfda5f9815f3521096fdfe1789", "sha256": "f6748524f14b4f5bd358bbe717b850072416af532129ed6125a75c3ebacafc63"}, "downloads": -1, "filename": "exchangelib-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7f2e9dfda5f9815f3521096fdfe1789", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 281801, "upload_time": "2020-01-17T11:29:28", "upload_time_iso_8601": "2020-01-17T11:29:28.721660Z", "url": "https://files.pythonhosted.org/packages/d6/05/61ecfa495d29d1d1b152c6d02ab737276c207956b7f95e732c57397b0765/exchangelib-2.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75f09d319422e3ffd29e56be813b586e", "sha256": "3d6c036bbd3c72a9185d22853cd2d56ed1e71355d4809ac9135d3c217b72e463"}, "downloads": -1, "filename": "exchangelib-2.2.0.tar.gz", "has_sig": false, "md5_digest": "75f09d319422e3ffd29e56be813b586e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 281072, "upload_time": "2020-01-17T11:29:32", "upload_time_iso_8601": "2020-01-17T11:29:32.134860Z", "url": "https://files.pythonhosted.org/packages/b3/9e/5362be7fc5eeefc607cbdee4fcecf67618ab1e45d8ce36a2c992a0bfb422/exchangelib-2.2.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "ff8618801b8de9b90b4d4cd72ea9ceaf", "sha256": "05a8a7d0f795a4c1aa7f5bb081fa3874cfa466f675aa78847eeef4623398fc51"}, "downloads": -1, "filename": "exchangelib-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ff8618801b8de9b90b4d4cd72ea9ceaf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 279005, "upload_time": "2020-01-17T11:30:22", "upload_time_iso_8601": "2020-01-17T11:30:22.208830Z", "url": "https://files.pythonhosted.org/packages/be/23/c3d04c44a34f62fd7484723d1962fc44bf4771a3090da198d6cbc170110e/exchangelib-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d974771df06e84d5804f509863b3c448", "sha256": "bd6e28414049ba6f721098fe569e0353f234145f0cb7932889e0d4836e6f748c"}, "downloads": -1, "filename": "exchangelib-3.0.0.tar.gz", "has_sig": false, "md5_digest": "d974771df06e84d5804f509863b3c448", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 278714, "upload_time": "2020-01-17T11:30:25", "upload_time_iso_8601": "2020-01-17T11:30:25.707370Z", "url": "https://files.pythonhosted.org/packages/b3/9a/84067942808f0e6eb2710a22c9a72142ab4a7409f778b18693077b0e282f/exchangelib-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "5b46b32cf35ec54df34ab388d4d51d1b", "sha256": "40fb050576bf353275364af3beeaf694e7e1a635c87dea002d47490c8a28584b"}, "downloads": -1, "filename": "exchangelib-3.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5b46b32cf35ec54df34ab388d4d51d1b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 242809, "upload_time": "2020-01-17T16:39:58", "upload_time_iso_8601": "2020-01-17T16:39:58.655411Z", "url": "https://files.pythonhosted.org/packages/9d/8a/37c1bbfb20197fd00ef556a76a68641467ec58da474745b25208b172001d/exchangelib-3.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26278a657c9e28962f5b217a03c18afa", "sha256": "ab17a06664fc6555814926c4a3817ab0eb2fc6382265d0727a5ea68cc1f0c874"}, "downloads": -1, "filename": "exchangelib-3.1.0.tar.gz", "has_sig": false, "md5_digest": "26278a657c9e28962f5b217a03c18afa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 217130, "upload_time": "2020-01-17T16:40:04", "upload_time_iso_8601": "2020-01-17T16:40:04.708390Z", "url": "https://files.pythonhosted.org/packages/e2/fe/0e56eb580cb5df1086981c5eca785535d7824ddb2c55b53e90c3ed7193b7/exchangelib-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "3e1c0735d66627a5a9954beb0b808c4f", "sha256": "5f03575095dfe8803237f4514914a27da8de34199f0560b5619d678e8a7a1dcf"}, "downloads": -1, "filename": "exchangelib-3.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e1c0735d66627a5a9954beb0b808c4f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 279972, "upload_time": "2020-01-23T08:59:45", "upload_time_iso_8601": "2020-01-23T08:59:45.232397Z", "url": "https://files.pythonhosted.org/packages/89/3e/09144c95dbef854be7d7d78b8fb046bbc0a0880042541ebc4494a4062500/exchangelib-3.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95e64cd7f3796a5fc09fa4aae5c82b4e", "sha256": "33e76159fa14e004ae8333ae0a0d2bd9c6d4f682f9f63ad659c058ecadb20fef"}, "downloads": -1, "filename": "exchangelib-3.1.1.tar.gz", "has_sig": false, "md5_digest": "95e64cd7f3796a5fc09fa4aae5c82b4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 278843, "upload_time": "2020-01-23T08:59:48", "upload_time_iso_8601": "2020-01-23T08:59:48.573342Z", "url": "https://files.pythonhosted.org/packages/7d/05/e6eea07cfa03cbad917705525be6f4c4c212733bc2e28852d82fe824171f/exchangelib-3.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3e1c0735d66627a5a9954beb0b808c4f", "sha256": "5f03575095dfe8803237f4514914a27da8de34199f0560b5619d678e8a7a1dcf"}, "downloads": -1, "filename": "exchangelib-3.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e1c0735d66627a5a9954beb0b808c4f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 279972, "upload_time": "2020-01-23T08:59:45", "upload_time_iso_8601": "2020-01-23T08:59:45.232397Z", "url": "https://files.pythonhosted.org/packages/89/3e/09144c95dbef854be7d7d78b8fb046bbc0a0880042541ebc4494a4062500/exchangelib-3.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95e64cd7f3796a5fc09fa4aae5c82b4e", "sha256": "33e76159fa14e004ae8333ae0a0d2bd9c6d4f682f9f63ad659c058ecadb20fef"}, "downloads": -1, "filename": "exchangelib-3.1.1.tar.gz", "has_sig": false, "md5_digest": "95e64cd7f3796a5fc09fa4aae5c82b4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 278843, "upload_time": "2020-01-23T08:59:48", "upload_time_iso_8601": "2020-01-23T08:59:48.573342Z", "url": "https://files.pythonhosted.org/packages/7d/05/e6eea07cfa03cbad917705525be6f4c4c212733bc2e28852d82fe824171f/exchangelib-3.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:51 2020"}