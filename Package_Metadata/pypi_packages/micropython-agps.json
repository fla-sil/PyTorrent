{"info": {"author": "pulkin", "author_email": "gpulkin@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "micropython-agps\n----------------\n\nFor use with [micropython on GPRS module A9/A9G](https://github.com/pulkin/micropython/tree/master/ports/gprs_a9).\n\nExamples\n--------\n\n### Location over internet connection:\n\n```python\n# Enable data connection\nimport cellular\ncellular.gprs(\"apn\", \"user\", \"pass\")\n\n# Get location\nimport agps\nagps.get_location_opencellid(cellular.agps_station_data(), \"api-token\") # Please visit https://opencellid.org for getting your API token\n(3.484547378491735, 78.86739615869062)\n```\n\n### Location using local database:\n\nCreate a binary database of GSM cells:\n\n```bash\n./bs-dl.py --mcc 234 --mnc 3 --circle=-0.118092,51.509865,3 -v --token api-token # Please visit https://opencellid.org for getting your API token\n```\n\nFiltering is done through entries `mcc` - mobile country code, `mnc` - mobile network code and `circle` - location and radius of a circle with cells.\nAll entries are optional, however, the full worldwide database is as large as 1Gb.\nProviding `mcc` and `mnc` will reduce the databse size down to few Mb.\nProviding a `circle` will further filter data towards the circular area specified: 3 km of urban area results in around 10Kb of data.\n\nNote that the token is optional: without a proper token, the script will fall back to a git mirror which may contain outdated data.\n\nThen, upload the database to the module (note the file name):\n\n```bash\nampy --port /dev/ttyUSB0 put 234-3.bin\n```\n\nFinally, determine the location (no data connection needed):\n\n```python\n# Get location\nimport agps\nimport cellular\nagps.get_location_local(cellular.agps_station_data(), \"234-3.bin\")\n(3.484547378491735, 78.86739615869062)\n```\n\nRaw data\n--------\n\nPlease find [here](https://github.com/pulkin/agps-data).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pulkin/mpy-agps", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "micropython-agps", "package_url": "https://pypi.org/project/micropython-agps/", "platform": "", "project_url": "https://pypi.org/project/micropython-agps/", "project_urls": {"Homepage": "https://github.com/pulkin/mpy-agps"}, "release_url": "https://pypi.org/project/micropython-agps/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Assisted location services for MicroPython", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>micropython-agps</h2>\n<p>For use with <a href=\"https://github.com/pulkin/micropython/tree/master/ports/gprs_a9\" rel=\"nofollow\">micropython on GPRS module A9/A9G</a>.</p>\n<h2>Examples</h2>\n<h3>Location over internet connection:</h3>\n<pre><span class=\"c1\"># Enable data connection</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cellular</span>\n<span class=\"n\">cellular</span><span class=\"o\">.</span><span class=\"n\">gprs</span><span class=\"p\">(</span><span class=\"s2\">\"apn\"</span><span class=\"p\">,</span> <span class=\"s2\">\"user\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pass\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get location</span>\n<span class=\"kn\">import</span> <span class=\"nn\">agps</span>\n<span class=\"n\">agps</span><span class=\"o\">.</span><span class=\"n\">get_location_opencellid</span><span class=\"p\">(</span><span class=\"n\">cellular</span><span class=\"o\">.</span><span class=\"n\">agps_station_data</span><span class=\"p\">(),</span> <span class=\"s2\">\"api-token\"</span><span class=\"p\">)</span> <span class=\"c1\"># Please visit https://opencellid.org for getting your API token</span>\n<span class=\"p\">(</span><span class=\"mf\">3.484547378491735</span><span class=\"p\">,</span> <span class=\"mf\">78.86739615869062</span><span class=\"p\">)</span>\n</pre>\n<h3>Location using local database:</h3>\n<p>Create a binary database of GSM cells:</p>\n<pre>./bs-dl.py --mcc <span class=\"m\">234</span> --mnc <span class=\"m\">3</span> --circle<span class=\"o\">=</span>-0.118092,51.509865,3 -v --token api-token <span class=\"c1\"># Please visit https://opencellid.org for getting your API token</span>\n</pre>\n<p>Filtering is done through entries <code>mcc</code> - mobile country code, <code>mnc</code> - mobile network code and <code>circle</code> - location and radius of a circle with cells.\nAll entries are optional, however, the full worldwide database is as large as 1Gb.\nProviding <code>mcc</code> and <code>mnc</code> will reduce the databse size down to few Mb.\nProviding a <code>circle</code> will further filter data towards the circular area specified: 3 km of urban area results in around 10Kb of data.</p>\n<p>Note that the token is optional: without a proper token, the script will fall back to a git mirror which may contain outdated data.</p>\n<p>Then, upload the database to the module (note the file name):</p>\n<pre>ampy --port /dev/ttyUSB0 put <span class=\"m\">234</span>-3.bin\n</pre>\n<p>Finally, determine the location (no data connection needed):</p>\n<pre><span class=\"c1\"># Get location</span>\n<span class=\"kn\">import</span> <span class=\"nn\">agps</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cellular</span>\n<span class=\"n\">agps</span><span class=\"o\">.</span><span class=\"n\">get_location_local</span><span class=\"p\">(</span><span class=\"n\">cellular</span><span class=\"o\">.</span><span class=\"n\">agps_station_data</span><span class=\"p\">(),</span> <span class=\"s2\">\"234-3.bin\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mf\">3.484547378491735</span><span class=\"p\">,</span> <span class=\"mf\">78.86739615869062</span><span class=\"p\">)</span>\n</pre>\n<h2>Raw data</h2>\n<p>Please find <a href=\"https://github.com/pulkin/agps-data\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 6483591, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b1f00c7266cf0b51a434ec77b076c05e", "sha256": "22f082d2ec2ad69e3fce462b8830b0880e9a9b2ebf3c85ebf2d66f4877427cac"}, "downloads": -1, "filename": "micropython-agps-0.1.tar.gz", "has_sig": false, "md5_digest": "b1f00c7266cf0b51a434ec77b076c05e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2398, "upload_time": "2020-01-19T19:41:19", "upload_time_iso_8601": "2020-01-19T19:41:19.926352Z", "url": "https://files.pythonhosted.org/packages/d5/2c/e1269d2a0d0d709f53f40cc44c077e91b9bbcfe5c4f3aeb70651a0a794e6/micropython-agps-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e64394414bb8c81746983c84a894b782", "sha256": "2e0f13beb5b9245479aca9832da8a133fb3ee1403191505316cd554c7738afff"}, "downloads": -1, "filename": "micropython-agps-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e64394414bb8c81746983c84a894b782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2424, "upload_time": "2020-01-19T20:07:00", "upload_time_iso_8601": "2020-01-19T20:07:00.536643Z", "url": "https://files.pythonhosted.org/packages/53/33/30df05885500cdebcd14a39e846374a627b3df650625db0a1c8cc6ec9a52/micropython-agps-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e64394414bb8c81746983c84a894b782", "sha256": "2e0f13beb5b9245479aca9832da8a133fb3ee1403191505316cd554c7738afff"}, "downloads": -1, "filename": "micropython-agps-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e64394414bb8c81746983c84a894b782", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2424, "upload_time": "2020-01-19T20:07:00", "upload_time_iso_8601": "2020-01-19T20:07:00.536643Z", "url": "https://files.pythonhosted.org/packages/53/33/30df05885500cdebcd14a39e846374a627b3df650625db0a1c8cc6ec9a52/micropython-agps-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:08 2020"}