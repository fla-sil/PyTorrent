{"info": {"author": "Florimond Manca", "author_email": "florimond.manca@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "# arel\n\n[![Build Status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.arel?branchName=master)](https://dev.azure.com/florimondmanca/public/_build/latest?definitionId=6&branchName=master)\n[![Coverage](https://codecov.io/gh/florimondmanca/arel/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/arel)\n![Python versions](https://img.shields.io/pypi/pyversions/arel.svg)\n[![Package version](https://badge.fury.io/py/arel.svg)](https://pypi.org/project/arel)\n\nBrowser hot reload for Python ASGI web apps.\n\n![](https://github.com/florimondmanca/arel/blob/master/docs/demo.gif)\n\n## Overview\n\n**What is this for?**\n\n`arel` can be used to implement development-only hot-reload for non-Python files that are not read from disk on each request. This may include GraphQL schemas, cached rendered Markdown content, etc.\n\n**How does it work?**\n\n`arel` watches changes over a set of files. When a file changes, `arel` notifies the browser (using WebSocket), and an injected client script triggers a page reload. You can register your own reload hooks for any extra server-side operations, such as reloading cached content or re-initializing other server-side resources.\n\n## Installation\n\n_This is project in early alpha status. Be sure to pin your dependencies._\n\n```bash\npip install 'arel==0.1.*'\n```\n\n## Quickstart\n\n_For a working example using Starlette, see the [Example](#example) section._\n\nAlthough the exact instructions to set up hot reload with `arel` depend on the specifics of your ASGI framework, there are three general steps to follow:\n\n1. Create an `HotReload` instance, passing a directory of files to watch:\n\n   ```python\n   import arel\n\n   hotreload = arel.HotReload(\"./path/to/directory\")\n   ```\n\n2. Mount the hot reload endpoint, and register its startup and shutdown event handlers. If using Starlette, this can be done like this:\n\n   ```python\n   from starlette.applications import Starlette\n   from starlette.routing import WebSocketRoute\n\n   app = Starlette(\n       routes=[WebSocketRoute(\"/hot-reload\", hotreload, name=\"hot-reload\")],\n       on_startup=[hotreload.startup],\n       on_shutdown=[hot_reaload.shutdown],\n   )\n   ```\n\n3. Add the JavaScript code to your website HTML. If using [Starlette with Jinja templates](https://www.starlette.io/templates/), you can do this by updating the global environment, then injecting the script into your base template:\n\n   ```python\n   templates.env.globals[\"DEBUG\"] = os.getenv(\"DEBUG\")  # Development flag.\n   templates.env.globals[\"hotreload\"] = hotreload\n   ```\n\n   ```jinja\n   <body>\n     <!-- Page content... -->\n\n     <!-- Hot reload script -->\n     {% if DEBUG %}\n       {{ hotreload.script(url_for('hot-reload')) }}\n     {% endif %}\n   </body>\n   ```\n\n## Example\n\nThe [`example` directory](https://github.com/florimondmanca/arel/tree/master/example) contains an example Markdown-powered website that uses `arel` to refresh the browser when Markdown content changes.\n\n## License\n\nMIT\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.1.0 - 2020-04-11\n\n_Initial release._\n\n### Added\n\n- Add `HotReload` ASGI application class. (Pull #1)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/florimondmanca/arel", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "arel", "package_url": "https://pypi.org/project/arel/", "platform": "", "project_url": "https://pypi.org/project/arel/", "project_urls": {"Homepage": "http://github.com/florimondmanca/arel"}, "release_url": "https://pypi.org/project/arel/0.1.0/", "requires_dist": ["starlette (==0.*)", "watchgod (==0.6.*)"], "requires_python": ">=3.7", "summary": "Browser hot reload for Python ASGI web apps", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>arel</h1>\n<p><a href=\"https://dev.azure.com/florimondmanca/public/_build/latest?definitionId=6&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5559c660777c2a79e1ddb4cba6175f654b47c84/68747470733a2f2f6465762e617a7572652e636f6d2f666c6f72696d6f6e646d616e63612f7075626c69632f5f617069732f6275696c642f7374617475732f666c6f72696d6f6e646d616e63612e6172656c3f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/florimondmanca/arel\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d55477ce0ae815fa7b1e00ebe29c3c353fb911b/68747470733a2f2f636f6465636f762e696f2f67682f666c6f72696d6f6e646d616e63612f6172656c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/361020e7f2275c150936e00274013a73ce82658e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6172656c2e737667\">\n<a href=\"https://pypi.org/project/arel\" rel=\"nofollow\"><img alt=\"Package version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/307db5f8856c28502d28338232a7ac117d0683c9/68747470733a2f2f62616467652e667572792e696f2f70792f6172656c2e737667\"></a></p>\n<p>Browser hot reload for Python ASGI web apps.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d8b52dfaac572aa114d75f213d1e741ce78d4fd/68747470733a2f2f6769746875622e636f6d2f666c6f72696d6f6e646d616e63612f6172656c2f626c6f622f6d61737465722f646f63732f64656d6f2e676966\"></p>\n<h2>Overview</h2>\n<p><strong>What is this for?</strong></p>\n<p><code>arel</code> can be used to implement development-only hot-reload for non-Python files that are not read from disk on each request. This may include GraphQL schemas, cached rendered Markdown content, etc.</p>\n<p><strong>How does it work?</strong></p>\n<p><code>arel</code> watches changes over a set of files. When a file changes, <code>arel</code> notifies the browser (using WebSocket), and an injected client script triggers a page reload. You can register your own reload hooks for any extra server-side operations, such as reloading cached content or re-initializing other server-side resources.</p>\n<h2>Installation</h2>\n<p><em>This is project in early alpha status. Be sure to pin your dependencies.</em></p>\n<pre>pip install <span class=\"s1\">'arel==0.1.*'</span>\n</pre>\n<h2>Quickstart</h2>\n<p><em>For a working example using Starlette, see the <a href=\"#example\" rel=\"nofollow\">Example</a> section.</em></p>\n<p>Although the exact instructions to set up hot reload with <code>arel</code> depend on the specifics of your ASGI framework, there are three general steps to follow:</p>\n<ol>\n<li>\n<p>Create an <code>HotReload</code> instance, passing a directory of files to watch:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">arel</span>\n\n<span class=\"n\">hotreload</span> <span class=\"o\">=</span> <span class=\"n\">arel</span><span class=\"o\">.</span><span class=\"n\">HotReload</span><span class=\"p\">(</span><span class=\"s2\">\"./path/to/directory\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Mount the hot reload endpoint, and register its startup and shutdown event handlers. If using Starlette, this can be done like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">starlette.applications</span> <span class=\"kn\">import</span> <span class=\"n\">Starlette</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.routing</span> <span class=\"kn\">import</span> <span class=\"n\">WebSocketRoute</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Starlette</span><span class=\"p\">(</span>\n    <span class=\"n\">routes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">WebSocketRoute</span><span class=\"p\">(</span><span class=\"s2\">\"/hot-reload\"</span><span class=\"p\">,</span> <span class=\"n\">hotreload</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"hot-reload\"</span><span class=\"p\">)],</span>\n    <span class=\"n\">on_startup</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">hotreload</span><span class=\"o\">.</span><span class=\"n\">startup</span><span class=\"p\">],</span>\n    <span class=\"n\">on_shutdown</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">hot_reaload</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Add the JavaScript code to your website HTML. If using <a href=\"https://www.starlette.io/templates/\" rel=\"nofollow\">Starlette with Jinja templates</a>, you can do this by updating the global environment, then injecting the script into your base template:</p>\n<pre><span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">globals</span><span class=\"p\">[</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DEBUG\"</span><span class=\"p\">)</span>  <span class=\"c1\"># Development flag.</span>\n<span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">globals</span><span class=\"p\">[</span><span class=\"s2\">\"hotreload\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">hotreload</span>\n</pre>\n<pre><span class=\"x\">&lt;body&gt;</span>\n<span class=\"x\">  &lt;!-- Page content... --&gt;</span>\n\n<span class=\"x\">  &lt;!-- Hot reload script --&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">DEBUG</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">{{</span> <span class=\"nv\">hotreload.script</span><span class=\"o\">(</span><span class=\"nv\">url_for</span><span class=\"o\">(</span><span class=\"s1\">'hot-reload'</span><span class=\"o\">))</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">&lt;/body&gt;</span>\n</pre>\n</li>\n</ol>\n<h2>Example</h2>\n<p>The <a href=\"https://github.com/florimondmanca/arel/tree/master/example\" rel=\"nofollow\"><code>example</code> directory</a> contains an example Markdown-powered website that uses <code>arel</code> to refresh the browser when Markdown content changes.</p>\n<h2>License</h2>\n<p>MIT</p>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<p>The format is based on <a href=\"https://keepachangelog.com/en/1.0.0/\" rel=\"nofollow\">Keep a Changelog</a>.</p>\n<h2>0.1.0 - 2020-04-11</h2>\n<p><em>Initial release.</em></p>\n<h3>Added</h3>\n<ul>\n<li>Add <code>HotReload</code> ASGI application class. (Pull #1)</li>\n</ul>\n\n          </div>"}, "last_serial": 7000888, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1e15d60563e5b2024cc0deecb5a90fef", "sha256": "46843ece267450e8d018485cb5f73c4be3d6d9e58cf5058b6ea01d70f1c777a6"}, "downloads": -1, "filename": "arel-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e15d60563e5b2024cc0deecb5a90fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6864, "upload_time": "2020-04-11T18:03:17", "upload_time_iso_8601": "2020-04-11T18:03:17.620215Z", "url": "https://files.pythonhosted.org/packages/d2/92/f546ed95af33d9a00bc1023c9309d438ad58ec71cf64357e14be318f4619/arel-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f857523f5cf0ec9cce1de7f037f08a3", "sha256": "11fa0dbdd0a3f8af5b350b43768e8c215b9a428103af663f1c2808c1d81fccce"}, "downloads": -1, "filename": "arel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7f857523f5cf0ec9cce1de7f037f08a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8212, "upload_time": "2020-04-11T18:03:20", "upload_time_iso_8601": "2020-04-11T18:03:20.653347Z", "url": "https://files.pythonhosted.org/packages/de/49/91058b82cb7aa375a14257217970ec2bb5f9c06f6a11d4325b2a428365fb/arel-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e15d60563e5b2024cc0deecb5a90fef", "sha256": "46843ece267450e8d018485cb5f73c4be3d6d9e58cf5058b6ea01d70f1c777a6"}, "downloads": -1, "filename": "arel-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1e15d60563e5b2024cc0deecb5a90fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6864, "upload_time": "2020-04-11T18:03:17", "upload_time_iso_8601": "2020-04-11T18:03:17.620215Z", "url": "https://files.pythonhosted.org/packages/d2/92/f546ed95af33d9a00bc1023c9309d438ad58ec71cf64357e14be318f4619/arel-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f857523f5cf0ec9cce1de7f037f08a3", "sha256": "11fa0dbdd0a3f8af5b350b43768e8c215b9a428103af663f1c2808c1d81fccce"}, "downloads": -1, "filename": "arel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7f857523f5cf0ec9cce1de7f037f08a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8212, "upload_time": "2020-04-11T18:03:20", "upload_time_iso_8601": "2020-04-11T18:03:20.653347Z", "url": "https://files.pythonhosted.org/packages/de/49/91058b82cb7aa375a14257217970ec2bb5f9c06f6a11d4325b2a428365fb/arel-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:20 2020"}