{"info": {"author": "Loic Coyle", "author_email": "loic.coyle@hotmail.fr", "bugtrack_url": null, "classifiers": ["Framework :: Flask", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Home Automation", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic :: Utilities"], "description": "# thqm\n> Control your desktop from your phone\n\n\n<p align=\"center\">\n <img src=\"./images/logo.svg\" width=\"200\">\n</p>\n\n`thqm` (pronounced tahakoom from the arabic \u062a\u062d\u0643\u0645  meaning control).\n\n`thqm` starts a `waitress` WSGI server on the host machine and allows the client to run pre-configured commands\n& hotkeys on the host machine. This allows for simple remote command & hotkey execution.\n\nA few nice use cases are:\n  * Media playback control\n  * Volume control\n  * Download/torrent control\n  * Control other web applications e.g. Jupyter notebook server\n\n# Installation\n```shell\npip install thqm\n```\n`thqm` is compatible with linux & MacOS (maybe windows ?, though probably not the hotkeys).\n\n# Dependencies\n\n  * `python3`\n  * `flask`\n  * `pyqrcode`\n  * `waitress`\n\nFor hotkey execution:\n  * linux: `xdotool`\n  * MacOS: `osascript`\n\n# Usage\n\nTo start the `thqm` server, on the host machine, simply run:\n```shell\nthqm\n```\nThe help:\n```\nusage: thqm [-h] [-c CONFIG] [-p PORT] [-q] [-v]\n\nRemote command and hotkey execution server.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Path to config file. (default:\n                        /home/lcoyle/.config/thqm/config)\n  -p PORT, --port PORT  Port number. (default: 8800)\n  -q, --qrcode          Show the qrcode. (default: False)\n  -v, --verbosity       Verbosity of the waitress server. -v will print\n                        events. -vv will print server messages. (default: 0)\n```\n\nThe `-q` flag will print a qr-code in the terminal, this qr-code will bypass the `thqm-auth` authentication, the same is true for the in browser qr-code, this makes it particularly easy to share access with others.\n<p align=\"center\">\n <img src=\"./images/thqm_phone_portrait.png\" width=\"200\" />\n</p>\n\n# Configuration\n\n`thqm` reads a configuration file located at `$XDG_CONFIG_HOME/thqm/config` (or `$HOME/.config/thqm/config` if `$XDG_CONFIG_HOME` if not defined). This `ini` format file contains the pre-configured commands & hotkeys.\n\nEach `ini` block can have the following structure:\n```ini\n[event name]        # name of the event\nexec_cmd=...        # command to execute\nexec_hotkey=...     # hotkey to execute (on linux use xdotool key names, on macos use osascript key names)\nicon_path=...       # (optional) icon of the the event\n```\nif the event has both an `exec_cmd` and an `exec_hotkey` the command is run prior to running the hotkey.\n\nHere would be the contents for media playback and audio control:\n```ini\n# requires pactl\n[Raise volume]\nexec_cmd=pactl set-sink-volume @DEFAULT_SINK@ +10%\n\n[Lower volume]\nexec_cmd=pactl set-sink-volume @DEFAULT_SINK@ -10%\n\n[Toggle mute]\nexec_cmd=pactl set-sink-mute @DEFAULT_SINK@ toggle\n\n# using media keys\n[Media previous]\nexec_hotkey=XF86AudioPrev\n\n[Media next]\nexec_hotkey=XF86AudioNext\n\n[Media play]\nexec_hotkey=XF86AudioPlay\n\n[Media pause]\nexec_hotkey=XF86AudioPause\n\n# browser control\n[play/pause]\nexec_hotkey=space\n\n[scrub back]\nexec_hotkey=Left\n\n[scrub forward]\nexec_hotkey=Right\n```\n\nIf you want rudimentary authentication, add the `thqm-auth` block, with the `password` key, **don't use a real password, the encryption isn't secure**:\n```ini\n[thqm-auth]\npassword=super_secret_password\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/loiccoyle/thqm", "keywords": "remote,control,HTTP-server,flask,thqm", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "thqm", "package_url": "https://pypi.org/project/thqm/", "platform": "", "project_url": "https://pypi.org/project/thqm/", "project_urls": {"Homepage": "https://github.com/loiccoyle/thqm", "Repository": "https://github.com/loiccoyle/thqm"}, "release_url": "https://pypi.org/project/thqm/1.0.0/", "requires_dist": ["flask (>=1.1.1,<2.0.0)", "pyqrcode (>=1.2.1,<2.0.0)", "waitress (>=1.4.3,<2.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "thqm, WSGI server providing simple remote hotkey and command execution on host.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>thqm</h1>\n<blockquote>\n<p>Control your desktop from your phone</p>\n</blockquote>\n<p align=\"center\">\n <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7aa3dd4d81d123acc27bfe876701e55436855b0b/2e2f696d616765732f6c6f676f2e737667\" width=\"200\">\n</p>\n<p><code>thqm</code> (pronounced tahakoom from the arabic \u062a\u062d\u0643\u0645  meaning control).</p>\n<p><code>thqm</code> starts a <code>waitress</code> WSGI server on the host machine and allows the client to run pre-configured commands\n&amp; hotkeys on the host machine. This allows for simple remote command &amp; hotkey execution.</p>\n<p>A few nice use cases are:</p>\n<ul>\n<li>Media playback control</li>\n<li>Volume control</li>\n<li>Download/torrent control</li>\n<li>Control other web applications e.g. Jupyter notebook server</li>\n</ul>\n<h1>Installation</h1>\n<pre>pip install thqm\n</pre>\n<p><code>thqm</code> is compatible with linux &amp; MacOS (maybe windows ?, though probably not the hotkeys).</p>\n<h1>Dependencies</h1>\n<ul>\n<li><code>python3</code></li>\n<li><code>flask</code></li>\n<li><code>pyqrcode</code></li>\n<li><code>waitress</code></li>\n</ul>\n<p>For hotkey execution:</p>\n<ul>\n<li>linux: <code>xdotool</code></li>\n<li>MacOS: <code>osascript</code></li>\n</ul>\n<h1>Usage</h1>\n<p>To start the <code>thqm</code> server, on the host machine, simply run:</p>\n<pre>thqm\n</pre>\n<p>The help:</p>\n<pre><code>usage: thqm [-h] [-c CONFIG] [-p PORT] [-q] [-v]\n\nRemote command and hotkey execution server.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONFIG, --config CONFIG\n                        Path to config file. (default:\n                        /home/lcoyle/.config/thqm/config)\n  -p PORT, --port PORT  Port number. (default: 8800)\n  -q, --qrcode          Show the qrcode. (default: False)\n  -v, --verbosity       Verbosity of the waitress server. -v will print\n                        events. -vv will print server messages. (default: 0)\n</code></pre>\n<p>The <code>-q</code> flag will print a qr-code in the terminal, this qr-code will bypass the <code>thqm-auth</code> authentication, the same is true for the in browser qr-code, this makes it particularly easy to share access with others.</p>\n<p align=\"center\">\n <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24c6d90869f8a78d54bb55c9197012bd7e88a2e8/2e2f696d616765732f7468716d5f70686f6e655f706f7274726169742e706e67\" width=\"200\">\n</p>\n<h1>Configuration</h1>\n<p><code>thqm</code> reads a configuration file located at <code>$XDG_CONFIG_HOME/thqm/config</code> (or <code>$HOME/.config/thqm/config</code> if <code>$XDG_CONFIG_HOME</code> if not defined). This <code>ini</code> format file contains the pre-configured commands &amp; hotkeys.</p>\n<p>Each <code>ini</code> block can have the following structure:</p>\n<pre><span class=\"na\">[event name]        # name of the event</span>\n<span class=\"na\">exec_cmd</span><span class=\"o\">=</span><span class=\"s\">...        # command to execute</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">...     # hotkey to execute (on linux use xdotool key names, on macos use osascript key names)</span>\n<span class=\"na\">icon_path</span><span class=\"o\">=</span><span class=\"s\">...       # (optional) icon of the the event</span>\n</pre>\n<p>if the event has both an <code>exec_cmd</code> and an <code>exec_hotkey</code> the command is run prior to running the hotkey.</p>\n<p>Here would be the contents for media playback and audio control:</p>\n<pre><span class=\"c1\"># requires pactl</span>\n<span class=\"k\">[Raise volume]</span>\n<span class=\"na\">exec_cmd</span><span class=\"o\">=</span><span class=\"s\">pactl set-sink-volume @DEFAULT_SINK@ +10%</span>\n\n<span class=\"k\">[Lower volume]</span>\n<span class=\"na\">exec_cmd</span><span class=\"o\">=</span><span class=\"s\">pactl set-sink-volume @DEFAULT_SINK@ -10%</span>\n\n<span class=\"k\">[Toggle mute]</span>\n<span class=\"na\">exec_cmd</span><span class=\"o\">=</span><span class=\"s\">pactl set-sink-mute @DEFAULT_SINK@ toggle</span>\n\n<span class=\"c1\"># using media keys</span>\n<span class=\"k\">[Media previous]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">XF86AudioPrev</span>\n\n<span class=\"k\">[Media next]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">XF86AudioNext</span>\n\n<span class=\"k\">[Media play]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">XF86AudioPlay</span>\n\n<span class=\"k\">[Media pause]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">XF86AudioPause</span>\n\n<span class=\"c1\"># browser control</span>\n<span class=\"k\">[play/pause]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">space</span>\n\n<span class=\"k\">[scrub back]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">Left</span>\n\n<span class=\"k\">[scrub forward]</span>\n<span class=\"na\">exec_hotkey</span><span class=\"o\">=</span><span class=\"s\">Right</span>\n</pre>\n<p>If you want rudimentary authentication, add the <code>thqm-auth</code> block, with the <code>password</code> key, <strong>don't use a real password, the encryption isn't secure</strong>:</p>\n<pre><span class=\"k\">[thqm-auth]</span>\n<span class=\"na\">password</span><span class=\"o\">=</span><span class=\"s\">super_secret_password</span>\n</pre>\n\n          </div>"}, "last_serial": 7049276, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f4535d725364132b014b2485bbfd83f8", "sha256": "3c716c37d8a6dcd84c90a03f232bb964559760d412c37fe271f9a09cb1e64678"}, "downloads": -1, "filename": "thqm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4535d725364132b014b2485bbfd83f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10089, "upload_time": "2020-04-18T17:47:52", "upload_time_iso_8601": "2020-04-18T17:47:52.690616Z", "url": "https://files.pythonhosted.org/packages/cd/93/ed561a138f913a7db07774206ab88b76a6047010c68d34af422ae7949a2d/thqm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc8254ab7d0e9d4394baf50bcccbcb2c", "sha256": "e4a3b31ac0bed6d47c6e5e64f6a9eef80eadb84cb049003ba8f6de84172b1449"}, "downloads": -1, "filename": "thqm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dc8254ab7d0e9d4394baf50bcccbcb2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10075, "upload_time": "2020-04-18T17:47:54", "upload_time_iso_8601": "2020-04-18T17:47:54.850118Z", "url": "https://files.pythonhosted.org/packages/82/f2/91f91aaab395bbb325b0789e5a4ca840f233854bc4cef06e7dd6db8c8fa8/thqm-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4535d725364132b014b2485bbfd83f8", "sha256": "3c716c37d8a6dcd84c90a03f232bb964559760d412c37fe271f9a09cb1e64678"}, "downloads": -1, "filename": "thqm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f4535d725364132b014b2485bbfd83f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10089, "upload_time": "2020-04-18T17:47:52", "upload_time_iso_8601": "2020-04-18T17:47:52.690616Z", "url": "https://files.pythonhosted.org/packages/cd/93/ed561a138f913a7db07774206ab88b76a6047010c68d34af422ae7949a2d/thqm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc8254ab7d0e9d4394baf50bcccbcb2c", "sha256": "e4a3b31ac0bed6d47c6e5e64f6a9eef80eadb84cb049003ba8f6de84172b1449"}, "downloads": -1, "filename": "thqm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dc8254ab7d0e9d4394baf50bcccbcb2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10075, "upload_time": "2020-04-18T17:47:54", "upload_time_iso_8601": "2020-04-18T17:47:54.850118Z", "url": "https://files.pythonhosted.org/packages/82/f2/91f91aaab395bbb325b0789e5a4ca840f233854bc4cef06e7dd6db8c8fa8/thqm-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:48 2020"}