{"info": {"author": "Kevin Walchko", "author_email": "kevin.walchko@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Topic :: System :: Shells", "Topic :: Utilities"], "description": "Network Scanner\n=================\n\n.. image:: https://travis-ci.org/walchko/netscan2.svg?branch=master\n    :target: https://travis-ci.org/walchko/netscan2\n.. image:: https://img.shields.io/pypi/v/netscan.svg\n    :target: https://pypi.python.org/pypi/netscan/\n    :alt: Latest Version\n.. image:: https://img.shields.io/pypi/dm/netscan.svg\n    :target: https://pypi.python.org/pypi/netscan/\n    :alt: Downloads\n.. image:: https://img.shields.io/pypi/l/netscan.svg\n    :target: https://pypi.python.org/pypi/netscan/\n    :alt: License\n    \nSimple python script which uses pcap, arp-scan, and `avahi <http://www.avahi.org>`__ to:\n\n1. Find hosts that are on the LAN passively\n2. Uses an arp-ping to actively identify hosts\n3. Scan each host to determine open ports and services\n4. Store record of hosts in JSON file, html webpage, or prints to screen\n\n**Note:** Since IP addresses change, the hosts are finger printed via their MAC address. \n\n**Note:** On linux it uses avahi to get hostnames, but doesn't work on OSX\n\nAlternatives\n--------------\n\n`Fing <http://www.overlooksoft.com/fing>`__ is a great and fast network scanner, I have \ntheir app on my iPad. However, the ``fing`` commandline tool for \nRPi I have noticed errors in the MAC address and therefor don't trust it for this \napplication.\n\nInstall \n--------\n\nPre-requisites::\n\n\tbrew install pcap arp-scan\n\nor\n\n::\n\n\tsudo apt-get install libpcap-dev arp-scan\n\nDownload and unzip, then from inside the package::\n\n\tsudo python setup.py install\n\nIf you are working on it::\n\n\tsudo python setup.py develop\n\nRun Active\n------------\n\nTo see all run time options::\n\n\tnetscan --help\n\nBasic, to search for addresses on your network, use::\n\n\tsudo netscan -a -r 5000 -i en1\n\n\n-i, --interface   interface to listen to, ex. en0, en1\n-r, --range       what ports to scan (1 ... n), where n in this case is 5000 (upper limit)\n\nThe default is to display results to the screen.\n\n**Note:** This has to be run as root\n\n\nRun Passive\n-------------\n\n::\n\n\tsudo netscan -p 1000 -j network.json -i en1\n\n-p, --passive  conduct passive mode, scan 1000 packets and output results\n-j, --json     output results to a json file\n\nRun Active/Passive\n--------------------\n\n::\n\n\tsudo netscan -a -p 1000 -w network.html -i en1\n\n-w, --webpage  output to webpage name network.html\n\n\nMake HTML from a JSON file\n-----------------------------\n\n::\n\n\thtml5 network.json\n\nJSON files can be hard to read (one long string), this puts it into an easier form to \ndigest.\n\nTo Do\n------\n\n- remove ``arp-scan`` and code directly in python\n- add ability to feed a earlier json scan into program and wol to bring up sleeping hosts\n- better documentation\n- add a verbose argument, sometimes it seems like nothing is happening\n- currently not using awake, netaddr, or commands ... need to fix \n\n\nWeb Server\n-----------\n\nThis is designed to work with Node.js `netscan <http://github.com/walchko/node-netscan>`__ but that is still work in progress.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/walchko/netscan2", "keywords": "network scanner active passive dpkt html", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "netscan", "package_url": "https://pypi.org/project/netscan/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/netscan/", "project_urls": {"Homepage": "https://github.com/walchko/netscan2"}, "release_url": "https://pypi.org/project/netscan/2.1.2/", "requires_dist": null, "requires_python": null, "summary": "A simple Python active and passive network scanner for linux and OSX", "version": "2.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/walchko/netscan2\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/walchko/netscan2.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db66116fbe7770c5d77792aed117174387f4036e/68747470733a2f2f7472617669732d63692e6f72672f77616c63686b6f2f6e65747363616e322e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/netscan/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c1aad317cb618fa1e70ba78ef4ba42254eed995/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e65747363616e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/netscan/\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c04812be41812c0e4e90df988a82b026eba0090/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6e65747363616e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/netscan/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65c48793d15ed30e0663f37cd60c5328f74cf91a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6e65747363616e2e737667\"></a>\n<p>Simple python script which uses pcap, arp-scan, and <a href=\"http://www.avahi.org\" rel=\"nofollow\">avahi</a> to:</p>\n<ol>\n<li>Find hosts that are on the LAN passively</li>\n<li>Uses an arp-ping to actively identify hosts</li>\n<li>Scan each host to determine open ports and services</li>\n<li>Store record of hosts in JSON file, html webpage, or prints to screen</li>\n</ol>\n<p><strong>Note:</strong> Since IP addresses change, the hosts are finger printed via their MAC address.</p>\n<p><strong>Note:</strong> On linux it uses avahi to get hostnames, but doesn\u2019t work on OSX</p>\n<div id=\"alternatives\">\n<h2>Alternatives</h2>\n<p><a href=\"http://www.overlooksoft.com/fing\" rel=\"nofollow\">Fing</a> is a great and fast network scanner, I have\ntheir app on my iPad. However, the <tt>fing</tt> commandline tool for\nRPi I have noticed errors in the MAC address and therefor don\u2019t trust it for this\napplication.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Pre-requisites:</p>\n<pre>brew install pcap arp-scan\n</pre>\n<p>or</p>\n<pre>sudo apt-get install libpcap-dev arp-scan\n</pre>\n<p>Download and unzip, then from inside the package:</p>\n<pre>sudo python setup.py install\n</pre>\n<p>If you are working on it:</p>\n<pre>sudo python setup.py develop\n</pre>\n</div>\n<div id=\"run-active\">\n<h2>Run Active</h2>\n<p>To see all run time options:</p>\n<pre>netscan --help\n</pre>\n<p>Basic, to search for addresses on your network, use:</p>\n<pre>sudo netscan -a -r 5000 -i en1\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--interface</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>interface to listen to, ex. en0, en1</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-r</span>, <span class=\"option\">--range</span></kbd></td>\n<td>what ports to scan (1 \u2026 n), where n in this case is 5000 (upper limit)</td></tr>\n</tbody>\n</table>\n<p>The default is to display results to the screen.</p>\n<p><strong>Note:</strong> This has to be run as root</p>\n</div>\n<div id=\"run-passive\">\n<h2>Run Passive</h2>\n<pre>sudo netscan -p 1000 -j network.json -i en1\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-p</span>, <span class=\"option\">--passive</span></kbd></td>\n<td>conduct passive mode, scan 1000 packets and output results</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-j</span>, <span class=\"option\">--json</span></kbd></td>\n<td>output results to a json file</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"run-active-passive\">\n<h2>Run Active/Passive</h2>\n<pre>sudo netscan -a -p 1000 -w network.html -i en1\n</pre>\n<table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-w</span>, <span class=\"option\">--webpage</span></kbd></td>\n<td>output to webpage name network.html</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"make-html-from-a-json-file\">\n<h2>Make HTML from a JSON file</h2>\n<pre>html5 network.json\n</pre>\n<p>JSON files can be hard to read (one long string), this puts it into an easier form to\ndigest.</p>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<ul>\n<li>remove <tt><span class=\"pre\">arp-scan</span></tt> and code directly in python</li>\n<li>add ability to feed a earlier json scan into program and wol to bring up sleeping hosts</li>\n<li>better documentation</li>\n<li>add a verbose argument, sometimes it seems like nothing is happening</li>\n<li>currently not using awake, netaddr, or commands \u2026 need to fix</li>\n</ul>\n</div>\n<div id=\"web-server\">\n<h2>Web Server</h2>\n<p>This is designed to work with Node.js <a href=\"http://github.com/walchko/node-netscan\" rel=\"nofollow\">netscan</a> but that is still work in progress.</p>\n</div>\n\n          </div>"}, "last_serial": 1690118, "releases": {"2.1.0": [], "2.1.1": [{"comment_text": "", "digests": {"md5": "a9f4c4edb7ec701d068bddc0538c65d3", "sha256": "a5c55b0d377e478ba9864c09cf13d38ac50801ad61cc7b81b4451e3c0ad87e14"}, "downloads": -1, "filename": "netscan-2.1.1.tar.gz", "has_sig": false, "md5_digest": "a9f4c4edb7ec701d068bddc0538c65d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13638, "upload_time": "2015-08-23T22:21:28", "upload_time_iso_8601": "2015-08-23T22:21:28.885452Z", "url": "https://files.pythonhosted.org/packages/7a/71/aee6b61e83b7cc69a2ee9fe3a2e3b2b3cca93cf440db27a285a0ca2d6398/netscan-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "65aed4c94ea1fa84609bf869031bf348", "sha256": "247c6aa18efca44b6779258a95257b4e7766d286d8d2bf354ba8bd6d0a8c10fc"}, "downloads": -1, "filename": "netscan-2.1.2.tar.gz", "has_sig": false, "md5_digest": "65aed4c94ea1fa84609bf869031bf348", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13855, "upload_time": "2015-08-23T23:27:41", "upload_time_iso_8601": "2015-08-23T23:27:41.705660Z", "url": "https://files.pythonhosted.org/packages/8a/46/9ccac2aea4cf8c19443bf564cf95920e0f9e24e61016c7c1b513f30a6651/netscan-2.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65aed4c94ea1fa84609bf869031bf348", "sha256": "247c6aa18efca44b6779258a95257b4e7766d286d8d2bf354ba8bd6d0a8c10fc"}, "downloads": -1, "filename": "netscan-2.1.2.tar.gz", "has_sig": false, "md5_digest": "65aed4c94ea1fa84609bf869031bf348", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13855, "upload_time": "2015-08-23T23:27:41", "upload_time_iso_8601": "2015-08-23T23:27:41.705660Z", "url": "https://files.pythonhosted.org/packages/8a/46/9ccac2aea4cf8c19443bf564cf95920e0f9e24e61016c7c1b513f30a6651/netscan-2.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:55 2020"}