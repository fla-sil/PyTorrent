{"info": {"author": "Kosc Telecom", "author_email": "si@kosc-telecom.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Pieuvre\n\nPieuvre is a simple yet powerful workflow engine library developed by [Kosc Telecom](https://www.kosc-telecom.fr/en/), aimed at Django but also usable in standalone mode.\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.5+\n- Optional: Django 1.11+\n\n### Installing\n\n```\npip install pieuvre\n```\n\n## Running the tests\n\nPieuvre's tests could be quite improved. However you can have a look! Install the dependencies to run the tests:\n```\npip install pieuvre[test]\n```\n\nThen run them with:\n```\npytest\n```\n\n### Usage\n\nPieuvre allows you to attach *workflows* to backend models (built-in support for Django models, but any class implementing a ``save`` method will work).\n\nPieuvre workflows define a set of states and transitions and allow quick implementation of custom hooks for each transition. Pieuvre lets you implement complex business logic backed by any storage implementation.\n\nCustom behavior can be set:\n- for transitions (by defining a method name with the transition name),\n- when a state is entered (``on_enter_<state_name>``)`or exited (``on_exit_<state_name>``)\n- before (``before_<transition_name>``) or after (``after_<transition_name>``) a transition\n\nThose hooks are dynamically called and require no specific setup.\n\nChecks allow you to enforce specific conditions for entering or leaving a state.\n\nExample:\n\n```\nfrom pieuvre import Workflow, WorkflowEnabled\n\nROCKET_STATES = Choices(\n\t\"IN_FACTORY\", \"in_factory\", \"in factory\",\n\t\"ON_LAUNCHPAD\", \"on_launchpad\", \"on launchpad\",\n\t\"IN_SPACE\", \"in_space\", \"in space\"\n)\n\nROCKET_BRANDS = Choices(\n\t\"ARIANESPACE\", \"arianespace\", \"Arianespace\",\n\t\"SPACEX\", \"spacex\", \"Space X\"\n)\n\nclass Rocket(WorkflowEnabled, models.Model):\n\tstate = models.CharField(default=ROCKET_STATES.IN_FACTORY, choices=ROCKET_STATES)\n\tfuel = models.PositiveIntegerField(default=0)\n\tlaunch_date = models.DateTimeField(null=True)\n\tbrand = models.CharField()\n\n\tdef get_workflow_class(self):\n\t\tif self.brand == ROCKET_BRANDS.ARIANESPACE:\n\t\t\treturn Ariane5Workflow()\n\t\treturn RocketWorkflow()\n\n\nclass RocketWorkflow(Workflow):\n\tstates = ROCKET_STATES\n\ttransitions = {\n\t\t[\n\t\t\t\"source\": ROCKET_STATES.IN_FACTORY,\n\t\t\t\"destination\": ROCKET_STATES.ON_LAUNCHPAD,\n\t\t\t\"name\": \"prepare_for_launch\"\n\t\t],\n\t\t[\n\t\t\t\"source\": ROCKET_STATES.ON_LAUNCHPAD,\n\t\t\t\"destination\": ROCKET_STATES.IN_SPACE,\n\t\t\t\"name\": \"launch\"\n\t\t]\n\t}\n\n\tdef _refill(self):\n\t\tself.fuel += 1000\n\n\tdef prepare_for_launch(self):\n\t\tif self.model.fuel < 10:\n\t\t\tself._refill()\n\n\tdef launch(self):\n\t\tself.model.launch_date = timezone.now()\n\nclass Ariane5Workflow(RocketWorkflow):\n\t@on_enter_state_check(ROCKET_STATES.IN_SPACE)\n\tdef check_launch(self):\n\t\tif self.model.fuel < 220:\n\t\t\traise WorkflowValidationError(\"Not enough fuel to go up!\")\n\nif __name__ == \"__main__\":\n\trocket = Rocket.objects.create(brand=ROCKET_BRANDS.ARIANESPACE)\n\trocket.workflow.prepare_for_launch()\n\trocket.workflow.launch()\n\tassert rocket.launch_date is not None\n\n```\n\nWorkflows can be extended and dynamically instanciated. This lets you implement multiple workflows backed by a single model, which allows powerful business logic customization as well as a true split between the model definition and its behavior.\n\nWorkflows just need a field to store their state (``state`` by default, but easily overridable with ``state_field_name``). It is thus possible to let different workflows coexist on the same model, for instance a workflow modelizing the launch procedure of a rocket and an other workflow modelizing the launch in orbit of its payload.\n\n## Contributing\n\nAny contribution is welcome through Github's Pull requests.\n\nIdeas:\n- store a workflow version to allow graceful workflow upgrades while maintaining workflow consistency on existing objects\n- support for other ORM backends\n\n## Authors\n\n* **Sa\u00efd Ben Rjab** - [Kosc Telecom](https://www.kosc-telecom.fr/)\n* **lerela** - [Fasfox](https://fasfox.com/)\n\n## License\n\nThis project is licensed under the Apache License - see the [LICENSE.md](LICENSE.md) file for details\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/kosctelecom/pieuvre.git", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "pieuvre", "package_url": "https://pypi.org/project/pieuvre/", "platform": "", "project_url": "https://pypi.org/project/pieuvre/", "project_urls": {"Homepage": "http://github.com/kosctelecom/pieuvre.git"}, "release_url": "https://pypi.org/project/pieuvre/0.1.0/", "requires_dist": ["pycodestyle ; extra == 'doc'", "sphinx ; extra == 'doc'", "sphinx-rtd-theme ; extra == 'doc'", "sphinxcontrib-websupport ; extra == 'doc'", "pycodestyle ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest (==5.3.5) ; extra == 'test'"], "requires_python": ">=3.5", "summary": "Simple Workflow Engine Library", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pieuvre</h1>\n<p>Pieuvre is a simple yet powerful workflow engine library developed by <a href=\"https://www.kosc-telecom.fr/en/\" rel=\"nofollow\">Kosc Telecom</a>, aimed at Django but also usable in standalone mode.</p>\n<h2>Getting Started</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.5+</li>\n<li>Optional: Django 1.11+</li>\n</ul>\n<h3>Installing</h3>\n<pre><code>pip install pieuvre\n</code></pre>\n<h2>Running the tests</h2>\n<p>Pieuvre's tests could be quite improved. However you can have a look! Install the dependencies to run the tests:</p>\n<pre><code>pip install pieuvre[test]\n</code></pre>\n<p>Then run them with:</p>\n<pre><code>pytest\n</code></pre>\n<h3>Usage</h3>\n<p>Pieuvre allows you to attach <em>workflows</em> to backend models (built-in support for Django models, but any class implementing a <code>save</code> method will work).</p>\n<p>Pieuvre workflows define a set of states and transitions and allow quick implementation of custom hooks for each transition. Pieuvre lets you implement complex business logic backed by any storage implementation.</p>\n<p>Custom behavior can be set:</p>\n<ul>\n<li>for transitions (by defining a method name with the transition name),</li>\n<li>when a state is entered (<code>on_enter_&lt;state_name&gt;</code>)`or exited (<code>on_exit_&lt;state_name&gt;</code>)</li>\n<li>before (<code>before_&lt;transition_name&gt;</code>) or after (<code>after_&lt;transition_name&gt;</code>) a transition</li>\n</ul>\n<p>Those hooks are dynamically called and require no specific setup.</p>\n<p>Checks allow you to enforce specific conditions for entering or leaving a state.</p>\n<p>Example:</p>\n<pre><code>from pieuvre import Workflow, WorkflowEnabled\n\nROCKET_STATES = Choices(\n\t\"IN_FACTORY\", \"in_factory\", \"in factory\",\n\t\"ON_LAUNCHPAD\", \"on_launchpad\", \"on launchpad\",\n\t\"IN_SPACE\", \"in_space\", \"in space\"\n)\n\nROCKET_BRANDS = Choices(\n\t\"ARIANESPACE\", \"arianespace\", \"Arianespace\",\n\t\"SPACEX\", \"spacex\", \"Space X\"\n)\n\nclass Rocket(WorkflowEnabled, models.Model):\n\tstate = models.CharField(default=ROCKET_STATES.IN_FACTORY, choices=ROCKET_STATES)\n\tfuel = models.PositiveIntegerField(default=0)\n\tlaunch_date = models.DateTimeField(null=True)\n\tbrand = models.CharField()\n\n\tdef get_workflow_class(self):\n\t\tif self.brand == ROCKET_BRANDS.ARIANESPACE:\n\t\t\treturn Ariane5Workflow()\n\t\treturn RocketWorkflow()\n\n\nclass RocketWorkflow(Workflow):\n\tstates = ROCKET_STATES\n\ttransitions = {\n\t\t[\n\t\t\t\"source\": ROCKET_STATES.IN_FACTORY,\n\t\t\t\"destination\": ROCKET_STATES.ON_LAUNCHPAD,\n\t\t\t\"name\": \"prepare_for_launch\"\n\t\t],\n\t\t[\n\t\t\t\"source\": ROCKET_STATES.ON_LAUNCHPAD,\n\t\t\t\"destination\": ROCKET_STATES.IN_SPACE,\n\t\t\t\"name\": \"launch\"\n\t\t]\n\t}\n\n\tdef _refill(self):\n\t\tself.fuel += 1000\n\n\tdef prepare_for_launch(self):\n\t\tif self.model.fuel &lt; 10:\n\t\t\tself._refill()\n\n\tdef launch(self):\n\t\tself.model.launch_date = timezone.now()\n\nclass Ariane5Workflow(RocketWorkflow):\n\t@on_enter_state_check(ROCKET_STATES.IN_SPACE)\n\tdef check_launch(self):\n\t\tif self.model.fuel &lt; 220:\n\t\t\traise WorkflowValidationError(\"Not enough fuel to go up!\")\n\nif __name__ == \"__main__\":\n\trocket = Rocket.objects.create(brand=ROCKET_BRANDS.ARIANESPACE)\n\trocket.workflow.prepare_for_launch()\n\trocket.workflow.launch()\n\tassert rocket.launch_date is not None\n\n</code></pre>\n<p>Workflows can be extended and dynamically instanciated. This lets you implement multiple workflows backed by a single model, which allows powerful business logic customization as well as a true split between the model definition and its behavior.</p>\n<p>Workflows just need a field to store their state (<code>state</code> by default, but easily overridable with <code>state_field_name</code>). It is thus possible to let different workflows coexist on the same model, for instance a workflow modelizing the launch procedure of a rocket and an other workflow modelizing the launch in orbit of its payload.</p>\n<h2>Contributing</h2>\n<p>Any contribution is welcome through Github's Pull requests.</p>\n<p>Ideas:</p>\n<ul>\n<li>store a workflow version to allow graceful workflow upgrades while maintaining workflow consistency on existing objects</li>\n<li>support for other ORM backends</li>\n</ul>\n<h2>Authors</h2>\n<ul>\n<li><strong>Sa\u00efd Ben Rjab</strong> - <a href=\"https://www.kosc-telecom.fr/\" rel=\"nofollow\">Kosc Telecom</a></li>\n<li><strong>lerela</strong> - <a href=\"https://fasfox.com/\" rel=\"nofollow\">Fasfox</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the Apache License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n\n          </div>"}, "last_serial": 6548536, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "76c7eee6008bf90615d626b4a90c04a1", "sha256": "7e379e9ea3c1ad6dcf922cf9201483fafc36b307a11e3bfe1e287c2ea1bff96a"}, "downloads": -1, "filename": "pieuvre-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "76c7eee6008bf90615d626b4a90c04a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15756, "upload_time": "2020-01-31T10:54:05", "upload_time_iso_8601": "2020-01-31T10:54:05.713616Z", "url": "https://files.pythonhosted.org/packages/27/d5/fd1105d0864f81b310b98f0d90a930a9fac5bcb0cc4344c52a2752f097e4/pieuvre-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76c7eee6008bf90615d626b4a90c04a1", "sha256": "7e379e9ea3c1ad6dcf922cf9201483fafc36b307a11e3bfe1e287c2ea1bff96a"}, "downloads": -1, "filename": "pieuvre-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "76c7eee6008bf90615d626b4a90c04a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 15756, "upload_time": "2020-01-31T10:54:05", "upload_time_iso_8601": "2020-01-31T10:54:05.713616Z", "url": "https://files.pythonhosted.org/packages/27/d5/fd1105d0864f81b310b98f0d90a930a9fac5bcb0cc4344c52a2752f097e4/pieuvre-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:54 2020"}