{"info": {"author": "Ryan McDevitt", "author_email": "mcdevitt.ryan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "# Data Records\n[![PyPI version](https://badge.fury.io/py/data-records.svg)](https://badge.fury.io/py/data-records)\n[![pipeline status](https://gitlab.com/mc706/data-records/badges/master/pipeline.svg)](https://gitlab.com/mc706/data-records/commits/master)\n[![coverage report](https://gitlab.com/mc706/data-records/badges/master/coverage.svg)](https://gitlab.com/mc706/data-records/commits/master)\n[![PyPI](https://img.shields.io/pypi/pyversions/data-records.svg)](https://pypi.org/project/data-records/)\n[![Documentation Status](https://readthedocs.org/projects/data-records/badge/?version=latest)](https://data-records.readthedocs.io/en/latest/?badge=latest)\n[![Downloads](https://pepy.tech/badge/data-records)](https://pepy.tech/project/data-records)\n\nIn certain Functional languages there is a concept of Records. They are a Product Data Type of immutable data that \nhas typed attributes. \n\n## Goals\nThe following are the goals and the \"north star\" for design during the development of this project:\n\n* Ease Of Use\n    * Simple Interface\n    * Does the obvious thing in most cases\n* Immutability\n    * Follow Immutability Patterns such as replace and pattern matching\n* Safety\n    * Include Type Coercion Where Possible\n    * Guarantee that a record has the resulting types\n    * Throw Warning when it is implemented Incorrectly\n\n## Motivation\n\n## Enforced Typing\nI love `@dataclass`, and was ecstatic when it was added to python. However certain things like:\n\n```python \n>>> from dataclasses import dataclass, field\n\n>>> @dataclass\n... class Foo:\n...     bar: str\n...     baz: int\n\n>>> Foo(1, 2)\nFoo(bar=1, baz=2)\n\n```\n\nis not what I would expect when coming from other typed languages. In statically typed languages, this should throw an \nerror because `bar` should be a string. In languages with type coercion, I would expect that `bar` would be `\"1\"`. The default\nbehavior of dataclasses here does neither, and if I were to use this dataclass somewhere that expected bar to be a string\nit would fail with a runtime exception; exactly what the types were supposed to help prevent.\n\n```python \n>>> from data_records import datarecord\n\n>>> @datarecord\n... class Foo:\n...     bar: str\n...     baz: int\n\n>>> Foo(1, 2)\nFoo(bar='1', baz=2)\n\n>>> Foo(\"a\", \"b\")\nTraceback (most recent call last):\n ...\nValueError: invalid literal for int() with base 10: 'b'\n\n```\n\n## Extraneous Field Handling\n\nAnother Problem with dataclasses occurs when trying to pass in a dictionary that has more keys than are required for\ncreating a dataclass:\n\n```python \n>>> from dataclasses import dataclass\n\n>>> @dataclass\n... class Foo:\n...     bar: str\n...     baz: int\n\n>>> Foo(**{'bar': 'test', 'baz': 1, 'other': 'nothing'})\nTraceback (most recent call last):\n ...\nTypeError: __init__() got an unexpected keyword argument 'other'\n\n```\n\nThis makes it hard to pull data records out of larger database calls or received data.\n\n```python\n>>> from data_records import datarecord \n\n>>> @datarecord\n... class Foo:\n...     bar: str\n...     baz: int\n\n>>> Foo(**{'bar': 'test', 'baz': 1, 'other': 'test'})\nFoo(bar='test', baz=1)\n\n>>> Foo.from_dict({'bar': 'test', 'baz': 1, 'other': 'test'})\nFoo(bar='test', baz=1)\n\n```\n\n## Immutable Handling\nData records are immutable (much like frozen dataclasses) and the handling for such is builtin:\n\n```python  \n>>> from data_records import datarecord\n\n>>> @datarecord\n... class Foo:\n...     bar: str\n...     baz: int\n...     lat: float\n...     long: float\n\n>>> example = Foo('test', 2, 65.1, -127.5)\n>>> example2 = example.replace(bar='testing')\n\n>>> example\nFoo(bar='test', baz=2, lat=65.1, long=-127.5)\n\n>>> example2\nFoo(bar='testing', baz=2, lat=65.1, long=-127.5)\n\n>>> latitude, longitude = example.extract('lat', 'long')\n>>> latitude\n65.1\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/mc706/data-records", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "data-records", "package_url": "https://pypi.org/project/data-records/", "platform": "", "project_url": "https://pypi.org/project/data-records/", "project_urls": {"Bug Reports/Issues": "https://gitlab.com/mc706/data-records/issues", "Docs": "https://data-records.readthedocs.io/en/stable/#", "Homepage": "https://gitlab.com/mc706/data-records", "Source": "https://gitlab.com/mc706/data-records"}, "release_url": "https://pypi.org/project/data-records/0.4.2/", "requires_dist": ["prospector ; extra == 'dev'", "coverage ; extra == 'dev'", "mypy ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'"], "requires_python": "", "summary": "Immutable Data Records with Type Coercion", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Data Records</h1>\n<p><a href=\"https://badge.fury.io/py/data-records\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e162d8808a045c60b39edf0813e192f99c80df83/68747470733a2f2f62616467652e667572792e696f2f70792f646174612d7265636f7264732e737667\"></a>\n<a href=\"https://gitlab.com/mc706/data-records/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e550c75064c128476659a78bc285b50e5f42accd/68747470733a2f2f6769746c61622e636f6d2f6d633730362f646174612d7265636f7264732f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://gitlab.com/mc706/data-records/commits/master\" rel=\"nofollow\"><img alt=\"coverage report\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/741985e9adfb11b083bd2a1904241a891b3ec013/68747470733a2f2f6769746c61622e636f6d2f6d633730362f646174612d7265636f7264732f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"https://pypi.org/project/data-records/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9dd72cf1928bfeb433e116f899edea5b7ff53768/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646174612d7265636f7264732e737667\"></a>\n<a href=\"https://data-records.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab5d40db30979122d8a59430602a66f73bf94349/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646174612d7265636f7264732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pepy.tech/project/data-records\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3d33ca8a27faf0d83e0ad901af8c80a6e772b7e/68747470733a2f2f706570792e746563682f62616467652f646174612d7265636f726473\"></a></p>\n<p>In certain Functional languages there is a concept of Records. They are a Product Data Type of immutable data that\nhas typed attributes.</p>\n<h2>Goals</h2>\n<p>The following are the goals and the \"north star\" for design during the development of this project:</p>\n<ul>\n<li>Ease Of Use\n<ul>\n<li>Simple Interface</li>\n<li>Does the obvious thing in most cases</li>\n</ul>\n</li>\n<li>Immutability\n<ul>\n<li>Follow Immutability Patterns such as replace and pattern matching</li>\n</ul>\n</li>\n<li>Safety\n<ul>\n<li>Include Type Coercion Where Possible</li>\n<li>Guarantee that a record has the resulting types</li>\n<li>Throw Warning when it is implemented Incorrectly</li>\n</ul>\n</li>\n</ul>\n<h2>Motivation</h2>\n<h2>Enforced Typing</h2>\n<p>I love <code>@dataclass</code>, and was ecstatic when it was added to python. However certain things like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span><span class=\"p\">,</span> <span class=\"n\">field</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>is not what I would expect when coming from other typed languages. In statically typed languages, this should throw an\nerror because <code>bar</code> should be a string. In languages with type coercion, I would expect that <code>bar</code> would be <code>\"1\"</code>. The default\nbehavior of dataclasses here does neither, and if I were to use this dataclass somewhere that expected bar to be a string\nit would fail with a runtime exception; exactly what the types were supposed to help prevent.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">data_records</span> <span class=\"kn\">import</span> <span class=\"n\">datarecord</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@datarecord</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">literal</span> <span class=\"k\">for</span> <span class=\"nb\">int</span><span class=\"p\">()</span> <span class=\"k\">with</span> <span class=\"n\">base</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span>\n</pre>\n<h2>Extraneous Field Handling</h2>\n<p>Another Problem with dataclasses occurs when trying to pass in a dictionary that has more keys than are required for\ncreating a dataclass:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'nothing'</span><span class=\"p\">})</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"fm\">__init__</span><span class=\"p\">()</span> <span class=\"n\">got</span> <span class=\"n\">an</span> <span class=\"n\">unexpected</span> <span class=\"n\">keyword</span> <span class=\"n\">argument</span> <span class=\"s1\">'other'</span>\n</pre>\n<p>This makes it hard to pull data records out of larger database calls or received data.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">data_records</span> <span class=\"kn\">import</span> <span class=\"n\">datarecord</span> \n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@datarecord</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">})</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"s1\">'bar'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'other'</span><span class=\"p\">:</span> <span class=\"s1\">'test'</span><span class=\"p\">})</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h2>Immutable Handling</h2>\n<p>Data records are immutable (much like frozen dataclasses) and the handling for such is builtin:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">data_records</span> <span class=\"kn\">import</span> <span class=\"n\">datarecord</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@datarecord</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">baz</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"o\">...</span>     <span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n<span class=\"o\">...</span>     <span class=\"n\">long</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">65.1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">127.5</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">example2</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'testing'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">example</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">65.1</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"o\">=-</span><span class=\"mf\">127.5</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">example2</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">'testing'</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">65.1</span><span class=\"p\">,</span> <span class=\"n\">long</span><span class=\"o\">=-</span><span class=\"mf\">127.5</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">latitude</span><span class=\"p\">,</span> <span class=\"n\">longitude</span> <span class=\"o\">=</span> <span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">(</span><span class=\"s1\">'lat'</span><span class=\"p\">,</span> <span class=\"s1\">'long'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">latitude</span>\n<span class=\"mf\">65.1</span>\n</pre>\n\n          </div>"}, "last_serial": 5020899, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b28c7f03d1f81cc360412635758bb520", "sha256": "7b650cf39b8245a9226a382a57522fea02d77cc23ade39906960973826ad7140"}, "downloads": -1, "filename": "data_records-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b28c7f03d1f81cc360412635758bb520", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4309, "upload_time": "2019-03-28T20:49:08", "upload_time_iso_8601": "2019-03-28T20:49:08.454885Z", "url": "https://files.pythonhosted.org/packages/c2/8a/0df6e04b92e5a7b7ba4750c413e1c5686c2476e78bf19979f8cf84e769dc/data_records-0.0.1-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d0a172a4971d0e3a48ea9bcd0c6d3a98", "sha256": "7d822aef847586ee8311757a63aae6a8861e1b6498335fee0b6149d6808089b5"}, "downloads": -1, "filename": "data_records-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0a172a4971d0e3a48ea9bcd0c6d3a98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7139, "upload_time": "2019-03-31T13:54:25", "upload_time_iso_8601": "2019-03-31T13:54:25.167141Z", "url": "https://files.pythonhosted.org/packages/ce/2f/60d51407b1f36f4278372bd2b4c106663ac1c3e193c427c0c61cac0580ee/data_records-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4c6b4784b4c2176f5c4d489b68937d5d", "sha256": "d20542fceb14d96d5646e191c284447aa7c45f179658633bcbb55253734ab6d6"}, "downloads": -1, "filename": "data_records-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4c6b4784b4c2176f5c4d489b68937d5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8840, "upload_time": "2019-03-31T20:20:24", "upload_time_iso_8601": "2019-03-31T20:20:24.774498Z", "url": "https://files.pythonhosted.org/packages/ea/bc/dd4f3fd38588b12786a4ab1d01edd77700da6b002d7fa389e2c919a1ef49/data_records-0.1.1-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d75a74dfef14ca0d2d84bc8e2d254362", "sha256": "3cc3bef0c05e6f26c94fde8ffb8fc67fc5ded508b133a6e8f6b1f3f37ea2340d"}, "downloads": -1, "filename": "data_records-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d75a74dfef14ca0d2d84bc8e2d254362", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8943, "upload_time": "2019-03-31T22:09:16", "upload_time_iso_8601": "2019-03-31T22:09:16.802426Z", "url": "https://files.pythonhosted.org/packages/4d/cf/0f4fd22b9e5073d99f0f8da042b55a94f2104c8d29beb0054204a4d09ce5/data_records-0.2.0-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "67b4731bdc785aafcce4070f74eb43c6", "sha256": "75f3aebea9b30d9e35c06326c6e593f6229824095879423d4d64f373c08e506a"}, "downloads": -1, "filename": "data_records-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "67b4731bdc785aafcce4070f74eb43c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9114, "upload_time": "2019-04-01T01:59:10", "upload_time_iso_8601": "2019-04-01T01:59:10.931617Z", "url": "https://files.pythonhosted.org/packages/b8/cb/dfa4d36537724b5eb69708d32d5c45c64f214b5b0e2325dfecde109786f4/data_records-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f33bc4fc7d22f9ef3a9f755cff9d3ce6", "sha256": "e6ce0e16837399b4a63f2c8645183a321074183d7e3ffa7945a9f82550d4ad3b"}, "downloads": -1, "filename": "data_records-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f33bc4fc7d22f9ef3a9f755cff9d3ce6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9122, "upload_time": "2019-04-01T03:46:40", "upload_time_iso_8601": "2019-04-01T03:46:40.622134Z", "url": "https://files.pythonhosted.org/packages/cf/5b/897571911fab757d8e83c326f0d0610bcf195ffaf35ddd320a75672e110d/data_records-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "645f7ae3edf5129fd1c25b80938fd405", "sha256": "c219188dc8570ee7f7382101bbf6626dcf1ac2ec029ed68a822d6af4da633191"}, "downloads": -1, "filename": "data_records-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "645f7ae3edf5129fd1c25b80938fd405", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9136, "upload_time": "2019-04-01T13:17:42", "upload_time_iso_8601": "2019-04-01T13:17:42.450208Z", "url": "https://files.pythonhosted.org/packages/1e/25/2b25b8b841f78b570f6807caf3a071ca398b7e88fba316360f42d9ce2d02/data_records-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ba4b7321723994c7894ff01dbc6f0d0d", "sha256": "47c905401016e5119a0bf96a5aab9f921b777ae6fe78d59ef2388353bd8c1595"}, "downloads": -1, "filename": "data_records-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ba4b7321723994c7894ff01dbc6f0d0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9177, "upload_time": "2019-04-01T13:57:47", "upload_time_iso_8601": "2019-04-01T13:57:47.258533Z", "url": "https://files.pythonhosted.org/packages/b4/a5/4d7992133a1945f901e65af60ed8a3bcb8c3b4436387bb175dcf3042decc/data_records-0.4.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba4b7321723994c7894ff01dbc6f0d0d", "sha256": "47c905401016e5119a0bf96a5aab9f921b777ae6fe78d59ef2388353bd8c1595"}, "downloads": -1, "filename": "data_records-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ba4b7321723994c7894ff01dbc6f0d0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9177, "upload_time": "2019-04-01T13:57:47", "upload_time_iso_8601": "2019-04-01T13:57:47.258533Z", "url": "https://files.pythonhosted.org/packages/b4/a5/4d7992133a1945f901e65af60ed8a3bcb8c3b4436387bb175dcf3042decc/data_records-0.4.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:40:14 2020"}