{"info": {"author": "Nicholas Iaquinto", "author_email": "github@iaquinto.io", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only"], "description": "# DataPDF\n\nDataPDF is a small library and CLI to create a PDF from data and a template.\nYou write a template in HTML and the library uses the Jinja2 template language\nto insert your data. Then, DataPDF uses Weasyprint to transform the rendered\nHTML into a PDF. Currently, the only supported data format for the CLI program\nis YAML.\n\nHere's an example:\n\n```\n$ ls\ndata.yaml       template.htmla\n\n$ cat template.html\n<!DOCTYPE html>\n<html>\n    <body>\n        <h1>{{ message }}</h1>\n    </body>\n</html>\n\n$ cat data.yaml\nmessage: Hello World\n\n$ data-pdf render -t template.html -o hello.pdf data.yaml\ncreated hello.pdf\n\n$ ls\ndata.yaml       hello.pdf       template.html\n```\n\nIt also supports rendering multiple PDF's from one data source. For this, you\nmust have the YAML data be a list at the top level. For example:\n\n```yaml\n---\n\n- id: 1\n  name: Example 1\n\n- id: 2\n  name: Example 2\n```\n\nAnd use the `render-multi` subcommand: `data-pdf render-multi -t template.html -o output_directory data.yaml`.\n\nYou can also use it as a library. See the below examples for both single and\nmultiple rendering.\n\n```\nimport data_pdf\n\n# Single rendering\ndata = pdf_kit.load_dict_or_die('data.yaml', format=data_pdf.Formats.YAML)\nwith open('template.html', 'r') as f:\n    template = jinja2.Template(f.read())\npdf_kit.render_pdf('output.pdf', template, context=data)\n\n# Multiple rendering\nitems = pdf_kit.load_list_or_die('list_data.yaml', format=data_pdf.Formats.YAML)\nwith open('template.html', 'r') as f:\n    template = jinja2.Template(f.read())\nfor i, item in enumerate(items):\n    pdf_kit.render_pdf('list-output-{}.pdf'.format(i), template, context=item)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/niaquinto/data-pdf", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "data-pdf", "package_url": "https://pypi.org/project/data-pdf/", "platform": "", "project_url": "https://pypi.org/project/data-pdf/", "project_urls": {"Homepage": "https://gitlab.com/niaquinto/data-pdf"}, "release_url": "https://pypi.org/project/data-pdf/0.0.2/", "requires_dist": ["ruamel.yaml (==0.16.5)", "click (>=7.0.0)", "jinja2 (>=2.10.3)", "weasyprint (==50)", "jedi ; extra == 'dev'", "flake8 ; extra == 'dev'", "nose ; extra == 'dev'", "ipython ; extra == 'dev'", "coverage ; extra == 'dev'", "bandit ; extra == 'dev'", "mypy ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "DataPDF is a library and CLI to create PDF's from data and a template.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DataPDF</h1>\n<p>DataPDF is a small library and CLI to create a PDF from data and a template.\nYou write a template in HTML and the library uses the Jinja2 template language\nto insert your data. Then, DataPDF uses Weasyprint to transform the rendered\nHTML into a PDF. Currently, the only supported data format for the CLI program\nis YAML.</p>\n<p>Here's an example:</p>\n<pre><code>$ ls\ndata.yaml       template.htmla\n\n$ cat template.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{{ message }}&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n$ cat data.yaml\nmessage: Hello World\n\n$ data-pdf render -t template.html -o hello.pdf data.yaml\ncreated hello.pdf\n\n$ ls\ndata.yaml       hello.pdf       template.html\n</code></pre>\n<p>It also supports rendering multiple PDF's from one data source. For this, you\nmust have the YAML data be a list at the top level. For example:</p>\n<pre><span class=\"nn\">---</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Example 1</span>\n\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Example 2</span>\n</pre>\n<p>And use the <code>render-multi</code> subcommand: <code>data-pdf render-multi -t template.html -o output_directory data.yaml</code>.</p>\n<p>You can also use it as a library. See the below examples for both single and\nmultiple rendering.</p>\n<pre><code>import data_pdf\n\n# Single rendering\ndata = pdf_kit.load_dict_or_die('data.yaml', format=data_pdf.Formats.YAML)\nwith open('template.html', 'r') as f:\n    template = jinja2.Template(f.read())\npdf_kit.render_pdf('output.pdf', template, context=data)\n\n# Multiple rendering\nitems = pdf_kit.load_list_or_die('list_data.yaml', format=data_pdf.Formats.YAML)\nwith open('template.html', 'r') as f:\n    template = jinja2.Template(f.read())\nfor i, item in enumerate(items):\n    pdf_kit.render_pdf('list-output-{}.pdf'.format(i), template, context=item)\n</code></pre>\n\n          </div>"}, "last_serial": 6363695, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "4674af7b8e2ed99b2290483f1c94508a", "sha256": "47b52ad8413b8a5ee05660c2d4d90c8f9028d93ce887c31f08c3c4ecc91f3744"}, "downloads": -1, "filename": "data_pdf-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4674af7b8e2ed99b2290483f1c94508a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17041, "upload_time": "2019-12-27T03:08:05", "upload_time_iso_8601": "2019-12-27T03:08:05.564263Z", "url": "https://files.pythonhosted.org/packages/22/29/c338d84bf8b563b0d8ebb505216fc4f8f250a246347dec85c7622c60239e/data_pdf-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a028c73dcb4ef2d7ba3f90b8e3952157", "sha256": "7b0bfbfa320ccedba75ac6955612362c747bc4ac6d467242586c84bd556ecf30"}, "downloads": -1, "filename": "data_pdf-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a028c73dcb4ef2d7ba3f90b8e3952157", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16578, "upload_time": "2019-12-27T03:08:07", "upload_time_iso_8601": "2019-12-27T03:08:07.052448Z", "url": "https://files.pythonhosted.org/packages/85/9c/ab172ccf809f995053b43002b0ded439bb078ca85e0bfc857cd99d831b05/data_pdf-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4674af7b8e2ed99b2290483f1c94508a", "sha256": "47b52ad8413b8a5ee05660c2d4d90c8f9028d93ce887c31f08c3c4ecc91f3744"}, "downloads": -1, "filename": "data_pdf-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4674af7b8e2ed99b2290483f1c94508a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17041, "upload_time": "2019-12-27T03:08:05", "upload_time_iso_8601": "2019-12-27T03:08:05.564263Z", "url": "https://files.pythonhosted.org/packages/22/29/c338d84bf8b563b0d8ebb505216fc4f8f250a246347dec85c7622c60239e/data_pdf-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a028c73dcb4ef2d7ba3f90b8e3952157", "sha256": "7b0bfbfa320ccedba75ac6955612362c747bc4ac6d467242586c84bd556ecf30"}, "downloads": -1, "filename": "data_pdf-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a028c73dcb4ef2d7ba3f90b8e3952157", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16578, "upload_time": "2019-12-27T03:08:07", "upload_time_iso_8601": "2019-12-27T03:08:07.052448Z", "url": "https://files.pythonhosted.org/packages/85/9c/ab172ccf809f995053b43002b0ded439bb078ca85e0bfc857cd99d831b05/data_pdf-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:16 2020"}