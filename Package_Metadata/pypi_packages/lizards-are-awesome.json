{"info": {"author": "Luke Hodkinson", "author_email": "furious.luke@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# lizards-are-awesome\n\nA Docker based workflow for performing a Plink/fastStructure analysis from\non DArTseq SNP data, inferred from an Excel file.\n\n\n## Overview\n\nThis software seeks to reduce the manual labour involved in preparing DArTseq SNP\ndata in 1 row format for analysis with Plink and fastStructure. LAA is designed specifically for\nSNP data sets generated by DArTseq, in 1 row format. As such, input\ndata will be the following metadata provided by DArTseq:  \"0\" =\nReference allele homozygote, \"1\"= SNP allele homozygote, \"2\"=\nheterozygote, and \"-\" = double null/ null allele homozygote (absence\nof fragment with SNP in genomic representation). LAA first converts\nthese data into ped and map files for plink analysis.\n\nMost of the work, besides the mentioned\nexternal packages, is done with a Python script. The primary operations\nperformed by the script are:\n\n 1. Duplicating the input data.\n 2. Performing a substitution on certain characters in both\n    sets of data, in order to create Plink compatible characters (i.e. \"-\" to \"0\").\n 3. Independently indexing both sets of data.\n 4. Combining both sets of data.\n 5. Sorting on the combined index.\n 6. Transposing the combined data.\n 7. Outputting to Plink compatible `ped` and `map` formats.\n\nWhereas before these steps would have been carred out manually using various software\npackages, they are now performed automatically.\n\nIn addition to the conversion operation, there are additional functions\nto perform analysis runs of Plink and fastStructre, passing the data files\nbetween the two programs automatically.\n\nIn addition to the conversion operation, LAA automatically initiates \nthe program Plink on the generated ped and map files, and the \nresulting bed, bim and fam files are then passed on to and analysed \nwith fastStructure. The user can choose a maximum of K(number of \npopulations) to be analysed by fastStructure. Output files include \nthe meanQ value for each individual, defining the mean probability \nto belong to any one of the populations K1 to Kx.\n\n\n## Design Decisions\n\n### Why Docker?\n\nPlink is written for Linux based operating systems. As such on a Linux system\nall operations could be performed directly, without the need for any kind of\nvirtualisation layer. But, in order to support researchers using Windows based\noperating systems the decision was made to leverage Docker virtualisation.\n\nDocker provides a light-weight virtualisation layer enabling Linux software to\nrun on Windows with (relative) ease. It also has the added benefit of providing\na cloud based mechanism for disseminating software \"images\" to users. The advantage\nof Docker over other systems, like VirtualBox or VMWare, are:\n\n * cloud based distribution of prebuilt images,\n * future releases will allow native Docker containers, and\n * easy to replicate virtual image creation.\n\n### Why Python?\n\nPython is a powerful and expressive scripting language. It comes with many\ndiverse packages, and has excellent support from developers (for example,\nfastStructure is written in Python).\n\n\n## Dependencies\n\nWhen installing on any platform there are number of requisite dependencies:\n\n * Python\n * Docker\n\nIf you happen to be installing on Windows, then there are a couple of extra requirements:\n\n * Visual Studio Python compiler\n * MsysGit\n\n\n## Important\n\nWe've found that Docker has issues when running on Windows, resulting in faulty data\ntransformation. While you may be able to install LAA on a Windows system, the accuracy of \nresults are likely to be compromised.\n\nTo install on Windows, we recommend using a virtual machine running an Ubuntu\ninstallation, e.g. VMWare All steps detailed below under Installation will have to be \nperformed through the Virtual Machine, including installing Docker.\n\n\n## Installation\n\nBegin by installing all of the dependencies for your operating system as\nlisted above.\n\nOnce complete, open a system terminal (please see the subsection on system terminals\nbelow, under `usage`).\n\nFrom an open system terminal, install the LAA Python interface with:\n\n```bash\npip install lizards-are-awesome\n```\n\nNext, from a system terminal, download and prepare the `laa` docker image. This\nimage contains `plink`, `fastStructure`, and the conversion scripts, all built\ninto a light-weight Alpine linux image:\n\n```bash\nlaa init\n```\n\n## Usage\n\n### Terminals\n\nUsage is currently done directly from your operating system terminal. In Linux\nlike operating systems (including Mac OS X) use the system terminal emulator. In\nWindows operating systems use the Docker quick start terminal.\n\n### Input Format\n\nLAA accepts XLSX Excel formats and CSV. Unfortunately, XLSX is extremely slow\nto parse using opensource utilities. As such we recommend converting your Excel\ndata to CSV before use with LAA (simply open and then save as csv file using\nMicrosoft Office or opensource spreadsheet tools, like Libre \nOffice).\n\nThe data sheet should contain only columns with DArTseq SNP data \n(i.e. 0, 1, 2 and -), all other columns have to be removed.\nThe first row should contain the name of the population each \nindividual belongs to (e.g. species), the second row should contain \nthe ID of each individual. All following rows contain the SNP data.\n\nA short, fictitious, example:\n\n<table class=\"table table-bordered table-hover table-condensed\">\n<tbody><tr><td>Pminima</td>\n<td>Pminima</td>\n<td>Pminor</td>\n<td>Pminima</td>\n<td>Pminor</td>\n<td>Pminima</td>\n</tr>\n<tr><td>lizard1</td>\n<td>lizard2</td>\n<td>lizard15</td>\n<td>lizard39</td>\n<td>lizard40</td>\n<td>lizard44</td>\n</tr>\n<tr><td>0</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr><td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr><td>1</td>\n<td>-</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr><td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>-</td>\n<td>0</td>\n</tr>\n<tr><td>2</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr><td>2</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr><td>1</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr><td>1</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr><td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr><td>-</td>\n<td>1</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n\nAnd, in CSV format:\n\n```csv\nPminima,Pminima,Pminor,Pminima,Pminor,Pminima\nlizard1,lizard2,lizard15,lizard39,lizard40,lizard44\n0,1,1,2,1,1\n0,0,0,1,0,0\n1,-,1,0,1,1\n0,0,1,0,-,0\n2,2,1,1,1,2\n2,2,1,2,1,0\n1,1,2,1,2,1\n1,1,1,2,0,1\n0,0,0,0,0,0\n-,1,2,1,1,1\n```\n\n### Location\n\nAll LAA commands must be run from the same directory you have your CSV input file\nin. For the purpose of the examples, let's say we have an input file, `input.csv`,\nlocated at `/c/workspace/data`:\n\n```bash\ncd /c/workspace/data\n```\n\n### Quick-run\n\nTo perform the complete process, including conversion, Plink, fastStructre and\nanalysing for K values, you can just run:\n\n```bash\nlaa all input.csv --maxk=5\n```\n\nwhere `--maxk=5` may be replaced with a suitable value for the maximum K value to\nuse.\n\nThis will produce a range of files in the current working directory corresponding\nto the outputs of the conversion, Plink, and fastStructre.\n\n### Conversion\n\nConverting the input data will peform recombination, transposition, output\nto a PED file, and also generation of a suitable mapping file:\n\n```bash\nlaa convert input.csv output.ped\n```\n\nThis will generate two files: `output.ped`, and `output.map`. These files are\nsuitable for use with Plink.\n\n### Plink\n\nTo process the converted input files with Plink, run:\n\n```bash\nlaa plink output.ped\n```\n\n### fastStructure\n\nTo process the Plink outputs with fastStructure, run:\n\n```bash\nlaa fast output\n```\n\n### K Choice\n\nTo run fastStructure a number of times, and then choose an appropriate\nK value, run:\n\n```bash\nlaa choosek output --maxk=5\n```\n\nwhere `--maxk=5` may be replaced with a suitable value for the maximum K value to\nuse.\n\n## Getting Help\n\nHelp is always available from the command-line. To get a printout of available commands,\nrun:\n\n```bash\nlaa -h\n```\n\nYou may also get help for a specific command with something like:\n\n```bash\nlaa convert -h\n```\n\nwhere `convert` may be replaced with the respective command help is sought for.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/furious-luke/lizards-are-awesome", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "lizards-are-awesome", "package_url": "https://pypi.org/project/lizards-are-awesome/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lizards-are-awesome/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/furious-luke/lizards-are-awesome"}, "release_url": "https://pypi.org/project/lizards-are-awesome/0.4.0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># lizards-are-awesome</p>\n<p>A Docker based workflow for performing a Plink/fastStructure analysis from\non DArTseq SNP data, inferred from an Excel file.</p>\n<p>## Overview</p>\n<p>This software seeks to reduce the manual labour involved in preparing DArTseq SNP\ndata in 1 row format for analysis with Plink and fastStructure. LAA is designed specifically for\nSNP data sets generated by DArTseq, in 1 row format. As such, input\ndata will be the following metadata provided by DArTseq:  \u201c0\u201d =\nReference allele homozygote, \u201c1\u201d= SNP allele homozygote, \u201c2\u201d=\nheterozygote, and \u201c-\u201d = double null/ null allele homozygote (absence\nof fragment with SNP in genomic representation). LAA first converts\nthese data into ped and map files for plink analysis.</p>\n<p>Most of the work, besides the mentioned\nexternal packages, is done with a Python script. The primary operations\nperformed by the script are:</p>\n<blockquote>\n<ol>\n<li>Duplicating the input data.</li>\n<li>Performing a substitution on certain characters in both\nsets of data, in order to create Plink compatible characters (i.e. \u201c-\u201d to \u201c0\u201d).</li>\n<li>Independently indexing both sets of data.</li>\n<li>Combining both sets of data.</li>\n<li>Sorting on the combined index.</li>\n<li>Transposing the combined data.</li>\n<li>Outputting to Plink compatible <cite>ped</cite> and <cite>map</cite> formats.</li>\n</ol>\n</blockquote>\n<p>Whereas before these steps would have been carred out manually using various software\npackages, they are now performed automatically.</p>\n<p>In addition to the conversion operation, there are additional functions\nto perform analysis runs of Plink and fastStructre, passing the data files\nbetween the two programs automatically.</p>\n<p>In addition to the conversion operation, LAA automatically initiates\nthe program Plink on the generated ped and map files, and the\nresulting bed, bim and fam files are then passed on to and analysed\nwith fastStructure. The user can choose a maximum of K(number of\npopulations) to be analysed by fastStructure. Output files include\nthe meanQ value for each individual, defining the mean probability\nto belong to any one of the populations K1 to Kx.</p>\n<p>## Design Decisions</p>\n<p>### Why Docker?</p>\n<p>Plink is written for Linux based operating systems. As such on a Linux system\nall operations could be performed directly, without the need for any kind of\nvirtualisation layer. But, in order to support researchers using Windows based\noperating systems the decision was made to leverage Docker virtualisation.</p>\n<p>Docker provides a light-weight virtualisation layer enabling Linux software to\nrun on Windows with (relative) ease. It also has the added benefit of providing\na cloud based mechanism for disseminating software \u201cimages\u201d to users. The advantage\nof Docker over other systems, like VirtualBox or VMWare, are:</p>\n<blockquote>\n<ul>\n<li>cloud based distribution of prebuilt images,</li>\n<li>future releases will allow native Docker containers, and</li>\n<li>easy to replicate virtual image creation.</li>\n</ul>\n</blockquote>\n<p>### Why Python?</p>\n<p>Python is a powerful and expressive scripting language. It comes with many\ndiverse packages, and has excellent support from developers (for example,\nfastStructure is written in Python).</p>\n<p>## Dependencies</p>\n<p>When installing on any platform there are number of requisite dependencies:</p>\n<blockquote>\n<ul>\n<li>Python</li>\n<li>Docker</li>\n</ul>\n</blockquote>\n<p>If you happen to be installing on Windows, then there are a couple of extra requirements:</p>\n<blockquote>\n<ul>\n<li>Visual Studio Python compiler</li>\n<li>MsysGit</li>\n</ul>\n</blockquote>\n<p>## Important</p>\n<p>We\u2019ve found that Docker has issues when running on Windows, resulting in faulty data\ntransformation. While you may be able to install LAA on a Windows system, the accuracy of\nresults are likely to be compromised.</p>\n<p>To install on Windows, we recommend using a virtual machine running an Ubuntu\ninstallation, e.g. VMWare All steps detailed below under Installation will have to be\nperformed through the Virtual Machine, including installing Docker.</p>\n<p>## Installation</p>\n<p>Begin by installing all of the dependencies for your operating system as\nlisted above.</p>\n<p>Once complete, open a system terminal (please see the subsection on system terminals\nbelow, under <cite>usage</cite>).</p>\n<p>From an open system terminal, install the LAA Python interface with:</p>\n<p><tt>`bash\npip install <span class=\"pre\">lizards-are-awesome</span>\n`</tt></p>\n<p>Next, from a system terminal, download and prepare the <cite>laa</cite> docker image. This\nimage contains <cite>plink</cite>, <cite>fastStructure</cite>, and the conversion scripts, all built\ninto a light-weight Alpine linux image:</p>\n<p><tt>`bash\nlaa init\n`</tt></p>\n<p>## Usage</p>\n<p>### Terminals</p>\n<p>Usage is currently done directly from your operating system terminal. In Linux\nlike operating systems (including Mac OS X) use the system terminal emulator. In\nWindows operating systems use the Docker quick start terminal.</p>\n<p>### Input Format</p>\n<p>LAA accepts XLSX Excel formats and CSV. Unfortunately, XLSX is extremely slow\nto parse using opensource utilities. As such we recommend converting your Excel\ndata to CSV before use with LAA (simply open and then save as csv file using\nMicrosoft Office or opensource spreadsheet tools, like Libre\nOffice).</p>\n<p>The data sheet should contain only columns with DArTseq SNP data\n(i.e. 0, 1, 2 and -), all other columns have to be removed.\nThe first row should contain the name of the population each\nindividual belongs to (e.g. species), the second row should contain\nthe ID of each individual. All following rows contain the SNP data.</p>\n<p>A short, fictitious, example:</p>\n<p>&lt;table class=\u201dtable table-bordered table-hover table-condensed\u201d&gt;\n&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Pminima&lt;/td&gt;\n&lt;td&gt;Pminima&lt;/td&gt;\n&lt;td&gt;Pminor&lt;/td&gt;\n&lt;td&gt;Pminima&lt;/td&gt;\n&lt;td&gt;Pminor&lt;/td&gt;\n&lt;td&gt;Pminima&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;lizard1&lt;/td&gt;\n&lt;td&gt;lizard2&lt;/td&gt;\n&lt;td&gt;lizard15&lt;/td&gt;\n&lt;td&gt;lizard39&lt;/td&gt;\n&lt;td&gt;lizard40&lt;/td&gt;\n&lt;td&gt;lizard44&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;</p>\n<p>And, in CSV format:</p>\n<p><tt>`csv\nPminima,Pminima,Pminor,Pminima,Pminor,Pminima\nlizard1,lizard2,lizard15,lizard39,lizard40,lizard44\n0,1,1,2,1,1\n0,0,0,1,0,0\n<span class=\"pre\">1,-,1,0,1,1</span>\n<span class=\"pre\">0,0,1,0,-,0</span>\n2,2,1,1,1,2\n2,2,1,2,1,0\n1,1,2,1,2,1\n1,1,1,2,0,1\n0,0,0,0,0,0\n<span class=\"pre\">-,1,2,1,1,1</span>\n`</tt></p>\n<p>### Location</p>\n<p>All LAA commands must be run from the same directory you have your CSV input file\nin. For the purpose of the examples, let\u2019s say we have an input file, <cite>input.csv</cite>,\nlocated at <cite>/c/workspace/data</cite>:</p>\n<p><tt>`bash\ncd /c/workspace/data\n`</tt></p>\n<p>### Quick-run</p>\n<p>To perform the complete process, including conversion, Plink, fastStructre and\nanalysing for K values, you can just run:</p>\n<p><tt>`bash\nlaa all input.csv <span class=\"pre\">--maxk=5</span>\n`</tt></p>\n<p>where <cite>\u2013maxk=5</cite> may be replaced with a suitable value for the maximum K value to\nuse.</p>\n<p>This will produce a range of files in the current working directory corresponding\nto the outputs of the conversion, Plink, and fastStructre.</p>\n<p>### Conversion</p>\n<p>Converting the input data will peform recombination, transposition, output\nto a PED file, and also generation of a suitable mapping file:</p>\n<p><tt>`bash\nlaa convert input.csv output.ped\n`</tt></p>\n<p>This will generate two files: <cite>output.ped</cite>, and <cite>output.map</cite>. These files are\nsuitable for use with Plink.</p>\n<p>### Plink</p>\n<p>To process the converted input files with Plink, run:</p>\n<p><tt>`bash\nlaa plink output.ped\n`</tt></p>\n<p>### fastStructure</p>\n<p>To process the Plink outputs with fastStructure, run:</p>\n<p><tt>`bash\nlaa fast output\n`</tt></p>\n<p>### K Choice</p>\n<p>To run fastStructure a number of times, and then choose an appropriate\nK value, run:</p>\n<p><tt>`bash\nlaa choosek output <span class=\"pre\">--maxk=5</span>\n`</tt></p>\n<p>where <cite>\u2013maxk=5</cite> may be replaced with a suitable value for the maximum K value to\nuse.</p>\n<p>## Getting Help</p>\n<p>Help is always available from the command-line. To get a printout of available commands,\nrun:</p>\n<p><tt>`bash\nlaa <span class=\"pre\">-h</span>\n`</tt></p>\n<p>You may also get help for a specific command with something like:</p>\n<p><tt>`bash\nlaa convert <span class=\"pre\">-h</span>\n`</tt></p>\n<p>where <cite>convert</cite> may be replaced with the respective command help is sought for.</p>\n\n          </div>"}, "last_serial": 2452470, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5c1d3fa531061c6bd578e9f02d8abb7f", "sha256": "5bbee77623b02ea4b1cb65120f6e65c033af40d8c0783af3a5eb175e985f312d"}, "downloads": -1, "filename": "lizards-are-awesome-0.1.tar.gz", "has_sig": false, "md5_digest": "5c1d3fa531061c6bd578e9f02d8abb7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5982, "upload_time": "2016-04-04T23:49:54", "upload_time_iso_8601": "2016-04-04T23:49:54.188267Z", "url": "https://files.pythonhosted.org/packages/36/91/db909ee558b0f3e4cdd4c1849dba4c4a9ba8c7137dd96353ea7b31f74649/lizards-are-awesome-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ef4dacba700c6a73a71b767f12900f99", "sha256": "bda7ffa67f74e6b954f44fe86c94022422b0d886e1b38ad785732342c5cf08fa"}, "downloads": -1, "filename": "lizards-are-awesome-0.2.tar.gz", "has_sig": false, "md5_digest": "ef4dacba700c6a73a71b767f12900f99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6304, "upload_time": "2016-06-30T07:43:52", "upload_time_iso_8601": "2016-06-30T07:43:52.228579Z", "url": "https://files.pythonhosted.org/packages/cb/88/a7e854d16978765a5d2a0cea2ce920cd42290e278e775ebc7af1f98dc6b3/lizards-are-awesome-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "aa612a6260129f5196a95c681cfc9983", "sha256": "b60ef05fc8515b8e777d82e9bb45529ab10755a7693ec3fb60c982755f4bcaaa"}, "downloads": -1, "filename": "lizards-are-awesome-0.2.1.tar.gz", "has_sig": false, "md5_digest": "aa612a6260129f5196a95c681cfc9983", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7086, "upload_time": "2016-07-01T05:38:10", "upload_time_iso_8601": "2016-07-01T05:38:10.876061Z", "url": "https://files.pythonhosted.org/packages/cd/37/57daab70614205d1b7f0cd84e110b57724ec9485e62842383f5b821d5fb0/lizards-are-awesome-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c949d91df3e228890e06e50d12b2342d", "sha256": "7c884ff1f09de720022fcb7f0aa423faad35e7627683a7255b946f65ac2d4bc1"}, "downloads": -1, "filename": "lizards-are-awesome-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c949d91df3e228890e06e50d12b2342d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7094, "upload_time": "2016-07-01T06:50:35", "upload_time_iso_8601": "2016-07-01T06:50:35.407305Z", "url": "https://files.pythonhosted.org/packages/29/9f/ed644785c61230b423e7b40942bcdd6df0441de119ee03e413ddc631f5a9/lizards-are-awesome-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ef41b62d034825f5af14df2cd73634c7", "sha256": "18481e54c3d47bfda28a7994cf0b29297d16eeb7e425cf94c61e42f3b981ee90"}, "downloads": -1, "filename": "lizards-are-awesome-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ef41b62d034825f5af14df2cd73634c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7145, "upload_time": "2016-11-10T06:51:20", "upload_time_iso_8601": "2016-11-10T06:51:20.775486Z", "url": "https://files.pythonhosted.org/packages/6b/98/2c487d9d2f719ede89097cf9a21ced4f812c733f39cca93facd3dae1b95f/lizards-are-awesome-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef41b62d034825f5af14df2cd73634c7", "sha256": "18481e54c3d47bfda28a7994cf0b29297d16eeb7e425cf94c61e42f3b981ee90"}, "downloads": -1, "filename": "lizards-are-awesome-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ef41b62d034825f5af14df2cd73634c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7145, "upload_time": "2016-11-10T06:51:20", "upload_time_iso_8601": "2016-11-10T06:51:20.775486Z", "url": "https://files.pythonhosted.org/packages/6b/98/2c487d9d2f719ede89097cf9a21ced4f812c733f39cca93facd3dae1b95f/lizards-are-awesome-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:59 2020"}