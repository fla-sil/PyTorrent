{"info": {"author": "Philip Perold", "author_email": "philip@spatialedge.co.za", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# Metric Builder\n\nUtility for building templated metric extraction queries that can be traversed through time.\n\n## Prerequisites\n\nYou will need the following to run this code:\n  * Python 3\n\n## Installation\n\nTo be determined...\n\n## Usage\n\nIn order to extract a given metric, a `Metric` object needs to be instantiated:\n\n```python\nmetric = Metric(\n    query=\"\"\"\n        SELECT count(*) AS total\n        FROM `project.dataset.table`\n        WHERE DATETIME_TRUNC(created_datetime, DAY) = '{{ reference_time | format_date('%Y-%m-%d') }}'\n    \"\"\",\n    reader = BigQueryReader(json_credentials_path='/path/to/creds.json')\n)\n```\n\nThe `query` parameter is a templated query where you can format the `reference_time` `datetime` object to the required format using template filters.\n\nThe `reader` parameter is the object that is actually going to connect to the desired database and perform the queries.\n\nThe `metric` object can now be used to fetch metrics for a given point in time as follows:\n\n```python\nresult = metric.fetch(reference_time=datetime.date(2019, 10, 21))\n```\n\nThe result is returned as a list of dictionaries.\n\n### Template filters\n\n[Jinja2](https://jinja.palletsprojects.com/en/2.10.x/) is used as the templating engine. All built in Jinja filters are thus available. Relevant custom template filters have been added though for convenience:\n\n#### format_date\n\nSpecify format of datetime:\n\n```\n'{{ reference_time | format_date('%Y-%m-%d') }}'\n```\n\n#### day_delta\n\nChange a given datetime object by a specified number of days:\n\n```\n'{{ reference_time | day_delta(-7) | format_date('%Y-%m-%d') }}'\n```\n\n### Readers\n\nAny reader will implement the following method that is used to execute queries:\n\n```python\ndef execute(self, query) -> List[Dict[str, Any]]:\n    ...\n```\n\n#### BigQueryReader\n\nThe underlying client is required to be authenticated with the necessary priviledges to read from the requested BigQuery tables.\n\nIf you authenticate with:\n\n```bash\ngcloud auth login\n```\n\nor\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/keyfile.json\"\n```\n\nthen you can just instantiate your `Reader` like this:\n\n```python\nreader = BigQueryReader()\n```\n\nThe other option is to explicitly authenticate with a service account key file:\n\n```python\nreader = BigQueryReader(json_credentials_path='/path/to/creds.json')\n```\n\n#### HiveReader\n\nComing soon...\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "metric-builder", "package_url": "https://pypi.org/project/metric-builder/", "platform": "", "project_url": "https://pypi.org/project/metric-builder/", "project_urls": null, "release_url": "https://pypi.org/project/metric-builder/0.0.3/", "requires_dist": ["cachetools (==3.1)", "certifi (==2019.3.9)", "chardet (==3.0.4)", "coverage (==4.5.4)", "google-api-core (==1.8.1)", "google-auth (==1.6.3)", "google-cloud-bigquery (==1.11.2)", "google-cloud-core (==0.28.1)", "google-resumable-media (==0.3.2)", "googleapis-common-protos (==1.5.8)", "idna (==2.8)", "Jinja2 (==2.10)", "MarkupSafe (==1.1.1)", "protobuf (==3.7.0)", "pyasn1 (==0.4.5)", "pyasn1-modules (==0.2.4)", "pytz (==2019.1)", "requests (==2.21.0)", "rsa (==4.0)", "six (==1.12.0)", "urllib3 (==1.24.1)"], "requires_python": "", "summary": "Utility for building templated metric extraction queries that can be traversed through time.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Metric Builder</h1>\n<p>Utility for building templated metric extraction queries that can be traversed through time.</p>\n<h2>Prerequisites</h2>\n<p>You will need the following to run this code:</p>\n<ul>\n<li>Python 3</li>\n</ul>\n<h2>Installation</h2>\n<p>To be determined...</p>\n<h2>Usage</h2>\n<p>In order to extract a given metric, a <code>Metric</code> object needs to be instantiated:</p>\n<pre><span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">Metric</span><span class=\"p\">(</span>\n    <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        SELECT count(*) AS total</span>\n<span class=\"s2\">        FROM `project.dataset.table`</span>\n<span class=\"s2\">        WHERE DATETIME_TRUNC(created_datetime, DAY) = '{{ reference_time | format_date('%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\">') }}'</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">BigQueryReader</span><span class=\"p\">(</span><span class=\"n\">json_credentials_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/creds.json'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The <code>query</code> parameter is a templated query where you can format the <code>reference_time</code> <code>datetime</code> object to the required format using template filters.</p>\n<p>The <code>reader</code> parameter is the object that is actually going to connect to the desired database and perform the queries.</p>\n<p>The <code>metric</code> object can now be used to fetch metrics for a given point in time as follows:</p>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">reference_time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n</pre>\n<p>The result is returned as a list of dictionaries.</p>\n<h3>Template filters</h3>\n<p><a href=\"https://jinja.palletsprojects.com/en/2.10.x/\" rel=\"nofollow\">Jinja2</a> is used as the templating engine. All built in Jinja filters are thus available. Relevant custom template filters have been added though for convenience:</p>\n<h4>format_date</h4>\n<p>Specify format of datetime:</p>\n<pre><code>'{{ reference_time | format_date('%Y-%m-%d') }}'\n</code></pre>\n<h4>day_delta</h4>\n<p>Change a given datetime object by a specified number of days:</p>\n<pre><code>'{{ reference_time | day_delta(-7) | format_date('%Y-%m-%d') }}'\n</code></pre>\n<h3>Readers</h3>\n<p>Any reader will implement the following method that is used to execute queries:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]:</span>\n    <span class=\"o\">...</span>\n</pre>\n<h4>BigQueryReader</h4>\n<p>The underlying client is required to be authenticated with the necessary priviledges to read from the requested BigQuery tables.</p>\n<p>If you authenticate with:</p>\n<pre>gcloud auth login\n</pre>\n<p>or</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">GOOGLE_APPLICATION_CREDENTIALS</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/keyfile.json\"</span>\n</pre>\n<p>then you can just instantiate your <code>Reader</code> like this:</p>\n<pre><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">BigQueryReader</span><span class=\"p\">()</span>\n</pre>\n<p>The other option is to explicitly authenticate with a service account key file:</p>\n<pre><span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">BigQueryReader</span><span class=\"p\">(</span><span class=\"n\">json_credentials_path</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/creds.json'</span><span class=\"p\">)</span>\n</pre>\n<h4>HiveReader</h4>\n<p>Coming soon...</p>\n\n          </div>"}, "last_serial": 6080628, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "cdc0393055884640097be404316d4f0b", "sha256": "bbb7d92d4aebdeb9942b7e329a0bcb1cdd8b3730ad7a4ac5bca58e65b054ccd7"}, "downloads": -1, "filename": "metric_builder-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cdc0393055884640097be404316d4f0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8451, "upload_time": "2019-10-24T08:52:13", "upload_time_iso_8601": "2019-10-24T08:52:13.170466Z", "url": "https://files.pythonhosted.org/packages/47/1e/1a064441f8f63625ac0741ccacbce9022d9186116fbef9be4d4a3dcc7a29/metric_builder-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "090ca3e5e4e13c269aec3f265b041f21", "sha256": "9ff9273b7b5e747988dc8811f8a7dd6e082f41c341637acfd197e2e1e16e48f7"}, "downloads": -1, "filename": "metric_builder-0.0.1.tar.gz", "has_sig": false, "md5_digest": "090ca3e5e4e13c269aec3f265b041f21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3626, "upload_time": "2019-10-24T08:52:15", "upload_time_iso_8601": "2019-10-24T08:52:15.800259Z", "url": "https://files.pythonhosted.org/packages/fc/f8/b8a08445124d92d2b30039f862593d92e28e6ec6d17df536ce800384206b/metric_builder-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bdb0d0667430b363b668fcea1280e445", "sha256": "cfbd274bb1e8d2786a7fee9df6790ba9facf275e79936dd31481f8433024851c"}, "downloads": -1, "filename": "metric_builder-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bdb0d0667430b363b668fcea1280e445", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8452, "upload_time": "2019-11-05T10:29:56", "upload_time_iso_8601": "2019-11-05T10:29:56.144168Z", "url": "https://files.pythonhosted.org/packages/15/b6/a1fe9eeb1469c3d8f73ce9161209767c4b1cbe1b8feb1318e2e297f6bfb0/metric_builder-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7be1995102ce16469d0fb3793ac8b79", "sha256": "425c4934fdb51458d3a07a59a77b27814f25f8f3a52e4e83d6374a00cdeae6e7"}, "downloads": -1, "filename": "metric_builder-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c7be1995102ce16469d0fb3793ac8b79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3626, "upload_time": "2019-11-05T10:29:58", "upload_time_iso_8601": "2019-11-05T10:29:58.130939Z", "url": "https://files.pythonhosted.org/packages/b8/bf/c29ac14c4c2d700cce77955e5a9c8e93abe4e936cc0b56acc6a226fea496/metric_builder-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "65ce07137163d8d7b11d1e556aaa4192", "sha256": "127146a330d3a8ecf3332c98c99dd3cc0a8ca9d6faad10a0a5cbbd1852577b49"}, "downloads": -1, "filename": "metric_builder-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "65ce07137163d8d7b11d1e556aaa4192", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8456, "upload_time": "2019-11-05T12:16:57", "upload_time_iso_8601": "2019-11-05T12:16:57.155787Z", "url": "https://files.pythonhosted.org/packages/39/8e/d1d63b5a6ff1d2308e0d439ce0ecba826fa82b6f92dba63c9aa755c81c4d/metric_builder-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "688d72838ede8c2473cff2e83ab19d1b", "sha256": "6d2caaae9ac95c903e625401f71e14bedf8837f513444fe81a699783d12e8532"}, "downloads": -1, "filename": "metric_builder-0.0.3.tar.gz", "has_sig": false, "md5_digest": "688d72838ede8c2473cff2e83ab19d1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3627, "upload_time": "2019-11-05T12:16:58", "upload_time_iso_8601": "2019-11-05T12:16:58.767769Z", "url": "https://files.pythonhosted.org/packages/49/e1/114c9b6de9bded0c479b7be1d21341bb123b0c3dc9bbe7309796e93758f0/metric_builder-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65ce07137163d8d7b11d1e556aaa4192", "sha256": "127146a330d3a8ecf3332c98c99dd3cc0a8ca9d6faad10a0a5cbbd1852577b49"}, "downloads": -1, "filename": "metric_builder-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "65ce07137163d8d7b11d1e556aaa4192", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8456, "upload_time": "2019-11-05T12:16:57", "upload_time_iso_8601": "2019-11-05T12:16:57.155787Z", "url": "https://files.pythonhosted.org/packages/39/8e/d1d63b5a6ff1d2308e0d439ce0ecba826fa82b6f92dba63c9aa755c81c4d/metric_builder-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "688d72838ede8c2473cff2e83ab19d1b", "sha256": "6d2caaae9ac95c903e625401f71e14bedf8837f513444fe81a699783d12e8532"}, "downloads": -1, "filename": "metric_builder-0.0.3.tar.gz", "has_sig": false, "md5_digest": "688d72838ede8c2473cff2e83ab19d1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3627, "upload_time": "2019-11-05T12:16:58", "upload_time_iso_8601": "2019-11-05T12:16:58.767769Z", "url": "https://files.pythonhosted.org/packages/49/e1/114c9b6de9bded0c479b7be1d21341bb123b0c3dc9bbe7309796e93758f0/metric_builder-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}