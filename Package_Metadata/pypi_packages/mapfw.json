{"info": {"author": "Noah Jadoenathmisier", "author_email": "n.j.m.jadoenathmisier@student.tudelft.nl", "bugtrack_url": null, "classifiers": [], "description": "# MAPFW Client\n\nThis is a client library for the https://mapfw.nl/ MAPFW problems\n## The MAPFW problem\nMAPFW is an abbreviation of  \"Multi-agent pathfinding (with) waypoints\".\nWith MAPFW problems, you are given:\n-\tA grid/maze\n-\tA list of agent starting positions\n-\tA list of agent goal positions\n-\tA list of agent waypoints\n\nThe solution for that problem is a list of paths, one for each agent st.\n-\tEach path starts on the starting position of the corresponding agent\n-\tEach path ends on the goal position of the corresponding agent\n-\tEach path crosses all waypoints of the corresponding agent\n-\tNo path crosses a wall in the grid\n-\tNo 2 agents are ever on the same position at the same time\n-\tNo 2 agents  ever cross the same edge (in opposite directions) at the same time\nThis solution is optimal if there is no other solution st. the sum of the lengths of the paths of all the agents is smaller than the this solution.\n## Using the client library\nInstall the library with:\n```bash\npip install mapfw\n```\nThen go to https://mapfw.nl/benchmarks/. Here you can find a list of benchmarks. If you click on a benchmark you can see prefiously posted solutions. By clicking on a solution, You can see what the problem looks like. Find a problem that you like, and find its index on the https://mapfw.nl/benchmarks/ page (Sorry, you will have to count yourself, starting from 1. This will change later).\n\nNow go to your account page at https://mapfw.nl/auth/account. To find your API Token\n\nThis is all the info you need to start coding. The basic outline of your code should look like this:\n```python\nfrom mapfw import MapfwBenchmarker\n\nbenchmarker = MapfwBenchmarker(\"<YOUR API TOKEN>\", <BENCHMARK INDEX>, \"<YOUR ALGORITHMS NAME>\",\n                               \"<YOUR ALGORITHMS VERSION>\", <DEBUG_MODE>)\nfor problem in benchmarker:\n    problem.add_solution(solve(problem))\n```\nThe only things that you need to do are to fill in your own API Token, and the number of the benchmark that you want to solve. The name of your algorithm, and its version. And the debug mode. This should be set to True while you are developing your algorithm. This means that your attempts will not be shown on the global leader boards. You can however still see your own solution at https://mapfw.nl/auth/latest-debug.\n\nWhen your are ready, set the debug mode to False. The next time you run your code, your attempt will be publicly listed.\nYou should also implement the \"solve\" function yourself.\nThis function should take in a problem and return the solution.\nA basic outline of this function can be as follows:\n```python\nclass Agent:\n    def __init__(self, start, goal, waypoints):\n        self.start = start\n        self.goal = goal\n        self.waypoints = waypoints\n\n\nclass Maze:\n    def __init__(self, grid, width, height):\n        self.grid = grid\n        self.width = width\n        self.height = height\n\n\ndef solve(problem):\n    number_of_agents = len(problem.starts)\n    agents = []\n    for i in range(number_of_agents):\n        agents.append(Agent(problem.starts[i], problem.starts[i], problem.goals[i], problem.waypoints[i]))\n    maze = Maze(problem.grid, problem.width, problem.height)\n\n    paths = []\n    for agent in agents:\n        paths.append(find_path(agent, maze))\n\n    \"\"\"\n    Now paths looks like:\n    \n    paths = [path agent 1, path agent 2, ..]\n    path agent 1 = [pos agent 1 at time 0, pos agent 1 at time 1, .., pos agent 1 at finishing time]\n    pos = [x coordinate, y coordinate]\n    \"\"\"\n\n    return paths\n```\nThis should be all that you need to know to get started!\nPlease note that this is just some example code and feel free to change it however you like.\n\nGood luck! And let us know if you have any questions.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/noahiscool13/mapfw-client", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mapfw", "package_url": "https://pypi.org/project/mapfw/", "platform": "", "project_url": "https://pypi.org/project/mapfw/", "project_urls": {"Homepage": "https://github.com/noahiscool13/mapfw-client"}, "release_url": "https://pypi.org/project/mapfw/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "API client for mapfw challenges", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MAPFW Client</h1>\n<p>This is a client library for the <a href=\"https://mapfw.nl/\" rel=\"nofollow\">https://mapfw.nl/</a> MAPFW problems</p>\n<h2>The MAPFW problem</h2>\n<p>MAPFW is an abbreviation of  \"Multi-agent pathfinding (with) waypoints\".\nWith MAPFW problems, you are given:</p>\n<ul>\n<li>A grid/maze</li>\n<li>A list of agent starting positions</li>\n<li>A list of agent goal positions</li>\n<li>A list of agent waypoints</li>\n</ul>\n<p>The solution for that problem is a list of paths, one for each agent st.</p>\n<ul>\n<li>Each path starts on the starting position of the corresponding agent</li>\n<li>Each path ends on the goal position of the corresponding agent</li>\n<li>Each path crosses all waypoints of the corresponding agent</li>\n<li>No path crosses a wall in the grid</li>\n<li>No 2 agents are ever on the same position at the same time</li>\n<li>No 2 agents  ever cross the same edge (in opposite directions) at the same time\nThis solution is optimal if there is no other solution st. the sum of the lengths of the paths of all the agents is smaller than the this solution.</li>\n</ul>\n<h2>Using the client library</h2>\n<p>Install the library with:</p>\n<pre>pip install mapfw\n</pre>\n<p>Then go to <a href=\"https://mapfw.nl/benchmarks/\" rel=\"nofollow\">https://mapfw.nl/benchmarks/</a>. Here you can find a list of benchmarks. If you click on a benchmark you can see prefiously posted solutions. By clicking on a solution, You can see what the problem looks like. Find a problem that you like, and find its index on the <a href=\"https://mapfw.nl/benchmarks/\" rel=\"nofollow\">https://mapfw.nl/benchmarks/</a> page (Sorry, you will have to count yourself, starting from 1. This will change later).</p>\n<p>Now go to your account page at <a href=\"https://mapfw.nl/auth/account\" rel=\"nofollow\">https://mapfw.nl/auth/account</a>. To find your API Token</p>\n<p>This is all the info you need to start coding. The basic outline of your code should look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mapfw</span> <span class=\"kn\">import</span> <span class=\"n\">MapfwBenchmarker</span>\n\n<span class=\"n\">benchmarker</span> <span class=\"o\">=</span> <span class=\"n\">MapfwBenchmarker</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;YOUR API TOKEN&gt;\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">BENCHMARK</span> <span class=\"n\">INDEX</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;YOUR ALGORITHMS NAME&gt;\"</span><span class=\"p\">,</span>\n                               <span class=\"s2\">\"&lt;YOUR ALGORITHMS VERSION&gt;\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">DEBUG_MODE</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">problem</span> <span class=\"ow\">in</span> <span class=\"n\">benchmarker</span><span class=\"p\">:</span>\n    <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">add_solution</span><span class=\"p\">(</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">))</span>\n</pre>\n<p>The only things that you need to do are to fill in your own API Token, and the number of the benchmark that you want to solve. The name of your algorithm, and its version. And the debug mode. This should be set to True while you are developing your algorithm. This means that your attempts will not be shown on the global leader boards. You can however still see your own solution at <a href=\"https://mapfw.nl/auth/latest-debug\" rel=\"nofollow\">https://mapfw.nl/auth/latest-debug</a>.</p>\n<p>When your are ready, set the debug mode to False. The next time you run your code, your attempt will be publicly listed.\nYou should also implement the \"solve\" function yourself.\nThis function should take in a problem and return the solution.\nA basic outline of this function can be as follows:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Agent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">,</span> <span class=\"n\">waypoints</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">goal</span> <span class=\"o\">=</span> <span class=\"n\">goal</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waypoints</span> <span class=\"o\">=</span> <span class=\"n\">waypoints</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Maze</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"n\">grid</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">width</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">):</span>\n    <span class=\"n\">number_of_agents</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">starts</span><span class=\"p\">)</span>\n    <span class=\"n\">agents</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number_of_agents</span><span class=\"p\">):</span>\n        <span class=\"n\">agents</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Agent</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">starts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">starts</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">goals</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">waypoints</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]))</span>\n    <span class=\"n\">maze</span> <span class=\"o\">=</span> <span class=\"n\">Maze</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">grid</span><span class=\"p\">,</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">problem</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">agent</span> <span class=\"ow\">in</span> <span class=\"n\">agents</span><span class=\"p\">:</span>\n        <span class=\"n\">paths</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">,</span> <span class=\"n\">maze</span><span class=\"p\">))</span>\n\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Now paths looks like:</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    paths = [path agent 1, path agent 2, ..]</span>\n<span class=\"sd\">    path agent 1 = [pos agent 1 at time 0, pos agent 1 at time 1, .., pos agent 1 at finishing time]</span>\n<span class=\"sd\">    pos = [x coordinate, y coordinate]</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">paths</span>\n</pre>\n<p>This should be all that you need to know to get started!\nPlease note that this is just some example code and feel free to change it however you like.</p>\n<p>Good luck! And let us know if you have any questions.</p>\n\n          </div>"}, "last_serial": 7137274, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "e52ffcf4be75dd84f491d30266b1d598", "sha256": "80fd7a718100a4b81c9b50c1dd0ac82abebf3d3731523e0ca2fd710989c25450"}, "downloads": -1, "filename": "mapfw-0.1.tar.gz", "has_sig": false, "md5_digest": "e52ffcf4be75dd84f491d30266b1d598", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2749, "upload_time": "2020-04-29T09:43:12", "upload_time_iso_8601": "2020-04-29T09:43:12.759605Z", "url": "https://files.pythonhosted.org/packages/83/14/5c896aca2272dd5c6076f7a2aec55cd0fef62eb6ad127092bc9ceca8aece/mapfw-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0b25fb1ea2411733843d8dbe3717832b", "sha256": "779a5ba488a1236eff71b824069b0cd4795b428760476f9aee709e6d950ad879"}, "downloads": -1, "filename": "mapfw-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0b25fb1ea2411733843d8dbe3717832b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2787, "upload_time": "2020-04-29T14:46:23", "upload_time_iso_8601": "2020-04-29T14:46:23.280716Z", "url": "https://files.pythonhosted.org/packages/d1/bc/37fe3e54857ddf215782631913357bba1efc2728a0a9ae20f8f2aaa43e1a/mapfw-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "96b2f11d70af14c69be5bc05780b1a18", "sha256": "da5d7fc1d40f3f72c8ed5049ed925e20875649e41e6f4e478e51a575b1421a46"}, "downloads": -1, "filename": "mapfw-0.1.2.tar.gz", "has_sig": false, "md5_digest": "96b2f11d70af14c69be5bc05780b1a18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4413, "upload_time": "2020-04-30T12:29:05", "upload_time_iso_8601": "2020-04-30T12:29:05.459936Z", "url": "https://files.pythonhosted.org/packages/6b/f8/c220c607e7d7128cc3b537dda1eda6698862a0bbb09b3b28ffaea9f992d1/mapfw-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "4a52b6cf814fd16b20b3eb8385f65639", "sha256": "da64f433fe224cdb47b9077d1772fa05dbd1aedea9841539aec1e220b16f7af7"}, "downloads": -1, "filename": "mapfw-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4a52b6cf814fd16b20b3eb8385f65639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4394, "upload_time": "2020-04-30T12:36:18", "upload_time_iso_8601": "2020-04-30T12:36:18.175127Z", "url": "https://files.pythonhosted.org/packages/5a/ab/db83d3f6727b97bd7a7095e7fb98bcb5556131797b21b69db348c9604c4a/mapfw-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "d8c1e5d5eb06bef8dd0e399a2cd6d947", "sha256": "26232fde5890b213047348103f27584790a99ebc7e6b9311e70be46e796b7eb5"}, "downloads": -1, "filename": "mapfw-0.1.4.tar.gz", "has_sig": false, "md5_digest": "d8c1e5d5eb06bef8dd0e399a2cd6d947", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4395, "upload_time": "2020-04-30T13:08:47", "upload_time_iso_8601": "2020-04-30T13:08:47.894692Z", "url": "https://files.pythonhosted.org/packages/01/5d/6e7b1850b6b4ebbbb348c487fe953c154acefd07ec4267034176b9a1c76d/mapfw-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d7d909377a075abcd4691d5ebcf5f09a", "sha256": "d8ea3c7d3bec1da3aa461b682cb0a80e4441d9fba7029a6b0b8dc8c8fc469a50"}, "downloads": -1, "filename": "mapfw-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d7d909377a075abcd4691d5ebcf5f09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4400, "upload_time": "2020-04-30T13:13:15", "upload_time_iso_8601": "2020-04-30T13:13:15.447754Z", "url": "https://files.pythonhosted.org/packages/45/59/b1db9d00920581492a7b9eb6b6323aabddd0f1e010579254893d00a3871c/mapfw-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7d909377a075abcd4691d5ebcf5f09a", "sha256": "d8ea3c7d3bec1da3aa461b682cb0a80e4441d9fba7029a6b0b8dc8c8fc469a50"}, "downloads": -1, "filename": "mapfw-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d7d909377a075abcd4691d5ebcf5f09a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4400, "upload_time": "2020-04-30T13:13:15", "upload_time_iso_8601": "2020-04-30T13:13:15.447754Z", "url": "https://files.pythonhosted.org/packages/45/59/b1db9d00920581492a7b9eb6b6323aabddd0f1e010579254893d00a3871c/mapfw-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:55 2020"}