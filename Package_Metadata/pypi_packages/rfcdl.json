{"info": {"author": "eikendev", "author_email": "raphael@eiken.dev", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": ".. image:: https://img.shields.io/pypi/status/rfcdl.svg\n   :target: https://pypi.org/project/rfcdl/\n\n.. image:: https://img.shields.io/pypi/l/rfcdl.svg\n   :target: https://pypi.org/project/rfcdl/\n\n.. image:: https://img.shields.io/pypi/pyversions/rfcdl.svg\n   :target: https://pypi.org/project/rfcdl/\n\n.. image:: https://img.shields.io/pypi/v/rfcdl.svg\n   :target: https://pypi.org/project/rfcdl/\n\n.. image:: https://img.shields.io/pypi/dm/rfcdl.svg\n   :target: https://pypi.org/project/rfcdl/\n\nUsage\n=====\n\nThis tool can be used to download a large number of `RFC documents <https://www.ietf.org/standards/rfcs/>`_ in a short period of time.\nSince I like to keep all RFCs locally on my machine, this is the perfect way to retrieve all the documents and add new ones at a later point in time.\n\nFor a quick introduction, let me show how you would use the tool to get started.\n::\n\n    $ rfcdl -d ~/download/rfc/\n\nAs can be seen above, you have to specify a directory where all RFC documents will be saved in.\nUpon the next invocation of ``rfcdl``, only the RFCs missing in that directory will be downloaded.\n\nIf you only want to download a random subset of all RFCs, use the ``--samples`` flag.\nThis can be used for testing.\nFor instance, the following will download 20 random RFC documents.\n::\n\n    $ rfcdl -d ~/download/rfc/ --samples 20\n\nSince ``rfcdl`` downloads multiple files in parallel by default, one can specify how many simultaneous downloads are allowed using the ``--limit`` flag.\nThe following invocation will only download at most ten files in parallel.\n::\n\n    $ rfcdl -d ~/download/rfc/ --limit 10\n\nTo explicitly state how many times ``rfcdl`` should download a file upon error, the ``--retries`` flag can be used.\nThis can be useful in case one expects a bad connection.\nThis is how you could tell the tool to try to download each file at maximum five times.\n::\n\n    $ rfcdl -d ~/download/rfc/ --retries 5\n\nInstallation\n============\n\nFrom PyPI\n---------\n::\n\n   pip install rfcdl\n\nFrom Source\n-----------\n::\n\n   ./setup.py install\n\nConfiguration\n=============\n\nA configuration file can be saved to ``~/.config/rfcdl/config.ini`` to avoid specifying the path for each invocation.\nOf course, ``$XDG_CONFIG_HOME`` can be set to change your configuration path.\nAlternatively, the path to the configuration file can be set via the ``--config-file`` argument.\n::\n\n    [GENERAL]\n    RootDir = ~/download/rfc/\n\nDevelopment\n===========\n\nThe source code is located on `GitHub <https://github.com/eikendev/rfcdl>`_.\nTo check out the repository, the following command can be used.\n::\n\n   git clone https://github.com/eikendev/rfcdl.git", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/rfcdl", "keywords": "rfc,downloader,cli", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rfcdl", "package_url": "https://pypi.org/project/rfcdl/", "platform": "", "project_url": "https://pypi.org/project/rfcdl/", "project_urls": {"Homepage": "https://pypi.python.org/pypi/rfcdl"}, "release_url": "https://pypi.org/project/rfcdl/1.2.3/", "requires_dist": null, "requires_python": ">=3", "summary": "A tool for downloading RFCs in high-speed.", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/rfcdl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/status/rfcdl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28ba04a5685a58de6132a2f06c072b3d30322f47/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f726663646c2e737667\"></a>\n<a href=\"https://pypi.org/project/rfcdl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/rfcdl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/625e2ad4223d0bd6661a45028a23ef0cb484a112/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f726663646c2e737667\"></a>\n<a href=\"https://pypi.org/project/rfcdl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/rfcdl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc888ad1aaff026cb4581f3d494f4083740ce5cb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726663646c2e737667\"></a>\n<a href=\"https://pypi.org/project/rfcdl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/rfcdl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2e86f8d191680278f901c0023d13457de9d7378/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f726663646c2e737667\"></a>\n<a href=\"https://pypi.org/project/rfcdl/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/rfcdl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5a78d68014cf6059cf3064948c3e41c01ec56ecc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f726663646c2e737667\"></a>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This tool can be used to download a large number of <a href=\"https://www.ietf.org/standards/rfcs/\" rel=\"nofollow\">RFC documents</a> in a short period of time.\nSince I like to keep all RFCs locally on my machine, this is the perfect way to retrieve all the documents and add new ones at a later point in time.</p>\n<p>For a quick introduction, let me show how you would use the tool to get started.</p>\n<pre>$ rfcdl -d ~/download/rfc/\n</pre>\n<p>As can be seen above, you have to specify a directory where all RFC documents will be saved in.\nUpon the next invocation of <tt>rfcdl</tt>, only the RFCs missing in that directory will be downloaded.</p>\n<p>If you only want to download a random subset of all RFCs, use the <tt><span class=\"pre\">--samples</span></tt> flag.\nThis can be used for testing.\nFor instance, the following will download 20 random RFC documents.</p>\n<pre>$ rfcdl -d ~/download/rfc/ --samples 20\n</pre>\n<p>Since <tt>rfcdl</tt> downloads multiple files in parallel by default, one can specify how many simultaneous downloads are allowed using the <tt><span class=\"pre\">--limit</span></tt> flag.\nThe following invocation will only download at most ten files in parallel.</p>\n<pre>$ rfcdl -d ~/download/rfc/ --limit 10\n</pre>\n<p>To explicitly state how many times <tt>rfcdl</tt> should download a file upon error, the <tt><span class=\"pre\">--retries</span></tt> flag can be used.\nThis can be useful in case one expects a bad connection.\nThis is how you could tell the tool to try to download each file at maximum five times.</p>\n<pre>$ rfcdl -d ~/download/rfc/ --retries 5\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"from-pypi\">\n<h3>From PyPI</h3>\n<pre>pip install rfcdl\n</pre>\n</div>\n<div id=\"from-source\">\n<h3>From Source</h3>\n<pre>./setup.py install\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>A configuration file can be saved to <tt><span class=\"pre\">~/.config/rfcdl/config.ini</span></tt> to avoid specifying the path for each invocation.\nOf course, <tt>$XDG_CONFIG_HOME</tt> can be set to change your configuration path.\nAlternatively, the path to the configuration file can be set via the <tt><span class=\"pre\">--config-file</span></tt> argument.</p>\n<pre>[GENERAL]\nRootDir = ~/download/rfc/\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>The source code is located on <a href=\"https://github.com/eikendev/rfcdl\" rel=\"nofollow\">GitHub</a>.\nTo check out the repository, the following command can be used.</p>\n<pre>git clone https://github.com/eikendev/rfcdl.git\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6802946, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9243d8edf82265a990f558a1184f497e", "sha256": "19e4b922d0da4627e4b8a7b01c5a3267206033017d49da191c6f7dfbba91c677"}, "downloads": -1, "filename": "rfcdl-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9243d8edf82265a990f558a1184f497e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6836, "upload_time": "2019-04-07T09:05:50", "upload_time_iso_8601": "2019-04-07T09:05:50.630826Z", "url": "https://files.pythonhosted.org/packages/0e/4b/021015417f2be2cd82f76f25303ce58134d3d17cd2e59b7edb927a4fdbdc/rfcdl-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "04a6e43f78a9ce4565e924b7e58b90e5", "sha256": "f15bc48060abae98dc7900ad7c7f0c4e9bf2b7e189f3793386bae04b1f7cdca4"}, "downloads": -1, "filename": "rfcdl-1.1.1.tar.gz", "has_sig": false, "md5_digest": "04a6e43f78a9ce4565e924b7e58b90e5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 7143, "upload_time": "2019-04-11T22:17:56", "upload_time_iso_8601": "2019-04-11T22:17:56.007277Z", "url": "https://files.pythonhosted.org/packages/65/b5/758602c278770539b9c9ed99f69760e67c3d757d60016848396dd149eb31/rfcdl-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "96715a0c192dceece7d61fd20573cd9f", "sha256": "9d04645026446c90fd53e1db26e1aa326c1f109227775eb908a1397b456b8805"}, "downloads": -1, "filename": "rfcdl-1.1.2.tar.gz", "has_sig": false, "md5_digest": "96715a0c192dceece7d61fd20573cd9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8228, "upload_time": "2019-04-20T21:08:40", "upload_time_iso_8601": "2019-04-20T21:08:40.463095Z", "url": "https://files.pythonhosted.org/packages/17/2a/939ccb85d7f14fbaf6ad9a2f61ef1db231d77e670fd0679f3209929b90ce/rfcdl-1.1.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "81c46163ca8ef068486399d119e12225", "sha256": "0c07f95de89ba1dbd61a5395b7416c1355137626d268c5517317dae0d3c2daab"}, "downloads": -1, "filename": "rfcdl-1.2.3.tar.gz", "has_sig": false, "md5_digest": "81c46163ca8ef068486399d119e12225", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10050, "upload_time": "2020-03-13T00:44:23", "upload_time_iso_8601": "2020-03-13T00:44:23.841904Z", "url": "https://files.pythonhosted.org/packages/e2/3f/b766f3c657463db8c4829ea3aa15d13f0d3412117772aee989c71bc21e05/rfcdl-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81c46163ca8ef068486399d119e12225", "sha256": "0c07f95de89ba1dbd61a5395b7416c1355137626d268c5517317dae0d3c2daab"}, "downloads": -1, "filename": "rfcdl-1.2.3.tar.gz", "has_sig": false, "md5_digest": "81c46163ca8ef068486399d119e12225", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10050, "upload_time": "2020-03-13T00:44:23", "upload_time_iso_8601": "2020-03-13T00:44:23.841904Z", "url": "https://files.pythonhosted.org/packages/e2/3f/b766f3c657463db8c4829ea3aa15d13f0d3412117772aee989c71bc21e05/rfcdl-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:09 2020"}