{"info": {"author": "Anthony Manning-Franklin", "author_email": "anthony.manning.franklin@gmail.com.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "pyilchimp\n=========\n\nPython wrapper for Mailchimp\u2019s 3.0+ API\n\nInstallation\n------------\n\nInstall via pip:\n\n::\n\n    pip install pyilchimp\n\nUsage\n-----\n\nBasic example\n~~~~~~~~~~~~~\n\nFirst connect to an account:\n\n::\n\n    from pyilchimp.mailchimp_manager import MailchimpManager\n\n    mc = MailchimpManager(api_key='1qaz2wsx3edc4rfv5tgb667yhn', server='us1')\n\nNow we can make requests:\n\n::\n\n    campaigns = mc.campaigns.all()\n\n    recent_campaigns = mc.campaigns.all(filters={'sort_dir': 'DESC', 'count': 20})\n\nManagers and resources\n~~~~~~~~~~~~~~~~~~~~~~\n\nIf you\u2019ve ever used Django\u2019s ORM, Pyilchimp is structured in a similar\nway. Resources have managers which can find and return objects, such as\na CampaignManager finding and returning campaigns. The name of the\nmanager is the lower case pluralised form of each resource and provides\na ``.get()`` and ``.all()`` method. ``get()`` can return a single\ninstance when provided an id, while ``all()`` will return all objects\nmatching a provided filter, or the last 10 by default.\n\nMailchimp actions\n~~~~~~~~~~~~~~~~~\n\nMailchimp provides actions that do not fit into standard RESTful API\nguidelines. Making use of these actions map to methods with the same\nname for each resource.\n\n::\n\n    campaign = mc.campaigns.get('123123123c')\n    campaign.pause()", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Antman261/pyilchimp", "keywords": "API RESTful wrapper Mailchimp EDM", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyilchimp", "package_url": "https://pypi.org/project/pyilchimp/", "platform": "", "project_url": "https://pypi.org/project/pyilchimp/", "project_urls": {"Homepage": "https://github.com/Antman261/pyilchimp"}, "release_url": "https://pypi.org/project/pyilchimp/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Wrapper library for Mailchimp's 3.0 API", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python wrapper for Mailchimp\u2019s 3.0+ API</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install via pip:</p>\n<pre>pip install pyilchimp\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"basic-example\">\n<h3>Basic example</h3>\n<p>First connect to an account:</p>\n<pre>from pyilchimp.mailchimp_manager import MailchimpManager\n\nmc = MailchimpManager(api_key='1qaz2wsx3edc4rfv5tgb667yhn', server='us1')\n</pre>\n<p>Now we can make requests:</p>\n<pre>campaigns = mc.campaigns.all()\n\nrecent_campaigns = mc.campaigns.all(filters={'sort_dir': 'DESC', 'count': 20})\n</pre>\n</div>\n<div id=\"managers-and-resources\">\n<h3>Managers and resources</h3>\n<p>If you\u2019ve ever used Django\u2019s ORM, Pyilchimp is structured in a similar\nway. Resources have managers which can find and return objects, such as\na CampaignManager finding and returning campaigns. The name of the\nmanager is the lower case pluralised form of each resource and provides\na <tt>.get()</tt> and <tt>.all()</tt> method. <tt>get()</tt> can return a single\ninstance when provided an id, while <tt>all()</tt> will return all objects\nmatching a provided filter, or the last 10 by default.</p>\n</div>\n<div id=\"mailchimp-actions\">\n<h3>Mailchimp actions</h3>\n<p>Mailchimp provides actions that do not fit into standard RESTful API\nguidelines. Making use of these actions map to methods with the same\nname for each resource.</p>\n<pre>campaign = mc.campaigns.get('123123123c')\ncampaign.pause()\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2646410, "releases": {"0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "37a53177d894dd19ad3f7a8dcded5906", "sha256": "940b3f95cf7207ecee794cda1d31b595487ee688ff9c737108e88158a9260007"}, "downloads": -1, "filename": "pyilchimp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "37a53177d894dd19ad3f7a8dcded5906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3897, "upload_time": "2017-02-16T09:40:34", "upload_time_iso_8601": "2017-02-16T09:40:34.565092Z", "url": "https://files.pythonhosted.org/packages/40/76/2f772c5d286c24e99f8a66152ac610efc599046c2e4231da87625bdc160a/pyilchimp-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "37a53177d894dd19ad3f7a8dcded5906", "sha256": "940b3f95cf7207ecee794cda1d31b595487ee688ff9c737108e88158a9260007"}, "downloads": -1, "filename": "pyilchimp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "37a53177d894dd19ad3f7a8dcded5906", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3897, "upload_time": "2017-02-16T09:40:34", "upload_time_iso_8601": "2017-02-16T09:40:34.565092Z", "url": "https://files.pythonhosted.org/packages/40/76/2f772c5d286c24e99f8a66152ac610efc599046c2e4231da87625bdc160a/pyilchimp-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:06 2020"}