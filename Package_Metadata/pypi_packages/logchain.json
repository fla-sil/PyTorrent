{"info": {"author": "Gg Math", "author_email": "code@gmath.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Logchain\n\n[![pipeline status](https://gitlab.com/ggpack/logchain/badges/master/pipeline.svg)](https://gitlab.com/ggpack/logchain/-/commits/master)\n\n![Dependencies](https://img.shields.io/badge/dependencies-0-blue.svg)\n[![license](https://img.shields.io/badge/license-ISC-blue.svg)](https://gitlab.com/ggpack/logchain/-/blob/master/LICENSE)\n[![Package](https://img.shields.io/badge/PIP-logchain-blue.svg)](https://pypi.org/project/logchain)\n\nPython Logging secured by blockchain \ud83d\udcdc\u26d3\ufe0f.\n\n## Logs get chained\nThe current log line contains the signature of the previous line with your secret.\n* detect lines deleted / lost\n* detect logs tampering\n\n## Philosophy\nThe package is intended to be a **lightweight** util for generating **incorruptible** logs.\n\nFor this pupose we rely as much as possible on standard packages: few dependencies, high quality.\n\nThe formatters are easy **extensible** by simply deriving from `Basic`.\n\n\n# Usage\n\n## Install\n``` bash\npip install logchain\n```\n\n## Choose your log type\n\nMany types of logs are supported out-of-the-box:\n- `Basic` raw text, relying on the standard formatter\n- `Json` structured log lines with static & dynamic fields\n- `CSV` work in progress\n\nYou can write a custom formatter in 20-ish lines.\n\n## Init once in main\n``` python\nfrom logchain import LogChainer\n\n# Initialize a default chainer.\ntheLogger = LogChainer()\n\n# Register the formatter to the logger.\ntheLogger.initLogging()\n```\n\nHave a look at [the comprehensive guide of constructor parameters](#constructor-parameters).\n\n## Use everywhere with python logging module\n``` python\nimport logging\n\nlogging.debug(\"My message\")\nlogging.info(\"Some information\")\n```\n\n## Check your logs integrity afterwards\n``` python\nfrom logchain import LogChainer\n\naLogChain = [\n\t\"2020-03-30 13:38:00.782|0ec90b9839fdd964|TestChaining.py:20 test_logging_happy_case hello gg\",\n\t\"2020-03-30 13:38:00.782|2e3f1b4a7b946fb1|TestChaining.py:21 test_logging_happy_case voila1\",\n\t\"2020-03-30 13:38:00.782|10d1ab606618492a|TestChaining.py:22 test_logging_happy_case voila2\",\n\t\"2020-03-30 13:38:00.782|805757e144f4e385|TestChaining.py:23 test_logging_happy_case voila5\",\n\t\"2020-03-30 13:38:00.782|3bda90b5af77d3fe|TestChaining.py:24 test_logging_happy_case voila4\"\n]\nresult = LogChainer.verify(aLogChain)\n\nif not result:\n\tprint(\"Last good line\", result.prevLine)\n\tprint(\"First bad line\", result.line)\nelse:\n\tprint(\"All right\")\n```\n\n## Constructor parameters\n\nThey are passed as named arguments.\n``` python\nfrom logchain import LogChainer\n\ntheLogger = LogChainer(verbosity = 3, secret = \"mySignatureKey\")\n\nparams = {\"verbosity\": 3, \"secret\": \"mySignatureKey\", \"timestamp\": {\"fmt\": \"%s\"}}\ntheLogger = LogChainer(**params)\n```\n\n| Param : Type | Default value | Description |\n| ----- | ------------- | ----------- |\n| formatterCls : class | formatters.Basic | Type of logging to perform, raw text, json, custom |\n| format : string | see below | Placeholder string used by raw-text loggers |\n| secret : string | secrets.token_urlsafe(128) | Signature key to compute the line signature |\n| seed : string | secrets.token_urlsafe() | Random string to sign into the first log line |\n| timestamp : dict | see below | Group of properties for the timestamp |\n| stream : stream | cout | Where the logs are sent, file/console/custom stream |\n| verbosity : int | 0 | Number [0..5] mapped to a logging.level |\n\nThe default format is `%(timestamp)s %(levelLetters)s %(fileLine)-15s %(funcName)-15s %(message)-60s |%(signature)s`. It relies on some extra fields like the signature at its end.\n\n\n## Settings of `timestamp`\n| Param : Type | Default value | Description |\n| ----- | ------------- | ----------- |\n| fmt : string | \"iso\" | iso for 8601 or `strftime` compatible placeholders (ex: \"%F %T.%f\" |\n| precision : string | \"milliseconds\" | `timespec` element used by [the datetime library](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat) |\n| utc : bool | False | Transform the timestamp to its value in UTC |\n\n\n## Logchain extra logging fields\nWe enrich the standard logging record with some handy string fields:\n\n| Name | Description |\n| ---- | ----------- |\n| fileLine | Widespread `filename:lineno` |\n| levelLetters | 4 first letters of logging level names: short and unambiguous |\n| signature | The digital signature of the previous line. Include it in all your lines to benefit from the chaining |\n| timestamp | Improved version of `asctime`, see below |\n\n\nThe `timestamp` field offers more flexibility than `asctime` in regards to:\n- the precision; can go up to the micro seconds (`msecs` cannot)\n- the decimal separator; you choose, '.' by default\n- utc or local timezone\n- customize the format only in one place: `timestamp.fmt`\n\n\n## Dynamic logging fields\nThe package is suitable for server/app logging which context changes from one transaction to another.\nHere is an example of setting contextual information throughout the lifecycle of an app:\n\n**App.py**\n``` python\nclass App:\n\tdef __init__(self, appName, logger):\n\t\tself.logger = logger\n\t\tself.logger.setField(appName = appName)\n\t\tlogging.info(\"Creating the app\")\n\n\tdef handleTransaction(self, userId, callback):\n\t\twith self.logger.managedField(uId = userId, trxId = secrets.token_urlsafe(8)):\n\t\t\tcallback()\n\n\tdef close(self):\n\t\tlogging.info(\"Closing the app\")\n```\n\n**Callbacks.py**\n``` python\n# The log chain in transparent for the callbacks\ndef callback1():\n\tlogging.warn(\"Something happened\")\n\ndef callback2():\n\tlogging.info(\"Serving a resource\")\n```\n\n**main.py**\n``` python\ndef main():\n\ttheLogger = logchain.LogChainer(formatterCls = logchain.formatters.Json)\n\ttheLogger.initLogging()\n\n\tapp = App(\"MyApp\", theLogger)\n\tapp.handleTransaction(\"user1\", callback1)\n\tapp.handleTransaction(\"user1\", callback2)\n\tapp.close()\n```\n\nYou can either use:\n* `setField`: set a permanant field, remove it by setting it to `None`.\n* `managedField`: set a temporary field for the scope of the `context manager`.\n\n## Verbosity to logging.levels\nThe default mapping it described by the variable `VerbosityToLevel` as follows:\n\n| Verbosity |  Level  |\n| :---------: | ------- |\n| 0 | ERROR |\n| 1 | WARNING |\n| 2 | INFO |\n| 3 | DEBUG |\n\n----\n\n# Contributing\n\n## Install\n[**The code is hosted on Gitlab \ud83e\udd8a**](https://gitlab.com/ggpack/logchain)\n\nSimply clone and submit pull requests.\n\n## Testing\nThe unit tests are located in the [test folder](https://gitlab.com/ggpack/logchain/-/blob/master/test)\nwhich contains the `__main__.py` entrypoint.\n\n``` bash\n# Run all\npython test\n\n# Get additional options\npython test --help\n```\n\n## Releasing\nThe process is triggered by a tag added to a commit. The tag must match the pattern `release_<VERSION>`\nand `VERSION` has to comply to **[semver](https://semver.org)**.\n\n[A CI/CD job](https://gitlab.com/ggpack/logchain/-/blob/master/.gitlab-ci.yml) handles the new tag event and publishes the package to PYPI using\nusing to the awesome [Poetry tool](https://python-poetry.org):\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/ggpack/logchain", "keywords": "logging,security,secure,blockchain,signature", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "logchain", "package_url": "https://pypi.org/project/logchain/", "platform": "", "project_url": "https://pypi.org/project/logchain/", "project_urls": {"Homepage": "https://gitlab.com/ggpack/logchain", "Repository": "https://gitlab.com/ggpack/logchain"}, "release_url": "https://pypi.org/project/logchain/0.3.0/", "requires_dist": null, "requires_python": ">=3.2,<4.0", "summary": "Python Logging secured by blockchain", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Logchain</h1>\n<p><a href=\"https://gitlab.com/ggpack/logchain/-/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/795be3a3689cc24c405842a10c4b00e04ce163b6/68747470733a2f2f6769746c61622e636f6d2f67677061636b2f6c6f67636861696e2f6261646765732f6d61737465722f706970656c696e652e737667\"></a></p>\n<p><img alt=\"Dependencies\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd01792f7ccb307520513be39df6f331c7bf43db/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646570656e64656e636965732d302d626c75652e737667\">\n<a href=\"https://gitlab.com/ggpack/logchain/-/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c5a692eb4c50a166f706bbdea40805bdc8d694e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4953432d626c75652e737667\"></a>\n<a href=\"https://pypi.org/project/logchain\" rel=\"nofollow\"><img alt=\"Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d09eca6629553bc24b92c2433d1d9a33cc1df7dd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5049502d6c6f67636861696e2d626c75652e737667\"></a></p>\n<p>Python Logging secured by blockchain \ud83d\udcdc\u26d3\ufe0f.</p>\n<h2>Logs get chained</h2>\n<p>The current log line contains the signature of the previous line with your secret.</p>\n<ul>\n<li>detect lines deleted / lost</li>\n<li>detect logs tampering</li>\n</ul>\n<h2>Philosophy</h2>\n<p>The package is intended to be a <strong>lightweight</strong> util for generating <strong>incorruptible</strong> logs.</p>\n<p>For this pupose we rely as much as possible on standard packages: few dependencies, high quality.</p>\n<p>The formatters are easy <strong>extensible</strong> by simply deriving from <code>Basic</code>.</p>\n<h1>Usage</h1>\n<h2>Install</h2>\n<pre>pip install logchain\n</pre>\n<h2>Choose your log type</h2>\n<p>Many types of logs are supported out-of-the-box:</p>\n<ul>\n<li><code>Basic</code> raw text, relying on the standard formatter</li>\n<li><code>Json</code> structured log lines with static &amp; dynamic fields</li>\n<li><code>CSV</code> work in progress</li>\n</ul>\n<p>You can write a custom formatter in 20-ish lines.</p>\n<h2>Init once in main</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"c1\"># Initialize a default chainer.</span>\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Register the formatter to the logger.</span>\n<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">initLogging</span><span class=\"p\">()</span>\n</pre>\n<p>Have a look at <a href=\"#constructor-parameters\" rel=\"nofollow\">the comprehensive guide of constructor parameters</a>.</p>\n<h2>Use everywhere with python logging module</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"My message\"</span><span class=\"p\">)</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Some information\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Check your logs integrity afterwards</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"n\">aLogChain</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|0ec90b9839fdd964|TestChaining.py:20 test_logging_happy_case hello gg\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|2e3f1b4a7b946fb1|TestChaining.py:21 test_logging_happy_case voila1\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|10d1ab606618492a|TestChaining.py:22 test_logging_happy_case voila2\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|805757e144f4e385|TestChaining.py:23 test_logging_happy_case voila5\"</span><span class=\"p\">,</span>\n\t<span class=\"s2\">\"2020-03-30 13:38:00.782|3bda90b5af77d3fe|TestChaining.py:24 test_logging_happy_case voila4\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">aLogChain</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Last good line\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">prevLine</span><span class=\"p\">)</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"First bad line\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"All right\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Constructor parameters</h2>\n<p>They are passed as named arguments.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">logchain</span> <span class=\"kn\">import</span> <span class=\"n\">LogChainer</span>\n\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"n\">verbosity</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"s2\">\"mySignatureKey\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"verbosity\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mySignatureKey\"</span><span class=\"p\">,</span> <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"fmt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"p\">}}</span>\n<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>Param : Type</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>formatterCls : class</td>\n<td>formatters.Basic</td>\n<td>Type of logging to perform, raw text, json, custom</td>\n</tr>\n<tr>\n<td>format : string</td>\n<td>see below</td>\n<td>Placeholder string used by raw-text loggers</td>\n</tr>\n<tr>\n<td>secret : string</td>\n<td>secrets.token_urlsafe(128)</td>\n<td>Signature key to compute the line signature</td>\n</tr>\n<tr>\n<td>seed : string</td>\n<td>secrets.token_urlsafe()</td>\n<td>Random string to sign into the first log line</td>\n</tr>\n<tr>\n<td>timestamp : dict</td>\n<td>see below</td>\n<td>Group of properties for the timestamp</td>\n</tr>\n<tr>\n<td>stream : stream</td>\n<td>cout</td>\n<td>Where the logs are sent, file/console/custom stream</td>\n</tr>\n<tr>\n<td>verbosity : int</td>\n<td>0</td>\n<td>Number [0..5] mapped to a logging.level</td>\n</tr></tbody></table>\n<p>The default format is <code>%(timestamp)s %(levelLetters)s %(fileLine)-15s %(funcName)-15s %(message)-60s |%(signature)s</code>. It relies on some extra fields like the signature at its end.</p>\n<h2>Settings of <code>timestamp</code></h2>\n<table>\n<thead>\n<tr>\n<th>Param : Type</th>\n<th>Default value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fmt : string</td>\n<td>\"iso\"</td>\n<td>iso for 8601 or <code>strftime</code> compatible placeholders (ex: \"%F %T.%f\"</td>\n</tr>\n<tr>\n<td>precision : string</td>\n<td>\"milliseconds\"</td>\n<td><code>timespec</code> element used by <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat\" rel=\"nofollow\">the datetime library</a></td>\n</tr>\n<tr>\n<td>utc : bool</td>\n<td>False</td>\n<td>Transform the timestamp to its value in UTC</td>\n</tr></tbody></table>\n<h2>Logchain extra logging fields</h2>\n<p>We enrich the standard logging record with some handy string fields:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fileLine</td>\n<td>Widespread <code>filename:lineno</code></td>\n</tr>\n<tr>\n<td>levelLetters</td>\n<td>4 first letters of logging level names: short and unambiguous</td>\n</tr>\n<tr>\n<td>signature</td>\n<td>The digital signature of the previous line. Include it in all your lines to benefit from the chaining</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>Improved version of <code>asctime</code>, see below</td>\n</tr></tbody></table>\n<p>The <code>timestamp</code> field offers more flexibility than <code>asctime</code> in regards to:</p>\n<ul>\n<li>the precision; can go up to the micro seconds (<code>msecs</code> cannot)</li>\n<li>the decimal separator; you choose, '.' by default</li>\n<li>utc or local timezone</li>\n<li>customize the format only in one place: <code>timestamp.fmt</code></li>\n</ul>\n<h2>Dynamic logging fields</h2>\n<p>The package is suitable for server/app logging which context changes from one transaction to another.\nHere is an example of setting contextual information throughout the lifecycle of an app:</p>\n<p><strong>App.py</strong></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">appName</span><span class=\"p\">,</span> <span class=\"n\">logger</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setField</span><span class=\"p\">(</span><span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Creating the app\"</span><span class=\"p\">)</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">handleTransaction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">userId</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">managedField</span><span class=\"p\">(</span><span class=\"n\">uId</span> <span class=\"o\">=</span> <span class=\"n\">userId</span><span class=\"p\">,</span> <span class=\"n\">trxId</span> <span class=\"o\">=</span> <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">token_urlsafe</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)):</span>\n\t\t\t<span class=\"n\">callback</span><span class=\"p\">()</span>\n\n\t<span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Closing the app\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Callbacks.py</strong></p>\n<pre><span class=\"c1\"># The log chain in transparent for the callbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">callback1</span><span class=\"p\">():</span>\n\t<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span><span class=\"s2\">\"Something happened\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">callback2</span><span class=\"p\">():</span>\n\t<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Serving a resource\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>main.py</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\t<span class=\"n\">theLogger</span> <span class=\"o\">=</span> <span class=\"n\">logchain</span><span class=\"o\">.</span><span class=\"n\">LogChainer</span><span class=\"p\">(</span><span class=\"n\">formatterCls</span> <span class=\"o\">=</span> <span class=\"n\">logchain</span><span class=\"o\">.</span><span class=\"n\">formatters</span><span class=\"o\">.</span><span class=\"n\">Json</span><span class=\"p\">)</span>\n\t<span class=\"n\">theLogger</span><span class=\"o\">.</span><span class=\"n\">initLogging</span><span class=\"p\">()</span>\n\n\t<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">App</span><span class=\"p\">(</span><span class=\"s2\">\"MyApp\"</span><span class=\"p\">,</span> <span class=\"n\">theLogger</span><span class=\"p\">)</span>\n\t<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">handleTransaction</span><span class=\"p\">(</span><span class=\"s2\">\"user1\"</span><span class=\"p\">,</span> <span class=\"n\">callback1</span><span class=\"p\">)</span>\n\t<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">handleTransaction</span><span class=\"p\">(</span><span class=\"s2\">\"user1\"</span><span class=\"p\">,</span> <span class=\"n\">callback2</span><span class=\"p\">)</span>\n\t<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>You can either use:</p>\n<ul>\n<li><code>setField</code>: set a permanant field, remove it by setting it to <code>None</code>.</li>\n<li><code>managedField</code>: set a temporary field for the scope of the <code>context manager</code>.</li>\n</ul>\n<h2>Verbosity to logging.levels</h2>\n<p>The default mapping it described by the variable <code>VerbosityToLevel</code> as follows:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Verbosity</th>\n<th>Level</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">0</td>\n<td>ERROR</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td>WARNING</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td>INFO</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td>DEBUG</td>\n</tr></tbody></table>\n<hr>\n<h1>Contributing</h1>\n<h2>Install</h2>\n<p><a href=\"https://gitlab.com/ggpack/logchain\" rel=\"nofollow\"><strong>The code is hosted on Gitlab \ud83e\udd8a</strong></a></p>\n<p>Simply clone and submit pull requests.</p>\n<h2>Testing</h2>\n<p>The unit tests are located in the <a href=\"https://gitlab.com/ggpack/logchain/-/blob/master/test\" rel=\"nofollow\">test folder</a>\nwhich contains the <code>__main__.py</code> entrypoint.</p>\n<pre><span class=\"c1\"># Run all</span>\npython <span class=\"nb\">test</span>\n\n<span class=\"c1\"># Get additional options</span>\npython <span class=\"nb\">test</span> --help\n</pre>\n<h2>Releasing</h2>\n<p>The process is triggered by a tag added to a commit. The tag must match the pattern <code>release_&lt;VERSION&gt;</code>\nand <code>VERSION</code> has to comply to <strong><a href=\"https://semver.org\" rel=\"nofollow\">semver</a></strong>.</p>\n<p><a href=\"https://gitlab.com/ggpack/logchain/-/blob/master/.gitlab-ci.yml\" rel=\"nofollow\">A CI/CD job</a> handles the new tag event and publishes the package to PYPI using\nusing to the awesome <a href=\"https://python-poetry.org\" rel=\"nofollow\">Poetry tool</a>:</p>\n\n          </div>"}, "last_serial": 7158659, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "56c9957de87ceda2aff4d8f30c5aed96", "sha256": "8ed9b2c93d9979d212e73d092d2a8b537736b1883d6def492837aabf123b01ef"}, "downloads": -1, "filename": "logchain-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "56c9957de87ceda2aff4d8f30c5aed96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 7606, "upload_time": "2020-04-27T19:26:26", "upload_time_iso_8601": "2020-04-27T19:26:26.723591Z", "url": "https://files.pythonhosted.org/packages/9f/0d/7874dc75e4a23759509dba7c0b8441cd9f62463166a9b30835849b0c375c/logchain-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9bbfd0326b0423f84d450642ce918a0", "sha256": "9c45e8d3133a7ff00361df63c9bfbd1c49558cc06cd2de834552dc574233090b"}, "downloads": -1, "filename": "logchain-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b9bbfd0326b0423f84d450642ce918a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 7446, "upload_time": "2020-04-27T19:26:28", "upload_time_iso_8601": "2020-04-27T19:26:28.988580Z", "url": "https://files.pythonhosted.org/packages/2d/83/1492905edff5d1fe36fcbcecc35a17c126a6582e20a807f3fd3bd8837766/logchain-0.0.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9e2623de10ce68871ec6e246035ebc26", "sha256": "b93fa8b0d6c0e4848bd1ff825a00bd63e1b182f15e4f42e56e6a35a54455f927"}, "downloads": -1, "filename": "logchain-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9e2623de10ce68871ec6e246035ebc26", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 8130, "upload_time": "2020-05-01T14:32:06", "upload_time_iso_8601": "2020-05-01T14:32:06.573397Z", "url": "https://files.pythonhosted.org/packages/68/61/6aa2b39dedb97b46873acb5e4ab675857eae7cddfcfe5f364832da9a0f4b/logchain-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f0a99a28578e12eff996d554762fec5", "sha256": "06be513ebfdc7c8c8a9e5400aa70f4f1affa976a2ca8ac6a92e4921b0fcd0d40"}, "downloads": -1, "filename": "logchain-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f0a99a28578e12eff996d554762fec5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 8057, "upload_time": "2020-05-01T14:32:07", "upload_time_iso_8601": "2020-05-01T14:32:07.664944Z", "url": "https://files.pythonhosted.org/packages/e7/ca/844fe23b888ff02734a82bb6294ce6cf817193a6f0fd594d91cb65064ff5/logchain-0.1.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "721a78b601772ae0d96feac1a0bbe908", "sha256": "bde5a7ba4b86462dbd605a3b06e9e310a92a9d6312b40a204b070f5031a93c4a"}, "downloads": -1, "filename": "logchain-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "721a78b601772ae0d96feac1a0bbe908", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 8282, "upload_time": "2020-05-02T13:32:21", "upload_time_iso_8601": "2020-05-02T13:32:21.810573Z", "url": "https://files.pythonhosted.org/packages/11/e7/3e1dccf63afba24b33ccc7bb1c609633b05016155218afbae5421d090434/logchain-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd7ebf47e8c1e0b1af0f6cfb02cf179e", "sha256": "2028b1eeeefed2ce1541aba7c6e5251b8bf0c74a39e5689d84eaba83edbc85da"}, "downloads": -1, "filename": "logchain-0.2.1.tar.gz", "has_sig": false, "md5_digest": "fd7ebf47e8c1e0b1af0f6cfb02cf179e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 8215, "upload_time": "2020-05-02T13:32:22", "upload_time_iso_8601": "2020-05-02T13:32:22.676317Z", "url": "https://files.pythonhosted.org/packages/1b/5b/705c463d2084c1ea83de82d59900bbbde192d33e5b4d0cbc31df4b4f5f69/logchain-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6d627cb7b9761c812a20f1e9b7eb51e0", "sha256": "898d8d4babe1416bc45c6de797cdd917ba9f463dce8ad034469d8b626cdd8427"}, "downloads": -1, "filename": "logchain-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6d627cb7b9761c812a20f1e9b7eb51e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 8245, "upload_time": "2020-05-02T13:57:41", "upload_time_iso_8601": "2020-05-02T13:57:41.940674Z", "url": "https://files.pythonhosted.org/packages/97/1f/cda134eb850ef6f9159e2c4fe519bef0475023ab994f78519f831a02dcb3/logchain-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9116777fd227fe0ee2aa63c717d4accd", "sha256": "736c29d109970255595d9102f7949eb473792ff3e53a02b10d2dc8157b6d321c"}, "downloads": -1, "filename": "logchain-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9116777fd227fe0ee2aa63c717d4accd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 8165, "upload_time": "2020-05-02T13:57:42", "upload_time_iso_8601": "2020-05-02T13:57:42.872310Z", "url": "https://files.pythonhosted.org/packages/7a/5e/e1cca7bffb48996883577a181564c7466a848ca82f46b6d6966a83ef81b1/logchain-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5547bbbde0a9279f41bfe094d9a5e1ff", "sha256": "2f3bd2f01eb466e76e736ea8afabdbc0f7142439bbc5e5a3152859922b366a86"}, "downloads": -1, "filename": "logchain-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5547bbbde0a9279f41bfe094d9a5e1ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 8484, "upload_time": "2020-05-03T17:43:55", "upload_time_iso_8601": "2020-05-03T17:43:55.167693Z", "url": "https://files.pythonhosted.org/packages/5b/94/d0339d08c3c9d1b0d9c9d9958691a0e1695c7798d5064e85635f3d40d1f3/logchain-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44bb462c56ff649f716c569627e2ab8c", "sha256": "b3e09b2fdb08304ba88122b632ce5aeedf1dd1d9474683208384c3199c982beb"}, "downloads": -1, "filename": "logchain-0.3.0.tar.gz", "has_sig": false, "md5_digest": "44bb462c56ff649f716c569627e2ab8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 8459, "upload_time": "2020-05-03T17:43:56", "upload_time_iso_8601": "2020-05-03T17:43:56.016253Z", "url": "https://files.pythonhosted.org/packages/cc/f5/1394eacc08863421b6d083762b82a32691a9e49b06043c217459eaae0383/logchain-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5547bbbde0a9279f41bfe094d9a5e1ff", "sha256": "2f3bd2f01eb466e76e736ea8afabdbc0f7142439bbc5e5a3152859922b366a86"}, "downloads": -1, "filename": "logchain-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5547bbbde0a9279f41bfe094d9a5e1ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.2,<4.0", "size": 8484, "upload_time": "2020-05-03T17:43:55", "upload_time_iso_8601": "2020-05-03T17:43:55.167693Z", "url": "https://files.pythonhosted.org/packages/5b/94/d0339d08c3c9d1b0d9c9d9958691a0e1695c7798d5064e85635f3d40d1f3/logchain-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44bb462c56ff649f716c569627e2ab8c", "sha256": "b3e09b2fdb08304ba88122b632ce5aeedf1dd1d9474683208384c3199c982beb"}, "downloads": -1, "filename": "logchain-0.3.0.tar.gz", "has_sig": false, "md5_digest": "44bb462c56ff649f716c569627e2ab8c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.2,<4.0", "size": 8459, "upload_time": "2020-05-03T17:43:56", "upload_time_iso_8601": "2020-05-03T17:43:56.016253Z", "url": "https://files.pythonhosted.org/packages/cc/f5/1394eacc08863421b6d083762b82a32691a9e49b06043c217459eaae0383/logchain-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}