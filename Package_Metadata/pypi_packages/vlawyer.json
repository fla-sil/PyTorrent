{"info": {"author": "Raheeb Hassan", "author_email": "raheeb@myself.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# vlawyer\n\n[![forthebadge](https://forthebadge.com/images/badges/made-with-python.svg)](https://forthebadge.com)\n\nAn unofficial [vjudge](https://vjudge.net/) statistics API\n\nYou can use this package to get:\n- submissions data\n- contest standings *(comming soon)*\n\n**Disclaimer:** All rights to the site and its data are reserved by the site owner. This is merely a tool to obtain the already acquirable data in a machine readable format. What you do with this data and it's legallity are entirely your responsibility.\n\n### Installation\n#### Using pip\nAssuming you have pip installed, just run the following command on the terminal\n```\npip install vlawyer\n```\n#### Manually\nClone the repository\n```\ngit clone https://github.com/hoenchioma/vlawyer.git\n```\nThen install the package\n```\ncd vlawyer\npython setup.py install\n```\n\n### Usage\nAvailable functions:\n```\nFUNCTIONS\n    get_vjudge_data(username: str = '', \n                    oj_id: str = 'All', \n                    problem_no: str = '', \n                    language: str = '', \n                    result: str = 0, \n                    contest_id: str = '', \n                    limit: int = 0)\n        Function to return vjudge based on parameters\n        \n        Parameters:\n        username (str): username to search (empty -> all usernames)\n        oj_id (str): online judge\n            options: All, CodeForces, CodeChef, Gym, LightOJ, UVA, UVALive, \n                     Kattis, AtCoder, SPOJ, TopCoder, etc.\n            (ignored if contest_id is specified)\n        problem_no (str): problem number (can be found from a problem url in vjudge)\n            (if contest id is specified, problem_no is A, B, C, etc. of contest)\n        language (str): language of submission\n            options: C, CPP, JAVA, PASCAL, PYTHON, CSHARP, RUBY, OTHER (empty -> all)\n        result (int): result of submission\n            options:\n            0 -> All\n            1 -> Accepted\n            2 -> Presentation Error\n            3 -> Wrong Answer\n            4 -> Time Limit Exceed\n            5 -> Memory Limit Exceed\n            6 -> Output Limit Exceed\n            7 -> Runtime Error\n            8 -> Compile Error\n            9 -> Unknown Error\n            10 -> Submit Error\n            11 -> Queuing && Judging\n        contest_id (str): contest id (empty -> no particular contest)\n        limit (int): maximum number of returned entries (0 -> no limit)\n        \n        Returns:\n            list: list of dictionaries containing the entries\n```\nExample:\n```python\nimport vlawyer\nimport json\n\n# prints the latest 10 submissions from vjudge.net\n# converted to json for better readability\nprint(json.dumps(vlawyer.get_vjudge_data(limit=10), indent=4, sort_keys=True)) \n\n# prints the submissions by xxx in contest no yyy\n# replace xxx with actual username and yyy with an actual contest (otherwise you'll get an error)\nprint(json.dumps(vlawyer.get_vjudge_data(username='xxx', contest_id='yyy'), indent=4, sort_keys=True))\n\nresponse = vlawyer.get_vjudge_data(limit=12)\nprint(len(response)) # get length of response (12)\nprint(type(response)) # get the type of response (dict)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hoenchioma/vlawyer", "keywords": "vjudge,virtualjudge,competitive-programming,contest", "license": "gpl-3.0", "maintainer": "", "maintainer_email": "", "name": "vlawyer", "package_url": "https://pypi.org/project/vlawyer/", "platform": "", "project_url": "https://pypi.org/project/vlawyer/", "project_urls": {"Homepage": "https://github.com/hoenchioma/vlawyer"}, "release_url": "https://pypi.org/project/vlawyer/0.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "An unofficial vjudge.net statistics API", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>vlawyer</h1>\n<p><a href=\"https://forthebadge.com\" rel=\"nofollow\"><img alt=\"forthebadge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cefdfa620eb623843291a3c32383f169b6a60e0/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6d6164652d776974682d707974686f6e2e737667\"></a></p>\n<p>An unofficial <a href=\"https://vjudge.net/\" rel=\"nofollow\">vjudge</a> statistics API</p>\n<p>You can use this package to get:</p>\n<ul>\n<li>submissions data</li>\n<li>contest standings <em>(comming soon)</em></li>\n</ul>\n<p><strong>Disclaimer:</strong> All rights to the site and its data are reserved by the site owner. This is merely a tool to obtain the already acquirable data in a machine readable format. What you do with this data and it's legallity are entirely your responsibility.</p>\n<h3>Installation</h3>\n<h4>Using pip</h4>\n<p>Assuming you have pip installed, just run the following command on the terminal</p>\n<pre><code>pip install vlawyer\n</code></pre>\n<h4>Manually</h4>\n<p>Clone the repository</p>\n<pre><code>git clone https://github.com/hoenchioma/vlawyer.git\n</code></pre>\n<p>Then install the package</p>\n<pre><code>cd vlawyer\npython setup.py install\n</code></pre>\n<h3>Usage</h3>\n<p>Available functions:</p>\n<pre><code>FUNCTIONS\n    get_vjudge_data(username: str = '', \n                    oj_id: str = 'All', \n                    problem_no: str = '', \n                    language: str = '', \n                    result: str = 0, \n                    contest_id: str = '', \n                    limit: int = 0)\n        Function to return vjudge based on parameters\n        \n        Parameters:\n        username (str): username to search (empty -&gt; all usernames)\n        oj_id (str): online judge\n            options: All, CodeForces, CodeChef, Gym, LightOJ, UVA, UVALive, \n                     Kattis, AtCoder, SPOJ, TopCoder, etc.\n            (ignored if contest_id is specified)\n        problem_no (str): problem number (can be found from a problem url in vjudge)\n            (if contest id is specified, problem_no is A, B, C, etc. of contest)\n        language (str): language of submission\n            options: C, CPP, JAVA, PASCAL, PYTHON, CSHARP, RUBY, OTHER (empty -&gt; all)\n        result (int): result of submission\n            options:\n            0 -&gt; All\n            1 -&gt; Accepted\n            2 -&gt; Presentation Error\n            3 -&gt; Wrong Answer\n            4 -&gt; Time Limit Exceed\n            5 -&gt; Memory Limit Exceed\n            6 -&gt; Output Limit Exceed\n            7 -&gt; Runtime Error\n            8 -&gt; Compile Error\n            9 -&gt; Unknown Error\n            10 -&gt; Submit Error\n            11 -&gt; Queuing &amp;&amp; Judging\n        contest_id (str): contest id (empty -&gt; no particular contest)\n        limit (int): maximum number of returned entries (0 -&gt; no limit)\n        \n        Returns:\n            list: list of dictionaries containing the entries\n</code></pre>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">vlawyer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"c1\"># prints the latest 10 submissions from vjudge.net</span>\n<span class=\"c1\"># converted to json for better readability</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">vlawyer</span><span class=\"o\">.</span><span class=\"n\">get_vjudge_data</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span> \n\n<span class=\"c1\"># prints the submissions by xxx in contest no yyy</span>\n<span class=\"c1\"># replace xxx with actual username and yyy with an actual contest (otherwise you'll get an error)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">vlawyer</span><span class=\"o\">.</span><span class=\"n\">get_vjudge_data</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'xxx'</span><span class=\"p\">,</span> <span class=\"n\">contest_id</span><span class=\"o\">=</span><span class=\"s1\">'yyy'</span><span class=\"p\">),</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">sort_keys</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">vlawyer</span><span class=\"o\">.</span><span class=\"n\">get_vjudge_data</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">))</span> <span class=\"c1\"># get length of response (12)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">))</span> <span class=\"c1\"># get the type of response (dict)</span>\n</pre>\n\n          </div>"}, "last_serial": 6834366, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "94c8c34e0b3d51ebedb22cdbc997b061", "sha256": "ac7fa7ce48dea68001e97431eff7f45d6388bdc7659e7cab023fee8608ba7e47"}, "downloads": -1, "filename": "vlawyer-0.1.tar.gz", "has_sig": false, "md5_digest": "94c8c34e0b3d51ebedb22cdbc997b061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2917, "upload_time": "2020-03-18T08:19:17", "upload_time_iso_8601": "2020-03-18T08:19:17.872605Z", "url": "https://files.pythonhosted.org/packages/bd/e8/e7ed7e8dd48fda950e1ec00553dafd5b5fabdbdc26318d1effe1ebb41ff3/vlawyer-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "1577b7d33985406765a881dafe26ee6a", "sha256": "0405c3682c23cc24d64f5afaae7b9ff0bba79cfaade966c93bcb8196cde832eb"}, "downloads": -1, "filename": "vlawyer-0.2.tar.gz", "has_sig": false, "md5_digest": "1577b7d33985406765a881dafe26ee6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4337, "upload_time": "2020-03-18T08:40:07", "upload_time_iso_8601": "2020-03-18T08:40:07.466925Z", "url": "https://files.pythonhosted.org/packages/01/8c/ee50cd2e855f32ac3309852a74f3a176583efecd2ea333103867019deff2/vlawyer-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1577b7d33985406765a881dafe26ee6a", "sha256": "0405c3682c23cc24d64f5afaae7b9ff0bba79cfaade966c93bcb8196cde832eb"}, "downloads": -1, "filename": "vlawyer-0.2.tar.gz", "has_sig": false, "md5_digest": "1577b7d33985406765a881dafe26ee6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4337, "upload_time": "2020-03-18T08:40:07", "upload_time_iso_8601": "2020-03-18T08:40:07.466925Z", "url": "https://files.pythonhosted.org/packages/01/8c/ee50cd2e855f32ac3309852a74f3a176583efecd2ea333103867019deff2/vlawyer-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:54 2020"}