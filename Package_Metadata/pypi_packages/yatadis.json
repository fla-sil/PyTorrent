{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "Yet Another Terraform Ansible Dynamic Inventory Script (yatadis)\n================================================================\n\nAn `ansible dynamic\ninventory <https://docs.ansible.com/ansible/intro_dynamic_inventory.html>`__\nscript which takes `Terraform <https://www.terraform.io/>`__ state files\nas input.\n\nIn contrast with other Terraform ansible dynamic inventory scripts, this\none aims to be configurable to match your environment. It implements\nthis using `Jinja2 <http://jinja.pocoo.org/>`__ templates to specify how\nTerraform resource attributes should be mapped onto ansible inventory\nname, group, and host\\_vars.\n\nBasic usage\n-----------\n\nAnsible calls dynamic inventory scripts with either the ``--list`` or\n``--host`` option, but no additional arguments. For that reason, yatadis\naccepts all of its options from environment variables: \\* TF\\_STATE: a\npath to a local terraform.tfstate file (default: terraform.tfstate in\nthe current directory) \\* TF\\_ANSIBLE\\_INVENTORY\\_NAME\\_TEMPLATE: a\n`Jinja2 <http://jinja.pocoo.org/>`__ template string that is applied to\neach Terraform resource to generate the ansible inventory name (default:\n``{{ resource_name }}`` which is the resource name (TYPE+NAME) from\nTerraform is guaranteed to be unique). \\* TF\\_ANSIBLE\\_GROUPS\\_TEMPLATE:\na `Jinja2 <http://jinja.pocoo.org/>`__ template string that is applied\nto each Terraform resource to generate a newline-delimited list of\nansible groups to which the resource should belong (default: ``all``\nwhich simply assigns all hosts to the ``all`` group) \\*\nTF\\_ANSIBLE\\_RESOURCE\\_FILTER\\_TEMPLATE: a\n`Jinja2 <http://jinja.pocoo.org/>`__ template string that is applied to\neach Terraform resource and should produce either ``True`` (to include\nthe resource) or ``False`` (to exclude the resource). (default:\n``{{ type in [\"aws_instance\",\"azure_instance\",\"clc_server\",\"digitalocean_droplet\",\"google_compute_instance\",\"openstack_compute_instance_v2\",\"softlayer_virtualserver\",\"triton_machine\",\"ucs_service_profile\",\"vsphere_virtual_machine\"] }}``\nwhich is suitable to limit to instance/machine resources from a variety\nof Terraform providers. \\* TF\\_ANSIBLE\\_HOST\\_VARS\\_TEMPLATE: a\n`Jinja2 <http://jinja.pocoo.org/>`__ template string that is applied to\neach Terraform resource and should generate a newline-delimited list of\nhost\\_var settings in the format ``<host_var>=<value>``. (default: a\ntemplate that will set ``ansible_host`` to the IP of the\ninstance/machine as well as setting all resource attributes prefixed\nwith ``tf_`` - see source code for details).\n\nIf you are happy with the defaults, and can arrange for the TF\\_STATE\nenvironment variable to be set to the path to the terraform.tfstate\nfile, then you can just install the yatadis.py script in the ansible\ninventory directory, make sure it is executable, and that all of the\npython modules it depends on are installed on the machine on which you\nrun ansible.\n\nIn practice, you will most likely want to call yatadis.py from a wrapper\nscript (such as a bash script) that you install into the inventory\ndirectory in place of yatadis.py itself and which sets those variables\nappropriately. For example, here is a simple shell script that simply\ninvokes yatadis.py after setting the path to the terraform.tfstate file:\n\n::\n\n    #!/bin/bash\n\n    export TF_STATE=/path/to/terraform.tfstate\n    /path/to/yatadis.py $@\n\nYou can also specify any of these options on the command line (for\ntesting purposes) - the command line argument is simply the environment\nvariable name without the \"TF\" prefix:\n\n::\n\n    ./yatadis.py --list --state /path/to/terraform.tfstate\n\nAdding terraform resources to ansible groups\n--------------------------------------------\n\nThe defaults may be all you need, as all of the primary attributes of\neach Terraform compute resource will be available in ansible as\nhost\\_vars with the prefix \"tf\\_\", and you can use ansible dynamic\ngroups (using the `group\\_by\nmodule <https://docs.ansible.com/ansible/group_by_module.html>`__ to add\nhosts to groups based on those host\\_vars values).\n\nFor example, in your site playbook you might add the following:\n\n::\n\n    - hosts: all\n      tasks:\n        - group_by: key=tf_image_{{ tf_image_name }}\n\nIf you had a resource with a Terraform image\\_name of ``ubuntu_16.04``\nthen it should now be a member of the ansible group\n``tf_image_ubuntu_16.04``\n\nAlternatively, yatadis can assign hosts to ansible groups for you\nwithout the need for ansible's dynamic group functionality.\n\nTo do this you will need to set the ``TF_ANSIBLE_GROUPS_TEMPLATE``\n`Jinja2 <http://jinja.pocoo.org/>`__ template such that it returns a\nnewline-delimited list of groups to which a host should belong.\n\nFor example, to add all instances to a group named after the resource\nprovider and prefixed with ``tf_provider_``, you could use the following\nwrapper script:\n\n::\n\n    #!/bin/bash\n    export TF_ANSIBLE_GROUPS_TEMPLATE='{{ [\"all\", \"tf_provider_\"+provider] | join(\"\\n\") }}'\n    export TF_STATE=/path/to/terraform.tfstate\n    /path/to/yatadis.py $@\n\nTemplate context\n----------------\n\nThe context provided to the Jinja2 templates is a dict-like Resource\nobject containing the same fields as the Terraform state resource\nfields. There is also an additional top-level entry called 'name' which\ncontains the resource name (i.e. the key value of the resource entry).\nFinally, in addition to the ``attributes`` section (in flattened\n'flatmap' format as it is in the Terraform state file), there is also an\n``expanded_attributes`` section alongside it which has been expanded\ninto nested dist and list structures.\n\nAdvanced host\\_vars templating\n------------------------------\n\nAs a special case, since ansible host\\_vars can contain complex data\nstructures, if the values output by the host\\_vars template are a dict\nor a list, they will be evaluated as such rather than as a string, so\nthat the resulting ansible host\\_vars entry can contain complex data\nstructures.\n\nFor example, the following (uninteresting) example would assign the\nfoo\\_dict and abc123\\_list host\\_vars to every resource:\n\n::\n\n    #!/bin/bash\n    export TF_ANSIBLE_HOST_VARS_TEMPLATE=$(cat <<EOF\n    foo_dict={'foo': 1, 'bar': 2, 'baz': 3}\n    abc123_list=['a', 'b', 'c', 1, 2, 3]\n    EOF\n    )\n    export TF_STATE=/path/to/terraform.tfstate\n    /path/to/yatadis.py $@\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wtsi-hgi/yatadis", "keywords": "", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "yatadis", "package_url": "https://pypi.org/project/yatadis/", "platform": "", "project_url": "https://pypi.org/project/yatadis/", "project_urls": {"Homepage": "https://github.com/wtsi-hgi/yatadis"}, "release_url": "https://pypi.org/project/yatadis/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Yet Another Terraform Ansible Dynamic Inventory Script", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An <a href=\"https://docs.ansible.com/ansible/intro_dynamic_inventory.html\" rel=\"nofollow\">ansible dynamic\ninventory</a>\nscript which takes <a href=\"https://www.terraform.io/\" rel=\"nofollow\">Terraform</a> state files\nas input.</p>\n<p>In contrast with other Terraform ansible dynamic inventory scripts, this\none aims to be configurable to match your environment. It implements\nthis using <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> templates to specify how\nTerraform resource attributes should be mapped onto ansible inventory\nname, group, and host_vars.</p>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>Ansible calls dynamic inventory scripts with either the <tt><span class=\"pre\">--list</span></tt> or\n<tt><span class=\"pre\">--host</span></tt> option, but no additional arguments. For that reason, yatadis\naccepts all of its options from environment variables: * TF_STATE: a\npath to a local terraform.tfstate file (default: terraform.tfstate in\nthe current directory) * TF_ANSIBLE_INVENTORY_NAME_TEMPLATE: a\n<a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template string that is applied to\neach Terraform resource to generate the ansible inventory name (default:\n<tt>{{ resource_name }}</tt> which is the resource name (TYPE+NAME) from\nTerraform is guaranteed to be unique). * TF_ANSIBLE_GROUPS_TEMPLATE:\na <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template string that is applied\nto each Terraform resource to generate a newline-delimited list of\nansible groups to which the resource should belong (default: <tt>all</tt>\nwhich simply assigns all hosts to the <tt>all</tt> group) *\nTF_ANSIBLE_RESOURCE_FILTER_TEMPLATE: a\n<a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template string that is applied to\neach Terraform resource and should produce either <tt>True</tt> (to include\nthe resource) or <tt>False</tt> (to exclude the resource). (default:\n<tt>{{ type in <span class=\"pre\">[\"aws_instance\",\"azure_instance\",\"clc_server\",\"digitalocean_droplet\",\"google_compute_instance\",\"openstack_compute_instance_v2\",\"softlayer_virtualserver\",\"triton_machine\",\"ucs_service_profile\",\"vsphere_virtual_machine\"]</span> }}</tt>\nwhich is suitable to limit to instance/machine resources from a variety\nof Terraform providers. * TF_ANSIBLE_HOST_VARS_TEMPLATE: a\n<a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template string that is applied to\neach Terraform resource and should generate a newline-delimited list of\nhost_var settings in the format <tt><span class=\"pre\">&lt;host_var&gt;=&lt;value&gt;</span></tt>. (default: a\ntemplate that will set <tt>ansible_host</tt> to the IP of the\ninstance/machine as well as setting all resource attributes prefixed\nwith <tt>tf_</tt> - see source code for details).</p>\n<p>If you are happy with the defaults, and can arrange for the TF_STATE\nenvironment variable to be set to the path to the terraform.tfstate\nfile, then you can just install the yatadis.py script in the ansible\ninventory directory, make sure it is executable, and that all of the\npython modules it depends on are installed on the machine on which you\nrun ansible.</p>\n<p>In practice, you will most likely want to call yatadis.py from a wrapper\nscript (such as a bash script) that you install into the inventory\ndirectory in place of yatadis.py itself and which sets those variables\nappropriately. For example, here is a simple shell script that simply\ninvokes yatadis.py after setting the path to the terraform.tfstate file:</p>\n<pre>#!/bin/bash\n\nexport TF_STATE=/path/to/terraform.tfstate\n/path/to/yatadis.py $@\n</pre>\n<p>You can also specify any of these options on the command line (for\ntesting purposes) - the command line argument is simply the environment\nvariable name without the \u201cTF\u201d prefix:</p>\n<pre>./yatadis.py --list --state /path/to/terraform.tfstate\n</pre>\n</div>\n<div id=\"adding-terraform-resources-to-ansible-groups\">\n<h2>Adding terraform resources to ansible groups</h2>\n<p>The defaults may be all you need, as all of the primary attributes of\neach Terraform compute resource will be available in ansible as\nhost_vars with the prefix \u201ctf_\u201d, and you can use ansible dynamic\ngroups (using the <a href=\"https://docs.ansible.com/ansible/group_by_module.html\" rel=\"nofollow\">group_by\nmodule</a> to add\nhosts to groups based on those host_vars values).</p>\n<p>For example, in your site playbook you might add the following:</p>\n<pre>- hosts: all\n  tasks:\n    - group_by: key=tf_image_{{ tf_image_name }}\n</pre>\n<p>If you had a resource with a Terraform image_name of <tt>ubuntu_16.04</tt>\nthen it should now be a member of the ansible group\n<tt>tf_image_ubuntu_16.04</tt></p>\n<p>Alternatively, yatadis can assign hosts to ansible groups for you\nwithout the need for ansible\u2019s dynamic group functionality.</p>\n<p>To do this you will need to set the <tt>TF_ANSIBLE_GROUPS_TEMPLATE</tt>\n<a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> template such that it returns a\nnewline-delimited list of groups to which a host should belong.</p>\n<p>For example, to add all instances to a group named after the resource\nprovider and prefixed with <tt>tf_provider_</tt>, you could use the following\nwrapper script:</p>\n<pre>#!/bin/bash\nexport TF_ANSIBLE_GROUPS_TEMPLATE='{{ [\"all\", \"tf_provider_\"+provider] | join(\"\\n\") }}'\nexport TF_STATE=/path/to/terraform.tfstate\n/path/to/yatadis.py $@\n</pre>\n</div>\n<div id=\"template-context\">\n<h2>Template context</h2>\n<p>The context provided to the Jinja2 templates is a dict-like Resource\nobject containing the same fields as the Terraform state resource\nfields. There is also an additional top-level entry called \u2018name\u2019 which\ncontains the resource name (i.e. the key value of the resource entry).\nFinally, in addition to the <tt>attributes</tt> section (in flattened\n\u2018flatmap\u2019 format as it is in the Terraform state file), there is also an\n<tt>expanded_attributes</tt> section alongside it which has been expanded\ninto nested dist and list structures.</p>\n</div>\n<div id=\"advanced-host-vars-templating\">\n<h2>Advanced host_vars templating</h2>\n<p>As a special case, since ansible host_vars can contain complex data\nstructures, if the values output by the host_vars template are a dict\nor a list, they will be evaluated as such rather than as a string, so\nthat the resulting ansible host_vars entry can contain complex data\nstructures.</p>\n<p>For example, the following (uninteresting) example would assign the\nfoo_dict and abc123_list host_vars to every resource:</p>\n<pre>#!/bin/bash\nexport TF_ANSIBLE_HOST_VARS_TEMPLATE=$(cat &lt;&lt;EOF\nfoo_dict={'foo': 1, 'bar': 2, 'baz': 3}\nabc123_list=['a', 'b', 'c', 1, 2, 3]\nEOF\n)\nexport TF_STATE=/path/to/terraform.tfstate\n/path/to/yatadis.py $@\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2906720, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "b8865bba69aa78cd132cf9e8793e4328", "sha256": "5b17ee34a8a60c413f4bb8fdbc3258e6d69b00a383b5a2f8e15676a01d13f2b2"}, "downloads": -1, "filename": "yatadis-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b8865bba69aa78cd132cf9e8793e4328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22587, "upload_time": "2017-05-29T15:31:26", "upload_time_iso_8601": "2017-05-29T15:31:26.255166Z", "url": "https://files.pythonhosted.org/packages/56/3d/1c3782137d90ba4ceae58aea15174d19f63416963baaa74178a5ae303050/yatadis-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8865bba69aa78cd132cf9e8793e4328", "sha256": "5b17ee34a8a60c413f4bb8fdbc3258e6d69b00a383b5a2f8e15676a01d13f2b2"}, "downloads": -1, "filename": "yatadis-0.4.1.tar.gz", "has_sig": false, "md5_digest": "b8865bba69aa78cd132cf9e8793e4328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22587, "upload_time": "2017-05-29T15:31:26", "upload_time_iso_8601": "2017-05-29T15:31:26.255166Z", "url": "https://files.pythonhosted.org/packages/56/3d/1c3782137d90ba4ceae58aea15174d19f63416963baaa74178a5ae303050/yatadis-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:22:44 2020"}