{"info": {"author": "Pawe\u0142 Kowalski", "author_email": "makr3la@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Software Development :: Libraries"], "description": "filib\n=====\n\n.. image:: https://img.shields.io/pypi/pyversions/filib\n    :target: https://pypi.org/project/filib/\n    :alt: PyPI - Python Version\n\n.. image:: https://img.shields.io/pypi/v/filib\n    :target: https://pypi.org/project/filib/\n    :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/status/filib\n    :target: https://pypi.org/project/filib/\n    :alt: PyPI - Status\n\n.. image:: https://img.shields.io/github/license/makr3la/filib\n    :target: https://github.com/makr3la/filib/blob/master/LICENSE\n    :alt: GitHub\n\n.. image:: https://github.com/makr3la/filib/workflows/CI/badge.svg\n    :target: https://github.com/makr3la/filib/actions?query=workflow%3ACI+branch%3Amaster\n    :alt: CI - Status\n\n`Factor Investing <https://en.wikipedia.org/wiki/Factor_investing>`_\nLIBrary is a lightweight algorithmic trading Python library built for easy\ntesting of predictive factors and portfolio rebalance via\n`Oanda <https://www.oanda.com/>`_. Inspired by and compatible with\n`Quantopian Open Source <https://www.quantopian.com/opensource>`_.\n\n`Changelog \u00bb <https://github.com/makr3la/filib/releases>`_\n\nInstallation\n------------\n\nInstall with `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code:: bash\n\n    $ pip install filib\n\nUsage\n-----\n\nProposed workflow contains three steps. Here's an example:\n\n1. Assemble\n^^^^^^^^^^^\n\nBegin with imports, then hypothesize and create predictive factors as class methods:\n\n.. code:: python\n\n    from filib.oanda import Oanda  # Currently only Oanda is available\n    from filib.helpers import *    # Optional functions, useful for factor generation\n\n\n    class MyFactors(Oanda):\n\n        def momentum(self):  # HYPOTHESIS: there is persistence in an asset's performance\n            factor = self.returns\n            split = [-1, -.003, .003, 1]  # List of thresholds or int to split equally\n            return factor, split  # Always return at least factor and follow this order\n\n        def relative_strenght_index(self):  # H: signal oversold or overbought assets\n            import pandas as pd\n            import pandas_ta as ta  # Example Technical Analysis Library\n            factor = pd.DataFrame({\n                instrument: self.price_data[instrument].ta.rsi(length=14)\n                for instrument, _ in self.price_data\n            }) * -1  # Short low factor values and long high factor values\n            split = [-100, -70, -30, 0]\n            return factor, split\n\n        def big_mac_index(self):  # H: simplified Purchasing Power Parity theory\n            import quandl  # Example Financial, Economic and Alternative Data Library\n            iso_codes = get_iso_codes(self.price_data)\n            codes = [f'ECONOMIST/BIGMAC_{COUNTRY}.5' for COUNTRY in iso_codes]\n            factor = quandl.get(codes).dropna(how='all', axis=1)\n            factor.columns = [iso_codes[c.split('_')[1].split()[0]] for c in factor]\n            factor.index = factor.index.tz_localize('UTC')  # Convert time zone to UTC\n            return factor  # If not specified split = 3 by default\n\n2. Research\n^^^^^^^^^^^\n\nInitialize parameters (during the first run you will be asked to provide credentials):\n\n.. code:: python\n\n    research = MyFactors(\n        instruments = ['EUR_USD', 'GBP_USD', 'USD_JPY', 'AUD_USD', 'NZD_USD',\n                       'USD_CAD', 'USD_CHF', 'USD_NOK', 'USD_SEK'],  # Define universe\n        granularity = 'D',    # Time range between rebalancing and between each candle\n        count = 500,          # Number of historical candles to return for analysis\n        symbol = 'USD',       # Optional, specify symbol to arrange your price data\n        periods = (1, 2, 3),  # Optional, specify periods to analyze factor decay\n        split = 3,            # Number of quantiles to split your combined factor data\n        long_short = True,    # Trade only top and bottom quantile of combined factor\n        combination = 'sum_of_weights')  # Select factor combination method\n\nCheck the performance of factors combined together:\n\n.. code::\n\n    >>> research.performance()\n    ...\n    MyFactors - INFO - Factor `MyFactors_combined` Analytics:\n\n                       Min    Max   Mean   Size Returns (bps)\n                    factor factor factor factor            1D     2D     3D\n    factor_quantile\n    1.0             -1.131  0.009 -0.238   1299        -0.551 -1.292 -0.845\n    2.0             -0.206  0.331  0.004   1213        -1.411 -2.811 -3.009\n    3.0              0.000  1.125  0.247   1232        -0.663 -1.289 -3.189\n\n                                   1D     2D     3D\n    - Information Coefficient:  0.005 -0.001 -0.007\n    - Factor Rank Autocorrelation: 0.09\n\n    - Annualized Sharpe Ratio: -0.46\n    - Annualized Alpha (Beta): -0.011 (0.119)\n    - Win Rate: 48.32%\n    - Risk / Reward: 0.99\n    - Profit Factor: 0.92\n\n    - Start Date: 2018-08-07\n    - End Date: 2020-03-10\n    - Duration: 581 days 00:00:00 (1.6 years)\n    - Rebalance every: 1D\n\n    - Compound Annual Growth Rate: -1.39%\n    - Annualized Volatility: 2.94%\n    - Maximum Drawdown: -4.09%\n    - Maximum Drawdown Duration: 23 days 00:00:00\n    ...\n\nAlternatively set selection rules with a\n`query <https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html>`_\nstring to evaluate. Available metrics are:\n\n- **ic**: Information Coefficient based on Spearman's Rank Correlation\n- **autocorr**: Factor Rank Autocorrelation\n- **sharpe**: Annualized Sharpe Ratio\n- **beta**: Annualized Beta as exposure to trading universe\n- **alpha**: Annualized Alpha as excess returns over trading universe\n- **win**: Win Rate\n- **rr**: Risk / Reward Ratio\n- **profit**: Profit Factor = (sum of earnings) / (sum of losses)\n- **cagr**: Compound Annual Growth Rate\n\nThen analyze the performance of individual factors and select those that meet the rules:\n\n.. code::\n\n    >>> research.select(\n    ...     rules = 'abs(ic) > .01 or profit > 1',  # Example query expression\n    ...     swap = 'cagr')  # Align the signs of selected factors to specified metric\n    ...\n    MyFactors - INFO - Factors with signs that meet the rules `abs(ic) > .01 or profit > 1`:\n\n    momentum                  -1.0\n    relative_strenght_index    1.0\n\n\n    MyFactors - INFO - Factor `MyFactors_selected` Analytics:\n\n                       Min    Max   Mean   Size Returns (bps)\n                    factor factor factor factor            1D     2D     3D\n    factor_quantile\n    1.0             -1.000  0.026 -0.107   1815        -1.972 -3.022 -4.282\n    2.0             -0.152  1.000  0.095    757         2.189  3.523  3.425\n    3.0              0.000  0.880  0.222    551         1.257 -0.077  1.388\n\n                                   1D    2D     3D\n    - Information Coefficient:  0.017  0.01  0.016\n    - Factor Rank Autocorrelation: 0.04\n\n    - Annualized Sharpe Ratio: 0.30\n    - Annualized Alpha (Beta): 0.011 (0.025)\n    - Win Rate: 44.71%\n    - Risk / Reward: 0.92\n    - Profit Factor: 1.06\n\n    - Start Date: 2018-08-07\n    - End Date: 2020-03-10\n    - Duration: 581 days 00:00:00 (1.6 years)\n    - Rebalance every: 1D\n\n    - Compound Annual Growth Rate: 1.02%\n    - Annualized Volatility: 3.61%\n    - Maximum Drawdown: -4.34%\n    - Maximum Drawdown Duration: 371 days 00:00:00\n    ...\n\n3. Trade\n^^^^^^^^\n\nExecute or schedule a script to rebalance your portfolio based on selected factors:\n\n**PLEASE USE AT YOUR OWN RISK - THIS CAN TRADE REAL MONEY - NO WARRANTY IS GIVEN**\n\n.. code:: python\n\n    # strategy.py\n    from filib.oanda import Oanda\n\n\n    class SelectedFactors(Oanda):\n\n        def momentum(self):\n            factor = self.returns * -1.0  # Sign from the research\n            split = [-1, -.003, .003, 1]\n            return factor, split\n\n        def relative_strenght_index(self):\n            import pandas as pd\n            import pandas_ta as ta\n            factor = pd.DataFrame({\n                instrument: self.price_data[instrument].ta.rsi(length=14)\n                for instrument, _ in self.price_data\n            }) * -1\n            split = [-100, -70, -30, 0]\n            return factor, split\n\n\n    if __name__ == \"__main__\":\n\n        strategy = SelectedFactors(\n            instruments = ['EUR_USD', 'GBP_USD', 'USD_JPY', 'AUD_USD', 'NZD_USD',\n                           'USD_CAD', 'USD_CHF', 'USD_NOK', 'USD_SEK'],\n            granularity = 'D',\n            count = 250,\n            symbol = 'USD',\n            split = 3,\n            accountID = '',  # Your Oanda's account ID for creating orders\n            leverage = 7,    # Set the leverage for the portfolio positions\n            long_short = True,\n            combination = 'sum_of_weights')\n\n        strategy.rebalance(live=True)  # Actually place orders\n\nCheck portfolio positions and generated orders in a log file or by dry run:\n\n.. code::\n\n    >>> strategy.rebalance()\n    SelectedFactors - INFO - Portfolio from `2020-03-11 00:00:00+00:00`:\n\n    CHF    -38.4%\n    SEK     -8.1%\n    EUR     -3.5%\n    GBP      0.0%\n    NOK      0.0%\n    NZD      0.0%\n    AUD     13.9%\n    CAD     15.7%\n    JPY     20.4%\n\n    - Account NAV: 10000.00 EUR\n    - Position Value: 0.00\n    - Needed Orders:\n\n    USD_CHF    30410\n    USD_SEK     6430\n    EUR_USD    -2430\n    AUD_USD    16860\n    USD_CAD   -12450\n    USD_JPY   -16140\n\nContributing\n------------\n\nPull requests are welcome. For major changes, please open an issue first to\ndiscuss what you would like to change.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/makr3la/filib", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "filib", "package_url": "https://pypi.org/project/filib/", "platform": "", "project_url": "https://pypi.org/project/filib/", "project_urls": {"Bug Tracker": "https://github.com/makr3la/filib/issues", "Homepage": "https://github.com/makr3la/filib", "Source Code": "https://github.com/makr3la/filib"}, "release_url": "https://pypi.org/project/filib/0.3.0/", "requires_dist": ["pandas"], "requires_python": ">=3.6", "summary": "Factor Investing Library", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/filib/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f389ceb3933ef440a5eeb20a57d23730832af5e7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66696c6962\"></a>\n<a href=\"https://pypi.org/project/filib/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8732f31030354a68e1c04e822b39d0fa107c94b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66696c6962\"></a>\n<a href=\"https://pypi.org/project/filib/\" rel=\"nofollow\"><img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fbbcdf1db3756ed27dfe3a43cd95213a6e35d92/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f66696c6962\"></a>\n<a href=\"https://github.com/makr3la/filib/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6441ee8b46cb71027c7b233c0a46a2d1b1ea231e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d616b72336c612f66696c6962\"></a>\n<a href=\"https://github.com/makr3la/filib/actions?query=workflow%3ACI+branch%3Amaster\" rel=\"nofollow\"><img alt=\"CI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9db3377fe2177937028c8dac0e665ef09759a7cb/68747470733a2f2f6769746875622e636f6d2f6d616b72336c612f66696c69622f776f726b666c6f77732f43492f62616467652e737667\"></a>\n<p><a href=\"https://en.wikipedia.org/wiki/Factor_investing\" rel=\"nofollow\">Factor Investing</a>\nLIBrary is a lightweight algorithmic trading Python library built for easy\ntesting of predictive factors and portfolio rebalance via\n<a href=\"https://www.oanda.com/\" rel=\"nofollow\">Oanda</a>. Inspired by and compatible with\n<a href=\"https://www.quantopian.com/opensource\" rel=\"nofollow\">Quantopian Open Source</a>.</p>\n<p><a href=\"https://github.com/makr3la/filib/releases\" rel=\"nofollow\">Changelog \u00bb</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install with <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install filib\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Proposed workflow contains three steps. Here\u2019s an example:</p>\n<div id=\"assemble\">\n<h3>1. Assemble</h3>\n<p>Begin with imports, then hypothesize and create predictive factors as class methods:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">filib.oanda</span> <span class=\"kn\">import</span> <span class=\"n\">Oanda</span>  <span class=\"c1\"># Currently only Oanda is available</span>\n<span class=\"kn\">from</span> <span class=\"nn\">filib.helpers</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>    <span class=\"c1\"># Optional functions, useful for factor generation</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFactors</span><span class=\"p\">(</span><span class=\"n\">Oanda</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">momentum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># HYPOTHESIS: there is persistence in an asset's performance</span>\n        <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returns</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-.</span><span class=\"mi\">003</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">003</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># List of thresholds or int to split equally</span>\n        <span class=\"k\">return</span> <span class=\"n\">factor</span><span class=\"p\">,</span> <span class=\"n\">split</span>  <span class=\"c1\"># Always return at least factor and follow this order</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">relative_strenght_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># H: signal oversold or overbought assets</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas_ta</span> <span class=\"k\">as</span> <span class=\"nn\">ta</span>  <span class=\"c1\"># Example Technical Analysis Library</span>\n        <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n            <span class=\"n\">instrument</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">price_data</span><span class=\"p\">[</span><span class=\"n\">instrument</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">rsi</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">instrument</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">price_data</span>\n        <span class=\"p\">})</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"mi\">1</span>  <span class=\"c1\"># Short low factor values and long high factor values</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">factor</span><span class=\"p\">,</span> <span class=\"n\">split</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">big_mac_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># H: simplified Purchasing Power Parity theory</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">quandl</span>  <span class=\"c1\"># Example Financial, Economic and Alternative Data Library</span>\n        <span class=\"n\">iso_codes</span> <span class=\"o\">=</span> <span class=\"n\">get_iso_codes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">price_data</span><span class=\"p\">)</span>\n        <span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s1\">'ECONOMIST/BIGMAC_</span><span class=\"si\">{</span><span class=\"n\">COUNTRY</span><span class=\"si\">}</span><span class=\"s1\">.5'</span> <span class=\"k\">for</span> <span class=\"n\">COUNTRY</span> <span class=\"ow\">in</span> <span class=\"n\">iso_codes</span><span class=\"p\">]</span>\n        <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"n\">quandl</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">'all'</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">factor</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">iso_codes</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">factor</span><span class=\"p\">]</span>\n        <span class=\"n\">factor</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">factor</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">tz_localize</span><span class=\"p\">(</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span>  <span class=\"c1\"># Convert time zone to UTC</span>\n        <span class=\"k\">return</span> <span class=\"n\">factor</span>  <span class=\"c1\"># If not specified split = 3 by default</span>\n</pre>\n</div>\n<div id=\"research\">\n<h3>2. Research</h3>\n<p>Initialize parameters (during the first run you will be asked to provide credentials):</p>\n<pre><span class=\"n\">research</span> <span class=\"o\">=</span> <span class=\"n\">MyFactors</span><span class=\"p\">(</span>\n    <span class=\"n\">instruments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'EUR_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'GBP_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_JPY'</span><span class=\"p\">,</span> <span class=\"s1\">'AUD_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'NZD_USD'</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'USD_CAD'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_CHF'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_NOK'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_SEK'</span><span class=\"p\">],</span>  <span class=\"c1\"># Define universe</span>\n    <span class=\"n\">granularity</span> <span class=\"o\">=</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span>    <span class=\"c1\"># Time range between rebalancing and between each candle</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">,</span>          <span class=\"c1\"># Number of historical candles to return for analysis</span>\n    <span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'USD'</span><span class=\"p\">,</span>       <span class=\"c1\"># Optional, specify symbol to arrange your price data</span>\n    <span class=\"n\">periods</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span>  <span class=\"c1\"># Optional, specify periods to analyze factor decay</span>\n    <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>            <span class=\"c1\"># Number of quantiles to split your combined factor data</span>\n    <span class=\"n\">long_short</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>    <span class=\"c1\"># Trade only top and bottom quantile of combined factor</span>\n    <span class=\"n\">combination</span> <span class=\"o\">=</span> <span class=\"s1\">'sum_of_weights'</span><span class=\"p\">)</span>  <span class=\"c1\"># Select factor combination method</span>\n</pre>\n<p>Check the performance of factors combined together:</p>\n<pre>&gt;&gt;&gt; research.performance()\n...\nMyFactors - INFO - Factor `MyFactors_combined` Analytics:\n\n                   Min    Max   Mean   Size Returns (bps)\n                factor factor factor factor            1D     2D     3D\nfactor_quantile\n1.0             -1.131  0.009 -0.238   1299        -0.551 -1.292 -0.845\n2.0             -0.206  0.331  0.004   1213        -1.411 -2.811 -3.009\n3.0              0.000  1.125  0.247   1232        -0.663 -1.289 -3.189\n\n                               1D     2D     3D\n- Information Coefficient:  0.005 -0.001 -0.007\n- Factor Rank Autocorrelation: 0.09\n\n- Annualized Sharpe Ratio: -0.46\n- Annualized Alpha (Beta): -0.011 (0.119)\n- Win Rate: 48.32%\n- Risk / Reward: 0.99\n- Profit Factor: 0.92\n\n- Start Date: 2018-08-07\n- End Date: 2020-03-10\n- Duration: 581 days 00:00:00 (1.6 years)\n- Rebalance every: 1D\n\n- Compound Annual Growth Rate: -1.39%\n- Annualized Volatility: 2.94%\n- Maximum Drawdown: -4.09%\n- Maximum Drawdown Duration: 23 days 00:00:00\n...\n</pre>\n<p>Alternatively set selection rules with a\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html\" rel=\"nofollow\">query</a>\nstring to evaluate. Available metrics are:</p>\n<ul>\n<li><strong>ic</strong>: Information Coefficient based on Spearman\u2019s Rank Correlation</li>\n<li><strong>autocorr</strong>: Factor Rank Autocorrelation</li>\n<li><strong>sharpe</strong>: Annualized Sharpe Ratio</li>\n<li><strong>beta</strong>: Annualized Beta as exposure to trading universe</li>\n<li><strong>alpha</strong>: Annualized Alpha as excess returns over trading universe</li>\n<li><strong>win</strong>: Win Rate</li>\n<li><strong>rr</strong>: Risk / Reward Ratio</li>\n<li><strong>profit</strong>: Profit Factor = (sum of earnings) / (sum of losses)</li>\n<li><strong>cagr</strong>: Compound Annual Growth Rate</li>\n</ul>\n<p>Then analyze the performance of individual factors and select those that meet the rules:</p>\n<pre>&gt;&gt;&gt; research.select(\n...     rules = 'abs(ic) &gt; .01 or profit &gt; 1',  # Example query expression\n...     swap = 'cagr')  # Align the signs of selected factors to specified metric\n...\nMyFactors - INFO - Factors with signs that meet the rules `abs(ic) &gt; .01 or profit &gt; 1`:\n\nmomentum                  -1.0\nrelative_strenght_index    1.0\n\n\nMyFactors - INFO - Factor `MyFactors_selected` Analytics:\n\n                   Min    Max   Mean   Size Returns (bps)\n                factor factor factor factor            1D     2D     3D\nfactor_quantile\n1.0             -1.000  0.026 -0.107   1815        -1.972 -3.022 -4.282\n2.0             -0.152  1.000  0.095    757         2.189  3.523  3.425\n3.0              0.000  0.880  0.222    551         1.257 -0.077  1.388\n\n                               1D    2D     3D\n- Information Coefficient:  0.017  0.01  0.016\n- Factor Rank Autocorrelation: 0.04\n\n- Annualized Sharpe Ratio: 0.30\n- Annualized Alpha (Beta): 0.011 (0.025)\n- Win Rate: 44.71%\n- Risk / Reward: 0.92\n- Profit Factor: 1.06\n\n- Start Date: 2018-08-07\n- End Date: 2020-03-10\n- Duration: 581 days 00:00:00 (1.6 years)\n- Rebalance every: 1D\n\n- Compound Annual Growth Rate: 1.02%\n- Annualized Volatility: 3.61%\n- Maximum Drawdown: -4.34%\n- Maximum Drawdown Duration: 371 days 00:00:00\n...\n</pre>\n</div>\n<div id=\"trade\">\n<h3>3. Trade</h3>\n<p>Execute or schedule a script to rebalance your portfolio based on selected factors:</p>\n<p><strong>PLEASE USE AT YOUR OWN RISK - THIS CAN TRADE REAL MONEY - NO WARRANTY IS GIVEN</strong></p>\n<pre><span class=\"c1\"># strategy.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">filib.oanda</span> <span class=\"kn\">import</span> <span class=\"n\">Oanda</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SelectedFactors</span><span class=\"p\">(</span><span class=\"n\">Oanda</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">momentum</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returns</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"mf\">1.0</span>  <span class=\"c1\"># Sign from the research</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-.</span><span class=\"mi\">003</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">003</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">factor</span><span class=\"p\">,</span> <span class=\"n\">split</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">relative_strenght_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">pandas_ta</span> <span class=\"k\">as</span> <span class=\"nn\">ta</span>\n        <span class=\"n\">factor</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n            <span class=\"n\">instrument</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">price_data</span><span class=\"p\">[</span><span class=\"n\">instrument</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ta</span><span class=\"o\">.</span><span class=\"n\">rsi</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">instrument</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">price_data</span>\n        <span class=\"p\">})</span> <span class=\"o\">*</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">factor</span><span class=\"p\">,</span> <span class=\"n\">split</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n    <span class=\"n\">strategy</span> <span class=\"o\">=</span> <span class=\"n\">SelectedFactors</span><span class=\"p\">(</span>\n        <span class=\"n\">instruments</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'EUR_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'GBP_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_JPY'</span><span class=\"p\">,</span> <span class=\"s1\">'AUD_USD'</span><span class=\"p\">,</span> <span class=\"s1\">'NZD_USD'</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'USD_CAD'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_CHF'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_NOK'</span><span class=\"p\">,</span> <span class=\"s1\">'USD_SEK'</span><span class=\"p\">],</span>\n        <span class=\"n\">granularity</span> <span class=\"o\">=</span> <span class=\"s1\">'D'</span><span class=\"p\">,</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n        <span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'USD'</span><span class=\"p\">,</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"n\">accountID</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>  <span class=\"c1\"># Your Oanda's account ID for creating orders</span>\n        <span class=\"n\">leverage</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">,</span>    <span class=\"c1\"># Set the leverage for the portfolio positions</span>\n        <span class=\"n\">long_short</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">combination</span> <span class=\"o\">=</span> <span class=\"s1\">'sum_of_weights'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">rebalance</span><span class=\"p\">(</span><span class=\"n\">live</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Actually place orders</span>\n</pre>\n<p>Check portfolio positions and generated orders in a log file or by dry run:</p>\n<pre>&gt;&gt;&gt; strategy.rebalance()\nSelectedFactors - INFO - Portfolio from `2020-03-11 00:00:00+00:00`:\n\nCHF    -38.4%\nSEK     -8.1%\nEUR     -3.5%\nGBP      0.0%\nNOK      0.0%\nNZD      0.0%\nAUD     13.9%\nCAD     15.7%\nJPY     20.4%\n\n- Account NAV: 10000.00 EUR\n- Position Value: 0.00\n- Needed Orders:\n\nUSD_CHF    30410\nUSD_SEK     6430\nEUR_USD    -2430\nAUD_USD    16860\nUSD_CAD   -12450\nUSD_JPY   -16140\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to\ndiscuss what you would like to change.</p>\n</div>\n\n          </div>"}, "last_serial": 7156760, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "78cc2d80052c9d8b32e41054c9730658", "sha256": "9d0834adc90f0d55a4c09fffdff97ef6ab5beaeab0aab299fa5303134fb4ff77"}, "downloads": -1, "filename": "filib-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "78cc2d80052c9d8b32e41054c9730658", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16105, "upload_time": "2020-02-12T22:46:21", "upload_time_iso_8601": "2020-02-12T22:46:21.817111Z", "url": "https://files.pythonhosted.org/packages/3b/d3/b218e1d519388e085d0187b548d01f8d55b9b361e66b158626f5336a4cc7/filib-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae1c2aeb7fc2e1e3a1d1436695835ba3", "sha256": "20c0c0f6ab06c84933a404cf0624de90bc00d16fd0ec6ae1371fb0fa89f85c50"}, "downloads": -1, "filename": "filib-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae1c2aeb7fc2e1e3a1d1436695835ba3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32547, "upload_time": "2020-02-12T22:46:19", "upload_time_iso_8601": "2020-02-12T22:46:19.585666Z", "url": "https://files.pythonhosted.org/packages/b3/f3/28a42a94d6079c9f711af7642f49ea1cea40541cb05ecdb461998def6774/filib-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b06331dbafa40cae2350ead39b07df5e", "sha256": "feb090b9cf8cc24c8b538c530ab397a92ce98f689f233b93e64f5cdd69e9bdb9"}, "downloads": -1, "filename": "filib-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b06331dbafa40cae2350ead39b07df5e", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 18371, "upload_time": "2020-03-11T21:37:48", "upload_time_iso_8601": "2020-03-11T21:37:48.168821Z", "url": "https://files.pythonhosted.org/packages/80/43/fd5abd4475a1ae26f1bdf2ee10b86a5be4e35a2221125e36a9c9156f2965/filib-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acc7a3de3ec3aff9fd89b6f9b1f034b2", "sha256": "af1ac1d95a6025d809fbb831da9d89898050c4430927f292e6627fcab70a63f5"}, "downloads": -1, "filename": "filib-0.2.0.tar.gz", "has_sig": false, "md5_digest": "acc7a3de3ec3aff9fd89b6f9b1f034b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36586, "upload_time": "2020-03-11T21:37:45", "upload_time_iso_8601": "2020-03-11T21:37:45.755590Z", "url": "https://files.pythonhosted.org/packages/69/01/860e0890f60b1afb8f0024f9ab2c9f6ca4c733a91867e1dfcb6d399d7e7e/filib-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "693cc790d3619907fd45166382c451ec", "sha256": "7f1353b3474854f1aebd9ed951ff2296968022dcea607adb0cec528336f31881"}, "downloads": -1, "filename": "filib-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "693cc790d3619907fd45166382c451ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18573, "upload_time": "2020-05-03T13:00:56", "upload_time_iso_8601": "2020-05-03T13:00:56.496285Z", "url": "https://files.pythonhosted.org/packages/80/a5/f34a846e145a78613dcec64409aa0148ccc888dc7c95f44a1df9f8e42ee0/filib-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad459383888b9ba05d2b06e2b8d22cf", "sha256": "60d9659d42348d1b1ec079e53b158f9edec4d93e1e4ee265ce8130696ef12407"}, "downloads": -1, "filename": "filib-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bad459383888b9ba05d2b06e2b8d22cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24059, "upload_time": "2020-05-03T13:00:57", "upload_time_iso_8601": "2020-05-03T13:00:57.790508Z", "url": "https://files.pythonhosted.org/packages/ba/1c/87f1f961710443ff0142bc193f408263aaf427779550cfa7bc156a09729a/filib-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "693cc790d3619907fd45166382c451ec", "sha256": "7f1353b3474854f1aebd9ed951ff2296968022dcea607adb0cec528336f31881"}, "downloads": -1, "filename": "filib-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "693cc790d3619907fd45166382c451ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18573, "upload_time": "2020-05-03T13:00:56", "upload_time_iso_8601": "2020-05-03T13:00:56.496285Z", "url": "https://files.pythonhosted.org/packages/80/a5/f34a846e145a78613dcec64409aa0148ccc888dc7c95f44a1df9f8e42ee0/filib-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad459383888b9ba05d2b06e2b8d22cf", "sha256": "60d9659d42348d1b1ec079e53b158f9edec4d93e1e4ee265ce8130696ef12407"}, "downloads": -1, "filename": "filib-0.3.0.tar.gz", "has_sig": false, "md5_digest": "bad459383888b9ba05d2b06e2b8d22cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24059, "upload_time": "2020-05-03T13:00:57", "upload_time_iso_8601": "2020-05-03T13:00:57.790508Z", "url": "https://files.pythonhosted.org/packages/ba/1c/87f1f961710443ff0142bc193f408263aaf427779550cfa7bc156a09729a/filib-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:30 2020"}