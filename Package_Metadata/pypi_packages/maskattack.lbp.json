{"info": {"author": "Nesli Erdogmus", "author_email": "nesli.erdogmus@idiap.ch", "bugtrack_url": null, "classifiers": [], "description": "=============================================================================\n Counter-Measures to 3D Facial Mask Attacks using Local Binary Patterns (LBP)\n=============================================================================\n\nThis package implements the LBP counter-measure to spoofing attacks with 3d masks to 2d face recognition systems as described in the paper `Spoofing in 2D Face Recognition with 3D Masks and Anti-spoofing with Kinect`, by N. Erdogmus and S. Marcel, presented at BTAS 2013.\n\nIf you use this package and/or its results, please cite the following publications:\n\n1. The original paper with the counter-measure explained in details::\n\n    @INPROCEEDINGS{Erdogmus_BTAS_2013,\n    author = {Erdogmus, Nesli and Marcel, S{\\'{e}}bastien},\n    keywords = {3D Mask Attack, Counter-Measures, Counter-Spoofing, Face Recognition, Liveness Detection, Replay, Spoofing},\n    month = sep,\n    title = {Spoofing in 2D Face Recognition with 3D Masks and Anti-spoofing with Kinect},\n    journal = {BTAS 2013},\n    year = {2013},\n    }\n \n2. Bob as the core framework used to run the experiments::\n\n    @inproceedings{Anjos_ACMMM_2012,\n        author = {A. Anjos AND L. El Shafey AND R. Wallace AND M. G\\\"unther AND C. McCool AND S. Marcel},\n        title = {Bob: a free signal processing and machine learning toolbox for researchers},\n        year = {2012},\n        month = oct,\n        booktitle = {20th ACM Conference on Multimedia Systems (ACMMM), Nara, Japan},\n        publisher = {ACM Press},\n    }\n\nIf you wish to report problems or improvements concerning this code, please contact the authors of the above mentioned papers.\n\nRaw data\n--------\n\nThe data used in the paper is publicly available and should be downloaded and installed **prior** to try using the programs described in this package. Visit `the 3D MASK ATTACK database portal <https://www.idiap.ch/dataset/3dmad>`_ for more information.\n\nInstallation\n------------\n\n.. note:: \n\n  If you are reading this page through our GitHub portal and not through PyPI, note **the development tip of the package may not be stable** or become unstable in a matter of moments.\n\n  Go to `http://pypi.python.org/pypi/maskattack.lbp  <http://pypi.python.org/pypi/maskattack.lbp>`_ to download the latest stable version of this package.\n\nThere are 2 options you can follow to get this package installed and operational on your computer: you can use automatic installers like `pip <http://pypi.python.org/pypi/pip/>`_ (or `easy_install <http://pypi.python.org/pypi/setuptools>`_) or manually download, unpack and use `zc.buildout <http://pypi.python.org/pypi/zc.buildout>`_ to create a virtual work environment just for this package.\n\nUsing an automatic installer\n============================\n\nUsing ``pip`` is the easiest (shell commands are marked with a ``$`` signal)::\n\n  $ pip install maskattack.lbp\n\nYou can also do the same with ``easy_install``::\n\n  $ easy_install maskattack.lbp\n\nThis will download and install this package plus any other required dependencies. It will also verify if the version of Bob you have installed is compatible.\n\nThis scheme works well with virtual environments by `virtualenv <http://pypi.python.org/pypi/virtualenv>`_ or if you have root access to your machine. Otherwise, we recommend you use the next option.\n\nUsing ``zc.buildout``\n=====================\n\nDownload the latest version of this package from `PyPI <http://pypi.python.org/pypi/maskattack.lbp>`_ and unpack it in your working area. The installation of the toolkit itself uses `buildout <http://www.buildout.org/>`_. You don't need to understand its inner workings to use this package. Here is a recipe to get you started::\n  \n  $ python bootstrap.py \n  $ ./bin/buildout\n\nThese 2 commands should download and install all non-installed dependencies and get you a fully operational test and development environment.\n\n.. note::\n\n  The python shell used in the first line of the previous command set determines the python interpreter that will be used for all scripts developed inside this package. Because this package makes use of `Bob <http://idiap.github.com/bob>`_, you must make sure that the ``bootstrap.py`` script is called with the **same** interpreter used to build Bob, or unexpected problems might occur.\n\n  If Bob is installed by the administrator of your system, it is safe to consider it uses the default python interpreter. In this case, the above 3 command lines should work as expected. If you have Bob installed somewhere else on a private directory, edit the file ``buildout.cfg`` **before** running ``./bin/buildout``. Find the section named ``external`` and edit the line ``egg-directories`` to point to the ``lib`` directory of the Bob installation you want to use. For example::\n\n    [external]\n    recipe = xbob.buildout:external\n    egg-directories=/Users/crazyfox/work/bob/build/lib\n\nUser Guide\n----------\n\nThis section explains how to use the package in order to: a) calculate the LBP features on the 3D Mask Attack database; b) perform classification using Chi-2, Linear Discriminant Analysis (LDA) and Support Vector Machines (SVM).\n\nIt is assumed you have followed the installation instructions for the package, and got the required database downloaded and uncompressed in a directory. After running the ``buildout`` command, you should have all required utilities sitting inside the ``bin`` directory. We expect that the video files of the database are installed in a sub-directory called ``database`` at the root of the package. You can use a link to the location of the database files, if you don't want to have the database installed on the root of this package::\n\n  $ ln -s /path/where/you/installed/the/database database\n\nIf you don't want to create a link, use the ``--input-dir`` flag (available in all the scripts) to specify the root directory containing the database files.\n\nCalculate the LBP features\n==========================\n\nThe first stage of the process is calculating the feature vectors, which are essentially normalized LBP histograms. A single feature vector for each frame of the video (both for the depth and color images) is computed and saved as a multiple row array in a single file. \n\nThe program to be used for this is ``./bin/calclbp.py``. It uses the utility script ``spoof/calclbp.py``. Depending on the command line arguments, it can compute different types of LBP histograms over the normalized face bounding box. Cropped and normalized images can be saved to a folder (``./img_cropped`` by default) and used in future computations to skip cropping using ``-sc`` flag.\n\nFurthermore, the normalized face-bounding box can be divided into blocks or not.\n\nThe following commands will calculate the feature vectors of all the videos in the database and will put the resulting ``.hdf5`` files with the extracted feature vectors in the output directory ``./lbp_features/r_1`` with and without skipping the cropping step::\n\n  $ bin/calclbp.py -ld ./lbp_features/r_1 --el regular\n  \n  $ bin/calclbp.py -cd ./img_cropped -ld ./lbp_features/r_1 --el regular -sc\n\nIn the above command, the program will crop (64x64 by default) and normalize the images according to the eye positions available in the database. The cropped images will be saved to the default directory (``img_cropped``) which can be changed using ``--cropped-dir`` argument.\n\nTo see all the options for the script ``calclbp.py``, just type ``--help`` at the command line. Change the default option in order to obtain various features described  in the paper.\n\nClassification using Chi-2 distance\n===================================\n\nThe clasification using Chi-2 distance consists of two steps. The first one is creating the histogram model (average LBP histogram of all the real access videos in the training set). The second step is comparison of the features of development and test videos to the model histogram and writing the results.\n\nThe script for performing Chi-2 histogram comparison is ``./bin/cmphistmodels.py``. It expects that the LBP features of the videos are stored in a folder ``./bin/lbp_features``. \n\nFirst, it calculates the average real-access histogram using the training set and next, it computes the distances and writes the results in a file using the utility script ``spoof/chi2.py`. The default input directory is ``./lbp_features``, while the default output directory is ``./res``. To execute this script on previously extracted features, just run:: \n\n  $ ./bin/cmphistmodels.py -v ./lbp_features/r_1\n\nTo see all the options for the script ``cmphistmodels.py``, just type ``--help`` at the command line.\n\nClassification with linear discriminant analysis (LDA)\n======================================================\n\nThe classification with LDA is performed using the script ``./bin/ldatrain_lbp.py``. It makes use of the scripts ``ml/lda.py``, ``ml/pca.py`` (if PCA reduction is performed on the data) and ``ml/norm.py`` (if the data need to be normalized). The default input and output directories are ``./lbp_features`` and ``./res``. To execute the script with prior PCA dimensionality reduction as is done in the paper, call::\n\n  $ ./bin/ldatrain_lbp.py -v ./lbp_features/r_1 -r\n\nTo see all the options for this script, just type ``--help`` at the command line.\n\nClassification with support vector machine (SVM)\n================================================\n\nThe classification with SVM is performed using the script ``./bin/svmtrain_lbp.py``. It makes use of the scripts ``ml/pca.py`` (if PCA reduction is performed on the data) and ``ml\\norm.py`` (if the data need to be normalized). The default input and output directories are ``./lbp_features`` and ``./res``. To execute the script as is done in the paper, call::\n\n  $ ./bin/svmtrain_lbp.py -v ./lbp_features/r_1\n\nTo see all the options for this script, just type ``--help`` at the command line.\n\nPlotting the HTER\n=================\nThe classification scripts ``cmphistmodels``, ``ldatrain_lbp`` and ``svmtrain_lbp``, run the experiments in 1000-fold manner, by randomly assigning subject ids to training, development and test sets (of fixed size). The resulting files are written to the ``res`` folder by default. If all the experiments in the paper are run (3 classification, 4 LBP methods with and without blocks - see ``run_experiments.sh``), the ``barplot.py`` script will create and save the image with HTER bar plot (under the ``res`` folder), for which the height shows the mean of the HTER values in 1000 folds and the error bar shows the standard deviation::\n\n  $ ./bin/barplot.py\n\n\nProblems\n--------\n\nIn case of problems, please contact any of the authors of the paper.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bioidiap/maskattack.lbp", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "maskattack.lbp", "package_url": "https://pypi.org/project/maskattack.lbp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/maskattack.lbp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bioidiap/maskattack.lbp"}, "release_url": "https://pypi.org/project/maskattack.lbp/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "Texture (LBP) based counter-measures for the 3D MASK ATTACK database", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package implements the LBP counter-measure to spoofing attacks with 3d masks to 2d face recognition systems as described in the paper <cite>Spoofing in 2D Face Recognition with 3D Masks and Anti-spoofing with Kinect</cite>, by N. Erdogmus and S. Marcel, presented at BTAS 2013.</p>\n<p>If you use this package and/or its results, please cite the following publications:</p>\n<ol>\n<li><p>The original paper with the counter-measure explained in details:</p>\n<pre>@INPROCEEDINGS{Erdogmus_BTAS_2013,\nauthor = {Erdogmus, Nesli and Marcel, S{\\'{e}}bastien},\nkeywords = {3D Mask Attack, Counter-Measures, Counter-Spoofing, Face Recognition, Liveness Detection, Replay, Spoofing},\nmonth = sep,\ntitle = {Spoofing in 2D Face Recognition with 3D Masks and Anti-spoofing with Kinect},\njournal = {BTAS 2013},\nyear = {2013},\n}\n</pre>\n</li>\n<li><p>Bob as the core framework used to run the experiments:</p>\n<pre>@inproceedings{Anjos_ACMMM_2012,\n    author = {A. Anjos AND L. El Shafey AND R. Wallace AND M. G\\\"unther AND C. McCool AND S. Marcel},\n    title = {Bob: a free signal processing and machine learning toolbox for researchers},\n    year = {2012},\n    month = oct,\n    booktitle = {20th ACM Conference on Multimedia Systems (ACMMM), Nara, Japan},\n    publisher = {ACM Press},\n}\n</pre>\n</li>\n</ol>\n<p>If you wish to report problems or improvements concerning this code, please contact the authors of the above mentioned papers.</p>\n<div id=\"raw-data\">\n<h2>Raw data</h2>\n<p>The data used in the paper is publicly available and should be downloaded and installed <strong>prior</strong> to try using the programs described in this package. Visit <a href=\"https://www.idiap.ch/dataset/3dmad\" rel=\"nofollow\">the 3D MASK ATTACK database portal</a> for more information.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div>\n<p>Note</p>\n<p>If you are reading this page through our GitHub portal and not through PyPI, note <strong>the development tip of the package may not be stable</strong> or become unstable in a matter of moments.</p>\n<p>Go to <a href=\"http://pypi.python.org/pypi/maskattack.lbp\" rel=\"nofollow\">http://pypi.python.org/pypi/maskattack.lbp</a> to download the latest stable version of this package.</p>\n</div>\n<p>There are 2 options you can follow to get this package installed and operational on your computer: you can use automatic installers like <a href=\"http://pypi.python.org/pypi/pip/\" rel=\"nofollow\">pip</a> (or <a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">easy_install</a>) or manually download, unpack and use <a href=\"http://pypi.python.org/pypi/zc.buildout\" rel=\"nofollow\">zc.buildout</a> to create a virtual work environment just for this package.</p>\n<div id=\"using-an-automatic-installer\">\n<h3>Using an automatic installer</h3>\n<p>Using <tt>pip</tt> is the easiest (shell commands are marked with a <tt>$</tt> signal):</p>\n<pre>$ pip install maskattack.lbp\n</pre>\n<p>You can also do the same with <tt>easy_install</tt>:</p>\n<pre>$ easy_install maskattack.lbp\n</pre>\n<p>This will download and install this package plus any other required dependencies. It will also verify if the version of Bob you have installed is compatible.</p>\n<p>This scheme works well with virtual environments by <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">virtualenv</a> or if you have root access to your machine. Otherwise, we recommend you use the next option.</p>\n</div>\n<div id=\"using-zc-buildout\">\n<h3>Using <tt>zc.buildout</tt></h3>\n<p>Download the latest version of this package from <a href=\"http://pypi.python.org/pypi/maskattack.lbp\" rel=\"nofollow\">PyPI</a> and unpack it in your working area. The installation of the toolkit itself uses <a href=\"http://www.buildout.org/\" rel=\"nofollow\">buildout</a>. You don\u2019t need to understand its inner workings to use this package. Here is a recipe to get you started:</p>\n<pre>$ python bootstrap.py\n$ ./bin/buildout\n</pre>\n<p>These 2 commands should download and install all non-installed dependencies and get you a fully operational test and development environment.</p>\n<div>\n<p>Note</p>\n<p>The python shell used in the first line of the previous command set determines the python interpreter that will be used for all scripts developed inside this package. Because this package makes use of <a href=\"http://idiap.github.com/bob\" rel=\"nofollow\">Bob</a>, you must make sure that the <tt>bootstrap.py</tt> script is called with the <strong>same</strong> interpreter used to build Bob, or unexpected problems might occur.</p>\n<p>If Bob is installed by the administrator of your system, it is safe to consider it uses the default python interpreter. In this case, the above 3 command lines should work as expected. If you have Bob installed somewhere else on a private directory, edit the file <tt>buildout.cfg</tt> <strong>before</strong> running <tt>./bin/buildout</tt>. Find the section named <tt>external</tt> and edit the line <tt><span class=\"pre\">egg-directories</span></tt> to point to the <tt>lib</tt> directory of the Bob installation you want to use. For example:</p>\n<pre>[external]\nrecipe = xbob.buildout:external\negg-directories=/Users/crazyfox/work/bob/build/lib\n</pre>\n</div>\n</div>\n</div>\n<div id=\"user-guide\">\n<h2>User Guide</h2>\n<p>This section explains how to use the package in order to: a) calculate the LBP features on the 3D Mask Attack database; b) perform classification using Chi-2, Linear Discriminant Analysis (LDA) and Support Vector Machines (SVM).</p>\n<p>It is assumed you have followed the installation instructions for the package, and got the required database downloaded and uncompressed in a directory. After running the <tt>buildout</tt> command, you should have all required utilities sitting inside the <tt>bin</tt> directory. We expect that the video files of the database are installed in a sub-directory called <tt>database</tt> at the root of the package. You can use a link to the location of the database files, if you don\u2019t want to have the database installed on the root of this package:</p>\n<pre>$ ln -s /path/where/you/installed/the/database database\n</pre>\n<p>If you don\u2019t want to create a link, use the <tt><span class=\"pre\">--input-dir</span></tt> flag (available in all the scripts) to specify the root directory containing the database files.</p>\n<div id=\"calculate-the-lbp-features\">\n<h3>Calculate the LBP features</h3>\n<p>The first stage of the process is calculating the feature vectors, which are essentially normalized LBP histograms. A single feature vector for each frame of the video (both for the depth and color images) is computed and saved as a multiple row array in a single file.</p>\n<p>The program to be used for this is <tt>./bin/calclbp.py</tt>. It uses the utility script <tt>spoof/calclbp.py</tt>. Depending on the command line arguments, it can compute different types of LBP histograms over the normalized face bounding box. Cropped and normalized images can be saved to a folder (<tt>./img_cropped</tt> by default) and used in future computations to skip cropping using <tt><span class=\"pre\">-sc</span></tt> flag.</p>\n<p>Furthermore, the normalized face-bounding box can be divided into blocks or not.</p>\n<p>The following commands will calculate the feature vectors of all the videos in the database and will put the resulting <tt>.hdf5</tt> files with the extracted feature vectors in the output directory <tt>./lbp_features/r_1</tt> with and without skipping the cropping step:</p>\n<pre>$ bin/calclbp.py -ld ./lbp_features/r_1 --el regular\n\n$ bin/calclbp.py -cd ./img_cropped -ld ./lbp_features/r_1 --el regular -sc\n</pre>\n<p>In the above command, the program will crop (64x64 by default) and normalize the images according to the eye positions available in the database. The cropped images will be saved to the default directory (<tt>img_cropped</tt>) which can be changed using <tt><span class=\"pre\">--cropped-dir</span></tt> argument.</p>\n<p>To see all the options for the script <tt>calclbp.py</tt>, just type <tt><span class=\"pre\">--help</span></tt> at the command line. Change the default option in order to obtain various features described  in the paper.</p>\n</div>\n<div id=\"classification-using-chi-2-distance\">\n<h3>Classification using Chi-2 distance</h3>\n<p>The clasification using Chi-2 distance consists of two steps. The first one is creating the histogram model (average LBP histogram of all the real access videos in the training set). The second step is comparison of the features of development and test videos to the model histogram and writing the results.</p>\n<p>The script for performing Chi-2 histogram comparison is <tt>./bin/cmphistmodels.py</tt>. It expects that the LBP features of the videos are stored in a folder <tt>./bin/lbp_features</tt>.</p>\n<p>First, it calculates the average real-access histogram using the training set and next, it computes the distances and writes the results in a file using the utility script <tt>spoof/chi2.py`. The default input directory is <span class=\"pre\">``./lbp_features</span></tt>, while the default output directory is <tt>./res</tt>. To execute this script on previously extracted features, just run:</p>\n<pre>$ ./bin/cmphistmodels.py -v ./lbp_features/r_1\n</pre>\n<p>To see all the options for the script <tt>cmphistmodels.py</tt>, just type <tt><span class=\"pre\">--help</span></tt> at the command line.</p>\n</div>\n<div id=\"classification-with-linear-discriminant-analysis-lda\">\n<h3>Classification with linear discriminant analysis (LDA)</h3>\n<p>The classification with LDA is performed using the script <tt>./bin/ldatrain_lbp.py</tt>. It makes use of the scripts <tt>ml/lda.py</tt>, <tt>ml/pca.py</tt> (if PCA reduction is performed on the data) and <tt>ml/norm.py</tt> (if the data need to be normalized). The default input and output directories are <tt>./lbp_features</tt> and <tt>./res</tt>. To execute the script with prior PCA dimensionality reduction as is done in the paper, call:</p>\n<pre>$ ./bin/ldatrain_lbp.py -v ./lbp_features/r_1 -r\n</pre>\n<p>To see all the options for this script, just type <tt><span class=\"pre\">--help</span></tt> at the command line.</p>\n</div>\n<div id=\"classification-with-support-vector-machine-svm\">\n<h3>Classification with support vector machine (SVM)</h3>\n<p>The classification with SVM is performed using the script <tt>./bin/svmtrain_lbp.py</tt>. It makes use of the scripts <tt>ml/pca.py</tt> (if PCA reduction is performed on the data) and <tt>ml\\norm.py</tt> (if the data need to be normalized). The default input and output directories are <tt>./lbp_features</tt> and <tt>./res</tt>. To execute the script as is done in the paper, call:</p>\n<pre>$ ./bin/svmtrain_lbp.py -v ./lbp_features/r_1\n</pre>\n<p>To see all the options for this script, just type <tt><span class=\"pre\">--help</span></tt> at the command line.</p>\n</div>\n<div id=\"plotting-the-hter\">\n<h3>Plotting the HTER</h3>\n<p>The classification scripts <tt>cmphistmodels</tt>, <tt>ldatrain_lbp</tt> and <tt>svmtrain_lbp</tt>, run the experiments in 1000-fold manner, by randomly assigning subject ids to training, development and test sets (of fixed size). The resulting files are written to the <tt>res</tt> folder by default. If all the experiments in the paper are run (3 classification, 4 LBP methods with and without blocks - see <tt>run_experiments.sh</tt>), the <tt>barplot.py</tt> script will create and save the image with HTER bar plot (under the <tt>res</tt> folder), for which the height shows the mean of the HTER values in 1000 folds and the error bar shows the standard deviation:</p>\n<pre>$ ./bin/barplot.py\n</pre>\n</div>\n</div>\n<div id=\"problems\">\n<h2>Problems</h2>\n<p>In case of problems, please contact any of the authors of the paper.</p>\n</div>\n\n          </div>"}, "last_serial": 1115446, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "af0fbecec7bb8d304c5015803db77256", "sha256": "03317c8840fc6bd46ee8ca075d222d2c42582ee807c2b9234a6aca127059edb1"}, "downloads": -1, "filename": "maskattack.lbp-1.0.0.zip", "has_sig": false, "md5_digest": "af0fbecec7bb8d304c5015803db77256", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43066, "upload_time": "2013-07-18T11:26:15", "upload_time_iso_8601": "2013-07-18T11:26:15.136116Z", "url": "https://files.pythonhosted.org/packages/6f/4a/d7da5a7c92003adc22299d233c6c74ce214753e79c998d4d0dea20bd7e35/maskattack.lbp-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8dc7e504d64e294c082d5b590afedf9e", "sha256": "198cc05ca54714cd709ede7e501a1eb5be172003952a2bee75fba83761209a5a"}, "downloads": -1, "filename": "maskattack.lbp-1.0.1.zip", "has_sig": false, "md5_digest": "8dc7e504d64e294c082d5b590afedf9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1357215, "upload_time": "2013-10-04T15:21:45", "upload_time_iso_8601": "2013-10-04T15:21:45.729583Z", "url": "https://files.pythonhosted.org/packages/7c/98/9b14a17bc0b8036e2d9a99cef80b99ba88751eac8c9571bf98a637408894/maskattack.lbp-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "d27c568cf600af3fe95b79af1d8c3325", "sha256": "18318236ed76924075ed98d5cafe484527b92dcc5387fff676acaea16cca7cd7"}, "downloads": -1, "filename": "maskattack.lbp-1.0.2.zip", "has_sig": false, "md5_digest": "d27c568cf600af3fe95b79af1d8c3325", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1357269, "upload_time": "2013-11-19T11:57:59", "upload_time_iso_8601": "2013-11-19T11:57:59.577152Z", "url": "https://files.pythonhosted.org/packages/07/6f/d1be8e443f7230ccaec4a8927bc87af4dcb397d07a117498666a8a372a1e/maskattack.lbp-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "8f2a9bfbdfc560e43dd87fe3ad2dc0f5", "sha256": "b5213cedea01b2c0d57810285bd1f355833d80da507ae885f2650759e96c10ed"}, "downloads": -1, "filename": "maskattack.lbp-1.0.3.zip", "has_sig": false, "md5_digest": "8f2a9bfbdfc560e43dd87fe3ad2dc0f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1357270, "upload_time": "2013-11-19T12:09:19", "upload_time_iso_8601": "2013-11-19T12:09:19.244470Z", "url": "https://files.pythonhosted.org/packages/ee/b4/6764da2186de8c8baa999762a5aba155a6d2861d7888770e5671a2f1b802/maskattack.lbp-1.0.3.zip", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "a28b4ec88ad5956018e28427178fcd9e", "sha256": "8a57a7a50456d5986eb784128cb69e7f5bb3db9a3b27331a40a39ce529e3758b"}, "downloads": -1, "filename": "maskattack.lbp-1.0.4.zip", "has_sig": false, "md5_digest": "a28b4ec88ad5956018e28427178fcd9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1357273, "upload_time": "2014-06-05T13:19:16", "upload_time_iso_8601": "2014-06-05T13:19:16.849564Z", "url": "https://files.pythonhosted.org/packages/7d/cd/a424917143e9ba9e6e417f210c87b413e89f5a16973f63253a9963216700/maskattack.lbp-1.0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a28b4ec88ad5956018e28427178fcd9e", "sha256": "8a57a7a50456d5986eb784128cb69e7f5bb3db9a3b27331a40a39ce529e3758b"}, "downloads": -1, "filename": "maskattack.lbp-1.0.4.zip", "has_sig": false, "md5_digest": "a28b4ec88ad5956018e28427178fcd9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1357273, "upload_time": "2014-06-05T13:19:16", "upload_time_iso_8601": "2014-06-05T13:19:16.849564Z", "url": "https://files.pythonhosted.org/packages/7d/cd/a424917143e9ba9e6e417f210c87b413e89f5a16973f63253a9963216700/maskattack.lbp-1.0.4.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:31 2020"}