{"info": {"author": "Denis Zawada", "author_email": "oss@deno.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Lib3to2 began as Google Summer of Code (GSOC) 2009 project by Joe Amenta.\nLib3to2 is a set of fixers and utilities for lib2to3, a source code transformer\nincluded in Python standard library.\n\nPorting from Python 3 to Python 2 codebase is often easier, because there\u2019s\nless ambiguity due to stricter rules that Python 3 imposes. Lib3to2 is crucial\nin enabling the developer to start enjoying modern Python environment, while\nstill maintaining compatibility with older runtimes.\n\nFeedback\n========\n\n* Ask a question through our web support interface, at\n  https://answers.launchpad.net/awkwardduet\n\n* Report bugs at https://bugs.launchpad.net/awkwardduet/+filebug\n\nIf you plan or would like to port your Python 3 code to Python 2 we encourage\nyou to run 3to2 and report any issues with the transformation. Your experience\nwith using this library is very valuable in shaping the future goals of this\nproject.\n\nA great way to influence the project schedule is to use the \u201cIt\u2019s affecting me\u201d\nand \u201cIt\u2019s affecting project\u201d feedback mechanisms.\n\nUsage\n=====\n\nRun \"./3to2\" to convert stdin (\"-\"), files or directories given as\narguments.  By default, the tool outputs a unified diff-formatted patch on\nstandard output and a \"what was changed\" summary on standard error, but the\n\"-w\" option can be given to write back converted files, creating\n\".bak\"-named backup files.\n\n\nChangelog\n=========\n\n\nawkwardduet 1.1a4\n-----------------\n\nBug Fixes\n^^^^^^^^^\n- Fix issue with fix_str shadowing fix_bytes (Denis Zawada, #1011581)\n\n\nawkwardduet 1.1a3\n-----------------\n\nBug Fixes\n^^^^^^^^^\n- Use temporary value to prevent shadowing function name in decorators\n  with the same name, e.g. if you use (@property def foo...) and then\n  (@foo.setter def foo...) (Denis Zawada, #1008074)\n\nOther\n^^^^^\n- Use entry_points.console_scripts instead of custom script for '3to2'\n\n\n\nawkwardduet 1.1a2\n-----------------\n\nSnapshot of new features and bugfixes.\n\nBug Fixes\n^^^^^^^^^\n\n- fix_kwargs no longer breaks docstrings when adding code to fix parameters.\n  (Denis Zawada, #880389)\n\nNew Features\n^^^^^^^^^^^^\n\n- Format template strings, that use auto-numbered fields, are now converted\n  to use explicitly numbered fields, thus extending compatibility with\n  Python 2.6 even further. (Denis Zawada, #881113)\n\n- Chained exceptions (raise E from E) are now included in the __cause__\n  attribute whenever possible. (Denis Zawada, #881136)\n\n- Function annotations are now collected and set manually. You can access them\n  via the func_annotations property, exactly like in Python 3.\n  (Denis Zawada, #881134)\n\n- New fixer fix_funcdecorator, fix_classdecorator equivalent for decorated\n  functions, is now available and auto-enabled (as a dependency for\n  fix_annotations) (Denis Zawada)\n\nOther\n^^^^^\n\n- __annotations__ attributes are now renamed to func_annotations.\n\n- Attribute renamers with special names (e.g. __nonzero__) are now more\n  eager.\n\n- Method renamers have been DRYed and marked as BM_compatible.\n\n- Some minor issues with preserving whitespace in fix_classdecorator have\n  been resolved by switching to new implementation, that could be reused.\n\n- Fix_str have been split into fix_str and fix_str_literals. This has allowed\n  to mark fix_str_literals as BM_compatible and shaved off almost 2 seconds\n  from the test suite run.\n\n\nawkwardduet 1.1a1\n-----------------\n\nFirst maintenance release of awkwardduet, a maintenance fork of lib3to2.\nThe release focus is on fixing major issues reported in lib3to2 1.0 series.\n\nBug Fixes\n^^^^^^^^^\n\n- fix_super now refactors magic super (super() with no arguments) by searching\n  the parsing tree for class name and the first argument, the same mechanism\n  used by Python 3 runtime. Until now super() used `self.__class__` instead\n  of a class name, which caused trouble with non-trivial inheritence.\n  (Denis Zawada, #880377; originally reported in lib3to2 1.0 series)\n\n- fix_next now correctly parenthesizes generator statements.\n  (Denis Zawada, #880378)\n\n- fix_next is now aware of extend form of the `next` builting, i.e\n  next(iterable[, default]). If extended signature is detected, a warning is\n  reported and the code remains unaltered. This provides compatibility with\n  Python 2.6\u20137. (Denis Zawada, #880383)\n\n\nNew Features\n^^^^^^^^^^^^\n\n- Python 3 __str__ methods are now converted to __unicode__ in Python 2,\n  while __bytes__ are converted to __str__. This further extends unicode\n  compatibility between runtimes. (Denis Zawada, #880382)\n\n- Python 3 default absolute import behavior is now enforced in Python 2.5\u20137\n  using the \u2018from __future__ import __absolute_import__\u2019 directive.\n  (Denis Zawada, #880388)\n\nOther\n^^^^^\n\n- Testing infrastructure is now compatible with nose runner. (Denis Zawada)\n\n\n3to2 0.1\u20131.0\n------------\n\nLess recent changes can be found in the NEWS.rst file in the top-level\nsource code directory.", "description_content_type": null, "docs_url": null, "download_url": "https://launchpad.net/awkwardduet/+download", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://launchpad.net/awkwardduet", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "awkwardduet", "package_url": "https://pypi.org/project/awkwardduet/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/awkwardduet/", "project_urls": {"Download": "https://launchpad.net/awkwardduet/+download", "Homepage": "https://launchpad.net/awkwardduet"}, "release_url": "https://pypi.org/project/awkwardduet/1.1a4/", "requires_dist": null, "requires_python": null, "summary": "Lib3to2 maintenance fork. Lib3to2 is a set of fixers and utilities for\nlib2to3, a source code transformer included in Python standard library.", "version": "1.1a4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Lib3to2 began as Google Summer of Code (GSOC) 2009 project by Joe Amenta.\nLib3to2 is a set of fixers and utilities for lib2to3, a source code transformer\nincluded in Python standard library.</p>\n<p>Porting from Python 3 to Python 2 codebase is often easier, because there\u2019s\nless ambiguity due to stricter rules that Python 3 imposes. Lib3to2 is crucial\nin enabling the developer to start enjoying modern Python environment, while\nstill maintaining compatibility with older runtimes.</p>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<ul>\n<li>Ask a question through our web support interface, at\n<a href=\"https://answers.launchpad.net/awkwardduet\" rel=\"nofollow\">https://answers.launchpad.net/awkwardduet</a></li>\n<li>Report bugs at <a href=\"https://bugs.launchpad.net/awkwardduet/+filebug\" rel=\"nofollow\">https://bugs.launchpad.net/awkwardduet/+filebug</a></li>\n</ul>\n<p>If you plan or would like to port your Python 3 code to Python 2 we encourage\nyou to run 3to2 and report any issues with the transformation. Your experience\nwith using this library is very valuable in shaping the future goals of this\nproject.</p>\n<p>A great way to influence the project schedule is to use the \u201cIt\u2019s affecting me\u201d\nand \u201cIt\u2019s affecting project\u201d feedback mechanisms.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Run \u201c./3to2\u201d to convert stdin (\u201c-\u201c), files or directories given as\narguments.  By default, the tool outputs a unified diff-formatted patch on\nstandard output and a \u201cwhat was changed\u201d summary on standard error, but the\n\u201c-w\u201d option can be given to write back converted files, creating\n\u201c.bak\u201d-named backup files.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"awkwardduet-1-1a4\">\n<h3>awkwardduet 1.1a4</h3>\n<h3 id=\"bug-fixes\"><span class=\"section-subtitle\">Bug Fixes</span></h3>\n<ul>\n<li>Fix issue with fix_str shadowing fix_bytes (Denis Zawada, #1011581)</li>\n</ul>\n</div>\n<div id=\"awkwardduet-1-1a3\">\n<h3>awkwardduet 1.1a3</h3>\n<div id=\"id1\">\n<h4>Bug Fixes</h4>\n<ul>\n<li>Use temporary value to prevent shadowing function name in decorators\nwith the same name, e.g. if you use (@property def foo\u2026) and then\n(@foo.setter def foo\u2026) (Denis Zawada, #1008074)</li>\n</ul>\n</div>\n<div id=\"other\">\n<h4>Other</h4>\n<ul>\n<li>Use entry_points.console_scripts instead of custom script for \u20183to2\u2019</li>\n</ul>\n</div>\n</div>\n<div id=\"awkwardduet-1-1a2\">\n<h3>awkwardduet 1.1a2</h3>\n<p>Snapshot of new features and bugfixes.</p>\n<div id=\"id2\">\n<h4>Bug Fixes</h4>\n<ul>\n<li>fix_kwargs no longer breaks docstrings when adding code to fix parameters.\n(Denis Zawada, #880389)</li>\n</ul>\n</div>\n<div id=\"new-features\">\n<h4>New Features</h4>\n<ul>\n<li>Format template strings, that use auto-numbered fields, are now converted\nto use explicitly numbered fields, thus extending compatibility with\nPython 2.6 even further. (Denis Zawada, #881113)</li>\n<li>Chained exceptions (raise E from E) are now included in the __cause__\nattribute whenever possible. (Denis Zawada, #881136)</li>\n<li>Function annotations are now collected and set manually. You can access them\nvia the func_annotations property, exactly like in Python 3.\n(Denis Zawada, #881134)</li>\n<li>New fixer fix_funcdecorator, fix_classdecorator equivalent for decorated\nfunctions, is now available and auto-enabled (as a dependency for\nfix_annotations) (Denis Zawada)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h4>Other</h4>\n<ul>\n<li>__annotations__ attributes are now renamed to func_annotations.</li>\n<li>Attribute renamers with special names (e.g. __nonzero__) are now more\neager.</li>\n<li>Method renamers have been DRYed and marked as BM_compatible.</li>\n<li>Some minor issues with preserving whitespace in fix_classdecorator have\nbeen resolved by switching to new implementation, that could be reused.</li>\n<li>Fix_str have been split into fix_str and fix_str_literals. This has allowed\nto mark fix_str_literals as BM_compatible and shaved off almost 2 seconds\nfrom the test suite run.</li>\n</ul>\n</div>\n</div>\n<div id=\"awkwardduet-1-1a1\">\n<h3>awkwardduet 1.1a1</h3>\n<p>First maintenance release of awkwardduet, a maintenance fork of lib3to2.\nThe release focus is on fixing major issues reported in lib3to2 1.0 series.</p>\n<div id=\"id4\">\n<h4>Bug Fixes</h4>\n<ul>\n<li>fix_super now refactors magic super (super() with no arguments) by searching\nthe parsing tree for class name and the first argument, the same mechanism\nused by Python 3 runtime. Until now super() used <cite>self.__class__</cite> instead\nof a class name, which caused trouble with non-trivial inheritence.\n(Denis Zawada, #880377; originally reported in lib3to2 1.0 series)</li>\n<li>fix_next now correctly parenthesizes generator statements.\n(Denis Zawada, #880378)</li>\n<li>fix_next is now aware of extend form of the <cite>next</cite> builting, i.e\nnext(iterable[, default]). If extended signature is detected, a warning is\nreported and the code remains unaltered. This provides compatibility with\nPython 2.6\u20137. (Denis Zawada, #880383)</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h4>New Features</h4>\n<ul>\n<li>Python 3 __str__ methods are now converted to __unicode__ in Python 2,\nwhile __bytes__ are converted to __str__. This further extends unicode\ncompatibility between runtimes. (Denis Zawada, #880382)</li>\n<li>Python 3 default absolute import behavior is now enforced in Python 2.5\u20137\nusing the \u2018from __future__ import __absolute_import__\u2019 directive.\n(Denis Zawada, #880388)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h4>Other</h4>\n<ul>\n<li>Testing infrastructure is now compatible with nose runner. (Denis Zawada)</li>\n</ul>\n</div>\n</div>\n<div id=\"to2-0-11-0\">\n<h3>3to2 0.1\u20131.0</h3>\n<p>Less recent changes can be found in the NEWS.rst file in the top-level\nsource code directory.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 431224, "releases": {"1.1a1": [], "1.1a2": [], "1.1a3": [], "1.1a4": []}, "urls": [], "timestamp": "Thu May  7 18:16:00 2020"}