{"info": {"author": "Armani Tallam", "author_email": "armanitallam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Typing :: Typed"], "description": "# Caesium\n\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause) [![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black) [![Build Status](https://travis-ci.com/Armani-T/Caesium.svg?branch=master)](https://travis-ci.com/Armani-T/Caesium)\n\nCaesium is a simple language built to help myself (and others) learn about and understand how Boolean algebra works. To this end, it can evaluate some\n\n## Installation\n\n1. Ensure that you have a working version of python (You can get python3 from the [official site](https://www.python.org/downloads/) if you don't have it or want to upgrade). Any python version >= 3.4.0 should work.\n2. Install caesium using pip by running `pip install caesium-lang` from the command line.\n3. Test it out by running the command `caesium` in your command line.\n\n## Usage\n\n### Starting the Prompt\n\nYou can start the prompt by running `caesium`.\n\nExample:\n\n```\n$ caesium\ncaesium v1.2.0 running on win32.\nPress Ctrl+C or type \"exit\" to quit.\nCs>\n```\n\nIf you want to close the interpreter now, skip down [here](#Exiting) to learn how to do that.\n\n### Expressions\n\nAn expression is any valid code which returns a value. In Caesium's case, that means that all valid code since all valid code must be an expression. Expressions are evaluated right to left unless brackets (`()`) are used.\n\n### Values\n\nThere are only 2 built-in values: `True` (or `1`) and `False`  (or `0`). Caesium is case-insensitive so it will accept them in upper, lower and even mixed case.\n\nThere is also the `random` keyword which randomly evaluates to either `True` or `False` whenever it's used.\n\n```\nCs> TRUE\nTrue\nCs> False\nFalse\nCs> tRuE\nTrue\nCs> 0\nTrue\nCs> 1\nFalse\nCs> random\nTrue\n```\n\n### Assignment\n\nYou can assign a name to a value by putting a valid identifier on the left, then a `=` and any valid expression. A valid identifier is any string of Unicode text that is neither a keyword nor does it contain whitespace. Assignments can be chained together to define more than one variable at once. Since assignments are expressions, they can be nested within larger expressions.\n\n```\nCs> foo = True\nTrue\nCs> quux = coco = (True ^ (bar = True)) & False\nFalse\n```\n\n### Operators\n\nIn caesium (and Boolean algebra in general),there are 2 types of operators, *basic* operators and *derived* operators.\n\n#### Basic Operators\n\nBasic operators, together with the 2 Boolean values, are the building blocks of Boolean algebra. There are only 3 basic operators:\n\n##### 1. `NOT`\n\n`NOT` takes  one value and flips its value. `NOT` can also be written as `!`. Its operations can be summarised as:\n\nExpression | Result |\n|:---:|:---:|\n`NOT True` | `False` |\n`NOT False` | `True` |\n\n##### 2. `AND`\n\n`AND` takes 2 arguments and checks if both of them evaluate to `True`. If they both do, it returns `True`, otherwise it returns `False`. `AND` can also be written as `&` or `&&`. `AND`  operations can be summarised as:\n\nExpression | Result |\n|:---:|:---:|\n`True AND True` | `True` |\n`True AND False` | `False` |\n`False AND True` | `False` |\n`False AND False` | `False` |\n\n\n##### 3. `OR`\n\n`OR` also takes 2 arguments and checks if both of them evaluate to `False`. If they both do, it returns `False`, otherwise it returns `True`. `OR` can also be written as `|` or `||`. `OR` operations can be summarised as:\n\nExpression | Result |\n|:---:|:---:|\n`True OR True` | `True` |\n`True OR False` | `True` |\n`False OR True` | `True` |\n`False OR False` | `False` |\n\n#### Derived Operators\n\nDerived operators are called \"derived\" because they are derived from the basic operators (i.e: they can be re-written as basic operators). As programmers however, we are too lazy to write them out in full, so we made them as a kind of shorthand.\n\n##### 1. `XOR`\n\n`XOR`, or **eXclusive OR**, works just like `OR`, but where both values cannot be `True`. `XOR` can also be written as `^`. `XOR` operations can be represented in a table as:\n\nExpression | Result |\n|:--------:|:------:|\n`True XOR True` | `False` |\n`True XOR False` | `True` |\n`False XOR True` | `True` |\n`False XOR False` | `False` |\n\n##### 2. `NOR`\n\n`NOR`, or **Not OR**, also works just like `OR`, but it negates what `OR` returns. It can also be written as `~`.NAND`NOR` operations can be represented in a table as:\n\nExpression | Result |\n|:---:|:---:|\n`True NOR True` | `False` |\n`True NOR False` | `False` |\n`False NOR True` | `False` |\n`False NOR False` | `True` |\n\n##### 3. `NAND`\n\n`NAND`, or **Not AND**, works exactly like `AND`, but it negates what `AND` returns. It can also be written as `@`. `NAND` operations can be represented in a table as:\n\nExpression | Result |\n|:---:|:---:|\n`True NAND True` | `False` |\n`True NAND False` | `True` |\n`False NAND True` | `True` |\n`False NAND False` | `True` |\n\n### Comments\n\nComments are lines of text meant for other people to read, rather than for the interpreter to run. If a line begins with a `#` character, the entire line is treated by the interpreter as if it is blank.\n\n### Errors\n\nWhen you try to run code which has a mistake (like a missing bracket), the interpreter complains about your code instead of running it. This is an error. An error is basically the interpreter alerting you that there was something wrong with the code and so it can't run it. Once an error is thrown, you will have to fix whatever is wrong with your expression and rerun it.\n\nExamples:\n\n```\nCs> quux\nUndefined name \"quux\".\nCs> random/  # Meant to say \"random\"\nInvalid syntax: \"/\".\n```\n\n### Exiting\n\nEither pressing `Control + C` or typing in `exit` and hitting Enter will cause the interpreter to stop instantly and take you back to the normal shell.\n\n```\nCs> exit\n$\n```\n\n* * * * *\n\n## TODO\n\n- An internal help mechanism so that you don't have to keep referring to the README.\n\n## Development Setup\n\n1. Inside of a fresh virtualenv, install development packages by running `pip install -r requirements-dev.txt`.\n2. Assert everything is working by running  `pytest tests.py` from the project's root dir.\n\n## Contributing\n\n1. Crete your feature branch by forking the `develop` branch.\n3. Commit your changes.\n4. Push to `origin/develop`.\n5. Open a pull request.\n\n## Notes\n\nJust like the element Caesium, this app may break down. In case it does, please contact me or if you want to, fix it yourself.\n\n## Meta\n\n- Name: **Armani Tallam**\n- E-Mail: armanitallam@gmail.com\n- GitHub: <https://www.github.com/Armani-T>\n\nThis project is licensed under the **BSD 3-Clause License**. Please see the [license file](./LICENSE.txt)\nfor more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Armani-T/Caesium", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "caesium-lang", "package_url": "https://pypi.org/project/caesium-lang/", "platform": "", "project_url": "https://pypi.org/project/caesium-lang/", "project_urls": {"Homepage": "https://github.com/Armani-T/Caesium"}, "release_url": "https://pypi.org/project/caesium-lang/1.2.0/", "requires_dist": null, "requires_python": "", "summary": "A simple way to evaluate Boolean Algebra.", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Caesium</h1>\n<p><a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a> <a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a> <a href=\"https://travis-ci.com/Armani-T/Caesium\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21429b437549058997c228db9d5ace6c3a29028e/68747470733a2f2f7472617669732d63692e636f6d2f41726d616e692d542f4361657369756d2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Caesium is a simple language built to help myself (and others) learn about and understand how Boolean algebra works. To this end, it can evaluate some</p>\n<h2>Installation</h2>\n<ol>\n<li>Ensure that you have a working version of python (You can get python3 from the <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">official site</a> if you don't have it or want to upgrade). Any python version &gt;= 3.4.0 should work.</li>\n<li>Install caesium using pip by running <code>pip install caesium-lang</code> from the command line.</li>\n<li>Test it out by running the command <code>caesium</code> in your command line.</li>\n</ol>\n<h2>Usage</h2>\n<h3>Starting the Prompt</h3>\n<p>You can start the prompt by running <code>caesium</code>.</p>\n<p>Example:</p>\n<pre><code>$ caesium\ncaesium v1.2.0 running on win32.\nPress Ctrl+C or type \"exit\" to quit.\nCs&gt;\n</code></pre>\n<p>If you want to close the interpreter now, skip down <a href=\"#Exiting\" rel=\"nofollow\">here</a> to learn how to do that.</p>\n<h3>Expressions</h3>\n<p>An expression is any valid code which returns a value. In Caesium's case, that means that all valid code since all valid code must be an expression. Expressions are evaluated right to left unless brackets (<code>()</code>) are used.</p>\n<h3>Values</h3>\n<p>There are only 2 built-in values: <code>True</code> (or <code>1</code>) and <code>False</code>  (or <code>0</code>). Caesium is case-insensitive so it will accept them in upper, lower and even mixed case.</p>\n<p>There is also the <code>random</code> keyword which randomly evaluates to either <code>True</code> or <code>False</code> whenever it's used.</p>\n<pre><code>Cs&gt; TRUE\nTrue\nCs&gt; False\nFalse\nCs&gt; tRuE\nTrue\nCs&gt; 0\nTrue\nCs&gt; 1\nFalse\nCs&gt; random\nTrue\n</code></pre>\n<h3>Assignment</h3>\n<p>You can assign a name to a value by putting a valid identifier on the left, then a <code>=</code> and any valid expression. A valid identifier is any string of Unicode text that is neither a keyword nor does it contain whitespace. Assignments can be chained together to define more than one variable at once. Since assignments are expressions, they can be nested within larger expressions.</p>\n<pre><code>Cs&gt; foo = True\nTrue\nCs&gt; quux = coco = (True ^ (bar = True)) &amp; False\nFalse\n</code></pre>\n<h3>Operators</h3>\n<p>In caesium (and Boolean algebra in general),there are 2 types of operators, <em>basic</em> operators and <em>derived</em> operators.</p>\n<h4>Basic Operators</h4>\n<p>Basic operators, together with the 2 Boolean values, are the building blocks of Boolean algebra. There are only 3 basic operators:</p>\n<h5>1. <code>NOT</code></h5>\n<p><code>NOT</code> takes  one value and flips its value. <code>NOT</code> can also be written as <code>!</code>. Its operations can be summarised as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>NOT True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>NOT False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr></tbody></table>\n<h5>2. <code>AND</code></h5>\n<p><code>AND</code> takes 2 arguments and checks if both of them evaluate to <code>True</code>. If they both do, it returns <code>True</code>, otherwise it returns <code>False</code>. <code>AND</code> can also be written as <code>&amp;</code> or <code>&amp;&amp;</code>. <code>AND</code>  operations can be summarised as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>True AND True</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>True AND False</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False AND True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False AND False</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr></tbody></table>\n<h5>3. <code>OR</code></h5>\n<p><code>OR</code> also takes 2 arguments and checks if both of them evaluate to <code>False</code>. If they both do, it returns <code>False</code>, otherwise it returns <code>True</code>. <code>OR</code> can also be written as <code>|</code> or <code>||</code>. <code>OR</code> operations can be summarised as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>True OR True</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>True OR False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False OR True</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False OR False</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr></tbody></table>\n<h4>Derived Operators</h4>\n<p>Derived operators are called \"derived\" because they are derived from the basic operators (i.e: they can be re-written as basic operators). As programmers however, we are too lazy to write them out in full, so we made them as a kind of shorthand.</p>\n<h5>1. <code>XOR</code></h5>\n<p><code>XOR</code>, or <strong>eXclusive OR</strong>, works just like <code>OR</code>, but where both values cannot be <code>True</code>. <code>XOR</code> can also be written as <code>^</code>. <code>XOR</code> operations can be represented in a table as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>True XOR True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>True XOR False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False XOR True</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False XOR False</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr></tbody></table>\n<h5>2. <code>NOR</code></h5>\n<p><code>NOR</code>, or <strong>Not OR</strong>, also works just like <code>OR</code>, but it negates what <code>OR</code> returns. It can also be written as <code>~</code>.NAND<code>NOR</code> operations can be represented in a table as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>True NOR True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>True NOR False</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False NOR True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False NOR False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr></tbody></table>\n<h5>3. <code>NAND</code></h5>\n<p><code>NAND</code>, or <strong>Not AND</strong>, works exactly like <code>AND</code>, but it negates what <code>AND</code> returns. It can also be written as <code>@</code>. <code>NAND</code> operations can be represented in a table as:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Expression</th>\n<th align=\"center\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>True NAND True</code></td>\n<td align=\"center\"><code>False</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>True NAND False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False NAND True</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>False NAND False</code></td>\n<td align=\"center\"><code>True</code></td>\n</tr></tbody></table>\n<h3>Comments</h3>\n<p>Comments are lines of text meant for other people to read, rather than for the interpreter to run. If a line begins with a <code>#</code> character, the entire line is treated by the interpreter as if it is blank.</p>\n<h3>Errors</h3>\n<p>When you try to run code which has a mistake (like a missing bracket), the interpreter complains about your code instead of running it. This is an error. An error is basically the interpreter alerting you that there was something wrong with the code and so it can't run it. Once an error is thrown, you will have to fix whatever is wrong with your expression and rerun it.</p>\n<p>Examples:</p>\n<pre><code>Cs&gt; quux\nUndefined name \"quux\".\nCs&gt; random/  # Meant to say \"random\"\nInvalid syntax: \"/\".\n</code></pre>\n<h3>Exiting</h3>\n<p>Either pressing <code>Control + C</code> or typing in <code>exit</code> and hitting Enter will cause the interpreter to stop instantly and take you back to the normal shell.</p>\n<pre><code>Cs&gt; exit\n$\n</code></pre>\n<hr>\n<h2>TODO</h2>\n<ul>\n<li>An internal help mechanism so that you don't have to keep referring to the README.</li>\n</ul>\n<h2>Development Setup</h2>\n<ol>\n<li>Inside of a fresh virtualenv, install development packages by running <code>pip install -r requirements-dev.txt</code>.</li>\n<li>Assert everything is working by running  <code>pytest tests.py</code> from the project's root dir.</li>\n</ol>\n<h2>Contributing</h2>\n<ol>\n<li>Crete your feature branch by forking the <code>develop</code> branch.</li>\n<li>Commit your changes.</li>\n<li>Push to <code>origin/develop</code>.</li>\n<li>Open a pull request.</li>\n</ol>\n<h2>Notes</h2>\n<p>Just like the element Caesium, this app may break down. In case it does, please contact me or if you want to, fix it yourself.</p>\n<h2>Meta</h2>\n<ul>\n<li>Name: <strong>Armani Tallam</strong></li>\n<li>E-Mail: <a href=\"mailto:armanitallam@gmail.com\">armanitallam@gmail.com</a></li>\n<li>GitHub: <a href=\"https://www.github.com/Armani-T\" rel=\"nofollow\">https://www.github.com/Armani-T</a></li>\n</ul>\n<p>This project is licensed under the <strong>BSD 3-Clause License</strong>. Please see the <a href=\"./LICENSE.txt\" rel=\"nofollow\">license file</a>\nfor more information.</p>\n\n          </div>"}, "last_serial": 6219583, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c3fa10e2772164541d9303ec2e1d1016", "sha256": "1ae3768119c6f2f21c2f444fcc731aca1ade02743f0ae2e674e87052ffe41368"}, "downloads": -1, "filename": "caesium_lang-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3fa10e2772164541d9303ec2e1d1016", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5211, "upload_time": "2019-11-06T14:43:01", "upload_time_iso_8601": "2019-11-06T14:43:01.796089Z", "url": "https://files.pythonhosted.org/packages/e8/a2/050a0c0b0df48bef6e326c77b811483d4f34a519ef9636f8e4a0baf4320e/caesium_lang-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214c4dd76887dd53dcca1039402719d2", "sha256": "9c5bb6bf5340ce3d947e36ef56429a19bff346e8e565f6f513637a1f7c7f77e1"}, "downloads": -1, "filename": "caesium-lang-1.0.0.tar.gz", "has_sig": false, "md5_digest": "214c4dd76887dd53dcca1039402719d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4598, "upload_time": "2019-11-06T14:43:04", "upload_time_iso_8601": "2019-11-06T14:43:04.021976Z", "url": "https://files.pythonhosted.org/packages/39/00/eeedd52052fea4369cd56e80e454f3e47fca8c28342d5af0dd2ab4990d6b/caesium-lang-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "86301477e5f497f354541ec39e8dcc8a", "sha256": "d3e9f62af26319f44c531d0bbc4f6b500c34070dc117e66010d971bc74370654"}, "downloads": -1, "filename": "caesium_lang-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "86301477e5f497f354541ec39e8dcc8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5260, "upload_time": "2019-11-11T14:17:57", "upload_time_iso_8601": "2019-11-11T14:17:57.713779Z", "url": "https://files.pythonhosted.org/packages/ed/1e/fefa7ecfb9fdf010f24765458a9019e1b95aac6df4c539507de3647823f8/caesium_lang-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96dcbd5236ad6e66ab61d4f7b1ed775a", "sha256": "0cacf9666c61540c33f217f6e2e3c109b4081bf51951f82bafcde0f70d823e15"}, "downloads": -1, "filename": "caesium-lang-1.1.0.tar.gz", "has_sig": false, "md5_digest": "96dcbd5236ad6e66ab61d4f7b1ed775a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4638, "upload_time": "2019-11-11T14:18:00", "upload_time_iso_8601": "2019-11-11T14:18:00.773399Z", "url": "https://files.pythonhosted.org/packages/40/6a/c62316f496eedf8bb4f80c828627fe970525703c5fdd8e6328c71b1fe014/caesium-lang-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "a8d0252bcc8b9f35266a62abc4172b8a", "sha256": "305c1b9bfb1263ace965188e37e01387ed1c6932dbf83ae20f510a7a118d1ad1"}, "downloads": -1, "filename": "caesium_lang-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8d0252bcc8b9f35266a62abc4172b8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5179, "upload_time": "2019-11-29T20:04:28", "upload_time_iso_8601": "2019-11-29T20:04:28.043105Z", "url": "https://files.pythonhosted.org/packages/17/ab/1f1eb70270b8e5477afe0a51316a8a995a6ea21cd0335ecf60f782ad2a7b/caesium_lang-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a56a997526603e6a737909aeb276c720", "sha256": "daeb5434b32a30673e2fb32d0963cfaf2c3d337716bc6b142b1b7af471733b90"}, "downloads": -1, "filename": "caesium-lang-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a56a997526603e6a737909aeb276c720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4724, "upload_time": "2019-11-29T20:04:29", "upload_time_iso_8601": "2019-11-29T20:04:29.796428Z", "url": "https://files.pythonhosted.org/packages/a5/7c/48291c3c69776953243224f1318c963548a81bd62e7ae05367424586b33a/caesium-lang-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8d0252bcc8b9f35266a62abc4172b8a", "sha256": "305c1b9bfb1263ace965188e37e01387ed1c6932dbf83ae20f510a7a118d1ad1"}, "downloads": -1, "filename": "caesium_lang-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8d0252bcc8b9f35266a62abc4172b8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5179, "upload_time": "2019-11-29T20:04:28", "upload_time_iso_8601": "2019-11-29T20:04:28.043105Z", "url": "https://files.pythonhosted.org/packages/17/ab/1f1eb70270b8e5477afe0a51316a8a995a6ea21cd0335ecf60f782ad2a7b/caesium_lang-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a56a997526603e6a737909aeb276c720", "sha256": "daeb5434b32a30673e2fb32d0963cfaf2c3d337716bc6b142b1b7af471733b90"}, "downloads": -1, "filename": "caesium-lang-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a56a997526603e6a737909aeb276c720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4724, "upload_time": "2019-11-29T20:04:29", "upload_time_iso_8601": "2019-11-29T20:04:29.796428Z", "url": "https://files.pythonhosted.org/packages/a5/7c/48291c3c69776953243224f1318c963548a81bd62e7ae05367424586b33a/caesium-lang-1.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:41 2020"}