{"info": {"author": "Apache Software Foundation", "author_email": "dev@flink.apache.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Apache Flink Stateful Functions\n\nStateful Functions is an [Apache Flink](https://flink.apache.org/) library for distributed applications and services, based on, well, you guessed it: stateful functions.\n\nThe project aims to simplify the development of distributed stateful applications by solving some of the common\nchallenges in those applications: scaling, consistent state management, reliable interaction between distributed\nservices, and resource management.\n\nStateful Functions uses Apache Flink for distributed coordination, state, and communication.\n\nThis description is meant as a brief walkthrough on the core concepts and how to set things up\nto get yourself started with Stateful Functions.\n\nFor a fully detailed documentation, please visit the [official docs](https://ci.apache.org/projects/flink/flink-statefun-docs-release-stable).\n\nFor code examples, please visit the examples in the [Github repo](https://github.com/apache/flink-statefun/tree/master/statefun-examples).\n\n## Table of Contents\n\n- [Core Concepts](#core-concepts)\n   * [Abstraction](#abstraction)\n   * [Function modules and extensibility](#modules)\n- [Python SDK Overview](#sdkoverview)\n- [Contributing](#contributing)\n- [License](#license)\n\n## <a name=\"core-concepts\"></a>Core Concepts\n\n### <a name=\"abstraction\"></a>Abstraction\n\nA Stateful Functions application consists of the following primitives: stateful functions, ingresses,\nrouters, and egresses.\n\n#### Stateful functions\n\n* Stateful functions are the building blocks and namesake of the Stateful Functions framework.\nA function is a small piece of logic that are invoked through a message.\n\n* Each stateful function exist as uniquely invokable _virtual instances_ of a _function type_. Each instance\nis addressed by its type, as well as an unique id (a string) within its type.\n\n* Stateful functions may be invoked from ingresses or any other stateful function (including itself).\nThe caller simply needs to know the address of the target function.\n\n* Function instances are _virtual_, because they are not all active in memory at the same time.\nAt any point in time, only a small set of functions and their state exists as actual objects. When a\nvirtual instance receives a message, one of the objects is configured and loaded with the state of that virtual\ninstance and then processes the message. Similar to virtual memory, the state of many functions might be \u201cswapped out\u201d\nat any point in time.\n\n* Each virtual instance of a function has its own state, which can be accessed in local variables.\nThat state is private and local to that instance.\n\nIf you know Apache Flink\u2019s `DataStream` API, you can think of stateful functions a bit like a lightweight\n`KeyedProcessFunction`. The function type is process function transformation, while the ID is the key. The difference\nis that functions are not assembled in a directed acyclic graph that defines the flow of data (the streaming topology),\nbut rather send events arbitrarily to all other functions using addresses.\n\n#### Ingresses and Egresses\n\n* _Ingresses_ are the way that events initially arrive in a Stateful Functions application.\nIngresses can be message queues, logs, or HTTP servers - anything that produces an event to be\nhandled by the application.\n\n* _Routers_ are attached to ingresses to determine which function instance should handle an event initially.\n\n* _Egresses_ are a way to send events out from the application in a standardized way.\nEgresses are optional; it is also possible that no events leave the application and functions sink events or\ndirectly make calls to other applications.\n\n### <a name=\"modules\"></a>Modules and extensibility\n\nA _module_ is the entry point for adding to a Stateful Functions\napplication the core building block primitives, i.e. ingresses, egresses, routers, and stateful functions.\n\nA single application may be a combination of multiple modules, each contributing a part of the whole application.\nThis allows different parts of the application to be contributed by different modules; for example,\none module may provide ingresses and egresses, while other modules may individually contribute specific parts of the\nbusiness logic as stateful functions. This facilitates working in independent teams, but still deploying\ninto the same larger application.\n\n## <a name=\"sdkoverview\"></a> Python SDK Overview\n\n### Background\n\nThe JVM based stateful functions implementation, has a `RequestReply` extension (a protocol and an implementation) that allows calling into any HTTP endpoint that implements that protocol.\n\nAlthough it is possible to implement this protocol independently, this is a minimal library for the Python programing language, that:\n\n* Allows users to define and declare their functions in a convenient way\n* Dispatch an invocation request sent from the JVM to the appropriate function previously declared\n\n### A Mini Tutorial\n\n#### Define and Declare a function\n\n```\nfrom statefun import StatefulFunctions\n\nfunctions = StatefulFunctions()\n\n@functions.bind(\"demo/greeter\")\ndef greet(context, message: LoginEvent):\n    print(\"Hey \" + message.user_name)\n```\n\nThis code, declares a function with a `FunctionType(\"demo\", \"greeter\")` and binds the greet Python instance to it.\n\n#### Expose with a Request Reply Handler\n\n```\nfrom statefun import RequestReplyHandler\n\nhandler = RequestReplyHandler(functions)\n```\n\n#### Using the Handler with your Favorite HTTP Serving Framework\n\nFor example, using Flask:\n\n``` \n@app.route('/statefun', methods=['POST'])\ndef handle():\n    response_data = handler(request.data)\n    esponse = make_response(response_data)\n    response.headers.set('Content-Type', 'application/octet-stream')\n    return response\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nThis creates an HTTP server that accepts requests from the Stateful Functions cluster and\ndispatches it to the handler.\n\n#### Composing the Module YAML File\n\nThe remaining step would be to declare this function type in a module.yaml\n\n```\nfunctions:\n  - function:\n    meta:\n      kind: http\n      type: demo/greeter\n    spec:\n      endpoint: http://<end point url>/statefun\n      states:\n        - foo\n        - bar\n        - baz\n```\n\n#### Eager State Registration\n\nThe request reply protocol, requires that the state names would be registered in the module YAML file\nunder the `states` section (see the example above). The state values could be absent (`None` or a `google.protobuf.Any`) and they can be generally obtained via the context parameter:\n\n```\n@functions.bind(\"demo/greeter\")\ndef greet(context, message: LoginEvent):\n    session = context['session']\n    if not session:\n       session = start_session(message)\n       context['session'] = session\n    ...\n\n```\n\n### Testing\n\n1. Create a virtual environment\n\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n2. Run unit tests\n\n```\npython3 -m unittest tests\n```\n\n## <a name=\"contributing\"></a>Contributing\n\nThere are many possible ways to enhance the Stateful Functions API for different types of applications. The runtime and operations will also evolve with the developments in Apache Flink. If you find these ideas interesting or promising, try Stateful Functions out and get involved! \n\nYou can learn more about how to contribute in the [Apache Flink website](https://flink.apache.org/contributing/how-to-contribute.html). For code contributions, please read carefully the [Contributing Code](https://flink.apache.org/contributing/contribute-code.html) section and check the _Stateful Functions_ component in [Jira](https://issues.apache.org/jira/browse/FLINK-15969?jql=project%20%3D%20FLINK%20AND%20component%20%3D%20%22Stateful%20Functions%22) for an overview of ongoing community work.\n\n## <a name=\"license\"></a>License\n\nThe code in this repository is licensed under the [Apache Software License 2](LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/apache/flink-statefun", "keywords": "", "license": "https://www.apache.org/licenses/LICENSE-2.0", "maintainer": "", "maintainer_email": "", "name": "apache-flink-statefun", "package_url": "https://pypi.org/project/apache-flink-statefun/", "platform": "", "project_url": "https://pypi.org/project/apache-flink-statefun/", "project_urls": {"Homepage": "https://github.com/apache/flink-statefun"}, "release_url": "https://pypi.org/project/apache-flink-statefun/2.0.0/", "requires_dist": ["protobuf (<4.0.0,>=3.11.3)"], "requires_python": ">=3.5", "summary": "Python SDK for Apache Flink Stateful functions", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Apache Flink Stateful Functions</h1>\n<p>Stateful Functions is an <a href=\"https://flink.apache.org/\" rel=\"nofollow\">Apache Flink</a> library for distributed applications and services, based on, well, you guessed it: stateful functions.</p>\n<p>The project aims to simplify the development of distributed stateful applications by solving some of the common\nchallenges in those applications: scaling, consistent state management, reliable interaction between distributed\nservices, and resource management.</p>\n<p>Stateful Functions uses Apache Flink for distributed coordination, state, and communication.</p>\n<p>This description is meant as a brief walkthrough on the core concepts and how to set things up\nto get yourself started with Stateful Functions.</p>\n<p>For a fully detailed documentation, please visit the <a href=\"https://ci.apache.org/projects/flink/flink-statefun-docs-release-stable\" rel=\"nofollow\">official docs</a>.</p>\n<p>For code examples, please visit the examples in the <a href=\"https://github.com/apache/flink-statefun/tree/master/statefun-examples\" rel=\"nofollow\">Github repo</a>.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#core-concepts\" rel=\"nofollow\">Core Concepts</a>\n<ul>\n<li><a href=\"#abstraction\" rel=\"nofollow\">Abstraction</a></li>\n<li><a href=\"#modules\" rel=\"nofollow\">Function modules and extensibility</a></li>\n</ul>\n</li>\n<li><a href=\"#sdkoverview\" rel=\"nofollow\">Python SDK Overview</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2><a></a>Core Concepts</h2>\n<h3><a></a>Abstraction</h3>\n<p>A Stateful Functions application consists of the following primitives: stateful functions, ingresses,\nrouters, and egresses.</p>\n<h4>Stateful functions</h4>\n<ul>\n<li>\n<p>Stateful functions are the building blocks and namesake of the Stateful Functions framework.\nA function is a small piece of logic that are invoked through a message.</p>\n</li>\n<li>\n<p>Each stateful function exist as uniquely invokable <em>virtual instances</em> of a <em>function type</em>. Each instance\nis addressed by its type, as well as an unique id (a string) within its type.</p>\n</li>\n<li>\n<p>Stateful functions may be invoked from ingresses or any other stateful function (including itself).\nThe caller simply needs to know the address of the target function.</p>\n</li>\n<li>\n<p>Function instances are <em>virtual</em>, because they are not all active in memory at the same time.\nAt any point in time, only a small set of functions and their state exists as actual objects. When a\nvirtual instance receives a message, one of the objects is configured and loaded with the state of that virtual\ninstance and then processes the message. Similar to virtual memory, the state of many functions might be \u201cswapped out\u201d\nat any point in time.</p>\n</li>\n<li>\n<p>Each virtual instance of a function has its own state, which can be accessed in local variables.\nThat state is private and local to that instance.</p>\n</li>\n</ul>\n<p>If you know Apache Flink\u2019s <code>DataStream</code> API, you can think of stateful functions a bit like a lightweight\n<code>KeyedProcessFunction</code>. The function type is process function transformation, while the ID is the key. The difference\nis that functions are not assembled in a directed acyclic graph that defines the flow of data (the streaming topology),\nbut rather send events arbitrarily to all other functions using addresses.</p>\n<h4>Ingresses and Egresses</h4>\n<ul>\n<li>\n<p><em>Ingresses</em> are the way that events initially arrive in a Stateful Functions application.\nIngresses can be message queues, logs, or HTTP servers - anything that produces an event to be\nhandled by the application.</p>\n</li>\n<li>\n<p><em>Routers</em> are attached to ingresses to determine which function instance should handle an event initially.</p>\n</li>\n<li>\n<p><em>Egresses</em> are a way to send events out from the application in a standardized way.\nEgresses are optional; it is also possible that no events leave the application and functions sink events or\ndirectly make calls to other applications.</p>\n</li>\n</ul>\n<h3><a></a>Modules and extensibility</h3>\n<p>A <em>module</em> is the entry point for adding to a Stateful Functions\napplication the core building block primitives, i.e. ingresses, egresses, routers, and stateful functions.</p>\n<p>A single application may be a combination of multiple modules, each contributing a part of the whole application.\nThis allows different parts of the application to be contributed by different modules; for example,\none module may provide ingresses and egresses, while other modules may individually contribute specific parts of the\nbusiness logic as stateful functions. This facilitates working in independent teams, but still deploying\ninto the same larger application.</p>\n<h2><a></a> Python SDK Overview</h2>\n<h3>Background</h3>\n<p>The JVM based stateful functions implementation, has a <code>RequestReply</code> extension (a protocol and an implementation) that allows calling into any HTTP endpoint that implements that protocol.</p>\n<p>Although it is possible to implement this protocol independently, this is a minimal library for the Python programing language, that:</p>\n<ul>\n<li>Allows users to define and declare their functions in a convenient way</li>\n<li>Dispatch an invocation request sent from the JVM to the appropriate function previously declared</li>\n</ul>\n<h3>A Mini Tutorial</h3>\n<h4>Define and Declare a function</h4>\n<pre><code>from statefun import StatefulFunctions\n\nfunctions = StatefulFunctions()\n\n@functions.bind(\"demo/greeter\")\ndef greet(context, message: LoginEvent):\n    print(\"Hey \" + message.user_name)\n</code></pre>\n<p>This code, declares a function with a <code>FunctionType(\"demo\", \"greeter\")</code> and binds the greet Python instance to it.</p>\n<h4>Expose with a Request Reply Handler</h4>\n<pre><code>from statefun import RequestReplyHandler\n\nhandler = RequestReplyHandler(functions)\n</code></pre>\n<h4>Using the Handler with your Favorite HTTP Serving Framework</h4>\n<p>For example, using Flask:</p>\n<pre><code>@app.route('/statefun', methods=['POST'])\ndef handle():\n    response_data = handler(request.data)\n    esponse = make_response(response_data)\n    response.headers.set('Content-Type', 'application/octet-stream')\n    return response\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>\n<p>This creates an HTTP server that accepts requests from the Stateful Functions cluster and\ndispatches it to the handler.</p>\n<h4>Composing the Module YAML File</h4>\n<p>The remaining step would be to declare this function type in a module.yaml</p>\n<pre><code>functions:\n  - function:\n    meta:\n      kind: http\n      type: demo/greeter\n    spec:\n      endpoint: http://&lt;end point url&gt;/statefun\n      states:\n        - foo\n        - bar\n        - baz\n</code></pre>\n<h4>Eager State Registration</h4>\n<p>The request reply protocol, requires that the state names would be registered in the module YAML file\nunder the <code>states</code> section (see the example above). The state values could be absent (<code>None</code> or a <code>google.protobuf.Any</code>) and they can be generally obtained via the context parameter:</p>\n<pre><code>@functions.bind(\"demo/greeter\")\ndef greet(context, message: LoginEvent):\n    session = context['session']\n    if not session:\n       session = start_session(message)\n       context['session'] = session\n    ...\n\n</code></pre>\n<h3>Testing</h3>\n<ol>\n<li>Create a virtual environment</li>\n</ol>\n<pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre>\n<ol>\n<li>Run unit tests</li>\n</ol>\n<pre><code>python3 -m unittest tests\n</code></pre>\n<h2><a></a>Contributing</h2>\n<p>There are many possible ways to enhance the Stateful Functions API for different types of applications. The runtime and operations will also evolve with the developments in Apache Flink. If you find these ideas interesting or promising, try Stateful Functions out and get involved!</p>\n<p>You can learn more about how to contribute in the <a href=\"https://flink.apache.org/contributing/how-to-contribute.html\" rel=\"nofollow\">Apache Flink website</a>. For code contributions, please read carefully the <a href=\"https://flink.apache.org/contributing/contribute-code.html\" rel=\"nofollow\">Contributing Code</a> section and check the <em>Stateful Functions</em> component in <a href=\"https://issues.apache.org/jira/browse/FLINK-15969?jql=project%20%3D%20FLINK%20AND%20component%20%3D%20%22Stateful%20Functions%22\" rel=\"nofollow\">Jira</a> for an overview of ongoing community work.</p>\n<h2><a></a>License</h2>\n<p>The code in this repository is licensed under the <a href=\"LICENSE\" rel=\"nofollow\">Apache Software License 2</a>.</p>\n\n          </div>"}, "last_serial": 6966642, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "9853ccbdcb4fbe4f14f9fd34f3d40abd", "sha256": "666e705e0d7b36e1ce3434fa758ec028446b65bc26b9f8a9e679abb1c3fad427"}, "downloads": -1, "filename": "apache_flink_statefun-2.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9853ccbdcb4fbe4f14f9fd34f3d40abd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21534, "upload_time": "2020-04-07T05:37:42", "upload_time_iso_8601": "2020-04-07T05:37:42.224420Z", "url": "https://files.pythonhosted.org/packages/0a/06/807824bf65627596b85b09233e87a461607b15a3370b57526a40593274d4/apache_flink_statefun-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4135ef57349a3190232a1e2eca59eaec", "sha256": "40d61f7f81fadb09e5ca7a3b7813fb00746cbd2d56eee4c33f2299f8c6236ee8"}, "downloads": -1, "filename": "apache-flink-statefun-2.0.0.tar.gz", "has_sig": true, "md5_digest": "4135ef57349a3190232a1e2eca59eaec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16484, "upload_time": "2020-04-07T05:37:45", "upload_time_iso_8601": "2020-04-07T05:37:45.049802Z", "url": "https://files.pythonhosted.org/packages/bb/26/4b7fc94f603ac214eaf7dc98ebf403b6e248c1de8648a7c38d0954e037b8/apache-flink-statefun-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9853ccbdcb4fbe4f14f9fd34f3d40abd", "sha256": "666e705e0d7b36e1ce3434fa758ec028446b65bc26b9f8a9e679abb1c3fad427"}, "downloads": -1, "filename": "apache_flink_statefun-2.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "9853ccbdcb4fbe4f14f9fd34f3d40abd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21534, "upload_time": "2020-04-07T05:37:42", "upload_time_iso_8601": "2020-04-07T05:37:42.224420Z", "url": "https://files.pythonhosted.org/packages/0a/06/807824bf65627596b85b09233e87a461607b15a3370b57526a40593274d4/apache_flink_statefun-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4135ef57349a3190232a1e2eca59eaec", "sha256": "40d61f7f81fadb09e5ca7a3b7813fb00746cbd2d56eee4c33f2299f8c6236ee8"}, "downloads": -1, "filename": "apache-flink-statefun-2.0.0.tar.gz", "has_sig": true, "md5_digest": "4135ef57349a3190232a1e2eca59eaec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16484, "upload_time": "2020-04-07T05:37:45", "upload_time_iso_8601": "2020-04-07T05:37:45.049802Z", "url": "https://files.pythonhosted.org/packages/bb/26/4b7fc94f603ac214eaf7dc98ebf403b6e248c1de8648a7c38d0954e037b8/apache-flink-statefun-2.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:53 2020"}