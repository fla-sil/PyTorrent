{"info": {"author": "Anentropic", "author_email": "ego@anentropic.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Text Processing"], "description": "=========\nmegaparsy\n=========\n\n|Build Status| |PyPi Version|\n\n|Python3.6| |Python3.7| |Python3.8|\n\n.. |Build Status| image:: https://travis-ci.org/anentropic/megaparsy.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/anentropic/megaparsy\n.. |PyPi Version| image:: https://badge.fury.io/py/megaparsy.svg\n    :alt: Latest PyPI version\n    :target: https://pypi.python.org/pypi/megaparsy/\n.. |Python3.6| image:: https://img.shields.io/badge/Python%203.6--brightgreen.svg\n    :alt: Python 3.6\n.. |Python3.7| image:: https://img.shields.io/badge/Python%203.7--brightgreen.svg\n    :alt: Python 3.7\n.. |Python3.8| image:: https://img.shields.io/badge/Python%203.8--brightgreen.svg\n    :alt: Python 3.8\n\n\nWork In Progress - ignore for now ;)\n\nInitial motivation for this project was to build an indentation-sensitive parser. This is problematic for any parser library which is limited to expressing context-free grammars (which is most of them), unless you use a separate pre-processing step (like e.g. the parser for the Python language does).\n\nGoogling around this topic I came upon `<https://markkarpov.com/tutorial/megaparsec.html#indentationsensitive-parsing>`_\n\nSo in Haskell-land we can find 'Monadic Parser Combinators', which do not have this restriciton to CFGs. And the `Megaparsec <https://hackage.haskell.org/package/megaparsec>`_ library defines many useful combinators, including some which designed specifically to help with building indentation-sensitive parsers.\n\nBut... it was difficult for me to learn to make a parser for the first time *and* learn Haskell simultaneously. So I looked around for a Python option and found the  brilliant `Parsy <https://parsy.readthedocs.io/en/latest/>`_ library. It provides an implementation of 'Monadic Parser Combinators' in Python.\n\nNicely and simply explained here:\n\n.. figure:: http://img.youtube.com/vi/dDtZLm7HIJs/0.jpg\n   :alt: Functional or Combinator Parsing explained by Professor Graham Hutton.\n   :target: http://www.youtube.com/watch?v=dDtZLm7HIJs\n\n   *Functional or Combinator Parsing explained by Professor Graham Hutton.*\n\nSo in *Megaparsy* I have ported a bunch of the Megaparsec combinators over to Parsy. It is surprising how smoothly it went and how similar they come out - this is testament to the genius of Parsy, which is where all the clever part is.\n\n(I haven't done all of them yet, but the indentation-sensitive ones are here)\n\nI've also roughly translated across the property-based tests from their Haskell QuickCheck originals into Python `Hypothesis <https://hypothesis.readthedocs.io/en/latest/>`_ ones.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anentropic/megaparsy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "megaparsy", "package_url": "https://pypi.org/project/megaparsy/", "platform": "", "project_url": "https://pypi.org/project/megaparsy/", "project_urls": {"Homepage": "https://github.com/anentropic/megaparsy"}, "release_url": "https://pypi.org/project/megaparsy/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "Library porting many of the combinators from Haskell's Megaparsec for use with Python's Parsy.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/anentropic/megaparsy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6c3adc6807218caef1d5f83bc60b6fa65545316/68747470733a2f2f7472617669732d63692e6f72672f616e656e74726f7069632f6d65676170617273792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/megaparsy/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a1e43a4725715d7117c55d26f129394e2aa3aa46/68747470733a2f2f62616467652e667572792e696f2f70792f6d65676170617273792e737667\"></a></p>\n<p><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ec6b3efd3605757c9320590f78ad88c2a8adb95/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e362d2d627269676874677265656e2e737667\"> <img alt=\"Python 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f588af29177efc1e9cbf24a8fb8d954cb2b53e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e372d2d627269676874677265656e2e737667\"> <img alt=\"Python 3.8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adbddcb1472156fafc06c8935e82d2d0ad8dc27d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e382d2d627269676874677265656e2e737667\"></p>\n<p>Work In Progress - ignore for now ;)</p>\n<p>Initial motivation for this project was to build an indentation-sensitive parser. This is problematic for any parser library which is limited to expressing context-free grammars (which is most of them), unless you use a separate pre-processing step (like e.g. the parser for the Python language does).</p>\n<p>Googling around this topic I came upon <a href=\"https://markkarpov.com/tutorial/megaparsec.html#indentationsensitive-parsing\" rel=\"nofollow\">https://markkarpov.com/tutorial/megaparsec.html#indentationsensitive-parsing</a></p>\n<p>So in Haskell-land we can find \u2018Monadic Parser Combinators\u2019, which do not have this restriciton to CFGs. And the <a href=\"https://hackage.haskell.org/package/megaparsec\" rel=\"nofollow\">Megaparsec</a> library defines many useful combinators, including some which designed specifically to help with building indentation-sensitive parsers.</p>\n<p>But\u2026 it was difficult for me to learn to make a parser for the first time <em>and</em> learn Haskell simultaneously. So I looked around for a Python option and found the  brilliant <a href=\"https://parsy.readthedocs.io/en/latest/\" rel=\"nofollow\">Parsy</a> library. It provides an implementation of \u2018Monadic Parser Combinators\u2019 in Python.</p>\n<p>Nicely and simply explained here:</p>\n<div>\n<a href=\"http://www.youtube.com/watch?v=dDtZLm7HIJs\" rel=\"nofollow\"><img alt=\"Functional or Combinator Parsing explained by Professor Graham Hutton.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc6f3432c0d1c46cea9903233ba00745373c3f83/687474703a2f2f696d672e796f75747562652e636f6d2f76692f6444745a4c6d3748494a732f302e6a7067\"></a>\n<p><em>Functional or Combinator Parsing explained by Professor Graham Hutton.</em></p>\n</div>\n<p>So in <em>Megaparsy</em> I have ported a bunch of the Megaparsec combinators over to Parsy. It is surprising how smoothly it went and how similar they come out - this is testament to the genius of Parsy, which is where all the clever part is.</p>\n<p>(I haven\u2019t done all of them yet, but the indentation-sensitive ones are here)</p>\n<p>I\u2019ve also roughly translated across the property-based tests from their Haskell QuickCheck originals into Python <a href=\"https://hypothesis.readthedocs.io/en/latest/\" rel=\"nofollow\">Hypothesis</a> ones.</p>\n\n          </div>"}, "last_serial": 6613343, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "da2a194806e78931637983a80177a3b9", "sha256": "0d09a45b6e3d9e5ac0035c108b0dbf14612e10b9f634f6ee089afb8fe3af96f9"}, "downloads": -1, "filename": "megaparsy-0.1.3.tar.gz", "has_sig": false, "md5_digest": "da2a194806e78931637983a80177a3b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7371, "upload_time": "2020-02-11T23:06:59", "upload_time_iso_8601": "2020-02-11T23:06:59.291322Z", "url": "https://files.pythonhosted.org/packages/94/e5/cc44407295b0bea2127cfba36ff0e9a780232b6f6ea9206dd694f14fd63a/megaparsy-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "5131694146321b43f99c2082a5c9e697", "sha256": "2b5001a7c9322976e9b38b5baa64af93888a1dab943f6162d3d80afb25763fd6"}, "downloads": -1, "filename": "megaparsy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5131694146321b43f99c2082a5c9e697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7356, "upload_time": "2020-02-12T00:01:34", "upload_time_iso_8601": "2020-02-12T00:01:34.888650Z", "url": "https://files.pythonhosted.org/packages/5e/f5/495b4da4f27aced864854e77eacbe86f5e33682bf26d8f532aa0f3050e5b/megaparsy-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5131694146321b43f99c2082a5c9e697", "sha256": "2b5001a7c9322976e9b38b5baa64af93888a1dab943f6162d3d80afb25763fd6"}, "downloads": -1, "filename": "megaparsy-0.1.4.tar.gz", "has_sig": false, "md5_digest": "5131694146321b43f99c2082a5c9e697", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7356, "upload_time": "2020-02-12T00:01:34", "upload_time_iso_8601": "2020-02-12T00:01:34.888650Z", "url": "https://files.pythonhosted.org/packages/5e/f5/495b4da4f27aced864854e77eacbe86f5e33682bf26d8f532aa0f3050e5b/megaparsy-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:29 2020"}