{"info": {"author": "Diddi Oskarsson", "author_email": "diddi@diddi.se", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Flask-Seeder\n[![Build Status](https://travis-ci.org/diddi-/flask-seeder.svg?branch=master)](https://travis-ci.org/diddi-/flask-seeder)\n[![Coverage Status](https://coveralls.io/repos/github/diddi-/flask-seeder/badge.svg?branch=master)](https://coveralls.io/github/diddi-/flask-seeder?branch=master)\n\nFlask-Seeder is a Flask extension to help with seeding database with initial data, for example when deploying an application for the first time.\n\nThis extensions primary focus is to help populating data once, for example in a demo application where the database might get wiped over and over but you still want users to have some basic data to play around with.\n\n\n# Installation\n\n```\npip install Flask-Seeder\n```\nThis will install the Flask-Seeder extension and add a `flask seed` subcommand, check it out to see what arguments are supported!\n\n# Seeders\nFlask-Seeder provides a base class `Seeder` that holds a database handle.\nBy subclassing `Seeder` and implementing a `run()` method you get access to the database handle object and can start seeding the database with data.\n\nAll seeders must be somewhere in the `seeds/` directory and inherit from `Seeder` or else they won't be detected.\n\nWhen all seeders have completed (successfully or not), Flask-Seeder will by default commit all changes to the database. This behaviour can be overridden with `--no-commit` or setting environment variable `FLASK_SEEDER_AUTOCOMMIT=0`.\n\n## Run Order\n\nWhen splitting seeders across multiple classes and files, order of operations is determined by two factors.\nFirst the seeders are grouped by `priority` (lower priority will be run first), all seeders with the same priority\nare then ordered by class name.\n\nSee example below for setting priority on a seeder.\n\n```python\nfrom flask_seeder import Seeder\n\nclass DemoSeeder(Seeder):\n  def __init__(self, db=None):\n    super().__init__(db=db)\n    self.priority = 10\n\n  def run(self):\n    ...\n```\n\n# Faker and Generators\nFlask-Seeder provides a `Faker` class that controls the creation of fake objects, based on real models. By telling `Faker` how to create the objects, you can easily create many different unique objects to help when seeding the database.\n\nThere are different generators that help generate values for the fake objects.\nCurrently supported generators are:\n* Integer: Create a random integer between two values\n* Sequence: Create integers in sequence if called multiple times\n* Name: Create a random name from a list `data/names/names.txt`\n* String: String generation from a pattern\n\nFeel free to roll your own generator by subclassing `Generator` and implement a `generate()` method that return the generated value.\n\n## String generator pattern\nThe `String` generator takes a pattern and produces a string that matches the pattern.\nCurrently the generator pattern is very simple and supports only a handful of operations.\n\n| Pattern | Produces | Description | Example |\n| --| -- | -- | -- |\n| [abc] | String character | Randomly select one of the provided characters | `b` |\n| [a-k] | String character | Randomly select one character from a range | `i` |\n| \\c | String character | Randomly select any alpha character (a-z, A-Z) | `B` |\n| (one\\|two) | String group | Like `[abc]` but works for strings, not just single characters | `one` |\n| \\d | Digit | Randomly select a single digit (0-9) | `8` |\n| {x} | Repeater | Repeat the previous pattern `x` times | `\\d{5}` |\n| {m,n} | Repeater | Repeat the previous pattern `x` times where `x` is anywhere between `m` and `n` | `[0-9]{2,8}` |\n| abc | String literal | No processing, returned as is | `abc` |\n\nPatterns can also be combined to produce more complex strings.\n```\n# Produces something like: abc5586oz\nabc[5-9]{4}\\c[xyz]\n```\n\n# Example usage\nExamples show only relevant snippets of code\n\n**app.py:**\n```python\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_seeder import FlaskSeeder\n\ndef create_app():\n  app = Flask(__name__)\n\n  db = SQLAlchemy()\n  db.init_app(app)\n\n  seeder = FlaskSeeder()\n  seeder.init_app(app, db)\n\n  return app\n```\n\n**seeds/demo.py:**\n```python\nfrom flask_seeder import Seeder, Faker, generator\n\n# SQLAlchemy database model\nclass User(Base):\n  def __init__(self, id_num=None, name=None, age=None):\n    self.id_num = id_num\n    self.name = name\n    self.age = age\n\n  def __str__(self):\n    return \"ID=%d, Name=%s, Age=%d\" % (self.id_num, self.name, self.age)\n\n# All seeders inherit from Seeder\nclass DemoSeeder(Seeder):\n\n  # run() will be called by Flask-Seeder\n  def run(self):\n    # Create a new Faker and tell it how to create User objects\n    faker = Faker(\n      cls=User,\n      init={\n        \"id_num\": generator.Sequence(),\n        \"name\": generator.Name(),\n        \"age\": generator.Integer(start=20, end=100)\n      }\n    )\n\n    # Create 5 users\n    for user in faker.create(5):\n      print(\"Adding user: %s\" % user)\n      self.db.session.add(user)\n```\n\n***Shell***\n```bash\n$ flask seed run\nRunning database seeders\nAdding user: ID=1, Name=Fancie, Age=76\nAdding user: ID=2, Name=Shela, Age=22\nAdding user: ID=3, Name=Jo, Age=33\nAdding user: ID=4, Name=Laureen, Age=54\nAdding user: ID=5, Name=Tandy, Age=66\nDemoSeeder... [OK]\nCommitting to database!\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/diddi-/flask-seeder", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-Seeder", "package_url": "https://pypi.org/project/Flask-Seeder/", "platform": "", "project_url": "https://pypi.org/project/Flask-Seeder/", "project_urls": {"Homepage": "https://github.com/diddi-/flask-seeder"}, "release_url": "https://pypi.org/project/Flask-Seeder/1.1.1/", "requires_dist": ["Flask (>=1.0.2)"], "requires_python": "", "summary": "Flask extension to seed database through scripts", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-Seeder</h1>\n<p><a href=\"https://travis-ci.org/diddi-/flask-seeder\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ca6d17fd144b83bd2a7cd9ef799d91159f57608/68747470733a2f2f7472617669732d63692e6f72672f64696464692d2f666c61736b2d7365656465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/diddi-/flask-seeder?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a17c4af3408d9fcfbeaaecd8cbbf43068547097b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64696464692d2f666c61736b2d7365656465722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Flask-Seeder is a Flask extension to help with seeding database with initial data, for example when deploying an application for the first time.</p>\n<p>This extensions primary focus is to help populating data once, for example in a demo application where the database might get wiped over and over but you still want users to have some basic data to play around with.</p>\n<h1>Installation</h1>\n<pre><code>pip install Flask-Seeder\n</code></pre>\n<p>This will install the Flask-Seeder extension and add a <code>flask seed</code> subcommand, check it out to see what arguments are supported!</p>\n<h1>Seeders</h1>\n<p>Flask-Seeder provides a base class <code>Seeder</code> that holds a database handle.\nBy subclassing <code>Seeder</code> and implementing a <code>run()</code> method you get access to the database handle object and can start seeding the database with data.</p>\n<p>All seeders must be somewhere in the <code>seeds/</code> directory and inherit from <code>Seeder</code> or else they won't be detected.</p>\n<p>When all seeders have completed (successfully or not), Flask-Seeder will by default commit all changes to the database. This behaviour can be overridden with <code>--no-commit</code> or setting environment variable <code>FLASK_SEEDER_AUTOCOMMIT=0</code>.</p>\n<h2>Run Order</h2>\n<p>When splitting seeders across multiple classes and files, order of operations is determined by two factors.\nFirst the seeders are grouped by <code>priority</code> (lower priority will be run first), all seeders with the same priority\nare then ordered by class name.</p>\n<p>See example below for setting priority on a seeder.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_seeder</span> <span class=\"kn\">import</span> <span class=\"n\">Seeder</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DemoSeeder</span><span class=\"p\">(</span><span class=\"n\">Seeder</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<h1>Faker and Generators</h1>\n<p>Flask-Seeder provides a <code>Faker</code> class that controls the creation of fake objects, based on real models. By telling <code>Faker</code> how to create the objects, you can easily create many different unique objects to help when seeding the database.</p>\n<p>There are different generators that help generate values for the fake objects.\nCurrently supported generators are:</p>\n<ul>\n<li>Integer: Create a random integer between two values</li>\n<li>Sequence: Create integers in sequence if called multiple times</li>\n<li>Name: Create a random name from a list <code>data/names/names.txt</code></li>\n<li>String: String generation from a pattern</li>\n</ul>\n<p>Feel free to roll your own generator by subclassing <code>Generator</code> and implement a <code>generate()</code> method that return the generated value.</p>\n<h2>String generator pattern</h2>\n<p>The <code>String</code> generator takes a pattern and produces a string that matches the pattern.\nCurrently the generator pattern is very simple and supports only a handful of operations.</p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Produces</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[abc]</td>\n<td>String character</td>\n<td>Randomly select one of the provided characters</td>\n<td><code>b</code></td>\n</tr>\n<tr>\n<td>[a-k]</td>\n<td>String character</td>\n<td>Randomly select one character from a range</td>\n<td><code>i</code></td>\n</tr>\n<tr>\n<td>\\c</td>\n<td>String character</td>\n<td>Randomly select any alpha character (a-z, A-Z)</td>\n<td><code>B</code></td>\n</tr>\n<tr>\n<td>(one|two)</td>\n<td>String group</td>\n<td>Like <code>[abc]</code> but works for strings, not just single characters</td>\n<td><code>one</code></td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>Digit</td>\n<td>Randomly select a single digit (0-9)</td>\n<td><code>8</code></td>\n</tr>\n<tr>\n<td>{x}</td>\n<td>Repeater</td>\n<td>Repeat the previous pattern <code>x</code> times</td>\n<td><code>\\d{5}</code></td>\n</tr>\n<tr>\n<td>{m,n}</td>\n<td>Repeater</td>\n<td>Repeat the previous pattern <code>x</code> times where <code>x</code> is anywhere between <code>m</code> and <code>n</code></td>\n<td><code>[0-9]{2,8}</code></td>\n</tr>\n<tr>\n<td>abc</td>\n<td>String literal</td>\n<td>No processing, returned as is</td>\n<td><code>abc</code></td>\n</tr></tbody></table>\n<p>Patterns can also be combined to produce more complex strings.</p>\n<pre><code># Produces something like: abc5586oz\nabc[5-9]{4}\\c[xyz]\n</code></pre>\n<h1>Example usage</h1>\n<p>Examples show only relevant snippets of code</p>\n<p><strong>app.py:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_seeder</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskSeeder</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n  <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n  <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">()</span>\n  <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n  <span class=\"n\">seeder</span> <span class=\"o\">=</span> <span class=\"n\">FlaskSeeder</span><span class=\"p\">()</span>\n  <span class=\"n\">seeder</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">)</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">app</span>\n</pre>\n<p><strong>seeds/demo.py:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_seeder</span> <span class=\"kn\">import</span> <span class=\"n\">Seeder</span><span class=\"p\">,</span> <span class=\"n\">Faker</span><span class=\"p\">,</span> <span class=\"n\">generator</span>\n\n<span class=\"c1\"># SQLAlchemy database model</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">id_num</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id_num</span> <span class=\"o\">=</span> <span class=\"n\">id_num</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n\n  <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"ID=</span><span class=\"si\">%d</span><span class=\"s2\">, Name=</span><span class=\"si\">%s</span><span class=\"s2\">, Age=</span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id_num</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All seeders inherit from Seeder</span>\n<span class=\"k\">class</span> <span class=\"nc\">DemoSeeder</span><span class=\"p\">(</span><span class=\"n\">Seeder</span><span class=\"p\">):</span>\n\n  <span class=\"c1\"># run() will be called by Flask-Seeder</span>\n  <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create a new Faker and tell it how to create User objects</span>\n    <span class=\"n\">faker</span> <span class=\"o\">=</span> <span class=\"n\">Faker</span><span class=\"p\">(</span>\n      <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">,</span>\n      <span class=\"n\">init</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"id_num\"</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">(),</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">Name</span><span class=\"p\">(),</span>\n        <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Create 5 users</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">faker</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Adding user: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<p><em><strong>Shell</strong></em></p>\n<pre>$ flask seed run\nRunning database seeders\nAdding user: <span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">1</span>, <span class=\"nv\">Name</span><span class=\"o\">=</span>Fancie, <span class=\"nv\">Age</span><span class=\"o\">=</span><span class=\"m\">76</span>\nAdding user: <span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">2</span>, <span class=\"nv\">Name</span><span class=\"o\">=</span>Shela, <span class=\"nv\">Age</span><span class=\"o\">=</span><span class=\"m\">22</span>\nAdding user: <span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">3</span>, <span class=\"nv\">Name</span><span class=\"o\">=</span>Jo, <span class=\"nv\">Age</span><span class=\"o\">=</span><span class=\"m\">33</span>\nAdding user: <span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">4</span>, <span class=\"nv\">Name</span><span class=\"o\">=</span>Laureen, <span class=\"nv\">Age</span><span class=\"o\">=</span><span class=\"m\">54</span>\nAdding user: <span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"m\">5</span>, <span class=\"nv\">Name</span><span class=\"o\">=</span>Tandy, <span class=\"nv\">Age</span><span class=\"o\">=</span><span class=\"m\">66</span>\nDemoSeeder... <span class=\"o\">[</span>OK<span class=\"o\">]</span>\nCommitting to database!\n</pre>\n\n          </div>"}, "last_serial": 6724417, "releases": {"0.1a1": [{"comment_text": "", "digests": {"md5": "708aaf7f6ab64464cadc80cf8c705e5e", "sha256": "0cb288c84c32854ce63f214a43cb923cff18ca910369a474d4f7724411afef3a"}, "downloads": -1, "filename": "Flask_Seeder-0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "708aaf7f6ab64464cadc80cf8c705e5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5097, "upload_time": "2019-04-19T20:55:49", "upload_time_iso_8601": "2019-04-19T20:55:49.136588Z", "url": "https://files.pythonhosted.org/packages/8b/13/9b2687a676e37dbbdb6f848d0c3dde499be5a0541ddb12f9f96a6f0fa801/Flask_Seeder-0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea4f91e5dd24cbc670a4714f7c9c95f7", "sha256": "10363ffec9d58851aebc0d3bb23e641dd8cb0054caba57c350b0add9505b03df"}, "downloads": -1, "filename": "Flask-Seeder-0.1a1.tar.gz", "has_sig": false, "md5_digest": "ea4f91e5dd24cbc670a4714f7c9c95f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4169, "upload_time": "2019-04-19T20:55:51", "upload_time_iso_8601": "2019-04-19T20:55:51.056332Z", "url": "https://files.pythonhosted.org/packages/a4/1c/08e4002ee5376256ff6558cad0b81121f039357b7dc332b5d80ff36b877f/Flask-Seeder-0.1a1.tar.gz", "yanked": false}], "0.1a2": [{"comment_text": "", "digests": {"md5": "0b8f0ee94b00a2cfa075a9989ec6517e", "sha256": "70a3bbe530bf0bef74924c39e6ceae81fda3220d9e0639a086e60a438bfdc56f"}, "downloads": -1, "filename": "Flask_Seeder-0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "0b8f0ee94b00a2cfa075a9989ec6517e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24395, "upload_time": "2019-04-20T18:30:50", "upload_time_iso_8601": "2019-04-20T18:30:50.203361Z", "url": "https://files.pythonhosted.org/packages/df/a1/59605b364dce908a23a42f321ff972f05426624e891c92f58986ecfa3b7d/Flask_Seeder-0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcdea641762c1a83f212dff530777c7d", "sha256": "6e13b76f12270ace337f284a26984e3714760a4938fe2bdc8515329a5e24cc52"}, "downloads": -1, "filename": "Flask-Seeder-0.1a2.tar.gz", "has_sig": false, "md5_digest": "fcdea641762c1a83f212dff530777c7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27961, "upload_time": "2019-04-20T18:30:51", "upload_time_iso_8601": "2019-04-20T18:30:51.301233Z", "url": "https://files.pythonhosted.org/packages/70/81/0c0e6277b0f721286c202ba68366c8df7356fbd6b0b27855a8c2b6c5e158/Flask-Seeder-0.1a2.tar.gz", "yanked": false}], "0.1a3": [{"comment_text": "", "digests": {"md5": "36ef1d3ad56b8574433f355bb5b6e119", "sha256": "b7c80fb689765c055e7b516e63a8484e520cb9da9d4462cadb081d8905bf6963"}, "downloads": -1, "filename": "Flask_Seeder-0.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "36ef1d3ad56b8574433f355bb5b6e119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31189, "upload_time": "2019-10-18T08:18:51", "upload_time_iso_8601": "2019-10-18T08:18:51.527260Z", "url": "https://files.pythonhosted.org/packages/f1/4c/d11f218e5dc87af2e9192941ac58a78e1111fb9395b1b6a55e7388c47070/Flask_Seeder-0.1a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca764026b775b0bbaa498226edbb82f4", "sha256": "5600f900235db7de62c010383ad6918f3a3d678280a7e5f80a4a467d1eb32416"}, "downloads": -1, "filename": "Flask-Seeder-0.1a3.tar.gz", "has_sig": false, "md5_digest": "ca764026b775b0bbaa498226edbb82f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33761, "upload_time": "2019-10-18T08:18:53", "upload_time_iso_8601": "2019-10-18T08:18:53.246782Z", "url": "https://files.pythonhosted.org/packages/64/fb/9f95aa05cbf6db440490643d69d41ab6515119a58d32f13103eb9923824a/Flask-Seeder-0.1a3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "ead471033562e7b15276ba6111831600", "sha256": "931053b47541a1a9a2e075cec12ec3445b7d62b49d1d82711069148c3c26461d"}, "downloads": -1, "filename": "Flask_Seeder-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ead471033562e7b15276ba6111831600", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31161, "upload_time": "2020-01-13T16:07:31", "upload_time_iso_8601": "2020-01-13T16:07:31.428519Z", "url": "https://files.pythonhosted.org/packages/ed/69/9aeb3b51e1a4d711f0b6780a0d09685db427ce0b14d81cc9ee3492be6dec/Flask_Seeder-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "445751624bd66e312c9e808f372c2b3d", "sha256": "091097be121f5234fb79cf5960d2afd61c8b8af21d71973c2ba1890251d33981"}, "downloads": -1, "filename": "Flask-Seeder-1.0.tar.gz", "has_sig": false, "md5_digest": "445751624bd66e312c9e808f372c2b3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33750, "upload_time": "2020-01-13T16:07:33", "upload_time_iso_8601": "2020-01-13T16:07:33.337960Z", "url": "https://files.pythonhosted.org/packages/af/d4/e8a661218f3f82f99558b7f3a247e63eb77a51bf153ab7c3f14d4547df39/Flask-Seeder-1.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dee9a4d4dcf46a653f2ca57616faf691", "sha256": "8373e70e454513f8b64387fed253433ddfb5c9a429cd1be4e9d0b2cd306a699b"}, "downloads": -1, "filename": "Flask_Seeder-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dee9a4d4dcf46a653f2ca57616faf691", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31638, "upload_time": "2020-02-17T15:49:56", "upload_time_iso_8601": "2020-02-17T15:49:56.758619Z", "url": "https://files.pythonhosted.org/packages/b3/b2/fd3d8e655982d279cd15c7c0f0e0ab664f779347009fc76e5be8c666031e/Flask_Seeder-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0311740cf75e87a92a950ded52c7747", "sha256": "93cac2a3ad87fe726f96fb6a9698578ea36eaf5580daf1160be149adc7ee7cba"}, "downloads": -1, "filename": "Flask-Seeder-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a0311740cf75e87a92a950ded52c7747", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34386, "upload_time": "2020-02-17T15:49:57", "upload_time_iso_8601": "2020-02-17T15:49:57.991484Z", "url": "https://files.pythonhosted.org/packages/41/57/f7802d4f87cd43ba87d367ef0e536fabe7020548468c772e1d0fba967e7d/Flask-Seeder-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7e7d36d2315656e98462d39d9d8b7b3d", "sha256": "c54fdb5e8ea4280f762e69b1e1fd8bf5eb7c70fa88561388cdf5759ab979724e"}, "downloads": -1, "filename": "Flask_Seeder-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e7d36d2315656e98462d39d9d8b7b3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32068, "upload_time": "2020-02-29T13:56:06", "upload_time_iso_8601": "2020-02-29T13:56:06.834985Z", "url": "https://files.pythonhosted.org/packages/c6/2b/6458d9352ce5eb849a3d3826236a9d802676a9a06d4af2d54ac948842538/Flask_Seeder-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa1d2caebac2d794fb1bf79695af8f8", "sha256": "a8508a5b2e52b73b1facf0845c27497c3133a17ba84a0c2ba199bbb641fb7eee"}, "downloads": -1, "filename": "Flask-Seeder-1.1.1.tar.gz", "has_sig": false, "md5_digest": "baa1d2caebac2d794fb1bf79695af8f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34545, "upload_time": "2020-02-29T13:56:08", "upload_time_iso_8601": "2020-02-29T13:56:08.390886Z", "url": "https://files.pythonhosted.org/packages/f5/dd/8a6f36167cc773e8af244a1c597361d4dca6483bbd29951ce965545ecdaf/Flask-Seeder-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e7d36d2315656e98462d39d9d8b7b3d", "sha256": "c54fdb5e8ea4280f762e69b1e1fd8bf5eb7c70fa88561388cdf5759ab979724e"}, "downloads": -1, "filename": "Flask_Seeder-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7e7d36d2315656e98462d39d9d8b7b3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32068, "upload_time": "2020-02-29T13:56:06", "upload_time_iso_8601": "2020-02-29T13:56:06.834985Z", "url": "https://files.pythonhosted.org/packages/c6/2b/6458d9352ce5eb849a3d3826236a9d802676a9a06d4af2d54ac948842538/Flask_Seeder-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa1d2caebac2d794fb1bf79695af8f8", "sha256": "a8508a5b2e52b73b1facf0845c27497c3133a17ba84a0c2ba199bbb641fb7eee"}, "downloads": -1, "filename": "Flask-Seeder-1.1.1.tar.gz", "has_sig": false, "md5_digest": "baa1d2caebac2d794fb1bf79695af8f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34545, "upload_time": "2020-02-29T13:56:08", "upload_time_iso_8601": "2020-02-29T13:56:08.390886Z", "url": "https://files.pythonhosted.org/packages/f5/dd/8a6f36167cc773e8af244a1c597361d4dca6483bbd29951ce965545ecdaf/Flask-Seeder-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:20 2020"}