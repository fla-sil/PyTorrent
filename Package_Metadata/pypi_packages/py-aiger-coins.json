{"info": {"author": "Marcell Vazquez-Chanlatte", "author_email": "mvc@linux.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# py-aiger-coins\n\n\n[![Build Status](https://cloud.drone.io/api/badges/mvcisback/py-aiger-coins/status.svg)](https://cloud.drone.io/mvcisback/py-aiger-coins)\n[![codecov](https://codecov.io/gh/mvcisback/py-aiger-coins/branch/master/graph/badge.svg)](https://codecov.io/gh/mvcisback/py-aiger-coins)\n[![Updates](https://pyup.io/repos/github/mvcisback/py-aiger-coins/shield.svg)](https://pyup.io/repos/github/mvcisback/py-aiger-coins/)\n[![PyPI version](https://badge.fury.io/py/py-aiger-coins.svg)](https://badge.fury.io/py/py-aiger-coins)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n\nLibrary for creating circuits that encode discrete distributions and\nMarkov Decision Processes. The name comes from the random bit model of\ndrawing from discrete distributions using coin flips.\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [py-aiger-coins](#py-aiger-coins)\n- [Install](#install)\n- [Usage](#usage)\n    - [Biased Coins](#biased-coins)\n    - [Distributions on discrete sets](#distributions-on-discrete-sets)\n    - [Distributions and Coins](#distributions-and-coins)\n        - [Manipulating Distributions](#manipulating-distributions)\n    - [Binomial Distributions](#binomial-distributions)\n    - [Markov Decision Processes and Probablistic Circuits](#markov-decision-processes-and-probablistic-circuits)\n\n<!-- markdown-toc end -->\n\n\n# Install\n\nTo install this library run:\n\n`$ pip install py-aiger-coins`\n\nNote that to actually compute probabilities, one needs to install with the bdd option.\n\n`$ pip install py-aiger-coins[bdd]`\n\nFor developers, note that this project uses the\n[poetry](https://poetry.eustace.io/) python package/dependency\nmanagement tool. Please familarize yourself with it and then run:\n\n`$ poetry install`\n\n# Usage\n\nNote this tutorial assumes `py-aiger-bdd` has been installed (see the\nInstall section).\n\n## Biased Coins\n\nWe start by encoding a biased coin and computing its bias. The primary\nentrypoint for modeling coins is the `coin` function.\n\n```python\nfrom fractions import Fraction\n\nimport aiger_coins\n\nbias = Fraction(1, 3)\ncoin1 = aiger_coins.coin(bias)\ncoin2 = aiger_coins.coin((1, 3))  # or just use a tuple.\n\nassert coin1.prob() == coin2.prob() == prob\n```\n\n## Distributions on discrete sets\n\nWe now illustrate how to create a set of mutually exclusive coins that\nrepresent distribution over a finite set. For example, a biased three\nsided dice can be 1-hot encoded with:\n\n```python\ndice = aiger_coins.dist([1, 3, 2], name='x')\ndice = aiger_coins.dist([(1, 6), (3, 6), (2, 6)], name='x')  # equivalent\ndice = aiger_coins.dist([Fraction(1, 6), Fraction(3, 6), Fraction(2, 6)], name='x')  # equivalent\n\nprint(dice.freqs())\n# (Fraction(1, 6), Fraction(1, 2), Fraction(1, 3))\n```\n\nLetting, `\u2680 = dice[0]`, `\u2681 = dice[1]`, `\u2682 = dice[2]`, \n```python\none, two, three = dice[0], dice[1], dice[2]\n```\n\nWe can ask the probability of drawing an element of `{\u2680, \u2681}` with:\n\n```python\nassert (one | two).prob() == Fraction(2, 3)\nassert (~three).prob() == Fraction(2, 3)\n```\n\n## Distributions and Coins\n\n`Distribution`s and `Coin`s are really just wrappers around two\n`aiger_bv.UnsignedBVExpr` objects stored in the `expr` and `valid`\nattributes.\n\nThe attributes `expr` and `valid` encode an expression over fair coin\nflips and which coin flips are \"valid\" respectively. Coins is a\nspecial type of `Distribution` where the expression is a predicate\n(e.g. has one output).\n\nNote that accessing the ith element of a `Distribution` results in a\n`Coin` encoding the probability of drawing that element.\n\n### Manipulating Distributions\n\nIn general `Distribution`s can me manipulated by manipulating the\n`.expr` attribution to reinterpret the coin flips or manipulating\n`.valid` to condition on different coin flip outcomes.\n\nOut of the box `Distribution`s support a small number of operations:\n`+, <, <=, >=, >, ==, !=, ~, |, &, ^, .concat`, which they inherit\nfrom `aiger_bv.UnsignedBVExpr`. When using the same `.valid` predicate\n(same coin flips), these operations only manipulate the `.expr`\nattribute.\n\nMore generally, one can use the `apply` method to apply an arbitrary\nfunction to the `.expr` attribute. For example, using the dice from\nbefore:\n\n```python\ndice2 = dice.apply(lambda expr: ~expr[2])\nassert dice2[0].freqs() == Fraction(2, 3)\n```\n\nOne can also change the assumptions made on the coin flips by using\nthe condition method, for example, suppose we condition on the coin\nflips never being all `False`. This changes the distribution\nas follows:\n\n```python\ncoins = dice.coins  #  Bitvector Expression of coin variables.\ndice3 = dice.condition(coins != 0)\n\nprint(dice3.freqs())\n# [Fraction(0, 5), Fraction(3, 5), Fraction(2, 5)]\n```\n\n## Binomial Distributions\n\nAs a convenience, `py-aiger-coins` also supports encoding Binomial\ndistributions.\n\n```python\nx = binomial(3)\n\nprint(x.freqs())\n# (Fraction(1, 8), Fraction(3, 8), Fraction(3, 8), Fraction(1, 8))\n```\n\n## Markov Decision Processes and Probablistic Circuits\n\n`aiger_coins` also supports modeling Probablistic Circuits, Markov\nDecision Process (MDPs), and Markov Chains (MDPs with no inputs).\n\nInternally, the `MDP` object is simply an `AIGBV` bitvector circuit\nwith some inputs annotated with distributions over their inputs.\n\nThe primary entropy point to modeling a Markov Decision Process is\nthe `circ2mdp` function.\n\n```python\nfrom aiger_bv import atom\nfrom aiger_coins import circ2mdp\n\nx = atom(3, 'x', signed=False)\ny = atom(3, 'y', signed=False)\nexpr = (x & y).with_output('x&y')\n\nmdp1 = circ2mdp(expr)\nmdp1 = circ2mdp(expr.aigbv)  # equivalent\n```\n\n### Composition\n\n`MDP` can be composed using an API analogous to `aiger_bv.AIGBV` and\n`aiger.AIG` sequential circuits. In addition, `MDP` support being feed\nactions from a distribution via sequential composition.\n\n```python\n# Put a distribution over the y input.\ndist = aiger_coins.dist((0, 1, 2), name='y')\n\nmdp2 = dist >> mdp1\nmdp2 = mdp1 << dist  # equivalent\nmdp2 = circ2mdp(expr, {'y': dist})  # equivalent\n\nassert mdp1.inputs == {'x', 'y'}\nassert mdp2.inputs == {'x'}\n\nmdp3 = mdp2 | circ2mdp(aiger_bv.identity_gate(4, 'z'))\nassert mdp3.inputs == {'x', 'z'}\nassert mdp3.outputs == {'x&y', 'z'}\n\nmdp4 = mdp3.feedback(inputs=['z'], outputs=['x&y'], keep_outputs=True)\nassert mdp4.inputs == {'x'}\nassert mdp4.outputs == {'x&y', 'z'}\n```\n\n### Extracting Circuit\nOne can transform an `MDP` into an `AIG` or `AIGBV` object using\n`.aig` and `.aigbv` attributes. This adds as the coinflips explicitly\nas inputs and also adds a special output `##valid` that monitors if\nthe sequence of inputs and coin flips was valid.\n\n```python\nassert mdp.aigbv.outputs == mdp.outputs | {'##valid'}\n\nassert '##valid[0]' in mdp.aig.outputs\n```\n\n\n### Encoding and Decoding Traces\n\nOften times, one is interested in analyzing traces, sequences of\nstates and actions, through a Markov Decision Process. \n\nIn order to map this to an execution of an `MDP` object, one needs to\nfind a sequence of coin flip inputs such that feeding the actions and\nthe coin flip inputs into the circuit generated by `MDP.aigbv`.\n\nThis (and its inverse) can be done via the `MDP.encode_trc` and\n`MDP.decode_trc` methods.\n\nFor example, consider the simple MDP modeled by:\n\n```python\nfrom aiger_bv import atom\nfrom aiger_coins import circ2mdp\n\naction = atom(1, 'action', signed=False)\nx_prev = atom(1, 'x_prev', signed=False)\nc = atom(1, 'c', signed=False)\n\nx_next = (x_prev & c & action).with_output('x_next')\n\nsys = circ2mdp(x_next).feedback(\n    keep_outputs=True,\n    inputs=['x_prev'], outputs=['x_next'], initials=[(True,)],\n)\nsys <<= coin((1, 2), name='c')\nassert sys.inputs == {'action'}\nassert sys.outputs == {'x_next'}\n```\n\nWe can encode and decode traces into this model as follows:\n\n```\n# Encoding and Decoding\n\nsys_actions = 3*[{'action': (True,)}]\nstates = 3*[{out: (True,)}]\n\nactions = sys.encode_trc(sys_actions, states)\nassert not any(v['c'][0] for v in actions)\n\nsys_actions2, states2 = sys.decode_trc(actions)\nassert sys_actions2 == sys_actions\nassert states2 == states\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mvcisback/py-aiger-coins", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-aiger-coins", "package_url": "https://pypi.org/project/py-aiger-coins/", "platform": "", "project_url": "https://pypi.org/project/py-aiger-coins/", "project_urls": {"Homepage": "https://github.com/mvcisback/py-aiger-coins", "Repository": "https://github.com/mvcisback/py-aiger-coins"}, "release_url": "https://pypi.org/project/py-aiger-coins/1.5.0/", "requires_dist": ["attrs (>=19.3,<20.0)", "py-aiger (>=4.1.1,<5.0.0)", "py-aiger-bv (>=2.0.0,<3.0.0)", "funcy (>=1.13,<2.0)", "py-aiger-bdd (>=1.0.0,<2.0.0); extra == \"bdd\"", "py-aiger-sat (>=1.1,<2.0); extra == \"sat\""], "requires_python": ">=3.6,<4.0", "summary": "Library for creating circuits that encode discrete distributions.", "version": "1.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-aiger-coins</h1>\n<p><a href=\"https://cloud.drone.io/mvcisback/py-aiger-coins\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/557a55c28ebd3855f1545a455433e7019eedfe2d/68747470733a2f2f636c6f75642e64726f6e652e696f2f6170692f6261646765732f6d766369736261636b2f70792d61696765722d636f696e732f7374617475732e737667\"></a>\n<a href=\"https://codecov.io/gh/mvcisback/py-aiger-coins\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/927b1ccc009564b45a305c2a4a6ac2e81e64c32e/68747470733a2f2f636f6465636f762e696f2f67682f6d766369736261636b2f70792d61696765722d636f696e732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pyup.io/repos/github/mvcisback/py-aiger-coins/\" rel=\"nofollow\"><img alt=\"Updates\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c21eb04b62af0f3a415f78a9ace1e3bc11141fdb/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f6d766369736261636b2f70792d61696765722d636f696e732f736869656c642e737667\"></a>\n<a href=\"https://badge.fury.io/py/py-aiger-coins\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b48c8b7520e69f110d729adc55993586f285531e/68747470733a2f2f62616467652e667572792e696f2f70792f70792d61696765722d636f696e732e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>Library for creating circuits that encode discrete distributions and\nMarkov Decision Processes. The name comes from the random bit model of\ndrawing from discrete distributions using coin flips.</p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#py-aiger-coins\" rel=\"nofollow\">py-aiger-coins</a></li>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#biased-coins\" rel=\"nofollow\">Biased Coins</a></li>\n<li><a href=\"#distributions-on-discrete-sets\" rel=\"nofollow\">Distributions on discrete sets</a></li>\n<li><a href=\"#distributions-and-coins\" rel=\"nofollow\">Distributions and Coins</a>\n<ul>\n<li><a href=\"#manipulating-distributions\" rel=\"nofollow\">Manipulating Distributions</a></li>\n</ul>\n</li>\n<li><a href=\"#binomial-distributions\" rel=\"nofollow\">Binomial Distributions</a></li>\n<li><a href=\"#markov-decision-processes-and-probablistic-circuits\" rel=\"nofollow\">Markov Decision Processes and Probablistic Circuits</a></li>\n</ul>\n</li>\n</ul>\n\n<h1>Install</h1>\n<p>To install this library run:</p>\n<p><code>$ pip install py-aiger-coins</code></p>\n<p>Note that to actually compute probabilities, one needs to install with the bdd option.</p>\n<p><code>$ pip install py-aiger-coins[bdd]</code></p>\n<p>For developers, note that this project uses the\n<a href=\"https://poetry.eustace.io/\" rel=\"nofollow\">poetry</a> python package/dependency\nmanagement tool. Please familarize yourself with it and then run:</p>\n<p><code>$ poetry install</code></p>\n<h1>Usage</h1>\n<p>Note this tutorial assumes <code>py-aiger-bdd</code> has been installed (see the\nInstall section).</p>\n<h2>Biased Coins</h2>\n<p>We start by encoding a biased coin and computing its bias. The primary\nentrypoint for modeling coins is the <code>coin</code> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fractions</span> <span class=\"kn\">import</span> <span class=\"n\">Fraction</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">aiger_coins</span>\n\n<span class=\"n\">bias</span> <span class=\"o\">=</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">coin1</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">coin</span><span class=\"p\">(</span><span class=\"n\">bias</span><span class=\"p\">)</span>\n<span class=\"n\">coin2</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">coin</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>  <span class=\"c1\"># or just use a tuple.</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">coin1</span><span class=\"o\">.</span><span class=\"n\">prob</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">coin2</span><span class=\"o\">.</span><span class=\"n\">prob</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">prob</span>\n</pre>\n<h2>Distributions on discrete sets</h2>\n<p>We now illustrate how to create a set of mutually exclusive coins that\nrepresent distribution over a finite set. For example, a biased three\nsided dice can be 1-hot encoded with:</p>\n<pre><span class=\"n\">dice</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">dist</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">dice</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">dist</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>  <span class=\"c1\"># equivalent</span>\n<span class=\"n\">dice</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">dist</span><span class=\"p\">([</span><span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'x'</span><span class=\"p\">)</span>  <span class=\"c1\"># equivalent</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dice</span><span class=\"o\">.</span><span class=\"n\">freqs</span><span class=\"p\">())</span>\n<span class=\"c1\"># (Fraction(1, 6), Fraction(1, 2), Fraction(1, 3))</span>\n</pre>\n<p>Letting, <code>\u2680 = dice[0]</code>, <code>\u2681 = dice[1]</code>, <code>\u2682 = dice[2]</code>,</p>\n<pre><span class=\"n\">one</span><span class=\"p\">,</span> <span class=\"n\">two</span><span class=\"p\">,</span> <span class=\"n\">three</span> <span class=\"o\">=</span> <span class=\"n\">dice</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dice</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dice</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>We can ask the probability of drawing an element of <code>{\u2680, \u2681}</code> with:</p>\n<pre><span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">one</span> <span class=\"o\">|</span> <span class=\"n\">two</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">prob</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">three</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">prob</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h2>Distributions and Coins</h2>\n<p><code>Distribution</code>s and <code>Coin</code>s are really just wrappers around two\n<code>aiger_bv.UnsignedBVExpr</code> objects stored in the <code>expr</code> and <code>valid</code>\nattributes.</p>\n<p>The attributes <code>expr</code> and <code>valid</code> encode an expression over fair coin\nflips and which coin flips are \"valid\" respectively. Coins is a\nspecial type of <code>Distribution</code> where the expression is a predicate\n(e.g. has one output).</p>\n<p>Note that accessing the ith element of a <code>Distribution</code> results in a\n<code>Coin</code> encoding the probability of drawing that element.</p>\n<h3>Manipulating Distributions</h3>\n<p>In general <code>Distribution</code>s can me manipulated by manipulating the\n<code>.expr</code> attribution to reinterpret the coin flips or manipulating\n<code>.valid</code> to condition on different coin flip outcomes.</p>\n<p>Out of the box <code>Distribution</code>s support a small number of operations:\n<code>+, &lt;, &lt;=, &gt;=, &gt;, ==, !=, ~, |, &amp;, ^, .concat</code>, which they inherit\nfrom <code>aiger_bv.UnsignedBVExpr</code>. When using the same <code>.valid</code> predicate\n(same coin flips), these operations only manipulate the <code>.expr</code>\nattribute.</p>\n<p>More generally, one can use the <code>apply</code> method to apply an arbitrary\nfunction to the <code>.expr</code> attribute. For example, using the dice from\nbefore:</p>\n<pre><span class=\"n\">dice2</span> <span class=\"o\">=</span> <span class=\"n\">dice</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">expr</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">expr</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">dice2</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">freqs</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>One can also change the assumptions made on the coin flips by using\nthe condition method, for example, suppose we condition on the coin\nflips never being all <code>False</code>. This changes the distribution\nas follows:</p>\n<pre><span class=\"n\">coins</span> <span class=\"o\">=</span> <span class=\"n\">dice</span><span class=\"o\">.</span><span class=\"n\">coins</span>  <span class=\"c1\">#  Bitvector Expression of coin variables.</span>\n<span class=\"n\">dice3</span> <span class=\"o\">=</span> <span class=\"n\">dice</span><span class=\"o\">.</span><span class=\"n\">condition</span><span class=\"p\">(</span><span class=\"n\">coins</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dice3</span><span class=\"o\">.</span><span class=\"n\">freqs</span><span class=\"p\">())</span>\n<span class=\"c1\"># [Fraction(0, 5), Fraction(3, 5), Fraction(2, 5)]</span>\n</pre>\n<h2>Binomial Distributions</h2>\n<p>As a convenience, <code>py-aiger-coins</code> also supports encoding Binomial\ndistributions.</p>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">freqs</span><span class=\"p\">())</span>\n<span class=\"c1\"># (Fraction(1, 8), Fraction(3, 8), Fraction(3, 8), Fraction(1, 8))</span>\n</pre>\n<h2>Markov Decision Processes and Probablistic Circuits</h2>\n<p><code>aiger_coins</code> also supports modeling Probablistic Circuits, Markov\nDecision Process (MDPs), and Markov Chains (MDPs with no inputs).</p>\n<p>Internally, the <code>MDP</code> object is simply an <code>AIGBV</code> bitvector circuit\nwith some inputs annotated with distributions over their inputs.</p>\n<p>The primary entropy point to modeling a Markov Decision Process is\nthe <code>circ2mdp</code> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiger_bv</span> <span class=\"kn\">import</span> <span class=\"n\">atom</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiger_coins</span> <span class=\"kn\">import</span> <span class=\"n\">circ2mdp</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_output</span><span class=\"p\">(</span><span class=\"s1\">'x&amp;y'</span><span class=\"p\">)</span>\n\n<span class=\"n\">mdp1</span> <span class=\"o\">=</span> <span class=\"n\">circ2mdp</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n<span class=\"n\">mdp1</span> <span class=\"o\">=</span> <span class=\"n\">circ2mdp</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">aigbv</span><span class=\"p\">)</span>  <span class=\"c1\"># equivalent</span>\n</pre>\n<h3>Composition</h3>\n<p><code>MDP</code> can be composed using an API analogous to <code>aiger_bv.AIGBV</code> and\n<code>aiger.AIG</code> sequential circuits. In addition, <code>MDP</code> support being feed\nactions from a distribution via sequential composition.</p>\n<pre><span class=\"c1\"># Put a distribution over the y input.</span>\n<span class=\"n\">dist</span> <span class=\"o\">=</span> <span class=\"n\">aiger_coins</span><span class=\"o\">.</span><span class=\"n\">dist</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'y'</span><span class=\"p\">)</span>\n\n<span class=\"n\">mdp2</span> <span class=\"o\">=</span> <span class=\"n\">dist</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">mdp1</span>\n<span class=\"n\">mdp2</span> <span class=\"o\">=</span> <span class=\"n\">mdp1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">dist</span>  <span class=\"c1\"># equivalent</span>\n<span class=\"n\">mdp2</span> <span class=\"o\">=</span> <span class=\"n\">circ2mdp</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'y'</span><span class=\"p\">:</span> <span class=\"n\">dist</span><span class=\"p\">})</span>  <span class=\"c1\"># equivalent</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">mdp1</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">mdp2</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">}</span>\n\n<span class=\"n\">mdp3</span> <span class=\"o\">=</span> <span class=\"n\">mdp2</span> <span class=\"o\">|</span> <span class=\"n\">circ2mdp</span><span class=\"p\">(</span><span class=\"n\">aiger_bv</span><span class=\"o\">.</span><span class=\"n\">identity_gate</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">))</span>\n<span class=\"k\">assert</span> <span class=\"n\">mdp3</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">mdp3</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x&amp;y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">}</span>\n\n<span class=\"n\">mdp4</span> <span class=\"o\">=</span> <span class=\"n\">mdp3</span><span class=\"o\">.</span><span class=\"n\">feedback</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'z'</span><span class=\"p\">],</span> <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x&amp;y'</span><span class=\"p\">],</span> <span class=\"n\">keep_outputs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">mdp4</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">mdp4</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x&amp;y'</span><span class=\"p\">,</span> <span class=\"s1\">'z'</span><span class=\"p\">}</span>\n</pre>\n<h3>Extracting Circuit</h3>\n<p>One can transform an <code>MDP</code> into an <code>AIG</code> or <code>AIGBV</code> object using\n<code>.aig</code> and <code>.aigbv</code> attributes. This adds as the coinflips explicitly\nas inputs and also adds a special output <code>##valid</code> that monitors if\nthe sequence of inputs and coin flips was valid.</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">mdp</span><span class=\"o\">.</span><span class=\"n\">aigbv</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">==</span> <span class=\"n\">mdp</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">|</span> <span class=\"p\">{</span><span class=\"s1\">'##valid'</span><span class=\"p\">}</span>\n\n<span class=\"k\">assert</span> <span class=\"s1\">'##valid[0]'</span> <span class=\"ow\">in</span> <span class=\"n\">mdp</span><span class=\"o\">.</span><span class=\"n\">aig</span><span class=\"o\">.</span><span class=\"n\">outputs</span>\n</pre>\n<h3>Encoding and Decoding Traces</h3>\n<p>Often times, one is interested in analyzing traces, sequences of\nstates and actions, through a Markov Decision Process.</p>\n<p>In order to map this to an execution of an <code>MDP</code> object, one needs to\nfind a sequence of coin flip inputs such that feeding the actions and\nthe coin flip inputs into the circuit generated by <code>MDP.aigbv</code>.</p>\n<p>This (and its inverse) can be done via the <code>MDP.encode_trc</code> and\n<code>MDP.decode_trc</code> methods.</p>\n<p>For example, consider the simple MDP modeled by:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiger_bv</span> <span class=\"kn\">import</span> <span class=\"n\">atom</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiger_coins</span> <span class=\"kn\">import</span> <span class=\"n\">circ2mdp</span>\n\n<span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'action'</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">x_prev</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'x_prev'</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">atom</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"n\">signed</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">x_next</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">x_prev</span> <span class=\"o\">&amp;</span> <span class=\"n\">c</span> <span class=\"o\">&amp;</span> <span class=\"n\">action</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_output</span><span class=\"p\">(</span><span class=\"s1\">'x_next'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sys</span> <span class=\"o\">=</span> <span class=\"n\">circ2mdp</span><span class=\"p\">(</span><span class=\"n\">x_next</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">feedback</span><span class=\"p\">(</span>\n    <span class=\"n\">keep_outputs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x_prev'</span><span class=\"p\">],</span> <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'x_next'</span><span class=\"p\">],</span> <span class=\"n\">initials</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"kc\">True</span><span class=\"p\">,)],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">sys</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"n\">coin</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'c'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">inputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'action'</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">outputs</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'x_next'</span><span class=\"p\">}</span>\n</pre>\n<p>We can encode and decode traces into this model as follows:</p>\n<pre><code># Encoding and Decoding\n\nsys_actions = 3*[{'action': (True,)}]\nstates = 3*[{out: (True,)}]\n\nactions = sys.encode_trc(sys_actions, states)\nassert not any(v['c'][0] for v in actions)\n\nsys_actions2, states2 = sys.decode_trc(actions)\nassert sys_actions2 == sys_actions\nassert states2 == states\n</code></pre>\n\n          </div>"}, "last_serial": 7182471, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "9db792b054adbc2ce344de5c83b5178e", "sha256": "247718925b7443839df5121f103e2caf9fa9f82a945381f5a62d732775e22570"}, "downloads": -1, "filename": "py_aiger_coins-0.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9db792b054adbc2ce344de5c83b5178e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4233, "upload_time": "2019-03-05T20:34:43", "upload_time_iso_8601": "2019-03-05T20:34:43.167308Z", "url": "https://files.pythonhosted.org/packages/5c/23/6ab1aa6adc50cebdb81105fb9b36edd389b4ada70cf95760e9538d5cc6be/py_aiger_coins-0.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e2248c619b40a499d84da2752b0a72f", "sha256": "abc1fd80c38252f0938f7f1911cbdbdce5bab8d3feede6e8aa325f34cf664119"}, "downloads": -1, "filename": "py-aiger-coins-0.0.0.tar.gz", "has_sig": false, "md5_digest": "9e2248c619b40a499d84da2752b0a72f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2455, "upload_time": "2019-03-05T20:34:33", "upload_time_iso_8601": "2019-03-05T20:34:33.844142Z", "url": "https://files.pythonhosted.org/packages/5c/3f/31a5e491e7549c389bde75f544f553fb1859297766724e39669dfe95deca/py-aiger-coins-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "d4e96110bb5004c0c7df3ad0f57fd9c7", "sha256": "5dfcd0b19633371cd46b66c7aee033a15e8f5518eede03fdeafb4981b49d9a3b"}, "downloads": -1, "filename": "py_aiger_coins-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d4e96110bb5004c0c7df3ad0f57fd9c7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4856, "upload_time": "2019-03-07T07:23:44", "upload_time_iso_8601": "2019-03-07T07:23:44.355612Z", "url": "https://files.pythonhosted.org/packages/38/d3/a776f1f24526070a48371bb0e78702d4fb5be24ac84128938ebc6a7528fb/py_aiger_coins-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfd66f5052650d1dd06c3724a2ae003c", "sha256": "a7450a4f58b41a664fe669fe5938f05a69f46cffb30ae26cda276e940aa27700"}, "downloads": -1, "filename": "py-aiger-coins-0.0.1.tar.gz", "has_sig": false, "md5_digest": "bfd66f5052650d1dd06c3724a2ae003c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3775, "upload_time": "2019-03-07T07:23:54", "upload_time_iso_8601": "2019-03-07T07:23:54.031114Z", "url": "https://files.pythonhosted.org/packages/2c/2a/5744381d62f17ae28fc93a443d847f68612d5088847f8e86b0684d9c2968/py-aiger-coins-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "618da739bc8f687985963a072745db82", "sha256": "4acd92acca1e140e3cfc4a40ddd05467ed1d16aaf75123cd1106cf7f8744519f"}, "downloads": -1, "filename": "py_aiger_coins-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "618da739bc8f687985963a072745db82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5593, "upload_time": "2019-11-06T00:53:48", "upload_time_iso_8601": "2019-11-06T00:53:48.788369Z", "url": "https://files.pythonhosted.org/packages/1b/89/7f3ad333cef2f1eea392b474b061564eadf7ba0b3ff0c57285e7b03b4e98/py_aiger_coins-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be452eb6fae19e2ad66b55a45132e6a9", "sha256": "4496829ace92dc7b5a8ed0fd7499180fd164a0752738cb9fc480ce6593e62e28"}, "downloads": -1, "filename": "py-aiger-coins-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be452eb6fae19e2ad66b55a45132e6a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5009, "upload_time": "2019-11-06T00:53:47", "upload_time_iso_8601": "2019-11-06T00:53:47.584520Z", "url": "https://files.pythonhosted.org/packages/c8/72/09ab48d0ef84cab3530298a6315bb941f72b8ffd34ebcd1d3d09113ce0b9/py-aiger-coins-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "72a60f09f6147acb6ce034e3018938f2", "sha256": "1f1b41bbdad4d6a9fb23e2d14e8e6dbd6a3b6ab25112408bee4532db650da5a6"}, "downloads": -1, "filename": "py_aiger_coins-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "72a60f09f6147acb6ce034e3018938f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7460, "upload_time": "2019-11-06T06:40:08", "upload_time_iso_8601": "2019-11-06T06:40:08.936027Z", "url": "https://files.pythonhosted.org/packages/42/08/fb6ee6c3e2a710a38dd6f8c9b47ce7b80c9fa4f4e2fba0fd50a33597b277/py_aiger_coins-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88e70581de2327a940a112a06f726c97", "sha256": "5d48f0be1190eaa98837f96721bc4e2be672111feaf51abe5486a11d88ff4caa"}, "downloads": -1, "filename": "py-aiger-coins-0.1.1.tar.gz", "has_sig": false, "md5_digest": "88e70581de2327a940a112a06f726c97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 6812, "upload_time": "2019-11-06T06:40:07", "upload_time_iso_8601": "2019-11-06T06:40:07.183901Z", "url": "https://files.pythonhosted.org/packages/ec/d5/9e07a0f498284b8a3c09a496c6ab64a9ae7251cdaf9ae5e6a987bba8042a/py-aiger-coins-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "41e0d1d3b16964293e6d6a37b12f3c29", "sha256": "009548f7156d59e41a2122b0c615f0de89046c43c4a920deb5b50b68a29914e9"}, "downloads": -1, "filename": "py_aiger_coins-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41e0d1d3b16964293e6d6a37b12f3c29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7520, "upload_time": "2019-11-06T19:10:17", "upload_time_iso_8601": "2019-11-06T19:10:17.304602Z", "url": "https://files.pythonhosted.org/packages/21/d3/c32ceaae609c4d535d19de78d05a53297634f373363c9e1f122cd6d016b4/py_aiger_coins-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc3368ca930b338e29f953a962c53c9a", "sha256": "970155482d468ca4ae0c94feacf835476d520dc1e3d055899f8a95c85e872c4f"}, "downloads": -1, "filename": "py-aiger-coins-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fc3368ca930b338e29f953a962c53c9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7052, "upload_time": "2019-11-06T19:10:16", "upload_time_iso_8601": "2019-11-06T19:10:16.094559Z", "url": "https://files.pythonhosted.org/packages/3f/67/49061f72afc7df2a5e70f6dadf88dae06b9f99a8eeec862ecc7b47f0b3c0/py-aiger-coins-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6b0b5771e93db84eaa45f9c8ffdf4c92", "sha256": "f8f4aaf980de7f9a982260f5af885f9bed2917f79a2322d1d3f745edff07e546"}, "downloads": -1, "filename": "py_aiger_coins-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6b0b5771e93db84eaa45f9c8ffdf4c92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 7534, "upload_time": "2019-11-07T01:30:46", "upload_time_iso_8601": "2019-11-07T01:30:46.361903Z", "url": "https://files.pythonhosted.org/packages/34/f8/9226eed124294afe2176bcfc082912614971385b635ab7d88a31473e405a/py_aiger_coins-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0b4f388dc837f9f2df6b824476c513e", "sha256": "cafdef51134047f9255c658ad329828a26abd933b18d87c9a65aec66594768f3"}, "downloads": -1, "filename": "py-aiger-coins-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d0b4f388dc837f9f2df6b824476c513e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 7064, "upload_time": "2019-11-07T01:30:44", "upload_time_iso_8601": "2019-11-07T01:30:44.533045Z", "url": "https://files.pythonhosted.org/packages/45/9e/457377c95715dbb2a654a6794dec972f81c79c36e3e617c4b8390da0850a/py-aiger-coins-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "3c99a12f0cbbed6ada8a127e20aa8221", "sha256": "1eca823e1c6c21adb566053082d6241a7f0b69c68d6ae4852ff7849c800b589e"}, "downloads": -1, "filename": "py_aiger_coins-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c99a12f0cbbed6ada8a127e20aa8221", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11670, "upload_time": "2019-11-09T21:15:29", "upload_time_iso_8601": "2019-11-09T21:15:29.437752Z", "url": "https://files.pythonhosted.org/packages/64/11/5d95c7dae65e3ec8f79ab202f2d3fd4196f1d3a75160816762efca998b99/py_aiger_coins-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9834871f6782b7658e5a62f390ce7692", "sha256": "a27c0803c72491ac780b2fb57ce7633f78cb694b5f390eabb5ece5dcb7f1885d"}, "downloads": -1, "filename": "py-aiger-coins-1.2.0.tar.gz", "has_sig": false, "md5_digest": "9834871f6782b7658e5a62f390ce7692", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13292, "upload_time": "2019-11-09T21:15:27", "upload_time_iso_8601": "2019-11-09T21:15:27.945266Z", "url": "https://files.pythonhosted.org/packages/bc/b1/3f3de032f5af200687cd1b2e86c006949fe0f6e3123a4ca3afb19f54915c/py-aiger-coins-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "303cc96e5717c6d41233940893faa59e", "sha256": "799f7b92c4c2836888da69e56000f7fa6c9a6a00174c018a3125157f2e67148e"}, "downloads": -1, "filename": "py_aiger_coins-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "303cc96e5717c6d41233940893faa59e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11719, "upload_time": "2019-11-13T02:14:24", "upload_time_iso_8601": "2019-11-13T02:14:24.470112Z", "url": "https://files.pythonhosted.org/packages/a9/5d/dd511e9ebb4ab7ffdbe5c9f3c9e413d5fcf4daa7a5c022b8e61be82db45e/py_aiger_coins-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7db801a46e0391c31a2c2566e42e0861", "sha256": "474f3e2cc68bbd92e237c7685e9835ea439f432d2edea9c8b401cebbb14932ef"}, "downloads": -1, "filename": "py-aiger-coins-1.2.1.tar.gz", "has_sig": false, "md5_digest": "7db801a46e0391c31a2c2566e42e0861", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13340, "upload_time": "2019-11-13T02:14:22", "upload_time_iso_8601": "2019-11-13T02:14:22.774989Z", "url": "https://files.pythonhosted.org/packages/e7/47/64c5883938b87c95701675fa1bffee83b4b7c91bf265e2434c0473745043/py-aiger-coins-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "72af802f3d5ad6f15c9a2a123bc3c42a", "sha256": "0f241e9bc7f7d014f74efb49179813717770fa8e43d97a8eaba6bd0dcddbf37c"}, "downloads": -1, "filename": "py_aiger_coins-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "72af802f3d5ad6f15c9a2a123bc3c42a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11821, "upload_time": "2019-11-21T14:36:26", "upload_time_iso_8601": "2019-11-21T14:36:26.072310Z", "url": "https://files.pythonhosted.org/packages/50/25/20dd795ecf2448b6f3ac9b93e7e975c5a9d82bc336bfbcd29eb6d076fc9f/py_aiger_coins-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e330f4ea33b99dbd54d9213b9cabf218", "sha256": "0bc6405ab7588091d28af5690d5eec20bcfef71d6dbc99f3533c8a09a0d0262f"}, "downloads": -1, "filename": "py-aiger-coins-1.2.2.tar.gz", "has_sig": false, "md5_digest": "e330f4ea33b99dbd54d9213b9cabf218", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13457, "upload_time": "2019-11-21T14:36:24", "upload_time_iso_8601": "2019-11-21T14:36:24.632014Z", "url": "https://files.pythonhosted.org/packages/07/61/f5652526f4eb2eabfa9bc823eaf52e6665515120de60031edae488d41b00/py-aiger-coins-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "b4235622079b91de325c9d584039acf5", "sha256": "68825de36390a46f6c7bc8748638a8fde7b3df9d9edfa798478bc4be624eb50a"}, "downloads": -1, "filename": "py_aiger_coins-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b4235622079b91de325c9d584039acf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11947, "upload_time": "2019-11-25T23:19:16", "upload_time_iso_8601": "2019-11-25T23:19:16.892553Z", "url": "https://files.pythonhosted.org/packages/b2/03/dfe9b5ec943990d4bd85206a93ddb540fe0ff8a389c670664e2b21ca6b02/py_aiger_coins-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ba85627fe5c90e475e34b68cf2165d9", "sha256": "db3d97be0e3ca213e52b3735c34bbcfd78f57b77bd86a2dc4c7ab1ac1cc74811"}, "downloads": -1, "filename": "py-aiger-coins-1.2.3.tar.gz", "has_sig": false, "md5_digest": "3ba85627fe5c90e475e34b68cf2165d9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13596, "upload_time": "2019-11-25T23:19:15", "upload_time_iso_8601": "2019-11-25T23:19:15.201407Z", "url": "https://files.pythonhosted.org/packages/f6/e2/6e3b0f09b4265e916e0b990d3836d219326d14db6dafa202d896e6ff3e4d/py-aiger-coins-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "e4bd39ddf54b488a3e812e26ac58cc6c", "sha256": "900568bae9ab4f3e5a8183a978dcb0f6f9ddff9ccc0bc10335b7dd7b9a696b34"}, "downloads": -1, "filename": "py_aiger_coins-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e4bd39ddf54b488a3e812e26ac58cc6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12026, "upload_time": "2019-11-26T06:50:29", "upload_time_iso_8601": "2019-11-26T06:50:29.104869Z", "url": "https://files.pythonhosted.org/packages/aa/06/fda558d8d67d4d5dd30ef1faa4556c5f36f13f22513b9186aea3bb8cca78/py_aiger_coins-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e50a0d10103172f8c7b9096576fe94", "sha256": "8efc5c6544c41a69a83fd97bb8e6ecb8f890ee5097ce9fd24da6870f68d42ed0"}, "downloads": -1, "filename": "py-aiger-coins-1.2.4.tar.gz", "has_sig": false, "md5_digest": "e5e50a0d10103172f8c7b9096576fe94", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13695, "upload_time": "2019-11-26T06:50:27", "upload_time_iso_8601": "2019-11-26T06:50:27.415384Z", "url": "https://files.pythonhosted.org/packages/38/44/d95ecc3e84dd68283b0a9182343e2f5fae748dc9b0eca94d976180382875/py-aiger-coins-1.2.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "4a7ff8a14c8053ab29da5663875dc7f6", "sha256": "75b61055972e3447b5968fa7809ebf20d0cb51f5cec10eaaafd69c197c55d756"}, "downloads": -1, "filename": "py_aiger_coins-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4a7ff8a14c8053ab29da5663875dc7f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11874, "upload_time": "2020-01-22T20:29:55", "upload_time_iso_8601": "2020-01-22T20:29:55.254945Z", "url": "https://files.pythonhosted.org/packages/ef/e2/ad7508a7076c9fc4a63dbd2d351d52d4a84feabf8f518d7039f862e35c14/py_aiger_coins-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e07d7f73698a2dbd31126ee9daf943d8", "sha256": "2f78da1a53fe33086bf3901ee47767401b8b3670713a4d25ba5800f5901c1241"}, "downloads": -1, "filename": "py-aiger-coins-1.3.0.tar.gz", "has_sig": false, "md5_digest": "e07d7f73698a2dbd31126ee9daf943d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13457, "upload_time": "2020-01-22T20:29:53", "upload_time_iso_8601": "2020-01-22T20:29:53.830872Z", "url": "https://files.pythonhosted.org/packages/5b/cd/31ea7427c55fa05a4c4c14c92eeb3f13104b306dfb258dd93dabd1d6b9f1/py-aiger-coins-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "1ab2a59d17442e11bf7ba141d23a0f64", "sha256": "41f8df0c219ec6ef07846abb6af415d29e4890118573e7bba9a3a489d85dc004"}, "downloads": -1, "filename": "py_aiger_coins-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ab2a59d17442e11bf7ba141d23a0f64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11884, "upload_time": "2020-01-22T20:39:59", "upload_time_iso_8601": "2020-01-22T20:39:59.103609Z", "url": "https://files.pythonhosted.org/packages/17/47/2a14ae842fed2ad6e45295243bd9ebd9d62dc4749e07a6adb07cdc2a199c/py_aiger_coins-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "576d18704a4e40170c2551538020c8cf", "sha256": "658903500ee87fd89ac881a387561e143eab081157e11daddaadebfc14ea6d08"}, "downloads": -1, "filename": "py-aiger-coins-1.3.1.tar.gz", "has_sig": false, "md5_digest": "576d18704a4e40170c2551538020c8cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13473, "upload_time": "2020-01-22T20:39:57", "upload_time_iso_8601": "2020-01-22T20:39:57.778782Z", "url": "https://files.pythonhosted.org/packages/ff/59/d0653170b2f437736e065ad99c22b2a628cb1185a7858514a737f6822538/py-aiger-coins-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "64fbf37cad8b33390d73a343b3df436b", "sha256": "1bb714b585471ed1fef1716e2ddb64568459cfbffe86a4235270dc4de5c06479"}, "downloads": -1, "filename": "py_aiger_coins-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "64fbf37cad8b33390d73a343b3df436b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12020, "upload_time": "2020-03-24T07:04:34", "upload_time_iso_8601": "2020-03-24T07:04:34.415048Z", "url": "https://files.pythonhosted.org/packages/96/5e/a759f6824e25c0867be98de8057234312d0975a10be0503a7045b06483cc/py_aiger_coins-1.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c9b74055878bccffc1850a5ef735162", "sha256": "12df24e02d6a601cc74654c7dcacdf61c8494d12ce69bf4e724c3da7fdd1fa60"}, "downloads": -1, "filename": "py-aiger-coins-1.4.0.tar.gz", "has_sig": false, "md5_digest": "5c9b74055878bccffc1850a5ef735162", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13629, "upload_time": "2020-03-24T07:04:33", "upload_time_iso_8601": "2020-03-24T07:04:33.130728Z", "url": "https://files.pythonhosted.org/packages/34/19/1e8e2c234e15626814a2416f6d5f1b32e6704d9cd267a97d19057af7a3e2/py-aiger-coins-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "13671a6918400c3e82c2e91479e61f91", "sha256": "845713e1aefb63ee8b399c86b41de5070e520b3d7f9dc9be7831efee91886dfb"}, "downloads": -1, "filename": "py_aiger_coins-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "13671a6918400c3e82c2e91479e61f91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12016, "upload_time": "2020-05-06T19:04:39", "upload_time_iso_8601": "2020-05-06T19:04:39.450802Z", "url": "https://files.pythonhosted.org/packages/f4/fe/797db165450ea262d4c13cd7572f56feb2ae9028492228917fde1545672d/py_aiger_coins-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "089c5730353accdea5f8626f5e609097", "sha256": "0fe4ec3e71450dfc4f62e96a90e00acd4d7eaa52d86d6e1501a2faac7cc52764"}, "downloads": -1, "filename": "py-aiger-coins-1.5.0.tar.gz", "has_sig": false, "md5_digest": "089c5730353accdea5f8626f5e609097", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13652, "upload_time": "2020-05-06T19:04:38", "upload_time_iso_8601": "2020-05-06T19:04:38.029286Z", "url": "https://files.pythonhosted.org/packages/ae/97/a105a223ff7059af9b996bb3a3b3d9fbc23a66d538a42eaa975c503e0994/py-aiger-coins-1.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13671a6918400c3e82c2e91479e61f91", "sha256": "845713e1aefb63ee8b399c86b41de5070e520b3d7f9dc9be7831efee91886dfb"}, "downloads": -1, "filename": "py_aiger_coins-1.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "13671a6918400c3e82c2e91479e61f91", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12016, "upload_time": "2020-05-06T19:04:39", "upload_time_iso_8601": "2020-05-06T19:04:39.450802Z", "url": "https://files.pythonhosted.org/packages/f4/fe/797db165450ea262d4c13cd7572f56feb2ae9028492228917fde1545672d/py_aiger_coins-1.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "089c5730353accdea5f8626f5e609097", "sha256": "0fe4ec3e71450dfc4f62e96a90e00acd4d7eaa52d86d6e1501a2faac7cc52764"}, "downloads": -1, "filename": "py-aiger-coins-1.5.0.tar.gz", "has_sig": false, "md5_digest": "089c5730353accdea5f8626f5e609097", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13652, "upload_time": "2020-05-06T19:04:38", "upload_time_iso_8601": "2020-05-06T19:04:38.029286Z", "url": "https://files.pythonhosted.org/packages/ae/97/a105a223ff7059af9b996bb3a3b3d9fbc23a66d538a42eaa975c503e0994/py-aiger-coins-1.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:55 2020"}