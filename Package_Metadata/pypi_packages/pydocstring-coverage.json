{"info": {"author": "Hunter McGushion", "author_email": "hunter@mcgushion.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Documentation", "Topic :: Documentation :: Sphinx", "Topic :: Software Development", "Topic :: Software Development :: Documentation", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Quality Assurance", "Topic :: Utilities"], "description": "Python docstring coverage\n===============\nNOTE: This is fully the work of others. I made some changes (badge generation,\npre-commit hooks, etc) and wanted it to be pip installable. - @danielsuo.\n\nIf the health of your documentation is in dire straits, `docstr-coverage` will see you now.\n\n`docstr-coverage` is a simple tool that lets you measure your Python source code's\n[docstring](http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring) coverage. It can show you which of your functions,\nclasses, methods, and modules don't have docstrings. It also provide statistics about overall docstring coverage for individual\nfiles, and for your entire project.\n\n* **Source:** https://github.com/HunterMcGushion/docstr_coverage\n* **Documentation:** [https://docstr-coverage.readthedocs.io](https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html)\n\nExample\n-------\n\n```\n>>> HunterMcGushion$ docstr-coverage /docstr_coverage/\n\nFile: \"docstr_coverage/setup.py\"\n - No module docstring\n - No docstring for `readme`\n Needed: 2; Found: 0; Missing: 2; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/__init__.py\"\n - No module docstring\n Needed: 1; Found: 0; Missing: 1; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/coverage.py\"\n - No docstring for `DocStringCoverageVisitor.__init__`\n Needed: 11; Found: 10; Missing: 1; Coverage: 90.9%\n\n\nOverall statistics for 3 files:\nDocstrings needed: 14; Docstrings found: 10; Docstrings missing: 4\nTotal docstring coverage: 71.4%;  Grade: Very good\n```\n\nHow Do I Use It?\n----------------\n\n#### Command-line Tool\nGeneral usage is: `docstr-coverage <path to dir or module> [options]`\n\nTo test a single module, named `some_module.py`, run:\n\n```\n$ docstr-coverage some_module.py\n```\n\nTo test a directory (recursively), just supply the directory `some_project/src` instead:\n\n```\n$ docstr-coverage some_project/src\n```\n\n##### Options:\n* *--skipmagic, -m* - Ignore all magic methods (like `__init__`, and `__str__`)\n* *--skipfiledoc, -f* - Ignore module docstrings (at the top of files)\n* *--exclude=\\<regex\\>, -e \\<regex\\>* - Filepath pattern to exclude from analysis\n\t* To exclude the contents of a virtual environment `env` and your `tests` directory, run:\n\t<br>```$ docstr-coverage some_project/ -e \"env/*|tests/*\"```\n* *--verbose=\\<level\\>, -v \\<level\\>* - Set verbosity level (0-3)\n\t* 0 - Silence\n\t* 1 - Print overall statistics\n\t* 2 - Also print individual statistics for each file\n\t* 3 - Also print missing docstrings (function names, class names, etc.)\n* *--docstr-ignore-file=<filepath>, -d <filepath>* - Filepath containing list of patterns to ignore. Patterns are (file-pattern, name-pattern) pairs\n       \n    * File content example:\n    ```\n    SomeFile method_to_ignore1 method_to_ignore2 method_to_ignore3\n    FileWhereWeWantToIgnoreAllSpecialMethods __.+__\n    .* method_to_ignore_in_all_files\n    a_very_important_view_file ^get$ ^set$ ^post$\n    detect_.* get_val.*\n    ```\n\n#### Package in Your Project\nYou can also use `docstr-coverage` as a part of your project by importing it thusly:\n\n```python\nfrom docstr_coverage import get_docstring_coverage\nmy_coverage = get_docstring_coverage(['some_dir/file_0.py', 'some_dir/file_1.py'])\n```\n\n##### Arguments:\n* Required arg: `filenames` \\<list of string filenames\\>\n* Optional kwargs: `skip_magic` \\<bool\\>, `skip_file_docstring` \\<bool\\>, `verbose` \\<int (0-3)\\>\n\t* For more info on `get_docstring_coverage` and its parameters, please see its [documentation](https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html#get-docstring-coverage)\n\n##### Results:\n```get_docstring_coverage``` returns two dicts: 1) stats for each file, and 2) total stats.\nFor more info, please see the `get_docstring_coverage` [documentation](https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html#get-docstring-coverage)\n\nWhy Should I Use It?\n--------------------\n* Thorough documentation is important to help others (and even yourself) understand your code\n* As a developer, improve your code's maintainability for when you need to make updates and fix bugs\n* As a user, instantly know how easy it's going to be to understand a new library\n\t* If its documentation coverage is low, you may need to figure a lot out for yourself\n\nInstallation\n------------\n\n```\npip install docstr-coverage\n```\n\nIf you like being on the cutting-edge, and you want all the latest developments, run:\n\n```\npip install git+https://github.com/HunterMcGushion/docstr_coverage.git\n```\n\nSpecial Thanks\n--------------\nThank you to Alexey \"DataGreed\" Strelkov, and James Harlow for doing all the hard work.\n`docstr-coverage` simply revives and brings their efforts to Python 3. See 'THANKS.txt' for more information.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielsuo/docstring-coverage", "keywords": "docstring coverage documentation audit source code statistics report", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydocstring-coverage", "package_url": "https://pypi.org/project/pydocstring-coverage/", "platform": "", "project_url": "https://pypi.org/project/pydocstring-coverage/", "project_urls": {"Homepage": "https://github.com/danielsuo/docstring-coverage"}, "release_url": "https://pypi.org/project/pydocstring-coverage/1.0.5/", "requires_dist": null, "requires_python": "", "summary": "Utility for examining python source files to ensure proper documentation. Lists missing docstrings, and calculates overall docstring coverage percentage rating", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python docstring coverage</h1>\n<p>NOTE: This is fully the work of others. I made some changes (badge generation,\npre-commit hooks, etc) and wanted it to be pip installable. - @danielsuo.</p>\n<p>If the health of your documentation is in dire straits, <code>docstr-coverage</code> will see you now.</p>\n<p><code>docstr-coverage</code> is a simple tool that lets you measure your Python source code's\n<a href=\"http://www.python.org/dev/peps/pep-0257/#what-is-a-docstring\" rel=\"nofollow\">docstring</a> coverage. It can show you which of your functions,\nclasses, methods, and modules don't have docstrings. It also provide statistics about overall docstring coverage for individual\nfiles, and for your entire project.</p>\n<ul>\n<li><strong>Source:</strong> <a href=\"https://github.com/HunterMcGushion/docstr_coverage\" rel=\"nofollow\">https://github.com/HunterMcGushion/docstr_coverage</a></li>\n<li><strong>Documentation:</strong> <a href=\"https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html\" rel=\"nofollow\">https://docstr-coverage.readthedocs.io</a></li>\n</ul>\n<h2>Example</h2>\n<pre><code>&gt;&gt;&gt; HunterMcGushion$ docstr-coverage /docstr_coverage/\n\nFile: \"docstr_coverage/setup.py\"\n - No module docstring\n - No docstring for `readme`\n Needed: 2; Found: 0; Missing: 2; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/__init__.py\"\n - No module docstring\n Needed: 1; Found: 0; Missing: 1; Coverage: 0.0%\n\nFile: \"docstr_coverage/docstr_coverage/coverage.py\"\n - No docstring for `DocStringCoverageVisitor.__init__`\n Needed: 11; Found: 10; Missing: 1; Coverage: 90.9%\n\n\nOverall statistics for 3 files:\nDocstrings needed: 14; Docstrings found: 10; Docstrings missing: 4\nTotal docstring coverage: 71.4%;  Grade: Very good\n</code></pre>\n<h2>How Do I Use It?</h2>\n<h4>Command-line Tool</h4>\n<p>General usage is: <code>docstr-coverage &lt;path to dir or module&gt; [options]</code></p>\n<p>To test a single module, named <code>some_module.py</code>, run:</p>\n<pre><code>$ docstr-coverage some_module.py\n</code></pre>\n<p>To test a directory (recursively), just supply the directory <code>some_project/src</code> instead:</p>\n<pre><code>$ docstr-coverage some_project/src\n</code></pre>\n<h5>Options:</h5>\n<ul>\n<li>\n<p><em>--skipmagic, -m</em> - Ignore all magic methods (like <code>__init__</code>, and <code>__str__</code>)</p>\n</li>\n<li>\n<p><em>--skipfiledoc, -f</em> - Ignore module docstrings (at the top of files)</p>\n</li>\n<li>\n<p><em>--exclude=&lt;regex&gt;, -e &lt;regex&gt;</em> - Filepath pattern to exclude from analysis</p>\n<ul>\n<li>To exclude the contents of a virtual environment <code>env</code> and your <code>tests</code> directory, run:\n<br><code>$ docstr-coverage some_project/ -e \"env/*|tests/*\"</code></li>\n</ul>\n</li>\n<li>\n<p><em>--verbose=&lt;level&gt;, -v &lt;level&gt;</em> - Set verbosity level (0-3)</p>\n<ul>\n<li>0 - Silence</li>\n<li>1 - Print overall statistics</li>\n<li>2 - Also print individual statistics for each file</li>\n<li>3 - Also print missing docstrings (function names, class names, etc.)</li>\n</ul>\n</li>\n<li>\n<p><em>--docstr-ignore-file=&lt;filepath&gt;, -d &lt;filepath&gt;</em> - Filepath containing list of patterns to ignore. Patterns are (file-pattern, name-pattern) pairs</p>\n<ul>\n<li>File content example:</li>\n</ul>\n<pre><code>SomeFile method_to_ignore1 method_to_ignore2 method_to_ignore3\nFileWhereWeWantToIgnoreAllSpecialMethods __.+__\n.* method_to_ignore_in_all_files\na_very_important_view_file ^get$ ^set$ ^post$\ndetect_.* get_val.*\n</code></pre>\n</li>\n</ul>\n<h4>Package in Your Project</h4>\n<p>You can also use <code>docstr-coverage</code> as a part of your project by importing it thusly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">docstr_coverage</span> <span class=\"kn\">import</span> <span class=\"n\">get_docstring_coverage</span>\n<span class=\"n\">my_coverage</span> <span class=\"o\">=</span> <span class=\"n\">get_docstring_coverage</span><span class=\"p\">([</span><span class=\"s1\">'some_dir/file_0.py'</span><span class=\"p\">,</span> <span class=\"s1\">'some_dir/file_1.py'</span><span class=\"p\">])</span>\n</pre>\n<h5>Arguments:</h5>\n<ul>\n<li>Required arg: <code>filenames</code> &lt;list of string filenames&gt;</li>\n<li>Optional kwargs: <code>skip_magic</code> &lt;bool&gt;, <code>skip_file_docstring</code> &lt;bool&gt;, <code>verbose</code> &lt;int (0-3)&gt;\n<ul>\n<li>For more info on <code>get_docstring_coverage</code> and its parameters, please see its <a href=\"https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html#get-docstring-coverage\" rel=\"nofollow\">documentation</a></li>\n</ul>\n</li>\n</ul>\n<h5>Results:</h5>\n<p><code>get_docstring_coverage</code> returns two dicts: 1) stats for each file, and 2) total stats.\nFor more info, please see the <code>get_docstring_coverage</code> <a href=\"https://docstr-coverage.readthedocs.io/en/latest/api_essentials.html#get-docstring-coverage\" rel=\"nofollow\">documentation</a></p>\n<h2>Why Should I Use It?</h2>\n<ul>\n<li>Thorough documentation is important to help others (and even yourself) understand your code</li>\n<li>As a developer, improve your code's maintainability for when you need to make updates and fix bugs</li>\n<li>As a user, instantly know how easy it's going to be to understand a new library\n<ul>\n<li>If its documentation coverage is low, you may need to figure a lot out for yourself</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install docstr-coverage\n</code></pre>\n<p>If you like being on the cutting-edge, and you want all the latest developments, run:</p>\n<pre><code>pip install git+https://github.com/HunterMcGushion/docstr_coverage.git\n</code></pre>\n<h2>Special Thanks</h2>\n<p>Thank you to Alexey \"DataGreed\" Strelkov, and James Harlow for doing all the hard work.\n<code>docstr-coverage</code> simply revives and brings their efforts to Python 3. See 'THANKS.txt' for more information.</p>\n\n          </div>"}, "last_serial": 6769802, "releases": {"1.0.5": [{"comment_text": "", "digests": {"md5": "5164116c43db52834caf10c1b897bf5a", "sha256": "24f730d430767ff0b8ea7fea0b5ec082ddfc6c5d04f265441a2b39de0f646e47"}, "downloads": -1, "filename": "pydocstring-coverage-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5164116c43db52834caf10c1b897bf5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9665, "upload_time": "2020-03-07T23:21:48", "upload_time_iso_8601": "2020-03-07T23:21:48.222295Z", "url": "https://files.pythonhosted.org/packages/51/b3/0ae8cd2542a1b92237b106003fc3383d3a3fe2cddf4d97ca763994b0319a/pydocstring-coverage-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5164116c43db52834caf10c1b897bf5a", "sha256": "24f730d430767ff0b8ea7fea0b5ec082ddfc6c5d04f265441a2b39de0f646e47"}, "downloads": -1, "filename": "pydocstring-coverage-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5164116c43db52834caf10c1b897bf5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9665, "upload_time": "2020-03-07T23:21:48", "upload_time_iso_8601": "2020-03-07T23:21:48.222295Z", "url": "https://files.pythonhosted.org/packages/51/b3/0ae8cd2542a1b92237b106003fc3383d3a3fe2cddf4d97ca763994b0319a/pydocstring-coverage-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:53 2020"}