{"info": {"author": "George Dahl", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "[This fork of George Dahl's gdbn merely exists to make it available as\na setuptools package on PyPI.  The original version can be downloaded\nfrom http://www.cs.toronto.edu/~gdahl/]\n\nThis package contains python code for pre-trained deep neural networks (sometimes called deep belief networks in an abuse of terminology that I too have been guilty of). RBM pre-training is supported and backpropagation. There are a handful of possible unit types. For training, minibatched stochastic gradient descent is implemented. This initial release has essentially no documentation other than what exists in the code itself (which is very little), but it is small enough so hopefully someone familiar with the algorithms and with python could use it. Of course such a person could probably write their own software.\n\nThis initial release only has the barest essentials of features. My internal version has more features, but some of them have not been published yet and thus have been stripped away from the release version. After all the features I have implelmented in my internal code have been made public, I plan on doing a slightly better release, perhaps even with some documentation.\n\n\n\nDependencies\ngnumpy (http://www.cs.toronto.edu/~tijmen/gnumpy.html)\nand one of\ncudamat (http://code.google.com/p/cudamat/) or\nnpmat (http://www.cs.toronto.edu/~ilya/npmat.py), a non-gpu cudamat stand-in.\n\n\nRunning the Example (mnistExample.py)\n\nDownload the gzipped data from http://www.cs.toronto.edu/~gdahl/mnist.npz.gz and unzip it into the same folder as all of the code (or change the line \nf = num.load(\"mnist.npz\")\nin mnistExample.py. Then you should be able to run the example with\n$ python mnistExample.py\nassuming you have obtained all the dependencies for", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.cs.toronto.edu/~gdahl/", "keywords": null, "license": "MIT (see license.txt)", "maintainer": null, "maintainer_email": null, "name": "gdbn", "package_url": "https://pypi.org/project/gdbn/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gdbn/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.cs.toronto.edu/~gdahl/"}, "release_url": "https://pypi.org/project/gdbn/0.1/", "requires_dist": null, "requires_python": null, "summary": "Pre-trained deep neural networks", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>[This fork of George Dahl\u2019s gdbn merely exists to make it available as\na setuptools package on PyPI.  The original version can be downloaded\nfrom <a href=\"http://www.cs.toronto.edu/~gdahl/\" rel=\"nofollow\">http://www.cs.toronto.edu/~gdahl/</a>]</p>\n<p>This package contains python code for pre-trained deep neural networks (sometimes called deep belief networks in an abuse of terminology that I too have been guilty of). RBM pre-training is supported and backpropagation. There are a handful of possible unit types. For training, minibatched stochastic gradient descent is implemented. This initial release has essentially no documentation other than what exists in the code itself (which is very little), but it is small enough so hopefully someone familiar with the algorithms and with python could use it. Of course such a person could probably write their own software.</p>\n<p>This initial release only has the barest essentials of features. My internal version has more features, but some of them have not been published yet and thus have been stripped away from the release version. After all the features I have implelmented in my internal code have been made public, I plan on doing a slightly better release, perhaps even with some documentation.</p>\n<p>Dependencies\ngnumpy (<a href=\"http://www.cs.toronto.edu/~tijmen/gnumpy.html\" rel=\"nofollow\">http://www.cs.toronto.edu/~tijmen/gnumpy.html</a>)\nand one of\ncudamat (<a href=\"http://code.google.com/p/cudamat/\" rel=\"nofollow\">http://code.google.com/p/cudamat/</a>) or\nnpmat (<a href=\"http://www.cs.toronto.edu/~ilya/npmat.py\" rel=\"nofollow\">http://www.cs.toronto.edu/~ilya/npmat.py</a>), a non-gpu cudamat stand-in.</p>\n<p>Running the Example (mnistExample.py)</p>\n<p>Download the gzipped data from <a href=\"http://www.cs.toronto.edu/~gdahl/mnist.npz.gz\" rel=\"nofollow\">http://www.cs.toronto.edu/~gdahl/mnist.npz.gz</a> and unzip it into the same folder as all of the code (or change the line\nf = num.load(\u201cmnist.npz\u201d)\nin mnistExample.py. Then you should be able to run the example with\n$ python mnistExample.py\nassuming you have obtained all the dependencies for</p>\n\n          </div>"}, "last_serial": 973939, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "954528ae4ca9ad27021b5eeb0725e9ee", "sha256": "cb3ceac77e89a31632b27d19c2c5d87ccb425c6bf281b8a8d2bdcf83fe8818a6"}, "downloads": -1, "filename": "gdbn-0.1.tar.gz", "has_sig": false, "md5_digest": "954528ae4ca9ad27021b5eeb0725e9ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10824, "upload_time": "2014-01-19T12:23:22", "upload_time_iso_8601": "2014-01-19T12:23:22.635907Z", "url": "https://files.pythonhosted.org/packages/88/5c/512341ac1e6e8fa3008171b8dae49d2bd7b886e79f525658955bc59946c1/gdbn-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "954528ae4ca9ad27021b5eeb0725e9ee", "sha256": "cb3ceac77e89a31632b27d19c2c5d87ccb425c6bf281b8a8d2bdcf83fe8818a6"}, "downloads": -1, "filename": "gdbn-0.1.tar.gz", "has_sig": false, "md5_digest": "954528ae4ca9ad27021b5eeb0725e9ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10824, "upload_time": "2014-01-19T12:23:22", "upload_time_iso_8601": "2014-01-19T12:23:22.635907Z", "url": "https://files.pythonhosted.org/packages/88/5c/512341ac1e6e8fa3008171b8dae49d2bd7b886e79f525658955bc59946c1/gdbn-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:43 2020"}