{"info": {"author": "Tomer Burg, Sam Lillo", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Tropycal\nTropycal is a Python package intended to simplify the process of retrieving and analyzing tropical cyclone data, both for past storms and in real time, and is geared towards the research and operational meteorology sectors.\n\nTropycal can read in HURDAT2 and IBTrACS reanalysis data and operational National Hurricane Center (NHC) Best Track data and conform them to the same format, which can be used to perform climatological, seasonal and individual storm analyses. For each individual storm, operational NHC forecasts, aircraft reconnaissance data, and any associated tornado activity can be retrieved and plotted.\n\n## Installation\nThe currently recommended method of installation is via pip:\n\n```sh\npip install tropycal\n```\n\nTropycal can also be installed by cloning the GitHub repository:\n\n```sh\ngit clone https://github.com/tropycal/tropycal\ncd tropycal\npython setup.py install\n```\n\n## Dependencies\n- matplotlib >= 2.2.2\n- numpy >= 1.14.3\n- scipy >= 1.1.0\n- pandas >= 0.23.0\n- geopy >= 1.18.1\n- xarray >= 0.10.7\n- networkx >= 2.0.0\n- requests >= 2.22.0\n\nTo fully leverage tropycal's plotting capabilities, it is strongly recommended to have cartopy >= 0.17.0 installed.\n\n## Documentation\nFor full documentation and examples, please refer to [Tropycal Documentation](https://tropycal.github.io/tropycal/).\n\n## Sample Usage\nAs an example, read in the North Atlantic HURDAT2 reanalysis dataset, excluding Best Track (current year's storms):\n\n```python\nimport tropycal.tracks as tracks\n\nhurdat = tracks.TrackDataset(basin='north_atlantic')\n```\n\n### Individual Storm Analysis\n\nIndividual storms can be retrieved from the dataset by calling the \"get_storm\" function, which returns an instance of a Storm object. This can be done by either entering a tuple containing the storm name and year, or by the standard tropical cyclone ID (e.g., AL012019).\n\nLet's retrieve an instance of Hurricane Michael from 2018:\n\n```python\nstorm = hurdat_atl.get_storm(('michael',2018))\n```\n\nThis instance of Storm contains several methods that return the storm data back in different data types. The following examples will show how to retrieve 3 different data types.\n\nRetrieve Michael's data in different data formats:\n\n```python\nstorm.to_dict()\nstorm.to_xarray()\nstorm.to_dataframe()\n```\n\nVisualize Michael's observed track with the `plot` function:\n\nNote that you can pass various arguments to the `plot` function, such as customizing the map and track aspects. The only cartopy projection currently offered is PlateCarree. Read through the documentation for more customization options.\n\n```python\nstorm.plot()\n```\n\nIf this storm was ever in NHC's area of responsibility, you can retrieve operational forecast data for this event provided it is available. Forecast discussions date back to 1992, and forecast tracks date back to 1950.\n\nRetrieve a single forecast discussion for Michael - both of these methods will yield an identical result:\n\n```python\n#Method 1: Specify date closest to desired discussion\ndisco = storm.get_nhc_discussion(forecast=dt.datetime(2018,10,7,0))\nprint(disco['text'])\n\n#Method 2: Specify forecast discussion ID\ndisco = storm.get_nhc_discussion(forecast=2)\nprint(disco['text'])\n```\n\nNHC also archives forecast tracks, albeit in a different format than the official advisory data, so the operational forecast IDs here differ from the discussion IDs. As such, the forecast cone is not directly retrieved from NHC, but is generated using an algorithm that yields a cone closely resembling the official NHC cone.\n\nLet's plot Michael's second forecast cone:\n\n```python\nstorm.plot_nhc_forecast(forecast=2)\n```\n\nNow let's look at the 12th forecast for Michael.\n\nNote that the observed track here differs from the HURDAT2 track plotted previously! This is because this plot displays the operationally analyzed location and intensity, rather than the post-storm analysis data. This is done to account for differences between HURDAT2 and operational data.\n\n```python\nstorm.plot_nhc_forecast(forecast=12)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tropycal/tropycal", "keywords": "meteorology,weather", "license": "", "maintainer": "", "maintainer_email": "", "name": "tropycal", "package_url": "https://pypi.org/project/tropycal/", "platform": "any", "project_url": "https://pypi.org/project/tropycal/", "project_urls": {"Documentation": "https://tropycal.github.io/tropycal/", "Homepage": "https://github.com/tropycal/tropycal", "Source Code": "https://github.com/tropycal/tropycal"}, "release_url": "https://pypi.org/project/tropycal/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Package for retrieving and analyzing tropical cyclone data", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tropycal</h1>\n<p>Tropycal is a Python package intended to simplify the process of retrieving and analyzing tropical cyclone data, both for past storms and in real time, and is geared towards the research and operational meteorology sectors.</p>\n<p>Tropycal can read in HURDAT2 and IBTrACS reanalysis data and operational National Hurricane Center (NHC) Best Track data and conform them to the same format, which can be used to perform climatological, seasonal and individual storm analyses. For each individual storm, operational NHC forecasts, aircraft reconnaissance data, and any associated tornado activity can be retrieved and plotted.</p>\n<h2>Installation</h2>\n<p>The currently recommended method of installation is via pip:</p>\n<pre>pip install tropycal\n</pre>\n<p>Tropycal can also be installed by cloning the GitHub repository:</p>\n<pre>git clone https://github.com/tropycal/tropycal\n<span class=\"nb\">cd</span> tropycal\npython setup.py install\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li>matplotlib &gt;= 2.2.2</li>\n<li>numpy &gt;= 1.14.3</li>\n<li>scipy &gt;= 1.1.0</li>\n<li>pandas &gt;= 0.23.0</li>\n<li>geopy &gt;= 1.18.1</li>\n<li>xarray &gt;= 0.10.7</li>\n<li>networkx &gt;= 2.0.0</li>\n<li>requests &gt;= 2.22.0</li>\n</ul>\n<p>To fully leverage tropycal's plotting capabilities, it is strongly recommended to have cartopy &gt;= 0.17.0 installed.</p>\n<h2>Documentation</h2>\n<p>For full documentation and examples, please refer to <a href=\"https://tropycal.github.io/tropycal/\" rel=\"nofollow\">Tropycal Documentation</a>.</p>\n<h2>Sample Usage</h2>\n<p>As an example, read in the North Atlantic HURDAT2 reanalysis dataset, excluding Best Track (current year's storms):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tropycal.tracks</span> <span class=\"k\">as</span> <span class=\"nn\">tracks</span>\n\n<span class=\"n\">hurdat</span> <span class=\"o\">=</span> <span class=\"n\">tracks</span><span class=\"o\">.</span><span class=\"n\">TrackDataset</span><span class=\"p\">(</span><span class=\"n\">basin</span><span class=\"o\">=</span><span class=\"s1\">'north_atlantic'</span><span class=\"p\">)</span>\n</pre>\n<h3>Individual Storm Analysis</h3>\n<p>Individual storms can be retrieved from the dataset by calling the \"get_storm\" function, which returns an instance of a Storm object. This can be done by either entering a tuple containing the storm name and year, or by the standard tropical cyclone ID (e.g., AL012019).</p>\n<p>Let's retrieve an instance of Hurricane Michael from 2018:</p>\n<pre><span class=\"n\">storm</span> <span class=\"o\">=</span> <span class=\"n\">hurdat_atl</span><span class=\"o\">.</span><span class=\"n\">get_storm</span><span class=\"p\">((</span><span class=\"s1\">'michael'</span><span class=\"p\">,</span><span class=\"mi\">2018</span><span class=\"p\">))</span>\n</pre>\n<p>This instance of Storm contains several methods that return the storm data back in different data types. The following examples will show how to retrieve 3 different data types.</p>\n<p>Retrieve Michael's data in different data formats:</p>\n<pre><span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n<span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">to_xarray</span><span class=\"p\">()</span>\n<span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</pre>\n<p>Visualize Michael's observed track with the <code>plot</code> function:</p>\n<p>Note that you can pass various arguments to the <code>plot</code> function, such as customizing the map and track aspects. The only cartopy projection currently offered is PlateCarree. Read through the documentation for more customization options.</p>\n<pre><span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<p>If this storm was ever in NHC's area of responsibility, you can retrieve operational forecast data for this event provided it is available. Forecast discussions date back to 1992, and forecast tracks date back to 1950.</p>\n<p>Retrieve a single forecast discussion for Michael - both of these methods will yield an identical result:</p>\n<pre><span class=\"c1\">#Method 1: Specify date closest to desired discussion</span>\n<span class=\"n\">disco</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">get_nhc_discussion</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">disco</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span>\n\n<span class=\"c1\">#Method 2: Specify forecast discussion ID</span>\n<span class=\"n\">disco</span> <span class=\"o\">=</span> <span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">get_nhc_discussion</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">disco</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span>\n</pre>\n<p>NHC also archives forecast tracks, albeit in a different format than the official advisory data, so the operational forecast IDs here differ from the discussion IDs. As such, the forecast cone is not directly retrieved from NHC, but is generated using an algorithm that yields a cone closely resembling the official NHC cone.</p>\n<p>Let's plot Michael's second forecast cone:</p>\n<pre><span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">plot_nhc_forecast</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Now let's look at the 12th forecast for Michael.</p>\n<p>Note that the observed track here differs from the HURDAT2 track plotted previously! This is because this plot displays the operationally analyzed location and intensity, rather than the post-storm analysis data. This is done to account for differences between HURDAT2 and operational data.</p>\n<pre><span class=\"n\">storm</span><span class=\"o\">.</span><span class=\"n\">plot_nhc_forecast</span><span class=\"p\">(</span><span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6604349, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8a1cef4a8ad2ffdb2360b83fbc0aae97", "sha256": "035b144582b7298eea6801cb62cddc1a8e596b3e913276772336244894bd01ef"}, "downloads": -1, "filename": "tropycal-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8a1cef4a8ad2ffdb2360b83fbc0aae97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6635712, "upload_time": "2019-10-25T22:10:46", "upload_time_iso_8601": "2019-10-25T22:10:46.242515Z", "url": "https://files.pythonhosted.org/packages/d8/b5/6863bc24f74f42e717bbf24738103d628c464fb2e8f17b0c9970c2562e0b/tropycal-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ce6e9f3097bfdae0f0cfcd671b43ad48", "sha256": "483b015f313b3cf0fcc761205a294ceee345a8fc9587635b86df1de854ff9c92"}, "downloads": -1, "filename": "tropycal-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ce6e9f3097bfdae0f0cfcd671b43ad48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6638046, "upload_time": "2020-02-10T18:44:13", "upload_time_iso_8601": "2020-02-10T18:44:13.370310Z", "url": "https://files.pythonhosted.org/packages/24/76/e8524633e41675cbaf1395e27549cb83be110ff32d9721a49ee357d86c95/tropycal-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce6e9f3097bfdae0f0cfcd671b43ad48", "sha256": "483b015f313b3cf0fcc761205a294ceee345a8fc9587635b86df1de854ff9c92"}, "downloads": -1, "filename": "tropycal-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ce6e9f3097bfdae0f0cfcd671b43ad48", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6638046, "upload_time": "2020-02-10T18:44:13", "upload_time_iso_8601": "2020-02-10T18:44:13.370310Z", "url": "https://files.pythonhosted.org/packages/24/76/e8524633e41675cbaf1395e27549cb83be110ff32d9721a49ee357d86c95/tropycal-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:41 2020"}