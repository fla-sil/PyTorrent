{"info": {"author": "Pauli Rikula", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "# python-domain-equations\n\nGenerate and represent domain model classes via category-like equations\nwhich can be simplified to get the optimal class structure for the modeled domain.\n\n## Rationale\n\nIf you have a problem, it sometime helps if you formulate the problem in a new perspective.\n\nThe PropertyGraph -class can be used to domain model class structure modeling and generation.\nThe trick here is to transform the problem to category-like equations which\ncan be simplified to get the optimal class structure for the modeled domain.\n\nMore details of the equation system can be found from the site: https://github.com/kummahiih/python-category-equations\n\nAs shown on the end of the next section this notation might also allow you to develope your domain model while coding with less \nrefactoring.\n\n## Usage\n\nTo model your domain, create a property graph:\n\n    >>> g  = PropertyGraph()\n\nPlease note that the I, O and C here are for the property graph instance g:\n\n    >>> I, O, C = g.I, g.O, g.C\n\nFor example to measure speed you have to get interval and distance. First you have to define\nthe used properties by using the wrapper class C:\n\n    >>> speed = C('speed')\n    >>> distance = C('distance')\n    >>> duration = C('duration')\n\nYou can represent the need of something with the operator '*' and then\nhave the properties set into the graph g like this:\n\n    >>> for i in g.get_properties_from( speed*(distance+duration) ):\n    ...  print(i)\n    {\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n    {\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n    {\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n\n\n    >>> for i in g.properties:\n    ...  print(i)\n    {\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n    {\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n    {\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n\nFor fines you have to know (at least in Finland) also:\n\n    >>> fine = C('fine')\n    >>> monthly_income =  C('monthly_income')\n    >>> speed_limit =  C('speed_limit')\n    >>> first_model = O * (speed*(distance + duration) + fine*(speed + monthly_income + speed_limit)) * O\n    >>> for i in g.get_properties_from(first_model):\n    ...  print(i)\n    {\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n    {\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n    {\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n    {\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n    {\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n    {\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n\nBecause these equations are the same (note the usage of the O at the begin and end)\n\n    >>> simplified_model =  O *  fine*(speed*(distance + duration)*O + monthly_income + speed_limit) * O\n    >>> first_model == simplified_model\n    True\n\nalso the generated properties are the same:\n\n    >>> for i in g.get_properties_from(simplified_model):\n    ...  print(i)\n    {\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n    {\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n    {\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n    {\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n    {\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n    {\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n\n\nNice and simple, but then the reality starts to kick in and you have to model the real thing where you have for example\ndifferent rules for small fines which do not need monthly income:\n\n    >>> small_fine = C(\"small_fine\")\n    >>> second_model =O*(fine* (speed*(distance + duration)*O + monthly_income + speed_limit) + small_fine*(speed + speed_limit))*O\n    >>> for i in g.get_properties_from(second_model):\n    ...  print(i)\n    {\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n    {\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n    {\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n    {\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n    {\"naming\": {\"type\": \"SmallFine\", \"value\": \"small_fine\", \"plural\": \"small_fines\", \"docstring\": \"small fine\"}, \"properties\": [\"Speed\", \"SpeedLimit\"]}\n    {\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n    {\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n\n\nHere one could create an intermediate class and use it as a member on both fines or inherit the small fine and fine from the same base class.\nIf you write it by using the provided equation system, it looks like this:\n\n    >>> second_model_simplified = O * (fine* ( I + monthly_income*O ) + small_fine)*(speed + speed_limit*O)*(distance + duration) * O\n    >>> second_model_simplified == second_model\n    True\n\nIn other words: if you manage to minimize the equation by finding the common divisors, you can get the optimal class composition\nstructure from it.\n\nIn case you are wondering how to spot the potential intermediate constructs from the model equation, the trick is to search for the\nproduct terms which end to the terminator O:\n\n    >>> for term in g.extract_intermediate_terms(second_model_simplified):\n    ...   print(term)\n    (C(speed) + C(speed_limit) * O) * (C(distance) + C(duration)) * O\n    (C(distance) + C(duration)) * O\n\nAnd of course it is possible to generate abstract class definitions from the model:\n\n    >>> interfaces = g.get_abstract_classes()\n    >>> interfaces\n    namespace(IDistance=<class 'domain_equations.interface_generator.IDistance'>, IDuration=<class 'domain_equations.interface_generator.IDuration'>, IFine=<class 'domain_equations.interface_generator.IFine'>, IMonthlyIncome=<class 'domain_equations.interface_generator.IMonthlyIncome'>, ISmallFine=<class 'domain_equations.interface_generator.ISmallFine'>, ISpeed=<class 'domain_equations.interface_generator.ISpeed'>, ISpeedLimit=<class 'domain_equations.interface_generator.ISpeedLimit'>)\n\nAnd if you inherit em, they work as abstract classes should:\n\n    >>> class Fine(interfaces.IFine): pass\n    >>> f = Fine()\n    Traceback (most recent call last):\n    ...\n    TypeError: Can't instantiate abstract class Fine with abstract methods monthly_income, speed, speed_limit\n\n\nThe nice thing with these unoptimized abstact classes  is, that they do not change as long as the modeling equation wont change. In other words:\n\n    >>> second_model_simplified == second_model\n    True\n\nmeans that these behave in similar way:\n\n    >>> _ = g.get_properties_from(second_model_simplified)\n    >>> interfaces = g.get_abstract_classes()\n    >>> class Fine(interfaces.IFine): pass\n    >>> f = Fine()\n    Traceback (most recent call last):\n    ...\n    TypeError: Can't instantiate abstract class Fine with abstract methods monthly_income, speed, speed_limit\n\n\nWhen you dont yet know your domain model well, with this you could write your code first and clean the \ninheritance or composition arrangements later without changing a bit from the abstract classes you actually use.\n\nThe container types are supported this far:\n\n    >>> R = g.R\n    >>> fine_container = R('fine')\n    >>> fine_container * fine\n    C(fine_container) * C(fine)\n\nOr\n\n    >>> g  = PropertyGraph()\n    >>> I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n\n\n    >>> knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n    >>> knife\n    C(accessories.Knife)\n    >>> knife_container = R('knife', item_module=\"accessories\")\n    >>> model = O * knife_container * knife * O\n    >>> model\n    O * C(knife_container) * C(accessories.Knife) * O\n\nAnd the abstract class generation works as well:\n\n    >>> for term in g.get_properties_from(model):\n    ...   print(term)\n    {\"naming\": {\"type\": \"KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n    {\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}}\n\n\n    >>> interfaces = g.get_abstract_classes()\n    >>> class KnifeContainer(interfaces.IKnifeContainer): pass\n    >>> f = KnifeContainer()\n    Traceback (most recent call last):\n    ...\n    TypeError: Can't instantiate abstract class KnifeContainer with abstract methods knives\n\n\nBase types are can be taken here with a decorator 'T' obtained above and they work with modules like this:\n\n    >>> g  = PropertyGraph()\n    >>> I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n    >>> knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n    >>> bytes = T('bytes')\n    >>> for term in g.buildin_types:\n    ...   print(term)\n    {\"type\": \"bytes\"}\n\n    >>> model = O *(R('knife', item_module=\"accessories\", container_module=\"kitchen\") * knife * O + knife * bytes) * O\n    >>> model\n    O * (C(kitchen.KnifeContainer) * C(accessories.Knife) * O + C(accessories.Knife) * C(bytes)) * O\n\n    >>> for term in g.get_properties_from(model):\n    ...   print(term)\n    {\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}, \"properties\": [\"bytes\"]}\n    {\"naming\": {\"type\": \"kitchen.KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n\n    >>> for term in g.buildin_types:\n    ...   print(term)\n    {\"type\": \"bytes\"}\n\n\n    >>> for module in g.modules:\n    ...   print(module)\n    {\"module\": accessories, \"types\": [\"accessories.Knife\"]}\n    {\"module\": kitchen, \"types\": [\"kitchen.KnifeContainer\"]}\n\n\n    >>> for module in g.modules:\n    ...    print(\"-\"*20)\n    ...    print(module.module_name)\n    ...    print(\"-\"*20)\n    ...    print(ProtobufGenerator.get_property_file_content(module))\n    --------------------\n    accessories\n    --------------------\n    syntax = \"proto2\";\n    package accessories;\n    --------------------\n    kitchen\n    --------------------\n    syntax = \"proto2\";\n    package kitchen;\n    import accessories;\n    message KnifeContainer {\n        repeated bytes knives = 1;\n    }\n\n\n\n    >>> g  = PropertyGraph()\n    >>> I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n    >>> knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n    >>> bytes = T('bytes')\n    >>> length_type = T('float')\n    >>> knife_def = knife * ( C(\"name\") * bytes * O + C(\"length\") * length_type * O)\n    >>> knife_container_def = R('knife', item_module=\"accessories\", container_module=\"kitchen\") * knife * O\n    >>> model = O *(knife_container_def + knife_def ) * O\n    >>> model.evaluate()\n    >>> for term in g.properties:\n    ...   print(term)\n    {\"naming\": {\"type\": \"Length\", \"value\": \"length\", \"plural\": \"lengths\", \"docstring\": \"length\"}, \"properties\": [\"float\"]}\n    {\"naming\": {\"type\": \"Name\", \"value\": \"name\", \"plural\": \"names\", \"docstring\": \"name\"}, \"properties\": [\"bytes\"]}\n    {\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}, \"properties\": [\"Length\", \"Name\"]}\n    {\"naming\": {\"type\": \"kitchen.KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n\n\n    >>> for module in g.modules:\n    ...    print(\"-\"*20)\n    ...    print(module.module_name + \".proto\")\n    ...    print(\"-\"*20)\n    ...    print(ProtobufGenerator.get_property_file_content(module))\n    --------------------\n    accessories.proto\n    --------------------\n    syntax = \"proto2\";\n    package accessories;\n    message Knife {\n        required float length = 1;\n        required bytes name = 2;\n    }\n    --------------------\n    kitchen.proto\n    --------------------\n    syntax = \"proto2\";\n    package kitchen;\n    import accessories;\n    message KnifeContainer {\n        repeated Knife knives = 1;\n    }\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kummahiih/python-domain-equations", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-domain-equations", "package_url": "https://pypi.org/project/python-domain-equations/", "platform": "", "project_url": "https://pypi.org/project/python-domain-equations/", "project_urls": {"Homepage": "https://github.com/kummahiih/python-domain-equations"}, "release_url": "https://pypi.org/project/python-domain-equations/0.2.0/", "requires_dist": ["python-category-equations (==0.7.2)"], "requires_python": "~=3.6", "summary": "python-domain-equations", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># python-domain-equations</p>\n<p>Generate and represent domain model classes via category-like equations\nwhich can be simplified to get the optimal class structure for the modeled domain.</p>\n<p>## Rationale</p>\n<p>If you have a problem, it sometime helps if you formulate the problem in a new perspective.</p>\n<p>The PropertyGraph -class can be used to domain model class structure modeling and generation.\nThe trick here is to transform the problem to category-like equations which\ncan be simplified to get the optimal class structure for the modeled domain.</p>\n<p>More details of the equation system can be found from the site: <a href=\"https://github.com/kummahiih/python-category-equations\" rel=\"nofollow\">https://github.com/kummahiih/python-category-equations</a></p>\n<p>As shown on the end of the next section this notation might also allow you to develope your domain model while coding with less\nrefactoring.</p>\n<p>## Usage</p>\n<p>To model your domain, create a property graph:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; g  = PropertyGraph()\n</pre>\n</blockquote>\n<p>Please note that the I, O and C here are for the property graph instance g:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; I, O, C = g.I, g.O, g.C\n</pre>\n</blockquote>\n<p>For example to measure speed you have to get interval and distance. First you have to define\nthe used properties by using the wrapper class C:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; speed = C('speed')\n&gt;&gt;&gt; distance = C('distance')\n&gt;&gt;&gt; duration = C('duration')\n</pre>\n</blockquote>\n<p>You can represent the need of something with the operator \u2018*\u2019 and then\nhave the properties set into the graph g like this:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for i in g.get_properties_from( speed*(distance+duration) ):\n...  print(i)\n{\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n{\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n{\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n</pre>\n<pre>&gt;&gt;&gt; for i in g.properties:\n...  print(i)\n{\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n{\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n{\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n</pre>\n</blockquote>\n<p>For fines you have to know (at least in Finland) also:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; fine = C('fine')\n&gt;&gt;&gt; monthly_income =  C('monthly_income')\n&gt;&gt;&gt; speed_limit =  C('speed_limit')\n&gt;&gt;&gt; first_model = O * (speed*(distance + duration) + fine*(speed + monthly_income + speed_limit)) * O\n&gt;&gt;&gt; for i in g.get_properties_from(first_model):\n...  print(i)\n{\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n{\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n{\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n{\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n{\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n{\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n</pre>\n</blockquote>\n<p>Because these equations are the same (note the usage of the O at the begin and end)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; simplified_model =  O *  fine*(speed*(distance + duration)*O + monthly_income + speed_limit) * O\n&gt;&gt;&gt; first_model == simplified_model\nTrue\n</pre>\n</blockquote>\n<p>also the generated properties are the same:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for i in g.get_properties_from(simplified_model):\n...  print(i)\n{\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n{\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n{\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n{\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n{\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n{\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n</pre>\n</blockquote>\n<p>Nice and simple, but then the reality starts to kick in and you have to model the real thing where you have for example\ndifferent rules for small fines which do not need monthly income:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; small_fine = C(\"small_fine\")\n&gt;&gt;&gt; second_model =O*(fine* (speed*(distance + duration)*O + monthly_income + speed_limit) + small_fine*(speed + speed_limit))*O\n&gt;&gt;&gt; for i in g.get_properties_from(second_model):\n...  print(i)\n{\"naming\": {\"type\": \"Distance\", \"value\": \"distance\", \"plural\": \"distances\", \"docstring\": \"distance\"}}\n{\"naming\": {\"type\": \"Duration\", \"value\": \"duration\", \"plural\": \"durations\", \"docstring\": \"duration\"}}\n{\"naming\": {\"type\": \"Fine\", \"value\": \"fine\", \"plural\": \"fines\", \"docstring\": \"fine\"}, \"properties\": [\"MonthlyIncome\", \"Speed\", \"SpeedLimit\"]}\n{\"naming\": {\"type\": \"MonthlyIncome\", \"value\": \"monthly_income\", \"plural\": \"monthly_incomes\", \"docstring\": \"monthly income\"}}\n{\"naming\": {\"type\": \"SmallFine\", \"value\": \"small_fine\", \"plural\": \"small_fines\", \"docstring\": \"small fine\"}, \"properties\": [\"Speed\", \"SpeedLimit\"]}\n{\"naming\": {\"type\": \"Speed\", \"value\": \"speed\", \"plural\": \"speeds\", \"docstring\": \"speed\"}, \"properties\": [\"Distance\", \"Duration\"]}\n{\"naming\": {\"type\": \"SpeedLimit\", \"value\": \"speed_limit\", \"plural\": \"speed_limits\", \"docstring\": \"speed limit\"}}\n</pre>\n</blockquote>\n<p>Here one could create an intermediate class and use it as a member on both fines or inherit the small fine and fine from the same base class.\nIf you write it by using the provided equation system, it looks like this:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; second_model_simplified = O * (fine* ( I + monthly_income*O ) + small_fine)*(speed + speed_limit*O)*(distance + duration) * O\n&gt;&gt;&gt; second_model_simplified == second_model\nTrue\n</pre>\n</blockquote>\n<p>In other words: if you manage to minimize the equation by finding the common divisors, you can get the optimal class composition\nstructure from it.</p>\n<p>In case you are wondering how to spot the potential intermediate constructs from the model equation, the trick is to search for the\nproduct terms which end to the terminator O:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for term in g.extract_intermediate_terms(second_model_simplified):\n...   print(term)\n(C(speed) + C(speed_limit) * O) * (C(distance) + C(duration)) * O\n(C(distance) + C(duration)) * O\n</pre>\n</blockquote>\n<p>And of course it is possible to generate abstract class definitions from the model:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; interfaces = g.get_abstract_classes()\n&gt;&gt;&gt; interfaces\nnamespace(IDistance=&lt;class 'domain_equations.interface_generator.IDistance'&gt;, IDuration=&lt;class 'domain_equations.interface_generator.IDuration'&gt;, IFine=&lt;class 'domain_equations.interface_generator.IFine'&gt;, IMonthlyIncome=&lt;class 'domain_equations.interface_generator.IMonthlyIncome'&gt;, ISmallFine=&lt;class 'domain_equations.interface_generator.ISmallFine'&gt;, ISpeed=&lt;class 'domain_equations.interface_generator.ISpeed'&gt;, ISpeedLimit=&lt;class 'domain_equations.interface_generator.ISpeedLimit'&gt;)\n</pre>\n</blockquote>\n<p>And if you inherit em, they work as abstract classes should:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Fine(interfaces.IFine): pass\n&gt;&gt;&gt; f = Fine()\nTraceback (most recent call last):\n...\nTypeError: Can't instantiate abstract class Fine with abstract methods monthly_income, speed, speed_limit\n</pre>\n</blockquote>\n<p>The nice thing with these unoptimized abstact classes  is, that they do not change as long as the modeling equation wont change. In other words:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; second_model_simplified == second_model\nTrue\n</pre>\n</blockquote>\n<p>means that these behave in similar way:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; _ = g.get_properties_from(second_model_simplified)\n&gt;&gt;&gt; interfaces = g.get_abstract_classes()\n&gt;&gt;&gt; class Fine(interfaces.IFine): pass\n&gt;&gt;&gt; f = Fine()\nTraceback (most recent call last):\n...\nTypeError: Can't instantiate abstract class Fine with abstract methods monthly_income, speed, speed_limit\n</pre>\n</blockquote>\n<p>When you dont yet know your domain model well, with this you could write your code first and clean the\ninheritance or composition arrangements later without changing a bit from the abstract classes you actually use.</p>\n<p>The container types are supported this far:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; R = g.R\n&gt;&gt;&gt; fine_container = R('fine')\n&gt;&gt;&gt; fine_container * fine\nC(fine_container) * C(fine)\n</pre>\n</blockquote>\n<p>Or</p>\n<blockquote>\n<pre>&gt;&gt;&gt; g  = PropertyGraph()\n&gt;&gt;&gt; I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n</pre>\n<pre>&gt;&gt;&gt; knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n&gt;&gt;&gt; knife\nC(accessories.Knife)\n&gt;&gt;&gt; knife_container = R('knife', item_module=\"accessories\")\n&gt;&gt;&gt; model = O * knife_container * knife * O\n&gt;&gt;&gt; model\nO * C(knife_container) * C(accessories.Knife) * O\n</pre>\n</blockquote>\n<p>And the abstract class generation works as well:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; for term in g.get_properties_from(model):\n...   print(term)\n{\"naming\": {\"type\": \"KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n{\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}}\n</pre>\n<pre>&gt;&gt;&gt; interfaces = g.get_abstract_classes()\n&gt;&gt;&gt; class KnifeContainer(interfaces.IKnifeContainer): pass\n&gt;&gt;&gt; f = KnifeContainer()\nTraceback (most recent call last):\n...\nTypeError: Can't instantiate abstract class KnifeContainer with abstract methods knives\n</pre>\n</blockquote>\n<p>Base types are can be taken here with a decorator \u2018T\u2019 obtained above and they work with modules like this:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; g  = PropertyGraph()\n&gt;&gt;&gt; I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n&gt;&gt;&gt; knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n&gt;&gt;&gt; bytes = T('bytes')\n&gt;&gt;&gt; for term in g.buildin_types:\n...   print(term)\n{\"type\": \"bytes\"}\n</pre>\n<pre>&gt;&gt;&gt; model = O *(R('knife', item_module=\"accessories\", container_module=\"kitchen\") * knife * O + knife * bytes) * O\n&gt;&gt;&gt; model\nO * (C(kitchen.KnifeContainer) * C(accessories.Knife) * O + C(accessories.Knife) * C(bytes)) * O\n</pre>\n<pre>&gt;&gt;&gt; for term in g.get_properties_from(model):\n...   print(term)\n{\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}, \"properties\": [\"bytes\"]}\n{\"naming\": {\"type\": \"kitchen.KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n</pre>\n<pre>&gt;&gt;&gt; for term in g.buildin_types:\n...   print(term)\n{\"type\": \"bytes\"}\n</pre>\n<pre>&gt;&gt;&gt; for module in g.modules:\n...   print(module)\n{\"module\": accessories, \"types\": [\"accessories.Knife\"]}\n{\"module\": kitchen, \"types\": [\"kitchen.KnifeContainer\"]}\n</pre>\n<pre>&gt;&gt;&gt; for module in g.modules:\n...    print(\"-\"*20)\n...    print(module.module_name)\n...    print(\"-\"*20)\n...    print(ProtobufGenerator.get_property_file_content(module))\n--------------------\naccessories\n--------------------\nsyntax = \"proto2\";\npackage accessories;\n--------------------\nkitchen\n--------------------\nsyntax = \"proto2\";\npackage kitchen;\nimport accessories;\nmessage KnifeContainer {\n    repeated bytes knives = 1;\n}\n</pre>\n<pre>&gt;&gt;&gt; g  = PropertyGraph()\n&gt;&gt;&gt; I, O, C, N, R, T = g.I, g.O, g.C, g.N, g.R, g.T\n&gt;&gt;&gt; knife = N(name=\"knife\", plural=\"knives\", module_name=\"accessories\")\n&gt;&gt;&gt; bytes = T('bytes')\n&gt;&gt;&gt; length_type = T('float')\n&gt;&gt;&gt; knife_def = knife * ( C(\"name\") * bytes * O + C(\"length\") * length_type * O)\n&gt;&gt;&gt; knife_container_def = R('knife', item_module=\"accessories\", container_module=\"kitchen\") * knife * O\n&gt;&gt;&gt; model = O *(knife_container_def + knife_def ) * O\n&gt;&gt;&gt; model.evaluate()\n&gt;&gt;&gt; for term in g.properties:\n...   print(term)\n{\"naming\": {\"type\": \"Length\", \"value\": \"length\", \"plural\": \"lengths\", \"docstring\": \"length\"}, \"properties\": [\"float\"]}\n{\"naming\": {\"type\": \"Name\", \"value\": \"name\", \"plural\": \"names\", \"docstring\": \"name\"}, \"properties\": [\"bytes\"]}\n{\"naming\": {\"type\": \"accessories.Knife\", \"value\": \"knife\", \"plural\": \"knives\", \"docstring\": \"knife\"}, \"properties\": [\"Length\", \"Name\"]}\n{\"naming\": {\"type\": \"kitchen.KnifeContainer\", \"value\": \"knife_container\", \"plural\": \"knife_containers\", \"docstring\": \"knife container\"}, \"properties\": [\"accessories.Knife\"]}\n</pre>\n<pre>&gt;&gt;&gt; for module in g.modules:\n...    print(\"-\"*20)\n...    print(module.module_name + \".proto\")\n...    print(\"-\"*20)\n...    print(ProtobufGenerator.get_property_file_content(module))\n--------------------\naccessories.proto\n--------------------\nsyntax = \"proto2\";\npackage accessories;\nmessage Knife {\n    required float length = 1;\n    required bytes name = 2;\n}\n--------------------\nkitchen.proto\n--------------------\nsyntax = \"proto2\";\npackage kitchen;\nimport accessories;\nmessage KnifeContainer {\n    repeated Knife knives = 1;\n}\n</pre>\n</blockquote>\n\n          </div>"}, "last_serial": 5649898, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a854f80114d09168b1d6fcd0a20253c9", "sha256": "39bd886d7d96a896096afdf6914359cecf332e2c0f0eef5910680c5cb0ef93e6"}, "downloads": -1, "filename": "python_domain_equations-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a854f80114d09168b1d6fcd0a20253c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 4457, "upload_time": "2018-03-01T18:43:26", "upload_time_iso_8601": "2018-03-01T18:43:26.512325Z", "url": "https://files.pythonhosted.org/packages/ba/24/a0663572b6ff6e738ea2e4485070f0985aa6ead687ed26a9cb34243ef683/python_domain_equations-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "7c63979828fd6c3f35cc5daecaa70c38", "sha256": "3f904df7a1bff7494a660eb44e48f37ead17cf6bcfe321f24de968873ad82b32"}, "downloads": -1, "filename": "python_domain_equations-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7c63979828fd6c3f35cc5daecaa70c38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 8914, "upload_time": "2019-07-21T07:41:58", "upload_time_iso_8601": "2019-07-21T07:41:58.050814Z", "url": "https://files.pythonhosted.org/packages/53/da/a813ce7aef01c591a2709214e03b3d4ca348ba0da4072035817d3f324130/python_domain_equations-0.0.10-py3-none-any.whl", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "de6daea2be5041e8f2c7c229c0af2674", "sha256": "1876d482666bf90302a8839a5620554af09d2981f844b081dca7170698a40f07"}, "downloads": -1, "filename": "python_domain_equations-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "de6daea2be5041e8f2c7c229c0af2674", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 8952, "upload_time": "2019-07-21T10:08:59", "upload_time_iso_8601": "2019-07-21T10:08:59.510058Z", "url": "https://files.pythonhosted.org/packages/c1/bb/47efe9f9d51e038603f8eb54d537836daa46fea038c29732db377fea5222/python_domain_equations-0.0.11-py3-none-any.whl", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "a0b7002ef6755fd9a0372b14a9e92888", "sha256": "8e3a077067243b56e14aec35697066085f1195983b437923d6e0f4e482ab9f19"}, "downloads": -1, "filename": "python_domain_equations-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "a0b7002ef6755fd9a0372b14a9e92888", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15308, "upload_time": "2019-07-21T23:29:48", "upload_time_iso_8601": "2019-07-21T23:29:48.881699Z", "url": "https://files.pythonhosted.org/packages/9b/07/74a0cecbad488b3051efd18d9a77860ac4e3d61021716662b94dd5a508a8/python_domain_equations-0.0.13-py3-none-any.whl", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "ff80abe9f42fc40b1988c7a849ae3c90", "sha256": "2b7384361f471cfa007d3ef1f17bb4fc854468003139ba093897bac8d20d9402"}, "downloads": -1, "filename": "python_domain_equations-0.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "ff80abe9f42fc40b1988c7a849ae3c90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15319, "upload_time": "2019-07-22T00:10:16", "upload_time_iso_8601": "2019-07-22T00:10:16.869994Z", "url": "https://files.pythonhosted.org/packages/8d/16/216aa0821f30442bce7904cc2decef10c7f69abf0ae842701065dab5b18b/python_domain_equations-0.0.14-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "3f616eb12952a76d84313666b9087123", "sha256": "3fac7ca89cd6c4cc9c50a7f4e7888535d298650318f7c9d9f02cd60b2ec57f8f"}, "downloads": -1, "filename": "python_domain_equations-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3f616eb12952a76d84313666b9087123", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 5790, "upload_time": "2018-03-01T19:39:41", "upload_time_iso_8601": "2018-03-01T19:39:41.720622Z", "url": "https://files.pythonhosted.org/packages/0f/6b/25a8e7a265ed988a17cb065ef8c8743f35af8a67f06755c655a94db6dc89/python_domain_equations-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "29ba170a1ba3886259ffa40ad2965d39", "sha256": "9e846f2c2a880e18e88912478fd8469e8bcf37997261fbac17c3981d079975da"}, "downloads": -1, "filename": "python_domain_equations-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "29ba170a1ba3886259ffa40ad2965d39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 7462, "upload_time": "2018-03-01T21:17:05", "upload_time_iso_8601": "2018-03-01T21:17:05.988431Z", "url": "https://files.pythonhosted.org/packages/49/6a/71034b77e48fd09614a26c1d058a5ae1c0328cae162b31b7b8dd9c053296/python_domain_equations-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6c1493531f285289656e1469c3dd49ce", "sha256": "1670862d51dc21a70df71c2f2eaa06e619b5f82cad37e11a294de843f8faee39"}, "downloads": -1, "filename": "python_domain_equations-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6c1493531f285289656e1469c3dd49ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 7496, "upload_time": "2018-03-01T21:29:27", "upload_time_iso_8601": "2018-03-01T21:29:27.085631Z", "url": "https://files.pythonhosted.org/packages/65/64/23833ade3e528cb421b14bd1abeec6d10e9f8f45dd9aef45508e1622df18/python_domain_equations-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "d4cb1fead4f3f62d76197d59cbb59c94", "sha256": "e12c7517881fbecc7fed18385eee2bfa46958da1ad71ee4eb192ec21c3dacbd3"}, "downloads": -1, "filename": "python_domain_equations-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d4cb1fead4f3f62d76197d59cbb59c94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 8584, "upload_time": "2018-03-18T23:43:19", "upload_time_iso_8601": "2018-03-18T23:43:19.937871Z", "url": "https://files.pythonhosted.org/packages/2e/38/7d7e197064fc3b6c26a47d6c1400dac7ac941f6ca69bc64afbf8ace5be17/python_domain_equations-0.0.7-py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "7dc1101c70a6ad1d5dc8f7297888e60b", "sha256": "6401f63ecc24b86eef893026969251665f2542111aee0820a34d1f53cc2744f4"}, "downloads": -1, "filename": "python_domain_equations-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7dc1101c70a6ad1d5dc8f7297888e60b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 10101, "upload_time": "2018-04-02T15:31:52", "upload_time_iso_8601": "2018-04-02T15:31:52.324428Z", "url": "https://files.pythonhosted.org/packages/ca/c3/9da6731522d7960094a1e727d1aa4441072c45dca97ca97572eb1ab9b29e/python_domain_equations-0.0.8-py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "7c215c9160a6a3bfe3c8f6eb550fc580", "sha256": "5b3578689973d222d7e47d0904992a99cdc15838d26aad1dd05990773814f581"}, "downloads": -1, "filename": "python_domain_equations-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "7c215c9160a6a3bfe3c8f6eb550fc580", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 10875, "upload_time": "2018-04-10T20:09:40", "upload_time_iso_8601": "2018-04-10T20:09:40.189894Z", "url": "https://files.pythonhosted.org/packages/93/c3/2e686934852fcd603e690b812e9f0888a0fb2d4c113930bc6c313220e360/python_domain_equations-0.0.9-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "e0e08143018cc4dee8c81bbdb09d59d3", "sha256": "2fd706e69b9a395b36f599514a6a3adcbcca69eb4ce8cb33e7d221b0e3a7530b"}, "downloads": -1, "filename": "python_domain_equations-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e0e08143018cc4dee8c81bbdb09d59d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15270, "upload_time": "2019-07-25T17:10:19", "upload_time_iso_8601": "2019-07-25T17:10:19.933385Z", "url": "https://files.pythonhosted.org/packages/a7/10/1b97ca9693914af76b14bc186f81db6be05997175674415561e9af7466be/python_domain_equations-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8c24baba80e8d405d7db9997bbd8c4e5", "sha256": "aced1f36a04e8d1f752a6c9c11d3806ce96b975036a9916c192b147520908cf2"}, "downloads": -1, "filename": "python_domain_equations-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c24baba80e8d405d7db9997bbd8c4e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15273, "upload_time": "2019-08-08T12:41:56", "upload_time_iso_8601": "2019-08-08T12:41:56.436023Z", "url": "https://files.pythonhosted.org/packages/e4/d3/fb6270e6d4c36843a81cd86dae242dc90d1e92f7c7d821fe73dde49fe5da/python_domain_equations-0.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c24baba80e8d405d7db9997bbd8c4e5", "sha256": "aced1f36a04e8d1f752a6c9c11d3806ce96b975036a9916c192b147520908cf2"}, "downloads": -1, "filename": "python_domain_equations-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8c24baba80e8d405d7db9997bbd8c4e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15273, "upload_time": "2019-08-08T12:41:56", "upload_time_iso_8601": "2019-08-08T12:41:56.436023Z", "url": "https://files.pythonhosted.org/packages/e4/d3/fb6270e6d4c36843a81cd86dae242dc90d1e92f7c7d821fe73dde49fe5da/python_domain_equations-0.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:17:56 2020"}