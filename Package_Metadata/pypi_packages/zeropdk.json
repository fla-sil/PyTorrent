{"info": {"author": "Thomas Ferreira de Lima <tlima@princeton.edu>", "author_email": "tlima@princeton.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering"], "description": "# ZeroPDK\n\nThis is a pure-python PDK factory that enables klayout scripted layout. It assists in photonic integrated circuit layout, which relies on having specialized curved waveguides and non-square-corner shapes.\n\n## Installation\n\nThis package is heavily based on python's [klayout package](https://github.com/klayout/klayout), still in beta version as of this writing (Jul 2019). \n\nInstallation with pip (virtual environment is highly recommended):\n\n```bash\npip install zeropdk\n```\n\nInstallation from source:\n\n```bash\npython setup.py install\n```\n\n## Features\n\n### KLayout extension\n\nBy importing zeropdk, klayout is patched with a few useful functionalities. For example:\n\n```python\nimport klayout.db as kdb\nimport zeropdk\n\nlayout = kdb.Layout()\nplogo = layout.read_cell(cell_name='princeton_logo', filepath='gdslibrary/princeton_logo_simple.gds')\n\n# plogo is a cell in the current layout. It can be inserted in the top cell.\n```\n\n### Easy technology layers definition\n\nBased on a KLayout's layout properties file (.lyp) containing layer definitions, it is easy to import and use all layers. For example:\n\n```python\n\nfrom zeropdk import Tech\nlyp_path = \"examples/EBeam.lyp\"\nEBeam = Tech.load_from_xml(lyp_path)\nlayerM1 = EBeam.layers[\"M1\"]\nprint(layerM1, type(layerM1))  # M1 (41/0) <class 'klayout.dbcore.LayerInfo'>\n```\n\nThe file above belongs to a project called [SiEPIC EBeam PDK](https://github.com/lukasc-ubc/SiEPIC_EBeam_PDK), used in passive silicon photonic foundries.\n\n### Advanced PCell definition\n\nPCells can be hierarchical, as described in [Sec. IV.C of this article](https://ieeexplore.ieee.org/abstract/document/8718393). One PCell can use another PCell in its definition, and the parent pcell should, in this case, inherit the child's parameters. an example taken from `zeropdk.default_library.io` is:\n\n```python\nclass DCPadArray(DCPad):\n    params = ParamContainer(pad_array_count, pad_array_pitch)\n\n    def draw(self, cell):\n        # ...\n        for i in range(cp.pad_array_count):\n            dcpad = DCPad(name=f\"pad_{i}\", params=cp)\n        return cell, ports\n```\n\nIn this case, `DCPadArray` simply places an array of `DCPad` Pcells, and contains parameters `pad_array_count` and also `pad_array_pitch`, but also the parameters belonging to `DCPad`, such as `layer_metal` and `layer_opening`.\n\nIn the EBeam PDK example, one can edit adapt a standard library of pcells to its own parameter sets. For example, EBeam PDK uses particular layers for its metal deposition and oxide etch steps. So the DCPadArray can be changed via the following:\n\n```python\n\nclass DCPadArray(DCPadArray):\n    params = ParamContainer(\n        PCellParameter(\n            name=\"layer_metal\",\n            type=TypeLayer,\n            description=\"Metal Layer\",\n            default=EBeam.layers[\"M1\"],\n        ),\n        PCellParameter(\n            name=\"layer_opening\",\n            type=TypeLayer,\n            description=\"Open Layer\",\n            default=EBeam.layers[\"13_MLopen\"],\n        ),\n    )\n```\n\nTODO: adapt example provided [here](https://github.com/lightwave-lab/SiEPIC_EBeam_PDK/tree/scripted_layout/Examples/scripted_layout) to zeropdk.\n\n### Photonics-inspired layout functions\n\nSeveral assistive tools for handling photonic shapes. For example, it is desired, sometimes, to draw a waveguide with progressive widths (a taper). \n\n```python\nfrom zeropdk.layout import layout_waveguide\nwav_polygon = layout_waveguide(cell, layer, points_list, width)\n```\n\n## Developer notes\n\nThis project is still under development phase. See the [development notes](devnotes/README.md) for more information.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lightwave-lab/zeropdk", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "zeropdk", "package_url": "https://pypi.org/project/zeropdk/", "platform": "", "project_url": "https://pypi.org/project/zeropdk/", "project_urls": {"Homepage": "https://github.com/lightwave-lab/zeropdk"}, "release_url": "https://pypi.org/project/zeropdk/20.4b0/", "requires_dist": ["numpy", "klayout", "scipy"], "requires_python": ">=3.6", "summary": "PDK factory for klayout", "version": "20.4b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ZeroPDK</h1>\n<p>This is a pure-python PDK factory that enables klayout scripted layout. It assists in photonic integrated circuit layout, which relies on having specialized curved waveguides and non-square-corner shapes.</p>\n<h2>Installation</h2>\n<p>This package is heavily based on python's <a href=\"https://github.com/klayout/klayout\" rel=\"nofollow\">klayout package</a>, still in beta version as of this writing (Jul 2019).</p>\n<p>Installation with pip (virtual environment is highly recommended):</p>\n<pre>pip install zeropdk\n</pre>\n<p>Installation from source:</p>\n<pre>python setup.py install\n</pre>\n<h2>Features</h2>\n<h3>KLayout extension</h3>\n<p>By importing zeropdk, klayout is patched with a few useful functionalities. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">klayout.db</span> <span class=\"k\">as</span> <span class=\"nn\">kdb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zeropdk</span>\n\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">kdb</span><span class=\"o\">.</span><span class=\"n\">Layout</span><span class=\"p\">()</span>\n<span class=\"n\">plogo</span> <span class=\"o\">=</span> <span class=\"n\">layout</span><span class=\"o\">.</span><span class=\"n\">read_cell</span><span class=\"p\">(</span><span class=\"n\">cell_name</span><span class=\"o\">=</span><span class=\"s1\">'princeton_logo'</span><span class=\"p\">,</span> <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"s1\">'gdslibrary/princeton_logo_simple.gds'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># plogo is a cell in the current layout. It can be inserted in the top cell.</span>\n</pre>\n<h3>Easy technology layers definition</h3>\n<p>Based on a KLayout's layout properties file (.lyp) containing layer definitions, it is easy to import and use all layers. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zeropdk</span> <span class=\"kn\">import</span> <span class=\"n\">Tech</span>\n<span class=\"n\">lyp_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"examples/EBeam.lyp\"</span>\n<span class=\"n\">EBeam</span> <span class=\"o\">=</span> <span class=\"n\">Tech</span><span class=\"o\">.</span><span class=\"n\">load_from_xml</span><span class=\"p\">(</span><span class=\"n\">lyp_path</span><span class=\"p\">)</span>\n<span class=\"n\">layerM1</span> <span class=\"o\">=</span> <span class=\"n\">EBeam</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s2\">\"M1\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layerM1</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">layerM1</span><span class=\"p\">))</span>  <span class=\"c1\"># M1 (41/0) &lt;class 'klayout.dbcore.LayerInfo'&gt;</span>\n</pre>\n<p>The file above belongs to a project called <a href=\"https://github.com/lukasc-ubc/SiEPIC_EBeam_PDK\" rel=\"nofollow\">SiEPIC EBeam PDK</a>, used in passive silicon photonic foundries.</p>\n<h3>Advanced PCell definition</h3>\n<p>PCells can be hierarchical, as described in <a href=\"https://ieeexplore.ieee.org/abstract/document/8718393\" rel=\"nofollow\">Sec. IV.C of this article</a>. One PCell can use another PCell in its definition, and the parent pcell should, in this case, inherit the child's parameters. an example taken from <code>zeropdk.default_library.io</code> is:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DCPadArray</span><span class=\"p\">(</span><span class=\"n\">DCPad</span><span class=\"p\">):</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">ParamContainer</span><span class=\"p\">(</span><span class=\"n\">pad_array_count</span><span class=\"p\">,</span> <span class=\"n\">pad_array_pitch</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cell</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">pad_array_count</span><span class=\"p\">):</span>\n            <span class=\"n\">dcpad</span> <span class=\"o\">=</span> <span class=\"n\">DCPad</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"pad_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">cp</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">ports</span>\n</pre>\n<p>In this case, <code>DCPadArray</code> simply places an array of <code>DCPad</code> Pcells, and contains parameters <code>pad_array_count</code> and also <code>pad_array_pitch</code>, but also the parameters belonging to <code>DCPad</code>, such as <code>layer_metal</code> and <code>layer_opening</code>.</p>\n<p>In the EBeam PDK example, one can edit adapt a standard library of pcells to its own parameter sets. For example, EBeam PDK uses particular layers for its metal deposition and oxide etch steps. So the DCPadArray can be changed via the following:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DCPadArray</span><span class=\"p\">(</span><span class=\"n\">DCPadArray</span><span class=\"p\">):</span>\n    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">ParamContainer</span><span class=\"p\">(</span>\n        <span class=\"n\">PCellParameter</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"layer_metal\"</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">TypeLayer</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Metal Layer\"</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">EBeam</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s2\">\"M1\"</span><span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">PCellParameter</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"layer_opening\"</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">TypeLayer</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Open Layer\"</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">EBeam</span><span class=\"o\">.</span><span class=\"n\">layers</span><span class=\"p\">[</span><span class=\"s2\">\"13_MLopen\"</span><span class=\"p\">],</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>TODO: adapt example provided <a href=\"https://github.com/lightwave-lab/SiEPIC_EBeam_PDK/tree/scripted_layout/Examples/scripted_layout\" rel=\"nofollow\">here</a> to zeropdk.</p>\n<h3>Photonics-inspired layout functions</h3>\n<p>Several assistive tools for handling photonic shapes. For example, it is desired, sometimes, to draw a waveguide with progressive widths (a taper).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zeropdk.layout</span> <span class=\"kn\">import</span> <span class=\"n\">layout_waveguide</span>\n<span class=\"n\">wav_polygon</span> <span class=\"o\">=</span> <span class=\"n\">layout_waveguide</span><span class=\"p\">(</span><span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">layer</span><span class=\"p\">,</span> <span class=\"n\">points_list</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">)</span>\n</pre>\n<h2>Developer notes</h2>\n<p>This project is still under development phase. See the <a href=\"devnotes/README.md\" rel=\"nofollow\">development notes</a> for more information.</p>\n\n          </div>"}, "last_serial": 7096490, "releases": {"19.10b0": [{"comment_text": "", "digests": {"md5": "70beccd656da8f2b2f184ad771d4d147", "sha256": "2023916a2f0d47b98abc4a75da3e437e304bd4208087b50294f766de2d1b5400"}, "downloads": -1, "filename": "zeropdk-19.10b0-py3-none-any.whl", "has_sig": false, "md5_digest": "70beccd656da8f2b2f184ad771d4d147", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49145, "upload_time": "2019-10-31T13:18:56", "upload_time_iso_8601": "2019-10-31T13:18:56.292562Z", "url": "https://files.pythonhosted.org/packages/f9/7c/c16e037228d316735491df4383e8115e40573f1676055b53a249d70da5af/zeropdk-19.10b0-py3-none-any.whl", "yanked": false}], "19.10b1": [{"comment_text": "", "digests": {"md5": "191b86799ddd1b867f0d22a7f050b487", "sha256": "d91a282d3cd0da99b75da94314c6bb377be4c6f4e2657c37734b8dce4ea62a27"}, "downloads": -1, "filename": "zeropdk-19.10b1-py3-none-any.whl", "has_sig": false, "md5_digest": "191b86799ddd1b867f0d22a7f050b487", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 49186, "upload_time": "2019-10-31T18:14:51", "upload_time_iso_8601": "2019-10-31T18:14:51.340159Z", "url": "https://files.pythonhosted.org/packages/52/71/25e8ba8916c2e971b8b87c1937f111616e62c4fa49fde986a7fcad5bc119/zeropdk-19.10b1-py3-none-any.whl", "yanked": false}], "19.7b1": [{"comment_text": "", "digests": {"md5": "a1a2b7f055bdfaa5ece682db96b24f57", "sha256": "2dfa839ab0a3beefe9d0cc261546d4b54c3e24e97380723d22d860e3fe5077ba"}, "downloads": -1, "filename": "zeropdk-19.7b1-py3-none-any.whl", "has_sig": false, "md5_digest": "a1a2b7f055bdfaa5ece682db96b24f57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 44163, "upload_time": "2019-07-24T04:41:26", "upload_time_iso_8601": "2019-07-24T04:41:26.124724Z", "url": "https://files.pythonhosted.org/packages/ae/45/29c9f525791c10f84639bde337ad11702bcc1b358d25f6658d9605dd6c57/zeropdk-19.7b1-py3-none-any.whl", "yanked": false}], "20.4b0": [{"comment_text": "", "digests": {"md5": "045d7c8cff4c7a069ffba1aadf1c9a1e", "sha256": "f51690b713245954f4f25a6c41954989bb9238abd665c10ca4374eb7e5418d1e"}, "downloads": -1, "filename": "zeropdk-20.4b0-py3-none-any.whl", "has_sig": false, "md5_digest": "045d7c8cff4c7a069ffba1aadf1c9a1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 89641, "upload_time": "2020-04-24T21:36:46", "upload_time_iso_8601": "2020-04-24T21:36:46.971252Z", "url": "https://files.pythonhosted.org/packages/c9/ec/9fe775e8858f7a0602647a69f4b03d36b0b5b71edd94fff77620a29c7b0a/zeropdk-20.4b0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "045d7c8cff4c7a069ffba1aadf1c9a1e", "sha256": "f51690b713245954f4f25a6c41954989bb9238abd665c10ca4374eb7e5418d1e"}, "downloads": -1, "filename": "zeropdk-20.4b0-py3-none-any.whl", "has_sig": false, "md5_digest": "045d7c8cff4c7a069ffba1aadf1c9a1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 89641, "upload_time": "2020-04-24T21:36:46", "upload_time_iso_8601": "2020-04-24T21:36:46.971252Z", "url": "https://files.pythonhosted.org/packages/c9/ec/9fe775e8858f7a0602647a69f4b03d36b0b5b71edd94fff77620a29c7b0a/zeropdk-20.4b0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:17:35 2020"}