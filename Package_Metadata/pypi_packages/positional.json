{"info": {"author": "Morgan Fainberg", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 7 - Inactive", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5"], "description": "==========\npositional\n==========\n\nA decorator which enforces only some args may be passed positionally. This library is minimally maintained and should only be used in cases of Python 2 to Python 3 conversions. Please write only Python 3 code going forward.\n\n|PyPi|\n\n|Build Status|\n\n|Documentation Status|\n\nThe Basics\n==========\n\n`positional` provides a decorator which enforces only some args may be passed\npositionally. The idea and some of the code was taken from the oauth2 client\nof the google-api client.\n\nThe decorator makes it easy to support Python 3 style key-word only\nparameters. For example, in Python 3 it is possible to write:\n\n.. code:: python\n\n    >>> def fn(pos1, *, kwonly1, kwonly2=None):\n    ...     ...\n\nAll named parameters after `*` must be a keyword:\n\n.. code:: python\n\n    >>> fn(10, 'kw1', 'kw2')  # Raises exception.\n    >>> fn(10, kwonly1='kw1', kwonly2='kw2')  # Ok.\n\nTo replicate this behaviour with the positional decorator you simply specify\nhow many arguments may be passed positionally.\n\nFirst to import the decorator we typically use:\n\n.. code:: python\n\n    >> from positional import positional\n\nReplicating the Example above:\n\n.. code:: python\n\n    >>> @positional(1)\n    ... fn(pos1, kwonly1=None, kwonly2=None):\n    ...     ...\n\nIf no default value is provided to a keyword argument, it becomes a required\nkeyword argument:\n\n.. code:: python\n\n    >>> @positional(0)\n    ... def fn(required_kw):\n    ...     ...\n\nThis must be called with the keyword parameter:\n\n.. code:: python\n\n    >>> fn() # Raises exception\n    >>> fn(10) # Raises Exception\n    >>> fn(required_kw=10) # OK\n\nWhen defining instance or class methods always remember that in python the\nfirst positional argument passed is the instance; you will need to account for\n`self` and `cls`:\n\n.. code:: python\n\n    >>> class MyClass(object):\n    ...\n    ...     @positional(2)\n    ...     def my_method(self, pos1, kwonly1=None):\n    ...         ...\n    ...\n    ...     @classmethod\n    ...     @positional(2)\n    ...     def my_method(cls, pos1, kwonly1=None):\n    ...         ...\n\n\n\nIf you would prefer not to account for `self` and `cls` you can use the\n`method` and `classmethod` helpers which do not consider the initial\npositional argument. So the following class is exactly the same as the one\nabove:\n\n.. code:: python\n\n    >>> class MyClass(object):\n    ...\n    ...     @positional.method(1)\n    ...     def my_method(self, pos1, kwonly1=None):\n    ...         ...\n    ...\n    ...     @positional.classmethod(1)\n    ...     def my_method(cls, pos1, kwonly1=None):\n    ...         ...\n\n\nIf a value isn't provided to the decorator then it will enforce that\nevery variable without a default value will be required to be a kwarg:\n\n.. code:: python\n\n    >>> @positional()\n    ... def fn(pos1, kwonly1=None):\n    ...     ...\n    ...\n    >>> fn(10)  # Ok.\n    >>> fn(10, 20)  # Raises exception.\n    >>> fn(10, kwonly1=20)  # Ok.\n\nThis behaviour will work with the `positional.method` and\n`positional.classmethod` helper functions as well:\n\n.. code:: python\n\n    >>> class MyClass(object):\n    ...\n    ...    @positional.classmethod()\n    ...    def my_method(cls, pos1, kwonly1=None):\n    ...        ...\n    ...\n    >>> MyClass.my_method(10)  # Ok.\n    >>> MyClass.my_method(10, 20)  # Raises exception.\n    >>> MyClass.my_method(10, kwonly1=20)  # Ok.\n\nFor compatibility reasons you may wish to not always raise an exception so\na WARN mode is available. Rather than raise an exception a warning will be\nemitted.\n\n.. code:: python\n\n    >>> @positional(1, enforcement=positional.WARN):\n    ... def fn(pos1, kwonly=1):\n    ...     ...\n\nAvailable modes are:\n\n- positional.EXCEPT - the default, raise an exception.\n- positional.WARN - emit a warning.\n\n\n.. |Build Status| image:: https://travis-ci.org/morganfainberg/positional.svg?branch=master\n   :target: https://travis-ci.org/morganfainberg/positional\n.. |Documentation Status| image:: https://readthedocs.org/projects/positional/badge/?version=latest\n   :target: http://positional.readthedocs.org/en/latest/?badge=latest\n.. |PyPi| image:: https://badge.fury.io/py/positional.png\n   :target: http://badge.fury.io/py/positional\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "positional", "package_url": "https://pypi.org/project/positional/", "platform": "", "project_url": "https://pypi.org/project/positional/", "project_urls": null, "release_url": "https://pypi.org/project/positional/1.2.1/", "requires_dist": null, "requires_python": "", "summary": "Library to enforce positional or key-word arguments (deprecated/unmaintained)", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A decorator which enforces only some args may be passed positionally. This library is minimally maintained and should only be used in cases of Python 2 to Python 3 conversions. Please write only Python 3 code going forward.</p>\n<p><a href=\"http://badge.fury.io/py/positional\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b9a21e1e2b1be016a6c8e8c7f217d4303c27222/68747470733a2f2f62616467652e667572792e696f2f70792f706f736974696f6e616c2e706e67\"></a></p>\n<p><a href=\"https://travis-ci.org/morganfainberg/positional\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa3d6709d53cbc3a2b64a48234914a6d22c71145/68747470733a2f2f7472617669732d63692e6f72672f6d6f7267616e6661696e626572672f706f736974696f6e616c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"http://positional.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfa6df00fea6a6743a10ddaa96c1ea7d557dc049/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706f736974696f6e616c2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<div id=\"the-basics\">\n<h2>The Basics</h2>\n<p><cite>positional</cite> provides a decorator which enforces only some args may be passed\npositionally. The idea and some of the code was taken from the oauth2 client\nof the google-api client.</p>\n<p>The decorator makes it easy to support Python 3 style key-word only\nparameters. For example, in Python 3 it is possible to write:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"p\">,</span> <span class=\"n\">kwonly2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"o\">...</span>\n</pre>\n<p>All named parameters after <cite>*</cite> must be a keyword:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'kw1'</span><span class=\"p\">,</span> <span class=\"s1\">'kw2'</span><span class=\"p\">)</span>  <span class=\"c1\"># Raises exception.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"s1\">'kw1'</span><span class=\"p\">,</span> <span class=\"n\">kwonly2</span><span class=\"o\">=</span><span class=\"s1\">'kw2'</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok.</span>\n</pre>\n<p>To replicate this behaviour with the positional decorator you simply specify\nhow many arguments may be passed positionally.</p>\n<p>First to import the decorator we typically use:</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">positional</span> <span class=\"kn\">import</span> <span class=\"n\">positional</span>\n</pre>\n<p>Replicating the Example above:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@positional</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">kwonly2</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"o\">...</span>\n</pre>\n<p>If no default value is provided to a keyword argument, it becomes a required\nkeyword argument:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@positional</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">required_kw</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"o\">...</span>\n</pre>\n<p>This must be called with the keyword parameter:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">()</span> <span class=\"c1\"># Raises exception</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># Raises Exception</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"n\">required_kw</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># OK</span>\n</pre>\n<p>When defining instance or class methods always remember that in python the\nfirst positional argument passed is the instance; you will need to account for\n<cite>self</cite> and <cite>cls</cite>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@positional</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@classmethod</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@positional</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n</pre>\n<p>If you would prefer not to account for <cite>self</cite> and <cite>cls</cite> you can use the\n<cite>method</cite> and <cite>classmethod</cite> helpers which do not consider the initial\npositional argument. So the following class is exactly the same as the one\nabove:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@positional</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@positional</span><span class=\"o\">.</span><span class=\"n\">classmethod</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"o\">...</span>\n</pre>\n<p>If a value isn\u2019t provided to the decorator then it will enforce that\nevery variable without a default value will be required to be a kwarg:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@positional</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>  <span class=\"c1\"># Raises exception.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok.</span>\n</pre>\n<p>This behaviour will work with the <cite>positional.method</cite> and\n<cite>positional.classmethod</cite> helper functions as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>    <span class=\"nd\">@positional</span><span class=\"o\">.</span><span class=\"n\">classmethod</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>    <span class=\"k\">def</span> <span class=\"nf\">my_method</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>        <span class=\"o\">...</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyClass</span><span class=\"o\">.</span><span class=\"n\">my_method</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyClass</span><span class=\"o\">.</span><span class=\"n\">my_method</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>  <span class=\"c1\"># Raises exception.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyClass</span><span class=\"o\">.</span><span class=\"n\">my_method</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">kwonly1</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>  <span class=\"c1\"># Ok.</span>\n</pre>\n<p>For compatibility reasons you may wish to not always raise an exception so\na WARN mode is available. Rather than raise an exception a warning will be\nemitted.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@positional</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">enforcement</span><span class=\"o\">=</span><span class=\"n\">positional</span><span class=\"o\">.</span><span class=\"n\">WARN</span><span class=\"p\">):</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">fn</span><span class=\"p\">(</span><span class=\"n\">pos1</span><span class=\"p\">,</span> <span class=\"n\">kwonly</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"o\">...</span>\n</pre>\n<p>Available modes are:</p>\n<ul>\n<li>positional.EXCEPT - the default, raise an exception.</li>\n<li>positional.WARN - emit a warning.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3079800, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3d65d446323aeef3a818451192a83278", "sha256": "ab4db9940bf7b20225fdcb49628b12013147237ba291715503195b523e773253"}, "downloads": -1, "filename": "positional-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3d65d446323aeef3a818451192a83278", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16372, "upload_time": "2016-01-14T01:47:11", "upload_time_iso_8601": "2016-01-14T01:47:11.101722Z", "url": "https://files.pythonhosted.org/packages/20/be/b3d04231d83a850773eb7d18c15cde8cb53331a59db96e31129d2a3ddfc2/positional-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b8d7991e0d9b697ec23aaee34d6abb31", "sha256": "54a73f3593c6e30e9cdd0a727503b7c5dddbb75fb78bb681614b08dfde2bc444"}, "downloads": -1, "filename": "positional-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b8d7991e0d9b697ec23aaee34d6abb31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16398, "upload_time": "2016-01-17T20:51:04", "upload_time_iso_8601": "2016-01-17T20:51:04.871291Z", "url": "https://files.pythonhosted.org/packages/c6/8a/b0937216915330d7007dd69fb816c042904684d1e1165612b76070f4c2a2/positional-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "98920e4a857edf9e75714f1c351436fe", "sha256": "e2d1e3a6a2abbc1820c5dfa72f0c8fc4b56eebbb6ccd7ee25b626c34b902c144"}, "downloads": -1, "filename": "positional-1.1.0.tar.gz", "has_sig": false, "md5_digest": "98920e4a857edf9e75714f1c351436fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15932, "upload_time": "2016-04-19T19:13:48", "upload_time_iso_8601": "2016-04-19T19:13:48.198704Z", "url": "https://files.pythonhosted.org/packages/bf/a8/bc656a556a60b76c32830b57279f51714ab7c6366fd243d6ea86b6fcad46/positional-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "c82903c32c1aec1ac0f0f6e166ef4e2e", "sha256": "ef845fa46ee5a11564750aaa09dd7db059aaf39c44c901b37181e5ffa67034b0"}, "downloads": -1, "filename": "positional-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c82903c32c1aec1ac0f0f6e166ef4e2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15987, "upload_time": "2016-06-26T21:08:39", "upload_time_iso_8601": "2016-06-26T21:08:39.995203Z", "url": "https://files.pythonhosted.org/packages/83/73/1e2c630d868b73ecdea381ad7b081bc53888c07f1f9829699d277a2859a8/positional-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "cf34a3544538570681e3d40b7a53d4d6", "sha256": "14e5b502bad1bbccade474602ac773bd9d88aaf3b016985747ea992567f9597b"}, "downloads": -1, "filename": "positional-1.1.2.tar.gz", "has_sig": false, "md5_digest": "cf34a3544538570681e3d40b7a53d4d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16434, "upload_time": "2017-07-27T01:37:17", "upload_time_iso_8601": "2017-07-27T01:37:17.133456Z", "url": "https://files.pythonhosted.org/packages/8c/16/64a4fa0967c486380468dca18867d22ac1c17bba06349e31ace77c7757f7/positional-1.1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "4afcffd8e2ba733fd7a50f137a2ee893", "sha256": "cf48ea169f6c39486d5efa0ce7126a97bed979a52af6261cf255a41f9a74453a"}, "downloads": -1, "filename": "positional-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4afcffd8e2ba733fd7a50f137a2ee893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16530, "upload_time": "2017-08-08T00:24:46", "upload_time_iso_8601": "2017-08-08T00:24:46.044452Z", "url": "https://files.pythonhosted.org/packages/24/7e/3b1450db76eb48a54ea661a43ae00950275e11840042c5217bd3b47b478e/positional-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4afcffd8e2ba733fd7a50f137a2ee893", "sha256": "cf48ea169f6c39486d5efa0ce7126a97bed979a52af6261cf255a41f9a74453a"}, "downloads": -1, "filename": "positional-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4afcffd8e2ba733fd7a50f137a2ee893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16530, "upload_time": "2017-08-08T00:24:46", "upload_time_iso_8601": "2017-08-08T00:24:46.044452Z", "url": "https://files.pythonhosted.org/packages/24/7e/3b1450db76eb48a54ea661a43ae00950275e11840042c5217bd3b47b478e/positional-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:24 2020"}