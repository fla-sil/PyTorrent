{"info": {"author": "Roger Ineichen, Projekt01 GmbH", "author_email": "dev@projekt01.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides a copy of the new zope.testbrowser version > 5.0.0 and is\nused for experiment with jsonrpc support.\n\n\n=======\nCHANGES\n=======\n\n2.0.1 (2016-08-16)\n------------------\n\n- bugfix: fix asPlainText method. Make sure that we decode basestring to utf-8\n  before using html2text method.\n\n\n2.0.0 (2016-06-30)\n------------------\n\n- completly changed the concept how the html dom, forms and control get handled.\n  The new implementation will setup all forms and controls on any dom changes.\n  Any control value changes will get dumped to the html dom and forms and\n  controls will get re-created. This means the new implementation will allways\n  represent the same state in the dom and any controls. This is not the case\n  in most test browser implementations. The main reason for this changes are\n  json-rpc requests which probably partial update parts of the dom. This was\n  in some uscases a problem and was ending in loosing pre-filled control values\n  which didn't get replaced by the reponse (parital inplace dom replacement).\n\n- Keep in mind, that if you get a control with the method getControl and you\n  change a value e.g. with getControl('myinput').value = 'something', that the\n  dom get changed and you need to get the control again. So don't keep the\n  control reference in our test like:\n\n    ctr = getControl('myinput')\n    ctr.value = 'foo'\n    ctr.value\n\n  Then the ctr reference is outdated since we re-setup the form and controls on\n  any dom changes. But anyway, it's not that important since both the old\n  control reference (ctr in the sampel above) and the new parsed control which\n  you will get with getControl('myinput') will show the same correct value.\n\n- feature: dump all control changes back to dom. This keeps the dom and control\n  representation in sync.\n\n- feature: setup all forms and controls on any dom changes. This makes sure that\n  if a form get submitted we allways use the latest control values based on the\n  dom. Also see the comment about control referencing and dom update above.\n\n\n1.0.1 (2015-08-16)\n------------------\n\n- bugfix: fix control lookup error in WebTestNonFormControls\n\n- bugfix: use browser.node2String for convert to string in form2String,\n  widget2String, button2String and link2String\n\n- switch to bootstrap 2\n\n\n1.0.0 (2015-03-17)\n------------------\n\n- feature: implement j01.jsonrpc and j01.dialog button and link controls.\n  The current implementation supports the j01.jsonrpc and j01.dialog buttons\n  and and links aout of the box. Even the j01 dialog popup is supported.\n  This makes jsonrpc based request/repsone testing very simple. There is\n  no difference in testing a simple or jsonrpc form anymore.\n\n- feature: support a html5 like browser history implementation using\n  pushState and onpopstate like history state management\n\n- feature: support j01.history.js concept given from j01.jsonrpc. Added\n  implicit support for this html5 browser history concept based on given\n  jsonrpc response. Also support the standard history. You can access\n  the history with the method getHistory()\n\n- feature: add activities. You can dump the activities with the method\n  getActivities and you will see a nice log like history.\n\n- feature: support more request methods like PUT, DELETE, OPTIONS etc\n\n- feature: added JSONRPCProxy and getJSONRPCTestProxy supporting wsgi\n  application setup\n\n- feature: implement better support for ajax injection. Keep original html as\n  reference for content injection as browser._dom property and offer a method\n  for replace partial content. Also support response.body content as body\n  attribute and json method for access application/json response.\n\n\n0.5.0 (2015-01-20)\n------------------\n\n- initial release. Note, this is just a copy of zope.testbrowser version 5.0.0\n  for experiment with jsonrpc support for our j01.* packages.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/p01.testbrowser", "keywords": "ope z3c testing test browser Zope3", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "p01.testbrowser", "package_url": "https://pypi.org/project/p01.testbrowser/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/p01.testbrowser/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/p01.testbrowser"}, "release_url": "https://pypi.org/project/p01.testbrowser/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "Zope test brwoser based on webtest and wsgi app", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides a copy of the new zope.testbrowser version &gt; 5.0.0 and is\nused for experiment with jsonrpc support.</p>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>2.0.1 (2016-08-16)</h3>\n<ul>\n<li>bugfix: fix asPlainText method. Make sure that we decode basestring to utf-8\nbefore using html2text method.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0.0 (2016-06-30)</h3>\n<ul>\n<li><p>completly changed the concept how the html dom, forms and control get handled.\nThe new implementation will setup all forms and controls on any dom changes.\nAny control value changes will get dumped to the html dom and forms and\ncontrols will get re-created. This means the new implementation will allways\nrepresent the same state in the dom and any controls. This is not the case\nin most test browser implementations. The main reason for this changes are\njson-rpc requests which probably partial update parts of the dom. This was\nin some uscases a problem and was ending in loosing pre-filled control values\nwhich didn\u2019t get replaced by the reponse (parital inplace dom replacement).</p>\n</li>\n<li><p>Keep in mind, that if you get a control with the method getControl and you\nchange a value e.g. with getControl(\u2018myinput\u2019).value = \u2018something\u2019, that the\ndom get changed and you need to get the control again. So don\u2019t keep the\ncontrol reference in our test like:</p>\n<blockquote>\n<p>ctr = getControl(\u2018myinput\u2019)\nctr.value = \u2018foo\u2019\nctr.value</p>\n</blockquote>\n<p>Then the ctr reference is outdated since we re-setup the form and controls on\nany dom changes. But anyway, it\u2019s not that important since both the old\ncontrol reference (ctr in the sampel above) and the new parsed control which\nyou will get with getControl(\u2018myinput\u2019) will show the same correct value.</p>\n</li>\n<li><p>feature: dump all control changes back to dom. This keeps the dom and control\nrepresentation in sync.</p>\n</li>\n<li><p>feature: setup all forms and controls on any dom changes. This makes sure that\nif a form get submitted we allways use the latest control values based on the\ndom. Also see the comment about control referencing and dom update above.</p>\n</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.1 (2015-08-16)</h3>\n<ul>\n<li>bugfix: fix control lookup error in WebTestNonFormControls</li>\n<li>bugfix: use browser.node2String for convert to string in form2String,\nwidget2String, button2String and link2String</li>\n<li>switch to bootstrap 2</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0.0 (2015-03-17)</h3>\n<ul>\n<li>feature: implement j01.jsonrpc and j01.dialog button and link controls.\nThe current implementation supports the j01.jsonrpc and j01.dialog buttons\nand and links aout of the box. Even the j01 dialog popup is supported.\nThis makes jsonrpc based request/repsone testing very simple. There is\nno difference in testing a simple or jsonrpc form anymore.</li>\n<li>feature: support a html5 like browser history implementation using\npushState and onpopstate like history state management</li>\n<li>feature: support j01.history.js concept given from j01.jsonrpc. Added\nimplicit support for this html5 browser history concept based on given\njsonrpc response. Also support the standard history. You can access\nthe history with the method getHistory()</li>\n<li>feature: add activities. You can dump the activities with the method\ngetActivities and you will see a nice log like history.</li>\n<li>feature: support more request methods like PUT, DELETE, OPTIONS etc</li>\n<li>feature: added JSONRPCProxy and getJSONRPCTestProxy supporting wsgi\napplication setup</li>\n<li>feature: implement better support for ajax injection. Keep original html as\nreference for content injection as browser._dom property and offer a method\nfor replace partial content. Also support response.body content as body\nattribute and json method for access application/json response.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.5.0 (2015-01-20)</h3>\n<ul>\n<li>initial release. Note, this is just a copy of zope.testbrowser version 5.0.0\nfor experiment with jsonrpc support for our j01.* packages.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2284339, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "7dfd24a4243a932f99b4480961e53a8a", "sha256": "9b82b9741e33353d7370bc0769cdba4f0a03807975f4c22ec6b13f97a0063319"}, "downloads": -1, "filename": "p01.testbrowser-0.5.0.zip", "has_sig": false, "md5_digest": "7dfd24a4243a932f99b4480961e53a8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85878, "upload_time": "2015-01-20T10:06:29", "upload_time_iso_8601": "2015-01-20T10:06:29.125800Z", "url": "https://files.pythonhosted.org/packages/b2/4a/2b951aef666daa32d3c58cb97670409a86cadf935e72ab7985b2fa4104b4/p01.testbrowser-0.5.0.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "0d350fb24f9c3170556b415aebfda686", "sha256": "5ffe1d831479b2f7d84cd86edb645f129a462431a5dc120153189cf1cb05e8fd"}, "downloads": -1, "filename": "p01.testbrowser-1.0.0.zip", "has_sig": false, "md5_digest": "0d350fb24f9c3170556b415aebfda686", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109159, "upload_time": "2015-03-17T02:34:00", "upload_time_iso_8601": "2015-03-17T02:34:00.705077Z", "url": "https://files.pythonhosted.org/packages/2b/51/4f90c6505ef7d97113db1a5216fad631b8fa020f0bc892834db262e8a256/p01.testbrowser-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3f6f7fc91f355b9bff02098381390b87", "sha256": "422a8347b068d1a5d3b9286c8bf825adfe7a706e7df8f363ee473fb2a492fcd2"}, "downloads": -1, "filename": "p01.testbrowser-1.0.1.zip", "has_sig": false, "md5_digest": "3f6f7fc91f355b9bff02098381390b87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108194, "upload_time": "2015-08-16T14:28:45", "upload_time_iso_8601": "2015-08-16T14:28:45.026208Z", "url": "https://files.pythonhosted.org/packages/0f/8f/9b6cd4a48eba42345df1c688771ce5e57e18e1a828186521a99c161fe24b/p01.testbrowser-1.0.1.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "6c116c3b083bd95db64f876f40fc4df9", "sha256": "115fc993d8adaf934fba2ad0afe223b38d8c44aa4538eb8e437fb41fa96dbc27"}, "downloads": -1, "filename": "p01.testbrowser-2.0.0.zip", "has_sig": false, "md5_digest": "6c116c3b083bd95db64f876f40fc4df9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123028, "upload_time": "2016-06-29T22:42:51", "upload_time_iso_8601": "2016-06-29T22:42:51.179068Z", "url": "https://files.pythonhosted.org/packages/e6/73/ca5107713fc4ba9e6b49a382e8431796c5a7b1285f3703347458eafd7d61/p01.testbrowser-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "9aa3a82ad6209f02d4c9b65a57b840b8", "sha256": "93bbe7a9417e76f75cf74324b7ac1c5a5cb6f040ec7f30c969128195558a3f7c"}, "downloads": -1, "filename": "p01.testbrowser-2.0.1.zip", "has_sig": false, "md5_digest": "9aa3a82ad6209f02d4c9b65a57b840b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123225, "upload_time": "2016-08-16T13:40:07", "upload_time_iso_8601": "2016-08-16T13:40:07.289298Z", "url": "https://files.pythonhosted.org/packages/f3/cc/50339d3ebfab29d792094414cf526e33916b6f5ba6dfbe37a3258f38d790/p01.testbrowser-2.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9aa3a82ad6209f02d4c9b65a57b840b8", "sha256": "93bbe7a9417e76f75cf74324b7ac1c5a5cb6f040ec7f30c969128195558a3f7c"}, "downloads": -1, "filename": "p01.testbrowser-2.0.1.zip", "has_sig": false, "md5_digest": "9aa3a82ad6209f02d4c9b65a57b840b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123225, "upload_time": "2016-08-16T13:40:07", "upload_time_iso_8601": "2016-08-16T13:40:07.289298Z", "url": "https://files.pythonhosted.org/packages/f3/cc/50339d3ebfab29d792094414cf526e33916b6f5ba6dfbe37a3258f38d790/p01.testbrowser-2.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:23 2020"}