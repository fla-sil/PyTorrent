{"info": {"author": "InnoGames System Administration", "author_email": "it@innogames.com", "bugtrack_url": null, "classifiers": [], "description": "Git Pre-Receive Hook to Validate Commits\n========================================\n\nIt is exhausting to edit files again and again to have a consistent style.\nThis project provides a Git pre-receive hook to validate pushed commits on\nthe Git server side.  The hook avoids all issues by rejecting any commit\nnot matching the rules to get in to the repository in the first place.\n\nThe pre-receive hook runs some checks on commits on its own, and searches\nfor programming language specific syntax checkers on the PATH of the server\nto check changed files with them.  The process is pretty fast, because only\nthe added and modified files on the pushed commits are passed to the syntax\ncheckers, also in parallel.  It wouldn't slow you down unless your commits\nare touching hundreds of files.\n\n\nInstallation\n------------\n\nIt is possible to install the tool with `pip`::\n\n    pip install igcommit\n\nLink the `script <igcommit-receive>`_ to ``hooks/pre-receive`` on you Git\nrepositories on your Git server::\n\n    ln -s igcommit-receive /home/git/repositories/myproject.git/hooks/pre-receive\n\n\nFeatures\n--------\n\n* Validate received commits one by one not just the last one\n* Only validate added or modified files on the commits\n* Report all problems before failing\n* Check for duplicate commit summaries\n* Check for misleading merge commits\n* Validate committer and author timestamps\n* Validate committer and author names and email addresses\n* Check commit message best practices (80 lines, first line summary...)\n* Check commit summary formatting\n* Validate commit tags against a list ``[BUGFIX]``, ``[FEATURE]``, ``[WIP]``...\n* Check for changed file paths\n* Accept commits tagged as ``[HOTFIX]``, ``[MESS]``, ``[TEMP]``, or ``[WIP]``\n  with issues\n* Check executable bits and shebangs\n* Check symlinks\n* Check CSS files with ``csslint``\n* Check Go files with ``golint``\n* Check HTML files with ``htmlhint``\n* Check Puppet files with ``puppet parser validate`` and ``puppet-lint``\n* Check Python files with ``flake8`` or ``pycodestyle`` and ``pyflakes``\n* Check Ruby files with ``rubocop``\n* Check shell scripts with ``shellcheck``\n* Check JavaScript files with ``eslint``, ``jshint``, ``jscs``, or ``standard``\n* Check CoffeeScript files with ``coffeelint``\n* Check PHP files with ``phpcs``\n* Run the external check commands in parallel\n* Validate JSON, XML, YAML file formats\n\nHere is an example problem output::\n\n    === CheckDuplicateCommitSummaries on CommitList ===\n    ERROR: summary \"Add nagios check for early expiration of licenses\" duplicated 2 times\n\n    === CheckCommitSummary on 31d0f6b ===\n    WARNING: summary longer than 72 characters\n\n    === CheckCommitSummary on 6bded65 ===\n    WARNING: past tense used on summary\n\n    === CheckCommand \"flake8\" on src/check_multiple.py at 6bded65 ===\n    INFO: line 10 col 5: E225 missing whitespace around operator\n    INFO: line 17 col 80: E501 line too long (122 > 79 characters)\n    INFO: line 17 col 85: E203 whitespace before ','\n\n    === CheckCommitMessage on 6fdbc00 ===\n    WARNING: line 7 is longer than 80\n    WARNING: line 9 is longer than 80\n\n\nConfiguration\n-------------\n\nThe script itself is currently configuration free.  Though, some of the syntax\ncheckers called by the script uses or requires configurations.  Those\nconfiguration files has to be on the top level of the Git repository.\n\n==============  ==========================================  ========\nSyntax Checker   Configuration File\n==============  ==========================================  ========\ncsslint         .csslintrc                                  optional\nhtmlhint        .htmlhintrc                                 optional\npuppet-lint     .puppet-lint.rc                             optional\nflake8          .flake8, setup.cfg, or tox.ini              optional\npycodestyle     setup.cfg, or tox.ini                       optional\neslint          eslint.(js|yaml|yml|json), or package.json  required\njshint          .jshintrc, or package.json                  optional\njscs            .jscsrc, .jscs.json, or package.json        required\ncoffeelint      coffeelint.json, or package.json            optional\nphpcs           phpcs.xml, or phpcs.xml.dist                optional\n==============  ==========================================  ========\n\n\nPros and Cons of Pre-receive Hook\n---------------------------------\n\nContinuous Integration Server\n    A continuous integration server can run such checks with the many other\n    things it is doing.  Moving this job from it has many benefits:\n\n    * Synchronous feedback\n    * More efficient\n    * Disallow any commit violating the rules\n\nPre-commit Hook\n    Even though, pre-receive hook gives later feedback than pre-commit hook,\n    it has many advantages over it:\n\n    * No client side configuration\n    * Plugins has to be installed only once to the Git server\n    * Everybody gets the same checks\n    * Enforcement, nobody can skip the checks\n    * Commit checking (pre-commit hook only gets what is changed in the commit)\n\nIDE Integration\n    The same advantages compared to pre-commit hooks applies to IDE\n    integration.  Though, IDE integration gives much sooner and nicer feedback,\n    so it is still a good idea, even with the pre-receive hook.\n\n\nDependencies\n------------\n\nThe script has no dependencies on Python 3.4 or above.  It runs on Python 2\nas well with the backport of enum library \"enum34\".  The script executes\nthe validation commands using the shell.  The necessary ones for checked\nrepositories need to be installed separately.  See the complete list of\ncommands on the `config.py <igcommit/config.py>`_.  The commands which are not\navailable on the ``PATH`` is not going to be used.\n\n\nTesting\n-------\n\nI found it useful to check what the script would have complained if it had\nbeen active on different Git repositories.  You can run a command like this\nto test this inside a Git repository against last 50 commits::\n\n    git log --reverse --oneline HEAD~50..HEAD |\n        sed 's:\\([^ ]*\\) .*:\\1 \\1 refs/heads/master:' |\n        python ../igcommit/igcommit-receive\n\n\nChanges\n-------\n\nVersion 2.0\n    * Fix line numbers on syntax errors for executables being 1 off\n    * Recognize and validate symlinks\n    * Validate committer and author timestamps\n    * Validate contributor names and email addresses\n    * Reduce commit message line length limits\n    * Complain about file extensions on executables\n\nVersion 2.1\n    * Add [TEMP] to recognized commit tags\n    * Fix getting the changes of the initial commit (Zheng Wei <www.zvv.cn@gmail.com>)\n    * Fix various file descriptor leaks\n    * Check commit summaries more strictly\n    * Check shebangs of non-executable files too\n    * Don't check on empty file contents\n    * Improve unicode support on Python 2\n    * Fix checking symlink targets\n\nVersion 2.2\n    * Fix ``eslint`` configuration (Jerevia <zhaoliming@ichaomeng.com>)\n    * Accepts commits with ``[TEMP]`` with issues\n    * Stop skipping empty files\n    * Make sure not to get unknown file contents\n    * Move file extensions to config\n    * Increase timestamp comparison tolerance for 1 more minute\n    * Handle spaces on shebangs\n\nVersion 2.3\n    * Handle check command failing immediately\n    * Support pushed tags\n    * Fix failing on file check with bogus return code\n    * Include list of commit tags on warning\n    * Fix recognising commit tags ``[REVIEW]`` and ``[SECURITY]``\n\nVersion 2.4\n    * Fix recognising removed configuration files\n    * Support `coffeelint`\n\nVersion 2.5\n    * Fix unicode issue on Python 2 for XML, YAML, and JSON (jcoetsie)\n\n\nLicense\n-------\n\nThe script is released under the MIT License.  The MIT License is registered\nwith and approved by the Open Source Initiative [1]_.\n\n.. [1] https://opensource.org/licenses/MIT\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/innogames/igcommit", "keywords": "syntax-checker git git-hook python csslint golint htmlhint puppet puppet-lint flake8 pycodestyle pyflakes rubocop shellcheck eslint jshint jscs standard coffeelint phpcs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "igcommit", "package_url": "https://pypi.org/project/igcommit/", "platform": "POSIX", "project_url": "https://pypi.org/project/igcommit/", "project_urls": {"Homepage": "https://github.com/innogames/igcommit"}, "release_url": "https://pypi.org/project/igcommit/2.5/", "requires_dist": null, "requires_python": "", "summary": "Git pre-receive hook to check commits and code style", "version": "2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>It is exhausting to edit files again and again to have a consistent style.\nThis project provides a Git pre-receive hook to validate pushed commits on\nthe Git server side.  The hook avoids all issues by rejecting any commit\nnot matching the rules to get in to the repository in the first place.</p>\n<p>The pre-receive hook runs some checks on commits on its own, and searches\nfor programming language specific syntax checkers on the PATH of the server\nto check changed files with them.  The process is pretty fast, because only\nthe added and modified files on the pushed commits are passed to the syntax\ncheckers, also in parallel.  It wouldn\u2019t slow you down unless your commits\nare touching hundreds of files.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>It is possible to install the tool with <cite>pip</cite>:</p>\n<pre>pip install igcommit\n</pre>\n<p>Link the <a href=\"igcommit-receive\" rel=\"nofollow\">script</a> to <tt><span class=\"pre\">hooks/pre-receive</span></tt> on you Git\nrepositories on your Git server:</p>\n<pre>ln -s igcommit-receive /home/git/repositories/myproject.git/hooks/pre-receive\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Validate received commits one by one not just the last one</li>\n<li>Only validate added or modified files on the commits</li>\n<li>Report all problems before failing</li>\n<li>Check for duplicate commit summaries</li>\n<li>Check for misleading merge commits</li>\n<li>Validate committer and author timestamps</li>\n<li>Validate committer and author names and email addresses</li>\n<li>Check commit message best practices (80 lines, first line summary\u2026)</li>\n<li>Check commit summary formatting</li>\n<li>Validate commit tags against a list <tt>[BUGFIX]</tt>, <tt>[FEATURE]</tt>, <tt>[WIP]</tt>\u2026</li>\n<li>Check for changed file paths</li>\n<li>Accept commits tagged as <tt>[HOTFIX]</tt>, <tt>[MESS]</tt>, <tt>[TEMP]</tt>, or <tt>[WIP]</tt>\nwith issues</li>\n<li>Check executable bits and shebangs</li>\n<li>Check symlinks</li>\n<li>Check CSS files with <tt>csslint</tt></li>\n<li>Check Go files with <tt>golint</tt></li>\n<li>Check HTML files with <tt>htmlhint</tt></li>\n<li>Check Puppet files with <tt>puppet parser validate</tt> and <tt><span class=\"pre\">puppet-lint</span></tt></li>\n<li>Check Python files with <tt>flake8</tt> or <tt>pycodestyle</tt> and <tt>pyflakes</tt></li>\n<li>Check Ruby files with <tt>rubocop</tt></li>\n<li>Check shell scripts with <tt>shellcheck</tt></li>\n<li>Check JavaScript files with <tt>eslint</tt>, <tt>jshint</tt>, <tt>jscs</tt>, or <tt>standard</tt></li>\n<li>Check CoffeeScript files with <tt>coffeelint</tt></li>\n<li>Check PHP files with <tt>phpcs</tt></li>\n<li>Run the external check commands in parallel</li>\n<li>Validate JSON, XML, YAML file formats</li>\n</ul>\n<p>Here is an example problem output:</p>\n<pre>=== CheckDuplicateCommitSummaries on CommitList ===\nERROR: summary \"Add nagios check for early expiration of licenses\" duplicated 2 times\n\n=== CheckCommitSummary on 31d0f6b ===\nWARNING: summary longer than 72 characters\n\n=== CheckCommitSummary on 6bded65 ===\nWARNING: past tense used on summary\n\n=== CheckCommand \"flake8\" on src/check_multiple.py at 6bded65 ===\nINFO: line 10 col 5: E225 missing whitespace around operator\nINFO: line 17 col 80: E501 line too long (122 &gt; 79 characters)\nINFO: line 17 col 85: E203 whitespace before ','\n\n=== CheckCommitMessage on 6fdbc00 ===\nWARNING: line 7 is longer than 80\nWARNING: line 9 is longer than 80\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>The script itself is currently configuration free.  Though, some of the syntax\ncheckers called by the script uses or requires configurations.  Those\nconfiguration files has to be on the top level of the Git repository.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Syntax Checker</th>\n<th>Configuration File</th>\n<th>\u00a0</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>csslint</td>\n<td>.csslintrc</td>\n<td>optional</td>\n</tr>\n<tr><td>htmlhint</td>\n<td>.htmlhintrc</td>\n<td>optional</td>\n</tr>\n<tr><td>puppet-lint</td>\n<td>.puppet-lint.rc</td>\n<td>optional</td>\n</tr>\n<tr><td>flake8</td>\n<td>.flake8, setup.cfg, or tox.ini</td>\n<td>optional</td>\n</tr>\n<tr><td>pycodestyle</td>\n<td>setup.cfg, or tox.ini</td>\n<td>optional</td>\n</tr>\n<tr><td>eslint</td>\n<td>eslint.(js|yaml|yml|json), or package.json</td>\n<td>required</td>\n</tr>\n<tr><td>jshint</td>\n<td>.jshintrc, or package.json</td>\n<td>optional</td>\n</tr>\n<tr><td>jscs</td>\n<td>.jscsrc, .jscs.json, or package.json</td>\n<td>required</td>\n</tr>\n<tr><td>coffeelint</td>\n<td>coffeelint.json, or package.json</td>\n<td>optional</td>\n</tr>\n<tr><td>phpcs</td>\n<td>phpcs.xml, or phpcs.xml.dist</td>\n<td>optional</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"pros-and-cons-of-pre-receive-hook\">\n<h2>Pros and Cons of Pre-receive Hook</h2>\n<dl>\n<dt>Continuous Integration Server</dt>\n<dd><p>A continuous integration server can run such checks with the many other\nthings it is doing.  Moving this job from it has many benefits:</p>\n<ul>\n<li>Synchronous feedback</li>\n<li>More efficient</li>\n<li>Disallow any commit violating the rules</li>\n</ul>\n</dd>\n<dt>Pre-commit Hook</dt>\n<dd><p>Even though, pre-receive hook gives later feedback than pre-commit hook,\nit has many advantages over it:</p>\n<ul>\n<li>No client side configuration</li>\n<li>Plugins has to be installed only once to the Git server</li>\n<li>Everybody gets the same checks</li>\n<li>Enforcement, nobody can skip the checks</li>\n<li>Commit checking (pre-commit hook only gets what is changed in the commit)</li>\n</ul>\n</dd>\n<dt>IDE Integration</dt>\n<dd>The same advantages compared to pre-commit hooks applies to IDE\nintegration.  Though, IDE integration gives much sooner and nicer feedback,\nso it is still a good idea, even with the pre-receive hook.</dd>\n</dl>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>The script has no dependencies on Python 3.4 or above.  It runs on Python 2\nas well with the backport of enum library \u201cenum34\u201d.  The script executes\nthe validation commands using the shell.  The necessary ones for checked\nrepositories need to be installed separately.  See the complete list of\ncommands on the <a href=\"igcommit/config.py\" rel=\"nofollow\">config.py</a>.  The commands which are not\navailable on the <tt>PATH</tt> is not going to be used.</p>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>I found it useful to check what the script would have complained if it had\nbeen active on different Git repositories.  You can run a command like this\nto test this inside a Git repository against last 50 commits:</p>\n<pre>git log --reverse --oneline HEAD~50..HEAD |\n    sed 's:\\([^ ]*\\) .*:\\1 \\1 refs/heads/master:' |\n    python ../igcommit/igcommit-receive\n</pre>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<dl>\n<dt>Version 2.0</dt>\n<dd><ul>\n<li>Fix line numbers on syntax errors for executables being 1 off</li>\n<li>Recognize and validate symlinks</li>\n<li>Validate committer and author timestamps</li>\n<li>Validate contributor names and email addresses</li>\n<li>Reduce commit message line length limits</li>\n<li>Complain about file extensions on executables</li>\n</ul>\n</dd>\n<dt>Version 2.1</dt>\n<dd><ul>\n<li>Add [TEMP] to recognized commit tags</li>\n<li>Fix getting the changes of the initial commit (Zheng Wei &lt;<a href=\"mailto:www.zvv.cn%40gmail.com\">www<span>.</span>zvv<span>.</span>cn<span>@</span>gmail<span>.</span>com</a>&gt;)</li>\n<li>Fix various file descriptor leaks</li>\n<li>Check commit summaries more strictly</li>\n<li>Check shebangs of non-executable files too</li>\n<li>Don\u2019t check on empty file contents</li>\n<li>Improve unicode support on Python 2</li>\n<li>Fix checking symlink targets</li>\n</ul>\n</dd>\n<dt>Version 2.2</dt>\n<dd><ul>\n<li>Fix <tt>eslint</tt> configuration (Jerevia &lt;<a href=\"mailto:zhaoliming%40ichaomeng.com\">zhaoliming<span>@</span>ichaomeng<span>.</span>com</a>&gt;)</li>\n<li>Accepts commits with <tt>[TEMP]</tt> with issues</li>\n<li>Stop skipping empty files</li>\n<li>Make sure not to get unknown file contents</li>\n<li>Move file extensions to config</li>\n<li>Increase timestamp comparison tolerance for 1 more minute</li>\n<li>Handle spaces on shebangs</li>\n</ul>\n</dd>\n<dt>Version 2.3</dt>\n<dd><ul>\n<li>Handle check command failing immediately</li>\n<li>Support pushed tags</li>\n<li>Fix failing on file check with bogus return code</li>\n<li>Include list of commit tags on warning</li>\n<li>Fix recognising commit tags <tt>[REVIEW]</tt> and <tt>[SECURITY]</tt></li>\n</ul>\n</dd>\n<dt>Version 2.4</dt>\n<dd><ul>\n<li>Fix recognising removed configuration files</li>\n<li>Support <cite>coffeelint</cite></li>\n</ul>\n</dd>\n<dt>Version 2.5</dt>\n<dd><ul>\n<li>Fix unicode issue on Python 2 for XML, YAML, and JSON (jcoetsie)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The script is released under the MIT License.  The MIT License is registered\nwith and approved by the Open Source Initiative <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">https://opensource.org/licenses/MIT</a></td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 3564474, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "6a8cc00d06b4506983b6c4d3fc7f90ec", "sha256": "e5ccb5f6aa650f42309c221f043dc5e76bc0024487a4bc8415cec28ec34b1773"}, "downloads": -1, "filename": "igcommit-1.1.tar.gz", "has_sig": false, "md5_digest": "6a8cc00d06b4506983b6c4d3fc7f90ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12773, "upload_time": "2017-02-24T15:30:18", "upload_time_iso_8601": "2017-02-24T15:30:18.426982Z", "url": "https://files.pythonhosted.org/packages/ba/6b/55cb3c3bb8810330e97e58c3ee2e017b0f12eb8d222165b1ed55b24b86d9/igcommit-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "b1ba0e997754c187ee37165b822b575e", "sha256": "1f9fc439d9508e608b23acd4150934ed45347d9b4ae4940952812f50af91f2df"}, "downloads": -1, "filename": "igcommit-1.2.tar.gz", "has_sig": false, "md5_digest": "b1ba0e997754c187ee37165b822b575e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12772, "upload_time": "2017-02-24T15:43:49", "upload_time_iso_8601": "2017-02-24T15:43:49.804627Z", "url": "https://files.pythonhosted.org/packages/80/2e/7bece0174b122ca4d4dfaa37cf0122d5ae551f064bdca65b052585233356/igcommit-1.2.tar.gz", "yanked": false}], "2.0": [{"comment_text": "", "digests": {"md5": "c74f32cebd5495a4fc0522a8f0e4e243", "sha256": "b4d78b8256ad6ef5242bf39599616ef9cc26f784bc606ae0c905610e8a86f057"}, "downloads": -1, "filename": "igcommit-2.0.tar.gz", "has_sig": false, "md5_digest": "c74f32cebd5495a4fc0522a8f0e4e243", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16168, "upload_time": "2017-03-11T11:03:17", "upload_time_iso_8601": "2017-03-11T11:03:17.233383Z", "url": "https://files.pythonhosted.org/packages/a0/e4/c4a160b364a75933a4c806fd8e8900cca38079758e066b27f5b49a1da780/igcommit-2.0.tar.gz", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "f72ce61ea2df15ee305e6edc2901824d", "sha256": "b8f37c60650aca0a728f1563909619dd748d2150005f8b0bb471699b01958553"}, "downloads": -1, "filename": "igcommit-2.1.tar.gz", "has_sig": false, "md5_digest": "f72ce61ea2df15ee305e6edc2901824d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15857, "upload_time": "2017-03-27T15:43:08", "upload_time_iso_8601": "2017-03-27T15:43:08.428679Z", "url": "https://files.pythonhosted.org/packages/99/fc/0072718bf4436c59647c7ce97eb4ee42fd03b32562e62fcc18376de221c4/igcommit-2.1.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "13e472a47bb9a986ef23ce975bc34b9f", "sha256": "d01ecfd6f6091eed3825e34648b4539ae9a79de335d0308f3d1ac039a866788a"}, "downloads": -1, "filename": "igcommit-2.2.tar.gz", "has_sig": false, "md5_digest": "13e472a47bb9a986ef23ce975bc34b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16167, "upload_time": "2017-07-01T09:13:28", "upload_time_iso_8601": "2017-07-01T09:13:28.265374Z", "url": "https://files.pythonhosted.org/packages/e5/f6/0de407ba0e5c8fad0848c713db7aece0ff3ccb2f857c16cceb367d230611/igcommit-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "f995f0e2f04a18ed653973cc81a192e4", "sha256": "ef8633fe803245af6725a0c795fd30cc2a594ea7eb74fb7943170f856e6fb967"}, "downloads": -1, "filename": "igcommit-2.3.tar.gz", "has_sig": false, "md5_digest": "f995f0e2f04a18ed653973cc81a192e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16473, "upload_time": "2017-07-25T12:38:59", "upload_time_iso_8601": "2017-07-25T12:38:59.416746Z", "url": "https://files.pythonhosted.org/packages/1b/75/69e5d9cfc4e9f7cd7c388e7ff5632a18132240ce6d77dfe82137c05a166a/igcommit-2.3.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "41b2dc509003d5553d145bb74bbd0ab5", "sha256": "f8659793b73dba00cc8388aa910ae8614563d4b4b0bcb5f5cc6a3d7178c077c1"}, "downloads": -1, "filename": "igcommit-2.4.tar.gz", "has_sig": false, "md5_digest": "41b2dc509003d5553d145bb74bbd0ab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16683, "upload_time": "2018-01-21T11:59:06", "upload_time_iso_8601": "2018-01-21T11:59:06.335097Z", "url": "https://files.pythonhosted.org/packages/80/28/e482e04b142afb4d87e4d5ce273f9908ce17d7288f0698a32544b506dc3a/igcommit-2.4.tar.gz", "yanked": false}], "2.5": [{"comment_text": "", "digests": {"md5": "b579125a2ba7a301f53cb60e3171e03a", "sha256": "36bc1a3cb29f2808c07e4d5acbe31f213f01655b81106d3abfb4317b0d3dbf11"}, "downloads": -1, "filename": "igcommit-2.5.tar.gz", "has_sig": false, "md5_digest": "b579125a2ba7a301f53cb60e3171e03a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16855, "upload_time": "2018-02-08T16:44:22", "upload_time_iso_8601": "2018-02-08T16:44:22.127319Z", "url": "https://files.pythonhosted.org/packages/6b/5d/b13b594054df1d80ef067d2b6d2a215900eda191c3c629d0bffe2e9c7081/igcommit-2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b579125a2ba7a301f53cb60e3171e03a", "sha256": "36bc1a3cb29f2808c07e4d5acbe31f213f01655b81106d3abfb4317b0d3dbf11"}, "downloads": -1, "filename": "igcommit-2.5.tar.gz", "has_sig": false, "md5_digest": "b579125a2ba7a301f53cb60e3171e03a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16855, "upload_time": "2018-02-08T16:44:22", "upload_time_iso_8601": "2018-02-08T16:44:22.127319Z", "url": "https://files.pythonhosted.org/packages/6b/5d/b13b594054df1d80ef067d2b6d2a215900eda191c3c629d0bffe2e9c7081/igcommit-2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:45 2020"}