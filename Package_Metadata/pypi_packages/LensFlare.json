{"info": {"author": "Gordon MacMillan", "author_email": "gmacilla@ymail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# LensFlare\n\nLensFlare is an example package I created to help myself and others better understand neural networks. A lot of the code is based off work that I did in the [Coursera deeplearning.ai course](https://www.coursera.org/specializations/deep-learning)\n\nAn example work flow is shown below:\n\n\n```python\nimport tensorflow as tf\nfrom lensflare.classification import TfNNClassifier\nfrom lensflare.util import load_moons_dataset\n```\n\n\n```python\nX_train, y_train = load_moons_dataset()\n```\n\n\n![png](lensflare_api_example_files/lensflare_api_example_2_0.png)\n\n\n\n```python\ntf.reset_default_graph()\n\n# layer_dims contains neural network structure parameters\nlayers_dims=[X_train.shape[0], 200, 80, 10, 1]\nclf = TfNNClassifier(layers_dims=layers_dims,\n                  optimizer=\"adam\",\n                  lambd=.05,\n                  keep_prob=0.7,\n                  num_epochs=5000)\nclf.fit(X_train, y_train, seed=3)\ny_pred_train = clf.transform(X_train, y_train)\n```\n\n    Cost after epoch 0: 1.036825\n    Cost after epoch 1000: 0.108737\n    Cost after epoch 2000: 0.104837\n    Cost after epoch 3000: 0.106805\n    Cost after epoch 4000: 0.105311\n    INFO:tensorflow:Restoring parameters from results/model\n    Training Accuracy: 0.983333333333\n\n\n\n```python\nfrom lensflare.funcs.tf_funcs import plot_decision_boundary, predict_dec\n# Plot decision boundary\n\npredictions, X, dropout_var, sess = predict_dec()\nmodel = lambda X_train: sess.run([predictions], feed_dict={X:X_train, dropout_var: 1.0});\n\nplot_decision_boundary(model, X_train, y_train)\nsess.close()\n```\n\n    INFO:tensorflow:Restoring parameters from results/model\n\n\n\n![png](lensflare_api_example_files/lensflare_api_example_4_1.png)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "LensFlare", "package_url": "https://pypi.org/project/LensFlare/", "platform": "", "project_url": "https://pypi.org/project/LensFlare/", "project_urls": null, "release_url": "https://pypi.org/project/LensFlare/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A small library of hand-rolled deep learning models", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>LensFlare</h1>\n<p>LensFlare is an example package I created to help myself and others better understand neural networks. A lot of the code is based off work that I did in the <a href=\"https://www.coursera.org/specializations/deep-learning\" rel=\"nofollow\">Coursera deeplearning.ai course</a></p>\n<p>An example work flow is shown below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lensflare.classification</span> <span class=\"kn\">import</span> <span class=\"n\">TfNNClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lensflare.util</span> <span class=\"kn\">import</span> <span class=\"n\">load_moons_dataset</span>\n</pre>\n<pre><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">load_moons_dataset</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab357b9cfea1a8eebfb5c1f04dcacabf8f6698c6/6c656e73666c6172655f6170695f6578616d706c655f66696c65732f6c656e73666c6172655f6170695f6578616d706c655f325f302e706e67\"></p>\n<pre><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">reset_default_graph</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># layer_dims contains neural network structure parameters</span>\n<span class=\"n\">layers_dims</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">TfNNClassifier</span><span class=\"p\">(</span><span class=\"n\">layers_dims</span><span class=\"o\">=</span><span class=\"n\">layers_dims</span><span class=\"p\">,</span>\n                  <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s2\">\"adam\"</span><span class=\"p\">,</span>\n                  <span class=\"n\">lambd</span><span class=\"o\">=.</span><span class=\"mi\">05</span><span class=\"p\">,</span>\n                  <span class=\"n\">keep_prob</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                  <span class=\"n\">num_epochs</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred_train</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Cost after epoch 0: 1.036825\nCost after epoch 1000: 0.108737\nCost after epoch 2000: 0.104837\nCost after epoch 3000: 0.106805\nCost after epoch 4000: 0.105311\nINFO:tensorflow:Restoring parameters from results/model\nTraining Accuracy: 0.983333333333\n</code></pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lensflare.funcs.tf_funcs</span> <span class=\"kn\">import</span> <span class=\"n\">plot_decision_boundary</span><span class=\"p\">,</span> <span class=\"n\">predict_dec</span>\n<span class=\"c1\"># Plot decision boundary</span>\n\n<span class=\"n\">predictions</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">dropout_var</span><span class=\"p\">,</span> <span class=\"n\">sess</span> <span class=\"o\">=</span> <span class=\"n\">predict_dec</span><span class=\"p\">()</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"n\">predictions</span><span class=\"p\">],</span> <span class=\"n\">feed_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">X</span><span class=\"p\">:</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">dropout_var</span><span class=\"p\">:</span> <span class=\"mf\">1.0</span><span class=\"p\">});</span>\n\n<span class=\"n\">plot_decision_boundary</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<pre><code>INFO:tensorflow:Restoring parameters from results/model\n</code></pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d530f15f209a90a3eee8c3e9d838d95a012d339e/6c656e73666c6172655f6170695f6578616d706c655f66696c65732f6c656e73666c6172655f6170695f6578616d706c655f345f312e706e67\"></p>\n\n          </div>"}, "last_serial": 4280038, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d194c88a82a022b65d6be2959e1fe3c9", "sha256": "63fc76436495fa08ba2ee9f937c1c1db5eb96f596e7c31bc099680233ccc2f9d"}, "downloads": -1, "filename": "LensFlare-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d194c88a82a022b65d6be2959e1fe3c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22321, "upload_time": "2018-09-17T16:47:05", "upload_time_iso_8601": "2018-09-17T16:47:05.681422Z", "url": "https://files.pythonhosted.org/packages/b4/ca/88b0ef191222f1c71faac7bdedd3530f3716bb8437d8fce7ab8c99dbcf8d/LensFlare-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "411e2f7601dbfdfab74989c214247e9a", "sha256": "b6df7074f4d503546039e3c2f0420f0b9513d07095327c7a60ea0afee1d6cbfb"}, "downloads": -1, "filename": "LensFlare-0.0.1.tar.gz", "has_sig": false, "md5_digest": "411e2f7601dbfdfab74989c214247e9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15124, "upload_time": "2018-09-17T16:47:07", "upload_time_iso_8601": "2018-09-17T16:47:07.029548Z", "url": "https://files.pythonhosted.org/packages/9e/e7/85d26131cac3ced0db6c9e3d9c313dc61c8f50968d0f6877860a508fc2ba/LensFlare-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d194c88a82a022b65d6be2959e1fe3c9", "sha256": "63fc76436495fa08ba2ee9f937c1c1db5eb96f596e7c31bc099680233ccc2f9d"}, "downloads": -1, "filename": "LensFlare-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d194c88a82a022b65d6be2959e1fe3c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22321, "upload_time": "2018-09-17T16:47:05", "upload_time_iso_8601": "2018-09-17T16:47:05.681422Z", "url": "https://files.pythonhosted.org/packages/b4/ca/88b0ef191222f1c71faac7bdedd3530f3716bb8437d8fce7ab8c99dbcf8d/LensFlare-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "411e2f7601dbfdfab74989c214247e9a", "sha256": "b6df7074f4d503546039e3c2f0420f0b9513d07095327c7a60ea0afee1d6cbfb"}, "downloads": -1, "filename": "LensFlare-0.0.1.tar.gz", "has_sig": false, "md5_digest": "411e2f7601dbfdfab74989c214247e9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15124, "upload_time": "2018-09-17T16:47:07", "upload_time_iso_8601": "2018-09-17T16:47:07.029548Z", "url": "https://files.pythonhosted.org/packages/9e/e7/85d26131cac3ced0db6c9e3d9c313dc61c8f50968d0f6877860a508fc2ba/LensFlare-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:01 2020"}