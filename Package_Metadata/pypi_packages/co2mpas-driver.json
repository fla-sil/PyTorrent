{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "## Com2pas_driver: Try it live\n<!--move them to CONTRIBUTING.md -->\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/JRCSTU/co2mpas_driver/master?urlpath=lab/tree/examples)\n\nAccess this Binder at the following URL:\n\nhttps://mybinder.org/v2/gh/JRCSTU/co2mpas_driver/master\n\nClick the binder badge to try it live without installing anything. \nThis will take you directly to JupyterLab where we used Jupyter notebook to \npresent examples on how to use co2mpas_driver model (i.e., MFC) to simulate \nthe driver behaviour of a vehicle.\n\n## What is co2mpas_driver?\n\nCo2mpas_driver is a library used to implement a lightweight microsimulation \nfree-flow acceleration model (MFC) that is able to capture the vehicle acceleration \ndynamics accurately and consistently, it provides a link between the model and \nthe driver and can be easily implemented and tested without raising the \ncomputational complexity. The proposed model has been developed by the Joint Research Centre of the \nEuropean Commission for more details https://journals.sagepub.com/doi/10.1177/0361198119838515\n\n## Installation\n\n**Install co2mpas_driver**\n    This package can be installed from source easily on any machine that has git \n    and pip.\n\n   It can be installed from pypi.\n\n        pip install co2mpas_driver\n\n   You can install co2mpas_driver's most recent commit.\n\n        pip install git+https://github.com/JRCSTU/co2mpas_driver.git@75e619a\n\n   or from @master branch.\n\n        pip install git+https://github.com/JRCSTU/co2mpas_driver.git@master \n\n**Uninstall your package**\n\n        pip uninstall co2mpas_driver\n\n## Usage\n\nIn this example we will use co2mpas_driver model in order to extract the drivers \nacceleration behavior as approaching the desired speed.\n\na. **Setup** \n\n  * First, set up python, numpy, matplotlib.\n\n    set up python environment: numpy for numerical routines, and matplotlib \n    for plotting\n\n        >>> import numpy as np\n        >>> import matplotlib.pyplot as plt\n\n  * Import dispatcher(dsp) from co2mpas_driver that contains functions \n    and simulation model to process vehicle data and Import also schedula\n    for selecting and executing functions. for more information on how to use \n    schedula https://pypi.org/project/schedula/\n\n        >>> from co2mpas_driver import dsp\n        >>> import schedula as sh\n\nb. **Load data**\n\n  * Load vehicle data for a specific vehicle from vehicles database\n\n        >>> db_path = 'EuroSegmentCar.csv'\n\n  * Load user input parameters from an excel file \n\n        >>> input_path = 'sample.xlsx'  \n\n  * Sample time series\n\n        >>> sim_step = 0.1 #The simulation step in seconds\n        >>> duration = 100 #Duration of the simulation in seconds\n        >>> times = np.arange(0, duration + sim_step, sim_step)\n\n  * Load user input parameters directly writing in your sample script\n\n        >>> inputs = {\n        'vehicle_id': 35135,  # A sample car id from the database\n        'inputs': {'gear_shifting_style': 0.7, #The gear shifting style as \n                                                described in the TRR paper\n                    'starting_speed': 0,\n                   'desired_velocity': 40,\n                   'driver_style': 1},  # gear shifting can take value\n        # from 0(timid driver) to 1(aggressive driver)\n        'time_series': {'times': times}\n        }\n\nc. **Dispatcher**      \n\n  * Dispatcher will select and execute the proper functions for the given inputs \n    and the requested outputs\n\n        >>> core = dsp(dict(db_path=db_path, input_path=input_path, inputs=inputs),\n           outputs=['outputs'], shrink=True)\n\n  * Plot workflow of the core model from the dispatcher\n\n        >>> core.plot()\n\n    This will automatically open an internet browser and show the work flow \n    of the core model as below. you can click all the rectangular boxes to see\n    in detail sub models like load, model, write and plot. \n\n    ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/core_example.PNG)\n\n    **The Load module**\n\n    ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/load_example.PNG)\n\n    **merged vehicle data for the vehicle_id used above**\n\n    ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/data.PNG)\n\n  * Load outputs of dispatcher\n    Select the chosen dictionary key (outputs) from the given dictionary.\n\n        >>> outputs = sh.selector(['outputs'], sh.selector(['outputs'], core))\n\n  * select the desired output\n\n        >>> output = sh.selector(['Curves', 'poly_spline', 'Start', 'Stop', 'gs',\n                      'discrete_acceleration_curves', 'velocities',\n                      'accelerations', 'transmission'], outputs['outputs'])\n\n    The final acceleration curves, the engine acceleration potential \n    curves (poly_spline), before the calculation of the resistances and the\n    limitation due to max possible acceleration (friction).\n\n        >>> curves, poly_spline, start, stop, gs, discrete_acceleration_curves, \\\n        velocities, accelerations, transmission = \\\n        output['Curves'], output['poly_spline'], output['Start'], output['Stop'], output['gs'], \\\n        output['discrete_acceleration_curves'], output['velocities'], \\\n        output['accelerations'], output['transmission'], \\\n\n    curves: Final acceleration curves\n    poly_spline: \n    start and stop: Start and stop speed for each gear\n    gs:\n    discrete_acceleration_curves\n    velocities:\n    accelerations:\n\nd. **Plot**          \n\n    >>> plt.figure('Time-Speed')\n    >>> plt.plot(times, velocities)\n    >>> plt.grid()\n    >>> plt.figure('Speed-Acceleration')\n    >>> plt.plot(velocities, accelerations)\n    >>> plt.grid()\n    >>> plt.figure('Acceleration-Time')\n    >>> plt.plot(times, accelerations)\n    >>> plt.grid()\n\n\n    >>> plt.figure('Speed-Acceleration')\n    >>> for curve in discrete_acceleration_curves:\n        sp_bins = list(curve['x'])\n        acceleration = list(curve['y'])\n        plt.plot(sp_bins, acceleration, 'k')\n    >>> plt.show()\n\ne. **Results**\n\n ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/speed-time.PNG)\n\n **Figure 1.** Speed(m/s) versus time(s) graph over the desired speed range.\n\n Acceleration(m/s*2) versus speed(m/s) graph\n\n ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/acce-speed.PNG)\n\n **Figure 2.** Acceleration per gear, the gear-shifting points and final acceleration potential of our selected \n   vehicle over the desired speed range\n\n Acceleration(m/s*2) versus speed graph(m/s)\n\n ![alt text](https://github.com/ashenafimenza/new_MFC/blob/master/co2mpas_driver/images/acc-time.PNG)\n\n **Figure 3.** The final acceleration potential of our selected vehicle over the desired speed range\n\n\n\n\n   **Contributing**\n\n   Pull requests and stars are very welcome.\n\n   For bugs and feature requests, please [create an issue](https://github.com/ashenafimenza/new_MFC/issues/new).\n\n   **Release**\\\n   1.0.0\n\n   **Release date**\\\n   2020-02-25\n\n   **Repository**\\\n   https://github.com/JRCSTU/co2mpas_driver\n\n   **copyright**\\\n   2015-2019 European Commission JRC <https://ec.europa.eu/jrc/>\n\n   **pypi-repo**\\\n   https://pypi.org/project/co2mpas-driver/\n\n   **License**\\\n   EUPL 1.1+ <https://joinup.ec.europa.eu/software/page/eupl>\n\n\n[1]: https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/\n[2]: https://black.readthedocs.io/  \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "European Union Public Licence 1.1 or later (EUPL 1.1+)", "maintainer": "", "maintainer_email": "", "name": "co2mpas-driver", "package_url": "https://pypi.org/project/co2mpas-driver/", "platform": "any", "project_url": "https://pypi.org/project/co2mpas-driver/", "project_urls": {"Sources": "https://github.com/JRCSTU/co2mpas_driver"}, "release_url": "https://pypi.org/project/co2mpas-driver/1.1.0/", "requires_dist": ["PyYAML", "schedula (>=0.3.2)", "tqdm", "scikit-learn", "regex", "lmfit (>=0.9.7)", "numpy", "schema", "scipy", "wltp", "xgboost"], "requires_python": "", "summary": "A lightweight microsimulation free-flow acceleration model(MFC) or co2mpas_driver is a model that is able to capture the vehicle acceleration dynamics accurately and consistently", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Com2pas_driver: Try it live</h2>\n\n<p><a href=\"https://mybinder.org/v2/gh/JRCSTU/co2mpas_driver/master?urlpath=lab/tree/examples\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<p>Access this Binder at the following URL:</p>\n<p><a href=\"https://mybinder.org/v2/gh/JRCSTU/co2mpas_driver/master\" rel=\"nofollow\">https://mybinder.org/v2/gh/JRCSTU/co2mpas_driver/master</a></p>\n<p>Click the binder badge to try it live without installing anything.\nThis will take you directly to JupyterLab where we used Jupyter notebook to\npresent examples on how to use co2mpas_driver model (i.e., MFC) to simulate\nthe driver behaviour of a vehicle.</p>\n<h2>What is co2mpas_driver?</h2>\n<p>Co2mpas_driver is a library used to implement a lightweight microsimulation\nfree-flow acceleration model (MFC) that is able to capture the vehicle acceleration\ndynamics accurately and consistently, it provides a link between the model and\nthe driver and can be easily implemented and tested without raising the\ncomputational complexity. The proposed model has been developed by the Joint Research Centre of the\nEuropean Commission for more details <a href=\"https://journals.sagepub.com/doi/10.1177/0361198119838515\" rel=\"nofollow\">https://journals.sagepub.com/doi/10.1177/0361198119838515</a></p>\n<h2>Installation</h2>\n<p><strong>Install co2mpas_driver</strong>\nThis package can be installed from source easily on any machine that has git\nand pip.</p>\n<p>It can be installed from pypi.</p>\n<pre><code>    pip install co2mpas_driver\n</code></pre>\n<p>You can install co2mpas_driver's most recent commit.</p>\n<pre><code>    pip install git+https://github.com/JRCSTU/co2mpas_driver.git@75e619a\n</code></pre>\n<p>or from @master branch.</p>\n<pre><code>    pip install git+https://github.com/JRCSTU/co2mpas_driver.git@master \n</code></pre>\n<p><strong>Uninstall your package</strong></p>\n<pre><code>    pip uninstall co2mpas_driver\n</code></pre>\n<h2>Usage</h2>\n<p>In this example we will use co2mpas_driver model in order to extract the drivers\nacceleration behavior as approaching the desired speed.</p>\n<p>a. <strong>Setup</strong></p>\n<ul>\n<li>\n<p>First, set up python, numpy, matplotlib.</p>\n<p>set up python environment: numpy for numerical routines, and matplotlib\nfor plotting</p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import matplotlib.pyplot as plt\n</code></pre>\n</li>\n<li>\n<p>Import dispatcher(dsp) from co2mpas_driver that contains functions\nand simulation model to process vehicle data and Import also schedula\nfor selecting and executing functions. for more information on how to use\nschedula <a href=\"https://pypi.org/project/schedula/\" rel=\"nofollow\">https://pypi.org/project/schedula/</a></p>\n<pre><code>&gt;&gt;&gt; from co2mpas_driver import dsp\n&gt;&gt;&gt; import schedula as sh\n</code></pre>\n</li>\n</ul>\n<p>b. <strong>Load data</strong></p>\n<ul>\n<li>\n<p>Load vehicle data for a specific vehicle from vehicles database</p>\n<pre><code>&gt;&gt;&gt; db_path = 'EuroSegmentCar.csv'\n</code></pre>\n</li>\n<li>\n<p>Load user input parameters from an excel file</p>\n<pre><code>&gt;&gt;&gt; input_path = 'sample.xlsx'  \n</code></pre>\n</li>\n<li>\n<p>Sample time series</p>\n<pre><code>&gt;&gt;&gt; sim_step = 0.1 #The simulation step in seconds\n&gt;&gt;&gt; duration = 100 #Duration of the simulation in seconds\n&gt;&gt;&gt; times = np.arange(0, duration + sim_step, sim_step)\n</code></pre>\n</li>\n<li>\n<p>Load user input parameters directly writing in your sample script</p>\n<pre><code>&gt;&gt;&gt; inputs = {\n'vehicle_id': 35135,  # A sample car id from the database\n'inputs': {'gear_shifting_style': 0.7, #The gear shifting style as \n                                        described in the TRR paper\n            'starting_speed': 0,\n           'desired_velocity': 40,\n           'driver_style': 1},  # gear shifting can take value\n# from 0(timid driver) to 1(aggressive driver)\n'time_series': {'times': times}\n}\n</code></pre>\n</li>\n</ul>\n<p>c. <strong>Dispatcher</strong></p>\n<ul>\n<li>\n<p>Dispatcher will select and execute the proper functions for the given inputs\nand the requested outputs</p>\n<pre><code>&gt;&gt;&gt; core = dsp(dict(db_path=db_path, input_path=input_path, inputs=inputs),\n   outputs=['outputs'], shrink=True)\n</code></pre>\n</li>\n<li>\n<p>Plot workflow of the core model from the dispatcher</p>\n<pre><code>&gt;&gt;&gt; core.plot()\n</code></pre>\n<p>This will automatically open an internet browser and show the work flow\nof the core model as below. you can click all the rectangular boxes to see\nin detail sub models like load, model, write and plot.</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11947e4f1a449be711f84cd2093f49bcdebe9553/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f636f72655f6578616d706c652e504e47\"></p>\n<p><strong>The Load module</strong></p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d33c7d60259b8a157a0b9e3140ce11c742db428/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f6c6f61645f6578616d706c652e504e47\"></p>\n<p><strong>merged vehicle data for the vehicle_id used above</strong></p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56f6accdabba3ec17da7e7b839169ed93fd7a66d/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f646174612e504e47\"></p>\n</li>\n<li>\n<p>Load outputs of dispatcher\nSelect the chosen dictionary key (outputs) from the given dictionary.</p>\n<pre><code>&gt;&gt;&gt; outputs = sh.selector(['outputs'], sh.selector(['outputs'], core))\n</code></pre>\n</li>\n<li>\n<p>select the desired output</p>\n<pre><code>&gt;&gt;&gt; output = sh.selector(['Curves', 'poly_spline', 'Start', 'Stop', 'gs',\n              'discrete_acceleration_curves', 'velocities',\n              'accelerations', 'transmission'], outputs['outputs'])\n</code></pre>\n<p>The final acceleration curves, the engine acceleration potential\ncurves (poly_spline), before the calculation of the resistances and the\nlimitation due to max possible acceleration (friction).</p>\n<pre><code>&gt;&gt;&gt; curves, poly_spline, start, stop, gs, discrete_acceleration_curves, \\\nvelocities, accelerations, transmission = \\\noutput['Curves'], output['poly_spline'], output['Start'], output['Stop'], output['gs'], \\\noutput['discrete_acceleration_curves'], output['velocities'], \\\noutput['accelerations'], output['transmission'], \\\n</code></pre>\n<p>curves: Final acceleration curves\npoly_spline:\nstart and stop: Start and stop speed for each gear\ngs:\ndiscrete_acceleration_curves\nvelocities:\naccelerations:</p>\n</li>\n</ul>\n<p>d. <strong>Plot</strong></p>\n<pre><code>&gt;&gt;&gt; plt.figure('Time-Speed')\n&gt;&gt;&gt; plt.plot(times, velocities)\n&gt;&gt;&gt; plt.grid()\n&gt;&gt;&gt; plt.figure('Speed-Acceleration')\n&gt;&gt;&gt; plt.plot(velocities, accelerations)\n&gt;&gt;&gt; plt.grid()\n&gt;&gt;&gt; plt.figure('Acceleration-Time')\n&gt;&gt;&gt; plt.plot(times, accelerations)\n&gt;&gt;&gt; plt.grid()\n\n\n&gt;&gt;&gt; plt.figure('Speed-Acceleration')\n&gt;&gt;&gt; for curve in discrete_acceleration_curves:\n    sp_bins = list(curve['x'])\n    acceleration = list(curve['y'])\n    plt.plot(sp_bins, acceleration, 'k')\n&gt;&gt;&gt; plt.show()\n</code></pre>\n<p>e. <strong>Results</strong></p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6dcb986b959d1bbb6def5d5a082f4ba42d3289af/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f73706565642d74696d652e504e47\"></p>\n<p><strong>Figure 1.</strong> Speed(m/s) versus time(s) graph over the desired speed range.</p>\n<p>Acceleration(m/s*2) versus speed(m/s) graph</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb51d3204cc6f2a6dc0b3cd3eb4e9b04b3f29683/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f616363652d73706565642e504e47\"></p>\n<p><strong>Figure 2.</strong> Acceleration per gear, the gear-shifting points and final acceleration potential of our selected\nvehicle over the desired speed range</p>\n<p>Acceleration(m/s*2) versus speed graph(m/s)</p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5f7b1c1522c7d6af002507ba4ae78839e090511/68747470733a2f2f6769746875622e636f6d2f617368656e6166696d656e7a612f6e65775f4d46432f626c6f622f6d61737465722f636f326d7061735f6472697665722f696d616765732f6163632d74696d652e504e47\"></p>\n<p><strong>Figure 3.</strong> The final acceleration potential of our selected vehicle over the desired speed range</p>\n<p><strong>Contributing</strong></p>\n<p>Pull requests and stars are very welcome.</p>\n<p>For bugs and feature requests, please <a href=\"https://github.com/ashenafimenza/new_MFC/issues/new\" rel=\"nofollow\">create an issue</a>.</p>\n<p><strong>Release</strong><br>\n1.0.0</p>\n<p><strong>Release date</strong><br>\n2020-02-25</p>\n<p><strong>Repository</strong><br>\n<a href=\"https://github.com/JRCSTU/co2mpas_driver\" rel=\"nofollow\">https://github.com/JRCSTU/co2mpas_driver</a></p>\n<p><strong>copyright</strong><br>\n2015-2019 European Commission JRC <a href=\"https://ec.europa.eu/jrc/\" rel=\"nofollow\">https://ec.europa.eu/jrc/</a></p>\n<p><strong>pypi-repo</strong><br>\n<a href=\"https://pypi.org/project/co2mpas-driver/\" rel=\"nofollow\">https://pypi.org/project/co2mpas-driver/</a></p>\n<p><strong>License</strong><br>\nEUPL 1.1+ <a href=\"https://joinup.ec.europa.eu/software/page/eupl\" rel=\"nofollow\">https://joinup.ec.europa.eu/software/page/eupl</a></p>\n\n          </div>"}, "last_serial": 6822069, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "845e315926a1a38430c6fdfe8e45268a", "sha256": "ed0c3a67b1358a4c70fcf60f9b5271799759140f6f9024e761f3900df265f6f8"}, "downloads": -1, "filename": "co2mpas_driver-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "845e315926a1a38430c6fdfe8e45268a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 91207, "upload_time": "2020-02-25T11:47:36", "upload_time_iso_8601": "2020-02-25T11:47:36.958035Z", "url": "https://files.pythonhosted.org/packages/96/3f/31f6369eddcfeace36046cf71d03a998442eb808436e106f072ced2030fb/co2mpas_driver-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0dcadfc8a72819845acc542d9712dc8", "sha256": "c2b7b4630090a1a21718732241891788e31ac50107db18f270279add303e6d44"}, "downloads": -1, "filename": "co2mpas_driver-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c0dcadfc8a72819845acc542d9712dc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40865, "upload_time": "2020-02-25T11:47:39", "upload_time_iso_8601": "2020-02-25T11:47:39.808418Z", "url": "https://files.pythonhosted.org/packages/ac/90/af519bb9986f58aded6b76027826b5e375aa2a171445c733679f28244472/co2mpas_driver-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "640709f464ead6af80635f8d864fcfc1", "sha256": "78eb9dd7530f6cdec65f314b1abbdfd3b8817ac44449dca9e3e316d451bc4019"}, "downloads": -1, "filename": "co2mpas_driver-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "640709f464ead6af80635f8d864fcfc1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 102432, "upload_time": "2020-03-16T15:47:13", "upload_time_iso_8601": "2020-03-16T15:47:13.194065Z", "url": "https://files.pythonhosted.org/packages/9e/e0/2847a456a21d74c4f50e870f0ce7c134b09db2c53175969448550e3048be/co2mpas_driver-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6063953436e1f2f9a5605b285cb6e616", "sha256": "099d22bbb7f57291bc699fcf54882544e0c97ea8ddf4fbab7fb93dff81eeb87a"}, "downloads": -1, "filename": "co2mpas_driver-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6063953436e1f2f9a5605b285cb6e616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43062, "upload_time": "2020-03-16T15:47:18", "upload_time_iso_8601": "2020-03-16T15:47:18.189760Z", "url": "https://files.pythonhosted.org/packages/0f/da/b5a528d8e54cef2d3073d2ac420c78c5f765bf1445686fbc9935caf0b7e4/co2mpas_driver-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "640709f464ead6af80635f8d864fcfc1", "sha256": "78eb9dd7530f6cdec65f314b1abbdfd3b8817ac44449dca9e3e316d451bc4019"}, "downloads": -1, "filename": "co2mpas_driver-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "640709f464ead6af80635f8d864fcfc1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 102432, "upload_time": "2020-03-16T15:47:13", "upload_time_iso_8601": "2020-03-16T15:47:13.194065Z", "url": "https://files.pythonhosted.org/packages/9e/e0/2847a456a21d74c4f50e870f0ce7c134b09db2c53175969448550e3048be/co2mpas_driver-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6063953436e1f2f9a5605b285cb6e616", "sha256": "099d22bbb7f57291bc699fcf54882544e0c97ea8ddf4fbab7fb93dff81eeb87a"}, "downloads": -1, "filename": "co2mpas_driver-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6063953436e1f2f9a5605b285cb6e616", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43062, "upload_time": "2020-03-16T15:47:18", "upload_time_iso_8601": "2020-03-16T15:47:18.189760Z", "url": "https://files.pythonhosted.org/packages/0f/da/b5a528d8e54cef2d3073d2ac420c78c5f765bf1445686fbc9935caf0b7e4/co2mpas_driver-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:26 2020"}