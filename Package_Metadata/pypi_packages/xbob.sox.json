{"info": {"author": "Elie Khoury", "author_email": "elie.khoury@idiap.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "=========================\n Python Bindings for Sox\n=========================\n\nThis package is a simple Python wrapper to read and write functionalities in Sox <http://sox.sourceforge.net>.\nThe github version can be found here: https://github.com/bioidiap/xbob.sox\n\nInstallation\n------------\n\nYou can just add a dependence for ``xbob.sox`` on your ``setup.py`` to\nautomatically download and have this package available at your satellite\npackage. This works well if Bob is installed centrally at your machine. If not done, you need also to install bob-dev.\n\nOn ubuntu, you need something like::\n\n  $ sudo apt-get install bob bob-dev sox libsox-dev\n  \nOn Mac OSX, you need something like::\n\n  $ sudo port install bob bob-dev sox libsox-dev\n\n\nOtherwise, you will need to tell ``buildout`` how to build the package locally\nand how to find Bob. For that, just add a recipe to your buildout that will\nfetch the package and compile it locally, setting the buildout variable\n``prefixes`` to where Bob is installed (a build directory will also work). For\nexample::\n\n  [buildout]\n  parts = xbob.sox <other parts here...>\n  prefixes = /Users/elie/work/bob/build/debug\n  ...\n\n  [xbob.sox]\n  recipe = xbob.buildout:develop\n\n  ...\n\nDevelopment\n-----------\n\nTo develop these bindings, you will need the open-source libraries `Bob <http://www.idiap.ch/software/bob/>`_ and `Sox <http://sox.sourceforge.net>`_ installed somewhere. This satellite package was tested with Bob version 1.2.x, and Sox version 14.3.x and 14.4.x, and on OSX and UBUNTU 10.x and 12.x. \nIf you have compiled Bob and Sox yourself and installed it on a non-standard location, you will need to note down the path leading to the root of that installation.\n\nJust type::\n\n  $ python bootstrap.py\n  $ ./bin/buildout\n\nIf Bob is installed in a non-standard location, edit the file ``buildout.cfg`` to set the root to Bob's local installation path. Remember to use the **same python interpreter** that was used to compile Bob, then execute the same steps\nas above.\n\nUsage\n-----\n\nTo read, just do something like::\n\n  import xbob.sox\n  infilename='xbob/sox/data/sample1.sph'\n  audio = xbob.sox.reader(infilename)\n  (rate, data) = audio.load()\n  print rate\n  print data\n\nThis allows to read more wave formats than ``scipy.io.wavfile`` module. The output data are the same as for the MATLAB ``wavread`` function, and comparable with ``scipy.io.wavfile`` module (just multiplied by 2^15). Unit-tests to compare the 3 implementations are available. Just run::\n\n  $ bin/nosetests -vs\n\nTo write, do something like::\n  \n  outfilename='out.wav'\n  writer=xbob.sox.writer(outfilename, rate)\n  writer.save(data)\n    \n\nThe ``xbob.sox.writer`` method accepts more parameters to optionally select the codec and the number of bits per sample (if the codec allows). Please refer to its built-in. By default, it uses the default codec and bits per sample that are associated with the extension of the file. \n\n\nSupported Encoding and Extensions\n----------------------------------\n\n`Encodings`: \n\n``SIGN2``, ``UNSIGNED``, ``FLOAT``, ``FLOAT_TEXT``, ``FLAC``, ``HCOM``, ``WAVPACK``, ``WAVPACKF``, ``ULAW``, ``ALAW``, ``G721``, ``G723``, ``CL_ADPCM``, ``CL_ADPCM16``, ``MS_ADPCM``, ``IMA_ADPCM``, ``OKI_ADPCM``, ``DPCM``, ``DWVW``, ``DWVWN``, ``GSM``, ``MP3``, ``VORBIS``, ``AMR_WB``, ``AMR_NB``, ``CVSD``, ``LPC10``.\n\n`Extensions`: \n\n``.voc``, ``.smp``, ``.wve``, ``.gsrt``, ``.amr-wb``, ``.prc``, ``.sph``, ``.amr-nb``, ``.txw``, ``.sndt``, ``.vorbis``, ``.speex``, ``.hcom``, ``.wav``, ``.aiff``, ``.aifc``, ``.8svx``, ``.maud``, ``.xa``, ``.au``, ``.flac``, ``.avr``, ``.caf``, ``.wv``, ``.paf``, ``.sf``, ``.sox``.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/xbob.sox", "keywords": null, "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "xbob.sox", "package_url": "https://pypi.org/project/xbob.sox/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/xbob.sox/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/xbob.sox"}, "release_url": "https://pypi.org/project/xbob.sox/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "Audio reader and writer using sox for bob and python", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package is a simple Python wrapper to read and write functionalities in Sox &lt;<a href=\"http://sox.sourceforge.net\" rel=\"nofollow\">http://sox.sourceforge.net</a>&gt;.\nThe github version can be found here: <a href=\"https://github.com/bioidiap/xbob.sox\" rel=\"nofollow\">https://github.com/bioidiap/xbob.sox</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can just add a dependence for <tt>xbob.sox</tt> on your <tt>setup.py</tt> to\nautomatically download and have this package available at your satellite\npackage. This works well if Bob is installed centrally at your machine. If not done, you need also to install bob-dev.</p>\n<p>On ubuntu, you need something like:</p>\n<pre>$ sudo apt-get install bob bob-dev sox libsox-dev\n</pre>\n<p>On Mac OSX, you need something like:</p>\n<pre>$ sudo port install bob bob-dev sox libsox-dev\n</pre>\n<p>Otherwise, you will need to tell <tt>buildout</tt> how to build the package locally\nand how to find Bob. For that, just add a recipe to your buildout that will\nfetch the package and compile it locally, setting the buildout variable\n<tt>prefixes</tt> to where Bob is installed (a build directory will also work). For\nexample:</p>\n<pre>[buildout]\nparts = xbob.sox &lt;other parts here...&gt;\nprefixes = /Users/elie/work/bob/build/debug\n...\n\n[xbob.sox]\nrecipe = xbob.buildout:develop\n\n...\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To develop these bindings, you will need the open-source libraries <a href=\"http://www.idiap.ch/software/bob/\" rel=\"nofollow\">Bob</a> and <a href=\"http://sox.sourceforge.net\" rel=\"nofollow\">Sox</a> installed somewhere. This satellite package was tested with Bob version 1.2.x, and Sox version 14.3.x and 14.4.x, and on OSX and UBUNTU 10.x and 12.x.\nIf you have compiled Bob and Sox yourself and installed it on a non-standard location, you will need to note down the path leading to the root of that installation.</p>\n<p>Just type:</p>\n<pre>$ python bootstrap.py\n$ ./bin/buildout\n</pre>\n<p>If Bob is installed in a non-standard location, edit the file <tt>buildout.cfg</tt> to set the root to Bob\u2019s local installation path. Remember to use the <strong>same python interpreter</strong> that was used to compile Bob, then execute the same steps\nas above.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To read, just do something like:</p>\n<pre>import xbob.sox\ninfilename='xbob/sox/data/sample1.sph'\naudio = xbob.sox.reader(infilename)\n(rate, data) = audio.load()\nprint rate\nprint data\n</pre>\n<p>This allows to read more wave formats than <tt>scipy.io.wavfile</tt> module. The output data are the same as for the MATLAB <tt>wavread</tt> function, and comparable with <tt>scipy.io.wavfile</tt> module (just multiplied by 2^15). Unit-tests to compare the 3 implementations are available. Just run:</p>\n<pre>$ bin/nosetests -vs\n</pre>\n<p>To write, do something like:</p>\n<pre>outfilename='out.wav'\nwriter=xbob.sox.writer(outfilename, rate)\nwriter.save(data)\n</pre>\n<p>The <tt>xbob.sox.writer</tt> method accepts more parameters to optionally select the codec and the number of bits per sample (if the codec allows). Please refer to its built-in. By default, it uses the default codec and bits per sample that are associated with the extension of the file.</p>\n</div>\n<div id=\"supported-encoding-and-extensions\">\n<h2>Supported Encoding and Extensions</h2>\n<p><cite>Encodings</cite>:</p>\n<p><tt>SIGN2</tt>, <tt>UNSIGNED</tt>, <tt>FLOAT</tt>, <tt>FLOAT_TEXT</tt>, <tt>FLAC</tt>, <tt>HCOM</tt>, <tt>WAVPACK</tt>, <tt>WAVPACKF</tt>, <tt>ULAW</tt>, <tt>ALAW</tt>, <tt>G721</tt>, <tt>G723</tt>, <tt>CL_ADPCM</tt>, <tt>CL_ADPCM16</tt>, <tt>MS_ADPCM</tt>, <tt>IMA_ADPCM</tt>, <tt>OKI_ADPCM</tt>, <tt>DPCM</tt>, <tt>DWVW</tt>, <tt>DWVWN</tt>, <tt>GSM</tt>, <tt>MP3</tt>, <tt>VORBIS</tt>, <tt>AMR_WB</tt>, <tt>AMR_NB</tt>, <tt>CVSD</tt>, <tt>LPC10</tt>.</p>\n<p><cite>Extensions</cite>:</p>\n<p><tt>.voc</tt>, <tt>.smp</tt>, <tt>.wve</tt>, <tt>.gsrt</tt>, <tt><span class=\"pre\">.amr-wb</span></tt>, <tt>.prc</tt>, <tt>.sph</tt>, <tt><span class=\"pre\">.amr-nb</span></tt>, <tt>.txw</tt>, <tt>.sndt</tt>, <tt>.vorbis</tt>, <tt>.speex</tt>, <tt>.hcom</tt>, <tt>.wav</tt>, <tt>.aiff</tt>, <tt>.aifc</tt>, <tt>.8svx</tt>, <tt>.maud</tt>, <tt>.xa</tt>, <tt>.au</tt>, <tt>.flac</tt>, <tt>.avr</tt>, <tt>.caf</tt>, <tt>.wv</tt>, <tt>.paf</tt>, <tt>.sf</tt>, <tt>.sox</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 1378900, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "70674c3294dfd0a076c78612bb622ec7", "sha256": "e1a39c871774196f7d7da7c07826934c2c3dc9a68f10bed83cd76908f39526ed"}, "downloads": -1, "filename": "xbob.sox-1.0.0.zip", "has_sig": false, "md5_digest": "70674c3294dfd0a076c78612bb622ec7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 449456, "upload_time": "2013-11-15T15:17:52", "upload_time_iso_8601": "2013-11-15T15:17:52.291285Z", "url": "https://files.pythonhosted.org/packages/48/11/e8b0fe091a7525228f95e7704f8df8c0e9fb8fe02188ce81ea2c84e527de/xbob.sox-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2cc79376e24026a1673ee8cf3f84fa03", "sha256": "ad933c120bc3db3713ceb3210ff55aac89cc0b1b221e1044233ef42533773c22"}, "downloads": -1, "filename": "xbob.sox-1.0.1.zip", "has_sig": false, "md5_digest": "2cc79376e24026a1673ee8cf3f84fa03", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 449773, "upload_time": "2013-11-19T02:17:19", "upload_time_iso_8601": "2013-11-19T02:17:19.220614Z", "url": "https://files.pythonhosted.org/packages/7c/44/43a90344551ed054220de1173953500d9254f428a9031810535c89ca226e/xbob.sox-1.0.1.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "9d7a376681409abe46581c755985d03b", "sha256": "bd7c0ec22148772ee7b1212a5cba641de18ca6f6e281808ce3c2615e52b1111f"}, "downloads": -1, "filename": "xbob.sox-1.1.0.zip", "has_sig": false, "md5_digest": "9d7a376681409abe46581c755985d03b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 450373, "upload_time": "2013-11-19T22:53:40", "upload_time_iso_8601": "2013-11-19T22:53:40.925497Z", "url": "https://files.pythonhosted.org/packages/a7/40/caf347337371145f7f94891dabb59cd3242f96389ddc74488b32a2203102/xbob.sox-1.1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d7a376681409abe46581c755985d03b", "sha256": "bd7c0ec22148772ee7b1212a5cba641de18ca6f6e281808ce3c2615e52b1111f"}, "downloads": -1, "filename": "xbob.sox-1.1.0.zip", "has_sig": false, "md5_digest": "9d7a376681409abe46581c755985d03b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 450373, "upload_time": "2013-11-19T22:53:40", "upload_time_iso_8601": "2013-11-19T22:53:40.925497Z", "url": "https://files.pythonhosted.org/packages/a7/40/caf347337371145f7f94891dabb59cd3242f96389ddc74488b32a2203102/xbob.sox-1.1.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:26:09 2020"}