{"info": {"author": "Robert Cimrman", "author_email": "cimrman3@ntc.zcu.cz", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3"], "description": "soops\n=====\n\nsoops = scoop output of parametric studies\n\nUtilities to run parametric studies in parallel using dask, and to scoop\nthe output files produced by the studies into a pandas dataframe.\n\nInstallation\n------------\n\nThe latest release::\n\n  pip install soops\n\nThe source code of the development version in git::\n\n  git clone https://github.com/rc/soops.git\n  cd soops\n  pip install .\n\nor the development version via pip::\n\n  pip install git+https://github.com/rc/soops.git\n\nTesting\n-------\n\nInstall pytest::\n\n  pip install pytest\n\nInstall `soops` from sources (in the current directory)::\n\n  pip install .\n\nRun the tests::\n\n  pytest .\n\nExample\n-------\n\nBefore we begin - TL;DR:\n\n- Run a script in parallel with many combinations of parameters.\n- Scoop all the results in many output directories into a big ``DataFrame``.\n- Work with the ``DataFrame``.\n\nA Script\n''''''''\n\nSuppose we have a script that takes a number of command line arguments. The\nactual arguments are not so important, neither what the script does.\nNevertheless, to have something to work with, let us simulate the `Monty Hall\nproblem <https://en.wikipedia.org/wiki/Monty_Hall_problem>`_ in Python.\n\nFor the first reading of the example below, it is advisable not to delve in\ndetails of the script outputs and code listings and just read the text to get\nan overall idea. After understanding the idea, return to the details, or just\nhave a look at the `complete example script <examples/monty_hall.py>`_.\n\nThis is our script and its arguments::\n\n  $ python ./examples/monty_hall.py -h\n  usage: monty_hall.py [-h] [--switch] [--host {random,first}] [--num int]\n                       [--repeat int] [--seed int] [--plot-opts dict-like] [-n]\n                       [--silent]\n                       output_dir\n\n  The Monty Hall problem simulator parameterizable with soops.\n\n  https://en.wikipedia.org/wiki/Monty_Hall_problem\n\n  <snip>\n\n  positional arguments:\n    output_dir            output directory\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    --switch              if given, the contestant always switches the door,\n                          otherwise never switches\n    --host {random,first}\n                          the host strategy for opening doors\n    --num int             the number of rounds in a single simulation [default:\n                          100]\n    --repeat int          the number of simulations [default: 5]\n    --seed int            if given, the random seed is fixed to the given value\n    --plot-opts dict-like\n                          matplotlib plot() options [default:\n                          \"linewidth=3,alpha=0.5\"]\n    -n, --no-show         do not call matplotlib show()\n    --silent              do not print messages to screen\n\nBasic Run\n'''''''''\n\nA run with the default parameters::\n\n  $ python examples/monty_hall.py output\n  monty_hall: num: 100\n  monty_hall: repeat: 5\n  monty_hall: switch: False\n  monty_hall: host strategy: random\n  monty_hall: elapsed: 0.004662119084969163\n  monty_hall: win rate: 0.25\n  monty_hall: elapsed: 0.0042096920078620315\n  monty_hall: win rate: 0.3\n  monty_hall: elapsed: 0.003894180990755558\n  monty_hall: win rate: 0.31\n  monty_hall: elapsed: 0.003928505931980908\n  monty_hall: win rate: 0.35\n  monty_hall: elapsed: 0.0035342529881745577\n  monty_hall: win rate: 0.31\n\nproduces some results:\n\n.. image:: doc/readme/wins.png\n   :alt: wins.png\n\nParameterization\n''''''''''''''''\n\nNow we would like to run it for various combinations of arguments and their\nvalues, for example:\n\n- `--num=[100,1000,10000]`\n- `--repeat=[10,20]`\n- `--switch` either given or not\n- `--seed` either given or not, changing together with `--seed`\n- `--host=['random', 'first']`\n\nand then collect and analyze the all results. Doing this manually is quite\ntedious, but `soops` can help.\n\nIn order to run a parametric study, first we have to define a function\ndescribing the arguments of our script:\n\n.. code:: python\n\n   def get_run_info():\n       run_cmd = \"\"\"\n       {python} {script_dir}/monty_hall.py\n       --num={--num} --repeat={--repeat}\n       {output_dir}\n       \"\"\"\n       run_cmd = ' '.join(run_cmd.split())\n\n       # Arguments allowed to be missing in soops-run calls.\n       opt_args = {\n           '--switch' : '--switch',\n           '--host' : '--host={--host}',\n           '--seed' : '--seed={--seed}',\n           '--plot-opts' : '--plot-opts={--plot-opts}',\n           '--no-show' : '--no-show',\n           '--silent' : '--silent',\n       }\n\n       output_dir_key = 'output_dir'\n       is_finished_basename = 'wins.png'\n\n       return run_cmd, opt_args, output_dir_key, is_finished_basename\n\nThe `get_run_info()` functions should provide four items:\n\n#. A command to run given as a string, with the non-optional arguments and\n   their values (if any) given as ``str.format()`` keys.\n\n#. A dictionary of optional arguments and their values (if any) given as\n   ``str.format()`` keys.\n\n#. A special format key, that denotes the output directory argument of the\n   command. Note that the script must have an argument allowing an output\n   directory specification.\n\n#. A function ``is_finished()`` taking the output directory argument that\n   returns True, if the results are already present in that directory. Instead\n   of a function, a file name can be given, as in `get_run_info()` above. Then\n   the existence of a file with the specified name means that the results are\n   present in the directory.\n\nRun Parametric Study\n''''''''''''''''''''\n\nPutting `get_run_info()` into our script allows running a parametric study using\n`soops-run`::\n\n  $ soops-run -h\n  usage: soops-run [-h] [-r {0,1,2}] [-c key1+key2+..., ...] [-n int] [--silent]\n                   [--shell] [-o path]\n                   conf run_mod\n\n  Run parametric studies.\n\n  positional arguments:\n    conf                  a dict-like parametric study configuration\n    run_mod               the importable script/module with get_run_info()\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -r {0,1,2}, --recompute {0,1,2}\n                          recomputation strategy: 0: do not recompute, 1:\n                          recompute only if is_finished() returns False, 2:\n                          always recompute [default: 1]\n    -c key1+key2+..., ..., --contract key1+key2+..., ...\n                          list of option keys that should be contracted to vary\n                          in lockstep\n    -n int, --n-workers int\n                          the number of dask workers [default: 2]\n    --silent              do not print messages to screen\n    --shell               run ipython shell after all computations\n    -o path, --output-dir path\n                          output directory [default: output]\n\nIn our case (the arguments with no value (flags) can be specified either as\n``'@defined'`` or ``'@undefined'``)::\n\n  soops-run -r 1 -n 3 -c='--switch + --seed' -o output \"python='python3', output_dir='output/study/%s', --num=[100,1000,10000], --repeat=[10,20], --switch=['@undefined', '@defined', '@undefined', '@defined'], --seed=['@undefined', '@undefined', 12345, 12345], --host=['random', 'first'], --silent=@defined, --no-show=@defined\" examples/monty_hall.py\n\nThis command runs our script using three dask workers (``-n 3`` option) and\nproduces a directory for each parameter set::\n\n  $ ls output/study/\n  0_0_0_0_0_0_0_0_0/  0_0_1_1_0_0_0_0_0/  1_0_0_0_0_0_0_0_0/  1_0_1_1_0_0_0_0_0/\n  0_0_0_0_1_0_1_0_0/  0_0_1_1_1_0_1_0_0/  1_0_0_0_1_0_1_0_0/  1_0_1_1_1_0_1_0_0/\n  0_0_0_0_2_0_2_0_0/  0_0_1_1_2_0_2_0_0/  1_0_0_0_2_0_2_0_0/  1_0_1_1_2_0_2_0_0/\n  0_0_0_0_3_0_3_0_0/  0_0_1_1_3_0_3_0_0/  1_0_0_0_3_0_3_0_0/  1_0_1_1_3_0_3_0_0/\n  0_0_0_1_0_0_0_0_0/  0_0_2_0_0_0_0_0_0/  1_0_0_1_0_0_0_0_0/  1_0_2_0_0_0_0_0_0/\n  0_0_0_1_1_0_1_0_0/  0_0_2_0_1_0_1_0_0/  1_0_0_1_1_0_1_0_0/  1_0_2_0_1_0_1_0_0/\n  0_0_0_1_2_0_2_0_0/  0_0_2_0_2_0_2_0_0/  1_0_0_1_2_0_2_0_0/  1_0_2_0_2_0_2_0_0/\n  0_0_0_1_3_0_3_0_0/  0_0_2_0_3_0_3_0_0/  1_0_0_1_3_0_3_0_0/  1_0_2_0_3_0_3_0_0/\n  0_0_1_0_0_0_0_0_0/  0_0_2_1_0_0_0_0_0/  1_0_1_0_0_0_0_0_0/  1_0_2_1_0_0_0_0_0/\n  0_0_1_0_1_0_1_0_0/  0_0_2_1_1_0_1_0_0/  1_0_1_0_1_0_1_0_0/  1_0_2_1_1_0_1_0_0/\n  0_0_1_0_2_0_2_0_0/  0_0_2_1_2_0_2_0_0/  1_0_1_0_2_0_2_0_0/  1_0_2_1_2_0_2_0_0/\n  0_0_1_0_3_0_3_0_0/  0_0_2_1_3_0_3_0_0/  1_0_1_0_3_0_3_0_0/  1_0_2_1_3_0_3_0_0/\n\nIn each directory, there are three files::\n\n  $ ls output/study/0_0_0_0_0_0_0_0_0/\n  options.txt  output_log.txt  wins.png\n\njust like in the basic run above. Our example script stores the values of\ncommand line arguments in ``options.txt`` for possible re-runs and inspection::\n\n  $ cat output/study/0_0_0_0_0_0_0_0_0/options.txt\n\n  command line\n  ------------\n\n  \"examples/monty_hall.py\" \"--num=100\" \"--repeat=10\" \"output/study/0_0_0_0_0_0_0_0_0\" \"--host=random\" \"--no-show\" \"--silent\"\n\n  options\n  -------\n\n  host: random\n  num: 100\n  output_dir: output/study/0_0_0_0_0_0_0_0_0\n  plot_opts: {'linewidth': 3, 'alpha': 0.5}\n  repeat: 10\n  seed: None\n  show: False\n  silent: True\n  switch: False\n\nScoop Outputs of the Parametric Study\n'''''''''''''''''''''''''''''''''''''\n\nIn order to use ``soops-scoop`` to scoop/collect outputs of our parametric\nstudy, a new function needs to be defined:\n\n.. code:: python\n\n   import soops.scoop_outputs as sc\n\n   def get_scoop_info():\n       info = [\n           ('options.txt', partial(\n               sc.load_split_options,\n               split_keys=None,\n           )),\n           ('output_log.txt', scrape_output),\n       ]\n\n       return info\n\nThe function for loading the ``'options.txt'`` files is already in `soops`, the\nfunction to get useful information from ``'output_log.txt'`` needs to be\nprovided:\n\n.. code:: python\n\n   def scrape_output(filename, rdata=None):\n       out = {}\n       with open(filename, 'r') as fd:\n           repeat = rdata['repeat']\n           for ii in range(4):\n               next(fd)\n\n           elapsed = []\n           win_rate = []\n           for ii in range(repeat):\n               line = next(fd).split()\n               elapsed.append(float(line[-1]))\n               line = next(fd).split()\n               win_rate.append(float(line[-1]))\n\n           out['elapsed'] = np.array(elapsed)\n           out['win_rate'] = np.array(win_rate)\n\n       return out\n\nThen we are ready to run ``soops-scoop``::\n\n  $ soops-scoop -h\n  usage: soops-scoop [-h] [-s column[,columns,...]] [-r filename] [--no-plugins]\n                     [--use-plugins name[,name,...] | --omit-plugins\n                     name[,name,...]] [-p module] [--shell] [-o path]\n                     scoop_mod directories [directories ...]\n\n  Scoop output files.\n\n  positional arguments:\n    scoop_mod             the importable script/module with get_scoop_info()\n    directories           results directories\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -s column[,columns,...], --sort column[,columns,...]\n                          column keys for sorting of DataFrame rows\n    -r filename, --results filename\n                          reuse previously scooped results file\n    --no-plugins          do not call post-processing plugins\n    --use-plugins name[,name,...]\n                          use only the named plugins (no effect with --no-\n                          plugins)\n    --omit-plugins name[,name,...]\n                          omit the named plugins (no effect with --no-plugins)\n    -p module, --plugin-mod module\n                          if given, the module that has get_plugin_info()\n                          instead of scoop_mod\n    --shell               run ipython shell after all computations\n    -o path, --output-dir path\n                          output directory [default: .]\n\nas follows::\n\n  $ soops-scoop examples/monty_hall.py output/study/ -s rdir -o output/study --no-plugins --shell\n\n  <snip>\n\n  Python 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)\n  Type 'copyright', 'credits' or 'license' for more information\n  IPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.\n\n  In [1]: df.keys()\n  Out[1]:\n  Index(['rdir', 'host', 'num', 'output_dir', 'plot_opts', 'repeat', 'seed',\n         'show', 'silent', 'switch', 'elapsed', 'win_rate', 'time'],\n        dtype='object')\n\n  In [2]: df.win_rate.head()\n  Out[2]:\n  0    [0.35, 0.28, 0.26, 0.41, 0.32, 0.37, 0.29, 0.3...\n  1    [0.59, 0.65, 0.67, 0.73, 0.72, 0.74, 0.69, 0.6...\n  2    [0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3...\n  3    [0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.6...\n  4    [0.34, 0.35, 0.31, 0.32, 0.38, 0.31, 0.42, 0.3...\n  Name: win_rate, dtype: object\n\n  In [3]: df.iloc[0]\n  Out[3]:\n  rdir            ~/projects/soops/output/study/0_0_0_0_0_0_0_0_0\n  host                                                     random\n  num                                                         100\n  output_dir                       output/study/0_0_0_0_0_0_0_0_0\n  plot_opts                        {'linewidth': 3, 'alpha': 0.5}\n  repeat                                                       10\n  seed                                                        NaN\n  show                                                      False\n  silent                                                     True\n  switch                                                    False\n  elapsed       [0.004276808933354914, 0.003945986973121762, 0...\n  win_rate      [0.35, 0.28, 0.26, 0.41, 0.32, 0.37, 0.29, 0.3...\n  time                                 2020-04-01 19:04:34.712128\n  Name: 0, dtype: object\n\nThe ``DataFrame`` with the all results is saved in ``output/study/results.h5``\nfor reuse.\n\nPost-processing Plugins\n'''''''''''''''''''''''\n\nIt is also possible to define simple plugins that act on the resulting\n``DataFrame``. First, define a function that will register the plugins:\n\n.. code:: python\n\n   def get_plugin_info():\n       from soops.plugins import show_figures\n\n       info = [plot_win_rates, show_figures]\n\n       return info\n\nThe ``show_figures()`` plugin is defined in `soops`. The ``plot_win_rates()``\nplugin allows plotting the all results combined:\n\n.. code:: python\n\n   def plot_win_rates(df, data=None):\n       import soops.plot_selected as sps\n\n       df = df.copy()\n       df['seed'] = df['seed'].where(df['seed'].notnull(), -1)\n\n       omit = {'win_rate', 'output_dir', 'elapsed'}\n       uniques = sc.get_parametric_uniques(df, omit=omit)\n       for key, val in uniques.items():\n           output(key, val)\n\n       selected = sps.normalize_selected(uniques)\n\n       styles = {key : {} for key in selected.keys()}\n       styles['seed'] = {'alpha' : [0.9, 0.1]}\n       styles['num'] = {'color' : 'viridis'}\n       styles['repeat'] = {'lw' : np.linspace(3, 2,\n                                              len(selected.get('repeat', [1])))}\n       styles['host'] = {'ls' : ['-', ':']}\n       styles['switch'] = {'marker' : ['x', 'o'], 'mfc' : 'None', 'ms' : 10}\n\n       styles = sps.setup_plot_styles(selected, styles)\n\n       fig, ax = plt.subplots()\n       sps.plot_selected(ax, df, 'win_rate', selected, {}, styles)\n       fig.tight_layout()\n       fig.savefig(os.path.join(data.output_dir, 'win_rates.png'))\n\n       return data\n\nThen, running::\n\n  soops-scoop examples/monty_hall.py output/study/ -s rdir -o output/study -r output/study/results.h5\n\nreuses the ``results.h5`` file and plots the combined results:\n\n.. image:: doc/readme/win_rates.png\n   :alt: win_rates.png\n\nNotes\n'''''\n\n- The `get_run_info()`, `get_scoop_info()` and `get_plugin_info()` info\n  function can be in different modules.\n- The script that is being parameterized need not be a Python module - any\n  executable which can be run from a command line can be used.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rc/soops", "keywords": "run parametric studies,scoop output", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "soops", "package_url": "https://pypi.org/project/soops/", "platform": "", "project_url": "https://pypi.org/project/soops/", "project_urls": {"Homepage": "https://github.com/rc/soops"}, "release_url": "https://pypi.org/project/soops/2020.1/", "requires_dist": ["pyparsing", "dask", "distributed", "pandas", "tables", "matplotlib"], "requires_python": ">=3.5", "summary": "Run parametric studies and scoop output files.", "version": "2020.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>soops = scoop output of parametric studies</p>\n<p>Utilities to run parametric studies in parallel using dask, and to scoop\nthe output files produced by the studies into a pandas dataframe.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest release:</p>\n<pre>pip install soops\n</pre>\n<p>The source code of the development version in git:</p>\n<pre>git clone https://github.com/rc/soops.git\ncd soops\npip install .\n</pre>\n<p>or the development version via pip:</p>\n<pre>pip install git+https://github.com/rc/soops.git\n</pre>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Install pytest:</p>\n<pre>pip install pytest\n</pre>\n<p>Install <cite>soops</cite> from sources (in the current directory):</p>\n<pre>pip install .\n</pre>\n<p>Run the tests:</p>\n<pre>pytest .\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Before we begin - TL;DR:</p>\n<ul>\n<li>Run a script in parallel with many combinations of parameters.</li>\n<li>Scoop all the results in many output directories into a big <tt>DataFrame</tt>.</li>\n<li>Work with the <tt>DataFrame</tt>.</li>\n</ul>\n<div id=\"a-script\">\n<h3>A Script</h3>\n<p>Suppose we have a script that takes a number of command line arguments. The\nactual arguments are not so important, neither what the script does.\nNevertheless, to have something to work with, let us simulate the <a href=\"https://en.wikipedia.org/wiki/Monty_Hall_problem\" rel=\"nofollow\">Monty Hall\nproblem</a> in Python.</p>\n<p>For the first reading of the example below, it is advisable not to delve in\ndetails of the script outputs and code listings and just read the text to get\nan overall idea. After understanding the idea, return to the details, or just\nhave a look at the <a href=\"examples/monty_hall.py\" rel=\"nofollow\">complete example script</a>.</p>\n<p>This is our script and its arguments:</p>\n<pre>$ python ./examples/monty_hall.py -h\nusage: monty_hall.py [-h] [--switch] [--host {random,first}] [--num int]\n                     [--repeat int] [--seed int] [--plot-opts dict-like] [-n]\n                     [--silent]\n                     output_dir\n\nThe Monty Hall problem simulator parameterizable with soops.\n\nhttps://en.wikipedia.org/wiki/Monty_Hall_problem\n\n&lt;snip&gt;\n\npositional arguments:\n  output_dir            output directory\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --switch              if given, the contestant always switches the door,\n                        otherwise never switches\n  --host {random,first}\n                        the host strategy for opening doors\n  --num int             the number of rounds in a single simulation [default:\n                        100]\n  --repeat int          the number of simulations [default: 5]\n  --seed int            if given, the random seed is fixed to the given value\n  --plot-opts dict-like\n                        matplotlib plot() options [default:\n                        \"linewidth=3,alpha=0.5\"]\n  -n, --no-show         do not call matplotlib show()\n  --silent              do not print messages to screen\n</pre>\n</div>\n<div id=\"basic-run\">\n<h3>Basic Run</h3>\n<p>A run with the default parameters:</p>\n<pre>$ python examples/monty_hall.py output\nmonty_hall: num: 100\nmonty_hall: repeat: 5\nmonty_hall: switch: False\nmonty_hall: host strategy: random\nmonty_hall: elapsed: 0.004662119084969163\nmonty_hall: win rate: 0.25\nmonty_hall: elapsed: 0.0042096920078620315\nmonty_hall: win rate: 0.3\nmonty_hall: elapsed: 0.003894180990755558\nmonty_hall: win rate: 0.31\nmonty_hall: elapsed: 0.003928505931980908\nmonty_hall: win rate: 0.35\nmonty_hall: elapsed: 0.0035342529881745577\nmonty_hall: win rate: 0.31\n</pre>\n<p>produces some results:</p>\n<img alt=\"wins.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a29d31a066e738b64e5b5123e8e5d23fe4b6ed0/646f632f726561646d652f77696e732e706e67\">\n</div>\n<div id=\"parameterization\">\n<h3>Parameterization</h3>\n<p>Now we would like to run it for various combinations of arguments and their\nvalues, for example:</p>\n<ul>\n<li><cite>\u2013num=[100,1000,10000]</cite></li>\n<li><cite>\u2013repeat=[10,20]</cite></li>\n<li><cite>\u2013switch</cite> either given or not</li>\n<li><cite>\u2013seed</cite> either given or not, changing together with <cite>\u2013seed</cite></li>\n<li><cite>\u2013host=[\u2018random\u2019, \u2018first\u2019]</cite></li>\n</ul>\n<p>and then collect and analyze the all results. Doing this manually is quite\ntedious, but <cite>soops</cite> can help.</p>\n<p>In order to run a parametric study, first we have to define a function\ndescribing the arguments of our script:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_run_info</span><span class=\"p\">():</span>\n    <span class=\"n\">run_cmd</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n    </span><span class=\"si\">{python}</span><span class=\"s2\"> </span><span class=\"si\">{script_dir}</span><span class=\"s2\">/monty_hall.py\n    --num={--num} --repeat={--repeat}\n    </span><span class=\"si\">{output_dir}</span><span class=\"s2\">\n    \"\"\"</span>\n    <span class=\"n\">run_cmd</span> <span class=\"o\">=</span> <span class=\"s1\">' '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">run_cmd</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># Arguments allowed to be missing in soops-run calls.</span>\n    <span class=\"n\">opt_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'--switch'</span> <span class=\"p\">:</span> <span class=\"s1\">'--switch'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--host'</span> <span class=\"p\">:</span> <span class=\"s1\">'--host={--host}'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--seed'</span> <span class=\"p\">:</span> <span class=\"s1\">'--seed={--seed}'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--plot-opts'</span> <span class=\"p\">:</span> <span class=\"s1\">'--plot-opts={--plot-opts}'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--no-show'</span> <span class=\"p\">:</span> <span class=\"s1\">'--no-show'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'--silent'</span> <span class=\"p\">:</span> <span class=\"s1\">'--silent'</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">output_dir_key</span> <span class=\"o\">=</span> <span class=\"s1\">'output_dir'</span>\n    <span class=\"n\">is_finished_basename</span> <span class=\"o\">=</span> <span class=\"s1\">'wins.png'</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">run_cmd</span><span class=\"p\">,</span> <span class=\"n\">opt_args</span><span class=\"p\">,</span> <span class=\"n\">output_dir_key</span><span class=\"p\">,</span> <span class=\"n\">is_finished_basename</span>\n</pre>\n<p>The <cite>get_run_info()</cite> functions should provide four items:</p>\n<ol>\n<li>A command to run given as a string, with the non-optional arguments and\ntheir values (if any) given as <tt>str.format()</tt> keys.</li>\n<li>A dictionary of optional arguments and their values (if any) given as\n<tt>str.format()</tt> keys.</li>\n<li>A special format key, that denotes the output directory argument of the\ncommand. Note that the script must have an argument allowing an output\ndirectory specification.</li>\n<li>A function <tt>is_finished()</tt> taking the output directory argument that\nreturns True, if the results are already present in that directory. Instead\nof a function, a file name can be given, as in <cite>get_run_info()</cite> above. Then\nthe existence of a file with the specified name means that the results are\npresent in the directory.</li>\n</ol>\n</div>\n<div id=\"run-parametric-study\">\n<h3>Run Parametric Study</h3>\n<p>Putting <cite>get_run_info()</cite> into our script allows running a parametric study using\n<cite>soops-run</cite>:</p>\n<pre>$ soops-run -h\nusage: soops-run [-h] [-r {0,1,2}] [-c key1+key2+..., ...] [-n int] [--silent]\n                 [--shell] [-o path]\n                 conf run_mod\n\nRun parametric studies.\n\npositional arguments:\n  conf                  a dict-like parametric study configuration\n  run_mod               the importable script/module with get_run_info()\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -r {0,1,2}, --recompute {0,1,2}\n                        recomputation strategy: 0: do not recompute, 1:\n                        recompute only if is_finished() returns False, 2:\n                        always recompute [default: 1]\n  -c key1+key2+..., ..., --contract key1+key2+..., ...\n                        list of option keys that should be contracted to vary\n                        in lockstep\n  -n int, --n-workers int\n                        the number of dask workers [default: 2]\n  --silent              do not print messages to screen\n  --shell               run ipython shell after all computations\n  -o path, --output-dir path\n                        output directory [default: output]\n</pre>\n<p>In our case (the arguments with no value (flags) can be specified either as\n<tt>'@defined'</tt> or <tt>'@undefined'</tt>):</p>\n<pre>soops-run -r 1 -n 3 -c='--switch + --seed' -o output \"python='python3', output_dir='output/study/%s', --num=[100,1000,10000], --repeat=[10,20], --switch=['@undefined', '@defined', '@undefined', '@defined'], --seed=['@undefined', '@undefined', 12345, 12345], --host=['random', 'first'], --silent=@defined, --no-show=@defined\" examples/monty_hall.py\n</pre>\n<p>This command runs our script using three dask workers (<tt><span class=\"pre\">-n</span> 3</tt> option) and\nproduces a directory for each parameter set:</p>\n<pre>$ ls output/study/\n0_0_0_0_0_0_0_0_0/  0_0_1_1_0_0_0_0_0/  1_0_0_0_0_0_0_0_0/  1_0_1_1_0_0_0_0_0/\n0_0_0_0_1_0_1_0_0/  0_0_1_1_1_0_1_0_0/  1_0_0_0_1_0_1_0_0/  1_0_1_1_1_0_1_0_0/\n0_0_0_0_2_0_2_0_0/  0_0_1_1_2_0_2_0_0/  1_0_0_0_2_0_2_0_0/  1_0_1_1_2_0_2_0_0/\n0_0_0_0_3_0_3_0_0/  0_0_1_1_3_0_3_0_0/  1_0_0_0_3_0_3_0_0/  1_0_1_1_3_0_3_0_0/\n0_0_0_1_0_0_0_0_0/  0_0_2_0_0_0_0_0_0/  1_0_0_1_0_0_0_0_0/  1_0_2_0_0_0_0_0_0/\n0_0_0_1_1_0_1_0_0/  0_0_2_0_1_0_1_0_0/  1_0_0_1_1_0_1_0_0/  1_0_2_0_1_0_1_0_0/\n0_0_0_1_2_0_2_0_0/  0_0_2_0_2_0_2_0_0/  1_0_0_1_2_0_2_0_0/  1_0_2_0_2_0_2_0_0/\n0_0_0_1_3_0_3_0_0/  0_0_2_0_3_0_3_0_0/  1_0_0_1_3_0_3_0_0/  1_0_2_0_3_0_3_0_0/\n0_0_1_0_0_0_0_0_0/  0_0_2_1_0_0_0_0_0/  1_0_1_0_0_0_0_0_0/  1_0_2_1_0_0_0_0_0/\n0_0_1_0_1_0_1_0_0/  0_0_2_1_1_0_1_0_0/  1_0_1_0_1_0_1_0_0/  1_0_2_1_1_0_1_0_0/\n0_0_1_0_2_0_2_0_0/  0_0_2_1_2_0_2_0_0/  1_0_1_0_2_0_2_0_0/  1_0_2_1_2_0_2_0_0/\n0_0_1_0_3_0_3_0_0/  0_0_2_1_3_0_3_0_0/  1_0_1_0_3_0_3_0_0/  1_0_2_1_3_0_3_0_0/\n</pre>\n<p>In each directory, there are three files:</p>\n<pre>$ ls output/study/0_0_0_0_0_0_0_0_0/\noptions.txt  output_log.txt  wins.png\n</pre>\n<p>just like in the basic run above. Our example script stores the values of\ncommand line arguments in <tt>options.txt</tt> for possible re-runs and inspection:</p>\n<pre>$ cat output/study/0_0_0_0_0_0_0_0_0/options.txt\n\ncommand line\n------------\n\n\"examples/monty_hall.py\" \"--num=100\" \"--repeat=10\" \"output/study/0_0_0_0_0_0_0_0_0\" \"--host=random\" \"--no-show\" \"--silent\"\n\noptions\n-------\n\nhost: random\nnum: 100\noutput_dir: output/study/0_0_0_0_0_0_0_0_0\nplot_opts: {'linewidth': 3, 'alpha': 0.5}\nrepeat: 10\nseed: None\nshow: False\nsilent: True\nswitch: False\n</pre>\n</div>\n<div id=\"scoop-outputs-of-the-parametric-study\">\n<h3>Scoop Outputs of the Parametric Study</h3>\n<p>In order to use <tt><span class=\"pre\">soops-scoop</span></tt> to scoop/collect outputs of our parametric\nstudy, a new function needs to be defined:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">soops.scoop_outputs</span> <span class=\"k\">as</span> <span class=\"nn\">sc</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_scoop_info</span><span class=\"p\">():</span>\n    <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'options.txt'</span><span class=\"p\">,</span> <span class=\"n\">partial</span><span class=\"p\">(</span>\n            <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">load_split_options</span><span class=\"p\">,</span>\n            <span class=\"n\">split_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'output_log.txt'</span><span class=\"p\">,</span> <span class=\"n\">scrape_output</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">info</span>\n</pre>\n<p>The function for loading the <tt>'options.txt'</tt> files is already in <cite>soops</cite>, the\nfunction to get useful information from <tt>'output_log.txt'</tt> needs to be\nprovided:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">scrape_output</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">rdata</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">repeat</span> <span class=\"o\">=</span> <span class=\"n\">rdata</span><span class=\"p\">[</span><span class=\"s1\">'repeat'</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ii</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n            <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n        <span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">win_rate</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">ii</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">repeat</span><span class=\"p\">):</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n            <span class=\"n\">elapsed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n            <span class=\"n\">win_rate</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"s1\">'elapsed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">elapsed</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span><span class=\"p\">[</span><span class=\"s1\">'win_rate'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">win_rate</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n</pre>\n<p>Then we are ready to run <tt><span class=\"pre\">soops-scoop</span></tt>:</p>\n<pre>$ soops-scoop -h\nusage: soops-scoop [-h] [-s column[,columns,...]] [-r filename] [--no-plugins]\n                   [--use-plugins name[,name,...] | --omit-plugins\n                   name[,name,...]] [-p module] [--shell] [-o path]\n                   scoop_mod directories [directories ...]\n\nScoop output files.\n\npositional arguments:\n  scoop_mod             the importable script/module with get_scoop_info()\n  directories           results directories\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s column[,columns,...], --sort column[,columns,...]\n                        column keys for sorting of DataFrame rows\n  -r filename, --results filename\n                        reuse previously scooped results file\n  --no-plugins          do not call post-processing plugins\n  --use-plugins name[,name,...]\n                        use only the named plugins (no effect with --no-\n                        plugins)\n  --omit-plugins name[,name,...]\n                        omit the named plugins (no effect with --no-plugins)\n  -p module, --plugin-mod module\n                        if given, the module that has get_plugin_info()\n                        instead of scoop_mod\n  --shell               run ipython shell after all computations\n  -o path, --output-dir path\n                        output directory [default: .]\n</pre>\n<p>as follows:</p>\n<pre>$ soops-scoop examples/monty_hall.py output/study/ -s rdir -o output/study --no-plugins --shell\n\n&lt;snip&gt;\n\nPython 3.7.3 | packaged by conda-forge | (default, Jul  1 2019, 21:52:21)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.13.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: df.keys()\nOut[1]:\nIndex(['rdir', 'host', 'num', 'output_dir', 'plot_opts', 'repeat', 'seed',\n       'show', 'silent', 'switch', 'elapsed', 'win_rate', 'time'],\n      dtype='object')\n\nIn [2]: df.win_rate.head()\nOut[2]:\n0    [0.35, 0.28, 0.26, 0.41, 0.32, 0.37, 0.29, 0.3...\n1    [0.59, 0.65, 0.67, 0.73, 0.72, 0.74, 0.69, 0.6...\n2    [0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.32, 0.3...\n3    [0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.6...\n4    [0.34, 0.35, 0.31, 0.32, 0.38, 0.31, 0.42, 0.3...\nName: win_rate, dtype: object\n\nIn [3]: df.iloc[0]\nOut[3]:\nrdir            ~/projects/soops/output/study/0_0_0_0_0_0_0_0_0\nhost                                                     random\nnum                                                         100\noutput_dir                       output/study/0_0_0_0_0_0_0_0_0\nplot_opts                        {'linewidth': 3, 'alpha': 0.5}\nrepeat                                                       10\nseed                                                        NaN\nshow                                                      False\nsilent                                                     True\nswitch                                                    False\nelapsed       [0.004276808933354914, 0.003945986973121762, 0...\nwin_rate      [0.35, 0.28, 0.26, 0.41, 0.32, 0.37, 0.29, 0.3...\ntime                                 2020-04-01 19:04:34.712128\nName: 0, dtype: object\n</pre>\n<p>The <tt>DataFrame</tt> with the all results is saved in <tt>output/study/results.h5</tt>\nfor reuse.</p>\n</div>\n<div id=\"post-processing-plugins\">\n<h3>Post-processing Plugins</h3>\n<p>It is also possible to define simple plugins that act on the resulting\n<tt>DataFrame</tt>. First, define a function that will register the plugins:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_plugin_info</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">soops.plugins</span> <span class=\"kn\">import</span> <span class=\"n\">show_figures</span>\n\n    <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">plot_win_rates</span><span class=\"p\">,</span> <span class=\"n\">show_figures</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">info</span>\n</pre>\n<p>The <tt>show_figures()</tt> plugin is defined in <cite>soops</cite>. The <tt>plot_win_rates()</tt>\nplugin allows plotting the all results combined:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">plot_win_rates</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">soops.plot_selected</span> <span class=\"k\">as</span> <span class=\"nn\">sps</span>\n\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'seed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'seed'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'seed'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">notnull</span><span class=\"p\">(),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">omit</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'win_rate'</span><span class=\"p\">,</span> <span class=\"s1\">'output_dir'</span><span class=\"p\">,</span> <span class=\"s1\">'elapsed'</span><span class=\"p\">}</span>\n    <span class=\"n\">uniques</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">get_parametric_uniques</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">omit</span><span class=\"o\">=</span><span class=\"n\">omit</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">uniques</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">output</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n\n    <span class=\"n\">selected</span> <span class=\"o\">=</span> <span class=\"n\">sps</span><span class=\"o\">.</span><span class=\"n\">normalize_selected</span><span class=\"p\">(</span><span class=\"n\">uniques</span><span class=\"p\">)</span>\n\n    <span class=\"n\">styles</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">key</span> <span class=\"p\">:</span> <span class=\"p\">{}</span> <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">selected</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()}</span>\n    <span class=\"n\">styles</span><span class=\"p\">[</span><span class=\"s1\">'seed'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'alpha'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">]}</span>\n    <span class=\"n\">styles</span><span class=\"p\">[</span><span class=\"s1\">'num'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'color'</span> <span class=\"p\">:</span> <span class=\"s1\">'viridis'</span><span class=\"p\">}</span>\n    <span class=\"n\">styles</span><span class=\"p\">[</span><span class=\"s1\">'repeat'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'lw'</span> <span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                                           <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">selected</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'repeat'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])))}</span>\n    <span class=\"n\">styles</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'ls'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">':'</span><span class=\"p\">]}</span>\n    <span class=\"n\">styles</span><span class=\"p\">[</span><span class=\"s1\">'switch'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'marker'</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">],</span> <span class=\"s1\">'mfc'</span> <span class=\"p\">:</span> <span class=\"s1\">'None'</span><span class=\"p\">,</span> <span class=\"s1\">'ms'</span> <span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">}</span>\n\n    <span class=\"n\">styles</span> <span class=\"o\">=</span> <span class=\"n\">sps</span><span class=\"o\">.</span><span class=\"n\">setup_plot_styles</span><span class=\"p\">(</span><span class=\"n\">selected</span><span class=\"p\">,</span> <span class=\"n\">styles</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n    <span class=\"n\">sps</span><span class=\"o\">.</span><span class=\"n\">plot_selected</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">'win_rate'</span><span class=\"p\">,</span> <span class=\"n\">selected</span><span class=\"p\">,</span> <span class=\"p\">{},</span> <span class=\"n\">styles</span><span class=\"p\">)</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">tight_layout</span><span class=\"p\">()</span>\n    <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"s1\">'win_rates.png'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">data</span>\n</pre>\n<p>Then, running:</p>\n<pre>soops-scoop examples/monty_hall.py output/study/ -s rdir -o output/study -r output/study/results.h5\n</pre>\n<p>reuses the <tt>results.h5</tt> file and plots the combined results:</p>\n<img alt=\"win_rates.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f79eadb7f3748aaa3ca7332712f8a158495a38e/646f632f726561646d652f77696e5f72617465732e706e67\">\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<ul>\n<li>The <cite>get_run_info()</cite>, <cite>get_scoop_info()</cite> and <cite>get_plugin_info()</cite> info\nfunction can be in different modules.</li>\n<li>The script that is being parameterized need not be a Python module - any\nexecutable which can be run from a command line can be used.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7120875, "releases": {"2020.1": [{"comment_text": "", "digests": {"md5": "715576df3e9cbd7300818ac759e06cd0", "sha256": "1cca8b4af2a06a0ac9b84bf79c281f086a04828c222af5e77878be7572d985bc"}, "downloads": -1, "filename": "soops-2020.1-py3-none-any.whl", "has_sig": false, "md5_digest": "715576df3e9cbd7300818ac759e06cd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20093, "upload_time": "2020-04-28T14:48:19", "upload_time_iso_8601": "2020-04-28T14:48:19.867806Z", "url": "https://files.pythonhosted.org/packages/60/cc/f1157158ff64c6fd14b6f6d85038f929ed321e41870f3e495237c8a7c3cf/soops-2020.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7abed5312992ddf468873c41593738d", "sha256": "ccd62e5f8515dfc462211f6102349ec1df7243be5309355dd59894315a3e072c"}, "downloads": -1, "filename": "soops-2020.1.tar.gz", "has_sig": false, "md5_digest": "e7abed5312992ddf468873c41593738d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25416, "upload_time": "2020-04-28T14:48:21", "upload_time_iso_8601": "2020-04-28T14:48:21.541806Z", "url": "https://files.pythonhosted.org/packages/fc/a5/01240ca5155a6f73d35bfae309e7ec5be7d98e35625f2dd0c44f704d1262/soops-2020.1.tar.gz", "yanked": false}], "2020.1rc1": [{"comment_text": "", "digests": {"md5": "3d30718e2d3658e1b3ec8a123eefc306", "sha256": "4c9948b494550b6c475a2e128b57bbc41e6776ad591aa7f635fb29d999818997"}, "downloads": -1, "filename": "soops-2020.1rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d30718e2d3658e1b3ec8a123eefc306", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12429, "upload_time": "2020-03-12T16:26:03", "upload_time_iso_8601": "2020-03-12T16:26:03.591680Z", "url": "https://files.pythonhosted.org/packages/6a/af/0b9906a6819cf09d0ffd11324eb303ccacef26e15012b5bb12671dd30ef7/soops-2020.1rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f888f46d5d059f113f3afd61a33523d6", "sha256": "888c9ced540a46dea33efcc4f85f85f18e4836084bb2e9c663e89757cd470119"}, "downloads": -1, "filename": "soops-2020.1rc1.tar.gz", "has_sig": false, "md5_digest": "f888f46d5d059f113f3afd61a33523d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9358, "upload_time": "2020-03-12T16:26:05", "upload_time_iso_8601": "2020-03-12T16:26:05.681674Z", "url": "https://files.pythonhosted.org/packages/8a/04/7e67f9ba41685b04ee4286d4a24dc13fdcb8db8b334e46b52e95f60567c2/soops-2020.1rc1.tar.gz", "yanked": false}], "2020.1rc2": [{"comment_text": "", "digests": {"md5": "9c15c4ac1677299efa15ec9725eafbf0", "sha256": "865139b7613e7fa9e2eac0ba53118484447fdbbf34e2e2a91c5f5b7ad9c98447"}, "downloads": -1, "filename": "soops-2020.1rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "9c15c4ac1677299efa15ec9725eafbf0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19287, "upload_time": "2020-04-01T22:07:56", "upload_time_iso_8601": "2020-04-01T22:07:56.331868Z", "url": "https://files.pythonhosted.org/packages/5a/34/b993fd29aa71f203d1f0e5e4bbfefd4d282893892fb89c9090158bebcca1/soops-2020.1rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "828088634fb7570fbf6df08ef6048e26", "sha256": "5f78f169449e1d41c512d599419895f6cab060e4219b6db9af8f01d54708f425"}, "downloads": -1, "filename": "soops-2020.1rc2.tar.gz", "has_sig": false, "md5_digest": "828088634fb7570fbf6df08ef6048e26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24539, "upload_time": "2020-04-01T22:07:57", "upload_time_iso_8601": "2020-04-01T22:07:57.982103Z", "url": "https://files.pythonhosted.org/packages/b1/93/9e88938b451b0771548ab07c6c037a1bbf5f699d9d31770a91e63b37883d/soops-2020.1rc2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "715576df3e9cbd7300818ac759e06cd0", "sha256": "1cca8b4af2a06a0ac9b84bf79c281f086a04828c222af5e77878be7572d985bc"}, "downloads": -1, "filename": "soops-2020.1-py3-none-any.whl", "has_sig": false, "md5_digest": "715576df3e9cbd7300818ac759e06cd0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20093, "upload_time": "2020-04-28T14:48:19", "upload_time_iso_8601": "2020-04-28T14:48:19.867806Z", "url": "https://files.pythonhosted.org/packages/60/cc/f1157158ff64c6fd14b6f6d85038f929ed321e41870f3e495237c8a7c3cf/soops-2020.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7abed5312992ddf468873c41593738d", "sha256": "ccd62e5f8515dfc462211f6102349ec1df7243be5309355dd59894315a3e072c"}, "downloads": -1, "filename": "soops-2020.1.tar.gz", "has_sig": false, "md5_digest": "e7abed5312992ddf468873c41593738d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25416, "upload_time": "2020-04-28T14:48:21", "upload_time_iso_8601": "2020-04-28T14:48:21.541806Z", "url": "https://files.pythonhosted.org/packages/fc/a5/01240ca5155a6f73d35bfae309e7ec5be7d98e35625f2dd0c44f704d1262/soops-2020.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:35 2020"}