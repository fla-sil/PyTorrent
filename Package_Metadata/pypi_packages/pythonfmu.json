{"info": {"author": "NTNU-IHB", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: C++", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering"], "description": "# PythonFMU\n\n> A lightweight framework that enables the packaging of Python 3 code or CSV files as co-simulation FMUs (following FMI version 2.0).\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/NTNU-IHB/PythonFMU/issues)\n\n[![CI](https://github.com/NTNU-IHB/PythonFMU/workflows/CI/badge.svg)](https://github.com/NTNU-IHB/PythonFMU/actions?query=workflow%3ACI)\n[![PyPI](https://img.shields.io/pypi/v/pythonfmu)](https://pypi.org/project/pythonfmu/)\n[![Conda Version](https://img.shields.io/conda/vn/conda-forge/pythonfmu.svg)](https://anaconda.org/conda-forge/pythonfmu)\n\n[![Gitter](https://badges.gitter.im/NTNU-IHB/FMI4j.svg)](https://gitter.im/NTNU-IHB/PythonFMU?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n### How do I build an FMU from python code?\n\n1. Install `pythonfmu` package:\n\n```bash\npip install pythonfmu\n```\n\n2. Create a new class extending the `Fmi2Slave` class declared in the `pythonfmu.fmi2slave` module (see below for an example).\n3. Run `pythonfmu build` to create the fmu.\n\n```\nusage: pythonfmu build [-h] -f SCRIPT_FILE [-d DEST] [--doc DOCUMENTATION_FOLDER] [--no-external-tool]\n                       [--no-variable-step] [--interpolate-inputs] [--only-one-per-process] [--handle-state]\n                       [--serialize-state] [--use-memory-management]\n                       [Project files [Project files ...]]\n\nBuild an FMU from a Python script.\n\npositional arguments:\n  Project files         Additional project files required by the Python script.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f SCRIPT_FILE, --file SCRIPT_FILE\n                        Path to the Python script.\n  -d DEST, --dest DEST  Where to save the FMU.\n  --doc DOCUMENTATION_FOLDER\n                        Documentation folder to include in the FMU.\n  --no-external-tool    If given, needsExecutionTool=false\n  --no-variable-step    If given, canHandleVariableCommunicationStepSize=false\n  --interpolate-inputs  If given, canInterpolateInputs=true\n  --only-one-per-process\n                        If given, canBeInstantiatedOnlyOncePerProcess=true\n  --handle-state        If given, canGetAndSetFMUstate=true\n  --serialize-state     If given, canSerializeFMUstate=true\n  --use-memory-management\n                        If given, canNotUseMemoryManagementFunctions=false\n```\n\n### How do I build an FMU from python code with third-party dependencies?\n\nOften, Python scripts depends on non-builtin libraries like `numpy`, `scipy`, etc.\n_PythonFMU_ does not package a full environment within the FMU.\nHowever you can package a `requirements.txt` or `environment.yml` file within your FMU following these steps:\n\n1. Install _pythonfmu_ package: `pip install pythonfmu`\n2. Create a new class extending the `Fmi2Slave` class declared in the `pythonfmu.fmi2slave` module (see below for an example).\n3. Create a `requirements.txt` file (to use _pip_ manager) and/or a `environment.yml` file (to use _conda_ manager) that defines your dependencies.\n4. Run `pythonfmu build -f myscript.py requirements.txt` to create the fmu including the dependencies file.\n\nAnd using `pythonfmu deploy`, end users will be able to update their local Python environment. The steps to achieve that:\n\n1. Install _pythonfmu_ package: `pip install pythonfmu`\n2. Be sure to be in the Python environment to be updated. Then execute `pythonfmu deploy -f my.fmu`\n\n```\nusage: pythonfmu deploy [-h] -f FMU [-e ENVIRONMENT] [{pip,conda}]\n\nDeploy a Python FMU. The command will look in the `resources` folder for one of the following files:\n`requirements.txt` or `environment.yml`. If you specify a environment file but no package manager, `conda` will be selected for `.yaml` and `.yml` otherwise `pip` will be used. The tool assume the Python environment in which the FMU should be executed is the current one.\n\npositional arguments:\n  {pip,conda}           Python packages manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FMU, --file FMU    Path to the Python FMU.\n  -e ENVIRONMENT, --env ENVIRONMENT\n                        Requirements or environment file.\n```\n\n### Example:\n\n#### Write the script\n\n```python\n\nfrom pythonfmu import Fmi2Causality, Fmi2Slave, Boolean, Integer, Real, String\n\n\nclass PythonSlave(Fmi2Slave):\n\n    author = \"John Doe\"\n    description = \"A simple description\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        self.intOut = 1\n        self.realOut = 3.0\n        self.booleanVariable = True\n        self.stringVariable = \"Hello World!\"\n        self.register_variable(Integer(\"intOut\", causality=Fmi2Causality.output))\n        self.register_variable(Real(\"realOut\", causality=Fmi2Causality.output))\n        self.register_variable(Boolean(\"booleanVariable\", causality=Fmi2Causality.local))\n        self.register_variable(String(\"stringVariable\", causality=Fmi2Causality.local))\n\n    def do_step(self, current_time, step_size):\n        return True\n\n```\n\n#### Create the FMU\n\n```\npythonfmu build -f pythonslave.py myproject\n```\n\nIn this example a python class named `PythonSlave` that extends `Fmi2Slave` is declared in a file named `pythonslave.py`,\nwhere `myproject` is an optional folder containing additional project files required by the python script.\nProject folders such as this will be recursively copied into the FMU. Multiple project files/folders may be added.\n\n### Test it online\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/NTNU-IHB/PythonFMU/master?urlpath=lab/tree/examples/demo.ipynb)\n\n### Note\n\nPythonFMU does not bundle Python, which makes it a tool coupling solution.\nThis means that you can not expect the generated FMU to work on a different system (The system would need a compatible Python version and libraries).\nBut to ease its usage the wrapper uses the limited Python API, making the pre-built binaries for Linux and Windows 64-bits\ncompatible with any Python 3 environment. If you need to compile the wrapper for a specific configuration,\nyou will need CMake and a C++ compiler. The commands for building the wrapper on Linux and on Windows can be seen in\nthe [GitHub workflow](./.github/workflows/main.yml).\n\nPythonFMU does not automatically resolve 3rd party dependencies. If your code includes e.g. `numpy`, the target system also needs to have `numpy` installed.\n\n---\n\nWould you rather build FMUs in Java? Check out [FMI4j](https://github.com/NTNU-IHB/FMI4j)!  \nNeed to distribute your FMUs? [FMU-proxy](https://github.com/NTNU-IHB/FMU-proxy) to the rescue!\n\n### Credits\n\nThis works has been possible thanks to the contributions of @markaren from NTNU-IHB and @fcollonval from Safran SA.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NTNU-IHB/PythonFMU", "keywords": "FMI", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pythonfmu", "package_url": "https://pypi.org/project/pythonfmu/", "platform": "", "project_url": "https://pypi.org/project/pythonfmu/", "project_urls": {"Homepage": "https://github.com/NTNU-IHB/PythonFMU"}, "release_url": "https://pypi.org/project/pythonfmu/0.6.0/", "requires_dist": ["pytest ; extra == 'tests'", "pyfmi ; extra == 'tests'", "fmpy ; extra == 'tests'"], "requires_python": "", "summary": "A lightweight framework that enables the packaging of Python3.x code as co-simulation FMUs.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PythonFMU</h1>\n<blockquote>\n<p>A lightweight framework that enables the packaging of Python 3 code or CSV files as co-simulation FMUs (following FMI version 2.0).</p>\n</blockquote>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://github.com/NTNU-IHB/PythonFMU/issues\" rel=\"nofollow\"><img alt=\"contributions welcome\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/793ef3fadef48113e66f3c652ebc9b591bcb1745/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c6174\"></a></p>\n<p><a href=\"https://github.com/NTNU-IHB/PythonFMU/actions?query=workflow%3ACI\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3a20837b649a728b7a73000b7d07320e0ec0c09/68747470733a2f2f6769746875622e636f6d2f4e544e552d4948422f507974686f6e464d552f776f726b666c6f77732f43492f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/pythonfmu/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5807bda423808a5fbfdfa157fbce54cb7fe851a4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e666d75\"></a>\n<a href=\"https://anaconda.org/conda-forge/pythonfmu\" rel=\"nofollow\"><img alt=\"Conda Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0520c789e85e9ec1d04b4fbc63381f9894261389/68747470733a2f2f696d672e736869656c64732e696f2f636f6e64612f766e2f636f6e64612d666f7267652f707974686f6e666d752e737667\"></a></p>\n<p><a href=\"https://gitter.im/NTNU-IHB/PythonFMU?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34e7d52945771cb8c8c7f690344421fb40ae625c/68747470733a2f2f6261646765732e6769747465722e696d2f4e544e552d4948422f464d49346a2e737667\"></a></p>\n<h3>How do I build an FMU from python code?</h3>\n<ol>\n<li>Install <code>pythonfmu</code> package:</li>\n</ol>\n<pre>pip install pythonfmu\n</pre>\n<ol>\n<li>Create a new class extending the <code>Fmi2Slave</code> class declared in the <code>pythonfmu.fmi2slave</code> module (see below for an example).</li>\n<li>Run <code>pythonfmu build</code> to create the fmu.</li>\n</ol>\n<pre><code>usage: pythonfmu build [-h] -f SCRIPT_FILE [-d DEST] [--doc DOCUMENTATION_FOLDER] [--no-external-tool]\n                       [--no-variable-step] [--interpolate-inputs] [--only-one-per-process] [--handle-state]\n                       [--serialize-state] [--use-memory-management]\n                       [Project files [Project files ...]]\n\nBuild an FMU from a Python script.\n\npositional arguments:\n  Project files         Additional project files required by the Python script.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f SCRIPT_FILE, --file SCRIPT_FILE\n                        Path to the Python script.\n  -d DEST, --dest DEST  Where to save the FMU.\n  --doc DOCUMENTATION_FOLDER\n                        Documentation folder to include in the FMU.\n  --no-external-tool    If given, needsExecutionTool=false\n  --no-variable-step    If given, canHandleVariableCommunicationStepSize=false\n  --interpolate-inputs  If given, canInterpolateInputs=true\n  --only-one-per-process\n                        If given, canBeInstantiatedOnlyOncePerProcess=true\n  --handle-state        If given, canGetAndSetFMUstate=true\n  --serialize-state     If given, canSerializeFMUstate=true\n  --use-memory-management\n                        If given, canNotUseMemoryManagementFunctions=false\n</code></pre>\n<h3>How do I build an FMU from python code with third-party dependencies?</h3>\n<p>Often, Python scripts depends on non-builtin libraries like <code>numpy</code>, <code>scipy</code>, etc.\n<em>PythonFMU</em> does not package a full environment within the FMU.\nHowever you can package a <code>requirements.txt</code> or <code>environment.yml</code> file within your FMU following these steps:</p>\n<ol>\n<li>Install <em>pythonfmu</em> package: <code>pip install pythonfmu</code></li>\n<li>Create a new class extending the <code>Fmi2Slave</code> class declared in the <code>pythonfmu.fmi2slave</code> module (see below for an example).</li>\n<li>Create a <code>requirements.txt</code> file (to use <em>pip</em> manager) and/or a <code>environment.yml</code> file (to use <em>conda</em> manager) that defines your dependencies.</li>\n<li>Run <code>pythonfmu build -f myscript.py requirements.txt</code> to create the fmu including the dependencies file.</li>\n</ol>\n<p>And using <code>pythonfmu deploy</code>, end users will be able to update their local Python environment. The steps to achieve that:</p>\n<ol>\n<li>Install <em>pythonfmu</em> package: <code>pip install pythonfmu</code></li>\n<li>Be sure to be in the Python environment to be updated. Then execute <code>pythonfmu deploy -f my.fmu</code></li>\n</ol>\n<pre><code>usage: pythonfmu deploy [-h] -f FMU [-e ENVIRONMENT] [{pip,conda}]\n\nDeploy a Python FMU. The command will look in the `resources` folder for one of the following files:\n`requirements.txt` or `environment.yml`. If you specify a environment file but no package manager, `conda` will be selected for `.yaml` and `.yml` otherwise `pip` will be used. The tool assume the Python environment in which the FMU should be executed is the current one.\n\npositional arguments:\n  {pip,conda}           Python packages manager\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f FMU, --file FMU    Path to the Python FMU.\n  -e ENVIRONMENT, --env ENVIRONMENT\n                        Requirements or environment file.\n</code></pre>\n<h3>Example:</h3>\n<h4>Write the script</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythonfmu</span> <span class=\"kn\">import</span> <span class=\"n\">Fmi2Causality</span><span class=\"p\">,</span> <span class=\"n\">Fmi2Slave</span><span class=\"p\">,</span> <span class=\"n\">Boolean</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">Real</span><span class=\"p\">,</span> <span class=\"n\">String</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PythonSlave</span><span class=\"p\">(</span><span class=\"n\">Fmi2Slave</span><span class=\"p\">):</span>\n\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s2\">\"John Doe\"</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"A simple description\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intOut</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">realOut</span> <span class=\"o\">=</span> <span class=\"mf\">3.0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">booleanVariable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stringVariable</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello World!\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_variable</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"s2\">\"intOut\"</span><span class=\"p\">,</span> <span class=\"n\">causality</span><span class=\"o\">=</span><span class=\"n\">Fmi2Causality</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_variable</span><span class=\"p\">(</span><span class=\"n\">Real</span><span class=\"p\">(</span><span class=\"s2\">\"realOut\"</span><span class=\"p\">,</span> <span class=\"n\">causality</span><span class=\"o\">=</span><span class=\"n\">Fmi2Causality</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_variable</span><span class=\"p\">(</span><span class=\"n\">Boolean</span><span class=\"p\">(</span><span class=\"s2\">\"booleanVariable\"</span><span class=\"p\">,</span> <span class=\"n\">causality</span><span class=\"o\">=</span><span class=\"n\">Fmi2Causality</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">register_variable</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">(</span><span class=\"s2\">\"stringVariable\"</span><span class=\"p\">,</span> <span class=\"n\">causality</span><span class=\"o\">=</span><span class=\"n\">Fmi2Causality</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_step</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">current_time</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n<h4>Create the FMU</h4>\n<pre><code>pythonfmu build -f pythonslave.py myproject\n</code></pre>\n<p>In this example a python class named <code>PythonSlave</code> that extends <code>Fmi2Slave</code> is declared in a file named <code>pythonslave.py</code>,\nwhere <code>myproject</code> is an optional folder containing additional project files required by the python script.\nProject folders such as this will be recursively copied into the FMU. Multiple project files/folders may be added.</p>\n<h3>Test it online</h3>\n<p><a href=\"https://mybinder.org/v2/gh/NTNU-IHB/PythonFMU/master?urlpath=lab/tree/examples/demo.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h3>Note</h3>\n<p>PythonFMU does not bundle Python, which makes it a tool coupling solution.\nThis means that you can not expect the generated FMU to work on a different system (The system would need a compatible Python version and libraries).\nBut to ease its usage the wrapper uses the limited Python API, making the pre-built binaries for Linux and Windows 64-bits\ncompatible with any Python 3 environment. If you need to compile the wrapper for a specific configuration,\nyou will need CMake and a C++ compiler. The commands for building the wrapper on Linux and on Windows can be seen in\nthe <a href=\"./.github/workflows/main.yml\" rel=\"nofollow\">GitHub workflow</a>.</p>\n<p>PythonFMU does not automatically resolve 3rd party dependencies. If your code includes e.g. <code>numpy</code>, the target system also needs to have <code>numpy</code> installed.</p>\n<hr>\n<p>Would you rather build FMUs in Java? Check out <a href=\"https://github.com/NTNU-IHB/FMI4j\" rel=\"nofollow\">FMI4j</a>!<br>\nNeed to distribute your FMUs? <a href=\"https://github.com/NTNU-IHB/FMU-proxy\" rel=\"nofollow\">FMU-proxy</a> to the rescue!</p>\n<h3>Credits</h3>\n<p>This works has been possible thanks to the contributions of @markaren from NTNU-IHB and @fcollonval from Safran SA.</p>\n\n          </div>"}, "last_serial": 6911171, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "80deb81b68db8904dae181bf784e6171", "sha256": "e43ae5db78f56d6c271c7f02c82663c9d013a03b13a2e52535e22fe332952dd5"}, "downloads": -1, "filename": "pythonfmu-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "80deb81b68db8904dae181bf784e6171", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 214684, "upload_time": "2020-02-12T09:02:40", "upload_time_iso_8601": "2020-02-12T09:02:40.292346Z", "url": "https://files.pythonhosted.org/packages/85/09/c7c8be3e92e909622293e6ac841dde9d6f9a499cb4606bf3865297d46672/pythonfmu-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a19b1a251a71278d258af35ce013e6d0", "sha256": "e8789f32ca0422aac4d59735b5ad2189e6372816d73c4fd4e00878026163a0f7"}, "downloads": -1, "filename": "pythonfmu-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a19b1a251a71278d258af35ce013e6d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 199062, "upload_time": "2020-02-12T09:02:42", "upload_time_iso_8601": "2020-02-12T09:02:42.434138Z", "url": "https://files.pythonhosted.org/packages/de/42/155cf9f4a6d424e2785d3d41b9a8c8fc795c8c9f0c7d2517432a85e6b428/pythonfmu-0.3.0.tar.gz", "yanked": false}], "0.3.0a0": [{"comment_text": "", "digests": {"md5": "b9f2cf520a3f25d633ad17bc92eaf1b6", "sha256": "f380a8c41aa0abfafdf3f93dc58b4d750e63ca0d0f527300de069d34370f8308"}, "downloads": -1, "filename": "pythonfmu-0.3.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "b9f2cf520a3f25d633ad17bc92eaf1b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 212848, "upload_time": "2020-02-10T12:56:56", "upload_time_iso_8601": "2020-02-10T12:56:56.684903Z", "url": "https://files.pythonhosted.org/packages/6b/42/d8c2f2e0e9fd4df0798d9ceb965b7c49755ee10f1b4044e99ccbbb0d2f34/pythonfmu-0.3.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a22b7a356b706b6ed5faaaf77f72078", "sha256": "87bcacec0f8cb781d0295902293a8975c910b4a1cb399198bd5b7031ab2e603e"}, "downloads": -1, "filename": "pythonfmu-0.3.0a0.tar.gz", "has_sig": false, "md5_digest": "8a22b7a356b706b6ed5faaaf77f72078", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 202847, "upload_time": "2020-02-10T12:56:59", "upload_time_iso_8601": "2020-02-10T12:56:59.546709Z", "url": "https://files.pythonhosted.org/packages/1f/4a/4b28ab154eeac467700717e6fca9576f738637db77b8eccd4877e31fac5a/pythonfmu-0.3.0a0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "92b1b75e67acbe84e1ecfc1875657abf", "sha256": "cbb811e6d9f0812e1d5bf476e3d3f46d7516bf50ed1717baefeabd0e117b1dff"}, "downloads": -1, "filename": "pythonfmu-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "92b1b75e67acbe84e1ecfc1875657abf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 225449, "upload_time": "2020-02-18T19:46:41", "upload_time_iso_8601": "2020-02-18T19:46:41.208362Z", "url": "https://files.pythonhosted.org/packages/30/e4/8f804a4af53ffe8343f5b30b13e970fda2430320a8475cc02f9cb0aaa7e3/pythonfmu-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1627e4d1f6b21be963d7bc7a78c597a", "sha256": "f11b42c144ddf7f82fa19f8c248abb2ed84807c011d6f85743e25f1f825fbb7e"}, "downloads": -1, "filename": "pythonfmu-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d1627e4d1f6b21be963d7bc7a78c597a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 216456, "upload_time": "2020-02-18T19:46:43", "upload_time_iso_8601": "2020-02-18T19:46:43.738534Z", "url": "https://files.pythonhosted.org/packages/a5/86/f190566243955f56609d664d3efbb3827fe657d2a91d66afa076b9645fd5/pythonfmu-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "543600e22757c682a5c7a3ec0bfcd0a4", "sha256": "5c0af04b6fca0cf08d8f3c5f1c4f2c0fd99e586f649a65bcdb3f79974a4fc1f1"}, "downloads": -1, "filename": "pythonfmu-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "543600e22757c682a5c7a3ec0bfcd0a4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 316062, "upload_time": "2020-02-23T14:33:54", "upload_time_iso_8601": "2020-02-23T14:33:54.758784Z", "url": "https://files.pythonhosted.org/packages/96/74/526c7a327324c230dc11bbe9a02ecc5a732c33e35dabc76e21de18295c80/pythonfmu-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b37397766b9ab0698e5e2743c80c401", "sha256": "4afb4f5bd6eefbf6b3cff6814373b4f9250d4c41ad4a612aec4e5c6b5e4ef58b"}, "downloads": -1, "filename": "pythonfmu-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8b37397766b9ab0698e5e2743c80c401", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 298835, "upload_time": "2020-02-23T14:33:57", "upload_time_iso_8601": "2020-02-23T14:33:57.436418Z", "url": "https://files.pythonhosted.org/packages/34/94/f4ea2e8e6a0f91c0d5cf29756084a965e0489a991cfdaf10521ffc7c8cfc/pythonfmu-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "2ca7c48f08a7e2a171f945909c3e0484", "sha256": "19fceb33aee9866daa969ff6e04c50256a57bb6904df032bee20cdb97bf90768"}, "downloads": -1, "filename": "pythonfmu-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ca7c48f08a7e2a171f945909c3e0484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 328840, "upload_time": "2020-03-30T07:48:52", "upload_time_iso_8601": "2020-03-30T07:48:52.093505Z", "url": "https://files.pythonhosted.org/packages/c5/9a/6f60d4a7cfe382f123d388c6bcba87288a9228b8a6cf425f13be049fc745/pythonfmu-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1497f864d625e5be02f4796167d77ff6", "sha256": "0e6bbc5d28ba6fc52714dbabc3bfa73d3c2941e6757c5f5a186d352263806725"}, "downloads": -1, "filename": "pythonfmu-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1497f864d625e5be02f4796167d77ff6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 316391, "upload_time": "2020-03-30T07:48:53", "upload_time_iso_8601": "2020-03-30T07:48:53.421729Z", "url": "https://files.pythonhosted.org/packages/0f/a0/69448655476928d7ba4850fcb7ea10cfb09ca98abf554453ebffc2252133/pythonfmu-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2ca7c48f08a7e2a171f945909c3e0484", "sha256": "19fceb33aee9866daa969ff6e04c50256a57bb6904df032bee20cdb97bf90768"}, "downloads": -1, "filename": "pythonfmu-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ca7c48f08a7e2a171f945909c3e0484", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 328840, "upload_time": "2020-03-30T07:48:52", "upload_time_iso_8601": "2020-03-30T07:48:52.093505Z", "url": "https://files.pythonhosted.org/packages/c5/9a/6f60d4a7cfe382f123d388c6bcba87288a9228b8a6cf425f13be049fc745/pythonfmu-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1497f864d625e5be02f4796167d77ff6", "sha256": "0e6bbc5d28ba6fc52714dbabc3bfa73d3c2941e6757c5f5a186d352263806725"}, "downloads": -1, "filename": "pythonfmu-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1497f864d625e5be02f4796167d77ff6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 316391, "upload_time": "2020-03-30T07:48:53", "upload_time_iso_8601": "2020-03-30T07:48:53.421729Z", "url": "https://files.pythonhosted.org/packages/0f/a0/69448655476928d7ba4850fcb7ea10cfb09ca98abf554453ebffc2252133/pythonfmu-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:36 2020"}