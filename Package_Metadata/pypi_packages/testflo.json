{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython"], "description": "usage: testflo [options]\n\n        positional arguments:\n          test                  A test method, test case, module, or directory to run.\n\n        optional arguments:\n          -h, --help            show this help message and exit\n          -c FILE, --config FILE\n                                Path of config file where preferences are specified.\n          -t FILE, --testfile FILE\n                                Path to a file containing one testspec per line.\n          --maxtime TIME_LIMIT  Specifies a time limit in seconds for tests to be\n                                saved to the quicktests.in file.\n          -n NUM_PROCS, --numprocs NUM_PROCS\n                                Number of processes to run. By default, this will use\n                                the number of CPUs available. To force serial\n                                execution, specify a value of 1.\n          -o FILE, --outfile FILE\n                                Name of test report file. Default is\n                                testflo_report.out.\n          -v, --verbose         Include testspec and elapsed time in screen output.\n                                Also shows all stderr output, even if test doesn't\n                                fail\n          --compact             Limit output to a single character for each test.\n          --dryrun              Don't actually run tests, but print which tests would\n                                have been run.\n          --pre_announce        Announce the name of each test before it runs. This\n                                can help track down a hanging test. This automatically\n                                sets -n 1.\n          -f, --fail            Save failed tests to failtests.in file.\n          --full_path           Display full test specs instead of shortened names.\n          -i, --isolated        Run each test in a separate subprocess.\n          --nompi               Force all tests to run without MPI. This can be useful\n                                for debugging.\n          -x, --stop            Stop after the first test failure, or as soon as\n                                possible when running concurrent tests.\n          -s, --nocapture       Standard output (stdout) will not be captured and will\n                                be written to the screen immediately.\n          --coverage            Perform coverage analysis and display results on\n                                stdout\n          --coverage-html       Perform coverage analysis and display results in\n                                browser\n          --coverpkg PKG        Add the given package to the coverage list. You can\n                                use this option multiple times to cover multiple\n                                packages.\n          --cover-omit FILE     Add a file name pattern to remove it from coverage.\n          -b, --benchmark       Specifies that benchmarks are to be run rather than\n                                tests, so only files starting with \"benchmark\\_\" will\n                                be executed.\n          -d FILE, --datafile FILE\n                                Name of benchmark data file. Default is\n                                benchmark_data.csv.\n          --noreport            Don't create a test results file.\n          -m GLOB, --match GLOB, --testmatch GLOB\n                                Pattern to use for test discovery. Multiple patterns\n                                are allowed.\n          --timeout TIMEOUT     Timeout in seconds. Test will be terminated if it\n                                takes longer than timeout. Only works for tests\n                                running in a subprocess (MPI and isolated).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "testflo", "package_url": "https://pypi.org/project/testflo/", "platform": "", "project_url": "https://pypi.org/project/testflo/", "project_urls": null, "release_url": "https://pypi.org/project/testflo/1.4.1/", "requires_dist": null, "requires_python": "", "summary": "A simple flow-based testing framework", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>usage: testflo [options]</p>\n<blockquote>\n<dl>\n<dt>positional arguments:</dt>\n<dd>test                  A test method, test case, module, or directory to run.</dd>\n<dt>optional arguments:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c <var>FILE</var></span>, <span class=\"option\">--config <var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Path of config file where preferences are specified.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-t <var>FILE</var></span>, <span class=\"option\">--testfile <var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Path to a file containing one testspec per line.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--maxtime <var>TIME_LIMIT</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Specifies a time limit in seconds for tests to be\nsaved to the quicktests.in file.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-n <var>NUM_PROCS</var></span>, <span class=\"option\">--numprocs <var>NUM_PROCS</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Number of processes to run. By default, this will use\nthe number of CPUs available. To force serial\nexecution, specify a value of 1.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-o <var>FILE</var></span>, <span class=\"option\">--outfile <var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Name of test report file. Default is\ntestflo_report.out.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--verbose</span></kbd></td>\n<td>Include testspec and elapsed time in screen output.\nAlso shows all stderr output, even if test doesn\u2019t\nfail</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--compact</span></kbd></td>\n<td>Limit output to a single character for each test.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--dryrun</span></kbd></td>\n<td>Don\u2019t actually run tests, but print which tests would\nhave been run.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--pre_announce</span></kbd></td>\n<td>Announce the name of each test before it runs. This\ncan help track down a hanging test. This automatically\nsets -n 1.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-f</span>, <span class=\"option\">--fail</span></kbd></td>\n<td>Save failed tests to failtests.in file.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--full_path</span></kbd></td>\n<td>Display full test specs instead of shortened names.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-i</span>, <span class=\"option\">--isolated</span></kbd></td>\n<td>Run each test in a separate subprocess.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--nompi</span></kbd></td>\n<td>Force all tests to run without MPI. This can be useful\nfor debugging.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-x</span>, <span class=\"option\">--stop</span></kbd></td>\n<td>Stop after the first test failure, or as soon as\npossible when running concurrent tests.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s</span>, <span class=\"option\">--nocapture</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Standard output (stdout) will not be captured and will\nbe written to the screen immediately.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--coverage</span></kbd></td>\n<td>Perform coverage analysis and display results on\nstdout</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--coverage-html</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Perform coverage analysis and display results in\nbrowser</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--coverpkg <var>PKG</var></span></kbd></td>\n<td>Add the given package to the coverage list. You can\nuse this option multiple times to cover multiple\npackages.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--cover-omit <var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Add a file name pattern to remove it from coverage.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-b</span>, <span class=\"option\">--benchmark</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Specifies that benchmarks are to be run rather than\ntests, so only files starting with \u201cbenchmark_\u201d will\nbe executed.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-d <var>FILE</var></span>, <span class=\"option\">--datafile <var>FILE</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Name of benchmark data file. Default is\nbenchmark_data.csv.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--noreport</span></kbd></td>\n<td>Don\u2019t create a test results file.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-m <var>GLOB</var></span>, <span class=\"option\">--match <var>GLOB</var></span>, <span class=\"option\">--testmatch <var>GLOB</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Pattern to use for test discovery. Multiple patterns\nare allowed.</td></tr>\n<tr><td>\n<kbd><span class=\"option\">--timeout <var>TIMEOUT</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>Timeout in seconds. Test will be terminated if it\ntakes longer than timeout. Only works for tests\nrunning in a subprocess (MPI and isolated).</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</blockquote>\n\n          </div>"}, "last_serial": 6719678, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3b7214df0502c5d485296a4e24063d6f", "sha256": "d2191b51dd7af996108b965e0ba9eb70e1f44be0a6c2afafdb2034e88207457f"}, "downloads": -1, "filename": "testflo-1.0.tar.gz", "has_sig": false, "md5_digest": "3b7214df0502c5d485296a4e24063d6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14171, "upload_time": "2016-08-24T18:57:23", "upload_time_iso_8601": "2016-08-24T18:57:23.881292Z", "url": "https://files.pythonhosted.org/packages/3f/41/664e0f061a2ad6a0fb52cd615a45d757b99270f370421e98c6d6645b661b/testflo-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "220a5119bc82c0003f81e21de6cb2328", "sha256": "ab8717dac0c92473322f5db50c1f3fd9939da51c3d76191204b88de827967ce4"}, "downloads": -1, "filename": "testflo-1.1.tar.gz", "has_sig": false, "md5_digest": "220a5119bc82c0003f81e21de6cb2328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16115, "upload_time": "2016-09-28T17:08:55", "upload_time_iso_8601": "2016-09-28T17:08:55.514854Z", "url": "https://files.pythonhosted.org/packages/e9/a9/399d9b716aefd3fec9c1f1864ce95fa520f4c4235cbb9ebe36b2febbcb59/testflo-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "9253d885337638c50644de63d896b2c4", "sha256": "3d35830cb4ec03cc02592ec2b259dd81f49a60380004e5312442e1c89378f74e"}, "downloads": -1, "filename": "testflo-1.2.tar.gz", "has_sig": false, "md5_digest": "9253d885337638c50644de63d896b2c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16116, "upload_time": "2017-01-30T21:00:29", "upload_time_iso_8601": "2017-01-30T21:00:29.521240Z", "url": "https://files.pythonhosted.org/packages/de/a5/0fda04c759910fef89f3e2f22d597c2ab1fd2a753b580418354150b00fa1/testflo-1.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f3dd2109cb930e924b8d40ff76ef9705", "sha256": "bba885ce04d1e54702244b82f01bfe8f22c08788847f16c64681de47d27319c9"}, "downloads": -1, "filename": "testflo-1.3.0.tar.gz", "has_sig": false, "md5_digest": "f3dd2109cb930e924b8d40ff76ef9705", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19913, "upload_time": "2018-07-17T14:38:17", "upload_time_iso_8601": "2018-07-17T14:38:17.298279Z", "url": "https://files.pythonhosted.org/packages/85/ff/b2dbd33451c97fe3f40161a2832f593d55b193e3e68e65c6f704c5beddf0/testflo-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "adba5b54aceceb16c16f7ecad9796061", "sha256": "d20274dce2bfb1bc09539c04489fd03533a50b90ac1af2b89b9f4d41134d5821"}, "downloads": -1, "filename": "testflo-1.3.1.tar.gz", "has_sig": false, "md5_digest": "adba5b54aceceb16c16f7ecad9796061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21580, "upload_time": "2018-08-17T14:33:29", "upload_time_iso_8601": "2018-08-17T14:33:29.477878Z", "url": "https://files.pythonhosted.org/packages/9f/ab/bcbf82b407468f8a878d3c6a6b93ca1508ca7dee12b3b6950571d3215f8b/testflo-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "879fc84e5c0a49527ca2c67f87398314", "sha256": "9a0eeb6a852aae6f16843860d798c00c5dbce789188f0eb0a4eaa76313c71e41"}, "downloads": -1, "filename": "testflo-1.3.2.tar.gz", "has_sig": false, "md5_digest": "879fc84e5c0a49527ca2c67f87398314", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21696, "upload_time": "2018-11-30T18:06:35", "upload_time_iso_8601": "2018-11-30T18:06:35.871620Z", "url": "https://files.pythonhosted.org/packages/82/6e/fd560f39b89668357c124234caac025d6484b81c2d7855352c722dda8eac/testflo-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "1a3ec4da0ff28a20c1ab693a5aff572f", "sha256": "eb85ced4370f388d803a6dd2ea34ef8593d4a18dde63d6f023ef4957304e5db5"}, "downloads": -1, "filename": "testflo-1.3.3.tar.gz", "has_sig": false, "md5_digest": "1a3ec4da0ff28a20c1ab693a5aff572f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21714, "upload_time": "2018-12-03T17:30:28", "upload_time_iso_8601": "2018-12-03T17:30:28.713787Z", "url": "https://files.pythonhosted.org/packages/2a/21/ee955e4052423aa2eb8bd2c00f82a2549abe8ecece34fd5cd6ccc0b0cc2e/testflo-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "1f875471d2b6fe82d9ba5cf37870650b", "sha256": "2572d26be18918a48e336f235885f29c6378963e2151f431e4325b09e132143f"}, "downloads": -1, "filename": "testflo-1.3.4.tar.gz", "has_sig": false, "md5_digest": "1f875471d2b6fe82d9ba5cf37870650b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21673, "upload_time": "2018-12-06T15:34:36", "upload_time_iso_8601": "2018-12-06T15:34:36.887488Z", "url": "https://files.pythonhosted.org/packages/1e/33/5cb399de0e85852d021ccb37d6b29eb3bf2786c4356020135b312dc92c33/testflo-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "24c379f63fe6d06897d3fb2476089bb5", "sha256": "8a927348d49cbdb49142ff6868a0459a5ee2995f0ebc89f5bd3792e9041c17aa"}, "downloads": -1, "filename": "testflo-1.3.5.tar.gz", "has_sig": false, "md5_digest": "24c379f63fe6d06897d3fb2476089bb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23012, "upload_time": "2020-01-06T19:06:30", "upload_time_iso_8601": "2020-01-06T19:06:30.790781Z", "url": "https://files.pythonhosted.org/packages/be/a9/8ba3bdffb16a10789efe34fa16de650316ff46497bf7b2b7de5c6d8c6e67/testflo-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "bc7aa96562d7f9f3fa512bcf047734a9", "sha256": "bf6df831832f0d5165009d7af55ca29dc3882629b4fd314ff05601ad15473d95"}, "downloads": -1, "filename": "testflo-1.3.6.tar.gz", "has_sig": false, "md5_digest": "bc7aa96562d7f9f3fa512bcf047734a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23893, "upload_time": "2020-02-13T16:46:44", "upload_time_iso_8601": "2020-02-13T16:46:44.210383Z", "url": "https://files.pythonhosted.org/packages/4a/2f/9f6fcce590b3dd90b5b11fa3372c93229e1169f9cdd3191e332aa4878ba0/testflo-1.3.6.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d1a5144ba3cae1a60803c0f1328814a9", "sha256": "293376d47216c0ced2c0fa0810e21f2aa9ad6e195af36b37c1f3bbe440655bad"}, "downloads": -1, "filename": "testflo-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d1a5144ba3cae1a60803c0f1328814a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23085, "upload_time": "2020-02-28T13:49:25", "upload_time_iso_8601": "2020-02-28T13:49:25.377017Z", "url": "https://files.pythonhosted.org/packages/b2/da/f79b49737176a4be6acb847c55545d725c9042c7563ce65fe251f0a7aabd/testflo-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "7082433eb1c58201a2c2ca5236763cae", "sha256": "5c0e34d211b9129c1b0542884d95d1b388cf48b68a2a67f16ba23cb086551310"}, "downloads": -1, "filename": "testflo-1.4.1.tar.gz", "has_sig": false, "md5_digest": "7082433eb1c58201a2c2ca5236763cae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23887, "upload_time": "2020-02-28T18:45:59", "upload_time_iso_8601": "2020-02-28T18:45:59.847956Z", "url": "https://files.pythonhosted.org/packages/d8/73/c93f4bc1d99560ff666ea4438784c577057569cc0931b3346e66a27a92f0/testflo-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7082433eb1c58201a2c2ca5236763cae", "sha256": "5c0e34d211b9129c1b0542884d95d1b388cf48b68a2a67f16ba23cb086551310"}, "downloads": -1, "filename": "testflo-1.4.1.tar.gz", "has_sig": false, "md5_digest": "7082433eb1c58201a2c2ca5236763cae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23887, "upload_time": "2020-02-28T18:45:59", "upload_time_iso_8601": "2020-02-28T18:45:59.847956Z", "url": "https://files.pythonhosted.org/packages/d8/73/c93f4bc1d99560ff666ea4438784c577057569cc0931b3346e66a27a92f0/testflo-1.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:35 2020"}