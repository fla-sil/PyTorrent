{"info": {"author": "Awes Mubarak", "author_email": "contact@awesmubarak.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Text Processing :: Markup"], "description": "# Markdown_strings package\n\nMarkdown is a markup language with plain text formatting syntax. This package\nallows the creation of markdown-compliant strings. The following is a summary\nof features with usage examples.\n\nNote: asterisk and underscores are escaped for all functions that do not format\nto code (`inline_code` and `code_block`).\n\n## Installation\n\nTo install from pypi run\n\n```sh\npip install markdown_strings\n```\n\n## Standard markdown features\n\n### Header\n\nReturn a header of specified level.\n\nKeyword arguments:\n\n-   style -- Specifies the header style (default atx). The \"atx\" style uses\n    hash signs, and has 6 levels. The \"setext\" style uses dashes or equals\n    signs for headers of levels 1 and 2 respectively, and is limited to\n    those two levels. The number of dashes or equals signs is either the length\n    of the text, or 3.\n\nSpecifying a level outside of the style's range results in a ValueError.\n\n```python\n>>> header(\"Main Title\", 1)\n'# Main Title'\n>>> header(\"Smaller subtitle\", 4)\n'#### Smaller subtitle'\n>>> header(\"Setext style\", 2, \"setext\")\n'Setext style\\n---'\n```\n\n### Italics\n\nReturn italics formatted text.\n\n```Python\n>>> italics(\"This text is italics\")\n'_This text is italics_'\n```\n\n### Bold\n\nReturn bold formatted text.\n\n```python\n>>> bold(\"This text is bold\")\n'**This text is bold**'\n```\n\n### Inline code\n\nReturn formatted inline code.\n\n```python\n>>> inline_code(\"This text is code\")\n'`This text is code`'\n```\n\n### Code block\n\nReturn a code block.\n\nIf a language is specified a fenced code block is produced, otherwise the\nblock is indented by four spaces.\n\nKeyword arguments:\n\n-   language -- Specifies the language to fence the code in (default blank).\n\n````python\n    >>> code_block(\"This is a simple codeblock.\")\n    '    This is a simple codeblock.'\n    >>> code_block(\"This is a simple codeblock.\\\\nBut it has a linebreak!\")\n    '    This is a simple codeblock.\\\\n    But it has a linebreak!'\n    >>> code_block(\"This block of code has a specified language.\", \"python\")\n    '```python\\\\nThis block of code has a specified language.\\\\n```'\n    >>> code_block(\"So\\\\nmany\\\\nlinebreaks.\", \"python\")\n    '```python\\\\nSo\\\\nmany\\\\nlinebreaks.\\\\n```'\n````\n\n### Link\n\nReturn an inline link.\n\n```python\n>>> link (\"This is a link\", \"https://github.com/awesmubarak/markdown_strings\")\n'[This is a link](https://github.com/awesmubarak/markdown_strings)'\n```\n\n### Image\n\nReturn an inline image.\n\nKeyword arguments:\n\n-   title -- Specify the title of the image, as seen when hovering over it.\n\n```python\n>>> image(\"This is an image\", \"https://avatars3.githubusercontent.com/u/24862378\")\n'![This is an image](https://avatars3.githubusercontent.com/u/24862378)'\n>>> image(\"This is an image\", \"https://avatars3.githubusercontent.com/u/24862378\", \"awes\")\n'![This is an image](https://avatars3.githubusercontent.com/u/24862378) \"awes\"'\n```\n\n### Unordered list\n\nReturn an unordered list from an list.\n\n```python\n>>> unordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n'-   first\\\\n-   second\\\\n-   third\\\\n-   fourth'\n>>> unordered_list([1, 2, 3, 4, 5])\n'-   1\\\\n-   2\\\\n-   3\\\\n-   4\\\\n-   5'\n```\n\n### Ordered list\n\nReturn an ordered list from an list.\n\n```python\n>>> ordered_list([\"first\", \"second\", \"third\", \"fourth\"])\n'1.  first\\\\n2.  second\\\\n3.  third\\\\n4.  fourth'\n```\n\n### Blockquote\n\nReturn a blockquote.\n\n```python\n>>> blockquote(\"A simple blockquote\")\n'> A simple blockquote'\n```\n\n### Horizontal rule\n\nReturn a horizontal rule.\n\nKeyword arguments:\n\n-   length -- Specifies the length of the rule (default 79, minimum 3).\n-   style -- Character used for the rule (may be either \"\\_\" or \"\\*\").\n\nIf the length is too low, or the style is invalid, a ValueError is raised.\n\n```python\n>>> horizontal_rule()\n'_______________________________________________________________________________'\n>>> horizontal_rule(length=5, style=\"*\")\n'*****'\n```\n\n## Non-standard markdown\n\n### Strikethrough\n\nReturn text with strike-through formatting.\n\n```python\n>>> strikethrough(\"This is a lie\")\n'~This is a lie~'\n```\n\n### Task list\n\nReturn a task list.\n\nThe task_list should be a 2-dimensional iterable; the first item should be the\ntask text and the second the boolean completion state.\n\n```python\n>>> task_list([[\"Be born\", True], [\"Be dead\", False]])\n'- [X] Be born\\\\n- [ ] Be dead'\n```\n\n### Table row\n\nReturn a single table row.\n\nKeyword arguments:\n\n-   pad -- The pad should be an list of the same size as the input text list.\n    It will be used to format the row's padding.\n\n```python\n>>> table_row([\"First column\", \"Second\", \"Third\"])\n'| First column | Second | Third |'\n>>> table_row([\"First column\", \"Second\", \"Third\"], [10, 10, 10])\n'| First column | Second     | Third      |'\n```\n\n### Delimiter row\n\nReturn a delimiter row for use in a table.\n\nKeyword arguments:\n\n-   column_lengths -- An iterable that specifies the length of each column.\n\n```python\n>>> table_delimiter_row(3)\n'| --- | --- | --- |'\n>>> table_delimiter_row(3, column_lengths=[4,5,6])\n'| ---- | ----- | ------ |'\n```\n\n### Table\n\nReturn a formatted table, generated from lists representing columns.\n\nThe function requires a 2-dimensional list, where each list is a column\nof the table. This will be used to generate a formatted table in string\nformat.\n\n```python\n>>> table([[\"1\",\"2\",\"3\"], [\"4\",\"5\",\"6\"], [\"7\",\"8\",\"9\"]])\n'| 1 | 4 | 7 |\\\\n| --- | --- | --- |\\\\n| 2 | 5 | 8 |\\\\n| 3 | 6 | 9 |'\n\n>>> table([[\"Name\", \"Awes\", \"Bob\"], [\"User\", \"mub123\", \"\"]])\n'| Name | User   |\\\\n| ---- | ------ |\\\\n| Awes | mub123 |\\\\n| Bob  |        |'\n```\n\nThis table, when parsed, will look like this:\n\n| Name | User   |\n| ---- | ------ |\n| Awes | mub123 |\n| Bob  |        |\n\n### Table from rows\n\nReturn a formatted table, using each list as the list. The specifics are the\nsame as those for the table function.\n\n```python\n>>> table_from_rows([[\"1\",\"2\",\"3\"],[\"4\",\"5\",\"6\"],[\"7\",\"8\",\"9\"]])\n'| 1 | 2 | 3 |\\\\n| --- | --- | --- |\\\\n| 4 | 5 | 6 |\\\\n| 7 | 8 | 9 |'\n```\n\n## Helper functions\n\nReturn text with formatting escaped\n\nMarkdown requires a backslash before literal underscores or asterisk, to avoid\nformatting to bold or italics.\n\n```python\n>>> esc_format(\"Normal text\")\n'Normal text'\n>>> esc_format(\"Text with **bold**\")\n'Text with \\*\\*bold\\*\\*'\n>>> esc_format(\"Text with _italics_\")\n'Text with \\_italics\\_'\n>>> esc_format(\"Text with _**complicated** formatting_\")\n'Text with \\_\\*\\*complicated\\*\\* formatting\\_'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/awesmubarak/markdown_strings", "keywords": "markdown md", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "markdown-strings", "package_url": "https://pypi.org/project/markdown-strings/", "platform": "", "project_url": "https://pypi.org/project/markdown-strings/", "project_urls": {"Homepage": "https://github.com/awesmubarak/markdown_strings"}, "release_url": "https://pypi.org/project/markdown-strings/3.3.0/", "requires_dist": null, "requires_python": "", "summary": "Create markdown formatted text", "version": "3.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Markdown_strings package</h1>\n<p>Markdown is a markup language with plain text formatting syntax. This package\nallows the creation of markdown-compliant strings. The following is a summary\nof features with usage examples.</p>\n<p>Note: asterisk and underscores are escaped for all functions that do not format\nto code (<code>inline_code</code> and <code>code_block</code>).</p>\n<h2>Installation</h2>\n<p>To install from pypi run</p>\n<pre>pip install markdown_strings\n</pre>\n<h2>Standard markdown features</h2>\n<h3>Header</h3>\n<p>Return a header of specified level.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>style -- Specifies the header style (default atx). The \"atx\" style uses\nhash signs, and has 6 levels. The \"setext\" style uses dashes or equals\nsigns for headers of levels 1 and 2 respectively, and is limited to\nthose two levels. The number of dashes or equals signs is either the length\nof the text, or 3.</li>\n</ul>\n<p>Specifying a level outside of the style's range results in a ValueError.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s2\">\"Main Title\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'# Main Title'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s2\">\"Smaller subtitle\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"s1\">'#### Smaller subtitle'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s2\">\"Setext style\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">\"setext\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'Setext style</span><span class=\"se\">\\n</span><span class=\"s1\">---'</span>\n</pre>\n<h3>Italics</h3>\n<p>Return italics formatted text.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">italics</span><span class=\"p\">(</span><span class=\"s2\">\"This text is italics\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'_This text is italics_'</span>\n</pre>\n<h3>Bold</h3>\n<p>Return bold formatted text.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bold</span><span class=\"p\">(</span><span class=\"s2\">\"This text is bold\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'**This text is bold**'</span>\n</pre>\n<h3>Inline code</h3>\n<p>Return formatted inline code.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">inline_code</span><span class=\"p\">(</span><span class=\"s2\">\"This text is code\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'`This text is code`'</span>\n</pre>\n<h3>Code block</h3>\n<p>Return a code block.</p>\n<p>If a language is specified a fenced code block is produced, otherwise the\nblock is indented by four spaces.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>language -- Specifies the language to fence the code in (default blank).</li>\n</ul>\n<pre>    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">code_block</span><span class=\"p\">(</span><span class=\"s2\">\"This is a simple codeblock.\"</span><span class=\"p\">)</span>\n    <span class=\"s1\">'    This is a simple codeblock.'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">code_block</span><span class=\"p\">(</span><span class=\"s2\">\"This is a simple codeblock.</span><span class=\"se\">\\\\</span><span class=\"s2\">nBut it has a linebreak!\"</span><span class=\"p\">)</span>\n    <span class=\"s1\">'    This is a simple codeblock.</span><span class=\"se\">\\\\</span><span class=\"s1\">n    But it has a linebreak!'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">code_block</span><span class=\"p\">(</span><span class=\"s2\">\"This block of code has a specified language.\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">)</span>\n    <span class=\"s1\">'```python</span><span class=\"se\">\\\\</span><span class=\"s1\">nThis block of code has a specified language.</span><span class=\"se\">\\\\</span><span class=\"s1\">n```'</span>\n    <span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">code_block</span><span class=\"p\">(</span><span class=\"s2\">\"So</span><span class=\"se\">\\\\</span><span class=\"s2\">nmany</span><span class=\"se\">\\\\</span><span class=\"s2\">nlinebreaks.\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">)</span>\n    <span class=\"s1\">'```python</span><span class=\"se\">\\\\</span><span class=\"s1\">nSo</span><span class=\"se\">\\\\</span><span class=\"s1\">nmany</span><span class=\"se\">\\\\</span><span class=\"s1\">nlinebreaks.</span><span class=\"se\">\\\\</span><span class=\"s1\">n```'</span>\n</pre>\n<h3>Link</h3>\n<p>Return an inline link.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">link</span> <span class=\"p\">(</span><span class=\"s2\">\"This is a link\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https://github.com/awesmubarak/markdown_strings\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'[This is a link](https://github.com/awesmubarak/markdown_strings)'</span>\n</pre>\n<h3>Image</h3>\n<p>Return an inline image.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>title -- Specify the title of the image, as seen when hovering over it.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">image</span><span class=\"p\">(</span><span class=\"s2\">\"This is an image\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https://avatars3.githubusercontent.com/u/24862378\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'![This is an image](https://avatars3.githubusercontent.com/u/24862378)'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">image</span><span class=\"p\">(</span><span class=\"s2\">\"This is an image\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https://avatars3.githubusercontent.com/u/24862378\"</span><span class=\"p\">,</span> <span class=\"s2\">\"awes\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'![This is an image](https://avatars3.githubusercontent.com/u/24862378) \"awes\"'</span>\n</pre>\n<h3>Unordered list</h3>\n<p>Return an unordered list from an list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">unordered_list</span><span class=\"p\">([</span><span class=\"s2\">\"first\"</span><span class=\"p\">,</span> <span class=\"s2\">\"second\"</span><span class=\"p\">,</span> <span class=\"s2\">\"third\"</span><span class=\"p\">,</span> <span class=\"s2\">\"fourth\"</span><span class=\"p\">])</span>\n<span class=\"s1\">'-   first</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   second</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   third</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   fourth'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">unordered_list</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"s1\">'-   1</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   2</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   3</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   4</span><span class=\"se\">\\\\</span><span class=\"s1\">n-   5'</span>\n</pre>\n<h3>Ordered list</h3>\n<p>Return an ordered list from an list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ordered_list</span><span class=\"p\">([</span><span class=\"s2\">\"first\"</span><span class=\"p\">,</span> <span class=\"s2\">\"second\"</span><span class=\"p\">,</span> <span class=\"s2\">\"third\"</span><span class=\"p\">,</span> <span class=\"s2\">\"fourth\"</span><span class=\"p\">])</span>\n<span class=\"s1\">'1.  first</span><span class=\"se\">\\\\</span><span class=\"s1\">n2.  second</span><span class=\"se\">\\\\</span><span class=\"s1\">n3.  third</span><span class=\"se\">\\\\</span><span class=\"s1\">n4.  fourth'</span>\n</pre>\n<h3>Blockquote</h3>\n<p>Return a blockquote.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">blockquote</span><span class=\"p\">(</span><span class=\"s2\">\"A simple blockquote\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'&gt; A simple blockquote'</span>\n</pre>\n<h3>Horizontal rule</h3>\n<p>Return a horizontal rule.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>length -- Specifies the length of the rule (default 79, minimum 3).</li>\n<li>style -- Character used for the rule (may be either \"_\" or \"*\").</li>\n</ul>\n<p>If the length is too low, or the style is invalid, a ValueError is raised.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_rule</span><span class=\"p\">()</span>\n<span class=\"s1\">'_______________________________________________________________________________'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">horizontal_rule</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'*****'</span>\n</pre>\n<h2>Non-standard markdown</h2>\n<h3>Strikethrough</h3>\n<p>Return text with strike-through formatting.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">strikethrough</span><span class=\"p\">(</span><span class=\"s2\">\"This is a lie\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'~This is a lie~'</span>\n</pre>\n<h3>Task list</h3>\n<p>Return a task list.</p>\n<p>The task_list should be a 2-dimensional iterable; the first item should be the\ntask text and the second the boolean completion state.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">task_list</span><span class=\"p\">([[</span><span class=\"s2\">\"Be born\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"Be dead\"</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">]])</span>\n<span class=\"s1\">'- [X] Be born</span><span class=\"se\">\\\\</span><span class=\"s1\">n- [ ] Be dead'</span>\n</pre>\n<h3>Table row</h3>\n<p>Return a single table row.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>pad -- The pad should be an list of the same size as the input text list.\nIt will be used to format the row's padding.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table_row</span><span class=\"p\">([</span><span class=\"s2\">\"First column\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Second\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Third\"</span><span class=\"p\">])</span>\n<span class=\"s1\">'| First column | Second | Third |'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table_row</span><span class=\"p\">([</span><span class=\"s2\">\"First column\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Second\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Third\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">])</span>\n<span class=\"s1\">'| First column | Second     | Third      |'</span>\n</pre>\n<h3>Delimiter row</h3>\n<p>Return a delimiter row for use in a table.</p>\n<p>Keyword arguments:</p>\n<ul>\n<li>column_lengths -- An iterable that specifies the length of each column.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table_delimiter_row</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"s1\">'| --- | --- | --- |'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table_delimiter_row</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">column_lengths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"s1\">'| ---- | ----- | ------ |'</span>\n</pre>\n<h3>Table</h3>\n<p>Return a formatted table, generated from lists representing columns.</p>\n<p>The function requires a 2-dimensional list, where each list is a column\nof the table. This will be used to generate a formatted table in string\nformat.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table</span><span class=\"p\">([[</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"s2\">\"3\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"4\"</span><span class=\"p\">,</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span><span class=\"s2\">\"6\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"7\"</span><span class=\"p\">,</span><span class=\"s2\">\"8\"</span><span class=\"p\">,</span><span class=\"s2\">\"9\"</span><span class=\"p\">]])</span>\n<span class=\"s1\">'| 1 | 4 | 7 |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| --- | --- | --- |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| 2 | 5 | 8 |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| 3 | 6 | 9 |'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table</span><span class=\"p\">([[</span><span class=\"s2\">\"Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Awes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Bob\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">\"User\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mub123\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">]])</span>\n<span class=\"s1\">'| Name | User   |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| ---- | ------ |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| Awes | mub123 |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| Bob  |        |'</span>\n</pre>\n<p>This table, when parsed, will look like this:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>User</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Awes</td>\n<td>mub123</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td></td>\n</tr></tbody></table>\n<h3>Table from rows</h3>\n<p>Return a formatted table, using each list as the list. The specifics are the\nsame as those for the table function.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">table_from_rows</span><span class=\"p\">([[</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"s2\">\"2\"</span><span class=\"p\">,</span><span class=\"s2\">\"3\"</span><span class=\"p\">],[</span><span class=\"s2\">\"4\"</span><span class=\"p\">,</span><span class=\"s2\">\"5\"</span><span class=\"p\">,</span><span class=\"s2\">\"6\"</span><span class=\"p\">],[</span><span class=\"s2\">\"7\"</span><span class=\"p\">,</span><span class=\"s2\">\"8\"</span><span class=\"p\">,</span><span class=\"s2\">\"9\"</span><span class=\"p\">]])</span>\n<span class=\"s1\">'| 1 | 2 | 3 |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| --- | --- | --- |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| 4 | 5 | 6 |</span><span class=\"se\">\\\\</span><span class=\"s1\">n| 7 | 8 | 9 |'</span>\n</pre>\n<h2>Helper functions</h2>\n<p>Return text with formatting escaped</p>\n<p>Markdown requires a backslash before literal underscores or asterisk, to avoid\nformatting to bold or italics.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">esc_format</span><span class=\"p\">(</span><span class=\"s2\">\"Normal text\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'Normal text'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">esc_format</span><span class=\"p\">(</span><span class=\"s2\">\"Text with **bold**\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'Text with \\*\\*bold\\*\\*'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">esc_format</span><span class=\"p\">(</span><span class=\"s2\">\"Text with _italics_\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'Text with \\_italics\\_'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">esc_format</span><span class=\"p\">(</span><span class=\"s2\">\"Text with _**complicated** formatting_\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'Text with \\_\\*\\*complicated\\*\\* formatting\\_'</span>\n</pre>\n\n          </div>"}, "last_serial": 6362038, "releases": {"2.1.2": [{"comment_text": "", "digests": {"md5": "e1e2fb0aba28e2ed1cae23223e7e5719", "sha256": "ddb7f449c708941f8bd36bebc0752c31c4fcd516b21d1532f5de36421521d501"}, "downloads": -1, "filename": "markdown_strings-2.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e1e2fb0aba28e2ed1cae23223e7e5719", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8357, "upload_time": "2017-11-12T09:48:46", "upload_time_iso_8601": "2017-11-12T09:48:46.435617Z", "url": "https://files.pythonhosted.org/packages/11/b4/99a4ef78de87cec4bab1ca27d88858acd3322be43f41efc6cd4f4c6ca7b8/markdown_strings-2.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a70ff7e861964be851036df65738bb5", "sha256": "cedb91d4306bbc6ef487b06310d834ce880459ac0154d38ee78a92ad89114bcc"}, "downloads": -1, "filename": "markdown_strings-2.1.2.tar.gz", "has_sig": true, "md5_digest": "5a70ff7e861964be851036df65738bb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5758, "upload_time": "2017-11-12T09:48:47", "upload_time_iso_8601": "2017-11-12T09:48:47.473135Z", "url": "https://files.pythonhosted.org/packages/c0/b3/1b4b98b950cb2a710bab2c147b21c62c63e31d8fef59d9eaa14df0b7ca9f/markdown_strings-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "48a66fd18f7ad14fddc837a336beb917", "sha256": "26a42d24ad12c9c48f293fe50fd71a6e6d8f19a49cbec05494bf423595b7f64f"}, "downloads": -1, "filename": "markdown_strings-2.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "48a66fd18f7ad14fddc837a336beb917", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8355, "upload_time": "2017-12-04T20:53:50", "upload_time_iso_8601": "2017-12-04T20:53:50.472660Z", "url": "https://files.pythonhosted.org/packages/ee/72/492dca5cc63d07ff312e23fa54cd7599f2b0c4f9d6c27f9058c802ffaf13/markdown_strings-2.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4626d2506515bd1c2c494ccde2b6263", "sha256": "323a10c798e6a585812a17bd7263516860738ad9ee248c585596b4932cd9d82f"}, "downloads": -1, "filename": "markdown_strings-2.1.3.tar.gz", "has_sig": true, "md5_digest": "b4626d2506515bd1c2c494ccde2b6263", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5750, "upload_time": "2017-12-04T20:53:51", "upload_time_iso_8601": "2017-12-04T20:53:51.478301Z", "url": "https://files.pythonhosted.org/packages/3f/47/5be649177309f3ae34face21029c6322453f6d86b73a76a00282d2888c07/markdown_strings-2.1.3.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "63e1b7168aa013a2cbb2f19ba8fb4190", "sha256": "ba537bb31ceefff8ef47d5f253265457cdd46034031cd10a1c14f6c8099a6e1e"}, "downloads": -1, "filename": "markdown_strings-3.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63e1b7168aa013a2cbb2f19ba8fb4190", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9441, "upload_time": "2017-12-17T10:41:52", "upload_time_iso_8601": "2017-12-17T10:41:52.472842Z", "url": "https://files.pythonhosted.org/packages/6a/15/bb79b0ec17eba244124764c2f286719524c3acf92bbe77907a0003122651/markdown_strings-3.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bb00b69198d4d501fc91f03aa8e8d2b", "sha256": "b5110e9227878d971abfd2bcdfa558b9f035b3dc0532e187f22bb2cbf93dd1a9"}, "downloads": -1, "filename": "markdown_strings-3.1.0.tar.gz", "has_sig": true, "md5_digest": "3bb00b69198d4d501fc91f03aa8e8d2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6425, "upload_time": "2017-12-17T10:41:54", "upload_time_iso_8601": "2017-12-17T10:41:54.644502Z", "url": "https://files.pythonhosted.org/packages/52/96/7e9e6c20793338e1b80fcdec1212fc47a87aef20adf1c05f6c769cf9817c/markdown_strings-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "9fc572196c3ce3d2dd67d29626862474", "sha256": "21bfc2ff1e6eec1209bb5835f090f9576cec46de38fb1991f57a422bb5efcf6f"}, "downloads": -1, "filename": "markdown_strings-3.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9fc572196c3ce3d2dd67d29626862474", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9442, "upload_time": "2018-09-15T19:52:00", "upload_time_iso_8601": "2018-09-15T19:52:00.831445Z", "url": "https://files.pythonhosted.org/packages/13/87/f95db4d36496af59b32cdf0bd078c914e1463b57f126ca9533edec5d1c2d/markdown_strings-3.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45d0e90129ef5ff9d52c778957f6e136", "sha256": "141e55d48742d6c19b09500bb71760f3aa04b6532c5d7725b9a030ce90663708"}, "downloads": -1, "filename": "markdown_strings-3.1.1.tar.gz", "has_sig": true, "md5_digest": "45d0e90129ef5ff9d52c778957f6e136", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6411, "upload_time": "2018-09-15T19:52:02", "upload_time_iso_8601": "2018-09-15T19:52:02.354907Z", "url": "https://files.pythonhosted.org/packages/19/51/9af07a554244fbc1975dd8aeea9388063fae93ab5dadd7c42cc2c4132944/markdown_strings-3.1.1.tar.gz", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "552f62fa8cd82bddc5fed60355305136", "sha256": "105c7914d0bb03ba878c6e336031d0fc050727f6e1e2fce6d3b399761170c25d"}, "downloads": -1, "filename": "markdown_strings-3.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "552f62fa8cd82bddc5fed60355305136", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7889, "upload_time": "2019-12-26T14:29:47", "upload_time_iso_8601": "2019-12-26T14:29:47.595242Z", "url": "https://files.pythonhosted.org/packages/a7/75/7915a1207eac422a397059de2368151288bd5113fc20cfa46dfbd062e793/markdown_strings-3.2.0-py2.py3-none-any.whl", "yanked": false}], "3.2.1": [{"comment_text": "", "digests": {"md5": "42661c5dddabc722b956b764619d1d78", "sha256": "7a66902652a5690cb7ea975b5764bdb4535e0bcf2eb1f7410ade49e80bec467e"}, "downloads": -1, "filename": "markdown_strings-3.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42661c5dddabc722b956b764619d1d78", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7886, "upload_time": "2019-12-26T14:30:37", "upload_time_iso_8601": "2019-12-26T14:30:37.377041Z", "url": "https://files.pythonhosted.org/packages/5d/b8/419eafc118ffb922a5182834cec3108cc86728e1739142de40c962fcd6b2/markdown_strings-3.2.1-py2.py3-none-any.whl", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "11ea1b0c8ef15e6584482da0b31a55b6", "sha256": "dec9c315feeb8458fc5e0f17db203781e0a5cedaad83da0b3eda5388c4f69207"}, "downloads": -1, "filename": "markdown_strings-3.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11ea1b0c8ef15e6584482da0b31a55b6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8118, "upload_time": "2019-12-26T15:21:57", "upload_time_iso_8601": "2019-12-26T15:21:57.698681Z", "url": "https://files.pythonhosted.org/packages/25/5f/2582c93abe18c89a0b3691f7e178b9ab713a4bfe7918230b2e410c27452c/markdown_strings-3.3.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11ea1b0c8ef15e6584482da0b31a55b6", "sha256": "dec9c315feeb8458fc5e0f17db203781e0a5cedaad83da0b3eda5388c4f69207"}, "downloads": -1, "filename": "markdown_strings-3.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "11ea1b0c8ef15e6584482da0b31a55b6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8118, "upload_time": "2019-12-26T15:21:57", "upload_time_iso_8601": "2019-12-26T15:21:57.698681Z", "url": "https://files.pythonhosted.org/packages/25/5f/2582c93abe18c89a0b3691f7e178b9ab713a4bfe7918230b2e410c27452c/markdown_strings-3.3.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:57:43 2020"}