{"info": {"author": "Pauli Rikula", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "# pyqbit\nQuantum bit and the usual gates in numeric forms straight from the Wikipedia.\n## Apply\nApply gate to a state\n\nFor example this chain evaluates to zero:\n\n    >>> from functools import reduce\n    >>> s = reduce( Apply, [Zero(), H(), PauliZ(), H(), PauliX()])\n    >>> Measure.One(s)\n    0\n\nSwap places of a bit\n\n    >>> one = Combine(Zero(), One())\n    >>> Measure.One(one)\n    1\n    >>> one\n    array([[0],\n           [1],\n           [0],\n           [0]])\n    >>> two = Apply(one, SWAP())\n    >>> Measure.One(two)\n    2\n    >>> two\n    array([[0],\n           [0],\n           [1],\n           [0]])\n\n\n\n## Quantum bit definitions\n\n### Zero\nQubit that evaluates as zero every single time\n\n    >>> Zero\n    |0>\n    >>> Zero()\n    array([[1],\n           [0]])\n    >>> Measure.One(Zero())\n    0\n\n\n### One\nQubit that evaluates as one every single time\n\n    >>> One\n    |1>\n    >>> One()\n    array([[0],\n           [1]])\n    >>> Measure.One(One())\n    1\n\n\n### Plus\nQubit that evaluates as one and zero evenly\n\n    >>> Plus\n    |+>\n    >>> Plus()\n    array([[0.70710678],\n           [0.70710678]])\n\n\n### Minus\nQubit that evaluates as one and zero evenly\n\n    >>> Minus\n    |->\n    >>> Minus()\n    array([[ 0.70710678],\n           [-0.70710678]])\n\n\n### Measure\nSimulates the measure process of the qubit\n\n    >>> Measure.One(One())\n    1\n\n\n### Combine\nUse Kronecker product of two arrays to combine qubits.\n\n    >>> Combine(Zero(),Zero())\n    array([[1],\n           [0],\n           [0],\n           [0]])\n\n\n    >>> from functools import reduce\n    >>> reduce(Combine, [One(), Zero(), Zero()])\n    array([[0],\n           [0],\n           [0],\n           [0],\n           [1],\n           [0],\n           [0],\n           [0]])\n\nEach row represents the probability of getting it's index's value as a result\n\n    >>> Measure.One(Combine(Zero(),Zero()))\n    0\n\n    >>> Measure.One( Combine(One(), Combine(Zero(),Zero())) )\n    4\n\n\n## Quantum gates\n\n### Identity\nIdentity gate\n\n    >>> Identity\n    Identity\n    >>> Identity()\n    array([[1, 0],\n           [0, 1]])\n\n\n### H\nHadamard gate\n\n    >>> H\n    H\n    >>> H()\n    array([[ 0.70710678,  0.70710678],\n           [ 0.70710678, -0.70710678]])\n\n\n### PauliX\nPauli X gate\n\n    >>> PauliX\n    X\n    >>> PauliX()\n    array([[0, 1],\n           [1, 0]])\n\n\n### PauliY\nPauli Y gate\n\n    >>> PauliY\n    Y\n    >>> PauliY()\n    array([[ 0.+0.j, -0.-1.j],\n           [ 0.+1.j,  0.+0.j]])\n\n\n### PauliZ\nPauli Z gate\n\n    >>> PauliZ\n    Z\n    >>> PauliZ()\n    array([[ 0,  1],\n           [ 0, -1]])\n\n\n### Phase\nPhase (S, P) gate\n\n    >>> Phase\n    P\n    >>> Phase()\n    array([[1.+0.j, 0.+0.j],\n           [0.+0.j, 0.+1.j]])\n\n\n### R\nR is the custom phase shift gate\n\n    >>> from math import pi\n    >>> R(pi/4)\n    R(0.7853981633974483)\n    >>> R(pi/4)()\n    array([[1.        +0.j        , 0.        +0.j        ],\n           [0.        +0.j        , 0.70710678+0.70710678j]])\n\n\n### CNOT\nCNOT is the Controlled Not gate (CX)\n\n    >>> CNOT\n    CX\n    >>> CNOT()\n    array([[1, 0, 0, 0],\n           [0, 1, 0, 0],\n           [0, 0, 0, 1],\n           [0, 0, 1, 0]])\n\n\n### CPauliZ\nCPauliZ is the Controlled Pauli Z gate (CZ)\n\n    >>> CPauliZ\n    CZ\n    >>> CPauliZ()\n    array([[ 1,  0,  0,  0],\n           [ 0,  1,  0,  0],\n           [ 0,  0,  1,  0],\n           [ 0,  0,  0, -1]])\n\n\n### SWAP\nSWAP is the qbit swap gate\n\n    >>> SWAP\n    SWAP\n    >>> SWAP()\n    array([[1, 0, 0, 0],\n           [0, 0, 1, 0],\n           [0, 1, 0, 0],\n           [0, 0, 0, 1]])\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kummahiih/pyqubit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyqbit", "package_url": "https://pypi.org/project/pyqbit/", "platform": "", "project_url": "https://pypi.org/project/pyqbit/", "project_urls": {"Homepage": "https://github.com/kummahiih/pyqubit"}, "release_url": "https://pypi.org/project/pyqbit/0.1.0/", "requires_dist": ["numpy (>=1.18.1)"], "requires_python": "~=3.6", "summary": "Quantum bit and the usual gates in numeric forms straight from the Wikipedia", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># pyqbit\nQuantum bit and the usual gates in numeric forms straight from the Wikipedia.\n## Apply\nApply gate to a state</p>\n<p>For example this chain evaluates to zero:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; s = reduce( Apply, [Zero(), H(), PauliZ(), H(), PauliX()])\n&gt;&gt;&gt; Measure.One(s)\n0\n</pre>\n</blockquote>\n<p>Swap places of a bit</p>\n<blockquote>\n<pre>&gt;&gt;&gt; one = Combine(Zero(), One())\n&gt;&gt;&gt; Measure.One(one)\n1\n&gt;&gt;&gt; one\narray([[0],\n       [1],\n       [0],\n       [0]])\n&gt;&gt;&gt; two = Apply(one, SWAP())\n&gt;&gt;&gt; Measure.One(two)\n2\n&gt;&gt;&gt; two\narray([[0],\n       [0],\n       [1],\n       [0]])\n</pre>\n</blockquote>\n<p>## Quantum bit definitions</p>\n<p>### Zero\nQubit that evaluates as zero every single time</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Zero\n|0&gt;\n&gt;&gt;&gt; Zero()\narray([[1],\n       [0]])\n&gt;&gt;&gt; Measure.One(Zero())\n0\n</pre>\n</blockquote>\n<p>### One\nQubit that evaluates as one every single time</p>\n<blockquote>\n<pre>&gt;&gt;&gt; One\n|1&gt;\n&gt;&gt;&gt; One()\narray([[0],\n       [1]])\n&gt;&gt;&gt; Measure.One(One())\n1\n</pre>\n</blockquote>\n<p>### Plus\nQubit that evaluates as one and zero evenly</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Plus\n|+&gt;\n&gt;&gt;&gt; Plus()\narray([[0.70710678],\n       [0.70710678]])\n</pre>\n</blockquote>\n<p>### Minus\nQubit that evaluates as one and zero evenly</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Minus\n|-&gt;\n&gt;&gt;&gt; Minus()\narray([[ 0.70710678],\n       [-0.70710678]])\n</pre>\n</blockquote>\n<p>### Measure\nSimulates the measure process of the qubit</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Measure.One(One())\n1\n</pre>\n</blockquote>\n<p>### Combine\nUse Kronecker product of two arrays to combine qubits.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Combine(Zero(),Zero())\narray([[1],\n       [0],\n       [0],\n       [0]])\n</pre>\n<pre>&gt;&gt;&gt; from functools import reduce\n&gt;&gt;&gt; reduce(Combine, [One(), Zero(), Zero()])\narray([[0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]])\n</pre>\n</blockquote>\n<p>Each row represents the probability of getting it\u2019s index\u2019s value as a result</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Measure.One(Combine(Zero(),Zero()))\n0\n</pre>\n<pre>&gt;&gt;&gt; Measure.One( Combine(One(), Combine(Zero(),Zero())) )\n4\n</pre>\n</blockquote>\n<p>## Quantum gates</p>\n<p>### Identity\nIdentity gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Identity\nIdentity\n&gt;&gt;&gt; Identity()\narray([[1, 0],\n       [0, 1]])\n</pre>\n</blockquote>\n<p>### H\nHadamard gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; H\nH\n&gt;&gt;&gt; H()\narray([[ 0.70710678,  0.70710678],\n       [ 0.70710678, -0.70710678]])\n</pre>\n</blockquote>\n<p>### PauliX\nPauli X gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; PauliX\nX\n&gt;&gt;&gt; PauliX()\narray([[0, 1],\n       [1, 0]])\n</pre>\n</blockquote>\n<p>### PauliY\nPauli Y gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; PauliY\nY\n&gt;&gt;&gt; PauliY()\narray([[ 0.+0.j, -0.-1.j],\n       [ 0.+1.j,  0.+0.j]])\n</pre>\n</blockquote>\n<p>### PauliZ\nPauli Z gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; PauliZ\nZ\n&gt;&gt;&gt; PauliZ()\narray([[ 0,  1],\n       [ 0, -1]])\n</pre>\n</blockquote>\n<p>### Phase\nPhase (S, P) gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; Phase\nP\n&gt;&gt;&gt; Phase()\narray([[1.+0.j, 0.+0.j],\n       [0.+0.j, 0.+1.j]])\n</pre>\n</blockquote>\n<p>### R\nR is the custom phase shift gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from math import pi\n&gt;&gt;&gt; R(pi/4)\nR(0.7853981633974483)\n&gt;&gt;&gt; R(pi/4)()\narray([[1.        +0.j        , 0.        +0.j        ],\n       [0.        +0.j        , 0.70710678+0.70710678j]])\n</pre>\n</blockquote>\n<p>### CNOT\nCNOT is the Controlled Not gate (CX)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; CNOT\nCX\n&gt;&gt;&gt; CNOT()\narray([[1, 0, 0, 0],\n       [0, 1, 0, 0],\n       [0, 0, 0, 1],\n       [0, 0, 1, 0]])\n</pre>\n</blockquote>\n<p>### CPauliZ\nCPauliZ is the Controlled Pauli Z gate (CZ)</p>\n<blockquote>\n<pre>&gt;&gt;&gt; CPauliZ\nCZ\n&gt;&gt;&gt; CPauliZ()\narray([[ 1,  0,  0,  0],\n       [ 0,  1,  0,  0],\n       [ 0,  0,  1,  0],\n       [ 0,  0,  0, -1]])\n</pre>\n</blockquote>\n<p>### SWAP\nSWAP is the qbit swap gate</p>\n<blockquote>\n<pre>&gt;&gt;&gt; SWAP\nSWAP\n&gt;&gt;&gt; SWAP()\narray([[1, 0, 0, 0],\n       [0, 0, 1, 0],\n       [0, 1, 0, 0],\n       [0, 0, 0, 1]])\n</pre>\n</blockquote>\n\n          </div>"}, "last_serial": 7064208, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "93a2ee249741f46f8a8e64936c302cb7", "sha256": "21ee43dc8e22f59cbfc856cdae976f76297712048477bd73749ba25d5c02845e"}, "downloads": -1, "filename": "pyqbit-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93a2ee249741f46f8a8e64936c302cb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 5670, "upload_time": "2020-04-20T23:42:10", "upload_time_iso_8601": "2020-04-20T23:42:10.347293Z", "url": "https://files.pythonhosted.org/packages/e2/52/0ef09b72a07a4d2ce77894a4c8550ad9d58f5bcbeab9278b25bbe32bdbf0/pyqbit-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93a2ee249741f46f8a8e64936c302cb7", "sha256": "21ee43dc8e22f59cbfc856cdae976f76297712048477bd73749ba25d5c02845e"}, "downloads": -1, "filename": "pyqbit-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "93a2ee249741f46f8a8e64936c302cb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 5670, "upload_time": "2020-04-20T23:42:10", "upload_time_iso_8601": "2020-04-20T23:42:10.347293Z", "url": "https://files.pythonhosted.org/packages/e2/52/0ef09b72a07a4d2ce77894a4c8550ad9d58f5bcbeab9278b25bbe32bdbf0/pyqbit-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:53 2020"}