{"info": {"author": "Johnny Chang", "author_email": "hiimdoublej.pi@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "# django-json-ld\n\nThis is a django template tag to help developers render [structured data](https://developers.google.com/search/docs/guides/intro-structured-data) tags inside their django templates.\n\nFurthermore a collection of views and mixins are included:\n * `JsonLdContextMixin`, `JsonLdView`\n * `JsonLdSingleObjectMixin`, `JsonLdDetailView`\n\n## Installation\nInstall using `pip`:\n```\npip install django-json-ld\n```\n\nAdd `django_json_ld` to `INSTALLED_APPS` in `settings.py`:\n```\nINSTALLED_APPS = [\n    # Other apps...\n    'django_json_ld',\n]\n```\n\n## Settings\nYou can override the following options in settings.py:\n\n`JSON_LD_CONTEXT_ATTRIBUTE`: the context attribute name used in `django_json_ld`'s Class-Based Views (CBV). Defaults to `'sd'`.\n\n`JSON_LD_MODEL_ATTRIBUTE`: the model attribute name used by `JsonLdDetailView` to get the model's structured data. Defaults to `'sd'`.\n\n`JSON_LD_DEFAULT_CONTEXT`: default json-ld context when using `django_json_ld`'s CBVs. Defaults to `'https://schema.org'`.\n\n`JSON_LD_DEFAULT_TYPE`: default json-ld type when using `django_json_ld`'s CBVs. Defaults to `'Thing'`.\n\n`JSON_LD_GENERATE_URL`: generate json-ld's `url` field when using `django_json_ld`'s CBVs. Defaults to `True`.\n\n`JSON_LD_EMPTY_INPUT_RENDERING`: behavior when the template tag receives an empty object. Possible values:\n* `strict` default, raise TemplateSyntaxError.\n* `silent` renders nothing.\n* `generate_thing` creates object with URL of current page. eg: \n```\nstructured_data = {\n                \"@context\": <JSON_LD_DEFAULT_CONTEXT>,\n                \"@type\": <JSON_LD_DEFAULT_TYPE>,\n                \"url\": <current_page_url>,\n                }\n```\n\n\n## Usage Example\nAssuming you have a structured data `sd` like the following in your context (copied from the link above).\n```\nsd = {\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n    }\n}\n```\nThen, in your template:\n```\n{% load render_json_ld from django_json_ld %}\n{% render_json_ld sd %}\n```\nWould render into:\n```\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n  }\n}\n</script>\n```\n\n### Class-Based View example\n\n#### Simple View\n\nviews.py\n```python\nfrom django_json_ld.views import JsonLdContextMixin\n\nclass HomeView(JsonLdContextMixin, generic.ListView):\n    structured_data = {\n        \"@type\": \"Organization\",\n        \"name\": \"The Company\",\n        \"description\": _(\"A great company.\"),\n    }\n\n    def get_structured_data(self):\n        structured_data = super(HomeView, self).get_structured_data()\n        structured_data[\"event\"] = get_next_event()\n        return structured_data\n```\n\nBy using  `{% render_json_ld sd %}`, as explained in the previous example, would render into something like:\n\n```json\n{\n    \"@context\":\"https://schema.org\",    \n    \"@type\":\"Organization\",\n    \"name\":\"The Company\",\n    \"description\":\"Uma grande empresa.\",\n    \"url\":\"http://example.org/\",\n    \"event\": {\n        \"@type\": \"Event\",\n        \"about\": [\"Hodler\",\"Monet\",\"Munch\"],\n        \"name\": \"Peindre l'impossible\",\n        \"startDate\": \"2016-09-15\",\n        \"endDate\": \"2017-01-22\"\n    }\n}\n```\n\nIn the above example `JsonLdContextMixin` adds `sd` to `HomeView`'s context. \n`django_json_ld` supports lazy translations, hence `\"description\"` showing the translated version of its original value.\n\n#### Detail View\n\nviews.py\n```python\nfrom django_json_ld.views import JsonLdDetailView\n\nclass ProductDetailView(JsonLdDetailView):\n    model=Product\n```\n\nmodels.py\n```python\nclass Product(models.Model):\n    name = models.CharField(_('Name'), max_length=255)\n    description = models.TextField(_('Description'))\n\n    @property\n    def sd(self):\n        return {\n            \"@type\": 'Product',\n            \"description\": self.description,\n            \"name\": self.name,\n        }\n```\n\nBy using  `{% render_json_ld sd %}`, as explained previously, would render into something like:\n\n```json\n{\n    \"@context\":\"https://schema.org\",    \n    \"@type\":\"Product\",\n    \"name\":\"The Product\",\n    \"description\":\"A great product.\",\n    \"url\":\"http://example.org/products/1/the-product/\"\n}\n```\n\nIn the above example `JsonLdDetailView` adds `sd` to `ProductDetailView`'s context, using `Product`'s own `sd` property. The `url` is generated automatically by `JsonLdDetailView`. This behaviour is configurable through settings.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hiimdoublej/django-json-ld", "keywords": "django,webpack,assets", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-json-ld", "package_url": "https://pypi.org/project/django-json-ld/", "platform": "", "project_url": "https://pypi.org/project/django-json-ld/", "project_urls": {"Homepage": "https://github.com/hiimdoublej/django-json-ld"}, "release_url": "https://pypi.org/project/django-json-ld/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Django template tag for json-ld", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-json-ld</h1>\n<p>This is a django template tag to help developers render <a href=\"https://developers.google.com/search/docs/guides/intro-structured-data\" rel=\"nofollow\">structured data</a> tags inside their django templates.</p>\n<p>Furthermore a collection of views and mixins are included:</p>\n<ul>\n<li><code>JsonLdContextMixin</code>, <code>JsonLdView</code></li>\n<li><code>JsonLdSingleObjectMixin</code>, <code>JsonLdDetailView</code></li>\n</ul>\n<h2>Installation</h2>\n<p>Install using <code>pip</code>:</p>\n<pre><code>pip install django-json-ld\n</code></pre>\n<p>Add <code>django_json_ld</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code>:</p>\n<pre><code>INSTALLED_APPS = [\n    # Other apps...\n    'django_json_ld',\n]\n</code></pre>\n<h2>Settings</h2>\n<p>You can override the following options in settings.py:</p>\n<p><code>JSON_LD_CONTEXT_ATTRIBUTE</code>: the context attribute name used in <code>django_json_ld</code>'s Class-Based Views (CBV). Defaults to <code>'sd'</code>.</p>\n<p><code>JSON_LD_MODEL_ATTRIBUTE</code>: the model attribute name used by <code>JsonLdDetailView</code> to get the model's structured data. Defaults to <code>'sd'</code>.</p>\n<p><code>JSON_LD_DEFAULT_CONTEXT</code>: default json-ld context when using <code>django_json_ld</code>'s CBVs. Defaults to <code>'https://schema.org'</code>.</p>\n<p><code>JSON_LD_DEFAULT_TYPE</code>: default json-ld type when using <code>django_json_ld</code>'s CBVs. Defaults to <code>'Thing'</code>.</p>\n<p><code>JSON_LD_GENERATE_URL</code>: generate json-ld's <code>url</code> field when using <code>django_json_ld</code>'s CBVs. Defaults to <code>True</code>.</p>\n<p><code>JSON_LD_EMPTY_INPUT_RENDERING</code>: behavior when the template tag receives an empty object. Possible values:</p>\n<ul>\n<li><code>strict</code> default, raise TemplateSyntaxError.</li>\n<li><code>silent</code> renders nothing.</li>\n<li><code>generate_thing</code> creates object with URL of current page. eg:</li>\n</ul>\n<pre><code>structured_data = {\n                \"@context\": &lt;JSON_LD_DEFAULT_CONTEXT&gt;,\n                \"@type\": &lt;JSON_LD_DEFAULT_TYPE&gt;,\n                \"url\": &lt;current_page_url&gt;,\n                }\n</code></pre>\n<h2>Usage Example</h2>\n<p>Assuming you have a structured data <code>sd</code> like the following in your context (copied from the link above).</p>\n<pre><code>sd = {\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n    }\n}\n</code></pre>\n<p>Then, in your template:</p>\n<pre><code>{% load render_json_ld from django_json_ld %}\n{% render_json_ld sd %}\n</code></pre>\n<p>Would render into:</p>\n<pre><code>&lt;script type=\"application/ld+json\"&gt;\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"Organization\",\n  \"url\": \"http://www.example.com\",\n  \"name\": \"Unlimited Ball Bearings Corp.\",\n  \"contactPoint\": {\n    \"@type\": \"ContactPoint\",\n    \"telephone\": \"+1-401-555-1212\",\n    \"contactType\": \"Customer service\"\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<h3>Class-Based View example</h3>\n<h4>Simple View</h4>\n<p>views.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_json_ld.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonLdContextMixin</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">HomeView</span><span class=\"p\">(</span><span class=\"n\">JsonLdContextMixin</span><span class=\"p\">,</span> <span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">structured_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"@type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Organization\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The Company\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">\"A great company.\"</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_structured_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">structured_data</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">HomeView</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_structured_data</span><span class=\"p\">()</span>\n        <span class=\"n\">structured_data</span><span class=\"p\">[</span><span class=\"s2\">\"event\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">get_next_event</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">structured_data</span>\n</pre>\n<p>By using  <code>{% render_json_ld sd %}</code>, as explained in the previous example, would render into something like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"@context\"</span><span class=\"p\">:</span><span class=\"s2\">\"https://schema.org\"</span><span class=\"p\">,</span>    \n    <span class=\"nt\">\"@type\"</span><span class=\"p\">:</span><span class=\"s2\">\"Organization\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"The Company\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"Uma grande empresa.\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"s2\">\"http://example.org/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"event\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"@type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Event\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"about\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Hodler\"</span><span class=\"p\">,</span><span class=\"s2\">\"Monet\"</span><span class=\"p\">,</span><span class=\"s2\">\"Munch\"</span><span class=\"p\">],</span>\n        <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Peindre l'impossible\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"startDate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2016-09-15\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"endDate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2017-01-22\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In the above example <code>JsonLdContextMixin</code> adds <code>sd</code> to <code>HomeView</code>'s context.\n<code>django_json_ld</code> supports lazy translations, hence <code>\"description\"</code> showing the translated version of its original value.</p>\n<h4>Detail View</h4>\n<p>views.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_json_ld.views</span> <span class=\"kn\">import</span> <span class=\"n\">JsonLdDetailView</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductDetailView</span><span class=\"p\">(</span><span class=\"n\">JsonLdDetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Product</span>\n</pre>\n<p>models.py</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Product</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">),</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Description'</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">sd</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"@type\"</span><span class=\"p\">:</span> <span class=\"s1\">'Product'</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>By using  <code>{% render_json_ld sd %}</code>, as explained previously, would render into something like:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"@context\"</span><span class=\"p\">:</span><span class=\"s2\">\"https://schema.org\"</span><span class=\"p\">,</span>    \n    <span class=\"nt\">\"@type\"</span><span class=\"p\">:</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"The Product\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"A great product.\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span><span class=\"s2\">\"http://example.org/products/1/the-product/\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In the above example <code>JsonLdDetailView</code> adds <code>sd</code> to <code>ProductDetailView</code>'s context, using <code>Product</code>'s own <code>sd</code> property. The <code>url</code> is generated automatically by <code>JsonLdDetailView</code>. This behaviour is configurable through settings.</p>\n\n          </div>"}, "last_serial": 4939248, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bb54072eaba49c379de3e2d0b6747498", "sha256": "0d5e93ea09d7b9c30956bac8aa14a9d67c713345a8ed4c99210b819bb996a49d"}, "downloads": -1, "filename": "django_json_ld-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bb54072eaba49c379de3e2d0b6747498", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3431, "upload_time": "2019-01-15T08:13:24", "upload_time_iso_8601": "2019-01-15T08:13:24.427320Z", "url": "https://files.pythonhosted.org/packages/d2/67/bc2ace16a58f954d354b7487e524f87a57602d5798a00dd0b9aaa758e9bb/django_json_ld-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9c713abd9538d560168c5aa176a00ea", "sha256": "9d27b5c64e5d90e30308633bda6c4985d3ec28c53166b39e03437e73b0734a66"}, "downloads": -1, "filename": "django-json-ld-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f9c713abd9538d560168c5aa176a00ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2208, "upload_time": "2019-01-15T08:13:26", "upload_time_iso_8601": "2019-01-15T08:13:26.399555Z", "url": "https://files.pythonhosted.org/packages/c9/5d/3ae6fe27b831616bc55ee63dc89227557a625401220b058ed1c562553105/django-json-ld-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "de4514915cc1c0829f00627353561d41", "sha256": "9cd01de353c0f2941b2bcbfe6ec998979695662d92fad667b764d51547bf6cdf"}, "downloads": -1, "filename": "django_json_ld-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "de4514915cc1c0829f00627353561d41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5159, "upload_time": "2019-03-11T03:42:58", "upload_time_iso_8601": "2019-03-11T03:42:58.679780Z", "url": "https://files.pythonhosted.org/packages/15/61/3c32c8593ce0dcc540a8f3aa8a5365c95072c2e8108088a9c8570d68068d/django_json_ld-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2042b7676a57eaaf62a4df490250e156", "sha256": "02574c8e5ea18f5c871cbca14c6ead675a58abac806274a8a49f642c74fbe827"}, "downloads": -1, "filename": "django-json-ld-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2042b7676a57eaaf62a4df490250e156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3608, "upload_time": "2019-03-11T03:43:00", "upload_time_iso_8601": "2019-03-11T03:43:00.878308Z", "url": "https://files.pythonhosted.org/packages/61/af/e9785f68cc8c5fde13c739d95aacb67e0d948716848930f63a4fdcb743c9/django-json-ld-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d149f0776fc004d04ba5598e059c8e28", "sha256": "8b67ce8b1254d006c8534b7d27535122c19425c259b26c530bc9691bf087d925"}, "downloads": -1, "filename": "django_json_ld-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d149f0776fc004d04ba5598e059c8e28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7269, "upload_time": "2019-03-14T11:53:31", "upload_time_iso_8601": "2019-03-14T11:53:31.876304Z", "url": "https://files.pythonhosted.org/packages/4b/3e/8997880d0a76f9631a28b616a445dcc236790198d40ce75c5ddfc99d3a5a/django_json_ld-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72b49300dfcdffd727949f946cd8d62", "sha256": "183d6ffe0758effbec7cfa3f10c8bff22ed0524123aed956d16a200deff4849f"}, "downloads": -1, "filename": "django-json-ld-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e72b49300dfcdffd727949f946cd8d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5389, "upload_time": "2019-03-14T11:53:33", "upload_time_iso_8601": "2019-03-14T11:53:33.084650Z", "url": "https://files.pythonhosted.org/packages/3b/53/dd4baf2a71aa25ccc28d90f8bf680670850653bf728170063133585ee340/django-json-ld-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d149f0776fc004d04ba5598e059c8e28", "sha256": "8b67ce8b1254d006c8534b7d27535122c19425c259b26c530bc9691bf087d925"}, "downloads": -1, "filename": "django_json_ld-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d149f0776fc004d04ba5598e059c8e28", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7269, "upload_time": "2019-03-14T11:53:31", "upload_time_iso_8601": "2019-03-14T11:53:31.876304Z", "url": "https://files.pythonhosted.org/packages/4b/3e/8997880d0a76f9631a28b616a445dcc236790198d40ce75c5ddfc99d3a5a/django_json_ld-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e72b49300dfcdffd727949f946cd8d62", "sha256": "183d6ffe0758effbec7cfa3f10c8bff22ed0524123aed956d16a200deff4849f"}, "downloads": -1, "filename": "django-json-ld-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e72b49300dfcdffd727949f946cd8d62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5389, "upload_time": "2019-03-14T11:53:33", "upload_time_iso_8601": "2019-03-14T11:53:33.084650Z", "url": "https://files.pythonhosted.org/packages/3b/53/dd4baf2a71aa25ccc28d90f8bf680670850653bf728170063133585ee340/django-json-ld-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:29 2020"}