{"info": {"author": "Alain Barthe", "author_email": "barthe@albar.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Perl", "Programming Language :: Python", "Topic :: Utilities"], "description": "A priori, it is a strange idea to execute pieces of perl code from a python\r\nprogram, unless you have to use an existing perl API and you want to write as\r\nless perl code as possible. In this case (and only it, in my opinion),\r\nperlprocess may help you. See VMPython as an example of use.\r\n\r\nWhen a perlprocess object is created, a separate process is launched, running a\r\nsmall perl script that expects commands on STDIN. If a string is given as\r\nparameter to the perlprocess constructor, it is used as a prolog for the perl\r\nscript. It is usefull mainly to declare use clauses or some useful functions.\r\n\r\nWhen invoking the run(command) method of the perlprocess object, the command is\r\nsent to the perl process as a string containing eventually several perl\r\nstatements, eventually among several lines. This string is evaluated, the result\r\nis printed on stdout. If an error occurs (perl variable $@ not empty),\r\nPerlRuntimeError is raised.\r\nIf you define a perl variable of any kind in the perl process, this variable\r\nremains alive until you undefine it.", "description_content_type": null, "docs_url": null, "download_url": "http://www.albar.fr/downloads/perlprocess.py", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.albar.fr/perlprocess_html/index.html", "keywords": "perl API process", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "perlprocess", "package_url": "https://pypi.org/project/perlprocess/", "platform": "Any platform", "project_url": "https://pypi.org/project/perlprocess/", "project_urls": {"Download": "http://www.albar.fr/downloads/perlprocess.py", "Homepage": "http://www.albar.fr/perlprocess_html/index.html"}, "release_url": "https://pypi.org/project/perlprocess/0.1/", "requires_dist": null, "requires_python": null, "summary": "This module provides a way to execute perl statements in a parallel perl process.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A priori, it is a strange idea to execute pieces of perl code from a python\nprogram, unless you have to use an existing perl API and you want to write as\nless perl code as possible. In this case (and only it, in my opinion),\nperlprocess may help you. See VMPython as an example of use.</p>\n<p>When a perlprocess object is created, a separate process is launched, running a\nsmall perl script that expects commands on STDIN. If a string is given as\nparameter to the perlprocess constructor, it is used as a prolog for the perl\nscript. It is usefull mainly to declare use clauses or some useful functions.</p>\n<p>When invoking the run(command) method of the perlprocess object, the command is\nsent to the perl process as a string containing eventually several perl\nstatements, eventually among several lines. This string is evaluated, the result\nis printed on stdout. If an error occurs (perl variable $@ not empty),\nPerlRuntimeError is raised.\nIf you define a perl variable of any kind in the perl process, this variable\nremains alive until you undefine it.</p>\n\n          </div>"}, "last_serial": 91522, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 02:56:16 2020"}