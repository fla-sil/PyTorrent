{"info": {"author": "Thomas Jiang", "author_email": "thomasjiangcy@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Django REST Mock\n================\n\nMock Express server generated based on your views, that can come in handy when developing REST APIs with Django.\n\nTypically, the Django developer can first create all the views with docstrings and pass on the project to the front-end developer who can work with the mock server which outputs what is already expected. This allows frontend devs to work with a stable and predictable API.\n\n\nRequirements\n============\nRequires Django 1.11 or later and Node.js.\n\nNote that this requires views to be Class-based Views.\n\n\nInstallation\n============\n\nUsing pip::\n\n    $ pip install django-rest-mock\n\n\nThen include ``rest_mock_server`` into your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...\n        'rest_mock_server',\n        ...\n    )\n\n\nUsage\n=====\n\nAfter including docstrings for the views you wish to generate endpoints for, you may run the following commands\n\nGenerates an ExpressJS file::\n\n    $ python manage.py genmockserver\n\nStarts an ExpressJS server (it will generate an ExpressJS file if necessary)::\n\n    $ python manage.py startmockserver\n\n\nSyntax\n======\n\n1. Basic endpoint::\n\n    class SomeView(APIView):\n        \"\"\"\n        URL: /some-view/\n        \"\"\"\n\n        def get(self, request, *args, **kwargs):\n            \"\"\"\n            ```\n            {\n                \"data\": \"Hello, world!\"\n            }\n            ```\n            \"\"\"\n            pass\n\n\n2. RESTful endpoint with list & instances::\n\n    class ResourceListView(ListCreateAPIView):\n        \"\"\"\n        URL: /resource/__key\n        \"\"\"\n\n        def post(self, request, *args, **kwargs):\n            \"\"\"\n            ```\n            {\n                \"__options\": {\n                        \"excludeKey\": true\n                },\n            }\n            ```\n            \"\"\"\n            pass\n\n    class ResourceView(RetrieveUpdateDestroyAPIView):\n        \"\"\"\n        URL: /resource/__key\n        \"\"\"\n\n        def get(self, request, *args, **kwargs):\n            \"\"\"\n            ```\n            {\n                \"__key\": \"<id:int>\",\n                \"__key_position\": \"url\",\n                \"__mockcount\": 5,\n                \"__options\": {\n                    \"modifiers\": [\"patch\", \"put\", \"delete\"],\n                    \"excludeKey\": false\n                },\n                \"id\": \"<int>\",\n                \"name\": \"<name>\",\n                \"complexStructure\": [\n                    {\n                        \"link\": \"<int::10>\",\n                        \"url\": \"<uri>\",\n                        \"related_user\": {\n                            \"id\": \"<int:1:5>\",\n                            \"hash\": \"<sha256>\"\n                        }\n                    }\n                ]\n            }\n            ```\n            \"\"\"\n            pass\n        \n        def put(self, request, *args, **kwargs):\n            \"\"\"We won't need to specify any response here\"\"\"\n            pass\n        \n        def patch(self, request, *args, **kwargs):\n            \"\"\"We won't need to specify any response here\"\"\"\n            pass\n        \n        def delete(self, request, *args, **kwargs):\n            \"\"\"We won't need to specify any response here\"\"\"\n            pass\n\nWhen creating fixtures for a resource (CRUD), you only need to work with the instance endpoint, in ``Django REST framework``, it's typically the endpoint that requires a unique ID - e.g. ``/some-resource/<pk>``\n\nYou need to specify ``__key`` in the url and also in the response as above. The value follows the following syntax ``<name-of-unique-key:data-type>``.\nYou will also need to specify the position of the key: either ``url`` or ``query``. If it is ``url``, it exists as a URL param, and ``query`` means that the key should be found in query string.\n\n* ``__mockcount``: (defaults to 1) Represents the number of instances of this fixture to create\n* ``__options``: Possible options related to this endpoint:\n* ``modifiers``: a list of modifier methods allowed for this resource. If you don't specify a method, that method won't be allowed for that endpoint\n* ``excludeKey``: this can be specified to exclude a method from matching ``__key`` in the url. E.g. for the POST method for ``/resource/``, you might want to exclude it\n\nThe syntax for fake data is as follows: ``<fakedatatype:min:max>``\n\n* ``fakedatatype`` is any attribute that can be generated by `Faker <https://faker.readthedocs.io/>`_\n* ``min``: for numbers, it will only generated random numbers that are at least ``min`` or greater. For strings, this will be the first index it will slice from\n* ``max``: for numbers, it will only generated random numbers that are at most ``max`` or smaller. For strings, this will be the last index\n\nSpecial Characters\n\n* ``^``: Putting a caret in front of the variable like \"<^int:500:1000>\" will generate only unique numbers between 500 to 1000\n\n\nPOST requests will not create new instances, but PUT, PATCH and DELETE will work as expected on the resources.\nThe resources are reset everytime the server is restarted.\n\n\nMeta-Keys\n=============\n\nAs you have probably seen in the examples above, there are special keys prefixed with double-underscores such as ``__key``. These are meta-keys which will be used to grant special properties to the mock responses.\n\n* ``__key``: Represents the primary key/unique identifier of an instance\n* ``__key_position``: Where the ``__key`` should be located in the url - there are only two options \"url\" or \"query\".\n    * ``url``: The key should be within the main url such as ``/api/example/__key``\n    * ``query``: They key should be within the params such as ``api/example?id[str]=__key``\n* ``__mockcount``: The number of instances to create. Note that if ``__key`` is specified, an endpoint will be created that lists all the individual instances. However, if no ``__key`` is specified, then the endpoint will just return an array of N instances where N is specified in ``__mockcount``\n* ``__relationships``: Relationships dictate simple relationships between items in the mock response. The syntax is always \"<source__relationship__target>\"\n    * ``count``: It would be best illustrated with an example::\n\n            {\n                \"__relationships\": [\n                    \"user_count__count__users\",\n                ],\n                \"user_count\": 20,\n                \"users\": [\n                    {\n                        \"id\": \"<int::50>\",\n                        \"user\": \"<name>\"\n                    }\n                ]\n            }\n\n    * If you want to specify a source value without displaying it in the eventual endpoint, you may use the hidden syntax with a double-dash::\n\n            {\n                \"__relationships\": [\n                    \"--user_count__count__users\",\n                ],\n                \"--user_count\": 20,\n                \"users\": [\n                    {\n                        \"id\": \"<int::50>\",\n                        \"user\": \"<name>\"\n                    }\n                ]\n            }\n* ``__options``: Possible options related to this endpoint are as follows\n    * ``modifiers``: a list of modifier methods allowed for this resource. If you don't specify a method, that method won't be allowed for that endpoint\n    * ``excludeKey``: this can be specified to exclude a method from matching ``__key`` in the url. E.g. for the POST method for ``/resource/``, you might want to exclude it\n\n\nFixtures\n========\n\nMore often than not, you will need to load fixtures to populate the mock endpoints.\n\nWe can load fixtures during generation by specifying the ``--fixtures`` flag:\n``python manage.py genmockserver --fixtures data``\n\nNote that the folders must be direct parents. All files with ``.json`` extension will be taken into account.\n\nThe syntax for that will be: \"<key__from__filename>\"\n\nIf a file called ``users.json`` was loaded, then you can do::\n\n    {\n        \"id\": \"<id__from__users>\",\n        \"full_name\": \"<first_name__from__users> <last_name__from__users>\",\n        \"contact\": \"<contact__from__users>\"\n    }\n\nThe JSON files must follow Django's format of JSON fixtures and the fields must include the keys used in the mock response. So \"id\", \"first_name\", \"last_name\" and \"contact\" must all exist in the users fields.\n\n\nAdvanced Usage with *\n=====================\n\nThere may be a situation where you would like to specify the keys in an endpoint and what type of response each key maps to.\n\nFor example, you might have the following base URL \"/api/example\" and you would like to have the following key definition::\n\n    URL: /api/example?id[str]=__key\n\n    {\n        \"__key\": \"<*id:str>\",\n        \"__key_position\": \"query\",\n        \"users\": [\n            {\n                \"id\": \"<id__from__users>\",\n                \"name\": \"<name__from__users>\"\n            }\n        ],\n        \"burgers\": [\n            {\n                \"id\": \"<id__from__burgers>\",\n                \"burger_type\": \"<burger__from__burgers>\"\n            }\n        ]\n    }\n\nThis will generate an endpoint that allows for two specific keys \"/api/example?id=users\" and \"/api/example?id=burgers\", which will each respond with whatever is defined under them.\nNote the asterisk in front of the key which indicates that all non-meta keys will be taken as keys for this endpoint. In this case, our keys are \"users\" and \"burgers\"\n\nExample\n=======\n\nRefer to the example app for a detailed example.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thomasjiangcy/django-rest-mock-server", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-rest-mock", "package_url": "https://pypi.org/project/django-rest-mock/", "platform": "", "project_url": "https://pypi.org/project/django-rest-mock/", "project_urls": {"Homepage": "https://github.com/thomasjiangcy/django-rest-mock-server"}, "release_url": "https://pypi.org/project/django-rest-mock/0.2.9/", "requires_dist": null, "requires_python": "", "summary": "Mock Express server generated based on your views, that can come in handy when developing REST APIs with Django", "version": "0.2.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-rest-mock\">\n<h2>Django REST Mock</h2>\n<p>Mock Express server generated based on your views, that can come in handy when developing REST APIs with Django.</p>\n<p>Typically, the Django developer can first create all the views with docstrings and pass on the project to the front-end developer who can work with the mock server which outputs what is already expected. This allows frontend devs to work with a stable and predictable API.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Requires Django 1.11 or later and Node.js.</p>\n<p>Note that this requires views to be Class-based Views.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using pip:</p>\n<pre>$ pip install django-rest-mock\n</pre>\n<p>Then include <tt>rest_mock_server</tt> into your <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'rest_mock_server',\n    ...\n)\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>After including docstrings for the views you wish to generate endpoints for, you may run the following commands</p>\n<p>Generates an ExpressJS file:</p>\n<pre>$ python manage.py genmockserver\n</pre>\n<p>Starts an ExpressJS server (it will generate an ExpressJS file if necessary):</p>\n<pre>$ python manage.py startmockserver\n</pre>\n</div>\n<div id=\"syntax\">\n<h2>Syntax</h2>\n<ol>\n<li><p>Basic endpoint:</p>\n<pre>class SomeView(APIView):\n    \"\"\"\n    URL: /some-view/\n    \"\"\"\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        ```\n        {\n            \"data\": \"Hello, world!\"\n        }\n        ```\n        \"\"\"\n        pass\n</pre>\n</li>\n<li><p>RESTful endpoint with list &amp; instances:</p>\n<pre>class ResourceListView(ListCreateAPIView):\n    \"\"\"\n    URL: /resource/__key\n    \"\"\"\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        ```\n        {\n            \"__options\": {\n                    \"excludeKey\": true\n            },\n        }\n        ```\n        \"\"\"\n        pass\n\nclass ResourceView(RetrieveUpdateDestroyAPIView):\n    \"\"\"\n    URL: /resource/__key\n    \"\"\"\n\n    def get(self, request, *args, **kwargs):\n        \"\"\"\n        ```\n        {\n            \"__key\": \"&lt;id:int&gt;\",\n            \"__key_position\": \"url\",\n            \"__mockcount\": 5,\n            \"__options\": {\n                \"modifiers\": [\"patch\", \"put\", \"delete\"],\n                \"excludeKey\": false\n            },\n            \"id\": \"&lt;int&gt;\",\n            \"name\": \"&lt;name&gt;\",\n            \"complexStructure\": [\n                {\n                    \"link\": \"&lt;int::10&gt;\",\n                    \"url\": \"&lt;uri&gt;\",\n                    \"related_user\": {\n                        \"id\": \"&lt;int:1:5&gt;\",\n                        \"hash\": \"&lt;sha256&gt;\"\n                    }\n                }\n            ]\n        }\n        ```\n        \"\"\"\n        pass\n\n    def put(self, request, *args, **kwargs):\n        \"\"\"We won't need to specify any response here\"\"\"\n        pass\n\n    def patch(self, request, *args, **kwargs):\n        \"\"\"We won't need to specify any response here\"\"\"\n        pass\n\n    def delete(self, request, *args, **kwargs):\n        \"\"\"We won't need to specify any response here\"\"\"\n        pass\n</pre>\n</li>\n</ol>\n<p>When creating fixtures for a resource (CRUD), you only need to work with the instance endpoint, in <tt>Django REST framework</tt>, it\u2019s typically the endpoint that requires a unique ID - e.g. <tt><span class=\"pre\">/some-resource/&lt;pk&gt;</span></tt></p>\n<p>You need to specify <tt>__key</tt> in the url and also in the response as above. The value follows the following syntax <tt><span class=\"pre\">&lt;name-of-unique-key:data-type&gt;</span></tt>.\nYou will also need to specify the position of the key: either <tt>url</tt> or <tt>query</tt>. If it is <tt>url</tt>, it exists as a URL param, and <tt>query</tt> means that the key should be found in query string.</p>\n<ul>\n<li><tt>__mockcount</tt>: (defaults to 1) Represents the number of instances of this fixture to create</li>\n<li><tt>__options</tt>: Possible options related to this endpoint:</li>\n<li><tt>modifiers</tt>: a list of modifier methods allowed for this resource. If you don\u2019t specify a method, that method won\u2019t be allowed for that endpoint</li>\n<li><tt>excludeKey</tt>: this can be specified to exclude a method from matching <tt>__key</tt> in the url. E.g. for the POST method for <tt>/resource/</tt>, you might want to exclude it</li>\n</ul>\n<p>The syntax for fake data is as follows: <tt>&lt;fakedatatype:min:max&gt;</tt></p>\n<ul>\n<li><tt>fakedatatype</tt> is any attribute that can be generated by <a href=\"https://faker.readthedocs.io/\" rel=\"nofollow\">Faker</a></li>\n<li><tt>min</tt>: for numbers, it will only generated random numbers that are at least <tt>min</tt> or greater. For strings, this will be the first index it will slice from</li>\n<li><tt>max</tt>: for numbers, it will only generated random numbers that are at most <tt>max</tt> or smaller. For strings, this will be the last index</li>\n</ul>\n<p>Special Characters</p>\n<ul>\n<li><tt>^</tt>: Putting a caret in front of the variable like \u201c&lt;^int:500:1000&gt;\u201d will generate only unique numbers between 500 to 1000</li>\n</ul>\n<p>POST requests will not create new instances, but PUT, PATCH and DELETE will work as expected on the resources.\nThe resources are reset everytime the server is restarted.</p>\n</div>\n<div id=\"meta-keys\">\n<h2>Meta-Keys</h2>\n<p>As you have probably seen in the examples above, there are special keys prefixed with double-underscores such as <tt>__key</tt>. These are meta-keys which will be used to grant special properties to the mock responses.</p>\n<ul>\n<li><p><tt>__key</tt>: Represents the primary key/unique identifier of an instance</p>\n</li>\n<li><dl>\n<dt><tt>__key_position</tt>: Where the <tt>__key</tt> should be located in the url - there are only two options \u201curl\u201d or \u201cquery\u201d.</dt>\n<dd><ul>\n<li><tt>url</tt>: The key should be within the main url such as <tt>/api/example/__key</tt></li>\n<li><tt>query</tt>: They key should be within the params such as <tt><span class=\"pre\">api/example?id[str]=__key</span></tt></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p><tt>__mockcount</tt>: The number of instances to create. Note that if <tt>__key</tt> is specified, an endpoint will be created that lists all the individual instances. However, if no <tt>__key</tt> is specified, then the endpoint will just return an array of N instances where N is specified in <tt>__mockcount</tt></p>\n</li>\n<li><dl>\n<dt><tt>__relationships</tt>: Relationships dictate simple relationships between items in the mock response. The syntax is always \u201c&lt;source__relationship__target&gt;\u201d</dt>\n<dd><ul>\n<li><p><tt>count</tt>: It would be best illustrated with an example:</p>\n<pre>{\n    \"__relationships\": [\n        \"user_count__count__users\",\n    ],\n    \"user_count\": 20,\n    \"users\": [\n        {\n            \"id\": \"&lt;int::50&gt;\",\n            \"user\": \"&lt;name&gt;\"\n        }\n    ]\n}\n</pre>\n</li>\n<li><p>If you want to specify a source value without displaying it in the eventual endpoint, you may use the hidden syntax with a double-dash:</p>\n<pre>{\n    \"__relationships\": [\n        \"--user_count__count__users\",\n    ],\n    \"--user_count\": 20,\n    \"users\": [\n        {\n            \"id\": \"&lt;int::50&gt;\",\n            \"user\": \"&lt;name&gt;\"\n        }\n    ]\n}\n</pre>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><tt>__options</tt>: Possible options related to this endpoint are as follows</dt>\n<dd><ul>\n<li><tt>modifiers</tt>: a list of modifier methods allowed for this resource. If you don\u2019t specify a method, that method won\u2019t be allowed for that endpoint</li>\n<li><tt>excludeKey</tt>: this can be specified to exclude a method from matching <tt>__key</tt> in the url. E.g. for the POST method for <tt>/resource/</tt>, you might want to exclude it</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</div>\n<div id=\"fixtures\">\n<h2>Fixtures</h2>\n<p>More often than not, you will need to load fixtures to populate the mock endpoints.</p>\n<p>We can load fixtures during generation by specifying the <tt><span class=\"pre\">--fixtures</span></tt> flag:\n<tt>python manage.py genmockserver <span class=\"pre\">--fixtures</span> data</tt></p>\n<p>Note that the folders must be direct parents. All files with <tt>.json</tt> extension will be taken into account.</p>\n<p>The syntax for that will be: \u201c&lt;key__from__filename&gt;\u201d</p>\n<p>If a file called <tt>users.json</tt> was loaded, then you can do:</p>\n<pre>{\n    \"id\": \"&lt;id__from__users&gt;\",\n    \"full_name\": \"&lt;first_name__from__users&gt; &lt;last_name__from__users&gt;\",\n    \"contact\": \"&lt;contact__from__users&gt;\"\n}\n</pre>\n<p>The JSON files must follow Django\u2019s format of JSON fixtures and the fields must include the keys used in the mock response. So \u201cid\u201d, \u201cfirst_name\u201d, \u201clast_name\u201d and \u201ccontact\u201d must all exist in the users fields.</p>\n</div>\n<div id=\"advanced-usage-with\">\n<h2>Advanced Usage with *</h2>\n<p>There may be a situation where you would like to specify the keys in an endpoint and what type of response each key maps to.</p>\n<p>For example, you might have the following base URL \u201c/api/example\u201d and you would like to have the following key definition:</p>\n<pre>URL: /api/example?id[str]=__key\n\n{\n    \"__key\": \"&lt;*id:str&gt;\",\n    \"__key_position\": \"query\",\n    \"users\": [\n        {\n            \"id\": \"&lt;id__from__users&gt;\",\n            \"name\": \"&lt;name__from__users&gt;\"\n        }\n    ],\n    \"burgers\": [\n        {\n            \"id\": \"&lt;id__from__burgers&gt;\",\n            \"burger_type\": \"&lt;burger__from__burgers&gt;\"\n        }\n    ]\n}\n</pre>\n<p>This will generate an endpoint that allows for two specific keys \u201c/api/example?id=users\u201d and \u201c/api/example?id=burgers\u201d, which will each respond with whatever is defined under them.\nNote the asterisk in front of the key which indicates that all non-meta keys will be taken as keys for this endpoint. In this case, our keys are \u201cusers\u201d and \u201cburgers\u201d</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Refer to the example app for a detailed example.</p>\n</div>\n\n          </div>"}, "last_serial": 3653632, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ba6716cb6f0536efdb239a25d89419a0", "sha256": "9fcebb4be82fad35b533d13bfaa88096b0427edb04bc17bf8692a1ad8e9d4952"}, "downloads": -1, "filename": "django-rest-mock-0.1.tar.gz", "has_sig": false, "md5_digest": "ba6716cb6f0536efdb239a25d89419a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3339, "upload_time": "2018-02-21T01:31:47", "upload_time_iso_8601": "2018-02-21T01:31:47.693699Z", "url": "https://files.pythonhosted.org/packages/06/5f/e08221c736c10ce71bc4cd6408f0a0503d652a388bab6acb48c6d3e03104/django-rest-mock-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fcfb7670dcab71f9d8dcf2d3de50990f", "sha256": "0ecc7059476162d8bba3dfd89a84b89a34da976b5fe9100db3620a742a957041"}, "downloads": -1, "filename": "django-rest-mock-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fcfb7670dcab71f9d8dcf2d3de50990f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3370, "upload_time": "2018-02-21T01:44:45", "upload_time_iso_8601": "2018-02-21T01:44:45.006160Z", "url": "https://files.pythonhosted.org/packages/59/cd/aee620cccc5012a5457e7a0f4ad689ded96e178094f3fdec0742c1ec5d06/django-rest-mock-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6f39d842e37a088278365645b471d91d", "sha256": "e58b317f0de6041c215cc75c94406137ffd4ba3a240bf746335c88bacbee7721"}, "downloads": -1, "filename": "django-rest-mock-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f39d842e37a088278365645b471d91d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3440, "upload_time": "2018-02-21T02:15:21", "upload_time_iso_8601": "2018-02-21T02:15:21.319349Z", "url": "https://files.pythonhosted.org/packages/ed/31/cd20fa19748e7d229b08ac52001f4650e887568ccbd0e86f3898e392e427/django-rest-mock-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "6937dfd06aae498618d3aeee8328d35b", "sha256": "4bd67cf2c609ed4b803e82e906e4a0397e35097ac3cd6857e90f52b1e91979ec"}, "downloads": -1, "filename": "django-rest-mock-0.1.3.tar.gz", "has_sig": false, "md5_digest": "6937dfd06aae498618d3aeee8328d35b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3481, "upload_time": "2018-02-21T02:52:57", "upload_time_iso_8601": "2018-02-21T02:52:57.518621Z", "url": "https://files.pythonhosted.org/packages/0d/fd/864c43150ce691496ab23e15369546c9e884bbf7c18fe85d5c98257b56cd/django-rest-mock-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "617e0318e6dab4e8402e057717a3df78", "sha256": "c5b3b6b78cbfee860b32079b831997911ca5a16b1959b7244c20c016410aae17"}, "downloads": -1, "filename": "django-rest-mock-0.1.4.tar.gz", "has_sig": false, "md5_digest": "617e0318e6dab4e8402e057717a3df78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5895, "upload_time": "2018-02-21T03:18:13", "upload_time_iso_8601": "2018-02-21T03:18:13.787981Z", "url": "https://files.pythonhosted.org/packages/79/a1/a219e7d19d8f9fcd5d012aa8d3ca96f689137d1e0cb65de209b9661bd32d/django-rest-mock-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "b9660a7c78c3559379a15cbe53356d2d", "sha256": "c5c80b2648b7a6dc5462923734e3766cc576ae48e3bb76554e639e8b698e294b"}, "downloads": -1, "filename": "django-rest-mock-0.1.5.tar.gz", "has_sig": false, "md5_digest": "b9660a7c78c3559379a15cbe53356d2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5008, "upload_time": "2018-02-21T03:44:24", "upload_time_iso_8601": "2018-02-21T03:44:24.299453Z", "url": "https://files.pythonhosted.org/packages/69/f1/c4c254e0545ae7ea2be2178e7ca1ff6242bc973b65deaa848c0d20417f05/django-rest-mock-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "d5ee5f39955ef0e8ed639245010248b2", "sha256": "f8dfce9d390a678b6af393b52eafff65ad04bc6506dc2147c5017551f3d1d2ed"}, "downloads": -1, "filename": "django-rest-mock-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d5ee5f39955ef0e8ed639245010248b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4950, "upload_time": "2018-02-21T04:05:31", "upload_time_iso_8601": "2018-02-21T04:05:31.338175Z", "url": "https://files.pythonhosted.org/packages/11/fa/2694f52f45cf777d4d2dd4905a27c11be7aedc0540019c63d21385622131/django-rest-mock-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "69768e14d12d8f801a17253fd5336bdc", "sha256": "4a44887dda53755d2d6d82f01d21819b9f64ae0f33c5313045313e0130726070"}, "downloads": -1, "filename": "django-rest-mock-0.1.7.tar.gz", "has_sig": false, "md5_digest": "69768e14d12d8f801a17253fd5336bdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4939, "upload_time": "2018-02-21T04:12:29", "upload_time_iso_8601": "2018-02-21T04:12:29.933099Z", "url": "https://files.pythonhosted.org/packages/92/a8/2dc905980d10f7e363348888469f15b00ad6aa185afbee8a154c5f0b484f/django-rest-mock-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "3f7d0234a10737440ba3e4ce478d6cb0", "sha256": "c95273c8eea62f7a104a14de9779c49a172dd0fcb055de4d28f3086da2910f1d"}, "downloads": -1, "filename": "django-rest-mock-0.1.8.tar.gz", "has_sig": false, "md5_digest": "3f7d0234a10737440ba3e4ce478d6cb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5443, "upload_time": "2018-02-21T05:36:41", "upload_time_iso_8601": "2018-02-21T05:36:41.881780Z", "url": "https://files.pythonhosted.org/packages/10/1a/4c8c3f834169a770ff6b245a5a39848c961b90918ec056110ed284b78ec2/django-rest-mock-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "10302e1c77906e188132088df1091790", "sha256": "cc9dd6f61a7a48f633f9f20e272122b98c4c485262c64d0dabc7a28866d5c7a6"}, "downloads": -1, "filename": "django-rest-mock-0.1.9.tar.gz", "has_sig": false, "md5_digest": "10302e1c77906e188132088df1091790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5443, "upload_time": "2018-02-21T05:40:03", "upload_time_iso_8601": "2018-02-21T05:40:03.572557Z", "url": "https://files.pythonhosted.org/packages/39/89/ad331d6ab9b875cfe5cd050b0ff87920ca331a0ac3c4116933204fbec27e/django-rest-mock-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a1be01198f68260bef4281bbc3d097ec", "sha256": "6a343bd8cb584f6094300f74fc9396875d33d6ed651060ac75c7532240c8420f"}, "downloads": -1, "filename": "django-rest-mock-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a1be01198f68260bef4281bbc3d097ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10415, "upload_time": "2018-02-23T08:48:27", "upload_time_iso_8601": "2018-02-23T08:48:27.392774Z", "url": "https://files.pythonhosted.org/packages/14/fe/792632669d782b696ace4c641628a2806a09b5de33e1c8696c2636fa0fac/django-rest-mock-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1ff16bf671a3f1e0ccc71d31d45523ee", "sha256": "c034878d0fcc48dd33cffe06332b5d5753978d2fb5ae834c0ef01af6ed485150"}, "downloads": -1, "filename": "django-rest-mock-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ff16bf671a3f1e0ccc71d31d45523ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10424, "upload_time": "2018-02-23T08:52:56", "upload_time_iso_8601": "2018-02-23T08:52:56.962141Z", "url": "https://files.pythonhosted.org/packages/2d/cb/5f3f237ee76e0291344836845a98754d472be18dca9ebf433a9c73080335/django-rest-mock-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d2b3c326d2c15689c837b04233b9a2ac", "sha256": "f5c8a5adff178c94d53e0055700b96ccbd8bd0bf506440b0ba5e25f2cade9423"}, "downloads": -1, "filename": "django-rest-mock-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d2b3c326d2c15689c837b04233b9a2ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15837, "upload_time": "2018-03-05T08:13:46", "upload_time_iso_8601": "2018-03-05T08:13:46.571169Z", "url": "https://files.pythonhosted.org/packages/77/b4/4bfb49ccabd7e945f4ce285c71d7aec8d5785d4b84b3cd62e0a75ee66daf/django-rest-mock-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "2c023d1f6b226ba874363bbbd17fb06b", "sha256": "f959d818dbb5eddcbf96c7aef18a341475dd351591d7ebaafc624d6a4196de88"}, "downloads": -1, "filename": "django-rest-mock-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2c023d1f6b226ba874363bbbd17fb06b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15875, "upload_time": "2018-03-05T08:19:52", "upload_time_iso_8601": "2018-03-05T08:19:52.674647Z", "url": "https://files.pythonhosted.org/packages/62/3c/f1d8c5905641f987c918eef7ae198c67ddd2e91a4d03a92a41020064275c/django-rest-mock-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "772e4513e5973d69dde39d46bf1ed609", "sha256": "9d2d8987e58360335876299971d08f0d7e9ef2cf221f206977892a105376589a"}, "downloads": -1, "filename": "django-rest-mock-0.2.4.tar.gz", "has_sig": false, "md5_digest": "772e4513e5973d69dde39d46bf1ed609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15939, "upload_time": "2018-03-05T10:30:56", "upload_time_iso_8601": "2018-03-05T10:30:56.659468Z", "url": "https://files.pythonhosted.org/packages/09/58/b60a48e0a66e39e1bd182330573dd56105f20ef11bdae9ca74e5a46ae5e5/django-rest-mock-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "3845efed2102d5060bf01e28b86d7009", "sha256": "ade94638cd7c5af53637102c951bc4bd31171db25526bb5167fd4a74a6f3e2ad"}, "downloads": -1, "filename": "django-rest-mock-0.2.5.tar.gz", "has_sig": false, "md5_digest": "3845efed2102d5060bf01e28b86d7009", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16237, "upload_time": "2018-03-06T03:08:53", "upload_time_iso_8601": "2018-03-06T03:08:53.970663Z", "url": "https://files.pythonhosted.org/packages/3f/7a/8e98b9e7c6df0f3d0b844ccab8e9a8e160a115f63b7ec2625a1344311d64/django-rest-mock-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "43b6abc9fa3507e21fa905fd3b8fa24c", "sha256": "c5dc2178dd0d6ce5e21f9f47bd0bf831dbc610c65cf949e38400400990c35438"}, "downloads": -1, "filename": "django-rest-mock-0.2.6.tar.gz", "has_sig": false, "md5_digest": "43b6abc9fa3507e21fa905fd3b8fa24c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18099, "upload_time": "2018-03-06T07:12:52", "upload_time_iso_8601": "2018-03-06T07:12:52.670069Z", "url": "https://files.pythonhosted.org/packages/03/ce/cb1830646d8a7cce3ccecae78796fa3d34b501d64a95d8031ca872c8a9ce/django-rest-mock-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "189387bdf9e65d167691c58cec70dd91", "sha256": "25d72786aa3de8027197c94de16ab6b0409ee1418fd2dcbbe2761b98cd1ffd83"}, "downloads": -1, "filename": "django-rest-mock-0.2.7.tar.gz", "has_sig": false, "md5_digest": "189387bdf9e65d167691c58cec70dd91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19618, "upload_time": "2018-03-07T07:43:42", "upload_time_iso_8601": "2018-03-07T07:43:42.007535Z", "url": "https://files.pythonhosted.org/packages/5d/8d/9e389a27a280caae63be68832bf962256a18a7c1ad21c3c509b6f037d724/django-rest-mock-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "db5e7b1fc7a259a7ff301df5ce9d1471", "sha256": "f37e44b8e18fea8d2eb5942f831a82d4a435db56373a76ce202744564c524733"}, "downloads": -1, "filename": "django-rest-mock-0.2.8.tar.gz", "has_sig": false, "md5_digest": "db5e7b1fc7a259a7ff301df5ce9d1471", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20273, "upload_time": "2018-03-09T08:28:01", "upload_time_iso_8601": "2018-03-09T08:28:01.759021Z", "url": "https://files.pythonhosted.org/packages/34/20/ba27b9a1c15ca4de87c410149796ed411fe5fc54cc0ce2f7ba987462e55f/django-rest-mock-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "b7f944dcd0c157e595790c87f3337c76", "sha256": "f01854d15ce25db8bf3f774cfcfeaa44c1ca076319d29a09f0e7bf7542e91f37"}, "downloads": -1, "filename": "django-rest-mock-0.2.9.tar.gz", "has_sig": false, "md5_digest": "b7f944dcd0c157e595790c87f3337c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21449, "upload_time": "2018-03-09T08:31:30", "upload_time_iso_8601": "2018-03-09T08:31:30.972106Z", "url": "https://files.pythonhosted.org/packages/0d/5a/6ede43df9e17b8cd99568ed5680119e2cf92a0a54260eec679d7fe18252d/django-rest-mock-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7f944dcd0c157e595790c87f3337c76", "sha256": "f01854d15ce25db8bf3f774cfcfeaa44c1ca076319d29a09f0e7bf7542e91f37"}, "downloads": -1, "filename": "django-rest-mock-0.2.9.tar.gz", "has_sig": false, "md5_digest": "b7f944dcd0c157e595790c87f3337c76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21449, "upload_time": "2018-03-09T08:31:30", "upload_time_iso_8601": "2018-03-09T08:31:30.972106Z", "url": "https://files.pythonhosted.org/packages/0d/5a/6ede43df9e17b8cd99568ed5680119e2cf92a0a54260eec679d7fe18252d/django-rest-mock-0.2.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:02 2020"}