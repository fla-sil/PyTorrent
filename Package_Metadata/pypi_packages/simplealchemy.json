{"info": {"author": "Sridhar Ratnakumar", "author_email": "github@srid.name", "bugtrack_url": null, "classifiers": [], "description": "simplealchemy\n=============\n\nSimple wrapper around SQLalchemy\n\nThis module hides the complexity of SQLAlchemy to provide a simple interface to\nstore and manipulate Python objects each with a set of properties. Unlike the\ndefault behaviour of sqlalchemy's declaritive_base, inheritance of objects will\nnot require \"join\", rather it creates a separate table. This makes it easy to\nuse objects around from parts of not-so-related applications.\n\nFor example, a ``SourcePackage`` table is created by Grail. Then, PyPM will\nextend it as ``BinaryPackage`` which gets extended to ``RepoPackage``. The table\nfor RepoPackage will be concretely inherited, meaning - there will be just be\none table without having to 'join' to another SourcePackage table.\n\nAt the moment, PyPM and Grail use this module. It may not be of use to others,\nand we may change the api/behaviour. Hence, it makes sense to keep it as an\ninternal module.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ActiveState/simplealchemy", "keywords": "sqlalchemy database", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "simplealchemy", "package_url": "https://pypi.org/project/simplealchemy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/simplealchemy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/ActiveState/simplealchemy"}, "release_url": "https://pypi.org/project/simplealchemy/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple wrapper around SQLalchemy", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple wrapper around SQLalchemy</p>\n<p>This module hides the complexity of SQLAlchemy to provide a simple interface to\nstore and manipulate Python objects each with a set of properties. Unlike the\ndefault behaviour of sqlalchemy\u2019s declaritive_base, inheritance of objects will\nnot require \u201cjoin\u201d, rather it creates a separate table. This makes it easy to\nuse objects around from parts of not-so-related applications.</p>\n<p>For example, a <tt>SourcePackage</tt> table is created by Grail. Then, PyPM will\nextend it as <tt>BinaryPackage</tt> which gets extended to <tt>RepoPackage</tt>. The table\nfor RepoPackage will be concretely inherited, meaning - there will be just be\none table without having to \u2018join\u2019 to another SourcePackage table.</p>\n<p>At the moment, PyPM and Grail use this module. It may not be of use to others,\nand we may change the api/behaviour. Hence, it makes sense to keep it as an\ninternal module.</p>\n\n          </div>"}, "last_serial": 1194451, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 03:11:04 2020"}