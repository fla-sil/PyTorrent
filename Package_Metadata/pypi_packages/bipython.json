{"info": {"author": "Paul Ivanov", "author_email": "pi@berkeley.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Interpreters", "Topic :: Utilities"], "description": "bipython\r\n========\r\n\r\n.. figure:: http://bipython.org/images/bipython_logo.png\r\n   :alt: bipython logo\r\n\r\nthe boldly indiscriminate python interpreter\r\n--------------------------------------------\r\n\r\n*\"...because you shouldn't have to choose.\"*\r\n\r\nPROLOGUE\r\n--------\r\n\r\n    | Two interpreters, both alike in dignity,\r\n    | In fair Pythona, where we lay our scene,\r\n    | From ancient grudge break to new mutiny,\r\n    | Where civil code makes git commits unclean.\r\n    | From forth the fatal loins of these two foes\r\n    | A newer kind of strager's given life;\r\n    | Whose misadventured piteous overthrows\r\n    | Doth with its birth bury its parents' strife.\r\n\r\nACT I\r\n-----\r\n\r\n*Enter ``bpython`` and ``ipython``*\r\n\r\n`**``bpython``** <http://bpython-interpreter.org/>`__\r\n\r\n    | I'm a fancy terminal-based interface to the Python interpreter. I give you\r\n    | inline syntax highlighting and auto-completion prompts as you type, and I'll\r\n    | even automatically show you a little tooltip with a docstring and parameter\r\n    | list as soon as you hit ``(`` to make the function call, so you always know\r\n    | what you're doing! I'm svelte and proud of it - I don't try to do all of the\r\n    | shenanigans that ``ipython`` does with the shell and the web, but the cool kids\r\n    | love my rewind feature for demos. I strive to make interactive python coding\r\n    | a joy!\r\n\r\n`**``ipython``** <http://ipython.org/>`__\r\n\r\n    | I'm an awesome *suite* of interactive computing ideas that work together.\r\n    | For millenia, I've given you tab-completion and object introspection via\r\n    | ``obj?`` instead of ``help(obj)`` in Python. I also have sweet shell features,\r\n    | special magic commands (``%run``, ``%timeit``, ``%matplotlib``, etc.) and a\r\n    | history mechanism for both input (command history) and output (results\r\n    | caching).  \r\n    | More recently, I've decoupled the REPL into clients and kernels, allowing\r\n    | them to run on independent of each other. One popular client is the\r\n    | IPython Notebook which allows you to write code and prose using a web\r\n    | browser, sending code to the kernel for execution and getting rich media\r\n    | results back inline. The decoupling of clients and kernels also allows\r\n    | multiple clients to interact with the same kernel, so you can hook-up to\r\n    | that same running kernel from the terminal. The terminal workflow makes\r\n    | more sense for some things, but my user interface there isn't as polished\r\n    | as ``bpython``'s.\r\n\r\n*Enter ``bipython``*\r\n\r\n`**``bipython``** <http://bipython.org/>`__\r\n\r\n    By your powers combined... I am **``bipython``**!\r\n\r\n*Exeunt*\r\n\r\nThe Power is Yours!\r\n-------------------\r\n\r\n::\r\n\r\n    pip install  bipython\r\n    easy_install bipython\r\n\r\n``bipython`` requires ipython, pyzmq, bpython, and urwid.\r\n\r\nFor now, you'll need to have a running ipython kernel before running\r\n``bipython``. You can do this by either opening a notebook or running\r\n``ipython console``. It won't always be like this, I'll fix it as soon\r\nas I can, but it'll be sooner `with your help over\r\nivanov/bipython <https://github.com/ivanov/bipython>`__.\r\n\r\nAfter that, just run ``bipython`` and enjoy the ride.\r\n\r\nCopyright (c) 2014, `Paul Ivanov <http://pirsquared.org/blog>`__", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/ivanov/bipython/zipball/0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bipython.org/", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "bipython", "package_url": "https://pypi.org/project/bipython/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bipython/", "project_urls": {"Download": "https://github.com/ivanov/bipython/zipball/0.1", "Homepage": "http://bipython.org/"}, "release_url": "https://pypi.org/project/bipython/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "bipython: boldly indiscriminate python interpreter", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<img alt=\"bipython logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57e4ae0bcb67248eecf5dbab00da6eae50b2f824/687474703a2f2f6269707974686f6e2e6f72672f696d616765732f6269707974686f6e5f6c6f676f2e706e67\">\n</div>\n<div id=\"the-boldly-indiscriminate-python-interpreter\">\n<h2>the boldly indiscriminate python interpreter</h2>\n<p><em>\u201c\u2026because you shouldn\u2019t have to choose.\u201d</em></p>\n</div>\n<div id=\"prologue\">\n<h2>PROLOGUE</h2>\n<blockquote>\n<div>\n<div>Two interpreters, both alike in dignity,</div>\n<div>In fair Pythona, where we lay our scene,</div>\n<div>From ancient grudge break to new mutiny,</div>\n<div>Where civil code makes git commits unclean.</div>\n<div>From forth the fatal loins of these two foes</div>\n<div>A newer kind of strager\u2019s given life;</div>\n<div>Whose misadventured piteous overthrows</div>\n<div>Doth with its birth bury its parents\u2019 strife.</div>\n</div>\n</blockquote>\n</div>\n<div id=\"act-i\">\n<h2>ACT I</h2>\n<p><em>Enter ``bpython`` and ``ipython``</em></p>\n<p><a href=\"http://bpython-interpreter.org/\" rel=\"nofollow\">**``bpython``**</a></p>\n<blockquote>\n<div>\n<div>I\u2019m a fancy terminal-based interface to the Python interpreter. I give you</div>\n<div>inline syntax highlighting and auto-completion prompts as you type, and I\u2019ll</div>\n<div>even automatically show you a little tooltip with a docstring and parameter</div>\n<div>list as soon as you hit <tt>(</tt> to make the function call, so you always know</div>\n<div>what you\u2019re doing! I\u2019m svelte and proud of it - I don\u2019t try to do all of the</div>\n<div>shenanigans that <tt>ipython</tt> does with the shell and the web, but the cool kids</div>\n<div>love my rewind feature for demos. I strive to make interactive python coding</div>\n<div>a joy!</div>\n</div>\n</blockquote>\n<p><a href=\"http://ipython.org/\" rel=\"nofollow\">**``ipython``**</a></p>\n<blockquote>\n<div>\n<div>I\u2019m an awesome <em>suite</em> of interactive computing ideas that work together.</div>\n<div>For millenia, I\u2019ve given you tab-completion and object introspection via</div>\n<div><tt>obj?</tt> instead of <tt>help(obj)</tt> in Python. I also have sweet shell features,</div>\n<div>special magic commands (<tt>%run</tt>, <tt>%timeit</tt>, <tt>%matplotlib</tt>, etc.) and a</div>\n<div>history mechanism for both input (command history) and output (results</div>\n<div>caching).</div>\n<div>More recently, I\u2019ve decoupled the REPL into clients and kernels, allowing</div>\n<div>them to run on independent of each other. One popular client is the</div>\n<div>IPython Notebook which allows you to write code and prose using a web</div>\n<div>browser, sending code to the kernel for execution and getting rich media</div>\n<div>results back inline. The decoupling of clients and kernels also allows</div>\n<div>multiple clients to interact with the same kernel, so you can hook-up to</div>\n<div>that same running kernel from the terminal. The terminal workflow makes</div>\n<div>more sense for some things, but my user interface there isn\u2019t as polished</div>\n<div>as <tt>bpython</tt>\u2019s.</div>\n</div>\n</blockquote>\n<p><em>Enter ``bipython``</em></p>\n<p><a href=\"http://bipython.org/\" rel=\"nofollow\">**``bipython``**</a></p>\n<blockquote>\nBy your powers combined\u2026 I am <strong>``bipython``</strong>!</blockquote>\n<p><em>Exeunt</em></p>\n</div>\n<div id=\"the-power-is-yours\">\n<h2>The Power is Yours!</h2>\n<pre>pip install  bipython\neasy_install bipython\n</pre>\n<p><tt>bipython</tt> requires ipython, pyzmq, bpython, and urwid.</p>\n<p>For now, you\u2019ll need to have a running ipython kernel before running\n<tt>bipython</tt>. You can do this by either opening a notebook or running\n<tt>ipython console</tt>. It won\u2019t always be like this, I\u2019ll fix it as soon\nas I can, but it\u2019ll be sooner <a href=\"https://github.com/ivanov/bipython\" rel=\"nofollow\">with your help over\nivanov/bipython</a>.</p>\n<p>After that, just run <tt>bipython</tt> and enjoy the ride.</p>\n<p>Copyright (c) 2014, <a href=\"http://pirsquared.org/blog\" rel=\"nofollow\">Paul Ivanov</a></p>\n</div>\n\n          </div>"}, "last_serial": 1137516, "releases": {"0.1.0": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "6231a332734a09f551bdaa0aae0c69d3", "sha256": "389899bcc8059a5e7069c68f8004ba94843565447e5477352b90cbae0f93368c"}, "downloads": -1, "filename": "bipython-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6231a332734a09f551bdaa0aae0c69d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32163, "upload_time": "2014-04-02T12:22:34", "upload_time_iso_8601": "2014-04-02T12:22:34.755474Z", "url": "https://files.pythonhosted.org/packages/3a/3f/477fb1ee2aa2c1f5fcea8175c46a4f5d4a89f95ffb3ea15703883862a4e5/bipython-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d2547028217a9a1a690ac2d7d36d9128", "sha256": "e90709dee1371cfa6d4813e8368cf7ed9877076fdb6acbac30d7c0125456dc36"}, "downloads": -1, "filename": "bipython-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d2547028217a9a1a690ac2d7d36d9128", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32178, "upload_time": "2014-04-02T12:42:10", "upload_time_iso_8601": "2014-04-02T12:42:10.596141Z", "url": "https://files.pythonhosted.org/packages/4e/8d/cefd8261c0da5abeb5ba2f3705eeda9bff79b2088359afce1e1be5d49f71/bipython-0.1.2.tar.gz", "yanked": false}], "0.1.3.-37c4767-": [{"comment_text": "", "digests": {"md5": "74c1b0e43c131ac2ae50a2e68738cbd7", "sha256": "f325d73fd037a2c054dd05b034a6de068fed121b8ccbef8886693be4a3692878"}, "downloads": -1, "filename": "bipython-0.1.3.-37c4767-.tar.gz", "has_sig": false, "md5_digest": "74c1b0e43c131ac2ae50a2e68738cbd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34240, "upload_time": "2014-06-26T00:35:48", "upload_time_iso_8601": "2014-06-26T00:35:48.703547Z", "url": "https://files.pythonhosted.org/packages/df/0e/8c5f68a3688d90e726f64c252a857700e30373be2e175adc4ce64d4d06f6/bipython-0.1.3.-37c4767-.tar.gz", "yanked": false}], "0.1.3.-894b734-": [{"comment_text": "", "digests": {"md5": "2a1860006e9282c1644bb38ceed085c4", "sha256": "63cc8dda23b729246ede50f5005945c859796508f01c991d475d37a73fadfc39"}, "downloads": -1, "filename": "bipython-0.1.3.-894b734-.tar.gz", "has_sig": false, "md5_digest": "2a1860006e9282c1644bb38ceed085c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34249, "upload_time": "2014-06-26T00:39:09", "upload_time_iso_8601": "2014-06-26T00:39:09.323186Z", "url": "https://files.pythonhosted.org/packages/8e/cd/588be74b793cedc6cebe47fb3161f633eab885f1aaf77abeb0cf529efbf3/bipython-0.1.3.-894b734-.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2547028217a9a1a690ac2d7d36d9128", "sha256": "e90709dee1371cfa6d4813e8368cf7ed9877076fdb6acbac30d7c0125456dc36"}, "downloads": -1, "filename": "bipython-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d2547028217a9a1a690ac2d7d36d9128", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32178, "upload_time": "2014-04-02T12:42:10", "upload_time_iso_8601": "2014-04-02T12:42:10.596141Z", "url": "https://files.pythonhosted.org/packages/4e/8d/cefd8261c0da5abeb5ba2f3705eeda9bff79b2088359afce1e1be5d49f71/bipython-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:22 2020"}