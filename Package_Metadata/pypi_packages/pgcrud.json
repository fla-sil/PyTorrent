{"info": {"author": "Will Watkinson", "author_email": "wjwats4295@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pgcrud\n\nLeverage python lists and dicts to more dynamically perform CRUD operations on postgres databases.\n\n### installation\n\n`pip install pgcrud`\n\n### connect\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\n```\n\n### create()\n\nPass in the name of the table and a dictionary containing the database field name as the key and the value to set as the value.\n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'firstname': 'Fred', 'lastname': 'Jones'}\nconn.create('contact', data)\n```\n\n### criteria\nThe `update`, `delete` and `select` functions are frequently used with criteria. \n\nTo pass the criteria replace all of the criteria values with `%s` and pass a list of the values in the order they are used in the criteria. This enables the psycopg2 connector to makes sure the values are database safe and formatted appropriately based on their type.\n\n`IN` criteria should be passed in with one `%s` where they should go and a list entry in the values.\n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\nfields = ['firstname', 'lastname']\ncriteria = 'WHERE country = %s AND state in %s'\nvalues = ['United States', ['MA', 'MI', 'NY']]\nresults = conn.select('contact', fields, criteria, values)\n```\n\nThis would form the SQL:\n```\nSELECT firstname,\n       lastname\n    FROM contact\n    WHERE country = 'United States'\n    AND state in ('MA', 'MI', 'NY')\n```\n\n### update()\n\nPass in the name of the table and a dictionary containing the database field name as the key and the value to set as the value to update.\n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'firstname': 'Fred', 'lastname': 'Jones'}\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nconn.update('contact', data, criteria, values)\n```\n\n### delete()\n\nPass in the name of the table, the criteria and values to identify which records to delete.\n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nconn.delete('contact', criteria, values)\n```\n\n### select()\n\nPass in the name of the table, a list of the field names you want and the criteria and values to identify which records to select.\n\nA list of dictionaries will be returned. Each entry will have the database field name as the key and the retrieved value as the value.\n\nThis is the select method I recommend using unless performance is very important. `select_list` will be the most performant, but the most difficult to work with since it requires you to reference the position of the field name in the query to understand the values being referenced when reading and writing your code. `select_gen` is the second most performant, but requires knowledge of generators instead of just working with a standard list. Unless your results contain a very large number of fields and rows the difference in performance will be negligible.\n\n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\nfields = ['firstname', 'lastname]\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nresults = conn.select('contact', fields, criteria, values)\n```\n\n### gen_select()\n\nThis is the same as the select_dict statement, but it returns an iterator object containing the dictionaries instead of a list. This increases the performance of converting the returned list of value lists into a list of dicts with the field names as keys.\n\n### list_select()\n\nA list of lists will be returned with the field value in the same position as the field name was input in the fields list. For example if id is the first field name in your fields list then the id value will be at poition 0 in the list.\n\n### commit()\n\nThe `create`, `delete` and `select` funcitons have an optional `commit` parameter. Sometimes when creating or deleting records in a database you want to do an all or none transaction. For example you are creating an order and all of its items. If one of the items fails to create you do not want the order to be created. In this case you would pass `commit = False`. This means that the insertions will not be committed until you say so, when they are all complete.\n\nThis parameter is also included in the select function because you may need information from one of the created records to create further records. For example you insert the order and need its id in order to associate its items with it. In this case you would also want to pass `commit = False` to the select function, so that when you are retrieving the order id the order insert is not committed. \n\n```\nfrom pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'total': 1900, 'contact_id': 234422, 'external_id' = 34567}\nconn.create('order', data, False)```\norder = conn.select('order', ['id'], 'WHERE external_id = %s', [data['external_id]], False)\norder_id = order[0]['id']\nitems = [{'sku': 'CUCUMBER',\n          'qty': 1,\n          'price': .5},\n          {'sku': 'GRAPEFRUIT',\n          'qty': 2,\n          'price': 1}]\nfor item in items:\n    item['order_id'] = order_id\n    conn.create('item', item, False)\nconn.commit()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/wjwatkinson/pgcrud", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pgcrud", "package_url": "https://pypi.org/project/pgcrud/", "platform": "", "project_url": "https://pypi.org/project/pgcrud/", "project_urls": {"Homepage": "https://gitlab.com/wjwatkinson/pgcrud"}, "release_url": "https://pypi.org/project/pgcrud/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package to perform Postgres CRUD operations", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pgcrud</h1>\n<p>Leverage python lists and dicts to more dynamically perform CRUD operations on postgres databases.</p>\n<h3>installation</h3>\n<p><code>pip install pgcrud</code></p>\n<h3>connect</h3>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\n</code></pre>\n<h3>create()</h3>\n<p>Pass in the name of the table and a dictionary containing the database field name as the key and the value to set as the value.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'firstname': 'Fred', 'lastname': 'Jones'}\nconn.create('contact', data)\n</code></pre>\n<h3>criteria</h3>\n<p>The <code>update</code>, <code>delete</code> and <code>select</code> functions are frequently used with criteria.</p>\n<p>To pass the criteria replace all of the criteria values with <code>%s</code> and pass a list of the values in the order they are used in the criteria. This enables the psycopg2 connector to makes sure the values are database safe and formatted appropriately based on their type.</p>\n<p><code>IN</code> criteria should be passed in with one <code>%s</code> where they should go and a list entry in the values.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\nfields = ['firstname', 'lastname']\ncriteria = 'WHERE country = %s AND state in %s'\nvalues = ['United States', ['MA', 'MI', 'NY']]\nresults = conn.select('contact', fields, criteria, values)\n</code></pre>\n<p>This would form the SQL:</p>\n<pre><code>SELECT firstname,\n       lastname\n    FROM contact\n    WHERE country = 'United States'\n    AND state in ('MA', 'MI', 'NY')\n</code></pre>\n<h3>update()</h3>\n<p>Pass in the name of the table and a dictionary containing the database field name as the key and the value to set as the value to update.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'firstname': 'Fred', 'lastname': 'Jones'}\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nconn.update('contact', data, criteria, values)\n</code></pre>\n<h3>delete()</h3>\n<p>Pass in the name of the table, the criteria and values to identify which records to delete.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nconn.delete('contact', criteria, values)\n</code></pre>\n<h3>select()</h3>\n<p>Pass in the name of the table, a list of the field names you want and the criteria and values to identify which records to select.</p>\n<p>A list of dictionaries will be returned. Each entry will have the database field name as the key and the retrieved value as the value.</p>\n<p>This is the select method I recommend using unless performance is very important. <code>select_list</code> will be the most performant, but the most difficult to work with since it requires you to reference the position of the field name in the query to understand the values being referenced when reading and writing your code. <code>select_gen</code> is the second most performant, but requires knowledge of generators instead of just working with a standard list. Unless your results contain a very large number of fields and rows the difference in performance will be negligible.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\nfields = ['firstname', 'lastname]\ncriteria = 'WHERE id = %s'\nvalues = [12436]\nresults = conn.select('contact', fields, criteria, values)\n</code></pre>\n<h3>gen_select()</h3>\n<p>This is the same as the select_dict statement, but it returns an iterator object containing the dictionaries instead of a list. This increases the performance of converting the returned list of value lists into a list of dicts with the field names as keys.</p>\n<h3>list_select()</h3>\n<p>A list of lists will be returned with the field value in the same position as the field name was input in the fields list. For example if id is the first field name in your fields list then the id value will be at poition 0 in the list.</p>\n<h3>commit()</h3>\n<p>The <code>create</code>, <code>delete</code> and <code>select</code> funcitons have an optional <code>commit</code> parameter. Sometimes when creating or deleting records in a database you want to do an all or none transaction. For example you are creating an order and all of its items. If one of the items fails to create you do not want the order to be created. In this case you would pass <code>commit = False</code>. This means that the insertions will not be committed until you say so, when they are all complete.</p>\n<p>This parameter is also included in the select function because you may need information from one of the created records to create further records. For example you insert the order and need its id in order to associate its items with it. In this case you would also want to pass <code>commit = False</code> to the select function, so that when you are retrieving the order id the order insert is not committed.</p>\n<pre><code>from pgcrud import Connector\n\nconn = Connector(host, dbname, user, password)\ndata = {'total': 1900, 'contact_id': 234422, 'external_id' = 34567}\nconn.create('order', data, False)```\norder = conn.select('order', ['id'], 'WHERE external_id = %s', [data['external_id]], False)\norder_id = order[0]['id']\nitems = [{'sku': 'CUCUMBER',\n          'qty': 1,\n          'price': .5},\n          {'sku': 'GRAPEFRUIT',\n          'qty': 2,\n          'price': 1}]\nfor item in items:\n    item['order_id'] = order_id\n    conn.create('item', item, False)\nconn.commit()\n</code></pre>\n\n          </div>"}, "last_serial": 6181367, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8dbf4d4e69c349cc5bf778cbb9d6f62b", "sha256": "e40132e93179ecf58416fdeb7f8b21e7c8cac6bf86fe182d40c24da63d38c4e1"}, "downloads": -1, "filename": "pgcrud-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8dbf4d4e69c349cc5bf778cbb9d6f62b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4801, "upload_time": "2019-11-09T11:44:24", "upload_time_iso_8601": "2019-11-09T11:44:24.072397Z", "url": "https://files.pythonhosted.org/packages/3e/1f/e92e6a3ccceb0e63e41fc997b02ff088552e01673e54110e1f31654349df/pgcrud-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60f6615fe2ced99f01678ea355aca1f0", "sha256": "3116b745422b5a4f4b4565ac78665f29286546032addb74ee263794699718f0c"}, "downloads": -1, "filename": "pgcrud-0.0.1.tar.gz", "has_sig": false, "md5_digest": "60f6615fe2ced99f01678ea355aca1f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3915, "upload_time": "2019-11-09T11:44:26", "upload_time_iso_8601": "2019-11-09T11:44:26.168009Z", "url": "https://files.pythonhosted.org/packages/46/7a/5aa858dd1050df55bc11a7c19251e7bd2538981f6968d533d89d12397498/pgcrud-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1b096bdc7fa5fb7e5eee442d0509d2f0", "sha256": "41f6020baa2e0fe99a6fd33956f1d8d9a4d4e260176eb7ebbd4c098dae36cedf"}, "downloads": -1, "filename": "pgcrud-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1b096bdc7fa5fb7e5eee442d0509d2f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4799, "upload_time": "2019-11-09T11:52:28", "upload_time_iso_8601": "2019-11-09T11:52:28.626078Z", "url": "https://files.pythonhosted.org/packages/1b/d1/d5610bdfa9dd631354bdd68a3fc70035294bc8d2a469b347d3e62b076e41/pgcrud-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e59a70f7992c0540f91ec19a729e3667", "sha256": "2e34d90bd53a8963566eeab476161330e542210439cccb966b7ad4c495576b3b"}, "downloads": -1, "filename": "pgcrud-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e59a70f7992c0540f91ec19a729e3667", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3920, "upload_time": "2019-11-09T11:52:29", "upload_time_iso_8601": "2019-11-09T11:52:29.834449Z", "url": "https://files.pythonhosted.org/packages/42/4c/d59866081fb1c77532326fc4903195989b6101587c652462505b22d8bb37/pgcrud-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fd3fcf9527c171c9ea6a9f1514c1239e", "sha256": "dca1dde37ec2f8f97ce34ba7a19a27dd79f9c6c9f35dc5a17eb7b5d46a097afb"}, "downloads": -1, "filename": "pgcrud-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fd3fcf9527c171c9ea6a9f1514c1239e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4893, "upload_time": "2019-11-09T21:07:23", "upload_time_iso_8601": "2019-11-09T21:07:23.515960Z", "url": "https://files.pythonhosted.org/packages/6d/d9/6c3ec831f28d0448b720cf0168f6380573d7808e50bbffb868d1d8cc3da8/pgcrud-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1634eb1844611ee342d21f5e6561265", "sha256": "5fe3e5d5f3537fc32e03efd1dca461a107f59762a787c00d48179fa9f3fd0832"}, "downloads": -1, "filename": "pgcrud-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c1634eb1844611ee342d21f5e6561265", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3999, "upload_time": "2019-11-09T21:07:25", "upload_time_iso_8601": "2019-11-09T21:07:25.029980Z", "url": "https://files.pythonhosted.org/packages/e4/4c/ef38b2fc90e3bb6b7dec808384d6193494923265e5f284c8f4f5c1db8d4e/pgcrud-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e1311c3fa11efdd772ec46760467dec1", "sha256": "64f0b882280e9667fa74a630a92a4714f4a3cfec869785c241bfaf50633eef33"}, "downloads": -1, "filename": "pgcrud-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e1311c3fa11efdd772ec46760467dec1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4886, "upload_time": "2019-11-11T09:13:14", "upload_time_iso_8601": "2019-11-11T09:13:14.298771Z", "url": "https://files.pythonhosted.org/packages/af/c4/95d5c23beeb8873daa249bb45c39ea1d9aba83f372edbf5e0da1d71d59f8/pgcrud-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f909c6531394db8d4a9f4185bb56d610", "sha256": "a696595e6aba6d7e272b4228965b28a3eece2941ffb65f37fe4bc8fc3ad4609f"}, "downloads": -1, "filename": "pgcrud-0.0.4.tar.gz", "has_sig": false, "md5_digest": "f909c6531394db8d4a9f4185bb56d610", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4002, "upload_time": "2019-11-11T09:13:15", "upload_time_iso_8601": "2019-11-11T09:13:15.673640Z", "url": "https://files.pythonhosted.org/packages/d3/b5/fdb9e3ba375119347609556beea1ea959432d78728981d85c109a8cde591/pgcrud-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "214aa7db2e19723385d13ed75041507f", "sha256": "23bdd18e1a23c1a81b14b434cb3f71cef497cdf8cf0c560ebe693e178543ef7b"}, "downloads": -1, "filename": "pgcrud-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "214aa7db2e19723385d13ed75041507f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4892, "upload_time": "2019-11-11T15:11:10", "upload_time_iso_8601": "2019-11-11T15:11:10.807971Z", "url": "https://files.pythonhosted.org/packages/8f/a2/9865cc4db72ce718fcfcab7802e9d5d5f37e0150b22c6c7cca208155ee72/pgcrud-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e090e975d30aa509893eae85616c3a49", "sha256": "8db12ef7462b841c87dde6641d9209dd2098a85b02c6b8a46ee71c8b267711a6"}, "downloads": -1, "filename": "pgcrud-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e090e975d30aa509893eae85616c3a49", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4011, "upload_time": "2019-11-11T15:11:12", "upload_time_iso_8601": "2019-11-11T15:11:12.310032Z", "url": "https://files.pythonhosted.org/packages/03/71/1c0f83bb1458d700baa42447956b51e0d6530fc4ab57decae375092fb8b5/pgcrud-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "84900f67f00ffc5cee16afbc0464b58a", "sha256": "d6adebaff5a60817c741842069bc9797494817dc60cd95273da9be847ea1d7c7"}, "downloads": -1, "filename": "pgcrud-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "84900f67f00ffc5cee16afbc0464b58a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5046, "upload_time": "2019-11-12T13:40:18", "upload_time_iso_8601": "2019-11-12T13:40:18.108863Z", "url": "https://files.pythonhosted.org/packages/73/a2/afa6a13d707cd37c69961c69c986b25de3cd24c432158bcdae33887a8a04/pgcrud-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c24afdb02476491d339121d473ddd151", "sha256": "55349903dd3860a9f0131343210fc6d6c203b3bbc6db38507ccccedf79113bc1"}, "downloads": -1, "filename": "pgcrud-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c24afdb02476491d339121d473ddd151", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4139, "upload_time": "2019-11-12T13:37:22", "upload_time_iso_8601": "2019-11-12T13:37:22.430584Z", "url": "https://files.pythonhosted.org/packages/3f/f1/feb49c59cff3f03f07a87249590deab3b5556f7d71666e4aa642763613aa/pgcrud-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "2148eed8172bc81a4bdaff98fd821377", "sha256": "f34db50581e168311506949c54ff54653ce8fd6d32456122aa7abb99a5b7a0b4"}, "downloads": -1, "filename": "pgcrud-0.0.7.tar.gz", "has_sig": false, "md5_digest": "2148eed8172bc81a4bdaff98fd821377", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4138, "upload_time": "2019-11-13T12:59:53", "upload_time_iso_8601": "2019-11-13T12:59:53.205811Z", "url": "https://files.pythonhosted.org/packages/6c/9e/15db4d18abfaee052909b88f3ba209b5dcb8f2b4682c8d4c96bcbf1d6fb2/pgcrud-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "598e9672ee7afc73818b38662d2cce67", "sha256": "a6f2233a2da367e1dfebcfb90bce5b5561006b1a1367d348c03f29e4a4e75dc7"}, "downloads": -1, "filename": "pgcrud-0.0.8.tar.gz", "has_sig": false, "md5_digest": "598e9672ee7afc73818b38662d2cce67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4156, "upload_time": "2019-11-14T13:13:33", "upload_time_iso_8601": "2019-11-14T13:13:33.239645Z", "url": "https://files.pythonhosted.org/packages/e9/f6/c5f1bb509c8a7e2c3313ca4cee11056554a0bb55e71df620ff095d31dc32/pgcrud-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "92ca5b1781dd0500c8b180aedf3bcb45", "sha256": "7d217331d4908816c3c4197c5bce2be3c4b3adca2418b4edb7681c5edff93432"}, "downloads": -1, "filename": "pgcrud-0.0.9.tar.gz", "has_sig": false, "md5_digest": "92ca5b1781dd0500c8b180aedf3bcb45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4160, "upload_time": "2019-11-14T13:29:33", "upload_time_iso_8601": "2019-11-14T13:29:33.376454Z", "url": "https://files.pythonhosted.org/packages/b0/cd/a69cc97ef9cbfbcd8d18d01fe19a27835c42e08b087ff5ba4d894d42c3ab/pgcrud-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "9c7d86a908e2473dc62638edf50138d3", "sha256": "1d9c81b96d174c369f3272a5f6f044e0915cef1b86399d2e9fad43aeb3dc4e63"}, "downloads": -1, "filename": "pgcrud-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9c7d86a908e2473dc62638edf50138d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4512, "upload_time": "2019-11-22T13:44:59", "upload_time_iso_8601": "2019-11-22T13:44:59.832303Z", "url": "https://files.pythonhosted.org/packages/9d/86/8e6d0fd1eeb5cce326fbc32cebdb888659a374972f39415f9d13f4a07526/pgcrud-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c7d86a908e2473dc62638edf50138d3", "sha256": "1d9c81b96d174c369f3272a5f6f044e0915cef1b86399d2e9fad43aeb3dc4e63"}, "downloads": -1, "filename": "pgcrud-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9c7d86a908e2473dc62638edf50138d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4512, "upload_time": "2019-11-22T13:44:59", "upload_time_iso_8601": "2019-11-22T13:44:59.832303Z", "url": "https://files.pythonhosted.org/packages/9d/86/8e6d0fd1eeb5cce326fbc32cebdb888659a374972f39415f9d13f4a07526/pgcrud-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:51 2020"}