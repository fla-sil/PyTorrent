{"info": {"author": "cevans", "author_email": "c.d.evans87@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/cevans87/atools.svg?branch=master&kill_cache=1)](https://travis-ci.org/cevans87/atools)\n[![Coverage Status](https://coveralls.io/repos/github/cevans87/atools/badge.svg?branch=master&kill_cache=1)](https://coveralls.io/github/cevans87/atools?branch=master)\n# atools\nPython 3.6+ decorators including\n\n- `@memoize` - a function decorator for sync and async functions that memoizes results.\n- `@rate` - a function decorator for sync and async functions that rate limits calls.\n\n## @memoize\nDecorates a function call and caches return value for given inputs.\n- If `db_path` is provided, memos will persist on disk and reloaded during initialization.\n- If `duration` is provided, memos will only be valid for given `duration`.\n- If `keygen` is provided, memo hash keys will be created with given `keygen`.\n- If `size` is provided, LRU memo will be evicted if current count exceeds given `size`.\n\n### Examples\n\n- Body will run once for unique input `bar` and result is cached.\n    ```python3\n    @memoize\n    def foo(bar) -> Any: ...\n\n    foo(1)  # Function actually called. Result cached.\n    foo(1)  # Function not called. Cached result returned.\n    foo(2)  # Function actually called. Result cached.\n    ```\n\n- Same as above, but async.\n    ```python3\n    @memoize\n    async def foo(bar) -> Any: ...\n\n    # Concurrent calls from the same event loop are safe. Only one call is generated. The\n    # other nine calls in this example wait for the result.\n    await asyncio.gather(*[foo(1) for _ in range(10)])\n    ```\n\n- Classes may be memoized.\n    ```python3\n    @memoize\n    Class Foo:\n        def init(self, _): ...\n\n    Foo(1)  # Instance is actually created.\n    Foo(1)  # Instance not created. Cached instance returned.\n    Foo(2)  # Instance is actually created.\n    ```\n\n- Calls `foo(1)`, `foo(bar=1)`, and `foo(1, baz='baz')` are equivalent and only cached once.\n    ```python3\n    @memoize\n    def foo(bar, baz='baz'): ...\n    ```\n\n- Only 2 items are cached. Acts as an LRU.\n    ```python3\n    @memoize(size=2)\n    def foo(bar) -> Any: ...\n\n    foo(1)  # LRU cache order [foo(1)]\n    foo(2)  # LRU cache order [foo(1), foo(2)]\n    foo(1)  # LRU cache order [foo(2), foo(1)]\n    foo(3)  # LRU cache order [foo(1), foo(3)], foo(2) is evicted to keep cache size at 2\n    ```\n\n- Items are evicted after 1 minute.\n    ```python3\n    @memoize(duration=datetime.timedelta(minutes=1))\n    def foo(bar) -> Any: ...\n\n    foo(1)  # Function actually called. Result cached.\n    foo(1)  # Function not called. Cached result returned.\n    sleep(61)\n    foo(1)  # Function actually called. Cached result was too old.\n    ```\n\n- Memoize can be explicitly reset through the function's `.memoize` attribute\n    ```python3\n    @memoize\n    def foo(bar) -> Any: ...\n\n    foo(1)  # Function actually called. Result cached.\n    foo(1)  # Function not called. Cached result returned.\n    foo.memoize.reset()\n    foo(1)  # Function actually called. Cache was emptied.\n    ```\n\n- Current cache length can be accessed through the function's `.memoize` attribute\n    ```python3\n    @memoize\n    def foo(bar) -> Any: ...\n\n    foo(1)\n    foo(2)\n    len(foo.memoize)  # returns 2\n    ```\n\n- Alternate memo hash function can be specified. The inputs must match the function's.\n    ```python3\n    Class Foo:\n        @memoize(keygen=lambda self, a, b, c: (a, b, c))  # Omit 'self' from hash key.\n        def bar(self, a, b, c) -> Any: ...\n\n    a, b = Foo(), Foo()\n\n    # Hash key will be (a, b, c)\n    a.bar(1, 2, 3)  # LRU cache order [Foo.bar(a, 1, 2, 3)]\n\n    # Hash key will again be (a, b, c)\n    # Be aware, in this example the returned result comes from a.bar(...), not b.bar(...).\n    b.bar(1, 2, 3)  # Function not called. Cached result returned.\n    ```\n\n- If part of the returned key from keygen is awaitable, it will be awaited.\n    ```python3\n    async def awaitable_key_part() -> Hashable: ...\n\n    @memoize(keygen=lambda bar: (bar, awaitable_key_part()))\n    async def foo(bar) -> Any: ...\n    ```\n\n- If the memoized function is async and any part of the key is awaitable, it is awaited.\n    ```python3\n    async def morph_a(a: int) -> int: ...\n\n    @memoize(keygen=lambda a, b, c: (morph_a(a), b, c))\n    def foo(a, b, c) -> Any: ...\n    ```\n\n- Properties can be memoized.\n    ```python3\n    Class Foo:\n        @property\n        @memoize\n        def bar(self) -> Any: ...\n\n    a = Foo()\n    a.bar  # Function actually called. Result cached.\n    a.bar  # Function not called. Cached result returned.\n\n    b = Foo() # Memoize uses 'self' parameter in hash. 'b' does not share returns with 'a'\n    b.bar  # Function actually called. Result cached.\n    b.bar  # Function not called. Cached result returned.\n    ```\n\n- Be careful with eviction on instance methods. Memoize is not instance-specific.\n    ```python3\n    Class Foo:\n        @memoize(size=1)\n        def bar(self, baz) -> Any: ...\n\n    a, b = Foo(), Foo()\n    a.bar(1)  # LRU cache order [Foo.bar(a, 1)]\n    b.bar(1)  # LRU cache order [Foo.bar(b, 1)], Foo.bar(a, 1) is evicted\n    a.bar(1)  # Foo.bar(a, 1) is actually called and cached again.\n    ```\n\n- Values can persist to disk and be reloaded when memoize is initialized again.\n    ```python3\n    @memoize(db_path=Path.home() / '.memoize')\n    def foo(a) -> Any: ...\n\n    foo(1)  # Function actually called. Result cached.\n\n    # Process is restarted. Upon restart, the state of the memoize decorator is reloaded.\n\n    foo(1)  # Function not called. Cached result returned.\n    ```\n\n- If not applied to a function, calling the decorator returns a partial application.\n    ```python3\n    memoize_db = memoize(db_path=Path.home() / '.memoize')\n\n    @memoize_db(size=1)\n    def foo(a) -> Any: ...\n\n    @memoize_db(duration=datetime.timedelta(hours=1))\n    def bar(b) -> Any: ...\n    ```\n\n- Comparison equality does not affect memoize. Only hash equality matters.\n    ```python3\n    # Inherits object.__hash__\n    class Foo:\n        # Don't be fooled. memoize only cares about the hash.\n        def __eq__(self, other: Foo) -> bool:\n            return True\n\n    @memoize\n    def bar(foo: Foo) -> Any: ...\n\n    foo0, foo1 = Foo(), Foo()\n    assert foo0 == foo1\n    bar(foo0)  # Function called. Result cached.\n    bar(foo1)  # Function called again, despite equality, due to different hash.\n    ```\n\n### A warning about arguments that inherit `object.__hash__`:\n\nIt doesn't make sense to keep a memo if it's impossible to generate the same input again. Inputs\nthat inherit the default `object.__hash__` are unique based on their id, and thus, their\nlocation in memory. If such inputs are garbage-collected, they are gone forever. For that\nreason, when those inputs are garbage collected, `memoize` will drop memos created using those\ninputs.\n\n- Memo lifetime is bound to the lifetime of any arguments that inherit `object.__hash__`.\n    ```python3\n    # Inherits object.__hash__\n    class Foo:\n        ...\n\n    @memoize\n    def bar(foo: Foo) -> Any: ...\n\n    bar(Foo())  # Memo is immediately deleted since Foo() is garbage collected.\n\n    foo = Foo()\n    bar(foo)  # Memo isn't deleted until foo is deleted.\n    del foo  # Memo is deleted at the same time as foo.\n    ```\n\n- Types that have specific, consistent hash functions (int, str, etc.) won't cause problems.\n    ```python3\n    @memoize\n    def foo(a: int, b: str, c: Tuple[int, ...], d: range) -> Any: ...\n\n    foo(1, 'bar', (1, 2, 3), range(42))  # Function called. Result cached.\n    foo(1, 'bar', (1, 2, 3), range(42))  # Function not called. Cached result returned.\n    ```\n\n- Classmethods rely on classes, which inherit from `object.__hash__`. However, classes are\n  almost never garbage collected until a process exits so memoize will work as expected.\n\n    ```python3\n    class Foo:\n      @classmethod\n      @memoize\n      def bar(cls) -> Any: ...\n\n    foo = Foo()\n    foo.bar()  # Function called. Result cached.\n    foo.bar()  # Function not called. Cached result returned.\n\n    del foo  # Memo not cleared since lifetime is bound to class Foo.\n\n    foo = Foo()\n    foo.bar()  # Function not called. Cached result returned.\n    foo.bar()  # Function not called. Cached result returned.\n    ```\n\n- Long-lasting object instances that inherit from `object.__hash__`.\n\n    ```python3\n    class Foo:\n\n        @memoize\n        def bar(self) -> Any: ...\n\n    foo = Foo()\n    foo.bar()  # Function called. Result cached.\n\n    # foo instance is kept around somewhere and used later.\n    foo.bar()  # Function not called. Cached result returned.\n    ```\n\n## rate\nFunction decorator that rate limits the number of calls to function.\n\n- `size` must be provided. It specifies the maximum number of calls that may be made\n  concurrently and optionally within a given `duration` time window.\n- If `duration` is provided it limits the maximum call count to `size` in any given `duration`\n  time window.\n\n### Examples\n- Only 2 concurrent calls allowed.\n    ```python3\n    @rate(size=2)\n    def foo(): ...\n    ```\n\n- Only 2 calls allowed per minute.\n    ```python3\n    @rate(size=2, duration=60)\n    def foo(): ...\n    ```\n\n- Same as above, but duration specified with a timedelta.\n    ```python3\n    @rate(size=2, duration=datetime.timedelta(minutes=1))\n    def foo(): ...\n    ```\n\n- Same as above, but async.\n    ```python3\n    @rate(size=2, duration=datetime.timedelta(minutes=1))\n    async def foo(): ...\n    ```\n\n- More advanced rate limiting is possible by composing multiple rate decorators.\n    ```python3\n    # Up to 100 calls per minute, but only 10 concurrent.\n    @rate(size=100, duration=60)\n    @rate(size=10)\n    def foo(): ...\n    ```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cevans87/atools", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "atools", "package_url": "https://pypi.org/project/atools/", "platform": "", "project_url": "https://pypi.org/project/atools/", "project_urls": {"Homepage": "https://github.com/cevans87/atools"}, "release_url": "https://pypi.org/project/atools/0.13.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python 3.6+ async/sync memoize and rate decorators", "version": "0.13.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/cevans87/atools\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/efc70d944dbe0218ee69cc5c4f8c8c495fe99564/68747470733a2f2f7472617669732d63692e6f72672f636576616e7338372f61746f6f6c732e7376673f6272616e63683d6d6173746572266b696c6c5f63616368653d31\"></a>\n<a href=\"https://coveralls.io/github/cevans87/atools?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d433414768e1bec7406d83a758654d23cc87898e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f636576616e7338372f61746f6f6c732f62616467652e7376673f6272616e63683d6d6173746572266b696c6c5f63616368653d31\"></a></p>\n<h1>atools</h1>\n<p>Python 3.6+ decorators including</p>\n<ul>\n<li><code>@memoize</code> - a function decorator for sync and async functions that memoizes results.</li>\n<li><code>@rate</code> - a function decorator for sync and async functions that rate limits calls.</li>\n</ul>\n<h2>@memoize</h2>\n<p>Decorates a function call and caches return value for given inputs.</p>\n<ul>\n<li>If <code>db_path</code> is provided, memos will persist on disk and reloaded during initialization.</li>\n<li>If <code>duration</code> is provided, memos will only be valid for given <code>duration</code>.</li>\n<li>If <code>keygen</code> is provided, memo hash keys will be created with given <code>keygen</code>.</li>\n<li>If <code>size</code> is provided, LRU memo will be evicted if current count exceeds given <code>size</code>.</li>\n</ul>\n<h3>Examples</h3>\n<ul>\n<li>\n<p>Body will run once for unique input <code>bar</code> and result is cached.</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n</pre>\n</li>\n<li>\n<p>Same as above, but async.</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># Concurrent calls from the same event loop are safe. Only one call is generated. The</span>\n<span class=\"c1\"># other nine calls in this example wait for the result.</span>\n<span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)])</span>\n</pre>\n</li>\n<li>\n<p>Classes may be memoized.</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"n\">Class</span> <span class=\"n\">Foo</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Instance is actually created.</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Instance not created. Cached instance returned.</span>\n<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># Instance is actually created.</span>\n</pre>\n</li>\n<li>\n<p>Calls <code>foo(1)</code>, <code>foo(bar=1)</code>, and <code>foo(1, baz='baz')</code> are equivalent and only cached once.</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Only 2 items are cached. Acts as an LRU.</p>\n<pre><span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [foo(1)]</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [foo(1), foo(2)]</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [foo(2), foo(1)]</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [foo(1), foo(3)], foo(2) is evicted to keep cache size at 2</span>\n</pre>\n</li>\n<li>\n<p>Items are evicted after 1 minute.</p>\n<pre><span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n<span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">61</span><span class=\"p\">)</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Cached result was too old.</span>\n</pre>\n</li>\n<li>\n<p>Memoize can be explicitly reset through the function's <code>.memoize</code> attribute</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">memoize</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Cache was emptied.</span>\n</pre>\n</li>\n<li>\n<p>Current cache length can be accessed through the function's <code>.memoize</code> attribute</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">memoize</span><span class=\"p\">)</span>  <span class=\"c1\"># returns 2</span>\n</pre>\n</li>\n<li>\n<p>Alternate memo hash function can be specified. The inputs must match the function's.</p>\n<pre><span class=\"n\">Class</span> <span class=\"n\">Foo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">keygen</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">))</span>  <span class=\"c1\"># Omit 'self' from hash key.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(),</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Hash key will be (a, b, c)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [Foo.bar(a, 1, 2, 3)]</span>\n\n<span class=\"c1\"># Hash key will again be (a, b, c)</span>\n<span class=\"c1\"># Be aware, in this example the returned result comes from a.bar(...), not b.bar(...).</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n<li>\n<p>If part of the returned key from keygen is awaitable, it will be awaited.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">awaitable_key_part</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Hashable</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">keygen</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">awaitable_key_part</span><span class=\"p\">()))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>If the memoized function is async and any part of the key is awaitable, it is awaited.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">morph_a</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">keygen</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">morph_a</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Properties can be memoized.</p>\n<pre><span class=\"n\">Class</span> <span class=\"n\">Foo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"nd\">@memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span> <span class=\"c1\"># Memoize uses 'self' parameter in hash. 'b' does not share returns with 'a'</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">bar</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">bar</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n<li>\n<p>Be careful with eviction on instance methods. Memoize is not instance-specific.</p>\n<pre><span class=\"n\">Class</span> <span class=\"n\">Foo</span><span class=\"p\">:</span>\n    <span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">baz</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(),</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [Foo.bar(a, 1)]</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># LRU cache order [Foo.bar(b, 1)], Foo.bar(a, 1) is evicted</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Foo.bar(a, 1) is actually called and cached again.</span>\n</pre>\n</li>\n<li>\n<p>Values can persist to disk and be reloaded when memoize is initialized again.</p>\n<pre><span class=\"nd\">@memoize</span><span class=\"p\">(</span><span class=\"n\">db_path</span><span class=\"o\">=</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"s1\">'.memoize'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function actually called. Result cached.</span>\n\n<span class=\"c1\"># Process is restarted. Upon restart, the state of the memoize decorator is reloaded.</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n<li>\n<p>If not applied to a function, calling the decorator returns a partial application.</p>\n<pre><span class=\"n\">memoize_db</span> <span class=\"o\">=</span> <span class=\"n\">memoize</span><span class=\"p\">(</span><span class=\"n\">db_path</span><span class=\"o\">=</span><span class=\"n\">Path</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"s1\">'.memoize'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@memoize_db</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"nd\">@memoize_db</span><span class=\"p\">(</span><span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Comparison equality does not affect memoize. Only hash equality matters.</p>\n<pre><span class=\"c1\"># Inherits object.__hash__</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Don't be fooled. memoize only cares about the hash.</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo0</span><span class=\"p\">,</span> <span class=\"n\">foo1</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">(),</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">foo0</span> <span class=\"o\">==</span> <span class=\"n\">foo1</span>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo0</span><span class=\"p\">)</span>  <span class=\"c1\"># Function called. Result cached.</span>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo1</span><span class=\"p\">)</span>  <span class=\"c1\"># Function called again, despite equality, due to different hash.</span>\n</pre>\n</li>\n</ul>\n<h3>A warning about arguments that inherit <code>object.__hash__</code>:</h3>\n<p>It doesn't make sense to keep a memo if it's impossible to generate the same input again. Inputs\nthat inherit the default <code>object.__hash__</code> are unique based on their id, and thus, their\nlocation in memory. If such inputs are garbage-collected, they are gone forever. For that\nreason, when those inputs are garbage collected, <code>memoize</code> will drop memos created using those\ninputs.</p>\n<ul>\n<li>\n<p>Memo lifetime is bound to the lifetime of any arguments that inherit <code>object.__hash__</code>.</p>\n<pre><span class=\"c1\"># Inherits object.__hash__</span>\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"n\">Foo</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">())</span>  <span class=\"c1\"># Memo is immediately deleted since Foo() is garbage collected.</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>  <span class=\"c1\"># Memo isn't deleted until foo is deleted.</span>\n<span class=\"k\">del</span> <span class=\"n\">foo</span>  <span class=\"c1\"># Memo is deleted at the same time as foo.</span>\n</pre>\n</li>\n<li>\n<p>Types that have specific, consistent hash functions (int, str, etc.) won't cause problems.</p>\n<pre><span class=\"nd\">@memoize</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">))</span>  <span class=\"c1\"># Function called. Result cached.</span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">))</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n<li>\n<p>Classmethods rely on classes, which inherit from <code>object.__hash__</code>. However, classes are\nalmost never garbage collected until a process exits so memoize will work as expected.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n  <span class=\"nd\">@classmethod</span>\n  <span class=\"nd\">@memoize</span>\n  <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function called. Result cached.</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n\n<span class=\"k\">del</span> <span class=\"n\">foo</span>  <span class=\"c1\"># Memo not cleared since lifetime is bound to class Foo.</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n<li>\n<p>Long-lasting object instances that inherit from <code>object.__hash__</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n\n    <span class=\"nd\">@memoize</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function called. Result cached.</span>\n\n<span class=\"c1\"># foo instance is kept around somewhere and used later.</span>\n<span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>  <span class=\"c1\"># Function not called. Cached result returned.</span>\n</pre>\n</li>\n</ul>\n<h2>rate</h2>\n<p>Function decorator that rate limits the number of calls to function.</p>\n<ul>\n<li><code>size</code> must be provided. It specifies the maximum number of calls that may be made\nconcurrently and optionally within a given <code>duration</code> time window.</li>\n<li>If <code>duration</code> is provided it limits the maximum call count to <code>size</code> in any given <code>duration</code>\ntime window.</li>\n</ul>\n<h3>Examples</h3>\n<ul>\n<li>\n<p>Only 2 concurrent calls allowed.</p>\n<pre><span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Only 2 calls allowed per minute.</p>\n<pre><span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Same as above, but duration specified with a timedelta.</p>\n<pre><span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>Same as above, but async.</p>\n<pre><span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n</li>\n<li>\n<p>More advanced rate limiting is possible by composing multiple rate decorators.</p>\n<pre><span class=\"c1\"># Up to 100 calls per minute, but only 10 concurrent.</span>\n<span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">duration</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"nd\">@rate</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"o\">...</span>\n</pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6892156, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "20390a27716455951cdc59c4db1fca28", "sha256": "8a31bef34a0daa1d271ea2dffd072abd2c2a212c8c6cf824d2dc457ba0adad6e"}, "downloads": -1, "filename": "atools-0.0.0.tar.gz", "has_sig": false, "md5_digest": "20390a27716455951cdc59c4db1fca28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4964, "upload_time": "2018-12-27T01:39:58", "upload_time_iso_8601": "2018-12-27T01:39:58.865634Z", "url": "https://files.pythonhosted.org/packages/66/5d/b357b8cc214452617ef79158244fc1fd031abcb46c91836b2d886adbfa9d/atools-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d057903727197eb1cec559870bbb89b1", "sha256": "82cbd35c02a797edf9a68a6bafaa4f9a2a53585d64974a02a87e1fbea32917be"}, "downloads": -1, "filename": "atools-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d057903727197eb1cec559870bbb89b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5798, "upload_time": "2018-12-30T19:11:40", "upload_time_iso_8601": "2018-12-30T19:11:40.674757Z", "url": "https://files.pythonhosted.org/packages/d0/51/4405782ae307e2e1dcca2697722894b3082711992a57a2af37d871635d0a/atools-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c9ad9a032778d0c5986ced7f40c07ab8", "sha256": "5ab09e9127f9768fd3de96b8daecd6a5ead6370305aa19f4dbb94f0d67038831"}, "downloads": -1, "filename": "atools-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9ad9a032778d0c5986ced7f40c07ab8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6028, "upload_time": "2018-12-31T18:01:38", "upload_time_iso_8601": "2018-12-31T18:01:38.113261Z", "url": "https://files.pythonhosted.org/packages/63/f9/c12dccc0a6aaffdf6c27e319b962bfc67e62369ae5152c72da6eaf284e93/atools-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "27ec18e8a866823f28ecfec0771585d0", "sha256": "28723833308d37f88aa9e6db4ed07464eb8656b2072e66410f9ea7a7a324e9c9"}, "downloads": -1, "filename": "atools-0.1.2.tar.gz", "has_sig": false, "md5_digest": "27ec18e8a866823f28ecfec0771585d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6074, "upload_time": "2019-01-03T04:40:11", "upload_time_iso_8601": "2019-01-03T04:40:11.616133Z", "url": "https://files.pythonhosted.org/packages/f8/8c/0d686a51450f32bca143078628b2be9297ee55aed88370c9d22405b2d0c6/atools-0.1.2.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "ba10b48c9adc64cc9bf1a73ff78a4879", "sha256": "506eba21ab15c4db92baab94331ffda4f4af9c19bf7f1546132a8dc279da6084"}, "downloads": -1, "filename": "atools-0.10.0.tar.gz", "has_sig": false, "md5_digest": "ba10b48c9adc64cc9bf1a73ff78a4879", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11723, "upload_time": "2019-12-12T20:24:23", "upload_time_iso_8601": "2019-12-12T20:24:23.358787Z", "url": "https://files.pythonhosted.org/packages/bf/fe/fba3d34e6b23ba939069913adcd84671457dfb1f18107c677ac7e604649e/atools-0.10.0.tar.gz", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "277526c4ffeb4cb991367fe51f4e482e", "sha256": "5f675cf3c8e3e0b18f3793800dec499e6d00d08e12677d64f4f3e568efa5b09c"}, "downloads": -1, "filename": "atools-0.10.1.tar.gz", "has_sig": false, "md5_digest": "277526c4ffeb4cb991367fe51f4e482e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11825, "upload_time": "2019-12-17T20:59:16", "upload_time_iso_8601": "2019-12-17T20:59:16.683653Z", "url": "https://files.pythonhosted.org/packages/7d/22/077cb807b335b8145704e3e27618000fb6d1688f0173dc7b38b150a04d05/atools-0.10.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "70ad9e70563d36e69191a561b9907a1c", "sha256": "60a814aa15cec8d74bfac14c4454802465ee8d9a5f52265bcdde8f1a764a61ec"}, "downloads": -1, "filename": "atools-0.10.2.tar.gz", "has_sig": false, "md5_digest": "70ad9e70563d36e69191a561b9907a1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11904, "upload_time": "2019-12-18T03:30:45", "upload_time_iso_8601": "2019-12-18T03:30:45.325046Z", "url": "https://files.pythonhosted.org/packages/32/d9/f3bcd735fd98b72fa063c25437c34172dd526512ebbb23a3e3e6eba1601b/atools-0.10.2.tar.gz", "yanked": false}], "0.10.3": [{"comment_text": "", "digests": {"md5": "14172dd63be1a5a53f0e9a715ee2cfdd", "sha256": "cb48835c52a5df963f505af83c5231912fc1279016b1ffc17dba1e1299c69b84"}, "downloads": -1, "filename": "atools-0.10.3.tar.gz", "has_sig": false, "md5_digest": "14172dd63be1a5a53f0e9a715ee2cfdd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11908, "upload_time": "2019-12-19T23:41:31", "upload_time_iso_8601": "2019-12-19T23:41:31.000764Z", "url": "https://files.pythonhosted.org/packages/32/ce/cb380bb31279f975e3724a5cd51b32d1d4cf10806f1859d09a35a5347a53/atools-0.10.3.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "c780144305278c06526fa2f075b0df1b", "sha256": "5b5d334079be73a1fca80fe641e4b2967ed174405de52625e858a6673227cd98"}, "downloads": -1, "filename": "atools-0.10.4.tar.gz", "has_sig": false, "md5_digest": "c780144305278c06526fa2f075b0df1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11909, "upload_time": "2020-01-01T07:28:46", "upload_time_iso_8601": "2020-01-01T07:28:46.540414Z", "url": "https://files.pythonhosted.org/packages/51/77/136e7b467c294b07ace25b2c55d8e01eb521c0384a1269fb10adde074627/atools-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "0894e163840c458b91cada1a0cc4a507", "sha256": "966a195553604ce3dc268fbd0f97375e8ba018e59574788ce15a03904f8627d4"}, "downloads": -1, "filename": "atools-0.10.5.tar.gz", "has_sig": false, "md5_digest": "0894e163840c458b91cada1a0cc4a507", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12291, "upload_time": "2020-01-21T04:36:38", "upload_time_iso_8601": "2020-01-21T04:36:38.757275Z", "url": "https://files.pythonhosted.org/packages/9c/c8/5a8bf82af269f9434561016370ee9147a93baaffb84e0b8f034e41dec828/atools-0.10.5.tar.gz", "yanked": false}], "0.10.6": [{"comment_text": "", "digests": {"md5": "45a80fc1a84842ef6a8e87c3c069ac38", "sha256": "4710acdd64c9bd3ca22568ab00dd415faf73b316c4dce677cf25f8235da36b43"}, "downloads": -1, "filename": "atools-0.10.6.tar.gz", "has_sig": false, "md5_digest": "45a80fc1a84842ef6a8e87c3c069ac38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13752, "upload_time": "2020-03-09T20:28:40", "upload_time_iso_8601": "2020-03-09T20:28:40.995675Z", "url": "https://files.pythonhosted.org/packages/ed/4b/4d98bdfa0822b587f8f64e4672231a07709bad5fe4907aa9862b65caa9d3/atools-0.10.6.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "17b4b979369346e68b850da904d4937a", "sha256": "a3d733df20d60297726ec9aa44adab99e27d57090401d5ac52551282c316d3ed"}, "downloads": -1, "filename": "atools-0.11.0.tar.gz", "has_sig": false, "md5_digest": "17b4b979369346e68b850da904d4937a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13338, "upload_time": "2020-03-16T20:23:59", "upload_time_iso_8601": "2020-03-16T20:23:59.576242Z", "url": "https://files.pythonhosted.org/packages/d9/d0/d098f2907b256c04edc0eaaa9f595b68ce56fd473b7d10bf3e5886945a3f/atools-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "bffce1450c5c4811637851dd4015695b", "sha256": "7ffe723637ba6df249dc0c672b65d8895b4d6476ba5da98a0bd7d094843090bf"}, "downloads": -1, "filename": "atools-0.12.0.tar.gz", "has_sig": false, "md5_digest": "bffce1450c5c4811637851dd4015695b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12656, "upload_time": "2020-03-20T23:11:03", "upload_time_iso_8601": "2020-03-20T23:11:03.775041Z", "url": "https://files.pythonhosted.org/packages/52/d6/fd08ad82cf8700bc372a0eadc3a0fffd083ba6b4665a78fbcfeef4d1f2b1/atools-0.12.0.tar.gz", "yanked": false}], "0.12.1": [{"comment_text": "", "digests": {"md5": "8eec735ef9a44ea786874b78c32c13cc", "sha256": "6841a78284b575e1218be1e3819ef2dad32eb405a8e02fc7d7d11ec90042aa7a"}, "downloads": -1, "filename": "atools-0.12.1.tar.gz", "has_sig": false, "md5_digest": "8eec735ef9a44ea786874b78c32c13cc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13760, "upload_time": "2020-03-22T05:44:04", "upload_time_iso_8601": "2020-03-22T05:44:04.415569Z", "url": "https://files.pythonhosted.org/packages/a9/f6/58583c5f4741e4bc70158599829c83a16338a8dadf88378dfa76938b3ae4/atools-0.12.1.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "2f3bca817338dc4f9e56ccae2bd18990", "sha256": "6c316f402f66c2d3e9f63c5643690d8eb2bd802ea8d9928605ff8ed6e8cd3a42"}, "downloads": -1, "filename": "atools-0.13.0.tar.gz", "has_sig": false, "md5_digest": "2f3bca817338dc4f9e56ccae2bd18990", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13912, "upload_time": "2020-03-26T20:32:39", "upload_time_iso_8601": "2020-03-26T20:32:39.895424Z", "url": "https://files.pythonhosted.org/packages/08/c7/df96f33f25c04a4d3e70e7992bfcda1ee06c531920e5e33bfe86775504e6/atools-0.13.0.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "128f9f5c6c97002177d53949fee8728c", "sha256": "2a799de12a008549eaf31b57a5df4cba2e84eeeb51459b547f99d49f5e823d1e"}, "downloads": -1, "filename": "atools-0.13.1.tar.gz", "has_sig": false, "md5_digest": "128f9f5c6c97002177d53949fee8728c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13906, "upload_time": "2020-03-26T21:50:27", "upload_time_iso_8601": "2020-03-26T21:50:27.434779Z", "url": "https://files.pythonhosted.org/packages/7f/d4/5360a1c4d96d175a3778cafc8fb9ed87333f9c58bcb0d2fc308c9b993d17/atools-0.13.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a83f295f3325ed47a07c6cba31f935f9", "sha256": "244f41c009e59533ae39189cb29916b4afa3613a902d45c879870939eac402eb"}, "downloads": -1, "filename": "atools-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a83f295f3325ed47a07c6cba31f935f9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6644, "upload_time": "2019-01-05T22:25:44", "upload_time_iso_8601": "2019-01-05T22:25:44.882101Z", "url": "https://files.pythonhosted.org/packages/b9/59/707b75eb73d1d57a7a2b7efa4beb790452197b9cd07f4c5e1e1fc5f6d206/atools-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "2cae81e988a8f90472951567336b60f7", "sha256": "542a0974a8dacb665e93ec2e8810b9d16ecf8b4f5f7f0b7d626e396a2cfef792"}, "downloads": -1, "filename": "atools-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2cae81e988a8f90472951567336b60f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8062, "upload_time": "2019-01-13T23:47:17", "upload_time_iso_8601": "2019-01-13T23:47:17.280190Z", "url": "https://files.pythonhosted.org/packages/c1/01/9cb164e3a5796693b6e5666cd08ef2468b54a355b055137ec552cc4e334a/atools-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8bdb5bcf0020170444867e38fd5f760f", "sha256": "e41f913ad3d0755452be36f70c4bf5a00c3332e06a94ab67f357da5bdd1fb0e5"}, "downloads": -1, "filename": "atools-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8bdb5bcf0020170444867e38fd5f760f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10248, "upload_time": "2019-01-24T04:56:31", "upload_time_iso_8601": "2019-01-24T04:56:31.524884Z", "url": "https://files.pythonhosted.org/packages/16/6f/314b20bc8f0f3eee322333ecaf891eb7925b57f71b01275a11c6168673a1/atools-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0df938cd1f144932b65ff6d0c3fccc18", "sha256": "893cd1d94e068a9080535da340c30d930dd21f295e1d6c7b3d7d1b530bb6cce6"}, "downloads": -1, "filename": "atools-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0df938cd1f144932b65ff6d0c3fccc18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9611, "upload_time": "2019-01-25T17:10:07", "upload_time_iso_8601": "2019-01-25T17:10:07.554236Z", "url": "https://files.pythonhosted.org/packages/3e/9d/b513a39ff48781c9710c49cfa0857962a45b5daf5efea876ef10dddeb690/atools-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "da88b5985fafa7c619995a9191a77a54", "sha256": "126c2c662ebccea65d0ee1f4a127290cc0386bbdc8be4e3012df359e522d0ae2"}, "downloads": -1, "filename": "atools-0.4.0.tar.gz", "has_sig": false, "md5_digest": "da88b5985fafa7c619995a9191a77a54", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9810, "upload_time": "2019-02-02T04:53:47", "upload_time_iso_8601": "2019-02-02T04:53:47.441925Z", "url": "https://files.pythonhosted.org/packages/71/41/935a08a11e7c5c74c5c14eb52265a723a7ad4242819a5bbbdfa821d99ffb/atools-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "97ef0d80dde9f85e4f249a6c2db09b1c", "sha256": "d58139b298cdde291e6156563c57784814fa2fba44547c9e269c9963bdc85fac"}, "downloads": -1, "filename": "atools-0.4.1.tar.gz", "has_sig": false, "md5_digest": "97ef0d80dde9f85e4f249a6c2db09b1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9927, "upload_time": "2019-02-02T05:34:18", "upload_time_iso_8601": "2019-02-02T05:34:18.007538Z", "url": "https://files.pythonhosted.org/packages/6a/75/a84d399e316baa5e5446bbc9d323acff9ab0be88da605219d9bb9dec16f1/atools-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "128517725fa133f8f8920206bdb64660", "sha256": "679320621e986d24349f29543097eb22df73a26e9eb52b30bd97f3df11ec3814"}, "downloads": -1, "filename": "atools-0.5.0.tar.gz", "has_sig": false, "md5_digest": "128517725fa133f8f8920206bdb64660", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10225, "upload_time": "2019-02-28T00:47:23", "upload_time_iso_8601": "2019-02-28T00:47:23.033108Z", "url": "https://files.pythonhosted.org/packages/13/d8/0b9e9919b4d474ab3d4e412607e0ace2e15ecb7537e76e415c6c2fb55f3a/atools-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "60a92c7b7959b2e998685eb5c62eae60", "sha256": "6011945b32f063e36c5835146fe757167ee6d6c97ea58ce3fe223634628b3f59"}, "downloads": -1, "filename": "atools-0.5.1.tar.gz", "has_sig": false, "md5_digest": "60a92c7b7959b2e998685eb5c62eae60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10527, "upload_time": "2019-03-22T05:21:05", "upload_time_iso_8601": "2019-03-22T05:21:05.622055Z", "url": "https://files.pythonhosted.org/packages/3a/19/8c66694336b1e4be9a2ac20f1e84eb5c80a25e19b21163a30cbe02ee53c9/atools-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "e1b43f43bbc5d28ae6456e7ed35de207", "sha256": "19f283838a398ddb4873372a122050e0cf1b90cdd938d5401c8c09252a79cfd6"}, "downloads": -1, "filename": "atools-0.5.2.tar.gz", "has_sig": false, "md5_digest": "e1b43f43bbc5d28ae6456e7ed35de207", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10812, "upload_time": "2019-05-20T17:11:17", "upload_time_iso_8601": "2019-05-20T17:11:17.917513Z", "url": "https://files.pythonhosted.org/packages/9f/47/58ff6d397d60b4ee11669e43fb9efacd811c1174a263b9731b3c63a7049b/atools-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "d3ac6a30f50ba0eac8708457b5a632df", "sha256": "5929b885f6abe547ec98fae083bd8006e0728f682fe11856a74cf0b3cd869359"}, "downloads": -1, "filename": "atools-0.6.0.tar.gz", "has_sig": false, "md5_digest": "d3ac6a30f50ba0eac8708457b5a632df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10943, "upload_time": "2019-06-05T19:49:37", "upload_time_iso_8601": "2019-06-05T19:49:37.709757Z", "url": "https://files.pythonhosted.org/packages/cb/64/c803c7c5cb54538dfb61b62d4111d498a5e415138f73b4331a289aa976f5/atools-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "e386d70c9a4caf333ff60dd1e3a70e71", "sha256": "af7771be12114f1c9a351e032c1572f28035b3fc34d458e37f464dbeaffa16ad"}, "downloads": -1, "filename": "atools-0.6.1.tar.gz", "has_sig": false, "md5_digest": "e386d70c9a4caf333ff60dd1e3a70e71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10591, "upload_time": "2019-06-24T04:14:17", "upload_time_iso_8601": "2019-06-24T04:14:17.598796Z", "url": "https://files.pythonhosted.org/packages/9c/07/b7282d33c2a9077911f057019ef3f23b99a0952b5f70b178d33b07d149d8/atools-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "706ad495c4950f7d07dcc7ede7f1707d", "sha256": "59f79edfd0d8c475b845504368edb94198706fdcde03ab0b3e32ef885ed06d96"}, "downloads": -1, "filename": "atools-0.6.2.tar.gz", "has_sig": false, "md5_digest": "706ad495c4950f7d07dcc7ede7f1707d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10639, "upload_time": "2019-07-13T18:20:33", "upload_time_iso_8601": "2019-07-13T18:20:33.813729Z", "url": "https://files.pythonhosted.org/packages/c0/0e/60b790cd4286d7457e8b2e7ff8f44b10965582392b74647059853a94633c/atools-0.6.2.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "e0cde624bb20f0f2026e1db64c1dab75", "sha256": "9b91be97aeae6d5f489a73245249a0d37037cb2dfaf18f662e8e0c879828422d"}, "downloads": -1, "filename": "atools-0.7.0.tar.gz", "has_sig": false, "md5_digest": "e0cde624bb20f0f2026e1db64c1dab75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8593, "upload_time": "2019-09-19T16:38:33", "upload_time_iso_8601": "2019-09-19T16:38:33.122819Z", "url": "https://files.pythonhosted.org/packages/09/d2/42c845d8b0f5c598125c6d66f5bc47db89f0cc10abec6ba4d80aefa2ad7e/atools-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "6b6e0236223fd73561b61516eb55a925", "sha256": "c7993a62131a393ba3e916209b276dfe4dff458a870c404cfc993c8df7508b72"}, "downloads": -1, "filename": "atools-0.8.0.tar.gz", "has_sig": false, "md5_digest": "6b6e0236223fd73561b61516eb55a925", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8618, "upload_time": "2019-12-10T01:25:45", "upload_time_iso_8601": "2019-12-10T01:25:45.157571Z", "url": "https://files.pythonhosted.org/packages/62/b6/1404c826f282828a043ee658665f6d48db6d2b922101c121123f0c7ee354/atools-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "f5104394ef907764fcd89fb85067d207", "sha256": "2af5f71272ca0d69704c90ded74b57ecf850e4e0087d0a7a92d07d0a2d3dea6d"}, "downloads": -1, "filename": "atools-0.9.0.tar.gz", "has_sig": false, "md5_digest": "f5104394ef907764fcd89fb85067d207", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11154, "upload_time": "2019-12-11T23:16:50", "upload_time_iso_8601": "2019-12-11T23:16:50.533101Z", "url": "https://files.pythonhosted.org/packages/bc/99/35efedb04a6621b40b8a071b6a0b5681f4dbf0d63776adc240cddd9e275a/atools-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "416f7ffede4692415a21dca42df04387", "sha256": "4f3a2571e2977e8642fc4115f3339d5448fb8994707e1d131315857998e6930a"}, "downloads": -1, "filename": "atools-0.9.1.tar.gz", "has_sig": false, "md5_digest": "416f7ffede4692415a21dca42df04387", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11307, "upload_time": "2019-12-12T04:34:31", "upload_time_iso_8601": "2019-12-12T04:34:31.917880Z", "url": "https://files.pythonhosted.org/packages/80/ab/cca8a7930903c9c22fff933c87ff18c01b2b47e5c6591307c6d0828b038b/atools-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "8f03f424efb836eae7dcea4360da388b", "sha256": "8ef9a48efd72b21064300fbab5e8d3b3eec23c232ced0a0b434522ea0687fbbc"}, "downloads": -1, "filename": "atools-0.9.2.tar.gz", "has_sig": false, "md5_digest": "8f03f424efb836eae7dcea4360da388b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11234, "upload_time": "2019-12-12T05:27:11", "upload_time_iso_8601": "2019-12-12T05:27:11.693661Z", "url": "https://files.pythonhosted.org/packages/46/f8/e71f9b9467df48ac664d9b895382327b783bad032757548515b289a7de61/atools-0.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "128f9f5c6c97002177d53949fee8728c", "sha256": "2a799de12a008549eaf31b57a5df4cba2e84eeeb51459b547f99d49f5e823d1e"}, "downloads": -1, "filename": "atools-0.13.1.tar.gz", "has_sig": false, "md5_digest": "128f9f5c6c97002177d53949fee8728c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13906, "upload_time": "2020-03-26T21:50:27", "upload_time_iso_8601": "2020-03-26T21:50:27.434779Z", "url": "https://files.pythonhosted.org/packages/7f/d4/5360a1c4d96d175a3778cafc8fb9ed87333f9c58bcb0d2fc308c9b993d17/atools-0.13.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:32 2020"}