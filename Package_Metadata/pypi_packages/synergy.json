{"info": {"author": "David J. Wooten", "author_email": "dwooten@psu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "<img src=\"https://djwooten.github.io/img/synergy_logo.png\" width=\"400\" />\n\n# synergy\n\nA python package to calculate, analyze, and visualize drug combination synergy and antagonism. Currently supports multiple models of synergy, including MuSyC, Bliss, Loewe, Combination Index, ZIP, Zimmer, BRAID, Schindler, and HSA.\n\n## Installation\n\nUsing PIP\n`pip install synergy`\n\nUsing conda\n`not yet`\n\nUsing git\n`git clone ...`\n\n## Example Usage\n\n### Parametric Models\n\n#### Fit to data\n\n```python\nfrom synergy.combination import MuSyC # or BRAID, Zimmer\nimport pandas as pd\n\ndf = pd.read_csv(\"your_own_drug_response_data.csv\")\n\nmodel = MuSyC(E0_bounds=(0,1), E1_bounds=(0,1), E2_bounds=(0,1), E3_bounds=(0,1))\nmodel.fit(df['drug1.conc'], df['drug2.conc'], df['effect'], bootstrap_iterations=100)\n```\n\nBounds are optional, but will help the fitting algorithm if you know them. Each model has different parameters that may mean different things, so you may wish to check your choice model's `__init__()` arguments.\n\n#### Get parameters + confidence intervals\n\n```python\nmodel.get_parameters(confidence_interval=95)\n```\n\nEach synergy model has their own synergy parameters. Read their documentation and publications to understand what they mean. Confidence intervals are only generated if you set the number of `bootstrap_iterations` in `model.fit()`. The full results of the bootstrapping are stored in `model.bootstrap_parameters`.  If you request a 95% confidence interval, `get_parameters()` will calculate the 2.5% and 97.5% percentiles for each parameter.\n\n#### Summarize synergy conclusions\n\n```python\nprint(model.summary(confidence_interval=95))\n```\n\nThis will report any parameters that are synergistic or antagonistic across the entire requested confidence interval. If the model was not fit with `bootstrap_iterations`, only the best fit value is used to determine synergism or antagonism.\n\n#### Visualize\n\n```python\n# Requires matplotlib\nmodel.plot_colormap(df['drug1.conc'], df['drug2.conc'], xlabel=\"Drug1\", ylabel=\"Drug2\")\n\n# Requires plotly\nmodel.plot_surface_plotly(df['drug1.conc'], df['drug2.conc'], xlabel=\"Drug1\", \t\\\n                          ylabel=\"Drug2\", zlabel=\"Effect\", fname=\"plotly.html\", \\\n                          scatter_points=df)\n```\n\nVisualization requires the doses for drug 1 and drug 2 to be sampled on a complete rectangular grid. So for instance, if drug 1 is sampled at 0, 0.01, 0.1, 1, 10 uM (a total of 5 concentrations), and drug 1 is sampled at 0, 0.1, 1, 10 uM (a total of 4 concentrations), the doses and effects must cover all pairwise combinations (e.g., 5*4=20 points must be given). `scatter_points` is optional, but if given, it should be a pandas.DataFrame with (at least) columns \"drug1.conc\", \"drug2.conc\", and \"effect\".\n\n#### Generate synthetic data\n\n```python\nfrom synergy.utils.dose_tools import grid\nimport numpy as np\n\nmodel = MuSyC(E0=1, E1=0.6, E2=0.4, E3=0, h1=2, h2=0.8, C1=1e-2, C2=1e-1, \\\n              oalpha12=2, oalpha21=1, gamma12=2.5, gamma21=0.7)\n\n# d1min, d1max, d2min, d2max, npoints1, npoints2\nd1, d2 = grid(1e-3, 1e0, 1e-3, 1e0, 8, 8)\n\nE = model.E(d1, d2)\n```\n\n### Nonparametric (dose dependent) synergy models\n\n#### Fit to data\n\n```python\nfrom synergy.combination import Loewe # or Bliss, ZIP, HSA, Schindler, CombinationIndex\nimport pandas as pd\n\ndf = pd.read_csv(\"your_own_drug_response_data.csv\")\nmodel = Loewe()\nmodel.fit(df['drug1.conc'], df['drug2.conc'], df['effect'])\n```\n\n#### Get synergy values\n\n```python\nprint(model.synergy) # Will have size equal to d1, d2, and E passed to fit()\n```\n\n#### Visualize\n\n```python\n# Requires matplotlib\nmodel.plot_colormap(xlabel=\"Drug1\", ylabel=\"Drug2\")\n\n# Requires plotly\nmodel.plot_surface_plotly(xlabel=\"Drug1\", ylabel=\"Drug2\", \t\t\t\t\\\n                          zlabel=\"Loewe Synergy\", fname=\"plotly.html\")\n```\n\n### 3+ Drug Combination Synergy\n\nCurrently, only MuSyC, Loewe, Bliss, HSA, Combination Index, and Schindler can be used to calculate synergy of 3+ drug combinations. 3+ drug models are implemented separately (allowing for some optimizations for the two-drug case), so 3+ drug models are imported from `synergy.higher`\n\n#### Fitting 3+ drug parametric models\n\n```python\nfrom synergy.higher import MuSyC\nimport pandas as pd\n\ndf = pd.read_csv(\"your_own_drug_response_data.csv\")\n\nmodel = MuSyC(E_bounds=(0,1), h_bounds=(1e-3,1e3)) # NOT E0_bounds, E1_bounds, etc...\n\nmodel.fit(df[['drug1.conc','drug2.conc','drug3.conc']], df['effect'], \t\\\n          bootstrap_iterations=20)\n```\n\nUnlike the two drug case, doses are passed to the three+ drug case in a single matrix-like object, with M rows (number of samples) and N columns (number of drugs). Further, bounds are not specified for each individual drug, but rather `E_bounds`, `h_bounds`, etc, will be used for all drugs.\n\n#### Visualization\n\nFor three drugs, E is a 3D scalar field. One option for visualization is to use `synergy.utils.plots.plot_colormap(d1, d2, E)` where E is calculated across `d1` and `d2`, but on fixed slices of `d3`. An additional option is to use plotly isosurfaces, which render curved 2D surfaces of constant E in a 3D space. These isosurfaces are similar to stacks of colormaps. This is implemented for `synergy.higher` models as\n\n```\nmodel.plotly_isosurfaces(d, drug_axes=[0,1,2])\n```\n\n`drug_axes` specifies which three drugs will be used for the axes of the isosurface plot. The other drugs will be kept at their minimum value, or can be manually fixed to specific values using the optional `other_drug_slices` argument.\n\n#### Fitting and visualizing 3+ dose-dependent models\n\n```python\nfrom synergy.higher import Bliss # or Loewe, HSA, Schindler, CombinationIndex\nimport pandas as pd\n\ndf = pd.read_csv(\"your_own_drug_response_data.csv\")\n\nmodel = Bliss()\n\nmodel.fit(df[['drug1.conc','drug2.conc','drug3.conc']], df['effect'])\n\n# Visualizatoin\nmodel.plotly_isosurfaces()\n```\n\n\n\n## Requirements\n\n* python >= 3.5\n* numpy >= 1.13.0\n* scipy >= 0.18.0\n* Optional for full plotting functionality\n  * matplotlib\n  * plotly\n  * pandas\n\n## Current features\n* Calculate two-drug synergy using\n  * Parametric\n    * MuSyC\n    * Zimmer (effective dose model)\n    * BRAID\n  * Dose-dependent\n    * Bliss\n    * Loewe\n    * Schindler\n    * ZIP\n    * HSA\n    * Combination Index\n* Calculate 3+ drug synergy using\n  * Parametric\n    * MuSyC\n  * Dose-dependent\n    * Bliss\n    * Loewe\n    * Schindler\n    * HSA\n    * Combination Index\n* Residual bootstrap re-sampling to obtain confidence intervals for parameters of parametric models\n* Single drug models\n  * Parametric\n    * Four-parameter Hill equation\n    * Two-parameter Hill equation\n    * Median-effect equation\n  * Non-parametric\n    * Piecewise linear\n* Model scoring\n  * R-squared\n  * Akaike Information Criterion\n  * Bayesian Information Criterion\n* Visualization\n  * Heatmaps\n  * 3D Plotly Surfaces\n* Synthetic data tools\n  * Drug dilutions using grid-based sampling\n  * \"Sham experiment\" simulation\n\n## Planned features\n* Additional models\n  * Parametric\n    * GPDI\n* Additional dose / experiment design tools\n  * Alternative dosing strategies\n* Heteroskedastic re-sampling for datasets with >= 3 replicates at each dose\n* Parallelization API for fitting high-throughput screen data\n\n## License\nGNU General Public License v3 or later (GPLv3+)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/djwooten/synergy", "keywords": "synergy drug combination pharmacology cancer", "license": "", "maintainer": "", "maintainer_email": "", "name": "synergy", "package_url": "https://pypi.org/project/synergy/", "platform": "", "project_url": "https://pypi.org/project/synergy/", "project_urls": {"Homepage": "https://github.com/djwooten/synergy"}, "release_url": "https://pypi.org/project/synergy/0.3.0/", "requires_dist": ["scipy (>=0.18.0)", "numpy (>=1.13.0)"], "requires_python": ">=3.5", "summary": "Python package for calculating drug combination synergy", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a960351750a1f4f34f3f42378e8b6c5ff6a7eb1/68747470733a2f2f646a776f6f74656e2e6769746875622e696f2f696d672f73796e657267795f6c6f676f2e706e67\" width=\"400\">\n<h1>synergy</h1>\n<p>A python package to calculate, analyze, and visualize drug combination synergy and antagonism. Currently supports multiple models of synergy, including MuSyC, Bliss, Loewe, Combination Index, ZIP, Zimmer, BRAID, Schindler, and HSA.</p>\n<h2>Installation</h2>\n<p>Using PIP\n<code>pip install synergy</code></p>\n<p>Using conda\n<code>not yet</code></p>\n<p>Using git\n<code>git clone ...</code></p>\n<h2>Example Usage</h2>\n<h3>Parametric Models</h3>\n<h4>Fit to data</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">synergy.combination</span> <span class=\"kn\">import</span> <span class=\"n\">MuSyC</span> <span class=\"c1\"># or BRAID, Zimmer</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"your_own_drug_response_data.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MuSyC</span><span class=\"p\">(</span><span class=\"n\">E0_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">E1_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">E2_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">E3_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effect'</span><span class=\"p\">],</span> <span class=\"n\">bootstrap_iterations</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre>\n<p>Bounds are optional, but will help the fitting algorithm if you know them. Each model has different parameters that may mean different things, so you may wish to check your choice model's <code>__init__()</code> arguments.</p>\n<h4>Get parameters + confidence intervals</h4>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_parameters</span><span class=\"p\">(</span><span class=\"n\">confidence_interval</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">)</span>\n</pre>\n<p>Each synergy model has their own synergy parameters. Read their documentation and publications to understand what they mean. Confidence intervals are only generated if you set the number of <code>bootstrap_iterations</code> in <code>model.fit()</code>. The full results of the bootstrapping are stored in <code>model.bootstrap_parameters</code>.  If you request a 95% confidence interval, <code>get_parameters()</code> will calculate the 2.5% and 97.5% percentiles for each parameter.</p>\n<h4>Summarize synergy conclusions</h4>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">summary</span><span class=\"p\">(</span><span class=\"n\">confidence_interval</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</pre>\n<p>This will report any parameters that are synergistic or antagonistic across the entire requested confidence interval. If the model was not fit with <code>bootstrap_iterations</code>, only the best fit value is used to determine synergism or antagonism.</p>\n<h4>Visualize</h4>\n<pre><span class=\"c1\"># Requires matplotlib</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot_colormap</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">],</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug1\"</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug2\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires plotly</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot_surface_plotly</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">],</span> <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug1\"</span><span class=\"p\">,</span> \t\\\n                          <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug2\"</span><span class=\"p\">,</span> <span class=\"n\">zlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Effect\"</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s2\">\"plotly.html\"</span><span class=\"p\">,</span> \\\n                          <span class=\"n\">scatter_points</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>Visualization requires the doses for drug 1 and drug 2 to be sampled on a complete rectangular grid. So for instance, if drug 1 is sampled at 0, 0.01, 0.1, 1, 10 uM (a total of 5 concentrations), and drug 1 is sampled at 0, 0.1, 1, 10 uM (a total of 4 concentrations), the doses and effects must cover all pairwise combinations (e.g., 5*4=20 points must be given). <code>scatter_points</code> is optional, but if given, it should be a pandas.DataFrame with (at least) columns \"drug1.conc\", \"drug2.conc\", and \"effect\".</p>\n<h4>Generate synthetic data</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">synergy.utils.dose_tools</span> <span class=\"kn\">import</span> <span class=\"n\">grid</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MuSyC</span><span class=\"p\">(</span><span class=\"n\">E0</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">E1</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"n\">E2</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">E3</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">h1</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">C1</span><span class=\"o\">=</span><span class=\"mf\">1e-2</span><span class=\"p\">,</span> <span class=\"n\">C2</span><span class=\"o\">=</span><span class=\"mf\">1e-1</span><span class=\"p\">,</span> \\\n              <span class=\"n\">oalpha12</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">oalpha21</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gamma12</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">gamma21</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># d1min, d1max, d2min, d2max, npoints1, npoints2</span>\n<span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span> <span class=\"o\">=</span> <span class=\"n\">grid</span><span class=\"p\">(</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"mf\">1e0</span><span class=\"p\">,</span> <span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"mf\">1e0</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">E</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">)</span>\n</pre>\n<h3>Nonparametric (dose dependent) synergy models</h3>\n<h4>Fit to data</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">synergy.combination</span> <span class=\"kn\">import</span> <span class=\"n\">Loewe</span> <span class=\"c1\"># or Bliss, ZIP, HSA, Schindler, CombinationIndex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"your_own_drug_response_data.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Loewe</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effect'</span><span class=\"p\">])</span>\n</pre>\n<h4>Get synergy values</h4>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">synergy</span><span class=\"p\">)</span> <span class=\"c1\"># Will have size equal to d1, d2, and E passed to fit()</span>\n</pre>\n<h4>Visualize</h4>\n<pre><span class=\"c1\"># Requires matplotlib</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot_colormap</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug1\"</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug2\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires plotly</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plot_surface_plotly</span><span class=\"p\">(</span><span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug1\"</span><span class=\"p\">,</span> <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s2\">\"Drug2\"</span><span class=\"p\">,</span> \t\t\t\t\\\n                          <span class=\"n\">zlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Loewe Synergy\"</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s2\">\"plotly.html\"</span><span class=\"p\">)</span>\n</pre>\n<h3>3+ Drug Combination Synergy</h3>\n<p>Currently, only MuSyC, Loewe, Bliss, HSA, Combination Index, and Schindler can be used to calculate synergy of 3+ drug combinations. 3+ drug models are implemented separately (allowing for some optimizations for the two-drug case), so 3+ drug models are imported from <code>synergy.higher</code></p>\n<h4>Fitting 3+ drug parametric models</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">synergy.higher</span> <span class=\"kn\">import</span> <span class=\"n\">MuSyC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"your_own_drug_response_data.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MuSyC</span><span class=\"p\">(</span><span class=\"n\">E_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">h_bounds</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span><span class=\"mf\">1e3</span><span class=\"p\">))</span> <span class=\"c1\"># NOT E0_bounds, E1_bounds, etc...</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">,</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">,</span><span class=\"s1\">'drug3.conc'</span><span class=\"p\">]],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effect'</span><span class=\"p\">],</span> \t\\\n          <span class=\"n\">bootstrap_iterations</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p>Unlike the two drug case, doses are passed to the three+ drug case in a single matrix-like object, with M rows (number of samples) and N columns (number of drugs). Further, bounds are not specified for each individual drug, but rather <code>E_bounds</code>, <code>h_bounds</code>, etc, will be used for all drugs.</p>\n<h4>Visualization</h4>\n<p>For three drugs, E is a 3D scalar field. One option for visualization is to use <code>synergy.utils.plots.plot_colormap(d1, d2, E)</code> where E is calculated across <code>d1</code> and <code>d2</code>, but on fixed slices of <code>d3</code>. An additional option is to use plotly isosurfaces, which render curved 2D surfaces of constant E in a 3D space. These isosurfaces are similar to stacks of colormaps. This is implemented for <code>synergy.higher</code> models as</p>\n<pre><code>model.plotly_isosurfaces(d, drug_axes=[0,1,2])\n</code></pre>\n<p><code>drug_axes</code> specifies which three drugs will be used for the axes of the isosurface plot. The other drugs will be kept at their minimum value, or can be manually fixed to specific values using the optional <code>other_drug_slices</code> argument.</p>\n<h4>Fitting and visualizing 3+ dose-dependent models</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">synergy.higher</span> <span class=\"kn\">import</span> <span class=\"n\">Bliss</span> <span class=\"c1\"># or Loewe, HSA, Schindler, CombinationIndex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">\"your_own_drug_response_data.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bliss</span><span class=\"p\">()</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[[</span><span class=\"s1\">'drug1.conc'</span><span class=\"p\">,</span><span class=\"s1\">'drug2.conc'</span><span class=\"p\">,</span><span class=\"s1\">'drug3.conc'</span><span class=\"p\">]],</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'effect'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Visualizatoin</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">plotly_isosurfaces</span><span class=\"p\">()</span>\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>python &gt;= 3.5</li>\n<li>numpy &gt;= 1.13.0</li>\n<li>scipy &gt;= 0.18.0</li>\n<li>Optional for full plotting functionality\n<ul>\n<li>matplotlib</li>\n<li>plotly</li>\n<li>pandas</li>\n</ul>\n</li>\n</ul>\n<h2>Current features</h2>\n<ul>\n<li>Calculate two-drug synergy using\n<ul>\n<li>Parametric\n<ul>\n<li>MuSyC</li>\n<li>Zimmer (effective dose model)</li>\n<li>BRAID</li>\n</ul>\n</li>\n<li>Dose-dependent\n<ul>\n<li>Bliss</li>\n<li>Loewe</li>\n<li>Schindler</li>\n<li>ZIP</li>\n<li>HSA</li>\n<li>Combination Index</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Calculate 3+ drug synergy using\n<ul>\n<li>Parametric\n<ul>\n<li>MuSyC</li>\n</ul>\n</li>\n<li>Dose-dependent\n<ul>\n<li>Bliss</li>\n<li>Loewe</li>\n<li>Schindler</li>\n<li>HSA</li>\n<li>Combination Index</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Residual bootstrap re-sampling to obtain confidence intervals for parameters of parametric models</li>\n<li>Single drug models\n<ul>\n<li>Parametric\n<ul>\n<li>Four-parameter Hill equation</li>\n<li>Two-parameter Hill equation</li>\n<li>Median-effect equation</li>\n</ul>\n</li>\n<li>Non-parametric\n<ul>\n<li>Piecewise linear</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Model scoring\n<ul>\n<li>R-squared</li>\n<li>Akaike Information Criterion</li>\n<li>Bayesian Information Criterion</li>\n</ul>\n</li>\n<li>Visualization\n<ul>\n<li>Heatmaps</li>\n<li>3D Plotly Surfaces</li>\n</ul>\n</li>\n<li>Synthetic data tools\n<ul>\n<li>Drug dilutions using grid-based sampling</li>\n<li>\"Sham experiment\" simulation</li>\n</ul>\n</li>\n</ul>\n<h2>Planned features</h2>\n<ul>\n<li>Additional models\n<ul>\n<li>Parametric\n<ul>\n<li>GPDI</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Additional dose / experiment design tools\n<ul>\n<li>Alternative dosing strategies</li>\n</ul>\n</li>\n<li>Heteroskedastic re-sampling for datasets with &gt;= 3 replicates at each dose</li>\n<li>Parallelization API for fitting high-throughput screen data</li>\n</ul>\n<h2>License</h2>\n<p>GNU General Public License v3 or later (GPLv3+)</p>\n\n          </div>"}, "last_serial": 7145828, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7b0d7f3f1d531dfb51983adcfceb74ea", "sha256": "b35b2c340d449a346809d0aace16d8aedc4adc1eb44ffabec24f6afc274d7df2"}, "downloads": -1, "filename": "synergy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b0d7f3f1d531dfb51983adcfceb74ea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 46760, "upload_time": "2020-04-16T03:56:40", "upload_time_iso_8601": "2020-04-16T03:56:40.120227Z", "url": "https://files.pythonhosted.org/packages/f1/b1/315820191978f34b21ab3748bee9be09921a98b403d8b9bbe264447229ab/synergy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43d46fbbf838c95b3763988151f26866", "sha256": "08887a31938f1472476dc068cf948a702b735bf8b0c8bc39b248f635c2058bb4"}, "downloads": -1, "filename": "synergy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "43d46fbbf838c95b3763988151f26866", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 37184, "upload_time": "2020-04-16T03:56:43", "upload_time_iso_8601": "2020-04-16T03:56:43.128386Z", "url": "https://files.pythonhosted.org/packages/64/6d/b5cf78925d511aac52bebf8984c5c149114040dc9994d0e3e324a06e37ab/synergy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "fdbe058050f6fbdd78ff4aaed84cff9e", "sha256": "31754ef125b0d56d463daf436f06a6f4b482ce763e4586552f184d8cf0798622"}, "downloads": -1, "filename": "synergy-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fdbe058050f6fbdd78ff4aaed84cff9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 46764, "upload_time": "2020-04-16T03:56:42", "upload_time_iso_8601": "2020-04-16T03:56:42.094713Z", "url": "https://files.pythonhosted.org/packages/ea/8b/ded4dc5e42d9f215218e77e2cccca7e513c1172d5d6783b25f9bd4bd3348/synergy-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c17f07572d7ae4f24fb4b89a5702d932", "sha256": "f5f2b2ae4ade6f4124d3fb434ab38d837816433043d9edb4b1e3095c76c90f97"}, "downloads": -1, "filename": "synergy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c17f07572d7ae4f24fb4b89a5702d932", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 37201, "upload_time": "2020-04-16T03:56:44", "upload_time_iso_8601": "2020-04-16T03:56:44.036654Z", "url": "https://files.pythonhosted.org/packages/51/02/f57a1ca42668ef924b17a413b589a6c44cb7d580e202673d00ac7d664b29/synergy-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "dd7763bb2d01b04a932be8ebe52f2c39", "sha256": "e7b983d614d8ad95cf104489b7dc9927e7ca5ba9a5352832fb918e08407d6e7e"}, "downloads": -1, "filename": "synergy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dd7763bb2d01b04a932be8ebe52f2c39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 55331, "upload_time": "2020-04-20T13:29:53", "upload_time_iso_8601": "2020-04-20T13:29:53.285509Z", "url": "https://files.pythonhosted.org/packages/8b/0b/0355e0be98540c1e1a3d279f7334440a9d5590946a1dc8ba629fc7972495/synergy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd5363a585438eb2769135ad727b656c", "sha256": "2c7079ec3b6983b20e5c1382b207b14e89111272322f8c3d455eb2999e18658f"}, "downloads": -1, "filename": "synergy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cd5363a585438eb2769135ad727b656c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42071, "upload_time": "2020-04-20T13:29:54", "upload_time_iso_8601": "2020-04-20T13:29:54.614933Z", "url": "https://files.pythonhosted.org/packages/15/fa/b5aa72ef5acc5421180c9960026a5e4899a472801769404ea35484c37184/synergy-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d5423a932c137a17dc13c34fa2d1da63", "sha256": "3dd7b5f66bfeb31bc18f5187233c288773d474e56a3e9fba5fd3c7154a8664a9"}, "downloads": -1, "filename": "synergy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d5423a932c137a17dc13c34fa2d1da63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 55342, "upload_time": "2020-04-20T14:38:12", "upload_time_iso_8601": "2020-04-20T14:38:12.925387Z", "url": "https://files.pythonhosted.org/packages/51/a0/f3ac46ffc1e14a97bc08d78ead1651df2a38ba91d99c58cb3577e735d2fb/synergy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "191bc0f5a896064e977815ebff07854c", "sha256": "e336d8bdb55ffe932e0ef2d0a4f42273f0b67e8dcf700219f6bdc1d8d300341e"}, "downloads": -1, "filename": "synergy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "191bc0f5a896064e977815ebff07854c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42088, "upload_time": "2020-04-20T14:38:14", "upload_time_iso_8601": "2020-04-20T14:38:14.569431Z", "url": "https://files.pythonhosted.org/packages/2c/67/5314164ee143baabf18b1c11f5135b5f10531f6437fe28f98be3c394d595/synergy-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "56e05cea316c17be1376a46df6efb3a3", "sha256": "19821455a876b609f5c9d947dcbf8c9144f8d606a0aaac8d0399ae135dbd0f14"}, "downloads": -1, "filename": "synergy-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "56e05cea316c17be1376a46df6efb3a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 63167, "upload_time": "2020-04-20T16:37:43", "upload_time_iso_8601": "2020-04-20T16:37:43.318607Z", "url": "https://files.pythonhosted.org/packages/fd/2a/bae46ffd9e2fa8376d4b3f6828dbaa6e1652da827bbc7902f6917056dc02/synergy-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deb6fb43e77559d98676d1c0f776e341", "sha256": "008a7e49b84dff36bbf307c12bff1d63748fcf3d2a79b118025518dbf16cab28"}, "downloads": -1, "filename": "synergy-0.1.2.tar.gz", "has_sig": false, "md5_digest": "deb6fb43e77559d98676d1c0f776e341", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42172, "upload_time": "2020-04-20T16:37:46", "upload_time_iso_8601": "2020-04-20T16:37:46.129215Z", "url": "https://files.pythonhosted.org/packages/2f/5e/4a65dcd3551ccd0633f5c03fc0e918d8f275d6d1a1274a4cdf09a2b28b8f/synergy-0.1.2.tar.gz", "yanked": false}], "0.1.2.post1": [{"comment_text": "", "digests": {"md5": "f8b368a887ac5b124e304a329aa46b06", "sha256": "aef2399196814d3e97525e691eed33746c479ec53ce87322b35304ff22945535"}, "downloads": -1, "filename": "synergy-0.1.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "f8b368a887ac5b124e304a329aa46b06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 64070, "upload_time": "2020-04-20T21:48:11", "upload_time_iso_8601": "2020-04-20T21:48:11.411024Z", "url": "https://files.pythonhosted.org/packages/11/47/7ab775a7edbd638ec8f8db522cb6037476326d2c80e6d89319afb7f83af6/synergy-0.1.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9463fcda19967b6711042364c05a431f", "sha256": "3dee6a309b07837761502392ad1f127971f740406223f8dd16cb643c9b32be82"}, "downloads": -1, "filename": "synergy-0.1.2.post1.tar.gz", "has_sig": false, "md5_digest": "9463fcda19967b6711042364c05a431f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44208, "upload_time": "2020-04-20T21:48:14", "upload_time_iso_8601": "2020-04-20T21:48:14.039898Z", "url": "https://files.pythonhosted.org/packages/34/25/2f150314c261b61aed6f16de537a3f3b823b7ec620ba276fee46cf5795cb/synergy-0.1.2.post1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ca145b5e5a74a9e92593407d02edffb7", "sha256": "01644e4a276d755af53a1c5f4f682401f0a52000d6a60bd5ba693547fdd5b347"}, "downloads": -1, "filename": "synergy-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ca145b5e5a74a9e92593407d02edffb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 64347, "upload_time": "2020-04-23T02:41:10", "upload_time_iso_8601": "2020-04-23T02:41:10.981465Z", "url": "https://files.pythonhosted.org/packages/f1/85/48740a55758cb40868e5c41356b0a1548e6bbcc4c54964ea6db47f998fcf/synergy-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ff9a92cc8644480930182bf065b0560", "sha256": "39aba70d669e8e318758519cc663939b173fda808d816eec1580e8ec0eaaf220"}, "downloads": -1, "filename": "synergy-0.2.tar.gz", "has_sig": false, "md5_digest": "0ff9a92cc8644480930182bf065b0560", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44690, "upload_time": "2020-04-23T02:41:12", "upload_time_iso_8601": "2020-04-23T02:41:12.056594Z", "url": "https://files.pythonhosted.org/packages/2e/53/8a4099a77de6c114160472df59e4212cec05fb96e92af439cf84ef0655d5/synergy-0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "083d6ab1dd33369a1ee900431361f0b2", "sha256": "927204a853b12fadfb57f2e3c2d1b26d1e77c88cc75b9a045621ed9a7843455b"}, "downloads": -1, "filename": "synergy-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "083d6ab1dd33369a1ee900431361f0b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 81581, "upload_time": "2020-05-01T15:29:54", "upload_time_iso_8601": "2020-05-01T15:29:54.923218Z", "url": "https://files.pythonhosted.org/packages/4f/3e/b8a12a58fd509645a40fa57cf3680072eb18f374f1525be1980f4739b8e1/synergy-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be59c855b27db50be20b5e1acd856d2f", "sha256": "23bb455702e42add9833dae563cee15a2b1e7c0c6ebb2651a22ed15eaab4afdd"}, "downloads": -1, "filename": "synergy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "be59c855b27db50be20b5e1acd856d2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 62081, "upload_time": "2020-05-01T15:29:57", "upload_time_iso_8601": "2020-05-01T15:29:57.015050Z", "url": "https://files.pythonhosted.org/packages/bb/cb/101c1b0f7b303dd4e97e48945b6b35935cba5933e25324ac80d74ec19df8/synergy-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "083d6ab1dd33369a1ee900431361f0b2", "sha256": "927204a853b12fadfb57f2e3c2d1b26d1e77c88cc75b9a045621ed9a7843455b"}, "downloads": -1, "filename": "synergy-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "083d6ab1dd33369a1ee900431361f0b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 81581, "upload_time": "2020-05-01T15:29:54", "upload_time_iso_8601": "2020-05-01T15:29:54.923218Z", "url": "https://files.pythonhosted.org/packages/4f/3e/b8a12a58fd509645a40fa57cf3680072eb18f374f1525be1980f4739b8e1/synergy-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be59c855b27db50be20b5e1acd856d2f", "sha256": "23bb455702e42add9833dae563cee15a2b1e7c0c6ebb2651a22ed15eaab4afdd"}, "downloads": -1, "filename": "synergy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "be59c855b27db50be20b5e1acd856d2f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 62081, "upload_time": "2020-05-01T15:29:57", "upload_time_iso_8601": "2020-05-01T15:29:57.015050Z", "url": "https://files.pythonhosted.org/packages/bb/cb/101c1b0f7b303dd4e97e48945b6b35935cba5933e25324ac80d74ec19df8/synergy-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:02 2020"}