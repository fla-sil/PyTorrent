{"info": {"author": "Luiz Aoqui", "author_email": "laoqui@ca.ibm.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Database", "Topic :: System :: Archiving :: Backup", "Topic :: Utilities"], "description": "# backwork [![Build Status](https://travis-ci.org/IBM/backwork.svg?branch=master)](https://travis-ci.org/IBM/backwork) [![PyPI version](https://badge.fury.io/py/backwork.svg)](https://badge.fury.io/py/backwork)\nBackup simplified.\n\n`backwork` is a toolkit that simplifies the process of backing up and restoring databases. It\nhandles the backup process itself as well as upload, download, restoration, and error notification.\n\n## Prerequisites\n* Python 2.7\n\n## Installing\nYou can install `backwork` using `pip`:\n```sh\n$ pip install backwork\n```\n\n## Running\nAfter installing you should have a `backwork` command available.\n```\n$ backwork --help\nusage: backwork [-h] [-n NOTIFIERS] {backup,restore,upload,download} ...\n\npositional arguments:\n  {backup,restore,upload,download}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NOTIFIERS, --notify NOTIFIERS\n                        enable a notifier, it can be used multiple times\n```\n\n## Plug-ins\nJust having `backwork` is not enough. You will need to the plug-ins that\nsuit your needs. You can install plug-ins by running:\n```sh\n$ pip install <plug-in_name>\n```\nYou can discover available plug-ins by [viewing the `backwork-plugin` topic on Github.](https://github.com/topics/backwork-plugin)\n\nPlug-ins are divided into three categories:\n\n### Backup\nBackup plug-ins are responsible for connecting to databases and doing the\nactual backup process, as well as the restore process for the backups.\nYou can discover available backup plug-ins by [viewing the `backwork-plugin-backup` topic on Github.](https://github.com/topics/backwork-plugin-backup)\n\nOnce you install a backup plug-in it will be available via the `backwork backup` and `backwork restore` commands:\n```sh\n$ backwork backup --help\nusage: backwork backup [-h] [-U] {mongo} ...\n\nPerform database backups. Run `backwork backup {database_type} -h` for more\ndetails on each supported database.\n\npositional arguments:\n  {mongo}\n\noptional arguments:\n  -h, --help    show this help message and exit\n  -U, --upload  output backup data to stdout to allow piping it to an upload\n                command\n```\n\n```\nusage: backwork restore [-h] [-U] {mongo} ...\n\nPerform database restores. Run `backwork restore {database_type} -h` for more\ndetails on each supported database.\n\npositional arguments:\n  {mongo}\n\noptional arguments:\n  -h, --help    show this help message and exit\n```\n\n\n#### Available plug-ins:\n* `backwork-backup-mongo`\n\n### Upload\nUpload plug-ins store and retrieve your backup files securely from remote storage.\nYou can discover available upload plug-ins by [viewing the `backwork-plugin-upload` topic on Github.](https://github.com/topics/backwork-plugin-upload)\n\nYou can use them with the `backwork upload`, `backwork show`, and `backwork download` commands:\n```sh\n$ backwork upload --help\nusage: backwork upload [-h] {softlayer} ...\n\nUpload a file to remote service. Run `backwork upload {service} -h` for more\ndetails on each supported service.\n\npositional arguments:\n  {softlayer}\n\noptional arguments:\n  -h, --help   show this help message and exit\n```\n\n```sh\n$ backwork show --help\nusage: backwork show [-h] {cos} ...\n\nShows available backups on a remote service. Run `backwork show {service} -h` for\nmore details on each supported service.\n\npositional arguments:\n  {cos}\n\noptional arguments:\n  -h, --help  show this help message and exit\n```\n\n```sh\n$ backwork download --help\nusage: backwork download [-h] {softlayer} ...\n\nDownload a file from a remote service. Run `backwork upload {service} -h` for more\ndetails on each supported service.\n\npositional arguments:\n  {softlayer}\n\noptional arguments:\n  -h, --help   show this help message and exit\n```\n\n#### Available plug-ins:\n* `backwork-upload-softlayer`\n\n### Notifiers\nNotifiers tell you when things go wrong. More important than having a backup\nprocess configured is knowing when this process fails.\nYou can discover available notifier plug-ins by [viewing the `backwork-plugin-notifier` topic on Github.](https://github.com/topics/backwork-plugin-notifier)\n\nNotifiers are enabled on the `backwork` command using the `-n` or `--notify`\narguments. They may also require some extra values, such API keys.\n\n```sh\n$ backwork --help\nusage: backwork [-h] [-n NOTIFIERS] [--sentry-dsn SENTRY_DSN]\n               {backup,upload} ...\n\npositional arguments:\n  {backup,upload}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NOTIFIERS, --notify NOTIFIERS\n                        enable a notifier, it can be used multiple times\n  --sentry-dsn SENTRY_DSN\n                        Sentry DSN to be used for notifications. It can also\n                        be set with the evironment variable $SENTRY_DSN.\n```\n\nYou can enable as many notifiers as you want on a command.\n\n**Available plug-ins:**\n* `backwork-notify-sentry`\n\n## Examples\n#### Backup a MongoDB database running locally\n```sh\n$ backwork backup mongo\n2017-01-15 03:58:15,270 backup.mongo INFO    starting mongo backup...\n2017-01-15 03:58:15,270 backup.mongo INFO    saving file to /Users/laoqui/Projects/backwork/dumps/mongo_backup_20170115-035815.archive.gz\n2017-01-15 03:58:15,350 backup.mongo INFO    output:\n\n        2017-01-15T03:58:15.342-0500    writing app.products to archive '/Users/laoqui/Projects/backwork/dumps/mongo_backup_20170115-035815.archive.gz'\n        2017-01-15T03:58:15.347-0500    done dumping app.products (1 document)\n\n2017-01-15 03:58:15,350 backup.mongo INFO    backup complete\n```\nThis will create an archived backup, compressed and timestamped, and stored in a\nfolder called `dumps` in the current directory.\n\n#### Backup remote MongoDB database\n```sh\n$ backwork backup mongo -h <HOST IP>:<PORT> -u <USER> -p<PASSWORD>\n```\n\n#### Backup a MongoDB to a specific folder and file name\n```sh\n$ backwork backup mongo -o /var/backups --archive=mongo_backup.archive\n```\n\n#### Upload a backup file to Softlayer ObjectStorage\n```sh\n$ backwork upload softayer -u <USERNAME> -p <API KEY> -d <DATACENTER> -c <CONTAINER> /path/to/file /remote/path/location\n```\n\n#### User Sentry to receive error messages\n```sh\n$ backwork -n sentry --sentry-dsn <SENTRY DSN> backup mongo -o /var/backups --archive=mongo_backup.archive\n```\n\n#### More info\nCheck the `--help` information for each of the commands for more details.\n\n## Extending\nThe best way to extend `backwork` is by creating new plugi-ins. They are simple\nPython packages that implement a few set of methods. Here are some base classes\nyou can use as a starting point:\n\n```python\nclass BackupBase(object):\n    \"\"\"Base class that describes the interface a backup command must implement.\n\n    Attributes:\n        command     the value used in the command line to invoke this command,\n                    usually is the name of the database (e.g.: mongo, mysql)\n    \"\"\"\n    command = \"\"\n\n    def __init__(self, args, extra):\n        \"\"\"Initialize a backup command given the arguments passed to CLI\"\"\"\n        self.args = args\n        self.extra = extra\n\n    @classmethod\n    def parse_args(cls, subparsers):\n        \"\"\"Parse CLI arguments specific to this subcommand\"\"\"\n        raise NotImplementedError(\"Base method not overriden.\")\n\n    def backup(self):\n        \"\"\"Backup a database given the arguments specified.\n\n        All the values passed via the CLI are available at `self.args` and\n        `self.extra`. The first object stores known arguments that have been\n        explicitly parsed. The second object is a list of arguments that are\n        unkown to the parser and can be useful for invoking other commands\n        withouht having to re-define its parser's arguments.\n\n        This method should raise exceptions in case of errors so any active\n        notifier can hadle it.\n        \"\"\"\n        raise NotImplementedError(\"Base method not overriden.\")\n\n\nclass UploadBase(object):\n    \"\"\"Base class that describes the interface an upload command must implement.\n\n    Attributes:\n        command     the value used in the command line to invoke this command,\n                    usually is the name of the service (e.g.: softlayer, s3)\n    \"\"\"\n    command = \"\"\n\n    def __init__(self, args, extra):\n        \"\"\"Initialize an upload command given the arguments passed to CLI\"\"\"\n        self.args = args\n        self.extra = extra\n\n    @classmethod\n    def parse_args(cls, subparsers):\n        \"\"\"Parse CLI arguments specific to this subcommand\"\"\"\n        raise NotImplementedError(\"Base method not overriden.\")\n\n    def upload(self):\n        \"\"\"Upload a file to the remote service.\n\n        All the values passed via the CLI are available at `self.args` and\n        `self.extra`. The first object stores known arguments that have been\n        explicitly parsed. The second object is a list of arguments that are\n        unkown to the parser and can be useful for invoking other commands\n        withouht having to re-define its parser's arguments.\n\n        This method should raise exceptions in case of errors so any active\n        notifier can hadle it.\n        \"\"\"\n        raise NotImplementedError(\"Base method not overriden.\")\n\n\nclass NotifierBase(object):\n    \"\"\"Base class for notifiers\n\n    Notifiers are responsible for sending messages to external services to\n    report relevant events that may happen during the execution of a command.\n\n    Attributes:\n        command     the value used to enable a notifier in the command line,\n                    e.g.: `backwork -n {command}`\n    \"\"\"\n    command = \"\"\n\n    def __init__(self, args, extra):\n        self.args = args\n        self.extra = extra\n\n    @classmethod\n    def parse_args(cls, parser):\n        \"\"\"Add command line argument parsing rules relevant to the notifier.\n\n        This method is not required to be implemented as it might not be\n        necessary to add more arguments to the parser in some cases.\n        \"\"\"\n        pass\n\n    def notify(self, msg=\"\"):\n        \"\"\"Handle an incoming message.\n\n        The `msg` object could be either a `string` or an `Exception`. You may\n        want to handle them differently with something like:\n\n            if issubclass(msg.__class__, Exception):\n              handle_exception(msg)\n            else:\n              handle_string(msg)\n\n        If `msg` is an exception, the call to this method will be in the context\n        of an `except`, meaning you will be able to access `sys.exc_info()`.\n        \"\"\"\n        raise NotImplementedError(\"Base method not overriden.\")\n```\n\nTo make your package visible to `backwork` you will also need to declare an\n[`entry_point`](https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plug-ins)\nin your `setup.py` file.\n\nEach plug-in type has a different `entry_point` key:\n\n#### Backups:\n```python\nsetup(\n    ...\n    entry_points={\n        \"backwork.backups\": [\n            \"<COMMAND NAME>\": \"module:BackupClass\"\n        ],\n        \"backwork.restores\": [\n            \"<COMMAND NAME>\": \"module:RestoreClass\"\n        ]\n    },\n    ...\n```\n\n#### Uploads:\n```python\nsetup(\n    ...\n    entry_points={\n        \"backwork.uploads\": [\n            \"<COMMAND NAME>\": \"module:UploadClass\"\n        ],\n        \"backwork.shows\": [\n            \"<COMMAND NAME>\": \"module:ShowClass\"\n        ]\n        \"backwork.downloads\": [\n            \"<COMMAND NAME>\": \"module:DownloadClass\"\n        ]\n    },\n    ...\n```\n\n#### Notifiers:\n```python\nsetup(\n    ...\n    entry_points={\n        \"backwork.notifiers\": [\n            \"<COMMAND NAME>\": \"module:NotifierClass\"\n        ]\n    },\n    ...\n```\n\nOnce your plug-in is ready you can use `pip` to install it and it should be\navailable to be used be `backwork`.\n\n## Future work\n* Add support for more databases, storage services and notifiers\n* Handle backup scheduling\n* Support more environment variables", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ibm/backwork", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "backwork", "package_url": "https://pypi.org/project/backwork/", "platform": "", "project_url": "https://pypi.org/project/backwork/", "project_urls": {"Homepage": "https://github.com/ibm/backwork"}, "release_url": "https://pypi.org/project/backwork/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Backup made easy.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>backwork <a href=\"https://travis-ci.org/IBM/backwork\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd3eb44294ea308ddb0309d3439a2ac22df1e0ef/68747470733a2f2f7472617669732d63692e6f72672f49424d2f6261636b776f726b2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/backwork\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e682baf8ddf6fa08c2fae65133c9f0a083710cc/68747470733a2f2f62616467652e667572792e696f2f70792f6261636b776f726b2e737667\"></a></h1>\n<p>Backup simplified.</p>\n<p><code>backwork</code> is a toolkit that simplifies the process of backing up and restoring databases. It\nhandles the backup process itself as well as upload, download, restoration, and error notification.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Python 2.7</li>\n</ul>\n<h2>Installing</h2>\n<p>You can install <code>backwork</code> using <code>pip</code>:</p>\n<pre>$ pip install backwork\n</pre>\n<h2>Running</h2>\n<p>After installing you should have a <code>backwork</code> command available.</p>\n<pre><code>$ backwork --help\nusage: backwork [-h] [-n NOTIFIERS] {backup,restore,upload,download} ...\n\npositional arguments:\n  {backup,restore,upload,download}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NOTIFIERS, --notify NOTIFIERS\n                        enable a notifier, it can be used multiple times\n</code></pre>\n<h2>Plug-ins</h2>\n<p>Just having <code>backwork</code> is not enough. You will need to the plug-ins that\nsuit your needs. You can install plug-ins by running:</p>\n<pre>$ pip install &lt;plug-in_name&gt;\n</pre>\n<p>You can discover available plug-ins by <a href=\"https://github.com/topics/backwork-plugin\" rel=\"nofollow\">viewing the <code>backwork-plugin</code> topic on Github.</a></p>\n<p>Plug-ins are divided into three categories:</p>\n<h3>Backup</h3>\n<p>Backup plug-ins are responsible for connecting to databases and doing the\nactual backup process, as well as the restore process for the backups.\nYou can discover available backup plug-ins by <a href=\"https://github.com/topics/backwork-plugin-backup\" rel=\"nofollow\">viewing the <code>backwork-plugin-backup</code> topic on Github.</a></p>\n<p>Once you install a backup plug-in it will be available via the <code>backwork backup</code> and <code>backwork restore</code> commands:</p>\n<pre>$ backwork backup --help\nusage: backwork backup <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-U<span class=\"o\">]</span> <span class=\"o\">{</span>mongo<span class=\"o\">}</span> ...\n\nPerform database backups. Run <span class=\"sb\">`</span>backwork backup <span class=\"o\">{</span>database_type<span class=\"o\">}</span> -h<span class=\"sb\">`</span> <span class=\"k\">for</span> more\ndetails on each supported database.\n\npositional arguments:\n  <span class=\"o\">{</span>mongo<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help    show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -U, --upload  output backup data to stdout to allow piping it to an upload\n                <span class=\"nb\">command</span>\n</pre>\n<pre><code>usage: backwork restore [-h] [-U] {mongo} ...\n\nPerform database restores. Run `backwork restore {database_type} -h` for more\ndetails on each supported database.\n\npositional arguments:\n  {mongo}\n\noptional arguments:\n  -h, --help    show this help message and exit\n</code></pre>\n<h4>Available plug-ins:</h4>\n<ul>\n<li><code>backwork-backup-mongo</code></li>\n</ul>\n<h3>Upload</h3>\n<p>Upload plug-ins store and retrieve your backup files securely from remote storage.\nYou can discover available upload plug-ins by <a href=\"https://github.com/topics/backwork-plugin-upload\" rel=\"nofollow\">viewing the <code>backwork-plugin-upload</code> topic on Github.</a></p>\n<p>You can use them with the <code>backwork upload</code>, <code>backwork show</code>, and <code>backwork download</code> commands:</p>\n<pre>$ backwork upload --help\nusage: backwork upload <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>softlayer<span class=\"o\">}</span> ...\n\nUpload a file to remote service. Run <span class=\"sb\">`</span>backwork upload <span class=\"o\">{</span>service<span class=\"o\">}</span> -h<span class=\"sb\">`</span> <span class=\"k\">for</span> more\ndetails on each supported service.\n\npositional arguments:\n  <span class=\"o\">{</span>softlayer<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help   show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<pre>$ backwork show --help\nusage: backwork show <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>cos<span class=\"o\">}</span> ...\n\nShows available backups on a remote service. Run <span class=\"sb\">`</span>backwork show <span class=\"o\">{</span>service<span class=\"o\">}</span> -h<span class=\"sb\">`</span> <span class=\"k\">for</span>\nmore details on each supported service.\n\npositional arguments:\n  <span class=\"o\">{</span>cos<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help  show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<pre>$ backwork download --help\nusage: backwork download <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>softlayer<span class=\"o\">}</span> ...\n\nDownload a file from a remote service. Run <span class=\"sb\">`</span>backwork upload <span class=\"o\">{</span>service<span class=\"o\">}</span> -h<span class=\"sb\">`</span> <span class=\"k\">for</span> more\ndetails on each supported service.\n\npositional arguments:\n  <span class=\"o\">{</span>softlayer<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help   show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<h4>Available plug-ins:</h4>\n<ul>\n<li><code>backwork-upload-softlayer</code></li>\n</ul>\n<h3>Notifiers</h3>\n<p>Notifiers tell you when things go wrong. More important than having a backup\nprocess configured is knowing when this process fails.\nYou can discover available notifier plug-ins by <a href=\"https://github.com/topics/backwork-plugin-notifier\" rel=\"nofollow\">viewing the <code>backwork-plugin-notifier</code> topic on Github.</a></p>\n<p>Notifiers are enabled on the <code>backwork</code> command using the <code>-n</code> or <code>--notify</code>\narguments. They may also require some extra values, such API keys.</p>\n<pre>$ backwork --help\nusage: backwork <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-n NOTIFIERS<span class=\"o\">]</span> <span class=\"o\">[</span>--sentry-dsn SENTRY_DSN<span class=\"o\">]</span>\n               <span class=\"o\">{</span>backup,upload<span class=\"o\">}</span> ...\n\npositional arguments:\n  <span class=\"o\">{</span>backup,upload<span class=\"o\">}</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -n NOTIFIERS, --notify NOTIFIERS\n                        <span class=\"nb\">enable</span> a notifier, it can be used multiple <span class=\"nb\">times</span>\n  --sentry-dsn SENTRY_DSN\n                        Sentry DSN to be used <span class=\"k\">for</span> notifications. It can also\n                        be <span class=\"nb\">set</span> with the evironment variable <span class=\"nv\">$SENTRY_DSN</span>.\n</pre>\n<p>You can enable as many notifiers as you want on a command.</p>\n<p><strong>Available plug-ins:</strong></p>\n<ul>\n<li><code>backwork-notify-sentry</code></li>\n</ul>\n<h2>Examples</h2>\n<h4>Backup a MongoDB database running locally</h4>\n<pre>$ backwork backup mongo\n<span class=\"m\">2017</span>-01-15 <span class=\"m\">03</span>:58:15,270 backup.mongo INFO    starting mongo backup...\n<span class=\"m\">2017</span>-01-15 <span class=\"m\">03</span>:58:15,270 backup.mongo INFO    saving file to /Users/laoqui/Projects/backwork/dumps/mongo_backup_20170115-035815.archive.gz\n<span class=\"m\">2017</span>-01-15 <span class=\"m\">03</span>:58:15,350 backup.mongo INFO    output:\n\n        <span class=\"m\">2017</span>-01-15T03:58:15.342-0500    writing app.products to archive <span class=\"s1\">'/Users/laoqui/Projects/backwork/dumps/mongo_backup_20170115-035815.archive.gz'</span>\n        <span class=\"m\">2017</span>-01-15T03:58:15.347-0500    <span class=\"k\">done</span> dumping app.products <span class=\"o\">(</span><span class=\"m\">1</span> document<span class=\"o\">)</span>\n\n<span class=\"m\">2017</span>-01-15 <span class=\"m\">03</span>:58:15,350 backup.mongo INFO    backup <span class=\"nb\">complete</span>\n</pre>\n<p>This will create an archived backup, compressed and timestamped, and stored in a\nfolder called <code>dumps</code> in the current directory.</p>\n<h4>Backup remote MongoDB database</h4>\n<pre>$ backwork backup mongo -h &lt;HOST IP&gt;:&lt;PORT&gt; -u &lt;USER&gt; -p&lt;PASSWORD&gt;\n</pre>\n<h4>Backup a MongoDB to a specific folder and file name</h4>\n<pre>$ backwork backup mongo -o /var/backups --archive<span class=\"o\">=</span>mongo_backup.archive\n</pre>\n<h4>Upload a backup file to Softlayer ObjectStorage</h4>\n<pre>$ backwork upload softayer -u &lt;USERNAME&gt; -p &lt;API KEY&gt; -d &lt;DATACENTER&gt; -c &lt;CONTAINER&gt; /path/to/file /remote/path/location\n</pre>\n<h4>User Sentry to receive error messages</h4>\n<pre>$ backwork -n sentry --sentry-dsn &lt;SENTRY DSN&gt; backup mongo -o /var/backups --archive<span class=\"o\">=</span>mongo_backup.archive\n</pre>\n<h4>More info</h4>\n<p>Check the <code>--help</code> information for each of the commands for more details.</p>\n<h2>Extending</h2>\n<p>The best way to extend <code>backwork</code> is by creating new plugi-ins. They are simple\nPython packages that implement a few set of methods. Here are some base classes\nyou can use as a starting point:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BackupBase</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class that describes the interface a backup command must implement.</span>\n\n<span class=\"sd\">    Attributes:</span>\n<span class=\"sd\">        command     the value used in the command line to invoke this command,</span>\n<span class=\"sd\">                    usually is the name of the database (e.g.: mongo, mysql)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initialize a backup command given the arguments passed to CLI\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">extra</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parse_args</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">subparsers</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Parse CLI arguments specific to this subcommand\"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Base method not overriden.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">backup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Backup a database given the arguments specified.</span>\n\n<span class=\"sd\">        All the values passed via the CLI are available at `self.args` and</span>\n<span class=\"sd\">        `self.extra`. The first object stores known arguments that have been</span>\n<span class=\"sd\">        explicitly parsed. The second object is a list of arguments that are</span>\n<span class=\"sd\">        unkown to the parser and can be useful for invoking other commands</span>\n<span class=\"sd\">        withouht having to re-define its parser's arguments.</span>\n\n<span class=\"sd\">        This method should raise exceptions in case of errors so any active</span>\n<span class=\"sd\">        notifier can hadle it.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Base method not overriden.\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UploadBase</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class that describes the interface an upload command must implement.</span>\n\n<span class=\"sd\">    Attributes:</span>\n<span class=\"sd\">        command     the value used in the command line to invoke this command,</span>\n<span class=\"sd\">                    usually is the name of the service (e.g.: softlayer, s3)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Initialize an upload command given the arguments passed to CLI\"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">extra</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parse_args</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">subparsers</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Parse CLI arguments specific to this subcommand\"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Base method not overriden.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">upload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Upload a file to the remote service.</span>\n\n<span class=\"sd\">        All the values passed via the CLI are available at `self.args` and</span>\n<span class=\"sd\">        `self.extra`. The first object stores known arguments that have been</span>\n<span class=\"sd\">        explicitly parsed. The second object is a list of arguments that are</span>\n<span class=\"sd\">        unkown to the parser and can be useful for invoking other commands</span>\n<span class=\"sd\">        withouht having to re-define its parser's arguments.</span>\n\n<span class=\"sd\">        This method should raise exceptions in case of errors so any active</span>\n<span class=\"sd\">        notifier can hadle it.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Base method not overriden.\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NotifierBase</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Base class for notifiers</span>\n\n<span class=\"sd\">    Notifiers are responsible for sending messages to external services to</span>\n<span class=\"sd\">    report relevant events that may happen during the execution of a command.</span>\n\n<span class=\"sd\">    Attributes:</span>\n<span class=\"sd\">        command     the value used to enable a notifier in the command line,</span>\n<span class=\"sd\">                    e.g.: `backwork -n {command}`</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">extra</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parse_args</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Add command line argument parsing rules relevant to the notifier.</span>\n\n<span class=\"sd\">        This method is not required to be implemented as it might not be</span>\n<span class=\"sd\">        necessary to add more arguments to the parser in some cases.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">notify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Handle an incoming message.</span>\n\n<span class=\"sd\">        The `msg` object could be either a `string` or an `Exception`. You may</span>\n<span class=\"sd\">        want to handle them differently with something like:</span>\n\n<span class=\"sd\">            if issubclass(msg.__class__, Exception):</span>\n<span class=\"sd\">              handle_exception(msg)</span>\n<span class=\"sd\">            else:</span>\n<span class=\"sd\">              handle_string(msg)</span>\n\n<span class=\"sd\">        If `msg` is an exception, the call to this method will be in the context</span>\n<span class=\"sd\">        of an `except`, meaning you will be able to access `sys.exc_info()`.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">\"Base method not overriden.\"</span><span class=\"p\">)</span>\n</pre>\n<p>To make your package visible to <code>backwork</code> you will also need to declare an\n<a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plug-ins\" rel=\"nofollow\"><code>entry_point</code></a>\nin your <code>setup.py</code> file.</p>\n<p>Each plug-in type has a different <code>entry_point</code> key:</p>\n<h4>Backups:</h4>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"backwork.backups\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:BackupClass\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"backwork.restores\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:RestoreClass\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n</pre>\n<h4>Uploads:</h4>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"backwork.uploads\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:UploadClass\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"s2\">\"backwork.shows\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:ShowClass\"</span>\n        <span class=\"p\">]</span>\n        <span class=\"s2\">\"backwork.downloads\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:DownloadClass\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n</pre>\n<h4>Notifiers:</h4>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">\"backwork.notifiers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"&lt;COMMAND NAME&gt;\"</span><span class=\"p\">:</span> <span class=\"s2\">\"module:NotifierClass\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>Once your plug-in is ready you can use <code>pip</code> to install it and it should be\navailable to be used be <code>backwork</code>.</p>\n<h2>Future work</h2>\n<ul>\n<li>Add support for more databases, storage services and notifiers</li>\n<li>Handle backup scheduling</li>\n<li>Support more environment variables</li>\n</ul>\n\n          </div>"}, "last_serial": 5692958, "releases": {"0.1.7": [{"comment_text": "", "digests": {"md5": "4aac9a33bc21437aa4e06f7290e19ac4", "sha256": "22574aa5459b3d5a548055773912ea4b7928fcb61314667bec7a03b9c46d07cd"}, "downloads": -1, "filename": "backwork-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4aac9a33bc21437aa4e06f7290e19ac4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12685, "upload_time": "2019-08-14T15:45:27", "upload_time_iso_8601": "2019-08-14T15:45:27.032635Z", "url": "https://files.pythonhosted.org/packages/ae/82/6beaef6d1b677641acde9969045594b7450d2ccae7ab65b6db5970b785c7/backwork-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e406fd50d4adb45ae82abfedd2302097", "sha256": "a25c77f291a9705102097d99d74aa1f237ce6fed441a187d1bf5536e4ed6c689"}, "downloads": -1, "filename": "backwork-0.1.7.tar.gz", "has_sig": false, "md5_digest": "e406fd50d4adb45ae82abfedd2302097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7553, "upload_time": "2019-08-14T15:45:29", "upload_time_iso_8601": "2019-08-14T15:45:29.233204Z", "url": "https://files.pythonhosted.org/packages/37/e4/39312a4212531ddec232075c15bf95092e460813784c8bc3d4b5bf49a1e2/backwork-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "16317e8087cc1d58358c793c560b83df", "sha256": "8c031b24de5960f200055f21a74acf97c35ea1051d051922b5ecfd39f6730fd8"}, "downloads": -1, "filename": "backwork-0.1.8.tar.gz", "has_sig": false, "md5_digest": "16317e8087cc1d58358c793c560b83df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7523, "upload_time": "2019-08-14T18:04:23", "upload_time_iso_8601": "2019-08-14T18:04:23.305224Z", "url": "https://files.pythonhosted.org/packages/49/13/3a6dd330a4fa1b0f747c6f898baa4b24595d8fd03ece0c4bd3dfd019b45b/backwork-0.1.8.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0858d9d988196ff6624d5e846232c3d0", "sha256": "dffd78c6153c0c8fd9b52d6d8b8246e2cb012dd7991fa621e78070583dfc4f47"}, "downloads": -1, "filename": "backwork-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0858d9d988196ff6624d5e846232c3d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8658, "upload_time": "2019-08-14T20:11:58", "upload_time_iso_8601": "2019-08-14T20:11:58.689591Z", "url": "https://files.pythonhosted.org/packages/03/fc/fc0ca36a64b1ff09ffdc8721e192eec00703f1f65f55e8949c4822700099/backwork-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "818563fc1c82fe75c707b99718e88d49", "sha256": "33b32c98a0b8f2499e2c4cced3d918c69f20353675c124466e336f2424360489"}, "downloads": -1, "filename": "backwork-0.3.0.tar.gz", "has_sig": false, "md5_digest": "818563fc1c82fe75c707b99718e88d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11905, "upload_time": "2019-08-17T23:00:17", "upload_time_iso_8601": "2019-08-17T23:00:17.404248Z", "url": "https://files.pythonhosted.org/packages/a1/d6/4b26c529bd436da1449ed3565221864c9c050023fe93a7bdb2577248cc56/backwork-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "818563fc1c82fe75c707b99718e88d49", "sha256": "33b32c98a0b8f2499e2c4cced3d918c69f20353675c124466e336f2424360489"}, "downloads": -1, "filename": "backwork-0.3.0.tar.gz", "has_sig": false, "md5_digest": "818563fc1c82fe75c707b99718e88d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11905, "upload_time": "2019-08-17T23:00:17", "upload_time_iso_8601": "2019-08-17T23:00:17.404248Z", "url": "https://files.pythonhosted.org/packages/a1/d6/4b26c529bd436da1449ed3565221864c9c050023fe93a7bdb2577248cc56/backwork-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:06 2020"}