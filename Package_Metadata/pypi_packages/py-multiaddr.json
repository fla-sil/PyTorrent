{"info": {"author": "Steven Buss", "author_email": "steven.buss@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Multiaddr\n===============================\n\n.. image:: https://img.shields.io/pypi/v/multiaddr.svg\n        :target: https://pypi.python.org/pypi/multiaddr\n\n.. image:: https://travis-ci.org/sbuss/py-multiaddr.svg?branch=master\n        :target: https://travis-ci.org/sbuss/py-multiaddr\n\n.. image:: https://codecov.io/github/sbuss/py-multiaddr/coverage.svg?branch=master\n        :target: https://codecov.io/github/sbuss/py-multiaddr?branch=master\n\n.. image:: https://readthedocs.org/projects/multiaddr/badge/?version=latest\n        :target: https://readthedocs.org/projects/multiaddr/?badge=latest\n        :alt: Documentation Status\n\n\nPython implementation of jbenet_'s multiaddr_\n\n.. _jbenet: https://github.com/jbenet\n.. _multiaddr: https://github.com/jbenet/multiaddr\n\n* Free software: MIT License\n* Documentation: https://multiaddr.readthedocs.org.\n\nUsage\n=====\n\nSimple\n------\n\n.. code-block:: python\n\n    from multiaddr import Multiaddr\n\n    # construct from a string\n    m1 = Multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n\n    # construct from bytes\n    m2 = Multiaddr(bytes_addr=m1.to_bytes())\n\n    assert str(m1) == \"/ip4/127.0.0.1/udp/1234\"\n    assert str(m1) == str(m2)\n    assert m1.to_bytes() == m2.to_bytes()\n    assert m1 == m2\n    assert m2 == m1\n    assert not (m1 != m2)\n    assert not (m2 != m1)\n\n\nProtocols\n---------\n\n.. code-block:: python\n\n    from multiaddr import Multiaddr\n\n    m1 = Multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n\n    # get the multiaddr protocol description objects\n    m1.protocols()\n    # [Protocol(code=4, name='ip4', size=32), Protocol(code=17, name='udp', size=16)]\n\n\nEn/decapsulate\n--------------\n\n.. code-block:: python\n\n    from multiaddr import Multiaddr\n\n    m1 = Multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n    m1.encapsulate(Multiaddr(\"/sctp/5678\"))\n    # <Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\n    m1.decapsulate(Multiaddr(\"/udp\"))\n    # <Multiaddr /ip4/127.0.0.1>\n\n\nTunneling\n---------\n\nMultiaddr allows expressing tunnels very nicely.\n\n\n.. code-block:: python\n\n    printer = Multiaddr(\"/ip4/192.168.0.13/tcp/80\")\n    proxy = Multiaddr(\"/ip4/10.20.30.40/tcp/443\")\n    printerOverProxy = proxy.encapsulate(printer)\n    print(printerOverProxy)\n    # /ip4/10.20.30.40/tcp/443/ip4/192.168.0.13/tcp/80\n\n    proxyAgain = printerOverProxy.decapsulate(printer)\n    print(proxyAgain)\n    # /ip4/10.20.30.40/tcp/443\n\n\n=======\nHistory\n=======\n\n0.0.2 (2016-5-4)\n----------------\n\n* Fix a bug in decapsulate that threw an IndexError instead of a copy of the\n  Multiaddr when the original multiaddr does not contain the multiaddr to\n  decapsulate. [via fredthomsen_ `#9`_]\n* Increase test coverage [via fredthomsen_ `#9`_]\n\n.. _fredthomsen: https://github.com/fredthomsen\n.. _`#9`: https://github.com/sbuss/py-multiaddr/pull/9\n\n0.0.1 (2016-1-22)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/sbuss/multiaddr/tarball/0.0.3", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sbuss/multiaddr", "keywords": "multiaddr", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "py-multiaddr", "package_url": "https://pypi.org/project/py-multiaddr/", "platform": "", "project_url": "https://pypi.org/project/py-multiaddr/", "project_urls": {"Download": "https://github.com/sbuss/multiaddr/tarball/0.0.3", "Homepage": "https://github.com/sbuss/multiaddr"}, "release_url": "https://pypi.org/project/py-multiaddr/0.0.3/", "requires_dist": ["varint", "six", "base58", "netaddr"], "requires_python": "", "summary": "Python implementation of jbenet's multiaddr", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"multiaddr\">\n<h2>Multiaddr</h2>\n<a href=\"https://pypi.python.org/pypi/multiaddr\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/multiaddr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a57ee1aeb2007597156aaaa9f958fb90284d91a0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d756c7469616464722e737667\"></a>\n<a href=\"https://travis-ci.org/sbuss/py-multiaddr\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sbuss/py-multiaddr.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29beccd6f2375219d92f11f7a30101bf7922ab6f/68747470733a2f2f7472617669732d63692e6f72672f73627573732f70792d6d756c7469616464722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/sbuss/py-multiaddr?branch=master\" rel=\"nofollow\"><img alt=\"https://codecov.io/github/sbuss/py-multiaddr/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d685f86e28d76b8e8c7172661a337bb893b1c5b/68747470733a2f2f636f6465636f762e696f2f6769746875622f73627573732f70792d6d756c7469616464722f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://readthedocs.org/projects/multiaddr/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e696b0bb4782a75e444e02d8b37ff5d5e11c4f56/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d756c7469616464722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Python implementation of <a href=\"https://github.com/jbenet\" rel=\"nofollow\">jbenet</a>\u2019s <a href=\"https://github.com/jbenet/multiaddr\" rel=\"nofollow\">multiaddr</a></p>\n<ul>\n<li>Free software: MIT License</li>\n<li>Documentation: <a href=\"https://multiaddr.readthedocs.org\" rel=\"nofollow\">https://multiaddr.readthedocs.org</a>.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"simple\">\n<h3>Simple</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiaddr</span> <span class=\"kn\">import</span> <span class=\"n\">Multiaddr</span>\n\n<span class=\"c1\"># construct from a string</span>\n<span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/ip4/127.0.0.1/udp/1234\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># construct from bytes</span>\n<span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"n\">bytes_addr</span><span class=\"o\">=</span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">())</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"/ip4/127.0.0.1/udp/1234\"</span>\n<span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">m2</span><span class=\"o\">.</span><span class=\"n\">to_bytes</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">m1</span> <span class=\"o\">==</span> <span class=\"n\">m2</span>\n<span class=\"k\">assert</span> <span class=\"n\">m2</span> <span class=\"o\">==</span> <span class=\"n\">m1</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">m1</span> <span class=\"o\">!=</span> <span class=\"n\">m2</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">m2</span> <span class=\"o\">!=</span> <span class=\"n\">m1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"protocols\">\n<h3>Protocols</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiaddr</span> <span class=\"kn\">import</span> <span class=\"n\">Multiaddr</span>\n\n<span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/ip4/127.0.0.1/udp/1234\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the multiaddr protocol description objects</span>\n<span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">protocols</span><span class=\"p\">()</span>\n<span class=\"c1\"># [Protocol(code=4, name='ip4', size=32), Protocol(code=17, name='udp', size=16)]</span>\n</pre>\n</div>\n<div id=\"en-decapsulate\">\n<h3>En/decapsulate</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiaddr</span> <span class=\"kn\">import</span> <span class=\"n\">Multiaddr</span>\n\n<span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/ip4/127.0.0.1/udp/1234\"</span><span class=\"p\">)</span>\n<span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">encapsulate</span><span class=\"p\">(</span><span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/sctp/5678\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678&gt;</span>\n<span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">decapsulate</span><span class=\"p\">(</span><span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/udp\"</span><span class=\"p\">))</span>\n<span class=\"c1\"># &lt;Multiaddr /ip4/127.0.0.1&gt;</span>\n</pre>\n</div>\n<div id=\"tunneling\">\n<h3>Tunneling</h3>\n<p>Multiaddr allows expressing tunnels very nicely.</p>\n<pre><span class=\"n\">printer</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/ip4/192.168.0.13/tcp/80\"</span><span class=\"p\">)</span>\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">Multiaddr</span><span class=\"p\">(</span><span class=\"s2\">\"/ip4/10.20.30.40/tcp/443\"</span><span class=\"p\">)</span>\n<span class=\"n\">printerOverProxy</span> <span class=\"o\">=</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">encapsulate</span><span class=\"p\">(</span><span class=\"n\">printer</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">printerOverProxy</span><span class=\"p\">)</span>\n<span class=\"c1\"># /ip4/10.20.30.40/tcp/443/ip4/192.168.0.13/tcp/80</span>\n\n<span class=\"n\">proxyAgain</span> <span class=\"o\">=</span> <span class=\"n\">printerOverProxy</span><span class=\"o\">.</span><span class=\"n\">decapsulate</span><span class=\"p\">(</span><span class=\"n\">printer</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">proxyAgain</span><span class=\"p\">)</span>\n<span class=\"c1\"># /ip4/10.20.30.40/tcp/443</span>\n</pre>\n<div id=\"history\">\n<h4>History</h4>\n</div>\n</div>\n<div id=\"id2\">\n<h3>0.0.2 (2016-5-4)</h3>\n<ul>\n<li>Fix a bug in decapsulate that threw an IndexError instead of a copy of the\nMultiaddr when the original multiaddr does not contain the multiaddr to\ndecapsulate. [via <a href=\"https://github.com/fredthomsen\" rel=\"nofollow\">fredthomsen</a> <a href=\"https://github.com/sbuss/py-multiaddr/pull/9\" rel=\"nofollow\">#9</a>]</li>\n<li>Increase test coverage [via <a href=\"https://github.com/fredthomsen\" rel=\"nofollow\">fredthomsen</a> <a href=\"https://github.com/sbuss/py-multiaddr/pull/9\" rel=\"nofollow\">#9</a>]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.0.1 (2016-1-22)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4540770, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "5953e185292b6da9aee8d3fe23c15eef", "sha256": "dd1a9b957876e60e10b820ecc61f29ef298801af22098514e2cb321431c9bc10"}, "downloads": -1, "filename": "py_multiaddr-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5953e185292b6da9aee8d3fe23c15eef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9987, "upload_time": "2018-11-28T23:54:20", "upload_time_iso_8601": "2018-11-28T23:54:20.704979Z", "url": "https://files.pythonhosted.org/packages/1f/28/5aa4acb5a4258fb1b1c2d1de6015848a04ed44819246ea70f0260382017a/py_multiaddr-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88fa70b6c333cfa8aa9b223e59bb294c", "sha256": "89ed9f6556a9e7b114f76f801a8742ece35dc0ebbbdadb3b477e1495239c03ed"}, "downloads": -1, "filename": "py-multiaddr-0.0.3.tar.gz", "has_sig": false, "md5_digest": "88fa70b6c333cfa8aa9b223e59bb294c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21435, "upload_time": "2018-11-28T23:54:22", "upload_time_iso_8601": "2018-11-28T23:54:22.630904Z", "url": "https://files.pythonhosted.org/packages/f0/1f/9dc7bb9fc5ffb0bb379291c8fd75249e69c67d549aab96ae065e378cd416/py-multiaddr-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5953e185292b6da9aee8d3fe23c15eef", "sha256": "dd1a9b957876e60e10b820ecc61f29ef298801af22098514e2cb321431c9bc10"}, "downloads": -1, "filename": "py_multiaddr-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5953e185292b6da9aee8d3fe23c15eef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9987, "upload_time": "2018-11-28T23:54:20", "upload_time_iso_8601": "2018-11-28T23:54:20.704979Z", "url": "https://files.pythonhosted.org/packages/1f/28/5aa4acb5a4258fb1b1c2d1de6015848a04ed44819246ea70f0260382017a/py_multiaddr-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88fa70b6c333cfa8aa9b223e59bb294c", "sha256": "89ed9f6556a9e7b114f76f801a8742ece35dc0ebbbdadb3b477e1495239c03ed"}, "downloads": -1, "filename": "py-multiaddr-0.0.3.tar.gz", "has_sig": false, "md5_digest": "88fa70b6c333cfa8aa9b223e59bb294c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21435, "upload_time": "2018-11-28T23:54:22", "upload_time_iso_8601": "2018-11-28T23:54:22.630904Z", "url": "https://files.pythonhosted.org/packages/f0/1f/9dc7bb9fc5ffb0bb379291c8fd75249e69c67d549aab96ae065e378cd416/py-multiaddr-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:33 2020"}