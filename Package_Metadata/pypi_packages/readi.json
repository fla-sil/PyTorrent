{"info": {"author": "Bea Steers", "author_email": "bea.steers@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# readi Collections\nDead simple class registration.\n\nOften I find myself trying to implement generic class representations and then extending them to provide many different functional variants. I then want to be able to access those variants in a simple, automatic way, without having to write \"switch-case\" type class selection strategies.\n\nThis allows you to register classes at instantiation time and have them accessible using a simple dict interface, with some nice helper methods :)\n\n## Install\n\n```bash\npip install readi\n```\n\n## Usage\n\n```python\n# __init__.py\nimport readi\n# this is just a dictionary with some fancy bits\ncollection = readi.Collection(entrypoints='myentrypoint')\n```\n```python\n# setup.py\n# this can allow other modules to register classes.\nsetuptools.setup(\n    ...\n    entry_points={'myentrypoint': ['C = module.for.thisclass:SomeClass']}\n)\n```\n```python\n# myclasses.py\n# then just use it in your class\nfrom . import collection\n\n@collection.register\nclass A:\n    pass\n\nclass B:\n    pass\n\nclass B1(B):\n    pass\n\nclass B2(B):\n    pass\n\ncollection.register_subclasses(B, include=True)\n\n# they're all available in the collection dictionary.\nassert set(collection) == {'a', 'b', 'b1', 'b2', 'c'}\n\nclass D(B1): # works for nested subclasses\n    pass\n\ncollection.refresh_subclasses() # can gather new subclasses\nassert set(collection) == {'a', 'b', 'b1', 'b2', 'c', 'd'}\n```\n```python\n# __main__.py\n# now to see how they're used.\nfrom . import collection\n\ndef main(**kw):\n    processors = collection.gather(**kw)\n\n    for data in data_generator():\n        for func in processors: # assuming we defined __call__\n            func(data)\n\nmain(fs=48000, channels=4, b1=False, b2=dict(nfft=2048))\n```\n\nDoing this will result in a processor list that looks like this:\n```python\nprocessors = [\n    A(fs=48000, channels=4),\n    B(fs=48000, channels=4),\n    # B1 is omitted since it was set as False\n    B2(fs=48000, channels=4, nfft=2048),\n    C(fs=48000, channels=4),\n    D(fs=48000, channels=4),\n]\n```\n\nThis is used if you have a bank of processors that you want to run and you want them to be enabled/disabled using keyword arguments.\n\nAnother use case is: you only need to select a single registered class. This is done very simply:\n```python\n# __main__.py\n# now to see how they're used.\nfrom . import collection\n\ndef main(proc_type='b', **kw):\n    processor = collection.getone(proc_type, **kw)\n\n    for data in data_generator():\n        processor(data)\n\nmain(fs=48000, channels=4, proc_type='b2')\n\n```\n\n## Notes\n - There is nothing stopping you from adding things that return non function values (i.e. lists).\n\n\n```python\n@collection.register\ndef reds(saturation=92):\n    c = '#FF0000'\n    return [c] + calculate_colors(c, saturation)\n\n@collection.register\ndef blues(saturation=92):\n    c = '#0000FF'\n    return [c] + calculate_colors(c, saturation)\n\n@collection.register\ndef greens(saturation=92):\n    c = '#00FF00'\n    return [c] + calculate_colors(c, saturation)\n\ncolors = collection.gather(saturation=120, greens=False)\n# colors = [\n#     ['#FF0000', ...], # reds\n#     ['#0000FF', ...], # blues\n# ]\n```\n\n## TODO", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/beasteers/readi", "keywords": "simple class function registration entrypoints setup.py register collection", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "readi", "package_url": "https://pypi.org/project/readi/", "platform": "", "project_url": "https://pypi.org/project/readi/", "project_urls": {"Homepage": "https://github.com/beasteers/readi"}, "release_url": "https://pypi.org/project/readi/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Dead simple class/function registration.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>readi Collections</h1>\n<p>Dead simple class registration.</p>\n<p>Often I find myself trying to implement generic class representations and then extending them to provide many different functional variants. I then want to be able to access those variants in a simple, automatic way, without having to write \"switch-case\" type class selection strategies.</p>\n<p>This allows you to register classes at instantiation time and have them accessible using a simple dict interface, with some nice helper methods :)</p>\n<h2>Install</h2>\n<pre>pip install readi\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"c1\"># __init__.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">readi</span>\n<span class=\"c1\"># this is just a dictionary with some fancy bits</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">readi</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">(</span><span class=\"n\">entrypoints</span><span class=\"o\">=</span><span class=\"s1\">'myentrypoint'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># setup.py</span>\n<span class=\"c1\"># this can allow other modules to register classes.</span>\n<span class=\"n\">setuptools</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'myentrypoint'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'C = module.for.thisclass:SomeClass'</span><span class=\"p\">]}</span>\n<span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># myclasses.py</span>\n<span class=\"c1\"># then just use it in your class</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">collection</span>\n\n<span class=\"nd\">@collection</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B1</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B2</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">register_subclasses</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># they're all available in the collection dictionary.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'b1'</span><span class=\"p\">,</span> <span class=\"s1\">'b2'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">D</span><span class=\"p\">(</span><span class=\"n\">B1</span><span class=\"p\">):</span> <span class=\"c1\"># works for nested subclasses</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">refresh_subclasses</span><span class=\"p\">()</span> <span class=\"c1\"># can gather new subclasses</span>\n<span class=\"k\">assert</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'b1'</span><span class=\"p\">,</span> <span class=\"s1\">'b2'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">}</span>\n</pre>\n<pre><span class=\"c1\"># __main__.py</span>\n<span class=\"c1\"># now to see how they're used.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">collection</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n    <span class=\"n\">processors</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">data_generator</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">func</span> <span class=\"ow\">in</span> <span class=\"n\">processors</span><span class=\"p\">:</span> <span class=\"c1\"># assuming we defined __call__</span>\n            <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">nfft</span><span class=\"o\">=</span><span class=\"mi\">2048</span><span class=\"p\">))</span>\n</pre>\n<p>Doing this will result in a processor list that looks like this:</p>\n<pre><span class=\"n\">processors</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n    <span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n    <span class=\"c1\"># B1 is omitted since it was set as False</span>\n    <span class=\"n\">B2</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">nfft</span><span class=\"o\">=</span><span class=\"mi\">2048</span><span class=\"p\">),</span>\n    <span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n    <span class=\"n\">D</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This is used if you have a bank of processors that you want to run and you want them to be enabled/disabled using keyword arguments.</p>\n<p>Another use case is: you only need to select a single registered class. This is done very simply:</p>\n<pre><span class=\"c1\"># __main__.py</span>\n<span class=\"c1\"># now to see how they're used.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">collection</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">proc_type</span><span class=\"o\">=</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">):</span>\n    <span class=\"n\">processor</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">getone</span><span class=\"p\">(</span><span class=\"n\">proc_type</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">data</span> <span class=\"ow\">in</span> <span class=\"n\">data_generator</span><span class=\"p\">():</span>\n        <span class=\"n\">processor</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">=</span><span class=\"mi\">48000</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">proc_type</span><span class=\"o\">=</span><span class=\"s1\">'b2'</span><span class=\"p\">)</span>\n</pre>\n<h2>Notes</h2>\n<ul>\n<li>There is nothing stopping you from adding things that return non function values (i.e. lists).</li>\n</ul>\n<pre><span class=\"nd\">@collection</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">reds</span><span class=\"p\">(</span><span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mi\">92</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'#FF0000'</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">calculate_colors</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">saturation</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@collection</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">blues</span><span class=\"p\">(</span><span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mi\">92</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'#0000FF'</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">calculate_colors</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">saturation</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@collection</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">greens</span><span class=\"p\">(</span><span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mi\">92</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"s1\">'#00FF00'</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">calculate_colors</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">saturation</span><span class=\"p\">)</span>\n\n<span class=\"n\">colors</span> <span class=\"o\">=</span> <span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">saturation</span><span class=\"o\">=</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"n\">greens</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"c1\"># colors = [</span>\n<span class=\"c1\">#     ['#FF0000', ...], # reds</span>\n<span class=\"c1\">#     ['#0000FF', ...], # blues</span>\n<span class=\"c1\"># ]</span>\n</pre>\n<h2>TODO</h2>\n\n          </div>"}, "last_serial": 7146400, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c0a9c814692b78595f640ddb1e354428", "sha256": "8ae06ebf5c90034fd343d29995bc7c1e07523181b9cf493da6a443d61b2ab1b6"}, "downloads": -1, "filename": "readi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c0a9c814692b78595f640ddb1e354428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3793, "upload_time": "2020-05-01T16:52:22", "upload_time_iso_8601": "2020-05-01T16:52:22.543206Z", "url": "https://files.pythonhosted.org/packages/ab/06/5248df58bea97fbc55c0bf1996a0ad41378d0313ddb9c923821295687edd/readi-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0a9c814692b78595f640ddb1e354428", "sha256": "8ae06ebf5c90034fd343d29995bc7c1e07523181b9cf493da6a443d61b2ab1b6"}, "downloads": -1, "filename": "readi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c0a9c814692b78595f640ddb1e354428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3793, "upload_time": "2020-05-01T16:52:22", "upload_time_iso_8601": "2020-05-01T16:52:22.543206Z", "url": "https://files.pythonhosted.org/packages/ab/06/5248df58bea97fbc55c0bf1996a0ad41378d0313ddb9c923821295687edd/readi-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:28 2020"}