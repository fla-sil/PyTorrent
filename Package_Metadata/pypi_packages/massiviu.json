{"info": {"author": "Thomas Weholt", "author_email": "thomas@weholt.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Database"], "description": "MassivIU \"bulk\" insert/update/delete for Django\n=======================================================\n\n* Version : 1.0.0 - Beta 1\n* Author : Thomas Weholt <thomas@weholt.org>\n* License : Modified BSD.\n* Status : Beta\n* Url : https://github.com/weholt/massiviu.git\n\n\nBackground\n----------\n\n* MassivIU is a refactoring and update to the package known as DSE (https://github.com/weholt/DSE).\n\n* It now supports Django 1.10.x and Python 3.5.\n\n* MassivIU is available for one reason - to insert/update/delete lots of data -- as fast as possible.\n\n* MassivIU vs Django ORM: typical speed gain is around 5x-10X for updates, 3X+ for inserts.\n\n* MassivIU is aware of default values specified in your Django models and will use those if no value is given for a field in an insert statement.\n\n* MassivIU caches SQL-statements, both inserts, updates and delete, and executes them when a specified number of statements has been prepared or when it`s told manually to flush cached statements to the database. The actual sql execution is done using DB API cursor.executemany and this is much faster than executing SQL-statements in sequence and way faster than using the Django ORM.\n\n* MassivIU uses a dictionary to specify what fields to work on.\n\n* For the record; I love the Django ORM. I think it's great, just not for scenarios like the ones Massiviu was written for.\n\n\nInstallation\n------------\n\n    pip install massiviu\n\nor\n\n    git clone https://github.com/weholt/massiviu\n    cd massiviu\n    python setup.py install\n\n\nExample usage\n-------------\n\nYou got a model like::\n\n    gender =  (('M', 'Male'), ('F', 'Female'))\n\n    class Person(models.Model):\n        name = models.CharField(max_length = 30)\n        age = models.IntegerField(default = 30)\n        sex = models.CharField(max_length = 1, choices = gender, default = 'M')\n\nUsing MassivIU::\n\n    from massiviu.context import DelayedContextFrom\n\n    with DelayedContextFrom(Person) as cntx:\n        for name, age, sex in (('Thomas', 36, 'M'), ('Joe', 40, 'M'), ('Jane', 28, 'F')):\n             cntx.insert(dict(name = name, age = age, sex = sex))\n\nNothing will be inserted into the database before the loop is done ( or you \ninsert 1000 items ). Then the items will be inserted using cursor.executemany, \nusing plain SQL - no ORM in sight.\n\nMassivIU using default values defined in your model::\n\n    with DelayedContextFrom(Person) as cntx:\n        # Adding an item, just defining a name and using the default values from the model:\n        cntx.insert({'name': 'John'})\n\n        # Overriding the default values? Just specify a valid value\n        cntx.insert({'name': 'Thomas', 'age': 36, 'sex': 'M'})\n\n        # Update record with id = 1 and set its name to John. This will trigger \n        # a SQL-statement for this update alone, since not all columns are specified:\n        cntx.update({'id': 1, 'name': 'John'})\n\nSay you want to update all records with some calculated value, something you \ncouldn't find a way to do in SQL. Using MassivIU this is easy and fast::\n\n    with DelayedContextFrom(Person) as cntx:\n        # Use Djangos ORM to generate dictionaries to use in MassivIU; objects.all().values().\n        for item in Person.objects.all().values():\n            cntx.update(dict(id=item.get('id'), somevar=calculated_value))\n\nI've recieved some questions about transaction handling. Below is an simple example,\nbut I`m looking into other ways of handling transactions as well::\n\n    from django.db import transaction\n    import MassivIU\n\n    def some_method():\n        with transaction.commit_on_success():\n            with DelayedContextFrom(Person) as cntx:\n                for item in somelist:\n                    cntx.insert({'some_column': item.some_value, 'another_column': item.another_value})    \n\nYou can also cache items to delete::\n\n    with DelayedContextFrom(Person) as cntx:\n        for person in person.objects.all():\n            if person.likes_perl_more_than_python:\n                cntx.delete(person.id) # won't trigger anything\n    # here all cached items for deletions are deleted using plain SQL, no orm.\n\nMassivIU caches id's and deletes them when 1000 items are cached or flush/close are called.\nIt uses sql similar to \"delete from tablename where id in (<list of ids>)\".\n\nMassivIU provides a special bulk_update-method. It takes a dictionary of values to update,\nrequires a value for the primary key/id of the record, but uses the django orm's own update method\ninstead of plain sql to reduce number of statements to execute. This is helpful when your fields can\nhave a limited set of values, like EXIF-data from photos. An example::\n\n    with DelayedContextFrom(Photo) as cntx:\n        cntx.bulk_update({'id': 1, 'camera_model': 'Nikon', 'fnumber': 2.8, 'iso_speed': 200})\n        cntx.bulk_update({'id': 2, 'camera_model': 'Nikon', 'fnumber': 11, 'iso_speed': 400})\n        cntx.bulk_update({'id': 3, 'camera_model': 'Nikon', 'fnumber': 2.8, 'iso_speed': 400})\n        cntx.bulk_update({'id': 4, 'camera_model': 'Canon', 'fnumber': 3.5, 'iso_speed': 200})\n        cntx.bulk_update({'id': 5, 'camera_model': 'Canon', 'fnumber': 11, 'iso_speed': 800})\n        cntx.bulk_update({'id': 6, 'camera_model': 'Pentax', 'fnumber': 11, 'iso_speed': 800})\n        cntx.bulk_update({'id': 7, 'camera_model': 'Sony', 'fnumber': 3.5, 'iso_speed': 1600})\n        # and then some thousand more lines like that\n\nInternally MassivIU will construct a structure like this::\n\n    bulk_updates = {\n        'camera_model': {\n                'Nikon': [1,2,3],\n                'Canon': [4,5],\n                'Pentax': [6],\n                'Sony': [7],\n            },\n        'fnumber': {\n                2.8: [1,3],\n                11: [2,5,6],\n                3.5: [4,7],\n            },\n        'iso_speed': {\n                200: [1,4],\n                400: [2,3],\n                800: [5,6],\n                1600: [7]\n        }\n    }\n\nAnd then execute those statements using::\n\n    # pk = the primary key field for the model, in most cases id\n    for field, values in bulk_updates.iteritems():\n        for value, ids in values.iteritems():\n            model.objects.filter(**{\"%s__in\" % pk: ids}).update(**{field: value})\n\nFor huge datasets where the fields can have limited values this has a big impact on performance. So when to use\nupdate or bulk_update depends on the data you want to process. For instance importing a contact list where most\nof the fields had almost unique values would benefit from the update-method, but importing data from photos, id3-tags\nfrom your music collection etc would process much faster using bulk_update.\n\nBy default MassivIU provides no validation and extracts no such info from your models, \nbut by using the MassivIU value validator you can clean up and validate your data as they're being added::\n\n        def name_validator(values):\n            if 'name' in values and len(values.get('name')) > 20:\n                values['name'] = values['name'][:20]\n            return values\n\n        with DelayedContextFrom(foo).validate_values_with(name_validator) as cntx:\n            cntx.insert({'name': 'Thomas'*50, 'age': 36, 'sex': 'M'})\n\nAnd that's all you have to do. Your method value_validator-method will be called each time you add a set of values. \nIf you want to abort if any invalid data is found just raise an exception.\n\nNote about MySQL\n----------------\n\n* Richard Brockie made me aware of some problems with MySQL InnoDb. It seems like MassivIU doesn't insert anything, but changing table type to MyISAM solves the problem allthough doing so will create other problems because InnoDb has a lot of nice features not found in MyISAM (http://stackoverflow.com/questions/20148/myisam-versus-innodb). Like Django itself I'm recommend using PostgreSQL.\n\nWhy refactoring and a new name?\n-------------------------------\n\nThe monkey-patching of the models was stupid. The re-organization of the code into smaller, clearly defined classes made the code \nit easier to understand and maintain. It was also written with Dependency-Injection in mind so it is easy to replace a specific \nclass if it doesn't fit your needs. This release and the any following updates will be aimed at Python 3.5+. \n\nI did't remember what DSE stood for so I changed it to something more meaningful. I hope.\n\nRelease notes \n-------------\n\n1.0.0 Beta 1: Refactoring, renaming, updates to support django 1.10.x and python 3.5. \n\nOld DSE release notes to give credit to contributors \n----------------------------------------------------\n\n4.0.0 Beta 1: cleaned up and added some new unittests. Tested using Python 3.3/2.7 and Django 1.6.x.\n\n4.0.0-RC3 : Code clean-up. Nothing new. Preparing moving to github.\n\n4.0.0-RC2 : Bugfix for Django 1.6 running under Python 3.x. A note on MySQL InnoDB vs MyISAM.\n\n4.0.0-RC1 : First steps towards Python 3.x and Django 1.5 support.\n\n4.0.0-pre : port to Python 3.x.\n\n3.1.0 : patch from rassminus; Changed sql creation to quote all references to the table name and column labels.\n\n3.0.0 : clean up and release.\n\n3.0.0-BETA#3 : clean-up/validation decorator and optional cursor caching.\n\n3.0.0-BETA#2 : fixed a few things reported by Fido Garcia.\n\n3.0.0-BETA#1 : refactoring, removal of code, new methods for insert and update, removal of the add, execute and several other methods. UPDATE-code\n        optimized.\n\n2.1.0 : Small change; MassivIU.patch_models can now take an optional list of models to patch, like so MassivIU.patch_models(specific_models=[User, Comment]).\n\n2.0.0 : labeled as stable. Updated docs and examples.\n\n2.0.0-RC1 : no change in code, now released using the modified BSD license to be more compatible with django license use.\n\n2.0.0-BETA#9 : added FileExport-class to ease debugging what is processed during testing. Writes SQL-data to file. See source/testsuite for usage.\n\n2.0.0-BETA#4 : started refactoring MassivIU to remove all non-django specific code, mostly to gain speed and simply code.\n\n1.0.2 : reconnect if cursor is dead.\n\n1.0.1 : fixed issue #9 \"Factory can eat up memory\" reported by vangheem. When finding fields related to a table only the top row is fetched.\n\n1.0.0 : Version bump. Added unittest for issue #8.\n\n1.0.0-RC1 : updated README.txt. \n\n0.9.4 : - PEP8 and pyflake.\n\n0.9.3 : - Fixed issue #7: MassivIU causes django-debug-toolbar to crash. Thanks to ringemup for pointing that out. Added some docstrings.\n\n0.9.2 : - Corrected type in usage.rst and README.txt.\n\n0.9.1 : - Refactored code even more, added usage.rst, singleton support in the singleton-package and some performance tests. Models not monkey patched be default anymore, must call MassivIU.patch_models().\n\n0.9.0 : - Refactored code and cleaned up tests folder. Focus on getting singleton support in before 1.0.0. And more tests.\n\n0.8.2 : - added 'pysqlite2' to _DBMAP. Thanks to David Marble for 0.8.1 and 0.8.2.\n\n0.8.1 : - attempt to fix quoting problems with fields on postgresql.\n\n0.8.0 : - fixed crash when more than one database connection has been configured. No ModelFactory will be triggered.\n\n0.7.0 : - don`t remember.\n\n0.6.0 : - added support for the with-statement.\n        - added an ModelDelayedExecutor-instance to each model, so you can do Model.MassivIU.add_item\n          instead of MassivIU.ModelFactory.Model.add_item.\n        - renamed MassivIU.modelfactory to MassivIU.ModelFactory to be more style-compliant.\n\n0.5.1 : just some notes on transaction handling.\n\n0.5.0 :\n    - added modelfactory. Upon first import a modelfactory will be created in the MassivIU module. It`s basically just a helper-class containing ModelDelayedExecutor-instances for all models in all apps found in INSTALLED_APPS in settings.py.\n    - to change the default item limit before automatic execution of cached SQL statements to 10000 instead of the default 1000: import MassivIU; MassivIU.ITEM_LIMIT = 10000\n\n0.4.0 :\n    - fixed serious bug when using mass updates. Using cursor.executemany is only possible when values for all columns are specified. If only values for a subset of the columns is specified that will be executed as a seperate SQL-call. NOTE! Using dex.get_items() or Djangos Model.objects.values() will give you all the fields.\n    - code clean-up.\n    - added custom exceptions; UpdateManyException, UpdateOneException and InsertManyException.\n    - added setter for the cursor-property. Thanks to jetfix (https://bitbucket.org/jetfix).\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/weholt/massiviu", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "massiviu", "package_url": "https://pypi.org/project/massiviu/", "platform": "", "project_url": "https://pypi.org/project/massiviu/", "project_urls": {"Homepage": "https://github.com/weholt/massiviu"}, "release_url": "https://pypi.org/project/massiviu/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "MassivIU - Simplified \"bulk\" insert/update/delete for Django.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>Version : 1.0.0 - Beta 1</li>\n<li>Author : Thomas Weholt &lt;<a href=\"mailto:thomas%40weholt.org\">thomas<span>@</span>weholt<span>.</span>org</a>&gt;</li>\n<li>License : Modified BSD.</li>\n<li>Status : Beta</li>\n<li>Url : <a href=\"https://github.com/weholt/massiviu.git\" rel=\"nofollow\">https://github.com/weholt/massiviu.git</a></li>\n</ul>\n<div id=\"background\">\n<h2>Background</h2>\n<ul>\n<li>MassivIU is a refactoring and update to the package known as DSE (<a href=\"https://github.com/weholt/DSE\" rel=\"nofollow\">https://github.com/weholt/DSE</a>).</li>\n<li>It now supports Django 1.10.x and Python 3.5.</li>\n<li>MassivIU is available for one reason - to insert/update/delete lots of data \u2013 as fast as possible.</li>\n<li>MassivIU vs Django ORM: typical speed gain is around 5x-10X for updates, 3X+ for inserts.</li>\n<li>MassivIU is aware of default values specified in your Django models and will use those if no value is given for a field in an insert statement.</li>\n<li>MassivIU caches SQL-statements, both inserts, updates and delete, and executes them when a specified number of statements has been prepared or when it`s told manually to flush cached statements to the database. The actual sql execution is done using DB API cursor.executemany and this is much faster than executing SQL-statements in sequence and way faster than using the Django ORM.</li>\n<li>MassivIU uses a dictionary to specify what fields to work on.</li>\n<li>For the record; I love the Django ORM. I think it\u2019s great, just not for scenarios like the ones Massiviu was written for.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install massiviu</blockquote>\n<p>or</p>\n<blockquote>\ngit clone <a href=\"https://github.com/weholt/massiviu\" rel=\"nofollow\">https://github.com/weholt/massiviu</a>\ncd massiviu\npython setup.py install</blockquote>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>You got a model like:</p>\n<pre>gender =  (('M', 'Male'), ('F', 'Female'))\n\nclass Person(models.Model):\n    name = models.CharField(max_length = 30)\n    age = models.IntegerField(default = 30)\n    sex = models.CharField(max_length = 1, choices = gender, default = 'M')\n</pre>\n<p>Using MassivIU:</p>\n<pre>from massiviu.context import DelayedContextFrom\n\nwith DelayedContextFrom(Person) as cntx:\n    for name, age, sex in (('Thomas', 36, 'M'), ('Joe', 40, 'M'), ('Jane', 28, 'F')):\n         cntx.insert(dict(name = name, age = age, sex = sex))\n</pre>\n<p>Nothing will be inserted into the database before the loop is done ( or you\ninsert 1000 items ). Then the items will be inserted using cursor.executemany,\nusing plain SQL - no ORM in sight.</p>\n<p>MassivIU using default values defined in your model:</p>\n<pre>with DelayedContextFrom(Person) as cntx:\n    # Adding an item, just defining a name and using the default values from the model:\n    cntx.insert({'name': 'John'})\n\n    # Overriding the default values? Just specify a valid value\n    cntx.insert({'name': 'Thomas', 'age': 36, 'sex': 'M'})\n\n    # Update record with id = 1 and set its name to John. This will trigger\n    # a SQL-statement for this update alone, since not all columns are specified:\n    cntx.update({'id': 1, 'name': 'John'})\n</pre>\n<p>Say you want to update all records with some calculated value, something you\ncouldn\u2019t find a way to do in SQL. Using MassivIU this is easy and fast:</p>\n<pre>with DelayedContextFrom(Person) as cntx:\n    # Use Djangos ORM to generate dictionaries to use in MassivIU; objects.all().values().\n    for item in Person.objects.all().values():\n        cntx.update(dict(id=item.get('id'), somevar=calculated_value))\n</pre>\n<p>I\u2019ve recieved some questions about transaction handling. Below is an simple example,\nbut I`m looking into other ways of handling transactions as well:</p>\n<pre>from django.db import transaction\nimport MassivIU\n\ndef some_method():\n    with transaction.commit_on_success():\n        with DelayedContextFrom(Person) as cntx:\n            for item in somelist:\n                cntx.insert({'some_column': item.some_value, 'another_column': item.another_value})\n</pre>\n<p>You can also cache items to delete:</p>\n<pre>with DelayedContextFrom(Person) as cntx:\n    for person in person.objects.all():\n        if person.likes_perl_more_than_python:\n            cntx.delete(person.id) # won't trigger anything\n# here all cached items for deletions are deleted using plain SQL, no orm.\n</pre>\n<p>MassivIU caches id\u2019s and deletes them when 1000 items are cached or flush/close are called.\nIt uses sql similar to \u201cdelete from tablename where id in (&lt;list of ids&gt;)\u201d.</p>\n<p>MassivIU provides a special bulk_update-method. It takes a dictionary of values to update,\nrequires a value for the primary key/id of the record, but uses the django orm\u2019s own update method\ninstead of plain sql to reduce number of statements to execute. This is helpful when your fields can\nhave a limited set of values, like EXIF-data from photos. An example:</p>\n<pre>with DelayedContextFrom(Photo) as cntx:\n    cntx.bulk_update({'id': 1, 'camera_model': 'Nikon', 'fnumber': 2.8, 'iso_speed': 200})\n    cntx.bulk_update({'id': 2, 'camera_model': 'Nikon', 'fnumber': 11, 'iso_speed': 400})\n    cntx.bulk_update({'id': 3, 'camera_model': 'Nikon', 'fnumber': 2.8, 'iso_speed': 400})\n    cntx.bulk_update({'id': 4, 'camera_model': 'Canon', 'fnumber': 3.5, 'iso_speed': 200})\n    cntx.bulk_update({'id': 5, 'camera_model': 'Canon', 'fnumber': 11, 'iso_speed': 800})\n    cntx.bulk_update({'id': 6, 'camera_model': 'Pentax', 'fnumber': 11, 'iso_speed': 800})\n    cntx.bulk_update({'id': 7, 'camera_model': 'Sony', 'fnumber': 3.5, 'iso_speed': 1600})\n    # and then some thousand more lines like that\n</pre>\n<p>Internally MassivIU will construct a structure like this:</p>\n<pre>bulk_updates = {\n    'camera_model': {\n            'Nikon': [1,2,3],\n            'Canon': [4,5],\n            'Pentax': [6],\n            'Sony': [7],\n        },\n    'fnumber': {\n            2.8: [1,3],\n            11: [2,5,6],\n            3.5: [4,7],\n        },\n    'iso_speed': {\n            200: [1,4],\n            400: [2,3],\n            800: [5,6],\n            1600: [7]\n    }\n}\n</pre>\n<p>And then execute those statements using:</p>\n<pre># pk = the primary key field for the model, in most cases id\nfor field, values in bulk_updates.iteritems():\n    for value, ids in values.iteritems():\n        model.objects.filter(**{\"%s__in\" % pk: ids}).update(**{field: value})\n</pre>\n<p>For huge datasets where the fields can have limited values this has a big impact on performance. So when to use\nupdate or bulk_update depends on the data you want to process. For instance importing a contact list where most\nof the fields had almost unique values would benefit from the update-method, but importing data from photos, id3-tags\nfrom your music collection etc would process much faster using bulk_update.</p>\n<p>By default MassivIU provides no validation and extracts no such info from your models,\nbut by using the MassivIU value validator you can clean up and validate your data as they\u2019re being added:</p>\n<pre>def name_validator(values):\n    if 'name' in values and len(values.get('name')) &gt; 20:\n        values['name'] = values['name'][:20]\n    return values\n\nwith DelayedContextFrom(foo).validate_values_with(name_validator) as cntx:\n    cntx.insert({'name': 'Thomas'*50, 'age': 36, 'sex': 'M'})\n</pre>\n<p>And that\u2019s all you have to do. Your method value_validator-method will be called each time you add a set of values.\nIf you want to abort if any invalid data is found just raise an exception.</p>\n</div>\n<div id=\"note-about-mysql\">\n<h2>Note about MySQL</h2>\n<ul>\n<li>Richard Brockie made me aware of some problems with MySQL InnoDb. It seems like MassivIU doesn\u2019t insert anything, but changing table type to MyISAM solves the problem allthough doing so will create other problems because InnoDb has a lot of nice features not found in MyISAM (<a href=\"http://stackoverflow.com/questions/20148/myisam-versus-innodb\" rel=\"nofollow\">http://stackoverflow.com/questions/20148/myisam-versus-innodb</a>). Like Django itself I\u2019m recommend using PostgreSQL.</li>\n</ul>\n</div>\n<div id=\"why-refactoring-and-a-new-name\">\n<h2>Why refactoring and a new name?</h2>\n<p>The monkey-patching of the models was stupid. The re-organization of the code into smaller, clearly defined classes made the code\nit easier to understand and maintain. It was also written with Dependency-Injection in mind so it is easy to replace a specific\nclass if it doesn\u2019t fit your needs. This release and the any following updates will be aimed at Python 3.5+.</p>\n<p>I did\u2019t remember what DSE stood for so I changed it to something more meaningful. I hope.</p>\n</div>\n<div id=\"release-notes\">\n<h2>Release notes</h2>\n<p>1.0.0 Beta 1: Refactoring, renaming, updates to support django 1.10.x and python 3.5.</p>\n</div>\n<div id=\"old-dse-release-notes-to-give-credit-to-contributors\">\n<h2>Old DSE release notes to give credit to contributors</h2>\n<p>4.0.0 Beta 1: cleaned up and added some new unittests. Tested using Python 3.3/2.7 and Django 1.6.x.</p>\n<p>4.0.0-RC3 : Code clean-up. Nothing new. Preparing moving to github.</p>\n<p>4.0.0-RC2 : Bugfix for Django 1.6 running under Python 3.x. A note on MySQL InnoDB vs MyISAM.</p>\n<p>4.0.0-RC1 : First steps towards Python 3.x and Django 1.5 support.</p>\n<p>4.0.0-pre : port to Python 3.x.</p>\n<p>3.1.0 : patch from rassminus; Changed sql creation to quote all references to the table name and column labels.</p>\n<p>3.0.0 : clean up and release.</p>\n<p>3.0.0-BETA#3 : clean-up/validation decorator and optional cursor caching.</p>\n<p>3.0.0-BETA#2 : fixed a few things reported by Fido Garcia.</p>\n<dl>\n<dt>3.0.0-BETA#1 <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">refactoring, removal of code, new methods for insert and update, removal of the add, execute and several other methods. UPDATE-code</span></dt>\n<dd>optimized.</dd>\n</dl>\n<p>2.1.0 : Small change; MassivIU.patch_models can now take an optional list of models to patch, like so MassivIU.patch_models(specific_models=[User, Comment]).</p>\n<p>2.0.0 : labeled as stable. Updated docs and examples.</p>\n<p>2.0.0-RC1 : no change in code, now released using the modified BSD license to be more compatible with django license use.</p>\n<p>2.0.0-BETA#9 : added FileExport-class to ease debugging what is processed during testing. Writes SQL-data to file. See source/testsuite for usage.</p>\n<p>2.0.0-BETA#4 : started refactoring MassivIU to remove all non-django specific code, mostly to gain speed and simply code.</p>\n<p>1.0.2 : reconnect if cursor is dead.</p>\n<p>1.0.1 : fixed issue #9 \u201cFactory can eat up memory\u201d reported by vangheem. When finding fields related to a table only the top row is fetched.</p>\n<p>1.0.0 : Version bump. Added unittest for issue #8.</p>\n<p>1.0.0-RC1 : updated README.txt.</p>\n<p>0.9.4 : - PEP8 and pyflake.</p>\n<p>0.9.3 : - Fixed issue #7: MassivIU causes django-debug-toolbar to crash. Thanks to ringemup for pointing that out. Added some docstrings.</p>\n<p>0.9.2 : - Corrected type in usage.rst and README.txt.</p>\n<p>0.9.1 : - Refactored code even more, added usage.rst, singleton support in the singleton-package and some performance tests. Models not monkey patched be default anymore, must call MassivIU.patch_models().</p>\n<p>0.9.0 : - Refactored code and cleaned up tests folder. Focus on getting singleton support in before 1.0.0. And more tests.</p>\n<p>0.8.2 : - added \u2018pysqlite2\u2019 to _DBMAP. Thanks to David Marble for 0.8.1 and 0.8.2.</p>\n<p>0.8.1 : - attempt to fix quoting problems with fields on postgresql.</p>\n<p>0.8.0 : - fixed crash when more than one database connection has been configured. No ModelFactory will be triggered.</p>\n<p>0.7.0 : - don`t remember.</p>\n<dl>\n<dt>0.6.0 <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">- added support for the with-statement.</span></dt>\n<dd><ul>\n<li>added an ModelDelayedExecutor-instance to each model, so you can do Model.MassivIU.add_item\ninstead of MassivIU.ModelFactory.Model.add_item.</li>\n<li>renamed MassivIU.modelfactory to MassivIU.ModelFactory to be more style-compliant.</li>\n</ul>\n</dd>\n</dl>\n<p>0.5.1 : just some notes on transaction handling.</p>\n<dl>\n<dt>0.5.0 :</dt>\n<dd><ul>\n<li>added modelfactory. Upon first import a modelfactory will be created in the MassivIU module. It`s basically just a helper-class containing ModelDelayedExecutor-instances for all models in all apps found in INSTALLED_APPS in settings.py.</li>\n<li>to change the default item limit before automatic execution of cached SQL statements to 10000 instead of the default 1000: import MassivIU; MassivIU.ITEM_LIMIT = 10000</li>\n</ul>\n</dd>\n<dt>0.4.0 :</dt>\n<dd><ul>\n<li>fixed serious bug when using mass updates. Using cursor.executemany is only possible when values for all columns are specified. If only values for a subset of the columns is specified that will be executed as a seperate SQL-call. NOTE! Using dex.get_items() or Djangos Model.objects.values() will give you all the fields.</li>\n<li>code clean-up.</li>\n<li>added custom exceptions; UpdateManyException, UpdateOneException and InsertManyException.</li>\n<li>added setter for the cursor-property. Thanks to jetfix (<a href=\"https://bitbucket.org/jetfix\" rel=\"nofollow\">https://bitbucket.org/jetfix</a>).</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 4617834, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5b71a070036d2af2ec878515f0d72ee1", "sha256": "0bb13d801359a1b9998d836c8d06948bac3d82a0aa6d861b90d935995ff6720c"}, "downloads": -1, "filename": "massiviu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5b71a070036d2af2ec878515f0d72ee1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21755, "upload_time": "2017-01-21T18:46:50", "upload_time_iso_8601": "2017-01-21T18:46:50.926829Z", "url": "https://files.pythonhosted.org/packages/4f/3c/b1ebc603804bc2e581956a0d1e29c7d81048cf3c062c23b54a3c770d439f/massiviu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "366c3ad028e14e2b54b1b41c36fd04f8", "sha256": "e5bb81b992a5ff14320b017bc81be37cba3a886ac83b5a934739a5be5643dc28"}, "downloads": -1, "filename": "massiviu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "366c3ad028e14e2b54b1b41c36fd04f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13299, "upload_time": "2017-01-21T18:46:52", "upload_time_iso_8601": "2017-01-21T18:46:52.720281Z", "url": "https://files.pythonhosted.org/packages/f2/94/48ccceea0c930a0729716b61069b4cd36d8f7a1f35474c614a66174319f4/massiviu-0.1.0.tar.gz", "yanked": false}], "1.0.1.Beta.1": [{"comment_text": "", "digests": {"md5": "89dc2b3f457c8dc08eb300b3aff59959", "sha256": "e853212e11970c9670e463bd63f3107c22973477ce41818ed4ba30d6f54c6bc4"}, "downloads": -1, "filename": "massiviu-1.0.1.Beta.1.tar.gz", "has_sig": false, "md5_digest": "89dc2b3f457c8dc08eb300b3aff59959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14925, "upload_time": "2018-12-19T18:39:06", "upload_time_iso_8601": "2018-12-19T18:39:06.002170Z", "url": "https://files.pythonhosted.org/packages/c4/f9/ae9e31649ee22d9ecf04a796774674e98056f6d150ccfd6211655e0a42b4/massiviu-1.0.1.Beta.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b71a070036d2af2ec878515f0d72ee1", "sha256": "0bb13d801359a1b9998d836c8d06948bac3d82a0aa6d861b90d935995ff6720c"}, "downloads": -1, "filename": "massiviu-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5b71a070036d2af2ec878515f0d72ee1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21755, "upload_time": "2017-01-21T18:46:50", "upload_time_iso_8601": "2017-01-21T18:46:50.926829Z", "url": "https://files.pythonhosted.org/packages/4f/3c/b1ebc603804bc2e581956a0d1e29c7d81048cf3c062c23b54a3c770d439f/massiviu-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "366c3ad028e14e2b54b1b41c36fd04f8", "sha256": "e5bb81b992a5ff14320b017bc81be37cba3a886ac83b5a934739a5be5643dc28"}, "downloads": -1, "filename": "massiviu-0.1.0.tar.gz", "has_sig": false, "md5_digest": "366c3ad028e14e2b54b1b41c36fd04f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13299, "upload_time": "2017-01-21T18:46:52", "upload_time_iso_8601": "2017-01-21T18:46:52.720281Z", "url": "https://files.pythonhosted.org/packages/f2/94/48ccceea0c930a0729716b61069b4cd36d8f7a1f35474c614a66174319f4/massiviu-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:28 2020"}