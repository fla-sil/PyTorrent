{"info": {"author": "Knowark", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "jsomark\n#######\n\n.. image:: https://travis-ci.org/knowark/jsomark.svg?branch=master\n    :target: https://travis-ci.org/knowark/jsomark\n\n.. image:: https://codecov.io/gh/knowark/jsomark/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/knowark/jsomark\n\nJSON <-> XML parsing and composing convention.\n\n\nWhat is jsomark?\n================\n\njsomark is a JSON to XML translation convention. jsomark accepts json in an\nstandardized format and converts it to XML. It should as well reverse the\noperation and produce a JSON document from an XML one.\n\nUsage\n=====\n\nTo **create an XML** from a **JSON** document just use\nthe **json_to_xml** function:\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n    \n    json_data = b'{\"hello\": \"world\"}'\n\n    xml_data = json_to_xml(json_data)\n\n    assert xml_data == b'<hello>world</hello>'\n\n*jsomark* also supports more complex documents, like **nested json**\nstructures and Python json serializable **dictionaries**:\n\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n    \n    json_data = {\n        \"Company\": {\n            \"Name\": \"Knowark\",\n            \"Country\": \"Colombia\"\n        }\n    }\n\n    xml_data = json_to_xml(json_data)\n\n    assert xml_data == (\n        b'<Company><Name>Knowark</Name><Country>Colombia</Country></Company>')\n\n\nAttributes\n----------\n\nXML can carry more information (i.e. metadata) than JSON, that is why a\nconvention in the format of a converting json document is needed to match the\noriginal XML semantics. In *jsomark*, **attributes** are defined with\nthe **symbol \"&\"**:\n\n.. note::\n    Attribute values can only be **text** or **bytes**\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n\n    json_data = {\n        \"Device\": {\n            \"Reference\": {\n                \"&\": {\"ID\": \"XYZ2020\", \"Serial\": \"S10987\"}\n            }\n        }\n    }\n\n    xml_data = json_to_xml(json_data)\n\n    assert xml_data == (\n        b'<Device><Reference ID=\"XYZ2020\" Serial=\"S10987\"/></Device>')\n\nIf the key with attributes also has a **text content**, then the\n**symbol \"#\"** should be used to carry it:\n\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n\n    json_data = {\n        \"Employee\": {\n            \"Company\": {\n                \"&\": {\"VAT\": \"900123765\"},\n                \"#\": \"Servagro\"\n            }\n        }\n    }\n\n    xml_data = json_to_xml(json_data)\n\n    assert xml_data == (\n        b'<Employee><Company VAT=\"900123765\">Servagro</Company></Employee>')\n\n.. note::\n    If a JSON key doesn't have attributes, its value becomes the text\n    of the resulting XML element as seen in the previous examples.\n\n\nLists\n-----\n\nLists in the JSON document are interpreted as **repeating elements**\ninside the generated XML.\n\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n\n    json_data = {\n        \"Order\": {\n            \"Line\": [\n                {\"&\": {\"ID\": \"1\"}, \"#\": \"Chocolate Ice Cream\"},\n                {\"&\": {\"ID\": \"2\"}, \"#\": \"Banana Split\"},\n                {\"&\": {\"ID\": \"3\"}, \"#\": \"Caramel Cake\"}\n            ]\n        }\n    }\n\n    xml_data = json_to_xml(json_data)\n\n    assert xml_data == (\n        b'<Order><Line ID=\"1\">Chocolate Ice Cream</Line>'\n        b'<Line ID=\"2\">Banana Split</Line>'\n        b'<Line ID=\"3\">Caramel Cake</Line></Order>')\n\n\nNamespaces\n----------\n\nIn jsomark, namespaces are provided as a **separate dictionary** whose keys\nare the prefixes that must be used in the json document itself. The default\nnamespace should be set in the *'None'* key of the namespaces dictionary and\nits keys in the json document don't have to be prefixed:\n\n.. Note::\n    Don't miss the **\":\"** separator in the non-default namespaced key\n    such as *'isbn:number'* in the following example.\n\n.. code-block:: python\n\n    from jsomark import json_to_xml\n\n    namespaces = {\n        None: 'urn:loc.gov:books',\n        'isbn': 'urn:ISBN:0-395-36341-6'\n    }\n\n    json_data = {\n        \"book\": {\n            \"title\": \"Cheaper by the Dozen\",\n            \"isbn:number\": 1568491379\n        }\n    }\n\n    xml_data = json_to_xml(json_data, namespaces=namespaces)\n\n    assert xml_data == (\n        b'<book xmlns=\"urn:loc.gov:books\" xmlns:isbn=\"urn:ISBN:0-395-36341-6\">'\n        b'<title>Cheaper by the Dozen</title>'\n        b'<isbn:number>1568491379</isbn:number></book>'\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/knowark/jsomark", "keywords": "json,xml", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsomark", "package_url": "https://pypi.org/project/jsomark/", "platform": "", "project_url": "https://pypi.org/project/jsomark/", "project_urls": {"Homepage": "https://github.com/knowark/jsomark", "Repository": "https://github.com/knowark/jsomark"}, "release_url": "https://pypi.org/project/jsomark/0.2.2/", "requires_dist": ["lxml (>=4.5.0,<5.0.0)", "pytest (>=5.3.5,<6.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "json to xml composing and parsing convention.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/knowark/jsomark\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/knowark/jsomark.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c50c0a251d75f147e0d03cf046e2344c81a5f26d/68747470733a2f2f7472617669732d63692e6f72672f6b6e6f7761726b2f6a736f6d61726b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/knowark/jsomark\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/knowark/jsomark/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54a295d4295f1293b8ab47a2b4d189b7c17655b7/68747470733a2f2f636f6465636f762e696f2f67682f6b6e6f7761726b2f6a736f6d61726b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>JSON &lt;-&gt; XML parsing and composing convention.</p>\n<div id=\"what-is-jsomark\">\n<h2>What is jsomark?</h2>\n<p>jsomark is a JSON to XML translation convention. jsomark accepts json in an\nstandardized format and converts it to XML. It should as well reverse the\noperation and produce a JSON document from an XML one.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To <strong>create an XML</strong> from a <strong>JSON</strong> document just use\nthe <strong>json_to_xml</strong> function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'{\"hello\": \"world\"}'</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'&lt;hello&gt;world&lt;/hello&gt;'</span>\n</pre>\n<p><em>jsomark</em> also supports more complex documents, like <strong>nested json</strong>\nstructures and Python json serializable <strong>dictionaries</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Company\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"Name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Knowark\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Country\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Colombia\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Company&gt;&lt;Name&gt;Knowark&lt;/Name&gt;&lt;Country&gt;Colombia&lt;/Country&gt;&lt;/Company&gt;'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"attributes\">\n<h3>Attributes</h3>\n<p>XML can carry more information (i.e. metadata) than JSON, that is why a\nconvention in the format of a converting json document is needed to match the\noriginal XML semantics. In <em>jsomark</em>, <strong>attributes</strong> are defined with\nthe <strong>symbol \u201c&amp;\u201d</strong>:</p>\n<div>\n<p>Note</p>\n<p>Attribute values can only be <strong>text</strong> or <strong>bytes</strong></p>\n</div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Device\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"Reference\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"&amp;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"ID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"XYZ2020\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Serial\"</span><span class=\"p\">:</span> <span class=\"s2\">\"S10987\"</span><span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Device&gt;&lt;Reference ID=\"XYZ2020\" Serial=\"S10987\"/&gt;&lt;/Device&gt;'</span><span class=\"p\">)</span>\n</pre>\n<p>If the key with attributes also has a <strong>text content</strong>, then the\n<strong>symbol \u201c#\u201d</strong> should be used to carry it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Employee\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"Company\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"&amp;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"VAT\"</span><span class=\"p\">:</span> <span class=\"s2\">\"900123765\"</span><span class=\"p\">},</span>\n            <span class=\"s2\">\"#\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Servagro\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Employee&gt;&lt;Company VAT=\"900123765\"&gt;Servagro&lt;/Company&gt;&lt;/Employee&gt;'</span><span class=\"p\">)</span>\n</pre>\n<div>\n<p>Note</p>\n<p>If a JSON key doesn\u2019t have attributes, its value becomes the text\nof the resulting XML element as seen in the previous examples.</p>\n</div>\n</div>\n<div id=\"lists\">\n<h3>Lists</h3>\n<p>Lists in the JSON document are interpreted as <strong>repeating elements</strong>\ninside the generated XML.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Order\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"Line\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"&amp;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"ID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1\"</span><span class=\"p\">},</span> <span class=\"s2\">\"#\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Chocolate Ice Cream\"</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"&amp;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"ID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span><span class=\"p\">},</span> <span class=\"s2\">\"#\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Banana Split\"</span><span class=\"p\">},</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"&amp;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"ID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3\"</span><span class=\"p\">},</span> <span class=\"s2\">\"#\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Caramel Cake\"</span><span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Order&gt;&lt;Line ID=\"1\"&gt;Chocolate Ice Cream&lt;/Line&gt;'</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Line ID=\"2\"&gt;Banana Split&lt;/Line&gt;'</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;Line ID=\"3\"&gt;Caramel Cake&lt;/Line&gt;&lt;/Order&gt;'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"namespaces\">\n<h3>Namespaces</h3>\n<p>In jsomark, namespaces are provided as a <strong>separate dictionary</strong> whose keys\nare the prefixes that must be used in the json document itself. The default\nnamespace should be set in the <em>\u2018None\u2019</em> key of the namespaces dictionary and\nits keys in the json document don\u2019t have to be prefixed:</p>\n<div>\n<p>Note</p>\n<p>Don\u2019t miss the <strong>\u201c:\u201d</strong> separator in the non-default namespaced key\nsuch as <em>\u2018isbn:number\u2019</em> in the following example.</p>\n</div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsomark</span> <span class=\"kn\">import</span> <span class=\"n\">json_to_xml</span>\n\n<span class=\"n\">namespaces</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"s1\">'urn:loc.gov:books'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'isbn'</span><span class=\"p\">:</span> <span class=\"s1\">'urn:ISBN:0-395-36341-6'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">json_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"book\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Cheaper by the Dozen\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"isbn:number\"</span><span class=\"p\">:</span> <span class=\"mi\">1568491379</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">xml_data</span> <span class=\"o\">=</span> <span class=\"n\">json_to_xml</span><span class=\"p\">(</span><span class=\"n\">json_data</span><span class=\"p\">,</span> <span class=\"n\">namespaces</span><span class=\"o\">=</span><span class=\"n\">namespaces</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">xml_data</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;book xmlns=\"urn:loc.gov:books\" xmlns:isbn=\"urn:ISBN:0-395-36341-6\"&gt;'</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;title&gt;Cheaper by the Dozen&lt;/title&gt;'</span>\n    <span class=\"sa\">b</span><span class=\"s1\">'&lt;isbn:number&gt;1568491379&lt;/isbn:number&gt;&lt;/book&gt;'</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6788123, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "bbafe88cd27b8ed080ae2f190f3dc0d7", "sha256": "de8a8dfa9ae3f02963055b3b61d7dedd4e60d65ef56c5900be9d3a020125e314"}, "downloads": -1, "filename": "jsomark-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbafe88cd27b8ed080ae2f190f3dc0d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3385, "upload_time": "2020-03-10T14:41:39", "upload_time_iso_8601": "2020-03-10T14:41:39.137409Z", "url": "https://files.pythonhosted.org/packages/68/3b/24797ac01758301381857ef412ccbbd84ba895e60fc2ae95a9a6758284d0/jsomark-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "446c6ca9c64ed7a800a7e481e926b9d8", "sha256": "cf0d111ebdc59f0dca48ee6c5c67883ca4535d15291867a86287d3a7e585e668"}, "downloads": -1, "filename": "jsomark-0.2.0.tar.gz", "has_sig": false, "md5_digest": "446c6ca9c64ed7a800a7e481e926b9d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 2696, "upload_time": "2020-03-10T14:41:41", "upload_time_iso_8601": "2020-03-10T14:41:41.277484Z", "url": "https://files.pythonhosted.org/packages/a5/06/1139ba310b6acc96a5f362a485ae0922a8767d0061380bbefb19d7c5d883/jsomark-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "35dd1f8e2cbc79e3555542ba1f43947a", "sha256": "6bed41de17d76d341f37283aec96fbfdcd5786c027d86ac7a485e6277b1d6948"}, "downloads": -1, "filename": "jsomark-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "35dd1f8e2cbc79e3555542ba1f43947a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5656, "upload_time": "2020-03-10T14:47:13", "upload_time_iso_8601": "2020-03-10T14:47:13.326992Z", "url": "https://files.pythonhosted.org/packages/b0/4f/8b97677f0c0dd9b56100f4229026b0082055e5f3267bb7266605d46ab98a/jsomark-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc8df376b477898496c1a928121c07e9", "sha256": "9d08eb3104ed6f3aa2eff963596d92a8ea975ca18a3cda7a45500c48e3f15e76"}, "downloads": -1, "filename": "jsomark-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dc8df376b477898496c1a928121c07e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4935, "upload_time": "2020-03-10T14:47:15", "upload_time_iso_8601": "2020-03-10T14:47:15.020029Z", "url": "https://files.pythonhosted.org/packages/5f/63/f44f865da1ab3aac68fec85751289c11244761319ca614a43773f4af3917/jsomark-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a546712d66cb6c2a0732bc56518ba30b", "sha256": "6def62a7229f4257241566729746232f78df15e60d5a31cbb16dfea8fb5e9a6a"}, "downloads": -1, "filename": "jsomark-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a546712d66cb6c2a0732bc56518ba30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5191, "upload_time": "2020-03-10T21:39:11", "upload_time_iso_8601": "2020-03-10T21:39:11.340305Z", "url": "https://files.pythonhosted.org/packages/db/4c/fa238008ce6282b1410c6f50e403126038dde60717bd784590a9478dd6a4/jsomark-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1787251dbe2c7ff0142fb2a51a840831", "sha256": "2ba5caf8519edc9d5dd06254c4c738905cb6a819a63e7b15f88e9f91d67d8ca2"}, "downloads": -1, "filename": "jsomark-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1787251dbe2c7ff0142fb2a51a840831", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4646, "upload_time": "2020-03-10T21:39:12", "upload_time_iso_8601": "2020-03-10T21:39:12.669379Z", "url": "https://files.pythonhosted.org/packages/91/78/cfbe95ab4d2b1dcd6ba684c74aec0cbf37b0ffb3335dda8db60b44815e71/jsomark-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a546712d66cb6c2a0732bc56518ba30b", "sha256": "6def62a7229f4257241566729746232f78df15e60d5a31cbb16dfea8fb5e9a6a"}, "downloads": -1, "filename": "jsomark-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a546712d66cb6c2a0732bc56518ba30b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 5191, "upload_time": "2020-03-10T21:39:11", "upload_time_iso_8601": "2020-03-10T21:39:11.340305Z", "url": "https://files.pythonhosted.org/packages/db/4c/fa238008ce6282b1410c6f50e403126038dde60717bd784590a9478dd6a4/jsomark-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1787251dbe2c7ff0142fb2a51a840831", "sha256": "2ba5caf8519edc9d5dd06254c4c738905cb6a819a63e7b15f88e9f91d67d8ca2"}, "downloads": -1, "filename": "jsomark-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1787251dbe2c7ff0142fb2a51a840831", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 4646, "upload_time": "2020-03-10T21:39:12", "upload_time_iso_8601": "2020-03-10T21:39:12.669379Z", "url": "https://files.pythonhosted.org/packages/91/78/cfbe95ab4d2b1dcd6ba684c74aec0cbf37b0ffb3335dda8db60b44815e71/jsomark-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:57 2020"}