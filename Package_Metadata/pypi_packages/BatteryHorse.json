{"info": {"author": "Chris Stranex", "author_email": "chris@stranex.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# BatteryHorse\nEncode and decode text as English sentences. The name is inspired by this [xkcd comic](https://www.xkcd.com/936/).\n\n## API\nThe batteryhorse module exposes three functions:\n\n### encode_data(data: bytes) -> str\nEncode the given data into one or more English phrases/sentences. Uses [Wordnet](https://wordnet.princeton.edu/) from the [NLTK](http://www.nltk.org/) library to create sentences in the following format: VERB NOUN ADJECTIVE CONJUNCTION ADJECTIVE. If the bytes can be encoded into fewer parts of speech then the rest will be truncated.\n\n### decode_data(data: str, length: int) -> bytes\nDecode a string of sentences or phrases back into the original bytes. Also requires the size of the output bytes\n\n### create_secret(size=3: int) -> bytes\nCreates a random passphrase by using random words from the Wordnet. Size specifies the number of words to use\n\n## Examples\nA basic example that encodes some data\n```python\n>>> import batteryhorse\n>>> batteryhorse.encode_data(b'TEST')\n'Unitise annum abasic'\n```\n\nAn example showing encoding and decoding data\n```python\n>>> from hashlib import sha1\n>>> import batteryhorse\n>>> \n>>> digest = sha1('test'.encode('utf-8')).digest()\n>>> \n>>> batteryhorse.encode_data(digest)\n'Birdnest vara lobed or orthoptic. Wow fencing orthogonal yet anthropomorphic. Scranch rifadin anosmatic'\n>>> \n>>> batteryhorse.decode_data('Birdnest vara lobed or orthoptic. Wow fencing orthogonal yet anthropomorphic. Scranch rifadin anosmatic', len(digest))\nb'\\xa9J\\x8f\\xe5\\xcc\\xb1\\x9b\\xa6\\x1cL\\x08s\\xd3\\x91\\xe9\\x87\\x98/\\xbb\\xd3'\n>>> print(digest)\nb'\\xa9J\\x8f\\xe5\\xcc\\xb1\\x9b\\xa6\\x1cL\\x08s\\xd3\\x91\\xe9\\x87\\x98/\\xbb\\xd3'\n```\n\n## Command Line\nBatteryHorse is also available on the command line.\n```\n  --encode         Accept data to be encoded from STDIN\n  --decode         Accept data to be decoded from STDIN\n  --generate       Generate a random secret\n  --length LENGTH  Specify the length of secret or data to be decoded\n```\n\nAnd as an example\n```bash\n$ echo \"TEST\" | python -m batteryhorse --encode\nBare gyrostabilizer amygdaloidal\n```\n\n## Uses\nThe original intention of this library was to create a new way of sharing fingerprints of public keys.\n\n## Limitations\nAlthough Batteryhorse can encode data of arbitary lengths it does no padding of the data beforehand resulting in some sentences that may not be complete.\n\nAdditionally, since the length of the original data is not encoded the decode function must take the length as a parameter.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cstranex/batteryhorse", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "BatteryHorse", "package_url": "https://pypi.org/project/BatteryHorse/", "platform": "", "project_url": "https://pypi.org/project/BatteryHorse/", "project_urls": {"Homepage": "https://github.com/cstranex/batteryhorse", "Source Code": "https://github.com/cstranex/batteryhorse"}, "release_url": "https://pypi.org/project/BatteryHorse/1.0.0/", "requires_dist": ["nltk"], "requires_python": ">=3.4", "summary": "Encode and decode binary data to English sentences", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BatteryHorse</h1>\n<p>Encode and decode text as English sentences. The name is inspired by this <a href=\"https://www.xkcd.com/936/\" rel=\"nofollow\">xkcd comic</a>.</p>\n<h2>API</h2>\n<p>The batteryhorse module exposes three functions:</p>\n<h3>encode_data(data: bytes) -&gt; str</h3>\n<p>Encode the given data into one or more English phrases/sentences. Uses <a href=\"https://wordnet.princeton.edu/\" rel=\"nofollow\">Wordnet</a> from the <a href=\"http://www.nltk.org/\" rel=\"nofollow\">NLTK</a> library to create sentences in the following format: VERB NOUN ADJECTIVE CONJUNCTION ADJECTIVE. If the bytes can be encoded into fewer parts of speech then the rest will be truncated.</p>\n<h3>decode_data(data: str, length: int) -&gt; bytes</h3>\n<p>Decode a string of sentences or phrases back into the original bytes. Also requires the size of the output bytes</p>\n<h3>create_secret(size=3: int) -&gt; bytes</h3>\n<p>Creates a random passphrase by using random words from the Wordnet. Size specifies the number of words to use</p>\n<h2>Examples</h2>\n<p>A basic example that encodes some data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">batteryhorse</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batteryhorse</span><span class=\"o\">.</span><span class=\"n\">encode_data</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'TEST'</span><span class=\"p\">)</span>\n<span class=\"s1\">'Unitise annum abasic'</span>\n</pre>\n<p>An example showing encoding and decoding data</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">sha1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">batteryhorse</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">sha1</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batteryhorse</span><span class=\"o\">.</span><span class=\"n\">encode_data</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">)</span>\n<span class=\"s1\">'Birdnest vara lobed or orthoptic. Wow fencing orthogonal yet anthropomorphic. Scranch rifadin anosmatic'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> \n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">batteryhorse</span><span class=\"o\">.</span><span class=\"n\">decode_data</span><span class=\"p\">(</span><span class=\"s1\">'Birdnest vara lobed or orthoptic. Wow fencing orthogonal yet anthropomorphic. Scranch rifadin anosmatic'</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">))</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xa9</span><span class=\"s1\">J</span><span class=\"se\">\\x8f\\xe5\\xcc\\xb1\\x9b\\xa6\\x1c</span><span class=\"s1\">L</span><span class=\"se\">\\x08</span><span class=\"s1\">s</span><span class=\"se\">\\xd3\\x91\\xe9\\x87\\x98</span><span class=\"s1\">/</span><span class=\"se\">\\xbb\\xd3</span><span class=\"s1\">'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">digest</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xa9</span><span class=\"s1\">J</span><span class=\"se\">\\x8f\\xe5\\xcc\\xb1\\x9b\\xa6\\x1c</span><span class=\"s1\">L</span><span class=\"se\">\\x08</span><span class=\"s1\">s</span><span class=\"se\">\\xd3\\x91\\xe9\\x87\\x98</span><span class=\"s1\">/</span><span class=\"se\">\\xbb\\xd3</span><span class=\"s1\">'</span>\n</pre>\n<h2>Command Line</h2>\n<p>BatteryHorse is also available on the command line.</p>\n<pre><code>  --encode         Accept data to be encoded from STDIN\n  --decode         Accept data to be decoded from STDIN\n  --generate       Generate a random secret\n  --length LENGTH  Specify the length of secret or data to be decoded\n</code></pre>\n<p>And as an example</p>\n<pre>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"TEST\"</span> <span class=\"p\">|</span> python -m batteryhorse --encode\nBare gyrostabilizer amygdaloidal\n</pre>\n<h2>Uses</h2>\n<p>The original intention of this library was to create a new way of sharing fingerprints of public keys.</p>\n<h2>Limitations</h2>\n<p>Although Batteryhorse can encode data of arbitary lengths it does no padding of the data beforehand resulting in some sentences that may not be complete.</p>\n<p>Additionally, since the length of the original data is not encoded the decode function must take the length as a parameter.</p>\n\n          </div>"}, "last_serial": 4634624, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a64ba4e0b594b0dcacbf4d6ca54fd7ca", "sha256": "fd6e1af601b399973a085355f0202ee1e7453c141549ded7edd0a357e7e77f29"}, "downloads": -1, "filename": "BatteryHorse-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a64ba4e0b594b0dcacbf4d6ca54fd7ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 10793227, "upload_time": "2018-12-26T06:04:44", "upload_time_iso_8601": "2018-12-26T06:04:44.537910Z", "url": "https://files.pythonhosted.org/packages/df/18/59d326d88c30e8505edd0dec8102ae6a742077c35fab655115717cca2dc8/BatteryHorse-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8b99c5f1b950b3b1c4291817a5a3039", "sha256": "ae39bc68785acf7ba1b7dd91ec0a7449ee6db7dd24dbb2ee2007ed2d3cff0c47"}, "downloads": -1, "filename": "BatteryHorse-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b8b99c5f1b950b3b1c4291817a5a3039", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10709830, "upload_time": "2018-12-26T06:04:57", "upload_time_iso_8601": "2018-12-26T06:04:57.865918Z", "url": "https://files.pythonhosted.org/packages/a2/d2/676747c2c535a1c732fcb99e3789b794c88d2e634a3abf2bc55832ab7218/BatteryHorse-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a64ba4e0b594b0dcacbf4d6ca54fd7ca", "sha256": "fd6e1af601b399973a085355f0202ee1e7453c141549ded7edd0a357e7e77f29"}, "downloads": -1, "filename": "BatteryHorse-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a64ba4e0b594b0dcacbf4d6ca54fd7ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 10793227, "upload_time": "2018-12-26T06:04:44", "upload_time_iso_8601": "2018-12-26T06:04:44.537910Z", "url": "https://files.pythonhosted.org/packages/df/18/59d326d88c30e8505edd0dec8102ae6a742077c35fab655115717cca2dc8/BatteryHorse-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8b99c5f1b950b3b1c4291817a5a3039", "sha256": "ae39bc68785acf7ba1b7dd91ec0a7449ee6db7dd24dbb2ee2007ed2d3cff0c47"}, "downloads": -1, "filename": "BatteryHorse-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b8b99c5f1b950b3b1c4291817a5a3039", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10709830, "upload_time": "2018-12-26T06:04:57", "upload_time_iso_8601": "2018-12-26T06:04:57.865918Z", "url": "https://files.pythonhosted.org/packages/a2/d2/676747c2c535a1c732fcb99e3789b794c88d2e634a3abf2bc55832ab7218/BatteryHorse-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:43 2020"}