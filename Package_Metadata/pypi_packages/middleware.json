{"info": {"author": "David Betz", "author_email": "dfb@davidbetz.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "Middleware for Python\n=====================\n\n**Copyright (c) 2016 David Betz**\n\nInstallation\n------------\n\n::\n\n    pip install middleware\n\n|Build Status| |PyPI version|\n\nCompatibility\n-------------\n\nPython 2 and 3\n\nPurpose\n-------\n\nMost everyone needs a concept of middleware.\n\nFollowing are examples of using this, see ``test_middleware.py`` for\nfull examples.\n\n::\n\n    class AdditionMiddleware1(Middleware):\n        def create(self):\n            def func(mwa, context):\n                try:\n                    counter = context['counter']\n                except:\n                    counter = 0\n                context['counter'] = counter + 1\n\n                return next(mwa)\n\n            return func\n\nWhen using a class, add a ``create`` function which returns a function.\nThis inner fuction accepts the middleware array and the data context and\nreturns ``next(mwa)`` to create a middleware chain.\n\nFor this example, I'll add two more:\n\n::\n\n    class AdditionMiddleware2(AdditionMiddleware1):\n        pass\n\n\n    class AdditionMiddleware3(AdditionMiddleware2):\n        pass\n\nNow to run it. Use ``set`` to set an array of middleware and ``add`` to\nadd one to the array. ``set`` overwrites everything. That's just what\n``set`` means.\n\n::\n\n        handler = Handler()\n        handler.set([AdditionMiddleware1, AdditionMiddleware2])\n        handler.add(AdditionMiddleware3)\n        handler.execute()\n\n        # handler['counter'] == 3\n\nIn this case, there is no initial context and each of the three\nmiddleware increment a counter ending with ``handler['counter'] == 3``.\n\nYou can skip the entire class stuff too:\n\n::\n\n    handler = Handler()\n    def inline(wma, context):\n        context['myvalue'] = 12\n    handler.add(inline)\n    handler.execute()\n    # handler['myvalue'] == 12\n\nUse the following to send initial context:\n\n::\n\n    handler = Handler(counter=1)\n\nIt's actually ``kwargs``, so you can load it up:\n\n::\n\n    handler = Handler(**{'a': 1, 'b': 2})\n    def inline(wma, context):\n        context['a'] = context['a'] + context['b']\n    handler.add(inline)\n    handler.execute()\n\n.. |Build Status| image:: https://travis-ci.org/davidbetz/pymiddleware.svg?branch=master\n   :target: https://travis-ci.org/davidbetz/pymiddleware\n.. |PyPI version| image:: https://badge.fury.io/py/middleware.svg\n   :target: https://badge.fury.io/py/middleware", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davidbetz/middleware", "keywords": "middleware", "license": "", "maintainer": "", "maintainer_email": "", "name": "middleware", "package_url": "https://pypi.org/project/middleware/", "platform": "", "project_url": "https://pypi.org/project/middleware/", "project_urls": {"Homepage": "https://github.com/davidbetz/middleware"}, "release_url": "https://pypi.org/project/middleware/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "Python module to add general middleware", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Copyright (c) 2016 David Betz</strong></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install middleware\n</pre>\n<p><a href=\"https://travis-ci.org/davidbetz/pymiddleware\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca18dd2817fc870c6c33c89439029da7a346732b/68747470733a2f2f7472617669732d63692e6f72672f64617669646265747a2f70796d6964646c65776172652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/middleware\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bcd06efd09e547c01eb86a3c543457f7a527ac0/68747470733a2f2f62616467652e667572792e696f2f70792f6d6964646c65776172652e737667\"></a></p>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>Python 2 and 3</p>\n</div>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>Most everyone needs a concept of middleware.</p>\n<p>Following are examples of using this, see <tt>test_middleware.py</tt> for\nfull examples.</p>\n<pre>class AdditionMiddleware1(Middleware):\n    def create(self):\n        def func(mwa, context):\n            try:\n                counter = context['counter']\n            except:\n                counter = 0\n            context['counter'] = counter + 1\n\n            return next(mwa)\n\n        return func\n</pre>\n<p>When using a class, add a <tt>create</tt> function which returns a function.\nThis inner fuction accepts the middleware array and the data context and\nreturns <tt>next(mwa)</tt> to create a middleware chain.</p>\n<p>For this example, I\u2019ll add two more:</p>\n<pre>class AdditionMiddleware2(AdditionMiddleware1):\n    pass\n\n\nclass AdditionMiddleware3(AdditionMiddleware2):\n    pass\n</pre>\n<p>Now to run it. Use <tt>set</tt> to set an array of middleware and <tt>add</tt> to\nadd one to the array. <tt>set</tt> overwrites everything. That\u2019s just what\n<tt>set</tt> means.</p>\n<pre>handler = Handler()\nhandler.set([AdditionMiddleware1, AdditionMiddleware2])\nhandler.add(AdditionMiddleware3)\nhandler.execute()\n\n# handler['counter'] == 3\n</pre>\n<p>In this case, there is no initial context and each of the three\nmiddleware increment a counter ending with <tt><span class=\"pre\">handler['counter']</span> == 3</tt>.</p>\n<p>You can skip the entire class stuff too:</p>\n<pre>handler = Handler()\ndef inline(wma, context):\n    context['myvalue'] = 12\nhandler.add(inline)\nhandler.execute()\n# handler['myvalue'] == 12\n</pre>\n<p>Use the following to send initial context:</p>\n<pre>handler = Handler(counter=1)\n</pre>\n<p>It\u2019s actually <tt>kwargs</tt>, so you can load it up:</p>\n<pre>handler = Handler(**{'a': 1, 'b': 2})\ndef inline(wma, context):\n    context['a'] = context['a'] + context['b']\nhandler.add(inline)\nhandler.execute()\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3030280, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "c6d80bea6bd0bb74022e61e2a201b25a", "sha256": "b11c2957dfdcf379b6e47dcef5af31ed0691033c85e656775b296ff7787c5633"}, "downloads": -1, "filename": "middleware-1.2.tar.gz", "has_sig": false, "md5_digest": "c6d80bea6bd0bb74022e61e2a201b25a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1642, "upload_time": "2016-08-03T20:51:30", "upload_time_iso_8601": "2016-08-03T20:51:30.983136Z", "url": "https://files.pythonhosted.org/packages/78/14/0ca47ca408e1840e3cf1b460b97859a182d80087aabfa5d3446e8f07826c/middleware-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "3020968d6573f9face5fe0753bb34ce4", "sha256": "03cca41fb244456935263b7278c31f1d258489d7cde7b358c6e6681231c67a19"}, "downloads": -1, "filename": "middleware-1.2.1.tar.gz", "has_sig": false, "md5_digest": "3020968d6573f9face5fe0753bb34ce4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3933, "upload_time": "2017-07-15T14:11:13", "upload_time_iso_8601": "2017-07-15T14:11:13.925107Z", "url": "https://files.pythonhosted.org/packages/97/1c/afb0bb09736580a999ee031838c1bfde0c4508662d817223f43a8f320125/middleware-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "505e3a6a46ee590af0d17c4c83ada8cd", "sha256": "65f3426f4d8792836bc45d87f0d84a87353f8669e153c0b95603966de7352e24"}, "downloads": -1, "filename": "middleware-1.2.2.tar.gz", "has_sig": false, "md5_digest": "505e3a6a46ee590af0d17c4c83ada8cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4203, "upload_time": "2017-07-15T14:20:44", "upload_time_iso_8601": "2017-07-15T14:20:44.321183Z", "url": "https://files.pythonhosted.org/packages/10/81/5b9d9972ca106e1bde01ab6e1b3f9a7a4604c90742993f14bdfd3fc2c7f6/middleware-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "2e8e1ed5a150680d5a2fd66859587d15", "sha256": "e5370d5781c440637cb87be4964fc5cb9cec7d4c9a5bb6a7bf0bbae326639c5c"}, "downloads": -1, "filename": "middleware-1.2.3.tar.gz", "has_sig": false, "md5_digest": "2e8e1ed5a150680d5a2fd66859587d15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4211, "upload_time": "2017-07-18T01:55:41", "upload_time_iso_8601": "2017-07-18T01:55:41.873005Z", "url": "https://files.pythonhosted.org/packages/f7/a4/3cdc5609be79de5a837873d4f8e5bcefd0ae17233f57aac70f10d885daef/middleware-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e8e1ed5a150680d5a2fd66859587d15", "sha256": "e5370d5781c440637cb87be4964fc5cb9cec7d4c9a5bb6a7bf0bbae326639c5c"}, "downloads": -1, "filename": "middleware-1.2.3.tar.gz", "has_sig": false, "md5_digest": "2e8e1ed5a150680d5a2fd66859587d15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4211, "upload_time": "2017-07-18T01:55:41", "upload_time_iso_8601": "2017-07-18T01:55:41.873005Z", "url": "https://files.pythonhosted.org/packages/f7/a4/3cdc5609be79de5a837873d4f8e5bcefd0ae17233f57aac70f10d885daef/middleware-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:52 2020"}