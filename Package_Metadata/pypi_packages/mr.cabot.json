{"info": {"author": "Matthew Wilkes", "author_email": "matthew@matthewwilkes.co.uk", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "About\n-----\n\nmr.cabot is a tool for allowing software projects to map where their contributions are coming from. It reads data form common sources like GitHub, gmane and stackoverflow and attempts to locate where those contributors are physically located.\n\nBasic usage\n-----------\n\nYou need to customise your `mr.cabot.cfg` config file to match your software project. The basic format is that the `sources` line lists the sections that supply lists of contributors and `users` lists the sections that supply lists of contributors.\n\nOnly the GitHub sources support user enumeration at the moment, but stackoverflow and gmane both extract geolocation information where possible.\n\nExample\n-------\n\nThe current example from the Plone project generates the following:\n\n.. image :: http://dist.plone.org/media/contributormaps/latest.png\n\nSource types\n------------\n\ngithub\n======\n\ntype\n\tgithub\nkey\n\tthe name of the organisation to be scanned\ntoken\n\tan oauth token, preferably one with the `repo` scope. See https://help.github.com/articles/creating-an-oauth-token-for-command-line-use\ncheckout_directory\n\tan existing directory to cache checkouts in to save on bandwidth\n\ngit\n===\n\ntype\n\tgit\nkey\n\ta clone url of a git repository\n\nstackoverflow\n=============\n\ntype\n\tstackoverflow\nkey\n\ta tag used on stack overflow\ndays\n\tthe number of days of history to download\n\ngmane\n=====\n\ntype\n\tgmane\nkey\n\tthe full gmane newsgroup name\nmessages\n\tdownloads the last x messages\n\nOutput types\n------------\n\nOutput type defaults to a google static map, but can be selected using `--output type` on the command line.\n\nThe available options are:\n\n* googlestaticmap\n* html\n* kml\n\nCaching\n-------\n\nNo caching of geolocation data is included as yet, but data runs are cached under `var/data`, with the filename `yyyy-mm-dd.pickle`. This allows you to re-run old data sets if you are changing display methods.\n\nTo load a pickle instead of re-scanning use the --pickle command line option::\n\n  ./bin/cabot --pickle ./var/data/2013-01-05.pickle --output kml\n\nAdditionally, there is a command line option to skip pulling git repositories. This is useful for re-running when you are tweaking the config file initially, as updating git is the slowest section::\n\n  ./bin/cabot -N --output kml", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/collective/mr.cabot", "keywords": "", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "mr.cabot", "package_url": "https://pypi.org/project/mr.cabot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mr.cabot/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/collective/mr.cabot"}, "release_url": "https://pypi.org/project/mr.cabot/1.0/", "requires_dist": null, "requires_python": null, "summary": "A utility for finding and mapping contributions to open source projects", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>mr.cabot is a tool for allowing software projects to map where their contributions are coming from. It reads data form common sources like GitHub, gmane and stackoverflow and attempts to locate where those contributors are physically located.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>You need to customise your <cite>mr.cabot.cfg</cite> config file to match your software project. The basic format is that the <cite>sources</cite> line lists the sections that supply lists of contributors and <cite>users</cite> lists the sections that supply lists of contributors.</p>\n<p>Only the GitHub sources support user enumeration at the moment, but stackoverflow and gmane both extract geolocation information where possible.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>The current example from the Plone project generates the following:</p>\n<img alt=\"http://dist.plone.org/media/contributormaps/latest.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a4f6e78b5120df6d53eb14f32dbdb9c8bd22d53/687474703a2f2f646973742e706c6f6e652e6f72672f6d656469612f636f6e7472696275746f726d6170732f6c61746573742e706e67\">\n</div>\n<div id=\"source-types\">\n<h2>Source types</h2>\n<div id=\"github\">\n<h3>github</h3>\n<dl>\n<dt>type</dt>\n<dd>github</dd>\n<dt>key</dt>\n<dd>the name of the organisation to be scanned</dd>\n<dt>token</dt>\n<dd>an oauth token, preferably one with the <cite>repo</cite> scope. See <a href=\"https://help.github.com/articles/creating-an-oauth-token-for-command-line-use\" rel=\"nofollow\">https://help.github.com/articles/creating-an-oauth-token-for-command-line-use</a></dd>\n<dt>checkout_directory</dt>\n<dd>an existing directory to cache checkouts in to save on bandwidth</dd>\n</dl>\n</div>\n<div id=\"git\">\n<h3>git</h3>\n<dl>\n<dt>type</dt>\n<dd>git</dd>\n<dt>key</dt>\n<dd>a clone url of a git repository</dd>\n</dl>\n</div>\n<div id=\"stackoverflow\">\n<h3>stackoverflow</h3>\n<dl>\n<dt>type</dt>\n<dd>stackoverflow</dd>\n<dt>key</dt>\n<dd>a tag used on stack overflow</dd>\n<dt>days</dt>\n<dd>the number of days of history to download</dd>\n</dl>\n</div>\n<div id=\"gmane\">\n<h3>gmane</h3>\n<dl>\n<dt>type</dt>\n<dd>gmane</dd>\n<dt>key</dt>\n<dd>the full gmane newsgroup name</dd>\n<dt>messages</dt>\n<dd>downloads the last x messages</dd>\n</dl>\n</div>\n</div>\n<div id=\"output-types\">\n<h2>Output types</h2>\n<p>Output type defaults to a google static map, but can be selected using <cite>\u2013output type</cite> on the command line.</p>\n<p>The available options are:</p>\n<ul>\n<li>googlestaticmap</li>\n<li>html</li>\n<li>kml</li>\n</ul>\n</div>\n<div id=\"caching\">\n<h2>Caching</h2>\n<p>No caching of geolocation data is included as yet, but data runs are cached under <cite>var/data</cite>, with the filename <cite>yyyy-mm-dd.pickle</cite>. This allows you to re-run old data sets if you are changing display methods.</p>\n<p>To load a pickle instead of re-scanning use the \u2013pickle command line option:</p>\n<pre>./bin/cabot --pickle ./var/data/2013-01-05.pickle --output kml\n</pre>\n<p>Additionally, there is a command line option to skip pulling git repositories. This is useful for re-running when you are tweaking the config file initially, as updating git is the slowest section:</p>\n<pre>./bin/cabot -N --output kml\n</pre>\n</div>\n\n          </div>"}, "last_serial": 795039, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "7e7a7e8c403e4347c5cbf7a1c50bfae2", "sha256": "f8cef9c0fda8fea2ebbd90754f47e3ea0f81c1626313ad8384dc59d051f2cd4a"}, "downloads": -1, "filename": "mr.cabot-1.0.zip", "has_sig": false, "md5_digest": "7e7a7e8c403e4347c5cbf7a1c50bfae2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40987, "upload_time": "2013-01-05T11:15:17", "upload_time_iso_8601": "2013-01-05T11:15:17.194434Z", "url": "https://files.pythonhosted.org/packages/a6/7b/05ef2c732970804edadb9f48cd4056617c5fae08c1e82421a4262386fb91/mr.cabot-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e7a7e8c403e4347c5cbf7a1c50bfae2", "sha256": "f8cef9c0fda8fea2ebbd90754f47e3ea0f81c1626313ad8384dc59d051f2cd4a"}, "downloads": -1, "filename": "mr.cabot-1.0.zip", "has_sig": false, "md5_digest": "7e7a7e8c403e4347c5cbf7a1c50bfae2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40987, "upload_time": "2013-01-05T11:15:17", "upload_time_iso_8601": "2013-01-05T11:15:17.194434Z", "url": "https://files.pythonhosted.org/packages/a6/7b/05ef2c732970804edadb9f48cd4056617c5fae08c1e82421a4262386fb91/mr.cabot-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:51:04 2020"}