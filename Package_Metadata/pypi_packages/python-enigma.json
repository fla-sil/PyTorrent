{"info": {"author": "Zachary Adam-MacEwen", "author_email": "zadammac@kenshosec.com", "bugtrack_url": null, "classifiers": [], "description": "# python-enigma: Engima Machines, But With Python\nThis project introduces a package, python_enigma, with an `enigma` module which can be imported and used to include Enigma-Machine-like encryption to your python project. Also included is a simplistic \"Hello World\" proof of concept, a basic catalogue of rotors in the jason format expected (`catalogue.json`), and a convenience script for preparing the catalogue from a csv.\n\n## Security Notice\nIn the age of gigahertz pocket computing, the Enigma cipher is useful as a point of curiosity only. None of the original security flaws with the Enigma machine as patented have been corrected.\n\n## Historical Accuracy Notice\nWhile pains were taken to ensure the interoperability of this emulator and the actual enigma machine, nothing about the module enforces historical accuracy in terms of the use of particular parts or settings, or the \"tidying\" features of the operator.\n\nIn particular, this model allows for an aribtrary number of wheels to be used, some of which were not historically used together. All wheels obey an M3/M4-style \"double stepping\" movement pattern. The smoother gearbox stepping patterns of some later models are not emulated.\n\n## Making use\nThe principle way to use the Enigma module in your scripts is to import and invoke the Engigma class. For convenience, you can read in the string \"default\" as the catalog list to use the stock catalog included in the module.\n\nThe Enigma class accepts the following arguments on initialization:\n- catalog: a dictionary of rotor bindings, or the string \"default\" to use the stock bindings included in the module.\n- stecker: A space-seperated string of bindings to use for the steckerboard settings. Ex, \"AB CD\" means that stecker cables are set between A and B, and C and D.\n- rotors: a list of tuples showing the rotor name from the catalog and the desired ringstellung letter setting, ex `[(\"III\", \"D\"),]`. Any number of rotors may be used, including duplicates.\n- reflector: a string indicating the name of the rotor from the rotor catalogue which you would like to use for the reflector, ex 'Reflector B'.\n- operator: if True, the operator class will be used. This strips unprintable characters from the message and cuts the message into 5-character chunks.\n- word_length: overrides the length of the words used by the operator.\n- stator: accepts \"military\" or \"civilian\", to imitate either the direct encoding of the military version of the device or the QWERTZ encoding used in the civilian model.\n\nUse of the Enigma class provides a variety of convenience methods:\n- set_wheels: accepts a string of wheel positions (as read left to right) and applies them to be the message setting. Should be called before every parse call.\n- set_stecker: if desirable, one could override the steckerboard settings after instantiating the entire machine.\n- parse: parses the string provided and returns that message as though it were processed through an actual Enigma Machine.\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ZAdamMac/python-enigma", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-enigma", "package_url": "https://pypi.org/project/python-enigma/", "platform": "", "project_url": "https://pypi.org/project/python-enigma/", "project_urls": {"Homepage": "https://github.com/ZAdamMac/python-enigma"}, "release_url": "https://pypi.org/project/python-enigma/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "A simple module which adds Enigma Machine-emulating functionality to your python projects.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># python-enigma: Engima Machines, But With Python\nThis project introduces a package, python_enigma, with an <cite>enigma</cite> module which can be imported and used to include Enigma-Machine-like encryption to your python project. Also included is a simplistic \u201cHello World\u201d proof of concept, a basic catalogue of rotors in the jason format expected (<cite>catalogue.json</cite>), and a convenience script for preparing the catalogue from a csv.</p>\n<p>## Security Notice\nIn the age of gigahertz pocket computing, the Enigma cipher is useful as a point of curiosity only. None of the original security flaws with the Enigma machine as patented have been corrected.</p>\n<p>## Historical Accuracy Notice\nWhile pains were taken to ensure the interoperability of this emulator and the actual enigma machine, nothing about the module enforces historical accuracy in terms of the use of particular parts or settings, or the \u201ctidying\u201d features of the operator.</p>\n<p>In particular, this model allows for an aribtrary number of wheels to be used, some of which were not historically used together. All wheels obey an M3/M4-style \u201cdouble stepping\u201d movement pattern. The smoother gearbox stepping patterns of some later models are not emulated.</p>\n<p>## Making use\nThe principle way to use the Enigma module in your scripts is to import and invoke the Engigma class. For convenience, you can read in the string \u201cdefault\u201d as the catalog list to use the stock catalog included in the module.</p>\n<p>The Enigma class accepts the following arguments on initialization:\n- catalog: a dictionary of rotor bindings, or the string \u201cdefault\u201d to use the stock bindings included in the module.\n- stecker: A space-seperated string of bindings to use for the steckerboard settings. Ex, \u201cAB CD\u201d means that stecker cables are set between A and B, and C and D.\n- rotors: a list of tuples showing the rotor name from the catalog and the desired ringstellung letter setting, ex <cite>[(\u201cIII\u201d, \u201cD\u201d),]</cite>. Any number of rotors may be used, including duplicates.\n- reflector: a string indicating the name of the rotor from the rotor catalogue which you would like to use for the reflector, ex \u2018Reflector B\u2019.\n- operator: if True, the operator class will be used. This strips unprintable characters from the message and cuts the message into 5-character chunks.\n- word_length: overrides the length of the words used by the operator.\n- stator: accepts \u201cmilitary\u201d or \u201ccivilian\u201d, to imitate either the direct encoding of the military version of the device or the QWERTZ encoding used in the civilian model.</p>\n<p>Use of the Enigma class provides a variety of convenience methods:\n- set_wheels: accepts a string of wheel positions (as read left to right) and applies them to be the message setting. Should be called before every parse call.\n- set_stecker: if desirable, one could override the steckerboard settings after instantiating the entire machine.\n- parse: parses the string provided and returns that message as though it were processed through an actual Enigma Machine.</p>\n\n          </div>"}, "last_serial": 6191067, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c088b861411e9fdd5cc0fc073bd7d2d2", "sha256": "33570eff16d66cb6f4918ae8abfec0454bd14cc07be18c0752137a9b4f25bf01"}, "downloads": -1, "filename": "python_enigma-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c088b861411e9fdd5cc0fc073bd7d2d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12666, "upload_time": "2019-01-26T01:51:37", "upload_time_iso_8601": "2019-01-26T01:51:37.850621Z", "url": "https://files.pythonhosted.org/packages/a1/2b/7bb75968993a863ca096bea3eaea932313cde1cc7098b5862cd86e230a5d/python_enigma-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "45cb53c14e957a57d0dc6e0dfdfa8e50", "sha256": "2935c8d0245b2cb75853cb58360d478f26d0a5f525c4d25e8fd17261fa343920"}, "downloads": -1, "filename": "python_enigma-1.0.0.tar.gz", "has_sig": false, "md5_digest": "45cb53c14e957a57d0dc6e0dfdfa8e50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7318, "upload_time": "2019-01-26T01:51:40", "upload_time_iso_8601": "2019-01-26T01:51:40.075609Z", "url": "https://files.pythonhosted.org/packages/da/37/66e9d0227cd3075e2e4a35847501906462a0f3cfffaf4a95516e22fb422e/python_enigma-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5996e820680ba0bb6f0ecf1cd6d1a930", "sha256": "7a3de44d90a9032cd7abe33dfc0d5e63fd9d3e51b5670704fb37cd85f4a86d28"}, "downloads": -1, "filename": "python_enigma-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5996e820680ba0bb6f0ecf1cd6d1a930", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12724, "upload_time": "2019-09-22T15:31:46", "upload_time_iso_8601": "2019-09-22T15:31:46.283814Z", "url": "https://files.pythonhosted.org/packages/1a/c8/e65304d50988912c8cf37e823c0ffc37466d7ece333d29f266a8d8b51c70/python_enigma-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e709175a517f867fd117b1bbf0d08dbe", "sha256": "385393320cf6ee2cc723216d3128ec21f44b9ce1008002dc919f360772bbd147"}, "downloads": -1, "filename": "python_enigma-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e709175a517f867fd117b1bbf0d08dbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7375, "upload_time": "2019-09-22T15:31:47", "upload_time_iso_8601": "2019-09-22T15:31:47.608020Z", "url": "https://files.pythonhosted.org/packages/d8/9c/ba029896abc5083a102ca339c4c834274fb21506a16d3d4a658580edf455/python_enigma-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bbfea381d41593d564b8f0395dd554c9", "sha256": "d9d71998c6dc4c0f73922ef653fdf23e323dba5d3d0e6b3c96e65ff391b8532e"}, "downloads": -1, "filename": "python_enigma-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbfea381d41593d564b8f0395dd554c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11183, "upload_time": "2019-11-24T20:50:34", "upload_time_iso_8601": "2019-11-24T20:50:34.378671Z", "url": "https://files.pythonhosted.org/packages/79/0a/3698275ae96b2a7b3cb404cd60cc09da3c1953f0be9cbd4a49b314c6d2b8/python_enigma-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "706ec3533be91e055ed9efe595981ad4", "sha256": "b22bde647f580974372251146e0f1977b4bc0573a72c5e42502992aa05954589"}, "downloads": -1, "filename": "python_enigma-1.1.0.tar.gz", "has_sig": false, "md5_digest": "706ec3533be91e055ed9efe595981ad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7767, "upload_time": "2019-11-24T20:50:35", "upload_time_iso_8601": "2019-11-24T20:50:35.882517Z", "url": "https://files.pythonhosted.org/packages/ec/32/bfaec8d5c98400388616b8c179035126f7cbbe46819e27c227f4d0936458/python_enigma-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bbfea381d41593d564b8f0395dd554c9", "sha256": "d9d71998c6dc4c0f73922ef653fdf23e323dba5d3d0e6b3c96e65ff391b8532e"}, "downloads": -1, "filename": "python_enigma-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bbfea381d41593d564b8f0395dd554c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11183, "upload_time": "2019-11-24T20:50:34", "upload_time_iso_8601": "2019-11-24T20:50:34.378671Z", "url": "https://files.pythonhosted.org/packages/79/0a/3698275ae96b2a7b3cb404cd60cc09da3c1953f0be9cbd4a49b314c6d2b8/python_enigma-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "706ec3533be91e055ed9efe595981ad4", "sha256": "b22bde647f580974372251146e0f1977b4bc0573a72c5e42502992aa05954589"}, "downloads": -1, "filename": "python_enigma-1.1.0.tar.gz", "has_sig": false, "md5_digest": "706ec3533be91e055ed9efe595981ad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7767, "upload_time": "2019-11-24T20:50:35", "upload_time_iso_8601": "2019-11-24T20:50:35.882517Z", "url": "https://files.pythonhosted.org/packages/ec/32/bfaec8d5c98400388616b8c179035126f7cbbe46819e27c227f4d0936458/python_enigma-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:49 2020"}