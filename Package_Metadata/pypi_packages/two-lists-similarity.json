{"info": {"author": "Praneeth Ponnekanti", "author_email": "praneeth.ponnekanti@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "**Description :** This package can be used to compute similarity scores between items in two different lists. \n\n***Example Use Case :*** \n ***Dataload*** : Compare columns in a file to the ones in a database table before loading the data to catch hold of possible column name changes. If not, match the column names accordingly and then load the data ! \n\n**Credits:** To the authors of **fuzzywuzzy** package that has been used as a part of this package development. \n\n## 1. Installation \n\n```\npip install two_lists_similarity  #Use underscores as the seperators, not the hyphens. \n```\n\n## 2. Usage\n***\n__2.1__: Import the ***Calculate_Similarity*** class from the above installed package.\n```\nfrom two_lists_similarity import Calculate_Similarity as cs\n```\n***\n__2.2__: Create an object of this class with the below arguments.  \n- ***inp_list*** : An input list of items. \n- ***ref_list*** : A reference list of items which are referenced by the input list items for the  comparison. \n\nIt is mandatory that above arguments contain your desired input & reference lists before creating the object. \nBelow is an example.\n```\ninp_list = [\"Messi\", \"Superstar\", \"Soccer\", \"Ronaldo\", \"Mbappe\"]\n\nref_list = [\"Lionel Messi\", \"Cristiano Ronaldo\", \"Virgil Van Dikj\", \"are\", \"in\", \"the\", \"top\", \"three\", \"this\",\"year\" ,\"OF\", \"BallonDor\"]\n\n# Create an instance of the class. This is otherwise called as an object \ncsObj = cs(inp_list,ref_list)    \n# csObj is now the object of Calculate Similarity class. \n```\n***\n__2.3:__ Use the above object ***csObj***  to access the `fuzzy_match_output` function inside the ***Calculate_Similarity*** class to calculate similarity between the input list items and the reference list items.\n```\ncsObj.fuzzy_match_output(output_csv_name = 'pkg_sim_test_vsc.csv', output_csv_path = r'C:\\two-lists-similarity')\n```\n\nA brief overview of the function `fuzzy_match_output` can be found below.\n\n***Inputs*** :\n- **output_csv_name** : (Optional) Name of the output file that is to be generated. \n- **output_csv_path** : (Optional) Path where the output file is to be stored at. \n\nIf ***output_csv_name*** is assigned a filename, then the default path to the file would always be your current working directory unless you specify a path explicitly using the ***output_csv_path*** variable.\n\n\n***Functionality :***  \n- **Step 1:**  Compares every item in the input list against all the items in the reference list \n- **Step 2:**  Calculates similarity scores for each of the above mentioned comparisons\n- **Step 3.** Match the list item in the input list with its counterpart in the reference list that has the highest similarity score.\n\nAn illustration of the above steps can be found below :\n```\nInitiating fuzzy matching.......\n------------------------------------------------\nInput column name : Messi\nSimilarity Ratios when compared with the similar reference list items are as below :  [('Lionel Messi', 90), ('in', 45), ('Cristiano Ronaldo', 36), ('are', 25), ('the', 25)]\nAssociated Reference list item with highest similarity : \n('Lionel Messi', 90)\n------------------------------------------------\nInput column name : Superstar\nSimilarity Ratios when compared with the similar reference list items are as below :  [('are', 60), ('year', 46), ('Cristiano Ronaldo', 40), ('three', 36), ('the', 30)]\nAssociated Reference list item with highest similarity : \n('are', 60)\n------------------------------------------------\nInput column name : Soccer\nSimilarity Ratios when compared with the similar reference list items are as below :  [('year', 45), ('OF', 45), ('Lionel Messi', 30), ('Cristiano Ronaldo', 30), ('are', 30)]\nAssociated Reference list item with highest similarity : \n('year', 45)\n------------------------------------------------\nInput column name : Ronaldo\nSimilarity Ratios when compared with the similar reference list items are as below :  [('Cristiano Ronaldo', 90), ('BallonDor', 50), ('in', 45), ('OF', 45), ('Lionel Messi', 39)]\nAssociated Reference list item with highest similarity : \n('Cristiano Ronaldo', 90)\n------------------------------------------------\nInput column name : Mbappe\nSimilarity Ratios when compared with the similar reference list items are as below :  [('are', 44), ('Lionel Messi', 30), ('the', 30), ('top', 30), ('BallonDor', 30)]\nAssociated Reference list item with highest similarity : \n('are', 44)\n------------------------------------------------\n```\n***Outputs :*** \n- **Returns** a dataframe with each row containing the below relation.  \n        (Input List Item, Highest similar Reference List item, Similarity score)\n- **Generates** a CSV generated from the above mentioned dataframe at your desired path.\n\nBelow is the output of the sample input and reference lists used above. \n```\nOutput Data Frame looks like : \n  input_list_item similar_ref_list_item  similarity_score\n0           Messi          Lionel Messi              0.90\n1       Superstar                   are              0.60\n2          Soccer                  year              0.45\n3         Ronaldo     Cristiano Ronaldo              0.90\n4          Mbappe                   are              0.44\n```\n***\n__2.4:__ Use the object ***csObj***  to access the `dissimilar_input_items` function inside the ***Calculate_Similarity*** class to find out the input list items that are way too different when compared to all the reference list items. \n\n```\ncsObj.dissimilar_input_items(similarity_threshold = 0.65)\n```\nA brief overview of the function `dissimilar_input_items` can be found below.\n\n***Inputs*** :\n- ***similarity_threshold*** : A float value between (0.00 - 1.00) for which you want to classify similarity and non-similarity. Recommended Value : 0.65, which is also the default value for this variable.\n\n***Functionality*** : \n- Applies the threshold to filter out the records that have **similarity_score <= Similarity Treshold**, from the dataframe returned by the function `fuzzy_match_output`.\n\n***Output*** : \n- List of items from the input list that have similarity scores <= threshold when compared against all the reference list items\n\nBelow is the output of the function `dissimilar_input_items` when applied on the input, reference list items used above.\n```\nALERT : Input list items that are way too different from the reference list items are :  ['Superstar', 'Soccer', 'Mbappe']\n```\n---\n##### Thank You. Will try to add more functions to this package whenever possible.\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "two-lists-similarity", "package_url": "https://pypi.org/project/two-lists-similarity/", "platform": "", "project_url": "https://pypi.org/project/two-lists-similarity/", "project_urls": null, "release_url": "https://pypi.org/project/two-lists-similarity/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package to implement fuzzy matching between items in two different lists (an input list and a reference list.)", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Description :</strong> This package can be used to compute similarity scores between items in two different lists.</p>\n<p><em><strong>Example Use Case :</strong></em>\n<em><strong>Dataload</strong></em> : Compare columns in a file to the ones in a database table before loading the data to catch hold of possible column name changes. If not, match the column names accordingly and then load the data !</p>\n<p><strong>Credits:</strong> To the authors of <strong>fuzzywuzzy</strong> package that has been used as a part of this package development.</p>\n<h2>1. Installation</h2>\n<pre><code>pip install two_lists_similarity  #Use underscores as the seperators, not the hyphens. \n</code></pre>\n<h2>2. Usage</h2>\n<hr>\n<p><strong>2.1</strong>: Import the <em><strong>Calculate_Similarity</strong></em> class from the above installed package.</p>\n<pre><code>from two_lists_similarity import Calculate_Similarity as cs\n</code></pre>\n<hr>\n<p><strong>2.2</strong>: Create an object of this class with the below arguments.</p>\n<ul>\n<li><em><strong>inp_list</strong></em> : An input list of items.</li>\n<li><em><strong>ref_list</strong></em> : A reference list of items which are referenced by the input list items for the  comparison.</li>\n</ul>\n<p>It is mandatory that above arguments contain your desired input &amp; reference lists before creating the object.\nBelow is an example.</p>\n<pre><code>inp_list = [\"Messi\", \"Superstar\", \"Soccer\", \"Ronaldo\", \"Mbappe\"]\n\nref_list = [\"Lionel Messi\", \"Cristiano Ronaldo\", \"Virgil Van Dikj\", \"are\", \"in\", \"the\", \"top\", \"three\", \"this\",\"year\" ,\"OF\", \"BallonDor\"]\n\n# Create an instance of the class. This is otherwise called as an object \ncsObj = cs(inp_list,ref_list)    \n# csObj is now the object of Calculate Similarity class. \n</code></pre>\n<hr>\n<p><strong>2.3:</strong> Use the above object <em><strong>csObj</strong></em>  to access the <code>fuzzy_match_output</code> function inside the <em><strong>Calculate_Similarity</strong></em> class to calculate similarity between the input list items and the reference list items.</p>\n<pre><code>csObj.fuzzy_match_output(output_csv_name = 'pkg_sim_test_vsc.csv', output_csv_path = r'C:\\two-lists-similarity')\n</code></pre>\n<p>A brief overview of the function <code>fuzzy_match_output</code> can be found below.</p>\n<p><em><strong>Inputs</strong></em> :</p>\n<ul>\n<li><strong>output_csv_name</strong> : (Optional) Name of the output file that is to be generated.</li>\n<li><strong>output_csv_path</strong> : (Optional) Path where the output file is to be stored at.</li>\n</ul>\n<p>If <em><strong>output_csv_name</strong></em> is assigned a filename, then the default path to the file would always be your current working directory unless you specify a path explicitly using the <em><strong>output_csv_path</strong></em> variable.</p>\n<p><em><strong>Functionality :</strong></em></p>\n<ul>\n<li><strong>Step 1:</strong>  Compares every item in the input list against all the items in the reference list</li>\n<li><strong>Step 2:</strong>  Calculates similarity scores for each of the above mentioned comparisons</li>\n<li><strong>Step 3.</strong> Match the list item in the input list with its counterpart in the reference list that has the highest similarity score.</li>\n</ul>\n<p>An illustration of the above steps can be found below :</p>\n<pre><code>Initiating fuzzy matching.......\n------------------------------------------------\nInput column name : Messi\nSimilarity Ratios when compared with the similar reference list items are as below :  [('Lionel Messi', 90), ('in', 45), ('Cristiano Ronaldo', 36), ('are', 25), ('the', 25)]\nAssociated Reference list item with highest similarity : \n('Lionel Messi', 90)\n------------------------------------------------\nInput column name : Superstar\nSimilarity Ratios when compared with the similar reference list items are as below :  [('are', 60), ('year', 46), ('Cristiano Ronaldo', 40), ('three', 36), ('the', 30)]\nAssociated Reference list item with highest similarity : \n('are', 60)\n------------------------------------------------\nInput column name : Soccer\nSimilarity Ratios when compared with the similar reference list items are as below :  [('year', 45), ('OF', 45), ('Lionel Messi', 30), ('Cristiano Ronaldo', 30), ('are', 30)]\nAssociated Reference list item with highest similarity : \n('year', 45)\n------------------------------------------------\nInput column name : Ronaldo\nSimilarity Ratios when compared with the similar reference list items are as below :  [('Cristiano Ronaldo', 90), ('BallonDor', 50), ('in', 45), ('OF', 45), ('Lionel Messi', 39)]\nAssociated Reference list item with highest similarity : \n('Cristiano Ronaldo', 90)\n------------------------------------------------\nInput column name : Mbappe\nSimilarity Ratios when compared with the similar reference list items are as below :  [('are', 44), ('Lionel Messi', 30), ('the', 30), ('top', 30), ('BallonDor', 30)]\nAssociated Reference list item with highest similarity : \n('are', 44)\n------------------------------------------------\n</code></pre>\n<p><em><strong>Outputs :</strong></em></p>\n<ul>\n<li><strong>Returns</strong> a dataframe with each row containing the below relation.<br>\n(Input List Item, Highest similar Reference List item, Similarity score)</li>\n<li><strong>Generates</strong> a CSV generated from the above mentioned dataframe at your desired path.</li>\n</ul>\n<p>Below is the output of the sample input and reference lists used above.</p>\n<pre><code>Output Data Frame looks like : \n  input_list_item similar_ref_list_item  similarity_score\n0           Messi          Lionel Messi              0.90\n1       Superstar                   are              0.60\n2          Soccer                  year              0.45\n3         Ronaldo     Cristiano Ronaldo              0.90\n4          Mbappe                   are              0.44\n</code></pre>\n<hr>\n<p><strong>2.4:</strong> Use the object <em><strong>csObj</strong></em>  to access the <code>dissimilar_input_items</code> function inside the <em><strong>Calculate_Similarity</strong></em> class to find out the input list items that are way too different when compared to all the reference list items.</p>\n<pre><code>csObj.dissimilar_input_items(similarity_threshold = 0.65)\n</code></pre>\n<p>A brief overview of the function <code>dissimilar_input_items</code> can be found below.</p>\n<p><em><strong>Inputs</strong></em> :</p>\n<ul>\n<li><em><strong>similarity_threshold</strong></em> : A float value between (0.00 - 1.00) for which you want to classify similarity and non-similarity. Recommended Value : 0.65, which is also the default value for this variable.</li>\n</ul>\n<p><em><strong>Functionality</strong></em> :</p>\n<ul>\n<li>Applies the threshold to filter out the records that have <strong>similarity_score &lt;= Similarity Treshold</strong>, from the dataframe returned by the function <code>fuzzy_match_output</code>.</li>\n</ul>\n<p><em><strong>Output</strong></em> :</p>\n<ul>\n<li>List of items from the input list that have similarity scores &lt;= threshold when compared against all the reference list items</li>\n</ul>\n<p>Below is the output of the function <code>dissimilar_input_items</code> when applied on the input, reference list items used above.</p>\n<pre><code>ALERT : Input list items that are way too different from the reference list items are :  ['Superstar', 'Soccer', 'Mbappe']\n</code></pre>\n<hr>\n<h5>Thank You. Will try to add more functions to this package whenever possible.</h5>\n\n          </div>"}, "last_serial": 6316427, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "554a4d5223a6ca13f79b2e54fd900702", "sha256": "bbfef25db1f9ee113897fbee08088c6ad4252d68d1f917c83646ca6b3bd8d32b"}, "downloads": -1, "filename": "two_lists_similarity-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "554a4d5223a6ca13f79b2e54fd900702", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6249, "upload_time": "2019-12-16T11:16:57", "upload_time_iso_8601": "2019-12-16T11:16:57.833867Z", "url": "https://files.pythonhosted.org/packages/c8/3b/731ef4bba20e56be90343340624f596b8ed2a132ce0223b1b7b216581175/two_lists_similarity-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d98b8292b0849cfaf10ab2b939a79dd", "sha256": "319050f84b4dcfc5b83bbf6d894dd15ae12fcc41a4839fb0ba5d481fb55ecca9"}, "downloads": -1, "filename": "two_lists_similarity-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5d98b8292b0849cfaf10ab2b939a79dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5014, "upload_time": "2019-12-16T11:17:00", "upload_time_iso_8601": "2019-12-16T11:17:00.325604Z", "url": "https://files.pythonhosted.org/packages/73/53/4cdf71b33a5ad4d816a836a9ef8f7996cb646de67e9527bf9017d490ea59/two_lists_similarity-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "fd60610cc2cc5f8efd36813229a61a50", "sha256": "ab6e0641754ccbd52221331c4f3500bd08888ebb71e8efdc3574bc35b6755bb4"}, "downloads": -1, "filename": "two_lists_similarity-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fd60610cc2cc5f8efd36813229a61a50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6248, "upload_time": "2019-12-16T11:31:47", "upload_time_iso_8601": "2019-12-16T11:31:47.439000Z", "url": "https://files.pythonhosted.org/packages/f7/02/39942e214f0287695761ce477420eea023575303e0409d11bde9121a5842/two_lists_similarity-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b03ad46f8468a4327106e344e9e5a9c", "sha256": "631d5019909ffacd192fbd332f4ed909b8ea6104a8bedb50acc2d3f99113fa2e"}, "downloads": -1, "filename": "two_lists_similarity-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0b03ad46f8468a4327106e344e9e5a9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5033, "upload_time": "2019-12-16T11:31:49", "upload_time_iso_8601": "2019-12-16T11:31:49.634811Z", "url": "https://files.pythonhosted.org/packages/44/ac/3e9628d0cb62b7397a5e6700f8a6881556050b2debe9a3456a8450c4022c/two_lists_similarity-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "527d442919ef551e538f4e2e637e3a93", "sha256": "c220b0b8fbf1a30a6ba0beaac02aad3b4ee97ae34cda19fcb8aa13ec7fe0ec6c"}, "downloads": -1, "filename": "two_lists_similarity-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "527d442919ef551e538f4e2e637e3a93", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6252, "upload_time": "2019-12-16T12:17:31", "upload_time_iso_8601": "2019-12-16T12:17:31.860201Z", "url": "https://files.pythonhosted.org/packages/45/df/0d3fc3404df338cf7a432ea7852f4e633d50de1f35952645c2fe14d785de/two_lists_similarity-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f6dfb1aa3f1c727c96de99140692a42", "sha256": "33512c7c7c880027589cb60930e08cc698b00b0432200e43ec37394b6a8ad77b"}, "downloads": -1, "filename": "two_lists_similarity-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1f6dfb1aa3f1c727c96de99140692a42", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5035, "upload_time": "2019-12-16T12:17:34", "upload_time_iso_8601": "2019-12-16T12:17:34.728961Z", "url": "https://files.pythonhosted.org/packages/fd/66/b7b582d38a0d37d4556be78ceca2e4dc04b5b9c6f5e78c1de57b0adc3016/two_lists_similarity-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "ebf1fdda16eddd3c8f16388900c14d2c", "sha256": "8fb217ffe7a617408d31739e1ab3dd248a2594247ee09c8800f4093b03b3623e"}, "downloads": -1, "filename": "two_lists_similarity-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ebf1fdda16eddd3c8f16388900c14d2c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6234, "upload_time": "2019-12-16T12:19:15", "upload_time_iso_8601": "2019-12-16T12:19:15.576610Z", "url": "https://files.pythonhosted.org/packages/0e/7a/529b541c9fb807c18ca916a3b573f7b579b60d79cb2383d0377bb9c2fc8e/two_lists_similarity-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6296fa4d7d0f553dd4ced2baa1c35293", "sha256": "c28b14a32c69e29e2dcaf12a3c965bf26ed91b66428e299cfbc7d28b657b07ac"}, "downloads": -1, "filename": "two_lists_similarity-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6296fa4d7d0f553dd4ced2baa1c35293", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4999, "upload_time": "2019-12-16T12:19:20", "upload_time_iso_8601": "2019-12-16T12:19:20.895879Z", "url": "https://files.pythonhosted.org/packages/6e/a1/1fde9913d183e8177cc7724ee26698e780ce97ab28aa5cca1731922d534a/two_lists_similarity-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "96fb97e514e371bebf215d66df73211c", "sha256": "af47c8e7df894a0ed119bb5d03e14bfd033c35e99946d2bcd15134b94758e5df"}, "downloads": -1, "filename": "two_lists_similarity-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "96fb97e514e371bebf215d66df73211c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6260, "upload_time": "2019-12-17T10:16:18", "upload_time_iso_8601": "2019-12-17T10:16:18.078786Z", "url": "https://files.pythonhosted.org/packages/3b/e3/d84af65c4081aa679285ce38b54525ab7a17bba1da2d6a9660553fc73e52/two_lists_similarity-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c4bed1777d6f0692a741a1e430eb159", "sha256": "f2a72793848c5e55469382631797e6bf0a6a2fa40a9f693510366c6437a5e421"}, "downloads": -1, "filename": "two_lists_similarity-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5c4bed1777d6f0692a741a1e430eb159", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5034, "upload_time": "2019-12-17T10:16:23", "upload_time_iso_8601": "2019-12-17T10:16:23.005158Z", "url": "https://files.pythonhosted.org/packages/7f/29/4902ba3d139deae6f0b59f36f3be9505c6a86f91371b981581ea4dcb0ef0/two_lists_similarity-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96fb97e514e371bebf215d66df73211c", "sha256": "af47c8e7df894a0ed119bb5d03e14bfd033c35e99946d2bcd15134b94758e5df"}, "downloads": -1, "filename": "two_lists_similarity-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "96fb97e514e371bebf215d66df73211c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6260, "upload_time": "2019-12-17T10:16:18", "upload_time_iso_8601": "2019-12-17T10:16:18.078786Z", "url": "https://files.pythonhosted.org/packages/3b/e3/d84af65c4081aa679285ce38b54525ab7a17bba1da2d6a9660553fc73e52/two_lists_similarity-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c4bed1777d6f0692a741a1e430eb159", "sha256": "f2a72793848c5e55469382631797e6bf0a6a2fa40a9f693510366c6437a5e421"}, "downloads": -1, "filename": "two_lists_similarity-0.0.5.tar.gz", "has_sig": false, "md5_digest": "5c4bed1777d6f0692a741a1e430eb159", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5034, "upload_time": "2019-12-17T10:16:23", "upload_time_iso_8601": "2019-12-17T10:16:23.005158Z", "url": "https://files.pythonhosted.org/packages/7f/29/4902ba3d139deae6f0b59f36f3be9505c6a86f91371b981581ea4dcb0ef0/two_lists_similarity-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:27 2020"}