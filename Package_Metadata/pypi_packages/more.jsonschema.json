{"info": {"author": "Henri Hulski", "author_email": "henri.hulski@gazeta.pl", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy"], "description": "more.jsonschema: JSON Schema support for Morepath\n=================================================\n\nThis package provides Morepath integration for `JSON Schema`_,\nimplemented with jsonschema_:\n\n.. _JSON Schema: http://json-schema.org\n.. _jsonschema: https://python-jsonschema.readthedocs.io/en/latest\n\nJSON Schema can automate user input validation in a HTTP API.\n\n\nSchema\n------\n\nThe JSON schema need to be load into a Python dict\n(you can use ``json.load()``):\n\n.. code-block:: python\n\n  user_schema = {\n      'type': 'object',\n      'properties': {\n          'name': {\n              'type': 'string',\n              'minLength': 3\n          },\n          'age': {\n              'type': 'integer',\n              'minimum': 10\n          }\n      },\n      'required': ['name', 'age']\n  }\n\nIf you want to define JSON schemas in Python, you can use jsl_ for instance.\n\n.. _jsl: http://jsl.readthedocs.io/en/latest\n\n\nValidate\n--------\n\nThe ``more.jsonschema`` integration helps\nwith validation of the request body as it is POSTed to a view.\nFirst we must create a loader for our schema:\n\n.. code-block:: python\n\n  from more.jsonschema import loader\n\n  user_schema_load = loader(user_schema)\n\nWe can use this loader to handle a POST request for instance:\n\n.. code-block:: python\n\n  @App.json(model=User, request_method='POST', load=user_schema_load)\n  def user_post(self, request, json):\n      # json is now a validated and normalized dict of whatever got\n      # POST onto this view that you can use to update\n      # self\n\n\nCustomize the Validator\n-----------------------\n\nBy default ``more.jsonschema`` uses the ``Draft7Validator``.\nBut you can also use ``Draft3Validator``, ``Draft4Validator`` or ``Draft6Validator``.\nYou can even create your own Validator or extend an existent one.\nJust pass the Validator to the ``loader``:\n\n.. code-block:: python\n\n  from jsonschema import Draft4Validator\n  from more.jsonschema import loader\n\n    user_schema_load = loader(user_schema, validator=Draft4Validator)\n\nMore information about creating or extending Validator classes\nyou can find in the `jsonschema documentation`_.\n\n.. _jsonschema documentation:\n  https://python-jsonschema.readthedocs.io/en/latest/creating\n\n\nError handling\n--------------\n\nIf validation fails due to a validation error (a required field is\nmissing, or a field is of the wrong datatype, for instance), you want\nto show some kind of error message. The ``load`` function created by\n``more.jsonschema`` raise the ``more.jsonschema.ValidationError`` exception\nin case of errors.\n\nThis exception object has an ``errors`` attribute with the validation errors.\nYou must define an exception view for it, otherwise validation errors are\nreturned as \"500 internal server error\" to API users.\n\nThis package provides a default exception view implementation. If you subclass\nyour application from ``more.jsonschema.JsonSchemaApp`` then you get a default\nerror view for ``ValidationError`` that has a 422 status code with an error\nmessage:\n\n.. code-block:: python\n\n  from more.jsonschema import JsonSchemaApp\n\n  class App(JsonSchemaApp):\n      pass\n\nNow your app has reasonable error handling built-in.\n\n\nCHANGES\n*******\n\n0.2 (2020-04-26)\n================\n\n- **Removed**: Removed support for Python 2 and Python 3.4 and 3.5.\n\n  You have to upgrade to Python 3 if you want to use this version.\n\n- Added support for Python 3.6, 3.7 and 3.8 and PyPy 3.6.\n\n- Make Python 3.7 the default testing environment.\n\n- Upgrade jsonschema to version 3.2.0.\n\n- Make JSON Schema Draft 7 the default validator.\n\n- Add integration for the Black code formatter.\n\n\n0.1 (2017-03-17)\n================\n\n* initial public release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/morepath/more.jsonschema", "keywords": "morepath validation", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "more.jsonschema", "package_url": "https://pypi.org/project/more.jsonschema/", "platform": "", "project_url": "https://pypi.org/project/more.jsonschema/", "project_urls": {"Homepage": "https://github.com/morepath/more.jsonschema"}, "release_url": "https://pypi.org/project/more.jsonschema/0.2/", "requires_dist": ["morepath (>=0.19)", "jsonschema (>=3.2.0)", "pytest-cov ; extra == 'coverage'", "flake8 ; extra == 'pep8'", "black ; extra == 'pep8'", "pytest (>=2.9.1) ; extra == 'test'", "pytest-remove-stale-bytecode ; extra == 'test'", "webtest ; extra == 'test'"], "requires_python": "", "summary": "JSON Schema support for Morepath", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"more-jsonschema-json-schema-support-for-morepath\">\n<h2>more.jsonschema: JSON Schema support for Morepath</h2>\n<p>This package provides Morepath integration for <a href=\"http://json-schema.org\" rel=\"nofollow\">JSON Schema</a>,\nimplemented with <a href=\"https://python-jsonschema.readthedocs.io/en/latest\" rel=\"nofollow\">jsonschema</a>:</p>\n<p>JSON Schema can automate user input validation in a HTTP API.</p>\n<div id=\"schema\">\n<h3>Schema</h3>\n<p>The JSON schema need to be load into a Python dict\n(you can use <tt>json.load()</tt>):</p>\n<pre><span class=\"n\">user_schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'minLength'</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'integer'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'minimum'</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If you want to define JSON schemas in Python, you can use <a href=\"http://jsl.readthedocs.io/en/latest\" rel=\"nofollow\">jsl</a> for instance.</p>\n</div>\n<div id=\"validate\">\n<h3>Validate</h3>\n<p>The <tt>more.jsonschema</tt> integration helps\nwith validation of the request body as it is POSTed to a view.\nFirst we must create a loader for our schema:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"n\">user_schema_load</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">user_schema</span><span class=\"p\">)</span>\n</pre>\n<p>We can use this loader to handle a POST request for instance:</p>\n<pre><span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">load</span><span class=\"o\">=</span><span class=\"n\">user_schema_load</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"p\">):</span>\n    <span class=\"c1\"># json is now a validated and normalized dict of whatever got</span>\n    <span class=\"c1\"># POST onto this view that you can use to update</span>\n    <span class=\"c1\"># self</span>\n</pre>\n</div>\n<div id=\"customize-the-validator\">\n<h3>Customize the Validator</h3>\n<p>By default <tt>more.jsonschema</tt> uses the <tt>Draft7Validator</tt>.\nBut you can also use <tt>Draft3Validator</tt>, <tt>Draft4Validator</tt> or <tt>Draft6Validator</tt>.\nYou can even create your own Validator or extend an existent one.\nJust pass the Validator to the <tt>loader</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">Draft4Validator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">more.jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n  <span class=\"n\">user_schema_load</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"p\">(</span><span class=\"n\">user_schema</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">Draft4Validator</span><span class=\"p\">)</span>\n</pre>\n<p>More information about creating or extending Validator classes\nyou can find in the <a href=\"https://python-jsonschema.readthedocs.io/en/latest/creating\" rel=\"nofollow\">jsonschema documentation</a>.</p>\n</div>\n<div id=\"error-handling\">\n<h3>Error handling</h3>\n<p>If validation fails due to a validation error (a required field is\nmissing, or a field is of the wrong datatype, for instance), you want\nto show some kind of error message. The <tt>load</tt> function created by\n<tt>more.jsonschema</tt> raise the <tt>more.jsonschema.ValidationError</tt> exception\nin case of errors.</p>\n<p>This exception object has an <tt>errors</tt> attribute with the validation errors.\nYou must define an exception view for it, otherwise validation errors are\nreturned as \u201c500 internal server error\u201d to API users.</p>\n<p>This package provides a default exception view implementation. If you subclass\nyour application from <tt>more.jsonschema.JsonSchemaApp</tt> then you get a default\nerror view for <tt>ValidationError</tt> that has a 422 status code with an error\nmessage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.jsonschema</span> <span class=\"kn\">import</span> <span class=\"n\">JsonSchemaApp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">JsonSchemaApp</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Now your app has reasonable error handling built-in.</p>\n<div id=\"changes\">\n<h4>CHANGES</h4>\n</div>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.2 (2020-04-26)</h2>\n<ul>\n<li><p><strong>Removed</strong>: Removed support for Python 2 and Python 3.4 and 3.5.</p>\n<p>You have to upgrade to Python 3 if you want to use this version.</p>\n</li>\n<li><p>Added support for Python 3.6, 3.7 and 3.8 and PyPy 3.6.</p>\n</li>\n<li><p>Make Python 3.7 the default testing environment.</p>\n</li>\n<li><p>Upgrade jsonschema to version 3.2.0.</p>\n</li>\n<li><p>Make JSON Schema Draft 7 the default validator.</p>\n</li>\n<li><p>Add integration for the Black code formatter.</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.1 (2017-03-17)</h2>\n<ul>\n<li>initial public release.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7104859, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "88fe477478b1403174ea988bd0469797", "sha256": "26065ba2af83e5d6daead7db27f1413ced3a13705b78e481811b683179dbbc83"}, "downloads": -1, "filename": "more.jsonschema-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "88fe477478b1403174ea988bd0469797", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7799, "upload_time": "2017-03-17T18:35:49", "upload_time_iso_8601": "2017-03-17T18:35:49.480084Z", "url": "https://files.pythonhosted.org/packages/d0/7a/4a2d6ac6451c3ab8fbc13e9346c5c32ed6c72a0dd198b8d737aafb26b5b9/more.jsonschema-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "785274ef3a7c32f59e7cd59b6f7ddead", "sha256": "f8f202920f96825d350e9f07f90b8c7fa59de35208758e9bcc44132efa9d86e2"}, "downloads": -1, "filename": "more.jsonschema-0.1.tar.gz", "has_sig": false, "md5_digest": "785274ef3a7c32f59e7cd59b6f7ddead", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5525, "upload_time": "2017-03-17T18:35:57", "upload_time_iso_8601": "2017-03-17T18:35:57.502908Z", "url": "https://files.pythonhosted.org/packages/af/f9/f25aa52f1205468322e764d62de55aaf12de61016b7ab0ae54c630a710f7/more.jsonschema-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f4cc80bd4833c1eefd9e07357658151b", "sha256": "560b7e35e1e5982a097ca254ec06ee595c1fdbfe110a60092a10f2475ed3ae67"}, "downloads": -1, "filename": "more.jsonschema-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f4cc80bd4833c1eefd9e07357658151b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6823, "upload_time": "2020-04-26T12:50:45", "upload_time_iso_8601": "2020-04-26T12:50:45.761680Z", "url": "https://files.pythonhosted.org/packages/16/7c/f850583599a01ebe2f0fc6c98fc4a4c0167c65ef156ca0279962905fcece/more.jsonschema-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4484f7e52951ad5b86a5311d83203399", "sha256": "d2e2b23fa78940f8897947847930adc6bb2a76e905a905529397184e582c5657"}, "downloads": -1, "filename": "more.jsonschema-0.2.tar.gz", "has_sig": false, "md5_digest": "4484f7e52951ad5b86a5311d83203399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6113, "upload_time": "2020-04-26T12:50:47", "upload_time_iso_8601": "2020-04-26T12:50:47.563637Z", "url": "https://files.pythonhosted.org/packages/16/06/a59832bbabe632916f6868c3e93a441708d27025b8be044cbecbf485abcd/more.jsonschema-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4cc80bd4833c1eefd9e07357658151b", "sha256": "560b7e35e1e5982a097ca254ec06ee595c1fdbfe110a60092a10f2475ed3ae67"}, "downloads": -1, "filename": "more.jsonschema-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f4cc80bd4833c1eefd9e07357658151b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6823, "upload_time": "2020-04-26T12:50:45", "upload_time_iso_8601": "2020-04-26T12:50:45.761680Z", "url": "https://files.pythonhosted.org/packages/16/7c/f850583599a01ebe2f0fc6c98fc4a4c0167c65ef156ca0279962905fcece/more.jsonschema-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4484f7e52951ad5b86a5311d83203399", "sha256": "d2e2b23fa78940f8897947847930adc6bb2a76e905a905529397184e582c5657"}, "downloads": -1, "filename": "more.jsonschema-0.2.tar.gz", "has_sig": false, "md5_digest": "4484f7e52951ad5b86a5311d83203399", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6113, "upload_time": "2020-04-26T12:50:47", "upload_time_iso_8601": "2020-04-26T12:50:47.563637Z", "url": "https://files.pythonhosted.org/packages/16/06/a59832bbabe632916f6868c3e93a441708d27025b8be044cbecbf485abcd/more.jsonschema-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:50 2020"}