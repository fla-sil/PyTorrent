{"info": {"author": "beda.software", "author_email": "fhirpy@beda.software", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/beda-software/aidbox-py.svg?branch=master)](https://travis-ci.org/beda-software/aidbox-py)\n[![codecov](https://codecov.io/gh/beda-software/aidbox-py/branch/master/graph/badge.svg)](https://codecov.io/gh/beda-software/aidbox-py)\n[![pypi](https://img.shields.io/pypi/v/aidbox.svg)](https://pypi.python.org/pypi/aidbox)\n\n# aidbox-py\nAidbox client for python.\nThis package provides an API for CRUD operations over Aidbox resources.\n\nThe library is based on [fhir-py](https://github.com/beda-software/fhir-py) and the main difference between libraries in our case is the way they represent resource references (read more about [differences](https://docs.aidbox.app/basic-concepts/aidbox-and-fhir-formats)).\n\nAidbox-py also going to support some Aidbox features like _assoc operation, AidboxQuery and so on.\n\nMost examples from [fhir-py readme](https://github.com/beda-software/fhir-py/blob/master/README.md) also work for aidbox-py (but you need to replace FHIR client with AsyncAidboxClient/SyncAidboxClient). See base aidbox-py example below.\n\n\n# Getting started\n## Install\nMost recent version:\n`pip install git+https://github.com/beda-software/aidbox-py.git`\nPyPi:\n`pip install aidbox`\n\n## Async example\n```Python\nimport asyncio\nfrom aidboxpy import AsyncAidboxClient\nfrom fhirpy.base.exceptions import (\n    OperationOutcome, ResourceNotFound, MultipleResourcesFound\n)\n\n\nasync def main():\n    # Create an instance\n    client = AsyncAidboxClient(\n        'http://localhost:8080',\n        authorization='Bearer TOKEN'\n    )\n\n    # Search for patients\n    resources = client.resources('Patient')  # Return lazy search set\n    resources = resources.search(name='John').limit(10).page(2).sort('name')\n    patients = await resources.fetch()  # Returns a list of AsyncAidboxResource\n\n    # Get exactly one resource\n    try:\n        patient = await client.resources('Practitioner') \\\n            .search(id='id').get()\n    except ResourceNotFound:\n        pass\n    except MultipleResourcesFound:\n        pass\n\n    # Validate resource\n    try:\n        await client.resource(\n            'Person',\n            custom_prop='123',\n            telecom=True\n        ).is_valid()\n    except OperationOutcome as e:\n        print('Error: {}'.format(e))\n\n    # Create Organization resource\n    organization = client.resource(\n        'Organization',\n        name='beda.software',\n        active=False\n    )\n    await organization.save()\n\n    # Get patient resource by reference and delete\n    patient_ref = client.reference('Patient', 'new_patient')\n    patient_res = await patient_ref.to_resource()\n    await patient_res.delete()\n\n    # Iterate over search set and change organization\n    org_resources = client.resources('Organization').search(active=False)\n    async for org_resource in org_resources:\n        org_resource['active'] = True\n        await org_resource.save()\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n\n# API\nImport library:\n\n`from aidboxpy import SyncAidboxClient`\n\nor\n\n`from aidboxpy import AsyncAidboxClient`\n\nTo create AidboxClient instance use:\n\n`SyncAidboxClient(url, authorization='', extra_headers={})`\n\nor\n\n`AsyncAidboxClient(url, authorization='', extra_headers={})`\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `SyncAidboxReference`/`AsyncAidboxReference` to the resource\n* .resource(resource_type, **kwargs) - returns `SyncAidboxResource`/`AsyncAidboxResource` which described below\n* .resources(resource_type) - returns `SyncAidboxSearchSet`/`AsyncAidboxSearchSet`\n\n`SyncAidboxResource`/`AsyncAidboxResource`\n\nprovides:\n* .serialize() - serializes resource\n* .get_by_path(path, default=None) \u2013 gets the value at path of resource\n* .save() - creates or updates resource instance\n* .delete() - deletes resource instance\n* .to_reference(**kwargs) - returns  `SyncAidboxReference`/`AsyncAidboxReference` for this resource\n\n`SyncAidboxReference`/`AsyncAidboxReference`\n\nprovides:\n* .to_resource() - returns `SyncAidboxResource`/`AsyncAidboxResource` for this reference\n\n`SyncAidboxSearchSet`/`AsyncAidboxSearchSet`\n\nprovides:\n* .search(param=value)\n* .limit(count)\n* .page(page)\n* .sort(*args)\n* .elements(*args, exclude=False)\n* .include(resource_type, attr=None, recursive=False, iterate=False)\n* .revinclude(resource_type, attr=None, recursive=False, iterate=False)\n* .has(*args, **kwargs)\n* .assoc(elements)\n* `async` .fetch() - makes query to the server and returns a list of `Resource` filtered by resource type\n* `async` .fetch_all() - makes query to the server and returns a full list of `Resource` filtered by resource type\n* `async` .fetch_raw() - makes query to the server and returns a raw Bundle `Resource`\n* `async` .first() - returns `Resource` or None\n* `async` .get(id=None) - returns `Resource` or raises `ResourceNotFound` when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)\n* `async` .count() - makes query to the server and returns the total number of resources that match the SearchSet\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/beda-software/aidbox-py", "keywords": "aidbox", "license": "", "maintainer": "", "maintainer_email": "", "name": "aidboxpy", "package_url": "https://pypi.org/project/aidboxpy/", "platform": "", "project_url": "https://pypi.org/project/aidboxpy/", "project_urls": {"Homepage": "http://github.com/beda-software/aidbox-py"}, "release_url": "https://pypi.org/project/aidboxpy/1.1.0/", "requires_dist": ["fhirpy (==1.1.0)"], "requires_python": "", "summary": "Aidbox client for python", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/beda-software/aidbox-py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98cf1b00e5f316b293a3b12525ec0e39a2a5e1be/68747470733a2f2f7472617669732d63692e6f72672f626564612d736f6674776172652f616964626f782d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/beda-software/aidbox-py\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43b786e39bddc5e09ce742cacb85ddf40414e117/68747470733a2f2f636f6465636f762e696f2f67682f626564612d736f6674776172652f616964626f782d70792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aidbox\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c04ff89c83aaac2cad9bcb51773fe3109bd779bb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616964626f782e737667\"></a></p>\n<h1>aidbox-py</h1>\n<p>Aidbox client for python.\nThis package provides an API for CRUD operations over Aidbox resources.</p>\n<p>The library is based on <a href=\"https://github.com/beda-software/fhir-py\" rel=\"nofollow\">fhir-py</a> and the main difference between libraries in our case is the way they represent resource references (read more about <a href=\"https://docs.aidbox.app/basic-concepts/aidbox-and-fhir-formats\" rel=\"nofollow\">differences</a>).</p>\n<p>Aidbox-py also going to support some Aidbox features like _assoc operation, AidboxQuery and so on.</p>\n<p>Most examples from <a href=\"https://github.com/beda-software/fhir-py/blob/master/README.md\" rel=\"nofollow\">fhir-py readme</a> also work for aidbox-py (but you need to replace FHIR client with AsyncAidboxClient/SyncAidboxClient). See base aidbox-py example below.</p>\n<h1>Getting started</h1>\n<h2>Install</h2>\n<p>Most recent version:\n<code>pip install git+https://github.com/beda-software/aidbox-py.git</code>\nPyPi:\n<code>pip install aidbox</code></p>\n<h2>Async example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aidboxpy</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncAidboxClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fhirpy.base.exceptions</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">OperationOutcome</span><span class=\"p\">,</span> <span class=\"n\">ResourceNotFound</span><span class=\"p\">,</span> <span class=\"n\">MultipleResourcesFound</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Create an instance</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">AsyncAidboxClient</span><span class=\"p\">(</span>\n        <span class=\"s1\">'http://localhost:8080'</span><span class=\"p\">,</span>\n        <span class=\"n\">authorization</span><span class=\"o\">=</span><span class=\"s1\">'Bearer TOKEN'</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Search for patients</span>\n    <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">)</span>  <span class=\"c1\"># Return lazy search set</span>\n    <span class=\"n\">resources</span> <span class=\"o\">=</span> <span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span>\n    <span class=\"n\">patients</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns a list of AsyncAidboxResource</span>\n\n    <span class=\"c1\"># Get exactly one resource</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">patient</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Practitioner'</span><span class=\"p\">)</span> \\\n            <span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">ResourceNotFound</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">MultipleResourcesFound</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Validate resource</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span>\n            <span class=\"s1\">'Person'</span><span class=\"p\">,</span>\n            <span class=\"n\">custom_prop</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">,</span>\n            <span class=\"n\">telecom</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">OperationOutcome</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Error: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Create Organization resource</span>\n    <span class=\"n\">organization</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Organization'</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'beda.software'</span><span class=\"p\">,</span>\n        <span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">organization</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Get patient resource by reference and delete</span>\n    <span class=\"n\">patient_ref</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">reference</span><span class=\"p\">(</span><span class=\"s1\">'Patient'</span><span class=\"p\">,</span> <span class=\"s1\">'new_patient'</span><span class=\"p\">)</span>\n    <span class=\"n\">patient_res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">patient_ref</span><span class=\"o\">.</span><span class=\"n\">to_resource</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">patient_res</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Iterate over search set and change organization</span>\n    <span class=\"n\">org_resources</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"p\">(</span><span class=\"s1\">'Organization'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">org_resource</span> <span class=\"ow\">in</span> <span class=\"n\">org_resources</span><span class=\"p\">:</span>\n        <span class=\"n\">org_resource</span><span class=\"p\">[</span><span class=\"s1\">'active'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">await</span> <span class=\"n\">org_resource</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h1>API</h1>\n<p>Import library:</p>\n<p><code>from aidboxpy import SyncAidboxClient</code></p>\n<p>or</p>\n<p><code>from aidboxpy import AsyncAidboxClient</code></p>\n<p>To create AidboxClient instance use:</p>\n<p><code>SyncAidboxClient(url, authorization='', extra_headers={})</code></p>\n<p>or</p>\n<p><code>AsyncAidboxClient(url, authorization='', extra_headers={})</code></p>\n<p>Returns an instance of the connection to the server which provides:</p>\n<ul>\n<li>.reference(resource_type, id, reference, **kwargs) - returns <code>SyncAidboxReference</code>/<code>AsyncAidboxReference</code> to the resource</li>\n<li>.resource(resource_type, **kwargs) - returns <code>SyncAidboxResource</code>/<code>AsyncAidboxResource</code> which described below</li>\n<li>.resources(resource_type) - returns <code>SyncAidboxSearchSet</code>/<code>AsyncAidboxSearchSet</code></li>\n</ul>\n<p><code>SyncAidboxResource</code>/<code>AsyncAidboxResource</code></p>\n<p>provides:</p>\n<ul>\n<li>.serialize() - serializes resource</li>\n<li>.get_by_path(path, default=None) \u2013 gets the value at path of resource</li>\n<li>.save() - creates or updates resource instance</li>\n<li>.delete() - deletes resource instance</li>\n<li>.to_reference(**kwargs) - returns  <code>SyncAidboxReference</code>/<code>AsyncAidboxReference</code> for this resource</li>\n</ul>\n<p><code>SyncAidboxReference</code>/<code>AsyncAidboxReference</code></p>\n<p>provides:</p>\n<ul>\n<li>.to_resource() - returns <code>SyncAidboxResource</code>/<code>AsyncAidboxResource</code> for this reference</li>\n</ul>\n<p><code>SyncAidboxSearchSet</code>/<code>AsyncAidboxSearchSet</code></p>\n<p>provides:</p>\n<ul>\n<li>.search(param=value)</li>\n<li>.limit(count)</li>\n<li>.page(page)</li>\n<li>.sort(*args)</li>\n<li>.elements(*args, exclude=False)</li>\n<li>.include(resource_type, attr=None, recursive=False, iterate=False)</li>\n<li>.revinclude(resource_type, attr=None, recursive=False, iterate=False)</li>\n<li>.has(*args, **kwargs)</li>\n<li>.assoc(elements)</li>\n<li><code>async</code> .fetch() - makes query to the server and returns a list of <code>Resource</code> filtered by resource type</li>\n<li><code>async</code> .fetch_all() - makes query to the server and returns a full list of <code>Resource</code> filtered by resource type</li>\n<li><code>async</code> .fetch_raw() - makes query to the server and returns a raw Bundle <code>Resource</code></li>\n<li><code>async</code> .first() - returns <code>Resource</code> or None</li>\n<li><code>async</code> .get(id=None) - returns <code>Resource</code> or raises <code>ResourceNotFound</code> when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)</li>\n<li><code>async</code> .count() - makes query to the server and returns the total number of resources that match the SearchSet</li>\n</ul>\n\n          </div>"}, "last_serial": 6360443, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "8656a0d9e319f7eb672c084a31ac091f", "sha256": "997b2a82c00f04e35d82317cfa65b245ede9d529a8e139f958a40dec6a8ea143"}, "downloads": -1, "filename": "aidboxpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8656a0d9e319f7eb672c084a31ac091f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4977, "upload_time": "2019-12-26T04:53:37", "upload_time_iso_8601": "2019-12-26T04:53:37.224846Z", "url": "https://files.pythonhosted.org/packages/bc/15/b908004b8b4f6658bfe5c79db1f016a356ea69f4adf9b94e64d14d6311d2/aidboxpy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af327896d9b861dcec1ed98137d03635", "sha256": "cdc00c8951b827893970a434fcb557143d594d2345fdc86775d12c00ad722587"}, "downloads": -1, "filename": "aidboxpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "af327896d9b861dcec1ed98137d03635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5362, "upload_time": "2019-12-26T04:53:39", "upload_time_iso_8601": "2019-12-26T04:53:39.765515Z", "url": "https://files.pythonhosted.org/packages/ab/9e/efdcb2d1601ecc52ad38b932ed9b7dbc020841154fb7370846822cbf238f/aidboxpy-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8656a0d9e319f7eb672c084a31ac091f", "sha256": "997b2a82c00f04e35d82317cfa65b245ede9d529a8e139f958a40dec6a8ea143"}, "downloads": -1, "filename": "aidboxpy-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8656a0d9e319f7eb672c084a31ac091f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4977, "upload_time": "2019-12-26T04:53:37", "upload_time_iso_8601": "2019-12-26T04:53:37.224846Z", "url": "https://files.pythonhosted.org/packages/bc/15/b908004b8b4f6658bfe5c79db1f016a356ea69f4adf9b94e64d14d6311d2/aidboxpy-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af327896d9b861dcec1ed98137d03635", "sha256": "cdc00c8951b827893970a434fcb557143d594d2345fdc86775d12c00ad722587"}, "downloads": -1, "filename": "aidboxpy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "af327896d9b861dcec1ed98137d03635", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5362, "upload_time": "2019-12-26T04:53:39", "upload_time_iso_8601": "2019-12-26T04:53:39.765515Z", "url": "https://files.pythonhosted.org/packages/ab/9e/efdcb2d1601ecc52ad38b932ed9b7dbc020841154fb7370846822cbf238f/aidboxpy-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:09 2020"}