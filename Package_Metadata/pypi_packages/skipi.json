{"info": {"author": "Alexander Book", "author_email": "alexander.book@frm2.tum.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# skipi\nskipi is a library to easily define mathematical functions and apply various transforms on it. \n\nA function always consists of a domain and a map. Usually the domain is ommited since it's clear for the human what the domain is, however, not for the computer. \n\nThis library aims to combine the domain and the map into one Function object and offer multiple convenient operations on it.\n\n## Examples\n### Algebraic operations\nSupported features are: Addition, Subtraction, Multiplication, Division, Exponentiation, Composition\n```python\nimport numpy as np\nfrom skipi.function import Function\n\nf = Function(np.linspace(0, 10, 100), lambda x: 2+x)\ng = Function(f.get_domain(), lambda x: np.sin(x))\nh1, h2, h3, h4, h5, h6 = f+g, f-g, f*g, g/f, f.composeWith(g), f**g\n``` \n\n### Plotting\nA function is plotted using matplotlib calling plot(). If you want to plot multiple functions into one graph, simply use\n```python\ng.plot()  # does not draw the graph yet\nf.plot(show=True) # draws it\n```\n\n### Remeshing\nIf you want to re-mesh a function on a different domain/grid, you can use `remesh` or `vremesh`. \nThe method `remesh` assigns a new mesh, independent of the previous one.\n```python\nf = Function(np.linspace(0, 10, 10), lambda x: np.sin(x))\nf.remesh(np.linspace(0, 20, 1000))\n```\nHowever, if you want to restrict the domain, you can use `vremesh` which has a similar syntax as `slice` except that instead of indices we use values and it allows multiple slicing:\n```python\nf = Function(np.linspace(0, 10, 1000), lambda x: np.sin(x))\nf.vremesh((np.pi, 2*np.pi)) # domain is now restricted to [pi, 2pi]\nf.vremesh((None, 2*np.pi)) # domain is now restricted to [0, 2pi]\nf.vremesh((np.pi, None)) # domain is now restricted to [pi, 10]\nf.vremesh((0.5, 1.5), (2.0, 2.5)) # domain is now restricted to [0.5, 1.5] union [2.0, 2.5]\n```\n### Creating functions from data\nIf you don't have an analytical formulation of `y = f(x)`, but rather have y_i and x_i values, then you can create a function by interpolation. By default, linear interpolation is used.\n```python\nx_i = np.linspace(0, 10, 100)\ny_i = np.sin(x_i)\n\nf = Function.to_function(x_i, y_i)\nprint(f(0.1234)) # linearly interpolated, not sin(0.1234)!\n```\n\n### Integration\nCalculate the integral function of `f(x) = 5x`\n\n```python\nimport numpy as np\nfrom skipi.function import Function, Integral\n\nf = Function(np.linspace(0, 10, 100), lambda x: 5*x)\nF = Integral.from_function(f) # Integral function\nF.plot(show=True)\n```\n\n### Fourier transform\nCalculate the fourier transform (analytical fourier transform, not fft) of f(x) = exp(-x^2)\n\n```python\nfrom skipi.fourier import FourierTransform, InverseFourierTransform\n\nt_space, freq_space = np.linspace(-5, 5, 100), np.linspace(-10, 10, 100)\nf = Function(t_space, lambda x: np.exp(-x**2))\nF = FourierTransform.from_function(freq_space, f)\nf2 = InverseFourierTransform.from_function(t_space, F)\n\n# f2 should be equal to f\n(f-f2).plot(show=True)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TUM-E21-ThinFilms/skipi", "keywords": "scientific,mathematical transforms", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "skipi", "package_url": "https://pypi.org/project/skipi/", "platform": "", "project_url": "https://pypi.org/project/skipi/", "project_urls": {"Homepage": "https://github.com/TUM-E21-ThinFilms/skipi"}, "release_url": "https://pypi.org/project/skipi/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Intuitive package to easily work with mathematical functions", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>skipi</h1>\n<p>skipi is a library to easily define mathematical functions and apply various transforms on it.</p>\n<p>A function always consists of a domain and a map. Usually the domain is ommited since it's clear for the human what the domain is, however, not for the computer.</p>\n<p>This library aims to combine the domain and the map into one Function object and offer multiple convenient operations on it.</p>\n<h2>Examples</h2>\n<h3>Algebraic operations</h3>\n<p>Supported features are: Addition, Subtraction, Multiplication, Division, Exponentiation, Composition</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skipi.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">get_domain</span><span class=\"p\">(),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">h1</span><span class=\"p\">,</span> <span class=\"n\">h2</span><span class=\"p\">,</span> <span class=\"n\">h3</span><span class=\"p\">,</span> <span class=\"n\">h4</span><span class=\"p\">,</span> <span class=\"n\">h5</span><span class=\"p\">,</span> <span class=\"n\">h6</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">+</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">*</span><span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"o\">/</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">composeWith</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"o\">**</span><span class=\"n\">g</span>\n</pre>\n<h3>Plotting</h3>\n<p>A function is plotted using matplotlib calling plot(). If you want to plot multiple functions into one graph, simply use</p>\n<pre><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>  <span class=\"c1\"># does not draw the graph yet</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># draws it</span>\n</pre>\n<h3>Remeshing</h3>\n<p>If you want to re-mesh a function on a different domain/grid, you can use <code>remesh</code> or <code>vremesh</code>.\nThe method <code>remesh</code> assigns a new mesh, independent of the previous one.</p>\n<pre><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">remesh</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</pre>\n<p>However, if you want to restrict the domain, you can use <code>vremesh</code> which has a similar syntax as <code>slice</code> except that instead of indices we use values and it allows multiple slicing:</p>\n<pre><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vremesh</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span> <span class=\"c1\"># domain is now restricted to [pi, 2pi]</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vremesh</span><span class=\"p\">((</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">))</span> <span class=\"c1\"># domain is now restricted to [0, 2pi]</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vremesh</span><span class=\"p\">((</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span> <span class=\"c1\"># domain is now restricted to [pi, 10]</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">vremesh</span><span class=\"p\">((</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">))</span> <span class=\"c1\"># domain is now restricted to [0.5, 1.5] union [2.0, 2.5]</span>\n</pre>\n<h3>Creating functions from data</h3>\n<p>If you don't have an analytical formulation of <code>y = f(x)</code>, but rather have y_i and x_i values, then you can create a function by interpolation. By default, linear interpolation is used.</p>\n<pre><span class=\"n\">x_i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">y_i</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x_i</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"o\">.</span><span class=\"n\">to_function</span><span class=\"p\">(</span><span class=\"n\">x_i</span><span class=\"p\">,</span> <span class=\"n\">y_i</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mf\">0.1234</span><span class=\"p\">))</span> <span class=\"c1\"># linearly interpolated, not sin(0.1234)!</span>\n</pre>\n<h3>Integration</h3>\n<p>Calculate the integral function of <code>f(x) = 5x</code></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skipi.function</span> <span class=\"kn\">import</span> <span class=\"n\">Function</span><span class=\"p\">,</span> <span class=\"n\">Integral</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">Integral</span><span class=\"o\">.</span><span class=\"n\">from_function</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"c1\"># Integral function</span>\n<span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Fourier transform</h3>\n<p>Calculate the fourier transform (analytical fourier transform, not fft) of f(x) = exp(-x^2)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">skipi.fourier</span> <span class=\"kn\">import</span> <span class=\"n\">FourierTransform</span><span class=\"p\">,</span> <span class=\"n\">InverseFourierTransform</span>\n\n<span class=\"n\">t_space</span><span class=\"p\">,</span> <span class=\"n\">freq_space</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">t_space</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">FourierTransform</span><span class=\"o\">.</span><span class=\"n\">from_function</span><span class=\"p\">(</span><span class=\"n\">freq_space</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">InverseFourierTransform</span><span class=\"o\">.</span><span class=\"n\">from_function</span><span class=\"p\">(</span><span class=\"n\">t_space</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># f2 should be equal to f</span>\n<span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">-</span><span class=\"n\">f2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7130304, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2cc330dc125c06cd8ae1b1909df6d1bf", "sha256": "5f15040936dc8b5273138a7f19c4a8f39346e2b16ebd75b472d3fe0f4fe8bf6a"}, "downloads": -1, "filename": "skipi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2cc330dc125c06cd8ae1b1909df6d1bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12832, "upload_time": "2020-04-07T10:40:59", "upload_time_iso_8601": "2020-04-07T10:40:59.246091Z", "url": "https://files.pythonhosted.org/packages/1f/97/a7c0f3c321039f1621c974e3a51002b4bc8e930699768db5fcef80546993/skipi-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "67f6a2cf74355ae582b0a36f0d71da72", "sha256": "95b2ea301545afd99eb2b610779da1087eb08fd458ed02be25f4bbc43377607e"}, "downloads": -1, "filename": "skipi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "67f6a2cf74355ae582b0a36f0d71da72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14916, "upload_time": "2020-04-29T16:38:57", "upload_time_iso_8601": "2020-04-29T16:38:57.558096Z", "url": "https://files.pythonhosted.org/packages/22/51/23128d705492d7d24ce2c369df0bfa14cee25156d81d07f4728027049773/skipi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "67f6a2cf74355ae582b0a36f0d71da72", "sha256": "95b2ea301545afd99eb2b610779da1087eb08fd458ed02be25f4bbc43377607e"}, "downloads": -1, "filename": "skipi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "67f6a2cf74355ae582b0a36f0d71da72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14916, "upload_time": "2020-04-29T16:38:57", "upload_time_iso_8601": "2020-04-29T16:38:57.558096Z", "url": "https://files.pythonhosted.org/packages/22/51/23128d705492d7d24ce2c369df0bfa14cee25156d81d07f4728027049773/skipi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:03 2020"}