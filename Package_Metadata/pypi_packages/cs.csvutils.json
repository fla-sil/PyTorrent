{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20191118*:\nxl_import: make sheet_name parameter optional with useful default\n\nUtility functions for CSV files.\n\nIn python 2 the stdlib CSV reader reads 8 bit byte data and returns str objects;\nthese need to be decoded into unicode objects.\nIn python 3 the stdlib CSV reader reads an open text file and returns str\nobjects (== unicode).\nSo we provide `csv_reader()` generators to yield rows containing unicode.\n\n## Function `csv_import(fp, class_name=None, column_names=None, computed=None, preprocess=None, mixin=None, **kw)`\n\nRead CSV data where the first row contains column headers.\nReturns a row namedtuple factory and an iterable of instances.\n\nParameters:\n* `fp`: a file object containing CSV data, or the name of such a file\n* `class_name`: optional class name for the namedtuple subclass\n  used for the row data.\n* `column_names`: optional iterable of column headings; if\n  provided then the file is not expected to have internal column\n  headings\n* `computed`: optional keyword parameter providing a mapping\n  of str to functions of `self`; these strings are available\n  via __getitem__\n* `preprocess`: optional keyword parameter providing a callable\n  to modify CSV rows before they are converted into the namedtuple.\n  It receives a context object an the data row. It may return\n  the row (possibly modified), or None to drop the row.\n* `mixin`: an optional mixin class for the generated namedtuple subclass\n  to provide extra methods or properties\n\nAll other keyword paramaters are passed to csv_reader(). This\nis a very thin shim around `cs.mappings.named_column_tuples`.\n\nExamples:\n\n      >>> cls, rows = csv_import(['a, b', '1,2', '3,4'], class_name='Example_AB')\n      >>> cls     #doctest: +ELLIPSIS\n      <function named_row_tuple.<locals>.factory at ...>\n      >>> list(rows)\n      [Example_AB(a='1', b='2'), Example_AB(a='3', b='4')]\n\n      >>> cls, rows = csv_import(['1,2', '3,4'], class_name='Example_DEFG', column_names=['D E', 'F G '])\n      >>> list(rows)\n      [Example_DEFG(d_e='1', f_g='2'), Example_DEFG(d_e='3', f_g='4')]\n\n## Function `csv_reader(arg, *a, **kw)`\n\nRead the file `fp` using csv.reader.\n`fp` may also be a filename.\nYield the rows.\n\nWarning: _ignores_ the `encoding` and `errors` parameters\nbecause `fp` should already be decoded.\n\n## Function `csv_writerow(csvw, row, encoding='utf-8')`\n\nWrite the supplied row as strings encoded with the supplied `encoding`,\ndefault 'utf-8'.\n\n## Function `xl_import(workbook, sheet_name=None, skip_rows=0, **kw)`\n\nRead the named `sheet_name` from the Excel XLSX file named\n`filename` as for `csv_import`.\nReturns a row namedtuple factory and an iterable of instances.\n\nParameters:\n* `workbook`: Excel work book from which to load the sheet; if\n  this is a str then the work book is obtained from\n  openpyxl.load_workbook()\n* `sheet_name`: optional name of the work book sheet\n  whose data should be imported;\n  the default (`None`) selects the active worksheet\n\nOther keyword parameters are as for cs.mappings.named_column_tuples.\n\nNOTE: this function requires the `openpyxl` module to be available.\n\n\n\n# Release Log\n\n*Release 20191118*:\nxl_import: make sheet_name parameter optional with useful default\n\n*Release 20190103*:\nDocumentation updates.\n\n*Release 20180720*:\ncsv_import and xl_import function to load spreadsheet exports via cs.mappings.named_column_tuples.\n\n*Release 20170608*:\nRecode using new simpler cs.sharedfile.SharedAppendLines.\n\n*Release 20160828*:\nUpdate metadata with \"install_requires\" instead of \"requires\".\nPython 2 and 3 portability fixes.\nAssorted minor improvements.\n\n*Release 20150116*:\nInitial PyPI release.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python2,python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.csvutils", "package_url": "https://pypi.org/project/cs.csvutils/", "platform": "", "project_url": "https://pypi.org/project/cs.csvutils/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.csvutils/20191118/", "requires_dist": null, "requires_python": "", "summary": "CSV file related facilities", "version": "20191118", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Latest release 20191118</em>:\nxl_import: make sheet_name parameter optional with useful default</p>\n<p>Utility functions for CSV files.</p>\n<p>In python 2 the stdlib CSV reader reads 8 bit byte data and returns str objects;\nthese need to be decoded into unicode objects.\nIn python 3 the stdlib CSV reader reads an open text file and returns str\nobjects (== unicode).\nSo we provide <code>csv_reader()</code> generators to yield rows containing unicode.</p>\n<h2>Function <code>csv_import(fp, class_name=None, column_names=None, computed=None, preprocess=None, mixin=None, **kw)</code></h2>\n<p>Read CSV data where the first row contains column headers.\nReturns a row namedtuple factory and an iterable of instances.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>fp</code>: a file object containing CSV data, or the name of such a file</li>\n<li><code>class_name</code>: optional class name for the namedtuple subclass\nused for the row data.</li>\n<li><code>column_names</code>: optional iterable of column headings; if\nprovided then the file is not expected to have internal column\nheadings</li>\n<li><code>computed</code>: optional keyword parameter providing a mapping\nof str to functions of <code>self</code>; these strings are available\nvia <strong>getitem</strong></li>\n<li><code>preprocess</code>: optional keyword parameter providing a callable\nto modify CSV rows before they are converted into the namedtuple.\nIt receives a context object an the data row. It may return\nthe row (possibly modified), or None to drop the row.</li>\n<li><code>mixin</code>: an optional mixin class for the generated namedtuple subclass\nto provide extra methods or properties</li>\n</ul>\n<p>All other keyword paramaters are passed to csv_reader(). This\nis a very thin shim around <code>cs.mappings.named_column_tuples</code>.</p>\n<p>Examples:</p>\n<pre><code>  &gt;&gt;&gt; cls, rows = csv_import(['a, b', '1,2', '3,4'], class_name='Example_AB')\n  &gt;&gt;&gt; cls     #doctest: +ELLIPSIS\n  &lt;function named_row_tuple.&lt;locals&gt;.factory at ...&gt;\n  &gt;&gt;&gt; list(rows)\n  [Example_AB(a='1', b='2'), Example_AB(a='3', b='4')]\n\n  &gt;&gt;&gt; cls, rows = csv_import(['1,2', '3,4'], class_name='Example_DEFG', column_names=['D E', 'F G '])\n  &gt;&gt;&gt; list(rows)\n  [Example_DEFG(d_e='1', f_g='2'), Example_DEFG(d_e='3', f_g='4')]\n</code></pre>\n<h2>Function <code>csv_reader(arg, *a, **kw)</code></h2>\n<p>Read the file <code>fp</code> using csv.reader.\n<code>fp</code> may also be a filename.\nYield the rows.</p>\n<p>Warning: <em>ignores</em> the <code>encoding</code> and <code>errors</code> parameters\nbecause <code>fp</code> should already be decoded.</p>\n<h2>Function <code>csv_writerow(csvw, row, encoding='utf-8')</code></h2>\n<p>Write the supplied row as strings encoded with the supplied <code>encoding</code>,\ndefault 'utf-8'.</p>\n<h2>Function <code>xl_import(workbook, sheet_name=None, skip_rows=0, **kw)</code></h2>\n<p>Read the named <code>sheet_name</code> from the Excel XLSX file named\n<code>filename</code> as for <code>csv_import</code>.\nReturns a row namedtuple factory and an iterable of instances.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>workbook</code>: Excel work book from which to load the sheet; if\nthis is a str then the work book is obtained from\nopenpyxl.load_workbook()</li>\n<li><code>sheet_name</code>: optional name of the work book sheet\nwhose data should be imported;\nthe default (<code>None</code>) selects the active worksheet</li>\n</ul>\n<p>Other keyword parameters are as for cs.mappings.named_column_tuples.</p>\n<p>NOTE: this function requires the <code>openpyxl</code> module to be available.</p>\n<h1>Release Log</h1>\n<p><em>Release 20191118</em>:\nxl_import: make sheet_name parameter optional with useful default</p>\n<p><em>Release 20190103</em>:\nDocumentation updates.</p>\n<p><em>Release 20180720</em>:\ncsv_import and xl_import function to load spreadsheet exports via cs.mappings.named_column_tuples.</p>\n<p><em>Release 20170608</em>:\nRecode using new simpler cs.sharedfile.SharedAppendLines.</p>\n<p><em>Release 20160828</em>:\nUpdate metadata with \"install_requires\" instead of \"requires\".\nPython 2 and 3 portability fixes.\nAssorted minor improvements.</p>\n<p><em>Release 20150116</em>:\nInitial PyPI release.</p>\n\n          </div>"}, "last_serial": 6152507, "releases": {"20150116": [{"comment_text": "", "digests": {"md5": "e2e88c74be197038b687b597ae8543b1", "sha256": "7adae04fc96b7c5526a9830b8007bcb616db601137f9e5e093e6835b989b84cd"}, "downloads": -1, "filename": "cs.csvutils-20150116.tar.gz", "has_sig": false, "md5_digest": "e2e88c74be197038b687b597ae8543b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2508, "upload_time": "2015-01-18T06:14:43", "upload_time_iso_8601": "2015-01-18T06:14:43.785975Z", "url": "https://files.pythonhosted.org/packages/b7/5f/3915dd1db2690ae613fad3775662235db6111ebef17d0ca3831b54881436/cs.csvutils-20150116.tar.gz", "yanked": false}], "20160828": [{"comment_text": "", "digests": {"md5": "d88ecc1194127fda2fd4ad3a40a42216", "sha256": "7948fe9363ae83c88c7571412b0ead7f0b0906ae1d71acd9c96ebbff405bf138"}, "downloads": -1, "filename": "cs.csvutils-20160828.tar.gz", "has_sig": false, "md5_digest": "d88ecc1194127fda2fd4ad3a40a42216", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2942, "upload_time": "2016-08-28T06:04:08", "upload_time_iso_8601": "2016-08-28T06:04:08.463243Z", "url": "https://files.pythonhosted.org/packages/fe/0a/9d7f864ba83b2c34850390cb20e6f2d661a9a190df0611372f7d7f0f25b0/cs.csvutils-20160828.tar.gz", "yanked": false}], "20180720": [{"comment_text": "", "digests": {"md5": "e35c5684a8098827c95472c82e4d7b37", "sha256": "5e2fd17665b525247246cebd498ac214420a4958e7714c9f2f7fef6a775af0d7"}, "downloads": -1, "filename": "cs.csvutils-20180720.tar.gz", "has_sig": false, "md5_digest": "e35c5684a8098827c95472c82e4d7b37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3509, "upload_time": "2018-07-20T00:12:32", "upload_time_iso_8601": "2018-07-20T00:12:32.186028Z", "url": "https://files.pythonhosted.org/packages/13/77/4b72e89c332b45188f8d2ea4c9c6b915ed54845ec7583302da921fb2bb52/cs.csvutils-20180720.tar.gz", "yanked": false}], "20190103": [{"comment_text": "", "digests": {"md5": "e0afc685e505594f8905fc57a91401f1", "sha256": "3df8183b81c09430c666efce798feb2b2fdfbf7cb8cd23cd3f893c3a76a6fd1e"}, "downloads": -1, "filename": "cs.csvutils-20190103.tar.gz", "has_sig": false, "md5_digest": "e0afc685e505594f8905fc57a91401f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4109, "upload_time": "2019-01-02T22:26:23", "upload_time_iso_8601": "2019-01-02T22:26:23.059758Z", "url": "https://files.pythonhosted.org/packages/29/d9/cf6d2bac53737a86bf2a8cc0e24eeee3e446fa5b8c5182d96b82a732c7ac/cs.csvutils-20190103.tar.gz", "yanked": false}], "20191118": [{"comment_text": "", "digests": {"md5": "4b4b0213a56922bc4167d32e7f158c67", "sha256": "b72535f98ac396cd8db578d357a8b55fd6bc78fce18e21bda1ac66300fadaf74"}, "downloads": -1, "filename": "cs.csvutils-20191118.tar.gz", "has_sig": false, "md5_digest": "4b4b0213a56922bc4167d32e7f158c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5205, "upload_time": "2019-11-18T01:02:40", "upload_time_iso_8601": "2019-11-18T01:02:40.023346Z", "url": "https://files.pythonhosted.org/packages/de/19/2a9de2b1ef49a7556ac746409f706e369c90a7c813438260d1b2097f27c2/cs.csvutils-20191118.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b4b0213a56922bc4167d32e7f158c67", "sha256": "b72535f98ac396cd8db578d357a8b55fd6bc78fce18e21bda1ac66300fadaf74"}, "downloads": -1, "filename": "cs.csvutils-20191118.tar.gz", "has_sig": false, "md5_digest": "4b4b0213a56922bc4167d32e7f158c67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5205, "upload_time": "2019-11-18T01:02:40", "upload_time_iso_8601": "2019-11-18T01:02:40.023346Z", "url": "https://files.pythonhosted.org/packages/de/19/2a9de2b1ef49a7556ac746409f706e369c90a7c813438260d1b2097f27c2/cs.csvutils-20191118.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:51 2020"}