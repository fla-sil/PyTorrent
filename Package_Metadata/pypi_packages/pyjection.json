{"info": {"author": "Raphael Cohen", "author_email": "raphael.cohen.utt@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pyjection\r\n=========\r\n\r\n|Software License| |Build Status| |Code Coverage| |Code Quality|\r\n\r\nPyjection is a lightweight python dependency injection library\r\n\r\n\r\nBasic dependency injection\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe most import class is ``DependencyInjector`` which lets us register classes and retrieve instances.\r\n\r\n.. code:: python\r\n\r\n    from pyjection.dependency_injector import DependencyInjector\r\n\r\n    class OuterClass(object):\r\n\r\n        def __init__(self, inner_class):\r\n            self.inner_class = inner_class\r\n\r\n    class InnerClass(object):\r\n\r\n        def __init__(self):\r\n            self.foo = \"bar\"\r\n\r\n    container = DependencyInjector()\r\n    container.register(InnerClass)\r\n    container.register(OuterClass)\r\n\r\n    outer = container.get(\"outer_class\")\r\n    print(outer.inner_class.foo) # Will print \"bar\"\r\n\r\nClass bindings\r\n~~~~~~~~~~~~~~\r\n\r\nImplicit class bindings\r\n-----------------------\r\n\r\nWhen no id is specified in the ``register`` method Pyjection creates implicit bindings for classes.\r\nThe implicit bindings assume your code follows PEP8 conventions: your classes are named in ``CamelCase``,\r\nand your args are named in ``lower_with_underscores``.  Pinject transforms\r\nclass names to injectable arg names by lowercasing words and connecting them\r\nwith underscores.\r\n\r\n+-------------+-------------+\r\n| Class name  | Arg name    |\r\n+=============+=============+\r\n| ``Foo``     | ``foo``     |\r\n+-------------+-------------+\r\n| ``FooBar``  | ``foo_bar`` |\r\n+-------------+-------------+\r\n\r\nExplicit class bindings\r\n-----------------------\r\n\r\nIt is also possible to manually set the id of a class when during its registration by specifying it as a second arguments.\r\n\r\n.. code:: python\r\n\r\n    container.register(FooClass, \"inner_class\")\r\n\r\nWith the example above, ``FooClass`` will later be injected to arguments named ``inner_class``\r\n\r\nInstance retrieval\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nTo retrieve an instance of a class from the dependency injector 2 options are available in the ``get`` method:\r\n\r\n* Specify the ``lower_with_underscores`` name of the class as a string\r\n* Give the class as parameter\r\n\r\n.. code:: python\r\n\r\n    from pyjection.dependency_injector import DependencyInjector\r\n\r\n    class FooClass(object):\r\n        pass\r\n\r\n    container = DependencyInjector()\r\n    container.register(FooClass)\r\n\r\n    container.get(\"foo_class\")\r\n    # Same as\r\n    container.get(FooClass)\r\n\r\nSingleton injection\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nThe dependency injector lets us register a singleton. \r\nTo register a singleton the method register_singleton may be used.\r\nIt takes the same arguments as register.\r\n\r\n.. code:: python\r\n\r\n    from pyjection.dependency_injector import DependencyInjector\r\n\r\n    class SingletonClass(object):\r\n        pass\r\n\r\n    container = DependencyInjector()\r\n    container.register_singleton(SingletonClass)\r\n    # Or we could specify an id\r\n    container.register_singleton(SingletonClass, \"other_id\")\r\n\r\n    class_1 = container.get(\"other_id\")\r\n    class_2 = container.get(\"other_id\")\r\n    print(class_1 is class_2) # True\r\n\r\n\r\nExplicit argument specification\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSimple argument specification\r\n-----------------------------\r\n\r\nSometimes the argument we need to inject is not an instance of a class.\r\nThe ``register`` and ``register_singleton`` methods return a service object that lets us specify what we want to bind to a given argument by using the ``add_argument`` method.\r\n\r\n.. code:: python\r\n\r\n    from pyjection.dependency_injector import DependencyInjector\r\n\r\n    class FooClass(object):\r\n\r\n        def __init__(self, foo):\r\n            self.foo = foo\r\n\r\n    container = DependencyInjector()\r\n    service = container.register(FooClass)\r\n    service.add_argument(\"foo\", \"bar\")\r\n\r\n    foo_class = container.get(\"foo_class\")\r\n    print(foo_class.foo) # Will print bar\r\n\r\n\r\nReference argument specification\r\n--------------------------------\r\n\r\nA service argument can also reference another dependency injector service.\r\nIt is useful when we want to inject a class not matching the argument name.\r\n\r\n.. code:: python\r\n\r\n    from pyjection.dependency_injector import DependencyInjector\r\n    from pyjection.reference import Reference\r\n\r\n    class OuterClass(object):\r\n\r\n        def __init__(self, inner_class):\r\n            self.inner_class = inner_class\r\n\r\n    class FooClass(object):\r\n\r\n        def __init__(self):\r\n            self.foo = \"bar\"\r\n\r\n    container = DependencyInjector()\r\n    container.register(FooClass)\r\n    container.register(OuterClass).add_argument(\"inner_class\", Reference('foo_class'))\r\n\r\n    instance = container.get(OuterClass)\r\n    print(instance.inner_class.foo) # Will print bar\r\n    \r\n\r\n.. |Software License| image:: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\r\n   :target: LICENSE\r\n.. |Build Status| image:: https://scrutinizer-ci.com/g/Darkheir/pyjection/badges/build.png?b=master\r\n   :target: https://scrutinizer-ci.com/g/Darkheir/pyjection/build-status/master\r\n.. |Code Coverage| image:: https://scrutinizer-ci.com/g/Darkheir/pyjection/badges/coverage.png?b=master\r\n   :target: https://scrutinizer-ci.com/g/Darkheir/pyjection/?branch=master\r\n.. |Code Quality| image:: https://scrutinizer-ci.com/g/Darkheir/pyjection/badges/quality-score.png?b=master\r\n   :target: https://scrutinizer-ci.com/g/Darkheir/pyjection/?branch=master", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Darkheir/pyjection", "keywords": "dependency injection dependency-injection development", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyjection", "package_url": "https://pypi.org/project/pyjection/", "platform": "", "project_url": "https://pypi.org/project/pyjection/", "project_urls": {"Homepage": "https://github.com/Darkheir/pyjection"}, "release_url": "https://pypi.org/project/pyjection/1.0.0/", "requires_dist": ["coverage; extra == 'test'"], "requires_python": "", "summary": "Pyjection is a lightweight python dependency injection library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"Software License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3774e3275f579e894cbbfbf88f461a319ba9f84b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://scrutinizer-ci.com/g/Darkheir/pyjection/build-status/master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a73423e2f51796793729cab865d691c6daccb90a/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f4461726b686569722f70796a656374696f6e2f6261646765732f6275696c642e706e673f623d6d6173746572\"></a> <a href=\"https://scrutinizer-ci.com/g/Darkheir/pyjection/?branch=master\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45c47d980daaef53cb0800071a12b54cbeb6799c/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f4461726b686569722f70796a656374696f6e2f6261646765732f636f7665726167652e706e673f623d6d6173746572\"></a> <a href=\"https://scrutinizer-ci.com/g/Darkheir/pyjection/?branch=master\" rel=\"nofollow\"><img alt=\"Code Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dba486dfa26d6a860895532ce3973f6070875cab/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f4461726b686569722f70796a656374696f6e2f6261646765732f7175616c6974792d73636f72652e706e673f623d6d6173746572\"></a></p>\n<p>Pyjection is a lightweight python dependency injection library</p>\n<div id=\"basic-dependency-injection\">\n<h2>Basic dependency injection</h2>\n<p>The most import class is <tt>DependencyInjector</tt> which lets us register classes and retrieve instances.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyjection.dependency_injector</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyInjector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OuterClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inner_class</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">inner_class</span> <span class=\"o\">=</span> <span class=\"n\">inner_class</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">InnerClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s2\">\"bar\"</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DependencyInjector</span><span class=\"p\">()</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">InnerClass</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">OuterClass</span><span class=\"p\">)</span>\n\n<span class=\"n\">outer</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"outer_class\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">outer</span><span class=\"o\">.</span><span class=\"n\">inner_class</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"c1\"># Will print \"bar\"</span>\n</pre>\n</div>\n<div id=\"class-bindings\">\n<h2>Class bindings</h2>\n<div id=\"implicit-class-bindings\">\n<h3>Implicit class bindings</h3>\n<p>When no id is specified in the <tt>register</tt> method Pyjection creates implicit bindings for classes.\nThe implicit bindings assume your code follows PEP8 conventions: your classes are named in <tt>CamelCase</tt>,\nand your args are named in <tt>lower_with_underscores</tt>.  Pinject transforms\nclass names to injectable arg names by lowercasing words and connecting them\nwith underscores.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Class name</th>\n<th>Arg name</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>Foo</tt></td>\n<td><tt>foo</tt></td>\n</tr>\n<tr><td><tt>FooBar</tt></td>\n<td><tt>foo_bar</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"explicit-class-bindings\">\n<h3>Explicit class bindings</h3>\n<p>It is also possible to manually set the id of a class when during its registration by specifying it as a second arguments.</p>\n<pre><span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">FooClass</span><span class=\"p\">,</span> <span class=\"s2\">\"inner_class\"</span><span class=\"p\">)</span>\n</pre>\n<p>With the example above, <tt>FooClass</tt> will later be injected to arguments named <tt>inner_class</tt></p>\n</div>\n</div>\n<div id=\"instance-retrieval\">\n<h2>Instance retrieval</h2>\n<p>To retrieve an instance of a class from the dependency injector 2 options are available in the <tt>get</tt> method:</p>\n<ul>\n<li>Specify the <tt>lower_with_underscores</tt> name of the class as a string</li>\n<li>Give the class as parameter</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyjection.dependency_injector</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyInjector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FooClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DependencyInjector</span><span class=\"p\">()</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">FooClass</span><span class=\"p\">)</span>\n\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"foo_class\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Same as</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">FooClass</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"singleton-injection\">\n<h2>Singleton injection</h2>\n<p>The dependency injector lets us register a singleton.\nTo register a singleton the method register_singleton may be used.\nIt takes the same arguments as register.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyjection.dependency_injector</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyInjector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SingletonClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DependencyInjector</span><span class=\"p\">()</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register_singleton</span><span class=\"p\">(</span><span class=\"n\">SingletonClass</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or we could specify an id</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register_singleton</span><span class=\"p\">(</span><span class=\"n\">SingletonClass</span><span class=\"p\">,</span> <span class=\"s2\">\"other_id\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">class_1</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"other_id\"</span><span class=\"p\">)</span>\n<span class=\"n\">class_2</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"other_id\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">class_1</span> <span class=\"ow\">is</span> <span class=\"n\">class_2</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n</div>\n<div id=\"explicit-argument-specification\">\n<h2>Explicit argument specification</h2>\n<div id=\"simple-argument-specification\">\n<h3>Simple argument specification</h3>\n<p>Sometimes the argument we need to inject is not an instance of a class.\nThe <tt>register</tt> and <tt>register_singleton</tt> methods return a service object that lets us specify what we want to bind to a given argument by using the <tt>add_argument</tt> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyjection.dependency_injector</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyInjector</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FooClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DependencyInjector</span><span class=\"p\">()</span>\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">FooClass</span><span class=\"p\">)</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">foo_class</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"foo_class\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo_class</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"c1\"># Will print bar</span>\n</pre>\n</div>\n<div id=\"reference-argument-specification\">\n<h3>Reference argument specification</h3>\n<p>A service argument can also reference another dependency injector service.\nIt is useful when we want to inject a class not matching the argument name.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyjection.dependency_injector</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyInjector</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyjection.reference</span> <span class=\"kn\">import</span> <span class=\"n\">Reference</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OuterClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inner_class</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">inner_class</span> <span class=\"o\">=</span> <span class=\"n\">inner_class</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FooClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"s2\">\"bar\"</span>\n\n<span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"n\">DependencyInjector</span><span class=\"p\">()</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">FooClass</span><span class=\"p\">)</span>\n<span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">OuterClass</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">\"inner_class\"</span><span class=\"p\">,</span> <span class=\"n\">Reference</span><span class=\"p\">(</span><span class=\"s1\">'foo_class'</span><span class=\"p\">))</span>\n\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">OuterClass</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">inner_class</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">)</span> <span class=\"c1\"># Will print bar</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2403907, "releases": {"0.1.0": [], "1.0.0": [{"comment_text": "", "digests": {"md5": "cfe8214337698a0993127c7c9f8294d2", "sha256": "db5ee6f31ba0ebc22db3433337c239f4d4e734a2f376ee4b40738ffe303f211f"}, "downloads": -1, "filename": "pyjection-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cfe8214337698a0993127c7c9f8294d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6419, "upload_time": "2016-10-17T12:15:20", "upload_time_iso_8601": "2016-10-17T12:15:20.632603Z", "url": "https://files.pythonhosted.org/packages/32/23/29ebe73342c5354c17db56b7ea99ab6671cdc8361658de6888a95d5ec281/pyjection-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cc9230f674629e4005bf268104e42eb", "sha256": "c938945dc0edafab406d1290a6994e81b3a5226bf4cec0e548c80584a1924875"}, "downloads": -1, "filename": "pyjection-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4cc9230f674629e4005bf268104e42eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5843, "upload_time": "2016-10-17T12:15:22", "upload_time_iso_8601": "2016-10-17T12:15:22.710258Z", "url": "https://files.pythonhosted.org/packages/75/2b/5348f61003e88b5cdd5ab124c38ae3390f7084effa624417803ffdb783ed/pyjection-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfe8214337698a0993127c7c9f8294d2", "sha256": "db5ee6f31ba0ebc22db3433337c239f4d4e734a2f376ee4b40738ffe303f211f"}, "downloads": -1, "filename": "pyjection-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cfe8214337698a0993127c7c9f8294d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6419, "upload_time": "2016-10-17T12:15:20", "upload_time_iso_8601": "2016-10-17T12:15:20.632603Z", "url": "https://files.pythonhosted.org/packages/32/23/29ebe73342c5354c17db56b7ea99ab6671cdc8361658de6888a95d5ec281/pyjection-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cc9230f674629e4005bf268104e42eb", "sha256": "c938945dc0edafab406d1290a6994e81b3a5226bf4cec0e548c80584a1924875"}, "downloads": -1, "filename": "pyjection-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4cc9230f674629e4005bf268104e42eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5843, "upload_time": "2016-10-17T12:15:22", "upload_time_iso_8601": "2016-10-17T12:15:22.710258Z", "url": "https://files.pythonhosted.org/packages/75/2b/5348f61003e88b5cdd5ab124c38ae3390f7084effa624417803ffdb783ed/pyjection-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:47 2020"}