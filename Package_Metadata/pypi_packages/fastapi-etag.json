{"info": {"author": "Steinthor Palsson", "author_email": "steini90@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# fastapi-etag\n\nBasic etag support for FastAPI, allowing you to benefit from conditional caching in web browsers and reverse-proxy caching layers.\n\nThis does not generate etags that are a hash of the response content, but instead lets you pass in a custom etag generating function per endpoint that is called before executing the route function.  \nThis lets you bypass expensive API calls when client includes a matching etag in the `If-None-Match` header, in this case your endpoint is never called, instead returning a 304 response telling the client nothing has changed.\n\nThe etag logis is implemented with a fastapi dependency that you can add to your routes or entire routers.  \nThe etag logic is implement using a custom `APIRoute` class that you can add to individual routers or a whole app.  \n\nHere's how you use it:\n\n```python3\n# app.py\n\nfrom fastapi import FastAPI\nfrom starlette.requests import Request\nfrom fastapi_etag import Etag, add_exception_handler\n\napp = FastAPI()\nadd_exception_handler(app)\n\n\nasync def get_hello_etag(request: Request):\n    return f\"etagfor{name}\"\n\n\n@app.get(\"/hello/{name}\", dependencies=[Etag(get_hello_etag)])\ndef hello(name: str):\n    return {\"hello\": name}\n\n```\n\nRun this example with `uvicorn: uvicorn --port 8090 app:app`\n\nLet's break it down:\n\n```python3\nadd_exception_handler(app)\n```\n\nThe dependency raises a special `CacheHit` exception to exit early when there's a an etag match, this adds a standard exception handler to the app to generate a correct 304 response from the exception.\n\n```python3\nasync def get_hello_etag(request: Request):\n    name = request.path_params.get(\"name\")\n    return f\"etagfor{name}\"\n```\n\nThis is the function that generates the etag for your endpoint.  \nIt can do anything you want, it could for example return a hash of a last modified timestamp in your database.  \nIt can be either a normal function or an async function.  \nOnly requirement is that it accepts one argument (request) and that it returns either a string (the etag) or `None` (in which case no etag header is added)\n\n\n```python3\n@app.get(\"/hello/{name}\", dependencies=[Etag(get_hello_etag)])\ndef hello(name: str):\n\t...\n```\n\nThe `Etag` dependency is called like any fastapi dependency.\nIt always adds the etag returned by your etag gen function to the response.  \nIf client passes a matching etag in the `If-None-Match` header, it will raise a `CacheHit` exception which triggers a 304 response before calling your endpoint.\n\n\nNow try it with curl:\n\n```\ncurl -i \"http://localhost:8090/hello/bob\"\nHTTP/1.1 200 OK\ndate: Mon, 30 Dec 2019 21:55:43 GMT\nserver: uvicorn\ncontent-length: 15\ncontent-type: application/json\netag: W/\"etagforbob\"\n\n{\"hello\":\"bob\"}\n```\n\nEtag header is added\n\nNow including the etag in `If-None-Match` header (mimicking a web browser):\n\n```\ncurl -i -X GET \"http://localhost:8090/hello/bob\" -H \"If-None-Match: W/\\\"etagforbob\\\"\"\nHTTP/1.1 304 Not Modified\ndate: Mon, 30 Dec 2019 21:57:37 GMT\nserver: uvicorn\netag: W/\"etagforbob\"\n```\n\nIt now returns no content, only the 304 telling us nothing has changed.\n\n\n# TODO\n\n* Tests\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steinitzu/fastapi-etag", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fastapi-etag", "package_url": "https://pypi.org/project/fastapi-etag/", "platform": "", "project_url": "https://pypi.org/project/fastapi-etag/", "project_urls": {"Code": "https://github.com/steinitzu/fastapi-etag", "Homepage": "https://github.com/steinitzu/fastapi-etag", "Issue tracker": "https://github.com/steinitzu/fastapi-etag/issues", "Repository": "https://github.com/steinitzu/fastapi-etag.git"}, "release_url": "https://pypi.org/project/fastapi-etag/0.2.1/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "Convenience library for working with etags in fastapi", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fastapi-etag</h1>\n<p>Basic etag support for FastAPI, allowing you to benefit from conditional caching in web browsers and reverse-proxy caching layers.</p>\n<p>This does not generate etags that are a hash of the response content, but instead lets you pass in a custom etag generating function per endpoint that is called before executing the route function.<br>\nThis lets you bypass expensive API calls when client includes a matching etag in the <code>If-None-Match</code> header, in this case your endpoint is never called, instead returning a 304 response telling the client nothing has changed.</p>\n<p>The etag logis is implemented with a fastapi dependency that you can add to your routes or entire routers.<br>\nThe etag logic is implement using a custom <code>APIRoute</code> class that you can add to individual routers or a whole app.</p>\n<p>Here's how you use it:</p>\n<pre><span class=\"c1\"># app.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">starlette.requests</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fastapi_etag</span> <span class=\"kn\">import</span> <span class=\"n\">Etag</span><span class=\"p\">,</span> <span class=\"n\">add_exception_handler</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">FastAPI</span><span class=\"p\">()</span>\n<span class=\"n\">add_exception_handler</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_hello_etag</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"etagfor</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/hello/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Etag</span><span class=\"p\">(</span><span class=\"n\">get_hello_etag</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"hello\"</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">}</span>\n</pre>\n<p>Run this example with <code>uvicorn: uvicorn --port 8090 app:app</code></p>\n<p>Let's break it down:</p>\n<pre><span class=\"n\">add_exception_handler</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>The dependency raises a special <code>CacheHit</code> exception to exit early when there's a an etag match, this adds a standard exception handler to the app to generate a correct 304 response from the exception.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_hello_etag</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"etagfor</span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n</pre>\n<p>This is the function that generates the etag for your endpoint.<br>\nIt can do anything you want, it could for example return a hash of a last modified timestamp in your database.<br>\nIt can be either a normal function or an async function.<br>\nOnly requirement is that it accepts one argument (request) and that it returns either a string (the etag) or <code>None</code> (in which case no etag header is added)</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/hello/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Etag</span><span class=\"p\">(</span><span class=\"n\">get_hello_etag</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n\t<span class=\"o\">...</span>\n</pre>\n<p>The <code>Etag</code> dependency is called like any fastapi dependency.\nIt always adds the etag returned by your etag gen function to the response.<br>\nIf client passes a matching etag in the <code>If-None-Match</code> header, it will raise a <code>CacheHit</code> exception which triggers a 304 response before calling your endpoint.</p>\n<p>Now try it with curl:</p>\n<pre><code>curl -i \"http://localhost:8090/hello/bob\"\nHTTP/1.1 200 OK\ndate: Mon, 30 Dec 2019 21:55:43 GMT\nserver: uvicorn\ncontent-length: 15\ncontent-type: application/json\netag: W/\"etagforbob\"\n\n{\"hello\":\"bob\"}\n</code></pre>\n<p>Etag header is added</p>\n<p>Now including the etag in <code>If-None-Match</code> header (mimicking a web browser):</p>\n<pre><code>curl -i -X GET \"http://localhost:8090/hello/bob\" -H \"If-None-Match: W/\\\"etagforbob\\\"\"\nHTTP/1.1 304 Not Modified\ndate: Mon, 30 Dec 2019 21:57:37 GMT\nserver: uvicorn\netag: W/\"etagforbob\"\n</code></pre>\n<p>It now returns no content, only the 304 telling us nothing has changed.</p>\n<h1>TODO</h1>\n<ul>\n<li>Tests</li>\n</ul>\n\n          </div>"}, "last_serial": 6655371, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "f797670c87f5b14f00f7319b4c911960", "sha256": "e2ac102c3e1d0c037a1b0dda2b4bc755d36390a689cabb060301c79369f81dfc"}, "downloads": -1, "filename": "fastapi_etag-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f797670c87f5b14f00f7319b4c911960", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 2705, "upload_time": "2020-01-03T21:03:47", "upload_time_iso_8601": "2020-01-03T21:03:47.105761Z", "url": "https://files.pythonhosted.org/packages/b8/50/c184036d946d8e871397d4d9bf9ad4d04200583ab042c096ad49f5418feb/fastapi_etag-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dec2dd9a5834c78753a48fc00ca7a44e", "sha256": "df1249be15874e00f912c691b4e930218c8a39f613c678096bba7eced4c774a9"}, "downloads": -1, "filename": "fastapi-etag-0.2.0.tar.gz", "has_sig": false, "md5_digest": "dec2dd9a5834c78753a48fc00ca7a44e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 1814, "upload_time": "2020-01-03T21:03:44", "upload_time_iso_8601": "2020-01-03T21:03:44.801679Z", "url": "https://files.pythonhosted.org/packages/3b/43/644cb8497bb7aa8738717b2a92f77b8721a5d918cdc54ff0353b5074f272/fastapi-etag-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9eb8a0870cc4824f76c6e00f9a3652a6", "sha256": "db3d7e9b6883cc5515e05af5bf4eb18dd9147eb9c743ab451aa5a333c73249c5"}, "downloads": -1, "filename": "fastapi_etag-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9eb8a0870cc4824f76c6e00f9a3652a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4208, "upload_time": "2020-02-18T19:18:07", "upload_time_iso_8601": "2020-02-18T19:18:07.046442Z", "url": "https://files.pythonhosted.org/packages/f2/0a/08d4298179834d77e59a81a0f75f208e02a61a91f1928584e1cfe262591e/fastapi_etag-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57362f81c22f18a2afb0d1a7ae27cd43", "sha256": "acf94931f15698dff30bb4257a8d5b3bc31330530cf16db586034d42ece238dd"}, "downloads": -1, "filename": "fastapi-etag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "57362f81c22f18a2afb0d1a7ae27cd43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3640, "upload_time": "2020-02-18T19:18:05", "upload_time_iso_8601": "2020-02-18T19:18:05.958448Z", "url": "https://files.pythonhosted.org/packages/a6/76/dedcdee4c5aa0a88960cd89d4e1d18ad5377d32dd8118e9632870b604ece/fastapi-etag-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9eb8a0870cc4824f76c6e00f9a3652a6", "sha256": "db3d7e9b6883cc5515e05af5bf4eb18dd9147eb9c743ab451aa5a333c73249c5"}, "downloads": -1, "filename": "fastapi_etag-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9eb8a0870cc4824f76c6e00f9a3652a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 4208, "upload_time": "2020-02-18T19:18:07", "upload_time_iso_8601": "2020-02-18T19:18:07.046442Z", "url": "https://files.pythonhosted.org/packages/f2/0a/08d4298179834d77e59a81a0f75f208e02a61a91f1928584e1cfe262591e/fastapi_etag-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57362f81c22f18a2afb0d1a7ae27cd43", "sha256": "acf94931f15698dff30bb4257a8d5b3bc31330530cf16db586034d42ece238dd"}, "downloads": -1, "filename": "fastapi-etag-0.2.1.tar.gz", "has_sig": false, "md5_digest": "57362f81c22f18a2afb0d1a7ae27cd43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3640, "upload_time": "2020-02-18T19:18:05", "upload_time_iso_8601": "2020-02-18T19:18:05.958448Z", "url": "https://files.pythonhosted.org/packages/a6/76/dedcdee4c5aa0a88960cd89d4e1d18ad5377d32dd8118e9632870b604ece/fastapi-etag-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:39 2020"}