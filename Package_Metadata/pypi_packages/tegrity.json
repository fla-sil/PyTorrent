{"info": {"author": "Michael de Gans", "author_email": "michael.john.degans@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# Tegrity\n\nIs a collection of scripts intended to help you build system images for Nvidia \nJetson with:\n\n* customized kernels, using menuconfig\n* rootfs customization support (install and remove packages)\n\nTegrity currently only supports Jetson Nano Development version, but support is \nplanned for other boards, starting with Xavier.\n\n## Requirements:\n\nTegrity requires that you have SDK manager installed and have downloaded the\nbundle for your Tegra development platform. If you have run SDK manager to \nflash your platform, chances are you've done this.\n\n## Installation:\nTo install or upgrade, obtain the files using git directly or from a release \nzip.\n```\n(cd into tegrity folder)\nsudo ./install.py\n```\nTo uninstall, run `sudo install.py --uninstall`\n\nTegrity is available on pypi as a placeholder, however it's not recommended to \nrely on pypi since at the time of writing pypi does not enforce MFA to upload \npackages. Also, a simple misspelling might result in malware being installed.\n\n## To build a system image:\n\nThe main script is 'tegrity' and runs all the others with appropriate options.\n\n```\n $ tegrity --help\nusage: tegrity [-h] [--cross-prefix CROSS_PREFIX]\n               [--firstboot FIRSTBOOT [FIRSTBOOT ...]]\n               [--public-sources PUBLIC_SOURCES]\n               [--public-sources-sha512 PUBLIC_SOURCES_SHA512]\n               [--build-kernel] [--kernel-load-config KERNEL_LOAD_CONFIG]\n               [--kernel-save-config KERNEL_SAVE_CONFIG]\n               [--kernel-localversion KERNEL_LOCALVERSION]\n               [--kernel-menuconfig] [--rootfs-source ROOTFS_SOURCE]\n               [--rootfs-source-sha512 ROOTFS_SOURCE_SHA512] [-o OUT]\n               [-l LOG_FILE] [-v]\n               l4t_path\n\nHelps bake Tegra OS images.\n\npositional arguments:\n  l4t_path              path to desired Linux_for_Tegra path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --cross-prefix CROSS_PREFIX\n                        the default cross prefix (default:\n                        /usr/local/bin/aarch64-linux-gnu-)\n  --firstboot FIRSTBOOT [FIRSTBOOT ...]\n                        list of first boot scripts to install (default: None)\n  --public-sources PUBLIC_SOURCES\n                        url or local path to a public sources tarball.\n                        (default: https://developer.nvidia.com/embedded/dlc/r3\n                        2-3-1_Release_v1.0/Sources/T210/public_sources.tbz2)\n  --public-sources-sha512 PUBLIC_SOURCES_SHA512\n                        public sources sha512 expected (default: f9729758ff44f\n                        9b18ec78a3e99634a8cac1ca165f40cda825bc18f6fdd0b088baac\n                        5a5c0868167a420993b3a7aed78bc9a43ecd7dc5bba2c75ca20c66\n                        35573a6)\n  --build-kernel        builds the kernel (default: False)\n  --kernel-load-config KERNEL_LOAD_CONFIG\n                        loads kernel configuration from this file (default:\n                        None)\n  --kernel-save-config KERNEL_SAVE_CONFIG\n                        save kernel configuration to this file (default: None)\n  --kernel-localversion KERNEL_LOCALVERSION\n                        local version string for kernel (default: -tegrity)\n  --kernel-menuconfig   interactively configure kernel (default: False)\n  --rootfs-source ROOTFS_SOURCE\n                        url or local path to rootfs tarball / directory,\n                        specify \"l4t\" to download a new default rootfs, or\n                        \"ubuntu_base\" to get an Ubuntu Base rootfs. (default:\n                        None)\n  --rootfs-source-sha512 ROOTFS_SOURCE_SHA512\n                        sha512sum of rootfs tarball (default: None)\n  -o OUT, --out OUT     the out path (for sd card image, etc) (default: None)\n  -l LOG_FILE, --log-file LOG_FILE\n                        where to store log file (default:\n                        /home/mdegans/.tegrity/tegrity.log)\n  -v, --verbose         prints DEBUG log level (logged anyway in --log-file)\n                        (default: False)\n\n```\n\nTo build your system step by step, for more control, you may choose instead to \nrun individual scripts in order:\n\n1. `tegrity-toolchain` - to install or update a toolchain\n2. `tegrity-kernel` - to build a kernel\n3. `tegrity-rootfs` - to download or setup a new rootfs\n4. `tegrity-qemu` - to run scripts on a rootfs or enter it interactively\n5. `tegrity-image` - to build the final image (currently only creates sd card for \nJetson Nano Development)\n\neach of these scripts have their own `--help` options\n\nTegrity also installs a system python package, `tegrity`, allowing you to create\nyour own scripts with the same building blocks, however it's not recommended\nto do this currently since the API is in shift. *However* `tegrity.qemu.QemuRunner`\nwill probably not change much and some may find it very useful in it's current\nstate.\n\nbasic usage:\n\n```python\nimport tegrity\n\nrootfs = '/path/to/a/rootfs'\nscript = '/path/to/a/script.sh'\n\nwith tegrity.qemu.QemuRunner(rootfs) as runner:\n    # the same exact interface as subprocess.run:\n    runner.run_cmd(('apt', 'update'))\n    # the userspec parameter can be used to set a user (passed to chroot)\n    runner.run_cmd(('vi', '/home/marco/.bashrc'), userspec=\"marco:marco\")\n    # .run_script can be used to copy a script to a rootfs and run it\n    # (with options), deleting it afterward (untested):\n    runner.run_script(script, '-o', 'output.whatever')\n```\n\nSince QemuRunner is [a context manager](https://docs.python.org/3/reference/datamodel.html#context-managers),\nit will automatically mount the necessary special filesystems, bind mount or \ncopy qemu-aarch64-static as appropriate, and no matter what happens, unmount the\nspecial filesystems in reverse order and clean up on leaving the context.\n\nAdditional options for QemuRunner construction are available (eg. additional \nmounts, overriding mounts, override qemu binary location, etc). It's recommended\nfor now to read the relavent portions of qemu.py", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tegrity", "package_url": "https://pypi.org/project/tegrity/", "platform": "", "project_url": "https://pypi.org/project/tegrity/", "project_urls": {"Bug Reports": "https://github.com/mdegans/tegrity/issues", "Source": "https://github.com/mdegans/tegrity/"}, "release_url": "https://pypi.org/project/tegrity/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Helps bake system images for NVIDIA Tegra", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tegrity</h1>\n<p>Is a collection of scripts intended to help you build system images for Nvidia\nJetson with:</p>\n<ul>\n<li>customized kernels, using menuconfig</li>\n<li>rootfs customization support (install and remove packages)</li>\n</ul>\n<p>Tegrity currently only supports Jetson Nano Development version, but support is\nplanned for other boards, starting with Xavier.</p>\n<h2>Requirements:</h2>\n<p>Tegrity requires that you have SDK manager installed and have downloaded the\nbundle for your Tegra development platform. If you have run SDK manager to\nflash your platform, chances are you've done this.</p>\n<h2>Installation:</h2>\n<p>To install or upgrade, obtain the files using git directly or from a release\nzip.</p>\n<pre><code>(cd into tegrity folder)\nsudo ./install.py\n</code></pre>\n<p>To uninstall, run <code>sudo install.py --uninstall</code></p>\n<p>Tegrity is available on pypi as a placeholder, however it's not recommended to\nrely on pypi since at the time of writing pypi does not enforce MFA to upload\npackages. Also, a simple misspelling might result in malware being installed.</p>\n<h2>To build a system image:</h2>\n<p>The main script is 'tegrity' and runs all the others with appropriate options.</p>\n<pre><code> $ tegrity --help\nusage: tegrity [-h] [--cross-prefix CROSS_PREFIX]\n               [--firstboot FIRSTBOOT [FIRSTBOOT ...]]\n               [--public-sources PUBLIC_SOURCES]\n               [--public-sources-sha512 PUBLIC_SOURCES_SHA512]\n               [--build-kernel] [--kernel-load-config KERNEL_LOAD_CONFIG]\n               [--kernel-save-config KERNEL_SAVE_CONFIG]\n               [--kernel-localversion KERNEL_LOCALVERSION]\n               [--kernel-menuconfig] [--rootfs-source ROOTFS_SOURCE]\n               [--rootfs-source-sha512 ROOTFS_SOURCE_SHA512] [-o OUT]\n               [-l LOG_FILE] [-v]\n               l4t_path\n\nHelps bake Tegra OS images.\n\npositional arguments:\n  l4t_path              path to desired Linux_for_Tegra path.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --cross-prefix CROSS_PREFIX\n                        the default cross prefix (default:\n                        /usr/local/bin/aarch64-linux-gnu-)\n  --firstboot FIRSTBOOT [FIRSTBOOT ...]\n                        list of first boot scripts to install (default: None)\n  --public-sources PUBLIC_SOURCES\n                        url or local path to a public sources tarball.\n                        (default: https://developer.nvidia.com/embedded/dlc/r3\n                        2-3-1_Release_v1.0/Sources/T210/public_sources.tbz2)\n  --public-sources-sha512 PUBLIC_SOURCES_SHA512\n                        public sources sha512 expected (default: f9729758ff44f\n                        9b18ec78a3e99634a8cac1ca165f40cda825bc18f6fdd0b088baac\n                        5a5c0868167a420993b3a7aed78bc9a43ecd7dc5bba2c75ca20c66\n                        35573a6)\n  --build-kernel        builds the kernel (default: False)\n  --kernel-load-config KERNEL_LOAD_CONFIG\n                        loads kernel configuration from this file (default:\n                        None)\n  --kernel-save-config KERNEL_SAVE_CONFIG\n                        save kernel configuration to this file (default: None)\n  --kernel-localversion KERNEL_LOCALVERSION\n                        local version string for kernel (default: -tegrity)\n  --kernel-menuconfig   interactively configure kernel (default: False)\n  --rootfs-source ROOTFS_SOURCE\n                        url or local path to rootfs tarball / directory,\n                        specify \"l4t\" to download a new default rootfs, or\n                        \"ubuntu_base\" to get an Ubuntu Base rootfs. (default:\n                        None)\n  --rootfs-source-sha512 ROOTFS_SOURCE_SHA512\n                        sha512sum of rootfs tarball (default: None)\n  -o OUT, --out OUT     the out path (for sd card image, etc) (default: None)\n  -l LOG_FILE, --log-file LOG_FILE\n                        where to store log file (default:\n                        /home/mdegans/.tegrity/tegrity.log)\n  -v, --verbose         prints DEBUG log level (logged anyway in --log-file)\n                        (default: False)\n\n</code></pre>\n<p>To build your system step by step, for more control, you may choose instead to\nrun individual scripts in order:</p>\n<ol>\n<li><code>tegrity-toolchain</code> - to install or update a toolchain</li>\n<li><code>tegrity-kernel</code> - to build a kernel</li>\n<li><code>tegrity-rootfs</code> - to download or setup a new rootfs</li>\n<li><code>tegrity-qemu</code> - to run scripts on a rootfs or enter it interactively</li>\n<li><code>tegrity-image</code> - to build the final image (currently only creates sd card for\nJetson Nano Development)</li>\n</ol>\n<p>each of these scripts have their own <code>--help</code> options</p>\n<p>Tegrity also installs a system python package, <code>tegrity</code>, allowing you to create\nyour own scripts with the same building blocks, however it's not recommended\nto do this currently since the API is in shift. <em>However</em> <code>tegrity.qemu.QemuRunner</code>\nwill probably not change much and some may find it very useful in it's current\nstate.</p>\n<p>basic usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tegrity</span>\n\n<span class=\"n\">rootfs</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/a/rootfs'</span>\n<span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/a/script.sh'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">tegrity</span><span class=\"o\">.</span><span class=\"n\">qemu</span><span class=\"o\">.</span><span class=\"n\">QemuRunner</span><span class=\"p\">(</span><span class=\"n\">rootfs</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">runner</span><span class=\"p\">:</span>\n    <span class=\"c1\"># the same exact interface as subprocess.run:</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run_cmd</span><span class=\"p\">((</span><span class=\"s1\">'apt'</span><span class=\"p\">,</span> <span class=\"s1\">'update'</span><span class=\"p\">))</span>\n    <span class=\"c1\"># the userspec parameter can be used to set a user (passed to chroot)</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run_cmd</span><span class=\"p\">((</span><span class=\"s1\">'vi'</span><span class=\"p\">,</span> <span class=\"s1\">'/home/marco/.bashrc'</span><span class=\"p\">),</span> <span class=\"n\">userspec</span><span class=\"o\">=</span><span class=\"s2\">\"marco:marco\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># .run_script can be used to copy a script to a rootfs and run it</span>\n    <span class=\"c1\"># (with options), deleting it afterward (untested):</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run_script</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">,</span> <span class=\"s1\">'-o'</span><span class=\"p\">,</span> <span class=\"s1\">'output.whatever'</span><span class=\"p\">)</span>\n</pre>\n<p>Since QemuRunner is <a href=\"https://docs.python.org/3/reference/datamodel.html#context-managers\" rel=\"nofollow\">a context manager</a>,\nit will automatically mount the necessary special filesystems, bind mount or\ncopy qemu-aarch64-static as appropriate, and no matter what happens, unmount the\nspecial filesystems in reverse order and clean up on leaving the context.</p>\n<p>Additional options for QemuRunner construction are available (eg. additional\nmounts, overriding mounts, override qemu binary location, etc). It's recommended\nfor now to read the relavent portions of qemu.py</p>\n\n          </div>"}, "last_serial": 6353210, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "605872e6d0f94850fe7a17bf24f05efc", "sha256": "2b4e52306ed5c63bdf4277d90dd81e9811acc2de823c773ac20d72e76634cf96"}, "downloads": -1, "filename": "tegrity-0.0.1.tar.gz", "has_sig": false, "md5_digest": "605872e6d0f94850fe7a17bf24f05efc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19093, "upload_time": "2019-11-22T22:50:50", "upload_time_iso_8601": "2019-11-22T22:50:50.689120Z", "url": "https://files.pythonhosted.org/packages/97/5f/bf749659425e56e9f3a90c8236777e9b35f9b863aa6087107885838f84b2/tegrity-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6125dac8c83bcbdeadca4dc1b84376f2", "sha256": "c3ef48bf1d4c5a231e700ad43baaf065e93c3c13dfa83853eba89d918c8d8ef6"}, "downloads": -1, "filename": "tegrity-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6125dac8c83bcbdeadca4dc1b84376f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41445, "upload_time": "2019-12-24T00:04:43", "upload_time_iso_8601": "2019-12-24T00:04:43.906712Z", "url": "https://files.pythonhosted.org/packages/7f/fa/762835b65e219078569f38f3ec5355958205a583f9e5b6bcb2e757213e8c/tegrity-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6125dac8c83bcbdeadca4dc1b84376f2", "sha256": "c3ef48bf1d4c5a231e700ad43baaf065e93c3c13dfa83853eba89d918c8d8ef6"}, "downloads": -1, "filename": "tegrity-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6125dac8c83bcbdeadca4dc1b84376f2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41445, "upload_time": "2019-12-24T00:04:43", "upload_time_iso_8601": "2019-12-24T00:04:43.906712Z", "url": "https://files.pythonhosted.org/packages/7f/fa/762835b65e219078569f38f3ec5355958205a583f9e5b6bcb2e757213e8c/tegrity-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:00 2020"}