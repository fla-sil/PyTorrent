{"info": {"author": "Tyler Littlefield", "author_email": "tyler@tysdomain.com", "bugtrack_url": null, "classifiers": [], "description": "Teventlet(http://tds-solutions.net)\n===================================\n\nTeventlet provides a light-weight easy-to-use mechenism for handling events. Each eventlet object is it's own event, to which you can add callbacks with +=. To call the event, you can call the object with any arguments, or call the invoke method with any arguments.\n\nPurpose\n-------\n\nThe purpose of Teventlet is to provide a mechenism that can be used to handle events. For example, if you wanted to attach events to an object in a game, for events such as collisions, you would have a teventlet per event. The publisher (in this case whatever checks for collisions) would be responsible for calling the invoke method on the event, while anything wanting to know when a collision occured would add a method to the callback list with the += operator.\n\nUsage\n-----\n\nHere is a quick example to get you going.::\n\n    >>> from __future__ import print_function\n    >>> from teventlet import teventlet\n    >>> adder = teventlet(lambda x:print(x+1), lambda x:print(x+2))\n    >>> adder.invoke(2)\n    3\n    4\n    >>> len(adder) \n    2\n    >>>  \n\nAs you can see, we pass two lambdas to the adder: a lambda that prints x+1, and a lambda that prints x+2. You could easily replace these with functions. By calling invoke, we pass in an argument that gets sent to our lambdas. You can also call the event as if it were a function.::\n\n    >>> adder(5) \n    6\n    7  \n    >>>  \n\nSee Also\n------------\n\nI have written a blog post, which can be found at http://tds-solutions.net/blog/?p=137. This gives some more examples of how to use Teventlet, as well as explains it's purpose in more detail.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://tds-solutions.net", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "teventlet", "package_url": "https://pypi.org/project/teventlet/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/teventlet/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://tds-solutions.net"}, "release_url": "https://pypi.org/project/teventlet/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "a light-weight event handler", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Teventlet provides a light-weight easy-to-use mechenism for handling events. Each eventlet object is it\u2019s own event, to which you can add callbacks with +=. To call the event, you can call the object with any arguments, or call the invoke method with any arguments.</p>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>The purpose of Teventlet is to provide a mechenism that can be used to handle events. For example, if you wanted to attach events to an object in a game, for events such as collisions, you would have a teventlet per event. The publisher (in this case whatever checks for collisions) would be responsible for calling the invoke method on the event, while anything wanting to know when a collision occured would add a method to the callback list with the += operator.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Here is a quick example to get you going.:</p>\n<pre>&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; from teventlet import teventlet\n&gt;&gt;&gt; adder = teventlet(lambda x:print(x+1), lambda x:print(x+2))\n&gt;&gt;&gt; adder.invoke(2)\n3\n4\n&gt;&gt;&gt; len(adder)\n2\n&gt;&gt;&gt;\n</pre>\n<p>As you can see, we pass two lambdas to the adder: a lambda that prints x+1, and a lambda that prints x+2. You could easily replace these with functions. By calling invoke, we pass in an argument that gets sent to our lambdas. You can also call the event as if it were a function.:</p>\n<pre>&gt;&gt;&gt; adder(5)\n6\n7\n&gt;&gt;&gt;\n</pre>\n</div>\n<div id=\"see-also\">\n<h2>See Also</h2>\n<p>I have written a blog post, which can be found at <a href=\"http://tds-solutions.net/blog/?p=137\" rel=\"nofollow\">http://tds-solutions.net/blog/?p=137</a>. This gives some more examples of how to use Teventlet, as well as explains it\u2019s purpose in more detail.</p>\n</div>\n\n          </div>"}, "last_serial": 482565, "releases": {"1.0": [], "1.0.1": []}, "urls": [], "timestamp": "Fri May  8 02:55:11 2020"}