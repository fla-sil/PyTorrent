{"info": {"author": "Kevin LaFlamme", "author_email": "laflamme.kevin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: MacOS", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Internet", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing", "Topic :: System :: Monitoring", "Topic :: System :: Systems Administration"], "description": "Introduction\n============\n\n``rq-scheduler-dashboard`` is a copy of rq-dashboard for rq-scheduler jobs,\nbased on the code from this PR: https://github.com/ducu/rq-dashboard/pull/95.\nThis just wraps the code from @helenst into a separate package.\n\nIt looks like this\n------------------\n\n|image1|\n\nInstalling\n----------\n\n.. code:: console\n\n    $ pip install rq-scheduler-dashboard\n\n\nRunning the dashboard\n---------------------\n\nRun the dashboard standalone, like this:\n\n.. code:: console\n\n    $ rq-scheduler-dashboard\n    * Running on http://127.0.0.1:9181/\n    ...\n\n\n.. code:: console\n\n    $ rq-scheduler-dashboard --help\n    Usage: rq-scheduler-dashboard [OPTIONS]\n\n      Run the RQ Scheduler Dashboard Flask server.\n\n      All configuration can be set on the command line or through environment\n      variables of the form RQ_SCHEDULER_DASHBOARD_*. For example RQ_SCHEDULER_DASHBOARD_USERNAME.\n\n      A subset of the configuration (the configuration parameters used by the\n      underlying flask blueprint) can also be provided in a Python module\n      referenced using --config, or with a .cfg file referenced by the\n      RQ_SCHEDULER_DASHBOARD_SETTINGS environment variable.\n\n    Options:\n      -b, --bind TEXT               IP or hostname on which to bind HTTP server\n      -p, --port INTEGER            Port on which to bind HTTP server\n      --url-prefix TEXT             URL prefix e.g. for use behind a reverse proxy\n      --username TEXT               HTTP Basic Auth username (not used if not set)\n      --password TEXT               HTTP Basic Auth password\n      -c, --config TEXT             Configuration file (Python module on search\n                                    path)\n      -H, --redis-host TEXT         IP address or hostname of Redis server\n      -P, --redis-port INTEGER      Port of Redis server\n      --redis-password TEXT         Password for Redis server\n      -D, --redis-database INTEGER  Database of Redis server\n      -u, --redis-url TEXT          Redis URL connection (overrides other\n                                    individual settings)\n      --interval INTEGER            Refresh interval in ms\n      --help                        Show this message and exit.\n\n\nIntegrating the dashboard in your Flask app\n-------------------------------------------\n\nThe dashboard can be integrated in to your own `Flask`_ app by accessing the\nblueprint directly in the normal way, e.g.:\n\n.. code:: python\n\n    from flask import Flask\n    import RQ_SCHEDULER_DASHBOARD\n\n    app = Flask(__name__)\n    app.config.from_object(RQ_SCHEDULER_DASHBOARD.default_settings)\n    app.register_blueprint(RQ_SCHEDULER_DASHBOARD.blueprint)\n\n    @app.route(\"/\")\n    def hello():\n        return \"Hello World!\"\n\n    if __name__ == \"__main__\":\n        app.run()\n\n\nThe ``cli.py:main`` entry point provides a simple working example.\n\n\nDeveloping\n----------\n\nWe use piptools_ to keep our development dependencies up to date\n\n::\n\n    $ pip install --upgrade pip\n    $ pip install git+https://github.com/nvie/pip-tools.git@future\n\nNow make changes to the ``requirements.in`` file, and resolve all the\n2nd-level dependencies into ``requirements.txt`` like so:\n\n::\n\n    $ pip-compile --annotate requirements.in\n\n\nDevelop in a virtualenv and make sure you have all the necessary build time (and\nrun time) dependencies with\n\n::\n\n    $ pip install -r requirements.txt\n\n\nDevelop in the normal way with\n\n::\n\n    $ python setup.py develop\n\n\nThen use Fabric to perform various development tasks. For example, to tag, build\nand upload to testpypi\n\n::\n\n    $ git tag 0.3.5   # no 'v' prefix or anything\n    $ fab build\n    $ fab upload\n\nThis requires write access to both the GitHub repo and to the PyPI test site.\n\nSee ``fab -l`` for more options and ``fab -d <subcommand>`` for details.\n\n\nMaturity notes\n--------------\n\nThe RQ Scheduler Dashboard is currently being developed and is in beta stage.\n\n\n.. _piptools: https://github.com/nvie/pip-tools\n.. _Flask: http://flask.pocoo.org/\n.. _RQ: http://python-rq.org/\n\n.. |image1| image:: https://cloud.githubusercontent.com/assets/3680882/14828693/129cd2f2-0bb6-11e6-9adf-dd635aa81334.png\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lamflam/rq-scheduler-dashboard", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "rq-scheduler-dashboard", "package_url": "https://pypi.org/project/rq-scheduler-dashboard/", "platform": "any", "project_url": "https://pypi.org/project/rq-scheduler-dashboard/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lamflam/rq-scheduler-dashboard"}, "release_url": "https://pypi.org/project/rq-scheduler-dashboard/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "rq-scheduler-dashboard is a copy of rq-dashboard for rq-scheduler jobs, based on the code from this PR: https://github.com/ducu/rq-dashboard/pull/95", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">rq-scheduler-dashboard</span></tt> is a copy of rq-dashboard for rq-scheduler jobs,\nbased on the code from this PR: <a href=\"https://github.com/ducu/rq-dashboard/pull/95\" rel=\"nofollow\">https://github.com/ducu/rq-dashboard/pull/95</a>.\nThis just wraps the code from @helenst into a separate package.</p>\n<div id=\"it-looks-like-this\">\n<h2>It looks like this</h2>\n<p><img alt=\"image1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74bb5c4ce1cdd9a70375efbd0e77780ae63e10e0/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f333638303838322f31343832383639332f31323963643266322d306262362d313165362d396164662d6464363335616138313333342e706e67\"></p>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre><span class=\"gp\">$</span> pip install rq-scheduler-dashboard\n</pre>\n</div>\n<div id=\"running-the-dashboard\">\n<h2>Running the dashboard</h2>\n<p>Run the dashboard standalone, like this:</p>\n<pre><span class=\"gp\">$</span> rq-scheduler-dashboard\n<span class=\"go\">* Running on http://127.0.0.1:9181/\n...</span>\n</pre>\n<pre><span class=\"gp\">$</span> rq-scheduler-dashboard --help\n<span class=\"go\">Usage: rq-scheduler-dashboard [OPTIONS]\n\n  Run the RQ Scheduler Dashboard Flask server.\n\n  All configuration can be set on the command line or through environment\n  variables of the form RQ_SCHEDULER_DASHBOARD_*. For example RQ_SCHEDULER_DASHBOARD_USERNAME.\n\n  A subset of the configuration (the configuration parameters used by the\n  underlying flask blueprint) can also be provided in a Python module\n  referenced using --config, or with a .cfg file referenced by the\n  RQ_SCHEDULER_DASHBOARD_SETTINGS environment variable.\n\nOptions:\n  -b, --bind TEXT               IP or hostname on which to bind HTTP server\n  -p, --port INTEGER            Port on which to bind HTTP server\n  --url-prefix TEXT             URL prefix e.g. for use behind a reverse proxy\n  --username TEXT               HTTP Basic Auth username (not used if not set)\n  --password TEXT               HTTP Basic Auth password\n  -c, --config TEXT             Configuration file (Python module on search\n                                path)\n  -H, --redis-host TEXT         IP address or hostname of Redis server\n  -P, --redis-port INTEGER      Port of Redis server\n  --redis-password TEXT         Password for Redis server\n  -D, --redis-database INTEGER  Database of Redis server\n  -u, --redis-url TEXT          Redis URL connection (overrides other\n                                individual settings)\n  --interval INTEGER            Refresh interval in ms\n  --help                        Show this message and exit.</span>\n</pre>\n</div>\n<div id=\"integrating-the-dashboard-in-your-flask-app\">\n<h2>Integrating the dashboard in your Flask app</h2>\n<p>The dashboard can be integrated in to your own <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> app by accessing the\nblueprint directly in the normal way, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">import</span> <span class=\"nn\">RQ_SCHEDULER_DASHBOARD</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">RQ_SCHEDULER_DASHBOARD</span><span class=\"o\">.</span><span class=\"n\">default_settings</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span><span class=\"n\">RQ_SCHEDULER_DASHBOARD</span><span class=\"o\">.</span><span class=\"n\">blueprint</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Hello World!\"</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The <tt>cli.py:main</tt> entry point provides a simple working example.</p>\n</div>\n<div id=\"developing\">\n<h2>Developing</h2>\n<p>We use <a href=\"https://github.com/nvie/pip-tools\" rel=\"nofollow\">piptools</a> to keep our development dependencies up to date</p>\n<pre>$ pip install --upgrade pip\n$ pip install git+https://github.com/nvie/pip-tools.git@future\n</pre>\n<p>Now make changes to the <tt>requirements.in</tt> file, and resolve all the\n2nd-level dependencies into <tt>requirements.txt</tt> like so:</p>\n<pre>$ pip-compile --annotate requirements.in\n</pre>\n<p>Develop in a virtualenv and make sure you have all the necessary build time (and\nrun time) dependencies with</p>\n<pre>$ pip install -r requirements.txt\n</pre>\n<p>Develop in the normal way with</p>\n<pre>$ python setup.py develop\n</pre>\n<p>Then use Fabric to perform various development tasks. For example, to tag, build\nand upload to testpypi</p>\n<pre>$ git tag 0.3.5   # no 'v' prefix or anything\n$ fab build\n$ fab upload\n</pre>\n<p>This requires write access to both the GitHub repo and to the PyPI test site.</p>\n<p>See <tt>fab <span class=\"pre\">-l</span></tt> for more options and <tt>fab <span class=\"pre\">-d</span> &lt;subcommand&gt;</tt> for details.</p>\n</div>\n<div id=\"maturity-notes\">\n<h2>Maturity notes</h2>\n<p>The RQ Scheduler Dashboard is currently being developed and is in beta stage.</p>\n</div>\n\n          </div>"}, "last_serial": 2751786, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "89c16090835e92d663a97ddafefd235e", "sha256": "93f3db83b75d3f60de1c9c804c5d42a9520037923ec92c7dc5fa39ba26adf333"}, "downloads": -1, "filename": "rq-scheduler-dashboard-0.0.1.tar.gz", "has_sig": false, "md5_digest": "89c16090835e92d663a97ddafefd235e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92594, "upload_time": "2016-04-26T13:06:54", "upload_time_iso_8601": "2016-04-26T13:06:54.330204Z", "url": "https://files.pythonhosted.org/packages/e2/bb/f96a6aa2ba2480a9aaf240f74892007d9e74ec9c0cfcf4b02762ca14300e/rq-scheduler-dashboard-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2cd5ff6aec1df6cfdf7f51bd77e56b2b", "sha256": "fcead3621b3530f1be6be9a0c602a64c56cc9e9fcd7920fd4aacdd1d9e766c5d"}, "downloads": -1, "filename": "rq-scheduler-dashboard-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2cd5ff6aec1df6cfdf7f51bd77e56b2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92683, "upload_time": "2017-04-04T11:50:36", "upload_time_iso_8601": "2017-04-04T11:50:36.333406Z", "url": "https://files.pythonhosted.org/packages/f6/84/70a4a0f7737dcc66958e6c58055a4393853d41653ae8df55d05c9f5b621d/rq-scheduler-dashboard-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2cd5ff6aec1df6cfdf7f51bd77e56b2b", "sha256": "fcead3621b3530f1be6be9a0c602a64c56cc9e9fcd7920fd4aacdd1d9e766c5d"}, "downloads": -1, "filename": "rq-scheduler-dashboard-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2cd5ff6aec1df6cfdf7f51bd77e56b2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92683, "upload_time": "2017-04-04T11:50:36", "upload_time_iso_8601": "2017-04-04T11:50:36.333406Z", "url": "https://files.pythonhosted.org/packages/f6/84/70a4a0f7737dcc66958e6c58055a4393853d41653ae8df55d05c9f5b621d/rq-scheduler-dashboard-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:46 2020"}