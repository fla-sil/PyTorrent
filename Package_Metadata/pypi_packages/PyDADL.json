{"info": {"author": "Nabil SEFRIOUI", "author_email": "n.sefrioui@osmium-work.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable"], "description": "PyDADL stands for Python Distributed Application Development Library, it's a \r\nframework that aims to be a helper for GUI development and deployment. PyDADL \r\nworks like a web application, the server holds almost everything and the \r\nclient receives UI descriptions in XML format and initiates the UI objects on \r\nthe fly. Callback functions are executed on the server via the XML-RPC \r\nprotocol. It is also possible to execute code in the client side like \r\njavascript in a web browser. The difference between a web application and a \r\nPyDADL application is that the client is not a browser but a native GUI, you \r\nbenefit from the advantages of a web application and the flexibility of a \r\nnative graphical interface.\r\nYou use PyDADL by writing XML files that describes the GUI parts and you write \r\nPython code for all the rest (server callbacks and client side code). You can \r\narrange your server code freely in different files and folders as if you write \r\na Python module. At the client side, in addition to the available widgets, you \r\ncan write custom widgets by subclassing PyDADL widget classes or create your \r\nown classes that derives directly from Qt classes and intergrate them in the \r\nUI. You can also use PyDADL internal API directly in your code to create \r\ndynamic UI.\r\nFor the database part, PyDADL supports only the MySQL server but the \r\narchitecture for adding others databases engines is already present. There is \r\na SQLite driver but it is not very well tested. PyDADL doesn't automate the \r\ncreation of databases and tables, it is up to you to design your database. \r\nPyDADL offers a set of DAO classes that abstract the access to data, you can \r\nuse your databases without writing SQL queries, but if you want to do so, you \r\ncan.", "description_content_type": null, "docs_url": null, "download_url": "http://sourceforge.net/project/showfiles.php?group_id=126573", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pydadl.sourceforge.net/", "keywords": "Qt GUI Framework", "license": "GPL", "maintainer": "Nabil SEFRIOUI", "maintainer_email": "n.sefrioui@osmium-work.com", "name": "PyDADL", "package_url": "https://pypi.org/project/PyDADL/", "platform": "Independant", "project_url": "https://pypi.org/project/PyDADL/", "project_urls": {"Download": "http://sourceforge.net/project/showfiles.php?group_id=126573", "Homepage": "http://pydadl.sourceforge.net/"}, "release_url": "https://pypi.org/project/PyDADL/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "PyDADL stands for Python Distributed Application Development Library, it's a framework that aims to be a helper for GUI development and deployment.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyDADL stands for Python Distributed Application Development Library, it\u2019s a\nframework that aims to be a helper for GUI development and deployment. PyDADL\nworks like a web application, the server holds almost everything and the\nclient receives UI descriptions in XML format and initiates the UI objects on\nthe fly. Callback functions are executed on the server via the XML-RPC\nprotocol. It is also possible to execute code in the client side like\njavascript in a web browser. The difference between a web application and a\nPyDADL application is that the client is not a browser but a native GUI, you\nbenefit from the advantages of a web application and the flexibility of a\nnative graphical interface.\nYou use PyDADL by writing XML files that describes the GUI parts and you write\nPython code for all the rest (server callbacks and client side code). You can\narrange your server code freely in different files and folders as if you write\na Python module. At the client side, in addition to the available widgets, you\ncan write custom widgets by subclassing PyDADL widget classes or create your\nown classes that derives directly from Qt classes and intergrate them in the\nUI. You can also use PyDADL internal API directly in your code to create\ndynamic UI.\nFor the database part, PyDADL supports only the MySQL server but the\narchitecture for adding others databases engines is already present. There is\na SQLite driver but it is not very well tested. PyDADL doesn\u2019t automate the\ncreation of databases and tables, it is up to you to design your database.\nPyDADL offers a set of DAO classes that abstract the access to data, you can\nuse your databases without writing SQL queries, but if you want to do so, you\ncan.</p>\n\n          </div>"}, "last_serial": 53126, "releases": {"1.1.0": []}, "urls": [], "timestamp": "Fri May  8 03:07:30 2020"}