{"info": {"author": "Danny Bloemendaal", "author_email": "danny.bloemendaal@informaat.nl", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Zope2", "Programming Language :: Python"], "description": "Overview\n========\n\nPloneTemplates is a product that allows you to make templates like you\nknow them from other applications such as Word of Excel (don't confuse them\nwith zope page templates, it's totally unrelated!!).\n\nUsage is very simple. Suppose you have to create a Page many times with\nevery time the same basic content. Instead of manually copying and pasting another\nPage that acts as the template, this product does it all for you with an\neasy to use user-interface.\n\nFirst you create a Template object somewhere in your portal. Just like any other\nobject using the Add new menu. This Template object\nis in fact a folder that can contain any other portal object (one or more!).\nIn our example, we create a Page inside this Template. We edit this Page and\nwe write its boiler plate body text (and whatever else you wish to preset)\nand you save the Page. Then you can write optional usage instructions in\nthe Template object (edit tab) itself. This is all you need to do to define\nthe template. Of course you can also copy/paste any existing objects inside the\nTemplate.\n\nNow, the final step is to go to a place in the portal (usually a Folder) where\nwe wish to enable this new Template so users can instantiate it.\nSo, we edit the Folder and we click on the templates link (schemata/fieldset)\nat the top of the edit form. There we can use the Browse button to locate\nthe newly created Template in the portal. (Here we can also choose if this\nTemplate is added to Templates already registered in higher levels in the\nFolder hierarchy).\n\nSo, we select the Template we just created and we press Save. From then on,\na new drop-down menu called 'template's appears next to the Add new menu\nin the context of this Folder and in any of it's subfolders. This menu contains\nthe Templates the user can pick from.\n\nSo.. let this get to you for a few seconds...\n\nSo, to summarize, you can create a Template object, put in there whatever\nyou want, register this Template anywhere in a folderish object in the portal\nand from then on you can consider this Template (actually it's content) as a new addable\nobject (or collection of objects)? Yes. That's all there is to it!\n\nPossibilities are endless. You can predefine all kinds of Issues that you\nwant to have available in an Issue Tracker, you can predefine entire folder\nstructures and put them in a Template like a project folder you want for\neach new project. Create a Page that holds the structure for a customer description\netc etc.\n\nAdditional notes, read carefully!\n---------------------------------\n\nAfter a Template is instantiated by a user somewhere, the focus is set to the\nfirst object that will be created. Also, the icon shown in the templates\ndrop-down menu is from the first contained object inside the Template object.\n\nDue to the way the current version of Archetypes deals with references, you cannot\nhave Templates registered to a Folder that is INSIDE another Template.\nPloneTemplates uses references to register a Template to a Folder and\nreferences are lost when you copy/paste something. I know.. it sux and\nwe know this for ages.\n\nYou can control if the user will get to see an intermediate page with the\nusage information when he picks a template from the menu.\nThis is a switch in the Template edit form.\n\nWorkflow states are reset to their defaults when a templates gets instantiated.\n(This happens for everything that get's copied and pasted and this is not\ndifferent).\n\nThis product comes with a tool that also allows you to instantiate templates\nfrom script (Use the source Luke!) and you can even add a post-process function\nthat can do something with the instantiated objects. I used that to create\nmember areas with lots of stuff in there like subfolders, personal blogs etc etc.\n\nThere is a mixin-class to make your product also template aware so you can\nregister Templates and have the templates menu. Add this in\nyour product class::\n\n  from Products.PloneTemplates.TemplateSchema import PloneTemplatesMixinSchema\n\nand do this with your schema::\n\n  schema = schema + PloneTemplateMixinSchema\n\nAdditionally, this product monkeypatches ATFolder to make it template\naware (add a few fields to the schema). In config.py you can see how this\nis done and you can add other types as well in a similar fashion. Or,\nyou can empty the list typesToPatch to not path the Folder type. So, out of\nthe box, this product will only allow Folders to have a templates drop-down menu.\nIn other words, if you have, let's say an Issue tracker product that also needs to use\ntemplates, you have to either patch it (inject some fields) or use the mixin schema.\n\nChangelog\n=========\n\n1.0.3 (2011-10-07)\n------------------\n\n- Updated metadata, reorganized code in Subversion.\n  [hannosch]\n\n- Plone 4.1 compatibility.\n  [mj]\n\n1.0.2 (2011-08-08)\n------------------\n\n- Fixed invalid XHTML for Chameleon compatibility.\n  [hannosch]\n\n1.0.1 (2011-08-03)\n------------------\n\n- Fix project name to start with `Products.` so the content types are found.\n  [hannosch]\n\n1.0 (2011-08-03)\n----------------\n\n- Provide package argument to `registerType` call.\n  [hannosch]\n\n1.0.0b4 (2009/05/15)\n--------------------\n \n* fixed packaging issue\n\n1.0.0b3 (2009/05/04)\n--------------------\n \n* eggified (ajung)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/Products.PloneTemplates", "keywords": "Zope Plone Templates", "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "Products.PloneTemplates", "package_url": "https://pypi.org/project/Products.PloneTemplates/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Products.PloneTemplates/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/Products.PloneTemplates"}, "release_url": "https://pypi.org/project/Products.PloneTemplates/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Content templates for Plone", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>PloneTemplates is a product that allows you to make templates like you\nknow them from other applications such as Word of Excel (don\u2019t confuse them\nwith zope page templates, it\u2019s totally unrelated!!).</p>\n<p>Usage is very simple. Suppose you have to create a Page many times with\nevery time the same basic content. Instead of manually copying and pasting another\nPage that acts as the template, this product does it all for you with an\neasy to use user-interface.</p>\n<p>First you create a Template object somewhere in your portal. Just like any other\nobject using the Add new menu. This Template object\nis in fact a folder that can contain any other portal object (one or more!).\nIn our example, we create a Page inside this Template. We edit this Page and\nwe write its boiler plate body text (and whatever else you wish to preset)\nand you save the Page. Then you can write optional usage instructions in\nthe Template object (edit tab) itself. This is all you need to do to define\nthe template. Of course you can also copy/paste any existing objects inside the\nTemplate.</p>\n<p>Now, the final step is to go to a place in the portal (usually a Folder) where\nwe wish to enable this new Template so users can instantiate it.\nSo, we edit the Folder and we click on the templates link (schemata/fieldset)\nat the top of the edit form. There we can use the Browse button to locate\nthe newly created Template in the portal. (Here we can also choose if this\nTemplate is added to Templates already registered in higher levels in the\nFolder hierarchy).</p>\n<p>So, we select the Template we just created and we press Save. From then on,\na new drop-down menu called \u2018template\u2019s appears next to the Add new menu\nin the context of this Folder and in any of it\u2019s subfolders. This menu contains\nthe Templates the user can pick from.</p>\n<p>So.. let this get to you for a few seconds\u2026</p>\n<p>So, to summarize, you can create a Template object, put in there whatever\nyou want, register this Template anywhere in a folderish object in the portal\nand from then on you can consider this Template (actually it\u2019s content) as a new addable\nobject (or collection of objects)? Yes. That\u2019s all there is to it!</p>\n<p>Possibilities are endless. You can predefine all kinds of Issues that you\nwant to have available in an Issue Tracker, you can predefine entire folder\nstructures and put them in a Template like a project folder you want for\neach new project. Create a Page that holds the structure for a customer description\netc etc.</p>\n<div id=\"additional-notes-read-carefully\">\n<h3>Additional notes, read carefully!</h3>\n<p>After a Template is instantiated by a user somewhere, the focus is set to the\nfirst object that will be created. Also, the icon shown in the templates\ndrop-down menu is from the first contained object inside the Template object.</p>\n<p>Due to the way the current version of Archetypes deals with references, you cannot\nhave Templates registered to a Folder that is INSIDE another Template.\nPloneTemplates uses references to register a Template to a Folder and\nreferences are lost when you copy/paste something. I know.. it sux and\nwe know this for ages.</p>\n<p>You can control if the user will get to see an intermediate page with the\nusage information when he picks a template from the menu.\nThis is a switch in the Template edit form.</p>\n<p>Workflow states are reset to their defaults when a templates gets instantiated.\n(This happens for everything that get\u2019s copied and pasted and this is not\ndifferent).</p>\n<p>This product comes with a tool that also allows you to instantiate templates\nfrom script (Use the source Luke!) and you can even add a post-process function\nthat can do something with the instantiated objects. I used that to create\nmember areas with lots of stuff in there like subfolders, personal blogs etc etc.</p>\n<p>There is a mixin-class to make your product also template aware so you can\nregister Templates and have the templates menu. Add this in\nyour product class:</p>\n<pre>from Products.PloneTemplates.TemplateSchema import PloneTemplatesMixinSchema\n</pre>\n<p>and do this with your schema:</p>\n<pre>schema = schema + PloneTemplateMixinSchema\n</pre>\n<p>Additionally, this product monkeypatches ATFolder to make it template\naware (add a few fields to the schema). In config.py you can see how this\nis done and you can add other types as well in a similar fashion. Or,\nyou can empty the list typesToPatch to not path the Folder type. So, out of\nthe box, this product will only allow Folders to have a templates drop-down menu.\nIn other words, if you have, let\u2019s say an Issue tracker product that also needs to use\ntemplates, you have to either patch it (inject some fields) or use the mixin schema.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.3 (2011-10-07)</h3>\n<ul>\n<li>Updated metadata, reorganized code in Subversion.\n[hannosch]</li>\n<li>Plone 4.1 compatibility.\n[mj]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.2 (2011-08-08)</h3>\n<ul>\n<li>Fixed invalid XHTML for Chameleon compatibility.\n[hannosch]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.1 (2011-08-03)</h3>\n<ul>\n<li>Fix project name to start with <cite>Products.</cite> so the content types are found.\n[hannosch]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.0 (2011-08-03)</h3>\n<ul>\n<li>Provide package argument to <cite>registerType</cite> call.\n[hannosch]</li>\n</ul>\n</div>\n<div id=\"b4-2009-05-15\">\n<h3>1.0.0b4 (2009/05/15)</h3>\n<ul>\n<li>fixed packaging issue</li>\n</ul>\n</div>\n<div id=\"b3-2009-05-04\">\n<h3>1.0.0b3 (2009/05/04)</h3>\n<ul>\n<li>eggified (ajung)</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 699377, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "de0186c29215ce9fc184c06257c20b9d", "sha256": "6f7fe3f5972c89c2f77941eab1078004a83caee2d1d687c221cf496dbea905d6"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.zip", "has_sig": false, "md5_digest": "de0186c29215ce9fc184c06257c20b9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35258, "upload_time": "2011-08-03T12:16:50", "upload_time_iso_8601": "2011-08-03T12:16:50.719054Z", "url": "https://files.pythonhosted.org/packages/0d/f2/3ecc8087039e336b68be110dc37b2cbef62450a4a2ff550c1701812af92c/Products.PloneTemplates-1.0.zip", "yanked": false}], "1.0.-svn-unreleased-": [], "1.0.0b3": [{"comment_text": "", "digests": {"md5": "407f882c9ea4b549f3d5ac3442c3b652", "sha256": "bc429a7d1b650ff5c618ea1f57d5d2a6b1d70cf9b88454220bdb26959a92dfcb"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.0b3.tar.gz", "has_sig": false, "md5_digest": "407f882c9ea4b549f3d5ac3442c3b652", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18745, "upload_time": "2009-05-04T20:22:42", "upload_time_iso_8601": "2009-05-04T20:22:42.992250Z", "url": "https://files.pythonhosted.org/packages/b2/98/193b0aa4559cd41e04b8a3fe996026e2b05e9f8ae1deaf6a27b145fb5ea8/Products.PloneTemplates-1.0.0b3.tar.gz", "yanked": false}], "1.0.0b4": [{"comment_text": "", "digests": {"md5": "96275538e3da16068a4ab87e0b5bb407", "sha256": "94e897d9544e670863917bb3fd88cd455a0a68d7d6cc3b1041dd46cc0afcea75"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.0b4.tar.gz", "has_sig": false, "md5_digest": "96275538e3da16068a4ab87e0b5bb407", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18783, "upload_time": "2009-05-15T17:57:42", "upload_time_iso_8601": "2009-05-15T17:57:42.678285Z", "url": "https://files.pythonhosted.org/packages/1e/0a/cbff45ce9cfd03d553d3ec299dde73a36b0c601653244510c892fc5bbf98/Products.PloneTemplates-1.0.0b4.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "70ab164238b464867a0368534b68b5d3", "sha256": "0c280284dd444b2acdc81bb92215a36c4bc548a658d5eec2a658a9762548fd6c"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.1.zip", "has_sig": false, "md5_digest": "70ab164238b464867a0368534b68b5d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35608, "upload_time": "2011-08-03T17:00:28", "upload_time_iso_8601": "2011-08-03T17:00:28.626519Z", "url": "https://files.pythonhosted.org/packages/0a/ac/5396ed1059a524c2e52d092bbef217fb804f646f01f4c670fa4419630edd/Products.PloneTemplates-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "895a4592775ca8bc639d85876607efe0", "sha256": "03f1a88c2922f5ce115bfc71b35b8f18a22230a1f642138a3d7d53ac61cb582e"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.2.zip", "has_sig": false, "md5_digest": "895a4592775ca8bc639d85876607efe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35473, "upload_time": "2011-08-08T13:42:25", "upload_time_iso_8601": "2011-08-08T13:42:25.890400Z", "url": "https://files.pythonhosted.org/packages/a7/8b/f8228d4bb3693ae42e45a358daaff3db5bf4e508678e635e6204c892846f/Products.PloneTemplates-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "87e847c39c624df8bc98fbb69a83da08", "sha256": "1f9ede287589da93c78b388b716e4af52faac1b113b21d3552a3409e5b02ead1"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.3.zip", "has_sig": false, "md5_digest": "87e847c39c624df8bc98fbb69a83da08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34116, "upload_time": "2011-10-07T10:45:41", "upload_time_iso_8601": "2011-10-07T10:45:41.513992Z", "url": "https://files.pythonhosted.org/packages/d9/4b/3cb0c501efdb43d026965d42485e7a57220c54af10b7508a143e733b321b/Products.PloneTemplates-1.0.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87e847c39c624df8bc98fbb69a83da08", "sha256": "1f9ede287589da93c78b388b716e4af52faac1b113b21d3552a3409e5b02ead1"}, "downloads": -1, "filename": "Products.PloneTemplates-1.0.3.zip", "has_sig": false, "md5_digest": "87e847c39c624df8bc98fbb69a83da08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34116, "upload_time": "2011-10-07T10:45:41", "upload_time_iso_8601": "2011-10-07T10:45:41.513992Z", "url": "https://files.pythonhosted.org/packages/d9/4b/3cb0c501efdb43d026965d42485e7a57220c54af10b7508a143e733b321b/Products.PloneTemplates-1.0.3.zip", "yanked": false}], "timestamp": "Fri May  8 03:17:53 2020"}