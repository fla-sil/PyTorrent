{"info": {"author": "Ted Tibbetts", "author_email": "intuited@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: Freely Distributable", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "``terminable_thread``\n=====================\n\n``terminable_thread`` provides a subclass of ``threading.Thread``,\nadding the facility to raise exceptions\nin the context of the given thread.\n\nThis facility is incorporated in the ``terminable_thread.Thread`` methods\n``raise_exc``, which raises an arbitrary exception,\nand ``terminate``, which raises SystemExit.\n\nThis is not done in an entirely robust manner,\nand there may be unreported issues with it.\n\nIt uses the unexposed ``PyThreadState_SetAsyncExc`` function (via ``ctypes``)\nto raise an exception for the given thread.\n\n\nUsage\n-----\n\nCheck the module doctest for a simple usage example.\n\n\nHistory\n-------\n\nThe code used in this module is taken most directly from Tomer Filiba's\n`thread2 recipe`_.\n\nSimilar code has been floating around the net\nfor some time now in various incarnations;\nhowever, the code on Tomer's page seems to be the most complete.\n\nHis page references a post by Antoon Pardon, previously available at\n`<http://mail.python.org/pipermail/python-list/2005-December/316143.html>`_,\nas an inspiration.\n\nTomer has indicated that the code on his page is in the public domain.\n\n.. _thread2 recipe: http://sebulba.wikispaces.com/recipe+thread2\n\n\nIssues\n------\n\nThe following issues are mentioned on `the recipe page`_:\n\n  - The exception will be raised only when executing python bytecode.\n    If your thread calls a native/built-in blocking function,\n    the exception will be raised only when execution returns to the python code.\n    \n    - There is also an issue \n      if the built-in function internally calls\u00a0PyErr\\_Clear(),\n      which would effectively cancel your pending exception.\n      You can try to raise it again.\n\n  - Only exception\u00a0**types**\u00a0can be raised safely.\n    Exception instances are likely to cause unexpected behavior,\n    and are thus restricted.\n    \n    - For example:\n      t1.raise\\_exc(TypeError)\u00a0and not\u00a0t1.raise\\_exc(TypeError(\"blah\")).\n    - IMHO it's a bug, and I reported it as one. For more info,\n      `<http://mail.python.org/pipermail/python-dev/2006-August/068158.html>`_\n\n  - I asked to expose this function in the built-in\u00a0thread\u00a0module,\n    but since\u00a0ctypes\u00a0has become a standard library (as of 2.5),\n    and this feature is not likely to be implementation-agnostic,\n    it may be kept unexposed.\n\nIn addition to these issues,\nor rather as an elaboration of the first one,\nI've noticed that catching of exceptions does not function as expected.\n\nSpecifically:\n\n- If the thread wraps some functions with a try/except clause,\n  the except may not catch an interrupt exception.\n  This will happen, for instance, with a ``time.sleep`` call.\n\n  For an example of this,\n  see the method ``FetcherTester.test_incorrect_fission``\n  in the test suite for the `pqueue\\_fetcher`_ module.\n\n  I guess I'll port that test into this module at some point.\n\n.. _the recipe page: http://sebulba.wikispaces.com/recipe+thread2\n.. _pqueue\\_fetcher: http://github.com/intuited/pqueue_fetcher\n\nDistribution\n------------\n\n``terminable_thread`` is available from the `github repo`_ or from `PyPI`_.\n\n.. _github repo: http://github.com/intuited/terminable_thread\n.. _PyPI: http://pypi.python.org/pypi/terminable_thread\n\n\nLicense\n-------\n\nAs mentioned above,\nTomer has indicated that the code on `his site`_ is public domain.\n\nI'm not entirely sure what that means legally, since\n\n- the term \"public domain\" is often used informally,\n  to just mean that no license has been applied.\n- the definition of \"public domain\", when used formally,\n  is dependent on the laws of a particular region.\n\nSo it's a bit complicated and vague,\nbut he did say that I could do whatever I wanted with it,\nso I've chosen to prevent such ambiguities in the future\nby licensing this derivation under the `WTFPL`_.\n\nThe license terms are given in the file ``COPYING``.\n\n.. _his site: `the recipe page`_\n.. _WTFPL: http://sam.zoy.org/wtfpl/\n\n\n(Lack of) Warranty\n------------------\n\nAs mentioned at the top,\nI myself am not entirely convinced of the reliability of this code.\n\nI might get around to writing a more thorough test suite at some point.\n\nPlease bear that, as well as the following Official Disclaimer,\nin mind when (considering) using it:\n\n::\n\n  This program is free software.\n  It comes without any warranty, to the extent permitted by applicable law.\n  You can redistribute it and/or modify it under the terms of the\n  Do What The Fuck You Want To Public License, Version 2,\n  as published by Sam Hocevar.\n  See http://sam.zoy.org/wtfpl/COPYING for more details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/intuited/terminable_thread", "keywords": "threading,multithreading", "license": "http://sam.zoy.org/wtfpl/", "maintainer": null, "maintainer_email": null, "name": "terminable_thread", "package_url": "https://pypi.org/project/terminable_thread/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/terminable_thread/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/intuited/terminable_thread"}, "release_url": "https://pypi.org/project/terminable_thread/0.7.1/", "requires_dist": null, "requires_python": null, "summary": "Provides a subclass of Thread with facilities to raise an exception in the thread or terminate the thread from another thread.", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>terminable_thread</tt> provides a subclass of <tt>threading.Thread</tt>,\nadding the facility to raise exceptions\nin the context of the given thread.</p>\n<p>This facility is incorporated in the <tt>terminable_thread.Thread</tt> methods\n<tt>raise_exc</tt>, which raises an arbitrary exception,\nand <tt>terminate</tt>, which raises SystemExit.</p>\n<p>This is not done in an entirely robust manner,\nand there may be unreported issues with it.</p>\n<p>It uses the unexposed <tt>PyThreadState_SetAsyncExc</tt> function (via <tt>ctypes</tt>)\nto raise an exception for the given thread.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Check the module doctest for a simple usage example.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>The code used in this module is taken most directly from Tomer Filiba\u2019s\n<a href=\"http://sebulba.wikispaces.com/recipe+thread2\" rel=\"nofollow\">thread2 recipe</a>.</p>\n<p>Similar code has been floating around the net\nfor some time now in various incarnations;\nhowever, the code on Tomer\u2019s page seems to be the most complete.</p>\n<p>His page references a post by Antoon Pardon, previously available at\n<a href=\"http://mail.python.org/pipermail/python-list/2005-December/316143.html\" rel=\"nofollow\">http://mail.python.org/pipermail/python-list/2005-December/316143.html</a>,\nas an inspiration.</p>\n<p>Tomer has indicated that the code on his page is in the public domain.</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>The following issues are mentioned on <a href=\"http://sebulba.wikispaces.com/recipe+thread2\" rel=\"nofollow\">the recipe page</a>:</p>\n<blockquote>\n<ul>\n<li>The exception will be raised only when executing python bytecode.\nIf your thread calls a native/built-in blocking function,\nthe exception will be raised only when execution returns to the python code.<ul>\n<li>There is also an issue\nif the built-in function internally calls\u00a0PyErr_Clear(),\nwhich would effectively cancel your pending exception.\nYou can try to raise it again.</li>\n</ul>\n</li>\n<li>Only exception\u00a0<strong>types</strong>\u00a0can be raised safely.\nException instances are likely to cause unexpected behavior,\nand are thus restricted.<ul>\n<li>For example:\nt1.raise_exc(TypeError)\u00a0and not\u00a0t1.raise_exc(TypeError(\u201cblah\u201d)).</li>\n<li>IMHO it\u2019s a bug, and I reported it as one. For more info,\n<a href=\"http://mail.python.org/pipermail/python-dev/2006-August/068158.html\" rel=\"nofollow\">http://mail.python.org/pipermail/python-dev/2006-August/068158.html</a></li>\n</ul>\n</li>\n<li>I asked to expose this function in the built-in\u00a0thread\u00a0module,\nbut since\u00a0ctypes\u00a0has become a standard library (as of 2.5),\nand this feature is not likely to be implementation-agnostic,\nit may be kept unexposed.</li>\n</ul>\n</blockquote>\n<p>In addition to these issues,\nor rather as an elaboration of the first one,\nI\u2019ve noticed that catching of exceptions does not function as expected.</p>\n<p>Specifically:</p>\n<ul>\n<li><p>If the thread wraps some functions with a try/except clause,\nthe except may not catch an interrupt exception.\nThis will happen, for instance, with a <tt>time.sleep</tt> call.</p>\n<p>For an example of this,\nsee the method <tt>FetcherTester.test_incorrect_fission</tt>\nin the test suite for the <a href=\"http://github.com/intuited/pqueue_fetcher\" rel=\"nofollow\">pqueue_fetcher</a> module.</p>\n<p>I guess I\u2019ll port that test into this module at some point.</p>\n</li>\n</ul>\n</div>\n<div id=\"distribution\">\n<h2>Distribution</h2>\n<p><tt>terminable_thread</tt> is available from the <a href=\"http://github.com/intuited/terminable_thread\" rel=\"nofollow\">github repo</a> or from <a href=\"http://pypi.python.org/pypi/terminable_thread\" rel=\"nofollow\">PyPI</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>As mentioned above,\nTomer has indicated that the code on <a href=\"http://sebulba.wikispaces.com/recipe+thread2\" rel=\"nofollow\">his site</a> is public domain.</p>\n<p>I\u2019m not entirely sure what that means legally, since</p>\n<ul>\n<li>the term \u201cpublic domain\u201d is often used informally,\nto just mean that no license has been applied.</li>\n<li>the definition of \u201cpublic domain\u201d, when used formally,\nis dependent on the laws of a particular region.</li>\n</ul>\n<p>So it\u2019s a bit complicated and vague,\nbut he did say that I could do whatever I wanted with it,\nso I\u2019ve chosen to prevent such ambiguities in the future\nby licensing this derivation under the <a href=\"http://sam.zoy.org/wtfpl/\" rel=\"nofollow\">WTFPL</a>.</p>\n<p>The license terms are given in the file <tt>COPYING</tt>.</p>\n</div>\n<div id=\"lack-of-warranty\">\n<h2>(Lack of) Warranty</h2>\n<p>As mentioned at the top,\nI myself am not entirely convinced of the reliability of this code.</p>\n<p>I might get around to writing a more thorough test suite at some point.</p>\n<p>Please bear that, as well as the following Official Disclaimer,\nin mind when (considering) using it:</p>\n<pre>This program is free software.\nIt comes without any warranty, to the extent permitted by applicable law.\nYou can redistribute it and/or modify it under the terms of the\nDo What The Fuck You Want To Public License, Version 2,\nas published by Sam Hocevar.\nSee http://sam.zoy.org/wtfpl/COPYING for more details.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 800464, "releases": {"0.7": [{"comment_text": "", "digests": {"md5": "8a4a6ad81726232b036e596e501f6f26", "sha256": "4beafb2311c314ea5a23fc12224df3980fb008c7ef19b933902aa266350a215e"}, "downloads": -1, "filename": "terminable_thread-0.7.tar.gz", "has_sig": false, "md5_digest": "8a4a6ad81726232b036e596e501f6f26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5203, "upload_time": "2010-09-21T23:52:27", "upload_time_iso_8601": "2010-09-21T23:52:27.284776Z", "url": "https://files.pythonhosted.org/packages/da/0a/1bf275aa6be4d206c201cb342b3a2c46674d7dbff9f296fad5091ec349f4/terminable_thread-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "f4f052ea5c1efa98889f0fd10335ae5d", "sha256": "c07d98a8230568757cffd13c6315409db45f6f479c4e3640df84b2225db10b27"}, "downloads": -1, "filename": "terminable_thread-0.7.1.tar.gz", "has_sig": false, "md5_digest": "f4f052ea5c1efa98889f0fd10335ae5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2010-09-22T00:22:42", "upload_time_iso_8601": "2010-09-22T00:22:42.986534Z", "url": "https://files.pythonhosted.org/packages/10/b4/9530368ac75a9023836514a305e08853b57f859c01b5fcf1aa9f7971d460/terminable_thread-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4f052ea5c1efa98889f0fd10335ae5d", "sha256": "c07d98a8230568757cffd13c6315409db45f6f479c4e3640df84b2225db10b27"}, "downloads": -1, "filename": "terminable_thread-0.7.1.tar.gz", "has_sig": false, "md5_digest": "f4f052ea5c1efa98889f0fd10335ae5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5247, "upload_time": "2010-09-22T00:22:42", "upload_time_iso_8601": "2010-09-22T00:22:42.986534Z", "url": "https://files.pythonhosted.org/packages/10/b4/9530368ac75a9023836514a305e08853b57f859c01b5fcf1aa9f7971d460/terminable_thread-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:57 2020"}