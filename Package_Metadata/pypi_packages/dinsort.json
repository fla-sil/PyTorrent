{"info": {"author": "Uli Fouquet", "author_email": "uli@gnufix.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: German", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Indexing/Search", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing", "Topic :: Utilities"], "description": "dinsort\n*******\n\nSort terms according to German DIN 5007.\n\n|bdg-build|  | `sources <https://github.com/ulif/dinsort>`_ | `issues <https://github.com/ulif/dinsort/issues>`_\n\n.. |bdg-build| image:: https://travis-ci.org/ulif/dinsort.png?branch=master\n    :target: https://travis-ci.org/ulif/dinsort\n    :alt: Build Status\n\n\nLittle Python library to support sorting of terms according to DIN\n(German Standards Institute) standard 5007.\n\nThis standard describes how to sort german terms alphabtically. It\nprovides two variants:\n\n* Variant 1:\n\n   - ``'\u00e4'`` equals ``'a'``\n   - ``'\u00df'`` equals ``'ss'``\n   - ...\n\n* Variant 2:\n\n   - ``'\u00e4'`` equals ``'ae'``\n   - ``'\u00df'`` equals ``'ss'``\n   - ...\n\nIn both variants other diacritics are removed. So ``'\u00e9'`` and ``'\u00e7'``\nbecome ``'e'`` and ``'c'`` respecively.\n\n\nUsage\n=====\n\n`dinsort` is a Python_ library.\n\n\nNormalizing Terms\n-----------------\n\nMain function is `dinsort.normalize`. It generates a normalized form\nof any string term given::\n\n   >>> from dinsort import normalize\n   >>> normalize(\"L\u00f6blich\")\n   'loblich'\n\nVariants are defined as constants::\n\n   >>> from dinsort import VARIANT1, VARIANT2\n   >>> normalize(\"M\u00fc\u00dfig\", variant=VARIANT1)\n   'mussig'\n\n   >>> normalize(\"M\u00fc\u00dfig\", variant=VARIANT2)\n   'muessig'\n\nTerms are normalized to lower-case by default. You can request\ncase-sensitiveness::\n\n   >>> normalize(\"Ma\u00dfe\", case_sensitive=True)\n   'Masse'\n\n\nSorting\n-------\n\nNormalized terms can easily be used for sorting lists of terms:\n\n   >>> sorted([\"fas\", \"fair\", \"f\u00e4r\"], key=lambda x: normalize(x))\n   ['fair', 'f\u00e4r', 'fas']\n\nWe provide a shortcut to avoid (sometimes not easy to read) `lambda`\nstatements with `normalize` in your code. Use `sort_func` for that::\n\n   >>> from dinsort import sort_func\n   >>> sorted([\"fas\", \"fair\", \"f\u00e4r\"], key=sort_func())\n   ['fair', 'f\u00e4r', 'fas']\n\nThe `sort_func` accepts the keywords of `normalize`::\n\n   >>> sorted([\"Mu\u00dfe\", \"mu\u00df\"], key=sort_func())\n   ['mu\u00df', 'Mu\u00dfe']\n\n   >>> sorted([\"Mu\u00dfe\", \"mu\u00df\"], key=sort_func(case_sensitive=True))\n   ['Mu\u00dfe', 'mu\u00df']\n\n   >>> sorted([\"far\", \"f\u00e4hre\"], key=sort_func())\n   ['f\u00e4hre', 'far']\n\n   >>> sorted([\"far\", \"f\u00e4re\", \"fast\"], key=sort_func())\n   ['far', 'f\u00e4re', 'fast']\n\n   >>> sorted([\"far\", \"f\u00e4re\", \"fast\"], key=sort_func(variant=VARIANT2))\n   ['f\u00e4re', 'far', 'fast']\n\n\nInstall\n=======\n\nUser Install\n------------\n\nThe latest release of `dinsort` can be installed via pip_::\n\n  $ pip install dinsort\n\nThe exact way depends on your operating system.\n\n\nDeveloper Install\n-----------------\n\nDevelopers clone the sources from github::\n\n  $ git clone https://github.com/ulif/dinsort.git\n\nCreate a virtual env (Python versions >= 2.6 supported)::\n\n  $ cd dinsort\n  $ virtualenv py27\n  $ source py27/bin/activate\n\nand install dependencies::\n\n  (py27) python setup py dev\n\nYou can run tests with `py.test`::\n\n  (py27) py.test\n\nor with `tox`::\n\n  (py27) pip install tox\n  (py27) tox\n\n\n\n.. _pip: https://pip.pypa.io/en/latest/\n.. _Python: https://python.org/\n\n\n\nChanges\n=======\n\n0.2 (2015-10-14)\n----------------\n\n- Add `sort_func`. It is as shortcut for `lambda` expressions with\n  `normalize`.\n- Support pypy officially.\n\n\n0.1 (2015-10-13)\n----------------\n\n- Initial version.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ulif/dinsort/", "keywords": "sort terms order DIN 5007 german words", "license": "GPL 3.0", "maintainer": null, "maintainer_email": null, "name": "dinsort", "package_url": "https://pypi.org/project/dinsort/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dinsort/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ulif/dinsort/"}, "release_url": "https://pypi.org/project/dinsort/0.2/", "requires_dist": null, "requires_python": null, "summary": "Sort terms according to German DIN.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Sort terms according to German DIN 5007.</p>\n<p><a href=\"https://travis-ci.org/ulif/dinsort\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4676904f63b186c0719c16d4069a1e2b92209bcf/68747470733a2f2f7472617669732d63692e6f72672f756c69662f64696e736f72742e706e673f6272616e63683d6d6173746572\"></a>  | <a href=\"https://github.com/ulif/dinsort\" rel=\"nofollow\">sources</a> | <a href=\"https://github.com/ulif/dinsort/issues\" rel=\"nofollow\">issues</a></p>\n<p>Little Python library to support sorting of terms according to DIN\n(German Standards Institute) standard 5007.</p>\n<p>This standard describes how to sort german terms alphabtically. It\nprovides two variants:</p>\n<ul>\n<li><p>Variant 1:</p>\n<blockquote>\n<ul>\n<li><tt>'\u00e4'</tt> equals <tt>'a'</tt></li>\n<li><tt>'\u00df'</tt> equals <tt>'ss'</tt></li>\n<li>\u2026</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Variant 2:</p>\n<blockquote>\n<ul>\n<li><tt>'\u00e4'</tt> equals <tt>'ae'</tt></li>\n<li><tt>'\u00df'</tt> equals <tt>'ss'</tt></li>\n<li>\u2026</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>In both variants other diacritics are removed. So <tt>'\u00e9'</tt> and <tt>'\u00e7'</tt>\nbecome <tt>'e'</tt> and <tt>'c'</tt> respecively.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><cite>dinsort</cite> is a <a href=\"https://python.org/\" rel=\"nofollow\">Python</a> library.</p>\n<div id=\"normalizing-terms\">\n<h3>Normalizing Terms</h3>\n<p>Main function is <cite>dinsort.normalize</cite>. It generates a normalized form\nof any string term given:</p>\n<pre>&gt;&gt;&gt; from dinsort import normalize\n&gt;&gt;&gt; normalize(\"L\u00f6blich\")\n'loblich'\n</pre>\n<p>Variants are defined as constants:</p>\n<pre>&gt;&gt;&gt; from dinsort import VARIANT1, VARIANT2\n&gt;&gt;&gt; normalize(\"M\u00fc\u00dfig\", variant=VARIANT1)\n'mussig'\n\n&gt;&gt;&gt; normalize(\"M\u00fc\u00dfig\", variant=VARIANT2)\n'muessig'\n</pre>\n<p>Terms are normalized to lower-case by default. You can request\ncase-sensitiveness:</p>\n<pre>&gt;&gt;&gt; normalize(\"Ma\u00dfe\", case_sensitive=True)\n'Masse'\n</pre>\n</div>\n<div id=\"sorting\">\n<h3>Sorting</h3>\n<p>Normalized terms can easily be used for sorting lists of terms:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; sorted([\"fas\", \"fair\", \"f\u00e4r\"], key=lambda x: normalize(x))\n['fair', 'f\u00e4r', 'fas']\n</pre>\n</blockquote>\n<p>We provide a shortcut to avoid (sometimes not easy to read) <cite>lambda</cite>\nstatements with <cite>normalize</cite> in your code. Use <cite>sort_func</cite> for that:</p>\n<pre>&gt;&gt;&gt; from dinsort import sort_func\n&gt;&gt;&gt; sorted([\"fas\", \"fair\", \"f\u00e4r\"], key=sort_func())\n['fair', 'f\u00e4r', 'fas']\n</pre>\n<p>The <cite>sort_func</cite> accepts the keywords of <cite>normalize</cite>:</p>\n<pre>&gt;&gt;&gt; sorted([\"Mu\u00dfe\", \"mu\u00df\"], key=sort_func())\n['mu\u00df', 'Mu\u00dfe']\n\n&gt;&gt;&gt; sorted([\"Mu\u00dfe\", \"mu\u00df\"], key=sort_func(case_sensitive=True))\n['Mu\u00dfe', 'mu\u00df']\n\n&gt;&gt;&gt; sorted([\"far\", \"f\u00e4hre\"], key=sort_func())\n['f\u00e4hre', 'far']\n\n&gt;&gt;&gt; sorted([\"far\", \"f\u00e4re\", \"fast\"], key=sort_func())\n['far', 'f\u00e4re', 'fast']\n\n&gt;&gt;&gt; sorted([\"far\", \"f\u00e4re\", \"fast\"], key=sort_func(variant=VARIANT2))\n['f\u00e4re', 'far', 'fast']\n</pre>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<div id=\"user-install\">\n<h3>User Install</h3>\n<p>The latest release of <cite>dinsort</cite> can be installed via <a href=\"https://pip.pypa.io/en/latest/\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ pip install dinsort\n</pre>\n<p>The exact way depends on your operating system.</p>\n</div>\n<div id=\"developer-install\">\n<h3>Developer Install</h3>\n<p>Developers clone the sources from github:</p>\n<pre>$ git clone https://github.com/ulif/dinsort.git\n</pre>\n<p>Create a virtual env (Python versions &gt;= 2.6 supported):</p>\n<pre>$ cd dinsort\n$ virtualenv py27\n$ source py27/bin/activate\n</pre>\n<p>and install dependencies:</p>\n<pre>(py27) python setup py dev\n</pre>\n<p>You can run tests with <cite>py.test</cite>:</p>\n<pre>(py27) py.test\n</pre>\n<p>or with <cite>tox</cite>:</p>\n<pre>(py27) pip install tox\n(py27) tox\n</pre>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.2 (2015-10-14)</h3>\n<ul>\n<li>Add <cite>sort_func</cite>. It is as shortcut for <cite>lambda</cite> expressions with\n<cite>normalize</cite>.</li>\n<li>Support pypy officially.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1 (2015-10-13)</h3>\n<ul>\n<li>Initial version.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1768386, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "dfbf29c72ab58f472487b9d730b76fba", "sha256": "6c30ddd8513ee84eba41d8955e2aff887e2e314660059ffeb3b107a8e3a96e17"}, "downloads": -1, "filename": "dinsort-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dfbf29c72ab58f472487b9d730b76fba", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 5764, "upload_time": "2015-10-13T13:31:44", "upload_time_iso_8601": "2015-10-13T13:31:44.302063Z", "url": "https://files.pythonhosted.org/packages/09/55/285405f7188f230be3f0e7fe24e36a2309e0f4cdc31e92fe0732cf30b3c9/dinsort-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4da5c5126c7e5711253b4d6f3bd174fa", "sha256": "2a036fc5d54890e290f52f5679ec59db9b816f51ad44ce8443ef2542df3abe90"}, "downloads": -1, "filename": "dinsort-0.1.tar.gz", "has_sig": false, "md5_digest": "4da5c5126c7e5711253b4d6f3bd174fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11894, "upload_time": "2015-10-13T13:31:17", "upload_time_iso_8601": "2015-10-13T13:31:17.851380Z", "url": "https://files.pythonhosted.org/packages/60/45/dafea481c1530b4fe40b87d40677cf777405fe8170b6d54d63b8b06f365a/dinsort-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ebc6c5bdd6a7a8b5d9b048f7134d5572", "sha256": "9649c8ab7def8c16aa46fa066beba3516271f921620030f0440bd749130a104c"}, "downloads": -1, "filename": "dinsort-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebc6c5bdd6a7a8b5d9b048f7134d5572", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 6573, "upload_time": "2015-10-14T12:46:47", "upload_time_iso_8601": "2015-10-14T12:46:47.604730Z", "url": "https://files.pythonhosted.org/packages/d9/31/ab178c5108772b326acf61b54546aa54e39c77e1c5129f9e70723384dc50/dinsort-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df0a8f478fe4f94d1309f49aadcea6ce", "sha256": "18a15223cb1e27ac3e73d5de41e08fe8d47dc85ee9feeeea8177b867033ca76c"}, "downloads": -1, "filename": "dinsort-0.2.tar.gz", "has_sig": false, "md5_digest": "df0a8f478fe4f94d1309f49aadcea6ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12563, "upload_time": "2015-10-14T12:46:43", "upload_time_iso_8601": "2015-10-14T12:46:43.749693Z", "url": "https://files.pythonhosted.org/packages/cc/b2/18ff2e44fe0cb7e1e7955229f62904c299674b7b9ef6500255951ae793b9/dinsort-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ebc6c5bdd6a7a8b5d9b048f7134d5572", "sha256": "9649c8ab7def8c16aa46fa066beba3516271f921620030f0440bd749130a104c"}, "downloads": -1, "filename": "dinsort-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebc6c5bdd6a7a8b5d9b048f7134d5572", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 6573, "upload_time": "2015-10-14T12:46:47", "upload_time_iso_8601": "2015-10-14T12:46:47.604730Z", "url": "https://files.pythonhosted.org/packages/d9/31/ab178c5108772b326acf61b54546aa54e39c77e1c5129f9e70723384dc50/dinsort-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df0a8f478fe4f94d1309f49aadcea6ce", "sha256": "18a15223cb1e27ac3e73d5de41e08fe8d47dc85ee9feeeea8177b867033ca76c"}, "downloads": -1, "filename": "dinsort-0.2.tar.gz", "has_sig": false, "md5_digest": "df0a8f478fe4f94d1309f49aadcea6ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12563, "upload_time": "2015-10-14T12:46:43", "upload_time_iso_8601": "2015-10-14T12:46:43.749693Z", "url": "https://files.pythonhosted.org/packages/cc/b2/18ff2e44fe0cb7e1e7955229f62904c299674b7b9ef6500255951ae793b9/dinsort-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:19 2020"}