{"info": {"author": "Florent Mertens", "author_email": "flomertens@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Python package for foreground removal and power spectra generation:\n==================================================================\n\nRequirements\n------------\n\nYou will need the following packages:\n\n- click\n- numpy\n- scipy\n- astropy\n- matplotlib\n- pytable (for saving loading in h5 format)\n- pyfftw (optional, can save time)\n- sklearn (for PCA)\n- GPy (for GPR)\n- healpy,reproject (optional)\n\n\nUsage: \n------\n\nThis package provide a simple interface for Foreground removal and PS estimation tasks.\n\nBelow we briefly document the main tasks that can be perform with this package:\n\n\n1. Loading your data: \n---------------------\n\n    data_cube_i = datacube.CartDataCube.load_from_fits_image(files, umin, umax, theta_fov)\n\nThis will do the following steps:\n- Read Fits image file\n- Trim image to theta_fov\n- Convert image from Jy/PSF to K, using imager_scale_factor or WSCNORMF\n attribute to get PSF \"solid angle\" (otherwise use Gaussian approx of the PSF)\n- FFT image per frequencies to get visibilities\n- Keep only non-zero visibilities between umin and umax.\nand return a CartDataCube object storing the visibilities in an ungridded way.\n\nIt is possible (recommended) to save/load to an h5 format with the save()/load() method.\n\nOne can also regrid the data and make an image with the regrid() and image() method.\n\n\n2. Run FG removal algorithm:\n----------------------------\n\nThe main FG removal code is GPR, but PCA, GMCA (the python version) and Poly fitting are also implemented.\n\nTo run GPR, one do the following:\n\n    data_cube_i = datacube.CartDataCube.load_from_fits_image(files_i, umin, umax, theta_fov)\n    data_cube_v = datacube.CartDataCube.load_from_fits_image(files_v, umin, umax, theta_fov)\n\n    eor_bin_list = pspec.EorBinList(data_cube_i.freqs)\n    # Create an EoR bin 122-134 MHz with a 120-136MHz range for the FG fitting\n    eor_bin_list.add_freq(1, 122, 134, 120, 136)\n    eor = eor_bin_list.get(1)\n\n    gpr_config = fitutil.GprConfig.load(gpr_config_filename)\n    gpr_fit = fgfit.GprForegroundFit(gpr_config)\n    gpr_res = gpr_fit.run(eor.get_slice_fg(data_cube_i), eor.get_slice_fg(data_cube_v))\n\nThis return a GprForegroundResult object which have the following attributes:\n- fit: The FG model in a form of a CartDataCube object\n- sub: The residual \n- pre_fit: The pre-fit FG model\n- post_fit: The post-fit FG model\n\nAnd the following method:\n- get_fg_model(): return the GPR fg model\n- get_eor_model(): return the GPR eor model\n\nOn can then save/load those CartDataCube as needed for later processing.\n\nThe CartDataCube cubes of the GPR model and residual contains the error covariance \nfrom the GPR model that need to be taken into account when generating the \npower spectra (see fitutil.get_ps_err_from_cov_err for an exemple of how this can be done.).\n\nLook at gpr_config.parset and gpr_config_v.parset for examples of GPR configuration.\n\n\n3. Generate Power Spectra:\n--------------------------\n\nThe PS code into account automatically the error covariance of the GPR model.\n\nIt is possible to generate spatial only PS, Cylindrically averaged PS (2D) or spherically averaged PS (3D).\n\n    # Create a PS configuration\n    el = 2 * np.pi * (np.arange(data_cube.ru.min(), data_cube.ru.max(), du))\n    ps_conf = pspec.PowerSpectraConfig(el)\n\n    pb = datacube.LofarHBAPrimaryBeam()\n    \n    # Create a PS generation object\n    ps_gen = pspec.PowerSpectraCart(eor, ps_conf, pb)\n\n    # Create a Spatial PS, plot it and save it to a file\n    ps = ps_gen.get_ps(data_cube)\n    ps.plot(title='Spatial power spectra')\n    plt.savefig('ps.pdf')\n    ps.save_to_txt('ps.txt')\n\n    # Create a Cylindrically averaged PS\n    ps2d = ps_gen.get_ps2d(data_cube)\n    ps2d.plot(title='Cylindrically averaged power spectra')\n    plt.savefig('ps2d.pdf')\n    ps2d.save_to_txt('ps2d.txt')\n\n    # Create a Spherically averaged PS\n    kbins = np.logspace(np.log10(ps_gen.kmin), np.log10(0.5), 10)\n    ps3d = ps_gen.get_ps3d(kbins, data_cube)\n    ps3d.plot(title='Spherically averaged power spectra')\n    plt.savefig('ps3d.pdf')\n    ps3d.save_to_txt('ps3d.txt')\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/flomertens/ps_eor", "keywords": "", "license": "GPL-3.0+", "maintainer": "", "maintainer_email": "", "name": "ps-eor", "package_url": "https://pypi.org/project/ps-eor/", "platform": "", "project_url": "https://pypi.org/project/ps-eor/", "project_urls": {"Homepage": "https://gitlab.com/flomertens/ps_eor", "Repository": "https://gitlab.com/flomertens/ps_eor"}, "release_url": "https://pypi.org/project/ps-eor/0.7.3/", "requires_dist": ["tables (>=3.2,<4.0)", "pyfftw (>=0.12,<0.13)", "healpy (>=1.12,<2.0)", "scikit-learn (>=0.20,<0.21)", "astropy (>=4,<5); python_version >= \"3.6\" and python_version < \"4.0\"", "astropy (>=2,<3); python_version >= \"2.7\" and python_version < \"3.0\"", "numpy (>=1.16,<2.0); python_version >= \"2.7\" and python_version < \"3.0\"", "numpy (>=1.18,<2.0); python_version >= \"3.6\" and python_version < \"4.0\"", "scipy (>=1.2,<2.0); python_version >= \"2.7\" and python_version < \"3.0\"", "scipy (>=1.4,<2.0); python_version >= \"3.6\" and python_version < \"4.0\"", "matplotlib (>=2,<3); python_version >= \"2.7\" and python_version < \"3.0\"", "matplotlib (>=3,<4); python_version >= \"3.6\" and python_version < \"4.0\"", "reproject (>=0.5,<0.6); python_version >= \"2.7\" and python_version < \"3.0\"", "reproject (>=0.7,<0.8); python_version >= \"3.6\" and python_version < \"4.0\"", "GPy (>=1.9,<2.0)", "backports-functools_lru_cache (>=1.5,<2.0)", "configparser (>=4.0,<5.0)", "click (>=7.0,<8.0)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "summary": "Foreground modeling/removal and Power Spectra generation", "version": "0.7.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python package for foreground removal and power spectra generation:</h1>\n<h2>Requirements</h2>\n<p>You will need the following packages:</p>\n<ul>\n<li>click</li>\n<li>numpy</li>\n<li>scipy</li>\n<li>astropy</li>\n<li>matplotlib</li>\n<li>pytable (for saving loading in h5 format)</li>\n<li>pyfftw (optional, can save time)</li>\n<li>sklearn (for PCA)</li>\n<li>GPy (for GPR)</li>\n<li>healpy,reproject (optional)</li>\n</ul>\n<h2>Usage:</h2>\n<p>This package provide a simple interface for Foreground removal and PS estimation tasks.</p>\n<p>Below we briefly document the main tasks that can be perform with this package:</p>\n<ol>\n<li>Loading your data:</li>\n</ol>\n<hr>\n<pre><code>data_cube_i = datacube.CartDataCube.load_from_fits_image(files, umin, umax, theta_fov)\n</code></pre>\n<p>This will do the following steps:</p>\n<ul>\n<li>Read Fits image file</li>\n<li>Trim image to theta_fov</li>\n<li>Convert image from Jy/PSF to K, using imager_scale_factor or WSCNORMF\nattribute to get PSF \"solid angle\" (otherwise use Gaussian approx of the PSF)</li>\n<li>FFT image per frequencies to get visibilities</li>\n<li>Keep only non-zero visibilities between umin and umax.\nand return a CartDataCube object storing the visibilities in an ungridded way.</li>\n</ul>\n<p>It is possible (recommended) to save/load to an h5 format with the save()/load() method.</p>\n<p>One can also regrid the data and make an image with the regrid() and image() method.</p>\n<ol>\n<li>Run FG removal algorithm:</li>\n</ol>\n<hr>\n<p>The main FG removal code is GPR, but PCA, GMCA (the python version) and Poly fitting are also implemented.</p>\n<p>To run GPR, one do the following:</p>\n<pre><code>data_cube_i = datacube.CartDataCube.load_from_fits_image(files_i, umin, umax, theta_fov)\ndata_cube_v = datacube.CartDataCube.load_from_fits_image(files_v, umin, umax, theta_fov)\n\neor_bin_list = pspec.EorBinList(data_cube_i.freqs)\n# Create an EoR bin 122-134 MHz with a 120-136MHz range for the FG fitting\neor_bin_list.add_freq(1, 122, 134, 120, 136)\neor = eor_bin_list.get(1)\n\ngpr_config = fitutil.GprConfig.load(gpr_config_filename)\ngpr_fit = fgfit.GprForegroundFit(gpr_config)\ngpr_res = gpr_fit.run(eor.get_slice_fg(data_cube_i), eor.get_slice_fg(data_cube_v))\n</code></pre>\n<p>This return a GprForegroundResult object which have the following attributes:</p>\n<ul>\n<li>fit: The FG model in a form of a CartDataCube object</li>\n<li>sub: The residual</li>\n<li>pre_fit: The pre-fit FG model</li>\n<li>post_fit: The post-fit FG model</li>\n</ul>\n<p>And the following method:</p>\n<ul>\n<li>get_fg_model(): return the GPR fg model</li>\n<li>get_eor_model(): return the GPR eor model</li>\n</ul>\n<p>On can then save/load those CartDataCube as needed for later processing.</p>\n<p>The CartDataCube cubes of the GPR model and residual contains the error covariance\nfrom the GPR model that need to be taken into account when generating the\npower spectra (see fitutil.get_ps_err_from_cov_err for an exemple of how this can be done.).</p>\n<p>Look at gpr_config.parset and gpr_config_v.parset for examples of GPR configuration.</p>\n<ol>\n<li>Generate Power Spectra:</li>\n</ol>\n<hr>\n<p>The PS code into account automatically the error covariance of the GPR model.</p>\n<p>It is possible to generate spatial only PS, Cylindrically averaged PS (2D) or spherically averaged PS (3D).</p>\n<pre><code># Create a PS configuration\nel = 2 * np.pi * (np.arange(data_cube.ru.min(), data_cube.ru.max(), du))\nps_conf = pspec.PowerSpectraConfig(el)\n\npb = datacube.LofarHBAPrimaryBeam()\n\n# Create a PS generation object\nps_gen = pspec.PowerSpectraCart(eor, ps_conf, pb)\n\n# Create a Spatial PS, plot it and save it to a file\nps = ps_gen.get_ps(data_cube)\nps.plot(title='Spatial power spectra')\nplt.savefig('ps.pdf')\nps.save_to_txt('ps.txt')\n\n# Create a Cylindrically averaged PS\nps2d = ps_gen.get_ps2d(data_cube)\nps2d.plot(title='Cylindrically averaged power spectra')\nplt.savefig('ps2d.pdf')\nps2d.save_to_txt('ps2d.txt')\n\n# Create a Spherically averaged PS\nkbins = np.logspace(np.log10(ps_gen.kmin), np.log10(0.5), 10)\nps3d = ps_gen.get_ps3d(kbins, data_cube)\nps3d.plot(title='Spherically averaged power spectra')\nplt.savefig('ps3d.pdf')\nps3d.save_to_txt('ps3d.txt')\n</code></pre>\n\n          </div>"}, "last_serial": 7093890, "releases": {"0.6.0": [{"comment_text": "", "digests": {"md5": "bd341b7bc0d3bc861d70ac447efaf722", "sha256": "25554e06f3f1115b1f8444508051cc53b9ad3f6b1ac56f6d97c1e1bdc137aab2"}, "downloads": -1, "filename": "ps_eor-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bd341b7bc0d3bc861d70ac447efaf722", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 83446, "upload_time": "2020-03-22T18:27:15", "upload_time_iso_8601": "2020-03-22T18:27:15.835035Z", "url": "https://files.pythonhosted.org/packages/5c/99/6da73852b4931c15b365fef7bae09d47053d65517d9cca822e5f939a285f/ps_eor-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "867f63860d11f2006da066cd4300822f", "sha256": "932e8ed99490bb8114437b49549b1a8917c76b6c72b7aefbbf79b86b0ac9a832"}, "downloads": -1, "filename": "ps_eor-0.6.0.tar.gz", "has_sig": false, "md5_digest": "867f63860d11f2006da066cd4300822f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 78477, "upload_time": "2020-03-22T18:27:18", "upload_time_iso_8601": "2020-03-22T18:27:18.487380Z", "url": "https://files.pythonhosted.org/packages/43/09/7a3ea6634a7e16890f152deb0188a2231d384347ad8d44378296e285e034/ps_eor-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "39ebd32c91405f9dd06a1986307bd2e5", "sha256": "86a3dfb7155beed02dc8b8272f00ffa19e5ada1a18e1cea6f93c1c735a850f9d"}, "downloads": -1, "filename": "ps_eor-0.7.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "39ebd32c91405f9dd06a1986307bd2e5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 94380, "upload_time": "2020-04-23T13:29:26", "upload_time_iso_8601": "2020-04-23T13:29:26.829258Z", "url": "https://files.pythonhosted.org/packages/b5/b4/72644a54cd00894fdd82619df90b42ae4862c0dcea11eea7f482b5c9f558/ps_eor-0.7.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1d1e58b04d142334f3b502102bc5c0b", "sha256": "a3fb5725fa700515dde5d4659bdfe693eaca7037fdf41c9038c6fcfb76a076dc"}, "downloads": -1, "filename": "ps_eor-0.7.0.tar.gz", "has_sig": false, "md5_digest": "f1d1e58b04d142334f3b502102bc5c0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 88641, "upload_time": "2020-04-23T13:29:28", "upload_time_iso_8601": "2020-04-23T13:29:28.674436Z", "url": "https://files.pythonhosted.org/packages/35/25/a94cd0c11fb8371b35c3c899eec9f5e640f278dc2e401378c7855138ba5e/ps_eor-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "a41f00e65c290f1a0f2c1ccdcb54015a", "sha256": "0a89916e2087c80becdfba2e05ac8116e48e2beb53f0a9a1f009afeb45bacdb1"}, "downloads": -1, "filename": "ps_eor-0.7.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a41f00e65c290f1a0f2c1ccdcb54015a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 95959, "upload_time": "2020-04-24T08:43:31", "upload_time_iso_8601": "2020-04-24T08:43:31.796080Z", "url": "https://files.pythonhosted.org/packages/8d/07/3c69e1bffeda95bb7e1e6a8881835761c0ed8f28186eaf94c3c4e37da020/ps_eor-0.7.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "955199ace72d33af05a319e3bd516241", "sha256": "2d741ee81c05e26cd30863a44ae50465892b59a43f2a41a0d1d3c27ca985423e"}, "downloads": -1, "filename": "ps_eor-0.7.1.tar.gz", "has_sig": false, "md5_digest": "955199ace72d33af05a319e3bd516241", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 92038, "upload_time": "2020-04-24T08:43:33", "upload_time_iso_8601": "2020-04-24T08:43:33.592139Z", "url": "https://files.pythonhosted.org/packages/2a/96/84fab5bcc5f188b6adcd319450f8193d75daab3fe310219e91d929b54379/ps_eor-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "71f986acf2b2322a33d985a72d2572a5", "sha256": "194109617c54f97f5ffa682b12324754cc59a15c7dfd515767766e7b6332fba8"}, "downloads": -1, "filename": "ps_eor-0.7.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "71f986acf2b2322a33d985a72d2572a5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 95986, "upload_time": "2020-04-24T14:55:55", "upload_time_iso_8601": "2020-04-24T14:55:55.834236Z", "url": "https://files.pythonhosted.org/packages/06/bd/40f9558684ddb5b75bb178f0198e28099fbe51da9238b6dbaf59837cc62f/ps_eor-0.7.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e954b8a469719ccdc13e5f3a95441665", "sha256": "ab6ef16055cc8b95d0c53865814dff9b49b80f87003124d66da2a545172aa5eb"}, "downloads": -1, "filename": "ps_eor-0.7.2.tar.gz", "has_sig": false, "md5_digest": "e954b8a469719ccdc13e5f3a95441665", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 92064, "upload_time": "2020-04-24T14:55:57", "upload_time_iso_8601": "2020-04-24T14:55:57.584417Z", "url": "https://files.pythonhosted.org/packages/16/c1/9e5f29e647c1aa0586d51d6193bc1ac894c898e525cb920057ff8af72758/ps_eor-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "8c40d418f08c4a9fb9c7ca980d388395", "sha256": "c72d5ded76e12d3ff46062061996961839795b7cd2a6fd9522c16dea82614018"}, "downloads": -1, "filename": "ps_eor-0.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c40d418f08c4a9fb9c7ca980d388395", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 96033, "upload_time": "2020-04-24T15:33:34", "upload_time_iso_8601": "2020-04-24T15:33:34.832297Z", "url": "https://files.pythonhosted.org/packages/3d/5e/a6ddebd61a134b0bbd2fe21f67822edafbfd70b96bafb4fb540569523e46/ps_eor-0.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0da70ad05d6107339b7ec33ab6a10ce", "sha256": "5fb393dfadd07f078f7028b32b934a088fb26dff2b8549406463a487936fcd35"}, "downloads": -1, "filename": "ps_eor-0.7.3.tar.gz", "has_sig": false, "md5_digest": "a0da70ad05d6107339b7ec33ab6a10ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 92130, "upload_time": "2020-04-24T15:33:36", "upload_time_iso_8601": "2020-04-24T15:33:36.242786Z", "url": "https://files.pythonhosted.org/packages/fb/00/0cab2a5997a03b1ccf79cf00f70ea1934ed0700b7342da586dcb65964c3a/ps_eor-0.7.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8c40d418f08c4a9fb9c7ca980d388395", "sha256": "c72d5ded76e12d3ff46062061996961839795b7cd2a6fd9522c16dea82614018"}, "downloads": -1, "filename": "ps_eor-0.7.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c40d418f08c4a9fb9c7ca980d388395", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 96033, "upload_time": "2020-04-24T15:33:34", "upload_time_iso_8601": "2020-04-24T15:33:34.832297Z", "url": "https://files.pythonhosted.org/packages/3d/5e/a6ddebd61a134b0bbd2fe21f67822edafbfd70b96bafb4fb540569523e46/ps_eor-0.7.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0da70ad05d6107339b7ec33ab6a10ce", "sha256": "5fb393dfadd07f078f7028b32b934a088fb26dff2b8549406463a487936fcd35"}, "downloads": -1, "filename": "ps_eor-0.7.3.tar.gz", "has_sig": false, "md5_digest": "a0da70ad05d6107339b7ec33ab6a10ce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*", "size": 92130, "upload_time": "2020-04-24T15:33:36", "upload_time_iso_8601": "2020-04-24T15:33:36.242786Z", "url": "https://files.pythonhosted.org/packages/fb/00/0cab2a5997a03b1ccf79cf00f70ea1934ed0700b7342da586dcb65964c3a/ps_eor-0.7.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:00 2020"}