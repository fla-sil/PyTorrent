{"info": {"author": "Algorand", "author_email": "pypiservice@algorand.com", "bugtrack_url": null, "classifiers": [], "description": "# py-algorand-sdk\n[![Build Status](https://travis-ci.com/algorand/py-algorand-sdk.svg?token=T43Tcse3Cxcyi7xtqmyQ&branch=master)](https://travis-ci.com/algorand/py-algorand-sdk) [![PyPI version](https://badge.fury.io/py/py-algorand-sdk.svg)](https://badge.fury.io/py/py-algorand-sdk) [![Documentation Status](https://readthedocs.org/projects/py-algorand-sdk/badge/?version=latest&style=flat)](https://py-algorand-sdk.readthedocs.io/en/latest)\n\nA python library for interacting with the Algorand network.\n\n## Installation\n\nRun ```$ pip3 install py-algorand-sdk``` to install the package.\n\nAlternatively, choose a [distribution file](https://pypi.org/project/py-algorand-sdk/#files), and run ```$ pip3 install [file name]```.\n\n## Quick start\n\nHere's a simple example you can run without a node.\n\n```python\nfrom algosdk import account, encoding\n\n# generate an account\nprivate_key, address = account.generate_account()\nprint(\"Private key:\", private_key)\nprint(\"Address:\", address)\n\n# check if the address is valid\nif encoding.is_valid_address(address):\n    print(\"The address is valid!\")\nelse:\n    print(\"The address is invalid.\")\n```\n\n## Node setup\n\nFollow the instructions in Algorand's [developer resources](https://developer.algorand.org/docs/introduction-installing-node) to install a node on your computer. \n\n## Running example.py\n\nBefore running [example.py](https://github.com/algorand/py-algorand-sdk/blob/master/example.py), start kmd:\n\n```\n$ ./goal kmd start -d [data directory]\n```\n\nNext, create a wallet and an account:\n\n```\n$ ./goal wallet new [wallet name] -d [data directory]\n```\n\n```\n$ ./goal account new -d [data directory] -w [wallet name]\n```\n\nVisit the [Algorand dispenser](https://bank.testnet.algorand.network/) and enter the account address to fund your account.\n\nNext, in [params.py](https://github.com/algorand/py-algorand-sdk/blob/master/params.py), either update the tokens and addresses, or provide a path to the data directory.\n\nYou're now ready to run example.py!\n\n## More examples\n\n### using the Wallet class\nInstead of always having to keep track of handles, IDs, and passwords for wallets, create a Wallet object to manage everything for you.\n```python\nimport params\nfrom algosdk import kmd\nfrom algosdk.wallet import Wallet\n\n# create a kmd client\nkcl = kmd.KMDClient(params.kmd_token, params.kmd_address)\n\n# create a wallet object\nwallet = Wallet(\"wallet_name\", \"wallet_password\", kcl)\n\n# get wallet information\ninfo = wallet.info()\nprint(\"Wallet name:\", info[\"wallet\"][\"name\"])\n\n# create an account\naddress = wallet.generate_key()\nprint(\"New account:\", address)\n\n# delete the account\ndelete = wallet.delete_key(address)\nprint(\"Account deleted:\", delete)\n```\n\n### backing up a wallet with mnemonic\n\n```python\nimport params\nfrom algosdk import kmd, mnemonic\nfrom algosdk.wallet import Wallet\n\n# create a kmd client\nkcl = kmd.KMDClient(params.kmd_token, params.kmd_address)\n\n# create a wallet object\nwallet = Wallet(\"wallet_name\", \"wallet_password\", kcl)\n\n# get the wallet's master derivation key\nmdk = wallet.export_master_derivation_key()\nprint(\"Master Derivation Key:\", mdk)\n\n# get the backup phrase\nbackup = mnemonic.from_master_derivation_key(mdk)\nprint(\"Wallet backup phrase:\", backup)\n```\nYou can also back up accounts using mnemonic.from_private_key().\n### recovering a wallet using a backup phrase\n\n```python\nimport params\nfrom algosdk import kmd, mnemonic\n\n# get the master derivation key from the mnemonic\nbackup = \"such chapter crane ugly uncover fun kitten duty culture giant skirt reunion pizza pill web monster upon dolphin aunt close marble dune kangaroo ability merit\"\nmdk = mnemonic.to_master_derivation_key(backup)\n\n# create a kmd client\nkcl = kmd.KMDClient(params.kmd_token, params.kmd_address)\n\n# recover the wallet by passing mdk when creating a wallet\nkcl.create_wallet(\"wallet_name\", \"wallet_password\", master_deriv_key=mdk)\n```\nYou can also recover accounts using mnemonic.to_private_key().\n\n### writing transactions to file\n\nIf you don't want to send your transactions now, you can write them to file. This works with both signed and unsigned transactions.\n```python\nimport params\nfrom algosdk import algod, kmd\nfrom algosdk.future import transaction\n\nsender = \"sender_address\"\nreceiver = \"receiver_address\"\n\n# create an algod and kmd client\nacl = algod.AlgodClient(params.algod_token, params.algod_address)\nkcl = kmd.KMDClient(params.kmd_token, params.kmd_address)\n\n# get suggested parameters\nsp = acl.suggested_params()\n\n# create a transaction\namount = 10000\ntxn = transaction.PaymentTxn(sender, sp, receiver, amount)\n\n# write to file\ntxns = [txn]\ntransaction.write_to_file([txn], \"pathtofile.tx\")\n```\n\nWe can also read transactions after writing them to file.\n\n```python\n# read from file\nread_txns = transaction.retrieve_from_file(\"pathtofile.tx\")\n```\n\n### manipulating multisig transactions\n\n```python\nimport params\nfrom algosdk import account, algod, encoding\nfrom algosdk.future import transaction\n\nacl = algod.AlgodClient(params.algod_token, params.algod_address)\n\n# generate three accounts\nprivate_key_1, account_1 = account.generate_account()\nprivate_key_2, account_2 = account.generate_account()\nprivate_key_3, account_3 = account.generate_account()\n\n# create a multisig account\nversion = 1  # multisig version\nthreshold = 2  # how many signatures are necessary\nmsig = transaction.Multisig(version, threshold, [account_1, account_2])\n\n# get suggested parameters\nsp = acl.suggested_params()\n\n# create a transaction\nsender = msig.address()\namount = 10000\ntxn = transaction.PaymentTxn(sender, sp, account_3, amount)\n\n# create a SignedTransaction object\nmtx = transaction.MultisigTransaction(txn, msig)\n\n# sign the transaction\nmtx.sign(private_key_1)\nmtx.sign(private_key_2)\n\n# print encoded transaction\nprint(encoding.msgpack_encode(mtx))\n```\n\n### working with NoteField\nWe can put things in the \"note\" field of a transaction; here's an example with an auction bid. Note that you can put any bytes you want in the \"note\" field; you don't have to use the NoteField object.\n\n```python\nfrom algosdk import algod, mnemonic, account\nfrom algosdk.future import transaction\n\npassphrase = \"teach chat health avocado broken avocado trick adapt parade witness damp gift behave harbor maze truth figure below scatter taste slow sustain aspect absorb nuclear\"\n\nacl = algod.AlgodClient(\"API-TOKEN\", \"API-Address\")\n\n# convert passphrase to secret key\nsk = mnemonic.to_private_key(passphrase)\n\n# get suggested parameters\nsp = acl.suggested_params()\n\n# Set other parameters\namount = 100000\nnote = \"Some Text\".encode()\nreceiver = \"receiver Algorand Address\"\n\n# create the transaction\ntxn = transaction.PaymentTxn(account.address_from_private_key(sk), sp, receiver, amount, note=note)\n\n# sign it\nstx = txn.sign(sk)\n\n# send it\ntxid = acl.send_transaction(stx)\n```\n\nWe can also get the NoteField object back from its bytes:\n```python\n# decode notefield\ndecoded = encoding.msgpack_decode(base64.b64encode(note_field_bytes))\nprint(decoded.dictify())\n```\n\n### working with transaction group\n```python\nimport params\nfrom algosdk import algod, kmd\nfrom algosdk.future import transaction\n\nprivate_key_sender, sender = account.generate_account()\nprivate_key_receiver, receiver = account.generate_account()\n\n# create an algod and kmd client\nacl = algod.AlgodClient(params.algod_token, params.algod_address)\nkcl = kmd.KMDClient(params.kmd_token, params.kmd_address)\n\n# get suggested parameters\nsp = acl.suggested_params()\n\n# create a transaction\namount = 10000\ntxn1 = transaction.PaymentTxn(sender, sp, receiver, amount)\ntxn2 = transaction.PaymentTxn(receiver, sp, sender, amount)\n\n# get group id and assign it to transactions\ngid = transaction.calculate_group_id([txn1, txn2])\ntxn1.transaction.group = gid\ntxn2.transaction.group = gid\n\n# sign transactions\nstxn1 = txn1.sign(private_key_sender)\nstxn2 = txn2.sign(private_key_receiver)\n\n# send them over network\nacl.send_transactions([stxn1, stxn2])\n```\n\n### working with logic sig\n\nExample below creates a LogicSig transaction signed by a program that never approves the transfer.\n\n```python\nimport params\nfrom algosdk import algod\nfrom algosdk.future import transaction\n\nprogram = b\"\\x01\\x20\\x01\\x00\\x22\"  # int 0\nlsig = transaction.LogicSig(program)\nsender = lsig.address()\n\n# create an algod client\nacl = algod.AlgodClient(params.algod_token, params.algod_address)\n\n# get suggested parameters\nsp = acl.suggested_params()\n\n# create a transaction\namount = 10000\ntxn = transaction.PaymentTxn(sender, sp, receiver, amount)\n\n# note, transaction is signed by logic only (no delegation)\n# that means sender address must match to program hash\nlstx = transaction.LogicSigTransaction(txn, lsig)\nassert lstx.verify()\n\n# send them over network\nacl.send_transaction(lstx)\n```\n\n### working with assets\nAssets can be managed by sending three types of transactions: AssetConfigTxn, AssetFreezeTxn, and AssetTransferTxn. Shown below are examples of how to use these transactions.\n#### creating an asset\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nprivate_key, address = account.generate_account() # creator\n_, freeze = account.generate_account() # account that can freeze other accounts for this asset\n_, manager = account.generate_account() # account able to update asset configuration\n_, clawback = account.generate_account() # account allowed to take this asset from any other account\n_, reserve = account.generate_account() # account that holds reserves for this asset\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\n\ntotal = 100 # how many of this asset there will be\nassetname = \"assetname\"\nunitname = \"unitname\"\nurl = \"website\"\nmetadata = bytes(\"fACPO4nRgO55j1ndAK3W6Sgc4APkcyFh\", \"ascii\") # should be a 32-byte hash\ndefault_frozen = False # whether accounts should be frozen by default\n\n# create the asset creation transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetConfigTxn(address, sp, total=total, manager=manager,\n            reserve=reserve, freeze=freeze, clawback=clawback,\n            unit_name=unitname, asset_name=assetname, url=url,\n            metadata_hash=metadata, default_frozen=default_frozen)\n\n# sign the transaction\nsigned_txn = txn.sign(private_key)\n```\n#### updating asset configuration\nThis transaction must be sent from the manager's account.\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nmanager_private_key = \"manager private key\"\nmanager_address = \"manager address\"\n_, new_freeze = account.generate_account() # account that can freeze other accounts for this asset\n_, new_manager = account.generate_account() # account able to update asset configuration\n_, new_clawback = account.generate_account() # account allowed to take this asset from any other account\n_, new_reserve = account.generate_account() # account that holds reserves for this asset\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\n\nindex = 1234 # identifying index of the asset\n\n# create the asset config transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetConfigTxn(manager_address, sp, manager=new_manager, reserve=new_reserve,\n            freeze=new_freeze, clawback=new_clawback, index=index)\n\n# sign the transaction\nsigned_txn = txn.sign(manager_private_key)\n```\n\n#### destroying an asset\nThis transaction must be sent from the creator's account.\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\ncreator_private_key = \"creator private key\"\ncreator_address = \"creator address\"\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\n\nindex = 1234 # identifying index of the asset\n\n# create the asset destroy transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetConfigTxn(creator_address, sp, index=index, strict_empty_address_check=False)\n\n# sign the transaction\nsigned_txn = txn.sign(creator_private_key)\n```\n\n#### freezing or unfreezing an account\nThis transaction must be sent from the account specified as the freeze manager for the asset.\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nfreeze_private_key = \"freeze private key\"\nfreeze_address = \"freeze address\"\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\nfreeze_target = \"address to be frozen or unfrozen\"\n\nindex = 1234 # identifying index of the asset\n\n# create the asset freeze transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetFreezeTxn(freeze_address, sp, index=index, target=freeze_target,\n            new_freeze_state=True)\n\n# sign the transaction\nsigned_txn = txn.sign(freeze_private_key)\n```\n\n#### sending assets\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nsender_private_key = \"freeze private key\"\nsender_address = \"freeze address\"\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\nclose_assets_to = \"account to close assets to\"\nreceiver = \"account to receive assets\"\namount = 100 # amount of assets to transfer\n\nindex = 1234 # identifying index of the asset\n\n# create the asset transfer transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetTransferTxn(sender_address, sp,\n                receiver, amount, index, close_assets_to)\n\n# sign the transaction\nsigned_txn = txn.sign(sender_private_key)\n```\n\n#### accepting assets\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nprivate_key = \"freeze private key\"\naddress = \"freeze address\"\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\nreceiver = address # to start accepting assets, set receiver to sender\namount = 0 # to start accepting assets, set amount to 0\n\nindex = 1234 # identifying index of the asset\n\n# create the asset accept transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetTransferTxn(address, sp,\n                receiver, amount, index)\n\n# sign the transaction\nsigned_txn = txn.sign(private_key)\n```\n\n#### revoking assets\nThis transaction must be sent by the asset's clawback manager.\n```python\nfrom algosdk import account\nfrom algosdk.future import transaction\n\nclawback_private_key = \"clawback private key\"\nclawback_address = \"clawback address\"\n\nfee_per_byte = 10\nfirst_valid_round = 1000\nlast_valid_round = 2000\ngenesis_hash = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"\nreceiver = \"receiver address\" # where to send the revoked assets\ntarget = \"revocation target\" # address to revoke assets from\namount = 100\n\nindex = 1234 # identifying index of the asset\n\n# create the asset transfer transaction\nsp = transaction.SuggestedParams(fee_per_byte, first_valid_round, last_valid_round, genesis_hash)\ntxn = transaction.AssetTransferTxn(clawback_address, sp,\n                receiver, amount, index, revocation_target=target)\n\n# sign the transaction\nsigned_txn = txn.sign(clawback_private_key)\n```\n\n## Documentation\nDocumentation for the Python SDK is available at [py-algorand-sdk.readthedocs.io](https://py-algorand-sdk.readthedocs.io/en/latest/).\n\n## License\npy-algorand-sdk is licensed under a MIT license. See the [LICENSE](https://github.com/algorand/py-algorand-sdk/blob/master/LICENSE) file for details.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "py-algorand-sdk", "package_url": "https://pypi.org/project/py-algorand-sdk/", "platform": "", "project_url": "https://pypi.org/project/py-algorand-sdk/", "project_urls": {"Source": "https://github.com/algorand/py-algorand-sdk"}, "release_url": "https://pypi.org/project/py-algorand-sdk/1.2.1/", "requires_dist": ["pynacl", "pycryptodomex (>=3.6.0)", "msgpack"], "requires_python": ">=3.5", "summary": "Algorand SDK in Python", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-algorand-sdk</h1>\n<p><a href=\"https://travis-ci.com/algorand/py-algorand-sdk\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53accbb334edafdbc30f65d0b54843efa38a6fb8/68747470733a2f2f7472617669732d63692e636f6d2f616c676f72616e642f70792d616c676f72616e642d73646b2e7376673f746f6b656e3d54343354637365334378637969377874716d7951266272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/py-algorand-sdk\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c0df6f035430d22c844597e0ddb03ebecd4daf8/68747470733a2f2f62616467652e667572792e696f2f70792f70792d616c676f72616e642d73646b2e737667\"></a> <a href=\"https://py-algorand-sdk.readthedocs.io/en/latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7193e532238cc692096df21f57f178fe7f78a47f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70792d616c676f72616e642d73646b2f62616467652f3f76657273696f6e3d6c6174657374267374796c653d666c6174\"></a></p>\n<p>A python library for interacting with the Algorand network.</p>\n<h2>Installation</h2>\n<p>Run <code>$ pip3 install py-algorand-sdk</code> to install the package.</p>\n<p>Alternatively, choose a <a href=\"https://pypi.org/project/py-algorand-sdk/#files\" rel=\"nofollow\">distribution file</a>, and run <code>$ pip3 install [file name]</code>.</p>\n<h2>Quick start</h2>\n<p>Here's a simple example you can run without a node.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span><span class=\"p\">,</span> <span class=\"n\">encoding</span>\n\n<span class=\"c1\"># generate an account</span>\n<span class=\"n\">private_key</span><span class=\"p\">,</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Private key:\"</span><span class=\"p\">,</span> <span class=\"n\">private_key</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Address:\"</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># check if the address is valid</span>\n<span class=\"k\">if</span> <span class=\"n\">encoding</span><span class=\"o\">.</span><span class=\"n\">is_valid_address</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The address is valid!\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The address is invalid.\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Node setup</h2>\n<p>Follow the instructions in Algorand's <a href=\"https://developer.algorand.org/docs/introduction-installing-node\" rel=\"nofollow\">developer resources</a> to install a node on your computer.</p>\n<h2>Running example.py</h2>\n<p>Before running <a href=\"https://github.com/algorand/py-algorand-sdk/blob/master/example.py\" rel=\"nofollow\">example.py</a>, start kmd:</p>\n<pre><code>$ ./goal kmd start -d [data directory]\n</code></pre>\n<p>Next, create a wallet and an account:</p>\n<pre><code>$ ./goal wallet new [wallet name] -d [data directory]\n</code></pre>\n<pre><code>$ ./goal account new -d [data directory] -w [wallet name]\n</code></pre>\n<p>Visit the <a href=\"https://bank.testnet.algorand.network/\" rel=\"nofollow\">Algorand dispenser</a> and enter the account address to fund your account.</p>\n<p>Next, in <a href=\"https://github.com/algorand/py-algorand-sdk/blob/master/params.py\" rel=\"nofollow\">params.py</a>, either update the tokens and addresses, or provide a path to the data directory.</p>\n<p>You're now ready to run example.py!</p>\n<h2>More examples</h2>\n<h3>using the Wallet class</h3>\n<p>Instead of always having to keep track of handles, IDs, and passwords for wallets, create a Wallet object to manage everything for you.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">kmd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"c1\"># create a kmd client</span>\n<span class=\"n\">kcl</span> <span class=\"o\">=</span> <span class=\"n\">kmd</span><span class=\"o\">.</span><span class=\"n\">KMDClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a wallet object</span>\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"p\">(</span><span class=\"s2\">\"wallet_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wallet_password\"</span><span class=\"p\">,</span> <span class=\"n\">kcl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get wallet information</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Wallet name:\"</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"s2\">\"wallet\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># create an account</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">generate_key</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"New account:\"</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># delete the account</span>\n<span class=\"n\">delete</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">delete_key</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Account deleted:\"</span><span class=\"p\">,</span> <span class=\"n\">delete</span><span class=\"p\">)</span>\n</pre>\n<h3>backing up a wallet with mnemonic</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">kmd</span><span class=\"p\">,</span> <span class=\"n\">mnemonic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.wallet</span> <span class=\"kn\">import</span> <span class=\"n\">Wallet</span>\n\n<span class=\"c1\"># create a kmd client</span>\n<span class=\"n\">kcl</span> <span class=\"o\">=</span> <span class=\"n\">kmd</span><span class=\"o\">.</span><span class=\"n\">KMDClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a wallet object</span>\n<span class=\"n\">wallet</span> <span class=\"o\">=</span> <span class=\"n\">Wallet</span><span class=\"p\">(</span><span class=\"s2\">\"wallet_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wallet_password\"</span><span class=\"p\">,</span> <span class=\"n\">kcl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the wallet's master derivation key</span>\n<span class=\"n\">mdk</span> <span class=\"o\">=</span> <span class=\"n\">wallet</span><span class=\"o\">.</span><span class=\"n\">export_master_derivation_key</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Master Derivation Key:\"</span><span class=\"p\">,</span> <span class=\"n\">mdk</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the backup phrase</span>\n<span class=\"n\">backup</span> <span class=\"o\">=</span> <span class=\"n\">mnemonic</span><span class=\"o\">.</span><span class=\"n\">from_master_derivation_key</span><span class=\"p\">(</span><span class=\"n\">mdk</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Wallet backup phrase:\"</span><span class=\"p\">,</span> <span class=\"n\">backup</span><span class=\"p\">)</span>\n</pre>\n<p>You can also back up accounts using mnemonic.from_private_key().</p>\n<h3>recovering a wallet using a backup phrase</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">kmd</span><span class=\"p\">,</span> <span class=\"n\">mnemonic</span>\n\n<span class=\"c1\"># get the master derivation key from the mnemonic</span>\n<span class=\"n\">backup</span> <span class=\"o\">=</span> <span class=\"s2\">\"such chapter crane ugly uncover fun kitten duty culture giant skirt reunion pizza pill web monster upon dolphin aunt close marble dune kangaroo ability merit\"</span>\n<span class=\"n\">mdk</span> <span class=\"o\">=</span> <span class=\"n\">mnemonic</span><span class=\"o\">.</span><span class=\"n\">to_master_derivation_key</span><span class=\"p\">(</span><span class=\"n\">backup</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a kmd client</span>\n<span class=\"n\">kcl</span> <span class=\"o\">=</span> <span class=\"n\">kmd</span><span class=\"o\">.</span><span class=\"n\">KMDClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># recover the wallet by passing mdk when creating a wallet</span>\n<span class=\"n\">kcl</span><span class=\"o\">.</span><span class=\"n\">create_wallet</span><span class=\"p\">(</span><span class=\"s2\">\"wallet_name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wallet_password\"</span><span class=\"p\">,</span> <span class=\"n\">master_deriv_key</span><span class=\"o\">=</span><span class=\"n\">mdk</span><span class=\"p\">)</span>\n</pre>\n<p>You can also recover accounts using mnemonic.to_private_key().</p>\n<h3>writing transactions to file</h3>\n<p>If you don't want to send your transactions now, you can write them to file. This works with both signed and unsigned transactions.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">algod</span><span class=\"p\">,</span> <span class=\"n\">kmd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"s2\">\"sender_address\"</span>\n<span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"s2\">\"receiver_address\"</span>\n\n<span class=\"c1\"># create an algod and kmd client</span>\n<span class=\"n\">acl</span> <span class=\"o\">=</span> <span class=\"n\">algod</span><span class=\"o\">.</span><span class=\"n\">AlgodClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_address</span><span class=\"p\">)</span>\n<span class=\"n\">kcl</span> <span class=\"o\">=</span> <span class=\"n\">kmd</span><span class=\"o\">.</span><span class=\"n\">KMDClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get suggested parameters</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">suggested_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a transaction</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># write to file</span>\n<span class=\"n\">txns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">txn</span><span class=\"p\">]</span>\n<span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">write_to_file</span><span class=\"p\">([</span><span class=\"n\">txn</span><span class=\"p\">],</span> <span class=\"s2\">\"pathtofile.tx\"</span><span class=\"p\">)</span>\n</pre>\n<p>We can also read transactions after writing them to file.</p>\n<pre><span class=\"c1\"># read from file</span>\n<span class=\"n\">read_txns</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">retrieve_from_file</span><span class=\"p\">(</span><span class=\"s2\">\"pathtofile.tx\"</span><span class=\"p\">)</span>\n</pre>\n<h3>manipulating multisig transactions</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span><span class=\"p\">,</span> <span class=\"n\">algod</span><span class=\"p\">,</span> <span class=\"n\">encoding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">acl</span> <span class=\"o\">=</span> <span class=\"n\">algod</span><span class=\"o\">.</span><span class=\"n\">AlgodClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># generate three accounts</span>\n<span class=\"n\">private_key_1</span><span class=\"p\">,</span> <span class=\"n\">account_1</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n<span class=\"n\">private_key_2</span><span class=\"p\">,</span> <span class=\"n\">account_2</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n<span class=\"n\">private_key_3</span><span class=\"p\">,</span> <span class=\"n\">account_3</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a multisig account</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># multisig version</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\"># how many signatures are necessary</span>\n<span class=\"n\">msig</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">Multisig</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">account_1</span><span class=\"p\">,</span> <span class=\"n\">account_2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># get suggested parameters</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">suggested_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a transaction</span>\n<span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">msig</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">()</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">account_3</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a SignedTransaction object</span>\n<span class=\"n\">mtx</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">MultisigTransaction</span><span class=\"p\">(</span><span class=\"n\">txn</span><span class=\"p\">,</span> <span class=\"n\">msig</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">mtx</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key_1</span><span class=\"p\">)</span>\n<span class=\"n\">mtx</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key_2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># print encoded transaction</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">.</span><span class=\"n\">msgpack_encode</span><span class=\"p\">(</span><span class=\"n\">mtx</span><span class=\"p\">))</span>\n</pre>\n<h3>working with NoteField</h3>\n<p>We can put things in the \"note\" field of a transaction; here's an example with an auction bid. Note that you can put any bytes you want in the \"note\" field; you don't have to use the NoteField object.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">algod</span><span class=\"p\">,</span> <span class=\"n\">mnemonic</span><span class=\"p\">,</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">passphrase</span> <span class=\"o\">=</span> <span class=\"s2\">\"teach chat health avocado broken avocado trick adapt parade witness damp gift behave harbor maze truth figure below scatter taste slow sustain aspect absorb nuclear\"</span>\n\n<span class=\"n\">acl</span> <span class=\"o\">=</span> <span class=\"n\">algod</span><span class=\"o\">.</span><span class=\"n\">AlgodClient</span><span class=\"p\">(</span><span class=\"s2\">\"API-TOKEN\"</span><span class=\"p\">,</span> <span class=\"s2\">\"API-Address\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert passphrase to secret key</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">mnemonic</span><span class=\"o\">.</span><span class=\"n\">to_private_key</span><span class=\"p\">(</span><span class=\"n\">passphrase</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get suggested parameters</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">suggested_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Set other parameters</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>\n<span class=\"n\">note</span> <span class=\"o\">=</span> <span class=\"s2\">\"Some Text\"</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n<span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"s2\">\"receiver Algorand Address\"</span>\n\n<span class=\"c1\"># create the transaction</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">address_from_private_key</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">),</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">note</span><span class=\"o\">=</span><span class=\"n\">note</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign it</span>\n<span class=\"n\">stx</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># send it</span>\n<span class=\"n\">txid</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">send_transaction</span><span class=\"p\">(</span><span class=\"n\">stx</span><span class=\"p\">)</span>\n</pre>\n<p>We can also get the NoteField object back from its bytes:</p>\n<pre><span class=\"c1\"># decode notefield</span>\n<span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">encoding</span><span class=\"o\">.</span><span class=\"n\">msgpack_decode</span><span class=\"p\">(</span><span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64encode</span><span class=\"p\">(</span><span class=\"n\">note_field_bytes</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"o\">.</span><span class=\"n\">dictify</span><span class=\"p\">())</span>\n</pre>\n<h3>working with transaction group</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">algod</span><span class=\"p\">,</span> <span class=\"n\">kmd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">private_key_sender</span><span class=\"p\">,</span> <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n<span class=\"n\">private_key_receiver</span><span class=\"p\">,</span> <span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create an algod and kmd client</span>\n<span class=\"n\">acl</span> <span class=\"o\">=</span> <span class=\"n\">algod</span><span class=\"o\">.</span><span class=\"n\">AlgodClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_address</span><span class=\"p\">)</span>\n<span class=\"n\">kcl</span> <span class=\"o\">=</span> <span class=\"n\">kmd</span><span class=\"o\">.</span><span class=\"n\">KMDClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">kmd_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get suggested parameters</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">suggested_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a transaction</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">txn1</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n<span class=\"n\">txn2</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get group id and assign it to transactions</span>\n<span class=\"n\">gid</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">calculate_group_id</span><span class=\"p\">([</span><span class=\"n\">txn1</span><span class=\"p\">,</span> <span class=\"n\">txn2</span><span class=\"p\">])</span>\n<span class=\"n\">txn1</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">gid</span>\n<span class=\"n\">txn2</span><span class=\"o\">.</span><span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">gid</span>\n\n<span class=\"c1\"># sign transactions</span>\n<span class=\"n\">stxn1</span> <span class=\"o\">=</span> <span class=\"n\">txn1</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key_sender</span><span class=\"p\">)</span>\n<span class=\"n\">stxn2</span> <span class=\"o\">=</span> <span class=\"n\">txn2</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key_receiver</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># send them over network</span>\n<span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">send_transactions</span><span class=\"p\">([</span><span class=\"n\">stxn1</span><span class=\"p\">,</span> <span class=\"n\">stxn2</span><span class=\"p\">])</span>\n</pre>\n<h3>working with logic sig</h3>\n<p>Example below creates a LogicSig transaction signed by a program that never approves the transfer.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">params</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">algod</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">program</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">\"</span><span class=\"se\">\\x01\\x20\\x01\\x00\\x22</span><span class=\"s2\">\"</span>  <span class=\"c1\"># int 0</span>\n<span class=\"n\">lsig</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">LogicSig</span><span class=\"p\">(</span><span class=\"n\">program</span><span class=\"p\">)</span>\n<span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">lsig</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create an algod client</span>\n<span class=\"n\">acl</span> <span class=\"o\">=</span> <span class=\"n\">algod</span><span class=\"o\">.</span><span class=\"n\">AlgodClient</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_token</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">algod_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get suggested parameters</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">suggested_params</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a transaction</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">PaymentTxn</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># note, transaction is signed by logic only (no delegation)</span>\n<span class=\"c1\"># that means sender address must match to program hash</span>\n<span class=\"n\">lstx</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">LogicSigTransaction</span><span class=\"p\">(</span><span class=\"n\">txn</span><span class=\"p\">,</span> <span class=\"n\">lsig</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">lstx</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># send them over network</span>\n<span class=\"n\">acl</span><span class=\"o\">.</span><span class=\"n\">send_transaction</span><span class=\"p\">(</span><span class=\"n\">lstx</span><span class=\"p\">)</span>\n</pre>\n<h3>working with assets</h3>\n<p>Assets can be managed by sending three types of transactions: AssetConfigTxn, AssetFreezeTxn, and AssetTransferTxn. Shown below are examples of how to use these transactions.</p>\n<h4>creating an asset</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">private_key</span><span class=\"p\">,</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># creator</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">freeze</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account that can freeze other accounts for this asset</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account able to update asset configuration</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">clawback</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account allowed to take this asset from any other account</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">reserve</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account that holds reserves for this asset</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"c1\"># how many of this asset there will be</span>\n<span class=\"n\">assetname</span> <span class=\"o\">=</span> <span class=\"s2\">\"assetname\"</span>\n<span class=\"n\">unitname</span> <span class=\"o\">=</span> <span class=\"s2\">\"unitname\"</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"website\"</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"s2\">\"fACPO4nRgO55j1ndAK3W6Sgc4APkcyFh\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ascii\"</span><span class=\"p\">)</span> <span class=\"c1\"># should be a 32-byte hash</span>\n<span class=\"n\">default_frozen</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> <span class=\"c1\"># whether accounts should be frozen by default</span>\n\n<span class=\"c1\"># create the asset creation transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetConfigTxn</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"n\">manager</span><span class=\"p\">,</span>\n            <span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"n\">reserve</span><span class=\"p\">,</span> <span class=\"n\">freeze</span><span class=\"o\">=</span><span class=\"n\">freeze</span><span class=\"p\">,</span> <span class=\"n\">clawback</span><span class=\"o\">=</span><span class=\"n\">clawback</span><span class=\"p\">,</span>\n            <span class=\"n\">unit_name</span><span class=\"o\">=</span><span class=\"n\">unitname</span><span class=\"p\">,</span> <span class=\"n\">asset_name</span><span class=\"o\">=</span><span class=\"n\">assetname</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span>\n            <span class=\"n\">metadata_hash</span><span class=\"o\">=</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"n\">default_frozen</span><span class=\"o\">=</span><span class=\"n\">default_frozen</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>updating asset configuration</h4>\n<p>This transaction must be sent from the manager's account.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">manager_private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"manager private key\"</span>\n<span class=\"n\">manager_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"manager address\"</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">new_freeze</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account that can freeze other accounts for this asset</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">new_manager</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account able to update asset configuration</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">new_clawback</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account allowed to take this asset from any other account</span>\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">new_reserve</span> <span class=\"o\">=</span> <span class=\"n\">account</span><span class=\"o\">.</span><span class=\"n\">generate_account</span><span class=\"p\">()</span> <span class=\"c1\"># account that holds reserves for this asset</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset config transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetConfigTxn</span><span class=\"p\">(</span><span class=\"n\">manager_address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"n\">new_manager</span><span class=\"p\">,</span> <span class=\"n\">reserve</span><span class=\"o\">=</span><span class=\"n\">new_reserve</span><span class=\"p\">,</span>\n            <span class=\"n\">freeze</span><span class=\"o\">=</span><span class=\"n\">new_freeze</span><span class=\"p\">,</span> <span class=\"n\">clawback</span><span class=\"o\">=</span><span class=\"n\">new_clawback</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">manager_private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>destroying an asset</h4>\n<p>This transaction must be sent from the creator's account.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">creator_private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"creator private key\"</span>\n<span class=\"n\">creator_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"creator address\"</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset destroy transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetConfigTxn</span><span class=\"p\">(</span><span class=\"n\">creator_address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">strict_empty_address_check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">creator_private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>freezing or unfreezing an account</h4>\n<p>This transaction must be sent from the account specified as the freeze manager for the asset.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">freeze_private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze private key\"</span>\n<span class=\"n\">freeze_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze address\"</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n<span class=\"n\">freeze_target</span> <span class=\"o\">=</span> <span class=\"s2\">\"address to be frozen or unfrozen\"</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset freeze transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetFreezeTxn</span><span class=\"p\">(</span><span class=\"n\">freeze_address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">freeze_target</span><span class=\"p\">,</span>\n            <span class=\"n\">new_freeze_state</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">freeze_private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>sending assets</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">sender_private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze private key\"</span>\n<span class=\"n\">sender_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze address\"</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n<span class=\"n\">close_assets_to</span> <span class=\"o\">=</span> <span class=\"s2\">\"account to close assets to\"</span>\n<span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"s2\">\"account to receive assets\"</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">100</span> <span class=\"c1\"># amount of assets to transfer</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset transfer transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetTransferTxn</span><span class=\"p\">(</span><span class=\"n\">sender_address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span>\n                <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">close_assets_to</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">sender_private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>accepting assets</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze private key\"</span>\n<span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"s2\">\"freeze address\"</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n<span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"n\">address</span> <span class=\"c1\"># to start accepting assets, set receiver to sender</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># to start accepting assets, set amount to 0</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset accept transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetTransferTxn</span><span class=\"p\">(</span><span class=\"n\">address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span>\n                <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"p\">)</span>\n</pre>\n<h4>revoking assets</h4>\n<p>This transaction must be sent by the asset's clawback manager.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">algosdk</span> <span class=\"kn\">import</span> <span class=\"n\">account</span>\n<span class=\"kn\">from</span> <span class=\"nn\">algosdk.future</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">clawback_private_key</span> <span class=\"o\">=</span> <span class=\"s2\">\"clawback private key\"</span>\n<span class=\"n\">clawback_address</span> <span class=\"o\">=</span> <span class=\"s2\">\"clawback address\"</span>\n\n<span class=\"n\">fee_per_byte</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">first_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">last_valid_round</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>\n<span class=\"n\">genesis_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\"</span>\n<span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"s2\">\"receiver address\"</span> <span class=\"c1\"># where to send the revoked assets</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s2\">\"revocation target\"</span> <span class=\"c1\"># address to revoke assets from</span>\n<span class=\"n\">amount</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1234</span> <span class=\"c1\"># identifying index of the asset</span>\n\n<span class=\"c1\"># create the asset transfer transaction</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">SuggestedParams</span><span class=\"p\">(</span><span class=\"n\">fee_per_byte</span><span class=\"p\">,</span> <span class=\"n\">first_valid_round</span><span class=\"p\">,</span> <span class=\"n\">last_valid_round</span><span class=\"p\">,</span> <span class=\"n\">genesis_hash</span><span class=\"p\">)</span>\n<span class=\"n\">txn</span> <span class=\"o\">=</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">AssetTransferTxn</span><span class=\"p\">(</span><span class=\"n\">clawback_address</span><span class=\"p\">,</span> <span class=\"n\">sp</span><span class=\"p\">,</span>\n                <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">revocation_target</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign the transaction</span>\n<span class=\"n\">signed_txn</span> <span class=\"o\">=</span> <span class=\"n\">txn</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">clawback_private_key</span><span class=\"p\">)</span>\n</pre>\n<h2>Documentation</h2>\n<p>Documentation for the Python SDK is available at <a href=\"https://py-algorand-sdk.readthedocs.io/en/latest/\" rel=\"nofollow\">py-algorand-sdk.readthedocs.io</a>.</p>\n<h2>License</h2>\n<p>py-algorand-sdk is licensed under a MIT license. See the <a href=\"https://github.com/algorand/py-algorand-sdk/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for details.</p>\n\n          </div>"}, "last_serial": 6881676, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "a1385b38dfc863e51190ed4b23d160dc", "sha256": "bb1e9a9a969b69faff6712c6dff10e7b60c3f212bb4084aab3474ad36f3a2e35"}, "downloads": -1, "filename": "py_algorand_sdk-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a1385b38dfc863e51190ed4b23d160dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25263, "upload_time": "2019-06-26T21:22:47", "upload_time_iso_8601": "2019-06-26T21:22:47.062573Z", "url": "https://files.pythonhosted.org/packages/5e/b4/7768544e5529a498876a7ad11b96febe8ebef00e23e98a9aa89c508a9d8c/py_algorand_sdk-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "561f1e83ce65ecda460426bd5a7281b4", "sha256": "6e16dbd4947b57a3b71508445344f806df2f3f0bc0a05fc97f8b522470568c9a"}, "downloads": -1, "filename": "py-algorand-sdk-0.0.0.tar.gz", "has_sig": false, "md5_digest": "561f1e83ce65ecda460426bd5a7281b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20687, "upload_time": "2019-06-26T21:22:49", "upload_time_iso_8601": "2019-06-26T21:22:49.022567Z", "url": "https://files.pythonhosted.org/packages/bd/62/ab1ed4735fbab2e5314dd035468459494be32a08e22214f3e60d7a1ff2f3/py-algorand-sdk-0.0.0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d0a886fc805144a576c6482789f76c29", "sha256": "88792133c2d75c6452ed4f13c3cf099dccbcc8e1d08f28b2ac4628b4a1450234"}, "downloads": -1, "filename": "py_algorand_sdk-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d0a886fc805144a576c6482789f76c29", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26509, "upload_time": "2019-06-28T13:41:47", "upload_time_iso_8601": "2019-06-28T13:41:47.717614Z", "url": "https://files.pythonhosted.org/packages/a3/c0/9ea320191758588eb955fd446689a63d9ee3710c3e75907a44894bf9d506/py_algorand_sdk-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9328b5c2603e65cb50a8d9bf461c0928", "sha256": "28b27522c18a43af3053e9d2657a0a6bd2239f5599e2e6a38bea3f081dc344fd"}, "downloads": -1, "filename": "py-algorand-sdk-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9328b5c2603e65cb50a8d9bf461c0928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23340, "upload_time": "2019-06-28T13:42:04", "upload_time_iso_8601": "2019-06-28T13:42:04.554790Z", "url": "https://files.pythonhosted.org/packages/40/6f/2d667ddb486ff255d73f7484d5c51e47943baac0fc0a8b41aabedc14d6dd/py-algorand-sdk-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "61fe431f60f9d06e782314396829ff21", "sha256": "ccb0fb906c7de2e25d61cd8721da9a751305a6e275c797a0ab40e7edc87ab24b"}, "downloads": -1, "filename": "py_algorand_sdk-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "61fe431f60f9d06e782314396829ff21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26519, "upload_time": "2019-07-02T14:54:02", "upload_time_iso_8601": "2019-07-02T14:54:02.634817Z", "url": "https://files.pythonhosted.org/packages/a6/41/992bf0489d0e562cb555bcc8421a09f04a854bfef261a94eff1f5803e6d3/py_algorand_sdk-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcbde01037dd9f2203a0fbca01b496b4", "sha256": "c675d06ac8da8d150df1db6dfb49f5170cfbaf0612221677fc5427bcc9927bec"}, "downloads": -1, "filename": "py-algorand-sdk-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bcbde01037dd9f2203a0fbca01b496b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23360, "upload_time": "2019-07-02T14:54:03", "upload_time_iso_8601": "2019-07-02T14:54:03.857814Z", "url": "https://files.pythonhosted.org/packages/2a/9b/731ef03f0b6fe4ddca698312c5834304ee1200c1e67260d58532bac2a625/py-algorand-sdk-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "39cc3715ce2e779acd1116ef8891b5d0", "sha256": "7c39d0fbc6b174e409d94560517edcb447fcd65db3dddb982e22804d5b723c23"}, "downloads": -1, "filename": "py_algorand_sdk-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "39cc3715ce2e779acd1116ef8891b5d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26588, "upload_time": "2019-07-05T21:19:33", "upload_time_iso_8601": "2019-07-05T21:19:33.605806Z", "url": "https://files.pythonhosted.org/packages/bf/b1/74b95c403066ac7df81348e66cc1d8446aa780afcd1c660f57b98a5e32a7/py_algorand_sdk-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6f2df164613f91441ce0650adca89047", "sha256": "b4c00cfcead661ed4beff6961f0f98c67e457734c27260746e2322a2ce7e1de1"}, "downloads": -1, "filename": "py-algorand-sdk-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6f2df164613f91441ce0650adca89047", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23395, "upload_time": "2019-07-05T21:19:35", "upload_time_iso_8601": "2019-07-05T21:19:35.081993Z", "url": "https://files.pythonhosted.org/packages/bb/a2/260066be47caa21d78932ab2b7998c89eab7c2b6022a0b5e111a43271c0b/py-algorand-sdk-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d60105d2734bd576754617a386244d6f", "sha256": "c96e973493773076c41f4f0cd65afc8e562f110355d6ab1273634fc30173164f"}, "downloads": -1, "filename": "py_algorand_sdk-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d60105d2734bd576754617a386244d6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26297, "upload_time": "2019-07-15T17:21:59", "upload_time_iso_8601": "2019-07-15T17:21:59.670136Z", "url": "https://files.pythonhosted.org/packages/e3/f1/c30d4fc26a47570a8291227b44362d4f866ddbd94ced6577409aaebfd4b5/py_algorand_sdk-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0276048413135cb94ec37b2d2753b673", "sha256": "81cf7c2b091e55149b58016678593b3d4c4621b103a45a31ddf3674a5eb4502a"}, "downloads": -1, "filename": "py-algorand-sdk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0276048413135cb94ec37b2d2753b673", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23122, "upload_time": "2019-07-15T17:22:02", "upload_time_iso_8601": "2019-07-15T17:22:02.992854Z", "url": "https://files.pythonhosted.org/packages/98/53/5da70d3cc1ded5221c86f4985b704390daca1332d76cb20d94e31d363ff1/py-algorand-sdk-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7809633dd71159b271d632edf0260023", "sha256": "a76478dd2cae24a6bc081709d9d8a68eca62db578980f855182921f2394f0995"}, "downloads": -1, "filename": "py_algorand_sdk-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7809633dd71159b271d632edf0260023", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26587, "upload_time": "2019-07-18T17:06:26", "upload_time_iso_8601": "2019-07-18T17:06:26.602456Z", "url": "https://files.pythonhosted.org/packages/76/ef/0873928b938848ee78f49b9b0f81fe84a343c499a301f2a2df0d957a46ae/py_algorand_sdk-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b904da24e496ec461df12a565e7aee3b", "sha256": "3e02b7a878d5f5035b5aae58dd8832c0b7506267da1d90507d6ff0c009c13e9f"}, "downloads": -1, "filename": "py-algorand-sdk-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b904da24e496ec461df12a565e7aee3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23763, "upload_time": "2019-07-18T17:06:28", "upload_time_iso_8601": "2019-07-18T17:06:28.180606Z", "url": "https://files.pythonhosted.org/packages/14/d4/f53d6eb4e65035e8a6bd57f37bb4ad2cf601e7ee56cce57d517bc7266c01/py-algorand-sdk-0.2.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "e162a553c3ffc7c7778ce3c385fb9942", "sha256": "1c3989c7023aa65d957a5bc79ec676c91407130b2615a1461be74474c2a4e736"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e162a553c3ffc7c7778ce3c385fb9942", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27286, "upload_time": "2019-07-23T18:22:48", "upload_time_iso_8601": "2019-07-23T18:22:48.018431Z", "url": "https://files.pythonhosted.org/packages/61/2b/b19d9b513749599efdc669f0dd358a67195314fb986daf69fc4f8c9b9648/py_algorand_sdk-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c46ff44e6c14c702ebe6e765c05fd25b", "sha256": "47f620d74f6664e846fb7315486253e688fb98b0a6a6fe71fd4c887ef5bd4f13"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c46ff44e6c14c702ebe6e765c05fd25b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24232, "upload_time": "2019-07-23T18:22:55", "upload_time_iso_8601": "2019-07-23T18:22:55.369297Z", "url": "https://files.pythonhosted.org/packages/02/a8/504d1df57f2ca633ffec3b8d634f1b69fb39b5f44bc501ceaed5f9ae8e08/py-algorand-sdk-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b6ed520a0c06a11061037232348145fe", "sha256": "91e38e0490d7a9d64dc405e8a60139aae58debebbce89b35446e7a33d286e25c"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b6ed520a0c06a11061037232348145fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27779, "upload_time": "2019-07-30T16:48:50", "upload_time_iso_8601": "2019-07-30T16:48:50.037769Z", "url": "https://files.pythonhosted.org/packages/46/88/a02c6f070a72b1fc5793df8f7fbdf7a0121560d34000d20075e9fc73b3a3/py_algorand_sdk-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0630da9373eb5cbe334b4c74d2c9c735", "sha256": "ed04626b8867d47d4bea0bf08ffa962f0471b18da7d128aa441b00a3f83ba926"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0630da9373eb5cbe334b4c74d2c9c735", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25307, "upload_time": "2019-07-30T16:48:51", "upload_time_iso_8601": "2019-07-30T16:48:51.505991Z", "url": "https://files.pythonhosted.org/packages/ca/d6/2c83cdb030e720c06790549bb78875b9bce779d18380f02745ffbccbb567/py-algorand-sdk-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e4e7d8899547481ccaf379d6017ad647", "sha256": "65f8928c4bfbeedf1fc3c92afefb7a16756d8fb29948b7b4bd0819a22d0bb9a7"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e4e7d8899547481ccaf379d6017ad647", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28184, "upload_time": "2019-08-07T19:15:54", "upload_time_iso_8601": "2019-08-07T19:15:54.027182Z", "url": "https://files.pythonhosted.org/packages/80/69/20e944b821b3089eb8a2f21fc286da45504443e24e7e341db32ef7962f39/py_algorand_sdk-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a949f065b8b9c325dfe7d05d52d96a1", "sha256": "4fe4b29cc0ab56d067e0f7635b9d2261cca38daceb3bea34641a00d7f16c9814"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.2.tar.gz", "has_sig": false, "md5_digest": "4a949f065b8b9c325dfe7d05d52d96a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25649, "upload_time": "2019-08-07T19:15:55", "upload_time_iso_8601": "2019-08-07T19:15:55.783623Z", "url": "https://files.pythonhosted.org/packages/df/de/88edaede3e3d60157e20019df809f85864e4b537f8b5496b8ea556df502a/py-algorand-sdk-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "7ea74e288655558d4f4ee6c421e6ffe6", "sha256": "18690d80d0472b333f9ca106a70c5819c95f492ca986544e67aa1bfa69377256"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7ea74e288655558d4f4ee6c421e6ffe6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29088, "upload_time": "2019-08-16T17:52:32", "upload_time_iso_8601": "2019-08-16T17:52:32.979132Z", "url": "https://files.pythonhosted.org/packages/38/23/1770ebe70f198d0c87782c847f30e40bdb09d0c4ef6df794c62f21e0dd4a/py_algorand_sdk-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d3799441cd3c14753b8d5e4cb9b30fa", "sha256": "c3a67782b7ebbecd8f79adb923067ef60927232089f6e9837d1a2cc794860fee"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.3.tar.gz", "has_sig": false, "md5_digest": "4d3799441cd3c14753b8d5e4cb9b30fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26424, "upload_time": "2019-08-16T17:52:34", "upload_time_iso_8601": "2019-08-16T17:52:34.677465Z", "url": "https://files.pythonhosted.org/packages/83/da/ecd16ab44d91d34b9e12eff49451eccd647e8d92e927141c43642a7de685/py-algorand-sdk-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9e00ddfe855c135a96661e9c64b2ebaf", "sha256": "fa156723ce01b39f964e81d10e3c1eae8d3e4f085a5d585e61447d12a134ac21"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9e00ddfe855c135a96661e9c64b2ebaf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29091, "upload_time": "2019-08-20T19:34:37", "upload_time_iso_8601": "2019-08-20T19:34:37.207267Z", "url": "https://files.pythonhosted.org/packages/06/90/e52cc3f630e40752eee5596463ba3640aa2a5b6ebd98cf32ea1e66ee58a9/py_algorand_sdk-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d4696b2a2a9e1efe2d9c6b262655b96", "sha256": "4c82f699287c65a1b11a67aff450c2280b084ad42707eeea7871f1a9c06826d2"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0d4696b2a2a9e1efe2d9c6b262655b96", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26377, "upload_time": "2019-08-20T19:34:38", "upload_time_iso_8601": "2019-08-20T19:34:38.891245Z", "url": "https://files.pythonhosted.org/packages/5b/b0/9e394028deb3f6ce1bb294787036ad63a15a255ffdbd8aaa068e95f7f1b9/py-algorand-sdk-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "546677fae51b49527e3215405c4e2ef4", "sha256": "65d8feb145aed3ae5a11b66454d6bdd302d0d6e90ff6263b3711b6c051f83e37"}, "downloads": -1, "filename": "py_algorand_sdk-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "546677fae51b49527e3215405c4e2ef4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29190, "upload_time": "2019-09-09T19:13:04", "upload_time_iso_8601": "2019-09-09T19:13:04.210974Z", "url": "https://files.pythonhosted.org/packages/80/bd/b38cd2dcd21a664238b171ad2768629aa76d15270aa693e359711089f850/py_algorand_sdk-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48de0e8351cd0d3ff87a2f8fadf46993", "sha256": "30be69aa77f1388ef925c18e16d3a563cb02a02635d46a378820994e5a0052f9"}, "downloads": -1, "filename": "py-algorand-sdk-1.0.5.tar.gz", "has_sig": false, "md5_digest": "48de0e8351cd0d3ff87a2f8fadf46993", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26494, "upload_time": "2019-09-09T19:13:06", "upload_time_iso_8601": "2019-09-09T19:13:06.134186Z", "url": "https://files.pythonhosted.org/packages/d5/72/fd869f801b00a2c0201a65aecaedd6777e102890e83148c6448ff116ae1c/py-algorand-sdk-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "06a4dfe74626e18eabeedbc7cc2d1df8", "sha256": "57b552dfd8ce0169f6b1be6bbca7c73a89753b6482e4d49d9866ae9561564349"}, "downloads": -1, "filename": "py_algorand_sdk-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06a4dfe74626e18eabeedbc7cc2d1df8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 42420, "upload_time": "2019-11-21T15:19:34", "upload_time_iso_8601": "2019-11-21T15:19:34.319215Z", "url": "https://files.pythonhosted.org/packages/41/55/ba9efead767b5a4e9ef037f7d9577c35cef68ea417b98b69146984f07e89/py_algorand_sdk-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d09661e7ca4bf2f43b1e87f2236886e4", "sha256": "1bfe4be223bddf00690b272c4d7f0eef5cbba7771e5bb50a4e26b1bf606b691a"}, "downloads": -1, "filename": "py-algorand-sdk-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d09661e7ca4bf2f43b1e87f2236886e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 41611, "upload_time": "2019-11-21T15:19:36", "upload_time_iso_8601": "2019-11-21T15:19:36.511781Z", "url": "https://files.pythonhosted.org/packages/b5/5a/b94aef417aafa25a7fb1db60bed5ca34afc697d085e093c38c80e8853428/py-algorand-sdk-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "8621dc3e529bbfe4d33d54fe620b774d", "sha256": "6aa39e803ad880555eecdde2df65d4df7cd3b096fb5b6515c39318520e0b25ee"}, "downloads": -1, "filename": "py_algorand_sdk-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8621dc3e529bbfe4d33d54fe620b774d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 42721, "upload_time": "2019-12-18T17:43:42", "upload_time_iso_8601": "2019-12-18T17:43:42.286926Z", "url": "https://files.pythonhosted.org/packages/c2/fb/777a66082ddd96c73ef9927c98e93ce22353ce36507a8875e8039be1cf0c/py_algorand_sdk-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ae70c7817597a8813c6aa9b5fd104b7", "sha256": "3c2aacb01b1d445a8bd3d780070ebfff83fafdfca72e90b9ec438c47cf323600"}, "downloads": -1, "filename": "py-algorand-sdk-1.1.1.tar.gz", "has_sig": false, "md5_digest": "3ae70c7817597a8813c6aa9b5fd104b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 41901, "upload_time": "2019-12-18T17:43:44", "upload_time_iso_8601": "2019-12-18T17:43:44.764728Z", "url": "https://files.pythonhosted.org/packages/65/e8/056b0ec8910b4565b5031b812876b9e8bd3007f0b5d9d3bcf8d121347246/py-algorand-sdk-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "95af8ec75a8ed08e9148f16a1e50dd2b", "sha256": "eefe0460e56a01690b4947a47ba0df2763cc3d44d1e8770616b47cb23e3308b9"}, "downloads": -1, "filename": "py_algorand_sdk-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "95af8ec75a8ed08e9148f16a1e50dd2b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 45039, "upload_time": "2020-03-24T19:43:08", "upload_time_iso_8601": "2020-03-24T19:43:08.434438Z", "url": "https://files.pythonhosted.org/packages/f4/78/46b6b516518e6f7ef216b21923f54c073e1dfd4eb3ed77d7ad6cc0851a3e/py_algorand_sdk-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f6a64d0a9e7cd68d632f54a10269c43", "sha256": "917ee95404788eeff8f734e5ff6d39228660d50e929e2f69473cfe95dbd24cce"}, "downloads": -1, "filename": "py-algorand-sdk-1.2.0.tar.gz", "has_sig": false, "md5_digest": "5f6a64d0a9e7cd68d632f54a10269c43", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 44997, "upload_time": "2020-03-24T19:43:10", "upload_time_iso_8601": "2020-03-24T19:43:10.244735Z", "url": "https://files.pythonhosted.org/packages/8c/0a/73a83458818862f25516f262e0e2b8a3760c81b1bbc189761c737b0310da/py-algorand-sdk-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "1548bef93c6fca8c0449058a3d6fb5d6", "sha256": "dd69610a262df02ac257c89f8f277042a3d407545611fafdfed0dbca79e48052"}, "downloads": -1, "filename": "py_algorand_sdk-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1548bef93c6fca8c0449058a3d6fb5d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 59810, "upload_time": "2020-03-25T15:53:09", "upload_time_iso_8601": "2020-03-25T15:53:09.542708Z", "url": "https://files.pythonhosted.org/packages/5b/90/b93d6f579a054d3fefb5f6841cfd35b2b8dc5fe33a35277ea5d180daed85/py_algorand_sdk-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "becd97ac681d6ed59088506c2d6f3b62", "sha256": "670a28dcc3bd9ac76fa6ef620104fd7162a2bdd1f32577e433d48a41355645c8"}, "downloads": -1, "filename": "py-algorand-sdk-1.2.1.tar.gz", "has_sig": false, "md5_digest": "becd97ac681d6ed59088506c2d6f3b62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58754, "upload_time": "2020-03-25T15:53:11", "upload_time_iso_8601": "2020-03-25T15:53:11.403335Z", "url": "https://files.pythonhosted.org/packages/f3/2d/be52dac081374104257009a421aa0b1fec7d4435f191c482a1e93a62407e/py-algorand-sdk-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1548bef93c6fca8c0449058a3d6fb5d6", "sha256": "dd69610a262df02ac257c89f8f277042a3d407545611fafdfed0dbca79e48052"}, "downloads": -1, "filename": "py_algorand_sdk-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1548bef93c6fca8c0449058a3d6fb5d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 59810, "upload_time": "2020-03-25T15:53:09", "upload_time_iso_8601": "2020-03-25T15:53:09.542708Z", "url": "https://files.pythonhosted.org/packages/5b/90/b93d6f579a054d3fefb5f6841cfd35b2b8dc5fe33a35277ea5d180daed85/py_algorand_sdk-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "becd97ac681d6ed59088506c2d6f3b62", "sha256": "670a28dcc3bd9ac76fa6ef620104fd7162a2bdd1f32577e433d48a41355645c8"}, "downloads": -1, "filename": "py-algorand-sdk-1.2.1.tar.gz", "has_sig": false, "md5_digest": "becd97ac681d6ed59088506c2d6f3b62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 58754, "upload_time": "2020-03-25T15:53:11", "upload_time_iso_8601": "2020-03-25T15:53:11.403335Z", "url": "https://files.pythonhosted.org/packages/f3/2d/be52dac081374104257009a421aa0b1fec7d4435f191c482a1e93a62407e/py-algorand-sdk-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:50 2020"}