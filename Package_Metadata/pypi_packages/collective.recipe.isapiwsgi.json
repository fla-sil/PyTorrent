{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "Introduction\r\n============\r\n\r\n''collective.recipe.isapiwsgi'' is a `zc.buildout`_ recipe which creates\r\na `paste.deploy`_ entry point for isapi-wsgi_.\r\n\r\nIt is based on ''collective.recipe.modwsgi'' by Wichert Akkerman.\r\n\r\nIt is very simple to use. This is a minimal ''buildout.cfg'' file\r\nwhich creates a WSGI script isapi-wsgi can use::\r\n\r\n    [buildout]\r\n    parts = isapi-wsgi\r\n\r\n    [isapi-wsgi]\r\n    recipe = collective.recipe.isapiwsgi\r\n    eggs = mywsgiapp\r\n    config-file = ${buildout:directory}/production.ini\r\n\r\nThis will create a small python script in parts/isapi-mywsgiapp called\r\n''isapiwsgi.py'' which isapi-wsgi can use. You can also use the optional\r\n''extra-paths'' option to specify extra paths that are added to\r\nthe python system path.\r\n\r\nIIS configuration and installation\r\n----------------------------------\r\n\r\nISAPI-WSGI runs as a DLL inside IIS, which is configured as a wildcard\r\nmapping. The DLL is created from the generated isapiwsgi.py script.\r\n\r\nTo automatically configure IIS, you need to run the script::\r\n\r\n    > cd parts\\isapi-wsgi\r\n    > python isapiwsgi.py install\r\n  \r\nTo install into a site other than the default, use --server=<name>.\r\n\r\nIf you want this to be run automatically each time buildout is run,\r\nyou can give a server name to the recipe::\r\n\r\n    [isapi-wsgi]\r\n    recipe = collective.recipe.isapiwsgi\r\n    eggs = mywsgiapp\r\n    config-file = ${buildout:directory}/production.ini\r\n    server = Default\r\n\r\nThe above command will now be run just after the script has been (re-)created.\r\n\r\nNOTE: If IIS is running whilst you run buildout, you may need to stop the\r\ndefault application pool so that the DLL file can be re-created.\r\n\r\nBy default, a wildcard mapping is configured at the root of the site\r\nin IIS. If you'd like to configure a virtual directory instead, pass its\r\nname with the ''directory'' option to the recipe::\r\n\r\n    [isapi-wsgi]\r\n    recipe = collective.recipe.isapiwsgi\r\n    eggs = mywsgiapp\r\n    config-file = ${buildout:directory}/production.ini\r\n    directory = my-application\r\n    server = Default\r\n\r\nLogging\r\n-------\r\n\r\nA log file will be written depending on the [loggers] configuration in your\r\nini file. You may need to ensure that the user which the application pool\r\nin IIS uses has write access to this directory.\r\n\r\nIn addition, you can watch trace messages through the win32traceutil program.\r\nIt is installed with the Python Win32 extensions. First, set the ''debug'' \r\noption to true::\r\n\r\n    [isapi-wsgi]\r\n    recipe = collective.recipe.isapiwsgi\r\n    eggs = mywsgiapp\r\n    config-file = ${buildout:directory}/production.ini\r\n    debug = True\r\n    \r\nThen run the trace program::\r\n\r\n    > python -m win32traceutil\r\n\r\nPackage installation\r\n--------------------\r\n\r\nThis recipe does not fully install packages, which means that console scripts\r\nwill not be created. If you need console scripts you can add a second\r\nbuildout part which uses `zc.recipe.egg`_ to do a full install.\r\n\r\n.. _zc.buildout: http://pypi.python.org/pypi/zc.buildout\r\n.. _paste.deploy: http://pythonpaste.org/deploy/\r\n.. _isapi-wsgi: http://code.google.com/p/isapi-wsgi/\r\n.. _zc.recipe.egg: http://pypi.python.org/pypi/zc.recipe.egg\r\n\r\n\nChangelog\n=========\n\n1.0b1 - 2009-09-18\n------------------\n\n* Created new package based on collective.recipe.modwsgi\n  [optilude]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "collective.recipe.isapiwsgi", "package_url": "https://pypi.org/project/collective.recipe.isapiwsgi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.recipe.isapiwsgi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/collective.recipe.isapiwsgi/1.0b1/", "requires_dist": null, "requires_python": null, "summary": "ISAPI-WSGI wrapper based on buildout configuration", "version": "1.0b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>\u2018\u2019collective.recipe.isapiwsgi\u2019\u2019 is a <a href=\"http://pypi.python.org/pypi/zc.buildout\" rel=\"nofollow\">zc.buildout</a> recipe which creates\na <a href=\"http://pythonpaste.org/deploy/\" rel=\"nofollow\">paste.deploy</a> entry point for <a href=\"http://code.google.com/p/isapi-wsgi/\" rel=\"nofollow\">isapi-wsgi</a>.</p>\n<p>It is based on \u2018\u2019collective.recipe.modwsgi\u2019\u2019 by Wichert Akkerman.</p>\n<p>It is very simple to use. This is a minimal \u2018\u2019buildout.cfg\u2019\u2019 file\nwhich creates a WSGI script isapi-wsgi can use:</p>\n<pre>[buildout]\nparts = isapi-wsgi\n\n[isapi-wsgi]\nrecipe = collective.recipe.isapiwsgi\neggs = mywsgiapp\nconfig-file = ${buildout:directory}/production.ini\n</pre>\n<p>This will create a small python script in parts/isapi-mywsgiapp called\n\u2018\u2019isapiwsgi.py\u2019\u2019 which isapi-wsgi can use. You can also use the optional\n\u2018\u2019extra-paths\u2019\u2019 option to specify extra paths that are added to\nthe python system path.</p>\n<div id=\"iis-configuration-and-installation\">\n<h3>IIS configuration and installation</h3>\n<p>ISAPI-WSGI runs as a DLL inside IIS, which is configured as a wildcard\nmapping. The DLL is created from the generated isapiwsgi.py script.</p>\n<p>To automatically configure IIS, you need to run the script:</p>\n<pre>&gt; cd parts\\isapi-wsgi\n&gt; python isapiwsgi.py install\n</pre>\n<p>To install into a site other than the default, use \u2013server=&lt;name&gt;.</p>\n<p>If you want this to be run automatically each time buildout is run,\nyou can give a server name to the recipe:</p>\n<pre>[isapi-wsgi]\nrecipe = collective.recipe.isapiwsgi\neggs = mywsgiapp\nconfig-file = ${buildout:directory}/production.ini\nserver = Default\n</pre>\n<p>The above command will now be run just after the script has been (re-)created.</p>\n<p>NOTE: If IIS is running whilst you run buildout, you may need to stop the\ndefault application pool so that the DLL file can be re-created.</p>\n<p>By default, a wildcard mapping is configured at the root of the site\nin IIS. If you\u2019d like to configure a virtual directory instead, pass its\nname with the \u2018\u2019directory\u2019\u2019 option to the recipe:</p>\n<pre>[isapi-wsgi]\nrecipe = collective.recipe.isapiwsgi\neggs = mywsgiapp\nconfig-file = ${buildout:directory}/production.ini\ndirectory = my-application\nserver = Default\n</pre>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>A log file will be written depending on the [loggers] configuration in your\nini file. You may need to ensure that the user which the application pool\nin IIS uses has write access to this directory.</p>\n<p>In addition, you can watch trace messages through the win32traceutil program.\nIt is installed with the Python Win32 extensions. First, set the \u2018\u2019debug\u2019\u2019\noption to true:</p>\n<pre>[isapi-wsgi]\nrecipe = collective.recipe.isapiwsgi\neggs = mywsgiapp\nconfig-file = ${buildout:directory}/production.ini\ndebug = True\n</pre>\n<p>Then run the trace program:</p>\n<pre>&gt; python -m win32traceutil\n</pre>\n</div>\n<div id=\"package-installation\">\n<h3>Package installation</h3>\n<p>This recipe does not fully install packages, which means that console scripts\nwill not be created. If you need console scripts you can add a second\nbuildout part which uses <a href=\"http://pypi.python.org/pypi/zc.recipe.egg\" rel=\"nofollow\">zc.recipe.egg</a> to do a full install.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"b1-2009-09-18\"><span class=\"section-subtitle\">1.0b1 - 2009-09-18</span></h2>\n<ul>\n<li>Created new package based on collective.recipe.modwsgi\n[optilude]</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 788138, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "637d932d1ecd77dfe37a0409d4cdcf50", "sha256": "6f4735c83cf54f831e2a3d6a456275fc9ba09ce2c644d20eb74d644870c422ba"}, "downloads": -1, "filename": "collective.recipe.isapiwsgi-1.0b1.tar.gz", "has_sig": false, "md5_digest": "637d932d1ecd77dfe37a0409d4cdcf50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4356, "upload_time": "2009-09-20T19:39:50", "upload_time_iso_8601": "2009-09-20T19:39:50.720231Z", "url": "https://files.pythonhosted.org/packages/45/5b/20631db154f440f874d8b1a9b62f8714bbcc790cf8cefcc895ea8bc0dfc6/collective.recipe.isapiwsgi-1.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "637d932d1ecd77dfe37a0409d4cdcf50", "sha256": "6f4735c83cf54f831e2a3d6a456275fc9ba09ce2c644d20eb74d644870c422ba"}, "downloads": -1, "filename": "collective.recipe.isapiwsgi-1.0b1.tar.gz", "has_sig": false, "md5_digest": "637d932d1ecd77dfe37a0409d4cdcf50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4356, "upload_time": "2009-09-20T19:39:50", "upload_time_iso_8601": "2009-09-20T19:39:50.720231Z", "url": "https://files.pythonhosted.org/packages/45/5b/20631db154f440f874d8b1a9b62f8714bbcc790cf8cefcc895ea8bc0dfc6/collective.recipe.isapiwsgi-1.0b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:55 2020"}