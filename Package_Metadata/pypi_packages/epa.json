{"info": {"author": "Zach Williams", "author_email": "zach@codeforamerica.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Topic :: Internet", "Topic :: Internet :: WWW/HTTP"], "description": "EPA Python API wrapper\n======================\n\nPython wrapper for the multiple APIs available through the EPA's\nwebsite.\n\nDocumentation for the APIs can be found here: \n[http://www.epa.gov/enviro/facts/ef_restful.html](http://www.epa.gov/enviro/facts/ef_restful.html)\n\n\nAPIs\n----\n\n### RADInfo\n\n    >>> from epa.radinfo import RADInfo\n    >>> r = RADInfo()\n\n    >>> # An empty method returns a dict of available columns.\n    ... r.facility_type()\n\n    >>> # A method call without a value returns info about that column.\n    ... r.facility_type('cit_ref_code')\n\n    >>> # Find information on a facility in a certain city.\n    ... r.facility('city_name', 'Berkeley')\n    {'data': {'about': \"Berkeley's Radiation Facility\"}}\n\n    >>> # Find all the radiation facilities in Texas.\n    ... r.facility('state_code', 'TX')\n    {'all': {'seven': 'Texas facilities'}}\n\n    >>> # Integer values are converted to strings automatically.\n    ... r.regulation('part_id', 61)\n\n    >>> r.regulation('title_id', '40')\n\n    >>> # Search for the CIT_REF_CODE of a RAD NPL facility.\n    ... r.regulation('cit_ref_code', '40CFR300')\n\n    >>> data = r.regulatory_program('sec_cit_ref_flag', 'N')\n    >>> data['Count']\n    100\n\n    >>> new_data = r.regulatory_program('sec_cit_ref_code', 'N', count=200)\n    >>> new_data['Count']\n    190\n\n    >>> data = r.regulatory_program('cit_ref_code', '40CFR300', start=50)\n    >>> data['Count']\n    8\n\n    >>> # Find geographic information.\n    ... r.geo('geometric_type_code', '001')\n\n\n### GICS\n\n    >>> from epa.gics import GICS\n    >>> g = GICS()\n\n    >>> # List construction projects that are 91% complete.\n    ... g.construction('complete_percent', 91)\n\n    >>> # Find all the construction projects at a specific facility.\n    ... data = g.construction('facility_number', 190226001)\n    >>> data['Count']\n    8\n\n    >>> # Search for a specific grant's milestones.\n    ... g.milestone('grant_number', 190709130)\n\n    >>> # Find all ADMIN COMPLETE milestones.\n    ... g.milestone('milestone_type', 'ADMIN COMPLETE')\n\n    >>> # Search for milestones on a specific DD-MON-YY date.\n    ... g.milestone('milestone_date', '16-MAR-01')\n\n    >>> # Find descriptions for a status code.\n    ... g.status('status_code', 'AF')\n\n    >>> # Find grants on a specific date.\n    ... g.grant('award_accept_date', '12-MAR-01')\n\n    >>> # Find grants for a specific city.\n    ... g.grant('projecty_city_name', 'San Francisco')\n\n    >>> # Search the GICS API's grants for a specific state.\n    ... g.grant('project_state_code', 'TX', count=500)\n\n    >>> # Find an applicant in a specific zipcode.\n    ... g.applicant('zip_code', 94105)\n\n\n### PCS\n\n    >>> from epa.pcs import PCS\n    >>> p = PCS()\n\n    >>> # Search for facilities in a city.\n    ... p.facility('location_city', 'San Francisco')\n\n    >>> # Find a facility in a particular zipcode.\n    ... p.facility('location_zip_code', 76108)\n\n    >>> # Find a sludge facility in a specific state.\n    ... p.sludge('handler_state', 'NY')\n\n    >>> p.pipe_schedule('discharge_num', 333)\n\n    >>> p.pipe_schedule('npdes', 'GMG290024')\n\n    >>> p.dmr_measurement('discharge_num', '001')\n\n    >>> # Find the inspections that took place on a specific date.\n    ... p.inspection('insp_date', '16-MAR-01')\n\n    >>> p.enforcement_action('ea_code', '09')\n\n\nCopyright\n---------\n\nCopyright (c) 2011 Code for America Laboratories.\n\nSee LICENSE for details.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codeforamerica/epa_python", "keywords": "epa,EPA,environment", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "epa", "package_url": "https://pypi.org/project/epa/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/epa/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/codeforamerica/epa_python"}, "release_url": "https://pypi.org/project/epa/1.3/", "requires_dist": null, "requires_python": null, "summary": "Python wrapper for the multiple APIs available through the EPA's website.", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python wrapper for the multiple APIs available through the EPA\u2019s\nwebsite.</p>\n<p>Documentation for the APIs can be found here:\n[<a href=\"http://www.epa.gov/enviro/facts/ef_restful.html%5D(http://www.epa.gov/enviro/facts/ef_restful.html\" rel=\"nofollow\">http://www.epa.gov/enviro/facts/ef_restful.html](http://www.epa.gov/enviro/facts/ef_restful.html</a>)</p>\n<div id=\"apis\">\n<h2>APIs</h2>\n<p>### RADInfo</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from epa.radinfo import RADInfo\n&gt;&gt;&gt; r = RADInfo()\n</pre>\n<pre>&gt;&gt;&gt; # An empty method returns a dict of available columns.\n... r.facility_type()\n</pre>\n<pre>&gt;&gt;&gt; # A method call without a value returns info about that column.\n... r.facility_type('cit_ref_code')\n</pre>\n<pre>&gt;&gt;&gt; # Find information on a facility in a certain city.\n... r.facility('city_name', 'Berkeley')\n{'data': {'about': \"Berkeley's Radiation Facility\"}}\n</pre>\n<pre>&gt;&gt;&gt; # Find all the radiation facilities in Texas.\n... r.facility('state_code', 'TX')\n{'all': {'seven': 'Texas facilities'}}\n</pre>\n<pre>&gt;&gt;&gt; # Integer values are converted to strings automatically.\n... r.regulation('part_id', 61)\n</pre>\n<pre>&gt;&gt;&gt; r.regulation('title_id', '40')\n</pre>\n<pre>&gt;&gt;&gt; # Search for the CIT_REF_CODE of a RAD NPL facility.\n... r.regulation('cit_ref_code', '40CFR300')\n</pre>\n<pre>&gt;&gt;&gt; data = r.regulatory_program('sec_cit_ref_flag', 'N')\n&gt;&gt;&gt; data['Count']\n100\n</pre>\n<pre>&gt;&gt;&gt; new_data = r.regulatory_program('sec_cit_ref_code', 'N', count=200)\n&gt;&gt;&gt; new_data['Count']\n190\n</pre>\n<pre>&gt;&gt;&gt; data = r.regulatory_program('cit_ref_code', '40CFR300', start=50)\n&gt;&gt;&gt; data['Count']\n8\n</pre>\n<pre>&gt;&gt;&gt; # Find geographic information.\n... r.geo('geometric_type_code', '001')\n</pre>\n</blockquote>\n<p>### GICS</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from epa.gics import GICS\n&gt;&gt;&gt; g = GICS()\n</pre>\n<pre>&gt;&gt;&gt; # List construction projects that are 91% complete.\n... g.construction('complete_percent', 91)\n</pre>\n<pre>&gt;&gt;&gt; # Find all the construction projects at a specific facility.\n... data = g.construction('facility_number', 190226001)\n&gt;&gt;&gt; data['Count']\n8\n</pre>\n<pre>&gt;&gt;&gt; # Search for a specific grant's milestones.\n... g.milestone('grant_number', 190709130)\n</pre>\n<pre>&gt;&gt;&gt; # Find all ADMIN COMPLETE milestones.\n... g.milestone('milestone_type', 'ADMIN COMPLETE')\n</pre>\n<pre>&gt;&gt;&gt; # Search for milestones on a specific DD-MON-YY date.\n... g.milestone('milestone_date', '16-MAR-01')\n</pre>\n<pre>&gt;&gt;&gt; # Find descriptions for a status code.\n... g.status('status_code', 'AF')\n</pre>\n<pre>&gt;&gt;&gt; # Find grants on a specific date.\n... g.grant('award_accept_date', '12-MAR-01')\n</pre>\n<pre>&gt;&gt;&gt; # Find grants for a specific city.\n... g.grant('projecty_city_name', 'San Francisco')\n</pre>\n<pre>&gt;&gt;&gt; # Search the GICS API's grants for a specific state.\n... g.grant('project_state_code', 'TX', count=500)\n</pre>\n<pre>&gt;&gt;&gt; # Find an applicant in a specific zipcode.\n... g.applicant('zip_code', 94105)\n</pre>\n</blockquote>\n<p>### PCS</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from epa.pcs import PCS\n&gt;&gt;&gt; p = PCS()\n</pre>\n<pre>&gt;&gt;&gt; # Search for facilities in a city.\n... p.facility('location_city', 'San Francisco')\n</pre>\n<pre>&gt;&gt;&gt; # Find a facility in a particular zipcode.\n... p.facility('location_zip_code', 76108)\n</pre>\n<pre>&gt;&gt;&gt; # Find a sludge facility in a specific state.\n... p.sludge('handler_state', 'NY')\n</pre>\n<pre>&gt;&gt;&gt; p.pipe_schedule('discharge_num', 333)\n</pre>\n<pre>&gt;&gt;&gt; p.pipe_schedule('npdes', 'GMG290024')\n</pre>\n<pre>&gt;&gt;&gt; p.dmr_measurement('discharge_num', '001')\n</pre>\n<pre>&gt;&gt;&gt; # Find the inspections that took place on a specific date.\n... p.inspection('insp_date', '16-MAR-01')\n</pre>\n<pre>&gt;&gt;&gt; p.enforcement_action('ea_code', '09')\n</pre>\n</blockquote>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (c) 2011 Code for America Laboratories.</p>\n<p>See LICENSE for details.</p>\n</div>\n\n          </div>"}, "last_serial": 791679, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "872152b25ed591a75dc2bb623f96a3a2", "sha256": "c886eb243d02aed291f771d99f6d3ab1919ae2cb51d764faeda3d84e8ee56c61"}, "downloads": -1, "filename": "epa-1.0.tar.gz", "has_sig": false, "md5_digest": "872152b25ed591a75dc2bb623f96a3a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3521, "upload_time": "2011-08-04T19:40:07", "upload_time_iso_8601": "2011-08-04T19:40:07.286553Z", "url": "https://files.pythonhosted.org/packages/36/67/dfa654de3d76416987e834b2529deb973e5447d7bc8ffaec817929ab9c88/epa-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "168a7055296621436629fc552f110ca3", "sha256": "840255d4eb4833e143219070967338ed28a62df28adbbdac28aaf91defc1cc78"}, "downloads": -1, "filename": "epa-1.1.tar.gz", "has_sig": false, "md5_digest": "168a7055296621436629fc552f110ca3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3517, "upload_time": "2011-08-05T23:52:38", "upload_time_iso_8601": "2011-08-05T23:52:38.789369Z", "url": "https://files.pythonhosted.org/packages/b9/f3/830f10ae6d2a5455f87a47eaa3b5336dd494ea80d7e3c94212add4aa9638/epa-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "83981d1c2f17f780389990b43dfdf5aa", "sha256": "b313af711d5a4e1969fa6231383e1e3231e5da4f948cf308e9b39163b3aec93f"}, "downloads": -1, "filename": "epa-1.2.tar.gz", "has_sig": false, "md5_digest": "83981d1c2f17f780389990b43dfdf5aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29941, "upload_time": "2011-08-06T00:01:53", "upload_time_iso_8601": "2011-08-06T00:01:53.317986Z", "url": "https://files.pythonhosted.org/packages/93/e2/dd9994be0cc177a8136d7a12d716c119e9338d17510ba21ed611b824a473/epa-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "128cdad90af90427986286091a08f909", "sha256": "0b702fbec1f13a6a8a865de14281f3a384453bb7b9d8079f5b93c4e98b3232e6"}, "downloads": -1, "filename": "epa-1.3.tar.gz", "has_sig": false, "md5_digest": "128cdad90af90427986286091a08f909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31795, "upload_time": "2011-08-06T00:04:13", "upload_time_iso_8601": "2011-08-06T00:04:13.219856Z", "url": "https://files.pythonhosted.org/packages/66/83/19d0d853dd26da7695f5b5a141931d472a6e20854c250d9e525ac5823eea/epa-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "128cdad90af90427986286091a08f909", "sha256": "0b702fbec1f13a6a8a865de14281f3a384453bb7b9d8079f5b93c4e98b3232e6"}, "downloads": -1, "filename": "epa-1.3.tar.gz", "has_sig": false, "md5_digest": "128cdad90af90427986286091a08f909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31795, "upload_time": "2011-08-06T00:04:13", "upload_time_iso_8601": "2011-08-06T00:04:13.219856Z", "url": "https://files.pythonhosted.org/packages/66/83/19d0d853dd26da7695f5b5a141931d472a6e20854c250d9e525ac5823eea/epa-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:04 2020"}