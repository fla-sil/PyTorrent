{"info": {"author": "Adrian Turjak", "author_email": "minecraft@uncaught-exceptions.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "MCRcon\n======\n\nThis library provides a straightforward implementation of Minecraft's\n`Rcon protocol`_ in Python to provide a client for handling Remote Commands\n(RCON) to a Minecraft server.\n\n.. _Rcon protocol: http://wiki.vg/Rcon\n\nInstallation\n############\n\nThe library is availble on PYPI and can be installed with pip::\n\n    pip install mcrcon\n\nUsage\n#####\n\nThe recommend way to run this client is using the python 'with' statement.\nThis ensures that the socket is correctly closed when you are done with it\nrather than being left open.\n\nExample::\n\n    In [1]: from mcrcon import MCRcon\n    In [2]: with MCRcon(\"10.1.1.1\", \"sekret\") as mcr:\n       ...:     resp = mcr.command(\"/whitelist add bob\")\n       ...:     print(resp)\n\nWhile you can use it without the 'with' statement, you have to connect\nmanually, and ideally disconnect::\n\n    In [3]: mcr = MCRcon(\"10.1.1.1\", \"sekret\")\n    In [4]: mcr.connect()\n    In [5]: resp = mcr.command(\"/whitelist add bob\")\n    In [6]: print(resp)\n    In [7]: mcr.disconnect()\n\nCommand Line Usage\n##################\n\nAfter installing the package a cli will be included that can be used.\n\nHelp can be gotten by doing::\n\n    mcrcon --help\n\nYou can connect from the console with commands like the following::\n\n    mcrcon 10.1.1.1\n\nYou will either be prompted for your password, or you can set it as follows\nas an environment variable::\n\n    export RCON_PASSWORD=sekret\n\nAnd then you can run commands on the server interactively::\n\n    > /whitelist add bob", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/uncaught-exceptions/mcrcon", "keywords": "openstack keystone users tasks registration workflow", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mcrcon", "package_url": "https://pypi.org/project/mcrcon/", "platform": "", "project_url": "https://pypi.org/project/mcrcon/", "project_urls": {"Homepage": "https://github.com/uncaught-exceptions/mcrcon"}, "release_url": "https://pypi.org/project/mcrcon/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "A client for handling Remote Commands (RCON) to a Minecraft server.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library provides a straightforward implementation of Minecraft\u2019s\n<a href=\"http://wiki.vg/Rcon\" rel=\"nofollow\">Rcon protocol</a> in Python to provide a client for handling Remote Commands\n(RCON) to a Minecraft server.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The library is availble on PYPI and can be installed with pip:</p>\n<pre>pip install mcrcon\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The recommend way to run this client is using the python \u2018with\u2019 statement.\nThis ensures that the socket is correctly closed when you are done with it\nrather than being left open.</p>\n<p>Example:</p>\n<pre>In [1]: from mcrcon import MCRcon\nIn [2]: with MCRcon(\"10.1.1.1\", \"sekret\") as mcr:\n   ...:     resp = mcr.command(\"/whitelist add bob\")\n   ...:     print(resp)\n</pre>\n<p>While you can use it without the \u2018with\u2019 statement, you have to connect\nmanually, and ideally disconnect:</p>\n<pre>In [3]: mcr = MCRcon(\"10.1.1.1\", \"sekret\")\nIn [4]: mcr.connect()\nIn [5]: resp = mcr.command(\"/whitelist add bob\")\nIn [6]: print(resp)\nIn [7]: mcr.disconnect()\n</pre>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command Line Usage</h2>\n<p>After installing the package a cli will be included that can be used.</p>\n<p>Help can be gotten by doing:</p>\n<pre>mcrcon --help\n</pre>\n<p>You can connect from the console with commands like the following:</p>\n<pre>mcrcon 10.1.1.1\n</pre>\n<p>You will either be prompted for your password, or you can set it as follows\nas an environment variable:</p>\n<pre>export RCON_PASSWORD=sekret\n</pre>\n<p>And then you can run commands on the server interactively:</p>\n<pre>&gt; /whitelist add bob\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6974666, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "22efcd699c403d3b9a6f9b15ad43cb1c", "sha256": "c4084875a61e13c1db5648645401323d055bf192b2cb8eb8d25c33b139250217"}, "downloads": -1, "filename": "mcrcon-0.5.1.tar.gz", "has_sig": false, "md5_digest": "22efcd699c403d3b9a6f9b15ad43cb1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2625, "upload_time": "2018-04-15T08:42:40", "upload_time_iso_8601": "2018-04-15T08:42:40.519393Z", "url": "https://files.pythonhosted.org/packages/fc/bd/5ba3002aa80465a2ccd5fa5a6a3e632ab728889f580a646e170181b861c7/mcrcon-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1d49cdf6cc21229f73dcd33aeb9835fb", "sha256": "dfaa825707fbb6a1dc4c71fad5d83f475e2f7e593a369ac46680cbd9b39100d3"}, "downloads": -1, "filename": "mcrcon-0.5.2.tar.gz", "has_sig": false, "md5_digest": "1d49cdf6cc21229f73dcd33aeb9835fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2628, "upload_time": "2018-04-15T09:10:35", "upload_time_iso_8601": "2018-04-15T09:10:35.177986Z", "url": "https://files.pythonhosted.org/packages/5d/d8/b8250d40142447809c08910e00b8d0e3bdc06f37570b03034a23a0b1cdcc/mcrcon-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a36b00f6f6a0106771d33021c62ccc6a", "sha256": "62e5fe014ffd347e7f2e50d92997520607c609a8accf570dbde29b69d8e4ad03"}, "downloads": -1, "filename": "mcrcon-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a36b00f6f6a0106771d33021c62ccc6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3585, "upload_time": "2020-04-08T02:40:54", "upload_time_iso_8601": "2020-04-08T02:40:54.287812Z", "url": "https://files.pythonhosted.org/packages/f5/f8/d142c6b7b84ed7e3927bc640631317e139784f61f798a17d8b7df29acf4c/mcrcon-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a36b00f6f6a0106771d33021c62ccc6a", "sha256": "62e5fe014ffd347e7f2e50d92997520607c609a8accf570dbde29b69d8e4ad03"}, "downloads": -1, "filename": "mcrcon-0.6.0.tar.gz", "has_sig": false, "md5_digest": "a36b00f6f6a0106771d33021c62ccc6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3585, "upload_time": "2020-04-08T02:40:54", "upload_time_iso_8601": "2020-04-08T02:40:54.287812Z", "url": "https://files.pythonhosted.org/packages/f5/f8/d142c6b7b84ed7e3927bc640631317e139784f61f798a17d8b7df29acf4c/mcrcon-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:55 2020"}