{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)"], "description": ".. contents::\n\n.. Note!\n   -----\n   Update the following URLs to point to your:\n\n   - code repository\n   - bug tracker\n   - questions/comments feedback mail\n   (do not set a real mail, to avoid spams)\n\n   Or remove it if not used.\n\n- Code repository: http://svn.somewhere.com/...\n- Questions and comments to somemailing_list\n- Report bugs at http://bug.somewhere.com/..\n\n\nChange history\n**************\n\nChangelog\n=========\n\n0.1 (xxxx-xx-xx)\n----------------\n\n- Created recipe with ZopeSkel\n  [\"\"]\n\nDetailed Documentation\n**********************\n\nIntroduction\n============\n\nThis is a full-blown functional test. The emphasis here is on testing what\nthe user may input and see, and the system is largely tested as a black box.\nWe use PloneTestCase to set up this test as well, so we have a full Plone site\nto play with. We *can* inspect the state of the portal, e.g. using \nself.portal and self.folder, but it is often frowned upon since you are not\ntreating the system as a black box. Also, if you, for example, log in or set\nroles using calls like self.setRoles(), these are not reflected in the test\nbrowser, which runs as a separate session.\n\nBeing a doctest, we can tell a story here.\n\nFirst, we must perform some setup. We use the testbrowser that is shipped\nwith Five, as this provides proper Zope 2 integration. Most of the \ndocumentation, though, is in the underlying zope.testbrower package.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> browser = Browser()\n    >>> portal_url = self.portal.absolute_url()\n\nThe following is useful when writing and debugging testbrowser tests. It lets\nus see all error messages in the error_log.\n\n    >>> self.portal.error_log._ignored_exceptions = ()\n\nWith that in place, we can go to the portal front page and log in. We will\ndo this using the default user from PloneTestCase:\n\n    >>> from Products.PloneTestCase.setup import portal_owner, default_password\n\nBecause add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  \n\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n\nHere, we set the value of the fields on the login form and then simulate a\nsubmit click.  We then ensure that we get the friendly logged-in message:\n\n    >>> \"You are now logged in\" in browser.contents\n    True\n\nFinally, let's return to the front page of our site before continuing\n\n    >>> browser.open(portal_url)\n\n-*- extra stuff goes here -*-\nThe BarcampParticipant content type\n===============================\n\nIn this section we are tesing the BarcampParticipant content type by performing\nbasic operations like adding, updadating and deleting BarcampParticipant content\nitems.\n\nAdding a new BarcampParticipant content item\n--------------------------------\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nThen we select the type of item we want to add. In this case we select\n'BarcampParticipant' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampParticipant').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampParticipant' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampParticipant Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nAnd we are done! We added a new 'BarcampParticipant' content item to the portal.\n\nUpdating an existing BarcampParticipant content item\n---------------------------------------\n\nLet's click on the 'edit' tab and update the object attribute values.\n\n    >>> browser.getLink('Edit').click()\n    >>> browser.getControl(name='title').value = 'New BarcampParticipant Sample'\n    >>> browser.getControl('Save').click()\n\nWe check that the changes were applied.\n\n    >>> 'Changes saved' in browser.contents\n    True\n    >>> 'New BarcampParticipant Sample' in browser.contents\n    True\n\nRemoving a/an BarcampParticipant content item\n--------------------------------\n\nIf we go to the home page, we can see a tab with the 'New BarcampParticipant\nSample' title in the global navigation tabs.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampParticipant Sample' in browser.contents\n    True\n\nNow we are going to delete the 'New BarcampParticipant Sample' object. First we\ngo to the contents tab and select the 'New BarcampParticipant Sample' for\ndeletion.\n\n    >>> browser.getLink('Contents').click()\n    >>> browser.getControl('New BarcampParticipant Sample').click()\n\nWe click on the 'Delete' button.\n\n    >>> browser.getControl('Delete').click()\n    >>> 'Item(s) deleted' in browser.contents\n    True\n\nSo, if we go back to the home page, there is no longer a 'New BarcampParticipant\nSample' tab.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampParticipant Sample' in browser.contents\n    False\n\nAdding a new BarcampParticipant content item as contributor\n------------------------------------------------\n\nNot only site managers are allowed to add BarcampParticipant content items, but\nalso site contributors.\n\nLet's logout and then login as 'contributor', a portal member that has the\ncontributor role assigned.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = 'contributor'\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nWe select 'BarcampParticipant' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampParticipant').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampParticipant' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampParticipant Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nDone! We added a new BarcampParticipant content item logged in as contributor.\n\nFinally, let's login back as manager.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\n\nThe BarcampSession content type\n===============================\n\nIn this section we are tesing the BarcampSession content type by performing\nbasic operations like adding, updadating and deleting BarcampSession content\nitems.\n\nAdding a new BarcampSession content item\n--------------------------------\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nThen we select the type of item we want to add. In this case we select\n'BarcampSession' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampSession').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampSession' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampSession Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nAnd we are done! We added a new 'BarcampSession' content item to the portal.\n\nUpdating an existing BarcampSession content item\n---------------------------------------\n\nLet's click on the 'edit' tab and update the object attribute values.\n\n    >>> browser.getLink('Edit').click()\n    >>> browser.getControl(name='title').value = 'New BarcampSession Sample'\n    >>> browser.getControl('Save').click()\n\nWe check that the changes were applied.\n\n    >>> 'Changes saved' in browser.contents\n    True\n    >>> 'New BarcampSession Sample' in browser.contents\n    True\n\nRemoving a/an BarcampSession content item\n--------------------------------\n\nIf we go to the home page, we can see a tab with the 'New BarcampSession\nSample' title in the global navigation tabs.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampSession Sample' in browser.contents\n    True\n\nNow we are going to delete the 'New BarcampSession Sample' object. First we\ngo to the contents tab and select the 'New BarcampSession Sample' for\ndeletion.\n\n    >>> browser.getLink('Contents').click()\n    >>> browser.getControl('New BarcampSession Sample').click()\n\nWe click on the 'Delete' button.\n\n    >>> browser.getControl('Delete').click()\n    >>> 'Item(s) deleted' in browser.contents\n    True\n\nSo, if we go back to the home page, there is no longer a 'New BarcampSession\nSample' tab.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampSession Sample' in browser.contents\n    False\n\nAdding a new BarcampSession content item as contributor\n------------------------------------------------\n\nNot only site managers are allowed to add BarcampSession content items, but\nalso site contributors.\n\nLet's logout and then login as 'contributor', a portal member that has the\ncontributor role assigned.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = 'contributor'\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nWe select 'BarcampSession' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampSession').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampSession' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampSession Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nDone! We added a new BarcampSession content item logged in as contributor.\n\nFinally, let's login back as manager.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\n\nThe BarcampEvent content type\n===============================\n\nIn this section we are tesing the BarcampEvent content type by performing\nbasic operations like adding, updadating and deleting BarcampEvent content\nitems.\n\nAdding a new BarcampEvent content item\n--------------------------------\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nThen we select the type of item we want to add. In this case we select\n'BarcampEvent' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampEvent').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampEvent' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampEvent Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nAnd we are done! We added a new 'BarcampEvent' content item to the portal.\n\nUpdating an existing BarcampEvent content item\n---------------------------------------\n\nLet's click on the 'edit' tab and update the object attribute values.\n\n    >>> browser.getLink('Edit').click()\n    >>> browser.getControl(name='title').value = 'New BarcampEvent Sample'\n    >>> browser.getControl('Save').click()\n\nWe check that the changes were applied.\n\n    >>> 'Changes saved' in browser.contents\n    True\n    >>> 'New BarcampEvent Sample' in browser.contents\n    True\n\nRemoving a/an BarcampEvent content item\n--------------------------------\n\nIf we go to the home page, we can see a tab with the 'New BarcampEvent\nSample' title in the global navigation tabs.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampEvent Sample' in browser.contents\n    True\n\nNow we are going to delete the 'New BarcampEvent Sample' object. First we\ngo to the contents tab and select the 'New BarcampEvent Sample' for\ndeletion.\n\n    >>> browser.getLink('Contents').click()\n    >>> browser.getControl('New BarcampEvent Sample').click()\n\nWe click on the 'Delete' button.\n\n    >>> browser.getControl('Delete').click()\n    >>> 'Item(s) deleted' in browser.contents\n    True\n\nSo, if we go back to the home page, there is no longer a 'New BarcampEvent\nSample' tab.\n\n    >>> browser.open(portal_url)\n    >>> 'New BarcampEvent Sample' in browser.contents\n    False\n\nAdding a new BarcampEvent content item as contributor\n------------------------------------------------\n\nNot only site managers are allowed to add BarcampEvent content items, but\nalso site contributors.\n\nLet's logout and then login as 'contributor', a portal member that has the\ncontributor role assigned.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = 'contributor'\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nWe select 'BarcampEvent' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('BarcampEvent').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'BarcampEvent' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'BarcampEvent Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nDone! We added a new BarcampEvent content item logged in as contributor.\n\nFinally, let's login back as manager.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\n\n\n\nContributors\n************\n\n\"\", Author\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "collective.barcamp", "package_url": "https://pypi.org/project/collective.barcamp/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.barcamp/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/"}, "release_url": "https://pypi.org/project/collective.barcamp/0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            .. contents::<br><br>.. Note!<br>   -----<br>   Update the following URLs to point to your:<br><br>   - code repository<br>   - bug tracker<br>   - questions/comments feedback mail<br>   (do not set a real mail, to avoid spams)<br><br>   Or remove it if not used.<br><br>- Code repository: http://svn.somewhere.com/...<br>- Questions and comments to somemailing_list<br>- Report bugs at http://bug.somewhere.com/..<br><br><br>Change history<br>**************<br><br>Changelog<br>=========<br><br>0.1 (xxxx-xx-xx)<br>----------------<br><br>- Created recipe with ZopeSkel<br>  [\"\"]<br><br>Detailed Documentation<br>**********************<br><br>Introduction<br>============<br><br>This is a full-blown functional test. The emphasis here is on testing what<br>the user may input and see, and the system is largely tested as a black box.<br>We use PloneTestCase to set up this test as well, so we have a full Plone site<br>to play with. We *can* inspect the state of the portal, e.g. using <br>self.portal and self.folder, but it is often frowned upon since you are not<br>treating the system as a black box. Also, if you, for example, log in or set<br>roles using calls like self.setRoles(), these are not reflected in the test<br>browser, which runs as a separate session.<br><br>Being a doctest, we can tell a story here.<br><br>First, we must perform some setup. We use the testbrowser that is shipped<br>with Five, as this provides proper Zope 2 integration. Most of the <br>documentation, though, is in the underlying zope.testbrower package.<br><br>    &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>    &gt;&gt;&gt; browser = Browser()<br>    &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br><br>The following is useful when writing and debugging testbrowser tests. It lets<br>us see all error messages in the error_log.<br><br>    &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br><br>With that in place, we can go to the portal front page and log in. We will<br>do this using the default user from PloneTestCase:<br><br>    &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br><br>Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  <br><br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br><br>Here, we set the value of the fields on the login form and then simulate a<br>submit click.  We then ensure that we get the friendly logged-in message:<br><br>    &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>    True<br><br>Finally, let's return to the front page of our site before continuing<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>-*- extra stuff goes here -*-<br>The BarcampParticipant content type<br>===============================<br><br>In this section we are tesing the BarcampParticipant content type by performing<br>basic operations like adding, updadating and deleting BarcampParticipant content<br>items.<br><br>Adding a new BarcampParticipant content item<br>--------------------------------<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>Then we select the type of item we want to add. In this case we select<br>'BarcampParticipant' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampParticipant').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampParticipant' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampParticipant Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>And we are done! We added a new 'BarcampParticipant' content item to the portal.<br><br>Updating an existing BarcampParticipant content item<br>---------------------------------------<br><br>Let's click on the 'edit' tab and update the object attribute values.<br><br>    &gt;&gt;&gt; browser.getLink('Edit').click()<br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'New BarcampParticipant Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br><br>We check that the changes were applied.<br><br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br>    &gt;&gt;&gt; 'New BarcampParticipant Sample' in browser.contents<br>    True<br><br>Removing a/an BarcampParticipant content item<br>--------------------------------<br><br>If we go to the home page, we can see a tab with the 'New BarcampParticipant<br>Sample' title in the global navigation tabs.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampParticipant Sample' in browser.contents<br>    True<br><br>Now we are going to delete the 'New BarcampParticipant Sample' object. First we<br>go to the contents tab and select the 'New BarcampParticipant Sample' for<br>deletion.<br><br>    &gt;&gt;&gt; browser.getLink('Contents').click()<br>    &gt;&gt;&gt; browser.getControl('New BarcampParticipant Sample').click()<br><br>We click on the 'Delete' button.<br><br>    &gt;&gt;&gt; browser.getControl('Delete').click()<br>    &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>    True<br><br>So, if we go back to the home page, there is no longer a 'New BarcampParticipant<br>Sample' tab.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampParticipant Sample' in browser.contents<br>    False<br><br>Adding a new BarcampParticipant content item as contributor<br>------------------------------------------------<br><br>Not only site managers are allowed to add BarcampParticipant content items, but<br>also site contributors.<br><br>Let's logout and then login as 'contributor', a portal member that has the<br>contributor role assigned.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>We select 'BarcampParticipant' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampParticipant').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampParticipant' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampParticipant Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>Done! We added a new BarcampParticipant content item logged in as contributor.<br><br>Finally, let's login back as manager.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br><br>The BarcampSession content type<br>===============================<br><br>In this section we are tesing the BarcampSession content type by performing<br>basic operations like adding, updadating and deleting BarcampSession content<br>items.<br><br>Adding a new BarcampSession content item<br>--------------------------------<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>Then we select the type of item we want to add. In this case we select<br>'BarcampSession' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampSession').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampSession' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampSession Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>And we are done! We added a new 'BarcampSession' content item to the portal.<br><br>Updating an existing BarcampSession content item<br>---------------------------------------<br><br>Let's click on the 'edit' tab and update the object attribute values.<br><br>    &gt;&gt;&gt; browser.getLink('Edit').click()<br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'New BarcampSession Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br><br>We check that the changes were applied.<br><br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br>    &gt;&gt;&gt; 'New BarcampSession Sample' in browser.contents<br>    True<br><br>Removing a/an BarcampSession content item<br>--------------------------------<br><br>If we go to the home page, we can see a tab with the 'New BarcampSession<br>Sample' title in the global navigation tabs.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampSession Sample' in browser.contents<br>    True<br><br>Now we are going to delete the 'New BarcampSession Sample' object. First we<br>go to the contents tab and select the 'New BarcampSession Sample' for<br>deletion.<br><br>    &gt;&gt;&gt; browser.getLink('Contents').click()<br>    &gt;&gt;&gt; browser.getControl('New BarcampSession Sample').click()<br><br>We click on the 'Delete' button.<br><br>    &gt;&gt;&gt; browser.getControl('Delete').click()<br>    &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>    True<br><br>So, if we go back to the home page, there is no longer a 'New BarcampSession<br>Sample' tab.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampSession Sample' in browser.contents<br>    False<br><br>Adding a new BarcampSession content item as contributor<br>------------------------------------------------<br><br>Not only site managers are allowed to add BarcampSession content items, but<br>also site contributors.<br><br>Let's logout and then login as 'contributor', a portal member that has the<br>contributor role assigned.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>We select 'BarcampSession' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampSession').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampSession' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampSession Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>Done! We added a new BarcampSession content item logged in as contributor.<br><br>Finally, let's login back as manager.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br><br>The BarcampEvent content type<br>===============================<br><br>In this section we are tesing the BarcampEvent content type by performing<br>basic operations like adding, updadating and deleting BarcampEvent content<br>items.<br><br>Adding a new BarcampEvent content item<br>--------------------------------<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>Then we select the type of item we want to add. In this case we select<br>'BarcampEvent' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampEvent').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampEvent' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampEvent Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>And we are done! We added a new 'BarcampEvent' content item to the portal.<br><br>Updating an existing BarcampEvent content item<br>---------------------------------------<br><br>Let's click on the 'edit' tab and update the object attribute values.<br><br>    &gt;&gt;&gt; browser.getLink('Edit').click()<br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'New BarcampEvent Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br><br>We check that the changes were applied.<br><br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br>    &gt;&gt;&gt; 'New BarcampEvent Sample' in browser.contents<br>    True<br><br>Removing a/an BarcampEvent content item<br>--------------------------------<br><br>If we go to the home page, we can see a tab with the 'New BarcampEvent<br>Sample' title in the global navigation tabs.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampEvent Sample' in browser.contents<br>    True<br><br>Now we are going to delete the 'New BarcampEvent Sample' object. First we<br>go to the contents tab and select the 'New BarcampEvent Sample' for<br>deletion.<br><br>    &gt;&gt;&gt; browser.getLink('Contents').click()<br>    &gt;&gt;&gt; browser.getControl('New BarcampEvent Sample').click()<br><br>We click on the 'Delete' button.<br><br>    &gt;&gt;&gt; browser.getControl('Delete').click()<br>    &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>    True<br><br>So, if we go back to the home page, there is no longer a 'New BarcampEvent<br>Sample' tab.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New BarcampEvent Sample' in browser.contents<br>    False<br><br>Adding a new BarcampEvent content item as contributor<br>------------------------------------------------<br><br>Not only site managers are allowed to add BarcampEvent content items, but<br>also site contributors.<br><br>Let's logout and then login as 'contributor', a portal member that has the<br>contributor role assigned.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>We select 'BarcampEvent' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('BarcampEvent').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'BarcampEvent' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'BarcampEvent Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>Done! We added a new BarcampEvent content item logged in as contributor.<br><br>Finally, let's login back as manager.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br><br><br><br>Contributors<br>************<br><br>\"\", Author<br><br><br>Download<br>********\n          </div>"}, "last_serial": 787651, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6960fa5249b0aa9620b3630ba7e86cc1", "sha256": "d083b38a828191bf89f0d135580a8ff62ccbe694a852aa0274937282983419af"}, "downloads": -1, "filename": "collective.barcamp-0.1.tar.gz", "has_sig": false, "md5_digest": "6960fa5249b0aa9620b3630ba7e86cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23895, "upload_time": "2011-08-16T08:25:58", "upload_time_iso_8601": "2011-08-16T08:25:58.488081Z", "url": "https://files.pythonhosted.org/packages/84/1b/5d60d4c16787d858393e8d5551dc4f57664c890a8239970e22754ff31f84/collective.barcamp-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6960fa5249b0aa9620b3630ba7e86cc1", "sha256": "d083b38a828191bf89f0d135580a8ff62ccbe694a852aa0274937282983419af"}, "downloads": -1, "filename": "collective.barcamp-0.1.tar.gz", "has_sig": false, "md5_digest": "6960fa5249b0aa9620b3630ba7e86cc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23895, "upload_time": "2011-08-16T08:25:58", "upload_time_iso_8601": "2011-08-16T08:25:58.488081Z", "url": "https://files.pythonhosted.org/packages/84/1b/5d60d4c16787d858393e8d5551dc4f57664c890a8239970e22754ff31f84/collective.barcamp-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:01 2020"}