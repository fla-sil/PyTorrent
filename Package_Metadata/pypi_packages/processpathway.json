{"info": {"author": "Chris von Csefalvay", "author_email": "chris@chrisvoncsefalvay.com", "bugtrack_url": null, "classifiers": [], "description": "ProcessPathway\n--------------\n\nProcessPathway is a nifty little tool that lets you play with image processing algorithms instead of wiring up your test\nbench all day. It is designed to feed a video camera input (a webcam, usually) through any functions that can digest and\nreturn a numpy matrix (think OpenCV).\n\nHow to use\n==========\n\nThe `example_threshold.py` example, which - as the name suggests - thresholds the the webcam input, is a good example \nfor what a typical ProcessPathway pipeline would look like:\n\n```python\nimport cv2\nfrom processpathway import LiveProcess\n```\nFirst, import the LiveProcess object from processpathway. You might want to also import whatever processing functions\nyou need.\n\n```\ndef convert_to_grayscale(_frame):\n    _frame = cv2.cvtColor(_frame, cv2.COLOR_BGR2GRAY)\n    return _frame\n\ndef threshold(_frame):\n    _, _frame = cv2.threshold(_frame, 128, 255, cv2.THRESH_BINARY)\n    return _frame\n\ndef reconvert_to_bgr(_frame):\n    _frame = cv2.cvtColor(_frame, cv2.COLOR_GRAY2BGR)\n    return _frame\n```\n\nWrite your functions. The only constraint is that they should take and emit a numpy.ndarray image. Of course, that does \nnot mean you can't code whatever side effects you need them to generate!\n\n```\nif __name__ == '__main__':\n    processor = LiveProcess(fps=True)\n    processor.bind_process(convert_to_grayscale, threshold, reconvert_to_bgr)\n    processor.initialise_capture_device(0)\n    processor.loop()\n```\n\nUpon call, attach `LiveProcess` to a variable, then bind the processing functions to it, *in the order you want them to \nbe performed*! Then, bind a capture device and initialise it. Finally, start the loop.\n\nBuilt-in functionalities\n========================\n\n* FPS calculation (use `fps=True` when constructing your `LiveProcess` instance)\n* Screenshotting (bound to the `s` key, on by default but can be disabled using `screencap=False` in the `LiveProcess`\nconstructor\n* Automatic clean-up and closedown (using the `esc` key by default)\n* And lots more...\n\nTodos\n=====\n\n* Tests!\n* Documentation!\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/chrisvoncsefalvay/processpathway/tarball/0.3.11", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/chrisvoncsefalvay/processpathway", "keywords": "image processing,computer vision,opencv", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "processpathway", "package_url": "https://pypi.org/project/processpathway/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/processpathway/", "project_urls": {"Download": "https://github.com/chrisvoncsefalvay/processpathway/tarball/0.3.11", "Homepage": "https://www.github.com/chrisvoncsefalvay/processpathway"}, "release_url": "https://pypi.org/project/processpathway/0.3.11/", "requires_dist": null, "requires_python": null, "summary": "A nifty little toolkit to create stress-free, frustrationless image processing pathways from your webcam for computer vision experiments. Or observing your cat.", "version": "0.3.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            ProcessPathway<br>--------------<br><br>ProcessPathway is a nifty little tool that lets you play with image processing algorithms instead of wiring up your test<br>bench all day. It is designed to feed a video camera input (a webcam, usually) through any functions that can digest and<br>return a numpy matrix (think OpenCV).<br><br>How to use<br>==========<br><br>The `example_threshold.py` example, which - as the name suggests - thresholds the the webcam input, is a good example <br>for what a typical ProcessPathway pipeline would look like:<br><br>```python<br>import cv2<br>from processpathway import LiveProcess<br>```<br>First, import the LiveProcess object from processpathway. You might want to also import whatever processing functions<br>you need.<br><br>```<br>def convert_to_grayscale(_frame):<br>    _frame = cv2.cvtColor(_frame, cv2.COLOR_BGR2GRAY)<br>    return _frame<br><br>def threshold(_frame):<br>    _, _frame = cv2.threshold(_frame, 128, 255, cv2.THRESH_BINARY)<br>    return _frame<br><br>def reconvert_to_bgr(_frame):<br>    _frame = cv2.cvtColor(_frame, cv2.COLOR_GRAY2BGR)<br>    return _frame<br>```<br><br>Write your functions. The only constraint is that they should take and emit a numpy.ndarray image. Of course, that does <br>not mean you can't code whatever side effects you need them to generate!<br><br>```<br>if __name__ == '__main__':<br>    processor = LiveProcess(fps=True)<br>    processor.bind_process(convert_to_grayscale, threshold, reconvert_to_bgr)<br>    processor.initialise_capture_device(0)<br>    processor.loop()<br>```<br><br>Upon call, attach `LiveProcess` to a variable, then bind the processing functions to it, *in the order you want them to <br>be performed*! Then, bind a capture device and initialise it. Finally, start the loop.<br><br>Built-in functionalities<br>========================<br><br>* FPS calculation (use `fps=True` when constructing your `LiveProcess` instance)<br>* Screenshotting (bound to the `s` key, on by default but can be disabled using `screencap=False` in the `LiveProcess`<br>constructor<br>* Automatic clean-up and closedown (using the `esc` key by default)<br>* And lots more...<br><br>Todos<br>=====<br><br>* Tests!<br>* Documentation!<br>\n          </div>"}, "last_serial": 2200733, "releases": {"0.3.11": [{"comment_text": "", "digests": {"md5": "6fa1882a6333a6951686d5b69325a8e5", "sha256": "a9b123f691d3de242c6d7ff4f3342b92de414b3ebc798ebf6c945a4095a5617b"}, "downloads": -1, "filename": "processpathway-0.3.11.tar.gz", "has_sig": false, "md5_digest": "6fa1882a6333a6951686d5b69325a8e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4940, "upload_time": "2016-07-03T18:04:19", "upload_time_iso_8601": "2016-07-03T18:04:19.083016Z", "url": "https://files.pythonhosted.org/packages/c8/3a/510ebacd26f8ac274965d5d9a8fc995ae86eb760ef331a3d63b88aa8e0fc/processpathway-0.3.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fa1882a6333a6951686d5b69325a8e5", "sha256": "a9b123f691d3de242c6d7ff4f3342b92de414b3ebc798ebf6c945a4095a5617b"}, "downloads": -1, "filename": "processpathway-0.3.11.tar.gz", "has_sig": false, "md5_digest": "6fa1882a6333a6951686d5b69325a8e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4940, "upload_time": "2016-07-03T18:04:19", "upload_time_iso_8601": "2016-07-03T18:04:19.083016Z", "url": "https://files.pythonhosted.org/packages/c8/3a/510ebacd26f8ac274965d5d9a8fc995ae86eb760ef331a3d63b88aa8e0fc/processpathway-0.3.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:54 2020"}