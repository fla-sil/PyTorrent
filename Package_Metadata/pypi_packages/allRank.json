{"info": {"author": "", "author_email": "allrank@allegro.pl", "bugtrack_url": null, "classifiers": [], "description": "# allRank : Learning to Rank in PyTorch\n\n## About\n\nallRank is a PyTorch-based framework for training neural Learning-to-Rank (LTR) models, featuring implementations of:\n* common pointwise, pairwise and listwise loss functions\n* fully connected and Transformer-like scoring functions\n* commonly used evaluation metrics like Normalized Discounted Cumulative Gain (NDCG) and Mean Reciprocal Rank (MRR)\n\n### Motivation\n\nallRank provides an easy and flexible way to experiment with various LTR neural network models and loss functions.\nIt is easy to add a custom loss, and to configure the model and the training procedure. \nWe hope that allRank will facilitate both research in neural LTR and its industrial applications.\n\n## Features\n\n### Implemented loss functions:\n 1. ListNet (For a binary and graded relevance)\n 2. ListMLE\n 3. RankNet\n 4. Ordinal loss\n 5. LambdaRank\n 6. LambdaLoss\n 7. ApproxNDCG\n 8. RMSE\n\n### Getting started guide\n\nTo help you get started, we provide a ```run_example.sh``` script which generates dummy ranking data in libsvm format and trains\n a Transformer model on the data using provided example ```config.json``` config file. Once you run the script, the dummy data can be found in `dummy_data` directory\n and the results of the experiment in `test_run` directory. To run the example, Docker is required.\n\n### Configuring your model & training\n\nTo train your own model, configure your experiment in ```config.json``` file and run  \n\n```python allrank/main.py --config_file_name allrank/config.json --run_id <the_name_of_your_experiment> --output <the_place_to_save_results>```\n\nAll the hyperparameters of the training procedure: i.e. model defintion, data location, loss and metrics used, training hyperparametrs etc. are controlled\nby the ```config.json``` file. We provide a template file ```config_template.json``` where supported attributes, their meaning and possible values are explained.\n Note that following MSLR-WEB30K convention, your libsvm file with training data should be named `train.txt`. You can specify the name of the validation dataset \n (eg. valid or test) in the config.\n\n\n### Implementing custom loss functions\n\nTo experiment with your own custom loss, you need to implement a function that takes two tensors (model prediction and ground truth) as input\n and put it in the `losses` package, making sure it is exposed on a package level.\nTo use it in training, simply pass the name (and args, if your loss method has some hyperparameters) of your function in the correct place in the config file:\n\n```\n\"loss\": {\n    \"name\": \"yourLoss\",\n    \"args\": {\n        \"arg1\": val1,\n        \"arg2: val2\n    }\n  }\n```\n\n## Continuous integration\n\nYou should run `scripts/ci.sh` to verify that code passes style guidelines and unit tests.\n\n## License\n\nApache 2 License\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/allegro/allRank", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "allRank", "package_url": "https://pypi.org/project/allRank/", "platform": "", "project_url": "https://pypi.org/project/allRank/", "project_urls": {"Homepage": "https://github.com/allegro/allRank"}, "release_url": "https://pypi.org/project/allRank/1.2.2/", "requires_dist": ["torch (==1.4.0)", "torchvision (==0.5.0)", "scikit-learn (==0.22.1)", "pandas (==0.25.3)", "numpy (==1.18.1)", "scipy (==1.4.1)", "attrs (==19.3.0)", "flatten-dict (==0.2.0)", "tensorboardX (==2.0.0)", "gcsfs (>=0.6.0)"], "requires_python": "", "summary": "allRank is a framework for training learning-to-rank neural models", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>allRank : Learning to Rank in PyTorch</h1>\n<h2>About</h2>\n<p>allRank is a PyTorch-based framework for training neural Learning-to-Rank (LTR) models, featuring implementations of:</p>\n<ul>\n<li>common pointwise, pairwise and listwise loss functions</li>\n<li>fully connected and Transformer-like scoring functions</li>\n<li>commonly used evaluation metrics like Normalized Discounted Cumulative Gain (NDCG) and Mean Reciprocal Rank (MRR)</li>\n</ul>\n<h3>Motivation</h3>\n<p>allRank provides an easy and flexible way to experiment with various LTR neural network models and loss functions.\nIt is easy to add a custom loss, and to configure the model and the training procedure.\nWe hope that allRank will facilitate both research in neural LTR and its industrial applications.</p>\n<h2>Features</h2>\n<h3>Implemented loss functions:</h3>\n<ol>\n<li>ListNet (For a binary and graded relevance)</li>\n<li>ListMLE</li>\n<li>RankNet</li>\n<li>Ordinal loss</li>\n<li>LambdaRank</li>\n<li>LambdaLoss</li>\n<li>ApproxNDCG</li>\n<li>RMSE</li>\n</ol>\n<h3>Getting started guide</h3>\n<p>To help you get started, we provide a <code>run_example.sh</code> script which generates dummy ranking data in libsvm format and trains\na Transformer model on the data using provided example <code>config.json</code> config file. Once you run the script, the dummy data can be found in <code>dummy_data</code> directory\nand the results of the experiment in <code>test_run</code> directory. To run the example, Docker is required.</p>\n<h3>Configuring your model &amp; training</h3>\n<p>To train your own model, configure your experiment in <code>config.json</code> file and run</p>\n<p><code>python allrank/main.py --config_file_name allrank/config.json --run_id &lt;the_name_of_your_experiment&gt; --output &lt;the_place_to_save_results&gt;</code></p>\n<p>All the hyperparameters of the training procedure: i.e. model defintion, data location, loss and metrics used, training hyperparametrs etc. are controlled\nby the <code>config.json</code> file. We provide a template file <code>config_template.json</code> where supported attributes, their meaning and possible values are explained.\nNote that following MSLR-WEB30K convention, your libsvm file with training data should be named <code>train.txt</code>. You can specify the name of the validation dataset\n(eg. valid or test) in the config.</p>\n<h3>Implementing custom loss functions</h3>\n<p>To experiment with your own custom loss, you need to implement a function that takes two tensors (model prediction and ground truth) as input\nand put it in the <code>losses</code> package, making sure it is exposed on a package level.\nTo use it in training, simply pass the name (and args, if your loss method has some hyperparameters) of your function in the correct place in the config file:</p>\n<pre><code>\"loss\": {\n    \"name\": \"yourLoss\",\n    \"args\": {\n        \"arg1\": val1,\n        \"arg2: val2\n    }\n  }\n</code></pre>\n<h2>Continuous integration</h2>\n<p>You should run <code>scripts/ci.sh</code> to verify that code passes style guidelines and unit tests.</p>\n<h2>License</h2>\n<p>Apache 2 License</p>\n\n          </div>"}, "last_serial": 6777251, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "5322556c7946c8f2a80263c3bb0a8bc8", "sha256": "27855aaf42167234d2752362c941515f3fe58325501c88904c23263ea5733dfe"}, "downloads": -1, "filename": "allRank-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5322556c7946c8f2a80263c3bb0a8bc8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36786, "upload_time": "2020-02-21T13:58:02", "upload_time_iso_8601": "2020-02-21T13:58:02.235246Z", "url": "https://files.pythonhosted.org/packages/c5/99/f1be7d624bd7a6d5578cb4a77e8dc35267f0da7e058e99736f9e415ea084/allRank-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73618108ea2b55f191648912ef1ea95e", "sha256": "b4d954f06a8aceda55a2451fa7b10d608981f6d074c6837e0147036c2cce71d7"}, "downloads": -1, "filename": "allRank-1.2.0.tar.gz", "has_sig": false, "md5_digest": "73618108ea2b55f191648912ef1ea95e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21163, "upload_time": "2020-02-21T13:58:04", "upload_time_iso_8601": "2020-02-21T13:58:04.260767Z", "url": "https://files.pythonhosted.org/packages/10/0d/e6720268ccd1553e92c5f473f42068b3688ad489469574a0b6a6b06c84b4/allRank-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "4b82ddeaac2977a75a59923954028ccb", "sha256": "9f1334f8725902774df176555eae5299d448a88662176b2b4e01925bea8ef46e"}, "downloads": -1, "filename": "allRank-1.2.1-py3.7.egg", "has_sig": false, "md5_digest": "4b82ddeaac2977a75a59923954028ccb", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 76532, "upload_time": "2020-03-09T14:06:58", "upload_time_iso_8601": "2020-03-09T14:06:58.887835Z", "url": "https://files.pythonhosted.org/packages/1e/ba/3720d6ba38d8ffccf9c7d99f345de336b2abbfee033239f2d7689483e8a5/allRank-1.2.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "917ba693cb69731d7042fcdc744e8a70", "sha256": "7d00bebdbbe0af85e0ceeac2e60814b1d08923831c2cb527158d8cc94f99b32e"}, "downloads": -1, "filename": "allRank-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "917ba693cb69731d7042fcdc744e8a70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36966, "upload_time": "2020-03-04T13:13:13", "upload_time_iso_8601": "2020-03-04T13:13:13.946623Z", "url": "https://files.pythonhosted.org/packages/f0/a7/d10d21508d9409ae89330a4800b3195572fe93ccd249bc600608fd9cec73/allRank-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c1f9c32406f7f782312e9ee2753d600", "sha256": "eee81a0fc07864a3e202babd406322413f8641623dc36ee580214538b1c47aec"}, "downloads": -1, "filename": "allRank-1.2.1.tar.gz", "has_sig": false, "md5_digest": "4c1f9c32406f7f782312e9ee2753d600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21286, "upload_time": "2020-03-04T13:13:15", "upload_time_iso_8601": "2020-03-04T13:13:15.158783Z", "url": "https://files.pythonhosted.org/packages/7b/96/61c56dba2bfb3835879b3255d00331d03091e854c9ddfb09d2accd2af9ab/allRank-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "81eb5ccd3cc90558fb4435f03b206292", "sha256": "6590bd15fe2561b9e2f3881449c432a2911ae7170411396d8111dcee59a45bbb"}, "downloads": -1, "filename": "allRank-1.2.2-py3.7.egg", "has_sig": false, "md5_digest": "81eb5ccd3cc90558fb4435f03b206292", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 76536, "upload_time": "2020-03-09T14:07:01", "upload_time_iso_8601": "2020-03-09T14:07:01.483719Z", "url": "https://files.pythonhosted.org/packages/0d/af/0b5d26e63c02c6328fe8894bff0e15f5271f92481ff948099edbdc1f01d4/allRank-1.2.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2bfcf137f27d4407c6501c6e2eef316", "sha256": "8d0d203f3211abc07fc7219c0dde982044c649fe03c6f95c920b7d452f5c99d4"}, "downloads": -1, "filename": "allRank-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a2bfcf137f27d4407c6501c6e2eef316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36970, "upload_time": "2020-03-09T14:06:56", "upload_time_iso_8601": "2020-03-09T14:06:56.992308Z", "url": "https://files.pythonhosted.org/packages/b6/19/8936210b826aeafca31ae63e6eb4fb4764f6efecab554d82f58abdd11eb8/allRank-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1806b843d33788e945b4eed4c8ae0e38", "sha256": "0eb123f2d5e58b192c6fe112c54685bcd3bc1f64af20ba9595c284a8eb94777b"}, "downloads": -1, "filename": "allRank-1.2.2.tar.gz", "has_sig": false, "md5_digest": "1806b843d33788e945b4eed4c8ae0e38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21305, "upload_time": "2020-03-09T14:07:02", "upload_time_iso_8601": "2020-03-09T14:07:02.711109Z", "url": "https://files.pythonhosted.org/packages/46/3f/70e3703c45c302cebbbc33ddc1f9711cf2ff7ca884f64488a02b5e0a1396/allRank-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81eb5ccd3cc90558fb4435f03b206292", "sha256": "6590bd15fe2561b9e2f3881449c432a2911ae7170411396d8111dcee59a45bbb"}, "downloads": -1, "filename": "allRank-1.2.2-py3.7.egg", "has_sig": false, "md5_digest": "81eb5ccd3cc90558fb4435f03b206292", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 76536, "upload_time": "2020-03-09T14:07:01", "upload_time_iso_8601": "2020-03-09T14:07:01.483719Z", "url": "https://files.pythonhosted.org/packages/0d/af/0b5d26e63c02c6328fe8894bff0e15f5271f92481ff948099edbdc1f01d4/allRank-1.2.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2bfcf137f27d4407c6501c6e2eef316", "sha256": "8d0d203f3211abc07fc7219c0dde982044c649fe03c6f95c920b7d452f5c99d4"}, "downloads": -1, "filename": "allRank-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a2bfcf137f27d4407c6501c6e2eef316", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 36970, "upload_time": "2020-03-09T14:06:56", "upload_time_iso_8601": "2020-03-09T14:06:56.992308Z", "url": "https://files.pythonhosted.org/packages/b6/19/8936210b826aeafca31ae63e6eb4fb4764f6efecab554d82f58abdd11eb8/allRank-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1806b843d33788e945b4eed4c8ae0e38", "sha256": "0eb123f2d5e58b192c6fe112c54685bcd3bc1f64af20ba9595c284a8eb94777b"}, "downloads": -1, "filename": "allRank-1.2.2.tar.gz", "has_sig": false, "md5_digest": "1806b843d33788e945b4eed4c8ae0e38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21305, "upload_time": "2020-03-09T14:07:02", "upload_time_iso_8601": "2020-03-09T14:07:02.711109Z", "url": "https://files.pythonhosted.org/packages/46/3f/70e3703c45c302cebbbc33ddc1f9711cf2ff7ca884f64488a02b5e0a1396/allRank-1.2.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:24 2020"}