{"info": {"author": "Bharatraj S Telkar, Daniel Isaac, Shreyas V Patil", "author_email": "telkarraj@gmail.com, danielbcbs2@gmail.com, pshreyasv100@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pygenetic: An Efficient Generic, User-friendly Python Genetic Algorithm API\n[![Build Status](https://travis-ci.com/danny311296/pygenetic.svg?token=A3bcYHcDEvK23esetBsC&branch=master)](https://travis-ci.com/danny311296/pygenetic) [![MIT Licence](https://badges.frapsoft.com/os/mit/mit.svg?v=103)](https://opensource.org/licenses/mit-license.php)  [![docs](https://readthedocs.org/projects/pygenetic/badge/?version=latest)](https://pygenetic.readthedocs.io/en/latest/?badge=latest)\n\npygenetic is a Python Genetic Algorithm API which is User-Friendly as well as Generic in nature unlike most GA APIs which make a trade off between the two.\n\n## Motivation\n![alt text](https://github.com/danny311296/pygenetic/blob/phase1/reports/imgs/motivation.png)\nWhile some APIs like DEAP and many more recent ones which are very efficient and generic are less user friendly in nature, other APIs like genetics and other smaller ones which are the best in terms of user friendliness, they are less generic. This API intends to strike a balance - good in terms of both user friendliness and genericity.\n\n## Features\n* Presence of both High-Level(`SimpleGA`) and Low-Level API(`GAEngine`) which users can use as per need.\n* Very generic API - Users can customize different part of the GA be it Evolution, Statistics, Different handlers, Chromosome Representations.\n* Supports efficient evolution execution using Apache Spark. This is highly scalable as more workers can be deployed. Parallelization of fitness evaluation, selection, crossovers and mutations are taken care of.\n* Supports Adaptive Mutation Rates based on how diverse the population is.\n* Supports Hall of Fame(best ever chromosome) Injection so that the best chromosome isn't lost in later generations due to the selection method used.\n* Supports Efficient Iteration Halt \n* Supports Visualization of Statistics like max, min, avg, diversity of fitnesses, mutation rates. Users can also define custom statistics\n* Supports usage of multiple crossovers and mutations in one GA execution to enhance diversity\n* Supports Population Control(control the population size or allow it grow/shrink) which users can make use of in various research purposes\n* Provides a bunch of Standard Selection, Crossovers, Mutations and Fitness Functions\n* Provides continue evolve feature so users can continue from previous evolutions instead of starting all over again.\n* Provides ANN Best Topology finder using GA functionality\n\n## Installation\n\npygenetic is published on pypi(https://pypi.org/project/pygenetic/) and can be easily installed by:\n\n```sh\n$ pip3 install pygenetic\n```\n\nFor using pyspark functionality, install `pyspark` , Apache Spark, Scala and JVM.\nFor using the ANN Topology Finder, install `tensorflow` and `keras` \n\n## Tests\n\nThe various tests are present in the `tests/` directory. The main API tests can tested by:\n\n```sh\n$ pytest tests/modules\n```\n\n## Usage\n\n### High Level API Basic Usage\n\n```\nfrom pygenetic import SimpleGA\nga = SimpleGA.SimpleGA(minValue=1,maxValue=120,\n                      noOfGenes=20,fitness_func=lambda x:sum(x),\n                      duplicates=False,population_size=1000,\n                      fitness_type='max')\nga.evolve(100)\nprint(ga.best_fitness)\n``` \n\n### Low Level API Basic Usage\n\n```\nfrom pygenetic import ChromosomeFactory, GAEngine, Utils\nfactory = ChromosomeFactory.ChromosomeRangeFactory(\n\t\t\tnoOfGenes=8,minValue=1,maxValue=8)\nga = GAEngine.GAEngine(factory,100,fitness_type=('equal',8)\n\t\t\t\t\t\t,mut_prob = 0.3)\nga.addCrossoverHandler(Utils.CrossoverHandlers.distinct)\nga.addMutationHandler(Utils.MutationHandlers.swap)\nga.setSelectionHandler(Utils.SelectionHandlers.best)\nga.setFitnessHandler(Utils.Fitness.addition)\nga.evolve(10)\nprint(ga.best_fitness)\n```\n\n### For more advanced usages and tutorials\n\n Our python package is extensively documented on [ReadTheDocs](https://pygenetic.readthedocs.io/en/latest). Also, refer [this](https://github.com/danny311296/pygenetic/blob/master/examples/tutorial.md) for step by step tutorials.\n\n Refer `examples` for examples of solving different GAs using pygenetic\n\n## GA Online Execution\n Install python `flask` and run\n ```sh\n$ python3 flask/views.py\n```\nInput all the various fields needed for the GA. You can run the GA online and get the best 5 chromosomes of each generations followed by statistics. You can also download the equivalent pygenetic code based on all user inputs in the form\n\n## Authors\n* [Bharatraj S Telkar](https://github.com/BharatRajT) \n* [Daniel Isaac](https://github.com/danny311296) \n* [Shreyas V Patil](https://github.com/pshreyasv100)\n\n## Special Mentions\n* Special thanks to Ganesh K, Rahul Bhardwaj and Hardik Surana who lended their UI made for their Design Patterns project (https://github.com/ganesh-k13/GOF-Templates) as an intial template for us to work on for our Web GUI. \n* Special thanks to our Project Guide Prof.Chitra G M\n\n### License: MIT\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danny311296/pygenetic", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pygenetic", "package_url": "https://pypi.org/project/pygenetic/", "platform": "", "project_url": "https://pypi.org/project/pygenetic/", "project_urls": {"Homepage": "https://github.com/danny311296/pygenetic"}, "release_url": "https://pypi.org/project/pygenetic/1.0.2/", "requires_dist": ["rstr (==2.2.6)", "numpy (==1.15.4)", "matplotlib (==2.2.2)"], "requires_python": "", "summary": "An Efficient Python Genetic Algorithm API", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pygenetic: An Efficient Generic, User-friendly Python Genetic Algorithm API</h1>\n<p><a href=\"https://travis-ci.com/danny311296/pygenetic\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5398949f07d629ee255a936ddda483e894bcd4f8/68747470733a2f2f7472617669732d63692e636f6d2f64616e6e793331313239362f707967656e657469632e7376673f746f6b656e3d413362635948634445764b323365736574427343266272616e63683d6d6173746572\"></a> <a href=\"https://opensource.org/licenses/mit-license.php\" rel=\"nofollow\"><img alt=\"MIT Licence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e99120692b6c5474fec24401ea842145711d3503/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f6f732f6d69742f6d69742e7376673f763d313033\"></a>  <a href=\"https://pygenetic.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdfd6d6d155ce2f6ab7d4687dc5dac7b46a7b33f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707967656e657469632f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>pygenetic is a Python Genetic Algorithm API which is User-Friendly as well as Generic in nature unlike most GA APIs which make a trade off between the two.</p>\n<h2>Motivation</h2>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9dae98a8e7d94b5c8c007101cfe8e863c53951c8/68747470733a2f2f6769746875622e636f6d2f64616e6e793331313239362f707967656e657469632f626c6f622f7068617365312f7265706f7274732f696d67732f6d6f7469766174696f6e2e706e67\">\nWhile some APIs like DEAP and many more recent ones which are very efficient and generic are less user friendly in nature, other APIs like genetics and other smaller ones which are the best in terms of user friendliness, they are less generic. This API intends to strike a balance - good in terms of both user friendliness and genericity.</p>\n<h2>Features</h2>\n<ul>\n<li>Presence of both High-Level(<code>SimpleGA</code>) and Low-Level API(<code>GAEngine</code>) which users can use as per need.</li>\n<li>Very generic API - Users can customize different part of the GA be it Evolution, Statistics, Different handlers, Chromosome Representations.</li>\n<li>Supports efficient evolution execution using Apache Spark. This is highly scalable as more workers can be deployed. Parallelization of fitness evaluation, selection, crossovers and mutations are taken care of.</li>\n<li>Supports Adaptive Mutation Rates based on how diverse the population is.</li>\n<li>Supports Hall of Fame(best ever chromosome) Injection so that the best chromosome isn't lost in later generations due to the selection method used.</li>\n<li>Supports Efficient Iteration Halt</li>\n<li>Supports Visualization of Statistics like max, min, avg, diversity of fitnesses, mutation rates. Users can also define custom statistics</li>\n<li>Supports usage of multiple crossovers and mutations in one GA execution to enhance diversity</li>\n<li>Supports Population Control(control the population size or allow it grow/shrink) which users can make use of in various research purposes</li>\n<li>Provides a bunch of Standard Selection, Crossovers, Mutations and Fitness Functions</li>\n<li>Provides continue evolve feature so users can continue from previous evolutions instead of starting all over again.</li>\n<li>Provides ANN Best Topology finder using GA functionality</li>\n</ul>\n<h2>Installation</h2>\n<p>pygenetic is published on pypi(<a href=\"https://pypi.org/project/pygenetic/\" rel=\"nofollow\">https://pypi.org/project/pygenetic/</a>) and can be easily installed by:</p>\n<pre>$ pip3 install pygenetic\n</pre>\n<p>For using pyspark functionality, install <code>pyspark</code> , Apache Spark, Scala and JVM.\nFor using the ANN Topology Finder, install <code>tensorflow</code> and <code>keras</code></p>\n<h2>Tests</h2>\n<p>The various tests are present in the <code>tests/</code> directory. The main API tests can tested by:</p>\n<pre>$ pytest tests/modules\n</pre>\n<h2>Usage</h2>\n<h3>High Level API Basic Usage</h3>\n<pre><code>from pygenetic import SimpleGA\nga = SimpleGA.SimpleGA(minValue=1,maxValue=120,\n                      noOfGenes=20,fitness_func=lambda x:sum(x),\n                      duplicates=False,population_size=1000,\n                      fitness_type='max')\nga.evolve(100)\nprint(ga.best_fitness)\n</code></pre>\n<h3>Low Level API Basic Usage</h3>\n<pre><code>from pygenetic import ChromosomeFactory, GAEngine, Utils\nfactory = ChromosomeFactory.ChromosomeRangeFactory(\n\t\t\tnoOfGenes=8,minValue=1,maxValue=8)\nga = GAEngine.GAEngine(factory,100,fitness_type=('equal',8)\n\t\t\t\t\t\t,mut_prob = 0.3)\nga.addCrossoverHandler(Utils.CrossoverHandlers.distinct)\nga.addMutationHandler(Utils.MutationHandlers.swap)\nga.setSelectionHandler(Utils.SelectionHandlers.best)\nga.setFitnessHandler(Utils.Fitness.addition)\nga.evolve(10)\nprint(ga.best_fitness)\n</code></pre>\n<h3>For more advanced usages and tutorials</h3>\n<p>Our python package is extensively documented on <a href=\"https://pygenetic.readthedocs.io/en/latest\" rel=\"nofollow\">ReadTheDocs</a>. Also, refer <a href=\"https://github.com/danny311296/pygenetic/blob/master/examples/tutorial.md\" rel=\"nofollow\">this</a> for step by step tutorials.</p>\n<p>Refer <code>examples</code> for examples of solving different GAs using pygenetic</p>\n<h2>GA Online Execution</h2>\n<p>Install python <code>flask</code> and run</p>\n<pre>$ python3 flask/views.py\n</pre>\n<p>Input all the various fields needed for the GA. You can run the GA online and get the best 5 chromosomes of each generations followed by statistics. You can also download the equivalent pygenetic code based on all user inputs in the form</p>\n<h2>Authors</h2>\n<ul>\n<li><a href=\"https://github.com/BharatRajT\" rel=\"nofollow\">Bharatraj S Telkar</a></li>\n<li><a href=\"https://github.com/danny311296\" rel=\"nofollow\">Daniel Isaac</a></li>\n<li><a href=\"https://github.com/pshreyasv100\" rel=\"nofollow\">Shreyas V Patil</a></li>\n</ul>\n<h2>Special Mentions</h2>\n<ul>\n<li>Special thanks to Ganesh K, Rahul Bhardwaj and Hardik Surana who lended their UI made for their Design Patterns project (<a href=\"https://github.com/ganesh-k13/GOF-Templates\" rel=\"nofollow\">https://github.com/ganesh-k13/GOF-Templates</a>) as an intial template for us to work on for our Web GUI.</li>\n<li>Special thanks to our Project Guide Prof.Chitra G M</li>\n</ul>\n<h3>License: MIT</h3>\n\n          </div>"}, "last_serial": 5245648, "releases": {"1.0.2": [{"comment_text": "", "digests": {"md5": "156a9f58b2cce9e1d8702d887ef6ce6c", "sha256": "117871e02d7110647d2474531c1d55564b912432a069f0291cba043acdc5190e"}, "downloads": -1, "filename": "pygenetic-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "156a9f58b2cce9e1d8702d887ef6ce6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20743, "upload_time": "2019-05-09T04:26:23", "upload_time_iso_8601": "2019-05-09T04:26:23.864077Z", "url": "https://files.pythonhosted.org/packages/1a/87/7e7c24d90d8d4eec253fbd51212bd05872462bf1f6a7090f411ae4ddec2a/pygenetic-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "569464351fda92ca99c3bb3233b0ad5f", "sha256": "d5960b20a7925246ae8ef09bcdc0784435ab9e830bd92d43169dafd0fd9b0b5e"}, "downloads": -1, "filename": "pygenetic-1.0.2.tar.gz", "has_sig": false, "md5_digest": "569464351fda92ca99c3bb3233b0ad5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19050, "upload_time": "2019-05-09T04:26:25", "upload_time_iso_8601": "2019-05-09T04:26:25.395599Z", "url": "https://files.pythonhosted.org/packages/7e/3d/713e2ffa28051701909f21a67dd1a25933cbf92e56a7c76335c26abe5c48/pygenetic-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "156a9f58b2cce9e1d8702d887ef6ce6c", "sha256": "117871e02d7110647d2474531c1d55564b912432a069f0291cba043acdc5190e"}, "downloads": -1, "filename": "pygenetic-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "156a9f58b2cce9e1d8702d887ef6ce6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20743, "upload_time": "2019-05-09T04:26:23", "upload_time_iso_8601": "2019-05-09T04:26:23.864077Z", "url": "https://files.pythonhosted.org/packages/1a/87/7e7c24d90d8d4eec253fbd51212bd05872462bf1f6a7090f411ae4ddec2a/pygenetic-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "569464351fda92ca99c3bb3233b0ad5f", "sha256": "d5960b20a7925246ae8ef09bcdc0784435ab9e830bd92d43169dafd0fd9b0b5e"}, "downloads": -1, "filename": "pygenetic-1.0.2.tar.gz", "has_sig": false, "md5_digest": "569464351fda92ca99c3bb3233b0ad5f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19050, "upload_time": "2019-05-09T04:26:25", "upload_time_iso_8601": "2019-05-09T04:26:25.395599Z", "url": "https://files.pythonhosted.org/packages/7e/3d/713e2ffa28051701909f21a67dd1a25933cbf92e56a7c76335c26abe5c48/pygenetic-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:10 2020"}