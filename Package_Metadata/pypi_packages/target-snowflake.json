{"info": {"author": "datamill", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3 :: Only"], "description": "# Target Snowflake\n\n[![CircleCI](https://circleci.com/gh/datamill-co/target-snowflake.svg?style=svg)](https://circleci.com/gh/datamill-co/target-snowflake)\n\n[![PyPI version](https://badge.fury.io/py/target-snowflake.svg)](https://pypi.org/project/target-snowflake/)\n\n[![](https://img.shields.io/librariesio/github/datamill-co/target-snowflake.svg)](https://libraries.io/github/datamill-co/target-snowflake)\n\nA [Singer](https://singer.io/) Snowflake target, for use with Singer streams generated by Singer taps.\n\n## Snowflake Connector\n\n[Docs](https://docs.snowflake.net/manuals/user-guide/python-connector.html)\n\n## Install\n\n```sh\npip install target-snowflake\n```\n\n## Usage\n\n1. Follow the\n   [Singer.io Best Practices](https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target)\n   for setting up separate `tap` and `target` virtualenvs to avoid version\n   conflicts.\n\n1. Create a [config file](#configjson) at\n   `~/singer.io/target_snowflake_config.json` with Snowflake connection\n   information and target Snowflake schema and warehouse.\n\n   ```json\n   {\n     \"snowflake_account\": \"https://XXXXX.snowflakecomputing.com\",\n     \"snowflake_username\": \"myuser\",\n     \"snowflake_password\": \"1234\",\n     \"snowflake_database\": \"my_analytics\",\n     \"snowflake_schema\": \"mytapname\",\n     \"snowflake_warehouse\": \"dw\"\n   }\n   ```\n\n````\n\n1. Run `target-snowfkajke` against a [Singer](https://singer.io) tap.\n\n ```bash\n ~/.virtualenvs/tap-something/bin/tap-something \\\n   | ~/.virtualenvs/target-snowflake/bin/target-snowflake \\\n     --config ~/singer.io/target_snowflake_config.json >> state.json\n````\n\nIf you are running windows, the following is equivalent:\n\n```\nvenvs\\tap-exchangeratesapi\\Scripts\\tap-exchangeratesapi.exe | ^\nvenvs\\target-snowflake\\Scripts\\target-snowlfake.exe ^\n--config target_snowflake_config.json\n```\n\n### Config.json\n\nThe fields available to be specified in the config file are specified\nhere.\n\n| Field                       | Type                  | Default    | Details                                                                                                                                                                                                                                                                                                                                   |\n| --------------------------- | --------------------- | ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `snowflake_account`         | `[\"string\"]`          | `N/A`      | `ACCOUNT` might require the `region` and `cloud` platform where your account is located, in the form of: `<your_account_name>.<region_id>.<cloud>` (e.g. `xy12345.east-us-2.azure`) [Refer to Snowflake's documentation about Account](https://docs.snowflake.net/manuals/user-guide/connecting.html#your-snowflake-account-name-and-url) |\n| `snowflake_username`        | `[\"string\"]`          | `N/A`      |                                                                                                                                                                                                                                                                                                                                           |\n| `snowflake_password`        | `[\"string\", \"null\"]`  | `null`     |                                                                                                                                                                                                                                                                                                                                           |\n| `snowflake_database`        | `[\"string\"]`          | `N/A`      |                                                                                                                                                                                                                                                                                                                                           |\n| `snowflake_schema`          | `[\"string\", \"null\"]`  | `\"PUBLIC\"` |                                                                                                                                                                                                                                                                                                                                           |\n| `snowflake_warehouse`       | `[\"string\"]`          | `N/A`      |                                                                                                                                                                                                                                                                                                                                           |\n| `invalid_records_detect`    | `[\"boolean\", \"null\"]` | `true`     | Include `false` in your config to disable crashing on invalid records                                                                                                                                                                                                                                                                     |\n| `invalid_records_threshold` | `[\"integer\", \"null\"]` | `0`        | Include a positive value `n` in your config to allow at most `n` invalid records per stream before giving up.                                                                                                                                                                                                                             |\n| `disable_collection`        | `[\"string\", \"null\"]`  | `false`    | Include `true` in your config to disable [Singer Usage Logging](#usage-logging).                                                                                                                                                                                                                                                          |\n| `logging_level`             | `[\"string\", \"null\"]`  | `\"INFO\"`   | The level for logging. Set to `DEBUG` to get things like queries executed, timing of those queries, etc. See [Python's Logger Levels](https://docs.python.org/3/library/logging.html#levels) for information about valid values.                                                                                                          |\n| `persist_empty_tables`      | `[\"boolean\", \"null\"]` | `False`    | Whether the Target should create tables which have no records present in Remote.                                                                                                                                                                                                                                                          |\n| `state_support`             | `[\"boolean\", \"null\"]` | `True`     | Whether the Target should emit `STATE` messages to stdout for further consumption. In this mode, which is on by default, STATE messages are buffered in memory until all the records that occurred before them are flushed according to the batch flushing schedule the target is configured with.                                        |\n| `target_s3`                 | `[\"object\", \"null\"]`  | `N/A`      | When included, use `S3` to stage files. See `S3` below                                                                                                                                                                                                                                                                                    |\n\n#### S3 Config.json\n\n| Field                   | Type                 | Default | Details                                                                      |\n| ----------------------- | -------------------- | ------- | ---------------------------------------------------------------------------- |\n| `aws_access_key_id`     | `[\"string\"]`         | `N/A`   |                                                                              |\n| `aws_secret_access_key` | `[\"string\"]`         | `N/A`   |                                                                              |\n| `bucket`                | `[\"string\"]`         | `N/A`   | Bucket where staging files should be uploaded to.                            |\n| `key_prefix`            | `[\"string\", \"null\"]` | `\"\"`    | Prefix for staging file uploads to allow for better delineation of tmp files |\n\n## Limitations\n\n- [Snowflake SQL Identifiers](https://docs.snowflake.net/manuals/sql-reference/identifiers-syntax.html):\n  - Although Snowflake supports quoted identifiers to have non-alphanumeric values, `target-snowflake` limits\n    identifiers to uppercase alphanumerics, and underscores\n  - This is done to make querability/useability in Snowflake simpler, so as to not require users to _have_ to use\n    sometimes cumbersome quotes to query their data\n- Requires a [JSON Schema](https://json-schema.org/) for every stream.\n- Only string, string with date-time format, integer, number, boolean,\n  object, and array types with or without null are supported. Arrays can\n  have any of the other types listed, including objects as types within\n  items.\n  - Example of JSON Schema types that work\n    - `['number']`\n    - `['string']`\n    - `['string', 'null']`\n    - `['string', 'integer']`\n    - `['integer', 'number']`\n  - Exmaple of JSON Schema types that **DO NOT** work\n    - `['any']`\n    - `['null']`\n- JSON Schema combinations such as `anyOf` and `allOf` are not supported.\n- JSON Schema \\$ref is partially supported:\n  - **_NOTE:_** The following limitations are known to **NOT** fail gracefully\n  - Presently you cannot have any circular or recursive `$ref`s\n  - `$ref`s must be present within the schema:\n    - URI's do not work\n    - if the `$ref` is broken, the behaviour is considered unexpected\n- Any values which are the `string` `\\\\N` will be streamed to Snowflake as the literal `null`\n\n## Sponsorship\n\nTarget Snowflake is sponsored by Data Mill (Data Mill Services, LLC) [datamill.co](https://datamill.co/).\n\nData Mill helps organizations utilize modern data infrastructure and data science to power analytics, products, and services.\n\n---\n\nCopyright Data Mill Services, LLC 2018\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/datamill-co/target-snowflake", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "target-snowflake", "package_url": "https://pypi.org/project/target-snowflake/", "platform": "", "project_url": "https://pypi.org/project/target-snowflake/", "project_urls": {"Homepage": "https://github.com/datamill-co/target-snowflake"}, "release_url": "https://pypi.org/project/target-snowflake/0.0.2/", "requires_dist": ["singer-python (==5.6.1)", "singer-target-postgres (==0.1.11)", "snowflake-connector-python (==1.9.1)", "target-redshift (==0.0.10)", "chance (==0.110) ; extra == 'tests'", "Faker (==1.0.8) ; extra == 'tests'", "pytest (==4.5.0) ; extra == 'tests'"], "requires_python": "", "summary": "Singer.io target for loading data into Snowflake", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Target Snowflake</h1>\n<p><a href=\"https://circleci.com/gh/datamill-co/target-snowflake\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84ab3683023dd57a90fe39185d8e5f81a9342f21/68747470733a2f2f636972636c6563692e636f6d2f67682f646174616d696c6c2d636f2f7461726765742d736e6f77666c616b652e7376673f7374796c653d737667\"></a></p>\n<p><a href=\"https://pypi.org/project/target-snowflake/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01cad25ef2e883952255ec99070e7847d5cc666b/68747470733a2f2f62616467652e667572792e696f2f70792f7461726765742d736e6f77666c616b652e737667\"></a></p>\n<p><a href=\"https://libraries.io/github/datamill-co/target-snowflake\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b23194ad591c2a9a69e26d1fcfa2bf20638ea525/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f6769746875622f646174616d696c6c2d636f2f7461726765742d736e6f77666c616b652e737667\"></a></p>\n<p>A <a href=\"https://singer.io/\" rel=\"nofollow\">Singer</a> Snowflake target, for use with Singer streams generated by Singer taps.</p>\n<h2>Snowflake Connector</h2>\n<p><a href=\"https://docs.snowflake.net/manuals/user-guide/python-connector.html\" rel=\"nofollow\">Docs</a></p>\n<h2>Install</h2>\n<pre>pip install target-snowflake\n</pre>\n<h2>Usage</h2>\n<ol>\n<li>\n<p>Follow the\n<a href=\"https://github.com/singer-io/getting-started/blob/master/docs/RUNNING_AND_DEVELOPING.md#running-a-singer-tap-with-a-singer-target\" rel=\"nofollow\">Singer.io Best Practices</a>\nfor setting up separate <code>tap</code> and <code>target</code> virtualenvs to avoid version\nconflicts.</p>\n</li>\n<li>\n<p>Create a <a href=\"#configjson\" rel=\"nofollow\">config file</a> at\n<code>~/singer.io/target_snowflake_config.json</code> with Snowflake connection\ninformation and target Snowflake schema and warehouse.</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"snowflake_account\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://XXXXX.snowflakecomputing.com\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"snowflake_username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"myuser\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"snowflake_password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1234\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"snowflake_database\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_analytics\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"snowflake_schema\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mytapname\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"snowflake_warehouse\"</span><span class=\"p\">:</span> <span class=\"s2\">\"dw\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ol>\n<pre><code>\n1. Run `target-snowfkajke` against a [Singer](https://singer.io) tap.\n\n ```bash\n ~/.virtualenvs/tap-something/bin/tap-something \\\n   | ~/.virtualenvs/target-snowflake/bin/target-snowflake \\\n     --config ~/singer.io/target_snowflake_config.json &gt;&gt; state.json\n</code></pre>\n<p>If you are running windows, the following is equivalent:</p>\n<pre><code>venvs\\tap-exchangeratesapi\\Scripts\\tap-exchangeratesapi.exe | ^\nvenvs\\target-snowflake\\Scripts\\target-snowlfake.exe ^\n--config target_snowflake_config.json\n</code></pre>\n<h3>Config.json</h3>\n<p>The fields available to be specified in the config file are specified\nhere.</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>snowflake_account</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td><code>ACCOUNT</code> might require the <code>region</code> and <code>cloud</code> platform where your account is located, in the form of: <code>&lt;your_account_name&gt;.&lt;region_id&gt;.&lt;cloud&gt;</code> (e.g. <code>xy12345.east-us-2.azure</code>) <a href=\"https://docs.snowflake.net/manuals/user-guide/connecting.html#your-snowflake-account-name-and-url\" rel=\"nofollow\">Refer to Snowflake's documentation about Account</a></td>\n</tr>\n<tr>\n<td><code>snowflake_username</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>snowflake_password</code></td>\n<td><code>[\"string\", \"null\"]</code></td>\n<td><code>null</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>snowflake_database</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>snowflake_schema</code></td>\n<td><code>[\"string\", \"null\"]</code></td>\n<td><code>\"PUBLIC\"</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>snowflake_warehouse</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>invalid_records_detect</code></td>\n<td><code>[\"boolean\", \"null\"]</code></td>\n<td><code>true</code></td>\n<td>Include <code>false</code> in your config to disable crashing on invalid records</td>\n</tr>\n<tr>\n<td><code>invalid_records_threshold</code></td>\n<td><code>[\"integer\", \"null\"]</code></td>\n<td><code>0</code></td>\n<td>Include a positive value <code>n</code> in your config to allow at most <code>n</code> invalid records per stream before giving up.</td>\n</tr>\n<tr>\n<td><code>disable_collection</code></td>\n<td><code>[\"string\", \"null\"]</code></td>\n<td><code>false</code></td>\n<td>Include <code>true</code> in your config to disable <a href=\"#usage-logging\" rel=\"nofollow\">Singer Usage Logging</a>.</td>\n</tr>\n<tr>\n<td><code>logging_level</code></td>\n<td><code>[\"string\", \"null\"]</code></td>\n<td><code>\"INFO\"</code></td>\n<td>The level for logging. Set to <code>DEBUG</code> to get things like queries executed, timing of those queries, etc. See <a href=\"https://docs.python.org/3/library/logging.html#levels\" rel=\"nofollow\">Python's Logger Levels</a> for information about valid values.</td>\n</tr>\n<tr>\n<td><code>persist_empty_tables</code></td>\n<td><code>[\"boolean\", \"null\"]</code></td>\n<td><code>False</code></td>\n<td>Whether the Target should create tables which have no records present in Remote.</td>\n</tr>\n<tr>\n<td><code>state_support</code></td>\n<td><code>[\"boolean\", \"null\"]</code></td>\n<td><code>True</code></td>\n<td>Whether the Target should emit <code>STATE</code> messages to stdout for further consumption. In this mode, which is on by default, STATE messages are buffered in memory until all the records that occurred before them are flushed according to the batch flushing schedule the target is configured with.</td>\n</tr>\n<tr>\n<td><code>target_s3</code></td>\n<td><code>[\"object\", \"null\"]</code></td>\n<td><code>N/A</code></td>\n<td>When included, use <code>S3</code> to stage files. See <code>S3</code> below</td>\n</tr></tbody></table>\n<h4>S3 Config.json</h4>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Default</th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>aws_access_key_id</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>aws_secret_access_key</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>bucket</code></td>\n<td><code>[\"string\"]</code></td>\n<td><code>N/A</code></td>\n<td>Bucket where staging files should be uploaded to.</td>\n</tr>\n<tr>\n<td><code>key_prefix</code></td>\n<td><code>[\"string\", \"null\"]</code></td>\n<td><code>\"\"</code></td>\n<td>Prefix for staging file uploads to allow for better delineation of tmp files</td>\n</tr></tbody></table>\n<h2>Limitations</h2>\n<ul>\n<li><a href=\"https://docs.snowflake.net/manuals/sql-reference/identifiers-syntax.html\" rel=\"nofollow\">Snowflake SQL Identifiers</a>:\n<ul>\n<li>Although Snowflake supports quoted identifiers to have non-alphanumeric values, <code>target-snowflake</code> limits\nidentifiers to uppercase alphanumerics, and underscores</li>\n<li>This is done to make querability/useability in Snowflake simpler, so as to not require users to <em>have</em> to use\nsometimes cumbersome quotes to query their data</li>\n</ul>\n</li>\n<li>Requires a <a href=\"https://json-schema.org/\" rel=\"nofollow\">JSON Schema</a> for every stream.</li>\n<li>Only string, string with date-time format, integer, number, boolean,\nobject, and array types with or without null are supported. Arrays can\nhave any of the other types listed, including objects as types within\nitems.\n<ul>\n<li>Example of JSON Schema types that work\n<ul>\n<li><code>['number']</code></li>\n<li><code>['string']</code></li>\n<li><code>['string', 'null']</code></li>\n<li><code>['string', 'integer']</code></li>\n<li><code>['integer', 'number']</code></li>\n</ul>\n</li>\n<li>Exmaple of JSON Schema types that <strong>DO NOT</strong> work\n<ul>\n<li><code>['any']</code></li>\n<li><code>['null']</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>JSON Schema combinations such as <code>anyOf</code> and <code>allOf</code> are not supported.</li>\n<li>JSON Schema $ref is partially supported:\n<ul>\n<li><strong><em>NOTE:</em></strong> The following limitations are known to <strong>NOT</strong> fail gracefully</li>\n<li>Presently you cannot have any circular or recursive <code>$ref</code>s</li>\n<li><code>$ref</code>s must be present within the schema:\n<ul>\n<li>URI's do not work</li>\n<li>if the <code>$ref</code> is broken, the behaviour is considered unexpected</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Any values which are the <code>string</code> <code>\\\\N</code> will be streamed to Snowflake as the literal <code>null</code></li>\n</ul>\n<h2>Sponsorship</h2>\n<p>Target Snowflake is sponsored by Data Mill (Data Mill Services, LLC) <a href=\"https://datamill.co/\" rel=\"nofollow\">datamill.co</a>.</p>\n<p>Data Mill helps organizations utilize modern data infrastructure and data science to power analytics, products, and services.</p>\n<hr>\n<p>Copyright Data Mill Services, LLC 2018</p>\n\n          </div>"}, "last_serial": 6024258, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "0cb3e688cf13ff06efbb01b995693c25", "sha256": "4d20e6c8af6ed90772d34ba645827469f634b8a96cac482a9eaea0e67181c44b"}, "downloads": -1, "filename": "target_snowflake-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0cb3e688cf13ff06efbb01b995693c25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16163, "upload_time": "2019-08-18T18:10:46", "upload_time_iso_8601": "2019-08-18T18:10:46.780698Z", "url": "https://files.pythonhosted.org/packages/4f/bf/8a19130c17fa3f65c44b0748d7f809f169063c9306b6b4588b630a5a99a4/target_snowflake-0.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19c644b60b6055b30ed97e1eb3128f3f", "sha256": "7db25e67d9b93ad553457d185621b443835462a6ce93f61fabd90c3fc134e4b1"}, "downloads": -1, "filename": "target-snowflake-0.0.0.tar.gz", "has_sig": false, "md5_digest": "19c644b60b6055b30ed97e1eb3128f3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3483, "upload_time": "2019-08-18T18:10:49", "upload_time_iso_8601": "2019-08-18T18:10:49.120180Z", "url": "https://files.pythonhosted.org/packages/94/ca/30f4f3c12a0b94fba8d6a5f2318d08c4e3b6866aaafbf797664ba23e1413/target-snowflake-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "a6947c83fdf79d7c020ec5b9f8c6d3c2", "sha256": "54fee4e9b60cc1e622e3b249c09281c2c13efb264ea11c82d94146e972550469"}, "downloads": -1, "filename": "target_snowflake-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a6947c83fdf79d7c020ec5b9f8c6d3c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24570, "upload_time": "2019-08-27T20:23:27", "upload_time_iso_8601": "2019-08-27T20:23:27.234175Z", "url": "https://files.pythonhosted.org/packages/0c/ed/99a941a910599ab6dd6eccc4e655c3e09e8a35b76480a9f274bd0797d77a/target_snowflake-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a8056e0b53f9dd2f9a0d44a044193dc", "sha256": "fd08f404b7fac8b0bb0ce65e82e99c637b9f462e7a5ea59fba7f81e0e53f3b85"}, "downloads": -1, "filename": "target-snowflake-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0a8056e0b53f9dd2f9a0d44a044193dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14217, "upload_time": "2019-08-27T20:23:28", "upload_time_iso_8601": "2019-08-27T20:23:28.841921Z", "url": "https://files.pythonhosted.org/packages/cf/63/f6fac240a38d7e619ed5e84fbd370837fcde71be2451c843b88c1baa6912/target-snowflake-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "76c0bff2957250b81eda139ce41e51c2", "sha256": "a81c72578f239294841b64d2912407c0c067477ac99e40b4eee82dc0899581f5"}, "downloads": -1, "filename": "target_snowflake-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76c0bff2957250b81eda139ce41e51c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25075, "upload_time": "2019-10-24T14:43:00", "upload_time_iso_8601": "2019-10-24T14:43:00.767640Z", "url": "https://files.pythonhosted.org/packages/2f/75/2f72f91ed30333a3dfb87232dfd2d0b6a54e86d5d3cb03ac7ab9e8e26cb2/target_snowflake-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ded5de9978eecb5b964604d2fcb070", "sha256": "2d1db544c6878c16cc22816598637314e35b733a2d37b4e3e6022790d181092b"}, "downloads": -1, "filename": "target-snowflake-0.0.2.tar.gz", "has_sig": false, "md5_digest": "51ded5de9978eecb5b964604d2fcb070", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14690, "upload_time": "2019-10-24T14:43:02", "upload_time_iso_8601": "2019-10-24T14:43:02.518484Z", "url": "https://files.pythonhosted.org/packages/91/6b/08d12d74be2647551bb279affe3315926544d7cbfa38d879d9dfb93236a9/target-snowflake-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76c0bff2957250b81eda139ce41e51c2", "sha256": "a81c72578f239294841b64d2912407c0c067477ac99e40b4eee82dc0899581f5"}, "downloads": -1, "filename": "target_snowflake-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76c0bff2957250b81eda139ce41e51c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25075, "upload_time": "2019-10-24T14:43:00", "upload_time_iso_8601": "2019-10-24T14:43:00.767640Z", "url": "https://files.pythonhosted.org/packages/2f/75/2f72f91ed30333a3dfb87232dfd2d0b6a54e86d5d3cb03ac7ab9e8e26cb2/target_snowflake-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ded5de9978eecb5b964604d2fcb070", "sha256": "2d1db544c6878c16cc22816598637314e35b733a2d37b4e3e6022790d181092b"}, "downloads": -1, "filename": "target-snowflake-0.0.2.tar.gz", "has_sig": false, "md5_digest": "51ded5de9978eecb5b964604d2fcb070", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14690, "upload_time": "2019-10-24T14:43:02", "upload_time_iso_8601": "2019-10-24T14:43:02.518484Z", "url": "https://files.pythonhosted.org/packages/91/6b/08d12d74be2647551bb279affe3315926544d7cbfa38d879d9dfb93236a9/target-snowflake-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:55 2020"}