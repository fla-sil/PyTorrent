{"info": {"author": "Ask Solem", "author_email": "ask@celeryproject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: OS Independent", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: Jython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Object Brokering", "Topic :: System :: Distributed Computing"], "description": "=================================\n celery - Distributed Task Queue\n=================================\n\n.. image:: http://cloud.github.com/downloads/celery/celery/celery_128.png\n\n:Version: 3.1.25 (Cipater)\n:Web: http://celeryproject.org/\n:Download: http://pypi.python.org/pypi/celery/\n:Source: http://github.com/celery/celery/\n:Keywords: task queue, job queue, asynchronous, async, rabbitmq, amqp, redis,\n  python, webhooks, queue, distributed\n\n--\n\nWhat is a Task Queue?\n=====================\n\nTask queues are used as a mechanism to distribute work across threads or\nmachines.\n\nA task queue's input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.\n\nCelery communicates via messages, usually using a broker\nto mediate between clients and workers.  To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.\n\nA Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.\n\nCelery is a library written in Python, but the protocol can be implemented in\nany language.  So far there's RCelery_ for the Ruby programming language, and a\n`PHP client`, but language interoperability can also be achieved\nby using webhooks.\n\n.. _RCelery: http://leapfrogdevelopment.github.com/rcelery/\n.. _`PHP client`: https://github.com/gjedeer/celery-php\n.. _`using webhooks`:\n    http://docs.celeryproject.org/en/latest/userguide/remote-tasks.html\n\nWhat do I need?\n===============\n\nCelery version 3.0 runs on,\n\n- Python (2.5, 2.6, 2.7, 3.2, 3.3)\n- PyPy (1.8, 1.9)\n- Jython (2.5, 2.7).\n\nThis is the last version to support Python 2.5,\nand from Celery 3.1, Python 2.6 or later is required.\nThe last version to support Python 2.4 was Celery series 2.2.\n\n*Celery* is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there's also experimental support for a myriad of other solutions, including\nusing SQLite for local development.\n\n*Celery* can run on a single machine, on multiple machines, or even\nacross datacenters.\n\nGet Started\n===========\n\nIf this is the first time you're trying to use Celery, or you are\nnew to Celery 3.0 coming from previous versions then you should read our\ngetting started tutorials:\n\n- `First steps with Celery`_\n\n    Tutorial teaching you the bare minimum needed to get started with Celery.\n\n- `Next steps`_\n\n    A more complete overview, showing more features.\n\n.. _`First steps with Celery`:\n    http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\n\n.. _`Next steps`:\n    http://docs.celeryproject.org/en/latest/getting-started/next-steps.html\n\nCelery is...\n============\n\n- **Simple**\n\n    Celery is easy to use and maintain, and does *not need configuration files*.\n\n    It has an active, friendly community you can talk to for support,\n    including a `mailing-list`_ and and an IRC channel.\n\n    Here's one of the simplest applications you can make::\n\n        from celery import Celery\n\n        app = Celery('hello', broker='amqp://guest@localhost//')\n\n        @app.task\n        def hello():\n            return 'hello world'\n\n- **Highly Available**\n\n    Workers and clients will automatically retry in the event\n    of connection loss or failure, and some brokers support\n    HA in way of *Master/Master* or *Master/Slave* replication.\n\n- **Fast**\n\n    A single Celery process can process millions of tasks a minute,\n    with sub-millisecond round-trip latency (using RabbitMQ,\n    py-librabbitmq, and optimized settings).\n\n- **Flexible**\n\n    Almost every part of *Celery* can be extended or used on its own,\n    Custom pool implementations, serializers, compression schemes, logging,\n    schedulers, consumers, producers, autoscalers, broker transports and much more.\n\nIt supports...\n==============\n\n    - **Message Transports**\n\n        - RabbitMQ_, Redis_,\n        - MongoDB_ (experimental), Amazon SQS (experimental),\n        - CouchDB_ (experimental), SQLAlchemy_ (experimental),\n        - Django ORM (experimental), `IronMQ`_\n        - and more...\n\n    - **Concurrency**\n\n        - Prefork, Eventlet_, gevent_, threads/single threaded\n\n    - **Result Stores**\n\n        - AMQP, Redis\n        - memcached, MongoDB\n        - SQLAlchemy, Django ORM\n        - Apache Cassandra, IronCache\n\n    - **Serialization**\n\n        - *pickle*, *json*, *yaml*, *msgpack*.\n        - *zlib*, *bzip2* compression.\n        - Cryptographic message signing.\n\n.. _`Eventlet`: http://eventlet.net/\n.. _`gevent`: http://gevent.org/\n\n.. _RabbitMQ: http://rabbitmq.com\n.. _Redis: http://redis.io\n.. _MongoDB: http://mongodb.org\n.. _Beanstalk: http://kr.github.com/beanstalkd\n.. _CouchDB: http://couchdb.apache.org\n.. _SQLAlchemy: http://sqlalchemy.org\n.. _`IronMQ`: http://iron.io\n\nFramework Integration\n=====================\n\nCelery is easy to integrate with web frameworks, some of which even have\nintegration packages:\n\n    +--------------------+------------------------+\n    | `Django`_          | not needed             |\n    +--------------------+------------------------+\n    | `Pyramid`_         | `pyramid_celery`_      |\n    +--------------------+------------------------+\n    | `Pylons`_          | `celery-pylons`_       |\n    +--------------------+------------------------+\n    | `Flask`_           | not needed             |\n    +--------------------+------------------------+\n    | `web2py`_          | `web2py-celery`_       |\n    +--------------------+------------------------+\n    | `Tornado`_         | `tornado-celery`_      |\n    +--------------------+------------------------+\n\nThe integration packages are not strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at ``fork``.\n\n.. _`Django`: http://djangoproject.com/\n.. _`Pylons`: http://pylonsproject.org/\n.. _`Flask`: http://flask.pocoo.org/\n.. _`web2py`: http://web2py.com/\n.. _`Bottle`: http://bottlepy.org/\n.. _`Pyramid`: http://docs.pylonsproject.org/en/latest/docs/pyramid.html\n.. _`pyramid_celery`: http://pypi.python.org/pypi/pyramid_celery/\n.. _`django-celery`: http://pypi.python.org/pypi/django-celery\n.. _`celery-pylons`: http://pypi.python.org/pypi/celery-pylons\n.. _`web2py-celery`: http://code.google.com/p/web2py-celery/\n.. _`Tornado`: http://www.tornadoweb.org/\n.. _`tornado-celery`: http://github.com/mher/tornado-celery/\n\n.. _celery-documentation:\n\nDocumentation\n=============\n\nThe `latest documentation`_ with user guides, tutorials and API reference\nis hosted at Read The Docs.\n\n.. _`latest documentation`: http://docs.celeryproject.org/en/latest/\n\n.. _celery-installation:\n\nInstallation\n============\n\nYou can install Celery either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`,::\n\n    $ pip install -U Celery\n\nTo install using `easy_install`,::\n\n    $ easy_install -U Celery\n\n.. _bundles:\n\nBundles\n-------\n\nCelery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.\n\nYou can specify these in your requirements or on the ``pip`` comand-line\nby using brackets.  Multiple bundles can be specified by separating them by\ncommas.\n::\n\n    $ pip install \"celery[librabbitmq]\"\n\n    $ pip install \"celery[librabbitmq,redis,auth,msgpack]\"\n\nThe following bundles are available:\n\nSerializers\n~~~~~~~~~~~\n\n:celery[auth]:\n    for using the auth serializer.\n\n:celery[msgpack]:\n    for using the msgpack serializer.\n\n:celery[yaml]:\n    for using the yaml serializer.\n\nConcurrency\n~~~~~~~~~~~\n\n:celery[eventlet]:\n    for using the eventlet pool.\n\n:celery[gevent]:\n    for using the gevent pool.\n\n:celery[threads]:\n    for using the thread pool.\n\nTransports and Backends\n~~~~~~~~~~~~~~~~~~~~~~~\n\n:celery[librabbitmq]:\n    for using the librabbitmq C library.\n\n:celery[redis]:\n    for using Redis as a message transport or as a result backend.\n\n:celery[mongodb]:\n    for using MongoDB as a message transport (*experimental*),\n    or as a result backend (*supported*).\n\n:celery[sqs]:\n    for using Amazon SQS as a message transport (*experimental*).\n\n:celery[memcache]:\n    for using memcached as a result backend.\n\n:celery[cassandra]:\n    for using Apache Cassandra as a result backend.\n\n:celery[couchdb]:\n    for using CouchDB as a message transport (*experimental*).\n\n:celery[couchbase]:\n    for using CouchBase as a result backend.\n\n:celery[beanstalk]:\n    for using Beanstalk as a message transport (*experimental*).\n\n:celery[zookeeper]:\n    for using Zookeeper as a message transport.\n\n:celery[zeromq]:\n    for using ZeroMQ as a message transport (*experimental*).\n\n:celery[sqlalchemy]:\n    for using SQLAlchemy as a message transport (*experimental*),\n    or as a result backend (*supported*).\n\n:celery[pyro]:\n    for using the Pyro4 message transport (*experimental*).\n\n:celery[slmq]:\n    for using the SoftLayer Message Queue transport (*experimental*).\n\n.. _celery-installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Celery from\nhttp://pypi.python.org/pypi/celery/\n\nYou can install it by doing the following,::\n\n    $ tar xvfz celery-0.0.0.tar.gz\n    $ cd celery-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou are not currently using a virtualenv.\n\n.. _celery-installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nThe Celery development version also requires the development\nversions of ``kombu``, ``amqp`` and ``billiard``.\n\nYou can install the latest snapshot of these using the following\npip commands::\n\n    $ pip install https://github.com/celery/celery/zipball/master#egg=celery\n    $ pip install https://github.com/celery/billiard/zipball/master#egg=billiard\n    $ pip install https://github.com/celery/py-amqp/zipball/master#egg=amqp\n    $ pip install https://github.com/celery/kombu/zipball/master#egg=kombu\n\nWith git\n~~~~~~~~\n\nPlease the Contributing section.\n\n.. _getting-help:\n\nGetting Help\n============\n\n.. _mailing-list:\n\nMailing list\n------------\n\nFor discussions about the usage, development, and future of celery,\nplease join the `celery-users`_ mailing list.\n\n.. _`celery-users`: http://groups.google.com/group/celery-users/\n\n.. _irc-channel:\n\nIRC\n---\n\nCome chat with us on IRC. The **#celery** channel is located at the `Freenode`_\nnetwork.\n\n.. _`Freenode`: http://freenode.net\n\n.. _bug-tracker:\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at http://github.com/celery/celery/issues/\n\n.. _wiki:\n\nWiki\n====\n\nhttp://wiki.github.com/celery/celery/\n\n.. _contributing-short:\n\nContributing\n============\n\nDevelopment of `celery` happens at Github: http://github.com/celery/celery\n\nYou are highly encouraged to participate in the development\nof `celery`. If you don't like Github (for some reason) you're welcome\nto send regular patches.\n\nBe sure to also read the `Contributing to Celery`_ section in the\ndocumentation.\n\n.. _`Contributing to Celery`:\n    http://docs.celeryproject.org/en/master/contributing.html\n\n.. _license:\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/celery/celery/trend.png\n    :alt: Bitdeli badge\n    :target: https://bitdeli.com/free", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://celeryproject.org", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "alauda-celery", "package_url": "https://pypi.org/project/alauda-celery/", "platform": "any", "project_url": "https://pypi.org/project/alauda-celery/", "project_urls": {"Homepage": "http://celeryproject.org"}, "release_url": "https://pypi.org/project/alauda-celery/3.1.25rc1/", "requires_dist": null, "requires_python": "", "summary": "Distributed Task Queue", "version": "3.1.25rc1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"http://cloud.github.com/downloads/celery/celery/celery_128.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2bdea41de5249eb84f93c6693b572d98b9c0207/687474703a2f2f636c6f75642e6769746875622e636f6d2f646f776e6c6f6164732f63656c6572792f63656c6572792f63656c6572795f3132382e706e67\">\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th><td>3.1.25 (Cipater)</td>\n</tr>\n<tr><th>Web:</th><td><a href=\"http://celeryproject.org/\" rel=\"nofollow\">http://celeryproject.org/</a></td>\n</tr>\n<tr><th>Download:</th><td><a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\">http://pypi.python.org/pypi/celery/</a></td>\n</tr>\n<tr><th>Source:</th><td><a href=\"http://github.com/celery/celery/\" rel=\"nofollow\">http://github.com/celery/celery/</a></td>\n</tr>\n<tr><th>Keywords:</th><td>task queue, job queue, asynchronous, async, rabbitmq, amqp, redis,\npython, webhooks, queue, distributed</td>\n</tr>\n</tbody>\n</table>\n<p>\u2013</p>\n<div id=\"what-is-a-task-queue\">\n<h2>What is a Task Queue?</h2>\n<p>Task queues are used as a mechanism to distribute work across threads or\nmachines.</p>\n<p>A task queue\u2019s input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.</p>\n<p>Celery communicates via messages, usually using a broker\nto mediate between clients and workers.  To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.</p>\n<p>A Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.</p>\n<p>Celery is a library written in Python, but the protocol can be implemented in\nany language.  So far there\u2019s <a href=\"http://leapfrogdevelopment.github.com/rcelery/\" rel=\"nofollow\">RCelery</a> for the Ruby programming language, and a\n<cite>PHP client</cite>, but language interoperability can also be achieved\nby using webhooks.</p>\n</div>\n<div id=\"what-do-i-need\">\n<h2>What do I need?</h2>\n<p>Celery version 3.0 runs on,</p>\n<ul>\n<li>Python (2.5, 2.6, 2.7, 3.2, 3.3)</li>\n<li>PyPy (1.8, 1.9)</li>\n<li>Jython (2.5, 2.7).</li>\n</ul>\n<p>This is the last version to support Python 2.5,\nand from Celery 3.1, Python 2.6 or later is required.\nThe last version to support Python 2.4 was Celery series 2.2.</p>\n<p><em>Celery</em> is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there\u2019s also experimental support for a myriad of other solutions, including\nusing SQLite for local development.</p>\n<p><em>Celery</em> can run on a single machine, on multiple machines, or even\nacross datacenters.</p>\n</div>\n<div id=\"get-started\">\n<h2>Get Started</h2>\n<p>If this is the first time you\u2019re trying to use Celery, or you are\nnew to Celery 3.0 coming from previous versions then you should read our\ngetting started tutorials:</p>\n<ul>\n<li><p><a href=\"http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\" rel=\"nofollow\">First steps with Celery</a></p>\n<blockquote>\n<p>Tutorial teaching you the bare minimum needed to get started with Celery.</p>\n</blockquote>\n</li>\n<li><p><a href=\"http://docs.celeryproject.org/en/latest/getting-started/next-steps.html\" rel=\"nofollow\">Next steps</a></p>\n<blockquote>\n<p>A more complete overview, showing more features.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"celery-is\">\n<h2>Celery is\u2026</h2>\n<ul>\n<li><p><strong>Simple</strong></p>\n<blockquote>\n<p>Celery is easy to use and maintain, and does <em>not need configuration files</em>.</p>\n<p>It has an active, friendly community you can talk to for support,\nincluding a <a href=\"#mailing-list\" rel=\"nofollow\">mailing-list</a> and and an IRC channel.</p>\n<p>Here\u2019s one of the simplest applications you can make:</p>\n<pre>from celery import Celery\n\napp = Celery('hello', broker='amqp://guest@localhost//')\n\n@app.task\ndef hello():\n    return 'hello world'\n</pre>\n</blockquote>\n</li>\n<li><p><strong>Highly Available</strong></p>\n<blockquote>\n<p>Workers and clients will automatically retry in the event\nof connection loss or failure, and some brokers support\nHA in way of <em>Master/Master</em> or <em>Master/Slave</em> replication.</p>\n</blockquote>\n</li>\n<li><p><strong>Fast</strong></p>\n<blockquote>\n<p>A single Celery process can process millions of tasks a minute,\nwith sub-millisecond round-trip latency (using RabbitMQ,\npy-librabbitmq, and optimized settings).</p>\n</blockquote>\n</li>\n<li><p><strong>Flexible</strong></p>\n<blockquote>\n<p>Almost every part of <em>Celery</em> can be extended or used on its own,\nCustom pool implementations, serializers, compression schemes, logging,\nschedulers, consumers, producers, autoscalers, broker transports and much more.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"it-supports\">\n<h2>It supports\u2026</h2>\n<blockquote>\n<ul>\n<li><p><strong>Message Transports</strong></p>\n<blockquote>\n<ul>\n<li><a href=\"http://rabbitmq.com\" rel=\"nofollow\">RabbitMQ</a>, <a href=\"http://redis.io\" rel=\"nofollow\">Redis</a>,</li>\n<li><a href=\"http://mongodb.org\" rel=\"nofollow\">MongoDB</a> (experimental), Amazon SQS (experimental),</li>\n<li><a href=\"http://couchdb.apache.org\" rel=\"nofollow\">CouchDB</a> (experimental), <a href=\"http://sqlalchemy.org\" rel=\"nofollow\">SQLAlchemy</a> (experimental),</li>\n<li>Django ORM (experimental), <a href=\"http://iron.io\" rel=\"nofollow\">IronMQ</a></li>\n<li>and more\u2026</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Concurrency</strong></p>\n<blockquote>\n<ul>\n<li>Prefork, <a href=\"http://eventlet.net/\" rel=\"nofollow\">Eventlet</a>, <a href=\"http://gevent.org/\" rel=\"nofollow\">gevent</a>, threads/single threaded</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Result Stores</strong></p>\n<blockquote>\n<ul>\n<li>AMQP, Redis</li>\n<li>memcached, MongoDB</li>\n<li>SQLAlchemy, Django ORM</li>\n<li>Apache Cassandra, IronCache</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>Serialization</strong></p>\n<blockquote>\n<ul>\n<li><em>pickle</em>, <em>json</em>, <em>yaml</em>, <em>msgpack</em>.</li>\n<li><em>zlib</em>, <em>bzip2</em> compression.</li>\n<li>Cryptographic message signing.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"framework-integration\">\n<h2>Framework Integration</h2>\n<p>Celery is easy to integrate with web frameworks, some of which even have\nintegration packages:</p>\n<blockquote>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><a href=\"http://djangoproject.com/\" rel=\"nofollow\">Django</a></td>\n<td>not needed</td>\n</tr>\n<tr><td><a href=\"http://docs.pylonsproject.org/en/latest/docs/pyramid.html\" rel=\"nofollow\">Pyramid</a></td>\n<td><a href=\"http://pypi.python.org/pypi/pyramid_celery/\" rel=\"nofollow\">pyramid_celery</a></td>\n</tr>\n<tr><td><a href=\"http://pylonsproject.org/\" rel=\"nofollow\">Pylons</a></td>\n<td><a href=\"http://pypi.python.org/pypi/celery-pylons\" rel=\"nofollow\">celery-pylons</a></td>\n</tr>\n<tr><td><a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a></td>\n<td>not needed</td>\n</tr>\n<tr><td><a href=\"http://web2py.com/\" rel=\"nofollow\">web2py</a></td>\n<td><a href=\"http://code.google.com/p/web2py-celery/\" rel=\"nofollow\">web2py-celery</a></td>\n</tr>\n<tr><td><a href=\"http://www.tornadoweb.org/\" rel=\"nofollow\">Tornado</a></td>\n<td><a href=\"http://github.com/mher/tornado-celery/\" rel=\"nofollow\">tornado-celery</a></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>The integration packages are not strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at <tt>fork</tt>.</p>\n</div>\n<div id=\"documentation\">\n<span id=\"celery-documentation\"></span><h2>Documentation</h2>\n<p>The <a href=\"http://docs.celeryproject.org/en/latest/\" rel=\"nofollow\">latest documentation</a> with user guides, tutorials and API reference\nis hosted at Read The Docs.</p>\n</div>\n<div id=\"installation\">\n<span id=\"celery-installation\"></span><h2>Installation</h2>\n<p>You can install Celery either via the Python Package Index (PyPI)\nor from source.</p>\n<p>To install using <cite>pip</cite>,:</p>\n<pre>$ pip install -U Celery\n</pre>\n<p>To install using <cite>easy_install</cite>,:</p>\n<pre>$ easy_install -U Celery\n</pre>\n<div id=\"id1\">\n<span id=\"bundles\"></span><h3>Bundles</h3>\n<p>Celery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.</p>\n<p>You can specify these in your requirements or on the <tt>pip</tt> comand-line\nby using brackets.  Multiple bundles can be specified by separating them by\ncommas.</p>\n<pre>$ pip install \"celery[librabbitmq]\"\n\n$ pip install \"celery[librabbitmq,redis,auth,msgpack]\"\n</pre>\n<p>The following bundles are available:</p>\n<div id=\"serializers\">\n<h4>Serializers</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>celery[auth]:</th><td>for using the auth serializer.</td>\n</tr>\n<tr><th>celery[msgpack]:</th></tr>\n<tr><td>\u00a0</td><td>for using the msgpack serializer.</td>\n</tr>\n<tr><th>celery[yaml]:</th><td>for using the yaml serializer.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"concurrency\">\n<h4>Concurrency</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>celery[eventlet]:</th></tr>\n<tr><td>\u00a0</td><td>for using the eventlet pool.</td>\n</tr>\n<tr><th>celery[gevent]:</th><td>for using the gevent pool.</td>\n</tr>\n<tr><th>celery[threads]:</th></tr>\n<tr><td>\u00a0</td><td>for using the thread pool.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"transports-and-backends\">\n<h4>Transports and Backends</h4>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>celery[librabbitmq]:</th></tr>\n<tr><td>\u00a0</td><td>for using the librabbitmq C library.</td>\n</tr>\n<tr><th>celery[redis]:</th><td>for using Redis as a message transport or as a result backend.</td>\n</tr>\n<tr><th>celery[mongodb]:</th></tr>\n<tr><td>\u00a0</td><td>for using MongoDB as a message transport (<em>experimental</em>),\nor as a result backend (<em>supported</em>).</td>\n</tr>\n<tr><th>celery[sqs]:</th><td>for using Amazon SQS as a message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th>celery[memcache]:</th></tr>\n<tr><td>\u00a0</td><td>for using memcached as a result backend.</td>\n</tr>\n<tr><th>celery[cassandra]:</th></tr>\n<tr><td>\u00a0</td><td>for using Apache Cassandra as a result backend.</td>\n</tr>\n<tr><th>celery[couchdb]:</th></tr>\n<tr><td>\u00a0</td><td>for using CouchDB as a message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th>celery[couchbase]:</th></tr>\n<tr><td>\u00a0</td><td>for using CouchBase as a result backend.</td>\n</tr>\n<tr><th>celery[beanstalk]:</th></tr>\n<tr><td>\u00a0</td><td>for using Beanstalk as a message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th>celery[zookeeper]:</th></tr>\n<tr><td>\u00a0</td><td>for using Zookeeper as a message transport.</td>\n</tr>\n<tr><th>celery[zeromq]:</th><td>for using ZeroMQ as a message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th>celery[sqlalchemy]:</th></tr>\n<tr><td>\u00a0</td><td>for using SQLAlchemy as a message transport (<em>experimental</em>),\nor as a result backend (<em>supported</em>).</td>\n</tr>\n<tr><th>celery[pyro]:</th><td>for using the Pyro4 message transport (<em>experimental</em>).</td>\n</tr>\n<tr><th>celery[slmq]:</th><td>for using the SoftLayer Message Queue transport (<em>experimental</em>).</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"downloading-and-installing-from-source\">\n<span id=\"celery-installing-from-source\"></span><h3>Downloading and installing from source</h3>\n<p>Download the latest version of Celery from\n<a href=\"http://pypi.python.org/pypi/celery/\" rel=\"nofollow\">http://pypi.python.org/pypi/celery/</a></p>\n<p>You can install it by doing the following,:</p>\n<pre>$ tar xvfz celery-0.0.0.tar.gz\n$ cd celery-0.0.0\n$ python setup.py build\n# python setup.py install\n</pre>\n<p>The last command must be executed as a privileged user if\nyou are not currently using a virtualenv.</p>\n</div>\n<div id=\"using-the-development-version\">\n<span id=\"celery-installing-from-git\"></span><h3>Using the development version</h3>\n<div id=\"with-pip\">\n<h4>With pip</h4>\n<p>The Celery development version also requires the development\nversions of <tt>kombu</tt>, <tt>amqp</tt> and <tt>billiard</tt>.</p>\n<p>You can install the latest snapshot of these using the following\npip commands:</p>\n<pre>$ pip install https://github.com/celery/celery/zipball/master#egg=celery\n$ pip install https://github.com/celery/billiard/zipball/master#egg=billiard\n$ pip install https://github.com/celery/py-amqp/zipball/master#egg=amqp\n$ pip install https://github.com/celery/kombu/zipball/master#egg=kombu\n</pre>\n</div>\n<div id=\"with-git\">\n<h4>With git</h4>\n<p>Please the Contributing section.</p>\n</div>\n</div>\n</div>\n<div id=\"id2\">\n<span id=\"getting-help\"></span><h2>Getting Help</h2>\n<div id=\"id3\">\n<span id=\"mailing-list\"></span><h3>Mailing list</h3>\n<p>For discussions about the usage, development, and future of celery,\nplease join the <a href=\"http://groups.google.com/group/celery-users/\" rel=\"nofollow\">celery-users</a> mailing list.</p>\n</div>\n<div id=\"irc\">\n<span id=\"irc-channel\"></span><h3>IRC</h3>\n<p>Come chat with us on IRC. The <strong>#celery</strong> channel is located at the <a href=\"http://freenode.net\" rel=\"nofollow\">Freenode</a>\nnetwork.</p>\n</div>\n</div>\n<div id=\"id4\">\n<span id=\"bug-tracker\"></span><h2>Bug tracker</h2>\n<p>If you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at <a href=\"http://github.com/celery/celery/issues/\" rel=\"nofollow\">http://github.com/celery/celery/issues/</a></p>\n</div>\n<div id=\"id5\">\n<span id=\"wiki\"></span><h2>Wiki</h2>\n<p><a href=\"http://wiki.github.com/celery/celery/\" rel=\"nofollow\">http://wiki.github.com/celery/celery/</a></p>\n</div>\n<div id=\"contributing\">\n<span id=\"contributing-short\"></span><h2>Contributing</h2>\n<p>Development of <cite>celery</cite> happens at Github: <a href=\"http://github.com/celery/celery\" rel=\"nofollow\">http://github.com/celery/celery</a></p>\n<p>You are highly encouraged to participate in the development\nof <cite>celery</cite>. If you don\u2019t like Github (for some reason) you\u2019re welcome\nto send regular patches.</p>\n<p>Be sure to also read the <a href=\"http://docs.celeryproject.org/en/master/contributing.html\" rel=\"nofollow\">Contributing to Celery</a> section in the\ndocumentation.</p>\n</div>\n<div id=\"id6\">\n<span id=\"license\"></span><h2>License</h2>\n<p>This software is licensed under the <cite>New BSD License</cite>. See the <tt>LICENSE</tt>\nfile in the top distribution directory for the full license text.</p>\n<a href=\"https://bitdeli.com/free\" rel=\"nofollow\"><img alt=\"Bitdeli badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dadab9d17f798738dd2d4bf2128d34486fab8ecf/68747470733a2f2f64327765637a68766c38323376302e636c6f756466726f6e742e6e65742f63656c6572792f63656c6572792f7472656e642e706e67\"></a>\n</div>\n\n          </div>"}, "last_serial": 2971740, "releases": {"3.1.25rc1": [{"comment_text": "", "digests": {"md5": "c4714bc29ab9ed19276cdbe7c6a55561", "sha256": "19616ee1e5c7c4797303ac6f49aec234a4660a2b644b4ba1d5c050cfd0c91a5c"}, "downloads": -1, "filename": "alauda-celery-3.1.25rc1.tar.gz", "has_sig": false, "md5_digest": "c4714bc29ab9ed19276cdbe7c6a55561", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1313860, "upload_time": "2017-06-23T02:51:56", "upload_time_iso_8601": "2017-06-23T02:51:56.593537Z", "url": "https://files.pythonhosted.org/packages/a9/9b/18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7/alauda-celery-3.1.25rc1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4714bc29ab9ed19276cdbe7c6a55561", "sha256": "19616ee1e5c7c4797303ac6f49aec234a4660a2b644b4ba1d5c050cfd0c91a5c"}, "downloads": -1, "filename": "alauda-celery-3.1.25rc1.tar.gz", "has_sig": false, "md5_digest": "c4714bc29ab9ed19276cdbe7c6a55561", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1313860, "upload_time": "2017-06-23T02:51:56", "upload_time_iso_8601": "2017-06-23T02:51:56.593537Z", "url": "https://files.pythonhosted.org/packages/a9/9b/18d51563bab832958a7efff72e8b0b0fbdcdd0540079ba1b4f60f2e76ff7/alauda-celery-3.1.25rc1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:05 2020"}