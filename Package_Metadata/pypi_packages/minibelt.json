{"info": {"author": "Sam et Max", "author_email": "lesametlemax@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Information Technology", "License :: OSI Approved :: zlib/libpng License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.6"], "description": "***************************************************************************************\nOne-file utility module filled with helper functions for day to day Python programming\n***************************************************************************************\n\nThis is a subset of batbelt, with only the most used features, packed in a tiny file, and Python 2.7/3.3 compatible.\n\nSo, while you can `pip install minibelt`, you may just drop it in your project and forget about it.\n\nIt's under zlib licence.\n\n\nGet this value from an iterable/indexable or a default\n=======================================================\n\nget(indexable, \\*indices|keys,  [default])\n------------------------------------------\n\nYou had a get() method on dict, but not on lists or tuple. Now you do ::\n\n    >>> lst = range(10)\n    >>> get(lst, 1, default='whatever_you_want')\n    1\n    >>> get(lst, 100, default='whatever_you_want')\n    'whatever_you_want'\n\nPlus, you can chain look ups :\n\nThis::\n\n    try:\n        res = data['key'][0]['other key'][1]\n    except (KeyError, IndexError):\n        res = \"value\"\n\n\nBecomes::\n\n    get(data, 'key', 0, 'other key', 1, default=\"value\")\n\n\nattrs(object, \\*attributes, [default])\n--------------------------------------\n\nAnd for attributes... ::\n\n    devise = attr(car, 'insurance', 'expiration_date', 'timezone')\n\n\n\niget(iterable, index, [default])\n--------------------------------------\n\nYou can also get values at indices on any iterable, including generators :\n\n        >>> iget(xrange(10), 0)\n        0\n        >>> iget(xrange(10), 5)\n        5\n        >>> iget(xrange(10), 10000, default='wololo')\n        u'wololo'\n\n\n\nIteration tools missing in itertools\n===================================================================================\n\n\nchunks(iterable, size) and window(iterable, size)\n----------------------------------------------------\n\nIteration by chunk or with a sliding window::\n\n    >>> l = range(10)\n    >>> for chunk in chunks(l, 3):\n    ...     print list(chunk)\n    ...\n    [0, 1, 2]\n    [3, 4, 5]\n    [6, 7, 8]\n    [9]\n    >>> for slide in window(l, 3):\n    ...     print list(slide)\n    ...\n    [0, 1, 2]\n    [1, 2, 3]\n    [2, 3, 4]\n    [3, 4, 5]\n    [4, 5, 6]\n    [5, 6, 7]\n    [6, 7, 8]\n    [7, 8, 9]\n\n\nflatten(deeply_nested_iterable)\n--------------------------------\n\nReturns a generator that lazily yield the items and\ndeals with up to hundred of levels of nesting (~800 on my machine,\nand you can control it with sys.setrecursionlimit) ::\n\n\n    a = []\n    for i in xrange(10):\n        a = [a, i]\n    print(a)\n\n    [[[[[[[[[[[], 0], 1], 2], 3], 4], 5], 6], 7], 8], 9]\n\n    print(list(flatten(a)))\n\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nIt works with most iterables, even of inifinite or unknown size.\n\n\nSorted Set\n===================================================================================\n\nSlow but useful data structure::\n\n    >>> for x in sset((3, 2, 2, 2, 1, 2)):\n    ...     print x\n    ...\n    3\n    2\n    1\n\n\nDictionaries one liners\n===================================================================================\n\n\ndmerge(dict, dict, [merge_function])\n--------------------------------------\n\nI wish '+'' was overloaded for dicts::\n\n    >>> dmerge({\"a\": 1, \"b\": 2}, {\"b\": 2, \"c\": 3})\n    {'a': 1, 'c': 3, 'b': 2}\n\n\nSometimes you do not want to simply overwrite the values inside the original dict, but merge them in custom fashion::\n\n    >>> def my_merge(v1, v2):\n    ...     if isinstance(v1, dict) and isinstance(v2, dict):\n    ...         return dmerge(v1, v2)\n    ...     return v2\n    >>> dmerge({\"a\": 1, \"b\": {'ok': 5}}, {\"b\": {'ko': 5 }, \"c\": 3}, my_merge)\n    {'a': 1, 'c': 3, 'b': {'ko': 5, 'ok': 5}}\n\n\nsubdict(dict, [include], [exclude])\n-----------------------------------\n\nAnd for lazy people like me ::\n\n    >>> subdict({'a': 1, 'b': 2, 'c': 3}, include=('a', 'b'))\n    {'a': 1, 'b': 2}\n    >>> subdict({'a': 1, 'b': 2, 'c': 3}, exclude=('c',))\n    {'a': 1, 'b': 2}\n\n\nWhich is quite nice when you want a dict of some local variables (like in web framework functions returning responses such as Django, Flask or Bottle) ::\n\n\n    >>> def test():\n    ...     a, b, c, d, e = range(5)\n    ...     return subdict(locals(), exclude=('d',))\n    ...\n    >>> test()\n    {'a': 0, 'c': 2, 'b': 1, 'e': 4}\n\nThis works with any indexable, not just dicts.\n\nString tools\n===================================================================================\n\nnormalize(string)\n----------------------\n\n    >>> normalize(u\"H\u00e9lo Whorde\")\n    'Helo Whorde'\n\n\nslugify(string)\n------------------\n\n    >>> slugify(u\"H\u00e9lo Whorde\")\n    helo-whorde\n\nYou get better slugification if you install the `unidecode` lib, but it's optional. You can specify `separator` if you don't like `-` or call directly `normalize()` (the underlying function) if you wish more control.\n\njson_dumps(struct) and json_loads(string)\n-----------------------------------------\n\nJSON helpers that handle date/time ::\n\n    >>> import datetime\n    >>> json_dumps({'test': datetime.datetime(2000, 1, 1, 1, 1, 1)})\n    '{\"test\": \"2000-01-01 01:01:01.000000\"}'\n    >>> json_dumps({'test': datetime.date(2000, 1, 1)})\n    '{\"test\": \"2000-01-01\"}'\n    >>> json_dumps({'test': datetime.time(1, 1, 1)})\n    '{\"test\": \"01:01:01.000000\"}'\n    >>> json_dumps({'test': datetime.timedelta(1, 1)})\n    '{\"test\": \"timedelta(seconds=\\'86401.0\\')\"}'\n    >>> json_dumps({u'test': datetime.timedelta(1, 1), u'a': [1, 2]})\n    '{\"test\": \"timedelta(seconds=\\'86401.0\\')\", \"a\": [1, 2]}'\n\n    >>> json_loads('{\"test\": \"2000-01-01 01:01:01.000000\"}')\n    {u'test': datetime.datetime(2000, 1, 1, 1, 1, 1)}\n    >>> json_loads('{\"test\": \"2000-01-01\"}')\n    {u'test': datetime.date(2000, 1, 1)}\n    >>> json_loads('{\"test\": \"01:01:01.000000\"}')\n    {u'test': datetime.time(1, 1, 1)}\n    >>> json_loads('{\"test\": \"timedelta(seconds=\\'86401.0\\')\"}')\n    {u'test': datetime.timedelta(1, 1)}\n    >>> json_loads('{\"test\": \"timedelta(seconds=\\'86401.0\\')\", \"a\": [1, 2]}')\n    {u'test': datetime.timedelta(1, 1), u'a': [1, 2]}\n\nwrite(path, \\*args, encoding='utf8', mode='w', errors='replace')\n----------------------------------------------------------------\n\nWrite anything in one row to a file ::\n\n    >>> s = '/tmp/test'\n    >>> write(s, 'test', '\u00e9', 1, ['fdjskl'])\n    >>> print open(s).read()\n    test\n    \u00e9\n    1\n    ['fdjskl']\n\nIt will attempt decoding / encoding and casting automatically each value\nto a string.\n\nThis is an utility function : its slow and doesn't consider edge cases,\nbut allow to do just what you want most of the time in one line.\n\nYou can optionally pass :\n\n- mode : among 'a', 'w', which default to 'w'. Binary mode is forced.\n- encoding : which default to utf8 and will condition decoding AND encoding\n- errors : what to do when en encoding error occurs : 'replace' by default,\n           which replace faulty caracters with '?'\n\nYou can pass string or unicode as \\*args, but if you pass strings,\nmake sure you pass them with the same encoding you wish to write to\nthe file.\n\n\nImport this\n===================================================================================\n\n\n`__import__` is weird. Let's abstract that ::\n\n    YourClass = import_from_path('foo.bar.YourClass')\n    obj = YourClass()\n\n\n\nAdd a any directory to the PYTHON PATH\n===========================================\n\nAccepts shell variables and relative paths :\n\n    add_to_pythonpath(\"~/..\")\n\nYou can (and probably wants) specify a starting point if you pass a relative path. The default starting point is the result is `os.getcwd()` while you probably wants the directory containing you script. To to so, pass `__file__`:\n\n    add_to_pythonpath(\"../..\", starting_point=__file__)\n\n`starting_point` can be a file path (basename will be stripped) or a directory name. It will be from there that the relative path will be calculated.\n\nYou can also choose where in the `sys.path` list your path will be added by passing `insertion_index`, which default to after the last existing item.\n\n\n\nTo timestamp\n=============\n\ndatetime.fromtimestamp exists but not the other away around, and it's not likely to change anytime soon (see: http://bugs.python.org/issue2736). In the meantime::\n\n    >>> from datetime import datetime\n    >>> to_timestamp(datetime(2000, 1, 1, 2, 1, 1))\n    946692061\n    >>> datetime.fromtimestamp(946688461) # PYTHON, Y U NO HAZ TO_TIMESTAMP ?\n    datetime.datetime(2000, 1, 1, 2, 1, 1)\n\n\nRemoving duplicates\n====================\n\nskip_duplicates returns a generator that will yield all objects from an iterable, skipping\nduplicates and preserving order ::\n\n    >>> list(skip_duplicates([1, 2, 3, 4, 4, 2, 1, 3 , 4]))\n    [1, 2, 3, 4]\n\nDuplicates are identified using the `key` function to calculate a\nunique fingerprint. This does not use natural equality, but the\nresult use a set() to remove duplicates, so defining __eq__\non your objects would have no effect.\n\nBy default the fingerprint is the object itself,\nwhich ensure the functions works as-is with iterable of primitives\nsuch as int, str or tuple.\n\nThe return value of `key` MUST be hashable, which means for\nnon hashable objects such as dict, set or list, you need to specify\na function that returns a hashable fingerprint ::\n\n\n    >>> list(skip_duplicates(([], [], (), [1, 2], (1, 2)), lambda x: tuple(x)))\n    [[], [1, 2]]\n    >>> list(skip_duplicates(([], [], (), [1, 2], (1, 2)), lambda x: (type(x), tuple(x))))\n    [[], (), [1, 2], (1, 2)]\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sametmax/minibelt", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "minibelt", "package_url": "https://pypi.org/project/minibelt/", "platform": "", "project_url": "https://pypi.org/project/minibelt/", "project_urls": {"Homepage": "https://github.com/sametmax/minibelt"}, "release_url": "https://pypi.org/project/minibelt/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "One-file utility module filled with helper functions for day to day Python programming", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a subset of batbelt, with only the most used features, packed in a tiny file, and Python 2.7/3.3 compatible.</p>\n<p>So, while you can <cite>pip install minibelt</cite>, you may just drop it in your project and forget about it.</p>\n<p>It\u2019s under zlib licence.</p>\n<div id=\"get-this-value-from-an-iterable-indexable-or-a-default\">\n<h2>Get this value from an iterable/indexable or a default</h2>\n<div id=\"get-indexable-indices-keys-default\">\n<h3>get(indexable, *indices|keys,  [default])</h3>\n<p>You had a get() method on dict, but not on lists or tuple. Now you do</p>\n<pre>&gt;&gt;&gt; lst = range(10)\n&gt;&gt;&gt; get(lst, 1, default='whatever_you_want')\n1\n&gt;&gt;&gt; get(lst, 100, default='whatever_you_want')\n'whatever_you_want'\n</pre>\n<p>Plus, you can chain look ups :</p>\n<p>This:</p>\n<pre>try:\n    res = data['key'][0]['other key'][1]\nexcept (KeyError, IndexError):\n    res = \"value\"\n</pre>\n<p>Becomes:</p>\n<pre>get(data, 'key', 0, 'other key', 1, default=\"value\")\n</pre>\n</div>\n<div id=\"attrs-object-attributes-default\">\n<h3>attrs(object, *attributes, [default])</h3>\n<p>And for attributes\u2026</p>\n<pre>devise = attr(car, 'insurance', 'expiration_date', 'timezone')\n</pre>\n</div>\n<div id=\"iget-iterable-index-default\">\n<h3>iget(iterable, index, [default])</h3>\n<p>You can also get values at indices on any iterable, including generators :</p>\n<blockquote>\n<pre>&gt;&gt;&gt; iget(xrange(10), 0)\n0\n&gt;&gt;&gt; iget(xrange(10), 5)\n5\n&gt;&gt;&gt; iget(xrange(10), 10000, default='wololo')\nu'wololo'\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"iteration-tools-missing-in-itertools\">\n<h2>Iteration tools missing in itertools</h2>\n<div id=\"chunks-iterable-size-and-window-iterable-size\">\n<h3>chunks(iterable, size) and window(iterable, size)</h3>\n<p>Iteration by chunk or with a sliding window:</p>\n<pre>&gt;&gt;&gt; l = range(10)\n&gt;&gt;&gt; for chunk in chunks(l, 3):\n...     print list(chunk)\n...\n[0, 1, 2]\n[3, 4, 5]\n[6, 7, 8]\n[9]\n&gt;&gt;&gt; for slide in window(l, 3):\n...     print list(slide)\n...\n[0, 1, 2]\n[1, 2, 3]\n[2, 3, 4]\n[3, 4, 5]\n[4, 5, 6]\n[5, 6, 7]\n[6, 7, 8]\n[7, 8, 9]\n</pre>\n</div>\n<div id=\"flatten-deeply-nested-iterable\">\n<h3>flatten(deeply_nested_iterable)</h3>\n<p>Returns a generator that lazily yield the items and\ndeals with up to hundred of levels of nesting (~800 on my machine,\nand you can control it with sys.setrecursionlimit)</p>\n<pre>a = []\nfor i in xrange(10):\n    a = [a, i]\nprint(a)\n\n[[[[[[[[[[[], 0], 1], 2], 3], 4], 5], 6], 7], 8], 9]\n\nprint(list(flatten(a)))\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</pre>\n<p>It works with most iterables, even of inifinite or unknown size.</p>\n</div>\n</div>\n<div id=\"sorted-set\">\n<h2>Sorted Set</h2>\n<p>Slow but useful data structure:</p>\n<pre>&gt;&gt;&gt; for x in sset((3, 2, 2, 2, 1, 2)):\n...     print x\n...\n3\n2\n1\n</pre>\n</div>\n<div id=\"dictionaries-one-liners\">\n<h2>Dictionaries one liners</h2>\n<div id=\"dmerge-dict-dict-merge-function\">\n<h3>dmerge(dict, dict, [merge_function])</h3>\n<p>I wish \u2018+\u2019\u2019 was overloaded for dicts:</p>\n<pre>&gt;&gt;&gt; dmerge({\"a\": 1, \"b\": 2}, {\"b\": 2, \"c\": 3})\n{'a': 1, 'c': 3, 'b': 2}\n</pre>\n<p>Sometimes you do not want to simply overwrite the values inside the original dict, but merge them in custom fashion:</p>\n<pre>&gt;&gt;&gt; def my_merge(v1, v2):\n...     if isinstance(v1, dict) and isinstance(v2, dict):\n...         return dmerge(v1, v2)\n...     return v2\n&gt;&gt;&gt; dmerge({\"a\": 1, \"b\": {'ok': 5}}, {\"b\": {'ko': 5 }, \"c\": 3}, my_merge)\n{'a': 1, 'c': 3, 'b': {'ko': 5, 'ok': 5}}\n</pre>\n</div>\n<div id=\"subdict-dict-include-exclude\">\n<h3>subdict(dict, [include], [exclude])</h3>\n<p>And for lazy people like me</p>\n<pre>&gt;&gt;&gt; subdict({'a': 1, 'b': 2, 'c': 3}, include=('a', 'b'))\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; subdict({'a': 1, 'b': 2, 'c': 3}, exclude=('c',))\n{'a': 1, 'b': 2}\n</pre>\n<p>Which is quite nice when you want a dict of some local variables (like in web framework functions returning responses such as Django, Flask or Bottle)</p>\n<pre>&gt;&gt;&gt; def test():\n...     a, b, c, d, e = range(5)\n...     return subdict(locals(), exclude=('d',))\n...\n&gt;&gt;&gt; test()\n{'a': 0, 'c': 2, 'b': 1, 'e': 4}\n</pre>\n<p>This works with any indexable, not just dicts.</p>\n</div>\n</div>\n<div id=\"string-tools\">\n<h2>String tools</h2>\n<div id=\"normalize-string\">\n<h3>normalize(string)</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; normalize(u\"H\u00e9lo Whorde\")\n'Helo Whorde'\n</pre>\n</blockquote>\n</div>\n<div id=\"slugify-string\">\n<h3>slugify(string)</h3>\n<blockquote>\n<pre>&gt;&gt;&gt; slugify(u\"H\u00e9lo Whorde\")\nhelo-whorde\n</pre>\n</blockquote>\n<p>You get better slugification if you install the <cite>unidecode</cite> lib, but it\u2019s optional. You can specify <cite>separator</cite> if you don\u2019t like <cite>-</cite> or call directly <cite>normalize()</cite> (the underlying function) if you wish more control.</p>\n</div>\n<div id=\"json-dumps-struct-and-json-loads-string\">\n<h3>json_dumps(struct) and json_loads(string)</h3>\n<p>JSON helpers that handle date/time</p>\n<pre>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; json_dumps({'test': datetime.datetime(2000, 1, 1, 1, 1, 1)})\n'{\"test\": \"2000-01-01 01:01:01.000000\"}'\n&gt;&gt;&gt; json_dumps({'test': datetime.date(2000, 1, 1)})\n'{\"test\": \"2000-01-01\"}'\n&gt;&gt;&gt; json_dumps({'test': datetime.time(1, 1, 1)})\n'{\"test\": \"01:01:01.000000\"}'\n&gt;&gt;&gt; json_dumps({'test': datetime.timedelta(1, 1)})\n'{\"test\": \"timedelta(seconds=\\'86401.0\\')\"}'\n&gt;&gt;&gt; json_dumps({u'test': datetime.timedelta(1, 1), u'a': [1, 2]})\n'{\"test\": \"timedelta(seconds=\\'86401.0\\')\", \"a\": [1, 2]}'\n\n&gt;&gt;&gt; json_loads('{\"test\": \"2000-01-01 01:01:01.000000\"}')\n{u'test': datetime.datetime(2000, 1, 1, 1, 1, 1)}\n&gt;&gt;&gt; json_loads('{\"test\": \"2000-01-01\"}')\n{u'test': datetime.date(2000, 1, 1)}\n&gt;&gt;&gt; json_loads('{\"test\": \"01:01:01.000000\"}')\n{u'test': datetime.time(1, 1, 1)}\n&gt;&gt;&gt; json_loads('{\"test\": \"timedelta(seconds=\\'86401.0\\')\"}')\n{u'test': datetime.timedelta(1, 1)}\n&gt;&gt;&gt; json_loads('{\"test\": \"timedelta(seconds=\\'86401.0\\')\", \"a\": [1, 2]}')\n{u'test': datetime.timedelta(1, 1), u'a': [1, 2]}\n</pre>\n</div>\n<div id=\"write-path-args-encoding-utf8-mode-w-errors-replace\">\n<h3>write(path, *args, encoding=\u2019utf8\u2019, mode=\u2019w\u2019, errors=\u2019replace\u2019)</h3>\n<p>Write anything in one row to a file</p>\n<pre>&gt;&gt;&gt; s = '/tmp/test'\n&gt;&gt;&gt; write(s, 'test', '\u00e9', 1, ['fdjskl'])\n&gt;&gt;&gt; print open(s).read()\ntest\n\u00e9\n1\n['fdjskl']\n</pre>\n<p>It will attempt decoding / encoding and casting automatically each value\nto a string.</p>\n<p>This is an utility function : its slow and doesn\u2019t consider edge cases,\nbut allow to do just what you want most of the time in one line.</p>\n<p>You can optionally pass :</p>\n<ul>\n<li>mode : among \u2018a\u2019, \u2018w\u2019, which default to \u2018w\u2019. Binary mode is forced.</li>\n<li>encoding : which default to utf8 and will condition decoding AND encoding</li>\n<li><dl>\n<dt>errors <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">what to do when en encoding error occurs</span> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">\u2018replace\u2019 by default,</span></dt>\n<dd>which replace faulty caracters with \u2018?\u2019</dd>\n</dl>\n</li>\n</ul>\n<p>You can pass string or unicode as *args, but if you pass strings,\nmake sure you pass them with the same encoding you wish to write to\nthe file.</p>\n</div>\n</div>\n<div id=\"import-this\">\n<h2>Import this</h2>\n<p><cite>__import__</cite> is weird. Let\u2019s abstract that</p>\n<pre>YourClass = import_from_path('foo.bar.YourClass')\nobj = YourClass()\n</pre>\n</div>\n<div id=\"add-a-any-directory-to-the-python-path\">\n<h2>Add a any directory to the PYTHON PATH</h2>\n<p>Accepts shell variables and relative paths :</p>\n<blockquote>\nadd_to_pythonpath(\u201c~/..\u201d)</blockquote>\n<p>You can (and probably wants) specify a starting point if you pass a relative path. The default starting point is the result is <cite>os.getcwd()</cite> while you probably wants the directory containing you script. To to so, pass <cite>__file__</cite>:</p>\n<blockquote>\nadd_to_pythonpath(\u201c../..\u201d, starting_point=__file__)</blockquote>\n<p><cite>starting_point</cite> can be a file path (basename will be stripped) or a directory name. It will be from there that the relative path will be calculated.</p>\n<p>You can also choose where in the <cite>sys.path</cite> list your path will be added by passing <cite>insertion_index</cite>, which default to after the last existing item.</p>\n</div>\n<div id=\"to-timestamp\">\n<h2>To timestamp</h2>\n<p>datetime.fromtimestamp exists but not the other away around, and it\u2019s not likely to change anytime soon (see: <a href=\"http://bugs.python.org/issue2736\" rel=\"nofollow\">http://bugs.python.org/issue2736</a>). In the meantime:</p>\n<pre>&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; to_timestamp(datetime(2000, 1, 1, 2, 1, 1))\n946692061\n&gt;&gt;&gt; datetime.fromtimestamp(946688461) # PYTHON, Y U NO HAZ TO_TIMESTAMP ?\ndatetime.datetime(2000, 1, 1, 2, 1, 1)\n</pre>\n</div>\n<div id=\"removing-duplicates\">\n<h2>Removing duplicates</h2>\n<p>skip_duplicates returns a generator that will yield all objects from an iterable, skipping\nduplicates and preserving order</p>\n<pre>&gt;&gt;&gt; list(skip_duplicates([1, 2, 3, 4, 4, 2, 1, 3 , 4]))\n[1, 2, 3, 4]\n</pre>\n<p>Duplicates are identified using the <cite>key</cite> function to calculate a\nunique fingerprint. This does not use natural equality, but the\nresult use a set() to remove duplicates, so defining __eq__\non your objects would have no effect.</p>\n<p>By default the fingerprint is the object itself,\nwhich ensure the functions works as-is with iterable of primitives\nsuch as int, str or tuple.</p>\n<p>The return value of <cite>key</cite> MUST be hashable, which means for\nnon hashable objects such as dict, set or list, you need to specify\na function that returns a hashable fingerprint</p>\n<pre>&gt;&gt;&gt; list(skip_duplicates(([], [], (), [1, 2], (1, 2)), lambda x: tuple(x)))\n[[], [1, 2]]\n&gt;&gt;&gt; list(skip_duplicates(([], [], (), [1, 2], (1, 2)), lambda x: (type(x), tuple(x))))\n[[], (), [1, 2], (1, 2)]\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6514238, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "517e158975e30c938ecf3d989d64ffb0", "sha256": "a47f7d6d0f41cd7e4776cab16bfd7508a7f6a1c4a955acd678adc91f88ba354c"}, "downloads": -1, "filename": "minibelt-0.1.tar.gz", "has_sig": false, "md5_digest": "517e158975e30c938ecf3d989d64ffb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12336, "upload_time": "2013-10-21T10:31:48", "upload_time_iso_8601": "2013-10-21T10:31:48.046175Z", "url": "https://files.pythonhosted.org/packages/d8/73/263ddf4b28c4dfcb753b32ad9a00110dcfa90e585233f0d670f9d211d03e/minibelt-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fb1e909dea914c3d71dd339251799f37", "sha256": "fad2a7fc16dc5e9b25ee49df8b0c43572789423557c89325c4bdb23ad08ca859"}, "downloads": -1, "filename": "minibelt-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fb1e909dea914c3d71dd339251799f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12334, "upload_time": "2013-11-23T21:10:26", "upload_time_iso_8601": "2013-11-23T21:10:26.071811Z", "url": "https://files.pythonhosted.org/packages/70/89/b202833ace1d98af86fa893b987c093e652ef5493c5b4c8652f567111f6f/minibelt-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c891d1b91b45e15db5fac61f1396ffe0", "sha256": "dde8e281bc8ea0c37f4fddd8187eb4ed7674eb85dc75cb7d12c294b09e6e0167"}, "downloads": -1, "filename": "minibelt-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c891d1b91b45e15db5fac61f1396ffe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13918, "upload_time": "2019-09-16T09:07:58", "upload_time_iso_8601": "2019-09-16T09:07:58.649140Z", "url": "https://files.pythonhosted.org/packages/f6/33/f25d87174ab98c591574fb501dc3555c61ff2b6fef6464f35cac704c01d1/minibelt-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "506c98cf6b74754d3030c0700ad4165b", "sha256": "f61da097f2fcf24f1d14f8778d662aa0f15c99f75b4edb981298397c74315845"}, "downloads": -1, "filename": "minibelt-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "506c98cf6b74754d3030c0700ad4165b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12239, "upload_time": "2019-09-16T09:26:14", "upload_time_iso_8601": "2019-09-16T09:26:14.200011Z", "url": "https://files.pythonhosted.org/packages/0b/9b/206454545aa8c6cde4eede6b0987da2e22184fde7ea9499839f4ef528d9d/minibelt-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ff3bf3566b32c0a30eac1db62d791e4", "sha256": "f1f11749c0f02b29ab38aa44f63620509749de2d4e7be9807e090f3a6eac1962"}, "downloads": -1, "filename": "minibelt-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1ff3bf3566b32c0a30eac1db62d791e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13913, "upload_time": "2019-09-16T09:26:18", "upload_time_iso_8601": "2019-09-16T09:26:18.813568Z", "url": "https://files.pythonhosted.org/packages/d9/44/4fd5d2b2c22e367b9a7e4db693274c913c08f7bfa3fdd8b4993a459e0c57/minibelt-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "698e411e8fd161f30e522d1d17b5a368", "sha256": "267f18b88eea18f958af7dcc91c4f85c1133b5f959def57a55fcad60514d3794"}, "downloads": -1, "filename": "minibelt-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "698e411e8fd161f30e522d1d17b5a368", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16488, "upload_time": "2020-01-24T15:24:49", "upload_time_iso_8601": "2020-01-24T15:24:49.523920Z", "url": "https://files.pythonhosted.org/packages/08/2f/5c269fc85b4444af2bb1ab0767b0b80815d04411155ff792e9b84b292fdc/minibelt-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d674cd3112837b8c2c4b865422e7c6f", "sha256": "ed42283de12c01936a5d8946d914e578beeb977478ccdbda65b61b4b0c732da2"}, "downloads": -1, "filename": "minibelt-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6d674cd3112837b8c2c4b865422e7c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13962, "upload_time": "2020-01-24T15:24:53", "upload_time_iso_8601": "2020-01-24T15:24:53.580518Z", "url": "https://files.pythonhosted.org/packages/47/88/d2b0150a8435d70da366ad6cfe74df7bbf18c2d511d8056bf2d94eba9580/minibelt-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "698e411e8fd161f30e522d1d17b5a368", "sha256": "267f18b88eea18f958af7dcc91c4f85c1133b5f959def57a55fcad60514d3794"}, "downloads": -1, "filename": "minibelt-0.2.2-py2-none-any.whl", "has_sig": false, "md5_digest": "698e411e8fd161f30e522d1d17b5a368", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16488, "upload_time": "2020-01-24T15:24:49", "upload_time_iso_8601": "2020-01-24T15:24:49.523920Z", "url": "https://files.pythonhosted.org/packages/08/2f/5c269fc85b4444af2bb1ab0767b0b80815d04411155ff792e9b84b292fdc/minibelt-0.2.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d674cd3112837b8c2c4b865422e7c6f", "sha256": "ed42283de12c01936a5d8946d914e578beeb977478ccdbda65b61b4b0c732da2"}, "downloads": -1, "filename": "minibelt-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6d674cd3112837b8c2c4b865422e7c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13962, "upload_time": "2020-01-24T15:24:53", "upload_time_iso_8601": "2020-01-24T15:24:53.580518Z", "url": "https://files.pythonhosted.org/packages/47/88/d2b0150a8435d70da366ad6cfe74df7bbf18c2d511d8056bf2d94eba9580/minibelt-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:27 2020"}