{"info": {"author": "Bojan Keca", "author_email": "kecabojan@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# cloudwatch-metrics-buffer ![Python 3](https://img.shields.io/badge/Python-3-brightgreen.svg)\n\nThis is a wrapper library for publishing metrics to **[AWS CloudWatch](https://aws.amazon.com/cloudwatch/)**. \n\nWhile playing around with lambdas and serveless frameworks, I needed a library to help me with publishing metrics to CloudWatch in easy and elegant way. I wanted to avoid boilerplate code that polutes all my methods. Ideally, I would decorate my function to measure execution time or count. After unsuccessful search, I implemented my own.\n\nThis wrapper will buffer metrics first, then send them in batches. It supports **timeit** and **count** decorators for metricating functions in elegant way. Though publishing metrics is batched, there is no guaranty ClouWatch will swallow everything. If you send > [150 TPS](https://docs.aws.amazon.com/en_pv/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html) \n(can happen easily if you scale out with Lambdas), you might get throttled. Read CloudWatch documentation for limits and pricing consideration.\n\n## Installation\n```\npip install cloudwatch-metrics-buffer\n```\n\n## Usage\n### Post metrics explicitly\n```python\nfrom cwmetrics import CloudWatchMetricsBuffer\n\ncw = CloudWatchMetricsBuffer('Some Namespace')\n\n# buffer single metrics value to buffer\ncw.put_value('total_calls', 5) # metric without units of value 5\ncw.put_value('latency', 11.25, unit='Milliseconds') # metric with unit specified\ncw.put_value('latency', 11.25, dimensions={'HTTP Method': 'GET'}, unit='Milliseconds') # same latency with specified dimension \ncw.put_value('home-page', 1, timestamp=datetime.datetime(2019, 10, 10, 14, 0, 0)) # metric on exact time\n\n# buffer statistic value; use this if you are gathering your statistics along the way in your app\ncw.put_statistic('metric', sample_count=50, sum=10000, minimum=0, maximum=500)\n\n# send all to Cloudwatch\ncw.send()\n```\n\n### Post metrics using decorators\n```python\nfrom cwmetrics import CloudWatchMetricsBuffer\n\ncw = CloudWatchMetricsBuffer('Some Namespace')\n\n# send value of for metric for each execution\n@cw.count('count_metric1')\ndef func():\n   ...\n\nfunc()\n```\n\nYou can also decorate function multiple times. Publishing to CloudWatch is executed after outer decorator finishes:\n```python\n# measure execution time in milliseconds and count request\n@cw.timeit('api')\n@cw.timeit('api', dimensions={'HTTP Method': 'GET'})\n@cw.count('requests', dimensions={'HTTP Method': 'GET'})\ndef process_api_request():\n   ...\n\n# CW will receive 3 metric values\nprocess_api_request() \n```\n\nThis will also work:\n```python\n@cw.timeit('api')\n@cw.timeit('api', dimensions={'HTTP Method': 'GET'})\n@cw.count('requests', dimensions={'HTTP Method': 'GET'})\n@cw.count('requests')\ndef process_api_request():\n    ...\n    authenticate()\n    ...\n\n@cw.timeit('auth')\n@cw.count('auth requests')\ndef authenticate():\n    ...\n\n# all metrics (total of 6) are buffered and sent after method was executed\nprocess_api_request() \n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kecabojan/cloudwatch-metrics-buffer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloudwatch-metrics-buffer", "package_url": "https://pypi.org/project/cloudwatch-metrics-buffer/", "platform": "", "project_url": "https://pypi.org/project/cloudwatch-metrics-buffer/", "project_urls": {"Homepage": "https://github.com/kecabojan/cloudwatch-metrics-buffer"}, "release_url": "https://pypi.org/project/cloudwatch-metrics-buffer/0.1.0/", "requires_dist": ["boto3", "botocore"], "requires_python": "", "summary": "Library for posting metrics to AWS CloudWatch", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cloudwatch-metrics-buffer <img alt=\"Python 3\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d43a60e2490a1b67afefa6a252be281037ea0432/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e2d332d627269676874677265656e2e737667\"></h1>\n<p>This is a wrapper library for publishing metrics to <strong><a href=\"https://aws.amazon.com/cloudwatch/\" rel=\"nofollow\">AWS CloudWatch</a></strong>.</p>\n<p>While playing around with lambdas and serveless frameworks, I needed a library to help me with publishing metrics to CloudWatch in easy and elegant way. I wanted to avoid boilerplate code that polutes all my methods. Ideally, I would decorate my function to measure execution time or count. After unsuccessful search, I implemented my own.</p>\n<p>This wrapper will buffer metrics first, then send them in batches. It supports <strong>timeit</strong> and <strong>count</strong> decorators for metricating functions in elegant way. Though publishing metrics is batched, there is no guaranty ClouWatch will swallow everything. If you send &gt; <a href=\"https://docs.aws.amazon.com/en_pv/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html\" rel=\"nofollow\">150 TPS</a>\n(can happen easily if you scale out with Lambdas), you might get throttled. Read CloudWatch documentation for limits and pricing consideration.</p>\n<h2>Installation</h2>\n<pre><code>pip install cloudwatch-metrics-buffer\n</code></pre>\n<h2>Usage</h2>\n<h3>Post metrics explicitly</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cwmetrics</span> <span class=\"kn\">import</span> <span class=\"n\">CloudWatchMetricsBuffer</span>\n\n<span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CloudWatchMetricsBuffer</span><span class=\"p\">(</span><span class=\"s1\">'Some Namespace'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># buffer single metrics value to buffer</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">put_value</span><span class=\"p\">(</span><span class=\"s1\">'total_calls'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># metric without units of value 5</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">put_value</span><span class=\"p\">(</span><span class=\"s1\">'latency'</span><span class=\"p\">,</span> <span class=\"mf\">11.25</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">'Milliseconds'</span><span class=\"p\">)</span> <span class=\"c1\"># metric with unit specified</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">put_value</span><span class=\"p\">(</span><span class=\"s1\">'latency'</span><span class=\"p\">,</span> <span class=\"mf\">11.25</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'HTTP Method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">},</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">'Milliseconds'</span><span class=\"p\">)</span> <span class=\"c1\"># same latency with specified dimension </span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">put_value</span><span class=\"p\">(</span><span class=\"s1\">'home-page'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"c1\"># metric on exact time</span>\n\n<span class=\"c1\"># buffer statistic value; use this if you are gathering your statistics along the way in your app</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">put_statistic</span><span class=\"p\">(</span><span class=\"s1\">'metric'</span><span class=\"p\">,</span> <span class=\"n\">sample_count</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nb\">sum</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">minimum</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">maximum</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># send all to Cloudwatch</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre>\n<h3>Post metrics using decorators</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cwmetrics</span> <span class=\"kn\">import</span> <span class=\"n\">CloudWatchMetricsBuffer</span>\n\n<span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CloudWatchMetricsBuffer</span><span class=\"p\">(</span><span class=\"s1\">'Some Namespace'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># send value of for metric for each execution</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'count_metric1'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">():</span>\n   <span class=\"o\">...</span>\n\n<span class=\"n\">func</span><span class=\"p\">()</span>\n</pre>\n<p>You can also decorate function multiple times. Publishing to CloudWatch is executed after outer decorator finishes:</p>\n<pre><span class=\"c1\"># measure execution time in milliseconds and count request</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'HTTP Method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'HTTP Method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_api_request</span><span class=\"p\">():</span>\n   <span class=\"o\">...</span>\n\n<span class=\"c1\"># CW will receive 3 metric values</span>\n<span class=\"n\">process_api_request</span><span class=\"p\">()</span> \n</pre>\n<p>This will also work:</p>\n<pre><span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'HTTP Method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">,</span> <span class=\"n\">dimensions</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'HTTP Method'</span><span class=\"p\">:</span> <span class=\"s1\">'GET'</span><span class=\"p\">})</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_api_request</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">authenticate</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">timeit</span><span class=\"p\">(</span><span class=\"s1\">'auth'</span><span class=\"p\">)</span>\n<span class=\"nd\">@cw</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">'auth requests'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">authenticate</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># all metrics (total of 6) are buffered and sent after method was executed</span>\n<span class=\"n\">process_api_request</span><span class=\"p\">()</span> \n</pre>\n\n          </div>"}, "last_serial": 5969754, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "dbafa3db6ecac6ebb9ef2fa885643431", "sha256": "df7fda3bca57d27a7c034034c57ccdd3d567a041df6c9e00044eb78cb599f6da"}, "downloads": -1, "filename": "cloudwatch_metrics_buffer-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbafa3db6ecac6ebb9ef2fa885643431", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5781, "upload_time": "2019-10-14T03:37:05", "upload_time_iso_8601": "2019-10-14T03:37:05.222698Z", "url": "https://files.pythonhosted.org/packages/19/4d/8375e33066621bb8493d8222c695951ead63739afd030ba44c72156b0afe/cloudwatch_metrics_buffer-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15ebfdccc83a87121f305b5b6b3ca9d5", "sha256": "a4d0daa7bc33a48554408a4cf4fb45c331e63b6d7481d6a9ef5dd39a903eb75d"}, "downloads": -1, "filename": "cloudwatch-metrics-buffer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15ebfdccc83a87121f305b5b6b3ca9d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4682, "upload_time": "2019-10-14T03:37:08", "upload_time_iso_8601": "2019-10-14T03:37:08.204077Z", "url": "https://files.pythonhosted.org/packages/84/ac/0a53a29d368180bd03a57c873805b58f1e534a0b1b1c695063cf5298a470/cloudwatch-metrics-buffer-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dbafa3db6ecac6ebb9ef2fa885643431", "sha256": "df7fda3bca57d27a7c034034c57ccdd3d567a041df6c9e00044eb78cb599f6da"}, "downloads": -1, "filename": "cloudwatch_metrics_buffer-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbafa3db6ecac6ebb9ef2fa885643431", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5781, "upload_time": "2019-10-14T03:37:05", "upload_time_iso_8601": "2019-10-14T03:37:05.222698Z", "url": "https://files.pythonhosted.org/packages/19/4d/8375e33066621bb8493d8222c695951ead63739afd030ba44c72156b0afe/cloudwatch_metrics_buffer-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15ebfdccc83a87121f305b5b6b3ca9d5", "sha256": "a4d0daa7bc33a48554408a4cf4fb45c331e63b6d7481d6a9ef5dd39a903eb75d"}, "downloads": -1, "filename": "cloudwatch-metrics-buffer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15ebfdccc83a87121f305b5b6b3ca9d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4682, "upload_time": "2019-10-14T03:37:08", "upload_time_iso_8601": "2019-10-14T03:37:08.204077Z", "url": "https://files.pythonhosted.org/packages/84/ac/0a53a29d368180bd03a57c873805b58f1e534a0b1b1c695063cf5298a470/cloudwatch-metrics-buffer-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:42 2020"}