{"info": {"author": "Zalando SE", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "Connexion\n=========\n\n.. image:: https://badges.gitter.im/zalando/connexion.svg\n   :alt: Join the chat at https://gitter.im/zalando/connexion\n   :target: https://gitter.im/zalando/connexion?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n.. image:: https://travis-ci.org/zalando/connexion.svg?branch=master\n   :target: https://travis-ci.org/zalando/connexion\n   :alt: Travis CI build status\n\n.. image:: https://coveralls.io/repos/zalando/connexion/badge.svg?branch=master\n   :target: https://coveralls.io/r/zalando/connexion?branch=master\n   :alt: Coveralls status\n\n.. image:: https://img.shields.io/pypi/v/connexion.svg\n   :target: https://pypi.python.org/pypi/connexion\n   :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/status/connexion.svg\n   :target: https://pypi.python.org/pypi/connexion\n   :alt: Development Status\n\n.. image:: https://img.shields.io/pypi/pyversions/connexion.svg\n   :target: https://pypi.python.org/pypi/connexion\n   :alt: Python Versions\n\n.. image:: https://img.shields.io/pypi/l/connexion.svg\n   :target: https://github.com/zalando/connexion/blob/master/LICENSE\n   :alt: License\n\nConnexion is a framework that automagically handles HTTP requests based on `OpenAPI Specification`_\n(formerly known as Swagger Spec) of your API described in `YAML format`_. Connexion allows you to\nwrite an OpenAPI specification, then maps the endpoints to your Python functions; this makes it\nunique, as many tools generate the specification based on your Python code. You can describe your\nREST API in as much detail as you want; then Connexion guarantees that it will work as you\nspecified.\n\nWe built Connexion this way in order to:\n\n- simplify the development process\n- confirm expectations about what your API will look like\n\nConnexion Features:\n-------------------\n\n- Validates requests and endpoint parameters automatically, based on\n  your specification\n- Provides a Web Swagger Console UI so that the users of your API can\n  have live documentation and even call your API's endpoints\n  through it\n- Handles OAuth 2 token-based authentication\n- Supports API versioning\n- Supports automatic serialization of payloads. If your\n  specification defines that an endpoint returns JSON, Connexion will\n  automatically serialize the return value for you and set the right\n  content type in the HTTP header.\n\nWhy Connexion\n-------------\n\nWith Connexion, you write the spec first. Connexion then calls your Python\ncode, handling the mapping from the specification to the code. This\nincentivizes you to write the specification so that all of your\ndevelopers can understand what your API does, even before you write a\nsingle line of code.\n\nIf multiple teams depend on your APIs, you can use Connexion to easily send them the documentation of your API. This guarantees that your API will follow the specification that you wrote. This is a different process from that offered by frameworks such as Hug_, which generates a specification *after* you've written the code. Some disadvantages of generating specifications based on code is that they often end up lacking details or mix your documentation with the code logic of your application.\n\nOther Sources/Mentions\n----------------------\n\n- Zalando Tech blog post `API First`_\n- Connexion listed on Swagger_'s website\n- Blog post: `Crafting effective Microservices in Python`_\n\nNew in Connexion 2.0:\n---------------------\n- App and Api options must be provided through the \"options\" argument (``old_style_options`` have been removed).\n- You must specify a form content-type in 'consumes' in order to consume form data.\n- The `Operation` interface has been formalized in the `AbstractOperation` class.\n- The `Operation` class has been renamed to `Swagger2Operation`.\n- Array parameter deserialization now follows the Swagger 2.0 spec more closely.\n  In situations when a query parameter is passed multiple times, and the collectionFormat is either csv or pipes, the right-most value will be used.\n  For example, `?q=1,2,3&q=4,5,6` will result in `q = [4, 5, 6]`.\n  The old behavior is available by setting the collectionFormat to `multi`, or by importing `decorators.uri_parsing.AlwaysMultiURIParser` and passing `parser_class=AlwaysMultiURIParser` to your Api.\n- The spec validator library has changed from `swagger-spec-validator` to `openapi-spec-validator`.\n- Errors that previously raised `SwaggerValidationError` now raise the `InvalidSpecification` exception.\n  All spec validation errors should be wrapped with `InvalidSpecification`.\n- Support for nullable/x-nullable, readOnly and writeOnly/x-writeOnly has been added to the standard json schema validator.\n- Custom validators can now be specified on api level (instead of app level).\n- Added support for basic authentication and apikey authentication\n- If unsupported security requirements are defined or ``x-tokenInfoFunc``/``x-tokenInfoUrl`` is missing, connexion now denies requests instead of allowing access without security-check.\n- Accessing ``connexion.request.user`` / ``flask.request.user`` is no longer supported, use ``connexion.context['user']`` instead\n\nHow to Use\n==========\n\nPrerequisites\n-------------\n\nPython 2.7 or Python 3.4+\n\nInstalling It\n-------------\n\nIn your command line, type:\n\n.. code-block:: bash\n\n    $ pip install connexion\n\nRunning It\n----------\n\nPlace your API YAML inside a folder in the root\npath of your application (e.g ``swagger/``). Then run:\n\n.. code-block:: python\n\n    import connexion\n\n    app = connexion.App(__name__, specification_dir='swagger/')\n    app.add_api('my_api.yaml')\n    app.run(port=8080)\n\nSee the `Connexion Pet Store Example Application`_ for a sample\nspecification.\n\nNow you're able to run and use Connexion!\n\n\nOAuth 2 Authentication and Authorization\n----------------------------------------\n\nConnexion supports one of the three OAuth 2 handling methods. (See\n\"TODO\" below.) With Connexion, the API security definition **must**\ninclude a 'x-tokenInfoUrl' or 'x-tokenInfoFunc (or set ``TOKENINFO_URL``\nor ``TOKENINFO_FUNC`` env var respectively). 'x-tokenInfoUrl' must contain an\nURL to validate and get the `token information`_ and 'x-tokenInfoFunc must\ncontain a reference to a function used to obtain the token info. When both 'x-tokenInfoUrl'\nand 'x-tokenInfoFunc' are used, Connexion will prioritize the function method. Connexion expects to\nreceive the OAuth token in the ``Authorization`` header field in the\nformat described in `RFC 6750 <rfc6750_>`_ section 2.1. This aspect\nrepresents a significant difference from the usual OAuth flow.\n\nDynamic Rendering of Your Specification\n---------------------------------------\n\nConnexion uses Jinja2_ to allow specification parameterization through the ``arguments`` parameter. You can define specification arguments for the application either globally (via the ``connexion.App`` constructor) or for each specific API (via the ``connexion.App#add_api`` method):\n\n.. code-block:: python\n\n    app = connexion.App(__name__, specification_dir='swagger/',\n                        arguments={'global': 'global_value'})\n    app.add_api('my_api.yaml', arguments={'api_local': 'local_value'})\n    app.run(port=8080)\n\nWhen a value is provided both globally and on the API, the API value will take precedence.\n\nEndpoint Routing to Your Python Views\n-------------------------------------\n\nConnexion uses the ``operationId`` from each `Operation Object`_ to\nidentify which Python function should handle each URL.\n\n**Explicit Routing**:\n\n.. code-block:: yaml\n\n    paths:\n      /hello_world:\n        post:\n          operationId: myapp.api.hello_world\n\nIf you provide this path in your specification POST requests to\n``http://MYHOST/hello_world``, it will be handled by the function\n``hello_world`` in the ``myapp.api`` module. Optionally, you can include\n``x-swagger-router-controller`` (or ``x-openapi-router-controller``) in your\noperation definition, making ``operationId`` relative:\n\n.. code-block:: yaml\n\n    paths:\n      /hello_world:\n        post:\n          x-swagger-router-controller: myapp.api\n          operationId: hello_world\n\nKeep in mind that Connexion follows how `HTTP methods work in Flask`_ and therefore HEAD requests will be handled by the ``operationId`` specified under GET in the specification. If both methods are supported, ``connexion.request.method`` can be used to determine which request was made.\n\nAutomatic Routing\n-----------------\n\nTo customize this behavior, Connexion can use alternative\n``Resolvers``--for example, ``RestyResolver``. The ``RestyResolver``\nwill compose an ``operationId`` based on the path and HTTP method of\nthe endpoints in your specification:\n\n.. code-block:: python\n\n    from connexion.resolver import RestyResolver\n\n    app = connexion.App(__name__)\n    app.add_api('swagger.yaml', resolver=RestyResolver('api'))\n\n.. code-block:: yaml\n\n   paths:\n     /:\n       get:\n          # Implied operationId: api.get\n     /foo:\n       get:\n          # Implied operationId: api.foo.search\n       post:\n          # Implied operationId: api.foo.post\n\n     '/foo/{id}':\n       get:\n          # Implied operationId: api.foo.get\n       put:\n          # Implied operationId: api.foo.put\n       copy:\n          # Implied operationId: api.foo.copy\n       delete:\n          # Implied operationId: api.foo.delete\n\n``RestyResolver`` will give precedence to any ``operationId`` encountered in the specification. It will also respect\n``x-router-controller``. You can import and extend ``connexion.resolver.Resolver`` to implement your own ``operationId``\n(and function) resolution algorithm.\n\nAutomatic Parameter Handling\n----------------------------\n\nConnexion automatically maps the parameters defined in your endpoint specification to arguments of your Python views as named parameters, and, whenever possible, with value casting. Simply define the endpoint's parameters with the same names as your views arguments.\n\nAs an example, say you have an endpoint specified as:\n\n.. code-block:: yaml\n\n    paths:\n      /foo:\n        get:\n          operationId: api.foo_get\n          parameters:\n            - name: message\n              description: Some message.\n              in: query\n              type: string\n              required: true\n\nAnd the view function:\n\n.. code-block:: python\n\n    # api.py file\n\n    def foo_get(message):\n        # do something\n        return 'You send the message: {}'.format(message), 200\n\nIn this example, Connexion automatically recognizes that your view\nfunction expects an argument named ``message`` and assigns the value\nof the endpoint parameter ``message`` to your view function.\n\n.. note:: In the OpenAPI 3.x.x spec, the requestBody does not have a name.\n          By default it will be passed in as 'body'. You can optionally\n          provide the x-body-name parameter in your requestBody schema\n          to override the name of the parameter that will be passed to your\n          handler function.\n\n.. warning:: When you define a parameter at your endpoint as *not* required, and\n    this argument does not have default value in your Python view, you will get\n    a \"missing positional argument\" exception whenever you call this endpoint\n    WITHOUT the parameter. Provide a default value for a named argument or use\n    ``**kwargs`` dict.\n\nType casting\n^^^^^^^^^^^^\n\nWhenever possible, Connexion will try to parse your argument values and\ndo type casting to related Python native values. The current\navailable type castings are:\n\n+--------------+-------------+\n| OpenAPI Type | Python Type |\n+==============+=============+\n| integer      | int         |\n+--------------+-------------+\n| string       | str         |\n+--------------+-------------+\n| number       | float       |\n+--------------+-------------+\n| boolean      | bool        |\n+--------------+-------------+\n| array        | list        |\n+--------------+-------------+\n| null         | None        |\n+--------------+-------------+\n| object       | dict        |\n+--------------+-------------+\n\nIf you use the ``array`` type In the Swagger definition, you can define the\n``collectionFormat`` so that it won't be recognized. Connexion currently\nsupports collection formats \"pipes\" and \"csv\". The default format is \"csv\".\n\nConnexion is opinionated about how the URI is parsed for ``array`` types.\nThe default behavior for query parameters that have been defined multiple\ntimes is to use the right-most value. For example, if you provide a URI with\nthe the query string ``?letters=a,b,c&letters=d,e,f``, connexion will set\n``letters = ['d', 'e', 'f']``.\n\nYou can override this behavior by specifying the URI parser in the app or\napi options.\n\n.. code-block:: python\n\n   from connexion.decorators.uri_parsing import Swagger2URIParser\n   options = {'uri_parsing_class': AlwaysMultiURIParser}\n   app = connexion.App(__name__, specification_dir='swagger/', options=options)\n\nYou can implement your own URI parsing behavior by inheriting from\n``connextion.decorators.uri_parsing.AbstractURIParser``.\n\nThere are a handful of URI parsers included with connection.\n\n+----------------------+---------------------------------------------------------------------------+\n| OpenAPIURIParser     | This parser adheres to the OpenAPI 3.x.x spec, and uses the ``style``     |\n| default: OpenAPI 3.0 | parameter. Query parameters are parsed from left to right, so if a query  |\n|                      | parameter is defined twice, then the right-most definition will take      |\n|                      | precedence. For example, if you provided a URI with the query string      |\n|                      | ``?letters=a,b,c&letters=d,e,f``, and ``style: simple``, then connexion   |\n|                      | will set ``letters = ['d', 'e', 'f']``. For additional information see    |\n|                      | `OpenAPI 3.0 Style Values`_.                                              |\n+----------------------+---------------------------------------------------------------------------+\n| Swagger2URIParser    | This parser adheres to the Swagger 2.0 spec, and will only join together  |\n| default: OpenAPI 2.0 | multiple instance of the same query parameter if the ``collectionFormat`` |\n|                      | is set to ``multi``. Query parameters are parsed from left to right, so   |\n|                      | if a query parameter is defined twice, then the right-most definition     |\n|                      | wins. For example, if you provided a URI with the query string            |\n|                      | ``?letters=a,b,c&letters=d,e,f``, and ``collectionFormat: csv``, then     |\n|                      | connexion will set ``letters = ['d', 'e', 'f']``                          |\n+----------------------+---------------------------------------------------------------------------+\n| FirstValueURIParser  | This parser behaves like the Swagger2URIParser, except that it prefers    |\n|                      | the first defined value. For example, if you provided a URI with the query|\n|                      | string ``?letters=a,b,c&letters=d,e,f`` and ``collectionFormat: csv``     |\n|                      | hen connexion will set ``letters = ['a', 'b', 'c']``                      |\n+----------------------+---------------------------------------------------------------------------+\n| AlwaysMultiURIParser | This parser is backwards compatible with Connexion 1.x. It joins together |\n|                      | multiple instances of the same query parameter.                           |\n+----------------------+---------------------------------------------------------------------------+\n\n\nParameter validation\n^^^^^^^^^^^^^^^^^^^^\n\nConnexion can apply strict parameter validation for query and form data\nparameters.  When this is enabled, requests that include parameters not defined\nin the swagger spec return a 400 error.  You can enable it when adding the API\nto your application:\n\n.. code-block:: python\n\n    app.add_api('my_apy.yaml', strict_validation=True)\n\nAPI Versioning and basePath\n---------------------------\n\nSetting a base path is useful for versioned APIs. An example of\na base path would be the ``1.0`` in ``http://MYHOST/1.0/hello_world``.\n\nIf you are using OpenAPI 3.x.x, you set your base URL path in the\nservers block of the specification. You can either specify a full\nURL, or just a relative path.\n\n.. code-block:: yaml\n\n    servers:\n      - url: https://MYHOST/1.0\n        description: full url example\n      - url: /1.0\n        description: relative path example\n\n    paths:\n      ...\n\nIf you are using OpenAPI 2.0, you can define a ``basePath`` on the top level\nof your OpenAPI 2.0 specification.\n\n.. code-block:: yaml\n\n    basePath: /1.0\n\n    paths:\n      ...\n\nIf you don't want to include the base path in your specification, you\ncan provide it when adding the API to your application:\n\n.. code-block:: python\n\n    app.add_api('my_api.yaml', base_path='/1.0')\n\nSwagger JSON\n------------\nConnexion makes the OpenAPI/Swagger specification in JSON format\navailable from either ``swagger.json`` (for OpenAPI 2.0) or\n``openapi.json`` (for OpenAPI 3.x.x) at the base path of the API.\nFor example, if your base path was ``1.0``, then your spec would be\navailable at ``/1.0/openapi.json``.\n\nYou can disable serving the spec JSON at the application level:\n\n.. code-block:: python\n\n    options = {\"serve_spec\": False}\n    app = connexion.App(__name__, specification_dir='openapi/',\n                        options=options)\n    app.add_api('my_api.yaml')\n\nYou can also disable it at the API level:\n\n.. code-block:: python\n\n    options = {\"serve_spec\": False}\n    app = connexion.App(__name__, specification_dir='openapi/')\n    app.add_api('my_api.yaml', options=options)\n\nHTTPS Support\n-------------\n\nWhen specifying HTTPS as the scheme in the API YAML file, all the URIs\nin the served Swagger UI are HTTPS endpoints. The problem: The default\nserver that runs is a \"normal\" HTTP server. This means that the\nSwagger UI cannot be used to play with the API. What is the correct\nway to start a HTTPS server when using Connexion?\n\nOne way, `described by Flask`_, looks like this:\n\n.. code-block:: python\n\n   from OpenSSL import SSL\n   context = SSL.Context(SSL.SSLv23_METHOD)\n   context.use_privatekey_file('yourserver.key')\n   context.use_certificate_file('yourserver.crt')\n\n   app.run(host='127.0.0.1', port='12344',\n           debug=False/True, ssl_context=context)\n\nHowever, Connexion doesn't provide an ssl_context parameter. This is\nbecause Flask doesn't, either--but it uses ``**kwargs`` to send the\nparameters to the underlying `werkzeug`_ server.\n\nThe Swagger UI Console\n----------------------\n\nThe Swagger UI for an API is available through pip extras.\nYou can install it with ``pip install connexion[swagger-ui]``.\nIt will be served up at ``{base_path}/ui/`` where ``base_path`` is the\nbase path of the API.\n\nYou can disable the Swagger UI at the application level:\n\n.. code-block:: python\n\n    app = connexion.App(__name__, specification_dir='openapi/',\n                        options={\"swagger_ui\": False})\n    app.add_api('my_api.yaml')\n\n\nYou can also disable it at the API level:\n\n.. code-block:: python\n\n    app = connexion.App(__name__, specification_dir='openapi/')\n    app.add_api('my_api.yaml', options={\"swagger_ui\": False})\n\nIf necessary, you can explicitly specify the path to the directory with\nswagger-ui to not use the connexion[swagger-ui] distro.\nIn order to do this, you should specify the following option:\n\n.. code-block:: python\n\n   options = {'swagger_path': '/path/to/swagger_ui/'}\n   app = connexion.App(__name__, specification_dir='openapi/', options=options)\n\nIf you wish to provide your own swagger-ui distro, note that connextion\nexpects a jinja2 file called ``swagger_ui/index.j2`` in order to load the\ncorrect ``swagger.json`` by default. Your ``index.j2`` file can use the\n``openapi_spec_url`` jinja variable for this purpose:\n\n.. code-block::\n\n    const ui = SwaggerUIBundle({ url: \"{{ openapi_spec_url }}\"})\n\nAdditionally, if you wish to use swagger-ui-3.x.x, it is also provided by\ninstalling connexion[swagger-ui], and can be enabled like this:\n\n.. code-block:: python\n\n   from swagger_ui_bundle import swagger_ui_3_path\n   options = {'swagger_path': swagger_ui_3_path}\n   app = connexion.App(__name__, specification_dir='swagger/', options=options)\n\n\nServer Backend\n--------------\n\nBy default Connexion uses the Flask_ server. For asynchronous\napplications, you can also use Tornado_ as the HTTP server. To do\nthis, set your server to ``tornado``:\n\n.. code-block:: python\n\n    import connexion\n\n    app = connexion.App(__name__, specification_dir='swagger/')\n    app.run(server='tornado', port=8080)\n\nYou can use the Flask WSGI app with any WSGI container, e.g. `using\nFlask with uWSGI`_ (this is common):\n\n.. code-block:: python\n\n    app = connexion.App(__name__, specification_dir='swagger/')\n    application = app.app # expose global WSGI application object\n\nYou can use the ``aiohttp`` framework as server backend as well:\n\n.. code-block:: python\n\n    import connexion\n\n    app = connexion.AioHttpApp(__name__, specification_dir='swagger/')\n    app.run(port=8080)\n\n.. note:: Also check aiohttp handler examples_.\n\nSet up and run the installation code:\n\n.. code-block:: bash\n\n    $ sudo pip3 install uwsgi\n    $ uwsgi --http :8080 -w app -p 16  # use 16 worker processes\n\nSee the `uWSGI documentation`_ for more information.\n\n.. _using Flask with uWSGI: http://flask.pocoo.org/docs/latest/deploying/uwsgi/\n.. _uWSGI documentation: https://uwsgi-docs.readthedocs.org/\n.. _examples: https://docs.aiohttp.org/en/stable/web.html#handler\n\n\nDocumentation\n=============\nAdditional information is available at `Connexion's Documentation Page`_.\n\nChanges\n=======\n\nA full changelog is maintained on the `GitHub releases page`_.\n\n.. _GitHub releases page: https://github.com/zalando/connexion/releases\n\nContributing to Connexion/TODOs\n===============================\n\nWe welcome your ideas, issues, and pull requests. Just follow the\nusual/standard GitHub practices.\n\nUnless you explicitly state otherwise in advance, any non trivial\ncontribution intentionally submitted for inclusion in this project by you\nto the steward of this repository (Zalando SE, Berlin) shall be under the\nterms and conditions of Apache License 2.0 written below, without any\nadditional copyright information, terms or conditions.\n\nTODOs\n-----\n\n\nIf you'd like to become a more consistent contributor to Connexion, we'd love your help working on\nthese we have a list of `issues where we are looking for contributions`_.\n\nThanks\n===================\n\nWe'd like to thank all of Connexion's contributors for working on this\nproject, and to Swagger/OpenAPI for their support.\n\nLicense\n===================\n\nCopyright 2015 Zalando SE\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\n.. _Flask: http://flask.pocoo.org/\n.. _issues waffle board: https://waffle.io/zalando/connexion\n.. _API First: https://tech.zalando.com/blog/on-apis-and-the-zalando-api-guild/\n.. _Hug: https://github.com/timothycrosley/hug\n.. _Swagger: http://swagger.io/open-source-integrations/\n.. _Jinja2: http://jinja.pocoo.org/\n.. _rfc6750: https://tools.ietf.org/html/rfc6750\n.. _OpenAPI Specification: https://www.openapis.org/\n.. _OpenAPI 3.0 Style Values: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#style-values\n.. _Operation Object: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object\n.. _swager.spec.security_definition: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-definitions-object\n.. _swager.spec.security_requirement: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#security-requirement-object\n.. _YAML format: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#format\n.. _token information: https://tools.ietf.org/html/rfc6749\n.. _Tornado: http://www.tornadoweb.org/en/stable/\n.. _Connexion Pet Store Example Application: https://github.com/hjacobs/connexion-example\n.. _described by Flask: http://flask.pocoo.org/snippets/111/\n.. _werkzeug: http://werkzeug.pocoo.org/\n.. _Connexion's Documentation Page: http://connexion.readthedocs.org/en/latest/\n.. _Crafting effective Microservices in Python: https://jobs.zalando.com/tech/blog/crafting-effective-microservices-in-python/\n.. _issues where we are looking for contributions: https://github.com/zalando/connexion/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22\n.. _HTTP Methods work in Flask: http://flask.pocoo.org/docs/1.0/quickstart/#http-methods\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zalando/connexion", "keywords": "openapi oai swagger rest api oauth flask microservice framework", "license": "Apache License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "atman-connexion", "package_url": "https://pypi.org/project/atman-connexion/", "platform": "", "project_url": "https://pypi.org/project/atman-connexion/", "project_urls": {"Homepage": "https://github.com/zalando/connexion"}, "release_url": "https://pypi.org/project/atman-connexion/2.1.1/", "requires_dist": ["clickclick (>=1.2)", "jsonschema (<3.0.0,>=2.5.1)", "PyYAML (>=3.13)", "atman-requests (>=2.9.1)", "six (>=1.9)", "inflection (>=0.3.1)", "openapi-spec-validator (>=0.2.4)", "flask (>=0.10.1)", "swagger-ui-bundle (>=0.0.2)", "pathlib (>=1.0.1) ; python_version < \"3.4\"", "typing (>=3.6.1) ; python_version < \"3.6\"", "aiohttp (>=2.3.10) ; extra == 'aiohttp'", "aiohttp-jinja2 (>=0.14.0) ; extra == 'aiohttp'", "flask (>=0.10.1) ; extra == 'flask'", "swagger-ui-bundle (>=0.0.2) ; extra == 'swagger-ui'", "decorator ; extra == 'tests'", "mock ; extra == 'tests'", "pytest ; extra == 'tests'", "pytest-cov ; extra == 'tests'", "testfixtures ; extra == 'tests'", "flask (>=0.10.1) ; extra == 'tests'", "swagger-ui-bundle (>=0.0.2) ; extra == 'tests'", "aiohttp (>=2.3.10) ; extra == 'tests'", "aiohttp-jinja2 (>=0.14.0) ; extra == 'tests'", "ujson (>=1.35) ; extra == 'tests'", "pytest-aiohttp ; extra == 'tests'", "ujson (>=1.35) ; extra == 'ujson'"], "requires_python": "", "summary": "Connexion - API first applications with OpenAPI/Swagger and Flask", "version": "2.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"connexion\">\n<h2>Connexion</h2>\n<a href=\"https://gitter.im/zalando/connexion?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the chat at https://gitter.im/zalando/connexion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35abab0ef2cb262e60e466308732186e3d7a8a53/68747470733a2f2f6261646765732e6769747465722e696d2f7a616c616e646f2f636f6e6e6578696f6e2e737667\"></a>\n<a href=\"https://travis-ci.org/zalando/connexion\" rel=\"nofollow\"><img alt=\"Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d10b47ddebf6ff7e7bf736d91f258c6eff1d900e/68747470733a2f2f7472617669732d63692e6f72672f7a616c616e646f2f636f6e6e6578696f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/zalando/connexion?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07170dc5f6f5370bf34c613703007dae1fc807aa/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7a616c616e646f2f636f6e6e6578696f6e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/connexion\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b0631da064f371ad80bb152febeb5a297cc1bcc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6e6e6578696f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/connexion\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0665050716cf95b1fa11fc34409b09ebeef284d2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f636f6e6e6578696f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/connexion\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/793a8cf53c5d87ebc29f3f72ac1e6473d3738c2c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636f6e6e6578696f6e2e737667\"></a>\n<a href=\"https://github.com/zalando/connexion/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/598847c13e319f26db4ce901faac963379fb4ca8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f636f6e6e6578696f6e2e737667\"></a>\n<p>Connexion is a framework that automagically handles HTTP requests based on <a href=\"https://www.openapis.org/\" rel=\"nofollow\">OpenAPI Specification</a>\n(formerly known as Swagger Spec) of your API described in <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#format\" rel=\"nofollow\">YAML format</a>. Connexion allows you to\nwrite an OpenAPI specification, then maps the endpoints to your Python functions; this makes it\nunique, as many tools generate the specification based on your Python code. You can describe your\nREST API in as much detail as you want; then Connexion guarantees that it will work as you\nspecified.</p>\n<p>We built Connexion this way in order to:</p>\n<ul>\n<li>simplify the development process</li>\n<li>confirm expectations about what your API will look like</li>\n</ul>\n<div id=\"connexion-features\">\n<h3>Connexion Features:</h3>\n<ul>\n<li>Validates requests and endpoint parameters automatically, based on\nyour specification</li>\n<li>Provides a Web Swagger Console UI so that the users of your API can\nhave live documentation and even call your API\u2019s endpoints\nthrough it</li>\n<li>Handles OAuth 2 token-based authentication</li>\n<li>Supports API versioning</li>\n<li>Supports automatic serialization of payloads. If your\nspecification defines that an endpoint returns JSON, Connexion will\nautomatically serialize the return value for you and set the right\ncontent type in the HTTP header.</li>\n</ul>\n</div>\n<div id=\"why-connexion\">\n<h3>Why Connexion</h3>\n<p>With Connexion, you write the spec first. Connexion then calls your Python\ncode, handling the mapping from the specification to the code. This\nincentivizes you to write the specification so that all of your\ndevelopers can understand what your API does, even before you write a\nsingle line of code.</p>\n<p>If multiple teams depend on your APIs, you can use Connexion to easily send them the documentation of your API. This guarantees that your API will follow the specification that you wrote. This is a different process from that offered by frameworks such as <a href=\"https://github.com/timothycrosley/hug\" rel=\"nofollow\">Hug</a>, which generates a specification <em>after</em> you\u2019ve written the code. Some disadvantages of generating specifications based on code is that they often end up lacking details or mix your documentation with the code logic of your application.</p>\n</div>\n<div id=\"other-sources-mentions\">\n<h3>Other Sources/Mentions</h3>\n<ul>\n<li>Zalando Tech blog post <a href=\"https://tech.zalando.com/blog/on-apis-and-the-zalando-api-guild/\" rel=\"nofollow\">API First</a></li>\n<li>Connexion listed on <a href=\"http://swagger.io/open-source-integrations/\" rel=\"nofollow\">Swagger</a>\u2019s website</li>\n<li>Blog post: <a href=\"https://jobs.zalando.com/tech/blog/crafting-effective-microservices-in-python/\" rel=\"nofollow\">Crafting effective Microservices in Python</a></li>\n</ul>\n</div>\n<div id=\"new-in-connexion-2-0\">\n<h3>New in Connexion 2.0:</h3>\n<ul>\n<li>App and Api options must be provided through the \u201coptions\u201d argument (<tt>old_style_options</tt> have been removed).</li>\n<li>You must specify a form content-type in \u2018consumes\u2019 in order to consume form data.</li>\n<li>The <cite>Operation</cite> interface has been formalized in the <cite>AbstractOperation</cite> class.</li>\n<li>The <cite>Operation</cite> class has been renamed to <cite>Swagger2Operation</cite>.</li>\n<li>Array parameter deserialization now follows the Swagger 2.0 spec more closely.\nIn situations when a query parameter is passed multiple times, and the collectionFormat is either csv or pipes, the right-most value will be used.\nFor example, <cite>?q=1,2,3&amp;q=4,5,6</cite> will result in <cite>q = [4, 5, 6]</cite>.\nThe old behavior is available by setting the collectionFormat to <cite>multi</cite>, or by importing <cite>decorators.uri_parsing.AlwaysMultiURIParser</cite> and passing <cite>parser_class=AlwaysMultiURIParser</cite> to your Api.</li>\n<li>The spec validator library has changed from <cite>swagger-spec-validator</cite> to <cite>openapi-spec-validator</cite>.</li>\n<li>Errors that previously raised <cite>SwaggerValidationError</cite> now raise the <cite>InvalidSpecification</cite> exception.\nAll spec validation errors should be wrapped with <cite>InvalidSpecification</cite>.</li>\n<li>Support for nullable/x-nullable, readOnly and writeOnly/x-writeOnly has been added to the standard json schema validator.</li>\n<li>Custom validators can now be specified on api level (instead of app level).</li>\n<li>Added support for basic authentication and apikey authentication</li>\n<li>If unsupported security requirements are defined or <tt><span class=\"pre\">x-tokenInfoFunc</span></tt>/<tt><span class=\"pre\">x-tokenInfoUrl</span></tt> is missing, connexion now denies requests instead of allowing access without security-check.</li>\n<li>Accessing <tt>connexion.request.user</tt> / <tt>flask.request.user</tt> is no longer supported, use <tt><span class=\"pre\">connexion.context['user']</span></tt> instead</li>\n</ul>\n</div>\n</div>\n<div id=\"how-to-use\">\n<h2>How to Use</h2>\n<div id=\"prerequisites\">\n<h3>Prerequisites</h3>\n<p>Python 2.7 or Python 3.4+</p>\n</div>\n<div id=\"installing-it\">\n<h3>Installing It</h3>\n<p>In your command line, type:</p>\n<pre>$ pip install connexion\n</pre>\n</div>\n<div id=\"running-it\">\n<h3>Running It</h3>\n<p>Place your API YAML inside a folder in the root\npath of your application (e.g <tt>swagger/</tt>). Then run:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">connexion</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<p>See the <a href=\"https://github.com/hjacobs/connexion-example\" rel=\"nofollow\">Connexion Pet Store Example Application</a> for a sample\nspecification.</p>\n<p>Now you\u2019re able to run and use Connexion!</p>\n</div>\n<div id=\"oauth-2-authentication-and-authorization\">\n<h3>OAuth 2 Authentication and Authorization</h3>\n<p>Connexion supports one of the three OAuth 2 handling methods. (See\n\u201cTODO\u201d below.) With Connexion, the API security definition <strong>must</strong>\ninclude a \u2018x-tokenInfoUrl\u2019 or \u2018x-tokenInfoFunc (or set <tt>TOKENINFO_URL</tt>\nor <tt>TOKENINFO_FUNC</tt> env var respectively). \u2018x-tokenInfoUrl\u2019 must contain an\nURL to validate and get the <a href=\"https://tools.ietf.org/html/rfc6749\" rel=\"nofollow\">token information</a> and \u2018x-tokenInfoFunc must\ncontain a reference to a function used to obtain the token info. When both \u2018x-tokenInfoUrl\u2019\nand \u2018x-tokenInfoFunc\u2019 are used, Connexion will prioritize the function method. Connexion expects to\nreceive the OAuth token in the <tt>Authorization</tt> header field in the\nformat described in <a href=\"https://tools.ietf.org/html/rfc6750\" rel=\"nofollow\">RFC 6750</a> section 2.1. This aspect\nrepresents a significant difference from the usual OAuth flow.</p>\n</div>\n<div id=\"dynamic-rendering-of-your-specification\">\n<h3>Dynamic Rendering of Your Specification</h3>\n<p>Connexion uses <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> to allow specification parameterization through the <tt>arguments</tt> parameter. You can define specification arguments for the application either globally (via the <tt>connexion.App</tt> constructor) or for each specific API (via the <tt>connexion.App#add_api</tt> method):</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">,</span>\n                    <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'global'</span><span class=\"p\">:</span> <span class=\"s1\">'global_value'</span><span class=\"p\">})</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'api_local'</span><span class=\"p\">:</span> <span class=\"s1\">'local_value'</span><span class=\"p\">})</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<p>When a value is provided both globally and on the API, the API value will take precedence.</p>\n</div>\n<div id=\"endpoint-routing-to-your-python-views\">\n<h3>Endpoint Routing to Your Python Views</h3>\n<p>Connexion uses the <tt>operationId</tt> from each <a href=\"https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#operation-object\" rel=\"nofollow\">Operation Object</a> to\nidentify which Python function should handle each URL.</p>\n<p><strong>Explicit Routing</strong>:</p>\n<pre><span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"nt\">/hello_world</span><span class=\"p\">:</span>\n    <span class=\"nt\">post</span><span class=\"p\">:</span>\n      <span class=\"nt\">operationId</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">myapp.api.hello_world</span>\n</pre>\n<p>If you provide this path in your specification POST requests to\n<tt><span class=\"pre\">http://MYHOST/hello_world</span></tt>, it will be handled by the function\n<tt>hello_world</tt> in the <tt>myapp.api</tt> module. Optionally, you can include\n<tt><span class=\"pre\">x-swagger-router-controller</span></tt> (or <tt><span class=\"pre\">x-openapi-router-controller</span></tt>) in your\noperation definition, making <tt>operationId</tt> relative:</p>\n<pre><span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"nt\">/hello_world</span><span class=\"p\">:</span>\n    <span class=\"nt\">post</span><span class=\"p\">:</span>\n      <span class=\"nt\">x-swagger-router-controller</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">myapp.api</span>\n      <span class=\"nt\">operationId</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">hello_world</span>\n</pre>\n<p>Keep in mind that Connexion follows how <a href=\"http://flask.pocoo.org/docs/1.0/quickstart/#http-methods\" rel=\"nofollow\">HTTP methods work in Flask</a> and therefore HEAD requests will be handled by the <tt>operationId</tt> specified under GET in the specification. If both methods are supported, <tt>connexion.request.method</tt> can be used to determine which request was made.</p>\n</div>\n<div id=\"automatic-routing\">\n<h3>Automatic Routing</h3>\n<p>To customize this behavior, Connexion can use alternative\n<tt>Resolvers</tt>\u2013for example, <tt>RestyResolver</tt>. The <tt>RestyResolver</tt>\nwill compose an <tt>operationId</tt> based on the path and HTTP method of\nthe endpoints in your specification:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">connexion.resolver</span> <span class=\"kn\">import</span> <span class=\"n\">RestyResolver</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'swagger.yaml'</span><span class=\"p\">,</span> <span class=\"n\">resolver</span><span class=\"o\">=</span><span class=\"n\">RestyResolver</span><span class=\"p\">(</span><span class=\"s1\">'api'</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"nt\">/</span><span class=\"p\">:</span>\n    <span class=\"nt\">get</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.get</span>\n  <span class=\"nt\">/foo</span><span class=\"p\">:</span>\n    <span class=\"nt\">get</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.search</span>\n    <span class=\"nt\">post</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.post</span>\n\n  <span class=\"s\">'/foo/{id}'</span><span class=\"p-Indicator\">:</span>\n    <span class=\"nt\">get</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.get</span>\n    <span class=\"nt\">put</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.put</span>\n    <span class=\"nt\">copy</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.copy</span>\n    <span class=\"nt\">delete</span><span class=\"p\">:</span>\n       <span class=\"c1\"># Implied operationId: api.foo.delete</span>\n</pre>\n<p><tt>RestyResolver</tt> will give precedence to any <tt>operationId</tt> encountered in the specification. It will also respect\n<tt><span class=\"pre\">x-router-controller</span></tt>. You can import and extend <tt>connexion.resolver.Resolver</tt> to implement your own <tt>operationId</tt>\n(and function) resolution algorithm.</p>\n</div>\n<div id=\"automatic-parameter-handling\">\n<h3>Automatic Parameter Handling</h3>\n<p>Connexion automatically maps the parameters defined in your endpoint specification to arguments of your Python views as named parameters, and, whenever possible, with value casting. Simply define the endpoint\u2019s parameters with the same names as your views arguments.</p>\n<p>As an example, say you have an endpoint specified as:</p>\n<pre><span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"nt\">/foo</span><span class=\"p\">:</span>\n    <span class=\"nt\">get</span><span class=\"p\">:</span>\n      <span class=\"nt\">operationId</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">api.foo_get</span>\n      <span class=\"nt\">parameters</span><span class=\"p\">:</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">message</span>\n          <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Some message.</span>\n          <span class=\"nt\">in</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">query</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">string</span>\n          <span class=\"nt\">required</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n<p>And the view function:</p>\n<pre><span class=\"c1\"># api.py file</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo_get</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'You send the message: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">),</span> <span class=\"mi\">200</span>\n</pre>\n<p>In this example, Connexion automatically recognizes that your view\nfunction expects an argument named <tt>message</tt> and assigns the value\nof the endpoint parameter <tt>message</tt> to your view function.</p>\n<div>\n<p>Note</p>\n<p>In the OpenAPI 3.x.x spec, the requestBody does not have a name.\nBy default it will be passed in as \u2018body\u2019. You can optionally\nprovide the x-body-name parameter in your requestBody schema\nto override the name of the parameter that will be passed to your\nhandler function.</p>\n</div>\n<div>\n<p>Warning</p>\n<p>When you define a parameter at your endpoint as <em>not</em> required, and\nthis argument does not have default value in your Python view, you will get\na \u201cmissing positional argument\u201d exception whenever you call this endpoint\nWITHOUT the parameter. Provide a default value for a named argument or use\n<tt>**kwargs</tt> dict.</p>\n</div>\n<div id=\"type-casting\">\n<h4>Type casting</h4>\n<p>Whenever possible, Connexion will try to parse your argument values and\ndo type casting to related Python native values. The current\navailable type castings are:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>OpenAPI Type</th>\n<th>Python Type</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>integer</td>\n<td>int</td>\n</tr>\n<tr><td>string</td>\n<td>str</td>\n</tr>\n<tr><td>number</td>\n<td>float</td>\n</tr>\n<tr><td>boolean</td>\n<td>bool</td>\n</tr>\n<tr><td>array</td>\n<td>list</td>\n</tr>\n<tr><td>null</td>\n<td>None</td>\n</tr>\n<tr><td>object</td>\n<td>dict</td>\n</tr>\n</tbody>\n</table>\n<p>If you use the <tt>array</tt> type In the Swagger definition, you can define the\n<tt>collectionFormat</tt> so that it won\u2019t be recognized. Connexion currently\nsupports collection formats \u201cpipes\u201d and \u201ccsv\u201d. The default format is \u201ccsv\u201d.</p>\n<p>Connexion is opinionated about how the URI is parsed for <tt>array</tt> types.\nThe default behavior for query parameters that have been defined multiple\ntimes is to use the right-most value. For example, if you provide a URI with\nthe the query string <tt><span class=\"pre\">?letters=a,b,c&amp;letters=d,e,f</span></tt>, connexion will set\n<tt>letters = ['d', 'e', 'f']</tt>.</p>\n<p>You can override this behavior by specifying the URI parser in the app or\napi options.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">connexion.decorators.uri_parsing</span> <span class=\"kn\">import</span> <span class=\"n\">Swagger2URIParser</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'uri_parsing_class'</span><span class=\"p\">:</span> <span class=\"n\">AlwaysMultiURIParser</span><span class=\"p\">}</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>You can implement your own URI parsing behavior by inheriting from\n<tt>connextion.decorators.uri_parsing.AbstractURIParser</tt>.</p>\n<p>There are a handful of URI parsers included with connection.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>OpenAPIURIParser\ndefault: OpenAPI 3.0</td>\n<td>This parser adheres to the OpenAPI 3.x.x spec, and uses the <tt>style</tt>\nparameter. Query parameters are parsed from left to right, so if a query\nparameter is defined twice, then the right-most definition will take\nprecedence. For example, if you provided a URI with the query string\n<tt><span class=\"pre\">?letters=a,b,c&amp;letters=d,e,f</span></tt>, and <tt>style: simple</tt>, then connexion\nwill set <tt>letters = ['d', 'e', 'f']</tt>. For additional information see\n<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#style-values\" rel=\"nofollow\">OpenAPI 3.0 Style Values</a>.</td>\n</tr>\n<tr><td>Swagger2URIParser\ndefault: OpenAPI 2.0</td>\n<td>This parser adheres to the Swagger 2.0 spec, and will only join together\nmultiple instance of the same query parameter if the <tt>collectionFormat</tt>\nis set to <tt>multi</tt>. Query parameters are parsed from left to right, so\nif a query parameter is defined twice, then the right-most definition\nwins. For example, if you provided a URI with the query string\n<tt><span class=\"pre\">?letters=a,b,c&amp;letters=d,e,f</span></tt>, and <tt>collectionFormat: csv</tt>, then\nconnexion will set <tt>letters = ['d', 'e', 'f']</tt></td>\n</tr>\n<tr><td>FirstValueURIParser</td>\n<td>This parser behaves like the Swagger2URIParser, except that it prefers\nthe first defined value. For example, if you provided a URI with the query\nstring <tt><span class=\"pre\">?letters=a,b,c&amp;letters=d,e,f</span></tt> and <tt>collectionFormat: csv</tt>\nhen connexion will set <tt>letters = ['a', 'b', 'c']</tt></td>\n</tr>\n<tr><td>AlwaysMultiURIParser</td>\n<td>This parser is backwards compatible with Connexion 1.x. It joins together\nmultiple instances of the same query parameter.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"parameter-validation\">\n<h4>Parameter validation</h4>\n<p>Connexion can apply strict parameter validation for query and form data\nparameters.  When this is enabled, requests that include parameters not defined\nin the swagger spec return a 400 error.  You can enable it when adding the API\nto your application:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_apy.yaml'</span><span class=\"p\">,</span> <span class=\"n\">strict_validation</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"api-versioning-and-basepath\">\n<h3>API Versioning and basePath</h3>\n<p>Setting a base path is useful for versioned APIs. An example of\na base path would be the <tt>1.0</tt> in <tt><span class=\"pre\">http://MYHOST/1.0/hello_world</span></tt>.</p>\n<p>If you are using OpenAPI 3.x.x, you set your base URL path in the\nservers block of the specification. You can either specify a full\nURL, or just a relative path.</p>\n<pre><span class=\"nt\">servers</span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">https://MYHOST/1.0</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">full url example</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/1.0</span>\n    <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">relative path example</span>\n\n<span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"l-Scalar-Plain\">...</span>\n</pre>\n<p>If you are using OpenAPI 2.0, you can define a <tt>basePath</tt> on the top level\nof your OpenAPI 2.0 specification.</p>\n<pre><span class=\"nt\">basePath</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/1.0</span>\n\n<span class=\"nt\">paths</span><span class=\"p\">:</span>\n  <span class=\"l-Scalar-Plain\">...</span>\n</pre>\n<p>If you don\u2019t want to include the base path in your specification, you\ncan provide it when adding the API to your application:</p>\n<pre><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">,</span> <span class=\"n\">base_path</span><span class=\"o\">=</span><span class=\"s1\">'/1.0'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"swagger-json\">\n<h3>Swagger JSON</h3>\n<p>Connexion makes the OpenAPI/Swagger specification in JSON format\navailable from either <tt>swagger.json</tt> (for OpenAPI 2.0) or\n<tt>openapi.json</tt> (for OpenAPI 3.x.x) at the base path of the API.\nFor example, if your base path was <tt>1.0</tt>, then your spec would be\navailable at <tt>/1.0/openapi.json</tt>.</p>\n<p>You can disable serving the spec JSON at the application level:</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"serve_spec\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'openapi/'</span><span class=\"p\">,</span>\n                    <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also disable it at the API level:</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"serve_spec\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">}</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'openapi/'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"https-support\">\n<h3>HTTPS Support</h3>\n<p>When specifying HTTPS as the scheme in the API YAML file, all the URIs\nin the served Swagger UI are HTTPS endpoints. The problem: The default\nserver that runs is a \u201cnormal\u201d HTTP server. This means that the\nSwagger UI cannot be used to play with the API. What is the correct\nway to start a HTTPS server when using Connexion?</p>\n<p>One way, <a href=\"http://flask.pocoo.org/snippets/111/\" rel=\"nofollow\">described by Flask</a>, looks like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">OpenSSL</span> <span class=\"kn\">import</span> <span class=\"n\">SSL</span>\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">SSL</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">SSL</span><span class=\"o\">.</span><span class=\"n\">SSLv23_METHOD</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">use_privatekey_file</span><span class=\"p\">(</span><span class=\"s1\">'yourserver.key'</span><span class=\"p\">)</span>\n<span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">use_certificate_file</span><span class=\"p\">(</span><span class=\"s1\">'yourserver.crt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'12344'</span><span class=\"p\">,</span>\n        <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"o\">/</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ssl_context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre>\n<p>However, Connexion doesn\u2019t provide an ssl_context parameter. This is\nbecause Flask doesn\u2019t, either\u2013but it uses <tt>**kwargs</tt> to send the\nparameters to the underlying <a href=\"http://werkzeug.pocoo.org/\" rel=\"nofollow\">werkzeug</a> server.</p>\n</div>\n<div id=\"the-swagger-ui-console\">\n<h3>The Swagger UI Console</h3>\n<p>The Swagger UI for an API is available through pip extras.\nYou can install it with <tt>pip install <span class=\"pre\">connexion[swagger-ui]</span></tt>.\nIt will be served up at <tt><span class=\"pre\">{base_path}/ui/</span></tt> where <tt>base_path</tt> is the\nbase path of the API.</p>\n<p>You can disable the Swagger UI at the application level:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'openapi/'</span><span class=\"p\">,</span>\n                    <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"swagger_ui\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also disable it at the API level:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'openapi/'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api</span><span class=\"p\">(</span><span class=\"s1\">'my_api.yaml'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"swagger_ui\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">})</span>\n</pre>\n<p>If necessary, you can explicitly specify the path to the directory with\nswagger-ui to not use the connexion[swagger-ui] distro.\nIn order to do this, you should specify the following option:</p>\n<pre><span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'swagger_path'</span><span class=\"p\">:</span> <span class=\"s1\">'/path/to/swagger_ui/'</span><span class=\"p\">}</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'openapi/'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n<p>If you wish to provide your own swagger-ui distro, note that connextion\nexpects a jinja2 file called <tt>swagger_ui/index.j2</tt> in order to load the\ncorrect <tt>swagger.json</tt> by default. Your <tt>index.j2</tt> file can use the\n<tt>openapi_spec_url</tt> jinja variable for this purpose:</p>\n<pre>const ui = SwaggerUIBundle({ url: \"{{ openapi_spec_url }}\"})\n</pre>\n<p>Additionally, if you wish to use swagger-ui-3.x.x, it is also provided by\ninstalling connexion[swagger-ui], and can be enabled like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">swagger_ui_bundle</span> <span class=\"kn\">import</span> <span class=\"n\">swagger_ui_3_path</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'swagger_path'</span><span class=\"p\">:</span> <span class=\"n\">swagger_ui_3_path</span><span class=\"p\">}</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"server-backend\">\n<h3>Server Backend</h3>\n<p>By default Connexion uses the <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> server. For asynchronous\napplications, you can also use <a href=\"http://www.tornadoweb.org/en/stable/\" rel=\"nofollow\">Tornado</a> as the HTTP server. To do\nthis, set your server to <tt>tornado</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">connexion</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'tornado'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<p>You can use the Flask WSGI app with any WSGI container, e.g. <a href=\"http://flask.pocoo.org/docs/latest/deploying/uwsgi/\" rel=\"nofollow\">using\nFlask with uWSGI</a> (this is common):</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">)</span>\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"c1\"># expose global WSGI application object</span>\n</pre>\n<p>You can use the <tt>aiohttp</tt> framework as server backend as well:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">connexion</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">connexion</span><span class=\"o\">.</span><span class=\"n\">AioHttpApp</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">specification_dir</span><span class=\"o\">=</span><span class=\"s1\">'swagger/'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8080</span><span class=\"p\">)</span>\n</pre>\n<div>\n<p>Note</p>\n<p>Also check aiohttp handler <a href=\"https://docs.aiohttp.org/en/stable/web.html#handler\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<p>Set up and run the installation code:</p>\n<pre>$ sudo pip3 install uwsgi\n$ uwsgi --http :8080 -w app -p <span class=\"m\">16</span>  <span class=\"c1\"># use 16 worker processes</span>\n</pre>\n<p>See the <a href=\"https://uwsgi-docs.readthedocs.org/\" rel=\"nofollow\">uWSGI documentation</a> for more information.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Additional information is available at <a href=\"http://connexion.readthedocs.org/en/latest/\" rel=\"nofollow\">Connexion\u2019s Documentation Page</a>.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<p>A full changelog is maintained on the <a href=\"https://github.com/zalando/connexion/releases\" rel=\"nofollow\">GitHub releases page</a>.</p>\n</div>\n<div id=\"contributing-to-connexion-todos\">\n<h2>Contributing to Connexion/TODOs</h2>\n<p>We welcome your ideas, issues, and pull requests. Just follow the\nusual/standard GitHub practices.</p>\n<p>Unless you explicitly state otherwise in advance, any non trivial\ncontribution intentionally submitted for inclusion in this project by you\nto the steward of this repository (Zalando SE, Berlin) shall be under the\nterms and conditions of Apache License 2.0 written below, without any\nadditional copyright information, terms or conditions.</p>\n<div id=\"todos\">\n<h3>TODOs</h3>\n<p>If you\u2019d like to become a more consistent contributor to Connexion, we\u2019d love your help working on\nthese we have a list of <a href=\"https://github.com/zalando/connexion/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22\" rel=\"nofollow\">issues where we are looking for contributions</a>.</p>\n</div>\n</div>\n<div id=\"thanks\">\n<h2>Thanks</h2>\n<p>We\u2019d like to thank all of Connexion\u2019s contributors for working on this\nproject, and to Swagger/OpenAPI for their support.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright 2015 Zalando SE</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a>.</p>\n<p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 4624226, "releases": {"2.1.0": [{"comment_text": "", "digests": {"md5": "34c0c514308d147177ef48a1ff23d88d", "sha256": "ee58e0dd8c91738f1887306d3d29024eebdb4a6ed1d8457dbb6e9f57e92070b3"}, "downloads": -1, "filename": "atman_connexion-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34c0c514308d147177ef48a1ff23d88d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70477, "upload_time": "2018-12-21T05:31:15", "upload_time_iso_8601": "2018-12-21T05:31:15.639897Z", "url": "https://files.pythonhosted.org/packages/1a/f5/7df83dc65ff610567ec783e272e60c01ca54a710b3c020184d34e9132434/atman_connexion-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e260f89504f170e8acaac089aa2f579a", "sha256": "2a95597fe3eba83f044d097874264b60122aa0a1e09d8f8715ba410bb6bd5030"}, "downloads": -1, "filename": "atman-connexion-2.1.0.tar.gz", "has_sig": false, "md5_digest": "e260f89504f170e8acaac089aa2f579a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67972, "upload_time": "2018-12-21T05:31:19", "upload_time_iso_8601": "2018-12-21T05:31:19.489062Z", "url": "https://files.pythonhosted.org/packages/79/50/f0591e6322ee026f1be0928c75f5f15bdc82d018f39104104459a0101a6b/atman-connexion-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "19091bfb406e9fe1b04162e2af2ca2b2", "sha256": "a4a85798c1a30fdf4189b374b8092590857ec365f36fb76022d147d3100dedfc"}, "downloads": -1, "filename": "atman_connexion-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19091bfb406e9fe1b04162e2af2ca2b2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70476, "upload_time": "2018-12-21T09:04:55", "upload_time_iso_8601": "2018-12-21T09:04:55.451522Z", "url": "https://files.pythonhosted.org/packages/17/fa/3422c31ba4bbe775a197e39d38e6adec2936e0f14c8c7949fce50b9108cb/atman_connexion-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf48ac2240fe24625f78c6a2d660a983", "sha256": "14c78ae62fa6ca86274dca37247b806ad7c5d6c3d4b2bae861f20eed93f1879a"}, "downloads": -1, "filename": "atman-connexion-2.1.1.tar.gz", "has_sig": false, "md5_digest": "bf48ac2240fe24625f78c6a2d660a983", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67976, "upload_time": "2018-12-21T09:04:57", "upload_time_iso_8601": "2018-12-21T09:04:57.824519Z", "url": "https://files.pythonhosted.org/packages/7b/24/01715ac93e9952cfa8d1b3d0942ce1e198119b0a852ce142f7046e5537af/atman-connexion-2.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19091bfb406e9fe1b04162e2af2ca2b2", "sha256": "a4a85798c1a30fdf4189b374b8092590857ec365f36fb76022d147d3100dedfc"}, "downloads": -1, "filename": "atman_connexion-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "19091bfb406e9fe1b04162e2af2ca2b2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 70476, "upload_time": "2018-12-21T09:04:55", "upload_time_iso_8601": "2018-12-21T09:04:55.451522Z", "url": "https://files.pythonhosted.org/packages/17/fa/3422c31ba4bbe775a197e39d38e6adec2936e0f14c8c7949fce50b9108cb/atman_connexion-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf48ac2240fe24625f78c6a2d660a983", "sha256": "14c78ae62fa6ca86274dca37247b806ad7c5d6c3d4b2bae861f20eed93f1879a"}, "downloads": -1, "filename": "atman-connexion-2.1.1.tar.gz", "has_sig": false, "md5_digest": "bf48ac2240fe24625f78c6a2d660a983", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67976, "upload_time": "2018-12-21T09:04:57", "upload_time_iso_8601": "2018-12-21T09:04:57.824519Z", "url": "https://files.pythonhosted.org/packages/7b/24/01715ac93e9952cfa8d1b3d0942ce1e198119b0a852ce142f7046e5537af/atman-connexion-2.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:34 2020"}