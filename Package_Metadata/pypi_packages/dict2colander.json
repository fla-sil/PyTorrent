{"info": {"author": "Peter Facka", "author_email": "pfacka@binaryparadise.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "dict2colander\n=============\n\n*Convert python dict (YAML, JSON) to colander schema.*\n\n`Colander <http://docs.pylonsproject.org/projects/colander/en/latest/>`_\nis library, which enables you to validate and convert YAML, JSON\nand HTML form data. Colander schema as it is could be defined only\nin Python declaratively for example like this:\n\n\n\n.. code-block:: python\n\n    import colander\n    \n    class Person(colander.MappingSchema):\n        name = colander.SchemaNode(colander.String())\n        age = colander.SchemaNode(colander.Int(),\n                                  validator=colander.Range(0, 200))\n    \n        @colander.instantiate()\n        class phones(colander.SequenceSchema):\n    \n            @colander.instantiate()\n            class phone(colander.MappingSchema):\n                location = colander.SchemaNode(colander.String(),\n                                     validator=colander.OneOf(['home', 'work']))\n                number = colander.SchemaNode(colander.String())\n\nWith dict2colander you can define the same colander schema in\ndictionary and convert it to colader.MappingSchema object.\n\nInstalation\n-----------\n\nYou can install dict2colander from\n`Python Package Index <https://pypi.python.org/pypi/dict2colander/0.1>`_\nlike this:\n\n\n\n.. code-block:: shell\n\n    pip install dict2colander\n\nUsage\n-----\n\n\n\n.. code-block:: python\n\n    from dict2colander import dict2colander\n    \n    schema_dict = {\n        'type': 'Mapping',\n        'name': 'person',\n        'subnodes': [\n            {'type': 'String', 'name': 'name'},\n    \n            {'type': 'Integer', 'name': 'age',\n             'validators':\n                {'Range': {'args': ('0', '200')}}},\n    \n            {'type': 'Sequence',\n             'name': 'phones',\n             'subnodes': [\n    \n                 {'type': 'Mapping', 'name': 'phone',\n                  'subnodes': [\n    \n                      {'type': 'String', 'name': 'location',\n                       'validators':\n                         {'OneOf': {'args': (['home', 'work'],)}}},\n    \n                      {'type': 'String', 'name': 'number'}\n    \n                  ]}]},\n        ]\n    }\n    \n    schema = dict2colander(schema_dict)\n    data = {\n             'name': 'keith',\n             'age': '20',\n             'friends':[('1', 'jim'),('2', 'bob'), ('3', 'joe'), ('4', 'fred')],\n             'phones':[{'location':'home', 'number':'555-1212'},\n                       {'location':'work', 'number':'555-8989'},],\n             }\n    \n    serialized_data = schema.deserialize(data)\n    print serialized_data\n\nDict2colander is intended to make possible to read colander schemas\nfrom YAML or JSON format. So here is schema from previous example\nwritten in YAML:\n\n\n\n.. code-block:: yaml\n\n    ---\n    name: person\n    type: Mapping\n    \n    subnodes:\n        - name: name\n          type: String\n    \n        - name: age\n          type: Integer\n          validators:\n            Range:\n                args: ['0', '200']\n    \n        - name: phones\n          type: Sequence\n          subnodes: \n            - name: phone\n              type: Mapping\n              subnodes:\n                - name: location\n                  type: String\n                  validators:\n                    OneOf:\n                        args: [[home, work]]\n    \n                - name: number\n                  type: String\n\nNote that *Range* validator has arguments defined as *Strings* not\n*Integers* although that field *age* is of type *Integer*.\n\nHere are data to deserialize in YAML format from first example:\n\n\n\n.. code-block:: yaml\n\n    ---\n    name: keith\n    age: 20\n    friends:\n        - [1, jim]\n        - [2, bob]\n        - [3, joe]\n        - [4, fred]\n    \n    phones:\n        - location: home\n          number: 555-1212\n    \n        - location: work\n          number: 555-8989\n\nHere is example how YAML data are deserialized with schema defined\nin YAML document.\n\n\n\n.. code-block:: python\n\n    import yaml\n    import dict2colander\n    \n    def deserialize(yaml_doc, yaml_schema):\n        mapping_schema = dict2colander.dict2colander(yaml_schema)\n        return mapping_schema.deserialize(yaml_doc)\n    \n    f = open('doc.yaml')\n    doc = yaml.load(f)\n    f.close()\n    \n    f = open('schema.yaml')\n    schema = yaml.load(f)\n    f.close()\n    \n    dict_doc = deserialize(doc, schema)\n    print dict_doc", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/pfacka/dict2colander", "keywords": "schema validation dictionary Colander YAML JSON", "license": "MIT Licence (http://opensource.org/licenses/MIT)", "maintainer": null, "maintainer_email": null, "name": "dict2colander", "package_url": "https://pypi.org/project/dict2colander/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dict2colander/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/pfacka/dict2colander"}, "release_url": "https://pypi.org/project/dict2colander/0.2/", "requires_dist": null, "requires_python": null, "summary": "Dictionary to Colander schema conversion library", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Convert python dict (YAML, JSON) to colander schema.</em></p>\n<p><a href=\"http://docs.pylonsproject.org/projects/colander/en/latest/\" rel=\"nofollow\">Colander</a>\nis library, which enables you to validate and convert YAML, JSON\nand HTML form data. Colander schema as it is could be defined only\nin Python declaratively for example like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">colander</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">MappingSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">SchemaNode</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">SchemaNode</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">Int</span><span class=\"p\">(),</span>\n                              <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@colander</span><span class=\"o\">.</span><span class=\"n\">instantiate</span><span class=\"p\">()</span>\n    <span class=\"k\">class</span> <span class=\"nc\">phones</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">SequenceSchema</span><span class=\"p\">):</span>\n\n        <span class=\"nd\">@colander</span><span class=\"o\">.</span><span class=\"n\">instantiate</span><span class=\"p\">()</span>\n        <span class=\"k\">class</span> <span class=\"nc\">phone</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">MappingSchema</span><span class=\"p\">):</span>\n            <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">SchemaNode</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">(),</span>\n                                 <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">OneOf</span><span class=\"p\">([</span><span class=\"s1\">'home'</span><span class=\"p\">,</span> <span class=\"s1\">'work'</span><span class=\"p\">]))</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">SchemaNode</span><span class=\"p\">(</span><span class=\"n\">colander</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">())</span>\n</pre>\n<p>With dict2colander you can define the same colander schema in\ndictionary and convert it to colader.MappingSchema object.</p>\n<div id=\"instalation\">\n<h2>Instalation</h2>\n<p>You can install dict2colander from\n<a href=\"https://pypi.python.org/pypi/dict2colander/0.1\" rel=\"nofollow\">Python Package Index</a>\nlike this:</p>\n<pre>pip install dict2colander\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dict2colander</span> <span class=\"kn\">import</span> <span class=\"n\">dict2colander</span>\n\n<span class=\"n\">schema_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Mapping'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'person'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'subnodes'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'name'</span><span class=\"p\">},</span>\n\n        <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Integer'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'validators'</span><span class=\"p\">:</span>\n            <span class=\"p\">{</span><span class=\"s1\">'Range'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'200'</span><span class=\"p\">)}}},</span>\n\n        <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Sequence'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'phones'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'subnodes'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\n             <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'Mapping'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'phone'</span><span class=\"p\">,</span>\n              <span class=\"s1\">'subnodes'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\n                  <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'location'</span><span class=\"p\">,</span>\n                   <span class=\"s1\">'validators'</span><span class=\"p\">:</span>\n                     <span class=\"p\">{</span><span class=\"s1\">'OneOf'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"p\">([</span><span class=\"s1\">'home'</span><span class=\"p\">,</span> <span class=\"s1\">'work'</span><span class=\"p\">],)}}},</span>\n\n                  <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'String'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">}</span>\n\n              <span class=\"p\">]}]},</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">dict2colander</span><span class=\"p\">(</span><span class=\"n\">schema_dict</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n         <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'keith'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"s1\">'20'</span><span class=\"p\">,</span>\n         <span class=\"s1\">'friends'</span><span class=\"p\">:[(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'jim'</span><span class=\"p\">),(</span><span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'bob'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'3'</span><span class=\"p\">,</span> <span class=\"s1\">'joe'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"s1\">'fred'</span><span class=\"p\">)],</span>\n         <span class=\"s1\">'phones'</span><span class=\"p\">:[{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span><span class=\"s1\">'home'</span><span class=\"p\">,</span> <span class=\"s1\">'number'</span><span class=\"p\">:</span><span class=\"s1\">'555-1212'</span><span class=\"p\">},</span>\n                   <span class=\"p\">{</span><span class=\"s1\">'location'</span><span class=\"p\">:</span><span class=\"s1\">'work'</span><span class=\"p\">,</span> <span class=\"s1\">'number'</span><span class=\"p\">:</span><span class=\"s1\">'555-8989'</span><span class=\"p\">},],</span>\n         <span class=\"p\">}</span>\n\n<span class=\"n\">serialized_data</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">serialized_data</span>\n</pre>\n<p>Dict2colander is intended to make possible to read colander schemas\nfrom YAML or JSON format. So here is schema from previous example\nwritten in YAML:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">person</span>\n<span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Mapping</span>\n\n<span class=\"nt\">subnodes</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">name</span>\n      <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">String</span>\n\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">age</span>\n      <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Integer</span>\n      <span class=\"nt\">validators</span><span class=\"p\">:</span>\n        <span class=\"nt\">Range</span><span class=\"p\">:</span>\n            <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"s\">'0'</span><span class=\"p-Indicator\">,</span> <span class=\"s\">'200'</span><span class=\"p-Indicator\">]</span>\n\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">phones</span>\n      <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Sequence</span>\n      <span class=\"nt\">subnodes</span><span class=\"p\">:</span>\n        <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">phone</span>\n          <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">Mapping</span>\n          <span class=\"nt\">subnodes</span><span class=\"p\">:</span>\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">location</span>\n              <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">String</span>\n              <span class=\"nt\">validators</span><span class=\"p\">:</span>\n                <span class=\"nt\">OneOf</span><span class=\"p\">:</span>\n                    <span class=\"nt\">args</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[[</span><span class=\"nv\">home</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">work</span><span class=\"p-Indicator\">]]</span>\n\n            <span class=\"p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">number</span>\n              <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">String</span>\n</pre>\n<p>Note that <em>Range</em> validator has arguments defined as <em>Strings</em> not\n<em>Integers</em> although that field <em>age</em> is of type <em>Integer</em>.</p>\n<p>Here are data to deserialize in YAML format from first example:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">keith</span>\n<span class=\"nt\">age</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">20</span>\n<span class=\"nt\">friends</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">1</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">jim</span><span class=\"p-Indicator\">]</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">2</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">bob</span><span class=\"p-Indicator\">]</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">3</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">joe</span><span class=\"p-Indicator\">]</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">4</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">fred</span><span class=\"p-Indicator\">]</span>\n\n<span class=\"nt\">phones</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">home</span>\n      <span class=\"nt\">number</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">555-1212</span>\n\n    <span class=\"p-Indicator\">-</span> <span class=\"nt\">location</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">work</span>\n      <span class=\"nt\">number</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">555-8989</span>\n</pre>\n<p>Here is example how YAML data are deserialized with schema defined\nin YAML document.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dict2colander</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"n\">yaml_doc</span><span class=\"p\">,</span> <span class=\"n\">yaml_schema</span><span class=\"p\">):</span>\n    <span class=\"n\">mapping_schema</span> <span class=\"o\">=</span> <span class=\"n\">dict2colander</span><span class=\"o\">.</span><span class=\"n\">dict2colander</span><span class=\"p\">(</span><span class=\"n\">yaml_schema</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mapping_schema</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">yaml_doc</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'doc.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'schema.yaml'</span><span class=\"p\">)</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"n\">dict_doc</span> <span class=\"o\">=</span> <span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span> <span class=\"n\">dict_doc</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1007562, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "840c433736f54881ef8416af86e97af9", "sha256": "b7aca697c3f6f0bc8dc718f6a6cc883e3d350b2aada3df581916b2168e484f8f"}, "downloads": -1, "filename": "dict2colander-0.1.0-py2.7.egg", "has_sig": false, "md5_digest": "840c433736f54881ef8416af86e97af9", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 11662, "upload_time": "2013-04-22T16:06:05", "upload_time_iso_8601": "2013-04-22T16:06:05.393490Z", "url": "https://files.pythonhosted.org/packages/24/d0/69d7a6bce43a38e2a90bcc2a9ed8dcecf1272d65490a8eac96bba0e0926b/dict2colander-0.1.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "33e5f9c5ba5827b80c2bff22291908b9", "sha256": "260bea4496df0118a5f87abbaaad04db45d87bc9b4ec22d4452165e7f7c49c67"}, "downloads": -1, "filename": "dict2colander-0.1.tar.gz", "has_sig": false, "md5_digest": "33e5f9c5ba5827b80c2bff22291908b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5167, "upload_time": "2013-04-22T16:05:40", "upload_time_iso_8601": "2013-04-22T16:05:40.618316Z", "url": "https://files.pythonhosted.org/packages/fb/62/87b147d5eebb1bc6020f16362788b798f7c74be88ebcd2656234143e607e/dict2colander-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "1ae1bfcc42d706932e40992b9292a4de", "sha256": "6f668d60896991dcd271465b755f00ffd6f87f81e0d4d054be62a16c086978c7"}, "downloads": -1, "filename": "dict2colander-0.2.tar.gz", "has_sig": false, "md5_digest": "1ae1bfcc42d706932e40992b9292a4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7398, "upload_time": "2014-02-21T14:49:38", "upload_time_iso_8601": "2014-02-21T14:49:38.224502Z", "url": "https://files.pythonhosted.org/packages/aa/7e/5ed2ba3dc2f06457b76d4bc8c93559179472bf87e6982f9a9e5cea30e84e/dict2colander-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1ae1bfcc42d706932e40992b9292a4de", "sha256": "6f668d60896991dcd271465b755f00ffd6f87f81e0d4d054be62a16c086978c7"}, "downloads": -1, "filename": "dict2colander-0.2.tar.gz", "has_sig": false, "md5_digest": "1ae1bfcc42d706932e40992b9292a4de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7398, "upload_time": "2014-02-21T14:49:38", "upload_time_iso_8601": "2014-02-21T14:49:38.224502Z", "url": "https://files.pythonhosted.org/packages/aa/7e/5ed2ba3dc2f06457b76d4bc8c93559179472bf87e6982f9a9e5cea30e84e/dict2colander-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:34 2020"}