{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "## MDXpy\n\nA simple, yet elegant MDX library for TM1\n\n## Usage\n\nCreate MDX queries programmatically with the `Member`, `MdxTuple`, `MdxHierarchySet`, `MdxBuilder` classes.\n\nBenefits of using MDXpy over hacking raw MDX queries in your code\n- Faster to write\n- Requires less MDX knowledge\n- Eliminates syntax errors (e.g. forget `}`, `]`, `)` in a query) forever\n- Makes code more robust and easier to refactor\n- Escaping of `]` in object names is taken care of \n\n### Member\n\n`Member` is used in `MdxTuple` and `MdxHierarchySet`. \ncreate a `Member` with the static `Member.of(*args: str)` method.\n\n``` python\n>>> member = Member.of(\"Product\", \"Product1\")\n>>> print(member.unique_name)\n[PRODUCT].[PRODUCT].[PRODUCT1]\n\n>>> member = Member.of(\"Region\", \"ByGeography\", \"UK\")\n>>> print(member.unique_name)\n[REGION].[BYGEOGRAPHY].[UK]\n```\n\n### MdxTuple\n\nCreate a `MdxTuple` with the static `of(*args: Member)` method. The MDX expression of the tuple is generated with the `to_mdx` method.\n\n``` python\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"US\"))\n\n>>> print(mdx_tuple.to_mdx())\n([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[US])\n\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"), Member.of(\"Region\", \"ByGeography\", \"North America\"))\n\n>>> print(mdx_tuple.to_mdx())\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[North America])\n\n```     \n\nyou can add a `Member` to a `MdxTuple`\n\n``` python\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"))\n\n>>> mdx_tuple.add_member(Member.of(\"Region\", \"ByGeography\", \"North America\"))\n\n>>> print(mdx_tuple.to_mdx())\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[NORTHAMERICA])\n```\n\n### MdxHierarchySet\n\n`MdxHierarchySet` is created with any of the static methods on the `MdxHierarchySet` class. The `MDX` expression of the set is generated with the `to_mdx` method.\n\n``` python\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Product\")\n>>> print(mdx_set.to_mdx())\n{TM1SUBSETALL([Product].[Product])}\n\n>>> mdx_set = MdxHierarchySet.tm1_subset_to_set(\"Region\", \"By Geography\", \"Default\")\n>>> print(mdx_set.to_mdx())\n{TM1SUBSETTOSET([REGION].[BYGEOGRAPHY],'Default')}\n\n>>> mdx_set = MdxHierarchySet.all_leaves(\"Region\")\n>>> print(mdx_set.to_mdx())\n{TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)}\n\n>>> mdx_set = MdxHierarchySet.members([Member.of(\"Region\", \"US\"), Member.of(\"Product\", \"Product1\")])\n>>> print(mdx_set.to_mdx())\n{[REGION].[REGION].[US],[PRODUCT].[PRODUCT].[PRODUCT1]}\n```\n\nFunctions on `MdxHierarchySet` can be concatenated to arbitrary length in a functional style:\n\n``` python\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Region\").filter_by_level(0).filter_by_pattern(\"I*\").tm1_sort()\n>>> print(mdx_set.to_mdx())\n{TM1SORT({TM1FILTERBYPATTERN({TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)},'I*')},ASC)}\n```\n\n### MdxBuilder\n\nThe `MdxBuilder` is used to build MDX queries. `MdxHierarchySet` or `MdxTuple` are placed on the axes. Zero suppression can be switched on or off per axis. The actual `MDX` expression is generated with the `to_mdx` method. \n\n``` python\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.all_leaves(\"Product\"))\n>>> print(query.to_mdx())\nSELECT {TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 0 FROM [CUBE] \n\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\n>>> print(query.to_mdx())\nSELECT {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0 FROM [CUBE] \n\n>>> query =  MdxBuilder.from_cube(\"Cube\").add_member_tuple_to_axis(0, Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"EMEA\"))\n>>> print(query.to_mdx())\nSELECT {([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[EMEA])} ON 0 FROM [CUBE] \n\n>>> query = MdxBuilder.from_cube(\"Cube\").columns_non_empty().add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\n>>> print(query.to_mdx())\nSELECT NON EMPTY {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0 FROM [CUBE]\n```\n\nMDX queries can have any number of axes. Axis 0 _(=columns)_ must be defined.\n\n``` python\n>>> mdx = MdxBuilder.from_cube(\"Cube\") \\\n    .add_hierarchy_set_to_axis(0, MdxHierarchySet.member(Member.of(\"Region\", \"US\"))) \\\n    .add_hierarchy_set_to_axis(1, MdxHierarchySet.all_leaves(\"Product\")) \\\n    .add_hierarchy_set_to_axis(2, MdxHierarchySet.member(Member.of(\"Version\", \"Actual\"))) \\\n    .add_hierarchy_set_to_axis(3, MdxHierarchySet.tm1_subset_to_set(\"Time\", \"Time\", \"2020-Q1\")) \\\n    .to_mdx()\n\n>>> print(mdx)\nSELECT {[REGION].[REGION].[US]} ON 0,{TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 1,{[VERSION].[VERSION].[ACTUAL]} ON 2,{TM1SUBSETTOSET([TIME].[TIME],'2020-Q1')} ON 3 FROM [CUBE] \n```\n\nTo see all samples checkout the `test.py` file\n\n## Supported MDX Functions\n\n- TM1SUBSETALL\n- MEMBERS\n- TM1SUBSETTOSET\n- DEFAULTMEMBER\n- PARENT\n- FIRSTCHILD\n- LASTCHILD\n- CHILDREN\n- ANCESTORS\n- ANCESTOR\n- DRILLDOWNLEVEL\n- FILTER\n- TM1FILTERBYPATTERN\n- TM1FILTERBYLEVEL\n- TM1SORT\n- HEAD\n- TAIL\n- SUBSET\n- TOPCOUNT\n- BOTTOMCOUNT\n- UNION\n- INTERSECT\n- EXCEPT\n- ORDER\n\n## Tests\n\nAll tests in `test.py`\n\n## Contribution\n\nContribution is welcome. If you find a bug or feel like you can contribute please fork the repository, update the code and then create a pull request so we can merge in the changes.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cubewise-code/mdxpy", "keywords": "MDX,TM1,IBM Cognos TM1,Planning Analytics,PA,Cognos", "license": "MIT-LICENSE", "maintainer": "Marius Wirtz", "maintainer_email": "MWirtz@cubewise.com", "name": "mdxpy", "package_url": "https://pypi.org/project/mdxpy/", "platform": "any", "project_url": "https://pypi.org/project/mdxpy/", "project_urls": {"Homepage": "https://github.com/cubewise-code/mdxpy"}, "release_url": "https://pypi.org/project/mdxpy/0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A simple, yet elegant MDX library for TM1", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>MDXpy</h2>\n<p>A simple, yet elegant MDX library for TM1</p>\n<h2>Usage</h2>\n<p>Create MDX queries programmatically with the <code>Member</code>, <code>MdxTuple</code>, <code>MdxHierarchySet</code>, <code>MdxBuilder</code> classes.</p>\n<p>Benefits of using MDXpy over hacking raw MDX queries in your code</p>\n<ul>\n<li>Faster to write</li>\n<li>Requires less MDX knowledge</li>\n<li>Eliminates syntax errors (e.g. forget <code>}</code>, <code>]</code>, <code>)</code> in a query) forever</li>\n<li>Makes code more robust and easier to refactor</li>\n<li>Escaping of <code>]</code> in object names is taken care of</li>\n</ul>\n<h3>Member</h3>\n<p><code>Member</code> is used in <code>MdxTuple</code> and <code>MdxHierarchySet</code>.\ncreate a <code>Member</code> with the static <code>Member.of(*args: str)</code> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">member</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">unique_name</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">member</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ByGeography\"</span><span class=\"p\">,</span> <span class=\"s2\">\"UK\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">unique_name</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYGEOGRAPHY</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">UK</span><span class=\"p\">]</span>\n</pre>\n<h3>MdxTuple</h3>\n<p>Create a <code>MdxTuple</code> with the static <code>of(*args: Member)</code> method. The MDX expression of the tuple is generated with the <code>to_mdx</code> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_tuple</span> <span class=\"o\">=</span> <span class=\"n\">MdxTuple</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">),</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"US\"</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_tuple</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">],[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">US</span><span class=\"p\">])</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_tuple</span> <span class=\"o\">=</span> <span class=\"n\">MdxTuple</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ByType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">),</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ByGeography\"</span><span class=\"p\">,</span> <span class=\"s2\">\"North America\"</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_tuple</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYTYPE</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">],[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYGEOGRAPHY</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">North</span> <span class=\"n\">America</span><span class=\"p\">])</span>\n</pre>\n<p>you can add a <code>Member</code> to a <code>MdxTuple</code></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_tuple</span> <span class=\"o\">=</span> <span class=\"n\">MdxTuple</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ByType\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_tuple</span><span class=\"o\">.</span><span class=\"n\">add_member</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"ByGeography\"</span><span class=\"p\">,</span> <span class=\"s2\">\"North America\"</span><span class=\"p\">))</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_tuple</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYTYPE</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">],[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYGEOGRAPHY</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">NORTHAMERICA</span><span class=\"p\">])</span>\n</pre>\n<h3>MdxHierarchySet</h3>\n<p><code>MdxHierarchySet</code> is created with any of the static methods on the <code>MdxHierarchySet</code> class. The <code>MDX</code> expression of the set is generated with the <code>to_mdx</code> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_set</span> <span class=\"o\">=</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">tm1_subset_all</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_set</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">{</span><span class=\"n\">TM1SUBSETALL</span><span class=\"p\">([</span><span class=\"n\">Product</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">Product</span><span class=\"p\">])}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_set</span> <span class=\"o\">=</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">tm1_subset_to_set</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"By Geography\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Default\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_set</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">{</span><span class=\"n\">TM1SUBSETTOSET</span><span class=\"p\">([</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">BYGEOGRAPHY</span><span class=\"p\">],</span><span class=\"s1\">'Default'</span><span class=\"p\">)}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_set</span> <span class=\"o\">=</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">all_leaves</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_set</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">{</span><span class=\"n\">TM1FILTERBYLEVEL</span><span class=\"p\">({</span><span class=\"n\">TM1SUBSETALL</span><span class=\"p\">([</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">])},</span><span class=\"mi\">0</span><span class=\"p\">)}</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_set</span> <span class=\"o\">=</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"p\">([</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"US\"</span><span class=\"p\">),</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_set</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">{[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">US</span><span class=\"p\">],[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">]}</span>\n</pre>\n<p>Functions on <code>MdxHierarchySet</code> can be concatenated to arbitrary length in a functional style:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx_set</span> <span class=\"o\">=</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">tm1_subset_all</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by_level</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter_by_pattern</span><span class=\"p\">(</span><span class=\"s2\">\"I*\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tm1_sort</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx_set</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"p\">{</span><span class=\"n\">TM1SORT</span><span class=\"p\">({</span><span class=\"n\">TM1FILTERBYPATTERN</span><span class=\"p\">({</span><span class=\"n\">TM1FILTERBYLEVEL</span><span class=\"p\">({</span><span class=\"n\">TM1SUBSETALL</span><span class=\"p\">([</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">])},</span><span class=\"mi\">0</span><span class=\"p\">)},</span><span class=\"s1\">'I*'</span><span class=\"p\">)},</span><span class=\"n\">ASC</span><span class=\"p\">)}</span>\n</pre>\n<h3>MdxBuilder</h3>\n<p>The <code>MdxBuilder</code> is used to build MDX queries. <code>MdxHierarchySet</code> or <code>MdxTuple</code> are placed on the axes. Zero suppression can be switched on or off per axis. The actual <code>MDX</code> expression is generated with the <code>to_mdx</code> method.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MdxBuilder</span><span class=\"o\">.</span><span class=\"n\">from_cube</span><span class=\"p\">(</span><span class=\"s2\">\"Cube\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_column_axis</span><span class=\"p\">(</span><span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">all_leaves</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"n\">SELECT</span> <span class=\"p\">{</span><span class=\"n\">TM1FILTERBYLEVEL</span><span class=\"p\">({</span><span class=\"n\">TM1SUBSETALL</span><span class=\"p\">([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">])},</span><span class=\"mi\">0</span><span class=\"p\">)}</span> <span class=\"n\">ON</span> <span class=\"mi\">0</span> <span class=\"n\">FROM</span> <span class=\"p\">[</span><span class=\"n\">CUBE</span><span class=\"p\">]</span> \n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MdxBuilder</span><span class=\"o\">.</span><span class=\"n\">from_cube</span><span class=\"p\">(</span><span class=\"s2\">\"Cube\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_column_axis</span><span class=\"p\">(</span><span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"n\">SELECT</span> <span class=\"p\">{[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">]}</span> <span class=\"n\">ON</span> <span class=\"mi\">0</span> <span class=\"n\">FROM</span> <span class=\"p\">[</span><span class=\"n\">CUBE</span><span class=\"p\">]</span> \n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span> <span class=\"o\">=</span>  <span class=\"n\">MdxBuilder</span><span class=\"o\">.</span><span class=\"n\">from_cube</span><span class=\"p\">(</span><span class=\"s2\">\"Cube\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">add_member_tuple_to_axis</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">),</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"EMEA\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"n\">SELECT</span> <span class=\"p\">{([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">],[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">EMEA</span><span class=\"p\">])}</span> <span class=\"n\">ON</span> <span class=\"mi\">0</span> <span class=\"n\">FROM</span> <span class=\"p\">[</span><span class=\"n\">CUBE</span><span class=\"p\">]</span> \n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">MdxBuilder</span><span class=\"o\">.</span><span class=\"n\">from_cube</span><span class=\"p\">(</span><span class=\"s2\">\"Cube\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">columns_non_empty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_column_axis</span><span class=\"p\">(</span><span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Product1\"</span><span class=\"p\">)))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">())</span>\n<span class=\"n\">SELECT</span> <span class=\"n\">NON</span> <span class=\"n\">EMPTY</span> <span class=\"p\">{[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT1</span><span class=\"p\">]}</span> <span class=\"n\">ON</span> <span class=\"mi\">0</span> <span class=\"n\">FROM</span> <span class=\"p\">[</span><span class=\"n\">CUBE</span><span class=\"p\">]</span>\n</pre>\n<p>MDX queries can have any number of axes. Axis 0 <em>(=columns)</em> must be defined.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mdx</span> <span class=\"o\">=</span> <span class=\"n\">MdxBuilder</span><span class=\"o\">.</span><span class=\"n\">from_cube</span><span class=\"p\">(</span><span class=\"s2\">\"Cube\"</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_axis</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Region\"</span><span class=\"p\">,</span> <span class=\"s2\">\"US\"</span><span class=\"p\">)))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_axis</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">all_leaves</span><span class=\"p\">(</span><span class=\"s2\">\"Product\"</span><span class=\"p\">))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_axis</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">member</span><span class=\"p\">(</span><span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"p\">(</span><span class=\"s2\">\"Version\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Actual\"</span><span class=\"p\">)))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">add_hierarchy_set_to_axis</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">MdxHierarchySet</span><span class=\"o\">.</span><span class=\"n\">tm1_subset_to_set</span><span class=\"p\">(</span><span class=\"s2\">\"Time\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Time\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2020-Q1\"</span><span class=\"p\">))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">to_mdx</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mdx</span><span class=\"p\">)</span>\n<span class=\"n\">SELECT</span> <span class=\"p\">{[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">REGION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">US</span><span class=\"p\">]}</span> <span class=\"n\">ON</span> <span class=\"mi\">0</span><span class=\"p\">,{</span><span class=\"n\">TM1FILTERBYLEVEL</span><span class=\"p\">({</span><span class=\"n\">TM1SUBSETALL</span><span class=\"p\">([</span><span class=\"n\">PRODUCT</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">PRODUCT</span><span class=\"p\">])},</span><span class=\"mi\">0</span><span class=\"p\">)}</span> <span class=\"n\">ON</span> <span class=\"mi\">1</span><span class=\"p\">,{[</span><span class=\"n\">VERSION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">VERSION</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">ACTUAL</span><span class=\"p\">]}</span> <span class=\"n\">ON</span> <span class=\"mi\">2</span><span class=\"p\">,{</span><span class=\"n\">TM1SUBSETTOSET</span><span class=\"p\">([</span><span class=\"n\">TIME</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"p\">[</span><span class=\"n\">TIME</span><span class=\"p\">],</span><span class=\"s1\">'2020-Q1'</span><span class=\"p\">)}</span> <span class=\"n\">ON</span> <span class=\"mi\">3</span> <span class=\"n\">FROM</span> <span class=\"p\">[</span><span class=\"n\">CUBE</span><span class=\"p\">]</span> \n</pre>\n<p>To see all samples checkout the <code>test.py</code> file</p>\n<h2>Supported MDX Functions</h2>\n<ul>\n<li>TM1SUBSETALL</li>\n<li>MEMBERS</li>\n<li>TM1SUBSETTOSET</li>\n<li>DEFAULTMEMBER</li>\n<li>PARENT</li>\n<li>FIRSTCHILD</li>\n<li>LASTCHILD</li>\n<li>CHILDREN</li>\n<li>ANCESTORS</li>\n<li>ANCESTOR</li>\n<li>DRILLDOWNLEVEL</li>\n<li>FILTER</li>\n<li>TM1FILTERBYPATTERN</li>\n<li>TM1FILTERBYLEVEL</li>\n<li>TM1SORT</li>\n<li>HEAD</li>\n<li>TAIL</li>\n<li>SUBSET</li>\n<li>TOPCOUNT</li>\n<li>BOTTOMCOUNT</li>\n<li>UNION</li>\n<li>INTERSECT</li>\n<li>EXCEPT</li>\n<li>ORDER</li>\n</ul>\n<h2>Tests</h2>\n<p>All tests in <code>test.py</code></p>\n<h2>Contribution</h2>\n<p>Contribution is welcome. If you find a bug or feel like you can contribute please fork the repository, update the code and then create a pull request so we can merge in the changes.</p>\n\n          </div>"}, "last_serial": 7101228, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b6942678dacec240daeb34b405345592", "sha256": "d556512450c9fdca83c3af78a5800b80887c4af0edacf444d2c657e66a77087d"}, "downloads": -1, "filename": "mdxpy-0.1.tar.gz", "has_sig": false, "md5_digest": "b6942678dacec240daeb34b405345592", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11356, "upload_time": "2020-04-25T20:53:40", "upload_time_iso_8601": "2020-04-25T20:53:40.646452Z", "url": "https://files.pythonhosted.org/packages/dd/51/c4800e139a38a7bb5ebbf326c9bdc601e1461edfa9e3a43448dc8a484bab/mdxpy-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6942678dacec240daeb34b405345592", "sha256": "d556512450c9fdca83c3af78a5800b80887c4af0edacf444d2c657e66a77087d"}, "downloads": -1, "filename": "mdxpy-0.1.tar.gz", "has_sig": false, "md5_digest": "b6942678dacec240daeb34b405345592", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11356, "upload_time": "2020-04-25T20:53:40", "upload_time_iso_8601": "2020-04-25T20:53:40.646452Z", "url": "https://files.pythonhosted.org/packages/dd/51/c4800e139a38a7bb5ebbf326c9bdc601e1461edfa9e3a43448dc8a484bab/mdxpy-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:44 2020"}