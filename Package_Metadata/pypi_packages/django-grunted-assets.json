{"info": {"author": "Tino de Bruijn", "author_email": "tinodb@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "=====================\ndjango-grunted-assets\n=====================\n\nGoal\n====\n\n- Have css and js compressed and cache busted in production\n- Have livereload work with css injection in development\n- Have livereload work with coffee-script files and html templates\n- Have node serve our staticfiles in development as it is way faster than\n  django's runserver\n- Give the flexibility that compressor provides, linking arbitrary files in certain templates and locations\n\nWhere django-compressor falls short\n===================================\n\n- Slow compile and reload\n- No css injection with livereload\n- Not the tools that grunt provides (autoprefixer, uglify, etc)\n- Inlining assets\n\nHow it works\n============\n\n1. Put your static where you normally do, e.g. in a top level 'static' or\n   'assets' dir, or in the 'static' dir in your app.\n2. Configure the paths in your gruntfile.\n3. Add ``{% load grunted_assets %}`` to your (base) template and link the\n   assets you want to load with: ``{% link_asset 'script.js' %}``\n4. Run grunt (see below).\n5. Run ``django-admin.py collectstatic``\n\nThe ``link_asset`` template tag (or the ``inline_asset`` tag), searches for the\nfiles in either ``.tmp`` (development) or ``dist`` (production) within\n``STATIC_ROOT``.\n\nThe argument you pass to ``link_asset`` of ``inline_asset`` is treated as a regex. A\nsimple ``main.css`` therefore works, but using ``.*main\\.js`` for example, you can\nalso match files processed with something like\n``grunt-rev<https://www.npmjs.com/package/grunt-rev>``_.\n\nDevelopment\n-----------\n\nIn development (``grunt`` or ``grunt develop``), grunt compiles sass and coffee-\nscript to a ``.tmp`` dir inside 'static'. These files get served by node. No\ncache busting here.\n\nAll static will be served by ``connect`` on ``localhost:8001``, so set\n``STATIC_URL='http://localhost:8001``\n\nProduction\n----------\n\nRun ``grunt dist`` and check the ``dist`` folder into source control. This will\nconcat, minify etc. all your js and css into 'main.css' and 'main.js' as you\nspecify in your gruntfile.\n\nOn the server run ``django-admin.py collectstatic`` to have all static files\ncollected to the proper place.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tino/django-grunted-assets", "keywords": null, "license": "See LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "django-grunted-assets", "package_url": "https://pypi.org/project/django-grunted-assets/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-grunted-assets/", "project_urls": {"Homepage": "https://github.com/tino/django-grunted-assets"}, "release_url": "https://pypi.org/project/django-grunted-assets/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "A Django app for simplifing the use of grunt for your asset flow", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            =====================<br>django-grunted-assets<br>=====================<br><br>Goal<br>====<br><br>- Have css and js compressed and cache busted in production<br>- Have livereload work with css injection in development<br>- Have livereload work with coffee-script files and html templates<br>- Have node serve our staticfiles in development as it is way faster than<br>  django's runserver<br>- Give the flexibility that compressor provides, linking arbitrary files in certain templates and locations<br><br>Where django-compressor falls short<br>===================================<br><br>- Slow compile and reload<br>- No css injection with livereload<br>- Not the tools that grunt provides (autoprefixer, uglify, etc)<br>- Inlining assets<br><br>How it works<br>============<br><br>1. Put your static where you normally do, e.g. in a top level 'static' or<br>   'assets' dir, or in the 'static' dir in your app.<br>2. Configure the paths in your gruntfile.<br>3. Add ``{% load grunted_assets %}`` to your (base) template and link the<br>   assets you want to load with: ``{% link_asset 'script.js' %}``<br>4. Run grunt (see below).<br>5. Run ``django-admin.py collectstatic``<br><br>The ``link_asset`` template tag (or the ``inline_asset`` tag), searches for the<br>files in either ``.tmp`` (development) or ``dist`` (production) within<br>``STATIC_ROOT``.<br><br>The argument you pass to ``link_asset`` of ``inline_asset`` is treated as a regex. A<br>simple ``main.css`` therefore works, but using ``.*main\\.js`` for example, you can<br>also match files processed with something like<br>``grunt-rev&lt;https://www.npmjs.com/package/grunt-rev&gt;``_.<br><br>Development<br>-----------<br><br>In development (``grunt`` or ``grunt develop``), grunt compiles sass and coffee-<br>script to a ``.tmp`` dir inside 'static'. These files get served by node. No<br>cache busting here.<br><br>All static will be served by ``connect`` on ``localhost:8001``, so set<br>``STATIC_URL='http://localhost:8001``<br><br>Production<br>----------<br><br>Run ``grunt dist`` and check the ``dist`` folder into source control. This will<br>concat, minify etc. all your js and css into 'main.css' and 'main.js' as you<br>specify in your gruntfile.<br><br>On the server run ``django-admin.py collectstatic`` to have all static files<br>collected to the proper place.\n          </div>"}, "last_serial": 1384968, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7877b8b43423600428050c19006a6a08", "sha256": "c3b012fb2b0fc96dd4d0ac60a02de57e32ac2f002fcb6f9da102811d787d7a27"}, "downloads": -1, "filename": "django-grunted-assets-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7877b8b43423600428050c19006a6a08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3173, "upload_time": "2014-05-27T20:49:16", "upload_time_iso_8601": "2014-05-27T20:49:16.573243Z", "url": "https://files.pythonhosted.org/packages/53/da/8fcf0bf929305045c99ff97e07953e2976a6b7a7cdeddb9b742c399ba9f9/django-grunted-assets-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9c86002a799ddaf22d16363e15400d7a", "sha256": "2730a00933c9d47f03a6cc20815cf28f534ae2aa53215b3da00d86bed83a02fa"}, "downloads": -1, "filename": "django-grunted-assets-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9c86002a799ddaf22d16363e15400d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3701, "upload_time": "2014-12-23T20:18:53", "upload_time_iso_8601": "2014-12-23T20:18:53.948929Z", "url": "https://files.pythonhosted.org/packages/c8/79/58049a3acbc8500e2347810d10adae278fa4cd6562c43675a11f260737a9/django-grunted-assets-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e3b0c8604beda98f0ec6f933ca8d8179", "sha256": "212ac78c7116122e51b067c795b0825abfcce6a35156622dbc6b5b3215472b67"}, "downloads": -1, "filename": "django_grunted_assets-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e3b0c8604beda98f0ec6f933ca8d8179", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6127, "upload_time": "2015-01-16T13:51:24", "upload_time_iso_8601": "2015-01-16T13:51:24.593060Z", "url": "https://files.pythonhosted.org/packages/2a/03/23970c3e23b301574dd01277b65c012ff4b62bfae7dbbdc9a6fd9305cf56/django_grunted_assets-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53930cc8e9a2d0ac8b945120218016f0", "sha256": "b49261aebbe033915fd8eb450c50c59d7cd5679ba5feaf6e0055dcbbca197aa3"}, "downloads": -1, "filename": "django-grunted-assets-0.2.1.tar.gz", "has_sig": false, "md5_digest": "53930cc8e9a2d0ac8b945120218016f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3738, "upload_time": "2015-01-16T13:51:22", "upload_time_iso_8601": "2015-01-16T13:51:22.338540Z", "url": "https://files.pythonhosted.org/packages/f3/61/24432efef0b7b8fe542f64dfebf1c8c45100f2701fa2c2c21364cc46dc0a/django-grunted-assets-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3b0c8604beda98f0ec6f933ca8d8179", "sha256": "212ac78c7116122e51b067c795b0825abfcce6a35156622dbc6b5b3215472b67"}, "downloads": -1, "filename": "django_grunted_assets-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e3b0c8604beda98f0ec6f933ca8d8179", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6127, "upload_time": "2015-01-16T13:51:24", "upload_time_iso_8601": "2015-01-16T13:51:24.593060Z", "url": "https://files.pythonhosted.org/packages/2a/03/23970c3e23b301574dd01277b65c012ff4b62bfae7dbbdc9a6fd9305cf56/django_grunted_assets-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53930cc8e9a2d0ac8b945120218016f0", "sha256": "b49261aebbe033915fd8eb450c50c59d7cd5679ba5feaf6e0055dcbbca197aa3"}, "downloads": -1, "filename": "django-grunted-assets-0.2.1.tar.gz", "has_sig": false, "md5_digest": "53930cc8e9a2d0ac8b945120218016f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3738, "upload_time": "2015-01-16T13:51:22", "upload_time_iso_8601": "2015-01-16T13:51:22.338540Z", "url": "https://files.pythonhosted.org/packages/f3/61/24432efef0b7b8fe542f64dfebf1c8c45100f2701fa2c2c21364cc46dc0a/django-grunted-assets-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:47 2020"}