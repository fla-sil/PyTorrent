{"info": {"author": "Andrey Sorokin", "author_email": "filbert@yandex.ru", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Bombard\n=======\n\n|made_with_python| |build_status| |upload_pip| |pypi_version| |pypi_license| |readthedocs|\n\nBombard is a tool for stress test and benchmarking your HTTP server.\nEspecially it's good to simulate a heavy load and initial burst of\nsimultaneous HTTP requests with complex logic.\n\nIt is designed to be extremely simple yet powerful tool to\nload test functional behavior.\n\nThanks to optional Python inlines you can fast and easy describe\ncomplex logic for the tests.\n\nTest report shows you how many requests per second your server\nis capable of serving and with what latency.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install bombard --upgrade\n\nAfter that use ``bombard`` (``bombard.exe`` in Windows) executable:\n\n.. code-block:: bash\n\n    bombard --help\n\nRequests description\n--------------------\n\nRequests can be just URL or contain JSON described like this\n\n.. code-block:: yaml\n\n    supply:  # you can redefine variables from command line (--supply host=http://localhost/)\n      host: https://jsonplaceholder.typicode.com/\n\n    getToken:\n        url: \"{host}auth\"  # use custom {host} variable to stay DRY\n        method: POST\n        body:  # below is JSON object for request body\n            email: name@example.com\n            password: admin\n        extract:  # get token for next requests\n            token:\n\nIn first request you can get security token as in example above.\n\nAnd use it in next requests:\n\n.. code-block:: yaml\n\n     postsList:\n        url: \"{host}posts\"\n        headers:\n            Authorization: \"Bearer {token}\"  # we get {token} in 1st request\n        script: |\n            for post in resp[:3]:  # for 1st three posts from response\n                # schedule getPost request (from ammo section)\n                # and provide it with id we got from the response\n                reload(ammo.getPost, id=post['id'])\n\nIncluded examples. To list examples\n\n.. code-block:: bash\n\n    bombard --examples\n\nCommand line\n------------\n\nFrom command line you can change number of threads, loop count,\nsupply vars, customize report and so on.\n\nAlso you can bootstrap your own ``bombard.yaml`` file from any example you\nlike::\n\n    bombard --init --example simple\n\nReport\n------\n\nExample of report for the command::\n\n    bombard --example simple --repeat 2 --threshold 100\n\n.. image:: https://github.com/andgineer/bombard/blob/master/docs/_static/simple_stdout.png?raw=true\n\nDocumentation\n-------------\n`Bombard documentation <https://bombard.sorokin.engineer/en/latest/>`_\n\nTranslation managed with `Transifex <https://www.transifex.com/masterAndrey/bombard/translate>`_\n\n.. |build_status| image:: https://github.com/andgineer/bombard/workflows/ci/badge.svg\n    :target: https://github.com/andgineer/bombard/actions\n    :alt: Latest release\n\n.. |upload_pip| image:: https://github.com/andgineer/bombard/workflows/Upload%20Python%20Package/badge.svg\n    :target: https://github.com/andgineer/bombard/actions\n    :alt: Pip upload\n\n.. |pypi_version| image:: https://img.shields.io/pypi/v/bombard.svg?style=flat-square\n    :target: https://pypi.org/p/bombard\n    :alt: Latest release\n\n.. |pypi_license| image:: https://img.shields.io/pypi/l/bombard.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/bombard\n    :alt: MIT license\n\n.. |readthedocs| image:: https://readthedocs.org/projects/bombard/badge/?version=latest\n    :target: https://bombard.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. |made_with_python| image:: https://img.shields.io/badge/Made%20with-Python-1f425f.svg\n    :target: https://www.python.org/\n    :alt: Made with Python\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bombard.readthedocs.io/en/latest/", "keywords": "http load test parallel", "license": "", "maintainer": "", "maintainer_email": "", "name": "bombard", "package_url": "https://pypi.org/project/bombard/", "platform": "", "project_url": "https://pypi.org/project/bombard/", "project_urls": {"Homepage": "https://bombard.readthedocs.io/en/latest/"}, "release_url": "https://pypi.org/project/bombard/1.20/", "requires_dist": ["pyyaml (>=5.1)", "pygments", "colorama"], "requires_python": "", "summary": "Bombards target server with simultaneous requests", "version": "1.20", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"Made with Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68a99107ffdf24c5fb2cc4bca38b7b662e501b97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d3166343235662e737667\"></a> <a href=\"https://github.com/andgineer/bombard/actions\" rel=\"nofollow\"><img alt=\"Latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af9616b93fb0aab2a47d0b1d3513c3e8c995ceb6/68747470733a2f2f6769746875622e636f6d2f616e6467696e6565722f626f6d626172642f776f726b666c6f77732f63692f62616467652e737667\"></a> <a href=\"https://github.com/andgineer/bombard/actions\" rel=\"nofollow\"><img alt=\"Pip upload\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9d7784db3ef16a07a85b8f3af910156e08db1bf/68747470733a2f2f6769746875622e636f6d2f616e6467696e6565722f626f6d626172642f776f726b666c6f77732f55706c6f6164253230507974686f6e2532305061636b6167652f62616467652e737667\"></a> <a href=\"https://pypi.org/p/bombard\" rel=\"nofollow\"><img alt=\"Latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85beef90d8ee2c129d9f5eced32e5d3c37c3d375/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f626f6d626172642e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/bombard\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd4e22cda6503e20bb7361b7c8df71817bbb25b5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f626f6d626172642e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://bombard.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84d351f237a18661f43754a65b38e35c1e94e558/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f626f6d626172642f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Bombard is a tool for stress test and benchmarking your HTTP server.\nEspecially it\u2019s good to simulate a heavy load and initial burst of\nsimultaneous HTTP requests with complex logic.</p>\n<p>It is designed to be extremely simple yet powerful tool to\nload test functional behavior.</p>\n<p>Thanks to optional Python inlines you can fast and easy describe\ncomplex logic for the tests.</p>\n<p>Test report shows you how many requests per second your server\nis capable of serving and with what latency.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install bombard --upgrade\n</pre>\n<p>After that use <tt>bombard</tt> (<tt>bombard.exe</tt> in Windows) executable:</p>\n<pre>bombard --help\n</pre>\n</div>\n<div id=\"requests-description\">\n<h2>Requests description</h2>\n<p>Requests can be just URL or contain JSON described like this</p>\n<pre><span class=\"nt\">supply</span><span class=\"p\">:</span>  <span class=\"c1\"># you can redefine variables from command line (--supply host=http://localhost/)</span>\n  <span class=\"nt\">host</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">https://jsonplaceholder.typicode.com/</span>\n\n<span class=\"nt\">getToken</span><span class=\"p\">:</span>\n    <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">\"{host}auth\"</span>  <span class=\"c1\"># use custom {host} variable to stay DRY</span>\n    <span class=\"nt\">method</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">POST</span>\n    <span class=\"nt\">body</span><span class=\"p\">:</span>  <span class=\"c1\"># below is JSON object for request body</span>\n        <span class=\"nt\">email</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">name@example.com</span>\n        <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">admin</span>\n    <span class=\"nt\">extract</span><span class=\"p\">:</span>  <span class=\"c1\"># get token for next requests</span>\n        <span class=\"nt\">token</span><span class=\"p\">:</span>\n</pre>\n<p>In first request you can get security token as in example above.</p>\n<p>And use it in next requests:</p>\n<pre><span class=\"nt\">postsList</span><span class=\"p\">:</span>\n   <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">\"{host}posts\"</span>\n   <span class=\"nt\">headers</span><span class=\"p\">:</span>\n       <span class=\"nt\">Authorization</span><span class=\"p\">:</span> <span class=\"s\">\"Bearer</span><span class=\"nv\"> </span><span class=\"s\">{token}\"</span>  <span class=\"c1\"># we get {token} in 1st request</span>\n   <span class=\"nt\">script</span><span class=\"p\">:</span> <span class=\"p-Indicator\">|</span>\n       <span class=\"no\">for post in resp[:3]:  # for 1st three posts from response</span>\n           <span class=\"no\"># schedule getPost request (from ammo section)</span>\n           <span class=\"no\"># and provide it with id we got from the response</span>\n           <span class=\"no\">reload(ammo.getPost, id=post['id'])</span>\n</pre>\n<p>Included examples. To list examples</p>\n<pre>bombard --examples\n</pre>\n</div>\n<div id=\"command-line\">\n<h2>Command line</h2>\n<p>From command line you can change number of threads, loop count,\nsupply vars, customize report and so on.</p>\n<p>Also you can bootstrap your own <tt>bombard.yaml</tt> file from any example you\nlike:</p>\n<pre>bombard --init --example simple\n</pre>\n</div>\n<div id=\"report\">\n<h2>Report</h2>\n<p>Example of report for the command:</p>\n<pre>bombard --example simple --repeat 2 --threshold 100\n</pre>\n<img alt=\"https://github.com/andgineer/bombard/blob/master/docs/_static/simple_stdout.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfe5d5395c81ab8d3208963b7fbb35843d9a44d8/68747470733a2f2f6769746875622e636f6d2f616e6467696e6565722f626f6d626172642f626c6f622f6d61737465722f646f63732f5f7374617469632f73696d706c655f7374646f75742e706e673f7261773d74727565\">\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"https://bombard.sorokin.engineer/en/latest/\" rel=\"nofollow\">Bombard documentation</a></p>\n<p>Translation managed with <a href=\"https://www.transifex.com/masterAndrey/bombard/translate\" rel=\"nofollow\">Transifex</a></p>\n</div>\n\n          </div>"}, "last_serial": 6805646, "releases": {"1.20": [{"comment_text": "", "digests": {"md5": "24fb78c999f6dd32321a73e8c99d9906", "sha256": "20adb1011bb31391d3055f0be70b76b45445f554f8dc5374ce34c9e3c3b085cd"}, "downloads": -1, "filename": "bombard-1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "24fb78c999f6dd32321a73e8c99d9906", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30138, "upload_time": "2020-03-13T12:42:23", "upload_time_iso_8601": "2020-03-13T12:42:23.295709Z", "url": "https://files.pythonhosted.org/packages/2d/f0/21ab61e1d3b2004b28068e6d70b569546d6219ac0167095c2c7ce5da067a/bombard-1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e63d80cf156eeda72a9afa76a6883bf8", "sha256": "9c0fc5a05608c9b6f93c75b0414107d91e9f41f23c46673a51fdba9d315d4f53"}, "downloads": -1, "filename": "bombard-1.20.tar.gz", "has_sig": false, "md5_digest": "e63d80cf156eeda72a9afa76a6883bf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22395, "upload_time": "2020-03-13T12:42:24", "upload_time_iso_8601": "2020-03-13T12:42:24.902178Z", "url": "https://files.pythonhosted.org/packages/f1/54/217b3694d2a06c5e462b3205649ad5539cacfb12d643469efc5d59cf7bf4/bombard-1.20.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "24fb78c999f6dd32321a73e8c99d9906", "sha256": "20adb1011bb31391d3055f0be70b76b45445f554f8dc5374ce34c9e3c3b085cd"}, "downloads": -1, "filename": "bombard-1.20-py3-none-any.whl", "has_sig": false, "md5_digest": "24fb78c999f6dd32321a73e8c99d9906", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30138, "upload_time": "2020-03-13T12:42:23", "upload_time_iso_8601": "2020-03-13T12:42:23.295709Z", "url": "https://files.pythonhosted.org/packages/2d/f0/21ab61e1d3b2004b28068e6d70b569546d6219ac0167095c2c7ce5da067a/bombard-1.20-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e63d80cf156eeda72a9afa76a6883bf8", "sha256": "9c0fc5a05608c9b6f93c75b0414107d91e9f41f23c46673a51fdba9d315d4f53"}, "downloads": -1, "filename": "bombard-1.20.tar.gz", "has_sig": false, "md5_digest": "e63d80cf156eeda72a9afa76a6883bf8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22395, "upload_time": "2020-03-13T12:42:24", "upload_time_iso_8601": "2020-03-13T12:42:24.902178Z", "url": "https://files.pythonhosted.org/packages/f1/54/217b3694d2a06c5e462b3205649ad5539cacfb12d643469efc5d59cf7bf4/bombard-1.20.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:46 2020"}