{"info": {"author": "Juca Crispim", "author_email": "juca@poraodojuca.net", "bugtrack_url": null, "classifiers": [], "description": "Asyncamqp is a little extension to aioamqp based on the ideas from this\npull request (https://github.com/Polyconseil/aioamqp/pull/118). The changes\nhere get rid of the callbacks stuff.\n\nInstall\n=======\n\nInstall it using pip\n\n.. code-block:: sh\n\n    $ pip install asyncamqp\n\n\nUsage\n=====\n\nTo publish stuff, just do the same as you would do with aioamqp:\n\n.. code-block:: python\n\n    await channel.basic_publish(payload='hi there!', exchange_name='',\n    \t                        routing_key='my-rt')\n\n\nTo consume stuff, you don't need to use callbacks anymore.\n\n.. code-block:: python\n\n    async with channel.basic_consume(queue_name='my-queue', exchange_name='',\n                                     routing_key='my-queue') as consumer:\n        async for msg in consumer:\n            print(msg.body)\n\n\nConsuming messages this way we always wait for a new message to arrive in the\nqueue. We can use a timeout in milliseconds for it, too:\n\n.. code-block:: python\n\n    # now we pass the timeout argument\n    async with channel.basic_consume(queue_name='my-queue', exchange_name='',\n                                     routing_key='my-queue',\n\t    \t\t\t     timeout=100) as consumer:\n        async for msg in consumer:\n            print(msg.body)\n\n\nOr we could simply consume the messages already in the queue and stop\nconsuming stuff when we have no more messages:\n\n.. code-block:: python\n\n    # now we pass the wait_message argument.\n    async with channel.basic_consume(queue_name='my-queue', exchange_name='',\n                                     routing_key='my-queue',\n\t                             wait_message=False) as consumer:\n        async for msg in consumer:\n            print(msg.body)\n\n\nAs it is a simple extension to aioamqp, please refer to the\n`aioamqp's docs <http://aioamqp.readthedocs.io/en/latest/index.html>`_\nfor full information. Just remember that when consuming it you don't use\ncallbacks but the context manager/async for stuff.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jucacrispim/asyncamqp", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "asyncamqp", "package_url": "https://pypi.org/project/asyncamqp/", "platform": "", "project_url": "https://pypi.org/project/asyncamqp/", "project_urls": {"Homepage": "https://github.com/jucacrispim/asyncamqp"}, "release_url": "https://pypi.org/project/asyncamqp/0.1.6/", "requires_dist": null, "requires_python": "", "summary": "aioampq without callbacks!", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Asyncamqp is a little extension to aioamqp based on the ideas from this\npull request (<a href=\"https://github.com/Polyconseil/aioamqp/pull/118\" rel=\"nofollow\">https://github.com/Polyconseil/aioamqp/pull/118</a>). The changes\nhere get rid of the callbacks stuff.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install it using pip</p>\n<pre>$ pip install asyncamqp\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To publish stuff, just do the same as you would do with aioamqp:</p>\n<pre><span class=\"k\">await</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">basic_publish</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"s1\">'hi there!'</span><span class=\"p\">,</span> <span class=\"n\">exchange_name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                            <span class=\"n\">routing_key</span><span class=\"o\">=</span><span class=\"s1\">'my-rt'</span><span class=\"p\">)</span>\n</pre>\n<p>To consume stuff, you don\u2019t need to use callbacks anymore.</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">basic_consume</span><span class=\"p\">(</span><span class=\"n\">queue_name</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span> <span class=\"n\">exchange_name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                                 <span class=\"n\">routing_key</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>Consuming messages this way we always wait for a new message to arrive in the\nqueue. We can use a timeout in milliseconds for it, too:</p>\n<pre><span class=\"c1\"># now we pass the timeout argument</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">basic_consume</span><span class=\"p\">(</span><span class=\"n\">queue_name</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span> <span class=\"n\">exchange_name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                                 <span class=\"n\">routing_key</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>Or we could simply consume the messages already in the queue and stop\nconsuming stuff when we have no more messages:</p>\n<pre><span class=\"c1\"># now we pass the wait_message argument.</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">basic_consume</span><span class=\"p\">(</span><span class=\"n\">queue_name</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span> <span class=\"n\">exchange_name</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                                 <span class=\"n\">routing_key</span><span class=\"o\">=</span><span class=\"s1\">'my-queue'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">wait_message</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">consumer</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">)</span>\n</pre>\n<p>As it is a simple extension to aioamqp, please refer to the\n<a href=\"http://aioamqp.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">aioamqp\u2019s docs</a>\nfor full information. Just remember that when consuming it you don\u2019t use\ncallbacks but the context manager/async for stuff.</p>\n</div>\n\n          </div>"}, "last_serial": 6519194, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ec0d2a714fd051cb2fec3d2af50314ee", "sha256": "e61c530ecba195d497f127f22299dbb2b98e7f7b0bc79af47c98c81be3f38845"}, "downloads": -1, "filename": "asyncamqp-0.1.tar.gz", "has_sig": false, "md5_digest": "ec0d2a714fd051cb2fec3d2af50314ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5362, "upload_time": "2018-03-13T12:22:49", "upload_time_iso_8601": "2018-03-13T12:22:49.706091Z", "url": "https://files.pythonhosted.org/packages/83/9a/f7ede9932747cd0fff4e69f612102acf2418cc9a9192e8b0bff48195a47d/asyncamqp-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b648846d81ee7ff308d9c036791d5560", "sha256": "8273e0eeec2d46dbda885e2c24339f17701465a59f2345ff434df65ce5c61b21"}, "downloads": -1, "filename": "asyncamqp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b648846d81ee7ff308d9c036791d5560", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5309, "upload_time": "2018-03-13T12:45:55", "upload_time_iso_8601": "2018-03-13T12:45:55.029470Z", "url": "https://files.pythonhosted.org/packages/ca/f8/7ddb5b27af1d2b1655edbe86df1fe412a5d24db79380a5ebddec92c70554/asyncamqp-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "17c21bbdb18b3087403a0709095db612", "sha256": "5d503471fcbb1e55ac38bf5e873cc961c13333f9a6f66fc8b8ad88d8a5721916"}, "downloads": -1, "filename": "asyncamqp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "17c21bbdb18b3087403a0709095db612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5321, "upload_time": "2018-03-13T14:48:31", "upload_time_iso_8601": "2018-03-13T14:48:31.452951Z", "url": "https://files.pythonhosted.org/packages/45/19/75e1a4080d8a94b46a656501fc55a8ab4b7be473b210510c41bed330fecf/asyncamqp-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "189f08454f633eab20d33b0b6486799c", "sha256": "c760368ca9be18451abb2c6c23396a065d6e1b66a9e1e5c81594c268622c5ac4"}, "downloads": -1, "filename": "asyncamqp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "189f08454f633eab20d33b0b6486799c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5334, "upload_time": "2018-03-21T15:49:55", "upload_time_iso_8601": "2018-03-21T15:49:55.804500Z", "url": "https://files.pythonhosted.org/packages/4b/64/90139af84a69415239bb50d3a74e7bcc19c2a6e3688754535a7bb3f8b334/asyncamqp-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "c3bff08198fd1a1468b3d809803777a0", "sha256": "8c3d67086673c030f09e7ecf9485a46fe1cbe5c344891c5d15da3cefc6aafc81"}, "downloads": -1, "filename": "asyncamqp-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c3bff08198fd1a1468b3d809803777a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5351, "upload_time": "2018-04-22T19:53:44", "upload_time_iso_8601": "2018-04-22T19:53:44.121744Z", "url": "https://files.pythonhosted.org/packages/22/74/bf414814091388af0790ffff5fd03cd62f5effaba90ff69d4b819a84f1d0/asyncamqp-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "ca242ed4b1ff1b5a92445a47e5659257", "sha256": "430f9b8de2af51a030d6a9da880fe2ccb52979e40cf73fd4c8b216e47961b4d3"}, "downloads": -1, "filename": "asyncamqp-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ca242ed4b1ff1b5a92445a47e5659257", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5220, "upload_time": "2019-07-10T17:52:53", "upload_time_iso_8601": "2019-07-10T17:52:53.766838Z", "url": "https://files.pythonhosted.org/packages/f0/1c/b96a2838fb2a9e271f6a7e1996cc5a47f4bbc1ecc457d8867ab5ff4b90e1/asyncamqp-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b6066e7f147c5807b298035eacb04914", "sha256": "571421de2320a187c0f87abdae15cd5a7d16cbca83286a04018d9f0d4e38c4a4"}, "downloads": -1, "filename": "asyncamqp-0.1.6.tar.gz", "has_sig": false, "md5_digest": "b6066e7f147c5807b298035eacb04914", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5208, "upload_time": "2020-01-25T17:07:21", "upload_time_iso_8601": "2020-01-25T17:07:21.703789Z", "url": "https://files.pythonhosted.org/packages/52/30/1aaa4fcf520079342462bff37fdb3cb1b84b9a1174e61207db8883021542/asyncamqp-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6066e7f147c5807b298035eacb04914", "sha256": "571421de2320a187c0f87abdae15cd5a7d16cbca83286a04018d9f0d4e38c4a4"}, "downloads": -1, "filename": "asyncamqp-0.1.6.tar.gz", "has_sig": false, "md5_digest": "b6066e7f147c5807b298035eacb04914", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5208, "upload_time": "2020-01-25T17:07:21", "upload_time_iso_8601": "2020-01-25T17:07:21.703789Z", "url": "https://files.pythonhosted.org/packages/52/30/1aaa4fcf520079342462bff37fdb3cb1b84b9a1174e61207db8883021542/asyncamqp-0.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:46 2020"}