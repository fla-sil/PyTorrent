{"info": {"author": "Jannis Leidel", "author_email": "jannis@leidel.info", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Documentation", "Topic :: Utilities"], "description": "embedly extension\n=================\n\nThis is a sphinx extension for using Embedly_.\n\nThis extension enables you to embed anything that is supported by Embedly_ ,\ne.g.::\n\n   .. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n\n.. _Embedly: http://embed.ly/\n\n\nInstallation\n------------\n\n::\n\n   pip install sphinxcontrib-embedly\n\nConfiguration\n-------------\n\nSphinx\n^^^^^^\n\nTo enable this extension in Sphinx, add ``sphinxcontrib.embedly`` module to\nthe ``extensions`` option in the ``conf.py`` file.\n\n::\n\n   import os, sys\n\n   # Path to the folder where sphinxcontrib/embedly.py is\n   # NOTE: not needed if the package is installed in traditional way\n   # using setup.py, easy_install or pip\n   sys.path.append(os.path.abspath('/path/to/sphinxcontrib.embedly'))\n\n   # Enabled extensions\n   extensions = ['sphinxcontrib.embedly']\n\nDocutils\n^^^^^^^^\n\nIn case you use pure docutils projects such as Pelican feel free to add\nthe following somewhere to your code::\n\n   from sphinxcontrib.embedly import setup_docutils\n   setup_docutils()\n\n\nembedly_key\n^^^^^^^^^^^\nThen set the **required** configuration variable ``embedly_key`` in your\n``conf.py`` by signing up for for the free account on Embedly for the\nEmbed_ product. E.g.::\n\n   embedly_key = '<api-key-copied-from-your-account-page>'\n\nembedly_timeout\n^^^^^^^^^^^^^^^\n\nThere is also one optional configuration variable, the ``embedly_timeout``\nthat specifies the default timeout used when fetching the embed code from\nEmbedly (defaults to 60 seconds). E.g.::\n\n   embedly_timeout = 120\n\n.. _Embed: http://embed.ly/embed\n\nUsage\n-----\n\nThis directive fetches the embed code for the given URL and adds it into\nthe generated document.\n\nExamples::\n\n   .. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n\nYou can specify various options for the embedding as seen above.\n\nExample::\n\n   .. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n      :width: 450\n      :autoplay:\n      :frame:\n\nOptions\n^^^^^^^\n\n:maxwidth: the maximum width of the embed in pixels (optional)\n:maxheight: the maximum height of the embed in pixels  (optional)\n:width: the scaled width of rich and video embeds in pixels  (optional)\n:wmode: the \"wmode\" parameter to flash objects, options are\n        \"window\", \"opaque\" and \"transparent\"  (optional)\n:nostyle: boolean when given removes inline style elements from certain\n          embeds to be able to style them yourself (optional)\n:autoplay: boolean when given tells the video and rich embeds to\n           automatically play when the media is loaded (optional)\n:videosrc: boolean when given uses the ``video_src`` meta or Open Graph\n           tag to create a video object to embed (optional, defaults to 50)\n:words: integer value of words to be returned as the description,\n        as the closest sentence to that word count (optional)\n:chars: integer value of characters after which the description is\n        blindly truncated and added \"...\" (optional)\n:frame: boolean when given will wrap all embeds in iframes to help prevent\n        XSS attacks (optional, available in the paid products)\n:secure: boolean when given will serve embeds with a SSL connection\n         (optional, available in the paid products)\n\n\nChangelog\n---------\n\nv0.2 (2014-02-23)\n^^^^^^^^^^^^^^^^^\n\n- Handle embeds of the type \"rich\" such as Slideshare. Thanks to Doug Hellmann.\n\n- Ported over from Bitbucket repo to Github:\n\n    https://github.com/jezdez/sphinxcontrib-embedly\n\nv0.1 (2013-12-30)\n^^^^^^^^^^^^^^^^^\n\n- Initial release.", "description_content_type": null, "docs_url": null, "download_url": "http://pypi.python.org/pypi/sphinxcontrib-embedly", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/jezdez/sphinxcontrib-embedly", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "sphinxcontrib-embedly", "package_url": "https://pypi.org/project/sphinxcontrib-embedly/", "platform": "any", "project_url": "https://pypi.org/project/sphinxcontrib-embedly/", "project_urls": {"Download": "http://pypi.python.org/pypi/sphinxcontrib-embedly", "Homepage": "http://github.com/jezdez/sphinxcontrib-embedly"}, "release_url": "https://pypi.org/project/sphinxcontrib-embedly/0.2/", "requires_dist": null, "requires_python": null, "summary": "Sphinx \"embedly\" extension", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a sphinx extension for using <a href=\"http://embed.ly/\" rel=\"nofollow\">Embedly</a>.</p>\n<p>This extension enables you to embed anything that is supported by <a href=\"http://embed.ly/\" rel=\"nofollow\">Embedly</a> ,\ne.g.:</p>\n<pre>.. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n</pre>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install sphinxcontrib-embedly\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"sphinx\">\n<h3>Sphinx</h3>\n<p>To enable this extension in Sphinx, add <tt>sphinxcontrib.embedly</tt> module to\nthe <tt>extensions</tt> option in the <tt>conf.py</tt> file.</p>\n<pre>import os, sys\n\n# Path to the folder where sphinxcontrib/embedly.py is\n# NOTE: not needed if the package is installed in traditional way\n# using setup.py, easy_install or pip\nsys.path.append(os.path.abspath('/path/to/sphinxcontrib.embedly'))\n\n# Enabled extensions\nextensions = ['sphinxcontrib.embedly']\n</pre>\n</div>\n<div id=\"docutils\">\n<h3>Docutils</h3>\n<p>In case you use pure docutils projects such as Pelican feel free to add\nthe following somewhere to your code:</p>\n<pre>from sphinxcontrib.embedly import setup_docutils\nsetup_docutils()\n</pre>\n</div>\n<div id=\"embedly-key\">\n<h3>embedly_key</h3>\n<p>Then set the <strong>required</strong> configuration variable <tt>embedly_key</tt> in your\n<tt>conf.py</tt> by signing up for for the free account on Embedly for the\n<a href=\"http://embed.ly/embed\" rel=\"nofollow\">Embed</a> product. E.g.:</p>\n<pre>embedly_key = '&lt;api-key-copied-from-your-account-page&gt;'\n</pre>\n</div>\n<div id=\"embedly-timeout\">\n<h3>embedly_timeout</h3>\n<p>There is also one optional configuration variable, the <tt>embedly_timeout</tt>\nthat specifies the default timeout used when fetching the embed code from\nEmbedly (defaults to 60 seconds). E.g.:</p>\n<pre>embedly_timeout = 120\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This directive fetches the embed code for the given URL and adds it into\nthe generated document.</p>\n<p>Examples:</p>\n<pre>.. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n</pre>\n<p>You can specify various options for the embedding as seen above.</p>\n<p>Example:</p>\n<pre>.. embedly:: http://www.youtube.com/watch?v=M_eYSuPKP3Y\n   :width: 450\n   :autoplay:\n   :frame:\n</pre>\n<div id=\"options\">\n<h3>Options</h3>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>maxwidth:</th><td>the maximum width of the embed in pixels (optional)</td>\n</tr>\n<tr><th>maxheight:</th><td>the maximum height of the embed in pixels  (optional)</td>\n</tr>\n<tr><th>width:</th><td>the scaled width of rich and video embeds in pixels  (optional)</td>\n</tr>\n<tr><th>wmode:</th><td>the \u201cwmode\u201d parameter to flash objects, options are\n\u201cwindow\u201d, \u201copaque\u201d and \u201ctransparent\u201d  (optional)</td>\n</tr>\n<tr><th>nostyle:</th><td>boolean when given removes inline style elements from certain\nembeds to be able to style them yourself (optional)</td>\n</tr>\n<tr><th>autoplay:</th><td>boolean when given tells the video and rich embeds to\nautomatically play when the media is loaded (optional)</td>\n</tr>\n<tr><th>videosrc:</th><td>boolean when given uses the <tt>video_src</tt> meta or Open Graph\ntag to create a video object to embed (optional, defaults to 50)</td>\n</tr>\n<tr><th>words:</th><td>integer value of words to be returned as the description,\nas the closest sentence to that word count (optional)</td>\n</tr>\n<tr><th>chars:</th><td>integer value of characters after which the description is\nblindly truncated and added \u201c\u2026\u201d (optional)</td>\n</tr>\n<tr><th>frame:</th><td>boolean when given will wrap all embeds in iframes to help prevent\nXSS attacks (optional, available in the paid products)</td>\n</tr>\n<tr><th>secure:</th><td>boolean when given will serve embeds with a SSL connection\n(optional, available in the paid products)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v0-2-2014-02-23\">\n<h3>v0.2 (2014-02-23)</h3>\n<ul>\n<li><p>Handle embeds of the type \u201crich\u201d such as Slideshare. Thanks to Doug Hellmann.</p>\n</li>\n<li><p>Ported over from Bitbucket repo to Github:</p>\n<blockquote>\n<p><a href=\"https://github.com/jezdez/sphinxcontrib-embedly\" rel=\"nofollow\">https://github.com/jezdez/sphinxcontrib-embedly</a></p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"v0-1-2013-12-30\">\n<h3>v0.1 (2013-12-30)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1009320, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "87617531ab0c52742aafeb090acefca9", "sha256": "a1546638e81b509efbee3c4d6e4d7a611201382ed1de99e50824fe387f6b015a"}, "downloads": -1, "filename": "sphinxcontrib-embedly-0.1.tar.gz", "has_sig": true, "md5_digest": "87617531ab0c52742aafeb090acefca9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5182, "upload_time": "2013-12-30T14:17:41", "upload_time_iso_8601": "2013-12-30T14:17:41.144445Z", "url": "https://files.pythonhosted.org/packages/aa/c9/b0001dd190d8cc3e34a044e3710bc7d7ebe302a18681a8bf6260db5fd1f8/sphinxcontrib-embedly-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "efbe244a16f268ceec11390a0801cf0e", "sha256": "1781b9e8108334acfd9c13e3cc28228510810985ae351e16995a959fc86c9013"}, "downloads": -1, "filename": "sphinxcontrib-embedly-0.2.tar.gz", "has_sig": true, "md5_digest": "efbe244a16f268ceec11390a0801cf0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5718, "upload_time": "2014-02-23T18:12:07", "upload_time_iso_8601": "2014-02-23T18:12:07.293162Z", "url": "https://files.pythonhosted.org/packages/01/fe/0115bd6c5953de474232b74d9bb432476739333f703d2765c79e3f25cf76/sphinxcontrib-embedly-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "efbe244a16f268ceec11390a0801cf0e", "sha256": "1781b9e8108334acfd9c13e3cc28228510810985ae351e16995a959fc86c9013"}, "downloads": -1, "filename": "sphinxcontrib-embedly-0.2.tar.gz", "has_sig": true, "md5_digest": "efbe244a16f268ceec11390a0801cf0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5718, "upload_time": "2014-02-23T18:12:07", "upload_time_iso_8601": "2014-02-23T18:12:07.293162Z", "url": "https://files.pythonhosted.org/packages/01/fe/0115bd6c5953de474232b74d9bb432476739333f703d2765c79e3f25cf76/sphinxcontrib-embedly-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:18 2020"}