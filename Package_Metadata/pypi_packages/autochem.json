{"info": {"author": "Tom Mason", "author_email": "tom.mason14+pypi@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# autochem\n\n# Overview\n\nPython OOP project, implementing GAMESS, GAUSSIAN, PSI4 and ORCA file production and\nsubmission to SLURM and PBS scheduling systems. GAMESS implementations focus\nheavily on the Fragment Molecular Orbital approach to\nquantum chemical calculations, and input files are generated for\n[SRS-MP2](https://aip.scitation.org/doi/10.1063/1.4975326) jobs by default in GAMESS.\n\nUse this code for:\n\n- Automatic input and job file creation\n- Scraping log files for relevant results: \n  - energies\n  - geometries \n    - intermolecular hydrogen bond lengths\n  - vibrations\n  - fluorescence data\n  - geodesic charges\n  - homo-lumo gaps\n- Automatic analysis of results\n  - interaction energies\n    - purely ionic systems\n    - mixed ionic/neutral species\n  - calculates free energies\n\nAlso exportable as a python package, and can be easily extended. See the\n[examples](https://github.com/tommason14/monash_automation/tree/master/examples) for more details.\n\nCurrently set up for the following supercomputers:\n- Gadi (Canberra)\n- Raijin (Canberra, now decommissioned)\n- Magnus (Perth)\n- Monarch (Melbourne)\n- Massive (Melbourne)\n- Stampede2 (Texas)\n\n# Example Usage\n\n# Creating input files for computational calculations\n\nImportant: When creating job files, all data for a job can be modified through the use of a\n`Settings` object.\n\nUsers have various options when choosing how to create input and job files:\n\n1. Create a python script including the desired input file and job parameters,\n   and run the job using a python class. For example:\n\n```python\nfrom autochem import GaussJob, Settings\nfrom glob import glob\n\nxyz = glob('*xyz')[0] # find the xyz file to run\n\nsett=Settings()\n# define the input parameters\nsett.input.method='wb97xd'\nsett.input.basis='aug-cc-pVDZ'\nsett.input.opt=True\nsett.input.td='nstates=10,root=9'\nsett.input.scrf='smd,solvent=n,n-DiMethylFormamide'\n# define job scheduler parameters\nsett.meta.mem='160gb'\nsett.meta.ncpus=48\nsett.meta.nodemem='192GB'\nsett.meta.time='24:00:00'\nsett.meta.jobfs='400gb'\n\n# create the input and job files\nGaussJob(xyz, settings=sett)\n```\nUsing this method, options such as `frags_in_subdir=True` can be used, or\n`filename` can be used to give the name of input/job files. Otherwise, jobs are\nnamed according to their run types (optimisations are named `opt`, single points\nare named `spec` and frequency calculations are named `hess`).\n\n2. Store the parameters of the `Settings` object in a python file, then run from\n   the command line:\n\n```python\n# settings.py\nsett.input.method='wb97xd'\nsett.input.basis='aug-cc-pVDZ'\nsett.input.opt=True\nsett.input.td='nstates=10,root=9'\nsett.input.scrf='smd,solvent=n,n-DiMethylFormamide'\n\nsett.meta.mem='160gb'\nsett.meta.ncpus=48\nsett.meta.nodemem='192GB'\nsett.meta.time='24:00:00'\nsett.meta.jobfs='400gb'\n```\nthen run from the command line using `chem_assist -d -s settings.py`, which\ntakes in every xyz file in the current directory and creates jobs using\nparameters from the `Settings` object in `settings.py`. \nNote: using this method, the `Settings` object must be called `sett`.\n\nExample settings can be found in the [settings_files](https://github.com/tommason14/monash_automation/tree/master/settings_files)\ndirectory.\n\nMethods of defining input and job parameters for each software are different, and\noutlined below.\n\n## GAMESS-US\n\nUsing a dummy system, `h.xyz`, we can see the default options like so:\n\n```python\nfrom autochem import GamessJob\n\ngamess = GamessJob('h.xyz')\n\nprint(gamess.input)\n```\n\nwhich produces:\n\n```\nbasis:    \n      gbasis:    ccd\ncontrl:    \n       icharg:    0\n       ispher:    1\n       maxit:    200\n       mplevl:    2\n       runtyp:    optimize\n       scftyp:    rhf\nmp2:    \n    code:    ims\n    scsopo:    1.752\n    scspar:    0.0\n    scspt:    scs\nscf:    \n    diis:    .true.\n    dirscf:    .true.\n    fdiff:    .false.\nstatpt:    \n       nstep:    500\nsystem:    \n       memddi:    0\n       mwords:    500\n```\n\nNote that the default settings produce an SRS-MP2 optimisation using a cc-pVDZ\nbasis set. Here is the resulting input file:\n\n```\n $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 MPLEVL=2 \n  RUNTYP=OPTIMIZE SCFTYP=RHF $END\n $STATPT NSTEP=500 $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCD $END\n $MP2 CODE=IMS SCSOPO=1.752 SCSPAR=0.0 SCSPT=SCS $END\n $DATA\nh\nC1\n H       1.0   1.00000    2.00000    3.00000\n $END\n```\n\nTo change the parameters of the file, we use a `Settings` object.\n\nTo run an open shell single point calculation:\n\n```python\nfrom autochem import Settings, GamessJob\n\nsett = Settings()\nsett.input.contrl.runtyp='energy'\nsett.input.contrl.scftyp='ROHF'\n\ngamess = GamessJob('h.xyz', settings=sett)\n```\n\nGiving us this file:\n```\n $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 MPLEVL=2 \n  RUNTYP=ENERGY SCFTYP=ROHF $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCD $END\n $MP2 CODE=IMS SCSOPO=1.752 SCSPAR=0.0 SCSPT=SCS $END\n $DATA\nh\nC1\n H       1.0   1.00000    2.00000    3.00000\n $END\n```\n\n### Writing your own `Settings` objects\n\nWe are modifying the input file here, so use\n`sett.input`. Then as GAMESS uses a `$FLAG KEYWORD=VALUE` syntax, that is\nimplemented here as `sett.input.flag.keyword = value`.\n\nTo generate a GEODESIC partial charge calculation at the Hartree-Fock level,\nwe have to include some parameters to the `$ELPOT` (electric potential)\nsection, and remove the MP2 default settings:\n\n```python\nfrom autochem import Settings\n\nsett=Settings()\nsett.input.basis.gbasis='cct'\nsett.input.contrl.runtyp='energy'\nsett.input.elpot.iepot=1\nsett.input.elpot.where='pdc'\nsett.input.pdc.ptsel='geodesic'\n\n# rm defaults\nsett.input.contrl.mplevl=None\nsett.input.mp2=None\n```\n\nThis will then generate the following file:\n\n```\n $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 RUNTYP=ENERGY SCFTYP=RHF $END\n $ELPOT IEPOT=1 WHERE=PDC $END\n $PDC PTSEL=GEODESIC $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCT $END\n $DATA\ntitle\nC1\n coords...\n $END\n```\n\nTo run DFT calculations, remove the MP2 defaults and then add the appropriate\nsettings:\n\n```python\nfrom autochem import Settings\n\nsett=Settings()\nsett.input.mp2=None\nsett.input.contrl.mplevl=None\nsett.input.contrl.dfttyp='m06-2x'\nsett.input.dft.method='grid'\n```\n\n### Additional options\n\nWhen running FMO calculations, you may wish to group certain molecules together.\nThis can be acheived using `sett.grouped='sodium-bf4`, to group together sodium\nand tetrafluoroborate ions into one fragment.\n\nAlternatively, large molecules could be too large to run as one fragment. In\nthat case, use `sett.bonds_to_split=[(28,29), (40,41)]`, and pass in a nested\nlist of atoms that form the bonds that should be broken. (Currently\nexperimental and may not work as desired.)\n\nFMO jobs are run by using the `GamessJob(..., fmo=True)` option. If running\nusing the command line (`chem_assist -d`), FMO jobs can also be chosen.\n\n### Job information\n\nInformation for the SLURM/PBS schedulers are given as `sett.meta.option=choice`.\nFor GAMESS, options include `ncpus`, `mem`, `partition`, `time` and `jobfs` (PBS only).\n\n## GAUSSIAN\n\nGAUSSIAN commands are defined in groups with a `keyword` or `keyword=value`\nsyntax, such as `opt`, `opt=loose`, or `opt=(calcfc,noeigentest,ts)`.\n\nThis programs achieves the desired output by looking at the parameters set\ninside the `Settings` object and deciding which output to choose accordingly.\n\nThe following `Settings` file:\n\n```python\nfrom autochem import Settings\n\nsett=Settings()\nsett.input.opt='ts,noeigentest,calcfc'\nsett.input.freq=True\nsett.input.scrf='smd,solvent=water'\nsett.input.charge=0\nsett.input.mult=2\n```\n\nProduces the following input file:\n\n```\n%chk=opt-freq.chk\n%mem=160gb\n%nproc=48\n\n#P M062X/cc-pVDZ opt=(ts,noeigentest,calcfc) freq int=(grid=ultrafine) scrf=(smd,solvent=water)\n\nrerun\n\n0 2\ncoords...\n```\n\n### Job information\n\nInformation for the SLURM/PBS schedulers are given as `sett.meta.option=choice`.\nFor GAUSSIAN, options include `ncpus`, `mem` (%mem=... in the input file),\n`nodemem` (defining memory for the scheduler), `partition`, `time` and `jobfs` (PBS only).\n\n## PSI4\n\nPSI4 options are given as:\n- `self.input.molecule` for parameters inside the molecule section:\n```\nmolecule {\ncharge mult\n...\nunits ...\nsymmetry ...\n}\n```\n- `sett.input.globals` for parameters inside the globals section:\n```\nset globals {\n    basis ...\n    scf_type ...\n}\n```\nThe default settings are as follows:\n```python\nfrom autochem import PsiJob\npsi = PsiJob('file.xyz')\nprint(psi.input)\n```\n\n```\ncharge:    0\nglobals:\n        S_ORTHOGONALIZATION:    canonical\n        basis:    cc-pVTZ\n        freeze_core:    True\n        guess:    sad\n        scf_type:    DF\nmemory:    30 gb\nmolecule:\n         charge:    0\n         multiplicity:    1\n         symmetry:    c1\n         units:    angstrom\nmult:    1\nrun:\n    energy:    mp2\nunbound:\n```\n\nTo change the run type, use `sett.input.run = {'optimize': 'scf'}` to produce\n`optimize('scf')`.\nFor additional run types, use `sett.input.run.additional = {'dertype': 'energy'}` \nto produce `optimize('scf', dertype='energy')`. \n\nA possible `Settings` object may look like:\n```python\nfrom autochem import Settings\n\nsett = Settings()\nsett.input.memory='60gb'\nsett.input.globals.basis='aug-cc-pVTZ'\nsett.input.charge=2\nsett.input.mult=3\nsett.input.run = {'optimize': 'scf'}\nsett.input.run.additional = {'dertype': 'energy'}\n```\nwhich produces:\n```\n# PSI4 Calc: xyz\n\nmemory 60gb\n\nmolecule complex {\n2 3\n C       -3.94373    0.13147    0.12554\n C       -2.80294   -0.70993    0.69713\n ...\nunits angstrom\nno_reorient\nsymmetry c1\n}\n\nset globals {\n    S_ORTHOGONALIZATION canonical\n    basis aug-cc-pVTZ\n    freeze_core True\n    guess sad\n    scf_type DF\n}\noptimize('scf', dertype='energy')\n```\n\n### Counterpoise correction\n\nTo produce counterpoise corrected jobs, use `PsiJob(..., cp=True)`.\n\n### Job information\n\nInformation for the SLURM/PBS schedulers are given as `sett.meta.option=choice`.\nFor PSI4, options include `ncpus`, `mem`, `time`, `partition`, and `jobfs` (PBS\nonly).\n\n## ORCA\n\nORCA jobs rely on settings given as `!wB97X-D3 aug-cc-pVDZ RIJCOSX`, \nalong with more detailed commands given as\n```\n%pal\n  nprocs 48\nend\n```\nto produce a job that will run on 48 cpus.\n\nThis is acheived by the following `Settings` file:\n\n```python\nfrom autochem import Settings\n\nsett=Settings()\nsett.input.run='wB97X-D3 aug-cc-pVTZ RIJCOSX'\nsett.input.meta.tddft=\"\"\"\\\n  nroots 10\"\"\"\nsett.input.meta.cpcm=\"\"\"\\\n  SMD true\n  SMDSolvent \"DMSO\" \"\"\"\n```\n\nWhich produces the following input file:\n\n```\n!wB97X-D3 aug-cc-pVDZ RIJCOSX CPCM\n\n%pal\n nprocs 48\nend\n\n%cpcm\n  SMD true\n  SMDSolvent \"DMSO\"\nend\n\n%tddft\n  nroots 10\n  tda false\nend\n\n*xyzfile ...\n```\n\n### Job information\n\nInformation for the SLURM/PBS schedulers are given as `sett.meta.option=choice`.\nFor ORCA, options include `ncpus`, `mem`, `time`, `partition`, and `jobfs` (PBS\nonly).\n\n## Inputs for all molecules in an xyz file\n\nAll calculations have the option of producing files for each molecule in the\nsystem. To do this, pass in a `frags_in_subdir` option. For example,\n`GaussJob('file.xyz', frags_in_subdir=True, settings=sett)`.\n\nWhen running from the command line with `chem_assist -d`, input files can \nalso be created for all molecules in the system.\n\nNote that an ionic cluster will also be produced i.e. the original xyz file \nwith all neutral molecules removed.\n\n## Information for job schedulers\n\nThe program is designed to run on remote supercomputers, and uses the `hostname`\nof the user's account to decide which job file should be created. Alternatively,\nusers can pass in a `sett.supercomp='cluster'` option to force the program to create job\nscripts for a desired cluster. Options include 'gadi', 'rjn' or 'raijin', 'mgs'\nor 'magnus', 'mon' or 'monarch', 'm3', 'mas' or 'massive', and 'stm' or\n'stampede'.\nAny of those options will work.\nFor GAMESS jobs, separate job scripts are provided to use either the standard\nversions of GAMESS, or the modified version that implements the option to choose\nMP2 spin parameters.\n\nSubmission of jobs can be handled by a shell script such as:\n\n```bash\n#!/bin/bash\n\n[[ $HOSTNAME =~ gadi ]] && submit=\"qsub\" || submit=\"sbatch\"\n\ncwd=$(pwd)\nfor f in $(find . -name \"*job\")\ndo\n    cd \"$(dirname $f)\"\n    logs_in_dir=$(ls *log 2>/dev/null | wc -l)\n    [[ $logs_in_dir -eq 0 ]] && $submit \"$(basename $f)\"\n    cd $cwd\ndone\n```\n\n# Obtaining results\n\nThis program allows users to extract data using a command line interface.\nThe table below highlights the desired data and the command required:\n\nData  | Command\n:---: | :---:\nEnergies | `chem_assist -r`\nPartial charges | `chem_assist --charges`\nFluorescence data | `chem_assist --fluorescence`\nHOMO-LUMO data | `chem_assist --homo-lumo`\nHydrogen bond data | `chem_assist -b`\nThermochemistry data | `chem_assist -t [temp in K] -m [multiplicity]`\nFrequencies | `chem_assist --freqs-to-csv`\n\nEvery command shown above produces a csv file. These commands also \nallow you to give a filename with the `-o` parameter. For example, \n`chem_assist --homo-lumo -o homo_lumo.csv` to save the data into\n`homo_lumo.csv`.\n\nOutputs can also be limited to files that contain\na certain string in their path. To do this, use the `-l` flag. For example,\n`chem_assist -rl 'spec'` to return only single point energies.\n\nIn addition, other information can be found:\n- to look for equilibrated coordinates, use `chem_assist -e`\n  - this will create either `spec` or `rerun` directories as subdirectories of\n    each log file, depending on whether the optimisations have completed.\n- to print out fragments of each xyz file in a directory, use `chem_assist -p`.\n  If you wish for fragments to be grouped, use \n  `chem_assist -p -g 'lithium-sacchrinate'`. To give a more verbose output,\n  showing the atom numbers of each fragment, use the `-v` flag.\n- Interaction energies can be calculated using the output of `chem_assist -r`,\n  by using the `-c` flag.\n  By default, this assumes that you want to calculate the interaction of each\n  species in the cluster. i.e. cluster - sum(all_molecules).\n  If you wish to calculate the interaction of neutral species i.e. cluster -\n  ionic - sum(neutral), pass in a `-with-ionic` flag. For example, \n  `chem_assist -c [results.csv] --with-ionic`. (Experimental, use with caution.)\n- Gibbs free energies can also be calculated, by taking in the thermochemical\n  data of `chem_assist -t [temp in K] -m [multiplicity]`, the interaction\n  energies of `chem_assist -c [results.csv] [--with-ionic]`. (Experimental, use\n  with caution.)\n- Boltzmann-weighted interaction energies can be calculated using the output of\n  `chem_assist -c [results.csv] [--with-ionic]`. A grouping parameter is\n  required here, and is written as though the csv file is described as `df`, a\n  `pandas.DataFrame` object. For example, \n  `chem_assist -w data.csv --group df['Config'].str.split('-').str[:-1].str.join('-')`. \n  (Experimental, use with caution)\n\n# Adding additional molecules to the database\n\nAdd molecules to the `~/.config/autochem/molecules.txt` file, \nusing the format of:\n```\nname=dihydrogen_citrate\ncharge=-1\nmultiplicity=1\natoms=C,C,C,H,H,O,O,C,O,C,C,H,H,O,H,O,H,H,O,O\n```\n\nMake sure that names do not contain spaces.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tommason14/monash_automation", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "autochem", "package_url": "https://pypi.org/project/autochem/", "platform": "", "project_url": "https://pypi.org/project/autochem/", "project_urls": {"Homepage": "https://github.com/tommason14/monash_automation"}, "release_url": "https://pypi.org/project/autochem/0.0.3/", "requires_dist": ["pandas (>=1.0.1)", "numpy (>=1.18.2)", "dfply (>=0.3.3)"], "requires_python": ">=3.6", "summary": "Automates creation and post-processing of quantum chemical calculations", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>autochem</h1>\n<h1>Overview</h1>\n<p>Python OOP project, implementing GAMESS, GAUSSIAN, PSI4 and ORCA file production and\nsubmission to SLURM and PBS scheduling systems. GAMESS implementations focus\nheavily on the Fragment Molecular Orbital approach to\nquantum chemical calculations, and input files are generated for\n<a href=\"https://aip.scitation.org/doi/10.1063/1.4975326\" rel=\"nofollow\">SRS-MP2</a> jobs by default in GAMESS.</p>\n<p>Use this code for:</p>\n<ul>\n<li>Automatic input and job file creation</li>\n<li>Scraping log files for relevant results:\n<ul>\n<li>energies</li>\n<li>geometries\n<ul>\n<li>intermolecular hydrogen bond lengths</li>\n</ul>\n</li>\n<li>vibrations</li>\n<li>fluorescence data</li>\n<li>geodesic charges</li>\n<li>homo-lumo gaps</li>\n</ul>\n</li>\n<li>Automatic analysis of results\n<ul>\n<li>interaction energies\n<ul>\n<li>purely ionic systems</li>\n<li>mixed ionic/neutral species</li>\n</ul>\n</li>\n<li>calculates free energies</li>\n</ul>\n</li>\n</ul>\n<p>Also exportable as a python package, and can be easily extended. See the\n<a href=\"https://github.com/tommason14/monash_automation/tree/master/examples\" rel=\"nofollow\">examples</a> for more details.</p>\n<p>Currently set up for the following supercomputers:</p>\n<ul>\n<li>Gadi (Canberra)</li>\n<li>Raijin (Canberra, now decommissioned)</li>\n<li>Magnus (Perth)</li>\n<li>Monarch (Melbourne)</li>\n<li>Massive (Melbourne)</li>\n<li>Stampede2 (Texas)</li>\n</ul>\n<h1>Example Usage</h1>\n<h1>Creating input files for computational calculations</h1>\n<p>Important: When creating job files, all data for a job can be modified through the use of a\n<code>Settings</code> object.</p>\n<p>Users have various options when choosing how to create input and job files:</p>\n<ol>\n<li>Create a python script including the desired input file and job parameters,\nand run the job using a python class. For example:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">GaussJob</span><span class=\"p\">,</span> <span class=\"n\">Settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">glob</span> <span class=\"kn\">import</span> <span class=\"n\">glob</span>\n\n<span class=\"n\">xyz</span> <span class=\"o\">=</span> <span class=\"n\">glob</span><span class=\"p\">(</span><span class=\"s1\">'*xyz'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"c1\"># find the xyz file to run</span>\n\n<span class=\"n\">sett</span><span class=\"o\">=</span><span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"c1\"># define the input parameters</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'wb97xd'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'aug-cc-pVDZ'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">opt</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"o\">=</span><span class=\"s1\">'nstates=10,root=9'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">scrf</span><span class=\"o\">=</span><span class=\"s1\">'smd,solvent=n,n-DiMethylFormamide'</span>\n<span class=\"c1\"># define job scheduler parameters</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"s1\">'160gb'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">ncpus</span><span class=\"o\">=</span><span class=\"mi\">48</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">nodemem</span><span class=\"o\">=</span><span class=\"s1\">'192GB'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">'24:00:00'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">jobfs</span><span class=\"o\">=</span><span class=\"s1\">'400gb'</span>\n\n<span class=\"c1\"># create the input and job files</span>\n<span class=\"n\">GaussJob</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">sett</span><span class=\"p\">)</span>\n</pre>\n<p>Using this method, options such as <code>frags_in_subdir=True</code> can be used, or\n<code>filename</code> can be used to give the name of input/job files. Otherwise, jobs are\nnamed according to their run types (optimisations are named <code>opt</code>, single points\nare named <code>spec</code> and frequency calculations are named <code>hess</code>).</p>\n<ol>\n<li>Store the parameters of the <code>Settings</code> object in a python file, then run from\nthe command line:</li>\n</ol>\n<pre><span class=\"c1\"># settings.py</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'wb97xd'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'aug-cc-pVDZ'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">opt</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">td</span><span class=\"o\">=</span><span class=\"s1\">'nstates=10,root=9'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">scrf</span><span class=\"o\">=</span><span class=\"s1\">'smd,solvent=n,n-DiMethylFormamide'</span>\n\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"s1\">'160gb'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">ncpus</span><span class=\"o\">=</span><span class=\"mi\">48</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">nodemem</span><span class=\"o\">=</span><span class=\"s1\">'192GB'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"s1\">'24:00:00'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">jobfs</span><span class=\"o\">=</span><span class=\"s1\">'400gb'</span>\n</pre>\n<p>then run from the command line using <code>chem_assist -d -s settings.py</code>, which\ntakes in every xyz file in the current directory and creates jobs using\nparameters from the <code>Settings</code> object in <code>settings.py</code>.\nNote: using this method, the <code>Settings</code> object must be called <code>sett</code>.</p>\n<p>Example settings can be found in the <a href=\"https://github.com/tommason14/monash_automation/tree/master/settings_files\" rel=\"nofollow\">settings_files</a>\ndirectory.</p>\n<p>Methods of defining input and job parameters for each software are different, and\noutlined below.</p>\n<h2>GAMESS-US</h2>\n<p>Using a dummy system, <code>h.xyz</code>, we can see the default options like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">GamessJob</span>\n\n<span class=\"n\">gamess</span> <span class=\"o\">=</span> <span class=\"n\">GamessJob</span><span class=\"p\">(</span><span class=\"s1\">'h.xyz'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gamess</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span>\n</pre>\n<p>which produces:</p>\n<pre><code>basis:    \n      gbasis:    ccd\ncontrl:    \n       icharg:    0\n       ispher:    1\n       maxit:    200\n       mplevl:    2\n       runtyp:    optimize\n       scftyp:    rhf\nmp2:    \n    code:    ims\n    scsopo:    1.752\n    scspar:    0.0\n    scspt:    scs\nscf:    \n    diis:    .true.\n    dirscf:    .true.\n    fdiff:    .false.\nstatpt:    \n       nstep:    500\nsystem:    \n       memddi:    0\n       mwords:    500\n</code></pre>\n<p>Note that the default settings produce an SRS-MP2 optimisation using a cc-pVDZ\nbasis set. Here is the resulting input file:</p>\n<pre><code> $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 MPLEVL=2 \n  RUNTYP=OPTIMIZE SCFTYP=RHF $END\n $STATPT NSTEP=500 $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCD $END\n $MP2 CODE=IMS SCSOPO=1.752 SCSPAR=0.0 SCSPT=SCS $END\n $DATA\nh\nC1\n H       1.0   1.00000    2.00000    3.00000\n $END\n</code></pre>\n<p>To change the parameters of the file, we use a <code>Settings</code> object.</p>\n<p>To run an open shell single point calculation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span><span class=\"p\">,</span> <span class=\"n\">GamessJob</span>\n\n<span class=\"n\">sett</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">runtyp</span><span class=\"o\">=</span><span class=\"s1\">'energy'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">scftyp</span><span class=\"o\">=</span><span class=\"s1\">'ROHF'</span>\n\n<span class=\"n\">gamess</span> <span class=\"o\">=</span> <span class=\"n\">GamessJob</span><span class=\"p\">(</span><span class=\"s1\">'h.xyz'</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">=</span><span class=\"n\">sett</span><span class=\"p\">)</span>\n</pre>\n<p>Giving us this file:</p>\n<pre><code> $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 MPLEVL=2 \n  RUNTYP=ENERGY SCFTYP=ROHF $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCD $END\n $MP2 CODE=IMS SCSOPO=1.752 SCSPAR=0.0 SCSPT=SCS $END\n $DATA\nh\nC1\n H       1.0   1.00000    2.00000    3.00000\n $END\n</code></pre>\n<h3>Writing your own <code>Settings</code> objects</h3>\n<p>We are modifying the input file here, so use\n<code>sett.input</code>. Then as GAMESS uses a <code>$FLAG KEYWORD=VALUE</code> syntax, that is\nimplemented here as <code>sett.input.flag.keyword = value</code>.</p>\n<p>To generate a GEODESIC partial charge calculation at the Hartree-Fock level,\nwe have to include some parameters to the <code>$ELPOT</code> (electric potential)\nsection, and remove the MP2 default settings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span>\n\n<span class=\"n\">sett</span><span class=\"o\">=</span><span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">basis</span><span class=\"o\">.</span><span class=\"n\">gbasis</span><span class=\"o\">=</span><span class=\"s1\">'cct'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">runtyp</span><span class=\"o\">=</span><span class=\"s1\">'energy'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">elpot</span><span class=\"o\">.</span><span class=\"n\">iepot</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">elpot</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"s1\">'pdc'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">pdc</span><span class=\"o\">.</span><span class=\"n\">ptsel</span><span class=\"o\">=</span><span class=\"s1\">'geodesic'</span>\n\n<span class=\"c1\"># rm defaults</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">mplevl</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">mp2</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n</pre>\n<p>This will then generate the following file:</p>\n<pre><code> $SYSTEM MEMDDI=0 MWORDS=500 $END\n $CONTRL ICHARG=0 ISPHER=1 MAXIT=200 RUNTYP=ENERGY SCFTYP=RHF $END\n $ELPOT IEPOT=1 WHERE=PDC $END\n $PDC PTSEL=GEODESIC $END\n $SCF DIIS=.TRUE. DIRSCF=.TRUE. FDIFF=.FALSE. $END\n $BASIS GBASIS=CCT $END\n $DATA\ntitle\nC1\n coords...\n $END\n</code></pre>\n<p>To run DFT calculations, remove the MP2 defaults and then add the appropriate\nsettings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span>\n\n<span class=\"n\">sett</span><span class=\"o\">=</span><span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">mp2</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">mplevl</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">contrl</span><span class=\"o\">.</span><span class=\"n\">dfttyp</span><span class=\"o\">=</span><span class=\"s1\">'m06-2x'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">dft</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'grid'</span>\n</pre>\n<h3>Additional options</h3>\n<p>When running FMO calculations, you may wish to group certain molecules together.\nThis can be acheived using <code>sett.grouped='sodium-bf4</code>, to group together sodium\nand tetrafluoroborate ions into one fragment.</p>\n<p>Alternatively, large molecules could be too large to run as one fragment. In\nthat case, use <code>sett.bonds_to_split=[(28,29), (40,41)]</code>, and pass in a nested\nlist of atoms that form the bonds that should be broken. (Currently\nexperimental and may not work as desired.)</p>\n<p>FMO jobs are run by using the <code>GamessJob(..., fmo=True)</code> option. If running\nusing the command line (<code>chem_assist -d</code>), FMO jobs can also be chosen.</p>\n<h3>Job information</h3>\n<p>Information for the SLURM/PBS schedulers are given as <code>sett.meta.option=choice</code>.\nFor GAMESS, options include <code>ncpus</code>, <code>mem</code>, <code>partition</code>, <code>time</code> and <code>jobfs</code> (PBS only).</p>\n<h2>GAUSSIAN</h2>\n<p>GAUSSIAN commands are defined in groups with a <code>keyword</code> or <code>keyword=value</code>\nsyntax, such as <code>opt</code>, <code>opt=loose</code>, or <code>opt=(calcfc,noeigentest,ts)</code>.</p>\n<p>This programs achieves the desired output by looking at the parameters set\ninside the <code>Settings</code> object and deciding which output to choose accordingly.</p>\n<p>The following <code>Settings</code> file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span>\n\n<span class=\"n\">sett</span><span class=\"o\">=</span><span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">opt</span><span class=\"o\">=</span><span class=\"s1\">'ts,noeigentest,calcfc'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">scrf</span><span class=\"o\">=</span><span class=\"s1\">'smd,solvent=water'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">mult</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n</pre>\n<p>Produces the following input file:</p>\n<pre><code>%chk=opt-freq.chk\n%mem=160gb\n%nproc=48\n\n#P M062X/cc-pVDZ opt=(ts,noeigentest,calcfc) freq int=(grid=ultrafine) scrf=(smd,solvent=water)\n\nrerun\n\n0 2\ncoords...\n</code></pre>\n<h3>Job information</h3>\n<p>Information for the SLURM/PBS schedulers are given as <code>sett.meta.option=choice</code>.\nFor GAUSSIAN, options include <code>ncpus</code>, <code>mem</code> (%mem=... in the input file),\n<code>nodemem</code> (defining memory for the scheduler), <code>partition</code>, <code>time</code> and <code>jobfs</code> (PBS only).</p>\n<h2>PSI4</h2>\n<p>PSI4 options are given as:</p>\n<ul>\n<li><code>self.input.molecule</code> for parameters inside the molecule section:</li>\n</ul>\n<pre><code>molecule {\ncharge mult\n...\nunits ...\nsymmetry ...\n}\n</code></pre>\n<ul>\n<li><code>sett.input.globals</code> for parameters inside the globals section:</li>\n</ul>\n<pre><code>set globals {\n    basis ...\n    scf_type ...\n}\n</code></pre>\n<p>The default settings are as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">PsiJob</span>\n<span class=\"n\">psi</span> <span class=\"o\">=</span> <span class=\"n\">PsiJob</span><span class=\"p\">(</span><span class=\"s1\">'file.xyz'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">psi</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span>\n</pre>\n<pre><code>charge:    0\nglobals:\n        S_ORTHOGONALIZATION:    canonical\n        basis:    cc-pVTZ\n        freeze_core:    True\n        guess:    sad\n        scf_type:    DF\nmemory:    30 gb\nmolecule:\n         charge:    0\n         multiplicity:    1\n         symmetry:    c1\n         units:    angstrom\nmult:    1\nrun:\n    energy:    mp2\nunbound:\n</code></pre>\n<p>To change the run type, use <code>sett.input.run = {'optimize': 'scf'}</code> to produce\n<code>optimize('scf')</code>.\nFor additional run types, use <code>sett.input.run.additional = {'dertype': 'energy'}</code>\nto produce <code>optimize('scf', dertype='energy')</code>.</p>\n<p>A possible <code>Settings</code> object may look like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span>\n\n<span class=\"n\">sett</span> <span class=\"o\">=</span> <span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"s1\">'60gb'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">globals</span><span class=\"o\">.</span><span class=\"n\">basis</span><span class=\"o\">=</span><span class=\"s1\">'aug-cc-pVTZ'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">charge</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">mult</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'optimize'</span><span class=\"p\">:</span> <span class=\"s1\">'scf'</span><span class=\"p\">}</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">additional</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'dertype'</span><span class=\"p\">:</span> <span class=\"s1\">'energy'</span><span class=\"p\">}</span>\n</pre>\n<p>which produces:</p>\n<pre><code># PSI4 Calc: xyz\n\nmemory 60gb\n\nmolecule complex {\n2 3\n C       -3.94373    0.13147    0.12554\n C       -2.80294   -0.70993    0.69713\n ...\nunits angstrom\nno_reorient\nsymmetry c1\n}\n\nset globals {\n    S_ORTHOGONALIZATION canonical\n    basis aug-cc-pVTZ\n    freeze_core True\n    guess sad\n    scf_type DF\n}\noptimize('scf', dertype='energy')\n</code></pre>\n<h3>Counterpoise correction</h3>\n<p>To produce counterpoise corrected jobs, use <code>PsiJob(..., cp=True)</code>.</p>\n<h3>Job information</h3>\n<p>Information for the SLURM/PBS schedulers are given as <code>sett.meta.option=choice</code>.\nFor PSI4, options include <code>ncpus</code>, <code>mem</code>, <code>time</code>, <code>partition</code>, and <code>jobfs</code> (PBS\nonly).</p>\n<h2>ORCA</h2>\n<p>ORCA jobs rely on settings given as <code>!wB97X-D3 aug-cc-pVDZ RIJCOSX</code>,\nalong with more detailed commands given as</p>\n<pre><code>%pal\n  nprocs 48\nend\n</code></pre>\n<p>to produce a job that will run on 48 cpus.</p>\n<p>This is acheived by the following <code>Settings</code> file:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autochem</span> <span class=\"kn\">import</span> <span class=\"n\">Settings</span>\n\n<span class=\"n\">sett</span><span class=\"o\">=</span><span class=\"n\">Settings</span><span class=\"p\">()</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">=</span><span class=\"s1\">'wB97X-D3 aug-cc-pVTZ RIJCOSX'</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">tddft</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">  nroots 10\"\"\"</span>\n<span class=\"n\">sett</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">cpcm</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">  SMD true</span>\n<span class=\"s2\">  SMDSolvent \"DMSO\" \"\"\"</span>\n</pre>\n<p>Which produces the following input file:</p>\n<pre><code>!wB97X-D3 aug-cc-pVDZ RIJCOSX CPCM\n\n%pal\n nprocs 48\nend\n\n%cpcm\n  SMD true\n  SMDSolvent \"DMSO\"\nend\n\n%tddft\n  nroots 10\n  tda false\nend\n\n*xyzfile ...\n</code></pre>\n<h3>Job information</h3>\n<p>Information for the SLURM/PBS schedulers are given as <code>sett.meta.option=choice</code>.\nFor ORCA, options include <code>ncpus</code>, <code>mem</code>, <code>time</code>, <code>partition</code>, and <code>jobfs</code> (PBS\nonly).</p>\n<h2>Inputs for all molecules in an xyz file</h2>\n<p>All calculations have the option of producing files for each molecule in the\nsystem. To do this, pass in a <code>frags_in_subdir</code> option. For example,\n<code>GaussJob('file.xyz', frags_in_subdir=True, settings=sett)</code>.</p>\n<p>When running from the command line with <code>chem_assist -d</code>, input files can\nalso be created for all molecules in the system.</p>\n<p>Note that an ionic cluster will also be produced i.e. the original xyz file\nwith all neutral molecules removed.</p>\n<h2>Information for job schedulers</h2>\n<p>The program is designed to run on remote supercomputers, and uses the <code>hostname</code>\nof the user's account to decide which job file should be created. Alternatively,\nusers can pass in a <code>sett.supercomp='cluster'</code> option to force the program to create job\nscripts for a desired cluster. Options include 'gadi', 'rjn' or 'raijin', 'mgs'\nor 'magnus', 'mon' or 'monarch', 'm3', 'mas' or 'massive', and 'stm' or\n'stampede'.\nAny of those options will work.\nFor GAMESS jobs, separate job scripts are provided to use either the standard\nversions of GAMESS, or the modified version that implements the option to choose\nMP2 spin parameters.</p>\n<p>Submission of jobs can be handled by a shell script such as:</p>\n<pre><span class=\"ch\">#!/bin/bash</span>\n\n<span class=\"o\">[[</span> <span class=\"nv\">$HOSTNAME</span> <span class=\"o\">=</span>~ gadi <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">submit</span><span class=\"o\">=</span><span class=\"s2\">\"qsub\"</span> <span class=\"o\">||</span> <span class=\"nv\">submit</span><span class=\"o\">=</span><span class=\"s2\">\"sbatch\"</span>\n\n<span class=\"nv\">cwd</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>\n<span class=\"k\">for</span> f in <span class=\"k\">$(</span>find . -name <span class=\"s2\">\"*job\"</span><span class=\"k\">)</span>\n<span class=\"k\">do</span>\n    <span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span>dirname <span class=\"nv\">$f</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n    <span class=\"nv\">logs_in_dir</span><span class=\"o\">=</span><span class=\"k\">$(</span>ls *log <span class=\"m\">2</span>&gt;/dev/null <span class=\"p\">|</span> wc -l<span class=\"k\">)</span>\n    <span class=\"o\">[[</span> <span class=\"nv\">$logs_in_dir</span> -eq <span class=\"m\">0</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$submit</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span>basename <span class=\"nv\">$f</span><span class=\"k\">)</span><span class=\"s2\">\"</span>\n    <span class=\"nb\">cd</span> <span class=\"nv\">$cwd</span>\n<span class=\"k\">done</span>\n</pre>\n<h1>Obtaining results</h1>\n<p>This program allows users to extract data using a command line interface.\nThe table below highlights the desired data and the command required:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Data</th>\n<th align=\"center\">Command</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Energies</td>\n<td align=\"center\"><code>chem_assist -r</code></td>\n</tr>\n<tr>\n<td align=\"center\">Partial charges</td>\n<td align=\"center\"><code>chem_assist --charges</code></td>\n</tr>\n<tr>\n<td align=\"center\">Fluorescence data</td>\n<td align=\"center\"><code>chem_assist --fluorescence</code></td>\n</tr>\n<tr>\n<td align=\"center\">HOMO-LUMO data</td>\n<td align=\"center\"><code>chem_assist --homo-lumo</code></td>\n</tr>\n<tr>\n<td align=\"center\">Hydrogen bond data</td>\n<td align=\"center\"><code>chem_assist -b</code></td>\n</tr>\n<tr>\n<td align=\"center\">Thermochemistry data</td>\n<td align=\"center\"><code>chem_assist -t [temp in K] -m [multiplicity]</code></td>\n</tr>\n<tr>\n<td align=\"center\">Frequencies</td>\n<td align=\"center\"><code>chem_assist --freqs-to-csv</code></td>\n</tr></tbody></table>\n<p>Every command shown above produces a csv file. These commands also\nallow you to give a filename with the <code>-o</code> parameter. For example,\n<code>chem_assist --homo-lumo -o homo_lumo.csv</code> to save the data into\n<code>homo_lumo.csv</code>.</p>\n<p>Outputs can also be limited to files that contain\na certain string in their path. To do this, use the <code>-l</code> flag. For example,\n<code>chem_assist -rl 'spec'</code> to return only single point energies.</p>\n<p>In addition, other information can be found:</p>\n<ul>\n<li>to look for equilibrated coordinates, use <code>chem_assist -e</code>\n<ul>\n<li>this will create either <code>spec</code> or <code>rerun</code> directories as subdirectories of\neach log file, depending on whether the optimisations have completed.</li>\n</ul>\n</li>\n<li>to print out fragments of each xyz file in a directory, use <code>chem_assist -p</code>.\nIf you wish for fragments to be grouped, use\n<code>chem_assist -p -g 'lithium-sacchrinate'</code>. To give a more verbose output,\nshowing the atom numbers of each fragment, use the <code>-v</code> flag.</li>\n<li>Interaction energies can be calculated using the output of <code>chem_assist -r</code>,\nby using the <code>-c</code> flag.\nBy default, this assumes that you want to calculate the interaction of each\nspecies in the cluster. i.e. cluster - sum(all_molecules).\nIf you wish to calculate the interaction of neutral species i.e. cluster -\nionic - sum(neutral), pass in a <code>-with-ionic</code> flag. For example,\n<code>chem_assist -c [results.csv] --with-ionic</code>. (Experimental, use with caution.)</li>\n<li>Gibbs free energies can also be calculated, by taking in the thermochemical\ndata of <code>chem_assist -t [temp in K] -m [multiplicity]</code>, the interaction\nenergies of <code>chem_assist -c [results.csv] [--with-ionic]</code>. (Experimental, use\nwith caution.)</li>\n<li>Boltzmann-weighted interaction energies can be calculated using the output of\n<code>chem_assist -c [results.csv] [--with-ionic]</code>. A grouping parameter is\nrequired here, and is written as though the csv file is described as <code>df</code>, a\n<code>pandas.DataFrame</code> object. For example,\n<code>chem_assist -w data.csv --group df['Config'].str.split('-').str[:-1].str.join('-')</code>.\n(Experimental, use with caution)</li>\n</ul>\n<h1>Adding additional molecules to the database</h1>\n<p>Add molecules to the <code>~/.config/autochem/molecules.txt</code> file,\nusing the format of:</p>\n<pre><code>name=dihydrogen_citrate\ncharge=-1\nmultiplicity=1\natoms=C,C,C,H,H,O,O,C,O,C,C,H,H,O,H,O,H,H,O,O\n</code></pre>\n<p>Make sure that names do not contain spaces.</p>\n\n          </div>"}, "last_serial": 7168442, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c617fa0e9307a530b077c1dd689d55dd", "sha256": "6775369ac5835215794c8de658331c20129ca00de26afb1791b379fd537028f8"}, "downloads": -1, "filename": "autochem-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c617fa0e9307a530b077c1dd689d55dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 94295, "upload_time": "2020-05-03T04:04:51", "upload_time_iso_8601": "2020-05-03T04:04:51.350272Z", "url": "https://files.pythonhosted.org/packages/29/1d/3fb581b01c8204a833b78162ab38f349a4b54dcfb89fd13a1cbd3d4e2ad0/autochem-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c59c2fbbcc2c116c6df9c7d6e870988", "sha256": "d40dab1a03e7bfbec006d548d10e5c190373ed6dfc5e69bda218207bc66dc453"}, "downloads": -1, "filename": "autochem-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0c59c2fbbcc2c116c6df9c7d6e870988", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 84521, "upload_time": "2020-05-03T04:04:54", "upload_time_iso_8601": "2020-05-03T04:04:54.217466Z", "url": "https://files.pythonhosted.org/packages/bd/5e/4f5224dbb77adcf20ca10c98f146702c63e8f0988d0e92d88271cb519bb4/autochem-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "faba50712a1cf5caef8fa8c888c3b9f4", "sha256": "d8f4fc19efe7f52442d6406ede5ebc465ef168d9a18c289f05092548573921eb"}, "downloads": -1, "filename": "autochem-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "faba50712a1cf5caef8fa8c888c3b9f4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 94308, "upload_time": "2020-05-03T04:12:12", "upload_time_iso_8601": "2020-05-03T04:12:12.588946Z", "url": "https://files.pythonhosted.org/packages/35/a0/e92f29e5d8b2fc4823313ac10faf1c1eecf3ba6ee9ccdf7f5846962ff3de/autochem-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5f5106cd45c8963e5a54d7980d17531", "sha256": "83b4c3ba97c3add6fa2fad46f7cd748a1027abc27c4a6ecb69054290019d8816"}, "downloads": -1, "filename": "autochem-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f5f5106cd45c8963e5a54d7980d17531", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 84548, "upload_time": "2020-05-03T04:12:14", "upload_time_iso_8601": "2020-05-03T04:12:14.230452Z", "url": "https://files.pythonhosted.org/packages/7a/50/4aeeb28c4a8e4c48d156c97c2370bf99e9574e7b8dc66644a24106233c5d/autochem-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9f2dd05d16059e412bbc5c0ebcaae417", "sha256": "48c4acd03370e8297bef181c7318a8c9a79f2cb0b50810132dbf578f9c0a8589"}, "downloads": -1, "filename": "autochem-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9f2dd05d16059e412bbc5c0ebcaae417", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 94460, "upload_time": "2020-05-04T23:16:13", "upload_time_iso_8601": "2020-05-04T23:16:13.397614Z", "url": "https://files.pythonhosted.org/packages/94/5a/53abb24a0ce934a8050460493da0991d942664731f820708e6c4470c6bc5/autochem-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19bf2c0547b3c13f3992cea30f0a65ff", "sha256": "429ab4ca2f3f4863ebcad01cd2622f966b21b32cbcb18d24175405b2e5126fba"}, "downloads": -1, "filename": "autochem-0.0.3.tar.gz", "has_sig": false, "md5_digest": "19bf2c0547b3c13f3992cea30f0a65ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 84694, "upload_time": "2020-05-04T23:16:14", "upload_time_iso_8601": "2020-05-04T23:16:14.952801Z", "url": "https://files.pythonhosted.org/packages/15/06/69ef4766dcbb53bcbbc1c04c306fd37885e750ef579f6775ae0377adf5ed/autochem-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9f2dd05d16059e412bbc5c0ebcaae417", "sha256": "48c4acd03370e8297bef181c7318a8c9a79f2cb0b50810132dbf578f9c0a8589"}, "downloads": -1, "filename": "autochem-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9f2dd05d16059e412bbc5c0ebcaae417", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 94460, "upload_time": "2020-05-04T23:16:13", "upload_time_iso_8601": "2020-05-04T23:16:13.397614Z", "url": "https://files.pythonhosted.org/packages/94/5a/53abb24a0ce934a8050460493da0991d942664731f820708e6c4470c6bc5/autochem-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19bf2c0547b3c13f3992cea30f0a65ff", "sha256": "429ab4ca2f3f4863ebcad01cd2622f966b21b32cbcb18d24175405b2e5126fba"}, "downloads": -1, "filename": "autochem-0.0.3.tar.gz", "has_sig": false, "md5_digest": "19bf2c0547b3c13f3992cea30f0a65ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 84694, "upload_time": "2020-05-04T23:16:14", "upload_time_iso_8601": "2020-05-04T23:16:14.952801Z", "url": "https://files.pythonhosted.org/packages/15/06/69ef4766dcbb53bcbbc1c04c306fd37885e750ef579f6775ae0377adf5ed/autochem-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:20 2020"}