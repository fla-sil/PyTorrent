{"info": {"author": "Matt Clarkson", "author_email": "m.clarkson@ucl.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Healthcare Industry", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "scikit-surgerytf\n===============================\n\n.. image:: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/raw/master/project-icon.png\n   :height: 128px\n   :width: 128px\n   :target: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n   :alt: Logo\n\n.. image:: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/badges/master/pipeline.svg\n   :target: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/pipelines\n   :alt: GitLab-CI test status\n\n.. image:: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/badges/master/coverage.svg\n    :target: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/commits/master\n    :alt: Test coverage\n\n.. image:: https://readthedocs.org/projects/scikit-surgerytf/badge/?version=latest\n    :target: http://scikit-surgerytf.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\nAuthor: Matt Clarkson\n\nscikit-surgerytf is part of the `SNAPPY`_ software project, developed at the `Wellcome EPSRC Centre for Interventional and Surgical Sciences`_, part of `University College London (UCL)`_.\n\nscikit-surgerytf supports Python 3.6+, and tensorflow >= 2.0.0.\n\nThe aim of scikit-surgerytf is to provide a home for various Tensor Flow examples and\nutilities and to show best practice. It's NOT meant to be a layer on-top of Tensor Flow\nor provide a new kind-of platform. The aim is that researchers can learn from examples,\nand importantly, learn how to deliver an algorithm that can be used by other people\nout of the box, with just a ```pip install```, rather than a new user having to\nre-implement stuff, or struggle to get someone else's code running. Researchers\ncan commit their research to this repository, or use the `PythonTemplate`_ to\ngenerate their own project as a home for their new world-beating algorithm!\n\nFeatures\n----------\n\nEach project herein should provide the following:\n\n* Code that passes pylint.\n* Unit testing, as appropriate. In all likelihood, testing will cover individual functions, not large training cycles.\n* Sufficient logging, including date, time, software (git) version, runtime folder, machine name.\n* A main class containing a network that can be run separately in train/test mode.\n* Visualisation with TensorBoard.\n* Saving of learned network weights at the end of training.\n* Loading of pre-train weights, initialising the network ready for inference.\n* The ability to be run repeatedly for hyper-parameter tuning via python scripting, not bash.\n* The ability to be callable from within a Jupyter Notebook, and thereby amenable to weekly writup's for supervisions.\n* One or more command line programs that are pip-installable, enabling a subsequent user to train and test your algorithm with almost-zero faff.\n* Visualisation for debugging purposes, such as printing example image thumbnails etc. should be done in Jupyter notebooks, or in tensorboard, not in the same class as your algorithm.\n\nOptional features could include:\n\n* Small test projects that train quickly to completion won't need checkpointing, but large ones will.\n\n\nNetworks\n--------\n\n* sksurgeryfashion.py: The usual FashionMNIST example, for learning purposes.\n* sksurgeryrgbunet.py: RGB `UNet <https://doi.org/10.1007/978-3-319-24574-4_28>`_ example.\n\nUsage\n-----\n\nTypical instructions for use:\n\nFirst create a clean python environment, just installing tox::\n\n    # Create a clean conda environment\n    conda create -n myenv python=3.6\n    conda activate myenv\n    pip install tox\n\n\nThen you get the code, and use tox to install all other dependencies::\n\n    git clone https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n    cd scikit-surgerytf\n    # edit requirements.txt, changing tensorflow to tensorflow-gpu.\n    # The default is the CPU version just for cross platform testing,\n    # but for real use, you should swap it to GPU.\n    # Then run tox to install all dependencies.\n    tox\n\n\nThen you can activate the tox created virtualenv and run top-level entry points directly from the root folder::\n\n    source .tox/py36/bin/activate\n    python sksurgeryrgbunet.py --help\n\n\nWindows users would run::\n\n    .tox\\py36\\Scripts\\activate\n    python sksurgeryrgbunet.py --help\n\nSo, for example, to run the sksurgeryrgbunet.py program and train on some data, you would do::\n\n    python sksurgeryrgbunet.py -d DATA -w working_dir -s output.hdf5\n\nwhere DATA is a directory like::\n\n    DATA/P1/masks\n    DATA/P1/images\n    DATA/P2/masks\n    DATA/P2/images\n    .\n    .\n    DATA/PN/masks\n    DATA/PN/images\n\nand P1,P2..PN just represents some patient identifier. Images and masks, though in different\nfolders, must have the same name.\n\nDeveloping\n----------\n\nCloning\n^^^^^^^\n\nYou can clone the repository using the following command:\n\n::\n\n    git clone https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n\n\nRunning tests\n^^^^^^^^^^^^^\nPytest is used for running unit tests, but you should run using tox,\nas per the `PythonTemplate`_ instructions.\n\n\nLinting\n^^^^^^^\n\nThis code conforms to the PEP8 standard. Pylint is used to analyse the code.\nAgain, follow the `PythonTemplate`_ instructions and run via tox.\n\n\nInstalling\n----------\n\nYou can pip install directly from the repository as follows:\n\n::\n\n    pip install git+https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n\n\n\nContributing\n------------\n\nPlease see the `contributing guidelines`_.\n\n\nUseful links\n------------\n\n* `Source code repository`_\n* `Documentation`_\n\n\nLicensing and copyright\n-----------------------\n\nCopyright 2019 University College London.\nscikit-surgerytf is released under the Apache Software License 2.0. Please see the `license file`_ for details.\n\n\nAcknowledgements\n----------------\n\nSupported by `Wellcome`_ and `EPSRC`_.\n\n\n.. _`Wellcome EPSRC Centre for Interventional and Surgical Sciences`: http://www.ucl.ac.uk/weiss\n.. _`source code repository`: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n.. _`Documentation`: https://scikit-surgerytf.readthedocs.io\n.. _`SNAPPY`: https://weisslab.cs.ucl.ac.uk/WEISS/PlatformManagement/SNAPPY/wikis/home\n.. _`University College London (UCL)`: http://www.ucl.ac.uk/\n.. _`Wellcome`: https://wellcome.ac.uk/\n.. _`EPSRC`: https://www.epsrc.ac.uk/\n.. _`contributing guidelines`: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/blob/master/CONTRIBUTING.rst\n.. _`license file`: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/blob/master/LICENSE\n.. _`PythonTemplate`: https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/PythonTemplate\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf", "keywords": "medical imaging", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "scikit-surgerytf", "package_url": "https://pypi.org/project/scikit-surgerytf/", "platform": "", "project_url": "https://pypi.org/project/scikit-surgerytf/", "project_urls": {"Homepage": "https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf"}, "release_url": "https://pypi.org/project/scikit-surgerytf/0.1.1/", "requires_dist": ["pyyaml", "h5py", "ipykernel", "nbsphinx", "Pillow", "scipy", "opencv-contrib-python (==4.1.1.26)", "tensorflow (==2.0.0)", "tensorflow-datasets (==1.3.0)", "matplotlib (==3.1.1)"], "requires_python": "", "summary": "scikit-surgerytf is a Python package for Tensor Flow examples and utilities", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\" rel=\"nofollow\"><img alt=\"Logo\" height=\"128px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f05564ce94f5e0d613e677925411734d285c86c/68747470733a2f2f77656973736c61622e63732e75636c2e61632e756b2f57454953532f536f6674776172655265706f7369746f726965732f534e415050592f7363696b69742d7375726765727974662f7261772f6d61737465722f70726f6a6563742d69636f6e2e706e67\" width=\"128px\"></a>\n<a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/pipelines\" rel=\"nofollow\"><img alt=\"GitLab-CI test status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/754abfc44c5df2c833d6a0fdaa9d7c5d50fa2612/68747470733a2f2f77656973736c61622e63732e75636c2e61632e756b2f57454953532f536f6674776172655265706f7369746f726965732f534e415050592f7363696b69742d7375726765727974662f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n<a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/commits/master\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15e0b4c3c27c0a94b8350f2d600cf4db836ea396/68747470733a2f2f77656973736c61622e63732e75636c2e61632e756b2f57454953532f536f6674776172655265706f7369746f726965732f534e415050592f7363696b69742d7375726765727974662f6261646765732f6d61737465722f636f7665726167652e737667\"></a>\n<a href=\"http://scikit-surgerytf.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e070d68a354588758ef4ef1bb90f3311520651b3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7363696b69742d7375726765727974662f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Author: Matt Clarkson</p>\n<p>scikit-surgerytf is part of the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/PlatformManagement/SNAPPY/wikis/home\" rel=\"nofollow\">SNAPPY</a> software project, developed at the <a href=\"http://www.ucl.ac.uk/weiss\" rel=\"nofollow\">Wellcome EPSRC Centre for Interventional and Surgical Sciences</a>, part of <a href=\"http://www.ucl.ac.uk/\" rel=\"nofollow\">University College London (UCL)</a>.</p>\n<p>scikit-surgerytf supports Python 3.6+, and tensorflow &gt;= 2.0.0.</p>\n<p>The aim of scikit-surgerytf is to provide a home for various Tensor Flow examples and\nutilities and to show best practice. It\u2019s NOT meant to be a layer on-top of Tensor Flow\nor provide a new kind-of platform. The aim is that researchers can learn from examples,\nand importantly, learn how to deliver an algorithm that can be used by other people\nout of the box, with just a <tt>`pip install`</tt>, rather than a new user having to\nre-implement stuff, or struggle to get someone else\u2019s code running. Researchers\ncan commit their research to this repository, or use the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/PythonTemplate\" rel=\"nofollow\">PythonTemplate</a> to\ngenerate their own project as a home for their new world-beating algorithm!</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Each project herein should provide the following:</p>\n<ul>\n<li>Code that passes pylint.</li>\n<li>Unit testing, as appropriate. In all likelihood, testing will cover individual functions, not large training cycles.</li>\n<li>Sufficient logging, including date, time, software (git) version, runtime folder, machine name.</li>\n<li>A main class containing a network that can be run separately in train/test mode.</li>\n<li>Visualisation with TensorBoard.</li>\n<li>Saving of learned network weights at the end of training.</li>\n<li>Loading of pre-train weights, initialising the network ready for inference.</li>\n<li>The ability to be run repeatedly for hyper-parameter tuning via python scripting, not bash.</li>\n<li>The ability to be callable from within a Jupyter Notebook, and thereby amenable to weekly writup\u2019s for supervisions.</li>\n<li>One or more command line programs that are pip-installable, enabling a subsequent user to train and test your algorithm with almost-zero faff.</li>\n<li>Visualisation for debugging purposes, such as printing example image thumbnails etc. should be done in Jupyter notebooks, or in tensorboard, not in the same class as your algorithm.</li>\n</ul>\n<p>Optional features could include:</p>\n<ul>\n<li>Small test projects that train quickly to completion won\u2019t need checkpointing, but large ones will.</li>\n</ul>\n</div>\n<div id=\"networks\">\n<h2>Networks</h2>\n<ul>\n<li>sksurgeryfashion.py: The usual FashionMNIST example, for learning purposes.</li>\n<li>sksurgeryrgbunet.py: RGB <a href=\"https://doi.org/10.1007/978-3-319-24574-4_28\" rel=\"nofollow\">UNet</a> example.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Typical instructions for use:</p>\n<p>First create a clean python environment, just installing tox:</p>\n<pre># Create a clean conda environment\nconda create -n myenv python=3.6\nconda activate myenv\npip install tox\n</pre>\n<p>Then you get the code, and use tox to install all other dependencies:</p>\n<pre>git clone https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\ncd scikit-surgerytf\n# edit requirements.txt, changing tensorflow to tensorflow-gpu.\n# The default is the CPU version just for cross platform testing,\n# but for real use, you should swap it to GPU.\n# Then run tox to install all dependencies.\ntox\n</pre>\n<p>Then you can activate the tox created virtualenv and run top-level entry points directly from the root folder:</p>\n<pre>source .tox/py36/bin/activate\npython sksurgeryrgbunet.py --help\n</pre>\n<p>Windows users would run:</p>\n<pre>.tox\\py36\\Scripts\\activate\npython sksurgeryrgbunet.py --help\n</pre>\n<p>So, for example, to run the sksurgeryrgbunet.py program and train on some data, you would do:</p>\n<pre>python sksurgeryrgbunet.py -d DATA -w working_dir -s output.hdf5\n</pre>\n<p>where DATA is a directory like:</p>\n<pre>DATA/P1/masks\nDATA/P1/images\nDATA/P2/masks\nDATA/P2/images\n.\n.\nDATA/PN/masks\nDATA/PN/images\n</pre>\n<p>and P1,P2..PN just represents some patient identifier. Images and masks, though in different\nfolders, must have the same name.</p>\n</div>\n<div id=\"developing\">\n<h2>Developing</h2>\n<div id=\"cloning\">\n<h3>Cloning</h3>\n<p>You can clone the repository using the following command:</p>\n<pre>git clone https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n</pre>\n</div>\n<div id=\"running-tests\">\n<h3>Running tests</h3>\n<p>Pytest is used for running unit tests, but you should run using tox,\nas per the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/PythonTemplate\" rel=\"nofollow\">PythonTemplate</a> instructions.</p>\n</div>\n<div id=\"linting\">\n<h3>Linting</h3>\n<p>This code conforms to the PEP8 standard. Pylint is used to analyse the code.\nAgain, follow the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/PythonTemplate\" rel=\"nofollow\">PythonTemplate</a> instructions and run via tox.</p>\n</div>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>You can pip install directly from the repository as follows:</p>\n<pre>pip install git+https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Please see the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">contributing guidelines</a>.</p>\n</div>\n<div id=\"useful-links\">\n<h2>Useful links</h2>\n<ul>\n<li><a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf\" rel=\"nofollow\">Source code repository</a></li>\n<li><a href=\"https://scikit-surgerytf.readthedocs.io\" rel=\"nofollow\">Documentation</a></li>\n</ul>\n</div>\n<div id=\"licensing-and-copyright\">\n<h2>Licensing and copyright</h2>\n<p>Copyright 2019 University College London.\nscikit-surgerytf is released under the Apache Software License 2.0. Please see the <a href=\"https://weisslab.cs.ucl.ac.uk/WEISS/SoftwareRepositories/SNAPPY/scikit-surgerytf/blob/master/LICENSE\" rel=\"nofollow\">license file</a> for details.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p>Supported by <a href=\"https://wellcome.ac.uk/\" rel=\"nofollow\">Wellcome</a> and <a href=\"https://www.epsrc.ac.uk/\" rel=\"nofollow\">EPSRC</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6741414, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b29e685d81ebe3990410b6b9d2236aa5", "sha256": "42e4eb8771e81658cc80d87cda212945f5cc61ba23e7dee75471d848756a5356"}, "downloads": -1, "filename": "scikit_surgerytf-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b29e685d81ebe3990410b6b9d2236aa5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23940, "upload_time": "2020-03-03T15:13:35", "upload_time_iso_8601": "2020-03-03T15:13:35.163167Z", "url": "https://files.pythonhosted.org/packages/e6/c5/33939f886145943f62405975bfd3b6991a1ca6a778dfb5711f02fbac7d1b/scikit_surgerytf-0.1.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b29e685d81ebe3990410b6b9d2236aa5", "sha256": "42e4eb8771e81658cc80d87cda212945f5cc61ba23e7dee75471d848756a5356"}, "downloads": -1, "filename": "scikit_surgerytf-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b29e685d81ebe3990410b6b9d2236aa5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 23940, "upload_time": "2020-03-03T15:13:35", "upload_time_iso_8601": "2020-03-03T15:13:35.163167Z", "url": "https://files.pythonhosted.org/packages/e6/c5/33939f886145943f62405975bfd3b6991a1ca6a778dfb5711f02fbac7d1b/scikit_surgerytf-0.1.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:57:24 2020"}