{"info": {"author": "Altertech", "author_email": "div@altertech.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# neotasker\nLightweight Python library for modern thread / multiprocessing pooling and task\nprocessing via asyncio.\n\n<img src=\"https://img.shields.io/pypi/v/neotasker.svg\" />\n<img src=\"https://img.shields.io/badge/license-MIT-green.svg\" />\n<img src=\"https://img.shields.io/badge/python-3.5%20%7C%203.6%20%7C%203.7-blue.svg\" />\n<img src=\"https://img.shields.io/badge/-alpha-red.svg\" />\n\nNeotasker is lightweight variation of\n[atasker](https://github.com/alttch/atasker) library: tasks don't have\npriorities, go directly to ThreadPoolExecutor and are standard Python future\nobjects. This library is useful for the high-load projects with lightweight\ntasks as majority tasks are directly proxied to pool.\n\nNeotasker works on top of **ThreadPoolExecutor** and **asyncio** and provides\nadditional features:\n\n* Easy thread pool and asyncio loops initialization\n* Interval, queue and event-based workers\n* Built-in integration with [aiosched](https://github.com/alttch/aiosched)\n\n## Install\n\n```bash\npip3 install neotasker\n```\n\nSources: https://github.com/alttch/neotasker\n\nDocumentation: https://neotasker.readthedocs.io/\n\n## Code examples\n\n### Start/stop\n\n```python\n\nfrom neotasker import task_supervisor\n\n# set pool size\n# min_size='max' means pre-spawn all pool threads\ntask_supervisor.set_thread_pool(min_size='max', max_size=20)\ntask_supervisor.start()\n# ...\n# start workers, other threads etc.\n# ...\n# optionally block current thread\ntask_supervisor.block()\n\n# stop from any thread\ntask_supervisor.stop()\n```\n\n### Executing future\n\nYou may work with *neotasker.thread_pool* object directly or use\n*task_supervisor.spawn* function, which's directly mapped to\n*thread_pool.submit*)\n\n```python\nfrom neotasker import thread_pool\n\nthread_pool.start()\n\ndef mytask(a, b, c):\n    print(f'I am working in the background! {a} {b} {c}')\n    return 777\n\ntask = task_supervisor.spawn(mytask, 1, 2, c=3)\n\n# get future result\nresult = task.result()\n```\n### Creating async io loop\n\n```python\nfrom neotasker import thread_pool\n\nthread_pool.start()\ntask_supervisor.create_aloop('default', default=True)\n\n# The loop will until supervisor is stopped\n# Spawn coroutine from another thread:\n\ntask_supervisor.get_aloop().spawn_coroutine_threadsafe(coro)\n```\n\n### Worker examples\n\n```python\nfrom neotasker import background_worker, task_supervisor\n\ntask_supervisor.start()\n# we need to create at least one aloop to start workers\ntask_supervisor.create_aloop('default', default=True)\n# create one more async loop\ntask_supervisor.create_aloop('loop2')\n\n@background_worker\ndef worker1(**kwargs):\n    print('I am a simple background worker')\n\n@background_worker\nasync def worker_async(**kwargs):\n    print('I am async background worker')\n\n@background_worker(interval=1, loop='loop2')\ndef worker2(**kwargs):\n    print('I run every second!')\n\n@background_worker(queue=True)\ndef worker3(task, **kwargs):\n    print('I run when there is a task in my queue')\n\n@background_worker(event=True)\ndef worker4(**kwargs):\n    print('I run when triggered')\n\nworker1.start()\nworker_async.start()\nworker2.start()\nworker3.start()\nworker4.start()\n\nworker3.put_threadsafe('todo1')\nworker4.trigger_threadsafe()\n\nfrom neotasker import BackgroundIntervalWorker\n\nclass MyWorker(BackgroundIntervalWorker):\n\n    def run(self, **kwargs):\n        print('I am custom worker class')\n\nworker5 = MyWorker(interval=0.1, name='worker5')\nworker5.start()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alttch/neotasker", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "neotasker", "package_url": "https://pypi.org/project/neotasker/", "platform": "", "project_url": "https://pypi.org/project/neotasker/", "project_urls": {"Homepage": "https://github.com/alttch/neotasker"}, "release_url": "https://pypi.org/project/neotasker/0.0.21/", "requires_dist": null, "requires_python": "", "summary": "Lightweight thread and asyncio task library", "version": "0.0.21", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>neotasker</h1>\n<p>Lightweight Python library for modern thread / multiprocessing pooling and task\nprocessing via asyncio.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb2cc36cfd97f15cb648d6ce3e6ecb35cfbdeef2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e656f7461736b65722e737667\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47807c129e46f24c027c5e76be5404ba37d3c9d7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e35253230253743253230332e36253230253743253230332e372d626c75652e737667\">\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/489ab9a36bed042d968c241700181916d4139059/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d616c7068612d7265642e737667\">\n<p>Neotasker is lightweight variation of\n<a href=\"https://github.com/alttch/atasker\" rel=\"nofollow\">atasker</a> library: tasks don't have\npriorities, go directly to ThreadPoolExecutor and are standard Python future\nobjects. This library is useful for the high-load projects with lightweight\ntasks as majority tasks are directly proxied to pool.</p>\n<p>Neotasker works on top of <strong>ThreadPoolExecutor</strong> and <strong>asyncio</strong> and provides\nadditional features:</p>\n<ul>\n<li>Easy thread pool and asyncio loops initialization</li>\n<li>Interval, queue and event-based workers</li>\n<li>Built-in integration with <a href=\"https://github.com/alttch/aiosched\" rel=\"nofollow\">aiosched</a></li>\n</ul>\n<h2>Install</h2>\n<pre>pip3 install neotasker\n</pre>\n<p>Sources: <a href=\"https://github.com/alttch/neotasker\" rel=\"nofollow\">https://github.com/alttch/neotasker</a></p>\n<p>Documentation: <a href=\"https://neotasker.readthedocs.io/\" rel=\"nofollow\">https://neotasker.readthedocs.io/</a></p>\n<h2>Code examples</h2>\n<h3>Start/stop</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">task_supervisor</span>\n\n<span class=\"c1\"># set pool size</span>\n<span class=\"c1\"># min_size='max' means pre-spawn all pool threads</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">set_thread_pool</span><span class=\"p\">(</span><span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># start workers, other threads etc.</span>\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># optionally block current thread</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># stop from any thread</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<h3>Executing future</h3>\n<p>You may work with <em>neotasker.thread_pool</em> object directly or use\n<em>task_supervisor.spawn</em> function, which's directly mapped to\n<em>thread_pool.submit</em>)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">thread_pool</span>\n\n<span class=\"n\">thread_pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mytask</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'I am working in the background! </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">777</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">mytask</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get future result</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n</pre>\n<h3>Creating async io loop</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">thread_pool</span>\n\n<span class=\"n\">thread_pool</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">create_aloop</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The loop will until supervisor is stopped</span>\n<span class=\"c1\"># Spawn coroutine from another thread:</span>\n\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">get_aloop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">spawn_coroutine_threadsafe</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">)</span>\n</pre>\n<h3>Worker examples</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">background_worker</span><span class=\"p\">,</span> <span class=\"n\">task_supervisor</span>\n\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"c1\"># we need to create at least one aloop to start workers</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">create_aloop</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># create one more async loop</span>\n<span class=\"n\">task_supervisor</span><span class=\"o\">.</span><span class=\"n\">create_aloop</span><span class=\"p\">(</span><span class=\"s1\">'loop2'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@background_worker</span>\n<span class=\"k\">def</span> <span class=\"nf\">worker1</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I am a simple background worker'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@background_worker</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">worker_async</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I am async background worker'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@background_worker</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"s1\">'loop2'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">worker2</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I run every second!'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@background_worker</span><span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">worker3</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I run when there is a task in my queue'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@background_worker</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">worker4</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I run when triggered'</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker1</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">worker_async</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">worker2</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">worker3</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">worker4</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"n\">worker3</span><span class=\"o\">.</span><span class=\"n\">put_threadsafe</span><span class=\"p\">(</span><span class=\"s1\">'todo1'</span><span class=\"p\">)</span>\n<span class=\"n\">worker4</span><span class=\"o\">.</span><span class=\"n\">trigger_threadsafe</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">neotasker</span> <span class=\"kn\">import</span> <span class=\"n\">BackgroundIntervalWorker</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWorker</span><span class=\"p\">(</span><span class=\"n\">BackgroundIntervalWorker</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'I am custom worker class'</span><span class=\"p\">)</span>\n\n<span class=\"n\">worker5</span> <span class=\"o\">=</span> <span class=\"n\">MyWorker</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'worker5'</span><span class=\"p\">)</span>\n<span class=\"n\">worker5</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6319513, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "368fa19a402900edf286c6477d7cab97", "sha256": "d7249f12a1e584b318812a800d12553cb300e71432d017914e9b81f3baff2232"}, "downloads": -1, "filename": "neotasker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "368fa19a402900edf286c6477d7cab97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4736, "upload_time": "2019-12-09T21:22:27", "upload_time_iso_8601": "2019-12-09T21:22:27.218607Z", "url": "https://files.pythonhosted.org/packages/8f/0a/101df485c0cf6950119a8a75b7996aae9e83bf3f145c19474b2fc4eff20c/neotasker-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "3b98de4388485fd8b74d428a5dac16cc", "sha256": "cb90aece430c16953f786599f7538dc8e4390facae73aa18fab673318c5fb4aa"}, "downloads": -1, "filename": "neotasker-0.0.10.tar.gz", "has_sig": false, "md5_digest": "3b98de4388485fd8b74d428a5dac16cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7250, "upload_time": "2019-12-10T17:40:55", "upload_time_iso_8601": "2019-12-10T17:40:55.610126Z", "url": "https://files.pythonhosted.org/packages/25/f5/4629c1f6cf1b1325faed427dbdfd72dcc2a9df2427a49c4a92deac0e6fec/neotasker-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "602fea5da6191094eeea4ff8de739987", "sha256": "c6b8b21b18ade4fdb526301f6ba168dc1f6a32ee31f51aa7f7eef93db1a939a2"}, "downloads": -1, "filename": "neotasker-0.0.11.tar.gz", "has_sig": false, "md5_digest": "602fea5da6191094eeea4ff8de739987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7338, "upload_time": "2019-12-10T19:58:45", "upload_time_iso_8601": "2019-12-10T19:58:45.815193Z", "url": "https://files.pythonhosted.org/packages/05/d6/4b2b6e534674619777df314761c1cd1403134f3f224f39e995100de0451c/neotasker-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "4034fe0af150ebf4343ffa995a8f23d0", "sha256": "8235c00b703013b364cefa101dccea22666162370c381bbdecb1f8abb14547ed"}, "downloads": -1, "filename": "neotasker-0.0.12.tar.gz", "has_sig": false, "md5_digest": "4034fe0af150ebf4343ffa995a8f23d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7330, "upload_time": "2019-12-11T02:31:54", "upload_time_iso_8601": "2019-12-11T02:31:54.143181Z", "url": "https://files.pythonhosted.org/packages/65/53/8316074ebf3c107aab31549efbe68f8019016c61be4abd2d64b7f13389bb/neotasker-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "fb44d4b36a8a61cdc426c54e9b8380a7", "sha256": "e021b1f6a614a4eda5965d50d28496705b4e3b7fe0a769f10d5490283d4e5d90"}, "downloads": -1, "filename": "neotasker-0.0.13.tar.gz", "has_sig": false, "md5_digest": "fb44d4b36a8a61cdc426c54e9b8380a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7340, "upload_time": "2019-12-15T04:13:44", "upload_time_iso_8601": "2019-12-15T04:13:44.308814Z", "url": "https://files.pythonhosted.org/packages/1b/03/1b7269c63049534d6a182f64ad1ff3acd95ee37ec7d124386af96482db0f/neotasker-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "47f4bfa429d6b3e0a7214c0c4f57e97e", "sha256": "3c28bc2cccf877ec734ed69e7b9c3cfe7953858ebc04b458e967aaa79d692874"}, "downloads": -1, "filename": "neotasker-0.0.14.tar.gz", "has_sig": false, "md5_digest": "47f4bfa429d6b3e0a7214c0c4f57e97e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9975, "upload_time": "2019-12-15T20:24:24", "upload_time_iso_8601": "2019-12-15T20:24:24.713762Z", "url": "https://files.pythonhosted.org/packages/7a/15/f167379b0a02ed7a7e0b444cfc669c57dae062b0be485457c88d44ab6f7a/neotasker-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "91ea3f186c74f4fbb2fd34491d57f0bc", "sha256": "9ffb4f382d322bc61b38d26c8f9bcc344195f5ada52fab66ba94f74f0427b0e4"}, "downloads": -1, "filename": "neotasker-0.0.15.tar.gz", "has_sig": false, "md5_digest": "91ea3f186c74f4fbb2fd34491d57f0bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9941, "upload_time": "2019-12-15T23:01:17", "upload_time_iso_8601": "2019-12-15T23:01:17.789873Z", "url": "https://files.pythonhosted.org/packages/9a/2a/eaed42027c7d1834d99c692ed48ba12234c2c2cff4c1c841f5aa7d324cec/neotasker-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "fa22129a3ce3990144c83feafe007fe0", "sha256": "c379b6183754e3a79183f25e6ce16427178c9559cc50edbcffda06dd643138e0"}, "downloads": -1, "filename": "neotasker-0.0.16.tar.gz", "has_sig": false, "md5_digest": "fa22129a3ce3990144c83feafe007fe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9923, "upload_time": "2019-12-16T00:02:26", "upload_time_iso_8601": "2019-12-16T00:02:26.495849Z", "url": "https://files.pythonhosted.org/packages/40/5b/ddaf33244cd4c00ba49faf5daf8bff73d6bb9cc1413903497d7b2f88be0e/neotasker-0.0.16.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "8d4e21a89f423931cd289480105e1612", "sha256": "0cec9ffe0c22a4e0c72e340ca37a7baf4017f495a4ab3a93045cd1fdb47a6678"}, "downloads": -1, "filename": "neotasker-0.0.19.tar.gz", "has_sig": false, "md5_digest": "8d4e21a89f423931cd289480105e1612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9949, "upload_time": "2019-12-16T00:12:26", "upload_time_iso_8601": "2019-12-16T00:12:26.319298Z", "url": "https://files.pythonhosted.org/packages/a5/ac/d53feee007730f6884c0e2163064fbd5c70ee248ef002ddca4e956ab1f1b/neotasker-0.0.19.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "37e9f69e8b6d94ac88604ca863133762", "sha256": "f5c9832de75b79765455eb212eefc27d113a5cf9e2a92836591cf1e92b3eafd0"}, "downloads": -1, "filename": "neotasker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "37e9f69e8b6d94ac88604ca863133762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6972, "upload_time": "2019-12-09T23:21:17", "upload_time_iso_8601": "2019-12-09T23:21:17.585441Z", "url": "https://files.pythonhosted.org/packages/fa/ff/227f8158e41cfef60d09b03bc8b0e4f6e2cee482953506d1d7f7598908d5/neotasker-0.0.2.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "b017d88e522b7a4d52dd16ea38a7fbc8", "sha256": "f9c59d225b0208de2c323bd09d3f1c724070d77313bb8a98a76d191b1e87116f"}, "downloads": -1, "filename": "neotasker-0.0.20.tar.gz", "has_sig": false, "md5_digest": "b017d88e522b7a4d52dd16ea38a7fbc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10002, "upload_time": "2019-12-16T20:42:20", "upload_time_iso_8601": "2019-12-16T20:42:20.628275Z", "url": "https://files.pythonhosted.org/packages/3c/3d/53b8f0899ea057735647ea9b11034852e1ee9990dbcdeb09aa6454e82e6f/neotasker-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "e90f6a853028eba232a915cb6b4570be", "sha256": "6f8d46d7076ef160886f2f53600df318557f39542078d32dc6cc222ca54f338c"}, "downloads": -1, "filename": "neotasker-0.0.21.tar.gz", "has_sig": false, "md5_digest": "e90f6a853028eba232a915cb6b4570be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10000, "upload_time": "2019-12-17T18:19:28", "upload_time_iso_8601": "2019-12-17T18:19:28.224965Z", "url": "https://files.pythonhosted.org/packages/97/93/3dd112851bdde0e2ef80b416c04fbd41f4c96442789ac4396388bb896eb0/neotasker-0.0.21.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "20f5fb838e17feddcbcade20a6753b50", "sha256": "2b1adcd00ba02d8d17a8c2cd294d531d9ccfadcf7d4cd5796e9dfa0749ca518b"}, "downloads": -1, "filename": "neotasker-0.0.3.tar.gz", "has_sig": false, "md5_digest": "20f5fb838e17feddcbcade20a6753b50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7253, "upload_time": "2019-12-10T00:03:11", "upload_time_iso_8601": "2019-12-10T00:03:11.622461Z", "url": "https://files.pythonhosted.org/packages/c2/4d/590c60d652a29ca3a3ca7b212f37ce5cdab4fd61e0958f55db328511cac0/neotasker-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7d5934caf2f0f3b5f1b7840eca1599f0", "sha256": "b7c98c6048fdc51c1cb6af565b7ed5bd98aa09e330da3ce603446671e94f599b"}, "downloads": -1, "filename": "neotasker-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7d5934caf2f0f3b5f1b7840eca1599f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7255, "upload_time": "2019-12-10T00:04:13", "upload_time_iso_8601": "2019-12-10T00:04:13.866961Z", "url": "https://files.pythonhosted.org/packages/aa/68/2addf278e5b3a1630b0dcd7e81902c526cb964349f0b91784d409778e911/neotasker-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "a600f46551b2ac055016d565bcf0f53c", "sha256": "5a21ae3a2b2f0a3a7ccadb5008b4b953a0c5f42443202ecd862f57854598311a"}, "downloads": -1, "filename": "neotasker-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a600f46551b2ac055016d565bcf0f53c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7277, "upload_time": "2019-12-10T00:09:10", "upload_time_iso_8601": "2019-12-10T00:09:10.017369Z", "url": "https://files.pythonhosted.org/packages/75/73/d29d953f27380fe905833152dba74ec0a27ea40ae391c234b3c0d8723d34/neotasker-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "a70e9a05e375b174a0128c192456afba", "sha256": "55a00c465ef8514950e10849ee188117a0dc3ce58f4356af4937846cbeb681c0"}, "downloads": -1, "filename": "neotasker-0.0.7.tar.gz", "has_sig": false, "md5_digest": "a70e9a05e375b174a0128c192456afba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7262, "upload_time": "2019-12-10T00:10:02", "upload_time_iso_8601": "2019-12-10T00:10:02.130991Z", "url": "https://files.pythonhosted.org/packages/ef/fd/d26e72d96c26f2b9efa9edb4d8114ee829f54490de4e2803d2711bbd2503/neotasker-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "97537c65c2da30d8321f0b7b9880e0b2", "sha256": "1b1b369914c62d831dda2e070c71e13950543b860c5ff6eb87bf7d2f5efbfb39"}, "downloads": -1, "filename": "neotasker-0.0.8.tar.gz", "has_sig": false, "md5_digest": "97537c65c2da30d8321f0b7b9880e0b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7262, "upload_time": "2019-12-10T00:26:54", "upload_time_iso_8601": "2019-12-10T00:26:54.469622Z", "url": "https://files.pythonhosted.org/packages/7a/b5/d6d9e2225e04bf4b95baf3612ee61e5106de409b66b20895771eabe532a1/neotasker-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "0511c64851ce505ccfa94bfd675a0e71", "sha256": "2feca988b911fb4dc8b48ea2cc34f5a83b6594afacbdbc0f7d16f39209c09c8b"}, "downloads": -1, "filename": "neotasker-0.0.9.tar.gz", "has_sig": false, "md5_digest": "0511c64851ce505ccfa94bfd675a0e71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7266, "upload_time": "2019-12-10T10:49:33", "upload_time_iso_8601": "2019-12-10T10:49:33.595139Z", "url": "https://files.pythonhosted.org/packages/de/58/14c5ac1211cac74ef00b73514c14f625f3e12768dfb7b8b4a7d3d8abde62/neotasker-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e90f6a853028eba232a915cb6b4570be", "sha256": "6f8d46d7076ef160886f2f53600df318557f39542078d32dc6cc222ca54f338c"}, "downloads": -1, "filename": "neotasker-0.0.21.tar.gz", "has_sig": false, "md5_digest": "e90f6a853028eba232a915cb6b4570be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10000, "upload_time": "2019-12-17T18:19:28", "upload_time_iso_8601": "2019-12-17T18:19:28.224965Z", "url": "https://files.pythonhosted.org/packages/97/93/3dd112851bdde0e2ef80b416c04fbd41f4c96442789ac4396388bb896eb0/neotasker-0.0.21.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:28 2020"}