{"info": {"author": "Frank Quinn", "author_email": "fquinn@cascadium.io", "bugtrack_url": null, "classifiers": [], "description": "# WSL Windows Toolbar Launcher\n\nThis script will create a Windows toolbar launcher for an underlying WSL install which\ncan be used to fire up linux native applications directly from Windows via the standard\nWindows toolbar, like this:\n\n![Demo](https://github.com/cascadium/wsl-windows-toolbar-launcher/raw/master/assets/demo.gif)\n\nIt's particularly cool because WSL 2 is coming which is unlocking unprecedented performance\nand compatibility improvements, so this will literally bring the full suite of Linux GUI\napplications directly to Windows UI.\n\n## Prerequisites\n\nThe script expects to be run **within** the WSL execution environment with:\n\n* A complete WSL install ready with bash and python3 installed.\n* An **X11 Server** running on your **windows host** (e.g. X410, Xming etc). This server\n  must be *reachable* from your WSL env (test with something like `wsl.exe -- source ~/.bashrc ; xterm\"`).\n  If this fails, check your `DISPLAY` variable (more details in [troubleshooting](#troubleshooting)).\n* A desktop environment which has a freedesktop menu installed (e.g. gnome / xfce).\n\nAnd optionally (but recommended):\n\n* An installation of cairosvg if works on your distro (`pip install cairosvg`)\n* Imagemagick installed (`sudo apt install imagemagick` / `dnf install imagemagick` etc)\n\n## Installing and Running\n\nTo install:\n\n    python3 -m pip install git+https://github.com/cascadium/wsl-windows-toolbar-launcher#egg=wsl-windows-toolbar\n\nTo run:\n\n    wsl-windows-toolbar\n\nAfter installation, right click on your toolbar, go to\n`Toolbars -> New toolbar...` and select\n`%USERPROFILE%\\.config\\wsl-windows-toolbar-launcher\\menus\\WSL` as the target folder (unless\nyou selected an alternative directory).\n\nNote there are many options available with `--help` if you'd prefer to use alternative locations.\n\n## Updating\n\nIf new software has been installed in the WSL environment, simply run the script again from the WSL environment to pick\nthe new GUIs up.\n\nNotable changes:\n\n* Change in 0.3: Command is now `wsl-windows-toolbar` without the trailing `.py`.\n\n## Advanced Usage / Options\n\n```\n$ python wsl-windows-toolbar.py  --help\nUsage: wsl-windows-toolbar.py [OPTIONS]\n\nOptions:\n  -i, --install-directory PATH   Install the launcher targets to this\n                                 directory (<target> will be suffixed to this\n                                 location)\n  -m, --metadata-directory PATH  Install the launcher targets to this\n                                 directory (<target> will be suffixed to this\n                                 location)\n  -d, --distribution TEXT        WSL Distro to generate shortcuts for (will\n                                 use default distro if this parameter is not\n                                 provided)\n  -u, --user TEXT                WSL Distro's user to launch programs as (will\n                                 use default user if this parameter is not\n                                 provided)\n  -y, --confirm-yes              Assume the answer to all confirmation prompts\n                                 is 'yes'\n  -f, --menu-file FILENAME       The *.menu menu file to parse\n  -w, --wsl-executable TEXT      Path to the WSL executable relative to the\n                                 windows installation\n  -n, --target-name TEXT         Name to give to the created installation\n                                 (will be displayed in toolbar menu)\n  --help                         Show this message and exit.\n```\n\n### Launcher Templates\n\nThe loader process involves using wscript to launch a batch file (to keep the shorcut command\nlength down). There is a jinja template which defines this script which defaults to\n`wsl-windows-toolbar-template.j2` and accepts the following possible variables passed\nthrough from the script:\n\n* `distribution`: The distribution selected in the script\n* `user`: The user selected in the script\n* `command`: The individual command for each launcher entry in WSL environment (e.g. `xterm`)\n* `wsl`: The wsl executable discovered\n* `rcfile`: The rc file (e.g. `.bashrc`) to source prior to launch selected in the script\n\n## Troubleshooting\n\n### No applications launching\n\nIf no applications are launching at all, it's most likely an issue with either:\n\n* `DISPLAY` not being set correctly\n* `DISPLAY` being set fine, but its destination is not accessible from the WSL environment\n* The X11 server isn't set up to allow access from external hosts (how to configure this will depend on your X11 server\n  so please refer to their documentation)\n\nNote that for this section, you can check which version of WSL you're using with:\n\n    wsl.exe -l --verbose\n\n#### Check WSL1 `$DISPLAY` variable\n\nIf you're running WSL1, the `DISPLAY` variable for WSL1 should simply be `localhost:0.0`\nif this is the default distribution.\n\n#### Check WSL2 `$DISPLAY` variable\n\nUnfortunately for WSL2, it's a little more complicated for now, though I think they're\nplanning on fixing this. You'll need something like this to extract the correct host:\n\n    export DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0\n\n### Firewall Rules\n\nThen you need to worry about the firewall. WSL comes up as a public network, but I wouldn't recommend\nallowing all public network traffic to access your X server. So instead, you can go ahead and select\ndefaults when this sort of prompt comes up:\n\n![Security Alert](https://github.com/cascadium/wsl-windows-toolbar-launcher/raw/master/assets/security_alert.png)\n\nNow, irritatingly this will actively add a block rule (rather than simply not add an allow rule) for public networks\nwhich you will need to disable for the next step by going into Windows Defender Firewall -> Inbound Rules and\n**disabling this block rule for TCP on the Public Network**.\n\nIf you don't do the above step, the Block rule will take precedence over the Allow allow rule and you won't get through.\n\nNow, right click on Inbound Rules and select `New Rule...`, select TCP port 6000 (most likely) and select defaults. This\nwill open up your public network for this port... which is also not what you want. What you want is to only allow traffic\nfrom the WSL subnet. So refresh the list, scroll to your recently created name, right click and go to properties. Now\nunder `Scope`, go to **Remote IP address**, Select `These IP addresses` and add in `172.16.0.0/12` to limit the subnets\nwhich can access this port to the WSL subnet. It should look something like this:\n\n![WSL Subnet Firewall Rule](https://github.com/cascadium/wsl-windows-toolbar-launcher/raw/master/assets/firewall_rule_wsl_subnet.png)\n\nAlternatively you *could* just disable the entire firewall for WSL, but that adds a firewall warning that constantly\nirritates me:\n\n    powershell.exe -Command \"Set-NetFirewallProfile -DisabledInterfaceAliases \\\"vEthernet (WSL)\\\"\"\n\n### Application X not working\n\nDoes the application use dbus? If so, it's recommended to put something like this in your `.bashrc` to satisfy the many\napplications which depend on dbus to function:\n\n    dbus_status=$(service dbus status)\n    if [[ $dbus_status = *\"is not running\"* ]]; then\n      sudo service dbus --full-restart\n    fi\n\nAlso check that the `.bashrc` tweaks are added **before any nastiness** like this in your `.bashrc` which would prevent `DISPLAY` from being set:\n\n    # If not running interactively, don't do anything\n    [ -z \"$PS1\" ] && return\n\nYou can do similar with `docker` or any other service which you will need access to, but won't necessarily already be\nrunning in a vanilla WSL installation.\n\nTo debug further, you can run the shortcut directly from the command line from a `cmd` shell:\n\n    wsl.exe -d <your-wsl-distro> -u <your-wsl-user> -- source ~/.bashrc ; env; xterm\n\nReplacing xterm with whatever command you're trying to launch. Note the `env` command will\nprint out all environment variables set before running `xterm` in this example, so this should\nhelp you double check if `DISPLAY` is really set correctly. \n\n\n## Raising Issues\n\nIssues may be raised in github issues. Before raising an issue though:\n\n* Verify that you have an X Server running on windows 10. Popular options include X410 or Xming.\n* Verify that you can actually launch X applications from a WSL terminal (e.g. try running xterm).\n\nIf an issue is to be required, please prepare the log output from the command and details on your\nexecution environment. Ideally try and find the `.desktop` file relating to the failing software as well.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cascadium/wsl-windows-toolbar-launcher", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "wsl-windows-toolbar", "package_url": "https://pypi.org/project/wsl-windows-toolbar/", "platform": "", "project_url": "https://pypi.org/project/wsl-windows-toolbar/", "project_urls": {"Homepage": "https://github.com/cascadium/wsl-windows-toolbar-launcher"}, "release_url": "https://pypi.org/project/wsl-windows-toolbar/0.5.1/", "requires_dist": ["click (>=7)", "pyxdg (>=0.26)", "winshell (>=0.6)", "swinlnk (>=0.1.4)", "pillow (>=6)", "python-magic (>=0.4.15)", "jinja2 (>=2.11)"], "requires_python": ">=3", "summary": "Adds linux GUI application menu to a windows toolbar", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WSL Windows Toolbar Launcher</h1>\n<p>This script will create a Windows toolbar launcher for an underlying WSL install which\ncan be used to fire up linux native applications directly from Windows via the standard\nWindows toolbar, like this:</p>\n<p><img alt=\"Demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e864e718ec8e942838e5e610494047cefe1545d/68747470733a2f2f6769746875622e636f6d2f63617363616469756d2f77736c2d77696e646f77732d746f6f6c6261722d6c61756e636865722f7261772f6d61737465722f6173736574732f64656d6f2e676966\"></p>\n<p>It's particularly cool because WSL 2 is coming which is unlocking unprecedented performance\nand compatibility improvements, so this will literally bring the full suite of Linux GUI\napplications directly to Windows UI.</p>\n<h2>Prerequisites</h2>\n<p>The script expects to be run <strong>within</strong> the WSL execution environment with:</p>\n<ul>\n<li>A complete WSL install ready with bash and python3 installed.</li>\n<li>An <strong>X11 Server</strong> running on your <strong>windows host</strong> (e.g. X410, Xming etc). This server\nmust be <em>reachable</em> from your WSL env (test with something like <code>wsl.exe -- source ~/.bashrc ; xterm\"</code>).\nIf this fails, check your <code>DISPLAY</code> variable (more details in <a href=\"#troubleshooting\" rel=\"nofollow\">troubleshooting</a>).</li>\n<li>A desktop environment which has a freedesktop menu installed (e.g. gnome / xfce).</li>\n</ul>\n<p>And optionally (but recommended):</p>\n<ul>\n<li>An installation of cairosvg if works on your distro (<code>pip install cairosvg</code>)</li>\n<li>Imagemagick installed (<code>sudo apt install imagemagick</code> / <code>dnf install imagemagick</code> etc)</li>\n</ul>\n<h2>Installing and Running</h2>\n<p>To install:</p>\n<pre><code>python3 -m pip install git+https://github.com/cascadium/wsl-windows-toolbar-launcher#egg=wsl-windows-toolbar\n</code></pre>\n<p>To run:</p>\n<pre><code>wsl-windows-toolbar\n</code></pre>\n<p>After installation, right click on your toolbar, go to\n<code>Toolbars -&gt; New toolbar...</code> and select\n<code>%USERPROFILE%\\.config\\wsl-windows-toolbar-launcher\\menus\\WSL</code> as the target folder (unless\nyou selected an alternative directory).</p>\n<p>Note there are many options available with <code>--help</code> if you'd prefer to use alternative locations.</p>\n<h2>Updating</h2>\n<p>If new software has been installed in the WSL environment, simply run the script again from the WSL environment to pick\nthe new GUIs up.</p>\n<p>Notable changes:</p>\n<ul>\n<li>Change in 0.3: Command is now <code>wsl-windows-toolbar</code> without the trailing <code>.py</code>.</li>\n</ul>\n<h2>Advanced Usage / Options</h2>\n<pre><code>$ python wsl-windows-toolbar.py  --help\nUsage: wsl-windows-toolbar.py [OPTIONS]\n\nOptions:\n  -i, --install-directory PATH   Install the launcher targets to this\n                                 directory (&lt;target&gt; will be suffixed to this\n                                 location)\n  -m, --metadata-directory PATH  Install the launcher targets to this\n                                 directory (&lt;target&gt; will be suffixed to this\n                                 location)\n  -d, --distribution TEXT        WSL Distro to generate shortcuts for (will\n                                 use default distro if this parameter is not\n                                 provided)\n  -u, --user TEXT                WSL Distro's user to launch programs as (will\n                                 use default user if this parameter is not\n                                 provided)\n  -y, --confirm-yes              Assume the answer to all confirmation prompts\n                                 is 'yes'\n  -f, --menu-file FILENAME       The *.menu menu file to parse\n  -w, --wsl-executable TEXT      Path to the WSL executable relative to the\n                                 windows installation\n  -n, --target-name TEXT         Name to give to the created installation\n                                 (will be displayed in toolbar menu)\n  --help                         Show this message and exit.\n</code></pre>\n<h3>Launcher Templates</h3>\n<p>The loader process involves using wscript to launch a batch file (to keep the shorcut command\nlength down). There is a jinja template which defines this script which defaults to\n<code>wsl-windows-toolbar-template.j2</code> and accepts the following possible variables passed\nthrough from the script:</p>\n<ul>\n<li><code>distribution</code>: The distribution selected in the script</li>\n<li><code>user</code>: The user selected in the script</li>\n<li><code>command</code>: The individual command for each launcher entry in WSL environment (e.g. <code>xterm</code>)</li>\n<li><code>wsl</code>: The wsl executable discovered</li>\n<li><code>rcfile</code>: The rc file (e.g. <code>.bashrc</code>) to source prior to launch selected in the script</li>\n</ul>\n<h2>Troubleshooting</h2>\n<h3>No applications launching</h3>\n<p>If no applications are launching at all, it's most likely an issue with either:</p>\n<ul>\n<li><code>DISPLAY</code> not being set correctly</li>\n<li><code>DISPLAY</code> being set fine, but its destination is not accessible from the WSL environment</li>\n<li>The X11 server isn't set up to allow access from external hosts (how to configure this will depend on your X11 server\nso please refer to their documentation)</li>\n</ul>\n<p>Note that for this section, you can check which version of WSL you're using with:</p>\n<pre><code>wsl.exe -l --verbose\n</code></pre>\n<h4>Check WSL1 <code>$DISPLAY</code> variable</h4>\n<p>If you're running WSL1, the <code>DISPLAY</code> variable for WSL1 should simply be <code>localhost:0.0</code>\nif this is the default distribution.</p>\n<h4>Check WSL2 <code>$DISPLAY</code> variable</h4>\n<p>Unfortunately for WSL2, it's a little more complicated for now, though I think they're\nplanning on fixing this. You'll need something like this to extract the correct host:</p>\n<pre><code>export DISPLAY=$(grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}'):0.0\n</code></pre>\n<h3>Firewall Rules</h3>\n<p>Then you need to worry about the firewall. WSL comes up as a public network, but I wouldn't recommend\nallowing all public network traffic to access your X server. So instead, you can go ahead and select\ndefaults when this sort of prompt comes up:</p>\n<p><img alt=\"Security Alert\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96fea1ad66dfc16ad92fc0635b0adc62aff0e285/68747470733a2f2f6769746875622e636f6d2f63617363616469756d2f77736c2d77696e646f77732d746f6f6c6261722d6c61756e636865722f7261772f6d61737465722f6173736574732f73656375726974795f616c6572742e706e67\"></p>\n<p>Now, irritatingly this will actively add a block rule (rather than simply not add an allow rule) for public networks\nwhich you will need to disable for the next step by going into Windows Defender Firewall -&gt; Inbound Rules and\n<strong>disabling this block rule for TCP on the Public Network</strong>.</p>\n<p>If you don't do the above step, the Block rule will take precedence over the Allow allow rule and you won't get through.</p>\n<p>Now, right click on Inbound Rules and select <code>New Rule...</code>, select TCP port 6000 (most likely) and select defaults. This\nwill open up your public network for this port... which is also not what you want. What you want is to only allow traffic\nfrom the WSL subnet. So refresh the list, scroll to your recently created name, right click and go to properties. Now\nunder <code>Scope</code>, go to <strong>Remote IP address</strong>, Select <code>These IP addresses</code> and add in <code>172.16.0.0/12</code> to limit the subnets\nwhich can access this port to the WSL subnet. It should look something like this:</p>\n<p><img alt=\"WSL Subnet Firewall Rule\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8229a098572bcd21ae078e424237defe535035ce/68747470733a2f2f6769746875622e636f6d2f63617363616469756d2f77736c2d77696e646f77732d746f6f6c6261722d6c61756e636865722f7261772f6d61737465722f6173736574732f6669726577616c6c5f72756c655f77736c5f7375626e65742e706e67\"></p>\n<p>Alternatively you <em>could</em> just disable the entire firewall for WSL, but that adds a firewall warning that constantly\nirritates me:</p>\n<pre><code>powershell.exe -Command \"Set-NetFirewallProfile -DisabledInterfaceAliases \\\"vEthernet (WSL)\\\"\"\n</code></pre>\n<h3>Application X not working</h3>\n<p>Does the application use dbus? If so, it's recommended to put something like this in your <code>.bashrc</code> to satisfy the many\napplications which depend on dbus to function:</p>\n<pre><code>dbus_status=$(service dbus status)\nif [[ $dbus_status = *\"is not running\"* ]]; then\n  sudo service dbus --full-restart\nfi\n</code></pre>\n<p>Also check that the <code>.bashrc</code> tweaks are added <strong>before any nastiness</strong> like this in your <code>.bashrc</code> which would prevent <code>DISPLAY</code> from being set:</p>\n<pre><code># If not running interactively, don't do anything\n[ -z \"$PS1\" ] &amp;&amp; return\n</code></pre>\n<p>You can do similar with <code>docker</code> or any other service which you will need access to, but won't necessarily already be\nrunning in a vanilla WSL installation.</p>\n<p>To debug further, you can run the shortcut directly from the command line from a <code>cmd</code> shell:</p>\n<pre><code>wsl.exe -d &lt;your-wsl-distro&gt; -u &lt;your-wsl-user&gt; -- source ~/.bashrc ; env; xterm\n</code></pre>\n<p>Replacing xterm with whatever command you're trying to launch. Note the <code>env</code> command will\nprint out all environment variables set before running <code>xterm</code> in this example, so this should\nhelp you double check if <code>DISPLAY</code> is really set correctly.</p>\n<h2>Raising Issues</h2>\n<p>Issues may be raised in github issues. Before raising an issue though:</p>\n<ul>\n<li>Verify that you have an X Server running on windows 10. Popular options include X410 or Xming.</li>\n<li>Verify that you can actually launch X applications from a WSL terminal (e.g. try running xterm).</li>\n</ul>\n<p>If an issue is to be required, please prepare the log output from the command and details on your\nexecution environment. Ideally try and find the <code>.desktop</code> file relating to the failing software as well.</p>\n\n          </div>"}, "last_serial": 7171006, "releases": {"0.4.3": [{"comment_text": "", "digests": {"md5": "f9f7348622e22d96a125b7abf427c7c2", "sha256": "f4d11ec96143c40141f4f8462f02be6f2ccab199be4defe705c37bc43cb1d5b8"}, "downloads": -1, "filename": "wsl_windows_toolbar-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f9f7348622e22d96a125b7abf427c7c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12298, "upload_time": "2020-05-04T19:23:25", "upload_time_iso_8601": "2020-05-04T19:23:25.541243Z", "url": "https://files.pythonhosted.org/packages/76/93/5069253e072798abea55fcb411298719a2674324e696dd6e106d834d2e66/wsl_windows_toolbar-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a94970eaaad8e444cb021c46939fb112", "sha256": "2d8e24c355aa0506255a7666c840759d73b8152ed9587f4b85461079b6fc551d"}, "downloads": -1, "filename": "wsl-windows-toolbar-0.4.3.tar.gz", "has_sig": false, "md5_digest": "a94970eaaad8e444cb021c46939fb112", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13514, "upload_time": "2020-05-04T19:23:27", "upload_time_iso_8601": "2020-05-04T19:23:27.588696Z", "url": "https://files.pythonhosted.org/packages/f5/7d/2a0e7e537b5000cb4174bdea67ff9a69fc352cd68e36f5819fd91cbfc908/wsl-windows-toolbar-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "2e6396cd296ad7958f42144908e10b2a", "sha256": "dc468a163acac2e18638f4c4971d6f14a5cb119040c50963850e026baa4c94e9"}, "downloads": -1, "filename": "wsl_windows_toolbar-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e6396cd296ad7958f42144908e10b2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12298, "upload_time": "2020-05-04T19:23:50", "upload_time_iso_8601": "2020-05-04T19:23:50.600391Z", "url": "https://files.pythonhosted.org/packages/0b/40/fea773a2550e10fce9e631f90cfc0375cdb8e857c0d924b9c230a1712d28/wsl_windows_toolbar-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7fbcb41609eb186f058433841107452", "sha256": "d9672c6d4931ab0a3b8f0113da3c7d5721ed6bcbfad57749ed7f6fe75e54f516"}, "downloads": -1, "filename": "wsl-windows-toolbar-0.5.0.tar.gz", "has_sig": false, "md5_digest": "e7fbcb41609eb186f058433841107452", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13517, "upload_time": "2020-05-04T19:23:51", "upload_time_iso_8601": "2020-05-04T19:23:51.683265Z", "url": "https://files.pythonhosted.org/packages/31/8f/bad4058354fe46c77513e7b6e679be06aac85ddf97d83288c7e61b3e272b/wsl-windows-toolbar-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "1c865bd3e0a31b1ff508c2a7a5805461", "sha256": "ffd2b51830c8749653b6d684d08629c211c6ad42fd557fee3d47d3290f720578"}, "downloads": -1, "filename": "wsl_windows_toolbar-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c865bd3e0a31b1ff508c2a7a5805461", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12294, "upload_time": "2020-05-05T10:26:50", "upload_time_iso_8601": "2020-05-05T10:26:50.701382Z", "url": "https://files.pythonhosted.org/packages/b0/ca/fc69f8d057f08ad87fa1fdaeca63f5af94055b99647d310cc47370488313/wsl_windows_toolbar-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7e07382402f30f3c7afd094b9f35503", "sha256": "d2790af9f3ac3cfba4d10a48c3a20c915dbc04e4bbea9e4633d1c7d3712b672e"}, "downloads": -1, "filename": "wsl-windows-toolbar-0.5.1.tar.gz", "has_sig": false, "md5_digest": "f7e07382402f30f3c7afd094b9f35503", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13508, "upload_time": "2020-05-05T10:26:51", "upload_time_iso_8601": "2020-05-05T10:26:51.925135Z", "url": "https://files.pythonhosted.org/packages/ee/15/0cba2e8b26352444c8b05e8cb9e5e51f2a2c2624c1c36062ef0b52e50b07/wsl-windows-toolbar-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1c865bd3e0a31b1ff508c2a7a5805461", "sha256": "ffd2b51830c8749653b6d684d08629c211c6ad42fd557fee3d47d3290f720578"}, "downloads": -1, "filename": "wsl_windows_toolbar-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c865bd3e0a31b1ff508c2a7a5805461", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12294, "upload_time": "2020-05-05T10:26:50", "upload_time_iso_8601": "2020-05-05T10:26:50.701382Z", "url": "https://files.pythonhosted.org/packages/b0/ca/fc69f8d057f08ad87fa1fdaeca63f5af94055b99647d310cc47370488313/wsl_windows_toolbar-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7e07382402f30f3c7afd094b9f35503", "sha256": "d2790af9f3ac3cfba4d10a48c3a20c915dbc04e4bbea9e4633d1c7d3712b672e"}, "downloads": -1, "filename": "wsl-windows-toolbar-0.5.1.tar.gz", "has_sig": false, "md5_digest": "f7e07382402f30f3c7afd094b9f35503", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13508, "upload_time": "2020-05-05T10:26:51", "upload_time_iso_8601": "2020-05-05T10:26:51.925135Z", "url": "https://files.pythonhosted.org/packages/ee/15/0cba2e8b26352444c8b05e8cb9e5e51f2a2c2624c1c36062ef0b52e50b07/wsl-windows-toolbar-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:59 2020"}