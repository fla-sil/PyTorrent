{"info": {"author": "Todd Wolfson", "author_email": "todd@twolfson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "api-pagination\n==============\n\n.. image:: https://travis-ci.org/underdogio/api-pagination.png?branch=master\n   :target: https://travis-ci.org/underdogio/api-pagination\n   :alt: Build Status\n\nPagination calculator designed for APIs\n\nWhen building an API, out of bound pages should be treated with empty result sets. The existing solutions were not doing this. We have designed ``api-pagination`` to handle these edge cases from the perspective of an API.\n\nGetting Started\n---------------\nInstall the module with: ``pip install api_pagination``\n\n.. code:: python\n\n    # Load in dependencies\n    from api_pagination import Paginator\n\n    # Generate a paginator and get info about a page\n    paginator = Paginator(total=100, items_per_page=10)\n    page_info = paginator.get_page_info(page=2)\n    {\n        'overall': {\n            'first_page': 1,\n            'last_page': 10,\n            'pages': 10,\n            'total': 100\n        },\n        'page': {\n            'current_page': 2,\n            'next_page': 3,\n            'previous_page': 1\n        }\n    }\n\n    # Use a classmethod to get info in one fell swoop\n    page_info = Paginator.page_info(page=1, total=100, items_per_page=10)\n    {\n        'overall': {\n            'first_page': 1,\n            'last_page': 10,\n            'pages': 10,\n            'total': 100\n        },\n        'page': {\n            'current_page': 1,\n            'next_page': 2,\n            'previous_page': None\n        }\n    }\n\n    # Handle out of bounds properly\n    page_info = Paginator.page_info(page=20, total=100, items_per_page=10)\n    {\n        'overall': {\n            'first_page': 1,\n            'last_page': 10,\n            'pages': 10,\n            'total': 100\n        },\n        'page': {\n            'current_page': 20,\n            'next_page': None,\n            'previous_page': 10\n        }\n    }\n\n\nDocumentation\n-------------\nWe expose the ``Paginator`` class via our package ``api_pagination``\n\nPaginator(total, items_per_page)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nClass for calculating pagination info about items\n\n- total ``int`` - Overall amount of items present\n- items_per_page ``int`` - How many items to include on each page\n\npaginator.get_page_info(page)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nGather information about a given page\n\n- page ``int`` - Human based index for a page\n\n  - For example, page 1 will be for items 1-10 (where ``items_per_page=10``)\n\n**Returns:**\n\n- ret_val ``dict`` - Container for information about overall information and page specific information\n\n  - overall ``dict`` - Container for overall information\n\n    - first_page ``int`` - Human based index for first page\n\n      - For example, with ``total=20`` and ``items_per_page=10``, we have ``first_page=1``\n\n    - last_page ``int`` - Human based index for last page\n\n      - For example, with ``total=25`` and ``items_per_page=10``, we have ``last_page=3`` (includes items 21-25)\n\n    - pages ``int`` - Amount of pages overall\n\n      - For example, with ``total=25`` and ``items_per_page=10``, we have ``pages=3``\n\n    - total ``int`` - Amount of items overall\n\n  - page ``dict`` - Container for page specific information\n\n    - current_page ``int`` - Human based index of requested page\n    - next_page ``int|None`` - If there is another page after this one, ``next_page`` will be that page's human based index\n\n      - For example, with ``total=25``, ``items_per_page=10``, and ``page=2``, we have ``next_page=3`` (includes items 21-25)\n      - When on the last page (e.g. `total=25`, ``items_per_page=10``, ``page=3``) ``next_page`` will be ``None``\n      - If we are under bounds (e.g. ``page=-1``), then ``next_page`` will be the first page (``page=1``)\n\n    - previous_page ``int|None`` - If there is another page before this one, ``previous_page`` will be that page's human based index\n\n      - For example, with ``total=25``, ``items_per_page=10``, and ``page=2``, we have ``previous_page=1`` (includes items 1-10)\n      - When on the first page (e.g. ``total=25``, ``items_per_page=10``, ``page=1``) then ``previous_page`` will be ``None``\n      - If we are over bounds (e.g. ``total=25``, ``items_per_page=10``, ``page=4``), then ``previous_page`` will be the last page (``page=3``)\n\nPaginator.page_info(page, \\*args, \\*\\*kwargs)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nHelper function to get page info without calling multiple actions\n\n- page ``int`` - Page to pass through to ``paginator.get_page_info``\n- \\*args - Ordered arguments to pass through to ``Paginator`` constructor\n- \\*\\*kwargs - Keyword based arguments to pass through to ``Paginator`` constructor\n\n**Returns:**\n\nReturns same format as ``paginator.get_page_info``\n\n**Example:**\n\n.. code:: python\n\n    page_info = Paginator.page_info(page=1, total=100, items_per_page=10)\n    # Same as\n    # paginator = Paginator(total=100, items_per_page=10)\n    # page_info = paginator.get_page_info(page=1)\n\n\nContributing\n------------\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via ``./test.sh``.\n\nLicense\n-------\nCopyright (c) 2015 Underdog.io\n\nLicensed under the MIT license.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/underdogio/api-pagination/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/underdogio/api-pagination", "keywords": "paginate,pagination,calc,calculate,calculator,api", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "api_pagination", "package_url": "https://pypi.org/project/api_pagination/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/api_pagination/", "project_urls": {"Download": "https://github.com/underdogio/api-pagination/archive/master.zip", "Homepage": "https://github.com/underdogio/api-pagination"}, "release_url": "https://pypi.org/project/api_pagination/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Pagination calculator designed for APIs", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/underdogio/api-pagination\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b805a77c34623956c4855e470f09c469d4caca3/68747470733a2f2f7472617669732d63692e6f72672f756e646572646f67696f2f6170692d706167696e6174696f6e2e706e673f6272616e63683d6d6173746572\"></a>\n<p>Pagination calculator designed for APIs</p>\n<p>When building an API, out of bound pages should be treated with empty result sets. The existing solutions were not doing this. We have designed <tt><span class=\"pre\">api-pagination</span></tt> to handle these edge cases from the perspective of an API.</p>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Install the module with: <tt>pip install api_pagination</tt></p>\n<pre><span class=\"c1\"># Load in dependencies</span>\n<span class=\"kn\">from</span> <span class=\"nn\">api_pagination</span> <span class=\"kn\">import</span> <span class=\"n\">Paginator</span>\n\n<span class=\"c1\"># Generate a paginator and get info about a page</span>\n<span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">items_per_page</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">page_info</span> <span class=\"o\">=</span> <span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">get_page_info</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'overall'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_page'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'pages'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s1\">'next_page'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s1\">'previous_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Use a classmethod to get info in one fell swoop</span>\n<span class=\"n\">page_info</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"o\">.</span><span class=\"n\">page_info</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">items_per_page</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'overall'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_page'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'pages'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'next_page'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s1\">'previous_page'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Handle out of bounds properly</span>\n<span class=\"n\">page_info</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"o\">.</span><span class=\"n\">page_info</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">items_per_page</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s1\">'overall'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'first_page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s1\">'last_page'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'pages'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n        <span class=\"s1\">'total'</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'current_page'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"s1\">'next_page'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s1\">'previous_page'</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>We expose the <tt>Paginator</tt> class via our package <tt>api_pagination</tt></p>\n<div id=\"paginator-total-items-per-page\">\n<h3>Paginator(total, items_per_page)</h3>\n<p>Class for calculating pagination info about items</p>\n<ul>\n<li>total <tt>int</tt> - Overall amount of items present</li>\n<li>items_per_page <tt>int</tt> - How many items to include on each page</li>\n</ul>\n<div id=\"paginator-get-page-info-page\">\n<h4>paginator.get_page_info(page)</h4>\n<p>Gather information about a given page</p>\n<ul>\n<li>page <tt>int</tt> - Human based index for a page<ul>\n<li>For example, page 1 will be for items 1-10 (where <tt>items_per_page=10</tt>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<ul>\n<li>ret_val <tt>dict</tt> - Container for information about overall information and page specific information<ul>\n<li>overall <tt>dict</tt> - Container for overall information<ul>\n<li>first_page <tt>int</tt> - Human based index for first page<ul>\n<li>For example, with <tt>total=20</tt> and <tt>items_per_page=10</tt>, we have <tt>first_page=1</tt></li>\n</ul>\n</li>\n<li>last_page <tt>int</tt> - Human based index for last page<ul>\n<li>For example, with <tt>total=25</tt> and <tt>items_per_page=10</tt>, we have <tt>last_page=3</tt> (includes items 21-25)</li>\n</ul>\n</li>\n<li>pages <tt>int</tt> - Amount of pages overall<ul>\n<li>For example, with <tt>total=25</tt> and <tt>items_per_page=10</tt>, we have <tt>pages=3</tt></li>\n</ul>\n</li>\n<li>total <tt>int</tt> - Amount of items overall</li>\n</ul>\n</li>\n<li>page <tt>dict</tt> - Container for page specific information<ul>\n<li>current_page <tt>int</tt> - Human based index of requested page</li>\n<li>next_page <tt>int|None</tt> - If there is another page after this one, <tt>next_page</tt> will be that page\u2019s human based index<ul>\n<li>For example, with <tt>total=25</tt>, <tt>items_per_page=10</tt>, and <tt>page=2</tt>, we have <tt>next_page=3</tt> (includes items 21-25)</li>\n<li>When on the last page (e.g. <cite>total=25</cite>, <tt>items_per_page=10</tt>, <tt>page=3</tt>) <tt>next_page</tt> will be <tt>None</tt></li>\n<li>If we are under bounds (e.g. <tt><span class=\"pre\">page=-1</span></tt>), then <tt>next_page</tt> will be the first page (<tt>page=1</tt>)</li>\n</ul>\n</li>\n<li>previous_page <tt>int|None</tt> - If there is another page before this one, <tt>previous_page</tt> will be that page\u2019s human based index<ul>\n<li>For example, with <tt>total=25</tt>, <tt>items_per_page=10</tt>, and <tt>page=2</tt>, we have <tt>previous_page=1</tt> (includes items 1-10)</li>\n<li>When on the first page (e.g. <tt>total=25</tt>, <tt>items_per_page=10</tt>, <tt>page=1</tt>) then <tt>previous_page</tt> will be <tt>None</tt></li>\n<li>If we are over bounds (e.g. <tt>total=25</tt>, <tt>items_per_page=10</tt>, <tt>page=4</tt>), then <tt>previous_page</tt> will be the last page (<tt>page=3</tt>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"paginator-page-info-page-args-kwargs\">\n<h3>Paginator.page_info(page, *args, **kwargs)</h3>\n<p>Helper function to get page info without calling multiple actions</p>\n<ul>\n<li>page <tt>int</tt> - Page to pass through to <tt>paginator.get_page_info</tt></li>\n<li>*args - Ordered arguments to pass through to <tt>Paginator</tt> constructor</li>\n<li>**kwargs - Keyword based arguments to pass through to <tt>Paginator</tt> constructor</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<p>Returns same format as <tt>paginator.get_page_info</tt></p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"n\">page_info</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"o\">.</span><span class=\"n\">page_info</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">items_per_page</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"c1\"># Same as</span>\n<span class=\"c1\"># paginator = Paginator(total=100, items_per_page=10)</span>\n<span class=\"c1\"># page_info = paginator.get_page_info(page=1)</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>In lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Test via <tt>./test.sh</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright (c) 2015 Underdog.io</p>\n<p>Licensed under the MIT license.</p>\n</div>\n\n          </div>"}, "last_serial": 1523158, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bf1dc7c8011e0747aa409e4e85c38a20", "sha256": "2e88c5452aa20787ec442d4e7891854050e6ef6f959f10a355aaa695cce02d88"}, "downloads": -1, "filename": "api_pagination-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bf1dc7c8011e0747aa409e4e85c38a20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7688, "upload_time": "2015-04-27T17:23:24", "upload_time_iso_8601": "2015-04-27T17:23:24.317164Z", "url": "https://files.pythonhosted.org/packages/4f/29/738a70c1b1336b758441c13c1bd80704861ecb06131825c1bef22a61bae1/api_pagination-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "25944bfa44ad2a7708089bdfc0bd50c4", "sha256": "481674002f8899087d85ab526ac86dab94ba8888923e981c5b2646773cf2191d"}, "downloads": -1, "filename": "api_pagination-1.0.0.zip", "has_sig": false, "md5_digest": "25944bfa44ad2a7708089bdfc0bd50c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15440, "upload_time": "2015-04-27T17:23:27", "upload_time_iso_8601": "2015-04-27T17:23:27.181029Z", "url": "https://files.pythonhosted.org/packages/0b/ee/338b212113db7e8effe309640a319a8468ad2408ad9f5b0e61ed4744e492/api_pagination-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf1dc7c8011e0747aa409e4e85c38a20", "sha256": "2e88c5452aa20787ec442d4e7891854050e6ef6f959f10a355aaa695cce02d88"}, "downloads": -1, "filename": "api_pagination-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bf1dc7c8011e0747aa409e4e85c38a20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7688, "upload_time": "2015-04-27T17:23:24", "upload_time_iso_8601": "2015-04-27T17:23:24.317164Z", "url": "https://files.pythonhosted.org/packages/4f/29/738a70c1b1336b758441c13c1bd80704861ecb06131825c1bef22a61bae1/api_pagination-1.0.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "25944bfa44ad2a7708089bdfc0bd50c4", "sha256": "481674002f8899087d85ab526ac86dab94ba8888923e981c5b2646773cf2191d"}, "downloads": -1, "filename": "api_pagination-1.0.0.zip", "has_sig": false, "md5_digest": "25944bfa44ad2a7708089bdfc0bd50c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15440, "upload_time": "2015-04-27T17:23:27", "upload_time_iso_8601": "2015-04-27T17:23:27.181029Z", "url": "https://files.pythonhosted.org/packages/0b/ee/338b212113db7e8effe309640a319a8468ad2408ad9f5b0e61ed4744e492/api_pagination-1.0.0.zip", "yanked": false}], "timestamp": "Thu May  7 18:17:47 2020"}