{"info": {"author": "Wim Muskee", "author_email": "w.muskee@kennisnet.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries", "Topic :: Text Processing :: Markup :: XML"], "description": "[![Build Status](https://travis-ci.org/kennisnet/pylom.svg?branch=master)](https://travis-ci.org/kennisnet/pylom)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pylom.svg)](https://pypi.org/project/pylom/)\n[![PyPI version](https://img.shields.io/pypi/v/pylom.svg)](https://pypi.org/project/pylom/)\n\n# PyLom\nThis is a Python library for reading and writing IMS-LOM files.\nAlmost all fields are supported, but only one language will be supported for language-specific langstring elements.\nThe reader supports common vCard field extraction with vobject.\n\n## Reader Usage\nBasically, import the class and tell it to parse a lom file. The parsed data will be available in the *lom* attribute dict.\nBy default, it reads the *en* language, but another can be set on init.\nTo start parsing, initialize the class and use one of two public methods, *parsePath* or *parseString*.\n\n### basic example\n```python\nfrom pylom.reader import LomReader\n\nlomreader = LomReader()\nlomreader.parsePath(\"test/records/ims-complete.xml\")\n\nprint(lomreader.lom[\"title\"])\n# Bloodbath of B-R5RB\n```\n\n### fieldset example\n```python\nfrom pylom.reader import LomReader\n\nlomreader = LomReader()\nlomreader.parsePath(\"test/records/ims-complete.xml\", [\"title\",\"location\"])\n\n# Only the title and location field results are available in the lom dict\n```\n\n## Writer Usage\nThe writer class is used by providing it with a dictionary with all the values you want in your record. Like the reader class\nthe instance can be called with a language argument for all the langstring elements. After parsing, the lom record is available\nin the *lom* attribute.\n\n### basic example\n```python\nfrom pylom.writer import LomWriter\n\nlomwriter = LomWriter()\nlomwriter.parseDict({\"title\": \"Bloodbath of B-R5RB\"})\nprint(lomwriter.lom)\n```\n\n### custom vocabularies\nBy default, all vocabulary sources are set to *LOMv1.0*, but they can be changed by setting the *vocabulary_sources* after\ncreating the instance.\n\n```python\nfrom pylom.writer import LomWriter\n\nlomwriter = LomWriter()\nlomwriter.vocabulary_sources.update( { \"aggregationlevel\": \"my-source\" } )\nlomwriter.parseDict({\"aggregationlevel\": \"2\"})\nprint(lomwriter.lom)\n```\n\n### input values\nFor easy implementation, many of the values can be provided as needed. For instance, any basic element or langstring element\ncan be provided as string or as a list of strings.\n\nVocabulary elements can be provided as a single string or a list of strings, using the class default vocabulary source, or as\na single dictionary, with separate source and value values.\n\nMore detailed examples can be inferred from the *test_writer_elements* test cases.\n\n```python\nfrom pylom.writer import LomWriter\n\nlomwriter = LomWriter()\nlomdict = {\n    \"title\": \"Bloodbath of B-R5RB\",\n    \"keyword\": [\"Eve Online\", \"Halloween War\"],\n    \"aggregationlevel\": {\"source\": \"my-source\", \"value\": \"2\" },\n    \"context\": [\"school\", \"higher education\"] }\n\nlomwriter.parseDict(lomdict)\nprint(lomwriter.lom)\n```\n\n## Dependencies\n- [lxml](http://lxml.de/)\n- [vcard](https://github.com/eventable/vobject)\n- [setuptools](https://github.com/pypa/setuptools)\n\n## To Do\n### Reader\n- implement all LOM fields\n- support IEEE binding\n- cleanup options, trim, unique, etc\n- application profile validation\n- value validation\n\n### Writer\n- vocabulary, provide list of source/value dicts\n- more LOM-spec aware validation, for instance, prevent multiple title fields\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kennisnet/pylom", "keywords": "lom parsing xml", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylom", "package_url": "https://pypi.org/project/pylom/", "platform": "", "project_url": "https://pypi.org/project/pylom/", "project_urls": {"Homepage": "https://github.com/kennisnet/pylom"}, "release_url": "https://pypi.org/project/pylom/1.6.1/", "requires_dist": ["lxml", "vobject"], "requires_python": "", "summary": "Library for parsing IMS-LOM xml records.", "version": "1.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/kennisnet/pylom\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d254d853169556be27d226db7aca5644c8e03cf/68747470733a2f2f7472617669732d63692e6f72672f6b656e6e69736e65742f70796c6f6d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/pylom/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02e6df78f1e2d6e0a2ec954bd8a159e4ecc8c829/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796c6f6d2e737667\"></a>\n<a href=\"https://pypi.org/project/pylom/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dfc475c20eb94f655c9fa753e5138b66d742d3c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796c6f6d2e737667\"></a></p>\n<h1>PyLom</h1>\n<p>This is a Python library for reading and writing IMS-LOM files.\nAlmost all fields are supported, but only one language will be supported for language-specific langstring elements.\nThe reader supports common vCard field extraction with vobject.</p>\n<h2>Reader Usage</h2>\n<p>Basically, import the class and tell it to parse a lom file. The parsed data will be available in the <em>lom</em> attribute dict.\nBy default, it reads the <em>en</em> language, but another can be set on init.\nTo start parsing, initialize the class and use one of two public methods, <em>parsePath</em> or <em>parseString</em>.</p>\n<h3>basic example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylom.reader</span> <span class=\"kn\">import</span> <span class=\"n\">LomReader</span>\n\n<span class=\"n\">lomreader</span> <span class=\"o\">=</span> <span class=\"n\">LomReader</span><span class=\"p\">()</span>\n<span class=\"n\">lomreader</span><span class=\"o\">.</span><span class=\"n\">parsePath</span><span class=\"p\">(</span><span class=\"s2\">\"test/records/ims-complete.xml\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lomreader</span><span class=\"o\">.</span><span class=\"n\">lom</span><span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">])</span>\n<span class=\"c1\"># Bloodbath of B-R5RB</span>\n</pre>\n<h3>fieldset example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylom.reader</span> <span class=\"kn\">import</span> <span class=\"n\">LomReader</span>\n\n<span class=\"n\">lomreader</span> <span class=\"o\">=</span> <span class=\"n\">LomReader</span><span class=\"p\">()</span>\n<span class=\"n\">lomreader</span><span class=\"o\">.</span><span class=\"n\">parsePath</span><span class=\"p\">(</span><span class=\"s2\">\"test/records/ims-complete.xml\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">,</span><span class=\"s2\">\"location\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Only the title and location field results are available in the lom dict</span>\n</pre>\n<h2>Writer Usage</h2>\n<p>The writer class is used by providing it with a dictionary with all the values you want in your record. Like the reader class\nthe instance can be called with a language argument for all the langstring elements. After parsing, the lom record is available\nin the <em>lom</em> attribute.</p>\n<h3>basic example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylom.writer</span> <span class=\"kn\">import</span> <span class=\"n\">LomWriter</span>\n\n<span class=\"n\">lomwriter</span> <span class=\"o\">=</span> <span class=\"n\">LomWriter</span><span class=\"p\">()</span>\n<span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">parseDict</span><span class=\"p\">({</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bloodbath of B-R5RB\"</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">lom</span><span class=\"p\">)</span>\n</pre>\n<h3>custom vocabularies</h3>\n<p>By default, all vocabulary sources are set to <em>LOMv1.0</em>, but they can be changed by setting the <em>vocabulary_sources</em> after\ncreating the instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylom.writer</span> <span class=\"kn\">import</span> <span class=\"n\">LomWriter</span>\n\n<span class=\"n\">lomwriter</span> <span class=\"o\">=</span> <span class=\"n\">LomWriter</span><span class=\"p\">()</span>\n<span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">vocabulary_sources</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span> <span class=\"p\">{</span> <span class=\"s2\">\"aggregationlevel\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my-source\"</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n<span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">parseDict</span><span class=\"p\">({</span><span class=\"s2\">\"aggregationlevel\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">lom</span><span class=\"p\">)</span>\n</pre>\n<h3>input values</h3>\n<p>For easy implementation, many of the values can be provided as needed. For instance, any basic element or langstring element\ncan be provided as string or as a list of strings.</p>\n<p>Vocabulary elements can be provided as a single string or a list of strings, using the class default vocabulary source, or as\na single dictionary, with separate source and value values.</p>\n<p>More detailed examples can be inferred from the <em>test_writer_elements</em> test cases.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylom.writer</span> <span class=\"kn\">import</span> <span class=\"n\">LomWriter</span>\n\n<span class=\"n\">lomwriter</span> <span class=\"o\">=</span> <span class=\"n\">LomWriter</span><span class=\"p\">()</span>\n<span class=\"n\">lomdict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bloodbath of B-R5RB\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"keyword\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Eve Online\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Halloween War\"</span><span class=\"p\">],</span>\n    <span class=\"s2\">\"aggregationlevel\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"source\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my-source\"</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2\"</span> <span class=\"p\">},</span>\n    <span class=\"s2\">\"context\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"school\"</span><span class=\"p\">,</span> <span class=\"s2\">\"higher education\"</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n\n<span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">parseDict</span><span class=\"p\">(</span><span class=\"n\">lomdict</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lomwriter</span><span class=\"o\">.</span><span class=\"n\">lom</span><span class=\"p\">)</span>\n</pre>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"http://lxml.de/\" rel=\"nofollow\">lxml</a></li>\n<li><a href=\"https://github.com/eventable/vobject\" rel=\"nofollow\">vcard</a></li>\n<li><a href=\"https://github.com/pypa/setuptools\" rel=\"nofollow\">setuptools</a></li>\n</ul>\n<h2>To Do</h2>\n<h3>Reader</h3>\n<ul>\n<li>implement all LOM fields</li>\n<li>support IEEE binding</li>\n<li>cleanup options, trim, unique, etc</li>\n<li>application profile validation</li>\n<li>value validation</li>\n</ul>\n<h3>Writer</h3>\n<ul>\n<li>vocabulary, provide list of source/value dicts</li>\n<li>more LOM-spec aware validation, for instance, prevent multiple title fields</li>\n</ul>\n\n          </div>"}, "last_serial": 6460793, "releases": {"1.5.2": [{"comment_text": "", "digests": {"md5": "baec2fb632cd2a4132acd5f0da7b0595", "sha256": "1d1065feb21aa0db50046be77a8e2793983b561c618395d87bf64e241000da3d"}, "downloads": -1, "filename": "pylom-1.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "baec2fb632cd2a4132acd5f0da7b0595", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9574, "upload_time": "2019-11-26T16:07:27", "upload_time_iso_8601": "2019-11-26T16:07:27.768436Z", "url": "https://files.pythonhosted.org/packages/de/ab/4796fefac28c0c179b8f06cce4f16c0e1084aab46f45359a555cb36aa148/pylom-1.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e19b14b75a9fd5b1a2a543d0e837bc1", "sha256": "f2ffece653a101ef6093f01aff74d6789be24fc23d92c5c92fbc13ac22412b03"}, "downloads": -1, "filename": "pylom-1.5.2.tar.gz", "has_sig": false, "md5_digest": "9e19b14b75a9fd5b1a2a543d0e837bc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15399, "upload_time": "2019-11-26T16:07:30", "upload_time_iso_8601": "2019-11-26T16:07:30.845855Z", "url": "https://files.pythonhosted.org/packages/f8/53/4927177f4cf67d4623472d81e0d080f337b69b3026469a9521f5100b1b8d/pylom-1.5.2.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "0835f5035ffa3c3a9daa94725056f83e", "sha256": "96e90cae916e1b96ac8b8be1d3a61724f8bac06f4653d204d6d95c57aa318916"}, "downloads": -1, "filename": "pylom-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0835f5035ffa3c3a9daa94725056f83e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16101, "upload_time": "2020-01-15T19:23:40", "upload_time_iso_8601": "2020-01-15T19:23:40.011416Z", "url": "https://files.pythonhosted.org/packages/0f/19/b12da6f2c2cbfccf879280a0004aba61f86b3e30915d22caa237f858ee94/pylom-1.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0d95e9233e742280b3facb5885975a1", "sha256": "fce4d497cd56174a56201307fa69eff229a3af5bacf3d61e9d06917b1f6c399d"}, "downloads": -1, "filename": "pylom-1.6.1.tar.gz", "has_sig": false, "md5_digest": "b0d95e9233e742280b3facb5885975a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16071, "upload_time": "2020-01-15T19:23:41", "upload_time_iso_8601": "2020-01-15T19:23:41.427873Z", "url": "https://files.pythonhosted.org/packages/06/89/2171dab5c757bed18cdb8a751b5fe276c9ce2165b65d5df71112451aaa97/pylom-1.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0835f5035ffa3c3a9daa94725056f83e", "sha256": "96e90cae916e1b96ac8b8be1d3a61724f8bac06f4653d204d6d95c57aa318916"}, "downloads": -1, "filename": "pylom-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0835f5035ffa3c3a9daa94725056f83e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16101, "upload_time": "2020-01-15T19:23:40", "upload_time_iso_8601": "2020-01-15T19:23:40.011416Z", "url": "https://files.pythonhosted.org/packages/0f/19/b12da6f2c2cbfccf879280a0004aba61f86b3e30915d22caa237f858ee94/pylom-1.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0d95e9233e742280b3facb5885975a1", "sha256": "fce4d497cd56174a56201307fa69eff229a3af5bacf3d61e9d06917b1f6c399d"}, "downloads": -1, "filename": "pylom-1.6.1.tar.gz", "has_sig": false, "md5_digest": "b0d95e9233e742280b3facb5885975a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16071, "upload_time": "2020-01-15T19:23:41", "upload_time_iso_8601": "2020-01-15T19:23:41.427873Z", "url": "https://files.pythonhosted.org/packages/06/89/2171dab5c757bed18cdb8a751b5fe276c9ce2165b65d5df71112451aaa97/pylom-1.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:49 2020"}