{"info": {"author": "Mike Kazantsev", "author_email": "mk.fraggod@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved", "Natural Language :: English", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Database :: Front-Ends", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django-remotestorage\n--------------------\n\n`Unhosted <https://unhosted.org>`_\n`remoteStorage <http://remotestorage.io>`_ server implementation\n\nThis app is a server (storage) implementation for an earlier\nremoteStorage API version, specified here:\n\n::\n\n    http://www.w3.org/community/unhosted/wiki/RemoteStorage-2011.10\n\nSome parts of it (especially webfinger, oauth2, since I've used newer\nspecs that were available at the time) *might* be compatible with the\ncurrent API:\n\n::\n\n    https://tools.ietf.org/id/draft-dejong-remotestorage-00.txt\n\nBut since remoteStorage.js 0.7.0 for experimental API was still under\nheavy development at the time, I haven't tested whether it works with\ncurrent implementation.\n\nPackage (and django app) was called django-unhosted in the past and was\neventually renamed. If you're using django-unhosted package, please read\nthe `notes on\nmigration <https://github.com/RemoteStorage/django-remotestorage#migration-from-django-unhosted>`_\nunder\n`Installation <https://github.com/RemoteStorage/django-remotestorage#installation>`_\nsection.\n\nremoteStorage\n-------------\n\nIdea is that you can have storage account (with whatever policies and\nauthentication) on host1 and some webapp (say, some visual editor, think\nMS Word) on host2.\n\nTo edit document in a webapp, generally host2 would have to implement\nsome sort of user registration, storage (like docs.google.com) for\nedited docs, etc.\n\nWith remoteStorage, this storage don't have to be on host2, so you don't\nhave to implement some complex policies and authenticated storage there\nto launch a full-featured webapp - it can open and save docs to any\nremote host which supports the protocol (which is basically GET/PUT from\nWebDAV with OAuth2 on top).\n\nhost1 can be your VPS, client machine itself (especially easy with\ndirect IPv6, or IPv4 provided via some service like\n`pagekite <https://pagekite.net/>`_), some reliable cloud provider or\nwhatever.\n\nTo fully understand how it all works, I recommend looking at OAuth2,\nWebDAV, CORS and Webfinger, which are basically all the technologies\nused to implement the protocol.\n\nThis django app fully implements web-facing storage for host1, complete\nwith user registration forms (optional, users can be added by other\ndjango apps or via django admin interface otherwise), client access\nmanagement interfaces and a simple demo client.\n\nSecurity\n--------\n\nSince applicaton is a public-internet-facing interface to your (possibly\nimportant) data and I'm in no way security expert or specialist, I\nrecommend to pentest or validate the code before storing any sensitive\ndata in it.\n\nData loss or corruption is much easier to prevent (and backups go a long\nway here, btw) than security exploits, so, again, please look at the\ncode yourself and find issues there which I have a blind spot (not to\nmention lack of skills) for, thus won't be able to find on my own.\n\nExample of *obvious* (to an outsider analysis) security flaws in another\nstorage-server implementation `can be found\nhere <http://crypto.junod.info/2012/05/24/owncloud-4-0-and-encryption/>`_,\nlearn the lession there.\n\nInstallation\n------------\n\nRequirements\n~~~~~~~~~~~~\n\n-  `Python 2.7 (not 3.X) <http://python.org/>`_\n\n-  `Django <http://djangoproject.com>`_\n-  `Django OAuth 2.0 Server App\n   (oauth2app) <http://hiidef.github.com/oauth2app/>`_\n-  (optional, recommended) `South <http://south.aeracode.org>`_ - for\n   automated database schema updates\n\noauth2app is `not on\nPyPI <https://github.com/hiidef/oauth2app/issues/7>`_ at the moment, but\npip can install it from github directly.\n\nVarious interfaces of the app use some external resources, like `Twitter\nBootstrap <http://twitter.github.com/bootstrap/>`_ CSS file (served from\nbootstrapcdn.com) and\n`remoteStorage.js <https://github.com/RemoteStorage/remoteStorage.js>`_,\nwhich can be served - and **should be**, if you're using https for\ninterfaces - from local URLs, if available in STATIC\\_ROOT. See\n\"Customization / Interfaces\" for details.\n\nMigration from django-unhosted\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPackage was called django-unhosted in the past, but it was decided to\nrename it before it was way too late.\n\nUnfortunately, there's no easy way to rename django app and python\npackage, especially if it's undesirable to keep older package names\naround for eternity, so some manual steps have to be taken in order to\nmigrate to the new (django-remotestorage) app/package.\n\n-  Uninstall django-unhosted python package (either through\n   ``pip uninstall     django-unhosted``, OS tools, or remove module\n   path manually).\n\n-  Rename all database tables with \"django\\_unhosted\" in name to be\n   starting with \"django\\_remotestorage\" instead. Lots of easy-to-use\n   GUI tools (such as `pgadmin <http://www.pgadmin.org/>`_,\n   `phpPgAdmin <http://phppgadmin.sourceforge.net/>`_,\n   `phpMyAdmin <http://www.phpmyadmin.net/>`_,\n   `phpSQLiteAdmin <http://phpsqliteadmin.sourceforge.net/>`_, etc) or\n   native CLI interfaces (``sqlite3 /path/to/db.sqlite``, ``psql``,\n   ``mysql``, etc) can be used for that.\n\n-  Update settings.py and urlconf to import stuff from\n   \"django\\_remotestorage\" module instead of \"django\\_unhosted\". Replace\n   all \"UNHOSTED\\_\" in variable names to \"REMOTESTORAGE\\_\", if used in\n   settings.py.\n\n-  If you have a custom urlconf and/or templates, replace references to\n   \"unhosted\" namespace with \"remotestorage\".\n\nIt should fairly straightforward, but feel free to open Issue or\n`contact\ndevelopers <https://github.com/RemoteStorage/django-remotestorage#contacts--support>`_\nif the described process doesn't work for you.\n\nDeployment / configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDjango apps are deployed as a part of \"django project\", which is - at\nit's minimum - just a few `configuration\nfiles <https://docs.djangoproject.com/en/dev/topics/settings/>`_,\nspecifying which database to use, and which apps should handle which\nURLs.\n\nTL;DR\n'''''\n\nSimple installation/setup from scratch may look like this.\n\nInstall the app itself (or not, it can be just checked-out into a\nproject dir):\n\n::\n\n    pip install django-remotestorage\n\n...or, to install directly from git master branch:\n\n::\n\n    pip install 'git+https://github.com/RemoteStorage/django-remotestorage.git#egg=django-remotestorage'\n\n...or you can do it manually:\n\n::\n\n    git clone https://github.com/RemoteStorage/django-remotestorage.git\n    cd django-remotestorage\n    python setup.py install\n    pip install -r requirements.txt # or download/install each by hand as well\n\n\"pip\" tool, mentioned above, should usually come with OS of choice,\notherwise see `pip installation\ndocs <http://www.pip-installer.org/en/latest/installing.html>`_. Don't\nuse \"easy\\_install\" for anything except installing the pip itself.\n\nInstall oauth2app in a similar fashion:\n\n::\n\n    pip install 'git+https://github.com/hiidef/oauth2app.git#egg=oauth2app'\n\nThen create and configure a django project:\n\n::\n\n    cd\n    django-admin.py startproject myproject\n    cd myproject\n\n    # Update settings.py (sqlite3 is used as db here) and urls.py\n    sed -i \\\n        -e 's/'\\''ENGINE'\\''.*/\"ENGINE\": \"django.db.backends.sqlite3\",/' \\\n        -e 's/'\\''NAME'\\''.*/\"NAME\": \"db.sqlite\",/' \\\n        -e 's/STATIC_ROOT *=/STATIC_ROOT=\"./static\"/' \\\n        myproject/settings.py\n    echo -e >>myproject/settings.py \\\n        'from django_remotestorage.settings_base import update_settings' \\\n        '\\nupdate_settings(__name__)'\n    sed -i \\\n        -e '1afrom django_remotestorage.urls import remotestorage_patterns' \\\n        -e 's/# Examples:.*/(\"\", include(remotestorage_patterns)),\\n\\n\\0/' \\\n        myproject/urls.py\n\n    # Create database schema and link app static files to STATIC_ROOT\n    ./manage.py syncdb --noinput\n    ./manage.py migrate django_remotestorage\n    ./manage.py collectstatic --noinput --link\n\n    # Run simple dev server\n    ./manage.py runserver\n\n(since webfinger protocol **requires** some sort of XRD authentication,\nlike https, it *won't work* properly on such a simple setup)\n\nMore detailed explaination of configuration process follows.\n\nDjango project configuration\n''''''''''''''''''''''''''''\n\nMain idea is that two config files (in django project) need to be\nupdated - settings.py and urls.py.\n\nThere are several ways to update django settings.py to use the app:\n\n-  If it's the only app in a django project and there's no custom\n   settings.py already, options from\n   `django\\_remotestorage.settings\\_base <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/settings_base.py>`_\n   module can be imported into it directly.\n\n   To do that, add the following lines to the *end* of\n   \"{your\\_app\\_name}/settings.py\" (or wherever\n   `DJANGO\\_SETTINGS\\_MODULE <https://docs.djangoproject.com/en/dev/topics/settings/#designating-the-settings>`_\n   is used) file:\n\n   ::\n\n       from django_remotestorage.settings_base import *\n\n   That will import all the options there (bare minimum that has to be\n   changed) over those defined above in the original file.\n\n   Note that list of overidden options include INSTALLED\\_APPS,\n   MIDDLEWARE\\_CLASSES and such, which are not only often customized,\n   but are usually specific to the django version installed, so you may\n   alternatively insert that import line at the *beginning* of the\n   settings.py, so everything defined after it will override the\n   imported options.\n\n-  If there's already some custom settings.py file available, there's\n   django\\_remotestorage.settings\\_base.update\\_settings helper function\n   available to update configuration without blindly overriding any\n   options.\n\n   It can be used at the end of settings.py file like this:\n\n   ::\n\n       from django_remotestorage.settings_base import update_settings\n       update_settings(__name__)\n\n   Full list of changes it'll make can be found in \"updates\" dict at the\n   beginning of\n   `django\\_remotestorage.settings\\_base <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/settings_base.py>`_\n   module.\n\n   \"update\\_settings\" function also takes an optional \"only\" and\n   \"ignore\" keywords (expecting an iterable of option names), which can\n   be used to control which parameters should be updated or explicitly\n   left untouched.\n\n   This should be more safe, flexible and future-proof way of merging\n   necessary option updates with existing (site-specific) configuration.\n\n-  Update the file by hand.\n\n   Default values for the most settings can be found in `django\n   documentation <https://docs.djangoproject.com/en/dev/ref/settings/>`_.\n\n   For the class-listing type options, duplicate values may be omitted.\n   Note that order of MIDDLEWARE\\_CLASSES is significant.\n\n   ::\n\n       OAUTH2_CLIENT_KEY_LENGTH = 1024\n       OAUTH2_SCOPE_LENGTH = 2048\n\n       TEMPLATE_CONTEXT_PROCESSORS = (\n           ...whatever is already there...\n           'django.core.context_processors.csrf',\n           'django.core.context_processors.request',\n           'django.contrib.messages.context_processors.messages',\n           'django_remotestorage.utils.external_resources_context',\n       )\n\n       TEMPLATE_LOADERS = (\n           ...whatever is already there...\n           'django_remotestorage.apps.webfinger.xrd_gen.Loader',\n       )\n\n       MIDDLEWARE_CLASSES = (\n           ...whatever is already there...\n           <remove 'django.middleware.csrf.CsrfViewMiddleware', if it's there>\n           ...whatever is already there, except for ConditionalGet / FetchFromCache...\n           'django.contrib.messages.middleware.MessageMiddleware',\n           ...ConditionalGetMiddleware and FetchFromCacheMiddleware (and such), if used...\n       )\n\n       INSTALLED_APPS = (\n           ...whatever is already there...\n           'django.contrib.messages',\n           'django_remotestorage',\n           'oauth2app',\n           'south',\n       )\n\n   \"south\" should be omitted from INSTALLED\\_APPS, if not used.\n\nIn any case, if you've just created django project (with\n\"django-admin.py startproject\" or whatever), make sure to look through\nit's settings.py file and edit at least DATABASES, MEDIA\\_\\* and\nSTATIC\\_\\* options. You might also want to set other (optonal) settings\nthere - TIME\\_ZONE, ADMINS, LOGGING, etc.\n\nAs for urls.py, just add the following line to url patterns (importing\nremotestorage\\_patterns from django\\_remotestorage.urls module\nbeforehand):\n\n::\n\n    ('', include(remotestorage_patterns)),\n\nSo it'd look like this:\n\n::\n\n    ...\n    from django_remotestorage.urls import remotestorage_patterns\n    ...\n    urlpatterns = patterns('',\n        ('', include(remotestorage_patterns)),\n    ...\n\nThat will add all the app urls to the root-path (for the complete list\nof these paths, see `the module\ncode <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/__init__.py>`_).\nTo selectively disable some of the components, see \"Customization\"\nsection.\n\nDatabase schema\n'''''''''''''''\n\nThen the usual drill is to create the necessary database schema for the\napp (if you get \"Settings cannot be imported\" error, make sure you run\nthat from the same path as \"settings.py\" file):\n\n::\n\n    django-admin.py syncdb\n\nIf `South app <http://south.aeracode.org>`_ is installed (and specified\nin the INSTALLED\\_APPS), you should also use it's migrations to create\ntables for which they are available:\n\n::\n\n    django-admin.py migrate django_remotestorage\n\nThat command can (and should) also be run after django-remotestorage app\nupdates to apply any possible changes to db schema.\n\nRunning\n^^^^^^^\n\nPretty much anything that supports\n`WSGI <https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface>`_\nprotocol can be used with django - there's nothing app-specific here,\njust plain django, which is (usually) used as a backend with some httpd\nvia wsgi.\n\nSee django docs on `deployment\nprocess <https://docs.djangoproject.com/en/dev/howto/deployment/>`_ for\ngeneric instructions.\n\nCustomization\n-------------\n\nComponents\n~~~~~~~~~~\n\nThe app consists of several independent components (sub-apps, bound to\nurl paths via\n`django\\_remotestorage.urls <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/urls.py>`_):\n\n-  Webfinger (name: webfinger, URL:\n   {include\\_prefix}/.well-known/host-meta, {include\\_prefix}/webfinger;\n   see\n   `django\\_remotestorage.apps.webfinger.urls <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/apps/webfinger/urls.py>`_,\n   there are similar urlconf-files for other subapps).\n\n-  OAuth2 (name: oauth2, URL: {include\\_prefix}/oauth2).\n\n-  Storage API (name: api, URL: {include\\_prefix}/api).\n\n-  Account/client management (name: \"account\", URL:\n   {include\\_prefix}/account). Can also be enabled partially with the\n   following names: \"account\\_auth\" (login/logout forms/links),\n   \"account\\_auth\\_management\" (signup form),\n   \"account\\_client\\_management\" (client/app access management interface\n   for logged-in users). \"account\" is an alias for all of these\n   interfaces.\n\n-  Demo client (name: demo, URL: {include\\_prefix}/)\n\nSome components provide links to each other (for example, webfinger\nprovides links to OAuth2 and API in served XRD/JSON data), resolved as\n\"remotestorage:{app}:{view\\_name}\", so you can rebind these apps to any\nURLs, as long as you provide the same namespace/view\\_name for `django\n\"reverse()\"\nfunction <https://docs.djangoproject.com/en/dev/topics/http/urls/#reverse>`_\nand \"url\" template tags.\n\nWhen including \"django\\_remotestorage.urls.remotestorage\\_patterns\"\ndirectly (not the urlconfs from individual components),\n\"REMOTESTORAGE\\_COMPONENTS\" settings.py option can be set to an iterable\nof components which should be enabled, for example:\n\n::\n\n    REMOTESTORAGE_COMPONENTS = 'webfinger', 'oauth2', 'api'\n\n...will enable just Storage API, OAuth2 and Webfinger subapps - bare\nminimum for functional remoteStorage node. Unless some other means to\nauthenticate django user (like\n`django.contrib.auth.views.login <https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login>`_\nor django.contrib.admin) are enabled, it might also be necessary to\nenable \"account\\_auth\" interface to pass OAuth2 authorization.\n\nIf \"account\" (or it's parts) and \"demo\" apps are omitted from urlconf\nentirely (if not needed), there won't be any links to them in OAuth2\naccess confirmation interface. Their interface pages and functionality\nwon't be accessible.\n\n\"api\" and \"oauth2\" sub-apps are not linked to any other components\neither, so may be used separately from others and from each other as\nwell (e.g. if authorization server and storage are on a different\nhosts), but they must share a database in order for api to be able to\nvalidate auth tokens.\n\nOAuth2\n~~~~~~\n\nIt's highly recommended to raise database field lengths (using\n`oauth2app\nsettings <http://hiidef.github.com/oauth2app/settings.html>`_) *before*\nrunning syncdb for the first time:\n\n-  OAUTH2\\_CLIENT\\_KEY\\_LENGTH = 1024 (default: 30)\n-  OAUTH2\\_SCOPE\\_LENGTH = 2048 (default: 255)\n\nSee \"Known Issues / OAuth2\" section for more detailed explaination on\nwhy it should be done.\n\nAnother important tunable is OAUTH2\\_ACCESS\\_TOKEN\\_EXPIRATION (default:\n3600 = 1 hour), which - at least with remoteStorage.js 0.6.9 (\"stable\"\nat the moment of writing) - essentially sets a maximal interval between\nthe need to visit OAuth2 interface and get new access token, because\nremoteStorage.js doesn't seem to be able to refresh these.\n\nWebfinger\n~~~~~~~~~\n\nIf\n`webfinger <https://tools.ietf.org/html/draft-jones-appsawg-webfinger-01>`_\nand `host-meta <https://tools.ietf.org/html/draft-hammer-hostmeta-05>`_\nrequests for the domain should carry more data than just for\nremoteStorage, they can be extended either by replacing webfinger app\nentirely or adding custom templates for it.\n\nWebfinger app is using \"webfinger/host\\_meta.{xml,json}\" and\n\"webfinger/webfinger.{xml,json}\" templates, provided by\ndjango\\_remotestorage.apps.webfinger.xrd\\_gen.Loader or generated\ndynamically (in case of json, if template provide can't be found).\n\nSee example xml templates in\n`django\\_remotestorage/templates/webfinger/{host\\_meta,webfinger}.xml.example <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/templates/webfinger/>`_.\n\nStorage / WebDAV\n~~~~~~~~~~~~~~~~\n\nProvided remoteStorage is backed by (configurable) `Django Storage\nAPI <https://docs.djangoproject.com/en/dev/topics/files/>`_.\n\nBy default,\n`DEFAULT\\_FILE\\_STORAGE <https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DEFAULT_FILE_STORAGE>`_\nstorage class is used. Different storage class can be specified by\n\"REMOTESTORAGE\\_DAV\\_STORAGE\" parameter (passed to\n`get\\_storage\\_class <https://docs.djangoproject.com/en/dev/ref/files/storage/#django.core.files.storage.get_storage_class>`_).\n\nExamples of Storage API implementation might include:\n\n-  `django-storages <http://django-storages.readthedocs.org/en/latest/index.html>`_\n   (S3, CouchDB, SQL, FTP, MongoDB, CloudFiles, etc)\n-  `django-dropbox <https://github.com/andres-torres-marroquin/django-dropbox>`_\n   (Dropbox)\n-  `django-riak-engine <https://github.com/oubiwann/django-riak-engine>`_\n   (Riak)\n-  `django-tahoestorage <https://github.com/thraxil/django-tahoestorage>`_\n   (Tahoe-LAFS)\n\nBut basically there's a client for pretty much any data storage\ntechnology - just google it, install and set REMOTESTORAGE\\_DAV\\_STORAGE\n(or DEFAULT\\_FILE\\_STORAGE) to it.\n\nDefault Storage (FileStorage) parameters can be configured with\nMEDIA\\_URL and MEDIA\\_ROOT\n`settings <https://docs.djangoproject.com/en/dev/ref/settings/>`_, see\n`\"Managing\nfiles\" <https://docs.djangoproject.com/en/dev/topics/files/>`_ django\ndocs section for details.\n\nThere are also some optimization parameters:\n\n-  REMOTESTORAGE\\_DAV\\_SENDFILE (bool, default: False)\n\n   Pass Storage.path (if supported by backend) to httpd frontend via\n   \"X-Sendfile\" header instead of the actual contents upon request, so\n   that response can be served by frontend daemon directly without\n   backend app involved.\n\n-  REMOTESTORAGE\\_DAV\\_ACCEL (string, default: None)\n\n   Return empty HttpResponse with \"X-Accel-Redirect\" header set to\n   specified prefix (can be an empty string) plus the requested path, so\n   the actual response can be served by `apache\n   mod\\_accel <http://sysoev.ru/en/apache_modules.html>`_.\n\n-  REMOTESTORAGE\\_DAV\\_REDIRECT (bool, default: False)\n\n   Return redirect to MEDIA\\_URL (produced by Storage.url method). Used\n   only if MEDIA\\_URL is set to non-empty string.\n\n   Serve these urls only after checking oauth2app-generated bearer\n   tokens in http \"Authorization\" header either with django (or custom\n   python code) or some smart httpd.\n\n   **Do not** configure httpd to serve paths from MEDIA\\_URL without\n   authorization, because everyone will be able to bypass OAuth2 and\n   gain access to anything in remoteStorage just by guessing file paths\n   or getting/reusing them from js, which is really easy to exploit.\n\nInterfaces\n~~~~~~~~~~\n\nMostly usual drill - put your own templates to loaders, specified in\nsettings.py.\n\nExternal resources that are served on these pages can be put to\nSTATIC\\_ROOT to be served by local httpd instead. See\n`django\\_remotestorage.utils.external\\_resources\\_context <https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/utils.py>`_\ncontext processor for details.\n\nTake special care to make resources local if you serve these interfaces\nover https - there's just no security gain if MitM can place any\njavascript (loaded over plain http) to a page.\n\nNote that any/all of the UIs can be disabled, if they're not needed,\njust use REMOTESTORAGE\\_COMPONENTS option (described in \"Components\"\nsection) or don't include them in the urlconf, cherry-picking whichever\nones are actually needed.\n\nOne common case of customization is the need to put whole app into some\nsubpath (\"/remotestorage\" in the example) can be addressed by putting\nthis into the project's root urls.py:\n\n::\n\n    from django.conf.urls import patterns, include, url\n\n    from django_remotestorage.apps.webfinger.urls import host_meta_patterns\n    from django_remotestorage.urls import remotestorage_patterns\n\n    urlpatterns = patterns('',\n        url(r'', include(host_meta_patterns)),\n        url(r'^remotestorage/', include(remotestorage_patterns)),\n    )\n\nThat way, demo client will be available at \"/remotestorage\" url and all\nthe links will include that prefix (for example authorization link from\nwebfinger will point to \"/remotestorage/oauth2/authorize\").\n\nMake sure, however, that host\\_meta view of webfinger app is `available\nat a well-known\nurl <https://tools.ietf.org/html/draft-jones-appsawg-webfinger-04#section-3.1>`_\n\"/.well-known/host-meta\", hence the \"host\\_meta\\_patterns\" special-case\nlink from root.\n\nCommands\n--------\n\naccess\\_token\\_cleanup [options] [ username ... ]\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRemove expired OAuth access tokens (just for username(s), if specified)\nfrom the database.\n\nCan be occasionally run from cron (use --verbosity=0 to supress activity\nreports) to keep token number from growing indefinitely, removing\nnon-refreshed or about-to-expire (with negative --grace-period) ones.\n\nUsage example:\n\n::\n\n    % ./manage.py access_token_cleanup -v2 -n -t 3600 test\n    Removing token: id=1, user=test, client_name=localhost, expired=2012-07-31 03:24:30+06:00.\n    1 access token(s) removed.\n\nKnown issues\n------------\n\nThese are implementation-related issues, not the issues with the\nprotocols themselves (which doesn't imply there's none of the latter,\njust that it's not a place for them).\n\nWebfinger\n~~~~~~~~~\n\n-  No easy support for `signed\n   XRD <http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html#signature>`_\n   at the moment. Signed *static* xml \"templates\" (or just files, served\n   from httpd) can be used as a workaround if TLS is not an option.\n\nOAuth2\n~~~~~~\n\n-  Stored object path (think \"public/myphoto.jpg\") is used as OAuth2\n   \"scope\" by remoteStorage. oauth2app basically keeps a single table of\n   these (treating them as a finite up-front set of capabilities).\n\n   Problems here:\n\n   -  oauth2app stores \"scope\" as a 255-char key, while paths /\n      collection\\_names can potentially be longer. Upstream `pull\n      request <https://github.com/hiidef/oauth2app/pull/31>`_ to specify\n      field length was merged (as of 19.07.2012), so use any newer\n      version with the large-enough OAUTH2\\_SCOPE\\_LENGTH parameter in\n      settings.py (it `doesn't really affect\n      performance <http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/>`_\n      of modern databases, just making your life a bit harder).\n\n   -  Currently, oauth2app checks existance of AccessRange (scope)\n      models as they are specified in the request, even though access to\n      some of them might not be authorized by user, requiring temporary\n      creation of this clutter. Upstream pull request:\n      https://github.com/hiidef/oauth2app/pull/32\n\n   -  There's some extra code/db overhead involved in maintaining the\n      (pointless in this case) table.\n\n-  remoteStorage.js 0.6.9 (\"stable\" version at the moment) has a `known\n   issue <http://www.w3.org/community/unhosted/wiki/RemoteStorage-2011.10#OAuth>`_\n   of passing legacy \"path1,path2\" as a \"scope\", further complicating\n   things for oauth2app (which would think that it's a single\n   capability, as per spec) if several paths are passed.\n\n   Workaround used is to detect the old format by lack of \":rw\" suffixes\n   and update \"scope\" in the address by issuing a redirect.\n\n   Note that since paths may contain commas, \"path1,path2\" can be\n   ambiguous (because of this issue) and can be treated either as\n   \"path1:rw\" and \"path2:rw\" or \"path1,path2:rw\". Current implementation\n   chooses the former interpretation if there's no colon-delimeted\n   suffix.\n\n-  remoteStorage.js 0.6.9 (\"stable\" version at the moment) uses hostname\n   of the app site as OAuth2 client\\_id, which, in oauth2app corresponds\n   to the \"key\" field, which is just 32-chars long by default, which\n   might not be enough for some hostnames, but can (and *should*!) be\n   configured by OAUTH2\\_CLIENT\\_KEY\\_LENGTH parameter in django\n   project's settings.py. Remember to do that *before* syncdb, or update\n   the table column later.\n\n   Possible workaround might be to use hashes as the client\\_id's\n   internally and redirect remoteStorage requests with\n   \"client\\_id=hostname.com\" to something like\n   \"client\\_id=sha1:bbc21f0ccb5dfbf81f5043d78aa\".\n\n   I can't see why client\\_id should be random or non-meaningful at the\n   moment, if there's a reason for that, please report an issue, some\n   automatic migration to hashes can probably be deployed at any time.\n\n-  oauth2app is `not on\n   PyPI <https://github.com/hiidef/oauth2app/issues/7>`_ at the moment,\n   but pip can install it from github directly.\n\nWebDAV\n~~~~~~\n\n-  CSRF middleware\n   (`django.middleware.csrf.CsrfViewMiddleware <https://docs.djangoproject.com/en/dev/ref/contrib/csrf/>`_)\n   must be disabled, because remoteStorage.js doesn't pass django csrf\n   tokens along with PUT (and similar) requests. It's selectively\n   enabled via decorator for app forms though.\n\n-  Data is currently stored in the Django Storage, while path metadata\n   is stored through the Django Database API, which introduces two\n   points of failure (and the possibility of sync loss between the two),\n   because one data is useless without the other.\n\n   There don't seem to be any easy way around it - storing path data in\n   Storage keys won't work with any driver, pushing that to the content\n   won't work when this content will be served by anything but python\n   (say, httpd) and storing files in a db only works well for relatively\n   small files.\n\n   So make sure to backup db as well as the actual storage, or write\n   some storage-specific kludge to store metadata there as well. Example\n   would be to add a hook to `post-save django\n   signal <https://docs.djangoproject.com/en/dev/ref/models/instances/#what-happens-when-you-save>`_,\n   which would get storage path from StorageObject.data.name and store\n   some \"{name}.meta\" file alongside with serialized model data.\n\nTODO\n----\n\n-  Client (app, requesting access) deception - returning fake\n   \"authorized scopes\" to it, but storing them somewhere to deny the\n   actual access or provide random garbage instead.\n\n   Idea is to prevent situation, common on twitter and android\n   platforms, when apps always ask for everything and user is presented\n   with \"all or nothing\" choice.\n\n-  Add ability to inspect stored/accessed resources to the client\n   management interface.\n\nContacts / Support\n------------------\n\nFeel free to drop by to #unhosted or #remotestorage channels on\n`freenode IRC <http://freenode.net>`_, you can always find authors and\npeople (developers included) willing to help understand, setup and\nresolve any issues there.\n\nMailing lists, twitter and other channels of indirect communication can\nalso be found on `Unhosted movement site <http://unhosted.org/>`_.\n\nAnd of course, open Issues for `github\nrepository <https://github.com/RemoteStorage/django-remotestorage>`_.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RemoteStorage/django-remotestorage", "keywords": "django unhosted app remoteStorage server cloud silo storage oauth webfinger xrd read-write-web webdav", "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "django-remotestorage", "package_url": "https://pypi.org/project/django-remotestorage/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-remotestorage/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/RemoteStorage/django-remotestorage"}, "release_url": "https://pypi.org/project/django-remotestorage/13.08.0/", "requires_dist": null, "requires_python": null, "summary": "Unhosted remoteStorage server app for django", "version": "13.08.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-remotestorage\">\n<h2>django-remotestorage</h2>\n<p><a href=\"https://unhosted.org\" rel=\"nofollow\">Unhosted</a>\n<a href=\"http://remotestorage.io\" rel=\"nofollow\">remoteStorage</a> server implementation</p>\n<p>This app is a server (storage) implementation for an earlier\nremoteStorage API version, specified here:</p>\n<pre>http://www.w3.org/community/unhosted/wiki/RemoteStorage-2011.10\n</pre>\n<p>Some parts of it (especially webfinger, oauth2, since I\u2019ve used newer\nspecs that were available at the time) <em>might</em> be compatible with the\ncurrent API:</p>\n<pre>https://tools.ietf.org/id/draft-dejong-remotestorage-00.txt\n</pre>\n<p>But since remoteStorage.js 0.7.0 for experimental API was still under\nheavy development at the time, I haven\u2019t tested whether it works with\ncurrent implementation.</p>\n<p>Package (and django app) was called django-unhosted in the past and was\neventually renamed. If you\u2019re using django-unhosted package, please read\nthe <a href=\"https://github.com/RemoteStorage/django-remotestorage#migration-from-django-unhosted\" rel=\"nofollow\">notes on\nmigration</a>\nunder\n<a href=\"https://github.com/RemoteStorage/django-remotestorage#installation\" rel=\"nofollow\">Installation</a>\nsection.</p>\n</div>\n<div id=\"id1\">\n<h2>remoteStorage</h2>\n<p>Idea is that you can have storage account (with whatever policies and\nauthentication) on host1 and some webapp (say, some visual editor, think\nMS Word) on host2.</p>\n<p>To edit document in a webapp, generally host2 would have to implement\nsome sort of user registration, storage (like docs.google.com) for\nedited docs, etc.</p>\n<p>With remoteStorage, this storage don\u2019t have to be on host2, so you don\u2019t\nhave to implement some complex policies and authenticated storage there\nto launch a full-featured webapp - it can open and save docs to any\nremote host which supports the protocol (which is basically GET/PUT from\nWebDAV with OAuth2 on top).</p>\n<p>host1 can be your VPS, client machine itself (especially easy with\ndirect IPv6, or IPv4 provided via some service like\n<a href=\"https://pagekite.net/\" rel=\"nofollow\">pagekite</a>), some reliable cloud provider or\nwhatever.</p>\n<p>To fully understand how it all works, I recommend looking at OAuth2,\nWebDAV, CORS and Webfinger, which are basically all the technologies\nused to implement the protocol.</p>\n<p>This django app fully implements web-facing storage for host1, complete\nwith user registration forms (optional, users can be added by other\ndjango apps or via django admin interface otherwise), client access\nmanagement interfaces and a simple demo client.</p>\n</div>\n<div id=\"security\">\n<h2>Security</h2>\n<p>Since applicaton is a public-internet-facing interface to your (possibly\nimportant) data and I\u2019m in no way security expert or specialist, I\nrecommend to pentest or validate the code before storing any sensitive\ndata in it.</p>\n<p>Data loss or corruption is much easier to prevent (and backups go a long\nway here, btw) than security exploits, so, again, please look at the\ncode yourself and find issues there which I have a blind spot (not to\nmention lack of skills) for, thus won\u2019t be able to find on my own.</p>\n<p>Example of <em>obvious</em> (to an outsider analysis) security flaws in another\nstorage-server implementation <a href=\"http://crypto.junod.info/2012/05/24/owncloud-4-0-and-encryption/\" rel=\"nofollow\">can be found\nhere</a>,\nlearn the lession there.</p>\n</div>\n<div id=\"id2\">\n<h2>Installation</h2>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"http://python.org/\" rel=\"nofollow\">Python 2.7 (not 3.X)</a></li>\n<li><a href=\"http://djangoproject.com\" rel=\"nofollow\">Django</a></li>\n<li><a href=\"http://hiidef.github.com/oauth2app/\" rel=\"nofollow\">Django OAuth 2.0 Server App\n(oauth2app)</a></li>\n<li>(optional, recommended) <a href=\"http://south.aeracode.org\" rel=\"nofollow\">South</a> - for\nautomated database schema updates</li>\n</ul>\n<p>oauth2app is <a href=\"https://github.com/hiidef/oauth2app/issues/7\" rel=\"nofollow\">not on\nPyPI</a> at the moment, but\npip can install it from github directly.</p>\n<p>Various interfaces of the app use some external resources, like <a href=\"http://twitter.github.com/bootstrap/\" rel=\"nofollow\">Twitter\nBootstrap</a> CSS file (served from\nbootstrapcdn.com) and\n<a href=\"https://github.com/RemoteStorage/remoteStorage.js\" rel=\"nofollow\">remoteStorage.js</a>,\nwhich can be served - and <strong>should be</strong>, if you\u2019re using https for\ninterfaces - from local URLs, if available in STATIC_ROOT. See\n\u201cCustomization / Interfaces\u201d for details.</p>\n</div>\n<div id=\"migration-from-django-unhosted\">\n<h3>Migration from django-unhosted</h3>\n<p>Package was called django-unhosted in the past, but it was decided to\nrename it before it was way too late.</p>\n<p>Unfortunately, there\u2019s no easy way to rename django app and python\npackage, especially if it\u2019s undesirable to keep older package names\naround for eternity, so some manual steps have to be taken in order to\nmigrate to the new (django-remotestorage) app/package.</p>\n<ul>\n<li>Uninstall django-unhosted python package (either through\n<tt>pip uninstall\u00a0\u00a0\u00a0\u00a0 <span class=\"pre\">django-unhosted</span></tt>, OS tools, or remove module\npath manually).</li>\n<li>Rename all database tables with \u201cdjango_unhosted\u201d in name to be\nstarting with \u201cdjango_remotestorage\u201d instead. Lots of easy-to-use\nGUI tools (such as <a href=\"http://www.pgadmin.org/\" rel=\"nofollow\">pgadmin</a>,\n<a href=\"http://phppgadmin.sourceforge.net/\" rel=\"nofollow\">phpPgAdmin</a>,\n<a href=\"http://www.phpmyadmin.net/\" rel=\"nofollow\">phpMyAdmin</a>,\n<a href=\"http://phpsqliteadmin.sourceforge.net/\" rel=\"nofollow\">phpSQLiteAdmin</a>, etc) or\nnative CLI interfaces (<tt>sqlite3 /path/to/db.sqlite</tt>, <tt>psql</tt>,\n<tt>mysql</tt>, etc) can be used for that.</li>\n<li>Update settings.py and urlconf to import stuff from\n\u201cdjango_remotestorage\u201d module instead of \u201cdjango_unhosted\u201d. Replace\nall \u201cUNHOSTED_\u201d in variable names to \u201cREMOTESTORAGE_\u201d, if used in\nsettings.py.</li>\n<li>If you have a custom urlconf and/or templates, replace references to\n\u201cunhosted\u201d namespace with \u201cremotestorage\u201d.</li>\n</ul>\n<p>It should fairly straightforward, but feel free to open Issue or\n<a href=\"https://github.com/RemoteStorage/django-remotestorage#contacts--support\" rel=\"nofollow\">contact\ndevelopers</a>\nif the described process doesn\u2019t work for you.</p>\n</div>\n<div id=\"deployment-configuration\">\n<h3>Deployment / configuration</h3>\n<p>Django apps are deployed as a part of \u201cdjango project\u201d, which is - at\nit\u2019s minimum - just a few <a href=\"https://docs.djangoproject.com/en/dev/topics/settings/\" rel=\"nofollow\">configuration\nfiles</a>,\nspecifying which database to use, and which apps should handle which\nURLs.</p>\n<div id=\"tl-dr\">\n<h4>TL;DR</h4>\n<p>Simple installation/setup from scratch may look like this.</p>\n<p>Install the app itself (or not, it can be just checked-out into a\nproject dir):</p>\n<pre>pip install django-remotestorage\n</pre>\n<p>\u2026or, to install directly from git master branch:</p>\n<pre>pip install 'git+https://github.com/RemoteStorage/django-remotestorage.git#egg=django-remotestorage'\n</pre>\n<p>\u2026or you can do it manually:</p>\n<pre>git clone https://github.com/RemoteStorage/django-remotestorage.git\ncd django-remotestorage\npython setup.py install\npip install -r requirements.txt # or download/install each by hand as well\n</pre>\n<p>\u201cpip\u201d tool, mentioned above, should usually come with OS of choice,\notherwise see <a href=\"http://www.pip-installer.org/en/latest/installing.html\" rel=\"nofollow\">pip installation\ndocs</a>. Don\u2019t\nuse \u201ceasy_install\u201d for anything except installing the pip itself.</p>\n<p>Install oauth2app in a similar fashion:</p>\n<pre>pip install 'git+https://github.com/hiidef/oauth2app.git#egg=oauth2app'\n</pre>\n<p>Then create and configure a django project:</p>\n<pre>cd\ndjango-admin.py startproject myproject\ncd myproject\n\n# Update settings.py (sqlite3 is used as db here) and urls.py\nsed -i \\\n    -e 's/'\\''ENGINE'\\''.*/\"ENGINE\": \"django.db.backends.sqlite3\",/' \\\n    -e 's/'\\''NAME'\\''.*/\"NAME\": \"db.sqlite\",/' \\\n    -e 's/STATIC_ROOT *=/STATIC_ROOT=\"./static\"/' \\\n    myproject/settings.py\necho -e &gt;&gt;myproject/settings.py \\\n    'from django_remotestorage.settings_base import update_settings' \\\n    '\\nupdate_settings(__name__)'\nsed -i \\\n    -e '1afrom django_remotestorage.urls import remotestorage_patterns' \\\n    -e 's/# Examples:.*/(\"\", include(remotestorage_patterns)),\\n\\n\\0/' \\\n    myproject/urls.py\n\n# Create database schema and link app static files to STATIC_ROOT\n./manage.py syncdb --noinput\n./manage.py migrate django_remotestorage\n./manage.py collectstatic --noinput --link\n\n# Run simple dev server\n./manage.py runserver\n</pre>\n<p>(since webfinger protocol <strong>requires</strong> some sort of XRD authentication,\nlike https, it <em>won\u2019t work</em> properly on such a simple setup)</p>\n<p>More detailed explaination of configuration process follows.</p>\n</div>\n<div id=\"django-project-configuration\">\n<h4>Django project configuration</h4>\n<p>Main idea is that two config files (in django project) need to be\nupdated - settings.py and urls.py.</p>\n<p>There are several ways to update django settings.py to use the app:</p>\n<ul>\n<li><p>If it\u2019s the only app in a django project and there\u2019s no custom\nsettings.py already, options from\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/settings_base.py\" rel=\"nofollow\">django_remotestorage.settings_base</a>\nmodule can be imported into it directly.</p>\n<p>To do that, add the following lines to the <em>end</em> of\n\u201c{your_app_name}/settings.py\u201d (or wherever\n<a href=\"https://docs.djangoproject.com/en/dev/topics/settings/#designating-the-settings\" rel=\"nofollow\">DJANGO_SETTINGS_MODULE</a>\nis used) file:</p>\n<pre>from django_remotestorage.settings_base import *\n</pre>\n<p>That will import all the options there (bare minimum that has to be\nchanged) over those defined above in the original file.</p>\n<p>Note that list of overidden options include INSTALLED_APPS,\nMIDDLEWARE_CLASSES and such, which are not only often customized,\nbut are usually specific to the django version installed, so you may\nalternatively insert that import line at the <em>beginning</em> of the\nsettings.py, so everything defined after it will override the\nimported options.</p>\n</li>\n<li><p>If there\u2019s already some custom settings.py file available, there\u2019s\ndjango_remotestorage.settings_base.update_settings helper function\navailable to update configuration without blindly overriding any\noptions.</p>\n<p>It can be used at the end of settings.py file like this:</p>\n<pre>from django_remotestorage.settings_base import update_settings\nupdate_settings(__name__)\n</pre>\n<p>Full list of changes it\u2019ll make can be found in \u201cupdates\u201d dict at the\nbeginning of\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/settings_base.py\" rel=\"nofollow\">django_remotestorage.settings_base</a>\nmodule.</p>\n<p>\u201cupdate_settings\u201d function also takes an optional \u201conly\u201d and\n\u201cignore\u201d keywords (expecting an iterable of option names), which can\nbe used to control which parameters should be updated or explicitly\nleft untouched.</p>\n<p>This should be more safe, flexible and future-proof way of merging\nnecessary option updates with existing (site-specific) configuration.</p>\n</li>\n<li><p>Update the file by hand.</p>\n<p>Default values for the most settings can be found in <a href=\"https://docs.djangoproject.com/en/dev/ref/settings/\" rel=\"nofollow\">django\ndocumentation</a>.</p>\n<p>For the class-listing type options, duplicate values may be omitted.\nNote that order of MIDDLEWARE_CLASSES is significant.</p>\n<pre>OAUTH2_CLIENT_KEY_LENGTH = 1024\nOAUTH2_SCOPE_LENGTH = 2048\n\nTEMPLATE_CONTEXT_PROCESSORS = (\n    ...whatever is already there...\n    'django.core.context_processors.csrf',\n    'django.core.context_processors.request',\n    'django.contrib.messages.context_processors.messages',\n    'django_remotestorage.utils.external_resources_context',\n)\n\nTEMPLATE_LOADERS = (\n    ...whatever is already there...\n    'django_remotestorage.apps.webfinger.xrd_gen.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    ...whatever is already there...\n    &lt;remove 'django.middleware.csrf.CsrfViewMiddleware', if it's there&gt;\n    ...whatever is already there, except for ConditionalGet / FetchFromCache...\n    'django.contrib.messages.middleware.MessageMiddleware',\n    ...ConditionalGetMiddleware and FetchFromCacheMiddleware (and such), if used...\n)\n\nINSTALLED_APPS = (\n    ...whatever is already there...\n    'django.contrib.messages',\n    'django_remotestorage',\n    'oauth2app',\n    'south',\n)\n</pre>\n<p>\u201csouth\u201d should be omitted from INSTALLED_APPS, if not used.</p>\n</li>\n</ul>\n<p>In any case, if you\u2019ve just created django project (with\n\u201cdjango-admin.py startproject\u201d or whatever), make sure to look through\nit\u2019s settings.py file and edit at least DATABASES, MEDIA_* and\nSTATIC_* options. You might also want to set other (optonal) settings\nthere - TIME_ZONE, ADMINS, LOGGING, etc.</p>\n<p>As for urls.py, just add the following line to url patterns (importing\nremotestorage_patterns from django_remotestorage.urls module\nbeforehand):</p>\n<pre>('', include(remotestorage_patterns)),\n</pre>\n<p>So it\u2019d look like this:</p>\n<pre>...\nfrom django_remotestorage.urls import remotestorage_patterns\n...\nurlpatterns = patterns('',\n    ('', include(remotestorage_patterns)),\n...\n</pre>\n<p>That will add all the app urls to the root-path (for the complete list\nof these paths, see <a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/__init__.py\" rel=\"nofollow\">the module\ncode</a>).\nTo selectively disable some of the components, see \u201cCustomization\u201d\nsection.</p>\n</div>\n<div id=\"database-schema\">\n<h4>Database schema</h4>\n<p>Then the usual drill is to create the necessary database schema for the\napp (if you get \u201cSettings cannot be imported\u201d error, make sure you run\nthat from the same path as \u201csettings.py\u201d file):</p>\n<pre>django-admin.py syncdb\n</pre>\n<p>If <a href=\"http://south.aeracode.org\" rel=\"nofollow\">South app</a> is installed (and specified\nin the INSTALLED_APPS), you should also use it\u2019s migrations to create\ntables for which they are available:</p>\n<pre>django-admin.py migrate django_remotestorage\n</pre>\n<p>That command can (and should) also be run after django-remotestorage app\nupdates to apply any possible changes to db schema.</p>\n<div id=\"running\">\n<h5>Running</h5>\n<p>Pretty much anything that supports\n<a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" rel=\"nofollow\">WSGI</a>\nprotocol can be used with django - there\u2019s nothing app-specific here,\njust plain django, which is (usually) used as a backend with some httpd\nvia wsgi.</p>\n<p>See django docs on <a href=\"https://docs.djangoproject.com/en/dev/howto/deployment/\" rel=\"nofollow\">deployment\nprocess</a> for\ngeneric instructions.</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"customization\">\n<h2>Customization</h2>\n<div id=\"components\">\n<h3>Components</h3>\n<p>The app consists of several independent components (sub-apps, bound to\nurl paths via\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/urls.py\" rel=\"nofollow\">django_remotestorage.urls</a>):</p>\n<ul>\n<li>Webfinger (name: webfinger, URL:\n{include_prefix}/.well-known/host-meta, {include_prefix}/webfinger;\nsee\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/apps/webfinger/urls.py\" rel=\"nofollow\">django_remotestorage.apps.webfinger.urls</a>,\nthere are similar urlconf-files for other subapps).</li>\n<li>OAuth2 (name: oauth2, URL: {include_prefix}/oauth2).</li>\n<li>Storage API (name: api, URL: {include_prefix}/api).</li>\n<li>Account/client management (name: \u201caccount\u201d, URL:\n{include_prefix}/account). Can also be enabled partially with the\nfollowing names: \u201caccount_auth\u201d (login/logout forms/links),\n\u201caccount_auth_management\u201d (signup form),\n\u201caccount_client_management\u201d (client/app access management interface\nfor logged-in users). \u201caccount\u201d is an alias for all of these\ninterfaces.</li>\n<li>Demo client (name: demo, URL: {include_prefix}/)</li>\n</ul>\n<p>Some components provide links to each other (for example, webfinger\nprovides links to OAuth2 and API in served XRD/JSON data), resolved as\n\u201cremotestorage:{app}:{view_name}\u201d, so you can rebind these apps to any\nURLs, as long as you provide the same namespace/view_name for <a href=\"https://docs.djangoproject.com/en/dev/topics/http/urls/#reverse\" rel=\"nofollow\">django\n\u201creverse()\u201d\nfunction</a>\nand \u201curl\u201d template tags.</p>\n<p>When including \u201cdjango_remotestorage.urls.remotestorage_patterns\u201d\ndirectly (not the urlconfs from individual components),\n\u201cREMOTESTORAGE_COMPONENTS\u201d settings.py option can be set to an iterable\nof components which should be enabled, for example:</p>\n<pre>REMOTESTORAGE_COMPONENTS = 'webfinger', 'oauth2', 'api'\n</pre>\n<p>\u2026will enable just Storage API, OAuth2 and Webfinger subapps - bare\nminimum for functional remoteStorage node. Unless some other means to\nauthenticate django user (like\n<a href=\"https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login\" rel=\"nofollow\">django.contrib.auth.views.login</a>\nor django.contrib.admin) are enabled, it might also be necessary to\nenable \u201caccount_auth\u201d interface to pass OAuth2 authorization.</p>\n<p>If \u201caccount\u201d (or it\u2019s parts) and \u201cdemo\u201d apps are omitted from urlconf\nentirely (if not needed), there won\u2019t be any links to them in OAuth2\naccess confirmation interface. Their interface pages and functionality\nwon\u2019t be accessible.</p>\n<p>\u201capi\u201d and \u201coauth2\u201d sub-apps are not linked to any other components\neither, so may be used separately from others and from each other as\nwell (e.g. if authorization server and storage are on a different\nhosts), but they must share a database in order for api to be able to\nvalidate auth tokens.</p>\n</div>\n<div id=\"oauth2\">\n<h3>OAuth2</h3>\n<p>It\u2019s highly recommended to raise database field lengths (using\n<a href=\"http://hiidef.github.com/oauth2app/settings.html\" rel=\"nofollow\">oauth2app\nsettings</a>) <em>before</em>\nrunning syncdb for the first time:</p>\n<ul>\n<li>OAUTH2_CLIENT_KEY_LENGTH = 1024 (default: 30)</li>\n<li>OAUTH2_SCOPE_LENGTH = 2048 (default: 255)</li>\n</ul>\n<p>See \u201cKnown Issues / OAuth2\u201d section for more detailed explaination on\nwhy it should be done.</p>\n<p>Another important tunable is OAUTH2_ACCESS_TOKEN_EXPIRATION (default:\n3600 = 1 hour), which - at least with remoteStorage.js 0.6.9 (\u201cstable\u201d\nat the moment of writing) - essentially sets a maximal interval between\nthe need to visit OAuth2 interface and get new access token, because\nremoteStorage.js doesn\u2019t seem to be able to refresh these.</p>\n</div>\n<div id=\"webfinger\">\n<h3>Webfinger</h3>\n<p>If\n<a href=\"https://tools.ietf.org/html/draft-jones-appsawg-webfinger-01\" rel=\"nofollow\">webfinger</a>\nand <a href=\"https://tools.ietf.org/html/draft-hammer-hostmeta-05\" rel=\"nofollow\">host-meta</a>\nrequests for the domain should carry more data than just for\nremoteStorage, they can be extended either by replacing webfinger app\nentirely or adding custom templates for it.</p>\n<p>Webfinger app is using \u201cwebfinger/host_meta.{xml,json}\u201d and\n\u201cwebfinger/webfinger.{xml,json}\u201d templates, provided by\ndjango_remotestorage.apps.webfinger.xrd_gen.Loader or generated\ndynamically (in case of json, if template provide can\u2019t be found).</p>\n<p>See example xml templates in\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/templates/webfinger/\" rel=\"nofollow\">django_remotestorage/templates/webfinger/{host_meta,webfinger}.xml.example</a>.</p>\n</div>\n<div id=\"storage-webdav\">\n<h3>Storage / WebDAV</h3>\n<p>Provided remoteStorage is backed by (configurable) <a href=\"https://docs.djangoproject.com/en/dev/topics/files/\" rel=\"nofollow\">Django Storage\nAPI</a>.</p>\n<p>By default,\n<a href=\"https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DEFAULT_FILE_STORAGE\" rel=\"nofollow\">DEFAULT_FILE_STORAGE</a>\nstorage class is used. Different storage class can be specified by\n\u201cREMOTESTORAGE_DAV_STORAGE\u201d parameter (passed to\n<a href=\"https://docs.djangoproject.com/en/dev/ref/files/storage/#django.core.files.storage.get_storage_class\" rel=\"nofollow\">get_storage_class</a>).</p>\n<p>Examples of Storage API implementation might include:</p>\n<ul>\n<li><a href=\"http://django-storages.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">django-storages</a>\n(S3, CouchDB, SQL, FTP, MongoDB, CloudFiles, etc)</li>\n<li><a href=\"https://github.com/andres-torres-marroquin/django-dropbox\" rel=\"nofollow\">django-dropbox</a>\n(Dropbox)</li>\n<li><a href=\"https://github.com/oubiwann/django-riak-engine\" rel=\"nofollow\">django-riak-engine</a>\n(Riak)</li>\n<li><a href=\"https://github.com/thraxil/django-tahoestorage\" rel=\"nofollow\">django-tahoestorage</a>\n(Tahoe-LAFS)</li>\n</ul>\n<p>But basically there\u2019s a client for pretty much any data storage\ntechnology - just google it, install and set REMOTESTORAGE_DAV_STORAGE\n(or DEFAULT_FILE_STORAGE) to it.</p>\n<p>Default Storage (FileStorage) parameters can be configured with\nMEDIA_URL and MEDIA_ROOT\n<a href=\"https://docs.djangoproject.com/en/dev/ref/settings/\" rel=\"nofollow\">settings</a>, see\n<a href=\"https://docs.djangoproject.com/en/dev/topics/files/\" rel=\"nofollow\">\u201cManaging\nfiles\u201d</a> django\ndocs section for details.</p>\n<p>There are also some optimization parameters:</p>\n<ul>\n<li><p>REMOTESTORAGE_DAV_SENDFILE (bool, default: False)</p>\n<p>Pass Storage.path (if supported by backend) to httpd frontend via\n\u201cX-Sendfile\u201d header instead of the actual contents upon request, so\nthat response can be served by frontend daemon directly without\nbackend app involved.</p>\n</li>\n<li><p>REMOTESTORAGE_DAV_ACCEL (string, default: None)</p>\n<p>Return empty HttpResponse with \u201cX-Accel-Redirect\u201d header set to\nspecified prefix (can be an empty string) plus the requested path, so\nthe actual response can be served by <a href=\"http://sysoev.ru/en/apache_modules.html\" rel=\"nofollow\">apache\nmod_accel</a>.</p>\n</li>\n<li><p>REMOTESTORAGE_DAV_REDIRECT (bool, default: False)</p>\n<p>Return redirect to MEDIA_URL (produced by Storage.url method). Used\nonly if MEDIA_URL is set to non-empty string.</p>\n<p>Serve these urls only after checking oauth2app-generated bearer\ntokens in http \u201cAuthorization\u201d header either with django (or custom\npython code) or some smart httpd.</p>\n<p><strong>Do not</strong> configure httpd to serve paths from MEDIA_URL without\nauthorization, because everyone will be able to bypass OAuth2 and\ngain access to anything in remoteStorage just by guessing file paths\nor getting/reusing them from js, which is really easy to exploit.</p>\n</li>\n</ul>\n</div>\n<div id=\"interfaces\">\n<h3>Interfaces</h3>\n<p>Mostly usual drill - put your own templates to loaders, specified in\nsettings.py.</p>\n<p>External resources that are served on these pages can be put to\nSTATIC_ROOT to be served by local httpd instead. See\n<a href=\"https://github.com/RemoteStorage/django-remotestorage/blob/master/django_remotestorage/utils.py\" rel=\"nofollow\">django_remotestorage.utils.external_resources_context</a>\ncontext processor for details.</p>\n<p>Take special care to make resources local if you serve these interfaces\nover https - there\u2019s just no security gain if MitM can place any\njavascript (loaded over plain http) to a page.</p>\n<p>Note that any/all of the UIs can be disabled, if they\u2019re not needed,\njust use REMOTESTORAGE_COMPONENTS option (described in \u201cComponents\u201d\nsection) or don\u2019t include them in the urlconf, cherry-picking whichever\nones are actually needed.</p>\n<p>One common case of customization is the need to put whole app into some\nsubpath (\u201c/remotestorage\u201d in the example) can be addressed by putting\nthis into the project\u2019s root urls.py:</p>\n<pre>from django.conf.urls import patterns, include, url\n\nfrom django_remotestorage.apps.webfinger.urls import host_meta_patterns\nfrom django_remotestorage.urls import remotestorage_patterns\n\nurlpatterns = patterns('',\n    url(r'', include(host_meta_patterns)),\n    url(r'^remotestorage/', include(remotestorage_patterns)),\n)\n</pre>\n<p>That way, demo client will be available at \u201c/remotestorage\u201d url and all\nthe links will include that prefix (for example authorization link from\nwebfinger will point to \u201c/remotestorage/oauth2/authorize\u201d).</p>\n<p>Make sure, however, that host_meta view of webfinger app is <a href=\"https://tools.ietf.org/html/draft-jones-appsawg-webfinger-04#section-3.1\" rel=\"nofollow\">available\nat a well-known\nurl</a>\n\u201c/.well-known/host-meta\u201d, hence the \u201chost_meta_patterns\u201d special-case\nlink from root.</p>\n</div>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<h2 id=\"access-token-cleanup-options-username\"><span class=\"section-subtitle\">access_token_cleanup [options] [ username \u2026 ]</span></h2>\n<p>Remove expired OAuth access tokens (just for username(s), if specified)\nfrom the database.</p>\n<p>Can be occasionally run from cron (use \u2013verbosity=0 to supress activity\nreports) to keep token number from growing indefinitely, removing\nnon-refreshed or about-to-expire (with negative \u2013grace-period) ones.</p>\n<p>Usage example:</p>\n<pre>% ./manage.py access_token_cleanup -v2 -n -t 3600 test\nRemoving token: id=1, user=test, client_name=localhost, expired=2012-07-31 03:24:30+06:00.\n1 access token(s) removed.\n</pre>\n</div>\n<div id=\"known-issues\">\n<h2>Known issues</h2>\n<p>These are implementation-related issues, not the issues with the\nprotocols themselves (which doesn\u2019t imply there\u2019s none of the latter,\njust that it\u2019s not a place for them).</p>\n<div id=\"id5\">\n<h3>Webfinger</h3>\n<ul>\n<li>No easy support for <a href=\"http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html#signature\" rel=\"nofollow\">signed\nXRD</a>\nat the moment. Signed <em>static</em> xml \u201ctemplates\u201d (or just files, served\nfrom httpd) can be used as a workaround if TLS is not an option.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>OAuth2</h3>\n<ul>\n<li><p>Stored object path (think \u201cpublic/myphoto.jpg\u201d) is used as OAuth2\n\u201cscope\u201d by remoteStorage. oauth2app basically keeps a single table of\nthese (treating them as a finite up-front set of capabilities).</p>\n<p>Problems here:</p>\n<ul>\n<li>oauth2app stores \u201cscope\u201d as a 255-char key, while paths /\ncollection_names can potentially be longer. Upstream <a href=\"https://github.com/hiidef/oauth2app/pull/31\" rel=\"nofollow\">pull\nrequest</a> to specify\nfield length was merged (as of 19.07.2012), so use any newer\nversion with the large-enough OAUTH2_SCOPE_LENGTH parameter in\nsettings.py (it <a href=\"http://www.depesz.com/2010/03/02/charx-vs-varcharx-vs-varchar-vs-text/\" rel=\"nofollow\">doesn\u2019t really affect\nperformance</a>\nof modern databases, just making your life a bit harder).</li>\n<li>Currently, oauth2app checks existance of AccessRange (scope)\nmodels as they are specified in the request, even though access to\nsome of them might not be authorized by user, requiring temporary\ncreation of this clutter. Upstream pull request:\n<a href=\"https://github.com/hiidef/oauth2app/pull/32\" rel=\"nofollow\">https://github.com/hiidef/oauth2app/pull/32</a></li>\n<li>There\u2019s some extra code/db overhead involved in maintaining the\n(pointless in this case) table.</li>\n</ul>\n</li>\n<li><p>remoteStorage.js 0.6.9 (\u201cstable\u201d version at the moment) has a <a href=\"http://www.w3.org/community/unhosted/wiki/RemoteStorage-2011.10#OAuth\" rel=\"nofollow\">known\nissue</a>\nof passing legacy \u201cpath1,path2\u201d as a \u201cscope\u201d, further complicating\nthings for oauth2app (which would think that it\u2019s a single\ncapability, as per spec) if several paths are passed.</p>\n<p>Workaround used is to detect the old format by lack of \u201c:rw\u201d suffixes\nand update \u201cscope\u201d in the address by issuing a redirect.</p>\n<p>Note that since paths may contain commas, \u201cpath1,path2\u201d can be\nambiguous (because of this issue) and can be treated either as\n\u201cpath1:rw\u201d and \u201cpath2:rw\u201d or \u201cpath1,path2:rw\u201d. Current implementation\nchooses the former interpretation if there\u2019s no colon-delimeted\nsuffix.</p>\n</li>\n<li><p>remoteStorage.js 0.6.9 (\u201cstable\u201d version at the moment) uses hostname\nof the app site as OAuth2 client_id, which, in oauth2app corresponds\nto the \u201ckey\u201d field, which is just 32-chars long by default, which\nmight not be enough for some hostnames, but can (and <em>should</em>!) be\nconfigured by OAUTH2_CLIENT_KEY_LENGTH parameter in django\nproject\u2019s settings.py. Remember to do that <em>before</em> syncdb, or update\nthe table column later.</p>\n<p>Possible workaround might be to use hashes as the client_id\u2019s\ninternally and redirect remoteStorage requests with\n\u201cclient_id=hostname.com\u201d to something like\n\u201cclient_id=sha1:bbc21f0ccb5dfbf81f5043d78aa\u201d.</p>\n<p>I can\u2019t see why client_id should be random or non-meaningful at the\nmoment, if there\u2019s a reason for that, please report an issue, some\nautomatic migration to hashes can probably be deployed at any time.</p>\n</li>\n<li><p>oauth2app is <a href=\"https://github.com/hiidef/oauth2app/issues/7\" rel=\"nofollow\">not on\nPyPI</a> at the moment,\nbut pip can install it from github directly.</p>\n</li>\n</ul>\n</div>\n<div id=\"webdav\">\n<h3>WebDAV</h3>\n<ul>\n<li><p>CSRF middleware\n(<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/csrf/\" rel=\"nofollow\">django.middleware.csrf.CsrfViewMiddleware</a>)\nmust be disabled, because remoteStorage.js doesn\u2019t pass django csrf\ntokens along with PUT (and similar) requests. It\u2019s selectively\nenabled via decorator for app forms though.</p>\n</li>\n<li><p>Data is currently stored in the Django Storage, while path metadata\nis stored through the Django Database API, which introduces two\npoints of failure (and the possibility of sync loss between the two),\nbecause one data is useless without the other.</p>\n<p>There don\u2019t seem to be any easy way around it - storing path data in\nStorage keys won\u2019t work with any driver, pushing that to the content\nwon\u2019t work when this content will be served by anything but python\n(say, httpd) and storing files in a db only works well for relatively\nsmall files.</p>\n<p>So make sure to backup db as well as the actual storage, or write\nsome storage-specific kludge to store metadata there as well. Example\nwould be to add a hook to <a href=\"https://docs.djangoproject.com/en/dev/ref/models/instances/#what-happens-when-you-save\" rel=\"nofollow\">post-save django\nsignal</a>,\nwhich would get storage path from StorageObject.data.name and store\nsome \u201c{name}.meta\u201d file alongside with serialized model data.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li><p>Client (app, requesting access) deception - returning fake\n\u201cauthorized scopes\u201d to it, but storing them somewhere to deny the\nactual access or provide random garbage instead.</p>\n<p>Idea is to prevent situation, common on twitter and android\nplatforms, when apps always ask for everything and user is presented\nwith \u201call or nothing\u201d choice.</p>\n</li>\n<li><p>Add ability to inspect stored/accessed resources to the client\nmanagement interface.</p>\n</li>\n</ul>\n</div>\n<div id=\"contacts-support\">\n<h2>Contacts / Support</h2>\n<p>Feel free to drop by to #unhosted or #remotestorage channels on\n<a href=\"http://freenode.net\" rel=\"nofollow\">freenode IRC</a>, you can always find authors and\npeople (developers included) willing to help understand, setup and\nresolve any issues there.</p>\n<p>Mailing lists, twitter and other channels of indirect communication can\nalso be found on <a href=\"http://unhosted.org/\" rel=\"nofollow\">Unhosted movement site</a>.</p>\n<p>And of course, open Issues for <a href=\"https://github.com/RemoteStorage/django-remotestorage\" rel=\"nofollow\">github\nrepository</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 836474, "releases": {"12.09.0": [{"comment_text": "", "digests": {"md5": "d939f43ef75a0ca3f0f9bd4a3d05366f", "sha256": "b9257bca3df716b78c51d6a716615f861763dc470735325b410041640c7691a2"}, "downloads": -1, "filename": "django-remotestorage-12.09.0.tar.gz", "has_sig": true, "md5_digest": "d939f43ef75a0ca3f0f9bd4a3d05366f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51980, "upload_time": "2012-09-15T10:36:14", "upload_time_iso_8601": "2012-09-15T10:36:14.094953Z", "url": "https://files.pythonhosted.org/packages/73/3f/d5e496405819a8865864e2aabe7c4f863e4af813ea7672b1d372d8b4f94a/django-remotestorage-12.09.0.tar.gz", "yanked": false}], "12.09.1": [{"comment_text": "", "digests": {"md5": "d013943d2a983b22fecb28bc6c4ea621", "sha256": "93a0fb005db73dde7b351934a20d246f86e61b8a180be7074c3d4469cf37f473"}, "downloads": -1, "filename": "django-remotestorage-12.09.1.tar.gz", "has_sig": true, "md5_digest": "d013943d2a983b22fecb28bc6c4ea621", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56988, "upload_time": "2012-09-15T11:05:57", "upload_time_iso_8601": "2012-09-15T11:05:57.234739Z", "url": "https://files.pythonhosted.org/packages/a1/8d/f0a620d89d78eca64e8ddc67bcdf05763ed1f9b820cd00172dd0f53ff825/django-remotestorage-12.09.1.tar.gz", "yanked": false}], "12.09.3": [{"comment_text": "", "digests": {"md5": "26760c97a52a9322c3b547ae5bd56f7f", "sha256": "a9843eb4e3e25efad5a55dd9a234b222e3570d5bc0518d96da21954ea53f4930"}, "downloads": -1, "filename": "django-remotestorage-12.09.3.tar.gz", "has_sig": true, "md5_digest": "26760c97a52a9322c3b547ae5bd56f7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56970, "upload_time": "2012-09-15T11:24:53", "upload_time_iso_8601": "2012-09-15T11:24:53.356459Z", "url": "https://files.pythonhosted.org/packages/18/1d/92651d297ed9c44d94515c023b55fc108570d1f1aa455517efe6a14f149b/django-remotestorage-12.09.3.tar.gz", "yanked": false}], "12.09.4": [{"comment_text": "", "digests": {"md5": "d4e7689a918104ac6684e0aa7ef8ae13", "sha256": "74baf6066189b8b07059446ec812812c75f2d4f1ef1e5526cd06f6b9cf85325a"}, "downloads": -1, "filename": "django-remotestorage-12.09.4.tar.gz", "has_sig": true, "md5_digest": "d4e7689a918104ac6684e0aa7ef8ae13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56966, "upload_time": "2012-09-22T11:45:56", "upload_time_iso_8601": "2012-09-22T11:45:56.171954Z", "url": "https://files.pythonhosted.org/packages/2a/53/ccf9effe6e8f072592a0e3ca16e49b4f1ae458ba23ced62c1bbf642c03f1/django-remotestorage-12.09.4.tar.gz", "yanked": false}], "13.08.0": [{"comment_text": "", "digests": {"md5": "25837a6c3bab62c2188f1815bdf82683", "sha256": "f507cb59560bd613cc4e8abf4ace03444193c8d04f66a19e92bef7c90c91c043"}, "downloads": -1, "filename": "django-remotestorage-13.08.0.tar.gz", "has_sig": true, "md5_digest": "25837a6c3bab62c2188f1815bdf82683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56990, "upload_time": "2013-08-09T14:06:27", "upload_time_iso_8601": "2013-08-09T14:06:27.895943Z", "url": "https://files.pythonhosted.org/packages/08/54/6071f495d2a1db8b2a46eed4c158eb6172eb7091d6f4e945eb0a8083cb0f/django-remotestorage-13.08.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "25837a6c3bab62c2188f1815bdf82683", "sha256": "f507cb59560bd613cc4e8abf4ace03444193c8d04f66a19e92bef7c90c91c043"}, "downloads": -1, "filename": "django-remotestorage-13.08.0.tar.gz", "has_sig": true, "md5_digest": "25837a6c3bab62c2188f1815bdf82683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 56990, "upload_time": "2013-08-09T14:06:27", "upload_time_iso_8601": "2013-08-09T14:06:27.895943Z", "url": "https://files.pythonhosted.org/packages/08/54/6071f495d2a1db8b2a46eed4c158eb6172eb7091d6f4e945eb0a8083cb0f/django-remotestorage-13.08.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:17 2020"}