{"info": {"author": "Tobias Wood", "author_email": "tobias@spinicist.org.uk", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Visualization"], "description": "# Not Another Neuroimaging Slicer - nanslice #\n\nCredit / Blame / Contact - Tobias Wood - tobias.wood@kcl.ac.uk\n\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf you find the tools useful the author would love to hear from you.\n\n# Brief Description #\n\n![Screenshot](doc/dualcode.png)\n\nThis is a pure Python module for creating slices through neuro-imaging datasets.\nThe main motivation for building this was to implement the 'Dual-Coding'\nvisualisation method that can be found in this paper: \nhttp://dx.doi.org/10.1016/j.neuron.2012.05.001. However, it then expanded to\ninclude standard visualisation methods, and an interactive viewer for Jupyter\nnotebooks.\n\nDocumentation can be found at https://nanslice.readthedocs.io/en/latest/.\n\nA Jupyter Notebook demonstrating the module can be found at https://mybinder.org/v2/gh/spinicist/nanslice/master?filepath=doc%2Fexample.ipynb.\n\nIn dual-coding instead of plotting thresholded blobs of T-statistics or p-values\non top of structural images, transparency (or alpha) is used to convey the \np-value of T-statistic, while color can be used to convey the effect size or\ndifference in group means etc. Finally, contours can be added at a specific\np-value, e.g. p < 0.05. In this way, 'dual-coded' overlays contain all the\ninformation that standard overlays do, but also show much of the data that is\n'hidden' beneath the p-value threshold.\n\nWhether you think this is useful or not will depend on your attitude towards\np-values and thresholds. Personally, I think that sub-threshold but\nanatomically plausible blobs are at least worth *showing* to readers, who can\nthen make their own mind up about significance.\n\nThis is a sister project to https://github.com/spinicist/QUIT. I mainly work\nwith quantitative T1 & T2 maps, where group mean difference or \"percent change\"\nis a meaningful, well-defined quantity. If you use these tools to plot \"percent\nBOLD signal change\", I hope you know what you what you are doing and wish you\nluck with your reviewers.\n\n# Installation #\n\nNaNSlice is available on `PyPI`. Run `pip install nanslice` to install the\nstable version. Alternatively, clone the repository from Github and then run\n`pip install -e .` to use the development version.\n\n# Performance #\n\nThese are Python scripts. The core sampling/blending code was written over 3\nevenings while on the Bruker programming course. Most of nanviewer was written\nin literally 4 hours across a Monday and Tuesday. After a refactoring, it is\nsurprisingly responsive on my MacBook. The Jupyter viewer, on the other hand,\nis not wildly performant. Patches are welcome!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spinicist/nanslice", "keywords": "neuroimaging nifti", "license": "MPL", "maintainer": "", "maintainer_email": "", "name": "nanslice", "package_url": "https://pypi.org/project/nanslice/", "platform": "", "project_url": "https://pypi.org/project/nanslice/", "project_urls": {"Homepage": "https://github.com/spinicist/nanslice"}, "release_url": "https://pypi.org/project/nanslice/1.0.0/", "requires_dist": ["matplotlib (>=3.2.0)", "nibabel (>=2.0.0)", "numpy (>=1.14.2)", "scipy (>=1.1.0)", "colorcet (>=2.0.0)"], "requires_python": ">=3", "summary": "Scripts to slice and display neuroimages (probably stored in nifti format)", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Not Another Neuroimaging Slicer - nanslice</h1>\n<p>Credit / Blame / Contact - Tobias Wood - <a href=\"mailto:tobias.wood@kcl.ac.uk\">tobias.wood@kcl.ac.uk</a></p>\n<p>This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at <a href=\"http://mozilla.org/MPL/2.0/\" rel=\"nofollow\">http://mozilla.org/MPL/2.0/</a>.</p>\n<p>If you find the tools useful the author would love to hear from you.</p>\n<h1>Brief Description</h1>\n<p><img alt=\"Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5485c8a43ddc6fdfb13e45485100d5d9d56ab45d/646f632f6475616c636f64652e706e67\"></p>\n<p>This is a pure Python module for creating slices through neuro-imaging datasets.\nThe main motivation for building this was to implement the 'Dual-Coding'\nvisualisation method that can be found in this paper:\n<a href=\"http://dx.doi.org/10.1016/j.neuron.2012.05.001\" rel=\"nofollow\">http://dx.doi.org/10.1016/j.neuron.2012.05.001</a>. However, it then expanded to\ninclude standard visualisation methods, and an interactive viewer for Jupyter\nnotebooks.</p>\n<p>Documentation can be found at <a href=\"https://nanslice.readthedocs.io/en/latest/\" rel=\"nofollow\">https://nanslice.readthedocs.io/en/latest/</a>.</p>\n<p>A Jupyter Notebook demonstrating the module can be found at <a href=\"https://mybinder.org/v2/gh/spinicist/nanslice/master?filepath=doc%2Fexample.ipynb\" rel=\"nofollow\">https://mybinder.org/v2/gh/spinicist/nanslice/master?filepath=doc%2Fexample.ipynb</a>.</p>\n<p>In dual-coding instead of plotting thresholded blobs of T-statistics or p-values\non top of structural images, transparency (or alpha) is used to convey the\np-value of T-statistic, while color can be used to convey the effect size or\ndifference in group means etc. Finally, contours can be added at a specific\np-value, e.g. p &lt; 0.05. In this way, 'dual-coded' overlays contain all the\ninformation that standard overlays do, but also show much of the data that is\n'hidden' beneath the p-value threshold.</p>\n<p>Whether you think this is useful or not will depend on your attitude towards\np-values and thresholds. Personally, I think that sub-threshold but\nanatomically plausible blobs are at least worth <em>showing</em> to readers, who can\nthen make their own mind up about significance.</p>\n<p>This is a sister project to <a href=\"https://github.com/spinicist/QUIT\" rel=\"nofollow\">https://github.com/spinicist/QUIT</a>. I mainly work\nwith quantitative T1 &amp; T2 maps, where group mean difference or \"percent change\"\nis a meaningful, well-defined quantity. If you use these tools to plot \"percent\nBOLD signal change\", I hope you know what you what you are doing and wish you\nluck with your reviewers.</p>\n<h1>Installation</h1>\n<p>NaNSlice is available on <code>PyPI</code>. Run <code>pip install nanslice</code> to install the\nstable version. Alternatively, clone the repository from Github and then run\n<code>pip install -e .</code> to use the development version.</p>\n<h1>Performance</h1>\n<p>These are Python scripts. The core sampling/blending code was written over 3\nevenings while on the Bruker programming course. Most of nanviewer was written\nin literally 4 hours across a Monday and Tuesday. After a refactoring, it is\nsurprisingly responsive on my MacBook. The Jupyter viewer, on the other hand,\nis not wildly performant. Patches are welcome!</p>\n\n          </div>"}, "last_serial": 6778078, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "cb5eb4f35c32eb716f7adcce620e09b4", "sha256": "720083ecca72c6a5b8edff96de00c83fb815b1a346a81530d6e1c740bab2054c"}, "downloads": -1, "filename": "nanslice-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cb5eb4f35c32eb716f7adcce620e09b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21040, "upload_time": "2018-10-05T14:27:16", "upload_time_iso_8601": "2018-10-05T14:27:16.651376Z", "url": "https://files.pythonhosted.org/packages/33/24/9a7a40fd26227d39006996905a2eeb89309c8540afc35046196b34fef541/nanslice-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "412eb29b35ad9b5e542ef89d3397071a", "sha256": "e3515b290fc020305ed799144f646e5d4d8f62d78b0edb53be49d9c879ee4cc2"}, "downloads": -1, "filename": "nanslice-0.9.0.tar.gz", "has_sig": false, "md5_digest": "412eb29b35ad9b5e542ef89d3397071a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17376, "upload_time": "2018-10-05T14:27:17", "upload_time_iso_8601": "2018-10-05T14:27:17.874850Z", "url": "https://files.pythonhosted.org/packages/b3/62/5f4ecc94de282dd35f45a6b46bb24712182d5a83d0ac13208e0ca36b42ec/nanslice-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "90a42a1b9f1804380d217ed20db2a50b", "sha256": "4665b0877ed6f16413af6376d67b2496160ea9dec31db778209153255402484a"}, "downloads": -1, "filename": "nanslice-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90a42a1b9f1804380d217ed20db2a50b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 31044, "upload_time": "2020-03-09T16:03:53", "upload_time_iso_8601": "2020-03-09T16:03:53.390085Z", "url": "https://files.pythonhosted.org/packages/ea/24/c00a9a01ce007fec9960035aac4f5b24466eebf8af63a2fc0da396ca3b18/nanslice-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b15c3bd8846ea9b6bc825f908a48515b", "sha256": "35831e55578af2ed73ab7fcaf26f6e401698c63ca00e2ecd91a246d122579a7d"}, "downloads": -1, "filename": "nanslice-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b15c3bd8846ea9b6bc825f908a48515b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21391, "upload_time": "2020-03-09T16:03:54", "upload_time_iso_8601": "2020-03-09T16:03:54.989780Z", "url": "https://files.pythonhosted.org/packages/46/d4/30e742d2122096ab014706fb6c7458f125e82ed6cccb8ffcfb37ddfb7d08/nanslice-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90a42a1b9f1804380d217ed20db2a50b", "sha256": "4665b0877ed6f16413af6376d67b2496160ea9dec31db778209153255402484a"}, "downloads": -1, "filename": "nanslice-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "90a42a1b9f1804380d217ed20db2a50b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3", "size": 31044, "upload_time": "2020-03-09T16:03:53", "upload_time_iso_8601": "2020-03-09T16:03:53.390085Z", "url": "https://files.pythonhosted.org/packages/ea/24/c00a9a01ce007fec9960035aac4f5b24466eebf8af63a2fc0da396ca3b18/nanslice-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b15c3bd8846ea9b6bc825f908a48515b", "sha256": "35831e55578af2ed73ab7fcaf26f6e401698c63ca00e2ecd91a246d122579a7d"}, "downloads": -1, "filename": "nanslice-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b15c3bd8846ea9b6bc825f908a48515b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 21391, "upload_time": "2020-03-09T16:03:54", "upload_time_iso_8601": "2020-03-09T16:03:54.989780Z", "url": "https://files.pythonhosted.org/packages/46/d4/30e742d2122096ab014706fb6c7458f125e82ed6cccb8ffcfb37ddfb7d08/nanslice-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:33 2020"}