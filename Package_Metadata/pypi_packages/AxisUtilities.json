{"info": {"author": "Mohammad Abouali", "author_email": "maboualidev@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![CircleCI](https://circleci.com/gh/coderepocenter/AxisUtilities.svg?style=svg)](https://circleci.com/gh/coderepocenter/AxisUtilities)\n[![codecov](https://codecov.io/gh/coderepocenter/AxisUtilities/branch/master/graph/badge.svg)](https://codecov.io/gh/coderepocenter/AxisUtilities)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3543710.svg)](https://doi.org/10.5281/zenodo.3543710)\n[![Documentation Status](https://readthedocs.org/projects/axisutilities/badge/?version=latest)](https://axisutilities.readthedocs.io/en/latest/?badge=latest)\n\n\n\n\n# What is `AxisUtilities`\n`Axis Utilities` was originally developed to manages Time Axis and different operations related to time with the main \nfocus on Earth & Atmospheric Science Community. For example, you might have a daily 3D spatially distributed temperature\nand you want to calculate the monthly average of this data. This result in the same spatial coordinate, however, with\na different time axis/coordinate. \n\nHowever, similar operations could be performed on any one-dimensional axis. Let's say your data is distributed along the\nz-coordinate in certain way, and now you want to average them in a different vertical distribution. Although, your \nsource axis is not time anymore, the mathematical operation that is being performed is the same. For this reason, it was\ndecided to rename the package from [`TimeAxis`](https://github.com/maboualidev/TimeAxis) to \n[`AxisUtilities`](https://github.com/coderepocenter/AxisUtilities).\n\nDuring the axis conversion (conversion from source axis to destination axis), for example computing the monthly mean\nfrom the daily data, there are a lot of computations that needs to be done which does not involve the data itself. This\nmeans that we could cache these computations and reuse them to achieve a better performance. As long as the source and\nthe destination axis have not changed, we could use the cached computation to perform the axis conversion. One of the\nfeatures that `AxisUtilities` provide is caching these computations and allowing you to reuse it to achieve better \nperformance. The same concept is being used in other packages such as \n[`ESMF`](https://www.earthsystemcog.org/projects/esmf/), \n[`SCRIP`](https://github.com/SCRIP-Project/SCRIP), and \n[`2D and 3D Remapping`](https://www.mathworks.com/matlabcentral/fileexchange/41669-2d-and-3d-remapping). In those \npackages, the cached computation is referred as ***Remapping Weights***.\n\n# How To Install?\n## using pip\nAs usual, you could use `pip` installation as follows:\n\n```\npip install axisutilities\n```\n\n# How to use `AxisUtilities`?\nThe general procedure is:\n\n1. Create a source axis, i.e. the axis that your original data is on,\n2. Create a destination axis, i.e. the axis that you want to convert your data to,\n3. Create an `AxisRemapper` object by passing the source and destination axis you created previously,\n4. Finally, convert your data from the source axis to the destination axis, using the `AxisRemapper` object you created\nin previous step.\n\nYou could repeat step (4) as many time as you want, as long as the source and destination axis are the same. The true\nbenefit of this approach is in the reuse of the same computations, a.k.a. ***remapping weights***.\n\nFor some examples refer to the following examples or the API documentations.\n\n# Documentation\nFor `AxisUtilities` documentation click [here](https://axisutilities.readthedocs.io/en/latest/?badge=latest).\n\n# Examples:\n## Daily data averaged to weekly\n**Step 1:** Create a source Axis\n\nIn this example, first we create a daily time-axis of length 14 days, i.e. we just have 14 data points\nalong the time axis:\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nfrom_axis = DailyTimeAxis(\n    start_date=date(2019, 1, 1),\n    n_interval=14\n)\n```\n\n**Step 2:** Create a destination Axis\n\nNow we create a weekly time-axis of length 3, i.e. the time axis would have three elements with\nspan of 3 weeks:\n\n```python\nfrom axisutilities import WeeklyTimeAxis\nfrom datetime import date\nto_axis = WeeklyTimeAxis(\n    start_date=date(2019, 1, 1),\n    n_interval=3\n)\n```\n\n**Step 3:** Create a `AxisRemapper` object\n\nnow we create a time axis converter object, as follows:\n\n```python\nfrom axisutilities import AxisRemapper\ntc = AxisRemapper(\n    from_axis=from_axis, \n    to_axis=to_axis\n)\n```\n\n**Step 4:** Converting data from source axis to destination axis\n\nNow we can use `tc` to convert data from the `from_axis` to `to_axis`, as follows:\n\n```python\nto_data = tc.average(from_data)\n```\n\nthe resulting `to_data` is the weekly average of the `from_data`. By default, we are assuming\nthat the first dimension is the time dimension. If the time dimension (source axis) is not the first dimension,\nyou could define it as follows:\n\n```python\nto_data = tc.average(from_data, dimension=n)\n```\n\nwhere `n` is the time dimension (or source axis if the axis you have created is not time).\n\n**Repeating Step 4:** as many time as needed\n\nIf we have other data sources that are on the same source axis (in this case the same time axis), you could use the \nsame `tc` or `AxisRemapper` object that you created before to convert them to your new destination axis:\n\n```python\nto_data = tc.average(another_data_field)\n```\n\n**NOTE:** Please do note that only the 1D axis that you are converting from needs to be the same along all these \ndifferent data sources. Their other dimensions could be completely different.\n\n### A note on building time axis\nMethods, such as `WeeklyTimeAxis` or `DailyTimeAxis`, are provided to facilitate the construction of the time axis. They\nall instantiate and initialize an object of type `Axis`. You could use that class directly to create your own custom\nmade axis. However, in order to use the `Axis` object directly, you would need to know the upper and lower bound of each\ndata tick or element. In that case, you could create your own axis directly, using `Axis` class as follows:\n\n```python\nmy_axis = Axis(lower_bound, upper_bound, binding=\"middle\")\n```\n\nFor more information on different ways of creating axis by using `Axis` class refer to the API documentations.\n\nThe helper methods, such as `WeeklyTimeAxis` or `DailyTimeAxis`, essentially collect the minimum information required\nfrom the user, and computes the lower/upper bound and internally calls the `Axis` class to create the axis.\n\n`Axis` class does not hold any unit information about the axis. That's another reason that although this package was \noriginally developed to handle time axis, it could be used for any other type of axis as well. However, this unit-less\nfeature becomes important one you are mixing the axis that are created by directly calling `Axis` class and those that\nare generated using one of the helper methods. All the helper methods, by default store the time as microseconds passed\nJanuary 1st, 1970 UTC time. \n\nLet's have a look at two-day daily axis starting from January 1st, 1970:\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nmy_axis_ms = DailyTimeAxis(\n    start_date=date(1970, 1, 1), \n    n_interval=2\n)\nprint(\"lower bound: \", my_axis.lower_bound.tolist())\nprint(\"upper bound: \", my_axis.upper_bound.tolist())\n```\n\nThe above code would print:\n\n```\nlower bound:  [[0, 86400000000]]\nupper bound:  [[86400000000, 172800000000]]\n```\nYou are able to change the unit by providing an extra parameter, called `second_conversion_factor`. For example, to \nconvert the unit to second you could call\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nmy_axis_s = DailyTimeAxis(\n    start_date=date(1970, 1, 1), \n    n_interval=2, \n    second_conversion_factor=1\n)\nprint(\"lower bound: \", my_axis.lower_bound.tolist())\nprint(\"upper bound: \", my_axis.upper_bound.tolist())\n# Will print:\n# lower bound:  [[0, 86400]]\n# upper bound:  [[86400, 172800]]\n```\n\nor if you want day as the unit:\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nmy_axis_d = DailyTimeAxis(\n    start_date=date(1970, 1, 1), \n    n_interval=2, \n    second_conversion_factor=(1 / 24 / 60 / 60)\n)\nprint(\"lower bound: \", my_axis.lower_bound.tolist())\nprint(\"upper bound: \", my_axis.upper_bound.tolist())\n# Will print:\n# lower bound:  [[0, 1]]\n# upper bound:  [[1, 2]]\n```\n\nLikewise, the hour unit would be:\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nmy_axis_h = DailyTimeAxis(\n    start_date=date(1970, 1, 1), \n    n_interval=2, \n    second_conversion_factor=(1 / 60 / 60)\n)\nprint(\"lower bound: \", my_axis.lower_bound.tolist())\nprint(\"upper bound: \", my_axis.upper_bound.tolist())\n# Will print:\n# lower bound:  [[0, 24]]\n# upper bound:  [[24, 48]]\n```\n\nIf you are using `Axis` class to generate your custom axis from the lower/upper bound values that you have and mixing it\nwith the axis that is generated by one of these helper methods, just make sure that:\n\n1. They have the Same Unit, (helper methods for time axis use microseconds passed from January 1st, 1970)\n2. In case of time, you need to measure from January 1st, 1970 in the unit that you have chosen above. At this point \nit is not possible to change the reference date, i.e. January 1st, 1970. May be in future releases, this option would\nbe provided as well.\n\nAlso, notice that the reference date has nothing to do with the use of `start_date`. It is always from January 1st, \n1970. Here is an example:\n\n```python\nfrom axisutilities import DailyTimeAxis\nfrom datetime import date\nmy_axis_d = DailyTimeAxis(\n    start_date=date(2019, 1, 1), \n    n_interval=2, \n    second_conversion_factor=(1 / 24 / 60 / 60)\n)\nprint(\"lower bound: \", my_axis.lower_bound.tolist())\nprint(\"upper bound: \", my_axis.upper_bound.tolist())\n# Will print:\n# lower bound:  [[17897, 17898]]\n# upper bound:  [[17898, 17899]]\n```\n\n## Rolling/moving weekly avarage\nYou could easily calculate a rolling or moving average of your data. Here is an example:\n\n```python\nfrom axisutilities import DailyTimeAxis, RollingWindowTimeAxis, AxisRemapper\nfrom datetime import date\nfrom_axis = DailyTimeAxis(\n    start_date=date(2019, 1, 1),\n    n_interval=14\n)\n\nto_axis = RollingWindowTimeAxis(\n    start_date=date(2019, 1, 1),\n    end_date=date(2019, 1, 15),\n    window_size=7\n)\n\ntc = AxisRemapper(from_axis=from_axis, to_axis=to_axis)\n\nto_data = tc.average(from_data)\n```\n\nas you can see, the only difference is the construction og the `to_axis`. In this example,\nwe are building a rolling time axis that starts on `Jan. 1st, 2019` and ends on `Jan. 15th, 2019`\nwith a window size of `7`. Since the base time delta, if not provided, is one day, our window is\none week (`7 * 1 day`). However, this is a rolling time axis, meaning that the next element on \ntime axis is shifted only one day. Yes, the intervals in the time-axis are overlapping each other.\n\n## Daily Averaged to Monthly\n\n```python\n# Daily time axis spanning ten years.\nfrom axisutilities import DailyTimeAxis, MonthlyTimeAxis, AxisRemapper\nfrom_axis = DailyTimeAxis(\n    start_date=date(2010, 1, 1),\n    end_date=date(2020, 1, 1)\n)\n\n# Monthly Time Axis spanning 10 years.\nto_axis = MonthlyTimeAxis(\n    start_year=2010,\n    end_year=2019,\n)\n\ntc = AxisRemapper(from_axis=from_axis, to_axis=to_axis)\nmonthly_avg = tc.average(daily_data)\n```\n\nif you do not provide any month, the start month is assumed to be the January and the end month is assumed to be\nthe December. If you want to control that you could pass the `start_month` and/or `end_month` to change this\nbehavior:\n\n```python\nfrom axisutilities import MonthlyTimeAxis\nto_axis = MonthlyTimeAxis(\n    start_year=2010,\n    start_monnth=4,\n    end_year=2019,\n    end_month=10\n)\n```\n\n## Min and Max\nThe same way that you could calculate average, you could calculate the min and max.\n\n```python\nfrom axisutilities import AxisRemapper\ntc = AxisRemapper(from_axis=from_axis, to_axis= to_axis)\n\ntc.min(data)\ntc.max(data)\n```\n\nfor example, if the form axis is a daily axis, and to_axis is a monthly axis, `tc.min(data)` calculates the minimum \ndaily data within the month.\n\n## User-defined functions\nThe users are able to define their own function to apply. All you need to do is to pass the data along with the function\nthat you want to apply. Let's say the user is interested to calculate the standard deviation:\n\n```python\nfrom axisutilities import AxisRemapper\ntc = AxisRemapper(from_axis=daily_axis, to_axis=monthly_axis)\n\nto_data = tc.apply_function(from_data, np.nanstd)\n```\n**NOTES:** \n- Pay attention that there is no parenthesis after `np.nanstd`. You need to pass the function object itself. Any thing\nthat is conisdered `Callable` within Python.\n- Note that instead of passing `np.std`, we are passing the version of the function that handles the `NaN`. The \nfunction that you pass must handle the `NaN` and missing values properly. If you pass the regular standard deviation and\nyour source data contains `NaN` your converted results would become also NaN. Also note that the function is forced\nto performed the operation along axis=0; These are the requirements.\nYou could pass any function that you want:\n\n```python\ntc = AxisRemapper(from_axis=daily_axis, to_axis=monthly_axis)\n\ndef myfunction(data):\n    return np.nansum(data, axis=0) * 42\n\nto_data = tc.apply_function(from_data, myfunction)\n```\n\nAgain, pay attention that when passing `myfunction` there is no parenthesis and we are handling the `NaN` inside\nthe function by using `np.nansum` instead of `np.sum`. Also, pay attention to the `axis=0`; The user-defined function\nmust perform it's operation along this axis only.\n\n\n# Authors:\n- Abouali, Mohammad (maboualidev@gmail.com; mabouali@ucar.edu)\n- Banihirwe, Anderson (abanihi@ucar.edu)\n- Long, Matthew (mclong@ucar.edu)\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coderepocenter/AxisUtilities.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "AxisUtilities", "package_url": "https://pypi.org/project/AxisUtilities/", "platform": "", "project_url": "https://pypi.org/project/AxisUtilities/", "project_urls": {"Homepage": "https://github.com/coderepocenter/AxisUtilities.git"}, "release_url": "https://pypi.org/project/AxisUtilities/19.12.6.36596/", "requires_dist": ["numpy", "cftime", "scipy", "numba", "dask[complete]"], "requires_python": ">=3.7", "summary": "", "version": "19.12.6.36596", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/coderepocenter/AxisUtilities\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e0a51ea3b5c562a2ee05b60d3cc6a793cf3e54d/68747470733a2f2f636972636c6563692e636f6d2f67682f636f64657265706f63656e7465722f417869735574696c69746965732e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/coderepocenter/AxisUtilities\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4b43511a72e6b25f389d4ed84d04fa0f6102c68/68747470733a2f2f636f6465636f762e696f2f67682f636f64657265706f63656e7465722f417869735574696c69746965732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.3543710\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6ccaf8b64d14ab7789de480ce1878db61bed56c/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333534333731302e737667\"></a>\n<a href=\"https://axisutilities.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c0c525f2fedef1a19bb6bc840470f10459b38b7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f617869737574696c69746965732f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h1>What is <code>AxisUtilities</code></h1>\n<p><code>Axis Utilities</code> was originally developed to manages Time Axis and different operations related to time with the main\nfocus on Earth &amp; Atmospheric Science Community. For example, you might have a daily 3D spatially distributed temperature\nand you want to calculate the monthly average of this data. This result in the same spatial coordinate, however, with\na different time axis/coordinate.</p>\n<p>However, similar operations could be performed on any one-dimensional axis. Let's say your data is distributed along the\nz-coordinate in certain way, and now you want to average them in a different vertical distribution. Although, your\nsource axis is not time anymore, the mathematical operation that is being performed is the same. For this reason, it was\ndecided to rename the package from <a href=\"https://github.com/maboualidev/TimeAxis\" rel=\"nofollow\"><code>TimeAxis</code></a> to\n<a href=\"https://github.com/coderepocenter/AxisUtilities\" rel=\"nofollow\"><code>AxisUtilities</code></a>.</p>\n<p>During the axis conversion (conversion from source axis to destination axis), for example computing the monthly mean\nfrom the daily data, there are a lot of computations that needs to be done which does not involve the data itself. This\nmeans that we could cache these computations and reuse them to achieve a better performance. As long as the source and\nthe destination axis have not changed, we could use the cached computation to perform the axis conversion. One of the\nfeatures that <code>AxisUtilities</code> provide is caching these computations and allowing you to reuse it to achieve better\nperformance. The same concept is being used in other packages such as\n<a href=\"https://www.earthsystemcog.org/projects/esmf/\" rel=\"nofollow\"><code>ESMF</code></a>,\n<a href=\"https://github.com/SCRIP-Project/SCRIP\" rel=\"nofollow\"><code>SCRIP</code></a>, and\n<a href=\"https://www.mathworks.com/matlabcentral/fileexchange/41669-2d-and-3d-remapping\" rel=\"nofollow\"><code>2D and 3D Remapping</code></a>. In those\npackages, the cached computation is referred as <em><strong>Remapping Weights</strong></em>.</p>\n<h1>How To Install?</h1>\n<h2>using pip</h2>\n<p>As usual, you could use <code>pip</code> installation as follows:</p>\n<pre><code>pip install axisutilities\n</code></pre>\n<h1>How to use <code>AxisUtilities</code>?</h1>\n<p>The general procedure is:</p>\n<ol>\n<li>Create a source axis, i.e. the axis that your original data is on,</li>\n<li>Create a destination axis, i.e. the axis that you want to convert your data to,</li>\n<li>Create an <code>AxisRemapper</code> object by passing the source and destination axis you created previously,</li>\n<li>Finally, convert your data from the source axis to the destination axis, using the <code>AxisRemapper</code> object you created\nin previous step.</li>\n</ol>\n<p>You could repeat step (4) as many time as you want, as long as the source and destination axis are the same. The true\nbenefit of this approach is in the reuse of the same computations, a.k.a. <em><strong>remapping weights</strong></em>.</p>\n<p>For some examples refer to the following examples or the API documentations.</p>\n<h1>Documentation</h1>\n<p>For <code>AxisUtilities</code> documentation click <a href=\"https://axisutilities.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\">here</a>.</p>\n<h1>Examples:</h1>\n<h2>Daily data averaged to weekly</h2>\n<p><strong>Step 1:</strong> Create a source Axis</p>\n<p>In this example, first we create a daily time-axis of length 14 days, i.e. we just have 14 data points\nalong the time axis:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">from_axis</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">14</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Step 2:</strong> Create a destination Axis</p>\n<p>Now we create a weekly time-axis of length 3, i.e. the time axis would have three elements with\nspan of 3 weeks:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">WeeklyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">to_axis</span> <span class=\"o\">=</span> <span class=\"n\">WeeklyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">3</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Step 3:</strong> Create a <code>AxisRemapper</code> object</p>\n<p>now we create a time axis converter object, as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">AxisRemapper</span>\n<span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span>\n    <span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">from_axis</span><span class=\"p\">,</span> \n    <span class=\"n\">to_axis</span><span class=\"o\">=</span><span class=\"n\">to_axis</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Step 4:</strong> Converting data from source axis to destination axis</p>\n<p>Now we can use <code>tc</code> to convert data from the <code>from_axis</code> to <code>to_axis</code>, as follows:</p>\n<pre><span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">)</span>\n</pre>\n<p>the resulting <code>to_data</code> is the weekly average of the <code>from_data</code>. By default, we are assuming\nthat the first dimension is the time dimension. If the time dimension (source axis) is not the first dimension,\nyou could define it as follows:</p>\n<pre><span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">,</span> <span class=\"n\">dimension</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>n</code> is the time dimension (or source axis if the axis you have created is not time).</p>\n<p><strong>Repeating Step 4:</strong> as many time as needed</p>\n<p>If we have other data sources that are on the same source axis (in this case the same time axis), you could use the\nsame <code>tc</code> or <code>AxisRemapper</code> object that you created before to convert them to your new destination axis:</p>\n<pre><span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">another_data_field</span><span class=\"p\">)</span>\n</pre>\n<p><strong>NOTE:</strong> Please do note that only the 1D axis that you are converting from needs to be the same along all these\ndifferent data sources. Their other dimensions could be completely different.</p>\n<h3>A note on building time axis</h3>\n<p>Methods, such as <code>WeeklyTimeAxis</code> or <code>DailyTimeAxis</code>, are provided to facilitate the construction of the time axis. They\nall instantiate and initialize an object of type <code>Axis</code>. You could use that class directly to create your own custom\nmade axis. However, in order to use the <code>Axis</code> object directly, you would need to know the upper and lower bound of each\ndata tick or element. In that case, you could create your own axis directly, using <code>Axis</code> class as follows:</p>\n<pre><span class=\"n\">my_axis</span> <span class=\"o\">=</span> <span class=\"n\">Axis</span><span class=\"p\">(</span><span class=\"n\">lower_bound</span><span class=\"p\">,</span> <span class=\"n\">upper_bound</span><span class=\"p\">,</span> <span class=\"n\">binding</span><span class=\"o\">=</span><span class=\"s2\">\"middle\"</span><span class=\"p\">)</span>\n</pre>\n<p>For more information on different ways of creating axis by using <code>Axis</code> class refer to the API documentations.</p>\n<p>The helper methods, such as <code>WeeklyTimeAxis</code> or <code>DailyTimeAxis</code>, essentially collect the minimum information required\nfrom the user, and computes the lower/upper bound and internally calls the <code>Axis</code> class to create the axis.</p>\n<p><code>Axis</code> class does not hold any unit information about the axis. That's another reason that although this package was\noriginally developed to handle time axis, it could be used for any other type of axis as well. However, this unit-less\nfeature becomes important one you are mixing the axis that are created by directly calling <code>Axis</code> class and those that\nare generated using one of the helper methods. All the helper methods, by default store the time as microseconds passed\nJanuary 1st, 1970 UTC time.</p>\n<p>Let's have a look at two-day daily axis starting from January 1st, 1970:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">my_axis_ms</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1970</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"lower bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">lower_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"upper bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">upper_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n</pre>\n<p>The above code would print:</p>\n<pre><code>lower bound:  [[0, 86400000000]]\nupper bound:  [[86400000000, 172800000000]]\n</code></pre>\n<p>You are able to change the unit by providing an extra parameter, called <code>second_conversion_factor</code>. For example, to\nconvert the unit to second you could call</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">my_axis_s</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1970</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> \n    <span class=\"n\">second_conversion_factor</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"lower bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">lower_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"upper bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">upper_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"c1\"># Will print:</span>\n<span class=\"c1\"># lower bound:  [[0, 86400]]</span>\n<span class=\"c1\"># upper bound:  [[86400, 172800]]</span>\n</pre>\n<p>or if you want day as the unit:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">my_axis_d</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1970</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> \n    <span class=\"n\">second_conversion_factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">24</span> <span class=\"o\">/</span> <span class=\"mi\">60</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"lower bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">lower_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"upper bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">upper_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"c1\"># Will print:</span>\n<span class=\"c1\"># lower bound:  [[0, 1]]</span>\n<span class=\"c1\"># upper bound:  [[1, 2]]</span>\n</pre>\n<p>Likewise, the hour unit would be:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">my_axis_h</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1970</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> \n    <span class=\"n\">second_conversion_factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">60</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"lower bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">lower_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"upper bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">upper_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"c1\"># Will print:</span>\n<span class=\"c1\"># lower bound:  [[0, 24]]</span>\n<span class=\"c1\"># upper bound:  [[24, 48]]</span>\n</pre>\n<p>If you are using <code>Axis</code> class to generate your custom axis from the lower/upper bound values that you have and mixing it\nwith the axis that is generated by one of these helper methods, just make sure that:</p>\n<ol>\n<li>They have the Same Unit, (helper methods for time axis use microseconds passed from January 1st, 1970)</li>\n<li>In case of time, you need to measure from January 1st, 1970 in the unit that you have chosen above. At this point\nit is not possible to change the reference date, i.e. January 1st, 1970. May be in future releases, this option would\nbe provided as well.</li>\n</ol>\n<p>Also, notice that the reference date has nothing to do with the use of <code>start_date</code>. It is always from January 1st,\n1970. Here is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">my_axis_d</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> \n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> \n    <span class=\"n\">second_conversion_factor</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">/</span> <span class=\"mi\">24</span> <span class=\"o\">/</span> <span class=\"mi\">60</span> <span class=\"o\">/</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"lower bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">lower_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"upper bound: \"</span><span class=\"p\">,</span> <span class=\"n\">my_axis</span><span class=\"o\">.</span><span class=\"n\">upper_bound</span><span class=\"o\">.</span><span class=\"n\">tolist</span><span class=\"p\">())</span>\n<span class=\"c1\"># Will print:</span>\n<span class=\"c1\"># lower bound:  [[17897, 17898]]</span>\n<span class=\"c1\"># upper bound:  [[17898, 17899]]</span>\n</pre>\n<h2>Rolling/moving weekly avarage</h2>\n<p>You could easily calculate a rolling or moving average of your data. Here is an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">,</span> <span class=\"n\">RollingWindowTimeAxis</span><span class=\"p\">,</span> <span class=\"n\">AxisRemapper</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"n\">from_axis</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">n_interval</span><span class=\"o\">=</span><span class=\"mi\">14</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">to_axis</span> <span class=\"o\">=</span> <span class=\"n\">RollingWindowTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">end_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span>\n    <span class=\"n\">window_size</span><span class=\"o\">=</span><span class=\"mi\">7</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span><span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">from_axis</span><span class=\"p\">,</span> <span class=\"n\">to_axis</span><span class=\"o\">=</span><span class=\"n\">to_axis</span><span class=\"p\">)</span>\n\n<span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">)</span>\n</pre>\n<p>as you can see, the only difference is the construction og the <code>to_axis</code>. In this example,\nwe are building a rolling time axis that starts on <code>Jan. 1st, 2019</code> and ends on <code>Jan. 15th, 2019</code>\nwith a window size of <code>7</code>. Since the base time delta, if not provided, is one day, our window is\none week (<code>7 * 1 day</code>). However, this is a rolling time axis, meaning that the next element on\ntime axis is shifted only one day. Yes, the intervals in the time-axis are overlapping each other.</p>\n<h2>Daily Averaged to Monthly</h2>\n<pre><span class=\"c1\"># Daily time axis spanning ten years.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">,</span> <span class=\"n\">MonthlyTimeAxis</span><span class=\"p\">,</span> <span class=\"n\">AxisRemapper</span>\n<span class=\"n\">from_axis</span> <span class=\"o\">=</span> <span class=\"n\">DailyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">end_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Monthly Time Axis spanning 10 years.</span>\n<span class=\"n\">to_axis</span> <span class=\"o\">=</span> <span class=\"n\">MonthlyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">,</span>\n    <span class=\"n\">end_year</span><span class=\"o\">=</span><span class=\"mi\">2019</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span><span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">from_axis</span><span class=\"p\">,</span> <span class=\"n\">to_axis</span><span class=\"o\">=</span><span class=\"n\">to_axis</span><span class=\"p\">)</span>\n<span class=\"n\">monthly_avg</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">daily_data</span><span class=\"p\">)</span>\n</pre>\n<p>if you do not provide any month, the start month is assumed to be the January and the end month is assumed to be\nthe December. If you want to control that you could pass the <code>start_month</code> and/or <code>end_month</code> to change this\nbehavior:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">MonthlyTimeAxis</span>\n<span class=\"n\">to_axis</span> <span class=\"o\">=</span> <span class=\"n\">MonthlyTimeAxis</span><span class=\"p\">(</span>\n    <span class=\"n\">start_year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">,</span>\n    <span class=\"n\">start_monnth</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"n\">end_year</span><span class=\"o\">=</span><span class=\"mi\">2019</span><span class=\"p\">,</span>\n    <span class=\"n\">end_month</span><span class=\"o\">=</span><span class=\"mi\">10</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Min and Max</h2>\n<p>The same way that you could calculate average, you could calculate the min and max.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">AxisRemapper</span>\n<span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span><span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">from_axis</span><span class=\"p\">,</span> <span class=\"n\">to_axis</span><span class=\"o\">=</span> <span class=\"n\">to_axis</span><span class=\"p\">)</span>\n\n<span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>for example, if the form axis is a daily axis, and to_axis is a monthly axis, <code>tc.min(data)</code> calculates the minimum\ndaily data within the month.</p>\n<h2>User-defined functions</h2>\n<p>The users are able to define their own function to apply. All you need to do is to pass the data along with the function\nthat you want to apply. Let's say the user is interested to calculate the standard deviation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">axisutilities</span> <span class=\"kn\">import</span> <span class=\"n\">AxisRemapper</span>\n<span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span><span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">daily_axis</span><span class=\"p\">,</span> <span class=\"n\">to_axis</span><span class=\"o\">=</span><span class=\"n\">monthly_axis</span><span class=\"p\">)</span>\n\n<span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">apply_function</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanstd</span><span class=\"p\">)</span>\n</pre>\n<p><strong>NOTES:</strong></p>\n<ul>\n<li>Pay attention that there is no parenthesis after <code>np.nanstd</code>. You need to pass the function object itself. Any thing\nthat is conisdered <code>Callable</code> within Python.</li>\n<li>Note that instead of passing <code>np.std</code>, we are passing the version of the function that handles the <code>NaN</code>. The\nfunction that you pass must handle the <code>NaN</code> and missing values properly. If you pass the regular standard deviation and\nyour source data contains <code>NaN</code> your converted results would become also NaN. Also note that the function is forced\nto performed the operation along axis=0; These are the requirements.\nYou could pass any function that you want:</li>\n</ul>\n<pre><span class=\"n\">tc</span> <span class=\"o\">=</span> <span class=\"n\">AxisRemapper</span><span class=\"p\">(</span><span class=\"n\">from_axis</span><span class=\"o\">=</span><span class=\"n\">daily_axis</span><span class=\"p\">,</span> <span class=\"n\">to_axis</span><span class=\"o\">=</span><span class=\"n\">monthly_axis</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">myfunction</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nansum</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">42</span>\n\n<span class=\"n\">to_data</span> <span class=\"o\">=</span> <span class=\"n\">tc</span><span class=\"o\">.</span><span class=\"n\">apply_function</span><span class=\"p\">(</span><span class=\"n\">from_data</span><span class=\"p\">,</span> <span class=\"n\">myfunction</span><span class=\"p\">)</span>\n</pre>\n<p>Again, pay attention that when passing <code>myfunction</code> there is no parenthesis and we are handling the <code>NaN</code> inside\nthe function by using <code>np.nansum</code> instead of <code>np.sum</code>. Also, pay attention to the <code>axis=0</code>; The user-defined function\nmust perform it's operation along this axis only.</p>\n<h1>Authors:</h1>\n<ul>\n<li>Abouali, Mohammad (<a href=\"mailto:maboualidev@gmail.com\">maboualidev@gmail.com</a>; <a href=\"mailto:mabouali@ucar.edu\">mabouali@ucar.edu</a>)</li>\n<li>Banihirwe, Anderson (<a href=\"mailto:abanihi@ucar.edu\">abanihi@ucar.edu</a>)</li>\n<li>Long, Matthew (<a href=\"mailto:mclong@ucar.edu\">mclong@ucar.edu</a>)</li>\n</ul>\n\n          </div>"}, "last_serial": 6255158, "releases": {"19.11.14.60054": [{"comment_text": "", "digests": {"md5": "6a4370657a05e3e6a72b381a43e87645", "sha256": "4ad10e79da715c11b003dc0b681a61086747ba3552b15563947c3286d207f0d9"}, "downloads": -1, "filename": "AxisUtilities-19.11.14.60054-py3-none-any.whl", "has_sig": false, "md5_digest": "6a4370657a05e3e6a72b381a43e87645", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 36426, "upload_time": "2019-11-14T23:41:27", "upload_time_iso_8601": "2019-11-14T23:41:27.896864Z", "url": "https://files.pythonhosted.org/packages/de/a0/5919fa7689177d02fcb331f762cabd6d2c1b53c75368844425e76ac05800/AxisUtilities-19.11.14.60054-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98dc3124748362595cd938addff63d21", "sha256": "0348b315895115b5f20cbd7ca08c88e63b850cefc1bfb2aeb84255ee3b84c201"}, "downloads": -1, "filename": "AxisUtilities-19.11.14.60054.tar.gz", "has_sig": false, "md5_digest": "98dc3124748362595cd938addff63d21", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 26028, "upload_time": "2019-11-14T23:41:29", "upload_time_iso_8601": "2019-11-14T23:41:29.220826Z", "url": "https://files.pythonhosted.org/packages/7f/1b/9e0ad9a99060d0831361433d6b8142abd7663ff2b849b18c604584dd71ec/AxisUtilities-19.11.14.60054.tar.gz", "yanked": false}], "19.11.15.40361": [{"comment_text": "", "digests": {"md5": "3b7d9be072616c6f7a3bcb194c0a21e3", "sha256": "1ae7a4c7cbf3588ab6919d6416d67c4e5a2eda126ebf2a610fab103924fb840f"}, "downloads": -1, "filename": "AxisUtilities-19.11.15.40361-py3-none-any.whl", "has_sig": false, "md5_digest": "3b7d9be072616c6f7a3bcb194c0a21e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37411, "upload_time": "2019-11-15T18:13:07", "upload_time_iso_8601": "2019-11-15T18:13:07.868287Z", "url": "https://files.pythonhosted.org/packages/67/df/e756268129bdfe3eac082ea1df644c94ef5eaf51e0ab40a76551a8390559/AxisUtilities-19.11.15.40361-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1fa1fe3dad7c56584badcf9fed35b69", "sha256": "c018858522feadfe771ce319c3a60556615336a0c2ff9a1c6bd0fbe78ee62172"}, "downloads": -1, "filename": "AxisUtilities-19.11.15.40361.tar.gz", "has_sig": false, "md5_digest": "a1fa1fe3dad7c56584badcf9fed35b69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 26952, "upload_time": "2019-11-15T18:13:09", "upload_time_iso_8601": "2019-11-15T18:13:09.357477Z", "url": "https://files.pythonhosted.org/packages/fc/79/85da5d81f800537bd7337db16b872f4e8079b3674fc0b2e1f6538daccb4d/AxisUtilities-19.11.15.40361.tar.gz", "yanked": false}], "19.11.15.40684": [{"comment_text": "", "digests": {"md5": "64fc2822819ef290368aea4e4f8b73db", "sha256": "db72ba68f4f70bf2339d4409c5f6a68e449a4751151601abbe8f7c36e77ac656"}, "downloads": -1, "filename": "AxisUtilities-19.11.15.40684-py3-none-any.whl", "has_sig": false, "md5_digest": "64fc2822819ef290368aea4e4f8b73db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 37409, "upload_time": "2019-11-15T18:18:08", "upload_time_iso_8601": "2019-11-15T18:18:08.287277Z", "url": "https://files.pythonhosted.org/packages/a4/13/da1c84ef8c7689d23d60e7e8a60c37d1bc3b6c13803eb955aa905ca02053/AxisUtilities-19.11.15.40684-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eecd92a71d4d45e76f38dc7649ac007", "sha256": "af5dfb62bf58467559a8cc12f43261d0cdcd591a0f03546d1fc70a4de94aabce"}, "downloads": -1, "filename": "AxisUtilities-19.11.15.40684.tar.gz", "has_sig": false, "md5_digest": "1eecd92a71d4d45e76f38dc7649ac007", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 26951, "upload_time": "2019-11-15T18:18:10", "upload_time_iso_8601": "2019-11-15T18:18:10.164290Z", "url": "https://files.pythonhosted.org/packages/5c/06/32b5108dd12c1f4388279a0ad7fa8fbf0d783e893cc07dbe789f6449a811/AxisUtilities-19.11.15.40684.tar.gz", "yanked": false}], "19.11.20.334": [{"comment_text": "", "digests": {"md5": "0c141a658ef7bf9edecedc2bed015cb1", "sha256": "18f49274a2ec6c88036887de341302494455d8accdc37cd129ed1dcd5d11f0f3"}, "downloads": -1, "filename": "AxisUtilities-19.11.20.334-py3-none-any.whl", "has_sig": false, "md5_digest": "0c141a658ef7bf9edecedc2bed015cb1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 38724, "upload_time": "2019-11-20T07:06:39", "upload_time_iso_8601": "2019-11-20T07:06:39.768092Z", "url": "https://files.pythonhosted.org/packages/15/72/2783d97fd796b103e5dd5b79ec7081469e8b8a35da2f9b649997b632a2c0/AxisUtilities-19.11.20.334-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b35591a13e00ebd0768677e19af9461c", "sha256": "0f497a05beebc2edea2b8dceba822c6114fd93c39270c82410fe6f3201f93f1a"}, "downloads": -1, "filename": "AxisUtilities-19.11.20.334.tar.gz", "has_sig": false, "md5_digest": "b35591a13e00ebd0768677e19af9461c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 28379, "upload_time": "2019-11-20T07:06:41", "upload_time_iso_8601": "2019-11-20T07:06:41.174717Z", "url": "https://files.pythonhosted.org/packages/80/ba/6bfcc4a2f97df9878f42686ade8e11357a6ceb944ba56a9346e582d09fb2/AxisUtilities-19.11.20.334.tar.gz", "yanked": false}], "19.11.8.38536": [{"comment_text": "", "digests": {"md5": "1f24eec545535d47c47329f111f75d20", "sha256": "7615c36e5939fc239b25905e8f1ca7158d10a4f1b4332dec343160063e5083af"}, "downloads": -1, "filename": "AxisUtilities-19.11.8.38536-py3-none-any.whl", "has_sig": false, "md5_digest": "1f24eec545535d47c47329f111f75d20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 26036, "upload_time": "2019-11-08T17:42:46", "upload_time_iso_8601": "2019-11-08T17:42:46.762126Z", "url": "https://files.pythonhosted.org/packages/af/08/2938bd72aa7d7f587e1c8a602d7826607c353a6b939f0fdb1323c78ec0ae/AxisUtilities-19.11.8.38536-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cdd6d71bf6ac1517f1cee1a455c2e020", "sha256": "9251c72448913a21d30c1994276b10e453cea771831293130e2e265f7040c58a"}, "downloads": -1, "filename": "AxisUtilities-19.11.8.38536.tar.gz", "has_sig": false, "md5_digest": "cdd6d71bf6ac1517f1cee1a455c2e020", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17440, "upload_time": "2019-11-08T17:42:49", "upload_time_iso_8601": "2019-11-08T17:42:49.301101Z", "url": "https://files.pythonhosted.org/packages/d5/d3/ef7e351827ea9e011e1f7d7fdc82dbbb4bcf07901dc35c1073c9f0546d90/AxisUtilities-19.11.8.38536.tar.gz", "yanked": false}], "19.12.4.51139": [{"comment_text": "", "digests": {"md5": "1eb06b9b3fd648b6523ed2b79c78a60b", "sha256": "745e82244f0c9e2cc92c4a050601aeb6893c1090ceb52d5526d91110051d484e"}, "downloads": -1, "filename": "AxisUtilities-19.12.4.51139-py3-none-any.whl", "has_sig": false, "md5_digest": "1eb06b9b3fd648b6523ed2b79c78a60b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 40725, "upload_time": "2019-12-04T21:12:45", "upload_time_iso_8601": "2019-12-04T21:12:45.568528Z", "url": "https://files.pythonhosted.org/packages/1d/5e/6dfe94cc3f4f76fabbe8149d064e5f10501ba74c3248cc98a2397bbaee06/AxisUtilities-19.12.4.51139-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83bb4c5abc800d105dec9e676224d3a2", "sha256": "6375c84e2a2928ac008ff6121b2c2521076366822017415eb873a67d94ab0038"}, "downloads": -1, "filename": "AxisUtilities-19.12.4.51139.tar.gz", "has_sig": false, "md5_digest": "83bb4c5abc800d105dec9e676224d3a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30733, "upload_time": "2019-12-04T21:12:47", "upload_time_iso_8601": "2019-12-04T21:12:47.049350Z", "url": "https://files.pythonhosted.org/packages/8f/18/735a4b393b2081199e733b7649b38f595a49347b9844525f7212cff3b668/AxisUtilities-19.12.4.51139.tar.gz", "yanked": false}], "19.12.4.51611": [{"comment_text": "", "digests": {"md5": "00ce0376c92cb223c32bfdfa6d58ff75", "sha256": "50bf4c276d668383d9b963295ea952005d7f3c816354088ec463ee8f2c822e74"}, "downloads": -1, "filename": "AxisUtilities-19.12.4.51611-py3-none-any.whl", "has_sig": false, "md5_digest": "00ce0376c92cb223c32bfdfa6d58ff75", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 40724, "upload_time": "2019-12-04T21:20:21", "upload_time_iso_8601": "2019-12-04T21:20:21.453398Z", "url": "https://files.pythonhosted.org/packages/52/92/e2858c75463247ea5de933845af9983413959a20a4bdab168aa7b214b9fc/AxisUtilities-19.12.4.51611-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94bb588aa2aa01295fcc756b367f1139", "sha256": "0a549950823de35875f7c9a2e3c3a42b23116c9223cefbae0399ef17d67a3f23"}, "downloads": -1, "filename": "AxisUtilities-19.12.4.51611.tar.gz", "has_sig": false, "md5_digest": "94bb588aa2aa01295fcc756b367f1139", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30734, "upload_time": "2019-12-04T21:20:23", "upload_time_iso_8601": "2019-12-04T21:20:23.026781Z", "url": "https://files.pythonhosted.org/packages/be/80/94b3ccc10711e4e172ac0e73f6345a6736529b53bcd3611a269ede61d4d2/AxisUtilities-19.12.4.51611.tar.gz", "yanked": false}], "19.12.6.36596": [{"comment_text": "", "digests": {"md5": "ed122a60662bc4e48ea8c2b179da2f8f", "sha256": "fe0c276896fe96aa7f5805179d52c41f8556688b571c2204341c2800f86921a2"}, "downloads": -1, "filename": "AxisUtilities-19.12.6.36596-py3-none-any.whl", "has_sig": false, "md5_digest": "ed122a60662bc4e48ea8c2b179da2f8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 40769, "upload_time": "2019-12-06T17:10:26", "upload_time_iso_8601": "2019-12-06T17:10:26.232384Z", "url": "https://files.pythonhosted.org/packages/33/30/c61a8569fbbd0485caead67ec72ecf8248705f6c82c3b821e36a1ffb135a/AxisUtilities-19.12.6.36596-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c8bc14379524ea271ca2b170fe2659a", "sha256": "9b61e72941a439a4083eb4103e9497edf4ec5507599d114951d2438a5592c88f"}, "downloads": -1, "filename": "AxisUtilities-19.12.6.36596.tar.gz", "has_sig": false, "md5_digest": "4c8bc14379524ea271ca2b170fe2659a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30772, "upload_time": "2019-12-06T17:10:27", "upload_time_iso_8601": "2019-12-06T17:10:27.586767Z", "url": "https://files.pythonhosted.org/packages/0b/f7/2c1b7bb35f1f7d99094013ea1a686ad37e6035a8d5963ab239a580873264/AxisUtilities-19.12.6.36596.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed122a60662bc4e48ea8c2b179da2f8f", "sha256": "fe0c276896fe96aa7f5805179d52c41f8556688b571c2204341c2800f86921a2"}, "downloads": -1, "filename": "AxisUtilities-19.12.6.36596-py3-none-any.whl", "has_sig": false, "md5_digest": "ed122a60662bc4e48ea8c2b179da2f8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 40769, "upload_time": "2019-12-06T17:10:26", "upload_time_iso_8601": "2019-12-06T17:10:26.232384Z", "url": "https://files.pythonhosted.org/packages/33/30/c61a8569fbbd0485caead67ec72ecf8248705f6c82c3b821e36a1ffb135a/AxisUtilities-19.12.6.36596-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c8bc14379524ea271ca2b170fe2659a", "sha256": "9b61e72941a439a4083eb4103e9497edf4ec5507599d114951d2438a5592c88f"}, "downloads": -1, "filename": "AxisUtilities-19.12.6.36596.tar.gz", "has_sig": false, "md5_digest": "4c8bc14379524ea271ca2b170fe2659a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30772, "upload_time": "2019-12-06T17:10:27", "upload_time_iso_8601": "2019-12-06T17:10:27.586767Z", "url": "https://files.pythonhosted.org/packages/0b/f7/2c1b7bb35f1f7d99094013ea1a686ad37e6035a8d5963ab239a580873264/AxisUtilities-19.12.6.36596.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:30 2020"}