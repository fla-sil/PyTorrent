{"info": {"author": "Alex Hart, Adam Thurlow, Karl Leuschen", "author_email": "exallium@gmail.com, adam@sheepdog.com, karl@sheepdog.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Sheepdog Tables API\n===================\n\nThis API helps with quick and easy table creation. It allows for\ndisplaying of model data, arbitrary data, annotated data, and the like.\nIt also allows for simple CSV exporting via a CSV export view.\n\nThe codebase is well documented, and each class should have a relevant\ndocstring.\n\n\nInstallation\n------------\n\nInstall the python package using pip\n\n.. code:: bash\n\n    $ pip install sheepdog-tables\n\nInstall javascript dependencies\n\nExample Bower configuration with supported versions of javascript dependencies. \n\n.. code:: javascript\n\n    {\n        \"name\": \"my_project\",\n        \"version\": \"0.0.0\",\n        \"dependencies\": {\n            \"bootstrap\": \"3.0.1\",\n            \"backbone\": \"1.0.0\",\n            \"underscore\": \"1.4.4\"\n        }\n    }\n            \n\nJS is written in coffeescript, and we suggest using a project like\ndjango-compressor to compress your static files and compile the coffeescript on\nyour behalf.\n\n.. code:: bash\n\n    $ pip install django-compressor==1.3\n\n.. code:: html\n\n    <script type=\"text/javascript\" src=\"{% static \"bower/jquery/jquery.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"tables/js/jquery.ba-bbq.js\" %}\"></script>\n\n    <!-- To enable filtering -->\n    <script type=\"text/javascript\" src=\"{% static \"bower/underscore/underscore.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"bower/backbone/backbone.js\" %}\"></script>\n    <script type=\"text/coffeescript\" src=\"{% static \"tables/js/filtering.coffee\" %}\"></script>\n\n    <!-- Event binding for sorting, pagination, etc. -->\n    <script type=\"text/coffeescript\" src=\"{% static \"tables/js/binding.coffee\" %}\"></script>\n\n\nStarting Points\n---------------\n\nA few things should be noted for this API. The primary mixin to add a\ntable to a page is ``TablesMixin``. The corresponding template is found\nin ``tables/tables.html``. The mixin should be mixed in to a class based\nview inheriting from a ``ListView``. It's ``get_context_data`` method\nshould be run after the ListView's same function.\n\nEach table is to be declared as class parameters. For example, if I have\ntwo tables, ``Table1`` and ``Table2``, we could have a class that looks\nlike this:\n\n.. code:: python\n\n\n    class MyView(TablesMixin, ListView):\n        table_1 = Table1()\n        table_2 = Table2()\n\n        def get_context_data(self, **kwargs):\n            context = ListView.get_context_data(self, **kwargs)\n            context.update(TablesMixin.get_context_data(self, **kwargs)\n\n\nThe table class works similarly to models. Full docs for that are in\nit's class doc string.\n\nGood practice with this API\n---------------------------\n\nThe general rules of Django and Python apply to the application of this\nAPI. Generally, it is a good idea to have all of your tables for your\napplication in a tables.py file, and columns in their own separate\ncolumns.py file, just like one would do for forms and fields.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SheepDogInc/sheepdog_tables", "keywords": "tables", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "sheepdog-tables", "package_url": "https://pypi.org/project/sheepdog-tables/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sheepdog-tables/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/SheepDogInc/sheepdog_tables"}, "release_url": "https://pypi.org/project/sheepdog-tables/1.2.0/", "requires_dist": null, "requires_python": null, "summary": "Easy to use tables API for Django", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This API helps with quick and easy table creation. It allows for\ndisplaying of model data, arbitrary data, annotated data, and the like.\nIt also allows for simple CSV exporting via a CSV export view.</p>\n<p>The codebase is well documented, and each class should have a relevant\ndocstring.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the python package using pip</p>\n<pre>$ pip install sheepdog-tables\n</pre>\n<p>Install javascript dependencies</p>\n<p>Example Bower configuration with supported versions of javascript dependencies.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"my_project\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"version\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0.0.0\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"dependencies\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"bootstrap\"</span><span class=\"o\">:</span> <span class=\"s2\">\"3.0.1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"backbone\"</span><span class=\"o\">:</span> <span class=\"s2\">\"1.0.0\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"underscore\"</span><span class=\"o\">:</span> <span class=\"s2\">\"1.4.4\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>JS is written in coffeescript, and we suggest using a project like\ndjango-compressor to compress your static files and compile the coffeescript on\nyour behalf.</p>\n<pre>$ pip install django-compressor<span class=\"o\">==</span><span class=\"m\">1</span>.3\n</pre>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">bower</span><span class=\"err\">/</span><span class=\"na\">jquery</span><span class=\"err\">/</span><span class=\"na\">jquery</span><span class=\"err\">.</span><span class=\"na\">min</span><span class=\"err\">.</span><span class=\"na\">js</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">tables</span><span class=\"err\">/</span><span class=\"na\">js</span><span class=\"err\">/</span><span class=\"na\">jquery</span><span class=\"err\">.</span><span class=\"na\">ba-bbq</span><span class=\"err\">.</span><span class=\"na\">js</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"c\">&lt;!-- To enable filtering --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">bower</span><span class=\"err\">/</span><span class=\"na\">underscore</span><span class=\"err\">/</span><span class=\"na\">underscore</span><span class=\"err\">.</span><span class=\"na\">js</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">bower</span><span class=\"err\">/</span><span class=\"na\">backbone</span><span class=\"err\">/</span><span class=\"na\">backbone</span><span class=\"err\">.</span><span class=\"na\">js</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/coffeescript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">tables</span><span class=\"err\">/</span><span class=\"na\">js</span><span class=\"err\">/</span><span class=\"na\">filtering</span><span class=\"err\">.</span><span class=\"na\">coffee</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"c\">&lt;!-- Event binding for sorting, pagination, etc. --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/coffeescript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"{% static \"</span><span class=\"na\">tables</span><span class=\"err\">/</span><span class=\"na\">js</span><span class=\"err\">/</span><span class=\"na\">binding</span><span class=\"err\">.</span><span class=\"na\">coffee</span><span class=\"err\">\"</span> <span class=\"err\">%}\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n</div>\n<div id=\"starting-points\">\n<h2>Starting Points</h2>\n<p>A few things should be noted for this API. The primary mixin to add a\ntable to a page is <tt>TablesMixin</tt>. The corresponding template is found\nin <tt>tables/tables.html</tt>. The mixin should be mixed in to a class based\nview inheriting from a <tt>ListView</tt>. It\u2019s <tt>get_context_data</tt> method\nshould be run after the ListView\u2019s same function.</p>\n<p>Each table is to be declared as class parameters. For example, if I have\ntwo tables, <tt>Table1</tt> and <tt>Table2</tt>, we could have a class that looks\nlike this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">TablesMixin</span><span class=\"p\">,</span> <span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">table_1</span> <span class=\"o\">=</span> <span class=\"n\">Table1</span><span class=\"p\">()</span>\n    <span class=\"n\">table_2</span> <span class=\"o\">=</span> <span class=\"n\">Table2</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">ListView</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">TablesMixin</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>The table class works similarly to models. Full docs for that are in\nit\u2019s class doc string.</p>\n</div>\n<div id=\"good-practice-with-this-api\">\n<h2>Good practice with this API</h2>\n<p>The general rules of Django and Python apply to the application of this\nAPI. Generally, it is a good idea to have all of your tables for your\napplication in a tables.py file, and columns in their own separate\ncolumns.py file, just like one would do for forms and fields.</p>\n</div>\n\n          </div>"}, "last_serial": 936263, "releases": {"1.0.6": [{"comment_text": "", "digests": {"md5": "0210e7728a4e93d8cd4ae41d1cd56ac6", "sha256": "0e5616d1ee42fc7fbc6e791ff378bec1f0ed7b16e0fb7e17e532b05767da4ea9"}, "downloads": -1, "filename": "sheepdog-tables-1.0.6.tar.gz", "has_sig": false, "md5_digest": "0210e7728a4e93d8cd4ae41d1cd56ac6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35823, "upload_time": "2013-11-19T14:37:08", "upload_time_iso_8601": "2013-11-19T14:37:08.702023Z", "url": "https://files.pythonhosted.org/packages/7f/bb/800623bf306b2b4df822b3961b75ffc16efb73248cf6edf83ab7c9dd0d95/sheepdog-tables-1.0.6.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "7169f5bccdbe0f85162ca07e38379ae8", "sha256": "3f551d1abc43ee5383b61a1b721d82e4203a672cac268331ab95f44c0cd324de"}, "downloads": -1, "filename": "sheepdog-tables-1.1.0.tar.gz", "has_sig": false, "md5_digest": "7169f5bccdbe0f85162ca07e38379ae8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38856, "upload_time": "2013-11-20T02:32:54", "upload_time_iso_8601": "2013-11-20T02:32:54.804423Z", "url": "https://files.pythonhosted.org/packages/13/f8/d629585f50cb3aa40d3dcca0eab9312fe7747b20c4de3d5bb49c62937708/sheepdog-tables-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "954d231295d5d67c7974ff706414e127", "sha256": "3f1112201fd2705c451f7835de6d1c5c9e7b59e73057c7d13dcf3cfc28e099e0"}, "downloads": -1, "filename": "sheepdog-tables-1.2.0.tar.gz", "has_sig": false, "md5_digest": "954d231295d5d67c7974ff706414e127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35135, "upload_time": "2013-12-04T23:15:30", "upload_time_iso_8601": "2013-12-04T23:15:30.409837Z", "url": "https://files.pythonhosted.org/packages/a7/90/6d978431b59052019b53b3250ad042a5cd345418e88f6592516740fb8010/sheepdog-tables-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "954d231295d5d67c7974ff706414e127", "sha256": "3f1112201fd2705c451f7835de6d1c5c9e7b59e73057c7d13dcf3cfc28e099e0"}, "downloads": -1, "filename": "sheepdog-tables-1.2.0.tar.gz", "has_sig": false, "md5_digest": "954d231295d5d67c7974ff706414e127", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35135, "upload_time": "2013-12-04T23:15:30", "upload_time_iso_8601": "2013-12-04T23:15:30.409837Z", "url": "https://files.pythonhosted.org/packages/a7/90/6d978431b59052019b53b3250ad042a5cd345418e88f6592516740fb8010/sheepdog-tables-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:31 2020"}