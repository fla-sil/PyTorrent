{"info": {"author": "Max Burnette", "author_email": "mburnet2@illinois.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Topic :: Database", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: GIS", "Topic :: Utilities"], "description": "terrautils\n==========\n\nPython library for interfacing TERRA-REF science algorithms with the\nTERRA REF databases and workflow.\n\nThis package provides standard functions for interacting with TERRA-REF\nservices and data.\n\nTwo primary use cases: \\* interactive exploration of the TERRA REF\ndatabase and file system. \\* development of the TERRA REF pipeline.\n\nInstallation\n------------\n\nThe easiest way install terrautils is using pip and pulling from PyPI.::\n\n\n    pip install terrautils\n\nBecause this system is still under rapid development, you may need a\nspecific branch from the terrautils repository. You can either clone the\nrepository from GitHub and install locally with following commands::\n\n    git clone https://github.com/terraref/terrautils\n    git checkout <branch>\n    cd terrautils\n    pip install .\n\nOr you can install directly from GitHub with a single command::\n\n.. code:: sh\n\n    pip install https://github.com/terraref/terrautils/archive/<branch>.zip\n\n**Note:** the terrautils package depends on the GDAL library and tools.\nInstalling GDAL can most easily be accomplished at the operating system\nlevel using packages designed for your distribution. If you see errors\nabout failing to import osgeo you need to make ensure GDAL and its\npython wrappers are installed. Terrautils will work with both GDAL v1.11\nand v2.2 so whichever is available for your system should be fine.\n\nFunctions\n---------\n\n**betydb.py** functions for interacting with BETYdb, the trait and\nagronomic metadata database\n\n-  get_sites() \u2013 Gets list of stations from BETYdb, filtered by city or\n   sitename prefix if provided.\n-  submit_traits() \u2013 Submit a CSV containing traits to the BETYdb API.\n-  get_sitename_boundary() \u2013 Retrieve the clip boundary dynamically from\n   betyDB API given sitename and turns the obtained json data into a\n   geojson polygon.\n\n**extractors.py** utilities for interacting with the TERRA REF pipeline\n\n-  build_metadata() \u2013 Construct extractor metadata object ready for\n   submission to a Clowder file/dataset.\n-  get_output_directory() \u2013 Determine output directory path given root\n   path and dataset name.\n-  get_output_filename() \u2013 Determine output filename given input\n   information.\n-  is_latest_file() \u2013 Check whether the extractor-triggering file is the\n   latest file in the dataset.\n-  load_json_file() \u2013 Load contents of a .json file on disk into a JSON\n   object.\n-  error_notification() \u2013 Send an error message notification, e.g. to\n   Slack.\n-  log_to_influxdb() \u2013 Send extractor job detail summary to InfluxDB\n   instance.\n-  trigger_file_extractions_by_dataset() \u2013 Manually trigger an\n   extraction on all files in a dataset.\n-  trigger_dataset_extractions_by_collection() \u2013 Manually trigger an\n   extraction on all datasets in a collection.\n-  _search_for_key() \u2013 Check for presence of any key variants in\n   metadata. Does basic capitalization check.\n   \n**formats.py** utilities for converting numpy arrays into consistently formatted raster images and data products\n\n-  create_geotiff() \u2013 Generate output GeoTIFF file given a numpy pixel\n   array and GPS boundary.\n-  create_netcdf() \u2013 Generate output netCDF file given an input numpy\n   pixel array.\n-  create_image() \u2013 Generate output JPG/PNG file given an input numpy\n   pixel array.\n\n**gdal.py** gis utilities for raster datasets\n\n-  array_to_image() \u2013 Converts a gdalnumeric array to a Python Imaging\n   Library (PIL) Image.\n-  image_to_array() \u2013 Converts a Python Imaging Library (PIL) array to a\n   gdalnumeric image.\n-  world_to_pixel(geo_matrix, x, y) \u2013 Uses a gdal geomatrix\n   (gdal.GetGeoTransform()) to calculate the pixel location of a\n   geospatial coordinate.\n-  clip_raster(rast_path, features_path, gt=None, nodata=-9999) \u2013 Clip a\n   raster and return the clipped result in form of numpy array.\n-  get_raster_extents(fname) \u2013 Calculates the extent and the center of\n   the given raster.\n\n**metadata.py** utilities for querying and processing sensor and image\nmetadata\n\n-  clean_metadata() \u2013 Returns a standarized metadata object.\n-  get_terraref_metadata() \u2013 Combines cleaned metadata with fixed\n   metadata.\n-  get_extractor_metadata() \u2013 Returns Clowder extractor metadata.\n-  get_sensor_fixed_metadata() \u2013 Returns fixed metadata from Clowder.\n-  calculate_scan_time() \u2013\n\n**sensors.py**\n\n-  get_sensors(station) \u2013 Get all sensors for a given station.\n-  get_sensor_filename(station, sensor, date, mode=\u201cfull\u201d) \u2013 Gets the\n   filename for the image for the given date, sensor and station from\n   the database. If the mode is full, choose the full resolution image,\n   otherwise the reduced resolution version.\n-  get_sitename(station, date, range_=None, column=None) \u2013 Returns a\n   full sitename for the plot (or fullfield image) corresponding to the\n   given station, date, range and column.\n-  check_site(station) \u2013 Checks for valid station given the station\n   name, and return its path in the file system.\n-  check_sensor(station, sensor, date=None) \u2013 Checks for valid sensor\n   with optional date, and return its path in the file system.\n-  get_sensor_product(site, sensor) \u2013 Returns the downloadable product\n   for each site-sensor pair.\n-  get_attachment_name(site, sensor, date, product) \u2013 Encodes site,\n   sensor, and date to create a unique attachment name.\n-  plot_attachment_name(sitename, sensor, date, product) \u2013 Encodes\n   sitename, sensor, and date to create a unqiue attachment name.\n\n**spatial.py** gis helper functions\n\n-  calculate_bounding_box() \u2013 Given a set of GPS boundaries, return\n   array of 4 vertices representing the polygon.\n-  calculate_centroid() \u2013 Given a set of GPS boundaries, return lat/lon\n   of centroid.\n-  calculate_gps_bounds() \u2013 Extract bounding box geometry, depending on\n   sensor type.\n-  geom_from_metadata() \u2013 Parse location elements from metadata.\n-  _get_bounding_box_with_formula() \u2013 Convert scannerbox center\n   position & sensor field-of-view to actual bound", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://terraref.org", "keywords": "terraref,clowder,field crop,phenomics,computer vision,remote sensing", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "terraref-terrautils", "package_url": "https://pypi.org/project/terraref-terrautils/", "platform": "", "project_url": "https://pypi.org/project/terraref-terrautils/", "project_urls": {"Homepage": "https://terraref.org"}, "release_url": "https://pypi.org/project/terraref-terrautils/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "TERRA-REF workflow utilities", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library for interfacing TERRA-REF science algorithms with the\nTERRA REF databases and workflow.</p>\n<p>This package provides standard functions for interacting with TERRA-REF\nservices and data.</p>\n<p>Two primary use cases: * interactive exploration of the TERRA REF\ndatabase and file system. * development of the TERRA REF pipeline.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way install terrautils is using pip and pulling from PyPI.:</p>\n<pre>pip install terrautils\n</pre>\n<p>Because this system is still under rapid development, you may need a\nspecific branch from the terrautils repository. You can either clone the\nrepository from GitHub and install locally with following commands:</p>\n<pre>git clone https://github.com/terraref/terrautils\ngit checkout &lt;branch&gt;\ncd terrautils\npip install .\n</pre>\n<p>Or you can install directly from GitHub with a single command:</p>\n<pre>.. code:: sh\n</pre>\n<blockquote>\npip install <a href=\"https://github.com/terraref/terrautils/archive\" rel=\"nofollow\">https://github.com/terraref/terrautils/archive</a>/&lt;branch&gt;.zip</blockquote>\n<p><strong>Note:</strong> the terrautils package depends on the GDAL library and tools.\nInstalling GDAL can most easily be accomplished at the operating system\nlevel using packages designed for your distribution. If you see errors\nabout failing to import osgeo you need to make ensure GDAL and its\npython wrappers are installed. Terrautils will work with both GDAL v1.11\nand v2.2 so whichever is available for your system should be fine.</p>\n</div>\n<div id=\"functions\">\n<h2>Functions</h2>\n<p><strong>betydb.py</strong> functions for interacting with BETYdb, the trait and\nagronomic metadata database</p>\n<ul>\n<li>get_sites() \u2013 Gets list of stations from BETYdb, filtered by city or\nsitename prefix if provided.</li>\n<li>submit_traits() \u2013 Submit a CSV containing traits to the BETYdb API.</li>\n<li>get_sitename_boundary() \u2013 Retrieve the clip boundary dynamically from\nbetyDB API given sitename and turns the obtained json data into a\ngeojson polygon.</li>\n</ul>\n<p><strong>extractors.py</strong> utilities for interacting with the TERRA REF pipeline</p>\n<ul>\n<li>build_metadata() \u2013 Construct extractor metadata object ready for\nsubmission to a Clowder file/dataset.</li>\n<li>get_output_directory() \u2013 Determine output directory path given root\npath and dataset name.</li>\n<li>get_output_filename() \u2013 Determine output filename given input\ninformation.</li>\n<li>is_latest_file() \u2013 Check whether the extractor-triggering file is the\nlatest file in the dataset.</li>\n<li>load_json_file() \u2013 Load contents of a .json file on disk into a JSON\nobject.</li>\n<li>error_notification() \u2013 Send an error message notification, e.g. to\nSlack.</li>\n<li>log_to_influxdb() \u2013 Send extractor job detail summary to InfluxDB\ninstance.</li>\n<li>trigger_file_extractions_by_dataset() \u2013 Manually trigger an\nextraction on all files in a dataset.</li>\n<li>trigger_dataset_extractions_by_collection() \u2013 Manually trigger an\nextraction on all datasets in a collection.</li>\n<li>_search_for_key() \u2013 Check for presence of any key variants in\nmetadata. Does basic capitalization check.</li>\n</ul>\n<p><strong>formats.py</strong> utilities for converting numpy arrays into consistently formatted raster images and data products</p>\n<ul>\n<li>create_geotiff() \u2013 Generate output GeoTIFF file given a numpy pixel\narray and GPS boundary.</li>\n<li>create_netcdf() \u2013 Generate output netCDF file given an input numpy\npixel array.</li>\n<li>create_image() \u2013 Generate output JPG/PNG file given an input numpy\npixel array.</li>\n</ul>\n<p><strong>gdal.py</strong> gis utilities for raster datasets</p>\n<ul>\n<li>array_to_image() \u2013 Converts a gdalnumeric array to a Python Imaging\nLibrary (PIL) Image.</li>\n<li>image_to_array() \u2013 Converts a Python Imaging Library (PIL) array to a\ngdalnumeric image.</li>\n<li>world_to_pixel(geo_matrix, x, y) \u2013 Uses a gdal geomatrix\n(gdal.GetGeoTransform()) to calculate the pixel location of a\ngeospatial coordinate.</li>\n<li>clip_raster(rast_path, features_path, gt=None, nodata=-9999) \u2013 Clip a\nraster and return the clipped result in form of numpy array.</li>\n<li>get_raster_extents(fname) \u2013 Calculates the extent and the center of\nthe given raster.</li>\n</ul>\n<p><strong>metadata.py</strong> utilities for querying and processing sensor and image\nmetadata</p>\n<ul>\n<li>clean_metadata() \u2013 Returns a standarized metadata object.</li>\n<li>get_terraref_metadata() \u2013 Combines cleaned metadata with fixed\nmetadata.</li>\n<li>get_extractor_metadata() \u2013 Returns Clowder extractor metadata.</li>\n<li>get_sensor_fixed_metadata() \u2013 Returns fixed metadata from Clowder.</li>\n<li>calculate_scan_time() \u2013</li>\n</ul>\n<p><strong>sensors.py</strong></p>\n<ul>\n<li>get_sensors(station) \u2013 Get all sensors for a given station.</li>\n<li>get_sensor_filename(station, sensor, date, mode=\u201cfull\u201d) \u2013 Gets the\nfilename for the image for the given date, sensor and station from\nthe database. If the mode is full, choose the full resolution image,\notherwise the reduced resolution version.</li>\n<li>get_sitename(station, date, range_=None, column=None) \u2013 Returns a\nfull sitename for the plot (or fullfield image) corresponding to the\ngiven station, date, range and column.</li>\n<li>check_site(station) \u2013 Checks for valid station given the station\nname, and return its path in the file system.</li>\n<li>check_sensor(station, sensor, date=None) \u2013 Checks for valid sensor\nwith optional date, and return its path in the file system.</li>\n<li>get_sensor_product(site, sensor) \u2013 Returns the downloadable product\nfor each site-sensor pair.</li>\n<li>get_attachment_name(site, sensor, date, product) \u2013 Encodes site,\nsensor, and date to create a unique attachment name.</li>\n<li>plot_attachment_name(sitename, sensor, date, product) \u2013 Encodes\nsitename, sensor, and date to create a unqiue attachment name.</li>\n</ul>\n<p><strong>spatial.py</strong> gis helper functions</p>\n<ul>\n<li>calculate_bounding_box() \u2013 Given a set of GPS boundaries, return\narray of 4 vertices representing the polygon.</li>\n<li>calculate_centroid() \u2013 Given a set of GPS boundaries, return lat/lon\nof centroid.</li>\n<li>calculate_gps_bounds() \u2013 Extract bounding box geometry, depending on\nsensor type.</li>\n<li>geom_from_metadata() \u2013 Parse location elements from metadata.</li>\n<li>_get_bounding_box_with_formula() \u2013 Convert scannerbox center\nposition &amp; sensor field-of-view to actual bound</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3719879, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "a0af298bf8845b80c75b7d40c5d42b5a", "sha256": "56de08db6420cfe50d551cf3a8f4e76fd89fbe9c37ece7a2377dc8573c241149"}, "downloads": -1, "filename": "terraref_terrautils-1.1.1-py2.7.egg", "has_sig": false, "md5_digest": "a0af298bf8845b80c75b7d40c5d42b5a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 163897, "upload_time": "2018-03-30T14:27:03", "upload_time_iso_8601": "2018-03-30T14:27:03.219762Z", "url": "https://files.pythonhosted.org/packages/06/e9/02665e9590038eb377657d4003b37feee46e30a40546a0c2bfc1b120de77/terraref_terrautils-1.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c084a9df29ec8714118a5ea892d7be92", "sha256": "7b2ad61e7d0312c5ae99f574d4262918c89e779989f6ab871743b11ce11967eb"}, "downloads": -1, "filename": "terraref-terrautils-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c084a9df29ec8714118a5ea892d7be92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33907, "upload_time": "2018-03-30T14:27:02", "upload_time_iso_8601": "2018-03-30T14:27:02.164374Z", "url": "https://files.pythonhosted.org/packages/00/40/ba71ca07479b768c6416e5d5401ff24cc9d6482e86988e5d6cf75b658ccd/terraref-terrautils-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "ac0ccef278caa51ae991c684b4bd5402", "sha256": "f56e30bd9a0e2eb6e9434d5d2dd043556ff04efc545856c9a1b4723f2c4617bc"}, "downloads": -1, "filename": "terraref-terrautils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "ac0ccef278caa51ae991c684b4bd5402", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34303, "upload_time": "2018-03-30T14:30:18", "upload_time_iso_8601": "2018-03-30T14:30:18.733454Z", "url": "https://files.pythonhosted.org/packages/d2/b0/224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f/terraref-terrautils-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac0ccef278caa51ae991c684b4bd5402", "sha256": "f56e30bd9a0e2eb6e9434d5d2dd043556ff04efc545856c9a1b4723f2c4617bc"}, "downloads": -1, "filename": "terraref-terrautils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "ac0ccef278caa51ae991c684b4bd5402", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34303, "upload_time": "2018-03-30T14:30:18", "upload_time_iso_8601": "2018-03-30T14:30:18.733454Z", "url": "https://files.pythonhosted.org/packages/d2/b0/224de43bcc2be3c4cfe531cb04abcd74a85e159ce45b014bd3370ce6756f/terraref-terrautils-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:47 2020"}