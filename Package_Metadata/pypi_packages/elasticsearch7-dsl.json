{"info": {"author": "Honza Kr\u00e1l", "author_email": "honza.kral@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Elasticsearch DSL\n=================\n\nElasticsearch DSL is a high-level library whose aim is to help with writing and\nrunning queries against Elasticsearch. It is built on top of the official\nlow-level client (`elasticsearch-py <https://github.com/elastic/elasticsearch-py>`_).\n\nIt provides a more convenient and idiomatic way to write and manipulate\nqueries. It stays close to the Elasticsearch JSON DSL, mirroring its\nterminology and structure. It exposes the whole range of the DSL from Python\neither directly using defined classes or a queryset-like expressions.\n\nIt also provides an optional wrapper for working with documents as Python\nobjects: defining mappings, retrieving and saving documents, wrapping the\ndocument data in user-defined classes.\n\nTo use the other Elasticsearch APIs (eg. cluster health) just use the\nunderlying client.\n\nInstallation\n------------\n\n::\n\n  pip install elasticsearch-dsl\n\nExamples\n--------\n\nPlease see the `examples\n<https://github.com/elastic/elasticsearch-dsl-py/tree/master/examples>`_\ndirectory to see some complex examples using ``elasticsearch-dsl``.\n\nCompatibility\n-------------\n\nThe library is compatible with all Elasticsearch versions since ``2.x`` but you\n**have to use a matching major version**:\n\nFor **Elasticsearch 7.0** and later, use the major version 7 (``7.x.y``) of the\nlibrary.\n\nFor **Elasticsearch 6.0** and later, use the major version 6 (``6.x.y``) of the\nlibrary.\n\nFor **Elasticsearch 5.0** and later, use the major version 5 (``5.x.y``) of the\nlibrary.\n\nFor **Elasticsearch 2.0** and later, use the major version 2 (``2.x.y``) of the\nlibrary.\n\n\nThe recommended way to set your requirements in your `setup.py` or\n`requirements.txt` is::\n\n    # Elasticsearch 7.x\n    elasticsearch-dsl>=7.0.0,<8.0.0\n\n    # Elasticsearch 6.x\n    elasticsearch-dsl>=6.0.0,<7.0.0\n\n    # Elasticsearch 5.x\n    elasticsearch-dsl>=5.0.0,<6.0.0\n\n    # Elasticsearch 2.x\n    elasticsearch-dsl>=2.0.0,<3.0.0\n\n\nThe development is happening on ``master``, older branches only get bugfix releases\n\nSearch Example\n--------------\n\nLet's have a typical search request written directly as a ``dict``:\n\n.. code:: python\n\n    from elasticsearch import Elasticsearch\n    client = Elasticsearch()\n\n    response = client.search(\n        index=\"my-index\",\n        body={\n          \"query\": {\n            \"bool\": {\n              \"must\": [{\"match\": {\"title\": \"python\"}}],\n              \"must_not\": [{\"match\": {\"description\": \"beta\"}}],\n              \"filter\": [{\"term\": {\"category\": \"search\"}}]\n            }\n          },\n          \"aggs\" : {\n            \"per_tag\": {\n              \"terms\": {\"field\": \"tags\"},\n              \"aggs\": {\n                \"max_lines\": {\"max\": {\"field\": \"lines\"}}\n              }\n            }\n          }\n        }\n    )\n\n    for hit in response['hits']['hits']:\n        print(hit['_score'], hit['_source']['title'])\n\n    for tag in response['aggregations']['per_tag']['buckets']:\n        print(tag['key'], tag['max_lines']['value'])\n\n\n\nThe problem with this approach is that it is very verbose, prone to syntax\nmistakes like incorrect nesting, hard to modify (eg. adding another filter) and\ndefinitely not fun to write.\n\nLet's rewrite the example using the Python DSL:\n\n.. code:: python\n\n    from elasticsearch import Elasticsearch\n    from elasticsearch_dsl import Search\n\n    client = Elasticsearch()\n\n    s = Search(using=client, index=\"my-index\") \\\n        .filter(\"term\", category=\"search\") \\\n        .query(\"match\", title=\"python\")   \\\n        .exclude(\"match\", description=\"beta\")\n\n    s.aggs.bucket('per_tag', 'terms', field='tags') \\\n        .metric('max_lines', 'max', field='lines')\n\n    response = s.execute()\n\n    for hit in response:\n        print(hit.meta.score, hit.title)\n\n    for tag in response.aggregations.per_tag.buckets:\n        print(tag.key, tag.max_lines.value)\n\nAs you see, the library took care of:\n\n  * creating appropriate ``Query`` objects by name (eq. \"match\")\n\n  * composing queries into a compound ``bool`` query\n\n  * putting the ``term`` query in a filter context of the ``bool`` query\n\n  * providing a convenient access to response data\n\n  * no curly or square brackets everywhere\n\n\nPersistence Example\n-------------------\n\nLet's have a simple Python class representing an article in a blogging system:\n\n.. code:: python\n\n    from datetime import datetime\n    from elasticsearch_dsl import Document, Date, Integer, Keyword, Text, connections\n\n    # Define a default Elasticsearch client\n    connections.create_connection(hosts=['localhost'])\n\n    class Article(Document):\n        title = Text(analyzer='snowball', fields={'raw': Keyword()})\n        body = Text(analyzer='snowball')\n        tags = Keyword()\n        published_from = Date()\n        lines = Integer()\n\n        class Index:\n            name = 'blog'\n            settings = {\n              \"number_of_shards\": 2,\n            }\n\n        def save(self, ** kwargs):\n            self.lines = len(self.body.split())\n            return super(Article, self).save(** kwargs)\n\n        def is_published(self):\n            return datetime.now() > self.published_from\n\n    # create the mappings in elasticsearch\n    Article.init()\n\n    # create and save and article\n    article = Article(meta={'id': 42}, title='Hello world!', tags=['test'])\n    article.body = ''' looong text '''\n    article.published_from = datetime.now()\n    article.save()\n\n    article = Article.get(id=42)\n    print(article.is_published())\n\n    # Display cluster health\n    print(connections.get_connection().cluster.health())\n\n\nIn this example you can see:\n\n  * providing a default connection\n\n  * defining fields with mapping configuration\n\n  * setting index name\n\n  * defining custom methods\n\n  * overriding the built-in ``.save()`` method to hook into the persistence\n    life cycle\n\n  * retrieving and saving the object into Elasticsearch\n\n  * accessing the underlying client for other APIs\n\nYou can see more in the persistence chapter of the documentation.\n\nMigration from ``elasticsearch-py``\n-----------------------------------\n\nYou don't have to port your entire application to get the benefits of the\nPython DSL, you can start gradually by creating a ``Search`` object from your\nexisting ``dict``, modifying it using the API and serializing it back to a\n``dict``:\n\n.. code:: python\n\n    body = {...} # insert complicated query here\n\n    # Convert to Search object\n    s = Search.from_dict(body)\n\n    # Add some filters, aggregations, queries, ...\n    s.filter(\"term\", tags=\"python\")\n\n    # Convert back to dict to plug back into existing code\n    body = s.to_dict()\n\nDevelopment\n-----------\n\nActivate Virtual Environment (`virtualenvs <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`_):\n\n.. code:: bash\n\n    $ virtualenv venv\n    $ source venv/bin/activate\n\nTo install all of the dependencies necessary for development, run:\n\n.. code:: bash\n\n    $ pip install -e '.[develop]'\n\nTo run all of the tests for ``elasticsearch-dsl-py``, run:\n\n.. code:: bash\n\n    $ python setup.py test\n\nAlternatively, it is possible to use the ``run_tests.py`` script in\n``test_elasticsearch_dsl``, which wraps `pytest\n<http://doc.pytest.org/en/latest/>`_, to run subsets of the test suite. Some\nexamples can be seen below:\n\n.. code:: bash\n\n    # Run all of the tests in `test_elasticsearch_dsl/test_analysis.py`\n    $ ./run_tests.py test_analysis.py\n\n    # Run only the `test_analyzer_serializes_as_name` test.\n    $ ./run_tests.py test_analysis.py::test_analyzer_serializes_as_name\n\n``pytest`` will skip tests from ``test_elasticsearch_dsl/test_integration``\nunless there is an instance of Elasticsearch on which a connection can occur.\nBy default, the test connection is attempted at ``localhost:9200``, based on\nthe defaults specified in the ``elasticsearch-py`` `Connection\n<https://github.com/elastic/elasticsearch-py/blob/master/elasticsearch\n/connection/base.py#L29>`_ class. **Because running the integration\ntests will cause destructive changes to the Elasticsearch cluster, only run\nthem when the associated cluster is empty.** As such, if the\nElasticsearch instance at ``localhost:9200`` does not meet these requirements,\nit is possible to specify a different test Elasticsearch server through the\n``TEST_ES_SERVER`` environment variable.\n\n.. code:: bash\n\n    $ TEST_ES_SERVER=my-test-server:9201 ./run_tests\n\nDocumentation\n-------------\n\nDocumentation is available at https://elasticsearch-dsl.readthedocs.io.\n\nContribution Guide\n------------------\n\nWant to hack on Elasticsearch DSL? Awesome! We have `Contribution-Guide <https://github.com/elastic/elasticsearch-dsl-py/blob/master/CONTRIBUTING.rst>`_.\n\nLicense\n-------\n\nCopyright 2013 Elasticsearch\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elasticsearch/elasticsearch-dsl-py", "keywords": "", "license": "Apache-2.0", "maintainer": "Seth Michael Larson", "maintainer_email": "seth.larson@elastic.co", "name": "elasticsearch7-dsl", "package_url": "https://pypi.org/project/elasticsearch7-dsl/", "platform": "", "project_url": "https://pypi.org/project/elasticsearch7-dsl/", "project_urls": {"Homepage": "https://github.com/elasticsearch/elasticsearch-dsl-py"}, "release_url": "https://pypi.org/project/elasticsearch7-dsl/7.2.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Python client for Elasticsearch", "version": "7.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Elasticsearch DSL is a high-level library whose aim is to help with writing and\nrunning queries against Elasticsearch. It is built on top of the official\nlow-level client (<a href=\"https://github.com/elastic/elasticsearch-py\" rel=\"nofollow\">elasticsearch-py</a>).</p>\n<p>It provides a more convenient and idiomatic way to write and manipulate\nqueries. It stays close to the Elasticsearch JSON DSL, mirroring its\nterminology and structure. It exposes the whole range of the DSL from Python\neither directly using defined classes or a queryset-like expressions.</p>\n<p>It also provides an optional wrapper for working with documents as Python\nobjects: defining mappings, retrieving and saving documents, wrapping the\ndocument data in user-defined classes.</p>\n<p>To use the other Elasticsearch APIs (eg. cluster health) just use the\nunderlying client.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install elasticsearch-dsl\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Please see the <a href=\"https://github.com/elastic/elasticsearch-dsl-py/tree/master/examples\" rel=\"nofollow\">examples</a>\ndirectory to see some complex examples using <tt><span class=\"pre\">elasticsearch-dsl</span></tt>.</p>\n</div>\n<div id=\"compatibility\">\n<h2>Compatibility</h2>\n<p>The library is compatible with all Elasticsearch versions since <tt>2.x</tt> but you\n<strong>have to use a matching major version</strong>:</p>\n<p>For <strong>Elasticsearch 7.0</strong> and later, use the major version 7 (<tt>7.x.y</tt>) of the\nlibrary.</p>\n<p>For <strong>Elasticsearch 6.0</strong> and later, use the major version 6 (<tt>6.x.y</tt>) of the\nlibrary.</p>\n<p>For <strong>Elasticsearch 5.0</strong> and later, use the major version 5 (<tt>5.x.y</tt>) of the\nlibrary.</p>\n<p>For <strong>Elasticsearch 2.0</strong> and later, use the major version 2 (<tt>2.x.y</tt>) of the\nlibrary.</p>\n<p>The recommended way to set your requirements in your <cite>setup.py</cite> or\n<cite>requirements.txt</cite> is:</p>\n<pre># Elasticsearch 7.x\nelasticsearch-dsl&gt;=7.0.0,&lt;8.0.0\n\n# Elasticsearch 6.x\nelasticsearch-dsl&gt;=6.0.0,&lt;7.0.0\n\n# Elasticsearch 5.x\nelasticsearch-dsl&gt;=5.0.0,&lt;6.0.0\n\n# Elasticsearch 2.x\nelasticsearch-dsl&gt;=2.0.0,&lt;3.0.0\n</pre>\n<p>The development is happening on <tt>master</tt>, older branches only get bugfix releases</p>\n</div>\n<div id=\"search-example\">\n<h2>Search Example</h2>\n<p>Let\u2019s have a typical search request written directly as a <tt>dict</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticsearch</span> <span class=\"kn\">import</span> <span class=\"n\">Elasticsearch</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Elasticsearch</span><span class=\"p\">()</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span>\n    <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">\"my-index\"</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"p\">{</span>\n      <span class=\"s2\">\"query\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"bool\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"must\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"match\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"python\"</span><span class=\"p\">}}],</span>\n          <span class=\"s2\">\"must_not\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"match\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"beta\"</span><span class=\"p\">}}],</span>\n          <span class=\"s2\">\"filter\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"term\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"search\"</span><span class=\"p\">}}]</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"s2\">\"aggs\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"per_tag\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"terms\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"tags\"</span><span class=\"p\">},</span>\n          <span class=\"s2\">\"aggs\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"max_lines\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"max\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"field\"</span><span class=\"p\">:</span> <span class=\"s2\">\"lines\"</span><span class=\"p\">}}</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">hit</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'hits'</span><span class=\"p\">][</span><span class=\"s1\">'hits'</span><span class=\"p\">]:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hit</span><span class=\"p\">[</span><span class=\"s1\">'_score'</span><span class=\"p\">],</span> <span class=\"n\">hit</span><span class=\"p\">[</span><span class=\"s1\">'_source'</span><span class=\"p\">][</span><span class=\"s1\">'title'</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'aggregations'</span><span class=\"p\">][</span><span class=\"s1\">'per_tag'</span><span class=\"p\">][</span><span class=\"s1\">'buckets'</span><span class=\"p\">]:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"s1\">'key'</span><span class=\"p\">],</span> <span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"s1\">'max_lines'</span><span class=\"p\">][</span><span class=\"s1\">'value'</span><span class=\"p\">])</span>\n</pre>\n<p>The problem with this approach is that it is very verbose, prone to syntax\nmistakes like incorrect nesting, hard to modify (eg. adding another filter) and\ndefinitely not fun to write.</p>\n<p>Let\u2019s rewrite the example using the Python DSL:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">elasticsearch</span> <span class=\"kn\">import</span> <span class=\"n\">Elasticsearch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticsearch_dsl</span> <span class=\"kn\">import</span> <span class=\"n\">Search</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Elasticsearch</span><span class=\"p\">()</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Search</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">\"my-index\"</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s2\">\"term\"</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"s2\">\"search\"</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"match\"</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"python\"</span><span class=\"p\">)</span>   \\\n    <span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"s2\">\"match\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"beta\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">aggs</span><span class=\"o\">.</span><span class=\"n\">bucket</span><span class=\"p\">(</span><span class=\"s1\">'per_tag'</span><span class=\"p\">,</span> <span class=\"s1\">'terms'</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'tags'</span><span class=\"p\">)</span> \\\n    <span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"p\">(</span><span class=\"s1\">'max_lines'</span><span class=\"p\">,</span> <span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"o\">=</span><span class=\"s1\">'lines'</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">hit</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">aggregations</span><span class=\"o\">.</span><span class=\"n\">per_tag</span><span class=\"o\">.</span><span class=\"n\">buckets</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">max_lines</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>As you see, the library took care of:</p>\n<blockquote>\n<ul>\n<li>creating appropriate <tt>Query</tt> objects by name (eq. \u201cmatch\u201d)</li>\n<li>composing queries into a compound <tt>bool</tt> query</li>\n<li>putting the <tt>term</tt> query in a filter context of the <tt>bool</tt> query</li>\n<li>providing a convenient access to response data</li>\n<li>no curly or square brackets everywhere</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"persistence-example\">\n<h2>Persistence Example</h2>\n<p>Let\u2019s have a simple Python class representing an article in a blogging system:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">elasticsearch_dsl</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">Date</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">Keyword</span><span class=\"p\">,</span> <span class=\"n\">Text</span><span class=\"p\">,</span> <span class=\"n\">connections</span>\n\n<span class=\"c1\"># Define a default Elasticsearch client</span>\n<span class=\"n\">connections</span><span class=\"o\">.</span><span class=\"n\">create_connection</span><span class=\"p\">(</span><span class=\"n\">hosts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'localhost'</span><span class=\"p\">])</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Document</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">'snowball'</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'raw'</span><span class=\"p\">:</span> <span class=\"n\">Keyword</span><span class=\"p\">()})</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"s1\">'snowball'</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">Keyword</span><span class=\"p\">()</span>\n    <span class=\"n\">published_from</span> <span class=\"o\">=</span> <span class=\"n\">Date</span><span class=\"p\">()</span>\n    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Index</span><span class=\"p\">:</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'blog'</span>\n        <span class=\"n\">settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n          <span class=\"s2\">\"number_of_shards\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span> <span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">**</span> <span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">published_from</span>\n\n<span class=\"c1\"># create the mappings in elasticsearch</span>\n<span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create and save and article</span>\n<span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"p\">(</span><span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Hello world!'</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">])</span>\n<span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"s1\">''' looong text '''</span>\n<span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">published_from</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">article</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">is_published</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Display cluster health</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"o\">.</span><span class=\"n\">get_connection</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">health</span><span class=\"p\">())</span>\n</pre>\n<p>In this example you can see:</p>\n<blockquote>\n<ul>\n<li>providing a default connection</li>\n<li>defining fields with mapping configuration</li>\n<li>setting index name</li>\n<li>defining custom methods</li>\n<li>overriding the built-in <tt>.save()</tt> method to hook into the persistence\nlife cycle</li>\n<li>retrieving and saving the object into Elasticsearch</li>\n<li>accessing the underlying client for other APIs</li>\n</ul>\n</blockquote>\n<p>You can see more in the persistence chapter of the documentation.</p>\n</div>\n<div id=\"migration-from-elasticsearch-py\">\n<h2>Migration from <tt><span class=\"pre\">elasticsearch-py</span></tt></h2>\n<p>You don\u2019t have to port your entire application to get the benefits of the\nPython DSL, you can start gradually by creating a <tt>Search</tt> object from your\nexisting <tt>dict</tt>, modifying it using the API and serializing it back to a\n<tt>dict</tt>:</p>\n<pre><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span> <span class=\"c1\"># insert complicated query here</span>\n\n<span class=\"c1\"># Convert to Search object</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Search</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add some filters, aggregations, queries, ...</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s2\">\"term\"</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"s2\">\"python\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert back to dict to plug back into existing code</span>\n<span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Activate Virtual Environment (<a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/\" rel=\"nofollow\">virtualenvs</a>):</p>\n<pre>$ virtualenv venv\n$ <span class=\"nb\">source</span> venv/bin/activate\n</pre>\n<p>To install all of the dependencies necessary for development, run:</p>\n<pre>$ pip install -e <span class=\"s1\">'.[develop]'</span>\n</pre>\n<p>To run all of the tests for <tt><span class=\"pre\">elasticsearch-dsl-py</span></tt>, run:</p>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>Alternatively, it is possible to use the <tt>run_tests.py</tt> script in\n<tt>test_elasticsearch_dsl</tt>, which wraps <a href=\"http://doc.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>, to run subsets of the test suite. Some\nexamples can be seen below:</p>\n<pre><span class=\"c1\"># Run all of the tests in `test_elasticsearch_dsl/test_analysis.py`\n</span>$ ./run_tests.py test_analysis.py\n\n<span class=\"c1\"># Run only the `test_analyzer_serializes_as_name` test.\n</span>$ ./run_tests.py test_analysis.py::test_analyzer_serializes_as_name\n</pre>\n<p><tt>pytest</tt> will skip tests from <tt>test_elasticsearch_dsl/test_integration</tt>\nunless there is an instance of Elasticsearch on which a connection can occur.\nBy default, the test connection is attempted at <tt>localhost:9200</tt>, based on\nthe defaults specified in the <tt><span class=\"pre\">elasticsearch-py</span></tt> <a href=\"https://github.com/elastic/elasticsearch-py/blob/master/elasticsearch/connection/base.py#L29\" rel=\"nofollow\">Connection</a> class. <strong>Because running the integration\ntests will cause destructive changes to the Elasticsearch cluster, only run\nthem when the associated cluster is empty.</strong> As such, if the\nElasticsearch instance at <tt>localhost:9200</tt> does not meet these requirements,\nit is possible to specify a different test Elasticsearch server through the\n<tt>TEST_ES_SERVER</tt> environment variable.</p>\n<pre>$ <span class=\"nv\">TEST_ES_SERVER</span><span class=\"o\">=</span>my-test-server:9201 ./run_tests\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"https://elasticsearch-dsl.readthedocs.io\" rel=\"nofollow\">https://elasticsearch-dsl.readthedocs.io</a>.</p>\n</div>\n<div id=\"contribution-guide\">\n<h2>Contribution Guide</h2>\n<p>Want to hack on Elasticsearch DSL? Awesome! We have <a href=\"https://github.com/elastic/elasticsearch-dsl-py/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">Contribution-Guide</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright 2013 Elasticsearch</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<blockquote>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></blockquote>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 7167747, "releases": {"7.1.0": [{"comment_text": "", "digests": {"md5": "a897d48b865e673aa13e8422e577ad6f", "sha256": "8b6e6f1a677b14ab5f884b45ca7900dd45252c473ec999c9e6d27dc8a689e6f3"}, "downloads": -1, "filename": "elasticsearch7-dsl-7.1.0.tar.gz", "has_sig": false, "md5_digest": "a897d48b865e673aa13e8422e577ad6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49780, "upload_time": "2020-03-22T10:56:17", "upload_time_iso_8601": "2020-03-22T10:56:17.272089Z", "url": "https://files.pythonhosted.org/packages/5b/54/c3028508718c03f4dd5d1ca616c764f84e1cf93ba9412e1e23a0ae9cab10/elasticsearch7-dsl-7.1.0.tar.gz", "yanked": false}], "7.2.0": [{"comment_text": "", "digests": {"md5": "afb63f56f07d1e470c9f969e35dd3418", "sha256": "368c439bb20163b60c87d8f34026191d1a89cafbb74833b10e35d6035c675e05"}, "downloads": -1, "filename": "elasticsearch7-dsl-7.2.0.tar.gz", "has_sig": false, "md5_digest": "afb63f56f07d1e470c9f969e35dd3418", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 52082, "upload_time": "2020-05-04T21:12:23", "upload_time_iso_8601": "2020-05-04T21:12:23.748736Z", "url": "https://files.pythonhosted.org/packages/5a/f4/2b608b8eba52a3abe45e70ece7b084032a51eee5e2f141aeed8da620cba3/elasticsearch7-dsl-7.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "afb63f56f07d1e470c9f969e35dd3418", "sha256": "368c439bb20163b60c87d8f34026191d1a89cafbb74833b10e35d6035c675e05"}, "downloads": -1, "filename": "elasticsearch7-dsl-7.2.0.tar.gz", "has_sig": false, "md5_digest": "afb63f56f07d1e470c9f969e35dd3418", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 52082, "upload_time": "2020-05-04T21:12:23", "upload_time_iso_8601": "2020-05-04T21:12:23.748736Z", "url": "https://files.pythonhosted.org/packages/5a/f4/2b608b8eba52a3abe45e70ece7b084032a51eee5e2f141aeed8da620cba3/elasticsearch7-dsl-7.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:02 2020"}