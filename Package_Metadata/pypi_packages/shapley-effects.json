{"info": {"author": "Nazih BENOUMECHIARA & Kevin ELIE-DIT-COSAQUE", "author_email": "nazih.benoumechiara@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![build status](https://gitlab.com/CEMRACS17/shapley-effects/badges/master/build.svg)](https://gitlab.com/CEMRACS17/shapley-effects/commits/master)\n[![coverage report](https://gitlab.com/CEMRACS17/shapley-effects/badges/master/coverage.svg)](https://gitlab.com/CEMRACS17/shapley-effects/commits/master)\n# Shapley effects\n\nShapley-effects, or `shapley`, is a Python library that estimates the Shapley effects for the field of Sensitivity Analysis of Model Output [[1]](http://epubs.siam.org/doi/pdf/10.1137/16M1097717). Several features are available in the library. For a given probabilistic model and numerical function, it is possible to:\n\n- compute the Shapley effects,\n- compute the Sobol' indices for dependent and independent inputs,\n- build a surrogate model to substitute the numerical function.\n\nThe library is mainly built on top of NumPy, OpenTURNS and other libraries. It is also validated and compared to the [`sensitivity`](https://github.com/cran/sensitivity/) package from the R software. \n\n## Important links\n\n- Example notebooks are available in the [example directory](https://gitlab.com/CEMRACS17/shapley-effects/tree/dev/examples).\n- Issues: [https://gitlab.com/CEMRACS17/shapley-effects/issues](https://gitlab.com/CEMRACS17/shapley-effects/issues)\n\n## Installation\n\nVarious dependencies are necessary in this library and we strongly recommend the use of [Anaconda](https://anaconda.org/) for the installation. The dependencies are:\n\n- Numpy,\n- Scipy,\n- Pandas,\n- OpenTURNS,\n- Scikit-Learn,\n- GPflow.\n\nScikit-learn is used to build kriging and random-forest models. OpenTURNS is a very convenient tool to define probabilistic distributions. GPflow which generates kriging models from GPy using Tensorflow.\n\nOptional dependencies are also necessary for various task like plotting or tuning the model:\n\n- Matplotlib,\n- Seaborn,\n- Scikit-Optimize.\n\nThese libraries can easily be installed using Anaconda and pip. Execute the following commands:\n\n```\nconda install numpy pandas scikit-learn tensorflow matplotlib seaborn scikit-optimize\nconda install -c conda-forge openturns gpy\n```\n\nThe package GPflow is not available on Anaconda or PyPi. Thus it must be installed from the source. First clone the GitHub repository:\n\n```\ngit clone https://github.com/GPflow/GPflow.git\n```\n\nThen, inside the GPflow folder, execute the command:\n\n```\npip install .\n```\n\n## Acknowledgements\n\nThe library has been developed at the [CEMRACS 2017](http://smai.emath.fr/cemracs/cemracs17/) with the help of Bertrand Iooss, Roman Sueur, Veronique Maume-Deschamps and Clementine Prieur.\n\n## References\n\n[1] Owen, A. B., & Prieur, C. (2017). On Shapley value for measuring importance of dependent inputs. SIAM/ASA Journal on Uncertainty Quantification, 5(1), 986-1002.\n\n[2] Song, E., Nelson, B. L., & Staum, J. (2016). Shapley effects for global sensitivity analysis: Theory and computation. SIAM/ASA Journal on Uncertainty Quantification, 4(1), 1060-1083.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/CEMRACS17/shapley-effects", "keywords": "sensitivity analysis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "shapley-effects", "package_url": "https://pypi.org/project/shapley-effects/", "platform": "", "project_url": "https://pypi.org/project/shapley-effects/", "project_urls": {"Homepage": "https://gitlab.com/CEMRACS17/shapley-effects"}, "release_url": "https://pypi.org/project/shapley-effects/0.1/", "requires_dist": null, "requires_python": "", "summary": "Estimation of Shapley effects for Sensitivity Analysis of Model Output.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>[![build status](<a href=\"https://gitlab.com/CEMRACS17/shapley-effects/badges/master/build.svg)%5D(https://gitlab.com/CEMRACS17/shapley-effects/commits/master\" rel=\"nofollow\">https://gitlab.com/CEMRACS17/shapley-effects/badges/master/build.svg)](https://gitlab.com/CEMRACS17/shapley-effects/commits/master</a>)\n[![coverage report](<a href=\"https://gitlab.com/CEMRACS17/shapley-effects/badges/master/coverage.svg)%5D(https://gitlab.com/CEMRACS17/shapley-effects/commits/master\" rel=\"nofollow\">https://gitlab.com/CEMRACS17/shapley-effects/badges/master/coverage.svg)](https://gitlab.com/CEMRACS17/shapley-effects/commits/master</a>)\n# Shapley effects</p>\n<p>Shapley-effects, or <cite>shapley</cite>, is a Python library that estimates the Shapley effects for the field of Sensitivity Analysis of Model Output [[1]](<a href=\"http://epubs.siam.org/doi/pdf/10.1137/16M1097717\" rel=\"nofollow\">http://epubs.siam.org/doi/pdf/10.1137/16M1097717</a>). Several features are available in the library. For a given probabilistic model and numerical function, it is possible to:</p>\n<ul>\n<li>compute the Shapley effects,</li>\n<li>compute the Sobol\u2019 indices for dependent and independent inputs,</li>\n<li>build a surrogate model to substitute the numerical function.</li>\n</ul>\n<p>The library is mainly built on top of NumPy, OpenTURNS and other libraries. It is also validated and compared to the [<cite>sensitivity</cite>](<a href=\"https://github.com/cran/sensitivity/\" rel=\"nofollow\">https://github.com/cran/sensitivity/</a>) package from the R software.</p>\n<p>## Important links</p>\n<ul>\n<li>Example notebooks are available in the [example directory](<a href=\"https://gitlab.com/CEMRACS17/shapley-effects/tree/dev/examples\" rel=\"nofollow\">https://gitlab.com/CEMRACS17/shapley-effects/tree/dev/examples</a>).</li>\n<li>Issues: [<a href=\"https://gitlab.com/CEMRACS17/shapley-effects/issues%5D(https://gitlab.com/CEMRACS17/shapley-effects/issues\" rel=\"nofollow\">https://gitlab.com/CEMRACS17/shapley-effects/issues](https://gitlab.com/CEMRACS17/shapley-effects/issues</a>)</li>\n</ul>\n<p>## Installation</p>\n<p>Various dependencies are necessary in this library and we strongly recommend the use of [Anaconda](<a href=\"https://anaconda.org/\" rel=\"nofollow\">https://anaconda.org/</a>) for the installation. The dependencies are:</p>\n<ul>\n<li>Numpy,</li>\n<li>Scipy,</li>\n<li>Pandas,</li>\n<li>OpenTURNS,</li>\n<li>Scikit-Learn,</li>\n<li>GPflow.</li>\n</ul>\n<p>Scikit-learn is used to build kriging and random-forest models. OpenTURNS is a very convenient tool to define probabilistic distributions. GPflow which generates kriging models from GPy using Tensorflow.</p>\n<p>Optional dependencies are also necessary for various task like plotting or tuning the model:</p>\n<ul>\n<li>Matplotlib,</li>\n<li>Seaborn,</li>\n<li>Scikit-Optimize.</li>\n</ul>\n<p>These libraries can easily be installed using Anaconda and pip. Execute the following commands:</p>\n<p><tt>`\nconda install numpy pandas <span class=\"pre\">scikit-learn</span> tensorflow matplotlib seaborn <span class=\"pre\">scikit-optimize</span>\nconda install <span class=\"pre\">-c</span> <span class=\"pre\">conda-forge</span> openturns gpy\n`</tt></p>\n<p>The package GPflow is not available on Anaconda or PyPi. Thus it must be installed from the source. First clone the GitHub repository:</p>\n<p><tt>`\ngit clone <span class=\"pre\">https://github.com/GPflow/GPflow.git</span>\n`</tt></p>\n<p>Then, inside the GPflow folder, execute the command:</p>\n<p><tt>`\npip install .\n`</tt></p>\n<p>## Acknowledgements</p>\n<p>The library has been developed at the [CEMRACS 2017](<a href=\"http://smai.emath.fr/cemracs/cemracs17/\" rel=\"nofollow\">http://smai.emath.fr/cemracs/cemracs17/</a>) with the help of Bertrand Iooss, Roman Sueur, Veronique Maume-Deschamps and Clementine Prieur.</p>\n<p>## References</p>\n<p>[1] Owen, A. B., &amp; Prieur, C. (2017). On Shapley value for measuring importance of dependent inputs. SIAM/ASA Journal on Uncertainty Quantification, 5(1), 986-1002.</p>\n<p>[2] Song, E., Nelson, B. L., &amp; Staum, J. (2016). Shapley effects for global sensitivity analysis: Theory and computation. SIAM/ASA Journal on Uncertainty Quantification, 4(1), 1060-1083.</p>\n\n          </div>"}, "last_serial": 3569112, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "da74059ce7aad107ac0eae8a0032ac5a", "sha256": "301abe837bc594892f6ae04a980326eb85a2e63574a6cbcc3b394fa50dba0adb"}, "downloads": -1, "filename": "shapley-effects-0.1.tar.gz", "has_sig": false, "md5_digest": "da74059ce7aad107ac0eae8a0032ac5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21966, "upload_time": "2018-02-10T02:32:52", "upload_time_iso_8601": "2018-02-10T02:32:52.174879Z", "url": "https://files.pythonhosted.org/packages/b0/e2/07faf80a4e1f659caec4070dd7f5c5b4a7bb7525fd822a39f3fdfdc80775/shapley-effects-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da74059ce7aad107ac0eae8a0032ac5a", "sha256": "301abe837bc594892f6ae04a980326eb85a2e63574a6cbcc3b394fa50dba0adb"}, "downloads": -1, "filename": "shapley-effects-0.1.tar.gz", "has_sig": false, "md5_digest": "da74059ce7aad107ac0eae8a0032ac5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21966, "upload_time": "2018-02-10T02:32:52", "upload_time_iso_8601": "2018-02-10T02:32:52.174879Z", "url": "https://files.pythonhosted.org/packages/b0/e2/07faf80a4e1f659caec4070dd7f5c5b4a7bb7525fd822a39f3fdfdc80775/shapley-effects-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:40 2020"}