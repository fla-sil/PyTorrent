{"info": {"author": "Git Guild", "author_email": "support@gitguild.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Topic :: Software Development :: Libraries"], "description": "# sqlalchemy-models\n\nData models for a server using [SQLAlchemy](http://www.sqlalchemy.org/), and [json schemas](http://json-schema.org/). Intended to be used with Postges, and there will definitely be issues if you try to use with MySQL.\n\n * Users w/ Permissions & Settings\n * Wallet models (Debits, Credits, Balances) \n\n## Installation\n\nTo ensure forward compatibility, the best way to install sqlalchemy-models is with make.\n\n`make install`\n\n## JSON Schemas\n\n[alchemyjsonschema](https://github.com/isysd/alchemyjsonschema) can convert the SQLAlchemy orm classes in this package into json schemas. To build the schemas, run:\n\n`make schemas`\n\nThis will generate a schema for each table, and write them to  `sqlalchemy_odels/schemas/<tablename>.json`.\n\n## Signature Storage\n\nThis package comes with a tool for storing signatures related to the rows in your primary tables. If a row represents a record, then the corresponding signature row will be a signed copy of the same data. This feature can be used in auditing, constructing hash trees, or other proofs.\n\n#### Example signature table for User\n\n| id | data | user_id |\n|----|------|-------------------------------|\n|  1 | \"signed bitjws User1\" | 1 |\n|  2 | \"signed bitjws User4\" | 4 |\n|  3 | \"signed bitjws User7\" | 7 |\n\n#### Generate a signature class\n\nThe generator is a simple function that takes the declarative to be signed as an argument.\n\n```\nfrom sqlalchemy_login_models import generate_signature_class\nfrom sqlalchemy_login_models.model import User\n# this is a declarative class derived from Base, just like User\nUserSig = generate_signature_class(User)\n```\n\n## Ledger\n\nConvert monetary data types to [ledger-cli](http://ledger-cli.org) entries. This trusted standard in double entry accounting is powerful, and accurate.\n\n```\nP 2016/07/10 04:56:21 BTC 770.00000000 USD\nP 2016/07/10 04:56:21 USD 0.00129870 BTC\n2016/07/10 04:56:21 testx BTC_USD sell\n    ;<Trade(trade_id='kraken|SKDFJS-GFSDS-SDFSDF', side='sell', amount=1.10000000 BTC, price=770.00000000 USD, fee=1.00000000 USD, fee_side='quote', market='BTC_USD', exchange='kraken', time=2016/07/10 04:56:21)>\n    Assets:kraken:USD    846.00000000 USD @ 0.00129870 BTC\n    FX:BTC_USD:sell   -847.00000000 USD @ 0.00129870 BTC\n    Assets:kraken:BTC    -1.10000000 BTC @ 770.00000000 USD\n    FX:BTC_USD:sell   1.10000000 BTC @ 770.00000000 USD\n    Expenses:TradeFee    1.00000000 USD @ 0.00129870 BTC\n```\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TAPPGuild/sqlalchemy-models", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "sqlalchemy-models", "package_url": "https://pypi.org/project/sqlalchemy-models/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqlalchemy-models/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/TAPPGuild/sqlalchemy-models"}, "release_url": "https://pypi.org/project/sqlalchemy-models/0.0.6/", "requires_dist": null, "requires_python": null, "summary": "Generic data models for an application using SQLAlchemy.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            # sqlalchemy-models<br><br>Data models for a server using [SQLAlchemy](http://www.sqlalchemy.org/), and [json schemas](http://json-schema.org/). Intended to be used with Postges, and there will definitely be issues if you try to use with MySQL.<br><br> * Users w/ Permissions &amp; Settings<br> * Wallet models (Debits, Credits, Balances) <br><br>## Installation<br><br>To ensure forward compatibility, the best way to install sqlalchemy-models is with make.<br><br>`make install`<br><br>## JSON Schemas<br><br>[alchemyjsonschema](https://github.com/isysd/alchemyjsonschema) can convert the SQLAlchemy orm classes in this package into json schemas. To build the schemas, run:<br><br>`make schemas`<br><br>This will generate a schema for each table, and write them to  `sqlalchemy_odels/schemas/&lt;tablename&gt;.json`.<br><br>## Signature Storage<br><br>This package comes with a tool for storing signatures related to the rows in your primary tables. If a row represents a record, then the corresponding signature row will be a signed copy of the same data. This feature can be used in auditing, constructing hash trees, or other proofs.<br><br>#### Example signature table for User<br><br>| id | data | user_id |<br>|----|------|-------------------------------|<br>|  1 | \"signed bitjws User1\" | 1 |<br>|  2 | \"signed bitjws User4\" | 4 |<br>|  3 | \"signed bitjws User7\" | 7 |<br><br>#### Generate a signature class<br><br>The generator is a simple function that takes the declarative to be signed as an argument.<br><br>```<br>from sqlalchemy_login_models import generate_signature_class<br>from sqlalchemy_login_models.model import User<br># this is a declarative class derived from Base, just like User<br>UserSig = generate_signature_class(User)<br>```<br><br>## Ledger<br><br>Convert monetary data types to [ledger-cli](http://ledger-cli.org) entries. This trusted standard in double entry accounting is powerful, and accurate.<br><br>```<br>P 2016/07/10 04:56:21 BTC 770.00000000 USD<br>P 2016/07/10 04:56:21 USD 0.00129870 BTC<br>2016/07/10 04:56:21 testx BTC_USD sell<br>    ;&lt;Trade(trade_id='kraken|SKDFJS-GFSDS-SDFSDF', side='sell', amount=1.10000000 BTC, price=770.00000000 USD, fee=1.00000000 USD, fee_side='quote', market='BTC_USD', exchange='kraken', time=2016/07/10 04:56:21)&gt;<br>    Assets:kraken:USD    846.00000000 USD @ 0.00129870 BTC<br>    FX:BTC_USD:sell   -847.00000000 USD @ 0.00129870 BTC<br>    Assets:kraken:BTC    -1.10000000 BTC @ 770.00000000 USD<br>    FX:BTC_USD:sell   1.10000000 BTC @ 770.00000000 USD<br>    Expenses:TradeFee    1.00000000 USD @ 0.00129870 BTC<br>```<br>\n          </div>"}, "last_serial": 2478981, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "7a2629cc23e22d566abb4a45c4b9e820", "sha256": "7bc6d5b495ad591f07a0d66e6268883416266a4c8e7cb07e1da38e3d4b1e7d8c"}, "downloads": -1, "filename": "sqlalchemy-models-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7a2629cc23e22d566abb4a45c4b9e820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13968, "upload_time": "2016-11-23T15:29:18", "upload_time_iso_8601": "2016-11-23T15:29:18.441525Z", "url": "https://files.pythonhosted.org/packages/f2/15/4c8ff01baacae43f41ffa83670d375cb283939393f57f20a732f91598acc/sqlalchemy-models-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a2629cc23e22d566abb4a45c4b9e820", "sha256": "7bc6d5b495ad591f07a0d66e6268883416266a4c8e7cb07e1da38e3d4b1e7d8c"}, "downloads": -1, "filename": "sqlalchemy-models-0.0.6.tar.gz", "has_sig": false, "md5_digest": "7a2629cc23e22d566abb4a45c4b9e820", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13968, "upload_time": "2016-11-23T15:29:18", "upload_time_iso_8601": "2016-11-23T15:29:18.441525Z", "url": "https://files.pythonhosted.org/packages/f2/15/4c8ff01baacae43f41ffa83670d375cb283939393f57f20a732f91598acc/sqlalchemy-models-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:55 2020"}