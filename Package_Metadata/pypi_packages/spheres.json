{"info": {"author": "Matthew Weiss", "author_email": "heyredhat@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# spheres\n\n## Installation\n\nFirst, make sure numpy, scipy, and cython are installed.\n\n```\npip install numpy\npip install scipy\npip install cython\n```\n\nThen:\n\n`pip install spheres`\n\n## Usage\n\nspheres provides a seamless mechanism for real-time visualization of python data in the browser, with an emphasis on the numerical data required for simulations of quantum mechanics.\n\n`a = View(1)`\n\nThe basic pattern is to wrap a View around any python object. The result is that, for example:\n\n`type(a)` => `<class 'spheres.view.View(int)>`, but\n`a.__class__` => `<class 'int'>`.\n\nThe View object completely emulates its \"inner class\" and can be used more or less interchangeably.\n\n`a + 1` => `2`\n\nTo assign an \"inner value\" to a View use:\n\n`a << (a + 1)`\n\nMake sure to include the parentheses because otherwise python will interpret this as `(a << a) + 1`. You can retrieve the underlying object of a View with `a.get()`.\n\nMeanwhile, however, when you `import spheres` a webserver built on flask and socketio starts in a background thread, which provides 3D visualizations of certain datatypes using three.js in the browser. Note that the `import` won't complete until the server has accepted a connection via the browser. You can specify the port using a commandline argument:\n\n`python test.py -p 8080` or `python test.py --port 8080`.\n\nThen the page will be available at `localhost:8080`.\n\nThe idea is that each View object python-side is linked to a corresponding View object on the javascript side. Every time the python View is changed, the javascript View reflects the change. Note that javascript Views are created on the first \"flush,\" but that `repr(view)` has been overloaded to flush.\n\n```\na = View(1)\na\n```\n\nThe value of `a` should print to the console, while a pane displaying that same value should appear in the browser. This pane can be dragged around, resized, and double clicking it will make it dissapear.\n\nYou can even access javascript methods in python. The idea is that when you try to call a method of python View `a`, first the object checks its own namespace, then it checks the namespace of its \"inner class,\" but then it checks the namespace of the corresponding javascript class in the browser. For example, the javascript View has a `destroy` method, which kills the visualization (although it will return upon another flush). It can be easily called via python as if it were a python method: `a.destroy()`.\n\nSymmetrically, we can call python methods from javascript. To see this, first we note that `a.js()` will return a useful string of the form,\n\n`workspace.views['b5e9f8c4-c43e-41df-9c64-fd195f1da7b2']`.\n\n from which it becomes clear that each python/js View is assigned a unique id. In the javascript console, we can then use:\n\n`await workspace.views['b5e9f8c4-c43e-41df-9c64-fd195f1da7b2'].call('js')()`\n\nIn the python console, this prints the same value as before. The results of the method (nothing in this case) are returned as a javascript Promise. We also observe that while python Views are managed by the View class itself, the javascript Views are managed by a \"Workspace,\" available globally as `workspace`.) \n\nA view can be defined in the following way (in python):\n\n```\nView(obj,\\\n\t\tto_client=lambda view: <view -> viz_data>,\\\n\t\tfrom_client=lambda viz_data: <viz_data -> inner obj>,\\\n\t\tjs_class=\"<javascript class name>\",\\\n\t\trequires_flush=[\"these\", \"methods\", \"will\", \"trigger\", \"an\", \"update\"])\n```\n\nThe default View has a simple `to_client` function: `lambda view: str(view)` and its `from_client` function does nothing. Its `js_class` is \"View,\" and nothing special requires flushing.\n\nCurrently, the only other View which has been implemented is Sphere. It's defined in the following way.\n\n```\ndef Sphere(obj):\n\treturn View(obj,\\\n\t\t \t\tto_client=lambda view:\\\n\t\t\t\t \t{\"stars\": spin_XYZ(view),\\\n\t\t\t\t \t \"phase\": [1,0]},\\\n\t\t \t\tfrom_client=lambda viz_data: XYZ_spin(viz_data[\"stars\"]),\\\n\t\t \t\tjs_class=\"Sphere\")\n```\n\nA Sphere represents the state of a \"quantum spin\" as a constellation of points on a 2-sphere via an insight often attributed to Ettore Majorana. Note that we use the automatically included `qutip` library, available as `qt`, for our quantum calculations, and we assume knowledge of its use. \n\nA quantum spin can be represented as finite dimensional complex vector. Eliding many details, if the components of a spin state in the |j, m> representation are interpreted as the coefficients of a polynomial, then the roots of that polynomial when stereographically projected from the complex plane to the 2-sphere along the axis of quantization correspond to a constellation of points. Each point or \"star\" contributes an angular momentum of 1/2 in its direction so that the total angular momentum axis is just the sum of the stars.\n\nThe provided method `spin_XYZ` takes a `qt.Qobj` representing a spin state and returns a list of the xyz coordinates of its stars. Conversely, the method `XYZ_spin` takes a list of xyz coordinates and returns its corresponding complex vector. We leave aside for now the \"phase,\" which, to put it briefly, has to do with the fact that the roots of polynomials are only defined up to multiplcation by a complex scalar.\n\nTo create a Sphere for a random spin state, we can use: \n```\na = Sphere(qt.rand_ket(3))\na\n```\n\nUpdating `a` in python, of course, updates the constellation. But because the relationship is bidirectional, if we drag the stars around in the visual representation, `a` automatically reflects the change in python.\n\nWe can easily see this by using one View to \"listen\" to another View.\n\n```\na = Sphere(qt.rand_ket(3))\nb = View(\"\")\nb.listen(a, lambda o: str(o))\n```\nHere, `View(\"\")` is, of course, a wrapper around a string object. The effect is that every time `a` changes, `b` reflects the change: specifically, the inner object of `b` is set to the return value of the provided lambda to which `a` is passed as `o`.\n\nIn the browser, there should appear a sphere for `a` and a pane for `b`. It's clear that dragging the stars around the sphere updates the complex vector in real time, which is reflected in `b`. (If you're done listening, use `b.unlisten(a)`.)\n\nNext, consider:\n```\ndt = 0.008\nu = (-1j*dt*qt.rand_herm(3)).expm()\na.loop_for(5000, lambda o: u*o)\n```\n\nThe first line generates a random unitary matrix representing quantum time evolution over a short interval dt. We can apply this unitary to our quantum state with `u*a`. It often happens we want to do this over and over again, animating the constellation. But for efficiency, we don't really want to update the visualization after *every* iteration, and in fact, doing so often overloads the browser. So we have `loop_for`. It takes optional parameters `rate` and `sleep`: a rate of 1/2 flushes updates to the browser after every other iteration; a rate of 1/3 flushes updates every three iterations, etc; and we can also sleep for a certain amount of time after each iteration. Generally, the default values are fine.\n\nFinally:\n\nLet's create a four dimensional pure state. We can represent it with a constellation of three stars; but it also corresponds to a (possibly entangled) state of two spin 1/2 particles (aka qubits), each with a partial state. Note that we can name a View, which will override its string representation. \n\n```\na = Sphere(qt.rand_ket(4), name=\"a\")\na.dims = [[2,2], [1,1]]\n```\n\nWe can use the `partials` function to get Views for the states of the subsystems `b` and `c`:\n\n```\nb, c = partials(a)\nb.name = \"b\"\nc.name = \"c\"\n```\n\n`b` and `c` are Views on 2x2 density matrices. They each listen to the pure state `a` so that if `a` is modified, `b` and `c` are refreshed as well (using the ptrace operator).\n\nBut suppose we evolve 'b' with some linear operator; we want this transformation to be upgraded to an operator that acts on the pure state that respects the tensor product structure (in other words, with identities for the other subspaces), so that `a` can listen to `b` and `c` in turn.\n\nWe want \n\n`(b -> u.dag()*b*u) -> (a -> U*a)`, where U is the tensor product of u and the 2x2 identity.\n\nThis is automatically provided. For example, consider a projector:\n\n```\np = View(qt.basis(2,0)*qt.basis(2,0).dag(), name=\"p\")\nb << (p*b*p)\n```\n\ngives the same result as\n\n```\nP = View(qt.tensor(qt.basis(2,0)*qt.basis(2,0).dag(), qt.identity(2)), name=\"P\")\na << (P*a)\n```\n\nHere's how it works behind the scenes. If we have a product of operators with Views wrapped around them, e.g. `p*a*p`, this actually returns an OperatorExpression object, which has kept track of the operators along the way without actually multiplying them. If you check its string representation, it should be: ['p', 'a', 'p']. The OperatorExpression simulates the attributes of normal Qobj, and its numerical form can be retrieved with the `reduced()` method. \n\nWhen an OperatorExpression is set to a View which is contained in that expression, something special happens. For example, the `partials` function adds the pure state `a` as a listener to each of the partials `b` and `c`, passing an optional parameter expression_type=OperatorExpression.\n\n```\nlisten(to_whom, with_func, expression_type=None)\n```\n\nWhen an OperatorExpression is set to a View that appears within it, and that View has a listener with expression_type=OperatorExpression, then the assignment operation is handled by the OperatorExpression class, including flushing updates to the listeners. In this case, it takes the operators on the right hand side of the View in the expression, multiplies them, tensors it with appropriate identities so that it can act on the pure state, performs the transformation, and finally flushes the changes to the pure state, telling it to exclude this subsystem in its own flushes, so as to avoid infinite regress. So far this is the only type of Expression which has been implemented, but one can easily add more by registering them with the View class:\n\n`View.register_expression_type(ExpressionClass)`\n\nYou can confirm that A() and B() are more or less inverses.\n\n```\nh = qt.rand_herm(2)\nu = View((-1j*h*dt).expm(), name=\"u\")\nU = View(qt.tensor((-1j*dt*h/8).expm(), qt.identity(2)), name=\"U\")\n\ndef A():\n\ta.loop_for(200, lambda v: U*a)\n\ndef B():\n\tb.loop_for(200, lambda v: u*v*u.dag())\n\nA()\nB()\n```\n\nNote, however, the factor of 1/8 in the definition of U. Future versions will obviate the need for this by keeping track of the underlying phase and hermitian matix that are exponentiated to give a certain unitary. \n\nAnd that's all for now. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/heyredhat/spheres", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spheres", "package_url": "https://pypi.org/project/spheres/", "platform": "", "project_url": "https://pypi.org/project/spheres/", "project_urls": {"Homepage": "https://github.com/heyredhat/spheres"}, "release_url": "https://pypi.org/project/spheres/0.2.0.4/", "requires_dist": ["flask", "python-socketio", "eventlet", "termcolor", "sympy", "numpy", "scipy", "cython", "qutip", "forbiddenfruit"], "requires_python": ">=3", "summary": "functorial visualization library with support for quantum mechanics", "version": "0.2.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>spheres</h1>\n<h2>Installation</h2>\n<p>First, make sure numpy, scipy, and cython are installed.</p>\n<pre><code>pip install numpy\npip install scipy\npip install cython\n</code></pre>\n<p>Then:</p>\n<p><code>pip install spheres</code></p>\n<h2>Usage</h2>\n<p>spheres provides a seamless mechanism for real-time visualization of python data in the browser, with an emphasis on the numerical data required for simulations of quantum mechanics.</p>\n<p><code>a = View(1)</code></p>\n<p>The basic pattern is to wrap a View around any python object. The result is that, for example:</p>\n<p><code>type(a)</code> =&gt; <code>&lt;class 'spheres.view.View(int)&gt;</code>, but\n<code>a.__class__</code> =&gt; <code>&lt;class 'int'&gt;</code>.</p>\n<p>The View object completely emulates its \"inner class\" and can be used more or less interchangeably.</p>\n<p><code>a + 1</code> =&gt; <code>2</code></p>\n<p>To assign an \"inner value\" to a View use:</p>\n<p><code>a &lt;&lt; (a + 1)</code></p>\n<p>Make sure to include the parentheses because otherwise python will interpret this as <code>(a &lt;&lt; a) + 1</code>. You can retrieve the underlying object of a View with <code>a.get()</code>.</p>\n<p>Meanwhile, however, when you <code>import spheres</code> a webserver built on flask and socketio starts in a background thread, which provides 3D visualizations of certain datatypes using three.js in the browser. Note that the <code>import</code> won't complete until the server has accepted a connection via the browser. You can specify the port using a commandline argument:</p>\n<p><code>python test.py -p 8080</code> or <code>python test.py --port 8080</code>.</p>\n<p>Then the page will be available at <code>localhost:8080</code>.</p>\n<p>The idea is that each View object python-side is linked to a corresponding View object on the javascript side. Every time the python View is changed, the javascript View reflects the change. Note that javascript Views are created on the first \"flush,\" but that <code>repr(view)</code> has been overloaded to flush.</p>\n<pre><code>a = View(1)\na\n</code></pre>\n<p>The value of <code>a</code> should print to the console, while a pane displaying that same value should appear in the browser. This pane can be dragged around, resized, and double clicking it will make it dissapear.</p>\n<p>You can even access javascript methods in python. The idea is that when you try to call a method of python View <code>a</code>, first the object checks its own namespace, then it checks the namespace of its \"inner class,\" but then it checks the namespace of the corresponding javascript class in the browser. For example, the javascript View has a <code>destroy</code> method, which kills the visualization (although it will return upon another flush). It can be easily called via python as if it were a python method: <code>a.destroy()</code>.</p>\n<p>Symmetrically, we can call python methods from javascript. To see this, first we note that <code>a.js()</code> will return a useful string of the form,</p>\n<p><code>workspace.views['b5e9f8c4-c43e-41df-9c64-fd195f1da7b2']</code>.</p>\n<p>from which it becomes clear that each python/js View is assigned a unique id. In the javascript console, we can then use:</p>\n<p><code>await workspace.views['b5e9f8c4-c43e-41df-9c64-fd195f1da7b2'].call('js')()</code></p>\n<p>In the python console, this prints the same value as before. The results of the method (nothing in this case) are returned as a javascript Promise. We also observe that while python Views are managed by the View class itself, the javascript Views are managed by a \"Workspace,\" available globally as <code>workspace</code>.)</p>\n<p>A view can be defined in the following way (in python):</p>\n<pre><code>View(obj,\\\n\t\tto_client=lambda view: &lt;view -&gt; viz_data&gt;,\\\n\t\tfrom_client=lambda viz_data: &lt;viz_data -&gt; inner obj&gt;,\\\n\t\tjs_class=\"&lt;javascript class name&gt;\",\\\n\t\trequires_flush=[\"these\", \"methods\", \"will\", \"trigger\", \"an\", \"update\"])\n</code></pre>\n<p>The default View has a simple <code>to_client</code> function: <code>lambda view: str(view)</code> and its <code>from_client</code> function does nothing. Its <code>js_class</code> is \"View,\" and nothing special requires flushing.</p>\n<p>Currently, the only other View which has been implemented is Sphere. It's defined in the following way.</p>\n<pre><code>def Sphere(obj):\n\treturn View(obj,\\\n\t\t \t\tto_client=lambda view:\\\n\t\t\t\t \t{\"stars\": spin_XYZ(view),\\\n\t\t\t\t \t \"phase\": [1,0]},\\\n\t\t \t\tfrom_client=lambda viz_data: XYZ_spin(viz_data[\"stars\"]),\\\n\t\t \t\tjs_class=\"Sphere\")\n</code></pre>\n<p>A Sphere represents the state of a \"quantum spin\" as a constellation of points on a 2-sphere via an insight often attributed to Ettore Majorana. Note that we use the automatically included <code>qutip</code> library, available as <code>qt</code>, for our quantum calculations, and we assume knowledge of its use.</p>\n<p>A quantum spin can be represented as finite dimensional complex vector. Eliding many details, if the components of a spin state in the |j, m&gt; representation are interpreted as the coefficients of a polynomial, then the roots of that polynomial when stereographically projected from the complex plane to the 2-sphere along the axis of quantization correspond to a constellation of points. Each point or \"star\" contributes an angular momentum of 1/2 in its direction so that the total angular momentum axis is just the sum of the stars.</p>\n<p>The provided method <code>spin_XYZ</code> takes a <code>qt.Qobj</code> representing a spin state and returns a list of the xyz coordinates of its stars. Conversely, the method <code>XYZ_spin</code> takes a list of xyz coordinates and returns its corresponding complex vector. We leave aside for now the \"phase,\" which, to put it briefly, has to do with the fact that the roots of polynomials are only defined up to multiplcation by a complex scalar.</p>\n<p>To create a Sphere for a random spin state, we can use:</p>\n<pre><code>a = Sphere(qt.rand_ket(3))\na\n</code></pre>\n<p>Updating <code>a</code> in python, of course, updates the constellation. But because the relationship is bidirectional, if we drag the stars around in the visual representation, <code>a</code> automatically reflects the change in python.</p>\n<p>We can easily see this by using one View to \"listen\" to another View.</p>\n<pre><code>a = Sphere(qt.rand_ket(3))\nb = View(\"\")\nb.listen(a, lambda o: str(o))\n</code></pre>\n<p>Here, <code>View(\"\")</code> is, of course, a wrapper around a string object. The effect is that every time <code>a</code> changes, <code>b</code> reflects the change: specifically, the inner object of <code>b</code> is set to the return value of the provided lambda to which <code>a</code> is passed as <code>o</code>.</p>\n<p>In the browser, there should appear a sphere for <code>a</code> and a pane for <code>b</code>. It's clear that dragging the stars around the sphere updates the complex vector in real time, which is reflected in <code>b</code>. (If you're done listening, use <code>b.unlisten(a)</code>.)</p>\n<p>Next, consider:</p>\n<pre><code>dt = 0.008\nu = (-1j*dt*qt.rand_herm(3)).expm()\na.loop_for(5000, lambda o: u*o)\n</code></pre>\n<p>The first line generates a random unitary matrix representing quantum time evolution over a short interval dt. We can apply this unitary to our quantum state with <code>u*a</code>. It often happens we want to do this over and over again, animating the constellation. But for efficiency, we don't really want to update the visualization after <em>every</em> iteration, and in fact, doing so often overloads the browser. So we have <code>loop_for</code>. It takes optional parameters <code>rate</code> and <code>sleep</code>: a rate of 1/2 flushes updates to the browser after every other iteration; a rate of 1/3 flushes updates every three iterations, etc; and we can also sleep for a certain amount of time after each iteration. Generally, the default values are fine.</p>\n<p>Finally:</p>\n<p>Let's create a four dimensional pure state. We can represent it with a constellation of three stars; but it also corresponds to a (possibly entangled) state of two spin 1/2 particles (aka qubits), each with a partial state. Note that we can name a View, which will override its string representation.</p>\n<pre><code>a = Sphere(qt.rand_ket(4), name=\"a\")\na.dims = [[2,2], [1,1]]\n</code></pre>\n<p>We can use the <code>partials</code> function to get Views for the states of the subsystems <code>b</code> and <code>c</code>:</p>\n<pre><code>b, c = partials(a)\nb.name = \"b\"\nc.name = \"c\"\n</code></pre>\n<p><code>b</code> and <code>c</code> are Views on 2x2 density matrices. They each listen to the pure state <code>a</code> so that if <code>a</code> is modified, <code>b</code> and <code>c</code> are refreshed as well (using the ptrace operator).</p>\n<p>But suppose we evolve 'b' with some linear operator; we want this transformation to be upgraded to an operator that acts on the pure state that respects the tensor product structure (in other words, with identities for the other subspaces), so that <code>a</code> can listen to <code>b</code> and <code>c</code> in turn.</p>\n<p>We want</p>\n<p><code>(b -&gt; u.dag()*b*u) -&gt; (a -&gt; U*a)</code>, where U is the tensor product of u and the 2x2 identity.</p>\n<p>This is automatically provided. For example, consider a projector:</p>\n<pre><code>p = View(qt.basis(2,0)*qt.basis(2,0).dag(), name=\"p\")\nb &lt;&lt; (p*b*p)\n</code></pre>\n<p>gives the same result as</p>\n<pre><code>P = View(qt.tensor(qt.basis(2,0)*qt.basis(2,0).dag(), qt.identity(2)), name=\"P\")\na &lt;&lt; (P*a)\n</code></pre>\n<p>Here's how it works behind the scenes. If we have a product of operators with Views wrapped around them, e.g. <code>p*a*p</code>, this actually returns an OperatorExpression object, which has kept track of the operators along the way without actually multiplying them. If you check its string representation, it should be: ['p', 'a', 'p']. The OperatorExpression simulates the attributes of normal Qobj, and its numerical form can be retrieved with the <code>reduced()</code> method.</p>\n<p>When an OperatorExpression is set to a View which is contained in that expression, something special happens. For example, the <code>partials</code> function adds the pure state <code>a</code> as a listener to each of the partials <code>b</code> and <code>c</code>, passing an optional parameter expression_type=OperatorExpression.</p>\n<pre><code>listen(to_whom, with_func, expression_type=None)\n</code></pre>\n<p>When an OperatorExpression is set to a View that appears within it, and that View has a listener with expression_type=OperatorExpression, then the assignment operation is handled by the OperatorExpression class, including flushing updates to the listeners. In this case, it takes the operators on the right hand side of the View in the expression, multiplies them, tensors it with appropriate identities so that it can act on the pure state, performs the transformation, and finally flushes the changes to the pure state, telling it to exclude this subsystem in its own flushes, so as to avoid infinite regress. So far this is the only type of Expression which has been implemented, but one can easily add more by registering them with the View class:</p>\n<p><code>View.register_expression_type(ExpressionClass)</code></p>\n<p>You can confirm that A() and B() are more or less inverses.</p>\n<pre><code>h = qt.rand_herm(2)\nu = View((-1j*h*dt).expm(), name=\"u\")\nU = View(qt.tensor((-1j*dt*h/8).expm(), qt.identity(2)), name=\"U\")\n\ndef A():\n\ta.loop_for(200, lambda v: U*a)\n\ndef B():\n\tb.loop_for(200, lambda v: u*v*u.dag())\n\nA()\nB()\n</code></pre>\n<p>Note, however, the factor of 1/8 in the definition of U. Future versions will obviate the need for this by keeping track of the underlying phase and hermitian matix that are exponentiated to give a certain unitary.</p>\n<p>And that's all for now.</p>\n\n          </div>"}, "last_serial": 6694390, "releases": {"0.0.7": [{"comment_text": "", "digests": {"md5": "ae60478292236158254e57d64f2ef424", "sha256": "d707ece58811ecd45e2024edbbb11c735a91cabb40092c9b0ec7a0073334bc7c"}, "downloads": -1, "filename": "spheres-0.0.7-py3.8.egg", "has_sig": false, "md5_digest": "ae60478292236158254e57d64f2ef424", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.8", "size": 3809366, "upload_time": "2020-02-22T22:09:38", "upload_time_iso_8601": "2020-02-22T22:09:38.804251Z", "url": "https://files.pythonhosted.org/packages/f0/c7/3a63331f3cd615a8e38a3440b53dd51e07763c00a938e58e949f1067c557/spheres-0.0.7-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c06b70f00dd3908ef6c621d35dfaef6f", "sha256": "f4bcf49e5956e3295978ce8275ab9b6ebbcbd6a83cc1e535150f8d9fc117caeb"}, "downloads": -1, "filename": "spheres-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c06b70f00dd3908ef6c621d35dfaef6f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 3813207, "upload_time": "2020-02-22T22:09:35", "upload_time_iso_8601": "2020-02-22T22:09:35.779984Z", "url": "https://files.pythonhosted.org/packages/13/ce/689fff0d884cdab2fce3689634b89adaa4a0141542db379e8d791b5ce8b6/spheres-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "832134aa5c59f7bf8d0f9726944ff980", "sha256": "354600162e45a333271ccb277902754e83e9b7dcb13fffc9c1bb4f1103cb939e"}, "downloads": -1, "filename": "spheres-0.0.7.tar.gz", "has_sig": false, "md5_digest": "832134aa5c59f7bf8d0f9726944ff980", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 3782247, "upload_time": "2020-02-22T22:09:41", "upload_time_iso_8601": "2020-02-22T22:09:41.144535Z", "url": "https://files.pythonhosted.org/packages/5e/61/092ea9c2c1b4f1f15b9223717b2badf2d0bf801ad9f290f27b77edf50fda/spheres-0.0.7.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "e6426c12da7d5712889c3664fcc26cb4", "sha256": "6f04d2a7094dcd2e843da1caffbe7838ad2aef0080b2505cf85cb7c643d0d462"}, "downloads": -1, "filename": "spheres-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "e6426c12da7d5712889c3664fcc26cb4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3816610, "upload_time": "2020-02-23T00:31:59", "upload_time_iso_8601": "2020-02-23T00:31:59.031008Z", "url": "https://files.pythonhosted.org/packages/de/a7/d3483df4ea26469a822df78acd940ac4240a1acc370d56055eaa7db28572/spheres-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6d0529b46b45707f2bd0a71fe9b7ad0", "sha256": "0e9b32c72776f7772d5b5068ec810adc1d4b221125d9a324d7634a959d91ae02"}, "downloads": -1, "filename": "spheres-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b6d0529b46b45707f2bd0a71fe9b7ad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3787588, "upload_time": "2020-02-23T00:32:03", "upload_time_iso_8601": "2020-02-23T00:32:03.087923Z", "url": "https://files.pythonhosted.org/packages/d3/ce/015b0b4cc16d33bfc397139ef53e369e4c94495d23a40210760a3c052db1/spheres-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "1c16dd2f9dc2cbf750c31d19c2fd33fe", "sha256": "14238506991581b5bcc00b2ac03965fdd5b4f04da49a9a16df47e1f95cd3d0f9"}, "downloads": -1, "filename": "spheres-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1c16dd2f9dc2cbf750c31d19c2fd33fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3816614, "upload_time": "2020-02-23T00:37:03", "upload_time_iso_8601": "2020-02-23T00:37:03.013402Z", "url": "https://files.pythonhosted.org/packages/be/84/dc90a1e58c17dc9eb454fad6ce0703b4638f34f8ccc6e857009f293f4928/spheres-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7cb13014b9ec498df576fb808440994", "sha256": "bce4db2c136b7ae36a0231be62619bbee3b0b742a92c880d61a466746926a5a3"}, "downloads": -1, "filename": "spheres-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c7cb13014b9ec498df576fb808440994", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3787580, "upload_time": "2020-02-23T00:37:04", "upload_time_iso_8601": "2020-02-23T00:37:04.819533Z", "url": "https://files.pythonhosted.org/packages/35/db/1d90cc37385133fd3f43abd70f662fc9f9f366a5bc2e778359fd7e6b594f/spheres-0.1.0.tar.gz", "yanked": false}], "0.1.0.3": [{"comment_text": "", "digests": {"md5": "6d8247aae1a10d52066cbef3607c6281", "sha256": "9152138e18328a7f0605a35efa692d3f429f41ee0b8873c3da3b10b24e0d7e00"}, "downloads": -1, "filename": "spheres-0.1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6d8247aae1a10d52066cbef3607c6281", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3816645, "upload_time": "2020-02-23T01:21:35", "upload_time_iso_8601": "2020-02-23T01:21:35.115788Z", "url": "https://files.pythonhosted.org/packages/8c/04/8006afd5ffc56ee3715efc7f35dcc36a16ed09be8c9fd0e2a8f7ffebd25d/spheres-0.1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ef633841bd8cf3d97601ea4e2af9322a", "sha256": "d9c62e07ffc519b381be76c00545b254e9f8dd0d1e21c279543388e1df6f8b5f"}, "downloads": -1, "filename": "spheres-0.1.0.3.tar.gz", "has_sig": false, "md5_digest": "ef633841bd8cf3d97601ea4e2af9322a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787690, "upload_time": "2020-02-23T01:21:37", "upload_time_iso_8601": "2020-02-23T01:21:37.220710Z", "url": "https://files.pythonhosted.org/packages/b7/a0/d7f3a1e7a842227bb98ac0058f28723772af879d9088a2767e4a0cb2af8e/spheres-0.1.0.3.tar.gz", "yanked": false}], "0.1.0.4": [{"comment_text": "", "digests": {"md5": "4d11188489fa9371f0df3040abc836b1", "sha256": "8e820114bdb69a6bf5cd674a1a27c439567c0570c9f53403f3056f23cc9d635e"}, "downloads": -1, "filename": "spheres-0.1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4d11188489fa9371f0df3040abc836b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3816646, "upload_time": "2020-02-23T01:30:32", "upload_time_iso_8601": "2020-02-23T01:30:32.545548Z", "url": "https://files.pythonhosted.org/packages/de/8c/5c13baacc62df0605d5b89169622b4b9c724693f963570e6bad88a562e37/spheres-0.1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68951809525dab0e167613bcee708352", "sha256": "b344720b8d1e1d38e10e7eaa67dc25d5d689f84a692b4813f2456f49ac08dfc1"}, "downloads": -1, "filename": "spheres-0.1.0.4.tar.gz", "has_sig": false, "md5_digest": "68951809525dab0e167613bcee708352", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787682, "upload_time": "2020-02-23T01:30:34", "upload_time_iso_8601": "2020-02-23T01:30:34.729274Z", "url": "https://files.pythonhosted.org/packages/62/f3/3875d1c15bf41ecf63b03d3201cae764ef873bf0333b03ae6d6022e80d1d/spheres-0.1.0.4.tar.gz", "yanked": false}], "0.1.0.5": [{"comment_text": "", "digests": {"md5": "f4de77796a44bc81aa67791b5b96e80f", "sha256": "e225d92bce71738c0c07c9248702c23a531794ea629418c37bb4a9519403f680"}, "downloads": -1, "filename": "spheres-0.1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f4de77796a44bc81aa67791b5b96e80f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3816650, "upload_time": "2020-02-23T01:34:46", "upload_time_iso_8601": "2020-02-23T01:34:46.378558Z", "url": "https://files.pythonhosted.org/packages/aa/bf/e502d7926d84e5c6d8b5540296ed9ff1e7377fa7a813fcfc5294dfca9c8b/spheres-0.1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb6aa72b7a2414a6a6b9e4debb280d00", "sha256": "f9c0cc51e181a768fbfac330050951293b93ae0dc742331910df0394c06e07f1"}, "downloads": -1, "filename": "spheres-0.1.0.5.tar.gz", "has_sig": false, "md5_digest": "cb6aa72b7a2414a6a6b9e4debb280d00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787764, "upload_time": "2020-02-23T01:34:48", "upload_time_iso_8601": "2020-02-23T01:34:48.357175Z", "url": "https://files.pythonhosted.org/packages/bc/e7/62264f7efc3954ea62707c11090d681942aef100751423affb21f174a54d/spheres-0.1.0.5.tar.gz", "yanked": false}], "0.1.0.9": [{"comment_text": "", "digests": {"md5": "b0ac856a1019320c8c62fb96071a114e", "sha256": "b0d6743ade50ec9464153f2e7130cd0cc26f9de7253c02c2873f3bc2046d46c9"}, "downloads": -1, "filename": "spheres-0.1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b0ac856a1019320c8c62fb96071a114e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3816650, "upload_time": "2020-02-23T01:51:03", "upload_time_iso_8601": "2020-02-23T01:51:03.270159Z", "url": "https://files.pythonhosted.org/packages/36/25/5e3f838377dc22788e85b04d7a814f3d6542e2e0ee28d5c6d2d6f5c1b54d/spheres-0.1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a768ad95c64113a93943b5df27b65869", "sha256": "b92c4feb76f5e87864a28157d5e469649381e8ae51a0255ffe811944b75f2cba"}, "downloads": -1, "filename": "spheres-0.1.0.9.tar.gz", "has_sig": false, "md5_digest": "a768ad95c64113a93943b5df27b65869", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787661, "upload_time": "2020-02-23T01:51:05", "upload_time_iso_8601": "2020-02-23T01:51:05.814848Z", "url": "https://files.pythonhosted.org/packages/5a/ed/89f36fb59407d7973b5482cff7ca562290ae3fa4d1510b59a82b9d357364/spheres-0.1.0.9.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3211388e92da68f23ca0d03211363814", "sha256": "f5a933be044fa45a59bf7a1e36f8ab299454ba939f0e1be6432bc1c638a000b1"}, "downloads": -1, "filename": "spheres-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3211388e92da68f23ca0d03211363814", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3815535, "upload_time": "2020-02-23T02:18:32", "upload_time_iso_8601": "2020-02-23T02:18:32.104852Z", "url": "https://files.pythonhosted.org/packages/ba/23/11b099115bc20fef704fafd6a0090550d6960009bf9c324c88707c9fe2fd/spheres-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b858cb23e2eec111c596c6fa702f91ed", "sha256": "ebca47e9330333bb343946b9e1fcded9520bbcca2095ccad647874dffdaedbe8"}, "downloads": -1, "filename": "spheres-0.2.tar.gz", "has_sig": false, "md5_digest": "b858cb23e2eec111c596c6fa702f91ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787687, "upload_time": "2020-02-23T02:18:34", "upload_time_iso_8601": "2020-02-23T02:18:34.532596Z", "url": "https://files.pythonhosted.org/packages/db/bc/af84bf81da3c7fe7a5e142359ba8398482474c22c43aa4ce7b722eba6f9b/spheres-0.2.tar.gz", "yanked": false}], "0.2.0.1": [{"comment_text": "", "digests": {"md5": "7d7b9fa95413195daeeec88499eb0798", "sha256": "2593ce2234a073de769a42155523a465e8dc3fa9f155dfc4cb87cc1d5f4d1e9f"}, "downloads": -1, "filename": "spheres-0.2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7d7b9fa95413195daeeec88499eb0798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3815522, "upload_time": "2020-02-23T02:40:32", "upload_time_iso_8601": "2020-02-23T02:40:32.943584Z", "url": "https://files.pythonhosted.org/packages/1f/ba/b64a2813e346e362e3d19f84aaaaf69960b8ba7b33e83f4dd11b45a70c71/spheres-0.2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "332eddfd7fe3e33564f52111b5e697e6", "sha256": "3fd93c96f5567f0be78c03b4ef2b4d51dbff78095f0e0c6e294d67bb3fc0f3e7"}, "downloads": -1, "filename": "spheres-0.2.0.1.tar.gz", "has_sig": false, "md5_digest": "332eddfd7fe3e33564f52111b5e697e6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3787706, "upload_time": "2020-02-23T02:40:35", "upload_time_iso_8601": "2020-02-23T02:40:35.182069Z", "url": "https://files.pythonhosted.org/packages/cd/e0/4056ae540f74d58c61f00d0d38e48618d51af647a0cc84adc38dc06777f8/spheres-0.2.0.1.tar.gz", "yanked": false}], "0.2.0.2": [{"comment_text": "", "digests": {"md5": "b0adc72b5be642b109fb718682bfac5e", "sha256": "79b1e10bc2403c81fe7edbbe8453bde0d7011dd8a8d5187a3d047d466ccb1ebd"}, "downloads": -1, "filename": "spheres-0.2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b0adc72b5be642b109fb718682bfac5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3819229, "upload_time": "2020-02-25T05:04:59", "upload_time_iso_8601": "2020-02-25T05:04:59.759540Z", "url": "https://files.pythonhosted.org/packages/5d/77/b19d73690e78430b910d1634b05597036fe24bb4a69f584f0b5c7c2bbe27/spheres-0.2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dadd1f539b17b6d9113dbe901a262433", "sha256": "e03490d876ef54ede097818e062b5dda43da2bc362cbe217ce0e5443ee4b7fb8"}, "downloads": -1, "filename": "spheres-0.2.0.2.tar.gz", "has_sig": false, "md5_digest": "dadd1f539b17b6d9113dbe901a262433", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3793462, "upload_time": "2020-02-25T05:05:02", "upload_time_iso_8601": "2020-02-25T05:05:02.216951Z", "url": "https://files.pythonhosted.org/packages/62/e2/0c7f9a0870a5d4475a98465f00b8d4f73d034a65e294dc7ddf31fea06038/spheres-0.2.0.2.tar.gz", "yanked": false}], "0.2.0.3": [{"comment_text": "", "digests": {"md5": "6aef09dbf6a38d034f5eaac7f160257f", "sha256": "55675d503f4971250039268818683b5f71e4b30b0bcacb75e9e0ce0529f8b978"}, "downloads": -1, "filename": "spheres-0.2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6aef09dbf6a38d034f5eaac7f160257f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3819224, "upload_time": "2020-02-25T05:08:24", "upload_time_iso_8601": "2020-02-25T05:08:24.781848Z", "url": "https://files.pythonhosted.org/packages/4c/11/9bf7e9b3ef76265db649735f8e9f14d78f777b4626acc2432919ef573365/spheres-0.2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7bf1cde64e64799b5304c02a12c7db26", "sha256": "a659edaba51305b52899ec5e434f99f34f11106b8e6a09ae7ece421eb6801a72"}, "downloads": -1, "filename": "spheres-0.2.0.3.tar.gz", "has_sig": false, "md5_digest": "7bf1cde64e64799b5304c02a12c7db26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3793449, "upload_time": "2020-02-25T05:08:27", "upload_time_iso_8601": "2020-02-25T05:08:27.355227Z", "url": "https://files.pythonhosted.org/packages/55/35/ab646974c56221c871c4947c316c9035839e919663f0abadb828b122551d/spheres-0.2.0.3.tar.gz", "yanked": false}], "0.2.0.4": [{"comment_text": "", "digests": {"md5": "feb9c40faed00a06d607ec6f3096a089", "sha256": "c4818b31efd9dbe6694922c12520a31a6d510c41a966f9c5c5a36235c801bddc"}, "downloads": -1, "filename": "spheres-0.2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "feb9c40faed00a06d607ec6f3096a089", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3819224, "upload_time": "2020-02-25T05:28:20", "upload_time_iso_8601": "2020-02-25T05:28:20.342325Z", "url": "https://files.pythonhosted.org/packages/97/a1/335ae08deffee83268adfdd1639528f0096aaf908564f0a3a16b69e9bafe/spheres-0.2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e944bf768b21585ceec013b43e91dd0", "sha256": "a419bab7e225ed862abed81918941b9d247badf4d065befb0b334f332d3a8371"}, "downloads": -1, "filename": "spheres-0.2.0.4.tar.gz", "has_sig": false, "md5_digest": "3e944bf768b21585ceec013b43e91dd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3793458, "upload_time": "2020-02-25T05:28:23", "upload_time_iso_8601": "2020-02-25T05:28:23.026089Z", "url": "https://files.pythonhosted.org/packages/fd/36/fb474796054b2ab7acc2263b40f2f985334c7702ad156a029c4ca793cd32/spheres-0.2.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "feb9c40faed00a06d607ec6f3096a089", "sha256": "c4818b31efd9dbe6694922c12520a31a6d510c41a966f9c5c5a36235c801bddc"}, "downloads": -1, "filename": "spheres-0.2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "feb9c40faed00a06d607ec6f3096a089", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3819224, "upload_time": "2020-02-25T05:28:20", "upload_time_iso_8601": "2020-02-25T05:28:20.342325Z", "url": "https://files.pythonhosted.org/packages/97/a1/335ae08deffee83268adfdd1639528f0096aaf908564f0a3a16b69e9bafe/spheres-0.2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e944bf768b21585ceec013b43e91dd0", "sha256": "a419bab7e225ed862abed81918941b9d247badf4d065befb0b334f332d3a8371"}, "downloads": -1, "filename": "spheres-0.2.0.4.tar.gz", "has_sig": false, "md5_digest": "3e944bf768b21585ceec013b43e91dd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3793458, "upload_time": "2020-02-25T05:28:23", "upload_time_iso_8601": "2020-02-25T05:28:23.026089Z", "url": "https://files.pythonhosted.org/packages/fd/36/fb474796054b2ab7acc2263b40f2f985334c7702ad156a029c4ca793cd32/spheres-0.2.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:26 2020"}