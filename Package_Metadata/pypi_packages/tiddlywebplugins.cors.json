{"info": {"author": "Chris Dent", "author_email": "cdent@peermore.com", "bugtrack_url": null, "classifiers": [], "description": "A plugin for TiddlyWeb to support CORS pre-flight checks.\n\nThis is an experiment, with limited functionality. As test\ncases increase, functionality will increase.\n\nTo use add 'tiddlywebplugins.cors' to 'system_plugins' in \ntiddlywebconfig.py.\n\nThere are a few optional config settings:\n\nIf 'cors.match_origin' is True, then the value of the Origin\nheader will be the value of the Access-Control-Allow-Origin header,\non simple requests. On non-simple request, it always matches. If False\nthe value is '*' (on simple requests).\n\nIf 'cors.allow_creds' is True, then the\nAccess-Control-Allow-Credentials header will be sent with a value\nof 'true', otherwise it will not be sent.\n\nIf 'cors.exposed_headers' is set, its should be a list of strings\nrepresenting header names which are appended to the default\nAccess-Control-Expose-Headers: ETag. This same list is used to set\nthe default of Access-Control-Allow-Headers.\n\nIf 'cors.enable_non_simple' is True, preflight OPTIONS requests are\nhandled. This defaults to False to avoid accidental exposure.\n\nFor authenticated cross-domain PUTs of resources the following config\nappears to be required:\n\n    'cors.enable_non_simple': True,\n    'cors.allow_creds': True,\n    'cors.match_origin': True,\n\nThe match_origin setting is required for the OPTIONS preflight requests\nto be handled effectively.\n\nToDo:\n\n* Blacklist/Whitelist processing of Access-Control-Request-Headers.\n* Auditing with someone else to confirm that this stuff is \"correct\".\n* Refactoring of the two middlewares. There's a fair bit of overlap.\n  It could become just one that operates on both sides of the internal\n  application, but I find that can be confusing.\n\nCopyright 2012, Chris Dent <cdent@peermore.com>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/tiddlywebplugins.cors", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "tiddlywebplugins.cors", "package_url": "https://pypi.org/project/tiddlywebplugins.cors/", "platform": "Posix; MacOS X; Windows", "project_url": "https://pypi.org/project/tiddlywebplugins.cors/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/tiddlywebplugins.cors"}, "release_url": "https://pypi.org/project/tiddlywebplugins.cors/0.3/", "requires_dist": null, "requires_python": null, "summary": "CORS preflight support for TiddlyWeb", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A plugin for TiddlyWeb to support CORS pre-flight checks.</p>\n<p>This is an experiment, with limited functionality. As test\ncases increase, functionality will increase.</p>\n<p>To use add \u2018tiddlywebplugins.cors\u2019 to \u2018system_plugins\u2019 in\ntiddlywebconfig.py.</p>\n<p>There are a few optional config settings:</p>\n<p>If \u2018cors.match_origin\u2019 is True, then the value of the Origin\nheader will be the value of the Access-Control-Allow-Origin header,\non simple requests. On non-simple request, it always matches. If False\nthe value is \u2018*\u2019 (on simple requests).</p>\n<p>If \u2018cors.allow_creds\u2019 is True, then the\nAccess-Control-Allow-Credentials header will be sent with a value\nof \u2018true\u2019, otherwise it will not be sent.</p>\n<p>If \u2018cors.exposed_headers\u2019 is set, its should be a list of strings\nrepresenting header names which are appended to the default\nAccess-Control-Expose-Headers: ETag. This same list is used to set\nthe default of Access-Control-Allow-Headers.</p>\n<p>If \u2018cors.enable_non_simple\u2019 is True, preflight OPTIONS requests are\nhandled. This defaults to False to avoid accidental exposure.</p>\n<p>For authenticated cross-domain PUTs of resources the following config\nappears to be required:</p>\n<blockquote>\n\u2018cors.enable_non_simple\u2019: True,\n\u2018cors.allow_creds\u2019: True,\n\u2018cors.match_origin\u2019: True,</blockquote>\n<p>The match_origin setting is required for the OPTIONS preflight requests\nto be handled effectively.</p>\n<p>ToDo:</p>\n<ul>\n<li>Blacklist/Whitelist processing of Access-Control-Request-Headers.</li>\n<li>Auditing with someone else to confirm that this stuff is \u201ccorrect\u201d.</li>\n<li>Refactoring of the two middlewares. There\u2019s a fair bit of overlap.\nIt could become just one that operates on both sides of the internal\napplication, but I find that can be confusing.</li>\n</ul>\n<p>Copyright 2012, Chris Dent &lt;<a href=\"mailto:cdent%40peermore.com\">cdent<span>@</span>peermore<span>.</span>com</a>&gt;</p>\n\n          </div>"}, "last_serial": 1042807, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "2bd5693798ff1b814028090fb9bb7543", "sha256": "674856c7ca83676e8660167fa2ecd568cb52082311b90cabcd39544541afb497"}, "downloads": -1, "filename": "tiddlywebplugins.cors-0.2.tar.gz", "has_sig": false, "md5_digest": "2bd5693798ff1b814028090fb9bb7543", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7734, "upload_time": "2012-06-20T19:02:52", "upload_time_iso_8601": "2012-06-20T19:02:52.527993Z", "url": "https://files.pythonhosted.org/packages/cb/39/ab5e62487eaa30aa675beffa29c57ec5f58a1a3d59f4938e87fa25a459b5/tiddlywebplugins.cors-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "79d213dee3fe6556665ea4dc88d8e67f", "sha256": "2b639ef8c3b148778ff98a5c599d828bac14442bec39ccb68fbf1cc0d0649cca"}, "downloads": -1, "filename": "tiddlywebplugins.cors-0.3.tar.gz", "has_sig": false, "md5_digest": "79d213dee3fe6556665ea4dc88d8e67f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9375, "upload_time": "2014-03-26T23:56:12", "upload_time_iso_8601": "2014-03-26T23:56:12.158981Z", "url": "https://files.pythonhosted.org/packages/ae/35/9394bd6603b5a1ffa4e9b1eed317a464714056bd741335e6e0e75d3c58c1/tiddlywebplugins.cors-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79d213dee3fe6556665ea4dc88d8e67f", "sha256": "2b639ef8c3b148778ff98a5c599d828bac14442bec39ccb68fbf1cc0d0649cca"}, "downloads": -1, "filename": "tiddlywebplugins.cors-0.3.tar.gz", "has_sig": false, "md5_digest": "79d213dee3fe6556665ea4dc88d8e67f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9375, "upload_time": "2014-03-26T23:56:12", "upload_time_iso_8601": "2014-03-26T23:56:12.158981Z", "url": "https://files.pythonhosted.org/packages/ae/35/9394bd6603b5a1ffa4e9b1eed317a464714056bd741335e6e0e75d3c58c1/tiddlywebplugins.cors-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:28 2020"}