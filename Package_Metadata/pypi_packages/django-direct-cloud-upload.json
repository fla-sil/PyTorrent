{"info": {"author": "Koen De Wit", "author_email": "koendewit@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP"], "description": "# django-direct-cloud-upload (DDCU)\nWidget for uploading files from the client directly to a cloud storage bucket. Currently only supports [Google Cloud Storage](https://cloud.google.com/storage/).\n\nWorks with Internet Explorer 11, Google Chrome, Mozilla Firefox and Apple Safari.\n\n## Installation and setup\n\nInstall DDCU using pip :\n\n    pip install django-direct-cloud-upload\n\nMake sure that `'django.contrib.staticfiles'` is [set up properly](https://docs.djangoproject.com/en/stable/howto/static-files/) and add `'direct_cloud_upload'` to your `INSTALLED_APPS` setting :\n\n    INSTALLED_APPS = [\n        # ...\n        'django.contrib.staticfiles',\n        # ...\n        'direct_cloud_upload',\n    ]\n\n    STATIC_URL = '/static/'\n\nDDCU provides a view that will generate a 'signed URL' for uploading a file. To enable this view, include DDCU's `urlpatterns` to your project's URLconf :\n\n    import direct_cloud_upload\n\n    urlpatterns = [\n        # ...\n        path('direct_cloud_upload/', include(direct_cloud_upload.urlpatterns)),\n    ]\n\n_Note_: It is not mandatory to choose `direct_cloud_upload/` as the path, you are free to set any path.\n\n## Configuring the GCS bucket\n\nIf you don't have a GCS bucket yet, [create one](https://cloud.google.com/storage/docs/creating-buckets) first.\n\n[Configure CORS](https://cloud.google.com/storage/docs/configuring-cors) on your bucket to allow uploads from your website. Configuring CORS for GCS buckets is done by creating a JSON-file describing the CORS policy and uploading the JSON file with `gsutil`.\n\nExample JSON file containing a CORS policy:\n\n    [\n        {\n            \"origin\": [\n                \"https://example-app.com\",\n                \"https://www.example-app.com\",\n                \"http://localhost:8000\"\n            ],\n            \"responseHeader\": [\"Content-Type\"],\n            \"method\": [\"GET\", \"HEAD\", \"PUT\"],\n            \"maxAgeSeconds\": 3600\n        }\n    ]\n\nUpload the JSON file with the `gsutil cors set` command:\n\n    gsutil cors set cors-json-file.json gs://example-bucket\n\n## Usage\n\nCreate a `Bucket` instance and register it with DDCU :\n\n    import google.cloud.storage\n    import direct_cloud_upload\n\n    client = google.cloud.storage.Client()\n    gcs_bucket = client.get_bucket('bucket-id-here')\n    ddcu_bucket_identifier = direct_cloud_upload.register_gcs_bucket(gcs_bucket)\n\nCreating the `Client` can be a bit more complicated if you need to authenticate, see the [GCS Python client documentation](https://googleapis.dev/python/storage/latest/client.html).\n\nNow you can use the `CloudFileWidget` for any `django.forms.CharField` in a Form :\n\n    from direct_cloud_upload import CloudFileWidget\n\n    class EbookForm(forms.ModelForm):\n        class Meta:\n            model = Ebook\n            fields = ['title', 'pdf_file']\n            widgets = {\n                'pdf_file': CloudFileWidget(\n                    bucket_identifier = ddcu_bucket_identifier,\n                    path_prefix = \"ebook_pdf/\",\n                )\n            }\n\n`CloudFileWidget` has one required parameter:\n\n* `bucket_identifier` (string): identifier retrieved when registering the bucket with DDCU.\n\n`CloudFileWidget` has some optional parameters:\n\n* `path_prefix` (string): Will be prepended automatically to the path of each file. This is useful for collecting all files uploaded via this widget into one directory.\n* `include_timestamp` (bool) : Determines if a timestamp will be added to the path. Defaults to `True`.\n* `submit_timeout` (int) : Timeout (in seconds) for uploading the form. Defaults to 129600 (36 hours).\n* `clearable` (bool) : Add a \"Delete file\" button to the widget. Defaults to `True`.\n\nWhen the form is being submitted, the field will contain the path in the bucket where the file has been uploaded to.\n\n## Including static JS and CSS files\n\nDDCU needs a Javascript and CSS file to function. If you use the widget in a django-admin site, you can use the first method to include these files. For all other sites, you should read the \"For generic forms\" section below.\n\n### For admin sites\n\nLet your Admin classes inherit from `DdcuAdminMixin`, which will instruct the admin interface to include the necessary files:\n\n    from direct_cloud_upload import DdcuAdminMixin\n\n    class EbookAdmin(admin.ModelAdmin, DdcuAdminMixin):\n        form = EbookForm\n\n### For generic forms\n\nEvery page containing a `CloudFileWidget` should include jQuery 1.9 (or newer) and the JS and CSS file in the `head` section:\n\n    {% load static %}\n\n    <head>\n        <link rel=\"stylesheet\" href=\"{% static \"direct_cloud_upload/cloud_file_widget.css\" %}\"></script>\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\n        <script src=\"{% static \"direct_cloud_upload/ddcu_upload.js\" %}\"></script>\n    </head>\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/koendewit/django-direct-cloud-upload", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "django-direct-cloud-upload", "package_url": "https://pypi.org/project/django-direct-cloud-upload/", "platform": "", "project_url": "https://pypi.org/project/django-direct-cloud-upload/", "project_urls": {"Homepage": "https://github.com/koendewit/django-direct-cloud-upload"}, "release_url": "https://pypi.org/project/django-direct-cloud-upload/0.2.3/", "requires_dist": ["Django (>=2.2)", "google-cloud-storage (>=1.25)"], "requires_python": ">=3.5", "summary": "Widget for uploading files from the client directly to a cloud storage bucket.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-direct-cloud-upload (DDCU)</h1>\n<p>Widget for uploading files from the client directly to a cloud storage bucket. Currently only supports <a href=\"https://cloud.google.com/storage/\" rel=\"nofollow\">Google Cloud Storage</a>.</p>\n<p>Works with Internet Explorer 11, Google Chrome, Mozilla Firefox and Apple Safari.</p>\n<h2>Installation and setup</h2>\n<p>Install DDCU using pip :</p>\n<pre><code>pip install django-direct-cloud-upload\n</code></pre>\n<p>Make sure that <code>'django.contrib.staticfiles'</code> is <a href=\"https://docs.djangoproject.com/en/stable/howto/static-files/\" rel=\"nofollow\">set up properly</a> and add <code>'direct_cloud_upload'</code> to your <code>INSTALLED_APPS</code> setting :</p>\n<pre><code>INSTALLED_APPS = [\n    # ...\n    'django.contrib.staticfiles',\n    # ...\n    'direct_cloud_upload',\n]\n\nSTATIC_URL = '/static/'\n</code></pre>\n<p>DDCU provides a view that will generate a 'signed URL' for uploading a file. To enable this view, include DDCU's <code>urlpatterns</code> to your project's URLconf :</p>\n<pre><code>import direct_cloud_upload\n\nurlpatterns = [\n    # ...\n    path('direct_cloud_upload/', include(direct_cloud_upload.urlpatterns)),\n]\n</code></pre>\n<p><em>Note</em>: It is not mandatory to choose <code>direct_cloud_upload/</code> as the path, you are free to set any path.</p>\n<h2>Configuring the GCS bucket</h2>\n<p>If you don't have a GCS bucket yet, <a href=\"https://cloud.google.com/storage/docs/creating-buckets\" rel=\"nofollow\">create one</a> first.</p>\n<p><a href=\"https://cloud.google.com/storage/docs/configuring-cors\" rel=\"nofollow\">Configure CORS</a> on your bucket to allow uploads from your website. Configuring CORS for GCS buckets is done by creating a JSON-file describing the CORS policy and uploading the JSON file with <code>gsutil</code>.</p>\n<p>Example JSON file containing a CORS policy:</p>\n<pre><code>[\n    {\n        \"origin\": [\n            \"https://example-app.com\",\n            \"https://www.example-app.com\",\n            \"http://localhost:8000\"\n        ],\n        \"responseHeader\": [\"Content-Type\"],\n        \"method\": [\"GET\", \"HEAD\", \"PUT\"],\n        \"maxAgeSeconds\": 3600\n    }\n]\n</code></pre>\n<p>Upload the JSON file with the <code>gsutil cors set</code> command:</p>\n<pre><code>gsutil cors set cors-json-file.json gs://example-bucket\n</code></pre>\n<h2>Usage</h2>\n<p>Create a <code>Bucket</code> instance and register it with DDCU :</p>\n<pre><code>import google.cloud.storage\nimport direct_cloud_upload\n\nclient = google.cloud.storage.Client()\ngcs_bucket = client.get_bucket('bucket-id-here')\nddcu_bucket_identifier = direct_cloud_upload.register_gcs_bucket(gcs_bucket)\n</code></pre>\n<p>Creating the <code>Client</code> can be a bit more complicated if you need to authenticate, see the <a href=\"https://googleapis.dev/python/storage/latest/client.html\" rel=\"nofollow\">GCS Python client documentation</a>.</p>\n<p>Now you can use the <code>CloudFileWidget</code> for any <code>django.forms.CharField</code> in a Form :</p>\n<pre><code>from direct_cloud_upload import CloudFileWidget\n\nclass EbookForm(forms.ModelForm):\n    class Meta:\n        model = Ebook\n        fields = ['title', 'pdf_file']\n        widgets = {\n            'pdf_file': CloudFileWidget(\n                bucket_identifier = ddcu_bucket_identifier,\n                path_prefix = \"ebook_pdf/\",\n            )\n        }\n</code></pre>\n<p><code>CloudFileWidget</code> has one required parameter:</p>\n<ul>\n<li><code>bucket_identifier</code> (string): identifier retrieved when registering the bucket with DDCU.</li>\n</ul>\n<p><code>CloudFileWidget</code> has some optional parameters:</p>\n<ul>\n<li><code>path_prefix</code> (string): Will be prepended automatically to the path of each file. This is useful for collecting all files uploaded via this widget into one directory.</li>\n<li><code>include_timestamp</code> (bool) : Determines if a timestamp will be added to the path. Defaults to <code>True</code>.</li>\n<li><code>submit_timeout</code> (int) : Timeout (in seconds) for uploading the form. Defaults to 129600 (36 hours).</li>\n<li><code>clearable</code> (bool) : Add a \"Delete file\" button to the widget. Defaults to <code>True</code>.</li>\n</ul>\n<p>When the form is being submitted, the field will contain the path in the bucket where the file has been uploaded to.</p>\n<h2>Including static JS and CSS files</h2>\n<p>DDCU needs a Javascript and CSS file to function. If you use the widget in a django-admin site, you can use the first method to include these files. For all other sites, you should read the \"For generic forms\" section below.</p>\n<h3>For admin sites</h3>\n<p>Let your Admin classes inherit from <code>DdcuAdminMixin</code>, which will instruct the admin interface to include the necessary files:</p>\n<pre><code>from direct_cloud_upload import DdcuAdminMixin\n\nclass EbookAdmin(admin.ModelAdmin, DdcuAdminMixin):\n    form = EbookForm\n</code></pre>\n<h3>For generic forms</h3>\n<p>Every page containing a <code>CloudFileWidget</code> should include jQuery 1.9 (or newer) and the JS and CSS file in the <code>head</code> section:</p>\n<pre><code>{% load static %}\n\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"{% static \"direct_cloud_upload/cloud_file_widget.css\" %}\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"{% static \"direct_cloud_upload/ddcu_upload.js\" %}\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n\n          </div>"}, "last_serial": 6644983, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b1e5d8981e809683c2989bcfd66d4261", "sha256": "64699557e3afb6d415cd70e6611af3aae8d3721ce521a0693bb9a495f856dd8c"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.1.tar.gz", "has_sig": false, "md5_digest": "b1e5d8981e809683c2989bcfd66d4261", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8573, "upload_time": "2020-01-20T16:06:59", "upload_time_iso_8601": "2020-01-20T16:06:59.754781Z", "url": "https://files.pythonhosted.org/packages/50/af/a1b4dc833f74987458b70c28cb1e3bb24616ffe7d07191b88be99bedefc0/django-direct-cloud-upload-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "d1e19b4dadc7d9897613970b13622359", "sha256": "fcb6fba7197fc464abfdeb733a4de0b908e790edd74e917599032ed8c3676ece"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.2.tar.gz", "has_sig": false, "md5_digest": "d1e19b4dadc7d9897613970b13622359", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8811, "upload_time": "2020-01-21T10:02:16", "upload_time_iso_8601": "2020-01-21T10:02:16.863378Z", "url": "https://files.pythonhosted.org/packages/dc/9f/c6ea32b936e1a3dd88a42a15603ff691f296c2d5a2291babc138bee49cbd/django-direct-cloud-upload-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "dea4ad29f8ed2272ba6721c754e6210c", "sha256": "6c9e39f7f88f8bfa55a74ec4ff49016eb6c435977874a46f7ce626fe18f9a5d1"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.2.1.tar.gz", "has_sig": false, "md5_digest": "dea4ad29f8ed2272ba6721c754e6210c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9304, "upload_time": "2020-01-21T12:39:05", "upload_time_iso_8601": "2020-01-21T12:39:05.361073Z", "url": "https://files.pythonhosted.org/packages/28/ad/887d2c870c4bb70bc56d2486b55063b106edca8a42aee5ab50de1a0e053d/django-direct-cloud-upload-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d09305f701ace5b7fa10dd61b438dca8", "sha256": "de057a1d708ce1f2cbc5cd9e52fb64438cf9defe3d33f213b3c1a71d3fe4f544"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d09305f701ace5b7fa10dd61b438dca8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11080, "upload_time": "2020-01-22T10:43:50", "upload_time_iso_8601": "2020-01-22T10:43:50.725606Z", "url": "https://files.pythonhosted.org/packages/58/02/55ed06da53888ee10d9b60a89f050334a7a1cd02432c980f94a405ebc4ba/django-direct-cloud-upload-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "ed9eb7634f7a1a8e28c3ea17192b74cd", "sha256": "e3e17d67be4f071864c7f09cfbb7ecbb54d6fa2d72aefdf0f46fc6c0b2c89bc2"}, "downloads": -1, "filename": "django_direct_cloud_upload-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ed9eb7634f7a1a8e28c3ea17192b74cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11748, "upload_time": "2020-02-17T09:39:08", "upload_time_iso_8601": "2020-02-17T09:39:08.938595Z", "url": "https://files.pythonhosted.org/packages/41/6f/31cd22de7a539d8fde72f59b6f212062776ac20f5c239218202e76e4ea6d/django_direct_cloud_upload-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07d4b302e28997b39d82f22cb10776ab", "sha256": "cb7d7eb8add6ca4b18f386bfd74beb1266d940b466d8a6a208e0f4d3f27e329f"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.2.3.tar.gz", "has_sig": false, "md5_digest": "07d4b302e28997b39d82f22cb10776ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8894, "upload_time": "2020-02-17T09:39:10", "upload_time_iso_8601": "2020-02-17T09:39:10.476054Z", "url": "https://files.pythonhosted.org/packages/9e/62/cbedb3cff14f3bc47ba3bacdb94d6f78e0606da6dd601a7202c8a3e2da70/django-direct-cloud-upload-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed9eb7634f7a1a8e28c3ea17192b74cd", "sha256": "e3e17d67be4f071864c7f09cfbb7ecbb54d6fa2d72aefdf0f46fc6c0b2c89bc2"}, "downloads": -1, "filename": "django_direct_cloud_upload-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ed9eb7634f7a1a8e28c3ea17192b74cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11748, "upload_time": "2020-02-17T09:39:08", "upload_time_iso_8601": "2020-02-17T09:39:08.938595Z", "url": "https://files.pythonhosted.org/packages/41/6f/31cd22de7a539d8fde72f59b6f212062776ac20f5c239218202e76e4ea6d/django_direct_cloud_upload-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07d4b302e28997b39d82f22cb10776ab", "sha256": "cb7d7eb8add6ca4b18f386bfd74beb1266d940b466d8a6a208e0f4d3f27e329f"}, "downloads": -1, "filename": "django-direct-cloud-upload-0.2.3.tar.gz", "has_sig": false, "md5_digest": "07d4b302e28997b39d82f22cb10776ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8894, "upload_time": "2020-02-17T09:39:10", "upload_time_iso_8601": "2020-02-17T09:39:10.476054Z", "url": "https://files.pythonhosted.org/packages/9e/62/cbedb3cff14f3bc47ba3bacdb94d6f78e0606da6dd601a7202c8a3e2da70/django-direct-cloud-upload-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:34 2020"}