{"info": {"author": "Vilar da Camara Neto", "author_email": "vilarneto@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development"], "description": "# Pyrtable: Python framework for interfacing with Airtable\n\nPyrtable is a Python 3 library to interface with [Airtable](https://airtable.com)'s REST API.\n\nThere are other Python projects to deal with Airtable. However, most of them basically offer a thin layer to ease authentication and filtering \u2013 at the end, the programmer still has to manually deal with JSON encoding/decoding, pagination, request rate limits, and so on.\n\nPyrtable is a high-level, ORM-like library that hides all these details. It performs automatic mapping between Airtable records and Python objects, allowing CRUD operations while aiming to be intuitive and fun. Programmers used to [Django](https://www.djangoproject.com) will find many similarities and will (hopefully) be able to interface with Airtable bases in just a couple of minutes.\n\n## What does it look like?\n\nOk, let's have a taste of how one can define a class that maps onto records of a table:\n\n````python\nimport enum\nfrom pyrtable.record import BaseRecord\nfrom pyrtable.fields import StringField, DateField, SingleSelectionField, \\\n        SingleRecordLinkField, MultipleRecordLinkField\n\nclass Role(enum.Enum):\n    DEVELOPER = 'Developer'\n    MANAGER = 'Manager'\n    CEO = 'C.E.O.'\n\nclass EmployeeRecord(BaseRecord):\n    class Meta:\n        # Open \u201cHelp > API documentation\u201d in Airtable and search for a line\n        # starting with \u201cThe ID of this base is XXX\u201d.\n        base_id = 'appABCDE12345'\n        table_id = 'Employees'\n\n    @classmethod\n    def get_api_key(cls):\n        # The API key can be generated in you Airtable Account page. \n        # DO NOT COMMIT THIS STRING!\n        return 'keyABCDE12345'\n\n    name = StringField('Name')\n    birth_date = DateField('Birth date')\n    office = SingleRecordLinkField('Office', linked_class='OfficeRecord')\n    projects = MultipleRecordLinkField(\n            'Allocated in projects', linked_class='ProjectRecord')\n    role = SingleSelectionField('Role', choices=Role)\n````\n\nAfter that, common operations are pretty simple:\n\n````python\n# Iterating over all records\nfor employee in EmployeeRecord.objects.all():\n    print(\"%s is currently working on %d project(s)\" % (\n            employee.name, len(employee.projects)))\n\n# Filtering\nfor employee in EmployeeRecord.objects.filter(\n        birth_date__gte=datetime.datetime(2001, 1, 1)):\n    print(\"%s was born in this century!\" % employee.name)\n\n# Creating, updating and deleting a record\nnew_employee = EmployeeRecord(\n    name='John Doe',\n    birth_date=datetime.date(1980, 5, 10),\n    role=Role.DEVELOPER)\nnew_employee.save()\n\nnew_employee.role = Role.MANAGER\nnew_employee.save()\n\nnew_employee.delete()\n````\n\nNotice that we don't deal with Airtable column or table names once record classes are defined.\n\n## Beyond the basics\n\nKeep in mind that Airtable is *not* a database system and is not really designed for tasks that need changing tons of data. In fact, only fetch (list) operations are batched \u2013 insert/update/delete operations are limited to a single record per request, and Airtable imposes a 5 requests per second limit even for paid accounts. You will need a full minute to update 300 records!\n\nThat said, Pyrtable will respect that limit. In fact, it will track dirty fields to avoid unnecessary server requests and will render `.save()` calls as no-ops for unchanged objects. That also works with multiple threads, so the following pattern can be used to update and/or create several records:\n\n```python\nfrom concurrent.futures.thread import ThreadPoolExecutor\n\nall_records = list(EmployeeRecord.objects.all())\n\n# Do operations that change some records here\n# No need to keep track of which records were changed\n\nwith ThreadPoolExecutor(max_workers=10) as executor:\n    for record in all_records:\n        executor.submit(record.save)\n```\n\nOr, if you want a really nice [tqdm](https://tqdm.github.io) progress bar:\n\n```python\nfrom tqdm import tqdm\n\nwith ThreadPoolExecutor(max_workers=10) as executor:\n    for _ in tqdm(executor.map(lambda record: record.save(), all_records),\n                  total=len(all_records), dynamic_ncols=True, unit='',\n                  desc='Updating Airtable records'):\n        pass\n```\n\nPyrtable also has some extra tools to cache data and read authentication keys from external JSON/YAML files check out the `APIKeyFromSecretsFileMixin` mixin class. Remember to never commit sensitive data to your repository, as Airtable authentication allows **full R/W access to all your bases** with a single API key!\n\n## Compatibility\n\nPyrtable is compatible with Python 3.7 and 3.8. Previous 3.x versions may or may not work. Python 2.x is not supported at all. \n\n## Documentation\n\nTechnical documentation is available at https://pyrtable.readthedocs.io.\n\n## Questions, bug reports, improvements\n\nWant to try it out, contribute, suggest, offer a hand? Great! The project is available at https://github.com/vilarneto/pyrtable.\n\n## License\n\nPyrtable is released under [MIT license](https://opensource.org/licenses/MIT).\n\nCopyright (c) 2020 Vilar Fiuza da Camara Neto\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vilarneto/pyrtable.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyrtable", "package_url": "https://pypi.org/project/pyrtable/", "platform": "", "project_url": "https://pypi.org/project/pyrtable/", "project_urls": {"Homepage": "https://github.com/vilarneto/pyrtable.git"}, "release_url": "https://pypi.org/project/pyrtable/0.5.6/", "requires_dist": ["deprecated", "furl (>=2.0.0)", "requests (>=2.22.0)", "simplejson (>=3.16.0)", "pytz ; extra == 'pytz'", "pyyaml (>=5.1) ; extra == 'yaml'"], "requires_python": ">=3.7", "summary": "Django-inspired library to interface with Airtable", "version": "0.5.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pyrtable: Python framework for interfacing with Airtable</h1>\n<p>Pyrtable is a Python 3 library to interface with <a href=\"https://airtable.com\" rel=\"nofollow\">Airtable</a>'s REST API.</p>\n<p>There are other Python projects to deal with Airtable. However, most of them basically offer a thin layer to ease authentication and filtering \u2013 at the end, the programmer still has to manually deal with JSON encoding/decoding, pagination, request rate limits, and so on.</p>\n<p>Pyrtable is a high-level, ORM-like library that hides all these details. It performs automatic mapping between Airtable records and Python objects, allowing CRUD operations while aiming to be intuitive and fun. Programmers used to <a href=\"https://www.djangoproject.com\" rel=\"nofollow\">Django</a> will find many similarities and will (hopefully) be able to interface with Airtable bases in just a couple of minutes.</p>\n<h2>What does it look like?</h2>\n<p>Ok, let's have a taste of how one can define a class that maps onto records of a table:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">enum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyrtable.record</span> <span class=\"kn\">import</span> <span class=\"n\">BaseRecord</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyrtable.fields</span> <span class=\"kn\">import</span> <span class=\"n\">StringField</span><span class=\"p\">,</span> <span class=\"n\">DateField</span><span class=\"p\">,</span> <span class=\"n\">SingleSelectionField</span><span class=\"p\">,</span> \\\n        <span class=\"n\">SingleRecordLinkField</span><span class=\"p\">,</span> <span class=\"n\">MultipleRecordLinkField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Role</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">DEVELOPER</span> <span class=\"o\">=</span> <span class=\"s1\">'Developer'</span>\n    <span class=\"n\">MANAGER</span> <span class=\"o\">=</span> <span class=\"s1\">'Manager'</span>\n    <span class=\"n\">CEO</span> <span class=\"o\">=</span> <span class=\"s1\">'C.E.O.'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">EmployeeRecord</span><span class=\"p\">(</span><span class=\"n\">BaseRecord</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Open \u201cHelp &gt; API documentation\u201d in Airtable and search for a line</span>\n        <span class=\"c1\"># starting with \u201cThe ID of this base is XXX\u201d.</span>\n        <span class=\"n\">base_id</span> <span class=\"o\">=</span> <span class=\"s1\">'appABCDE12345'</span>\n        <span class=\"n\">table_id</span> <span class=\"o\">=</span> <span class=\"s1\">'Employees'</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_api_key</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The API key can be generated in you Airtable Account page. </span>\n        <span class=\"c1\"># DO NOT COMMIT THIS STRING!</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'keyABCDE12345'</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">StringField</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">)</span>\n    <span class=\"n\">birth_date</span> <span class=\"o\">=</span> <span class=\"n\">DateField</span><span class=\"p\">(</span><span class=\"s1\">'Birth date'</span><span class=\"p\">)</span>\n    <span class=\"n\">office</span> <span class=\"o\">=</span> <span class=\"n\">SingleRecordLinkField</span><span class=\"p\">(</span><span class=\"s1\">'Office'</span><span class=\"p\">,</span> <span class=\"n\">linked_class</span><span class=\"o\">=</span><span class=\"s1\">'OfficeRecord'</span><span class=\"p\">)</span>\n    <span class=\"n\">projects</span> <span class=\"o\">=</span> <span class=\"n\">MultipleRecordLinkField</span><span class=\"p\">(</span>\n            <span class=\"s1\">'Allocated in projects'</span><span class=\"p\">,</span> <span class=\"n\">linked_class</span><span class=\"o\">=</span><span class=\"s1\">'ProjectRecord'</span><span class=\"p\">)</span>\n    <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">SingleSelectionField</span><span class=\"p\">(</span><span class=\"s1\">'Role'</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">Role</span><span class=\"p\">)</span>\n</pre>\n<p>After that, common operations are pretty simple:</p>\n<pre><span class=\"c1\"># Iterating over all records</span>\n<span class=\"k\">for</span> <span class=\"n\">employee</span> <span class=\"ow\">in</span> <span class=\"n\">EmployeeRecord</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> is currently working on </span><span class=\"si\">%d</span><span class=\"s2\"> project(s)\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">projects</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Filtering</span>\n<span class=\"k\">for</span> <span class=\"n\">employee</span> <span class=\"ow\">in</span> <span class=\"n\">EmployeeRecord</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n        <span class=\"n\">birth_date__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2001</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> was born in this century!\"</span> <span class=\"o\">%</span> <span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creating, updating and deleting a record</span>\n<span class=\"n\">new_employee</span> <span class=\"o\">=</span> <span class=\"n\">EmployeeRecord</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'John Doe'</span><span class=\"p\">,</span>\n    <span class=\"n\">birth_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1980</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"n\">role</span><span class=\"o\">=</span><span class=\"n\">Role</span><span class=\"o\">.</span><span class=\"n\">DEVELOPER</span><span class=\"p\">)</span>\n<span class=\"n\">new_employee</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">new_employee</span><span class=\"o\">.</span><span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">Role</span><span class=\"o\">.</span><span class=\"n\">MANAGER</span>\n<span class=\"n\">new_employee</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">new_employee</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<p>Notice that we don't deal with Airtable column or table names once record classes are defined.</p>\n<h2>Beyond the basics</h2>\n<p>Keep in mind that Airtable is <em>not</em> a database system and is not really designed for tasks that need changing tons of data. In fact, only fetch (list) operations are batched \u2013 insert/update/delete operations are limited to a single record per request, and Airtable imposes a 5 requests per second limit even for paid accounts. You will need a full minute to update 300 records!</p>\n<p>That said, Pyrtable will respect that limit. In fact, it will track dirty fields to avoid unnecessary server requests and will render <code>.save()</code> calls as no-ops for unchanged objects. That also works with multiple threads, so the following pattern can be used to update and/or create several records:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures.thread</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span>\n\n<span class=\"n\">all_records</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">EmployeeRecord</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Do operations that change some records here</span>\n<span class=\"c1\"># No need to keep track of which records were changed</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">all_records</span><span class=\"p\">:</span>\n        <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">)</span>\n</pre>\n<p>Or, if you want a really nice <a href=\"https://tqdm.github.io\" rel=\"nofollow\">tqdm</a> progress bar:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n\n<span class=\"k\">with</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(),</span> <span class=\"n\">all_records</span><span class=\"p\">),</span>\n                  <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_records</span><span class=\"p\">),</span> <span class=\"n\">dynamic_ncols</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                  <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">'Updating Airtable records'</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>Pyrtable also has some extra tools to cache data and read authentication keys from external JSON/YAML files check out the <code>APIKeyFromSecretsFileMixin</code> mixin class. Remember to never commit sensitive data to your repository, as Airtable authentication allows <strong>full R/W access to all your bases</strong> with a single API key!</p>\n<h2>Compatibility</h2>\n<p>Pyrtable is compatible with Python 3.7 and 3.8. Previous 3.x versions may or may not work. Python 2.x is not supported at all.</p>\n<h2>Documentation</h2>\n<p>Technical documentation is available at <a href=\"https://pyrtable.readthedocs.io\" rel=\"nofollow\">https://pyrtable.readthedocs.io</a>.</p>\n<h2>Questions, bug reports, improvements</h2>\n<p>Want to try it out, contribute, suggest, offer a hand? Great! The project is available at <a href=\"https://github.com/vilarneto/pyrtable\" rel=\"nofollow\">https://github.com/vilarneto/pyrtable</a>.</p>\n<h2>License</h2>\n<p>Pyrtable is released under <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>.</p>\n<p>Copyright (c) 2020 Vilar Fiuza da Camara Neto</p>\n\n          </div>"}, "last_serial": 7177769, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "23c5ef17702f483b6199138d8c3ff39e", "sha256": "40bf0dc6d0897c6014899bbb42dfeef086ebde9830e29307ec57ac272101a869"}, "downloads": -1, "filename": "pyrtable-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "23c5ef17702f483b6199138d8c3ff39e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22165, "upload_time": "2020-05-01T23:42:27", "upload_time_iso_8601": "2020-05-01T23:42:27.334661Z", "url": "https://files.pythonhosted.org/packages/53/9f/fa1b362cadb8b783d27c62fe03dae27f3d3dfb21bd01a4a9073e151b443b/pyrtable-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8ec818f4ac31b3f3b8bee1dacc9e38d", "sha256": "bfc7cab78dd1eeb0f592cde9bfb4092d0da02e57fbafacc88352b4a423616b7f"}, "downloads": -1, "filename": "pyrtable-0.5.0.tar.gz", "has_sig": false, "md5_digest": "c8ec818f4ac31b3f3b8bee1dacc9e38d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18547, "upload_time": "2020-05-01T23:42:30", "upload_time_iso_8601": "2020-05-01T23:42:30.552671Z", "url": "https://files.pythonhosted.org/packages/21/f6/5bd5b5899504d4e6dd9a04954094f8ad1ae4c2a252a2bfc2bdb1eda30bb8/pyrtable-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "5ae15a7a3cb5132b302ad60f102f90f8", "sha256": "a7f8c655f4f1e4f3e13417c9b1160c80fd8fa4be2b2fcb9244cf212bcfd3d5b6"}, "downloads": -1, "filename": "pyrtable-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ae15a7a3cb5132b302ad60f102f90f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22169, "upload_time": "2020-05-03T20:54:54", "upload_time_iso_8601": "2020-05-03T20:54:54.025361Z", "url": "https://files.pythonhosted.org/packages/b9/5b/a82b5bee320416eb905e10791aee9b81530cca9f69b909f3d206d7a3bfe2/pyrtable-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fafbcf271edc4581ceaf3cc40fa31fee", "sha256": "beb28949c0555510b7e7a25163946206bb005dd669cac57187dcfac13ee9003f"}, "downloads": -1, "filename": "pyrtable-0.5.1.tar.gz", "has_sig": false, "md5_digest": "fafbcf271edc4581ceaf3cc40fa31fee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18560, "upload_time": "2020-05-03T20:54:55", "upload_time_iso_8601": "2020-05-03T20:54:55.177511Z", "url": "https://files.pythonhosted.org/packages/0b/a5/13600b58019e1be57388625c6b2ce36e6e88442e7ac213a40c05094fc537/pyrtable-0.5.1.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "cd23af51704fde34923d47a8948e6906", "sha256": "ba9bcd97bad1d3f3dd0f03ea856ced00d9d609dbfaf95e71df8288d663ec28e2"}, "downloads": -1, "filename": "pyrtable-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cd23af51704fde34923d47a8948e6906", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22171, "upload_time": "2020-05-05T13:08:48", "upload_time_iso_8601": "2020-05-05T13:08:48.294987Z", "url": "https://files.pythonhosted.org/packages/14/f0/e5c612fff0966ffc615270531e75d7cce9777aaf7f1a5d8ebbaae29625d0/pyrtable-0.5.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49f0d08725eb72d41b6c31451ec565ea", "sha256": "736e19a47551c9a6c99957081c79397486e783cce995f582e3cc4e24614be358"}, "downloads": -1, "filename": "pyrtable-0.5.4.tar.gz", "has_sig": false, "md5_digest": "49f0d08725eb72d41b6c31451ec565ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18565, "upload_time": "2020-05-05T13:08:50", "upload_time_iso_8601": "2020-05-05T13:08:50.122875Z", "url": "https://files.pythonhosted.org/packages/f1/91/7ff833b77c37119c5398231f2fe287afe465754da3fb1cf883cbe1469221/pyrtable-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "ab6ffafabc1ab15e4c4b4b9272465f92", "sha256": "f4d1595073aa1f55e8fa5ef531bc0f0e00daa6f1caeb806dfb519f3c0fc4ba2e"}, "downloads": -1, "filename": "pyrtable-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6ffafabc1ab15e4c4b4b9272465f92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22344, "upload_time": "2020-05-06T05:40:49", "upload_time_iso_8601": "2020-05-06T05:40:49.897045Z", "url": "https://files.pythonhosted.org/packages/d4/b0/d88b532802f64ccd95edda2cc397df910f9055840b80acbd9263f6fdaa77/pyrtable-0.5.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0af7ada0c7c64a39bfb496d43785bf8a", "sha256": "72f87a37312df16bf966c97c191b64f6223dc6ac68e42fbf10519b8023c9f5b0"}, "downloads": -1, "filename": "pyrtable-0.5.5.tar.gz", "has_sig": false, "md5_digest": "0af7ada0c7c64a39bfb496d43785bf8a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18457, "upload_time": "2020-05-06T05:40:51", "upload_time_iso_8601": "2020-05-06T05:40:51.306231Z", "url": "https://files.pythonhosted.org/packages/d2/de/4b85657edbd5ee8a5db95f0abdceaf4861cee16a4912208d98fd1a783404/pyrtable-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "ada3efd3cc61a84a0a30b78b4fcc31b6", "sha256": "233cef6846e86a23821fc38d01e165486e243e903d60c74ebecdc483d4c56683"}, "downloads": -1, "filename": "pyrtable-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ada3efd3cc61a84a0a30b78b4fcc31b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22441, "upload_time": "2020-05-06T05:55:21", "upload_time_iso_8601": "2020-05-06T05:55:21.046762Z", "url": "https://files.pythonhosted.org/packages/21/3d/97181c6485a725600f9b8942fb76e12cc8e0efd502963befd9f88d4c5436/pyrtable-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d1ced0dc3d49db1120fbc94779d930b", "sha256": "c4061f7824299178caf6d446b6eef61c341d45f255353c10d1f41409c428d639"}, "downloads": -1, "filename": "pyrtable-0.5.6.tar.gz", "has_sig": false, "md5_digest": "6d1ced0dc3d49db1120fbc94779d930b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18540, "upload_time": "2020-05-06T05:55:22", "upload_time_iso_8601": "2020-05-06T05:55:22.463292Z", "url": "https://files.pythonhosted.org/packages/e3/9d/c553e620b6eb2e1b691f2bab5260949128839a0c93d2821a7b9f79143ad2/pyrtable-0.5.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ada3efd3cc61a84a0a30b78b4fcc31b6", "sha256": "233cef6846e86a23821fc38d01e165486e243e903d60c74ebecdc483d4c56683"}, "downloads": -1, "filename": "pyrtable-0.5.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ada3efd3cc61a84a0a30b78b4fcc31b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 22441, "upload_time": "2020-05-06T05:55:21", "upload_time_iso_8601": "2020-05-06T05:55:21.046762Z", "url": "https://files.pythonhosted.org/packages/21/3d/97181c6485a725600f9b8942fb76e12cc8e0efd502963befd9f88d4c5436/pyrtable-0.5.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d1ced0dc3d49db1120fbc94779d930b", "sha256": "c4061f7824299178caf6d446b6eef61c341d45f255353c10d1f41409c428d639"}, "downloads": -1, "filename": "pyrtable-0.5.6.tar.gz", "has_sig": false, "md5_digest": "6d1ced0dc3d49db1120fbc94779d930b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18540, "upload_time": "2020-05-06T05:55:22", "upload_time_iso_8601": "2020-05-06T05:55:22.463292Z", "url": "https://files.pythonhosted.org/packages/e3/9d/c553e620b6eb2e1b691f2bab5260949128839a0c93d2821a7b9f79143ad2/pyrtable-0.5.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:31 2020"}