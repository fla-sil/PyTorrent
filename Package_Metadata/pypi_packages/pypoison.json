{"info": {"author": "Ben Wiederhake", "author_email": "BenWiederhake.GitHub@gmx.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pypoison\n\n> Nothing says \"DO NOT USE\" like a poison value.\n\nSometimes you need a value to represent absence of a value.\nHowever, sometimes you want to make absolutely sure this value is not used in any way, shape, form, or anything whatsoever.\nIn these cases, values like `None`, `float('NaN')`, or `False` don't really fit, because you can still \"touch\" these values.\n\nThat's what poison values are for.\nBecause nothing says \"DO NOT USE\" like a poison value.\n\nThis module provides an object that overrides all methods to raise an exception.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Caveats](#caveats)\n- [TODOs](#todos)\n- [Contribute](#contribute)\n\n## Install\n\nJust `pip install pypoison`. (As soon as I have uploaded it to PyPI.)\n\nOr just copy `pypoison/__init__.py` to your project as `pypoison.py`.\n\nThere are no dependencies.\n\n## Usage\n\nJust use the value returned by `pypoison.get_poison()` when you need a poison value.\n\nThe object is always the same object.\n\n### Custom behavior\n\nBy default, all accesses raise a `ValueError` with a human-readable\nexplanation which attribute/method was accessed.\n\nIf you prefer otherwise, you can call `pypoison.set_exception(my_exception)`,\nand the poison value now raises the object `my_exception`\nwhenever anything is done with the poison value.\n\nFor extra fanciness, you can call `pypoison.set_handler(my_fn)`,\nand the poison value will raise whatever `my_fn(method_name)` returns.\n\nTo reset to the default behavior, you can call `pypoison.set_exception(None)`\n\n### Examples\n\n```python\n>>> 1 in pypoison.get_poison()\nValueError: Tried to access __contains__ on poison value.\n>>> pypoison.get_poison() / 1\nValueError: Tried to access __truediv__ on poison value.\n>>> 1 + Foo()\nValueError: Tried to access __radd__ on poison value.\n>>> pypoison.get_poison() * 4\nValueError: Tried to access __mul__ on poison value.\n>>> pypoison.get_poison() % 3\nValueError: Tried to access __mod__ on poison value.\n>>> 3 % pypoison.get_poison()\nValueError: Tried to access __rmod__ on poison value.\n>>> '{}'.format(pypoison.get_poison())\nValueError: Tried to access __format__ on poison value.\n>>> '{!r}'.format(pypoison.get_poison())\nValueError: Tried to access __repr__ on poison value.\n>>> list(pypoison.get_poison())\nValueError: Tried to access __iter__ on poison value.\n>>> help(pypoison.get_poison())\nValueError: Tried to access __getattribute__ on poison value.\n>>> pypoison.get_poison() == 42\nValueError: Tried to access __eq__ on poison value.\n```\n\n## Caveat\n\n### Serious\n\nHeavy use of the `inspect` module might fiddle around with the poison object,\nhowever safeguards are in place to make sure that this is not easy.\n\nPassive use, such as `is` or storing it in a passive container (e.g. a list)\ncannot be prevented.  However, this is intentionl. This module wants to\nprovide a poisonous placeholder value, and not an actively malicious value.\n\nI am not sure how to handle `callable()`, `id()`, and `type()`.\n\nLogically-null usage cannot be detected, such as in `pypoison.get_poison() in []`\nor `True or pypoison.get_poison()` or even `max([pypoison.get_poison()])`.\n\nThis module [may cause bugs](https://github.com/bpython/bpython/issues/776)\nin your debugger/IDE/editor.  Or at least unexpected behavior.\n\nDo not store the poison value in a global.  Many tools, e.g. unittest,\nwalk the global variables and inspect them.\n\n### Non-serious\n\nThe amount of black magic might *poison* your appreciation of Python.\n\nPythonidae are always *[nonvenomous](https://en.wikipedia.org/wiki/Pythonidae)*; this module makes it *poisonous*!\n\n## TODOs\n\n* Do weird stuff with it\n\n## Contribute\n\nFeel free to dive in! [Open an issue](https://github.com/BenWiederhake/pypoison/issues/new) or submit PRs.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BenWiederhake/pypoison", "keywords": "pypoison", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pypoison", "package_url": "https://pypi.org/project/pypoison/", "platform": "Any", "project_url": "https://pypi.org/project/pypoison/", "project_urls": {"Homepage": "https://github.com/BenWiederhake/pypoison"}, "release_url": "https://pypi.org/project/pypoison/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Nothing says \"DO NOT USE\" like a poison value.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pypoison</h1>\n<blockquote>\n<p>Nothing says \"DO NOT USE\" like a poison value.</p>\n</blockquote>\n<p>Sometimes you need a value to represent absence of a value.\nHowever, sometimes you want to make absolutely sure this value is not used in any way, shape, form, or anything whatsoever.\nIn these cases, values like <code>None</code>, <code>float('NaN')</code>, or <code>False</code> don't really fit, because you can still \"touch\" these values.</p>\n<p>That's what poison values are for.\nBecause nothing says \"DO NOT USE\" like a poison value.</p>\n<p>This module provides an object that overrides all methods to raise an exception.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#caveats\" rel=\"nofollow\">Caveats</a></li>\n<li><a href=\"#todos\" rel=\"nofollow\">TODOs</a></li>\n<li><a href=\"#contribute\" rel=\"nofollow\">Contribute</a></li>\n</ul>\n<h2>Install</h2>\n<p>Just <code>pip install pypoison</code>. (As soon as I have uploaded it to PyPI.)</p>\n<p>Or just copy <code>pypoison/__init__.py</code> to your project as <code>pypoison.py</code>.</p>\n<p>There are no dependencies.</p>\n<h2>Usage</h2>\n<p>Just use the value returned by <code>pypoison.get_poison()</code> when you need a poison value.</p>\n<p>The object is always the same object.</p>\n<h3>Custom behavior</h3>\n<p>By default, all accesses raise a <code>ValueError</code> with a human-readable\nexplanation which attribute/method was accessed.</p>\n<p>If you prefer otherwise, you can call <code>pypoison.set_exception(my_exception)</code>,\nand the poison value now raises the object <code>my_exception</code>\nwhenever anything is done with the poison value.</p>\n<p>For extra fanciness, you can call <code>pypoison.set_handler(my_fn)</code>,\nand the poison value will raise whatever <code>my_fn(method_name)</code> returns.</p>\n<p>To reset to the default behavior, you can call <code>pypoison.set_exception(None)</code></p>\n<h3>Examples</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__contains__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"mi\">1</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__truediv__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__radd__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">4</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__mul__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span> <span class=\"o\">%</span> <span class=\"mi\">3</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__mod__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">3</span> <span class=\"o\">%</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__rmod__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">())</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__format__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"s1\">'</span><span class=\"si\">{!r}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">())</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__repr__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">())</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__iter__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">())</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__getattribute__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pypoison</span><span class=\"o\">.</span><span class=\"n\">get_poison</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Tried</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"fm\">__eq__</span> <span class=\"n\">on</span> <span class=\"n\">poison</span> <span class=\"n\">value</span><span class=\"o\">.</span>\n</pre>\n<h2>Caveat</h2>\n<h3>Serious</h3>\n<p>Heavy use of the <code>inspect</code> module might fiddle around with the poison object,\nhowever safeguards are in place to make sure that this is not easy.</p>\n<p>Passive use, such as <code>is</code> or storing it in a passive container (e.g. a list)\ncannot be prevented.  However, this is intentionl. This module wants to\nprovide a poisonous placeholder value, and not an actively malicious value.</p>\n<p>I am not sure how to handle <code>callable()</code>, <code>id()</code>, and <code>type()</code>.</p>\n<p>Logically-null usage cannot be detected, such as in <code>pypoison.get_poison() in []</code>\nor <code>True or pypoison.get_poison()</code> or even <code>max([pypoison.get_poison()])</code>.</p>\n<p>This module <a href=\"https://github.com/bpython/bpython/issues/776\" rel=\"nofollow\">may cause bugs</a>\nin your debugger/IDE/editor.  Or at least unexpected behavior.</p>\n<p>Do not store the poison value in a global.  Many tools, e.g. unittest,\nwalk the global variables and inspect them.</p>\n<h3>Non-serious</h3>\n<p>The amount of black magic might <em>poison</em> your appreciation of Python.</p>\n<p>Pythonidae are always <em><a href=\"https://en.wikipedia.org/wiki/Pythonidae\" rel=\"nofollow\">nonvenomous</a></em>; this module makes it <em>poisonous</em>!</p>\n<h2>TODOs</h2>\n<ul>\n<li>Do weird stuff with it</li>\n</ul>\n<h2>Contribute</h2>\n<p>Feel free to dive in! <a href=\"https://github.com/BenWiederhake/pypoison/issues/new\" rel=\"nofollow\">Open an issue</a> or submit PRs.</p>\n\n          </div>"}, "last_serial": 6482077, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1f79f956e4dd52a8cfadfa393410f38a", "sha256": "32fecfdf0986b1ba1f49cea6ed39825338499181dd8a3e340e748a5421e6bfe9"}, "downloads": -1, "filename": "pypoison-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1f79f956e4dd52a8cfadfa393410f38a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5535, "upload_time": "2019-07-16T23:15:24", "upload_time_iso_8601": "2019-07-16T23:15:24.850345Z", "url": "https://files.pythonhosted.org/packages/89/d5/0d985b5cfdeb2f38527416499e53cc53a04311f72ff3a338e98d6394fe8e/pypoison-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b44748539e5d33eae827cb22f96fbe9", "sha256": "0040b42f488bcea8011151049113affea65f9d67534db107e1fc20bf215be84d"}, "downloads": -1, "filename": "pypoison-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7b44748539e5d33eae827cb22f96fbe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4330, "upload_time": "2019-07-16T23:17:11", "upload_time_iso_8601": "2019-07-16T23:17:11.005041Z", "url": "https://files.pythonhosted.org/packages/6b/ca/95207ab48789aedc87943c3ea4fd1a09e84805152ff5a9fbd1a677b432d2/pypoison-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8e073e9186c496e3b7f2bf513aeb2e05", "sha256": "4e0caf9f1fff5a2be014279248716992ff5f4a5e64fa1246e69c6b96700d8c2c"}, "downloads": -1, "filename": "pypoison-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8e073e9186c496e3b7f2bf513aeb2e05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5542, "upload_time": "2020-01-19T14:18:09", "upload_time_iso_8601": "2020-01-19T14:18:09.519248Z", "url": "https://files.pythonhosted.org/packages/7d/13/ffbc58b2656a1e320a0a61a51cb6c9fedbbc4df13c26b853805c4db2994e/pypoison-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4a3b7e87618abacfd12a9f0466274fb", "sha256": "092d89306c3ea6320077abc79d35e47808582627fb7df3eb07199cedd6ca6426"}, "downloads": -1, "filename": "pypoison-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b4a3b7e87618abacfd12a9f0466274fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4555, "upload_time": "2020-01-19T14:18:11", "upload_time_iso_8601": "2020-01-19T14:18:11.051225Z", "url": "https://files.pythonhosted.org/packages/aa/56/5e434fd7b8e185d3d2260c010d6587ad1b7bde1df396d6f2da4f79f8f074/pypoison-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e073e9186c496e3b7f2bf513aeb2e05", "sha256": "4e0caf9f1fff5a2be014279248716992ff5f4a5e64fa1246e69c6b96700d8c2c"}, "downloads": -1, "filename": "pypoison-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8e073e9186c496e3b7f2bf513aeb2e05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5542, "upload_time": "2020-01-19T14:18:09", "upload_time_iso_8601": "2020-01-19T14:18:09.519248Z", "url": "https://files.pythonhosted.org/packages/7d/13/ffbc58b2656a1e320a0a61a51cb6c9fedbbc4df13c26b853805c4db2994e/pypoison-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4a3b7e87618abacfd12a9f0466274fb", "sha256": "092d89306c3ea6320077abc79d35e47808582627fb7df3eb07199cedd6ca6426"}, "downloads": -1, "filename": "pypoison-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b4a3b7e87618abacfd12a9f0466274fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4555, "upload_time": "2020-01-19T14:18:11", "upload_time_iso_8601": "2020-01-19T14:18:11.051225Z", "url": "https://files.pythonhosted.org/packages/aa/56/5e434fd7b8e185d3d2260c010d6587ad1b7bde1df396d6f2da4f79f8f074/pypoison-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:20 2020"}