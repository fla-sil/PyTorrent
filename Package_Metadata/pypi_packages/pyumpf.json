{"info": {"author": "Adam Faulconbridge", "author_email": "afaulconbridge@googlemail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "pyumpf\n======\n\nPython Unified Multiprocessing Parallel Functions\n\nThis is a small library that aims to bring together the standard library map/reduce functions\nwith both the multiprocessing module in the standard library and the PP module (www.parallelpython.com).\n\nEach has their own niche, and there own advantages and disadvantages. The map/reduce functions\nin the standard library are good for implementing a functional paradigm, but are limited by the GIL\nto only run one task at a time. The multiprocessing module is good for single machines with multiple\nCPUs, but can be awkward to debug and use. The PP module is great for clusters, but is even more\nawkward to debug and use. Plus all of these have different APIs, and so cannot be drop-in replacements.\n\npyumpf gets around this by providing a unified interface via umpf.map and umpf.reduce that can easily be \nexpanded to use multiprocessing or PP when needed, but also collapsed to the built-in map/reduce for\nsimpler debugging.\n\nTo install: python setup.py install\n\nFor an example, see umpf_test.py Note that this example gives PP a poor performance. This is because \nit is running on a single machine, and this example is too small to make best use of the parallelism.\nIdeally, tasks should run for several seconds each and have easily pickleable arguments and returned\nvalues.\n\nBy default, umpf defaults to pythons built-in map/reduce. These are single-threaded.\n\nTo use multiprocessing, do the following:\n\n    import umpf\n    import multiprocessing as mp\n    umpf.Hub.pool = mp.Pool()\n    \nTo use Parallel Python, do the following:\n\n    import umpy\n    import pp\n    umpy.Hub.pool = pp.Server()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/afaulconbridge/pyumpf", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "pyumpf", "package_url": "https://pypi.org/project/pyumpf/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyumpf/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/afaulconbridge/pyumpf"}, "release_url": "https://pypi.org/project/pyumpf/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Python Unified Multiprocessing Parallel Functions", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python Unified Multiprocessing Parallel Functions</p>\n<p>This is a small library that aims to bring together the standard library map/reduce functions\nwith both the multiprocessing module in the standard library and the PP module (www.parallelpython.com).</p>\n<p>Each has their own niche, and there own advantages and disadvantages. The map/reduce functions\nin the standard library are good for implementing a functional paradigm, but are limited by the GIL\nto only run one task at a time. The multiprocessing module is good for single machines with multiple\nCPUs, but can be awkward to debug and use. The PP module is great for clusters, but is even more\nawkward to debug and use. Plus all of these have different APIs, and so cannot be drop-in replacements.</p>\n<p>pyumpf gets around this by providing a unified interface via umpf.map and umpf.reduce that can easily be\nexpanded to use multiprocessing or PP when needed, but also collapsed to the built-in map/reduce for\nsimpler debugging.</p>\n<p>To install: python setup.py install</p>\n<p>For an example, see umpf_test.py Note that this example gives PP a poor performance. This is because\nit is running on a single machine, and this example is too small to make best use of the parallelism.\nIdeally, tasks should run for several seconds each and have easily pickleable arguments and returned\nvalues.</p>\n<p>By default, umpf defaults to pythons built-in map/reduce. These are single-threaded.</p>\n<p>To use multiprocessing, do the following:</p>\n<blockquote>\nimport umpf\nimport multiprocessing as mp\numpf.Hub.pool = mp.Pool()</blockquote>\n<p>To use Parallel Python, do the following:</p>\n<blockquote>\nimport umpy\nimport pp\numpy.Hub.pool = pp.Server()</blockquote>\n\n          </div>"}, "last_serial": 798198, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "06efb5c415eeb2284f097aeda75d8044", "sha256": "f717fd2150c6a9f1facd9ec02bcb5b561a1dd75d882f9517c9d0506021fb05fb"}, "downloads": -1, "filename": "pyumpf-0.1.0.tar.gz", "has_sig": false, "md5_digest": "06efb5c415eeb2284f097aeda75d8044", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3231, "upload_time": "2011-07-27T17:44:22", "upload_time_iso_8601": "2011-07-27T17:44:22.832365Z", "url": "https://files.pythonhosted.org/packages/63/06/98a61717a4615d8ba03470e6bc67696e85d99cd15c2e89da5fcc271a29f5/pyumpf-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d5b4b766ba506cfb9f9058b49c209e0d", "sha256": "2f2e5a5f592ca6adb97c2cbe6e11cd1a8e99d0f9925ac0d065d72fa65bd83e1f"}, "downloads": -1, "filename": "pyumpf-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d5b4b766ba506cfb9f9058b49c209e0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3491, "upload_time": "2011-10-17T12:34:39", "upload_time_iso_8601": "2011-10-17T12:34:39.380887Z", "url": "https://files.pythonhosted.org/packages/38/f2/973765bd9b801320c200d90026fc7d25740c327cb310c97b2d645b46da20/pyumpf-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d5b4b766ba506cfb9f9058b49c209e0d", "sha256": "2f2e5a5f592ca6adb97c2cbe6e11cd1a8e99d0f9925ac0d065d72fa65bd83e1f"}, "downloads": -1, "filename": "pyumpf-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d5b4b766ba506cfb9f9058b49c209e0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3491, "upload_time": "2011-10-17T12:34:39", "upload_time_iso_8601": "2011-10-17T12:34:39.380887Z", "url": "https://files.pythonhosted.org/packages/38/f2/973765bd9b801320c200d90026fc7d25740c327cb310c97b2d645b46da20/pyumpf-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:36 2020"}