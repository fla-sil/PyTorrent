{"info": {"author": "Cariad Eccleston", "author_email": "cariadeccleston@icloud.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Tupper's Self-Referential Formula plotter\n\nThis Python package calculates and plots Tupper's Self-Referential Formula.\n\nI've written about the formula and this project at [Tupper\u2019s Self-Referential Formula in Python](https://cariad.io/tupper/).\n\nThe video that influenced this whole thing is here: https://www.youtube.com/watch?v=_s5RFgd59ao\n\n```text\n        \u2588                   \u2588                \u2588 \u2588\u2588 \u2588     \u2588                \u2588  \u2588 \u2588     \u2588    \u2588 \u2588\u2588 \u2588      \u2588   \u2588\n        \u2588                   \u2588 \u2588      \u2588       \u2588  \u2588 \u2588     \u2588                \u2588  \u2588 \u2588     \u2588    \u2588  \u2588 \u2588      \u2588   \u2588\n\u2588\u2588      \u2588                  \u2588  \u2588      \u2588    \u2588\u2588 \u2588  \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588  \u2588  \u2588      \u2588  \u2588\n \u2588      \u2588                  \u2588  \u2588  \u2588 \u2588 \u2588       \u2588 \u2588  \u2588  \u2588  \u2588    \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588 \u2588   \u2588      \u2588  \u2588\n \u2588      \u2588                  \u2588  \u2588  \u2588 \u2588 \u2588       \u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588  \u2588  \u2588  \u2588    \u2588 \u2588   \u2588      \u2588  \u2588\n \u2588      \u2588               \u2588 \u2588   \u2588   \u2588  \u2588  \u2588\u2588        \u2588     \u2588                  \u2588  \u2588 \u2588   \u2588  \u2588       \u2588   \u2588\u2588  \u2588 \u2588\n\u2588\u2588\u2588   \u2588 \u2588               \u2588 \u2588   \u2588  \u2588   \u2588 \u2588  \u2588       \u2588     \u2588                   \u2588 \u2588     \u2588  \u2588      \u2588   \u2588  \u2588 \u2588 \u2588\n     \u2588  \u2588 \u2588\u2588 \u2588   \u2588\u2588   \u2588\u2588\u2588 \u2588   \u2588      \u2588   \u2588        \u2588\u2588\u2588 \u2588\u2588\u2588                   \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588       \u2588     \u2588  \u2588 \u2588\n\u2588\u2588\u2588 \u2588   \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588  \u2588 \u2588   \u2588 \u2588\u2588\u2588\u2588 \u2588  \u2588                                                          \u2588   \u2588 \u2588\n     \u2588  \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588  \u2588 \u2588   \u2588      \u2588 \u2588                                                          \u2588    \u2588 \u2588\n\u2588\u2588    \u2588 \u2588 \u2588 \u2588 \u2588  \u2588\u2588   \u2588\u2588\u2588 \u2588   \u2588 \u2588 \u2588\u2588 \u2588 \u2588\u2588\u2588\u2588                                                       \u2588\u2588\u2588\u2588 \u2588 \u2588\n  \u2588     \u2588                 \u2588   \u2588 \u2588  \u2588 \u2588                                                          \u2588      \u2588 \u2588\n \u2588      \u2588                  \u2588  \u2588 \u2588  \u2588 \u2588                                                          \u2588     \u2588  \u2588\n\u2588       \u2588                  \u2588  \u2588 \u2588 \u2588  \u2588                                                         \u2588      \u2588  \u2588\n\u2588\u2588\u2588     \u2588                  \u2588  \u2588 \u2588 \u2588  \u2588                                                                \u2588  \u2588\n        \u2588                   \u2588 \u2588      \u2588                                                               \u2588   \u2588\n        \u2588\u2588\u2588                 \u2588 \u2588\u2588\u2588  \u2588\u2588\u2588                                                               \u2588 \u2588\u2588\u2588\n```\n\n## Requirements\n\n- Python 3\n\n## Installation\n\n```shell\npip3 install tupper\n```\n\n## Console usage\n\n```shell\npython3 -m tupper\n```\n\nOptional arguments:\n\n- `--help` -- show usage instructions.\n- `--k <number>` -- the value of *k* to plot.\n- `--true <string>` -- the string to print for *truthy* points.\n- `--false <string>` -- the string to print for *falsy* points.\n- `--export <filename>` -- export the (x, y) coordinates and their truthy solution to a CSV file.\n\nIf you don't specify *k* then *k* =\n\n```text\n9609393799189588849716729621278527547150043396601293066515055192717028023952664\n2468964284217435071812126715378277062335599323728087414430789132596394133772348\n7857735749823926629715517173716995165232890538221612403238855866184013235585136\n0488286933379024914542292886670810961844960917051834540678277315517054053816273\n8096760256562501698148208341878316384911559022561000365235137034387446184837873\n7238198224849863465033159410054974700593138339226497249461751545728366702369745\n461014655997933798537483143786841806593422227898388722980000748404719\n```\n\n## Code usage\n\n### `Solver` class\n\nTo solve ad-hoc *(x, y)* points, import the `Solver` class and call the `solve(x, y)` function:\n\n```python\nfrom tupper import Solver\n# ...\ns = Solver()\nb = s.solve(x, y)\n```\n\n`x()` and `y()` functions are provided for yielding the coordinates of a graph:\n\n```python\nfrom tupper import Solver\n# ...\ns = Solver()\nk = 960939379918958...\nfor y in s.y(k):\n    for x in s.x():\n        b = s.solve(x, y)\n```\n\n### `StringPlotter` class\n\n`StringPlotter` exposes two functions for rendering graphs as text.\n\n`row()` yields the characters for any given row:\n\n```python\nfrom tupper import StringPlotter\n# ...\nsp = StringPlotter(true_mark=\"x\", false_mark=\" \")\nk = 960939379918958...\nfor c in sp.row(k):\n    print(c, end=\"\")\n```\n\n`graph()` yields the characters for the entire graph, including newlines at the end of each row:\n\n```python\nfrom tupper import StringPlotter\n# ...\nsp = StringPlotter(true_mark=\"x\", false_mark=\" \")\nk = 960939379918958...\nfor c in sp.graph(k):\n    print(c, end=\"\")\n```\n\n## Test data\n\nThe **test_data** directory contains CSV files for testing the calculation.\n\nEach file contains three columns:\n\n1. The `x` coordinate.\n2. The `y` coordinate.\n3. The expected `true`/`false` solution.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cariad/py-tupper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tupper", "package_url": "https://pypi.org/project/tupper/", "platform": "", "project_url": "https://pypi.org/project/tupper/", "project_urls": {"Homepage": "https://github.com/cariad/py-tupper"}, "release_url": "https://pypi.org/project/tupper/0.10.1/", "requires_dist": null, "requires_python": "", "summary": "Calculates plots for Tupper's Self-Referential Formula.", "version": "0.10.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tupper's Self-Referential Formula plotter</h1>\n<p>This Python package calculates and plots Tupper's Self-Referential Formula.</p>\n<p>I've written about the formula and this project at <a href=\"https://cariad.io/tupper/\" rel=\"nofollow\">Tupper\u2019s Self-Referential Formula in Python</a>.</p>\n<p>The video that influenced this whole thing is here: <a href=\"https://www.youtube.com/watch?v=_s5RFgd59ao\" rel=\"nofollow\">https://www.youtube.com/watch?v=_s5RFgd59ao</a></p>\n<pre>        \u2588                   \u2588                \u2588 \u2588\u2588 \u2588     \u2588                \u2588  \u2588 \u2588     \u2588    \u2588 \u2588\u2588 \u2588      \u2588   \u2588\n        \u2588                   \u2588 \u2588      \u2588       \u2588  \u2588 \u2588     \u2588                \u2588  \u2588 \u2588     \u2588    \u2588  \u2588 \u2588      \u2588   \u2588\n\u2588\u2588      \u2588                  \u2588  \u2588      \u2588    \u2588\u2588 \u2588  \u2588 \u2588 \u2588 \u2588 \u2588 \u2588\u2588 \u2588\u2588\u2588\u2588  \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588  \u2588  \u2588      \u2588  \u2588\n \u2588      \u2588                  \u2588  \u2588  \u2588 \u2588 \u2588       \u2588 \u2588  \u2588  \u2588  \u2588    \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588 \u2588   \u2588      \u2588  \u2588\n \u2588      \u2588                  \u2588  \u2588  \u2588 \u2588 \u2588       \u2588 \u2588  \u2588 \u2588 \u2588 \u2588    \u2588 \u2588 \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588  \u2588  \u2588  \u2588    \u2588 \u2588   \u2588      \u2588  \u2588\n \u2588      \u2588               \u2588 \u2588   \u2588   \u2588  \u2588  \u2588\u2588        \u2588     \u2588                  \u2588  \u2588 \u2588   \u2588  \u2588       \u2588   \u2588\u2588  \u2588 \u2588\n\u2588\u2588\u2588   \u2588 \u2588               \u2588 \u2588   \u2588  \u2588   \u2588 \u2588  \u2588       \u2588     \u2588                   \u2588 \u2588     \u2588  \u2588      \u2588   \u2588  \u2588 \u2588 \u2588\n     \u2588  \u2588 \u2588\u2588 \u2588   \u2588\u2588   \u2588\u2588\u2588 \u2588   \u2588      \u2588   \u2588        \u2588\u2588\u2588 \u2588\u2588\u2588                   \u2588 \u2588\u2588\u2588 \u2588\u2588\u2588 \u2588       \u2588     \u2588  \u2588 \u2588\n\u2588\u2588\u2588 \u2588   \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588  \u2588 \u2588   \u2588 \u2588\u2588\u2588\u2588 \u2588  \u2588                                                          \u2588   \u2588 \u2588\n     \u2588  \u2588 \u2588 \u2588 \u2588 \u2588  \u2588 \u2588  \u2588 \u2588   \u2588      \u2588 \u2588                                                          \u2588    \u2588 \u2588\n\u2588\u2588    \u2588 \u2588 \u2588 \u2588 \u2588  \u2588\u2588   \u2588\u2588\u2588 \u2588   \u2588 \u2588 \u2588\u2588 \u2588 \u2588\u2588\u2588\u2588                                                       \u2588\u2588\u2588\u2588 \u2588 \u2588\n  \u2588     \u2588                 \u2588   \u2588 \u2588  \u2588 \u2588                                                          \u2588      \u2588 \u2588\n \u2588      \u2588                  \u2588  \u2588 \u2588  \u2588 \u2588                                                          \u2588     \u2588  \u2588\n\u2588       \u2588                  \u2588  \u2588 \u2588 \u2588  \u2588                                                         \u2588      \u2588  \u2588\n\u2588\u2588\u2588     \u2588                  \u2588  \u2588 \u2588 \u2588  \u2588                                                                \u2588  \u2588\n        \u2588                   \u2588 \u2588      \u2588                                                               \u2588   \u2588\n        \u2588\u2588\u2588                 \u2588 \u2588\u2588\u2588  \u2588\u2588\u2588                                                               \u2588 \u2588\u2588\u2588\n</pre>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip3 install tupper\n</pre>\n<h2>Console usage</h2>\n<pre>python3 -m tupper\n</pre>\n<p>Optional arguments:</p>\n<ul>\n<li><code>--help</code> -- show usage instructions.</li>\n<li><code>--k &lt;number&gt;</code> -- the value of <em>k</em> to plot.</li>\n<li><code>--true &lt;string&gt;</code> -- the string to print for <em>truthy</em> points.</li>\n<li><code>--false &lt;string&gt;</code> -- the string to print for <em>falsy</em> points.</li>\n<li><code>--export &lt;filename&gt;</code> -- export the (x, y) coordinates and their truthy solution to a CSV file.</li>\n</ul>\n<p>If you don't specify <em>k</em> then <em>k</em> =</p>\n<pre>9609393799189588849716729621278527547150043396601293066515055192717028023952664\n2468964284217435071812126715378277062335599323728087414430789132596394133772348\n7857735749823926629715517173716995165232890538221612403238855866184013235585136\n0488286933379024914542292886670810961844960917051834540678277315517054053816273\n8096760256562501698148208341878316384911559022561000365235137034387446184837873\n7238198224849863465033159410054974700593138339226497249461751545728366702369745\n461014655997933798537483143786841806593422227898388722980000748404719\n</pre>\n<h2>Code usage</h2>\n<h3><code>Solver</code> class</h3>\n<p>To solve ad-hoc <em>(x, y)</em> points, import the <code>Solver</code> class and call the <code>solve(x, y)</code> function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tupper</span> <span class=\"kn\">import</span> <span class=\"n\">Solver</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p><code>x()</code> and <code>y()</code> functions are provided for yielding the coordinates of a graph:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tupper</span> <span class=\"kn\">import</span> <span class=\"n\">Solver</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Solver</span><span class=\"p\">()</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mf\">960939379918958.</span><span class=\"o\">..</span>\n<span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">():</span>\n        <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<h3><code>StringPlotter</code> class</h3>\n<p><code>StringPlotter</code> exposes two functions for rendering graphs as text.</p>\n<p><code>row()</code> yields the characters for any given row:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tupper</span> <span class=\"kn\">import</span> <span class=\"n\">StringPlotter</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">StringPlotter</span><span class=\"p\">(</span><span class=\"n\">true_mark</span><span class=\"o\">=</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">false_mark</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mf\">960939379918958.</span><span class=\"o\">..</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<p><code>graph()</code> yields the characters for the entire graph, including newlines at the end of each row:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tupper</span> <span class=\"kn\">import</span> <span class=\"n\">StringPlotter</span>\n<span class=\"c1\"># ...</span>\n<span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">StringPlotter</span><span class=\"p\">(</span><span class=\"n\">true_mark</span><span class=\"o\">=</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"n\">false_mark</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mf\">960939379918958.</span><span class=\"o\">..</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Test data</h2>\n<p>The <strong>test_data</strong> directory contains CSV files for testing the calculation.</p>\n<p>Each file contains three columns:</p>\n<ol>\n<li>The <code>x</code> coordinate.</li>\n<li>The <code>y</code> coordinate.</li>\n<li>The expected <code>true</code>/<code>false</code> solution.</li>\n</ol>\n\n          </div>"}, "last_serial": 6439875, "releases": {"0.10.1": [{"comment_text": "", "digests": {"md5": "3fd2adc00a7293629da315ac265f06ef", "sha256": "02c267fdaeef61f52f004d30160bacd5da3f4bd70f090b65abf30671e834fbd7"}, "downloads": -1, "filename": "tupper-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3fd2adc00a7293629da315ac265f06ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7699, "upload_time": "2020-01-12T14:06:55", "upload_time_iso_8601": "2020-01-12T14:06:55.490934Z", "url": "https://files.pythonhosted.org/packages/b9/c2/a47f062ac37d0ffb05956a9fd062e38ea52279944d77e26b9e9e707d1fdf/tupper-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43996acb338765738dd5e933d7cf6eb2", "sha256": "817c46616eab3be06b81d342796a422d4f1564e3a59036e1cf10371960ac2d93"}, "downloads": -1, "filename": "tupper-0.10.1.tar.gz", "has_sig": false, "md5_digest": "43996acb338765738dd5e933d7cf6eb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6391, "upload_time": "2020-01-12T14:06:56", "upload_time_iso_8601": "2020-01-12T14:06:56.659420Z", "url": "https://files.pythonhosted.org/packages/4b/b6/9ea9933ef31f9544b55d23666f768a401a60d1836dc0c57b5c8e910d507a/tupper-0.10.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "d7cf051e99c84e138d2261abe36d4332", "sha256": "4e9306c039210a8ebc75a1567c6b8cdf3fd40a7595465935aff10e8fe00ec3b8"}, "downloads": -1, "filename": "tupper-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7cf051e99c84e138d2261abe36d4332", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5680, "upload_time": "2020-01-11T12:31:53", "upload_time_iso_8601": "2020-01-11T12:31:53.871586Z", "url": "https://files.pythonhosted.org/packages/1e/1c/5b06affd7f49c831dc5fc717293cea8baf6a8bc9612eb4e318affd97dfd0/tupper-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4404a6ad8e0aadba4854dbce18c244d", "sha256": "30f147aa34ede46be19a483a27ed10f39aedb925ffe2c255c8cc9deea10eabc3"}, "downloads": -1, "filename": "tupper-0.9.0.tar.gz", "has_sig": false, "md5_digest": "a4404a6ad8e0aadba4854dbce18c244d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4446, "upload_time": "2020-01-11T12:31:56", "upload_time_iso_8601": "2020-01-11T12:31:56.127479Z", "url": "https://files.pythonhosted.org/packages/59/f3/0e09083d65198af3ad76979c3e43c1fa19baf56152e3b5d14e7ace9b9705/tupper-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3fd2adc00a7293629da315ac265f06ef", "sha256": "02c267fdaeef61f52f004d30160bacd5da3f4bd70f090b65abf30671e834fbd7"}, "downloads": -1, "filename": "tupper-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3fd2adc00a7293629da315ac265f06ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7699, "upload_time": "2020-01-12T14:06:55", "upload_time_iso_8601": "2020-01-12T14:06:55.490934Z", "url": "https://files.pythonhosted.org/packages/b9/c2/a47f062ac37d0ffb05956a9fd062e38ea52279944d77e26b9e9e707d1fdf/tupper-0.10.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43996acb338765738dd5e933d7cf6eb2", "sha256": "817c46616eab3be06b81d342796a422d4f1564e3a59036e1cf10371960ac2d93"}, "downloads": -1, "filename": "tupper-0.10.1.tar.gz", "has_sig": false, "md5_digest": "43996acb338765738dd5e933d7cf6eb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6391, "upload_time": "2020-01-12T14:06:56", "upload_time_iso_8601": "2020-01-12T14:06:56.659420Z", "url": "https://files.pythonhosted.org/packages/4b/b6/9ea9933ef31f9544b55d23666f768a401a60d1836dc0c57b5c8e910d507a/tupper-0.10.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:44:42 2020"}