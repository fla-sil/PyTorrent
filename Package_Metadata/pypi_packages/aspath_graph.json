{"info": {"author": "Codey Oxley", "author_email": "codey.a.oxley+os@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "aspath_graph\n============\n\n``aspath_graph`` converts raw ASPATHs to NetJSON Graph\n\n.. image:: http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-badge-2.png\n   :target: http://www.wtfpl.net/\n   :alt: Do what the fuck you want\n   :height: 25px\n\n|\n\n.. image:: path.png\n   :alt: Stylized example\n\nNetJSON_ is a series of JSON schema for defining networks, `NetJSON Graph`_\nbeing specific to defining how nodes interconnect. \"aspath_graph\" uses\nthis to represent BGP autonomous systems as 'nodes' and how they connect\nfrom the perspective of INPUT\n\n.. _NetJSON: http://netjson.org/\n.. _NetJSON Graph: https://github.com/interop-dev/netjsongraph.js\n\n\nThis project aims to make it easy to go from BGP AS PATHs in their raw form to\nsomething NetJSON Graph understands. This makes it easy to add properties to\nnodes based on their label or ASN and display/handle them differently on the\nfrontend in CSS/JS/HTML.\n\n* Contents:\n\n  + 1 aspath_graph_\n\n    + 1.1 Quickstart_\n    + 1.2 `Embedding In Existing Webpages`_\n    + 1.3 Usage_\n\nQuickstart\n----------\n\nFor a really quick start, clone the repo and check out the examples folder. It\nhas a paths text-file for how I saw PATHs to 1.0.0.0/12+ at the time.\n\nFor your own data, there are two input methods currently:\n\n1. netconf to Junos devices\n2. Plain text file of ASPATHs\n\nGood news is that the second one is very flexible. Here are a few ways you can\ncreate it:\n\n.. code:: bash\n\n    birdc 'show route table <name> all'|grep BGP\\.as_path|egrep -o '[0-9]+ [0-9 ]+' > aspaths.txt\n\n\n.. code:: bash\n\n    ssh junosrtr \"show route protocol bgp | match \\\"AS path\\\"\" | sed -e 's/.*AS path: //g' > aspaths.txt\n\n\nEmbedding In Existing Webpages\n------------------------------\n\nNetJSON Graph is pretty simple to embed into existing pages and theme, thus so\nis getting your AS nodes there. I'll refer you to the README and docs for the\nmain project, but below is a small example.\n\n.. code-block:: html\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"utf-8\">\n        <link href=\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph.css\" rel=\"stylesheet\">\n        <link href=\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph-theme.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n    <div id=\"wrap\">\n        <div class=\"nav\">\n            <!-- Nav stuff... -->\n        </div>\n        <div class=\"main-container\"> <!-- Imagine this your usual main container -->\n\n            <!-- You probably have several things down here... -->\n            <div id=\"legend\">\n                <!-- You can even add a legend, there's an example on the main project site -->\n            </div>\n            <div class=\"bgp-ases\"></div>\n\n        </div>\n    </div>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.12/d3.min.js\"></script>\n    <script src=\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph.js\"></script>\n    <script>\n        d3.netJsonGraph(\n            \"example.json\", {\n                el: '.bgp-ases',\n                metadata: false,\n                charge: -250,\n                labelDy: '-1.18em',\n            }\n        );\n    </script>\n    </body>\n    </html>\n\n\nUsage\n-----\n\n.. code::\n\n    $ aspath_graph --help    Usage: aspath_graph [OPTIONS] INPUT\n\n    Options:\n      -v, --version                   Show the version and exit.\n      -m, --mode [junos-netconf|txt]  Mode to use\n      -o, --output FILENAME           Output file\n      --asdot                         Whether to add ASDOT notation\n      --ownas TEXT                    Apply perspective of own AS at the beginning\n                                      of PATHS\n      --runserver                     Run local server on 8000\n      --user TEXT                     Only used for relevant modes\n      --nopassword                    If using a login mode, this will enable\n                                      public key auth\n      --yaml FILENAME                 YAML for mapping and ignoring ASes\n      --pprint                        Pretty print JSON\n      -h, --help                      Show this message and exit.\n\nINPUT can either be a device or file depending on value of MODE. This\ndefaults to a file. (txt)\n\nOUTPUT can be '-' to send results to STDOUT.\n\nIf not passing '--nopassword', you will be prompted for a password for the\nrelevant modes.\n\nWhen using \"--asdot\" to provide ASDOT notation, the raw ASPLAIN will also\nbe provided on the node - just under the \"raw\" attribute.\n\nYAML can be formatted as such: (Note that \"ignore\" must ONLY be ASPLAIN)\n\n.. code:: yaml\n\n    label_map:\n        65001: SFO\n        65002: ORD\n        65003: NYC\n        65003.1: NYC-R1\n        65003.2: NYC-R2\n\n    ignore:\n        - 7224\n        - 9059\n\nBy default, ASDOT will be labeled according to the firsthalf. Eg, if 65001\nis configured to be labeled as DFW, 65001.211 will appear as DFW-R21. This\nassumes your ToR ASN is your spine ASN + (racknumber*10+1) - to disable\nthis simply set APG_ASDOT_RAW to true/yes/anything.\n\nAny of the supported options can be passed via ENV by upping the case,\nreplacing '-' with '_', and prefixing with 'APG'. Eg, 'APG_MODE'\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/coxley/aspath_graph/tarball/1.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coxley/aspath_graph", "keywords": "networking,bgp,asn,netjson,json,graph,d3,routes", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "aspath_graph", "package_url": "https://pypi.org/project/aspath_graph/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/aspath_graph/", "project_urls": {"Download": "https://github.com/coxley/aspath_graph/tarball/1.1", "Homepage": "https://github.com/coxley/aspath_graph"}, "release_url": "https://pypi.org/project/aspath_graph/1.3/", "requires_dist": null, "requires_python": null, "summary": "Take BGP AS PATHs and generate an interactive javascript graph using NetJSON", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>aspath_graph</tt> converts raw ASPATHs to NetJSON Graph</p>\n<a href=\"http://www.wtfpl.net/\" rel=\"nofollow\"><img alt=\"Do what the fuck you want\" height=\"25px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7dd1408248bc2ec04257641b889338e8e539f185/687474703a2f2f7777772e777466706c2e6e65742f77702d636f6e74656e742f75706c6f6164732f323031322f31322f777466706c2d62616467652d322e706e67\"></a>\n<div>\n<div><br></div>\n</div>\n<img alt=\"Stylized example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f672c47c350a73d942915db1eedb6b37828f90b/706174682e706e67\">\n<p><a href=\"http://netjson.org/\" rel=\"nofollow\">NetJSON</a> is a series of JSON schema for defining networks, <a href=\"https://github.com/interop-dev/netjsongraph.js\" rel=\"nofollow\">NetJSON Graph</a>\nbeing specific to defining how nodes interconnect. \u201caspath_graph\u201d uses\nthis to represent BGP autonomous systems as \u2018nodes\u2019 and how they connect\nfrom the perspective of INPUT</p>\n<p>This project aims to make it easy to go from BGP AS PATHs in their raw form to\nsomething NetJSON Graph understands. This makes it easy to add properties to\nnodes based on their label or ASN and display/handle them differently on the\nfrontend in CSS/JS/HTML.</p>\n<ul>\n<li>Contents:<ul>\n<li>1 <a href=\"#aspath-graph\" rel=\"nofollow\">aspath_graph</a><ul>\n<li>1.1 <a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li>1.2 <a href=\"#embedding-in-existing-webpages\" rel=\"nofollow\">Embedding In Existing Webpages</a></li>\n<li>1.3 <a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>For a really quick start, clone the repo and check out the examples folder. It\nhas a paths text-file for how I saw PATHs to 1.0.0.0/12+ at the time.</p>\n<p>For your own data, there are two input methods currently:</p>\n<ol>\n<li>netconf to Junos devices</li>\n<li>Plain text file of ASPATHs</li>\n</ol>\n<p>Good news is that the second one is very flexible. Here are a few ways you can\ncreate it:</p>\n<pre>birdc <span class=\"s1\">'show route table &lt;name&gt; all'</span><span class=\"p\">|</span>grep BGP<span class=\"se\">\\.</span>as_path<span class=\"p\">|</span>egrep -o <span class=\"s1\">'[0-9]+ [0-9 ]+'</span> &gt; aspaths.txt\n</pre>\n<pre>ssh junosrtr <span class=\"s2\">\"show route protocol bgp | match \\\"AS path\\\"\"</span> <span class=\"p\">|</span> sed -e <span class=\"s1\">'s/.*AS path: //g'</span> &gt; aspaths.txt\n</pre>\n</div>\n<div id=\"embedding-in-existing-webpages\">\n<h2>Embedding In Existing Webpages</h2>\n<p>NetJSON Graph is pretty simple to embed into existing pages and theme, thus so\nis getting your AS nodes there. I\u2019ll refer you to the README and docs for the\nmain project, but below is a small example.</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph-theme.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"wrap\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"nav\"</span><span class=\"p\">&gt;</span>\n        <span class=\"c\">&lt;!-- Nav stuff... --&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"main-container\"</span><span class=\"p\">&gt;</span> <span class=\"c\">&lt;!-- Imagine this your usual main container --&gt;</span>\n\n        <span class=\"c\">&lt;!-- You probably have several things down here... --&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"legend\"</span><span class=\"p\">&gt;</span>\n            <span class=\"c\">&lt;!-- You can even add a legend, there's an example on the main project site --&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"bgp-ases\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.12/d3.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"https://rawgit.com/interop-dev/netjsongraph.js/master/src/netjsongraph.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"nx\">d3</span><span class=\"p\">.</span><span class=\"nx\">netJsonGraph</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"example.json\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"nx\">el</span><span class=\"o\">:</span> <span class=\"s1\">'.bgp-ases'</span><span class=\"p\">,</span>\n            <span class=\"nx\">metadata</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">charge</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">250</span><span class=\"p\">,</span>\n            <span class=\"nx\">labelDy</span><span class=\"o\">:</span> <span class=\"s1\">'-1.18em'</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>$ aspath_graph --help    Usage: aspath_graph [OPTIONS] INPUT\n\nOptions:\n  -v, --version                   Show the version and exit.\n  -m, --mode [junos-netconf|txt]  Mode to use\n  -o, --output FILENAME           Output file\n  --asdot                         Whether to add ASDOT notation\n  --ownas TEXT                    Apply perspective of own AS at the beginning\n                                  of PATHS\n  --runserver                     Run local server on 8000\n  --user TEXT                     Only used for relevant modes\n  --nopassword                    If using a login mode, this will enable\n                                  public key auth\n  --yaml FILENAME                 YAML for mapping and ignoring ASes\n  --pprint                        Pretty print JSON\n  -h, --help                      Show this message and exit.\n</pre>\n<p>INPUT can either be a device or file depending on value of MODE. This\ndefaults to a file. (txt)</p>\n<p>OUTPUT can be \u2018-\u2018 to send results to STDOUT.</p>\n<p>If not passing \u2018\u2013nopassword\u2019, you will be prompted for a password for the\nrelevant modes.</p>\n<p>When using \u201c\u2013asdot\u201d to provide ASDOT notation, the raw ASPLAIN will also\nbe provided on the node - just under the \u201craw\u201d attribute.</p>\n<p>YAML can be formatted as such: (Note that \u201cignore\u201d must ONLY be ASPLAIN)</p>\n<pre><span class=\"nt\">label_map</span><span class=\"p\">:</span>\n    <span class=\"nt\">65001</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">SFO</span>\n    <span class=\"nt\">65002</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ORD</span>\n    <span class=\"nt\">65003</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">NYC</span>\n    <span class=\"nt\">65003.1</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">NYC-R1</span>\n    <span class=\"nt\">65003.2</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">NYC-R2</span>\n\n<span class=\"nt\">ignore</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">7224</span>\n    <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">9059</span>\n</pre>\n<p>By default, ASDOT will be labeled according to the firsthalf. Eg, if 65001\nis configured to be labeled as DFW, 65001.211 will appear as DFW-R21. This\nassumes your ToR ASN is your spine ASN + (racknumber*10+1) - to disable\nthis simply set APG_ASDOT_RAW to true/yes/anything.</p>\n<p>Any of the supported options can be passed via ENV by upping the case,\nreplacing \u2018-\u2018 with \u2018_\u2019, and prefixing with \u2018APG\u2019. Eg, \u2018APG_MODE\u2019</p>\n</div>\n\n          </div>"}, "last_serial": 1974896, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "322b76fb93b0397ecd4e5349d4490a68", "sha256": "7f971971492506e13c29232d5daea588c0a4fada0be4351d200c12c223467136"}, "downloads": -1, "filename": "aspath_graph-1.2.tar.gz", "has_sig": false, "md5_digest": "322b76fb93b0397ecd4e5349d4490a68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66393, "upload_time": "2016-02-20T11:51:21", "upload_time_iso_8601": "2016-02-20T11:51:21.339083Z", "url": "https://files.pythonhosted.org/packages/a2/6a/f9dbcfef5b784e0db476ca8c04bface1cde91402011ebbb5eff2b877d46a/aspath_graph-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "84e13c6b8a5be7f07b1d317f15c4d252", "sha256": "1b5c492a3633f1d2809a06345de27a77a3f9decb00b52a514d284b47198ef0bb"}, "downloads": -1, "filename": "aspath_graph-1.3.tar.gz", "has_sig": false, "md5_digest": "84e13c6b8a5be7f07b1d317f15c4d252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66841, "upload_time": "2016-02-24T20:14:23", "upload_time_iso_8601": "2016-02-24T20:14:23.107099Z", "url": "https://files.pythonhosted.org/packages/3e/c6/c37ab2a18174e3faa9d47f0ebe6eca8c1265e5385fcee4f3a0dec97e2e2f/aspath_graph-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "84e13c6b8a5be7f07b1d317f15c4d252", "sha256": "1b5c492a3633f1d2809a06345de27a77a3f9decb00b52a514d284b47198ef0bb"}, "downloads": -1, "filename": "aspath_graph-1.3.tar.gz", "has_sig": false, "md5_digest": "84e13c6b8a5be7f07b1d317f15c4d252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 66841, "upload_time": "2016-02-24T20:14:23", "upload_time_iso_8601": "2016-02-24T20:14:23.107099Z", "url": "https://files.pythonhosted.org/packages/3e/c6/c37ab2a18174e3faa9d47f0ebe6eca8c1265e5385fcee4f3a0dec97e2e2f/aspath_graph-1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:57 2020"}