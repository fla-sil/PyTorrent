{"info": {"author": "\u00d3scar Garc\u00eda Amor", "author_email": "ogarcia@connectical.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Bottle", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Topic :: System", "Topic :: Utilities"], "description": "# sysdweb\nControl systemd services through Web or REST API\n\n## Installation\n\n### From source\n\n```sh\ngit clone https://github.com/ogarcia/sysdweb.git\nvirtualenv3 ./sysdweb-venv\nsource ./sysdweb-venv/bin/activate\ncd sysdweb\npip install -r requirements.txt\npython setup.py install\n```\n\n### From pypi\n\n```sh\nvirtualenv3 ./sysdweb-venv\nsource ./sysdweb-venv/bin/activate\npip install sysdweb\n```\n\n### For Arch Linux users\n\nArch Linux users can install sysdweb from [AUR][1].\n\n## Run\n\nFirst take a look to `sysdweb.conf` file to configure sysdweb. Is self\nexplanatory.\n\nYou can place `sysdweb.conf` in `/etc` for system, in user home\n`~/.config/sysdweb/sysdweb.conf` or in same directory where you run sysdweb.\n\nOnce you have configured sysdweb, simply run.\n\n```\nsysdweb\n```\n\nBy default sysdweb listen in 10080 port to 127.0.0.1, you can change listen\nport and address with `-p` and `-l` or via environment variables.\n\n```sh\nsysdweb -p 9080 -l 0.0.0.0\n```\n\nCurrent config environment variables are the following.\n\n| Variable | Description |\n| --- | --- |\n| `SYSDWEB_CONFIG` | Config file location |\n| `SYSDWEB_HOST` | Listen address |\n| `SYSDWEB_PORT` | Listen port |\n| `SYSDWEB_LOGLEVEL` | Log level, effective values are `WARNING`, `INFO` and `DEBUG` |\n\n## API\n\nYou can control configured services via REST API, for example, with curl.\n\nThe API endpoint is `/api/v1/<service>/<action>`, always `GET` and response\na json with following format.\n\n```json\n{\n  \"<action>\": \"<result>\"\n}\n```\n\nThe `<service>` tag is defined in config file and match with section label.\nFor example, in following config, the service would be `ngx`.\n\n```ini\n[ngx]\ntitle = Nginx\nunit = nginx.service\n```\n\nThe posible `<actions>` are.\n\n* start\n* stop\n* restart\n* reload\n* reloadorrestart\n* status\n* journal\n\nAll actions (except `status` and `journal`) return as result `OK` if can\ncommunicate with DBUS or `Fail` if any error occurs.\n\nFor `status` action, the posible responses are.\n\n* active (started unit)\n* reloading\n* inactive (stopped unit)\n* failed (stopped unit)\n* activating\n* deactivating\n* not-found (for inexistent unit)\n\nBy default `/api/v1/<service>/journal` returns 100 tail lines of journal\nfile of `<service>` unit. You can specify the number of lines by this way.\n\n```\n/api/v1/<service>/journal/200\n```\n\nIn the example defined above all valid enpoins are.\n\n```\nhttp://127.0.0.1:10080/api/v1/ngx/start\nhttp://127.0.0.1:10080/api/v1/ngx/stop\nhttp://127.0.0.1:10080/api/v1/ngx/restart\nhttp://127.0.0.1:10080/api/v1/ngx/reload\nhttp://127.0.0.1:10080/api/v1/ngx/reloadorrestart\nhttp://127.0.0.1:10080/api/v1/ngx/status\nhttp://127.0.0.1:10080/api/v1/ngx/journal\nhttp://127.0.0.1:10080/api/v1/ngx/journal/<number>\n```\n\n[1]: https://aur.archlinux.org/packages/sysdweb/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ogarcia/sysdweb", "keywords": "systemd web api easy", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "sysdweb", "package_url": "https://pypi.org/project/sysdweb/", "platform": "", "project_url": "https://pypi.org/project/sysdweb/", "project_urls": {"Homepage": "https://github.com/ogarcia/sysdweb"}, "release_url": "https://pypi.org/project/sysdweb/1.1.3/", "requires_dist": null, "requires_python": "", "summary": "Control systemd services through Web or REST API", "version": "1.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            # sysdweb<br>Control systemd services through Web or REST API<br><br>## Installation<br><br>### From source<br><br>```sh<br>git clone https://github.com/ogarcia/sysdweb.git<br>virtualenv3 ./sysdweb-venv<br>source ./sysdweb-venv/bin/activate<br>cd sysdweb<br>pip install -r requirements.txt<br>python setup.py install<br>```<br><br>### From pypi<br><br>```sh<br>virtualenv3 ./sysdweb-venv<br>source ./sysdweb-venv/bin/activate<br>pip install sysdweb<br>```<br><br>### For Arch Linux users<br><br>Arch Linux users can install sysdweb from [AUR][1].<br><br>## Run<br><br>First take a look to `sysdweb.conf` file to configure sysdweb. Is self<br>explanatory.<br><br>You can place `sysdweb.conf` in `/etc` for system, in user home<br>`~/.config/sysdweb/sysdweb.conf` or in same directory where you run sysdweb.<br><br>Once you have configured sysdweb, simply run.<br><br>```<br>sysdweb<br>```<br><br>By default sysdweb listen in 10080 port to 127.0.0.1, you can change listen<br>port and address with `-p` and `-l` or via environment variables.<br><br>```sh<br>sysdweb -p 9080 -l 0.0.0.0<br>```<br><br>Current config environment variables are the following.<br><br>| Variable | Description |<br>| --- | --- |<br>| `SYSDWEB_CONFIG` | Config file location |<br>| `SYSDWEB_HOST` | Listen address |<br>| `SYSDWEB_PORT` | Listen port |<br>| `SYSDWEB_LOGLEVEL` | Log level, effective values are `WARNING`, `INFO` and `DEBUG` |<br><br>## API<br><br>You can control configured services via REST API, for example, with curl.<br><br>The API endpoint is `/api/v1/&lt;service&gt;/&lt;action&gt;`, always `GET` and response<br>a json with following format.<br><br>```json<br>{<br>  \"&lt;action&gt;\": \"&lt;result&gt;\"<br>}<br>```<br><br>The `&lt;service&gt;` tag is defined in config file and match with section label.<br>For example, in following config, the service would be `ngx`.<br><br>```ini<br>[ngx]<br>title = Nginx<br>unit = nginx.service<br>```<br><br>The posible `&lt;actions&gt;` are.<br><br>* start<br>* stop<br>* restart<br>* reload<br>* reloadorrestart<br>* status<br>* journal<br><br>All actions (except `status` and `journal`) return as result `OK` if can<br>communicate with DBUS or `Fail` if any error occurs.<br><br>For `status` action, the posible responses are.<br><br>* active (started unit)<br>* reloading<br>* inactive (stopped unit)<br>* failed (stopped unit)<br>* activating<br>* deactivating<br>* not-found (for inexistent unit)<br><br>By default `/api/v1/&lt;service&gt;/journal` returns 100 tail lines of journal<br>file of `&lt;service&gt;` unit. You can specify the number of lines by this way.<br><br>```<br>/api/v1/&lt;service&gt;/journal/200<br>```<br><br>In the example defined above all valid enpoins are.<br><br>```<br>http://127.0.0.1:10080/api/v1/ngx/start<br>http://127.0.0.1:10080/api/v1/ngx/stop<br>http://127.0.0.1:10080/api/v1/ngx/restart<br>http://127.0.0.1:10080/api/v1/ngx/reload<br>http://127.0.0.1:10080/api/v1/ngx/reloadorrestart<br>http://127.0.0.1:10080/api/v1/ngx/status<br>http://127.0.0.1:10080/api/v1/ngx/journal<br>http://127.0.0.1:10080/api/v1/ngx/journal/&lt;number&gt;<br>```<br><br>[1]: https://aur.archlinux.org/packages/sysdweb/\n          </div>"}, "last_serial": 4474212, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "5ce97f1f05776dd18308430a0ed71647", "sha256": "8c5d67caeaa27acce70f2fd838d0d7ac7dc709b9e63571a33493b13c0cd4cc77"}, "downloads": -1, "filename": "sysdweb-1.1.2.tar.gz", "has_sig": false, "md5_digest": "5ce97f1f05776dd18308430a0ed71647", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221051, "upload_time": "2018-02-28T13:00:04", "upload_time_iso_8601": "2018-02-28T13:00:04.752615Z", "url": "https://files.pythonhosted.org/packages/e8/0f/4ff1598acfaab421bbdd7dc02a09ad7fd4d2e4be476800cd806e2d8a8dd8/sysdweb-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "3a0b2a81e9ece646daaeb965b1fd34b2", "sha256": "1dd7c0d8d02e41f818585f24cb2e4c7247254b951fd2e889d234f3963ba6804d"}, "downloads": -1, "filename": "sysdweb-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3a0b2a81e9ece646daaeb965b1fd34b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221992, "upload_time": "2018-11-11T13:04:13", "upload_time_iso_8601": "2018-11-11T13:04:13.286181Z", "url": "https://files.pythonhosted.org/packages/b2/95/11597ec1886d912c4717410cfbb0742ae0e347e710ecf43d9f5e89481ca8/sysdweb-1.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a0b2a81e9ece646daaeb965b1fd34b2", "sha256": "1dd7c0d8d02e41f818585f24cb2e4c7247254b951fd2e889d234f3963ba6804d"}, "downloads": -1, "filename": "sysdweb-1.1.3.tar.gz", "has_sig": false, "md5_digest": "3a0b2a81e9ece646daaeb965b1fd34b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221992, "upload_time": "2018-11-11T13:04:13", "upload_time_iso_8601": "2018-11-11T13:04:13.286181Z", "url": "https://files.pythonhosted.org/packages/b2/95/11597ec1886d912c4717410cfbb0742ae0e347e710ecf43d9f5e89481ca8/sysdweb-1.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:54 2020"}