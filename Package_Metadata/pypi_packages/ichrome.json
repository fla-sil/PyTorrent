{"info": {"author": "ClericPy", "author_email": "clericpy@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# [ichrome](https://github.com/ClericPy/ichrome) [![PyPI](https://img.shields.io/pypi/v/ichrome?style=plastic)](https://pypi.org/project/ichrome/)![PyPI - Wheel](https://img.shields.io/pypi/wheel/ichrome?style=plastic)![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ichrome?style=plastic)![PyPI - Downloads](https://img.shields.io/pypi/dm/ichrome?style=plastic)![PyPI - License](https://img.shields.io/pypi/l/ichrome?style=plastic)\n\n> A toolkit to control Chrome browser with the [Chrome Devtools Protocol(CDP)](https://chromedevtools.github.io/devtools-protocol/), support python3.7+.\n\n## Install\n\n> pip install ichrome -U\n\n## Why?\n\n- pyppeteer / selenium is awesome, but I don't need so much\n  - spelling of pyppeteer is hard to remember.\n  - selenium is slow.\n- async communication with Chrome remote debug port, stable choice. [Recommended]\n- sync way to test CDP,  which is not recommended for complex production environments. [Deprecated]\n\n\n## Features\n\n- Chrome process daemon\n- Connect to existing chrome debug port\n- Operations on Tabs\n\n## Examples\n\n### Quick Start\n\n> 1. Start a new chrome daemon process with headless=False\n> 2. Create the connection to exist chrome browser\n> 3. Operations on the tabs: new tab, wait loading, run javascript, get html, close tab\n> 4. Close the browser GRACEFULLY instead of killing process\n\n<details>\n    <summary><b>AsyncChrome feature list</b></summary>\n\n1. server\n    > return `f\"http://{self.host}:{self.port}\"`, such as `http://127.0.0.1:9222`\n1. version\n    > version info from `/json/version` format like:\n    ```\n    {'Browser': 'Chrome/77.0.3865.90', 'Protocol-Version': '1.3', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36', 'V8-Version': '7.7.299.11', 'WebKit-Version': '537.36 (@58c425ba843df2918d9d4b409331972646c393dd)', 'webSocketDebuggerUrl': 'ws://127.0.0.1:9222/devtools/browser/b5fbd149-959b-4603-b209-cfd26d66bdc1'}\n    ```\n1. `connect` / `check` / `ok`\n    > check alive\n1. `get_tabs` / `tabs` / `get_tab` / `get_tabs`\n    > get the `AsyncTab` instance from `/json`.\n1. `new_tab` / `activate_tab` / `close_tab` / `close_tabs`\n    > operating tabs.\n1. `close_browser`\n    > find the activated tab and send `Browser.close` message, close the connected chrome browser gracefully.\n    ```python\n    await chrome.close_browser()\n    ```\n1. `kill`\n    > force kill the chrome process with self.port.\n    ```python\n    await chrome.kill()\n    ```\n1. `connect_tabs`\n    > connect websockets for multiple tabs in one `with` context, and disconnect before exiting.\n    ```python\n    tab0: AsyncTab = (await chrome.tabs)[0]\n    tab1: AsyncTab = await chrome.new_tab()\n    async with chrome.connect_tabs([tab0, tab1]):\n        assert (await tab0.current_url) == 'about:blank'\n        assert (await tab1.current_url) == 'about:blank'\n    ```\n\n</details>\n\n\n<details>\n    <summary><b>AsyncTab feature list</b></summary>\n\n1. `set_url` / `reload`\n    > navigate to a new url. `reload` equals to `set_url(None)`\n1. `wait_event`\n    > listening the events with given name, and separate from other same-name events with filter_function, finally run the callback_function with result.\n1. `wait_page_loading` / `wait_loading`\n    > wait for `Page.loadEventFired` event, or stop loading while timeout. Different from `wait_loading_finished`.\n1. `wait_response`\n    > filt the `Network.responseReceived` event by `filter_function`, return the `request_dict` which can be used by `get_response`\n1. `wait_request_loading` / `wait_loading_finished`\n    > sometimes event got `request_dict` with `wait_response`, but the ajax request is still fetching, which need to wait the `Network.loadingFinished` event.\n1. `activate` / `activate_tab`\n    > activate tab with websocket / http message.\n2. `close` / `close_tab`\n    > close tab with websocket / http message.\n3. `add_js_onload`\n    > `Page.addScriptToEvaluateOnNewDocument`, which means this javascript code will be run before page loaded.\n4. `clear_browser_cache` / `clear_browser_cookies`\n    > `Network.clearBrowserCache` and `Network.clearBrowserCookies`\n5. `querySelectorAll`\n    > get the tag instance, which contains the `tagName, innerHTML, outerHTML, textContent, attributes` attrs.\n6. `click`\n    > click the element queried by given *css selector*.\n7. `refresh_tab_info`\n    > to refresh the init attrs: `url`, `title`.\n8. `current_html` / `current_title` / `current_url`\n    > get the current html / title / url with `tab.js`. or using the `refresh_tab_info` method and init attrs.\n1. `crash`\n    > `Page.crash`\n2. `get_cookies` / `get_all_cookies` / `delete_cookies` / `set_cookie`\n    > some page cookies operations.\n1. `set_headers` / `set_ua`\n    > `Network.setExtraHTTPHeaders` and `Network.setUserAgentOverride`, used to update headers dynamically.\n2. `close_browser`\n    > send `Browser.close` message to close the chrome browser gracefully.\n1. `get_bounding_client_rect` / `get_element_clip`\n    > `get_element_clip` is alias name for the other, these two method is to get the rect of element which queried by css element.\n2. `screenshot` / `screenshot_element`\n    > get the screenshot base64 encoded image data. `screenshot_element` should be given a css selector to locate the element.\n3. `get_page_size` / `get_screen_size`\n    > size of current window or the whole screen.\n4. `get_response`\n    > get the response body with the given request dict.\n5. `js`\n    > run the given js code, return the raw response from sending `Runtime.evaluate` message.\n6. `inject_js_url`\n    > inject some js url, like `<script src=\"xxx/static/js/jquery.min.js\"></script>` do.\n7. `get_value` & `get_variable`\n    > run the given js variable or expression, and return the result.\n    ```python\n    await tab.get_value('document.title')\n    await tab.get_value(\"document.querySelector('title').innerText\")\n    ```\n8. `keyboard_send`\n    > dispath key event with `Input.dispatchKeyEvent`\n9. `mouse_click`\n    > dispath click event on given position\n10. `mouse_drag`\n    > dispath drag event on given position, and return the target x, y. `duration` arg is to slow down the move speed.\n11. `mouse_drag_rel`\n    > dispath drag event on given offset, and return the target x, y.\n12. `mouse_drag_rel`\n    > drag with offsets continuously.\n    ```python\n    await tab.set_url('https://draw.yunser.com/')\n    walker = await tab.mouse_drag_rel_chain(320, 145).move(50, 0, 0.2).move(\n        0, 50, 0.2).move(-50, 0, 0.2).move(0, -50, 0.2)\n    await walker.move(50 * 1.414, 50 * 1.414, 0.2)\n    ```\n13. `mouse_press` / `mouse_release` / `mouse_move` / `mouse_move_rel` / `mouse_move_rel_chain`\n    > similar to the drag features. These mouse features is only dispatched events, not the real mouse action.\n\n</details>\n\n[More Examples](https://github.com/ClericPy/ichrome/blob/master/examples_async.py)\n\n```python\nfrom ichrome import AsyncChromeDaemon, AsyncChrome\nimport asyncio\n\n\nasync def main():\n    # If there is an existing daemon, such as `python -m ichrome`, the `async with AsyncChromeDaemon` context can be omitted.\n    async with AsyncChromeDaemon():\n        # connect to an opened chrome\n        async with AsyncChrome() as chrome:\n            tab = await chrome.new_tab(url=\"https://github.com/ClericPy\")\n            # async with tab() as tab:\n            # and `as tab` can be omitted\n            async with tab():\n                await tab.wait_loading(2)\n                await tab.js(\"document.write('<h1>Document updated.</h1>')\")\n                await asyncio.sleep(1)\n                # await tab.js('alert(\"test ok\")')\n                print('output:', await tab.html)\n                # output: <html><head></head><body><h1>Document updated.</h1></body></html>\n                await tab.close()\n            # close_browser gracefully, I have no more need of chrome instance\n            await chrome.close_browser()\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\n```\n\n### Command Line Usage\n\n> Be used for launching a chrome daemon process. The unhandled args will be treated as chrome raw args and appended to extra_config list.\n> \n> [Chromium Command Line Args List](https://peter.sh/experiments/chromium-command-line-switches/)\n\n```bash\n\u03bb python3 -m ichrome -s 9222\n2018-11-27 23:01:59 DEBUG [ichrome] base.py(329): kill chrome.exe --remote-debugging-port=9222\n2018-11-27 23:02:00 DEBUG [ichrome] base.py(329): kill chrome.exe --remote-debugging-port=9222\n\n\u03bb python3 -m ichrome -p 9222 --start_url \"http://bing.com\" --disable_image\n2018-11-27 23:03:57 INFO  [ichrome] __main__.py(69): ChromeDaemon cmd args: {'daemon': True, 'block': True, 'chrome_path': '', 'host': 'localhost', 'port': 9222, 'headless': False, 'user_agent': '', 'proxy': '', 'user_data_dir': None, 'disable_image': True, 'start_url': 'http://bing.com', 'extra_config': '', 'max_deaths': 1, 'timeout': 2}\n```\n\n> Details: python3 -m ichrome --help\n\n```\nusage:\n    All the unknown args will be append to extra_config.\nDemo:\n    > python -m ichrome --host=127.0.0.1 --window-size=1200,800 --incognito\n    > ChromeDaemon cmd args: {'daemon': True, 'block': True, 'chrome_path': '', 'host': '127.0.0.1', 'port': 9222, 'headless': False, 'user_agent': '', 'proxy': '', 'user_data_dir': None, 'disable_image': False, 'start_url': 'about:blank', 'extra_config':['--window-size=1212,1212', '--incognito'], 'max_deaths': 1, 'timeout': 2}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show ichrome version info\n  -c CHROME_PATH, --chrome_path CHROME_PATH\n                        chrome_path\n  --host HOST           host\n  -p PORT, --port PORT  port\n  --headless            is_headless\n  -s SHUTDOWN, --shutdown SHUTDOWN\n                        shutdown the port\n  --user_agent USER_AGENT\n                        user_agent\n  --proxy PROXY         proxy\n  --user_data_dir USER_DATA_DIR\n                        user_data_dir\n  --disable_image       disable_image\n  --start_url START_URL\n                        start_url\n  --max_deaths MAX_DEATHS\n                        max_deaths\n  --timeout TIMEOUT     timeout\n```\n\n### [Async] Operating tabs with coroutines\n\n> Run in a completely asynchronous environment, it's a stable choice.\n\n<details>\n    <summary>Code</summary>\n\n```python\nimport asyncio\n\n\nasync def test_examples():\n    from ichrome import AsyncChrome as Chrome\n    from ichrome import AsyncTab as Tab\n    from ichrome import AsyncChromeDaemon, Tag, logger\n    logger.setLevel('DEBUG')\n    # Tab._log_all_recv = True\n    port = 9222\n\n    async with AsyncChromeDaemon(host=\"127.0.0.1\", port=port, max_deaths=1):\n        # ===================== Chrome Test Cases =====================\n        async with Chrome() as chrome:\n            assert str(chrome) == '<Chrome(connected): http://127.0.0.1:9222>'\n            assert chrome.server == 'http://127.0.0.1:9222'\n            try:\n                await chrome.version\n            except AttributeError as e:\n                assert str(\n                    e\n                ) == 'Chrome has not connected. `await chrome.connect()` before request.'\n            # waiting chrome launching\n            for _ in range(5):\n                connected = await chrome.connect()\n                if connected:\n                    break\n                await asyncio.sleep(1)\n            assert connected is True\n            version = await chrome.version\n            assert isinstance(version, dict) and 'Browser' in version\n            ok = await chrome.check()\n            assert ok is True\n            ok = await chrome.ok\n            assert ok is True\n            resp = await chrome.get_server('json')\n            assert isinstance(resp.json(), list)\n            tabs1: Tab = await chrome.get_tabs()\n            tabs2: Tab = await chrome.tabs\n            assert tabs1 == tabs2\n            tab0: Tab = tabs1[0]\n            tab1: Tab = await chrome.new_tab()\n            assert isinstance(tab1, Tab)\n            await asyncio.sleep(1)\n            await chrome.activate_tab(tab0)\n            async with chrome.connect_tabs([tab0, tab1]):\n                assert (await tab0.current_url) == 'about:blank'\n                assert (await tab1.current_url) == 'about:blank'\n            async with chrome.connect_tabs(tab0):\n                assert await tab0.current_url == 'about:blank'\n            await chrome.close_tab(tab1)\n            # ===================== Tab Test Cases =====================\n            tab: Tab = await chrome.new_tab()\n            assert tab.ws is None\n            async with tab():\n                assert tab.ws\n            assert tab.ws is None\n            # also work: async with tab.connect():\n            async with tab():\n                assert tab.status == 'connected'\n                assert tab.msg_id == tab.msg_id - 1\n                assert await tab.refresh_tab_info()\n\n                # watch the tabs switch\n                await tab.activate_tab()\n                await asyncio.sleep(.2)\n                await tab0.activate_tab()\n                await asyncio.sleep(.2)\n                await tab.activate_tab()\n\n                assert await tab.send('Network.enable') == {\n                    'id': 3,\n                    'result': {}\n                }\n                await tab.clear_browser_cookies()\n                assert len(await tab.get_cookies(urls='http://python.org')) == 0\n                assert await tab.set_cookie(\n                    'test', 'test_value', url='http://python.org')\n                assert await tab.set_cookie(\n                    'test2', 'test_value', url='http://python.org')\n                assert len(await tab.get_cookies(urls='http://python.org')) == 2\n                assert await tab.delete_cookies('test', url='http://python.org')\n                assert len(await tab.get_cookies(urls='http://python.org')) == 1\n                # get all Browser cookies\n                assert len(await tab.get_all_cookies()) > 0\n                # disable Network\n                assert await tab.disable('Network')\n                # set new url for this tab, timeout will stop loading\n                assert await tab.set_url('http://python.org', timeout=2)\n                # reload the page\n                assert await tab.reload(timeout=2)\n                # here should be press OK by human in 10 secs, get the returned result\n                js_result = await tab.js('document.title', timeout=3)\n                # {'id': 18, 'result': {'result': {'type': 'string', 'value': 'Welcome to Python.org'}}}\n                assert 'result' in js_result\n                # inject JS timeout return None\n                assert (await tab.js('alert()', timeout=0.1)) is None\n                # close the alert dialog\n                await tab.enable('Page')\n                await tab.send('Page.handleJavaScriptDialog', accept=True)\n                # querySelectorAll with JS, return list of Tag object\n                tag_list = await tab.querySelectorAll('#id-search-field')\n                assert tag_list[0].tagName == 'input'\n                # querySelectorAll with JS, index arg is Not None, return Tag or None\n                one_tag = await tab.querySelectorAll(\n                    '#id-search-field', index=0)\n                assert isinstance(one_tag, Tag)\n                # inject js url: vue.js\n                # get window.Vue variable before injecting\n                vue_obj = await tab.js('window.Vue')\n                # {'id': 22, 'result': {'result': {'type': 'undefined'}}}\n                assert 'undefined' in str(vue_obj)\n                assert await tab.inject_js_url(\n                    'https://cdn.staticfile.org/vue/2.6.10/vue.min.js',\n                    timeout=3)\n                vue_obj = await tab.js('window.Vue')\n                # {'id': 23, 'result': {'result': {'type': 'function', 'className': 'Function', 'description': 'function wn(e){this._init(e)}', 'objectId': '{\"injectedScriptId\":1,\"id\":1}'}}}\n                assert 'Function' in str(vue_obj)\n\n                # update title\n                await tab.js(\"document.title = 'Press about'\")\n                assert (await tab.current_title) == 'Press about'\n\n                # wait_response by filter_function\n                # {'method': 'Network.responseReceived', 'params': {'requestId': '1000003000.69', 'loaderId': 'D7814CD633EDF3E699523AF0C4E9DB2C', 'timestamp': 207483.974238, 'type': 'Script', 'response': {'url': 'https://www.python.org/static/js/libs/masonry.pkgd.min.js', 'status': 200, 'statusText': '', 'headers': {'date': 'Sat, 05 Oct 2019 08:18:34 GMT', 'via': '1.1 vegur, 1.1 varnish, 1.1 varnish', 'last-modified': 'Tue, 24 Sep 2019 18:31:03 GMT', 'server': 'nginx', 'age': '290358', 'etag': '\"5d8a60e7-6643\"', 'x-served-by': 'cache-iad2137-IAD, cache-tyo19928-TYO', 'x-cache': 'HIT, HIT', 'content-type': 'application/x-javascript', 'status': '200', 'cache-control': 'max-age=604800, public', 'accept-ranges': 'bytes', 'x-timer': 'S1570263515.866582,VS0,VE0', 'content-length': '26179', 'x-cache-hits': '1, 170'}, 'mimeType': 'application/x-javascript', 'connectionReused': False, 'connectionId': 0, 'remoteIPAddress': '151.101.108.223', 'remotePort': 443, 'fromDiskCache': True, 'fromServiceWorker': False, 'fromPrefetchCache': False, 'encodedDataLength': 0, 'timing': {'requestTime': 207482.696803, 'proxyStart': -1, 'proxyEnd': -1, 'dnsStart': -1, 'dnsEnd': -1, 'connectStart': -1, 'connectEnd': -1, 'sslStart': -1, 'sslEnd': -1, 'workerStart': -1, 'workerReady': -1, 'sendStart': 0.079, 'sendEnd': 0.079, 'pushStart': 0, 'pushEnd': 0, 'receiveHeadersEnd': 0.836}, 'protocol': 'h2', 'securityState': 'unknown'}, 'frameId': 'A2971702DE69F008914F18EAE6514DD5'}}\n                async def cb(request):\n                    if request:\n                        await tab.wait_request_loading(request, 5)\n                        ok = 'Masonry PACKAGED' in (\n                            await tab.get_response(request))['result']['body']\n                        logger.warning(\n                            f'check wait_response callback, get_response {ok}')\n                        assert ok\n                    else:\n                        raise ValueError\n\n                # listening response\n                def filter_function(r):\n                    ok = 'www.python.org/static/js/libs/masonry.pkgd.min.js' in r[\n                        'params']['response']['url']\n                    return print('get response url:',\n                                 r['params']['response']['url'], ok) or ok\n\n                task = asyncio.ensure_future(\n                    tab.wait_response(\n                        filter_function=filter_function,\n                        callback_function=cb,\n                        timeout=10),\n                    loop=tab.loop)\n                await tab.click('#about>a')\n                await tab.wait_loading(2)\n                await task\n                # click download link, without wait_loading.\n                # request\n                # {'method': 'Network.responseReceived', 'params': {'requestId': '2FAFC4FC410A6DEDE88553B1836C530B', 'loaderId': '2FAFC4FC410A6DEDE88553B1836C530B', 'timestamp': 212239.182469, 'type': 'Document', 'response': {'url': 'https://www.python.org/downloads/', 'status': 200, 'statusText': '', 'headers': {'status': '200', 'server': 'nginx', 'content-type': 'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'cache-control': 'max-age=604800, public', 'via': '1.1 vegur\\n1.1 varnish\\n1.1 varnish', 'accept-ranges': 'bytes', 'date': 'Sat, 05 Oct 2019 10:51:48 GMT', 'age': '282488', 'x-served-by': 'cache-iad2139-IAD, cache-hnd18720-HND', 'x-cache': 'MISS, HIT', 'x-cache-hits': '0, 119', 'x-timer': 'S1570272708.444646,VS0,VE0', 'content-length': '113779'}, 'mimeType': 'text/html', 'connectionReused': False, 'connectionId': 0, 'remoteIPAddress': '123.23.54.43', 'remotePort': 443, 'fromDiskCache': True, 'fromServiceWorker': False, 'fromPrefetchCache': False, 'encodedDataLength': 0, 'timing': {'requestTime': 212239.179388, 'proxyStart': -1, 'proxyEnd': -1, 'dnsStart': -1, 'dnsEnd': -1, 'connectStart': -1, 'connectEnd': -1, 'sslStart': -1, 'sslEnd': -1, 'workerStart': -1, 'workerReady': -1, 'sendStart': 0.392, 'sendEnd': 0.392, 'pushStart': 0, 'pushEnd': 0, 'receiveHeadersEnd': 0.975}, 'protocol': 'h2', 'securityState': 'secure', 'securityDetails': {'protocol': 'TLS 1.2', 'keyExchange': 'ECDHE_RSA', 'keyExchangeGroup': 'X25519', 'cipher': 'AES_128_GCM', 'certificateId': 0, 'subjectName': 'www.python.org', 'sanList': ['www.python.org', 'docs.python.org', 'bugs.python.org', 'wiki.python.org', 'hg.python.org', 'mail.python.org', 'pypi.python.org', 'packaging.python.org', 'login.python.org', 'discuss.python.org', 'us.pycon.org', 'pypi.io', 'docs.pypi.io', 'pypi.org', 'docs.pypi.org', 'donate.pypi.org', 'devguide.python.org', 'www.bugs.python.org', 'python.org'], 'issuer': 'DigiCert SHA2 Extended Validation Server CA', 'validFrom': 1537228800, 'validTo': 1602676800, 'signedCertificateTimestampList': [], 'certificateTransparencyCompliance': 'unknown'}}, 'frameId': '882CFDEEA07EB00A5E7510ADD2A39F22'}}\n                # response\n                # {'id': 30, 'result': {'body': '<!doctype html>\\n<!--[if lt IE 7]>   <html class=\"no-js ie6 lt-ie...', 'base64Encoded': False}}\n                # test set_ua\n                await tab.set_ua('Test UA')\n                await tab.add_js_onload(source='window.title=123456789')\n                await tab.set_url('http://httpbin.org/forms/post')\n                assert (await tab.get_variable('window.title')) == 123456789\n                html = await tab.get_html()\n                assert 'Customer name:' in html\n                # test double click some positions. test keyboard_send input\n                rect = await tab.get_bounding_client_rect('[type=\"email\"]')\n                await tab.mouse_click(rect['left'], rect['top'], count=1)\n                await tab.keyboard_send(text='1')\n                await tab.keyboard_send(text='2')\n                await tab.keyboard_send(text='3')\n                await tab.mouse_click(rect['left'], rect['top'], count=2)\n                selection = await tab.get_variable(\n                    'window.getSelection().toString()')\n                assert selection == '123'\n                # test set_headers\n                await tab.set_headers({'A': '1', 'B': '2'})\n                await tab.set_url('http://httpbin.org/get')\n                html = await tab.get_html()\n                assert '\"A\": \"1\"' in html and '\"B\": \"2\"' in html\n                # screenshot\n                await tab.set_url('http://python.org')\n                await tab.wait_loading(1)\n                screen = await tab.screenshot()\n                part = await tab.screenshot_element('.site-headline')\n                assert screen\n                assert part\n                assert len(screen) > len(part)\n                # draw\n                await tab.set_url('https://awwapp.com/')\n                await tab.wait_loading(1, timeout_stop_loading=True)\n                await tab.mouse_click(5, 5)\n                walker = await tab.mouse_drag_rel_chain(320, 145).move(50, 0, 0.2).move(\n                    0, 50, 0.2).move(-50, 0, 0.2).move(0, -50, 0.2)\n                await walker.move(50 * 1.414, 50 * 1.414, 0.2)\n                # clear cache\n                assert await tab.clear_browser_cache()\n                # close tab\n                await tab.close()\n            # close_browser gracefully, I have no more need of chrome instance\n            await chrome.close_browser()\n            # await chrome.kill()\n            sep = f'\\n{\"=\" * 80}\\n'\n            logger.critical(\n                f'{sep}Congratulations, all test cases passed.{sep}')\n\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test_examples())\n\n```\n\n</details>\n\n\n### [Sync] Simple Usage (Archived)\n\n> Sync utils will be hardly maintained, only for simple test usage.\n>\n> No more new features to be developed.\n\n<details>\n    <summary>Code</summary>\n\n```python\n\"\"\"\nTest normal usage of ichrome.\n\n1. use `with` context for launching ChromeDaemon daemon process.\n2. init Chrome for connecting with chrome background server.\n3. Tab ops:\n  3.1 create a new tab\n  3.2 goto new url with tab.set_url, and will stop load for timeout.\n  3.3 get cookies from url\n  3.4 inject the jQuery lib by a static url.\n  3.5 auto click ok from the alert dialog.\n  3.6 remove `href` from the third `a` tag, which is selected by css path.\n  3.7 remove all `href` from the `a` tag, which is selected by css path.\n  3.8 use querySelectorAll to get the elements.\n  3.9 Network crawling from the background ajax request.\n  3.10 click some element by tab.click with css selector.\n  3.11 show html source code of the tab\n\"\"\"\n\n\ndef test_example():\n    from ichrome import Chrome, ChromeDaemon, logger\n    import re\n    import json\n    \"\"\"Example for crawling a special background request.\"\"\"\n\n    # reset default logger level, such as DEBUG\n    # import logging\n    # logger.setLevel(logging.INFO)\n    # launch the Chrome process and daemon process, will auto shutdown by 'with' expression.\n    with ChromeDaemon(host=\"127.0.0.1\", port=9222, max_deaths=1) as chromed:\n        logger.info(chromed)\n        # create connection to Chrome Devtools\n        chrome = Chrome(host=\"127.0.0.1\", port=9222, timeout=3, retry=1)\n        # now create a new tab without url\n        tab = chrome.new_tab()\n        # reset the url to bing.com, if loading time more than 5 seconds, will stop loading.\n        # if inject js success, will alert Vue\n        tab.set_url(\n            \"https://www.bing.com/\",\n            referrer=\"https://www.github.com/\",\n            timeout=5)\n        # get_cookies from url\n        logger.info(tab.get_cookies(\"http://cn.bing.com\"))\n        # test inject_js, if success, will alert jQuery version info 3.3.1\n        logger.info(\n            tab.inject_js(\n                \"https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js\"))\n        logger.info(\n            tab.js(\"alert('jQuery inject success:' + jQuery.fn.jquery)\"))\n        tab.js(\n            'alert(\"Check the links above disabled, and then input `test` to the input position.\")'\n        )\n        # automate press accept for alert~\n        tab.send(\"Page.handleJavaScriptDialog\", accept=True)\n        # remove href of the a tag.\n        tab.click(\"#sc_hdu>li>a\", index=3, action=\"removeAttribute('href')\")\n        # remove href of all the 'a' tag.\n        tab.querySelectorAll(\n            \"#sc_hdu>li>a\", index=None, action=\"removeAttribute('href')\")\n        # use querySelectorAll to get the elements.\n        for i in tab.querySelectorAll(\"#sc_hdu>li\"):\n            logger.info(\"Tag: %s, id:%s, class:%s, text:%s\" %\n                        (i, i.get(\"id\"), i.get(\"class\"), i.text))\n        # enable the Network function, otherwise will not recv Network request/response.\n        logger.info(tab.send(\"Network.enable\"))\n        # here will block until input string \"test\" in the input position.\n        # tab is waiting for the event Network.responseReceived which accord with the given filter_function.\n        recv_string = tab.wait_event(\n            \"Network.responseReceived\",\n            filter_function=lambda r: re.search(r\"&\\w+=test\", r or \"\"),\n            wait_seconds=None,\n        )\n        # now catching the \"Network.responseReceived\" event string, load the json.\n        recv_string = json.loads(recv_string)\n        # get the requestId to fetch its response body.\n        request_id = recv_string[\"params\"][\"requestId\"]\n        logger.info(\"requestId: %s\" % request_id)\n        # send request for getResponseBody\n        resp = tab.send(\n            \"Network.getResponseBody\", requestId=request_id, timeout=5)\n        # now resp is the response body result.\n        logger.info(\"getResponseBody success %s\" % resp)\n        # directly click the button matched the cssselector #sb_form_go, here is the submit button.\n        logger.info(tab.click(\"#sb_form_go\"))\n        tab.wait_loading(3)\n        # show some html source code of the tab\n        logger.info(tab.html[:100])\n        tab.send('Browser.close')\n        # # now click close button of the chrome browser.\n        # chromed.run_forever()\n\n\nif __name__ == \"__main__\":\n    test_example()\n\n```\n\n</details>\n\n### TODO\n\n- [x] ~~Concurrent support. (gevent, threading, asyncio)~~\n- [x] Add auto_restart while crash.\n- [ ] ~~Auto remove the zombie tabs with a lifebook.~~\n- [x] Add some useful examples.\n- [x] Coroutine support (for asyncio).\n- [x] Standard test cases.\n- [ ] HTTP apis server console [fastapi]. (maybe write a new lib)\n- [ ] Complete document.\n\n## Document\n\n- On the way...\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ClericPy/ichrome", "keywords": "chrome", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "ichrome", "package_url": "https://pypi.org/project/ichrome/", "platform": "any", "project_url": "https://pypi.org/project/ichrome/", "project_urls": {"Homepage": "https://github.com/ClericPy/ichrome"}, "release_url": "https://pypi.org/project/ichrome/1.1.5/", "requires_dist": ["psutil", "torequests (>=4.8.20)", "websocket-client", "aiofiles"], "requires_python": "", "summary": "A toolkit for using chrome browser with the [Chrome Devtools Protocol(CDP)](https://chromedevtools.github.io/devtools-protocol/), support python3.7+. Read more: https://github.com/ClericPy/ichrome.", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><a href=\"https://github.com/ClericPy/ichrome\" rel=\"nofollow\">ichrome</a> <a href=\"https://pypi.org/project/ichrome/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9247acf776d211c79c08f84ece6eb90c05e01920/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f696368726f6d653f7374796c653d706c6173746963\"></a><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c06e25d7ac4d5683386bfcbf7ca5b899072b5636/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f696368726f6d653f7374796c653d706c6173746963\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50caf649358f71520a2b60a2f5bd285a0a7d5dfd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f696368726f6d653f7374796c653d706c6173746963\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78ff42133f2bb8bbc97c67b191f8445d181c8ca4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f696368726f6d653f7374796c653d706c6173746963\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2047ee8c2c0199a43ef7cbdea43bdd0593df72ed/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f696368726f6d653f7374796c653d706c6173746963\"></h1>\n<blockquote>\n<p>A toolkit to control Chrome browser with the <a href=\"https://chromedevtools.github.io/devtools-protocol/\" rel=\"nofollow\">Chrome Devtools Protocol(CDP)</a>, support python3.7+.</p>\n</blockquote>\n<h2>Install</h2>\n<blockquote>\n<p>pip install ichrome -U</p>\n</blockquote>\n<h2>Why?</h2>\n<ul>\n<li>pyppeteer / selenium is awesome, but I don't need so much\n<ul>\n<li>spelling of pyppeteer is hard to remember.</li>\n<li>selenium is slow.</li>\n</ul>\n</li>\n<li>async communication with Chrome remote debug port, stable choice. [Recommended]</li>\n<li>sync way to test CDP,  which is not recommended for complex production environments. [Deprecated]</li>\n</ul>\n<h2>Features</h2>\n<ul>\n<li>Chrome process daemon</li>\n<li>Connect to existing chrome debug port</li>\n<li>Operations on Tabs</li>\n</ul>\n<h2>Examples</h2>\n<h3>Quick Start</h3>\n<blockquote>\n<ol>\n<li>Start a new chrome daemon process with headless=False</li>\n<li>Create the connection to exist chrome browser</li>\n<li>Operations on the tabs: new tab, wait loading, run javascript, get html, close tab</li>\n<li>Close the browser GRACEFULLY instead of killing process</li>\n</ol>\n</blockquote>\n<details>\n    <summary><b>AsyncChrome feature list</b></summary>\n<ol>\n<li>server\n<blockquote>\n<p>return <code>f\"http://{self.host}:{self.port}\"</code>, such as <code>http://127.0.0.1:9222</code></p>\n</blockquote>\n</li>\n<li>version\n<blockquote>\n<p>version info from <code>/json/version</code> format like:</p>\n</blockquote>\n<pre><code>{'Browser': 'Chrome/77.0.3865.90', 'Protocol-Version': '1.3', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36', 'V8-Version': '7.7.299.11', 'WebKit-Version': '537.36 (@58c425ba843df2918d9d4b409331972646c393dd)', 'webSocketDebuggerUrl': 'ws://127.0.0.1:9222/devtools/browser/b5fbd149-959b-4603-b209-cfd26d66bdc1'}\n</code></pre>\n</li>\n<li><code>connect</code> / <code>check</code> / <code>ok</code>\n<blockquote>\n<p>check alive</p>\n</blockquote>\n</li>\n<li><code>get_tabs</code> / <code>tabs</code> / <code>get_tab</code> / <code>get_tabs</code>\n<blockquote>\n<p>get the <code>AsyncTab</code> instance from <code>/json</code>.</p>\n</blockquote>\n</li>\n<li><code>new_tab</code> / <code>activate_tab</code> / <code>close_tab</code> / <code>close_tabs</code>\n<blockquote>\n<p>operating tabs.</p>\n</blockquote>\n</li>\n<li><code>close_browser</code>\n<blockquote>\n<p>find the activated tab and send <code>Browser.close</code> message, close the connected chrome browser gracefully.</p>\n</blockquote>\n<pre><span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">close_browser</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li><code>kill</code>\n<blockquote>\n<p>force kill the chrome process with self.port.</p>\n</blockquote>\n<pre><span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">kill</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li><code>connect_tabs</code>\n<blockquote>\n<p>connect websockets for multiple tabs in one <code>with</code> context, and disconnect before exiting.</p>\n</blockquote>\n<pre><span class=\"n\">tab0</span><span class=\"p\">:</span> <span class=\"n\">AsyncTab</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">tabs</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">tab1</span><span class=\"p\">:</span> <span class=\"n\">AsyncTab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">new_tab</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">connect_tabs</span><span class=\"p\">([</span><span class=\"n\">tab0</span><span class=\"p\">,</span> <span class=\"n\">tab1</span><span class=\"p\">]):</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab0</span><span class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'about:blank'</span>\n    <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab1</span><span class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'about:blank'</span>\n</pre>\n</li>\n</ol>\n</details>\n<details>\n    <summary><b>AsyncTab feature list</b></summary>\n<ol>\n<li><code>set_url</code> / <code>reload</code>\n<blockquote>\n<p>navigate to a new url. <code>reload</code> equals to <code>set_url(None)</code></p>\n</blockquote>\n</li>\n<li><code>wait_event</code>\n<blockquote>\n<p>listening the events with given name, and separate from other same-name events with filter_function, finally run the callback_function with result.</p>\n</blockquote>\n</li>\n<li><code>wait_page_loading</code> / <code>wait_loading</code>\n<blockquote>\n<p>wait for <code>Page.loadEventFired</code> event, or stop loading while timeout. Different from <code>wait_loading_finished</code>.</p>\n</blockquote>\n</li>\n<li><code>wait_response</code>\n<blockquote>\n<p>filt the <code>Network.responseReceived</code> event by <code>filter_function</code>, return the <code>request_dict</code> which can be used by <code>get_response</code></p>\n</blockquote>\n</li>\n<li><code>wait_request_loading</code> / <code>wait_loading_finished</code>\n<blockquote>\n<p>sometimes event got <code>request_dict</code> with <code>wait_response</code>, but the ajax request is still fetching, which need to wait the <code>Network.loadingFinished</code> event.</p>\n</blockquote>\n</li>\n<li><code>activate</code> / <code>activate_tab</code>\n<blockquote>\n<p>activate tab with websocket / http message.</p>\n</blockquote>\n</li>\n<li><code>close</code> / <code>close_tab</code>\n<blockquote>\n<p>close tab with websocket / http message.</p>\n</blockquote>\n</li>\n<li><code>add_js_onload</code>\n<blockquote>\n<p><code>Page.addScriptToEvaluateOnNewDocument</code>, which means this javascript code will be run before page loaded.</p>\n</blockquote>\n</li>\n<li><code>clear_browser_cache</code> / <code>clear_browser_cookies</code>\n<blockquote>\n<p><code>Network.clearBrowserCache</code> and <code>Network.clearBrowserCookies</code></p>\n</blockquote>\n</li>\n<li><code>querySelectorAll</code>\n<blockquote>\n<p>get the tag instance, which contains the <code>tagName, innerHTML, outerHTML, textContent, attributes</code> attrs.</p>\n</blockquote>\n</li>\n<li><code>click</code>\n<blockquote>\n<p>click the element queried by given <em>css selector</em>.</p>\n</blockquote>\n</li>\n<li><code>refresh_tab_info</code>\n<blockquote>\n<p>to refresh the init attrs: <code>url</code>, <code>title</code>.</p>\n</blockquote>\n</li>\n<li><code>current_html</code> / <code>current_title</code> / <code>current_url</code>\n<blockquote>\n<p>get the current html / title / url with <code>tab.js</code>. or using the <code>refresh_tab_info</code> method and init attrs.</p>\n</blockquote>\n</li>\n<li><code>crash</code>\n<blockquote>\n<p><code>Page.crash</code></p>\n</blockquote>\n</li>\n<li><code>get_cookies</code> / <code>get_all_cookies</code> / <code>delete_cookies</code> / <code>set_cookie</code>\n<blockquote>\n<p>some page cookies operations.</p>\n</blockquote>\n</li>\n<li><code>set_headers</code> / <code>set_ua</code>\n<blockquote>\n<p><code>Network.setExtraHTTPHeaders</code> and <code>Network.setUserAgentOverride</code>, used to update headers dynamically.</p>\n</blockquote>\n</li>\n<li><code>close_browser</code>\n<blockquote>\n<p>send <code>Browser.close</code> message to close the chrome browser gracefully.</p>\n</blockquote>\n</li>\n<li><code>get_bounding_client_rect</code> / <code>get_element_clip</code>\n<blockquote>\n<p><code>get_element_clip</code> is alias name for the other, these two method is to get the rect of element which queried by css element.</p>\n</blockquote>\n</li>\n<li><code>screenshot</code> / <code>screenshot_element</code>\n<blockquote>\n<p>get the screenshot base64 encoded image data. <code>screenshot_element</code> should be given a css selector to locate the element.</p>\n</blockquote>\n</li>\n<li><code>get_page_size</code> / <code>get_screen_size</code>\n<blockquote>\n<p>size of current window or the whole screen.</p>\n</blockquote>\n</li>\n<li><code>get_response</code>\n<blockquote>\n<p>get the response body with the given request dict.</p>\n</blockquote>\n</li>\n<li><code>js</code>\n<blockquote>\n<p>run the given js code, return the raw response from sending <code>Runtime.evaluate</code> message.</p>\n</blockquote>\n</li>\n<li><code>inject_js_url</code>\n<blockquote>\n<p>inject some js url, like <code>&lt;script src=\"xxx/static/js/jquery.min.js\"&gt;&lt;/script&gt;</code> do.</p>\n</blockquote>\n</li>\n<li><code>get_value</code> &amp; <code>get_variable</code>\n<blockquote>\n<p>run the given js variable or expression, and return the result.</p>\n</blockquote>\n<pre><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'document.title'</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s2\">\"document.querySelector('title').innerText\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><code>keyboard_send</code>\n<blockquote>\n<p>dispath key event with <code>Input.dispatchKeyEvent</code></p>\n</blockquote>\n</li>\n<li><code>mouse_click</code>\n<blockquote>\n<p>dispath click event on given position</p>\n</blockquote>\n</li>\n<li><code>mouse_drag</code>\n<blockquote>\n<p>dispath drag event on given position, and return the target x, y. <code>duration</code> arg is to slow down the move speed.</p>\n</blockquote>\n</li>\n<li><code>mouse_drag_rel</code>\n<blockquote>\n<p>dispath drag event on given offset, and return the target x, y.</p>\n</blockquote>\n</li>\n<li><code>mouse_drag_rel</code>\n<blockquote>\n<p>drag with offsets continuously.</p>\n</blockquote>\n<pre><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'https://draw.yunser.com/'</span><span class=\"p\">)</span>\n<span class=\"n\">walker</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">mouse_drag_rel_chain</span><span class=\"p\">(</span><span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">145</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span>\n    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">walker</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mf\">1.414</span><span class=\"p\">,</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mf\">1.414</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><code>mouse_press</code> / <code>mouse_release</code> / <code>mouse_move</code> / <code>mouse_move_rel</code> / <code>mouse_move_rel_chain</code>\n<blockquote>\n<p>similar to the drag features. These mouse features is only dispatched events, not the real mouse action.</p>\n</blockquote>\n</li>\n</ol>\n</details>\n<p><a href=\"https://github.com/ClericPy/ichrome/blob/master/examples_async.py\" rel=\"nofollow\">More Examples</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ichrome</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncChromeDaemon</span><span class=\"p\">,</span> <span class=\"n\">AsyncChrome</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># If there is an existing daemon, such as `python -m ichrome`, the `async with AsyncChromeDaemon` context can be omitted.</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AsyncChromeDaemon</span><span class=\"p\">():</span>\n        <span class=\"c1\"># connect to an opened chrome</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AsyncChrome</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">chrome</span><span class=\"p\">:</span>\n            <span class=\"n\">tab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">new_tab</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://github.com/ClericPy\"</span><span class=\"p\">)</span>\n            <span class=\"c1\"># async with tab() as tab:</span>\n            <span class=\"c1\"># and `as tab` can be omitted</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">tab</span><span class=\"p\">():</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_loading</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s2\">\"document.write('&lt;h1&gt;Document updated.&lt;/h1&gt;')\"</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"c1\"># await tab.js('alert(\"test ok\")')</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'output:'</span><span class=\"p\">,</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">)</span>\n                <span class=\"c1\"># output: &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Document updated.&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"c1\"># close_browser gracefully, I have no more need of chrome instance</span>\n            <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">close_browser</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<h3>Command Line Usage</h3>\n<blockquote>\n<p>Be used for launching a chrome daemon process. The unhandled args will be treated as chrome raw args and appended to extra_config list.</p>\n<p><a href=\"https://peter.sh/experiments/chromium-command-line-switches/\" rel=\"nofollow\">Chromium Command Line Args List</a></p>\n</blockquote>\n<pre>\u03bb python3 -m ichrome -s <span class=\"m\">9222</span>\n<span class=\"m\">2018</span>-11-27 <span class=\"m\">23</span>:01:59 DEBUG <span class=\"o\">[</span>ichrome<span class=\"o\">]</span> base.py<span class=\"o\">(</span><span class=\"m\">329</span><span class=\"o\">)</span>: <span class=\"nb\">kill</span> chrome.exe --remote-debugging-port<span class=\"o\">=</span><span class=\"m\">9222</span>\n<span class=\"m\">2018</span>-11-27 <span class=\"m\">23</span>:02:00 DEBUG <span class=\"o\">[</span>ichrome<span class=\"o\">]</span> base.py<span class=\"o\">(</span><span class=\"m\">329</span><span class=\"o\">)</span>: <span class=\"nb\">kill</span> chrome.exe --remote-debugging-port<span class=\"o\">=</span><span class=\"m\">9222</span>\n\n\u03bb python3 -m ichrome -p <span class=\"m\">9222</span> --start_url <span class=\"s2\">\"http://bing.com\"</span> --disable_image\n<span class=\"m\">2018</span>-11-27 <span class=\"m\">23</span>:03:57 INFO  <span class=\"o\">[</span>ichrome<span class=\"o\">]</span> __main__.py<span class=\"o\">(</span><span class=\"m\">69</span><span class=\"o\">)</span>: ChromeDaemon cmd args: <span class=\"o\">{</span><span class=\"s1\">'daemon'</span>: True, <span class=\"s1\">'block'</span>: True, <span class=\"s1\">'chrome_path'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'host'</span>: <span class=\"s1\">'localhost'</span>, <span class=\"s1\">'port'</span>: <span class=\"m\">9222</span>, <span class=\"s1\">'headless'</span>: False, <span class=\"s1\">'user_agent'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'proxy'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'user_data_dir'</span>: None, <span class=\"s1\">'disable_image'</span>: True, <span class=\"s1\">'start_url'</span>: <span class=\"s1\">'http://bing.com'</span>, <span class=\"s1\">'extra_config'</span>: <span class=\"s1\">''</span>, <span class=\"s1\">'max_deaths'</span>: <span class=\"m\">1</span>, <span class=\"s1\">'timeout'</span>: <span class=\"m\">2</span><span class=\"o\">}</span>\n</pre>\n<blockquote>\n<p>Details: python3 -m ichrome --help</p>\n</blockquote>\n<pre><code>usage:\n    All the unknown args will be append to extra_config.\nDemo:\n    &gt; python -m ichrome --host=127.0.0.1 --window-size=1200,800 --incognito\n    &gt; ChromeDaemon cmd args: {'daemon': True, 'block': True, 'chrome_path': '', 'host': '127.0.0.1', 'port': 9222, 'headless': False, 'user_agent': '', 'proxy': '', 'user_data_dir': None, 'disable_image': False, 'start_url': 'about:blank', 'extra_config':['--window-size=1212,1212', '--incognito'], 'max_deaths': 1, 'timeout': 2}\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show ichrome version info\n  -c CHROME_PATH, --chrome_path CHROME_PATH\n                        chrome_path\n  --host HOST           host\n  -p PORT, --port PORT  port\n  --headless            is_headless\n  -s SHUTDOWN, --shutdown SHUTDOWN\n                        shutdown the port\n  --user_agent USER_AGENT\n                        user_agent\n  --proxy PROXY         proxy\n  --user_data_dir USER_DATA_DIR\n                        user_data_dir\n  --disable_image       disable_image\n  --start_url START_URL\n                        start_url\n  --max_deaths MAX_DEATHS\n                        max_deaths\n  --timeout TIMEOUT     timeout\n</code></pre>\n<h3>[Async] Operating tabs with coroutines</h3>\n<blockquote>\n<p>Run in a completely asynchronous environment, it's a stable choice.</p>\n</blockquote>\n<details>\n    <summary>Code</summary>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_examples</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ichrome</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncChrome</span> <span class=\"k\">as</span> <span class=\"n\">Chrome</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ichrome</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncTab</span> <span class=\"k\">as</span> <span class=\"n\">Tab</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ichrome</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncChromeDaemon</span><span class=\"p\">,</span> <span class=\"n\">Tag</span><span class=\"p\">,</span> <span class=\"n\">logger</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Tab._log_all_recv = True</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">9222</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">AsyncChromeDaemon</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">port</span><span class=\"p\">,</span> <span class=\"n\">max_deaths</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ===================== Chrome Test Cases =====================</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">Chrome</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">chrome</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">chrome</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'&lt;Chrome(connected): http://127.0.0.1:9222&gt;'</span>\n            <span class=\"k\">assert</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">server</span> <span class=\"o\">==</span> <span class=\"s1\">'http://127.0.0.1:9222'</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">version</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span>\n                    <span class=\"n\">e</span>\n                <span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Chrome has not connected. `await chrome.connect()` before request.'</span>\n            <span class=\"c1\"># waiting chrome launching</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span>\n                <span class=\"n\">connected</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">connected</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n                <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"n\">connected</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n            <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">version</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s1\">'Browser'</span> <span class=\"ow\">in</span> <span class=\"n\">version</span>\n            <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ok</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n            <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">ok</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ok</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span>\n            <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">get_server</span><span class=\"p\">(</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(),</span> <span class=\"nb\">list</span><span class=\"p\">)</span>\n            <span class=\"n\">tabs1</span><span class=\"p\">:</span> <span class=\"n\">Tab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">get_tabs</span><span class=\"p\">()</span>\n            <span class=\"n\">tabs2</span><span class=\"p\">:</span> <span class=\"n\">Tab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">tabs</span>\n            <span class=\"k\">assert</span> <span class=\"n\">tabs1</span> <span class=\"o\">==</span> <span class=\"n\">tabs2</span>\n            <span class=\"n\">tab0</span><span class=\"p\">:</span> <span class=\"n\">Tab</span> <span class=\"o\">=</span> <span class=\"n\">tabs1</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">tab1</span><span class=\"p\">:</span> <span class=\"n\">Tab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">new_tab</span><span class=\"p\">()</span>\n            <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tab1</span><span class=\"p\">,</span> <span class=\"n\">Tab</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">activate_tab</span><span class=\"p\">(</span><span class=\"n\">tab0</span><span class=\"p\">)</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">connect_tabs</span><span class=\"p\">([</span><span class=\"n\">tab0</span><span class=\"p\">,</span> <span class=\"n\">tab1</span><span class=\"p\">]):</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab0</span><span class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'about:blank'</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab1</span><span class=\"o\">.</span><span class=\"n\">current_url</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'about:blank'</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">connect_tabs</span><span class=\"p\">(</span><span class=\"n\">tab0</span><span class=\"p\">):</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab0</span><span class=\"o\">.</span><span class=\"n\">current_url</span> <span class=\"o\">==</span> <span class=\"s1\">'about:blank'</span>\n            <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">close_tab</span><span class=\"p\">(</span><span class=\"n\">tab1</span><span class=\"p\">)</span>\n            <span class=\"c1\"># ===================== Tab Test Cases =====================</span>\n            <span class=\"n\">tab</span><span class=\"p\">:</span> <span class=\"n\">Tab</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">new_tab</span><span class=\"p\">()</span>\n            <span class=\"k\">assert</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">ws</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">tab</span><span class=\"p\">():</span>\n                <span class=\"k\">assert</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">ws</span>\n            <span class=\"k\">assert</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">ws</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"c1\"># also work: async with tab.connect():</span>\n            <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">tab</span><span class=\"p\">():</span>\n                <span class=\"k\">assert</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s1\">'connected'</span>\n                <span class=\"k\">assert</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">msg_id</span> <span class=\"o\">==</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">msg_id</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">refresh_tab_info</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># watch the tabs switch</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">activate_tab</span><span class=\"p\">()</span>\n                <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab0</span><span class=\"o\">.</span><span class=\"n\">activate_tab</span><span class=\"p\">()</span>\n                <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">activate_tab</span><span class=\"p\">()</span>\n\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'Network.enable'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'result'</span><span class=\"p\">:</span> <span class=\"p\">{}</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">clear_browser_cookies</span><span class=\"p\">()</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_cookies</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'test_value'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'test2'</span><span class=\"p\">,</span> <span class=\"s1\">'test_value'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_cookies</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">delete_cookies</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_cookies</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"o\">=</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n                <span class=\"c1\"># get all Browser cookies</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_all_cookies</span><span class=\"p\">())</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n                <span class=\"c1\"># disable Network</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">disable</span><span class=\"p\">(</span><span class=\"s1\">'Network'</span><span class=\"p\">)</span>\n                <span class=\"c1\"># set new url for this tab, timeout will stop loading</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"c1\"># reload the page</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"c1\"># here should be press OK by human in 10 secs, get the returned result</span>\n                <span class=\"n\">js_result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s1\">'document.title'</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"c1\"># {'id': 18, 'result': {'result': {'type': 'string', 'value': 'Welcome to Python.org'}}}</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'result'</span> <span class=\"ow\">in</span> <span class=\"n\">js_result</span>\n                <span class=\"c1\"># inject JS timeout return None</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s1\">'alert()'</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">))</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n                <span class=\"c1\"># close the alert dialog</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"s1\">'Page'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'Page.handleJavaScriptDialog'</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"c1\"># querySelectorAll with JS, return list of Tag object</span>\n                <span class=\"n\">tag_list</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'#id-search-field'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">tag_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tagName</span> <span class=\"o\">==</span> <span class=\"s1\">'input'</span>\n                <span class=\"c1\"># querySelectorAll with JS, index arg is Not None, return Tag or None</span>\n                <span class=\"n\">one_tag</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">querySelectorAll</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'#id-search-field'</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">one_tag</span><span class=\"p\">,</span> <span class=\"n\">Tag</span><span class=\"p\">)</span>\n                <span class=\"c1\"># inject js url: vue.js</span>\n                <span class=\"c1\"># get window.Vue variable before injecting</span>\n                <span class=\"n\">vue_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s1\">'window.Vue'</span><span class=\"p\">)</span>\n                <span class=\"c1\"># {'id': 22, 'result': {'result': {'type': 'undefined'}}}</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'undefined'</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">vue_obj</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">inject_js_url</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'https://cdn.staticfile.org/vue/2.6.10/vue.min.js'</span><span class=\"p\">,</span>\n                    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"n\">vue_obj</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s1\">'window.Vue'</span><span class=\"p\">)</span>\n                <span class=\"c1\"># {'id': 23, 'result': {'result': {'type': 'function', 'className': 'Function', 'description': 'function wn(e){this._init(e)}', 'objectId': '{\"injectedScriptId\":1,\"id\":1}'}}}</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'Function'</span> <span class=\"ow\">in</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">vue_obj</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># update title</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s2\">\"document.title = 'Press about'\"</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">current_title</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'Press about'</span>\n\n                <span class=\"c1\"># wait_response by filter_function</span>\n                <span class=\"c1\"># {'method': 'Network.responseReceived', 'params': {'requestId': '1000003000.69', 'loaderId': 'D7814CD633EDF3E699523AF0C4E9DB2C', 'timestamp': 207483.974238, 'type': 'Script', 'response': {'url': 'https://www.python.org/static/js/libs/masonry.pkgd.min.js', 'status': 200, 'statusText': '', 'headers': {'date': 'Sat, 05 Oct 2019 08:18:34 GMT', 'via': '1.1 vegur, 1.1 varnish, 1.1 varnish', 'last-modified': 'Tue, 24 Sep 2019 18:31:03 GMT', 'server': 'nginx', 'age': '290358', 'etag': '\"5d8a60e7-6643\"', 'x-served-by': 'cache-iad2137-IAD, cache-tyo19928-TYO', 'x-cache': 'HIT, HIT', 'content-type': 'application/x-javascript', 'status': '200', 'cache-control': 'max-age=604800, public', 'accept-ranges': 'bytes', 'x-timer': 'S1570263515.866582,VS0,VE0', 'content-length': '26179', 'x-cache-hits': '1, 170'}, 'mimeType': 'application/x-javascript', 'connectionReused': False, 'connectionId': 0, 'remoteIPAddress': '151.101.108.223', 'remotePort': 443, 'fromDiskCache': True, 'fromServiceWorker': False, 'fromPrefetchCache': False, 'encodedDataLength': 0, 'timing': {'requestTime': 207482.696803, 'proxyStart': -1, 'proxyEnd': -1, 'dnsStart': -1, 'dnsEnd': -1, 'connectStart': -1, 'connectEnd': -1, 'sslStart': -1, 'sslEnd': -1, 'workerStart': -1, 'workerReady': -1, 'sendStart': 0.079, 'sendEnd': 0.079, 'pushStart': 0, 'pushEnd': 0, 'receiveHeadersEnd': 0.836}, 'protocol': 'h2', 'securityState': 'unknown'}, 'frameId': 'A2971702DE69F008914F18EAE6514DD5'}}</span>\n                <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">cb</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">:</span>\n                        <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_request_loading</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n                        <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"s1\">'Masonry PACKAGED'</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n                            <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))[</span><span class=\"s1\">'result'</span><span class=\"p\">][</span><span class=\"s1\">'body'</span><span class=\"p\">]</span>\n                        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n                            <span class=\"sa\">f</span><span class=\"s1\">'check wait_response callback, get_response </span><span class=\"si\">{</span><span class=\"n\">ok</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n                        <span class=\"k\">assert</span> <span class=\"n\">ok</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n\n                <span class=\"c1\"># listening response</span>\n                <span class=\"k\">def</span> <span class=\"nf\">filter_function</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">):</span>\n                    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"s1\">'www.python.org/static/js/libs/masonry.pkgd.min.js'</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span>\n                        <span class=\"s1\">'params'</span><span class=\"p\">][</span><span class=\"s1\">'response'</span><span class=\"p\">][</span><span class=\"s1\">'url'</span><span class=\"p\">]</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'get response url:'</span><span class=\"p\">,</span>\n                                 <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'params'</span><span class=\"p\">][</span><span class=\"s1\">'response'</span><span class=\"p\">][</span><span class=\"s1\">'url'</span><span class=\"p\">],</span> <span class=\"n\">ok</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">ok</span>\n\n                <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span>\n                    <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_response</span><span class=\"p\">(</span>\n                        <span class=\"n\">filter_function</span><span class=\"o\">=</span><span class=\"n\">filter_function</span><span class=\"p\">,</span>\n                        <span class=\"n\">callback_function</span><span class=\"o\">=</span><span class=\"n\">cb</span><span class=\"p\">,</span>\n                        <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                    <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"s1\">'#about&gt;a'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_loading</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">task</span>\n                <span class=\"c1\"># click download link, without wait_loading.</span>\n                <span class=\"c1\"># request</span>\n                <span class=\"c1\"># {'method': 'Network.responseReceived', 'params': {'requestId': '2FAFC4FC410A6DEDE88553B1836C530B', 'loaderId': '2FAFC4FC410A6DEDE88553B1836C530B', 'timestamp': 212239.182469, 'type': 'Document', 'response': {'url': 'https://www.python.org/downloads/', 'status': 200, 'statusText': '', 'headers': {'status': '200', 'server': 'nginx', 'content-type': 'text/html; charset=utf-8', 'x-frame-options': 'DENY', 'cache-control': 'max-age=604800, public', 'via': '1.1 vegur\\n1.1 varnish\\n1.1 varnish', 'accept-ranges': 'bytes', 'date': 'Sat, 05 Oct 2019 10:51:48 GMT', 'age': '282488', 'x-served-by': 'cache-iad2139-IAD, cache-hnd18720-HND', 'x-cache': 'MISS, HIT', 'x-cache-hits': '0, 119', 'x-timer': 'S1570272708.444646,VS0,VE0', 'content-length': '113779'}, 'mimeType': 'text/html', 'connectionReused': False, 'connectionId': 0, 'remoteIPAddress': '123.23.54.43', 'remotePort': 443, 'fromDiskCache': True, 'fromServiceWorker': False, 'fromPrefetchCache': False, 'encodedDataLength': 0, 'timing': {'requestTime': 212239.179388, 'proxyStart': -1, 'proxyEnd': -1, 'dnsStart': -1, 'dnsEnd': -1, 'connectStart': -1, 'connectEnd': -1, 'sslStart': -1, 'sslEnd': -1, 'workerStart': -1, 'workerReady': -1, 'sendStart': 0.392, 'sendEnd': 0.392, 'pushStart': 0, 'pushEnd': 0, 'receiveHeadersEnd': 0.975}, 'protocol': 'h2', 'securityState': 'secure', 'securityDetails': {'protocol': 'TLS 1.2', 'keyExchange': 'ECDHE_RSA', 'keyExchangeGroup': 'X25519', 'cipher': 'AES_128_GCM', 'certificateId': 0, 'subjectName': 'www.python.org', 'sanList': ['www.python.org', 'docs.python.org', 'bugs.python.org', 'wiki.python.org', 'hg.python.org', 'mail.python.org', 'pypi.python.org', 'packaging.python.org', 'login.python.org', 'discuss.python.org', 'us.pycon.org', 'pypi.io', 'docs.pypi.io', 'pypi.org', 'docs.pypi.org', 'donate.pypi.org', 'devguide.python.org', 'www.bugs.python.org', 'python.org'], 'issuer': 'DigiCert SHA2 Extended Validation Server CA', 'validFrom': 1537228800, 'validTo': 1602676800, 'signedCertificateTimestampList': [], 'certificateTransparencyCompliance': 'unknown'}}, 'frameId': '882CFDEEA07EB00A5E7510ADD2A39F22'}}</span>\n                <span class=\"c1\"># response</span>\n                <span class=\"c1\"># {'id': 30, 'result': {'body': '&lt;!doctype html&gt;\\n&lt;!--[if lt IE 7]&gt;   &lt;html class=\"no-js ie6 lt-ie...', 'base64Encoded': False}}</span>\n                <span class=\"c1\"># test set_ua</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_ua</span><span class=\"p\">(</span><span class=\"s1\">'Test UA'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">add_js_onload</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'window.title=123456789'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/forms/post'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_variable</span><span class=\"p\">(</span><span class=\"s1\">'window.title'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">123456789</span>\n                <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_html</span><span class=\"p\">()</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'Customer name:'</span> <span class=\"ow\">in</span> <span class=\"n\">html</span>\n                <span class=\"c1\"># test double click some positions. test keyboard_send input</span>\n                <span class=\"n\">rect</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_bounding_client_rect</span><span class=\"p\">(</span><span class=\"s1\">'[type=\"email\"]'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">mouse_click</span><span class=\"p\">(</span><span class=\"n\">rect</span><span class=\"p\">[</span><span class=\"s1\">'left'</span><span class=\"p\">],</span> <span class=\"n\">rect</span><span class=\"p\">[</span><span class=\"s1\">'top'</span><span class=\"p\">],</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">keyboard_send</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">keyboard_send</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'2'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">keyboard_send</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'3'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">mouse_click</span><span class=\"p\">(</span><span class=\"n\">rect</span><span class=\"p\">[</span><span class=\"s1\">'left'</span><span class=\"p\">],</span> <span class=\"n\">rect</span><span class=\"p\">[</span><span class=\"s1\">'top'</span><span class=\"p\">],</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n                <span class=\"n\">selection</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_variable</span><span class=\"p\">(</span>\n                    <span class=\"s1\">'window.getSelection().toString()'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">selection</span> <span class=\"o\">==</span> <span class=\"s1\">'123'</span>\n                <span class=\"c1\"># test set_headers</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_headers</span><span class=\"p\">({</span><span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">})</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">)</span>\n                <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_html</span><span class=\"p\">()</span>\n                <span class=\"k\">assert</span> <span class=\"s1\">'\"A\": \"1\"'</span> <span class=\"ow\">in</span> <span class=\"n\">html</span> <span class=\"ow\">and</span> <span class=\"s1\">'\"B\": \"2\"'</span> <span class=\"ow\">in</span> <span class=\"n\">html</span>\n                <span class=\"c1\"># screenshot</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'http://python.org'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_loading</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">screen</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">screenshot</span><span class=\"p\">()</span>\n                <span class=\"n\">part</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">screenshot_element</span><span class=\"p\">(</span><span class=\"s1\">'.site-headline'</span><span class=\"p\">)</span>\n                <span class=\"k\">assert</span> <span class=\"n\">screen</span>\n                <span class=\"k\">assert</span> <span class=\"n\">part</span>\n                <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">screen</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n                <span class=\"c1\"># draw</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span><span class=\"s1\">'https://awwapp.com/'</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_loading</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">timeout_stop_loading</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">mouse_click</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n                <span class=\"n\">walker</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">mouse_drag_rel_chain</span><span class=\"p\">(</span><span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">145</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span>\n                    <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n                <span class=\"k\">await</span> <span class=\"n\">walker</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mf\">1.414</span><span class=\"p\">,</span> <span class=\"mi\">50</span> <span class=\"o\">*</span> <span class=\"mf\">1.414</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n                <span class=\"c1\"># clear cache</span>\n                <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">clear_browser_cache</span><span class=\"p\">()</span>\n                <span class=\"c1\"># close tab</span>\n                <span class=\"k\">await</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"c1\"># close_browser gracefully, I have no more need of chrome instance</span>\n            <span class=\"k\">await</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">close_browser</span><span class=\"p\">()</span>\n            <span class=\"c1\"># await chrome.kill()</span>\n            <span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"s2\">\"=\"</span> <span class=\"o\">*</span> <span class=\"mi\">80</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">sep</span><span class=\"si\">}</span><span class=\"s1\">Congratulations, all test cases passed.</span><span class=\"si\">{</span><span class=\"n\">sep</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">test_examples</span><span class=\"p\">())</span>\n</pre>\n</details>\n<h3>[Sync] Simple Usage (Archived)</h3>\n<blockquote>\n<p>Sync utils will be hardly maintained, only for simple test usage.</p>\n<p>No more new features to be developed.</p>\n</blockquote>\n<details>\n    <summary>Code</summary>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Test normal usage of ichrome.</span>\n\n<span class=\"sd\">1. use `with` context for launching ChromeDaemon daemon process.</span>\n<span class=\"sd\">2. init Chrome for connecting with chrome background server.</span>\n<span class=\"sd\">3. Tab ops:</span>\n<span class=\"sd\">  3.1 create a new tab</span>\n<span class=\"sd\">  3.2 goto new url with tab.set_url, and will stop load for timeout.</span>\n<span class=\"sd\">  3.3 get cookies from url</span>\n<span class=\"sd\">  3.4 inject the jQuery lib by a static url.</span>\n<span class=\"sd\">  3.5 auto click ok from the alert dialog.</span>\n<span class=\"sd\">  3.6 remove `href` from the third `a` tag, which is selected by css path.</span>\n<span class=\"sd\">  3.7 remove all `href` from the `a` tag, which is selected by css path.</span>\n<span class=\"sd\">  3.8 use querySelectorAll to get the elements.</span>\n<span class=\"sd\">  3.9 Network crawling from the background ajax request.</span>\n<span class=\"sd\">  3.10 click some element by tab.click with css selector.</span>\n<span class=\"sd\">  3.11 show html source code of the tab</span>\n<span class=\"sd\">\"\"\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_example</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">ichrome</span> <span class=\"kn\">import</span> <span class=\"n\">Chrome</span><span class=\"p\">,</span> <span class=\"n\">ChromeDaemon</span><span class=\"p\">,</span> <span class=\"n\">logger</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">re</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n    <span class=\"sd\">\"\"\"Example for crawling a special background request.\"\"\"</span>\n\n    <span class=\"c1\"># reset default logger level, such as DEBUG</span>\n    <span class=\"c1\"># import logging</span>\n    <span class=\"c1\"># logger.setLevel(logging.INFO)</span>\n    <span class=\"c1\"># launch the Chrome process and daemon process, will auto shutdown by 'with' expression.</span>\n    <span class=\"k\">with</span> <span class=\"n\">ChromeDaemon</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">9222</span><span class=\"p\">,</span> <span class=\"n\">max_deaths</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">chromed</span><span class=\"p\">:</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">chromed</span><span class=\"p\">)</span>\n        <span class=\"c1\"># create connection to Chrome Devtools</span>\n        <span class=\"n\">chrome</span> <span class=\"o\">=</span> <span class=\"n\">Chrome</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">9222</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">retry</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"c1\"># now create a new tab without url</span>\n        <span class=\"n\">tab</span> <span class=\"o\">=</span> <span class=\"n\">chrome</span><span class=\"o\">.</span><span class=\"n\">new_tab</span><span class=\"p\">()</span>\n        <span class=\"c1\"># reset the url to bing.com, if loading time more than 5 seconds, will stop loading.</span>\n        <span class=\"c1\"># if inject js success, will alert Vue</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">set_url</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"https://www.bing.com/\"</span><span class=\"p\">,</span>\n            <span class=\"n\">referrer</span><span class=\"o\">=</span><span class=\"s2\">\"https://www.github.com/\"</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"c1\"># get_cookies from url</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">get_cookies</span><span class=\"p\">(</span><span class=\"s2\">\"http://cn.bing.com\"</span><span class=\"p\">))</span>\n        <span class=\"c1\"># test inject_js, if success, will alert jQuery version info 3.3.1</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">inject_js</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js\"</span><span class=\"p\">))</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span><span class=\"s2\">\"alert('jQuery inject success:' + jQuery.fn.jquery)\"</span><span class=\"p\">))</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">js</span><span class=\"p\">(</span>\n            <span class=\"s1\">'alert(\"Check the links above disabled, and then input `test` to the input position.\")'</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># automate press accept for alert~</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"Page.handleJavaScriptDialog\"</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># remove href of the a tag.</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"s2\">\"#sc_hdu&gt;li&gt;a\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"removeAttribute('href')\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># remove href of all the 'a' tag.</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">querySelectorAll</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"#sc_hdu&gt;li&gt;a\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">\"removeAttribute('href')\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># use querySelectorAll to get the elements.</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s2\">\"#sc_hdu&gt;li\"</span><span class=\"p\">):</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"Tag: </span><span class=\"si\">%s</span><span class=\"s2\">, id:</span><span class=\"si\">%s</span><span class=\"s2\">, class:</span><span class=\"si\">%s</span><span class=\"s2\">, text:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span>\n                        <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"class\"</span><span class=\"p\">),</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">))</span>\n        <span class=\"c1\"># enable the Network function, otherwise will not recv Network request/response.</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s2\">\"Network.enable\"</span><span class=\"p\">))</span>\n        <span class=\"c1\"># here will block until input string \"test\" in the input position.</span>\n        <span class=\"c1\"># tab is waiting for the event Network.responseReceived which accord with the given filter_function.</span>\n        <span class=\"n\">recv_string</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_event</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Network.responseReceived\"</span><span class=\"p\">,</span>\n            <span class=\"n\">filter_function</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"&amp;\\w+=test\"</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"ow\">or</span> <span class=\"s2\">\"\"</span><span class=\"p\">),</span>\n            <span class=\"n\">wait_seconds</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"c1\"># now catching the \"Network.responseReceived\" event string, load the json.</span>\n        <span class=\"n\">recv_string</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">recv_string</span><span class=\"p\">)</span>\n        <span class=\"c1\"># get the requestId to fetch its response body.</span>\n        <span class=\"n\">request_id</span> <span class=\"o\">=</span> <span class=\"n\">recv_string</span><span class=\"p\">[</span><span class=\"s2\">\"params\"</span><span class=\"p\">][</span><span class=\"s2\">\"requestId\"</span><span class=\"p\">]</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"requestId: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">request_id</span><span class=\"p\">)</span>\n        <span class=\"c1\"># send request for getResponseBody</span>\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"Network.getResponseBody\"</span><span class=\"p\">,</span> <span class=\"n\">requestId</span><span class=\"o\">=</span><span class=\"n\">request_id</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"c1\"># now resp is the response body result.</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"getResponseBody success </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">resp</span><span class=\"p\">)</span>\n        <span class=\"c1\"># directly click the button matched the cssselector #sb_form_go, here is the submit button.</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"s2\">\"#sb_form_go\"</span><span class=\"p\">))</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">wait_loading</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"c1\"># show some html source code of the tab</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">[:</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n        <span class=\"n\">tab</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"s1\">'Browser.close'</span><span class=\"p\">)</span>\n        <span class=\"c1\"># # now click close button of the chrome browser.</span>\n        <span class=\"c1\"># chromed.run_forever()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">test_example</span><span class=\"p\">()</span>\n</pre>\n</details>\n<h3>TODO</h3>\n<ul>\n<li>[x] <del>Concurrent support. (gevent, threading, asyncio)</del></li>\n<li>[x] Add auto_restart while crash.</li>\n<li>[ ] <del>Auto remove the zombie tabs with a lifebook.</del></li>\n<li>[x] Add some useful examples.</li>\n<li>[x] Coroutine support (for asyncio).</li>\n<li>[x] Standard test cases.</li>\n<li>[ ] HTTP apis server console [fastapi]. (maybe write a new lib)</li>\n<li>[ ] Complete document.</li>\n</ul>\n<h2>Document</h2>\n<ul>\n<li>On the way...</li>\n</ul>\n\n          </div>"}, "last_serial": 7113351, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1cd5a9a23a27812a09c5e93486a1c300", "sha256": "eff73f494c1af0913ca9808f42ae8b3fef7994e72da788813058b12bdeafcdf3"}, "downloads": -1, "filename": "ichrome-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "1cd5a9a23a27812a09c5e93486a1c300", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7481, "upload_time": "2018-11-23T17:09:47", "upload_time_iso_8601": "2018-11-23T17:09:47.990101Z", "url": "https://files.pythonhosted.org/packages/42/37/17f8d66ded4d2d693ed14328b75764392f90f974e5676930ad27ed3663b7/ichrome-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e27428d21c36b4f633ed239910e6804c", "sha256": "402c203ca1e190d64c5d1fd377ba23b2fa47b82bac1f51efdaef9e411bcc4cb3"}, "downloads": -1, "filename": "ichrome-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e27428d21c36b4f633ed239910e6804c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6700, "upload_time": "2018-11-23T17:09:50", "upload_time_iso_8601": "2018-11-23T17:09:50.445513Z", "url": "https://files.pythonhosted.org/packages/3b/bc/efbda1649897028e6b06f17a1ef8954b618444bf29404549a51d059779fa/ichrome-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ef99ecded762945e9721427e3d4f3edd", "sha256": "1ce82bdedddc50249acb07ffd6499ec1166f926f23af9eec4111088e750e7949"}, "downloads": -1, "filename": "ichrome-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "ef99ecded762945e9721427e3d4f3edd", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8868, "upload_time": "2018-11-25T18:22:27", "upload_time_iso_8601": "2018-11-25T18:22:27.938363Z", "url": "https://files.pythonhosted.org/packages/38/46/fbcc7271d77870f61e13b64dd7735346a6c74c409bf6a8e5e2ddfa92f357/ichrome-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e2a0aebd9285f2adf9f158f4f0bec07", "sha256": "4cbd2b074efbea4a1a0bca2b1d83df1bdcc2fb7834ebdc2ca070675a7fd34133"}, "downloads": -1, "filename": "ichrome-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3e2a0aebd9285f2adf9f158f4f0bec07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8094, "upload_time": "2018-11-25T18:22:31", "upload_time_iso_8601": "2018-11-25T18:22:31.800786Z", "url": "https://files.pythonhosted.org/packages/19/f2/57cc2c965eb5ee6d134f88c8e8ead87705f632d272434e5de67dad9f233d/ichrome-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e57a5c28b15f7e9daf440ba3e591d691", "sha256": "738a2bf69c59aeb68b729e762e637cb98cda80db70a57eaa1c8d6b742d915994"}, "downloads": -1, "filename": "ichrome-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e57a5c28b15f7e9daf440ba3e591d691", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11764, "upload_time": "2018-11-27T15:11:39", "upload_time_iso_8601": "2018-11-27T15:11:39.877926Z", "url": "https://files.pythonhosted.org/packages/35/6c/030a627c36f74dcf54a8251d15024f2f7909f22b2f5ecd1979bcb75f936b/ichrome-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1480d50f664e762de716f9f398f847e6", "sha256": "146bc72e1f48126888d5d599c3be90cc00f7f2b9d6ece14ffa2befc2cee329ff"}, "downloads": -1, "filename": "ichrome-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1480d50f664e762de716f9f398f847e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12994, "upload_time": "2018-11-27T17:27:47", "upload_time_iso_8601": "2018-11-27T17:27:47.191566Z", "url": "https://files.pythonhosted.org/packages/46/91/39ef05810026b815ec1380c0e1edc0684d246c76b622dae53be5afa9923a/ichrome-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "fc86f55bcda3a9141d671edcac3ec4d5", "sha256": "f4fd096129addf861964fd1a836d1a02400184efc741fd79e126ec90252dbf28"}, "downloads": -1, "filename": "ichrome-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fc86f55bcda3a9141d671edcac3ec4d5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13214, "upload_time": "2018-11-27T18:05:38", "upload_time_iso_8601": "2018-11-27T18:05:38.359577Z", "url": "https://files.pythonhosted.org/packages/09/72/25cdf44c9270ad96ff16b1c3a0381593db69941c4ef992609f6bd9131508/ichrome-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "322adfa5319246bf0b2e21b280d2f302", "sha256": "4aa01c1d0277d817e46b6476a36aa06c60267368692d3b3bd282d7841d15e3f6"}, "downloads": -1, "filename": "ichrome-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "322adfa5319246bf0b2e21b280d2f302", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13268, "upload_time": "2018-11-27T18:21:08", "upload_time_iso_8601": "2018-11-27T18:21:08.482399Z", "url": "https://files.pythonhosted.org/packages/c4/46/6e24c5c1c05d9194a5688f480e3b6ea78a8d5f49645845c46d92416ee66d/ichrome-0.0.6-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "4f8b5e1a2e61cc9320593eced677c035", "sha256": "7cdf985f6cdcb85136d6e7a87a1543db16a2c9259354081d9ba8bb35e4715e0e"}, "downloads": -1, "filename": "ichrome-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4f8b5e1a2e61cc9320593eced677c035", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13344, "upload_time": "2018-11-27T18:35:40", "upload_time_iso_8601": "2018-11-27T18:35:40.453820Z", "url": "https://files.pythonhosted.org/packages/8e/91/714465e888c64899e160ee4facfa1c7b709efcdc3609957ce241f5692d1d/ichrome-0.0.7-py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "ab4b16477029d94d01812ca145e396d4", "sha256": "41c6b057feaae2c2f654588044313a6f548c80be2ac1516bd363305360c90d26"}, "downloads": -1, "filename": "ichrome-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "ab4b16477029d94d01812ca145e396d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13976, "upload_time": "2018-12-02T14:33:19", "upload_time_iso_8601": "2018-12-02T14:33:19.962507Z", "url": "https://files.pythonhosted.org/packages/c5/da/3be736416d7d8a8e27be5a43cd86ad52102a3ca90be6f11a249834918615/ichrome-0.0.8-py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "264a68747ca73f493e3ce8f04e1cee0a", "sha256": "1a7ef48de241c9659da131a2659fbc3f599ce29b16fcfa0478f602209189bc22"}, "downloads": -1, "filename": "ichrome-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "264a68747ca73f493e3ce8f04e1cee0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14098, "upload_time": "2018-12-03T15:31:21", "upload_time_iso_8601": "2018-12-03T15:31:21.557833Z", "url": "https://files.pythonhosted.org/packages/15/7e/95451a4039659ff22cde989575b4e7dadaa3927e8870c3796e615ab4b34c/ichrome-0.0.9-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "404cf70af269efcbe8a4b29ff6ffdba9", "sha256": "b793185067e1b08852439460167b110b1a43a46407575610d2801a1e219af8cd"}, "downloads": -1, "filename": "ichrome-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "404cf70af269efcbe8a4b29ff6ffdba9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14138, "upload_time": "2018-12-17T17:19:36", "upload_time_iso_8601": "2018-12-17T17:19:36.077437Z", "url": "https://files.pythonhosted.org/packages/66/bf/656284e49d2b3e02877a6c3811cd01185674bd3ca5e20a0c6c5d2fbef7cb/ichrome-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e4f6685b1380121acfa21d60e6932899", "sha256": "b0df6f8f8701268b684035c52a2abe3ad8199f503dea9c0303a230a909d4ba12"}, "downloads": -1, "filename": "ichrome-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e4f6685b1380121acfa21d60e6932899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14159, "upload_time": "2019-01-30T16:45:49", "upload_time_iso_8601": "2019-01-30T16:45:49.062619Z", "url": "https://files.pythonhosted.org/packages/d7/83/5b52854a1b64a081cd06554f48a6c7855af2cd764ef9d4be9925f2b8fff4/ichrome-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "44724bb5e973534f3b20e351fb1f52ca", "sha256": "3a7a030b30bbd4d2803dd5f1fa2c418996ad48b93874ff35bf2bd13634f8a7c9"}, "downloads": -1, "filename": "ichrome-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "44724bb5e973534f3b20e351fb1f52ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14542, "upload_time": "2019-03-31T11:20:14", "upload_time_iso_8601": "2019-03-31T11:20:14.875130Z", "url": "https://files.pythonhosted.org/packages/42/a0/be6354f22715b1b93567d79552c3795a7bd63273eb60b17bde9a788d4d22/ichrome-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5d83b18c8c3b1ea688d86e1e5b8d9132", "sha256": "e6b988552d1c2fc13f54659fe840466de0760fe314be11b5488b46c03137d1c4"}, "downloads": -1, "filename": "ichrome-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5d83b18c8c3b1ea688d86e1e5b8d9132", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14394, "upload_time": "2019-07-26T03:32:35", "upload_time_iso_8601": "2019-07-26T03:32:35.729869Z", "url": "https://files.pythonhosted.org/packages/d7/79/a042e5f481ff9ef3059fc32cede2d96e7b313947b264d3d65256352d5763/ichrome-0.1.3-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2ae5224f8c94f47a168e1db7336485b4", "sha256": "5344a64e28a019b9139ea33e5c644c336bed6f094acd765a963a0420a2cb2f69"}, "downloads": -1, "filename": "ichrome-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ae5224f8c94f47a168e1db7336485b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27002, "upload_time": "2019-10-05T12:20:44", "upload_time_iso_8601": "2019-10-05T12:20:44.800411Z", "url": "https://files.pythonhosted.org/packages/cb/25/8ffaff262029edbe07a92f0453599211e194a158f45503412c139106837c/ichrome-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3f50379867fd167324a6ca0475a944d6", "sha256": "f24f3558dd0cb471a4210b39928c07526a15dcc73081c529e8b83eeff1774c31"}, "downloads": -1, "filename": "ichrome-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f50379867fd167324a6ca0475a944d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27085, "upload_time": "2020-01-14T05:44:11", "upload_time_iso_8601": "2020-01-14T05:44:11.832487Z", "url": "https://files.pythonhosted.org/packages/b3/73/8c9616b6ea7031ecd3863124072e22b172cd009880e31caffac246b93e94/ichrome-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "e5599013663085dbf6d6c6db59b416b3", "sha256": "35ca476e79881fc2cd48c3ccee21466f5f52b729185fff3dc94fdfede155a3c6"}, "downloads": -1, "filename": "ichrome-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e5599013663085dbf6d6c6db59b416b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27147, "upload_time": "2020-01-14T06:26:41", "upload_time_iso_8601": "2020-01-14T06:26:41.323231Z", "url": "https://files.pythonhosted.org/packages/b1/fd/95798f82f8965f4975eba7c64a807b2f151d77dfbccc50b071f9d00d1ec0/ichrome-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "db9125084c3ab98ff97ca5dcb514f5e4", "sha256": "076c0b8a48da56bcbbb4cdebfbbcb4cabf513393f57352a3ce478d05428f619f"}, "downloads": -1, "filename": "ichrome-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "db9125084c3ab98ff97ca5dcb514f5e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27818, "upload_time": "2020-01-20T14:54:21", "upload_time_iso_8601": "2020-01-20T14:54:21.849379Z", "url": "https://files.pythonhosted.org/packages/9e/30/877de9e1d136e28d3c6d19bd439ea236953b81dfddb5cebe69e5b48ddae8/ichrome-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "e4a0ade972575e14685c91d98e1bf0f6", "sha256": "cfca70bb911c3f5a61b13934257dd20ad455b6520d9f593817ed3f4e9d2aa4c0"}, "downloads": -1, "filename": "ichrome-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e4a0ade972575e14685c91d98e1bf0f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28195, "upload_time": "2020-01-20T15:24:36", "upload_time_iso_8601": "2020-01-20T15:24:36.393423Z", "url": "https://files.pythonhosted.org/packages/97/eb/23c2c23d4459d9b4321559dabb2d87f7ec7da8eba47af0171702dec8425e/ichrome-0.2.4-py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "53da224514c5872394f6c71bc2297db0", "sha256": "51426672b870903a8925877b6b32418919970976d15c0c7f3a18982b979982c5"}, "downloads": -1, "filename": "ichrome-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "53da224514c5872394f6c71bc2297db0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28298, "upload_time": "2020-01-25T04:41:19", "upload_time_iso_8601": "2020-01-25T04:41:19.451851Z", "url": "https://files.pythonhosted.org/packages/5e/68/1e4782eba09ddcb3b6188267b68b5a02d8c38812e69b2d6698e60cc1738c/ichrome-0.2.5-py3-none-any.whl", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "0e8305d12e42609e3c01c590481e92a7", "sha256": "1c34b04138cf0228cece4a254f53cebccfb801612972682f3f5c68f469245c47"}, "downloads": -1, "filename": "ichrome-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0e8305d12e42609e3c01c590481e92a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28327, "upload_time": "2020-01-25T05:10:32", "upload_time_iso_8601": "2020-01-25T05:10:32.754424Z", "url": "https://files.pythonhosted.org/packages/f7/11/c65af57920d7194542a342002a0d4ea06eddac8df1d993d392cb0e282e69/ichrome-0.2.6-py3-none-any.whl", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "9c7ca0452cd8acf1fbaf3ca651014c38", "sha256": "38aa1a52239fd0abe152fc20ac7fa5bbc67ad29f03c4c34ea2b7958707b01ce5"}, "downloads": -1, "filename": "ichrome-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9c7ca0452cd8acf1fbaf3ca651014c38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28548, "upload_time": "2020-02-16T09:32:10", "upload_time_iso_8601": "2020-02-16T09:32:10.414628Z", "url": "https://files.pythonhosted.org/packages/f3/e1/dbf61b1fa3ab123b8af495b3427b33474f148f0ddb2ba8ca9a6f7cce263c/ichrome-0.2.7-py3-none-any.whl", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "bc949ba4cc82f92672b787af8c14eb94", "sha256": "8d8abf98b4a181bcd7c0b7c2f6bd57f7dca7ea740c6151b82b54df369bd56c89"}, "downloads": -1, "filename": "ichrome-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "bc949ba4cc82f92672b787af8c14eb94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28556, "upload_time": "2020-02-16T09:38:15", "upload_time_iso_8601": "2020-02-16T09:38:15.651119Z", "url": "https://files.pythonhosted.org/packages/7c/43/3164d46ff062a8800c35a2e61009fdb28975952f9a592aef4c76cb2d2bd8/ichrome-0.2.8-py3-none-any.whl", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "6613f1c8c6079168bc8c2bea626a7927", "sha256": "fb33306fb128f39d66487b336d42b68f3c3dbdd8cb62460bce2b85528d897b84"}, "downloads": -1, "filename": "ichrome-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6613f1c8c6079168bc8c2bea626a7927", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28728, "upload_time": "2020-02-22T06:23:56", "upload_time_iso_8601": "2020-02-22T06:23:56.701173Z", "url": "https://files.pythonhosted.org/packages/79/be/ae92f33c855f992db4cc881ac45ec8b09be0061b6121f77353ebfcefc86d/ichrome-0.2.9-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7c816ecec0d5156ec2cce82f7b9c6766", "sha256": "a7deed7232d38f81db2f9c9c50385fec8cb60f8a5f64e37a703a8fedac174602"}, "downloads": -1, "filename": "ichrome-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7c816ecec0d5156ec2cce82f7b9c6766", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28889, "upload_time": "2020-02-22T06:40:35", "upload_time_iso_8601": "2020-02-22T06:40:35.101286Z", "url": "https://files.pythonhosted.org/packages/30/92/36b3ea59c119ae095e0c27d86d5198da62828d38e019e994652fc5e5878d/ichrome-0.3.0-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "3b5ac2262712d8e5435bd1fcb541b5be", "sha256": "206b755f0f2a9d012d263b1695e4f31ff10431ce26168b83d283819f93a5cd8e"}, "downloads": -1, "filename": "ichrome-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3b5ac2262712d8e5435bd1fcb541b5be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29126, "upload_time": "2020-02-22T06:58:16", "upload_time_iso_8601": "2020-02-22T06:58:16.762002Z", "url": "https://files.pythonhosted.org/packages/03/47/ef6aee9bb6ef6d2b5a60e3f9416afb1b1dcd4797923a9ac4e2a990c63606/ichrome-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "9a762d9d0fa8d58fb600ff6767a3bb37", "sha256": "257da578cf82a902e79265271cb576f0f86d0e193b55a05441ba73ba0674d7b9"}, "downloads": -1, "filename": "ichrome-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9a762d9d0fa8d58fb600ff6767a3bb37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30171, "upload_time": "2020-04-02T10:44:48", "upload_time_iso_8601": "2020-04-02T10:44:48.601511Z", "url": "https://files.pythonhosted.org/packages/d9/82/3fedd014eb4f8496f9767c736f2abf4229dfe3ce7dc373e9ff5a68c06c87/ichrome-0.3.2-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "13d3481cfa6f40cd94289808aa1cd471", "sha256": "6e83d6ec3451f7e010ca12af4caae81d7b1172567a0147993366c294a978f205"}, "downloads": -1, "filename": "ichrome-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "13d3481cfa6f40cd94289808aa1cd471", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30106, "upload_time": "2020-04-02T10:55:46", "upload_time_iso_8601": "2020-04-02T10:55:46.908496Z", "url": "https://files.pythonhosted.org/packages/14/75/7fdd02922d7160fd1a8cbc151a153fd423b13775f226c01bef70531b2e8d/ichrome-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "251766b8c3066a359b3c1d74a3f6b473", "sha256": "6c2fcebfb580dc2381cf93cd388a3145a3e0fb1e71f56cc5cc4cba10ac35c47d"}, "downloads": -1, "filename": "ichrome-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "251766b8c3066a359b3c1d74a3f6b473", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30113, "upload_time": "2020-04-02T11:00:07", "upload_time_iso_8601": "2020-04-02T11:00:07.739071Z", "url": "https://files.pythonhosted.org/packages/33/7f/deb7f8c97a8fca4656b79487679301f7c960a1496a9d44c903de8d7c59cc/ichrome-1.0.1-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ec487f19ea3ad201391d25c21ca06e21", "sha256": "f011d3951d4958416d54dea45554280aa6f67f0ea729ee8d32f274333b1e1e5a"}, "downloads": -1, "filename": "ichrome-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec487f19ea3ad201391d25c21ca06e21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30643, "upload_time": "2020-04-02T17:38:42", "upload_time_iso_8601": "2020-04-02T17:38:42.115022Z", "url": "https://files.pythonhosted.org/packages/d4/3f/8b48c33109e59741d72cf2a7c9b3eda037be9e9e6f0e903eff6777f03392/ichrome-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "771db1e808e78ab5d167bba09a348c3b", "sha256": "b0a82a8d92a2ea28d7d3fc4bd629f584b3e6dd9a672e4acb8bd119b404bd5918"}, "downloads": -1, "filename": "ichrome-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "771db1e808e78ab5d167bba09a348c3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31973, "upload_time": "2020-04-04T12:51:28", "upload_time_iso_8601": "2020-04-04T12:51:28.545879Z", "url": "https://files.pythonhosted.org/packages/77/04/ffd1d05b0277efd6f35622879f2e7692ae7d4c6675b59bc689e149bd0a6c/ichrome-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "ec0172d04d5f4def0a1a792e0a33bdd7", "sha256": "e8dc6ce6d1806738bab77c97a78faf22f58caa732455a347a63f1b3925a1a45b"}, "downloads": -1, "filename": "ichrome-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ec0172d04d5f4def0a1a792e0a33bdd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33000, "upload_time": "2020-04-05T14:16:16", "upload_time_iso_8601": "2020-04-05T14:16:16.046198Z", "url": "https://files.pythonhosted.org/packages/fc/ff/1a96f52a8793b8b80f57a16145291f354b3fe2e4901557a6e5860f21edc7/ichrome-1.1.2-py3-none-any.whl", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "ad318b7b71b6daec76a40f40cbf12297", "sha256": "e8b1c1d2c367efde4f40f1e4d7d35c39aba7e0eafb9c42adcccd3239c2a107e0"}, "downloads": -1, "filename": "ichrome-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ad318b7b71b6daec76a40f40cbf12297", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34958, "upload_time": "2020-04-06T08:24:59", "upload_time_iso_8601": "2020-04-06T08:24:59.159736Z", "url": "https://files.pythonhosted.org/packages/a1/12/397f75c590db40223ccbe388118c3c0a139f432d6f21c4227cb09999a723/ichrome-1.1.3-py3-none-any.whl", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "cbb6930b7c86a8755c40f6a44f076aac", "sha256": "de386197b652ed936254a131a60db76c3d3c292bb07e4ac45601b1ab03e03d33"}, "downloads": -1, "filename": "ichrome-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cbb6930b7c86a8755c40f6a44f076aac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35527, "upload_time": "2020-04-08T17:07:49", "upload_time_iso_8601": "2020-04-08T17:07:49.014268Z", "url": "https://files.pythonhosted.org/packages/d5/51/9cb6b701685c9671961a6134e737e82aeb8379abed6f097a00e1e8a4a19d/ichrome-1.1.4-py3-none-any.whl", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "4ae72fcb0bc305fe5fc2fc456021125c", "sha256": "3b95c1878b81c28b3286219c8bec36e26263ed8ca23953f1a6f012d1eb0a3232"}, "downloads": -1, "filename": "ichrome-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4ae72fcb0bc305fe5fc2fc456021125c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35911, "upload_time": "2020-04-27T17:18:31", "upload_time_iso_8601": "2020-04-27T17:18:31.849532Z", "url": "https://files.pythonhosted.org/packages/a2/b9/6a21e6fade44e239db97a8529a5c39a80530ff79a0bea6c05fa05c806a67/ichrome-1.1.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4ae72fcb0bc305fe5fc2fc456021125c", "sha256": "3b95c1878b81c28b3286219c8bec36e26263ed8ca23953f1a6f012d1eb0a3232"}, "downloads": -1, "filename": "ichrome-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4ae72fcb0bc305fe5fc2fc456021125c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 35911, "upload_time": "2020-04-27T17:18:31", "upload_time_iso_8601": "2020-04-27T17:18:31.849532Z", "url": "https://files.pythonhosted.org/packages/a2/b9/6a21e6fade44e239db97a8529a5c39a80530ff79a0bea6c05fa05c806a67/ichrome-1.1.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:49:03 2020"}