{"info": {"author": "DC3", "author_email": "dcci@dc3.mil", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "# DC3-MWCP\n[Changelog](CHANGELOG.md) | [Releases](https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP/releases)\n\nDC3 Malware Configuration Parser (DC3-MWCP) is a framework for parsing configuration information from malware.\nThe information extracted from malware includes items such as addresses, passwords, filenames, and\nmutex names. A parser module is usually created per malware family.\nDC3-MWCP is designed to help ensure consistency in parser function and output, ease parser development,\nand facilitate parser sharing. DC3-MWCP supports both analyst directed analysis and\nlarge-scale automated execution, utilizing either the native python API, a REST API, or a provided\ncommand line tool. DC3-MWCP is authored by the Defense Cyber Crime Center (DC3).\n\n- [Install](#install)\n- [DC3-Kordesii Support](#dc3-kordesii-support)\n- [Testing](#testing)\n- [Usage](#usage)\n    - [CLI Tool](#cli-tool)\n    - [REST API](#rest-api)\n    - [Python API](#python-api)\n- [Updates](#updates)\n- [Schema](#schema)\n- [Helper Utilities](#helper-utilities)\n\n### Guides\n- [Parser Development](docs/ParserDevelopment.md)\n- [Parser Components](docs/ParserComponents.md)\n- [Parser Installation](docs/ParserInstallation.md)\n- [Parser Testing](docs/ParserTesting.md)\n- [Python Style Guide](docs/PythonStyleGuide.md)\n- [Construct Tutorial](docs/construct.ipynb)\n- [Style Guide](docs/PythonStyleGuide.md)\n- [Testing](docs/Testing.md)\n\n\n## Install\n```console\n> pip install mwcp\n```\n\nAlternatively you can clone this repo and install locally.\n```console\n> git clone https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP.git\n> pip install ./DC3-MWCP\n```\n\nFor a development mode use the `-e` flag to install in editable mode:\n\n```console\n> git clone https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP.git\n> pip install -e ./DC3-MWCP\n```\n\n\n## DC3-Kordesii Support\nDC3-MWCP optionally supports [DC3-Kordesii](https://github.com/Defense-Cyber-Crime-Center/kordesii)\nif it is installed. This will allow you to run any DC3-Kordesii decoder from the\n`mwcp.FileObject` object with the `run_kordesii_decoder` function.\n\n<!-- Uncomment if we ever get published in PyPi\nYou can install DC3-Kordesii along with DC3-MWCP by adding `[kordesii]` to your appropriate install command:\n```\npip install mwcp[kordesii]\npip install ./DC3-MWCP[kordesii]\npip install -e ./DC3-MWCP[kordesii]\n```\n-->\n\n\n## Testing\nDC3-MWCP uses [tox](https://tox.readthedocs.io) with [pytest](https://pytest.org) to test the core code\nand parsers. These libraries will be installed when you install DC3-MWCP.\nTo run all tests on Python 2.7 and 3.6 run the `tox` command after installation.\n\n```console\n> tox\nGLOB sdist-make: C:\\dev\\DC3_MWCP\\setup.py\npy27 inst-nodeps: C:\\dev\\DC3_MWCP\\.tox\\dist\\mwcp-1.2.0.zip\npy27 installed: attrs==17.4.0,bottle==0.12.13,certifi==2018.4.16,chardet==3.0.4,colorama==0.3.9,construct==2.8.12,funcsigs==1.0.2,future==0.16.0,idna==2.6,Jinja2==2.10,MarkupSafe==1.0,mock==2.0.0,more-itertools==4.1.0,mwcp==1.2.0,pbr==4.0.2,pefile==2017.11.5,pluggy==0.6.0,py==1.5.3,pytest==3.5.0,pytest-console-scripts==0.1.4,pytest-mock==1.9.0,requests==2.18.4,six==1.11.0,tox==3.0.0,urllib3==1.22,virtualenv==15.2.0\npy27 runtests: PYTHONHASHSEED='155'\npy27 runtests: commands[0] | pytest --doctest-modules\n============================= test session starts =============================\nplatform win32 -- Python 2.7.14, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: C:\\dev\\DC3_MWCP, inifile: tox.ini\nplugins: mock-1.9.0, console-scripts-0.1.4\ncollected 59 items\n\nmwcp\\utils\\construct\\construct_html.py .                                 [  1%]\nmwcp\\utils\\construct\\helpers.py .........................                [ 44%]\nmwcp\\utils\\construct\\windows_enums.py ....                               [ 50%]\nmwcp\\utils\\construct\\windows_structures.py .                             [ 52%]\ntests\\test_cli.py .......                                                [ 64%]\ntests\\test_custombase64.py ...                                           [ 69%]\ntests\\test_dispatcher.py .....                                           [ 77%]\ntests\\test_parser_registry.py ..                                         [ 81%]\ntests\\test_reporter.py ...........                                       [100%]\n\n========================== 59 passed in 8.30 seconds ==========================\npy36 inst-nodeps: C:\\dev\\DC3_MWCP\\.tox\\dist\\mwcp-1.2.0.zip\npy36 installed: attrs==17.4.0,bottle==0.12.13,certifi==2018.4.16,chardet==3.0.4,colorama==0.3.9,construct==2.8.12,future==0.16.0,idna==2.6,Jinja2==2.10,MarkupSafe==1.0,mock==2.0.0,more-itertools==4.1.0,mwcp==1.2.0,pbr==4.0.2,pefile==2017.11.5,pluggy==0.6.0,py==1.5.3,pytest==3.5.0,pytest-console-scripts==0.1.4,pytest-mock==1.9.0,requests==2.18.4,six==1.11.0,tox==3.0.0,urllib3==1.22,virtualenv==15.2.0\npy36 runtests: PYTHONHASHSEED='155'\npy36 runtests: commands[0] | pytest\n============================= test session starts =============================\nplatform win32 -- Python 3.6.3, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: C:\\dev\\DC3_MWCP, inifile: tox.ini\nplugins: mock-1.9.0, console-scripts-0.1.4\ncollected 28 items\n\ntests\\test_cli.py .......                                                [ 25%]\ntests\\test_custombase64.py ...                                           [ 35%]\ntests\\test_dispatcher.py .....                                           [ 53%]\ntests\\test_parser_registry.py ..                                         [ 60%]\ntests\\test_reporter.py ...........                                       [100%]\n\n========================== 28 passed in 6.33 seconds ==========================\n___________________________________ summary ___________________________________\n  py27: commands succeeded\n  py36: commands succeeded\n  congratulations :)\n```\n\n\n## Usage\nDC3-MWCP is designed to allow easy development and use of malware config parsers. DC3-MWCP is also designed to ensure\nthat these parsers are scalable and that DC3-MWCP can be integrated in other systems.\n\nMost automated processing systems will use a condition, such as a yara signature match, to trigger execution\nof an DC3-MWCP parser.\n\nThere are 3 options for integration of DC3-MWCP:\n- CLI: `mwcp`\n- REST API: `mwcp serve`\n- Python API\n\nDC3-MWCP also includes a utility for test case generation and execution.\n\n### CLI tool\n\nDC3-MWCP can be used directly from the command line using the `mwcp` command.\n\n```console\n> mwcp parse foo ./README.md\n\n----Standard Metadata----\n\nurl                  http://127.0.0.1\naddress              127.0.0.1\n\n----Debug----\n\nsize of inputfile is 7963 bytes\noutputfile: fooconfigtest.txt\noperating on inputfile README.md\n\n----Output Files----\n\nfooconfigtest.txt    example output file\n                     5eb63bbbe01eeed093cb22bb8f5acdc3\n```\n\nsee ```mwcp parse -h``` for full set of options\n\n\n### REST API\n\nDC3-MWCP can be used as a web service. The REST API provides two commonly used functions:\n\n* ```/run_parser/<parser>``` -- executes a parser on uploaded file\n* ```/descriptions``` -- provides list of available parsers\n\nTo use, first start the server by running:\n```console\n> mwcp serve\n```\n\nThen you can either use an HTTP client to create REST requests.\n\nUsing cURL:\n```console\n> curl --form data=@README.md http://localhost:8080/run_parser/foo\n```\n\nUsing Python requests:\n```python\nimport requests\nreq = requests.post(\"http://localhost:8080/run_parser/foo\", files={'data': open(\"README.md\", 'rb')})\nreq.json()\n```\n\nOutput:\n```json\n{\n    \"url\": [\n        \"http://127.0.0.1\"\n    ],\n    \"address\": [\n        \"127.0.0.1\"\n    ],\n    \"debug\": [\n        \"size of inputfile is 7128 bytes\",\n        \"outputfile: fooconfigtest.txt\",\n        \"operating on inputfile C:\\\\Users\\\\JOHN.DOE\\\\AppData\\\\Local\\\\Temp\\\\mwcp-managed_tempdir-pk0f12oh\\\\mwcp-inputfile-n4mw7uw3\"\n    ],\n    \"outputfile\": [\n        [\n            \"fooconfigtest.txt\",\n            \"example output file\",\n            \"5eb63bbbe01eeed093cb22bb8f5acdc3\",\n            \"aGVsbG8gd29ybGQ=\"\n        ]\n    ],\n    \"output_text\": \"\\n----Standard Metadata----\\n\\nurl                  http://127.0.0.1\\naddress              127.0.0.1\\n\\n----Debug----\\n\\nsize of inputfile\nis 7128 bytes\\noutputfile: fooconfigtest.txt\\noperating on inputfile C:\\\\Users\\\\JOHN.DOE\\\\AppData\\\\Local\\\\Temp\\\\mwcp-managed_tempdir-pk0f12oh\\\\mwcp-inputfi\nle-n4mw7uw3\\n\\n----Output Files----\\n\\nfooconfigtest.txt    example output file\\n                     5eb63bbbe01eeed093cb22bb8f5acdc3\\n\"\n}\n```\n\nA simple HTML interface is also available at the same address. By default this\nis `http://localhost:8080/`. Individual samples can be submitted and results\nsaved as JSON, plain text, or ZIP archives.\n\n### Python API\nDC3-MWCP can be run directly from Python.\n\n```python\n#!/usr/bin/env python\n\"\"\"\nSimple example to demonstrate use of the API provided by DC3-MWCP framework.\n\"\"\"\n\n# first, import mwcp\nimport mwcp\n\n# register the builtin MWCP parsers and any other parser packages installed on the system\nmwcp.register_entry_points()\n\n# register a directory containing parsers\nmwcp.register_parser_directory(r'C:\\my_parsers')\n\n# view all available parsers\nprint(mwcp.get_parser_descriptions(config_only=False))\n\n\n# create an instance of the Reporter class\nreporter = mwcp.Reporter()\n\"\"\"\nThe mwcp.Reporter object is the primary DC3-MWCP framework object, containing most input and output data\nand controlling execution of the parser modules.\n\"\"\"\n\n# run the dummy config parser, view the output\nreporter.run_parser(\"foo\", \"README.md\")\n\n# alternate, run on provided buffer:\nreporter.run_parser(\"foo\", data=\"lorem ipsum\")\n\nreporter.print_report()\n```\n\n## Configuration\nDC3-MWCP uses a configuration file which is located within the user's \nprofile directory. (`%APPDATA%\\Local\\mwcp\\config.yml` for Windows or `~/.config/mwcp/config.yml` for Linux)\n\nThis configuration file is used to manage configurable parameters, such as the location\nof the malware repository used for testing or the default parser source.\n\nTo configure this file, run `mwcp config` to open up the file in your default text\neditor.\n\nAn alternative configuration file can also be temporarily set using the `--config` parameter.\n```console\n> mwcp --config='new_config.yml' test Foo\n```\n\nIndividual configuration parameters can be overwritten on the command line using the respective parameter.\n\n\n## Logging\nDC3-MWCP uses Python's builtin in `logging` module to log all messages.\nBy default, logging is configured using the [log_config.yml](mwcp/config/log_config.yml) configuration\nfile. Which is currently set to log all messages to the console and error messages to `%LOCALAPPDATA%/mwcp/errors.log`. \n\nYou can provide your own custom log configuration file by adding the path\nto the configuration parameter `LOG_CONFIG_PATH`. \n(Please see [Python's documentation](http://docs.python.org/dev/library/logging.config.html) for more information on how to write your own configuration file.)\n\nYou may also use the `--verbose` or `--debug` flags to adjust the logging level when using the `mwcp` tool.\n\n\n## Updates\n\nDC3-MWCP code updates are implemented to be backwards compatible.\n\nOne exception to backwards compatibility is when new attributes are amended to previously existing\nfields. An example of this is the MD5 entry being amended to the 'outputfile' field. When attribute\nadditions like this are made, it causes a backwards compatibility conflict with test cases. If\n`mwcp test` is being used to manage regression tests, the amended attributes can cause previously\npassing test cases to fail. To resolve this issue, work in an environment where parsers are in a known\ngood state and run the command `mwcp test -u` to update all test cases. The newly generated test\ncases will include the updated field values.\n\n## Schema\n\nOne of the major goals of DC3-MWCP is to standardize output for malware configuration parsers, making the data\nfrom one parser comparable with that of other parsers. This is achieved by establishing a schema of\nstandardized fields that represent the common malware attributes seen across malware families. To see the\nlist of standardized fields and their definitions, see [fields.json](mwcp/config/fields.json).\n\nIt is acknowledged that a set of generic fields will often not be adequate to capture the nuances of\nindividual malware families. To ensure that malware family specific attributes are appropriately captured\nin parser output, the schema includes an \"other\" field which supports arbitrary key-value pairs. Information\nnot captured in the abstract standardized fields is captured through this mechanism.\n\nDuplication of data items is encouraged both to provide additional family specific context and to\nsimplify access of data through both composite fields and individual fields. The DC3-MWCP framework extracts\nindividual items reported in composite fields to the degree possible. For example, the address in a url\nwill be extracted automatically by DC3-MWCP.\n\nSee [fields.txt](mwcp/config/fields.txt) for additional explanation.\n\n\n## Helper Utilities\nMWCP comes with a few helper utilities (located in `mwcp.utils`) that may become useful for parsing malware files.\n\n- `pefileutils` - Provides helper functions for common routines done with the `pefile` library. (obtaining or checking for exports, imports, resources, sections, etc.)\n- `elffileutils` - Provides helper functions for common routines done with the `elftools` library. Provides a consistent interface similar to `pefileutils`.\n- `custombase64` - Provides functions for base64 encoding/decoding data with a custom alphabet.\n- `construct` - Provides extended functionality to the [construct](https://construct.readthedocs.io) library and brings\nback some lost features from version 2.8 into 2.9.\n    - This library has replaced the `enstructured` library originally found in the resources directory.\n    - Please follow [this tutorial](docs/construct.ipynb) for migrating from `enstructured` to `construct`.\n- `pecon` - PE file reconstruction utility.\n    - Please see docstring in [pecon.py](mwcp/utils/pecon.py) for more information.\n- `poshdeob` - An experimental powershell deobfuscator utility used to statically deobfuscate code and extract strings.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Defense-Cyber-Crime-Center/DC3-MWCP/", "keywords": "malware", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mwcp", "package_url": "https://pypi.org/project/mwcp/", "platform": "", "project_url": "https://pypi.org/project/mwcp/", "project_urls": {"Homepage": "http://github.com/Defense-Cyber-Crime-Center/DC3-MWCP/"}, "release_url": "https://pypi.org/project/mwcp/3.0.1/", "requires_dist": ["appdirs", "click", "construct (==2.9.45)", "future", "jinja2", "pefile (>=2019.4.18)", "pyelftools", "pyparsing (==2.3.0)", "pyyaml", "requests", "ruamel.yaml", "six", "tabulate", "flask (~=1.1.0)", "pygments (~=2.2.0)", "pytest", "pytest-console-scripts", "tox", "kordesii (>=1.4.0) ; extra == 'kordesii'"], "requires_python": "", "summary": "A framework for malware configuration parsers.", "version": "3.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DC3-MWCP</h1>\n<p><a href=\"CHANGELOG.md\" rel=\"nofollow\">Changelog</a> | <a href=\"https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP/releases\" rel=\"nofollow\">Releases</a></p>\n<p>DC3 Malware Configuration Parser (DC3-MWCP) is a framework for parsing configuration information from malware.\nThe information extracted from malware includes items such as addresses, passwords, filenames, and\nmutex names. A parser module is usually created per malware family.\nDC3-MWCP is designed to help ensure consistency in parser function and output, ease parser development,\nand facilitate parser sharing. DC3-MWCP supports both analyst directed analysis and\nlarge-scale automated execution, utilizing either the native python API, a REST API, or a provided\ncommand line tool. DC3-MWCP is authored by the Defense Cyber Crime Center (DC3).</p>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#dc3-kordesii-support\" rel=\"nofollow\">DC3-Kordesii Support</a></li>\n<li><a href=\"#testing\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#cli-tool\" rel=\"nofollow\">CLI Tool</a></li>\n<li><a href=\"#rest-api\" rel=\"nofollow\">REST API</a></li>\n<li><a href=\"#python-api\" rel=\"nofollow\">Python API</a></li>\n</ul>\n</li>\n<li><a href=\"#updates\" rel=\"nofollow\">Updates</a></li>\n<li><a href=\"#schema\" rel=\"nofollow\">Schema</a></li>\n<li><a href=\"#helper-utilities\" rel=\"nofollow\">Helper Utilities</a></li>\n</ul>\n<h3>Guides</h3>\n<ul>\n<li><a href=\"docs/ParserDevelopment.md\" rel=\"nofollow\">Parser Development</a></li>\n<li><a href=\"docs/ParserComponents.md\" rel=\"nofollow\">Parser Components</a></li>\n<li><a href=\"docs/ParserInstallation.md\" rel=\"nofollow\">Parser Installation</a></li>\n<li><a href=\"docs/ParserTesting.md\" rel=\"nofollow\">Parser Testing</a></li>\n<li><a href=\"docs/PythonStyleGuide.md\" rel=\"nofollow\">Python Style Guide</a></li>\n<li><a href=\"docs/construct.ipynb\" rel=\"nofollow\">Construct Tutorial</a></li>\n<li><a href=\"docs/PythonStyleGuide.md\" rel=\"nofollow\">Style Guide</a></li>\n<li><a href=\"docs/Testing.md\" rel=\"nofollow\">Testing</a></li>\n</ul>\n<h2>Install</h2>\n<pre><span class=\"gp\">&gt;</span> pip install mwcp\n</pre>\n<p>Alternatively you can clone this repo and install locally.</p>\n<pre><span class=\"gp\">&gt;</span> git clone https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP.git\n<span class=\"gp\">&gt;</span> pip install ./DC3-MWCP\n</pre>\n<p>For a development mode use the <code>-e</code> flag to install in editable mode:</p>\n<pre><span class=\"gp\">&gt;</span> git clone https://github.com/Defense-Cyber-Crime-Center/DC3-MWCP.git\n<span class=\"gp\">&gt;</span> pip install -e ./DC3-MWCP\n</pre>\n<h2>DC3-Kordesii Support</h2>\n<p>DC3-MWCP optionally supports <a href=\"https://github.com/Defense-Cyber-Crime-Center/kordesii\" rel=\"nofollow\">DC3-Kordesii</a>\nif it is installed. This will allow you to run any DC3-Kordesii decoder from the\n<code>mwcp.FileObject</code> object with the <code>run_kordesii_decoder</code> function.</p>\n\n<h2>Testing</h2>\n<p>DC3-MWCP uses <a href=\"https://tox.readthedocs.io\" rel=\"nofollow\">tox</a> with <a href=\"https://pytest.org\" rel=\"nofollow\">pytest</a> to test the core code\nand parsers. These libraries will be installed when you install DC3-MWCP.\nTo run all tests on Python 2.7 and 3.6 run the <code>tox</code> command after installation.</p>\n<pre><span class=\"gp\">&gt;</span> tox\n<span class=\"go\">GLOB sdist-make: C:\\dev\\DC3_MWCP\\setup.py</span>\n<span class=\"go\">py27 inst-nodeps: C:\\dev\\DC3_MWCP\\.tox\\dist\\mwcp-1.2.0.zip</span>\n<span class=\"go\">py27 installed: attrs==17.4.0,bottle==0.12.13,certifi==2018.4.16,chardet==3.0.4,colorama==0.3.9,construct==2.8.12,funcsigs==1.0.2,future==0.16.0,idna==2.6,Jinja2==2.10,MarkupSafe==1.0,mock==2.0.0,more-itertools==4.1.0,mwcp==1.2.0,pbr==4.0.2,pefile==2017.11.5,pluggy==0.6.0,py==1.5.3,pytest==3.5.0,pytest-console-scripts==0.1.4,pytest-mock==1.9.0,requests==2.18.4,six==1.11.0,tox==3.0.0,urllib3==1.22,virtualenv==15.2.0</span>\n<span class=\"go\">py27 runtests: PYTHONHASHSEED='155'</span>\n<span class=\"go\">py27 runtests: commands[0] | pytest --doctest-modules</span>\n<span class=\"go\">============================= test session starts =============================</span>\n<span class=\"go\">platform win32 -- Python 2.7.14, pytest-3.5.0, py-1.5.3, pluggy-0.6.0</span>\n<span class=\"go\">rootdir: C:\\dev\\DC3_MWCP, inifile: tox.ini</span>\n<span class=\"go\">plugins: mock-1.9.0, console-scripts-0.1.4</span>\n<span class=\"go\">collected 59 items</span>\n\n<span class=\"go\">mwcp\\utils\\construct\\construct_html.py .                                 [  1%]</span>\n<span class=\"go\">mwcp\\utils\\construct\\helpers.py .........................                [ 44%]</span>\n<span class=\"go\">mwcp\\utils\\construct\\windows_enums.py ....                               [ 50%]</span>\n<span class=\"go\">mwcp\\utils\\construct\\windows_structures.py .                             [ 52%]</span>\n<span class=\"go\">tests\\test_cli.py .......                                                [ 64%]</span>\n<span class=\"go\">tests\\test_custombase64.py ...                                           [ 69%]</span>\n<span class=\"go\">tests\\test_dispatcher.py .....                                           [ 77%]</span>\n<span class=\"go\">tests\\test_parser_registry.py ..                                         [ 81%]</span>\n<span class=\"go\">tests\\test_reporter.py ...........                                       [100%]</span>\n\n<span class=\"go\">========================== 59 passed in 8.30 seconds ==========================</span>\n<span class=\"go\">py36 inst-nodeps: C:\\dev\\DC3_MWCP\\.tox\\dist\\mwcp-1.2.0.zip</span>\n<span class=\"go\">py36 installed: attrs==17.4.0,bottle==0.12.13,certifi==2018.4.16,chardet==3.0.4,colorama==0.3.9,construct==2.8.12,future==0.16.0,idna==2.6,Jinja2==2.10,MarkupSafe==1.0,mock==2.0.0,more-itertools==4.1.0,mwcp==1.2.0,pbr==4.0.2,pefile==2017.11.5,pluggy==0.6.0,py==1.5.3,pytest==3.5.0,pytest-console-scripts==0.1.4,pytest-mock==1.9.0,requests==2.18.4,six==1.11.0,tox==3.0.0,urllib3==1.22,virtualenv==15.2.0</span>\n<span class=\"go\">py36 runtests: PYTHONHASHSEED='155'</span>\n<span class=\"go\">py36 runtests: commands[0] | pytest</span>\n<span class=\"go\">============================= test session starts =============================</span>\n<span class=\"go\">platform win32 -- Python 3.6.3, pytest-3.5.0, py-1.5.3, pluggy-0.6.0</span>\n<span class=\"go\">rootdir: C:\\dev\\DC3_MWCP, inifile: tox.ini</span>\n<span class=\"go\">plugins: mock-1.9.0, console-scripts-0.1.4</span>\n<span class=\"go\">collected 28 items</span>\n\n<span class=\"go\">tests\\test_cli.py .......                                                [ 25%]</span>\n<span class=\"go\">tests\\test_custombase64.py ...                                           [ 35%]</span>\n<span class=\"go\">tests\\test_dispatcher.py .....                                           [ 53%]</span>\n<span class=\"go\">tests\\test_parser_registry.py ..                                         [ 60%]</span>\n<span class=\"go\">tests\\test_reporter.py ...........                                       [100%]</span>\n\n<span class=\"go\">========================== 28 passed in 6.33 seconds ==========================</span>\n<span class=\"go\">___________________________________ summary ___________________________________</span>\n<span class=\"go\">  py27: commands succeeded</span>\n<span class=\"go\">  py36: commands succeeded</span>\n<span class=\"go\">  congratulations :)</span>\n</pre>\n<h2>Usage</h2>\n<p>DC3-MWCP is designed to allow easy development and use of malware config parsers. DC3-MWCP is also designed to ensure\nthat these parsers are scalable and that DC3-MWCP can be integrated in other systems.</p>\n<p>Most automated processing systems will use a condition, such as a yara signature match, to trigger execution\nof an DC3-MWCP parser.</p>\n<p>There are 3 options for integration of DC3-MWCP:</p>\n<ul>\n<li>CLI: <code>mwcp</code></li>\n<li>REST API: <code>mwcp serve</code></li>\n<li>Python API</li>\n</ul>\n<p>DC3-MWCP also includes a utility for test case generation and execution.</p>\n<h3>CLI tool</h3>\n<p>DC3-MWCP can be used directly from the command line using the <code>mwcp</code> command.</p>\n<pre><span class=\"gp\">&gt;</span> mwcp parse foo ./README.md\n\n<span class=\"go\">----Standard Metadata----</span>\n\n<span class=\"go\">url                  http://127.0.0.1</span>\n<span class=\"go\">address              127.0.0.1</span>\n\n<span class=\"go\">----Debug----</span>\n\n<span class=\"go\">size of inputfile is 7963 bytes</span>\n<span class=\"go\">outputfile: fooconfigtest.txt</span>\n<span class=\"go\">operating on inputfile README.md</span>\n\n<span class=\"go\">----Output Files----</span>\n\n<span class=\"go\">fooconfigtest.txt    example output file</span>\n<span class=\"go\">                     5eb63bbbe01eeed093cb22bb8f5acdc3</span>\n</pre>\n<p>see <code>mwcp parse -h</code> for full set of options</p>\n<h3>REST API</h3>\n<p>DC3-MWCP can be used as a web service. The REST API provides two commonly used functions:</p>\n<ul>\n<li><code>/run_parser/&lt;parser&gt;</code> -- executes a parser on uploaded file</li>\n<li><code>/descriptions</code> -- provides list of available parsers</li>\n</ul>\n<p>To use, first start the server by running:</p>\n<pre><span class=\"gp\">&gt;</span> mwcp serve\n</pre>\n<p>Then you can either use an HTTP client to create REST requests.</p>\n<p>Using cURL:</p>\n<pre><span class=\"gp\">&gt;</span> curl --form <span class=\"nv\">data</span><span class=\"o\">=</span>@README.md http://localhost:8080/run_parser/foo\n</pre>\n<p>Using Python requests:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:8080/run_parser/foo\"</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"README.md\"</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)})</span>\n<span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"http://127.0.0.1\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"address\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"127.0.0.1\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"debug\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"size of inputfile is 7128 bytes\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"outputfile: fooconfigtest.txt\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"operating on inputfile C:\\\\Users\\\\JOHN.DOE\\\\AppData\\\\Local\\\\Temp\\\\mwcp-managed_tempdir-pk0f12oh\\\\mwcp-inputfile-n4mw7uw3\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"outputfile\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span>\n            <span class=\"s2\">\"fooconfigtest.txt\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"example output file\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"5eb63bbbe01eeed093cb22bb8f5acdc3\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"aGVsbG8gd29ybGQ=\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"output_text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\\n----Standard Metadata----\\n\\nurl                  http://127.0.0.1\\naddress              127.0.0.1\\n\\n----Debug----\\n\\nsize of inputfile</span>\n<span class=\"s2\">is 7128 bytes\\noutputfile: fooconfigtest.txt\\noperating on inputfile C:\\\\Users\\\\JOHN.DOE\\\\AppData\\\\Local\\\\Temp\\\\mwcp-managed_tempdir-pk0f12oh\\\\mwcp-inputfi</span>\n<span class=\"s2\">le-n4mw7uw3\\n\\n----Output Files----\\n\\nfooconfigtest.txt    example output file\\n                     5eb63bbbe01eeed093cb22bb8f5acdc3\\n\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A simple HTML interface is also available at the same address. By default this\nis <code>http://localhost:8080/</code>. Individual samples can be submitted and results\nsaved as JSON, plain text, or ZIP archives.</p>\n<h3>Python API</h3>\n<p>DC3-MWCP can be run directly from Python.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Simple example to demonstrate use of the API provided by DC3-MWCP framework.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># first, import mwcp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mwcp</span>\n\n<span class=\"c1\"># register the builtin MWCP parsers and any other parser packages installed on the system</span>\n<span class=\"n\">mwcp</span><span class=\"o\">.</span><span class=\"n\">register_entry_points</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># register a directory containing parsers</span>\n<span class=\"n\">mwcp</span><span class=\"o\">.</span><span class=\"n\">register_parser_directory</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'C:\\my_parsers'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># view all available parsers</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">mwcp</span><span class=\"o\">.</span><span class=\"n\">get_parser_descriptions</span><span class=\"p\">(</span><span class=\"n\">config_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># create an instance of the Reporter class</span>\n<span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">mwcp</span><span class=\"o\">.</span><span class=\"n\">Reporter</span><span class=\"p\">()</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">The mwcp.Reporter object is the primary DC3-MWCP framework object, containing most input and output data</span>\n<span class=\"sd\">and controlling execution of the parser modules.</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"c1\"># run the dummy config parser, view the output</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">run_parser</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"README.md\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># alternate, run on provided buffer:</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">run_parser</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"s2\">\"lorem ipsum\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">print_report</span><span class=\"p\">()</span>\n</pre>\n<h2>Configuration</h2>\n<p>DC3-MWCP uses a configuration file which is located within the user's\nprofile directory. (<code>%APPDATA%\\Local\\mwcp\\config.yml</code> for Windows or <code>~/.config/mwcp/config.yml</code> for Linux)</p>\n<p>This configuration file is used to manage configurable parameters, such as the location\nof the malware repository used for testing or the default parser source.</p>\n<p>To configure this file, run <code>mwcp config</code> to open up the file in your default text\neditor.</p>\n<p>An alternative configuration file can also be temporarily set using the <code>--config</code> parameter.</p>\n<pre><span class=\"gp\">&gt;</span> mwcp --config<span class=\"o\">=</span><span class=\"s1\">'new_config.yml'</span> <span class=\"nb\">test</span> Foo\n</pre>\n<p>Individual configuration parameters can be overwritten on the command line using the respective parameter.</p>\n<h2>Logging</h2>\n<p>DC3-MWCP uses Python's builtin in <code>logging</code> module to log all messages.\nBy default, logging is configured using the <a href=\"mwcp/config/log_config.yml\" rel=\"nofollow\">log_config.yml</a> configuration\nfile. Which is currently set to log all messages to the console and error messages to <code>%LOCALAPPDATA%/mwcp/errors.log</code>.</p>\n<p>You can provide your own custom log configuration file by adding the path\nto the configuration parameter <code>LOG_CONFIG_PATH</code>.\n(Please see <a href=\"http://docs.python.org/dev/library/logging.config.html\" rel=\"nofollow\">Python's documentation</a> for more information on how to write your own configuration file.)</p>\n<p>You may also use the <code>--verbose</code> or <code>--debug</code> flags to adjust the logging level when using the <code>mwcp</code> tool.</p>\n<h2>Updates</h2>\n<p>DC3-MWCP code updates are implemented to be backwards compatible.</p>\n<p>One exception to backwards compatibility is when new attributes are amended to previously existing\nfields. An example of this is the MD5 entry being amended to the 'outputfile' field. When attribute\nadditions like this are made, it causes a backwards compatibility conflict with test cases. If\n<code>mwcp test</code> is being used to manage regression tests, the amended attributes can cause previously\npassing test cases to fail. To resolve this issue, work in an environment where parsers are in a known\ngood state and run the command <code>mwcp test -u</code> to update all test cases. The newly generated test\ncases will include the updated field values.</p>\n<h2>Schema</h2>\n<p>One of the major goals of DC3-MWCP is to standardize output for malware configuration parsers, making the data\nfrom one parser comparable with that of other parsers. This is achieved by establishing a schema of\nstandardized fields that represent the common malware attributes seen across malware families. To see the\nlist of standardized fields and their definitions, see <a href=\"mwcp/config/fields.json\" rel=\"nofollow\">fields.json</a>.</p>\n<p>It is acknowledged that a set of generic fields will often not be adequate to capture the nuances of\nindividual malware families. To ensure that malware family specific attributes are appropriately captured\nin parser output, the schema includes an \"other\" field which supports arbitrary key-value pairs. Information\nnot captured in the abstract standardized fields is captured through this mechanism.</p>\n<p>Duplication of data items is encouraged both to provide additional family specific context and to\nsimplify access of data through both composite fields and individual fields. The DC3-MWCP framework extracts\nindividual items reported in composite fields to the degree possible. For example, the address in a url\nwill be extracted automatically by DC3-MWCP.</p>\n<p>See <a href=\"mwcp/config/fields.txt\" rel=\"nofollow\">fields.txt</a> for additional explanation.</p>\n<h2>Helper Utilities</h2>\n<p>MWCP comes with a few helper utilities (located in <code>mwcp.utils</code>) that may become useful for parsing malware files.</p>\n<ul>\n<li><code>pefileutils</code> - Provides helper functions for common routines done with the <code>pefile</code> library. (obtaining or checking for exports, imports, resources, sections, etc.)</li>\n<li><code>elffileutils</code> - Provides helper functions for common routines done with the <code>elftools</code> library. Provides a consistent interface similar to <code>pefileutils</code>.</li>\n<li><code>custombase64</code> - Provides functions for base64 encoding/decoding data with a custom alphabet.</li>\n<li><code>construct</code> - Provides extended functionality to the <a href=\"https://construct.readthedocs.io\" rel=\"nofollow\">construct</a> library and brings\nback some lost features from version 2.8 into 2.9.\n<ul>\n<li>This library has replaced the <code>enstructured</code> library originally found in the resources directory.</li>\n<li>Please follow <a href=\"docs/construct.ipynb\" rel=\"nofollow\">this tutorial</a> for migrating from <code>enstructured</code> to <code>construct</code>.</li>\n</ul>\n</li>\n<li><code>pecon</code> - PE file reconstruction utility.\n<ul>\n<li>Please see docstring in <a href=\"mwcp/utils/pecon.py\" rel=\"nofollow\">pecon.py</a> for more information.</li>\n</ul>\n</li>\n<li><code>poshdeob</code> - An experimental powershell deobfuscator utility used to statically deobfuscate code and extract strings.</li>\n</ul>\n\n          </div>"}, "last_serial": 7147139, "releases": {"3.0.1": [{"comment_text": "", "digests": {"md5": "c4756fcb40b14372005e62e739bcfba7", "sha256": "239edbfbd59c4414bc2d33468b6ee57a05737824a2f018be1e10cd9b66f5b122"}, "downloads": -1, "filename": "mwcp-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4756fcb40b14372005e62e739bcfba7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128174, "upload_time": "2020-05-01T18:58:28", "upload_time_iso_8601": "2020-05-01T18:58:28.816486Z", "url": "https://files.pythonhosted.org/packages/cf/d4/f337d413f79ea2a86cb9d3330ed5ce11dda456f5fbbae9530159c350f0b9/mwcp-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "954676af167ef3f2f9dab188984c735a", "sha256": "a62f37f324858c1b6ef97fde50acf65f4a66fdaf1293d6e1004557a34d8d4c88"}, "downloads": -1, "filename": "mwcp-3.0.1.tar.gz", "has_sig": false, "md5_digest": "954676af167ef3f2f9dab188984c735a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119123, "upload_time": "2020-05-01T18:58:31", "upload_time_iso_8601": "2020-05-01T18:58:31.008162Z", "url": "https://files.pythonhosted.org/packages/5b/88/118fa6deb3d05b71ccca36045be4f72097048063ec934c3afb4e4b889d3c/mwcp-3.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4756fcb40b14372005e62e739bcfba7", "sha256": "239edbfbd59c4414bc2d33468b6ee57a05737824a2f018be1e10cd9b66f5b122"}, "downloads": -1, "filename": "mwcp-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4756fcb40b14372005e62e739bcfba7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 128174, "upload_time": "2020-05-01T18:58:28", "upload_time_iso_8601": "2020-05-01T18:58:28.816486Z", "url": "https://files.pythonhosted.org/packages/cf/d4/f337d413f79ea2a86cb9d3330ed5ce11dda456f5fbbae9530159c350f0b9/mwcp-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "954676af167ef3f2f9dab188984c735a", "sha256": "a62f37f324858c1b6ef97fde50acf65f4a66fdaf1293d6e1004557a34d8d4c88"}, "downloads": -1, "filename": "mwcp-3.0.1.tar.gz", "has_sig": false, "md5_digest": "954676af167ef3f2f9dab188984c735a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 119123, "upload_time": "2020-05-01T18:58:31", "upload_time_iso_8601": "2020-05-01T18:58:31.008162Z", "url": "https://files.pythonhosted.org/packages/5b/88/118fa6deb3d05b71ccca36045be4f72097048063ec934c3afb4e4b889d3c/mwcp-3.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:59 2020"}