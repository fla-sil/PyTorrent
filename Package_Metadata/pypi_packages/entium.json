{"info": {"author": "Brandon Barker", "author_email": "brandon@comma.ai", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: Public Domain", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Utilities"], "description": "# entium\nA command line tool to read [entwine's](http://entwine.io) output and convert it into\n[Cesium 3DTiles](https://github.com/AnalyticalGraphicsInc/3d-tiles).\n\n## Installation\nEntium supports python 2.7 or greater. To install run: \n`pip install entium`\nEnsure there is an active installation of python on the machine!\n\n### Development\nTo make modifications or install a development version run:\n```\ngit clone https://github.com/commaai/entium.git\ncd entium\npip install .\n```\n\n## Command Usage\n```\nusage: entium [-h] [-p [PRECISION]] [-c [CONFIG]] [--validate]\n              {tileset,tile,both} entwine_dir output_dir\n\nConvert the entwine hierarchy to a cesium tileset\n\npositional arguments:\n  {tileset,tile,both}\n  entwine_dir           input folder for entwine\n  output_dir            output folder for the cesium tilests\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p [PRECISION], --precision [PRECISION]\n                        precision in meters required to use quantized tiles\n  -c [CONFIG], --config [CONFIG]\n                        filepath to config file to use advanced features\n  --validate            run post-process to validate point precision\n```\n\n## Configuration\nThe average user will not need a configuration file if the intent is to directly convert entwines output into cesium tiles. However, if the goal is to use more component types larger than a scalar many of the configuration options may be helpful. The config is a `.json` intended to exist within the `entwine.json`.\n\n### Grouping Attributes\nGrouping works for both **batch table** properties and **feature table** properties. To have grouped component stored as a feature table value instead of batch table use one of the specified names:\n - RGB\n - RGBA\n - RGB565\n - NORMAL\n - NORMAL_OCT16P\n - BATCH_ID\n\nSee [point semantics](https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/TileFormats/PointCloud/README.md#semantics) for more information about these properties. Its also import to note that the order the items are defined in the array will define the order they exist in the component.\n#### Example 1 \n*RGB* will be recognized as a feature attribute and grouped while *pose* will be recognized and grouped as a batch attribute.\n```json\\\n\"cesium\": {\n    \"groups\": {\n        \"rgb\": [\n            \"r\", \n            \"g\", \n            \"b\"\n        ], \n        \"pose\": [\n            \"poseX\", \n            \"poseY\", \n            \"poseZ\",\n\t        \"poseW\"\n        ]\n    }\n}\n```\n\n### Example 2 \nSingle properties can also be renamed. In this example, *color* is being renamed to *rgb565*.\n```json\n    \"cesium\": {\n        \"groups\": {\n            \"rgb565\": \"color\"\n        }\n    }\n```\n### Batching Table Attributes (Experimental)\nSometimes points have metadata attached to them but that value is representative of some kind of group. This has the potential to reduce data duplication and provide enhanced styling through cesium. Currently the design allows for some attributes to not be in a batch table and rather act as a batch attribute. The hope is sometime in the future both types of batch attributes can be used in unison. \n\n#### Example\n```json\n    \"cesium\": {\n        \"batched\": [\n            \"id\",\n            \"version\"\n        ]\n    }\n```\n\n\n## Todo\n - [X] Property grouping\n - [X] Support batch properties\n - [X] Support batch tables\n - [ ] Add unit testing \n - [ ] Only update modified tiles\n - [ ] Parallelize conversion to 3DTiles\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/commaai/entium", "keywords": "cli,entwine,cesium,converter", "license": "MIT LICENSE", "maintainer": "", "maintainer_email": "", "name": "entium", "package_url": "https://pypi.org/project/entium/", "platform": "", "project_url": "https://pypi.org/project/entium/", "project_urls": {"Homepage": "https://github.com/commaai/entium"}, "release_url": "https://pypi.org/project/entium/0.1.4/", "requires_dist": ["enum34 (==1.1.6)", "numpy (==1.14.5)"], "requires_python": "", "summary": "A command line tool to read entwine's convert into Cesium 3DTiles", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>entium</h1>\n<p>A command line tool to read <a href=\"http://entwine.io\" rel=\"nofollow\">entwine's</a> output and convert it into\n<a href=\"https://github.com/AnalyticalGraphicsInc/3d-tiles\" rel=\"nofollow\">Cesium 3DTiles</a>.</p>\n<h2>Installation</h2>\n<p>Entium supports python 2.7 or greater. To install run:\n<code>pip install entium</code>\nEnsure there is an active installation of python on the machine!</p>\n<h3>Development</h3>\n<p>To make modifications or install a development version run:</p>\n<pre><code>git clone https://github.com/commaai/entium.git\ncd entium\npip install .\n</code></pre>\n<h2>Command Usage</h2>\n<pre><code>usage: entium [-h] [-p [PRECISION]] [-c [CONFIG]] [--validate]\n              {tileset,tile,both} entwine_dir output_dir\n\nConvert the entwine hierarchy to a cesium tileset\n\npositional arguments:\n  {tileset,tile,both}\n  entwine_dir           input folder for entwine\n  output_dir            output folder for the cesium tilests\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p [PRECISION], --precision [PRECISION]\n                        precision in meters required to use quantized tiles\n  -c [CONFIG], --config [CONFIG]\n                        filepath to config file to use advanced features\n  --validate            run post-process to validate point precision\n</code></pre>\n<h2>Configuration</h2>\n<p>The average user will not need a configuration file if the intent is to directly convert entwines output into cesium tiles. However, if the goal is to use more component types larger than a scalar many of the configuration options may be helpful. The config is a <code>.json</code> intended to exist within the <code>entwine.json</code>.</p>\n<h3>Grouping Attributes</h3>\n<p>Grouping works for both <strong>batch table</strong> properties and <strong>feature table</strong> properties. To have grouped component stored as a feature table value instead of batch table use one of the specified names:</p>\n<ul>\n<li>RGB</li>\n<li>RGBA</li>\n<li>RGB565</li>\n<li>NORMAL</li>\n<li>NORMAL_OCT16P</li>\n<li>BATCH_ID</li>\n</ul>\n<p>See <a href=\"https://github.com/AnalyticalGraphicsInc/3d-tiles/blob/master/specification/TileFormats/PointCloud/README.md#semantics\" rel=\"nofollow\">point semantics</a> for more information about these properties. Its also import to note that the order the items are defined in the array will define the order they exist in the component.</p>\n<h4>Example 1</h4>\n<p><em>RGB</em> will be recognized as a feature attribute and grouped while <em>pose</em> will be recognized and grouped as a batch attribute.</p>\n<pre>\"cesium\": {\n    \"groups\": {\n        \"rgb\": [\n            \"r\", \n            \"g\", \n            \"b\"\n        ], \n        \"pose\": [\n            \"poseX\", \n            \"poseY\", \n            \"poseZ\",\n\t        \"poseW\"\n        ]\n    }\n}\n</pre>\n<h3>Example 2</h3>\n<p>Single properties can also be renamed. In this example, <em>color</em> is being renamed to <em>rgb565</em>.</p>\n<pre>    <span class=\"s2\">\"cesium\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"groups\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"rgb565\"</span><span class=\"p\">:</span> <span class=\"s2\">\"color\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</pre>\n<h3>Batching Table Attributes (Experimental)</h3>\n<p>Sometimes points have metadata attached to them but that value is representative of some kind of group. This has the potential to reduce data duplication and provide enhanced styling through cesium. Currently the design allows for some attributes to not be in a batch table and rather act as a batch attribute. The hope is sometime in the future both types of batch attributes can be used in unison.</p>\n<h4>Example</h4>\n<pre>    <span class=\"s2\">\"cesium\"</span><span class=\"err\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"batched\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"version\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n</pre>\n<h2>Todo</h2>\n<ul>\n<li>[X] Property grouping</li>\n<li>[X] Support batch properties</li>\n<li>[X] Support batch tables</li>\n<li>[ ] Add unit testing</li>\n<li>[ ] Only update modified tiles</li>\n<li>[ ] Parallelize conversion to 3DTiles</li>\n</ul>\n\n          </div>"}, "last_serial": 4310552, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c3a5244c78777f6868edf0c92ad338fe", "sha256": "32a8e9260c35c8c303baafdcf0c8c6e190bc220a08fed9cad07fdbb252bcb412"}, "downloads": -1, "filename": "entium-release-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c3a5244c78777f6868edf0c92ad338fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48079, "upload_time": "2018-08-16T01:05:46", "upload_time_iso_8601": "2018-08-16T01:05:46.399862Z", "url": "https://files.pythonhosted.org/packages/f8/53/26d77fb4d09145550396d37a1058d16fbe7ffd8844165cd9896686d547a7/entium-release-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "26ac4ccb5b350a06b62836d246d02431", "sha256": "58710335256266f97456ca378899cf21b65b67fd4e0c65f895a16b291bba8db2"}, "downloads": -1, "filename": "entium-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26ac4ccb5b350a06b62836d246d02431", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12007, "upload_time": "2018-09-04T01:24:46", "upload_time_iso_8601": "2018-09-04T01:24:46.044464Z", "url": "https://files.pythonhosted.org/packages/65/51/24b7198ae4dd6f706e9e33128aa7813c51ef67c494d80684a99b6a415f0c/entium-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7ec31acdce8b76b87584fc9a0d828a2", "sha256": "b8120fa5507984ae92fa507b0b7e499b3b2ac2c0dd27e29d23060e53b43b2c30"}, "downloads": -1, "filename": "entium-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c7ec31acdce8b76b87584fc9a0d828a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10363, "upload_time": "2018-09-04T01:24:47", "upload_time_iso_8601": "2018-09-04T01:24:47.080368Z", "url": "https://files.pythonhosted.org/packages/3e/7e/3c93911858b6ea616251057228847addea8f80af1671c8db984f611b8792/entium-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "514d684ff639d55177c383abdbf4381f", "sha256": "ed8cf0e3a1b121bc1929cd2585cdbc40912c1eeddb35b6dceb8f8a414c26e6d0"}, "downloads": -1, "filename": "entium-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "514d684ff639d55177c383abdbf4381f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12003, "upload_time": "2018-09-24T21:30:50", "upload_time_iso_8601": "2018-09-24T21:30:50.448375Z", "url": "https://files.pythonhosted.org/packages/1f/35/5b8c1d7a7fb56aedf585cc4c821bd7441558263527f708bfe1439c1019e0/entium-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b9749f5caf0690a84c9ebbd551ec83a", "sha256": "b7fd582ffbdb2f7a93eb83080a073ddea73ace5dabb0c23a486c70bd0d3f8b43"}, "downloads": -1, "filename": "entium-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0b9749f5caf0690a84c9ebbd551ec83a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10373, "upload_time": "2018-09-24T21:30:52", "upload_time_iso_8601": "2018-09-24T21:30:52.448307Z", "url": "https://files.pythonhosted.org/packages/f1/c3/b92459727880af49cbbf71503836325d0ba63818461dbda81312b16b142a/entium-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0ca760b5b17ecb1553dd941d9eb3034d", "sha256": "4b14b4810a97ab041b629a0b59d21a98f5e197ee623d7b14925755ec4fd6888a"}, "downloads": -1, "filename": "entium-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ca760b5b17ecb1553dd941d9eb3034d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12006, "upload_time": "2018-09-25T22:49:00", "upload_time_iso_8601": "2018-09-25T22:49:00.704951Z", "url": "https://files.pythonhosted.org/packages/b0/19/7ee55a11f66c6f40d2b65d59b193a2d3f929f11e4f0d007a13269c15965d/entium-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e8edc16c88686595c3a2bae3a602a6", "sha256": "233f39c6b5477e0c6fffd8d5cb7fc9df9deab80c79c7fb77e91f6d046782b0ce"}, "downloads": -1, "filename": "entium-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c0e8edc16c88686595c3a2bae3a602a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10371, "upload_time": "2018-09-25T22:49:02", "upload_time_iso_8601": "2018-09-25T22:49:02.189096Z", "url": "https://files.pythonhosted.org/packages/35/d2/6523a718ac2dd8faf6e40b6b43c8f22f7c5d27be2dbfd74c5ce9f24c91a6/entium-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0ca760b5b17ecb1553dd941d9eb3034d", "sha256": "4b14b4810a97ab041b629a0b59d21a98f5e197ee623d7b14925755ec4fd6888a"}, "downloads": -1, "filename": "entium-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0ca760b5b17ecb1553dd941d9eb3034d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12006, "upload_time": "2018-09-25T22:49:00", "upload_time_iso_8601": "2018-09-25T22:49:00.704951Z", "url": "https://files.pythonhosted.org/packages/b0/19/7ee55a11f66c6f40d2b65d59b193a2d3f929f11e4f0d007a13269c15965d/entium-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e8edc16c88686595c3a2bae3a602a6", "sha256": "233f39c6b5477e0c6fffd8d5cb7fc9df9deab80c79c7fb77e91f6d046782b0ce"}, "downloads": -1, "filename": "entium-0.1.4.tar.gz", "has_sig": false, "md5_digest": "c0e8edc16c88686595c3a2bae3a602a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10371, "upload_time": "2018-09-25T22:49:02", "upload_time_iso_8601": "2018-09-25T22:49:02.189096Z", "url": "https://files.pythonhosted.org/packages/35/d2/6523a718ac2dd8faf6e40b6b43c8f22f7c5d27be2dbfd74c5ce9f24c91a6/entium-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:13 2020"}