{"info": {"author": "Sean Gillies", "author_email": "sean@mapbox.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: C", "Programming Language :: Cython", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Multimedia :: Graphics :: Graphics Conversion", "Topic :: Scientific/Engineering :: GIS"], "description": "========\nRasterio\n========\n\nRasterio reads and writes geospatial raster data.\n\n.. image:: https://travis-ci.org/mapbox/rasterio.png?branch=master\n   :target: https://travis-ci.org/mapbox/rasterio\n\n.. image:: https://coveralls.io/repos/github/mapbox/rasterio/badge.svg?branch=master\n   :target: https://coveralls.io/github/mapbox/rasterio?branch=master\n\nGeographic information systems use GeoTIFF and other formats to organize and\nstore gridded, or raster, datasets. Rasterio reads and writes these formats and\nprovides a Python API based on N-D arrays.\n\nRasterio 1.0.x works with Python versions 2.7.x and 3.5.0 through 3.7.x, and GDAL\nversions 1.11.x through 2.4.x. Official binary packages for Linux and Mac OS X are\navailable on PyPI. Unofficial binary packages for Windows are available through other\nchannels.\n\nRasterio 1.0.x is not compatible with GDAL versions 3.0.0 or greater.\n\nRead the documentation for more details: https://rasterio.readthedocs.io/.\n\nExample\n=======\n\nHere's an example of some basic features that Rasterio provides. Three bands\nare read from an image and averaged to produce something like a panchromatic\nband.  This new band is then written to a new single band TIFF.\n\n.. code-block:: python\n\n    import numpy as np\n    import rasterio\n\n    # Read raster bands directly to Numpy arrays.\n    #\n    with rasterio.open('tests/data/RGB.byte.tif') as src:\n        r, g, b = src.read()\n\n    # Combine arrays in place. Expecting that the sum will\n    # temporarily exceed the 8-bit integer range, initialize it as\n    # a 64-bit float (the numpy default) array. Adding other\n    # arrays to it in-place converts those arrays \"up\" and\n    # preserves the type of the total array.\n    total = np.zeros(r.shape)\n    for band in r, g, b:\n        total += band\n    total /= 3\n\n    # Write the product as a raster band to a new 8-bit file. For\n    # the new file's profile, we start with the meta attributes of\n    # the source file, but then change the band count to 1, set the\n    # dtype to uint8, and specify LZW compression.\n    profile = src.profile\n    profile.update(dtype=rasterio.uint8, count=1, compress='lzw')\n\n    with rasterio.open('example-total.tif', 'w', **profile) as dst:\n        dst.write(total.astype(rasterio.uint8), 1)\n\nThe output:\n\n.. image:: http://farm6.staticflickr.com/5501/11393054644_74f54484d9_z_d.jpg\n   :width: 640\n   :height: 581\n\nAPI Overview\n============\n\nRasterio gives access to properties of a geospatial raster file.\n\n.. code-block:: python\n\n    with rasterio.open('tests/data/RGB.byte.tif') as src:\n        print(src.width, src.height)\n        print(src.crs)\n        print(src.transform)\n        print(src.count)\n        print(src.indexes)\n\n    # Printed:\n    # (791, 718)\n    # {u'units': u'm', u'no_defs': True, u'ellps': u'WGS84', u'proj': u'utm', u'zone': 18}\n    # Affine(300.0379266750948, 0.0, 101985.0,\n    #        0.0, -300.041782729805, 2826915.0)\n    # 3\n    # [1, 2, 3]\n\nA rasterio dataset also provides methods for getting extended array slices given\ngeoreferenced coordinates.\n\n\n.. code-block:: python\n\n    with rasterio.open('tests/data/RGB.byte.tif') as src:\n        print src.window(**src.window_bounds(((100, 200), (100, 200))))\n\n    # Printed:\n    # ((100, 200), (100, 200))\n\nRasterio CLI\n============\n\nRasterio's command line interface, named \"rio\", is documented at `cli.rst\n<https://github.com/mapbox/rasterio/blob/master/docs/cli.rst>`__. Its ``rio\ninsp`` command opens the hood of any raster dataset so you can poke around\nusing Python.\n\n.. code-block:: pycon\n\n    $ rio insp tests/data/RGB.byte.tif\n    Rasterio 0.10 Interactive Inspector (Python 3.4.1)\n    Type \"src.meta\", \"src.read(1)\", or \"help(src)\" for more information.\n    >>> src.name\n    'tests/data/RGB.byte.tif'\n    >>> src.closed\n    False\n    >>> src.shape\n    (718, 791)\n    >>> src.crs\n    {'init': 'epsg:32618'}\n    >>> b, g, r = src.read()\n    >>> b\n    masked_array(data =\n     [[-- -- -- ..., -- -- --]\n     [-- -- -- ..., -- -- --]\n     [-- -- -- ..., -- -- --]\n     ...,\n     [-- -- -- ..., -- -- --]\n     [-- -- -- ..., -- -- --]\n     [-- -- -- ..., -- -- --]],\n                 mask =\n     [[ True  True  True ...,  True  True  True]\n     [ True  True  True ...,  True  True  True]\n     [ True  True  True ...,  True  True  True]\n     ...,\n     [ True  True  True ...,  True  True  True]\n     [ True  True  True ...,  True  True  True]\n     [ True  True  True ...,  True  True  True]],\n           fill_value = 0)\n\n    >>> np.nanmin(b), np.nanmax(b), np.nanmean(b)\n    (0, 255, 29.94772668847656)\n\nRio Plugins\n-----------\n\nRio provides the ability to create subcommands using plugins.  See\n`cli.rst <https://github.com/mapbox/rasterio/blob/master/docs/cli.rst#rio-plugins>`__\nfor more information on building plugins.\n\nSee the\n`plugin registry <https://github.com/mapbox/rasterio/wiki/Rio-plugin-registry>`__\nfor a list of available plugins.\n\n\nInstallation\n============\n\nPlease install Rasterio in a `virtual environment\n<https://www.python.org/dev/peps/pep-0405/>`__ so that its requirements don't\ntamper with your system's Python.\n\nSSL certs\n---------\n\nThe Linux wheels on PyPI are built on CentOS and libcurl expects certs to be in\n/etc/pki/tls/certs/ca-bundle.crt. Ubuntu's certs, for example, are in\na different location. You may need to use the CURL_CA_BUNDLE environment\nvariable to specify the location of SSL certs on your computer. On an Ubuntu\nsystem set the variable as shown below.\n\n.. code-block:: console\n\n    $ export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt\n\n\nDependencies\n------------\n\nRasterio has a C library dependency: GDAL >=1.11. GDAL itself depends on some other libraries provided by most major operating systems and also\ndepends on the non standard GEOS and PROJ4 libraries. How to meet these\nrequirement will be explained below.\n\nRasterio's Python dependencies are listed in its requirements.txt file.\n\nDevelopment also requires (see requirements-dev.txt) Cython and other packages.\n\nBinary Distributions\n--------------------\n\nUse a binary distributions that directly or indirectly provide GDAL if\npossible.\n\nLinux\n+++++\n\nRasterio distributions are available from UbuntuGIS and Anaconda's conda-forge\nchannel.\n\n`Manylinux1 <https://github.com/pypa/manylinux>`__ wheels are available on PyPI.\n\nOS X\n++++\n\nBinary distributions with GDAL, GEOS, and PROJ4 libraries included are available\nfor OS X versions 10.7+ starting with Rasterio version 0.17. To install,\nrun ``pip install rasterio``. These binary wheels are preferred by newer\nversions of pip.\n\nIf you don't want these wheels and want to install from a source distribution,\nrun ``pip install rasterio --no-binary rasterio`` instead.\n\nThe included GDAL library is fairly minimal, providing only the format drivers\nthat ship with GDAL and are enabled by default. To get access to more formats,\nyou must build from a source distribution (see below).\n\nWindows\n+++++++\n\nBinary wheels for rasterio and GDAL are created by Christoph Gohlke and are\navailable from his website.\n\nTo install rasterio, simply download both binaries for your system (`rasterio\n<http://www.lfd.uci.edu/~gohlke/pythonlibs/#rasterio>`__ and `GDAL\n<http://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal>`__) and run something like\nthis from the downloads folder:\n\n.. code-block:: console\n\n    $ pip install -U pip\n    $ pip install GDAL-2.0.2-cp27-none-win32.whl\n    $ pip install rasterio-0.34.0-cp27-cp27m-win32.whl\n\nYou can also install rasterio with conda using Anaconda's conda-forge channel.\n\n.. code-block:: console\n\n    $ conda install -c conda-forge rasterio \n\n\nSource Distributions\n--------------------\n\nRasterio is a Python C extension and to build you'll need a working compiler\n(XCode on OS X etc). You'll also need Numpy preinstalled; the Numpy headers are\nrequired to run the rasterio setup script. Numpy has to be installed (via the\nindicated requirements file) before rasterio can be installed. See rasterio's\nTravis `configuration\n<https://github.com/mapbox/rasterio/blob/master/.travis.yml>`__ for more\nguidance.\n\nLinux\n+++++\n\nThe following commands are adapted from Rasterio's Travis-CI configuration.\n\n.. code-block:: console\n\n    $ sudo add-apt-repository ppa:ubuntugis/ppa\n    $ sudo apt-get update\n    $ sudo apt-get install gdal-bin libgdal-dev\n    $ pip install -U pip\n    $ pip install rasterio\n\nAdapt them as necessary for your Linux system.\n\nOS X\n++++\n\nFor a Homebrew based Python environment, do the following.\n\n.. code-block:: console\n\n    $ brew update\n    $ brew install gdal\n    $ pip install -U pip\n    $ pip install --no-use-wheel rasterio\n\nAlternatively, you can install GDAL binaries from `kyngchaos\n<http://www.kyngchaos.com/software/frameworks#gdal_complete>`__.  You will then\nneed to add the installed location ``/Library/Frameworks/GDAL.framework/Programs``\nto your system path.\n\nWindows\n+++++++\n\nYou can download a binary distribution of GDAL from `here\n<http://www.gisinternals.com/release.php>`__.  You will also need to download\nthe compiled libraries and headers (include files).\n\nWhen building from source on Windows, it is important to know that setup.py\ncannot rely on gdal-config, which is only present on UNIX systems, to discover\nthe locations of header files and libraries that rasterio needs to compile its\nC extensions. On Windows, these paths need to be provided by the user. You\nwill need to find the include files and the library files for gdal and use\nsetup.py as follows.\n\n.. code-block:: console\n\n    $ python setup.py build_ext -I<path to gdal include files> -lgdal_i -L<path to gdal library>\n    $ python setup.py install\n\nWe have had success compiling code using the same version of Microsoft's\nVisual Studio used to compile the targeted version of Python (more info on\nversions used `here\n<https://docs.python.org/devguide/setup.html#windows>`__.).\n\nNote: The GDAL dll (gdal111.dll) and gdal-data directory need to be in your\nWindows PATH otherwise rasterio will fail to work.\n\n\nSupport\n=======\n\nThe primary forum for questions about installation and usage of Rasterio is\nhttps://rasterio.groups.io/g/main. The authors and other users will answer\nquestions when they have expertise to share and time to explain. Please take\nthe time to craft a clear question and be patient about responses.\n\nPlease do not bring these questions to Rasterio's issue tracker, which we want\nto reserve for bug reports and other actionable issues.\n\nWhile Rasterio's repo is in the Mapbox GitHub organization, Mapbox's Support\nteam is focused on customer support for its commercial platform and Rasterio\nsupport requests may be perfunctorily closed with or without a link to\nhttps://rasterio.groups.io/g/main. It's better to bring questions directly to\nthe main Rasterio group at groups.io.\n\nDevelopment and Testing\n=======================\n\nSee `CONTRIBUTING.rst <CONTRIBUTING.rst/>`__.\n\nDocumentation\n=============\n\nSee `docs/ <docs/>`__.\n\nLicense\n=======\n\nSee `LICENSE.txt <LICENSE.txt>`__.\n\nAuthors\n=======\n\nSee `AUTHORS.txt <AUTHORS.txt>`__.\n\nChanges\n=======\n\nSee `CHANGES.txt <CHANGES.txt>`__.\n\nWho is Using Rasterio?\n======================\n\nSee `here <https://libraries.io/pypi/rasterio/usage>`__.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mapbox/rasterio", "keywords": "raster gdal", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "geoai-rasterio", "package_url": "https://pypi.org/project/geoai-rasterio/", "platform": "", "project_url": "https://pypi.org/project/geoai-rasterio/", "project_urls": {"Homepage": "https://github.com/mapbox/rasterio"}, "release_url": "https://pypi.org/project/geoai-rasterio/1.0.27/", "requires_dist": ["affine", "attrs", "click (<8,>=4.0)", "cligj (>=0.5)", "numpy", "snuggs (>=1.4.1)", "click-plugins", "matplotlib; extra == 'all'", "ghp-import; extra == 'all'", "hypothesis; extra == 'all'", "numpydoc; extra == 'all'", "sphinx-rtd-theme; extra == 'all'", "pytest-cov (>=2.2.0); extra == 'all'", "boto3 (>=1.2.4); extra == 'all'", "sphinx; extra == 'all'", "ipython (>=2.0); extra == 'all'", "pytest (>=2.8.2); extra == 'all'", "packaging; extra == 'all'", "ghp-import; extra == 'docs'", "numpydoc; extra == 'docs'", "sphinx; extra == 'docs'", "sphinx-rtd-theme; extra == 'docs'", "ipython (>=2.0); extra == 'ipython'", "matplotlib; extra == 'plot'", "boto3 (>=1.2.4); extra == 's3'", "pytest (>=2.8.2); extra == 'test'", "pytest-cov (>=2.2.0); extra == 'test'", "boto3 (>=1.2.4); extra == 'test'", "packaging; extra == 'test'", "hypothesis; extra == 'test'"], "requires_python": "", "summary": "Fast and direct raster I/O for use with Numpy and SciPy", "version": "1.0.27", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Rasterio reads and writes geospatial raster data.</p>\n<a href=\"https://travis-ci.org/mapbox/rasterio\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mapbox/rasterio.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c23aeb184ebe3658022ee6805b1082295f66add9/68747470733a2f2f7472617669732d63692e6f72672f6d6170626f782f726173746572696f2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/mapbox/rasterio?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/mapbox/rasterio/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fee0c5140c7bcc29b9a28b47e423b4a09fb417e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6170626f782f726173746572696f2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Geographic information systems use GeoTIFF and other formats to organize and\nstore gridded, or raster, datasets. Rasterio reads and writes these formats and\nprovides a Python API based on N-D arrays.</p>\n<p>Rasterio 1.0.x works with Python versions 2.7.x and 3.5.0 through 3.7.x, and GDAL\nversions 1.11.x through 2.4.x. Official binary packages for Linux and Mac OS X are\navailable on PyPI. Unofficial binary packages for Windows are available through other\nchannels.</p>\n<p>Rasterio 1.0.x is not compatible with GDAL versions 3.0.0 or greater.</p>\n<p>Read the documentation for more details: <a href=\"https://rasterio.readthedocs.io/\" rel=\"nofollow\">https://rasterio.readthedocs.io/</a>.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Here\u2019s an example of some basic features that Rasterio provides. Three bands\nare read from an image and averaged to produce something like a panchromatic\nband.  This new band is then written to a new single band TIFF.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">rasterio</span>\n\n<span class=\"c1\"># Read raster bands directly to Numpy arrays.</span>\n<span class=\"c1\">#</span>\n<span class=\"k\">with</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'tests/data/RGB.byte.tif'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n    <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Combine arrays in place. Expecting that the sum will</span>\n<span class=\"c1\"># temporarily exceed the 8-bit integer range, initialize it as</span>\n<span class=\"c1\"># a 64-bit float (the numpy default) array. Adding other</span>\n<span class=\"c1\"># arrays to it in-place converts those arrays \"up\" and</span>\n<span class=\"c1\"># preserves the type of the total array.</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">band</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n    <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">band</span>\n<span class=\"n\">total</span> <span class=\"o\">/=</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\"># Write the product as a raster band to a new 8-bit file. For</span>\n<span class=\"c1\"># the new file's profile, we start with the meta attributes of</span>\n<span class=\"c1\"># the source file, but then change the band count to 1, set the</span>\n<span class=\"c1\"># dtype to uint8, and specify LZW compression.</span>\n<span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">profile</span>\n<span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"s1\">'lzw'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'example-total.tif'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">profile</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">dst</span><span class=\"p\">:</span>\n    <span class=\"n\">dst</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>The output:</p>\n<img alt=\"http://farm6.staticflickr.com/5501/11393054644_74f54484d9_z_d.jpg\" height=\"581\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad842d67c022c5ecc9fec67b73014431aa4a2cb4/687474703a2f2f6661726d362e737461746963666c69636b722e636f6d2f353530312f31313339333035343634345f373466353434383464395f7a5f642e6a7067\" width=\"640\">\n</div>\n<div id=\"api-overview\">\n<h2>API Overview</h2>\n<p>Rasterio gives access to properties of a geospatial raster file.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'tests/data/RGB.byte.tif'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">crs</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">indexes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Printed:</span>\n<span class=\"c1\"># (791, 718)</span>\n<span class=\"c1\"># {u'units': u'm', u'no_defs': True, u'ellps': u'WGS84', u'proj': u'utm', u'zone': 18}</span>\n<span class=\"c1\"># Affine(300.0379266750948, 0.0, 101985.0,</span>\n<span class=\"c1\">#        0.0, -300.041782729805, 2826915.0)</span>\n<span class=\"c1\"># 3</span>\n<span class=\"c1\"># [1, 2, 3]</span>\n</pre>\n<p>A rasterio dataset also provides methods for getting extended array slices given\ngeoreferenced coordinates.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">rasterio</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'tests/data/RGB.byte.tif'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">window</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">window_bounds</span><span class=\"p\">(((</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Printed:</span>\n<span class=\"c1\"># ((100, 200), (100, 200))</span>\n</pre>\n</div>\n<div id=\"rasterio-cli\">\n<h2>Rasterio CLI</h2>\n<p>Rasterio\u2019s command line interface, named \u201crio\u201d, is documented at <a href=\"https://github.com/mapbox/rasterio/blob/master/docs/cli.rst\" rel=\"nofollow\">cli.rst</a>. Its <tt>rio\ninsp</tt> command opens the hood of any raster dataset so you can poke around\nusing Python.</p>\n<pre><span class=\"go\">$ rio insp tests/data/RGB.byte.tif\nRasterio 0.10 Interactive Inspector (Python 3.4.1)\nType \"src.meta\", \"src.read(1)\", or \"help(src)\" for more information.\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">'tests/data/RGB.byte.tif'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">closed</span>\n<span class=\"go\">False\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">(718, 791)\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">crs</span>\n<span class=\"go\">{'init': 'epsg:32618'}\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">masked_array(data =\n [[-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n ...,\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]\n [-- -- -- ..., -- -- --]],\n             mask =\n [[ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n ...,\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]\n [ True  True  True ...,  True  True  True]],\n       fill_value = 0)\n\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmin</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmax</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nanmean</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">(0, 255, 29.94772668847656)</span>\n</pre>\n<div id=\"rio-plugins\">\n<h3>Rio Plugins</h3>\n<p>Rio provides the ability to create subcommands using plugins.  See\n<a href=\"https://github.com/mapbox/rasterio/blob/master/docs/cli.rst#rio-plugins\" rel=\"nofollow\">cli.rst</a>\nfor more information on building plugins.</p>\n<p>See the\n<a href=\"https://github.com/mapbox/rasterio/wiki/Rio-plugin-registry\" rel=\"nofollow\">plugin registry</a>\nfor a list of available plugins.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Please install Rasterio in a <a href=\"https://www.python.org/dev/peps/pep-0405/\" rel=\"nofollow\">virtual environment</a> so that its requirements don\u2019t\ntamper with your system\u2019s Python.</p>\n<div id=\"ssl-certs\">\n<h3>SSL certs</h3>\n<p>The Linux wheels on PyPI are built on CentOS and libcurl expects certs to be in\n/etc/pki/tls/certs/ca-bundle.crt. Ubuntu\u2019s certs, for example, are in\na different location. You may need to use the CURL_CA_BUNDLE environment\nvariable to specify the location of SSL certs on your computer. On an Ubuntu\nsystem set the variable as shown below.</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">export</span> <span class=\"nv\">CURL_CA_BUNDLE</span><span class=\"o\">=</span>/etc/ssl/certs/ca-certificates.crt\n</pre>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p>Rasterio has a C library dependency: GDAL &gt;=1.11. GDAL itself depends on some other libraries provided by most major operating systems and also\ndepends on the non standard GEOS and PROJ4 libraries. How to meet these\nrequirement will be explained below.</p>\n<p>Rasterio\u2019s Python dependencies are listed in its requirements.txt file.</p>\n<p>Development also requires (see requirements-dev.txt) Cython and other packages.</p>\n</div>\n<div id=\"binary-distributions\">\n<h3>Binary Distributions</h3>\n<p>Use a binary distributions that directly or indirectly provide GDAL if\npossible.</p>\n<div id=\"linux\">\n<h4>Linux</h4>\n<p>Rasterio distributions are available from UbuntuGIS and Anaconda\u2019s conda-forge\nchannel.</p>\n<p><a href=\"https://github.com/pypa/manylinux\" rel=\"nofollow\">Manylinux1</a> wheels are available on PyPI.</p>\n</div>\n<div id=\"os-x\">\n<h4>OS X</h4>\n<p>Binary distributions with GDAL, GEOS, and PROJ4 libraries included are available\nfor OS X versions 10.7+ starting with Rasterio version 0.17. To install,\nrun <tt>pip install rasterio</tt>. These binary wheels are preferred by newer\nversions of pip.</p>\n<p>If you don\u2019t want these wheels and want to install from a source distribution,\nrun <tt>pip install rasterio <span class=\"pre\">--no-binary</span> rasterio</tt> instead.</p>\n<p>The included GDAL library is fairly minimal, providing only the format drivers\nthat ship with GDAL and are enabled by default. To get access to more formats,\nyou must build from a source distribution (see below).</p>\n</div>\n<div id=\"windows\">\n<h4>Windows</h4>\n<p>Binary wheels for rasterio and GDAL are created by Christoph Gohlke and are\navailable from his website.</p>\n<p>To install rasterio, simply download both binaries for your system (<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#rasterio\" rel=\"nofollow\">rasterio</a> and <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#gdal\" rel=\"nofollow\">GDAL</a>) and run something like\nthis from the downloads folder:</p>\n<pre><span class=\"gp\">$</span> pip install -U pip\n<span class=\"gp\">$</span> pip install GDAL-2.0.2-cp27-none-win32.whl\n<span class=\"gp\">$</span> pip install rasterio-0.34.0-cp27-cp27m-win32.whl\n</pre>\n<p>You can also install rasterio with conda using Anaconda\u2019s conda-forge channel.</p>\n<pre><span class=\"gp\">$</span> conda install -c conda-forge rasterio\n</pre>\n</div>\n</div>\n<div id=\"source-distributions\">\n<h3>Source Distributions</h3>\n<p>Rasterio is a Python C extension and to build you\u2019ll need a working compiler\n(XCode on OS X etc). You\u2019ll also need Numpy preinstalled; the Numpy headers are\nrequired to run the rasterio setup script. Numpy has to be installed (via the\nindicated requirements file) before rasterio can be installed. See rasterio\u2019s\nTravis <a href=\"https://github.com/mapbox/rasterio/blob/master/.travis.yml\" rel=\"nofollow\">configuration</a> for more\nguidance.</p>\n<div id=\"id1\">\n<h4>Linux</h4>\n<p>The following commands are adapted from Rasterio\u2019s Travis-CI configuration.</p>\n<pre><span class=\"gp\">$</span> sudo add-apt-repository ppa:ubuntugis/ppa\n<span class=\"gp\">$</span> sudo apt-get update\n<span class=\"gp\">$</span> sudo apt-get install gdal-bin libgdal-dev\n<span class=\"gp\">$</span> pip install -U pip\n<span class=\"gp\">$</span> pip install rasterio\n</pre>\n<p>Adapt them as necessary for your Linux system.</p>\n</div>\n<div id=\"id2\">\n<h4>OS X</h4>\n<p>For a Homebrew based Python environment, do the following.</p>\n<pre><span class=\"gp\">$</span> brew update\n<span class=\"gp\">$</span> brew install gdal\n<span class=\"gp\">$</span> pip install -U pip\n<span class=\"gp\">$</span> pip install --no-use-wheel rasterio\n</pre>\n<p>Alternatively, you can install GDAL binaries from <a href=\"http://www.kyngchaos.com/software/frameworks#gdal_complete\" rel=\"nofollow\">kyngchaos</a>.  You will then\nneed to add the installed location <tt>/Library/Frameworks/GDAL.framework/Programs</tt>\nto your system path.</p>\n</div>\n<div id=\"id3\">\n<h4>Windows</h4>\n<p>You can download a binary distribution of GDAL from <a href=\"http://www.gisinternals.com/release.php\" rel=\"nofollow\">here</a>.  You will also need to download\nthe compiled libraries and headers (include files).</p>\n<p>When building from source on Windows, it is important to know that setup.py\ncannot rely on gdal-config, which is only present on UNIX systems, to discover\nthe locations of header files and libraries that rasterio needs to compile its\nC extensions. On Windows, these paths need to be provided by the user. You\nwill need to find the include files and the library files for gdal and use\nsetup.py as follows.</p>\n<pre><span class=\"gp\">$</span> python setup.py build_ext -I&lt;path to gdal include files&gt; -lgdal_i -L&lt;path to gdal library&gt;\n<span class=\"gp\">$</span> python setup.py install\n</pre>\n<p>We have had success compiling code using the same version of Microsoft\u2019s\nVisual Studio used to compile the targeted version of Python (more info on\nversions used <a href=\"https://docs.python.org/devguide/setup.html#windows\" rel=\"nofollow\">here</a>.).</p>\n<p>Note: The GDAL dll (gdal111.dll) and gdal-data directory need to be in your\nWindows PATH otherwise rasterio will fail to work.</p>\n</div>\n</div>\n</div>\n<div id=\"support\">\n<h2>Support</h2>\n<p>The primary forum for questions about installation and usage of Rasterio is\n<a href=\"https://rasterio.groups.io/g/main\" rel=\"nofollow\">https://rasterio.groups.io/g/main</a>. The authors and other users will answer\nquestions when they have expertise to share and time to explain. Please take\nthe time to craft a clear question and be patient about responses.</p>\n<p>Please do not bring these questions to Rasterio\u2019s issue tracker, which we want\nto reserve for bug reports and other actionable issues.</p>\n<p>While Rasterio\u2019s repo is in the Mapbox GitHub organization, Mapbox\u2019s Support\nteam is focused on customer support for its commercial platform and Rasterio\nsupport requests may be perfunctorily closed with or without a link to\n<a href=\"https://rasterio.groups.io/g/main\" rel=\"nofollow\">https://rasterio.groups.io/g/main</a>. It\u2019s better to bring questions directly to\nthe main Rasterio group at groups.io.</p>\n</div>\n<div id=\"development-and-testing\">\n<h2>Development and Testing</h2>\n<p>See <a href=\"CONTRIBUTING.rst/\" rel=\"nofollow\">CONTRIBUTING.rst</a>.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>See <a href=\"docs/\" rel=\"nofollow\">docs/</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>See <a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>See <a href=\"AUTHORS.txt\" rel=\"nofollow\">AUTHORS.txt</a>.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<p>See <a href=\"CHANGES.txt\" rel=\"nofollow\">CHANGES.txt</a>.</p>\n</div>\n<div id=\"who-is-using-rasterio\">\n<h2>Who is Using Rasterio?</h2>\n<p>See <a href=\"https://libraries.io/pypi/rasterio/usage\" rel=\"nofollow\">here</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5807323, "releases": {"1.0.18": [{"comment_text": "", "digests": {"md5": "281e8ee00c314215a1ca43afae328d92", "sha256": "9fd69f4315be623dc2e63dda7e7367f05b992a9fe91d6b3b3d0d5016006cd662"}, "downloads": -1, "filename": "geoai_rasterio-1.0.18-cp35-cp35m-win_amd64.whl", "has_sig": false, "md5_digest": "281e8ee00c314215a1ca43afae328d92", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 975771, "upload_time": "2019-03-02T07:43:24", "upload_time_iso_8601": "2019-03-02T07:43:24.265965Z", "url": "https://files.pythonhosted.org/packages/db/49/132a2415e35928fd68d9e7cd397362d315f5f0496a2ee450a6217dfcb325/geoai_rasterio-1.0.18-cp35-cp35m-win_amd64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fae3b1a2aec9365e63b57b3e7e48cffb", "sha256": "07066444237398b87029a0355b87a2cefedb810cffb52325e5a4eac03fdf9443"}, "downloads": -1, "filename": "geoai_rasterio-1.0.18-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "fae3b1a2aec9365e63b57b3e7e48cffb", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1012980, "upload_time": "2019-03-02T07:43:32", "upload_time_iso_8601": "2019-03-02T07:43:32.647711Z", "url": "https://files.pythonhosted.org/packages/11/da/7ab4b743b91186c80f0db84800563fd715c383c5792b796fa422c372710c/geoai_rasterio-1.0.18-cp36-cp36m-win_amd64.whl", "yanked": false}], "1.0.21": [{"comment_text": "", "digests": {"md5": "68a05cc9c989223fa09e7fe275951760", "sha256": "7a4e9b6120c459d8dcf16ebe60c47a54089e930af267c0b9172ed1ec631dc16d"}, "downloads": -1, "filename": "geoai_rasterio-1.0.21-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "68a05cc9c989223fa09e7fe275951760", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 19649258, "upload_time": "2019-03-03T12:15:16", "upload_time_iso_8601": "2019-03-03T12:15:16.964890Z", "url": "https://files.pythonhosted.org/packages/9e/2f/1a7146a6319befb50ecd0889ea576e6fdc0774997b89bf5e0376814efde6/geoai_rasterio-1.0.21-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c11be23d7e36b8897a9ec8f869f8befa", "sha256": "bab977b633fe6e60aeaf871bf24f55ff5020f33f1e675855db879336b2bd74cd"}, "downloads": -1, "filename": "geoai_rasterio-1.0.21-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c11be23d7e36b8897a9ec8f869f8befa", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 19694545, "upload_time": "2019-03-03T12:15:27", "upload_time_iso_8601": "2019-03-03T12:15:27.889240Z", "url": "https://files.pythonhosted.org/packages/21/bc/c4ef7d76e15bb40347e9da2822c103ef9788318afa74c353e7ac2e4c10b6/geoai_rasterio-1.0.21-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}], "1.0.23": [{"comment_text": "", "digests": {"md5": "7a5df75621dd6e2c68849ebb037f2999", "sha256": "35cd683e66ecafd8855449489373a5bb9d34ef7b75254d0dae6df628b4b29720"}, "downloads": -1, "filename": "geoai_rasterio-1.0.23-cp36-cp36m-win_amd64.whl", "has_sig": false, "md5_digest": "7a5df75621dd6e2c68849ebb037f2999", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1023160, "upload_time": "2019-06-06T09:56:45", "upload_time_iso_8601": "2019-06-06T09:56:45.448663Z", "url": "https://files.pythonhosted.org/packages/c8/ab/425226eb54eb5bc3c25115a395794fcfd5f901a8839d60c6aac115765e25/geoai_rasterio-1.0.23-cp36-cp36m-win_amd64.whl", "yanked": false}], "1.0.27": [{"comment_text": "", "digests": {"md5": "a858d5b643d8e10e76a8fa9d473503f9", "sha256": "110b5a7dd99fed426b55f7f2a5ba81dd309bf4515a4a830796a04d6b69219683"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a858d5b643d8e10e76a8fa9d473503f9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 48660141, "upload_time": "2019-09-10T06:37:49", "upload_time_iso_8601": "2019-09-10T06:37:49.097001Z", "url": "https://files.pythonhosted.org/packages/e1/07/361f9e4f09c638ce9fc03e950e97003337c41980172b8a52062c149dbbd8/geoai_rasterio-1.0.27-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ea6f5f2d8c6fe8ffd472da58be5be03", "sha256": "6feda93e4eb2902bc247c5e6b52f71f6812d55dcee21626656419c95f52ea499"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3ea6f5f2d8c6fe8ffd472da58be5be03", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 48843204, "upload_time": "2019-09-10T06:40:10", "upload_time_iso_8601": "2019-09-10T06:40:10.166848Z", "url": "https://files.pythonhosted.org/packages/2d/0d/23099d333fa1426538f44c1c40227c6d8bdccf7d00de95c41d13ab79e524/geoai_rasterio-1.0.27-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66255729c59f87dfb95ffc5d6c4425d2", "sha256": "bc40f0a6f613b7097ab0300a01c7d4956cda998d435db3fec114580518fb478b"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "66255729c59f87dfb95ffc5d6c4425d2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 48777089, "upload_time": "2019-09-10T07:06:02", "upload_time_iso_8601": "2019-09-10T07:06:02.443771Z", "url": "https://files.pythonhosted.org/packages/85/00/5d883617a65b76b20361fda1ab20160f217eb4565e8b22c4e957cefee8bc/geoai_rasterio-1.0.27-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a858d5b643d8e10e76a8fa9d473503f9", "sha256": "110b5a7dd99fed426b55f7f2a5ba81dd309bf4515a4a830796a04d6b69219683"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "a858d5b643d8e10e76a8fa9d473503f9", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 48660141, "upload_time": "2019-09-10T06:37:49", "upload_time_iso_8601": "2019-09-10T06:37:49.097001Z", "url": "https://files.pythonhosted.org/packages/e1/07/361f9e4f09c638ce9fc03e950e97003337c41980172b8a52062c149dbbd8/geoai_rasterio-1.0.27-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ea6f5f2d8c6fe8ffd472da58be5be03", "sha256": "6feda93e4eb2902bc247c5e6b52f71f6812d55dcee21626656419c95f52ea499"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3ea6f5f2d8c6fe8ffd472da58be5be03", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 48843204, "upload_time": "2019-09-10T06:40:10", "upload_time_iso_8601": "2019-09-10T06:40:10.166848Z", "url": "https://files.pythonhosted.org/packages/2d/0d/23099d333fa1426538f44c1c40227c6d8bdccf7d00de95c41d13ab79e524/geoai_rasterio-1.0.27-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66255729c59f87dfb95ffc5d6c4425d2", "sha256": "bc40f0a6f613b7097ab0300a01c7d4956cda998d435db3fec114580518fb478b"}, "downloads": -1, "filename": "geoai_rasterio-1.0.27-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "66255729c59f87dfb95ffc5d6c4425d2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 48777089, "upload_time": "2019-09-10T07:06:02", "upload_time_iso_8601": "2019-09-10T07:06:02.443771Z", "url": "https://files.pythonhosted.org/packages/85/00/5d883617a65b76b20361fda1ab20160f217eb4565e8b22c4e957cefee8bc/geoai_rasterio-1.0.27-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 00:58:11 2020"}