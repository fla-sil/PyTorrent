{"info": {"author": "Brendan Doherty", "author_email": "2bndy5@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: System :: Hardware"], "description": ".. image:: https://readthedocs.org/projects/circuitpython-cirque-pinnacle/badge/?version=latest\n    :target: https://circuitpython-cirque-pinnacle.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/workflows/Build%20CI/badge.svg\n    :target: https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/actions/\n    :alt: Build Status\n\n.. image:: https://img.shields.io/pypi/v/circuitpython-cirque-pinnacle.svg\n    :alt: latest version on PyPI\n    :target: https://pypi.python.org/pypi/circuitpython-cirque-pinnacle\n\n.. image:: https://pepy.tech/badge/circuitpython-cirque-pinnacle\n    :alt: Total PyPI downloads\n    :target: https://pepy.tech/project/circuitpython-cirque-pinnacle\n\n\nIntroduction\n============\n\nA CircuitPython driver library that implements the Adafruit_BusDevice library\nfor interfacing with the Cirque Pinnacle (1CA027) touch controller used in Cirque Circle Trackpads.\n\nSupported Features\n------------------\n\n* Use SPI or I2C bus protocols to interface with the Pinnacle touch controller ASIC (Application\n  Specific Integrated Circuit).\n* Relative mode data reporting (AKA Mouse mode) with optional tap detection.\n* Absolute mode data reporting (x, y, & z axis positions).\n* AnyMeas mode data reporting. This mode exposes the ADC (Analog to Digital Converter) values and is\n  not well documented in the numerous datasheets provided by the Cirque corporation about the\n  Pinnacle (1CA027), thus this is a rather experimental mode.\n* Hardware input buttons' states included in data reports. There are 3 button input lines on\n  the Cirque circle trackpads -- see `Pinout`_ section.\n* Ability to identify finger & stylus or only stylus or only finger touch events. The Cirque circle\n  trackpads are natively capable of measuring only 1 touch point per event.\n* Download/upload the underlying compensation matrix for ADC measurements.\n* Adjust the ADC matrix gain (sensitivity).\n\n.. tip:: The SPI protocol is the preferred method for interfacing with more than 1 Cirque circle\n    trackpad from the same MCU (microcontroller). The Cirque Pinnacle does not allow\n    changing the I2C slave device address (via software); this means only 1 Cirque circle trackpad\n    can be accessed over the I2C bus at a time.\n\nUnsupported Features\n--------------------\n\n* The legacy PS\\\\2 interface is pretty limited and not accessible by some CircuitPython MCUs.\n  Therefore, it has been neglected in this library.\n* Cirque's circle trackpads ship with the newer non-AG (Advanced Gestures) variant of the\n  Pinnacle touch controller ASIC. Thus, this library focuses on the the non-AG variant's\n  functionality via testing, and it does not provide access to the older AG variant's features\n  (register addresses slightly differ which breaks compatibility).\n\nPinout\n======\n\n.. image:: https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/raw/master/docs/_static/Cirque_GlidePoint-Circle-Trackpad.png\n    :target: https://www.mouser.com/new/cirque/glidepoint-circle-trackpads/\n\nThe above picture is a example of the Cirque GlidePoint circle trackpad. This picture\nis chosen as the test pads (larger copper circular pads) are clearly labeled. The test pads\nare extended to the `12-pin FFC/FPC cable <https://www.mouser.com/Connectors/FFC-FPC/\nFFC-FPC-Jumper-Cables/_/N-axro3?P=1yc8ojpZ1z0wxjx>`_ connector (the white block near the\nbottom). The following table shows how the pins are connected in the `examples <examples.html>`_ (tested on an `ItsyBitys M4 <https://www.adafruit.com/product/3800>`_)\n\n.. csv-table:: pinout (ordered the same as the FFC/FPC cable connector)\n    :header: Label,\"MCU pin\",Description\n    :widths: 5,5,13\n\n    SCK,SCK,\"SPI clock line\"\n    SO,MISO,\"Master Input Slave Output\"\n    SS,D7,\"Slave Select (AKA Chip Select)\"\n    DR,D2,\"\"\"data ready\"\" interrupt\"\n    SI,MOSI,\"SPI Master Output Slave Input\"\n    B2,N/A,\"Hardware input button #2\"\n    B3,N/A,\"Hardware input button #3\"\n    B1,N/A,\"Hardware input button #1\"\n    SCL,SCL,\"I2C clock line\"\n    SDA,SDA,\"I2C data line\"\n    GND,GND,\"Ground\"\n    VDD,3V,\"3V power supply\"\n\n.. tip:: Of course, you can capture button data manually (if your application utilizes more\n    than 3 buttons), but if you connect the pins B1, B2, B3 to momentary push buttons that\n    (when pressed) provide a path to ground, the Pinnacle touch controller will report all 3\n    buttons' states for each touch (or even button only) events.\n\nModel Labeling Scheme\n---------------------\n\n  TM\\ [yyyxxx]_\\ -202\\ [i]_\\ -\\ [cc]_\\ [o]_\n\n  .. [yyyxxx] stands for the vertical & horizontal width of the trackpad, respectively.\n  .. [i] stands for the hardwired interface protocol (3 = I2C, 4 = SPI). Notice, if there is a\n    resistor populated at the R1 (470K ohm) junction (located just above the Pinnacle ASIC), it\n    is configured for SPI, otherwise it is configured for I2C.\n  .. [cc] stands for Custom Configuration (if a 470K ohm resistor is populated at junction R4).\n    \"30\" (with a resistor at R4) means that the hardware is configured to disable\n    certain features despite what this library does. \"00\" (no resistor at R4) means that the\n    hardware is configured to allow certain features to manipulated by this library. These\n    features include \"secondary tap\" (thought of as \"right mouse button\" in relative data mode),\n    Intellimouse scrolling (Microsoft patented scroll wheel behavior -- a throw back to when\n    scroll wheels were first introduced), and 180 degree orientation (your application can invert\n    the axis data anyway).\n  .. [o] stands for the overlay type (0 = none, 1 = adhesive, 2 = flat, 3 = curved)\n\nDependencies\n=============\nThis driver depends on:\n\n* `Adafruit CircuitPython <https://github.com/adafruit/circuitpython>`_\n* `Bus Device <https://github.com/adafruit/Adafruit_CircuitPython_BusDevice>`_\n\nPlease ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading `the Adafruit library and driver bundle\n<https://github.com/adafruit/Adafruit_CircuitPython_Bundle>`_.\n\nHow to Install\n=====================\nThis library is deployed to pypi.org, so you can easily install this library\nusing ``pip3 install circuitpython-cirque-pinnacle`` or use the following\ncommands:\n\n.. code-block:: shell\n\n    git clone https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle.git\n    cd CircuitPython_Cirque_Pinnacle\n    python3 setup.py install\n\nTo install globally, prefix the last command with ``sudo``.\n\nUsage Example\n=============\n\nEnsure you've connected the TMyyyxxx correctly by running the `examples/` located in the `examples\nfolder of this library <https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/tree/master/examples>`_.\n\nContributing\n============\n\nContributions are welcome! Please read our `Code of Conduct\n<https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/blob/master/CODE_OF_CONDUCT.md>`_\nbefore contributing to help this project stay welcoming.\n\nSphinx documentation\n-----------------------\n\nSphinx is used to build the documentation based on rST files and comments in the code. First,\ninstall dependencies (feel free to reuse the virtual environment from above):\n\n.. code-block:: shell\n\n    python3 -m venv .env\n    source .env/bin/activate\n    pip install Sphinx sphinx-rtd-theme\n\nNow, once you have the virtual environment activated:\n\n.. code-block:: shell\n\n    cd docs\n    sphinx-build -E -W -b html . _build/html\n\nThis will output the documentation to ``docs/_build/html``. Open the index.html in your browser to\nview them. It will also (due to -W) error out on any warning like Travis will. This is a good way to\nlocally verify it will pass.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle", "keywords": "adafruit blinka circuitpython Pinnacle touch sensor driver Cirque trackpad", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "circuitpython-cirque-pinnacle", "package_url": "https://pypi.org/project/circuitpython-cirque-pinnacle/", "platform": "", "project_url": "https://pypi.org/project/circuitpython-cirque-pinnacle/", "project_urls": {"Homepage": "https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle"}, "release_url": "https://pypi.org/project/circuitpython-cirque-pinnacle/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A CircuitPython driver for Cirque Pinnacle (1CA027) touch controller used in Cirque Trackpads implementing the Adafruit_BusDevice library.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circuitpython-cirque-pinnacle.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b237e95c3517a3eaad12e66459bd3275712a2889/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f63697263756974707974686f6e2d6369727175652d70696e6e61636c652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/actions/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2993b82b711b3395fd48e77ceab664347f4c740/68747470733a2f2f6769746875622e636f6d2f32626e6479352f43697263756974507974686f6e5f4369727175655f50696e6e61636c652f776f726b666c6f77732f4275696c6425323043492f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/circuitpython-cirque-pinnacle\" rel=\"nofollow\"><img alt=\"latest version on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b4c063aae47870755fbdceb6feafc5aeabeefd78/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63697263756974707974686f6e2d6369727175652d70696e6e61636c652e737667\"></a>\n<a href=\"https://pepy.tech/project/circuitpython-cirque-pinnacle\" rel=\"nofollow\"><img alt=\"Total PyPI downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0c4258b63d133d259c9b200cc1cf2d68f390c0b/68747470733a2f2f706570792e746563682f62616467652f63697263756974707974686f6e2d6369727175652d70696e6e61636c65\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>A CircuitPython driver library that implements the Adafruit_BusDevice library\nfor interfacing with the Cirque Pinnacle (1CA027) touch controller used in Cirque Circle Trackpads.</p>\n<div id=\"supported-features\">\n<h3>Supported Features</h3>\n<ul>\n<li>Use SPI or I2C bus protocols to interface with the Pinnacle touch controller ASIC (Application\nSpecific Integrated Circuit).</li>\n<li>Relative mode data reporting (AKA Mouse mode) with optional tap detection.</li>\n<li>Absolute mode data reporting (x, y, &amp; z axis positions).</li>\n<li>AnyMeas mode data reporting. This mode exposes the ADC (Analog to Digital Converter) values and is\nnot well documented in the numerous datasheets provided by the Cirque corporation about the\nPinnacle (1CA027), thus this is a rather experimental mode.</li>\n<li>Hardware input buttons\u2019 states included in data reports. There are 3 button input lines on\nthe Cirque circle trackpads \u2013 see <a href=\"#pinout\" rel=\"nofollow\">Pinout</a> section.</li>\n<li>Ability to identify finger &amp; stylus or only stylus or only finger touch events. The Cirque circle\ntrackpads are natively capable of measuring only 1 touch point per event.</li>\n<li>Download/upload the underlying compensation matrix for ADC measurements.</li>\n<li>Adjust the ADC matrix gain (sensitivity).</li>\n</ul>\n<div>\n<p>Tip</p>\n<p>The SPI protocol is the preferred method for interfacing with more than 1 Cirque circle\ntrackpad from the same MCU (microcontroller). The Cirque Pinnacle does not allow\nchanging the I2C slave device address (via software); this means only 1 Cirque circle trackpad\ncan be accessed over the I2C bus at a time.</p>\n</div>\n</div>\n<div id=\"unsupported-features\">\n<h3>Unsupported Features</h3>\n<ul>\n<li>The legacy PS\\2 interface is pretty limited and not accessible by some CircuitPython MCUs.\nTherefore, it has been neglected in this library.</li>\n<li>Cirque\u2019s circle trackpads ship with the newer non-AG (Advanced Gestures) variant of the\nPinnacle touch controller ASIC. Thus, this library focuses on the the non-AG variant\u2019s\nfunctionality via testing, and it does not provide access to the older AG variant\u2019s features\n(register addresses slightly differ which breaks compatibility).</li>\n</ul>\n</div>\n</div>\n<div id=\"pinout\">\n<h2>Pinout</h2>\n<a href=\"https://www.mouser.com/new/cirque/glidepoint-circle-trackpads/\" rel=\"nofollow\"><img alt=\"https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/raw/master/docs/_static/Cirque_GlidePoint-Circle-Trackpad.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24250fd906daf0a68583f8ca45afb780ffcef63f/68747470733a2f2f6769746875622e636f6d2f32626e6479352f43697263756974507974686f6e5f4369727175655f50696e6e61636c652f7261772f6d61737465722f646f63732f5f7374617469632f4369727175655f476c696465506f696e742d436972636c652d547261636b7061642e706e67\"></a>\n<p>The above picture is a example of the Cirque GlidePoint circle trackpad. This picture\nis chosen as the test pads (larger copper circular pads) are clearly labeled. The test pads\nare extended to the <a href=\"https://www.mouser.com/Connectors/FFC-FPC/FFC-FPC-Jumper-Cables/_/N-axro3?P=1yc8ojpZ1z0wxjx\" rel=\"nofollow\">12-pin FFC/FPC cable</a> connector (the white block near the\nbottom). The following table shows how the pins are connected in the <a href=\"examples.html\" rel=\"nofollow\">examples</a> (tested on an <a href=\"https://www.adafruit.com/product/3800\" rel=\"nofollow\">ItsyBitys M4</a>)</p>\n<table>\n<caption>pinout (ordered the same as the FFC/FPC cable connector)</caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Label</th>\n<th>MCU pin</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>SCK</td>\n<td>SCK</td>\n<td>SPI clock line</td>\n</tr>\n<tr><td>SO</td>\n<td>MISO</td>\n<td>Master Input Slave Output</td>\n</tr>\n<tr><td>SS</td>\n<td>D7</td>\n<td>Slave Select (AKA Chip Select)</td>\n</tr>\n<tr><td>DR</td>\n<td>D2</td>\n<td>\u201cdata ready\u201d interrupt</td>\n</tr>\n<tr><td>SI</td>\n<td>MOSI</td>\n<td>SPI Master Output Slave Input</td>\n</tr>\n<tr><td>B2</td>\n<td>N/A</td>\n<td>Hardware input button #2</td>\n</tr>\n<tr><td>B3</td>\n<td>N/A</td>\n<td>Hardware input button #3</td>\n</tr>\n<tr><td>B1</td>\n<td>N/A</td>\n<td>Hardware input button #1</td>\n</tr>\n<tr><td>SCL</td>\n<td>SCL</td>\n<td>I2C clock line</td>\n</tr>\n<tr><td>SDA</td>\n<td>SDA</td>\n<td>I2C data line</td>\n</tr>\n<tr><td>GND</td>\n<td>GND</td>\n<td>Ground</td>\n</tr>\n<tr><td>VDD</td>\n<td>3V</td>\n<td>3V power supply</td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Tip</p>\n<p>Of course, you can capture button data manually (if your application utilizes more\nthan 3 buttons), but if you connect the pins B1, B2, B3 to momentary push buttons that\n(when pressed) provide a path to ground, the Pinnacle touch controller will report all 3\nbuttons\u2019 states for each touch (or even button only) events.</p>\n</div>\n<div id=\"model-labeling-scheme\">\n<h3>Model Labeling Scheme</h3>\n<blockquote>\n<p>TM<a href=\"#yyyxxx\" id=\"id1\" rel=\"nofollow\">[yyyxxx]</a>-202<a href=\"#i\" id=\"id2\" rel=\"nofollow\">[i]</a>-<a href=\"#cc\" id=\"id3\" rel=\"nofollow\">[cc]</a><a href=\"#o\" id=\"id4\" rel=\"nofollow\">[o]</a></p>\n<table id=\"yyyxxx\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[yyyxxx]</a></td><td>stands for the vertical &amp; horizontal width of the trackpad, respectively.</td></tr>\n</tbody>\n</table>\n<table id=\"i\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[i]</a></td><td>stands for the hardwired interface protocol (3 = I2C, 4 = SPI). Notice, if there is a\nresistor populated at the R1 (470K ohm) junction (located just above the Pinnacle ASIC), it\nis configured for SPI, otherwise it is configured for I2C.</td></tr>\n</tbody>\n</table>\n<table id=\"cc\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[cc]</a></td><td>stands for Custom Configuration (if a 470K ohm resistor is populated at junction R4).\n\u201c30\u201d (with a resistor at R4) means that the hardware is configured to disable\ncertain features despite what this library does. \u201c00\u201d (no resistor at R4) means that the\nhardware is configured to allow certain features to manipulated by this library. These\nfeatures include \u201csecondary tap\u201d (thought of as \u201cright mouse button\u201d in relative data mode),\nIntellimouse scrolling (Microsoft patented scroll wheel behavior \u2013 a throw back to when\nscroll wheels were first introduced), and 180 degree orientation (your application can invert\nthe axis data anyway).</td></tr>\n</tbody>\n</table>\n<table id=\"o\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id4\" rel=\"nofollow\">[o]</a></td><td>stands for the overlay type (0 = none, 1 = adhesive, 2 = flat, 3 = curved)</td></tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>This driver depends on:</p>\n<ul>\n<li><a href=\"https://github.com/adafruit/circuitpython\" rel=\"nofollow\">Adafruit CircuitPython</a></li>\n<li><a href=\"https://github.com/adafruit/Adafruit_CircuitPython_BusDevice\" rel=\"nofollow\">Bus Device</a></li>\n</ul>\n<p>Please ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Bundle\" rel=\"nofollow\">the Adafruit library and driver bundle</a>.</p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to Install</h2>\n<p>This library is deployed to pypi.org, so you can easily install this library\nusing <tt>pip3 install <span class=\"pre\">circuitpython-cirque-pinnacle</span></tt> or use the following\ncommands:</p>\n<pre>git clone https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle.git\n<span class=\"nb\">cd</span> CircuitPython_Cirque_Pinnacle\npython3 setup.py install\n</pre>\n<p>To install globally, prefix the last command with <tt>sudo</tt>.</p>\n</div>\n<div id=\"usage-example\">\n<h2>Usage Example</h2>\n<p>Ensure you\u2019ve connected the TMyyyxxx correctly by running the <cite>examples/</cite> located in the <a href=\"https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/tree/master/examples\" rel=\"nofollow\">examples\nfolder of this library</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome! Please read our <a href=\"https://github.com/2bndy5/CircuitPython_Cirque_Pinnacle/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>\nbefore contributing to help this project stay welcoming.</p>\n<div id=\"sphinx-documentation\">\n<h3>Sphinx documentation</h3>\n<p>Sphinx is used to build the documentation based on rST files and comments in the code. First,\ninstall dependencies (feel free to reuse the virtual environment from above):</p>\n<pre>python3 -m venv .env\n<span class=\"nb\">source</span> .env/bin/activate\npip install Sphinx sphinx-rtd-theme\n</pre>\n<p>Now, once you have the virtual environment activated:</p>\n<pre><span class=\"nb\">cd</span> docs\nsphinx-build -E -W -b html . _build/html\n</pre>\n<p>This will output the documentation to <tt>docs/_build/html</tt>. Open the index.html in your browser to\nview them. It will also (due to -W) error out on any warning like Travis will. This is a good way to\nlocally verify it will pass.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6889820, "releases": {"0.0.1rc1": [{"comment_text": "", "digests": {"md5": "f1e6a557e28153844bb8619409589d13", "sha256": "363150ab11e15a3db71c877aaaa42cd0f4d1b8a061ff8bf7fdbd72c9ba0acbc8"}, "downloads": -1, "filename": "circuitpython-cirque-pinnacle-0.0.1rc1.tar.gz", "has_sig": false, "md5_digest": "f1e6a557e28153844bb8619409589d13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 333624, "upload_time": "2020-03-25T07:50:59", "upload_time_iso_8601": "2020-03-25T07:50:59.059933Z", "url": "https://files.pythonhosted.org/packages/68/70/fc0bdca64178470ad1c06cdc1fb97eab4d17a06fe38939cc4f1f8d7662ec/circuitpython-cirque-pinnacle-0.0.1rc1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1f5e8e0b541ce7cde7bfd83641dacb51", "sha256": "3cdd79064d3c211cbc606b9c8aada2d9509fc1c12a3d658887d95371b977e895"}, "downloads": -1, "filename": "circuitpython-cirque-pinnacle-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1f5e8e0b541ce7cde7bfd83641dacb51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 336816, "upload_time": "2020-03-26T17:24:35", "upload_time_iso_8601": "2020-03-26T17:24:35.838160Z", "url": "https://files.pythonhosted.org/packages/91/eb/c53a207c9d663d462cb31857902cafdcf7a30ffc6895bb175358af48e892/circuitpython-cirque-pinnacle-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f5e8e0b541ce7cde7bfd83641dacb51", "sha256": "3cdd79064d3c211cbc606b9c8aada2d9509fc1c12a3d658887d95371b977e895"}, "downloads": -1, "filename": "circuitpython-cirque-pinnacle-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1f5e8e0b541ce7cde7bfd83641dacb51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 336816, "upload_time": "2020-03-26T17:24:35", "upload_time_iso_8601": "2020-03-26T17:24:35.838160Z", "url": "https://files.pythonhosted.org/packages/91/eb/c53a207c9d663d462cb31857902cafdcf7a30ffc6895bb175358af48e892/circuitpython-cirque-pinnacle-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:20 2020"}