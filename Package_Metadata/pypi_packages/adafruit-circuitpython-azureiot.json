{"info": {"author": "Adafruit Industries", "author_email": "circuitpython@adafruit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: System :: Hardware"], "description": "Adafruit_CircuitPython_AzureIoT\n================================\n\n.. image:: https://readthedocs.org/projects/adafruit-circuitpython-azureiot/badge/?version=latest\n    :target: https://circuitpython.readthedocs.io/projects/azureiot/en/latest/\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/discord/327254708534116352.svg\n    :target: https://discord.gg/nBQh6qu\n    :alt: Discord\n\n.. image:: https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT/workflows/Build%20CI/badge.svg\n    :target: https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT/actions/\n    :alt: Build Status\n\nA CircuitPython device library for `Microsoft Azure IoT Services <https://azure.microsoft.com/overview/iot/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`_ from a CircuitPython device. This library only supports key-base authentication, it currently doesn't support X.509 certificates.\n\nInstalling from PyPI\n=====================\nOn supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally `from\nPyPI <https://pypi.org/project/adafruit-circuitpython-azureiot/>`_. To install for current user:\n\n.. code-block:: shell\n\n    pip3 install adafruit-circuitpython-azureiot\n\nTo install system-wide (this may be required in some cases):\n\n.. code-block:: shell\n\n    sudo pip3 install adafruit-circuitpython-azureiot\n\nTo install in a virtual environment in your current project:\n\n.. code-block:: shell\n\n    mkdir project-name && cd project-name\n    python3 -m venv .env\n    source .env/bin/activate\n    pip3 install adafruit-circuitpython-azureiot\n\nDependencies\n=============\nThis driver depends on:\n\n* `Adafruit CircuitPython <https://github.com/adafruit/circuitpython>`_\n* `Adafruit CircuitPython MiniMQTT <https://github.com/adafruit/Adafruit_CircuitPython_MiniMQTT>`_\n\n* `CircuitPython Base64 <https://github.com/jimbobbennett/CircuitPython_Base64>`_\n* `CircuitPython HMAC <https://github.com/jimbobbennett/CircuitPython_HMAC>`_\n* `CircuitPython Parse <https://github.com/jimbobbennett/CircuitPython_Parse>`_\n\nPlease ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n`the Adafruit library and driver bundle <https://github.com/adafruit/Adafruit_CircuitPython_Bundle>`_\nand\n`the CircuitPython community library and driver bundle <https://github.com/adafruit/CircuitPython_Community_Bundle>`_\n\nUsage Example\n=============\n\nThis library supports both `Azure IoT Hub <https://azure.microsoft.com/services/iot-hub/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`_ and `Azure IoT Central <https://azure.microsoft.com/services/iot-central/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`__.\n\nTo create an Azure IoT Hub instance or an Azure IoT Central app, you will need an Azure subscription. If you don't have an Azure subscription, you can sign up for free:\n\n- If you are a student 18 or over, head to `aka.ms/FreeStudentAzure <https://aka.ms/FreeStudentAzure>`_ and sign up, validating with your student email address. This will give you $100 of Azure credit and free tiers of a load of service, renewable each year you are a student. You will not need a credit card.\n\n- If you are not a student, head to `aka.ms/FreeAz <https://aka.ms/FreeAz>`_ and sign up to get $200 of credit for 30 days, as well as free tiers of a load of services. You will need a credit card for validation only, your card will not be charged.\n\nTo use this library, you will need to create an ESP32_SPI WifiManager, connected to WiFi. You will also need to set the current time, as this is used to generate time-based authentication keys. One way to do this is via the `Adafruit CircuitPython NTP <https://github.com/adafruit/Adafruit_CircuitPython_NTP>`_ library with the following code:\n\n.. code-block:: python\n\n    ntp = NTP(esp)\n\n    # Wait for a valid time to be received\n    while not ntp.valid_time:\n        time.sleep(5)\n        ntp.set_time()\n\nAzure IoT Hub\n-------------\n\nTo interact with Azure IoT Hub, you will need to create a hub, and a register a device inside that hub. There is a free tier available, and this free tier allows up to 8,000 messages a day, so try not to send messages too often if you are using this tier.\n\n- Open the `Azure Portal <https://aka.ms/AzurePortalHome>`_. \n- Follow the instructions in `Microsoft Docs <https://aka.ms/CreateIoTHub>`_ to create an Azure IoT Hub and register a device.\n- Copy the devices Primary or secondary connection string, and add this to your ``secrets.py`` file.\n\nYou can find the device connection string by selecting the IoT Hub in the `Azure Portal <https://aka.ms/AzurePortalHome>`_, *selecting Explorer -> IoT devices*, then selecting your device.\n\n.. image:: iot-hub-device.png\n   :alt: Locating the device in the IoT hub blade\n\n*Locating the device in the IoT hub blade*\n\nThen copy either the primary or secondary connection string using the copy button next to the value.\n\n.. image:: iot-hub-device-keys.png\n   :alt: Copy the primary connection string\n\n*Copy the primary connection string*\n\n**Connect your device to Azure IoT Hub**\n\n.. code-block:: python\n\n    from adafruit_azureiot import IoTHubDevice\n\n    device = IoTHubDevice(wifi, secrets[\"device_connection_string\"])\n    device.connect()\n\nOnce the device is connected, you will regularly need to run a ``loop`` to poll for messages from the cloud.\n\n.. code-block:: python\n\n    while True:\n        device.loop()\n        time.sleep(1)\n\n**Send a device to cloud message**\n\n.. code-block:: python\n\n    message = {\"Temperature\": temp}\n    device.send_device_to_cloud_message(json.dumps(message))\n\n**Receive device to cloud messages**\n\n.. code-block:: python\n\n    def cloud_to_device_message_received(body: str, properties: dict):\n        print(\"Received message with body\", body, \"and properties\", json.dumps(properties))\n\n    # Subscribe to cloud to device messages\n    device.on_cloud_to_device_message_received = cloud_to_device_message_received\n\n**Receive direct methods**\n\n.. code-block:: python\n\n    def direct_method_invoked(method_name: str, payload) -> IoTResponse:\n        print(\"Received direct method\", method_name, \"with data\", str(payload))\n        # return a status code and message to indicate if the direct method was handled correctly\n        return IoTResponse(200, \"OK\")\n\n    # Subscribe to direct methods\n    device.on_direct_method_invoked = direct_method_invoked\n\n**Update reported properties on the device twin**\n\n*This is not supported on Basic tier IoT Hubs, only on the free and standard tiers.*\n\n.. code-block:: python\n\n    patch = {\"Temperature\": temp}\n    device.update_twin(patch)\n\n**Subscribe to desired property changes on the device twin**\n\n*This is not supported on Basic tier IoT Hubs, only on the free and standard tiers.*\n\n.. code-block:: python\n\n    def device_twin_desired_updated(desired_property_name: str, desired_property_value, desired_version: int):\n        print(\"Property\", desired_property_name, \"updated to\", str(desired_property_value), \"version\", desired_version)\n\n    # Subscribe to desired property changes\n    device.on_device_twin_desired_updated = device_twin_desired_updated\n\nAzure IoT Central\n-----------------\n\nTo use Azure IoT Central, you will need to create an Azure IoT Central app, create a device template and register a device against the template.\n\n- Head to `Azure IoT Central <https://apps.azureiotcentral.com/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`__ \n- Follow the instructions in the `Microsoft Docs <https://docs.microsoft.com/azure/iot-central/core/quick-deploy-iot-central?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`__ to create an application. Every tier is free for up to 2 devices.\n- Follow the instructions in the `Microsoft Docs <https://docs.microsoft.com/azure/iot-central/core/quick-create-simulated-device?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`__ to create a device template.\n- Create a device based off the template, and select **Connect** to get the device connection details. Store the ID Scope, Device ID and either the Primary or secondary Key in your ``secrets.py`` file.\n\n.. image:: iot-central-connect-button.png\n   :alt: The IoT Central connect button\n\n*The connect button*\n\n.. image:: iot-central-connect-dialog.png\n   :alt: The IoT Central connection details dialog\n\n*The connection details dialog*\n\n.. code-block:: python\n\n    secrets = {\n        # WiFi settings\n        \"ssid\": \"\",\n        \"password\": \"\",\n\n        # Azure IoT Central settings\n        \"id_scope\": \"\",\n        \"device_id\": \"\",\n        \"key\": \"\"\n    }\n\n**Connect your device to your Azure IoT Central app**\n\n.. code-block:: python\n\n    from adafruit_azureiot import IoTCentralDevice\n\n    device = IoTCentralDevice(wifi, secrets[\"id_scope\"], secrets[\"device_id\"], secrets[\"key\"])\n    device.connect()\n\nOnce the device is connected, you will regularly need to run a ``loop`` to poll for messages from the cloud.\n\n.. code-block:: python\n\n    while True:\n        device.loop()\n        time.sleep(1)\n\n**Send telemetry**\n\n.. code-block:: python\n\n    message = {\"Temperature\": temp}\n    device.send_telemetry(json.dumps(message))\n\n**Listen for commands**\n\n.. code-block:: python\n\n    def command_executed(command_name: str, payload) -> IoTResponse:\n        print(\"Command\", command_name, \"executed with payload\", str(payload))\n        # return a status code and message to indicate if the command was handled correctly\n        return IoTResponse(200, \"OK\")\n\n    # Subscribe to commands\n    device.on_command_executed = command_executed\n\n**Update properties**\n\n.. code-block:: python\n\n    device.send_property(\"Desired_Temperature\", temp)\n\n**Listen for property updates**\n\n.. code-block:: python\n\n    def property_changed(property_name, property_value, version):\n        print(\"Property\", property_name, \"updated to\", str(property_value), \"version\", str(version))\n\n    # Subscribe to property updates\n    device.on_property_changed = property_changed\n\nLearning more about Azure IoT services\n--------------------------------------\n\nIf you want to learn more about setting up or using Azure IoT Services, check out the following resources:\n\n- `Azure IoT documentation on Microsoft Docs <https://docs.microsoft.com/azure/iot-fundamentals/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`_\n- `IoT learning paths and modules on Microsoft Learn <https://docs.microsoft.com/learn/browse/?term=iot&WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn>`_ - Free, online, self-guided hands on learning with Azure IoT services\n\nContributing\n============\n\nContributions are welcome! Please read our `Code of Conduct\n<https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT/blob/master/CODE_OF_CONDUCT.md>`_\nbefore contributing to help this project stay welcoming.\n\nDocumentation\n=============\n\nFor information on building library documentation, please check out `this guide <https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1>`_.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT", "keywords": "adafruit blinka circuitpython micropython azureiot azure iot device services,iothub,iotcentral", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "adafruit-circuitpython-azureiot", "package_url": "https://pypi.org/project/adafruit-circuitpython-azureiot/", "platform": "", "project_url": "https://pypi.org/project/adafruit-circuitpython-azureiot/", "project_urls": {"Homepage": "https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT"}, "release_url": "https://pypi.org/project/adafruit-circuitpython-azureiot/2.0.0/", "requires_dist": null, "requires_python": "", "summary": "Access to Microsoft Azure IoT from CircuitPython", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"adafruit-circuitpython-azureiot\">\n<h2>Adafruit_CircuitPython_AzureIoT</h2>\n<a href=\"https://circuitpython.readthedocs.io/projects/azureiot/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39375ef97b4a0f43c5d78ec8ef3a1af7e36dc923/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61646166727569742d63697263756974707974686f6e2d617a757265696f742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://discord.gg/nBQh6qu\" rel=\"nofollow\"><img alt=\"Discord\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2973e7de9caf359680953316fa3b541f702086c/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3332373235343730383533343131363335322e737667\"></a>\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT/actions/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c584516470b9339c99f0fe813ba4bac5f30c958/68747470733a2f2f6769746875622e636f6d2f61646166727569742f41646166727569745f43697263756974507974686f6e5f417a757265496f542f776f726b666c6f77732f4275696c6425323043492f62616467652e737667\"></a>\n<p>A CircuitPython device library for <a href=\"https://azure.microsoft.com/overview/iot/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Microsoft Azure IoT Services</a> from a CircuitPython device. This library only supports key-base authentication, it currently doesn\u2019t support X.509 certificates.</p>\n</div>\n<div id=\"installing-from-pypi\">\n<h2>Installing from PyPI</h2>\n<p>On supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally <a href=\"https://pypi.org/project/adafruit-circuitpython-azureiot/\" rel=\"nofollow\">from\nPyPI</a>. To install for current user:</p>\n<pre>pip3 install adafruit-circuitpython-azureiot\n</pre>\n<p>To install system-wide (this may be required in some cases):</p>\n<pre>sudo pip3 install adafruit-circuitpython-azureiot\n</pre>\n<p>To install in a virtual environment in your current project:</p>\n<pre>mkdir project-name <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> project-name\npython3 -m venv .env\n<span class=\"nb\">source</span> .env/bin/activate\npip3 install adafruit-circuitpython-azureiot\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>This driver depends on:</p>\n<ul>\n<li><a href=\"https://github.com/adafruit/circuitpython\" rel=\"nofollow\">Adafruit CircuitPython</a></li>\n<li><a href=\"https://github.com/adafruit/Adafruit_CircuitPython_MiniMQTT\" rel=\"nofollow\">Adafruit CircuitPython MiniMQTT</a></li>\n<li><a href=\"https://github.com/jimbobbennett/CircuitPython_Base64\" rel=\"nofollow\">CircuitPython Base64</a></li>\n<li><a href=\"https://github.com/jimbobbennett/CircuitPython_HMAC\" rel=\"nofollow\">CircuitPython HMAC</a></li>\n<li><a href=\"https://github.com/jimbobbennett/CircuitPython_Parse\" rel=\"nofollow\">CircuitPython Parse</a></li>\n</ul>\n<p>Please ensure all dependencies are available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Bundle\" rel=\"nofollow\">the Adafruit library and driver bundle</a>\nand\n<a href=\"https://github.com/adafruit/CircuitPython_Community_Bundle\" rel=\"nofollow\">the CircuitPython community library and driver bundle</a></p>\n</div>\n<div id=\"usage-example\">\n<h2>Usage Example</h2>\n<p>This library supports both <a href=\"https://azure.microsoft.com/services/iot-hub/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Azure IoT Hub</a> and <a href=\"https://azure.microsoft.com/services/iot-central/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Azure IoT Central</a>.</p>\n<p>To create an Azure IoT Hub instance or an Azure IoT Central app, you will need an Azure subscription. If you don\u2019t have an Azure subscription, you can sign up for free:</p>\n<ul>\n<li>If you are a student 18 or over, head to <a href=\"https://aka.ms/FreeStudentAzure\" rel=\"nofollow\">aka.ms/FreeStudentAzure</a> and sign up, validating with your student email address. This will give you $100 of Azure credit and free tiers of a load of service, renewable each year you are a student. You will not need a credit card.</li>\n<li>If you are not a student, head to <a href=\"https://aka.ms/FreeAz\" rel=\"nofollow\">aka.ms/FreeAz</a> and sign up to get $200 of credit for 30 days, as well as free tiers of a load of services. You will need a credit card for validation only, your card will not be charged.</li>\n</ul>\n<p>To use this library, you will need to create an ESP32_SPI WifiManager, connected to WiFi. You will also need to set the current time, as this is used to generate time-based authentication keys. One way to do this is via the <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_NTP\" rel=\"nofollow\">Adafruit CircuitPython NTP</a> library with the following code:</p>\n<pre><span class=\"n\">ntp</span> <span class=\"o\">=</span> <span class=\"n\">NTP</span><span class=\"p\">(</span><span class=\"n\">esp</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Wait for a valid time to be received</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">ntp</span><span class=\"o\">.</span><span class=\"n\">valid_time</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">ntp</span><span class=\"o\">.</span><span class=\"n\">set_time</span><span class=\"p\">()</span>\n</pre>\n<div id=\"id1\">\n<h3>Azure IoT Hub</h3>\n<p>To interact with Azure IoT Hub, you will need to create a hub, and a register a device inside that hub. There is a free tier available, and this free tier allows up to 8,000 messages a day, so try not to send messages too often if you are using this tier.</p>\n<ul>\n<li>Open the <a href=\"https://aka.ms/AzurePortalHome\" rel=\"nofollow\">Azure Portal</a>.</li>\n<li>Follow the instructions in <a href=\"https://aka.ms/CreateIoTHub\" rel=\"nofollow\">Microsoft Docs</a> to create an Azure IoT Hub and register a device.</li>\n<li>Copy the devices Primary or secondary connection string, and add this to your <tt>secrets.py</tt> file.</li>\n</ul>\n<p>You can find the device connection string by selecting the IoT Hub in the <a href=\"https://aka.ms/AzurePortalHome\" rel=\"nofollow\">Azure Portal</a>, <em>selecting Explorer -&gt; IoT devices</em>, then selecting your device.</p>\n<img alt=\"Locating the device in the IoT hub blade\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bff6f3c44ad9b53744e631beea05c8ac8b73c014/696f742d6875622d6465766963652e706e67\">\n<p><em>Locating the device in the IoT hub blade</em></p>\n<p>Then copy either the primary or secondary connection string using the copy button next to the value.</p>\n<img alt=\"Copy the primary connection string\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0fd18cbc370f4b89f53ba3c58ca0d0deacc6def2/696f742d6875622d6465766963652d6b6579732e706e67\">\n<p><em>Copy the primary connection string</em></p>\n<p><strong>Connect your device to Azure IoT Hub</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adafruit_azureiot</span> <span class=\"kn\">import</span> <span class=\"n\">IoTHubDevice</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">IoTHubDevice</span><span class=\"p\">(</span><span class=\"n\">wifi</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">\"device_connection_string\"</span><span class=\"p\">])</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>Once the device is connected, you will regularly need to run a <tt>loop</tt> to poll for messages from the cloud.</p>\n<pre><span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">()</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Send a device to cloud message</strong></p>\n<pre><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">:</span> <span class=\"n\">temp</span><span class=\"p\">}</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">send_device_to_cloud_message</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Receive device to cloud messages</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">cloud_to_device_message_received</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">properties</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Received message with body\"</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"s2\">\"and properties\"</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">properties</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Subscribe to cloud to device messages</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">on_cloud_to_device_message_received</span> <span class=\"o\">=</span> <span class=\"n\">cloud_to_device_message_received</span>\n</pre>\n<p><strong>Receive direct methods</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">direct_method_invoked</span><span class=\"p\">(</span><span class=\"n\">method_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IoTResponse</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Received direct method\"</span><span class=\"p\">,</span> <span class=\"n\">method_name</span><span class=\"p\">,</span> <span class=\"s2\">\"with data\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">))</span>\n    <span class=\"c1\"># return a status code and message to indicate if the direct method was handled correctly</span>\n    <span class=\"k\">return</span> <span class=\"n\">IoTResponse</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscribe to direct methods</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">on_direct_method_invoked</span> <span class=\"o\">=</span> <span class=\"n\">direct_method_invoked</span>\n</pre>\n<p><strong>Update reported properties on the device twin</strong></p>\n<p><em>This is not supported on Basic tier IoT Hubs, only on the free and standard tiers.</em></p>\n<pre><span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">:</span> <span class=\"n\">temp</span><span class=\"p\">}</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">update_twin</span><span class=\"p\">(</span><span class=\"n\">patch</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Subscribe to desired property changes on the device twin</strong></p>\n<p><em>This is not supported on Basic tier IoT Hubs, only on the free and standard tiers.</em></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">device_twin_desired_updated</span><span class=\"p\">(</span><span class=\"n\">desired_property_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">desired_property_value</span><span class=\"p\">,</span> <span class=\"n\">desired_version</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Property\"</span><span class=\"p\">,</span> <span class=\"n\">desired_property_name</span><span class=\"p\">,</span> <span class=\"s2\">\"updated to\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">desired_property_value</span><span class=\"p\">),</span> <span class=\"s2\">\"version\"</span><span class=\"p\">,</span> <span class=\"n\">desired_version</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscribe to desired property changes</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">on_device_twin_desired_updated</span> <span class=\"o\">=</span> <span class=\"n\">device_twin_desired_updated</span>\n</pre>\n</div>\n<div id=\"azure-iot-central\">\n<h3>Azure IoT Central</h3>\n<p>To use Azure IoT Central, you will need to create an Azure IoT Central app, create a device template and register a device against the template.</p>\n<ul>\n<li>Head to <a href=\"https://apps.azureiotcentral.com/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Azure IoT Central</a></li>\n<li>Follow the instructions in the <a href=\"https://docs.microsoft.com/azure/iot-central/core/quick-deploy-iot-central?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Microsoft Docs</a> to create an application. Every tier is free for up to 2 devices.</li>\n<li>Follow the instructions in the <a href=\"https://docs.microsoft.com/azure/iot-central/core/quick-create-simulated-device?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Microsoft Docs</a> to create a device template.</li>\n<li>Create a device based off the template, and select <strong>Connect</strong> to get the device connection details. Store the ID Scope, Device ID and either the Primary or secondary Key in your <tt>secrets.py</tt> file.</li>\n</ul>\n<img alt=\"The IoT Central connect button\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67e9c7d98b152a4befaad383ab6632b9bef43408/696f742d63656e7472616c2d636f6e6e6563742d627574746f6e2e706e67\">\n<p><em>The connect button</em></p>\n<img alt=\"The IoT Central connection details dialog\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/104a17f58aeb571cd862c462ddd519f0c3b4a844/696f742d63656e7472616c2d636f6e6e6563742d6469616c6f672e706e67\">\n<p><em>The connection details dialog</em></p>\n<pre><span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># WiFi settings</span>\n    <span class=\"s2\">\"ssid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"password\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n\n    <span class=\"c1\"># Azure IoT Central settings</span>\n    <span class=\"s2\">\"id_scope\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"device_id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Connect your device to your Azure IoT Central app</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">adafruit_azureiot</span> <span class=\"kn\">import</span> <span class=\"n\">IoTCentralDevice</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">IoTCentralDevice</span><span class=\"p\">(</span><span class=\"n\">wifi</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">\"id_scope\"</span><span class=\"p\">],</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">\"device_id\"</span><span class=\"p\">],</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">\"key\"</span><span class=\"p\">])</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n</pre>\n<p>Once the device is connected, you will regularly need to run a <tt>loop</tt> to poll for messages from the cloud.</p>\n<pre><span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">()</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Send telemetry</strong></p>\n<pre><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"Temperature\"</span><span class=\"p\">:</span> <span class=\"n\">temp</span><span class=\"p\">}</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">send_telemetry</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">))</span>\n</pre>\n<p><strong>Listen for commands</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">command_executed</span><span class=\"p\">(</span><span class=\"n\">command_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">IoTResponse</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Command\"</span><span class=\"p\">,</span> <span class=\"n\">command_name</span><span class=\"p\">,</span> <span class=\"s2\">\"executed with payload\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">))</span>\n    <span class=\"c1\"># return a status code and message to indicate if the command was handled correctly</span>\n    <span class=\"k\">return</span> <span class=\"n\">IoTResponse</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscribe to commands</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">on_command_executed</span> <span class=\"o\">=</span> <span class=\"n\">command_executed</span>\n</pre>\n<p><strong>Update properties</strong></p>\n<pre><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">send_property</span><span class=\"p\">(</span><span class=\"s2\">\"Desired_Temperature\"</span><span class=\"p\">,</span> <span class=\"n\">temp</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Listen for property updates</strong></p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">property_changed</span><span class=\"p\">(</span><span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"n\">property_value</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Property\"</span><span class=\"p\">,</span> <span class=\"n\">property_name</span><span class=\"p\">,</span> <span class=\"s2\">\"updated to\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">property_value</span><span class=\"p\">),</span> <span class=\"s2\">\"version\"</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Subscribe to property updates</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">on_property_changed</span> <span class=\"o\">=</span> <span class=\"n\">property_changed</span>\n</pre>\n</div>\n<div id=\"learning-more-about-azure-iot-services\">\n<h3>Learning more about Azure IoT services</h3>\n<p>If you want to learn more about setting up or using Azure IoT Services, check out the following resources:</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/azure/iot-fundamentals/?WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">Azure IoT documentation on Microsoft Docs</a></li>\n<li><a href=\"https://docs.microsoft.com/learn/browse/?term=iot&amp;WT.mc_id=AdafruitCircuitPythonAzureIoT-github-jabenn\" rel=\"nofollow\">IoT learning paths and modules on Microsoft Learn</a> - Free, online, self-guided hands on learning with Azure IoT services</li>\n</ul>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome! Please read our <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_AzureIoT/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>\nbefore contributing to help this project stay welcoming.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For information on building library documentation, please check out <a href=\"https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1\" rel=\"nofollow\">this guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 7137332, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "27e5f28bea435a3d5db475b2318d43c2", "sha256": "90ff6bf21d522c0044157afa9cbed9e7f35fb94469771756f885467a861ee478"}, "downloads": -1, "filename": "adafruit-circuitpython-azureiot-1.0.3.tar.gz", "has_sig": false, "md5_digest": "27e5f28bea435a3d5db475b2318d43c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21371, "upload_time": "2020-01-22T01:30:45", "upload_time_iso_8601": "2020-01-22T01:30:45.482042Z", "url": "https://files.pythonhosted.org/packages/66/12/7322b47cc2d3e22da3ab09160fb08f21ec5d739590b9575a080aa57274a4/adafruit-circuitpython-azureiot-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "fd045cc889ef3b7f8b38b530e7509827", "sha256": "2511f1aa63b26d04ce7aa14c8cd173941f5d700d389ab20de159f6f7311bb7e7"}, "downloads": -1, "filename": "adafruit-circuitpython-azureiot-1.1.0.tar.gz", "has_sig": false, "md5_digest": "fd045cc889ef3b7f8b38b530e7509827", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21536, "upload_time": "2020-03-17T22:47:48", "upload_time_iso_8601": "2020-03-17T22:47:48.843165Z", "url": "https://files.pythonhosted.org/packages/24/09/b9f0c9c7f56acf96dc1fcd3fe9feec1b049d057d5b46422adb18334163af/adafruit-circuitpython-azureiot-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "edb0e8e8342e2fd0236279b94c231b6c", "sha256": "7d823324dec5aa863eba185158f10b7511a91c3ed03d31243c11b486b78bcbc4"}, "downloads": -1, "filename": "adafruit-circuitpython-azureiot-2.0.0.tar.gz", "has_sig": false, "md5_digest": "edb0e8e8342e2fd0236279b94c231b6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 477080, "upload_time": "2020-04-30T13:21:42", "upload_time_iso_8601": "2020-04-30T13:21:42.598623Z", "url": "https://files.pythonhosted.org/packages/06/40/970ae2c2a18d0f44450b27129eb7822af12edd02906ceb740cec05011bd6/adafruit-circuitpython-azureiot-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edb0e8e8342e2fd0236279b94c231b6c", "sha256": "7d823324dec5aa863eba185158f10b7511a91c3ed03d31243c11b486b78bcbc4"}, "downloads": -1, "filename": "adafruit-circuitpython-azureiot-2.0.0.tar.gz", "has_sig": false, "md5_digest": "edb0e8e8342e2fd0236279b94c231b6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 477080, "upload_time": "2020-04-30T13:21:42", "upload_time_iso_8601": "2020-04-30T13:21:42.598623Z", "url": "https://files.pythonhosted.org/packages/06/40/970ae2c2a18d0f44450b27129eb7822af12edd02906ceb740cec05011bd6/adafruit-circuitpython-azureiot-2.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:07 2020"}