{"info": {"author": "Julian Stier", "author_email": "julian.stier@uni-passau.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pyklopp\nTired of logging all hyperparameter configurations of your model prototyping to disk?\n\nPyklopp is a tool to initialize, train and evaluate pytorch models (currently for supervised problems).\nIt persists all relevant hyperparameters, timings and model configurations.\nYour prototyping is reduced to defining your model, the dataset and your desired parameters.\n\n## Installation\n- ``pip install pyklopp``\n- or by ``poetry build``, ``pip install dist/xxx.whl``\n\n# Defining model & dataset\nSpecify your model in a plain python file, e.g.:\n```python\n# my_model.py\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\n# Your model can be any pytorch module\n# Make sure to not define it locally (e.g. within the get_model()-function)\nclass LeNet(nn.Module):\n    def __init__(self, output_size):\n        super(LeNet, self).__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, output_size)\n\n    def forward(self, x):\n        out = F.relu(self.conv1(x))\n        out = F.max_pool2d(out, 2)\n        out = F.relu(self.conv2(out))\n        out = F.max_pool2d(out, 2)\n        out = out.view(out.size(0), -1)\n        out = F.relu(self.fc1(out))\n        out = F.relu(self.fc2(out))\n        out = self.fc3(out)\n        return out\n\n\n# This is your model-instantiation function\n# It receives an assembled configuration keyword argument list and should return an instance of your model\ndef get_model(**kwargs):\n    output_size = int(kwargs['output_size'])\n\n    return LeNet(output_size)\n```\n\nInvoke pyklopp to initialize it: ``pyklopp init my_model.get_model --save='test/model.pth' --config='{\"output_size\": 10}'``\nTrain it on *cifar10*:\n- ``pyklopp train test/model.pth cifar10.py --save='test/trained.pth' --config='{\"batch_size\": 100}'``\n- ``pyklopp train test/model.pth torchvision.datasets.cifar.CIFAR10 --save 'test/trained.pth' --config='{\"dataset_config\": {\"root\": \"/media/data/set/cifar10\"}}'``\n\n\n# Examples\n\n```bash\n# Initializing & Saving: mymodel.py\npyklopp init foo --save='mymodel1/model.pth'\npyklopp init foo --config='{\"python_seed_initial\": 100}' --save='mymodel2/model.pth'\n\n# Training\npyklopp train path/to/mymodel.pth mnist\npyklopp train path/to/mymodel.pth mnist --config='{\"batch_size\": 100, \"learning_rate\": 0.01}'\n```\n\n```python\n# foo.py - Your model initialization function\nimport pypaddle.sparse\n\ndef init(**kwargs):\n    input_size = kwargs['input_size']\n    output_size = kwargs['output_size']\n\n    return pypaddle.sparse.MaskedDeepFFN(input_size, output_size, [100, 100])\n```\n\n```python\n# mnist.py - Your dataset loading functions\nimport pypaddle.util\n\n\ndef train_loader(**kwargs):\n    batch_size = kwargs['batch_size']\n\n    mnist_train_loader, mnist_test_loader, _, selected_root = pypaddle.util.get_mnist_loaders(batch_size, '/media/data/set/mnist')\n    return mnist_train_loader\n\n\ndef test_loader(**kwargs):\n    batch_size = kwargs['batch_size']\n\n    mnist_train_loader, mnist_test_loader, _, selected_root = pypaddle.util.get_mnist_loaders(batch_size, '/media/data/set/mnist')\n    return mnist_test_loader\n```\n\n# Development\n- Create wheel files in *dist/*: ``poetry build``\n- Install wheel in current environment with pip: ``pip install path/to/pyklopp/dist/pyklopp-0.1.0-py3-none-any.whl``\n\n## Running CI image locally\nInstall latest *gitlab-runner* (version 12.3 or up):\n```bash\n# For Debian/Ubuntu/Mint\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash\n\n# For RHEL/CentOS/Fedora\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\n\napt-get update\napt-get install gitlab-runner\n\n$ gitlab-runner -v\nVersion:      12.3.0\n```\nExecute job *tests*: ``gitlab-runner exec docker tests``\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/innvariant/pyklopp", "keywords": "machine learning,inference,training", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyklopp", "package_url": "https://pypi.org/project/pyklopp/", "platform": "", "project_url": "https://pypi.org/project/pyklopp/", "project_urls": {"Documentation": "https://github.com/innvariant/pyklopp", "Homepage": "https://github.com/innvariant/pyklopp", "Repository": "https://github.com/innvariant/pyklopp"}, "release_url": "https://pypi.org/project/pyklopp/0.2.2/", "requires_dist": ["cleo (>=0.7,<0.8)", "importlib-metadata (>=1.5.0,<2.0.0)", "pytorch-ignite (>=0.2,<0.3)", "torch (>=1.3)", "torchvision (>=0.4)", "tqdm (>=4.40,<5.0)"], "requires_python": ">=3.5,<4.0", "summary": "", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyklopp</h1>\n<p>Tired of logging all hyperparameter configurations of your model prototyping to disk?</p>\n<p>Pyklopp is a tool to initialize, train and evaluate pytorch models (currently for supervised problems).\nIt persists all relevant hyperparameters, timings and model configurations.\nYour prototyping is reduced to defining your model, the dataset and your desired parameters.</p>\n<h2>Installation</h2>\n<ul>\n<li><code>pip install pyklopp</code></li>\n<li>or by <code>poetry build</code>, <code>pip install dist/xxx.whl</code></li>\n</ul>\n<h1>Defining model &amp; dataset</h1>\n<p>Specify your model in a plain python file, e.g.:</p>\n<pre><span class=\"c1\"># my_model.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch.nn</span> <span class=\"k\">as</span> <span class=\"nn\">nn</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch.nn.functional</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n\n\n<span class=\"c1\"># Your model can be any pytorch module</span>\n<span class=\"c1\"># Make sure to not define it locally (e.g. within the get_model()-function)</span>\n<span class=\"k\">class</span> <span class=\"nc\">LeNet</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">LeNet</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc1</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc2</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc3</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">max_pool2d</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">conv2</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">max_pool2d</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc1</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc2</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">))</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fc3</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n\n<span class=\"c1\"># This is your model-instantiation function</span>\n<span class=\"c1\"># It receives an assembled configuration keyword argument list and should return an instance of your model</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_model</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'output_size'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">LeNet</span><span class=\"p\">(</span><span class=\"n\">output_size</span><span class=\"p\">)</span>\n</pre>\n<p>Invoke pyklopp to initialize it: <code>pyklopp init my_model.get_model --save='test/model.pth' --config='{\"output_size\": 10}'</code>\nTrain it on <em>cifar10</em>:</p>\n<ul>\n<li><code>pyklopp train test/model.pth cifar10.py --save='test/trained.pth' --config='{\"batch_size\": 100}'</code></li>\n<li><code>pyklopp train test/model.pth torchvision.datasets.cifar.CIFAR10 --save 'test/trained.pth' --config='{\"dataset_config\": {\"root\": \"/media/data/set/cifar10\"}}'</code></li>\n</ul>\n<h1>Examples</h1>\n<pre><span class=\"c1\"># Initializing &amp; Saving: mymodel.py</span>\npyklopp init foo --save<span class=\"o\">=</span><span class=\"s1\">'mymodel1/model.pth'</span>\npyklopp init foo --config<span class=\"o\">=</span><span class=\"s1\">'{\"python_seed_initial\": 100}'</span> --save<span class=\"o\">=</span><span class=\"s1\">'mymodel2/model.pth'</span>\n\n<span class=\"c1\"># Training</span>\npyklopp train path/to/mymodel.pth mnist\npyklopp train path/to/mymodel.pth mnist --config<span class=\"o\">=</span><span class=\"s1\">'{\"batch_size\": 100, \"learning_rate\": 0.01}'</span>\n</pre>\n<pre><span class=\"c1\"># foo.py - Your model initialization function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pypaddle.sparse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">input_size</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'input_size'</span><span class=\"p\">]</span>\n    <span class=\"n\">output_size</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'output_size'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">pypaddle</span><span class=\"o\">.</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">MaskedDeepFFN</span><span class=\"p\">(</span><span class=\"n\">input_size</span><span class=\"p\">,</span> <span class=\"n\">output_size</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"c1\"># mnist.py - Your dataset loading functions</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pypaddle.util</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">train_loader</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'batch_size'</span><span class=\"p\">]</span>\n\n    <span class=\"n\">mnist_train_loader</span><span class=\"p\">,</span> <span class=\"n\">mnist_test_loader</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">selected_root</span> <span class=\"o\">=</span> <span class=\"n\">pypaddle</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">get_mnist_loaders</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"s1\">'/media/data/set/mnist'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mnist_train_loader</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_loader</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'batch_size'</span><span class=\"p\">]</span>\n\n    <span class=\"n\">mnist_train_loader</span><span class=\"p\">,</span> <span class=\"n\">mnist_test_loader</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">selected_root</span> <span class=\"o\">=</span> <span class=\"n\">pypaddle</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">get_mnist_loaders</span><span class=\"p\">(</span><span class=\"n\">batch_size</span><span class=\"p\">,</span> <span class=\"s1\">'/media/data/set/mnist'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mnist_test_loader</span>\n</pre>\n<h1>Development</h1>\n<ul>\n<li>Create wheel files in <em>dist/</em>: <code>poetry build</code></li>\n<li>Install wheel in current environment with pip: <code>pip install path/to/pyklopp/dist/pyklopp-0.1.0-py3-none-any.whl</code></li>\n</ul>\n<h2>Running CI image locally</h2>\n<p>Install latest <em>gitlab-runner</em> (version 12.3 or up):</p>\n<pre><span class=\"c1\"># For Debian/Ubuntu/Mint</span>\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh <span class=\"p\">|</span> sudo bash\n\n<span class=\"c1\"># For RHEL/CentOS/Fedora</span>\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh <span class=\"p\">|</span> sudo bash\n\napt-get update\napt-get install gitlab-runner\n\n$ gitlab-runner -v\nVersion:      <span class=\"m\">12</span>.3.0\n</pre>\n<p>Execute job <em>tests</em>: <code>gitlab-runner exec docker tests</code></p>\n\n          </div>"}, "last_serial": 6864934, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "07903df3e0229d99fde7be1ee83a1acd", "sha256": "d3af15730fb55eaac89bf8e34379d094c79c3a15a1f07dc60b577a9688275a24"}, "downloads": -1, "filename": "pyklopp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07903df3e0229d99fde7be1ee83a1acd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 12497, "upload_time": "2019-12-15T19:20:46", "upload_time_iso_8601": "2019-12-15T19:20:46.878945Z", "url": "https://files.pythonhosted.org/packages/a5/3d/f9ec185144c04fff3cd80ece96ed7901d9ace183e961d3efcf139d4c9c90/pyklopp-0.1.0-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "7065f636ef269fed2f55d51c39771491", "sha256": "0bdfc8162ca4835eec853e77c87c5b261b9d275961b0cc59a17231ffc0660043"}, "downloads": -1, "filename": "pyklopp-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7065f636ef269fed2f55d51c39771491", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 15614, "upload_time": "2020-01-07T13:03:03", "upload_time_iso_8601": "2020-01-07T13:03:03.475217Z", "url": "https://files.pythonhosted.org/packages/f4/fd/42b51a8e18447c397f9ca40af8deca224e6c3b33ed9a3dd26d0d477e9909/pyklopp-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e71a18bd3c3774afafca1d60d3b924cc", "sha256": "bd8d4c155eab8d493e6498536591646b31f51a191655ead338579cd5e7aed041"}, "downloads": -1, "filename": "pyklopp-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e71a18bd3c3774afafca1d60d3b924cc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 15895, "upload_time": "2020-03-20T14:16:49", "upload_time_iso_8601": "2020-03-20T14:16:49.234186Z", "url": "https://files.pythonhosted.org/packages/18/91/b320277c0b5ac823f998e2142dc0457f174030f233ea7c304fbe0050ac5c/pyklopp-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a233dca45a0b4b8ee9a52e125b940d2", "sha256": "6ec276e7580ca197356fb790d46ec3a6d2daa240035175230e685384a3c59d43"}, "downloads": -1, "filename": "pyklopp-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1a233dca45a0b4b8ee9a52e125b940d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 11845, "upload_time": "2020-03-20T14:16:50", "upload_time_iso_8601": "2020-03-20T14:16:50.567930Z", "url": "https://files.pythonhosted.org/packages/91/a2/fbb0efd70a2dd8232eab9c201985fc075d8fd9e87dc33d8583fed464c052/pyklopp-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ef4de06e938b3f03e2e5912e1b66c318", "sha256": "4266cfaa18df030b5c99e0fb0a41e91c2b5c1a3a8fba6575f1d2422420b10a7f"}, "downloads": -1, "filename": "pyklopp-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef4de06e938b3f03e2e5912e1b66c318", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 18109, "upload_time": "2020-03-23T11:37:57", "upload_time_iso_8601": "2020-03-23T11:37:57.759032Z", "url": "https://files.pythonhosted.org/packages/7b/1e/3d6f414646507fa049d27c8ea91bcfef89438451e6666cd62bb417e8147f/pyklopp-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74608682f74b9f8c619986e8aa10cbb9", "sha256": "ab1f4bd64a6a688760fff7fc9379592c0335c3e5e89d0c3cf0ed326e64661a79"}, "downloads": -1, "filename": "pyklopp-0.2.2.tar.gz", "has_sig": false, "md5_digest": "74608682f74b9f8c619986e8aa10cbb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 11980, "upload_time": "2020-03-23T11:37:59", "upload_time_iso_8601": "2020-03-23T11:37:59.406963Z", "url": "https://files.pythonhosted.org/packages/d3/d7/e5b3b53e871cb1eec61df7db85f374bc9c46fbd23703c9c25498b63a1993/pyklopp-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef4de06e938b3f03e2e5912e1b66c318", "sha256": "4266cfaa18df030b5c99e0fb0a41e91c2b5c1a3a8fba6575f1d2422420b10a7f"}, "downloads": -1, "filename": "pyklopp-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef4de06e938b3f03e2e5912e1b66c318", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 18109, "upload_time": "2020-03-23T11:37:57", "upload_time_iso_8601": "2020-03-23T11:37:57.759032Z", "url": "https://files.pythonhosted.org/packages/7b/1e/3d6f414646507fa049d27c8ea91bcfef89438451e6666cd62bb417e8147f/pyklopp-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74608682f74b9f8c619986e8aa10cbb9", "sha256": "ab1f4bd64a6a688760fff7fc9379592c0335c3e5e89d0c3cf0ed326e64661a79"}, "downloads": -1, "filename": "pyklopp-0.2.2.tar.gz", "has_sig": false, "md5_digest": "74608682f74b9f8c619986e8aa10cbb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 11980, "upload_time": "2020-03-23T11:37:59", "upload_time_iso_8601": "2020-03-23T11:37:59.406963Z", "url": "https://files.pythonhosted.org/packages/d3/d7/e5b3b53e871cb1eec61df7db85f374bc9c46fbd23703c9c25498b63a1993/pyklopp-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:30 2020"}