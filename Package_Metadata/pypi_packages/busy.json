{"info": {"author": "Francis Potter", "author_email": "busy@fpotter.com", "bugtrack_url": null, "classifiers": [], "description": "# BUSY\n\nTask and plan management tool, for use from the terminal prompt on Linux and MacOS systems.\n\n## Installation\n\nRequires Python 3.6.5 or later.\n\n```\npip3 install busy\n```\n\n## Getting started\n\nAdd some tasks to your queue.\n\n```\nbusy add \"Take a shower\"\nbusy add \"Do the laundry\"\nbusy add \"Phone mom\"\nbusy add \"Donate to the Busy project\"\n```\n\nFind out what to do next:\n\n```\nbusy get\n```\n\nReturns:\n\n```\nTake a shower\n```\n\nWhen you're done, mark it off to find the next task.\n\n```\nbusy finish; busy get\n```\n\nReturns:\n\n```\nDo the laundry\n```\n\nSee the whole queue, with sequence numbers.\n\n```\nbusy list\n```\n\nReturns:\n\n```\n1  Do the laundry\n2  Phone mom\n3  Donate to the Busy project\n```\n\nDecide to do the top task later.\n\n```\nbusy drop; busy list\n```\n\nReturns:\n\n```\n1  Phone mom\n2  Donate to the Busy project\n3  Do the laundry\n```\n\nDecide to do a specific task now.\n\n```\nbusy pop 2; busy get\n```\n\nReturns:\n\n```\nDonate to the Busy project\n```\n\nPush that task to tomorrow.\n\n```\nbusy defer --to tomorrow\n```\n\nAdd all the tasks scheduled for today to the list.\n\n```\nbusy activate --today\n```\n\n### Core Commands\n\n- `add` adds a new item to the bottom of the queue. The item description may be included after the command or written to stdin (i.e. typed on the next line).\n- `get` gets the top item in the queue, referred to as the \"current\" item. There are no options.\n- `list` lists the items in the queue in order with their sequence numbers.\n- `pop` moves a task or set of items to the top of a queue.\n- `drop` moves a task or set of items to the bottom of a queue.\n- `delete` permanently removes a task or set of items from a queue. Deletion requires confirmation via input or the `--yes` option.\n- `manage` opens a text editor to edit items.\n\nThe `list`, `pop`, `drop`, `delete` and `manage` commands allow the designation of specific items.\n\nItem designation can be performed using sequence numbers or tags.\n\n### Sequence Numbers\n\nSequence numbers appear in the output from the `list` command. Note that the numbering starts with 1, and is not an ID -- the number of a item will change when the queue is modified. So always reference the most recent output from the `list` command.\n\nWhen used to designate items, a range of sequence numbers is separated by a hyphen, with no whitespace, and is inclusive. For example, `4-6` designates items 4, 5, and 6. A hyphen without a number after it includes all the items from that item to the end of the queue. A hyphen on its own indicates the last item in the queue.\n\nBelow are some examples of task designations by sequence number.\n\n`busy pop 5` pops item number 5\n\n`busy drop 3-7` drops items 3 through 7 (4 items)\n\n`busy list 3-` lists all the items from number 3 through the end of the list\n\n`busy delete 3 5 7 9` deletes only the items designated\n\n`busy defer -` defers the last task\n\n`busy manage -4` is an error! Use `busy manage 1-4` instead.\n\nItems will always be handled in the order they appear in the queue, regardless of the order the criteria are provided. So for example, if a `pop` command designates some items, they will be moved to the top of the queue in the order, relative to each other, they currently appear in the queue.\n\nThe sequence numbers in the `list` command output are from the queue itself. So the `list` command does not modify the sequence numbers, even when item designation is applied.\n\n\n### Tags\n\nItems can have tags, which are space-separated hashtags in the item description. An item can have no tags, one tag, or more than one tag. For example the following item description has the tag \"errands\":\n\n```\ngo to the supermarket #errands\n```\n\nHash tags may be used for item designation, in which case the hash itself (\"#\") is omitted from the command line. For example, the following command will move all the items with the `#errands` hash to the top of the queue.\n\n```\nbusy pop errands\n```\n\nWhitespace-separated item designation criteria are additive -- that is, a logical OR. For example, the following command will delete all the admin tasks, sales tasks, and tasks 3 and 4.\n\n```\nbusy delete admin sales 3 4\n```\n\nCommands that accept item designations support logical defaults, which are:\n\n| **Command** | **Default item(s)** |\n| ---         | ---              |\n| `list`      | All items        |\n| `pop`       | Last item        |\n| `drop`      | First item       |\n| `delete`    | First item       |\n| `manage`    | All items        |\n\n### Alternate Queues\n\nBusy will manage any number of queues, which are entirely separate ordered sets of items. For example, you might have a `shopping` queue for items to buy at the store, and a `movies` queue for films you'd like to watch. The default queue is called `tasks` and has special properties related to planning.\n\nTo designate an alternate queue, use the `--queue` option on the command.\n\n```\nbusy add \"Skimmed Milk\" --queue shopping\nbusy get --queue movies\n```\n\n### Managing Plans with the `defer` and `activate` commands\n\nThe default `tasks` queue supports several specific commands related to planning -- that is, scheduling tasks for the future. Planned tasks are kept in another special queue called `plans`.\n\nThere are two commands related to plan management.\n\n- `defer` removes a task or set of tasks from the `tasks` queue and schedules it or them to reappear at a future date in the `plans` queue.\n- `activate`removes a task or set of tasks from the `plans` queue and replaces it or them into the `tasks` queue.\n\nThe `defer` and `activate` commands accept item designations. The `defer` command deals with the `tasks` queue; its default is the top item in the `tasks` queue. The `activate` command deals with the `plans` queue; its default is all the items scheduled for the current date or earlier.\n\nPlanning is by date, not time, and is relative to the current date according to the system clock.\n\nIn the `defer` command, the date can be specified using the `--to` or `--for` option (they are interchangable). If the options are omitted, then the date can be provided as input.\n\nThe date may take any of the following forms:\n\n- A specific date in `YYYY-MM-DD` format, such as `2018-10-28`. Slashes are also acceptable, but the order is always year, then month, then day\n- A specific date without the year in `MM-DD` format, such as `7-4`, which will defer the item to that date in the future (even if it's in the next year)\n- A specific day of the month as a simple integer, such as `12`, which will defer the item to that day of the month, in either the current month or the next month\n- An integer, a space, and the word `day` or `days`, such as `4 days`, which will defer the item to that number of days from today\n- An integer without a space and the letter `d`, such as `4d`, which is a short form of `4 days`\n- The word `tomorrow`, which is also the default if no date is provided\n- The word `today`, which is a little odd but obvious\n\nAs an example, the following command will defer tasks 4, 5, and 6 from the `tasks` queue to the date 4 days from today, keeping them in the `plans` queue until that date.\n\n```\nbusy defer 4-6 --for 4 days\n```\n\nNote that the `plans` queue is keeping the task information (verbatim from the `tasks` queue) along with the date information (as an absolute date).\n\nTo pull tasks off the `plans` queue and put them back on the `tasks` queue, use the `activate` command. There are two ways to use the `activate` command:\n\n- With the `--today` option, which is the normal way, and activates all the tasks scheduled for today or earlier, bringing the `tasks` list up to date\n- With designated items from the `plans` queue; note that the `activate` command accepts item designation from the `plans` queue itself\n\nIf no items are designated, and there is no `--today` option, no tasks will be activated.\n\n\n## Followons and the `finish` command\n\nLike `defer`, the `finish` command only works on the `tasks` queue. It removes the designated Task (or the top task if none is designated) from the queue and adds it to the `done` queue, with today's date to indicate when it was completed.\n\nOptionally, a Task can have a Followon, which is another task to be added to the queue after the first task is finished. Followons are describe in a Task using an arrow notation. In the following example, the Task \"eat\" has a followon task \"drink\".\n\n```\neat --> drink\n```\n\nNote that the hyphens and whitespace are optional; really the marker that matters for delimiting a followon is the right angle bracket (\">\"). Also note that right angle bracket is not a valid character in a task description.\n\nWhen the `finish` command is executed on the task above, the \"eat\" task will be recorded as \"done\" and the \"drink\" task will be added to the bottom of the `tasks` queue.\n\nNote that followons can be chained. For example, when the `finish` command is run on the task illustrated below, a new task \"drink > be merry\" will be added to the queue. Only when that Task is finished will the \"be merry\" task itself appear on the queue.\n\n```\neat > drink > be merry\n```\n\n### Repeating tasks\n\nA special type of Followon is the Repeat. In this case, instead of adding the next task to the bottom of the queue, the entire current task -- including the Followon itself -- is entered into the `plans` queue at some point in the future. Repeats allow for easy management of repeating tasks. Some examples follow.\n\n`check email --> repeat in 1 day`\n\n`phone mom --> repeat on sunday`\n\n`balance the checkbook --> repeat on 6`\n\nThe exact syntax for a Repeat is the word \"repeat\" followed by either \"on\" or \"in\" and a relative date phrase -- the same phrases that work with the `defer` command.\n\nNote that the repetition itself only happens on the `finish` command. The completed task (i.e. \"check email\") is entered in the `done` queue and then the entire task (with the Repeat) is scheduled in the `plans` queue for the appropriate time in the future.\n\n### Projects and the `start` command\n\nAnother special feature of the `tasks` and `plans` queues is the `start` command, which deals with projects.\n\nIf a task has tags, the first tag is considered to be its \"project\" for the purposes of the `start` command.\n\nThe `start` command is used to start work on a project. If an argument is passed to the command, that's the chosen project. Otherwise the chosen project is the project of the current task (the top item in the `tasks` queue). The command basically combines steps:\n\n- Calls `activate --today` so the active task list is up-to-date\n- Calls `manage` on the project, to edit the list of tasks for the project\n- Calls `pop` on the project, so its tasks are at the top of the list\n\n### Details of the `manage` command\n\nThe `manage` command launches the user's default text editor to directly edit a queue or part of a queue.\n\nThe definition of the \"default text editor\" depends on the OS and configuration but here's the logic:\n\n1. Try the EDITOR environment variable\n1. If that doesn't exist, try the `sensible-editor` command (Ubuntu)\n1. If that doesn't exist, try the `open -W` command (OSX)\n\nThe default use of `manage` will edit the entire queue.\n\n```\nbusy manage --queue movies\n```\n\nBut it's also possible to designate tasks to be managed. The `manage` command does its best to replace the edited items in place in the list order. So if you `manage` the current project (in which all the tasks are at the top), then the edited tasks will still appear at the top. Even if you add tasks, they will be inserted after the last task in the managed set, not at the end of the list. But all the tasks brought up in the editor will be managed. So if you remove a task in the editor, it will be deleted and the others will be moved up to take its place.\n\n### Data storage\n\nBusy keeps the queues in plain text files, so if the tool doesn't do something you want, you may edit the files. The files are in a directory together, referred to as the \"root\". Each file is the name of the queue with a `.txt` extension. If a required file is missing, it will be created automatically. So typically, the root includes `tasks.txt`, `plans.txt`, and any number of custom queue files.\n\nTechnically, they are pipe-delimited data files, though `tasks.txt` only has one field (description); `plans.txt` has only two fields (date and description), and there is no support for managing separate fields in the Busy tool itself.\n\nThe root is designated in one of the following ways, which are tried in order.\n\n- The `--root` option on the command\n- The `BUSY_ROOT` environment variable, if no `--root` option is provided\n- A directory at `~/.busy`, which will be generated as needed if no `--root` option or `BUSY_ROOT` environment variable are provided,\n\nNote that the `--root` option must come after `busy` but command-specific options (`--yes`, `--to`, `--for`, `--queue`, and `--today`) must come after commands.\n\nThe following example shows the `--root` option with command-specific options on the same command line.\n\n```\nbusy --root ~/.config/busy activate --today\n```\n\nNote that Busy does not support concurrency in any form. If two commands are executing at the same time, they may overwrite each other. Overwriting is especially risky with the `manage` command, which keeps the user's editor open until they close it.\n\nThe format is designed to be simple (i.e. non-default queues are really just lists of items) but not idiot-proof. Experimentation might result in unintended consequences.\n\n## Usage with Slack and Dropbox\n\nWe are developing a Slack slash command to access Busy which requires Dropbox integration. This is a work in progress. At the moment, you have to configure the slash command yourself, and it only works when your root is in Dropbox. Also the only command that's working at this moment is the `get` command to get the current task.\n\n### Using Busy in Slack\n\nOnce it's all configured right, it's easy to use! Just type:\n\n```\n/busy\n```\n\n... and Busy will tell you what to work on.\n\n### Configuring Busy for use in Slack\n\nThe steps below assume you're already using Busy locally\n\n1. Install Dropbox (if you don't already have it), and move your Busy root to ~/Dropbox/Apps/Busy\n1. Create an AWS account (if you don't already have it) and sign into the AWS console\n1. Install the AWS CLI (if you don't already have it)\n1. Create an AWS profile called `lambda-deploy` with the ability to deploy to Lambda\n1. Create a Lambda function called `busy`\n1. Add an environment variable to the Lambda function called `DROPBOX_TOKEN` with your Dropbox token (comes from the Dropbox web UI)\n1. Create a Slack workspace (if you don't already have one) and create a Slack app called `busy` with a slash command\n1. Add an environment variable to the Lambda called `SLACK_TOKEN` and enter the token from your slash command\n1. Set the Lambda function to run `lambda.lambda_handler`\n1. Create an API Gateway trigger for the Lambda function with \"Open\" access, and copy the full URL into the Slack slash command\n1. Clone the project from GitLab (if you haven't already) and run `make publish-lambda` from the root of the project\n\n## Development\n\nAlthough it requires Python 3.6.5 or higher, Busy is designed to function with the Python standard library without any additional pip modules.\n\nHowever, we use Pip packages in the devops pipeline, so:\n\n```\nsudo pip3 install coverage pycodestyle twine\n```\n\nThen to run the test suite:\n\n```\nmake test\n```\n\nOr to run test coverage:\n\n```\nmake cover\n```\n\nAnd to check style:\n\n```\nmake style\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://gitlab.com/fpotter/tools/busy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "busy", "package_url": "https://pypi.org/project/busy/", "platform": "", "project_url": "https://pypi.org/project/busy/", "project_urls": {"Homepage": "http://gitlab.com/fpotter/tools/busy"}, "release_url": "https://pypi.org/project/busy/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Command-line task and plan management tool", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BUSY</h1>\n<p>Task and plan management tool, for use from the terminal prompt on Linux and MacOS systems.</p>\n<h2>Installation</h2>\n<p>Requires Python 3.6.5 or later.</p>\n<pre><code>pip3 install busy\n</code></pre>\n<h2>Getting started</h2>\n<p>Add some tasks to your queue.</p>\n<pre><code>busy add \"Take a shower\"\nbusy add \"Do the laundry\"\nbusy add \"Phone mom\"\nbusy add \"Donate to the Busy project\"\n</code></pre>\n<p>Find out what to do next:</p>\n<pre><code>busy get\n</code></pre>\n<p>Returns:</p>\n<pre><code>Take a shower\n</code></pre>\n<p>When you're done, mark it off to find the next task.</p>\n<pre><code>busy finish; busy get\n</code></pre>\n<p>Returns:</p>\n<pre><code>Do the laundry\n</code></pre>\n<p>See the whole queue, with sequence numbers.</p>\n<pre><code>busy list\n</code></pre>\n<p>Returns:</p>\n<pre><code>1  Do the laundry\n2  Phone mom\n3  Donate to the Busy project\n</code></pre>\n<p>Decide to do the top task later.</p>\n<pre><code>busy drop; busy list\n</code></pre>\n<p>Returns:</p>\n<pre><code>1  Phone mom\n2  Donate to the Busy project\n3  Do the laundry\n</code></pre>\n<p>Decide to do a specific task now.</p>\n<pre><code>busy pop 2; busy get\n</code></pre>\n<p>Returns:</p>\n<pre><code>Donate to the Busy project\n</code></pre>\n<p>Push that task to tomorrow.</p>\n<pre><code>busy defer --to tomorrow\n</code></pre>\n<p>Add all the tasks scheduled for today to the list.</p>\n<pre><code>busy activate --today\n</code></pre>\n<h3>Core Commands</h3>\n<ul>\n<li><code>add</code> adds a new item to the bottom of the queue. The item description may be included after the command or written to stdin (i.e. typed on the next line).</li>\n<li><code>get</code> gets the top item in the queue, referred to as the \"current\" item. There are no options.</li>\n<li><code>list</code> lists the items in the queue in order with their sequence numbers.</li>\n<li><code>pop</code> moves a task or set of items to the top of a queue.</li>\n<li><code>drop</code> moves a task or set of items to the bottom of a queue.</li>\n<li><code>delete</code> permanently removes a task or set of items from a queue. Deletion requires confirmation via input or the <code>--yes</code> option.</li>\n<li><code>manage</code> opens a text editor to edit items.</li>\n</ul>\n<p>The <code>list</code>, <code>pop</code>, <code>drop</code>, <code>delete</code> and <code>manage</code> commands allow the designation of specific items.</p>\n<p>Item designation can be performed using sequence numbers or tags.</p>\n<h3>Sequence Numbers</h3>\n<p>Sequence numbers appear in the output from the <code>list</code> command. Note that the numbering starts with 1, and is not an ID -- the number of a item will change when the queue is modified. So always reference the most recent output from the <code>list</code> command.</p>\n<p>When used to designate items, a range of sequence numbers is separated by a hyphen, with no whitespace, and is inclusive. For example, <code>4-6</code> designates items 4, 5, and 6. A hyphen without a number after it includes all the items from that item to the end of the queue. A hyphen on its own indicates the last item in the queue.</p>\n<p>Below are some examples of task designations by sequence number.</p>\n<p><code>busy pop 5</code> pops item number 5</p>\n<p><code>busy drop 3-7</code> drops items 3 through 7 (4 items)</p>\n<p><code>busy list 3-</code> lists all the items from number 3 through the end of the list</p>\n<p><code>busy delete 3 5 7 9</code> deletes only the items designated</p>\n<p><code>busy defer -</code> defers the last task</p>\n<p><code>busy manage -4</code> is an error! Use <code>busy manage 1-4</code> instead.</p>\n<p>Items will always be handled in the order they appear in the queue, regardless of the order the criteria are provided. So for example, if a <code>pop</code> command designates some items, they will be moved to the top of the queue in the order, relative to each other, they currently appear in the queue.</p>\n<p>The sequence numbers in the <code>list</code> command output are from the queue itself. So the <code>list</code> command does not modify the sequence numbers, even when item designation is applied.</p>\n<h3>Tags</h3>\n<p>Items can have tags, which are space-separated hashtags in the item description. An item can have no tags, one tag, or more than one tag. For example the following item description has the tag \"errands\":</p>\n<pre><code>go to the supermarket #errands\n</code></pre>\n<p>Hash tags may be used for item designation, in which case the hash itself (\"#\") is omitted from the command line. For example, the following command will move all the items with the <code>#errands</code> hash to the top of the queue.</p>\n<pre><code>busy pop errands\n</code></pre>\n<p>Whitespace-separated item designation criteria are additive -- that is, a logical OR. For example, the following command will delete all the admin tasks, sales tasks, and tasks 3 and 4.</p>\n<pre><code>busy delete admin sales 3 4\n</code></pre>\n<p>Commands that accept item designations support logical defaults, which are:</p>\n<table>\n<thead>\n<tr>\n<th><strong>Command</strong></th>\n<th><strong>Default item(s)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>list</code></td>\n<td>All items</td>\n</tr>\n<tr>\n<td><code>pop</code></td>\n<td>Last item</td>\n</tr>\n<tr>\n<td><code>drop</code></td>\n<td>First item</td>\n</tr>\n<tr>\n<td><code>delete</code></td>\n<td>First item</td>\n</tr>\n<tr>\n<td><code>manage</code></td>\n<td>All items</td>\n</tr></tbody></table>\n<h3>Alternate Queues</h3>\n<p>Busy will manage any number of queues, which are entirely separate ordered sets of items. For example, you might have a <code>shopping</code> queue for items to buy at the store, and a <code>movies</code> queue for films you'd like to watch. The default queue is called <code>tasks</code> and has special properties related to planning.</p>\n<p>To designate an alternate queue, use the <code>--queue</code> option on the command.</p>\n<pre><code>busy add \"Skimmed Milk\" --queue shopping\nbusy get --queue movies\n</code></pre>\n<h3>Managing Plans with the <code>defer</code> and <code>activate</code> commands</h3>\n<p>The default <code>tasks</code> queue supports several specific commands related to planning -- that is, scheduling tasks for the future. Planned tasks are kept in another special queue called <code>plans</code>.</p>\n<p>There are two commands related to plan management.</p>\n<ul>\n<li><code>defer</code> removes a task or set of tasks from the <code>tasks</code> queue and schedules it or them to reappear at a future date in the <code>plans</code> queue.</li>\n<li><code>activate</code>removes a task or set of tasks from the <code>plans</code> queue and replaces it or them into the <code>tasks</code> queue.</li>\n</ul>\n<p>The <code>defer</code> and <code>activate</code> commands accept item designations. The <code>defer</code> command deals with the <code>tasks</code> queue; its default is the top item in the <code>tasks</code> queue. The <code>activate</code> command deals with the <code>plans</code> queue; its default is all the items scheduled for the current date or earlier.</p>\n<p>Planning is by date, not time, and is relative to the current date according to the system clock.</p>\n<p>In the <code>defer</code> command, the date can be specified using the <code>--to</code> or <code>--for</code> option (they are interchangable). If the options are omitted, then the date can be provided as input.</p>\n<p>The date may take any of the following forms:</p>\n<ul>\n<li>A specific date in <code>YYYY-MM-DD</code> format, such as <code>2018-10-28</code>. Slashes are also acceptable, but the order is always year, then month, then day</li>\n<li>A specific date without the year in <code>MM-DD</code> format, such as <code>7-4</code>, which will defer the item to that date in the future (even if it's in the next year)</li>\n<li>A specific day of the month as a simple integer, such as <code>12</code>, which will defer the item to that day of the month, in either the current month or the next month</li>\n<li>An integer, a space, and the word <code>day</code> or <code>days</code>, such as <code>4 days</code>, which will defer the item to that number of days from today</li>\n<li>An integer without a space and the letter <code>d</code>, such as <code>4d</code>, which is a short form of <code>4 days</code></li>\n<li>The word <code>tomorrow</code>, which is also the default if no date is provided</li>\n<li>The word <code>today</code>, which is a little odd but obvious</li>\n</ul>\n<p>As an example, the following command will defer tasks 4, 5, and 6 from the <code>tasks</code> queue to the date 4 days from today, keeping them in the <code>plans</code> queue until that date.</p>\n<pre><code>busy defer 4-6 --for 4 days\n</code></pre>\n<p>Note that the <code>plans</code> queue is keeping the task information (verbatim from the <code>tasks</code> queue) along with the date information (as an absolute date).</p>\n<p>To pull tasks off the <code>plans</code> queue and put them back on the <code>tasks</code> queue, use the <code>activate</code> command. There are two ways to use the <code>activate</code> command:</p>\n<ul>\n<li>With the <code>--today</code> option, which is the normal way, and activates all the tasks scheduled for today or earlier, bringing the <code>tasks</code> list up to date</li>\n<li>With designated items from the <code>plans</code> queue; note that the <code>activate</code> command accepts item designation from the <code>plans</code> queue itself</li>\n</ul>\n<p>If no items are designated, and there is no <code>--today</code> option, no tasks will be activated.</p>\n<h2>Followons and the <code>finish</code> command</h2>\n<p>Like <code>defer</code>, the <code>finish</code> command only works on the <code>tasks</code> queue. It removes the designated Task (or the top task if none is designated) from the queue and adds it to the <code>done</code> queue, with today's date to indicate when it was completed.</p>\n<p>Optionally, a Task can have a Followon, which is another task to be added to the queue after the first task is finished. Followons are describe in a Task using an arrow notation. In the following example, the Task \"eat\" has a followon task \"drink\".</p>\n<pre><code>eat --&gt; drink\n</code></pre>\n<p>Note that the hyphens and whitespace are optional; really the marker that matters for delimiting a followon is the right angle bracket (\"&gt;\"). Also note that right angle bracket is not a valid character in a task description.</p>\n<p>When the <code>finish</code> command is executed on the task above, the \"eat\" task will be recorded as \"done\" and the \"drink\" task will be added to the bottom of the <code>tasks</code> queue.</p>\n<p>Note that followons can be chained. For example, when the <code>finish</code> command is run on the task illustrated below, a new task \"drink &gt; be merry\" will be added to the queue. Only when that Task is finished will the \"be merry\" task itself appear on the queue.</p>\n<pre><code>eat &gt; drink &gt; be merry\n</code></pre>\n<h3>Repeating tasks</h3>\n<p>A special type of Followon is the Repeat. In this case, instead of adding the next task to the bottom of the queue, the entire current task -- including the Followon itself -- is entered into the <code>plans</code> queue at some point in the future. Repeats allow for easy management of repeating tasks. Some examples follow.</p>\n<p><code>check email --&gt; repeat in 1 day</code></p>\n<p><code>phone mom --&gt; repeat on sunday</code></p>\n<p><code>balance the checkbook --&gt; repeat on 6</code></p>\n<p>The exact syntax for a Repeat is the word \"repeat\" followed by either \"on\" or \"in\" and a relative date phrase -- the same phrases that work with the <code>defer</code> command.</p>\n<p>Note that the repetition itself only happens on the <code>finish</code> command. The completed task (i.e. \"check email\") is entered in the <code>done</code> queue and then the entire task (with the Repeat) is scheduled in the <code>plans</code> queue for the appropriate time in the future.</p>\n<h3>Projects and the <code>start</code> command</h3>\n<p>Another special feature of the <code>tasks</code> and <code>plans</code> queues is the <code>start</code> command, which deals with projects.</p>\n<p>If a task has tags, the first tag is considered to be its \"project\" for the purposes of the <code>start</code> command.</p>\n<p>The <code>start</code> command is used to start work on a project. If an argument is passed to the command, that's the chosen project. Otherwise the chosen project is the project of the current task (the top item in the <code>tasks</code> queue). The command basically combines steps:</p>\n<ul>\n<li>Calls <code>activate --today</code> so the active task list is up-to-date</li>\n<li>Calls <code>manage</code> on the project, to edit the list of tasks for the project</li>\n<li>Calls <code>pop</code> on the project, so its tasks are at the top of the list</li>\n</ul>\n<h3>Details of the <code>manage</code> command</h3>\n<p>The <code>manage</code> command launches the user's default text editor to directly edit a queue or part of a queue.</p>\n<p>The definition of the \"default text editor\" depends on the OS and configuration but here's the logic:</p>\n<ol>\n<li>Try the EDITOR environment variable</li>\n<li>If that doesn't exist, try the <code>sensible-editor</code> command (Ubuntu)</li>\n<li>If that doesn't exist, try the <code>open -W</code> command (OSX)</li>\n</ol>\n<p>The default use of <code>manage</code> will edit the entire queue.</p>\n<pre><code>busy manage --queue movies\n</code></pre>\n<p>But it's also possible to designate tasks to be managed. The <code>manage</code> command does its best to replace the edited items in place in the list order. So if you <code>manage</code> the current project (in which all the tasks are at the top), then the edited tasks will still appear at the top. Even if you add tasks, they will be inserted after the last task in the managed set, not at the end of the list. But all the tasks brought up in the editor will be managed. So if you remove a task in the editor, it will be deleted and the others will be moved up to take its place.</p>\n<h3>Data storage</h3>\n<p>Busy keeps the queues in plain text files, so if the tool doesn't do something you want, you may edit the files. The files are in a directory together, referred to as the \"root\". Each file is the name of the queue with a <code>.txt</code> extension. If a required file is missing, it will be created automatically. So typically, the root includes <code>tasks.txt</code>, <code>plans.txt</code>, and any number of custom queue files.</p>\n<p>Technically, they are pipe-delimited data files, though <code>tasks.txt</code> only has one field (description); <code>plans.txt</code> has only two fields (date and description), and there is no support for managing separate fields in the Busy tool itself.</p>\n<p>The root is designated in one of the following ways, which are tried in order.</p>\n<ul>\n<li>The <code>--root</code> option on the command</li>\n<li>The <code>BUSY_ROOT</code> environment variable, if no <code>--root</code> option is provided</li>\n<li>A directory at <code>~/.busy</code>, which will be generated as needed if no <code>--root</code> option or <code>BUSY_ROOT</code> environment variable are provided,</li>\n</ul>\n<p>Note that the <code>--root</code> option must come after <code>busy</code> but command-specific options (<code>--yes</code>, <code>--to</code>, <code>--for</code>, <code>--queue</code>, and <code>--today</code>) must come after commands.</p>\n<p>The following example shows the <code>--root</code> option with command-specific options on the same command line.</p>\n<pre><code>busy --root ~/.config/busy activate --today\n</code></pre>\n<p>Note that Busy does not support concurrency in any form. If two commands are executing at the same time, they may overwrite each other. Overwriting is especially risky with the <code>manage</code> command, which keeps the user's editor open until they close it.</p>\n<p>The format is designed to be simple (i.e. non-default queues are really just lists of items) but not idiot-proof. Experimentation might result in unintended consequences.</p>\n<h2>Usage with Slack and Dropbox</h2>\n<p>We are developing a Slack slash command to access Busy which requires Dropbox integration. This is a work in progress. At the moment, you have to configure the slash command yourself, and it only works when your root is in Dropbox. Also the only command that's working at this moment is the <code>get</code> command to get the current task.</p>\n<h3>Using Busy in Slack</h3>\n<p>Once it's all configured right, it's easy to use! Just type:</p>\n<pre><code>/busy\n</code></pre>\n<p>... and Busy will tell you what to work on.</p>\n<h3>Configuring Busy for use in Slack</h3>\n<p>The steps below assume you're already using Busy locally</p>\n<ol>\n<li>Install Dropbox (if you don't already have it), and move your Busy root to ~/Dropbox/Apps/Busy</li>\n<li>Create an AWS account (if you don't already have it) and sign into the AWS console</li>\n<li>Install the AWS CLI (if you don't already have it)</li>\n<li>Create an AWS profile called <code>lambda-deploy</code> with the ability to deploy to Lambda</li>\n<li>Create a Lambda function called <code>busy</code></li>\n<li>Add an environment variable to the Lambda function called <code>DROPBOX_TOKEN</code> with your Dropbox token (comes from the Dropbox web UI)</li>\n<li>Create a Slack workspace (if you don't already have one) and create a Slack app called <code>busy</code> with a slash command</li>\n<li>Add an environment variable to the Lambda called <code>SLACK_TOKEN</code> and enter the token from your slash command</li>\n<li>Set the Lambda function to run <code>lambda.lambda_handler</code></li>\n<li>Create an API Gateway trigger for the Lambda function with \"Open\" access, and copy the full URL into the Slack slash command</li>\n<li>Clone the project from GitLab (if you haven't already) and run <code>make publish-lambda</code> from the root of the project</li>\n</ol>\n<h2>Development</h2>\n<p>Although it requires Python 3.6.5 or higher, Busy is designed to function with the Python standard library without any additional pip modules.</p>\n<p>However, we use Pip packages in the devops pipeline, so:</p>\n<pre><code>sudo pip3 install coverage pycodestyle twine\n</code></pre>\n<p>Then to run the test suite:</p>\n<pre><code>make test\n</code></pre>\n<p>Or to run test coverage:</p>\n<pre><code>make cover\n</code></pre>\n<p>And to check style:</p>\n<pre><code>make style\n</code></pre>\n\n          </div>"}, "last_serial": 5903334, "releases": {"0.4.4": [{"comment_text": "", "digests": {"md5": "8849f34dc0b9a463ddbae42e9d7c4113", "sha256": "839c0e9a72e346a6bb89eaf83b42acb679e001fec2902331ade5fb64585ebae9"}, "downloads": -1, "filename": "Busy-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8849f34dc0b9a463ddbae42e9d7c4113", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20840, "upload_time": "2018-12-17T16:15:46", "upload_time_iso_8601": "2018-12-17T16:15:46.776599Z", "url": "https://files.pythonhosted.org/packages/bc/a3/1adb517719ebfc50da49f66b2aa80b4801f5bde15f4fd33d0f06537fe610/Busy-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d3d8d5c11a15c486c0b141093c469dc", "sha256": "9396660f0b7d4a2ae2b4d75c827329fde94f5ce0092404c46b31e12d011fc842"}, "downloads": -1, "filename": "Busy-0.4.4.tar.gz", "has_sig": false, "md5_digest": "9d3d8d5c11a15c486c0b141093c469dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12036, "upload_time": "2018-12-17T16:15:49", "upload_time_iso_8601": "2018-12-17T16:15:49.869786Z", "url": "https://files.pythonhosted.org/packages/35/78/ebf91c1dffce1e3dddbcc7c9f3e273c347376bf97013c52ac381dbd75c91/Busy-0.4.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7a76786760157824b7a9548104a6e2bc", "sha256": "6819d8086b13f12c5aa170ee9d5626801fd8ca6f23021bc06c733e4f4ff7de43"}, "downloads": -1, "filename": "busy-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7a76786760157824b7a9548104a6e2bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20839, "upload_time": "2018-12-17T16:19:08", "upload_time_iso_8601": "2018-12-17T16:19:08.900208Z", "url": "https://files.pythonhosted.org/packages/5a/6b/d8ec6f1f2e072618f966a998861552acf1622b8097b5cfca703e6a6754c2/busy-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b33101ee010c6d22b331eb7fc461e417", "sha256": "0f2d57817a36d05e0fd805e322cd3070cf6f54e96223d47790c4b557ba7762ea"}, "downloads": -1, "filename": "busy-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b33101ee010c6d22b331eb7fc461e417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14525, "upload_time": "2018-12-17T16:19:11", "upload_time_iso_8601": "2018-12-17T16:19:11.841217Z", "url": "https://files.pythonhosted.org/packages/09/e6/95caa57f092c7f59d605bc4c70af002c65a9457a5b7a20a129642443155d/busy-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "a294c8d04b037ca8758e08535a368fbd", "sha256": "9fd47a2d68a7e437d408a67055ac5eb3c8ba9d057f32d0173b9a1b0837f7cc70"}, "downloads": -1, "filename": "busy-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a294c8d04b037ca8758e08535a368fbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20915, "upload_time": "2018-12-18T15:06:21", "upload_time_iso_8601": "2018-12-18T15:06:21.886606Z", "url": "https://files.pythonhosted.org/packages/46/b5/d0bc5215c6fed03d78d3bb682a4f06e14f2e28981e7eb17b4347a1b980a5/busy-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf00b7f015de4a7b7ec857b2a72cce41", "sha256": "b8697324d7e70cc02be6c3a431f39d7b9bcba8427eaad92b8e6337ef8ed6d9d0"}, "downloads": -1, "filename": "busy-0.5.1.tar.gz", "has_sig": false, "md5_digest": "bf00b7f015de4a7b7ec857b2a72cce41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14622, "upload_time": "2018-12-18T15:06:26", "upload_time_iso_8601": "2018-12-18T15:06:26.400196Z", "url": "https://files.pythonhosted.org/packages/a8/16/c735dbd778cd1b80858faffb363a422054646ca6092990a492b0e203a411/busy-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "0afb2fb2d48fa77cae1d6f375d999dcb", "sha256": "e9e2209b46d877b3514bf009810c28cf223df0bba4ece918b61ba87d85f4668f"}, "downloads": -1, "filename": "busy-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0afb2fb2d48fa77cae1d6f375d999dcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20977, "upload_time": "2018-12-18T15:34:37", "upload_time_iso_8601": "2018-12-18T15:34:37.728268Z", "url": "https://files.pythonhosted.org/packages/e7/65/423f08ea340b358c4e09dc820ef891e2bcbb72e5de0ac9ab4154dc252a9e/busy-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5fea7919bf55b898dc85c0817494ab4e", "sha256": "0b2e5caa1e8e6597d051da9a04bd0314ea701a321526048abba6be983285d4cb"}, "downloads": -1, "filename": "busy-0.5.2.tar.gz", "has_sig": false, "md5_digest": "5fea7919bf55b898dc85c0817494ab4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14691, "upload_time": "2018-12-18T15:34:39", "upload_time_iso_8601": "2018-12-18T15:34:39.320461Z", "url": "https://files.pythonhosted.org/packages/f2/c6/3ea54a8e1411a946eab21776e12e66dc8873fc4c963ecf21814c9f99fac7/busy-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "c02b4b4a81a73633c0e5870dfd8f81eb", "sha256": "4a0ee4b540fb666ae96d38474d107a451dd5f7938720c864308880a2c8d7381c"}, "downloads": -1, "filename": "busy-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c02b4b4a81a73633c0e5870dfd8f81eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21505, "upload_time": "2018-12-20T23:46:55", "upload_time_iso_8601": "2018-12-20T23:46:55.810648Z", "url": "https://files.pythonhosted.org/packages/93/a6/d685b57024c51407218b50f546599bea7dfeff363f6db41342079c8962f0/busy-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfd8c13407bbbd0453139aa1103d0de2", "sha256": "bcb186f6013d7f5a7c642304d0c68cb874f468dfe5e672b54623c7a150d758de"}, "downloads": -1, "filename": "busy-0.5.3.tar.gz", "has_sig": false, "md5_digest": "dfd8c13407bbbd0453139aa1103d0de2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14953, "upload_time": "2018-12-20T23:46:57", "upload_time_iso_8601": "2018-12-20T23:46:57.730334Z", "url": "https://files.pythonhosted.org/packages/2b/47/fdd0116bbd91b9130e4ef29f20159fabf5542654bc81537a831809b60bb6/busy-0.5.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "60204f06fd3eec4bc639489a01e4f429", "sha256": "b1fc8e4264ae09a828adc11a8aa2ea23936a36eb1d25218515d4b3afb66a9fef"}, "downloads": -1, "filename": "busy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "60204f06fd3eec4bc639489a01e4f429", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28518, "upload_time": "2018-12-28T21:57:05", "upload_time_iso_8601": "2018-12-28T21:57:05.844925Z", "url": "https://files.pythonhosted.org/packages/04/2d/9f1d4770b7d080a4bd6491ba717e1938eb49f74fc40b8b122d642dd65d82/busy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46618efb11450d0ca583ec8f61ec31b8", "sha256": "be94f1fa8b02d3efde43510f6b39bf35c494e5db40ce1ccc7c87d0a9755554f0"}, "downloads": -1, "filename": "busy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46618efb11450d0ca583ec8f61ec31b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19112, "upload_time": "2018-12-28T21:57:07", "upload_time_iso_8601": "2018-12-28T21:57:07.770399Z", "url": "https://files.pythonhosted.org/packages/de/e0/227005708bc85d7685e656f3b57ef8c2bbee4c26c10c9149033eefa7ea0a/busy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e3fd8a4a51f7fa3f8cc47d1feda8caf5", "sha256": "f3527eafd8c688e26f96abe9438a707db9addadbde766d3bd0fad0839ef32a7d"}, "downloads": -1, "filename": "busy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e3fd8a4a51f7fa3f8cc47d1feda8caf5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28531, "upload_time": "2018-12-30T13:59:57", "upload_time_iso_8601": "2018-12-30T13:59:57.829925Z", "url": "https://files.pythonhosted.org/packages/ac/2a/458eced2dc3501a8cddcb48509d92cd0ef78ab5b93b52ba436996714211b/busy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9e9fe06ec0c17935bc663d872aa1f15", "sha256": "ddc03230d82594f970bb7289dc3bd52087e31cae2ad21e932c42127301aa7efb"}, "downloads": -1, "filename": "busy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c9e9fe06ec0c17935bc663d872aa1f15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19112, "upload_time": "2018-12-30T13:59:59", "upload_time_iso_8601": "2018-12-30T13:59:59.698786Z", "url": "https://files.pythonhosted.org/packages/09/23/3831fdefe64e57234a560094f39667449e0a242744386ef9e068b6099fef/busy-1.0.1.tar.gz", "yanked": false}], "1.2.11": [{"comment_text": "", "digests": {"md5": "511013e09b69fc99fd59d18b548c6ec9", "sha256": "b48c2b5fdfd2330bfb4429e59b09f5515a5412394c5910272eaf16e9ba31d41b"}, "downloads": -1, "filename": "busy-1.2.11-py3-none-any.whl", "has_sig": false, "md5_digest": "511013e09b69fc99fd59d18b548c6ec9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30552, "upload_time": "2019-01-23T19:57:40", "upload_time_iso_8601": "2019-01-23T19:57:40.520560Z", "url": "https://files.pythonhosted.org/packages/7f/17/4d758fcb8142cae706954c93c87ef81c0f54200833bbe8e49eaa142191ad/busy-1.2.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69eddac41b81992ee1973cc6423db1be", "sha256": "36a025a1f953ba43f8c6c756fbe5f4e300ea7082a792ff5760724110c1fc2608"}, "downloads": -1, "filename": "busy-1.2.11.tar.gz", "has_sig": false, "md5_digest": "69eddac41b81992ee1973cc6423db1be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22938, "upload_time": "2019-01-23T19:57:42", "upload_time_iso_8601": "2019-01-23T19:57:42.026357Z", "url": "https://files.pythonhosted.org/packages/af/09/d0dd0df596839efdfcc8ddc8c1bd3d5e38b81c0c5e5c230a3a55b5d93519/busy-1.2.11.tar.gz", "yanked": false}], "1.2.12": [{"comment_text": "", "digests": {"md5": "b1d6cf124b44d8bc90a4bb20ea0ba3b2", "sha256": "f3b208fb7d1446b0f0900ddf21cc36dbab3839b6cec753e70bcda2fe75f0f77d"}, "downloads": -1, "filename": "busy-1.2.12-py3-none-any.whl", "has_sig": false, "md5_digest": "b1d6cf124b44d8bc90a4bb20ea0ba3b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30554, "upload_time": "2019-01-23T20:02:50", "upload_time_iso_8601": "2019-01-23T20:02:50.813699Z", "url": "https://files.pythonhosted.org/packages/89/c1/82cdb9d05c18aa9bba211ff3f43f3bd6673bfe50ce4b69266cc74e019fcb/busy-1.2.12-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "085df48cbd112a2348925b5d978d39ff", "sha256": "60b54025bcd9568cd92fbfdd83cf6c0108d84284d48d6d123e3b22b8bcd22113"}, "downloads": -1, "filename": "busy-1.2.12.tar.gz", "has_sig": false, "md5_digest": "085df48cbd112a2348925b5d978d39ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22907, "upload_time": "2019-01-23T20:02:52", "upload_time_iso_8601": "2019-01-23T20:02:52.096082Z", "url": "https://files.pythonhosted.org/packages/0b/cc/5d369fbed35cea241346501a00e6e071df56d35a8c0f590e17370decfdbf/busy-1.2.12.tar.gz", "yanked": false}], "1.2.13": [{"comment_text": "", "digests": {"md5": "8c2de909b95581459db97d3544ccea46", "sha256": "04b7006b674c9d8f16b6a34be0284ecd8d6600d5c3e1367c6425d4dd91f729bd"}, "downloads": -1, "filename": "busy-1.2.13-py3-none-any.whl", "has_sig": false, "md5_digest": "8c2de909b95581459db97d3544ccea46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30664, "upload_time": "2019-01-27T19:33:57", "upload_time_iso_8601": "2019-01-27T19:33:57.221412Z", "url": "https://files.pythonhosted.org/packages/ad/e7/658b8e632fe296db4d4d1e256a30e4d40e56b2ca10a409c9406a44386e55/busy-1.2.13-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb1e9f475239982915db98539afc3feb", "sha256": "afd834301acfa86557119e6be128aff145f7b05a3189c90c7afc95685fc7557d"}, "downloads": -1, "filename": "busy-1.2.13.tar.gz", "has_sig": false, "md5_digest": "cb1e9f475239982915db98539afc3feb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23027, "upload_time": "2019-01-27T19:33:58", "upload_time_iso_8601": "2019-01-27T19:33:58.982748Z", "url": "https://files.pythonhosted.org/packages/83/37/4ac5956ebab1770ce268644e73125f8d5669265a6b847ab63731467611da/busy-1.2.13.tar.gz", "yanked": false}], "1.2.14": [{"comment_text": "", "digests": {"md5": "fb126d52d8ae9b806783f68c9f13dd7a", "sha256": "a3fb8db4f39c167eeed92b1a21af650e0aace0d3b88150993b88118c21fc7498"}, "downloads": -1, "filename": "busy-1.2.14-py3-none-any.whl", "has_sig": false, "md5_digest": "fb126d52d8ae9b806783f68c9f13dd7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30661, "upload_time": "2019-02-09T01:48:00", "upload_time_iso_8601": "2019-02-09T01:48:00.482125Z", "url": "https://files.pythonhosted.org/packages/b6/51/a3a03f99961761706074f489885fe26fadea78386f266f33a4384c68b456/busy-1.2.14-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e25698514e57c422f8c923fd6cb6d2", "sha256": "7c701a689aced74ccc6e3784f5d09370ca07d9454f825d858018622225405bb1"}, "downloads": -1, "filename": "busy-1.2.14.tar.gz", "has_sig": false, "md5_digest": "16e25698514e57c422f8c923fd6cb6d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23029, "upload_time": "2019-02-09T01:48:01", "upload_time_iso_8601": "2019-02-09T01:48:01.735176Z", "url": "https://files.pythonhosted.org/packages/c1/bd/2d69ff0011e272b08b6ee71dad3ed9b53841b61e9f54df4ea7a5690e4627/busy-1.2.14.tar.gz", "yanked": false}], "1.2.15": [{"comment_text": "", "digests": {"md5": "c33507f53763eca33d77c29e420aaf11", "sha256": "23b3904de84eb792056542a1f2a9b991a0380f7b121d5996d7217c4ab3ea661a"}, "downloads": -1, "filename": "busy-1.2.15-py3-none-any.whl", "has_sig": false, "md5_digest": "c33507f53763eca33d77c29e420aaf11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30677, "upload_time": "2019-02-10T00:27:25", "upload_time_iso_8601": "2019-02-10T00:27:25.614770Z", "url": "https://files.pythonhosted.org/packages/ea/46/e4fdad3e2695a908e825af0e1fd883796a299a3144c23d502440e22f574b/busy-1.2.15-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dafd8f7092a18f0f2d541abd7a6b470e", "sha256": "b47dbb9058e373a680fe91371355d69af87c8c28b7c4fe5678062011d98272c5"}, "downloads": -1, "filename": "busy-1.2.15.tar.gz", "has_sig": false, "md5_digest": "dafd8f7092a18f0f2d541abd7a6b470e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23081, "upload_time": "2019-02-10T00:27:26", "upload_time_iso_8601": "2019-02-10T00:27:26.954862Z", "url": "https://files.pythonhosted.org/packages/31/97/a51f9511d66c7f5b4f1274b9bbafd2786720b76122a7081f5c3915ee3867/busy-1.2.15.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "3141e2e9902e1bdb1f82ebef50878139", "sha256": "1d840316c93ad8829dfa2fcc89789a09c249995f241e508804398977e4a0eee2"}, "downloads": -1, "filename": "busy-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3141e2e9902e1bdb1f82ebef50878139", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32737, "upload_time": "2019-01-06T04:05:06", "upload_time_iso_8601": "2019-01-06T04:05:06.668009Z", "url": "https://files.pythonhosted.org/packages/04/09/f27292d3252b72e42b50d2c3061e9ca296e3a6ffadf269852062b06409db/busy-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd221cb088a8772402578c498ce36d24", "sha256": "de5ce231e1f971928504e0a529d820ba720d17ad18aaea7c711dff8a109ce4f2"}, "downloads": -1, "filename": "busy-1.2.4.tar.gz", "has_sig": false, "md5_digest": "bd221cb088a8772402578c498ce36d24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22830, "upload_time": "2019-01-06T04:05:08", "upload_time_iso_8601": "2019-01-06T04:05:08.681779Z", "url": "https://files.pythonhosted.org/packages/3e/1d/6360928d573f444565ef5e78e5b49fa113fc66a7fee7c9d0263f5b35e205/busy-1.2.4.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "55cd6e782204e1a94189f17948f3a685", "sha256": "8cb92b97fe92078000dc08a1981ab34b4102bae027fd0182103ba429cb0933b8"}, "downloads": -1, "filename": "busy-1.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "55cd6e782204e1a94189f17948f3a685", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30538, "upload_time": "2019-01-12T23:28:18", "upload_time_iso_8601": "2019-01-12T23:28:18.712244Z", "url": "https://files.pythonhosted.org/packages/f2/27/8f74093a174cd920d4081cc59ac635d178f3ac2c2f4f5728ebd6b2c07781/busy-1.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fd4b89efb6c17df7c112816c216029f", "sha256": "9bca76e104dc9d757193332ae67edf3e06e459c53f81dec2165da213879e03e6"}, "downloads": -1, "filename": "busy-1.2.6.tar.gz", "has_sig": false, "md5_digest": "2fd4b89efb6c17df7c112816c216029f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22924, "upload_time": "2019-01-12T23:28:20", "upload_time_iso_8601": "2019-01-12T23:28:20.055620Z", "url": "https://files.pythonhosted.org/packages/30/f9/060337f45c94b4bdac8b4ca6ab725c6c989e2e50137af462bd3358f40990/busy-1.2.6.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e91bbaaccde60bdafdc522414d8705b8", "sha256": "9931070952db0da430fd0e9a17e613c1591dfc386d2514a74102edbe04a038cb"}, "downloads": -1, "filename": "busy-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e91bbaaccde60bdafdc522414d8705b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34393, "upload_time": "2019-09-29T18:12:24", "upload_time_iso_8601": "2019-09-29T18:12:24.376746Z", "url": "https://files.pythonhosted.org/packages/2f/7f/77a1aece866aba68c0b28370c401c241926eb001a3a9a6037d2d85607c5f/busy-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "395e0f2b77bba0424d02bd29d114b245", "sha256": "fa47a0f84fceca69560871da6c8d8152007bb6dfd6b7e5910f5558b67bdce0ee"}, "downloads": -1, "filename": "busy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "395e0f2b77bba0424d02bd29d114b245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25939, "upload_time": "2019-09-29T18:12:25", "upload_time_iso_8601": "2019-09-29T18:12:25.786371Z", "url": "https://files.pythonhosted.org/packages/27/25/03bf82c6edd89f115b9f225e3f0b65d7b0e05fc046c7c592f63aeab1522a/busy-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e91bbaaccde60bdafdc522414d8705b8", "sha256": "9931070952db0da430fd0e9a17e613c1591dfc386d2514a74102edbe04a038cb"}, "downloads": -1, "filename": "busy-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e91bbaaccde60bdafdc522414d8705b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34393, "upload_time": "2019-09-29T18:12:24", "upload_time_iso_8601": "2019-09-29T18:12:24.376746Z", "url": "https://files.pythonhosted.org/packages/2f/7f/77a1aece866aba68c0b28370c401c241926eb001a3a9a6037d2d85607c5f/busy-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "395e0f2b77bba0424d02bd29d114b245", "sha256": "fa47a0f84fceca69560871da6c8d8152007bb6dfd6b7e5910f5558b67bdce0ee"}, "downloads": -1, "filename": "busy-1.3.0.tar.gz", "has_sig": false, "md5_digest": "395e0f2b77bba0424d02bd29d114b245", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25939, "upload_time": "2019-09-29T18:12:25", "upload_time_iso_8601": "2019-09-29T18:12:25.786371Z", "url": "https://files.pythonhosted.org/packages/27/25/03bf82c6edd89f115b9f225e3f0b65d7b0e05fc046c7c592f63aeab1522a/busy-1.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:55 2020"}