{"info": {"author": "Benjamin Habert", "author_email": "bhabert@quantmetry.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pipeasy-spark\n\n\n[![pypi badge](https://img.shields.io/pypi/v/pipeasy_spark.svg)](https://pypi.python.org/pypi/pipeasy_spark)\n[![](https://img.shields.io/travis/Quantmetry/pipeasy-spark.svg)](https://travis-ci.org/Quantmetry/pipeasy-spark)\n[![documentation badge](https://readthedocs.org/projects/pipeasy-spark/badge/?version=latest)](https://readthedocs.org/projects/pipeasy-spark/)\n[![pyup badge](https://pyup.io/repos/github/BenjaminHabert/pipeasy_spark/shield.svg)](https://pyup.io/repos/github/BenjaminHabert/pipeasy_spark/)\n\n\nan easy way to define preprocessing data pipelines for pysparark\n\n\n* Free software: MIT license\n* Documentation: https://pipeasy-spark.readthedocs.io.\n\nVerified compatibility:\n- python 3.5, 3.6\n- pyspark 2.1 -> 2.4\n\n# Documentation\n\nhttps://pipeasy-spark.readthedocs.io/en/latest/\n\n# Installation\n\n\n```\npip install pipeasy-spark\n```\n\n# Usage\n\nThe goal of this package is to easily create a `pyspark.ml.Pipeline` instance that can\ntransform the columns of a `pyspark.sql.Dataframe` in order to prepare it for a regressor or classifier.\n\n\nAssuming we have the `titanic` dataset as a Dataframe:\n\n```python\ndf = titanic.select('Survived', 'Sex', 'Age').dropna()\ndf.show(2)\n# +--------+------+----+\n# |Survived|   Sex| Age|\n# +--------+------+----+\n# |       0|  male|22.0|\n# |       1|female|38.0|\n# +--------+------+----+\n```\n\nA basic transformation pipeline can be created as follows. We define for each\ncolumn of the dataframe a list of transformers that are applied sequencially.\nEach transformer is an instance of a transformer from `pyspark.ml.feature`.\nNotice that we do not provide the parameters `inputCol` or `outputCol` to\nthese transformers.\n\n```python\nfrom pipeasy_spark import build_pipeline\nfrom pyspark.ml.feature import (\n    StringIndexer,\n    OneHotEncoderEstimator,\n    VectorAssembler,\n    StandardScaler,\n)\n\npipeline = build_pipeline(column_transformers={\n    # 'Survived' : this variable is not modified, it can also be omitted from the dict\n    'Survived': [],\n    'Sex': [StringIndexer(), OneHotEncoderEstimator(dropLast=False)],\n    # 'Age': a VectorAssembler must be applied before the StandardScaler\n    # as the latter only accepts vectors as input.\n    'Age': [VectorAssembler(), StandardScaler()]\n})\ntrained_pipeline = pipeline.fit(df)\ntrained_pipeline.transform(df).show(2)\n# +--------+-------------+--------------------+\n# |Survived|          Sex|                 Age|\n# +--------+-------------+--------------------+\n# |       0|(2,[0],[1.0])|[1.5054181442954726]|\n# |       1|(2,[1],[1.0])| [2.600267703783089]|\n# +--------+-------------+--------------------+\n```\n\nThis preprocessing pipeline can be included in a full prediction pipeline :\n\n```python\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import LogisticRegression\n\nfull_pipeline = Pipeline(stages=[\n    pipeline,\n    # all the features have to be assembled in a single column:\n    VectorAssembler(inputCols=['Sex', 'Age'], outputCol='features'),\n    LogisticRegression(featuresCol='features', labelCol='Survived')\n])\n\ntrained_predictor = full_pipeline.fit(df)\ntrained_predictor.transform(df).show(2)\n# +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+\n# |Survived|          Sex|                 Age|            features|       rawPrediction|         probability|prediction|\n# +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+\n# |       0|(2,[0],[1.0])|[1.5054181442954726]|[1.0,0.0,1.505418...|[2.03811507112527...|[0.88474119316485...|       0.0|\n# |       1|(2,[1],[1.0])| [2.600267703783089]|[0.0,1.0,2.600267...|[-0.7360149659890...|[0.32387617489886...|       1.0|\n# +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+\n```\n\nAs of this writing, these are the transformers from `pyspark.ml.feature` that are supported:\n\n```python\n[\n    Binarizer(threshold=0.0, inputCol=None, outputCol=None),\n    BucketedRandomProjectionLSH(inputCol=None, outputCol=None, seed=None, numHashTables=1, bucketLength=None),\n    Bucketizer(splits=None, inputCol=None, outputCol=None, handleInvalid='error'),\n    CountVectorizer(minTF=1.0, minDF=1.0, vocabSize=262144, binary=False, inputCol=None, outputCol=None),\n    DCT(inverse=False, inputCol=None, outputCol=None),\n    ElementwiseProduct(scalingVec=None, inputCol=None, outputCol=None),\n    FeatureHasher(numFeatures=262144, inputCols=None, outputCol=None, categoricalCols=None),\n    HashingTF(numFeatures=262144, binary=False, inputCol=None, outputCol=None),\n    IDF(minDocFreq=0, inputCol=None, outputCol=None),\n    Imputer(strategy='mean', missingValue=nan, inputCols=None, outputCols=None),\n    IndexToString(inputCol=None, outputCol=None, labels=None),\n    MaxAbsScaler(inputCol=None, outputCol=None),\n    MinHashLSH(inputCol=None, outputCol=None, seed=None, numHashTables=1),\n    MinMaxScaler(min=0.0, max=1.0, inputCol=None, outputCol=None),\n    NGram(n=2, inputCol=None, outputCol=None),\n    Normalizer(p=2.0, inputCol=None, outputCol=None),\n    OneHotEncoder(dropLast=True, inputCol=None, outputCol=None),\n    OneHotEncoderEstimator(inputCols=None, outputCols=None, handleInvalid='error', dropLast=True),\n    PCA(k=None, inputCol=None, outputCol=None),\n    PolynomialExpansion(degree=2, inputCol=None, outputCol=None),\n    QuantileDiscretizer(numBuckets=2, inputCol=None, outputCol=None, relativeError=0.001, handleInvalid='error'),\n    RegexTokenizer(minTokenLength=1, gaps=True, pattern='\\\\\\\\s+', inputCol=None, outputCol=None, toLowercase=True),\n    StandardScaler(withMean=False, withStd=True, inputCol=None, outputCol=None),\n    StopWordsRemover(inputCol=None, outputCol=None, stopWords=None, caseSensitive=False),\n    StringIndexer(inputCol=None, outputCol=None, handleInvalid='error', stringOrderType='frequencyDesc'),\n    Tokenizer(inputCol=None, outputCol=None),\n    VectorAssembler(inputCols=None, outputCol=None),\n    VectorIndexer(maxCategories=20, inputCol=None, outputCol=None, handleInvalid='error'),\n    VectorSizeHint(inputCol=None, size=None, handleInvalid='error'),\n    VectorSlicer(inputCol=None, outputCol=None, indices=None, names=None),\n    Word2Vec(vectorSize=100, minCount=5, numPartitions=1, stepSize=0.025, maxIter=1, seed=None, inputCol=None, outputCol=None, windowSize=5, maxSentenceLength=1000)\n]\n```\n\nThese are not supported as it is not possible to specity the input column(s).\n\n```python\n[\n    ChiSqSelector(numTopFeatures=50, featuresCol='features', outputCol=None, labelCol='label', selectorType='numTopFeatures', percentile=0.1, fpr=0.05, fdr=0.05, fwe=0.05),\n    LSHParams(),\n    RFormula(formula=None, featuresCol='features', labelCol='label', forceIndexLabel=False, stringIndexerOrderType='frequencyDesc', handleInvalid='error'),\n    SQLTransformer(statement=None)\n]\n```\n\n\n# Contributing\n\nIn order to contribute to the project, here is how you should configure your local development environment:\n\n- download the code and create a local virtual environment with the required dependencies:\n\n    ```\n    # getting the project\n    $ git clone git@github.com:Quantmetry/pipeasy-spark.git\n    $ cd pipeasy-spark\n    # creating the virtual environnment and activating it\n    $ make install_dev\n    $ source .venv/bin/activate\n    (.venv) $ make test\n    # start the demo notebook\n    (.venv) $ make notebook\n    ```\n\n    **Note:** the `make install` step installs the package in *editable* mode into the local virtual environment.\n    This step is required as it also installs the package dependencies as they are listed in the `setup.py` file.\n\n- make sure that Java is correcly installed. [Download](https://www.java.com/en/download/mac_download.jsp)\n  Java and install it. Then you should set the `JAVA_HOME` environment variable. For instance you can add the\n  following line to your `~/.bash_profile`:\n\n  ```\n  # ~/.bash_profile   -> this depends on your platform\n  # note that the actual path might change for you\n  export JAVA_HOME=\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/\"\n  ```\n\n  **Note:** notice that we did not install spark itself. Having a valid Java Runtime Engine installed and installing\n  `pyspark` (done when installing the package's dependencies) is enough to run the tests.\n\n- run the tests of the project (you need to activate your local virtual environnment):\n\n    ```\n    $ source .venv/bin/activate\n    # this runs the tests/ with the current python version\n    (.venv) $ make test\n    # check that the developped code follows the standards\n    # (we use flake8 as a linting engine, it is configured in the tox.ini file)\n    (.venv) $ make lint\n    # run the tests for several python versions + run linting step\n    (.venv) $ tox\n    ```\n\n    **Note:** the continuous integration process (run by TravisCI) performs the latest operation (`$ tox`). Consequently you should make sure that this step is successfull on your machine before pushing new code to the repository. However you might not have all python versions installed on your local machine; this is ok in most cases.\n\n- (optional) configure your text editor. Because the tests include a linting step, it is convenient to add this linting to your\n  editor. For instance you can use VSCode with the Python extension and add linting with flake8 in the settings.\n  It is a good idea to use as a python interpreter for linting (and code completetion etc.) the one in your local virtuel environnment.\n  flake8 configuration options are specified in the `tox.ini` file.\n\n\n# Notes on setting up the project\n\n- I setup the project using [this cookiecutter project](https://cookiecutter-pypackage.readthedocs.io/en/latest/readme.html#features)\n- create a local virtual environnment and activate it\n- install requirements_dev.txt\n\n  ```\n  $ python3 -m venv .venv\n  $ source .venv/bin./activate\n  (.venv) $ pip install -r requirements_dev.txt\n  ```\n\n- I update my vscode config to use this virtual env as the python interpreter for this project ([doc](https://code.visualstudio.com/docs/python/environments#_manually-specify-an-interpreter))\n  (the modified file is  <my_repo>/.vscode/settings.json)\n- I update the `Makefile` to be able to run tests (this way I don't have to mess with the `PYTHONPATH`):\n\n  ```\n  # avant\n  test: ## run tests quickly with the default Python\n  py.test\n\n  # modification\n  test: ## run tests quickly with the default Python\n  python -m pytest tests/\n  ```\n\n  I can now run (when inside my local virtual environment):\n\n  ```\n  (.venv) $ make test\n  ```\n\n  I can also run `tox` which runs the tests agains several python versions:\n\n  ```\n  (.venv) $ tox\n  py27: commands succeeded\n  ERROR:   py34: InterpreterNotFound: python3.4\n  ERROR:   py35: InterpreterNotFound: python3.5\n  py36: commands succeeded\n  flake8: commands succeeded\n  ```\n\n- I log into Travis with my Github account. I can see and configure the builds for this repository (I have admin rights on the repo).\n  I can trigger a build without pushing to the repository (More Options / Trigger Build). Everything runs fine!\n- I push this to a new branch : Travis triggers tests on this branch (even without creating a pull request).\n  The tests fail because I changed `README.rst` to `README.md`. I need to also change this in `setup.py`.\n- I create an account on pypi.org and link it to the current project\n  ([documentation](https://cookiecutter-pypackage.readthedocs.io/en/latest/travis_pypi_setup.html#travis-pypi-setup))\n\n  ```\n  $ brew install travis\n  $ travis encrypt ****** --add deploy.password\n  ```\n\n  This modifies the `.travis.yml` file. I customize it slightly because the package name is wrong:\n\n  ```\n  # .travis.yml\n  deploy:\n    on:\n    tags: true\n    # the repo was not correct:\n    repo: Quantmetry/pipeasy-spark\n  ```\n\n- I update the version and push a tag:\n\n  ```\n  $ bumpversion patch\n  $ git push --tags\n  $ git push\n  ```\n\n  I can indeed see the tag (and an associated release) on the github interface. However Travis does not deploy\n   on this commit. This is the intended behaviour. Be [default](https://docs.travis-ci.com/user/deployment/pypi/)\n   travis deploys only on the `master` branch.\n\n- I setup an account on [readthedoc.io](https://readthedocs.org/). Selecting the repo is enough to have the documentation online! \n\n- When I merge to master Travis launches a build bus says it will not deploy\n  (see [this build](https://travis-ci.org/Quantmetry/pipeasy-spark/jobs/440637481) for instance). However the library\n  was indeed deployed to pypi: I can pip install it..\n\nNote: when Omar pushed new commits, travis does not report their status.\n\n- I update `setup.py` to add the dependence to `pyspark`. I also modify slightly the development setup (see Development section above).\n\n\n=======\nHistory\n=======\n\n0.2.0 (2019-01-06)\n------------------\n\nFirst usable version of the package. We decided on the api:\n\n- ``pipeasy_spark.build_pipeline(column_transformers={'column': []})`` is the core function \n  where you can define a list of transormers for each columns.\n- ``pipeasy_spark.build_pipeline_by_dtypes(df, string_transformers=[])`` allows\n  you to define a list of transormers for two types of columns: ``string_`` and ``numeric_``.\n- ``pipeasy_spark.build_default_pipeline(df, exclude_columns=['target'])`` builds a default\n  transformer for the ``df`` dataframe.\n\n0.1.2 (2018-10-12)\n------------------\n\n* I am still learning how all these tools interact with each other\n\n0.1.1 (2018-10-12)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BenjaminHabert/pipeasy_spark", "keywords": "pipeasy_spark", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pipeasy-spark", "package_url": "https://pypi.org/project/pipeasy-spark/", "platform": "", "project_url": "https://pypi.org/project/pipeasy-spark/", "project_urls": {"Homepage": "https://github.com/BenjaminHabert/pipeasy_spark"}, "release_url": "https://pypi.org/project/pipeasy-spark/0.2.1/", "requires_dist": ["pyspark", "numpy"], "requires_python": "", "summary": "an easy way to define preprocessing data pipelines for pysparark", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pipeasy-spark</h1>\n<p><a href=\"https://pypi.python.org/pypi/pipeasy_spark\" rel=\"nofollow\"><img alt=\"pypi badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/856db205a9b418887fae6bfef8c1e8e493db35ca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706970656173795f737061726b2e737667\"></a>\n<a href=\"https://travis-ci.org/Quantmetry/pipeasy-spark\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/219185a24e694d944e100167a1c0a01353ad6b70/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f5175616e746d657472792f706970656173792d737061726b2e737667\"></a>\n<a href=\"https://readthedocs.org/projects/pipeasy-spark/\" rel=\"nofollow\"><img alt=\"documentation badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff8fb5cb08c4ad2126f4fe5331b03de8b76be789/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f706970656173792d737061726b2f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://pyup.io/repos/github/BenjaminHabert/pipeasy_spark/\" rel=\"nofollow\"><img alt=\"pyup badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c58f471da9ceb8fbbcfd1d99ee6cbb210f01c717/68747470733a2f2f707975702e696f2f7265706f732f6769746875622f42656e6a616d696e4861626572742f706970656173795f737061726b2f736869656c642e737667\"></a></p>\n<p>an easy way to define preprocessing data pipelines for pysparark</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://pipeasy-spark.readthedocs.io\" rel=\"nofollow\">https://pipeasy-spark.readthedocs.io</a>.</li>\n</ul>\n<p>Verified compatibility:</p>\n<ul>\n<li>python 3.5, 3.6</li>\n<li>pyspark 2.1 -&gt; 2.4</li>\n</ul>\n<h1>Documentation</h1>\n<p><a href=\"https://pipeasy-spark.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pipeasy-spark.readthedocs.io/en/latest/</a></p>\n<h1>Installation</h1>\n<pre><code>pip install pipeasy-spark\n</code></pre>\n<h1>Usage</h1>\n<p>The goal of this package is to easily create a <code>pyspark.ml.Pipeline</code> instance that can\ntransform the columns of a <code>pyspark.sql.Dataframe</code> in order to prepare it for a regressor or classifier.</p>\n<p>Assuming we have the <code>titanic</code> dataset as a Dataframe:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">titanic</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Survived'</span><span class=\"p\">,</span> <span class=\"s1\">'Sex'</span><span class=\"p\">,</span> <span class=\"s1\">'Age'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># +--------+------+----+</span>\n<span class=\"c1\"># |Survived|   Sex| Age|</span>\n<span class=\"c1\"># +--------+------+----+</span>\n<span class=\"c1\"># |       0|  male|22.0|</span>\n<span class=\"c1\"># |       1|female|38.0|</span>\n<span class=\"c1\"># +--------+------+----+</span>\n</pre>\n<p>A basic transformation pipeline can be created as follows. We define for each\ncolumn of the dataframe a list of transformers that are applied sequencially.\nEach transformer is an instance of a transformer from <code>pyspark.ml.feature</code>.\nNotice that we do not provide the parameters <code>inputCol</code> or <code>outputCol</code> to\nthese transformers.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pipeasy_spark</span> <span class=\"kn\">import</span> <span class=\"n\">build_pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyspark.ml.feature</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">StringIndexer</span><span class=\"p\">,</span>\n    <span class=\"n\">OneHotEncoderEstimator</span><span class=\"p\">,</span>\n    <span class=\"n\">VectorAssembler</span><span class=\"p\">,</span>\n    <span class=\"n\">StandardScaler</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">build_pipeline</span><span class=\"p\">(</span><span class=\"n\">column_transformers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"c1\"># 'Survived' : this variable is not modified, it can also be omitted from the dict</span>\n    <span class=\"s1\">'Survived'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'Sex'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">StringIndexer</span><span class=\"p\">(),</span> <span class=\"n\">OneHotEncoderEstimator</span><span class=\"p\">(</span><span class=\"n\">dropLast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)],</span>\n    <span class=\"c1\"># 'Age': a VectorAssembler must be applied before the StandardScaler</span>\n    <span class=\"c1\"># as the latter only accepts vectors as input.</span>\n    <span class=\"s1\">'Age'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">VectorAssembler</span><span class=\"p\">(),</span> <span class=\"n\">StandardScaler</span><span class=\"p\">()]</span>\n<span class=\"p\">})</span>\n<span class=\"n\">trained_pipeline</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">trained_pipeline</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># +--------+-------------+--------------------+</span>\n<span class=\"c1\"># |Survived|          Sex|                 Age|</span>\n<span class=\"c1\"># +--------+-------------+--------------------+</span>\n<span class=\"c1\"># |       0|(2,[0],[1.0])|[1.5054181442954726]|</span>\n<span class=\"c1\"># |       1|(2,[1],[1.0])| [2.600267703783089]|</span>\n<span class=\"c1\"># +--------+-------------+--------------------+</span>\n</pre>\n<p>This preprocessing pipeline can be included in a full prediction pipeline :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyspark.ml</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyspark.ml.classification</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n\n<span class=\"n\">full_pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">stages</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">pipeline</span><span class=\"p\">,</span>\n    <span class=\"c1\"># all the features have to be assembled in a single column:</span>\n    <span class=\"n\">VectorAssembler</span><span class=\"p\">(</span><span class=\"n\">inputCols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Sex'</span><span class=\"p\">,</span> <span class=\"s1\">'Age'</span><span class=\"p\">],</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"s1\">'features'</span><span class=\"p\">),</span>\n    <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">featuresCol</span><span class=\"o\">=</span><span class=\"s1\">'features'</span><span class=\"p\">,</span> <span class=\"n\">labelCol</span><span class=\"o\">=</span><span class=\"s1\">'Survived'</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">trained_predictor</span> <span class=\"o\">=</span> <span class=\"n\">full_pipeline</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">trained_predictor</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+</span>\n<span class=\"c1\"># |Survived|          Sex|                 Age|            features|       rawPrediction|         probability|prediction|</span>\n<span class=\"c1\"># +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+</span>\n<span class=\"c1\"># |       0|(2,[0],[1.0])|[1.5054181442954726]|[1.0,0.0,1.505418...|[2.03811507112527...|[0.88474119316485...|       0.0|</span>\n<span class=\"c1\"># |       1|(2,[1],[1.0])| [2.600267703783089]|[0.0,1.0,2.600267...|[-0.7360149659890...|[0.32387617489886...|       1.0|</span>\n<span class=\"c1\"># +--------+-------------+--------------------+--------------------+--------------------+--------------------+----------+</span>\n</pre>\n<p>As of this writing, these are the transformers from <code>pyspark.ml.feature</code> that are supported:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"n\">Binarizer</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">BucketedRandomProjectionLSH</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">numHashTables</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">bucketLength</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">Bucketizer</span><span class=\"p\">(</span><span class=\"n\">splits</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">),</span>\n    <span class=\"n\">CountVectorizer</span><span class=\"p\">(</span><span class=\"n\">minTF</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">minDF</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">vocabSize</span><span class=\"o\">=</span><span class=\"mi\">262144</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">DCT</span><span class=\"p\">(</span><span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">ElementwiseProduct</span><span class=\"p\">(</span><span class=\"n\">scalingVec</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">FeatureHasher</span><span class=\"p\">(</span><span class=\"n\">numFeatures</span><span class=\"o\">=</span><span class=\"mi\">262144</span><span class=\"p\">,</span> <span class=\"n\">inputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">categoricalCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">HashingTF</span><span class=\"p\">(</span><span class=\"n\">numFeatures</span><span class=\"o\">=</span><span class=\"mi\">262144</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">IDF</span><span class=\"p\">(</span><span class=\"n\">minDocFreq</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">Imputer</span><span class=\"p\">(</span><span class=\"n\">strategy</span><span class=\"o\">=</span><span class=\"s1\">'mean'</span><span class=\"p\">,</span> <span class=\"n\">missingValue</span><span class=\"o\">=</span><span class=\"n\">nan</span><span class=\"p\">,</span> <span class=\"n\">inputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">IndexToString</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">MaxAbsScaler</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">MinHashLSH</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">numHashTables</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">MinMaxScaler</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">NGram</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">Normalizer</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">OneHotEncoder</span><span class=\"p\">(</span><span class=\"n\">dropLast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">OneHotEncoderEstimator</span><span class=\"p\">(</span><span class=\"n\">inputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"n\">dropLast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">PCA</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">PolynomialExpansion</span><span class=\"p\">(</span><span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">QuantileDiscretizer</span><span class=\"p\">(</span><span class=\"n\">numBuckets</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">relativeError</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">),</span>\n    <span class=\"n\">RegexTokenizer</span><span class=\"p\">(</span><span class=\"n\">minTokenLength</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gaps</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">s+'</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">toLowercase</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"n\">StandardScaler</span><span class=\"p\">(</span><span class=\"n\">withMean</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">withStd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">StopWordsRemover</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stopWords</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">caseSensitive</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">StringIndexer</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"n\">stringOrderType</span><span class=\"o\">=</span><span class=\"s1\">'frequencyDesc'</span><span class=\"p\">),</span>\n    <span class=\"n\">Tokenizer</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">VectorAssembler</span><span class=\"p\">(</span><span class=\"n\">inputCols</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">VectorIndexer</span><span class=\"p\">(</span><span class=\"n\">maxCategories</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">),</span>\n    <span class=\"n\">VectorSizeHint</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">),</span>\n    <span class=\"n\">VectorSlicer</span><span class=\"p\">(</span><span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">),</span>\n    <span class=\"n\">Word2Vec</span><span class=\"p\">(</span><span class=\"n\">vectorSize</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">minCount</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">numPartitions</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">stepSize</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span> <span class=\"n\">maxIter</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">inputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">windowSize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">maxSentenceLength</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<p>These are not supported as it is not possible to specity the input column(s).</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"n\">ChiSqSelector</span><span class=\"p\">(</span><span class=\"n\">numTopFeatures</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">featuresCol</span><span class=\"o\">=</span><span class=\"s1\">'features'</span><span class=\"p\">,</span> <span class=\"n\">outputCol</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">labelCol</span><span class=\"o\">=</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">selectorType</span><span class=\"o\">=</span><span class=\"s1\">'numTopFeatures'</span><span class=\"p\">,</span> <span class=\"n\">percentile</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">fpr</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">fdr</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">fwe</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">),</span>\n    <span class=\"n\">LSHParams</span><span class=\"p\">(),</span>\n    <span class=\"n\">RFormula</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">featuresCol</span><span class=\"o\">=</span><span class=\"s1\">'features'</span><span class=\"p\">,</span> <span class=\"n\">labelCol</span><span class=\"o\">=</span><span class=\"s1\">'label'</span><span class=\"p\">,</span> <span class=\"n\">forceIndexLabel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stringIndexerOrderType</span><span class=\"o\">=</span><span class=\"s1\">'frequencyDesc'</span><span class=\"p\">,</span> <span class=\"n\">handleInvalid</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">),</span>\n    <span class=\"n\">SQLTransformer</span><span class=\"p\">(</span><span class=\"n\">statement</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</pre>\n<h1>Contributing</h1>\n<p>In order to contribute to the project, here is how you should configure your local development environment:</p>\n<ul>\n<li>\n<p>download the code and create a local virtual environment with the required dependencies:</p>\n<pre><code># getting the project\n$ git clone git@github.com:Quantmetry/pipeasy-spark.git\n$ cd pipeasy-spark\n# creating the virtual environnment and activating it\n$ make install_dev\n$ source .venv/bin/activate\n(.venv) $ make test\n# start the demo notebook\n(.venv) $ make notebook\n</code></pre>\n<p><strong>Note:</strong> the <code>make install</code> step installs the package in <em>editable</em> mode into the local virtual environment.\nThis step is required as it also installs the package dependencies as they are listed in the <code>setup.py</code> file.</p>\n</li>\n<li>\n<p>make sure that Java is correcly installed. <a href=\"https://www.java.com/en/download/mac_download.jsp\" rel=\"nofollow\">Download</a>\nJava and install it. Then you should set the <code>JAVA_HOME</code> environment variable. For instance you can add the\nfollowing line to your <code>~/.bash_profile</code>:</p>\n<pre><code># ~/.bash_profile   -&gt; this depends on your platform\n# note that the actual path might change for you\nexport JAVA_HOME=\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/\"\n</code></pre>\n<p><strong>Note:</strong> notice that we did not install spark itself. Having a valid Java Runtime Engine installed and installing\n<code>pyspark</code> (done when installing the package's dependencies) is enough to run the tests.</p>\n</li>\n<li>\n<p>run the tests of the project (you need to activate your local virtual environnment):</p>\n<pre><code>$ source .venv/bin/activate\n# this runs the tests/ with the current python version\n(.venv) $ make test\n# check that the developped code follows the standards\n# (we use flake8 as a linting engine, it is configured in the tox.ini file)\n(.venv) $ make lint\n# run the tests for several python versions + run linting step\n(.venv) $ tox\n</code></pre>\n<p><strong>Note:</strong> the continuous integration process (run by TravisCI) performs the latest operation (<code>$ tox</code>). Consequently you should make sure that this step is successfull on your machine before pushing new code to the repository. However you might not have all python versions installed on your local machine; this is ok in most cases.</p>\n</li>\n<li>\n<p>(optional) configure your text editor. Because the tests include a linting step, it is convenient to add this linting to your\neditor. For instance you can use VSCode with the Python extension and add linting with flake8 in the settings.\nIt is a good idea to use as a python interpreter for linting (and code completetion etc.) the one in your local virtuel environnment.\nflake8 configuration options are specified in the <code>tox.ini</code> file.</p>\n</li>\n</ul>\n<h1>Notes on setting up the project</h1>\n<ul>\n<li>\n<p>I setup the project using <a href=\"https://cookiecutter-pypackage.readthedocs.io/en/latest/readme.html#features\" rel=\"nofollow\">this cookiecutter project</a></p>\n</li>\n<li>\n<p>create a local virtual environnment and activate it</p>\n</li>\n<li>\n<p>install requirements_dev.txt</p>\n<pre><code>$ python3 -m venv .venv\n$ source .venv/bin./activate\n(.venv) $ pip install -r requirements_dev.txt\n</code></pre>\n</li>\n<li>\n<p>I update my vscode config to use this virtual env as the python interpreter for this project (<a href=\"https://code.visualstudio.com/docs/python/environments#_manually-specify-an-interpreter\" rel=\"nofollow\">doc</a>)\n(the modified file is  &lt;my_repo&gt;/.vscode/settings.json)</p>\n</li>\n<li>\n<p>I update the <code>Makefile</code> to be able to run tests (this way I don't have to mess with the <code>PYTHONPATH</code>):</p>\n<pre><code># avant\ntest: ## run tests quickly with the default Python\npy.test\n\n# modification\ntest: ## run tests quickly with the default Python\npython -m pytest tests/\n</code></pre>\n<p>I can now run (when inside my local virtual environment):</p>\n<pre><code>(.venv) $ make test\n</code></pre>\n<p>I can also run <code>tox</code> which runs the tests agains several python versions:</p>\n<pre><code>(.venv) $ tox\npy27: commands succeeded\nERROR:   py34: InterpreterNotFound: python3.4\nERROR:   py35: InterpreterNotFound: python3.5\npy36: commands succeeded\nflake8: commands succeeded\n</code></pre>\n</li>\n<li>\n<p>I log into Travis with my Github account. I can see and configure the builds for this repository (I have admin rights on the repo).\nI can trigger a build without pushing to the repository (More Options / Trigger Build). Everything runs fine!</p>\n</li>\n<li>\n<p>I push this to a new branch : Travis triggers tests on this branch (even without creating a pull request).\nThe tests fail because I changed <code>README.rst</code> to <code>README.md</code>. I need to also change this in <code>setup.py</code>.</p>\n</li>\n<li>\n<p>I create an account on pypi.org and link it to the current project\n(<a href=\"https://cookiecutter-pypackage.readthedocs.io/en/latest/travis_pypi_setup.html#travis-pypi-setup\" rel=\"nofollow\">documentation</a>)</p>\n<pre><code>$ brew install travis\n$ travis encrypt ****** --add deploy.password\n</code></pre>\n<p>This modifies the <code>.travis.yml</code> file. I customize it slightly because the package name is wrong:</p>\n<pre><code># .travis.yml\ndeploy:\n  on:\n  tags: true\n  # the repo was not correct:\n  repo: Quantmetry/pipeasy-spark\n</code></pre>\n</li>\n<li>\n<p>I update the version and push a tag:</p>\n<pre><code>$ bumpversion patch\n$ git push --tags\n$ git push\n</code></pre>\n<p>I can indeed see the tag (and an associated release) on the github interface. However Travis does not deploy\non this commit. This is the intended behaviour. Be <a href=\"https://docs.travis-ci.com/user/deployment/pypi/\" rel=\"nofollow\">default</a>\ntravis deploys only on the <code>master</code> branch.</p>\n</li>\n<li>\n<p>I setup an account on <a href=\"https://readthedocs.org/\" rel=\"nofollow\">readthedoc.io</a>. Selecting the repo is enough to have the documentation online!</p>\n</li>\n<li>\n<p>When I merge to master Travis launches a build bus says it will not deploy\n(see <a href=\"https://travis-ci.org/Quantmetry/pipeasy-spark/jobs/440637481\" rel=\"nofollow\">this build</a> for instance). However the library\nwas indeed deployed to pypi: I can pip install it..</p>\n</li>\n</ul>\n<p>Note: when Omar pushed new commits, travis does not report their status.</p>\n<ul>\n<li>I update <code>setup.py</code> to add the dependence to <code>pyspark</code>. I also modify slightly the development setup (see Development section above).</li>\n</ul>\n<h1>=======\nHistory</h1>\n<h2>0.2.0 (2019-01-06)</h2>\n<p>First usable version of the package. We decided on the api:</p>\n<ul>\n<li><code>pipeasy_spark.build_pipeline(column_transformers={'column': []})</code> is the core function\nwhere you can define a list of transormers for each columns.</li>\n<li><code>pipeasy_spark.build_pipeline_by_dtypes(df, string_transformers=[])</code> allows\nyou to define a list of transormers for two types of columns: <code>string_</code> and <code>numeric_</code>.</li>\n<li><code>pipeasy_spark.build_default_pipeline(df, exclude_columns=['target'])</code> builds a default\ntransformer for the <code>df</code> dataframe.</li>\n</ul>\n<h2>0.1.2 (2018-10-12)</h2>\n<ul>\n<li>I am still learning how all these tools interact with each other</li>\n</ul>\n<h2>0.1.1 (2018-10-12)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n\n          </div>"}, "last_serial": 4784734, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "ec6811080c197fd06ab50f1ec4adc38b", "sha256": "847cbe1a4f5a5e51c9a40ce125ed4922388fa94048f134adfe946581d9f778a0"}, "downloads": -1, "filename": "pipeasy_spark-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ec6811080c197fd06ab50f1ec4adc38b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4006, "upload_time": "2018-10-12T12:14:43", "upload_time_iso_8601": "2018-10-12T12:14:43.699337Z", "url": "https://files.pythonhosted.org/packages/f4/8f/594b6ca87c10577b92c535762cdfddc3c80e61dd454c82dc2cf06629d104/pipeasy_spark-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "837b419be2f13d80ebc006fb31050179", "sha256": "e57efa0c84690dce828b8a2ef6b64474ec372ca16b7d259cf6fc8b5368e0b1ea"}, "downloads": -1, "filename": "pipeasy_spark-0.1.1.tar.gz", "has_sig": false, "md5_digest": "837b419be2f13d80ebc006fb31050179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9057, "upload_time": "2018-10-12T12:14:44", "upload_time_iso_8601": "2018-10-12T12:14:44.928970Z", "url": "https://files.pythonhosted.org/packages/2b/6d/125560c59809891cb6467d6e177664669e70324243c97c73e1596d9c4b18/pipeasy_spark-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ca5f984e35883b02e7738e600fb7e76e", "sha256": "806c64970d39be73c8fcea78201afcbd412c2cfc91328f497ac7b49e8c15bf6d"}, "downloads": -1, "filename": "pipeasy_spark-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ca5f984e35883b02e7738e600fb7e76e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4210, "upload_time": "2018-10-12T13:32:45", "upload_time_iso_8601": "2018-10-12T13:32:45.192941Z", "url": "https://files.pythonhosted.org/packages/03/8d/302b8c0f8b85303af66014c9a34c34b0ae349a5a0c6c05ba87925176513f/pipeasy_spark-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2dc270abc660e85e776e34ff630d140", "sha256": "a7790f05afcd1afe34540e74a707b00cabb46903a5a0a718d06b193f444bd871"}, "downloads": -1, "filename": "pipeasy_spark-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a2dc270abc660e85e776e34ff630d140", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9280, "upload_time": "2018-10-12T13:32:46", "upload_time_iso_8601": "2018-10-12T13:32:46.217759Z", "url": "https://files.pythonhosted.org/packages/0c/22/83748c24908b0ae3e25bc3e8de5ef9ad1217b1bd23fede781221b88810e7/pipeasy_spark-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "edc41f2a21fbf98b342cd0883c0ce1a1", "sha256": "22ffff88741330c8d9d479436002728c60e94380b2308ea4ceac41901700d402"}, "downloads": -1, "filename": "pipeasy_spark-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edc41f2a21fbf98b342cd0883c0ce1a1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9971, "upload_time": "2019-02-06T02:48:40", "upload_time_iso_8601": "2019-02-06T02:48:40.008701Z", "url": "https://files.pythonhosted.org/packages/84/72/cfeacc4ab5f50b3af8c9b5c5b11b043c4c156ecf48bf8db629dab0a65c11/pipeasy_spark-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bafee6fd502ed42968a6b6bcd4d1431a", "sha256": "6fa7de7bc291a9a9405234be1df33719c7b91f3c45574806a82feea3c71350cd"}, "downloads": -1, "filename": "pipeasy_spark-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bafee6fd502ed42968a6b6bcd4d1431a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24108, "upload_time": "2019-02-06T02:48:41", "upload_time_iso_8601": "2019-02-06T02:48:41.569456Z", "url": "https://files.pythonhosted.org/packages/10/37/2b86dec45375c61e56209401020075bfa86cd15f34761e025e9ffe4ad254/pipeasy_spark-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ee96a232c9bc519995ad99433bc84b8c", "sha256": "107a1af0be0265f1a51407fe9d583476d42ac48f7ac73671250304a61e9c6433"}, "downloads": -1, "filename": "pipeasy_spark-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee96a232c9bc519995ad99433bc84b8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10191, "upload_time": "2019-02-06T02:58:20", "upload_time_iso_8601": "2019-02-06T02:58:20.696604Z", "url": "https://files.pythonhosted.org/packages/c4/51/2d1fdecdf71e7c055036de13aa913ff22949f10bde9b7ed746b44e51595f/pipeasy_spark-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f846eb3594012799ba2f22b9fce599fd", "sha256": "04ef1c1e347f7046685495e2f41763057456226823dcf3b4bd8a87041d64e70e"}, "downloads": -1, "filename": "pipeasy_spark-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f846eb3594012799ba2f22b9fce599fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24821, "upload_time": "2019-02-06T02:58:21", "upload_time_iso_8601": "2019-02-06T02:58:21.982526Z", "url": "https://files.pythonhosted.org/packages/ec/f8/8450de62c2b1118843857eb1482fe9c85cacc85d39f74ce92e9084c0c8f5/pipeasy_spark-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee96a232c9bc519995ad99433bc84b8c", "sha256": "107a1af0be0265f1a51407fe9d583476d42ac48f7ac73671250304a61e9c6433"}, "downloads": -1, "filename": "pipeasy_spark-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ee96a232c9bc519995ad99433bc84b8c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10191, "upload_time": "2019-02-06T02:58:20", "upload_time_iso_8601": "2019-02-06T02:58:20.696604Z", "url": "https://files.pythonhosted.org/packages/c4/51/2d1fdecdf71e7c055036de13aa913ff22949f10bde9b7ed746b44e51595f/pipeasy_spark-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f846eb3594012799ba2f22b9fce599fd", "sha256": "04ef1c1e347f7046685495e2f41763057456226823dcf3b4bd8a87041d64e70e"}, "downloads": -1, "filename": "pipeasy_spark-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f846eb3594012799ba2f22b9fce599fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24821, "upload_time": "2019-02-06T02:58:21", "upload_time_iso_8601": "2019-02-06T02:58:21.982526Z", "url": "https://files.pythonhosted.org/packages/ec/f8/8450de62c2b1118843857eb1482fe9c85cacc85d39f74ce92e9084c0c8f5/pipeasy_spark-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:22 2020"}