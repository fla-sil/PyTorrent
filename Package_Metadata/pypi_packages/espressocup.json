{"info": {"author": "Daniel Fairhead", "author_email": "danthedeckie@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7"], "description": "Why? What?\n==========\n\nI'm making a very light-weight internal network service, and am using\nthe amazing flask, as it's excellent for prototyping such things.\n\nHowever, I feel like it's a little over-weight for the simplicity of the\ntask.  So, out of curiosity, I'm trying to make a flask-alike server\nand WSGI microframework which has just enough for these types of projects.\n\nIt's not intended to replace flask, obviously.  There's no point.\n\nBut it is intended that for things like this which don't need a templating\nlanguage, or any of that, it should be close enough to flask that I can\ndrop this in, and with minimal changes have it running very quickly.\n\ncurrent state:\n==============\n\nvery very very initial alpha.  For pure JSON based views, it's kind of\nworking.  For templating, it's using pythons string.format instead of\njinja2.\n\nRoutes currently don't use variables, but are just a plain lookup.\n\nstatic files seem to be (initially) working.\n\nmime detection of template types isn't really working yet.\n\nAll that said:\n\nIt's quite fast. (Ha, no surprise, with all those caveats...)\n\nbroken stuff:\n=============\n\n- the 'request' object is just the pure WSGI environ at the moment.\n- MIME types for templates (and static files)\n- routing <with><vars>", "description_content_type": null, "docs_url": null, "download_url": "https://bitbucket.org/dfairhead/espressocup/get/0.0.3.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/dfairhead/espressocup", "keywords": "WSGI", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "espressocup", "package_url": "https://pypi.org/project/espressocup/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/espressocup/", "project_urls": {"Download": "https://bitbucket.org/dfairhead/espressocup/get/0.0.3.zip", "Homepage": "https://bitbucket.org/dfairhead/espressocup"}, "release_url": "https://pypi.org/project/espressocup/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "A gevent-intended very very basic flask-like WSGI server", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"why-what\">\n<h2>Why? What?</h2>\n<p>I\u2019m making a very light-weight internal network service, and am using\nthe amazing flask, as it\u2019s excellent for prototyping such things.</p>\n<p>However, I feel like it\u2019s a little over-weight for the simplicity of the\ntask.  So, out of curiosity, I\u2019m trying to make a flask-alike server\nand WSGI microframework which has just enough for these types of projects.</p>\n<p>It\u2019s not intended to replace flask, obviously.  There\u2019s no point.</p>\n<p>But it is intended that for things like this which don\u2019t need a templating\nlanguage, or any of that, it should be close enough to flask that I can\ndrop this in, and with minimal changes have it running very quickly.</p>\n</div>\n<div id=\"current-state\">\n<h2>current state:</h2>\n<p>very very very initial alpha.  For pure JSON based views, it\u2019s kind of\nworking.  For templating, it\u2019s using pythons string.format instead of\njinja2.</p>\n<p>Routes currently don\u2019t use variables, but are just a plain lookup.</p>\n<p>static files seem to be (initially) working.</p>\n<p>mime detection of template types isn\u2019t really working yet.</p>\n<p>All that said:</p>\n<p>It\u2019s quite fast. (Ha, no surprise, with all those caveats\u2026)</p>\n</div>\n<div id=\"broken-stuff\">\n<h2>broken stuff:</h2>\n<ul>\n<li>the \u2018request\u2019 object is just the pure WSGI environ at the moment.</li>\n<li>MIME types for templates (and static files)</li>\n<li>routing &lt;with&gt;&lt;vars&gt;</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1035982, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "c1c013a859aa1829582a71d0cfcfdf57", "sha256": "69146aa2c35b144e191df2ac186663a8e29850e23d85ba0ab14284620cd911e8"}, "downloads": -1, "filename": "espressocup-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c1c013a859aa1829582a71d0cfcfdf57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3997, "upload_time": "2014-03-20T10:44:26", "upload_time_iso_8601": "2014-03-20T10:44:26.060208Z", "url": "https://files.pythonhosted.org/packages/cd/83/4259214120c6343645cc0b5f63b6c3017205dde67e20a0c37f61d80c855b/espressocup-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2f75726eb17ccd819bf0b14ebfbfa6d9", "sha256": "628032c6434d96556bb4473d00afe023543ea2545b61808855ceb7ca857dc4c1"}, "downloads": -1, "filename": "espressocup-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2f75726eb17ccd819bf0b14ebfbfa6d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3998, "upload_time": "2014-03-20T10:46:22", "upload_time_iso_8601": "2014-03-20T10:46:22.175806Z", "url": "https://files.pythonhosted.org/packages/c8/84/d8f9e51618fa31ab3a91ad1d7732dbe8f70ebe5326015de22ec43fb348ac/espressocup-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f75726eb17ccd819bf0b14ebfbfa6d9", "sha256": "628032c6434d96556bb4473d00afe023543ea2545b61808855ceb7ca857dc4c1"}, "downloads": -1, "filename": "espressocup-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2f75726eb17ccd819bf0b14ebfbfa6d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3998, "upload_time": "2014-03-20T10:46:22", "upload_time_iso_8601": "2014-03-20T10:46:22.175806Z", "url": "https://files.pythonhosted.org/packages/c8/84/d8f9e51618fa31ab3a91ad1d7732dbe8f70ebe5326015de22ec43fb348ac/espressocup-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:36 2020"}