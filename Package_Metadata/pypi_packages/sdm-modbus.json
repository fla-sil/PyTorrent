{"info": {"author": "nmakel", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# sdm_modbus\n\nsdm_modbus is a python library that collects data from Eastron SDM single- and three-phase kWh meters over Modbus or ModbusTCP.\n\nSupported devices:\n* SDM120\n* SDM630\n\n## Installation\n\nTo install, either clone this project and install using `setuptools`:\n\n```python3 setup.py install```\n\nor install the package from PyPi:\n\n```pip3 install sdm_modbus```\n\n## Usage\n\nThe script `example.py` provides a minimal example of connecting to and displaying all input and holding registers on a **SDM120** over **ModbusTCP**. To display values as a JSON object, add `--json`.\n\n```\nusage: example.py [-h] [--unit UNIT] [--json] host port\n\npositional arguments:\n  host         ModbusTCP address\n  port         ModbusTCP port\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --unit UNIT  Modbus unit\n  --json       Output as JSON\n```\n\nOutput:\n\n```\nSDM120(10.0.0.123:502, unit=0x1):\n\nInput Registers:\n    Voltage: 237.00V\n    Current: 8.63A\n    Power (Active): -1919.70W\n    Power (Apparent): 2035.57VA\n    Power (Reactive): -676.70VA\n    Power Factor: -0.94\n    Phase Angle: 0.00\u00b0\n    Frequency: 50.00Hz\n    Imported Energy (Active): 1551.37kWh\n    Imported Energy (Active): 1335.69kWh\n    Imported Energy (Reactive): 0.01kVAh\n    Exported Energy (Reactive): 4362.14kVAh\n    Total Demand Power (Active): 1668.02W\n    Maximum Total Demand Power (Active): 3347.26W\n    Import Demand Power (Active): 0.00W\n    Maximum Import Demand Power (Active): 3347.26W\n    Export Demand Power (Active): 1668.02W\n    Maximum Export Demand Power (Active): 2109.45W\n    Total Demand Current: 7.57A\n    Maximum Total Demand Current: 14.97A\n    Total Energy (Active): 2887.07kWh\n    Total Energy (Reactive): 0.00kVAh\n\nHolding Registers:\n    Demand Time: 1s\n    Demand Period: 60s\n    Relay Pulse Width: 60ms\n    Network Parity Stop: N-1\n    Meter ID: 1\n    Baud Rate: 9600\n    P1 Output Mode: Export Energy (Active)\n    Display Scroll Timing: 0s\n    P1 Divisor: 0.001kWh/imp\n    Measurement Mode: 0\n    Pulse/LED Indicator Mode: Import + Export Energy (Active)\n```\n\n## Examples\n\nIf you wish to use ModbusTCP the following parameters are relevant:\n\n`host = IP or DNS name of your ModbusTCP gateway, required`  \n`port = listening port of the ModbusTCP gateway, required`  \n`unit = Modbus device id, default=1, optional`\n\nWhile if you are using a serial Modbus connection you can specify:\n\n`device = path to serial device, e.g. /dev/ttyUSB0, required`  \n`baud = baud rate of your SDM unit, defaults to product default, optional`  \n`unit = Modbus unit id, defaults to 1, optional`\n\nConnecting to the meter:\n\n```\n    >>> import sdm_modbus\n\n    # SDM120 over ModbusTCP\n    >>> device = sdm_modbus.SDM120(host=\"10.0.0.123\", port=502)\n\n    # DM630 over Modbus RTU\n    >>> device = sdm_modbus.SDM630(device=\"/dev/ttyUSB0\", baud=9600)\n```\n\nTest the connection:\n\n```\n    >>> device.connected()\n    True\n```\n\nPrinting the class yields basic device parameters:\n\n```\n    >>> device\n    SDM120(10.0.0.123:502, unit=0x1)\n```\n\nReading a single input register by name:\n\n```\n    >>> device.read(\"voltage\")\n    236.89999389648438\n```\n\nRead all input registers by passing the `sdm_modbus.registerType.INPUT` enum to `read_all()`. Leave this blank to read both `INPUT` and `HOLDING` registers:\n\n```\n    >>> device.read_all(sdm_modbus.registerType.INPUT)\n    {\n        \"voltage\": 238.60000610351562,\n        \"current\": 7.59499979019165,\n        \"power_active\": -1673.800048828125,\n        \"power_apparent\": 1797.5904541015625,\n        \"power_reactive\": -655.4000244140625,\n        \"pfactor\": -0.9311425685882568,\n        \"phase_angle\": 0.0,\n        \"frequency\": 50.0,\n        \"import_energy_active\": 1556.35595703125,\n        \"export_energy_active\": 1345.9210205078125,\n        \"import_energy_reactive\": 0.014999999664723873,\n        \"export_energy_reactive\": 4376.02001953125,\n        \"total_demand_power_active\": 1659.360107421875,\n        \"maximum_total_demand_power_active\": 3347.26318359375,\n        \"import_demand_power_active\": 0.0,\n        \"maximum_import_demand_power_active\": 3347.26318359375,\n        \"export_demand_power_active\": 1659.360107421875,\n        \"maximum_export_demand_power_active\": 2109.4541015625,\n        \"total_demand_current\": 7.531858921051025,\n        \"maximum_total_demand_current\": 14.968546867370605,\n        \"total_energy_active\": 2902.277099609375,\n        \"total_energy_reactive\": 4376.03515625\n    }\n\n    >>> device.read_all(sdm_modbus.registerType.HOLDING)\n    {\n        \"demand_time\": 1,\n        \"demand_period\": 60,\n        \"relay_pulse_width\": 60,\n        \"network_parity_stop\": 0,\n        \"meter_id\": 1,\n        \"baud\": 2,\n        \"p1_output_mode\": 4,\n        \"display_scroll_timing\": 0,\n        \"p1_divisor\": 0,\n        \"measurement_mode\": 0,\n        \"indicator_mode\": 0\n    }\n```\n\nTo pretty print all input and holding registers *with* formatting and units:\n\n```\n    >>> device.pprint()\n    SDM120(10.0.0.123:502, unit=0x1):\n\n    Input Registers:\n        Voltage: 237.00V\n        Current: 8.63A\n        Power (Active): -1919.70W\n        Power (Apparent): 2035.57VA\n        Power (Reactive): -676.70VA\n        Power Factor: -0.94\n        Phase Angle: 0.00\u00b0\n        Frequency: 50.00Hz\n        Imported Energy (Active): 1551.37kWh\n        Imported Energy (Active): 1335.69kWh\n        Imported Energy (Reactive): 0.01kVAh\n        Exported Energy (Reactive): 4362.14kVAh\n        Total Demand Power (Active): 1668.02W\n        Maximum Total Demand Power (Active): 3347.26W\n        Import Demand Power (Active): 0.00W\n        Maximum Import Demand Power (Active): 3347.26W\n        Export Demand Power (Active): 1668.02W\n        Maximum Export Demand Power (Active): 2109.45W\n        Total Demand Current: 7.57A\n        Maximum Total Demand Current: 14.97A\n        Total Energy (Active): 2887.07kWh\n        Total Energy (Reactive): 0.00kVAh\n\n    Holding Registers:\n        Demand Time: 1s\n        Demand Period: 60s\n        Relay Pulse Width: 60ms\n        Network Parity Stop: N-1\n        Meter ID: 1\n        Baud Rate: 9600\n        P1 Output Mode: Export Energy (Active)\n        Display Scroll Timing: 0s\n        P1 Divisor: 0.001kWh/imp\n        Measurement Mode: 0\n        Pulse/LED Indicator Mode: Import + Export Energy (Active)\n```\n\nIf you need more information about a particular register, to look up the units or enumerations, for example:\n\n```\n    >>> device.registers[\"voltage\"]\n        # address, length, type, datatype, valuetype, name, unit\n        (0, 2, <registerType.INPUT: 1>, <registerDataType.FLOAT32: 11>, <class 'float'>, 'Voltage', 'V'))\n\n    >>> device.registers[\"p1_divisor\"]\n        (\n            63760, 2, <registerType.HOLDING: 2>, <registerDataType.FLOAT32: 11>, <class 'int'>, \n            'P1 Divisor', ['0.001kWh/imp', '0.01kWh/imp', '0.1kWh/imp', '1kWh/imp']\n        )\n```\n\nWriting to holding registers is also possible. Setting a new baud rate, for example:\n\n```\n    >>> device.write(\"baud\", 2)\n    WriteMultipleRegisterResponse (28,2)\n```\n\n**Remember:** you will need to enable setup mode on your device by pressing the setup button for 5 seconds. You will receive a `Exception Response(134, 6, GatewayNoResponse)` or similar, otherwise.\n\n## Contributing\n\nContributions are more than welcome, especially testing on supported units, and adding other Eastron SDM units.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nmakel/sdm_modbus", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "sdm-modbus", "package_url": "https://pypi.org/project/sdm-modbus/", "platform": "", "project_url": "https://pypi.org/project/sdm-modbus/", "project_urls": {"Homepage": "https://github.com/nmakel/sdm_modbus"}, "release_url": "https://pypi.org/project/sdm-modbus/0.2.2/", "requires_dist": ["pymodbus (>=2.3.0)"], "requires_python": "", "summary": "Eastron SDM Modbus parser library", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sdm_modbus</h1>\n<p>sdm_modbus is a python library that collects data from Eastron SDM single- and three-phase kWh meters over Modbus or ModbusTCP.</p>\n<p>Supported devices:</p>\n<ul>\n<li>SDM120</li>\n<li>SDM630</li>\n</ul>\n<h2>Installation</h2>\n<p>To install, either clone this project and install using <code>setuptools</code>:</p>\n<p><code>python3 setup.py install</code></p>\n<p>or install the package from PyPi:</p>\n<p><code>pip3 install sdm_modbus</code></p>\n<h2>Usage</h2>\n<p>The script <code>example.py</code> provides a minimal example of connecting to and displaying all input and holding registers on a <strong>SDM120</strong> over <strong>ModbusTCP</strong>. To display values as a JSON object, add <code>--json</code>.</p>\n<pre><code>usage: example.py [-h] [--unit UNIT] [--json] host port\n\npositional arguments:\n  host         ModbusTCP address\n  port         ModbusTCP port\n\noptional arguments:\n  -h, --help   show this help message and exit\n  --unit UNIT  Modbus unit\n  --json       Output as JSON\n</code></pre>\n<p>Output:</p>\n<pre><code>SDM120(10.0.0.123:502, unit=0x1):\n\nInput Registers:\n    Voltage: 237.00V\n    Current: 8.63A\n    Power (Active): -1919.70W\n    Power (Apparent): 2035.57VA\n    Power (Reactive): -676.70VA\n    Power Factor: -0.94\n    Phase Angle: 0.00\u00b0\n    Frequency: 50.00Hz\n    Imported Energy (Active): 1551.37kWh\n    Imported Energy (Active): 1335.69kWh\n    Imported Energy (Reactive): 0.01kVAh\n    Exported Energy (Reactive): 4362.14kVAh\n    Total Demand Power (Active): 1668.02W\n    Maximum Total Demand Power (Active): 3347.26W\n    Import Demand Power (Active): 0.00W\n    Maximum Import Demand Power (Active): 3347.26W\n    Export Demand Power (Active): 1668.02W\n    Maximum Export Demand Power (Active): 2109.45W\n    Total Demand Current: 7.57A\n    Maximum Total Demand Current: 14.97A\n    Total Energy (Active): 2887.07kWh\n    Total Energy (Reactive): 0.00kVAh\n\nHolding Registers:\n    Demand Time: 1s\n    Demand Period: 60s\n    Relay Pulse Width: 60ms\n    Network Parity Stop: N-1\n    Meter ID: 1\n    Baud Rate: 9600\n    P1 Output Mode: Export Energy (Active)\n    Display Scroll Timing: 0s\n    P1 Divisor: 0.001kWh/imp\n    Measurement Mode: 0\n    Pulse/LED Indicator Mode: Import + Export Energy (Active)\n</code></pre>\n<h2>Examples</h2>\n<p>If you wish to use ModbusTCP the following parameters are relevant:</p>\n<p><code>host = IP or DNS name of your ModbusTCP gateway, required</code><br>\n<code>port = listening port of the ModbusTCP gateway, required</code><br>\n<code>unit = Modbus device id, default=1, optional</code></p>\n<p>While if you are using a serial Modbus connection you can specify:</p>\n<p><code>device = path to serial device, e.g. /dev/ttyUSB0, required</code><br>\n<code>baud = baud rate of your SDM unit, defaults to product default, optional</code><br>\n<code>unit = Modbus unit id, defaults to 1, optional</code></p>\n<p>Connecting to the meter:</p>\n<pre><code>    &gt;&gt;&gt; import sdm_modbus\n\n    # SDM120 over ModbusTCP\n    &gt;&gt;&gt; device = sdm_modbus.SDM120(host=\"10.0.0.123\", port=502)\n\n    # DM630 over Modbus RTU\n    &gt;&gt;&gt; device = sdm_modbus.SDM630(device=\"/dev/ttyUSB0\", baud=9600)\n</code></pre>\n<p>Test the connection:</p>\n<pre><code>    &gt;&gt;&gt; device.connected()\n    True\n</code></pre>\n<p>Printing the class yields basic device parameters:</p>\n<pre><code>    &gt;&gt;&gt; device\n    SDM120(10.0.0.123:502, unit=0x1)\n</code></pre>\n<p>Reading a single input register by name:</p>\n<pre><code>    &gt;&gt;&gt; device.read(\"voltage\")\n    236.89999389648438\n</code></pre>\n<p>Read all input registers by passing the <code>sdm_modbus.registerType.INPUT</code> enum to <code>read_all()</code>. Leave this blank to read both <code>INPUT</code> and <code>HOLDING</code> registers:</p>\n<pre><code>    &gt;&gt;&gt; device.read_all(sdm_modbus.registerType.INPUT)\n    {\n        \"voltage\": 238.60000610351562,\n        \"current\": 7.59499979019165,\n        \"power_active\": -1673.800048828125,\n        \"power_apparent\": 1797.5904541015625,\n        \"power_reactive\": -655.4000244140625,\n        \"pfactor\": -0.9311425685882568,\n        \"phase_angle\": 0.0,\n        \"frequency\": 50.0,\n        \"import_energy_active\": 1556.35595703125,\n        \"export_energy_active\": 1345.9210205078125,\n        \"import_energy_reactive\": 0.014999999664723873,\n        \"export_energy_reactive\": 4376.02001953125,\n        \"total_demand_power_active\": 1659.360107421875,\n        \"maximum_total_demand_power_active\": 3347.26318359375,\n        \"import_demand_power_active\": 0.0,\n        \"maximum_import_demand_power_active\": 3347.26318359375,\n        \"export_demand_power_active\": 1659.360107421875,\n        \"maximum_export_demand_power_active\": 2109.4541015625,\n        \"total_demand_current\": 7.531858921051025,\n        \"maximum_total_demand_current\": 14.968546867370605,\n        \"total_energy_active\": 2902.277099609375,\n        \"total_energy_reactive\": 4376.03515625\n    }\n\n    &gt;&gt;&gt; device.read_all(sdm_modbus.registerType.HOLDING)\n    {\n        \"demand_time\": 1,\n        \"demand_period\": 60,\n        \"relay_pulse_width\": 60,\n        \"network_parity_stop\": 0,\n        \"meter_id\": 1,\n        \"baud\": 2,\n        \"p1_output_mode\": 4,\n        \"display_scroll_timing\": 0,\n        \"p1_divisor\": 0,\n        \"measurement_mode\": 0,\n        \"indicator_mode\": 0\n    }\n</code></pre>\n<p>To pretty print all input and holding registers <em>with</em> formatting and units:</p>\n<pre><code>    &gt;&gt;&gt; device.pprint()\n    SDM120(10.0.0.123:502, unit=0x1):\n\n    Input Registers:\n        Voltage: 237.00V\n        Current: 8.63A\n        Power (Active): -1919.70W\n        Power (Apparent): 2035.57VA\n        Power (Reactive): -676.70VA\n        Power Factor: -0.94\n        Phase Angle: 0.00\u00b0\n        Frequency: 50.00Hz\n        Imported Energy (Active): 1551.37kWh\n        Imported Energy (Active): 1335.69kWh\n        Imported Energy (Reactive): 0.01kVAh\n        Exported Energy (Reactive): 4362.14kVAh\n        Total Demand Power (Active): 1668.02W\n        Maximum Total Demand Power (Active): 3347.26W\n        Import Demand Power (Active): 0.00W\n        Maximum Import Demand Power (Active): 3347.26W\n        Export Demand Power (Active): 1668.02W\n        Maximum Export Demand Power (Active): 2109.45W\n        Total Demand Current: 7.57A\n        Maximum Total Demand Current: 14.97A\n        Total Energy (Active): 2887.07kWh\n        Total Energy (Reactive): 0.00kVAh\n\n    Holding Registers:\n        Demand Time: 1s\n        Demand Period: 60s\n        Relay Pulse Width: 60ms\n        Network Parity Stop: N-1\n        Meter ID: 1\n        Baud Rate: 9600\n        P1 Output Mode: Export Energy (Active)\n        Display Scroll Timing: 0s\n        P1 Divisor: 0.001kWh/imp\n        Measurement Mode: 0\n        Pulse/LED Indicator Mode: Import + Export Energy (Active)\n</code></pre>\n<p>If you need more information about a particular register, to look up the units or enumerations, for example:</p>\n<pre><code>    &gt;&gt;&gt; device.registers[\"voltage\"]\n        # address, length, type, datatype, valuetype, name, unit\n        (0, 2, &lt;registerType.INPUT: 1&gt;, &lt;registerDataType.FLOAT32: 11&gt;, &lt;class 'float'&gt;, 'Voltage', 'V'))\n\n    &gt;&gt;&gt; device.registers[\"p1_divisor\"]\n        (\n            63760, 2, &lt;registerType.HOLDING: 2&gt;, &lt;registerDataType.FLOAT32: 11&gt;, &lt;class 'int'&gt;, \n            'P1 Divisor', ['0.001kWh/imp', '0.01kWh/imp', '0.1kWh/imp', '1kWh/imp']\n        )\n</code></pre>\n<p>Writing to holding registers is also possible. Setting a new baud rate, for example:</p>\n<pre><code>    &gt;&gt;&gt; device.write(\"baud\", 2)\n    WriteMultipleRegisterResponse (28,2)\n</code></pre>\n<p><strong>Remember:</strong> you will need to enable setup mode on your device by pressing the setup button for 5 seconds. You will receive a <code>Exception Response(134, 6, GatewayNoResponse)</code> or similar, otherwise.</p>\n<h2>Contributing</h2>\n<p>Contributions are more than welcome, especially testing on supported units, and adding other Eastron SDM units.</p>\n\n          </div>"}, "last_serial": 7110900, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "aef524dc06ca6ccc83c4afe9d5379003", "sha256": "a65e5d7272f7cf60fc2895b20c1721e89bad21c3450c364e0c6d80d22b5546b5"}, "downloads": -1, "filename": "sdm_modbus-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aef524dc06ca6ccc83c4afe9d5379003", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6938, "upload_time": "2020-04-25T15:38:35", "upload_time_iso_8601": "2020-04-25T15:38:35.021100Z", "url": "https://files.pythonhosted.org/packages/37/13/2b82cc6c9cdc6397094a81e2e7d77ff022d10f36e7292d3958501497a570/sdm_modbus-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a677df99a3ca26b9bcf5d4e45e86ea88", "sha256": "29fac8b6027f108beed2092603f48c8f65e11c2a7a5ecedb4b5e43a33652eb6d"}, "downloads": -1, "filename": "sdm_modbus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a677df99a3ca26b9bcf5d4e45e86ea88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7319, "upload_time": "2020-04-25T15:38:37", "upload_time_iso_8601": "2020-04-25T15:38:37.108971Z", "url": "https://files.pythonhosted.org/packages/79/93/c5d47345280a51635d0b394800bf4e8597f799e14f7cd146ad5c745be933/sdm_modbus-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "bbc91874355817a427765a8b43916c85", "sha256": "1670b5c7869987edf7e086c7cf7e2c50b8c6ae3c66f4737c91615b8591d7dcd9"}, "downloads": -1, "filename": "sdm_modbus-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bbc91874355817a427765a8b43916c85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7601, "upload_time": "2020-04-26T15:11:20", "upload_time_iso_8601": "2020-04-26T15:11:20.853016Z", "url": "https://files.pythonhosted.org/packages/d0/fc/019f929a365d19b735b33b3205e19ea8a59c2b1a65231c7957c55ba30264/sdm_modbus-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a878a40f0d7a114cb90bd74f1512d8b3", "sha256": "c5ec6c834e52c861ba5fec754a1519fbe302dbf1a99c0a7f73527cc97bfb4247"}, "downloads": -1, "filename": "sdm_modbus-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a878a40f0d7a114cb90bd74f1512d8b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9062, "upload_time": "2020-04-26T15:11:22", "upload_time_iso_8601": "2020-04-26T15:11:22.578794Z", "url": "https://files.pythonhosted.org/packages/a1/0b/7a0c48717e2d2126e6b98082955c0ede1799f5522ae0986bc93f325e14c0/sdm_modbus-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d6f269e3a4ff49924816c1788d58789f", "sha256": "0afd16005ad95135fe46315085aaf3848a0caca9b5b49ebf1bcf0b57287edc97"}, "downloads": -1, "filename": "sdm_modbus-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6f269e3a4ff49924816c1788d58789f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7800, "upload_time": "2020-04-27T11:30:58", "upload_time_iso_8601": "2020-04-27T11:30:58.004907Z", "url": "https://files.pythonhosted.org/packages/97/b3/81c13284b11f31888119e75dd6dead6e02a7ef258d03e3f37b678d7fbbe9/sdm_modbus-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af826779b858681f92698294714f1445", "sha256": "9bc80d12a5e5f549be0b032db843d907b2f1f7fc9b6ef90fc69374e2284a1dcb"}, "downloads": -1, "filename": "sdm_modbus-0.2.2.tar.gz", "has_sig": false, "md5_digest": "af826779b858681f92698294714f1445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9610, "upload_time": "2020-04-27T11:31:00", "upload_time_iso_8601": "2020-04-27T11:31:00.635900Z", "url": "https://files.pythonhosted.org/packages/c5/1e/4a088ab49277eabff19d9827c6c895687183a77302464b4ed0061c1879c1/sdm_modbus-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6f269e3a4ff49924816c1788d58789f", "sha256": "0afd16005ad95135fe46315085aaf3848a0caca9b5b49ebf1bcf0b57287edc97"}, "downloads": -1, "filename": "sdm_modbus-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d6f269e3a4ff49924816c1788d58789f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7800, "upload_time": "2020-04-27T11:30:58", "upload_time_iso_8601": "2020-04-27T11:30:58.004907Z", "url": "https://files.pythonhosted.org/packages/97/b3/81c13284b11f31888119e75dd6dead6e02a7ef258d03e3f37b678d7fbbe9/sdm_modbus-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af826779b858681f92698294714f1445", "sha256": "9bc80d12a5e5f549be0b032db843d907b2f1f7fc9b6ef90fc69374e2284a1dcb"}, "downloads": -1, "filename": "sdm_modbus-0.2.2.tar.gz", "has_sig": false, "md5_digest": "af826779b858681f92698294714f1445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9610, "upload_time": "2020-04-27T11:31:00", "upload_time_iso_8601": "2020-04-27T11:31:00.635900Z", "url": "https://files.pythonhosted.org/packages/c5/1e/4a088ab49277eabff19d9827c6c895687183a77302464b4ed0061c1879c1/sdm_modbus-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:15 2020"}