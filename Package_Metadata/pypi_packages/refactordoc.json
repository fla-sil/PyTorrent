{"info": {"author": "Enthought Ltd", "author_email": "info@enthought.com", "bugtrack_url": null, "classifiers": [], "description": "RefactorDoc: Docstring refactor sphinx extension\n================================================\n\n[![Build Status](https://travis-ci.org/enthought/refactordoc.svg?branch=master)](https://travis-ci.org/enthought/refactordoc)\n[![Coverage Status](https://img.shields.io/coveralls/enthought/refactordoc.svg)](https://coveralls.io/r/enthought/refactordoc?branch=master)\n\n\nThe RefactorDoc extension parses the function and class docstrings as\nthey are retrieved by the autodoc extension and refactors the section\nblocks into sphinx friendly rst. The extension shares similarities\nwith alternatives (such as numpydoc) but aims at reflecting the\noriginal form of the docstring.\n\nKey aims of RefactorDoc are:\n\n    - Do not change the order of sections.\n    - Allow sphinx directives between (and inside) section blocks.\n    - Easier to debug (native support for debugging) and extend\n      (future versions).\n\nRepository\n----------\n\nThe RefactorDoc extension lives at Github. You can clone the repository\nusing::\n\n    $ git clone https://github.com/enthought/refactordoc.git\n\n\nInstallation\n------------\n\n1. Install ``refactordoc`` from pypi using pip::\n\n    $ pip install reafactordoc\n\n2. Add refactor-doc to the extensions variable of your sphinx ``conf.py``::\n\n    extensions = [\n        ...,\n        'refactordoc',\n        ...,\n    ]\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "refactordoc", "package_url": "https://pypi.org/project/refactordoc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/refactordoc/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/refactordoc/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>[![Build Status](<a href=\"https://travis-ci.org/enthought/refactordoc.svg?branch=master)%5D(https://travis-ci.org/enthought/refactordoc\" rel=\"nofollow\">https://travis-ci.org/enthought/refactordoc.svg?branch=master)](https://travis-ci.org/enthought/refactordoc</a>)\n[![Coverage Status](<a href=\"https://img.shields.io/coveralls/enthought/refactordoc.svg)%5D(https://coveralls.io/r/enthought/refactordoc?branch=master\" rel=\"nofollow\">https://img.shields.io/coveralls/enthought/refactordoc.svg)](https://coveralls.io/r/enthought/refactordoc?branch=master</a>)</p>\n<p>The RefactorDoc extension parses the function and class docstrings as\nthey are retrieved by the autodoc extension and refactors the section\nblocks into sphinx friendly rst. The extension shares similarities\nwith alternatives (such as numpydoc) but aims at reflecting the\noriginal form of the docstring.</p>\n<p>Key aims of RefactorDoc are:</p>\n<blockquote>\n<ul>\n<li>Do not change the order of sections.</li>\n<li>Allow sphinx directives between (and inside) section blocks.</li>\n<li>Easier to debug (native support for debugging) and extend\n(future versions).</li>\n</ul>\n</blockquote>\n<div id=\"repository\">\n<h2>Repository</h2>\n<p>The RefactorDoc extension lives at Github. You can clone the repository\nusing:</p>\n<pre>$ git clone https://github.com/enthought/refactordoc.git\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install <tt>refactordoc</tt> from pypi using pip:</p>\n<pre>$ pip install reafactordoc\n</pre>\n</li>\n<li><p>Add refactor-doc to the extensions variable of your sphinx <tt>conf.py</tt>:</p>\n<pre>extensions = [\n    ...,\n    'refactordoc',\n    ...,\n]\n</pre>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 1102212, "releases": {"0.3.1": [{"comment_text": "", "digests": {"md5": "fb597b6913aedce61306d5a64ef3838e", "sha256": "64f23ae44f347cf3c03cd24267a5aced547d34fae395f0dcc192d2ef56626df7"}, "downloads": -1, "filename": "refactordoc-0.3.1.tar.gz", "has_sig": false, "md5_digest": "fb597b6913aedce61306d5a64ef3838e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11314, "upload_time": "2014-05-23T15:43:48", "upload_time_iso_8601": "2014-05-23T15:43:48.664622Z", "url": "https://files.pythonhosted.org/packages/5f/0e/f19527a334a03b73fea7af787d91b88d84bf69f49db807f75595c29dcdb4/refactordoc-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb597b6913aedce61306d5a64ef3838e", "sha256": "64f23ae44f347cf3c03cd24267a5aced547d34fae395f0dcc192d2ef56626df7"}, "downloads": -1, "filename": "refactordoc-0.3.1.tar.gz", "has_sig": false, "md5_digest": "fb597b6913aedce61306d5a64ef3838e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11314, "upload_time": "2014-05-23T15:43:48", "upload_time_iso_8601": "2014-05-23T15:43:48.664622Z", "url": "https://files.pythonhosted.org/packages/5f/0e/f19527a334a03b73fea7af787d91b88d84bf69f49db807f75595c29dcdb4/refactordoc-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:27 2020"}