{"info": {"author": "Timothee Paquatte <timothee.paquatte@polytechnique.edu>, Harrison Goldstein <hgo@seas.upenn.edu>", "author_email": "hgo@seas.upenn.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Testing"], "description": "# Mutagen\n\nMutagen is a plugin to pytest that makes it easy to do mutation testing. Mutation testing is a\nmethod of testing your tests. Mutagen helps you to define \"mutant\" versions of your code---code\nwhich is intentionally buggy---then you run your test suite on these mutants and verify that your\ntests actually catch the bugs. Mutation testing helps you to gauge test coverage and verify that\nyour tests are good enough to exercise interesting behaviors in your code.\n\n## For Property-Based Testing\n\nIf you are a user of a *property-based testing* framework such as Hypothesis, mutation testing can\nalso be used to test your input generators. It is relatively easy to write a generator that cannot\ngenerate a certain kind of input. Mutation testing can be used to find those gaps.\n\n\n# Installation\n\n```\npython3 -m pip install pytest-mutagen\n```\n\n# Usage\n## Python import\n`import pytest_mutagen as mg`\n\n## Declare a mutant\n* **Mutant function** \\\n\tTo mutate a whole function you have to write the new version of the function, decorated with `@mg.mutant_of(function_qual_name, mutant_name, file (optional), description (optional))`. If the mutations affect an object (function or class) you have to be sure that this object exists in the `__globals__` symbols table of either the test functions or the mutated functions. For this purpose you can simply write `from [your_module] import [target_object]` in the test file or in the mutation file.\n\tExample :\n\n\t```python\n\tdef  inc(x):\n\t\treturn x + 1\n\n\t@mg.mutant_of(\"inc\", \"INC_OBO\", description=\"Increment is off by one.\")\n\tdef  inc_mut(x):\n\t\treturn x + 2\n\t```\n\n* **Mutant expression** \\\n\tIf you don't want to change the whole function but only one line, you must decorate the function with `@mg.has_mutant(mutant_name, file (optional), description (optional))`. Then you have two ways to do it :\n\n  * By replacing the expression by the `mg.mut(mutant_name, normal_expression, mutant_expression)` function, using lambda expressions. \\\n\t\t\tExample :\n\t\t\t`mg.mut(\"FLIP_LT\", lambda: a < b, lambda: b < a)`\n\n  * Using the `mg.not_mutant(mutant_name)` function combined with an `if` statement. \\\n\t\t\tExample :\n\t\t\t`k = inc(k) if mg.not_mutant(\"INC_OBO2\") else inc(k) + 1`\n\n### Mutating a class method\n\nIn fact the `@mutant_of` decorator doesn't require the function name but its fully qualified name. It does not change anything for top-level functions but in the case of a class method you need to write the dotted path leading to the object from the module top-level.\nExample :\n```python\nclass Foo:\n\tdef bar(self):\n\t\tpass\n\n\t@staticmethod\n\tdef static_bar():\n\t\tpass\n\n@mg.mutant_of(\"Foo.bar\", \"\")\ndef bar_mut(self):\n\tpass\n\n@mg.mutant_of(\"Foo.static_bar\", \"\")\ndef static_bar_mut():\n\tpass\n```\n\n## Global functioning\n\nMutagen collects all declared mutants, stored per file names. Then it looks through all tests collected by pytest and apply the mutants to the matching files. This is handled by the optional file parameter in `@has_mutant` and `@mutant_of` which can be a file name or a list of file names where you want your mutant to be applied. You can set it to APPLY_TO_ALL (constant string declared in mutagen) if you want it to be applied to all collected files. By default, file is :\n* APPLY_TO_ALL for `@has_mutant`\n* the current file name for `@mutant_of` (the one where it is written)\n\nTherefore you can either :\n* write your mutations and specify for each one where you want it to be applied (use the function `mg.link_to_file(filename)` at the beginning of your file to link the current file to the specified filename)\n* or create a mutations.py file where you import all test files you want (`from testfile.py import *`), write your `mutant_of` with no file specified and run pytest on mutation.py.\n\n## Run the tests\n\n`python3 -m pytest --mutate`\n\n> The `--quick-mut` option will stop each mutant after its first failed test. If not specified each mutant will run the whole test suite\n\n### Cache use\n\nMutagen stores in the pytest cache the functions that failed during the last run, for each mutant. For the next runs it will try these functions first, in order to find failures more quickly. If you don't need this feature you can simply use the `--cache-clear` option that will clear the cache before running the tests.\n\n### Run only the mutations\n\nIf you don't want to run the original test suite but only the mutations you can use the pytest option `--collect-only`\n\n## Examples\nYou can find some examples in the examples folder\n* The file short_example.py is a very simple example of the use of mutagen to test a merge sort function\n* The file BST_mutations.py implements the Binary Search Tree data structure, and the test suite and mutations from _How to specify it!_ (John Hughes, 2019)\n* The subfolder separate_files is an example of the separation between the source file, the test file and the mutation file\n\n\nThe run-tests.py scripts show how to run these tests\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hgoldstein95/pytest-mutagen", "keywords": "python testing property-based-testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-mutagen", "package_url": "https://pypi.org/project/pytest-mutagen/", "platform": "", "project_url": "https://pypi.org/project/pytest-mutagen/", "project_urls": {"Homepage": "https://github.com/hgoldstein95/pytest-mutagen"}, "release_url": "https://pypi.org/project/pytest-mutagen/1.0.5/", "requires_dist": ["pytest (>=5.4)"], "requires_python": ">=3.6", "summary": "Add the mutation testing feature to pytest", "version": "1.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mutagen</h1>\n<p>Mutagen is a plugin to pytest that makes it easy to do mutation testing. Mutation testing is a\nmethod of testing your tests. Mutagen helps you to define \"mutant\" versions of your code---code\nwhich is intentionally buggy---then you run your test suite on these mutants and verify that your\ntests actually catch the bugs. Mutation testing helps you to gauge test coverage and verify that\nyour tests are good enough to exercise interesting behaviors in your code.</p>\n<h2>For Property-Based Testing</h2>\n<p>If you are a user of a <em>property-based testing</em> framework such as Hypothesis, mutation testing can\nalso be used to test your input generators. It is relatively easy to write a generator that cannot\ngenerate a certain kind of input. Mutation testing can be used to find those gaps.</p>\n<h1>Installation</h1>\n<pre><code>python3 -m pip install pytest-mutagen\n</code></pre>\n<h1>Usage</h1>\n<h2>Python import</h2>\n<p><code>import pytest_mutagen as mg</code></p>\n<h2>Declare a mutant</h2>\n<ul>\n<li>\n<p><strong>Mutant function</strong> <br>\nTo mutate a whole function you have to write the new version of the function, decorated with <code>@mg.mutant_of(function_qual_name, mutant_name, file (optional), description (optional))</code>. If the mutations affect an object (function or class) you have to be sure that this object exists in the <code>__globals__</code> symbols table of either the test functions or the mutated functions. For this purpose you can simply write <code>from [your_module] import [target_object]</code> in the test file or in the mutation file.\nExample :</p>\n<pre> <span class=\"k\">def</span>  <span class=\"nf\">inc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n \t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n <span class=\"nd\">@mg</span><span class=\"o\">.</span><span class=\"n\">mutant_of</span><span class=\"p\">(</span><span class=\"s2\">\"inc\"</span><span class=\"p\">,</span> <span class=\"s2\">\"INC_OBO\"</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"Increment is off by one.\"</span><span class=\"p\">)</span>\n <span class=\"k\">def</span>  <span class=\"nf\">inc_mut</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n \t<span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span>\n</pre>\n</li>\n<li>\n<p><strong>Mutant expression</strong> <br>\nIf you don't want to change the whole function but only one line, you must decorate the function with <code>@mg.has_mutant(mutant_name, file (optional), description (optional))</code>. Then you have two ways to do it :</p>\n<ul>\n<li>\n<p>By replacing the expression by the <code>mg.mut(mutant_name, normal_expression, mutant_expression)</code> function, using lambda expressions. <br>\nExample :\n<code>mg.mut(\"FLIP_LT\", lambda: a &lt; b, lambda: b &lt; a)</code></p>\n</li>\n<li>\n<p>Using the <code>mg.not_mutant(mutant_name)</code> function combined with an <code>if</code> statement. <br>\nExample :\n<code>k = inc(k) if mg.not_mutant(\"INC_OBO2\") else inc(k) + 1</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Mutating a class method</h3>\n<p>In fact the <code>@mutant_of</code> decorator doesn't require the function name but its fully qualified name. It does not change anything for top-level functions but in the case of a class method you need to write the dotted path leading to the object from the module top-level.\nExample :</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">pass</span>\n\n\t<span class=\"nd\">@staticmethod</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">static_bar</span><span class=\"p\">():</span>\n\t\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@mg</span><span class=\"o\">.</span><span class=\"n\">mutant_of</span><span class=\"p\">(</span><span class=\"s2\">\"Foo.bar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar_mut</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n\n<span class=\"nd\">@mg</span><span class=\"o\">.</span><span class=\"n\">mutant_of</span><span class=\"p\">(</span><span class=\"s2\">\"Foo.static_bar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">static_bar_mut</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n</pre>\n<h2>Global functioning</h2>\n<p>Mutagen collects all declared mutants, stored per file names. Then it looks through all tests collected by pytest and apply the mutants to the matching files. This is handled by the optional file parameter in <code>@has_mutant</code> and <code>@mutant_of</code> which can be a file name or a list of file names where you want your mutant to be applied. You can set it to APPLY_TO_ALL (constant string declared in mutagen) if you want it to be applied to all collected files. By default, file is :</p>\n<ul>\n<li>APPLY_TO_ALL for <code>@has_mutant</code></li>\n<li>the current file name for <code>@mutant_of</code> (the one where it is written)</li>\n</ul>\n<p>Therefore you can either :</p>\n<ul>\n<li>write your mutations and specify for each one where you want it to be applied (use the function <code>mg.link_to_file(filename)</code> at the beginning of your file to link the current file to the specified filename)</li>\n<li>or create a mutations.py file where you import all test files you want (<code>from testfile.py import *</code>), write your <code>mutant_of</code> with no file specified and run pytest on mutation.py.</li>\n</ul>\n<h2>Run the tests</h2>\n<p><code>python3 -m pytest --mutate</code></p>\n<blockquote>\n<p>The <code>--quick-mut</code> option will stop each mutant after its first failed test. If not specified each mutant will run the whole test suite</p>\n</blockquote>\n<h3>Cache use</h3>\n<p>Mutagen stores in the pytest cache the functions that failed during the last run, for each mutant. For the next runs it will try these functions first, in order to find failures more quickly. If you don't need this feature you can simply use the <code>--cache-clear</code> option that will clear the cache before running the tests.</p>\n<h3>Run only the mutations</h3>\n<p>If you don't want to run the original test suite but only the mutations you can use the pytest option <code>--collect-only</code></p>\n<h2>Examples</h2>\n<p>You can find some examples in the examples folder</p>\n<ul>\n<li>The file short_example.py is a very simple example of the use of mutagen to test a merge sort function</li>\n<li>The file BST_mutations.py implements the Binary Search Tree data structure, and the test suite and mutations from <em>How to specify it!</em> (John Hughes, 2019)</li>\n<li>The subfolder separate_files is an example of the separation between the source file, the test file and the mutation file</li>\n</ul>\n<p>The run-tests.py scripts show how to run these tests</p>\n\n          </div>"}, "last_serial": 7159342, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "54d44b85b5485f393ca9152edbdf46aa", "sha256": "e53253cbf0bf59fec2c140f09866b776546a05032c8019a322c9f24c0359058f"}, "downloads": -1, "filename": "pytest_mutagen-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "54d44b85b5485f393ca9152edbdf46aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4287, "upload_time": "2020-04-29T12:45:46", "upload_time_iso_8601": "2020-04-29T12:45:46.340696Z", "url": "https://files.pythonhosted.org/packages/8c/eb/27eec90ff35a58d783b7ca6f5fc563181515e18b535ac97a48fef0748acc/pytest_mutagen-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "19f50c31654cf652c30e363fa43ce9d0", "sha256": "1482a0daebb44d96a97c5b757f9b9efc958c9523ffc8051e3857688f8ba8e8a3"}, "downloads": -1, "filename": "pytest-mutagen-1.0.tar.gz", "has_sig": false, "md5_digest": "19f50c31654cf652c30e363fa43ce9d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3603, "upload_time": "2020-04-29T12:45:48", "upload_time_iso_8601": "2020-04-29T12:45:48.393952Z", "url": "https://files.pythonhosted.org/packages/6e/e5/9c1e8f1f9e2b6040e98ac43d8f156fa26944135cec25c58c305feac0991d/pytest-mutagen-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f85380aac07aa4580732cac870d3b298", "sha256": "4938e11d169585661f8450cc01e0fefa572ad1668e1d8141a24bdfd7b2616486"}, "downloads": -1, "filename": "pytest_mutagen-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f85380aac07aa4580732cac870d3b298", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4186, "upload_time": "2020-04-29T14:01:47", "upload_time_iso_8601": "2020-04-29T14:01:47.447448Z", "url": "https://files.pythonhosted.org/packages/de/6d/72e68e1254f6f8dc0b965cde3cb9fa8faae73ef0f3ed894b0fca890335d4/pytest_mutagen-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b2f44dbecde69cbfb03aaa2e115c7e1", "sha256": "e02cf0c6568faa42e20881d728e77d4956f69080422ba5eb32ae268fc4ad9fcb"}, "downloads": -1, "filename": "pytest-mutagen-1.0.1.tar.gz", "has_sig": false, "md5_digest": "6b2f44dbecde69cbfb03aaa2e115c7e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3437, "upload_time": "2020-04-29T14:01:49", "upload_time_iso_8601": "2020-04-29T14:01:49.782883Z", "url": "https://files.pythonhosted.org/packages/d1/20/05895105276e2aaf4522aadd6121d280a16c0eec0889889fe10e594811c8/pytest-mutagen-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "46cb306bcad3598e17134a8c423a8f9c", "sha256": "350c9e9641e49789f7fe4cdfa9f246e0eb0316c2c8312fff23a14475c611446e"}, "downloads": -1, "filename": "pytest_mutagen-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "46cb306bcad3598e17134a8c423a8f9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7246, "upload_time": "2020-04-29T14:25:09", "upload_time_iso_8601": "2020-04-29T14:25:09.252580Z", "url": "https://files.pythonhosted.org/packages/3b/82/c1198256d1e2f0807ae3717e1be1692df5c2a7b7cbb76ed19666221ed354/pytest_mutagen-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "485e233582e376799b735f61926cbeb2", "sha256": "849723d8564fb5458e380fd0c596b910bccab303b96d43a5f96da9cf13887d29"}, "downloads": -1, "filename": "pytest-mutagen-1.0.2.tar.gz", "has_sig": false, "md5_digest": "485e233582e376799b735f61926cbeb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5934, "upload_time": "2020-04-29T14:25:12", "upload_time_iso_8601": "2020-04-29T14:25:12.336452Z", "url": "https://files.pythonhosted.org/packages/86/0d/3b3470f79dedf3980163a94594b2d8bafc01ec4f8b2069454fb711b904e1/pytest-mutagen-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "f8a5a4877a1daa0c6732a38c6fade065", "sha256": "a933d4f331bae01d6e34020e2a35d0e9934d4f5db5d87051cdc1805c628554b0"}, "downloads": -1, "filename": "pytest_mutagen-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f8a5a4877a1daa0c6732a38c6fade065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7263, "upload_time": "2020-04-29T17:04:55", "upload_time_iso_8601": "2020-04-29T17:04:55.311135Z", "url": "https://files.pythonhosted.org/packages/40/4c/bb4942fc8bd695dfe3972c75b3ef72245d8c407ba5cc54cd8e5420966954/pytest_mutagen-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7047059104a829dcc497eb0f892f949", "sha256": "0f68174cc5afdfd4c9b373949b9ff41eac3fe8f64981f52e40fa58411d1215c7"}, "downloads": -1, "filename": "pytest-mutagen-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a7047059104a829dcc497eb0f892f949", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5928, "upload_time": "2020-04-29T17:04:59", "upload_time_iso_8601": "2020-04-29T17:04:59.015732Z", "url": "https://files.pythonhosted.org/packages/c2/b7/32b30b58b59ee8c01af890eb93b8b8fbcf3cba9cfbca46c80cf90ebb4f80/pytest-mutagen-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "cdfb651b03572c46de43d06456092c03", "sha256": "16918c75eb9b2a59c42050032525479987eba735373a4202fdb684dc65aa75a6"}, "downloads": -1, "filename": "pytest_mutagen-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cdfb651b03572c46de43d06456092c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7270, "upload_time": "2020-04-29T17:09:57", "upload_time_iso_8601": "2020-04-29T17:09:57.298894Z", "url": "https://files.pythonhosted.org/packages/a6/47/cb3204a3d0a92ff90c1dc168c199216adf1f390a3daea250bc135e5c6ff0/pytest_mutagen-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aba4e5e3364ecc9cd55cb809f86b4a7f", "sha256": "0c4fc8b1fdbc067186ea5bce02eaf48a9c36c9d12ff3ce8b521f7efe31ddc3f5"}, "downloads": -1, "filename": "pytest-mutagen-1.0.4.tar.gz", "has_sig": false, "md5_digest": "aba4e5e3364ecc9cd55cb809f86b4a7f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5927, "upload_time": "2020-04-29T17:10:01", "upload_time_iso_8601": "2020-04-29T17:10:01.291661Z", "url": "https://files.pythonhosted.org/packages/c0/02/8e3fee9939a4470e59a66e04fa2ec828d6fb5bdda220f095fe66a5ea1ffa/pytest-mutagen-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "80dbb4687989ffe102c05f79b0488f22", "sha256": "ed61f9adf5d9c510111535616c2d8e6961e8358df956daf4d4ef37782698cece"}, "downloads": -1, "filename": "pytest_mutagen-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "80dbb4687989ffe102c05f79b0488f22", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8435, "upload_time": "2020-05-03T19:47:09", "upload_time_iso_8601": "2020-05-03T19:47:09.233993Z", "url": "https://files.pythonhosted.org/packages/85/58/9baaccd4e63c7e8fe669707a5775733f4e866f0eb571cddd679a9f87e3cc/pytest_mutagen-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ed478aec9599c36dd4ef3aef974f986", "sha256": "ea47d2766f2f55b885a14a3efb1bcb3cf0b6410d5911b6abb14e780e0a1cbdfe"}, "downloads": -1, "filename": "pytest-mutagen-1.0.5.tar.gz", "has_sig": false, "md5_digest": "7ed478aec9599c36dd4ef3aef974f986", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7083, "upload_time": "2020-05-03T19:47:13", "upload_time_iso_8601": "2020-05-03T19:47:13.834115Z", "url": "https://files.pythonhosted.org/packages/af/20/b41d3b8b1fcbd8a4c9e127bcc370a67ee2094835634e4347cbc8ed2aa269/pytest-mutagen-1.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80dbb4687989ffe102c05f79b0488f22", "sha256": "ed61f9adf5d9c510111535616c2d8e6961e8358df956daf4d4ef37782698cece"}, "downloads": -1, "filename": "pytest_mutagen-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "80dbb4687989ffe102c05f79b0488f22", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8435, "upload_time": "2020-05-03T19:47:09", "upload_time_iso_8601": "2020-05-03T19:47:09.233993Z", "url": "https://files.pythonhosted.org/packages/85/58/9baaccd4e63c7e8fe669707a5775733f4e866f0eb571cddd679a9f87e3cc/pytest_mutagen-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ed478aec9599c36dd4ef3aef974f986", "sha256": "ea47d2766f2f55b885a14a3efb1bcb3cf0b6410d5911b6abb14e780e0a1cbdfe"}, "downloads": -1, "filename": "pytest-mutagen-1.0.5.tar.gz", "has_sig": false, "md5_digest": "7ed478aec9599c36dd4ef3aef974f986", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7083, "upload_time": "2020-05-03T19:47:13", "upload_time_iso_8601": "2020-05-03T19:47:13.834115Z", "url": "https://files.pythonhosted.org/packages/af/20/b41d3b8b1fcbd8a4c9e127bcc370a67ee2094835634e4347cbc8ed2aa269/pytest-mutagen-1.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:57 2020"}