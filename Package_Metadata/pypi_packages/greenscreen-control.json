{"info": {"author": "Dermot Duffy", "author_email": "dermot.duffy@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Home Automation", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Overview of GreenScreen control\n===============================\n\nA simple module, command line utility and tcp server to headlessly control a\n`GreenScreen <http://greenscreen.io>`_ installation and a set of\nChromecasts. Controls the assignment of GreenScreen channels to\nChromecasts using the GreenScreen API, and then can start/stop casting\nto a particular Chromecast.\n\nRequires a working `GreenScreen <http://greenscreen.io>`_ installation.\n\nAppID\n-----\n\nIn these instructions, $APPID is the value of your \"Application ID\" from the\n`Google Cast Developer Console <https://cast.google.com/publish/>`_. This will\nhave been setup as part of the `GreenScreen <http://greenscreen.io>`_\ninstallation.\n\nUsing the command line utility\n------------------------------\n\nSet the CCTV channel on the Kitchen Chromecast:\n\n::\n\n    $ greenscreen_control -c CCTV set-channel Kitchen\n\nStart casting a given AppID on a Chromecast:\n\n::\n\n    $ greenscreen_control -a $APPID cast Kitchen\n\nStop casting on the Kitchen Chromecast:\n\n::\n\n    $ greenscreen_control stop-cast Kitchen\n\nAvailable arguments:\n\n::\n\n    usage: greenscreen_control_cli.py [-h] [-g GREENSCREEN_SERVER] [-a APPID]\n                                      [-c CHANNEL] [-l {ERROR,WARNING,INFO,DEBUG}]\n                                      [-r TRIES] [-t TIMEOUT] [-w RETRY_WAIT]\n                                      {set-channel,cast,stop-cast} chromecast\n\n    positional arguments:\n      {set-channel,cast,stop-cast}\n                            Command\n      chromecast            Chromecast name\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -g GREENSCREEN_SERVER, --greenscreen_server GREENSCREEN_SERVER\n                            GreenScreen server:port\n      -a APPID, --appid APPID\n                            Chromecast Greenscreen App ID\n      -c CHANNEL, --channel CHANNEL\n                            GreenScreen channel to set\n      -l {ERROR,WARNING,INFO,DEBUG}, --loglevel {ERROR,WARNING,INFO,DEBUG}\n                            Logging level\n      -r TRIES, --tries TRIES\n                            Chromecast connection tries. Default is infinite.\n      -t TIMEOUT, --timeout TIMEOUT\n                            Chromecast socket timeout seconds. Default is 30.\n      -w RETRY_WAIT, --retry_wait RETRY_WAIT\n                            Seconds to wait between Chromecast retries. Default is\n                            5.\n\n\nStarting the server\n-------------------\n\nStart a simple TCP server (default port 4995) to control greenscreen and\nChromecast casting.\n\n::\n\n    $ greenscreen_control_server -l INFO -a $APPID\n\nAvailable arguments:\n\n::\n\n    usage: greenscreen_control_server.py [-h] [-g GREENSCREEN_SERVER] [-a APPID]\n                                         [-c CHANNEL]\n                                         [-l {ERROR,WARNING,INFO,DEBUG}]\n                                         [-r TRIES] [-t TIMEOUT] [-w RETRY_WAIT]\n                                         [-p PORT]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -g GREENSCREEN_SERVER, --greenscreen_server GREENSCREEN_SERVER\n                            GreenScreen server:port\n      -a APPID, --appid APPID\n                            Chromecast Greenscreen App ID\n      -c CHANNEL, --channel CHANNEL\n                            GreenScreen channel to set\n      -l {ERROR,WARNING,INFO,DEBUG}, --loglevel {ERROR,WARNING,INFO,DEBUG}\n                            Logging level\n      -r TRIES, --tries TRIES\n                            Chromecast connection tries. Default is infinite.\n      -t TIMEOUT, --timeout TIMEOUT\n                            Chromecast socket timeout seconds. Default is 30.\n      -w RETRY_WAIT, --retry_wait RETRY_WAIT\n                            Seconds to wait between Chromecast retries. Default is\n                            5.\n      -p PORT, --port PORT  TCP server port number\n\n\nServer Protocol\n---------------\n\nThe TCP server uses a simple line-based protocol, easily controlled from\nscripts, cron or home automation.\n\nAssign the \"CCTV\" channel to the \"Kitchen\" chromecast, and start casting\nit:\n\n::\n\n    chromecast=Kitchen,channel=CCTV,cast=1\n\nAssign the \"CCTV\" channel to the \"Kitchen\" chromecast, don't cast it\n(either prepares for future casting, or assumes already casted):\n\n::\n\n    chromecast=Kitchen,channel=CCTV\n\nCast the currently assigned channel (whatever that is):\n\n::\n\n    chromecast=Kitchen,cast=1\n\nStop casting:\n\n::\n\n    chromecast=Kitchen,cast=0\n\nStarting the server by default\n------------------------------\n\nUse the included greenscreen_control.service to start the server as a systemd\nunit.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dermotduffy/greenscreen_control", "keywords": "greenscreen chromecast cast", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "greenscreen-control", "package_url": "https://pypi.org/project/greenscreen-control/", "platform": "any", "project_url": "https://pypi.org/project/greenscreen-control/", "project_urls": {"Homepage": "https://github.com/dermotduffy/greenscreen_control"}, "release_url": "https://pypi.org/project/greenscreen-control/0.0.2/", "requires_dist": ["PyChromecast (>=0.8.1)", "Twisted (>=16.0.0)"], "requires_python": "", "summary": "Python module, server and utility to control greenscreen.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple module, command line utility and tcp server to headlessly control a\n<a href=\"http://greenscreen.io\" rel=\"nofollow\">GreenScreen</a> installation and a set of\nChromecasts. Controls the assignment of GreenScreen channels to\nChromecasts using the GreenScreen API, and then can start/stop casting\nto a particular Chromecast.</p>\n<p>Requires a working <a href=\"http://greenscreen.io\" rel=\"nofollow\">GreenScreen</a> installation.</p>\n<div id=\"appid\">\n<h2>AppID</h2>\n<p>In these instructions, $APPID is the value of your \u201cApplication ID\u201d from the\n<a href=\"https://cast.google.com/publish/\" rel=\"nofollow\">Google Cast Developer Console</a>. This will\nhave been setup as part of the <a href=\"http://greenscreen.io\" rel=\"nofollow\">GreenScreen</a>\ninstallation.</p>\n</div>\n<div id=\"using-the-command-line-utility\">\n<h2>Using the command line utility</h2>\n<p>Set the CCTV channel on the Kitchen Chromecast:</p>\n<pre>$ greenscreen_control -c CCTV set-channel Kitchen\n</pre>\n<p>Start casting a given AppID on a Chromecast:</p>\n<pre>$ greenscreen_control -a $APPID cast Kitchen\n</pre>\n<p>Stop casting on the Kitchen Chromecast:</p>\n<pre>$ greenscreen_control stop-cast Kitchen\n</pre>\n<p>Available arguments:</p>\n<pre>usage: greenscreen_control_cli.py [-h] [-g GREENSCREEN_SERVER] [-a APPID]\n                                  [-c CHANNEL] [-l {ERROR,WARNING,INFO,DEBUG}]\n                                  [-r TRIES] [-t TIMEOUT] [-w RETRY_WAIT]\n                                  {set-channel,cast,stop-cast} chromecast\n\npositional arguments:\n  {set-channel,cast,stop-cast}\n                        Command\n  chromecast            Chromecast name\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g GREENSCREEN_SERVER, --greenscreen_server GREENSCREEN_SERVER\n                        GreenScreen server:port\n  -a APPID, --appid APPID\n                        Chromecast Greenscreen App ID\n  -c CHANNEL, --channel CHANNEL\n                        GreenScreen channel to set\n  -l {ERROR,WARNING,INFO,DEBUG}, --loglevel {ERROR,WARNING,INFO,DEBUG}\n                        Logging level\n  -r TRIES, --tries TRIES\n                        Chromecast connection tries. Default is infinite.\n  -t TIMEOUT, --timeout TIMEOUT\n                        Chromecast socket timeout seconds. Default is 30.\n  -w RETRY_WAIT, --retry_wait RETRY_WAIT\n                        Seconds to wait between Chromecast retries. Default is\n                        5.\n</pre>\n</div>\n<div id=\"starting-the-server\">\n<h2>Starting the server</h2>\n<p>Start a simple TCP server (default port 4995) to control greenscreen and\nChromecast casting.</p>\n<pre>$ greenscreen_control_server -l INFO -a $APPID\n</pre>\n<p>Available arguments:</p>\n<pre>usage: greenscreen_control_server.py [-h] [-g GREENSCREEN_SERVER] [-a APPID]\n                                     [-c CHANNEL]\n                                     [-l {ERROR,WARNING,INFO,DEBUG}]\n                                     [-r TRIES] [-t TIMEOUT] [-w RETRY_WAIT]\n                                     [-p PORT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g GREENSCREEN_SERVER, --greenscreen_server GREENSCREEN_SERVER\n                        GreenScreen server:port\n  -a APPID, --appid APPID\n                        Chromecast Greenscreen App ID\n  -c CHANNEL, --channel CHANNEL\n                        GreenScreen channel to set\n  -l {ERROR,WARNING,INFO,DEBUG}, --loglevel {ERROR,WARNING,INFO,DEBUG}\n                        Logging level\n  -r TRIES, --tries TRIES\n                        Chromecast connection tries. Default is infinite.\n  -t TIMEOUT, --timeout TIMEOUT\n                        Chromecast socket timeout seconds. Default is 30.\n  -w RETRY_WAIT, --retry_wait RETRY_WAIT\n                        Seconds to wait between Chromecast retries. Default is\n                        5.\n  -p PORT, --port PORT  TCP server port number\n</pre>\n</div>\n<div id=\"server-protocol\">\n<h2>Server Protocol</h2>\n<p>The TCP server uses a simple line-based protocol, easily controlled from\nscripts, cron or home automation.</p>\n<p>Assign the \u201cCCTV\u201d channel to the \u201cKitchen\u201d chromecast, and start casting\nit:</p>\n<pre>chromecast=Kitchen,channel=CCTV,cast=1\n</pre>\n<p>Assign the \u201cCCTV\u201d channel to the \u201cKitchen\u201d chromecast, don\u2019t cast it\n(either prepares for future casting, or assumes already casted):</p>\n<pre>chromecast=Kitchen,channel=CCTV\n</pre>\n<p>Cast the currently assigned channel (whatever that is):</p>\n<pre>chromecast=Kitchen,cast=1\n</pre>\n<p>Stop casting:</p>\n<pre>chromecast=Kitchen,cast=0\n</pre>\n</div>\n<div id=\"starting-the-server-by-default\">\n<h2>Starting the server by default</h2>\n<p>Use the included greenscreen_control.service to start the server as a systemd\nunit.</p>\n</div>\n\n          </div>"}, "last_serial": 3048583, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5732f70b75551451c703d02cc9c0c1a7", "sha256": "7975c94f04e536eca27dc76b297fd65db8986d3931914c0f57a599c3b6db33f8"}, "downloads": -1, "filename": "greenscreen_control-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5732f70b75551451c703d02cc9c0c1a7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9722, "upload_time": "2017-07-22T01:00:01", "upload_time_iso_8601": "2017-07-22T01:00:01.798685Z", "url": "https://files.pythonhosted.org/packages/e4/c1/d77451d645d73feba7cefd72340e38a3221b9090626c9b8b3f162d542a5d/greenscreen_control-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c54399669e5b21b0334f136241196ae3", "sha256": "d908b152a19ec0934c20d9410c8ca83289d2aa2b4b3c11182d44bcf7d09dffdf"}, "downloads": -1, "filename": "greenscreen_control-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c54399669e5b21b0334f136241196ae3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9439, "upload_time": "2017-07-22T01:00:04", "upload_time_iso_8601": "2017-07-22T01:00:04.594398Z", "url": "https://files.pythonhosted.org/packages/9d/a5/d5516ac300be27cc1ef937ca1468b67fe54501244cb5bbecf6af294cf38c/greenscreen_control-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b7d16f7744aad1f96ba209c5ed225c27", "sha256": "7b3ab016975ffd7f0b6abf40b38df9beaac230fcf6f1ad7ec04512e7ccfb097f"}, "downloads": -1, "filename": "greenscreen_control-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7d16f7744aad1f96ba209c5ed225c27", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10620, "upload_time": "2017-07-25T21:17:31", "upload_time_iso_8601": "2017-07-25T21:17:31.491688Z", "url": "https://files.pythonhosted.org/packages/4c/e7/28902d71994c0927f79d1fc10f1507dc13e464337a77e75a1ebe4797905f/greenscreen_control-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc7b8191f55521c7fd5b8488015993b7", "sha256": "342e0e6cd76ceaa149d7599653591fd4d95c9efeef78cda92f801ee1a0c6e897"}, "downloads": -1, "filename": "greenscreen_control-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dc7b8191f55521c7fd5b8488015993b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10125, "upload_time": "2017-07-25T21:17:32", "upload_time_iso_8601": "2017-07-25T21:17:32.390677Z", "url": "https://files.pythonhosted.org/packages/ae/c1/4dba71537b8f4c08229ccb535f139646c341f9f06624e3bee85bfcf3f30c/greenscreen_control-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7d16f7744aad1f96ba209c5ed225c27", "sha256": "7b3ab016975ffd7f0b6abf40b38df9beaac230fcf6f1ad7ec04512e7ccfb097f"}, "downloads": -1, "filename": "greenscreen_control-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b7d16f7744aad1f96ba209c5ed225c27", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10620, "upload_time": "2017-07-25T21:17:31", "upload_time_iso_8601": "2017-07-25T21:17:31.491688Z", "url": "https://files.pythonhosted.org/packages/4c/e7/28902d71994c0927f79d1fc10f1507dc13e464337a77e75a1ebe4797905f/greenscreen_control-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc7b8191f55521c7fd5b8488015993b7", "sha256": "342e0e6cd76ceaa149d7599653591fd4d95c9efeef78cda92f801ee1a0c6e897"}, "downloads": -1, "filename": "greenscreen_control-0.0.2.tar.gz", "has_sig": false, "md5_digest": "dc7b8191f55521c7fd5b8488015993b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10125, "upload_time": "2017-07-25T21:17:32", "upload_time_iso_8601": "2017-07-25T21:17:32.390677Z", "url": "https://files.pythonhosted.org/packages/ae/c1/4dba71537b8f4c08229ccb535f139646c341f9f06624e3bee85bfcf3f30c/greenscreen_control-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:19 2020"}