{"info": {"author": "Joshah Moors", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# Mood-Ring\nMood-ring object to return a user's mood with available configurations - practice for packaging and distributing software.\n\n# Installation\n\nMood-ring can be installed with pip:\n\n`pip install mood-ring`\n\n# Documentation\n\nThe ring class can be instantiated and used as a string to display a mood.\n\n```\n>>> from mood_ring import Ring\n>>>\n>>> r = Ring()\n>>> print(r)\nactive\n```\nThe Ring class comes with the following options:\n- stressed\n- nervous\n- unsettled\n- active\n- relaxed\n- lovable\n- romantic\n- happy\n- tired\n- calm\n### Methods\nThe **change** method will update the mood of the ring object.\n\nNOTE: When using the change method, the mood will be reset to a different option than currently selected - there is no chance the same mood option will be set again.\n\n```\n>>> r = Ring()\n>>> str(r)\n'tired'\n>>> r.change()\n>>> str(r)\n'unsettled'\n```\nIf the possibility of the same outcome is desired, instantiate a new instance of the Ring object.\n```\n>>> r = Ring(); str(r)\n'stressed'\n>>> r = Ring(); str(r)\n'stressed'\n```\n### Custom User-Inputs\nTo over-write the default outputs, am optional list argument can be accepted to specify the pool of output options the class will output.\n\n```\n>>> r = Ring(['suave', 'sophisticated'])\n>>> str(r)\n'suave'\n```\nTo retain the default output list while also adding user-defined outputs, the optional keyword argument 'extend' can accept a list of strings to extend the out-of-the-box behavior.\n```\n>>> r = Ring(extend=['million bucks'])\n>>> str(r)\n'tired'\n```\n### Weighted User-Inputs\nEither of the above arguments can also be passed a dictionary that weights the probability of a certain option being picked - keys are mood option names, and values are weights. In the example below, 'mad' has a 1/5 chance of being returned and 'happy' has a 4/5 chance of being returned.\n```\n>>> r = Ring({'mad': 1, 'happy': 4})\n>>> str(r)\n'happy'\n```\nNOTE: The 10 default options are weighted with 1. If using the 'extend' keyword, setting a key as weight 1 gives it equal probability as the original options.\n```\n>>> # New option weighted equally with default options\n>>> r = Ring(extend={'dopey': 1})\n>>> str(r)\n'stressed'\n>>>\n>>> # New option weighted 99x as likely of returning as defaults\n>>> r = Ring(extend={'dopey': 99})\n>>> str(r)\n'dopey'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joshah-moors/mood-ring", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mood-ring", "package_url": "https://pypi.org/project/mood-ring/", "platform": "", "project_url": "https://pypi.org/project/mood-ring/", "project_urls": {"Homepage": "https://github.com/joshah-moors/mood-ring"}, "release_url": "https://pypi.org/project/mood-ring/0.1.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Novelty mood ring object that returns a mood as a string", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mood-Ring</h1>\n<p>Mood-ring object to return a user's mood with available configurations - practice for packaging and distributing software.</p>\n<h1>Installation</h1>\n<p>Mood-ring can be installed with pip:</p>\n<p><code>pip install mood-ring</code></p>\n<h1>Documentation</h1>\n<p>The ring class can be instantiated and used as a string to display a mood.</p>\n<pre><code>&gt;&gt;&gt; from mood_ring import Ring\n&gt;&gt;&gt;\n&gt;&gt;&gt; r = Ring()\n&gt;&gt;&gt; print(r)\nactive\n</code></pre>\n<p>The Ring class comes with the following options:</p>\n<ul>\n<li>stressed</li>\n<li>nervous</li>\n<li>unsettled</li>\n<li>active</li>\n<li>relaxed</li>\n<li>lovable</li>\n<li>romantic</li>\n<li>happy</li>\n<li>tired</li>\n<li>calm</li>\n</ul>\n<h3>Methods</h3>\n<p>The <strong>change</strong> method will update the mood of the ring object.</p>\n<p>NOTE: When using the change method, the mood will be reset to a different option than currently selected - there is no chance the same mood option will be set again.</p>\n<pre><code>&gt;&gt;&gt; r = Ring()\n&gt;&gt;&gt; str(r)\n'tired'\n&gt;&gt;&gt; r.change()\n&gt;&gt;&gt; str(r)\n'unsettled'\n</code></pre>\n<p>If the possibility of the same outcome is desired, instantiate a new instance of the Ring object.</p>\n<pre><code>&gt;&gt;&gt; r = Ring(); str(r)\n'stressed'\n&gt;&gt;&gt; r = Ring(); str(r)\n'stressed'\n</code></pre>\n<h3>Custom User-Inputs</h3>\n<p>To over-write the default outputs, am optional list argument can be accepted to specify the pool of output options the class will output.</p>\n<pre><code>&gt;&gt;&gt; r = Ring(['suave', 'sophisticated'])\n&gt;&gt;&gt; str(r)\n'suave'\n</code></pre>\n<p>To retain the default output list while also adding user-defined outputs, the optional keyword argument 'extend' can accept a list of strings to extend the out-of-the-box behavior.</p>\n<pre><code>&gt;&gt;&gt; r = Ring(extend=['million bucks'])\n&gt;&gt;&gt; str(r)\n'tired'\n</code></pre>\n<h3>Weighted User-Inputs</h3>\n<p>Either of the above arguments can also be passed a dictionary that weights the probability of a certain option being picked - keys are mood option names, and values are weights. In the example below, 'mad' has a 1/5 chance of being returned and 'happy' has a 4/5 chance of being returned.</p>\n<pre><code>&gt;&gt;&gt; r = Ring({'mad': 1, 'happy': 4})\n&gt;&gt;&gt; str(r)\n'happy'\n</code></pre>\n<p>NOTE: The 10 default options are weighted with 1. If using the 'extend' keyword, setting a key as weight 1 gives it equal probability as the original options.</p>\n<pre><code>&gt;&gt;&gt; # New option weighted equally with default options\n&gt;&gt;&gt; r = Ring(extend={'dopey': 1})\n&gt;&gt;&gt; str(r)\n'stressed'\n&gt;&gt;&gt;\n&gt;&gt;&gt; # New option weighted 99x as likely of returning as defaults\n&gt;&gt;&gt; r = Ring(extend={'dopey': 99})\n&gt;&gt;&gt; str(r)\n'dopey'\n</code></pre>\n\n          </div>"}, "last_serial": 6762196, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "133ce1b2f895c08c18c3ac870ca10d65", "sha256": "3734f51cba87a8b2c3feea406d39e6a34ac97c7995c27d60e434c209b63b0876"}, "downloads": -1, "filename": "mood_ring-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "133ce1b2f895c08c18c3ac870ca10d65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4703, "upload_time": "2020-03-06T14:03:49", "upload_time_iso_8601": "2020-03-06T14:03:49.113529Z", "url": "https://files.pythonhosted.org/packages/e9/4d/46382f32a9f297143a94a85c9874705701c65d35ebefb2721c7f42ef17cd/mood_ring-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4a17edc4049fbb0bf70eb253d3547de", "sha256": "60ddff768b0b3b70377a7e1258964de5f9118677f0a150f9cda627a20c3a0523"}, "downloads": -1, "filename": "mood-ring-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f4a17edc4049fbb0bf70eb253d3547de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3546, "upload_time": "2020-03-06T14:03:50", "upload_time_iso_8601": "2020-03-06T14:03:50.903218Z", "url": "https://files.pythonhosted.org/packages/4b/d7/d16b2bb4f06d5db343b4086844e60aa4cc66729f2afc11a72f15000cd482/mood-ring-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a405d9f7bbf91d6cbbaba07d45859899", "sha256": "044f6e4bb6015870cd67d7f6cb6cfbfd401c53ec5515392d0b0f27f2f5a49ff6"}, "downloads": -1, "filename": "mood_ring-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a405d9f7bbf91d6cbbaba07d45859899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4707, "upload_time": "2020-03-06T14:13:31", "upload_time_iso_8601": "2020-03-06T14:13:31.442334Z", "url": "https://files.pythonhosted.org/packages/99/3a/d67d818dbaace324ac5075cdb735b3f117fa018016bc512b692b71567202/mood_ring-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5edb55df89bee33f65f70136a0193490", "sha256": "ca85289c7ebeaf897a6f93aa2e7e8cfbbaeee7ccd13a9aec061e908dd7566c50"}, "downloads": -1, "filename": "mood-ring-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5edb55df89bee33f65f70136a0193490", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3531, "upload_time": "2020-03-06T14:13:32", "upload_time_iso_8601": "2020-03-06T14:13:32.115060Z", "url": "https://files.pythonhosted.org/packages/c3/8e/e5518e3cdf60897df024a2ea80f3fafafc08f08b653cf9acf74375fc65bf/mood-ring-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a405d9f7bbf91d6cbbaba07d45859899", "sha256": "044f6e4bb6015870cd67d7f6cb6cfbfd401c53ec5515392d0b0f27f2f5a49ff6"}, "downloads": -1, "filename": "mood_ring-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a405d9f7bbf91d6cbbaba07d45859899", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4707, "upload_time": "2020-03-06T14:13:31", "upload_time_iso_8601": "2020-03-06T14:13:31.442334Z", "url": "https://files.pythonhosted.org/packages/99/3a/d67d818dbaace324ac5075cdb735b3f117fa018016bc512b692b71567202/mood_ring-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5edb55df89bee33f65f70136a0193490", "sha256": "ca85289c7ebeaf897a6f93aa2e7e8cfbbaeee7ccd13a9aec061e908dd7566c50"}, "downloads": -1, "filename": "mood-ring-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5edb55df89bee33f65f70136a0193490", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3531, "upload_time": "2020-03-06T14:13:32", "upload_time_iso_8601": "2020-03-06T14:13:32.115060Z", "url": "https://files.pythonhosted.org/packages/c3/8e/e5518e3cdf60897df024a2ea80f3fafafc08f08b653cf9acf74375fc65bf/mood-ring-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:02 2020"}