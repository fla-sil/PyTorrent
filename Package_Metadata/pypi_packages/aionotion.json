{"info": {"author": "Aaron Bach", "author_email": "bachya1208@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# \ud83d\udcdf aionotion: a Python3, asyncio-friendly library for Notion\u00ae Home Monitoring\n\n[![CI](https://github.com/bachya/aionotion/workflows/CI/badge.svg)](https://github.com/bachya/aionotion/actions)\n[![PyPi](https://img.shields.io/pypi/v/aionotion.svg)](https://pypi.python.org/pypi/aionotion)\n[![Version](https://img.shields.io/pypi/pyversions/aionotion.svg)](https://pypi.python.org/pypi/aionotion)\n[![License](https://img.shields.io/pypi/l/aionotion.svg)](https://github.com/bachya/aionotion/blob/master/LICENSE)\n[![Code Coverage](https://codecov.io/gh/bachya/aionotion/branch/master/graph/badge.svg)](https://codecov.io/gh/bachya/aionotion)\n[![Maintainability](https://api.codeclimate.com/v1/badges/bd79edca07c8e4529cba/maintainability)](https://codeclimate.com/github/bachya/aionotion/maintainability)\n[![Say Thanks](https://img.shields.io/badge/SayThanks-!-1EAEDB.svg)](https://saythanks.io/to/bachya)\n\n`aionotion` is a Python 3, asyncio-friendly library for interacting with\n[Notion](https://getnotion.com) home monitoring sensors.\n\n# Python Versions\n\n`aionotion` is currently supported on:\n\n* Python 3.6\n* Python 3.7\n* Python 3.8\n\n# Installation\n\n```python\npip install aionotion\n```\n\n# Usage\n\n`aionotion` starts within an\n[aiohttp](https://aiohttp.readthedocs.io/en/stable/) `ClientSession`:\n\n```python\nimport asyncio\n\nfrom aiohttp import ClientSession\n\n\nasync def main() -> None:\n    \"\"\"Create the aiohttp session and run the example.\"\"\"\n    async with ClientSession() as websession:\n        # YOUR CODE HERE\n\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\nCreate a client and get to work:\n\n```python\nimport asyncio\n\nfrom aiohttp import ClientSession\n\nfrom aionotion import async_get_client\n\n\nasync def main() -> None:\n    \"\"\"Create the aiohttp session and run the example.\"\"\"\n    async with ClientSession() as websession:\n        # Create a Notion API client:\n        client = await async_get_client(\"<EMAIL>\", \"<PASSWORD>\", websession)\n\n        # Get all \"households\" associated with the account:\n        systems = await client.system.async_all()\n\n        # Get a system by ID:\n        system = await client.system.async_get(12345)\n\n        # Create a system (with associated parameters):\n        await client.system.async_create({\"system_id\": 12345, \"name\": \"Test\"})\n\n        # Update a system with new parameters:\n        await client.system.async_update(12345, {\"name\": \"Test\"})\n\n        # Delete a system by ID:\n        await client.system.async_delete(12345)\n\n        # Get all bridges associated with the account:\n        bridges = await client.bridge.async_all()\n\n        # Get a bridge by ID:\n        bridge = await client.bridge.async_get(12345)\n\n        # Create a bridge (with associated parameters):\n        await client.bridge.async_create({\"system_id\": 12345, \"name\": \"Test\"})\n\n        # Update a bridge with new parameters:\n        await client.bridge.async_update(12345, {\"name\": \"Test\"})\n\n        # Reset a bridge (deprovision its WiFi credentials):\n        await client.bridge.async_reset(12345)\n\n        # Delete a bridge by ID:\n        await client.bridge.async_delete(12345)\n\n        # Get all devices associated with the account:\n        devices = await client.device.async_all()\n\n        # Get a device by ID:\n        device = await client.device.async_get(12345)\n\n        # Create a device (with associated parameters):\n        await client.device.async_create({\"id\": 12345})\n\n        # Delete a device by ID:\n        await client.device.async_delete(12345)\n\n        # Get all sensors:\n        sensors = await client.sensor.async_all()\n\n        # Get a sensor by ID:\n        sensor = await client.sensor.async_get(12345)\n\n        # Create a sensor (with associated parameters):\n        await client.sensor.async_create({\"sensor_id\": 12345, \"name\": \"Test\"})\n\n        # Update a sensor with new parameters:\n        await client.sensor.async_update(12345, {\"name\": \"Test\"})\n\n        # Delete a sensor by ID:\n        await client.sensor.async_delete(12345)\n\n        # Get all \"tasks\" (conditions monitored by sensors) associated with the account:\n        tasks = await client.task.async_all()\n\n        # Get a task by ID:\n        task = await client.task.async_get(\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\n        # Get a task's value history between two datetimes:\n        import datetime\n\n        history = await client.task.async_history(\n            \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n            data_before=datetime.datetime.now(),\n            data_after=datetime.datetime.now() - datetime.timedelta(days=3),\n        )\n\n        # Create a list of tasks for a particular sensor (e.g., sensor # 12345):\n        await client.task.async_create(\n            12345, [{\"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", \"type\": \"missing\"}]\n        )\n\n        # Delete a task for a particular sensor (e.g., sensor # 12345):\n        await client.task.async_delete(12345, \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")\n\n\nasyncio.get_event_loop().run_until_complete(main())\n```\n\nCheck out `example.py`, the tests, and the source files themselves for method\nsignatures and more examples.\n\n# Contributing\n\n1. [Check for open features/bugs](https://github.com/bachya/aionotion/issues)\n  or [initiate a discussion on one](https://github.com/bachya/aionotion/issues/new).\n2. [Fork the repository](https://github.com/bachya/aionotion/fork).\n3. (_optional, but highly recommended_) Create a virtual environment: `python3 -m venv .venv`\n4. (_optional, but highly recommended_) Enter the virtual environment: `source ./venv/bin/activate`\n5. Install the dev environment: `script/setup`\n6. Code your new feature or bug fix.\n7. Write tests that cover your new functionality.\n8. Run tests and ensure 100% code coverage: `script/test`\n9. Update `README.md` with any new documentation.\n10. Add yourself to `AUTHORS.md`.\n11. Submit a pull request!\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bachya/aionotion", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aionotion", "package_url": "https://pypi.org/project/aionotion/", "platform": "", "project_url": "https://pypi.org/project/aionotion/", "project_urls": {"Homepage": "https://github.com/bachya/aionotion", "Repository": "https://github.com/bachya/aionotion"}, "release_url": "https://pypi.org/project/aionotion/2.0.3/", "requires_dist": ["aiohttp (>=3.6.2,<4.0.0)"], "requires_python": ">=3.6.0,<4.0.0", "summary": "A simple Python 3 library for Notion Home Monitoring", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\ud83d\udcdf aionotion: a Python3, asyncio-friendly library for Notion\u00ae Home Monitoring</h1>\n<p><a href=\"https://github.com/bachya/aionotion/actions\" rel=\"nofollow\"><img alt=\"CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62e4aee88082ffd140147fb8940aab9125af8987/68747470733a2f2f6769746875622e636f6d2f6261636879612f61696f6e6f74696f6e2f776f726b666c6f77732f43492f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aionotion\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cecf58356df84e9c4266ca27ab2378ddaeaf44cc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f61696f6e6f74696f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aionotion\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41e85b059c9bce6ebb4e33f8a5775f8e63243442/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f61696f6e6f74696f6e2e737667\"></a>\n<a href=\"https://github.com/bachya/aionotion/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d836a47bff24931b3f1307ead234a51bdba9e5b6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f61696f6e6f74696f6e2e737667\"></a>\n<a href=\"https://codecov.io/gh/bachya/aionotion\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/706f3eb13167741009c8579339942e2f590b75af/68747470733a2f2f636f6465636f762e696f2f67682f6261636879612f61696f6e6f74696f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://codeclimate.com/github/bachya/aionotion/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ccc20595fdb12f17c0f022836aaa6ef47cd75e04/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62643739656463613037633865343532396362612f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://saythanks.io/to/bachya\" rel=\"nofollow\"><img alt=\"Say Thanks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/836a72b26b72545aaf496536c5baba94f15fb592/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361795468616e6b732d212d3145414544422e737667\"></a></p>\n<p><code>aionotion</code> is a Python 3, asyncio-friendly library for interacting with\n<a href=\"https://getnotion.com\" rel=\"nofollow\">Notion</a> home monitoring sensors.</p>\n<h1>Python Versions</h1>\n<p><code>aionotion</code> is currently supported on:</p>\n<ul>\n<li>Python 3.6</li>\n<li>Python 3.7</li>\n<li>Python 3.8</li>\n</ul>\n<h1>Installation</h1>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">aionotion</span>\n</pre>\n<h1>Usage</h1>\n<p><code>aionotion</code> starts within an\n<a href=\"https://aiohttp.readthedocs.io/en/stable/\" rel=\"nofollow\">aiohttp</a> <code>ClientSession</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">ClientSession</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Create the aiohttp session and run the example.\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">websession</span><span class=\"p\">:</span>\n        <span class=\"c1\"># YOUR CODE HERE</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Create a client and get to work:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">ClientSession</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aionotion</span> <span class=\"kn\">import</span> <span class=\"n\">async_get_client</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Create the aiohttp session and run the example.\"\"\"</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">websession</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Create a Notion API client:</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">async_get_client</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;EMAIL&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;PASSWORD&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">websession</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all \"households\" associated with the account:</span>\n        <span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">async_all</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get a system by ID:</span>\n        <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">async_get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a system (with associated parameters):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">async_create</span><span class=\"p\">({</span><span class=\"s2\">\"system_id\"</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Update a system with new parameters:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">async_update</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Delete a system by ID:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">async_delete</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all bridges associated with the account:</span>\n        <span class=\"n\">bridges</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_all</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get a bridge by ID:</span>\n        <span class=\"n\">bridge</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a bridge (with associated parameters):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_create</span><span class=\"p\">({</span><span class=\"s2\">\"system_id\"</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Update a bridge with new parameters:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_update</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Reset a bridge (deprovision its WiFi credentials):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_reset</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Delete a bridge by ID:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">bridge</span><span class=\"o\">.</span><span class=\"n\">async_delete</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all devices associated with the account:</span>\n        <span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">async_all</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get a device by ID:</span>\n        <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">async_get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a device (with associated parameters):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">async_create</span><span class=\"p\">({</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Delete a device by ID:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">async_delete</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all sensors:</span>\n        <span class=\"n\">sensors</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">async_all</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get a sensor by ID:</span>\n        <span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">async_get</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a sensor (with associated parameters):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">async_create</span><span class=\"p\">({</span><span class=\"s2\">\"sensor_id\"</span><span class=\"p\">:</span> <span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Update a sensor with new parameters:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">async_update</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test\"</span><span class=\"p\">})</span>\n\n        <span class=\"c1\"># Delete a sensor by ID:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">async_delete</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get all \"tasks\" (conditions monitored by sensors) associated with the account:</span>\n        <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">async_all</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Get a task by ID:</span>\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">async_get</span><span class=\"p\">(</span><span class=\"s2\">\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Get a task's value history between two datetimes:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n        <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">async_history</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"</span><span class=\"p\">,</span>\n            <span class=\"n\">data_before</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span>\n            <span class=\"n\">data_after</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a list of tasks for a particular sensor (e.g., sensor # 12345):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">async_create</span><span class=\"p\">(</span>\n            <span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"</span><span class=\"p\">,</span> <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"missing\"</span><span class=\"p\">}]</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Delete a task for a particular sensor (e.g., sensor # 12345):</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">async_delete</span><span class=\"p\">(</span><span class=\"mi\">12345</span><span class=\"p\">,</span> <span class=\"s2\">\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Check out <code>example.py</code>, the tests, and the source files themselves for method\nsignatures and more examples.</p>\n<h1>Contributing</h1>\n<ol>\n<li><a href=\"https://github.com/bachya/aionotion/issues\" rel=\"nofollow\">Check for open features/bugs</a>\nor <a href=\"https://github.com/bachya/aionotion/issues/new\" rel=\"nofollow\">initiate a discussion on one</a>.</li>\n<li><a href=\"https://github.com/bachya/aionotion/fork\" rel=\"nofollow\">Fork the repository</a>.</li>\n<li>(<em>optional, but highly recommended</em>) Create a virtual environment: <code>python3 -m venv .venv</code></li>\n<li>(<em>optional, but highly recommended</em>) Enter the virtual environment: <code>source ./venv/bin/activate</code></li>\n<li>Install the dev environment: <code>script/setup</code></li>\n<li>Code your new feature or bug fix.</li>\n<li>Write tests that cover your new functionality.</li>\n<li>Run tests and ensure 100% code coverage: <code>script/test</code></li>\n<li>Update <code>README.md</code> with any new documentation.</li>\n<li>Add yourself to <code>AUTHORS.md</code>.</li>\n<li>Submit a pull request!</li>\n</ol>\n\n          </div>"}, "last_serial": 6611952, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2aea394cafe73f8e57cd88a6dd127228", "sha256": "96b56302e30add0cc9ecfe8c2455ef0dfc25de8c8af2d74268e5061d5cafb861"}, "downloads": -1, "filename": "aionotion-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2aea394cafe73f8e57cd88a6dd127228", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 6814, "upload_time": "2019-04-30T19:20:12", "upload_time_iso_8601": "2019-04-30T19:20:12.862778Z", "url": "https://files.pythonhosted.org/packages/56/ee/0d4ff78ccdeaa83b759549d5a63eeb074f199f5a7ac4bf59fa2130ed6e66/aionotion-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "925db5bb480c6f3df8bab3c47b60f727", "sha256": "3c77f21f4e7ec06d1e8652714fb16947b450e03594c1243bad57ac8ca1f7e143"}, "downloads": -1, "filename": "aionotion-0.1.0.tar.gz", "has_sig": false, "md5_digest": "925db5bb480c6f3df8bab3c47b60f727", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 6100, "upload_time": "2019-04-30T19:20:26", "upload_time_iso_8601": "2019-04-30T19:20:26.110706Z", "url": "https://files.pythonhosted.org/packages/97/c7/e553e35f4448beeee7a54e1ca6af924f1c0abd5b24e1ad4022cba045cc60/aionotion-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "83bfb039adc90180f63b2fd58c74fce5", "sha256": "5126e6978bf05f02bc6d988e698d78707829938294c43629dd5eafd9c07dbf14"}, "downloads": -1, "filename": "aionotion-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83bfb039adc90180f63b2fd58c74fce5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 13051, "upload_time": "2019-06-18T18:20:02", "upload_time_iso_8601": "2019-06-18T18:20:02.207120Z", "url": "https://files.pythonhosted.org/packages/34/9a/5e5a9ec691f965d49e51ba88ecada9ab57df92a28bf5e5e2cf58504fe34c/aionotion-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f6ee577d193d35c06885dfea20e668e", "sha256": "9e6006022276aabb80ac2eb7e2ba11647991995833038d0bad5fe93dc7382cef"}, "downloads": -1, "filename": "aionotion-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9f6ee577d193d35c06885dfea20e668e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 9488, "upload_time": "2019-06-18T18:20:04", "upload_time_iso_8601": "2019-06-18T18:20:04.086460Z", "url": "https://files.pythonhosted.org/packages/32/e2/6f4d17793acb853a0e7c07c4a7e6996b272f08d471c1cecaf27a7de2d96f/aionotion-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "dab830f5fcff6a349ae9791a152c2e85", "sha256": "4654d94d4709ea3f387035ffa8d8fb204cb855cfdace98b73caccfd09021f04e"}, "downloads": -1, "filename": "aionotion-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dab830f5fcff6a349ae9791a152c2e85", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.3", "size": 13175, "upload_time": "2019-07-03T02:59:44", "upload_time_iso_8601": "2019-07-03T02:59:44.125662Z", "url": "https://files.pythonhosted.org/packages/e0/95/11532a14c582b056eac6343b3cfee7da90b81c6bd4a062fea67e8b219f70/aionotion-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a000a65419ab991048214d05f5296de", "sha256": "fa3b50a3f4bde7e83d06ac673c90cebc3a7d72a534deff194afed0c523ef8d99"}, "downloads": -1, "filename": "aionotion-1.1.0.tar.gz", "has_sig": false, "md5_digest": "5a000a65419ab991048214d05f5296de", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.3", "size": 9543, "upload_time": "2019-07-03T02:59:45", "upload_time_iso_8601": "2019-07-03T02:59:45.548227Z", "url": "https://files.pythonhosted.org/packages/04/71/856624fffc3901e7ed51d169cb4734631300bfa6abeef65806edb08b3a83/aionotion-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "15d007fbab820ad9188f1faab37467f6", "sha256": "9c86e8d759e4bd0fa63d838488ea27f93528dc775cfa92f7714aef21e03ae988"}, "downloads": -1, "filename": "aionotion-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15d007fbab820ad9188f1faab37467f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 12987, "upload_time": "2019-09-05T21:54:55", "upload_time_iso_8601": "2019-09-05T21:54:55.490714Z", "url": "https://files.pythonhosted.org/packages/42/12/460cfa7e2da52816cfe50aa25a66ba997d69820163a38d51a018a6707b5b/aionotion-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e1f458dd7ed636109f976fb782bb2db", "sha256": "b3ea19c506713a1b87656c740dd8159ff7e6962682203af9839439b5fac51bec"}, "downloads": -1, "filename": "aionotion-2.0.0.tar.gz", "has_sig": false, "md5_digest": "2e1f458dd7ed636109f976fb782bb2db", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9439, "upload_time": "2019-09-05T21:54:57", "upload_time_iso_8601": "2019-09-05T21:54:57.138862Z", "url": "https://files.pythonhosted.org/packages/a2/c0/24418c8983a43d1c64a0a75551e3b050ffa095ca88bc5070fe5e2e5a0df3/aionotion-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "d989807ad34b1adfc7a35cd39da77f07", "sha256": "098a4b5ec70bc25c638bb473a8a06641a3f58873a04fbc182aad97400ad6cecf"}, "downloads": -1, "filename": "aionotion-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d989807ad34b1adfc7a35cd39da77f07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 8054, "upload_time": "2019-11-18T04:03:19", "upload_time_iso_8601": "2019-11-18T04:03:19.880865Z", "url": "https://files.pythonhosted.org/packages/3d/36/19f00ad5381d108e75200a2548ba45e3cb55b45bf3c8b685fa5a17b72b0a/aionotion-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dcf3de5ed7053fffd95eebbe96e9372", "sha256": "9ebc198007a6dcd3ac6c282a41aee8af45ea195559951ecbb9b730092b557f5d"}, "downloads": -1, "filename": "aionotion-2.0.1.tar.gz", "has_sig": false, "md5_digest": "8dcf3de5ed7053fffd95eebbe96e9372", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 7580, "upload_time": "2019-11-18T04:03:21", "upload_time_iso_8601": "2019-11-18T04:03:21.141947Z", "url": "https://files.pythonhosted.org/packages/4d/ba/c854307613c710d9a7144354f5b7a4da4fbffd75afd13307940b11d6d44c/aionotion-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "4a0e9d6f943af0cb7d0718eeae3daff2", "sha256": "2f4e53a556ed38ee6c65889ec703fbd66b198ed9f75225b832be88b8474f45e5"}, "downloads": -1, "filename": "aionotion-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4a0e9d6f943af0cb7d0718eeae3daff2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 8045, "upload_time": "2020-02-10T22:06:57", "upload_time_iso_8601": "2020-02-10T22:06:57.516614Z", "url": "https://files.pythonhosted.org/packages/51/25/a5bbe823677386e21724469aa35a421e4097f0474174ff518387a2b28e86/aionotion-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efa1041023869a8767c9a940b60139b4", "sha256": "3702960987688142ecce8b08aeb2b9cf1a3a521118f2d4bfad5922f1c3b88122"}, "downloads": -1, "filename": "aionotion-2.0.2.tar.gz", "has_sig": false, "md5_digest": "efa1041023869a8767c9a940b60139b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 7725, "upload_time": "2020-02-10T22:06:58", "upload_time_iso_8601": "2020-02-10T22:06:58.886916Z", "url": "https://files.pythonhosted.org/packages/67/e1/e4747c497121b04d148d1f20f35c7404b0a6424c2ba24dbbd5f4ace6d6a1/aionotion-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "ee709aea7d657674df48bd6f5942bcd8", "sha256": "0b4ac70c0862ecbec5639f050c90578536c116134d0a9e214686f12a1cda6d1a"}, "downloads": -1, "filename": "aionotion-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ee709aea7d657674df48bd6f5942bcd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 8118, "upload_time": "2020-02-11T20:38:04", "upload_time_iso_8601": "2020-02-11T20:38:04.949557Z", "url": "https://files.pythonhosted.org/packages/ec/9e/ba6e0223c08bc2c43246245f0c9bb9f76b97b46c49b369632d66008a90a9/aionotion-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9d83aef70255f3aa447b7e124aeccc4", "sha256": "edcc05d6fd7fe2806661b37edb2762a0a2700fdd2296a5b8861f55458f879a8d"}, "downloads": -1, "filename": "aionotion-2.0.3.tar.gz", "has_sig": false, "md5_digest": "b9d83aef70255f3aa447b7e124aeccc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 7853, "upload_time": "2020-02-11T20:38:06", "upload_time_iso_8601": "2020-02-11T20:38:06.104465Z", "url": "https://files.pythonhosted.org/packages/c7/04/3abeb2648cf85be8e391beebd7773eb7b0406dacaad4cd8f56c30f65354b/aionotion-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ee709aea7d657674df48bd6f5942bcd8", "sha256": "0b4ac70c0862ecbec5639f050c90578536c116134d0a9e214686f12a1cda6d1a"}, "downloads": -1, "filename": "aionotion-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ee709aea7d657674df48bd6f5942bcd8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0,<4.0.0", "size": 8118, "upload_time": "2020-02-11T20:38:04", "upload_time_iso_8601": "2020-02-11T20:38:04.949557Z", "url": "https://files.pythonhosted.org/packages/ec/9e/ba6e0223c08bc2c43246245f0c9bb9f76b97b46c49b369632d66008a90a9/aionotion-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9d83aef70255f3aa447b7e124aeccc4", "sha256": "edcc05d6fd7fe2806661b37edb2762a0a2700fdd2296a5b8861f55458f879a8d"}, "downloads": -1, "filename": "aionotion-2.0.3.tar.gz", "has_sig": false, "md5_digest": "b9d83aef70255f3aa447b7e124aeccc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0,<4.0.0", "size": 7853, "upload_time": "2020-02-11T20:38:06", "upload_time_iso_8601": "2020-02-11T20:38:06.104465Z", "url": "https://files.pythonhosted.org/packages/c7/04/3abeb2648cf85be8e391beebd7773eb7b0406dacaad4cd8f56c30f65354b/aionotion-2.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:01 2020"}