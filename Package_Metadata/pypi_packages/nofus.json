{"info": {"author": "Nate Collins", "author_email": "npcollins@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# NOFUS: Nate's One-File Utilities Stash\n## About NOFUS\nA collection of single purpose classes for common tasks, focusing on simple and\nstraightforward use. Each class can be taken and used individually and requires\nno external dependencies.  \n\n## Uses\n* [ConfigFile: No Hassle Config File Parser](#configfile-no-hassle-config-file-parser)\n* [Logger: Simplified Alternate Logging Interface](#logger-simplified-alternate-logging-interface)\n\n### ConfigFile: No Hassle Config File Parser\nExample Config:  \n```\n[email]\nadmin    = admin@example.com\nreply_to = feedback@example.com\n\n[auth.sql]\nhost = sql.example.com\ndb   = mydbname\nuser = sqluser\npw   = \"secret_passwd\"\n\n[auth.ldap]\nuri = \"ldap://ldap1.example.com:389\"\nuri = \"ldap://ldap2.example.com:389\"\nuri = \"ldap://ldap3.example.com:389\"\n```\n\nExample Use:  \n```\nconf = ConfigFile(\"/path/to/my.conf\")\nif not conf.load():\n    print(conf.errors())\nelse:\n    admin_email = conf.get(\"email.admin\")\n    reply_email = conf.get(\"email.reply_to\", default=\"donotreply@example.com\")\n\n    sqlauth     = conf.get(\"auth.sql\")\n    sql_host    = sqlauth.get(\"host\")\n    sql_db      = sqlauth.get(\"db\")\n    sql_user    = sqlauth.get(\"user\")\n    sql_pw      = sqlauth.get(\"pw\")\n\n    ldap_uris   = conf.get_list(\"auth.ldap.uri\")\n```\n\n### Logger: Simplified Alternate Logging Interface\nExample Use:  \n```\nfrom logger import Logger\n\n# Fast setup, default to logging LOG_DEBUG and higher\nLogger.initialize('/tmp/myfile.log')\nLogger.info(\"Info!\")\nLogger.notice(\"Notice!\")\nLogger.warning(\"Warning!\")\nLogger.error(\"Error!\")\nLogger.critical(\"Critical!\")\n\n# Disable logging\nLogger.disable()\n\n# Set log level\nLogger.initialize('/tmp/myfile.log', Logger.LOG_TRACE)\nLogger.trace(\"Trace!\")\n\n# Check log level\nif Logger.is_enabled(Logger.LOG_DEBUG):\n    Logger.debug(\"Debug!\")\n\n# Or Define a custom logger\nfrom logger import LoggingInterface\nclass CustomLogger(LoggingInterface):\n    def __init__(self, log_file=None, log_level=None):\n        if log_level is None:\n            log_level = Logger.LOG_LOW\n        # Customize your init\n\n    def make_log(self, entry, log_level):\n        # Customize your log actions\n\nLogger.register(CustomLogger())\n```\n\n## Installation\nIf all you need is one class, you can just grab a file and throw it in your project.  \n\nOr you can install the whole stack using `pip`:  \n```\nTODO\n```\n\n## License\nNOFUS is covered by the Simplified BSD License.  \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/natecollins/nofus-python/", "keywords": "", "license": "BSD 2-clause", "maintainer": "", "maintainer_email": "", "name": "nofus", "package_url": "https://pypi.org/project/nofus/", "platform": "", "project_url": "https://pypi.org/project/nofus/", "project_urls": {"Homepage": "https://github.com/natecollins/nofus-python/"}, "release_url": "https://pypi.org/project/nofus/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "NOFUS - Simple Single Purpose Classes", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NOFUS: Nate's One-File Utilities Stash</h1>\n<h2>About NOFUS</h2>\n<p>A collection of single purpose classes for common tasks, focusing on simple and\nstraightforward use. Each class can be taken and used individually and requires\nno external dependencies.</p>\n<h2>Uses</h2>\n<ul>\n<li><a href=\"#configfile-no-hassle-config-file-parser\" rel=\"nofollow\">ConfigFile: No Hassle Config File Parser</a></li>\n<li><a href=\"#logger-simplified-alternate-logging-interface\" rel=\"nofollow\">Logger: Simplified Alternate Logging Interface</a></li>\n</ul>\n<h3>ConfigFile: No Hassle Config File Parser</h3>\n<p>Example Config:</p>\n<pre><code>[email]\nadmin    = admin@example.com\nreply_to = feedback@example.com\n\n[auth.sql]\nhost = sql.example.com\ndb   = mydbname\nuser = sqluser\npw   = \"secret_passwd\"\n\n[auth.ldap]\nuri = \"ldap://ldap1.example.com:389\"\nuri = \"ldap://ldap2.example.com:389\"\nuri = \"ldap://ldap3.example.com:389\"\n</code></pre>\n<p>Example Use:</p>\n<pre><code>conf = ConfigFile(\"/path/to/my.conf\")\nif not conf.load():\n    print(conf.errors())\nelse:\n    admin_email = conf.get(\"email.admin\")\n    reply_email = conf.get(\"email.reply_to\", default=\"donotreply@example.com\")\n\n    sqlauth     = conf.get(\"auth.sql\")\n    sql_host    = sqlauth.get(\"host\")\n    sql_db      = sqlauth.get(\"db\")\n    sql_user    = sqlauth.get(\"user\")\n    sql_pw      = sqlauth.get(\"pw\")\n\n    ldap_uris   = conf.get_list(\"auth.ldap.uri\")\n</code></pre>\n<h3>Logger: Simplified Alternate Logging Interface</h3>\n<p>Example Use:</p>\n<pre><code>from logger import Logger\n\n# Fast setup, default to logging LOG_DEBUG and higher\nLogger.initialize('/tmp/myfile.log')\nLogger.info(\"Info!\")\nLogger.notice(\"Notice!\")\nLogger.warning(\"Warning!\")\nLogger.error(\"Error!\")\nLogger.critical(\"Critical!\")\n\n# Disable logging\nLogger.disable()\n\n# Set log level\nLogger.initialize('/tmp/myfile.log', Logger.LOG_TRACE)\nLogger.trace(\"Trace!\")\n\n# Check log level\nif Logger.is_enabled(Logger.LOG_DEBUG):\n    Logger.debug(\"Debug!\")\n\n# Or Define a custom logger\nfrom logger import LoggingInterface\nclass CustomLogger(LoggingInterface):\n    def __init__(self, log_file=None, log_level=None):\n        if log_level is None:\n            log_level = Logger.LOG_LOW\n        # Customize your init\n\n    def make_log(self, entry, log_level):\n        # Customize your log actions\n\nLogger.register(CustomLogger())\n</code></pre>\n<h2>Installation</h2>\n<p>If all you need is one class, you can just grab a file and throw it in your project.</p>\n<p>Or you can install the whole stack using <code>pip</code>:</p>\n<pre><code>TODO\n</code></pre>\n<h2>License</h2>\n<p>NOFUS is covered by the Simplified BSD License.</p>\n\n          </div>"}, "last_serial": 6141865, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "86764647dd33bd13364bc5f8786ed154", "sha256": "275dd5a63de48de8de2a0bab8938d12942b6a06bfdf9ed8a922861aa332243c9"}, "downloads": -1, "filename": "nofus-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "86764647dd33bd13364bc5f8786ed154", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13106, "upload_time": "2019-11-15T07:34:40", "upload_time_iso_8601": "2019-11-15T07:34:40.585662Z", "url": "https://files.pythonhosted.org/packages/d7/34/08b93c00a464c6ef2e1a3b6c66d3f356f58f344161f0942fcd1b2ea52751/nofus-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc0d16342eabdc2becb66427af003ca", "sha256": "b63ea4c290c7c790da613bf7821d1df3622549a3f605181ae7e7edd4ba546d42"}, "downloads": -1, "filename": "nofus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4bc0d16342eabdc2becb66427af003ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10887, "upload_time": "2019-11-15T07:34:43", "upload_time_iso_8601": "2019-11-15T07:34:43.287395Z", "url": "https://files.pythonhosted.org/packages/c4/90/273f50ecff662caa41cf08314b5c8eeafc859ccbca50db5bdce4c70030b7/nofus-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "86764647dd33bd13364bc5f8786ed154", "sha256": "275dd5a63de48de8de2a0bab8938d12942b6a06bfdf9ed8a922861aa332243c9"}, "downloads": -1, "filename": "nofus-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "86764647dd33bd13364bc5f8786ed154", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13106, "upload_time": "2019-11-15T07:34:40", "upload_time_iso_8601": "2019-11-15T07:34:40.585662Z", "url": "https://files.pythonhosted.org/packages/d7/34/08b93c00a464c6ef2e1a3b6c66d3f356f58f344161f0942fcd1b2ea52751/nofus-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4bc0d16342eabdc2becb66427af003ca", "sha256": "b63ea4c290c7c790da613bf7821d1df3622549a3f605181ae7e7edd4ba546d42"}, "downloads": -1, "filename": "nofus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4bc0d16342eabdc2becb66427af003ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10887, "upload_time": "2019-11-15T07:34:43", "upload_time_iso_8601": "2019-11-15T07:34:43.287395Z", "url": "https://files.pythonhosted.org/packages/c4/90/273f50ecff662caa41cf08314b5c8eeafc859ccbca50db5bdce4c70030b7/nofus-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:56 2020"}