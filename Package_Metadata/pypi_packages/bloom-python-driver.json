{"info": {"author": "Bruno Alano", "author_email": "bruno@neurologic.com.br", "bugtrack_url": null, "classifiers": [], "description": "bloom-python-driver\n=========\n\nPybloom provides a Python client library to interface with\nbloomd servers. The library supports multiple bloomd servers,\nand automatically handles filter discovery and sharding.\n\nFeatures\n--------\n\n\n* Provides a simple API for using bloomd\n* Allows for using multiple bloomd servers\n   - Auto-discovers filter locations\n   - Balance the creation of new filters\n   - Explicitly name the location to make filters\n* Command pipelining to reduce latency\n\n\nInstall\n-------\n\nDownload and install from source:\n\n    python setup.py install\n\nExample\n------\n\nUsing pybloom is very simple, and is similar to using native sets::\n\n    from pybloom import BloomdClient\n\n    # Create a client to a local bloomd server, default port\n    client = BloomdClient([\"localhost\"])\n\n    # Get or create the foobar filter\n    foobar = client.create_filter(\"foobar\")\n\n    # Set a property and check it exists\n    foobar.add(\"Test Key!\")\n    assert \"Test Key!\" in foobar\n\nTo support multiple servers, just add multiple servers::\n\n    from pybloom import BloomdClient\n\n    # Create a client to a multiple bloomd servers, default ports\n    client = BloomdClient([\"bloomd1\", \"bloomd2\"])\n\n    # Create 4 filters, should be on different machines\n    for x in xrange(4):\n        client.create_filter(\"test%d\" % x)\n\n    # Show which servers the filters are on by\n    # specifying the inc_server flag\n    print client.list_filters(inc_server=True)\n\n    # Use the filters\n    client[\"test0\"].add(\"Hi there!\")\n    client[\"test1\"].add(\"ZING!\")\n    client[\"test2\"].add(\"Chuck Testa!\")\n    client[\"test3\"].add(\"Not cool, bro.\")\n\n\nUsing pipelining is straightforward as well::\n\n    from pybloom import BloomdClient\n\n    # Create a client to a local bloomd server, default port\n    client = BloomdClient([\"localhost\"])\n\n    # Get or create the foobar filter\n    pipe = client.create_filter(\"pipe\").pipeline()\n\n    # Chain multiple add commands\n    results = pipe.add(\"foo\").add(\"bar\").add(\"baz\").execute()\n    assert results[0]\n    assert results[1]\n    assert results[2]\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/brunoalano/bloom-python-driver/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brunoalano/bloom-python-driver", "keywords": "bloom,filter,bloomd", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "bloom-python-driver", "package_url": "https://pypi.org/project/bloom-python-driver/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bloom-python-driver/", "project_urls": {"Download": "https://github.com/brunoalano/bloom-python-driver/tarball/master", "Homepage": "https://github.com/brunoalano/bloom-python-driver"}, "release_url": "https://pypi.org/project/bloom-python-driver/0.4.8/", "requires_dist": null, "requires_python": null, "summary": "Client library to interface with multiple bloomd servers", "version": "0.4.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            bloom-python-driver<br>=========<br><br>Pybloom provides a Python client library to interface with<br>bloomd servers. The library supports multiple bloomd servers,<br>and automatically handles filter discovery and sharding.<br><br>Features<br>--------<br><br><br>* Provides a simple API for using bloomd<br>* Allows for using multiple bloomd servers<br>   - Auto-discovers filter locations<br>   - Balance the creation of new filters<br>   - Explicitly name the location to make filters<br>* Command pipelining to reduce latency<br><br><br>Install<br>-------<br><br>Download and install from source:<br><br>    python setup.py install<br><br>Example<br>------<br><br>Using pybloom is very simple, and is similar to using native sets::<br><br>    from pybloom import BloomdClient<br><br>    # Create a client to a local bloomd server, default port<br>    client = BloomdClient([\"localhost\"])<br><br>    # Get or create the foobar filter<br>    foobar = client.create_filter(\"foobar\")<br><br>    # Set a property and check it exists<br>    foobar.add(\"Test Key!\")<br>    assert \"Test Key!\" in foobar<br><br>To support multiple servers, just add multiple servers::<br><br>    from pybloom import BloomdClient<br><br>    # Create a client to a multiple bloomd servers, default ports<br>    client = BloomdClient([\"bloomd1\", \"bloomd2\"])<br><br>    # Create 4 filters, should be on different machines<br>    for x in xrange(4):<br>        client.create_filter(\"test%d\" % x)<br><br>    # Show which servers the filters are on by<br>    # specifying the inc_server flag<br>    print client.list_filters(inc_server=True)<br><br>    # Use the filters<br>    client[\"test0\"].add(\"Hi there!\")<br>    client[\"test1\"].add(\"ZING!\")<br>    client[\"test2\"].add(\"Chuck Testa!\")<br>    client[\"test3\"].add(\"Not cool, bro.\")<br><br><br>Using pipelining is straightforward as well::<br><br>    from pybloom import BloomdClient<br><br>    # Create a client to a local bloomd server, default port<br>    client = BloomdClient([\"localhost\"])<br><br>    # Get or create the foobar filter<br>    pipe = client.create_filter(\"pipe\").pipeline()<br><br>    # Chain multiple add commands<br>    results = pipe.add(\"foo\").add(\"bar\").add(\"baz\").execute()<br>    assert results[0]<br>    assert results[1]<br>    assert results[2]<br><br><br>\n          </div>"}, "last_serial": 1912017, "releases": {"0.4.7": [{"comment_text": "", "digests": {"md5": "44cb3da6586c58e52cde0eba756b6fec", "sha256": "199a4a8f33f5b3f045d8b3a522197705f988ee8e2a1841fc88198fc2d2df7b69"}, "downloads": -1, "filename": "bloom-python-driver-0.4.7.tar.gz", "has_sig": false, "md5_digest": "44cb3da6586c58e52cde0eba756b6fec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5911, "upload_time": "2016-01-14T14:06:06", "upload_time_iso_8601": "2016-01-14T14:06:06.436852Z", "url": "https://files.pythonhosted.org/packages/c7/fe/e74eda0f96b903d5022e8e3692fefffcdad846aeabe00bc925b2215bd209/bloom-python-driver-0.4.7.tar.gz", "yanked": false}], "0.4.8": [{"comment_text": "", "digests": {"md5": "3f2f8254ea7931a0910db57cd99aef66", "sha256": "f3ffd9f9e8070906c9f5d314d22107fdc5f9853da867cfd4e3532681843338a7"}, "downloads": -1, "filename": "bloom-python-driver-0.4.8.tar.gz", "has_sig": false, "md5_digest": "3f2f8254ea7931a0910db57cd99aef66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5925, "upload_time": "2016-01-19T17:39:26", "upload_time_iso_8601": "2016-01-19T17:39:26.198722Z", "url": "https://files.pythonhosted.org/packages/b6/d6/e91be242a40ee5f58a2f873057a2cd4c91cea0118a3e4a4ef215d87ac872/bloom-python-driver-0.4.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3f2f8254ea7931a0910db57cd99aef66", "sha256": "f3ffd9f9e8070906c9f5d314d22107fdc5f9853da867cfd4e3532681843338a7"}, "downloads": -1, "filename": "bloom-python-driver-0.4.8.tar.gz", "has_sig": false, "md5_digest": "3f2f8254ea7931a0910db57cd99aef66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5925, "upload_time": "2016-01-19T17:39:26", "upload_time_iso_8601": "2016-01-19T17:39:26.198722Z", "url": "https://files.pythonhosted.org/packages/b6/d6/e91be242a40ee5f58a2f873057a2cd4c91cea0118a3e4a4ef215d87ac872/bloom-python-driver-0.4.8.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:00 2020"}