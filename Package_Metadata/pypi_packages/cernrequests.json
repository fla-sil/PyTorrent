{"info": {"author": "Peter Stein", "author_email": "peter.stein@cern.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)"], "description": "[![Build Status](https://travis-ci.com/ptrstn/cernrequests.svg?branch=master)](https://travis-ci.com/ptrstn/cernrequests)\n[![](https://img.shields.io/pypi/v/cernrequests.svg)](https://pypi.org/project/cernrequests/)\n\n\n# CERN Requests\n\nEnables using [requests](\"https://github.com/requests/requests\") without having to configure the CERN Root certificates.\n\nInspired by [certifi](https://github.com/certifi/python-certifi), [requests-kerberos](https://github.com/requests/requests-kerberos) and [cern-sso-python](https://github.com/cerndb/cern-sso-python)\n\nThe Root certificate bundle is copied from the [linuxsoft cern page](http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64/repoview/CERN-CA-certs.html) and can also be created manually by downloading the CERN Grid Certification Authority files from [cafiles.cern.ch/cafiles](https://cafiles.cern.ch/cafiles/).\n\n## Installation\n\nRequires ```Python 2.7``` or ```Python 3.4+```\n\n```bash\npip install cernrequests\n```\n\n## Prerequisites\n\nRequest a [Grid User Certificate](https://ca.cern.ch/ca/) and convert into public and private key:\n\n```bash\nmkdir -p ~/private\nopenssl pkcs12 -clcerts -nokeys -in myCertificate.p12 -out ~/private/usercert.pem\nopenssl pkcs12 -nocerts -in myCertificate.p12 -out ~/private/userkey.tmp.pem\nopenssl rsa -in ~/private/userkey.tmp.pem -out ~/private/userkey.pem\n```\n\nThe certificates have to be **passwordless**.\n\n## Usage\n\n### Example\n\n```python\nimport cernrequests\n\nurl = \"https://<your-cern-website>\"\nresponse = cernrequests.get(url)\n```\n\n### Cookies Example\n\nIf you want to access a website which requires CERN Single Sign-on cookies you can do the following:\n\n```python\nimport cernrequests\n\nurl = \"https://<your-cern-website>\"\ncookies = cernrequests.get_sso_cookies(url)\nresponse = cernrequests.get(url, cookies=cookies)\n```\n\n### Alternative usage\n\nIf you want to use ```requests``` directly without the CERN wrapper you can get the exact same functionality by doing:\n\n```python\nimport requests\nfrom cernrequests import certs\n\nurl = \"https://<your-cern-website>\"\ncert = certs.default_user_certificate_paths()\nca_bundle = certs.where()\n\nresponse = requests.get(url, cert=cert, verify=ca_bundle)\n```\n\n## Configuration\n\nThe default user certificate paths are first ```~\\private\\``` and ```~\\.globus\\``` for fallback. The default *public* key file name is ```usercert.pem``` and the default *private* key file name is ```userkey.pem```\n\nYou can configure the default grid user certificate path by setting the ```CERN_CERTIFICATE_PATH``` environment variable.\n\nFor example:\n\n```bash\nexport CERN_CERTIFICATE_PATH=${HOME}/my_custom_folder\n```\n\nThis will still assume that your filenames are ```usercert.pem``` and ```userkey.pem```\nWrite this line in your ```.bashrc``` to make the configuration persistent.\n\nAlternatively you can also specify the paths directly in your code:\n\n```python\nimport cernrequests\n\nurl = \"https://<your-cern-website>\"\ncert = \"my/custom/path/cert.pem\"    # Public key path\nkey = \"my/custom/path/key.pem\"      # Private key path\n\ncernrequests.get(url, cert=(cert,key))\n```\n\nThis way you can even use custom names such as ```cert.pem``` and ```key.pem```\n\n## References\n\n- http://docs.python-requests.org/en/master/\n- https://certifi.io/en/latest/\n- https://github.com/cerndb/cern-sso-python\n- https://linux.web.cern.ch/linux/docs/cernssocookie.shtml\n- http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64/repoview/CERN-CA-certs.html\n- https://ca.cern.ch/ca/\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ptrstn/cernrequests", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cernrequests", "package_url": "https://pypi.org/project/cernrequests/", "platform": "", "project_url": "https://pypi.org/project/cernrequests/", "project_urls": {"Homepage": "https://github.com/ptrstn/cernrequests"}, "release_url": "https://pypi.org/project/cernrequests/0.3.0/", "requires_dist": ["requests", "future"], "requires_python": "", "summary": "", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/ptrstn/cernrequests\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/402139149bfdb0d4291274dc0919c88f472a491e/68747470733a2f2f7472617669732d63692e636f6d2f70747273746e2f6365726e72657175657374732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/cernrequests/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3001673b9dd1f8bea3109c8af9a29569eeabd0b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6365726e72657175657374732e737667\"></a></p>\n<h1>CERN Requests</h1>\n<p>Enables using <a href=\"%22https://github.com/requests/requests%22\" rel=\"nofollow\">requests</a> without having to configure the CERN Root certificates.</p>\n<p>Inspired by <a href=\"https://github.com/certifi/python-certifi\" rel=\"nofollow\">certifi</a>, <a href=\"https://github.com/requests/requests-kerberos\" rel=\"nofollow\">requests-kerberos</a> and <a href=\"https://github.com/cerndb/cern-sso-python\" rel=\"nofollow\">cern-sso-python</a></p>\n<p>The Root certificate bundle is copied from the <a href=\"http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64/repoview/CERN-CA-certs.html\" rel=\"nofollow\">linuxsoft cern page</a> and can also be created manually by downloading the CERN Grid Certification Authority files from <a href=\"https://cafiles.cern.ch/cafiles/\" rel=\"nofollow\">cafiles.cern.ch/cafiles</a>.</p>\n<h2>Installation</h2>\n<p>Requires <code>Python 2.7</code> or <code>Python 3.4+</code></p>\n<pre>pip install cernrequests\n</pre>\n<h2>Prerequisites</h2>\n<p>Request a <a href=\"https://ca.cern.ch/ca/\" rel=\"nofollow\">Grid User Certificate</a> and convert into public and private key:</p>\n<pre>mkdir -p ~/private\nopenssl pkcs12 -clcerts -nokeys -in myCertificate.p12 -out ~/private/usercert.pem\nopenssl pkcs12 -nocerts -in myCertificate.p12 -out ~/private/userkey.tmp.pem\nopenssl rsa -in ~/private/userkey.tmp.pem -out ~/private/userkey.pem\n</pre>\n<p>The certificates have to be <strong>passwordless</strong>.</p>\n<h2>Usage</h2>\n<h3>Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cernrequests</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://&lt;your-cern-website&gt;\"</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cernrequests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<h3>Cookies Example</h3>\n<p>If you want to access a website which requires CERN Single Sign-on cookies you can do the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cernrequests</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://&lt;your-cern-website&gt;\"</span>\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">cernrequests</span><span class=\"o\">.</span><span class=\"n\">get_sso_cookies</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">cernrequests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"n\">cookies</span><span class=\"p\">)</span>\n</pre>\n<h3>Alternative usage</h3>\n<p>If you want to use <code>requests</code> directly without the CERN wrapper you can get the exact same functionality by doing:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cernrequests</span> <span class=\"kn\">import</span> <span class=\"n\">certs</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://&lt;your-cern-website&gt;\"</span>\n<span class=\"n\">cert</span> <span class=\"o\">=</span> <span class=\"n\">certs</span><span class=\"o\">.</span><span class=\"n\">default_user_certificate_paths</span><span class=\"p\">()</span>\n<span class=\"n\">ca_bundle</span> <span class=\"o\">=</span> <span class=\"n\">certs</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">()</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">cert</span><span class=\"o\">=</span><span class=\"n\">cert</span><span class=\"p\">,</span> <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"n\">ca_bundle</span><span class=\"p\">)</span>\n</pre>\n<h2>Configuration</h2>\n<p>The default user certificate paths are first <code>~\\private\\</code> and <code>~\\.globus\\</code> for fallback. The default <em>public</em> key file name is <code>usercert.pem</code> and the default <em>private</em> key file name is <code>userkey.pem</code></p>\n<p>You can configure the default grid user certificate path by setting the <code>CERN_CERTIFICATE_PATH</code> environment variable.</p>\n<p>For example:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CERN_CERTIFICATE_PATH</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">HOME</span><span class=\"si\">}</span>/my_custom_folder\n</pre>\n<p>This will still assume that your filenames are <code>usercert.pem</code> and <code>userkey.pem</code>\nWrite this line in your <code>.bashrc</code> to make the configuration persistent.</p>\n<p>Alternatively you can also specify the paths directly in your code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cernrequests</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://&lt;your-cern-website&gt;\"</span>\n<span class=\"n\">cert</span> <span class=\"o\">=</span> <span class=\"s2\">\"my/custom/path/cert.pem\"</span>    <span class=\"c1\"># Public key path</span>\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">\"my/custom/path/key.pem\"</span>      <span class=\"c1\"># Private key path</span>\n\n<span class=\"n\">cernrequests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">cert</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">cert</span><span class=\"p\">,</span><span class=\"n\">key</span><span class=\"p\">))</span>\n</pre>\n<p>This way you can even use custom names such as <code>cert.pem</code> and <code>key.pem</code></p>\n<h2>References</h2>\n<ul>\n<li><a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">http://docs.python-requests.org/en/master/</a></li>\n<li><a href=\"https://certifi.io/en/latest/\" rel=\"nofollow\">https://certifi.io/en/latest/</a></li>\n<li><a href=\"https://github.com/cerndb/cern-sso-python\" rel=\"nofollow\">https://github.com/cerndb/cern-sso-python</a></li>\n<li><a href=\"https://linux.web.cern.ch/linux/docs/cernssocookie.shtml\" rel=\"nofollow\">https://linux.web.cern.ch/linux/docs/cernssocookie.shtml</a></li>\n<li><a href=\"http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64/repoview/CERN-CA-certs.html\" rel=\"nofollow\">http://linuxsoft.cern.ch/cern/centos/7/cern/x86_64/repoview/CERN-CA-certs.html</a></li>\n<li><a href=\"https://ca.cern.ch/ca/\" rel=\"nofollow\">https://ca.cern.ch/ca/</a></li>\n</ul>\n\n          </div>"}, "last_serial": 5118904, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "e48693233d6ebf4e12b7fa142d672001", "sha256": "4a8b3e882d58200bac5d3af863bac6dca29d5e182173ee6229c71ba2ea61ebda"}, "downloads": -1, "filename": "cernrequests-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e48693233d6ebf4e12b7fa142d672001", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17870, "upload_time": "2018-12-17T19:11:39", "upload_time_iso_8601": "2018-12-17T19:11:39.939610Z", "url": "https://files.pythonhosted.org/packages/02/b6/027cc93ad416b406e66222ec345b5e32b0c9cce6a1593263dd579763a114/cernrequests-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1034fc56fedd796f7e14775a0b5b04b", "sha256": "0e01b6f49494f505d4deab6e2ec0536a04b04c5371b1296c1608deef480e4446"}, "downloads": -1, "filename": "cernrequests-0.1.3.tar.gz", "has_sig": false, "md5_digest": "e1034fc56fedd796f7e14775a0b5b04b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14201, "upload_time": "2018-12-17T19:11:56", "upload_time_iso_8601": "2018-12-17T19:11:56.434853Z", "url": "https://files.pythonhosted.org/packages/2c/38/ef4bc3d77d74861ce5fa623050da9b3c416d4148a2e5de9f725ae1000fea/cernrequests-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6473941ff140b2b4fc12cc35885846d0", "sha256": "c6bf05488de64abf0c39c7479efb60f53d0fdae17c17a654571118607e92e5b6"}, "downloads": -1, "filename": "cernrequests-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6473941ff140b2b4fc12cc35885846d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18312, "upload_time": "2019-01-07T13:28:57", "upload_time_iso_8601": "2019-01-07T13:28:57.585621Z", "url": "https://files.pythonhosted.org/packages/3b/71/c9e941dcf97119b0813fee905696024d2bf74cd8ddba1e28c6ce45400075/cernrequests-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61974039f0e261d69002f7da92466ea5", "sha256": "8a4b6ad7baaea7a66a638475cb94bc75db1fd8ab1120b0abb7d622444c652a4a"}, "downloads": -1, "filename": "cernrequests-0.2.0.tar.gz", "has_sig": false, "md5_digest": "61974039f0e261d69002f7da92466ea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15479, "upload_time": "2019-01-07T13:28:59", "upload_time_iso_8601": "2019-01-07T13:28:59.152957Z", "url": "https://files.pythonhosted.org/packages/ab/82/4ed9abac445014ca4c2c7207767fd3d0d9ca469ae487bd2bacb11956be83/cernrequests-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "705f2f912cfc4f5e071f21a1720aa1dd", "sha256": "e0e8ea74d4dbbafb0a48eaaae0375b7ca84f675bf8a2204c4f4ca104ce874b02"}, "downloads": -1, "filename": "cernrequests-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "705f2f912cfc4f5e071f21a1720aa1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18347, "upload_time": "2019-04-09T14:00:23", "upload_time_iso_8601": "2019-04-09T14:00:23.460175Z", "url": "https://files.pythonhosted.org/packages/9f/33/4039b90fccf839ac80681503ff43c190cfb59fb9504b8420d5acd4d85874/cernrequests-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "961b82c2a134ada344fcea334f76e696", "sha256": "64414a20818cc08705627bb658391123634fc7203bd62e1ed845f65e96bf31ee"}, "downloads": -1, "filename": "cernrequests-0.3.0.tar.gz", "has_sig": false, "md5_digest": "961b82c2a134ada344fcea334f76e696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15501, "upload_time": "2019-04-09T14:00:25", "upload_time_iso_8601": "2019-04-09T14:00:25.353826Z", "url": "https://files.pythonhosted.org/packages/c2/57/3249327ef5169268357b0f8ba3c42cda9ede53e0667512ce18ebf10d02c3/cernrequests-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "705f2f912cfc4f5e071f21a1720aa1dd", "sha256": "e0e8ea74d4dbbafb0a48eaaae0375b7ca84f675bf8a2204c4f4ca104ce874b02"}, "downloads": -1, "filename": "cernrequests-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "705f2f912cfc4f5e071f21a1720aa1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18347, "upload_time": "2019-04-09T14:00:23", "upload_time_iso_8601": "2019-04-09T14:00:23.460175Z", "url": "https://files.pythonhosted.org/packages/9f/33/4039b90fccf839ac80681503ff43c190cfb59fb9504b8420d5acd4d85874/cernrequests-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "961b82c2a134ada344fcea334f76e696", "sha256": "64414a20818cc08705627bb658391123634fc7203bd62e1ed845f65e96bf31ee"}, "downloads": -1, "filename": "cernrequests-0.3.0.tar.gz", "has_sig": false, "md5_digest": "961b82c2a134ada344fcea334f76e696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15501, "upload_time": "2019-04-09T14:00:25", "upload_time_iso_8601": "2019-04-09T14:00:25.353826Z", "url": "https://files.pythonhosted.org/packages/c2/57/3249327ef5169268357b0f8ba3c42cda9ede53e0667512ce18ebf10d02c3/cernrequests-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:46 2020"}