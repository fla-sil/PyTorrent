{"info": {"author": "Please check authors at http://www.brainvisa.info/soma-workflow", "author_email": "jinpeng.li@cea.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: X11 Applications", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries", "Topic :: System :: Distributed Computing", "Topic :: Utilities"], "description": "=============\nSoma-workflow\n=============\n\n\nMain Features\n=============\n\n  **Unified interface to multiple computing resources:** \n    Submission of jobs or workflows with an unique interface to various \n    parallel resources: multiple core machines or clusters which can be \n    managed by various systems (such as Grid Engine, Condor, Torque/PBS, LSF..)\n\n  **Workflow management:**\n    Soma-workflow provides the possibility to submit a set of tasks (called jobs) \n    with execution dependencies without dealing with individual task submission.\n\n  **Python API and Graphical User Interface:**\n    The Python API was designed to be easily used by non expert user, but also\n    complete to meet external software needs: submission, control and monitoring \n    of jobs and workflows. The GUI provides an easy and quick way of monitoring \n    workflows on various computing resources. The workflows can also be \n    submitted and controlled using the GUI.\n\n  **Quick start on multiple core machines:**\n    Soma-workflow is directly operational on any multiple core machine. \n    \n  **Transparent remote access to computing resources:** \n    When the computing resource is remote, Soma-workflow can be used as a   \n    client-server application. The communication with a remote computing \n    resource is done transparently for the user through a ssh port forwarding \n    tunnel. The client/server architecture enables the user to close the client \n    application at any time. The workflows and jobs execution are not stopped. \n    The user can open a client at any time to check the status of his \n    work.\n\n  **File transfer and file path mapping tools:** \n    If the user's machine and the remote computing resource do not have a shared \n    file system, Soma-workflow provides tools to handle file transfers and/or \n    path name matchings.\n\nDocumentation\n=============\n\n  Visit Soma-workflow (http://www.brainvisa.info/soma-workflow) main page!\n\n  An extensive documentation (http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/index.html) is available, \n  with ready to use examples (http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/examples.html).\n\n\nDownload\n========\n\n  Soma-workflow is available on pypi to download: https://pypi.python.org/pypi/soma-workflow.\n\n\n\nInstallation\n=============\n\n  Qt version 4.6.2 or more, PyQt version 4.7.2 or more or PySide version 1.1.1 or\n  more are required if you want to use the graphical interface. \n\n  To provide you quickly with a functional application, your own multiple core \n  machine can be used directly and without any configuration to distribute \n  computation, no matter the installation mode chosen.\n\n\n  **Full installation in Ubuntu:**\n  \n  Installation required packages,\n  python-qt4 (graphical interface), \n  python-matplotlib (option), \n  python-paramiko (option: required to connect server), \n  pyro (option: required to connect server) :\n      \n      $ sudo apt-get update\n\n      $ sudo apt-get install python-qt4 python-matplotlib python-paramiko pyro\n\n  Download soma-workflow and go to soma-workflow directory:\n      \n      $ sudo python setup.py install\n\n  Try soma-workflow in terminal with:\n      \n      $ soma_workflow_gui\n\n  **Manually Installation (for all other systems)**\n\n  Download and install those packages: \n     python-qt4 (graphical interface), \n     python-matplotlib (option), \n     python-paramiko (required to connect server), \n     pyro (required to connect server)   \n  \n  1. Download soma-workflow into soma-workflow-path\n\n  2. Set PYTHONPATH contains soma-workflow-path/python, and PATH contains soma-workflow-path/bin\n\n    2.1: For example, in Linux, add lines in ~/.bashrc\n        \n         $ export PYTHONPATH=soma-workflow-path/python:$PYTHONPATH\n\n         $ export PATH=soma-workflow-path/bin:$PATH\n\n  3. Try soma-workflow in terminal with:\n\n    $ soma_workflow_gui", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.brainvisa.info/soma-workflow", "keywords": null, "license": "CeCILL v2", "maintainer": null, "maintainer_email": null, "name": "soma-workflow_test", "package_url": "https://pypi.org/project/soma-workflow_test/", "platform": "Linux,MacOS X,Windows", "project_url": "https://pypi.org/project/soma-workflow_test/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.brainvisa.info/soma-workflow"}, "release_url": "https://pypi.org/project/soma-workflow_test/2.3aa/", "requires_dist": null, "requires_python": null, "summary": "Soma-workflow is a unified and simple interface to parallel computingresources. It aims at making easier the use of parallel resources bynon expert users and software.", "version": "2.3aa", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"main-features\">\n<h2>Main Features</h2>\n<blockquote>\n<dl>\n<dt><strong>Unified interface to multiple computing resources:</strong></dt>\n<dd>Submission of jobs or workflows with an unique interface to various\nparallel resources: multiple core machines or clusters which can be\nmanaged by various systems (such as Grid Engine, Condor, Torque/PBS, LSF..)</dd>\n<dt><strong>Workflow management:</strong></dt>\n<dd>Soma-workflow provides the possibility to submit a set of tasks (called jobs)\nwith execution dependencies without dealing with individual task submission.</dd>\n<dt><strong>Python API and Graphical User Interface:</strong></dt>\n<dd>The Python API was designed to be easily used by non expert user, but also\ncomplete to meet external software needs: submission, control and monitoring\nof jobs and workflows. The GUI provides an easy and quick way of monitoring\nworkflows on various computing resources. The workflows can also be\nsubmitted and controlled using the GUI.</dd>\n<dt><strong>Quick start on multiple core machines:</strong></dt>\n<dd>Soma-workflow is directly operational on any multiple core machine.</dd>\n<dt><strong>Transparent remote access to computing resources:</strong></dt>\n<dd>When the computing resource is remote, Soma-workflow can be used as a\nclient-server application. The communication with a remote computing\nresource is done transparently for the user through a ssh port forwarding\ntunnel. The client/server architecture enables the user to close the client\napplication at any time. The workflows and jobs execution are not stopped.\nThe user can open a client at any time to check the status of his\nwork.</dd>\n<dt><strong>File transfer and file path mapping tools:</strong></dt>\n<dd>If the user\u2019s machine and the remote computing resource do not have a shared\nfile system, Soma-workflow provides tools to handle file transfers and/or\npath name matchings.</dd>\n</dl>\n</blockquote>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<blockquote>\n<p>Visit Soma-workflow (<a href=\"http://www.brainvisa.info/soma-workflow\" rel=\"nofollow\">http://www.brainvisa.info/soma-workflow</a>) main page!</p>\n<p>An extensive documentation (<a href=\"http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/index.html\" rel=\"nofollow\">http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/index.html</a>) is available,\nwith ready to use examples (<a href=\"http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/examples.html\" rel=\"nofollow\">http://www.brainvisa.info/doc/soma-workflow-2.4/sphinx/examples.html</a>).</p>\n</blockquote>\n</div>\n<div id=\"download\">\n<h2>Download</h2>\n<blockquote>\nSoma-workflow is available on pypi to download: <a href=\"https://pypi.python.org/pypi/soma-workflow\" rel=\"nofollow\">https://pypi.python.org/pypi/soma-workflow</a>.</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n<p>Qt version 4.6.2 or more, PyQt version 4.7.2 or more or PySide version 1.1.1 or\nmore are required if you want to use the graphical interface.</p>\n<p>To provide you quickly with a functional application, your own multiple core\nmachine can be used directly and without any configuration to distribute\ncomputation, no matter the installation mode chosen.</p>\n<p><strong>Full installation in Ubuntu:</strong></p>\n<p>Installation required packages,\npython-qt4 (graphical interface),\npython-matplotlib (option),\npython-paramiko (option: required to connect server),\npyro (option: required to connect server) :</p>\n<blockquote>\n<p>$ sudo apt-get update</p>\n<p>$ sudo apt-get install python-qt4 python-matplotlib python-paramiko pyro</p>\n</blockquote>\n<p>Download soma-workflow and go to soma-workflow directory:</p>\n<blockquote>\n$ sudo python setup.py install</blockquote>\n<p>Try soma-workflow in terminal with:</p>\n<blockquote>\n$ soma_workflow_gui</blockquote>\n<p><strong>Manually Installation (for all other systems)</strong></p>\n<dl>\n<dt>Download and install those packages:</dt>\n<dd>python-qt4 (graphical interface),\npython-matplotlib (option),\npython-paramiko (required to connect server),\npyro (required to connect server)</dd>\n</dl>\n<ol>\n<li>Download soma-workflow into soma-workflow-path</li>\n<li>Set PYTHONPATH contains soma-workflow-path/python, and PATH contains soma-workflow-path/bin</li>\n</ol>\n<blockquote>\n<p>2.1: For example, in Linux, add lines in ~/.bashrc</p>\n<blockquote>\n<p>$ export PYTHONPATH=soma-workflow-path/python:$PYTHONPATH</p>\n<p>$ export PATH=soma-workflow-path/bin:$PATH</p>\n</blockquote>\n</blockquote>\n<ol>\n<li>Try soma-workflow in terminal with:</li>\n</ol>\n<blockquote>\n$ soma_workflow_gui</blockquote>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 928615, "releases": {"2.3aa": [{"comment_text": "", "digests": {"md5": "8ef10c64def5d5c6887bafe461aeb60f", "sha256": "a7ee9b6f454963c713254453c6b1cd19573547c2009011a32c6b1c0b72834046"}, "downloads": -1, "filename": "soma-workflow_test-2.3aa.tar.gz", "has_sig": false, "md5_digest": "8ef10c64def5d5c6887bafe461aeb60f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232716, "upload_time": "2013-05-18T18:37:47", "upload_time_iso_8601": "2013-05-18T18:37:47.699803Z", "url": "https://files.pythonhosted.org/packages/13/ca/f51ebea5c86b401f6e7466b83ca8698120b0a6c5d3336925ba583b74ca08/soma-workflow_test-2.3aa.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ef10c64def5d5c6887bafe461aeb60f", "sha256": "a7ee9b6f454963c713254453c6b1cd19573547c2009011a32c6b1c0b72834046"}, "downloads": -1, "filename": "soma-workflow_test-2.3aa.tar.gz", "has_sig": false, "md5_digest": "8ef10c64def5d5c6887bafe461aeb60f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 232716, "upload_time": "2013-05-18T18:37:47", "upload_time_iso_8601": "2013-05-18T18:37:47.699803Z", "url": "https://files.pythonhosted.org/packages/13/ca/f51ebea5c86b401f6e7466b83ca8698120b0a6c5d3336925ba583b74ca08/soma-workflow_test-2.3aa.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:41 2020"}