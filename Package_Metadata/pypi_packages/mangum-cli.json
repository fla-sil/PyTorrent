{"info": {"author": "Jordan Eremieff", "author_email": "jordan@eremieff.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Mangum CLI\n\nThis package provides a command-line interface for generating AWS Lambda & API Gateway deployments used with [Mangum](https://github.com/erm/mangum).\n\n**Note**: This is a work-in-progress. PRs welcomed.\n\n**Requirements**: Python3.7+\n\n## Installation\n\n```shell\npip install mangum-cli\n```\n\n## Commands\n\n`mangum init` - Create a new deployment configuration.\n\n`mangum build` - Create a local build.\n\n`mangum deploy` - Deploy the packaged project.\n\n`mangum package` -  Package the local build.\n\n`mangum all` - `build`, `package`, and `deploy`.\n\n`mangum describe` -  Retrieve the endpoints for the deployment.\n\n`mangum validate` - Validate the AWS CloudFormation template.\n\n`mangum delete` - Delete the CloudFormation stack.\n\n## Tutorial\n\nThe steps below outline a basic [FastAPI](https://fastapi.tiangolo.com/) deployment, however you should be able to use any ASGI framework/application with the adapter.\n\n### Step 1 - Create a local project\n\nFirst, create a new directory `app/`, this is the folder that will contain the main application code and function handler.\n\nThen create a file `asgi.py` with the following:\n\n```python\nfrom mangum import Mangum\nfrom fastapi import FastAPI\n\n\napp = FastAPI()\n\n\n@app.post(\"/items/\")\ndef create_item(item_id: int):\n    return {\"id\": item_id}\n\n\n@app.get(\"/items/\")\ndef list_items():\n    items = [{\"id\": i} for i in range(10)]\n    return items\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World!\"}\n\n\nhandler = Mangum(app)\n\n```\n\nThis demonstrates a basic FastAPI application, the most relevant part is:\n\n```python\nhandler = Mangum(app)\n```\n\nThe `handler` variable will be used as the handler name defined in the CloudFormation template to be generated later.\n\nLastly, create a `requirements.txt` file to include Mangum and FastAPI in the build:\n\n```\nmangum\nfastapi\n```\n\n\n### Step 2 - Create a new deployment configuration\n    \nRun the following command with a name for the project (required) and optionally include the name of an S3 bucket, the region and the runtime version (these values can be changed later):\n\n```shell\nmangum init <name> [bucket-name] [region-name] [runtime]\n```\n\nAfter defining the configuration a `mangum.yml` file will be generated, the current directory should now look this:\n\n```shell\n\n\u251c\u2500\u2500 app\n\u2502   \u2514\u2500\u2500 asgi.py\n\u251c\u2500\u2500 mangum.yml\n\u2514\u2500\u2500 requirements.txt\n```\n\n### Step 3 - Create a local build\n\nRun the following command to create a local application build:\n\n```shell\nmangum build\n```\n\nThis will create a `build/` directory containing the application code and any dependencies included in `requirements.txt`.\n\n### Step 4 - Package the local build\n\nRun the following command to package the local build:\n\n```shell\nmangum package\n```\n\nThis wraps the AWS CLI's `package` command, it uses the definitions in `mangum.yml` to produce a `packaged.yml` file and a `template.yml` file.\n\n### Step 5 - Deploy the packaged build\n\nRun the following command to deploy the packaged build:\n\n```shell\nmangum deploy\n```\n\nThis wraps the AWS CLI's `deploy` command. It may take a few minutes to complete. If successful, the endpoints for the deployed application will be displayed in the console.\n\n### Step 6 - Delete CloudFormation stack\n\nRun the following command to delete the CloudFormation stack:\n\n```shell\nmangum delete\n```\n\n### Appendix.A - Enable shell completion.\n\nYou can enable shell completion by running the install option.\n\n```shell\nmangum complement bash\n```\n\nCandidates can be displayed by pressing the tab key.\n\n```sh\n$ mangum [TAB][TAB]\nall            complement     delete         describe       package\nbuild          create-bucket  deploy         init           validate\n```\n\n### Appendix.B - `build`, `package`, and `deploy`.\n\nIf you want to execute build, package, and deploy sequentially, do as follows:\n\n```shell\nmangum all\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erm/mangum-cli", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mangum-cli", "package_url": "https://pypi.org/project/mangum-cli/", "platform": "", "project_url": "https://pypi.org/project/mangum-cli/", "project_urls": {"Homepage": "https://github.com/erm/mangum-cli"}, "release_url": "https://pypi.org/project/mangum-cli/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "CLI tools for Mangum", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mangum CLI</h1>\n<p>This package provides a command-line interface for generating AWS Lambda &amp; API Gateway deployments used with <a href=\"https://github.com/erm/mangum\" rel=\"nofollow\">Mangum</a>.</p>\n<p><strong>Note</strong>: This is a work-in-progress. PRs welcomed.</p>\n<p><strong>Requirements</strong>: Python3.7+</p>\n<h2>Installation</h2>\n<pre>pip install mangum-cli\n</pre>\n<h2>Commands</h2>\n<p><code>mangum init</code> - Create a new deployment configuration.</p>\n<p><code>mangum build</code> - Create a local build.</p>\n<p><code>mangum deploy</code> - Deploy the packaged project.</p>\n<p><code>mangum package</code> -  Package the local build.</p>\n<p><code>mangum all</code> - <code>build</code>, <code>package</code>, and <code>deploy</code>.</p>\n<p><code>mangum describe</code> -  Retrieve the endpoints for the deployment.</p>\n<p><code>mangum validate</code> - Validate the AWS CloudFormation template.</p>\n<p><code>mangum delete</code> - Delete the CloudFormation stack.</p>\n<h2>Tutorial</h2>\n<p>The steps below outline a basic <a href=\"https://fastapi.tiangolo.com/\" rel=\"nofollow\">FastAPI</a> deployment, however you should be able to use any ASGI framework/application with the adapter.</p>\n<h3>Step 1 - Create a local project</h3>\n<p>First, create a new directory <code>app/</code>, this is the folder that will contain the main application code and function handler.</p>\n<p>Then create a file <code>asgi.py</code> with the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mangum</span> <span class=\"kn\">import</span> <span class=\"n\">Mangum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">FastAPI</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">\"/items/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_item</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"n\">item_id</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/items/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">list_items</span><span class=\"p\">():</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"p\">}</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">items</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_root</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"World!\"</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">Mangum</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>This demonstrates a basic FastAPI application, the most relevant part is:</p>\n<pre><span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">Mangum</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>handler</code> variable will be used as the handler name defined in the CloudFormation template to be generated later.</p>\n<p>Lastly, create a <code>requirements.txt</code> file to include Mangum and FastAPI in the build:</p>\n<pre><code>mangum\nfastapi\n</code></pre>\n<h3>Step 2 - Create a new deployment configuration</h3>\n<p>Run the following command with a name for the project (required) and optionally include the name of an S3 bucket, the region and the runtime version (these values can be changed later):</p>\n<pre>mangum init &lt;name&gt; <span class=\"o\">[</span>bucket-name<span class=\"o\">]</span> <span class=\"o\">[</span>region-name<span class=\"o\">]</span> <span class=\"o\">[</span>runtime<span class=\"o\">]</span>\n</pre>\n<p>After defining the configuration a <code>mangum.yml</code> file will be generated, the current directory should now look this:</p>\n<pre>\u251c\u2500\u2500 app\n\u2502   \u2514\u2500\u2500 asgi.py\n\u251c\u2500\u2500 mangum.yml\n\u2514\u2500\u2500 requirements.txt\n</pre>\n<h3>Step 3 - Create a local build</h3>\n<p>Run the following command to create a local application build:</p>\n<pre>mangum build\n</pre>\n<p>This will create a <code>build/</code> directory containing the application code and any dependencies included in <code>requirements.txt</code>.</p>\n<h3>Step 4 - Package the local build</h3>\n<p>Run the following command to package the local build:</p>\n<pre>mangum package\n</pre>\n<p>This wraps the AWS CLI's <code>package</code> command, it uses the definitions in <code>mangum.yml</code> to produce a <code>packaged.yml</code> file and a <code>template.yml</code> file.</p>\n<h3>Step 5 - Deploy the packaged build</h3>\n<p>Run the following command to deploy the packaged build:</p>\n<pre>mangum deploy\n</pre>\n<p>This wraps the AWS CLI's <code>deploy</code> command. It may take a few minutes to complete. If successful, the endpoints for the deployed application will be displayed in the console.</p>\n<h3>Step 6 - Delete CloudFormation stack</h3>\n<p>Run the following command to delete the CloudFormation stack:</p>\n<pre>mangum delete\n</pre>\n<h3>Appendix.A - Enable shell completion.</h3>\n<p>You can enable shell completion by running the install option.</p>\n<pre>mangum complement bash\n</pre>\n<p>Candidates can be displayed by pressing the tab key.</p>\n<pre>$ mangum <span class=\"o\">[</span>TAB<span class=\"o\">][</span>TAB<span class=\"o\">]</span>\nall            complement     delete         describe       package\nbuild          create-bucket  deploy         init           validate\n</pre>\n<h3>Appendix.B - <code>build</code>, <code>package</code>, and <code>deploy</code>.</h3>\n<p>If you want to execute build, package, and deploy sequentially, do as follows:</p>\n<pre>mangum all\n</pre>\n\n          </div>"}, "last_serial": 6775592, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7cd1581267c7d598d0285c4db25d5634", "sha256": "d373380f4b92764bf71dca980bd45c6d49b9ca6d7c1404d58bf12306827c8ec2"}, "downloads": -1, "filename": "mangum-cli-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7cd1581267c7d598d0285c4db25d5634", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9499, "upload_time": "2019-08-22T00:05:51", "upload_time_iso_8601": "2019-08-22T00:05:51.146039Z", "url": "https://files.pythonhosted.org/packages/07/3c/ec5ffda3efcb14feadb931c41f4de3404bd40351a358e98a50ab8260f7f2/mangum-cli-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "2f730af7a8dd5536c7055579576579dd", "sha256": "8172f363c2b322c10229fbafaef3d0a2f13cc84714a228c7ee3b8f20dd8be8b1"}, "downloads": -1, "filename": "mangum-cli-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f730af7a8dd5536c7055579576579dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11109, "upload_time": "2020-03-09T08:58:12", "upload_time_iso_8601": "2020-03-09T08:58:12.919120Z", "url": "https://files.pythonhosted.org/packages/cd/45/2343e291450712b7fea6adca8264f058c6aa2b625879282f0a552941482d/mangum-cli-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f730af7a8dd5536c7055579576579dd", "sha256": "8172f363c2b322c10229fbafaef3d0a2f13cc84714a228c7ee3b8f20dd8be8b1"}, "downloads": -1, "filename": "mangum-cli-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f730af7a8dd5536c7055579576579dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11109, "upload_time": "2020-03-09T08:58:12", "upload_time_iso_8601": "2020-03-09T08:58:12.919120Z", "url": "https://files.pythonhosted.org/packages/cd/45/2343e291450712b7fea6adca8264f058c6aa2b625879282f0a552941482d/mangum-cli-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:34 2020"}